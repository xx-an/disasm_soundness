
/*
--------------------------------------------------------------------------------

        File: /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/nl
        UUID: 74FE99DE-28C5-5EA5-CE85-606C9356C74C
        Analysis version 58
        ELF file
        CPU: intel/x86_64
        64 bits addresses (Little Endian)

--------------------------------------------------------------------------------
*/



        ; Segment Segment 2
        ; Range: [0x0; 0x188c0[ (100544 bytes)
        ; File offset : [0; 100544[ (100544 bytes)
        ; Permissions: readable / executable
        ; Flags: 0x5

0000000000000000         db  0x7f ; '.'
0000000000000001         db  0x45 ; 'E'
0000000000000002         db  0x4c ; 'L'
0000000000000003         db  0x46 ; 'F'
0000000000000004         db  0x02 ; '.'
0000000000000005         db  0x01 ; '.'
0000000000000006         db  0x01 ; '.'
0000000000000007         db  0x00 ; '.'
0000000000000008         db  0x00 ; '.'
0000000000000009         db  0x00 ; '.'
000000000000000a         db  0x00 ; '.'
000000000000000b         db  0x00 ; '.'
000000000000000c         db  0x00 ; '.'
000000000000000d         db  0x00 ; '.'
000000000000000e         db  0x00 ; '.'
000000000000000f         db  0x00 ; '.'
0000000000000010         db  0x03 ; '.'
0000000000000011         db  0x00 ; '.'
0000000000000012         db  0x3e ; '>'
0000000000000013         db  0x00 ; '.'
0000000000000014         db  0x01 ; '.'
0000000000000015         db  0x00 ; '.'
0000000000000016         db  0x00 ; '.'
0000000000000017         db  0x00 ; '.'
0000000000000018         db  0x10 ; '.'
0000000000000019         db  0x23 ; '#'
000000000000001a         db  0x00 ; '.'
000000000000001b         db  0x00 ; '.'
000000000000001c         db  0x00 ; '.'
000000000000001d         db  0x00 ; '.'
000000000000001e         db  0x00 ; '.'
000000000000001f         db  0x00 ; '.'
0000000000000020         db  0x40 ; '@'
0000000000000021         db  0x00 ; '.'
0000000000000022         db  0x00 ; '.'
0000000000000023         db  0x00 ; '.'
0000000000000024         db  0x00 ; '.'
0000000000000025         db  0x00 ; '.'
0000000000000026         db  0x00 ; '.'
0000000000000027         db  0x00 ; '.'
0000000000000028         db  0x00 ; '.'
0000000000000029         db  0x9b ; '.'
000000000000002a         db  0x07 ; '.'
000000000000002b         db  0x00 ; '.'
000000000000002c         db  0x00 ; '.'
000000000000002d         db  0x00 ; '.'
000000000000002e         db  0x00 ; '.'
000000000000002f         db  0x00 ; '.'
0000000000000030         db  0x00 ; '.'
0000000000000031         db  0x00 ; '.'
0000000000000032         db  0x00 ; '.'
0000000000000033         db  0x00 ; '.'
0000000000000034         db  0x40 ; '@'
0000000000000035         db  0x00 ; '.'
0000000000000036         db  0x38 ; '8'
0000000000000037         db  0x00 ; '.'
0000000000000038         db  0x09 ; '.'
0000000000000039         db  0x00 ; '.'
000000000000003a         db  0x40 ; '@'
000000000000003b         db  0x00 ; '.'
000000000000003c         db  0x25 ; '%'
000000000000003d         db  0x00 ; '.'
000000000000003e         db  0x24 ; '$'
000000000000003f         db  0x00 ; '.'
0000000000000040         db  0x06 ; '.'
0000000000000041         db  0x00 ; '.'
0000000000000042         db  0x00 ; '.'
0000000000000043         db  0x00 ; '.'
0000000000000044         db  0x04 ; '.'
0000000000000045         db  0x00 ; '.'
0000000000000046         db  0x00 ; '.'
0000000000000047         db  0x00 ; '.'
0000000000000048         db  0x40 ; '@'
0000000000000049         db  0x00 ; '.'
000000000000004a         db  0x00 ; '.'
000000000000004b         db  0x00 ; '.'
000000000000004c         db  0x00 ; '.'
000000000000004d         db  0x00 ; '.'
000000000000004e         db  0x00 ; '.'
000000000000004f         db  0x00 ; '.'
0000000000000050         db  0x40 ; '@'
0000000000000051         db  0x00 ; '.'
0000000000000052         db  0x00 ; '.'
0000000000000053         db  0x00 ; '.'
0000000000000054         db  0x00 ; '.'
0000000000000055         db  0x00 ; '.'
0000000000000056         db  0x00 ; '.'
0000000000000057         db  0x00 ; '.'
0000000000000058         db  0x40 ; '@'
0000000000000059         db  0x00 ; '.'
000000000000005a         db  0x00 ; '.'
000000000000005b         db  0x00 ; '.'
000000000000005c         db  0x00 ; '.'
000000000000005d         db  0x00 ; '.'
000000000000005e         db  0x00 ; '.'
000000000000005f         db  0x00 ; '.'
0000000000000060         db  0xf8 ; '.'
0000000000000061         db  0x01 ; '.'
0000000000000062         db  0x00 ; '.'
0000000000000063         db  0x00 ; '.'
0000000000000064         db  0x00 ; '.'
0000000000000065         db  0x00 ; '.'
0000000000000066         db  0x00 ; '.'
0000000000000067         db  0x00 ; '.'
0000000000000068         db  0xf8 ; '.'
0000000000000069         db  0x01 ; '.'
000000000000006a         db  0x00 ; '.'
000000000000006b         db  0x00 ; '.'
000000000000006c         db  0x00 ; '.'
000000000000006d         db  0x00 ; '.'
000000000000006e         db  0x00 ; '.'
000000000000006f         db  0x00 ; '.'
0000000000000070         db  0x08 ; '.'
0000000000000071         db  0x00 ; '.'
0000000000000072         db  0x00 ; '.'
0000000000000073         db  0x00 ; '.'
0000000000000074         db  0x00 ; '.'
0000000000000075         db  0x00 ; '.'
0000000000000076         db  0x00 ; '.'
0000000000000077         db  0x00 ; '.'
0000000000000078         db  0x03 ; '.'
0000000000000079         db  0x00 ; '.'
000000000000007a         db  0x00 ; '.'
000000000000007b         db  0x00 ; '.'
000000000000007c         db  0x04 ; '.'
000000000000007d         db  0x00 ; '.'
000000000000007e         db  0x00 ; '.'
000000000000007f         db  0x00 ; '.'
0000000000000080         db  0x38 ; '8'
0000000000000081         db  0x02 ; '.'
0000000000000082         db  0x00 ; '.'
0000000000000083         db  0x00 ; '.'
0000000000000084         db  0x00 ; '.'
0000000000000085         db  0x00 ; '.'
0000000000000086         db  0x00 ; '.'
0000000000000087         db  0x00 ; '.'
0000000000000088         db  0x38 ; '8'
0000000000000089         db  0x02 ; '.'
000000000000008a         db  0x00 ; '.'
000000000000008b         db  0x00 ; '.'
000000000000008c         db  0x00 ; '.'
000000000000008d         db  0x00 ; '.'
000000000000008e         db  0x00 ; '.'
000000000000008f         db  0x00 ; '.'
0000000000000090         db  0x38 ; '8'
0000000000000091         db  0x02 ; '.'
0000000000000092         db  0x00 ; '.'
0000000000000093         db  0x00 ; '.'
0000000000000094         db  0x00 ; '.'
0000000000000095         db  0x00 ; '.'
0000000000000096         db  0x00 ; '.'
0000000000000097         db  0x00 ; '.'
0000000000000098         db  0x1c ; '.'
0000000000000099         db  0x00 ; '.'
000000000000009a         db  0x00 ; '.'
000000000000009b         db  0x00 ; '.'
000000000000009c         db  0x00 ; '.'
000000000000009d         db  0x00 ; '.'
000000000000009e         db  0x00 ; '.'
000000000000009f         db  0x00 ; '.'
00000000000000a0         db  0x1c ; '.'
00000000000000a1         db  0x00 ; '.'
00000000000000a2         db  0x00 ; '.'
00000000000000a3         db  0x00 ; '.'
00000000000000a4         db  0x00 ; '.'
00000000000000a5         db  0x00 ; '.'
00000000000000a6         db  0x00 ; '.'
00000000000000a7         db  0x00 ; '.'
00000000000000a8         db  0x01 ; '.'
00000000000000a9         db  0x00 ; '.'
00000000000000aa         db  0x00 ; '.'
00000000000000ab         db  0x00 ; '.'
00000000000000ac         db  0x00 ; '.'
00000000000000ad         db  0x00 ; '.'
00000000000000ae         db  0x00 ; '.'
00000000000000af         db  0x00 ; '.'
00000000000000b0         db  0x01 ; '.'
00000000000000b1         db  0x00 ; '.'
00000000000000b2         db  0x00 ; '.'
00000000000000b3         db  0x00 ; '.'
00000000000000b4         db  0x05 ; '.'
00000000000000b5         db  0x00 ; '.'
00000000000000b6         db  0x00 ; '.'
00000000000000b7         db  0x00 ; '.'
00000000000000b8         db  0x00 ; '.'
00000000000000b9         db  0x00 ; '.'
00000000000000ba         db  0x00 ; '.'
00000000000000bb         db  0x00 ; '.'
00000000000000bc         db  0x00 ; '.'
00000000000000bd         db  0x00 ; '.'
00000000000000be         db  0x00 ; '.'
00000000000000bf         db  0x00 ; '.'
00000000000000c0         db  0x00 ; '.'
00000000000000c1         db  0x00 ; '.'
00000000000000c2         db  0x00 ; '.'
00000000000000c3         db  0x00 ; '.'
00000000000000c4         db  0x00 ; '.'
00000000000000c5         db  0x00 ; '.'
00000000000000c6         db  0x00 ; '.'
00000000000000c7         db  0x00 ; '.'
00000000000000c8         db  0x00 ; '.'
00000000000000c9         db  0x00 ; '.'
00000000000000ca         db  0x00 ; '.'
00000000000000cb         db  0x00 ; '.'
00000000000000cc         db  0x00 ; '.'
00000000000000cd         db  0x00 ; '.'
00000000000000ce         db  0x00 ; '.'
00000000000000cf         db  0x00 ; '.'
00000000000000d0         db  0xc0 ; '.'
00000000000000d1         db  0x88 ; '.'
00000000000000d2         db  0x01 ; '.'
00000000000000d3         db  0x00 ; '.'
00000000000000d4         db  0x00 ; '.'
00000000000000d5         db  0x00 ; '.'
00000000000000d6         db  0x00 ; '.'
00000000000000d7         db  0x00 ; '.'
00000000000000d8         db  0xc0 ; '.'
00000000000000d9         db  0x88 ; '.'
00000000000000da         db  0x01 ; '.'
00000000000000db         db  0x00 ; '.'
00000000000000dc         db  0x00 ; '.'
00000000000000dd         db  0x00 ; '.'
00000000000000de         db  0x00 ; '.'
00000000000000df         db  0x00 ; '.'
00000000000000e0         db  0x00 ; '.'
00000000000000e1         db  0x00 ; '.'
00000000000000e2         db  0x20 ; ' '
00000000000000e3         db  0x00 ; '.'
00000000000000e4         db  0x00 ; '.'
00000000000000e5         db  0x00 ; '.'
00000000000000e6         db  0x00 ; '.'
00000000000000e7         db  0x00 ; '.'
00000000000000e8         db  0x01 ; '.'
00000000000000e9         db  0x00 ; '.'
00000000000000ea         db  0x00 ; '.'
00000000000000eb         db  0x00 ; '.'
00000000000000ec         db  0x06 ; '.'
00000000000000ed         db  0x00 ; '.'
00000000000000ee         db  0x00 ; '.'
00000000000000ef         db  0x00 ; '.'
00000000000000f0         db  0xb0 ; '.'
00000000000000f1         db  0x89 ; '.'
00000000000000f2         db  0x01 ; '.'
00000000000000f3         db  0x00 ; '.'
00000000000000f4         db  0x00 ; '.'
00000000000000f5         db  0x00 ; '.'
00000000000000f6         db  0x00 ; '.'
00000000000000f7         db  0x00 ; '.'
00000000000000f8         db  0xb0 ; '.'
00000000000000f9         db  0x89 ; '.'
00000000000000fa         db  0x21 ; '!'
00000000000000fb         db  0x00 ; '.'
00000000000000fc         db  0x00 ; '.'
00000000000000fd         db  0x00 ; '.'
00000000000000fe         db  0x00 ; '.'
00000000000000ff         db  0x00 ; '.'
0000000000000100         db  0xb0 ; '.'                                         ; DATA XREF=quotearg_free+87, rpl_fflush+18, build_trtable+736, build_trtable+2820, build_charclass.isra.29+219, build_charclass.isra.29+299, build_charclass.isra.29+540, build_charclass.isra.29+612, build_charclass.isra.29+748, build_charclass.isra.29+806, build_charclass.isra.29+876
0000000000000101         db  0x89 ; '.'
0000000000000102         db  0x21 ; '!'
0000000000000103         db  0x00 ; '.'
0000000000000104         db  0x00 ; '.'
0000000000000105         db  0x00 ; '.'
0000000000000106         db  0x00 ; '.'
0000000000000107         db  0x00 ; '.'
0000000000000108         db  0x30 ; '0'                                         ; DATA XREF=build_trtable+18, build_trtable+1065
0000000000000109         db  0x07 ; '.'
000000000000010a         db  0x00 ; '.'
000000000000010b         db  0x00 ; '.'
000000000000010c         db  0x00 ; '.'
000000000000010d         db  0x00 ; '.'
000000000000010e         db  0x00 ; '.'
000000000000010f         db  0x00 ; '.'
0000000000000110         db  0x30 ; '0'
0000000000000111         db  0x0d ; '.'
0000000000000112         db  0x00 ; '.'
0000000000000113         db  0x00 ; '.'
0000000000000114         db  0x00 ; '.'
0000000000000115         db  0x00 ; '.'
0000000000000116         db  0x00 ; '.'
0000000000000117         db  0x00 ; '.'
0000000000000118         db  0x00 ; '.'
0000000000000119         db  0x00 ; '.'
000000000000011a         db  0x20 ; ' '
000000000000011b         db  0x00 ; '.'
000000000000011c         db  0x00 ; '.'
000000000000011d         db  0x00 ; '.'
000000000000011e         db  0x00 ; '.'
000000000000011f         db  0x00 ; '.'
0000000000000120         db  0x02 ; '.'
0000000000000121         db  0x00 ; '.'
0000000000000122         db  0x00 ; '.'
0000000000000123         db  0x00 ; '.'
0000000000000124         db  0x06 ; '.'
0000000000000125         db  0x00 ; '.'
0000000000000126         db  0x00 ; '.'
0000000000000127         db  0x00 ; '.'
0000000000000128         db  0xd8 ; '.'                                         ; DATA XREF=parse_expression+10, sub_10f30+156, re_compile_internal+10, re_compile_internal+947
0000000000000129         db  0x8b ; '.'
000000000000012a         db  0x01 ; '.'
000000000000012b         db  0x00 ; '.'
000000000000012c         db  0x00 ; '.'
000000000000012d         db  0x00 ; '.'
000000000000012e         db  0x00 ; '.'
000000000000012f         db  0x00 ; '.'
0000000000000130         db  0xd8 ; '.'
0000000000000131         db  0x8b ; '.'
0000000000000132         db  0x21 ; '!'
0000000000000133         db  0x00 ; '.'
0000000000000134         db  0x00 ; '.'
0000000000000135         db  0x00 ; '.'
0000000000000136         db  0x00 ; '.'
0000000000000137         db  0x00 ; '.'
0000000000000138         db  0xd8 ; '.'
0000000000000139         db  0x8b ; '.'
000000000000013a         db  0x21 ; '!'
000000000000013b         db  0x00 ; '.'
000000000000013c         db  0x00 ; '.'
000000000000013d         db  0x00 ; '.'
000000000000013e         db  0x00 ; '.'
000000000000013f         db  0x00 ; '.'
0000000000000140         db  0xf0 ; '.'
0000000000000141         db  0x01 ; '.'
0000000000000142         db  0x00 ; '.'
0000000000000143         db  0x00 ; '.'
0000000000000144         db  0x00 ; '.'
0000000000000145         db  0x00 ; '.'
0000000000000146         db  0x00 ; '.'
0000000000000147         db  0x00 ; '.'
0000000000000148         db  0xf0 ; '.'
0000000000000149         db  0x01 ; '.'
000000000000014a         db  0x00 ; '.'
000000000000014b         db  0x00 ; '.'
000000000000014c         db  0x00 ; '.'
000000000000014d         db  0x00 ; '.'
000000000000014e         db  0x00 ; '.'
000000000000014f         db  0x00 ; '.'
0000000000000150         db  0x08 ; '.'
0000000000000151         db  0x00 ; '.'
0000000000000152         db  0x00 ; '.'
0000000000000153         db  0x00 ; '.'
0000000000000154         db  0x00 ; '.'
0000000000000155         db  0x00 ; '.'
0000000000000156         db  0x00 ; '.'
0000000000000157         db  0x00 ; '.'
0000000000000158         db  0x04 ; '.'
0000000000000159         db  0x00 ; '.'
000000000000015a         db  0x00 ; '.'
000000000000015b         db  0x00 ; '.'
000000000000015c         db  0x04 ; '.'
000000000000015d         db  0x00 ; '.'
000000000000015e         db  0x00 ; '.'
000000000000015f         db  0x00 ; '.'
0000000000000160         db  0x54 ; 'T'
0000000000000161         db  0x02 ; '.'
0000000000000162         db  0x00 ; '.'
0000000000000163         db  0x00 ; '.'
0000000000000164         db  0x00 ; '.'
0000000000000165         db  0x00 ; '.'
0000000000000166         db  0x00 ; '.'
0000000000000167         db  0x00 ; '.'
0000000000000168         db  0x54 ; 'T'
0000000000000169         db  0x02 ; '.'
000000000000016a         db  0x00 ; '.'
000000000000016b         db  0x00 ; '.'
000000000000016c         db  0x00 ; '.'
000000000000016d         db  0x00 ; '.'
000000000000016e         db  0x00 ; '.'
000000000000016f         db  0x00 ; '.'
0000000000000170         db  0x54 ; 'T'
0000000000000171         db  0x02 ; '.'
0000000000000172         db  0x00 ; '.'
0000000000000173         db  0x00 ; '.'
0000000000000174         db  0x00 ; '.'
0000000000000175         db  0x00 ; '.'
0000000000000176         db  0x00 ; '.'
0000000000000177         db  0x00 ; '.'
0000000000000178         db  0x44 ; 'D'                                         ; DATA XREF=re_compile_fastmap_iter.isra.30+18, re_compile_fastmap_iter.isra.30+1172
0000000000000179         db  0x00 ; '.'
000000000000017a         db  0x00 ; '.'
000000000000017b         db  0x00 ; '.'
000000000000017c         db  0x00 ; '.'
000000000000017d         db  0x00 ; '.'
000000000000017e         db  0x00 ; '.'
000000000000017f         db  0x00 ; '.'
0000000000000180         db  0x44 ; 'D'
0000000000000181         db  0x00 ; '.'
0000000000000182         db  0x00 ; '.'
0000000000000183         db  0x00 ; '.'
0000000000000184         db  0x00 ; '.'
0000000000000185         db  0x00 ; '.'
0000000000000186         db  0x00 ; '.'
0000000000000187         db  0x00 ; '.'
0000000000000188         db  0x04 ; '.'
0000000000000189         db  0x00 ; '.'
000000000000018a         db  0x00 ; '.'
000000000000018b         db  0x00 ; '.'
000000000000018c         db  0x00 ; '.'
000000000000018d         db  0x00 ; '.'
000000000000018e         db  0x00 ; '.'
000000000000018f         db  0x00 ; '.'
0000000000000190         db  0x50 ; 'P'
0000000000000191         db  0xe5 ; '.'
0000000000000192         db  0x74 ; 't'
0000000000000193         db  0x64 ; 'd'
0000000000000194         db  0x04 ; '.'
0000000000000195         db  0x00 ; '.'
0000000000000196         db  0x00 ; '.'
0000000000000197         db  0x00 ; '.'
0000000000000198         db  0xc0 ; '.'
0000000000000199         db  0x60 ; '`'
000000000000019a         db  0x01 ; '.'
000000000000019b         db  0x00 ; '.'
000000000000019c         db  0x00 ; '.'
000000000000019d         db  0x00 ; '.'
000000000000019e         db  0x00 ; '.'
000000000000019f         db  0x00 ; '.'
00000000000001a0         db  0xc0 ; '.'
00000000000001a1         db  0x60 ; '`'
00000000000001a2         db  0x01 ; '.'
00000000000001a3         db  0x00 ; '.'
00000000000001a4         db  0x00 ; '.'
00000000000001a5         db  0x00 ; '.'
00000000000001a6         db  0x00 ; '.'
00000000000001a7         db  0x00 ; '.'
00000000000001a8         db  0xc0 ; '.'
00000000000001a9         db  0x60 ; '`'
00000000000001aa         db  0x01 ; '.'
00000000000001ab         db  0x00 ; '.'
00000000000001ac         db  0x00 ; '.'
00000000000001ad         db  0x00 ; '.'
00000000000001ae         db  0x00 ; '.'
00000000000001af         db  0x00 ; '.'
00000000000001b0         db  0x74 ; 't'
00000000000001b1         db  0x05 ; '.'
00000000000001b2         db  0x00 ; '.'
00000000000001b3         db  0x00 ; '.'
00000000000001b4         db  0x00 ; '.'
00000000000001b5         db  0x00 ; '.'
00000000000001b6         db  0x00 ; '.'
00000000000001b7         db  0x00 ; '.'
00000000000001b8         db  0x74 ; 't'
00000000000001b9         db  0x05 ; '.'
00000000000001ba         db  0x00 ; '.'
00000000000001bb         db  0x00 ; '.'
00000000000001bc         db  0x00 ; '.'
00000000000001bd         db  0x00 ; '.'
00000000000001be         db  0x00 ; '.'                                         ; DATA XREF=re_search_stub+1079
00000000000001bf         db  0x00 ; '.'
00000000000001c0         db  0x04 ; '.'
00000000000001c1         db  0x00 ; '.'
00000000000001c2         db  0x00 ; '.'
00000000000001c3         db  0x00 ; '.'
00000000000001c4         db  0x00 ; '.'
00000000000001c5         db  0x00 ; '.'
00000000000001c6         db  0x00 ; '.'
00000000000001c7         db  0x00 ; '.'
00000000000001c8         db  0x51 ; 'Q'
00000000000001c9         db  0xe5 ; '.'
00000000000001ca         db  0x74 ; 't'
00000000000001cb         db  0x64 ; 'd'
00000000000001cc         db  0x06 ; '.'
00000000000001cd         db  0x00 ; '.'
00000000000001ce         db  0x00 ; '.'
00000000000001cf         db  0x00 ; '.'
00000000000001d0         db  0x00 ; '.'
00000000000001d1         db  0x00 ; '.'
00000000000001d2         db  0x00 ; '.'
00000000000001d3         db  0x00 ; '.'
00000000000001d4         db  0x00 ; '.'
00000000000001d5         db  0x00 ; '.'
00000000000001d6         db  0x00 ; '.'
00000000000001d7         db  0x00 ; '.'
00000000000001d8         db  0x00 ; '.'
00000000000001d9         db  0x00 ; '.'
00000000000001da         db  0x00 ; '.'
00000000000001db         db  0x00 ; '.'
00000000000001dc         db  0x00 ; '.'
00000000000001dd         db  0x00 ; '.'
00000000000001de         db  0x00 ; '.'
00000000000001df         db  0x00 ; '.'
00000000000001e0         db  0x00 ; '.'
00000000000001e1         db  0x00 ; '.'
00000000000001e2         db  0x00 ; '.'
00000000000001e3         db  0x00 ; '.'
00000000000001e4         db  0x00 ; '.'
00000000000001e5         db  0x00 ; '.'
00000000000001e6         db  0x00 ; '.'
00000000000001e7         db  0x00 ; '.'
00000000000001e8         db  0x00 ; '.'
00000000000001e9         db  0x00 ; '.'
00000000000001ea         db  0x00 ; '.'
00000000000001eb         db  0x00 ; '.'
00000000000001ec         db  0x00 ; '.'
00000000000001ed         db  0x00 ; '.'
00000000000001ee         db  0x00 ; '.'
00000000000001ef         db  0x00 ; '.'
00000000000001f0         db  0x00 ; '.'
00000000000001f1         db  0x00 ; '.'
00000000000001f2         db  0x00 ; '.'
00000000000001f3         db  0x00 ; '.'
00000000000001f4         db  0x00 ; '.'
00000000000001f5         db  0x00 ; '.'
00000000000001f6         db  0x00 ; '.'
00000000000001f7         db  0x00 ; '.'
00000000000001f8         db  0x10 ; '.'
00000000000001f9         db  0x00 ; '.'                                         ; DATA XREF=re_search_stub+1141
00000000000001fa         db  0x00 ; '.'
00000000000001fb         db  0x00 ; '.'                                         ; DATA XREF=re_search_stub+1110
00000000000001fc         db  0x00 ; '.'
00000000000001fd         db  0x00 ; '.'
00000000000001fe         db  0x00 ; '.'
00000000000001ff         db  0x00 ; '.'
0000000000000200         db  0x52 ; 'R'                                         ; DATA XREF=build_trtable+2601, build_trtable+2707, peek_token+1008, peek_token+1092, peek_token+1254
0000000000000201         db  0xe5 ; '.'
0000000000000202         db  0x74 ; 't'
0000000000000203         db  0x64 ; 'd'
0000000000000204         db  0x04 ; '.'
0000000000000205         db  0x00 ; '.'
0000000000000206         db  0x00 ; '.'
0000000000000207         db  0x00 ; '.'
0000000000000208         db  0xb0 ; '.'
0000000000000209         db  0x89 ; '.'
000000000000020a         db  0x01 ; '.'
000000000000020b         db  0x00 ; '.'
000000000000020c         db  0x00 ; '.'
000000000000020d         db  0x00 ; '.'
000000000000020e         db  0x00 ; '.'
000000000000020f         db  0x00 ; '.'
0000000000000210         db  0xb0 ; '.'
0000000000000211         db  0x89 ; '.'
0000000000000212         db  0x21 ; '!'
0000000000000213         db  0x00 ; '.'
0000000000000214         db  0x00 ; '.'
0000000000000215         db  0x00 ; '.'
0000000000000216         db  0x00 ; '.'
0000000000000217         db  0x00 ; '.'
0000000000000218         db  0xb0 ; '.'
0000000000000219         db  0x89 ; '.'
000000000000021a         db  0x21 ; '!'
000000000000021b         db  0x00 ; '.'
000000000000021c         db  0x00 ; '.'
000000000000021d         db  0x00 ; '.'
000000000000021e         db  0x00 ; '.'
000000000000021f         db  0x00 ; '.'
0000000000000220         db  0x50 ; 'P'
0000000000000221         db  0x06 ; '.'
0000000000000222         db  0x00 ; '.'
0000000000000223         db  0x00 ; '.'
0000000000000224         db  0x00 ; '.'
0000000000000225         db  0x00 ; '.'
0000000000000226         db  0x00 ; '.'
0000000000000227         db  0x00 ; '.'
0000000000000228         db  0x50 ; 'P'
0000000000000229         db  0x06 ; '.'
000000000000022a         db  0x00 ; '.'
000000000000022b         db  0x00 ; '.'
000000000000022c         db  0x00 ; '.'
000000000000022d         db  0x00 ; '.'
000000000000022e         db  0x00 ; '.'
000000000000022f         db  0x00 ; '.'
0000000000000230         db  0x01 ; '.'
0000000000000231         db  0x00 ; '.'
0000000000000232         db  0x00 ; '.'
0000000000000233         db  0x00 ; '.'
0000000000000234         db  0x00 ; '.'
0000000000000235         db  0x00 ; '.'
0000000000000236         db  0x00 ; '.'
0000000000000237         db  0x00 ; '.'


        ; Section .interp
        ; Range: [0x238; 0x254[ (28 bytes)
        ; File offset : [568; 596[ (28 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

                     aLib64ldlinuxx8:
0000000000000238         db         "/lib64/ld-linux-x86-64.so.2", 0            ; DATA XREF=re_search_internal+24, re_search_internal+2964


        ; Section .note.ABI-tag
        ; Range: [0x254; 0x274[ (32 bytes)
        ; File offset : [596; 628[ (32 bytes)
        ; Flags: 0x2
        ;   SHT_NOTE
        ;   SHF_ALLOC

0000000000000254         db  0x04 ; '.'
0000000000000255         db  0x00 ; '.'
0000000000000256         db  0x00 ; '.'
0000000000000257         db  0x00 ; '.'
0000000000000258         db  0x10 ; '.'
0000000000000259         db  0x00 ; '.'
000000000000025a         db  0x00 ; '.'
000000000000025b         db  0x00 ; '.'
000000000000025c         db  0x01 ; '.'
000000000000025d         db  0x00 ; '.'
000000000000025e         db  0x00 ; '.'
000000000000025f         db  0x00 ; '.'
0000000000000260         db  0x47 ; 'G'
0000000000000261         db  0x4e ; 'N'
0000000000000262         db  0x55 ; 'U'
0000000000000263         db  0x00 ; '.'
0000000000000264         db  0x00 ; '.'
0000000000000265         db  0x00 ; '.'
0000000000000266         db  0x00 ; '.'
0000000000000267         db  0x00 ; '.'
0000000000000268         db  0x03 ; '.'
0000000000000269         db  0x00 ; '.'
000000000000026a         db  0x00 ; '.'
000000000000026b         db  0x00 ; '.'
000000000000026c         db  0x02 ; '.'
000000000000026d         db  0x00 ; '.'
000000000000026e         db  0x00 ; '.'
000000000000026f         db  0x00 ; '.'
0000000000000270         db  0x00 ; '.'
0000000000000271         db  0x00 ; '.'
0000000000000272         db  0x00 ; '.'
0000000000000273         db  0x00 ; '.'


        ; Section .note.gnu.build-id
        ; Range: [0x274; 0x298[ (36 bytes)
        ; File offset : [628; 664[ (36 bytes)
        ; Flags: 0x2
        ;   SHT_NOTE
        ;   SHF_ALLOC

0000000000000274         db  0x04 ; '.'
0000000000000275         db  0x00 ; '.'
0000000000000276         db  0x00 ; '.'
0000000000000277         db  0x00 ; '.'
0000000000000278         db  0x14 ; '.'
0000000000000279         db  0x00 ; '.'
000000000000027a         db  0x00 ; '.'
000000000000027b         db  0x00 ; '.'
000000000000027c         db  0x03 ; '.'
000000000000027d         db  0x00 ; '.'
000000000000027e         db  0x00 ; '.'
000000000000027f         db  0x00 ; '.'
0000000000000280         db  0x47 ; 'G'
0000000000000281         db  0x4e ; 'N'
0000000000000282         db  0x55 ; 'U'
0000000000000283         db  0x00 ; '.'
0000000000000284         db  0x74 ; 't'
0000000000000285         db  0xfe ; '.'
0000000000000286         db  0x99 ; '.'
0000000000000287         db  0xde ; '.'
0000000000000288         db  0x28 ; '('
0000000000000289         db  0xc5 ; '.'
000000000000028a         db  0x5e ; '^'
000000000000028b         db  0xa5 ; '.'
000000000000028c         db  0xce ; '.'
000000000000028d         db  0x85 ; '.'
000000000000028e         db  0x60 ; '`'
000000000000028f         db  0x6c ; 'l'
0000000000000290         db  0x93 ; '.'
0000000000000291         db  0x56 ; 'V'
0000000000000292         db  0xc7 ; '.'
0000000000000293         db  0x4c ; 'L'
0000000000000294         db  0x3f ; '?'
0000000000000295         db  0x54 ; 'T'
0000000000000296         db  0xa7 ; '.'
0000000000000297         db  0xbc ; '.'


        ; Section .gnu.hash
        ; Range: [0x298; 0x2e0[ (72 bytes)
        ; File offset : [664; 736[ (72 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000000298         db  0x03 ; '.'
0000000000000299         db  0x00 ; '.'
000000000000029a         db  0x00 ; '.'
000000000000029b         db  0x00 ; '.'
000000000000029c         db  0x43 ; 'C'
000000000000029d         db  0x00 ; '.'
000000000000029e         db  0x00 ; '.'
000000000000029f         db  0x00 ; '.'
00000000000002a0         db  0x01 ; '.'
00000000000002a1         db  0x00 ; '.'
00000000000002a2         db  0x00 ; '.'
00000000000002a3         db  0x00 ; '.'
00000000000002a4         db  0x06 ; '.'
00000000000002a5         db  0x00 ; '.'
00000000000002a6         db  0x00 ; '.'
00000000000002a7         db  0x00 ; '.'
00000000000002a8         db  0x04 ; '.'
00000000000002a9         db  0x4d ; 'M'
00000000000002aa         db  0x61 ; 'a'
00000000000002ab         db  0x00 ; '.'
00000000000002ac         db  0xa0 ; '.'
00000000000002ad         db  0x01 ; '.'
00000000000002ae         db  0x1c ; '.'
00000000000002af         db  0x12 ; '.'
00000000000002b0         db  0x43 ; 'C'
00000000000002b1         db  0x00 ; '.'
00000000000002b2         db  0x00 ; '.'
00000000000002b3         db  0x00 ; '.'
00000000000002b4         db  0x44 ; 'D'
00000000000002b5         db  0x00 ; '.'
00000000000002b6         db  0x00 ; '.'
00000000000002b7         db  0x00 ; '.'
00000000000002b8         db  0x4a ; 'J'
00000000000002b9         db  0x00 ; '.'
00000000000002ba         db  0x00 ; '.'
00000000000002bb         db  0x00 ; '.'
00000000000002bc         db  0x29 ; ')'
00000000000002bd         db  0x1d ; '.'
00000000000002be         db  0x8c ; '.'
00000000000002bf         db  0x1c ; '.'
00000000000002c0         db  0xbc ; '.'
00000000000002c1         db  0x50 ; 'P'
00000000000002c2         db  0x76 ; 'v'
00000000000002c3         db  0x9e ; '.'
00000000000002c4         db  0x66 ; 'f'
00000000000002c5         db  0x55 ; 'U'
00000000000002c6         db  0x61 ; 'a'                                         ; DATA XREF=build_type_arg+81
00000000000002c7         db  0x10 ; '.'
00000000000002c8         db  0x96 ; '.'
00000000000002c9         db  0xa0 ; '.'
00000000000002ca         db  0x89 ; '.'
00000000000002cb         db  0x97 ; '.'
00000000000002cc         db  0xce ; '.'
00000000000002cd         db  0x2c ; ','
00000000000002ce         db  0x63 ; 'c'
00000000000002cf         db  0x72 ; 'r'
00000000000002d0         db  0xe4 ; '.'
00000000000002d1         db  0x62 ; 'b'
00000000000002d2         db  0x41 ; 'A'
00000000000002d3         db  0xf5 ; '.'
00000000000002d4         db  0x39 ; '9'
00000000000002d5         db  0xf2 ; '.'
00000000000002d6         db  0x8b ; '.'
00000000000002d7         db  0x1c ; '.'
00000000000002d8         db  0x32 ; '2'
00000000000002d9         db  0xc4 ; '.'
00000000000002da         db  0xf7 ; '.'
00000000000002db         db  0x12 ; '.'
00000000000002dc         db  0xb3 ; '.'
00000000000002dd         db  0xa2 ; '.'
00000000000002de         db  0xf7 ; '.'
00000000000002df         db  0x12 ; '.'


        ; Section .dynsym
        ; Range: [0x2e0; 0xa00[ (1824 bytes)
        ; File offset : [736; 2560[ (1824 bytes)
        ; Flags: 0x2
        ;   SHT_DYNSYM
        ;   SHF_ALLOC

00000000000002e0         db  0x00 ; '.'
00000000000002e1         db  0x00 ; '.'
00000000000002e2         db  0x00 ; '.'
00000000000002e3         db  0x00 ; '.'
00000000000002e4         db  0x00 ; '.'
00000000000002e5         db  0x00 ; '.'
00000000000002e6         db  0x00 ; '.'
00000000000002e7         db  0x00 ; '.'
00000000000002e8         db  0x00 ; '.'
00000000000002e9         db  0x00 ; '.'
00000000000002ea         db  0x00 ; '.'
00000000000002eb         db  0x00 ; '.'
00000000000002ec         db  0x00 ; '.'
00000000000002ed         db  0x00 ; '.'
00000000000002ee         db  0x00 ; '.'
00000000000002ef         db  0x00 ; '.'
00000000000002f0         db  0x00 ; '.'
00000000000002f1         db  0x00 ; '.'
00000000000002f2         db  0x00 ; '.'
00000000000002f3         db  0x00 ; '.'
00000000000002f4         db  0x00 ; '.'
00000000000002f5         db  0x00 ; '.'
00000000000002f6         db  0x00 ; '.'
00000000000002f7         db  0x00 ; '.'
00000000000002f8         db  0x24 ; '$'
00000000000002f9         db  0x02 ; '.'
00000000000002fa         db  0x00 ; '.'
00000000000002fb         db  0x00 ; '.'
00000000000002fc         db  0x12 ; '.'
00000000000002fd         db  0x00 ; '.'
00000000000002fe         db  0x00 ; '.'
00000000000002ff         db  0x00 ; '.'
0000000000000300         db  0x00 ; '.'
0000000000000301         db  0x00 ; '.'
0000000000000302         db  0x00 ; '.'
0000000000000303         db  0x00 ; '.'
0000000000000304         db  0x00 ; '.'
0000000000000305         db  0x00 ; '.'
0000000000000306         db  0x00 ; '.'
0000000000000307         db  0x00 ; '.'
0000000000000308         db  0x00 ; '.'
0000000000000309         db  0x00 ; '.'
000000000000030a         db  0x00 ; '.'
000000000000030b         db  0x00 ; '.'
000000000000030c         db  0x00 ; '.'
000000000000030d         db  0x00 ; '.'
000000000000030e         db  0x00 ; '.'
000000000000030f         db  0x00 ; '.'                                         ; DATA XREF=sub_11560+7
0000000000000310         db  0x9f ; '.'
0000000000000311         db  0x01 ; '.'
0000000000000312         db  0x00 ; '.'
0000000000000313         db  0x00 ; '.'
0000000000000314         db  0x12 ; '.'
0000000000000315         db  0x00 ; '.'
0000000000000316         db  0x00 ; '.'
0000000000000317         db  0x00 ; '.'
0000000000000318         db  0x00 ; '.'
0000000000000319         db  0x00 ; '.'
000000000000031a         db  0x00 ; '.'
000000000000031b         db  0x00 ; '.'
000000000000031c         db  0x00 ; '.'
000000000000031d         db  0x00 ; '.'
000000000000031e         db  0x00 ; '.'
000000000000031f         db  0x00 ; '.'
0000000000000320         db  0x00 ; '.'
0000000000000321         db  0x00 ; '.'
0000000000000322         db  0x00 ; '.'
0000000000000323         db  0x00 ; '.'
0000000000000324         db  0x00 ; '.'
0000000000000325         db  0x00 ; '.'
0000000000000326         db  0x00 ; '.'
0000000000000327         db  0x00 ; '.'
0000000000000328         db  0xc3 ; '.'
0000000000000329         db  0x02 ; '.'
000000000000032a         db  0x00 ; '.'
000000000000032b         db  0x00 ; '.'
000000000000032c         db  0x12 ; '.'
000000000000032d         db  0x00 ; '.'
000000000000032e         db  0x00 ; '.'
000000000000032f         db  0x00 ; '.'
0000000000000330         db  0x00 ; '.'
0000000000000331         db  0x00 ; '.'
0000000000000332         db  0x00 ; '.'
0000000000000333         db  0x00 ; '.'
0000000000000334         db  0x00 ; '.'
0000000000000335         db  0x00 ; '.'
0000000000000336         db  0x00 ; '.'
0000000000000337         db  0x00 ; '.'
0000000000000338         db  0x00 ; '.'
0000000000000339         db  0x00 ; '.'
000000000000033a         db  0x00 ; '.'
000000000000033b         db  0x00 ; '.'
000000000000033c         db  0x00 ; '.'
000000000000033d         db  0x00 ; '.'
000000000000033e         db  0x00 ; '.'
000000000000033f         db  0x00 ; '.'
0000000000000340         db  0xb9 ; '.'
0000000000000341         db  0x00 ; '.'
0000000000000342         db  0x00 ; '.'
0000000000000343         db  0x00 ; '.'
0000000000000344         db  0x12 ; '.'
0000000000000345         db  0x00 ; '.'
0000000000000346         db  0x00 ; '.'
0000000000000347         db  0x00 ; '.'
0000000000000348         db  0x00 ; '.'
0000000000000349         db  0x00 ; '.'
000000000000034a         db  0x00 ; '.'
000000000000034b         db  0x00 ; '.'
000000000000034c         db  0x00 ; '.'
000000000000034d         db  0x00 ; '.'
000000000000034e         db  0x00 ; '.'
000000000000034f         db  0x00 ; '.'
0000000000000350         db  0x00 ; '.'
0000000000000351         db  0x00 ; '.'
0000000000000352         db  0x00 ; '.'
0000000000000353         db  0x00 ; '.'
0000000000000354         db  0x00 ; '.'
0000000000000355         db  0x00 ; '.'
0000000000000356         db  0x00 ; '.'
0000000000000357         db  0x00 ; '.'
0000000000000358         db  0x3d ; '='
0000000000000359         db  0x01 ; '.'
000000000000035a         db  0x00 ; '.'
000000000000035b         db  0x00 ; '.'
000000000000035c         db  0x12 ; '.'
000000000000035d         db  0x00 ; '.'
000000000000035e         db  0x00 ; '.'
000000000000035f         db  0x00 ; '.'
0000000000000360         db  0x00 ; '.'
0000000000000361         db  0x00 ; '.'
0000000000000362         db  0x00 ; '.'
0000000000000363         db  0x00 ; '.'
0000000000000364         db  0x00 ; '.'
0000000000000365         db  0x00 ; '.'
0000000000000366         db  0x00 ; '.'
0000000000000367         db  0x00 ; '.'
0000000000000368         db  0x00 ; '.'
0000000000000369         db  0x00 ; '.'
000000000000036a         db  0x00 ; '.'
000000000000036b         db  0x00 ; '.'
000000000000036c         db  0x00 ; '.'
000000000000036d         db  0x00 ; '.'
000000000000036e         db  0x00 ; '.'
000000000000036f         db  0x00 ; '.'
0000000000000370         db  0x59 ; 'Y'
0000000000000371         db  0x00 ; '.'
0000000000000372         db  0x00 ; '.'
0000000000000373         db  0x00 ; '.'
0000000000000374         db  0x12 ; '.'
0000000000000375         db  0x00 ; '.'
0000000000000376         db  0x00 ; '.'
0000000000000377         db  0x00 ; '.'
0000000000000378         db  0x00 ; '.'
0000000000000379         db  0x00 ; '.'
000000000000037a         db  0x00 ; '.'
000000000000037b         db  0x00 ; '.'
000000000000037c         db  0x00 ; '.'
000000000000037d         db  0x00 ; '.'
000000000000037e         db  0x00 ; '.'
000000000000037f         db  0x00 ; '.'
0000000000000380         db  0x00 ; '.'
0000000000000381         db  0x00 ; '.'
0000000000000382         db  0x00 ; '.'
0000000000000383         db  0x00 ; '.'
0000000000000384         db  0x00 ; '.'
0000000000000385         db  0x00 ; '.'
0000000000000386         db  0x00 ; '.'
0000000000000387         db  0x00 ; '.'
0000000000000388         db  0x27 ; '''
0000000000000389         db  0x03 ; '.'
000000000000038a         db  0x00 ; '.'
000000000000038b         db  0x00 ; '.'
000000000000038c         db  0x20 ; ' '
000000000000038d         db  0x00 ; '.'
000000000000038e         db  0x00 ; '.'
000000000000038f         db  0x00 ; '.'
0000000000000390         db  0x00 ; '.'
0000000000000391         db  0x00 ; '.'
0000000000000392         db  0x00 ; '.'
0000000000000393         db  0x00 ; '.'
0000000000000394         db  0x00 ; '.'
0000000000000395         db  0x00 ; '.'
0000000000000396         db  0x00 ; '.'
0000000000000397         db  0x00 ; '.'
0000000000000398         db  0x00 ; '.'
0000000000000399         db  0x00 ; '.'
000000000000039a         db  0x00 ; '.'
000000000000039b         db  0x00 ; '.'
000000000000039c         db  0x00 ; '.'
000000000000039d         db  0x00 ; '.'
000000000000039e         db  0x00 ; '.'
000000000000039f         db  0x00 ; '.'
00000000000003a0         db  0xc5 ; '.'
00000000000003a1         db  0x00 ; '.'
00000000000003a2         db  0x00 ; '.'
00000000000003a3         db  0x00 ; '.'
00000000000003a4         db  0x12 ; '.'
00000000000003a5         db  0x00 ; '.'
00000000000003a6         db  0x00 ; '.'
00000000000003a7         db  0x00 ; '.'
00000000000003a8         db  0x00 ; '.'
00000000000003a9         db  0x00 ; '.'
00000000000003aa         db  0x00 ; '.'
00000000000003ab         db  0x00 ; '.'
00000000000003ac         db  0x00 ; '.'
00000000000003ad         db  0x00 ; '.'
00000000000003ae         db  0x00 ; '.'
00000000000003af         db  0x00 ; '.'
00000000000003b0         db  0x00 ; '.'
00000000000003b1         db  0x00 ; '.'
00000000000003b2         db  0x00 ; '.'
00000000000003b3         db  0x00 ; '.'
00000000000003b4         db  0x00 ; '.'
00000000000003b5         db  0x00 ; '.'
00000000000003b6         db  0x00 ; '.'
00000000000003b7         db  0x00 ; '.'
00000000000003b8         db  0x12 ; '.'
00000000000003b9         db  0x00 ; '.'
00000000000003ba         db  0x00 ; '.'
00000000000003bb         db  0x00 ; '.'
00000000000003bc         db  0x12 ; '.'
00000000000003bd         db  0x00 ; '.'
00000000000003be         db  0x00 ; '.'
00000000000003bf         db  0x00 ; '.'
00000000000003c0         db  0x00 ; '.'
00000000000003c1         db  0x00 ; '.'
00000000000003c2         db  0x00 ; '.'
00000000000003c3         db  0x00 ; '.'
00000000000003c4         db  0x00 ; '.'
00000000000003c5         db  0x00 ; '.'
00000000000003c6         db  0x00 ; '.'
00000000000003c7         db  0x00 ; '.'
00000000000003c8         db  0x00 ; '.'                                         ; DATA XREF=create_token_tree.isra.16+136
00000000000003c9         db  0x00 ; '.'
00000000000003ca         db  0x00 ; '.'
00000000000003cb         db  0x00 ; '.'
00000000000003cc         db  0x00 ; '.'
00000000000003cd         db  0x00 ; '.'
00000000000003ce         db  0x00 ; '.'
00000000000003cf         db  0x00 ; '.'
00000000000003d0         db  0xf4 ; '.'
00000000000003d1         db  0x01 ; '.'
00000000000003d2         db  0x00 ; '.'
00000000000003d3         db  0x00 ; '.'
00000000000003d4         db  0x12 ; '.'
00000000000003d5         db  0x00 ; '.'
00000000000003d6         db  0x00 ; '.'
00000000000003d7         db  0x00 ; '.'
00000000000003d8         db  0x00 ; '.'
00000000000003d9         db  0x00 ; '.'
00000000000003da         db  0x00 ; '.'
00000000000003db         db  0x00 ; '.'
00000000000003dc         db  0x00 ; '.'
00000000000003dd         db  0x00 ; '.'
00000000000003de         db  0x00 ; '.'
00000000000003df         db  0x00 ; '.'
00000000000003e0         db  0x00 ; '.'
00000000000003e1         db  0x00 ; '.'
00000000000003e2         db  0x00 ; '.'
00000000000003e3         db  0x00 ; '.'
00000000000003e4         db  0x00 ; '.'
00000000000003e5         db  0x00 ; '.'
00000000000003e6         db  0x00 ; '.'
00000000000003e7         db  0x00 ; '.'
00000000000003e8         db  0x26 ; '&'                                         ; DATA XREF=xstrtoimax+363
00000000000003e9         db  0x00 ; '.'
00000000000003ea         db  0x00 ; '.'
00000000000003eb         db  0x00 ; '.'
00000000000003ec         db  0x12 ; '.'
00000000000003ed         db  0x00 ; '.'
00000000000003ee         db  0x00 ; '.'
00000000000003ef         db  0x00 ; '.'
00000000000003f0         db  0x00 ; '.'
00000000000003f1         db  0x00 ; '.'
00000000000003f2         db  0x00 ; '.'
00000000000003f3         db  0x00 ; '.'
00000000000003f4         db  0x00 ; '.'
00000000000003f5         db  0x00 ; '.'
00000000000003f6         db  0x00 ; '.'
00000000000003f7         db  0x00 ; '.'
00000000000003f8         db  0x00 ; '.'
00000000000003f9         db  0x00 ; '.'
00000000000003fa         db  0x00 ; '.'
00000000000003fb         db  0x00 ; '.'
00000000000003fc         db  0x00 ; '.'
00000000000003fd         db  0x00 ; '.'
00000000000003fe         db  0x00 ; '.'
00000000000003ff         db  0x00 ; '.'                                         ; DATA XREF=duplicate_node+58, duplicate_node+69, duplicate_node+113, duplicate_node_closure+214, duplicate_node_closure+428, calc_eclosure_iter+605, re_acquire_state_context+346, check_node_accept+118, check_halt_state_context.isra.20+111, build_trtable+211, calc_first+67
0000000000000400         db  0x67 ; 'g'                                         ; DATA XREF=xstrtoimax+397, xstrtoimax+1614, build_trtable+894, build_trtable+2048, sub_116a0+1354
0000000000000401         db  0x02 ; '.'
0000000000000402         db  0x00 ; '.'                                         ; DATA XREF=peek_token+736, peek_token+784, peek_token+1266, peek_token+1402
0000000000000403         db  0x00 ; '.'
0000000000000404         db  0x12 ; '.'
0000000000000405         db  0x00 ; '.'
0000000000000406         db  0x00 ; '.'
0000000000000407         db  0x00 ; '.'
0000000000000408         db  0x00 ; '.'
0000000000000409         db  0x00 ; '.'
000000000000040a         db  0x00 ; '.'
000000000000040b         db  0x00 ; '.'
000000000000040c         db  0x00 ; '.'
000000000000040d         db  0x00 ; '.'
000000000000040e         db  0x00 ; '.'
000000000000040f         db  0x00 ; '.'
0000000000000410         db  0x00 ; '.'
0000000000000411         db  0x00 ; '.'
0000000000000412         db  0x00 ; '.'
0000000000000413         db  0x00 ; '.'
0000000000000414         db  0x00 ; '.'
0000000000000415         db  0x00 ; '.'
0000000000000416         db  0x00 ; '.'
0000000000000417         db  0x00 ; '.'
0000000000000418         db  0x7e ; '~'
0000000000000419         db  0x01 ; '.'
000000000000041a         db  0x00 ; '.'
000000000000041b         db  0x00 ; '.'
000000000000041c         db  0x12 ; '.'
000000000000041d         db  0x00 ; '.'
000000000000041e         db  0x00 ; '.'
000000000000041f         db  0x00 ; '.'
0000000000000420         db  0x00 ; '.'
0000000000000421         db  0x00 ; '.'
0000000000000422         db  0x00 ; '.'
0000000000000423         db  0x00 ; '.'
0000000000000424         db  0x00 ; '.'
0000000000000425         db  0x00 ; '.'
0000000000000426         db  0x00 ; '.'
0000000000000427         db  0x00 ; '.'
0000000000000428         db  0x00 ; '.'
0000000000000429         db  0x00 ; '.'
000000000000042a         db  0x00 ; '.'
000000000000042b         db  0x00 ; '.'
000000000000042c         db  0x00 ; '.'
000000000000042d         db  0x00 ; '.'
000000000000042e         db  0x00 ; '.'
000000000000042f         db  0x00 ; '.'
0000000000000430         db  0x2d ; '-'
0000000000000431         db  0x01 ; '.'
0000000000000432         db  0x00 ; '.'
0000000000000433         db  0x00 ; '.'
0000000000000434         db  0x12 ; '.'
0000000000000435         db  0x00 ; '.'                                         ; DATA XREF=re_search_internal+4162
0000000000000436         db  0x00 ; '.'
0000000000000437         db  0x00 ; '.'
0000000000000438         db  0x00 ; '.'
0000000000000439         db  0x00 ; '.'
000000000000043a         db  0x00 ; '.'
000000000000043b         db  0x00 ; '.'
000000000000043c         db  0x00 ; '.'
000000000000043d         db  0x00 ; '.'
000000000000043e         db  0x00 ; '.'
000000000000043f         db  0x00 ; '.'
0000000000000440         db  0x00 ; '.'
0000000000000441         db  0x00 ; '.'
0000000000000442         db  0x00 ; '.'
0000000000000443         db  0x00 ; '.'
0000000000000444         db  0x00 ; '.'
0000000000000445         db  0x00 ; '.'
0000000000000446         db  0x00 ; '.'
0000000000000447         db  0x00 ; '.'
0000000000000448         db  0x77 ; 'w'
0000000000000449         db  0x01 ; '.'
000000000000044a         db  0x00 ; '.'
000000000000044b         db  0x00 ; '.'
000000000000044c         db  0x12 ; '.'
000000000000044d         db  0x00 ; '.'
000000000000044e         db  0x00 ; '.'
000000000000044f         db  0x00 ; '.'
0000000000000450         db  0x00 ; '.'
0000000000000451         db  0x00 ; '.'
0000000000000452         db  0x00 ; '.'
0000000000000453         db  0x00 ; '.'
0000000000000454         db  0x00 ; '.'
0000000000000455         db  0x00 ; '.'
0000000000000456         db  0x00 ; '.'
0000000000000457         db  0x00 ; '.'
0000000000000458         db  0x00 ; '.'
0000000000000459         db  0x00 ; '.'
000000000000045a         db  0x00 ; '.'
000000000000045b         db  0x00 ; '.'
000000000000045c         db  0x00 ; '.'
000000000000045d         db  0x00 ; '.'
000000000000045e         db  0x00 ; '.'
000000000000045f         db  0x00 ; '.'
0000000000000460         db  0x63 ; 'c'
0000000000000461         db  0x02 ; '.'
0000000000000462         db  0x00 ; '.'
0000000000000463         db  0x00 ; '.'
0000000000000464         db  0x12 ; '.'
0000000000000465         db  0x00 ; '.'
0000000000000466         db  0x00 ; '.'
0000000000000467         db  0x00 ; '.'
0000000000000468         db  0x00 ; '.'
0000000000000469         db  0x00 ; '.'
000000000000046a         db  0x00 ; '.'
000000000000046b         db  0x00 ; '.'
000000000000046c         db  0x00 ; '.'                                         ; DATA XREF=re_search_internal+5446
000000000000046d         db  0x00 ; '.'
000000000000046e         db  0x00 ; '.'
000000000000046f         db  0x00 ; '.'
0000000000000470         db  0x00 ; '.'
0000000000000471         db  0x00 ; '.'
0000000000000472         db  0x00 ; '.'
0000000000000473         db  0x00 ; '.'
0000000000000474         db  0x00 ; '.'
0000000000000475         db  0x00 ; '.'
0000000000000476         db  0x00 ; '.'
0000000000000477         db  0x00 ; '.'
0000000000000478         db  0x9b ; '.'
0000000000000479         db  0x02 ; '.'
000000000000047a         db  0x00 ; '.'
000000000000047b         db  0x00 ; '.'
000000000000047c         db  0x12 ; '.'
000000000000047d         db  0x00 ; '.'
000000000000047e         db  0x00 ; '.'
000000000000047f         db  0x00 ; '.'
0000000000000480         db  0x00 ; '.'
0000000000000481         db  0x00 ; '.'
0000000000000482         db  0x00 ; '.'
0000000000000483         db  0x00 ; '.'
0000000000000484         db  0x00 ; '.'
0000000000000485         db  0x00 ; '.'
0000000000000486         db  0x00 ; '.'
0000000000000487         db  0x00 ; '.'
0000000000000488         db  0x00 ; '.'
0000000000000489         db  0x00 ; '.'
000000000000048a         db  0x00 ; '.'
000000000000048b         db  0x00 ; '.'
000000000000048c         db  0x00 ; '.'
000000000000048d         db  0x00 ; '.'
000000000000048e         db  0x00 ; '.'
000000000000048f         db  0x00 ; '.'
0000000000000490         db  0x70 ; 'p'
0000000000000491         db  0x00 ; '.'
0000000000000492         db  0x00 ; '.'
0000000000000493         db  0x00 ; '.'
0000000000000494         db  0x12 ; '.'
0000000000000495         db  0x00 ; '.'
0000000000000496         db  0x00 ; '.'
0000000000000497         db  0x00 ; '.'
0000000000000498         db  0x00 ; '.'
0000000000000499         db  0x00 ; '.'
000000000000049a         db  0x00 ; '.'
000000000000049b         db  0x00 ; '.'
000000000000049c         db  0x00 ; '.'
000000000000049d         db  0x00 ; '.'
000000000000049e         db  0x00 ; '.'
000000000000049f         db  0x00 ; '.'
00000000000004a0         db  0x00 ; '.'
00000000000004a1         db  0x00 ; '.'
00000000000004a2         db  0x00 ; '.'
00000000000004a3         db  0x00 ; '.'
00000000000004a4         db  0x00 ; '.'
00000000000004a5         db  0x00 ; '.'
00000000000004a6         db  0x00 ; '.'
00000000000004a7         db  0x00 ; '.'
00000000000004a8         db  0xfa ; '.'
00000000000004a9         db  0x00 ; '.'
00000000000004aa         db  0x00 ; '.'
00000000000004ab         db  0x00 ; '.'
00000000000004ac         db  0x12 ; '.'
00000000000004ad         db  0x00 ; '.'
00000000000004ae         db  0x00 ; '.'
00000000000004af         db  0x00 ; '.'
00000000000004b0         db  0x00 ; '.'
00000000000004b1         db  0x00 ; '.'
00000000000004b2         db  0x00 ; '.'
00000000000004b3         db  0x00 ; '.'
00000000000004b4         db  0x00 ; '.'
00000000000004b5         db  0x00 ; '.'
00000000000004b6         db  0x00 ; '.'
00000000000004b7         db  0x00 ; '.'
00000000000004b8         db  0x00 ; '.'
00000000000004b9         db  0x00 ; '.'
00000000000004ba         db  0x00 ; '.'
00000000000004bb         db  0x00 ; '.'
00000000000004bc         db  0x00 ; '.'
00000000000004bd         db  0x00 ; '.'
00000000000004be         db  0x00 ; '.'
00000000000004bf         db  0x00 ; '.'
00000000000004c0         db  0x26 ; '&'
00000000000004c1         db  0x01 ; '.'
00000000000004c2         db  0x00 ; '.'
00000000000004c3         db  0x00 ; '.'
00000000000004c4         db  0x12 ; '.'
00000000000004c5         db  0x00 ; '.'
00000000000004c6         db  0x00 ; '.'
00000000000004c7         db  0x00 ; '.'
00000000000004c8         db  0x00 ; '.'
00000000000004c9         db  0x00 ; '.'
00000000000004ca         db  0x00 ; '.'
00000000000004cb         db  0x00 ; '.'
00000000000004cc         db  0x00 ; '.'
00000000000004cd         db  0x00 ; '.'
00000000000004ce         db  0x00 ; '.'
00000000000004cf         db  0x00 ; '.'
00000000000004d0         db  0x00 ; '.'
00000000000004d1         db  0x00 ; '.'
00000000000004d2         db  0x00 ; '.'
00000000000004d3         db  0x00 ; '.'
00000000000004d4         db  0x00 ; '.'
00000000000004d5         db  0x00 ; '.'
00000000000004d6         db  0x00 ; '.'
00000000000004d7         db  0x00 ; '.'
00000000000004d8         db  0x88 ; '.'
00000000000004d9         db  0x00 ; '.'
00000000000004da         db  0x00 ; '.'
00000000000004db         db  0x00 ; '.'
00000000000004dc         db  0x12 ; '.'
00000000000004dd         db  0x00 ; '.'
00000000000004de         db  0x00 ; '.'
00000000000004df         db  0x00 ; '.'
00000000000004e0         db  0x00 ; '.'
00000000000004e1         db  0x00 ; '.'
00000000000004e2         db  0x00 ; '.'
00000000000004e3         db  0x00 ; '.'
00000000000004e4         db  0x00 ; '.'
00000000000004e5         db  0x00 ; '.'
00000000000004e6         db  0x00 ; '.'
00000000000004e7         db  0x00 ; '.'
00000000000004e8         db  0x00 ; '.'
00000000000004e9         db  0x00 ; '.'
00000000000004ea         db  0x00 ; '.'
00000000000004eb         db  0x00 ; '.'
00000000000004ec         db  0x00 ; '.'
00000000000004ed         db  0x00 ; '.'
00000000000004ee         db  0x00 ; '.'
00000000000004ef         db  0x00 ; '.'
00000000000004f0         db  0xda ; '.'
00000000000004f1         db  0x01 ; '.'
00000000000004f2         db  0x00 ; '.'
00000000000004f3         db  0x00 ; '.'
00000000000004f4         db  0x12 ; '.'
00000000000004f5         db  0x00 ; '.'
00000000000004f6         db  0x00 ; '.'
00000000000004f7         db  0x00 ; '.'
00000000000004f8         db  0x00 ; '.'
00000000000004f9         db  0x00 ; '.'
00000000000004fa         db  0x00 ; '.'
00000000000004fb         db  0x00 ; '.'
00000000000004fc         db  0x00 ; '.'
00000000000004fd         db  0x00 ; '.'
00000000000004fe         db  0x00 ; '.'
00000000000004ff         db  0x00 ; '.'
0000000000000500         db  0x00 ; '.'
0000000000000501         db  0x00 ; '.'
0000000000000502         db  0x00 ; '.'
0000000000000503         db  0x00 ; '.'
0000000000000504         db  0x00 ; '.'
0000000000000505         db  0x00 ; '.'
0000000000000506         db  0x00 ; '.'
0000000000000507         db  0x00 ; '.'
0000000000000508         db  0x42 ; 'B'
0000000000000509         db  0x00 ; '.'
000000000000050a         db  0x00 ; '.'
000000000000050b         db  0x00 ; '.'
000000000000050c         db  0x12 ; '.'
000000000000050d         db  0x00 ; '.'
000000000000050e         db  0x00 ; '.'
000000000000050f         db  0x00 ; '.'
0000000000000510         db  0x00 ; '.'
0000000000000511         db  0x00 ; '.'
0000000000000512         db  0x00 ; '.'
0000000000000513         db  0x00 ; '.'
0000000000000514         db  0x00 ; '.'
0000000000000515         db  0x00 ; '.'
0000000000000516         db  0x00 ; '.'
0000000000000517         db  0x00 ; '.'
0000000000000518         db  0x00 ; '.'
0000000000000519         db  0x00 ; '.'
000000000000051a         db  0x00 ; '.'
000000000000051b         db  0x00 ; '.'
000000000000051c         db  0x00 ; '.'
000000000000051d         db  0x00 ; '.'
000000000000051e         db  0x00 ; '.'
000000000000051f         db  0x00 ; '.'
0000000000000520         db  0xff ; '.'
0000000000000521         db  0x01 ; '.'
0000000000000522         db  0x00 ; '.'
0000000000000523         db  0x00 ; '.'
0000000000000524         db  0x12 ; '.'
0000000000000525         db  0x00 ; '.'
0000000000000526         db  0x00 ; '.'
0000000000000527         db  0x00 ; '.'
0000000000000528         db  0x00 ; '.'
0000000000000529         db  0x00 ; '.'
000000000000052a         db  0x00 ; '.'
000000000000052b         db  0x00 ; '.'
000000000000052c         db  0x00 ; '.'
000000000000052d         db  0x00 ; '.'
000000000000052e         db  0x00 ; '.'
000000000000052f         db  0x00 ; '.'
0000000000000530         db  0x00 ; '.'
0000000000000531         db  0x00 ; '.'
0000000000000532         db  0x00 ; '.'
0000000000000533         db  0x00 ; '.'
0000000000000534         db  0x00 ; '.'
0000000000000535         db  0x00 ; '.'
0000000000000536         db  0x00 ; '.'
0000000000000537         db  0x00 ; '.'
0000000000000538         db  0xa9 ; '.'
0000000000000539         db  0x02 ; '.'
000000000000053a         db  0x00 ; '.'
000000000000053b         db  0x00 ; '.'
000000000000053c         db  0x12 ; '.'
000000000000053d         db  0x00 ; '.'
000000000000053e         db  0x00 ; '.'
000000000000053f         db  0x00 ; '.'
0000000000000540         db  0x00 ; '.'
0000000000000541         db  0x00 ; '.'
0000000000000542         db  0x00 ; '.'
0000000000000543         db  0x00 ; '.'
0000000000000544         db  0x00 ; '.'
0000000000000545         db  0x00 ; '.'
0000000000000546         db  0x00 ; '.'
0000000000000547         db  0x00 ; '.'
0000000000000548         db  0x00 ; '.'
0000000000000549         db  0x00 ; '.'
000000000000054a         db  0x00 ; '.'
000000000000054b         db  0x00 ; '.'
000000000000054c         db  0x00 ; '.'
000000000000054d         db  0x00 ; '.'
000000000000054e         db  0x00 ; '.'
000000000000054f         db  0x00 ; '.'
0000000000000550         db  0x68 ; 'h'
0000000000000551         db  0x00 ; '.'
0000000000000552         db  0x00 ; '.'
0000000000000553         db  0x00 ; '.'
0000000000000554         db  0x12 ; '.'
0000000000000555         db  0x00 ; '.'                                         ; DATA XREF=pop_fail_stack.isra.25+138
0000000000000556         db  0x00 ; '.'
0000000000000557         db  0x00 ; '.'
0000000000000558         db  0x00 ; '.'
0000000000000559         db  0x00 ; '.'
000000000000055a         db  0x00 ; '.'
000000000000055b         db  0x00 ; '.'
000000000000055c         db  0x00 ; '.'
000000000000055d         db  0x00 ; '.'
000000000000055e         db  0x00 ; '.'
000000000000055f         db  0x00 ; '.'
0000000000000560         db  0x00 ; '.'
0000000000000561         db  0x00 ; '.'
0000000000000562         db  0x00 ; '.'
0000000000000563         db  0x00 ; '.'
0000000000000564         db  0x00 ; '.'
0000000000000565         db  0x00 ; '.'
0000000000000566         db  0x00 ; '.'
0000000000000567         db  0x00 ; '.'
0000000000000568         db  0x6a ; 'j'
0000000000000569         db  0x01 ; '.'
000000000000056a         db  0x00 ; '.'
000000000000056b         db  0x00 ; '.'
000000000000056c         db  0x12 ; '.'
000000000000056d         db  0x00 ; '.'
000000000000056e         db  0x00 ; '.'
000000000000056f         db  0x00 ; '.'
0000000000000570         db  0x00 ; '.'
0000000000000571         db  0x00 ; '.'
0000000000000572         db  0x00 ; '.'
0000000000000573         db  0x00 ; '.'
0000000000000574         db  0x00 ; '.'
0000000000000575         db  0x00 ; '.'
0000000000000576         db  0x00 ; '.'
0000000000000577         db  0x00 ; '.'
0000000000000578         db  0x00 ; '.'
0000000000000579         db  0x00 ; '.'
000000000000057a         db  0x00 ; '.'
000000000000057b         db  0x00 ; '.'
000000000000057c         db  0x00 ; '.'
000000000000057d         db  0x00 ; '.'
000000000000057e         db  0x00 ; '.'
000000000000057f         db  0x00 ; '.'
0000000000000580         db  0xe3 ; '.'
0000000000000581         db  0x00 ; '.'
0000000000000582         db  0x00 ; '.'
0000000000000583         db  0x00 ; '.'
0000000000000584         db  0x12 ; '.'
0000000000000585         db  0x00 ; '.'
0000000000000586         db  0x00 ; '.'
0000000000000587         db  0x00 ; '.'
0000000000000588         db  0x00 ; '.'
0000000000000589         db  0x00 ; '.'
000000000000058a         db  0x00 ; '.'
000000000000058b         db  0x00 ; '.'
000000000000058c         db  0x00 ; '.'
000000000000058d         db  0x00 ; '.'
000000000000058e         db  0x00 ; '.'
000000000000058f         db  0x00 ; '.'
0000000000000590         db  0x00 ; '.'
0000000000000591         db  0x00 ; '.'
0000000000000592         db  0x00 ; '.'
0000000000000593         db  0x00 ; '.'
0000000000000594         db  0x00 ; '.'
0000000000000595         db  0x00 ; '.'
0000000000000596         db  0x00 ; '.'
0000000000000597         db  0x00 ; '.'
0000000000000598         db  0x36 ; '6'
0000000000000599         db  0x01 ; '.'
000000000000059a         db  0x00 ; '.'
000000000000059b         db  0x00 ; '.'
000000000000059c         db  0x12 ; '.'
000000000000059d         db  0x00 ; '.'
000000000000059e         db  0x00 ; '.'
000000000000059f         db  0x00 ; '.'                                         ; DATA XREF=sub_12fe0+32
00000000000005a0         db  0x00 ; '.'
00000000000005a1         db  0x00 ; '.'
00000000000005a2         db  0x00 ; '.'
00000000000005a3         db  0x00 ; '.'
00000000000005a4         db  0x00 ; '.'
00000000000005a5         db  0x00 ; '.'
00000000000005a6         db  0x00 ; '.'
00000000000005a7         db  0x00 ; '.'
00000000000005a8         db  0x00 ; '.'
00000000000005a9         db  0x00 ; '.'
00000000000005aa         db  0x00 ; '.'
00000000000005ab         db  0x00 ; '.'
00000000000005ac         db  0x00 ; '.'
00000000000005ad         db  0x00 ; '.'
00000000000005ae         db  0x00 ; '.'
00000000000005af         db  0x00 ; '.'                                         ; DATA XREF=sub_136c0+182
00000000000005b0         db  0x11 ; '.'                                         ; DATA XREF=sub_136c0+120
00000000000005b1         db  0x01 ; '.'
00000000000005b2         db  0x00 ; '.'
00000000000005b3         db  0x00 ; '.'
00000000000005b4         db  0x12 ; '.'
00000000000005b5         db  0x00 ; '.'
00000000000005b6         db  0x00 ; '.'
00000000000005b7         db  0x00 ; '.'
00000000000005b8         db  0x00 ; '.'
00000000000005b9         db  0x00 ; '.'
00000000000005ba         db  0x00 ; '.'
00000000000005bb         db  0x00 ; '.'
00000000000005bc         db  0x00 ; '.'
00000000000005bd         db  0x00 ; '.'
00000000000005be         db  0x00 ; '.'
00000000000005bf         db  0x00 ; '.'
00000000000005c0         db  0x00 ; '.'
00000000000005c1         db  0x00 ; '.'
00000000000005c2         db  0x00 ; '.'                                         ; DATA XREF=sub_136c0+151
00000000000005c3         db  0x00 ; '.'
00000000000005c4         db  0x00 ; '.'
00000000000005c5         db  0x00 ; '.'
00000000000005c6         db  0x00 ; '.'
00000000000005c7         db  0x00 ; '.'
00000000000005c8         db  0x89 ; '.'
00000000000005c9         db  0x02 ; '.'
00000000000005ca         db  0x00 ; '.'
00000000000005cb         db  0x00 ; '.'
00000000000005cc         db  0x12 ; '.'
00000000000005cd         db  0x00 ; '.'
00000000000005ce         db  0x00 ; '.'
00000000000005cf         db  0x00 ; '.'
00000000000005d0         db  0x00 ; '.'
00000000000005d1         db  0x00 ; '.'
00000000000005d2         db  0x00 ; '.'
00000000000005d3         db  0x00 ; '.'
00000000000005d4         db  0x00 ; '.'
00000000000005d5         db  0x00 ; '.'
00000000000005d6         db  0x00 ; '.'
00000000000005d7         db  0x00 ; '.'
00000000000005d8         db  0x00 ; '.'
00000000000005d9         db  0x00 ; '.'
00000000000005da         db  0x00 ; '.'
00000000000005db         db  0x00 ; '.'
00000000000005dc         db  0x00 ; '.'
00000000000005dd         db  0x00 ; '.'
00000000000005de         db  0x00 ; '.'
00000000000005df         db  0x00 ; '.'
00000000000005e0         db  0x4e ; 'N'
00000000000005e1         db  0x01 ; '.'
00000000000005e2         db  0x00 ; '.'
00000000000005e3         db  0x00 ; '.'
00000000000005e4         db  0x12 ; '.'
00000000000005e5         db  0x00 ; '.'
00000000000005e6         db  0x00 ; '.'
00000000000005e7         db  0x00 ; '.'
00000000000005e8         db  0x00 ; '.'
00000000000005e9         db  0x00 ; '.'
00000000000005ea         db  0x00 ; '.'
00000000000005eb         db  0x00 ; '.'
00000000000005ec         db  0x00 ; '.'
00000000000005ed         db  0x00 ; '.'
00000000000005ee         db  0x00 ; '.'
00000000000005ef         db  0x00 ; '.'
00000000000005f0         db  0x00 ; '.'
00000000000005f1         db  0x00 ; '.'
00000000000005f2         db  0x00 ; '.'
00000000000005f3         db  0x00 ; '.'
00000000000005f4         db  0x00 ; '.'
00000000000005f5         db  0x00 ; '.'
00000000000005f6         db  0x00 ; '.'
00000000000005f7         db  0x00 ; '.'
00000000000005f8         db  0x2f ; '/'
00000000000005f9         db  0x01 ; '.'
00000000000005fa         db  0x00 ; '.'
00000000000005fb         db  0x00 ; '.'
00000000000005fc         db  0x12 ; '.'
00000000000005fd         db  0x00 ; '.'
00000000000005fe         db  0x00 ; '.'
00000000000005ff         db  0x00 ; '.'
0000000000000600         db  0x00 ; '.'
0000000000000601         db  0x00 ; '.'
0000000000000602         db  0x00 ; '.'
0000000000000603         db  0x00 ; '.'
0000000000000604         db  0x00 ; '.'
0000000000000605         db  0x00 ; '.'
0000000000000606         db  0x00 ; '.'
0000000000000607         db  0x00 ; '.'
0000000000000608         db  0x00 ; '.'
0000000000000609         db  0x00 ; '.'
000000000000060a         db  0x00 ; '.'
000000000000060b         db  0x00 ; '.'
000000000000060c         db  0x00 ; '.'
000000000000060d         db  0x00 ; '.'
000000000000060e         db  0x00 ; '.'
000000000000060f         db  0x00 ; '.'
0000000000000610         db  0xb4 ; '.'
0000000000000611         db  0x02 ; '.'
0000000000000612         db  0x00 ; '.'
0000000000000613         db  0x00 ; '.'
0000000000000614         db  0x12 ; '.'
0000000000000615         db  0x00 ; '.'
0000000000000616         db  0x00 ; '.'
0000000000000617         db  0x00 ; '.'
0000000000000618         db  0x00 ; '.'
0000000000000619         db  0x00 ; '.'
000000000000061a         db  0x00 ; '.'
000000000000061b         db  0x00 ; '.'
000000000000061c         db  0x00 ; '.'
000000000000061d         db  0x00 ; '.'
000000000000061e         db  0x00 ; '.'
000000000000061f         db  0x00 ; '.'
0000000000000620         db  0x00 ; '.'
0000000000000621         db  0x00 ; '.'
0000000000000622         db  0x00 ; '.'
0000000000000623         db  0x00 ; '.'
0000000000000624         db  0x00 ; '.'
0000000000000625         db  0x00 ; '.'
0000000000000626         db  0x00 ; '.'
0000000000000627         db  0x00 ; '.'
0000000000000628         db  0x1f ; '.'
0000000000000629         db  0x01 ; '.'
000000000000062a         db  0x00 ; '.'
000000000000062b         db  0x00 ; '.'
000000000000062c         db  0x12 ; '.'
000000000000062d         db  0x00 ; '.'
000000000000062e         db  0x00 ; '.'
000000000000062f         db  0x00 ; '.'
0000000000000630         db  0x00 ; '.'
0000000000000631         db  0x00 ; '.'
0000000000000632         db  0x00 ; '.'
0000000000000633         db  0x00 ; '.'
0000000000000634         db  0x00 ; '.'
0000000000000635         db  0x00 ; '.'
0000000000000636         db  0x00 ; '.'
0000000000000637         db  0x00 ; '.'
0000000000000638         db  0x00 ; '.'
0000000000000639         db  0x00 ; '.'
000000000000063a         db  0x00 ; '.'
000000000000063b         db  0x00 ; '.'
000000000000063c         db  0x00 ; '.'
000000000000063d         db  0x00 ; '.'
000000000000063e         db  0x00 ; '.'
000000000000063f         db  0x00 ; '.'
0000000000000640         db  0x82 ; '.'
0000000000000641         db  0x02 ; '.'
0000000000000642         db  0x00 ; '.'
0000000000000643         db  0x00 ; '.'
0000000000000644         db  0x12 ; '.'
0000000000000645         db  0x00 ; '.'
0000000000000646         db  0x00 ; '.'
0000000000000647         db  0x00 ; '.'
0000000000000648         db  0x00 ; '.'
0000000000000649         db  0x00 ; '.'
000000000000064a         db  0x00 ; '.'
000000000000064b         db  0x00 ; '.'
000000000000064c         db  0x00 ; '.'
000000000000064d         db  0x00 ; '.'
000000000000064e         db  0x00 ; '.'
000000000000064f         db  0x00 ; '.'
0000000000000650         db  0x00 ; '.'
0000000000000651         db  0x00 ; '.'
0000000000000652         db  0x00 ; '.'
0000000000000653         db  0x00 ; '.'
0000000000000654         db  0x00 ; '.'
0000000000000655         db  0x00 ; '.'
0000000000000656         db  0x00 ; '.'
0000000000000657         db  0x00 ; '.'
0000000000000658         db  0x43 ; 'C'
0000000000000659         db  0x03 ; '.'
000000000000065a         db  0x00 ; '.'
000000000000065b         db  0x00 ; '.'
000000000000065c         db  0x20 ; ' '
000000000000065d         db  0x00 ; '.'
000000000000065e         db  0x00 ; '.'
000000000000065f         db  0x00 ; '.'
0000000000000660         db  0x00 ; '.'
0000000000000661         db  0x00 ; '.'
0000000000000662         db  0x00 ; '.'
0000000000000663         db  0x00 ; '.'
0000000000000664         db  0x00 ; '.'
0000000000000665         db  0x00 ; '.'
0000000000000666         db  0x00 ; '.'
0000000000000667         db  0x00 ; '.'
0000000000000668         db  0x00 ; '.'
0000000000000669         db  0x00 ; '.'
000000000000066a         db  0x00 ; '.'
000000000000066b         db  0x00 ; '.'
000000000000066c         db  0x00 ; '.'
000000000000066d         db  0x00 ; '.'
000000000000066e         db  0x00 ; '.'
000000000000066f         db  0x00 ; '.'
0000000000000670         db  0x70 ; 'p'
0000000000000671         db  0x01 ; '.'
0000000000000672         db  0x00 ; '.'
0000000000000673         db  0x00 ; '.'
0000000000000674         db  0x12 ; '.'
0000000000000675         db  0x00 ; '.'
0000000000000676         db  0x00 ; '.'
0000000000000677         db  0x00 ; '.'
0000000000000678         db  0x00 ; '.'
0000000000000679         db  0x00 ; '.'
000000000000067a         db  0x00 ; '.'
000000000000067b         db  0x00 ; '.'
000000000000067c         db  0x00 ; '.'
000000000000067d         db  0x00 ; '.'
000000000000067e         db  0x00 ; '.'
000000000000067f         db  0x00 ; '.'
0000000000000680         db  0x00 ; '.'
0000000000000681         db  0x00 ; '.'
0000000000000682         db  0x00 ; '.'
0000000000000683         db  0x00 ; '.'
0000000000000684         db  0x00 ; '.'
0000000000000685         db  0x00 ; '.'
0000000000000686         db  0x00 ; '.'
0000000000000687         db  0x00 ; '.'
0000000000000688         db  0xe6 ; '.'
0000000000000689         db  0x01 ; '.'
000000000000068a         db  0x00 ; '.'
000000000000068b         db  0x00 ; '.'
000000000000068c         db  0x12 ; '.'
000000000000068d         db  0x00 ; '.'
000000000000068e         db  0x00 ; '.'
000000000000068f         db  0x00 ; '.'
0000000000000690         db  0x00 ; '.'
0000000000000691         db  0x00 ; '.'
0000000000000692         db  0x00 ; '.'
0000000000000693         db  0x00 ; '.'
0000000000000694         db  0x00 ; '.'
0000000000000695         db  0x00 ; '.'
0000000000000696         db  0x00 ; '.'
0000000000000697         db  0x00 ; '.'
0000000000000698         db  0x00 ; '.'
0000000000000699         db  0x00 ; '.'
000000000000069a         db  0x00 ; '.'
000000000000069b         db  0x00 ; '.'
000000000000069c         db  0x00 ; '.'
000000000000069d         db  0x00 ; '.'
000000000000069e         db  0x00 ; '.'
000000000000069f         db  0x00 ; '.'
00000000000006a0         db  0xf1 ; '.'
00000000000006a1         db  0x00 ; '.'
00000000000006a2         db  0x00 ; '.'
00000000000006a3         db  0x00 ; '.'
00000000000006a4         db  0x12 ; '.'
00000000000006a5         db  0x00 ; '.'
00000000000006a6         db  0x00 ; '.'
00000000000006a7         db  0x00 ; '.'
00000000000006a8         db  0x00 ; '.'
00000000000006a9         db  0x00 ; '.'
00000000000006aa         db  0x00 ; '.'
00000000000006ab         db  0x00 ; '.'
00000000000006ac         db  0x00 ; '.'
00000000000006ad         db  0x00 ; '.'
00000000000006ae         db  0x00 ; '.'
00000000000006af         db  0x00 ; '.'
00000000000006b0         db  0x00 ; '.'
00000000000006b1         db  0x00 ; '.'
00000000000006b2         db  0x00 ; '.'
00000000000006b3         db  0x00 ; '.'
00000000000006b4         db  0x00 ; '.'
00000000000006b5         db  0x00 ; '.'
00000000000006b6         db  0x00 ; '.'
00000000000006b7         db  0x00 ; '.'
00000000000006b8         db  0x90 ; '.'
00000000000006b9         db  0x01 ; '.'
00000000000006ba         db  0x00 ; '.'
00000000000006bb         db  0x00 ; '.'
00000000000006bc         db  0x12 ; '.'
00000000000006bd         db  0x00 ; '.'
00000000000006be         db  0x00 ; '.'
00000000000006bf         db  0x00 ; '.'
00000000000006c0         db  0x00 ; '.'
00000000000006c1         db  0x00 ; '.'
00000000000006c2         db  0x00 ; '.'
00000000000006c3         db  0x00 ; '.'
00000000000006c4         db  0x00 ; '.'
00000000000006c5         db  0x00 ; '.'
00000000000006c6         db  0x00 ; '.'
00000000000006c7         db  0x00 ; '.'
00000000000006c8         db  0x00 ; '.'
00000000000006c9         db  0x00 ; '.'
00000000000006ca         db  0x00 ; '.'
00000000000006cb         db  0x00 ; '.'
00000000000006cc         db  0x00 ; '.'
00000000000006cd         db  0x00 ; '.'
00000000000006ce         db  0x00 ; '.'
00000000000006cf         db  0x00 ; '.'
00000000000006d0         db  0x7a ; 'z'
00000000000006d1         db  0x00 ; '.'
00000000000006d2         db  0x00 ; '.'
00000000000006d3         db  0x00 ; '.'
00000000000006d4         db  0x12 ; '.'
00000000000006d5         db  0x00 ; '.'
00000000000006d6         db  0x00 ; '.'
00000000000006d7         db  0x00 ; '.'
00000000000006d8         db  0x00 ; '.'
00000000000006d9         db  0x00 ; '.'
00000000000006da         db  0x00 ; '.'
00000000000006db         db  0x00 ; '.'
00000000000006dc         db  0x00 ; '.'
00000000000006dd         db  0x00 ; '.'
00000000000006de         db  0x00 ; '.'
00000000000006df         db  0x00 ; '.'
00000000000006e0         db  0x00 ; '.'
00000000000006e1         db  0x00 ; '.'
00000000000006e2         db  0x00 ; '.'
00000000000006e3         db  0x00 ; '.'
00000000000006e4         db  0x00 ; '.'
00000000000006e5         db  0x00 ; '.'
00000000000006e6         db  0x00 ; '.'
00000000000006e7         db  0x00 ; '.'
00000000000006e8         db  0x0b ; '.'
00000000000006e9         db  0x00 ; '.'
00000000000006ea         db  0x00 ; '.'
00000000000006eb         db  0x00 ; '.'
00000000000006ec         db  0x12 ; '.'
00000000000006ed         db  0x00 ; '.'
00000000000006ee         db  0x00 ; '.'
00000000000006ef         db  0x00 ; '.'
00000000000006f0         db  0x00 ; '.'
00000000000006f1         db  0x00 ; '.'
00000000000006f2         db  0x00 ; '.'
00000000000006f3         db  0x00 ; '.'
00000000000006f4         db  0x00 ; '.'
00000000000006f5         db  0x00 ; '.'
00000000000006f6         db  0x00 ; '.'
00000000000006f7         db  0x00 ; '.'
00000000000006f8         db  0x00 ; '.'
00000000000006f9         db  0x00 ; '.'
00000000000006fa         db  0x00 ; '.'
00000000000006fb         db  0x00 ; '.'
00000000000006fc         db  0x00 ; '.'
00000000000006fd         db  0x00 ; '.'
00000000000006fe         db  0x00 ; '.'
00000000000006ff         db  0x00 ; '.'
0000000000000700         db  0xa7 ; '.'
0000000000000701         db  0x01 ; '.'
0000000000000702         db  0x00 ; '.'
0000000000000703         db  0x00 ; '.'
0000000000000704         db  0x12 ; '.'
0000000000000705         db  0x00 ; '.'
0000000000000706         db  0x00 ; '.'
0000000000000707         db  0x00 ; '.'
0000000000000708         db  0x00 ; '.'
0000000000000709         db  0x00 ; '.'
000000000000070a         db  0x00 ; '.'
000000000000070b         db  0x00 ; '.'
000000000000070c         db  0x00 ; '.'
000000000000070d         db  0x00 ; '.'
000000000000070e         db  0x00 ; '.'
000000000000070f         db  0x00 ; '.'
0000000000000710         db  0x00 ; '.'
0000000000000711         db  0x00 ; '.'
0000000000000712         db  0x00 ; '.'
0000000000000713         db  0x00 ; '.'
0000000000000714         db  0x00 ; '.'
0000000000000715         db  0x00 ; '.'
0000000000000716         db  0x00 ; '.'
0000000000000717         db  0x00 ; '.'
0000000000000718         db  0xc8 ; '.'
0000000000000719         db  0x01 ; '.'
000000000000071a         db  0x00 ; '.'
000000000000071b         db  0x00 ; '.'
000000000000071c         db  0x12 ; '.'
000000000000071d         db  0x00 ; '.'
000000000000071e         db  0x00 ; '.'
000000000000071f         db  0x00 ; '.'
0000000000000720         db  0x00 ; '.'
0000000000000721         db  0x00 ; '.'
0000000000000722         db  0x00 ; '.'
0000000000000723         db  0x00 ; '.'
0000000000000724         db  0x00 ; '.'
0000000000000725         db  0x00 ; '.'
0000000000000726         db  0x00 ; '.'
0000000000000727         db  0x00 ; '.'
0000000000000728         db  0x00 ; '.'
0000000000000729         db  0x00 ; '.'
000000000000072a         db  0x00 ; '.'
000000000000072b         db  0x00 ; '.'
000000000000072c         db  0x00 ; '.'
000000000000072d         db  0x00 ; '.'
000000000000072e         db  0x00 ; '.'
000000000000072f         db  0x00 ; '.'
0000000000000730         db  0x72 ; 'r'
0000000000000731         db  0x02 ; '.'
0000000000000732         db  0x00 ; '.'
0000000000000733         db  0x00 ; '.'
0000000000000734         db  0x12 ; '.'
0000000000000735         db  0x00 ; '.'
0000000000000736         db  0x00 ; '.'
0000000000000737         db  0x00 ; '.'
0000000000000738         db  0x00 ; '.'
0000000000000739         db  0x00 ; '.'
000000000000073a         db  0x00 ; '.'
000000000000073b         db  0x00 ; '.'
000000000000073c         db  0x00 ; '.'
000000000000073d         db  0x00 ; '.'
000000000000073e         db  0x00 ; '.'
000000000000073f         db  0x00 ; '.'
0000000000000740         db  0x00 ; '.'
0000000000000741         db  0x00 ; '.'
0000000000000742         db  0x00 ; '.'
0000000000000743         db  0x00 ; '.'
0000000000000744         db  0x00 ; '.'
0000000000000745         db  0x00 ; '.'
0000000000000746         db  0x00 ; '.'
0000000000000747         db  0x00 ; '.'
0000000000000748         db  0xa2 ; '.'
0000000000000749         db  0x00 ; '.'
000000000000074a         db  0x00 ; '.'
000000000000074b         db  0x00 ; '.'
000000000000074c         db  0x12 ; '.'
000000000000074d         db  0x00 ; '.'
000000000000074e         db  0x00 ; '.'
000000000000074f         db  0x00 ; '.'
0000000000000750         db  0x00 ; '.'
0000000000000751         db  0x00 ; '.'
0000000000000752         db  0x00 ; '.'
0000000000000753         db  0x00 ; '.'
0000000000000754         db  0x00 ; '.'
0000000000000755         db  0x00 ; '.'
0000000000000756         db  0x00 ; '.'
0000000000000757         db  0x00 ; '.'
0000000000000758         db  0x00 ; '.'
0000000000000759         db  0x00 ; '.'
000000000000075a         db  0x00 ; '.'
000000000000075b         db  0x00 ; '.'
000000000000075c         db  0x00 ; '.'
000000000000075d         db  0x00 ; '.'
000000000000075e         db  0x00 ; '.'
000000000000075f         db  0x00 ; '.'
0000000000000760         db  0x38 ; '8'
0000000000000761         db  0x00 ; '.'
0000000000000762         db  0x00 ; '.'
0000000000000763         db  0x00 ; '.'
0000000000000764         db  0x12 ; '.'
0000000000000765         db  0x00 ; '.'
0000000000000766         db  0x00 ; '.'
0000000000000767         db  0x00 ; '.'
0000000000000768         db  0x00 ; '.'
0000000000000769         db  0x00 ; '.'
000000000000076a         db  0x00 ; '.'
000000000000076b         db  0x00 ; '.'
000000000000076c         db  0x00 ; '.'
000000000000076d         db  0x00 ; '.'
000000000000076e         db  0x00 ; '.'
000000000000076f         db  0x00 ; '.'
0000000000000770         db  0x00 ; '.'
0000000000000771         db  0x00 ; '.'
0000000000000772         db  0x00 ; '.'
0000000000000773         db  0x00 ; '.'
0000000000000774         db  0x00 ; '.'
0000000000000775         db  0x00 ; '.'
0000000000000776         db  0x00 ; '.'
0000000000000777         db  0x00 ; '.'
0000000000000778         db  0x19 ; '.'
0000000000000779         db  0x00 ; '.'
000000000000077a         db  0x00 ; '.'
000000000000077b         db  0x00 ; '.'
000000000000077c         db  0x12 ; '.'
000000000000077d         db  0x00 ; '.'
000000000000077e         db  0x00 ; '.'
000000000000077f         db  0x00 ; '.'
0000000000000780         db  0x00 ; '.'
0000000000000781         db  0x00 ; '.'
0000000000000782         db  0x00 ; '.'
0000000000000783         db  0x00 ; '.'
0000000000000784         db  0x00 ; '.'
0000000000000785         db  0x00 ; '.'
0000000000000786         db  0x00 ; '.'
0000000000000787         db  0x00 ; '.'
0000000000000788         db  0x00 ; '.'
0000000000000789         db  0x00 ; '.'
000000000000078a         db  0x00 ; '.'
000000000000078b         db  0x00 ; '.'
000000000000078c         db  0x00 ; '.'
000000000000078d         db  0x00 ; '.'
000000000000078e         db  0x00 ; '.'
000000000000078f         db  0x00 ; '.'
0000000000000790         db  0xaa ; '.'
0000000000000791         db  0x00 ; '.'
0000000000000792         db  0x00 ; '.'
0000000000000793         db  0x00 ; '.'
0000000000000794         db  0x12 ; '.'
0000000000000795         db  0x00 ; '.'
0000000000000796         db  0x00 ; '.'
0000000000000797         db  0x00 ; '.'
0000000000000798         db  0x00 ; '.'
0000000000000799         db  0x00 ; '.'
000000000000079a         db  0x00 ; '.'
000000000000079b         db  0x00 ; '.'
000000000000079c         db  0x00 ; '.'
000000000000079d         db  0x00 ; '.'
000000000000079e         db  0x00 ; '.'
000000000000079f         db  0x00 ; '.'
00000000000007a0         db  0x00 ; '.'
00000000000007a1         db  0x00 ; '.'
00000000000007a2         db  0x00 ; '.'
00000000000007a3         db  0x00 ; '.'
00000000000007a4         db  0x00 ; '.'
00000000000007a5         db  0x00 ; '.'
00000000000007a6         db  0x00 ; '.'
00000000000007a7         db  0x00 ; '.'
00000000000007a8         db  0x5b ; '['
00000000000007a9         db  0x02 ; '.'
00000000000007aa         db  0x00 ; '.'
00000000000007ab         db  0x00 ; '.'
00000000000007ac         db  0x12 ; '.'
00000000000007ad         db  0x00 ; '.'
00000000000007ae         db  0x00 ; '.'
00000000000007af         db  0x00 ; '.'
00000000000007b0         db  0x00 ; '.'
00000000000007b1         db  0x00 ; '.'
00000000000007b2         db  0x00 ; '.'
00000000000007b3         db  0x00 ; '.'
00000000000007b4         db  0x00 ; '.'
00000000000007b5         db  0x00 ; '.'
00000000000007b6         db  0x00 ; '.'
00000000000007b7         db  0x00 ; '.'
00000000000007b8         db  0x00 ; '.'
00000000000007b9         db  0x00 ; '.'
00000000000007ba         db  0x00 ; '.'
00000000000007bb         db  0x00 ; '.'
00000000000007bc         db  0x00 ; '.'
00000000000007bd         db  0x00 ; '.'
00000000000007be         db  0x00 ; '.'
00000000000007bf         db  0x00 ; '.'
00000000000007c0         db  0x82 ; '.'
00000000000007c1         db  0x00 ; '.'
00000000000007c2         db  0x00 ; '.'
00000000000007c3         db  0x00 ; '.'
00000000000007c4         db  0x12 ; '.'
00000000000007c5         db  0x00 ; '.'
00000000000007c6         db  0x00 ; '.'
00000000000007c7         db  0x00 ; '.'
00000000000007c8         db  0x00 ; '.'
00000000000007c9         db  0x00 ; '.'
00000000000007ca         db  0x00 ; '.'
00000000000007cb         db  0x00 ; '.'
00000000000007cc         db  0x00 ; '.'
00000000000007cd         db  0x00 ; '.'
00000000000007ce         db  0x00 ; '.'
00000000000007cf         db  0x00 ; '.'
00000000000007d0         db  0x00 ; '.'
00000000000007d1         db  0x00 ; '.'
00000000000007d2         db  0x00 ; '.'
00000000000007d3         db  0x00 ; '.'
00000000000007d4         db  0x00 ; '.'
00000000000007d5         db  0x00 ; '.'
00000000000007d6         db  0x00 ; '.'
00000000000007d7         db  0x00 ; '.'
00000000000007d8         db  0xa2 ; '.'
00000000000007d9         db  0x02 ; '.'
00000000000007da         db  0x00 ; '.'
00000000000007db         db  0x00 ; '.'
00000000000007dc         db  0x12 ; '.'
00000000000007dd         db  0x00 ; '.'
00000000000007de         db  0x00 ; '.'
00000000000007df         db  0x00 ; '.'
00000000000007e0         db  0x00 ; '.'
00000000000007e1         db  0x00 ; '.'
00000000000007e2         db  0x00 ; '.'
00000000000007e3         db  0x00 ; '.'                                         ; DATA XREF=version_etc_arn+89
00000000000007e4         db  0x00 ; '.'
00000000000007e5         db  0x00 ; '.'
00000000000007e6         db  0x00 ; '.'
00000000000007e7         db  0x00 ; '.'
00000000000007e8         db  0x00 ; '.'
00000000000007e9         db  0x00 ; '.'
00000000000007ea         db  0x00 ; '.'
00000000000007eb         db  0x00 ; '.'
00000000000007ec         db  0x00 ; '.'
00000000000007ed         db  0x00 ; '.'
00000000000007ee         db  0x00 ; '.'
00000000000007ef         db  0x00 ; '.'
00000000000007f0         db  0x53 ; 'S'
00000000000007f1         db  0x00 ; '.'
00000000000007f2         db  0x00 ; '.'
00000000000007f3         db  0x00 ; '.'
00000000000007f4         db  0x12 ; '.'
00000000000007f5         db  0x00 ; '.'
00000000000007f6         db  0x00 ; '.'
00000000000007f7         db  0x00 ; '.'
00000000000007f8         db  0x00 ; '.'
00000000000007f9         db  0x00 ; '.'
00000000000007fa         db  0x00 ; '.'
00000000000007fb         db  0x00 ; '.'
00000000000007fc         db  0x00 ; '.'
00000000000007fd         db  0x00 ; '.'
00000000000007fe         db  0x00 ; '.'
00000000000007ff         db  0x00 ; '.'
0000000000000800         db  0x00 ; '.'                                         ; DATA XREF=peek_token+816, peek_token+1670
0000000000000801         db  0x00 ; '.'
0000000000000802         db  0x00 ; '.'
0000000000000803         db  0x00 ; '.'
0000000000000804         db  0x00 ; '.'
0000000000000805         db  0x00 ; '.'
0000000000000806         db  0x00 ; '.'
0000000000000807         db  0x00 ; '.'
0000000000000808         db  0x4a ; 'J'
0000000000000809         db  0x00 ; '.'
000000000000080a         db  0x00 ; '.'
000000000000080b         db  0x00 ; '.'
000000000000080c         db  0x12 ; '.'
000000000000080d         db  0x00 ; '.'
000000000000080e         db  0x00 ; '.'
000000000000080f         db  0x00 ; '.'
0000000000000810         db  0x00 ; '.'
0000000000000811         db  0x00 ; '.'
0000000000000812         db  0x00 ; '.'
0000000000000813         db  0x00 ; '.'
0000000000000814         db  0x00 ; '.'
0000000000000815         db  0x00 ; '.'
0000000000000816         db  0x00 ; '.'
0000000000000817         db  0x00 ; '.'
0000000000000818         db  0x00 ; '.'
0000000000000819         db  0x00 ; '.'
000000000000081a         db  0x00 ; '.'
000000000000081b         db  0x00 ; '.'
000000000000081c         db  0x00 ; '.'
000000000000081d         db  0x00 ; '.'
000000000000081e         db  0x00 ; '.'
000000000000081f         db  0x00 ; '.'
0000000000000820         db  0xb0 ; '.'
0000000000000821         db  0x00 ; '.'
0000000000000822         db  0x00 ; '.'
0000000000000823         db  0x00 ; '.'
0000000000000824         db  0x12 ; '.'
0000000000000825         db  0x00 ; '.'
0000000000000826         db  0x00 ; '.'
0000000000000827         db  0x00 ; '.'
0000000000000828         db  0x00 ; '.'
0000000000000829         db  0x00 ; '.'
000000000000082a         db  0x00 ; '.'
000000000000082b         db  0x00 ; '.'
000000000000082c         db  0x00 ; '.'
000000000000082d         db  0x00 ; '.'
000000000000082e         db  0x00 ; '.'
000000000000082f         db  0x00 ; '.'
0000000000000830         db  0x00 ; '.'
0000000000000831         db  0x00 ; '.'
0000000000000832         db  0x00 ; '.'
0000000000000833         db  0x00 ; '.'
0000000000000834         db  0x00 ; '.'
0000000000000835         db  0x00 ; '.'
0000000000000836         db  0x00 ; '.'
0000000000000837         db  0x00 ; '.'
0000000000000838         db  0xe3 ; '.'
0000000000000839         db  0x02 ; '.'
000000000000083a         db  0x00 ; '.'
000000000000083b         db  0x00 ; '.'
000000000000083c         db  0x12 ; '.'
000000000000083d         db  0x00 ; '.'
000000000000083e         db  0x00 ; '.'
000000000000083f         db  0x00 ; '.'
0000000000000840         db  0x00 ; '.'
0000000000000841         db  0x00 ; '.'
0000000000000842         db  0x00 ; '.'
0000000000000843         db  0x00 ; '.'
0000000000000844         db  0x00 ; '.'
0000000000000845         db  0x00 ; '.'
0000000000000846         db  0x00 ; '.'
0000000000000847         db  0x00 ; '.'
0000000000000848         db  0x00 ; '.'
0000000000000849         db  0x00 ; '.'
000000000000084a         db  0x00 ; '.'
000000000000084b         db  0x00 ; '.'
000000000000084c         db  0x00 ; '.'
000000000000084d         db  0x00 ; '.'
000000000000084e         db  0x00 ; '.'
000000000000084f         db  0x00 ; '.'
0000000000000850         db  0xc6 ; '.'
0000000000000851         db  0x00 ; '.'
0000000000000852         db  0x00 ; '.'
0000000000000853         db  0x00 ; '.'
0000000000000854         db  0x12 ; '.'
0000000000000855         db  0x00 ; '.'
0000000000000856         db  0x00 ; '.'
0000000000000857         db  0x00 ; '.'
0000000000000858         db  0x00 ; '.'
0000000000000859         db  0x00 ; '.'
000000000000085a         db  0x00 ; '.'
000000000000085b         db  0x00 ; '.'
000000000000085c         db  0x00 ; '.'
000000000000085d         db  0x00 ; '.'
000000000000085e         db  0x00 ; '.'
000000000000085f         db  0x00 ; '.'
0000000000000860         db  0x00 ; '.'
0000000000000861         db  0x00 ; '.'
0000000000000862         db  0x00 ; '.'
0000000000000863         db  0x00 ; '.'
0000000000000864         db  0x00 ; '.'
0000000000000865         db  0x00 ; '.'
0000000000000866         db  0x00 ; '.'
0000000000000867         db  0x00 ; '.'
0000000000000868         db  0xed ; '.'
0000000000000869         db  0x01 ; '.'
000000000000086a         db  0x00 ; '.'
000000000000086b         db  0x00 ; '.'
000000000000086c         db  0x12 ; '.'
000000000000086d         db  0x00 ; '.'
000000000000086e         db  0x00 ; '.'
000000000000086f         db  0x00 ; '.'
0000000000000870         db  0x00 ; '.'
0000000000000871         db  0x00 ; '.'
0000000000000872         db  0x00 ; '.'
0000000000000873         db  0x00 ; '.'
0000000000000874         db  0x00 ; '.'
0000000000000875         db  0x00 ; '.'
0000000000000876         db  0x00 ; '.'
0000000000000877         db  0x00 ; '.'
0000000000000878         db  0x00 ; '.'
0000000000000879         db  0x00 ; '.'
000000000000087a         db  0x00 ; '.'
000000000000087b         db  0x00 ; '.'
000000000000087c         db  0x00 ; '.'
000000000000087d         db  0x00 ; '.'
000000000000087e         db  0x00 ; '.'
000000000000087f         db  0x00 ; '.'
0000000000000880         db  0x55 ; 'U'
0000000000000881         db  0x01 ; '.'
0000000000000882         db  0x00 ; '.'
0000000000000883         db  0x00 ; '.'
0000000000000884         db  0x12 ; '.'
0000000000000885         db  0x00 ; '.'
0000000000000886         db  0x00 ; '.'
0000000000000887         db  0x00 ; '.'
0000000000000888         db  0x00 ; '.'
0000000000000889         db  0x00 ; '.'
000000000000088a         db  0x00 ; '.'
000000000000088b         db  0x00 ; '.'
000000000000088c         db  0x00 ; '.'
000000000000088d         db  0x00 ; '.'
000000000000088e         db  0x00 ; '.'
000000000000088f         db  0x00 ; '.'
0000000000000890         db  0x00 ; '.'
0000000000000891         db  0x00 ; '.'
0000000000000892         db  0x00 ; '.'
0000000000000893         db  0x00 ; '.'
0000000000000894         db  0x00 ; '.'
0000000000000895         db  0x00 ; '.'
0000000000000896         db  0x00 ; '.'
0000000000000897         db  0x00 ; '.'
0000000000000898         db  0x52 ; 'R'
0000000000000899         db  0x03 ; '.'
000000000000089a         db  0x00 ; '.'
000000000000089b         db  0x00 ; '.'
000000000000089c         db  0x20 ; ' '
000000000000089d         db  0x00 ; '.'
000000000000089e         db  0x00 ; '.'
000000000000089f         db  0x00 ; '.'
00000000000008a0         db  0x00 ; '.'
00000000000008a1         db  0x00 ; '.'
00000000000008a2         db  0x00 ; '.'
00000000000008a3         db  0x00 ; '.'
00000000000008a4         db  0x00 ; '.'
00000000000008a5         db  0x00 ; '.'
00000000000008a6         db  0x00 ; '.'
00000000000008a7         db  0x00 ; '.'
00000000000008a8         db  0x00 ; '.'
00000000000008a9         db  0x00 ; '.'
00000000000008aa         db  0x00 ; '.'
00000000000008ab         db  0x00 ; '.'
00000000000008ac         db  0x00 ; '.'
00000000000008ad         db  0x00 ; '.'
00000000000008ae         db  0x00 ; '.'
00000000000008af         db  0x00 ; '.'
00000000000008b0         db  0x97 ; '.'
00000000000008b1         db  0x01 ; '.'
00000000000008b2         db  0x00 ; '.'
00000000000008b3         db  0x00 ; '.'
00000000000008b4         db  0x12 ; '.'
00000000000008b5         db  0x00 ; '.'
00000000000008b6         db  0x00 ; '.'
00000000000008b7         db  0x00 ; '.'
00000000000008b8         db  0x00 ; '.'
00000000000008b9         db  0x00 ; '.'
00000000000008ba         db  0x00 ; '.'
00000000000008bb         db  0x00 ; '.'
00000000000008bc         db  0x00 ; '.'
00000000000008bd         db  0x00 ; '.'
00000000000008be         db  0x00 ; '.'
00000000000008bf         db  0x00 ; '.'
00000000000008c0         db  0x00 ; '.'
00000000000008c1         db  0x00 ; '.'
00000000000008c2         db  0x00 ; '.'
00000000000008c3         db  0x00 ; '.'
00000000000008c4         db  0x00 ; '.'
00000000000008c5         db  0x00 ; '.'
00000000000008c6         db  0x00 ; '.'
00000000000008c7         db  0x00 ; '.'
00000000000008c8         db  0x99 ; '.'
00000000000008c9         db  0x00 ; '.'
00000000000008ca         db  0x00 ; '.'
00000000000008cb         db  0x00 ; '.'
00000000000008cc         db  0x12 ; '.'
00000000000008cd         db  0x00 ; '.'
00000000000008ce         db  0x00 ; '.'
00000000000008cf         db  0x00 ; '.'
00000000000008d0         db  0x00 ; '.'
00000000000008d1         db  0x00 ; '.'
00000000000008d2         db  0x00 ; '.'
00000000000008d3         db  0x00 ; '.'
00000000000008d4         db  0x00 ; '.'
00000000000008d5         db  0x00 ; '.'
00000000000008d6         db  0x00 ; '.'
00000000000008d7         db  0x00 ; '.'
00000000000008d8         db  0x00 ; '.'
00000000000008d9         db  0x00 ; '.'
00000000000008da         db  0x00 ; '.'
00000000000008db         db  0x00 ; '.'
00000000000008dc         db  0x00 ; '.'
00000000000008dd         db  0x00 ; '.'
00000000000008de         db  0x00 ; '.'
00000000000008df         db  0x00 ; '.'
00000000000008e0         db  0x4c ; 'L'
00000000000008e1         db  0x02 ; '.'
00000000000008e2         db  0x00 ; '.'
00000000000008e3         db  0x00 ; '.'
00000000000008e4         db  0x22 ; '"'
00000000000008e5         db  0x00 ; '.'
00000000000008e6         db  0x00 ; '.'
00000000000008e7         db  0x00 ; '.'
00000000000008e8         db  0x00 ; '.'
00000000000008e9         db  0x00 ; '.'
00000000000008ea         db  0x00 ; '.'
00000000000008eb         db  0x00 ; '.'
00000000000008ec         db  0x00 ; '.'
00000000000008ed         db  0x00 ; '.'
00000000000008ee         db  0x00 ; '.'
00000000000008ef         db  0x00 ; '.'
00000000000008f0         db  0x00 ; '.'
00000000000008f1         db  0x00 ; '.'
00000000000008f2         db  0x00 ; '.'
00000000000008f3         db  0x00 ; '.'
00000000000008f4         db  0x00 ; '.'
00000000000008f5         db  0x00 ; '.'
00000000000008f6         db  0x00 ; '.'
00000000000008f7         db  0x00 ; '.'
00000000000008f8         db  0x38 ; '8'
00000000000008f9         db  0x02 ; '.'
00000000000008fa         db  0x00 ; '.'
00000000000008fb         db  0x00 ; '.'
00000000000008fc         db  0x12 ; '.'
00000000000008fd         db  0x00 ; '.'
00000000000008fe         db  0x00 ; '.'
00000000000008ff         db  0x00 ; '.'
0000000000000900         db  0x00 ; '.'
0000000000000901         db  0x00 ; '.'
0000000000000902         db  0x00 ; '.'
0000000000000903         db  0x00 ; '.'
0000000000000904         db  0x00 ; '.'
0000000000000905         db  0x00 ; '.'
0000000000000906         db  0x00 ; '.'
0000000000000907         db  0x00 ; '.'
0000000000000908         db  0x00 ; '.'
0000000000000909         db  0x00 ; '.'
000000000000090a         db  0x00 ; '.'
000000000000090b         db  0x00 ; '.'
000000000000090c         db  0x00 ; '.'
000000000000090d         db  0x00 ; '.'
000000000000090e         db  0x00 ; '.'
000000000000090f         db  0x00 ; '.'
0000000000000910         db  0xb3 ; '.'
0000000000000911         db  0x01 ; '.'
0000000000000912         db  0x00 ; '.'
0000000000000913         db  0x00 ; '.'
0000000000000914         db  0x12 ; '.'
0000000000000915         db  0x00 ; '.'
0000000000000916         db  0x00 ; '.'
0000000000000917         db  0x00 ; '.'
0000000000000918         db  0x00 ; '.'
0000000000000919         db  0x00 ; '.'
000000000000091a         db  0x00 ; '.'
000000000000091b         db  0x00 ; '.'
000000000000091c         db  0x00 ; '.'
000000000000091d         db  0x00 ; '.'
000000000000091e         db  0x00 ; '.'
000000000000091f         db  0x00 ; '.'
0000000000000920         db  0x00 ; '.'
0000000000000921         db  0x00 ; '.'
0000000000000922         db  0x00 ; '.'
0000000000000923         db  0x00 ; '.'
0000000000000924         db  0x00 ; '.'
0000000000000925         db  0x00 ; '.'
0000000000000926         db  0x00 ; '.'
0000000000000927         db  0x00 ; '.'
0000000000000928         db  0x63 ; 'c'
0000000000000929         db  0x01 ; '.'
000000000000092a         db  0x00 ; '.'
000000000000092b         db  0x00 ; '.'
000000000000092c         db  0x11 ; '.'
000000000000092d         db  0x00 ; '.'
000000000000092e         db  0x19 ; '.'
000000000000092f         db  0x00 ; '.'
0000000000000930         db  0xe8 ; '.'
0000000000000931         db  0x90 ; '.'
0000000000000932         db  0x21 ; '!'
0000000000000933         db  0x00 ; '.'
0000000000000934         db  0x00 ; '.'
0000000000000935         db  0x00 ; '.'
0000000000000936         db  0x00 ; '.'
0000000000000937         db  0x00 ; '.'
0000000000000938         db  0x08 ; '.'
0000000000000939         db  0x00 ; '.'
000000000000093a         db  0x00 ; '.'
000000000000093b         db  0x00 ; '.'
000000000000093c         db  0x00 ; '.'
000000000000093d         db  0x00 ; '.'
000000000000093e         db  0x00 ; '.'
000000000000093f         db  0x00 ; '.'
0000000000000940         db  0xc8 ; '.'
0000000000000941         db  0x02 ; '.'
0000000000000942         db  0x00 ; '.'
0000000000000943         db  0x00 ; '.'
0000000000000944         db  0x11 ; '.'
0000000000000945         db  0x00 ; '.'
0000000000000946         db  0x19 ; '.'
0000000000000947         db  0x00 ; '.'
0000000000000948         db  0xe0 ; '.'
0000000000000949         db  0x90 ; '.'
000000000000094a         db  0x21 ; '!'
000000000000094b         db  0x00 ; '.'
000000000000094c         db  0x00 ; '.'
000000000000094d         db  0x00 ; '.'
000000000000094e         db  0x00 ; '.'
000000000000094f         db  0x00 ; '.'
0000000000000950         db  0x08 ; '.'
0000000000000951         db  0x00 ; '.'
0000000000000952         db  0x00 ; '.'
0000000000000953         db  0x00 ; '.'
0000000000000954         db  0x00 ; '.'
0000000000000955         db  0x00 ; '.'
0000000000000956         db  0x00 ; '.'
0000000000000957         db  0x00 ; '.'
0000000000000958         db  0xbf ; '.'
0000000000000959         db  0x00 ; '.'
000000000000095a         db  0x00 ; '.'
000000000000095b         db  0x00 ; '.'
000000000000095c         db  0x11 ; '.'
000000000000095d         db  0x00 ; '.'
000000000000095e         db  0x19 ; '.'
000000000000095f         db  0x00 ; '.'
0000000000000960         db  0xf0 ; '.'
0000000000000961         db  0x90 ; '.'
0000000000000962         db  0x21 ; '!'
0000000000000963         db  0x00 ; '.'
0000000000000964         db  0x00 ; '.'
0000000000000965         db  0x00 ; '.'
0000000000000966         db  0x00 ; '.'
0000000000000967         db  0x00 ; '.'
0000000000000968         db  0x08 ; '.'
0000000000000969         db  0x00 ; '.'
000000000000096a         db  0x00 ; '.'
000000000000096b         db  0x00 ; '.'
000000000000096c         db  0x00 ; '.'
000000000000096d         db  0x00 ; '.'
000000000000096e         db  0x00 ; '.'
000000000000096f         db  0x00 ; '.'
0000000000000970         db  0xcb ; '.'
0000000000000971         db  0x00 ; '.'
0000000000000972         db  0x00 ; '.'
0000000000000973         db  0x00 ; '.'
0000000000000974         db  0x21 ; '!'
0000000000000975         db  0x00 ; '.'
0000000000000976         db  0x19 ; '.'
0000000000000977         db  0x00 ; '.'
0000000000000978         db  0x08 ; '.'
0000000000000979         db  0x91 ; '.'
000000000000097a         db  0x21 ; '!'
000000000000097b         db  0x00 ; '.'
000000000000097c         db  0x00 ; '.'
000000000000097d         db  0x00 ; '.'
000000000000097e         db  0x00 ; '.'
000000000000097f         db  0x00 ; '.'
0000000000000980         db  0x08 ; '.'
0000000000000981         db  0x00 ; '.'
0000000000000982         db  0x00 ; '.'
0000000000000983         db  0x00 ; '.'
0000000000000984         db  0x00 ; '.'
0000000000000985         db  0x00 ; '.'
0000000000000986         db  0x00 ; '.'
0000000000000987         db  0x00 ; '.'
0000000000000988         db  0xd3 ; '.'
0000000000000989         db  0x02 ; '.'
000000000000098a         db  0x00 ; '.'
000000000000098b         db  0x00 ; '.'
000000000000098c         db  0x11 ; '.'
000000000000098d         db  0x00 ; '.'
000000000000098e         db  0x19 ; '.'
000000000000098f         db  0x00 ; '.'
0000000000000990         db  0x08 ; '.'
0000000000000991         db  0x91 ; '.'
0000000000000992         db  0x21 ; '!'
0000000000000993         db  0x00 ; '.'
0000000000000994         db  0x00 ; '.'
0000000000000995         db  0x00 ; '.'
0000000000000996         db  0x00 ; '.'
0000000000000997         db  0x00 ; '.'
0000000000000998         db  0x08 ; '.'
0000000000000999         db  0x00 ; '.'
000000000000099a         db  0x00 ; '.'
000000000000099b         db  0x00 ; '.'
000000000000099c         db  0x00 ; '.'
000000000000099d         db  0x00 ; '.'
000000000000099e         db  0x00 ; '.'
000000000000099f         db  0x00 ; '.'
00000000000009a0         db  0x06 ; '.'
00000000000009a1         db  0x02 ; '.'
00000000000009a2         db  0x00 ; '.'
00000000000009a3         db  0x00 ; '.'
00000000000009a4         db  0x21 ; '!'
00000000000009a5         db  0x00 ; '.'
00000000000009a6         db  0x19 ; '.'
00000000000009a7         db  0x00 ; '.'
00000000000009a8         db  0xe0 ; '.'
00000000000009a9         db  0x90 ; '.'
00000000000009aa         db  0x21 ; '!'
00000000000009ab         db  0x00 ; '.'
00000000000009ac         db  0x00 ; '.'
00000000000009ad         db  0x00 ; '.'
00000000000009ae         db  0x00 ; '.'
00000000000009af         db  0x00 ; '.'
00000000000009b0         db  0x08 ; '.'
00000000000009b1         db  0x00 ; '.'
00000000000009b2         db  0x00 ; '.'
00000000000009b3         db  0x00 ; '.'
00000000000009b4         db  0x00 ; '.'
00000000000009b5         db  0x00 ; '.'
00000000000009b6         db  0x00 ; '.'
00000000000009b7         db  0x00 ; '.'
00000000000009b8         db  0xd3 ; '.'
00000000000009b9         db  0x01 ; '.'
00000000000009ba         db  0x00 ; '.'
00000000000009bb         db  0x00 ; '.'
00000000000009bc         db  0x11 ; '.'
00000000000009bd         db  0x00 ; '.'
00000000000009be         db  0x19 ; '.'
00000000000009bf         db  0x00 ; '.'
00000000000009c0         db  0x20 ; ' '
00000000000009c1         db  0x91 ; '.'
00000000000009c2         db  0x21 ; '!'
00000000000009c3         db  0x00 ; '.'
00000000000009c4         db  0x00 ; '.'
00000000000009c5         db  0x00 ; '.'
00000000000009c6         db  0x00 ; '.'
00000000000009c7         db  0x00 ; '.'
00000000000009c8         db  0x08 ; '.'
00000000000009c9         db  0x00 ; '.'
00000000000009ca         db  0x00 ; '.'
00000000000009cb         db  0x00 ; '.'
00000000000009cc         db  0x00 ; '.'
00000000000009cd         db  0x00 ; '.'
00000000000009ce         db  0x00 ; '.'
00000000000009cf         db  0x00 ; '.'
00000000000009d0         db  0x61 ; 'a'
00000000000009d1         db  0x00 ; '.'
00000000000009d2         db  0x00 ; '.'
00000000000009d3         db  0x00 ; '.'
00000000000009d4         db  0x11 ; '.'
00000000000009d5         db  0x00 ; '.'
00000000000009d6         db  0x19 ; '.'
00000000000009d7         db  0x00 ; '.'
00000000000009d8         db  0xf8 ; '.'
00000000000009d9         db  0x90 ; '.'
00000000000009da         db  0x21 ; '!'
00000000000009db         db  0x00 ; '.'
00000000000009dc         db  0x00 ; '.'
00000000000009dd         db  0x00 ; '.'
00000000000009de         db  0x00 ; '.'
00000000000009df         db  0x00 ; '.'
00000000000009e0         db  0x04 ; '.'
00000000000009e1         db  0x00 ; '.'
00000000000009e2         db  0x00 ; '.'
00000000000009e3         db  0x00 ; '.'
00000000000009e4         db  0x00 ; '.'
00000000000009e5         db  0x00 ; '.'
00000000000009e6         db  0x00 ; '.'
00000000000009e7         db  0x00 ; '.'
00000000000009e8         db  0xc1 ; '.'
00000000000009e9         db  0x01 ; '.'
00000000000009ea         db  0x00 ; '.'
00000000000009eb         db  0x00 ; '.'
00000000000009ec         db  0x11 ; '.'
00000000000009ed         db  0x00 ; '.'
00000000000009ee         db  0x19 ; '.'
00000000000009ef         db  0x00 ; '.'
00000000000009f0         db  0x00 ; '.'
00000000000009f1         db  0x91 ; '.'
00000000000009f2         db  0x21 ; '!'
00000000000009f3         db  0x00 ; '.'
00000000000009f4         db  0x00 ; '.'
00000000000009f5         db  0x00 ; '.'
00000000000009f6         db  0x00 ; '.'
00000000000009f7         db  0x00 ; '.'
00000000000009f8         db  0x08 ; '.'
00000000000009f9         db  0x00 ; '.'
00000000000009fa         db  0x00 ; '.'
00000000000009fb         db  0x00 ; '.'
00000000000009fc         db  0x00 ; '.'
00000000000009fd         db  0x00 ; '.'
00000000000009fe         db  0x00 ; '.'
00000000000009ff         db  0x00 ; '.'


        ; Section .dynstr
        ; Range: [0xa00; 0xd6c[ (876 bytes)
        ; File offset : [2560; 3436[ (876 bytes)
        ; Flags: 0x2
        ;   SHT_STRTAB
        ;   SHF_ALLOC

0000000000000a00         db  0x00 ; '.'
0000000000000a01         db  0x6c ; 'l'
0000000000000a02         db  0x69 ; 'i'
0000000000000a03         db  0x62 ; 'b'
0000000000000a04         db  0x63 ; 'c'
0000000000000a05         db  0x2e ; '.'
0000000000000a06         db  0x73 ; 's'
0000000000000a07         db  0x6f ; 'o'
0000000000000a08         db  0x2e ; '.'
0000000000000a09         db  0x36 ; '6'
0000000000000a0a         db  0x00 ; '.'
0000000000000a0b         db  0x66 ; 'f'
0000000000000a0c         db  0x66 ; 'f'
0000000000000a0d         db  0x6c ; 'l'
0000000000000a0e         db  0x75 ; 'u'
0000000000000a0f         db  0x73 ; 's'
0000000000000a10         db  0x68 ; 'h'
0000000000000a11         db  0x00 ; '.'
0000000000000a12         db  0x73 ; 's'
0000000000000a13         db  0x74 ; 't'
0000000000000a14         db  0x72 ; 'r'
0000000000000a15         db  0x63 ; 'c'
0000000000000a16         db  0x70 ; 'p'
0000000000000a17         db  0x79 ; 'y'
0000000000000a18         db  0x00 ; '.'
0000000000000a19         db  0x5f ; '_'
0000000000000a1a         db  0x5f ; '_'
0000000000000a1b         db  0x70 ; 'p'
0000000000000a1c         db  0x72 ; 'r'
0000000000000a1d         db  0x69 ; 'i'
0000000000000a1e         db  0x6e ; 'n'
0000000000000a1f         db  0x74 ; 't'
0000000000000a20         db  0x66 ; 'f'
0000000000000a21         db  0x5f ; '_'
0000000000000a22         db  0x63 ; 'c'
0000000000000a23         db  0x68 ; 'h'
0000000000000a24         db  0x6b ; 'k'
0000000000000a25         db  0x00 ; '.'
0000000000000a26         db  0x63 ; 'c'
0000000000000a27         db  0x6c ; 'l'
0000000000000a28         db  0x65 ; 'e'
0000000000000a29         db  0x61 ; 'a'
0000000000000a2a         db  0x72 ; 'r'
0000000000000a2b         db  0x65 ; 'e'
0000000000000a2c         db  0x72 ; 'r'
0000000000000a2d         db  0x72 ; 'r'
0000000000000a2e         db  0x5f ; '_'
0000000000000a2f         db  0x75 ; 'u'
0000000000000a30         db  0x6e ; 'n'
0000000000000a31         db  0x6c ; 'l'
0000000000000a32         db  0x6f ; 'o'
0000000000000a33         db  0x63 ; 'c'
0000000000000a34         db  0x6b ; 'k'
0000000000000a35         db  0x65 ; 'e'
0000000000000a36         db  0x64 ; 'd'
0000000000000a37         db  0x00 ; '.'
0000000000000a38         db  0x73 ; 's'
0000000000000a39         db  0x65 ; 'e'
0000000000000a3a         db  0x74 ; 't'
0000000000000a3b         db  0x6c ; 'l'
0000000000000a3c         db  0x6f ; 'o'
0000000000000a3d         db  0x63 ; 'c'
0000000000000a3e         db  0x61 ; 'a'
0000000000000a3f         db  0x6c ; 'l'
0000000000000a40         db  0x65 ; 'e'
0000000000000a41         db  0x00 ; '.'
0000000000000a42         db  0x6d ; 'm'
0000000000000a43         db  0x62 ; 'b'
0000000000000a44         db  0x72 ; 'r'
0000000000000a45         db  0x74 ; 't'
0000000000000a46         db  0x6f ; 'o'
0000000000000a47         db  0x77 ; 'w'
0000000000000a48         db  0x63 ; 'c'
0000000000000a49         db  0x00 ; '.'
0000000000000a4a         db  0x74 ; 't'
0000000000000a4b         db  0x6f ; 'o'
0000000000000a4c         db  0x77 ; 'w'
0000000000000a4d         db  0x6c ; 'l'
0000000000000a4e         db  0x6f ; 'o'
0000000000000a4f         db  0x77 ; 'w'
0000000000000a50         db  0x65 ; 'e'
0000000000000a51         db  0x72 ; 'r'
0000000000000a52         db  0x00 ; '.'
0000000000000a53         db  0x66 ; 'f'
0000000000000a54         db  0x6f ; 'o'
0000000000000a55         db  0x70 ; 'p'
0000000000000a56         db  0x65 ; 'e'
0000000000000a57         db  0x6e ; 'n'
0000000000000a58         db  0x00 ; '.'
0000000000000a59         db  0x73 ; 's'
0000000000000a5a         db  0x74 ; 't'
0000000000000a5b         db  0x72 ; 'r'
0000000000000a5c         db  0x6e ; 'n'
0000000000000a5d         db  0x63 ; 'c'
0000000000000a5e         db  0x6d ; 'm'
0000000000000a5f         db  0x70 ; 'p'
0000000000000a60         db  0x00 ; '.'
0000000000000a61         db  0x6f ; 'o'
0000000000000a62         db  0x70 ; 'p'
0000000000000a63         db  0x74 ; 't'
0000000000000a64         db  0x69 ; 'i'
0000000000000a65         db  0x6e ; 'n'
0000000000000a66         db  0x64 ; 'd'
0000000000000a67         db  0x00 ; '.'
0000000000000a68         db  0x73 ; 's'
0000000000000a69         db  0x74 ; 't'
0000000000000a6a         db  0x72 ; 'r'
0000000000000a6b         db  0x72 ; 'r'
0000000000000a6c         db  0x63 ; 'c'
0000000000000a6d         db  0x68 ; 'h'
0000000000000a6e         db  0x72 ; 'r'
0000000000000a6f         db  0x00 ; '.'
0000000000000a70         db  0x64 ; 'd'
0000000000000a71         db  0x63 ; 'c'
0000000000000a72         db  0x67 ; 'g'
0000000000000a73         db  0x65 ; 'e'
0000000000000a74         db  0x74 ; 't'
0000000000000a75         db  0x74 ; 't'
0000000000000a76         db  0x65 ; 'e'
0000000000000a77         db  0x78 ; 'x'
0000000000000a78         db  0x74 ; 't'
0000000000000a79         db  0x00 ; '.'
0000000000000a7a         db  0x77 ; 'w'
0000000000000a7b         db  0x63 ; 'c'
0000000000000a7c         db  0x72 ; 'r'
0000000000000a7d         db  0x74 ; 't'
0000000000000a7e         db  0x6f ; 'o'
0000000000000a7f         db  0x6d ; 'm'
0000000000000a80         db  0x62 ; 'b'
0000000000000a81         db  0x00 ; '.'
0000000000000a82         db  0x65 ; 'e'
0000000000000a83         db  0x72 ; 'r'
0000000000000a84         db  0x72 ; 'r'
0000000000000a85         db  0x6f ; 'o'
0000000000000a86         db  0x72 ; 'r'
0000000000000a87         db  0x00 ; '.'
0000000000000a88         db  0x5f ; '_'
0000000000000a89         db  0x5f ; '_'
0000000000000a8a         db  0x73 ; 's'
0000000000000a8b         db  0x74 ; 't'
0000000000000a8c         db  0x61 ; 'a'
0000000000000a8d         db  0x63 ; 'c'
0000000000000a8e         db  0x6b ; 'k'
0000000000000a8f         db  0x5f ; '_'
0000000000000a90         db  0x63 ; 'c'
0000000000000a91         db  0x68 ; 'h'
0000000000000a92         db  0x6b ; 'k'
0000000000000a93         db  0x5f ; '_'
0000000000000a94         db  0x66 ; 'f'
0000000000000a95         db  0x61 ; 'a'
0000000000000a96         db  0x69 ; 'i'
0000000000000a97         db  0x6c ; 'l'
0000000000000a98         db  0x00 ; '.'
0000000000000a99         db  0x69 ; 'i'
0000000000000a9a         db  0x73 ; 's'
0000000000000a9b         db  0x77 ; 'w'
0000000000000a9c         db  0x70 ; 'p'
0000000000000a9d         db  0x72 ; 'r'
0000000000000a9e         db  0x69 ; 'i'
0000000000000a9f         db  0x6e ; 'n'
0000000000000aa0         db  0x74 ; 't'
0000000000000aa1         db  0x00 ; '.'
0000000000000aa2         db  0x72 ; 'r'
0000000000000aa3         db  0x65 ; 'e'
0000000000000aa4         db  0x61 ; 'a'
0000000000000aa5         db  0x6c ; 'l'
0000000000000aa6         db  0x6c ; 'l'
0000000000000aa7         db  0x6f ; 'o'
0000000000000aa8         db  0x63 ; 'c'
0000000000000aa9         db  0x00 ; '.'
0000000000000aaa         db  0x62 ; 'b'
0000000000000aab         db  0x74 ; 't'
0000000000000aac         db  0x6f ; 'o'
0000000000000aad         db  0x77 ; 'w'
0000000000000aae         db  0x63 ; 'c'
0000000000000aaf         db  0x00 ; '.'
0000000000000ab0         db  0x74 ; 't'
0000000000000ab1         db  0x6f ; 'o'
0000000000000ab2         db  0x77 ; 'w'
0000000000000ab3         db  0x75 ; 'u'
0000000000000ab4         db  0x70 ; 'p'
0000000000000ab5         db  0x70 ; 'p'
0000000000000ab6         db  0x65 ; 'e'
0000000000000ab7         db  0x72 ; 'r'
0000000000000ab8         db  0x00 ; '.'
0000000000000ab9         db  0x61 ; 'a'
0000000000000aba         db  0x62 ; 'b'
0000000000000abb         db  0x6f ; 'o'
0000000000000abc         db  0x72 ; 'r'
0000000000000abd         db  0x74 ; 't'
0000000000000abe         db  0x00 ; '.'
0000000000000abf         db  0x73 ; 's'
0000000000000ac0         db  0x74 ; 't'
0000000000000ac1         db  0x64 ; 'd'
0000000000000ac2         db  0x69 ; 'i'
0000000000000ac3         db  0x6e ; 'n'
0000000000000ac4         db  0x00 ; '.'
0000000000000ac5         db  0x5f ; '_'
0000000000000ac6         db  0x65 ; 'e'
0000000000000ac7         db  0x78 ; 'x'
0000000000000ac8         db  0x69 ; 'i'
0000000000000ac9         db  0x74 ; 't'
0000000000000aca         db  0x00 ; '.'
0000000000000acb         db  0x70 ; 'p'
0000000000000acc         db  0x72 ; 'r'
0000000000000acd         db  0x6f ; 'o'
0000000000000ace         db  0x67 ; 'g'
0000000000000acf         db  0x72 ; 'r'
0000000000000ad0         db  0x61 ; 'a'
0000000000000ad1         db  0x6d ; 'm'
0000000000000ad2         db  0x5f ; '_'
0000000000000ad3         db  0x69 ; 'i'
0000000000000ad4         db  0x6e ; 'n'
0000000000000ad5         db  0x76 ; 'v'
0000000000000ad6         db  0x6f ; 'o'
0000000000000ad7         db  0x63 ; 'c'
0000000000000ad8         db  0x61 ; 'a'
0000000000000ad9         db  0x74 ; 't'
0000000000000ada         db  0x69 ; 'i'
0000000000000adb         db  0x6f ; 'o'
0000000000000adc         db  0x6e ; 'n'
0000000000000add         db  0x5f ; '_'
0000000000000ade         db  0x6e ; 'n'
0000000000000adf         db  0x61 ; 'a'
0000000000000ae0         db  0x6d ; 'm'
0000000000000ae1         db  0x65 ; 'e'
0000000000000ae2         db  0x00 ; '.'
0000000000000ae3         db  0x5f ; '_'
0000000000000ae4         db  0x5f ; '_'
0000000000000ae5         db  0x61 ; 'a'
0000000000000ae6         db  0x73 ; 's'
0000000000000ae7         db  0x73 ; 's'
0000000000000ae8         db  0x65 ; 'e'
0000000000000ae9         db  0x72 ; 'r'
0000000000000aea         db  0x74 ; 't'
0000000000000aeb         db  0x5f ; '_'
0000000000000aec         db  0x66 ; 'f'
0000000000000aed         db  0x61 ; 'a'
0000000000000aee         db  0x69 ; 'i'
0000000000000aef         db  0x6c ; 'l'
0000000000000af0         db  0x00 ; '.'
0000000000000af1         db  0x69 ; 'i'
0000000000000af2         db  0x73 ; 's'
0000000000000af3         db  0x77 ; 'w'
0000000000000af4         db  0x61 ; 'a'
0000000000000af5         db  0x6c ; 'l'
0000000000000af6         db  0x6e ; 'n'
0000000000000af7         db  0x75 ; 'u'
0000000000000af8         db  0x6d ; 'm'
0000000000000af9         db  0x00 ; '.'
0000000000000afa         db  0x5f ; '_'
0000000000000afb         db  0x5f ; '_'
0000000000000afc         db  0x63 ; 'c'
0000000000000afd         db  0x74 ; 't'
0000000000000afe         db  0x79 ; 'y'
0000000000000aff         db  0x70 ; 'p'
                     aEgetmbcurmax:
0000000000000b00         db         "e_get_mb_cur_max", 0
0000000000000b11         db  0x70 ; 'p'
0000000000000b12         db  0x6f ; 'o'
0000000000000b13         db  0x73 ; 's'
0000000000000b14         db  0x69 ; 'i'
0000000000000b15         db  0x78 ; 'x'
0000000000000b16         db  0x5f ; '_'
0000000000000b17         db  0x66 ; 'f'
0000000000000b18         db  0x61 ; 'a'
0000000000000b19         db  0x64 ; 'd'
0000000000000b1a         db  0x76 ; 'v'
0000000000000b1b         db  0x69 ; 'i'
0000000000000b1c         db  0x73 ; 's'
0000000000000b1d         db  0x65 ; 'e'
0000000000000b1e         db  0x00 ; '.'
0000000000000b1f         db  0x63 ; 'c'
0000000000000b20         db  0x61 ; 'a'
0000000000000b21         db  0x6c ; 'l'
0000000000000b22         db  0x6c ; 'l'
0000000000000b23         db  0x6f ; 'o'
0000000000000b24         db  0x63 ; 'c'
0000000000000b25         db  0x00 ; '.'
0000000000000b26         db  0x73 ; 's'
0000000000000b27         db  0x74 ; 't'
0000000000000b28         db  0x72 ; 'r'
0000000000000b29         db  0x6c ; 'l'
0000000000000b2a         db  0x65 ; 'e'
0000000000000b2b         db  0x6e ; 'n'
0000000000000b2c         db  0x00 ; '.'
0000000000000b2d         db  0x69 ; 'i'
0000000000000b2e         db  0x73 ; 's'
0000000000000b2f         db  0x77 ; 'w'
0000000000000b30         db  0x63 ; 'c'
0000000000000b31         db  0x74 ; 't'
0000000000000b32         db  0x79 ; 'y'
0000000000000b33         db  0x70 ; 'p'
0000000000000b34         db  0x65 ; 'e'
0000000000000b35         db  0x00 ; '.'
0000000000000b36         db  0x6d ; 'm'
0000000000000b37         db  0x65 ; 'e'
0000000000000b38         db  0x6d ; 'm'
0000000000000b39         db  0x73 ; 's'
0000000000000b3a         db  0x65 ; 'e'
0000000000000b3b         db  0x74 ; 't'
0000000000000b3c         db  0x00 ; '.'
0000000000000b3d         db  0x5f ; '_'
0000000000000b3e         db  0x5f ; '_'
0000000000000b3f         db  0x65 ; 'e'
0000000000000b40         db  0x72 ; 'r'
                     aRnolocation:
0000000000000b41         db         "rno_location", 0
0000000000000b4e         db  0x6d ; 'm'
0000000000000b4f         db  0x65 ; 'e'
0000000000000b50         db  0x6d ; 'm'
0000000000000b51         db  0x63 ; 'c'
0000000000000b52         db  0x6d ; 'm'
0000000000000b53         db  0x70 ; 'p'
0000000000000b54         db  0x00 ; '.'
0000000000000b55         db  0x5f ; '_'
0000000000000b56         db  0x5f ; '_'
0000000000000b57         db  0x66 ; 'f'
0000000000000b58         db  0x70 ; 'p'
0000000000000b59         db  0x72 ; 'r'
0000000000000b5a         db  0x69 ; 'i'
0000000000000b5b         db  0x6e ; 'n'
0000000000000b5c         db  0x74 ; 't'
0000000000000b5d         db  0x66 ; 'f'
0000000000000b5e         db  0x5f ; '_'
0000000000000b5f         db  0x63 ; 'c'
0000000000000b60         db  0x68 ; 'h'
0000000000000b61         db  0x6b ; 'k'
0000000000000b62         db  0x00 ; '.'
0000000000000b63         db  0x73 ; 's'
0000000000000b64         db  0x74 ; 't'
0000000000000b65         db  0x64 ; 'd'
0000000000000b66         db  0x6f ; 'o'
0000000000000b67         db  0x75 ; 'u'
0000000000000b68         db  0x74 ; 't'
0000000000000b69         db  0x00 ; '.'
0000000000000b6a         db  0x6c ; 'l'
0000000000000b6b         db  0x73 ; 's'
0000000000000b6c         db  0x65 ; 'e'
0000000000000b6d         db  0x65 ; 'e'
0000000000000b6e         db  0x6b ; 'k'
0000000000000b6f         db  0x00 ; '.'
0000000000000b70         db  0x6d ; 'm'
0000000000000b71         db  0x65 ; 'e'
0000000000000b72         db  0x6d ; 'm'
0000000000000b73         db  0x63 ; 'c'
0000000000000b74         db  0x70 ; 'p'
0000000000000b75         db  0x79 ; 'y'
0000000000000b76         db  0x00 ; '.'
0000000000000b77         db  0x66 ; 'f'
0000000000000b78         db  0x63 ; 'c'
0000000000000b79         db  0x6c ; 'l'
0000000000000b7a         db  0x6f ; 'o'
0000000000000b7b         db  0x73 ; 's'
0000000000000b7c         db  0x65 ; 'e'
0000000000000b7d         db  0x00 ; '.'
0000000000000b7e         db  0x5f ; '_'
0000000000000b7f         db  0x5f ; '_'
0000000000000b80         db  0x73 ; 's'
0000000000000b81         db  0x74 ; 't'
0000000000000b82         db  0x72 ; 'r'
0000000000000b83         db  0x74 ; 't'
0000000000000b84         db  0x6f ; 'o'
0000000000000b85         db  0x6c ; 'l'
0000000000000b86         db  0x5f ; '_'
0000000000000b87         db  0x69 ; 'i'
0000000000000b88         db  0x6e ; 'n'
0000000000000b89         db  0x74 ; 't'
0000000000000b8a         db  0x65 ; 'e'
0000000000000b8b         db  0x72 ; 'r'
0000000000000b8c         db  0x6e ; 'n'
0000000000000b8d         db  0x61 ; 'a'
0000000000000b8e         db  0x6c ; 'l'
0000000000000b8f         db  0x00 ; '.'
0000000000000b90         db  0x6d ; 'm'
0000000000000b91         db  0x61 ; 'a'
0000000000000b92         db  0x6c ; 'l'
0000000000000b93         db  0x6c ; 'l'
0000000000000b94         db  0x6f ; 'o'
0000000000000b95         db  0x63 ; 'c'
0000000000000b96         db  0x00 ; '.'
0000000000000b97         db  0x6d ; 'm'
0000000000000b98         db  0x62 ; 'b'
0000000000000b99         db  0x73 ; 's'
0000000000000b9a         db  0x69 ; 'i'
0000000000000b9b         db  0x6e ; 'n'
0000000000000b9c         db  0x69 ; 'i'
0000000000000b9d         db  0x74 ; 't'
0000000000000b9e         db  0x00 ; '.'
0000000000000b9f         db  0x5f ; '_'
0000000000000ba0         db  0x5f ; '_'
0000000000000ba1         db  0x75 ; 'u'
0000000000000ba2         db  0x66 ; 'f'
0000000000000ba3         db  0x6c ; 'l'
0000000000000ba4         db  0x6f ; 'o'
0000000000000ba5         db  0x77 ; 'w'
0000000000000ba6         db  0x00 ; '.'
0000000000000ba7         db  0x6e ; 'n'
0000000000000ba8         db  0x6c ; 'l'
0000000000000ba9         db  0x5f ; '_'
0000000000000baa         db  0x6c ; 'l'
0000000000000bab         db  0x61 ; 'a'
0000000000000bac         db  0x6e ; 'n'
0000000000000bad         db  0x67 ; 'g'
0000000000000bae         db  0x69 ; 'i'
0000000000000baf         db  0x6e ; 'n'
0000000000000bb0         db  0x66 ; 'f'
0000000000000bb1         db  0x6f ; 'o'
0000000000000bb2         db  0x00 ; '.'
0000000000000bb3         db  0x5f ; '_'
0000000000000bb4         db  0x5f ; '_'
0000000000000bb5         db  0x63 ; 'c'
0000000000000bb6         db  0x74 ; 't'
0000000000000bb7         db  0x79 ; 'y'
0000000000000bb8         db  0x70 ; 'p'
0000000000000bb9         db  0x65 ; 'e'
0000000000000bba         db  0x5f ; '_'
0000000000000bbb         db  0x62 ; 'b'
0000000000000bbc         db  0x5f ; '_'
0000000000000bbd         db  0x6c ; 'l'
0000000000000bbe         db  0x6f ; 'o'
0000000000000bbf         db  0x63 ; 'c'
0000000000000bc0         db  0x00 ; '.'
0000000000000bc1         db  0x6f ; 'o'
0000000000000bc2         db  0x70 ; 'p'
0000000000000bc3         db  0x74 ; 't'
0000000000000bc4         db  0x61 ; 'a'
0000000000000bc5         db  0x72 ; 'r'
0000000000000bc6         db  0x67 ; 'g'
0000000000000bc7         db  0x00 ; '.'
0000000000000bc8         db  0x5f ; '_'
0000000000000bc9         db  0x5f ; '_'
0000000000000bca         db  0x66 ; 'f'
0000000000000bcb         db  0x72 ; 'r'
0000000000000bcc         db  0x65 ; 'e'
0000000000000bcd         db  0x61 ; 'a'
0000000000000bce         db  0x64 ; 'd'
0000000000000bcf         db  0x69 ; 'i'
0000000000000bd0         db  0x6e ; 'n'
0000000000000bd1         db  0x67 ; 'g'
0000000000000bd2         db  0x00 ; '.'
0000000000000bd3         db  0x73 ; 's'
0000000000000bd4         db  0x74 ; 't'
0000000000000bd5         db  0x64 ; 'd'
0000000000000bd6         db  0x65 ; 'e'
0000000000000bd7         db  0x72 ; 'r'
0000000000000bd8         db  0x72 ; 'r'
0000000000000bd9         db  0x00 ; '.'
0000000000000bda         db  0x67 ; 'g'
0000000000000bdb         db  0x65 ; 'e'
0000000000000bdc         db  0x74 ; 't'
0000000000000bdd         db  0x6f ; 'o'
0000000000000bde         db  0x70 ; 'p'
0000000000000bdf         db  0x74 ; 't'
0000000000000be0         db  0x5f ; '_'
0000000000000be1         db  0x6c ; 'l'
0000000000000be2         db  0x6f ; 'o'
0000000000000be3         db  0x6e ; 'n'
0000000000000be4         db  0x67 ; 'g'
0000000000000be5         db  0x00 ; '.'
0000000000000be6         db  0x66 ; 'f'
0000000000000be7         db  0x69 ; 'i'
0000000000000be8         db  0x6c ; 'l'
0000000000000be9         db  0x65 ; 'e'
0000000000000bea         db  0x6e ; 'n'
0000000000000beb         db  0x6f ; 'o'
0000000000000bec         db  0x00 ; '.'
0000000000000bed         db  0x66 ; 'f'
0000000000000bee         db  0x77 ; 'w'
0000000000000bef         db  0x72 ; 'r'
0000000000000bf0         db  0x69 ; 'i'
0000000000000bf1         db  0x74 ; 't'
0000000000000bf2         db  0x65 ; 'e'
0000000000000bf3         db  0x00 ; '.'
0000000000000bf4         db  0x5f ; '_'
0000000000000bf5         db  0x5f ; '_'
0000000000000bf6         db  0x66 ; 'f'
0000000000000bf7         db  0x70 ; 'p'
0000000000000bf8         db  0x65 ; 'e'
0000000000000bf9         db  0x6e ; 'n'
0000000000000bfa         db  0x64 ; 'd'
0000000000000bfb         db  0x69 ; 'i'
0000000000000bfc         db  0x6e ; 'n'
0000000000000bfd         db  0x67 ; 'g'
0000000000000bfe         db  0x00 ; '.'
0000000000000bff         db  0x73 ; 's'
                     aTrchr:
0000000000000c00         db         "trchr", 0
0000000000000c06         db  0x70 ; 'p'
0000000000000c07         db  0x72 ; 'r'
0000000000000c08         db  0x6f ; 'o'
0000000000000c09         db  0x67 ; 'g'
0000000000000c0a         db  0x72 ; 'r'
0000000000000c0b         db  0x61 ; 'a'
0000000000000c0c         db  0x6d ; 'm'
0000000000000c0d         db  0x5f ; '_'
0000000000000c0e         db  0x69 ; 'i'
0000000000000c0f         db  0x6e ; 'n'
0000000000000c10         db  0x76 ; 'v'
0000000000000c11         db  0x6f ; 'o'
0000000000000c12         db  0x63 ; 'c'
0000000000000c13         db  0x61 ; 'a'
0000000000000c14         db  0x74 ; 't'
0000000000000c15         db  0x69 ; 'i'
0000000000000c16         db  0x6f ; 'o'
0000000000000c17         db  0x6e ; 'n'
0000000000000c18         db  0x5f ; '_'
0000000000000c19         db  0x73 ; 's'
0000000000000c1a         db  0x68 ; 'h'
0000000000000c1b         db  0x6f ; 'o'
0000000000000c1c         db  0x72 ; 'r'
0000000000000c1d         db  0x74 ; 't'
0000000000000c1e         db  0x5f ; '_'
0000000000000c1f         db  0x6e ; 'n'
0000000000000c20         db  0x61 ; 'a'
0000000000000c21         db  0x6d ; 'm'
0000000000000c22         db  0x65 ; 'e'
0000000000000c23         db  0x00 ; '.'
0000000000000c24         db  0x5f ; '_'
0000000000000c25         db  0x5f ; '_'
0000000000000c26         db  0x63 ; 'c'
0000000000000c27         db  0x74 ; 't'
0000000000000c28         db  0x79 ; 'y'
0000000000000c29         db  0x70 ; 'p'
0000000000000c2a         db  0x65 ; 'e'
0000000000000c2b         db  0x5f ; '_'
0000000000000c2c         db  0x74 ; 't'
0000000000000c2d         db  0x6f ; 'o'
0000000000000c2e         db  0x75 ; 'u'
0000000000000c2f         db  0x70 ; 'p'
0000000000000c30         db  0x70 ; 'p'
0000000000000c31         db  0x65 ; 'e'
0000000000000c32         db  0x72 ; 'r'
0000000000000c33         db  0x5f ; '_'
0000000000000c34         db  0x6c ; 'l'
0000000000000c35         db  0x6f ; 'o'
0000000000000c36         db  0x63 ; 'c'
0000000000000c37         db  0x00 ; '.'
0000000000000c38         db  0x5f ; '_'
0000000000000c39         db  0x5f ; '_'
0000000000000c3a         db  0x63 ; 'c'
0000000000000c3b         db  0x74 ; 't'
0000000000000c3c         db  0x79 ; 'y'
0000000000000c3d         db  0x70 ; 'p'
0000000000000c3e         db  0x65 ; 'e'
0000000000000c3f         db  0x5f ; '_'
0000000000000c40         db  0x74 ; 't'
0000000000000c41         db  0x6f ; 'o'
0000000000000c42         db  0x6c ; 'l'
0000000000000c43         db  0x6f ; 'o'
0000000000000c44         db  0x77 ; 'w'
0000000000000c45         db  0x65 ; 'e'
0000000000000c46         db  0x72 ; 'r'
0000000000000c47         db  0x5f ; '_'
0000000000000c48         db  0x6c ; 'l'
0000000000000c49         db  0x6f ; 'o'
0000000000000c4a         db  0x63 ; 'c'
0000000000000c4b         db  0x00 ; '.'
0000000000000c4c         db  0x5f ; '_'
0000000000000c4d         db  0x5f ; '_'
0000000000000c4e         db  0x63 ; 'c'
0000000000000c4f         db  0x78 ; 'x'
0000000000000c50         db  0x61 ; 'a'
0000000000000c51         db  0x5f ; '_'
0000000000000c52         db  0x66 ; 'f'
0000000000000c53         db  0x69 ; 'i'
0000000000000c54         db  0x6e ; 'n'
0000000000000c55         db  0x61 ; 'a'
0000000000000c56         db  0x6c ; 'l'
0000000000000c57         db  0x69 ; 'i'
0000000000000c58         db  0x7a ; 'z'
0000000000000c59         db  0x65 ; 'e'
0000000000000c5a         db  0x00 ; '.'
0000000000000c5b         db  0x6d ; 'm'
0000000000000c5c         db  0x65 ; 'e'
0000000000000c5d         db  0x6d ; 'm'
0000000000000c5e         db  0x6d ; 'm'
0000000000000c5f         db  0x6f ; 'o'
0000000000000c60         db  0x76 ; 'v'
0000000000000c61         db  0x65 ; 'e'
0000000000000c62         db  0x00 ; '.'
0000000000000c63         db  0x62 ; 'b'
0000000000000c64         db  0x69 ; 'i'
0000000000000c65         db  0x6e ; 'n'
0000000000000c66         db  0x64 ; 'd'
0000000000000c67         db  0x74 ; 't'
0000000000000c68         db  0x65 ; 'e'
0000000000000c69         db  0x78 ; 'x'
0000000000000c6a         db  0x74 ; 't'
0000000000000c6b         db  0x64 ; 'd'
0000000000000c6c         db  0x6f ; 'o'
0000000000000c6d         db  0x6d ; 'm'
0000000000000c6e         db  0x61 ; 'a'
0000000000000c6f         db  0x69 ; 'i'
0000000000000c70         db  0x6e ; 'n'
0000000000000c71         db  0x00 ; '.'
0000000000000c72         db  0x66 ; 'f'
0000000000000c73         db  0x77 ; 'w'
0000000000000c74         db  0x72 ; 'r'
0000000000000c75         db  0x69 ; 'i'
0000000000000c76         db  0x74 ; 't'
0000000000000c77         db  0x65 ; 'e'
0000000000000c78         db  0x5f ; '_'
0000000000000c79         db  0x75 ; 'u'
0000000000000c7a         db  0x6e ; 'n'
0000000000000c7b         db  0x6c ; 'l'
0000000000000c7c         db  0x6f ; 'o'
0000000000000c7d         db  0x63 ; 'c'
0000000000000c7e         db  0x6b ; 'k'
0000000000000c7f         db  0x65 ; 'e'
0000000000000c80         db  0x64 ; 'd'
0000000000000c81         db  0x00 ; '.'
0000000000000c82         db  0x73 ; 's'
0000000000000c83         db  0x74 ; 't'
0000000000000c84         db  0x72 ; 'r'
0000000000000c85         db  0x63 ; 'c'
0000000000000c86         db  0x6d ; 'm'
0000000000000c87         db  0x70 ; 'p'
0000000000000c88         db  0x00 ; '.'
0000000000000c89         db  0x5f ; '_'
0000000000000c8a         db  0x5f ; '_'
0000000000000c8b         db  0x6c ; 'l'
0000000000000c8c         db  0x69 ; 'i'
0000000000000c8d         db  0x62 ; 'b'
0000000000000c8e         db  0x63 ; 'c'
0000000000000c8f         db  0x5f ; '_'
0000000000000c90         db  0x73 ; 's'
0000000000000c91         db  0x74 ; 't'
0000000000000c92         db  0x61 ; 'a'
0000000000000c93         db  0x72 ; 'r'
0000000000000c94         db  0x74 ; 't'
0000000000000c95         db  0x5f ; '_'
0000000000000c96         db  0x6d ; 'm'
0000000000000c97         db  0x61 ; 'a'
0000000000000c98         db  0x69 ; 'i'
0000000000000c99         db  0x6e ; 'n'
0000000000000c9a         db  0x00 ; '.'
0000000000000c9b         db  0x73 ; 's'
0000000000000c9c         db  0x74 ; 't'
0000000000000c9d         db  0x70 ; 'p'
0000000000000c9e         db  0x63 ; 'c'
0000000000000c9f         db  0x70 ; 'p'
0000000000000ca0         db  0x79 ; 'y'
0000000000000ca1         db  0x00 ; '.'
0000000000000ca2         db  0x66 ; 'f'
0000000000000ca3         db  0x73 ; 's'
0000000000000ca4         db  0x65 ; 'e'
0000000000000ca5         db  0x65 ; 'e'
0000000000000ca6         db  0x6b ; 'k'
0000000000000ca7         db  0x6f ; 'o'
0000000000000ca8         db  0x00 ; '.'
0000000000000ca9         db  0x5f ; '_'
0000000000000caa         db  0x5f ; '_'
0000000000000cab         db  0x6f ; 'o'
0000000000000cac         db  0x76 ; 'v'
0000000000000cad         db  0x65 ; 'e'
0000000000000cae         db  0x72 ; 'r'
0000000000000caf         db  0x66 ; 'f'
0000000000000cb0         db  0x6c ; 'l'
0000000000000cb1         db  0x6f ; 'o'
0000000000000cb2         db  0x77 ; 'w'
0000000000000cb3         db  0x00 ; '.'
0000000000000cb4         db  0x66 ; 'f'
0000000000000cb5         db  0x70 ; 'p'
0000000000000cb6         db  0x75 ; 'u'
0000000000000cb7         db  0x74 ; 't'
0000000000000cb8         db  0x73 ; 's'
0000000000000cb9         db  0x5f ; '_'
0000000000000cba         db  0x75 ; 'u'
0000000000000cbb         db  0x6e ; 'n'
0000000000000cbc         db  0x6c ; 'l'
0000000000000cbd         db  0x6f ; 'o'
0000000000000cbe         db  0x63 ; 'c'
0000000000000cbf         db  0x6b ; 'k'
0000000000000cc0         db  0x65 ; 'e'
0000000000000cc1         db  0x64 ; 'd'
0000000000000cc2         db  0x00 ; '.'
0000000000000cc3         db  0x66 ; 'f'
0000000000000cc4         db  0x72 ; 'r'
0000000000000cc5         db  0x65 ; 'e'
0000000000000cc6         db  0x65 ; 'e'
0000000000000cc7         db  0x00 ; '.'
0000000000000cc8         db  0x5f ; '_'
0000000000000cc9         db  0x5f ; '_'
0000000000000cca         db  0x70 ; 'p'
0000000000000ccb         db  0x72 ; 'r'
0000000000000ccc         db  0x6f ; 'o'
0000000000000ccd         db  0x67 ; 'g'
0000000000000cce         db  0x6e ; 'n'
0000000000000ccf         db  0x61 ; 'a'
0000000000000cd0         db  0x6d ; 'm'
0000000000000cd1         db  0x65 ; 'e'
0000000000000cd2         db  0x00 ; '.'
0000000000000cd3         db  0x5f ; '_'
0000000000000cd4         db  0x5f ; '_'
0000000000000cd5         db  0x70 ; 'p'
0000000000000cd6         db  0x72 ; 'r'
0000000000000cd7         db  0x6f ; 'o'
0000000000000cd8         db  0x67 ; 'g'
0000000000000cd9         db  0x6e ; 'n'
0000000000000cda         db  0x61 ; 'a'
0000000000000cdb         db  0x6d ; 'm'
0000000000000cdc         db  0x65 ; 'e'
0000000000000cdd         db  0x5f ; '_'
0000000000000cde         db  0x66 ; 'f'
0000000000000cdf         db  0x75 ; 'u'
0000000000000ce0         db  0x6c ; 'l'
0000000000000ce1         db  0x6c ; 'l'
0000000000000ce2         db  0x00 ; '.'
0000000000000ce3         db  0x5f ; '_'
0000000000000ce4         db  0x5f ; '_'
0000000000000ce5         db  0x63 ; 'c'
0000000000000ce6         db  0x78 ; 'x'
0000000000000ce7         db  0x61 ; 'a'
0000000000000ce8         db  0x5f ; '_'
0000000000000ce9         db  0x61 ; 'a'
0000000000000cea         db  0x74 ; 't'
0000000000000ceb         db  0x65 ; 'e'
0000000000000cec         db  0x78 ; 'x'
0000000000000ced         db  0x69 ; 'i'                                         ; DATA XREF=sub_116a0+2831
0000000000000cee         db  0x74 ; 't'
0000000000000cef         db  0x00 ; '.'
0000000000000cf0         db  0x47 ; 'G'
0000000000000cf1         db  0x4c ; 'L'
0000000000000cf2         db  0x49 ; 'I'
0000000000000cf3         db  0x42 ; 'B'
0000000000000cf4         db  0x43 ; 'C'
0000000000000cf5         db  0x5f ; '_'
0000000000000cf6         db  0x32 ; '2'
0000000000000cf7         db  0x2e ; '.'
0000000000000cf8         db  0x33 ; '3'
0000000000000cf9         db  0x2e ; '.'
0000000000000cfa         db  0x34 ; '4'
0000000000000cfb         db  0x00 ; '.'
0000000000000cfc         db  0x47 ; 'G'
0000000000000cfd         db  0x4c ; 'L'
0000000000000cfe         db  0x49 ; 'I'
0000000000000cff         db  0x42 ; 'B'
                     aC214:
0000000000000d00         db         "C_2.14", 0
0000000000000d07         db  0x47 ; 'G'
0000000000000d08         db  0x4c ; 'L'
0000000000000d09         db  0x49 ; 'I'
0000000000000d0a         db  0x42 ; 'B'
0000000000000d0b         db  0x43 ; 'C'
0000000000000d0c         db  0x5f ; '_'
0000000000000d0d         db  0x32 ; '2'
0000000000000d0e         db  0x2e ; '.'
0000000000000d0f         db  0x34 ; '4'
0000000000000d10         db  0x00 ; '.'
0000000000000d11         db  0x47 ; 'G'
0000000000000d12         db  0x4c ; 'L'
0000000000000d13         db  0x49 ; 'I'
0000000000000d14         db  0x42 ; 'B'
0000000000000d15         db  0x43 ; 'C'
0000000000000d16         db  0x5f ; '_'
0000000000000d17         db  0x32 ; '2'
0000000000000d18         db  0x2e ; '.'
0000000000000d19         db  0x32 ; '2'
0000000000000d1a         db  0x2e ; '.'
0000000000000d1b         db  0x35 ; '5'
0000000000000d1c         db  0x00 ; '.'
0000000000000d1d         db  0x47 ; 'G'
0000000000000d1e         db  0x4c ; 'L'
0000000000000d1f         db  0x49 ; 'I'
0000000000000d20         db  0x42 ; 'B'
0000000000000d21         db  0x43 ; 'C'
0000000000000d22         db  0x5f ; '_'
0000000000000d23         db  0x32 ; '2'
0000000000000d24         db  0x2e ; '.'
0000000000000d25         db  0x33 ; '3'
0000000000000d26         db  0x00 ; '.'
0000000000000d27         db  0x5f ; '_'
0000000000000d28         db  0x49 ; 'I'
0000000000000d29         db  0x54 ; 'T'
0000000000000d2a         db  0x4d ; 'M'
0000000000000d2b         db  0x5f ; '_'
0000000000000d2c         db  0x64 ; 'd'
0000000000000d2d         db  0x65 ; 'e'
0000000000000d2e         db  0x72 ; 'r'
0000000000000d2f         db  0x65 ; 'e'
0000000000000d30         db  0x67 ; 'g'
0000000000000d31         db  0x69 ; 'i'
0000000000000d32         db  0x73 ; 's'
0000000000000d33         db  0x74 ; 't'
0000000000000d34         db  0x65 ; 'e'
0000000000000d35         db  0x72 ; 'r'
0000000000000d36         db  0x54 ; 'T'
0000000000000d37         db  0x4d ; 'M'
0000000000000d38         db  0x43 ; 'C'
0000000000000d39         db  0x6c ; 'l'
0000000000000d3a         db  0x6f ; 'o'
0000000000000d3b         db  0x6e ; 'n'
0000000000000d3c         db  0x65 ; 'e'
0000000000000d3d         db  0x54 ; 'T'
0000000000000d3e         db  0x61 ; 'a'
0000000000000d3f         db  0x62 ; 'b'
0000000000000d40         db  0x6c ; 'l'
0000000000000d41         db  0x65 ; 'e'
0000000000000d42         db  0x00 ; '.'
0000000000000d43         db  0x5f ; '_'
0000000000000d44         db  0x5f ; '_'
0000000000000d45         db  0x67 ; 'g'
0000000000000d46         db  0x6d ; 'm'
0000000000000d47         db  0x6f ; 'o'
0000000000000d48         db  0x6e ; 'n'
0000000000000d49         db  0x5f ; '_'
0000000000000d4a         db  0x73 ; 's'
0000000000000d4b         db  0x74 ; 't'
0000000000000d4c         db  0x61 ; 'a'
0000000000000d4d         db  0x72 ; 'r'
0000000000000d4e         db  0x74 ; 't'
0000000000000d4f         db  0x5f ; '_'
0000000000000d50         db  0x5f ; '_'
0000000000000d51         db  0x00 ; '.'
0000000000000d52         db  0x5f ; '_'
0000000000000d53         db  0x49 ; 'I'
0000000000000d54         db  0x54 ; 'T'
0000000000000d55         db  0x4d ; 'M'
0000000000000d56         db  0x5f ; '_'
0000000000000d57         db  0x72 ; 'r'
0000000000000d58         db  0x65 ; 'e'
0000000000000d59         db  0x67 ; 'g'
0000000000000d5a         db  0x69 ; 'i'
0000000000000d5b         db  0x73 ; 's'
0000000000000d5c         db  0x74 ; 't'
0000000000000d5d         db  0x65 ; 'e'
0000000000000d5e         db  0x72 ; 'r'
0000000000000d5f         db  0x54 ; 'T'
0000000000000d60         db  0x4d ; 'M'
0000000000000d61         db  0x43 ; 'C'
0000000000000d62         db  0x6c ; 'l'
0000000000000d63         db  0x6f ; 'o'
0000000000000d64         db  0x6e ; 'n'
0000000000000d65         db  0x65 ; 'e'
0000000000000d66         db  0x54 ; 'T'
0000000000000d67         db  0x61 ; 'a'
0000000000000d68         db  0x62 ; 'b'
0000000000000d69         db  0x6c ; 'l'
0000000000000d6a         db  0x65 ; 'e'
0000000000000d6b         db  0x00 ; '.'


        ; Section .gnu.version
        ; Range: [0xd6c; 0xe04[ (152 bytes)
        ; File offset : [3436; 3588[ (152 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000000d6c         db  0x00 ; '.'
0000000000000d6d         db  0x00 ; '.'
0000000000000d6e         db  0x02 ; '.'
0000000000000d6f         db  0x00 ; '.'
0000000000000d70         db  0x03 ; '.'
0000000000000d71         db  0x00 ; '.'
0000000000000d72         db  0x03 ; '.'
0000000000000d73         db  0x00 ; '.'
0000000000000d74         db  0x03 ; '.'
0000000000000d75         db  0x00 ; '.'
0000000000000d76         db  0x03 ; '.'
0000000000000d77         db  0x00 ; '.'
0000000000000d78         db  0x03 ; '.'
0000000000000d79         db  0x00 ; '.'
0000000000000d7a         db  0x00 ; '.'
0000000000000d7b         db  0x00 ; '.'
0000000000000d7c         db  0x03 ; '.'
0000000000000d7d         db  0x00 ; '.'
0000000000000d7e         db  0x03 ; '.'
0000000000000d7f         db  0x00 ; '.'
0000000000000d80         db  0x03 ; '.'
0000000000000d81         db  0x00 ; '.'
0000000000000d82         db  0x03 ; '.'
0000000000000d83         db  0x00 ; '.'
0000000000000d84         db  0x03 ; '.'
0000000000000d85         db  0x00 ; '.'
0000000000000d86         db  0x03 ; '.'
0000000000000d87         db  0x00 ; '.'
0000000000000d88         db  0x03 ; '.'
0000000000000d89         db  0x00 ; '.'
0000000000000d8a         db  0x03 ; '.'
0000000000000d8b         db  0x00 ; '.'
0000000000000d8c         db  0x03 ; '.'
0000000000000d8d         db  0x00 ; '.'
0000000000000d8e         db  0x03 ; '.'
0000000000000d8f         db  0x00 ; '.'
0000000000000d90         db  0x03 ; '.'
0000000000000d91         db  0x00 ; '.'
0000000000000d92         db  0x03 ; '.'
0000000000000d93         db  0x00 ; '.'
0000000000000d94         db  0x03 ; '.'
0000000000000d95         db  0x00 ; '.'
0000000000000d96         db  0x04 ; '.'
0000000000000d97         db  0x00 ; '.'
0000000000000d98         db  0x03 ; '.'
0000000000000d99         db  0x00 ; '.'
0000000000000d9a         db  0x03 ; '.'
0000000000000d9b         db  0x00 ; '.'
0000000000000d9c         db  0x03 ; '.'
0000000000000d9d         db  0x00 ; '.'
0000000000000d9e         db  0x03 ; '.'
0000000000000d9f         db  0x00 ; '.'
0000000000000da0         db  0x03 ; '.'
0000000000000da1         db  0x00 ; '.'
0000000000000da2         db  0x03 ; '.'
0000000000000da3         db  0x00 ; '.'
0000000000000da4         db  0x03 ; '.'
0000000000000da5         db  0x00 ; '.'
0000000000000da6         db  0x03 ; '.'
0000000000000da7         db  0x00 ; '.'
0000000000000da8         db  0x03 ; '.'
0000000000000da9         db  0x00 ; '.'
0000000000000daa         db  0x03 ; '.'
0000000000000dab         db  0x00 ; '.'
0000000000000dac         db  0x03 ; '.'
0000000000000dad         db  0x00 ; '.'
0000000000000dae         db  0x03 ; '.'
0000000000000daf         db  0x00 ; '.'
0000000000000db0         db  0x03 ; '.'
0000000000000db1         db  0x00 ; '.'
0000000000000db2         db  0x03 ; '.'
0000000000000db3         db  0x00 ; '.'
0000000000000db4         db  0x03 ; '.'
0000000000000db5         db  0x00 ; '.'
0000000000000db6         db  0x00 ; '.'
0000000000000db7         db  0x00 ; '.'
0000000000000db8         db  0x05 ; '.'
0000000000000db9         db  0x00 ; '.'
0000000000000dba         db  0x03 ; '.'
0000000000000dbb         db  0x00 ; '.'
0000000000000dbc         db  0x03 ; '.'
0000000000000dbd         db  0x00 ; '.'
0000000000000dbe         db  0x03 ; '.'
0000000000000dbf         db  0x00 ; '.'
0000000000000dc0         db  0x03 ; '.'
0000000000000dc1         db  0x00 ; '.'
0000000000000dc2         db  0x03 ; '.'
0000000000000dc3         db  0x00 ; '.'
0000000000000dc4         db  0x03 ; '.'
0000000000000dc5         db  0x00 ; '.'
0000000000000dc6         db  0x03 ; '.'
0000000000000dc7         db  0x00 ; '.'
0000000000000dc8         db  0x03 ; '.'
0000000000000dc9         db  0x00 ; '.'
0000000000000dca         db  0x03 ; '.'
0000000000000dcb         db  0x00 ; '.'
0000000000000dcc         db  0x03 ; '.'
0000000000000dcd         db  0x00 ; '.'
0000000000000dce         db  0x06 ; '.'
0000000000000dcf         db  0x00 ; '.'
0000000000000dd0         db  0x03 ; '.'
0000000000000dd1         db  0x00 ; '.'
0000000000000dd2         db  0x03 ; '.'
0000000000000dd3         db  0x00 ; '.'
0000000000000dd4         db  0x03 ; '.'
0000000000000dd5         db  0x00 ; '.'
0000000000000dd6         db  0x03 ; '.'
0000000000000dd7         db  0x00 ; '.'
0000000000000dd8         db  0x03 ; '.'
0000000000000dd9         db  0x00 ; '.'
0000000000000dda         db  0x03 ; '.'
0000000000000ddb         db  0x00 ; '.'
0000000000000ddc         db  0x03 ; '.'
0000000000000ddd         db  0x00 ; '.'
0000000000000dde         db  0x03 ; '.'
0000000000000ddf         db  0x00 ; '.'
0000000000000de0         db  0x03 ; '.'
0000000000000de1         db  0x00 ; '.'
0000000000000de2         db  0x03 ; '.'
0000000000000de3         db  0x00 ; '.'
0000000000000de4         db  0x06 ; '.'
0000000000000de5         db  0x00 ; '.'
0000000000000de6         db  0x00 ; '.'
0000000000000de7         db  0x00 ; '.'
0000000000000de8         db  0x03 ; '.'
0000000000000de9         db  0x00 ; '.'
0000000000000dea         db  0x03 ; '.'
0000000000000deb         db  0x00 ; '.'
0000000000000dec         db  0x03 ; '.'
0000000000000ded         db  0x00 ; '.'
0000000000000dee         db  0x02 ; '.'
0000000000000def         db  0x00 ; '.'
0000000000000df0         db  0x02 ; '.'
0000000000000df1         db  0x00 ; '.'
0000000000000df2         db  0x03 ; '.'
0000000000000df3         db  0x00 ; '.'
0000000000000df4         db  0x03 ; '.'
0000000000000df5         db  0x00 ; '.'
0000000000000df6         db  0x03 ; '.'
0000000000000df7         db  0x00 ; '.'
0000000000000df8         db  0x03 ; '.'
0000000000000df9         db  0x00 ; '.'
0000000000000dfa         db  0x03 ; '.'
0000000000000dfb         db  0x00 ; '.'
0000000000000dfc         db  0x03 ; '.'
0000000000000dfd         db  0x00 ; '.'
0000000000000dfe         db  0x03 ; '.'
0000000000000dff         db  0x00 ; '.'
0000000000000e00         db  0x03 ; '.'
0000000000000e01         db  0x00 ; '.'
0000000000000e02         db  0x03 ; '.'
0000000000000e03         db  0x00 ; '.'
0000000000000e04         db  0x00 ; '.'
0000000000000e05         db  0x00 ; '.'
0000000000000e06         db  0x00 ; '.'
0000000000000e07         db  0x00 ; '.'


        ; Section .gnu.version_r
        ; Range: [0xe08; 0xe68[ (96 bytes)
        ; File offset : [3592; 3688[ (96 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000000e08         db  0x01 ; '.'
0000000000000e09         db  0x00 ; '.'
0000000000000e0a         db  0x05 ; '.'
0000000000000e0b         db  0x00 ; '.'
0000000000000e0c         db  0x01 ; '.'
0000000000000e0d         db  0x00 ; '.'
0000000000000e0e         db  0x00 ; '.'
0000000000000e0f         db  0x00 ; '.'
0000000000000e10         db  0x10 ; '.'
0000000000000e11         db  0x00 ; '.'
0000000000000e12         db  0x00 ; '.'
0000000000000e13         db  0x00 ; '.'
0000000000000e14         db  0x00 ; '.'
0000000000000e15         db  0x00 ; '.'
0000000000000e16         db  0x00 ; '.'
0000000000000e17         db  0x00 ; '.'
0000000000000e18         db  0x74 ; 't'
0000000000000e19         db  0x19 ; '.'
0000000000000e1a         db  0x69 ; 'i'
0000000000000e1b         db  0x09 ; '.'
0000000000000e1c         db  0x00 ; '.'
0000000000000e1d         db  0x00 ; '.'
0000000000000e1e         db  0x06 ; '.'
0000000000000e1f         db  0x00 ; '.'
0000000000000e20         db  0xf0 ; '.'
0000000000000e21         db  0x02 ; '.'
0000000000000e22         db  0x00 ; '.'
0000000000000e23         db  0x00 ; '.'
0000000000000e24         db  0x10 ; '.'
0000000000000e25         db  0x00 ; '.'
0000000000000e26         db  0x00 ; '.'
0000000000000e27         db  0x00 ; '.'
0000000000000e28         db  0x94 ; '.'
0000000000000e29         db  0x91 ; '.'
0000000000000e2a         db  0x96 ; '.'
0000000000000e2b         db  0x06 ; '.'
0000000000000e2c         db  0x00 ; '.'
0000000000000e2d         db  0x00 ; '.'
0000000000000e2e         db  0x05 ; '.'
0000000000000e2f         db  0x00 ; '.'
0000000000000e30         db  0xfc ; '.'
0000000000000e31         db  0x02 ; '.'
0000000000000e32         db  0x00 ; '.'
0000000000000e33         db  0x00 ; '.'
0000000000000e34         db  0x10 ; '.'
0000000000000e35         db  0x00 ; '.'
0000000000000e36         db  0x00 ; '.'
0000000000000e37         db  0x00 ; '.'
0000000000000e38         db  0x14 ; '.'
0000000000000e39         db  0x69 ; 'i'
0000000000000e3a         db  0x69 ; 'i'
0000000000000e3b         db  0x0d ; '.'
0000000000000e3c         db  0x00 ; '.'
0000000000000e3d         db  0x00 ; '.'
0000000000000e3e         db  0x04 ; '.'
0000000000000e3f         db  0x00 ; '.'
0000000000000e40         db  0x07 ; '.'
0000000000000e41         db  0x03 ; '.'
0000000000000e42         db  0x00 ; '.'
0000000000000e43         db  0x00 ; '.'
0000000000000e44         db  0x10 ; '.'
0000000000000e45         db  0x00 ; '.'
0000000000000e46         db  0x00 ; '.'
0000000000000e47         db  0x00 ; '.'
0000000000000e48         db  0x75 ; 'u'
0000000000000e49         db  0x1a ; '.'
0000000000000e4a         db  0x69 ; 'i'
0000000000000e4b         db  0x09 ; '.'
0000000000000e4c         db  0x00 ; '.'
0000000000000e4d         db  0x00 ; '.'
0000000000000e4e         db  0x03 ; '.'
0000000000000e4f         db  0x00 ; '.'
0000000000000e50         db  0x11 ; '.'
0000000000000e51         db  0x03 ; '.'
0000000000000e52         db  0x00 ; '.'
0000000000000e53         db  0x00 ; '.'
0000000000000e54         db  0x10 ; '.'
0000000000000e55         db  0x00 ; '.'
0000000000000e56         db  0x00 ; '.'
0000000000000e57         db  0x00 ; '.'
0000000000000e58         db  0x13 ; '.'
0000000000000e59         db  0x69 ; 'i'
0000000000000e5a         db  0x69 ; 'i'
0000000000000e5b         db  0x0d ; '.'
0000000000000e5c         db  0x00 ; '.'
0000000000000e5d         db  0x00 ; '.'
0000000000000e5e         db  0x02 ; '.'
0000000000000e5f         db  0x00 ; '.'
0000000000000e60         db  0x1d ; '.'
0000000000000e61         db  0x03 ; '.'
0000000000000e62         db  0x00 ; '.'
0000000000000e63         db  0x00 ; '.'
0000000000000e64         db  0x00 ; '.'
0000000000000e65         db  0x00 ; '.'
0000000000000e66         db  0x00 ; '.'
0000000000000e67         db  0x00 ; '.'


        ; Section .rela.dyn
        ; Range: [0xe68; 0x12d0[ (1128 bytes)
        ; File offset : [3688; 4816[ (1128 bytes)
        ; Flags: 0x2
        ;   SHT_RELA
        ;   SHF_ALLOC

0000000000000e68         db  0xb0 ; '.'
0000000000000e69         db  0x89 ; '.'
0000000000000e6a         db  0x21 ; '!'
0000000000000e6b         db  0x00 ; '.'
0000000000000e6c         db  0x00 ; '.'
0000000000000e6d         db  0x00 ; '.'
0000000000000e6e         db  0x00 ; '.'
0000000000000e6f         db  0x00 ; '.'
0000000000000e70         db  0x08 ; '.'
0000000000000e71         db  0x00 ; '.'
0000000000000e72         db  0x00 ; '.'
0000000000000e73         db  0x00 ; '.'
0000000000000e74         db  0x00 ; '.'
0000000000000e75         db  0x00 ; '.'
0000000000000e76         db  0x00 ; '.'
0000000000000e77         db  0x00 ; '.'
0000000000000e78         db  0x10 ; '.'
0000000000000e79         db  0x24 ; '$'
0000000000000e7a         db  0x00 ; '.'
0000000000000e7b         db  0x00 ; '.'
0000000000000e7c         db  0x00 ; '.'
0000000000000e7d         db  0x00 ; '.'
0000000000000e7e         db  0x00 ; '.'
0000000000000e7f         db  0x00 ; '.'
0000000000000e80         db  0xb8 ; '.'
0000000000000e81         db  0x89 ; '.'
0000000000000e82         db  0x21 ; '!'
0000000000000e83         db  0x00 ; '.'
0000000000000e84         db  0x00 ; '.'
0000000000000e85         db  0x00 ; '.'
0000000000000e86         db  0x00 ; '.'
0000000000000e87         db  0x00 ; '.'
0000000000000e88         db  0x08 ; '.'
0000000000000e89         db  0x00 ; '.'
0000000000000e8a         db  0x00 ; '.'
0000000000000e8b         db  0x00 ; '.'
0000000000000e8c         db  0x00 ; '.'
0000000000000e8d         db  0x00 ; '.'
0000000000000e8e         db  0x00 ; '.'
0000000000000e8f         db  0x00 ; '.'
0000000000000e90         db  0xd0 ; '.'
0000000000000e91         db  0x23 ; '#'
0000000000000e92         db  0x00 ; '.'
0000000000000e93         db  0x00 ; '.'
0000000000000e94         db  0x00 ; '.'
0000000000000e95         db  0x00 ; '.'
0000000000000e96         db  0x00 ; '.'
0000000000000e97         db  0x00 ; '.'
0000000000000e98         db  0xc0 ; '.'
0000000000000e99         db  0x89 ; '.'
0000000000000e9a         db  0x21 ; '!'
0000000000000e9b         db  0x00 ; '.'
0000000000000e9c         db  0x00 ; '.'
0000000000000e9d         db  0x00 ; '.'
0000000000000e9e         db  0x00 ; '.'
0000000000000e9f         db  0x00 ; '.'
0000000000000ea0         db  0x08 ; '.'
0000000000000ea1         db  0x00 ; '.'
0000000000000ea2         db  0x00 ; '.'
0000000000000ea3         db  0x00 ; '.'
0000000000000ea4         db  0x00 ; '.'
0000000000000ea5         db  0x00 ; '.'
0000000000000ea6         db  0x00 ; '.'
0000000000000ea7         db  0x00 ; '.'
0000000000000ea8         db  0xef ; '.'
0000000000000ea9         db  0x44 ; 'D'
0000000000000eaa         db  0x01 ; '.'
0000000000000eab         db  0x00 ; '.'
0000000000000eac         db  0x00 ; '.'
0000000000000ead         db  0x00 ; '.'
0000000000000eae         db  0x00 ; '.'
0000000000000eaf         db  0x00 ; '.'
0000000000000eb0         db  0xe0 ; '.'
0000000000000eb1         db  0x89 ; '.'
0000000000000eb2         db  0x21 ; '!'
0000000000000eb3         db  0x00 ; '.'
0000000000000eb4         db  0x00 ; '.'
0000000000000eb5         db  0x00 ; '.'
0000000000000eb6         db  0x00 ; '.'
0000000000000eb7         db  0x00 ; '.'
0000000000000eb8         db  0x08 ; '.'
0000000000000eb9         db  0x00 ; '.'
0000000000000eba         db  0x00 ; '.'
0000000000000ebb         db  0x00 ; '.'
0000000000000ebc         db  0x00 ; '.'
0000000000000ebd         db  0x00 ; '.'
0000000000000ebe         db  0x00 ; '.'
0000000000000ebf         db  0x00 ; '.'
0000000000000ec0         db  0x00 ; '.'
0000000000000ec1         db  0x45 ; 'E'
0000000000000ec2         db  0x01 ; '.'
0000000000000ec3         db  0x00 ; '.'
0000000000000ec4         db  0x00 ; '.'
0000000000000ec5         db  0x00 ; '.'
0000000000000ec6         db  0x00 ; '.'
0000000000000ec7         db  0x00 ; '.'
0000000000000ec8         db  0x00 ; '.'
0000000000000ec9         db  0x8a ; '.'
0000000000000eca         db  0x21 ; '!'
0000000000000ecb         db  0x00 ; '.'
0000000000000ecc         db  0x00 ; '.'
0000000000000ecd         db  0x00 ; '.'
0000000000000ece         db  0x00 ; '.'
0000000000000ecf         db  0x00 ; '.'
0000000000000ed0         db  0x08 ; '.'
0000000000000ed1         db  0x00 ; '.'
0000000000000ed2         db  0x00 ; '.'
0000000000000ed3         db  0x00 ; '.'
0000000000000ed4         db  0x00 ; '.'
0000000000000ed5         db  0x00 ; '.'
0000000000000ed6         db  0x00 ; '.'
0000000000000ed7         db  0x00 ; '.'
0000000000000ed8         db  0x0f ; '.'
0000000000000ed9         db  0x45 ; 'E'
0000000000000eda         db  0x01 ; '.'
0000000000000edb         db  0x00 ; '.'
0000000000000edc         db  0x00 ; '.'
0000000000000edd         db  0x00 ; '.'
0000000000000ede         db  0x00 ; '.'
0000000000000edf         db  0x00 ; '.'
0000000000000ee0         db  0x20 ; ' '
0000000000000ee1         db  0x8a ; '.'
0000000000000ee2         db  0x21 ; '!'
0000000000000ee3         db  0x00 ; '.'
0000000000000ee4         db  0x00 ; '.'
0000000000000ee5         db  0x00 ; '.'
0000000000000ee6         db  0x00 ; '.'
0000000000000ee7         db  0x00 ; '.'
0000000000000ee8         db  0x08 ; '.'
0000000000000ee9         db  0x00 ; '.'
0000000000000eea         db  0x00 ; '.'
0000000000000eeb         db  0x00 ; '.'
0000000000000eec         db  0x00 ; '.'
0000000000000eed         db  0x00 ; '.'
0000000000000eee         db  0x00 ; '.'
0000000000000eef         db  0x00 ; '.'
0000000000000ef0         db  0x20 ; ' '
0000000000000ef1         db  0x45 ; 'E'
0000000000000ef2         db  0x01 ; '.'
0000000000000ef3         db  0x00 ; '.'
0000000000000ef4         db  0x00 ; '.'
0000000000000ef5         db  0x00 ; '.'
0000000000000ef6         db  0x00 ; '.'
0000000000000ef7         db  0x00 ; '.'
0000000000000ef8         db  0x40 ; '@'
0000000000000ef9         db  0x8a ; '.'
0000000000000efa         db  0x21 ; '!'
0000000000000efb         db  0x00 ; '.'
0000000000000efc         db  0x00 ; '.'
0000000000000efd         db  0x00 ; '.'
0000000000000efe         db  0x00 ; '.'
0000000000000eff         db  0x00 ; '.'
0000000000000f00         db  0x08 ; '.'
0000000000000f01         db  0x00 ; '.'
0000000000000f02         db  0x00 ; '.'
0000000000000f03         db  0x00 ; '.'
0000000000000f04         db  0x00 ; '.'
0000000000000f05         db  0x00 ; '.'
0000000000000f06         db  0x00 ; '.'
0000000000000f07         db  0x00 ; '.'
0000000000000f08         db  0x35 ; '5'
0000000000000f09         db  0x45 ; 'E'
0000000000000f0a         db  0x01 ; '.'
0000000000000f0b         db  0x00 ; '.'
0000000000000f0c         db  0x00 ; '.'
0000000000000f0d         db  0x00 ; '.'
0000000000000f0e         db  0x00 ; '.'
0000000000000f0f         db  0x00 ; '.'
0000000000000f10         db  0x60 ; '`'
0000000000000f11         db  0x8a ; '.'
0000000000000f12         db  0x21 ; '!'
0000000000000f13         db  0x00 ; '.'
0000000000000f14         db  0x00 ; '.'
0000000000000f15         db  0x00 ; '.'
0000000000000f16         db  0x00 ; '.'
0000000000000f17         db  0x00 ; '.'
0000000000000f18         db  0x08 ; '.'
0000000000000f19         db  0x00 ; '.'
0000000000000f1a         db  0x00 ; '.'
0000000000000f1b         db  0x00 ; '.'
0000000000000f1c         db  0x00 ; '.'
0000000000000f1d         db  0x00 ; '.'
0000000000000f1e         db  0x00 ; '.'
0000000000000f1f         db  0x00 ; '.'
0000000000000f20         db  0x44 ; 'D'
0000000000000f21         db  0x45 ; 'E'
0000000000000f22         db  0x01 ; '.'
0000000000000f23         db  0x00 ; '.'
0000000000000f24         db  0x00 ; '.'
0000000000000f25         db  0x00 ; '.'
0000000000000f26         db  0x00 ; '.'
0000000000000f27         db  0x00 ; '.'
0000000000000f28         db  0x80 ; '.'
0000000000000f29         db  0x8a ; '.'
0000000000000f2a         db  0x21 ; '!'
0000000000000f2b         db  0x00 ; '.'
0000000000000f2c         db  0x00 ; '.'
0000000000000f2d         db  0x00 ; '.'
0000000000000f2e         db  0x00 ; '.'
0000000000000f2f         db  0x00 ; '.'
0000000000000f30         db  0x08 ; '.'
0000000000000f31         db  0x00 ; '.'
0000000000000f32         db  0x00 ; '.'
0000000000000f33         db  0x00 ; '.'
0000000000000f34         db  0x00 ; '.'
0000000000000f35         db  0x00 ; '.'
0000000000000f36         db  0x00 ; '.'
0000000000000f37         db  0x00 ; '.'
0000000000000f38         db  0x50 ; 'P'
0000000000000f39         db  0x45 ; 'E'
0000000000000f3a         db  0x01 ; '.'
0000000000000f3b         db  0x00 ; '.'
0000000000000f3c         db  0x00 ; '.'
0000000000000f3d         db  0x00 ; '.'
0000000000000f3e         db  0x00 ; '.'
0000000000000f3f         db  0x00 ; '.'
0000000000000f40         db  0xa0 ; '.'
0000000000000f41         db  0x8a ; '.'
0000000000000f42         db  0x21 ; '!'
0000000000000f43         db  0x00 ; '.'
0000000000000f44         db  0x00 ; '.'
0000000000000f45         db  0x00 ; '.'
0000000000000f46         db  0x00 ; '.'
0000000000000f47         db  0x00 ; '.'
0000000000000f48         db  0x08 ; '.'
0000000000000f49         db  0x00 ; '.'
0000000000000f4a         db  0x00 ; '.'
0000000000000f4b         db  0x00 ; '.'
0000000000000f4c         db  0x00 ; '.'
0000000000000f4d         db  0x00 ; '.'
0000000000000f4e         db  0x00 ; '.'
0000000000000f4f         db  0x00 ; '.'
0000000000000f50         db  0x61 ; 'a'
0000000000000f51         db  0x45 ; 'E'
0000000000000f52         db  0x01 ; '.'
0000000000000f53         db  0x00 ; '.'
0000000000000f54         db  0x00 ; '.'
0000000000000f55         db  0x00 ; '.'
0000000000000f56         db  0x00 ; '.'
0000000000000f57         db  0x00 ; '.'
0000000000000f58         db  0xc0 ; '.'
0000000000000f59         db  0x8a ; '.'
0000000000000f5a         db  0x21 ; '!'
0000000000000f5b         db  0x00 ; '.'
0000000000000f5c         db  0x00 ; '.'
0000000000000f5d         db  0x00 ; '.'
0000000000000f5e         db  0x00 ; '.'
0000000000000f5f         db  0x00 ; '.'
0000000000000f60         db  0x08 ; '.'
0000000000000f61         db  0x00 ; '.'
0000000000000f62         db  0x00 ; '.'
0000000000000f63         db  0x00 ; '.'
0000000000000f64         db  0x00 ; '.'
0000000000000f65         db  0x00 ; '.'
0000000000000f66         db  0x00 ; '.'
0000000000000f67         db  0x00 ; '.'
0000000000000f68         db  0x72 ; 'r'
0000000000000f69         db  0x45 ; 'E'
0000000000000f6a         db  0x01 ; '.'
0000000000000f6b         db  0x00 ; '.'
0000000000000f6c         db  0x00 ; '.'
0000000000000f6d         db  0x00 ; '.'
0000000000000f6e         db  0x00 ; '.'
0000000000000f6f         db  0x00 ; '.'
0000000000000f70         db  0xe0 ; '.'
0000000000000f71         db  0x8a ; '.'
0000000000000f72         db  0x21 ; '!'
0000000000000f73         db  0x00 ; '.'
0000000000000f74         db  0x00 ; '.'
0000000000000f75         db  0x00 ; '.'
0000000000000f76         db  0x00 ; '.'
0000000000000f77         db  0x00 ; '.'
0000000000000f78         db  0x08 ; '.'
0000000000000f79         db  0x00 ; '.'
0000000000000f7a         db  0x00 ; '.'
0000000000000f7b         db  0x00 ; '.'
0000000000000f7c         db  0x00 ; '.'
0000000000000f7d         db  0x00 ; '.'
0000000000000f7e         db  0x00 ; '.'
0000000000000f7f         db  0x00 ; '.'
0000000000000f80         db  0x7f ; '.'
0000000000000f81         db  0x45 ; 'E'
0000000000000f82         db  0x01 ; '.'
0000000000000f83         db  0x00 ; '.'
0000000000000f84         db  0x00 ; '.'
0000000000000f85         db  0x00 ; '.'
0000000000000f86         db  0x00 ; '.'
0000000000000f87         db  0x00 ; '.'
0000000000000f88         db  0x00 ; '.'
0000000000000f89         db  0x8b ; '.'
0000000000000f8a         db  0x21 ; '!'
0000000000000f8b         db  0x00 ; '.'
0000000000000f8c         db  0x00 ; '.'
0000000000000f8d         db  0x00 ; '.'
0000000000000f8e         db  0x00 ; '.'
0000000000000f8f         db  0x00 ; '.'
0000000000000f90         db  0x08 ; '.'
0000000000000f91         db  0x00 ; '.'
0000000000000f92         db  0x00 ; '.'
0000000000000f93         db  0x00 ; '.'
0000000000000f94         db  0x00 ; '.'
0000000000000f95         db  0x00 ; '.'
0000000000000f96         db  0x00 ; '.'
0000000000000f97         db  0x00 ; '.'
0000000000000f98         db  0x8d ; '.'
0000000000000f99         db  0x45 ; 'E'
0000000000000f9a         db  0x01 ; '.'
0000000000000f9b         db  0x00 ; '.'
0000000000000f9c         db  0x00 ; '.'
0000000000000f9d         db  0x00 ; '.'
0000000000000f9e         db  0x00 ; '.'
0000000000000f9f         db  0x00 ; '.'
0000000000000fa0         db  0x20 ; ' '
0000000000000fa1         db  0x8b ; '.'
0000000000000fa2         db  0x21 ; '!'
0000000000000fa3         db  0x00 ; '.'
0000000000000fa4         db  0x00 ; '.'
0000000000000fa5         db  0x00 ; '.'
0000000000000fa6         db  0x00 ; '.'
0000000000000fa7         db  0x00 ; '.'
0000000000000fa8         db  0x08 ; '.'
0000000000000fa9         db  0x00 ; '.'
0000000000000faa         db  0x00 ; '.'
0000000000000fab         db  0x00 ; '.'
0000000000000fac         db  0x00 ; '.'
0000000000000fad         db  0x00 ; '.'
0000000000000fae         db  0x00 ; '.'
0000000000000faf         db  0x00 ; '.'
0000000000000fb0         db  0x9f ; '.'
0000000000000fb1         db  0x45 ; 'E'
0000000000000fb2         db  0x01 ; '.'
0000000000000fb3         db  0x00 ; '.'
0000000000000fb4         db  0x00 ; '.'
0000000000000fb5         db  0x00 ; '.'
0000000000000fb6         db  0x00 ; '.'
0000000000000fb7         db  0x00 ; '.'
0000000000000fb8         db  0x40 ; '@'
0000000000000fb9         db  0x8b ; '.'
0000000000000fba         db  0x21 ; '!'
0000000000000fbb         db  0x00 ; '.'
0000000000000fbc         db  0x00 ; '.'
0000000000000fbd         db  0x00 ; '.'
0000000000000fbe         db  0x00 ; '.'
0000000000000fbf         db  0x00 ; '.'                                         ; DATA XREF=set_regs+166
0000000000000fc0         db  0x08 ; '.'
0000000000000fc1         db  0x00 ; '.'
0000000000000fc2         db  0x00 ; '.'
0000000000000fc3         db  0x00 ; '.'
0000000000000fc4         db  0x00 ; '.'
0000000000000fc5         db  0x00 ; '.'
0000000000000fc6         db  0x00 ; '.'
0000000000000fc7         db  0x00 ; '.'
0000000000000fc8         db  0xa4 ; '.'
0000000000000fc9         db  0x45 ; 'E'
0000000000000fca         db  0x01 ; '.'
0000000000000fcb         db  0x00 ; '.'
0000000000000fcc         db  0x00 ; '.'
0000000000000fcd         db  0x00 ; '.'
0000000000000fce         db  0x00 ; '.'
0000000000000fcf         db  0x00 ; '.'
0000000000000fd0         db  0x80 ; '.'
0000000000000fd1         db  0x8b ; '.'
0000000000000fd2         db  0x21 ; '!'
0000000000000fd3         db  0x00 ; '.'
0000000000000fd4         db  0x00 ; '.'
0000000000000fd5         db  0x00 ; '.'
0000000000000fd6         db  0x00 ; '.'
0000000000000fd7         db  0x00 ; '.'
0000000000000fd8         db  0x08 ; '.'
0000000000000fd9         db  0x00 ; '.'
0000000000000fda         db  0x00 ; '.'
0000000000000fdb         db  0x00 ; '.'
0000000000000fdc         db  0x00 ; '.'
0000000000000fdd         db  0x00 ; '.'
0000000000000fde         db  0x00 ; '.'
0000000000000fdf         db  0x00 ; '.'
0000000000000fe0         db  0xc9 ; '.'
0000000000000fe1         db  0x4e ; 'N'
0000000000000fe2         db  0x01 ; '.'
0000000000000fe3         db  0x00 ; '.'
0000000000000fe4         db  0x00 ; '.'
0000000000000fe5         db  0x00 ; '.'
0000000000000fe6         db  0x00 ; '.'
0000000000000fe7         db  0x00 ; '.'
0000000000000fe8         db  0x88 ; '.'
0000000000000fe9         db  0x8b ; '.'
0000000000000fea         db  0x21 ; '!'
0000000000000feb         db  0x00 ; '.'
0000000000000fec         db  0x00 ; '.'
0000000000000fed         db  0x00 ; '.'
0000000000000fee         db  0x00 ; '.'
0000000000000fef         db  0x00 ; '.'
0000000000000ff0         db  0x08 ; '.'
0000000000000ff1         db  0x00 ; '.'
0000000000000ff2         db  0x00 ; '.'
0000000000000ff3         db  0x00 ; '.'
0000000000000ff4         db  0x00 ; '.'
0000000000000ff5         db  0x00 ; '.'
0000000000000ff6         db  0x00 ; '.'
0000000000000ff7         db  0x00 ; '.'
0000000000000ff8         db  0xd1 ; '.'
0000000000000ff9         db  0x4e ; 'N'
0000000000000ffa         db  0x01 ; '.'
0000000000000ffb         db  0x00 ; '.'
0000000000000ffc         db  0x00 ; '.'
0000000000000ffd         db  0x00 ; '.'
0000000000000ffe         db  0x00 ; '.'
0000000000000fff         db  0x00 ; '.'
0000000000001000         db  0x90 ; '.'
0000000000001001         db  0x8b ; '.'
0000000000001002         db  0x21 ; '!'
0000000000001003         db  0x00 ; '.'
0000000000001004         db  0x00 ; '.'
0000000000001005         db  0x00 ; '.'
0000000000001006         db  0x00 ; '.'
0000000000001007         db  0x00 ; '.'
0000000000001008         db  0x08 ; '.'
0000000000001009         db  0x00 ; '.'
000000000000100a         db  0x00 ; '.'
000000000000100b         db  0x00 ; '.'
000000000000100c         db  0x00 ; '.'
000000000000100d         db  0x00 ; '.'
000000000000100e         db  0x00 ; '.'
000000000000100f         db  0x00 ; '.'
0000000000001010         db  0xd7 ; '.'
0000000000001011         db  0x4e ; 'N'
0000000000001012         db  0x01 ; '.'
0000000000001013         db  0x00 ; '.'
0000000000001014         db  0x00 ; '.'
0000000000001015         db  0x00 ; '.'
0000000000001016         db  0x00 ; '.'
0000000000001017         db  0x00 ; '.'
0000000000001018         db  0x98 ; '.'
0000000000001019         db  0x8b ; '.'
000000000000101a         db  0x21 ; '!'
000000000000101b         db  0x00 ; '.'
000000000000101c         db  0x00 ; '.'
000000000000101d         db  0x00 ; '.'
000000000000101e         db  0x00 ; '.'
000000000000101f         db  0x00 ; '.'
0000000000001020         db  0x08 ; '.'
0000000000001021         db  0x00 ; '.'
0000000000001022         db  0x00 ; '.'
0000000000001023         db  0x00 ; '.'
0000000000001024         db  0x00 ; '.'
0000000000001025         db  0x00 ; '.'
0000000000001026         db  0x00 ; '.'
0000000000001027         db  0x00 ; '.'
0000000000001028         db  0xe4 ; '.'
0000000000001029         db  0x4e ; 'N'
000000000000102a         db  0x01 ; '.'
000000000000102b         db  0x00 ; '.'
000000000000102c         db  0x00 ; '.'
000000000000102d         db  0x00 ; '.'
000000000000102e         db  0x00 ; '.'
000000000000102f         db  0x00 ; '.'
0000000000001030         db  0xa0 ; '.'
0000000000001031         db  0x8b ; '.'
0000000000001032         db  0x21 ; '!'
0000000000001033         db  0x00 ; '.'
0000000000001034         db  0x00 ; '.'
0000000000001035         db  0x00 ; '.'
0000000000001036         db  0x00 ; '.'
0000000000001037         db  0x00 ; '.'
0000000000001038         db  0x08 ; '.'
0000000000001039         db  0x00 ; '.'
000000000000103a         db  0x00 ; '.'
000000000000103b         db  0x00 ; '.'
000000000000103c         db  0x00 ; '.'
000000000000103d         db  0x00 ; '.'
000000000000103e         db  0x00 ; '.'
000000000000103f         db  0x00 ; '.'
0000000000001040         db  0xf1 ; '.'
0000000000001041         db  0x4e ; 'N'
0000000000001042         db  0x01 ; '.'
0000000000001043         db  0x00 ; '.'
0000000000001044         db  0x00 ; '.'
0000000000001045         db  0x00 ; '.'
0000000000001046         db  0x00 ; '.'
0000000000001047         db  0x00 ; '.'
0000000000001048         db  0xa8 ; '.'
0000000000001049         db  0x8b ; '.'
000000000000104a         db  0x21 ; '!'
000000000000104b         db  0x00 ; '.'
000000000000104c         db  0x00 ; '.'
000000000000104d         db  0x00 ; '.'
000000000000104e         db  0x00 ; '.'
000000000000104f         db  0x00 ; '.'
0000000000001050         db  0x08 ; '.'
0000000000001051         db  0x00 ; '.'
0000000000001052         db  0x00 ; '.'
0000000000001053         db  0x00 ; '.'
0000000000001054         db  0x00 ; '.'
0000000000001055         db  0x00 ; '.'
0000000000001056         db  0x00 ; '.'
0000000000001057         db  0x00 ; '.'
0000000000001058         db  0x05 ; '.'
0000000000001059         db  0x4f ; 'O'
000000000000105a         db  0x01 ; '.'
000000000000105b         db  0x00 ; '.'
000000000000105c         db  0x00 ; '.'
000000000000105d         db  0x00 ; '.'
000000000000105e         db  0x00 ; '.'
000000000000105f         db  0x00 ; '.'
0000000000001060         db  0xb0 ; '.'
0000000000001061         db  0x8b ; '.'
0000000000001062         db  0x21 ; '!'
0000000000001063         db  0x00 ; '.'
0000000000001064         db  0x00 ; '.'
0000000000001065         db  0x00 ; '.'
0000000000001066         db  0x00 ; '.'
0000000000001067         db  0x00 ; '.'
0000000000001068         db  0x08 ; '.'
0000000000001069         db  0x00 ; '.'
000000000000106a         db  0x00 ; '.'
000000000000106b         db  0x00 ; '.'
000000000000106c         db  0x00 ; '.'
000000000000106d         db  0x00 ; '.'
000000000000106e         db  0x00 ; '.'
000000000000106f         db  0x00 ; '.'
0000000000001070         db  0x07 ; '.'
0000000000001071         db  0x4f ; 'O'
0000000000001072         db  0x01 ; '.'
0000000000001073         db  0x00 ; '.'
0000000000001074         db  0x00 ; '.'
0000000000001075         db  0x00 ; '.'
0000000000001076         db  0x00 ; '.'
0000000000001077         db  0x00 ; '.'
0000000000001078         db  0xb8 ; '.'
0000000000001079         db  0x8b ; '.'
000000000000107a         db  0x21 ; '!'
000000000000107b         db  0x00 ; '.'
000000000000107c         db  0x00 ; '.'
000000000000107d         db  0x00 ; '.'
000000000000107e         db  0x00 ; '.'
000000000000107f         db  0x00 ; '.'
0000000000001080         db  0x08 ; '.'
0000000000001081         db  0x00 ; '.'
0000000000001082         db  0x00 ; '.'
0000000000001083         db  0x00 ; '.'
0000000000001084         db  0x00 ; '.'
0000000000001085         db  0x00 ; '.'
0000000000001086         db  0x00 ; '.'
0000000000001087         db  0x00 ; '.'
0000000000001088         db  0xea ; '.'
0000000000001089         db  0x4e ; 'N'
000000000000108a         db  0x01 ; '.'
000000000000108b         db  0x00 ; '.'
000000000000108c         db  0x00 ; '.'
000000000000108d         db  0x00 ; '.'
000000000000108e         db  0x00 ; '.'
000000000000108f         db  0x00 ; '.'
0000000000001090         db  0xc0 ; '.'
0000000000001091         db  0x8b ; '.'
0000000000001092         db  0x21 ; '!'
0000000000001093         db  0x00 ; '.'
0000000000001094         db  0x00 ; '.'
0000000000001095         db  0x00 ; '.'
0000000000001096         db  0x00 ; '.'
0000000000001097         db  0x00 ; '.'
0000000000001098         db  0x08 ; '.'
0000000000001099         db  0x00 ; '.'
000000000000109a         db  0x00 ; '.'
000000000000109b         db  0x00 ; '.'
000000000000109c         db  0x00 ; '.'
000000000000109d         db  0x00 ; '.'
000000000000109e         db  0x00 ; '.'
000000000000109f         db  0x00 ; '.'
00000000000010a0         db  0x70 ; 'p'
00000000000010a1         db  0x44 ; 'D'
00000000000010a2         db  0x01 ; '.'
00000000000010a3         db  0x00 ; '.'
00000000000010a4         db  0x00 ; '.'
00000000000010a5         db  0x00 ; '.'
00000000000010a6         db  0x00 ; '.'
00000000000010a7         db  0x00 ; '.'
00000000000010a8         db  0xc8 ; '.'
00000000000010a9         db  0x8b ; '.'
00000000000010aa         db  0x21 ; '!'
00000000000010ab         db  0x00 ; '.'
00000000000010ac         db  0x00 ; '.'
00000000000010ad         db  0x00 ; '.'
00000000000010ae         db  0x00 ; '.'
00000000000010af         db  0x00 ; '.'
00000000000010b0         db  0x08 ; '.'
00000000000010b1         db  0x00 ; '.'
00000000000010b2         db  0x00 ; '.'
00000000000010b3         db  0x00 ; '.'
00000000000010b4         db  0x00 ; '.'
00000000000010b5         db  0x00 ; '.'
00000000000010b6         db  0x00 ; '.'
00000000000010b7         db  0x00 ; '.'
00000000000010b8         db  0x0f ; '.'
00000000000010b9         db  0x4f ; 'O'
00000000000010ba         db  0x01 ; '.'
00000000000010bb         db  0x00 ; '.'
00000000000010bc         db  0x00 ; '.'
00000000000010bd         db  0x00 ; '.'
00000000000010be         db  0x00 ; '.'
00000000000010bf         db  0x00 ; '.'
00000000000010c0         db  0x08 ; '.'
00000000000010c1         db  0x90 ; '.'
00000000000010c2         db  0x21 ; '!'
00000000000010c3         db  0x00 ; '.'
00000000000010c4         db  0x00 ; '.'
00000000000010c5         db  0x00 ; '.'
00000000000010c6         db  0x00 ; '.'
00000000000010c7         db  0x00 ; '.'
00000000000010c8         db  0x08 ; '.'
00000000000010c9         db  0x00 ; '.'
00000000000010ca         db  0x00 ; '.'
00000000000010cb         db  0x00 ; '.'
00000000000010cc         db  0x00 ; '.'
00000000000010cd         db  0x00 ; '.'
00000000000010ce         db  0x00 ; '.'
00000000000010cf         db  0x00 ; '.'
00000000000010d0         db  0x08 ; '.'
00000000000010d1         db  0x90 ; '.'
00000000000010d2         db  0x21 ; '!'
00000000000010d3         db  0x00 ; '.'
00000000000010d4         db  0x00 ; '.'
00000000000010d5         db  0x00 ; '.'
00000000000010d6         db  0x00 ; '.'
00000000000010d7         db  0x00 ; '.'
00000000000010d8         db  0x38 ; '8'
00000000000010d9         db  0x90 ; '.'
00000000000010da         db  0x21 ; '!'
00000000000010db         db  0x00 ; '.'
00000000000010dc         db  0x00 ; '.'
00000000000010dd         db  0x00 ; '.'
00000000000010de         db  0x00 ; '.'
00000000000010df         db  0x00 ; '.'
00000000000010e0         db  0x08 ; '.'
00000000000010e1         db  0x00 ; '.'
00000000000010e2         db  0x00 ; '.'
00000000000010e3         db  0x00 ; '.'
00000000000010e4         db  0x00 ; '.'
00000000000010e5         db  0x00 ; '.'
00000000000010e6         db  0x00 ; '.'
00000000000010e7         db  0x00 ; '.'
00000000000010e8         db  0x50 ; 'P'
00000000000010e9         db  0x4e ; 'N'
00000000000010ea         db  0x01 ; '.'
00000000000010eb         db  0x00 ; '.'
00000000000010ec         db  0x00 ; '.'
00000000000010ed         db  0x00 ; '.'
00000000000010ee         db  0x00 ; '.'
00000000000010ef         db  0x00 ; '.'
00000000000010f0         db  0x40 ; '@'
00000000000010f1         db  0x90 ; '.'
00000000000010f2         db  0x21 ; '!'
00000000000010f3         db  0x00 ; '.'
00000000000010f4         db  0x00 ; '.'
00000000000010f5         db  0x00 ; '.'
00000000000010f6         db  0x00 ; '.'
00000000000010f7         db  0x00 ; '.'
00000000000010f8         db  0x08 ; '.'
00000000000010f9         db  0x00 ; '.'
00000000000010fa         db  0x00 ; '.'
00000000000010fb         db  0x00 ; '.'
00000000000010fc         db  0x00 ; '.'
00000000000010fd         db  0x00 ; '.'
00000000000010fe         db  0x00 ; '.'
00000000000010ff         db  0x00 ; '.'
0000000000001100         db  0x38 ; '8'
0000000000001101         db  0x4e ; 'N'
0000000000001102         db  0x01 ; '.'
0000000000001103         db  0x00 ; '.'
0000000000001104         db  0x00 ; '.'
0000000000001105         db  0x00 ; '.'
0000000000001106         db  0x00 ; '.'
0000000000001107         db  0x00 ; '.'
0000000000001108         db  0x48 ; 'H'
0000000000001109         db  0x90 ; '.'
000000000000110a         db  0x21 ; '!'
000000000000110b         db  0x00 ; '.'
000000000000110c         db  0x00 ; '.'
000000000000110d         db  0x00 ; '.'
000000000000110e         db  0x00 ; '.'
000000000000110f         db  0x00 ; '.'
0000000000001110         db  0x08 ; '.'
0000000000001111         db  0x00 ; '.'
0000000000001112         db  0x00 ; '.'
0000000000001113         db  0x00 ; '.'
0000000000001114         db  0x00 ; '.'
0000000000001115         db  0x00 ; '.'
0000000000001116         db  0x00 ; '.'
0000000000001117         db  0x00 ; '.'
0000000000001118         db  0xac ; '.'
0000000000001119         db  0x45 ; 'E'
000000000000111a         db  0x01 ; '.'
000000000000111b         db  0x00 ; '.'
000000000000111c         db  0x00 ; '.'
000000000000111d         db  0x00 ; '.'
000000000000111e         db  0x00 ; '.'
000000000000111f         db  0x00 ; '.'
0000000000001120         db  0x50 ; 'P'
0000000000001121         db  0x90 ; '.'
0000000000001122         db  0x21 ; '!'
0000000000001123         db  0x00 ; '.'
0000000000001124         db  0x00 ; '.'
0000000000001125         db  0x00 ; '.'
0000000000001126         db  0x00 ; '.'
0000000000001127         db  0x00 ; '.'
0000000000001128         db  0x08 ; '.'
0000000000001129         db  0x00 ; '.'
000000000000112a         db  0x00 ; '.'
000000000000112b         db  0x00 ; '.'
000000000000112c         db  0x00 ; '.'
000000000000112d         db  0x00 ; '.'
000000000000112e         db  0x00 ; '.'
000000000000112f         db  0x00 ; '.'
0000000000001130         db  0xb3 ; '.'
0000000000001131         db  0x44 ; 'D'
0000000000001132         db  0x01 ; '.'
0000000000001133         db  0x00 ; '.'
0000000000001134         db  0x00 ; '.'
0000000000001135         db  0x00 ; '.'
0000000000001136         db  0x00 ; '.'
0000000000001137         db  0x00 ; '.'
0000000000001138         db  0x58 ; 'X'
0000000000001139         db  0x90 ; '.'
000000000000113a         db  0x21 ; '!'
000000000000113b         db  0x00 ; '.'
000000000000113c         db  0x00 ; '.'
000000000000113d         db  0x00 ; '.'
000000000000113e         db  0x00 ; '.'
000000000000113f         db  0x00 ; '.'
0000000000001140         db  0x08 ; '.'
0000000000001141         db  0x00 ; '.'
0000000000001142         db  0x00 ; '.'
0000000000001143         db  0x00 ; '.'
0000000000001144         db  0x00 ; '.'
0000000000001145         db  0x00 ; '.'
0000000000001146         db  0x00 ; '.'
0000000000001147         db  0x00 ; '.'
0000000000001148         db  0xb3 ; '.'
0000000000001149         db  0x44 ; 'D'
000000000000114a         db  0x01 ; '.'
000000000000114b         db  0x00 ; '.'
000000000000114c         db  0x00 ; '.'
000000000000114d         db  0x00 ; '.'
000000000000114e         db  0x00 ; '.'
000000000000114f         db  0x00 ; '.'
0000000000001150         db  0x60 ; '`'
0000000000001151         db  0x90 ; '.'
0000000000001152         db  0x21 ; '!'
0000000000001153         db  0x00 ; '.'
0000000000001154         db  0x00 ; '.'
0000000000001155         db  0x00 ; '.'
0000000000001156         db  0x00 ; '.'
0000000000001157         db  0x00 ; '.'
0000000000001158         db  0x08 ; '.'
0000000000001159         db  0x00 ; '.'
000000000000115a         db  0x00 ; '.'
000000000000115b         db  0x00 ; '.'
000000000000115c         db  0x00 ; '.'
000000000000115d         db  0x00 ; '.'
000000000000115e         db  0x00 ; '.'
000000000000115f         db  0x00 ; '.'
0000000000001160         db  0x8b ; '.'
0000000000001161         db  0x45 ; 'E'
0000000000001162         db  0x01 ; '.'
0000000000001163         db  0x00 ; '.'
0000000000001164         db  0x00 ; '.'
0000000000001165         db  0x00 ; '.'
0000000000001166         db  0x00 ; '.'
0000000000001167         db  0x00 ; '.'
0000000000001168         db  0x68 ; 'h'
0000000000001169         db  0x90 ; '.'
000000000000116a         db  0x21 ; '!'
000000000000116b         db  0x00 ; '.'
000000000000116c         db  0x00 ; '.'
000000000000116d         db  0x00 ; '.'
000000000000116e         db  0x00 ; '.'
000000000000116f         db  0x00 ; '.'
0000000000001170         db  0x08 ; '.'
0000000000001171         db  0x00 ; '.'
0000000000001172         db  0x00 ; '.'
0000000000001173         db  0x00 ; '.'
0000000000001174         db  0x00 ; '.'
0000000000001175         db  0x00 ; '.'
0000000000001176         db  0x00 ; '.'
0000000000001177         db  0x00 ; '.'
0000000000001178         db  0x57 ; 'W'
0000000000001179         db  0x4e ; 'N'
000000000000117a         db  0x01 ; '.'
000000000000117b         db  0x00 ; '.'
000000000000117c         db  0x00 ; '.'
000000000000117d         db  0x00 ; '.'
000000000000117e         db  0x00 ; '.'
000000000000117f         db  0x00 ; '.'
0000000000001180         db  0xc0 ; '.'
0000000000001181         db  0x90 ; '.'
0000000000001182         db  0x21 ; '!'
0000000000001183         db  0x00 ; '.'
0000000000001184         db  0x00 ; '.'
0000000000001185         db  0x00 ; '.'
0000000000001186         db  0x00 ; '.'
0000000000001187         db  0x00 ; '.'
0000000000001188         db  0x08 ; '.'
0000000000001189         db  0x00 ; '.'
000000000000118a         db  0x00 ; '.'
000000000000118b         db  0x00 ; '.'
000000000000118c         db  0x00 ; '.'
000000000000118d         db  0x00 ; '.'
000000000000118e         db  0x00 ; '.'
000000000000118f         db  0x00 ; '.'
0000000000001190         db  0xd0 ; '.'
0000000000001191         db  0x90 ; '.'
0000000000001192         db  0x21 ; '!'
0000000000001193         db  0x00 ; '.'
0000000000001194         db  0x00 ; '.'
0000000000001195         db  0x00 ; '.'
0000000000001196         db  0x00 ; '.'
0000000000001197         db  0x00 ; '.'
0000000000001198         db  0xd8 ; '.'
0000000000001199         db  0x90 ; '.'
000000000000119a         db  0x21 ; '!'
000000000000119b         db  0x00 ; '.'
000000000000119c         db  0x00 ; '.'
000000000000119d         db  0x00 ; '.'
000000000000119e         db  0x00 ; '.'
000000000000119f         db  0x00 ; '.'
00000000000011a0         db  0x08 ; '.'
00000000000011a1         db  0x00 ; '.'
00000000000011a2         db  0x00 ; '.'
00000000000011a3         db  0x00 ; '.'
00000000000011a4         db  0x00 ; '.'
00000000000011a5         db  0x00 ; '.'
00000000000011a6         db  0x00 ; '.'
00000000000011a7         db  0x00 ; '.'
00000000000011a8         db  0xa0 ; '.'
00000000000011a9         db  0x95 ; '.'
00000000000011aa         db  0x21 ; '!'
00000000000011ab         db  0x00 ; '.'
00000000000011ac         db  0x00 ; '.'
00000000000011ad         db  0x00 ; '.'
00000000000011ae         db  0x00 ; '.'
00000000000011af         db  0x00 ; '.'
00000000000011b0         db  0xc8 ; '.'
00000000000011b1         db  0x8f ; '.'
00000000000011b2         db  0x21 ; '!'
00000000000011b3         db  0x00 ; '.'
00000000000011b4         db  0x00 ; '.'
00000000000011b5         db  0x00 ; '.'
00000000000011b6         db  0x00 ; '.'
00000000000011b7         db  0x00 ; '.'
00000000000011b8         db  0x06 ; '.'
00000000000011b9         db  0x00 ; '.'
00000000000011ba         db  0x00 ; '.'
00000000000011bb         db  0x00 ; '.'
00000000000011bc         db  0x07 ; '.'
00000000000011bd         db  0x00 ; '.'
00000000000011be         db  0x00 ; '.'
00000000000011bf         db  0x00 ; '.'
00000000000011c0         db  0x00 ; '.'
00000000000011c1         db  0x00 ; '.'
00000000000011c2         db  0x00 ; '.'
00000000000011c3         db  0x00 ; '.'
00000000000011c4         db  0x00 ; '.'
00000000000011c5         db  0x00 ; '.'
00000000000011c6         db  0x00 ; '.'
00000000000011c7         db  0x00 ; '.'
00000000000011c8         db  0xd0 ; '.'
00000000000011c9         db  0x8f ; '.'
00000000000011ca         db  0x21 ; '!'
00000000000011cb         db  0x00 ; '.'
00000000000011cc         db  0x00 ; '.'
00000000000011cd         db  0x00 ; '.'
00000000000011ce         db  0x00 ; '.'
00000000000011cf         db  0x00 ; '.'
00000000000011d0         db  0x06 ; '.'
00000000000011d1         db  0x00 ; '.'
00000000000011d2         db  0x00 ; '.'
00000000000011d3         db  0x00 ; '.'
00000000000011d4         db  0x1f ; '.'
00000000000011d5         db  0x00 ; '.'
00000000000011d6         db  0x00 ; '.'
00000000000011d7         db  0x00 ; '.'
00000000000011d8         db  0x00 ; '.'
00000000000011d9         db  0x00 ; '.'
00000000000011da         db  0x00 ; '.'
00000000000011db         db  0x00 ; '.'
00000000000011dc         db  0x00 ; '.'
00000000000011dd         db  0x00 ; '.'
00000000000011de         db  0x00 ; '.'
00000000000011df         db  0x00 ; '.'
00000000000011e0         db  0xd8 ; '.'
00000000000011e1         db  0x8f ; '.'
00000000000011e2         db  0x21 ; '!'
00000000000011e3         db  0x00 ; '.'
00000000000011e4         db  0x00 ; '.'
00000000000011e5         db  0x00 ; '.'
00000000000011e6         db  0x00 ; '.'
00000000000011e7         db  0x00 ; '.'
00000000000011e8         db  0x06 ; '.'
00000000000011e9         db  0x00 ; '.'
00000000000011ea         db  0x00 ; '.'
00000000000011eb         db  0x00 ; '.'
00000000000011ec         db  0x25 ; '%'
00000000000011ed         db  0x00 ; '.'
00000000000011ee         db  0x00 ; '.'
00000000000011ef         db  0x00 ; '.'
00000000000011f0         db  0x00 ; '.'
00000000000011f1         db  0x00 ; '.'
00000000000011f2         db  0x00 ; '.'
00000000000011f3         db  0x00 ; '.'
00000000000011f4         db  0x00 ; '.'
00000000000011f5         db  0x00 ; '.'
00000000000011f6         db  0x00 ; '.'
00000000000011f7         db  0x00 ; '.'
00000000000011f8         db  0xe0 ; '.'
00000000000011f9         db  0x8f ; '.'
00000000000011fa         db  0x21 ; '!'
00000000000011fb         db  0x00 ; '.'
00000000000011fc         db  0x00 ; '.'
00000000000011fd         db  0x00 ; '.'
00000000000011fe         db  0x00 ; '.'
00000000000011ff         db  0x00 ; '.'
0000000000001200         db  0x06 ; '.'                                         ; DATA XREF=peek_token+560, peek_token+572, peek_token+640, peek_token+652, peek_token+996, peek_token+1080
0000000000001201         db  0x00 ; '.'
0000000000001202         db  0x00 ; '.'
0000000000001203         db  0x00 ; '.'
0000000000001204         db  0x3d ; '='
0000000000001205         db  0x00 ; '.'
0000000000001206         db  0x00 ; '.'
0000000000001207         db  0x00 ; '.'
0000000000001208         db  0x00 ; '.'
0000000000001209         db  0x00 ; '.'
000000000000120a         db  0x00 ; '.'
000000000000120b         db  0x00 ; '.'
000000000000120c         db  0x00 ; '.'
000000000000120d         db  0x00 ; '.'
000000000000120e         db  0x00 ; '.'
000000000000120f         db  0x00 ; '.'
0000000000001210         db  0xe8 ; '.'
0000000000001211         db  0x8f ; '.'
0000000000001212         db  0x21 ; '!'
0000000000001213         db  0x00 ; '.'
0000000000001214         db  0x00 ; '.'
0000000000001215         db  0x00 ; '.'
0000000000001216         db  0x00 ; '.'
0000000000001217         db  0x00 ; '.'
0000000000001218         db  0x06 ; '.'
0000000000001219         db  0x00 ; '.'
000000000000121a         db  0x00 ; '.'
000000000000121b         db  0x00 ; '.'
000000000000121c         db  0x40 ; '@'
000000000000121d         db  0x00 ; '.'
000000000000121e         db  0x00 ; '.'
000000000000121f         db  0x00 ; '.'
0000000000001220         db  0x00 ; '.'
0000000000001221         db  0x00 ; '.'
0000000000001222         db  0x00 ; '.'
0000000000001223         db  0x00 ; '.'
0000000000001224         db  0x00 ; '.'
0000000000001225         db  0x00 ; '.'
0000000000001226         db  0x00 ; '.'
0000000000001227         db  0x00 ; '.'
0000000000001228         db  0xe0 ; '.'
0000000000001229         db  0x90 ; '.'
000000000000122a         db  0x21 ; '!'
000000000000122b         db  0x00 ; '.'
000000000000122c         db  0x00 ; '.'
000000000000122d         db  0x00 ; '.'
000000000000122e         db  0x00 ; '.'
000000000000122f         db  0x00 ; '.'
0000000000001230         db  0x05 ; '.'
0000000000001231         db  0x00 ; '.'
0000000000001232         db  0x00 ; '.'
0000000000001233         db  0x00 ; '.'
0000000000001234         db  0x44 ; 'D'
0000000000001235         db  0x00 ; '.'
0000000000001236         db  0x00 ; '.'
0000000000001237         db  0x00 ; '.'
0000000000001238         db  0x00 ; '.'
0000000000001239         db  0x00 ; '.'
000000000000123a         db  0x00 ; '.'
000000000000123b         db  0x00 ; '.'
000000000000123c         db  0x00 ; '.'
000000000000123d         db  0x00 ; '.'
000000000000123e         db  0x00 ; '.'
000000000000123f         db  0x00 ; '.'
0000000000001240         db  0xe8 ; '.'
0000000000001241         db  0x90 ; '.'
0000000000001242         db  0x21 ; '!'
0000000000001243         db  0x00 ; '.'
0000000000001244         db  0x00 ; '.'
0000000000001245         db  0x00 ; '.'
0000000000001246         db  0x00 ; '.'
0000000000001247         db  0x00 ; '.'
0000000000001248         db  0x05 ; '.'
0000000000001249         db  0x00 ; '.'
000000000000124a         db  0x00 ; '.'
000000000000124b         db  0x00 ; '.'
000000000000124c         db  0x43 ; 'C'
000000000000124d         db  0x00 ; '.'
000000000000124e         db  0x00 ; '.'
000000000000124f         db  0x00 ; '.'
0000000000001250         db  0x00 ; '.'
0000000000001251         db  0x00 ; '.'
0000000000001252         db  0x00 ; '.'
0000000000001253         db  0x00 ; '.'
0000000000001254         db  0x00 ; '.'
0000000000001255         db  0x00 ; '.'
0000000000001256         db  0x00 ; '.'
0000000000001257         db  0x00 ; '.'
0000000000001258         db  0xf0 ; '.'
0000000000001259         db  0x90 ; '.'
000000000000125a         db  0x21 ; '!'
000000000000125b         db  0x00 ; '.'
000000000000125c         db  0x00 ; '.'
000000000000125d         db  0x00 ; '.'
000000000000125e         db  0x00 ; '.'
000000000000125f         db  0x00 ; '.'
0000000000001260         db  0x05 ; '.'
0000000000001261         db  0x00 ; '.'
0000000000001262         db  0x00 ; '.'
0000000000001263         db  0x00 ; '.'
0000000000001264         db  0x45 ; 'E'
0000000000001265         db  0x00 ; '.'
0000000000001266         db  0x00 ; '.'
0000000000001267         db  0x00 ; '.'
0000000000001268         db  0x00 ; '.'
0000000000001269         db  0x00 ; '.'
000000000000126a         db  0x00 ; '.'
000000000000126b         db  0x00 ; '.'
000000000000126c         db  0x00 ; '.'
000000000000126d         db  0x00 ; '.'
000000000000126e         db  0x00 ; '.'
000000000000126f         db  0x00 ; '.'
0000000000001270         db  0xf8 ; '.'
0000000000001271         db  0x90 ; '.'
0000000000001272         db  0x21 ; '!'
0000000000001273         db  0x00 ; '.'
0000000000001274         db  0x00 ; '.'
0000000000001275         db  0x00 ; '.'
0000000000001276         db  0x00 ; '.'
0000000000001277         db  0x00 ; '.'
0000000000001278         db  0x05 ; '.'
0000000000001279         db  0x00 ; '.'
000000000000127a         db  0x00 ; '.'
000000000000127b         db  0x00 ; '.'
000000000000127c         db  0x4a ; 'J'
000000000000127d         db  0x00 ; '.'
000000000000127e         db  0x00 ; '.'
000000000000127f         db  0x00 ; '.'
0000000000001280         db  0x00 ; '.'
0000000000001281         db  0x00 ; '.'
0000000000001282         db  0x00 ; '.'
0000000000001283         db  0x00 ; '.'
0000000000001284         db  0x00 ; '.'
0000000000001285         db  0x00 ; '.'
0000000000001286         db  0x00 ; '.'
0000000000001287         db  0x00 ; '.'
0000000000001288         db  0x00 ; '.'
0000000000001289         db  0x91 ; '.'
000000000000128a         db  0x21 ; '!'
000000000000128b         db  0x00 ; '.'
000000000000128c         db  0x00 ; '.'
000000000000128d         db  0x00 ; '.'
000000000000128e         db  0x00 ; '.'
000000000000128f         db  0x00 ; '.'
0000000000001290         db  0x05 ; '.'
0000000000001291         db  0x00 ; '.'
0000000000001292         db  0x00 ; '.'
0000000000001293         db  0x00 ; '.'
0000000000001294         db  0x4b ; 'K'
0000000000001295         db  0x00 ; '.'
0000000000001296         db  0x00 ; '.'
0000000000001297         db  0x00 ; '.'
0000000000001298         db  0x00 ; '.'
0000000000001299         db  0x00 ; '.'
000000000000129a         db  0x00 ; '.'
000000000000129b         db  0x00 ; '.'
000000000000129c         db  0x00 ; '.'
000000000000129d         db  0x00 ; '.'
000000000000129e         db  0x00 ; '.'
000000000000129f         db  0x00 ; '.'
00000000000012a0         db  0x08 ; '.'
00000000000012a1         db  0x91 ; '.'
00000000000012a2         db  0x21 ; '!'
00000000000012a3         db  0x00 ; '.'
00000000000012a4         db  0x00 ; '.'
00000000000012a5         db  0x00 ; '.'
00000000000012a6         db  0x00 ; '.'
00000000000012a7         db  0x00 ; '.'
00000000000012a8         db  0x05 ; '.'
00000000000012a9         db  0x00 ; '.'
00000000000012aa         db  0x00 ; '.'
00000000000012ab         db  0x00 ; '.'
00000000000012ac         db  0x47 ; 'G'
00000000000012ad         db  0x00 ; '.'
00000000000012ae         db  0x00 ; '.'
00000000000012af         db  0x00 ; '.'
00000000000012b0         db  0x00 ; '.'
00000000000012b1         db  0x00 ; '.'
00000000000012b2         db  0x00 ; '.'
00000000000012b3         db  0x00 ; '.'
00000000000012b4         db  0x00 ; '.'
00000000000012b5         db  0x00 ; '.'
00000000000012b6         db  0x00 ; '.'
00000000000012b7         db  0x00 ; '.'
00000000000012b8         db  0x20 ; ' '
00000000000012b9         db  0x91 ; '.'
00000000000012ba         db  0x21 ; '!'
00000000000012bb         db  0x00 ; '.'
00000000000012bc         db  0x00 ; '.'
00000000000012bd         db  0x00 ; '.'
00000000000012be         db  0x00 ; '.'
00000000000012bf         db  0x00 ; '.'
00000000000012c0         db  0x05 ; '.'
00000000000012c1         db  0x00 ; '.'
00000000000012c2         db  0x00 ; '.'
00000000000012c3         db  0x00 ; '.'
00000000000012c4         db  0x49 ; 'I'
00000000000012c5         db  0x00 ; '.'
00000000000012c6         db  0x00 ; '.'
00000000000012c7         db  0x00 ; '.'
00000000000012c8         db  0x00 ; '.'
00000000000012c9         db  0x00 ; '.'
00000000000012ca         db  0x00 ; '.'
00000000000012cb         db  0x00 ; '.'
00000000000012cc         db  0x00 ; '.'
00000000000012cd         db  0x00 ; '.'
00000000000012ce         db  0x00 ; '.'
00000000000012cf         db  0x00 ; '.'


        ; Section .rela.plt
        ; Range: [0x12d0; 0x1888[ (1464 bytes)
        ; File offset : [4816; 6280[ (1464 bytes)
        ; Flags: 0x42
        ;   SHT_RELA
        ;   SHF_ALLOC

00000000000012d0         db  0xe0 ; '.'
00000000000012d1         db  0x8d ; '.'
00000000000012d2         db  0x21 ; '!'
00000000000012d3         db  0x00 ; '.'
00000000000012d4         db  0x00 ; '.'
00000000000012d5         db  0x00 ; '.'
00000000000012d6         db  0x00 ; '.'
00000000000012d7         db  0x00 ; '.'
00000000000012d8         db  0x07 ; '.'
00000000000012d9         db  0x00 ; '.'
00000000000012da         db  0x00 ; '.'
00000000000012db         db  0x00 ; '.'
00000000000012dc         db  0x01 ; '.'
00000000000012dd         db  0x00 ; '.'
00000000000012de         db  0x00 ; '.'
00000000000012df         db  0x00 ; '.'
00000000000012e0         db  0x00 ; '.'
00000000000012e1         db  0x00 ; '.'
00000000000012e2         db  0x00 ; '.'
00000000000012e3         db  0x00 ; '.'
00000000000012e4         db  0x00 ; '.'
00000000000012e5         db  0x00 ; '.'
00000000000012e6         db  0x00 ; '.'
00000000000012e7         db  0x00 ; '.'
00000000000012e8         db  0xe8 ; '.'
00000000000012e9         db  0x8d ; '.'
00000000000012ea         db  0x21 ; '!'
00000000000012eb         db  0x00 ; '.'
00000000000012ec         db  0x00 ; '.'
00000000000012ed         db  0x00 ; '.'
00000000000012ee         db  0x00 ; '.'
00000000000012ef         db  0x00 ; '.'
00000000000012f0         db  0x07 ; '.'
00000000000012f1         db  0x00 ; '.'
00000000000012f2         db  0x00 ; '.'
00000000000012f3         db  0x00 ; '.'
00000000000012f4         db  0x02 ; '.'
00000000000012f5         db  0x00 ; '.'
00000000000012f6         db  0x00 ; '.'
00000000000012f7         db  0x00 ; '.'
00000000000012f8         db  0x00 ; '.'
00000000000012f9         db  0x00 ; '.'
00000000000012fa         db  0x00 ; '.'
00000000000012fb         db  0x00 ; '.'
00000000000012fc         db  0x00 ; '.'
00000000000012fd         db  0x00 ; '.'
00000000000012fe         db  0x00 ; '.'
00000000000012ff         db  0x00 ; '.'
0000000000001300         db  0xf0 ; '.'
0000000000001301         db  0x8d ; '.'
0000000000001302         db  0x21 ; '!'
0000000000001303         db  0x00 ; '.'
0000000000001304         db  0x00 ; '.'
0000000000001305         db  0x00 ; '.'
0000000000001306         db  0x00 ; '.'
0000000000001307         db  0x00 ; '.'
0000000000001308         db  0x07 ; '.'
0000000000001309         db  0x00 ; '.'
000000000000130a         db  0x00 ; '.'
000000000000130b         db  0x00 ; '.'
000000000000130c         db  0x03 ; '.'
000000000000130d         db  0x00 ; '.'
000000000000130e         db  0x00 ; '.'
000000000000130f         db  0x00 ; '.'
0000000000001310         db  0x00 ; '.'
0000000000001311         db  0x00 ; '.'
0000000000001312         db  0x00 ; '.'
0000000000001313         db  0x00 ; '.'
0000000000001314         db  0x00 ; '.'
0000000000001315         db  0x00 ; '.'
0000000000001316         db  0x00 ; '.'
0000000000001317         db  0x00 ; '.'
0000000000001318         db  0xf8 ; '.'
0000000000001319         db  0x8d ; '.'
000000000000131a         db  0x21 ; '!'
000000000000131b         db  0x00 ; '.'
000000000000131c         db  0x00 ; '.'
000000000000131d         db  0x00 ; '.'
000000000000131e         db  0x00 ; '.'
000000000000131f         db  0x00 ; '.'
0000000000001320         db  0x07 ; '.'
0000000000001321         db  0x00 ; '.'
0000000000001322         db  0x00 ; '.'
0000000000001323         db  0x00 ; '.'
0000000000001324         db  0x04 ; '.'
0000000000001325         db  0x00 ; '.'
0000000000001326         db  0x00 ; '.'
0000000000001327         db  0x00 ; '.'
0000000000001328         db  0x00 ; '.'
0000000000001329         db  0x00 ; '.'
000000000000132a         db  0x00 ; '.'
000000000000132b         db  0x00 ; '.'
000000000000132c         db  0x00 ; '.'
000000000000132d         db  0x00 ; '.'
000000000000132e         db  0x00 ; '.'
000000000000132f         db  0x00 ; '.'
0000000000001330         db  0x00 ; '.'
0000000000001331         db  0x8e ; '.'
0000000000001332         db  0x21 ; '!'
0000000000001333         db  0x00 ; '.'
0000000000001334         db  0x00 ; '.'
0000000000001335         db  0x00 ; '.'
0000000000001336         db  0x00 ; '.'
0000000000001337         db  0x00 ; '.'
0000000000001338         db  0x07 ; '.'
0000000000001339         db  0x00 ; '.'
000000000000133a         db  0x00 ; '.'
000000000000133b         db  0x00 ; '.'
000000000000133c         db  0x05 ; '.'
000000000000133d         db  0x00 ; '.'
000000000000133e         db  0x00 ; '.'
000000000000133f         db  0x00 ; '.'
0000000000001340         db  0x00 ; '.'
0000000000001341         db  0x00 ; '.'
0000000000001342         db  0x00 ; '.'
0000000000001343         db  0x00 ; '.'
0000000000001344         db  0x00 ; '.'
0000000000001345         db  0x00 ; '.'
0000000000001346         db  0x00 ; '.'
0000000000001347         db  0x00 ; '.'
0000000000001348         db  0x08 ; '.'
0000000000001349         db  0x8e ; '.'
000000000000134a         db  0x21 ; '!'
000000000000134b         db  0x00 ; '.'
000000000000134c         db  0x00 ; '.'
000000000000134d         db  0x00 ; '.'
000000000000134e         db  0x00 ; '.'
000000000000134f         db  0x00 ; '.'
0000000000001350         db  0x07 ; '.'
0000000000001351         db  0x00 ; '.'
0000000000001352         db  0x00 ; '.'
0000000000001353         db  0x00 ; '.'
0000000000001354         db  0x06 ; '.'
0000000000001355         db  0x00 ; '.'
0000000000001356         db  0x00 ; '.'
0000000000001357         db  0x00 ; '.'
0000000000001358         db  0x00 ; '.'
0000000000001359         db  0x00 ; '.'
000000000000135a         db  0x00 ; '.'
000000000000135b         db  0x00 ; '.'
000000000000135c         db  0x00 ; '.'
000000000000135d         db  0x00 ; '.'
000000000000135e         db  0x00 ; '.'
000000000000135f         db  0x00 ; '.'
0000000000001360         db  0x10 ; '.'
0000000000001361         db  0x8e ; '.'
0000000000001362         db  0x21 ; '!'
0000000000001363         db  0x00 ; '.'
0000000000001364         db  0x00 ; '.'
0000000000001365         db  0x00 ; '.'
0000000000001366         db  0x00 ; '.'
0000000000001367         db  0x00 ; '.'
0000000000001368         db  0x07 ; '.'
0000000000001369         db  0x00 ; '.'
000000000000136a         db  0x00 ; '.'
000000000000136b         db  0x00 ; '.'
000000000000136c         db  0x08 ; '.'
000000000000136d         db  0x00 ; '.'
000000000000136e         db  0x00 ; '.'
000000000000136f         db  0x00 ; '.'
0000000000001370         db  0x00 ; '.'
0000000000001371         db  0x00 ; '.'
0000000000001372         db  0x00 ; '.'
0000000000001373         db  0x00 ; '.'
0000000000001374         db  0x00 ; '.'
0000000000001375         db  0x00 ; '.'
0000000000001376         db  0x00 ; '.'
0000000000001377         db  0x00 ; '.'
0000000000001378         db  0x18 ; '.'
0000000000001379         db  0x8e ; '.'
000000000000137a         db  0x21 ; '!'
000000000000137b         db  0x00 ; '.'
000000000000137c         db  0x00 ; '.'
000000000000137d         db  0x00 ; '.'
000000000000137e         db  0x00 ; '.'
000000000000137f         db  0x00 ; '.'
0000000000001380         db  0x07 ; '.'
0000000000001381         db  0x00 ; '.'
0000000000001382         db  0x00 ; '.'
0000000000001383         db  0x00 ; '.'
0000000000001384         db  0x09 ; '.'
0000000000001385         db  0x00 ; '.'
0000000000001386         db  0x00 ; '.'
0000000000001387         db  0x00 ; '.'
0000000000001388         db  0x00 ; '.'
0000000000001389         db  0x00 ; '.'
000000000000138a         db  0x00 ; '.'
000000000000138b         db  0x00 ; '.'
000000000000138c         db  0x00 ; '.'
000000000000138d         db  0x00 ; '.'
000000000000138e         db  0x00 ; '.'
000000000000138f         db  0x00 ; '.'
0000000000001390         db  0x20 ; ' '
0000000000001391         db  0x8e ; '.'
0000000000001392         db  0x21 ; '!'
0000000000001393         db  0x00 ; '.'
0000000000001394         db  0x00 ; '.'
0000000000001395         db  0x00 ; '.'
0000000000001396         db  0x00 ; '.'
0000000000001397         db  0x00 ; '.'
0000000000001398         db  0x07 ; '.'
0000000000001399         db  0x00 ; '.'
000000000000139a         db  0x00 ; '.'
000000000000139b         db  0x00 ; '.'
000000000000139c         db  0x0a ; '.'
000000000000139d         db  0x00 ; '.'
000000000000139e         db  0x00 ; '.'
000000000000139f         db  0x00 ; '.'
00000000000013a0         db  0x00 ; '.'
00000000000013a1         db  0x00 ; '.'
00000000000013a2         db  0x00 ; '.'
00000000000013a3         db  0x00 ; '.'
00000000000013a4         db  0x00 ; '.'
00000000000013a5         db  0x00 ; '.'
00000000000013a6         db  0x00 ; '.'
00000000000013a7         db  0x00 ; '.'
00000000000013a8         db  0x28 ; '('
00000000000013a9         db  0x8e ; '.'
00000000000013aa         db  0x21 ; '!'
00000000000013ab         db  0x00 ; '.'
00000000000013ac         db  0x00 ; '.'
00000000000013ad         db  0x00 ; '.'
00000000000013ae         db  0x00 ; '.'
00000000000013af         db  0x00 ; '.'
00000000000013b0         db  0x07 ; '.'
00000000000013b1         db  0x00 ; '.'
00000000000013b2         db  0x00 ; '.'
00000000000013b3         db  0x00 ; '.'
00000000000013b4         db  0x0b ; '.'
00000000000013b5         db  0x00 ; '.'
00000000000013b6         db  0x00 ; '.'
00000000000013b7         db  0x00 ; '.'
00000000000013b8         db  0x00 ; '.'
00000000000013b9         db  0x00 ; '.'
00000000000013ba         db  0x00 ; '.'
00000000000013bb         db  0x00 ; '.'
00000000000013bc         db  0x00 ; '.'
00000000000013bd         db  0x00 ; '.'
00000000000013be         db  0x00 ; '.'
00000000000013bf         db  0x00 ; '.'
00000000000013c0         db  0x30 ; '0'
00000000000013c1         db  0x8e ; '.'
00000000000013c2         db  0x21 ; '!'
00000000000013c3         db  0x00 ; '.'
00000000000013c4         db  0x00 ; '.'
00000000000013c5         db  0x00 ; '.'
00000000000013c6         db  0x00 ; '.'
00000000000013c7         db  0x00 ; '.'
00000000000013c8         db  0x07 ; '.'
00000000000013c9         db  0x00 ; '.'
00000000000013ca         db  0x00 ; '.'
00000000000013cb         db  0x00 ; '.'
00000000000013cc         db  0x0c ; '.'
00000000000013cd         db  0x00 ; '.'
00000000000013ce         db  0x00 ; '.'
00000000000013cf         db  0x00 ; '.'
00000000000013d0         db  0x00 ; '.'
00000000000013d1         db  0x00 ; '.'
00000000000013d2         db  0x00 ; '.'
00000000000013d3         db  0x00 ; '.'
00000000000013d4         db  0x00 ; '.'
00000000000013d5         db  0x00 ; '.'
00000000000013d6         db  0x00 ; '.'
00000000000013d7         db  0x00 ; '.'
00000000000013d8         db  0x38 ; '8'
00000000000013d9         db  0x8e ; '.'
00000000000013da         db  0x21 ; '!'
00000000000013db         db  0x00 ; '.'
00000000000013dc         db  0x00 ; '.'
00000000000013dd         db  0x00 ; '.'
00000000000013de         db  0x00 ; '.'
00000000000013df         db  0x00 ; '.'
00000000000013e0         db  0x07 ; '.'
00000000000013e1         db  0x00 ; '.'
00000000000013e2         db  0x00 ; '.'
00000000000013e3         db  0x00 ; '.'
00000000000013e4         db  0x0d ; '.'
00000000000013e5         db  0x00 ; '.'
00000000000013e6         db  0x00 ; '.'
00000000000013e7         db  0x00 ; '.'
00000000000013e8         db  0x00 ; '.'
00000000000013e9         db  0x00 ; '.'
00000000000013ea         db  0x00 ; '.'
00000000000013eb         db  0x00 ; '.'
00000000000013ec         db  0x00 ; '.'
00000000000013ed         db  0x00 ; '.'
00000000000013ee         db  0x00 ; '.'
00000000000013ef         db  0x00 ; '.'
00000000000013f0         db  0x40 ; '@'
00000000000013f1         db  0x8e ; '.'
00000000000013f2         db  0x21 ; '!'
00000000000013f3         db  0x00 ; '.'
00000000000013f4         db  0x00 ; '.'
00000000000013f5         db  0x00 ; '.'
00000000000013f6         db  0x00 ; '.'
00000000000013f7         db  0x00 ; '.'
00000000000013f8         db  0x07 ; '.'
00000000000013f9         db  0x00 ; '.'
00000000000013fa         db  0x00 ; '.'
00000000000013fb         db  0x00 ; '.'
00000000000013fc         db  0x0e ; '.'
00000000000013fd         db  0x00 ; '.'
00000000000013fe         db  0x00 ; '.'
00000000000013ff         db  0x00 ; '.'
0000000000001400         db  0x00 ; '.'
0000000000001401         db  0x00 ; '.'
0000000000001402         db  0x00 ; '.'
0000000000001403         db  0x00 ; '.'
0000000000001404         db  0x00 ; '.'
0000000000001405         db  0x00 ; '.'
0000000000001406         db  0x00 ; '.'
0000000000001407         db  0x00 ; '.'
0000000000001408         db  0x48 ; 'H'
0000000000001409         db  0x8e ; '.'
000000000000140a         db  0x21 ; '!'
000000000000140b         db  0x00 ; '.'
000000000000140c         db  0x00 ; '.'
000000000000140d         db  0x00 ; '.'
000000000000140e         db  0x00 ; '.'
000000000000140f         db  0x00 ; '.'
0000000000001410         db  0x07 ; '.'
0000000000001411         db  0x00 ; '.'
0000000000001412         db  0x00 ; '.'
0000000000001413         db  0x00 ; '.'
0000000000001414         db  0x0f ; '.'
0000000000001415         db  0x00 ; '.'
0000000000001416         db  0x00 ; '.'
0000000000001417         db  0x00 ; '.'
0000000000001418         db  0x00 ; '.'
0000000000001419         db  0x00 ; '.'
000000000000141a         db  0x00 ; '.'
000000000000141b         db  0x00 ; '.'
000000000000141c         db  0x00 ; '.'
000000000000141d         db  0x00 ; '.'
000000000000141e         db  0x00 ; '.'
000000000000141f         db  0x00 ; '.'
0000000000001420         db  0x50 ; 'P'
0000000000001421         db  0x8e ; '.'
0000000000001422         db  0x21 ; '!'
0000000000001423         db  0x00 ; '.'
0000000000001424         db  0x00 ; '.'
0000000000001425         db  0x00 ; '.'
0000000000001426         db  0x00 ; '.'
0000000000001427         db  0x00 ; '.'
0000000000001428         db  0x07 ; '.'
0000000000001429         db  0x00 ; '.'
000000000000142a         db  0x00 ; '.'
000000000000142b         db  0x00 ; '.'
000000000000142c         db  0x10 ; '.'
000000000000142d         db  0x00 ; '.'
000000000000142e         db  0x00 ; '.'
000000000000142f         db  0x00 ; '.'
0000000000001430         db  0x00 ; '.'
0000000000001431         db  0x00 ; '.'
0000000000001432         db  0x00 ; '.'
0000000000001433         db  0x00 ; '.'
0000000000001434         db  0x00 ; '.'
0000000000001435         db  0x00 ; '.'
0000000000001436         db  0x00 ; '.'
0000000000001437         db  0x00 ; '.'
0000000000001438         db  0x58 ; 'X'
0000000000001439         db  0x8e ; '.'
000000000000143a         db  0x21 ; '!'
000000000000143b         db  0x00 ; '.'
000000000000143c         db  0x00 ; '.'
000000000000143d         db  0x00 ; '.'
000000000000143e         db  0x00 ; '.'
000000000000143f         db  0x00 ; '.'
0000000000001440         db  0x07 ; '.'
0000000000001441         db  0x00 ; '.'
0000000000001442         db  0x00 ; '.'
0000000000001443         db  0x00 ; '.'
0000000000001444         db  0x11 ; '.'
0000000000001445         db  0x00 ; '.'
0000000000001446         db  0x00 ; '.'
0000000000001447         db  0x00 ; '.'
0000000000001448         db  0x00 ; '.'
0000000000001449         db  0x00 ; '.'
000000000000144a         db  0x00 ; '.'
000000000000144b         db  0x00 ; '.'
000000000000144c         db  0x00 ; '.'
000000000000144d         db  0x00 ; '.'
000000000000144e         db  0x00 ; '.'
000000000000144f         db  0x00 ; '.'
0000000000001450         db  0x60 ; '`'
0000000000001451         db  0x8e ; '.'
0000000000001452         db  0x21 ; '!'
0000000000001453         db  0x00 ; '.'
0000000000001454         db  0x00 ; '.'
0000000000001455         db  0x00 ; '.'
0000000000001456         db  0x00 ; '.'
0000000000001457         db  0x00 ; '.'
0000000000001458         db  0x07 ; '.'
0000000000001459         db  0x00 ; '.'
000000000000145a         db  0x00 ; '.'
000000000000145b         db  0x00 ; '.'
000000000000145c         db  0x12 ; '.'
000000000000145d         db  0x00 ; '.'
000000000000145e         db  0x00 ; '.'
000000000000145f         db  0x00 ; '.'
0000000000001460         db  0x00 ; '.'
0000000000001461         db  0x00 ; '.'
0000000000001462         db  0x00 ; '.'
0000000000001463         db  0x00 ; '.'
0000000000001464         db  0x00 ; '.'
0000000000001465         db  0x00 ; '.'
0000000000001466         db  0x00 ; '.'
0000000000001467         db  0x00 ; '.'
0000000000001468         db  0x68 ; 'h'
0000000000001469         db  0x8e ; '.'
000000000000146a         db  0x21 ; '!'
000000000000146b         db  0x00 ; '.'
000000000000146c         db  0x00 ; '.'
000000000000146d         db  0x00 ; '.'
000000000000146e         db  0x00 ; '.'
000000000000146f         db  0x00 ; '.'
0000000000001470         db  0x07 ; '.'
0000000000001471         db  0x00 ; '.'
0000000000001472         db  0x00 ; '.'
0000000000001473         db  0x00 ; '.'
0000000000001474         db  0x13 ; '.'
0000000000001475         db  0x00 ; '.'
0000000000001476         db  0x00 ; '.'
0000000000001477         db  0x00 ; '.'
0000000000001478         db  0x00 ; '.'
0000000000001479         db  0x00 ; '.'
000000000000147a         db  0x00 ; '.'
000000000000147b         db  0x00 ; '.'
000000000000147c         db  0x00 ; '.'
000000000000147d         db  0x00 ; '.'
000000000000147e         db  0x00 ; '.'
000000000000147f         db  0x00 ; '.'
0000000000001480         db  0x70 ; 'p'
0000000000001481         db  0x8e ; '.'
0000000000001482         db  0x21 ; '!'
0000000000001483         db  0x00 ; '.'
0000000000001484         db  0x00 ; '.'
0000000000001485         db  0x00 ; '.'
0000000000001486         db  0x00 ; '.'
0000000000001487         db  0x00 ; '.'
0000000000001488         db  0x07 ; '.'
0000000000001489         db  0x00 ; '.'
000000000000148a         db  0x00 ; '.'
000000000000148b         db  0x00 ; '.'
000000000000148c         db  0x14 ; '.'
000000000000148d         db  0x00 ; '.'
000000000000148e         db  0x00 ; '.'
000000000000148f         db  0x00 ; '.'
0000000000001490         db  0x00 ; '.'
0000000000001491         db  0x00 ; '.'
0000000000001492         db  0x00 ; '.'
0000000000001493         db  0x00 ; '.'
0000000000001494         db  0x00 ; '.'
0000000000001495         db  0x00 ; '.'
0000000000001496         db  0x00 ; '.'
0000000000001497         db  0x00 ; '.'
0000000000001498         db  0x78 ; 'x'
0000000000001499         db  0x8e ; '.'
000000000000149a         db  0x21 ; '!'
000000000000149b         db  0x00 ; '.'
000000000000149c         db  0x00 ; '.'
000000000000149d         db  0x00 ; '.'
000000000000149e         db  0x00 ; '.'
000000000000149f         db  0x00 ; '.'
00000000000014a0         db  0x07 ; '.'
00000000000014a1         db  0x00 ; '.'
00000000000014a2         db  0x00 ; '.'
00000000000014a3         db  0x00 ; '.'
00000000000014a4         db  0x15 ; '.'
00000000000014a5         db  0x00 ; '.'
00000000000014a6         db  0x00 ; '.'
00000000000014a7         db  0x00 ; '.'
00000000000014a8         db  0x00 ; '.'
00000000000014a9         db  0x00 ; '.'
00000000000014aa         db  0x00 ; '.'
00000000000014ab         db  0x00 ; '.'
00000000000014ac         db  0x00 ; '.'
00000000000014ad         db  0x00 ; '.'
00000000000014ae         db  0x00 ; '.'
00000000000014af         db  0x00 ; '.'
00000000000014b0         db  0x80 ; '.'
00000000000014b1         db  0x8e ; '.'
00000000000014b2         db  0x21 ; '!'
00000000000014b3         db  0x00 ; '.'
00000000000014b4         db  0x00 ; '.'
00000000000014b5         db  0x00 ; '.'
00000000000014b6         db  0x00 ; '.'
00000000000014b7         db  0x00 ; '.'
00000000000014b8         db  0x07 ; '.'
00000000000014b9         db  0x00 ; '.'
00000000000014ba         db  0x00 ; '.'
00000000000014bb         db  0x00 ; '.'
00000000000014bc         db  0x16 ; '.'
00000000000014bd         db  0x00 ; '.'
00000000000014be         db  0x00 ; '.'
00000000000014bf         db  0x00 ; '.'
00000000000014c0         db  0x00 ; '.'
00000000000014c1         db  0x00 ; '.'
00000000000014c2         db  0x00 ; '.'
00000000000014c3         db  0x00 ; '.'
00000000000014c4         db  0x00 ; '.'
00000000000014c5         db  0x00 ; '.'
00000000000014c6         db  0x00 ; '.'
00000000000014c7         db  0x00 ; '.'
00000000000014c8         db  0x88 ; '.'
00000000000014c9         db  0x8e ; '.'
00000000000014ca         db  0x21 ; '!'
00000000000014cb         db  0x00 ; '.'
00000000000014cc         db  0x00 ; '.'
00000000000014cd         db  0x00 ; '.'
00000000000014ce         db  0x00 ; '.'
00000000000014cf         db  0x00 ; '.'
00000000000014d0         db  0x07 ; '.'
00000000000014d1         db  0x00 ; '.'
00000000000014d2         db  0x00 ; '.'
00000000000014d3         db  0x00 ; '.'
00000000000014d4         db  0x17 ; '.'
00000000000014d5         db  0x00 ; '.'
00000000000014d6         db  0x00 ; '.'
00000000000014d7         db  0x00 ; '.'
00000000000014d8         db  0x00 ; '.'
00000000000014d9         db  0x00 ; '.'
00000000000014da         db  0x00 ; '.'
00000000000014db         db  0x00 ; '.'
00000000000014dc         db  0x00 ; '.'
00000000000014dd         db  0x00 ; '.'
00000000000014de         db  0x00 ; '.'
00000000000014df         db  0x00 ; '.'
00000000000014e0         db  0x90 ; '.'
00000000000014e1         db  0x8e ; '.'
00000000000014e2         db  0x21 ; '!'
00000000000014e3         db  0x00 ; '.'
00000000000014e4         db  0x00 ; '.'
00000000000014e5         db  0x00 ; '.'
00000000000014e6         db  0x00 ; '.'
00000000000014e7         db  0x00 ; '.'
00000000000014e8         db  0x07 ; '.'
00000000000014e9         db  0x00 ; '.'
00000000000014ea         db  0x00 ; '.'
00000000000014eb         db  0x00 ; '.'
00000000000014ec         db  0x18 ; '.'
00000000000014ed         db  0x00 ; '.'
00000000000014ee         db  0x00 ; '.'
00000000000014ef         db  0x00 ; '.'
00000000000014f0         db  0x00 ; '.'
00000000000014f1         db  0x00 ; '.'
00000000000014f2         db  0x00 ; '.'
00000000000014f3         db  0x00 ; '.'
00000000000014f4         db  0x00 ; '.'
00000000000014f5         db  0x00 ; '.'
00000000000014f6         db  0x00 ; '.'
00000000000014f7         db  0x00 ; '.'
00000000000014f8         db  0x98 ; '.'
00000000000014f9         db  0x8e ; '.'
00000000000014fa         db  0x21 ; '!'
00000000000014fb         db  0x00 ; '.'
00000000000014fc         db  0x00 ; '.'
00000000000014fd         db  0x00 ; '.'
00000000000014fe         db  0x00 ; '.'
00000000000014ff         db  0x00 ; '.'
0000000000001500         db  0x07 ; '.'
0000000000001501         db  0x00 ; '.'
0000000000001502         db  0x00 ; '.'
0000000000001503         db  0x00 ; '.'
0000000000001504         db  0x19 ; '.'
0000000000001505         db  0x00 ; '.'
0000000000001506         db  0x00 ; '.'
0000000000001507         db  0x00 ; '.'
0000000000001508         db  0x00 ; '.'
0000000000001509         db  0x00 ; '.'
000000000000150a         db  0x00 ; '.'
000000000000150b         db  0x00 ; '.'
000000000000150c         db  0x00 ; '.'
000000000000150d         db  0x00 ; '.'
000000000000150e         db  0x00 ; '.'
000000000000150f         db  0x00 ; '.'
0000000000001510         db  0xa0 ; '.'
0000000000001511         db  0x8e ; '.'
0000000000001512         db  0x21 ; '!'
0000000000001513         db  0x00 ; '.'
0000000000001514         db  0x00 ; '.'
0000000000001515         db  0x00 ; '.'
0000000000001516         db  0x00 ; '.'
0000000000001517         db  0x00 ; '.'
0000000000001518         db  0x07 ; '.'
0000000000001519         db  0x00 ; '.'
000000000000151a         db  0x00 ; '.'
000000000000151b         db  0x00 ; '.'
000000000000151c         db  0x1a ; '.'
000000000000151d         db  0x00 ; '.'
000000000000151e         db  0x00 ; '.'
000000000000151f         db  0x00 ; '.'
0000000000001520         db  0x00 ; '.'
0000000000001521         db  0x00 ; '.'
0000000000001522         db  0x00 ; '.'
0000000000001523         db  0x00 ; '.'
0000000000001524         db  0x00 ; '.'
0000000000001525         db  0x00 ; '.'
0000000000001526         db  0x00 ; '.'
0000000000001527         db  0x00 ; '.'
0000000000001528         db  0xa8 ; '.'
0000000000001529         db  0x8e ; '.'
000000000000152a         db  0x21 ; '!'
000000000000152b         db  0x00 ; '.'
000000000000152c         db  0x00 ; '.'
000000000000152d         db  0x00 ; '.'
000000000000152e         db  0x00 ; '.'
000000000000152f         db  0x00 ; '.'
0000000000001530         db  0x07 ; '.'
0000000000001531         db  0x00 ; '.'
0000000000001532         db  0x00 ; '.'
0000000000001533         db  0x00 ; '.'
0000000000001534         db  0x1b ; '.'
0000000000001535         db  0x00 ; '.'
0000000000001536         db  0x00 ; '.'
0000000000001537         db  0x00 ; '.'
0000000000001538         db  0x00 ; '.'
0000000000001539         db  0x00 ; '.'
000000000000153a         db  0x00 ; '.'
000000000000153b         db  0x00 ; '.'
000000000000153c         db  0x00 ; '.'
000000000000153d         db  0x00 ; '.'
000000000000153e         db  0x00 ; '.'
000000000000153f         db  0x00 ; '.'
0000000000001540         db  0xb0 ; '.'
0000000000001541         db  0x8e ; '.'
0000000000001542         db  0x21 ; '!'
0000000000001543         db  0x00 ; '.'
0000000000001544         db  0x00 ; '.'
0000000000001545         db  0x00 ; '.'
0000000000001546         db  0x00 ; '.'
0000000000001547         db  0x00 ; '.'
0000000000001548         db  0x07 ; '.'
0000000000001549         db  0x00 ; '.'
000000000000154a         db  0x00 ; '.'
000000000000154b         db  0x00 ; '.'
000000000000154c         db  0x1c ; '.'
000000000000154d         db  0x00 ; '.'
000000000000154e         db  0x00 ; '.'
000000000000154f         db  0x00 ; '.'
0000000000001550         db  0x00 ; '.'
0000000000001551         db  0x00 ; '.'
0000000000001552         db  0x00 ; '.'
0000000000001553         db  0x00 ; '.'
0000000000001554         db  0x00 ; '.'
0000000000001555         db  0x00 ; '.'
0000000000001556         db  0x00 ; '.'
0000000000001557         db  0x00 ; '.'
0000000000001558         db  0xb8 ; '.'
0000000000001559         db  0x8e ; '.'
000000000000155a         db  0x21 ; '!'
000000000000155b         db  0x00 ; '.'
000000000000155c         db  0x00 ; '.'
000000000000155d         db  0x00 ; '.'
000000000000155e         db  0x00 ; '.'
000000000000155f         db  0x00 ; '.'
0000000000001560         db  0x07 ; '.'
0000000000001561         db  0x00 ; '.'
0000000000001562         db  0x00 ; '.'
0000000000001563         db  0x00 ; '.'
0000000000001564         db  0x1d ; '.'
0000000000001565         db  0x00 ; '.'
0000000000001566         db  0x00 ; '.'
0000000000001567         db  0x00 ; '.'
0000000000001568         db  0x00 ; '.'
0000000000001569         db  0x00 ; '.'
000000000000156a         db  0x00 ; '.'
000000000000156b         db  0x00 ; '.'
000000000000156c         db  0x00 ; '.'
000000000000156d         db  0x00 ; '.'
000000000000156e         db  0x00 ; '.'
000000000000156f         db  0x00 ; '.'
0000000000001570         db  0xc0 ; '.'
0000000000001571         db  0x8e ; '.'
0000000000001572         db  0x21 ; '!'
0000000000001573         db  0x00 ; '.'
0000000000001574         db  0x00 ; '.'
0000000000001575         db  0x00 ; '.'
0000000000001576         db  0x00 ; '.'
0000000000001577         db  0x00 ; '.'
0000000000001578         db  0x07 ; '.'
0000000000001579         db  0x00 ; '.'
000000000000157a         db  0x00 ; '.'
000000000000157b         db  0x00 ; '.'
000000000000157c         db  0x1e ; '.'
000000000000157d         db  0x00 ; '.'
000000000000157e         db  0x00 ; '.'
000000000000157f         db  0x00 ; '.'
0000000000001580         db  0x00 ; '.'
0000000000001581         db  0x00 ; '.'
0000000000001582         db  0x00 ; '.'
0000000000001583         db  0x00 ; '.'
0000000000001584         db  0x00 ; '.'
0000000000001585         db  0x00 ; '.'
0000000000001586         db  0x00 ; '.'
0000000000001587         db  0x00 ; '.'
0000000000001588         db  0xc8 ; '.'
0000000000001589         db  0x8e ; '.'
000000000000158a         db  0x21 ; '!'
000000000000158b         db  0x00 ; '.'
000000000000158c         db  0x00 ; '.'
000000000000158d         db  0x00 ; '.'
000000000000158e         db  0x00 ; '.'
000000000000158f         db  0x00 ; '.'
0000000000001590         db  0x07 ; '.'
0000000000001591         db  0x00 ; '.'
0000000000001592         db  0x00 ; '.'
0000000000001593         db  0x00 ; '.'
0000000000001594         db  0x20 ; ' '
0000000000001595         db  0x00 ; '.'
0000000000001596         db  0x00 ; '.'
0000000000001597         db  0x00 ; '.'
0000000000001598         db  0x00 ; '.'
0000000000001599         db  0x00 ; '.'
000000000000159a         db  0x00 ; '.'
000000000000159b         db  0x00 ; '.'
000000000000159c         db  0x00 ; '.'
000000000000159d         db  0x00 ; '.'
000000000000159e         db  0x00 ; '.'
000000000000159f         db  0x00 ; '.'
00000000000015a0         db  0xd0 ; '.'
00000000000015a1         db  0x8e ; '.'
00000000000015a2         db  0x21 ; '!'
00000000000015a3         db  0x00 ; '.'
00000000000015a4         db  0x00 ; '.'
00000000000015a5         db  0x00 ; '.'
00000000000015a6         db  0x00 ; '.'
00000000000015a7         db  0x00 ; '.'
00000000000015a8         db  0x07 ; '.'
00000000000015a9         db  0x00 ; '.'
00000000000015aa         db  0x00 ; '.'
00000000000015ab         db  0x00 ; '.'
00000000000015ac         db  0x21 ; '!'
00000000000015ad         db  0x00 ; '.'
00000000000015ae         db  0x00 ; '.'
00000000000015af         db  0x00 ; '.'
00000000000015b0         db  0x00 ; '.'
00000000000015b1         db  0x00 ; '.'
00000000000015b2         db  0x00 ; '.'
00000000000015b3         db  0x00 ; '.'
00000000000015b4         db  0x00 ; '.'
00000000000015b5         db  0x00 ; '.'
00000000000015b6         db  0x00 ; '.'
00000000000015b7         db  0x00 ; '.'
00000000000015b8         db  0xd8 ; '.'
00000000000015b9         db  0x8e ; '.'
00000000000015ba         db  0x21 ; '!'
00000000000015bb         db  0x00 ; '.'
00000000000015bc         db  0x00 ; '.'
00000000000015bd         db  0x00 ; '.'
00000000000015be         db  0x00 ; '.'
00000000000015bf         db  0x00 ; '.'
00000000000015c0         db  0x07 ; '.'
00000000000015c1         db  0x00 ; '.'
00000000000015c2         db  0x00 ; '.'
00000000000015c3         db  0x00 ; '.'
00000000000015c4         db  0x22 ; '"'
00000000000015c5         db  0x00 ; '.'
00000000000015c6         db  0x00 ; '.'
00000000000015c7         db  0x00 ; '.'
00000000000015c8         db  0x00 ; '.'
00000000000015c9         db  0x00 ; '.'
00000000000015ca         db  0x00 ; '.'
00000000000015cb         db  0x00 ; '.'
00000000000015cc         db  0x00 ; '.'
00000000000015cd         db  0x00 ; '.'
00000000000015ce         db  0x00 ; '.'
00000000000015cf         db  0x00 ; '.'
00000000000015d0         db  0xe0 ; '.'
00000000000015d1         db  0x8e ; '.'
00000000000015d2         db  0x21 ; '!'
00000000000015d3         db  0x00 ; '.'
00000000000015d4         db  0x00 ; '.'
00000000000015d5         db  0x00 ; '.'
00000000000015d6         db  0x00 ; '.'
00000000000015d7         db  0x00 ; '.'
00000000000015d8         db  0x07 ; '.'
00000000000015d9         db  0x00 ; '.'
00000000000015da         db  0x00 ; '.'
00000000000015db         db  0x00 ; '.'
00000000000015dc         db  0x23 ; '#'
00000000000015dd         db  0x00 ; '.'
00000000000015de         db  0x00 ; '.'
00000000000015df         db  0x00 ; '.'
00000000000015e0         db  0x00 ; '.'
00000000000015e1         db  0x00 ; '.'
00000000000015e2         db  0x00 ; '.'
00000000000015e3         db  0x00 ; '.'
00000000000015e4         db  0x00 ; '.'
00000000000015e5         db  0x00 ; '.'
00000000000015e6         db  0x00 ; '.'
00000000000015e7         db  0x00 ; '.'
00000000000015e8         db  0xe8 ; '.'
00000000000015e9         db  0x8e ; '.'
00000000000015ea         db  0x21 ; '!'
00000000000015eb         db  0x00 ; '.'
00000000000015ec         db  0x00 ; '.'
00000000000015ed         db  0x00 ; '.'
00000000000015ee         db  0x00 ; '.'
00000000000015ef         db  0x00 ; '.'
00000000000015f0         db  0x07 ; '.'
00000000000015f1         db  0x00 ; '.'
00000000000015f2         db  0x00 ; '.'
00000000000015f3         db  0x00 ; '.'
00000000000015f4         db  0x24 ; '$'
00000000000015f5         db  0x00 ; '.'
00000000000015f6         db  0x00 ; '.'
00000000000015f7         db  0x00 ; '.'
00000000000015f8         db  0x00 ; '.'
00000000000015f9         db  0x00 ; '.'
00000000000015fa         db  0x00 ; '.'
00000000000015fb         db  0x00 ; '.'
00000000000015fc         db  0x00 ; '.'
00000000000015fd         db  0x00 ; '.'
00000000000015fe         db  0x00 ; '.'
00000000000015ff         db  0x00 ; '.'
0000000000001600         db  0xf0 ; '.'
0000000000001601         db  0x8e ; '.'
0000000000001602         db  0x21 ; '!'
0000000000001603         db  0x00 ; '.'
0000000000001604         db  0x00 ; '.'
0000000000001605         db  0x00 ; '.'
0000000000001606         db  0x00 ; '.'
0000000000001607         db  0x00 ; '.'
0000000000001608         db  0x07 ; '.'
0000000000001609         db  0x00 ; '.'
000000000000160a         db  0x00 ; '.'
000000000000160b         db  0x00 ; '.'
000000000000160c         db  0x26 ; '&'
000000000000160d         db  0x00 ; '.'
000000000000160e         db  0x00 ; '.'
000000000000160f         db  0x00 ; '.'
0000000000001610         db  0x00 ; '.'
0000000000001611         db  0x00 ; '.'
0000000000001612         db  0x00 ; '.'
0000000000001613         db  0x00 ; '.'
0000000000001614         db  0x00 ; '.'
0000000000001615         db  0x00 ; '.'
0000000000001616         db  0x00 ; '.'
0000000000001617         db  0x00 ; '.'
0000000000001618         db  0xf8 ; '.'
0000000000001619         db  0x8e ; '.'
000000000000161a         db  0x21 ; '!'
000000000000161b         db  0x00 ; '.'
000000000000161c         db  0x00 ; '.'
000000000000161d         db  0x00 ; '.'
000000000000161e         db  0x00 ; '.'
000000000000161f         db  0x00 ; '.'
0000000000001620         db  0x07 ; '.'
0000000000001621         db  0x00 ; '.'
0000000000001622         db  0x00 ; '.'
0000000000001623         db  0x00 ; '.'
0000000000001624         db  0x27 ; '''
0000000000001625         db  0x00 ; '.'
0000000000001626         db  0x00 ; '.'
0000000000001627         db  0x00 ; '.'
0000000000001628         db  0x00 ; '.'
0000000000001629         db  0x00 ; '.'
000000000000162a         db  0x00 ; '.'
000000000000162b         db  0x00 ; '.'
000000000000162c         db  0x00 ; '.'
000000000000162d         db  0x00 ; '.'
000000000000162e         db  0x00 ; '.'
000000000000162f         db  0x00 ; '.'
0000000000001630         db  0x00 ; '.'
0000000000001631         db  0x8f ; '.'
0000000000001632         db  0x21 ; '!'
0000000000001633         db  0x00 ; '.'
0000000000001634         db  0x00 ; '.'
0000000000001635         db  0x00 ; '.'
0000000000001636         db  0x00 ; '.'
0000000000001637         db  0x00 ; '.'
0000000000001638         db  0x07 ; '.'
0000000000001639         db  0x00 ; '.'
000000000000163a         db  0x00 ; '.'
000000000000163b         db  0x00 ; '.'
000000000000163c         db  0x28 ; '('
000000000000163d         db  0x00 ; '.'
000000000000163e         db  0x00 ; '.'
000000000000163f         db  0x00 ; '.'
0000000000001640         db  0x00 ; '.'
0000000000001641         db  0x00 ; '.'
0000000000001642         db  0x00 ; '.'
0000000000001643         db  0x00 ; '.'
0000000000001644         db  0x00 ; '.'
0000000000001645         db  0x00 ; '.'
0000000000001646         db  0x00 ; '.'
0000000000001647         db  0x00 ; '.'
0000000000001648         db  0x08 ; '.'
0000000000001649         db  0x8f ; '.'
000000000000164a         db  0x21 ; '!'
000000000000164b         db  0x00 ; '.'
000000000000164c         db  0x00 ; '.'
000000000000164d         db  0x00 ; '.'
000000000000164e         db  0x00 ; '.'
000000000000164f         db  0x00 ; '.'
0000000000001650         db  0x07 ; '.'
0000000000001651         db  0x00 ; '.'
0000000000001652         db  0x00 ; '.'
0000000000001653         db  0x00 ; '.'
0000000000001654         db  0x29 ; ')'
0000000000001655         db  0x00 ; '.'
0000000000001656         db  0x00 ; '.'
0000000000001657         db  0x00 ; '.'
0000000000001658         db  0x00 ; '.'
0000000000001659         db  0x00 ; '.'
000000000000165a         db  0x00 ; '.'
000000000000165b         db  0x00 ; '.'
000000000000165c         db  0x00 ; '.'
000000000000165d         db  0x00 ; '.'
000000000000165e         db  0x00 ; '.'
000000000000165f         db  0x00 ; '.'
0000000000001660         db  0x10 ; '.'
0000000000001661         db  0x8f ; '.'
0000000000001662         db  0x21 ; '!'
0000000000001663         db  0x00 ; '.'
0000000000001664         db  0x00 ; '.'
0000000000001665         db  0x00 ; '.'
0000000000001666         db  0x00 ; '.'
0000000000001667         db  0x00 ; '.'
0000000000001668         db  0x07 ; '.'
0000000000001669         db  0x00 ; '.'
000000000000166a         db  0x00 ; '.'
000000000000166b         db  0x00 ; '.'
000000000000166c         db  0x2a ; '*'
000000000000166d         db  0x00 ; '.'
000000000000166e         db  0x00 ; '.'
000000000000166f         db  0x00 ; '.'
0000000000001670         db  0x00 ; '.'
0000000000001671         db  0x00 ; '.'
0000000000001672         db  0x00 ; '.'
0000000000001673         db  0x00 ; '.'
0000000000001674         db  0x00 ; '.'
0000000000001675         db  0x00 ; '.'
0000000000001676         db  0x00 ; '.'
0000000000001677         db  0x00 ; '.'
0000000000001678         db  0x18 ; '.'
0000000000001679         db  0x8f ; '.'
000000000000167a         db  0x21 ; '!'
000000000000167b         db  0x00 ; '.'
000000000000167c         db  0x00 ; '.'
000000000000167d         db  0x00 ; '.'
000000000000167e         db  0x00 ; '.'
000000000000167f         db  0x00 ; '.'
0000000000001680         db  0x07 ; '.'
0000000000001681         db  0x00 ; '.'
0000000000001682         db  0x00 ; '.'
0000000000001683         db  0x00 ; '.'
0000000000001684         db  0x2b ; '+'
0000000000001685         db  0x00 ; '.'
0000000000001686         db  0x00 ; '.'
0000000000001687         db  0x00 ; '.'
0000000000001688         db  0x00 ; '.'
0000000000001689         db  0x00 ; '.'
000000000000168a         db  0x00 ; '.'
000000000000168b         db  0x00 ; '.'
000000000000168c         db  0x00 ; '.'
000000000000168d         db  0x00 ; '.'
000000000000168e         db  0x00 ; '.'
000000000000168f         db  0x00 ; '.'
0000000000001690         db  0x20 ; ' '
0000000000001691         db  0x8f ; '.'
0000000000001692         db  0x21 ; '!'
0000000000001693         db  0x00 ; '.'
0000000000001694         db  0x00 ; '.'
0000000000001695         db  0x00 ; '.'
0000000000001696         db  0x00 ; '.'
0000000000001697         db  0x00 ; '.'
0000000000001698         db  0x07 ; '.'
0000000000001699         db  0x00 ; '.'
000000000000169a         db  0x00 ; '.'
000000000000169b         db  0x00 ; '.'
000000000000169c         db  0x2c ; ','
000000000000169d         db  0x00 ; '.'
000000000000169e         db  0x00 ; '.'
000000000000169f         db  0x00 ; '.'
00000000000016a0         db  0x00 ; '.'
00000000000016a1         db  0x00 ; '.'
00000000000016a2         db  0x00 ; '.'
00000000000016a3         db  0x00 ; '.'
00000000000016a4         db  0x00 ; '.'
00000000000016a5         db  0x00 ; '.'
00000000000016a6         db  0x00 ; '.'
00000000000016a7         db  0x00 ; '.'
00000000000016a8         db  0x28 ; '('
00000000000016a9         db  0x8f ; '.'
00000000000016aa         db  0x21 ; '!'
00000000000016ab         db  0x00 ; '.'
00000000000016ac         db  0x00 ; '.'
00000000000016ad         db  0x00 ; '.'
00000000000016ae         db  0x00 ; '.'
00000000000016af         db  0x00 ; '.'
00000000000016b0         db  0x07 ; '.'
00000000000016b1         db  0x00 ; '.'
00000000000016b2         db  0x00 ; '.'
00000000000016b3         db  0x00 ; '.'
00000000000016b4         db  0x2d ; '-'
00000000000016b5         db  0x00 ; '.'
00000000000016b6         db  0x00 ; '.'
00000000000016b7         db  0x00 ; '.'
00000000000016b8         db  0x00 ; '.'
00000000000016b9         db  0x00 ; '.'
00000000000016ba         db  0x00 ; '.'
00000000000016bb         db  0x00 ; '.'
00000000000016bc         db  0x00 ; '.'
00000000000016bd         db  0x00 ; '.'
00000000000016be         db  0x00 ; '.'
00000000000016bf         db  0x00 ; '.'
00000000000016c0         db  0x30 ; '0'
00000000000016c1         db  0x8f ; '.'
00000000000016c2         db  0x21 ; '!'
00000000000016c3         db  0x00 ; '.'
00000000000016c4         db  0x00 ; '.'
00000000000016c5         db  0x00 ; '.'
00000000000016c6         db  0x00 ; '.'
00000000000016c7         db  0x00 ; '.'
00000000000016c8         db  0x07 ; '.'
00000000000016c9         db  0x00 ; '.'
00000000000016ca         db  0x00 ; '.'
00000000000016cb         db  0x00 ; '.'
00000000000016cc         db  0x2e ; '.'
00000000000016cd         db  0x00 ; '.'
00000000000016ce         db  0x00 ; '.'
00000000000016cf         db  0x00 ; '.'
00000000000016d0         db  0x00 ; '.'
00000000000016d1         db  0x00 ; '.'
00000000000016d2         db  0x00 ; '.'
00000000000016d3         db  0x00 ; '.'
00000000000016d4         db  0x00 ; '.'
00000000000016d5         db  0x00 ; '.'
00000000000016d6         db  0x00 ; '.'
00000000000016d7         db  0x00 ; '.'
00000000000016d8         db  0x38 ; '8'
00000000000016d9         db  0x8f ; '.'
00000000000016da         db  0x21 ; '!'
00000000000016db         db  0x00 ; '.'
00000000000016dc         db  0x00 ; '.'
00000000000016dd         db  0x00 ; '.'
00000000000016de         db  0x00 ; '.'
00000000000016df         db  0x00 ; '.'
00000000000016e0         db  0x07 ; '.'
00000000000016e1         db  0x00 ; '.'
00000000000016e2         db  0x00 ; '.'
00000000000016e3         db  0x00 ; '.'
00000000000016e4         db  0x2f ; '/'
00000000000016e5         db  0x00 ; '.'
00000000000016e6         db  0x00 ; '.'
00000000000016e7         db  0x00 ; '.'
00000000000016e8         db  0x00 ; '.'
00000000000016e9         db  0x00 ; '.'
00000000000016ea         db  0x00 ; '.'
00000000000016eb         db  0x00 ; '.'
00000000000016ec         db  0x00 ; '.'
00000000000016ed         db  0x00 ; '.'
00000000000016ee         db  0x00 ; '.'
00000000000016ef         db  0x00 ; '.'
00000000000016f0         db  0x40 ; '@'
00000000000016f1         db  0x8f ; '.'
00000000000016f2         db  0x21 ; '!'
00000000000016f3         db  0x00 ; '.'
00000000000016f4         db  0x00 ; '.'
00000000000016f5         db  0x00 ; '.'
00000000000016f6         db  0x00 ; '.'
00000000000016f7         db  0x00 ; '.'
00000000000016f8         db  0x07 ; '.'
00000000000016f9         db  0x00 ; '.'
00000000000016fa         db  0x00 ; '.'
00000000000016fb         db  0x00 ; '.'
00000000000016fc         db  0x30 ; '0'
00000000000016fd         db  0x00 ; '.'
00000000000016fe         db  0x00 ; '.'
00000000000016ff         db  0x00 ; '.'
0000000000001700         db  0x00 ; '.'
0000000000001701         db  0x00 ; '.'
0000000000001702         db  0x00 ; '.'
0000000000001703         db  0x00 ; '.'
0000000000001704         db  0x00 ; '.'
0000000000001705         db  0x00 ; '.'
0000000000001706         db  0x00 ; '.'
0000000000001707         db  0x00 ; '.'
0000000000001708         db  0x48 ; 'H'
0000000000001709         db  0x8f ; '.'
000000000000170a         db  0x21 ; '!'
000000000000170b         db  0x00 ; '.'
000000000000170c         db  0x00 ; '.'
000000000000170d         db  0x00 ; '.'
000000000000170e         db  0x00 ; '.'
000000000000170f         db  0x00 ; '.'
0000000000001710         db  0x07 ; '.'
0000000000001711         db  0x00 ; '.'
0000000000001712         db  0x00 ; '.'
0000000000001713         db  0x00 ; '.'
0000000000001714         db  0x31 ; '1'
0000000000001715         db  0x00 ; '.'
0000000000001716         db  0x00 ; '.'
0000000000001717         db  0x00 ; '.'
0000000000001718         db  0x00 ; '.'
0000000000001719         db  0x00 ; '.'
000000000000171a         db  0x00 ; '.'
000000000000171b         db  0x00 ; '.'
000000000000171c         db  0x00 ; '.'
000000000000171d         db  0x00 ; '.'
000000000000171e         db  0x00 ; '.'
000000000000171f         db  0x00 ; '.'
0000000000001720         db  0x50 ; 'P'
0000000000001721         db  0x8f ; '.'
0000000000001722         db  0x21 ; '!'
0000000000001723         db  0x00 ; '.'
0000000000001724         db  0x00 ; '.'
0000000000001725         db  0x00 ; '.'
0000000000001726         db  0x00 ; '.'
0000000000001727         db  0x00 ; '.'
0000000000001728         db  0x07 ; '.'
0000000000001729         db  0x00 ; '.'
000000000000172a         db  0x00 ; '.'
000000000000172b         db  0x00 ; '.'
000000000000172c         db  0x32 ; '2'
000000000000172d         db  0x00 ; '.'
000000000000172e         db  0x00 ; '.'
000000000000172f         db  0x00 ; '.'
0000000000001730         db  0x00 ; '.'
0000000000001731         db  0x00 ; '.'
0000000000001732         db  0x00 ; '.'
0000000000001733         db  0x00 ; '.'
0000000000001734         db  0x00 ; '.'
0000000000001735         db  0x00 ; '.'
0000000000001736         db  0x00 ; '.'
0000000000001737         db  0x00 ; '.'
0000000000001738         db  0x58 ; 'X'
0000000000001739         db  0x8f ; '.'
000000000000173a         db  0x21 ; '!'
000000000000173b         db  0x00 ; '.'
000000000000173c         db  0x00 ; '.'
000000000000173d         db  0x00 ; '.'
000000000000173e         db  0x00 ; '.'
000000000000173f         db  0x00 ; '.'
0000000000001740         db  0x07 ; '.'
0000000000001741         db  0x00 ; '.'
0000000000001742         db  0x00 ; '.'
0000000000001743         db  0x00 ; '.'
0000000000001744         db  0x33 ; '3'
0000000000001745         db  0x00 ; '.'
0000000000001746         db  0x00 ; '.'
0000000000001747         db  0x00 ; '.'
0000000000001748         db  0x00 ; '.'
0000000000001749         db  0x00 ; '.'
000000000000174a         db  0x00 ; '.'
000000000000174b         db  0x00 ; '.'
000000000000174c         db  0x00 ; '.'
000000000000174d         db  0x00 ; '.'
000000000000174e         db  0x00 ; '.'
000000000000174f         db  0x00 ; '.'
0000000000001750         db  0x60 ; '`'
0000000000001751         db  0x8f ; '.'
0000000000001752         db  0x21 ; '!'
0000000000001753         db  0x00 ; '.'
0000000000001754         db  0x00 ; '.'
0000000000001755         db  0x00 ; '.'
0000000000001756         db  0x00 ; '.'
0000000000001757         db  0x00 ; '.'
0000000000001758         db  0x07 ; '.'
0000000000001759         db  0x00 ; '.'
000000000000175a         db  0x00 ; '.'
000000000000175b         db  0x00 ; '.'
000000000000175c         db  0x34 ; '4'
000000000000175d         db  0x00 ; '.'
000000000000175e         db  0x00 ; '.'
000000000000175f         db  0x00 ; '.'
0000000000001760         db  0x00 ; '.'
0000000000001761         db  0x00 ; '.'
0000000000001762         db  0x00 ; '.'
0000000000001763         db  0x00 ; '.'
0000000000001764         db  0x00 ; '.'
0000000000001765         db  0x00 ; '.'
0000000000001766         db  0x00 ; '.'
0000000000001767         db  0x00 ; '.'
0000000000001768         db  0x68 ; 'h'
0000000000001769         db  0x8f ; '.'
000000000000176a         db  0x21 ; '!'
000000000000176b         db  0x00 ; '.'
000000000000176c         db  0x00 ; '.'
000000000000176d         db  0x00 ; '.'
000000000000176e         db  0x00 ; '.'
000000000000176f         db  0x00 ; '.'
0000000000001770         db  0x07 ; '.'
0000000000001771         db  0x00 ; '.'
0000000000001772         db  0x00 ; '.'
0000000000001773         db  0x00 ; '.'
0000000000001774         db  0x35 ; '5'
0000000000001775         db  0x00 ; '.'
0000000000001776         db  0x00 ; '.'
0000000000001777         db  0x00 ; '.'
0000000000001778         db  0x00 ; '.'
0000000000001779         db  0x00 ; '.'
000000000000177a         db  0x00 ; '.'
000000000000177b         db  0x00 ; '.'
000000000000177c         db  0x00 ; '.'
000000000000177d         db  0x00 ; '.'
000000000000177e         db  0x00 ; '.'
000000000000177f         db  0x00 ; '.'
0000000000001780         db  0x70 ; 'p'
0000000000001781         db  0x8f ; '.'
0000000000001782         db  0x21 ; '!'
0000000000001783         db  0x00 ; '.'
0000000000001784         db  0x00 ; '.'
0000000000001785         db  0x00 ; '.'
0000000000001786         db  0x00 ; '.'
0000000000001787         db  0x00 ; '.'
0000000000001788         db  0x07 ; '.'
0000000000001789         db  0x00 ; '.'
000000000000178a         db  0x00 ; '.'
000000000000178b         db  0x00 ; '.'
000000000000178c         db  0x36 ; '6'
000000000000178d         db  0x00 ; '.'
000000000000178e         db  0x00 ; '.'
000000000000178f         db  0x00 ; '.'
0000000000001790         db  0x00 ; '.'
0000000000001791         db  0x00 ; '.'
0000000000001792         db  0x00 ; '.'
0000000000001793         db  0x00 ; '.'
0000000000001794         db  0x00 ; '.'
0000000000001795         db  0x00 ; '.'
0000000000001796         db  0x00 ; '.'
0000000000001797         db  0x00 ; '.'
0000000000001798         db  0x78 ; 'x'
0000000000001799         db  0x8f ; '.'
000000000000179a         db  0x21 ; '!'
000000000000179b         db  0x00 ; '.'
000000000000179c         db  0x00 ; '.'
000000000000179d         db  0x00 ; '.'
000000000000179e         db  0x00 ; '.'
000000000000179f         db  0x00 ; '.'
00000000000017a0         db  0x07 ; '.'
00000000000017a1         db  0x00 ; '.'
00000000000017a2         db  0x00 ; '.'
00000000000017a3         db  0x00 ; '.'
00000000000017a4         db  0x37 ; '7'
00000000000017a5         db  0x00 ; '.'
00000000000017a6         db  0x00 ; '.'
00000000000017a7         db  0x00 ; '.'
00000000000017a8         db  0x00 ; '.'
00000000000017a9         db  0x00 ; '.'
00000000000017aa         db  0x00 ; '.'
00000000000017ab         db  0x00 ; '.'
00000000000017ac         db  0x00 ; '.'
00000000000017ad         db  0x00 ; '.'
00000000000017ae         db  0x00 ; '.'
00000000000017af         db  0x00 ; '.'
00000000000017b0         db  0x80 ; '.'
00000000000017b1         db  0x8f ; '.'
00000000000017b2         db  0x21 ; '!'
00000000000017b3         db  0x00 ; '.'
00000000000017b4         db  0x00 ; '.'
00000000000017b5         db  0x00 ; '.'
00000000000017b6         db  0x00 ; '.'
00000000000017b7         db  0x00 ; '.'
00000000000017b8         db  0x07 ; '.'
00000000000017b9         db  0x00 ; '.'
00000000000017ba         db  0x00 ; '.'
00000000000017bb         db  0x00 ; '.'
00000000000017bc         db  0x38 ; '8'
00000000000017bd         db  0x00 ; '.'
00000000000017be         db  0x00 ; '.'
00000000000017bf         db  0x00 ; '.'
00000000000017c0         db  0x00 ; '.'
00000000000017c1         db  0x00 ; '.'
00000000000017c2         db  0x00 ; '.'
00000000000017c3         db  0x00 ; '.'
00000000000017c4         db  0x00 ; '.'
00000000000017c5         db  0x00 ; '.'
00000000000017c6         db  0x00 ; '.'
00000000000017c7         db  0x00 ; '.'
00000000000017c8         db  0x88 ; '.'
00000000000017c9         db  0x8f ; '.'
00000000000017ca         db  0x21 ; '!'
00000000000017cb         db  0x00 ; '.'
00000000000017cc         db  0x00 ; '.'
00000000000017cd         db  0x00 ; '.'
00000000000017ce         db  0x00 ; '.'
00000000000017cf         db  0x00 ; '.'
00000000000017d0         db  0x07 ; '.'
00000000000017d1         db  0x00 ; '.'
00000000000017d2         db  0x00 ; '.'
00000000000017d3         db  0x00 ; '.'
00000000000017d4         db  0x39 ; '9'
00000000000017d5         db  0x00 ; '.'
00000000000017d6         db  0x00 ; '.'
00000000000017d7         db  0x00 ; '.'
00000000000017d8         db  0x00 ; '.'
00000000000017d9         db  0x00 ; '.'
00000000000017da         db  0x00 ; '.'
00000000000017db         db  0x00 ; '.'
00000000000017dc         db  0x00 ; '.'
00000000000017dd         db  0x00 ; '.'
00000000000017de         db  0x00 ; '.'
00000000000017df         db  0x00 ; '.'
00000000000017e0         db  0x90 ; '.'
00000000000017e1         db  0x8f ; '.'
00000000000017e2         db  0x21 ; '!'
00000000000017e3         db  0x00 ; '.'
00000000000017e4         db  0x00 ; '.'
00000000000017e5         db  0x00 ; '.'
00000000000017e6         db  0x00 ; '.'
00000000000017e7         db  0x00 ; '.'
00000000000017e8         db  0x07 ; '.'
00000000000017e9         db  0x00 ; '.'
00000000000017ea         db  0x00 ; '.'
00000000000017eb         db  0x00 ; '.'
00000000000017ec         db  0x3a ; ':'
00000000000017ed         db  0x00 ; '.'
00000000000017ee         db  0x00 ; '.'
00000000000017ef         db  0x00 ; '.'
00000000000017f0         db  0x00 ; '.'
00000000000017f1         db  0x00 ; '.'
00000000000017f2         db  0x00 ; '.'
00000000000017f3         db  0x00 ; '.'
00000000000017f4         db  0x00 ; '.'
00000000000017f5         db  0x00 ; '.'
00000000000017f6         db  0x00 ; '.'
00000000000017f7         db  0x00 ; '.'
00000000000017f8         db  0x98 ; '.'
00000000000017f9         db  0x8f ; '.'
00000000000017fa         db  0x21 ; '!'
00000000000017fb         db  0x00 ; '.'
00000000000017fc         db  0x00 ; '.'
00000000000017fd         db  0x00 ; '.'
00000000000017fe         db  0x00 ; '.'
00000000000017ff         db  0x00 ; '.'
0000000000001800         db  0x07 ; '.'
0000000000001801         db  0x00 ; '.'
0000000000001802         db  0x00 ; '.'
0000000000001803         db  0x00 ; '.'
0000000000001804         db  0x3b ; ';'
0000000000001805         db  0x00 ; '.'
0000000000001806         db  0x00 ; '.'
0000000000001807         db  0x00 ; '.'
0000000000001808         db  0x00 ; '.'
0000000000001809         db  0x00 ; '.'
000000000000180a         db  0x00 ; '.'
000000000000180b         db  0x00 ; '.'
000000000000180c         db  0x00 ; '.'
000000000000180d         db  0x00 ; '.'
000000000000180e         db  0x00 ; '.'
000000000000180f         db  0x00 ; '.'
0000000000001810         db  0xa0 ; '.'
0000000000001811         db  0x8f ; '.'
0000000000001812         db  0x21 ; '!'
0000000000001813         db  0x00 ; '.'
0000000000001814         db  0x00 ; '.'
0000000000001815         db  0x00 ; '.'
0000000000001816         db  0x00 ; '.'
0000000000001817         db  0x00 ; '.'
0000000000001818         db  0x07 ; '.'
0000000000001819         db  0x00 ; '.'
000000000000181a         db  0x00 ; '.'
000000000000181b         db  0x00 ; '.'
000000000000181c         db  0x3c ; '<'
000000000000181d         db  0x00 ; '.'
000000000000181e         db  0x00 ; '.'
000000000000181f         db  0x00 ; '.'
0000000000001820         db  0x00 ; '.'
0000000000001821         db  0x00 ; '.'
0000000000001822         db  0x00 ; '.'
0000000000001823         db  0x00 ; '.'
0000000000001824         db  0x00 ; '.'
0000000000001825         db  0x00 ; '.'
0000000000001826         db  0x00 ; '.'
0000000000001827         db  0x00 ; '.'
0000000000001828         db  0xa8 ; '.'
0000000000001829         db  0x8f ; '.'
000000000000182a         db  0x21 ; '!'
000000000000182b         db  0x00 ; '.'
000000000000182c         db  0x00 ; '.'
000000000000182d         db  0x00 ; '.'
000000000000182e         db  0x00 ; '.'
000000000000182f         db  0x00 ; '.'
0000000000001830         db  0x07 ; '.'
0000000000001831         db  0x00 ; '.'
0000000000001832         db  0x00 ; '.'
0000000000001833         db  0x00 ; '.'
0000000000001834         db  0x3e ; '>'
0000000000001835         db  0x00 ; '.'
0000000000001836         db  0x00 ; '.'
0000000000001837         db  0x00 ; '.'
0000000000001838         db  0x00 ; '.'
0000000000001839         db  0x00 ; '.'
000000000000183a         db  0x00 ; '.'
000000000000183b         db  0x00 ; '.'
000000000000183c         db  0x00 ; '.'
000000000000183d         db  0x00 ; '.'
000000000000183e         db  0x00 ; '.'
000000000000183f         db  0x00 ; '.'
0000000000001840         db  0xb0 ; '.'
0000000000001841         db  0x8f ; '.'
0000000000001842         db  0x21 ; '!'
0000000000001843         db  0x00 ; '.'
0000000000001844         db  0x00 ; '.'
0000000000001845         db  0x00 ; '.'
0000000000001846         db  0x00 ; '.'
0000000000001847         db  0x00 ; '.'
0000000000001848         db  0x07 ; '.'
0000000000001849         db  0x00 ; '.'
000000000000184a         db  0x00 ; '.'
000000000000184b         db  0x00 ; '.'
000000000000184c         db  0x3f ; '?'
000000000000184d         db  0x00 ; '.'
000000000000184e         db  0x00 ; '.'
000000000000184f         db  0x00 ; '.'
0000000000001850         db  0x00 ; '.'
0000000000001851         db  0x00 ; '.'
0000000000001852         db  0x00 ; '.'
0000000000001853         db  0x00 ; '.'
0000000000001854         db  0x00 ; '.'
0000000000001855         db  0x00 ; '.'
0000000000001856         db  0x00 ; '.'
0000000000001857         db  0x00 ; '.'
0000000000001858         db  0xb8 ; '.'
0000000000001859         db  0x8f ; '.'
000000000000185a         db  0x21 ; '!'
000000000000185b         db  0x00 ; '.'
000000000000185c         db  0x00 ; '.'
000000000000185d         db  0x00 ; '.'
000000000000185e         db  0x00 ; '.'
000000000000185f         db  0x00 ; '.'
0000000000001860         db  0x07 ; '.'
0000000000001861         db  0x00 ; '.'
0000000000001862         db  0x00 ; '.'
0000000000001863         db  0x00 ; '.'
0000000000001864         db  0x41 ; 'A'
0000000000001865         db  0x00 ; '.'
0000000000001866         db  0x00 ; '.'
0000000000001867         db  0x00 ; '.'
0000000000001868         db  0x00 ; '.'
0000000000001869         db  0x00 ; '.'
000000000000186a         db  0x00 ; '.'
000000000000186b         db  0x00 ; '.'
000000000000186c         db  0x00 ; '.'
000000000000186d         db  0x00 ; '.'
000000000000186e         db  0x00 ; '.'
000000000000186f         db  0x00 ; '.'
0000000000001870         db  0xc0 ; '.'
0000000000001871         db  0x8f ; '.'
0000000000001872         db  0x21 ; '!'
0000000000001873         db  0x00 ; '.'
0000000000001874         db  0x00 ; '.'
0000000000001875         db  0x00 ; '.'
0000000000001876         db  0x00 ; '.'
0000000000001877         db  0x00 ; '.'
0000000000001878         db  0x07 ; '.'
0000000000001879         db  0x00 ; '.'
000000000000187a         db  0x00 ; '.'
000000000000187b         db  0x00 ; '.'
000000000000187c         db  0x42 ; 'B'
000000000000187d         db  0x00 ; '.'
000000000000187e         db  0x00 ; '.'
000000000000187f         db  0x00 ; '.'
0000000000001880         db  0x00 ; '.'
0000000000001881         db  0x00 ; '.'
0000000000001882         db  0x00 ; '.'
0000000000001883         db  0x00 ; '.'
0000000000001884         db  0x00 ; '.'
0000000000001885         db  0x00 ; '.'
0000000000001886         db  0x00 ; '.'
0000000000001887         db  0x00 ; '.'


        ; Section .init
        ; Range: [0x1888; 0x189f[ (23 bytes)
        ; File offset : [6280; 6303[ (23 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _init:
0000000000001888         sub        rsp, 0x8                                    ; CODE XREF=__libc_csu_init+44
000000000000188c         mov        rax, qword [qword_218fd8]                   ; qword_218fd8
0000000000001893         test       rax, rax
0000000000001896         je         loc_189a

0000000000001898         call       rax

                     loc_189a:
000000000000189a         add        rsp, 0x8                                    ; CODE XREF=_init+14
000000000000189e         ret
                        ; endp
000000000000189f         db  0x00 ; '.'


        ; Section .plt
        ; Range: [0x18a0; 0x1c80[ (992 bytes)
        ; File offset : [6304; 7296[ (992 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR


                     loc_18a0:
00000000000018a0         push       qword [qword_218dd0]                        ; Begin of unwind block (FDE at 0x16684), qword_218dd0, CODE XREF=sub_18b6+5
00000000000018a6         jmp        qword [qword_218dd0+8]                      ; 0x218dd8
                        ; endp
00000000000018ac         nop        dword [rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_toupper_loc:        // __ctype_toupper_loc
00000000000018b0         jmp        qword [__ctype_toupper_loc@GOT]             ; __ctype_toupper_loc, __ctype_toupper_loc@GOT, CODE XREF=build_upper_buffer+29, build_wcs_upper_buffer+808
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_18b6:
00000000000018b6         push       0x0
00000000000018bb         jmp        loc_18a0


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___uflow:        // __uflow
00000000000018c0         jmp        qword [__uflow@GOT]                         ; __uflow, __uflow@GOT, CODE XREF=readlinebuffer_delim+187
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_18c6:
00000000000018c6         push       0x1
00000000000018cb         jmp        0x18a0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_free:        // free
00000000000018d0         jmp        qword [free@GOT]                            ; free, free@GOT, CODE XREF=freebuffer+4, quotearg_n_options+277, quotearg_free+55, quotearg_free+82, quotearg_free+120, xrealloc+40, free_charset+7, free_charset+16, free_charset+25, free_charset+34, free_charset+43
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_18d6:
00000000000018d6         push       0x2
00000000000018db         jmp        0x18a0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_abort:        // abort
00000000000018e0         jmp        qword [abort@GOT]                           ; abort, abort@GOT, CODE XREF=set_program_name+154, sub_3900+2799, quotearg_n_options+417, set_custom_quoting+43, quotearg_n_style+132, quotearg_n_style_mem+128, quotearg_n_style_colon+132, quotearg_n_custom_mem+135, xalloc_die+48, sub_136c0+94, rpl_regerror+112
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_18e6:
00000000000018e6         push       0x3
00000000000018eb         jmp        0x18a0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___errno_location:        // __errno_location
00000000000018f0         jmp        qword [__errno_location@GOT]                ; __errno_location, __errno_location@GOT, CODE XREF=main+1568, nl_file+945, nl_file+1010, close_stdout+22, quotearg_n_options+28, clone_quoting_options+7, quotearg_buffer+45, quotearg_alloc_mem+42, xnumtoimax+80, xnumtoimax+210, xstrtoimax+65
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_18f6:
00000000000018f6         push       0x4
00000000000018fb         jmp        0x18a0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strncmp:        // strncmp
0000000000001900         jmp        qword [strncmp@GOT]                         ; strncmp, strncmp@GOT, CODE XREF=usage+812, usage+1005
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1906:
0000000000001906         push       0x5
000000000000190b         jmp        0x18a0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j__exit:        // _exit
0000000000001910         jmp        qword [_exit@GOT]                           ; _exit, _exit@GOT, CODE XREF=close_stdout+136
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1916:
0000000000001916         push       0x6
000000000000191b         jmp        0x18a0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strcpy:        // strcpy
0000000000001920         jmp        qword [strcpy@GOT]                          ; strcpy, strcpy@GOT, CODE XREF=main+1197, main+1253, main+1290
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1926:
0000000000001926         push       0x7
000000000000192b         jmp        0x18a0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___fpending:        // __fpending
0000000000001930         jmp        qword [__fpending@GOT]                      ; __fpending, __fpending@GOT, CODE XREF=close_stream+7
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1936:
0000000000001936         push       0x8
000000000000193b         jmp        0x18a0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_clearerr_unlocked:        // clearerr_unlocked
0000000000001940         jmp        qword [clearerr_unlocked@GOT]               ; clearerr_unlocked, clearerr_unlocked@GOT, CODE XREF=nl_file+866
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1946:
0000000000001946         push       0x9
000000000000194b         jmp        0x18a0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_textdomain:        // textdomain
0000000000001950         jmp        qword [textdomain@GOT]                      ; textdomain, textdomain@GOT, CODE XREF=main+97
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1956:
0000000000001956         push       0xa
000000000000195b         jmp        0x18a0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___strtol_internal:        // __strtol_internal
0000000000001960         jmp        qword [__strtol_internal@GOT]               ; __strtol_internal, __strtol_internal@GOT, CODE XREF=xstrtoimax+89
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1966:
0000000000001966         push       0xb
000000000000196b         jmp        0x18a0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_iswctype:        // iswctype
0000000000001970         jmp        qword [iswctype@GOT]                        ; iswctype, iswctype@GOT, CODE XREF=check_node_accept_bytes.isra.31+217
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1976:
0000000000001976         push       0xc
000000000000197b         jmp        0x18a0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fclose:        // fclose
0000000000001980         jmp        qword [fclose@GOT]                          ; fclose, fclose@GOT, CODE XREF=rpl_fclose+54, rpl_fclose+107
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1986:
0000000000001986         push       0xd
000000000000198b         jmp        0x18a0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_bindtextdomain:        // bindtextdomain
0000000000001990         jmp        qword [bindtextdomain@GOT]                  ; bindtextdomain, bindtextdomain@GOT, CODE XREF=main+85
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1996:
0000000000001996         push       0xe
000000000000199b         jmp        0x18a0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_stpcpy:        // stpcpy
00000000000019a0         jmp        qword [stpcpy@GOT]                          ; stpcpy, stpcpy@GOT, CODE XREF=main+1175, main+1186, main+1242
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_19a6:
00000000000019a6         push       0xf
00000000000019ab         jmp        0x18a0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_dcgettext:        // dcgettext
00000000000019b0         jmp        qword [dcgettext@GOT]                       ; dcgettext, dcgettext@GOT, CODE XREF=main+606, main+678, main+758, main+903, main+950, print_lineno+91, nl_file+1002, usage+56, usage+102, usage+146, usage+183
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_19b6:
00000000000019b6         push       0x10
00000000000019bb         jmp        0x18a0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_get_mb_cur_max:        // __ctype_get_mb_cur_max
00000000000019c0         jmp        qword [__ctype_get_mb_cur_max@GOT]          ; __ctype_get_mb_cur_max, __ctype_get_mb_cur_max@GOT, CODE XREF=quotearg_buffer_restyled+108, re_compile_internal+290
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_19c6:
00000000000019c6         push       0x11
00000000000019cb         jmp        0x18a0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strlen:        // strlen
00000000000019d0         jmp        qword [strlen@GOT]                          ; strlen, strlen@GOT, CODE XREF=build_type_arg+95, quotearg_buffer_restyled+343, sub_3900+411, sub_3900+1742, xstrdup+4, build_collating_symbol.isra.28+15, rpl_regcomp+147, rpl_regerror+60, rpl_regexec+49
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_19d6:
00000000000019d6         push       0x12
00000000000019db         jmp        0x18a0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___stack_chk_fail:        // __stack_chk_fail
00000000000019e0         jmp        qword [__stack_chk_fail@GOT]                ; __stack_chk_fail, __stack_chk_fail@GOT, CODE XREF=sub_3900+2739, quotearg_n_style+137, quotearg_n_style_mem+133, quotearg_char_mem+147, quotearg_n_style_colon+137, quotearg_n_custom_mem+140, version_etc_va+101, version_etc+192, xnumtoimax+268, xstrtoimax+1710, rpl_mbrtowc+126
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_19e6:
00000000000019e6         push       0x13
00000000000019eb         jmp        0x18a0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_getopt_long:        // getopt_long
00000000000019f0         jmp        qword [getopt_long@GOT]                     ; getopt_long, getopt_long@GOT, CODE XREF=main+146
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_19f6:
00000000000019f6         push       0x14
00000000000019fb         jmp        0x18a0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_mbrtowc:        // mbrtowc
0000000000001a00         jmp        qword [mbrtowc@GOT]                         ; mbrtowc, mbrtowc@GOT, CODE XREF=rpl_mbrtowc+50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a06:
0000000000001a06         push       0x15
0000000000001a0b         jmp        0x18a0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strchr:        // strchr
0000000000001a10         jmp        qword [strchr@GOT]                          ; strchr, strchr@GOT, CODE XREF=xstrtoimax+236, xstrtoimax+271, xstrtoimax+323
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a16:
0000000000001a16         push       0x16
0000000000001a1b         jmp        0x18a0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___overflow:        // __overflow
0000000000001a20         jmp        qword [__overflow@GOT]                      ; __overflow, __overflow@GOT, CODE XREF=nl_file+765
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a26:
0000000000001a26         push       0x17
0000000000001a2b         jmp        0x18a0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strrchr:        // strrchr
0000000000001a30         jmp        qword [strrchr@GOT]                         ; strrchr, strrchr@GOT, CODE XREF=set_program_name+14
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a36:
0000000000001a36         push       0x18
0000000000001a3b         jmp        0x18a0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_lseek:        // lseek
0000000000001a40         jmp        qword [lseek@GOT]                           ; lseek, lseek@GOT, CODE XREF=rpl_fclose+89, j_j_fseeko+49
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a46:
0000000000001a46         push       0x19
0000000000001a4b         jmp        0x18a0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___assert_fail:        // __assert_fail
0000000000001a50         jmp        qword [__assert_fail@GOT]                   ; __assert_fail, __assert_fail@GOT, CODE XREF=xstrtoimax+1705, pop_fail_stack.isra.25+143, re_search_internal+4167, re_search_internal+5451, sub_116a0+2836, sub_12fe0+37, sub_136c0+125, sub_136c0+156, sub_136c0+187, re_search_stub+1084, re_search_stub+1115
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a56:
0000000000001a56         push       0x1a
0000000000001a5b         jmp        0x18a0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memset:        // memset
0000000000001a60         jmp        qword [memset@GOT]                          ; memset, memset@GOT, CODE XREF=main+1388, quotearg_n_options+153, xzalloc+18, clean_state_log_if_needed+120, re_string_reconstruct+1128, re_string_reconstruct+1876, check_arrival+1782, get_subexp_sub.isra.32+344, sift_states_backward+744, re_search_internal+2450
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a66:
0000000000001a66         push       0x1b
0000000000001a6b         jmp        0x18a0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_posix_fadvise:        // posix_fadvise
0000000000001a70         jmp        qword [posix_fadvise@GOT]                   ; posix_fadvise, posix_fadvise@GOT, CODE XREF=fdadvise, fadvise+22
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a76:
0000000000001a76         push       0x1c
0000000000001a7b         jmp        0x18a0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memcmp:        // memcmp
0000000000001a80         jmp        qword [memcmp@GOT]                          ; memcmp, memcmp@GOT, CODE XREF=nl_file+217, nl_file+525, nl_file+605, quotearg_buffer_restyled+410, set_regs+1041, transit_state_bkref.isra.34+663
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a86:
0000000000001a86         push       0x1d
0000000000001a8b         jmp        0x18a0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_wctype:        // wctype
0000000000001a90         jmp        qword [wctype@GOT]                          ; wctype, wctype@GOT, CODE XREF=build_charclass.isra.29+103
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a96:
0000000000001a96         push       0x1e
0000000000001a9b         jmp        0x18a0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fputs_unlocked:        // fputs_unlocked
0000000000001aa0         jmp        qword [fputs_unlocked@GOT]                  ; fputs_unlocked, fputs_unlocked@GOT, CODE XREF=nl_file+736, usage+157, usage+194, usage+231, usage+268, usage+305, usage+342, usage+379, usage+416, usage+453, usage+490
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1aa6:
0000000000001aa6         push       0x1f
0000000000001aab         jmp        0x18a0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_calloc:        // calloc
0000000000001ab0         jmp        qword [calloc@GOT]                          ; calloc, calloc@GOT, CODE XREF=xcalloc+26, re_acquire_state_context+202, re_acquire_state+160, check_subexp_matching_top.isra.18+156, build_trtable+746, build_trtable+2611, build_trtable+2830, build_charclass_op+70, build_charclass_op+97, transit_state_bkref.isra.34+1726, transit_state_bkref.isra.34+1865
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ab6:
0000000000001ab6         push       0x20
0000000000001abb         jmp        0x18a0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strcmp:        // strcmp
0000000000001ac0         jmp        qword [strcmp@GOT]                          ; strcmp, strcmp@GOT, CODE XREF=main+1021, main+1052, build_charclass.isra.29+1480, build_charclass.isra.29+1620, build_charclass.isra.29+1758
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ac6:
0000000000001ac6         push       0x21
0000000000001acb         jmp        0x18a0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memcpy:        // memcpy
0000000000001ad0         jmp        qword [memcpy@GOT]                          ; memcpy, memcpy@GOT, CODE XREF=xmemdup+35, build_wcs_upper_buffer+348, build_wcs_upper_buffer+697, build_wcs_upper_buffer+796, build_wcs_upper_buffer+1071, build_wcs_upper_buffer+1340, re_node_set_merge+320, re_node_set_merge+357, re_node_set_merge+458, re_node_set_add_intersect+341, re_node_set_init_copy+67
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ad6:
0000000000001ad6         push       0x22
0000000000001adb         jmp        0x18a0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fileno:        // fileno
0000000000001ae0         jmp        qword [fileno@GOT]                          ; fileno, fileno@GOT, CODE XREF=fadvise+8, rpl_fclose+7, rpl_fclose+75, j_j_fseeko+36
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ae6:
0000000000001ae6         push       0x23
0000000000001aeb         jmp        0x18a0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_iswalnum:        // iswalnum
0000000000001af0         jmp        qword [iswalnum@GOT]                        ; iswalnum, iswalnum@GOT, CODE XREF=re_string_context_at+202, re_string_reconstruct+1790, peek_token+144, peek_token+440
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1af6:
0000000000001af6         push       0x24
0000000000001afb         jmp        0x18a0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_malloc:        // malloc
0000000000001b00         jmp        qword [malloc@GOT]                          ; malloc, malloc@GOT, CODE XREF=xmalloc+4, re_node_set_insert+76, register_state+48, build_wcs_upper_buffer+1482, calc_eclosure_iter+87, check_arrival_expand_ecl+67, create_token_tree.isra.16+160, re_node_set_init_copy+38, re_node_set_init_union+74, re_acquire_state_context+629, expand_bkref_cache+632
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b06:
0000000000001b06         push       0x25
0000000000001b0b         jmp        0x18a0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_wcrtomb:        // wcrtomb
0000000000001b10         jmp        qword [wcrtomb@GOT]                         ; wcrtomb, wcrtomb@GOT, CODE XREF=build_wcs_upper_buffer+313, build_wcs_upper_buffer+668, re_compile_fastmap_iter.isra.30+534, re_compile_fastmap_iter.isra.30+698, re_compile_fastmap_iter.isra.30+797
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b16:
0000000000001b16         push       0x26
0000000000001b1b         jmp        0x18a0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fflush:        // fflush
0000000000001b20         jmp        qword [fflush@GOT]                          ; fflush, fflush@GOT, CODE XREF=rpl_fflush+30, rpl_fflush+59
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b26:
0000000000001b26         push       0x27
0000000000001b2b         jmp        0x18a0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_nl_langinfo:        // nl_langinfo
0000000000001b30         jmp        qword [nl_langinfo@GOT]                     ; nl_langinfo, nl_langinfo@GOT, CODE XREF=re_compile_internal+306, locale_charset+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b36:
0000000000001b36         push       0x28
0000000000001b3b         jmp        0x18a0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___freading:        // __freading
0000000000001b40         jmp        qword [__freading@GOT]                      ; __freading, __freading@GOT, CODE XREF=rpl_fclose+19, rpl_fflush+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b46:
0000000000001b46         push       0x29
0000000000001b4b         jmp        0x18a0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fwrite_unlocked:        // fwrite_unlocked
0000000000001b50         jmp        qword [fwrite_unlocked@GOT]                 ; fwrite_unlocked, fwrite_unlocked@GOT, CODE XREF=nl_file+496
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b56:
0000000000001b56         push       0x2a
0000000000001b5b         jmp        0x18a0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_realloc:        // realloc
0000000000001b60         jmp        qword [realloc@GOT]                         ; realloc, realloc@GOT, CODE XREF=xrealloc+17, re_string_realloc_buffers+48, re_string_realloc_buffers+79, re_string_realloc_buffers+127, re_node_set_insert_last+74, re_node_set_insert+270, register_state+209, extend_buffers+95, re_dfa_add_node+247, re_dfa_add_node+278, re_dfa_add_node+302
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b66:
0000000000001b66         push       0x2b
0000000000001b6b         jmp        0x18a0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_setlocale:        // setlocale
0000000000001b70         jmp        qword [setlocale@GOT]                       ; setlocale, setlocale@GOT, CODE XREF=main+66, usage+787, usage+980, hard_locale+6
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b76:
0000000000001b76         push       0x2c
0000000000001b7b         jmp        0x18a0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___printf_chk:        // __printf_chk
0000000000001b80         jmp        qword [__printf_chk@GOT]                    ; __printf_chk, __printf_chk@GOT, CODE XREF=print_lineno+38, usage+120, usage+775, usage+868, usage+929, usage+968, usage+1071, emit_bug_reporting_address+37, emit_bug_reporting_address+85
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b86:
0000000000001b86         push       0x2d
0000000000001b8b         jmp        0x18a0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_btowc:        // btowc
0000000000001b90         jmp        qword [btowc@GOT]                           ; btowc, btowc@GOT, CODE XREF=sub_116a0+1827, sub_116a0+2551, re_compile_internal+1864
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b96:
0000000000001b96         push       0x2e
0000000000001b9b         jmp        0x18a0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memmove:        // memmove
0000000000001ba0         jmp        qword [memmove@GOT]                         ; memmove, memmove@GOT, CODE XREF=re_string_reconstruct+400, re_string_reconstruct+856, re_string_reconstruct+876, re_string_reconstruct+1179
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ba6:
0000000000001ba6         push       0x2f
0000000000001bab         jmp        0x18a0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_error:        // error
0000000000001bb0         jmp        qword [error@GOT]                           ; error, error@GOT, CODE XREF=main+923, main+1589, build_type_arg+176, print_lineno+108, nl_file+966, nl_file+1027, close_stdout+125, close_stdout+157, xalloc_die+43, xnumtoimax+157
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1bb6:
0000000000001bb6         push       0x30
0000000000001bbb         jmp        0x18a0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fseeko:        // fseeko
0000000000001bc0         jmp        qword [fseeko@GOT]                          ; fseeko, fseeko@GOT, CODE XREF=j_j_fseeko
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1bc6:
0000000000001bc6         push       0x31
0000000000001bcb         jmp        0x18a0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fopen:        // fopen
0000000000001bd0         jmp        qword [fopen@GOT]                           ; fopen, fopen@GOT, CODE XREF=nl_file+908
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1bd6:
0000000000001bd6         push       0x32
0000000000001bdb         jmp        0x18a0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_towlower:        // towlower
0000000000001be0         jmp        qword [towlower@GOT]                        ; towlower, towlower@GOT, CODE XREF=re_compile_fastmap_iter.isra.30+517, re_compile_fastmap_iter.isra.30+782
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1be6:
0000000000001be6         push       0x33
0000000000001beb         jmp        0x18a0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_towupper:        // towupper
0000000000001bf0         jmp        qword [towupper@GOT]                        ; towupper, towupper@GOT, CODE XREF=build_wcs_upper_buffer+268, build_wcs_upper_buffer+640
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1bf6:
0000000000001bf6         push       0x34
0000000000001bfb         jmp        0x18a0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___cxa_atexit:        // __cxa_atexit
0000000000001c00         jmp        qword [__cxa_atexit@GOT]                    ; __cxa_atexit, __cxa_atexit@GOT, CODE XREF=atexit+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c06:
0000000000001c06         push       0x35
0000000000001c0b         jmp        0x18a0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_exit:        // exit
0000000000001c10         jmp        qword [exit@GOT]                            ; exit, exit@GOT, CODE XREF=main+420, usage+88
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c16:
0000000000001c16         push       0x36
0000000000001c1b         jmp        0x18a0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fwrite:        // fwrite
0000000000001c20         jmp        qword [fwrite@GOT]                          ; fwrite, fwrite@GOT, CODE XREF=set_program_name+149
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c26:
0000000000001c26         push       0x37
0000000000001c2b         jmp        0x18a0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___fprintf_chk:        // __fprintf_chk
0000000000001c30         jmp        qword [__fprintf_chk@GOT]                   ; __fprintf_chk, __fprintf_chk@GOT, CODE XREF=usage+81, version_etc_arn+55, version_etc_arn+105, version_etc_arn+285, version_etc_arn+332, version_etc_arn+492, version_etc_arn+563, version_etc_arn+642, version_etc_arn+718, version_etc_arn+872
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c36:
0000000000001c36         push       0x38
0000000000001c3b         jmp        0x18a0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_mbsinit:        // mbsinit
0000000000001c40         jmp        qword [mbsinit@GOT]                         ; mbsinit, mbsinit@GOT, CODE XREF=sub_3900+616, build_wcs_upper_buffer+557
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c46:
0000000000001c46         push       0x39
0000000000001c4b         jmp        0x18a0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_iswprint:        // iswprint
0000000000001c50         jmp        qword [iswprint@GOT]                        ; iswprint, iswprint@GOT, CODE XREF=sub_3900+592
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c56:
0000000000001c56         push       0x3a
0000000000001c5b         jmp        0x18a0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_tolower_loc:        // __ctype_tolower_loc
0000000000001c60         jmp        qword [__ctype_tolower_loc@GOT]             ; __ctype_tolower_loc, __ctype_tolower_loc@GOT, CODE XREF=re_compile_fastmap_iter.isra.30+287, re_compile_fastmap_iter.isra.30+729, re_compile_fastmap_iter.isra.30+976
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c66:
0000000000001c66         push       0x3b
0000000000001c6b         jmp        0x18a0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_b_loc:        // __ctype_b_loc
0000000000001c70         jmp        qword [__ctype_b_loc@GOT]                   ; __ctype_b_loc, __ctype_b_loc@GOT, CODE XREF=sub_36a0+51, build_charclass.isra.29+168, build_charclass.isra.29+248, build_charclass.isra.29+480, build_charclass.isra.29+554, build_charclass.isra.29+686, build_charclass.isra.29+819, build_charclass.isra.29+973, build_charclass.isra.29+1126, build_charclass.isra.29+1232, build_charclass.isra.29+1489
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c76:
0000000000001c76         push       0x3c
0000000000001c7b         jmp        0x18a0
                        ; endp


        ; Section .plt.got
        ; Range: [0x1c80; 0x1c88[ (8 bytes)
        ; File offset : [7296; 7304[ (8 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_qword_218fe8:        // qword_218fe8
0000000000001c80         jmp        qword [qword_218fe8]                        ; qword, End of unwind block (FDE at 0x16684), Begin of unwind block (FDE at 0x166ac), qword_218fe8, CODE XREF=__do_global_dtors_aux+30
                        ; endp
0000000000001c86         align      8
0000000000001c88         db  0x00 ; '.'                                         ; End of unwind block (FDE at 0x166ac)
0000000000001c89         db  0x00 ; '.'
0000000000001c8a         db  0x00 ; '.'
0000000000001c8b         db  0x00 ; '.'
0000000000001c8c         db  0x00 ; '.'
0000000000001c8d         db  0x00 ; '.'
0000000000001c8e         db  0x00 ; '.'
0000000000001c8f         db  0x00 ; '.'


        ; Section .text
        ; Range: [0x1c90; 0x1438e[ (75518 bytes)
        ; File offset : [7312; 82830[ (75518 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72


                     main:
0000000000001c90         push       r15                                         ; Begin of unwind block (FDE at 0x167c0), DATA XREF=_start+29
0000000000001c92         push       r14
0000000000001c94         lea        r15, qword [FORMAT_RIGHT_NOLZ]              ; "%*ld%s"
0000000000001c9b         push       r13
0000000000001c9d         push       r12
0000000000001c9f         lea        r14, qword [aInvalidLineNum_14494+30]       ; 0x144b2
0000000000001ca6         push       rbp
0000000000001ca7         push       rbx
0000000000001ca8         mov        ebp, edi
0000000000001caa         mov        rbx, rsi
0000000000001cad         lea        r12, qword [longopts]                       ; longopts
0000000000001cb4         mov        r13d, 0x1
0000000000001cba         sub        rsp, 0x18
0000000000001cbe         mov        rdi, qword [rsi]
0000000000001cc1         call       set_program_name                            ; set_program_name
0000000000001cc6         lea        rsi, qword [aVersion+9]                     ; argument "__locale" for method j_setlocale, 0x145ad
0000000000001ccd         mov        edi, 0x6                                    ; argument "__category" for method j_setlocale
0000000000001cd2         call       j_setlocale                                 ; setlocale
0000000000001cd7         lea        rsi, qword [aUsrlocalsharel]                ; argument "__dirname" for method j_bindtextdomain, "/usr/local/share/locale"
0000000000001cde         lea        rdi, qword [aCoreutils]                     ; argument "__domainname" for method j_bindtextdomain, "coreutils"
0000000000001ce5         call       j_bindtextdomain                            ; bindtextdomain
0000000000001cea         lea        rdi, qword [aCoreutils]                     ; argument "__domainname" for method j_textdomain, "coreutils"
0000000000001cf1         call       j_textdomain                                ; textdomain
0000000000001cf6         lea        rdi, qword [close_stdout]                   ; argument "__func" for method atexit, close_stdout
0000000000001cfd         call       atexit                                      ; atexit
0000000000001d02         mov        byte [have_read_stdin], 0x0                 ; have_read_stdin
0000000000001d09         nop        dword [rax]

                     loc_1d10:
0000000000001d10         lea        rdx, qword [aScottBartram+14]               ; argument "__shortopts" for method j_getopt_long, 0x144d9, CODE XREF=main+212, main+272, main+341, main+439, main+476, main+548, main+652, main+735, main+810, main+830, main+868
0000000000001d17         xor        r8d, r8d                                    ; argument "__longind" for method j_getopt_long
0000000000001d1a         mov        rcx, r12                                    ; argument "__longopts" for method j_getopt_long
0000000000001d1d         mov        rsi, rbx                                    ; argument "___argv" for method j_getopt_long
0000000000001d20         mov        edi, ebp                                    ; argument "___argc" for method j_getopt_long
0000000000001d22         call       j_getopt_long                               ; getopt_long
0000000000001d27         cmp        eax, 0xffffffff
0000000000001d2a         je         loc_20d0

0000000000001d30         cmp        eax, 0x69
0000000000001d33         je         loc_1f78

0000000000001d39         jle        loc_1d70

0000000000001d3b         cmp        eax, 0x70
0000000000001d3e         je         loc_1e40

0000000000001d44         jle        loc_1da8

0000000000001d46         cmp        eax, 0x76
0000000000001d49         je         loc_1f28

0000000000001d4f         cmp        eax, 0x77
0000000000001d52         je         loc_1ee0

0000000000001d58         cmp        eax, 0x73
0000000000001d5b         je         loc_1fc0

                     loc_1d61:
0000000000001d61         xor        r13d, r13d                                  ; CODE XREF=main+256, main+292, main+1526
0000000000001d64         jmp        loc_1d10
0000000000001d66         align      16

                     loc_1d70:
0000000000001d70         cmp        eax, 0x62                                   ; CODE XREF=main+169
0000000000001d73         je         loc_1fd8

0000000000001d79         jle        loc_1df0

0000000000001d7b         cmp        eax, 0x66
0000000000001d7e         je         loc_1e98

0000000000001d84         cmp        eax, 0x68
0000000000001d87         je         loc_1e50

0000000000001d8d         cmp        eax, 0x64
0000000000001d90         jne        loc_1d61

0000000000001d92         mov        rax, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5
0000000000001d99         mov        qword [section_del], rax                    ; section_del
0000000000001da0         jmp        loc_1d10
0000000000001da5         align      8

                     loc_1da8:
0000000000001da8         cmp        eax, 0x6c                                   ; CODE XREF=main+180
0000000000001dab         je         loc_2038

0000000000001db1         cmp        eax, 0x6e
0000000000001db4         jne        loc_1d61

0000000000001db6         mov        rdx, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5
0000000000001dbd         mov        ecx, 0x3
0000000000001dc2         mov        rdi, r14
0000000000001dc5         mov        rsi, rdx
0000000000001dc8         rep  cmpsb byte [rsi], byte [rdi]
0000000000001dca         seta       al
0000000000001dcd         sbb        al, 0x0
0000000000001dcf         test       al, al
0000000000001dd1         jne        loc_207f

0000000000001dd7         lea        rax, qword [FORMAT_LEFT]                    ; "%-*ld%s"
0000000000001dde         mov        qword [lineno_format], rax                  ; lineno_format
0000000000001de5         jmp        loc_1d10
0000000000001dea         align      16

                     loc_1df0:
0000000000001df0         cmp        eax, 0xffffff7d                             ; CODE XREF=main+233
0000000000001df5         jne        loc_2281

0000000000001dfb         sub        rsp, 0x8
0000000000001dff         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000001e06         mov        rcx, qword [Version]                        ; Version
0000000000001e0d         push       0x0
0000000000001e0f         lea        r9, qword [aDavidMackenzie]                 ; "David MacKenzie"
0000000000001e16         lea        r8, qword [aScottBartram]                   ; "Scott Bartram"
0000000000001e1d         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0x14432
0000000000001e24         lea        rsi, qword [aLineNumberOver+21]             ; 0x143b9
0000000000001e2b         xor        eax, eax
0000000000001e2d         call       version_etc                                 ; version_etc
0000000000001e32         xor        edi, edi                                    ; argument "__status" for method j_exit
0000000000001e34         call       j_exit                                      ; exit
                        ; endp
0000000000001e39         align      64

                     loc_1e40:
0000000000001e40         mov        byte [reset_numbers], 0x0                   ; reset_numbers, CODE XREF=main+174
0000000000001e47         jmp        loc_1d10
0000000000001e4c         align      16

                     loc_1e50:
0000000000001e50         lea        rdx, qword [header_fastmap]                 ; header_fastmap, CODE XREF=main+247
0000000000001e57         lea        rsi, qword [header_regex]                   ; header_regex
0000000000001e5e         lea        rdi, qword [header_type]                    ; header_type
0000000000001e65         call       build_type_arg                              ; build_type_arg
0000000000001e6a         test       al, al
0000000000001e6c         jne        loc_1d10

0000000000001e72         mov        rdi, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5
0000000000001e79         call       quote                                       ; quote
0000000000001e7e         mov        edx, 0x5
0000000000001e83         mov        r13, rax
0000000000001e86         lea        rsi, qword [aInvalidHeaderN]                ; "invalid header numbering style: %s"
0000000000001e8d         jmp        loc_2015
0000000000001e92         align      8

                     loc_1e98:
0000000000001e98         lea        rdx, qword [footer_fastmap]                 ; footer_fastmap, CODE XREF=main+238
0000000000001e9f         lea        rsi, qword [footer_regex]                   ; footer_regex
0000000000001ea6         lea        rdi, qword [footer_type]                    ; footer_type
0000000000001ead         call       build_type_arg                              ; build_type_arg
0000000000001eb2         test       al, al
0000000000001eb4         jne        loc_1d10

0000000000001eba         mov        rdi, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5
0000000000001ec1         call       quote                                       ; quote
0000000000001ec6         mov        edx, 0x5
0000000000001ecb         mov        r13, rax
0000000000001ece         lea        rsi, qword [aInvalidFooterN]                ; "invalid footer numbering style: %s"
0000000000001ed5         jmp        loc_2015
0000000000001eda         align      32

                     loc_1ee0:
0000000000001ee0         lea        rsi, qword [aInvalidLineNum]                ; argument "msgid" for method j_dcgettext, "invalid line number field width", CODE XREF=main+194
0000000000001ee7         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000001eec         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000001eee         call       j_dcgettext                                 ; dcgettext
0000000000001ef3         mov        rdi, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5
0000000000001efa         lea        rcx, qword [aVersion+9]                     ; 0x145ad
0000000000001f01         mov        r8, rax
0000000000001f04         xor        r9d, r9d
0000000000001f07         mov        edx, 0x7fffffff
0000000000001f0c         mov        esi, 0x1
0000000000001f11         call       xdectoimax                                  ; xdectoimax
0000000000001f16         mov        dword [lineno_width], eax                   ; lineno_width
0000000000001f1c         jmp        loc_1d10
0000000000001f21         align      8

                     loc_1f28:
0000000000001f28         lea        rsi, qword [aInvalidStartin]                ; argument "msgid" for method j_dcgettext, "invalid starting line number", CODE XREF=main+185
0000000000001f2f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000001f34         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000001f36         call       j_dcgettext                                 ; dcgettext
0000000000001f3b         mov        rdi, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5
0000000000001f42         lea        rcx, qword [aVersion+9]                     ; 0x145ad
0000000000001f49         mov        r8, rax
0000000000001f4c         xor        r9d, r9d
0000000000001f4f         movabs     rdx, 0x7fffffffffffffff
0000000000001f59         movabs     rsi, 0x8000000000000000
0000000000001f63         call       xdectoimax                                  ; xdectoimax
0000000000001f68         mov        qword [starting_line_number], rax           ; starting_line_number
0000000000001f6f         jmp        loc_1d10
0000000000001f74         align      8

                     loc_1f78:
0000000000001f78         lea        rsi, qword [aInvalidLineNum_14494]          ; argument "msgid" for method j_dcgettext, "invalid line number increment", CODE XREF=main+163
0000000000001f7f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000001f84         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000001f86         call       j_dcgettext                                 ; dcgettext
0000000000001f8b         mov        rdi, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5
0000000000001f92         lea        rcx, qword [aVersion+9]                     ; 0x145ad
0000000000001f99         mov        r8, rax
0000000000001f9c         xor        r9d, r9d
0000000000001f9f         movabs     rdx, 0x7fffffffffffffff
0000000000001fa9         mov        esi, 0x1
0000000000001fae         call       xdectoimax                                  ; xdectoimax
0000000000001fb3         mov        qword [page_incr], rax                      ; page_incr
0000000000001fba         jmp        loc_1d10
0000000000001fbf         align      64

                     loc_1fc0:
0000000000001fc0         mov        rax, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5, CODE XREF=main+203
0000000000001fc7         mov        qword [separator_str], rax                  ; separator_str
0000000000001fce         jmp        loc_1d10
0000000000001fd3         align      8

                     loc_1fd8:
0000000000001fd8         lea        rdx, qword [body_fastmap]                   ; body_fastmap, CODE XREF=main+227
0000000000001fdf         lea        rsi, qword [body_regex]                     ; body_regex
0000000000001fe6         lea        rdi, qword [body_type]                      ; body_type
0000000000001fed         call       build_type_arg                              ; build_type_arg
0000000000001ff2         test       al, al
0000000000001ff4         jne        loc_1d10

0000000000001ffa         mov        rdi, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5
0000000000002001         call       quote                                       ; quote
0000000000002006         lea        rsi, qword [aInvalidBodyNum]                ; "invalid body numbering style: %s"
000000000000200d         mov        r13, rax
0000000000002010         mov        edx, 0x5

                     loc_2015:
0000000000002015         xor        edi, edi                                    ; argument "domain" for method j_dcgettext, CODE XREF=main+509, main+581, main+1617
0000000000002017         call       j_dcgettext                                 ; dcgettext
000000000000201c         mov        rcx, r13
000000000000201f         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002022         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002024         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000002026         xor        eax, eax
0000000000002028         xor        r13d, r13d
000000000000202b         call       j_error                                     ; error
0000000000002030         jmp        loc_1d10
0000000000002035         align      8

                     loc_2038:
0000000000002038         lea        rsi, qword [aInvalidLineNum_14dc8]          ; argument "msgid" for method j_dcgettext, "invalid line number of blank lines", CODE XREF=main+283
000000000000203f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002044         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002046         call       j_dcgettext                                 ; dcgettext
000000000000204b         mov        rdi, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5
0000000000002052         lea        rcx, qword [aVersion+9]                     ; 0x145ad
0000000000002059         mov        r8, rax
000000000000205c         xor        r9d, r9d
000000000000205f         movabs     rdx, 0x7fffffffffffffff
0000000000002069         mov        esi, 0x1
000000000000206e         call       xdectoimax                                  ; xdectoimax
0000000000002073         mov        qword [blank_join], rax                     ; blank_join
000000000000207a         jmp        loc_1d10

                     loc_207f:
000000000000207f         lea        rsi, qword [aInvalidLineNum_14494+33]       ; argument "__s2" for method j_strcmp, 0x144b5, CODE XREF=main+321
0000000000002086         mov        rdi, rdx                                    ; argument "__s1" for method j_strcmp
0000000000002089         mov        qword [rsp+0x48+var_48], rdx
000000000000208d         call       j_strcmp                                    ; strcmp
0000000000002092         test       eax, eax
0000000000002094         mov        rdx, qword [rsp+0x48+var_48]
0000000000002098         je         loc_2293

000000000000209e         lea        rsi, qword [aInvalidLineNum_14494+36]       ; argument "__s2" for method j_strcmp, 0x144b8
00000000000020a5         mov        rdi, rdx                                    ; argument "__s1" for method j_strcmp
00000000000020a8         mov        qword [rsp+0x48+var_48], rdx
00000000000020ac         call       j_strcmp                                    ; strcmp
00000000000020b1         test       eax, eax
00000000000020b3         mov        rdx, qword [rsp+0x48+var_48]
00000000000020b7         jne        loc_22ca

00000000000020bd         lea        rax, qword [FORMAT_RIGHT_LZ]                ; "%0*ld%s"
00000000000020c4         mov        qword [lineno_format], rax                  ; lineno_format
00000000000020cb         jmp        loc_1d10

                     loc_20d0:
00000000000020d0         test       r13b, r13b                                  ; CODE XREF=main+154
00000000000020d3         je         loc_22fa

00000000000020d9         mov        rdi, qword [section_del]                    ; section_del
00000000000020e0         or         r8, 0xffffffffffffffff
00000000000020e4         xor        edx, edx
00000000000020e6         mov        rcx, r8
00000000000020e9         mov        qword [rsp+0x48+var_40], r8
00000000000020ee         mov        eax, edx
00000000000020f0         mov        byte [rsp+0x48+var_48], dl
00000000000020f3         repne scasb al, byte [rdi]
00000000000020f5         not        rcx
00000000000020f8         lea        r12, qword [rcx+r8]
00000000000020fc         mov        r14, rcx
00000000000020ff         lea        rdi, qword [r12+r12*2]
0000000000002103         mov        qword [header_del_len], rdi                 ; header_del_len
000000000000210a         add        rdi, 0x1
000000000000210e         call       xmalloc                                     ; xmalloc
0000000000002113         mov        r15, qword [section_del]                    ; section_del
000000000000211a         mov        rdi, rax                                    ; argument "__dest" for method j_stpcpy
000000000000211d         mov        qword [header_del], rax                     ; header_del
0000000000002124         mov        rsi, r15                                    ; argument "__src" for method j_stpcpy
0000000000002127         call       j_stpcpy                                    ; stpcpy
000000000000212c         mov        rsi, r15                                    ; argument "__src" for method j_stpcpy
000000000000212f         mov        rdi, rax                                    ; argument "__dest" for method j_stpcpy
0000000000002132         call       j_stpcpy                                    ; stpcpy
0000000000002137         mov        rsi, r15                                    ; argument "__src" for method j_strcpy
000000000000213a         mov        rdi, rax                                    ; argument "__dest" for method j_strcpy
000000000000213d         call       j_strcpy                                    ; strcpy
0000000000002142         lea        rdi, qword [r12+r12]
0000000000002146         mov        qword [body_del_len], rdi                   ; body_del_len
000000000000214d         add        rdi, 0x1
0000000000002151         call       xmalloc                                     ; xmalloc
0000000000002156         mov        r15, qword [section_del]                    ; section_del
000000000000215d         mov        rdi, rax                                    ; argument "__dest" for method j_stpcpy
0000000000002160         mov        qword [body_del], rax                       ; body_del
0000000000002167         mov        rsi, r15                                    ; argument "__src" for method j_stpcpy
000000000000216a         call       j_stpcpy                                    ; stpcpy
000000000000216f         mov        rsi, r15                                    ; argument "__src" for method j_strcpy
0000000000002172         mov        rdi, rax                                    ; argument "__dest" for method j_strcpy
0000000000002175         call       j_strcpy                                    ; strcpy
000000000000217a         mov        rdi, r14
000000000000217d         mov        qword [footer_del_len], r12                 ; footer_del_len
0000000000002184         call       xmalloc                                     ; xmalloc
0000000000002189         mov        rsi, qword [section_del]                    ; argument "__src" for method j_strcpy, section_del
0000000000002190         mov        rdi, rax                                    ; argument "__dest" for method j_strcpy
0000000000002193         mov        qword [footer_del], rax                     ; footer_del
000000000000219a         call       j_strcpy                                    ; strcpy
000000000000219f         lea        rdi, qword [line_buf]                       ; line_buf
00000000000021a6         call       initbuffer                                  ; initbuffer
00000000000021ab         movzx      edx, byte [rsp+0x48+var_48]
00000000000021af         mov        r8, qword [rsp+0x48+var_40]
00000000000021b4         mov        rdi, qword [separator_str]                  ; separator_str
00000000000021bb         mov        rcx, r8
00000000000021be         mov        eax, edx
00000000000021c0         repne scasb al, byte [rdi]
00000000000021c2         movsxd     rax, dword [lineno_width]                   ; lineno_width
00000000000021c9         mov        r12, rcx
00000000000021cc         not        r12
00000000000021cf         sub        r12, 0x1
00000000000021d3         lea        rdi, qword [r12+rax+1]
00000000000021d8         call       xmalloc                                     ; xmalloc
00000000000021dd         mov        rcx, rax
00000000000021e0         mov        qword [print_no_line_fmt], rax              ; print_no_line_fmt
00000000000021e7         movsxd     rax, dword [lineno_width]                   ; lineno_width
00000000000021ee         mov        esi, 0x20                                   ; argument "__c" for method j_memset
00000000000021f3         mov        rdi, rcx                                    ; argument "__s" for method j_memset
00000000000021f6         add        r12, rax
00000000000021f9         mov        rdx, r12                                    ; argument "__n" for method j_memset
00000000000021fc         call       j_memset                                    ; memset
0000000000002201         mov        byte [rax+r12], 0x0
0000000000002206         mov        rax, qword [starting_line_number]           ; starting_line_number
000000000000220d         mov        qword [line_no], rax                        ; line_no
0000000000002214         mov        rax, qword [body_type]                      ; body_type
000000000000221b         mov        qword [current_type], rax                   ; current_type
0000000000002222         lea        rax, qword [body_regex]                     ; body_regex
0000000000002229         mov        qword [current_regex], rax                  ; current_regex
0000000000002230         mov        eax, dword [optind@@GLIBC_2.2.5]            ; optind@@GLIBC_2.2.5
0000000000002236         cmp        eax, ebp
0000000000002238         je         loc_22e6

000000000000223e         jge        loc_2261

                     loc_2240:
0000000000002240         cdqe                                                   ; CODE XREF=main+1487
0000000000002242         mov        rdi, qword [rbx+rax*8]
0000000000002246         call       nl_file                                     ; nl_file
000000000000224b         and        r13d, eax
000000000000224e         mov        eax, dword [optind@@GLIBC_2.2.5]            ; optind@@GLIBC_2.2.5
0000000000002254         add        eax, 0x1
0000000000002257         cmp        eax, ebp
0000000000002259         mov        dword [optind@@GLIBC_2.2.5], eax            ; optind@@GLIBC_2.2.5
000000000000225f         jl         loc_2240

                     loc_2261:
0000000000002261         cmp        byte [have_read_stdin], 0x0                 ; have_read_stdin, CODE XREF=main+1454, main+1637
0000000000002268         jne        loc_229f

                     loc_226a:
000000000000226a         add        rsp, 0x18                                   ; CODE XREF=main+1566
000000000000226e         xor        r13d, 0x1
0000000000002272         pop        rbx
0000000000002273         movzx      eax, r13b
0000000000002277         pop        rbp
0000000000002278         pop        r12
000000000000227a         pop        r13
000000000000227c         pop        r14
000000000000227e         pop        r15
0000000000002280         ret
                        ; endp

                     loc_2281:
0000000000002281         cmp        eax, 0xffffff7e                             ; CODE XREF=main+357
0000000000002286         jne        loc_1d61

000000000000228c         xor        edi, edi                                    ; argument #1 for method usage
000000000000228e         call       usage                                       ; usage

                     loc_2293:
0000000000002293         mov        qword [lineno_format], r15                  ; lineno_format, CODE XREF=main+1032
000000000000229a         jmp        loc_1d10

                     loc_229f:
000000000000229f         mov        rdi, qword [stdin@@GLIBC_2.2.5]             ; stdin@@GLIBC_2.2.5, CODE XREF=main+1496
00000000000022a6         call       rpl_fclose                                  ; rpl_fclose
00000000000022ab         add        eax, 0x1
00000000000022ae         jne        loc_226a

00000000000022b0         call       j___errno_location                          ; __errno_location
00000000000022b5         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
00000000000022b7         lea        rdx, qword [aLibs+10]                       ; argument "__format" for method j_error, 0x14eb2
00000000000022be         mov        edi, 0x1                                    ; argument "__status" for method j_error
00000000000022c3         xor        eax, eax
00000000000022c5         call       j_error                                     ; error

                     loc_22ca:
00000000000022ca         mov        rdi, rdx                                    ; CODE XREF=main+1063
00000000000022cd         call       quote                                       ; quote
00000000000022d2         mov        edx, 0x5
00000000000022d7         mov        r13, rax
00000000000022da         lea        rsi, qword [aInvalidLineNum_14e10]          ; "invalid line numbering format: %s"
00000000000022e1         jmp        loc_2015

                     loc_22e6:
00000000000022e6         lea        rdi, qword [aLibs+10]                       ; 0x14eb2, CODE XREF=main+1448
00000000000022ed         call       nl_file                                     ; nl_file
00000000000022f2         mov        r13d, eax
00000000000022f5         jmp        loc_2261

                     loc_22fa:
00000000000022fa         mov        edi, 0x1                                    ; argument #1 for method usage, CODE XREF=main+1091
00000000000022ff         call       usage                                       ; usage
0000000000002304         nop        word [cs:rax+rax]                           ; End of unwind block (FDE at 0x167c0)
000000000000230e         nop
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _start:
0000000000002310         xor        ebp, ebp                                    ; Begin of unwind block (FDE at 0x16654)
0000000000002312         mov        r9, rdx
0000000000002315         pop        rsi
0000000000002316         mov        rdx, rsp
0000000000002319         and        rsp, 0xfffffffffffffff0
000000000000231d         push       rax
000000000000231e         push       rsp
000000000000231f         lea        r8, qword [__libc_csu_fini]                 ; __libc_csu_fini
0000000000002326         lea        rcx, qword [__libc_csu_init]                ; __libc_csu_init
000000000000232d         lea        rdi, qword [main]                           ; main
0000000000002334         call       qword [qword_218fc8+8]                      ; 0x218fd0
000000000000233a         hlt
                        ; endp
000000000000233b         align      64                                          ; End of unwind block (FDE at 0x16654)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     deregister_tm_clones:
0000000000002340         lea        rdi, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5, CODE XREF=__do_global_dtors_aux+35
0000000000002347         push       rbp
0000000000002348         lea        rax, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5
000000000000234f         cmp        rax, rdi
0000000000002352         mov        rbp, rsp
0000000000002355         je         loc_2370

0000000000002357         mov        rax, qword [qword_218fc8]                   ; qword_218fc8
000000000000235e         test       rax, rax
0000000000002361         je         loc_2370

0000000000002363         pop        rbp
0000000000002364         jmp        rax
                        ; endp
0000000000002366         align      16

                     loc_2370:
0000000000002370         pop        rbp                                         ; CODE XREF=deregister_tm_clones+21, deregister_tm_clones+33
0000000000002371         ret
                        ; endp
0000000000002372         align      128

                     register_tm_clones:
0000000000002380         lea        rdi, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5, CODE XREF=frame_dummy+5
0000000000002387         lea        rsi, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5
000000000000238e         push       rbp
000000000000238f         sub        rsi, rdi
0000000000002392         mov        rbp, rsp
0000000000002395         sar        rsi, 0x3
0000000000002399         mov        rax, rsi
000000000000239c         shr        rax, 0x3f
00000000000023a0         add        rsi, rax
00000000000023a3         sar        rsi, 0x1
00000000000023a6         je         loc_23c0

00000000000023a8         mov        rax, qword [qword_218fe0]                   ; qword_218fe0
00000000000023af         test       rax, rax
00000000000023b2         je         loc_23c0

00000000000023b4         pop        rbp
00000000000023b5         jmp        rax
                        ; endp
00000000000023b7         align      64

                     loc_23c0:
00000000000023c0         pop        rbp                                         ; CODE XREF=register_tm_clones+38, register_tm_clones+50
00000000000023c1         ret
                        ; endp
00000000000023c2         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __do_global_dtors_aux:
00000000000023d0         cmp        byte [completed.7697], 0x0                  ; completed.7697, DATA XREF=__do_global_dtors_aux_fini_array_entry
00000000000023d7         jne        loc_2408

00000000000023d9         cmp        qword [qword_218fe8], 0x0                   ; qword_218fe8
00000000000023e1         push       rbp
00000000000023e2         mov        rbp, rsp
00000000000023e5         je         loc_23f3

00000000000023e7         mov        rdi, qword [__dso_handle]                   ; __dso_handle
00000000000023ee         call       j_qword_218fe8                              ; qword_218fe8

                     loc_23f3:
00000000000023f3         call       deregister_tm_clones                        ; deregister_tm_clones, CODE XREF=__do_global_dtors_aux+21
00000000000023f8         mov        byte [completed.7697], 0x1                  ; completed.7697
00000000000023ff         pop        rbp
0000000000002400         ret
                        ; endp
0000000000002401         align      8

                     loc_2408:
0000000000002408         ret                                                    ; CODE XREF=__do_global_dtors_aux+7
                        ; endp
000000000000240a         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     frame_dummy:
0000000000002410         push       rbp                                         ; DATA XREF=__frame_dummy_init_array_entry
0000000000002411         mov        rbp, rsp
0000000000002414         pop        rbp
0000000000002415         jmp        register_tm_clones                          ; register_tm_clones
000000000000241a         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_60: int64_t, -96
        ;    var_98: int64_t, -152
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208
        ;    var_D8: int64_t, -216
        ;    var_E0: int64_t, -224
        ;    var_E8: int64_t, -232
        ;    var_F0: int64_t, -240
        ;    var_F8: int64_t, -248
        ;    var_100: int64_t, -256
        ;    var_108: int64_t, -264
        ;    var_110: int64_t, -272


                     build_type_arg:
0000000000002420         mov        rcx, qword [optarg@@GLIBC_2.2.5]            ; Begin of unwind block (FDE at 0x166c4), optarg@@GLIBC_2.2.5, CODE XREF=main+469, main+541, main+861
0000000000002427         movzx      eax, byte [rcx]
000000000000242a         cmp        al, 0x6e
000000000000242c         je         loc_24b4

0000000000002432         jle        loc_24b0

0000000000002434         cmp        al, 0x70
0000000000002436         jne        loc_24a8

0000000000002438         push       rbp
0000000000002439         lea        rax, qword [rcx+1]
000000000000243d         push       rbx
000000000000243e         mov        rbx, rsi
0000000000002441         sub        rsp, 0x8
0000000000002445         mov        qword [optarg@@GLIBC_2.2.5], rax            ; optarg@@GLIBC_2.2.5
000000000000244c         mov        qword [rdi], rcx
000000000000244f         mov        rbp, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5
0000000000002456         mov        qword [rsi], 0x0
000000000000245d         mov        qword [rsi+0x20], rdx
0000000000002461         mov        qword [rsi+8], 0x0
0000000000002469         mov        qword [rsi+0x28], 0x0
0000000000002471         mov        qword [rpl_re_syntax_options], 0x2c6        ; rpl_re_syntax_options
000000000000247c         mov        rdi, rbp                                    ; argument "__s" for method j_strlen
000000000000247f         call       j_strlen                                    ; strlen
0000000000002484         mov        rdx, rbx
0000000000002487         mov        rsi, rax
000000000000248a         mov        rdi, rbp
000000000000248d         call       rpl_re_compile_pattern                      ; rpl_re_compile_pattern
0000000000002492         test       rax, rax
0000000000002495         jne        loc_24bd

0000000000002497         add        rsp, 0x8
000000000000249b         mov        eax, 0x1
00000000000024a0         pop        rbx
00000000000024a1         pop        rbp
00000000000024a2         ret
                        ; endp
00000000000024a3         align      8

                     loc_24a8:
00000000000024a8         cmp        al, 0x74                                    ; CODE XREF=build_type_arg+22
00000000000024aa         je         loc_24b4

                     loc_24ac:
00000000000024ac         xor        eax, eax                                    ; CODE XREF=build_type_arg+146
00000000000024ae         ret
                        ; endp
00000000000024af         align      16

                     loc_24b0:
00000000000024b0         cmp        al, 0x61                                    ; CODE XREF=build_type_arg+18
00000000000024b2         jne        loc_24ac

                     loc_24b4:
00000000000024b4         mov        qword [rdi], rcx                            ; CODE XREF=build_type_arg+12, build_type_arg+138
00000000000024b7         mov        eax, 0x1
00000000000024bc         ret
                        ; endp

                     loc_24bd:
00000000000024bd         lea        rdx, qword [aSS+4]                          ; argument "__format" for method j_error, 0x14e6c, CODE XREF=build_type_arg+117
00000000000024c4         mov        rcx, rax
00000000000024c7         xor        esi, esi                                    ; argument "__errnum" for method j_error
00000000000024c9         mov        edi, 0x1                                    ; argument "__status" for method j_error
00000000000024ce         xor        eax, eax
00000000000024d0         call       j_error                                     ; error
00000000000024d5         nop                                                    ; End of unwind block (FDE at 0x166c4)
00000000000024d6         nop        word [cs:rax+rax]
                     print_lineno:
00000000000024e0         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0x166f8), CODE XREF=loc_272e, loc_28a6
00000000000024e4         mov        edx, dword [lineno_width]                   ; lineno_width
00000000000024ea         mov        r8, qword [separator_str]                   ; separator_str
00000000000024f1         mov        rcx, qword [line_no]                        ; line_no
00000000000024f8         mov        rsi, qword [lineno_format]                  ; lineno_format
00000000000024ff         xor        eax, eax
0000000000002501         mov        edi, 0x1
0000000000002506         call       j___printf_chk                              ; __printf_chk
000000000000250b         mov        rax, qword [line_no]                        ; line_no
0000000000002512         mov        rdx, qword [page_incr]                      ; page_incr
0000000000002519         add        rdx, rax
000000000000251c         cmp        rax, rdx
000000000000251f         jg         loc_252d

0000000000002521         mov        qword [line_no], rdx                        ; line_no
0000000000002528         add        rsp, 0x8
000000000000252c         ret
                        ; endp

                     loc_252d:
000000000000252d         lea        rsi, qword [aLineNumberOver]                ; argument "msgid" for method j_dcgettext, "line number overflow", CODE XREF=print_lineno+63
0000000000002534         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002539         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000253b         call       j_dcgettext                                 ; dcgettext
0000000000002540         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002542         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002545         mov        edi, 0x1                                    ; argument "__status" for method j_error
000000000000254a         xor        eax, eax
000000000000254c         call       j_error                                     ; error
0000000000002551         nop        dword [rax+rax]                             ; End of unwind block (FDE at 0x166f8)
0000000000002556         nop        word [cs:rax+rax]
                     nl_file:
0000000000002560         push       r15                                         ; Begin of unwind block (FDE at 0x16714), CODE XREF=main+1462, main+1629
0000000000002562         push       r14
0000000000002564         mov        rsi, rdi
0000000000002567         push       r13
0000000000002569         push       r12
000000000000256b         mov        ecx, 0x2
0000000000002570         push       rbp
0000000000002571         push       rbx
0000000000002572         sub        rsp, 0x18
0000000000002576         mov        qword [rsp+0x68+var_60], rdi
000000000000257b         lea        rdi, qword [aLibs+10]                       ; 0x14eb2
0000000000002582         rep  cmpsb byte [rsi], byte [rdi]
0000000000002584         seta       al
0000000000002587         sbb        al, 0x0
0000000000002589         test       al, al
000000000000258b         jne        loc_28e0

0000000000002591         mov        rbx, qword [stdin@@GLIBC_2.2.5]             ; stdin@@GLIBC_2.2.5
0000000000002598         mov        byte [have_read_stdin], 0x1                 ; have_read_stdin

                     loc_259f:
000000000000259f         lea        rbp, qword [line_buf]                       ; line_buf, CODE XREF=nl_file+919
00000000000025a6         lea        r12, qword [footer_regex]                   ; footer_regex
00000000000025ad         mov        esi, 0x2
00000000000025b2         mov        rdi, rbx
00000000000025b5         call       fadvise                                     ; fadvise
00000000000025ba         nop        word [rax+rax]

                     loc_25c0:
00000000000025c0         mov        rsi, rbx                                    ; CODE XREF=nl_file+501, nl_file+770
00000000000025c3         mov        rdi, rbp
00000000000025c6         call       readlinebuffer                              ; readlinebuffer
00000000000025cb         test       rax, rax
00000000000025ce         je         loc_26a6

                     loc_25d4:
00000000000025d4         mov        r14, qword [qword_219168]                   ; qword_219168, CODE XREF=nl_file+320
00000000000025db         lea        r15, qword [r14-1]
00000000000025df         cmp        r15, 0x1
00000000000025e3         jbe        loc_2700

00000000000025e9         mov        rax, qword [section_del]                    ; section_del
00000000000025f0         mov        r13, qword [qword_219170]                   ; qword_219170
00000000000025f7         movzx      eax, word [rax]
00000000000025fa         cmp        word [r13], ax
00000000000025ff         jne        loc_2700

0000000000002605         cmp        r15, qword [header_del_len]                 ; header_del_len
000000000000260c         je         loc_2760

                     loc_2612:
0000000000002612         cmp        r15, qword [body_del_len]                   ; body_del_len, CODE XREF=nl_file+532
0000000000002619         je         loc_27b0

                     loc_261f:
000000000000261f         cmp        r15, qword [footer_del_len]                 ; footer_del_len, CODE XREF=nl_file+612
0000000000002626         jne        loc_2700

000000000000262c         mov        rsi, qword [footer_del]                     ; argument "__s2" for method j_memcmp, footer_del
0000000000002633         mov        rdx, r15                                    ; argument "__n" for method j_memcmp
0000000000002636         mov        rdi, r13                                    ; argument "__s1" for method j_memcmp
0000000000002639         call       j_memcmp                                    ; memcmp
000000000000263e         test       eax, eax
0000000000002640         jne        loc_2700

0000000000002646         cmp        byte [reset_numbers], 0x0                   ; reset_numbers
000000000000264d         mov        rax, qword [footer_type]                    ; footer_type
0000000000002654         mov        qword [current_regex], r12                  ; current_regex
000000000000265b         mov        qword [current_type], rax                   ; current_type
0000000000002662         je         loc_2672

                     loc_2664:
0000000000002664         mov        rax, qword [starting_line_number]           ; starting_line_number, CODE XREF=nl_file+579, nl_file+653
000000000000266b         mov        qword [line_no], rax                        ; line_no

                     loc_2672:
0000000000002672         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=nl_file+258, nl_file+573, nl_file+659
0000000000002679         mov        rax, qword [rdi+0x28]
000000000000267d         cmp        rax, qword [rdi+0x30]
0000000000002681         jae        loc_2858

0000000000002687         lea        rdx, qword [rax+1]
000000000000268b         mov        rsi, rbx
000000000000268e         mov        qword [rdi+0x28], rdx
0000000000002692         mov        byte [rax], 0xa
0000000000002695         mov        rdi, rbp
0000000000002698         call       readlinebuffer                              ; readlinebuffer
000000000000269d         test       rax, rax
00000000000026a0         jne        loc_25d4

                     loc_26a6:
00000000000026a6         test       byte [rbx], 0x20                            ; CODE XREF=nl_file+110
00000000000026a9         jne        loc_28fd

00000000000026af         mov        rsi, qword [rsp+0x68+var_60]
00000000000026b4         lea        rdi, qword [aLibs+10]                       ; 0x14eb2
00000000000026bb         mov        ecx, 0x2
00000000000026c0         rep  cmpsb byte [rsi], byte [rdi]
00000000000026c2         mov        rdi, rbx
00000000000026c5         seta       al
00000000000026c8         sbb        al, 0x0
00000000000026ca         test       al, al
00000000000026cc         je         loc_28c2

00000000000026d2         call       rpl_fclose                                  ; rpl_fclose
00000000000026d7         mov        edx, eax
00000000000026d9         mov        eax, 0x1
00000000000026de         cmp        edx, 0xffffffff
00000000000026e1         je         loc_28fd

00000000000026e7         add        rsp, 0x18
00000000000026eb         pop        rbx
00000000000026ec         pop        rbp
00000000000026ed         pop        r12
00000000000026ef         pop        r13
00000000000026f1         pop        r14
00000000000026f3         pop        r15
00000000000026f5         ret
                        ; endp
00000000000026f6         align      256

                     loc_2700:
0000000000002700         mov        rax, qword [current_type]                   ; current_type, CODE XREF=nl_file+131, nl_file+159, nl_file+198, nl_file+224
0000000000002707         movzx      eax, byte [rax]
000000000000270a         cmp        al, 0x6e
000000000000270c         je         loc_2832

0000000000002712         jle        loc_2870

0000000000002718         cmp        al, 0x70
000000000000271a         je         loc_2800

0000000000002720         cmp        al, 0x74
0000000000002722         jne        loc_273a

0000000000002724         cmp        r14, 0x1
0000000000002728         jbe        loc_2832

                     loc_272e:
000000000000272e         call       print_lineno                                ; print_lineno, CODE XREF=nl_file+716, nl_file+803
0000000000002733         mov        r14, qword [qword_219168]                   ; qword_219168

                     loc_273a:
000000000000273a         mov        rcx, qword [stdout@@GLIBC_2.2.5]            ; argument "__stream" for method j_fwrite_unlocked, stdout@@GLIBC_2.2.5, CODE XREF=nl_file+450, nl_file+748, nl_file+786, nl_file+861
0000000000002741         mov        rdi, qword [qword_219170]                   ; argument "__ptr" for method j_fwrite_unlocked, qword_219170
0000000000002748         mov        rdx, r14                                    ; argument "__n" for method j_fwrite_unlocked
000000000000274b         mov        esi, 0x1                                    ; argument "__size" for method j_fwrite_unlocked
0000000000002750         call       j_fwrite_unlocked                           ; fwrite_unlocked
0000000000002755         jmp        loc_25c0
000000000000275a         align      32

                     loc_2760:
0000000000002760         mov        rsi, qword [header_del]                     ; argument "__s2" for method j_memcmp, header_del, CODE XREF=nl_file+172
0000000000002767         mov        rdx, r15                                    ; argument "__n" for method j_memcmp
000000000000276a         mov        rdi, r13                                    ; argument "__s1" for method j_memcmp
000000000000276d         call       j_memcmp                                    ; memcmp
0000000000002772         test       eax, eax
0000000000002774         jne        loc_2612

000000000000277a         mov        rax, qword [header_type]                    ; header_type
0000000000002781         cmp        byte [reset_numbers], 0x0                   ; reset_numbers
0000000000002788         mov        qword [current_type], rax                   ; current_type
000000000000278f         lea        rax, qword [header_regex]                   ; header_regex
0000000000002796         mov        qword [current_regex], rax                  ; current_regex
000000000000279d         je         loc_2672

00000000000027a3         jmp        loc_2664
00000000000027a8         align      16

                     loc_27b0:
00000000000027b0         mov        rsi, qword [body_del]                       ; argument "__s2" for method j_memcmp, body_del, CODE XREF=nl_file+185
00000000000027b7         mov        rdx, r15                                    ; argument "__n" for method j_memcmp
00000000000027ba         mov        rdi, r13                                    ; argument "__s1" for method j_memcmp
00000000000027bd         call       j_memcmp                                    ; memcmp
00000000000027c2         test       eax, eax
00000000000027c4         jne        loc_261f

00000000000027ca         mov        rax, qword [body_type]                      ; body_type
00000000000027d1         cmp        byte [reset_numbers], 0x0                   ; reset_numbers
00000000000027d8         mov        qword [current_type], rax                   ; current_type
00000000000027df         lea        rax, qword [body_regex]                     ; body_regex
00000000000027e6         mov        qword [current_regex], rax                  ; current_regex
00000000000027ed         jne        loc_2664

00000000000027f3         jmp        loc_2672
00000000000027f8         align      2048

                     loc_2800:
0000000000002800         mov        rsi, qword [qword_219170]                   ; qword_219170, CODE XREF=nl_file+442
0000000000002807         mov        rdi, qword [current_regex]                  ; current_regex
000000000000280e         xor        r9d, r9d
0000000000002811         xor        ecx, ecx
0000000000002813         mov        r8, r15
0000000000002816         mov        rdx, r15
0000000000002819         call       rpl_re_search                               ; rpl_re_search
000000000000281e         cmp        rax, 0xfffffffffffffffe
0000000000002822         je         loc_293c

0000000000002828         cmp        rax, 0xffffffffffffffff
000000000000282c         jne        loc_272e

                     loc_2832:
0000000000002832         mov        rsi, qword [stdout@@GLIBC_2.2.5]            ; argument "__stream" for method j_fputs_unlocked, stdout@@GLIBC_2.2.5, CODE XREF=nl_file+428, nl_file+456, nl_file+836
0000000000002839         mov        rdi, qword [print_no_line_fmt]              ; argument "__s" for method j_fputs_unlocked, print_no_line_fmt
0000000000002840         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002845         mov        r14, qword [qword_219168]                   ; qword_219168
000000000000284c         jmp        loc_273a
0000000000002851         align      8

                     loc_2858:
0000000000002858         mov        esi, 0xa                                    ; argument #2 for method j___overflow, CODE XREF=nl_file+289
000000000000285d         call       j___overflow                                ; __overflow
0000000000002862         jmp        loc_25c0
0000000000002867         align      16

                     loc_2870:
0000000000002870         cmp        al, 0x61                                    ; CODE XREF=nl_file+434
0000000000002872         jne        loc_273a

0000000000002878         mov        rax, qword [blank_join]                     ; blank_join
000000000000287f         cmp        rax, 0x1
0000000000002883         jle        loc_272e

0000000000002889         cmp        r14, 0x1
000000000000288d         ja         loc_28a6

000000000000288f         mov        rcx, qword [blank_lines.7093]               ; blank_lines.7093
0000000000002896         lea        rdx, qword [rcx+1]
000000000000289a         cmp        rax, rdx
000000000000289d         mov        qword [blank_lines.7093], rdx               ; blank_lines.7093
00000000000028a4         jne        loc_2832

                     loc_28a6:
00000000000028a6         call       print_lineno                                ; print_lineno, CODE XREF=nl_file+813
00000000000028ab         mov        qword [blank_lines.7093], 0x0               ; blank_lines.7093
00000000000028b6         mov        r14, qword [qword_219168]                   ; qword_219168
00000000000028bd         jmp        loc_273a

                     loc_28c2:
00000000000028c2         call       j_clearerr_unlocked                         ; clearerr_unlocked, CODE XREF=nl_file+364
00000000000028c7         add        rsp, 0x18
00000000000028cb         mov        eax, 0x1
00000000000028d0         pop        rbx
00000000000028d1         pop        rbp
00000000000028d2         pop        r12
00000000000028d4         pop        r13
00000000000028d6         pop        r14
00000000000028d8         pop        r15
00000000000028da         ret
                        ; endp
00000000000028db         align      32

                     loc_28e0:
00000000000028e0         mov        rdi, qword [rsp+0x68+var_60]                ; argument "__filename" for method j_fopen, CODE XREF=nl_file+43
00000000000028e5         lea        rsi, qword [aInvalidStartin+27]             ; argument "__modes" for method j_fopen, 0x14492
00000000000028ec         call       j_fopen                                     ; fopen
00000000000028f1         test       rax, rax
00000000000028f4         mov        rbx, rax
00000000000028f7         jne        loc_259f

                     loc_28fd:
00000000000028fd         mov        rdx, qword [rsp+0x68+var_60]                ; CODE XREF=nl_file+329, nl_file+385
0000000000002902         mov        esi, 0x3
0000000000002907         xor        edi, edi
0000000000002909         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
000000000000290e         mov        rbx, rax
0000000000002911         call       j___errno_location                          ; __errno_location
0000000000002916         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
0000000000002918         lea        rdx, qword [aSS+4]                          ; argument "__format" for method j_error, 0x14e6c
000000000000291f         mov        rcx, rbx
0000000000002922         xor        eax, eax
0000000000002924         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000002926         call       j_error                                     ; error
000000000000292b         add        rsp, 0x18
000000000000292f         xor        eax, eax
0000000000002931         pop        rbx
0000000000002932         pop        rbp
0000000000002933         pop        r12
0000000000002935         pop        r13
0000000000002937         pop        r14
0000000000002939         pop        r15
000000000000293b         ret
                        ; endp

                     loc_293c:
000000000000293c         lea        rsi, qword [aErrorInRegular]                ; argument "msgid" for method j_dcgettext, "error in regular expression search", CODE XREF=nl_file+706
0000000000002943         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002948         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000294a         call       j_dcgettext                                 ; dcgettext
000000000000294f         mov        rbx, rax
0000000000002952         call       j___errno_location                          ; __errno_location
0000000000002957         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
0000000000002959         mov        rdx, rbx                                    ; argument "__format" for method j_error
000000000000295c         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000002961         xor        eax, eax
0000000000002963         call       j_error                                     ; error
0000000000002968         nop        dword [rax+rax]                             ; End of unwind block (FDE at 0x16714)
                     usage:
0000000000002970         push       r13                                         ; Begin of unwind block (FDE at 0x16794), CODE XREF=main+1534, main+1647
0000000000002972         push       r12
0000000000002974         mov        edx, 0x5
0000000000002979         push       rbp
000000000000297a         push       rbx
000000000000297b         mov        ebp, edi
000000000000297d         sub        rsp, 0x88
0000000000002984         mov        rbx, qword [program_name]                   ; program_name
000000000000298b         mov        rax, qword [fs:0x28]
0000000000002994         mov        qword [rsp+0x110+var_98], rax
0000000000002999         xor        eax, eax
000000000000299b         test       edi, edi
000000000000299d         je         loc_29cd

000000000000299f         lea        rsi, qword [aTrySHelpForMor]                ; argument "msgid" for method j_dcgettext, "Try '%s --help' for more information.\\n"
00000000000029a6         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000029a8         call       j_dcgettext                                 ; dcgettext
00000000000029ad         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
00000000000029b4         mov        rdx, rax
00000000000029b7         mov        rcx, rbx
00000000000029ba         mov        esi, 0x1
00000000000029bf         xor        eax, eax
00000000000029c1         call       j___fprintf_chk                             ; __fprintf_chk

                     loc_29c6:
00000000000029c6         mov        edi, ebp                                    ; argument "__status" for method j_exit, CODE XREF=usage+934
00000000000029c8         call       j_exit                                      ; exit
                        ; endp

                     loc_29cd:
00000000000029cd         lea        rsi, qword [aUsageSOptionFi]                ; argument "msgid" for method j_dcgettext, "Usage: %s [OPTION]... [FILE]...\\n", CODE XREF=usage+45
00000000000029d4         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000029d6         call       j_dcgettext                                 ; dcgettext
00000000000029db         mov        rdx, rbx
00000000000029de         mov        rsi, rax
00000000000029e1         mov        edi, 0x1
00000000000029e6         xor        eax, eax
00000000000029e8         call       j___printf_chk                              ; __printf_chk
00000000000029ed         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000029f4         lea        rsi, qword [aWriteEachFileT]                ; argument "msgid" for method j_dcgettext, "Write each FILE to standard output, with line numbers added.\\n"
00000000000029fb         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002a00         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002a02         call       j_dcgettext                                 ; dcgettext
0000000000002a07         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002a0a         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002a0d         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002a12         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002a19         lea        rsi, qword [aNwithNoFileOrW]                ; argument "msgid" for method j_dcgettext, "\\nWith no FILE, or when FILE is -, read standard input.\\n"
0000000000002a20         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002a25         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002a27         call       j_dcgettext                                 ; dcgettext
0000000000002a2c         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002a2f         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002a32         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002a37         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002a3e         lea        rsi, qword [aNmandatoryArgu]                ; argument "msgid" for method j_dcgettext, "\\nMandatory arguments to long options are mandatory for short options too.\\n"
0000000000002a45         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002a4a         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002a4c         call       j_dcgettext                                 ; dcgettext
0000000000002a51         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002a54         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002a57         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002a5c         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002a63         lea        rsi, qword [aBBodynumbering]                ; argument "msgid" for method j_dcgettext, "  -b, --body-numbering=STYLE      use STYLE for numbering body lines\\n  -d, --section-delimiter=CC      use CC for logical page delimiters\\n  -f, --footer-numbering=STYLE    use STYLE for numbering footer lines\\n"
0000000000002a6a         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002a6f         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002a71         call       j_dcgettext                                 ; dcgettext
0000000000002a76         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002a79         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002a7c         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002a81         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002a88         lea        rsi, qword [aHHeadernumberi]                ; argument "msgid" for method j_dcgettext, "  -h, --header-numbering=STYLE    use STYLE for numbering header lines\\n  -i, --line-increment=NUMBER     line number increment at each line\\n  -l, --join-blank-lines=NUMBER   group of NUMBER empty lines counted as one\\n  -n, --number-format=FORMAT      inser…"
0000000000002a8f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002a94         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002a96         call       j_dcgettext                                 ; dcgettext
0000000000002a9b         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002a9e         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002aa1         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002aa6         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002aad         lea        rsi, qword [aVStartinglinen]                ; argument "msgid" for method j_dcgettext, "  -v, --starting-line-number=NUMBER  first line number for each section\\n  -w, --number-width=NUMBER       use NUMBER columns for line numbers\\n"
0000000000002ab4         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002ab9         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002abb         call       j_dcgettext                                 ; dcgettext
0000000000002ac0         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002ac3         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002ac6         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002acb         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002ad2         lea        rsi, qword [aHelpDisplayThi]                ; argument "msgid" for method j_dcgettext, "      --help     display this help and exit\\n"
0000000000002ad9         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002ade         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002ae0         call       j_dcgettext                                 ; dcgettext
0000000000002ae5         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002ae8         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002aeb         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002af0         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002af7         lea        rsi, qword [aVersionOutputV]                ; argument "msgid" for method j_dcgettext, "      --version  output version information and exit\\n"
0000000000002afe         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002b03         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002b05         call       j_dcgettext                                 ; dcgettext
0000000000002b0a         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002b0d         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002b10         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002b15         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002b1c         lea        rsi, qword [aNdefaultOption]                ; argument "msgid" for method j_dcgettext, "\\nDefault options are: -bt -d'\\:' -fn -hn -i1 -l1 -n'rn' -s<TAB> -v1 -w6\\n\\nCC are two delimiter characters used to construct logical page delimiters;\\na missing second character implies ':'.\\n"
0000000000002b23         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002b28         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002b2a         call       j_dcgettext                                 ; dcgettext
0000000000002b2f         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002b32         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002b35         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002b3a         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002b41         lea        rsi, qword [aNstyleIsOneOfn]                ; argument "msgid" for method j_dcgettext, "\\nSTYLE is one of:\\n\\n  a      number all lines\\n  t      number only nonempty lines\\n  n      number no lines\\n  pBRE   number only lines that contain a match for the basic regular\\n         expression, BRE\\n"
0000000000002b48         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002b4d         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002b4f         call       j_dcgettext                                 ; dcgettext
0000000000002b54         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002b57         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002b5a         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002b5f         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002b66         lea        rsi, qword [aNformatIsOneOf]                ; argument "msgid" for method j_dcgettext, "\\nFORMAT is one of:\\n\\n  ln     left justified, no leading zeros\\n  rn     right justified, no leading zeros\\n  rz     right justified, leading zeros\\n\\n"
0000000000002b6d         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002b72         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002b74         call       j_dcgettext                                 ; dcgettext
0000000000002b79         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002b7c         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002b7f         lea        rbx, qword [aLineNumberOver+21]             ; 0x143b9
0000000000002b86         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002b8b         lea        rax, qword [aLineNumberOver+24]             ; 0x143bc
0000000000002b92         lea        rcx, qword [aSha256sum]                     ; "sha256sum"
0000000000002b99         mov        qword [rsp+0x110+var_B0], 0x0
0000000000002ba2         mov        qword [rsp+0x110+var_A8], 0x0
0000000000002bab         mov        rdx, rsp
0000000000002bae         mov        qword [rsp+0x110+var_110], rax
0000000000002bb2         lea        rax, qword [aTestInvocation]                ; "test invocation"
0000000000002bb9         mov        qword [rsp+0x110+var_E0], rcx
0000000000002bbe         lea        rcx, qword [aSha384sum]                     ; "sha384sum"
0000000000002bc5         mov        qword [rsp+0x110+var_108], rax
0000000000002bca         lea        rax, qword [aCoreutils]                     ; "coreutils"
0000000000002bd1         mov        qword [rsp+0x110+var_D0], rcx
0000000000002bd6         lea        rcx, qword [aSha512sum]                     ; "sha512sum"
0000000000002bdd         mov        qword [rsp+0x110+var_100], rax
0000000000002be2         lea        rax, qword [aMulticallInvoc]                ; "Multi-call invocation"
0000000000002be9         mov        qword [rsp+0x110+var_C0], rcx
0000000000002bee         mov        qword [rsp+0x110+var_F8], rax
0000000000002bf3         lea        rax, qword [aSha224sum]                     ; "sha224sum"
0000000000002bfa         mov        qword [rsp+0x110+var_F0], rax
0000000000002bff         lea        rax, qword [aSha2Utilities]                 ; "sha2 utilities"
0000000000002c06         mov        qword [rsp+0x110+var_E8], rax
0000000000002c0b         mov        qword [rsp+0x110+var_D8], rax
0000000000002c10         mov        qword [rsp+0x110+var_C8], rax
0000000000002c15         mov        qword [rsp+0x110+var_B8], rax
0000000000002c1a         nop        word [rax+rax]

                     loc_2c20:
0000000000002c20         add        rdx, 0x10                                   ; CODE XREF=usage+717
0000000000002c24         mov        rdi, qword [rdx]
0000000000002c27         test       rdi, rdi
0000000000002c2a         je         loc_2c3f

0000000000002c2c         mov        ecx, 0x3
0000000000002c31         mov        rsi, rbx
0000000000002c34         rep  cmpsb byte [rsi], byte [rdi]
0000000000002c36         seta       al
0000000000002c39         sbb        al, 0x0
0000000000002c3b         test       al, al
0000000000002c3d         jne        loc_2c20

                     loc_2c3f:
0000000000002c3f         mov        r12, qword [rdx+8]                          ; CODE XREF=usage+698
0000000000002c43         xor        edi, edi
0000000000002c45         mov        edx, 0x5
0000000000002c4a         lea        rsi, qword [aNsOnlineHelpSn]                ; "\\n%s online help: <%s>\\n"
0000000000002c51         test       r12, r12
0000000000002c54         je         loc_2d1b

0000000000002c5a         call       j_dcgettext                                 ; dcgettext
0000000000002c5f         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000002c66         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0x14432
0000000000002c6d         mov        rsi, rax
0000000000002c70         mov        edi, 0x1
0000000000002c75         xor        eax, eax
0000000000002c77         call       j___printf_chk                              ; __printf_chk
0000000000002c7c         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
0000000000002c7e         mov        edi, 0x5                                    ; argument "__category" for method j_setlocale
0000000000002c83         call       j_setlocale                                 ; setlocale
0000000000002c88         test       rax, rax
0000000000002c8b         je         loc_2ca9

0000000000002c8d         lea        rsi, qword [aCoreutils+10]                  ; argument "__s2" for method j_strncmp, 0x14440
0000000000002c94         mov        edx, 0x3                                    ; argument "__n" for method j_strncmp
0000000000002c99         mov        rdi, rax                                    ; argument "__s1" for method j_strncmp
0000000000002c9c         call       j_strncmp                                   ; strncmp
0000000000002ca1         test       eax, eax
0000000000002ca3         jne        loc_2db0

                     loc_2ca9:
0000000000002ca9         lea        rsi, qword [aFullDocumentat]                ; argument "msgid" for method j_dcgettext, "Full documentation <%s%s>\\n", CODE XREF=usage+795, usage+1125
0000000000002cb0         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002cb2         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002cb7         call       j_dcgettext                                 ; dcgettext
0000000000002cbc         lea        rcx, qword [aLineNumberOver+21]             ; 0x143b9
0000000000002cc3         lea        rdx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000002cca         mov        rsi, rax
0000000000002ccd         mov        edi, 0x1
0000000000002cd2         xor        eax, eax
0000000000002cd4         call       j___printf_chk                              ; __printf_chk
0000000000002cd9         cmp        r12, rbx
0000000000002cdc         lea        rcx, qword [aMulticallInvoc+10]             ; 0x143d8
0000000000002ce3         lea        rbx, qword [aVersion+9]                     ; 0x145ad
0000000000002cea         cmove      rbx, rcx

                     loc_2cee:
0000000000002cee         lea        rsi, qword [aOrAvailableLoc]                ; argument "msgid" for method j_dcgettext, "or available locally via: info '(coreutils) %s%s'\\n", CODE XREF=usage+1076
0000000000002cf5         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002cf7         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002cfc         call       j_dcgettext                                 ; dcgettext
0000000000002d01         mov        rcx, rbx
0000000000002d04         mov        rsi, rax
0000000000002d07         mov        rdx, r12
0000000000002d0a         mov        edi, 0x1
0000000000002d0f         xor        eax, eax
0000000000002d11         call       j___printf_chk                              ; __printf_chk
0000000000002d16         jmp        loc_29c6

                     loc_2d1b:
0000000000002d1b         call       j_dcgettext                                 ; dcgettext, CODE XREF=usage+740
0000000000002d20         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000002d27         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0x14432
0000000000002d2e         mov        rsi, rax
0000000000002d31         mov        edi, 0x1
0000000000002d36         xor        eax, eax
0000000000002d38         call       j___printf_chk                              ; __printf_chk
0000000000002d3d         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
0000000000002d3f         mov        edi, 0x5                                    ; argument "__category" for method j_setlocale
0000000000002d44         call       j_setlocale                                 ; setlocale
0000000000002d49         test       rax, rax
0000000000002d4c         je         loc_2d66

0000000000002d4e         lea        rsi, qword [aCoreutils+10]                  ; argument "__s2" for method j_strncmp, 0x14440
0000000000002d55         mov        edx, 0x3                                    ; argument "__n" for method j_strncmp
0000000000002d5a         mov        rdi, rax                                    ; argument "__s1" for method j_strncmp
0000000000002d5d         call       j_strncmp                                   ; strncmp
0000000000002d62         test       eax, eax
0000000000002d64         jne        loc_2da9

                     loc_2d66:
0000000000002d66         lea        rsi, qword [aFullDocumentat]                ; argument "msgid" for method j_dcgettext, "Full documentation <%s%s>\\n", CODE XREF=usage+988
0000000000002d6d         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002d72         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002d74         lea        r12, qword [aLineNumberOver+21]             ; 0x143b9
0000000000002d7b         lea        rbx, qword [aMulticallInvoc+10]             ; 0x143d8
0000000000002d82         call       j_dcgettext                                 ; dcgettext
0000000000002d87         lea        rcx, qword [aLineNumberOver+21]             ; 0x143b9
0000000000002d8e         lea        rdx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000002d95         mov        rsi, rax
0000000000002d98         mov        edi, 0x1
0000000000002d9d         xor        eax, eax
0000000000002d9f         call       j___printf_chk                              ; __printf_chk
0000000000002da4         jmp        loc_2cee

                     loc_2da9:
0000000000002da9         lea        r12, qword [aLineNumberOver+21]             ; 0x143b9, CODE XREF=usage+1012

                     loc_2db0:
0000000000002db0         mov        r13, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=usage+819
0000000000002db7         lea        rsi, qword [aReportAnyTrans]                ; argument "msgid" for method j_dcgettext, "Report any translation bugs to <https://translationproject.org/team/>\\n"
0000000000002dbe         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002dc0         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002dc5         call       j_dcgettext                                 ; dcgettext
0000000000002dca         mov        rsi, r13                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002dcd         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002dd0         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002dd5         jmp        loc_2ca9
0000000000002dda         align      32                                          ; End of unwind block (FDE at 0x16794)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout_set_file_name:
0000000000002de0         mov        qword [file_name], rdi                      ; Begin of unwind block (FDE at 0x1681c), file_name
0000000000002de7         ret
                        ; endp
0000000000002de8         align      16                                          ; End of unwind block (FDE at 0x1681c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout_set_ignore_EPIPE:
0000000000002df0         mov        byte [ignore_EPIPE], dil                    ; Begin of unwind block (FDE at 0x16830), ignore_EPIPE
0000000000002df7         ret
                        ; endp
0000000000002df8         align      512                                         ; End of unwind block (FDE at 0x16830)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout:
0000000000002e00         push       rbp                                         ; Begin of unwind block (FDE at 0x16844), DATA XREF=main+102
0000000000002e01         push       rbx
0000000000002e02         sub        rsp, 0x8
0000000000002e06         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002e0d         call       close_stream                                ; close_stream
0000000000002e12         test       eax, eax
0000000000002e14         je         loc_2e2c

0000000000002e16         call       j___errno_location                          ; __errno_location
0000000000002e1b         cmp        byte [ignore_EPIPE], 0x0                    ; ignore_EPIPE
0000000000002e22         mov        rbx, rax
0000000000002e25         je         loc_2e43

0000000000002e27         cmp        dword [rax], 0x20
0000000000002e2a         jne        loc_2e43

                     loc_2e2c:
0000000000002e2c         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5, CODE XREF=close_stdout+20
0000000000002e33         call       close_stream                                ; close_stream
0000000000002e38         test       eax, eax
0000000000002e3a         jne        loc_2e82

0000000000002e3c         add        rsp, 0x8
0000000000002e40         pop        rbx
0000000000002e41         pop        rbp
0000000000002e42         ret
                        ; endp

                     loc_2e43:
0000000000002e43         lea        rsi, qword [aWriteError]                    ; argument "msgid" for method j_dcgettext, "write error", CODE XREF=close_stdout+37, close_stdout+42
0000000000002e4a         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002e4c         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002e51         call       j_dcgettext                                 ; dcgettext
0000000000002e56         mov        rdi, qword [file_name]                      ; file_name
0000000000002e5d         mov        rbp, rax
0000000000002e60         test       rdi, rdi
0000000000002e63         je         loc_2e8d

0000000000002e65         call       quotearg_colon                              ; quotearg_colon
0000000000002e6a         mov        esi, dword [rbx]                            ; argument "__errnum" for method j_error
0000000000002e6c         lea        rdx, qword [aSS]                            ; argument "__format" for method j_error, "%s: %s"
0000000000002e73         mov        rcx, rax
0000000000002e76         mov        r8, rbp
0000000000002e79         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000002e7b         xor        eax, eax
0000000000002e7d         call       j_error                                     ; error

                     loc_2e82:
0000000000002e82         mov        edi, dword [exit_failure]                   ; argument "__status" for method j__exit, exit_failure, CODE XREF=close_stdout+58, close_stdout+162
0000000000002e88         call       j__exit                                     ; _exit
                        ; endp

                     loc_2e8d:
0000000000002e8d         mov        esi, dword [rbx]                            ; argument "__errnum" for method j_error, CODE XREF=close_stdout+99
0000000000002e8f         lea        rdx, qword [aSS+4]                          ; argument "__format" for method j_error, 0x14e6c
0000000000002e96         mov        rcx, rax
0000000000002e99         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000002e9b         xor        eax, eax
0000000000002e9d         call       j_error                                     ; error
0000000000002ea2         jmp        loc_2e82
0000000000002ea4         align      16                                          ; End of unwind block (FDE at 0x16844)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fdadvise:
0000000000002eb0         jmp        j_posix_fadvise                             ; posix_fadvise, Begin of unwind block (FDE at 0x16874)
                        ; endp
0000000000002eb5         align      64                                          ; End of unwind block (FDE at 0x16874)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fadvise:
0000000000002ec0         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0x16888), CODE XREF=nl_file+85
0000000000002ec3         je         loc_2ee0

0000000000002ec5         push       rbx
0000000000002ec6         mov        ebx, esi
0000000000002ec8         call       j_fileno                                    ; fileno
0000000000002ecd         mov        ecx, ebx                                    ; argument "__advise" for method j_posix_fadvise
0000000000002ecf         xor        edx, edx                                    ; argument "__len" for method j_posix_fadvise
0000000000002ed1         xor        esi, esi                                    ; argument "__offset" for method j_posix_fadvise
0000000000002ed3         pop        rbx
0000000000002ed4         mov        edi, eax                                    ; argument "__fd" for method j_posix_fadvise
0000000000002ed6         jmp        j_posix_fadvise                             ; posix_fadvise
                        ; endp
0000000000002edb         align      32

                     loc_2ee0:
0000000000002ee0         ret                                                    ; CODE XREF=fadvise+3
                        ; endp
0000000000002ee2         align      16                                          ; End of unwind block (FDE at 0x16888)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     initbuffer:
0000000000002ef0         pxor       xmm0, xmm0                                  ; Begin of unwind block (FDE at 0x168a4), CODE XREF=main+1302
0000000000002ef4         mov        qword [rdi+0x10], 0x0
0000000000002efc         movups     xmmword [rdi], xmm0
0000000000002eff         ret
                        ; endp

                     readlinebuffer_delim:
0000000000002f00         push       r15                                         ; End of unwind block (FDE at 0x168a4), Begin of unwind block (FDE at 0x168b8), CODE XREF=readlinebuffer+5
0000000000002f02         push       r14
0000000000002f04         push       r13
0000000000002f06         push       r12
0000000000002f08         push       rbp
0000000000002f09         push       rbx
0000000000002f0a         sub        rsp, 0x18
0000000000002f0e         mov        r13, qword [rdi+0x10]
0000000000002f12         mov        r8, qword [rdi]
0000000000002f15         add        r8, r13
0000000000002f18         test       byte [rsi], 0x10
0000000000002f1b         jne        loc_2ff0

0000000000002f21         mov        r14, rdi
0000000000002f24         mov        rbp, rsi
0000000000002f27         mov        rbx, r13
0000000000002f2a         movsx      r15d, dl
0000000000002f2e         jmp        loc_2f3b

                     loc_2f30:
0000000000002f30         cmp        r12d, r15d                                  ; CODE XREF=readlinebuffer_delim+90
0000000000002f33         lea        rbx, qword [rsi+1]
0000000000002f37         mov        byte [rsi], cl
0000000000002f39         je         loc_2f96

                     loc_2f3b:
0000000000002f3b         mov        rcx, qword [rbp+8]                          ; CODE XREF=readlinebuffer_delim+46, readlinebuffer_delim+148
0000000000002f3f         cmp        rcx, qword [rbp+0x10]
0000000000002f43         jae        loc_2fb0

0000000000002f45         lea        rax, qword [rcx+1]
0000000000002f49         mov        qword [rbp+8], rax
0000000000002f4d         movzx      r12d, byte [rcx]
0000000000002f51         mov        ecx, r12d

                     loc_2f54:
0000000000002f54         cmp        rbx, r8                                     ; CODE XREF=readlinebuffer_delim+230, readlinebuffer_delim+259
0000000000002f57         mov        rsi, rbx
0000000000002f5a         jne        loc_2f30

0000000000002f5c         mov        rbx, qword [r14]
0000000000002f5f         mov        rsi, r14
0000000000002f62         mov        rdi, r13
0000000000002f65         mov        byte [rsp+0x48+var_39], dl
0000000000002f69         mov        byte [rsp+0x48+var_48], cl
0000000000002f6c         call       x2realloc                                   ; x2realloc
0000000000002f71         mov        r8, qword [r14]
0000000000002f74         movzx      ecx, byte [rsp+0x48+var_48]
0000000000002f78         lea        rsi, qword [rax+rbx]
0000000000002f7c         mov        qword [r14+0x10], rax
0000000000002f80         mov        r13, rax
0000000000002f83         movzx      edx, byte [rsp+0x48+var_39]
0000000000002f88         lea        rbx, qword [rsi+1]
0000000000002f8c         add        r8, rax
0000000000002f8f         cmp        r12d, r15d
0000000000002f92         mov        byte [rsi], cl
0000000000002f94         jne        loc_2f3b

                     loc_2f96:
0000000000002f96         sub        rbx, r13                                    ; CODE XREF=readlinebuffer_delim+57, readlinebuffer_delim+223
0000000000002f99         mov        rax, r14
0000000000002f9c         mov        qword [r14+8], rbx
0000000000002fa0         add        rsp, 0x18
0000000000002fa4         pop        rbx
0000000000002fa5         pop        rbp
0000000000002fa6         pop        r12
0000000000002fa8         pop        r13
0000000000002faa         pop        r14
0000000000002fac         pop        r15
0000000000002fae         ret
                        ; endp
0000000000002faf         align      16

                     loc_2fb0:
0000000000002fb0         mov        rdi, rbp                                    ; argument #1 for method j___uflow, CODE XREF=readlinebuffer_delim+67
0000000000002fb3         mov        byte [rsp+0x48+var_39], dl
0000000000002fb7         mov        qword [rsp+0x48+var_48], r8
0000000000002fbb         call       j___uflow                                   ; __uflow
0000000000002fc0         cmp        eax, 0xffffffff
0000000000002fc3         mov        r12d, eax
0000000000002fc6         mov        r8, qword [rsp+0x48+var_48]
0000000000002fca         movzx      edx, byte [rsp+0x48+var_39]
0000000000002fcf         jne        loc_3001

0000000000002fd1         cmp        r13, rbx
0000000000002fd4         je         loc_2ff0

0000000000002fd6         test       byte [rbp], 0x20
0000000000002fda         jne        loc_2ff0

0000000000002fdc         cmp        byte [rbx-1], dl
0000000000002fdf         je         loc_2f96

0000000000002fe1         mov        r12d, r15d
0000000000002fe4         mov        ecx, edx
0000000000002fe6         jmp        loc_2f54
0000000000002feb         align      16

                     loc_2ff0:
0000000000002ff0         add        rsp, 0x18                                   ; CODE XREF=readlinebuffer_delim+27, readlinebuffer_delim+212, readlinebuffer_delim+218
0000000000002ff4         xor        eax, eax
0000000000002ff6         pop        rbx
0000000000002ff7         pop        rbp
0000000000002ff8         pop        r12
0000000000002ffa         pop        r13
0000000000002ffc         pop        r14
0000000000002ffe         pop        r15
0000000000003000         ret
                        ; endp

                     loc_3001:
0000000000003001         mov        ecx, eax                                    ; CODE XREF=readlinebuffer_delim+207
0000000000003003         jmp        loc_2f54
0000000000003008         align      16                                          ; End of unwind block (FDE at 0x168b8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_39: int8_t, -57
        ;    var_48: int64_t, -72


                     readlinebuffer:
0000000000003010         mov        edx, 0xa                                    ; Begin of unwind block (FDE at 0x1691c), CODE XREF=nl_file+102, nl_file+312
0000000000003015         jmp        readlinebuffer_delim                        ; readlinebuffer_delim
000000000000301a         align      32                                          ; End of unwind block (FDE at 0x1691c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     freebuffer:
0000000000003020         mov        rdi, qword [rdi+0x10]                       ; Begin of unwind block (FDE at 0x16930), argument "__ptr" for method j_free
0000000000003024         jmp        j_free                                      ; free
                        ; endp
0000000000003029         align      16                                          ; End of unwind block (FDE at 0x16930)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_program_name:
0000000000003030         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0x16944), CODE XREF=main+49
0000000000003033         push       rbx
0000000000003034         je         loc_30ad

0000000000003036         mov        esi, 0x2f                                   ; argument "__c" for method j_strrchr
000000000000303b         mov        rbx, rdi
000000000000303e         call       j_strrchr                                   ; strrchr
0000000000003043         test       rax, rax
0000000000003046         je         loc_309d

0000000000003048         lea        r8, qword [rax+1]
000000000000304c         mov        rdx, r8
000000000000304f         sub        rdx, rbx
0000000000003052         cmp        rdx, 0x6
0000000000003056         jle        loc_309d

0000000000003058         lea        rsi, qword [rax-6]
000000000000305c         lea        rdi, qword [aLibs]                          ; "/.libs/"
0000000000003063         mov        ecx, 0x7
0000000000003068         rep  cmpsb byte [rsi], byte [rdi]
000000000000306a         seta       dl
000000000000306d         sbb        dl, 0x0
0000000000003070         test       dl, dl
0000000000003072         jne        loc_309d

0000000000003074         lea        rdi, qword [aLibs+8]                        ; 0x14eb0
000000000000307b         mov        ecx, 0x3
0000000000003080         mov        rsi, r8
0000000000003083         mov        rbx, r8
0000000000003086         rep  cmpsb byte [rsi], byte [rdi]
0000000000003088         seta       dl
000000000000308b         sbb        dl, 0x0
000000000000308e         test       dl, dl
0000000000003090         jne        loc_309d

0000000000003092         lea        rbx, qword [rax+4]
0000000000003096         mov        qword [program_invocation_short_name@@GLIBC_2.2.5], rbx ; program_invocation_short_name@@GLIBC_2.2.5

                     loc_309d:
000000000000309d         mov        qword [program_name], rbx                   ; program_name, CODE XREF=set_program_name+22, set_program_name+38, set_program_name+66, set_program_name+96
00000000000030a4         mov        qword [__progname_full@@GLIBC_2.2.5], rbx   ; __progname_full@@GLIBC_2.2.5
00000000000030ab         pop        rbx
00000000000030ac         ret
                        ; endp

                     loc_30ad:
00000000000030ad         mov        rcx, qword [stderr@@GLIBC_2.2.5]            ; argument "__s" for method j_fwrite, stderr@@GLIBC_2.2.5, CODE XREF=set_program_name+4
00000000000030b4         lea        rdi, qword [aANullArgv0WasP]                ; argument "__ptr" for method j_fwrite, "A NULL argv[0] was passed through an exec system call.\\n"
00000000000030bb         mov        edx, 0x37                                   ; argument "__n" for method j_fwrite
00000000000030c0         mov        esi, 0x1                                    ; argument "__size" for method j_fwrite
00000000000030c5         call       j_fwrite                                    ; fwrite
00000000000030ca         call       j_abort                                     ; abort
                        ; endp
00000000000030cf         align      16                                          ; End of unwind block (FDE at 0x16944)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     gettext_quote.part.1:
00000000000030d0         push       rbp                                         ; Begin of unwind block (FDE at 0x16964), CODE XREF=sub_3900+2597, sub_3900+2619
00000000000030d1         push       rbx
00000000000030d2         mov        rbp, rdi
00000000000030d5         mov        ebx, esi
00000000000030d7         sub        rsp, 0x8
00000000000030db         call       locale_charset                              ; locale_charset
00000000000030e0         movzx      edx, byte [rax]
00000000000030e3         and        edx, 0xffffffdf
00000000000030e6         cmp        dl, 0x55
00000000000030e9         je         loc_3160

00000000000030eb         cmp        dl, 0x47
00000000000030ee         je         loc_3110

                     loc_30f0:
00000000000030f0         lea        rax, qword [aLibs+27]                       ; 0x14ec3, CODE XREF=gettext_quote.part.1+74, gettext_quote.part.1+80, gettext_quote.part.1+86, gettext_quote.part.1+92, gettext_quote.part.1+98, gettext_quote.part.1+104, gettext_quote.part.1+110, gettext_quote.part.1+154, gettext_quote.part.1+166, gettext_quote.part.1+176, gettext_quote.part.1+186
00000000000030f7         lea        rdx, qword [aLibs+29]                       ; 0x14ec5
00000000000030fe         cmp        ebx, 0x9
0000000000003101         cmovne     rax, rdx
0000000000003105         add        rsp, 0x8
0000000000003109         pop        rbx
000000000000310a         pop        rbp
000000000000310b         ret
                        ; endp
000000000000310c         align      16

                     loc_3110:
0000000000003110         movzx      edx, byte [rax+1]                           ; CODE XREF=gettext_quote.part.1+30
0000000000003114         and        edx, 0xffffffdf
0000000000003117         cmp        dl, 0x42
000000000000311a         jne        loc_30f0

000000000000311c         cmp        byte [rax+2], 0x31
0000000000003120         jne        loc_30f0

0000000000003122         cmp        byte [rax+3], 0x38
0000000000003126         jne        loc_30f0

0000000000003128         cmp        byte [rax+4], 0x30
000000000000312c         jne        loc_30f0

000000000000312e         cmp        byte [rax+5], 0x33
0000000000003132         jne        loc_30f0

0000000000003134         cmp        byte [rax+6], 0x30
0000000000003138         jne        loc_30f0

000000000000313a         cmp        byte [rax+7], 0x0
000000000000313e         jne        loc_30f0

0000000000003140         cmp        byte [rbp], 0x60
0000000000003144         lea        rax, qword [aLibs+20]                       ; 0x14ebc
000000000000314b         lea        rdx, qword [aLibs+24]                       ; 0x14ec0
0000000000003152         cmovne     rax, rdx
0000000000003156         add        rsp, 0x8
000000000000315a         pop        rbx
000000000000315b         pop        rbp
000000000000315c         ret
                        ; endp
000000000000315d         align      32

                     loc_3160:
0000000000003160         movzx      edx, byte [rax+1]                           ; CODE XREF=gettext_quote.part.1+25
0000000000003164         and        edx, 0xffffffdf
0000000000003167         cmp        dl, 0x54
000000000000316a         jne        loc_30f0

000000000000316c         movzx      edx, byte [rax+2]
0000000000003170         and        edx, 0xffffffdf
0000000000003173         cmp        dl, 0x46
0000000000003176         jne        loc_30f0

000000000000317c         cmp        byte [rax+3], 0x2d
0000000000003180         jne        loc_30f0

0000000000003186         cmp        byte [rax+4], 0x38
000000000000318a         jne        loc_30f0

0000000000003190         cmp        byte [rax+5], 0x0
0000000000003194         jne        loc_30f0

000000000000319a         cmp        byte [rbp], 0x60
000000000000319e         lea        rax, qword [aLibs+12]                       ; 0x14eb4
00000000000031a5         lea        rdx, qword [aLibs+16]                       ; 0x14eb8
00000000000031ac         cmovne     rax, rdx
00000000000031b0         add        rsp, 0x8
00000000000031b4         pop        rbx
00000000000031b5         pop        rbp
00000000000031b6         ret
                        ; endp
00000000000031b7         align      64                                          ; End of unwind block (FDE at 0x16964)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_0: int, 8
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_4C: int32_t, -76
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_69: int8_t, -105
        ;    var_6A: int8_t, -106
        ;    var_6B: int8_t, -107
        ;    var_6C: int8_t, -108
        ;    var_70: int32_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208
        ;    var_D8: int64_t, -216
        ;    var_D9: int8_t, -217
        ;    var_DA: int8_t, -218
        ;    var_DB: int8_t, -219
        ;    var_E0: int32_t, -224


                     quotearg_buffer_restyled:
00000000000031c0         push       r15                                         ; Begin of unwind block (FDE at 0x169a8), CODE XREF=sub_3900+1165, sub_3900+2699, quotearg_n_options+231, quotearg_n_options+344, quotearg_buffer+92, quotearg_alloc_mem+103, quotearg_alloc_mem+176
00000000000031c2         push       r14
00000000000031c4         mov        r15d, r8d
00000000000031c7         push       r13
00000000000031c9         push       r12
00000000000031cb         mov        r14, rdi
00000000000031ce         push       rbp
00000000000031cf         push       rbx
00000000000031d0         mov        ebx, r9d
00000000000031d3         mov        r13, rsi
00000000000031d6         mov        rbp, rcx
00000000000031d9         and        ebx, 0x2
00000000000031dc         sub        rsp, 0xb8
00000000000031e3         mov        rax, qword [rsp+0xe8+arg_0]
00000000000031eb         mov        qword [rsp+0xe8+var_D8], rdx
00000000000031f0         mov        dword [rsp+0xe8+var_E0], r8d
00000000000031f5         mov        dword [rsp+0xe8+var_70], r9d
00000000000031fa         mov        qword [rsp+0xe8+var_C8], rax
00000000000031ff         mov        rax, qword [rsp+0xe8+arg_8]
0000000000003207         mov        qword [rsp+0xe8+var_80], rax
000000000000320c         mov        rax, qword [rsp+0xe8+arg_10]
0000000000003214         mov        qword [rsp+0xe8+var_88], rax
0000000000003219         mov        rax, qword [fs:0x28]
0000000000003222         mov        qword [rsp+0xe8+var_40], rax
000000000000322a         xor        eax, eax
000000000000322c         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max
0000000000003231         cmp        r15d, 0xa
0000000000003235         mov        qword [rsp+0xe8+var_90], rax
000000000000323a         ja         loc_43ef

0000000000003240         lea        rcx, qword [switch_table_14f20]             ; switch_table_14f20
0000000000003247         mov        edx, r15d
000000000000324a         movsxd     rax, dword [rcx+rdx*4]
000000000000324e         add        rax, rcx
0000000000003251         jmp        rax                                         ; switch statement using table at 0x14f20, with 11 cases, 0x3253,0x3e24,0x3e80,0x3ed5,0x3f1a,0x3f54,0x3ffa,0x4034,0x4228

                     loc_3253:
0000000000003253         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 1, CODE XREF=quotearg_buffer_restyled+145, sub_3900+1318
0000000000003258         mov        byte [rsp+0xe8+var_6C], 0x0
000000000000325d         xor        r12d, r12d
0000000000003260         mov        qword [rsp+0xe8+var_98], 0x0
0000000000003269         mov        byte [rsp+0xe8+var_D9], 0x1
000000000000326e         mov        byte [rsp+0xe8+var_DB], 0x0

                     loc_3273:
0000000000003273         lea        rax, qword [aLibs+29]                       ; 0x14ec5, CODE XREF=sub_3900+1876
000000000000327a         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000003283         xor        r15d, r15d
0000000000003286         mov        dword [rsp+0xe8+var_E0], 0x2
000000000000328e         mov        qword [rsp+0xe8+var_A0], rax

                     loc_3293:
0000000000003293         xor        r11d, r11d                                  ; CODE XREF=sub_3900+180, sub_3900+1400, sub_3900+1488, sub_3900+1557, sub_3900+1615, sub_3900+1781, sub_3900+1839, sub_3900+2408, sub_3900+2485
0000000000003296         mov        rax, rbp
0000000000003299         mov        r8d, r12d
000000000000329c         mov        rbp, r11
000000000000329f         mov        r11, rax
00000000000032a2         nop        word [rax+rax]

                     loc_32a8:
00000000000032a8         cmp        r11, rbp                                    ; CODE XREF=sub_33b0+194
00000000000032ab         setne      r12b
00000000000032af         cmp        r11, 0xffffffffffffffff
00000000000032b3         jne        loc_32c2

00000000000032b5         mov        rax, qword [rsp+0xe8+var_D8]
00000000000032ba         cmp        byte [rax+rbp], 0x0
00000000000032be         setne      r12b

                     loc_32c2:
00000000000032c2         test       r12b, r12b                                  ; CODE XREF=quotearg_buffer_restyled+243
00000000000032c5         je         loc_3920

00000000000032cb         cmp        dword [rsp+0xe8+var_E0], 0x2
00000000000032d0         mov        rdi, qword [rsp+0xe8+var_D8]
00000000000032d5         lea        r9, qword [rdi+rbp]
00000000000032d9         setne      al
00000000000032dc         and        al, byte [rsp+0xe8+var_DB]
00000000000032e0         mov        r10d, eax
00000000000032e3         je         loc_3390

00000000000032e9         mov        rax, qword [rsp+0xe8+var_D0]
00000000000032ee         test       rax, rax
00000000000032f1         je         loc_3720

00000000000032f7         cmp        r11, 0xffffffffffffffff
00000000000032fb         lea        rbx, qword [rbp+rax]
0000000000003300         jne        loc_3330

0000000000003302         cmp        rax, 0x1
0000000000003306         jbe        loc_3330

0000000000003308         mov        byte [rsp+0xe8+var_B0], r8b
000000000000330d         mov        byte [rsp+0xe8+var_B8], r10b
0000000000003312         mov        qword [rsp+0xe8+var_C0], r9
0000000000003317         call       j_strlen                                    ; strlen
000000000000331c         movzx      r8d, byte [rsp+0xe8+var_B0]
0000000000003322         movzx      r10d, byte [rsp+0xe8+var_B8]
0000000000003328         mov        r11, rax
000000000000332b         mov        r9, qword [rsp+0xe8+var_C0]

                     loc_3330:
0000000000003330         cmp        rbx, r11                                    ; CODE XREF=quotearg_buffer_restyled+320, quotearg_buffer_restyled+326
0000000000003333         mov        byte [rsp+0xe8+var_C0], r10b
0000000000003338         ja         loc_38f0

000000000000333e         mov        rdx, qword [rsp+0xe8+var_D0]                ; argument "__n" for method j_memcmp
0000000000003343         mov        rsi, qword [rsp+0xe8+var_A0]                ; argument "__s2" for method j_memcmp
0000000000003348         mov        rdi, r9                                     ; argument "__s1" for method j_memcmp
000000000000334b         mov        qword [rsp+0xe8+var_A8], r11
0000000000003350         mov        byte [rsp+0xe8+var_B0], r8b
0000000000003355         mov        qword [rsp+0xe8+var_B8], r9
000000000000335a         call       j_memcmp                                    ; memcmp
000000000000335f         test       eax, eax
0000000000003361         mov        r9, qword [rsp+0xe8+var_B8]
0000000000003366         movzx      r8d, byte [rsp+0xe8+var_B0]
000000000000336c         mov        r11, qword [rsp+0xe8+var_A8]
0000000000003371         jne        loc_38f0

0000000000003377         cmp        byte [rsp+0xe8+var_D9], 0x0
000000000000337c         movzx      r10d, byte [rsp+0xe8+var_C0]
0000000000003382         jne        loc_4305

0000000000003388         nop        dword [rax+rax]

                     loc_3390:
0000000000003390         movzx      ebx, byte [r9]                              ; CODE XREF=quotearg_buffer_restyled+291, sub_38e0+19
0000000000003394         cmp        bl, 0x7e
0000000000003397         ja         loc_36b8

000000000000339d         lea        rcx, qword [switch_table_14f20+44]          ; 0x14f4c
00000000000033a4         movzx      edx, bl
00000000000033a7         movsxd     rax, dword [rcx+rdx*4]
00000000000033ab         add        rax, rcx
00000000000033ae         jmp        rax
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_33b0:
00000000000033b0         xor        r10d, r10d
00000000000033b3         cmp        r11, 0x1
00000000000033b7         setne      al
00000000000033ba         cmp        r11, 0xffffffffffffffff
00000000000033be         jne        loc_33cc

00000000000033c0         mov        rax, qword [rsp+arg_8]
00000000000033c5         cmp        byte [rax+1], 0x0
00000000000033c9         setne      al

                     loc_33cc:
00000000000033cc         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_33b0+14
00000000000033d1         sete       dl
00000000000033d4         test       al, al
00000000000033d6         je         loc_3628

                     loc_33dc:
00000000000033dc         xor        r12d, r12d                                  ; CODE XREF=sub_3620+11
00000000000033df         xor        eax, eax
00000000000033e1         nop        dword [rax]
                        ; endp

                     loc_33e8:
00000000000033e8         cmp        byte [rsp+0xe8+var_DB], 0x1                 ; CODE XREF=sub_35d0+50, sub_36a0+119
00000000000033ed         jne        loc_3502

00000000000033f3         test       dl, dl
00000000000033f5         jne        loc_3502

                     loc_33fb:
00000000000033fb         mov        rsi, qword [rsp+0xe8+var_C8]                ; CODE XREF=sub_34b0+87
0000000000003400         test       rsi, rsi
0000000000003403         je         loc_3419

0000000000003405         mov        edx, ebx
0000000000003407         shr        dl, 0x5
000000000000340a         movzx      edx, dl
000000000000340d         mov        edx, dword [rsi+rdx*4]
0000000000003410         bt         edx, ebx
0000000000003413         jb         loc_3563

                     loc_3419:
0000000000003419         test       r10b, r10b                                  ; CODE XREF=sub_33b0+83, sub_34b0+93
000000000000341c         jne        loc_3563

0000000000003422         xor        eax, 0x1
0000000000003425         add        rbp, 0x1
0000000000003429         and        eax, r8d

                     loc_342c:
000000000000342c         test       al, al                                      ; CODE XREF=sub_3900+936
000000000000342e         je         loc_3450

0000000000003430         cmp        r13, r15
0000000000003433         jbe        loc_343a

0000000000003435         mov        byte [r14+r15], 0x27

                     loc_343a:
000000000000343a         lea        rax, qword [r15+1]                          ; CODE XREF=sub_33b0+131
000000000000343e         cmp        r13, rax
0000000000003441         jbe        loc_3449

0000000000003443         mov        byte [r14+r15+1], 0x27

                     loc_3449:
0000000000003449         add        r15, 0x2                                    ; CODE XREF=sub_33b0+145
000000000000344d         xor        r8d, r8d

                     loc_3450:
0000000000003450         cmp        r15, r13                                    ; CODE XREF=sub_33b0+126, sub_34b0+275, sub_3900+869
0000000000003453         jae        loc_3459

0000000000003455         mov        byte [r14+r15], bl

                     loc_3459:
0000000000003459         movzx      edi, byte [rsp+0xe8+var_DA]                 ; CODE XREF=sub_33b0+163
000000000000345e         add        r15, 0x1
0000000000003462         mov        eax, 0x0
0000000000003467         test       r12b, r12b
000000000000346a         cmove      edi, eax
000000000000346d         mov        byte [rsp+0xe8+var_DA], dil
0000000000003472         jmp        loc_32a8
0000000000003477         align      128


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_70: int8_t, 120
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_3480:
0000000000003480         xor        r10d, r10d
0000000000003483         mov        eax, dword [rsp+arg_0]
0000000000003487         cmp        eax, 0x2
000000000000348a         je         loc_3a48

0000000000003490         cmp        eax, 0x5
0000000000003493         je         loc_3a08

0000000000003499         cmp        eax, 0x2
000000000000349c         mov        ebx, 0x3f
00000000000034a1         sete       dl
00000000000034a4         xor        r12d, r12d
00000000000034a7         xor        eax, eax
00000000000034a9         jmp        sub_33b0+56
                        ; endp
00000000000034ae         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_74: int8_t, 124
        ;    arg_48: int, 80
        ;    arg_40: int, 72
        ;    arg_38: int, 64
        ;    arg_30: int, 56
        ;    arg_28: int, 48
        ;    arg_20: int, 40
        ;    arg_18: int, 32
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_34b0:
00000000000034b0         xor        r10d, r10d
00000000000034b3         cmp        dword [rsp+arg_0], 0x2
00000000000034b8         je         loc_39c0

00000000000034be         mov        byte [rsp+arg_74], r12b
00000000000034c3         xor        edx, edx
00000000000034c5         xor        eax, eax
00000000000034c7         mov        ebx, 0x27
00000000000034cc         jmp        sub_33b0+56
                        ; endp
00000000000034d1         nop        dword [rax]
00000000000034d8         mov        edx, 0x9
00000000000034dd         mov        ebx, 0x74

                     loc_34e2:
00000000000034e2         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_3670+10, sub_3760+37, sub_38a0+53
00000000000034e7         sete       al
00000000000034ea         and        al, byte [rsp+arg_7]
00000000000034ee         jne        sub_3620+30

00000000000034f4         cmp        byte [rsp+arg_5], 0x0                       ; CODE XREF=sub_34b0+114
00000000000034f9         jne        loc_3560

                     loc_34fb:
00000000000034fb         mov        ebx, edx                                    ; CODE XREF=sub_35d0+18
00000000000034fd         xor        r12d, r12d
0000000000003500         xor        eax, eax
                        ; endp

                     loc_3502:
0000000000003502         cmp        byte [rsp+0xe8+var_D9], 0x0                 ; CODE XREF=sub_33b0+61, sub_33b0+69
0000000000003507         jne        loc_33fb

000000000000350d         jmp        loc_3419
0000000000003512         nop        word [rax+rax]
0000000000003518         mov        edx, 0x8
000000000000351d         mov        ebx, 0x62
0000000000003522         jmp        sub_34b0+68
0000000000003524         nop        dword [rax]
0000000000003528         cmp        dword [rsp+8], 0x2
000000000000352d         je         sub_3900                                    ; sub_3900
0000000000003533         cmp        byte [rsp+0xd], 0x0
0000000000003538         je         sub_3740+16

                     loc_353e:
000000000000353e         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_3740+8
0000000000003543         je         loc_3750

0000000000003549         cmp        qword [rsp+arg_10], 0x0
000000000000354f         jne        sub_3900+11

0000000000003555         mov        ebx, 0x5c
000000000000355a         nop        word [rax+rax]
                        ; endp

                     loc_3560:
0000000000003560         xor        r12d, r12d                                  ; CODE XREF=sub_34b0+73, sub_38a0+29
                        ; endp

                     loc_3563:
0000000000003563         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_33b0+99, sub_33b0+108
0000000000003568         sete       dl
000000000000356b         cmp        byte [rsp+0xe8+var_D9], 0x0
0000000000003570         mov        eax, edx
0000000000003572         jne        loc_3dc8

0000000000003578         mov        eax, r8d
000000000000357b         xor        eax, 0x1
000000000000357e         and        al, dl
0000000000003580         je         loc_35b1

0000000000003582         cmp        r13, r15
0000000000003585         jbe        loc_358c

0000000000003587         mov        byte [r14+r15], 0x27

                     loc_358c:
000000000000358c         lea        rdx, qword [r15+1]                          ; CODE XREF=sub_34b0+213
0000000000003590         cmp        r13, rdx
0000000000003593         jbe        loc_359b

0000000000003595         mov        byte [r14+r15+1], 0x24

                     loc_359b:
000000000000359b         lea        rdx, qword [r15+2]                          ; CODE XREF=sub_34b0+227
000000000000359f         cmp        r13, rdx
00000000000035a2         jbe        loc_35aa

00000000000035a4         mov        byte [r14+r15+2], 0x27

                     loc_35aa:
00000000000035aa         add        r15, 0x3                                    ; CODE XREF=sub_34b0+242
00000000000035ae         mov        r8d, eax

                     loc_35b1:
00000000000035b1         cmp        r13, r15                                    ; CODE XREF=sub_34b0+208
00000000000035b4         jbe        loc_35bb

00000000000035b6         mov        byte [r14+r15], 0x5c

                     loc_35bb:
00000000000035bb         add        r15, 0x1                                    ; CODE XREF=sub_34b0+260
00000000000035bf         add        rbp, 0x1
00000000000035c3         jmp        loc_3450
00000000000035c8         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_70: int8_t, 120
        ;    arg_20: int, 40
        ;    arg_18: int, 32
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_35d0:
00000000000035d0         cmp        byte [rsp+arg_5], 0x0
00000000000035d5         jne        loc_37a3

00000000000035db         xor        edx, edx
00000000000035dd         test       byte [rsp+arg_70], 0x1
00000000000035e2         je         loc_34fb

00000000000035e8         add        rbp, 0x1
00000000000035ec         jmp        quotearg_buffer_restyled+232
                        ; endp
00000000000035f1         nop        dword [rax]
00000000000035f8         cmp        dword [rsp+8], 0x2
00000000000035fd         sete       dl
0000000000003600         xor        eax, eax
0000000000003602         jmp        sub_33b0+56
0000000000003607         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_3610:
0000000000003610         mov        edx, 0x7
0000000000003615         mov        ebx, 0x61
000000000000361a         jmp        sub_34b0+68
                        ; endp
000000000000361f         nop


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_3620:
0000000000003620         cmp        dword [rsp+8], 0x2
0000000000003625         sete       dl
                        ; endp

                     loc_3628:
0000000000003628         test       rbp, rbp                                    ; CODE XREF=sub_33b0+38, sub_3840+35
000000000000362b         jne        loc_33dc

0000000000003631         movzx      eax, byte [rsp+arg_7]                       ; CODE XREF=sub_3870+43
0000000000003636         and        al, dl
0000000000003638         je         sub_33b0+56

000000000000363e         mov        rbp, r11
0000000000003641         mov        dword [rsp+arg_0], 0x2
0000000000003649         jmp        sub_3900+1097
                        ; endp
000000000000364e         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_3650:
0000000000003650         cmp        dword [rsp+arg_0], 0x2
0000000000003655         sete       dl
0000000000003658         xor        r12d, r12d
000000000000365b         jmp        sub_3620+17
                        ; endp
000000000000365d         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_3660:
0000000000003660         cmp        dword [rsp+arg_0], 0x2
0000000000003665         mov        ebx, 0x20
000000000000366a         sete       dl
000000000000366d         jmp        sub_3620+17
                        ; endp
000000000000366f         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_3670:
0000000000003670         mov        edx, 0xd
0000000000003675         mov        ebx, 0x72
000000000000367a         jmp        loc_34e2
000000000000367f         align      128


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_3680:
0000000000003680         mov        edx, 0xc
0000000000003685         mov        ebx, 0x66
000000000000368a         jmp        sub_34b0+68
                        ; endp
000000000000368f         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_3690:
0000000000003690         mov        edx, 0xb
0000000000003695         mov        ebx, 0x76
000000000000369a         jmp        sub_34b0+68
                        ; endp
000000000000369f         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_36a0:
00000000000036a0         mov        edx, 0xa
00000000000036a5         mov        ebx, 0x6e
00000000000036aa         jmp        sub_34b0+50
                        ; endp
00000000000036af         align      16

                     loc_36b0:
00000000000036b0         xor        r10d, r10d                                  ; CODE XREF=sub_36a0+135
00000000000036b3         nop        dword [rax+rax]

                     loc_36b8:
00000000000036b8         cmp        qword [rsp+0xe8+var_90], 0x1                ; CODE XREF=quotearg_buffer_restyled+471
00000000000036be         jne        loc_3a68

00000000000036c4         mov        qword [rsp+0xe8+var_B0], r11
00000000000036c9         mov        byte [rsp+0xe8+var_B8], r8b
00000000000036ce         mov        byte [rsp+0xe8+var_C0], r10b
00000000000036d3         call       j___ctype_b_loc                             ; __ctype_b_loc
00000000000036d8         mov        rcx, qword [rax]
00000000000036db         movzx      edx, bl
00000000000036de         movzx      r10d, byte [rsp+0xe8+var_C0]
00000000000036e4         movzx      r8d, byte [rsp+0xe8+var_B8]
00000000000036ea         mov        r11, qword [rsp+0xe8+var_B0]
00000000000036ef         mov        edi, 0x1
00000000000036f4         movzx      eax, word [rcx+rdx*2]
00000000000036f8         and        ax, 0x4000
00000000000036fc         setne      r12b
0000000000003700         sete       al
0000000000003703         and        al, byte [rsp+0xe8+var_DB]

                     loc_3707:
0000000000003707         test       al, al                                      ; CODE XREF=sub_3900+2221
0000000000003709         jne        loc_40a1

000000000000370f         cmp        dword [rsp+0xe8+var_E0], 0x2
0000000000003714         sete       dl
0000000000003717         jmp        loc_33e8
000000000000371c         align      32

                     loc_3720:
0000000000003720         movzx      ebx, byte [r9]                              ; CODE XREF=quotearg_buffer_restyled+305
0000000000003724         cmp        bl, 0x7e
0000000000003727         ja         loc_36b0

0000000000003729         lea        rcx, qword [switch_table_14f20+552]         ; 0x15148
0000000000003730         movzx      edx, bl
0000000000003733         movsxd     rax, dword [rcx+rdx*4]
0000000000003737         add        rax, rcx
000000000000373a         jmp        rax
                        ; endp
000000000000373c         align      64


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_3740:
0000000000003740         xor        r10d, r10d
0000000000003743         cmp        byte [rsp+arg_5], 0x0
0000000000003748         jne        loc_353e

000000000000374e         nop

                     loc_3750:
0000000000003750         mov        edx, 0x5c                                   ; CODE XREF=sub_34b0+136, sub_34b0+147
0000000000003755         mov        ebx, 0x5c
000000000000375a         jmp        sub_34b0+68
                        ; endp
000000000000375f         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_3760:
0000000000003760         mov        edx, 0xc
0000000000003765         xor        r10d, r10d
0000000000003768         mov        ebx, 0x66
000000000000376d         jmp        sub_34b0+68
                        ; endp
0000000000003772         nop        word [rax+rax]
0000000000003778         mov        edx, 0xa
000000000000377d         xor        r10d, r10d
0000000000003780         mov        ebx, 0x6e
0000000000003785         jmp        sub_34b0+50
000000000000378a         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_3790:
0000000000003790         mov        ebx, 0x61
0000000000003795         jmp        sub_34b0+176
                        ; endp
000000000000379a         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_37a0:
00000000000037a0         xor        r10d, r10d
                        ; endp

                     loc_37a3:
00000000000037a3         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_35d0+5
00000000000037a8         sete       dl
00000000000037ab         cmp        byte [rsp+arg_7], 0x0
00000000000037b0         jne        loc_434a

00000000000037b6         mov        eax, r8d
00000000000037b9         mov        rcx, r15
00000000000037bc         xor        eax, 0x1
00000000000037bf         and        al, dl
00000000000037c1         je         loc_37f0

00000000000037c3         cmp        r13, r15
00000000000037c6         jbe        loc_37cd

00000000000037c8         mov        byte [r14+r15], 0x27

                     loc_37cd:
00000000000037cd         lea        rcx, qword [r15+1]                          ; CODE XREF=sub_37a0+38
00000000000037d1         cmp        r13, rcx
00000000000037d4         jbe        loc_37dc

00000000000037d6         mov        byte [r14+r15+1], 0x24

                     loc_37dc:
00000000000037dc         lea        rcx, qword [r15+2]                          ; CODE XREF=sub_37a0+52
00000000000037e0         cmp        r13, rcx
00000000000037e3         ja         loc_3e19

                     loc_37e9:
00000000000037e9         lea        rcx, qword [r15+3]                          ; CODE XREF=sub_3900+1311
00000000000037ed         mov        r8d, eax

                     loc_37f0:
00000000000037f0         cmp        r13, rcx                                    ; CODE XREF=sub_37a0+33
00000000000037f3         jbe        loc_37fa

00000000000037f5         mov        byte [r14+rcx], 0x5c

                     loc_37fa:
00000000000037fa         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_37a0+83
00000000000037ff         lea        r15, qword [rcx+1]
0000000000003803         je         loc_3e09

0000000000003809         lea        rax, qword [rbp+1]
000000000000380d         cmp        rax, r11
0000000000003810         jae        loc_382b

0000000000003812         mov        rax, qword [rsp+arg_8]
0000000000003817         movzx      eax, byte [rax+rbp+1]
000000000000381c         mov        byte [rsp+arg_20], al
0000000000003820         sub        eax, 0x30
0000000000003823         cmp        al, 0x9
0000000000003825         jbe        loc_4059

                     loc_382b:
000000000000382b         mov        eax, r12d                                   ; CODE XREF=sub_37a0+112
000000000000382e         mov        ebx, 0x30
0000000000003833         xor        r12d, r12d
0000000000003836         jmp        sub_33b0+56
                        ; endp
000000000000383b         align      64


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_3840:
0000000000003840         cmp        dword [rsp+arg_0], 0x2
0000000000003845         mov        r12d, r10d
0000000000003848         sete       dl
000000000000384b         xor        r10d, r10d
000000000000384e         xor        eax, eax
0000000000003850         jmp        sub_33b0+56
                        ; endp
0000000000003855         nop        dword [rax]
0000000000003858         cmp        dword [rsp+8], 0x2
000000000000385d         sete       dl
0000000000003860         xor        r10d, r10d
0000000000003863         jmp        sub_3620+8
0000000000003868         nop        dword [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_3870:
0000000000003870         cmp        dword [rsp+8], 0x2
0000000000003875         sete       dl
0000000000003878         xor        r10d, r10d
000000000000387b         xor        r12d, r12d
000000000000387e         jmp        sub_3620+17
                        ; endp
0000000000003883         nop        dword [rax+rax]
0000000000003888         cmp        dword [rsp+8], 0x2
000000000000388d         mov        r12d, r10d
0000000000003890         mov        ebx, 0x20
0000000000003895         sete       dl
0000000000003898         xor        r10d, r10d
000000000000389b         jmp        sub_3620+17


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_38a0:
00000000000038a0         mov        edx, 0xd
00000000000038a5         xor        r10d, r10d
00000000000038a8         mov        ebx, 0x72
00000000000038ad         jmp        sub_34b0+50
                        ; endp
00000000000038b2         nop        word [rax+rax]
00000000000038b8         mov        ebx, 0x76
00000000000038bd         jmp        sub_34b0+176
00000000000038c2         nop        word [rax+rax]
00000000000038c8         mov        edx, 0x9
00000000000038cd         xor        r10d, r10d
00000000000038d0         mov        ebx, 0x74
00000000000038d5         jmp        sub_34b0+50
00000000000038da         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_38e0:
00000000000038e0         mov        ebx, 0x62
00000000000038e5         jmp        sub_34b0+176
                        ; endp
00000000000038ea         nop        word [rax+rax]

                     loc_38f0:
00000000000038f0         xor        r10d, r10d                                  ; CODE XREF=quotearg_buffer_restyled+376, quotearg_buffer_restyled+433
00000000000038f3         jmp        loc_3390
00000000000038f8         align      256


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_7: int8_t, 15


                     sub_3900:
0000000000003900         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_34b0+125
0000000000003905         jne        loc_4270

000000000000390b         add        rbp, 0x1
000000000000390f         mov        eax, r8d
0000000000003912         xor        r12d, r12d
0000000000003915         mov        ebx, 0x5c
000000000000391a         jmp        sub_33b0+124
                        ; endp
000000000000391f         align      32

                     loc_3920:
0000000000003920         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=quotearg_buffer_restyled+261
0000000000003925         movzx      ebx, byte [rsp+0xe8+var_D9]
000000000000392a         mov        r12d, r8d
000000000000392d         mov        rbp, r11
0000000000003930         sete       dl
0000000000003933         mov        eax, ebx
0000000000003935         test       r15, r15
0000000000003938         sete       cl
000000000000393b         and        eax, edx
000000000000393d         and        al, cl
000000000000393f         jne        loc_43a6

0000000000003945         mov        eax, ebx
0000000000003947         xor        eax, 0x1
000000000000394a         and        dl, al
000000000000394c         je         loc_42bc

0000000000003952         cmp        byte [rsp+0xe8+var_6C], 0x0
0000000000003957         je         loc_42ba

000000000000395d         cmp        byte [rsp+0xe8+var_DA], 0x0
0000000000003962         jne        loc_435d

0000000000003968         test       r13, r13
000000000000396b         sete       al
000000000000396e         cmp        qword [rsp+0xe8+var_98], 0x0
0000000000003974         setne      dl
0000000000003977         and        al, dl
0000000000003979         je         loc_439c

000000000000397f         mov        r13, qword [rsp+0xe8+var_98]

                     loc_3984:
0000000000003984         lea        rbx, qword [aLibs+29]                       ; 0x14ec5, CODE XREF=sub_3900+2781
000000000000398b         mov        byte [r14], 0x27
000000000000398f         mov        dword [rsp+0xe8+var_E0], 0x2
0000000000003997         mov        r15d, 0x1
000000000000399d         mov        qword [rsp+0xe8+var_D0], 0x1
00000000000039a6         mov        byte [rsp+0xe8+var_D9], 0x0
00000000000039ab         mov        qword [rsp+0xe8+var_A0], rbx
00000000000039b0         mov        byte [rsp+0xe8+var_6C], al
00000000000039b4         jmp        loc_3293
00000000000039b9         align      64

                     loc_39c0:
00000000000039c0         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_34b0+8
00000000000039c5         jne        sub_3900+2416

00000000000039cb         test       r13, r13
00000000000039ce         je         loc_3dd0

00000000000039d4         xor        edx, edx
00000000000039d6         cmp        qword [rsp+arg_48], 0x0
00000000000039dc         jne        loc_3dd0

                     loc_39e2:
00000000000039e2         mov        qword [rsp+arg_48], r13                     ; CODE XREF=sub_3900+1284, sub_3900+2794
00000000000039e7         add        r15, 0x3
00000000000039eb         xor        eax, eax
00000000000039ed         mov        byte [rsp+arg_74], r12b
00000000000039f2         xor        r8d, r8d
00000000000039f5         mov        r13, rdx
00000000000039f8         mov        ebx, 0x27
00000000000039fd         jmp        sub_33b0+105
                        ; endp
0000000000003a02         align      8

                     loc_3a08:
0000000000003a08         test       byte [rsp+arg_70], 0x4                      ; CODE XREF=sub_3480+19
0000000000003a0d         je         loc_3a30

0000000000003a0f         lea        rcx, qword [rbp+2]
0000000000003a13         cmp        rcx, r11
0000000000003a16         jae        loc_3a30

0000000000003a18         mov        rax, qword [rsp+arg_8]
0000000000003a1d         cmp        byte [rax+rbp+1], 0x3f
0000000000003a22         je         loc_41b2

0000000000003a28         nop        dword [rax+rax]

                     loc_3a30:
0000000000003a30         xor        edx, edx                                    ; CODE XREF=sub_3900+269, sub_3900+278, sub_3900+2233, sub_3900+2253
0000000000003a32         xor        r12d, r12d
0000000000003a35         xor        eax, eax
0000000000003a37         mov        ebx, 0x3f
0000000000003a3c         jmp        sub_33b0+56
                        ; endp
0000000000003a41         align      8

                     loc_3a48:
0000000000003a48         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_3480+10
0000000000003a4d         jne        sub_3900+2416

0000000000003a53         xor        r12d, r12d
0000000000003a56         xor        eax, eax
0000000000003a58         mov        ebx, 0x3f
0000000000003a5d         jmp        sub_33b0+105
                        ; endp
0000000000003a62         align      8

                     loc_3a68:
0000000000003a68         lea        rax, qword [rsp+0xe8+var_48]                ; CODE XREF=sub_36a0+30
0000000000003a70         cmp        r11, 0xffffffffffffffff
0000000000003a74         mov        qword [rsp+0xe8+var_48], 0x0
0000000000003a80         mov        qword [rsp+0xe8+var_C0], rax
0000000000003a85         jne        loc_3ab4

0000000000003a87         mov        rdi, qword [rsp+0xe8+var_D8]                ; argument "__s" for method j_strlen
0000000000003a8c         mov        byte [rsp+0xe8+var_A8], r8b
0000000000003a91         mov        byte [rsp+0xe8+var_B0], r10b
0000000000003a96         mov        qword [rsp+0xe8+var_B8], r9
0000000000003a9b         call       j_strlen                                    ; strlen
0000000000003aa0         movzx      r8d, byte [rsp+0xe8+var_A8]
0000000000003aa6         movzx      r10d, byte [rsp+0xe8+var_B0]
0000000000003aac         mov        r11, rax
0000000000003aaf         mov        r9, qword [rsp+0xe8+var_B8]

                     loc_3ab4:
0000000000003ab4         lea        rax, qword [rsp+0xe8+var_4C]                ; CODE XREF=sub_3900+389
0000000000003abc         xor        ecx, ecx
0000000000003abe         mov        byte [rsp+0xe8+var_6A], bl
0000000000003ac2         mov        byte [rsp+0xe8+var_6B], r8b
0000000000003ac7         mov        rbx, rcx
0000000000003aca         mov        qword [rsp+0xe8+var_60], r9
0000000000003ad2         mov        qword [rsp+0xe8+var_B0], rax
0000000000003ad7         mov        byte [rsp+0xe8+var_69], r10b
0000000000003adc         mov        qword [rsp+0xe8+var_68], r15
0000000000003ae4         mov        qword [rsp+0xe8+var_A8], r14
0000000000003ae9         mov        qword [rsp+0xe8+var_78], r13
0000000000003aee         mov        qword [rsp+0xe8+var_B8], r11

                     loc_3af3:
0000000000003af3         mov        rax, qword [rsp+0xe8+var_D8]                ; CODE XREF=sub_3900+623
0000000000003af8         lea        r14, qword [rbp+rbx]
0000000000003afd         mov        rdx, qword [rsp+0xe8+var_B8]
0000000000003b02         mov        rcx, qword [rsp+0xe8+var_C0]
0000000000003b07         mov        rdi, qword [rsp+0xe8+var_B0]
0000000000003b0c         lea        r13, qword [rax+r14]
0000000000003b10         sub        rdx, r14
0000000000003b13         mov        rsi, r13
0000000000003b16         call       rpl_mbrtowc                                 ; rpl_mbrtowc
0000000000003b1b         test       rax, rax
0000000000003b1e         mov        r15, rax
0000000000003b21         je         loc_3b71

0000000000003b23         cmp        rax, 0xffffffffffffffff
0000000000003b27         je         loc_4145

0000000000003b2d         cmp        rax, 0xfffffffffffffffe
0000000000003b31         je         loc_40d1

0000000000003b37         cmp        dword [rsp+0xe8+var_E0], 0x2
0000000000003b3c         sete       al
0000000000003b3f         and        al, byte [rsp+0xe8+var_D9]
0000000000003b43         jne        loc_3ce0

                     loc_3b49:
0000000000003b49         mov        edi, dword [rsp+0xe8+var_4C]                ; argument "__wc" for method j_iswprint, CODE XREF=sub_3900+996, sub_3900+1031
0000000000003b50         call       j_iswprint                                  ; iswprint
0000000000003b55         mov        rdi, qword [rsp+0xe8+var_C0]                ; argument "__ps" for method j_mbsinit
0000000000003b5a         test       eax, eax
0000000000003b5c         mov        eax, 0x0
0000000000003b61         cmove      r12d, eax
0000000000003b65         add        rbx, r15
0000000000003b68         call       j_mbsinit                                   ; mbsinit
0000000000003b6d         test       eax, eax
0000000000003b6f         je         loc_3af3

                     loc_3b71:
0000000000003b71         mov        edx, r12d                                   ; CODE XREF=sub_3900+545
0000000000003b74         mov        rdi, rbx
0000000000003b77         movzx      r8d, byte [rsp+0xe8+var_6B]
0000000000003b7d         xor        edx, 0x1
0000000000003b80         movzx      ebx, byte [rsp+0xe8+var_6A]
0000000000003b85         movzx      r10d, byte [rsp+0xe8+var_69]
0000000000003b8b         and        dl, byte [rsp+0xe8+var_DB]
0000000000003b8f         mov        r15, qword [rsp+0xe8+var_68]
0000000000003b97         mov        r14, qword [rsp+0xe8+var_A8]
0000000000003b9c         mov        r13, qword [rsp+0xe8+var_78]
0000000000003ba1         mov        r11, qword [rsp+0xe8+var_B8]

                     loc_3ba6:
0000000000003ba6         cmp        rdi, 0x1                                    ; CODE XREF=sub_3900+2112, sub_3900+2168
0000000000003baa         jbe        loc_41ab

                     loc_3bb0:
0000000000003bb0         mov        rcx, rdi                                    ; CODE XREF=sub_3900+1961
0000000000003bb3         xor        esi, esi
0000000000003bb5         movzx      r9d, byte [rsp+0xe8+var_D9]
0000000000003bbb         add        rcx, rbp
0000000000003bbe         mov        rdi, qword [rsp+0xe8+var_D8]
0000000000003bc3         jmp        loc_3c7e
0000000000003bc8         align      16

                     loc_3bd0:
0000000000003bd0         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_3900+896
0000000000003bd5         sete       al
0000000000003bd8         test       r9b, r9b
0000000000003bdb         jne        loc_4090

0000000000003be1         mov        esi, r8d
0000000000003be4         xor        esi, 0x1
0000000000003be7         and        al, sil
0000000000003bea         je         loc_3c1b

0000000000003bec         cmp        r13, r15
0000000000003bef         jbe        loc_3bf6

0000000000003bf1         mov        byte [r14+r15], 0x27

                     loc_3bf6:
0000000000003bf6         lea        rsi, qword [r15+1]                          ; CODE XREF=sub_3900+751
0000000000003bfa         cmp        r13, rsi
0000000000003bfd         jbe        loc_3c05

0000000000003bff         mov        byte [r14+r15+1], 0x24

                     loc_3c05:
0000000000003c05         lea        rsi, qword [r15+2]                          ; CODE XREF=sub_3900+765
0000000000003c09         cmp        r13, rsi
0000000000003c0c         jbe        loc_3c14

0000000000003c0e         mov        byte [r14+r15+2], 0x27

                     loc_3c14:
0000000000003c14         add        r15, 0x3                                    ; CODE XREF=sub_3900+780
0000000000003c18         mov        r8d, eax

                     loc_3c1b:
0000000000003c1b         cmp        r13, r15                                    ; CODE XREF=sub_3900+746
0000000000003c1e         jbe        loc_3c25

0000000000003c20         mov        byte [r14+r15], 0x5c

                     loc_3c25:
0000000000003c25         lea        rax, qword [r15+1]                          ; CODE XREF=sub_3900+798
0000000000003c29         cmp        r13, rax
0000000000003c2c         jbe        loc_3c3b

0000000000003c2e         mov        eax, ebx
0000000000003c30         shr        al, 0x6
0000000000003c33         add        eax, 0x30
0000000000003c36         mov        byte [r14+r15+1], al

                     loc_3c3b:
0000000000003c3b         lea        rax, qword [r15+2]                          ; CODE XREF=sub_3900+812
0000000000003c3f         cmp        r13, rax
0000000000003c42         jbe        loc_3c54

0000000000003c44         mov        eax, ebx
0000000000003c46         shr        al, 0x3
0000000000003c49         and        eax, 0x7
0000000000003c4c         add        eax, 0x30
0000000000003c4f         mov        byte [r14+r15+2], al

                     loc_3c54:
0000000000003c54         and        ebx, 0x7                                    ; CODE XREF=sub_3900+834
0000000000003c57         add        rbp, 0x1
0000000000003c5b         add        r15, 0x3
0000000000003c5f         add        ebx, 0x30
0000000000003c62         cmp        rbp, rcx
0000000000003c65         jae        loc_3450

0000000000003c6b         mov        esi, edx

                     loc_3c6d:
0000000000003c6d         cmp        r13, r15                                    ; CODE XREF=sub_3900+985, sub_3900+1969
0000000000003c70         jbe        loc_3c76

0000000000003c72         mov        byte [r14+r15], bl

                     loc_3c76:
0000000000003c76         movzx      ebx, byte [rdi+rbp]                         ; CODE XREF=sub_3900+880
0000000000003c7a         add        r15, 0x1

                     loc_3c7e:
0000000000003c7e         test       dl, dl                                      ; CODE XREF=sub_3900+707
0000000000003c80         jne        loc_3bd0

0000000000003c86         mov        eax, esi
0000000000003c88         xor        eax, 0x1
0000000000003c8b         and        eax, r8d
0000000000003c8e         test       r10b, r10b
0000000000003c91         je         loc_3ca1

0000000000003c93         cmp        r13, r15
0000000000003c96         jbe        loc_3c9d

0000000000003c98         mov        byte [r14+r15], 0x5c

                     loc_3c9d:
0000000000003c9d         add        r15, 0x1                                    ; CODE XREF=sub_3900+918

                     loc_3ca1:
0000000000003ca1         add        rbp, 0x1                                    ; CODE XREF=sub_3900+913
0000000000003ca5         cmp        rbp, rcx
0000000000003ca8         jae        loc_342c

0000000000003cae         test       al, al
0000000000003cb0         je         loc_40ae

0000000000003cb6         cmp        r13, r15
0000000000003cb9         jbe        loc_3cc0

0000000000003cbb         mov        byte [r14+r15], 0x27

                     loc_3cc0:
0000000000003cc0         lea        rax, qword [r15+1]                          ; CODE XREF=sub_3900+953
0000000000003cc4         cmp        r13, rax
0000000000003cc7         jbe        loc_3ccf

0000000000003cc9         mov        byte [r14+r15+1], 0x27

                     loc_3ccf:
0000000000003ccf         add        r15, 0x2                                    ; CODE XREF=sub_3900+967
0000000000003cd3         xor        r10d, r10d
0000000000003cd6         xor        r8d, r8d
0000000000003cd9         jmp        loc_3c6d
0000000000003cdb         align      32

                     loc_3ce0:
0000000000003ce0         cmp        r15, 0x1                                    ; CODE XREF=sub_3900+579
0000000000003ce4         je         loc_3b49

0000000000003cea         mov        rdi, qword [rsp+0xe8+var_D8]
0000000000003cef         lea        rcx, qword [rdi+r15]
0000000000003cf3         lea        rdx, qword [rdi+r14+1]
0000000000003cf8         lea        r8, qword [rcx+r14]
0000000000003cfc         jmp        loc_3d0d
0000000000003cfe         align      256

                     loc_3d00:
0000000000003d00         add        rdx, 0x1                                    ; CODE XREF=sub_3900+1046, sub_3900+1072
0000000000003d04         cmp        r8, rdx
0000000000003d07         je         loc_3b49

                     loc_3d0d:
0000000000003d0d         movzx      ecx, byte [rdx]                             ; CODE XREF=sub_3900+1020
0000000000003d10         sub        ecx, 0x5b
0000000000003d13         cmp        cl, 0x21
0000000000003d16         ja         loc_3d00

0000000000003d18         mov        esi, 0x1
0000000000003d1d         shl        rsi, cl
0000000000003d20         mov        rcx, rsi
0000000000003d23         movabs     rsi, 0x20000002b
0000000000003d2d         test       rcx, rsi
0000000000003d30         je         loc_3d00

0000000000003d32         mov        r14, qword [rsp+0xe8+var_A8]
0000000000003d37         mov        r13, qword [rsp+0xe8+var_78]
0000000000003d3c         mov        rbp, qword [rsp+0xe8+var_B8]
0000000000003d41         mov        dword [rsp+0xe8+var_E0], 0x2

                     loc_3d49:
0000000000003d49         cmp        byte [rsp+0xe8+var_DB], 0x0                 ; CODE XREF=sub_3900+1227, sub_3900+1948, sub_3900+2585, sub_3900+2734
0000000000003d4e         je         loc_3d60

0000000000003d50         test       al, al
0000000000003d52         mov        eax, 0x4
0000000000003d57         cmove      eax, dword [rsp+0xe8+var_E0]
0000000000003d5c         mov        dword [rsp+0xe8+var_E0], eax

                     loc_3d60:
0000000000003d60         sub        rsp, 0x8                                    ; CODE XREF=sub_3900+1102
0000000000003d64         mov        rcx, rbp
0000000000003d67         mov        rsi, r13
0000000000003d6a         push       qword [rsp+0xf0+var_88]
0000000000003d6e         push       qword [rsp+0xf8+var_80]
0000000000003d72         mov        rdi, r14
0000000000003d75         push       0x0
0000000000003d77         mov        r9d, dword [rsp+0x108+var_70]
0000000000003d7f         mov        r8d, dword [rsp+0x108+var_E0]
0000000000003d84         mov        rdx, qword [rsp+0x108+var_D8]
0000000000003d89         and        r9d, 0xfffffffd
0000000000003d8d         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000003d92         add        rsp, 0x20
0000000000003d96         mov        r15, rax

                     loc_3d99:
0000000000003d99         mov        rbx, qword [rsp+0xe8+var_40]                ; CODE XREF=sub_3900+2549, sub_3900+2560, sub_3900+2711
0000000000003da1         xor        rbx, qword [fs:0x28]
0000000000003daa         mov        rax, r15
0000000000003dad         jne        loc_43b3

0000000000003db3         add        rsp, 0xb8
0000000000003dba         pop        rbx
0000000000003dbb         pop        rbp
0000000000003dbc         pop        r12
0000000000003dbe         pop        r13
0000000000003dc0         pop        r14
0000000000003dc2         pop        r15
0000000000003dc4         ret
                        ; endp
0000000000003dc5         align      8

                     loc_3dc8:
0000000000003dc8         mov        rbp, r11                                    ; CODE XREF=sub_34b0+194
0000000000003dcb         jmp        loc_3d49

                     loc_3dd0:
0000000000003dd0         cmp        r13, r15                                    ; CODE XREF=sub_3900+206, sub_3900+220
0000000000003dd3         jbe        loc_3dda

0000000000003dd5         mov        byte [r14+r15], 0x27

                     loc_3dda:
0000000000003dda         lea        rax, qword [r15+1]                          ; CODE XREF=sub_3900+1235
0000000000003dde         cmp        r13, rax
0000000000003de1         jbe        loc_3de9

0000000000003de3         mov        byte [r14+r15+1], 0x5c

                     loc_3de9:
0000000000003de9         lea        rax, qword [r15+2]                          ; CODE XREF=sub_3900+1249
0000000000003ded         cmp        r13, rax
0000000000003df0         jbe        loc_43e2

0000000000003df6         mov        rdx, r13
0000000000003df9         mov        byte [r14+r15+2], 0x27
0000000000003dff         mov        r13, qword [rsp+arg_48]
0000000000003e04         jmp        loc_39e2

                     loc_3e09:
0000000000003e09         mov        eax, r12d                                   ; CODE XREF=sub_37a0+99
0000000000003e0c         mov        ebx, 0x30
0000000000003e11         xor        r12d, r12d
0000000000003e14         jmp        sub_33b0+105
                        ; endp

                     loc_3e19:
0000000000003e19         mov        byte [r14+r15+2], 0x27                      ; CODE XREF=sub_37a0+67
0000000000003e1f         jmp        loc_37e9

                     loc_3e24:
0000000000003e24         test       ebx, ebx                                    ; case 4, CODE XREF=quotearg_buffer_restyled+145
0000000000003e26         jne        loc_3253

0000000000003e2c         mov        byte [rsp+0xe8+var_DB], 0x1

                     loc_3e31:
0000000000003e31         test       r13, r13                                    ; CODE XREF=sub_3900+2749
0000000000003e34         jne        loc_43ca

0000000000003e3a         lea        rax, qword [aLibs+29]                       ; 0x14ec5
0000000000003e41         mov        qword [rsp+0xe8+var_98], 0x0
0000000000003e4a         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000003e4f         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000003e54         xor        r12d, r12d
0000000000003e57         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000003e5c         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000003e65         mov        qword [rsp+0xe8+var_A0], rax
0000000000003e6a         mov        r15d, 0x1
0000000000003e70         mov        dword [rsp+0xe8+var_E0], 0x2
0000000000003e78         jmp        loc_3293
0000000000003e7d         align      128

                     loc_3e80:
0000000000003e80         test       ebx, ebx                                    ; case 5, CODE XREF=quotearg_buffer_restyled+145
0000000000003e82         jne        loc_427d

0000000000003e88         test       r13, r13
0000000000003e8b         je         loc_40b6

0000000000003e91         mov        byte [r14], 0x22
0000000000003e95         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000003e9a         xor        r12d, r12d
0000000000003e9d         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000003ea2         mov        qword [rsp+0xe8+var_98], 0x0

                     loc_3eab:
0000000000003eab         lea        rax, qword [aLibs+27]                       ; 0x14ec3, CODE XREF=sub_3900+1996
0000000000003eb2         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000003eb7         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000003ebc         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000003ec5         mov        r15d, 0x1
0000000000003ecb         mov        qword [rsp+0xe8+var_A0], rax
0000000000003ed0         jmp        loc_3293

                     loc_3ed5:
0000000000003ed5         lea        rax, qword [aLibs+27]                       ; case 6, 0x14ec3, CODE XREF=quotearg_buffer_restyled+145
0000000000003edc         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000003ee1         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000003ee6         xor        r12d, r12d
0000000000003ee9         mov        qword [rsp+0xe8+var_98], 0x0
0000000000003ef2         mov        byte [rsp+0xe8+var_D9], 0x1
0000000000003ef7         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000003efc         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000003f05         xor        r15d, r15d
0000000000003f08         mov        qword [rsp+0xe8+var_A0], rax
0000000000003f0d         mov        dword [rsp+0xe8+var_E0], 0x5
0000000000003f15         jmp        loc_3293

                     loc_3f1a:
0000000000003f1a         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 7, CODE XREF=quotearg_buffer_restyled+145
0000000000003f1f         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000003f24         xor        r12d, r12d
0000000000003f27         mov        qword [rsp+0xe8+var_98], 0x0
0000000000003f30         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000003f35         xor        r15d, r15d
0000000000003f38         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000003f3d         mov        qword [rsp+0xe8+var_D0], 0x0
0000000000003f46         mov        qword [rsp+0xe8+var_A0], 0x0
0000000000003f4f         jmp        loc_3293

                     loc_3f54:
0000000000003f54         cmp        dword [rsp+0xe8+var_E0], 0xa                ; case 10, CODE XREF=quotearg_buffer_restyled+145
0000000000003f59         je         loc_3fb1

0000000000003f5b         lea        rsi, qword [aLibs+31]                       ; argument "msgid" for method j_dcgettext, 0x14ec7
0000000000003f62         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003f64         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003f69         call       j_dcgettext                                 ; dcgettext
0000000000003f6e         mov        rcx, rax
0000000000003f71         mov        qword [rsp+0xe8+var_80], rax
0000000000003f76         lea        rax, qword [aLibs+31]                       ; 0x14ec7
0000000000003f7d         cmp        rcx, rax
0000000000003f80         je         loc_431e

                     loc_3f86:
0000000000003f86         lea        rsi, qword [aLibs+29]                       ; argument "msgid" for method j_dcgettext, 0x14ec5, CODE XREF=sub_3900+2607
0000000000003f8d         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003f8f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003f94         call       j_dcgettext                                 ; dcgettext
0000000000003f99         mov        rcx, rax
0000000000003f9c         mov        qword [rsp+0xe8+var_88], rax
0000000000003fa1         lea        rax, qword [aLibs+29]                       ; 0x14ec5
0000000000003fa8         cmp        rcx, rax
0000000000003fab         je         loc_4334

                     loc_3fb1:
0000000000003fb1         xor        r15d, r15d                                  ; CODE XREF=sub_3900+1625, sub_3900+2629
0000000000003fb4         test       ebx, ebx
0000000000003fb6         je         loc_417d

                     loc_3fbc:
0000000000003fbc         test       ebx, ebx                                    ; CODE XREF=sub_3900+2183, sub_3900+2214
0000000000003fbe         mov        rbx, qword [rsp+0xe8+var_88]
0000000000003fc3         setne      byte [rsp+0xe8+var_D9]
0000000000003fc8         xor        r12d, r12d
0000000000003fcb         mov        rdi, rbx                                    ; argument "__s" for method j_strlen
0000000000003fce         call       j_strlen                                    ; strlen
0000000000003fd3         mov        qword [rsp+0xe8+var_A0], rbx
0000000000003fd8         mov        qword [rsp+0xe8+var_D0], rax
0000000000003fdd         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000003fe2         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000003fe7         mov        qword [rsp+0xe8+var_98], 0x0
0000000000003ff0         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000003ff5         jmp        loc_3293

                     loc_3ffa:
0000000000003ffa         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 0, CODE XREF=quotearg_buffer_restyled+145
0000000000003fff         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000004004         xor        r12d, r12d
0000000000004007         mov        qword [rsp+0xe8+var_98], 0x0
0000000000004010         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000004015         xor        r15d, r15d
0000000000004018         mov        byte [rsp+0xe8+var_DB], 0x0
000000000000401d         mov        qword [rsp+0xe8+var_D0], 0x0
0000000000004026         mov        qword [rsp+0xe8+var_A0], 0x0
000000000000402f         jmp        loc_3293

                     loc_4034:
0000000000004034         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 3, CODE XREF=quotearg_buffer_restyled+145
0000000000004039         mov        byte [rsp+0xe8+var_6C], 0x0
000000000000403e         xor        r12d, r12d
0000000000004041         mov        qword [rsp+0xe8+var_98], 0x0
000000000000404a         mov        byte [rsp+0xe8+var_D9], 0x1
000000000000404f         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000004054         jmp        loc_3273

                     loc_4059:
0000000000004059         cmp        r13, r15                                    ; CODE XREF=sub_37a0+133
000000000000405c         jbe        loc_4063

000000000000405e         mov        byte [r14+r15], 0x30

                     loc_4063:
0000000000004063         lea        rax, qword [rcx+2]                          ; CODE XREF=sub_3900+1884
0000000000004067         cmp        r13, rax
000000000000406a         jbe        loc_4072

000000000000406c         mov        byte [r14+rcx+2], 0x30

                     loc_4072:
0000000000004072         mov        eax, r12d                                   ; CODE XREF=sub_3900+1898
0000000000004075         lea        r15, qword [rcx+3]
0000000000004079         xor        r12d, r12d
000000000000407c         mov        ebx, 0x30
0000000000004081         jmp        sub_33b0+56
                        ; endp
0000000000004086         align      16

                     loc_4090:
0000000000004090         movzx      ebx, byte [rsp+0xe8+var_D9]                 ; CODE XREF=sub_3900+731
0000000000004095         mov        rbp, r11
0000000000004098         mov        byte [rsp+0xe8+var_DB], bl
000000000000409c         jmp        loc_3d49

                     loc_40a1:
00000000000040a1         movzx      edx, byte [rsp+0xe8+var_DB]                 ; CODE XREF=sub_36a0+105
00000000000040a6         xor        r12d, r12d
00000000000040a9         jmp        loc_3bb0

                     loc_40ae:
00000000000040ae         xor        r10d, r10d                                  ; CODE XREF=sub_3900+944
00000000000040b1         jmp        loc_3c6d

                     loc_40b6:
00000000000040b6         mov        qword [rsp+0xe8+var_98], 0x0                ; CODE XREF=sub_3900+1419
00000000000040bf         mov        byte [rsp+0xe8+var_DA], 0x1
00000000000040c4         xor        r12d, r12d
00000000000040c7         mov        byte [rsp+0xe8+var_6C], 0x0
00000000000040cc         jmp        loc_3eab

                     loc_40d1:
00000000000040d1         mov        r11, qword [rsp+0xe8+var_B8]                ; CODE XREF=sub_3900+561
00000000000040d6         mov        rsi, r14
00000000000040d9         mov        rcx, r13
00000000000040dc         mov        rax, rbx
00000000000040df         mov        rdi, rbx
00000000000040e2         movzx      r8d, byte [rsp+0xe8+var_6B]
00000000000040e8         movzx      ebx, byte [rsp+0xe8+var_6A]
00000000000040ed         mov        r9, qword [rsp+0xe8+var_60]
00000000000040f5         cmp        rsi, r11
00000000000040f8         movzx      r10d, byte [rsp+0xe8+var_69]
00000000000040fe         mov        r15, qword [rsp+0xe8+var_68]
0000000000004106         mov        r14, qword [rsp+0xe8+var_A8]
000000000000410b         mov        r13, qword [rsp+0xe8+var_78]
0000000000004110         jae        loc_4138

0000000000004112         cmp        byte [rcx], 0x0
0000000000004115         jne        loc_4127

0000000000004117         jmp        loc_4138
0000000000004119         align      32

                     loc_4120:
0000000000004120         cmp        byte [r9+rax], 0x0                          ; CODE XREF=sub_3900+2099
0000000000004125         je         loc_4135

                     loc_4127:
0000000000004127         add        rax, 0x1                                    ; CODE XREF=sub_3900+2069
000000000000412b         lea        rdx, qword [rbp+rax]
0000000000004130         cmp        r11, rdx
0000000000004133         ja         loc_4120

                     loc_4135:
0000000000004135         mov        rdi, rax                                    ; CODE XREF=sub_3900+2085

                     loc_4138:
0000000000004138         movzx      edx, byte [rsp+0xe8+var_DB]                 ; CODE XREF=sub_3900+2064, sub_3900+2071
000000000000413d         xor        r12d, r12d
0000000000004140         jmp        loc_3ba6

                     loc_4145:
0000000000004145         mov        rdi, rbx                                    ; CODE XREF=sub_3900+551
0000000000004148         movzx      r8d, byte [rsp+0xe8+var_6B]
000000000000414e         movzx      ebx, byte [rsp+0xe8+var_6A]
0000000000004153         movzx      r10d, byte [rsp+0xe8+var_69]
0000000000004159         mov        r15, qword [rsp+0xe8+var_68]
0000000000004161         xor        r12d, r12d
0000000000004164         mov        r14, qword [rsp+0xe8+var_A8]
0000000000004169         mov        r13, qword [rsp+0xe8+var_78]
000000000000416e         mov        r11, qword [rsp+0xe8+var_B8]
0000000000004173         movzx      edx, byte [rsp+0xe8+var_DB]
0000000000004178         jmp        loc_3ba6

                     loc_417d:
000000000000417d         mov        rdx, qword [rsp+0xe8+var_80]                ; CODE XREF=sub_3900+1718
0000000000004182         movzx      eax, byte [rdx]
0000000000004185         test       al, al
0000000000004187         je         loc_3fbc

000000000000418d         nop        dword [rax]

                     loc_4190:
0000000000004190         cmp        r13, r15                                    ; CODE XREF=sub_3900+2212
0000000000004193         jbe        loc_4199

0000000000004195         mov        byte [r14+r15], al

                     loc_4199:
0000000000004199         add        r15, 0x1                                    ; CODE XREF=sub_3900+2195
000000000000419d         movzx      eax, byte [rdx+r15]
00000000000041a2         test       al, al
00000000000041a4         jne        loc_4190

00000000000041a6         jmp        loc_3fbc

                     loc_41ab:
00000000000041ab         mov        eax, edx                                    ; CODE XREF=sub_3900+682
00000000000041ad         jmp        loc_3707

                     loc_41b2:
00000000000041b2         movzx      ebx, byte [rax+rcx]                         ; CODE XREF=sub_3900+290
00000000000041b6         cmp        bl, 0x3e
00000000000041b9         ja         loc_3a30

00000000000041bf         movabs     rax, 0x7000a38200000000
00000000000041c9         bt         rax, rbx
00000000000041cd         jae        loc_3a30

00000000000041d3         cmp        byte [rsp+arg_7], 0x0
00000000000041d8         jne        loc_43c2

00000000000041de         cmp        r13, r15
00000000000041e1         jbe        loc_41e8

00000000000041e3         mov        byte [r14+r15], 0x3f

                     loc_41e8:
00000000000041e8         lea        rax, qword [r15+1]                          ; CODE XREF=sub_3900+2273
00000000000041ec         cmp        r13, rax
00000000000041ef         jbe        loc_41f7

00000000000041f1         mov        byte [r14+r15+1], 0x22

                     loc_41f7:
00000000000041f7         lea        rax, qword [r15+2]                          ; CODE XREF=sub_3900+2287
00000000000041fb         cmp        r13, rax
00000000000041fe         jbe        loc_4206

0000000000004200         mov        byte [r14+r15+2], 0x22

                     loc_4206:
0000000000004206         lea        rax, qword [r15+3]                          ; CODE XREF=sub_3900+2302
000000000000420a         cmp        r13, rax
000000000000420d         jbe        loc_4215

000000000000420f         mov        byte [r14+r15+3], 0x3f

                     loc_4215:
0000000000004215         add        r15, 0x4                                    ; CODE XREF=sub_3900+2317
0000000000004219         xor        edx, edx
000000000000421b         xor        r12d, r12d
000000000000421e         xor        eax, eax
0000000000004220         mov        rbp, rcx
0000000000004223         jmp        sub_33b0+56
                        ; endp

                     loc_4228:
0000000000004228         test       ebx, ebx                                    ; case 2, CODE XREF=quotearg_buffer_restyled+145
000000000000422a         je         loc_43b8

0000000000004230         lea        rax, qword [aLibs+29]                       ; 0x14ec5
0000000000004237         mov        byte [rsp+0xe8+var_DA], 0x1
000000000000423c         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000004241         xor        r12d, r12d
0000000000004244         mov        qword [rsp+0xe8+var_98], 0x0
000000000000424d         mov        byte [rsp+0xe8+var_D9], 0x1
0000000000004252         mov        byte [rsp+0xe8+var_DB], 0x0
0000000000004257         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000004260         xor        r15d, r15d
0000000000004263         mov        qword [rsp+0xe8+var_A0], rax
0000000000004268         jmp        loc_3293
000000000000426d         align      16

                     loc_4270:
0000000000004270         mov        rbp, r11                                    ; CODE XREF=sub_3900+5
0000000000004273         movzx      eax, byte [rsp+arg_7]
0000000000004278         jmp        sub_3900+1097
                        ; endp

                     loc_427d:
000000000000427d         lea        rax, qword [aLibs+27]                       ; 0x14ec3, CODE XREF=sub_3900+1410
0000000000004284         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000004289         mov        byte [rsp+0xe8+var_6C], 0x0
000000000000428e         xor        r12d, r12d
0000000000004291         mov        qword [rsp+0xe8+var_98], 0x0
000000000000429a         mov        byte [rsp+0xe8+var_D9], 0x1
000000000000429f         mov        byte [rsp+0xe8+var_DB], 0x1
00000000000042a4         mov        qword [rsp+0xe8+var_D0], 0x1
00000000000042ad         xor        r15d, r15d
00000000000042b0         mov        qword [rsp+0xe8+var_A0], rax
00000000000042b5         jmp        loc_3293

                     loc_42ba:
00000000000042ba         mov        eax, edx                                    ; CODE XREF=sub_3900+87

                     loc_42bc:
00000000000042bc         mov        rbx, qword [rsp+0xe8+var_A0]                ; CODE XREF=sub_3900+76, sub_3900+2721
00000000000042c1         test       rbx, rbx
00000000000042c4         je         loc_42f2

00000000000042c6         test       al, al
00000000000042c8         je         loc_42f2

00000000000042ca         movzx      ecx, byte [rbx]
00000000000042cd         mov        rax, rbx
00000000000042d0         test       cl, cl
00000000000042d2         je         loc_42f2

00000000000042d4         mov        rdx, r15
00000000000042d7         sub        rax, r15

                     loc_42da:
00000000000042da         cmp        r13, rdx                                    ; CODE XREF=sub_3900+2541
00000000000042dd         jbe        loc_42e3

00000000000042df         mov        byte [r14+rdx], cl

                     loc_42e3:
00000000000042e3         add        rdx, 0x1                                    ; CODE XREF=sub_3900+2525
00000000000042e7         movzx      ecx, byte [rax+rdx]
00000000000042eb         test       cl, cl
00000000000042ed         jne        loc_42da

00000000000042ef         mov        r15, rdx

                     loc_42f2:
00000000000042f2         cmp        r13, r15                                    ; CODE XREF=sub_3900+2500, sub_3900+2504, sub_3900+2514
00000000000042f5         jbe        loc_3d99

00000000000042fb         mov        byte [r14+r15], 0x0
0000000000004300         jmp        loc_3d99

                     loc_4305:
0000000000004305         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=quotearg_buffer_restyled+450
000000000000430a         movzx      ebx, byte [rsp+0xe8+var_D9]
000000000000430f         mov        rbp, r11
0000000000004312         sete       al
0000000000004315         mov        byte [rsp+0xe8+var_DB], bl
0000000000004319         jmp        loc_3d49

                     loc_431e:
000000000000431e         mov        esi, dword [rsp+0xe8+var_E0]                ; CODE XREF=sub_3900+1664
0000000000004322         mov        rdi, rcx
0000000000004325         call       gettext_quote.part.1                        ; gettext_quote.part.1
000000000000432a         mov        qword [rsp+0xe8+var_80], rax
000000000000432f         jmp        loc_3f86

                     loc_4334:
0000000000004334         mov        esi, dword [rsp+0xe8+var_E0]                ; CODE XREF=sub_3900+1707
0000000000004338         mov        rdi, rcx
000000000000433b         call       gettext_quote.part.1                        ; gettext_quote.part.1
0000000000004340         mov        qword [rsp+0xe8+var_88], rax
0000000000004345         jmp        loc_3fb1

                     loc_434a:
000000000000434a         movzx      ebx, byte [rsp+arg_7]                       ; CODE XREF=sub_37a0+16
000000000000434f         mov        rbp, r11
0000000000004352         mov        eax, edx
0000000000004354         mov        byte [rsp+arg_5], bl
0000000000004358         jmp        sub_3900+1097
                        ; endp

                     loc_435d:
000000000000435d         sub        rsp, 0x8                                    ; CODE XREF=sub_3900+98
0000000000004361         mov        r8d, 0x5
0000000000004367         mov        rcx, r11
000000000000436a         push       qword [rsp+0xf0+var_88]
000000000000436e         push       qword [rsp+0xf8+var_80]
0000000000004372         mov        rdi, r14
0000000000004375         push       qword [rsp+0x100+var_C8]
0000000000004379         mov        r9d, dword [rsp+0x108+var_70]
0000000000004381         mov        rdx, qword [rsp+0x108+var_D8]
0000000000004386         mov        rsi, qword [rsp+0x108+var_98]
000000000000438b         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000004390         add        rsp, 0x20
0000000000004394         mov        r15, rax
0000000000004397         jmp        loc_3d99

                     loc_439c:
000000000000439c         movzx      eax, byte [rsp+0xe8+var_6C]                 ; CODE XREF=sub_3900+121
00000000000043a1         jmp        loc_42bc

                     loc_43a6:
00000000000043a6         mov        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_3900+63
00000000000043ae         jmp        loc_3d49

                     loc_43b3:
00000000000043b3         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=sub_3900+1197
                        ; endp

                     loc_43b8:
00000000000043b8         mov        byte [rsp+0xe8+var_DB], 0x0                 ; CODE XREF=sub_3900+2346
00000000000043bd         jmp        loc_3e31

                     loc_43c2:
00000000000043c2         mov        rbp, r11                                    ; CODE XREF=sub_3900+2264
00000000000043c5         jmp        sub_3900+1120
                        ; endp

                     loc_43ca:
00000000000043ca         mov        byte [rsp+0xe8+var_DA], 0x1                 ; CODE XREF=sub_3900+1332
00000000000043cf         xor        eax, eax
00000000000043d1         xor        r12d, r12d
00000000000043d4         mov        qword [rsp+0xe8+var_98], 0x0
00000000000043dd         jmp        loc_3984

                     loc_43e2:
00000000000043e2         mov        rdx, r13                                    ; CODE XREF=sub_3900+1264
00000000000043e5         mov        r13, qword [rsp+arg_48]
00000000000043ea         jmp        loc_39e2

                     loc_43ef:
00000000000043ef         call       j_abort                                     ; abort, CODE XREF=quotearg_buffer_restyled+122
                        ; endp
00000000000043f4         align      1024                                        ; End of unwind block (FDE at 0x169a8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_3C: int32_t, -60
        ;    var_40: int32_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80


                     quotearg_n_options:
0000000000004400         push       r15                                         ; Begin of unwind block (FDE at 0x16a20), CODE XREF=quotearg_n+14, quotearg_n_mem+7, quotearg+19, quotearg_mem+15, quotearg_n_style+106, quotearg_n_style_mem+102, quotearg_char_mem+121, quotearg_n_style_colon+106, quotearg_n_custom_mem+109, quote_n_mem+7, quote_mem+15
0000000000004402         push       r14
0000000000004404         movsxd     r15, edi
0000000000004407         push       r13
0000000000004409         push       r12
000000000000440b         mov        r14, rdx
000000000000440e         push       rbp
000000000000440f         push       rbx
0000000000004410         mov        rbp, rcx
0000000000004413         sub        rsp, 0x28
0000000000004417         mov        qword [rsp+0x58+var_50], rsi
000000000000441c         call       j___errno_location                          ; __errno_location
0000000000004421         mov        r13, rax
0000000000004424         mov        eax, dword [rax]
0000000000004426         test       r15d, r15d
0000000000004429         mov        rbx, qword [slotvec]                        ; slotvec
0000000000004430         mov        dword [rsp+0x58+var_40], eax
0000000000004434         js         loc_45a1

000000000000443a         cmp        dword [nslots], r15d                        ; nslots
0000000000004441         jg         loc_44a5

0000000000004443         cmp        r15d, 0x7fffffff
000000000000444a         je         loc_45a6

0000000000004450         lea        r12d, dword [r15+1]
0000000000004454         lea        rax, qword [slotvec0]                       ; slotvec0
000000000000445b         movsxd     rsi, r12d
000000000000445e         shl        rsi, 0x4
0000000000004462         cmp        rbx, rax
0000000000004465         je         loc_4580

000000000000446b         mov        rdi, rbx                                    ; argument #1 for method xrealloc
000000000000446e         call       xrealloc                                    ; xrealloc
0000000000004473         mov        rbx, rax
0000000000004476         mov        qword [slotvec], rax                        ; slotvec

                     loc_447d:
000000000000447d         movsxd     rdi, dword [nslots]                         ; nslots, CODE XREF=quotearg_n_options+412
0000000000004484         mov        edx, r12d
0000000000004487         xor        esi, esi                                    ; argument "__c" for method j_memset
0000000000004489         sub        edx, edi
000000000000448b         shl        rdi, 0x4
000000000000448f         movsxd     rdx, edx
0000000000004492         add        rdi, rbx                                    ; argument "__s" for method j_memset
0000000000004495         shl        rdx, 0x4                                    ; argument "__n" for method j_memset
0000000000004499         call       j_memset                                    ; memset
000000000000449e         mov        dword [nslots], r12d                        ; nslots

                     loc_44a5:
00000000000044a5         mov        eax, dword [rbp+4]                          ; CODE XREF=quotearg_n_options+65
00000000000044a8         shl        r15, 0x4
00000000000044ac         sub        rsp, 0x8
00000000000044b0         add        rbx, r15
00000000000044b3         lea        r15, qword [rbp+8]
00000000000044b7         mov        r8d, dword [rbp]                            ; argument #5 for method quotearg_buffer_restyled
00000000000044bb         mov        r11, qword [rbx]
00000000000044be         mov        r12, qword [rbx+8]
00000000000044c2         mov        rcx, r14                                    ; argument #4 for method quotearg_buffer_restyled
00000000000044c5         or         eax, 0x1
00000000000044c8         mov        dword [rsp+0x60+var_3C], eax
00000000000044cc         push       qword [rbp+0x30]                            ; argument #9 for method quotearg_buffer_restyled
00000000000044cf         mov        r9d, eax                                    ; argument #6 for method quotearg_buffer_restyled
00000000000044d2         push       qword [rbp+0x28]                            ; argument #8 for method quotearg_buffer_restyled
00000000000044d5         push       r15                                         ; argument #7 for method quotearg_buffer_restyled
00000000000044d7         mov        rsi, r11                                    ; argument #2 for method quotearg_buffer_restyled
00000000000044da         mov        rdx, qword [rsp+0x78+var_50]                ; argument #3 for method quotearg_buffer_restyled
00000000000044df         mov        rdi, r12                                    ; argument #1 for method quotearg_buffer_restyled
00000000000044e2         mov        qword [rsp+0x78+var_48], r11
00000000000044e7         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
00000000000044ec         add        rsp, 0x20
00000000000044f0         mov        r11, qword [rsp+0x58+var_48]
00000000000044f5         cmp        r11, rax
00000000000044f8         ja         loc_4561

00000000000044fa         lea        rsi, qword [rax+1]
00000000000044fe         lea        rax, qword [slot0]                          ; slot0
0000000000004505         cmp        r12, rax
0000000000004508         mov        qword [rbx], rsi
000000000000450b         je         loc_451f

000000000000450d         mov        rdi, r12                                    ; argument "__ptr" for method j_free
0000000000004510         mov        qword [rsp+0x58+var_48], rsi
0000000000004515         call       j_free                                      ; free
000000000000451a         mov        rsi, qword [rsp+0x58+var_48]

                     loc_451f:
000000000000451f         mov        rdi, rsi                                    ; argument #1 for method xmalloc, CODE XREF=quotearg_n_options+267
0000000000004522         mov        qword [rsp+0x58+var_48], rsi
0000000000004527         call       xmalloc                                     ; xmalloc
000000000000452c         sub        rsp, 0x8
0000000000004530         mov        qword [rbx+8], rax
0000000000004534         mov        r8d, dword [rbp]                            ; argument #5 for method quotearg_buffer_restyled
0000000000004538         push       qword [rbp+0x30]                            ; argument #9 for method quotearg_buffer_restyled
000000000000453b         push       qword [rbp+0x28]                            ; argument #8 for method quotearg_buffer_restyled
000000000000453e         mov        rcx, r14                                    ; argument #4 for method quotearg_buffer_restyled
0000000000004541         push       r15                                         ; argument #7 for method quotearg_buffer_restyled
0000000000004543         mov        r9d, dword [rsp+0x78+var_3C]                ; argument #6 for method quotearg_buffer_restyled
0000000000004548         mov        rdi, rax                                    ; argument #1 for method quotearg_buffer_restyled
000000000000454b         mov        rdx, qword [rsp+0x78+var_50]                ; argument #3 for method quotearg_buffer_restyled
0000000000004550         mov        rsi, qword [rsp+0x78+var_48]                ; argument #2 for method quotearg_buffer_restyled
0000000000004555         mov        r12, rax
0000000000004558         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
000000000000455d         add        rsp, 0x20

                     loc_4561:
0000000000004561         mov        eax, dword [rsp+0x58+var_40]                ; CODE XREF=quotearg_n_options+248
0000000000004565         mov        dword [r13], eax
0000000000004569         add        rsp, 0x28
000000000000456d         mov        rax, r12
0000000000004570         pop        rbx
0000000000004571         pop        rbp
0000000000004572         pop        r12
0000000000004574         pop        r13
0000000000004576         pop        r14
0000000000004578         pop        r15
000000000000457a         ret
                        ; endp
000000000000457b         align      128

                     loc_4580:
0000000000004580         xor        edi, edi                                    ; argument #1 for method xrealloc, CODE XREF=quotearg_n_options+101
0000000000004582         call       xrealloc                                    ; xrealloc
0000000000004587         movdqa     xmm0, xmmword [slotvec0]                    ; slotvec0
000000000000458f         mov        rbx, rax
0000000000004592         mov        qword [slotvec], rax                        ; slotvec
0000000000004599         movups     xmmword [rax], xmm0
000000000000459c         jmp        loc_447d

                     loc_45a1:
00000000000045a1         call       j_abort                                     ; abort, CODE XREF=quotearg_n_options+52
                        ; endp

                     loc_45a6:
00000000000045a6         call       xalloc_die                                  ; xalloc_die, CODE XREF=quotearg_n_options+74
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_45ab:
00000000000045ab         nop        dword [rax+rax]                             ; End of unwind block (FDE at 0x16a20)
                     clone_quoting_options:
00000000000045b0         push       r12                                         ; Begin of unwind block (FDE at 0x16a8c)
00000000000045b2         push       rbp
00000000000045b3         push       rbx
00000000000045b4         mov        rbx, rdi
00000000000045b7         call       j___errno_location                          ; __errno_location
00000000000045bc         mov        r12d, dword [rax]
00000000000045bf         mov        rbp, rax
00000000000045c2         lea        rax, qword [default_quoting_options]        ; default_quoting_options
00000000000045c9         test       rbx, rbx
00000000000045cc         mov        esi, 0x38                                   ; argument #2 for method xmemdup
00000000000045d1         cmove      rbx, rax
00000000000045d5         mov        rdi, rbx                                    ; argument #1 for method xmemdup
00000000000045d8         call       xmemdup                                     ; xmemdup
00000000000045dd         mov        dword [rbp], r12d
00000000000045e1         pop        rbx
00000000000045e2         pop        rbp
00000000000045e3         pop        r12
00000000000045e5         ret
                        ; endp
00000000000045e6         align      16                                          ; End of unwind block (FDE at 0x16a8c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     get_quoting_style:
00000000000045f0         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x16ab8), default_quoting_options
00000000000045f7         test       rdi, rdi
00000000000045fa         cmove      rdi, rax
00000000000045fe         mov        eax, dword [rdi]
0000000000004600         ret
                        ; endp
0000000000004601         align      16                                          ; End of unwind block (FDE at 0x16ab8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_quoting_style:
0000000000004610         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x16acc), default_quoting_options
0000000000004617         test       rdi, rdi
000000000000461a         cmove      rdi, rax
000000000000461e         mov        dword [rdi], esi
0000000000004620         ret
                        ; endp
0000000000004621         align      16                                          ; End of unwind block (FDE at 0x16acc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_char_quoting:
0000000000004630         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x16ae0), default_quoting_options
0000000000004637         test       rdi, rdi
000000000000463a         mov        ecx, esi
000000000000463c         cmove      rdi, rax
0000000000004640         mov        eax, esi
0000000000004642         and        ecx, 0x1f
0000000000004645         shr        al, 0x5
0000000000004648         movzx      eax, al
000000000000464b         lea        rdi, qword [rdi+rax*4+8]
0000000000004650         mov        esi, dword [rdi]
0000000000004652         mov        eax, esi
0000000000004654         shr        eax, cl
0000000000004656         xor        edx, eax
0000000000004658         and        eax, 0x1
000000000000465b         and        edx, 0x1
000000000000465e         shl        edx, cl
0000000000004660         xor        edx, esi
0000000000004662         mov        dword [rdi], edx
0000000000004664         ret
                        ; endp
0000000000004665         align      16                                          ; End of unwind block (FDE at 0x16ae0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_quoting_flags:
0000000000004670         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x16af4), default_quoting_options
0000000000004677         test       rdi, rdi
000000000000467a         cmove      rdi, rax
000000000000467e         mov        eax, dword [rdi+4]
0000000000004681         mov        dword [rdi+4], esi
0000000000004684         ret
                        ; endp
0000000000004685         align      16                                          ; End of unwind block (FDE at 0x16af4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_custom_quoting:
0000000000004690         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x16b08), default_quoting_options
0000000000004697         test       rdi, rdi
000000000000469a         cmove      rdi, rax
000000000000469e         test       rsi, rsi
00000000000046a1         mov        dword [rdi], 0xa
00000000000046a7         je         loc_46b7

00000000000046a9         test       rdx, rdx
00000000000046ac         je         loc_46b7

00000000000046ae         mov        qword [rdi+0x28], rsi
00000000000046b2         mov        qword [rdi+0x30], rdx
00000000000046b6         ret
                        ; endp

                     loc_46b7:
00000000000046b7         sub        rsp, 0x8                                    ; CODE XREF=set_custom_quoting+23, set_custom_quoting+28
00000000000046bb         call       j_abort                                     ; abort
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64


                     quotearg_buffer:
00000000000046c0         push       r15                                         ; End of unwind block (FDE at 0x16b08), Begin of unwind block (FDE at 0x16b1c)
00000000000046c2         push       r14
00000000000046c4         lea        rax, qword [default_quoting_options]        ; default_quoting_options
00000000000046cb         push       r13
00000000000046cd         push       r12
00000000000046cf         mov        r13, rdi
00000000000046d2         push       rbp
00000000000046d3         push       rbx
00000000000046d4         mov        rbx, r8
00000000000046d7         mov        r14, rsi
00000000000046da         mov        r15, rdx
00000000000046dd         sub        rsp, 0x18
00000000000046e1         test       r8, r8
00000000000046e4         cmove      rbx, rax
00000000000046e8         mov        qword [rsp+0x48+var_40], rcx
00000000000046ed         call       j___errno_location                          ; __errno_location
00000000000046f2         mov        r12d, dword [rax]
00000000000046f5         mov        rbp, rax
00000000000046f8         lea        rax, qword [rbx+8]
00000000000046fc         sub        rsp, 0x8
0000000000004700         mov        r9d, dword [rbx+4]
0000000000004704         push       qword [rbx+0x30]
0000000000004707         mov        r8d, dword [rbx]
000000000000470a         push       qword [rbx+0x28]
000000000000470d         mov        rdx, r15
0000000000004710         push       rax
0000000000004711         mov        rcx, qword [rsp+0x68+var_40]
0000000000004716         mov        rsi, r14
0000000000004719         mov        rdi, r13
000000000000471c         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000004721         mov        dword [rbp], r12d
0000000000004725         add        rsp, 0x38
0000000000004729         pop        rbx
000000000000472a         pop        rbp
000000000000472b         pop        r12
000000000000472d         pop        r13
000000000000472f         pop        r14
0000000000004731         pop        r15
0000000000004733         ret
                        ; endp
0000000000004734         align      64                                          ; End of unwind block (FDE at 0x16b1c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_5C: int32_t, -92


                     quotearg_alloc_mem:
0000000000004740         push       r15                                         ; Begin of unwind block (FDE at 0x16b70), CODE XREF=quotearg_alloc+5
0000000000004742         push       r14
0000000000004744         lea        rax, qword [default_quoting_options]        ; default_quoting_options
000000000000474b         push       r13
000000000000474d         push       r12
000000000000474f         mov        r12, rdx
0000000000004752         push       rbp
0000000000004753         push       rbx
0000000000004754         mov        rbx, rcx
0000000000004757         mov        r14, rdi
000000000000475a         mov        r15, rsi
000000000000475d         sub        rsp, 0x38
0000000000004761         test       rcx, rcx
0000000000004764         cmove      rbx, rax
0000000000004768         xor        ebp, ebp
000000000000476a         call       j___errno_location                          ; __errno_location
000000000000476f         test       r12, r12
0000000000004772         mov        r13, rax
0000000000004775         mov        eax, dword [rax]
0000000000004777         sete       bpl
000000000000477b         or         ebp, dword [rbx+4]
000000000000477e         lea        r10, qword [rbx+8]
0000000000004782         sub        rsp, 0x8
0000000000004786         mov        r8d, dword [rbx]
0000000000004789         mov        rcx, r15
000000000000478c         mov        dword [rsp+0x70+var_5C], eax
0000000000004790         push       qword [rbx+0x30]
0000000000004793         mov        rdx, r14
0000000000004796         push       qword [rbx+0x28]
0000000000004799         push       r10
000000000000479b         xor        esi, esi
000000000000479d         mov        r9d, ebp
00000000000047a0         xor        edi, edi
00000000000047a2         mov        qword [rsp+0x88+var_48], r10
00000000000047a7         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
00000000000047ac         lea        rsi, qword [rax+1]
00000000000047b0         mov        qword [rsp+0x88+var_40], rax
00000000000047b5         add        rsp, 0x20
00000000000047b9         mov        rdi, rsi
00000000000047bc         mov        qword [rsp+0x68+var_50], rsi
00000000000047c1         call       xmalloc                                     ; xmalloc
00000000000047c6         mov        qword [rsp+0x68+var_58], rax
00000000000047cb         sub        rsp, 0x8
00000000000047cf         push       qword [rbx+0x30]
00000000000047d2         push       qword [rbx+0x28]
00000000000047d5         mov        r10, qword [rsp+0x80+var_48]
00000000000047da         mov        r9d, ebp
00000000000047dd         mov        r8d, dword [rbx]
00000000000047e0         mov        rcx, r15
00000000000047e3         mov        rdx, r14
00000000000047e6         mov        rdi, rax
00000000000047e9         push       r10
00000000000047eb         mov        rsi, qword [rsp+0x88+var_50]
00000000000047f0         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
00000000000047f5         mov        eax, dword [rsp+0x88+var_5C]
00000000000047f9         add        rsp, 0x20
00000000000047fd         test       r12, r12
0000000000004800         mov        dword [r13], eax
0000000000004804         je         loc_480f

0000000000004806         mov        r11, qword [rsp+0x68+var_40]
000000000000480b         mov        qword [r12], r11

                     loc_480f:
000000000000480f         mov        rax, qword [rsp+0x68+var_58]                ; CODE XREF=quotearg_alloc_mem+196
0000000000004814         add        rsp, 0x38
0000000000004818         pop        rbx
0000000000004819         pop        rbp
000000000000481a         pop        r12
000000000000481c         pop        r13
000000000000481e         pop        r14
0000000000004820         pop        r15
0000000000004822         ret
                        ; endp
0000000000004823         align      16                                          ; End of unwind block (FDE at 0x16b70)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_alloc:
0000000000004830         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0x16bdc)
0000000000004833         xor        edx, edx
0000000000004835         jmp        quotearg_alloc_mem                          ; quotearg_alloc_mem
                        ; endp
000000000000483a         align      64                                          ; End of unwind block (FDE at 0x16bdc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_free:
0000000000004840         mov        eax, dword [nslots]                         ; Begin of unwind block (FDE at 0x16bf0), nslots
0000000000004846         push       r12
0000000000004848         mov        r12, qword [slotvec]                        ; slotvec
000000000000484f         push       rbp
0000000000004850         push       rbx
0000000000004851         cmp        eax, 0x1
0000000000004854         jle        loc_4881

0000000000004856         sub        eax, 0x2
0000000000004859         lea        rbx, qword [r12+0x18]
000000000000485e         shl        rax, 0x4
0000000000004862         lea        rbp, qword [r12+rax+0x28]
0000000000004867         nop        word [rax+rax]

                     loc_4870:
0000000000004870         mov        rdi, qword [rbx]                            ; argument "__ptr" for method j_free, CODE XREF=quotearg_free+63
0000000000004873         add        rbx, 0x10
0000000000004877         call       j_free                                      ; free
000000000000487c         cmp        rbx, rbp
000000000000487f         jne        loc_4870

                     loc_4881:
0000000000004881         mov        rdi, qword [r12+8]                          ; CODE XREF=quotearg_free+20
0000000000004886         lea        rbx, qword [slot0]                          ; slot0
000000000000488d         cmp        rdi, rbx
0000000000004890         je         loc_48a9

0000000000004892         call       j_free                                      ; free
0000000000004897         mov        qword [slotvec0], 0x100                     ; slotvec0
00000000000048a2         mov        qword [slotvec0+8], rbx                     ; 0x2190d8

                     loc_48a9:
00000000000048a9         lea        rbx, qword [slotvec0]                       ; slotvec0, CODE XREF=quotearg_free+80
00000000000048b0         cmp        r12, rbx
00000000000048b3         je         loc_48c4

00000000000048b5         mov        rdi, r12                                    ; argument "__ptr" for method j_free
00000000000048b8         call       j_free                                      ; free
00000000000048bd         mov        qword [slotvec], rbx                        ; slotvec

                     loc_48c4:
00000000000048c4         pop        rbx                                         ; CODE XREF=quotearg_free+115
00000000000048c5         mov        dword [nslots], 0x1                         ; nslots
00000000000048cf         pop        rbp
00000000000048d0         pop        r12
00000000000048d2         ret
                        ; endp
00000000000048d3         align      32                                          ; End of unwind block (FDE at 0x16bf0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_n:
00000000000048e0         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x16c1c), default_quoting_options
00000000000048e7         mov        rdx, 0xffffffffffffffff
00000000000048ee         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
00000000000048f3         align      256                                         ; End of unwind block (FDE at 0x16c1c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_n_mem:
0000000000004900         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x16c30), default_quoting_options
0000000000004907         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
000000000000490c         align      16                                          ; End of unwind block (FDE at 0x16c30)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg:
0000000000004910         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x16c44), default_quoting_options
0000000000004917         mov        rsi, rdi
000000000000491a         mov        rdx, 0xffffffffffffffff
0000000000004921         xor        edi, edi
0000000000004923         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000004928         align      16                                          ; End of unwind block (FDE at 0x16c44)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_mem:
0000000000004930         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x16c58), default_quoting_options
0000000000004937         mov        rdx, rsi
000000000000493a         mov        rsi, rdi
000000000000493d         xor        edi, edi
000000000000493f         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000004944         align      16                                          ; End of unwind block (FDE at 0x16c58)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_n_style:
0000000000004950         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0x16c6c)
0000000000004954         mov        rax, rdx
0000000000004957         mov        rdx, qword [fs:0x28]
0000000000004960         mov        qword [rsp+0x48+var_10], rdx
0000000000004965         xor        edx, edx
0000000000004967         cmp        esi, 0xa
000000000000496a         je         loc_49d4

000000000000496c         mov        dword [rsp+0x48+var_48], esi
000000000000496f         mov        rcx, rsp
0000000000004972         mov        rdx, 0xffffffffffffffff
0000000000004979         mov        rsi, rax
000000000000497c         mov        qword [rsp+0x48+var_44], 0x0
0000000000004985         mov        qword [rsp+0x48+var_3C], 0x0
000000000000498e         mov        qword [rsp+0x48+var_34], 0x0
0000000000004997         mov        qword [rsp+0x48+var_2C], 0x0
00000000000049a0         mov        qword [rsp+0x48+var_24], 0x0
00000000000049a9         mov        qword [rsp+0x48+var_1C], 0x0
00000000000049b2         mov        dword [rsp+0x48+var_14], 0x0
00000000000049ba         call       quotearg_n_options                          ; quotearg_n_options
00000000000049bf         mov        rcx, qword [rsp+0x48+var_10]
00000000000049c4         xor        rcx, qword [fs:0x28]
00000000000049cd         jne        loc_49d9

00000000000049cf         add        rsp, 0x48
00000000000049d3         ret
                        ; endp

                     loc_49d4:
00000000000049d4         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style+26
                        ; endp

                     loc_49d9:
00000000000049d9         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style+125
                        ; endp
00000000000049de         align      32                                          ; End of unwind block (FDE at 0x16c6c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_n_style_mem:
00000000000049e0         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0x16c88), CODE XREF=quotearg_style_mem+10
00000000000049e4         mov        rax, rdx
00000000000049e7         mov        rdx, rcx
00000000000049ea         mov        rcx, qword [fs:0x28]
00000000000049f3         mov        qword [rsp+0x48+var_10], rcx
00000000000049f8         xor        ecx, ecx
00000000000049fa         cmp        esi, 0xa
00000000000049fd         je         loc_4a60

00000000000049ff         mov        dword [rsp+0x48+var_48], esi
0000000000004a02         mov        rcx, rsp
0000000000004a05         mov        rsi, rax
0000000000004a08         mov        qword [rsp+0x48+var_44], 0x0
0000000000004a11         mov        qword [rsp+0x48+var_3C], 0x0
0000000000004a1a         mov        qword [rsp+0x48+var_34], 0x0
0000000000004a23         mov        qword [rsp+0x48+var_2C], 0x0
0000000000004a2c         mov        qword [rsp+0x48+var_24], 0x0
0000000000004a35         mov        qword [rsp+0x48+var_1C], 0x0
0000000000004a3e         mov        dword [rsp+0x48+var_14], 0x0
0000000000004a46         call       quotearg_n_options                          ; quotearg_n_options
0000000000004a4b         mov        rdx, qword [rsp+0x48+var_10]
0000000000004a50         xor        rdx, qword [fs:0x28]
0000000000004a59         jne        loc_4a65

0000000000004a5b         add        rsp, 0x48
0000000000004a5f         ret
                        ; endp

                     loc_4a60:
0000000000004a60         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style_mem+29
                        ; endp

                     loc_4a65:
0000000000004a65         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style_mem+121
                        ; endp
0000000000004a6a         align      16                                          ; End of unwind block (FDE at 0x16c88)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_style:
0000000000004a70         mov        rdx, rsi                                    ; Begin of unwind block (FDE at 0x16ca4)
0000000000004a73         mov        esi, edi
0000000000004a75         xor        edi, edi
0000000000004a77         jmp        quotearg_n_style                            ; quotearg_n_style
                        ; endp
0000000000004a7c         align      128                                         ; End of unwind block (FDE at 0x16ca4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_style_mem:
0000000000004a80         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0x16cb8)
0000000000004a83         mov        rdx, rsi
0000000000004a86         mov        esi, edi
0000000000004a88         xor        edi, edi
0000000000004a8a         jmp        quotearg_n_style_mem                        ; quotearg_n_style_mem
                        ; endp
0000000000004a8f         align      16                                          ; End of unwind block (FDE at 0x16cb8)

                     quotearg_char_mem:
0000000000004a90         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0x16ccc), CODE XREF=quotearg_char+11
0000000000004a94         mov        ecx, edx
0000000000004a96         mov        rax, qword [fs:0x28]
0000000000004a9f         mov        qword [rsp+0x48+var_10], rax
0000000000004aa4         xor        eax, eax
0000000000004aa6         mov        rax, qword [qword_2196d0]                   ; qword_2196d0
0000000000004aad         mov        r8, rsp
0000000000004ab0         and        ecx, 0x1f
0000000000004ab3         movdqa     xmm0, xmmword [default_quoting_options]     ; default_quoting_options
0000000000004abb         mov        qword [rsp+0x48+var_18], rax
0000000000004ac0         mov        eax, edx
0000000000004ac2         movaps     xmmword [rsp+0x48+var_48], xmm0
0000000000004ac6         shr        al, 0x5
0000000000004ac9         movzx      eax, al
0000000000004acc         lea        r9, qword [r8+rax*4+8]
0000000000004ad1         movdqa     xmm0, xmmword [default_quoting_options+16]  ; 0x2196b0
0000000000004ad9         movaps     xmmword [rsp+0x48+var_38], xmm0
0000000000004ade         movdqa     xmm0, xmmword [default_quoting_options+32]  ; 0x2196c0
0000000000004ae6         movaps     xmmword [rsp+0x48+var_28], xmm0
0000000000004aeb         mov        edx, dword [r9]
0000000000004aee         mov        eax, edx
0000000000004af0         shr        eax, cl
0000000000004af2         not        eax
0000000000004af4         and        eax, 0x1
0000000000004af7         shl        eax, cl
0000000000004af9         mov        rcx, r8
0000000000004afc         xor        eax, edx
0000000000004afe         mov        rdx, rsi
0000000000004b01         mov        rsi, rdi
0000000000004b04         mov        dword [r9], eax
0000000000004b07         xor        edi, edi
0000000000004b09         call       quotearg_n_options                          ; quotearg_n_options
0000000000004b0e         mov        rsi, qword [rsp+0x48+var_10]
0000000000004b13         xor        rsi, qword [fs:0x28]
0000000000004b1c         jne        loc_4b23

0000000000004b1e         add        rsp, 0x48
0000000000004b22         ret
                        ; endp

                     loc_4b23:
0000000000004b23         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_char_mem+140
                        ; endp
0000000000004b28         align      16                                          ; End of unwind block (FDE at 0x16ccc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24
        ;    var_28: -40
        ;    var_38: -56
        ;    var_48: -72


                     quotearg_char:
0000000000004b30         movsx      edx, sil                                    ; Begin of unwind block (FDE at 0x16ce8)
0000000000004b34         mov        rsi, 0xffffffffffffffff
0000000000004b3b         jmp        quotearg_char_mem                           ; quotearg_char_mem


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_colon:
0000000000004b40         mov        edx, 0x3a                                   ; End of unwind block (FDE at 0x16ce8), Begin of unwind block (FDE at 0x16cfc), CODE XREF=close_stdout+101
0000000000004b45         mov        rsi, 0xffffffffffffffff
0000000000004b4c         jmp        quotearg_char_mem                           ; quotearg_char_mem
                        ; endp
0000000000004b51         align      32                                          ; End of unwind block (FDE at 0x16cfc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_colon_mem:
0000000000004b60         mov        edx, 0x3a                                   ; Begin of unwind block (FDE at 0x16d10)
0000000000004b65         jmp        quotearg_char_mem                           ; quotearg_char_mem
                        ; endp
0000000000004b6a         align      16                                          ; End of unwind block (FDE at 0x16d10)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_n_style_colon:
0000000000004b70         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0x16d24), CODE XREF=nl_file+937
0000000000004b74         mov        rax, rdx
0000000000004b77         mov        rdx, qword [fs:0x28]
0000000000004b80         mov        qword [rsp+0x48+var_10], rdx
0000000000004b85         xor        edx, edx
0000000000004b87         cmp        esi, 0xa
0000000000004b8a         je         loc_4bf4

0000000000004b8c         mov        dword [rsp+0x48+var_48], esi
0000000000004b8f         mov        rcx, rsp
0000000000004b92         mov        rdx, 0xffffffffffffffff
0000000000004b99         mov        rsi, rax
0000000000004b9c         mov        qword [rsp+0x48+var_44], 0x0
0000000000004ba5         mov        qword [rsp+0x48+var_3C], 0x4000000
0000000000004bae         mov        qword [rsp+0x48+var_34], 0x0
0000000000004bb7         mov        qword [rsp+0x48+var_2C], 0x0
0000000000004bc0         mov        qword [rsp+0x48+var_24], 0x0
0000000000004bc9         mov        qword [rsp+0x48+var_1C], 0x0
0000000000004bd2         mov        dword [rsp+0x48+var_14], 0x0
0000000000004bda         call       quotearg_n_options                          ; quotearg_n_options
0000000000004bdf         mov        rcx, qword [rsp+0x48+var_10]
0000000000004be4         xor        rcx, qword [fs:0x28]
0000000000004bed         jne        loc_4bf9

0000000000004bef         add        rsp, 0x48
0000000000004bf3         ret
                        ; endp

                     loc_4bf4:
0000000000004bf4         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style_colon+26
                        ; endp

                     loc_4bf9:
0000000000004bf9         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style_colon+125
                        ; endp
0000000000004bfe         align      1024                                        ; End of unwind block (FDE at 0x16d24)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24
        ;    var_20: int64_t, -32
        ;    var_28: -40
        ;    var_38: -56
        ;    var_48: int32_t, -72


                     quotearg_n_custom_mem:
0000000000004c00         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0x16d40), CODE XREF=quotearg_n_custom+7, quotearg_custom+18, quotearg_custom_mem+14
0000000000004c04         mov        r9, rcx
0000000000004c07         mov        rcx, qword [qword_2196d0]                   ; qword_2196d0
0000000000004c0e         movdqa     xmm0, xmmword [default_quoting_options]     ; default_quoting_options
0000000000004c16         mov        rax, qword [fs:0x28]
0000000000004c1f         mov        qword [rsp+0x48+var_10], rax
0000000000004c24         xor        eax, eax
0000000000004c26         movaps     xmmword [rsp+0x48+var_48], xmm0
0000000000004c2a         test       rsi, rsi
0000000000004c2d         mov        qword [rsp+0x48+var_18], rcx
0000000000004c32         mov        dword [rsp+0x48+var_48], 0xa
0000000000004c39         movdqa     xmm0, xmmword [default_quoting_options+16]  ; 0x2196b0
0000000000004c41         movaps     xmmword [rsp+0x48+var_38], xmm0
0000000000004c46         movdqa     xmm0, xmmword [default_quoting_options+32]  ; 0x2196c0
0000000000004c4e         movaps     xmmword [rsp+0x48+var_28], xmm0
0000000000004c53         je         loc_4c87

0000000000004c55         test       rdx, rdx
0000000000004c58         je         loc_4c87

0000000000004c5a         mov        qword [rsp+0x48+var_20], rsi
0000000000004c5f         mov        qword [rsp+0x48+var_18], rdx
0000000000004c64         mov        rcx, rsp
0000000000004c67         mov        rdx, r8
0000000000004c6a         mov        rsi, r9
0000000000004c6d         call       quotearg_n_options                          ; quotearg_n_options
0000000000004c72         mov        rdi, qword [rsp+0x48+var_10]
0000000000004c77         xor        rdi, qword [fs:0x28]
0000000000004c80         jne        loc_4c8c

0000000000004c82         add        rsp, 0x48
0000000000004c86         ret
                        ; endp

                     loc_4c87:
0000000000004c87         call       j_abort                                     ; abort, CODE XREF=quotearg_n_custom_mem+83, quotearg_n_custom_mem+88
                        ; endp

                     loc_4c8c:
0000000000004c8c         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_custom_mem+128
                        ; endp
0000000000004c91         align      32                                          ; End of unwind block (FDE at 0x16d40)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_n_custom:
0000000000004ca0         mov        r8, 0xffffffffffffffff                      ; Begin of unwind block (FDE at 0x16d5c)
0000000000004ca7         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
                        ; endp
0000000000004cac         align      16                                          ; End of unwind block (FDE at 0x16d5c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_custom:
0000000000004cb0         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0x16d70)
0000000000004cb3         mov        r8, 0xffffffffffffffff
0000000000004cba         mov        rdx, rsi
0000000000004cbd         mov        rsi, rdi
0000000000004cc0         xor        edi, edi
0000000000004cc2         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
                        ; endp
0000000000004cc7         align      16                                          ; End of unwind block (FDE at 0x16d70)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_custom_mem:
0000000000004cd0         mov        r8, rcx                                     ; Begin of unwind block (FDE at 0x16d84)
0000000000004cd3         mov        rcx, rdx
0000000000004cd6         mov        rdx, rsi
0000000000004cd9         mov        rsi, rdi
0000000000004cdc         xor        edi, edi
0000000000004cde         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
                        ; endp
0000000000004ce3         align      16                                          ; End of unwind block (FDE at 0x16d84)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_n_mem:
0000000000004cf0         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0x16d98), quote_quoting_options
0000000000004cf7         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000004cfc         align      256                                         ; End of unwind block (FDE at 0x16d98)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_mem:
0000000000004d00         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0x16dac), quote_quoting_options
0000000000004d07         mov        rdx, rsi
0000000000004d0a         mov        rsi, rdi
0000000000004d0d         xor        edi, edi
0000000000004d0f         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000004d14         align      32                                          ; End of unwind block (FDE at 0x16dac)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_n:
0000000000004d20         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0x16dc0), quote_quoting_options
0000000000004d27         mov        rdx, 0xffffffffffffffff
0000000000004d2e         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000004d33         align      64                                          ; End of unwind block (FDE at 0x16dc0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote:
0000000000004d40         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0x16dd4), quote_quoting_options, CODE XREF=main+489, main+561, main+881, main+1597, xnumtoimax+111
0000000000004d47         mov        rsi, rdi
0000000000004d4a         mov        rdx, 0xffffffffffffffff
0000000000004d51         xor        edi, edi
0000000000004d53         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000004d58         align      32                                          ; End of unwind block (FDE at 0x16dd4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88


                     version_etc_arn:
0000000000004d60         push       r15                                         ; Begin of unwind block (FDE at 0x16dec), CODE XREF=j_version_etc_arn, version_etc_va+75, version_etc+161
0000000000004d62         push       r14
0000000000004d64         push       r13
0000000000004d66         push       r12
0000000000004d68         mov        r12, r9
0000000000004d6b         push       rbp
0000000000004d6c         push       rbx
0000000000004d6d         mov        rbp, rdi
0000000000004d70         mov        rbx, r8
0000000000004d73         sub        rsp, 0x28
0000000000004d77         test       rsi, rsi
0000000000004d7a         je         loc_4e98

0000000000004d80         mov        r8, rdx
0000000000004d83         lea        rdx, qword [aSSSn]                          ; "%s (%s) %s\\n"
0000000000004d8a         mov        r9, rcx
0000000000004d8d         xor        eax, eax
0000000000004d8f         mov        rcx, rsi
0000000000004d92         mov        esi, 0x1
0000000000004d97         call       j___fprintf_chk                             ; __fprintf_chk

                     loc_4d9c:
0000000000004d9c         lea        rsi, qword [aSSn+7]                         ; argument "msgid" for method j_dcgettext, 0x1539b, CODE XREF=version_etc_arn+337
0000000000004da3         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004da5         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004daa         call       j_dcgettext                                 ; dcgettext
0000000000004daf         lea        rdx, qword [version_etc_copyright]          ; "Copyright %s %d Free Software Foundation, Inc."
0000000000004db6         mov        rcx, rax
0000000000004db9         mov        r8d, 0x7e3
0000000000004dbf         mov        esi, 0x1
0000000000004dc4         mov        rdi, rbp
0000000000004dc7         xor        eax, eax
0000000000004dc9         call       j___fprintf_chk                             ; __fprintf_chk
0000000000004dce         lea        rsi, qword [aNlicenseGplv3G]                ; argument "msgid" for method j_dcgettext, "\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n"
0000000000004dd5         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004dd7         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004ddc         call       j_dcgettext                                 ; dcgettext
0000000000004de1         mov        rsi, rbp                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004de4         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004de7         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004dec         cmp        r12, 0x9
0000000000004df0         ja         loc_5130

0000000000004df6         lea        rdx, qword [switch_table_15684]             ; switch_table_15684
0000000000004dfd         movsxd     rax, dword [rdx+r12*4]
0000000000004e01         add        rax, rdx
0000000000004e04         jmp        rax                                         ; switch statement using table at 0x15684, with 10 cases, 0x4e10,0x4e86,0x4ec0,0x4f18,0x4f58,0x4fa0,0x4ff0,0x5048,0x5078,0x50e0
0000000000004e06         align      16

                     loc_4e10:
0000000000004e10         mov        r9, qword [rbx+0x38]                        ; case 8, CODE XREF=version_etc_arn+164
0000000000004e14         mov        rax, qword [rbx+0x10]
0000000000004e18         lea        rsi, qword [aWrittenBySSSns_15598]          ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n"
0000000000004e1f         mov        r8, qword [rbx+8]
0000000000004e23         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004e28         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004e2a         mov        r13, qword [rbx+0x30]
0000000000004e2e         mov        r12, qword [rbx+0x28]
0000000000004e32         mov        qword [rsp+0x58+var_48], r9
0000000000004e37         mov        r15, qword [rbx+0x20]
0000000000004e3b         mov        r14, qword [rbx+0x18]
0000000000004e3f         mov        qword [rsp+0x58+var_58], rax
0000000000004e43         mov        qword [rsp+0x58+var_50], r8
0000000000004e48         mov        rbx, qword [rbx]
0000000000004e4b         call       j_dcgettext                                 ; dcgettext
0000000000004e50         sub        rsp, 0x8

                     loc_4e54:
0000000000004e54         mov        r9, qword [rsp+0x60+var_48]                 ; CODE XREF=version_etc_arn+432
0000000000004e59         mov        rdx, rax
0000000000004e5c         mov        rcx, rbx
0000000000004e5f         mov        esi, 0x1
0000000000004e64         mov        rdi, rbp
0000000000004e67         xor        eax, eax
0000000000004e69         push       r9
0000000000004e6b         push       r13
0000000000004e6d         push       r12
0000000000004e6f         push       r15
0000000000004e71         push       r14
0000000000004e73         mov        r9, qword [rsp+0x88+var_58]
0000000000004e78         mov        r8, qword [rsp+0x88+var_50]
0000000000004e7d         call       j___fprintf_chk                             ; __fprintf_chk
0000000000004e82         add        rsp, 0x30

                     loc_4e86:
0000000000004e86         add        rsp, 0x28                                   ; case 0, CODE XREF=version_etc_arn+164
0000000000004e8a         pop        rbx
0000000000004e8b         pop        rbp
0000000000004e8c         pop        r12
0000000000004e8e         pop        r13
0000000000004e90         pop        r14
0000000000004e92         pop        r15
0000000000004e94         ret
                        ; endp
0000000000004e95         align      8

                     loc_4e98:
0000000000004e98         mov        r8, rcx                                     ; CODE XREF=version_etc_arn+26
0000000000004e9b         mov        rcx, rdx
0000000000004e9e         lea        rdx, qword [aSSn]                           ; "%s %s\\n"
0000000000004ea5         mov        esi, 0x1
0000000000004eaa         xor        eax, eax
0000000000004eac         call       j___fprintf_chk                             ; __fprintf_chk
0000000000004eb1         jmp        loc_4d9c
0000000000004eb6         align      64

                     loc_4ec0:
0000000000004ec0         mov        r10, qword [rbx+0x40]                       ; case 9, CODE XREF=version_etc_arn+164
0000000000004ec4         mov        r9, qword [rbx+0x38]
0000000000004ec8         lea        rsi, qword [aWrittenBySSSns]                ; "Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n"
0000000000004ecf         mov        rax, qword [rbx+0x10]
0000000000004ed3         mov        r8, qword [rbx+8]
0000000000004ed7         mov        edx, 0x5
0000000000004edc         mov        r13, qword [rbx+0x30]
0000000000004ee0         mov        r12, qword [rbx+0x28]
0000000000004ee4         mov        r15, qword [rbx+0x20]
0000000000004ee8         mov        r14, qword [rbx+0x18]
0000000000004eec         mov        rbx, qword [rbx]
0000000000004eef         mov        qword [rsp+0x58+var_40], r10
0000000000004ef4         mov        qword [rsp+0x58+var_48], r9
0000000000004ef9         mov        qword [rsp+0x58+var_58], rax
0000000000004efd         mov        qword [rsp+0x58+var_50], r8

                     loc_4f02:
0000000000004f02         xor        edi, edi                                    ; argument "domain" for method j_dcgettext, CODE XREF=version_etc_arn+1042
0000000000004f04         call       j_dcgettext                                 ; dcgettext
0000000000004f09         mov        r10, qword [rsp+0x58+var_40]
0000000000004f0e         push       r10
0000000000004f10         jmp        loc_4e54
0000000000004f15         align      8

                     loc_4f18:
0000000000004f18         mov        rbx, qword [rbx]                            ; case 1, CODE XREF=version_etc_arn+164
0000000000004f1b         lea        rsi, qword [aWrittenBySn]                   ; argument "msgid" for method j_dcgettext, "Written by %s.\\n"
0000000000004f22         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004f27         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004f29         call       j_dcgettext                                 ; dcgettext
0000000000004f2e         add        rsp, 0x28
0000000000004f32         mov        rcx, rbx
0000000000004f35         mov        rdi, rbp
0000000000004f38         pop        rbx
0000000000004f39         pop        rbp
0000000000004f3a         pop        r12
0000000000004f3c         pop        r13
0000000000004f3e         pop        r14
0000000000004f40         pop        r15
0000000000004f42         mov        rdx, rax
0000000000004f45         mov        esi, 0x1
0000000000004f4a         xor        eax, eax
0000000000004f4c         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
0000000000004f51         align      8

                     loc_4f58:
0000000000004f58         mov        r12, qword [rbx+8]                          ; case 2, CODE XREF=version_etc_arn+164
0000000000004f5c         lea        rsi, qword [aWrittenBySAndS]                ; argument "msgid" for method j_dcgettext, "Written by %s and %s.\\n"
0000000000004f63         mov        rbx, qword [rbx]
0000000000004f66         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004f6b         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004f6d         call       j_dcgettext                                 ; dcgettext
0000000000004f72         add        rsp, 0x28
0000000000004f76         mov        r8, r12
0000000000004f79         mov        rcx, rbx
0000000000004f7c         mov        rdi, rbp
0000000000004f7f         mov        rdx, rax
0000000000004f82         mov        esi, 0x1
0000000000004f87         pop        rbx
0000000000004f88         pop        rbp
0000000000004f89         pop        r12
0000000000004f8b         pop        r13
0000000000004f8d         pop        r14
0000000000004f8f         pop        r15
0000000000004f91         xor        eax, eax
0000000000004f93         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
0000000000004f98         align      32

                     loc_4fa0:
0000000000004fa0         mov        r13, qword [rbx+0x10]                       ; case 3, CODE XREF=version_etc_arn+164
0000000000004fa4         mov        r12, qword [rbx+8]
0000000000004fa8         lea        rsi, qword [aWrittenBySSAnd]                ; argument "msgid" for method j_dcgettext, "Written by %s, %s, and %s.\\n"
0000000000004faf         mov        rbx, qword [rbx]
0000000000004fb2         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004fb7         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004fb9         call       j_dcgettext                                 ; dcgettext
0000000000004fbe         add        rsp, 0x28
0000000000004fc2         mov        r9, r13
0000000000004fc5         mov        r8, r12
0000000000004fc8         mov        rcx, rbx
0000000000004fcb         mov        rdi, rbp
0000000000004fce         mov        rdx, rax
0000000000004fd1         pop        rbx
0000000000004fd2         pop        rbp
0000000000004fd3         pop        r12
0000000000004fd5         pop        r13
0000000000004fd7         pop        r14
0000000000004fd9         pop        r15
0000000000004fdb         mov        esi, 0x1
0000000000004fe0         xor        eax, eax
0000000000004fe2         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
0000000000004fe7         align      16

                     loc_4ff0:
0000000000004ff0         lea        rsi, qword [aWrittenBySSSna]                ; case 4, argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\nand %s.\\n", CODE XREF=version_etc_arn+164
0000000000004ff7         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004ffc         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004ffe         mov        r14, qword [rbx+0x18]
0000000000005002         mov        r13, qword [rbx+0x10]
0000000000005006         mov        r12, qword [rbx+8]
000000000000500a         mov        rbx, qword [rbx]
000000000000500d         call       j_dcgettext                                 ; dcgettext
0000000000005012         sub        rsp, 0x8

                     loc_5016:
0000000000005016         push       r14                                         ; CODE XREF=version_etc_arn+784
0000000000005018         mov        rdx, rax
000000000000501b         mov        r9, r13
000000000000501e         mov        r8, r12
0000000000005021         mov        rcx, rbx
0000000000005024         mov        rdi, rbp
0000000000005027         mov        esi, 0x1
000000000000502c         xor        eax, eax
000000000000502e         call       j___fprintf_chk                             ; __fprintf_chk
0000000000005033         pop        rax
0000000000005034         pop        rdx
0000000000005035         add        rsp, 0x28
0000000000005039         pop        rbx
000000000000503a         pop        rbp
000000000000503b         pop        r12
000000000000503d         pop        r13
000000000000503f         pop        r14
0000000000005041         pop        r15
0000000000005043         ret
                        ; endp
0000000000005044         align      8

                     loc_5048:
0000000000005048         mov        r15, qword [rbx+0x20]                       ; case 5, CODE XREF=version_etc_arn+164
000000000000504c         lea        rsi, qword [aWrittenBySSSns_15518]          ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, and %s.\\n"
0000000000005053         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005058         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000505a         mov        r14, qword [rbx+0x18]
000000000000505e         mov        r13, qword [rbx+0x10]
0000000000005062         mov        r12, qword [rbx+8]
0000000000005066         mov        rbx, qword [rbx]
0000000000005069         call       j_dcgettext                                 ; dcgettext
000000000000506e         push       r15
0000000000005070         jmp        loc_5016
0000000000005072         align      8

                     loc_5078:
0000000000005078         mov        r8, qword [rbx+8]                           ; case 6, CODE XREF=version_etc_arn+164
000000000000507c         mov        r12, qword [rbx+0x28]
0000000000005080         lea        rsi, qword [aWrittenBySSSns_15540]          ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, %s, and %s.\\n"
0000000000005087         mov        r15, qword [rbx+0x20]
000000000000508b         mov        r14, qword [rbx+0x18]
000000000000508f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005094         mov        r13, qword [rbx+0x10]
0000000000005098         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000509a         mov        rbx, qword [rbx]
000000000000509d         mov        qword [rsp+0x58+var_58], r8
00000000000050a1         call       j_dcgettext                                 ; dcgettext
00000000000050a6         sub        rsp, 0x8
00000000000050aa         mov        r9, r13
00000000000050ad         push       r12
00000000000050af         push       r15
00000000000050b1         push       r14

                     loc_50b3:
00000000000050b3         mov        r8, qword [rsp+0x78+var_58]                 ; CODE XREF=version_etc_arn+964
00000000000050b8         mov        rcx, rbx
00000000000050bb         mov        rdx, rax
00000000000050be         mov        rdi, rbp
00000000000050c1         mov        esi, 0x1
00000000000050c6         xor        eax, eax
00000000000050c8         call       j___fprintf_chk                             ; __fprintf_chk
00000000000050cd         add        rsp, 0x20
00000000000050d1         add        rsp, 0x28
00000000000050d5         pop        rbx
00000000000050d6         pop        rbp
00000000000050d7         pop        r12
00000000000050d9         pop        r13
00000000000050db         pop        r14
00000000000050dd         pop        r15
00000000000050df         ret
                        ; endp

                     loc_50e0:
00000000000050e0         mov        r9, qword [rbx+0x10]                        ; case 7, CODE XREF=version_etc_arn+164
00000000000050e4         mov        r13, qword [rbx+0x30]
00000000000050e8         lea        rsi, qword [aWrittenBySSSns_15568]          ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n"
00000000000050ef         mov        r12, qword [rbx+0x28]
00000000000050f3         mov        r15, qword [rbx+0x20]
00000000000050f7         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000050fc         mov        r14, qword [rbx+0x18]
0000000000005100         mov        r8, qword [rbx+8]
0000000000005104         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005106         mov        qword [rsp+0x58+var_50], r9
000000000000510b         mov        rbx, qword [rbx]
000000000000510e         mov        qword [rsp+0x58+var_58], r8
0000000000005112         call       j_dcgettext                                 ; dcgettext
0000000000005117         push       r13
0000000000005119         push       r12
000000000000511b         push       r15
000000000000511d         push       r14
000000000000511f         mov        r9, qword [rsp+0x78+var_50]
0000000000005124         jmp        loc_50b3
0000000000005126         align      16

                     loc_5130:
0000000000005130         mov        r10, qword [rbx+0x40]                       ; CODE XREF=version_etc_arn+144
0000000000005134         mov        r9, qword [rbx+0x38]
0000000000005138         mov        edx, 0x5
000000000000513d         mov        rax, qword [rbx+0x10]
0000000000005141         mov        r8, qword [rbx+8]
0000000000005145         lea        rsi, qword [aWrittenBySSSns_15600]          ; "Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n"
000000000000514c         mov        r13, qword [rbx+0x30]
0000000000005150         mov        r12, qword [rbx+0x28]
0000000000005154         mov        r15, qword [rbx+0x20]
0000000000005158         mov        r14, qword [rbx+0x18]
000000000000515c         mov        qword [rsp+0x58+var_40], r10
0000000000005161         mov        qword [rsp+0x58+var_48], r9
0000000000005166         mov        qword [rsp+0x58+var_58], rax
000000000000516a         mov        qword [rsp+0x58+var_50], r8
000000000000516f         mov        rbx, qword [rbx]
0000000000005172         jmp        loc_4f02
0000000000005177         align      128                                         ; End of unwind block (FDE at 0x16dec)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     version_etc_ar:
0000000000005180         xor        r9d, r9d                                    ; Begin of unwind block (FDE at 0x16f00)
0000000000005183         cmp        qword [r8], 0x0
0000000000005187         je         j_version_etc_arn                           ; version_etc_arn

0000000000005189         nop        dword [rax]

                     loc_5190:
0000000000005190         add        r9, 0x1                                     ; CODE XREF=version_etc_ar+25
0000000000005194         cmp        qword [r8+r9*8], 0x0
0000000000005199         jne        loc_5190

                     j_version_etc_arn:        // version_etc_arn
000000000000519b         jmp        version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc_ar+7
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16


                     version_etc_va:
00000000000051a0         sub        rsp, 0x68                                   ; End of unwind block (FDE at 0x16f00), Begin of unwind block (FDE at 0x16f14)
00000000000051a4         mov        r10, r8
00000000000051a7         xor        r9d, r9d
00000000000051aa         mov        rax, qword [fs:0x28]
00000000000051b3         mov        qword [rsp+0x68+var_10], rax
00000000000051b8         xor        eax, eax
00000000000051ba         mov        r8, rsp
00000000000051bd         nop        dword [rax]

                     loc_51c0:
00000000000051c0         mov        eax, dword [r10]                            ; CODE XREF=version_etc_va+73
00000000000051c3         cmp        eax, 0x2f
00000000000051c6         ja         loc_520a

00000000000051c8         mov        r11d, eax
00000000000051cb         add        r11, qword [r10+0x10]
00000000000051cf         add        eax, 0x8
00000000000051d2         mov        dword [r10], eax

                     loc_51d5:
00000000000051d5         mov        rax, qword [r11]                            ; CODE XREF=version_etc_va+118
00000000000051d8         test       rax, rax
00000000000051db         mov        qword [r8+r9*8], rax
00000000000051df         je         loc_51eb

00000000000051e1         add        r9, 0x1
00000000000051e5         cmp        r9, 0xa
00000000000051e9         jne        loc_51c0

                     loc_51eb:
00000000000051eb         call       version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc_va+63
00000000000051f0         mov        rax, qword [rsp+0x68+var_10]
00000000000051f5         xor        rax, qword [fs:0x28]
00000000000051fe         jne        loc_5205

0000000000005200         add        rsp, 0x68
0000000000005204         ret
                        ; endp

                     loc_5205:
0000000000005205         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=version_etc_va+94
                        ; endp

                     loc_520a:
000000000000520a         mov        r11, qword [r10+8]                          ; CODE XREF=version_etc_va+38
000000000000520e         lea        rax, qword [r11+8]
0000000000005212         mov        qword [r10+8], rax
0000000000005216         jmp        loc_51d5
0000000000005218         align      32                                          ; End of unwind block (FDE at 0x16f14)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40
        ;    var_48: int8_t, -72
        ;    var_50: int64_t, -80
        ;    var_A8: int8_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int32_t, -192


                     version_etc:
0000000000005220         push       rbp                                         ; Begin of unwind block (FDE at 0x16f30), CODE XREF=main+413
0000000000005221         push       rbx
0000000000005222         mov        r10d, 0x20
0000000000005228         xor        r11d, r11d
000000000000522b         sub        rsp, 0xb8
0000000000005232         mov        rax, qword [fs:0x28]
000000000000523b         mov        qword [rsp+0xc8+var_50], rax
0000000000005240         xor        eax, eax
0000000000005242         lea        rax, qword [rsp+0xc8+arg_0]
000000000000524a         mov        qword [rsp+0xc8+var_28], r8
0000000000005252         lea        rbx, qword [rsp+0xc8+arg_0]
000000000000525a         lea        r8, qword [rsp+0xc8+var_A8]
000000000000525f         mov        qword [rsp+0xc8+var_20], r9
0000000000005267         mov        dword [rsp+0xc8+var_C0], 0x20
000000000000526f         mov        qword [rsp+0xc8+var_B8], rax
0000000000005274         lea        rax, qword [rsp+0xc8+var_48]
000000000000527c         xor        r9d, r9d
000000000000527f         mov        qword [rsp+0xc8+var_B0], rax
0000000000005284         mov        rbp, rax
0000000000005287         nop        word [rax+rax]

                     loc_5290:
0000000000005290         cmp        r10d, 0x2f                                  ; CODE XREF=version_etc+154
0000000000005294         ja         loc_52ec

0000000000005296         mov        eax, r10d
0000000000005299         mov        r11d, 0x1
000000000000529f         add        r10d, 0x8
00000000000052a3         add        rax, rbp

                     loc_52a6:
00000000000052a6         mov        rax, qword [rax]                            ; CODE XREF=version_etc+211
00000000000052a9         test       rax, rax
00000000000052ac         mov        qword [r8+r9*8], rax
00000000000052b0         je         loc_52bc

00000000000052b2         add        r9, 0x1
00000000000052b6         cmp        r9, 0xa
00000000000052ba         jne        loc_5290

                     loc_52bc:
00000000000052bc         test       r11b, r11b                                  ; CODE XREF=version_etc+144
00000000000052bf         jne        loc_52e5

                     loc_52c1:
00000000000052c1         call       version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc+202
00000000000052c6         mov        rax, qword [rsp+0xc8+var_50]
00000000000052cb         xor        rax, qword [fs:0x28]
00000000000052d4         jne        loc_52e0

00000000000052d6         add        rsp, 0xb8
00000000000052dd         pop        rbx
00000000000052de         pop        rbp
00000000000052df         ret
                        ; endp

                     loc_52e0:
00000000000052e0         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=version_etc+180
                        ; endp

                     loc_52e5:
00000000000052e5         mov        dword [rsp+0xc8+var_C0], r10d               ; CODE XREF=version_etc+159
00000000000052ea         jmp        loc_52c1

                     loc_52ec:
00000000000052ec         mov        rax, rbx                                    ; CODE XREF=version_etc+116
00000000000052ef         add        rbx, 0x8
00000000000052f3         jmp        loc_52a6
00000000000052f5         align      256                                         ; End of unwind block (FDE at 0x16f30)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     emit_bug_reporting_address:
0000000000005300         push       rbx                                         ; Begin of unwind block (FDE at 0x16f5c)
0000000000005301         lea        rsi, qword [aNreportBugsToS]                ; argument "msgid" for method j_dcgettext, "\\nReport bugs to: %s\\n"
0000000000005308         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000530d         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000530f         call       j_dcgettext                                 ; dcgettext
0000000000005314         lea        rdx, qword [aBugcoreutilsgn]                ; "bug-coreutils@gnu.org"
000000000000531b         mov        rsi, rax
000000000000531e         mov        edi, 0x1
0000000000005323         xor        eax, eax
0000000000005325         call       j___printf_chk                              ; __printf_chk
000000000000532a         lea        rsi, qword [aSHomePageSn]                   ; argument "msgid" for method j_dcgettext, "%s home page: <%s>\\n"
0000000000005331         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005336         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005338         call       j_dcgettext                                 ; dcgettext
000000000000533d         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000005344         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0x14432
000000000000534b         mov        rsi, rax
000000000000534e         mov        edi, 0x1
0000000000005353         xor        eax, eax
0000000000005355         call       j___printf_chk                              ; __printf_chk
000000000000535a         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000005361         lea        rsi, qword [aGeneralHelpUsi]                ; argument "msgid" for method j_dcgettext, "General help using GNU software: <https://www.gnu.org/gethelp/>\\n"
0000000000005368         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000536a         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000536f         call       j_dcgettext                                 ; dcgettext
0000000000005374         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000005377         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
000000000000537a         pop        rbx
000000000000537b         jmp        j_fputs_unlocked                            ; fputs_unlocked
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xmalloc:
0000000000005380         push       rbx                                         ; End of unwind block (FDE at 0x16f5c), Begin of unwind block (FDE at 0x16f7c), CODE XREF=main+1150, main+1217, main+1268, main+1352, quotearg_n_options+295, quotearg_alloc_mem+129, xnmalloc+25, xcharalloc, xzalloc+4, xmemdup+15
0000000000005381         mov        rbx, rdi
0000000000005384         call       j_malloc                                    ; malloc
0000000000005389         test       rax, rax
000000000000538c         jne        loc_5393

000000000000538e         test       rbx, rbx
0000000000005391         jne        loc_5395

                     loc_5393:
0000000000005393         pop        rbx                                         ; CODE XREF=xmalloc+12
0000000000005394         ret
                        ; endp

                     loc_5395:
0000000000005395         call       xalloc_die                                  ; xalloc_die, CODE XREF=xmalloc+17
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_539a:
000000000000539a         nop        word [rax+rax]                              ; End of unwind block (FDE at 0x16f7c)
                     xnmalloc:
00000000000053a0         mov        rax, rdi                                    ; Begin of unwind block (FDE at 0x16f98)
00000000000053a3         mul        rsi
00000000000053a6         mov        rdi, rax
00000000000053a9         seto       al
00000000000053ac         test       rdi, rdi
00000000000053af         js         loc_53bb

00000000000053b1         movzx      eax, al
00000000000053b4         test       rax, rax
00000000000053b7         jne        loc_53bb

00000000000053b9         jmp        xmalloc                                     ; xmalloc
                        ; endp

                     loc_53bb:
00000000000053bb         sub        rsp, 0x8                                    ; CODE XREF=xnmalloc+15, xnmalloc+23
00000000000053bf         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_53c4:
00000000000053c4         nop                                                    ; End of unwind block (FDE at 0x16f98)
00000000000053c6         nop        word [cs:rax+rax]
                     xcharalloc:
00000000000053d0         jmp        xmalloc                                     ; xmalloc, Begin of unwind block (FDE at 0x16fac)
                        ; endp
00000000000053d2         align      32                                          ; End of unwind block (FDE at 0x16fac)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xrealloc:
00000000000053e0         test       rsi, rsi                                    ; Begin of unwind block (FDE at 0x16fc0), CODE XREF=quotearg_n_options+110, quotearg_n_options+386, xnrealloc+25, x2nrealloc+52, x2realloc+40
00000000000053e3         push       rbx
00000000000053e4         mov        rbx, rsi
00000000000053e7         jne        loc_53ee

00000000000053e9         test       rdi, rdi
00000000000053ec         jne        loc_5408

                     loc_53ee:
00000000000053ee         mov        rsi, rbx                                    ; argument "__size" for method j_realloc, CODE XREF=xrealloc+7
00000000000053f1         call       j_realloc                                   ; realloc
00000000000053f6         test       rax, rax
00000000000053f9         jne        loc_5400

00000000000053fb         test       rbx, rbx
00000000000053fe         jne        loc_5411

                     loc_5400:
0000000000005400         pop        rbx                                         ; CODE XREF=xrealloc+25
0000000000005401         ret
                        ; endp
0000000000005402         align      8

                     loc_5408:
0000000000005408         call       j_free                                      ; free, CODE XREF=xrealloc+12
000000000000540d         xor        eax, eax
000000000000540f         pop        rbx
0000000000005410         ret
                        ; endp

                     loc_5411:
0000000000005411         call       xalloc_die                                  ; xalloc_die, CODE XREF=xrealloc+30
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_5416:
0000000000005416         nop        word [cs:rax+rax]                           ; End of unwind block (FDE at 0x16fc0)
                     xnrealloc:
0000000000005420         mov        rax, rsi                                    ; Begin of unwind block (FDE at 0x16fe4)
0000000000005423         mul        rdx
0000000000005426         mov        rsi, rax
0000000000005429         seto       al
000000000000542c         test       rsi, rsi
000000000000542f         js         loc_543b

0000000000005431         movzx      eax, al
0000000000005434         test       rax, rax
0000000000005437         jne        loc_543b

0000000000005439         jmp        xrealloc                                    ; xrealloc
                        ; endp

                     loc_543b:
000000000000543b         sub        rsp, 0x8                                    ; CODE XREF=xnrealloc+15, xnrealloc+23
000000000000543f         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_5444:
0000000000005444         nop                                                    ; End of unwind block (FDE at 0x16fe4)
0000000000005446         nop        word [cs:rax+rax]
                     x2nrealloc:
0000000000005450         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0x16ff8)
0000000000005453         mov        r9, rdx
0000000000005456         mov        rcx, qword [rsi]
0000000000005459         je         loc_5490

000000000000545b         xor        edx, edx
000000000000545d         movabs     rax, 0x5555555555555554
0000000000005467         div        r9
000000000000546a         cmp        rax, rcx
000000000000546d         jbe        loc_54ab

000000000000546f         mov        rax, rcx
0000000000005472         shr        rax, 0x1
0000000000005475         lea        rcx, qword [rax+rcx+1]

                     loc_547a:
000000000000547a         mov        qword [rsi], rcx                            ; CODE XREF=x2nrealloc+89
000000000000547d         imul       rcx, r9                                     ; argument #4 for method xrealloc
0000000000005481         mov        rsi, rcx                                    ; argument #2 for method xrealloc
0000000000005484         jmp        xrealloc                                    ; xrealloc
                        ; endp
0000000000005489         align      16

                     loc_5490:
0000000000005490         test       rcx, rcx                                    ; CODE XREF=x2nrealloc+9
0000000000005493         je         loc_54b8

                     loc_5495:
0000000000005495         mov        rax, rcx                                    ; CODE XREF=sub_54b4+28
0000000000005498         mul        r9
000000000000549b         seto       dl
000000000000549e         test       rax, rax
00000000000054a1         movzx      edx, dl
00000000000054a4         js         loc_54ab

00000000000054a6         test       rdx, rdx
00000000000054a9         je         loc_547a

                     loc_54ab:
00000000000054ab         sub        rsp, 0x8                                    ; CODE XREF=x2nrealloc+29, x2nrealloc+84
00000000000054af         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_54b4:
00000000000054b4         nop        dword [rax]
                        ; endp

                     loc_54b8:
00000000000054b8         xor        edx, edx                                    ; CODE XREF=x2nrealloc+67
00000000000054ba         mov        eax, 0x80
00000000000054bf         xor        r8d, r8d
00000000000054c2         div        r9
00000000000054c5         test       rax, rax
00000000000054c8         sete       r8b
00000000000054cc         lea        rcx, qword [r8+rax]
00000000000054d0         jmp        loc_5495
00000000000054d2         align      32                                          ; End of unwind block (FDE at 0x16ff8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     x2realloc:
00000000000054e0         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0x17010), CODE XREF=readlinebuffer_delim+108
00000000000054e3         mov        rax, qword [rsi]
00000000000054e6         je         loc_5510

00000000000054e8         movabs     rdx, 0x5555555555555553
00000000000054f2         cmp        rax, rdx
00000000000054f5         ja         loc_5521

00000000000054f7         mov        rdx, rax
00000000000054fa         shr        rdx, 0x1
00000000000054fd         lea        rax, qword [rdx+rax+1]

                     loc_5502:
0000000000005502         mov        qword [rsi], rax                            ; CODE XREF=x2realloc+63
0000000000005505         mov        rsi, rax                                    ; argument #2 for method xrealloc
0000000000005508         jmp        xrealloc                                    ; xrealloc
                        ; endp
000000000000550d         align      16

                     loc_5510:
0000000000005510         test       rax, rax                                    ; CODE XREF=x2realloc+6
0000000000005513         mov        edx, 0x80
0000000000005518         cmove      rax, rdx
000000000000551c         test       rax, rax
000000000000551f         jns        loc_5502

                     loc_5521:
0000000000005521         sub        rsp, 0x8                                    ; CODE XREF=x2realloc+21
0000000000005525         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_552a:
000000000000552a         nop        word [rax+rax]                              ; End of unwind block (FDE at 0x17010)
                     xzalloc:
0000000000005530         push       rbx                                         ; Begin of unwind block (FDE at 0x17028)
0000000000005531         mov        rbx, rdi
0000000000005534         call       xmalloc                                     ; xmalloc
0000000000005539         mov        rdx, rbx                                    ; argument "__n" for method j_memset
000000000000553c         xor        esi, esi                                    ; argument "__c" for method j_memset
000000000000553e         mov        rdi, rax                                    ; argument "__s" for method j_memset
0000000000005541         pop        rbx
0000000000005542         jmp        j_memset                                    ; memset
                        ; endp
0000000000005547         align      16                                          ; End of unwind block (FDE at 0x17028)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xcalloc:
0000000000005550         mov        rax, rdi                                    ; Begin of unwind block (FDE at 0x17044)
0000000000005553         sub        rsp, 0x8
0000000000005557         mul        rsi
000000000000555a         seto       dl
000000000000555d         test       rax, rax
0000000000005560         js         loc_5579

0000000000005562         movzx      edx, dl
0000000000005565         test       rdx, rdx
0000000000005568         jne        loc_5579

000000000000556a         call       j_calloc                                    ; calloc
000000000000556f         test       rax, rax
0000000000005572         je         loc_5579

0000000000005574         add        rsp, 0x8
0000000000005578         ret
                        ; endp

                     loc_5579:
0000000000005579         call       xalloc_die                                  ; xalloc_die, CODE XREF=xcalloc+16, xcalloc+24, xcalloc+34
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_557e:
000000000000557e         nop                                                    ; End of unwind block (FDE at 0x17044)
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xmemdup:
0000000000005580         push       rbp                                         ; Begin of unwind block (FDE at 0x17060), CODE XREF=clone_quoting_options+40
0000000000005581         push       rbx
0000000000005582         mov        rbp, rdi
0000000000005585         mov        rdi, rsi
0000000000005588         mov        rbx, rsi
000000000000558b         sub        rsp, 0x8
000000000000558f         call       xmalloc                                     ; xmalloc
0000000000005594         add        rsp, 0x8
0000000000005598         mov        rdx, rbx                                    ; argument "__n" for method j_memcpy
000000000000559b         mov        rsi, rbp                                    ; argument "__src" for method j_memcpy
000000000000559e         pop        rbx
000000000000559f         pop        rbp
00000000000055a0         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
00000000000055a3         jmp        j_memcpy                                    ; memcpy
                        ; endp
00000000000055a8         align      16                                          ; End of unwind block (FDE at 0x17060)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xstrdup:
00000000000055b0         push       rbx                                         ; Begin of unwind block (FDE at 0x17088)
00000000000055b1         mov        rbx, rdi
00000000000055b4         call       j_strlen                                    ; strlen
00000000000055b9         mov        rdi, rbx
00000000000055bc         lea        rsi, qword [rax+1]
00000000000055c0         pop        rbx
00000000000055c1         jmp        xmemdup                                     ; xmemdup
                        ; endp
00000000000055c3         align      16                                          ; End of unwind block (FDE at 0x17088)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xalloc_die:
00000000000055d0         lea        rsi, qword [aMemoryExhauste]                ; Begin of unwind block (FDE at 0x170a4), argument "msgid" for method j_dcgettext, "memory exhausted", CODE XREF=quotearg_n_options+422, xmalloc+21, xnmalloc+31, xrealloc+49, xnrealloc+31, x2nrealloc+95, x2realloc+69, xcalloc+41
00000000000055d7         sub        rsp, 0x8
00000000000055db         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000055e0         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000055e2         call       j_dcgettext                                 ; dcgettext
00000000000055e7         mov        edi, dword [exit_failure]                   ; argument "__status" for method j_error, exit_failure
00000000000055ed         lea        rdx, qword [aSS+4]                          ; argument "__format" for method j_error, 0x14e6c
00000000000055f4         mov        rcx, rax
00000000000055f7         xor        esi, esi                                    ; argument "__errnum" for method j_error
00000000000055f9         xor        eax, eax
00000000000055fb         call       j_error                                     ; error
0000000000005600         call       j_abort                                     ; abort
                        ; endp
0000000000005605         align      16                                          ; End of unwind block (FDE at 0x170a4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72


                     xnumtoimax:
0000000000005610         push       r15                                         ; Begin of unwind block (FDE at 0x170bc), CODE XREF=xdectoimax+23
0000000000005612         push       r14
0000000000005614         mov        r15, rcx
0000000000005617         push       r13
0000000000005619         push       r12
000000000000561b         mov        r14, rdx
000000000000561e         push       rbp
000000000000561f         push       rbx
0000000000005620         mov        edx, esi
0000000000005622         xor        esi, esi
0000000000005624         mov        r12, rdi
0000000000005627         mov        r13, r9
000000000000562a         sub        rsp, 0x18
000000000000562e         mov        rcx, rsp
0000000000005631         mov        ebx, dword [rsp+0x48+arg_0]
0000000000005635         mov        rax, qword [fs:0x28]
000000000000563e         mov        qword [rsp+0x48+var_40], rax
0000000000005643         xor        eax, eax
0000000000005645         call       xstrtoimax                                  ; xstrtoimax
000000000000564a         test       eax, eax
000000000000564c         jne        loc_56e0

0000000000005652         mov        rbp, qword [rsp+0x48+var_48]
0000000000005656         cmp        rbp, r14
0000000000005659         jl         loc_5660

000000000000565b         cmp        rbp, r15
000000000000565e         jle        loc_56b6

                     loc_5660:
0000000000005660         call       j___errno_location                          ; __errno_location, CODE XREF=xnumtoimax+73
0000000000005665         cmp        rbp, 0x3fffffff
000000000000566c         mov        r14, rax
000000000000566f         jle        loc_5700

                     loc_5675:
0000000000005675         mov        dword [r14], 0x4b                           ; CODE XREF=xnumtoimax+221

                     loc_567c:
000000000000567c         mov        rdi, r12                                    ; CODE XREF=xnumtoimax+226, xnumtoimax+234, xnumtoimax+263
000000000000567f         call       quote                                       ; quote
0000000000005684         mov        esi, dword [r14]
0000000000005687         mov        r8, rax
000000000000568a         mov        eax, 0x0
000000000000568f         lea        rdx, qword [aSS]                            ; argument "__format" for method j_error, "%s: %s"
0000000000005696         mov        rcx, r13
0000000000005699         cmp        esi, 0x16
000000000000569c         cmove      esi, eax                                    ; argument "__errnum" for method j_error
000000000000569f         test       ebx, ebx
00000000000056a1         mov        eax, 0x1
00000000000056a6         cmove      ebx, eax
00000000000056a9         xor        eax, eax
00000000000056ab         mov        edi, ebx                                    ; argument "__status" for method j_error
00000000000056ad         call       j_error                                     ; error
00000000000056b2         mov        rbp, qword [rsp+0x48+var_48]

                     loc_56b6:
00000000000056b6         mov        rdx, qword [rsp+0x48+var_40]                ; CODE XREF=xnumtoimax+78
00000000000056bb         xor        rdx, qword [fs:0x28]
00000000000056c4         mov        rax, rbp
00000000000056c7         jne        loc_571c

00000000000056c9         add        rsp, 0x18
00000000000056cd         pop        rbx
00000000000056ce         pop        rbp
00000000000056cf         pop        r12
00000000000056d1         pop        r13
00000000000056d3         pop        r14
00000000000056d5         pop        r15
00000000000056d7         ret
                        ; endp
00000000000056d8         align      32

                     loc_56e0:
00000000000056e0         mov        ebp, eax                                    ; CODE XREF=xnumtoimax+60
00000000000056e2         call       j___errno_location                          ; __errno_location
00000000000056e7         cmp        ebp, 0x1
00000000000056ea         mov        r14, rax
00000000000056ed         je         loc_5675

00000000000056ef         cmp        ebp, 0x3
00000000000056f2         jne        loc_567c

00000000000056f4         mov        dword [rax], 0x0
00000000000056fa         jmp        loc_567c
00000000000056fc         align      256

                     loc_5700:
0000000000005700         cmp        rbp, 0xffffffffbfffffff                     ; CODE XREF=xnumtoimax+95
0000000000005707         mov        eax, 0x22
000000000000570c         mov        edx, 0x4b
0000000000005711         cmovle     eax, edx
0000000000005714         mov        dword [r14], eax
0000000000005717         jmp        loc_567c

                     loc_571c:
000000000000571c         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=xnumtoimax+183
                        ; endp
0000000000005721         align      16                                          ; End of unwind block (FDE at 0x170bc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xdectoimax:
0000000000005730         sub        rsp, 0x10                                   ; Begin of unwind block (FDE at 0x17108), CODE XREF=main+641, main+723, main+798, main+990
0000000000005734         push       r9
0000000000005736         mov        r9, r8
0000000000005739         mov        r8, rcx
000000000000573c         mov        rcx, rdx
000000000000573f         mov        rdx, rsi
0000000000005742         mov        esi, 0xa
0000000000005747         call       xnumtoimax                                  ; xnumtoimax
000000000000574c         add        rsp, 0x18
0000000000005750         ret
                        ; endp
0000000000005751         align      32                                          ; End of unwind block (FDE at 0x17108)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int8_t, -72
        ;    var_50: int64_t, -80


                     xstrtoimax:
0000000000005760         push       r15                                         ; Begin of unwind block (FDE at 0x17124), CODE XREF=xnumtoimax+53
0000000000005762         push       r14
0000000000005764         push       r13
0000000000005766         push       r12
0000000000005768         push       rbp
0000000000005769         push       rbx
000000000000576a         sub        rsp, 0x28
000000000000576e         mov        rax, qword [fs:0x28]
0000000000005777         mov        qword [rsp+0x58+var_40], rax
000000000000577c         xor        eax, eax
000000000000577e         cmp        edx, 0x24
0000000000005781         ja         loc_5def

0000000000005787         lea        rax, qword [rsp+0x58+var_48]
000000000000578c         test       rsi, rsi
000000000000578f         mov        rbx, rsi
0000000000005792         mov        r12, rdi
0000000000005795         mov        ebp, edx
0000000000005797         mov        r14, rcx
000000000000579a         cmove      rbx, rax
000000000000579e         mov        r15, r8
00000000000057a1         call       j___errno_location                          ; __errno_location
00000000000057a6         xor        ecx, ecx
00000000000057a8         mov        edx, ebp
00000000000057aa         mov        dword [rax], 0x0
00000000000057b0         mov        rsi, rbx
00000000000057b3         mov        rdi, r12
00000000000057b6         mov        r13, rax
00000000000057b9         call       j___strtol_internal                         ; __strtol_internal
00000000000057be         mov        rcx, qword [rbx]
00000000000057c1         mov        rbp, rax
00000000000057c4         cmp        rcx, r12
00000000000057c7         je         loc_5828

00000000000057c9         mov        eax, dword [r13]
00000000000057cd         test       eax, eax
00000000000057cf         jne        loc_5810

00000000000057d1         xor        r12d, r12d

                     loc_57d4:
00000000000057d4         test       r15, r15                                    ; CODE XREF=xstrtoimax+193
00000000000057d7         je         loc_57e6

00000000000057d9         movzx      r13d, byte [rcx]
00000000000057dd         test       r13b, r13b
00000000000057e0         jne        loc_5863

                     loc_57e6:
00000000000057e6         mov        qword [r14], rbp                            ; CODE XREF=xstrtoimax+119, xstrtoimax+550

                     loc_57e9:
00000000000057e9         mov        rdi, qword [rsp+0x58+var_40]                ; CODE XREF=xstrtoimax+185, xstrtoimax+227, xstrtoimax+249, xstrtoimax+383, xstrtoimax+1382
00000000000057ee         xor        rdi, qword [fs:0x28]
00000000000057f7         mov        eax, r12d
00000000000057fa         jne        loc_5e0e

0000000000005800         add        rsp, 0x28
0000000000005804         pop        rbx
0000000000005805         pop        rbp
0000000000005806         pop        r12
0000000000005808         pop        r13
000000000000580a         pop        r14
000000000000580c         pop        r15
000000000000580e         ret
                        ; endp
000000000000580f         align      16

                     loc_5810:
0000000000005810         cmp        eax, 0x22                                   ; CODE XREF=xstrtoimax+111
0000000000005813         mov        r12d, 0x4
0000000000005819         jne        loc_57e9

000000000000581b         mov        r12d, 0x1
0000000000005821         jmp        loc_57d4
0000000000005823         align      8

                     loc_5828:
0000000000005828         test       r15, r15                                    ; CODE XREF=xstrtoimax+103
000000000000582b         je         loc_5cc0

0000000000005831         movzx      r13d, byte [rcx]
0000000000005835         mov        qword [rsp+0x58+var_50], rcx
000000000000583a         mov        r12d, 0x4
0000000000005840         test       r13b, r13b
0000000000005843         je         loc_57e9

0000000000005845         movsx      esi, r13b                                   ; argument "__c" for method j_strchr
0000000000005849         mov        rdi, r15                                    ; argument "__s" for method j_strchr
000000000000584c         call       j_strchr                                    ; strchr
0000000000005851         test       rax, rax
0000000000005854         mov        rcx, qword [rsp+0x58+var_50]
0000000000005859         je         loc_57e9

000000000000585b         mov        ebp, 0x1
0000000000005860         xor        r12d, r12d

                     loc_5863:
0000000000005863         movsx      esi, r13b                                   ; argument "__c" for method j_strchr, CODE XREF=xstrtoimax+128
0000000000005867         mov        rdi, r15                                    ; argument "__s" for method j_strchr
000000000000586a         mov        qword [rsp+0x58+var_50], rcx
000000000000586f         call       j_strchr                                    ; strchr
0000000000005874         test       rax, rax
0000000000005877         mov        rcx, qword [rsp+0x58+var_50]
000000000000587c         je         loc_58d8

000000000000587e         lea        eax, dword [r13-0x45]
0000000000005882         cmp        al, 0x2f
0000000000005884         ja         loc_58e8

0000000000005886         movabs     rdx, 0x814400308945
0000000000005890         bt         rdx, rax
0000000000005894         jae        loc_58e8

0000000000005896         mov        esi, 0x30                                   ; argument "__c" for method j_strchr
000000000000589b         mov        rdi, r15                                    ; argument "__s" for method j_strchr
000000000000589e         mov        qword [rsp+0x58+var_50], rcx
00000000000058a3         call       j_strchr                                    ; strchr
00000000000058a8         test       rax, rax
00000000000058ab         mov        rcx, qword [rsp+0x58+var_50]
00000000000058b0         je         loc_58e8

00000000000058b2         movzx      eax, byte [rcx+1]
00000000000058b6         cmp        al, 0x44
00000000000058b8         je         loc_58c6

00000000000058ba         cmp        al, 0x69
00000000000058bc         je         loc_5da8

00000000000058c2         cmp        al, 0x42
00000000000058c4         jne        loc_58e8

                     loc_58c6:
00000000000058c6         mov        edi, 0x2                                    ; CODE XREF=xstrtoimax+344
00000000000058cb         mov        eax, 0x3e8
00000000000058d0         jmp        loc_58f2
00000000000058d2         align      8

                     loc_58d8:
00000000000058d8         mov        qword [r14], rbp                            ; case 52, CODE XREF=xstrtoimax+284, xstrtoimax+410, xstrtoimax+430
00000000000058db         or         r12d, 0x2
00000000000058df         jmp        loc_57e9
00000000000058e4         align      8

                     loc_58e8:
00000000000058e8         mov        edi, 0x1                                    ; CODE XREF=xstrtoimax+292, xstrtoimax+308, xstrtoimax+336, xstrtoimax+356
00000000000058ed         mov        eax, 0x400

                     loc_58f2:
00000000000058f2         sub        r13d, 0x42                                  ; CODE XREF=xstrtoimax+368, xstrtoimax+1627
00000000000058f6         cmp        r13b, 0x35
00000000000058fa         ja         loc_58d8

00000000000058fc         lea        rsi, qword [switch_table_15748]             ; switch_table_15748
0000000000005903         movzx      r13d, r13b
0000000000005907         movsxd     rdx, dword [rsi+r13*4]
000000000000590b         add        rdx, rsi
000000000000590e         jmp        rdx                                         ; switch statement using table at 0x15748, with 54 cases, 0x58d8,0x5910,0x5970,0x5990,0x59c0,0x59f0,0x5a60,0x5ad0,0x5b10,0x5b70,0x5bd8,0x5c40,0x5c70

                     loc_5910:
0000000000005910         movabs     r8, 0x8000000000000000                      ; case 43, CODE XREF=xstrtoimax+430
000000000000591a         movsxd     rsi, eax
000000000000591d         mov        rax, r8
0000000000005920         cqo
0000000000005922         idiv       rsi
0000000000005925         cmp        rbp, rax
0000000000005928         mov        r9, rax
000000000000592b         jl         loc_5dd5

0000000000005931         movabs     r10, 0x7fffffffffffffff
000000000000593b         mov        rax, r10
000000000000593e         cqo
0000000000005940         idiv       rsi
0000000000005943         cmp        rbp, rax
0000000000005946         jg         loc_5de2

000000000000594c         imul       rbp, rsi
0000000000005950         cmp        r9, rbp
0000000000005953         jg         loc_5dd5

0000000000005959         cmp        rax, rbp
000000000000595c         jl         loc_5de2

0000000000005962         imul       rbp, rsi
0000000000005966         xor        eax, eax

                     loc_5968:
0000000000005968         or         r12d, eax                                   ; CODE XREF=xstrtoimax+1661, xstrtoimax+1674
000000000000596b         nop        dword [rax+rax]

                     loc_5970:
0000000000005970         movsxd     rax, edi                                    ; case 33, CODE XREF=xstrtoimax+430, xstrtoimax+601, xstrtoimax+650, xstrtoimax+935, xstrtoimax+1027, xstrtoimax+1290, xstrtoimax+1408, xstrtoimax+1600
0000000000005973         add        rcx, rax
0000000000005976         mov        eax, r12d
0000000000005979         or         eax, 0x2
000000000000597c         mov        qword [rbx], rcx
000000000000597f         cmp        byte [rcx], 0x0
0000000000005982         cmovne     r12d, eax
0000000000005986         jmp        loc_57e6
000000000000598b         align      16

                     loc_5990:
0000000000005990         movabs     rax, 0xc000000000000000                     ; case 53, CODE XREF=xstrtoimax+430
000000000000599a         cmp        rbp, rax
000000000000599d         jl         loc_5cd0

00000000000059a3         movabs     rax, 0x3fffffffffffffff
00000000000059ad         cmp        rbp, rax
00000000000059b0         jg         loc_5d90

00000000000059b6         add        rbp, rbp
00000000000059b9         jmp        loc_5970
00000000000059bb         align      64

                     loc_59c0:
00000000000059c0         movabs     rax, 0xffc0000000000000                     ; case 32, CODE XREF=xstrtoimax+430
00000000000059ca         cmp        rbp, rax
00000000000059cd         jl         loc_5cd0

00000000000059d3         movabs     rax, 0x3fffffffffffff
00000000000059dd         cmp        rbp, rax
00000000000059e0         jg         loc_5d90

00000000000059e6         shl        rbp, 0x9
00000000000059ea         jmp        loc_5970
00000000000059ec         align      16

                     loc_59f0:
00000000000059f0         movsxd     rsi, eax                                    ; case 24, CODE XREF=xstrtoimax+430
00000000000059f3         movabs     rax, 0x8000000000000000
00000000000059fd         mov        r8d, 0x7
0000000000005a03         cqo
0000000000005a05         xor        r11d, r11d
0000000000005a08         movabs     r9, 0x7fffffffffffffff
0000000000005a12         idiv       rsi
0000000000005a15         mov        r10, rax
0000000000005a18         jmp        loc_5a3f
0000000000005a1a         align      32

                     loc_5a20:
0000000000005a20         mov        rax, r9                                     ; CODE XREF=xstrtoimax+738
0000000000005a23         cqo
0000000000005a25         idiv       rsi
0000000000005a28         cmp        rax, rbp
0000000000005a2b         jl         loc_5d18

0000000000005a31         imul       rbp, rsi

                     loc_5a35:
0000000000005a35         sub        r8d, 0x1                                    ; CODE XREF=xstrtoimax+756, xstrtoimax+1480
0000000000005a39         je         loc_5b60

                     loc_5a3f:
0000000000005a3f         cmp        r10, rbp                                    ; CODE XREF=xstrtoimax+696
0000000000005a42         jle        loc_5a20

0000000000005a44         mov        r11d, 0x1
0000000000005a4a         movabs     rbp, 0x8000000000000000
0000000000005a54         jmp        loc_5a35
0000000000005a56         align      32

                     loc_5a60:
0000000000005a60         movsxd     rsi, eax                                    ; case 23, CODE XREF=xstrtoimax+430
0000000000005a63         movabs     rax, 0x8000000000000000
0000000000005a6d         mov        r8d, 0x8
0000000000005a73         cqo
0000000000005a75         xor        r11d, r11d
0000000000005a78         movabs     r9, 0x7fffffffffffffff
0000000000005a82         idiv       rsi
0000000000005a85         mov        r10, rax
0000000000005a88         jmp        loc_5aaf
0000000000005a8a         align      16

                     loc_5a90:
0000000000005a90         mov        rax, r9                                     ; CODE XREF=xstrtoimax+850
0000000000005a93         cqo
0000000000005a95         idiv       rsi
0000000000005a98         cmp        rax, rbp
0000000000005a9b         jl         loc_5ce8

0000000000005aa1         imul       rbp, rsi

                     loc_5aa5:
0000000000005aa5         sub        r8d, 0x1                                    ; CODE XREF=xstrtoimax+868, xstrtoimax+1432
0000000000005aa9         je         loc_5b60

                     loc_5aaf:
0000000000005aaf         cmp        r10, rbp                                    ; CODE XREF=xstrtoimax+808
0000000000005ab2         jle        loc_5a90

0000000000005ab4         mov        r11d, 0x1
0000000000005aba         movabs     rbp, 0x8000000000000000
0000000000005ac4         jmp        loc_5aa5
0000000000005ac6         align      16

                     loc_5ad0:
0000000000005ad0         movabs     r8, 0x8000000000000000                      ; case 41, CODE XREF=xstrtoimax+430
0000000000005ada         movsxd     rsi, eax
0000000000005add         mov        rax, r8
0000000000005ae0         cqo
0000000000005ae2         idiv       rsi
0000000000005ae5         cmp        rbp, rax
0000000000005ae8         jl         loc_5cd0

0000000000005aee         sub        r8, 0x1
0000000000005af2         mov        rax, r8
0000000000005af5         cqo
0000000000005af7         idiv       rsi
0000000000005afa         cmp        rbp, rax
0000000000005afd         jg         loc_5d90

0000000000005b03         imul       rbp, rsi
0000000000005b07         jmp        loc_5970
0000000000005b0c         align      16

                     loc_5b10:
0000000000005b10         movsxd     rsi, eax                                    ; case 37, CODE XREF=xstrtoimax+430
0000000000005b13         movabs     rax, 0x8000000000000000
0000000000005b1d         mov        r8d, 0x3
0000000000005b23         cqo
0000000000005b25         xor        r11d, r11d
0000000000005b28         movabs     r9, 0x7fffffffffffffff
0000000000005b32         idiv       rsi
0000000000005b35         mov        r10, rax

                     loc_5b38:
0000000000005b38         cmp        r10, rbp                                    ; CODE XREF=xstrtoimax+1018
0000000000005b3b         jg         loc_5d30

0000000000005b41         mov        rax, r9
0000000000005b44         cqo
0000000000005b46         idiv       rsi
0000000000005b49         cmp        rax, rbp
0000000000005b4c         jl         loc_5dc0

0000000000005b52         imul       rbp, rsi

                     loc_5b56:
0000000000005b56         sub        r8d, 0x1                                    ; CODE XREF=xstrtoimax+1504, xstrtoimax+1648
0000000000005b5a         jne        loc_5b38

0000000000005b5c         nop        dword [rax]

                     loc_5b60:
0000000000005b60         or         r12d, r11d                                  ; CODE XREF=xstrtoimax+729, xstrtoimax+841, xstrtoimax+1113, xstrtoimax+1217, xstrtoimax+1368
0000000000005b63         jmp        loc_5970
0000000000005b68         align      16

                     loc_5b70:
0000000000005b70         movsxd     rsi, eax                                    ; case 3, CODE XREF=xstrtoimax+430
0000000000005b73         movabs     rax, 0x8000000000000000
0000000000005b7d         mov        r8d, 0x6
0000000000005b83         cqo
0000000000005b85         xor        r11d, r11d
0000000000005b88         movabs     r9, 0x7fffffffffffffff
0000000000005b92         idiv       rsi
0000000000005b95         mov        r10, rax
0000000000005b98         jmp        loc_5bbb
0000000000005b9a         align      32

                     loc_5ba0:
0000000000005ba0         mov        rax, r9                                     ; CODE XREF=xstrtoimax+1118
0000000000005ba3         cqo
0000000000005ba5         idiv       rsi
0000000000005ba8         cmp        rax, rbp
0000000000005bab         jl         loc_5d48

0000000000005bb1         imul       rbp, rsi

                     loc_5bb5:
0000000000005bb5         sub        r8d, 0x1                                    ; CODE XREF=xstrtoimax+1136, xstrtoimax+1528
0000000000005bb9         je         loc_5b60

                     loc_5bbb:
0000000000005bbb         cmp        r10, rbp                                    ; CODE XREF=xstrtoimax+1080
0000000000005bbe         jle        loc_5ba0

0000000000005bc0         mov        r11d, 0x1
0000000000005bc6         movabs     rbp, 0x8000000000000000
0000000000005bd0         jmp        loc_5bb5
0000000000005bd2         align      8

                     loc_5bd8:
0000000000005bd8         movsxd     rsi, eax                                    ; case 14, CODE XREF=xstrtoimax+430
0000000000005bdb         movabs     rax, 0x8000000000000000
0000000000005be5         mov        r8d, 0x5
0000000000005beb         cqo
0000000000005bed         xor        r11d, r11d
0000000000005bf0         movabs     r9, 0x7fffffffffffffff
0000000000005bfa         idiv       rsi
0000000000005bfd         mov        r10, rax
0000000000005c00         jmp        loc_5c27
0000000000005c02         align      8

                     loc_5c08:
0000000000005c08         mov        rax, r9                                     ; CODE XREF=xstrtoimax+1226
0000000000005c0b         cqo
0000000000005c0d         idiv       rsi
0000000000005c10         cmp        rax, rbp
0000000000005c13         jl         loc_5d60

0000000000005c19         imul       rbp, rsi

                     loc_5c1d:
0000000000005c1d         sub        r8d, 0x1                                    ; CODE XREF=xstrtoimax+1244, xstrtoimax+1552
0000000000005c21         je         loc_5b60

                     loc_5c27:
0000000000005c27         cmp        r10, rbp                                    ; CODE XREF=xstrtoimax+1184
0000000000005c2a         jle        loc_5c08

0000000000005c2c         mov        r11d, 0x1
0000000000005c32         movabs     rbp, 0x8000000000000000
0000000000005c3c         jmp        loc_5c1d
0000000000005c3e         align      64

                     loc_5c40:
0000000000005c40         movabs     rax, 0xffe0000000000000                     ; case 0, CODE XREF=xstrtoimax+430
0000000000005c4a         cmp        rbp, rax
0000000000005c4d         jl         loc_5cd0

0000000000005c53         movabs     rax, 0x1fffffffffffff
0000000000005c5d         cmp        rbp, rax
0000000000005c60         jg         loc_5d90

0000000000005c66         shl        rbp, 0xa
0000000000005c6a         jmp        loc_5970
0000000000005c6f         align      16

                     loc_5c70:
0000000000005c70         movsxd     rsi, eax                                    ; case 50, CODE XREF=xstrtoimax+430
0000000000005c73         movabs     rax, 0x8000000000000000
0000000000005c7d         mov        r8d, 0x4
0000000000005c83         cqo
0000000000005c85         xor        r11d, r11d
0000000000005c88         movabs     r9, 0x7fffffffffffffff
0000000000005c92         idiv       rsi
0000000000005c95         mov        r10, rax

                     loc_5c98:
0000000000005c98         cmp        r10, rbp                                    ; CODE XREF=xstrtoimax+1366
0000000000005c9b         jg         loc_5d00

0000000000005c9d         mov        rax, r9
0000000000005ca0         cqo
0000000000005ca2         idiv       rsi
0000000000005ca5         cmp        rax, rbp
0000000000005ca8         jl         loc_5d78

0000000000005cae         imul       rbp, rsi

                     loc_5cb2:
0000000000005cb2         sub        r8d, 0x1                                    ; CODE XREF=xstrtoimax+1456, xstrtoimax+1576
0000000000005cb6         jne        loc_5c98

0000000000005cb8         jmp        loc_5b60
0000000000005cbd         align      64

                     loc_5cc0:
0000000000005cc0         mov        r12d, 0x4                                   ; CODE XREF=xstrtoimax+203
0000000000005cc6         jmp        loc_57e9
0000000000005ccb         align      16

                     loc_5cd0:
0000000000005cd0         mov        r12d, 0x1                                   ; CODE XREF=xstrtoimax+573, xstrtoimax+621, xstrtoimax+904, xstrtoimax+1261
0000000000005cd6         movabs     rbp, 0x8000000000000000
0000000000005ce0         jmp        loc_5970
0000000000005ce5         align      8

                     loc_5ce8:
0000000000005ce8         mov        r11d, 0x1                                   ; CODE XREF=xstrtoimax+827
0000000000005cee         movabs     rbp, 0x7fffffffffffffff
0000000000005cf8         jmp        loc_5aa5
0000000000005cfd         align      256

                     loc_5d00:
0000000000005d00         mov        r11d, 0x1                                   ; CODE XREF=xstrtoimax+1339
0000000000005d06         movabs     rbp, 0x8000000000000000
0000000000005d10         jmp        loc_5cb2
0000000000005d12         align      8

                     loc_5d18:
0000000000005d18         mov        r11d, 0x1                                   ; CODE XREF=xstrtoimax+715
0000000000005d1e         movabs     rbp, 0x7fffffffffffffff
0000000000005d28         jmp        loc_5a35
0000000000005d2d         align      16

                     loc_5d30:
0000000000005d30         mov        r11d, 0x1                                   ; CODE XREF=xstrtoimax+987
0000000000005d36         movabs     rbp, 0x8000000000000000
0000000000005d40         jmp        loc_5b56
0000000000005d45         align      8

                     loc_5d48:
0000000000005d48         mov        r11d, 0x1                                   ; CODE XREF=xstrtoimax+1099
0000000000005d4e         movabs     rbp, 0x7fffffffffffffff
0000000000005d58         jmp        loc_5bb5
0000000000005d5d         align      32

                     loc_5d60:
0000000000005d60         mov        r11d, 0x1                                   ; CODE XREF=xstrtoimax+1203
0000000000005d66         movabs     rbp, 0x7fffffffffffffff
0000000000005d70         jmp        loc_5c1d
0000000000005d75         align      8

                     loc_5d78:
0000000000005d78         mov        r11d, 0x1                                   ; CODE XREF=xstrtoimax+1352
0000000000005d7e         movabs     rbp, 0x7fffffffffffffff
0000000000005d88         jmp        loc_5cb2
0000000000005d8d         align      16

                     loc_5d90:
0000000000005d90         mov        r12d, 0x1                                   ; CODE XREF=xstrtoimax+592, xstrtoimax+640, xstrtoimax+925, xstrtoimax+1280
0000000000005d96         movabs     rbp, 0x7fffffffffffffff
0000000000005da0         jmp        loc_5970
0000000000005da5         align      8

                     loc_5da8:
0000000000005da8         xor        edi, edi                                    ; CODE XREF=xstrtoimax+348
0000000000005daa         cmp        byte [rcx+2], 0x42
0000000000005dae         mov        eax, 0x400
0000000000005db3         sete       dil
0000000000005db7         lea        edi, dword [rdi+rdi+1]
0000000000005dbb         jmp        loc_58f2

                     loc_5dc0:
0000000000005dc0         mov        r11d, 0x1                                   ; CODE XREF=xstrtoimax+1004
0000000000005dc6         movabs     rbp, 0x7fffffffffffffff
0000000000005dd0         jmp        loc_5b56

                     loc_5dd5:
0000000000005dd5         mov        eax, 0x1                                    ; CODE XREF=xstrtoimax+459, xstrtoimax+499
0000000000005dda         mov        rbp, r8
0000000000005ddd         jmp        loc_5968

                     loc_5de2:
0000000000005de2         mov        eax, 0x1                                    ; CODE XREF=xstrtoimax+486, xstrtoimax+508
0000000000005de7         mov        rbp, r10
0000000000005dea         jmp        loc_5968

                     loc_5def:
0000000000005def         lea        rcx, qword [__PRETTY_FUNCTION__.4162]       ; argument "__function" for method j___assert_fail, "xstrtoimax", CODE XREF=xstrtoimax+33
0000000000005df6         lea        rsi, qword [aCoreutils831li_15700]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/xstrtol.c"
0000000000005dfd         lea        rdi, qword [a0StrtolbaseStr]                ; argument "__assertion" for method j___assert_fail, "0 <= strtol_base && strtol_base <= 36"
0000000000005e04         mov        edx, 0x54                                   ; argument "__line" for method j___assert_fail
0000000000005e09         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_5e0e:
0000000000005e0e         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=xstrtoimax+154
                        ; endp
0000000000005e13         align      32                                          ; End of unwind block (FDE at 0x17124)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fclose:
0000000000005e20         push       r12                                         ; Begin of unwind block (FDE at 0x17174), CODE XREF=main+1558, nl_file+370, close_stream+21
0000000000005e22         push       rbp
0000000000005e23         push       rbx
0000000000005e24         mov        rbx, rdi
0000000000005e27         call       j_fileno                                    ; fileno
0000000000005e2c         test       eax, eax
0000000000005e2e         mov        rdi, rbx
0000000000005e31         js         loc_5e87

0000000000005e33         call       j___freading                                ; __freading
0000000000005e38         test       eax, eax
0000000000005e3a         jne        loc_5e68

                     loc_5e3c:
0000000000005e3c         mov        rdi, rbx                                    ; CODE XREF=rpl_fclose+98
0000000000005e3f         call       rpl_fflush                                  ; rpl_fflush
0000000000005e44         test       eax, eax
0000000000005e46         je         loc_5e84

0000000000005e48         call       j___errno_location                          ; __errno_location
0000000000005e4d         mov        r12d, dword [rax]
0000000000005e50         mov        rdi, rbx                                    ; argument "__stream" for method j_fclose
0000000000005e53         mov        rbp, rax
0000000000005e56         call       j_fclose                                    ; fclose
0000000000005e5b         test       r12d, r12d
0000000000005e5e         jne        loc_5e90

                     loc_5e60:
0000000000005e60         pop        rbx                                         ; CODE XREF=rpl_fclose+121
0000000000005e61         pop        rbp
0000000000005e62         pop        r12
0000000000005e64         ret
                        ; endp
0000000000005e65         align      8

                     loc_5e68:
0000000000005e68         mov        rdi, rbx                                    ; argument "__stream" for method j_fileno, CODE XREF=rpl_fclose+26
0000000000005e6b         call       j_fileno                                    ; fileno
0000000000005e70         xor        esi, esi                                    ; argument "__offset" for method j_lseek
0000000000005e72         mov        edx, 0x1                                    ; argument "__whence" for method j_lseek
0000000000005e77         mov        edi, eax                                    ; argument "__fd" for method j_lseek
0000000000005e79         call       j_lseek                                     ; lseek
0000000000005e7e         cmp        rax, 0xffffffffffffffff
0000000000005e82         jne        loc_5e3c

                     loc_5e84:
0000000000005e84         mov        rdi, rbx                                    ; CODE XREF=rpl_fclose+38

                     loc_5e87:
0000000000005e87         pop        rbx                                         ; CODE XREF=rpl_fclose+17
0000000000005e88         pop        rbp
0000000000005e89         pop        r12
0000000000005e8b         jmp        j_fclose                                    ; fclose
                        ; endp

                     loc_5e90:
0000000000005e90         mov        dword [rbp], r12d                           ; CODE XREF=rpl_fclose+62
0000000000005e94         mov        eax, 0xffffffff
0000000000005e99         jmp        loc_5e60
0000000000005e9b         align      32                                          ; End of unwind block (FDE at 0x17174)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fflush:
0000000000005ea0         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0x171ac), CODE XREF=rpl_fclose+31
0000000000005ea3         push       rbx
0000000000005ea4         mov        rbx, rdi
0000000000005ea7         je         loc_5eba

0000000000005ea9         call       j___freading                                ; __freading
0000000000005eae         test       eax, eax
0000000000005eb0         je         loc_5eba

0000000000005eb2         test       dword [rbx], 0x100
0000000000005eb8         jne        loc_5ec8

                     loc_5eba:
0000000000005eba         mov        rdi, rbx                                    ; argument "__stream" for method j_fflush, CODE XREF=rpl_fflush+7, rpl_fflush+16
0000000000005ebd         pop        rbx
0000000000005ebe         jmp        j_fflush                                    ; fflush
                        ; endp
0000000000005ec3         align      8

                     loc_5ec8:
0000000000005ec8         mov        rdi, rbx                                    ; CODE XREF=rpl_fflush+24
0000000000005ecb         mov        edx, 0x1
0000000000005ed0         xor        esi, esi
0000000000005ed2         call       rpl_fseeko                                  ; rpl_fseeko
0000000000005ed7         mov        rdi, rbx                                    ; argument "__stream" for method j_fflush
0000000000005eda         pop        rbx
0000000000005edb         jmp        j_fflush                                    ; fflush
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fseeko:
0000000000005ee0         mov        rax, qword [rdi+8]                          ; End of unwind block (FDE at 0x171ac), Begin of unwind block (FDE at 0x171cc), CODE XREF=rpl_fflush+50
0000000000005ee4         cmp        qword [rdi+0x10], rax
0000000000005ee8         je         loc_5ef0

                     j_j_fseeko:        // fseeko
0000000000005eea         jmp        j_fseeko                                    ; fseeko, CODE XREF=j_j_fseeko+14, j_j_fseeko+21
                        ; endp
0000000000005eef         align      16

                     loc_5ef0:
0000000000005ef0         mov        rax, qword [rdi+0x20]                       ; CODE XREF=rpl_fseeko+8
0000000000005ef4         cmp        qword [rdi+0x28], rax
0000000000005ef8         jne        j_j_fseeko                                  ; fseeko

0000000000005efa         cmp        qword [rdi+0x48], 0x0
0000000000005eff         jne        j_j_fseeko                                  ; fseeko

0000000000005f01         push       r12
0000000000005f03         push       rbp
0000000000005f04         mov        r12d, edx
0000000000005f07         push       rbx
0000000000005f08         mov        rbp, rsi
0000000000005f0b         mov        rbx, rdi
0000000000005f0e         call       j_fileno                                    ; fileno
0000000000005f13         mov        edx, r12d                                   ; argument "__whence" for method j_lseek
0000000000005f16         mov        rsi, rbp                                    ; argument "__offset" for method j_lseek
0000000000005f19         mov        edi, eax                                    ; argument "__fd" for method j_lseek
0000000000005f1b         call       j_lseek                                     ; lseek
0000000000005f20         cmp        rax, 0xffffffffffffffff
0000000000005f24         je         loc_5f32

0000000000005f26         and        dword [rbx], 0xffffffef
0000000000005f29         mov        qword [rbx+0x90], rax
0000000000005f30         xor        eax, eax

                     loc_5f32:
0000000000005f32         pop        rbx                                         ; CODE XREF=j_j_fseeko+58
0000000000005f33         pop        rbp
0000000000005f34         pop        r12
0000000000005f36         ret
                        ; endp
0000000000005f37         align      64                                          ; End of unwind block (FDE at 0x171cc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_34: int8_t, -52


                     rpl_mbrtowc:
0000000000005f40         push       r13                                         ; Begin of unwind block (FDE at 0x171fc), CODE XREF=sub_3900+534, build_wcs_buffer+111, build_wcs_upper_buffer+231, build_wcs_upper_buffer+608, re_string_reconstruct+586, re_string_reconstruct+1343, re_compile_fastmap_iter.isra.30+499, re_compile_fastmap_iter.isra.30+885
0000000000005f42         push       r12
0000000000005f44         mov        r13, rsi
0000000000005f47         push       rbp
0000000000005f48         push       rbx
0000000000005f49         mov        rbx, rdi
0000000000005f4c         mov        r12, rdx
0000000000005f4f         sub        rsp, 0x18
0000000000005f53         mov        rax, qword [fs:0x28]
0000000000005f5c         mov        qword [rsp+0x38+var_30], rax
0000000000005f61         xor        eax, eax
0000000000005f63         lea        rax, qword [rsp+0x38+var_34]
0000000000005f68         test       rdi, rdi
0000000000005f6b         cmove      rbx, rax
0000000000005f6f         mov        rdi, rbx                                    ; argument "__pwc" for method j_mbrtowc
0000000000005f72         call       j_mbrtowc                                   ; mbrtowc
0000000000005f77         cmp        rax, 0xfffffffffffffffd
0000000000005f7b         mov        rbp, rax
0000000000005f7e         jbe        loc_5fa0

0000000000005f80         test       r12, r12
0000000000005f83         je         loc_5fa0

0000000000005f85         xor        edi, edi
0000000000005f87         call       hard_locale                                 ; hard_locale
0000000000005f8c         test       al, al
0000000000005f8e         jne        loc_5fa0

0000000000005f90         movzx      eax, byte [r13]
0000000000005f95         mov        ebp, 0x1
0000000000005f9a         mov        dword [rbx], eax
0000000000005f9c         nop        dword [rax]

                     loc_5fa0:
0000000000005fa0         mov        rdx, qword [rsp+0x38+var_30]                ; CODE XREF=rpl_mbrtowc+62, rpl_mbrtowc+67, rpl_mbrtowc+78
0000000000005fa5         xor        rdx, qword [fs:0x28]
0000000000005fae         mov        rax, rbp
0000000000005fb1         jne        loc_5fbe

0000000000005fb3         add        rsp, 0x18
0000000000005fb7         pop        rbx
0000000000005fb8         pop        rbp
0000000000005fb9         pop        r12
0000000000005fbb         pop        r13
0000000000005fbd         ret
                        ; endp

                     loc_5fbe:
0000000000005fbe         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=rpl_mbrtowc+113
                        ; endp
0000000000005fc3         align      16                                          ; End of unwind block (FDE at 0x171fc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     peek_token_bracket:
0000000000005fd0         mov        rax, qword [rsi+0x48]                       ; Begin of unwind block (FDE at 0x1723c), CODE XREF=parse_bracket_element.constprop.37+507, sub_116a0+84, sub_116a0+295, sub_116a0+1382, sub_116a0+1566, sub_116a0+1659
0000000000005fd4         cmp        qword [rsi+0x68], rax
0000000000005fd8         jle        loc_6030

0000000000005fda         mov        r8, qword [rsi+8]
0000000000005fde         cmp        dword [rsi+0x90], 0x1
0000000000005fe5         movzx      ecx, byte [r8+rax]
0000000000005fea         mov        byte [rdi], cl
0000000000005fec         jle        loc_6003

0000000000005fee         cmp        rax, qword [rsi+0x30]
0000000000005ff2         je         loc_6003

0000000000005ff4         mov        r9, qword [rsi+0x10]
0000000000005ff8         cmp        dword [r9+rax*4], 0xffffffff
0000000000005ffd         je         loc_607f

                     loc_6003:
0000000000006003         cmp        cl, 0x5c                                    ; CODE XREF=peek_token_bracket+28, peek_token_bracket+34
0000000000006006         je         loc_6070

0000000000006008         cmp        cl, 0x5b
000000000000600b         je         loc_6040

000000000000600d         cmp        cl, 0x5d
0000000000006010         je         loc_60b0

0000000000006016         cmp        cl, 0x5e
0000000000006019         je         loc_60a0

000000000000601f         cmp        cl, 0x2d
0000000000006022         jne        loc_607f

0000000000006024         mov        byte [rdi+8], 0x16
0000000000006028         mov        eax, 0x1
000000000000602d         ret
                        ; endp
000000000000602e         align      16

                     loc_6030:
0000000000006030         mov        byte [rdi+8], 0x2                           ; CODE XREF=peek_token_bracket+8
0000000000006034         xor        eax, eax
0000000000006036         ret
                        ; endp
0000000000006037         align      64

                     loc_6040:
0000000000006040         lea        rcx, qword [rax+1]                          ; CODE XREF=peek_token_bracket+59
0000000000006044         cmp        rcx, qword [rsi+0x58]
0000000000006048         jge        loc_6090

000000000000604a         movzx      eax, byte [r8+rax+1]
0000000000006050         cmp        al, 0x3a
0000000000006052         mov        byte [rdi], al
0000000000006054         je         loc_60f0

000000000000605a         cmp        al, 0x3d
000000000000605c         je         loc_60e0

0000000000006062         cmp        al, 0x2e
0000000000006064         jne        loc_6090

0000000000006066         mov        byte [rdi+8], 0x1a
000000000000606a         mov        eax, 0x2
000000000000606f         ret
                        ; endp

                     loc_6070:
0000000000006070         and        edx, 0x1                                    ; CODE XREF=peek_token_bracket+54
0000000000006073         je         loc_607f

0000000000006075         lea        rdx, qword [rax+1]
0000000000006079         cmp        rdx, qword [rsi+0x58]
000000000000607d         jl         loc_60c0

                     loc_607f:
000000000000607f         mov        byte [rdi+8], 0x1                           ; CODE XREF=peek_token_bracket+45, peek_token_bracket+82, peek_token_bracket+163
0000000000006083         mov        eax, 0x1
0000000000006088         ret
                        ; endp
0000000000006089         align      16

                     loc_6090:
0000000000006090         mov        byte [rdi+8], 0x1                           ; CODE XREF=peek_token_bracket+120, peek_token_bracket+148, peek_token_bracket+291
0000000000006094         mov        byte [rdi], 0x5b
0000000000006097         mov        eax, 0x1
000000000000609c         ret
                        ; endp
000000000000609d         align      32

                     loc_60a0:
00000000000060a0         mov        byte [rdi+8], 0x19                          ; CODE XREF=peek_token_bracket+73
00000000000060a4         mov        eax, 0x1
00000000000060a9         ret
                        ; endp
00000000000060aa         align      16

                     loc_60b0:
00000000000060b0         mov        byte [rdi+8], 0x15                          ; CODE XREF=peek_token_bracket+64
00000000000060b4         mov        eax, 0x1
00000000000060b9         ret
                        ; endp
00000000000060ba         align      64

                     loc_60c0:
00000000000060c0         mov        qword [rsi+0x48], rdx                       ; CODE XREF=peek_token_bracket+173
00000000000060c4         movzx      eax, byte [r8+rax+1]
00000000000060ca         mov        byte [rdi+8], 0x1
00000000000060ce         mov        byte [rdi], al
00000000000060d0         mov        eax, 0x1
00000000000060d5         ret
                        ; endp
00000000000060d6         align      32

                     loc_60e0:
00000000000060e0         mov        byte [rdi+8], 0x1c                          ; CODE XREF=peek_token_bracket+140
00000000000060e4         mov        eax, 0x2
00000000000060e9         ret
                        ; endp
00000000000060ea         align      16

                     loc_60f0:
00000000000060f0         and        edx, 0x4                                    ; CODE XREF=peek_token_bracket+132
00000000000060f3         je         loc_6090

00000000000060f5         mov        byte [rdi+8], 0x1e
00000000000060f9         mov        eax, 0x2
00000000000060fe         ret
                        ; endp
00000000000060ff         align      256                                         ; End of unwind block (FDE at 0x1723c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     mark_opt_subexp:
0000000000006100         cmp        byte [rsi+0x30], 0x11                       ; Begin of unwind block (FDE at 0x17250), DATA XREF=sub_10f30+1284
0000000000006104         je         loc_6110

                     loc_6106:
0000000000006106         xor        eax, eax                                    ; CODE XREF=mark_opt_subexp+20
0000000000006108         ret
                        ; endp
0000000000006109         align      16

                     loc_6110:
0000000000006110         cmp        rdi, qword [rsi+0x28]                       ; CODE XREF=mark_opt_subexp+4
0000000000006114         jne        loc_6106

0000000000006116         or         byte [rsi+0x32], 0x8
000000000000611a         xor        eax, eax
000000000000611c         ret
                        ; endp
000000000000611d         align      32                                          ; End of unwind block (FDE at 0x17250)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_52: int16_t, -82
        ;    var_58: int32_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_6C: int32_t, -108
        ;    var_70: int32_t, -112
        ;    var_78: int64_t, -120


                     check_dst_limits_calc_pos_1:
0000000000006120         push       r15                                         ; Begin of unwind block (FDE at 0x17264), CODE XREF=check_dst_limits_calc_pos_1+349, check_dst_limits_calc_pos+88
0000000000006122         push       r14
0000000000006124         mov        r9, rdx
0000000000006127         push       r13
0000000000006129         push       r12
000000000000612b         lea        rdx, qword [rcx+rcx*2]
000000000000612f         push       rbp
0000000000006130         push       rbx
0000000000006131         mov        r15d, esi
0000000000006134         sub        rsp, 0x48
0000000000006138         mov        r14, qword [rdi+0x98]
000000000000613f         mov        qword [rsp+0x78+var_78], rdi
0000000000006143         mov        rax, qword [r14+0x30]
0000000000006147         lea        r12, qword [rax+rdx*8]
000000000000614b         cmp        qword [r12+8], 0x0
0000000000006151         jle        loc_62e5

0000000000006157         lea        rax, qword [r8+r8*4]
000000000000615b         mov        r11, rcx
000000000000615e         mov        ecx, r9d
0000000000006161         mov        r10, r8
0000000000006164         xor        ebx, ebx
0000000000006166         mov        dword [rsp+0x78+var_58], esi
000000000000616a         shl        rax, 0x3
000000000000616e         mov        r15, r9
0000000000006171         mov        qword [rsp+0x78+var_68], r11
0000000000006176         mov        qword [rsp+0x78+var_50], rax
000000000000617b         mov        eax, 0x1
0000000000006180         shl        rax, cl
0000000000006183         mov        qword [rsp+0x78+var_60], rax
0000000000006188         not        eax
000000000000618a         mov        word [rsp+0x78+var_52], ax
000000000000618f         mov        eax, esi
0000000000006191         and        eax, 0x1
0000000000006194         mov        dword [rsp+0x78+var_6C], eax
0000000000006198         mov        eax, esi
000000000000619a         and        eax, 0x2
000000000000619d         mov        dword [rsp+0x78+var_70], eax
00000000000061a1         jmp        loc_61c5
00000000000061a3         align      8

                     loc_61a8:
00000000000061a8         cmp        dl, 0x9                                     ; CODE XREF=check_dst_limits_calc_pos_1+191
00000000000061ab         je         loc_6300

00000000000061b1         cmp        dl, 0x4
00000000000061b4         je         loc_6208

                     loc_61b6:
00000000000061b6         add        rbx, 0x1                                    ; CODE XREF=check_dst_limits_calc_pos_1+199, check_dst_limits_calc_pos_1+204, check_dst_limits_calc_pos_1+236, check_dst_limits_calc_pos_1+486, check_dst_limits_calc_pos_1+495
00000000000061ba         cmp        qword [r12+8], rbx
00000000000061bf         jle        loc_62e0

                     loc_61c5:
00000000000061c5         mov        rax, qword [r12+0x10]                       ; CODE XREF=check_dst_limits_calc_pos_1+129, check_dst_limits_calc_pos_1+436
00000000000061ca         mov        rbp, qword [rax+rbx*8]
00000000000061ce         mov        rax, rbp
00000000000061d1         shl        rax, 0x4
00000000000061d5         add        rax, qword [r14]
00000000000061d8         movzx      edx, byte [rax+8]
00000000000061dc         cmp        dl, 0x8
00000000000061df         jne        loc_61a8

00000000000061e1         mov        ecx, dword [rsp+0x78+var_6C]
00000000000061e5         test       ecx, ecx
00000000000061e7         je         loc_61b6

00000000000061e9         cmp        qword [rax], r15
00000000000061ec         jne        loc_61b6

                     loc_61ee:
00000000000061ee         add        rsp, 0x48                                   ; CODE XREF=check_dst_limits_calc_pos_1+357
00000000000061f2         mov        eax, 0xffffffff
00000000000061f7         pop        rbx
00000000000061f8         pop        rbp
00000000000061f9         pop        r12
00000000000061fb         pop        r13
00000000000061fd         pop        r14
00000000000061ff         pop        r15
0000000000006201         ret
                        ; endp
0000000000006202         align      8

                     loc_6208:
0000000000006208         cmp        r10, 0xffffffffffffffff                     ; CODE XREF=check_dst_limits_calc_pos_1+148
000000000000620c         je         loc_61b6

000000000000620e         mov        rax, qword [rsp+0x78+var_78]
0000000000006212         mov        r13, qword [rsp+0x78+var_50]
0000000000006217         mov        rdi, rbp
000000000000621a         mov        qword [rsp+0x78+var_48], r12
000000000000621f         mov        qword [rsp+0x78+var_40], rbx
0000000000006224         mov        r12, r10
0000000000006227         add        r13, qword [rax+0xd8]
000000000000622e         lea        rax, qword [rbp+rbp*2]
0000000000006233         mov        rbp, r14
0000000000006236         mov        r14, rdi
0000000000006239         shl        rax, 0x3
000000000000623d         mov        rbx, rax

                     loc_6240:
0000000000006240         cmp        qword [r13], r14                            ; CODE XREF=check_dst_limits_calc_pos_1+409
0000000000006244         jne        loc_62b0

0000000000006246         cmp        r15, 0x3f
000000000000624a         jg         loc_6258

000000000000624c         movzx      eax, word [r13+0x22]
0000000000006251         test       qword [rsp+0x78+var_60], rax
0000000000006256         je         loc_62b0

                     loc_6258:
0000000000006258         mov        rax, qword [rbp+0x28]                       ; CODE XREF=check_dst_limits_calc_pos_1+298
000000000000625c         mov        rax, qword [rax+rbx+0x10]
0000000000006261         mov        rcx, qword [rax]
0000000000006264         cmp        qword [rsp+0x78+var_68], rcx
0000000000006269         je         loc_6330

000000000000626f         mov        esi, dword [rsp+0x78+var_58]
0000000000006273         mov        rdi, qword [rsp+0x78+var_78]
0000000000006277         mov        r8, r12
000000000000627a         mov        rdx, r15
000000000000627d         call       check_dst_limits_calc_pos_1                 ; check_dst_limits_calc_pos_1
0000000000006282         cmp        eax, 0xffffffff
0000000000006285         je         loc_61ee

000000000000628b         test       eax, eax
000000000000628d         jne        loc_6297

000000000000628f         mov        esi, dword [rsp+0x78+var_70]
0000000000006293         test       esi, esi
0000000000006295         jne        loc_6315

                     loc_6297:
0000000000006297         cmp        r15, 0x3f                                   ; CODE XREF=check_dst_limits_calc_pos_1+365
000000000000629b         jg         loc_62b0

000000000000629d         movzx      eax, word [rsp+0x78+var_52]
00000000000062a2         and        word [r13+0x22], ax
00000000000062a7         nop        word [rax+rax]

                     loc_62b0:
00000000000062b0         add        r13, 0x28                                   ; CODE XREF=check_dst_limits_calc_pos_1+292, check_dst_limits_calc_pos_1+310, check_dst_limits_calc_pos_1+379
00000000000062b4         cmp        byte [r13-8], 0x0
00000000000062b9         jne        loc_6240

00000000000062bb         mov        rbx, qword [rsp+0x78+var_40]
00000000000062c0         mov        r10, r12
00000000000062c3         mov        r12, qword [rsp+0x78+var_48]
00000000000062c8         mov        r14, rbp
00000000000062cb         add        rbx, 0x1
00000000000062cf         cmp        qword [r12+8], rbx
00000000000062d4         jg         loc_61c5

00000000000062da         nop        word [rax+rax]

                     loc_62e0:
00000000000062e0         mov        r15d, dword [rsp+0x78+var_58]               ; CODE XREF=check_dst_limits_calc_pos_1+159

                     loc_62e5:
00000000000062e5         add        rsp, 0x48                                   ; CODE XREF=check_dst_limits_calc_pos_1+49
00000000000062e9         mov        eax, r15d
00000000000062ec         pop        rbx
00000000000062ed         sar        eax, 0x1
00000000000062ef         pop        rbp
00000000000062f0         pop        r12
00000000000062f2         pop        r13
00000000000062f4         pop        r14
00000000000062f6         pop        r15
00000000000062f8         ret
                        ; endp
00000000000062f9         align      256

                     loc_6300:
0000000000006300         mov        edx, dword [rsp+0x78+var_70]                ; CODE XREF=check_dst_limits_calc_pos_1+139
0000000000006304         test       edx, edx
0000000000006306         je         loc_61b6

000000000000630c         cmp        qword [rax], r15
000000000000630f         jne        loc_61b6

                     loc_6315:
0000000000006315         add        rsp, 0x48                                   ; CODE XREF=check_dst_limits_calc_pos_1+373
0000000000006319         xor        eax, eax
000000000000631b         pop        rbx
000000000000631c         pop        rbp
000000000000631d         pop        r12
000000000000631f         pop        r13
0000000000006321         pop        r14
0000000000006323         pop        r15
0000000000006325         ret
                        ; endp
0000000000006326         align      16

                     loc_6330:
0000000000006330         mov        r15d, dword [rsp+0x78+var_58]               ; CODE XREF=check_dst_limits_calc_pos_1+329
0000000000006335         add        rsp, 0x48
0000000000006339         pop        rbx
000000000000633a         pop        rbp
000000000000633b         mov        eax, r15d
000000000000633e         and        eax, 0x1
0000000000006341         pop        r12
0000000000006343         neg        eax
0000000000006345         pop        r13
0000000000006347         pop        r14
0000000000006349         pop        r15
000000000000634b         ret
                        ; endp
000000000000634c         align      16                                          ; End of unwind block (FDE at 0x17264)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     check_dst_limits_calc_pos:
0000000000006350         mov        rax, qword [rdi+0xd8]                       ; Begin of unwind block (FDE at 0x172f8), CODE XREF=check_dst_limits.isra.13+430, check_dst_limits.isra.13+464
0000000000006357         lea        rsi, qword [rsi+rsi*4]
000000000000635b         lea        rax, qword [rax+rsi*8]
000000000000635f         mov        r10, qword [rax+0x10]
0000000000006363         cmp        r10, r8
0000000000006366         jg         loc_63b0

0000000000006368         mov        rax, qword [rax+0x18]
000000000000636c         cmp        rax, r8
000000000000636f         jl         loc_6390

0000000000006371         xor        esi, esi
0000000000006373         cmp        r10, r8
0000000000006376         sete       sil
000000000000637a         or         esi, 0x2
000000000000637d         cmp        rax, r8
0000000000006380         je         loc_63a5

0000000000006382         xor        eax, eax
0000000000006384         cmp        r10, r8
0000000000006387         je         loc_63a0

0000000000006389         ret
                        ; endp
000000000000638b         align      16

                     loc_6390:
0000000000006390         mov        eax, 0x1                                    ; CODE XREF=check_dst_limits_calc_pos+31
0000000000006395         ret
                        ; endp
0000000000006396         align      32

                     loc_63a0:
00000000000063a0         mov        esi, 0x1                                    ; CODE XREF=check_dst_limits_calc_pos+55

                     loc_63a5:
00000000000063a5         mov        r8, r9                                      ; CODE XREF=check_dst_limits_calc_pos+48
00000000000063a8         jmp        check_dst_limits_calc_pos_1                 ; check_dst_limits_calc_pos_1
                        ; endp
00000000000063ad         align      16

                     loc_63b0:
00000000000063b0         mov        eax, 0xffffffff                             ; CODE XREF=check_dst_limits_calc_pos+22
00000000000063b5         ret
                        ; endp
00000000000063b6         align      64                                          ; End of unwind block (FDE at 0x172f8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     postorder:
00000000000063c0         push       r12                                         ; Begin of unwind block (FDE at 0x1730c), CODE XREF=sub_10f30+93, sub_10f30+776, sub_10f30+1033, sub_10f30+1127, sub_10f30+1294, parse_branch+325, parse_branch+348, parse_branch+368, parse_reg_exp+317, re_compile_internal+1645, re_compile_internal+1672
00000000000063c2         mov        r12, rsi
00000000000063c5         push       rbp
00000000000063c6         mov        rbp, rdx
00000000000063c9         push       rbx
00000000000063ca         mov        rbx, rdi
00000000000063cd         jmp        loc_63d3
00000000000063cf         align      16

                     loc_63d0:
00000000000063d0         mov        rbx, rax                                    ; CODE XREF=postorder+26, postorder+35, postorder+87

                     loc_63d3:
00000000000063d3         mov        rax, qword [rbx+8]                          ; CODE XREF=postorder+13
00000000000063d7         test       rax, rax
00000000000063da         jne        loc_63d0

00000000000063dc         mov        rax, qword [rbx+0x10]
00000000000063e0         test       rax, rax
00000000000063e3         jne        loc_63d0

00000000000063e5         mov        rsi, rbx
00000000000063e8         mov        rdi, rbp
00000000000063eb         call       r12
00000000000063ee         test       eax, eax
00000000000063f0         jne        loc_6426

00000000000063f2         nop        word [rax+rax]

                     loc_63f8:
00000000000063f8         mov        rdx, qword [rbx]                            ; CODE XREF=postorder+100
00000000000063fb         test       rdx, rdx
00000000000063fe         je         loc_6426

0000000000006400         mov        rax, qword [rdx+0x10]
0000000000006404         cmp        rax, rbx
0000000000006407         mov        rbx, rdx
000000000000640a         sete       sil
000000000000640e         test       rax, rax
0000000000006411         sete       cl
0000000000006414         or         sil, cl
0000000000006417         je         loc_63d0

0000000000006419         mov        rsi, rbx
000000000000641c         mov        rdi, rbp
000000000000641f         call       r12
0000000000006422         test       eax, eax
0000000000006424         je         loc_63f8

                     loc_6426:
0000000000006426         pop        rbx                                         ; CODE XREF=postorder+48, postorder+62
0000000000006427         pop        rbp
0000000000006428         pop        r12
000000000000642a         ret
                        ; endp
000000000000642b         align      16                                          ; End of unwind block (FDE at 0x1730c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     preorder:
0000000000006430         push       r12                                         ; Begin of unwind block (FDE at 0x17338), CODE XREF=re_compile_internal+1563, re_compile_internal+1699
0000000000006432         mov        r12, rsi
0000000000006435         push       rbp
0000000000006436         mov        rbp, rdx
0000000000006439         push       rbx
000000000000643a         mov        rbx, rdi
000000000000643d         jmp        loc_6443
000000000000643f         align      64

                     loc_6440:
0000000000006440         mov        rbx, rdx                                    ; CODE XREF=preorder+41, preorder+63

                     loc_6443:
0000000000006443         mov        rsi, rbx                                    ; CODE XREF=preorder+13
0000000000006446         mov        rdi, rbp
0000000000006449         call       r12
000000000000644c         test       eax, eax
000000000000644e         jne        loc_647c

0000000000006450         mov        rdx, qword [rbx+8]
0000000000006454         xor        ecx, ecx
0000000000006456         test       rdx, rdx
0000000000006459         jne        loc_6440

000000000000645b         jmp        loc_6463
000000000000645d         align      32

                     loc_6460:
0000000000006460         mov        rbx, rdx                                    ; CODE XREF=preorder+74

                     loc_6463:
0000000000006463         mov        rdx, qword [rbx+0x10]                       ; CODE XREF=preorder+43
0000000000006467         cmp        rdx, rcx
000000000000646a         je         loc_6471

000000000000646c         test       rdx, rdx
000000000000646f         jne        loc_6440

                     loc_6471:
0000000000006471         mov        rdx, qword [rbx]                            ; CODE XREF=preorder+58
0000000000006474         mov        rcx, rbx
0000000000006477         test       rdx, rdx
000000000000647a         jne        loc_6460

                     loc_647c:
000000000000647c         pop        rbx                                         ; CODE XREF=preorder+30
000000000000647d         pop        rbp
000000000000647e         pop        r12
0000000000006480         ret
                        ; endp
0000000000006481         align      16                                          ; End of unwind block (FDE at 0x17338)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_string_realloc_buffers:
0000000000006490         push       rbp                                         ; Begin of unwind block (FDE at 0x17364), CODE XREF=extend_buffers+56, re_search_internal+587, re_compile_internal+789, re_compile_internal+1757
0000000000006491         push       rbx
0000000000006492         mov        rbp, rsi
0000000000006495         mov        rbx, rdi
0000000000006498         sub        rsp, 0x8
000000000000649c         cmp        dword [rdi+0x90], 0x1
00000000000064a3         jle        loc_64ed

00000000000064a5         movabs     rax, 0x1fffffffffffffff
00000000000064af         cmp        rsi, rax
00000000000064b2         ja         loc_6520

00000000000064b4         mov        rdi, qword [rdi+0x10]                       ; argument "__ptr" for method j_realloc
00000000000064b8         lea        rsi, qword [rsi*4]                          ; argument "__size" for method j_realloc
00000000000064c0         call       j_realloc                                   ; realloc
00000000000064c5         test       rax, rax
00000000000064c8         je         loc_6520

00000000000064ca         mov        rdi, qword [rbx+0x18]
00000000000064ce         mov        qword [rbx+0x10], rax
00000000000064d2         test       rdi, rdi
00000000000064d5         je         loc_64ed

00000000000064d7         lea        rsi, qword [rbp*8]                          ; argument "__size" for method j_realloc
00000000000064df         call       j_realloc                                   ; realloc
00000000000064e4         test       rax, rax
00000000000064e7         je         loc_6520

00000000000064e9         mov        qword [rbx+0x18], rax

                     loc_64ed:
00000000000064ed         cmp        byte [rbx+0x8b], 0x0                        ; CODE XREF=re_string_realloc_buffers+19, re_string_realloc_buffers+69
00000000000064f4         jne        loc_6508

                     loc_64f6:
00000000000064f6         mov        qword [rbx+0x40], rbp                       ; CODE XREF=re_string_realloc_buffers+141
00000000000064fa         add        rsp, 0x8
00000000000064fe         xor        eax, eax
0000000000006500         pop        rbx
0000000000006501         pop        rbp
0000000000006502         ret
                        ; endp
0000000000006503         align      8

                     loc_6508:
0000000000006508         mov        rdi, qword [rbx+8]                          ; argument "__ptr" for method j_realloc, CODE XREF=re_string_realloc_buffers+100
000000000000650c         mov        rsi, rbp                                    ; argument "__size" for method j_realloc
000000000000650f         call       j_realloc                                   ; realloc
0000000000006514         test       rax, rax
0000000000006517         je         loc_6520

0000000000006519         mov        qword [rbx+8], rax
000000000000651d         jmp        loc_64f6
000000000000651f         align      32

                     loc_6520:
0000000000006520         add        rsp, 0x8                                    ; CODE XREF=re_string_realloc_buffers+34, re_string_realloc_buffers+56, re_string_realloc_buffers+87, re_string_realloc_buffers+135
0000000000006524         mov        eax, 0xc
0000000000006529         pop        rbx
000000000000652a         pop        rbp
000000000000652b         ret
                        ; endp
000000000000652c         align      16                                          ; End of unwind block (FDE at 0x17364)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_node_set_insert_last:
0000000000006530         push       rbp                                         ; Begin of unwind block (FDE at 0x17398), CODE XREF=register_state+117, sub_13010+481
0000000000006531         push       rbx
0000000000006532         mov        rbp, rsi
0000000000006535         mov        rbx, rdi
0000000000006538         sub        rsp, 0x8
000000000000653c         mov        rsi, qword [rdi+8]
0000000000006540         cmp        qword [rdi], rsi
0000000000006543         mov        rax, qword [rdi+0x10]
0000000000006547         je         loc_6568

                     loc_6549:
0000000000006549         lea        rdx, qword [rsi+1]                          ; CODE XREF=re_node_set_insert_last+92
000000000000654d         mov        qword [rbx+8], rdx
0000000000006551         mov        qword [rax+rsi*8], rbp
0000000000006555         mov        eax, 0x1

                     loc_655a:
000000000000655a         add        rsp, 0x8                                    ; CODE XREF=re_node_set_insert_last+98
000000000000655e         pop        rbx
000000000000655f         pop        rbp
0000000000006560         ret
                        ; endp
0000000000006561         align      8

                     loc_6568:
0000000000006568         add        rsi, 0x1                                    ; CODE XREF=re_node_set_insert_last+23
000000000000656c         lea        rdx, qword [rsi+rsi]
0000000000006570         shl        rsi, 0x4                                    ; argument "__size" for method j_realloc
0000000000006574         mov        qword [rdi], rdx
0000000000006577         mov        rdi, rax                                    ; argument "__ptr" for method j_realloc
000000000000657a         call       j_realloc                                   ; realloc
000000000000657f         test       rax, rax
0000000000006582         je         loc_6590

0000000000006584         mov        qword [rbx+0x10], rax
0000000000006588         mov        rsi, qword [rbx+8]
000000000000658c         jmp        loc_6549
000000000000658e         align      16

                     loc_6590:
0000000000006590         xor        eax, eax                                    ; CODE XREF=re_node_set_insert_last+82
0000000000006592         jmp        loc_655a
0000000000006594         align      32                                          ; End of unwind block (FDE at 0x17398)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_node_set_insert:
00000000000065a0         push       rbp                                         ; Begin of unwind block (FDE at 0x173c4), CODE XREF=duplicate_node_closure+224, duplicate_node_closure+282, duplicate_node_closure+352, duplicate_node_closure+465, duplicate_node_closure+607, check_arrival_expand_ecl_sub+84, check_arrival_expand_ecl_sub+148, calc_eclosure_iter+360, calc_eclosure_iter+495, expand_bkref_cache+409, build_trtable+1657
00000000000065a1         push       rbx
00000000000065a2         mov        rbp, rsi
00000000000065a5         mov        rbx, rdi
00000000000065a8         sub        rsp, 0x8
00000000000065ac         mov        rdx, qword [rdi]
00000000000065af         test       rdx, rdx
00000000000065b2         je         loc_65d8

00000000000065b4         mov        rsi, qword [rdi+8]
00000000000065b8         mov        rax, qword [rdi+0x10]
00000000000065bc         test       rsi, rsi
00000000000065bf         jne        loc_6610

00000000000065c1         mov        qword [rax], rbp
00000000000065c4         add        qword [rdi+8], 0x1
00000000000065c9         mov        eax, 0x1

                     loc_65ce:
00000000000065ce         add        rsp, 0x8                                    ; CODE XREF=re_node_set_insert+177, re_node_set_insert+247, re_node_set_insert+295
00000000000065d2         pop        rbx
00000000000065d3         pop        rbp
00000000000065d4         ret
                        ; endp
00000000000065d5         align      8

                     loc_65d8:
00000000000065d8         mov        qword [rdi], 0x1                            ; CODE XREF=re_node_set_insert+18
00000000000065df         mov        qword [rdi+8], 0x1
00000000000065e7         mov        edi, 0x8                                    ; argument "__size" for method j_malloc
00000000000065ec         call       j_malloc                                    ; malloc
00000000000065f1         test       rax, rax
00000000000065f4         mov        qword [rbx+0x10], rax
00000000000065f8         je         loc_6688

00000000000065fe         mov        qword [rax], rbp
0000000000006601         add        rsp, 0x8
0000000000006605         mov        eax, 0x1
000000000000660a         pop        rbx
000000000000660b         pop        rbp
000000000000660c         ret
                        ; endp
000000000000660d         align      16

                     loc_6610:
0000000000006610         cmp        rdx, rsi                                    ; CODE XREF=re_node_set_insert+31
0000000000006613         je         loc_66a0

                     loc_6619:
0000000000006619         cmp        qword [rax], rbp                            ; CODE XREF=re_node_set_insert+288
000000000000661c         lea        rdx, qword [rsi*8]
0000000000006624         jle        loc_6660

0000000000006626         test       rsi, rsi
0000000000006629         jle        loc_6643

000000000000662b         add        rdx, rax
000000000000662e         nop

                     loc_6630:
0000000000006630         mov        rcx, qword [rdx-8]                          ; CODE XREF=re_node_set_insert+159
0000000000006634         sub        rdx, 0x8
0000000000006638         mov        qword [rdx+8], rcx
000000000000663c         cmp        rax, rdx
000000000000663f         jne        loc_6630

0000000000006641         xor        edx, edx

                     loc_6643:
0000000000006643         mov        qword [rax+rdx], rbp                        ; CODE XREF=re_node_set_insert+137, re_node_set_insert+200, re_node_set_insert+226
0000000000006647         mov        eax, 0x1
000000000000664c         add        qword [rbx+8], 0x1
0000000000006651         jmp        loc_65ce
0000000000006656         align      32

                     loc_6660:
0000000000006660         mov        rcx, qword [rax+rdx-8]                      ; CODE XREF=re_node_set_insert+132
0000000000006665         cmp        rbp, rcx
0000000000006668         jge        loc_6643

000000000000666a         nop        word [rax+rax]

                     loc_6670:
0000000000006670         mov        qword [rax+rdx], rcx                        ; CODE XREF=re_node_set_insert+224
0000000000006674         sub        rdx, 0x8
0000000000006678         mov        rcx, qword [rax+rdx-8]
000000000000667d         cmp        rcx, rbp
0000000000006680         jg         loc_6670

0000000000006682         jmp        loc_6643
0000000000006684         align      8

                     loc_6688:
0000000000006688         mov        qword [rbx+8], 0x0                          ; CODE XREF=re_node_set_insert+88
0000000000006690         mov        qword [rbx], 0x0
0000000000006697         jmp        loc_65ce
000000000000669c         align      32

                     loc_66a0:
00000000000066a0         lea        rdx, qword [rsi+rsi]                        ; CODE XREF=re_node_set_insert+115
00000000000066a4         shl        rsi, 0x4                                    ; argument "__size" for method j_realloc
00000000000066a8         mov        qword [rdi], rdx
00000000000066ab         mov        rdi, rax                                    ; argument "__ptr" for method j_realloc
00000000000066ae         call       j_realloc                                   ; realloc
00000000000066b3         test       rax, rax
00000000000066b6         je         loc_66c5

00000000000066b8         mov        qword [rbx+0x10], rax
00000000000066bc         mov        rsi, qword [rbx+8]
00000000000066c0         jmp        loc_6619

                     loc_66c5:
00000000000066c5         xor        eax, eax                                    ; CODE XREF=re_node_set_insert+278
00000000000066c7         jmp        loc_65ce
00000000000066cc         align      16                                          ; End of unwind block (FDE at 0x173c4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     register_state:
00000000000066d0         push       r14                                         ; Begin of unwind block (FDE at 0x173fc), CODE XREF=re_acquire_state_context+513, re_acquire_state+390
00000000000066d2         push       r13
00000000000066d4         mov        r14, rdi
00000000000066d7         push       r12
00000000000066d9         push       rbp
00000000000066da         mov        r12, rdx
00000000000066dd         push       rbx
00000000000066de         mov        rbx, qword [rsi+0x10]
00000000000066e2         mov        rbp, rsi
00000000000066e5         mov        qword [rsi], rdx
00000000000066e8         mov        qword [rsi+0x28], 0x0
00000000000066f0         lea        r13, qword [rsi+0x20]
00000000000066f4         lea        rdi, qword [rbx*8]                          ; argument "__size" for method j_malloc
00000000000066fc         mov        qword [rsi+0x20], rbx
0000000000006700         call       j_malloc                                    ; malloc
0000000000006705         test       rax, rax
0000000000006708         mov        qword [rbp+0x30], rax
000000000000670c         je         loc_674e

000000000000670e         test       rbx, rbx
0000000000006711         jle        loc_6760

0000000000006713         xor        ebx, ebx
0000000000006715         jmp        loc_672a
0000000000006717         align      32

                     loc_6720:
0000000000006720         add        rbx, 0x1                                    ; CODE XREF=register_state+112, register_state+124
0000000000006724         cmp        qword [rbp+0x10], rbx
0000000000006728         jle        loc_6760

                     loc_672a:
000000000000672a         mov        rax, qword [rbp+0x18]                       ; CODE XREF=register_state+69
000000000000672e         mov        rsi, qword [rax+rbx*8]
0000000000006732         mov        rax, rsi
0000000000006735         shl        rax, 0x4
0000000000006739         add        rax, qword [r14]
000000000000673c         test       byte [rax+8], 0x8
0000000000006740         jne        loc_6720

0000000000006742         mov        rdi, r13
0000000000006745         call       re_node_set_insert_last                     ; re_node_set_insert_last
000000000000674a         test       al, al
000000000000674c         jne        loc_6720

                     loc_674e:
000000000000674e         pop        rbx                                         ; CODE XREF=register_state+60, register_state+217
000000000000674f         mov        eax, 0xc
0000000000006754         pop        rbp
0000000000006755         pop        r12
0000000000006757         pop        r13
0000000000006759         pop        r14
000000000000675b         ret
                        ; endp
000000000000675c         align      32

                     loc_6760:
0000000000006760         and        r12, qword [r14+0x88]                       ; CODE XREF=register_state+65, register_state+88
0000000000006767         mov        rax, qword [r14+0x40]
000000000000676b         lea        rdx, qword [r12+r12*2]
000000000000676f         lea        rbx, qword [rax+rdx*8]
0000000000006773         mov        rdx, qword [rbx]
0000000000006776         cmp        qword [rbx+8], rdx
000000000000677a         mov        rax, qword [rbx+0x10]
000000000000677e         lea        rsi, qword [rdx+1]
0000000000006782         jle        loc_6796

                     loc_6784:
0000000000006784         mov        qword [rbx], rsi                            ; CODE XREF=register_state+234
0000000000006787         mov        qword [rax+rdx*8], rbp
000000000000678b         xor        eax, eax
000000000000678d         pop        rbx
000000000000678e         pop        rbp
000000000000678f         pop        r12
0000000000006791         pop        r13
0000000000006793         pop        r14
0000000000006795         ret
                        ; endp

                     loc_6796:
0000000000006796         lea        r12, qword [rsi+rsi]                        ; CODE XREF=register_state+178
000000000000679a         mov        rdi, rax                                    ; argument "__ptr" for method j_realloc
000000000000679d         shl        rsi, 0x4                                    ; argument "__size" for method j_realloc
00000000000067a1         call       j_realloc                                   ; realloc
00000000000067a6         test       rax, rax
00000000000067a9         je         loc_674e

00000000000067ab         mov        rdx, qword [rbx]
00000000000067ae         mov        qword [rbx+0x10], rax
00000000000067b2         mov        qword [rbx+8], r12
00000000000067b6         lea        rsi, qword [rdx+1]
00000000000067ba         jmp        loc_6784
00000000000067bc         align      64                                          ; End of unwind block (FDE at 0x173fc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     build_upper_buffer:
00000000000067c0         push       r12                                         ; Begin of unwind block (FDE at 0x1744c), CODE XREF=extend_buffers+320, re_string_reconstruct+1651, sub_13010+1344
00000000000067c2         mov        r12, qword [rdi+0x58]
00000000000067c6         cmp        qword [rdi+0x40], r12
00000000000067ca         push       rbp
00000000000067cb         mov        rbp, rdi
00000000000067ce         cmovle     r12, qword [rdi+0x40]
00000000000067d3         push       rbx
00000000000067d4         mov        rbx, qword [rdi+0x30]
00000000000067d8         cmp        r12, rbx
00000000000067db         jle        loc_6815

00000000000067dd         call       j___ctype_toupper_loc                       ; __ctype_toupper_loc
00000000000067e2         nop        word [rax+rax]

                     loc_67e8:
00000000000067e8         mov        rdx, qword [rbp]                            ; CODE XREF=build_upper_buffer+83
00000000000067ec         mov        rcx, qword [rbp+0x78]
00000000000067f0         add        rdx, rbx
00000000000067f3         add        rdx, qword [rbp+0x28]
00000000000067f7         test       rcx, rcx
00000000000067fa         movzx      edx, byte [rdx]
00000000000067fd         jne        loc_6828

                     loc_67ff:
00000000000067ff         mov        rsi, qword [rax]                            ; CODE XREF=build_upper_buffer+108
0000000000006802         mov        rcx, qword [rbp+8]
0000000000006806         mov        edx, dword [rsi+rdx*4]
0000000000006809         mov        byte [rcx+rbx], dl
000000000000680c         add        rbx, 0x1
0000000000006810         cmp        r12, rbx
0000000000006813         jne        loc_67e8

                     loc_6815:
0000000000006815         mov        qword [rbp+0x30], rbx                       ; CODE XREF=build_upper_buffer+27
0000000000006819         mov        qword [rbp+0x38], rbx
000000000000681d         pop        rbx
000000000000681e         pop        rbp
000000000000681f         pop        r12
0000000000006821         ret
                        ; endp
0000000000006822         align      8

                     loc_6828:
0000000000006828         movzx      edx, byte [rcx+rdx]                         ; CODE XREF=build_upper_buffer+61
000000000000682c         jmp        loc_67ff
000000000000682e         align      16                                          ; End of unwind block (FDE at 0x1744c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_88: int8_t, -136
        ;    var_8C: int32_t, -140


                     build_wcs_buffer:
0000000000006830         push       r15                                         ; Begin of unwind block (FDE at 0x1747c), CODE XREF=extend_buffers+275, re_string_reconstruct+424, sub_13010+1021
0000000000006832         push       r14
0000000000006834         push       r13
0000000000006836         push       r12
0000000000006838         push       rbp
0000000000006839         push       rbx
000000000000683a         mov        rbx, rdi
000000000000683d         sub        rsp, 0x68
0000000000006841         mov        r12, qword [rdi+0x58]
0000000000006845         mov        rbp, qword [rdi+0x30]
0000000000006849         mov        rax, qword [fs:0x28]
0000000000006852         mov        qword [rsp+0x98+var_40], rax
0000000000006857         xor        eax, eax
0000000000006859         cmp        qword [rdi+0x40], r12
000000000000685d         cmovle     r12, qword [rdi+0x40]
0000000000006862         cmp        r12, rbp
0000000000006865         jle        loc_68f4

000000000000686b         lea        r14, qword [rdi+0x20]
000000000000686f         lea        r13, qword [rsp+0x98+var_8C]
0000000000006874         nop        dword [rax]

                     loc_6878:
0000000000006878         mov        rdi, qword [rbx+0x78]                       ; CODE XREF=build_wcs_buffer+194, build_wcs_buffer+246
000000000000687c         mov        rdx, r12
000000000000687f         mov        r15, qword [rbx+0x20]
0000000000006883         sub        rdx, rbp
0000000000006886         test       rdi, rdi
0000000000006889         jne        loc_6970

000000000000688f         mov        rsi, qword [rbx+0x28]
0000000000006893         add        rsi, rbp
0000000000006896         add        rsi, qword [rbx]

                     loc_6899:
0000000000006899         mov        rcx, r14                                    ; CODE XREF=build_wcs_buffer+337, build_wcs_buffer+359, build_wcs_buffer+413
000000000000689c         mov        rdi, r13
000000000000689f         call       rpl_mbrtowc                                 ; rpl_mbrtowc
00000000000068a4         lea        rdx, qword [rax-1]
00000000000068a8         cmp        rdx, 0xfffffffffffffffd
00000000000068ac         ja         loc_6940

00000000000068b2         cmp        rax, 0xfffffffffffffffe
00000000000068b6         mov        edx, dword [rsp+0x98+var_8C]
00000000000068ba         je         loc_6930

                     loc_68bc:
00000000000068bc         mov        rcx, qword [rbx+0x10]                       ; CODE XREF=build_wcs_buffer+311
00000000000068c0         lea        rsi, qword [rbp+1]
00000000000068c4         lea        rdi, qword [rbp*4]
00000000000068cc         mov        dword [rcx+rbp*4], edx
00000000000068cf         add        rbp, rax
00000000000068d2         cmp        rsi, rbp
00000000000068d5         jge        loc_6920

00000000000068d7         lea        rdx, qword [rcx+rdi+4]
00000000000068dc         lea        rax, qword [rcx+rbp*4]

                     loc_68e0:
00000000000068e0         mov        dword [rdx], 0xffffffff                     ; CODE XREF=build_wcs_buffer+189
00000000000068e6         add        rdx, 0x4
00000000000068ea         cmp        rax, rdx
00000000000068ed         jne        loc_68e0

00000000000068ef         cmp        rbp, r12
00000000000068f2         jl         loc_6878

                     loc_68f4:
00000000000068f4         mov        rax, qword [rsp+0x98+var_40]                ; CODE XREF=build_wcs_buffer+53, build_wcs_buffer+252, build_wcs_buffer+428
00000000000068f9         xor        rax, qword [fs:0x28]
0000000000006902         mov        qword [rbx+0x30], rbp
0000000000006906         mov        qword [rbx+0x38], rbp
000000000000690a         jne        loc_69ee

0000000000006910         add        rsp, 0x68
0000000000006914         pop        rbx
0000000000006915         pop        rbp
0000000000006916         pop        r12
0000000000006918         pop        r13
000000000000691a         pop        r14
000000000000691c         pop        r15
000000000000691e         ret
                        ; endp
000000000000691f         align      32

                     loc_6920:
0000000000006920         mov        rbp, rsi                                    ; CODE XREF=build_wcs_buffer+165
0000000000006923         cmp        rbp, r12
0000000000006926         jl         loc_6878

000000000000692c         jmp        loc_68f4
000000000000692e         align      16

                     loc_6930:
0000000000006930         mov        rax, qword [rbx+0x58]                       ; CODE XREF=build_wcs_buffer+138
0000000000006934         cmp        qword [rbx+0x40], rax
0000000000006938         jl         loc_69d8

000000000000693e         nop

                     loc_6940:
0000000000006940         mov        rax, qword [rbx]                            ; CODE XREF=build_wcs_buffer+124
0000000000006943         mov        rcx, qword [rbx+0x78]
0000000000006947         add        rax, rbp
000000000000694a         add        rax, qword [rbx+0x28]
000000000000694e         test       rcx, rcx
0000000000006951         movzx      edx, byte [rax]
0000000000006954         mov        dword [rsp+0x98+var_8C], edx
0000000000006958         jne        loc_69e1

                     loc_695e:
000000000000695e         mov        qword [rbx+0x20], r15                       ; CODE XREF=build_wcs_buffer+441
0000000000006962         mov        eax, 0x1
0000000000006967         jmp        loc_68bc
000000000000696c         align      16

                     loc_6970:
0000000000006970         mov        ecx, dword [rbx+0x90]                       ; CODE XREF=build_wcs_buffer+89
0000000000006976         xor        eax, eax
0000000000006978         lea        rsi, qword [rsp+0x98+var_88]
000000000000697d         test       ecx, ecx
000000000000697f         jg         loc_69a1

0000000000006981         jmp        loc_6899
0000000000006986         align      16

                     loc_6990:
0000000000006990         add        rax, 0x1                                    ; CODE XREF=build_wcs_buffer+411
0000000000006994         cmp        rdx, rax
0000000000006997         je         loc_6899

000000000000699d         mov        rdi, qword [rbx+0x78]

                     loc_69a1:
00000000000069a1         mov        rcx, qword [rbx]                            ; CODE XREF=build_wcs_buffer+335
00000000000069a4         add        rcx, rbp
00000000000069a7         add        rcx, rax
00000000000069aa         add        rcx, qword [rbx+0x28]
00000000000069ae         movzx      ecx, byte [rcx]
00000000000069b1         movzx      ecx, byte [rdi+rcx]
00000000000069b5         mov        rdi, qword [rbx+8]
00000000000069b9         add        rdi, rbp
00000000000069bc         mov        byte [rdi+rax], cl
00000000000069bf         mov        byte [rsi+rax], cl
00000000000069c2         lea        ecx, dword [rax+1]
00000000000069c5         cmp        ecx, dword [rbx+0x90]
00000000000069cb         jl         loc_6990

00000000000069cd         jmp        loc_6899
00000000000069d2         align      8

                     loc_69d8:
00000000000069d8         mov        qword [rbx+0x20], r15                       ; CODE XREF=build_wcs_buffer+264
00000000000069dc         jmp        loc_68f4

                     loc_69e1:
00000000000069e1         movzx      edx, byte [rcx+rdx]                         ; CODE XREF=build_wcs_buffer+296
00000000000069e5         mov        dword [rsp+0x98+var_8C], edx
00000000000069e9         jmp        loc_695e

                     loc_69ee:
00000000000069ee         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=build_wcs_buffer+218
                        ; endp
00000000000069f3         align      512                                         ; End of unwind block (FDE at 0x1747c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_88: int8_t, -136
        ;    var_90: int64_t, -144
        ;    var_94: int32_t, -148
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208


                     build_wcs_upper_buffer:
0000000000006a00         push       r15                                         ; Begin of unwind block (FDE at 0x174c8), CODE XREF=extend_buffers+149, re_string_reconstruct+298, re_compile_internal+724
0000000000006a02         push       r14
0000000000006a04         mov        r14, rdi
0000000000006a07         push       r13
0000000000006a09         push       r12
0000000000006a0b         push       rbp
0000000000006a0c         push       rbx
0000000000006a0d         sub        rsp, 0xa8
0000000000006a14         mov        rbx, qword [rdi+0x58]
0000000000006a18         mov        r15, qword [rdi+0x30]
0000000000006a1c         mov        rax, qword [fs:0x28]
0000000000006a25         mov        qword [rsp+0xd8+var_40], rax
0000000000006a2d         xor        eax, eax
0000000000006a2f         cmp        qword [rdi+0x40], rbx
0000000000006a33         cmovle     rbx, qword [rdi+0x40]
0000000000006a38         cmp        byte [rdi+0x8a], 0x0
0000000000006a3f         jne        loc_6a4c

0000000000006a41         cmp        qword [rdi+0x78], 0x0
0000000000006a46         je         loc_6bd0

                     loc_6a4c:
0000000000006a4c         mov        r13, qword [r14+0x38]                       ; CODE XREF=build_wcs_upper_buffer+63, build_wcs_upper_buffer+471

                     loc_6a50:
0000000000006a50         cmp        r15, rbx                                    ; CODE XREF=build_wcs_upper_buffer+408, build_wcs_upper_buffer+450, build_wcs_upper_buffer+1169, build_wcs_upper_buffer+1184, build_wcs_upper_buffer+1459
0000000000006a53         jl         loc_6a90

                     loc_6a55:
0000000000006a55         mov        qword [r14+0x30], r15                       ; CODE XREF=build_wcs_upper_buffer+1233
0000000000006a59         mov        qword [r14+0x38], r13
0000000000006a5d         xor        eax, eax

                     loc_6a5f:
0000000000006a5f         mov        rcx, qword [rsp+0xd8+var_40]                ; CODE XREF=build_wcs_upper_buffer+898, build_wcs_upper_buffer+1515
0000000000006a67         xor        rcx, qword [fs:0x28]
0000000000006a70         jne        loc_6ffa

0000000000006a76         add        rsp, 0xa8
0000000000006a7d         pop        rbx
0000000000006a7e         pop        rbp
0000000000006a7f         pop        r12
0000000000006a81         pop        r13
0000000000006a83         pop        r14
0000000000006a85         pop        r15
0000000000006a87         ret
                        ; endp
0000000000006a88         align      16

                     loc_6a90:
0000000000006a90         lea        rax, qword [r14+0x20]                       ; CODE XREF=build_wcs_upper_buffer+83
0000000000006a94         mov        qword [rsp+0xd8+var_D0], rax
0000000000006a99         mov        rax, rbx
0000000000006a9c         sub        rax, r15
0000000000006a9f         mov        qword [rsp+0xd8+var_C8], rax
0000000000006aa4         lea        rax, qword [rsp+0xd8+var_94]
0000000000006aa9         mov        qword [rsp+0xd8+var_B8], rax

                     loc_6aae:
0000000000006aae         mov        rdx, qword [r14+0x78]                       ; CODE XREF=build_wcs_upper_buffer+1051
0000000000006ab2         mov        rax, qword [r14+0x20]
0000000000006ab6         test       rdx, rdx
0000000000006ab9         mov        qword [rsp+0xd8+var_90], rax
0000000000006abe         jne        loc_6dc9

0000000000006ac4         mov        rbp, qword [r14+0x28]
0000000000006ac8         add        rbp, r13
0000000000006acb         add        rbp, qword [r14]
0000000000006ace         mov        qword [rsp+0xd8+var_C0], rbp

                     loc_6ad3:
0000000000006ad3         mov        rcx, qword [rsp+0xd8+var_D0]                ; CODE XREF=build_wcs_upper_buffer+1040
0000000000006ad8         mov        rdx, qword [rsp+0xd8+var_C8]
0000000000006add         mov        rsi, qword [rsp+0xd8+var_C0]
0000000000006ae2         mov        rdi, qword [rsp+0xd8+var_B8]
0000000000006ae7         call       rpl_mbrtowc                                 ; rpl_mbrtowc
0000000000006aec         mov        rbp, rax
0000000000006aef         lea        rax, qword [rax-1]
0000000000006af3         cmp        rax, 0xfffffffffffffffc
0000000000006af7         mov        qword [rsp+0xd8+var_B8], rax
0000000000006afc         ja         loc_6e39

0000000000006b02         mov        edx, dword [rsp+0xd8+var_94]
0000000000006b06         mov        edi, edx                                    ; argument "__wc" for method j_towupper
0000000000006b08         mov        dword [rsp+0xd8+var_C8], edx
0000000000006b0c         call       j_towupper                                  ; towupper
0000000000006b11         mov        edx, dword [rsp+0xd8+var_C8]
0000000000006b15         mov        r12d, eax
0000000000006b18         mov        qword [rsp+0xd8+var_D0], r15
0000000000006b1d         cmp        edx, eax
0000000000006b1f         je         loc_6e20

0000000000006b25         lea        rcx, qword [rsp+0xd8+var_88]
0000000000006b2a         lea        rdx, qword [rsp+0xd8+var_90]                ; argument "__ps" for method j_wcrtomb
0000000000006b2f         mov        esi, eax                                    ; argument "__wc" for method j_wcrtomb
0000000000006b31         mov        rdi, rcx                                    ; argument "__s" for method j_wcrtomb
0000000000006b34         mov        qword [rsp+0xd8+var_C8], rcx
0000000000006b39         call       j_wcrtomb                                   ; wcrtomb
0000000000006b3e         cmp        rbp, rax
0000000000006b41         mov        r11, rax
0000000000006b44         mov        rcx, qword [rsp+0xd8+var_C8]
0000000000006b49         jne        loc_6ed6

0000000000006b4f         mov        rdi, qword [r14+8]
0000000000006b53         mov        rdx, rbp                                    ; argument "__n" for method j_memcpy
0000000000006b56         mov        rsi, rcx                                    ; argument "__src" for method j_memcpy
0000000000006b59         add        rdi, r15                                    ; argument "__dest" for method j_memcpy
0000000000006b5c         call       j_memcpy                                    ; memcpy

                     loc_6b61:
0000000000006b61         cmp        byte [r14+0x8c], 0x0                        ; CODE XREF=build_wcs_upper_buffer+1076
0000000000006b69         lea        rax, qword [rbp+r13]
0000000000006b6e         jne        loc_6ea5

                     loc_6b74:
0000000000006b74         add        r15, 0x1                                    ; CODE XREF=build_wcs_upper_buffer+1219
0000000000006b78         mov        rsi, qword [rsp+0xd8+var_D0]
0000000000006b7d         mov        rdx, qword [r14+0x10]
0000000000006b81         lea        rcx, qword [r15+rbp-1]
0000000000006b86         mov        r13, rax
0000000000006b89         cmp        r15, rcx
0000000000006b8c         lea        rax, qword [rsi*4]
0000000000006b94         mov        dword [rdx+rsi*4], r12d
0000000000006b98         jge        loc_6a50

0000000000006b9e         lea        rax, qword [rdx+rax+4]
0000000000006ba3         lea        rdx, qword [rdx+rcx*4]
0000000000006ba7         nop        word [rax+rax]

                     loc_6bb0:
0000000000006bb0         mov        dword [rax], 0xffffffff                     ; CODE XREF=build_wcs_upper_buffer+445
0000000000006bb6         add        rax, 0x4
0000000000006bba         cmp        rdx, rax
0000000000006bbd         jne        loc_6bb0

0000000000006bbf         mov        r15, rcx
0000000000006bc2         jmp        loc_6a50
0000000000006bc7         align      16

                     loc_6bd0:
0000000000006bd0         cmp        byte [rdi+0x8c], 0x0                        ; CODE XREF=build_wcs_upper_buffer+70
0000000000006bd7         jne        loc_6a4c

0000000000006bdd         cmp        r15, rbx
0000000000006be0         jge        loc_6d78

0000000000006be6         lea        rax, qword [rdi+0x20]
0000000000006bea         mov        qword [rsp+0xd8+var_D0], rax
0000000000006bef         lea        rax, qword [rsp+0xd8+var_94]
0000000000006bf4         mov        qword [rsp+0xd8+var_A8], rax
0000000000006bf9         lea        rax, qword [rsp+0xd8+var_90]
0000000000006bfe         mov        qword [rsp+0xd8+var_A0], rax
0000000000006c03         lea        rax, qword [rsp+0xd8+var_88]
0000000000006c08         mov        qword [rsp+0xd8+var_B0], rax
0000000000006c0d         nop        dword [rax]

                     loc_6c10:
0000000000006c10         mov        rbp, qword [r14+0x28]                       ; CODE XREF=build_wcs_upper_buffer+765
0000000000006c14         mov        r13, r15
0000000000006c17         add        rbp, r15
0000000000006c1a         add        rbp, qword [r14]
0000000000006c1d         movzx      r12d, byte [rbp]
0000000000006c22         test       r12b, 0x80
0000000000006c26         jne        loc_6c3a

0000000000006c28         mov        rdi, qword [rsp+0xd8+var_D0]                ; argument "__ps" for method j_mbsinit
0000000000006c2d         call       j_mbsinit                                   ; mbsinit
0000000000006c32         test       eax, eax
0000000000006c34         jne        loc_6d28

                     loc_6c3a:
0000000000006c3a         mov        rax, qword [r14+0x20]                       ; CODE XREF=build_wcs_upper_buffer+550
0000000000006c3e         mov        rdi, qword [rsp+0xd8+var_A8]
0000000000006c43         mov        rdx, rbx
0000000000006c46         mov        rcx, qword [rsp+0xd8+var_D0]
0000000000006c4b         sub        rdx, r15
0000000000006c4e         mov        rsi, rbp
0000000000006c51         mov        qword [rsp+0xd8+var_C8], rdx
0000000000006c56         mov        qword [rsp+0xd8+var_90], rax
0000000000006c5b         mov        qword [rsp+0xd8+var_B8], rdi
0000000000006c60         call       rpl_mbrtowc                                 ; rpl_mbrtowc
0000000000006c65         mov        rbp, rax
0000000000006c68         lea        rax, qword [rax-1]
0000000000006c6c         cmp        rax, 0xfffffffffffffffc
0000000000006c70         ja         loc_6d58

0000000000006c76         mov        edx, dword [rsp+0xd8+var_94]
0000000000006c7a         mov        edi, edx                                    ; argument "__wc" for method j_towupper
0000000000006c7c         mov        dword [rsp+0xd8+var_C0], edx
0000000000006c80         call       j_towupper                                  ; towupper
0000000000006c85         mov        edx, dword [rsp+0xd8+var_C0]
0000000000006c89         mov        r12d, eax
0000000000006c8c         cmp        edx, eax
0000000000006c8e         je         loc_6d08

0000000000006c90         mov        rdx, qword [rsp+0xd8+var_A0]                ; argument "__ps" for method j_wcrtomb
0000000000006c95         mov        rdi, qword [rsp+0xd8+var_B0]                ; argument "__s" for method j_wcrtomb
0000000000006c9a         mov        esi, eax                                    ; argument "__wc" for method j_wcrtomb
0000000000006c9c         call       j_wcrtomb                                   ; wcrtomb
0000000000006ca1         cmp        rbp, rax
0000000000006ca4         jne        loc_6e18

0000000000006caa         mov        rdi, qword [r14+8]
0000000000006cae         mov        rsi, qword [rsp+0xd8+var_B0]                ; argument "__src" for method j_memcpy
0000000000006cb3         mov        rdx, rbp                                    ; argument "__n" for method j_memcpy
0000000000006cb6         add        rdi, r15                                    ; argument "__dest" for method j_memcpy
0000000000006cb9         call       j_memcpy                                    ; memcpy

                     loc_6cbe:
0000000000006cbe         add        r15, 0x1                                    ; CODE XREF=build_wcs_upper_buffer+801
0000000000006cc2         mov        rdx, qword [r14+0x10]
0000000000006cc6         lea        rax, qword [r13*4]
0000000000006cce         lea        rcx, qword [r15+rbp-1]
0000000000006cd3         cmp        r15, rcx
0000000000006cd6         mov        dword [rdx+r13*4], r12d
0000000000006cda         jge        loc_6cfa

0000000000006cdc         lea        rax, qword [rdx+rax+4]
0000000000006ce1         lea        rdx, qword [rdx+rcx*4]
0000000000006ce5         nop        dword [rax]

                     loc_6ce8:
0000000000006ce8         mov        dword [rax], 0xffffffff                     ; CODE XREF=build_wcs_upper_buffer+757
0000000000006cee         add        rax, 0x4
0000000000006cf2         cmp        rdx, rax
0000000000006cf5         jne        loc_6ce8

0000000000006cf7         mov        r15, rcx

                     loc_6cfa:
0000000000006cfa         cmp        rbx, r15                                    ; CODE XREF=build_wcs_upper_buffer+730, build_wcs_upper_buffer+849, build_wcs_upper_buffer+949, build_wcs_upper_buffer+964
0000000000006cfd         jg         loc_6c10

0000000000006d03         jmp        loc_6d78
0000000000006d05         align      8

                     loc_6d08:
0000000000006d08         mov        rsi, qword [r14+0x28]                       ; CODE XREF=build_wcs_upper_buffer+654
0000000000006d0c         mov        rdi, qword [r14+8]
0000000000006d10         mov        rdx, rbp                                    ; argument "__n" for method j_memcpy
0000000000006d13         add        rsi, r15
0000000000006d16         add        rsi, qword [r14]                            ; argument "__src" for method j_memcpy
0000000000006d19         add        rdi, r15                                    ; argument "__dest" for method j_memcpy
0000000000006d1c         call       j_memcpy                                    ; memcpy
0000000000006d21         jmp        loc_6cbe
0000000000006d23         align      8

                     loc_6d28:
0000000000006d28         call       j___ctype_toupper_loc                       ; __ctype_toupper_loc, CODE XREF=build_wcs_upper_buffer+564
0000000000006d2d         mov        rax, qword [rax]
0000000000006d30         mov        rdx, qword [r14+8]
0000000000006d34         mov        eax, dword [rax+r12*4]
0000000000006d38         mov        byte [rdx+r15], al
0000000000006d3c         mov        rdx, qword [r14+8]
0000000000006d40         mov        rax, qword [r14+0x10]
0000000000006d44         movzx      edx, byte [rdx+r15]
0000000000006d49         mov        dword [rax+r15*4], edx
0000000000006d4d         add        r15, 0x1
0000000000006d51         jmp        loc_6cfa
0000000000006d53         align      8

                     loc_6d58:
0000000000006d58         cmp        rax, 0xfffffffffffffffd                     ; CODE XREF=build_wcs_upper_buffer+624
0000000000006d5c         jne        loc_6d90

0000000000006d5e         mov        rax, qword [r14+0x58]
0000000000006d62         cmp        qword [r14+0x40], rax
0000000000006d66         jge        loc_6d90

0000000000006d68         mov        rax, qword [rsp+0xd8+var_90]
0000000000006d6d         mov        qword [r14+0x20], rax
0000000000006d71         nop        dword [rax]

                     loc_6d78:
0000000000006d78         mov        qword [r14+0x30], r15                       ; CODE XREF=build_wcs_upper_buffer+480, build_wcs_upper_buffer+771
0000000000006d7c         mov        qword [r14+0x38], r15
0000000000006d80         xor        eax, eax
0000000000006d82         jmp        loc_6a5f
0000000000006d87         align      16

                     loc_6d90:
0000000000006d90         mov        rax, qword [r14]                            ; CODE XREF=build_wcs_upper_buffer+860, build_wcs_upper_buffer+870
0000000000006d93         mov        rdx, qword [r14+8]
0000000000006d97         add        rax, r15
0000000000006d9a         add        rax, qword [r14+0x28]
0000000000006d9e         movzx      eax, byte [rax]
0000000000006da1         mov        byte [rdx+r15], al
0000000000006da5         mov        rdx, qword [r14+0x10]
0000000000006da9         add        r15, 0x1
0000000000006dad         cmp        rbp, 0xffffffffffffffff
0000000000006db1         mov        dword [rdx+r13*4], eax
0000000000006db5         jne        loc_6cfa

0000000000006dbb         mov        rax, qword [rsp+0xd8+var_90]
0000000000006dc0         mov        qword [r14+0x20], rax
0000000000006dc4         jmp        loc_6cfa

                     loc_6dc9:
0000000000006dc9         mov        eax, dword [r14+0x90]                       ; CODE XREF=build_wcs_upper_buffer+190
0000000000006dd0         test       eax, eax
0000000000006dd2         jle        loc_6ff0

0000000000006dd8         mov        rdi, qword [r14+0x28]
0000000000006ddc         lea        r11d, dword [rax-1]
0000000000006de0         lea        rcx, qword [rsp+0xd8+var_88]
0000000000006de5         xor        eax, eax
0000000000006de7         add        rdi, r13
0000000000006dea         add        rdi, qword [r14]
0000000000006ded         jmp        loc_6dfa

                     loc_6def:
0000000000006def         add        rax, 0x1                                    ; CODE XREF=build_wcs_upper_buffer+1033
0000000000006df3         cmp        qword [rsp+0xd8+var_C8], rax
0000000000006df8         je         loc_6e0b

                     loc_6dfa:
0000000000006dfa         movzx      esi, byte [rdi+rax]                         ; CODE XREF=build_wcs_upper_buffer+1005
0000000000006dfe         cmp        r11, rax
0000000000006e01         movzx      esi, byte [rdx+rsi]
0000000000006e05         mov        byte [rcx+rax], sil
0000000000006e09         jne        loc_6def

                     loc_6e0b:
0000000000006e0b         mov        qword [rsp+0xd8+var_C0], rcx                ; CODE XREF=build_wcs_upper_buffer+1016, build_wcs_upper_buffer+1525
0000000000006e10         jmp        loc_6ad3
0000000000006e15         align      8

                     loc_6e18:
0000000000006e18         mov        r13, r15                                    ; CODE XREF=build_wcs_upper_buffer+676
0000000000006e1b         jmp        loc_6aae

                     loc_6e20:
0000000000006e20         mov        rdi, qword [r14+8]                          ; CODE XREF=build_wcs_upper_buffer+287, build_wcs_upper_buffer+1242
0000000000006e24         mov        rsi, qword [rsp+0xd8+var_C0]                ; argument "__src" for method j_memcpy
0000000000006e29         mov        rdx, rbp                                    ; argument "__n" for method j_memcpy
0000000000006e2c         add        rdi, r15                                    ; argument "__dest" for method j_memcpy
0000000000006e2f         call       j_memcpy                                    ; memcpy
0000000000006e34         jmp        loc_6b61

                     loc_6e39:
0000000000006e39         cmp        qword [rsp+0xd8+var_B8], 0xfffffffffffffffd ; CODE XREF=build_wcs_upper_buffer+252
0000000000006e3f         jne        loc_6e4b

0000000000006e41         mov        rax, qword [r14+0x58]
0000000000006e45         cmp        qword [r14+0x40], rax
0000000000006e49         jl         loc_6ec8

                     loc_6e4b:
0000000000006e4b         mov        rax, qword [r14]                            ; CODE XREF=build_wcs_upper_buffer+1087
0000000000006e4e         mov        rdx, qword [r14+0x78]
0000000000006e52         add        rax, r13
0000000000006e55         add        rax, qword [r14+0x28]
0000000000006e59         test       rdx, rdx
0000000000006e5c         movzx      eax, byte [rax]
0000000000006e5f         jne        loc_700c

                     loc_6e65:
0000000000006e65         mov        rdx, qword [r14+8]                          ; CODE XREF=build_wcs_upper_buffer+1552
0000000000006e69         mov        rcx, r15
0000000000006e6c         mov        byte [rdx+r15], al
0000000000006e70         cmp        byte [r14+0x8c], 0x0
0000000000006e78         jne        loc_6fff

                     loc_6e7e:
0000000000006e7e         mov        rdx, qword [r14+0x10]                       ; CODE XREF=build_wcs_upper_buffer+1543
0000000000006e82         add        r13, 0x1
0000000000006e86         add        r15, 0x1
0000000000006e8a         cmp        rbp, 0xffffffffffffffff
0000000000006e8e         mov        dword [rdx+rcx*4], eax
0000000000006e91         jne        loc_6a50

0000000000006e97         mov        rax, qword [rsp+0xd8+var_90]
0000000000006e9c         mov        qword [r14+0x20], rax
0000000000006ea0         jmp        loc_6a50

                     loc_6ea5:
0000000000006ea5         mov        rdx, qword [r14+0x18]                       ; CODE XREF=build_wcs_upper_buffer+366
0000000000006ea9         mov        rcx, r15
0000000000006eac         mov        r10, r13
0000000000006eaf         sub        rcx, r13
0000000000006eb2         lea        rdx, qword [rdx+rcx*8]

                     loc_6eb6:
0000000000006eb6         mov        qword [rdx+r10*8], r10                      ; CODE XREF=build_wcs_upper_buffer+1217
0000000000006eba         add        r10, 0x1
0000000000006ebe         cmp        rax, r10
0000000000006ec1         jne        loc_6eb6

0000000000006ec3         jmp        loc_6b74

                     loc_6ec8:
0000000000006ec8         mov        rax, qword [rsp+0xd8+var_90]                ; CODE XREF=build_wcs_upper_buffer+1097, build_wcs_upper_buffer+1267
0000000000006ecd         mov        qword [r14+0x20], rax
0000000000006ed1         jmp        loc_6a55

                     loc_6ed6:
0000000000006ed6         cmp        rax, 0xffffffffffffffff                     ; CODE XREF=build_wcs_upper_buffer+329
0000000000006eda         je         loc_6e20

0000000000006ee0         lea        rax, qword [rax+r15]
0000000000006ee4         mov        rsi, rax
0000000000006ee7         mov        qword [rsp+0xd8+var_D0], rax
0000000000006eec         mov        rax, qword [r14+0x40]
0000000000006ef0         cmp        rsi, rax
0000000000006ef3         ja         loc_6ec8

0000000000006ef5         cmp        qword [r14+0x18], 0x0
0000000000006efa         je         loc_6fb8

                     loc_6f00:
0000000000006f00         cmp        byte [r14+0x8c], 0x0                        ; CODE XREF=build_wcs_upper_buffer+1504
0000000000006f08         jne        loc_6f2a

0000000000006f0a         test       r15, r15
0000000000006f0d         je         loc_6f22

0000000000006f0f         mov        rdx, qword [r14+0x18]
0000000000006f13         xor        eax, eax

                     loc_6f15:
0000000000006f15         mov        qword [rdx+rax*8], rax                      ; CODE XREF=build_wcs_upper_buffer+1312
0000000000006f19         add        rax, 0x1
0000000000006f1d         cmp        rax, r15
0000000000006f20         jne        loc_6f15

                     loc_6f22:
0000000000006f22         mov        byte [r14+0x8c], 0x1                        ; CODE XREF=build_wcs_upper_buffer+1293

                     loc_6f2a:
0000000000006f2a         mov        rdi, qword [r14+8]                          ; CODE XREF=build_wcs_upper_buffer+1288
0000000000006f2e         mov        rsi, rcx                                    ; argument "__src" for method j_memcpy
0000000000006f31         mov        rdx, r11                                    ; argument "__n" for method j_memcpy
0000000000006f34         mov        qword [rsp+0xd8+var_C8], r11
0000000000006f39         add        rdi, r15                                    ; argument "__dest" for method j_memcpy
0000000000006f3c         call       j_memcpy                                    ; memcpy
0000000000006f41         mov        rax, qword [r14+0x10]
0000000000006f45         mov        r11, qword [rsp+0xd8+var_C8]
0000000000006f4a         lea        rcx, qword [rax+r15*4]
0000000000006f4e         mov        rax, qword [r14+0x18]
0000000000006f52         cmp        r11, 0x1
0000000000006f56         mov        dword [rcx], r12d
0000000000006f59         lea        rsi, qword [rax+r15*8]
0000000000006f5d         mov        qword [rsi], r13
0000000000006f60         jbe        loc_6f8a

0000000000006f62         mov        eax, 0x1

                     loc_6f67:
0000000000006f67         mov        rdx, qword [rsp+0xd8+var_B8]                ; CODE XREF=build_wcs_upper_buffer+1416
0000000000006f6c         cmp        rax, rbp
0000000000006f6f         cmovb      rdx, rax
0000000000006f73         add        rdx, r13
0000000000006f76         mov        qword [rsi+rax*8], rdx
0000000000006f7a         mov        dword [rcx+rax*4], 0xffffffff
0000000000006f81         add        rax, 0x1
0000000000006f85         cmp        rax, r11
0000000000006f88         jne        loc_6f67

                     loc_6f8a:
0000000000006f8a         mov        rbx, qword [r14+0x58]                       ; CODE XREF=build_wcs_upper_buffer+1376
0000000000006f8e         sub        r11, rbp
0000000000006f91         add        rbx, r11
0000000000006f94         cmp        r13, qword [r14+0x60]
0000000000006f98         mov        qword [r14+0x58], rbx
0000000000006f9c         jge        loc_6fa2

0000000000006f9e         add        qword [r14+0x68], r11

                     loc_6fa2:
0000000000006fa2         cmp        qword [r14+0x40], rbx                       ; CODE XREF=build_wcs_upper_buffer+1436
0000000000006fa6         mov        r15, qword [rsp+0xd8+var_D0]
0000000000006fab         cmovle     rbx, qword [r14+0x40]
0000000000006fb0         add        r13, rbp
0000000000006fb3         jmp        loc_6a50

                     loc_6fb8:
0000000000006fb8         lea        rdi, qword [rax*8]                          ; argument "__size" for method j_malloc, CODE XREF=build_wcs_upper_buffer+1274
0000000000006fc0         mov        qword [rsp+0xd8+var_C0], rcx
0000000000006fc5         mov        qword [rsp+0xd8+var_C8], r11
0000000000006fca         call       j_malloc                                    ; malloc
0000000000006fcf         test       rax, rax
0000000000006fd2         mov        qword [r14+0x18], rax
0000000000006fd6         mov        r11, qword [rsp+0xd8+var_C8]
0000000000006fdb         mov        rcx, qword [rsp+0xd8+var_C0]
0000000000006fe0         jne        loc_6f00

0000000000006fe6         mov        eax, 0xc
0000000000006feb         jmp        loc_6a5f

                     loc_6ff0:
0000000000006ff0         lea        rcx, qword [rsp+0xd8+var_88]                ; CODE XREF=build_wcs_upper_buffer+978
0000000000006ff5         jmp        loc_6e0b

                     loc_6ffa:
0000000000006ffa         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=build_wcs_upper_buffer+112
                        ; endp

                     loc_6fff:
0000000000006fff         mov        rdx, qword [r14+0x18]                       ; CODE XREF=build_wcs_upper_buffer+1144
0000000000007003         mov        qword [rdx+r15*8], r13
0000000000007007         jmp        loc_6e7e

                     loc_700c:
000000000000700c         movzx      eax, byte [rdx+rax]                         ; CODE XREF=build_wcs_upper_buffer+1119
0000000000007010         jmp        loc_6e65
0000000000007015         align      32                                          ; End of unwind block (FDE at 0x174c8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     extend_buffers:
0000000000007020         push       rbp                                         ; Begin of unwind block (FDE at 0x17514), CODE XREF=clean_state_log_if_needed+38, clean_state_log_if_needed+85, transit_state_bkref.isra.34+2162, re_search_internal+3125
0000000000007021         push       rbx
0000000000007022         movabs     rdx, 0xffffffffffffffe
000000000000702c         sub        rsp, 0x8
0000000000007030         mov        rax, qword [rdi+0x40]
0000000000007034         cmp        rax, rdx
0000000000007037         ja         loc_7148

000000000000703d         mov        rdx, qword [rdi+0x58]
0000000000007041         add        rax, rax
0000000000007044         movsxd     rsi, esi
0000000000007047         mov        rbx, rdi
000000000000704a         cmp        rax, rdx
000000000000704d         cmovg      rax, rdx
0000000000007051         cmp        rax, rsi
0000000000007054         cmovge     rsi, rax
0000000000007058         call       re_string_realloc_buffers                   ; re_string_realloc_buffers
000000000000705d         test       eax, eax
000000000000705f         mov        ebp, eax
0000000000007061         jne        loc_711d

0000000000007067         mov        rdi, qword [rbx+0xb8]
000000000000706e         test       rdi, rdi
0000000000007071         je         loc_7094

0000000000007073         mov        rax, qword [rbx+0x40]
0000000000007077         lea        rsi, qword [0x8+rax*8]                      ; argument "__size" for method j_realloc
000000000000707f         call       j_realloc                                   ; realloc
0000000000007084         test       rax, rax
0000000000007087         je         loc_7148

000000000000708d         mov        qword [rbx+0xb8], rax

                     loc_7094:
0000000000007094         cmp        byte [rbx+0x88], 0x0                        ; CODE XREF=extend_buffers+81
000000000000709b         mov        eax, dword [rbx+0x90]
00000000000070a1         je         loc_70c0

00000000000070a3         cmp        eax, 0x1
00000000000070a6         mov        rdi, rbx
00000000000070a9         jle        loc_7160

00000000000070af         add        rsp, 0x8
00000000000070b3         pop        rbx
00000000000070b4         pop        rbp
00000000000070b5         jmp        build_wcs_upper_buffer                      ; build_wcs_upper_buffer
                        ; endp
00000000000070ba         align      64

                     loc_70c0:
00000000000070c0         cmp        eax, 0x1                                    ; CODE XREF=extend_buffers+129
00000000000070c3         jg         loc_7130

00000000000070c5         mov        rcx, qword [rbx+0x78]
00000000000070c9         test       rcx, rcx
00000000000070cc         je         loc_711d

00000000000070ce         mov        rsi, qword [rbx+0x58]
00000000000070d2         cmp        qword [rbx+0x40], rsi
00000000000070d6         cmovle     rsi, qword [rbx+0x40]
00000000000070db         mov        rax, qword [rbx+0x30]
00000000000070df         cmp        rsi, rax
00000000000070e2         jg         loc_70f4

00000000000070e4         jmp        loc_7115
00000000000070e6         align      16

                     loc_70f0:
00000000000070f0         mov        rcx, qword [rbx+0x78]                       ; CODE XREF=extend_buffers+243

                     loc_70f4:
00000000000070f4         mov        rdx, qword [rbx]                            ; CODE XREF=extend_buffers+194
00000000000070f7         add        rdx, rax
00000000000070fa         add        rdx, qword [rbx+0x28]
00000000000070fe         movzx      edx, byte [rdx]
0000000000007101         movzx      ecx, byte [rcx+rdx]
0000000000007105         mov        rdx, qword [rbx+8]
0000000000007109         mov        byte [rdx+rax], cl
000000000000710c         add        rax, 0x1
0000000000007110         cmp        rsi, rax
0000000000007113         jne        loc_70f0

                     loc_7115:
0000000000007115         mov        qword [rbx+0x30], rax                       ; CODE XREF=extend_buffers+196
0000000000007119         mov        qword [rbx+0x38], rax

                     loc_711d:
000000000000711d         add        rsp, 0x8                                    ; CODE XREF=extend_buffers+65, extend_buffers+172
0000000000007121         mov        eax, ebp
0000000000007123         pop        rbx
0000000000007124         pop        rbp
0000000000007125         ret
                        ; endp
0000000000007126         align      16

                     loc_7130:
0000000000007130         mov        rdi, rbx                                    ; CODE XREF=extend_buffers+163
0000000000007133         call       build_wcs_buffer                            ; build_wcs_buffer
0000000000007138         add        rsp, 0x8
000000000000713c         mov        eax, ebp
000000000000713e         pop        rbx
000000000000713f         pop        rbp
0000000000007140         ret
                        ; endp
0000000000007141         align      8

                     loc_7148:
0000000000007148         mov        ebp, 0xc                                    ; CODE XREF=extend_buffers+23, extend_buffers+103
000000000000714d         add        rsp, 0x8
0000000000007151         mov        eax, ebp
0000000000007153         pop        rbx
0000000000007154         pop        rbp
0000000000007155         ret
                        ; endp
0000000000007156         align      32

                     loc_7160:
0000000000007160         call       build_upper_buffer                          ; build_upper_buffer, CODE XREF=extend_buffers+137
0000000000007165         add        rsp, 0x8
0000000000007169         mov        eax, ebp
000000000000716b         pop        rbx
000000000000716c         pop        rbp
000000000000716d         ret
                        ; endp
000000000000716e         align      16                                          ; End of unwind block (FDE at 0x17514)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     clean_state_log_if_needed:
0000000000007170         push       r12                                         ; Begin of unwind block (FDE at 0x17570), CODE XREF=get_subexp_sub.isra.32+244, transit_state_bkref.isra.34+816, re_search_internal+3351
0000000000007172         push       rbp
0000000000007173         mov        rbp, rsi
0000000000007176         push       rbx
0000000000007177         mov        rax, qword [rdi+0x40]
000000000000717b         mov        rbx, rdi
000000000000717e         mov        r12, qword [rdi+0xc0]
0000000000007185         cmp        rax, rsi
0000000000007188         jg         loc_71b0

000000000000718a         cmp        rax, qword [rdi+0x58]
000000000000718e         jge        loc_71b0

0000000000007190         lea        esi, dword [rbp+1]
0000000000007193         mov        rdi, rbx
0000000000007196         call       extend_buffers                              ; extend_buffers
000000000000719b         test       eax, eax
000000000000719d         jne        loc_71a6

                     loc_719f:
000000000000719f         cmp        r12, rbp                                    ; CODE XREF=clean_state_log_if_needed+71, clean_state_log_if_needed+77, clean_state_log_if_needed+92
00000000000071a2         jl         loc_71d0

                     loc_71a4:
00000000000071a4         xor        eax, eax                                    ; CODE XREF=clean_state_log_if_needed+132

                     loc_71a6:
00000000000071a6         pop        rbx                                         ; CODE XREF=clean_state_log_if_needed+45, clean_state_log_if_needed+94
00000000000071a7         pop        rbp
00000000000071a8         pop        r12
00000000000071aa         ret
                        ; endp
00000000000071ab         align      16

                     loc_71b0:
00000000000071b0         mov        rax, qword [rbx+0x30]                       ; CODE XREF=clean_state_log_if_needed+24, clean_state_log_if_needed+30
00000000000071b4         cmp        rax, rbp
00000000000071b7         jg         loc_719f

00000000000071b9         cmp        rax, qword [rbx+0x58]
00000000000071bd         jge        loc_719f

00000000000071bf         lea        esi, dword [rbp+1]
00000000000071c2         mov        rdi, rbx
00000000000071c5         call       extend_buffers                              ; extend_buffers
00000000000071ca         test       eax, eax
00000000000071cc         je         loc_719f

00000000000071ce         jmp        loc_71a6

                     loc_71d0:
00000000000071d0         mov        rax, qword [rbx+0xb8]                       ; CODE XREF=clean_state_log_if_needed+50
00000000000071d7         mov        rdx, rbp
00000000000071da         xor        esi, esi                                    ; argument "__c" for method j_memset
00000000000071dc         sub        rdx, r12
00000000000071df         shl        rdx, 0x3                                    ; argument "__n" for method j_memset
00000000000071e3         lea        rdi, qword [rax+r12*8+8]                    ; argument "__s" for method j_memset
00000000000071e8         call       j_memset                                    ; memset
00000000000071ed         mov        qword [rbx+0xc0], rbp
00000000000071f4         jmp        loc_71a4
00000000000071f6         align      512                                         ; End of unwind block (FDE at 0x17570)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     free_charset:
0000000000007200         push       rbx                                         ; Begin of unwind block (FDE at 0x1759c), CODE XREF=free_token+35, build_charclass_op+499, build_charclass_op+523, build_charclass_op+593, sub_116a0+1155, sub_116a0+2271
0000000000007201         mov        rbx, rdi
0000000000007204         mov        rdi, qword [rdi]                            ; argument "__ptr" for method j_free
0000000000007207         call       j_free                                      ; free
000000000000720c         mov        rdi, qword [rbx+8]                          ; argument "__ptr" for method j_free
0000000000007210         call       j_free                                      ; free
0000000000007215         mov        rdi, qword [rbx+0x10]                       ; argument "__ptr" for method j_free
0000000000007219         call       j_free                                      ; free
000000000000721e         mov        rdi, qword [rbx+0x18]                       ; argument "__ptr" for method j_free
0000000000007222         call       j_free                                      ; free
0000000000007227         mov        rdi, rbx                                    ; argument "__ptr" for method j_free
000000000000722a         pop        rbx
000000000000722b         jmp        j_free                                      ; free
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     free_token:
0000000000007230         mov        eax, dword [rdi+8]                          ; End of unwind block (FDE at 0x1759c), Begin of unwind block (FDE at 0x175b8), CODE XREF=free_tree+8, free_dfa_content+50
0000000000007233         and        eax, 0x400ff
0000000000007238         cmp        eax, 0x6
000000000000723b         je         loc_7250

000000000000723d         cmp        eax, 0x3
0000000000007240         je         loc_7248

0000000000007242         ret
                        ; endp
0000000000007244         align      8

                     loc_7248:
0000000000007248         mov        rdi, qword [rdi]                            ; argument "__ptr" for method j_free, CODE XREF=free_token+16
000000000000724b         jmp        j_free                                      ; free
                        ; endp

                     loc_7250:
0000000000007250         mov        rdi, qword [rdi]                            ; CODE XREF=free_token+11
0000000000007253         jmp        free_charset                                ; free_charset
                        ; endp
0000000000007255         align      32                                          ; End of unwind block (FDE at 0x175b8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     free_tree:
0000000000007260         lea        rdi, qword [rsi+0x28]                       ; Begin of unwind block (FDE at 0x175cc), DATA XREF=sub_10f30+81, sub_10f30+764, sub_10f30+1024, sub_10f30+1118, parse_branch+313, parse_branch+336, parse_branch+353, parse_reg_exp+305
0000000000007264         sub        rsp, 0x8
0000000000007268         call       free_token                                  ; free_token
000000000000726d         xor        eax, eax
000000000000726f         add        rsp, 0x8
0000000000007273         ret
                        ; endp
0000000000007274         align      128                                         ; End of unwind block (FDE at 0x175cc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72


                     re_dfa_add_node:
0000000000007280         push       r15                                         ; Begin of unwind block (FDE at 0x175e4), CODE XREF=duplicate_node+38, calc_first+30
0000000000007282         push       r14
0000000000007284         mov        r14, rsi
0000000000007287         push       r13
0000000000007289         push       r12
000000000000728b         push       rbp
000000000000728c         push       rbx
000000000000728d         mov        rbx, rdi
0000000000007290         sub        rsp, 0x18
0000000000007294         mov        rsi, qword [rdi+0x10]
0000000000007298         mov        rbp, qword [rdi+8]
000000000000729c         cmp        rsi, rbp
000000000000729f         jae        loc_7350

00000000000072a5         mov        r12, qword [rdi+0x18]
00000000000072a9         mov        rbp, qword [rdi+0x28]

                     loc_72ad:
00000000000072ad         mov        rax, rsi                                    ; CODE XREF=re_dfa_add_node+391
00000000000072b0         mov        ecx, edx
00000000000072b2         shl        rax, 0x4
00000000000072b6         add        rax, qword [rbx]
00000000000072b9         and        ecx, 0xfffc00ff
00000000000072bf         mov        qword [rax+8], rdx
00000000000072c3         mov        dword [rax+8], ecx
00000000000072c6         xor        ecx, ecx
00000000000072c8         cmp        dl, 0x6
00000000000072cb         mov        qword [rax], r14
00000000000072ce         sete       cl
00000000000072d1         cmp        dl, 0x5
00000000000072d4         jne        loc_72e2

00000000000072d6         xor        ecx, ecx
00000000000072d8         cmp        dword [rbx+0xb4], 0x1
00000000000072df         setg       cl

                     loc_72e2:
00000000000072e2         movzx      edx, byte [rax+0xa]                         ; CODE XREF=re_dfa_add_node+84
00000000000072e6         shl        ecx, 0x4
00000000000072e9         pxor       xmm0, xmm0
00000000000072ed         and        edx, 0xffffffef
00000000000072f0         or         edx, ecx
00000000000072f2         mov        byte [rax+0xa], dl
00000000000072f5         mov        qword [r12+rsi*8], 0xffffffffffffffff
00000000000072fd         mov        rax, qword [rbx+0x10]
0000000000007301         lea        rax, qword [rax+rax*2]
0000000000007305         lea        rax, qword [rbp+rax*8]
000000000000730a         movups     xmmword [rax], xmm0
000000000000730d         mov        qword [rax+0x10], 0x0
0000000000007315         mov        rax, qword [rbx+0x10]
0000000000007319         lea        rdx, qword [rax+rax*2]
000000000000731d         mov        rax, qword [rbx+0x30]
0000000000007321         lea        rax, qword [rax+rdx*8]
0000000000007325         movups     xmmword [rax], xmm0
0000000000007328         mov        qword [rax+0x10], 0x0
0000000000007330         mov        rax, qword [rbx+0x10]
0000000000007334         lea        rdx, qword [rax+1]
0000000000007338         mov        qword [rbx+0x10], rdx

                     loc_733c:
000000000000733c         add        rsp, 0x18                                   ; CODE XREF=re_dfa_add_node+457
0000000000007340         pop        rbx
0000000000007341         pop        rbp
0000000000007342         pop        r12
0000000000007344         pop        r13
0000000000007346         pop        r14
0000000000007348         pop        r15
000000000000734a         ret
                        ; endp
000000000000734b         align      16

                     loc_7350:
0000000000007350         lea        r13, qword [rbp+rbp]                        ; CODE XREF=re_dfa_add_node+31
0000000000007355         movabs     rax, 0xaaaaaaaaaaaaaaa
000000000000735f         cmp        r13, rax
0000000000007362         ja         loc_7442

0000000000007368         mov        rdi, qword [rdi]                            ; argument "__ptr" for method j_realloc
000000000000736b         mov        rsi, rbp
000000000000736e         mov        qword [rsp+0x48+var_40], rdx
0000000000007373         shl        rsi, 0x5                                    ; argument "__size" for method j_realloc
0000000000007377         call       j_realloc                                   ; realloc
000000000000737c         test       rax, rax
000000000000737f         je         loc_7442

0000000000007385         mov        r15, rbp
0000000000007388         mov        rdi, qword [rbx+0x18]                       ; argument "__ptr" for method j_realloc
000000000000738c         mov        qword [rbx], rax
000000000000738f         shl        r15, 0x4
0000000000007393         mov        rsi, r15                                    ; argument "__size" for method j_realloc
0000000000007396         call       j_realloc                                   ; realloc
000000000000739b         mov        rdi, qword [rbx+0x20]                       ; argument "__ptr" for method j_realloc
000000000000739f         mov        rsi, r15                                    ; argument "__size" for method j_realloc
00000000000073a2         lea        r15, qword [r13+rbp*4]
00000000000073a7         mov        r12, rax
00000000000073aa         shl        r15, 0x3
00000000000073ae         call       j_realloc                                   ; realloc
00000000000073b3         mov        rdi, qword [rbx+0x28]                       ; argument "__ptr" for method j_realloc
00000000000073b7         mov        rsi, r15                                    ; argument "__size" for method j_realloc
00000000000073ba         mov        qword [rsp+0x48+var_48], rax
00000000000073be         call       j_realloc                                   ; realloc
00000000000073c3         mov        rdi, qword [rbx+0x30]                       ; argument "__ptr" for method j_realloc
00000000000073c7         mov        rsi, r15                                    ; argument "__size" for method j_realloc
00000000000073ca         mov        rbp, rax
00000000000073cd         call       j_realloc                                   ; realloc
00000000000073d2         test       r12, r12
00000000000073d5         mov        rcx, qword [rsp+0x48+var_48]
00000000000073d9         je         loc_7410

00000000000073db         test       rcx, rcx
00000000000073de         je         loc_7410

00000000000073e0         test       rbp, rbp
00000000000073e3         je         loc_7410

00000000000073e5         test       rax, rax
00000000000073e8         mov        rdx, qword [rsp+0x48+var_40]
00000000000073ed         je         loc_7410

00000000000073ef         mov        qword [rbx+0x18], r12
00000000000073f3         mov        qword [rbx+0x20], rcx
00000000000073f7         mov        qword [rbx+0x28], rbp
00000000000073fb         mov        qword [rbx+0x30], rax
00000000000073ff         mov        qword [rbx+8], r13
0000000000007403         mov        rsi, qword [rbx+0x10]
0000000000007407         jmp        loc_72ad
000000000000740c         align      16

                     loc_7410:
0000000000007410         mov        rdi, r12                                    ; argument "__ptr" for method j_free, CODE XREF=re_dfa_add_node+345, re_dfa_add_node+350, re_dfa_add_node+355, re_dfa_add_node+365
0000000000007413         mov        qword [rsp+0x48+var_40], rax
0000000000007418         mov        qword [rsp+0x48+var_48], rcx
000000000000741c         call       j_free                                      ; free
0000000000007421         mov        rcx, qword [rsp+0x48+var_48]
0000000000007425         mov        rdi, rcx                                    ; argument "__ptr" for method j_free
0000000000007428         call       j_free                                      ; free
000000000000742d         mov        rdi, rbp                                    ; argument "__ptr" for method j_free
0000000000007430         call       j_free                                      ; free
0000000000007435         mov        rax, qword [rsp+0x48+var_40]
000000000000743a         mov        rdi, rax                                    ; argument "__ptr" for method j_free
000000000000743d         call       j_free                                      ; free

                     loc_7442:
0000000000007442         mov        rax, 0xffffffffffffffff                     ; CODE XREF=re_dfa_add_node+226, re_dfa_add_node+255
0000000000007449         jmp        loc_733c
000000000000744e         align      16                                          ; End of unwind block (FDE at 0x175e4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     duplicate_node:
0000000000007450         push       r13                                         ; Begin of unwind block (FDE at 0x17630), CODE XREF=duplicate_node_closure+258, duplicate_node_closure+328, duplicate_node_closure+437, duplicate_node_closure+542
0000000000007452         push       r12
0000000000007454         mov        r13, rsi
0000000000007457         push       rbp
0000000000007458         push       rbx
0000000000007459         shl        r13, 0x4
000000000000745d         mov        rbp, rsi
0000000000007460         mov        r12d, edx
0000000000007463         mov        rbx, rdi
0000000000007466         sub        rsp, 0x8
000000000000746a         mov        rax, qword [rdi]
000000000000746d         mov        rsi, qword [rax+r13]
0000000000007471         mov        rdx, qword [rax+r13+8]
0000000000007476         call       re_dfa_add_node                             ; re_dfa_add_node
000000000000747b         cmp        rax, 0xffffffffffffffff
000000000000747f         je         loc_74e4

0000000000007481         mov        edi, r12d
0000000000007484         mov        r8, qword [rbx]
0000000000007487         mov        rsi, rax
000000000000748a         and        di, 0x3ff
000000000000748f         shl        rsi, 0x4
0000000000007493         mov        ecx, edi
0000000000007495         and        ecx, 0x3ff
000000000000749b         add        rsi, r8
000000000000749e         shl        ecx, 0x8
00000000000074a1         mov        edx, ecx
00000000000074a3         mov        ecx, dword [rsi+8]
00000000000074a6         and        ecx, 0xfffc00ff
00000000000074ac         or         ecx, edx
00000000000074ae         mov        dword [rsi+8], ecx
00000000000074b1         mov        edx, dword [r8+r13+8]
00000000000074b6         and        ecx, 0xfffc00ff
00000000000074bc         shr        edx, 0x8
00000000000074bf         or         edx, edi
00000000000074c1         and        edx, 0x3ff
00000000000074c7         shl        edx, 0x8
00000000000074ca         or         edx, ecx
00000000000074cc         mov        ecx, edx
00000000000074ce         mov        dword [rsi+8], edx
00000000000074d1         shr        ecx, 0x10
00000000000074d4         mov        edx, ecx
00000000000074d6         or         edx, 0x4
00000000000074d9         mov        byte [rsi+0xa], dl
00000000000074dc         mov        rdx, qword [rbx+0x20]
00000000000074e0         mov        qword [rdx+rax*8], rbp

                     loc_74e4:
00000000000074e4         add        rsp, 0x8                                    ; CODE XREF=duplicate_node+47
00000000000074e8         pop        rbx
00000000000074e9         pop        rbp
00000000000074ea         pop        r12
00000000000074ec         pop        r13
00000000000074ee         ret
                        ; endp
00000000000074ef         align      16                                          ; End of unwind block (FDE at 0x17630)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72


                     duplicate_node_closure:
00000000000074f0         push       r15                                         ; Begin of unwind block (FDE at 0x17668), CODE XREF=duplicate_node_closure+378, calc_eclosure_iter+618
00000000000074f2         push       r14
00000000000074f4         mov        r9, rsi
00000000000074f7         push       r13
00000000000074f9         push       r12
00000000000074fb         mov        r14, rdi
00000000000074fe         push       rbp
00000000000074ff         push       rbx
0000000000007500         mov        r13, rdx
0000000000007503         mov        ebp, r8d
0000000000007506         sub        rsp, 0x18
000000000000750a         mov        qword [rsp+0x48+var_40], rcx

                     loc_750f:
000000000000750f         mov        r8, qword [r14]                             ; CODE XREF=duplicate_node_closure+293, duplicate_node_closure+481
0000000000007512         mov        rax, r9
0000000000007515         mov        rdi, qword [r14+0x28]
0000000000007519         shl        rax, 0x4
000000000000751d         mov        r12, r13
0000000000007520         add        rax, r8
0000000000007523         cmp        byte [rax+8], 0x4
0000000000007527         je         loc_76e0

000000000000752d         lea        r12, qword [r9+r9*2]
0000000000007531         shl        r12, 0x3
0000000000007535         lea        rsi, qword [rdi+r12]
0000000000007539         mov        rcx, qword [rsi+8]
000000000000753d         test       rcx, rcx
0000000000007540         je         loc_7739

0000000000007546         lea        rbx, qword [r13+r13*2]
000000000000754b         mov        rsi, qword [rsi+0x10]
000000000000754f         shl        rbx, 0x3
0000000000007553         add        rdi, rbx
0000000000007556         cmp        rcx, 0x1
000000000000755a         mov        r15, qword [rsi]
000000000000755d         mov        qword [rdi+8], 0x0
0000000000007565         je         loc_7680

000000000000756b         mov        rdx, qword [r14+0x10]
000000000000756f         lea        rsi, qword [rdx-1]
0000000000007573         mov        rax, rsi
0000000000007576         shl        rax, 0x4
000000000000757a         add        rax, r8
000000000000757d         test       byte [rax+0xa], 0x4
0000000000007581         je         loc_7630

0000000000007587         test       rsi, rsi
000000000000758a         jle        loc_7630

0000000000007590         shl        rdx, 0x4
0000000000007594         sub        r8, rax
0000000000007597         mov        rcx, qword [r14+0x20]
000000000000759b         lea        r8, qword [r8+rdx-0x20]
00000000000075a0         jmp        loc_75ba
00000000000075a2         align      8

                     loc_75a8:
00000000000075a8         add        rax, r8                                     ; CODE XREF=duplicate_node_closure+206, duplicate_node_closure+222
00000000000075ab         sub        rsi, 0x1
00000000000075af         test       byte [rax+0xa], 0x4
00000000000075b3         je         loc_7630

00000000000075b5         test       rsi, rsi
00000000000075b8         jle        loc_7630

                     loc_75ba:
00000000000075ba         cmp        qword [rcx+rsi*8], r15                      ; CODE XREF=duplicate_node_closure+176
00000000000075be         jne        loc_75a8

00000000000075c0         mov        edx, dword [rax+8]
00000000000075c3         shr        edx, 0x8
00000000000075c6         and        edx, 0x3ff
00000000000075cc         cmp        ebp, edx
00000000000075ce         jne        loc_75a8

00000000000075d0         call       re_node_set_insert                          ; re_node_set_insert
00000000000075d5         test       al, al
00000000000075d7         je         loc_761b

                     loc_75d9:
00000000000075d9         mov        rax, qword [r14+0x28]                       ; CODE XREF=duplicate_node_closure+385
00000000000075dd         mov        edx, ebp
00000000000075df         mov        rdi, r14
00000000000075e2         mov        rax, qword [rax+r12+0x10]
00000000000075e7         mov        r9, qword [rax+8]
00000000000075eb         mov        rsi, r9
00000000000075ee         mov        qword [rsp+0x48+var_48], r9
00000000000075f2         call       duplicate_node                              ; duplicate_node
00000000000075f7         cmp        rax, 0xffffffffffffffff
00000000000075fb         mov        r13, rax
00000000000075fe         je         loc_761b

                     loc_7600:
0000000000007600         add        rbx, qword [r14+0x28]                       ; CODE XREF=duplicate_node_closure+580
0000000000007604         mov        rsi, r13
0000000000007607         mov        rdi, rbx
000000000000760a         call       re_node_set_insert                          ; re_node_set_insert
000000000000760f         test       al, al
0000000000007611         mov        r9, qword [rsp+0x48+var_48]
0000000000007615         jne        loc_750f

                     loc_761b:
000000000000761b         mov        eax, 0xc                                    ; CODE XREF=duplicate_node_closure+231, duplicate_node_closure+270, duplicate_node_closure+340, duplicate_node_closure+359, duplicate_node_closure+449, duplicate_node_closure+472, duplicate_node_closure+558, duplicate_node_closure+624

                     loc_7620:
0000000000007620         add        rsp, 0x18                                   ; CODE XREF=duplicate_node_closure+391, duplicate_node_closure+599, duplicate_node_closure+618
0000000000007624         pop        rbx
0000000000007625         pop        rbp
0000000000007626         pop        r12
0000000000007628         pop        r13
000000000000762a         pop        r14
000000000000762c         pop        r15
000000000000762e         ret
                        ; endp
000000000000762f         align      16

                     loc_7630:
0000000000007630         mov        edx, ebp                                    ; CODE XREF=duplicate_node_closure+145, duplicate_node_closure+154, duplicate_node_closure+195, duplicate_node_closure+200
0000000000007632         mov        rsi, r15
0000000000007635         mov        rdi, r14
0000000000007638         call       duplicate_node                              ; duplicate_node
000000000000763d         cmp        rax, 0xffffffffffffffff
0000000000007641         mov        r13, rax
0000000000007644         je         loc_761b

0000000000007646         mov        rdi, qword [r14+0x28]
000000000000764a         mov        rsi, r13
000000000000764d         add        rdi, rbx
0000000000007650         call       re_node_set_insert                          ; re_node_set_insert
0000000000007655         test       al, al
0000000000007657         je         loc_761b

0000000000007659         mov        rcx, qword [rsp+0x48+var_40]
000000000000765e         mov        r8d, ebp
0000000000007661         mov        rdx, r13
0000000000007664         mov        rsi, r15
0000000000007667         mov        rdi, r14
000000000000766a         call       duplicate_node_closure                      ; duplicate_node_closure
000000000000766f         test       eax, eax
0000000000007671         je         loc_75d9

0000000000007677         jmp        loc_7620
0000000000007679         align      128

                     loc_7680:
0000000000007680         cmp        r9, qword [rsp+0x48+var_40]                 ; CODE XREF=duplicate_node_closure+117
0000000000007685         jne        loc_7690

0000000000007687         cmp        r9, r13
000000000000768a         jne        loc_774c

                     loc_7690:
0000000000007690         mov        eax, dword [rax+8]                          ; CODE XREF=duplicate_node_closure+405
0000000000007693         mov        rsi, r15
0000000000007696         mov        rdi, r14
0000000000007699         shr        eax, 0x8
000000000000769c         and        eax, 0x3ff
00000000000076a1         or         ebp, eax
00000000000076a3         mov        edx, ebp
00000000000076a5         call       duplicate_node                              ; duplicate_node
00000000000076aa         cmp        rax, 0xffffffffffffffff
00000000000076ae         mov        r13, rax
00000000000076b1         je         loc_761b

00000000000076b7         add        rbx, qword [r14+0x28]
00000000000076bb         mov        rsi, rax
00000000000076be         mov        rdi, rbx
00000000000076c1         call       re_node_set_insert                          ; re_node_set_insert
00000000000076c6         test       al, al
00000000000076c8         je         loc_761b

00000000000076ce         mov        r9, r15
00000000000076d1         jmp        loc_750f
00000000000076d6         align      32

                     loc_76e0:
00000000000076e0         mov        rax, qword [r14+0x18]                       ; CODE XREF=duplicate_node_closure+55
00000000000076e4         lea        rbx, qword [r13+r13*2]
00000000000076e9         lea        r15, qword [r9*8]
00000000000076f1         mov        edx, ebp
00000000000076f3         shl        rbx, 0x3
00000000000076f7         mov        r9, qword [rax+r9*8]
00000000000076fb         mov        qword [rdi+rbx+8], 0x0
0000000000007704         mov        rdi, r14
0000000000007707         mov        rsi, r9
000000000000770a         mov        qword [rsp+0x48+var_48], r9
000000000000770e         call       duplicate_node                              ; duplicate_node
0000000000007713         cmp        rax, 0xffffffffffffffff
0000000000007717         mov        r13, rax
000000000000771a         mov        r9, qword [rsp+0x48+var_48]
000000000000771e         je         loc_761b

0000000000007724         mov        rax, qword [r14+0x18]
0000000000007728         mov        qword [rsp+0x48+var_48], r9
000000000000772c         mov        rcx, qword [rax+r15]
0000000000007730         mov        qword [rax+r12*8], rcx
0000000000007734         jmp        loc_7600

                     loc_7739:
0000000000007739         mov        rax, qword [r14+0x18]                       ; CODE XREF=duplicate_node_closure+80
000000000000773d         mov        rcx, qword [rax+r9*8]
0000000000007741         mov        qword [rax+r13*8], rcx
0000000000007745         xor        eax, eax
0000000000007747         jmp        loc_7620

                     loc_774c:
000000000000774c         mov        rsi, r15                                    ; CODE XREF=duplicate_node_closure+410
000000000000774f         call       re_node_set_insert                          ; re_node_set_insert
0000000000007754         mov        edx, eax
0000000000007756         xor        eax, eax
0000000000007758         test       dl, dl
000000000000775a         jne        loc_7620

0000000000007760         jmp        loc_761b
0000000000007765         align      16                                          ; End of unwind block (FDE at 0x17668)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     free_state:
0000000000007770         push       rbx                                         ; Begin of unwind block (FDE at 0x176b4), CODE XREF=free_dfa_content+252, re_acquire_state_context+529, re_acquire_state+487
0000000000007771         mov        rbx, rdi
0000000000007774         mov        rdi, qword [rdi+0x30]                       ; argument "__ptr" for method j_free
0000000000007778         call       j_free                                      ; free
000000000000777d         mov        rdi, qword [rbx+0x48]                       ; argument "__ptr" for method j_free
0000000000007781         call       j_free                                      ; free
0000000000007786         mov        rax, qword [rbx+0x50]
000000000000778a         lea        rdx, qword [rbx+8]
000000000000778e         cmp        rax, rdx
0000000000007791         je         loc_77a5

0000000000007793         mov        rdi, qword [rax+0x10]                       ; argument "__ptr" for method j_free
0000000000007797         call       j_free                                      ; free
000000000000779c         mov        rdi, qword [rbx+0x50]                       ; argument "__ptr" for method j_free
00000000000077a0         call       j_free                                      ; free

                     loc_77a5:
00000000000077a5         mov        rdi, qword [rbx+0x18]                       ; argument "__ptr" for method j_free, CODE XREF=free_state+33
00000000000077a9         call       j_free                                      ; free
00000000000077ae         mov        rdi, qword [rbx+0x60]                       ; argument "__ptr" for method j_free
00000000000077b2         call       j_free                                      ; free
00000000000077b7         mov        rdi, qword [rbx+0x58]                       ; argument "__ptr" for method j_free
00000000000077bb         call       j_free                                      ; free
00000000000077c0         mov        rdi, rbx                                    ; argument "__ptr" for method j_free
00000000000077c3         pop        rbx
00000000000077c4         jmp        j_free                                      ; free
                        ; endp
00000000000077c9         align      16                                          ; End of unwind block (FDE at 0x176b4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_string_destruct:
00000000000077d0         push       rbx                                         ; Begin of unwind block (FDE at 0x176d0), CODE XREF=re_search_internal+2932, re_compile_internal+887, sub_13010+983
00000000000077d1         mov        rbx, rdi
00000000000077d4         mov        rdi, qword [rdi+0x10]                       ; argument "__ptr" for method j_free
00000000000077d8         call       j_free                                      ; free
00000000000077dd         mov        rdi, qword [rbx+0x18]                       ; argument "__ptr" for method j_free
00000000000077e1         call       j_free                                      ; free
00000000000077e6         cmp        byte [rbx+0x8b], 0x0
00000000000077ed         jne        loc_77f8

00000000000077ef         pop        rbx
00000000000077f0         ret
                        ; endp
00000000000077f1         align      8

                     loc_77f8:
00000000000077f8         mov        rdi, qword [rbx+8]                          ; argument "__ptr" for method j_free, CODE XREF=re_string_destruct+29
00000000000077fc         pop        rbx
00000000000077fd         jmp        j_free                                      ; free
                        ; endp
0000000000007802         align      16                                          ; End of unwind block (FDE at 0x176d0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     free_dfa_content:
0000000000007810         push       r14                                         ; Begin of unwind block (FDE at 0x176f0), CODE XREF=re_compile_internal+895, rpl_regfree+12
0000000000007812         push       r13
0000000000007814         push       r12
0000000000007816         mov        r12, rdi
0000000000007819         push       rbp
000000000000781a         push       rbx
000000000000781b         mov        rdi, qword [rdi]
000000000000781e         test       rdi, rdi
0000000000007821         je         loc_784e

0000000000007823         cmp        qword [r12+0x10], 0x0
0000000000007829         je         loc_784e

000000000000782b         xor        ebx, ebx
000000000000782d         jmp        loc_7834
000000000000782f         align      16

                     loc_7830:
0000000000007830         mov        rdi, qword [r12]                            ; CODE XREF=free_dfa_content+60

                     loc_7834:
0000000000007834         mov        rax, rbx                                    ; CODE XREF=free_dfa_content+29
0000000000007837         add        rbx, 0x1
000000000000783b         shl        rax, 0x4
000000000000783f         add        rdi, rax
0000000000007842         call       free_token                                  ; free_token
0000000000007847         cmp        qword [r12+0x10], rbx
000000000000784c         ja         loc_7830

                     loc_784e:
000000000000784e         mov        rdi, qword [r12+0x18]                       ; argument "__ptr" for method j_free, CODE XREF=free_dfa_content+17, free_dfa_content+25
0000000000007853         call       j_free                                      ; free
0000000000007858         cmp        qword [r12+0x10], 0x0
000000000000785e         je         loc_78b3

0000000000007860         xor        ebx, ebx
0000000000007862         xor        ebp, ebp
0000000000007864         nop        dword [rax]

                     loc_7868:
0000000000007868         mov        rax, qword [r12+0x30]                       ; CODE XREF=free_dfa_content+161
000000000000786d         test       rax, rax
0000000000007870         je         loc_787c

0000000000007872         mov        rdi, qword [rax+rbx+0x10]                   ; argument "__ptr" for method j_free
0000000000007877         call       j_free                                      ; free

                     loc_787c:
000000000000787c         mov        rax, qword [r12+0x38]                       ; CODE XREF=free_dfa_content+96
0000000000007881         test       rax, rax
0000000000007884         je         loc_7890

0000000000007886         mov        rdi, qword [rax+rbx+0x10]                   ; argument "__ptr" for method j_free
000000000000788b         call       j_free                                      ; free

                     loc_7890:
0000000000007890         mov        rax, qword [r12+0x28]                       ; CODE XREF=free_dfa_content+116
0000000000007895         test       rax, rax
0000000000007898         je         loc_78a4

000000000000789a         mov        rdi, qword [rax+rbx+0x10]                   ; argument "__ptr" for method j_free
000000000000789f         call       j_free                                      ; free

                     loc_78a4:
00000000000078a4         add        rbp, 0x1                                    ; CODE XREF=free_dfa_content+136
00000000000078a8         add        rbx, 0x18
00000000000078ac         cmp        qword [r12+0x10], rbp
00000000000078b1         ja         loc_7868

                     loc_78b3:
00000000000078b3         mov        rdi, qword [r12+0x28]                       ; argument "__ptr" for method j_free, CODE XREF=free_dfa_content+78
00000000000078b8         call       j_free                                      ; free
00000000000078bd         mov        rdi, qword [r12+0x30]                       ; argument "__ptr" for method j_free
00000000000078c2         call       j_free                                      ; free
00000000000078c7         mov        rdi, qword [r12+0x38]                       ; argument "__ptr" for method j_free
00000000000078cc         call       j_free                                      ; free
00000000000078d1         mov        rdi, qword [r12]                            ; argument "__ptr" for method j_free
00000000000078d5         call       j_free                                      ; free
00000000000078da         mov        rdi, qword [r12+0x40]
00000000000078df         test       rdi, rdi
00000000000078e2         je         loc_7937

00000000000078e4         xor        r14d, r14d
00000000000078e7         xor        r13d, r13d
00000000000078ea         nop        word [rax+rax]

                     loc_78f0:
00000000000078f0         lea        rbp, qword [rdi+r14]                        ; CODE XREF=free_dfa_content+293
00000000000078f4         cmp        qword [rbp], 0x0
00000000000078f9         jle        loc_7917

00000000000078fb         xor        ebx, ebx
00000000000078fd         nop        dword [rax]

                     loc_7900:
0000000000007900         mov        rax, qword [rbp+0x10]                       ; CODE XREF=free_dfa_content+261
0000000000007904         mov        rdi, qword [rax+rbx*8]
0000000000007908         add        rbx, 0x1
000000000000790c         call       free_state                                  ; free_state
0000000000007911         cmp        qword [rbp], rbx
0000000000007915         jg         loc_7900

                     loc_7917:
0000000000007917         mov        rdi, qword [rbp+0x10]                       ; argument "__ptr" for method j_free, CODE XREF=free_dfa_content+233
000000000000791b         add        r13, 0x1
000000000000791f         add        r14, 0x18
0000000000007923         call       j_free                                      ; free
0000000000007928         cmp        qword [r12+0x88], r13
0000000000007930         mov        rdi, qword [r12+0x40]
0000000000007935         jae        loc_78f0

                     loc_7937:
0000000000007937         call       j_free                                      ; free, CODE XREF=free_dfa_content+210
000000000000793c         mov        rdi, qword [r12+0x78]
0000000000007941         lea        rax, qword [utf8_sb_map]                    ; utf8_sb_map
0000000000007948         cmp        rdi, rax
000000000000794b         je         loc_7952

000000000000794d         call       j_free                                      ; free

                     loc_7952:
0000000000007952         mov        rdi, qword [r12+0xe0]                       ; argument "__ptr" for method j_free, CODE XREF=free_dfa_content+315
000000000000795a         call       j_free                                      ; free
000000000000795f         pop        rbx
0000000000007960         mov        rdi, r12                                    ; argument "__ptr" for method j_free
0000000000007963         pop        rbp
0000000000007964         pop        r12
0000000000007966         pop        r13
0000000000007968         pop        r14
000000000000796a         jmp        j_free                                      ; free
                        ; endp
000000000000796f         align      16                                          ; End of unwind block (FDE at 0x176f0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     match_ctx_clean:
0000000000007970         push       r14                                         ; Begin of unwind block (FDE at 0x1772c), CODE XREF=re_search_internal+3892, re_search_internal+5268
0000000000007972         push       r13
0000000000007974         mov        r14, rdi
0000000000007977         push       r12
0000000000007979         push       rbp
000000000000797a         push       rbx
000000000000797b         cmp        qword [rdi+0xe8], 0x0
0000000000007983         jle        loc_7a09

0000000000007989         xor        r13d, r13d
000000000000798c         nop        dword [rax]

                     loc_7990:
0000000000007990         mov        rax, qword [r14+0xf8]                       ; CODE XREF=match_ctx_clean+151
0000000000007997         mov        r12, qword [rax+r13*8]
000000000000799b         cmp        qword [r12+0x20], 0x0
00000000000079a1         jle        loc_79cd

00000000000079a3         xor        ebx, ebx
00000000000079a5         nop        dword [rax]

                     loc_79a8:
00000000000079a8         mov        rax, qword [r12+0x28]                       ; CODE XREF=match_ctx_clean+91
00000000000079ad         mov        rbp, qword [rax+rbx*8]
00000000000079b1         add        rbx, 0x1
00000000000079b5         mov        rdi, qword [rbp+0x20]                       ; argument "__ptr" for method j_free
00000000000079b9         call       j_free                                      ; free
00000000000079be         mov        rdi, rbp                                    ; argument "__ptr" for method j_free
00000000000079c1         call       j_free                                      ; free
00000000000079c6         cmp        qword [r12+0x20], rbx
00000000000079cb         jg         loc_79a8

                     loc_79cd:
00000000000079cd         mov        rdi, qword [r12+0x28]                       ; argument "__ptr" for method j_free, CODE XREF=match_ctx_clean+49
00000000000079d2         call       j_free                                      ; free
00000000000079d7         mov        rax, qword [r12+0x10]
00000000000079dc         test       rax, rax
00000000000079df         je         loc_79f4

00000000000079e1         mov        rdi, qword [rax+0x10]                       ; argument "__ptr" for method j_free
00000000000079e5         call       j_free                                      ; free
00000000000079ea         mov        rdi, qword [r12+0x10]                       ; argument "__ptr" for method j_free
00000000000079ef         call       j_free                                      ; free

                     loc_79f4:
00000000000079f4         mov        rdi, r12                                    ; argument "__ptr" for method j_free, CODE XREF=match_ctx_clean+111
00000000000079f7         add        r13, 0x1
00000000000079fb         call       j_free                                      ; free
0000000000007a00         cmp        qword [r14+0xe8], r13
0000000000007a07         jg         loc_7990

                     loc_7a09:
0000000000007a09         pop        rbx                                         ; CODE XREF=match_ctx_clean+19
0000000000007a0a         mov        qword [r14+0xe8], 0x0
0000000000007a15         mov        qword [r14+0xc8], 0x0
0000000000007a20         pop        rbp
0000000000007a21         pop        r12
0000000000007a23         pop        r13
0000000000007a25         pop        r14
0000000000007a27         ret
                        ; endp
0000000000007a28         align      16                                          ; End of unwind block (FDE at 0x1772c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_string_char_size_at.part.0:
0000000000007a30         mov        rcx, qword [rdi+0x30]                       ; Begin of unwind block (FDE at 0x17768), CODE XREF=check_node_accept_bytes.isra.31+58, parse_bracket_element.constprop.37+59, parse_bracket_element.constprop.37+463
0000000000007a34         lea        rax, qword [rsi+1]
0000000000007a38         cmp        rax, rcx
0000000000007a3b         jge        loc_7a78

0000000000007a3d         mov        rdx, qword [rdi+0x10]
0000000000007a41         lea        rdi, qword [rax*4]
0000000000007a49         cmp        dword [rdx+rax*4], 0xffffffff
0000000000007a4d         jne        loc_7a78

0000000000007a4f         sub        rcx, rsi
0000000000007a52         lea        rsi, qword [rdx+rdi-4]
0000000000007a57         mov        edx, 0x2
0000000000007a5c         jmp        loc_7a6b
0000000000007a5e         align      32

                     loc_7a60:
0000000000007a60         add        rdx, 0x1                                    ; CODE XREF=re_string_char_size_at.part.0+64
0000000000007a64         cmp        dword [rsi+rdx*4-4], 0xffffffff
0000000000007a69         jne        loc_7a7d

                     loc_7a6b:
0000000000007a6b         cmp        rdx, rcx                                    ; CODE XREF=re_string_char_size_at.part.0+44
0000000000007a6e         mov        eax, edx
0000000000007a70         jne        loc_7a60

0000000000007a72         ret
                        ; endp
0000000000007a74         align      8

                     loc_7a78:
0000000000007a78         mov        eax, 0x1                                    ; CODE XREF=re_string_char_size_at.part.0+11, re_string_char_size_at.part.0+29

                     loc_7a7d:
0000000000007a7d         ret                                                    ; CODE XREF=re_string_char_size_at.part.0+57
                        ; endp
0000000000007a7f         align      128                                         ; End of unwind block (FDE at 0x17768)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_node_set_compare.part.2:
0000000000007a80         mov        rdx, qword [rdi+8]                          ; Begin of unwind block (FDE at 0x1777c), CODE XREF=re_acquire_state_context+163, re_acquire_state+128
0000000000007a84         xor        eax, eax
0000000000007a86         cmp        rdx, qword [rsi+8]
0000000000007a8a         je         loc_7a90

0000000000007a8c         ret
                        ; endp
0000000000007a8e         align      16

                     loc_7a90:
0000000000007a90         lea        rax, qword [rdx-1]                          ; CODE XREF=re_node_set_compare.part.2+10
0000000000007a94         lea        rdx, qword [rax*8]
0000000000007a9c         jmp        loc_7abd
0000000000007a9e         align      32

                     loc_7aa0:
0000000000007aa0         mov        rcx, qword [rdi+0x10]                       ; CODE XREF=re_node_set_compare.part.2+64
0000000000007aa4         mov        r8, qword [rcx+rdx]
0000000000007aa8         mov        rcx, qword [rsi+0x10]
0000000000007aac         mov        rcx, qword [rcx+rdx]
0000000000007ab0         sub        rdx, 0x8
0000000000007ab4         cmp        r8, rcx
0000000000007ab7         jne        loc_7ad0

0000000000007ab9         sub        rax, 0x1

                     loc_7abd:
0000000000007abd         test       rax, rax                                    ; CODE XREF=re_node_set_compare.part.2+28
0000000000007ac0         jns        loc_7aa0

0000000000007ac2         mov        eax, 0x1
0000000000007ac7         ret
                        ; endp
0000000000007ac8         align      16

                     loc_7ad0:
0000000000007ad0         xor        eax, eax                                    ; CODE XREF=re_node_set_compare.part.2+55
0000000000007ad2         ret
                        ; endp
0000000000007ad3         align      32                                          ; End of unwind block (FDE at 0x1777c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_node_set_contains.isra.3:
0000000000007ae0         xor        eax, eax                                    ; Begin of unwind block (FDE at 0x17790), CODE XREF=check_arrival_expand_ecl_sub+43, expand_bkref_cache+371, expand_bkref_cache+537, expand_bkref_cache+599, sub_epsilon_src_nodes+124, sub_epsilon_src_nodes+264, sub_epsilon_src_nodes+305, sub_epsilon_src_nodes+350, sub_epsilon_src_nodes+372, sub_epsilon_src_nodes+435, sub_epsilon_src_nodes+456
0000000000007ae2         test       rdi, rdi
0000000000007ae5         jle        loc_7b25

0000000000007ae7         mov        r8, qword [rsi]
0000000000007aea         sub        rdi, 0x1
0000000000007aee         xor        esi, esi

                     loc_7af0:
0000000000007af0         cmp        rsi, rdi                                    ; CODE XREF=re_node_set_contains.isra.3+103
0000000000007af3         jae        loc_7b1d

0000000000007af5         lea        rcx, qword [rsi+rdi]
0000000000007af9         shr        rcx, 0x1
0000000000007afc         cmp        rdx, qword [r8+rcx*8]
0000000000007b00         jle        loc_7b18

0000000000007b02         jmp        loc_7b30
0000000000007b04         align      8

                     loc_7b08:
0000000000007b08         lea        rax, qword [rsi+rcx]                        ; CODE XREF=re_node_set_contains.isra.3+59
0000000000007b0c         shr        rax, 0x1
0000000000007b0f         cmp        qword [r8+rax*8], rdx
0000000000007b13         jl         loc_7b40

0000000000007b15         mov        rcx, rax

                     loc_7b18:
0000000000007b18         cmp        rsi, rcx                                    ; CODE XREF=re_node_set_contains.isra.3+32
0000000000007b1b         jb         loc_7b08

                     loc_7b1d:
0000000000007b1d         xor        eax, eax                                    ; CODE XREF=re_node_set_contains.isra.3+19
0000000000007b1f         cmp        rdx, qword [r8+rsi*8]
0000000000007b23         je         loc_7b50

                     loc_7b25:
0000000000007b25         ret                                                    ; CODE XREF=re_node_set_contains.isra.3+5
                        ; endp
0000000000007b27         align      16

                     loc_7b30:
0000000000007b30         mov        rax, rcx                                    ; CODE XREF=re_node_set_contains.isra.3+34
0000000000007b33         mov        rcx, rdi
0000000000007b36         nop        word [cs:rax+rax]

                     loc_7b40:
0000000000007b40         lea        rsi, qword [rax+1]                          ; CODE XREF=re_node_set_contains.isra.3+51
0000000000007b44         mov        rdi, rcx
0000000000007b47         jmp        loc_7af0
0000000000007b49         align      16

                     loc_7b50:
0000000000007b50         lea        rax, qword [rsi+1]                          ; CODE XREF=re_node_set_contains.isra.3+67
0000000000007b54         ret
                        ; endp
0000000000007b55         align      32                                          ; End of unwind block (FDE at 0x17790)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     check_arrival_expand_ecl_sub:
0000000000007b60         push       r15                                         ; Begin of unwind block (FDE at 0x177a4), CODE XREF=check_arrival_expand_ecl_sub+224, check_arrival_expand_ecl+216
0000000000007b62         push       r14
0000000000007b64         lea        r14, qword [rsi+0x10]
0000000000007b68         push       r13
0000000000007b6a         push       r12
0000000000007b6c         mov        r15, rcx
0000000000007b6f         push       rbp
0000000000007b70         push       rbx
0000000000007b71         mov        r12, rdi
0000000000007b74         mov        rbp, rsi
0000000000007b77         mov        rbx, rdx
0000000000007b7a         mov        r13d, r8d
0000000000007b7d         sub        rsp, 0x8

                     loc_7b81:
0000000000007b81         mov        rdi, qword [rbp+8]                          ; CODE XREF=check_arrival_expand_ecl_sub+131
0000000000007b85         mov        rdx, rbx
0000000000007b88         mov        rsi, r14
0000000000007b8b         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
0000000000007b90         test       rax, rax
0000000000007b93         jne        loc_7c00

0000000000007b95         mov        rax, rbx
0000000000007b98         shl        rax, 0x4
0000000000007b9c         add        rax, qword [r12]
0000000000007ba0         movzx      edx, byte [rax+8]
0000000000007ba4         cmp        edx, r13d
0000000000007ba7         jne        loc_7bae

0000000000007ba9         cmp        qword [rax], r15
0000000000007bac         je         loc_7be8

                     loc_7bae:
0000000000007bae         mov        rsi, rbx                                    ; CODE XREF=check_arrival_expand_ecl_sub+71
0000000000007bb1         mov        rdi, rbp
0000000000007bb4         call       re_node_set_insert                          ; re_node_set_insert
0000000000007bb9         test       al, al
0000000000007bbb         je         loc_7c18

0000000000007bbd         lea        rbx, qword [rbx+rbx*2]
0000000000007bc1         mov        rdx, qword [r12+0x28]
0000000000007bc6         shl        rbx, 0x3
0000000000007bca         add        rdx, rbx
0000000000007bcd         mov        rax, qword [rdx+8]
0000000000007bd1         test       rax, rax
0000000000007bd4         je         loc_7c00

0000000000007bd6         cmp        rax, 0x2
0000000000007bda         mov        rdx, qword [rdx+0x10]
0000000000007bde         je         loc_7c30

                     loc_7be0:
0000000000007be0         mov        rbx, qword [rdx]                            ; CODE XREF=check_arrival_expand_ecl_sub+243
0000000000007be3         jmp        loc_7b81
0000000000007be5         align      8

                     loc_7be8:
0000000000007be8         cmp        r13d, 0x9                                   ; CODE XREF=check_arrival_expand_ecl_sub+76
0000000000007bec         jne        loc_7c00

0000000000007bee         mov        rsi, rbx
0000000000007bf1         mov        rdi, rbp
0000000000007bf4         call       re_node_set_insert                          ; re_node_set_insert
0000000000007bf9         test       al, al
0000000000007bfb         je         loc_7c18

0000000000007bfd         nop        dword [rax]

                     loc_7c00:
0000000000007c00         xor        eax, eax                                    ; CODE XREF=check_arrival_expand_ecl_sub+51, check_arrival_expand_ecl_sub+116, check_arrival_expand_ecl_sub+140

                     loc_7c02:
0000000000007c02         add        rsp, 0x8                                    ; CODE XREF=check_arrival_expand_ecl_sub+231
0000000000007c06         pop        rbx
0000000000007c07         pop        rbp
0000000000007c08         pop        r12
0000000000007c0a         pop        r13
0000000000007c0c         pop        r14
0000000000007c0e         pop        r15
0000000000007c10         ret
                        ; endp
0000000000007c11         align      8

                     loc_7c18:
0000000000007c18         add        rsp, 0x8                                    ; CODE XREF=check_arrival_expand_ecl_sub+91, check_arrival_expand_ecl_sub+155
0000000000007c1c         mov        eax, 0xc
0000000000007c21         pop        rbx
0000000000007c22         pop        rbp
0000000000007c23         pop        r12
0000000000007c25         pop        r13
0000000000007c27         pop        r14
0000000000007c29         pop        r15
0000000000007c2b         ret
                        ; endp
0000000000007c2c         align      16

                     loc_7c30:
0000000000007c30         mov        rdx, qword [rdx+8]                          ; CODE XREF=check_arrival_expand_ecl_sub+126
0000000000007c34         mov        r8d, r13d
0000000000007c37         mov        rcx, r15
0000000000007c3a         mov        rsi, rbp
0000000000007c3d         mov        rdi, r12
0000000000007c40         call       check_arrival_expand_ecl_sub                ; check_arrival_expand_ecl_sub
0000000000007c45         test       eax, eax
0000000000007c47         jne        loc_7c02

0000000000007c49         mov        rax, qword [r12+0x28]
0000000000007c4e         mov        rdx, qword [rax+rbx+0x10]
0000000000007c53         jmp        loc_7be0
0000000000007c55         align      32                                          ; End of unwind block (FDE at 0x177a4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_node_set_remove_at.isra.4.part.5:
0000000000007c60         mov        rax, qword [rdi]                            ; Begin of unwind block (FDE at 0x17808), CODE XREF=re_acquire_state_context+473, sub_epsilon_src_nodes+477, update_cur_sifted_state+1890
0000000000007c63         cmp        rax, rdx
0000000000007c66         jle        loc_7c92

0000000000007c68         sub        rax, 0x1
0000000000007c6c         cmp        rdx, rax
0000000000007c6f         mov        qword [rdi], rax
0000000000007c72         jge        loc_7c92

0000000000007c74         mov        rax, qword [rsi]
0000000000007c77         nop        word [rax+rax]

                     loc_7c80:
0000000000007c80         mov        rcx, qword [rax+rdx*8+8]                    ; CODE XREF=re_node_set_remove_at.isra.4.part.5+48
0000000000007c85         mov        qword [rax+rdx*8], rcx
0000000000007c89         add        rdx, 0x1
0000000000007c8d         cmp        rdx, qword [rdi]
0000000000007c90         jl         loc_7c80

                     loc_7c92:
0000000000007c92         ret                                                    ; CODE XREF=re_node_set_remove_at.isra.4.part.5+6, re_node_set_remove_at.isra.4.part.5+18
                        ; endp
0000000000007c94         align      32                                          ; End of unwind block (FDE at 0x17808)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     optimize_subexps:
0000000000007ca0         movzx      eax, byte [rsi+0x30]                        ; Begin of unwind block (FDE at 0x1781c), DATA XREF=re_compile_internal+1553
0000000000007ca4         cmp        al, 0x4
0000000000007ca6         je         loc_7d00

0000000000007ca8         cmp        al, 0x11
0000000000007caa         je         loc_7cb0

                     loc_7cac:
0000000000007cac         xor        eax, eax                                    ; CODE XREF=optimize_subexps+23, optimize_subexps+29, optimize_subexps+74, optimize_subexps+93, optimize_subexps+106
0000000000007cae         ret
                        ; endp
0000000000007caf         align      16

                     loc_7cb0:
0000000000007cb0         mov        rax, qword [rsi+8]                          ; CODE XREF=optimize_subexps+10
0000000000007cb4         test       rax, rax
0000000000007cb7         je         loc_7cac

0000000000007cb9         cmp        byte [rax+0x30], 0x11
0000000000007cbd         jne        loc_7cac

0000000000007cbf         mov        rcx, qword [rax+0x28]
0000000000007cc3         mov        rax, qword [rax+8]
0000000000007cc7         test       rax, rax
0000000000007cca         mov        qword [rsi+8], rax
0000000000007cce         je         loc_7cd3

0000000000007cd0         mov        qword [rax], rsi

                     loc_7cd3:
0000000000007cd3         mov        rax, qword [rdi+0xe0]                       ; CODE XREF=optimize_subexps+46
0000000000007cda         mov        rdx, qword [rsi+0x28]
0000000000007cde         cmp        rcx, 0x3f
0000000000007ce2         mov        rdx, qword [rax+rdx*8]
0000000000007ce6         mov        qword [rax+rcx*8], rdx
0000000000007cea         jg         loc_7cac

0000000000007cec         mov        rax, 0xfffffffffffffffe
0000000000007cf3         rol        rax, cl
0000000000007cf6         and        qword [rdi+0xa0], rax
0000000000007cfd         jmp        loc_7cac
0000000000007cff         align      256

                     loc_7d00:
0000000000007d00         mov        rax, qword [rdi+0xe0]                       ; CODE XREF=optimize_subexps+6
0000000000007d07         test       rax, rax
0000000000007d0a         je         loc_7cac

0000000000007d0c         movsxd     rdx, dword [rsi+0x28]
0000000000007d10         mov        rcx, qword [rax+rdx*8]
0000000000007d14         mov        eax, 0x1
0000000000007d19         shl        eax, cl
0000000000007d1b         mov        qword [rsi+0x28], rcx
0000000000007d1f         cdqe
0000000000007d21         or         qword [rdi+0xa0], rax
0000000000007d28         xor        eax, eax
0000000000007d2a         ret
                        ; endp
0000000000007d2b         align      16                                          ; End of unwind block (FDE at 0x1781c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     calc_next:
0000000000007d30         movzx      eax, byte [rsi+0x30]                        ; Begin of unwind block (FDE at 0x17830), DATA XREF=re_compile_internal+1689
0000000000007d34         mov        rdx, qword [rsi+8]
0000000000007d38         cmp        al, 0xb
0000000000007d3a         je         loc_7d80

0000000000007d3c         cmp        al, 0x10
0000000000007d3e         je         loc_7d68

0000000000007d40         test       rdx, rdx
0000000000007d43         je         loc_7d4d

0000000000007d45         mov        rax, qword [rsi+0x20]
0000000000007d49         mov        qword [rdx+0x20], rax

                     loc_7d4d:
0000000000007d4d         mov        rax, qword [rsi+0x10]                       ; CODE XREF=calc_next+19
0000000000007d51         test       rax, rax
0000000000007d54         je         loc_7d5e

0000000000007d56         mov        rdx, qword [rsi+0x20]
0000000000007d5a         mov        qword [rax+0x20], rdx

                     loc_7d5e:
0000000000007d5e         xor        eax, eax                                    ; CODE XREF=calc_next+36
0000000000007d60         ret
                        ; endp
0000000000007d61         align      8

                     loc_7d68:
0000000000007d68         mov        rax, qword [rsi+0x10]                       ; CODE XREF=calc_next+14
0000000000007d6c         mov        rcx, qword [rax+0x18]
0000000000007d70         mov        qword [rdx+0x20], rcx
0000000000007d74         mov        rdx, qword [rsi+0x20]
0000000000007d78         mov        qword [rax+0x20], rdx
0000000000007d7c         xor        eax, eax
0000000000007d7e         ret
                        ; endp
0000000000007d7f         align      128

                     loc_7d80:
0000000000007d80         mov        qword [rdx+0x20], rsi                       ; CODE XREF=calc_next+10
0000000000007d84         xor        eax, eax
0000000000007d86         ret
                        ; endp
0000000000007d87         align      16                                          ; End of unwind block (FDE at 0x17830)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112


                     check_dst_limits.isra.13:
0000000000007d90         push       r15                                         ; Begin of unwind block (FDE at 0x17844), CODE XREF=sift_states_backward+396, update_cur_sifted_state+1699
0000000000007d92         push       r14
0000000000007d94         push       r13
0000000000007d96         push       r12
0000000000007d98         push       rbp
0000000000007d99         push       rbx
0000000000007d9a         xor        ebx, ebx
0000000000007d9c         sub        rsp, 0x48
0000000000007da0         mov        rax, qword [rdi+0x98]
0000000000007da7         mov        r15, qword [rdi+0xc8]
0000000000007dae         mov        r12, qword [rsp+0x78+arg_0]
0000000000007db6         mov        qword [rsp+0x78+var_70], rax
0000000000007dbb         mov        rbp, r15

                     loc_7dbe:
0000000000007dbe         cmp        rbx, rbp                                    ; CODE XREF=check_dst_limits.isra.13+519
0000000000007dc1         jge        loc_7e1b

0000000000007dc3         lea        rax, qword [rbx+rbp]
0000000000007dc7         mov        r13, qword [rdi+0xd8]
0000000000007dce         mov        r10, rax
0000000000007dd1         shr        r10, 0x3f
0000000000007dd5         add        r10, rax
0000000000007dd8         sar        r10, 0x1
0000000000007ddb         lea        rax, qword [r10+r10*4]
0000000000007ddf         cmp        r8, qword [r13+rax*8+8]
0000000000007de4         jle        loc_7e16

0000000000007de6         jmp        loc_7f80
0000000000007deb         align      16

                     loc_7df0:
0000000000007df0         lea        r11, qword [rbx+r10]                        ; CODE XREF=check_dst_limits.isra.13+137
0000000000007df4         mov        rax, r11
0000000000007df7         shr        rax, 0x3f
0000000000007dfb         add        rax, r11
0000000000007dfe         sar        rax, 0x1
0000000000007e01         lea        r11, qword [rax+rax*4]
0000000000007e05         mov        r14, rax
0000000000007e08         cmp        qword [r13+r11*8+8], r8
0000000000007e0d         jl         loc_7f90

0000000000007e13         mov        r10, rax

                     loc_7e16:
0000000000007e16         cmp        rbx, r10                                    ; CODE XREF=check_dst_limits.isra.13+84
0000000000007e19         jl         loc_7df0

                     loc_7e1b:
0000000000007e1b         cmp        r15, rbx                                    ; CODE XREF=check_dst_limits.isra.13+49
0000000000007e1e         jle        loc_7fc0

0000000000007e24         mov        r11, qword [rdi+0xd8]
0000000000007e2b         lea        rax, qword [rbx+rbx*4]
0000000000007e2f         lea        rax, qword [r11+rax*8]
0000000000007e33         cmp        r8, qword [rax+8]
0000000000007e37         mov        rax, 0xffffffffffffffff
0000000000007e3e         cmovne     rbx, rax

                     loc_7e42:
0000000000007e42         mov        rax, r15                                    ; CODE XREF=sub_7fa0+39
0000000000007e45         xor        ebp, ebp

                     loc_7e47:
0000000000007e47         cmp        rbp, rax                                    ; CODE XREF=sub_7fa0+23
0000000000007e4a         jge        loc_7ea4

0000000000007e4c         lea        r11, qword [rbp+rax]
0000000000007e51         mov        r10, r11
0000000000007e54         shr        r10, 0x3f
0000000000007e58         add        r10, r11
0000000000007e5b         mov        r11, qword [rdi+0xd8]
0000000000007e62         sar        r10, 0x1
0000000000007e65         lea        r13, qword [r10+r10*4]
0000000000007e69         cmp        r12, qword [r11+r13*8+8]
0000000000007e6e         jle        loc_7e9f

0000000000007e70         jmp        sub_7fa0                                    ; sub_7fa0
                        ; endp
0000000000007e75         align      8

                     loc_7e78:
0000000000007e78         lea        r13, qword [rbp+r10]                        ; CODE XREF=check_dst_limits.isra.13+274
0000000000007e7d         mov        rax, r13
0000000000007e80         shr        rax, 0x3f
0000000000007e84         add        rax, r13
0000000000007e87         sar        rax, 0x1
0000000000007e8a         lea        r13, qword [rax+rax*4]
0000000000007e8e         mov        r14, rax
0000000000007e91         cmp        qword [r11+r13*8+8], r12
0000000000007e96         jl         loc_7fb0

0000000000007e9c         mov        r10, rax

                     loc_7e9f:
0000000000007e9f         cmp        rbp, r10                                    ; CODE XREF=check_dst_limits.isra.13+222
0000000000007ea2         jl         loc_7e78

                     loc_7ea4:
0000000000007ea4         cmp        r15, rbp                                    ; CODE XREF=check_dst_limits.isra.13+186
0000000000007ea7         jle        loc_7fd0

0000000000007ead         mov        r10, qword [rdi+0xd8]
0000000000007eb4         lea        rax, qword [rbp+rbp*4]
0000000000007eb9         lea        rax, qword [r10+rax*8]
0000000000007ebd         cmp        r12, qword [rax+8]
0000000000007ec1         mov        rax, 0xffffffffffffffff
0000000000007ec8         cmovne     rbp, rax

                     loc_7ecc:
0000000000007ecc         cmp        qword [rsi], 0x0                            ; CODE XREF=sub_7fa0+55
0000000000007ed0         jle        loc_7ff2

0000000000007ed6         mov        qword [rsp+0x78+var_48], rbp
0000000000007edb         mov        qword [rsp+0x78+var_58], r9
0000000000007ee0         mov        r13, rdi
0000000000007ee3         mov        qword [rsp+0x78+var_60], r8
0000000000007ee8         mov        qword [rsp+0x78+var_68], rcx
0000000000007eed         xor        r14d, r14d
0000000000007ef0         mov        qword [rsp+0x78+var_40], rsi
0000000000007ef5         mov        qword [rsp+0x78+var_50], rbx
0000000000007efa         mov        rbp, rdx
0000000000007efd         mov        r15, r12

                     loc_7f00:
0000000000007f00         mov        rax, qword [rbp]                            ; CODE XREF=sub_7fa0+76
0000000000007f04         mov        rdx, qword [r13+0xd8]
0000000000007f0b         mov        rdi, r13
0000000000007f0e         mov        r9, qword [rsp+0x78+var_50]
0000000000007f13         mov        r8, qword [rsp+0x78+var_60]
0000000000007f18         mov        rcx, qword [rsp+0x78+var_68]
0000000000007f1d         mov        rsi, qword [rax+r14*8]
0000000000007f21         lea        rax, qword [rsi+rsi*4]
0000000000007f25         lea        rax, qword [rdx+rax*8]
0000000000007f29         mov        rdx, qword [rsp+0x78+var_70]
0000000000007f2e         mov        rax, qword [rax]
0000000000007f31         shl        rax, 0x4
0000000000007f35         add        rax, qword [rdx]
0000000000007f38         mov        r12, qword [rax]
0000000000007f3b         mov        rdx, r12
0000000000007f3e         call       check_dst_limits_calc_pos                   ; check_dst_limits_calc_pos
0000000000007f43         mov        ebx, eax
0000000000007f45         mov        rax, qword [rbp]
0000000000007f49         mov        r9, qword [rsp+0x78+var_48]
0000000000007f4e         mov        rcx, qword [rsp+0x78+var_58]
0000000000007f53         mov        r8, r15
0000000000007f56         mov        rdx, r12
0000000000007f59         mov        rdi, r13
0000000000007f5c         mov        rsi, qword [rax+r14*8]
0000000000007f60         call       check_dst_limits_calc_pos                   ; check_dst_limits_calc_pos
0000000000007f65         cmp        ebx, eax
0000000000007f67         je         loc_7fe0

0000000000007f69         mov        eax, 0x1

                     loc_7f6e:
0000000000007f6e         add        rsp, 0x48                                   ; CODE XREF=sub_7fa0+84
0000000000007f72         pop        rbx
0000000000007f73         pop        rbp
0000000000007f74         pop        r12
0000000000007f76         pop        r13
0000000000007f78         pop        r14
0000000000007f7a         pop        r15
0000000000007f7c         ret
                        ; endp
0000000000007f7d         align      128

                     loc_7f80:
0000000000007f80         mov        r14, r10                                    ; CODE XREF=check_dst_limits.isra.13+86
0000000000007f83         mov        r10, rbp
0000000000007f86         nop        word [cs:rax+rax]

                     loc_7f90:
0000000000007f90         lea        rbx, qword [r14+1]                          ; CODE XREF=check_dst_limits.isra.13+125
0000000000007f94         mov        rbp, r10
0000000000007f97         jmp        loc_7dbe
0000000000007f9c         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_7fa0:
0000000000007fa0         mov        r14, r10                                    ; CODE XREF=check_dst_limits.isra.13+224
0000000000007fa3         mov        r10, rax
0000000000007fa6         nop        word [cs:rax+rax]
                        ; endp

                     loc_7fb0:
0000000000007fb0         lea        rbp, qword [r14+1]                          ; CODE XREF=check_dst_limits.isra.13+262
0000000000007fb4         mov        rax, r10
0000000000007fb7         jmp        loc_7e47
0000000000007fbc         align      64

                     loc_7fc0:
0000000000007fc0         mov        rbx, 0xffffffffffffffff                     ; CODE XREF=check_dst_limits.isra.13+142
0000000000007fc7         jmp        loc_7e42
0000000000007fcc         align      16

                     loc_7fd0:
0000000000007fd0         mov        rbp, 0xffffffffffffffff                     ; CODE XREF=check_dst_limits.isra.13+279
0000000000007fd7         jmp        loc_7ecc
0000000000007fdc         align      32

                     loc_7fe0:
0000000000007fe0         mov        rax, qword [rsp+0x78+var_40]                ; CODE XREF=check_dst_limits.isra.13+471
0000000000007fe5         add        r14, 0x1
0000000000007fe9         cmp        r14, qword [rax]
0000000000007fec         jl         loc_7f00

                     loc_7ff2:
0000000000007ff2         xor        eax, eax                                    ; CODE XREF=check_dst_limits.isra.13+320
0000000000007ff4         jmp        loc_7f6e
0000000000007ff9         align      32768                                       ; End of unwind block (FDE at 0x17844)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_node_set_merge:
0000000000008000         test       rsi, rsi                                    ; Begin of unwind block (FDE at 0x17894), CODE XREF=calc_eclosure_iter+306, check_arrival_expand_ecl+275, expand_bkref_cache+694, build_trtable+557, check_arrival+389, check_arrival+692, update_cur_sifted_state+870, sub_13010+791, DATA XREF=peek_token+607
0000000000008003         je         loc_80f8

0000000000008009         mov        rdx, qword [rsi+8]
000000000000800d         test       rdx, rdx
0000000000008010         je         loc_80f8

0000000000008016         push       r12
0000000000008018         push       rbp
0000000000008019         mov        r12, rsi
000000000000801c         push       rbx
000000000000801d         mov        rax, qword [rdi+8]
0000000000008021         mov        rbx, rdi
0000000000008024         mov        rsi, qword [rdi]
0000000000008027         lea        rcx, qword [rax+rdx*2]
000000000000802b         cmp        rsi, rcx
000000000000802e         jl         loc_8178

                     loc_8034:
0000000000008034         test       rax, rax                                    ; CODE XREF=re_node_set_merge+420
0000000000008037         je         loc_81b0

000000000000803d         lea        rbp, qword [rax+rdx*2]
0000000000008041         sub        rdx, 0x1
0000000000008045         sub        rax, 0x1
0000000000008049         mov        rdi, rdx
000000000000804c         not        rdi

                     loc_804f:
000000000000804f         test       rdi, rdi                                    ; CODE XREF=re_node_set_merge+270, re_node_set_merge+284
0000000000008052         jns        loc_8090

                     loc_8054:
0000000000008054         test       rax, rax                                    ; CODE XREF=re_node_set_merge+139
0000000000008057         js         loc_8090

0000000000008059         mov        rcx, qword [rbx+0x10]
000000000000805d         mov        rsi, qword [r12+0x10]
0000000000008062         mov        rsi, qword [rsi+rdx*8]
0000000000008066         cmp        qword [rcx+rax*8], rsi
000000000000806a         je         loc_8100

0000000000008070         jge        loc_8118

0000000000008076         sub        rdx, 0x1
000000000000807a         sub        rbp, 0x1
000000000000807e         mov        rdi, rdx
0000000000008081         mov        qword [rcx+rbp*8], rsi
0000000000008085         not        rdi
0000000000008088         test       rdi, rdi
000000000000808b         js         loc_8054

000000000000808d         nop        dword [rax]

                     loc_8090:
0000000000008090         test       rdx, rdx                                    ; CODE XREF=re_node_set_merge+82, re_node_set_merge+87
0000000000008093         jns        loc_8128

                     loc_8099:
0000000000008099         mov        rcx, qword [rbx+8]                          ; CODE XREF=re_node_set_merge+325
000000000000809d         mov        rax, qword [r12+8]
00000000000080a2         lea        r8, qword [rcx+rax*2-1]
00000000000080a7         mov        rdx, r8
00000000000080aa         sub        rdx, rbp
00000000000080ad         add        rdx, 0x1
00000000000080b1         je         loc_80ea

00000000000080b3         mov        rdi, qword [rbx+0x10]
00000000000080b7         lea        rax, qword [rcx-1]
00000000000080bb         add        rcx, rdx
00000000000080be         mov        qword [rbx+8], rcx
00000000000080c2         nop        word [rax+rax]

                     loc_80c8:
00000000000080c8         mov        rsi, qword [rdi+r8*8]                       ; CODE XREF=re_node_set_merge+232, re_node_set_merge+343
00000000000080cc         mov        rcx, qword [rdi+rax*8]
00000000000080d0         lea        r9, qword [rax+rdx]
00000000000080d4         lea        r9, qword [rdi+r9*8]
00000000000080d8         cmp        rsi, rcx
00000000000080db         jle        loc_8150

00000000000080dd         sub        r8, 0x1
00000000000080e1         sub        rdx, 0x1
00000000000080e5         mov        qword [r9], rsi
00000000000080e8         jne        loc_80c8

                     loc_80ea:
00000000000080ea         xor        eax, eax                                    ; CODE XREF=re_node_set_merge+177, re_node_set_merge+463

                     loc_80ec:
00000000000080ec         pop        rbx                                         ; CODE XREF=re_node_set_merge+364, re_node_set_merge+473
00000000000080ed         pop        rbp
00000000000080ee         pop        r12
00000000000080f0         ret
                        ; endp
00000000000080f1         align      8

                     loc_80f8:
00000000000080f8         xor        eax, eax                                    ; CODE XREF=re_node_set_merge+3, re_node_set_merge+16
00000000000080fa         ret
                        ; endp
00000000000080fb         align      256

                     loc_8100:
0000000000008100         sub        rdx, 0x1                                    ; CODE XREF=re_node_set_merge+106
0000000000008104         sub        rax, 0x1
0000000000008108         mov        rdi, rdx
000000000000810b         not        rdi
000000000000810e         jmp        loc_804f
0000000000008113         align      8

                     loc_8118:
0000000000008118         sub        rax, 0x1                                    ; CODE XREF=re_node_set_merge+112
000000000000811c         jmp        loc_804f
0000000000008121         align      8

                     loc_8128:
0000000000008128         mov        rax, qword [rbx+0x10]                       ; CODE XREF=re_node_set_merge+147
000000000000812c         add        rdx, 0x1
0000000000008130         mov        rsi, qword [r12+0x10]                       ; argument "__src" for method j_memcpy
0000000000008135         sub        rbp, rdx
0000000000008138         shl        rdx, 0x3                                    ; argument "__n" for method j_memcpy
000000000000813c         lea        rdi, qword [rax+rbp*8]                      ; argument "__dest" for method j_memcpy
0000000000008140         call       j_memcpy                                    ; memcpy
0000000000008145         jmp        loc_8099
000000000000814a         align      16

                     loc_8150:
0000000000008150         sub        rax, 0x1                                    ; CODE XREF=re_node_set_merge+219
0000000000008154         mov        qword [r9], rcx
0000000000008157         jns        loc_80c8

000000000000815d         lea        rsi, qword [rdi+rbp*8]                      ; argument "__src" for method j_memcpy
0000000000008161         shl        rdx, 0x3                                    ; argument "__n" for method j_memcpy
0000000000008165         call       j_memcpy                                    ; memcpy
000000000000816a         xor        eax, eax
000000000000816c         jmp        loc_80ec
0000000000008171         align      8

                     loc_8178:
0000000000008178         add        rdx, rsi                                    ; CODE XREF=re_node_set_merge+46
000000000000817b         mov        rdi, qword [rdi+0x10]                       ; argument "__ptr" for method j_realloc
000000000000817f         lea        rbp, qword [rdx+rdx]
0000000000008183         shl        rdx, 0x4
0000000000008187         mov        rsi, rdx                                    ; argument "__size" for method j_realloc
000000000000818a         call       j_realloc                                   ; realloc
000000000000818f         test       rax, rax
0000000000008192         je         loc_81d4

0000000000008194         mov        qword [rbx+0x10], rax
0000000000008198         mov        qword [rbx], rbp
000000000000819b         mov        rax, qword [rbx+8]
000000000000819f         mov        rdx, qword [r12+8]
00000000000081a4         jmp        loc_8034
00000000000081a9         align      16

                     loc_81b0:
00000000000081b0         mov        qword [rbx+8], rdx                          ; CODE XREF=re_node_set_merge+55
00000000000081b4         mov        rax, qword [r12+8]
00000000000081b9         mov        rdi, qword [rbx+0x10]                       ; argument "__dest" for method j_memcpy
00000000000081bd         mov        rsi, qword [r12+0x10]                       ; argument "__src" for method j_memcpy
00000000000081c2         lea        rdx, qword [rax*8]                          ; argument "__n" for method j_memcpy
00000000000081ca         call       j_memcpy                                    ; memcpy
00000000000081cf         jmp        loc_80ea

                     loc_81d4:
00000000000081d4         mov        eax, 0xc                                    ; CODE XREF=re_node_set_merge+402
00000000000081d9         jmp        loc_80ec
00000000000081de         align      32                                          ; End of unwind block (FDE at 0x17894)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_58: int8_t, -88
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_7C: int32_t, -124
        ;    var_7D: int8_t, -125
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144


                     calc_eclosure_iter:
00000000000081e0         push       r15                                         ; Begin of unwind block (FDE at 0x178cc), CODE XREF=calc_eclosure_iter+654, sub_13010+170
00000000000081e2         push       r14
00000000000081e4         mov        r15, rsi
00000000000081e7         push       r13
00000000000081e9         push       r12
00000000000081eb         push       rbp
00000000000081ec         push       rbx
00000000000081ed         lea        rbx, qword [rdx+rdx*2]
00000000000081f1         mov        rbp, rdx
00000000000081f4         sub        rsp, 0x68
00000000000081f8         mov        r12, qword [rsi+0x28]
00000000000081fc         shl        rbx, 0x3
0000000000008200         mov        rax, qword [fs:0x28]
0000000000008209         mov        qword [rsp+0x98+var_40], rax
000000000000820e         xor        eax, eax
0000000000008210         mov        qword [rsp+0x98+var_88], rdi
0000000000008215         mov        dword [rsp+0x98+var_7C], ecx
0000000000008219         add        r12, rbx
000000000000821c         mov        rax, qword [r12+8]
0000000000008221         mov        qword [rsp+0x98+var_70], 0x0
000000000000822a         lea        rdi, qword [rax+1]
000000000000822e         mov        qword [rsp+0x98+var_78], rdi
0000000000008233         shl        rdi, 0x3                                    ; argument "__size" for method j_malloc
0000000000008237         call       j_malloc                                    ; malloc
000000000000823c         test       rax, rax
000000000000823f         mov        qword [rsp+0x98+var_68], rax
0000000000008244         je         loc_8480

000000000000824a         mov        rax, qword [r15+0x30]
000000000000824e         mov        rdx, qword [r15]
0000000000008251         mov        r13, rbp
0000000000008254         shl        r13, 0x4
0000000000008258         mov        qword [rax+rbx+8], 0xffffffffffffffff
0000000000008261         lea        rax, qword [rdx+r13]
0000000000008265         mov        r8d, dword [rax+8]
0000000000008269         test       r8d, 0x3ff00
0000000000008270         jne        loc_8410

                     loc_8276:
0000000000008276         test       byte [rax+8], 0x8                           ; CODE XREF=calc_eclosure_iter+589, calc_eclosure_iter+637
000000000000827a         je         loc_8340

0000000000008280         mov        rsi, qword [r15+0x28]
0000000000008284         lea        rax, qword [rsi+rbx]
0000000000008288         cmp        qword [rax+8], 0x0
000000000000828d         jle        loc_8340

0000000000008293         lea        rdx, qword [rsp+0x98+var_78]
0000000000008298         mov        byte [rsp+0x98+var_7D], 0x0
000000000000829d         xor        r14d, r14d
00000000000082a0         lea        r12, qword [rsp+0x98+var_58]
00000000000082a5         mov        qword [rsp+0x98+var_90], rdx
00000000000082aa         jmp        loc_82c6
00000000000082ac         align      16

                     loc_82b0:
00000000000082b0         mov        rsi, qword [r15+0x28]                       ; CODE XREF=calc_eclosure_iter+325, calc_eclosure_iter+342
00000000000082b4         add        r14, 0x1
00000000000082b8         lea        rax, qword [rsi+rbx]
00000000000082bc         cmp        qword [rax+8], r14
00000000000082c0         jle        loc_83c7

                     loc_82c6:
00000000000082c6         mov        rax, qword [rax+0x10]                       ; CODE XREF=calc_eclosure_iter+202, calc_eclosure_iter+481
00000000000082ca         mov        rdx, qword [rax+r14*8]
00000000000082ce         mov        rax, qword [r15+0x30]
00000000000082d2         lea        r8, qword [rdx+rdx*2]
00000000000082d6         lea        r13, qword [r8*8]
00000000000082de         add        rax, r13
00000000000082e1         mov        rcx, qword [rax+8]
00000000000082e5         cmp        rcx, 0xffffffffffffffff
00000000000082e9         je         loc_83b0

00000000000082ef         test       rcx, rcx
00000000000082f2         je         loc_8468

00000000000082f8         movdqu     xmm0, xmmword [rax]
00000000000082fc         movaps     xmmword [rsp+0x98+var_58], xmm0
0000000000008301         mov        rax, qword [rax+0x10]
0000000000008305         mov        qword [rsp+0x98+var_48], rax

                     loc_830a:
000000000000830a         mov        rdi, qword [rsp+0x98+var_90]                ; CODE XREF=calc_eclosure_iter+661
000000000000830f         mov        rsi, r12
0000000000008312         call       re_node_set_merge                           ; re_node_set_merge
0000000000008317         test       eax, eax
0000000000008319         jne        loc_8386

000000000000831b         mov        rax, qword [r15+0x30]
000000000000831f         cmp        qword [rax+r13+8], 0x0
0000000000008325         jne        loc_82b0

0000000000008327         mov        rdi, qword [rsp+0x98+var_48]                ; argument "__ptr" for method j_free
000000000000832c         call       j_free                                      ; free
0000000000008331         mov        byte [rsp+0x98+var_7D], 0x1
0000000000008336         jmp        loc_82b0
000000000000833b         align      64

                     loc_8340:
0000000000008340         lea        rdi, qword [rsp+0x98+var_78]                ; CODE XREF=calc_eclosure_iter+154, calc_eclosure_iter+173, calc_eclosure_iter+566
0000000000008345         mov        rsi, rbp
0000000000008348         call       re_node_set_insert                          ; re_node_set_insert
000000000000834d         test       al, al
000000000000834f         je         loc_8480

0000000000008355         mov        rax, qword [r15+0x30]

                     loc_8359:
0000000000008359         movdqa     xmm0, xmmword [rsp+0x98+var_78]             ; CODE XREF=calc_eclosure_iter+521, calc_eclosure_iter+532
000000000000835f         movups     xmmword [rax+rbx], xmm0
0000000000008363         mov        rdx, qword [rsp+0x98+var_68]
0000000000008368         mov        qword [rax+rbx+0x10], rdx

                     loc_836d:
000000000000836d         mov        rbx, qword [rsp+0x98+var_88]                ; CODE XREF=calc_eclosure_iter+546
0000000000008372         mov        rax, qword [rsp+0x98+var_68]
0000000000008377         movdqa     xmm0, xmmword [rsp+0x98+var_78]
000000000000837d         movaps     xmmword [rbx], xmm0
0000000000008380         mov        qword [rbx+0x10], rax
0000000000008384         xor        eax, eax

                     loc_8386:
0000000000008386         mov        rsi, qword [rsp+0x98+var_40]                ; CODE XREF=calc_eclosure_iter+313, calc_eclosure_iter+625, calc_eclosure_iter+667, calc_eclosure_iter+677
000000000000838b         xor        rsi, qword [fs:0x28]
0000000000008394         jne        loc_848a

000000000000839a         add        rsp, 0x68
000000000000839e         pop        rbx
000000000000839f         pop        rbp
00000000000083a0         pop        r12
00000000000083a2         pop        r13
00000000000083a4         pop        r14
00000000000083a6         pop        r15
00000000000083a8         ret
                        ; endp
00000000000083a9         align      16

                     loc_83b0:
00000000000083b0         lea        rax, qword [rsi+rbx]                        ; CODE XREF=calc_eclosure_iter+265
00000000000083b4         add        r14, 0x1
00000000000083b8         mov        byte [rsp+0x98+var_7D], 0x1
00000000000083bd         cmp        qword [rax+8], r14
00000000000083c1         jg         loc_82c6

                     loc_83c7:
00000000000083c7         lea        rdi, qword [rsp+0x98+var_78]                ; CODE XREF=calc_eclosure_iter+224
00000000000083cc         mov        rsi, rbp
00000000000083cf         call       re_node_set_insert                          ; re_node_set_insert
00000000000083d4         test       al, al
00000000000083d6         je         loc_8480

00000000000083dc         cmp        byte [rsp+0x98+var_7C], 0x1
00000000000083e1         mov        rax, qword [r15+0x30]
00000000000083e5         lea        rdx, qword [rax+rbx]
00000000000083e9         je         loc_8359

00000000000083ef         cmp        byte [rsp+0x98+var_7D], 0x0
00000000000083f4         je         loc_8359

00000000000083fa         mov        qword [rdx+8], 0x0
0000000000008402         jmp        loc_836d
0000000000008407         align      16

                     loc_8410:
0000000000008410         cmp        qword [r12+8], 0x0                          ; CODE XREF=calc_eclosure_iter+144
0000000000008416         je         loc_8340

000000000000841c         mov        rcx, qword [r12+0x10]
0000000000008421         mov        rcx, qword [rcx]
0000000000008424         shl        rcx, 0x4
0000000000008428         test       byte [rdx+rcx+0xa], 0x4
000000000000842d         jne        loc_8276

0000000000008433         shr        r8d, 0x8
0000000000008437         mov        rcx, rbp
000000000000843a         mov        rdx, rbp
000000000000843d         and        r8d, 0x3ff
0000000000008444         mov        rsi, rbp
0000000000008447         mov        rdi, r15
000000000000844a         call       duplicate_node_closure                      ; duplicate_node_closure
000000000000844f         test       eax, eax
0000000000008451         jne        loc_8386

0000000000008457         mov        rax, qword [r15]
000000000000845a         add        rax, r13
000000000000845d         jmp        loc_8276
0000000000008462         align      8

                     loc_8468:
0000000000008468         mov        rsi, r15                                    ; CODE XREF=calc_eclosure_iter+274
000000000000846b         mov        rdi, r12
000000000000846e         call       calc_eclosure_iter                          ; calc_eclosure_iter
0000000000008473         test       eax, eax
0000000000008475         je         loc_830a

000000000000847b         jmp        loc_8386

                     loc_8480:
0000000000008480         mov        eax, 0xc                                    ; CODE XREF=calc_eclosure_iter+100, calc_eclosure_iter+367, calc_eclosure_iter+502
0000000000008485         jmp        loc_8386

                     loc_848a:
000000000000848a         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=calc_eclosure_iter+436
                        ; endp
000000000000848f         align      16                                          ; End of unwind block (FDE at 0x178cc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_5C: int32_t, -92


                     check_arrival_expand_ecl:
0000000000008490         push       r15                                         ; Begin of unwind block (FDE at 0x1791c), CODE XREF=expand_bkref_cache+680, check_arrival+884, check_arrival+1283
0000000000008492         push       r14
0000000000008494         mov        r14, rdi
0000000000008497         push       r13
0000000000008499         push       r12
000000000000849b         mov        r15, rsi
000000000000849e         push       rbp
000000000000849f         push       rbx
00000000000084a0         mov        rbp, rdx
00000000000084a3         mov        ebx, ecx
00000000000084a5         sub        rsp, 0x38
00000000000084a9         mov        r12, qword [rsi+8]
00000000000084ad         mov        rax, qword [fs:0x28]
00000000000084b6         mov        qword [rsp+0x68+var_40], rax
00000000000084bb         xor        eax, eax
00000000000084bd         mov        qword [rsp+0x68+var_50], 0x0
00000000000084c6         lea        rdi, qword [r12*8]                          ; argument "__size" for method j_malloc
00000000000084ce         mov        qword [rsp+0x68+var_58], r12
00000000000084d3         call       j_malloc                                    ; malloc
00000000000084d8         test       rax, rax
00000000000084db         mov        qword [rsp+0x68+var_48], rax
00000000000084e0         je         loc_85dd

00000000000084e6         test       r12, r12
00000000000084e9         jle        loc_857b

00000000000084ef         lea        r12, qword [rsp+0x68+var_58]
00000000000084f4         xor        r13d, r13d
00000000000084f7         nop        word [rax+rax]

                     loc_8500:
0000000000008500         mov        rax, qword [r15+0x10]                       ; CODE XREF=check_arrival_expand_ecl+233
0000000000008504         mov        rdx, qword [rax+r13*8]
0000000000008508         mov        rax, qword [r14+0x30]
000000000000850c         lea        rcx, qword [rdx+rdx*2]
0000000000008510         lea        rsi, qword [rax+rcx*8]
0000000000008514         mov        r8, qword [rsi+8]
0000000000008518         test       r8, r8
000000000000851b         jle        loc_85a0

0000000000008521         mov        r10, qword [rsi+0x10]
0000000000008525         mov        r9, qword [r14]
0000000000008528         xor        ecx, ecx
000000000000852a         jmp        loc_8539
000000000000852c         align      16

                     loc_8530:
0000000000008530         add        rcx, 0x1                                    ; CODE XREF=check_arrival_expand_ecl+191, check_arrival_expand_ecl+196
0000000000008534         cmp        r8, rcx
0000000000008537         je         loc_85a0

                     loc_8539:
0000000000008539         mov        rdi, qword [r10+rcx*8]                      ; CODE XREF=check_arrival_expand_ecl+154
000000000000853d         mov        rax, rdi
0000000000008540         shl        rax, 0x4
0000000000008544         add        rax, r9
0000000000008547         movzx      r11d, byte [rax+8]
000000000000854c         cmp        ebx, r11d
000000000000854f         jne        loc_8530

0000000000008551         cmp        rbp, qword [rax]
0000000000008554         jne        loc_8530

0000000000008556         cmp        rdi, 0xffffffffffffffff
000000000000855a         je         loc_85a0

000000000000855c         mov        r8d, ebx
000000000000855f         mov        rcx, rbp
0000000000008562         mov        rsi, r12
0000000000008565         mov        rdi, r14
0000000000008568         call       check_arrival_expand_ecl_sub                ; check_arrival_expand_ecl_sub
000000000000856d         test       eax, eax
000000000000856f         jne        loc_85ac

                     loc_8571:
0000000000008571         add        r13, 0x1                                    ; CODE XREF=check_arrival_expand_ecl+282
0000000000008575         cmp        qword [r15+8], r13
0000000000008579         jg         loc_8500

                     loc_857b:
000000000000857b         mov        rdi, qword [r15+0x10]                       ; argument "__ptr" for method j_free, CODE XREF=check_arrival_expand_ecl+89
000000000000857f         call       j_free                                      ; free
0000000000008584         mov        rax, qword [rsp+0x68+var_48]
0000000000008589         movdqa     xmm0, xmmword [rsp+0x68+var_58]
000000000000858f         mov        qword [r15+0x10], rax
0000000000008593         xor        eax, eax
0000000000008595         movaps     xmmword [r15], xmm0
0000000000008599         jmp        loc_85be
000000000000859b         align      32

                     loc_85a0:
00000000000085a0         mov        rdi, r12                                    ; CODE XREF=check_arrival_expand_ecl+139, check_arrival_expand_ecl+167, check_arrival_expand_ecl+202
00000000000085a3         call       re_node_set_merge                           ; re_node_set_merge
00000000000085a8         test       eax, eax
00000000000085aa         je         loc_8571

                     loc_85ac:
00000000000085ac         mov        rdi, qword [rsp+0x68+var_48]                ; argument "__ptr" for method j_free, CODE XREF=check_arrival_expand_ecl+223
00000000000085b1         mov        dword [rsp+0x68+var_5C], eax
00000000000085b5         call       j_free                                      ; free
00000000000085ba         mov        eax, dword [rsp+0x68+var_5C]

                     loc_85be:
00000000000085be         mov        rdx, qword [rsp+0x68+var_40]                ; CODE XREF=check_arrival_expand_ecl+265, check_arrival_expand_ecl+338
00000000000085c3         xor        rdx, qword [fs:0x28]
00000000000085cc         jne        loc_85e4

00000000000085ce         add        rsp, 0x38
00000000000085d2         pop        rbx
00000000000085d3         pop        rbp
00000000000085d4         pop        r12
00000000000085d6         pop        r13
00000000000085d8         pop        r14
00000000000085da         pop        r15
00000000000085dc         ret
                        ; endp

                     loc_85dd:
00000000000085dd         mov        eax, 0xc                                    ; CODE XREF=check_arrival_expand_ecl+80
00000000000085e2         jmp        loc_85be

                     loc_85e4:
00000000000085e4         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=check_arrival_expand_ecl+316
                        ; endp
00000000000085e9         align      16                                          ; End of unwind block (FDE at 0x1791c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_node_set_add_intersect:
00000000000085f0         mov        r9, qword [rsi+8]                           ; Begin of unwind block (FDE at 0x17968), CODE XREF=sub_epsilon_src_nodes+156, update_cur_sifted_state+263
00000000000085f4         xor        eax, eax
00000000000085f6         test       r9, r9
00000000000085f9         je         loc_86b8

00000000000085ff         mov        r11, qword [rdx+8]
0000000000008603         test       r11, r11
0000000000008606         je         loc_86b8

000000000000860c         push       r13
000000000000860e         push       r12
0000000000008610         lea        rax, qword [r9+r11]
0000000000008614         push       rbp
0000000000008615         push       rbx
0000000000008616         mov        r12, rdx
0000000000008619         mov        rbx, rdi
000000000000861c         mov        rbp, rsi
000000000000861f         sub        rsp, 0x8
0000000000008623         mov        rcx, qword [rdi+8]
0000000000008627         mov        r13, qword [rdi]
000000000000862a         mov        rdi, qword [rdi+0x10]
000000000000862e         lea        rdx, qword [rax+rcx]
0000000000008632         cmp        rdx, r13
0000000000008635         jg         loc_8760

                     loc_863b:
000000000000863b         lea        rsi, qword [rcx+r9]                         ; CODE XREF=re_node_set_add_intersect+412
000000000000863f         mov        r13, qword [rbp+0x10]
0000000000008643         mov        rdx, qword [r12+0x10]
0000000000008648         sub        r9, 0x1
000000000000864c         sub        rcx, 0x1
0000000000008650         add        rsi, r11
0000000000008653         sub        r11, 0x1
0000000000008657         mov        rax, qword [r13+r9*8]
000000000000865c         mov        r8, qword [rdx+r11*8]

                     loc_8660:
0000000000008660         cmp        rax, r8                                     ; CODE XREF=re_node_set_add_intersect+219
0000000000008663         je         loc_8676

                     loc_8665:
0000000000008665         jge        loc_86c0                                    ; CODE XREF=re_node_set_add_intersect+132

0000000000008667         sub        r11, 0x1
000000000000866b         js         loc_86d0

                     loc_866d:
000000000000866d         mov        r8, qword [rdx+r11*8]                       ; CODE XREF=re_node_set_add_intersect+193
0000000000008671         cmp        rax, r8
0000000000008674         jne        loc_8665

                     loc_8676:
0000000000008676         test       rcx, rcx                                    ; CODE XREF=re_node_set_add_intersect+115
0000000000008679         jns        loc_868a

000000000000867b         jmp        loc_8698
000000000000867d         align      128

                     loc_8680:
0000000000008680         sub        rcx, 0x1                                    ; CODE XREF=re_node_set_add_intersect+161
0000000000008684         cmp        rcx, 0xffffffffffffffff
0000000000008688         je         loc_8698

                     loc_868a:
000000000000868a         mov        r10, qword [rdi+rcx*8]                      ; CODE XREF=re_node_set_add_intersect+137
000000000000868e         cmp        r10, r8
0000000000008691         jg         loc_8680

0000000000008693         cmp        r10, r8
0000000000008696         je         loc_86a0

                     loc_8698:
0000000000008698         sub        rsi, 0x1                                    ; CODE XREF=re_node_set_add_intersect+139, re_node_set_add_intersect+152
000000000000869c         mov        qword [rdi+rsi*8], r8

                     loc_86a0:
00000000000086a0         sub        r9, 0x1                                     ; CODE XREF=re_node_set_add_intersect+166
00000000000086a4         js         loc_86d0

00000000000086a6         sub        r11, 0x1
00000000000086aa         js         loc_86d0

00000000000086ac         mov        rax, qword [r13+r9*8]
00000000000086b1         jmp        loc_866d
00000000000086b3         align      8

                     loc_86b8:
00000000000086b8         ret                                                    ; CODE XREF=re_node_set_add_intersect+9, re_node_set_add_intersect+22
                        ; endp
00000000000086ba         align      64

                     loc_86c0:
00000000000086c0         sub        r9, 0x1                                     ; CODE XREF=loc_8665
00000000000086c4         js         loc_86d0

00000000000086c6         mov        rax, qword [r13+r9*8]
00000000000086cb         jmp        loc_8660
00000000000086cd         align      16

                     loc_86d0:
00000000000086d0         mov        rcx, qword [rbx+8]                          ; CODE XREF=re_node_set_add_intersect+123, re_node_set_add_intersect+180, re_node_set_add_intersect+186, re_node_set_add_intersect+212
00000000000086d4         mov        rdx, qword [rbp+8]
00000000000086d8         add        rdx, rcx
00000000000086db         add        rdx, qword [r12+8]
00000000000086e0         lea        rax, qword [rcx-1]
00000000000086e4         lea        r9, qword [rdx-1]
00000000000086e8         sub        rdx, rsi
00000000000086eb         add        rcx, rdx
00000000000086ee         test       rdx, rdx
00000000000086f1         mov        qword [rbx+8], rcx
00000000000086f5         jle        loc_873d

00000000000086f7         test       rax, rax
00000000000086fa         js         loc_873d

00000000000086fc         nop        dword [rax]

                     loc_8700:
0000000000008700         mov        r8, qword [rdi+r9*8]                        ; CODE XREF=re_node_set_add_intersect+304, re_node_set_add_intersect+331
0000000000008704         mov        rcx, qword [rdi+rax*8]
0000000000008708         lea        r10, qword [rax+rdx]
000000000000870c         lea        r10, qword [rdi+r10*8]
0000000000008710         cmp        r8, rcx
0000000000008713         jle        loc_8730

0000000000008715         sub        r9, 0x1
0000000000008719         sub        rdx, 0x1
000000000000871d         mov        qword [r10], r8
0000000000008720         jne        loc_8700

0000000000008722         xor        edx, edx
0000000000008724         jmp        loc_8741
0000000000008726         align      16

                     loc_8730:
0000000000008730         sub        rax, 0x1                                    ; CODE XREF=re_node_set_add_intersect+291
0000000000008734         mov        qword [r10], rcx
0000000000008737         cmp        rax, 0xffffffffffffffff
000000000000873b         jne        loc_8700

                     loc_873d:
000000000000873d         shl        rdx, 0x3                                    ; CODE XREF=re_node_set_add_intersect+261, re_node_set_add_intersect+266

                     loc_8741:
0000000000008741         lea        rsi, qword [rdi+rsi*8]                      ; argument "__src" for method j_memcpy, CODE XREF=re_node_set_add_intersect+308
0000000000008745         call       j_memcpy                                    ; memcpy
000000000000874a         xor        eax, eax

                     loc_874c:
000000000000874c         add        rsp, 0x8                                    ; CODE XREF=re_node_set_add_intersect+422
0000000000008750         pop        rbx
0000000000008751         pop        rbp
0000000000008752         pop        r12
0000000000008754         pop        r13
0000000000008756         ret
                        ; endp
0000000000008757         align      32

                     loc_8760:
0000000000008760         add        r13, rax                                    ; CODE XREF=re_node_set_add_intersect+69
0000000000008763         lea        rsi, qword [r13*8]                          ; argument "__size" for method j_realloc
000000000000876b         call       j_realloc                                   ; realloc
0000000000008770         test       rax, rax
0000000000008773         mov        rdi, rax
0000000000008776         je         loc_8791

0000000000008778         mov        qword [rbx+0x10], rax
000000000000877c         mov        qword [rbx], r13
000000000000877f         mov        rcx, qword [rbx+8]
0000000000008783         mov        r9, qword [rbp+8]
0000000000008787         mov        r11, qword [r12+8]
000000000000878c         jmp        loc_863b

                     loc_8791:
0000000000008791         mov        eax, 0xc                                    ; CODE XREF=re_node_set_add_intersect+390
0000000000008796         jmp        loc_874c
0000000000008798         align      32                                          ; End of unwind block (FDE at 0x17968)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40


                     create_token_tree.isra.16:
00000000000087a0         push       rbx                                         ; Begin of unwind block (FDE at 0x179b8), CODE XREF=duplicate_tree+62, lower_subexp+130, lower_subexp+156, lower_subexp+215, lower_subexp+241, lower_subexp+279, lower_subexp+463, lower_subexp+489, lower_subexp+531, build_charclass_op+350, build_charclass_op+410
00000000000087a1         mov        rbx, rdi
00000000000087a4         sub        rsp, 0x20
00000000000087a8         mov        eax, dword [rsi]
00000000000087aa         cmp        eax, 0xf
00000000000087ad         je         loc_8828

00000000000087af         movsxd     r9, eax
00000000000087b2         lea        r10d, dword [rax+1]
00000000000087b6         mov        rdi, qword [rdi]
00000000000087b9         mov        rax, r9
00000000000087bc         shl        rax, 0x6
00000000000087c0         add        rax, 0x8

                     loc_87c4:
00000000000087c4         shl        r9, 0x6                                     ; CODE XREF=create_token_tree.isra.16+215
00000000000087c8         mov        dword [rsi], r10d
00000000000087cb         add        rax, rdi
00000000000087ce         lea        rsi, qword [rdi+r9]
00000000000087d2         mov        qword [rsi+8], 0x0
00000000000087da         mov        qword [rsi+0x10], rdx
00000000000087de         lea        rdi, qword [rsi+0x20]
00000000000087e2         mov        qword [rsi+0x18], rcx
00000000000087e6         movdqu     xmm0, xmmword [r8]
00000000000087eb         movups     xmmword [rsi+0x30], xmm0
00000000000087ef         and        byte [rdi+0x1a], 0xf3
00000000000087f3         test       rdx, rdx
00000000000087f6         mov        qword [rsi+0x20], 0x0
00000000000087fe         mov        qword [rsi+0x28], 0x0
0000000000008806         mov        qword [rsi+0x40], 0xffffffffffffffff
000000000000880e         je         loc_8813

0000000000008810         mov        qword [rdx], rax

                     loc_8813:
0000000000008813         test       rcx, rcx                                    ; CODE XREF=create_token_tree.isra.16+110
0000000000008816         je         loc_881b

0000000000008818         mov        qword [rcx], rax

                     loc_881b:
000000000000881b         add        rsp, 0x20                                   ; CODE XREF=create_token_tree.isra.16+118, create_token_tree.isra.16+222
000000000000881f         pop        rbx
0000000000008820         ret
                        ; endp
0000000000008821         align      8

                     loc_8828:
0000000000008828         mov        edi, 0x3c8                                  ; argument "__size" for method j_malloc, CODE XREF=create_token_tree.isra.16+13
000000000000882d         mov        qword [rsp+0x28+var_10], r8
0000000000008832         mov        qword [rsp+0x28+var_18], rcx
0000000000008837         mov        qword [rsp+0x28+var_20], rdx
000000000000883c         mov        qword [rsp+0x28+var_28], rsi
0000000000008840         call       j_malloc                                    ; malloc
0000000000008845         test       rax, rax
0000000000008848         mov        rdi, rax
000000000000884b         je         loc_887c

000000000000884d         mov        rax, qword [rbx]
0000000000008850         mov        r10d, 0x1
0000000000008856         mov        qword [rbx], rdi
0000000000008859         xor        r9d, r9d
000000000000885c         mov        r8, qword [rsp+0x28+var_10]
0000000000008861         mov        rcx, qword [rsp+0x28+var_18]
0000000000008866         mov        rdx, qword [rsp+0x28+var_20]
000000000000886b         mov        rsi, qword [rsp+0x28+var_28]
000000000000886f         mov        qword [rdi], rax
0000000000008872         mov        eax, 0x8
0000000000008877         jmp        loc_87c4

                     loc_887c:
000000000000887c         xor        eax, eax                                    ; CODE XREF=create_token_tree.isra.16+171
000000000000887e         jmp        loc_881b


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_38: int64_t, -56


                     duplicate_tree:
0000000000008880         push       r14                                         ; End of unwind block (FDE at 0x179b8), Begin of unwind block (FDE at 0x179dc), CODE XREF=sub_10f30+540, sub_10f30+888, sub_10f30+982
0000000000008882         push       r13
0000000000008884         lea        r13, qword [rsi+0x70]
0000000000008888         push       r12
000000000000888a         push       rbp
000000000000888b         lea        r12, qword [rsi+0x80]
0000000000008892         push       rbx
0000000000008893         mov        rbx, rdi
0000000000008896         sub        rsp, 0x10
000000000000889a         mov        rbp, qword [rdi]
000000000000889d         mov        rax, qword [fs:0x28]
00000000000088a6         mov        qword [rsp+0x38+var_30], rax
00000000000088ab         xor        eax, eax
00000000000088ad         mov        r14, rsp

                     loc_88b0:
00000000000088b0         lea        r8, qword [rbx+0x28]                        ; CODE XREF=duplicate_tree+101, duplicate_tree+199
00000000000088b4         xor        ecx, ecx
00000000000088b6         xor        edx, edx
00000000000088b8         mov        rsi, r12
00000000000088bb         mov        rdi, r13
00000000000088be         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
00000000000088c3         test       rax, rax
00000000000088c6         mov        qword [r14], rax
00000000000088c9         je         loc_891c

00000000000088cb         mov        qword [rax], rbp
00000000000088ce         mov        rbp, qword [r14]
00000000000088d1         or         byte [rbp+0x32], 0x4
00000000000088d5         mov        rax, qword [rbx+8]
00000000000088d9         test       rax, rax
00000000000088dc         je         loc_88f0

00000000000088de         lea        r14, qword [rbp+8]
00000000000088e2         mov        rbx, rax
00000000000088e5         jmp        loc_88b0
00000000000088e7         align      16

                     loc_88f0:
00000000000088f0         xor        edx, edx                                    ; CODE XREF=duplicate_tree+92
00000000000088f2         jmp        loc_88fb
00000000000088f4         align      8

                     loc_88f8:
00000000000088f8         mov        rbx, rax                                    ; CODE XREF=duplicate_tree+150

                     loc_88fb:
00000000000088fb         mov        rax, qword [rbx+0x10]                       ; CODE XREF=duplicate_tree+114
00000000000088ff         test       rax, rax
0000000000008902         je         loc_8909

0000000000008904         cmp        rax, rdx
0000000000008907         jne        loc_8940

                     loc_8909:
0000000000008909         mov        rax, qword [rbx]                            ; CODE XREF=duplicate_tree+130
000000000000890c         mov        rbp, qword [rbp]
0000000000008910         mov        rdx, rbx
0000000000008913         test       rax, rax
0000000000008916         jne        loc_88f8

0000000000008918         mov        rax, qword [rsp+0x38+var_38]

                     loc_891c:
000000000000891c         mov        rcx, qword [rsp+0x38+var_30]                ; CODE XREF=duplicate_tree+73
0000000000008921         xor        rcx, qword [fs:0x28]
000000000000892a         jne        loc_894c

000000000000892c         add        rsp, 0x10
0000000000008930         pop        rbx
0000000000008931         pop        rbp
0000000000008932         pop        r12
0000000000008934         pop        r13
0000000000008936         pop        r14
0000000000008938         ret
                        ; endp
0000000000008939         align      64

                     loc_8940:
0000000000008940         lea        r14, qword [rbp+0x10]                       ; CODE XREF=duplicate_tree+135
0000000000008944         mov        rbx, rax
0000000000008947         jmp        loc_88b0

                     loc_894c:
000000000000894c         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=duplicate_tree+170
                        ; endp
0000000000008951         align      32                                          ; End of unwind block (FDE at 0x179dc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_50: int8_t, -80
        ;    var_58: int8_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112


                     lower_subexp:
0000000000008960         push       r15                                         ; Begin of unwind block (FDE at 0x17a20), CODE XREF=lower_subexps+104, lower_subexps+136
0000000000008962         push       r14
0000000000008964         push       r13
0000000000008966         push       r12
0000000000008968         mov        r13, rdx
000000000000896b         push       rbp
000000000000896c         push       rbx
000000000000896d         sub        rsp, 0x48
0000000000008971         mov        rbx, qword [rsi]
0000000000008974         mov        rbp, qword [rdx+8]
0000000000008978         mov        rax, qword [fs:0x28]
0000000000008981         mov        qword [rsp+0x78+var_40], rax
0000000000008986         xor        eax, eax
0000000000008988         test       byte [rsi+0x38], 0x10
000000000000898c         mov        qword [rsp+0x78+var_60], rdi
0000000000008991         je         loc_8b08

0000000000008997         test       rbp, rbp
000000000000899a         je         loc_8a10

000000000000899c         mov        rax, qword [rdx+0x28]
00000000000089a0         cmp        rax, 0x3f
00000000000089a4         jg         loc_8add

00000000000089aa         mov        rdx, qword [rbx+0xa0]
00000000000089b1         bt         rdx, rax
00000000000089b5         jae        loc_8add

00000000000089bb         lea        rax, qword [rbx+0x70]
00000000000089bf         lea        r14, qword [rsp+0x78+var_58]
00000000000089c4         sub        rbx, 0xffffffffffffff80
00000000000089c8         xor        ecx, ecx
00000000000089ca         xor        edx, edx
00000000000089cc         mov        rsi, rbx
00000000000089cf         mov        r15, rax
00000000000089d2         mov        r8, r14
00000000000089d5         mov        rdi, rax
00000000000089d8         mov        byte [rsp+0x78+var_50], 0x8
00000000000089dd         mov        qword [rsp+0x78+var_70], rax
00000000000089e2         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
00000000000089e7         mov        rdi, r15
00000000000089ea         mov        r8, r14
00000000000089ed         xor        ecx, ecx
00000000000089ef         xor        edx, edx
00000000000089f1         mov        rsi, rbx
00000000000089f4         mov        r12, rax
00000000000089f7         mov        byte [rsp+0x78+var_50], 0x9
00000000000089fc         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000008a01         mov        r15, rax
0000000000008a04         jmp        loc_8b5d
0000000000008a09         align      16

                     loc_8a10:
0000000000008a10         lea        rax, qword [rbx+0x70]                       ; CODE XREF=lower_subexp+58
0000000000008a14         lea        r14, qword [rsp+0x78+var_58]
0000000000008a19         sub        rbx, 0xffffffffffffff80
0000000000008a1d         xor        ecx, ecx
0000000000008a1f         xor        edx, edx
0000000000008a21         mov        rsi, rbx
0000000000008a24         mov        r15, rax
0000000000008a27         mov        r8, r14
0000000000008a2a         mov        rdi, rax
0000000000008a2d         mov        byte [rsp+0x78+var_50], 0x8
0000000000008a32         mov        qword [rsp+0x78+var_70], rax
0000000000008a37         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000008a3c         mov        rdi, r15
0000000000008a3f         mov        r8, r14
0000000000008a42         xor        ecx, ecx
0000000000008a44         xor        edx, edx
0000000000008a46         mov        rsi, rbx
0000000000008a49         mov        r12, rax
0000000000008a4c         mov        byte [rsp+0x78+var_50], 0x9
0000000000008a51         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000008a56         mov        r11, rax
0000000000008a59         mov        r15, rax

                     loc_8a5c:
0000000000008a5c         mov        rdi, qword [rsp+0x78+var_70]                ; CODE XREF=lower_subexp+503, lower_subexp+539
0000000000008a61         mov        r8, r14
0000000000008a64         mov        rcx, r11
0000000000008a67         mov        rdx, r12
0000000000008a6a         mov        rsi, rbx
0000000000008a6d         mov        byte [rsp+0x78+var_50], 0x10
0000000000008a72         mov        qword [rsp+0x78+var_68], r11
0000000000008a77         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000008a7c         test       rax, rax
0000000000008a7f         mov        rbp, rax
0000000000008a82         je         loc_8b80

0000000000008a88         mov        r11, qword [rsp+0x78+var_68]
0000000000008a8d         test       r11, r11
0000000000008a90         je         loc_8b80

0000000000008a96         test       r12, r12
0000000000008a99         je         loc_8b80

0000000000008a9f         test       r15, r15
0000000000008aa2         je         loc_8b80

0000000000008aa8         mov        rax, qword [r13+0x28]
0000000000008aac         mov        qword [r15+0x28], rax
0000000000008ab0         mov        qword [r12+0x28], rax
0000000000008ab5         movzx      eax, byte [r13+0x32]
0000000000008aba         movzx      edx, byte [r15+0x32]
0000000000008abf         and        eax, 0x8
0000000000008ac2         and        edx, 0xfffffff7
0000000000008ac5         mov        ecx, eax
0000000000008ac7         or         edx, ecx
0000000000008ac9         mov        byte [r15+0x32], dl
0000000000008acd         movzx      eax, byte [r12+0x32]
0000000000008ad3         and        eax, 0xfffffff7
0000000000008ad6         or         eax, ecx
0000000000008ad8         mov        byte [r12+0x32], al

                     loc_8add:
0000000000008add         mov        rdi, qword [rsp+0x78+var_40]                ; CODE XREF=lower_subexp+68, lower_subexp+85, lower_subexp+557
0000000000008ae2         xor        rdi, qword [fs:0x28]
0000000000008aeb         mov        rax, rbp
0000000000008aee         jne        loc_8b92

0000000000008af4         add        rsp, 0x48
0000000000008af8         pop        rbx
0000000000008af9         pop        rbp
0000000000008afa         pop        r12
0000000000008afc         pop        r13
0000000000008afe         pop        r14
0000000000008b00         pop        r15
0000000000008b02         ret
                        ; endp
0000000000008b03         align      8

                     loc_8b08:
0000000000008b08         lea        rax, qword [rbx+0x70]                       ; CODE XREF=lower_subexp+49
0000000000008b0c         lea        r14, qword [rsp+0x78+var_58]
0000000000008b11         sub        rbx, 0xffffffffffffff80
0000000000008b15         xor        ecx, ecx
0000000000008b17         xor        edx, edx
0000000000008b19         mov        rsi, rbx
0000000000008b1c         mov        r15, rax
0000000000008b1f         mov        r8, r14
0000000000008b22         mov        rdi, rax
0000000000008b25         mov        byte [rsp+0x78+var_50], 0x8
0000000000008b2a         mov        qword [rsp+0x78+var_70], rax
0000000000008b2f         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000008b34         xor        ecx, ecx
0000000000008b36         xor        edx, edx
0000000000008b38         mov        rdi, r15
0000000000008b3b         mov        r8, r14
0000000000008b3e         mov        rsi, rbx
0000000000008b41         mov        r12, rax
0000000000008b44         mov        byte [rsp+0x78+var_50], 0x9
0000000000008b49         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000008b4e         test       rbp, rbp
0000000000008b51         mov        r15, rax
0000000000008b54         mov        r11, rax
0000000000008b57         je         loc_8a5c

                     loc_8b5d:
0000000000008b5d         mov        rdi, qword [rsp+0x78+var_70]                ; CODE XREF=lower_subexp+164
0000000000008b62         mov        r8, r14
0000000000008b65         mov        rcx, r15
0000000000008b68         mov        rdx, rbp
0000000000008b6b         mov        rsi, rbx
0000000000008b6e         mov        byte [rsp+0x78+var_50], 0x10
0000000000008b73         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000008b78         mov        r11, rax
0000000000008b7b         jmp        loc_8a5c

                     loc_8b80:
0000000000008b80         mov        rax, qword [rsp+0x78+var_60]                ; CODE XREF=lower_subexp+290, lower_subexp+304, lower_subexp+313, lower_subexp+322
0000000000008b85         xor        ebp, ebp
0000000000008b87         mov        dword [rax], 0xc
0000000000008b8d         jmp        loc_8add

                     loc_8b92:
0000000000008b92         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=lower_subexp+398
                        ; endp
0000000000008b97         align      32                                          ; End of unwind block (FDE at 0x17a20)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_20: int64_t, -32
        ;    var_24: int32_t, -36


                     lower_subexps:
0000000000008ba0         push       rbp                                         ; Begin of unwind block (FDE at 0x17a70), DATA XREF=re_compile_internal+1638
0000000000008ba1         push       rbx
0000000000008ba2         mov        rbp, rdi
0000000000008ba5         mov        rbx, rsi
0000000000008ba8         sub        rsp, 0x18
0000000000008bac         mov        rdx, qword [rsi+8]
0000000000008bb0         mov        rax, qword [fs:0x28]
0000000000008bb9         mov        qword [rsp+0x28+var_20], rax
0000000000008bbe         xor        eax, eax
0000000000008bc0         mov        dword [rsp+0x28+var_24], 0x0
0000000000008bc8         test       rdx, rdx
0000000000008bcb         je         loc_8bd3

0000000000008bcd         cmp        byte [rdx+0x30], 0x11
0000000000008bd1         je         loc_8c20

                     loc_8bd3:
0000000000008bd3         mov        rdx, qword [rbx+0x10]                       ; CODE XREF=lower_subexps+43, lower_subexps+148, lower_subexps+153
0000000000008bd7         test       rdx, rdx
0000000000008bda         je         loc_8be2

0000000000008bdc         cmp        byte [rdx+0x30], 0x11
0000000000008be0         je         loc_8c00

                     loc_8be2:
0000000000008be2         mov        rcx, qword [rsp+0x28+var_20]                ; CODE XREF=lower_subexps+58, lower_subexps+116, lower_subexps+121
0000000000008be7         xor        rcx, qword [fs:0x28]
0000000000008bf0         mov        eax, dword [rsp+0x28+var_24]
0000000000008bf4         jne        loc_8c3b

0000000000008bf6         add        rsp, 0x18
0000000000008bfa         pop        rbx
0000000000008bfb         pop        rbp
0000000000008bfc         ret
                        ; endp
0000000000008bfd         align      1024

                     loc_8c00:
0000000000008c00         lea        rdi, qword [rsp+0x28+var_24]                ; CODE XREF=lower_subexps+64
0000000000008c05         mov        rsi, rbp
0000000000008c08         call       lower_subexp                                ; lower_subexp
0000000000008c0d         test       rax, rax
0000000000008c10         mov        qword [rbx+0x10], rax
0000000000008c14         je         loc_8be2

0000000000008c16         mov        qword [rax], rbx
0000000000008c19         jmp        loc_8be2
0000000000008c1b         align      32

                     loc_8c20:
0000000000008c20         lea        rdi, qword [rsp+0x28+var_24]                ; CODE XREF=lower_subexps+49
0000000000008c25         mov        rsi, rbp
0000000000008c28         call       lower_subexp                                ; lower_subexp
0000000000008c2d         test       rax, rax
0000000000008c30         mov        qword [rbx+8], rax
0000000000008c34         je         loc_8bd3

0000000000008c36         mov        qword [rax], rbx
0000000000008c39         jmp        loc_8bd3

                     loc_8c3b:
0000000000008c3b         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=lower_subexps+84
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_node_set_init_copy:
0000000000008c40         push       r12                                         ; End of unwind block (FDE at 0x17a70), Begin of unwind block (FDE at 0x17a9c), CODE XREF=re_node_set_init_union+235, re_acquire_state_context+232, re_acquire_state_context+649, re_acquire_state+187, expand_bkref_cache+390, build_trtable+1614, check_arrival+1551, set_regs+1237, update_cur_sifted_state+2049, sub_13010+592
0000000000008c42         push       rbp
0000000000008c43         push       rbx
0000000000008c44         mov        rax, qword [rsi+8]
0000000000008c48         mov        qword [rdi+8], rax
0000000000008c4c         mov        r12, qword [rsi+8]
0000000000008c50         test       r12, r12
0000000000008c53         jle        loc_8c90

0000000000008c55         mov        rbx, rdi
0000000000008c58         mov        qword [rdi], rax
0000000000008c5b         lea        rdi, qword [rax*8]                          ; argument "__size" for method j_malloc
0000000000008c63         mov        rbp, rsi
0000000000008c66         call       j_malloc                                    ; malloc
0000000000008c6b         test       rax, rax
0000000000008c6e         mov        qword [rbx+0x10], rax
0000000000008c72         je         loc_8cb0

0000000000008c74         mov        rsi, qword [rbp+0x10]                       ; argument "__src" for method j_memcpy
0000000000008c78         lea        rdx, qword [r12*8]                          ; argument "__n" for method j_memcpy
0000000000008c80         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
0000000000008c83         call       j_memcpy                                    ; memcpy
0000000000008c88         xor        eax, eax

                     loc_8c8a:
0000000000008c8a         pop        rbx                                         ; CODE XREF=re_node_set_init_copy+132
0000000000008c8b         pop        rbp
0000000000008c8c         pop        r12
0000000000008c8e         ret
                        ; endp
0000000000008c8f         align      16

                     loc_8c90:
0000000000008c90         pxor       xmm0, xmm0                                  ; CODE XREF=re_node_set_init_copy+19
0000000000008c94         mov        qword [rdi+0x10], 0x0
0000000000008c9c         xor        eax, eax
0000000000008c9e         movups     xmmword [rdi], xmm0
0000000000008ca1         pop        rbx
0000000000008ca2         pop        rbp
0000000000008ca3         pop        r12
0000000000008ca5         ret
                        ; endp
0000000000008ca6         align      16

                     loc_8cb0:
0000000000008cb0         mov        qword [rbx+8], 0x0                          ; CODE XREF=re_node_set_init_copy+50
0000000000008cb8         mov        qword [rbx], 0x0
0000000000008cbf         mov        eax, 0xc
0000000000008cc4         jmp        loc_8c8a
0000000000008cc6         align      16                                          ; End of unwind block (FDE at 0x17a9c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_node_set_init_union:
0000000000008cd0         test       rsi, rsi                                    ; Begin of unwind block (FDE at 0x17ad8), CODE XREF=merge_state_array+96, transit_state_bkref.isra.34+1185, merge_state_with_log+188, re_search_internal+3431
0000000000008cd3         push       r14
0000000000008cd5         push       r13
0000000000008cd7         push       r12
0000000000008cd9         push       rbp
0000000000008cda         push       rbx
0000000000008cdb         je         loc_8d85

0000000000008ce1         test       rdx, rdx
0000000000008ce4         mov        r13, qword [rsi+8]
0000000000008ce8         je         loc_8d80

0000000000008cee         test       r13, r13
0000000000008cf1         jle        loc_8d80

0000000000008cf7         mov        r14, qword [rdx+8]
0000000000008cfb         test       r14, r14
0000000000008cfe         jle        loc_8db3

0000000000008d04         mov        r12, rdi
0000000000008d07         lea        rdi, qword [r13+r14]
0000000000008d0c         mov        rbx, rdx
0000000000008d0f         mov        rbp, rsi
0000000000008d12         mov        qword [r12], rdi
0000000000008d16         shl        rdi, 0x3                                    ; argument "__size" for method j_malloc
0000000000008d1a         call       j_malloc                                    ; malloc
0000000000008d1f         test       rax, rax
0000000000008d22         mov        qword [r12+0x10], rax
0000000000008d27         je         loc_8e18

0000000000008d2d         mov        r9, qword [rbx+0x10]
0000000000008d31         mov        r8, qword [rbp+0x10]
0000000000008d35         xor        ebx, ebx
0000000000008d37         xor        ecx, ecx
0000000000008d39         xor        esi, esi
0000000000008d3b         jmp        loc_8d5e
0000000000008d3d         align      64

                     loc_8d40:
0000000000008d40         sete       dil                                         ; CODE XREF=re_node_set_init_union+157
0000000000008d44         mov        qword [rax+rbx*8-8], rdx
0000000000008d49         add        rsi, 0x1
0000000000008d4d         movzx      edi, dil
0000000000008d51         add        rcx, rdi

                     loc_8d54:
0000000000008d54         cmp        r13, rsi                                    ; CODE XREF=re_node_set_init_union+168
0000000000008d57         jle        loc_8dc0

0000000000008d59         cmp        r14, rcx
0000000000008d5c         jle        loc_8dd8

                     loc_8d5e:
0000000000008d5e         mov        rdx, qword [r8+rsi*8]                       ; CODE XREF=re_node_set_init_union+107
0000000000008d62         mov        rdi, qword [r9+rcx*8]
0000000000008d66         add        rbx, 0x1
0000000000008d6a         cmp        rdx, rdi
0000000000008d6d         jle        loc_8d40

0000000000008d6f         add        rcx, 0x1
0000000000008d73         mov        qword [rax+rbx*8-8], rdi
0000000000008d78         jmp        loc_8d54
0000000000008d7a         align      128

                     loc_8d80:
0000000000008d80         test       r13, r13                                    ; CODE XREF=re_node_set_init_union+24, re_node_set_init_union+33
0000000000008d83         jg         loc_8db3

                     loc_8d85:
0000000000008d85         test       rdx, rdx                                    ; CODE XREF=re_node_set_init_union+11
0000000000008d88         je         loc_8d91

0000000000008d8a         cmp        qword [rdx+8], 0x0
0000000000008d8f         jg         loc_8db0

                     loc_8d91:
0000000000008d91         pxor       xmm0, xmm0                                  ; CODE XREF=re_node_set_init_union+184
0000000000008d95         mov        qword [rdi+0x10], 0x0
0000000000008d9d         xor        eax, eax
0000000000008d9f         movaps     xmmword [rdi], xmm0

                     loc_8da2:
0000000000008da2         pop        rbx                                         ; CODE XREF=re_node_set_init_union+333
0000000000008da3         pop        rbp
0000000000008da4         pop        r12
0000000000008da6         pop        r13
0000000000008da8         pop        r14
0000000000008daa         ret
                        ; endp
0000000000008dab         align      16

                     loc_8db0:
0000000000008db0         mov        rsi, rdx                                    ; CODE XREF=re_node_set_init_union+191

                     loc_8db3:
0000000000008db3         pop        rbx                                         ; CODE XREF=re_node_set_init_union+46, re_node_set_init_union+179
0000000000008db4         pop        rbp
0000000000008db5         pop        r12
0000000000008db7         pop        r13
0000000000008db9         pop        r14
0000000000008dbb         jmp        re_node_set_init_copy                       ; re_node_set_init_copy
                        ; endp

                     loc_8dc0:
0000000000008dc0         cmp        r14, rcx                                    ; CODE XREF=re_node_set_init_union+135
0000000000008dc3         jg         loc_8df8

                     loc_8dc5:
0000000000008dc5         mov        qword [r12+8], rbx                          ; CODE XREF=re_node_set_init_union+291, re_node_set_init_union+323
0000000000008dca         xor        eax, eax
0000000000008dcc         pop        rbx
0000000000008dcd         pop        rbp
0000000000008dce         pop        r12
0000000000008dd0         pop        r13
0000000000008dd2         pop        r14
0000000000008dd4         ret
                        ; endp
0000000000008dd5         align      8

                     loc_8dd8:
0000000000008dd8         sub        r13, rsi                                    ; CODE XREF=re_node_set_init_union+140
0000000000008ddb         lea        rdi, qword [rax+rbx*8]                      ; argument "__dest" for method j_memcpy
0000000000008ddf         lea        rsi, qword [r8+rsi*8]                       ; argument "__src" for method j_memcpy
0000000000008de3         lea        rdx, qword [r13*8]                          ; argument "__n" for method j_memcpy
0000000000008deb         add        rbx, r13
0000000000008dee         call       j_memcpy                                    ; memcpy
0000000000008df3         jmp        loc_8dc5
0000000000008df5         align      8

                     loc_8df8:
0000000000008df8         sub        r14, rcx                                    ; CODE XREF=re_node_set_init_union+243
0000000000008dfb         lea        rdi, qword [rax+rbx*8]                      ; argument "__dest" for method j_memcpy
0000000000008dff         lea        rsi, qword [r9+rcx*8]                       ; argument "__src" for method j_memcpy
0000000000008e03         lea        rdx, qword [r14*8]                          ; argument "__n" for method j_memcpy
0000000000008e0b         add        rbx, r14
0000000000008e0e         call       j_memcpy                                    ; memcpy
0000000000008e13         jmp        loc_8dc5
0000000000008e15         align      8

                     loc_8e18:
0000000000008e18         mov        eax, 0xc                                    ; CODE XREF=re_node_set_init_union+87
0000000000008e1d         jmp        loc_8da2
0000000000008e22         align      16                                          ; End of unwind block (FDE at 0x17ad8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_54: int32_t, -84


                     re_acquire_state_context:
0000000000008e30         push       r15                                         ; Begin of unwind block (FDE at 0x17b3c), CODE XREF=build_trtable+597, build_trtable+2464, build_trtable+2539, check_arrival+987, check_arrival+1653, transit_state_bkref.isra.34+1239, transit_state_bkref.isra.34+1970, merge_state_with_log+254, merge_state_with_log+354, re_search_internal+3497, re_search_internal+3734
0000000000008e32         push       r14
0000000000008e34         push       r13
0000000000008e36         push       r12
0000000000008e38         push       rbp
0000000000008e39         push       rbx
0000000000008e3a         sub        rsp, 0x28
0000000000008e3e         mov        r10, qword [rdx+8]
0000000000008e42         test       r10, r10
0000000000008e45         je         loc_90cf

0000000000008e4b         mov        r8d, ecx
0000000000008e4e         test       r10, r10
0000000000008e51         lea        r12, qword [r8+r10]
0000000000008e55         jle        loc_8e6c

0000000000008e57         mov        rax, qword [rdx+0x10]
0000000000008e5b         lea        r10, qword [rax+r10*8]
0000000000008e5f         nop

                     loc_8e60:
0000000000008e60         add        r12, qword [rax]                            ; CODE XREF=re_acquire_state_context+58
0000000000008e63         add        rax, 0x8
0000000000008e67         cmp        r10, rax
0000000000008e6a         jne        loc_8e60

                     loc_8e6c:
0000000000008e6c         mov        rax, qword [rsi+0x88]                       ; CODE XREF=re_acquire_state_context+37
0000000000008e73         mov        rbp, rdx
0000000000008e76         mov        dword [rsp+0x58+var_54], ecx
0000000000008e7a         mov        r13, rsi
0000000000008e7d         mov        qword [rsp+0x58+var_40], rdi
0000000000008e82         and        rax, r12
0000000000008e85         lea        rdx, qword [rax+rax*2]
0000000000008e89         mov        rax, qword [rsi+0x40]
0000000000008e8d         lea        rax, qword [rax+rdx*8]
0000000000008e91         mov        r11, qword [rax]
0000000000008e94         test       r11, r11
0000000000008e97         jle        loc_8ef0

0000000000008e99         mov        rbx, qword [rax+0x10]
0000000000008e9d         xor        r10d, r10d
0000000000008ea0         mov        r9d, ecx
0000000000008ea3         jmp        loc_8eb1
0000000000008ea5         align      8

                     loc_8ea8:
0000000000008ea8         add        r10, 0x1                                    ; CODE XREF=re_acquire_state_context+136, re_acquire_state_context+149, re_acquire_state_context+158, re_acquire_state_context+170
0000000000008eac         cmp        r10, r11
0000000000008eaf         je         loc_8ef0

                     loc_8eb1:
0000000000008eb1         mov        r14, qword [rbx+r10*8]                      ; CODE XREF=re_acquire_state_context+115
0000000000008eb5         cmp        qword [r14], r12
0000000000008eb8         jne        loc_8ea8

0000000000008eba         movzx      eax, byte [r14+0x68]
0000000000008ebf         and        eax, 0xf
0000000000008ec2         cmp        eax, r9d
0000000000008ec5         jne        loc_8ea8

0000000000008ec7         mov        rdi, qword [r14+0x50]
0000000000008ecb         test       rdi, rdi
0000000000008ece         je         loc_8ea8

0000000000008ed0         mov        rsi, rbp
0000000000008ed3         call       re_node_set_compare.part.2                  ; re_node_set_compare.part.2
0000000000008ed8         test       al, al
0000000000008eda         je         loc_8ea8

                     loc_8edc:
0000000000008edc         add        rsp, 0x28                                   ; CODE XREF=re_acquire_state_context+520, re_acquire_state_context+548, re_acquire_state_context+680
0000000000008ee0         mov        rax, r14
0000000000008ee3         pop        rbx
0000000000008ee4         pop        rbp
0000000000008ee5         pop        r12
0000000000008ee7         pop        r13
0000000000008ee9         pop        r14
0000000000008eeb         pop        r15
0000000000008eed         ret
                        ; endp
0000000000008eee         align      16

                     loc_8ef0:
0000000000008ef0         mov        esi, 0x1                                    ; argument "__size" for method j_calloc, CODE XREF=re_acquire_state_context+103, re_acquire_state_context+127
0000000000008ef5         mov        edi, 0x70                                   ; argument "__nmemb" for method j_calloc
0000000000008efa         call       j_calloc                                    ; calloc
0000000000008eff         test       rax, rax
0000000000008f02         mov        r14, rax
0000000000008f05         je         loc_9046

0000000000008f0b         lea        rax, qword [rax+8]
0000000000008f0f         mov        rsi, rbp
0000000000008f12         mov        rdi, rax
0000000000008f15         mov        rbx, rax
0000000000008f18         call       re_node_set_init_copy                       ; re_node_set_init_copy
0000000000008f1d         test       eax, eax
0000000000008f1f         jne        loc_90dd

0000000000008f25         movzx      eax, byte [r14+0x68]
0000000000008f2a         movzx      edx, byte [rsp+0x58+var_54]
0000000000008f2f         mov        qword [r14+0x50], rbx
0000000000008f33         and        edx, 0xf
0000000000008f36         and        eax, 0xfffffff0
0000000000008f39         or         eax, edx
0000000000008f3b         cmp        qword [rbp+8], 0x0
0000000000008f40         mov        byte [r14+0x68], al
0000000000008f44         jle        loc_9028

0000000000008f4a         lea        rcx, qword [r14+0x18]
0000000000008f4e         xor        r15d, r15d
0000000000008f51         mov        qword [rsp+0x58+var_48], r12
0000000000008f56         xor        r10d, r10d
0000000000008f59         mov        r12, r13
0000000000008f5c         mov        r13, r15
0000000000008f5f         mov        qword [rsp+0x58+var_50], rcx
0000000000008f64         mov        r15, rbx
0000000000008f67         nop        word [rax+rax]

                     loc_8f70:
0000000000008f70         mov        rax, qword [rbp+0x10]                       ; CODE XREF=re_acquire_state_context+490
0000000000008f74         mov        rax, qword [rax+r13*8]
0000000000008f78         shl        rax, 0x4
0000000000008f7c         add        rax, qword [r12]
0000000000008f80         movzx      esi, byte [rax+8]
0000000000008f84         mov        ebx, dword [rax+8]
0000000000008f87         shr        ebx, 0x8
0000000000008f8a         and        bx, 0x3ff
0000000000008f8f         cmp        esi, 0x1
0000000000008f92         movzx      edi, bx
0000000000008f95         jne        loc_8f9b

0000000000008f97         test       edi, edi
0000000000008f99         je         loc_9012

                     loc_8f9b:
0000000000008f9b         movzx      edx, byte [r14+0x68]                        ; CODE XREF=re_acquire_state_context+357
0000000000008fa0         movzx      eax, byte [rax+0xa]
0000000000008fa4         mov        r9d, edx
0000000000008fa7         shr        al, 0x4
0000000000008faa         and        edx, 0xffffffdf
0000000000008fad         shr        r9b, 0x5
0000000000008fb1         or         eax, r9d
0000000000008fb4         and        eax, 0x1
0000000000008fb7         shl        eax, 0x5
0000000000008fba         or         eax, edx
0000000000008fbc         cmp        esi, 0x2
0000000000008fbf         mov        byte [r14+0x68], al
0000000000008fc3         je         loc_9090

0000000000008fc9         cmp        esi, 0x4
0000000000008fcc         jne        loc_8fd5

0000000000008fce         or         eax, 0x40
0000000000008fd1         mov        byte [r14+0x68], al

                     loc_8fd5:
0000000000008fd5         test       edi, edi                                    ; CODE XREF=re_acquire_state_context+412, re_acquire_state_context+615
0000000000008fd7         je         loc_9012

0000000000008fd9         cmp        r15, qword [r14+0x50]
0000000000008fdd         je         loc_90a0

                     loc_8fe3:
0000000000008fe3         test       bl, 0x1                                     ; CODE XREF=re_acquire_state_context+666
0000000000008fe6         je         loc_9060

0000000000008fe8         test       byte [rsp+0x58+var_54], 0x1
0000000000008fed         je         loc_8ff8

0000000000008fef         test       bl, 0x2
0000000000008ff2         je         loc_906c

0000000000008ff4         nop        dword [rax]

                     loc_8ff8:
0000000000008ff8         mov        rdx, r13                                    ; CODE XREF=re_acquire_state_context+445, re_acquire_state_context+570, re_acquire_state_context+582, re_acquire_state_context+596
0000000000008ffb         sub        rdx, r10
0000000000008ffe         js         loc_900e

0000000000009000         mov        rsi, qword [rsp+0x58+var_50]
0000000000009005         lea        rdi, qword [r14+0x10]
0000000000009009         call       re_node_set_remove_at.isra.4.part.5         ; re_node_set_remove_at.isra.4.part.5

                     loc_900e:
000000000000900e         add        r10, 0x1                                    ; CODE XREF=re_acquire_state_context+462

                     loc_9012:
0000000000009012         add        r13, 0x1                                    ; CODE XREF=re_acquire_state_context+361, re_acquire_state_context+423, re_acquire_state_context+587, re_acquire_state_context+594
0000000000009016         cmp        r13, qword [rbp+8]
000000000000901a         jl         loc_8f70

0000000000009020         mov        r13, r12
0000000000009023         mov        r12, qword [rsp+0x58+var_48]

                     loc_9028:
0000000000009028         mov        rdx, r12                                    ; CODE XREF=re_acquire_state_context+276
000000000000902b         mov        rsi, r14
000000000000902e         mov        rdi, r13
0000000000009031         call       register_state                              ; register_state
0000000000009036         test       eax, eax
0000000000009038         je         loc_8edc

                     loc_903e:
000000000000903e         mov        rdi, r14                                    ; CODE XREF=re_acquire_state_context+641
0000000000009041         call       free_state                                  ; free_state

                     loc_9046:
0000000000009046         mov        rax, qword [rsp+0x58+var_40]                ; CODE XREF=re_acquire_state_context+213, re_acquire_state_context+656, re_acquire_state_context+693
000000000000904b         xor        r14d, r14d
000000000000904e         mov        dword [rax], 0xc
0000000000009054         jmp        loc_8edc
0000000000009059         align      32

                     loc_9060:
0000000000009060         test       bl, 0x2                                     ; CODE XREF=re_acquire_state_context+438
0000000000009063         je         loc_906c

0000000000009065         test       byte [rsp+0x58+var_54], 0x1
000000000000906a         jne        loc_8ff8

                     loc_906c:
000000000000906c         test       bl, 0x10                                    ; CODE XREF=re_acquire_state_context+450, re_acquire_state_context+563
000000000000906f         je         loc_9078

0000000000009071         test       byte [rsp+0x58+var_54], 0x2
0000000000009076         je         loc_8ff8

                     loc_9078:
0000000000009078         and        ebx, 0x40                                   ; CODE XREF=re_acquire_state_context+575
000000000000907b         je         loc_9012

000000000000907d         test       byte [rsp+0x58+var_54], 0x4
0000000000009082         jne        loc_9012

0000000000009084         jmp        loc_8ff8
0000000000009089         align      16

                     loc_9090:
0000000000009090         or         eax, 0x10                                   ; CODE XREF=re_acquire_state_context+403
0000000000009093         mov        byte [r14+0x68], al
0000000000009097         jmp        loc_8fd5
000000000000909c         align      32

                     loc_90a0:
00000000000090a0         mov        edi, 0x18                                   ; argument "__size" for method j_malloc, CODE XREF=re_acquire_state_context+429
00000000000090a5         call       j_malloc                                    ; malloc
00000000000090aa         test       rax, rax
00000000000090ad         mov        qword [r14+0x50], rax
00000000000090b1         je         loc_903e

00000000000090b3         mov        rsi, rbp
00000000000090b6         mov        rdi, rax
00000000000090b9         call       re_node_set_init_copy                       ; re_node_set_init_copy
00000000000090be         test       eax, eax
00000000000090c0         jne        loc_9046

00000000000090c2         or         byte [r14+0x68], 0x80
00000000000090c7         xor        r10d, r10d
00000000000090ca         jmp        loc_8fe3

                     loc_90cf:
00000000000090cf         mov        dword [rdi], 0x0                            ; CODE XREF=re_acquire_state_context+21
00000000000090d5         xor        r14d, r14d
00000000000090d8         jmp        loc_8edc

                     loc_90dd:
00000000000090dd         mov        rdi, r14                                    ; argument "__ptr" for method j_free, CODE XREF=re_acquire_state_context+239
00000000000090e0         call       j_free                                      ; free
00000000000090e5         jmp        loc_9046
00000000000090ea         align      16                                          ; End of unwind block (FDE at 0x17b3c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_acquire_state:
00000000000090f0         push       r15                                         ; Begin of unwind block (FDE at 0x17b88), CODE XREF=merge_state_array+120, expand_bkref_cache+464, check_arrival+754, update_cur_sifted_state+219, update_cur_sifted_state+307
00000000000090f2         push       r14
00000000000090f4         push       r13
00000000000090f6         push       r12
00000000000090f8         push       rbp
00000000000090f9         push       rbx
00000000000090fa         sub        rsp, 0x8
00000000000090fe         mov        rbp, qword [rdx+8]
0000000000009102         test       rbp, rbp
0000000000009105         je         loc_92e0

000000000000910b         test       rbp, rbp
000000000000910e         jle        loc_912c

0000000000009110         mov        rax, qword [rdx+0x10]
0000000000009114         lea        rcx, qword [rax+rbp*8]
0000000000009118         nop        dword [rax+rax]

                     loc_9120:
0000000000009120         add        rbp, qword [rax]                            ; CODE XREF=re_acquire_state+58
0000000000009123         add        rax, 0x8
0000000000009127         cmp        rcx, rax
000000000000912a         jne        loc_9120

                     loc_912c:
000000000000912c         mov        rax, qword [rsi+0x88]                       ; CODE XREF=re_acquire_state+30
0000000000009133         mov        r14, rdx
0000000000009136         mov        r12, rsi
0000000000009139         mov        r13, rdi
000000000000913c         and        rax, rbp
000000000000913f         lea        rdx, qword [rax+rax*2]
0000000000009143         mov        rax, qword [rsi+0x40]
0000000000009147         lea        rax, qword [rax+rdx*8]
000000000000914b         mov        r10, qword [rax]
000000000000914e         test       r10, r10
0000000000009151         jle        loc_9186

0000000000009153         mov        r11, qword [rax+0x10]
0000000000009157         xor        r9d, r9d
000000000000915a         nop        word [rax+rax]

                     loc_9160:
0000000000009160         mov        rbx, qword [r11+r9*8]                       ; CODE XREF=re_acquire_state+148
0000000000009164         cmp        qword [rbx], rbp
0000000000009167         jne        loc_917d

0000000000009169         lea        rdi, qword [rbx+8]
000000000000916d         mov        rsi, r14
0000000000009170         call       re_node_set_compare.part.2                  ; re_node_set_compare.part.2
0000000000009175         test       al, al
0000000000009177         jne        loc_927f

                     loc_917d:
000000000000917d         add        r9, 0x1                                     ; CODE XREF=re_acquire_state+119
0000000000009181         cmp        r10, r9
0000000000009184         jne        loc_9160

                     loc_9186:
0000000000009186         mov        esi, 0x1                                    ; argument "__size" for method j_calloc, CODE XREF=re_acquire_state+97
000000000000918b         mov        edi, 0x70                                   ; argument "__nmemb" for method j_calloc
0000000000009190         call       j_calloc                                    ; calloc
0000000000009195         test       rax, rax
0000000000009198         mov        rbx, rax
000000000000919b         je         loc_92c8

00000000000091a1         lea        r15, qword [rax+8]
00000000000091a5         mov        rsi, r14
00000000000091a8         mov        rdi, r15
00000000000091ab         call       re_node_set_init_copy                       ; re_node_set_init_copy
00000000000091b0         test       eax, eax
00000000000091b2         jne        loc_92c0

00000000000091b8         mov        rax, qword [r14+8]
00000000000091bc         mov        qword [rbx+0x50], r15
00000000000091c0         test       rax, rax
00000000000091c3         jle        loc_926d

00000000000091c9         mov        rsi, qword [r14+0x10]
00000000000091cd         mov        r8, qword [r12]
00000000000091d1         lea        r9, qword [rsi+rax*8]
00000000000091d5         jmp        loc_9224
00000000000091d7         align      32

                     loc_91e0:
00000000000091e0         movzx      ecx, byte [rbx+0x68]                        ; CODE XREF=re_acquire_state+325
00000000000091e4         movzx      edx, byte [rax+0xa]
00000000000091e8         mov        r10d, ecx
00000000000091eb         shr        dl, 0x4
00000000000091ee         and        ecx, 0xffffffdf
00000000000091f1         shr        r10b, 0x5
00000000000091f5         or         edx, r10d
00000000000091f8         and        edx, 0x1
00000000000091fb         shl        edx, 0x5
00000000000091fe         or         edx, ecx
0000000000009200         cmp        edi, 0x2
0000000000009203         mov        byte [rbx+0x68], dl
0000000000009206         je         loc_9298

000000000000920c         cmp        edi, 0x4
000000000000920f         jne        loc_92a8

0000000000009215         or         edx, 0x40
0000000000009218         mov        byte [rbx+0x68], dl

                     loc_921b:
000000000000921b         add        rsi, 0x8                                    ; CODE XREF=re_acquire_state+334, re_acquire_state+430, re_acquire_state+452
000000000000921f         cmp        r9, rsi
0000000000009222         je         loc_926d

                     loc_9224:
0000000000009224         mov        rax, qword [rsi]                            ; CODE XREF=re_acquire_state+229, re_acquire_state+379
0000000000009227         shl        rax, 0x4
000000000000922b         add        rax, r8
000000000000922e         movzx      edi, byte [rax+8]
0000000000009232         cmp        edi, 0x1
0000000000009235         jne        loc_91e0

0000000000009237         test       dword [rax+8], 0x3ff00
000000000000923e         je         loc_921b

0000000000009240         movzx      edx, byte [rbx+0x68]
0000000000009244         movzx      eax, byte [rax+0xa]
0000000000009248         mov        ecx, edx
000000000000924a         shr        al, 0x4
000000000000924d         and        edx, 0xffffffdf
0000000000009250         shr        cl, 0x5
0000000000009253         or         eax, ecx
0000000000009255         and        eax, 0x1
0000000000009258         shl        eax, 0x5
000000000000925b         or         eax, edx
000000000000925d         mov        byte [rbx+0x68], al

                     loc_9260:
0000000000009260         add        rsi, 0x8                                    ; CODE XREF=re_acquire_state+443, re_acquire_state+458
0000000000009264         or         byte [rbx+0x68], 0x80
0000000000009268         cmp        r9, rsi
000000000000926b         jne        loc_9224

                     loc_926d:
000000000000926d         mov        rdx, rbp                                    ; CODE XREF=re_acquire_state+211, re_acquire_state+306
0000000000009270         mov        rsi, rbx
0000000000009273         mov        rdi, r12
0000000000009276         call       register_state                              ; register_state
000000000000927b         test       eax, eax
000000000000927d         jne        loc_92d4

                     loc_927f:
000000000000927f         add        rsp, 0x8                                    ; CODE XREF=re_acquire_state+135, re_acquire_state+482, re_acquire_state+504
0000000000009283         mov        rax, rbx
0000000000009286         pop        rbx
0000000000009287         pop        rbp
0000000000009288         pop        r12
000000000000928a         pop        r13
000000000000928c         pop        r14
000000000000928e         pop        r15
0000000000009290         ret
                        ; endp
0000000000009291         align      8

                     loc_9298:
0000000000009298         or         edx, 0x10                                   ; CODE XREF=re_acquire_state+278
000000000000929b         mov        byte [rbx+0x68], dl
000000000000929e         jmp        loc_921b
00000000000092a3         align      8

                     loc_92a8:
00000000000092a8         cmp        edi, 0xc                                    ; CODE XREF=re_acquire_state+287
00000000000092ab         je         loc_9260

00000000000092ad         test       dword [rax+8], 0x3ff00
00000000000092b4         je         loc_921b

00000000000092ba         jmp        loc_9260
00000000000092bc         align      64

                     loc_92c0:
00000000000092c0         mov        rdi, rbx                                    ; argument "__ptr" for method j_free, CODE XREF=re_acquire_state+194
00000000000092c3         call       j_free                                      ; free

                     loc_92c8:
00000000000092c8         mov        dword [r13], 0xc                            ; CODE XREF=re_acquire_state+171, re_acquire_state+492
00000000000092d0         xor        ebx, ebx
00000000000092d2         jmp        loc_927f

                     loc_92d4:
00000000000092d4         mov        rdi, rbx                                    ; CODE XREF=re_acquire_state+397
00000000000092d7         call       free_state                                  ; free_state
00000000000092dc         jmp        loc_92c8
00000000000092de         align      32

                     loc_92e0:
00000000000092e0         mov        dword [rdi], 0x0                            ; CODE XREF=re_acquire_state+21
00000000000092e6         xor        ebx, ebx
00000000000092e8         jmp        loc_927f
00000000000092ea         align      16                                          ; End of unwind block (FDE at 0x17b88)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_58: int8_t, -88
        ;    var_5C: int32_t, -92
        ;    var_70: int64_t, -112


                     merge_state_array:
00000000000092f0         push       r15                                         ; Begin of unwind block (FDE at 0x17bd4), CODE XREF=re_search_internal+5755, update_cur_sifted_state+1819
00000000000092f2         push       r14
00000000000092f4         push       r13
00000000000092f6         push       r12
00000000000092f8         push       rbp
00000000000092f9         push       rbx
00000000000092fa         sub        rsp, 0x48
00000000000092fe         mov        rax, qword [fs:0x28]
0000000000009307         mov        qword [rsp+0x78+var_40], rax
000000000000930c         xor        eax, eax
000000000000930e         test       rcx, rcx
0000000000009311         jle        loc_93a6

0000000000009317         lea        rax, qword [rsp+0x78+var_5C]
000000000000931c         mov        r14, rdi
000000000000931f         mov        rbx, rsi
0000000000009322         mov        r12, rdx
0000000000009325         mov        rbp, rcx
0000000000009328         xor        r15d, r15d
000000000000932b         lea        r13, qword [rsp+0x78+var_58]
0000000000009330         mov        qword [rsp+0x78+var_70], rax
0000000000009335         jmp        loc_938c
0000000000009337         align      64

                     loc_9340:
0000000000009340         test       rdx, rdx                                    ; CODE XREF=merge_state_array+167
0000000000009343         je         loc_9383

0000000000009345         add        rdx, 0x8
0000000000009349         add        rsi, 0x8
000000000000934d         mov        rdi, r13
0000000000009350         call       re_node_set_init_union                      ; re_node_set_init_union
0000000000009355         test       eax, eax
0000000000009357         mov        dword [rsp+0x78+var_5C], eax
000000000000935b         jne        loc_93a8

000000000000935d         mov        rdi, qword [rsp+0x78+var_70]
0000000000009362         mov        rdx, r13
0000000000009365         mov        rsi, r14
0000000000009368         call       re_acquire_state                            ; re_acquire_state
000000000000936d         mov        rdi, qword [rsp+0x78+var_48]                ; argument "__ptr" for method j_free
0000000000009372         mov        qword [rbx+r15*8], rax
0000000000009376         call       j_free                                      ; free
000000000000937b         mov        eax, dword [rsp+0x78+var_5C]
000000000000937f         test       eax, eax
0000000000009381         jne        loc_93a8

                     loc_9383:
0000000000009383         add        r15, 0x1                                    ; CODE XREF=merge_state_array+83
0000000000009387         cmp        rbp, r15
000000000000938a         je         loc_93a6

                     loc_938c:
000000000000938c         mov        rsi, qword [rbx+r15*8]                      ; CODE XREF=merge_state_array+69, merge_state_array+180
0000000000009390         mov        rdx, qword [r12+r15*8]
0000000000009394         test       rsi, rsi
0000000000009397         jne        loc_9340

0000000000009399         mov        qword [rbx+r15*8], rdx
000000000000939d         add        r15, 0x1
00000000000093a1         cmp        rbp, r15
00000000000093a4         jne        loc_938c

                     loc_93a6:
00000000000093a6         xor        eax, eax                                    ; CODE XREF=merge_state_array+33, merge_state_array+154

                     loc_93a8:
00000000000093a8         mov        rcx, qword [rsp+0x78+var_40]                ; CODE XREF=merge_state_array+107, merge_state_array+145
00000000000093ad         xor        rcx, qword [fs:0x28]
00000000000093b6         jne        loc_93c7

00000000000093b8         add        rsp, 0x48
00000000000093bc         pop        rbx
00000000000093bd         pop        rbp
00000000000093be         pop        r12
00000000000093c0         pop        r13
00000000000093c2         pop        r14
00000000000093c4         pop        r15
00000000000093c6         ret
                        ; endp

                     loc_93c7:
00000000000093c7         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=merge_state_array+198
                        ; endp
00000000000093cc         align      16                                          ; End of unwind block (FDE at 0x17bd4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_5C: int32_t, -92
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_7C: int32_t, -124
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168


                     expand_bkref_cache:
00000000000093d0         push       r15                                         ; Begin of unwind block (FDE at 0x17c20), CODE XREF=check_arrival+928, check_arrival+1614
00000000000093d2         push       r14
00000000000093d4         push       r13
00000000000093d6         push       r12
00000000000093d8         mov        r12, rdx
00000000000093db         push       rbp
00000000000093dc         push       rbx
00000000000093dd         mov        rbx, rdi
00000000000093e0         mov        rbp, rsi
00000000000093e3         xor        esi, esi
00000000000093e5         sub        rsp, 0x78
00000000000093e9         mov        rdi, qword [rdi+0xc8]
00000000000093f0         mov        rax, qword [fs:0x28]
00000000000093f9         mov        qword [rsp+0xa8+var_40], rax
00000000000093fe         xor        eax, eax
0000000000009400         mov        qword [rsp+0xa8+var_88], rcx
0000000000009405         mov        dword [rsp+0xa8+var_7C], r8d
000000000000940a         mov        rdx, rdi

                     loc_940d:
000000000000940d         cmp        rsi, rdx                                    ; CODE XREF=expand_bkref_cache+247
0000000000009410         jge        loc_9467

0000000000009412         lea        rax, qword [rsi+rdx]
0000000000009416         mov        r8, qword [rbx+0xd8]
000000000000941d         mov        rcx, rax
0000000000009420         shr        rcx, 0x3f
0000000000009424         add        rcx, rax
0000000000009427         sar        rcx, 0x1
000000000000942a         lea        rax, qword [rcx+rcx*4]
000000000000942e         cmp        r12, qword [r8+rax*8+8]
0000000000009433         jle        loc_9462

0000000000009435         jmp        loc_94b8
000000000000943a         align      64

                     loc_9440:
0000000000009440         lea        rdx, qword [rsi+rcx]                        ; CODE XREF=expand_bkref_cache+149
0000000000009444         mov        rax, rdx
0000000000009447         shr        rax, 0x3f
000000000000944b         add        rax, rdx
000000000000944e         sar        rax, 0x1
0000000000009451         lea        rdx, qword [rax+rax*4]
0000000000009455         mov        r9, rax
0000000000009458         cmp        r12, qword [r8+rdx*8+8]
000000000000945d         jg         loc_94c0

000000000000945f         mov        rcx, rax

                     loc_9462:
0000000000009462         cmp        rsi, rcx                                    ; CODE XREF=expand_bkref_cache+99
0000000000009465         jl         loc_9440

                     loc_9467:
0000000000009467         cmp        rdi, rsi                                    ; CODE XREF=expand_bkref_cache+64
000000000000946a         jle        loc_948d

000000000000946c         mov        rcx, qword [rbx+0xd8]
0000000000009473         lea        rax, qword [rsi+rsi*4]
0000000000009477         shl        rax, 0x3
000000000000947b         cmp        qword [rcx+rax+8], r12
0000000000009480         mov        qword [rsp+0xa8+var_78], rax
0000000000009485         jne        loc_948d

0000000000009487         cmp        rsi, 0xffffffffffffffff
000000000000948b         jne        loc_94d0

                     loc_948d:
000000000000948d         xor        eax, eax                                    ; CODE XREF=expand_bkref_cache+154, expand_bkref_cache+181, expand_bkref_cache+514

                     loc_948f:
000000000000948f         mov        rbx, qword [rsp+0xa8+var_40]                ; CODE XREF=expand_bkref_cache+833, expand_bkref_cache+854, expand_bkref_cache+865, expand_bkref_cache+872, expand_bkref_cache+888
0000000000009494         xor        rbx, qword [fs:0x28]
000000000000949d         jne        loc_9769

00000000000094a3         add        rsp, 0x78
00000000000094a7         pop        rbx
00000000000094a8         pop        rbp
00000000000094a9         pop        r12
00000000000094ab         pop        r13
00000000000094ad         pop        r14
00000000000094af         pop        r15
00000000000094b1         ret
                        ; endp
00000000000094b2         align      8

                     loc_94b8:
00000000000094b8         mov        r9, rcx                                     ; CODE XREF=expand_bkref_cache+101
00000000000094bb         mov        rcx, rdx
00000000000094be         nop

                     loc_94c0:
00000000000094c0         lea        rsi, qword [r9+1]                           ; CODE XREF=expand_bkref_cache+141
00000000000094c4         mov        rdx, rcx
00000000000094c7         jmp        loc_940d
00000000000094cc         align      16

                     loc_94d0:
00000000000094d0         lea        rax, qword [rbp+0x10]                       ; CODE XREF=expand_bkref_cache+187
00000000000094d4         mov        r13, qword [rbx+0x98]
00000000000094db         mov        qword [rsp+0xa8+var_A8], rax
00000000000094df         lea        rax, qword [rsp+0xa8+var_5C]
00000000000094e4         mov        qword [rsp+0xa8+var_70], rax
00000000000094e9         lea        rax, qword [rsp+0xa8+var_58]
00000000000094ee         mov        qword [rsp+0xa8+var_98], rax

                     loc_94f3:
00000000000094f3         mov        rax, qword [rsp+0xa8+var_78]                ; CODE XREF=expand_bkref_cache+737
00000000000094f8         lea        r15, qword [rcx+rax]
00000000000094fc         jmp        loc_95d8
0000000000009501         align      8

                     loc_9508:
0000000000009508         mov        rax, qword [r13+0x18]                       ; CODE XREF=expand_bkref_cache+564
000000000000950c         mov        rcx, qword [rax+r10*8]
0000000000009510         mov        r10, qword [rbx+0xb8]
0000000000009517         lea        rax, qword [r14*8]
000000000000951f         mov        qword [rsp+0xa8+var_90], rax
0000000000009524         add        r10, rax
0000000000009527         mov        qword [rsp+0xa8+var_A0], rcx
000000000000952c         mov        r9, qword [r10]
000000000000952f         test       r9, r9
0000000000009532         je         loc_96c0

0000000000009538         mov        rdi, qword [r9+0x10]
000000000000953c         lea        rsi, qword [r9+0x18]
0000000000009540         mov        rdx, rcx
0000000000009543         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
0000000000009548         test       rax, rax
000000000000954b         jne        loc_95c9

000000000000954d         mov        rdi, qword [rsp+0xa8+var_98]
0000000000009552         lea        rsi, qword [r9+8]
0000000000009556         call       re_node_set_init_copy                       ; re_node_set_init_copy
000000000000955b         mov        rsi, qword [rsp+0xa8+var_A0]
0000000000009560         mov        rdi, qword [rsp+0xa8+var_98]
0000000000009565         mov        dword [rsp+0xa8+var_5C], eax
0000000000009569         call       re_node_set_insert                          ; re_node_set_insert
000000000000956e         mov        edx, dword [rsp+0xa8+var_5C]
0000000000009572         test       edx, edx
0000000000009574         jne        loc_9716

000000000000957a         cmp        al, 0x1
000000000000957c         jne        loc_9716

0000000000009582         mov        r10, qword [rsp+0xa8+var_90]
0000000000009587         add        r10, qword [rbx+0xb8]

                     loc_958e:
000000000000958e         mov        rdx, qword [rsp+0xa8+var_98]                ; CODE XREF=expand_bkref_cache+816
0000000000009593         mov        rdi, qword [rsp+0xa8+var_70]
0000000000009598         mov        rsi, r13
000000000000959b         mov        qword [rsp+0xa8+var_A0], r10
00000000000095a0         call       re_acquire_state                            ; re_acquire_state
00000000000095a5         mov        r10, qword [rsp+0xa8+var_A0]
00000000000095aa         mov        rdi, qword [rsp+0xa8+var_48]                ; argument "__ptr" for method j_free
00000000000095af         mov        qword [r10], rax
00000000000095b2         call       j_free                                      ; free
00000000000095b7         mov        rax, qword [rbx+0xb8]
00000000000095be         cmp        qword [rax+r14*8], 0x0
00000000000095c3         je         loc_9705

                     loc_95c9:
00000000000095c9         add        r15, 0x28                                   ; CODE XREF=expand_bkref_cache+379, expand_bkref_cache+545, expand_bkref_cache+607, expand_bkref_cache+827
00000000000095cd         cmp        byte [r15-8], 0x0
00000000000095d2         je         loc_948d

                     loc_95d8:
00000000000095d8         mov        r10, qword [r15]                            ; CODE XREF=expand_bkref_cache+300
00000000000095db         mov        r9, qword [rbp+8]
00000000000095df         mov        rsi, qword [rsp+0xa8+var_A8]
00000000000095e3         mov        rdx, r10
00000000000095e6         mov        rdi, r9
00000000000095e9         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
00000000000095ee         test       rax, rax
00000000000095f1         je         loc_95c9

00000000000095f3         mov        r8, qword [r15+0x18]
00000000000095f7         add        r8, r12
00000000000095fa         mov        r14, r8
00000000000095fd         sub        r14, qword [r15+0x10]
0000000000009601         cmp        r12, r14
0000000000009604         jne        loc_9508

000000000000960a         mov        rcx, qword [r13+0x28]
000000000000960e         lea        rax, qword [r10+r10*2]
0000000000009612         mov        rsi, qword [rsp+0xa8+var_A8]
0000000000009616         mov        rdi, r9
0000000000009619         lea        rax, qword [rcx+rax*8]
000000000000961d         mov        rax, qword [rax+0x10]
0000000000009621         mov        r14, qword [rax]
0000000000009624         mov        rdx, r14
0000000000009627         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000962c         test       rax, rax
000000000000962f         jne        loc_95c9

0000000000009631         mov        edi, 0x8                                    ; argument "__size" for method j_malloc
0000000000009636         mov        qword [rsp+0xa8+var_58], 0x1
000000000000963f         mov        qword [rsp+0xa8+var_50], 0x1
0000000000009648         call       j_malloc                                    ; malloc
000000000000964d         test       rax, rax
0000000000009650         mov        qword [rsp+0xa8+var_48], rax
0000000000009655         je         loc_974d

000000000000965b         mov        qword [rax], r14
000000000000965e         xor        eax, eax

                     loc_9660:
0000000000009660         mov        r15, qword [rsp+0xa8+var_98]                ; CODE XREF=expand_bkref_cache+916
0000000000009665         mov        rdx, qword [rsp+0xa8+var_88]
000000000000966a         mov        rdi, r13
000000000000966d         mov        ecx, dword [rsp+0xa8+var_7C]
0000000000009671         mov        dword [rsp+0xa8+var_5C], eax
0000000000009675         mov        rsi, r15
0000000000009678         call       check_arrival_expand_ecl                    ; check_arrival_expand_ecl
000000000000967d         mov        rsi, r15
0000000000009680         mov        rdi, rbp
0000000000009683         mov        r14d, eax
0000000000009686         call       re_node_set_merge                           ; re_node_set_merge
000000000000968b         mov        rdi, qword [rsp+0xa8+var_48]                ; argument "__ptr" for method j_free
0000000000009690         mov        r15d, eax
0000000000009693         call       j_free                                      ; free
0000000000009698         mov        eax, dword [rsp+0xa8+var_5C]
000000000000969c         mov        edx, r14d
000000000000969f         or         edx, r15d
00000000000096a2         or         edx, eax
00000000000096a4         jne        loc_9736

00000000000096aa         mov        rcx, qword [rbx+0xd8]
00000000000096b1         jmp        loc_94f3
00000000000096b6         align      64

                     loc_96c0:
00000000000096c0         mov        edi, 0x8                                    ; argument "__size" for method j_malloc, CODE XREF=expand_bkref_cache+354
00000000000096c5         mov        qword [rsp+0xa8+var_90], r10
00000000000096ca         mov        qword [rsp+0xa8+var_58], 0x1
00000000000096d3         mov        qword [rsp+0xa8+var_50], 0x1
00000000000096dc         call       j_malloc                                    ; malloc
00000000000096e1         test       rax, rax
00000000000096e4         mov        qword [rsp+0xa8+var_48], rax
00000000000096e9         je         loc_972c

00000000000096eb         mov        rdi, qword [rsp+0xa8+var_A0]
00000000000096f0         mov        dword [rsp+0xa8+var_5C], 0x0
00000000000096f8         mov        r10, qword [rsp+0xa8+var_90]
00000000000096fd         mov        qword [rax], rdi
0000000000009700         jmp        loc_958e

                     loc_9705:
0000000000009705         mov        eax, dword [rsp+0xa8+var_5C]                ; CODE XREF=expand_bkref_cache+499
0000000000009709         test       eax, eax
000000000000970b         je         loc_95c9

0000000000009711         jmp        loc_948f

                     loc_9716:
0000000000009716         mov        rdi, qword [rsp+0xa8+var_48]                ; argument "__ptr" for method j_free, CODE XREF=expand_bkref_cache+420, expand_bkref_cache+428
000000000000971b         call       j_free                                      ; free
0000000000009720         mov        eax, dword [rsp+0xa8+var_5C]
0000000000009724         test       eax, eax
0000000000009726         jne        loc_948f

                     loc_972c:
000000000000972c         mov        eax, 0xc                                    ; CODE XREF=expand_bkref_cache+793
0000000000009731         jmp        loc_948f

                     loc_9736:
0000000000009736         test       eax, eax                                    ; CODE XREF=expand_bkref_cache+724
0000000000009738         jne        loc_948f

000000000000973e         test       r14d, r14d
0000000000009741         mov        eax, r14d
0000000000009744         cmove      eax, r15d
0000000000009748         jmp        loc_948f

                     loc_974d:
000000000000974d         mov        qword [rsp+0xa8+var_50], 0x0                ; CODE XREF=expand_bkref_cache+645
0000000000009756         mov        qword [rsp+0xa8+var_58], 0x0
000000000000975f         mov        eax, 0xc
0000000000009764         jmp        loc_9660

                     loc_9769:
0000000000009769         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=expand_bkref_cache+205
                        ; endp
000000000000976e         align      16                                          ; End of unwind block (FDE at 0x17c20)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80


                     check_subexp_matching_top.isra.18:
0000000000009770         push       r15                                         ; Begin of unwind block (FDE at 0x17c6c), CODE XREF=transit_state_bkref.isra.34+2056, merge_state_with_log+417, re_search_internal+5535
0000000000009772         push       r14
0000000000009774         push       r13
0000000000009776         push       r12
0000000000009778         push       rbp
0000000000009779         push       rbx
000000000000977a         sub        rsp, 0x28
000000000000977e         cmp        qword [rsi], 0x0
0000000000009782         mov        r13, qword [rdi+0x98]
0000000000009789         jle        loc_9850

000000000000978f         mov        r14, rdx
0000000000009792         mov        r12, rsi
0000000000009795         mov        r15, rdi
0000000000009798         xor        ebx, ebx
000000000000979a         jmp        loc_97ae
000000000000979c         align      32

                     loc_97a0:
00000000000097a0         add        rbx, 0x1                                    ; CODE XREF=check_subexp_matching_top.isra.18+84, check_subexp_matching_top.isra.18+93, check_subexp_matching_top.isra.18+106
00000000000097a4         cmp        rbx, qword [r12]
00000000000097a8         jge        loc_9850

                     loc_97ae:
00000000000097ae         mov        rax, qword [r14]                            ; CODE XREF=check_subexp_matching_top.isra.18+42, check_subexp_matching_top.isra.18+211
00000000000097b1         mov        rbp, qword [rax+rbx*8]
00000000000097b5         mov        rax, rbp
00000000000097b8         shl        rax, 0x4
00000000000097bc         add        rax, qword [r13]
00000000000097c0         cmp        byte [rax+8], 0x8
00000000000097c4         jne        loc_97a0

00000000000097c6         mov        rax, qword [rax]
00000000000097c9         cmp        rax, 0x3f
00000000000097cd         jg         loc_97a0

00000000000097cf         mov        rsi, qword [r13+0xa0]
00000000000097d6         bt         rsi, rax
00000000000097da         jae        loc_97a0

00000000000097dc         mov        r8, qword [r15+0xe8]
00000000000097e3         cmp        r8, qword [r15+0xf0]
00000000000097ea         mov        r9, qword [r15+0xf8]
00000000000097f1         je         loc_9868

                     loc_97f3:
00000000000097f3         mov        esi, 0x30                                   ; argument "__size" for method j_calloc, CODE XREF=check_subexp_matching_top.isra.18+316
00000000000097f8         mov        edi, 0x1                                    ; argument "__nmemb" for method j_calloc
00000000000097fd         mov        qword [rsp+0x58+var_48], r9
0000000000009802         mov        qword [rsp+0x58+var_50], r8
0000000000009807         mov        qword [rsp+0x58+var_40], rcx
000000000000980c         call       j_calloc                                    ; calloc
0000000000009811         mov        r8, qword [rsp+0x58+var_50]
0000000000009816         mov        r9, qword [rsp+0x58+var_48]
000000000000981b         test       rax, rax
000000000000981e         mov        qword [r9+r8*8], rax
0000000000009822         je         loc_9861

0000000000009824         add        r8, 0x1
0000000000009828         add        rbx, 0x1
000000000000982c         mov        rcx, qword [rsp+0x58+var_40]
0000000000009831         mov        qword [r15+0xe8], r8
0000000000009838         cmp        rbx, qword [r12]
000000000000983c         mov        qword [rax+8], rbp
0000000000009840         mov        qword [rax], rcx
0000000000009843         jl         loc_97ae

0000000000009849         nop        dword [rax]

                     loc_9850:
0000000000009850         xor        eax, eax                                    ; CODE XREF=check_subexp_matching_top.isra.18+25, check_subexp_matching_top.isra.18+56

                     loc_9852:
0000000000009852         add        rsp, 0x28                                   ; CODE XREF=check_subexp_matching_top.isra.18+246
0000000000009856         pop        rbx
0000000000009857         pop        rbp
0000000000009858         pop        r12
000000000000985a         pop        r13
000000000000985c         pop        r14
000000000000985e         pop        r15
0000000000009860         ret
                        ; endp

                     loc_9861:
0000000000009861         mov        eax, 0xc                                    ; CODE XREF=check_subexp_matching_top.isra.18+178, check_subexp_matching_top.isra.18+288
0000000000009866         jmp        loc_9852

                     loc_9868:
0000000000009868         lea        rax, qword [r8+r8]                          ; CODE XREF=check_subexp_matching_top.isra.18+129
000000000000986c         mov        rsi, r8
000000000000986f         mov        rdi, r9                                     ; argument "__ptr" for method j_realloc
0000000000009872         shl        rsi, 0x4                                    ; argument "__size" for method j_realloc
0000000000009876         mov        qword [rsp+0x58+var_50], rcx
000000000000987b         mov        qword [rsp+0x58+var_48], rax
0000000000009880         call       j_realloc                                   ; realloc
0000000000009885         test       rax, rax
0000000000009888         mov        r9, rax
000000000000988b         mov        rcx, qword [rsp+0x58+var_50]
0000000000009890         je         loc_9861

0000000000009892         mov        qword [r15+0xf8], rax
0000000000009899         mov        rax, qword [rsp+0x58+var_48]
000000000000989e         mov        r8, qword [r15+0xe8]
00000000000098a5         mov        qword [r15+0xf0], rax
00000000000098ac         jmp        loc_97f3
00000000000098b1         align      64                                          ; End of unwind block (FDE at 0x17c6c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_string_context_at:
00000000000098c0         push       rbp                                         ; Begin of unwind block (FDE at 0x17cb8), CODE XREF=check_node_accept+109, check_halt_state_context.isra.20+22, re_string_reconstruct+201, re_string_reconstruct+805, re_string_reconstruct+1635, check_arrival+192, check_arrival+962, check_arrival+1179, transit_state_bkref.isra.34+265, transit_state_bkref.isra.34+1092, merge_state_with_log+222
00000000000098c1         push       rbx
00000000000098c2         mov        rbp, rdi
00000000000098c5         sub        rsp, 0x8
00000000000098c9         test       rsi, rsi
00000000000098cc         js         loc_9920

00000000000098ce         cmp        qword [rdi+0x58], rsi
00000000000098d2         je         loc_9978

00000000000098d8         cmp        dword [rdi+0x90], 0x1
00000000000098df         jle        loc_9930

00000000000098e1         mov        rax, qword [rdi+0x10]
00000000000098e5         jmp        loc_98fa
00000000000098e7         align      16

                     loc_98f0:
00000000000098f0         sub        rsi, 0x1                                    ; CODE XREF=re_string_context_at+64
00000000000098f4         cmp        rsi, 0xffffffffffffffff
00000000000098f8         je         loc_9920

                     loc_98fa:
00000000000098fa         mov        ebx, dword [rax+rsi*4]                      ; CODE XREF=re_string_context_at+37
00000000000098fd         cmp        ebx, 0xffffffff
0000000000009900         je         loc_98f0

0000000000009902         cmp        byte [rbp+0x8e], 0x0
0000000000009909         jne        loc_9988

                     loc_990b:
000000000000990b         xor        eax, eax                                    ; CODE XREF=re_string_context_at+214
000000000000990d         cmp        ebx, 0xa
0000000000009910         je         loc_995c

                     loc_9912:
0000000000009912         add        rsp, 0x8                                    ; CODE XREF=re_string_context_at+147, re_string_context_at+154, re_string_context_at+198, re_string_context_at+225
0000000000009916         pop        rbx
0000000000009917         pop        rbp
0000000000009918         ret
                        ; endp
0000000000009919         align      32

                     loc_9920:
0000000000009920         mov        eax, dword [rbp+0x70]                       ; CODE XREF=re_string_context_at+12, re_string_context_at+56
0000000000009923         add        rsp, 0x8
0000000000009927         pop        rbx
0000000000009928         pop        rbp
0000000000009929         ret
                        ; endp
000000000000992a         align      16

                     loc_9930:
0000000000009930         mov        rax, qword [rdi+8]                          ; CODE XREF=re_string_context_at+31
0000000000009934         mov        rcx, qword [rdi+0x80]
000000000000993b         movzx      eax, byte [rax+rsi]
000000000000993f         mov        rdx, rax
0000000000009942         sar        rax, 0x6
0000000000009946         mov        rcx, qword [rcx+rax*8]
000000000000994a         mov        eax, 0x1
000000000000994f         bt         rcx, rdx
0000000000009953         jb         loc_9912

0000000000009955         xor        eax, eax
0000000000009957         cmp        dl, 0xa
000000000000995a         jne        loc_9912

                     loc_995c:
000000000000995c         xor        eax, eax                                    ; CODE XREF=re_string_context_at+80
000000000000995e         cmp        byte [rbp+0x8d], 0x0
0000000000009965         setne      al
0000000000009968         add        rsp, 0x8
000000000000996c         add        eax, eax
000000000000996e         pop        rbx
000000000000996f         pop        rbp
0000000000009970         ret
                        ; endp
0000000000009971         align      8

                     loc_9978:
0000000000009978         and        edx, 0x2                                    ; CODE XREF=re_string_context_at+18
000000000000997b         cmp        edx, 0x1
000000000000997e         sbb        eax, eax
0000000000009980         and        eax, 0x2
0000000000009983         add        eax, 0x8
0000000000009986         jmp        loc_9912

                     loc_9988:
0000000000009988         mov        edi, ebx                                    ; argument "__wc" for method j_iswalnum, CODE XREF=re_string_context_at+73
000000000000998a         call       j_iswalnum                                  ; iswalnum
000000000000998f         test       eax, eax
0000000000009991         jne        loc_999c

0000000000009993         cmp        ebx, 0x5f
0000000000009996         jne        loc_990b

                     loc_999c:
000000000000999c         mov        eax, 0x1                                    ; CODE XREF=re_string_context_at+209
00000000000099a1         jmp        loc_9912
00000000000099a6         align      16                                          ; End of unwind block (FDE at 0x17cb8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     check_node_accept:
00000000000099b0         mov        rax, qword [rdi+8]                          ; Begin of unwind block (FDE at 0x17cfc), CODE XREF=check_arrival+495, set_regs+378, sift_states_backward+295
00000000000099b4         movzx      ecx, byte [rax+rdx]
00000000000099b8         movzx      eax, byte [rsi+8]
00000000000099bc         cmp        al, 0x3
00000000000099be         je         loc_9a78

00000000000099c4         jbe        loc_9a60

00000000000099ca         cmp        al, 0x5
00000000000099cc         je         loc_99e0

00000000000099ce         cmp        al, 0x7
00000000000099d0         jne        loc_9a70

00000000000099d6         xor        eax, eax
00000000000099d8         test       cl, cl
00000000000099da         js         loc_9a6a

                     loc_99e0:
00000000000099e0         cmp        cl, 0xa                                     ; CODE XREF=check_node_accept+28
00000000000099e3         je         loc_9aa8

00000000000099e9         test       cl, cl
00000000000099eb         jne        loc_9a00

00000000000099ed         mov        rcx, qword [rdi+0x98]
00000000000099f4         xor        eax, eax
00000000000099f6         test       byte [rcx+0xd8], 0x80
00000000000099fd         jne        loc_9a6a

00000000000099ff         nop

                     loc_9a00:
0000000000009a00         push       rbx                                         ; CODE XREF=check_node_accept+59, check_node_accept+184, check_node_accept+220, check_node_accept+264
0000000000009a01         mov        ebx, dword [rsi+8]
0000000000009a04         mov        eax, 0x1
0000000000009a09         test       ebx, 0x3ff00
0000000000009a0f         je         loc_9a5c

0000000000009a11         mov        rsi, rdx
0000000000009a14         mov        edx, dword [rdi+0xa0]
0000000000009a1a         shr        ebx, 0x8
0000000000009a1d         call       re_string_context_at                        ; re_string_context_at
0000000000009a22         mov        ecx, ebx
0000000000009a24         mov        edx, eax
0000000000009a26         and        cx, 0x3ff
0000000000009a2b         test       bl, 0x4
0000000000009a2e         je         loc_9a98

0000000000009a30         xor        eax, eax
0000000000009a32         test       dl, 0x1
0000000000009a35         je         loc_9a5c

0000000000009a37         and        ebx, 0x8
0000000000009a3a         jne        loc_9a5c

                     loc_9a3c:
0000000000009a3c         test       cl, 0x20                                    ; CODE XREF=check_node_accept+235, check_node_accept+239
0000000000009a3f         je         loc_9a48

0000000000009a41         xor        eax, eax
0000000000009a43         test       dl, 0x2
0000000000009a46         je         loc_9a5c

                     loc_9a48:
0000000000009a48         shr        edx, 0x3                                    ; CODE XREF=check_node_accept+143
0000000000009a4b         mov        eax, 0x1
0000000000009a50         and        edx, 0x1
0000000000009a53         and        ecx, 0x80
0000000000009a59         cmovne     eax, edx

                     loc_9a5c:
0000000000009a5c         pop        rbx                                         ; CODE XREF=check_node_accept+95, check_node_accept+133, check_node_accept+138, check_node_accept+150
0000000000009a5d         ret
                        ; endp
0000000000009a5e         align      32

                     loc_9a60:
0000000000009a60         cmp        al, 0x1                                     ; CODE XREF=check_node_accept+20
0000000000009a62         jne        loc_9a70

0000000000009a64         xor        eax, eax
0000000000009a66         cmp        byte [rsi], cl
0000000000009a68         je         loc_9a00

                     loc_9a6a:
0000000000009a6a         ret                                                    ; CODE XREF=check_node_accept+42, check_node_accept+77
                        ; endp
0000000000009a6c         align      16

                     loc_9a70:
0000000000009a70         xor        eax, eax                                    ; CODE XREF=check_node_accept+32, check_node_accept+178
0000000000009a72         ret
                        ; endp
0000000000009a73         align      8

                     loc_9a78:
0000000000009a78         mov        r8, qword [rsi]                             ; CODE XREF=check_node_accept+14
0000000000009a7b         movzx      eax, cl
0000000000009a7e         sar        rax, 0x6
0000000000009a82         mov        r8, qword [r8+rax*8]
0000000000009a86         xor        eax, eax
0000000000009a88         bt         r8, rcx
0000000000009a8c         jb         loc_9a00

0000000000009a92         ret
                        ; endp
0000000000009a94         align      8

                     loc_9a98:
0000000000009a98         and        ebx, 0x8                                    ; CODE XREF=check_node_accept+126
0000000000009a9b         je         loc_9a3c

0000000000009a9d         test       al, 0x1
0000000000009a9f         je         loc_9a3c

0000000000009aa1         xor        eax, eax
0000000000009aa3         pop        rbx
0000000000009aa4         ret
                        ; endp
0000000000009aa5         align      8

                     loc_9aa8:
0000000000009aa8         mov        rcx, qword [rdi+0x98]                       ; CODE XREF=check_node_accept+51
0000000000009aaf         xor        eax, eax
0000000000009ab1         test       byte [rcx+0xd8], 0x40
0000000000009ab8         jne        loc_9a00

0000000000009abe         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     check_halt_state_context.isra.20:
0000000000009ac0         push       r12                                         ; End of unwind block (FDE at 0x17cfc), Begin of unwind block (FDE at 0x17d24), CODE XREF=re_search_internal+2247, re_search_internal+2620, re_search_internal+3076, re_search_internal+4556, re_search_internal+5591
0000000000009ac2         mov        r12, rdx
0000000000009ac5         push       rbp
0000000000009ac6         push       rbx
0000000000009ac7         mov        edx, dword [rdi+0xa0]
0000000000009acd         mov        rbx, rsi
0000000000009ad0         mov        rsi, rcx
0000000000009ad3         mov        rbp, rdi
0000000000009ad6         call       re_string_context_at                        ; re_string_context_at
0000000000009adb         test       rbx, rbx
0000000000009ade         jle        loc_9b88

0000000000009ae4         mov        rdx, qword [rbp+0x98]
0000000000009aeb         mov        r11d, eax
0000000000009aee         mov        ebp, eax
0000000000009af0         and        eax, 0x1
0000000000009af3         mov        r9, qword [r12]
0000000000009af7         xor        esi, esi
0000000000009af9         and        ebp, 0x8
0000000000009afc         and        r11d, 0x2
0000000000009b00         mov        r10d, eax
0000000000009b03         mov        r8, qword [rdx]
0000000000009b06         jmp        loc_9b19
0000000000009b08         align      16

                     loc_9b10:
0000000000009b10         add        rsi, 0x1                                    ; CODE XREF=check_halt_state_context.isra.20+120, check_halt_state_context.isra.20+135, check_halt_state_context.isra.20+140, check_halt_state_context.isra.20+151, check_halt_state_context.isra.20+163, check_halt_state_context.isra.20+184
0000000000009b14         cmp        rsi, rbx
0000000000009b17         je         loc_9b88

                     loc_9b19:
0000000000009b19         mov        rax, qword [r9+rsi*8]                       ; CODE XREF=check_halt_state_context.isra.20+70
0000000000009b1d         mov        rdx, rax
0000000000009b20         shl        rdx, 0x4
0000000000009b24         add        rdx, r8
0000000000009b27         mov        ecx, dword [rdx+8]
0000000000009b2a         shr        ecx, 0x8
0000000000009b2d         mov        edi, ecx
0000000000009b2f         and        di, 0x3ff
0000000000009b34         cmp        byte [rdx+8], 0x2
0000000000009b38         jne        loc_9b10

0000000000009b3a         test       di, di
0000000000009b3d         je         loc_9b65

0000000000009b3f         test       cl, 0x4
0000000000009b42         je         loc_9b70

0000000000009b44         test       r10d, r10d
0000000000009b47         je         loc_9b10

0000000000009b49         and        ecx, 0x8
0000000000009b4c         jne        loc_9b10

                     loc_9b4e:
0000000000009b4e         test       dil, 0x20                                   ; CODE XREF=check_halt_state_context.isra.20+179
0000000000009b52         je         loc_9b59

                     loc_9b54:
0000000000009b54         test       r11d, r11d                                  ; CODE XREF=check_halt_state_context.isra.20+192
0000000000009b57         je         loc_9b10

                     loc_9b59:
0000000000009b59         and        edi, 0x80                                   ; CODE XREF=check_halt_state_context.isra.20+146, check_halt_state_context.isra.20+190
0000000000009b5f         je         loc_9b65

0000000000009b61         test       ebp, ebp
0000000000009b63         je         loc_9b10

                     loc_9b65:
0000000000009b65         pop        rbx                                         ; CODE XREF=check_halt_state_context.isra.20+125, check_halt_state_context.isra.20+159
0000000000009b66         pop        rbp
0000000000009b67         pop        r12
0000000000009b69         ret
                        ; endp
0000000000009b6a         align      16

                     loc_9b70:
0000000000009b70         and        ecx, 0x8                                    ; CODE XREF=check_halt_state_context.isra.20+130
0000000000009b73         je         loc_9b4e

0000000000009b75         test       r10d, r10d
0000000000009b78         jne        loc_9b10

0000000000009b7a         test       dil, 0x20
0000000000009b7e         je         loc_9b59

0000000000009b80         jmp        loc_9b54
0000000000009b82         align      8

                     loc_9b88:
0000000000009b88         pop        rbx                                         ; CODE XREF=check_halt_state_context.isra.20+30, check_halt_state_context.isra.20+87
0000000000009b89         xor        eax, eax
0000000000009b8b         pop        rbp
0000000000009b8c         pop        r12
0000000000009b8e         ret
                        ; endp
0000000000009b8f         align      16                                          ; End of unwind block (FDE at 0x17d24)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_46: int8_t, -70
        ;    var_50: int64_t, -80
        ;    var_54: int32_t, -84
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_6C: int32_t, -108
        ;    var_78: int64_t, -120


                     re_string_reconstruct:
0000000000009b90         push       r15                                         ; Begin of unwind block (FDE at 0x17d5c), CODE XREF=re_search_internal+1510, re_search_internal+4443
0000000000009b92         push       r14
0000000000009b94         mov        r15, rsi
0000000000009b97         push       r13
0000000000009b99         push       r12
0000000000009b9b         mov        r10d, edx
0000000000009b9e         push       rbp
0000000000009b9f         push       rbx
0000000000009ba0         mov        rbp, rsi
0000000000009ba3         mov        rbx, rdi
0000000000009ba6         sub        rsp, 0x48
0000000000009baa         mov        rax, qword [fs:0x28]
0000000000009bb3         mov        qword [rsp+0x78+var_40], rax
0000000000009bb8         xor        eax, eax
0000000000009bba         mov        rax, qword [rdi+0x28]
0000000000009bbe         sub        rbp, rax
0000000000009bc1         cmp        rax, rsi
0000000000009bc4         jle        loc_9c26

0000000000009bc6         cmp        dword [rdi+0x90], 0x1
0000000000009bcd         jg         loc_9d00

                     loc_9bd3:
0000000000009bd3         mov        rax, qword [rbx+0x50]                       ; CODE XREF=re_string_reconstruct+376
0000000000009bd7         mov        qword [rbx+0x30], 0x0
0000000000009bdf         mov        rbp, r15
0000000000009be2         mov        qword [rbx+0x28], 0x0
0000000000009bea         mov        qword [rbx+0x38], 0x0
0000000000009bf2         mov        byte [rbx+0x8c], 0x0
0000000000009bf9         mov        qword [rbx+0x58], rax
0000000000009bfd         mov        rax, qword [rbx+0x60]
0000000000009c01         mov        qword [rbx+0x68], rax
0000000000009c05         mov        eax, r10d
0000000000009c08         and        eax, 0x1
0000000000009c0b         cmp        eax, 0x1
0000000000009c0e         sbb        eax, eax
0000000000009c10         and        eax, 0x2
0000000000009c13         add        eax, 0x4
0000000000009c16         cmp        byte [rbx+0x8b], 0x0
0000000000009c1d         mov        dword [rbx+0x70], eax
0000000000009c20         je         loc_9cf0

                     loc_9c26:
0000000000009c26         test       rbp, rbp                                    ; CODE XREF=re_string_reconstruct+52, re_string_reconstruct+359
0000000000009c29         je         loc_9c8e

0000000000009c2b         mov        rax, qword [rbx+0x38]
0000000000009c2f         movzx      edx, byte [rbx+0x8c]
0000000000009c36         mov        r8, qword [rbx+0x30]
0000000000009c3a         cmp        rax, rbp
0000000000009c3d         jle        loc_9d60

0000000000009c43         test       dl, dl
0000000000009c45         jne        loc_9e58

0000000000009c4b         lea        rsi, qword [rbp-1]
0000000000009c4f         mov        edx, r10d
0000000000009c52         mov        rdi, rbx
0000000000009c55         mov        qword [rsp+0x78+var_78], r8
0000000000009c59         call       re_string_context_at                        ; re_string_context_at
0000000000009c5e         mov        r8, qword [rsp+0x78+var_78]
0000000000009c62         mov        dword [rbx+0x70], eax
0000000000009c65         sub        r8, rbp
0000000000009c68         cmp        dword [rbx+0x90], 0x1
0000000000009c6f         jg         loc_9d10

                     loc_9c75:
0000000000009c75         cmp        byte [rbx+0x8b], 0x0                        ; CODE XREF=re_string_reconstruct+412
0000000000009c7c         jne        loc_a020

0000000000009c82         sub        qword [rbx+0x38], rbp
0000000000009c86         mov        qword [rbx+0x30], r8

                     loc_9c8a:
0000000000009c8a         add        qword [rbx+8], rbp                          ; CODE XREF=re_string_reconstruct+1150, re_string_reconstruct+1780

                     loc_9c8e:
0000000000009c8e         mov        rax, qword [rbx+0x58]                       ; CODE XREF=re_string_reconstruct+153, re_string_reconstruct+1156
0000000000009c92         sub        qword [rbx+0x68], rbp
0000000000009c96         mov        qword [rbx+0x28], r15
0000000000009c9a         sub        rax, rbp
0000000000009c9d         cmp        dword [rbx+0x90], 0x1
0000000000009ca4         mov        qword [rbx+0x58], rax
0000000000009ca8         jle        loc_9d48

0000000000009cae         cmp        byte [rbx+0x88], 0x0
0000000000009cb5         mov        rdi, rbx
0000000000009cb8         je         loc_9d38

0000000000009cba         call       build_wcs_upper_buffer                      ; build_wcs_upper_buffer
0000000000009cbf         test       eax, eax
0000000000009cc1         jne        loc_9ccd

                     loc_9cc3:
0000000000009cc3         mov        qword [rbx+0x48], 0x0                       ; CODE XREF=re_string_reconstruct+429, re_string_reconstruct+457, re_string_reconstruct+1412, re_string_reconstruct+1488, re_string_reconstruct+1656
0000000000009ccb         xor        eax, eax

                     loc_9ccd:
0000000000009ccd         mov        rcx, qword [rsp+0x78+var_40]                ; CODE XREF=re_string_reconstruct+305
0000000000009cd2         xor        rcx, qword [fs:0x28]
0000000000009cdb         jne        loc_a32a

0000000000009ce1         add        rsp, 0x48
0000000000009ce5         pop        rbx
0000000000009ce6         pop        rbp
0000000000009ce7         pop        r12
0000000000009ce9         pop        r13
0000000000009ceb         pop        r14
0000000000009ced         pop        r15
0000000000009cef         ret
                        ; endp

                     loc_9cf0:
0000000000009cf0         mov        rax, qword [rbx]                            ; CODE XREF=re_string_reconstruct+144
0000000000009cf3         mov        qword [rbx+8], rax
0000000000009cf7         jmp        loc_9c26
0000000000009cfc         align      256

                     loc_9d00:
0000000000009d00         mov        qword [rdi+0x20], 0x0                       ; CODE XREF=re_string_reconstruct+61
0000000000009d08         jmp        loc_9bd3
0000000000009d0d         align      16

                     loc_9d10:
0000000000009d10         mov        rdi, qword [rbx+0x10]                       ; argument "__dest" for method j_memmove, CODE XREF=re_string_reconstruct+223
0000000000009d14         lea        rdx, qword [r8*4]                           ; argument "__n" for method j_memmove
0000000000009d1c         lea        rsi, qword [rdi+rbp*4]                      ; argument "__src" for method j_memmove
0000000000009d20         call       j_memmove                                   ; memmove
0000000000009d25         mov        r8, qword [rbx+0x30]
0000000000009d29         sub        r8, rbp
0000000000009d2c         jmp        loc_9c75
0000000000009d31         align      8

                     loc_9d38:
0000000000009d38         call       build_wcs_buffer                            ; build_wcs_buffer, CODE XREF=re_string_reconstruct+296
0000000000009d3d         jmp        loc_9cc3
0000000000009d42         align      8

                     loc_9d48:
0000000000009d48         cmp        byte [rbx+0x8b], 0x0                        ; CODE XREF=re_string_reconstruct+280
0000000000009d4f         jne        loc_a100

0000000000009d55         mov        qword [rbx+0x30], rax
0000000000009d59         jmp        loc_9cc3
0000000000009d5e         align      32

                     loc_9d60:
0000000000009d60         test       dl, dl                                      ; CODE XREF=re_string_reconstruct+173
0000000000009d62         jne        loc_a20d

                     loc_9d68:
0000000000009d68         movsxd     rdx, dword [rbx+0x90]                       ; CODE XREF=re_string_reconstruct+1696
0000000000009d6f         mov        qword [rbx+0x30], 0x0
0000000000009d77         mov        r11, qword [rbx+0x28]
0000000000009d7b         cmp        edx, 0x1
0000000000009d7e         jle        loc_a168

0000000000009d84         cmp        byte [rbx+0x89], 0x0
0000000000009d8b         jne        loc_a048

                     loc_9d91:
0000000000009d91         lea        r14, qword [r11+rax]                        ; CODE XREF=re_string_reconstruct+1244, re_string_reconstruct+1263, re_string_reconstruct+1380
0000000000009d95         cmp        r15, r14
0000000000009d98         jle        loc_a1df

0000000000009d9e         lea        rax, qword [rbx+0x20]
0000000000009da2         lea        r13, qword [rsp+0x78+var_54]
0000000000009da7         mov        qword [rsp+0x78+var_68], rax
0000000000009dac         nop        dword [rax]

                     loc_9db0:
0000000000009db0         mov        r12, qword [rbx+0x50]                       ; CODE XREF=re_string_reconstruct+624
0000000000009db4         mov        rsi, qword [rbx]
0000000000009db7         mov        rdi, r13
0000000000009dba         mov        rax, qword [rbx+0x20]
0000000000009dbe         mov        rcx, qword [rsp+0x78+var_68]
0000000000009dc3         mov        dword [rsp+0x78+var_6C], r10d
0000000000009dc8         mov        qword [rsp+0x78+var_78], r8
0000000000009dcc         sub        r12, r14
0000000000009dcf         add        rsi, r14
0000000000009dd2         mov        rdx, r12
0000000000009dd5         mov        qword [rsp+0x78+var_60], rax
0000000000009dda         call       rpl_mbrtowc                                 ; rpl_mbrtowc
0000000000009ddf         lea        rcx, qword [rax-1]
0000000000009de3         mov        edx, dword [rsp+0x78+var_54]
0000000000009de7         mov        r8, qword [rsp+0x78+var_78]
0000000000009deb         mov        r10d, dword [rsp+0x78+var_6C]
0000000000009df0         cmp        rcx, 0xfffffffffffffffc
0000000000009df4         ja         loc_a235

                     loc_9dfa:
0000000000009dfa         add        r14, rax                                    ; CODE XREF=re_string_reconstruct+1733
0000000000009dfd         cmp        r15, r14
0000000000009e00         jg         loc_9db0

0000000000009e02         sub        r14, r15
0000000000009e05         cmp        edx, 0xffffffff
0000000000009e08         mov        r12, r14
0000000000009e0b         mov        qword [rbx+0x30], r14
0000000000009e0f         je         loc_a1e9

                     loc_9e15:
0000000000009e15         cmp        byte [rbx+0x8e], 0x0                        ; CODE XREF=re_string_reconstruct+1850
0000000000009e1c         jne        loc_a289

                     loc_9e22:
0000000000009e22         xor        eax, eax                                    ; CODE XREF=re_string_reconstruct+1805
0000000000009e24         cmp        edx, 0xa
0000000000009e27         jne        loc_9e37

0000000000009e29         xor        eax, eax
0000000000009e2b         cmp        byte [rbx+0x8d], 0x0
0000000000009e32         setne      al
0000000000009e35         add        eax, eax

                     loc_9e37:
0000000000009e37         mov        dword [rbx+0x70], eax                       ; CODE XREF=re_string_reconstruct+663, re_string_reconstruct+1816

                     loc_9e3a:
0000000000009e3a         cmp        r12, 0x0                                    ; CODE XREF=re_string_reconstruct+1643
0000000000009e3e         jne        loc_a25a

                     loc_9e44:
0000000000009e44         movzx      eax, byte [rbx+0x8b]                        ; CODE XREF=re_string_reconstruct+1885
0000000000009e4b         mov        qword [rbx+0x38], r12
0000000000009e4f         jmp        loc_a00c
0000000000009e54         align      8

                     loc_9e58:
0000000000009e58         mov        r14, qword [rbx+0x18]                       ; CODE XREF=re_string_reconstruct+181
0000000000009e5c         mov        rcx, r8
0000000000009e5f         xor        esi, esi
0000000000009e61         jmp        loc_9e73
0000000000009e63         align      8

                     loc_9e68:
0000000000009e68         jge        loc_9ea3                                    ; CODE XREF=re_string_reconstruct+766

0000000000009e6a         lea        rsi, qword [rax+1]

                     loc_9e6e:
0000000000009e6e         cmp        rsi, rcx                                    ; CODE XREF=re_string_reconstruct+771
0000000000009e71         jge        loc_9e98

                     loc_9e73:
0000000000009e73         lea        rdx, qword [rsi+rcx]                        ; CODE XREF=re_string_reconstruct+721
0000000000009e77         mov        rax, rdx
0000000000009e7a         shr        rax, 0x3f
0000000000009e7e         add        rax, rdx
0000000000009e81         sar        rax, 0x1
0000000000009e84         mov        rdx, qword [r14+rax*8]
0000000000009e88         mov        r12, rax
0000000000009e8b         cmp        rdx, rbp
0000000000009e8e         jle        loc_9e68

0000000000009e90         mov        rcx, rax
0000000000009e93         jmp        loc_9e6e
0000000000009e95         align      8

                     loc_9e98:
0000000000009e98         lea        r12, qword [rax+1]                          ; CODE XREF=re_string_reconstruct+737
0000000000009e9c         cmp        rdx, rbp
0000000000009e9f         cmovge     r12, rax

                     loc_9ea3:
0000000000009ea3         lea        r13, qword [r12-1]                          ; CODE XREF=loc_9e68
0000000000009ea8         mov        edx, r10d
0000000000009eab         mov        rdi, rbx
0000000000009eae         mov        qword [rsp+0x78+var_78], r8
0000000000009eb2         mov        rsi, r13
0000000000009eb5         call       re_string_context_at                        ; re_string_context_at
0000000000009eba         cmp        rbp, r12
0000000000009ebd         mov        dword [rbx+0x70], eax
0000000000009ec0         mov        r8, qword [rsp+0x78+var_78]
0000000000009ec4         jne        loc_9f48

0000000000009eca         cmp        rbp, r8
0000000000009ecd         jge        loc_9f48

0000000000009ecf         cmp        qword [r14+r12*8], rbp
0000000000009ed3         jne        loc_9f48

0000000000009ed5         mov        rdi, qword [rbx+0x10]                       ; argument "__dest" for method j_memmove
0000000000009ed9         sub        r8, rbp
0000000000009edc         lea        rdx, qword [r8*4]                           ; argument "__n" for method j_memmove
0000000000009ee4         lea        rsi, qword [rdi+rbp*4]                      ; argument "__src" for method j_memmove
0000000000009ee8         call       j_memmove                                   ; memmove
0000000000009eed         mov        rdi, qword [rbx+8]                          ; argument "__dest" for method j_memmove
0000000000009ef1         mov        rdx, qword [rbx+0x30]
0000000000009ef5         lea        rsi, qword [rdi+rbp]                        ; argument "__src" for method j_memmove
0000000000009ef9         sub        rdx, rbp                                    ; argument "__n" for method j_memmove
0000000000009efc         call       j_memmove                                   ; memmove
0000000000009f01         mov        rax, qword [rbx+0x30]
0000000000009f05         sub        qword [rbx+0x38], rbp
0000000000009f09         sub        rax, rbp
0000000000009f0c         test       rax, rax
0000000000009f0f         mov        qword [rbx+0x30], rax
0000000000009f13         jle        loc_9f38

0000000000009f15         mov        rcx, qword [rbx+0x18]
0000000000009f19         xor        eax, eax
0000000000009f1b         lea        rsi, qword [rcx+rbp*8]
0000000000009f1f         nop

                     loc_9f20:
0000000000009f20         mov        rdx, qword [rsi+rax*8]                      ; CODE XREF=re_string_reconstruct+931
0000000000009f24         sub        rdx, rbp
0000000000009f27         mov        qword [rcx+rax*8], rdx
0000000000009f2b         add        rax, 0x1
0000000000009f2f         cmp        qword [rbx+0x30], rax
0000000000009f33         jg         loc_9f20

0000000000009f35         nop        dword [rax]

                     loc_9f38:
0000000000009f38         movzx      eax, byte [rbx+0x8b]                        ; CODE XREF=re_string_reconstruct+899, re_string_reconstruct+1587
0000000000009f3f         jmp        loc_a00c
0000000000009f44         align      8

                     loc_9f48:
0000000000009f48         mov        rax, qword [rbx+0x50]                       ; CODE XREF=re_string_reconstruct+820, re_string_reconstruct+829, re_string_reconstruct+835
0000000000009f4c         mov        byte [rbx+0x8c], 0x0
0000000000009f53         add        rax, rbp
0000000000009f56         sub        rax, r15
0000000000009f59         mov        qword [rbx+0x58], rax
0000000000009f5d         mov        rax, qword [rbx+0x60]
0000000000009f61         add        rax, rbp
0000000000009f64         sub        rax, r15
0000000000009f67         test       r12, r12
0000000000009f6a         mov        qword [rbx+0x68], rax
0000000000009f6e         jle        loc_9f93

0000000000009f70         cmp        qword [r14+r12*8-8], rbp
0000000000009f75         je         loc_9f8b

0000000000009f77         jmp        loc_9f93
0000000000009f79         align      128

                     loc_9f80:
0000000000009f80         cmp        qword [r14+r13*8-8], rbp                    ; CODE XREF=re_string_reconstruct+1025
0000000000009f85         jne        loc_9f93

0000000000009f87         sub        r13, 0x1

                     loc_9f8b:
0000000000009f8b         test       r13, r13                                    ; CODE XREF=re_string_reconstruct+997
0000000000009f8e         mov        r12, r13
0000000000009f91         jne        loc_9f80

                     loc_9f93:
0000000000009f93         cmp        r12, r8                                     ; CODE XREF=re_string_reconstruct+990, re_string_reconstruct+999, re_string_reconstruct+1013
0000000000009f96         jge        loc_a1c8

0000000000009f9c         mov        rax, qword [rbx+0x10]
0000000000009fa0         jmp        loc_9fb5
0000000000009fa2         align      8

                     loc_9fa8:
0000000000009fa8         add        r12, 0x1                                    ; CODE XREF=re_string_reconstruct+1066
0000000000009fac         cmp        r12, r8
0000000000009faf         je         loc_a1d0

                     loc_9fb5:
0000000000009fb5         cmp        dword [rax+r12*4], 0xffffffff               ; CODE XREF=re_string_reconstruct+1040
0000000000009fba         je         loc_9fa8

                     loc_9fbc:
0000000000009fbc         mov        rdx, qword [r14+r12*8]                      ; CODE XREF=loc_a1c8
0000000000009fc0         sub        rdx, rbp
0000000000009fc3         cmp        rdx, 0x0
0000000000009fc7         mov        qword [rbx+0x30], rdx
0000000000009fcb         je         loc_a001

0000000000009fcd         jle        loc_9fef

0000000000009fcf         mov        rax, qword [rbx+0x10]
0000000000009fd3         lea        rcx, qword [rax+rdx*4]
0000000000009fd7         nop        word [rax+rax]

                     loc_9fe0:
0000000000009fe0         mov        dword [rax], 0xffffffff                     ; CODE XREF=re_string_reconstruct+1117
0000000000009fe6         add        rax, 0x4
0000000000009fea         cmp        rcx, rax
0000000000009fed         jne        loc_9fe0

                     loc_9fef:
0000000000009fef         mov        rdi, qword [rbx+8]                          ; argument "__s" for method j_memset, CODE XREF=re_string_reconstruct+1085
0000000000009ff3         mov        esi, 0xff                                   ; argument "__c" for method j_memset
0000000000009ff8         call       j_memset                                    ; memset
0000000000009ffd         mov        rdx, qword [rbx+0x30]

                     loc_a001:
000000000000a001         movzx      eax, byte [rbx+0x8b]                        ; CODE XREF=re_string_reconstruct+1083, re_string_reconstruct+1610
000000000000a008         mov        qword [rbx+0x38], rdx

                     loc_a00c:
000000000000a00c         test       al, al                                      ; CODE XREF=re_string_reconstruct+703, re_string_reconstruct+943, re_string_reconstruct+1199
000000000000a00e         je         loc_9c8a

000000000000a014         jmp        loc_9c8e
000000000000a019         align      32

                     loc_a020:
000000000000a020         mov        rdi, qword [rbx+8]                          ; argument "__dest" for method j_memmove, CODE XREF=re_string_reconstruct+236
000000000000a024         mov        rdx, r8                                     ; argument "__n" for method j_memmove
000000000000a027         lea        rsi, qword [rdi+rbp]                        ; argument "__src" for method j_memmove
000000000000a02b         call       j_memmove                                   ; memmove
000000000000a030         movzx      eax, byte [rbx+0x8b]
000000000000a037         sub        qword [rbx+0x30], rbp
000000000000a03b         sub        qword [rbx+0x38], rbp
000000000000a03f         jmp        loc_a00c
000000000000a041         align      8

                     loc_a048:
000000000000a048         mov        rcx, qword [rbx]                            ; CODE XREF=re_string_reconstruct+507
000000000000a04b         mov        rdi, rbp
000000000000a04e         sub        rdi, rdx
000000000000a051         mov        rdx, rdi
000000000000a054         lea        r12, qword [rcx+r11]
000000000000a058         add        rdx, r12
000000000000a05b         lea        rsi, qword [r12+rbp-1]
000000000000a060         cmp        rcx, rdx
000000000000a063         cmovb      rcx, rdx
000000000000a067         cmp        rcx, rsi
000000000000a06a         jbe        loc_a085

000000000000a06c         jmp        loc_9d91
000000000000a071         align      8

                     loc_a078:
000000000000a078         sub        rsi, 0x1                                    ; CODE XREF=re_string_reconstruct+1278
000000000000a07c         cmp        rcx, rsi
000000000000a07f         ja         loc_9d91

                     loc_a085:
000000000000a085         movzx      edx, byte [rsi]                             ; CODE XREF=re_string_reconstruct+1242
000000000000a088         and        edx, 0xffffffc0
000000000000a08b         cmp        dl, 0x80
000000000000a08e         je         loc_a078

000000000000a090         mov        rdx, qword [rbx+0x58]
000000000000a094         mov        rcx, qword [rbx+0x78]
000000000000a098         mov        r14, rsi
000000000000a09b         add        rdx, r12
000000000000a09e         sub        rdx, rsi
000000000000a0a1         test       rcx, rcx
000000000000a0a4         jne        loc_a2f2

                     loc_a0aa:
000000000000a0aa         lea        r13, qword [rsp+0x78+var_54]                ; CODE XREF=re_string_reconstruct+1941
000000000000a0af         add        r12, rbp
000000000000a0b2         lea        rcx, qword [rsp+0x78+var_50]
000000000000a0b7         sub        r12, r14
000000000000a0ba         mov        dword [rsp+0x78+var_6C], r10d
000000000000a0bf         mov        qword [rsp+0x78+var_78], r8
000000000000a0c3         mov        rdi, r13
000000000000a0c6         mov        qword [rsp+0x78+var_50], 0x0
000000000000a0cf         call       rpl_mbrtowc                                 ; rpl_mbrtowc
000000000000a0d4         cmp        r12, rax
000000000000a0d7         mov        r8, qword [rsp+0x78+var_78]
000000000000a0db         mov        r10d, dword [rsp+0x78+var_6C]
000000000000a0e0         ja         loc_a0ec

000000000000a0e2         cmp        rax, 0xfffffffffffffffd
000000000000a0e6         jbe        loc_a2b1

                     loc_a0ec:
000000000000a0ec         mov        r11, qword [rbx+0x28]                       ; CODE XREF=re_string_reconstruct+1360, re_string_reconstruct+1856
000000000000a0f0         mov        rax, qword [rbx+0x38]
000000000000a0f4         jmp        loc_9d91
000000000000a0f9         align      256

                     loc_a100:
000000000000a100         cmp        byte [rbx+0x88], 0x0                        ; CODE XREF=re_string_reconstruct+447
000000000000a107         jne        loc_a200

000000000000a10d         mov        rcx, qword [rbx+0x78]
000000000000a111         test       rcx, rcx
000000000000a114         je         loc_9cc3

000000000000a11a         cmp        qword [rbx+0x40], rax
000000000000a11e         mov        rdx, qword [rbx+0x30]
000000000000a122         cmovle     rax, qword [rbx+0x40]
000000000000a127         cmp        rax, rdx
000000000000a12a         jg         loc_a138

000000000000a12c         jmp        loc_a158
000000000000a12e         align      16

                     loc_a130:
000000000000a130         mov        r15, qword [rbx+0x28]                       ; CODE XREF=re_string_reconstruct+1478
000000000000a134         mov        rcx, qword [rbx+0x78]

                     loc_a138:
000000000000a138         mov        rsi, qword [rbx]                            ; CODE XREF=re_string_reconstruct+1434
000000000000a13b         add        rsi, rdx
000000000000a13e         movzx      esi, byte [rsi+r15]
000000000000a143         movzx      esi, byte [rcx+rsi]
000000000000a147         mov        rcx, qword [rbx+8]
000000000000a14b         mov        byte [rcx+rdx], sil
000000000000a14f         add        rdx, 0x1
000000000000a153         cmp        rax, rdx
000000000000a156         jne        loc_a130

                     loc_a158:
000000000000a158         mov        qword [rbx+0x30], rdx                       ; CODE XREF=re_string_reconstruct+1436
000000000000a15c         mov        qword [rbx+0x38], rdx
000000000000a160         jmp        loc_9cc3
000000000000a165         align      8

                     loc_a168:
000000000000a168         mov        rax, qword [rbx]                            ; CODE XREF=re_string_reconstruct+494
000000000000a16b         mov        rdx, qword [rbx+0x78]
000000000000a16f         add        rax, rbp
000000000000a172         test       rdx, rdx
000000000000a175         movzx      eax, byte [r11+rax-1]
000000000000a17b         mov        qword [rbx+0x38], 0x0
000000000000a183         je         loc_a189

000000000000a185         movzx      eax, byte [rdx+rax]

                     loc_a189:
000000000000a189         mov        rcx, qword [rbx+0x80]                       ; CODE XREF=re_string_reconstruct+1523
000000000000a190         movzx      edx, al
000000000000a193         sar        rdx, 0x6
000000000000a197         mov        rcx, qword [rcx+rdx*8]
000000000000a19b         mov        edx, 0x1
000000000000a1a0         bt         rcx, rax
000000000000a1a4         jb         loc_a1c0

000000000000a1a6         xor        edx, edx
000000000000a1a8         cmp        al, 0xa
000000000000a1aa         jne        loc_a1c0

000000000000a1ac         xor        edx, edx
000000000000a1ae         cmp        byte [rbx+0x8d], 0x0
000000000000a1b5         setne      dl
000000000000a1b8         add        edx, edx
000000000000a1ba         nop        word [rax+rax]

                     loc_a1c0:
000000000000a1c0         mov        dword [rbx+0x70], edx                       ; CODE XREF=re_string_reconstruct+1556, re_string_reconstruct+1562
000000000000a1c3         jmp        loc_9f38

                     loc_a1c8:
000000000000a1c8         jne        loc_9fbc                                    ; CODE XREF=re_string_reconstruct+1030

000000000000a1ce         nop

                     loc_a1d0:
000000000000a1d0         mov        qword [rbx+0x30], 0x0                       ; CODE XREF=re_string_reconstruct+1055
000000000000a1d8         xor        edx, edx
000000000000a1da         jmp        loc_a001

                     loc_a1df:
000000000000a1df         sub        r14, r15                                    ; CODE XREF=re_string_reconstruct+520
000000000000a1e2         mov        r12, r14
000000000000a1e5         mov        qword [rbx+0x30], r14

                     loc_a1e9:
000000000000a1e9         lea        rsi, qword [r8-1]                           ; CODE XREF=re_string_reconstruct+639
000000000000a1ed         mov        edx, r10d
000000000000a1f0         mov        rdi, rbx
000000000000a1f3         call       re_string_context_at                        ; re_string_context_at
000000000000a1f8         mov        dword [rbx+0x70], eax
000000000000a1fb         jmp        loc_9e3a

                     loc_a200:
000000000000a200         mov        rdi, rbx                                    ; CODE XREF=re_string_reconstruct+1399
000000000000a203         call       build_upper_buffer                          ; build_upper_buffer
000000000000a208         jmp        loc_9cc3

                     loc_a20d:
000000000000a20d         mov        rdx, qword [rbx+0x50]                       ; CODE XREF=re_string_reconstruct+466
000000000000a211         mov        byte [rbx+0x8c], 0x0
000000000000a218         add        rdx, rbp
000000000000a21b         sub        rdx, r15
000000000000a21e         mov        qword [rbx+0x58], rdx
000000000000a222         mov        rdx, qword [rbx+0x60]
000000000000a226         add        rdx, rbp
000000000000a229         sub        rdx, r15
000000000000a22c         mov        qword [rbx+0x68], rdx
000000000000a230         jmp        loc_9d68

                     loc_a235:
000000000000a235         test       rax, rax                                    ; CODE XREF=re_string_reconstruct+612
000000000000a238         je         loc_a2ad

000000000000a23a         test       r12, r12
000000000000a23d         je         loc_a2ad

000000000000a23f         mov        rax, qword [rbx]
000000000000a242         movzx      edx, byte [rax+r14]

                     loc_a247:
000000000000a247         mov        rax, qword [rsp+0x78+var_60]                ; CODE XREF=re_string_reconstruct+1823
000000000000a24c         mov        qword [rbx+0x20], rax
000000000000a250         mov        eax, 0x1
000000000000a255         jmp        loc_9dfa

                     loc_a25a:
000000000000a25a         jle        loc_a277                                    ; CODE XREF=re_string_reconstruct+686

000000000000a25c         mov        rax, qword [rbx+0x10]
000000000000a260         lea        rdx, qword [rax+r12*4]
000000000000a264         nop        dword [rax]

                     loc_a268:
000000000000a268         mov        dword [rax], 0xffffffff                     ; CODE XREF=re_string_reconstruct+1765
000000000000a26e         add        rax, 0x4
000000000000a272         cmp        rdx, rax
000000000000a275         jne        loc_a268

                     loc_a277:
000000000000a277         cmp        byte [rbx+0x8b], 0x0                        ; CODE XREF=loc_a25a
000000000000a27e         jne        loc_a2d8

000000000000a280         mov        qword [rbx+0x38], r12
000000000000a284         jmp        loc_9c8a

                     loc_a289:
000000000000a289         mov        edi, edx                                    ; argument "__wc" for method j_iswalnum, CODE XREF=re_string_reconstruct+652
000000000000a28b         mov        dword [rsp+0x78+var_78], edx
000000000000a28e         call       j_iswalnum                                  ; iswalnum
000000000000a293         test       eax, eax
000000000000a295         jne        loc_a2a3

000000000000a297         mov        edx, dword [rsp+0x78+var_78]
000000000000a29a         cmp        edx, 0x5f
000000000000a29d         jne        loc_9e22

                     loc_a2a3:
000000000000a2a3         mov        eax, 0x1                                    ; CODE XREF=re_string_reconstruct+1797
000000000000a2a8         jmp        loc_9e37

                     loc_a2ad:
000000000000a2ad         xor        edx, edx                                    ; CODE XREF=re_string_reconstruct+1704, re_string_reconstruct+1709
000000000000a2af         jmp        loc_a247

                     loc_a2b1:
000000000000a2b1         mov        edx, dword [rsp+0x78+var_54]                ; CODE XREF=re_string_reconstruct+1366
000000000000a2b5         sub        rax, r12
000000000000a2b8         mov        qword [rbx+0x20], 0x0
000000000000a2c0         mov        r12, rax
000000000000a2c3         mov        qword [rbx+0x30], rax
000000000000a2c7         cmp        edx, 0xffffffff
000000000000a2ca         jne        loc_9e15

000000000000a2d0         jmp        loc_a0ec
000000000000a2d5         align      8

                     loc_a2d8:
000000000000a2d8         mov        rdi, qword [rbx+8]                          ; argument "__s" for method j_memset, CODE XREF=re_string_reconstruct+1774
000000000000a2dc         mov        rdx, r12                                    ; argument "__n" for method j_memset
000000000000a2df         mov        esi, 0xff                                   ; argument "__c" for method j_memset
000000000000a2e4         call       j_memset                                    ; memset
000000000000a2e9         mov        r12, qword [rbx+0x30]
000000000000a2ed         jmp        loc_9e44

                     loc_a2f2:
000000000000a2f2         cmp        rdx, 0x6                                    ; CODE XREF=re_string_reconstruct+1300
000000000000a2f6         mov        edi, 0x6
000000000000a2fb         lea        r11, qword [rsp+0x78+var_46]
000000000000a300         cmovle     rdi, rdx
000000000000a304         sub        edi, 0x1
000000000000a307         test       edi, edi
000000000000a309         movsxd     rax, edi
000000000000a30c         js         loc_a322

                     loc_a30e:
000000000000a30e         movzx      edi, byte [rsi+rax]                         ; CODE XREF=re_string_reconstruct+1936
000000000000a312         movzx      edi, byte [rcx+rdi]
000000000000a316         mov        byte [r11+rax], dil
000000000000a31a         sub        rax, 0x1
000000000000a31e         test       eax, eax
000000000000a320         jns        loc_a30e

                     loc_a322:
000000000000a322         mov        rsi, r11                                    ; CODE XREF=re_string_reconstruct+1916
000000000000a325         jmp        loc_a0aa

                     loc_a32a:
000000000000a32a         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=re_string_reconstruct+331
                        ; endp
000000000000a32f         align      16                                          ; End of unwind block (FDE at 0x17d5c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int8_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120


                     sub_epsilon_src_nodes:
000000000000a330         push       r15                                         ; Begin of unwind block (FDE at 0x17dac), CODE XREF=update_cur_sifted_state+1100, update_cur_sifted_state+1290, update_cur_sifted_state+1448
000000000000a332         push       r14
000000000000a334         mov        r14, rdx
000000000000a337         push       r13
000000000000a339         push       r12
000000000000a33b         lea        rdx, qword [rsi+rsi*2]
000000000000a33f         push       rbp
000000000000a340         push       rbx
000000000000a341         pxor       xmm0, xmm0
000000000000a345         sub        rsp, 0x48
000000000000a349         mov        rax, qword [fs:0x28]
000000000000a352         mov        qword [rsp+0x78+var_40], rax
000000000000a357         xor        eax, eax
000000000000a359         mov        rax, qword [rdi+0x38]
000000000000a35d         mov        qword [rsp+0x78+var_48], 0x0
000000000000a366         movaps     xmmword [rsp+0x78+var_58], xmm0
000000000000a36b         mov        qword [rsp+0x78+var_68], rcx
000000000000a370         lea        rbp, qword [rax+rdx*8]
000000000000a374         mov        r10, qword [rbp+8]
000000000000a378         test       r10, r10
000000000000a37b         jle        loc_a562

000000000000a381         lea        rax, qword [rsp+0x78+var_58]
000000000000a386         mov        r12, rdi
000000000000a389         mov        r13, rsi
000000000000a38c         xor        ebx, ebx
000000000000a38e         mov        qword [rsp+0x78+var_60], rax
000000000000a393         jmp        loc_a3ed
000000000000a395         align      8

                     loc_a398:
000000000000a398         test       rax, rax                                    ; CODE XREF=sub_epsilon_src_nodes+283
000000000000a39b         jne        loc_a478

000000000000a3a1         mov        rdi, qword [r14+8]
000000000000a3a5         lea        rsi, qword [r14+0x10]
000000000000a3a9         mov        rdx, r8
000000000000a3ac         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000a3b1         test       rax, rax
000000000000a3b4         je         loc_a478

                     loc_a3ba:
000000000000a3ba         mov        rdx, qword [r12+0x38]                       ; CODE XREF=sub_epsilon_src_nodes+313, sub_epsilon_src_nodes+386
000000000000a3bf         mov        rsi, qword [rsp+0x78+var_68]
000000000000a3c4         mov        rdi, qword [rsp+0x78+var_60]
000000000000a3c9         add        rdx, r9
000000000000a3cc         call       re_node_set_add_intersect                   ; re_node_set_add_intersect
000000000000a3d1         test       eax, eax
000000000000a3d3         jne        loc_a550

000000000000a3d9         mov        r10, qword [rbp+8]
000000000000a3dd         nop        dword [rax]

                     loc_a3e0:
000000000000a3e0         add        rbx, 0x1                                    ; CODE XREF=sub_epsilon_src_nodes+200, sub_epsilon_src_nodes+217, sub_epsilon_src_nodes+292, sub_epsilon_src_nodes+319, sub_epsilon_src_nodes+335, sub_epsilon_src_nodes+358, sub_epsilon_src_nodes+380
000000000000a3e4         cmp        r10, rbx
000000000000a3e7         jle        loc_a4c0

                     loc_a3ed:
000000000000a3ed         mov        rax, qword [rbp+0x10]                       ; CODE XREF=sub_epsilon_src_nodes+99
000000000000a3f1         mov        rax, qword [rax+rbx*8]
000000000000a3f5         cmp        r13, rax
000000000000a3f8         je         loc_a3e0

000000000000a3fa         mov        rdx, rax
000000000000a3fd         shl        rdx, 0x4
000000000000a401         add        rdx, qword [r12]
000000000000a405         test       byte [rdx+8], 0x8
000000000000a409         je         loc_a3e0

000000000000a40b         lea        r9, qword [rax+rax*2]
000000000000a40f         mov        rcx, qword [r12+0x28]
000000000000a414         lea        r11, qword [rbp+0x10]
000000000000a418         mov        rdi, r10
000000000000a41b         shl        r9, 0x3
000000000000a41f         mov        rsi, r11
000000000000a422         add        rcx, r9
000000000000a425         mov        r15, qword [rcx+0x10]
000000000000a429         mov        qword [rsp+0x78+var_70], rcx
000000000000a42e         mov        r8, qword [r15]
000000000000a431         mov        rdx, r8
000000000000a434         mov        qword [rsp+0x78+var_78], r8
000000000000a438         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000a43d         mov        rcx, qword [rsp+0x78+var_70]
000000000000a442         mov        r8, qword [rsp+0x78+var_78]
000000000000a446         cmp        qword [rcx+8], 0x1
000000000000a44b         jg         loc_a398

000000000000a451         test       rax, rax
000000000000a454         jne        loc_a3e0

000000000000a456         mov        rdi, qword [r14+8]
000000000000a45a         lea        rsi, qword [r14+0x10]
000000000000a45e         mov        rdx, r8
000000000000a461         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000a466         test       rax, rax
000000000000a469         jne        loc_a3ba

000000000000a46f         jmp        loc_a3e0
000000000000a474         align      8

                     loc_a478:
000000000000a478         mov        r15, qword [r15+8]                          ; CODE XREF=sub_epsilon_src_nodes+107, sub_epsilon_src_nodes+132
000000000000a47c         test       r15, r15
000000000000a47f         jle        loc_a3e0

000000000000a485         mov        rdx, r15
000000000000a488         mov        rsi, r11
000000000000a48b         mov        rdi, r10
000000000000a48e         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000a493         test       rax, rax
000000000000a496         jne        loc_a3e0

000000000000a49c         mov        rdi, qword [r14+8]
000000000000a4a0         lea        rsi, qword [r14+0x10]
000000000000a4a4         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000a4a9         test       rax, rax
000000000000a4ac         je         loc_a3e0

000000000000a4b2         jmp        loc_a3ba
000000000000a4b7         align      64

                     loc_a4c0:
000000000000a4c0         xor        r9d, r9d                                    ; CODE XREF=sub_epsilon_src_nodes+183
000000000000a4c3         test       r10, r10
000000000000a4c6         lea        r11, qword [rsp+0x78+var_48]
000000000000a4cb         jle        loc_a51c

000000000000a4cd         nop        dword [rax]

                     loc_a4d0:
000000000000a4d0         mov        rax, qword [rbp+0x10]                       ; CODE XREF=sub_epsilon_src_nodes+490
000000000000a4d4         mov        rdi, qword [rsp+0x78+var_50]
000000000000a4d9         mov        rsi, r11
000000000000a4dc         mov        r10, qword [rax+r9*8]
000000000000a4e0         mov        rdx, r10
000000000000a4e3         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000a4e8         test       rax, rax
000000000000a4eb         jne        loc_a512

000000000000a4ed         lea        rbx, qword [r14+0x10]
000000000000a4f1         mov        rdi, qword [r14+8]
000000000000a4f5         mov        rsi, rbx
000000000000a4f8         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000a4fd         sub        rax, 0x1
000000000000a501         mov        rdx, rax
000000000000a504         js         loc_a512

000000000000a506         lea        rdi, qword [r14+8]
000000000000a50a         mov        rsi, rbx
000000000000a50d         call       re_node_set_remove_at.isra.4.part.5         ; re_node_set_remove_at.isra.4.part.5

                     loc_a512:
000000000000a512         add        r9, 0x1                                     ; CODE XREF=sub_epsilon_src_nodes+443, sub_epsilon_src_nodes+468
000000000000a516         cmp        qword [rbp+8], r9
000000000000a51a         jg         loc_a4d0

                     loc_a51c:
000000000000a51c         mov        rdi, qword [rsp+0x78+var_48]                ; CODE XREF=sub_epsilon_src_nodes+411

                     loc_a521:
000000000000a521         call       j_free                                      ; free, CODE XREF=sub_epsilon_src_nodes+564
000000000000a526         xor        eax, eax

                     loc_a528:
000000000000a528         mov        rsi, qword [rsp+0x78+var_40]                ; CODE XREF=sub_epsilon_src_nodes+560
000000000000a52d         xor        rsi, qword [fs:0x28]
000000000000a536         jne        loc_a566

000000000000a538         add        rsp, 0x48
000000000000a53c         pop        rbx
000000000000a53d         pop        rbp
000000000000a53e         pop        r12
000000000000a540         pop        r13
000000000000a542         pop        r14
000000000000a544         pop        r15
000000000000a546         ret
                        ; endp
000000000000a547         align      16

                     loc_a550:
000000000000a550         mov        rdi, qword [rsp+0x78+var_48]                ; argument "__ptr" for method j_free, CODE XREF=sub_epsilon_src_nodes+163
000000000000a555         mov        dword [rsp+0x78+var_78], eax
000000000000a558         call       j_free                                      ; free
000000000000a55d         mov        eax, dword [rsp+0x78+var_78]
000000000000a560         jmp        loc_a528

                     loc_a562:
000000000000a562         xor        edi, edi                                    ; CODE XREF=sub_epsilon_src_nodes+75
000000000000a564         jmp        loc_a521

                     loc_a566:
000000000000a566         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=sub_epsilon_src_nodes+518
                        ; endp
000000000000a56b         align      16                                          ; End of unwind block (FDE at 0x17dac)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_58: -88
        ;    var_67: int8_t, -103
        ;    var_68: int8_t, -104
        ;    var_78: -120
        ;    var_88: int8_t, -136
        ;    var_98: -152
        ;    var_A8: int64_t, -168
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_CC: int32_t, -204
        ;    var_E0: int64_t, -224
        ;    var_E8: int64_t, -232
        ;    var_E9: int8_t, -233
        ;    var_F8: int64_t, -248
        ;    var_100: int64_t, -256
        ;    var_108: int64_t, -264
        ;    var_110: int64_t, -272
        ;    var_118: int64_t, -280
        ;    var_120: int64_t, -288
        ;    var_128: int64_t, -296
        ;    var_130: int64_t, -304


                     build_trtable:
000000000000a570         push       r15                                         ; Begin of unwind block (FDE at 0x17dfc), CODE XREF=re_search_internal+4240
000000000000a572         push       r14
000000000000a574         mov        r15, rdi
000000000000a577         push       r13
000000000000a579         push       r12
000000000000a57b         mov        edi, 0x3800                                 ; argument "__size" for method j_malloc
000000000000a580         push       rbp
000000000000a581         push       rbx
000000000000a582         sub        rsp, 0x108
000000000000a589         mov        rax, qword [fs:0x28]
000000000000a592         mov        qword [rsp+0x138+var_40], rax
000000000000a59a         xor        eax, eax
000000000000a59c         mov        qword [rsp+0x138+var_130], rsi
000000000000a5a1         call       j_malloc                                    ; malloc
000000000000a5a6         test       rax, rax
000000000000a5a9         mov        qword [rsp+0x138+var_120], rax
000000000000a5ae         je         loc_a980

000000000000a5b4         mov        rax, qword [rsp+0x138+var_120]
000000000000a5b9         pxor       xmm0, xmm0
000000000000a5bd         lea        rbx, qword [rax+0x1800]
000000000000a5c4         mov        rax, qword [rsp+0x138+var_130]
000000000000a5c9         movaps     xmmword [rsp+0x138+var_A8], xmm0
000000000000a5d1         mov        qword [rsp+0x138+var_F8], rbx
000000000000a5d6         movaps     xmmword [rsp+0x138+var_98], xmm0
000000000000a5de         cmp        qword [rax+0x10], 0x0
000000000000a5e3         mov        qword [rax+0x58], 0x0
000000000000a5eb         mov        qword [rax+0x60], 0x0
000000000000a5f3         jle        loc_b06a

000000000000a5f9         mov        qword [rsp+0x138+var_108], r15
000000000000a5fe         xor        ebp, ebp
000000000000a600         mov        qword [rsp+0x138+var_128], 0x0
000000000000a609         mov        r15, rbx

                     loc_a60c:
000000000000a60c         mov        rbx, qword [rsp+0x138+var_128]              ; CODE XREF=build_trtable+275
000000000000a611         lea        rax, qword [rbx*8]
000000000000a619         mov        qword [rsp+0x138+var_118], rax
000000000000a61e         mov        rax, qword [rsp+0x138+var_130]
000000000000a623         mov        rax, qword [rax+0x18]
000000000000a627         mov        r13, qword [rax+rbx*8]
000000000000a62b         mov        rax, qword [rsp+0x138+var_108]
000000000000a630         shl        r13, 0x4
000000000000a634         add        r13, qword [rax]
000000000000a637         movzx      r14d, byte [r13+8]
000000000000a63c         mov        eax, dword [r13+8]
000000000000a640         shr        eax, 0x8
000000000000a643         and        ax, 0x3ff
000000000000a647         cmp        r14d, 0x1
000000000000a64b         je         loc_a9b0

000000000000a651         cmp        r14d, 0x3
000000000000a655         je         loc_ae20

000000000000a65b         cmp        r14d, 0x5
000000000000a65f         je         loc_ace0

000000000000a665         cmp        r14d, 0x7
000000000000a669         je         loc_ae49

                     loc_a66f:
000000000000a66f         mov        rbx, qword [rsp+0x138+var_130]              ; CODE XREF=build_trtable+1231, build_trtable+1316, build_trtable+1694, build_trtable+1827, build_trtable+2042, build_trtable+2144, build_trtable+2337
000000000000a674         add        qword [rsp+0x138+var_128], 0x1
000000000000a67a         mov        rax, qword [rsp+0x138+var_128]
000000000000a67f         cmp        rax, qword [rbx+0x10]
000000000000a683         jl         loc_a60c

000000000000a685         test       rbp, rbp
000000000000a688         mov        r15, qword [rsp+0x138+var_108]
000000000000a68d         jle        loc_b0e9

000000000000a693         lea        rbx, qword [rbp+1]
000000000000a697         mov        qword [rsp+0x138+var_C0], 0x0
000000000000a6a0         mov        qword [rsp+0x138+var_C8], rbx
000000000000a6a5         shl        rbx, 0x3
000000000000a6a9         mov        rdi, rbx                                    ; argument "__size" for method j_malloc
000000000000a6ac         call       j_malloc                                    ; malloc
000000000000a6b1         test       rax, rax
000000000000a6b4         mov        r12, rax
000000000000a6b7         mov        qword [rsp+0x138+var_B8], rax
000000000000a6bf         je         loc_aebf

000000000000a6c5         movabs     rax, 0xaaaaaaaaaaaa855
000000000000a6cf         mov        dword [rsp+0x138+var_CC], 0x0
000000000000a6d7         cmp        rbp, rax
000000000000a6da         jg         loc_aebf

000000000000a6e0         lea        rax, qword [rbp+rbp*2]
000000000000a6e5         shl        rax, 0x3
000000000000a6e9         mov        rdi, rax                                    ; argument "__size" for method j_malloc
000000000000a6ec         mov        qword [rsp+0x138+var_E0], rax
000000000000a6f1         call       j_malloc                                    ; malloc
000000000000a6f6         test       rax, rax
000000000000a6f9         mov        qword [rsp+0x138+var_128], rax
000000000000a6fe         je         loc_aebf

000000000000a704         mov        rax, qword [rsp+0x138+var_128]
000000000000a709         sub        rbx, 0x8
000000000000a70d         mov        r12, qword [rsp+0x138+var_F8]
000000000000a712         pxor       xmm0, xmm0
000000000000a716         lea        r14, qword [rsp+0x138+var_C8]
000000000000a71b         mov        qword [rsp+0x138+var_118], rbp
000000000000a720         mov        byte [rsp+0x138+var_E9], 0x0
000000000000a725         mov        rbp, r15
000000000000a728         add        rax, rbx
000000000000a72b         mov        qword [rsp+0x138+var_E8], r12
000000000000a730         add        rbx, rax
000000000000a733         mov        qword [rsp+0x138+var_108], rax
000000000000a738         mov        rax, qword [rsp+0x138+var_120]
000000000000a73d         movaps     xmmword [rsp+0x138+var_68], xmm0
000000000000a745         mov        qword [rsp+0x138+var_100], rbx
000000000000a74a         xor        ebx, ebx
000000000000a74c         lea        r13, qword [rax+8]
000000000000a750         lea        rax, qword [rsp+0x138+var_CC]
000000000000a755         movaps     xmmword [rsp+0x138+var_58], xmm0
000000000000a75d         mov        qword [rsp+0x138+var_110], rax

                     loc_a762:
000000000000a762         mov        qword [rsp+0x138+var_C0], 0x0               ; CODE XREF=build_trtable+706
000000000000a76b         cmp        qword [r13], 0x0
000000000000a770         jle        loc_a7b8

000000000000a772         xor        r15d, r15d
000000000000a775         nop        dword [rax]

                     loc_a778:
000000000000a778         mov        rax, qword [r13+8]                          ; CODE XREF=build_trtable+582
000000000000a77c         mov        rdx, qword [rax+r15*8]
000000000000a780         mov        rax, qword [rbp+0x18]
000000000000a784         mov        rax, qword [rax+rdx*8]
000000000000a788         cmp        rax, 0xffffffffffffffff
000000000000a78c         je         loc_a7ae

000000000000a78e         lea        rdx, qword [rax+rax*2]
000000000000a792         mov        rax, qword [rbp+0x30]
000000000000a796         mov        rdi, r14
000000000000a799         lea        rsi, qword [rax+rdx*8]
000000000000a79d         call       re_node_set_merge                           ; re_node_set_merge
000000000000a7a2         test       eax, eax
000000000000a7a4         mov        dword [rsp+0x138+var_CC], eax
000000000000a7a8         jne        loc_aea8

                     loc_a7ae:
000000000000a7ae         add        r15, 0x1                                    ; CODE XREF=build_trtable+540
000000000000a7b2         cmp        qword [r13], r15
000000000000a7b6         jg         loc_a778

                     loc_a7b8:
000000000000a7b8         mov        rdi, qword [rsp+0x138+var_110]              ; CODE XREF=build_trtable+512
000000000000a7bd         xor        ecx, ecx
000000000000a7bf         mov        rsi, rbp
000000000000a7c2         mov        rdx, r14
000000000000a7c5         call       re_acquire_state_context                    ; re_acquire_state_context
000000000000a7ca         mov        rsi, qword [rsp+0x138+var_128]
000000000000a7cf         test       rax, rax
000000000000a7d2         mov        qword [rsi+rbx*8], rax
000000000000a7d6         je         loc_af88

                     loc_a7dc:
000000000000a7dc         cmp        byte [rax+0x68], 0x0                        ; CODE XREF=build_trtable+2590
000000000000a7e0         js         loc_af00

000000000000a7e6         mov        rdi, qword [rsp+0x138+var_108]
000000000000a7eb         mov        rsi, qword [rsp+0x138+var_100]
000000000000a7f0         mov        qword [rdi+rbx*8], rax
000000000000a7f4         mov        rax, qword [rsp+0x138+var_128]
000000000000a7f9         mov        rax, qword [rax+rbx*8]
000000000000a7fd         mov        qword [rsi+rbx*8], rax

                     loc_a801:
000000000000a801         lea        rdx, qword [rsp+0x138+var_68]               ; CODE XREF=build_trtable+2556, build_trtable+2568
000000000000a809         xor        eax, eax

                     loc_a80b:
000000000000a80b         mov        rcx, qword [rdx+rax]                        ; CODE XREF=build_trtable+687
000000000000a80f         or         rcx, qword [r12+rax]
000000000000a813         mov        qword [rdx+rax], rcx
000000000000a817         add        rax, 0x8
000000000000a81b         cmp        rax, 0x20
000000000000a81f         jne        loc_a80b

000000000000a821         add        rbx, 0x1
000000000000a825         add        r13, 0x18
000000000000a829         add        r12, 0x20
000000000000a82d         cmp        rbx, qword [rsp+0x138+var_118]
000000000000a832         jne        loc_a762

000000000000a838         cmp        byte [rsp+0x138+var_E9], 0x0
000000000000a83d         mov        r15, rbp
000000000000a840         mov        rbp, qword [rsp+0x138+var_118]
000000000000a845         mov        qword [rsp+0x138+var_118], rdx
000000000000a84a         jne        loc_af99

000000000000a850         mov        esi, 0x100                                  ; argument "__size" for method j_calloc
000000000000a855         mov        edi, 0x8                                    ; argument "__nmemb" for method j_calloc
000000000000a85a         call       j_calloc                                    ; calloc
000000000000a85f         mov        r11, rax
000000000000a862         mov        rax, qword [rsp+0x138+var_130]
000000000000a867         test       r11, r11
000000000000a86a         mov        qword [rax+0x58], r11
000000000000a86e         je         loc_aead

000000000000a874         mov        rbx, qword [rsp+0x138+var_F8]
000000000000a879         mov        r12, qword [rsp+0x138+var_128]
000000000000a87e         xor        r9d, r9d
000000000000a881         mov        r13, qword [rsp+0x138+var_108]
000000000000a886         mov        rdx, qword [rsp+0x138+var_118]
000000000000a88b         add        rbx, 0x20

                     loc_a88f:
000000000000a88f         mov        rax, qword [rdx+r9]                         ; CODE XREF=build_trtable+860
000000000000a893         test       rax, rax
000000000000a896         je         loc_a8c4

000000000000a898         mov        rsi, r9
000000000000a89b         mov        ecx, 0x1
000000000000a8a0         shl        rsi, 0x6
000000000000a8a4         add        rsi, r11
000000000000a8a7         nop        word [rax+rax]

                     loc_a8b0:
000000000000a8b0         test       al, 0x1                                     ; CODE XREF=build_trtable+850
000000000000a8b2         jne        loc_b018

                     loc_a8b8:
000000000000a8b8         add        rcx, rcx                                    ; CODE XREF=build_trtable+2793, build_trtable+2805
000000000000a8bb         add        rsi, 0x8
000000000000a8bf         shr        rax, 0x1
000000000000a8c2         jne        loc_a8b0

                     loc_a8c4:
000000000000a8c4         add        r9, 0x8                                     ; CODE XREF=build_trtable+806
000000000000a8c8         cmp        r9, 0x20
000000000000a8cc         jne        loc_a88f

                     loc_a8ce:
000000000000a8ce         test       byte [rsp+0x138+var_67], 0x4                ; CODE XREF=build_trtable+2720
000000000000a8d6         je         loc_a912

000000000000a8d8         xor        eax, eax
000000000000a8da         mov        rdx, qword [rsp+0x138+var_E8]
000000000000a8df         jmp        loc_a8ee

                     loc_a8e1:
000000000000a8e1         add        rax, 0x1                                    ; CODE XREF=build_trtable+901
000000000000a8e5         add        rdx, 0x20
000000000000a8e9         cmp        rax, rbp
000000000000a8ec         je         loc_a912

                     loc_a8ee:
000000000000a8ee         test       qword [rdx], 0x400                          ; CODE XREF=build_trtable+879
000000000000a8f5         je         loc_a8e1

000000000000a8f7         mov        rbx, qword [rsp+0x138+var_100]
000000000000a8fc         cmp        byte [rsp+0x138+var_E9], 0x0
000000000000a901         mov        rax, qword [rbx+rax*8]
000000000000a905         mov        qword [r11+0x50], rax
000000000000a909         je         loc_a912

000000000000a90b         mov        qword [r11+0x850], rax

                     loc_a912:
000000000000a912         mov        rdi, qword [rsp+0x138+var_128]              ; argument "__ptr" for method j_free, CODE XREF=build_trtable+870, build_trtable+892, build_trtable+921
000000000000a917         call       j_free                                      ; free
000000000000a91c         mov        rdi, qword [rsp+0x138+var_B8]               ; argument "__ptr" for method j_free
000000000000a924         call       j_free                                      ; free
000000000000a929         mov        rax, qword [rsp+0x138+var_120]
000000000000a92e         mov        rbx, qword [rsp+0x138+var_E0]
000000000000a933         lea        rbp, qword [rax+0x10]
000000000000a937         add        rbx, rbp

                     loc_a93a:
000000000000a93a         mov        rdi, qword [rbp]                            ; argument "__ptr" for method j_free, CODE XREF=build_trtable+986
000000000000a93e         add        rbp, 0x18
000000000000a942         call       j_free                                      ; free
000000000000a947         cmp        rbx, rbp
000000000000a94a         jne        loc_a93a

000000000000a94c         mov        rdi, qword [rsp+0x138+var_120]              ; argument "__ptr" for method j_free
000000000000a951         call       j_free                                      ; free
000000000000a956         mov        eax, 0x1
000000000000a95b         jmp        loc_a982

                     loc_a95d:
000000000000a95d         test       rbp, rbp                                    ; CODE XREF=build_trtable+1799
000000000000a960         mov        qword [rbx+8], 0x0
000000000000a968         mov        qword [rbx], 0x0
000000000000a96f         jne        loc_aca0

000000000000a975         mov        rdi, qword [rsp+0x138+var_120]              ; argument "__ptr" for method j_free
000000000000a97a         call       j_free                                      ; free
000000000000a97f         nop

                     loc_a980:
000000000000a980         xor        eax, eax                                    ; CODE XREF=build_trtable+62, build_trtable+1891, build_trtable+2443, build_trtable+2950

                     loc_a982:
000000000000a982         mov        rbx, qword [rsp+0x138+var_40]               ; CODE XREF=build_trtable+1003, build_trtable+2850
000000000000a98a         xor        rbx, qword [fs:0x28]
000000000000a993         jne        loc_b0e4

000000000000a999         add        rsp, 0x108
000000000000a9a0         pop        rbx
000000000000a9a1         pop        rbp
000000000000a9a2         pop        r12
000000000000a9a4         pop        r13
000000000000a9a6         pop        r14
000000000000a9a8         pop        r15
000000000000a9aa         ret
                        ; endp
000000000000a9ab         align      16

                     loc_a9b0:
000000000000a9b0         movzx      ecx, byte [r13]                             ; CODE XREF=build_trtable+219
000000000000a9b5         lea        r12, qword [rsp+0x138+var_A8]
000000000000a9bd         mov        edi, 0x1
000000000000a9c2         mov        rdx, rcx
000000000000a9c5         and        ecx, 0x3f
000000000000a9c8         shr        rdx, 0x3
000000000000a9cc         shl        rdi, cl
000000000000a9cf         and        edx, 0x18
000000000000a9d2         or         qword [r12+rdx], rdi

                     loc_a9d6:
000000000000a9d6         test       ax, ax                                      ; CODE XREF=build_trtable+1993, build_trtable+2008, build_trtable+2260
000000000000a9d9         je         loc_aaa0

000000000000a9df         test       al, 0x20
000000000000a9e1         jne        loc_ad50

                     loc_a9e7:
000000000000a9e7         test       al, 0x80                                    ; CODE XREF=build_trtable+2060
000000000000a9e9         jne        loc_ac84

000000000000a9ef         test       al, 0x4
000000000000a9f1         je         loc_aa45

000000000000a9f3         cmp        r14d, 0x1
000000000000a9f7         je         loc_add5

000000000000a9fd         mov        r8, qword [rsp+0x138+var_108]
000000000000aa02         cmp        dword [r8+0xb4], 0x1
000000000000aa0a         jle        loc_ae62

                     loc_aa10:
000000000000aa10         mov        rdi, qword [r8+0x78]                        ; CODE XREF=build_trtable+2173
000000000000aa14         xor        esi, esi
000000000000aa16         xor        ecx, ecx

                     loc_aa18:
000000000000aa18         mov        rdx, qword [rdi+rcx*8]                      ; CODE XREF=build_trtable+1226
000000000000aa1c         not        rdx
000000000000aa1f         or         rdx, qword [r8+rcx*8+0xb8]
000000000000aa27         and        rdx, qword [r12+rcx*8]
000000000000aa2b         mov        qword [r12+rcx*8], rdx
000000000000aa2f         add        rcx, 0x1
000000000000aa33         or         rsi, rdx
000000000000aa36         cmp        rcx, 0x4
000000000000aa3a         jne        loc_aa18

000000000000aa3c         test       rsi, rsi
000000000000aa3f         je         loc_a66f

                     loc_aa45:
000000000000aa45         test       al, 0x8                                     ; CODE XREF=build_trtable+1153, build_trtable+2331
000000000000aa47         je         loc_aaa0

000000000000aa49         cmp        r14d, 0x1
000000000000aa4d         je         loc_ad81

000000000000aa53         mov        rdi, qword [rsp+0x138+var_108]
000000000000aa58         cmp        dword [rdi+0xb4], 0x1
000000000000aa5f         jle        loc_ad9e

                     loc_aa65:
000000000000aa65         mov        rsi, qword [rdi+0x78]                       ; CODE XREF=build_trtable+2088
000000000000aa69         xor        ecx, ecx
000000000000aa6b         xor        edx, edx

                     loc_aa6d:
000000000000aa6d         mov        rax, qword [rdi+rdx*8+0xb8]                 ; CODE XREF=build_trtable+1311
000000000000aa75         and        rax, qword [rsi+rdx*8]
000000000000aa79         not        rax
000000000000aa7c         and        rax, qword [r12+rdx*8]
000000000000aa80         mov        qword [r12+rdx*8], rax
000000000000aa84         add        rdx, 0x1
000000000000aa88         or         rcx, rax
000000000000aa8b         cmp        rdx, 0x4
000000000000aa8f         jne        loc_aa6d

000000000000aa91         test       rcx, rcx
000000000000aa94         je         loc_a66f

000000000000aa9a         nop        word [rax+rax]

                     loc_aaa0:
000000000000aaa0         xor        ebx, ebx                                    ; CODE XREF=build_trtable+1129, build_trtable+1239, build_trtable+2138
000000000000aaa2         test       rbp, rbp
000000000000aaa5         jle        loc_ac0b

000000000000aaab         mov        qword [rsp+0x138+var_110], r13
000000000000aab0         mov        r13, r15
000000000000aab3         nop        dword [rax+rax]

                     loc_aab8:
000000000000aab8         mov        r10, rbx                                    ; CODE XREF=build_trtable+1682
000000000000aabb         shl        r10, 0x5
000000000000aabf         cmp        r14d, 0x1
000000000000aac3         jne        loc_aae8

000000000000aac5         mov        rax, qword [rsp+0x138+var_110]
000000000000aaca         movzx      edx, byte [rax]
000000000000aacd         mov        rax, rdx
000000000000aad0         shr        rax, 0x3
000000000000aad4         and        eax, 0x18
000000000000aad7         add        rax, r13
000000000000aada         mov        rax, qword [rax+r10]
000000000000aade         bt         rax, rdx
000000000000aae2         jae        loc_abfb

                     loc_aae8:
000000000000aae8         lea        rdi, qword [r13+r10]                        ; CODE XREF=build_trtable+1363
000000000000aaed         lea        rsi, qword [rsp+0x138+var_88]
000000000000aaf5         xor        ecx, ecx
000000000000aaf7         xor        eax, eax

                     loc_aaf9:
000000000000aaf9         mov        rdx, qword [r12+rax*8]                      ; CODE XREF=build_trtable+1440
000000000000aafd         and        rdx, qword [rdi+rax*8]
000000000000ab01         mov        qword [rsi+rax*8], rdx
000000000000ab05         add        rax, 0x1
000000000000ab09         or         rcx, rdx
000000000000ab0c         cmp        rax, 0x4
000000000000ab10         jne        loc_aaf9

000000000000ab12         test       rcx, rcx
000000000000ab15         je         loc_abfb

000000000000ab1b         lea        r11, qword [rsp+0x138+var_68]
000000000000ab23         xor        r15d, r15d
000000000000ab26         xor        r9d, r9d
000000000000ab29         xor        ecx, ecx

                     loc_ab2b:
000000000000ab2b         mov        rsi, qword [r12+rcx*8]                      ; CODE XREF=build_trtable+1512
000000000000ab2f         mov        rax, qword [rdi+rcx*8]
000000000000ab33         mov        rdx, rsi
000000000000ab36         not        rdx
000000000000ab39         and        rdx, rax
000000000000ab3c         not        rax
000000000000ab3f         and        rax, rsi
000000000000ab42         mov        qword [r11+rcx*8], rdx
000000000000ab46         or         r9, rdx
000000000000ab49         mov        qword [r12+rcx*8], rax
000000000000ab4d         add        rcx, 0x1
000000000000ab51         or         r15, rax
000000000000ab54         cmp        rcx, 0x4
000000000000ab58         jne        loc_ab2b

000000000000ab5a         mov        rdi, qword [rsp+0x138+var_120]
000000000000ab5f         lea        rax, qword [rbx+rbx*2]
000000000000ab63         test       r9, r9
000000000000ab66         lea        rdx, qword [rdi+rax*8]
000000000000ab6a         je         loc_abd4

000000000000ab6c         mov        rax, rbp
000000000000ab6f         movdqa     xmm0, xmmword [rsp+0x138+var_68]
000000000000ab78         shl        rax, 0x5
000000000000ab7c         mov        rsi, rdx
000000000000ab7f         mov        qword [rsp+0x138+var_100], rdx
000000000000ab84         add        rax, r13
000000000000ab87         movups     xmmword [rax], xmm0
000000000000ab8a         movdqa     xmm0, xmmword [rsp+0x138+var_58]
000000000000ab93         movups     xmmword [rax+0x10], xmm0
000000000000ab97         lea        rax, qword [rbp+rbp*2]
000000000000ab9c         lea        rdi, qword [rdi+rax*8]
000000000000aba0         movdqa     xmm0, xmmword [rsp+0x138+var_88]
000000000000aba9         movups     xmmword [r13+r10], xmm0
000000000000abaf         movdqa     xmm0, xmmword [rsp+0x138+var_78]
000000000000abb8         movups     xmmword [r13+r10+0x10], xmm0
000000000000abbe         call       re_node_set_init_copy                       ; re_node_set_init_copy
000000000000abc3         test       eax, eax
000000000000abc5         jne        loc_aca0

000000000000abcb         mov        rdx, qword [rsp+0x138+var_100]
000000000000abd0         add        rbp, 0x1

                     loc_abd4:
000000000000abd4         mov        rax, qword [rsp+0x138+var_130]              ; CODE XREF=build_trtable+1530
000000000000abd9         mov        rsi, qword [rsp+0x138+var_118]
000000000000abde         mov        rdi, rdx
000000000000abe1         mov        rax, qword [rax+0x18]
000000000000abe5         mov        rsi, qword [rax+rsi]
000000000000abe9         call       re_node_set_insert                          ; re_node_set_insert
000000000000abee         test       al, al
000000000000abf0         je         loc_aca0

000000000000abf6         test       r15, r15
000000000000abf9         je         loc_ac08

                     loc_abfb:
000000000000abfb         add        rbx, 0x1                                    ; CODE XREF=build_trtable+1394, build_trtable+1445
000000000000abff         cmp        rbx, rbp
000000000000ac02         jl         loc_aab8

                     loc_ac08:
000000000000ac08         mov        r15, r13                                    ; CODE XREF=build_trtable+1673

                     loc_ac0b:
000000000000ac0b         cmp        rbp, rbx                                    ; CODE XREF=build_trtable+1333
000000000000ac0e         jne        loc_a66f

000000000000ac14         mov        rax, rbp
000000000000ac17         movdqa     xmm0, xmmword [rsp+0x138+var_A8]
000000000000ac20         shl        rax, 0x5
000000000000ac24         mov        rbx, qword [rsp+0x138+var_118]
000000000000ac29         mov        edi, 0x8                                    ; argument "__size" for method j_malloc
000000000000ac2e         add        rax, r15
000000000000ac31         movups     xmmword [rax], xmm0
000000000000ac34         movdqa     xmm0, xmmword [rsp+0x138+var_98]
000000000000ac3d         movups     xmmword [rax+0x10], xmm0
000000000000ac41         mov        rax, qword [rsp+0x138+var_130]
000000000000ac46         mov        rax, qword [rax+0x18]
000000000000ac4a         mov        r13, qword [rax+rbx]
000000000000ac4e         mov        rbx, qword [rsp+0x138+var_120]
000000000000ac53         lea        rax, qword [rbp+rbp*2]
000000000000ac58         lea        rbx, qword [rbx+rax*8]
000000000000ac5c         mov        qword [rbx], 0x1
000000000000ac63         mov        qword [rbx+8], 0x1
000000000000ac6b         call       j_malloc                                    ; malloc
000000000000ac70         test       rax, rax
000000000000ac73         mov        qword [rbx+0x10], rax
000000000000ac77         je         loc_a95d

000000000000ac7d         mov        qword [rax], r13
000000000000ac80         add        rbp, 0x1

                     loc_ac84:
000000000000ac84         pxor       xmm0, xmm0                                  ; CODE XREF=build_trtable+1145, build_trtable+2070, build_trtable+2154
000000000000ac88         movaps     xmmword [r12], xmm0
000000000000ac8d         movaps     xmmword [r12+0x10], xmm0
000000000000ac93         jmp        loc_a66f
000000000000ac98         align      32

                     loc_aca0:
000000000000aca0         mov        rax, qword [rsp+0x138+var_120]              ; CODE XREF=build_trtable+1023, build_trtable+1621, build_trtable+1664
000000000000aca5         lea        rbx, qword [rax+0x10]
000000000000aca9         lea        rax, qword [rbp+rbp*2]
000000000000acae         lea        rbp, qword [rbx+rax*8]
000000000000acb2         nop        word [rax+rax]

                     loc_acb8:
000000000000acb8         mov        rdi, qword [rbx]                            ; argument "__ptr" for method j_free, CODE XREF=build_trtable+1879
000000000000acbb         add        rbx, 0x18
000000000000acbf         call       j_free                                      ; free
000000000000acc4         cmp        rbp, rbx
000000000000acc7         jne        loc_acb8

000000000000acc9         mov        rdi, qword [rsp+0x138+var_120]              ; argument "__ptr" for method j_free
000000000000acce         call       j_free                                      ; free
000000000000acd3         jmp        loc_a980
000000000000acd8         align      32

                     loc_ace0:
000000000000ace0         mov        rsi, qword [rsp+0x138+var_108]              ; CODE XREF=build_trtable+239
000000000000ace5         cmp        dword [rsi+0xb4], 0x1
000000000000acec         jle        loc_adf5

000000000000acf2         mov        rsi, qword [rsi+0x78]
000000000000acf6         lea        r12, qword [rsp+0x138+var_A8]
000000000000acfe         xor        edx, edx

                     loc_ad00:
000000000000ad00         mov        rcx, qword [r12+rdx]                        ; CODE XREF=build_trtable+1956
000000000000ad04         or         rcx, qword [rsi+rdx]
000000000000ad08         mov        qword [r12+rdx], rcx
000000000000ad0c         add        rdx, 0x8
000000000000ad10         cmp        rdx, 0x20
000000000000ad14         jne        loc_ad00

                     loc_ad16:
000000000000ad16         mov        rbx, qword [rsp+0x138+var_108]              ; CODE XREF=build_trtable+2209, build_trtable+2285
000000000000ad1b         mov        rdx, qword [rbx+0xd8]
000000000000ad22         test       dl, 0x40
000000000000ad25         jne        loc_ad33

000000000000ad27         and        qword [rsp+0x138+var_A8], 0xfffffffffffffbff

                     loc_ad33:
000000000000ad33         and        edx, 0x80                                   ; CODE XREF=build_trtable+1973
000000000000ad39         je         loc_a9d6

000000000000ad3f         and        qword [rsp+0x138+var_A8], 0xfffffffffffffffe
000000000000ad48         jmp        loc_a9d6
000000000000ad4d         align      16

                     loc_ad50:
000000000000ad50         mov        rdx, qword [rsp+0x138+var_A8]               ; CODE XREF=build_trtable+1137
000000000000ad58         pxor       xmm0, xmm0
000000000000ad5c         and        dh, 0x4
000000000000ad5f         movaps     xmmword [r12], xmm0
000000000000ad64         movaps     xmmword [r12+0x10], xmm0
000000000000ad6a         je         loc_a66f

000000000000ad70         mov        qword [rsp+0x138+var_A8], 0x400
000000000000ad7c         jmp        loc_a9e7

                     loc_ad81:
000000000000ad81         test       byte [r13+0xa], 0x40                        ; CODE XREF=build_trtable+1245
000000000000ad86         jne        loc_ac84

000000000000ad8c         mov        rdi, qword [rsp+0x138+var_108]
000000000000ad91         cmp        dword [rdi+0xb4], 0x1
000000000000ad98         jg         loc_aa65

                     loc_ad9e:
000000000000ad9e         mov        rsi, qword [rsp+0x138+var_108]              ; CODE XREF=build_trtable+1263
000000000000ada3         xor        ecx, ecx
000000000000ada5         xor        edx, edx

                     loc_ada7:
000000000000ada7         mov        rax, qword [rsi+rdx*8+0xb8]                 ; CODE XREF=build_trtable+2133
000000000000adaf         not        rax
000000000000adb2         and        rax, qword [r12+rdx*8]
000000000000adb6         mov        qword [r12+rdx*8], rax
000000000000adba         add        rdx, 0x1
000000000000adbe         or         rcx, rax
000000000000adc1         cmp        rdx, 0x4
000000000000adc5         jne        loc_ada7

000000000000adc7         test       rcx, rcx
000000000000adca         jne        loc_aaa0

000000000000add0         jmp        loc_a66f

                     loc_add5:
000000000000add5         test       byte [r13+0xa], 0x40                        ; CODE XREF=build_trtable+1159
000000000000adda         je         loc_ac84

000000000000ade0         mov        r8, qword [rsp+0x138+var_108]
000000000000ade5         cmp        dword [r8+0xb4], 0x1
000000000000aded         jg         loc_aa10

000000000000adf3         jmp        loc_ae62

                     loc_adf5:
000000000000adf5         pcmpeqd    xmm0, xmm0                                  ; CODE XREF=build_trtable+1916
000000000000adf9         lea        r12, qword [rsp+0x138+var_A8]
000000000000ae01         movaps     xmmword [rsp+0x138+var_A8], xmm0
000000000000ae09         movaps     xmmword [rsp+0x138+var_98], xmm0
000000000000ae11         jmp        loc_ad16
000000000000ae16         align      32

                     loc_ae20:
000000000000ae20         mov        rsi, qword [r13]                            ; CODE XREF=build_trtable+229
000000000000ae24         lea        r12, qword [rsp+0x138+var_A8]
000000000000ae2c         xor        edx, edx

                     loc_ae2e:
000000000000ae2e         mov        rcx, qword [r12+rdx]                        ; CODE XREF=build_trtable+2258
000000000000ae32         or         rcx, qword [rsi+rdx]
000000000000ae36         mov        qword [r12+rdx], rcx
000000000000ae3a         add        rdx, 0x8
000000000000ae3e         cmp        rdx, 0x20
000000000000ae42         jne        loc_ae2e

000000000000ae44         jmp        loc_a9d6

                     loc_ae49:
000000000000ae49         pcmpeqd    xmm0, xmm0                                  ; CODE XREF=build_trtable+249
000000000000ae4d         lea        r12, qword [rsp+0x138+var_A8]
000000000000ae55         movaps     xmmword [rsp+0x138+var_A8], xmm0
000000000000ae5d         jmp        loc_ad16

                     loc_ae62:
000000000000ae62         mov        rdi, qword [rsp+0x138+var_108]              ; CODE XREF=build_trtable+1178, build_trtable+2179
000000000000ae67         xor        esi, esi
000000000000ae69         xor        edx, edx

                     loc_ae6b:
000000000000ae6b         mov        rcx, qword [r12+rdx*8]                      ; CODE XREF=build_trtable+2326
000000000000ae6f         and        rcx, qword [rdi+rdx*8+0xb8]
000000000000ae77         mov        qword [r12+rdx*8], rcx
000000000000ae7b         add        rdx, 0x1
000000000000ae7f         or         rsi, rcx
000000000000ae82         cmp        rdx, 0x4
000000000000ae86         jne        loc_ae6b

000000000000ae88         test       rsi, rsi
000000000000ae8b         jne        loc_aa45

000000000000ae91         jmp        loc_a66f

                     loc_ae96:
000000000000ae96         mov        edx, dword [rsp+0x138+var_CC]               ; CODE XREF=build_trtable+2481
000000000000ae9a         test       edx, edx
000000000000ae9c         je         loc_af27

000000000000aea2         nop        word [rax+rax]

                     loc_aea8:
000000000000aea8         mov        rbp, qword [rsp+0x138+var_118]              ; CODE XREF=build_trtable+568, build_trtable+2574, build_trtable+2596

                     loc_aead:
000000000000aead         mov        rdi, qword [rsp+0x138+var_128]              ; argument "__ptr" for method j_free, CODE XREF=build_trtable+766, build_trtable+2631
000000000000aeb2         call       j_free                                      ; free
000000000000aeb7         mov        r12, qword [rsp+0x138+var_B8]

                     loc_aebf:
000000000000aebf         mov        rdi, r12                                    ; argument "__ptr" for method j_free, CODE XREF=build_trtable+335, build_trtable+362, build_trtable+398
000000000000aec2         call       j_free                                      ; free
000000000000aec7         mov        rax, qword [rsp+0x138+var_120]
000000000000aecc         lea        rbx, qword [rax+0x10]
000000000000aed0         lea        rax, qword [rbp+rbp*2]
000000000000aed5         lea        rbp, qword [rbx+rax*8]
000000000000aed9         nop        dword [rax]

                     loc_aee0:
000000000000aee0         mov        rdi, qword [rbx]                            ; argument "__ptr" for method j_free, CODE XREF=build_trtable+2431
000000000000aee3         add        rbx, 0x18
000000000000aee7         call       j_free                                      ; free
000000000000aeec         cmp        rbp, rbx
000000000000aeef         jne        loc_aee0

000000000000aef1         mov        rdi, qword [rsp+0x138+var_120]              ; argument "__ptr" for method j_free
000000000000aef6         call       j_free                                      ; free
000000000000aefb         jmp        loc_a980

                     loc_af00:
000000000000af00         mov        rdi, qword [rsp+0x138+var_110]              ; CODE XREF=build_trtable+624
000000000000af05         mov        ecx, 0x1
000000000000af0a         mov        rdx, r14
000000000000af0d         mov        rsi, rbp
000000000000af10         call       re_acquire_state_context                    ; re_acquire_state_context
000000000000af15         mov        rdi, qword [rsp+0x138+var_108]
000000000000af1a         test       rax, rax
000000000000af1d         mov        qword [rdi+rbx*8], rax
000000000000af21         je         loc_ae96

                     loc_af27:
000000000000af27         mov        rdi, qword [rsp+0x138+var_128]              ; CODE XREF=build_trtable+2348
000000000000af2c         cmp        rax, qword [rdi+rbx*8]
000000000000af30         je         loc_af4b

000000000000af32         movzx      edi, byte [rsp+0x138+var_E9]
000000000000af37         cmp        dword [rbp+0xb4], 0x2
000000000000af3e         mov        eax, 0x1
000000000000af43         cmovge     edi, eax
000000000000af46         mov        byte [rsp+0x138+var_E9], dil

                     loc_af4b:
000000000000af4b         mov        rdi, qword [rsp+0x138+var_110]              ; CODE XREF=build_trtable+2496
000000000000af50         mov        rsi, rbp
000000000000af53         mov        ecx, 0x2
000000000000af58         mov        rdx, r14
000000000000af5b         call       re_acquire_state_context                    ; re_acquire_state_context
000000000000af60         mov        rsi, qword [rsp+0x138+var_100]
000000000000af65         test       rax, rax
000000000000af68         mov        qword [rsi+rbx*8], rax
000000000000af6c         jne        loc_a801

000000000000af72         mov        eax, dword [rsp+0x138+var_CC]
000000000000af76         test       eax, eax
000000000000af78         je         loc_a801

000000000000af7e         jmp        loc_aea8
000000000000af83         align      8

                     loc_af88:
000000000000af88         mov        ecx, dword [rsp+0x138+var_CC]               ; CODE XREF=build_trtable+614
000000000000af8c         test       ecx, ecx
000000000000af8e         je         loc_a7dc

000000000000af94         jmp        loc_aea8

                     loc_af99:
000000000000af99         mov        esi, 0x200                                  ; argument "__size" for method j_calloc, CODE XREF=build_trtable+730
000000000000af9e         mov        edi, 0x8                                    ; argument "__nmemb" for method j_calloc
000000000000afa3         call       j_calloc                                    ; calloc
000000000000afa8         mov        r11, rax
000000000000afab         mov        rax, qword [rsp+0x138+var_130]
000000000000afb0         test       r11, r11
000000000000afb3         mov        qword [rax+0x60], r11
000000000000afb7         je         loc_aead

000000000000afbd         mov        r13, qword [rsp+0x138+var_F8]
000000000000afc2         mov        r10, qword [rsp+0x138+var_128]
000000000000afc7         mov        r12, r11
000000000000afca         mov        r14, qword [rsp+0x138+var_108]
000000000000afcf         mov        rdx, qword [rsp+0x138+var_118]
000000000000afd4         xor        ebx, ebx
000000000000afd6         add        r13, 0x20

                     loc_afda:
000000000000afda         mov        rax, qword [rdx+rbx]                        ; CODE XREF=build_trtable+2718
000000000000afde         test       rax, rax
000000000000afe1         je         loc_afff

000000000000afe3         mov        rsi, r12
000000000000afe6         mov        ecx, 0x1

                     loc_afeb:
000000000000afeb         test       al, 0x1                                     ; CODE XREF=build_trtable+2701
000000000000afed         jne        loc_b09c

                     loc_aff3:
000000000000aff3         add        rcx, rcx                                    ; CODE XREF=build_trtable+2923
000000000000aff6         add        rsi, 0x8
000000000000affa         shr        rax, 0x1
000000000000affd         jne        loc_afeb

                     loc_afff:
000000000000afff         add        rbx, 0x8                                    ; CODE XREF=build_trtable+2673
000000000000b003         add        r12, 0x200
000000000000b00a         cmp        rbx, 0x20
000000000000b00e         jne        loc_afda

000000000000b010         jmp        loc_a8ce
000000000000b015         align      8

                     loc_b018:
000000000000b018         mov        rdi, qword [rsp+0x138+var_120]              ; CODE XREF=build_trtable+834
000000000000b01d         test       qword [rdi+r9+0x1800], rcx
000000000000b025         jne        loc_b097

000000000000b027         lea        rdi, qword [rbx+r9]
000000000000b02b         xor        r8d, r8d
000000000000b02e         nop

                     loc_b030:
000000000000b030         mov        r10, qword [rdi]                            ; CODE XREF=build_trtable+2769
000000000000b033         add        r8, 0x1
000000000000b037         add        rdi, 0x20
000000000000b03b         and        r10, rcx
000000000000b03e         test       r10, r10
000000000000b041         je         loc_b030

000000000000b043         shl        r8, 0x3

                     loc_b047:
000000000000b047         test       qword [r15+r9+0xb8], rcx                    ; CODE XREF=build_trtable+2858
000000000000b04f         je         loc_b05e

000000000000b051         mov        rdi, qword [r13+r8]
000000000000b056         mov        qword [rsi], rdi
000000000000b059         jmp        loc_a8b8

                     loc_b05e:
000000000000b05e         mov        rdi, qword [r12+r8]                         ; CODE XREF=build_trtable+2783
000000000000b062         mov        qword [rsi], rdi
000000000000b065         jmp        loc_a8b8

                     loc_b06a:
000000000000b06a         mov        rdi, qword [rsp+0x138+var_120]              ; argument "__ptr" for method j_free, CODE XREF=build_trtable+131
000000000000b06f         call       j_free                                      ; free

                     loc_b074:
000000000000b074         mov        esi, 0x100                                  ; argument "__size" for method j_calloc, CODE XREF=build_trtable+2956
000000000000b079         mov        edi, 0x8                                    ; argument "__nmemb" for method j_calloc
000000000000b07e         call       j_calloc                                    ; calloc
000000000000b083         mov        rbx, qword [rsp+0x138+var_130]
000000000000b088         test       rax, rax
000000000000b08b         mov        qword [rbx+0x58], rax
000000000000b08f         setne      al
000000000000b092         jmp        loc_a982

                     loc_b097:
000000000000b097         xor        r8d, r8d                                    ; CODE XREF=build_trtable+2741
000000000000b09a         jmp        loc_b047

                     loc_b09c:
000000000000b09c         mov        rdi, qword [rsp+0x138+var_120]              ; CODE XREF=build_trtable+2685
000000000000b0a1         test       qword [rdi+rbx+0x1800], rcx
000000000000b0a9         jne        loc_b0e0

000000000000b0ab         lea        r9, qword [r13+rbx]
000000000000b0b0         xor        r8d, r8d

                     loc_b0b3:
000000000000b0b3         mov        r15, qword [r9]                             ; CODE XREF=build_trtable+2903
000000000000b0b6         add        r8, 0x1
000000000000b0ba         add        r9, 0x20
000000000000b0be         mov        rdi, r8
000000000000b0c1         and        r15, rcx
000000000000b0c4         test       r15, r15
000000000000b0c7         je         loc_b0b3

                     loc_b0c9:
000000000000b0c9         mov        r8, qword [r10+rdi*8]                       ; CODE XREF=build_trtable+2930
000000000000b0cd         mov        qword [rsi], r8
000000000000b0d0         mov        rdi, qword [r14+rdi*8]
000000000000b0d4         mov        qword [rsi+0x800], rdi
000000000000b0db         jmp        loc_aff3

                     loc_b0e0:
000000000000b0e0         xor        edi, edi                                    ; CODE XREF=build_trtable+2873
000000000000b0e2         jmp        loc_b0c9

                     loc_b0e4:
000000000000b0e4         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=build_trtable+1059
                        ; endp

                     loc_b0e9:
000000000000b0e9         mov        rdi, qword [rsp+0x138+var_120]              ; argument "__ptr" for method j_free, CODE XREF=build_trtable+285
000000000000b0ee         call       j_free                                      ; free
000000000000b0f3         test       rbp, rbp
000000000000b0f6         jne        loc_a980

000000000000b0fc         jmp        loc_b074
000000000000b101         align      16                                          ; End of unwind block (FDE at 0x17dfc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     calc_first:
000000000000b110         cmp        byte [rsi+0x30], 0x10                       ; Begin of unwind block (FDE at 0x17e4c), DATA XREF=re_compile_internal+1662
000000000000b114         je         loc_b178

000000000000b116         push       rbp
000000000000b117         push       rbx
000000000000b118         mov        rbx, rsi
000000000000b11b         mov        rbp, rdi
000000000000b11e         sub        rsp, 0x8
000000000000b122         mov        qword [rbx+0x18], rsi
000000000000b126         mov        rdx, qword [rbx+0x30]
000000000000b12a         mov        rsi, qword [rsi+0x28]
000000000000b12e         call       re_dfa_add_node                             ; re_dfa_add_node
000000000000b133         cmp        rax, 0xffffffffffffffff
000000000000b137         mov        rdx, rax
000000000000b13a         mov        qword [rbx+0x38], rax
000000000000b13e         je         loc_b190

000000000000b140         xor        eax, eax
000000000000b142         cmp        byte [rbx+0x30], 0xc
000000000000b146         jne        loc_b16c

000000000000b148         mov        ecx, dword [rbx+0x28]
000000000000b14b         shl        rdx, 0x4
000000000000b14f         add        rdx, qword [rbp]
000000000000b153         and        ecx, 0x3ff
000000000000b159         shl        ecx, 0x8
000000000000b15c         mov        esi, ecx
000000000000b15e         mov        ecx, dword [rdx+8]
000000000000b161         and        ecx, 0xfffc00ff
000000000000b167         or         ecx, esi
000000000000b169         mov        dword [rdx+8], ecx

                     loc_b16c:
000000000000b16c         add        rsp, 0x8                                    ; CODE XREF=calc_first+54, calc_first+133
000000000000b170         pop        rbx
000000000000b171         pop        rbp
000000000000b172         ret
                        ; endp
000000000000b173         align      8

                     loc_b178:
000000000000b178         mov        rax, qword [rsi+8]                          ; CODE XREF=calc_first+4
000000000000b17c         mov        rdx, qword [rax+0x18]
000000000000b180         mov        rax, qword [rax+0x38]
000000000000b184         mov        qword [rsi+0x18], rdx
000000000000b188         mov        qword [rsi+0x38], rax
000000000000b18c         xor        eax, eax
000000000000b18e         ret
                        ; endp
000000000000b18f         align      16

                     loc_b190:
000000000000b190         mov        eax, 0xc                                    ; CODE XREF=calc_first+46
000000000000b195         jmp        loc_b16c
000000000000b197         align      32                                          ; End of unwind block (FDE at 0x17e4c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     free_fail_stack_return.part.24:
000000000000b1a0         push       r12                                         ; Begin of unwind block (FDE at 0x17e80), CODE XREF=set_regs+1279, set_regs+1383, set_regs+1810, set_regs+2005
000000000000b1a2         push       rbp
000000000000b1a3         mov        rbp, rdi
000000000000b1a6         push       rbx
000000000000b1a7         cmp        qword [rdi], 0x0
000000000000b1ab         jle        loc_b1e2

000000000000b1ad         xor        ebx, ebx
000000000000b1af         xor        r12d, r12d
000000000000b1b2         nop        word [rax+rax]

                     loc_b1b8:
000000000000b1b8         mov        rax, qword [rbp+0x10]                       ; CODE XREF=free_fail_stack_return.part.24+64
000000000000b1bc         add        r12, 0x1
000000000000b1c0         mov        rdi, qword [rax+rbx+0x28]                   ; argument "__ptr" for method j_free
000000000000b1c5         call       j_free                                      ; free
000000000000b1ca         mov        rax, qword [rbp+0x10]
000000000000b1ce         mov        rdi, qword [rax+rbx+0x10]                   ; argument "__ptr" for method j_free
000000000000b1d3         add        rbx, 0x30
000000000000b1d7         call       j_free                                      ; free
000000000000b1dc         cmp        r12, qword [rbp]
000000000000b1e0         jl         loc_b1b8

                     loc_b1e2:
000000000000b1e2         pop        rbx                                         ; CODE XREF=free_fail_stack_return.part.24+11
000000000000b1e3         mov        rdi, qword [rbp+0x10]                       ; argument "__ptr" for method j_free
000000000000b1e7         pop        rbp
000000000000b1e8         pop        r12
000000000000b1ea         jmp        j_free                                      ; free
                        ; endp
000000000000b1ef         align      16                                          ; End of unwind block (FDE at 0x17e80)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     pop_fail_stack.isra.25:
000000000000b1f0         push       r12                                         ; Begin of unwind block (FDE at 0x17eac), CODE XREF=set_regs+1459, set_regs+1542
000000000000b1f2         push       rbp
000000000000b1f3         push       rbx
000000000000b1f4         mov        rax, qword [rdi]
000000000000b1f7         sub        rax, 0x1
000000000000b1fb         test       rax, rax
000000000000b1fe         mov        qword [rdi], rax
000000000000b201         js         loc_b265

000000000000b203         lea        rbx, qword [rax+rax*2]
000000000000b207         mov        rax, qword [rsi]
000000000000b20a         mov        r12, rsi
000000000000b20d         shl        rcx, 0x4
000000000000b211         mov        rbp, r9
000000000000b214         mov        rdi, r8                                     ; argument "__dest" for method j_memcpy
000000000000b217         shl        rbx, 0x4
000000000000b21b         add        rax, rbx
000000000000b21e         mov        rsi, qword [rax]
000000000000b221         mov        qword [rdx], rsi
000000000000b224         mov        rsi, qword [rax+0x10]                       ; argument "__src" for method j_memcpy
000000000000b228         mov        rdx, rcx                                    ; argument "__n" for method j_memcpy
000000000000b22b         call       j_memcpy                                    ; memcpy
000000000000b230         mov        rdi, qword [rbp+0x10]                       ; argument "__ptr" for method j_free
000000000000b234         call       j_free                                      ; free
000000000000b239         mov        rax, qword [r12]
000000000000b23d         mov        rdi, qword [rax+rbx+0x10]                   ; argument "__ptr" for method j_free
000000000000b242         call       j_free                                      ; free
000000000000b247         add        rbx, qword [r12]
000000000000b24b         movdqu     xmm0, xmmword [rbx+0x18]
000000000000b250         movaps     xmmword [rbp], xmm0
000000000000b254         mov        rax, qword [rbx+0x28]
000000000000b258         mov        qword [rbp+0x10], rax
000000000000b25c         mov        rax, qword [rbx+8]
000000000000b260         pop        rbx
000000000000b261         pop        rbp
000000000000b262         pop        r12
000000000000b264         ret
                        ; endp

                     loc_b265:
000000000000b265         lea        rcx, qword [__PRETTY_FUNCTION__.8040]       ; argument "__function" for method j___assert_fail, "pop_fail_stack", CODE XREF=pop_fail_stack.isra.25+17
000000000000b26c         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/regexec.c"
000000000000b273         lea        rdi, qword [aNum0]                          ; argument "__assertion" for method j___assert_fail, "num >= 0"
000000000000b27a         mov        edx, 0x555                                  ; argument "__line" for method j___assert_fail
000000000000b27f         call       j___assert_fail                             ; __assert_fail
                        ; endp
000000000000b284         align      16                                          ; End of unwind block (FDE at 0x17eac)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     build_collating_symbol.isra.28:
000000000000b290         push       rbp                                         ; Begin of unwind block (FDE at 0x17edc), CODE XREF=sub_116a0+1072, sub_116a0+1128
000000000000b291         push       rbx
000000000000b292         mov        rbp, rdi
000000000000b295         mov        rdi, rsi                                    ; argument "__s" for method j_strlen
000000000000b298         mov        rbx, rsi
000000000000b29b         sub        rsp, 0x8
000000000000b29f         call       j_strlen                                    ; strlen
000000000000b2a4         cmp        rax, 0x1
000000000000b2a8         jne        loc_b2d0

000000000000b2aa         movzx      ecx, byte [rbx]
000000000000b2ad         mov        rdx, rcx
000000000000b2b0         and        ecx, 0x3f
000000000000b2b3         shr        rdx, 0x3
000000000000b2b7         shl        rax, cl
000000000000b2ba         and        edx, 0x18
000000000000b2bd         or         qword [rbp+rdx], rax
000000000000b2c2         add        rsp, 0x8
000000000000b2c6         xor        eax, eax
000000000000b2c8         pop        rbx
000000000000b2c9         pop        rbp
000000000000b2ca         ret
                        ; endp
000000000000b2cb         align      16

                     loc_b2d0:
000000000000b2d0         add        rsp, 0x8                                    ; CODE XREF=build_collating_symbol.isra.28+24
000000000000b2d4         mov        eax, 0x3
000000000000b2d9         pop        rbx
000000000000b2da         pop        rbp
000000000000b2db         ret
                        ; endp
000000000000b2dc         align      32                                          ; End of unwind block (FDE at 0x17edc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_30: int64_t, -48
        ;    var_38: int64_t, -56


                     build_charclass.isra.29:
000000000000b2e0         push       r14                                         ; Begin of unwind block (FDE at 0x17f10), CODE XREF=build_charclass_op+163, sub_116a0+1309
000000000000b2e2         push       r13
000000000000b2e4         mov        r13, rcx
000000000000b2e7         push       r12
000000000000b2e9         push       rbp
000000000000b2ea         mov        r12, r9
000000000000b2ed         push       rbx
000000000000b2ee         mov        rbp, rdi
000000000000b2f1         mov        rbx, rsi
000000000000b2f4         sub        rsp, 0x10
000000000000b2f8         test       qword [rsp+0x38+arg_0], 0x400000
000000000000b301         je         loc_b328

000000000000b303         lea        rdi, qword [aUpper]                         ; "upper"
000000000000b30a         mov        ecx, 0x6
000000000000b30f         mov        rsi, r9
000000000000b312         rep  cmpsb byte [rsi], byte [rdi]
000000000000b314         seta       al
000000000000b317         sbb        al, 0x0
000000000000b319         test       al, al
000000000000b31b         jne        loc_b416

000000000000b321         lea        r12, qword [aAlpha]                         ; "alpha"

                     loc_b328:
000000000000b328         mov        rcx, qword [r13]                            ; CODE XREF=build_charclass.isra.29+33
000000000000b32c         cmp        qword [r8], rcx
000000000000b32f         mov        rax, qword [rdx]
000000000000b332         je         loc_b449

                     loc_b338:
000000000000b338         lea        rdx, qword [rcx+1]                          ; CODE XREF=build_charclass.isra.29+355, build_charclass.isra.29+419
000000000000b33c         mov        rdi, r12                                    ; argument "__property" for method j_wctype
000000000000b33f         mov        qword [r13], rdx
000000000000b343         lea        r13, qword [rax+rcx*8]
000000000000b347         call       j_wctype                                    ; wctype
000000000000b34c         lea        rdi, qword [aAlnum]                         ; "alnum"
000000000000b353         mov        qword [r13], rax
000000000000b357         mov        ecx, 0x6
000000000000b35c         mov        rsi, r12
000000000000b35f         rep  cmpsb byte [rsi], byte [rdi]
000000000000b361         seta       al
000000000000b364         sbb        al, 0x0
000000000000b366         test       al, al
000000000000b368         je         loc_b3d8

000000000000b36a         lea        rdi, qword [aCntrl]                         ; "cntrl"
000000000000b371         mov        ecx, 0x6
000000000000b376         mov        rsi, r12
000000000000b379         rep  cmpsb byte [rsi], byte [rdi]
000000000000b37b         seta       al
000000000000b37e         sbb        al, 0x0
000000000000b380         test       al, al
000000000000b382         jne        loc_b488

000000000000b388         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000b38d         xor        ecx, ecx
000000000000b38f         test       rbp, rbp
000000000000b392         mov        rdx, qword [rax]
000000000000b395         mov        edi, 0x1
000000000000b39a         jne        loc_b65a

                     loc_b3a0:
000000000000b3a0         test       byte [rdx+rcx*2], 0x2                       ; CODE XREF=build_charclass.isra.29+226
000000000000b3a4         je         loc_b3b7

000000000000b3a6         mov        rax, rcx
000000000000b3a9         mov        rsi, rdi
000000000000b3ac         sar        rax, 0x6
000000000000b3b0         shl        rsi, cl
000000000000b3b3         or         qword [rbx+rax*8], rsi

                     loc_b3b7:
000000000000b3b7         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+196
000000000000b3bb         cmp        rcx, 0x100
000000000000b3c2         jne        loc_b3a0

                     loc_b3c4:
000000000000b3c4         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+308, build_charclass.isra.29+549, build_charclass.isra.29+621, build_charclass.isra.29+757, build_charclass.isra.29+814, build_charclass.isra.29+885, build_charclass.isra.29+942, build_charclass.isra.29+1037, build_charclass.isra.29+1095, build_charclass.isra.29+1187, build_charclass.isra.29+1292

                     loc_b3c6:
000000000000b3c6         add        rsp, 0x10                                   ; CODE XREF=build_charclass.isra.29+1197, build_charclass.isra.29+1893
000000000000b3ca         pop        rbx
000000000000b3cb         pop        rbp
000000000000b3cc         pop        r12
000000000000b3ce         pop        r13
000000000000b3d0         pop        r14
000000000000b3d2         ret
                        ; endp
000000000000b3d3         align      8

                     loc_b3d8:
000000000000b3d8         call       j___ctype_b_loc                             ; __ctype_b_loc, CODE XREF=build_charclass.isra.29+136
000000000000b3dd         xor        ecx, ecx
000000000000b3df         test       rbp, rbp
000000000000b3e2         mov        rdx, qword [rax]
000000000000b3e5         mov        edi, 0x1
000000000000b3ea         jne        loc_b5da

                     loc_b3f0:
000000000000b3f0         test       byte [rdx+rcx*2], 0x8                       ; CODE XREF=build_charclass.isra.29+306
000000000000b3f4         je         loc_b407

000000000000b3f6         mov        rax, rcx
000000000000b3f9         mov        rsi, rdi
000000000000b3fc         sar        rax, 0x6
000000000000b400         shl        rsi, cl
000000000000b403         or         qword [rbx+rax*8], rsi

                     loc_b407:
000000000000b407         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+276
000000000000b40b         cmp        rcx, 0x100
000000000000b412         jne        loc_b3f0

000000000000b414         jmp        loc_b3c4

                     loc_b416:
000000000000b416         lea        rdi, qword [aLower]                         ; "lower", CODE XREF=build_charclass.isra.29+59
000000000000b41d         mov        ecx, 0x6
000000000000b422         mov        rsi, r9
000000000000b425         rep  cmpsb byte [rsi], byte [rdi]
000000000000b427         mov        rcx, qword [r13]
000000000000b42b         seta       al
000000000000b42e         sbb        al, 0x0
000000000000b430         test       al, al
000000000000b432         lea        rax, qword [aAlpha]                         ; "alpha"
000000000000b439         cmove      r12, rax
000000000000b43d         cmp        qword [r8], rcx
000000000000b440         mov        rax, qword [rdx]
000000000000b443         jne        loc_b338

                     loc_b449:
000000000000b449         lea        r14, qword [rcx+rcx+1]                      ; CODE XREF=build_charclass.isra.29+82
000000000000b44e         mov        rdi, rax                                    ; argument "__ptr" for method j_realloc
000000000000b451         mov        qword [rsp+0x38+var_30], r8
000000000000b456         mov        qword [rsp+0x38+var_38], rdx
000000000000b45a         lea        rsi, qword [r14*8]                          ; argument "__size" for method j_realloc
000000000000b462         call       j_realloc                                   ; realloc
000000000000b467         test       rax, rax
000000000000b46a         je         loc_b788

000000000000b470         mov        rdx, qword [rsp+0x38+var_38]
000000000000b474         mov        r8, qword [rsp+0x38+var_30]
000000000000b479         mov        qword [rdx], rax
000000000000b47c         mov        qword [r8], r14
000000000000b47f         mov        rcx, qword [r13]
000000000000b483         jmp        loc_b338

                     loc_b488:
000000000000b488         lea        rdi, qword [aLower]                         ; "lower", CODE XREF=build_charclass.isra.29+162
000000000000b48f         mov        ecx, 0x6
000000000000b494         mov        rsi, r12
000000000000b497         rep  cmpsb byte [rsi], byte [rdi]
000000000000b499         seta       al
000000000000b49c         sbb        al, 0x0
000000000000b49e         test       al, al
000000000000b4a0         je         loc_b50a

000000000000b4a2         lea        rdi, qword [aSpace]                         ; "space"
000000000000b4a9         mov        ecx, 0x6
000000000000b4ae         mov        rsi, r12
000000000000b4b1         rep  cmpsb byte [rsi], byte [rdi]
000000000000b4b3         seta       al
000000000000b4b6         sbb        al, 0x0
000000000000b4b8         test       al, al
000000000000b4ba         jne        loc_b552

000000000000b4c0         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000b4c5         xor        ecx, ecx
000000000000b4c7         test       rbp, rbp
000000000000b4ca         mov        rdx, qword [rax]
000000000000b4cd         mov        edi, 0x1
000000000000b4d2         jne        loc_b82e

000000000000b4d8         nop        dword [rax+rax]

                     loc_b4e0:
000000000000b4e0         test       byte [rdx+rcx*2+1], 0x20                    ; CODE XREF=build_charclass.isra.29+547
000000000000b4e5         je         loc_b4f8

000000000000b4e7         mov        rax, rcx
000000000000b4ea         mov        rsi, rdi
000000000000b4ed         sar        rax, 0x6
000000000000b4f1         shl        rsi, cl
000000000000b4f4         or         qword [rbx+rax*8], rsi

                     loc_b4f8:
000000000000b4f8         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+517
000000000000b4fc         cmp        rcx, 0x100
000000000000b503         jne        loc_b4e0

000000000000b505         jmp        loc_b3c4

                     loc_b50a:
000000000000b50a         call       j___ctype_b_loc                             ; __ctype_b_loc, CODE XREF=build_charclass.isra.29+448
000000000000b50f         xor        ecx, ecx
000000000000b511         test       rbp, rbp
000000000000b514         mov        rdx, qword [rax]
000000000000b517         mov        edi, 0x1
000000000000b51c         jne        loc_b6f2

000000000000b522         nop        word [rax+rax]

                     loc_b528:
000000000000b528         test       byte [rdx+rcx*2+1], 0x2                     ; CODE XREF=build_charclass.isra.29+619
000000000000b52d         je         loc_b540

000000000000b52f         mov        rax, rcx
000000000000b532         mov        rsi, rdi
000000000000b535         sar        rax, 0x6
000000000000b539         shl        rsi, cl
000000000000b53c         or         qword [rbx+rax*8], rsi

                     loc_b540:
000000000000b540         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+589
000000000000b544         cmp        rcx, 0x100
000000000000b54b         jne        loc_b528

000000000000b54d         jmp        loc_b3c4

                     loc_b552:
000000000000b552         lea        rdi, qword [aAlpha]                         ; "alpha", CODE XREF=build_charclass.isra.29+474
000000000000b559         mov        ecx, 0x6
000000000000b55e         mov        rsi, r12
000000000000b561         rep  cmpsb byte [rsi], byte [rdi]
000000000000b563         seta       al
000000000000b566         sbb        al, 0x0
000000000000b568         test       al, al
000000000000b56a         je         loc_b613

000000000000b570         lea        rdi, qword [aDigit]                         ; "digit"
000000000000b577         mov        ecx, 0x6
000000000000b57c         mov        rsi, r12
000000000000b57f         rep  cmpsb byte [rsi], byte [rdi]
000000000000b581         seta       al
000000000000b584         sbb        al, 0x0
000000000000b586         test       al, al
000000000000b588         jne        loc_b693

000000000000b58e         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000b593         xor        ecx, ecx
000000000000b595         test       rbp, rbp
000000000000b598         mov        rdx, qword [rax]
000000000000b59b         mov        edi, 0x1
000000000000b5a0         jne        loc_ba4a

000000000000b5a6         nop        word [cs:rax+rax]

                     loc_b5b0:
000000000000b5b0         test       byte [rdx+rcx*2+1], 0x8                     ; CODE XREF=build_charclass.isra.29+755
000000000000b5b5         je         loc_b5c8

000000000000b5b7         mov        rax, rcx
000000000000b5ba         mov        rsi, rdi
000000000000b5bd         sar        rax, 0x6
000000000000b5c1         shl        rsi, cl
000000000000b5c4         or         qword [rbx+rax*8], rsi

                     loc_b5c8:
000000000000b5c8         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+725
000000000000b5cc         cmp        rcx, 0x100
000000000000b5d3         jne        loc_b5b0

000000000000b5d5         jmp        loc_b3c4

                     loc_b5da:
000000000000b5da         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+266
000000000000b5dc         nop        dword [rax]

                     loc_b5e0:
000000000000b5e0         test       byte [rdx+rax*2], 0x8                       ; CODE XREF=build_charclass.isra.29+812
000000000000b5e4         je         loc_b602

000000000000b5e6         movzx      ecx, byte [rbp+rax]
000000000000b5eb         mov        r10, rdi
000000000000b5ee         mov        rsi, rcx
000000000000b5f1         and        ecx, 0x3f
000000000000b5f4         shr        rsi, 0x3
000000000000b5f8         shl        r10, cl
000000000000b5fb         and        esi, 0x18
000000000000b5fe         or         qword [rbx+rsi], r10

                     loc_b602:
000000000000b602         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+772
000000000000b606         cmp        rax, 0x100
000000000000b60c         jne        loc_b5e0

000000000000b60e         jmp        loc_b3c4

                     loc_b613:
000000000000b613         call       j___ctype_b_loc                             ; __ctype_b_loc, CODE XREF=build_charclass.isra.29+650
000000000000b618         xor        ecx, ecx
000000000000b61a         test       rbp, rbp
000000000000b61d         mov        rdx, qword [rax]
000000000000b620         mov        edi, 0x1
000000000000b625         jne        loc_b7f8

000000000000b62b         nop        dword [rax+rax]

                     loc_b630:
000000000000b630         test       byte [rdx+rcx*2+1], 0x4                     ; CODE XREF=build_charclass.isra.29+883
000000000000b635         je         loc_b648

000000000000b637         mov        rax, rcx
000000000000b63a         mov        rsi, rdi
000000000000b63d         sar        rax, 0x6
000000000000b641         shl        rsi, cl
000000000000b644         or         qword [rbx+rax*8], rsi

                     loc_b648:
000000000000b648         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+853
000000000000b64c         cmp        rcx, 0x100
000000000000b653         jne        loc_b630

000000000000b655         jmp        loc_b3c4

                     loc_b65a:
000000000000b65a         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+186
000000000000b65c         nop        dword [rax]

                     loc_b660:
000000000000b660         test       byte [rdx+rax*2], 0x2                       ; CODE XREF=build_charclass.isra.29+940
000000000000b664         je         loc_b682

000000000000b666         movzx      ecx, byte [rbp+rax]
000000000000b66b         mov        r11, rdi
000000000000b66e         mov        rsi, rcx
000000000000b671         and        ecx, 0x3f
000000000000b674         shr        rsi, 0x3
000000000000b678         shl        r11, cl
000000000000b67b         and        esi, 0x18
000000000000b67e         or         qword [rbx+rsi], r11

                     loc_b682:
000000000000b682         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+900
000000000000b686         cmp        rax, 0x100
000000000000b68c         jne        loc_b660

000000000000b68e         jmp        loc_b3c4

                     loc_b693:
000000000000b693         lea        rdi, qword [aPrint]                         ; "print", CODE XREF=build_charclass.isra.29+680
000000000000b69a         mov        ecx, 0x6
000000000000b69f         mov        rsi, r12
000000000000b6a2         rep  cmpsb byte [rsi], byte [rdi]
000000000000b6a4         seta       al
000000000000b6a7         sbb        al, 0x0
000000000000b6a9         test       al, al
000000000000b6ab         jne        loc_b72c

000000000000b6ad         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000b6b2         xor        ecx, ecx
000000000000b6b4         test       rbp, rbp
000000000000b6b7         mov        rdx, qword [rax]
000000000000b6ba         mov        edi, 0x1
000000000000b6bf         jne        loc_bab7

000000000000b6c5         nop        dword [rax]

                     loc_b6c8:
000000000000b6c8         test       byte [rdx+rcx*2+1], 0x40                    ; CODE XREF=build_charclass.isra.29+1035
000000000000b6cd         je         loc_b6e0

000000000000b6cf         mov        rax, rcx
000000000000b6d2         mov        rsi, rdi
000000000000b6d5         sar        rax, 0x6
000000000000b6d9         shl        rsi, cl
000000000000b6dc         or         qword [rbx+rax*8], rsi

                     loc_b6e0:
000000000000b6e0         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+1005
000000000000b6e4         cmp        rcx, 0x100
000000000000b6eb         jne        loc_b6c8

000000000000b6ed         jmp        loc_b3c4

                     loc_b6f2:
000000000000b6f2         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+572
000000000000b6f4         nop        dword [rax]

                     loc_b6f8:
000000000000b6f8         test       byte [rdx+rax*2+1], 0x2                     ; CODE XREF=build_charclass.isra.29+1093
000000000000b6fd         je         loc_b71b

000000000000b6ff         movzx      ecx, byte [rbp+rax]
000000000000b704         mov        r14, rdi
000000000000b707         mov        rsi, rcx
000000000000b70a         and        ecx, 0x3f
000000000000b70d         shr        rsi, 0x3
000000000000b711         shl        r14, cl
000000000000b714         and        esi, 0x18
000000000000b717         or         qword [rbx+rsi], r14

                     loc_b71b:
000000000000b71b         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+1053
000000000000b71f         cmp        rax, 0x100
000000000000b725         jne        loc_b6f8

000000000000b727         jmp        loc_b3c4

                     loc_b72c:
000000000000b72c         lea        rdi, qword [aUpper]                         ; "upper", CODE XREF=build_charclass.isra.29+971
000000000000b733         mov        ecx, 0x6
000000000000b738         mov        rsi, r12
000000000000b73b         rep  cmpsb byte [rsi], byte [rdi]
000000000000b73d         seta       al
000000000000b740         sbb        al, 0x0
000000000000b742         test       al, al
000000000000b744         jne        loc_b792

000000000000b746         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000b74b         xor        ecx, ecx
000000000000b74d         test       rbp, rbp
000000000000b750         mov        rax, qword [rax]
000000000000b753         mov        edi, 0x1
000000000000b758         jne        loc_ba80

                     loc_b75e:
000000000000b75e         test       byte [rax+rcx*2+1], 0x1                     ; CODE XREF=build_charclass.isra.29+1185
000000000000b763         je         loc_b776

000000000000b765         mov        rdx, rcx
000000000000b768         mov        rsi, rdi
000000000000b76b         sar        rdx, 0x6
000000000000b76f         shl        rsi, cl
000000000000b772         or         qword [rbx+rdx*8], rsi

                     loc_b776:
000000000000b776         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+1155
000000000000b77a         cmp        rcx, 0x100
000000000000b781         jne        loc_b75e

000000000000b783         jmp        loc_b3c4

                     loc_b788:
000000000000b788         mov        eax, 0xc                                    ; CODE XREF=build_charclass.isra.29+394
000000000000b78d         jmp        loc_b3c6

                     loc_b792:
000000000000b792         lea        rdi, qword [aBlank]                         ; "blank", CODE XREF=build_charclass.isra.29+1124
000000000000b799         mov        ecx, 0x6
000000000000b79e         mov        rsi, r12
000000000000b7a1         rep  cmpsb byte [rsi], byte [rdi]
000000000000b7a3         seta       al
000000000000b7a6         sbb        al, 0x0
000000000000b7a8         test       al, al
000000000000b7aa         jne        loc_b89e

000000000000b7b0         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000b7b5         xor        ecx, ecx
000000000000b7b7         test       rbp, rbp
000000000000b7ba         mov        rdx, qword [rax]
000000000000b7bd         mov        esi, 0x1
000000000000b7c2         jne        loc_b864

                     loc_b7c8:
000000000000b7c8         test       byte [rdx+rcx*2], 0x1                       ; CODE XREF=build_charclass.isra.29+1290
000000000000b7cc         je         loc_b7df

000000000000b7ce         mov        rax, rcx
000000000000b7d1         mov        rdi, rsi
000000000000b7d4         sar        rax, 0x6
000000000000b7d8         shl        rdi, cl
000000000000b7db         or         qword [rbx+rax*8], rdi

                     loc_b7df:
000000000000b7df         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+1260
000000000000b7e3         cmp        rcx, 0x100
000000000000b7ea         jne        loc_b7c8

000000000000b7ec         jmp        loc_b3c4
000000000000b7f1         align      8

                     loc_b7f8:
000000000000b7f8         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+837

                     loc_b7fa:
000000000000b7fa         test       byte [rdx+rax*2+1], 0x4                     ; CODE XREF=build_charclass.isra.29+1351
000000000000b7ff         je         loc_b81d

000000000000b801         movzx      ecx, byte [rbp+rax]
000000000000b806         mov        r9, rdi
000000000000b809         mov        rsi, rcx
000000000000b80c         and        ecx, 0x3f
000000000000b80f         shr        rsi, 0x3
000000000000b813         shl        r9, cl
000000000000b816         and        esi, 0x18
000000000000b819         or         qword [rbx+rsi], r9

                     loc_b81d:
000000000000b81d         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+1311
000000000000b821         cmp        rax, 0x100
000000000000b827         jne        loc_b7fa

000000000000b829         jmp        loc_b3c4

                     loc_b82e:
000000000000b82e         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+498

                     loc_b830:
000000000000b830         test       byte [rdx+rax*2+1], 0x20                    ; CODE XREF=build_charclass.isra.29+1405
000000000000b835         je         loc_b853

000000000000b837         movzx      ecx, byte [rbp+rax]
000000000000b83c         mov        r9, rdi
000000000000b83f         mov        rsi, rcx
000000000000b842         and        ecx, 0x3f
000000000000b845         shr        rsi, 0x3
000000000000b849         shl        r9, cl
000000000000b84c         and        esi, 0x18
000000000000b84f         or         qword [rbx+rsi], r9

                     loc_b853:
000000000000b853         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+1365
000000000000b857         cmp        rax, 0x100
000000000000b85d         jne        loc_b830

000000000000b85f         jmp        loc_b3c4

                     loc_b864:
000000000000b864         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+1250
000000000000b866         mov        edi, 0x1

                     loc_b86b:
000000000000b86b         test       byte [rdx+rax*2], 0x1                       ; CODE XREF=build_charclass.isra.29+1463
000000000000b86f         je         loc_b88d

000000000000b871         movzx      ecx, byte [rbp+rax]
000000000000b876         mov        r14, rdi
000000000000b879         mov        rsi, rcx
000000000000b87c         and        ecx, 0x3f
000000000000b87f         shr        rsi, 0x3
000000000000b883         shl        r14, cl
000000000000b886         and        esi, 0x18
000000000000b889         or         qword [rbx+rsi], r14

                     loc_b88d:
000000000000b88d         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+1423
000000000000b891         cmp        rax, 0x100
000000000000b897         jne        loc_b86b

000000000000b899         jmp        loc_b3c4

                     loc_b89e:
000000000000b89e         lea        rsi, qword [aGraph]                         ; argument "__s2" for method j_strcmp, "graph", CODE XREF=build_charclass.isra.29+1226
000000000000b8a5         mov        rdi, r12                                    ; argument "__s1" for method j_strcmp
000000000000b8a8         call       j_strcmp                                    ; strcmp
000000000000b8ad         test       eax, eax
000000000000b8af         jne        loc_b92a

000000000000b8b1         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000b8b6         xor        ecx, ecx
000000000000b8b8         test       rbp, rbp
000000000000b8bb         mov        rsi, qword [rax]
000000000000b8be         mov        edx, 0x1
000000000000b8c3         jne        loc_b8ef

                     loc_b8c5:
000000000000b8c5         cmp        word [rsi+rcx*2], 0x0                       ; CODE XREF=build_charclass.isra.29+1544
000000000000b8ca         jns        loc_b8dd

000000000000b8cc         mov        rax, rcx
000000000000b8cf         mov        rdi, rdx
000000000000b8d2         sar        rax, 0x6
000000000000b8d6         shl        rdi, cl
000000000000b8d9         or         qword [rbx+rax*8], rdi

                     loc_b8dd:
000000000000b8dd         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+1514
000000000000b8e1         cmp        rcx, 0x100
000000000000b8e8         jne        loc_b8c5

000000000000b8ea         jmp        loc_b3c4

                     loc_b8ef:
000000000000b8ef         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+1507
000000000000b8f1         mov        edi, 0x1

                     loc_b8f6:
000000000000b8f6         cmp        word [rsi+rax*2], 0x0                       ; CODE XREF=build_charclass.isra.29+1603
000000000000b8fb         jns        loc_b919

000000000000b8fd         movzx      ecx, byte [rbp+rax]
000000000000b902         mov        r9, rdi
000000000000b905         mov        rdx, rcx
000000000000b908         and        ecx, 0x3f
000000000000b90b         shr        rdx, 0x3
000000000000b90f         shl        r9, cl
000000000000b912         and        edx, 0x18
000000000000b915         or         qword [rbx+rdx], r9

                     loc_b919:
000000000000b919         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+1563
000000000000b91d         cmp        rax, 0x100
000000000000b923         jne        loc_b8f6

000000000000b925         jmp        loc_b3c4

                     loc_b92a:
000000000000b92a         lea        rsi, qword [aPunct]                         ; argument "__s2" for method j_strcmp, "punct", CODE XREF=build_charclass.isra.29+1487
000000000000b931         mov        rdi, r12                                    ; argument "__s1" for method j_strcmp
000000000000b934         call       j_strcmp                                    ; strcmp
000000000000b939         test       eax, eax
000000000000b93b         jne        loc_b9b4

000000000000b93d         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000b942         xor        ecx, ecx
000000000000b944         test       rbp, rbp
000000000000b947         mov        rsi, qword [rax]
000000000000b94a         mov        edx, 0x1
000000000000b94f         jne        loc_b97a

                     loc_b951:
000000000000b951         test       byte [rsi+rcx*2], 0x4                       ; CODE XREF=build_charclass.isra.29+1683
000000000000b955         je         loc_b968

000000000000b957         mov        rax, rcx
000000000000b95a         mov        rdi, rdx
000000000000b95d         sar        rax, 0x6
000000000000b961         shl        rdi, cl
000000000000b964         or         qword [rbx+rax*8], rdi

                     loc_b968:
000000000000b968         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+1653
000000000000b96c         cmp        rcx, 0x100
000000000000b973         jne        loc_b951

000000000000b975         jmp        loc_b3c4

                     loc_b97a:
000000000000b97a         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+1647
000000000000b97c         mov        edi, 0x1

                     loc_b981:
000000000000b981         test       byte [rsi+rax*2], 0x4                       ; CODE XREF=build_charclass.isra.29+1741
000000000000b985         je         loc_b9a3

000000000000b987         movzx      ecx, byte [rbp+rax]
000000000000b98c         mov        r14, rdi
000000000000b98f         mov        rdx, rcx
000000000000b992         and        ecx, 0x3f
000000000000b995         shr        rdx, 0x3
000000000000b999         shl        r14, cl
000000000000b99c         and        edx, 0x18
000000000000b99f         or         qword [rbx+rdx], r14

                     loc_b9a3:
000000000000b9a3         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+1701
000000000000b9a7         cmp        rax, 0x100
000000000000b9ad         jne        loc_b981

000000000000b9af         jmp        loc_b3c4

                     loc_b9b4:
000000000000b9b4         lea        rsi, qword [aPunct+6]                       ; argument "__s2" for method j_strcmp, 0x158dd, CODE XREF=build_charclass.isra.29+1627
000000000000b9bb         mov        rdi, r12                                    ; argument "__s1" for method j_strcmp
000000000000b9be         call       j_strcmp                                    ; strcmp
000000000000b9c3         test       eax, eax
000000000000b9c5         jne        loc_ba40

000000000000b9c7         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000b9cc         xor        ecx, ecx
000000000000b9ce         test       rbp, rbp
000000000000b9d1         mov        rsi, qword [rax]
000000000000b9d4         mov        edx, 0x1
000000000000b9d9         jne        loc_ba05

                     loc_b9db:
000000000000b9db         test       byte [rsi+rcx*2+1], 0x10                    ; CODE XREF=build_charclass.isra.29+1822
000000000000b9e0         je         loc_b9f3

000000000000b9e2         mov        rax, rcx
000000000000b9e5         mov        rdi, rdx
000000000000b9e8         sar        rax, 0x6
000000000000b9ec         shl        rdi, cl
000000000000b9ef         or         qword [rbx+rax*8], rdi

                     loc_b9f3:
000000000000b9f3         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+1792
000000000000b9f7         cmp        rcx, 0x100
000000000000b9fe         jne        loc_b9db

000000000000ba00         jmp        loc_b3c4

                     loc_ba05:
000000000000ba05         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+1785
000000000000ba07         mov        edi, 0x1

                     loc_ba0c:
000000000000ba0c         test       byte [rsi+rax*2+1], 0x10                    ; CODE XREF=build_charclass.isra.29+1881
000000000000ba11         je         loc_ba2f

000000000000ba13         movzx      ecx, byte [rbp+rax]
000000000000ba18         mov        r9, rdi
000000000000ba1b         mov        rdx, rcx
000000000000ba1e         and        ecx, 0x3f
000000000000ba21         shr        rdx, 0x3
000000000000ba25         shl        r9, cl
000000000000ba28         and        edx, 0x18
000000000000ba2b         or         qword [rbx+rdx], r9

                     loc_ba2f:
000000000000ba2f         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+1841
000000000000ba33         cmp        rax, 0x100
000000000000ba39         jne        loc_ba0c

000000000000ba3b         jmp        loc_b3c4

                     loc_ba40:
000000000000ba40         mov        eax, 0x4                                    ; CODE XREF=build_charclass.isra.29+1765
000000000000ba45         jmp        loc_b3c6

                     loc_ba4a:
000000000000ba4a         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+704

                     loc_ba4c:
000000000000ba4c         test       byte [rdx+rax*2+1], 0x8                     ; CODE XREF=build_charclass.isra.29+1945
000000000000ba51         je         loc_ba6f

000000000000ba53         movzx      ecx, byte [rbp+rax]
000000000000ba58         mov        r14, rdi
000000000000ba5b         mov        rsi, rcx
000000000000ba5e         and        ecx, 0x3f
000000000000ba61         shr        rsi, 0x3
000000000000ba65         shl        r14, cl
000000000000ba68         and        esi, 0x18
000000000000ba6b         or         qword [rbx+rsi], r14

                     loc_ba6f:
000000000000ba6f         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+1905
000000000000ba73         cmp        rax, 0x100
000000000000ba79         jne        loc_ba4c

000000000000ba7b         jmp        loc_b3c4

                     loc_ba80:
000000000000ba80         xor        edx, edx                                    ; CODE XREF=build_charclass.isra.29+1144

                     loc_ba82:
000000000000ba82         test       byte [rax+rdx*2+1], 0x1                     ; CODE XREF=build_charclass.isra.29+2000
000000000000ba87         je         loc_baa5

000000000000ba89         movzx      ecx, byte [rbp+rdx]
000000000000ba8e         mov        r9, rdi
000000000000ba91         mov        rsi, rcx
000000000000ba94         and        ecx, 0x3f
000000000000ba97         shr        rsi, 0x3
000000000000ba9b         shl        r9, cl
000000000000ba9e         and        esi, 0x18
000000000000baa1         or         qword [rbx+rsi], r9

                     loc_baa5:
000000000000baa5         add        rdx, 0x1                                    ; CODE XREF=build_charclass.isra.29+1959
000000000000baa9         cmp        rdx, 0x100
000000000000bab0         jne        loc_ba82

000000000000bab2         jmp        loc_b3c4

                     loc_bab7:
000000000000bab7         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+991

                     loc_bab9:
000000000000bab9         test       byte [rdx+rax*2+1], 0x40                    ; CODE XREF=build_charclass.isra.29+2054
000000000000babe         je         loc_badc

000000000000bac0         movzx      ecx, byte [rbp+rax]
000000000000bac5         mov        r14, rdi
000000000000bac8         mov        rsi, rcx
000000000000bacb         and        ecx, 0x3f
000000000000bace         shr        rsi, 0x3
000000000000bad2         shl        r14, cl
000000000000bad5         and        esi, 0x18
000000000000bad8         or         qword [rbx+rsi], r14

                     loc_badc:
000000000000badc         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+2014
000000000000bae0         cmp        rax, 0x100
000000000000bae6         jne        loc_bab9

000000000000bae8         jmp        loc_b3c4
000000000000baed         align      16                                          ; End of unwind block (FDE at 0x17f10)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_50: int8_t, -80
        ;    var_58: int8_t, -88
        ;    var_60: int8_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136


                     build_charclass_op:
000000000000baf0         push       r15                                         ; Begin of unwind block (FDE at 0x17f54), CODE XREF=sub_116a0+402
000000000000baf2         push       r14
000000000000baf4         mov        r14, rdx
000000000000baf7         push       r13
000000000000baf9         push       r12
000000000000bafb         mov        r13, rcx
000000000000bafe         push       rbp
000000000000baff         push       rbx
000000000000bb00         mov        rbp, rdi
000000000000bb03         mov        edi, 0x20                                   ; argument "__nmemb" for method j_calloc
000000000000bb08         mov        r12d, r8d
000000000000bb0b         sub        rsp, 0x58
000000000000bb0f         mov        qword [rsp+0x88+var_88], rsi
000000000000bb13         mov        esi, 0x1                                    ; argument "__size" for method j_calloc
000000000000bb18         mov        qword [rsp+0x88+var_80], r9
000000000000bb1d         mov        rax, qword [fs:0x28]
000000000000bb26         mov        qword [rsp+0x88+var_40], rax
000000000000bb2b         xor        eax, eax
000000000000bb2d         mov        qword [rsp+0x88+var_70], 0x0
000000000000bb36         call       j_calloc                                    ; calloc
000000000000bb3b         test       rax, rax
000000000000bb3e         je         loc_bd00

000000000000bb44         mov        esi, 0x1                                    ; argument "__size" for method j_calloc
000000000000bb49         mov        edi, 0x50                                   ; argument "__nmemb" for method j_calloc
000000000000bb4e         mov        rbx, rax
000000000000bb51         call       j_calloc                                    ; calloc
000000000000bb56         test       rax, rax
000000000000bb59         mov        r15, rax
000000000000bb5c         je         loc_bd10

000000000000bb62         movzx      eax, byte [rax+0x20]
000000000000bb66         sub        rsp, 0x8
000000000000bb6a         mov        edx, r12d
000000000000bb6d         push       0x0
000000000000bb6f         and        edx, 0x1
000000000000bb72         mov        rdi, qword [rsp+0x98+var_88]
000000000000bb77         lea        rcx, qword [r15+0x48]
000000000000bb7b         mov        r9, r14
000000000000bb7e         mov        rsi, rbx
000000000000bb81         lea        r8, qword [rsp+0x98+var_70]
000000000000bb86         and        eax, 0xfffffffe
000000000000bb89         or         eax, edx
000000000000bb8b         lea        rdx, qword [r15+0x18]
000000000000bb8f         mov        byte [r15+0x20], al
000000000000bb93         call       build_charclass.isra.29                     ; build_charclass.isra.29
000000000000bb98         test       eax, eax
000000000000bb9a         pop        rdx
000000000000bb9b         pop        rcx
000000000000bb9c         jne        loc_bd30

000000000000bba2         movsx      rcx, byte [r13]
000000000000bba7         mov        esi, 0x1
000000000000bbac         test       cl, cl
000000000000bbae         je         loc_bbea

                     loc_bbb0:
000000000000bbb0         lea        rax, qword [rcx+0x3f]                       ; CODE XREF=build_charclass_op+248
000000000000bbb4         test       rcx, rcx
000000000000bbb7         mov        rdx, rcx
000000000000bbba         cmovns     rax, rcx
000000000000bbbe         sar        rdx, 0x3f
000000000000bbc2         add        r13, 0x1
000000000000bbc6         shr        rdx, 0x3a
000000000000bbca         sar        rax, 0x6
000000000000bbce         add        rcx, rdx
000000000000bbd1         and        ecx, 0x3f
000000000000bbd4         sub        rcx, rdx
000000000000bbd7         mov        rdx, rsi
000000000000bbda         shl        rdx, cl
000000000000bbdd         movsx      rcx, byte [r13]
000000000000bbe2         or         qword [rbx+rax*8], rdx
000000000000bbe6         test       cl, cl
000000000000bbe8         jne        loc_bbb0

                     loc_bbea:
000000000000bbea         test       r12b, r12b                                  ; CODE XREF=build_charclass_op+190
000000000000bbed         je         loc_bc02

000000000000bbef         lea        rdx, qword [rbx+0x20]
000000000000bbf3         mov        rax, rbx

                     loc_bbf6:
000000000000bbf6         not        qword [rax]                                 ; CODE XREF=build_charclass_op+272
000000000000bbf9         add        rax, 0x8
000000000000bbfd         cmp        rdx, rax
000000000000bc00         jne        loc_bbf6

                     loc_bc02:
000000000000bc02         cmp        dword [rbp+0xb4], 0x1                       ; CODE XREF=build_charclass_op+253
000000000000bc09         jle        loc_bc23

000000000000bc0b         mov        rcx, qword [rbp+0x78]
000000000000bc0f         xor        eax, eax

                     loc_bc11:
000000000000bc11         mov        rdx, qword [rcx+rax]                        ; CODE XREF=build_charclass_op+305
000000000000bc15         and        qword [rbx+rax], rdx
000000000000bc19         add        rax, 0x8
000000000000bc1d         cmp        rax, 0x20
000000000000bc21         jne        loc_bc11

                     loc_bc23:
000000000000bc23         lea        r9, qword [rsp+0x88+var_68]                 ; CODE XREF=build_charclass_op+281
000000000000bc28         lea        r12, qword [rbp+0x70]
000000000000bc2c         lea        r13, qword [rbp+0x80]
000000000000bc33         xor        ecx, ecx
000000000000bc35         xor        edx, edx
000000000000bc37         mov        byte [rsp+0x88+var_60], 0x3
000000000000bc3c         mov        r8, r9
000000000000bc3f         mov        rsi, r13
000000000000bc42         mov        rdi, r12
000000000000bc45         mov        qword [rsp+0x88+var_68], rbx
000000000000bc4a         mov        qword [rsp+0x88+var_88], r9
000000000000bc4e         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000000bc53         test       rax, rax
000000000000bc56         mov        r14, rax
000000000000bc59         je         loc_bcf0

000000000000bc5f         cmp        dword [rbp+0xb4], 0x1
000000000000bc66         jle        loc_bce0

000000000000bc68         or         byte [rbp+0xb0], 0x2
000000000000bc6f         mov        r9, qword [rsp+0x88+var_88]
000000000000bc73         xor        ecx, ecx
000000000000bc75         xor        edx, edx
000000000000bc77         mov        rsi, r13
000000000000bc7a         mov        rdi, r12
000000000000bc7d         mov        byte [rsp+0x88+var_60], 0x6
000000000000bc82         mov        qword [rsp+0x88+var_68], r15
000000000000bc87         mov        r8, r9
000000000000bc8a         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000000bc8f         test       rax, rax
000000000000bc92         je         loc_bcf0

000000000000bc94         lea        r8, qword [rsp+0x88+var_58]
000000000000bc99         mov        rdx, r14
000000000000bc9c         mov        rcx, rax
000000000000bc9f         mov        rsi, r13
000000000000bca2         mov        rdi, r12
000000000000bca5         mov        byte [rsp+0x88+var_50], 0xa
000000000000bcaa         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000000bcaf         mov        r14, rax

                     loc_bcb2:
000000000000bcb2         mov        rdi, qword [rsp+0x88+var_40]                ; CODE XREF=build_charclass_op+504, build_charclass_op+542, build_charclass_op+566, build_charclass_op+608
000000000000bcb7         xor        rdi, qword [fs:0x28]
000000000000bcc0         mov        rax, r14
000000000000bcc3         jne        loc_bd55

000000000000bcc9         add        rsp, 0x58
000000000000bccd         pop        rbx
000000000000bcce         pop        rbp
000000000000bccf         pop        r12
000000000000bcd1         pop        r13
000000000000bcd3         pop        r14
000000000000bcd5         pop        r15
000000000000bcd7         ret
                        ; endp
000000000000bcd8         align      32

                     loc_bce0:
000000000000bce0         mov        rdi, r15                                    ; CODE XREF=build_charclass_op+374
000000000000bce3         call       free_charset                                ; free_charset
000000000000bce8         jmp        loc_bcb2
000000000000bcea         align      16

                     loc_bcf0:
000000000000bcf0         mov        rdi, rbx                                    ; argument "__ptr" for method j_free, CODE XREF=build_charclass_op+361, build_charclass_op+418
000000000000bcf3         call       j_free                                      ; free
000000000000bcf8         mov        rdi, r15
000000000000bcfb         call       free_charset                                ; free_charset

                     loc_bd00:
000000000000bd00         mov        rax, qword [rsp+0x88+var_80]                ; CODE XREF=build_charclass_op+78
000000000000bd05         xor        r14d, r14d
000000000000bd08         mov        dword [rax], 0xc
000000000000bd0e         jmp        loc_bcb2

                     loc_bd10:
000000000000bd10         mov        rdi, rbx                                    ; argument "__ptr" for method j_free, CODE XREF=build_charclass_op+108
000000000000bd13         xor        r14d, r14d
000000000000bd16         call       j_free                                      ; free
000000000000bd1b         mov        rax, qword [rsp+0x88+var_80]
000000000000bd20         mov        dword [rax], 0xc
000000000000bd26         jmp        loc_bcb2
000000000000bd28         align      16

                     loc_bd30:
000000000000bd30         mov        rdi, rbx                                    ; argument "__ptr" for method j_free, CODE XREF=build_charclass_op+172
000000000000bd33         mov        dword [rsp+0x88+var_88], eax
000000000000bd36         xor        r14d, r14d
000000000000bd39         call       j_free                                      ; free
000000000000bd3e         mov        rdi, r15
000000000000bd41         call       free_charset                                ; free_charset
000000000000bd46         mov        rdi, qword [rsp+0x88+var_80]
000000000000bd4b         mov        eax, dword [rsp+0x88+var_88]
000000000000bd4e         mov        dword [rdi], eax
000000000000bd50         jmp        loc_bcb2

                     loc_bd55:
000000000000bd55         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=build_charclass_op+467
                        ; endp
000000000000bd5a         align      32                                          ; End of unwind block (FDE at 0x17f54)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_148: int8_t, -328
        ;    var_150: int8_t, -336
        ;    var_154: int32_t, -340
        ;    var_160: int64_t, -352
        ;    var_168: int64_t, -360
        ;    var_170: int64_t, -368
        ;    var_178: int64_t, -376
        ;    var_180: int64_t, -384
        ;    var_188: int64_t, -392
        ;    var_190: int64_t, -400
        ;    var_198: int64_t, -408
        ;    var_1A0: int64_t, -416
        ;    var_1A8: int64_t, -424


                     re_compile_fastmap_iter.isra.30:
000000000000bd60         push       r15                                         ; Begin of unwind block (FDE at 0x17fb4), CODE XREF=rpl_re_compile_fastmap+80, rpl_re_compile_fastmap+111, rpl_re_compile_fastmap+145, rpl_re_compile_fastmap+179
000000000000bd62         push       r14
000000000000bd64         mov        rax, rdi
000000000000bd67         push       r13
000000000000bd69         push       r12
000000000000bd6b         push       rbp
000000000000bd6c         push       rbx
000000000000bd6d         xor        ebx, ebx
000000000000bd6f         mov        rbp, rcx
000000000000bd72         sub        rsp, 0x178
000000000000bd79         mov        rax, qword [rax]
000000000000bd7c         mov        qword [rsp+0x1a8+var_178], rdi
000000000000bd81         mov        qword [rsp+0x1a8+var_188], rsi
000000000000bd86         mov        rdi, qword [fs:0x28]
000000000000bd8f         mov        qword [rsp+0x1a8+var_40], rdi
000000000000bd97         xor        edi, edi
000000000000bd99         cmp        dword [rax+0xb4], 0x1
000000000000bda0         mov        qword [rsp+0x1a8+var_180], rdx
000000000000bda5         mov        qword [rsp+0x1a8+var_1A0], rax
000000000000bdaa         jne        loc_bdc3

000000000000bdac         mov        rax, qword [rsp+0x1a8+var_178]
000000000000bdb1         mov        rax, qword [rax+0x18]
000000000000bdb5         mov        rbx, rax
000000000000bdb8         mov        qword [rsp+0x1a8+var_1A8], rax
000000000000bdbc         shr        rbx, 0x16
000000000000bdc0         and        ebx, 0x1

                     loc_bdc3:
000000000000bdc3         mov        rax, qword [rsp+0x1a8+var_188]              ; CODE XREF=re_compile_fastmap_iter.isra.30+74
000000000000bdc8         cmp        qword [rax], 0x0
000000000000bdcc         jle        loc_c1dd

000000000000bdd2         lea        rax, qword [rsp+0x1a8+var_150]
000000000000bdd7         mov        qword [rsp+0x1a8+var_1A8], 0x0
000000000000bddf         mov        qword [rsp+0x1a8+var_168], rax
000000000000bde4         lea        rax, qword [rsp+0x1a8+var_154]
000000000000bde9         mov        qword [rsp+0x1a8+var_160], rax
000000000000bdee         lea        rax, qword [rsp+0x1a8+var_148]
000000000000bdf3         mov        qword [rsp+0x1a8+var_170], rax
000000000000bdf8         jmp        loc_be3e
000000000000bdfa         align      512

                     loc_be00:
000000000000be00         cmp        eax, 0x3                                    ; CODE XREF=re_compile_fastmap_iter.isra.30+271
000000000000be03         je         loc_c0f6

000000000000be09         cmp        eax, 0x6
000000000000be0c         je         loc_bf98

000000000000be12         and        edx, 0xfffffffd
000000000000be15         cmp        dl, 0x5
000000000000be18         je         loc_c214

000000000000be1e         cmp        eax, 0x2
000000000000be21         je         loc_c174

                     loc_be27:
000000000000be27         mov        rdi, qword [rsp+0x1a8+var_188]              ; CODE XREF=re_compile_fastmap_iter.isra.30+313, re_compile_fastmap_iter.isra.30+327, re_compile_fastmap_iter.isra.30+507, re_compile_fastmap_iter.isra.30+543, re_compile_fastmap_iter.isra.30+559, re_compile_fastmap_iter.isra.30+630, re_compile_fastmap_iter.isra.30+842, re_compile_fastmap_iter.isra.30+913, re_compile_fastmap_iter.isra.30+1028
000000000000be2c         add        qword [rsp+0x1a8+var_1A8], 0x1
000000000000be31         mov        rax, qword [rsp+0x1a8+var_1A8]
000000000000be35         cmp        rax, qword [rdi]
000000000000be38         jge        loc_c1dd

                     loc_be3e:
000000000000be3e         mov        rax, qword [rsp+0x1a8+var_180]              ; CODE XREF=re_compile_fastmap_iter.isra.30+152
000000000000be43         mov        rdi, qword [rsp+0x1a8+var_1A8]
000000000000be47         mov        rax, qword [rax]
000000000000be4a         mov        r12, qword [rax+rdi*8]
000000000000be4e         mov        rax, qword [rsp+0x1a8+var_1A0]
000000000000be53         mov        rcx, qword [rax]
000000000000be56         mov        rax, r12
000000000000be59         shl        rax, 0x4
000000000000be5d         mov        qword [rsp+0x1a8+var_198], rax
000000000000be62         lea        rsi, qword [rcx+rax]
000000000000be66         movzx      eax, byte [rsi+8]
000000000000be6a         cmp        eax, 0x1
000000000000be6d         mov        edx, eax
000000000000be6f         jne        loc_be00

000000000000be71         movzx      r13d, byte [rsi]
000000000000be75         test       ebx, ebx
000000000000be77         mov        byte [rbp+r13], 0x1
000000000000be7d         je         loc_be90

000000000000be7f         call       j___ctype_tolower_loc                       ; __ctype_tolower_loc
000000000000be84         mov        rax, qword [rax]
000000000000be87         movsxd     rax, dword [rax+r13*4]
000000000000be8b         mov        byte [rbp+rax], 0x1

                     loc_be90:
000000000000be90         mov        rax, qword [rsp+0x1a8+var_178]              ; CODE XREF=re_compile_fastmap_iter.isra.30+285
000000000000be95         test       byte [rax+0x1a], 0x40
000000000000be99         je         loc_be27

000000000000be9b         mov        rsi, qword [rsp+0x1a8+var_1A0]
000000000000bea0         cmp        dword [rsi+0xb4], 0x1
000000000000bea7         jle        loc_be27

000000000000bead         mov        rax, qword [rsi]
000000000000beb0         mov        rdi, qword [rsp+0x1a8+var_198]
000000000000beb5         movzx      edx, byte [rax+rdi]
000000000000beb9         mov        byte [rsp+0x1a8+var_148], dl
000000000000bebd         lea        rdx, qword [r12+1]
000000000000bec2         cmp        qword [rsi+0x10], rdx
000000000000bec6         jbe        loc_c206

000000000000becc         lea        rcx, qword [rax+rdi+0x10]
000000000000bed1         mov        eax, dword [rcx+8]
000000000000bed4         and        eax, 0x2000ff
000000000000bed9         cmp        eax, 0x200001
000000000000bede         jne        loc_c206

000000000000bee4         add        rdi, 0x20
000000000000bee8         mov        r13, rdi
000000000000beeb         mov        rdi, qword [rsp+0x1a8+var_170]
000000000000bef0         lea        rax, qword [rdi+1]
000000000000bef4         jmp        loc_bf1b
000000000000bef6         align      256

                     loc_bf00:
000000000000bf00         mov        rcx, qword [rsi]                            ; CODE XREF=re_compile_fastmap_iter.isra.30+466
000000000000bf03         add        rcx, r13
000000000000bf06         add        r13, 0x10
000000000000bf0a         mov        edx, dword [rcx+8]
000000000000bf0d         and        edx, 0x2000ff
000000000000bf13         cmp        edx, 0x200001
000000000000bf19         jne        loc_bf34

                     loc_bf1b:
000000000000bf1b         movzx      edx, byte [rcx]                             ; CODE XREF=re_compile_fastmap_iter.isra.30+404
000000000000bf1e         add        rax, 0x1
000000000000bf22         mov        byte [rax-1], dl
000000000000bf25         mov        rdx, rax
000000000000bf28         sub        rdx, rdi
000000000000bf2b         add        rdx, r12
000000000000bf2e         cmp        qword [rsi+0x10], rdx
000000000000bf32         ja         loc_bf00

                     loc_bf34:
000000000000bf34         mov        rsi, qword [rsp+0x1a8+var_170]              ; CODE XREF=re_compile_fastmap_iter.isra.30+441, re_compile_fastmap_iter.isra.30+1199
000000000000bf39         mov        rcx, qword [rsp+0x1a8+var_168]
000000000000bf3e         mov        rdi, qword [rsp+0x1a8+var_160]
000000000000bf43         sub        rax, rsi
000000000000bf46         mov        qword [rcx], 0x0
000000000000bf4d         mov        r12, rax
000000000000bf50         mov        rdx, rax
000000000000bf53         call       rpl_mbrtowc                                 ; rpl_mbrtowc
000000000000bf58         cmp        r12, rax
000000000000bf5b         jne        loc_be27

000000000000bf61         mov        edi, dword [rsp+0x1a8+var_154]              ; argument "__wc" for method j_towlower
000000000000bf65         call       j_towlower                                  ; towlower
000000000000bf6a         mov        rdx, qword [rsp+0x1a8+var_168]              ; argument "__ps" for method j_wcrtomb
000000000000bf6f         mov        rdi, qword [rsp+0x1a8+var_170]              ; argument "__s" for method j_wcrtomb
000000000000bf74         mov        esi, eax                                    ; argument "__wc" for method j_wcrtomb
000000000000bf76         call       j_wcrtomb                                   ; wcrtomb
000000000000bf7b         cmp        rax, 0xffffffffffffffff
000000000000bf7f         je         loc_be27

000000000000bf85         movzx      eax, byte [rsp+0x1a8+var_148]
000000000000bf8a         mov        byte [rbp+rax], 0x1
000000000000bf8f         jmp        loc_be27
000000000000bf94         align      8

                     loc_bf98:
000000000000bf98         mov        rax, qword [rsp+0x1a8+var_1A0]              ; CODE XREF=re_compile_fastmap_iter.isra.30+172
000000000000bf9d         mov        r12, qword [rsi]
000000000000bfa0         cmp        dword [rax+0xb4], 0x1
000000000000bfa7         jle        loc_bfcd

000000000000bfa9         cmp        qword [r12+0x48], 0x0
000000000000bfaf         jne        loc_c0af

000000000000bfb5         test       byte [r12+0x20], 0x1
000000000000bfbb         jne        loc_c0af

000000000000bfc1         cmp        qword [r12+0x40], 0x0
000000000000bfc7         jne        loc_c0af

                     loc_bfcd:
000000000000bfcd         xor        r13d, r13d                                  ; CODE XREF=re_compile_fastmap_iter.isra.30+583
000000000000bfd0         cmp        qword [r12+0x28], 0x0
000000000000bfd6         jle        loc_be27

000000000000bfdc         mov        r15, r12
000000000000bfdf         mov        r14, qword [rsp+0x1a8+var_168]
000000000000bfe4         mov        r12, rbp
000000000000bfe7         mov        rbp, r13
000000000000bfea         mov        r13d, ebx
000000000000bfed         jmp        loc_bffd

                     loc_bfef:
000000000000bfef         add        rbp, 0x1                                    ; CODE XREF=re_compile_fastmap_iter.isra.30+760, re_compile_fastmap_iter.isra.30+774, re_compile_fastmap_iter.isra.30+806
000000000000bff3         cmp        rbp, qword [r15+0x28]
000000000000bff7         jge        loc_c0a4

                     loc_bffd:
000000000000bffd         mov        qword [r14], 0x0                            ; CODE XREF=re_compile_fastmap_iter.isra.30+653, re_compile_fastmap_iter.isra.30+830
000000000000c004         mov        rax, qword [r15]
000000000000c007         mov        rdx, r14                                    ; argument "__ps" for method j_wcrtomb
000000000000c00a         mov        rdi, qword [rsp+0x1a8+var_170]              ; argument "__s" for method j_wcrtomb
000000000000c00f         lea        rbx, qword [rbp*4]
000000000000c017         mov        esi, dword [rax+rbp*4]                      ; argument "__wc" for method j_wcrtomb
000000000000c01a         call       j_wcrtomb                                   ; wcrtomb
000000000000c01f         cmp        rax, 0xffffffffffffffff
000000000000c023         je         loc_c04f

000000000000c025         movzx      edx, byte [rsp+0x1a8+var_148]
000000000000c02a         test       r13d, r13d
000000000000c02d         mov        byte [r12+rdx], 0x1
000000000000c032         mov        qword [rsp+0x1a8+var_198], rdx
000000000000c037         je         loc_c04f

000000000000c039         call       j___ctype_tolower_loc                       ; __ctype_tolower_loc
000000000000c03e         mov        rdx, qword [rsp+0x1a8+var_198]
000000000000c043         mov        rax, qword [rax]
000000000000c046         movsxd     rax, dword [rax+rdx*4]
000000000000c04a         mov        byte [r12+rax], 0x1

                     loc_c04f:
000000000000c04f         mov        rax, qword [rsp+0x1a8+var_178]              ; CODE XREF=re_compile_fastmap_iter.isra.30+707, re_compile_fastmap_iter.isra.30+727
000000000000c054         test       byte [rax+0x1a], 0x40
000000000000c058         je         loc_bfef

000000000000c05a         mov        rax, qword [rsp+0x1a8+var_1A0]
000000000000c05f         cmp        dword [rax+0xb4], 0x1
000000000000c066         jle        loc_bfef

000000000000c068         mov        rax, qword [r15]
000000000000c06b         mov        edi, dword [rax+rbx]                        ; argument "__wc" for method j_towlower
000000000000c06e         call       j_towlower                                  ; towlower
000000000000c073         mov        rdi, qword [rsp+0x1a8+var_170]              ; argument "__s" for method j_wcrtomb
000000000000c078         mov        rdx, r14                                    ; argument "__ps" for method j_wcrtomb
000000000000c07b         mov        esi, eax                                    ; argument "__wc" for method j_wcrtomb
000000000000c07d         call       j_wcrtomb                                   ; wcrtomb
000000000000c082         cmp        rax, 0xffffffffffffffff
000000000000c086         je         loc_bfef

000000000000c08c         movzx      eax, byte [rsp+0x1a8+var_148]
000000000000c091         add        rbp, 0x1
000000000000c095         mov        byte [r12+rax], 0x1
000000000000c09a         cmp        rbp, qword [r15+0x28]
000000000000c09e         jl         loc_bffd

                     loc_c0a4:
000000000000c0a4         mov        ebx, r13d                                   ; CODE XREF=re_compile_fastmap_iter.isra.30+663
000000000000c0a7         mov        rbp, r12
000000000000c0aa         jmp        loc_be27

                     loc_c0af:
000000000000c0af         mov        r12, qword [rsp+0x1a8+var_168]              ; CODE XREF=re_compile_fastmap_iter.isra.30+591, re_compile_fastmap_iter.isra.30+603, re_compile_fastmap_iter.isra.30+615
000000000000c0b4         mov        r13, qword [rsp+0x1a8+var_160]
000000000000c0b9         mov        byte [rsp+0x1a8+var_154], 0x0
000000000000c0be         nop

                     loc_c0c0:
000000000000c0c0         xor        edi, edi                                    ; CODE XREF=re_compile_fastmap_iter.isra.30+911
000000000000c0c2         mov        qword [r12], 0x0
000000000000c0ca         mov        rcx, r12
000000000000c0cd         mov        edx, 0x1
000000000000c0d2         mov        rsi, r13
000000000000c0d5         call       rpl_mbrtowc                                 ; rpl_mbrtowc
000000000000c0da         cmp        rax, 0xfffffffffffffffe
000000000000c0de         jne        loc_c0ea

000000000000c0e0         movzx      eax, byte [rsp+0x1a8+var_154]
000000000000c0e5         mov        byte [rbp+rax], 0x1

                     loc_c0ea:
000000000000c0ea         add        byte [rsp+0x1a8+var_154], 0x1               ; CODE XREF=re_compile_fastmap_iter.isra.30+894
000000000000c0ef         jne        loc_c0c0

000000000000c0f1         jmp        loc_be27

                     loc_c0f6:
000000000000c0f6         mov        r13, rbp                                    ; CODE XREF=re_compile_fastmap_iter.isra.30+163
000000000000c0f9         xor        r12d, r12d
000000000000c0fc         mov        qword [rsp+0x1a8+var_190], 0x0

                     loc_c105:
000000000000c105         mov        rax, qword [rsp+0x1a8+var_198]              ; CODE XREF=re_compile_fastmap_iter.isra.30+1042
000000000000c10a         mov        rsi, qword [rsp+0x1a8+var_190]
000000000000c10f         xor        r14d, r14d
000000000000c112         mov        rax, qword [rcx+rax]
000000000000c116         mov        r15, qword [rax+rsi]
000000000000c11a         nop        word [rax+rax]

                     loc_c120:
000000000000c120         bt         r15, r14                                    ; CODE XREF=re_compile_fastmap_iter.isra.30+1005
000000000000c124         jae        loc_c145

000000000000c126         test       ebx, ebx
000000000000c128         mov        byte [r13+r14], 0x1
000000000000c12e         je         loc_c145

000000000000c130         call       j___ctype_tolower_loc                       ; __ctype_tolower_loc
000000000000c135         mov        rax, qword [rax]
000000000000c138         lea        rdx, qword [r12+r14]
000000000000c13c         movsxd     rax, dword [rax+rdx*4]
000000000000c140         mov        byte [rbp+rax], 0x1

                     loc_c145:
000000000000c145         add        r14, 0x1                                    ; CODE XREF=re_compile_fastmap_iter.isra.30+964, re_compile_fastmap_iter.isra.30+974
000000000000c149         cmp        r14, 0x40
000000000000c14d         jne        loc_c120

000000000000c14f         add        r12, 0x40
000000000000c153         add        qword [rsp+0x1a8+var_190], 0x8
000000000000c159         add        r13, 0x40
000000000000c15d         cmp        r12, 0x100
000000000000c164         je         loc_be27

000000000000c16a         mov        rax, qword [rsp+0x1a8+var_1A0]
000000000000c16f         mov        rcx, qword [rax]
000000000000c172         jmp        loc_c105

                     loc_c174:
000000000000c174         movdqa     xmm0, xmmword [__re_error_msgid+384]        ; 0x160a0, CODE XREF=re_compile_fastmap_iter.isra.30+193
000000000000c17c         movups     xmmword [rbp], xmm0
000000000000c180         movups     xmmword [rbp+0x10], xmm0
000000000000c184         movups     xmmword [rbp+0x20], xmm0
000000000000c188         movups     xmmword [rbp+0x30], xmm0
000000000000c18c         movups     xmmword [rbp+0x40], xmm0
000000000000c190         movups     xmmword [rbp+0x50], xmm0
000000000000c194         movups     xmmword [rbp+0x60], xmm0
000000000000c198         movups     xmmword [rbp+0x70], xmm0
000000000000c19c         movups     xmmword [rbp+0x80], xmm0
000000000000c1a3         movups     xmmword [rbp+0x90], xmm0
000000000000c1aa         movups     xmmword [rbp+0xa0], xmm0
000000000000c1b1         movups     xmmword [rbp+0xb0], xmm0
000000000000c1b8         movups     xmmword [rbp+0xc0], xmm0
000000000000c1bf         movups     xmmword [rbp+0xd0], xmm0
000000000000c1c6         movups     xmmword [rbp+0xe0], xmm0
000000000000c1cd         movups     xmmword [rbp+0xf0], xmm0

                     loc_c1d4:
000000000000c1d4         mov        rax, qword [rsp+0x1a8+var_178]              ; CODE XREF=re_compile_fastmap_iter.isra.30+1309
000000000000c1d9         or         byte [rax+0x38], 0x1

                     loc_c1dd:
000000000000c1dd         mov        rax, qword [rsp+0x1a8+var_40]               ; CODE XREF=re_compile_fastmap_iter.isra.30+108, re_compile_fastmap_iter.isra.30+216, re_compile_fastmap_iter.isra.30+1303
000000000000c1e5         xor        rax, qword [fs:0x28]
000000000000c1ee         jne        loc_c282

000000000000c1f4         add        rsp, 0x178
000000000000c1fb         pop        rbx
000000000000c1fc         pop        rbp
000000000000c1fd         pop        r12
000000000000c1ff         pop        r13
000000000000c201         pop        r14
000000000000c203         pop        r15
000000000000c205         ret
                        ; endp

                     loc_c206:
000000000000c206         mov        rax, qword [rsp+0x1a8+var_170]              ; CODE XREF=re_compile_fastmap_iter.isra.30+358, re_compile_fastmap_iter.isra.30+382
000000000000c20b         add        rax, 0x1
000000000000c20f         jmp        loc_bf34

                     loc_c214:
000000000000c214         movdqa     xmm0, xmmword [__re_error_msgid+384]        ; 0x160a0, CODE XREF=re_compile_fastmap_iter.isra.30+184
000000000000c21c         cmp        eax, 0x2
000000000000c21f         movups     xmmword [rbp], xmm0
000000000000c223         movups     xmmword [rbp+0x10], xmm0
000000000000c227         movups     xmmword [rbp+0x20], xmm0
000000000000c22b         movups     xmmword [rbp+0x30], xmm0
000000000000c22f         movups     xmmword [rbp+0x40], xmm0
000000000000c233         movups     xmmword [rbp+0x50], xmm0
000000000000c237         movups     xmmword [rbp+0x60], xmm0
000000000000c23b         movups     xmmword [rbp+0x70], xmm0
000000000000c23f         movups     xmmword [rbp+0x80], xmm0
000000000000c246         movups     xmmword [rbp+0x90], xmm0
000000000000c24d         movups     xmmword [rbp+0xa0], xmm0
000000000000c254         movups     xmmword [rbp+0xb0], xmm0
000000000000c25b         movups     xmmword [rbp+0xc0], xmm0
000000000000c262         movups     xmmword [rbp+0xd0], xmm0
000000000000c269         movups     xmmword [rbp+0xe0], xmm0
000000000000c270         movups     xmmword [rbp+0xf0], xmm0
000000000000c277         jne        loc_c1dd

000000000000c27d         jmp        loc_c1d4

                     loc_c282:
000000000000c282         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=re_compile_fastmap_iter.isra.30+1166
                        ; endp
000000000000c287         align      16                                          ; End of unwind block (FDE at 0x17fb4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     check_node_accept_bytes.isra.31:
000000000000c290         shl        rdx, 0x4                                    ; Begin of unwind block (FDE at 0x18004), CODE XREF=check_arrival+597, set_regs+888, sift_states_backward+521, re_search_internal+3298
000000000000c294         push       r13
000000000000c296         push       r12
000000000000c298         lea        r9, qword [rdi+rdx]
000000000000c29c         push       rbp
000000000000c29d         push       rbx
000000000000c29e         sub        rsp, 0x8
000000000000c2a2         movzx      r11d, byte [r9+8]
000000000000c2a7         cmp        r11b, 0x7
000000000000c2ab         je         loc_c3c0

000000000000c2b1         cmp        dword [rcx+0x90], 0x1
000000000000c2b8         je         loc_c380

000000000000c2be         mov        rbx, rsi
000000000000c2c1         mov        rdi, rcx
000000000000c2c4         mov        rsi, r8
000000000000c2c7         mov        r10, rcx
000000000000c2ca         call       re_string_char_size_at.part.0               ; re_string_char_size_at.part.0
000000000000c2cf         cmp        r11b, 0x5
000000000000c2d3         mov        ebp, eax
000000000000c2d5         je         loc_c390

000000000000c2db         cmp        r11b, 0x6
000000000000c2df         jne        loc_c380

000000000000c2e5         cmp        eax, 0x1
000000000000c2e8         jle        loc_c380

000000000000c2ee         mov        r13, qword [r9]
000000000000c2f1         mov        rsi, qword [r13+0x40]
000000000000c2f5         mov        rdx, qword [r13+0x28]
000000000000c2f9         test       rsi, rsi
000000000000c2fc         jne        loc_c309

000000000000c2fe         cmp        qword [r13+0x48], 0x0
000000000000c303         je         loc_c3f8

                     loc_c309:
000000000000c309         mov        rax, qword [r10+0x10]                       ; CODE XREF=check_node_accept_bytes.isra.31+108, check_node_accept_bytes.isra.31+363
000000000000c30d         test       rdx, rdx
000000000000c310         mov        r12d, dword [rax+r8*4]
000000000000c314         jle        loc_c337

000000000000c316         mov        rcx, qword [r13]
000000000000c31a         cmp        r12d, dword [rcx]
000000000000c31d         je         loc_c372

000000000000c31f         xor        eax, eax
000000000000c321         jmp        loc_c32e
000000000000c323         align      8

                     loc_c328:
000000000000c328         cmp        r12d, dword [rcx+rax*4]                     ; CODE XREF=check_node_accept_bytes.isra.31+165
000000000000c32c         je         loc_c372

                     loc_c32e:
000000000000c32e         add        rax, 0x1                                    ; CODE XREF=check_node_accept_bytes.isra.31+145
000000000000c332         cmp        rax, rdx
000000000000c335         jne        loc_c328

                     loc_c337:
000000000000c337         mov        rax, qword [r13+0x48]                       ; CODE XREF=check_node_accept_bytes.isra.31+132
000000000000c33b         test       rax, rax
000000000000c33e         jle        loc_c41c

000000000000c344         xor        ebx, ebx
000000000000c346         jmp        loc_c35e
000000000000c348         align      16

                     loc_c350:
000000000000c350         add        rbx, 0x1                                    ; CODE XREF=check_node_accept_bytes.isra.31+224
000000000000c354         cmp        rbx, qword [r13+0x48]
000000000000c358         jge        loc_c418

                     loc_c35e:
000000000000c35e         mov        rax, qword [r13+0x18]                       ; CODE XREF=check_node_accept_bytes.isra.31+182
000000000000c362         mov        edi, r12d                                   ; argument "__wc" for method j_iswctype
000000000000c365         mov        rsi, qword [rax+rbx*8]                      ; argument "__desc" for method j_iswctype
000000000000c369         call       j_iswctype                                  ; iswctype
000000000000c36e         test       eax, eax
000000000000c370         je         loc_c350

                     loc_c372:
000000000000c372         test       byte [r13+0x20], 0x1                        ; CODE XREF=check_node_accept_bytes.isra.31+141, check_node_accept_bytes.isra.31+156, check_node_accept_bytes.isra.31+441
000000000000c377         je         loc_c382

000000000000c379         nop        dword [rax]

                     loc_c380:
000000000000c380         xor        ebp, ebp                                    ; CODE XREF=check_node_accept_bytes.isra.31+40, check_node_accept_bytes.isra.31+79, check_node_accept_bytes.isra.31+88, check_node_accept_bytes.isra.31+259, check_node_accept_bytes.isra.31+281, check_node_accept_bytes.isra.31+299, check_node_accept_bytes.isra.31+317, check_node_accept_bytes.isra.31+330, check_node_accept_bytes.isra.31+353, check_node_accept_bytes.isra.31+380, check_node_accept_bytes.isra.31+457

                     loc_c382:
000000000000c382         add        rsp, 0x8                                    ; CODE XREF=check_node_accept_bytes.isra.31+231, check_node_accept_bytes.isra.31+270, check_node_accept_bytes.isra.31+283, check_node_accept_bytes.isra.31+355, check_node_accept_bytes.isra.31+374, check_node_accept_bytes.isra.31+497
000000000000c386         mov        eax, ebp
000000000000c388         pop        rbx
000000000000c389         pop        rbp
000000000000c38a         pop        r12
000000000000c38c         pop        r13
000000000000c38e         ret
                        ; endp
000000000000c38f         align      16

                     loc_c390:
000000000000c390         cmp        eax, 0x1                                    ; CODE XREF=check_node_accept_bytes.isra.31+69
000000000000c393         jle        loc_c380

000000000000c395         mov        rax, qword [rbx]
000000000000c398         test       al, 0x40
000000000000c39a         je         loc_c3b0

                     loc_c39c:
000000000000c39c         test       al, 0x80                                    ; CODE XREF=check_node_accept_bytes.isra.31+297
000000000000c39e         je         loc_c382

000000000000c3a0         mov        rax, qword [r10+8]
000000000000c3a4         cmp        byte [rax+r8], 0x0
000000000000c3a9         je         loc_c380

000000000000c3ab         jmp        loc_c382
000000000000c3ad         align      16

                     loc_c3b0:
000000000000c3b0         mov        rdx, qword [r10+8]                          ; CODE XREF=check_node_accept_bytes.isra.31+266
000000000000c3b4         cmp        byte [rdx+r8], 0xa
000000000000c3b9         jne        loc_c39c

000000000000c3bb         jmp        loc_c380
000000000000c3bd         align      64

                     loc_c3c0:
000000000000c3c0         mov        rdx, qword [rcx+8]                          ; CODE XREF=check_node_accept_bytes.isra.31+27
000000000000c3c4         lea        rsi, qword [rdx+r8]
000000000000c3c8         movzx      eax, byte [rsi]
000000000000c3cb         cmp        al, 0xc1
000000000000c3cd         jbe        loc_c380

000000000000c3cf         mov        rcx, qword [rcx+0x58]
000000000000c3d3         lea        rdi, qword [r8+1]
000000000000c3d7         cmp        rdi, rcx
000000000000c3da         jge        loc_c380

000000000000c3dc         cmp        al, 0xdf
000000000000c3de         movzx      edx, byte [rdx+r8+1]
000000000000c3e4         ja         loc_c44e

000000000000c3e6         add        edx, 0xffffff80
000000000000c3e9         mov        ebp, 0x2
000000000000c3ee         cmp        dl, 0x3f
000000000000c3f1         ja         loc_c380

000000000000c3f3         jmp        loc_c382
000000000000c3f5         align      8

                     loc_c3f8:
000000000000c3f8         test       rdx, rdx                                    ; CODE XREF=check_node_accept_bytes.isra.31+115
000000000000c3fb         jne        loc_c309

                     loc_c401:
000000000000c401         test       byte [r13+0x20], 0x1                        ; CODE XREF=check_node_accept_bytes.isra.31+399, check_node_accept_bytes.isra.31+423
000000000000c406         jne        loc_c382

000000000000c40c         jmp        loc_c380
000000000000c411         align      8

                     loc_c418:
000000000000c418         mov        rsi, qword [r13+0x40]                       ; CODE XREF=check_node_accept_bytes.isra.31+200

                     loc_c41c:
000000000000c41c         test       rsi, rsi                                    ; CODE XREF=check_node_accept_bytes.isra.31+174
000000000000c41f         jle        loc_c401

000000000000c421         mov        rdx, qword [r13+8]
000000000000c425         xor        eax, eax
000000000000c427         jmp        loc_c439
000000000000c429         align      16

                     loc_c430:
000000000000c430         add        rax, 0x1                                    ; CODE XREF=check_node_accept_bytes.isra.31+429, check_node_accept_bytes.isra.31+439
000000000000c434         cmp        rax, rsi
000000000000c437         je         loc_c401

                     loc_c439:
000000000000c439         cmp        r12d, dword [rdx+rax*4]                     ; CODE XREF=check_node_accept_bytes.isra.31+407
000000000000c43d         jl         loc_c430

000000000000c43f         mov        rcx, qword [r13+0x10]
000000000000c443         cmp        r12d, dword [rcx+rax*4]
000000000000c447         jg         loc_c430

000000000000c449         jmp        loc_c372

                     loc_c44e:
000000000000c44e         cmp        al, 0xef                                    ; CODE XREF=check_node_accept_bytes.isra.31+340
000000000000c450         ja         loc_c498

000000000000c452         cmp        al, 0xe0
000000000000c454         jne        loc_c45f

000000000000c456         cmp        dl, 0x9f
000000000000c459         jbe        loc_c380

                     loc_c45f:
000000000000c45f         mov        ebp, 0x3                                    ; CODE XREF=check_node_accept_bytes.isra.31+452

                     loc_c464:
000000000000c464         movsxd     rdi, ebp                                    ; CODE XREF=check_node_accept_bytes.isra.31+542, check_node_accept_bytes.isra.31+566, check_node_accept_bytes.isra.31+594
000000000000c467         add        r8, rdi
000000000000c46a         cmp        rcx, r8
000000000000c46d         jl         loc_c380

000000000000c473         mov        eax, 0x1
000000000000c478         jmp        loc_c487

                     loc_c47a:
000000000000c47a         add        rax, 0x1                                    ; CODE XREF=check_node_accept_bytes.isra.31+513
000000000000c47e         cmp        rdi, rax
000000000000c481         jle        loc_c382

                     loc_c487:
000000000000c487         movzx      ebx, byte [rsi+rax]                         ; CODE XREF=check_node_accept_bytes.isra.31+488
000000000000c48b         lea        edx, dword [rbx-0x80]
000000000000c48e         cmp        dl, 0x3f
000000000000c491         jbe        loc_c47a

000000000000c493         jmp        loc_c380

                     loc_c498:
000000000000c498         cmp        al, 0xf7                                    ; CODE XREF=check_node_accept_bytes.isra.31+448
000000000000c49a         ja         loc_c4b0

000000000000c49c         cmp        al, 0xf0
000000000000c49e         jne        loc_c4a9

000000000000c4a0         cmp        dl, 0x8f
000000000000c4a3         jbe        loc_c380

                     loc_c4a9:
000000000000c4a9         mov        ebp, 0x4                                    ; CODE XREF=check_node_accept_bytes.isra.31+526
000000000000c4ae         jmp        loc_c464

                     loc_c4b0:
000000000000c4b0         cmp        al, 0xfb                                    ; CODE XREF=check_node_accept_bytes.isra.31+522
000000000000c4b2         ja         loc_c4c8

000000000000c4b4         cmp        al, 0xf8
000000000000c4b6         jne        loc_c4c1

000000000000c4b8         cmp        dl, 0x87
000000000000c4bb         jbe        loc_c380

                     loc_c4c1:
000000000000c4c1         mov        ebp, 0x5                                    ; CODE XREF=check_node_accept_bytes.isra.31+550
000000000000c4c6         jmp        loc_c464

                     loc_c4c8:
000000000000c4c8         cmp        al, 0xfd                                    ; CODE XREF=check_node_accept_bytes.isra.31+546
000000000000c4ca         ja         loc_c380

000000000000c4d0         cmp        al, 0xfc
000000000000c4d2         jne        loc_c4dd

000000000000c4d4         cmp        dl, 0x83
000000000000c4d7         jbe        loc_c380

                     loc_c4dd:
000000000000c4dd         mov        ebp, 0x6                                    ; CODE XREF=check_node_accept_bytes.isra.31+578
000000000000c4e2         jmp        loc_c464
000000000000c4e4         align      16                                          ; End of unwind block (FDE at 0x18004)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int8_t, -88
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_7C: int32_t, -124
        ;    var_80: int32_t, -128
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208
        ;    var_D8: int64_t, -216
        ;    var_E0: int64_t, -224
        ;    var_E8: int64_t, -232
        ;    var_F0: int64_t, -240
        ;    var_F8: int64_t, -248
        ;    var_100: int64_t, -256
        ;    var_108: int64_t, -264


                     check_arrival:
000000000000c4f0         push       r15                                         ; Begin of unwind block (FDE at 0x18040), CODE XREF=get_subexp_sub.isra.32+48, transit_state_bkref.isra.34+1675
000000000000c4f2         push       r14
000000000000c4f4         mov        r15, rdi
000000000000c4f7         push       r13
000000000000c4f9         push       r12
000000000000c4fb         push       rbp
000000000000c4fc         push       rbx
000000000000c4fd         mov        rbp, rcx
000000000000c500         mov        rbx, rdx
000000000000c503         sub        rsp, 0xd8
000000000000c50a         mov        rcx, qword [rdi+0x98]
000000000000c511         mov        r13, qword [rsi+8]
000000000000c515         mov        rax, qword [fs:0x28]
000000000000c51e         mov        qword [rsp+0x108+var_40], rax
000000000000c526         xor        eax, eax
000000000000c528         mov        rax, rdx
000000000000c52b         mov        qword [rsp+0x108+var_A8], rsi
000000000000c530         mov        qword [rsp+0x108+var_90], r8
000000000000c535         shl        rax, 0x4
000000000000c539         add        rax, qword [rcx]
000000000000c53c         mov        qword [rsp+0x108+var_C8], r9
000000000000c541         mov        qword [rsp+0x108+var_D8], rcx
000000000000c546         mov        dword [rsp+0x108+var_80], 0x0
000000000000c551         mov        rax, qword [rax]
000000000000c554         mov        qword [rsp+0x108+var_C0], rax
000000000000c559         movsxd     rax, dword [rdi+0xe0]
000000000000c560         add        rax, r9
000000000000c563         cmp        rax, r13
000000000000c566         jge        loc_cb86

                     loc_c56c:
000000000000c56c         mov        rax, qword [rsp+0x108+var_A8]               ; CODE XREF=check_arrival+1787
000000000000c571         mov        rdx, qword [r15+0xb8]
000000000000c578         mov        rcx, qword [r15+0x48]
000000000000c57c         mov        r12, qword [rax]
000000000000c57f         mov        r14, qword [rax+0x10]
000000000000c583         mov        qword [rsp+0x108+var_A0], rdx
000000000000c588         mov        qword [rsp+0x108+var_98], rcx
000000000000c58d         mov        edx, dword [r15+0xa0]
000000000000c594         test       r12, r12
000000000000c597         mov        qword [r15+0xb8], r14
000000000000c59e         je         loc_c980

000000000000c5a4         lea        rsi, qword [r12-1]
000000000000c5a9         mov        qword [r15+0x48], r12
000000000000c5ad         mov        rdi, r15
000000000000c5b0         call       re_string_context_at                        ; re_string_context_at
000000000000c5b5         cmp        r12, rbp
000000000000c5b8         mov        r13d, eax
000000000000c5bb         je         loc_c993

000000000000c5c1         mov        rbp, qword [r14+r12*8]
000000000000c5c5         test       rbp, rbp
000000000000c5c8         je         loc_c5d4

000000000000c5ca         test       byte [rbp+0x68], 0x40
000000000000c5ce         jne        loc_caf0

                     loc_c5d4:
000000000000c5d4         pxor       xmm0, xmm0                                  ; CODE XREF=check_arrival+216
000000000000c5d8         mov        qword [rsp+0x108+var_68], 0x0
000000000000c5e4         movaps     xmmword [rsp+0x108+var_78], xmm0

                     loc_c5ec:
000000000000c5ec         cmp        r12, qword [rsp+0x108+var_C8]               ; CODE XREF=check_arrival+1575, check_arrival+1681
000000000000c5f1         jge        loc_c918

000000000000c5f7         mov        ecx, dword [r15+0xe0]
000000000000c5fe         test       ecx, ecx
000000000000c600         js         loc_c918

000000000000c606         lea        rbx, qword [rsp+0x108+var_78]
000000000000c60e         lea        rax, qword [0x8+r12*8]
000000000000c616         mov        qword [rsp+0x108+var_108], r12
000000000000c61a         mov        qword [rsp+0x108+var_E8], 0x0
000000000000c623         mov        qword [rsp+0x108+var_100], rbx
000000000000c628         lea        rbx, qword [rsp+0x108+var_58]
000000000000c630         mov        qword [rsp+0x108+var_F8], rax
000000000000c635         mov        rax, qword [r15+0xb8]
000000000000c63c         mov        qword [rsp+0x108+var_F0], rbx
000000000000c641         lea        rbx, qword [rsp+0x108+var_7C]
000000000000c649         mov        qword [rsp+0x108+var_B0], rbx

                     loc_c64e:
000000000000c64e         mov        rcx, qword [rsp+0x108+var_F8]               ; CODE XREF=check_arrival+1058
000000000000c653         mov        qword [rsp+0x108+var_70], 0x0
000000000000c65f         mov        rsi, qword [rax+rcx]
000000000000c663         test       rsi, rsi
000000000000c666         je         loc_ca28

000000000000c66c         mov        rdi, qword [rsp+0x108+var_100]
000000000000c671         add        rsi, 0x8
000000000000c675         call       re_node_set_merge                           ; re_node_set_merge
000000000000c67a         test       eax, eax
000000000000c67c         mov        dword [rsp+0x108+var_80], eax
000000000000c683         jne        loc_ca60

000000000000c689         test       rbp, rbp
000000000000c68c         je         loc_c838

                     loc_c692:
000000000000c692         cmp        qword [rbp+0x28], 0x0                       ; CODE XREF=check_arrival+1339
000000000000c697         mov        rax, qword [rsp+0x108+var_F0]
000000000000c69c         pxor       xmm0, xmm0
000000000000c6a0         mov        r12, qword [r15+0x98]
000000000000c6a7         mov        dword [rsp+0x108+var_7C], 0x0
000000000000c6b2         mov        qword [rax+0x10], 0x0
000000000000c6ba         movaps     xmmword [rax], xmm0
000000000000c6bd         jle        loc_cbf0

000000000000c6c3         lea        rax, qword [r12+0xd8]
000000000000c6cb         xor        ebx, ebx
000000000000c6cd         mov        qword [rsp+0x108+var_E0], rax
000000000000c6d2         jmp        loc_c719
000000000000c6d4         align      8

                     loc_c6d8:
000000000000c6d8         mov        rdx, qword [rsp+0x108+var_108]              ; CODE XREF=check_arrival+580, check_arrival+1327
000000000000c6dc         mov        rdi, r15
000000000000c6df         call       check_node_accept                           ; check_node_accept
000000000000c6e4         test       al, al
000000000000c6e6         je         loc_c70b

                     loc_c6e8:
000000000000c6e8         lea        r13, qword [r14*8]                          ; CODE XREF=check_arrival+1314

                     loc_c6f0:
000000000000c6f0         mov        rax, qword [r12+0x18]                       ; CODE XREF=check_arrival+779, check_arrival+794
000000000000c6f5         mov        rdi, qword [rsp+0x108+var_100]
000000000000c6fa         mov        rsi, qword [rax+r13]
000000000000c6fe         call       re_node_set_insert                          ; re_node_set_insert
000000000000c703         test       al, al
000000000000c705         je         loc_ca48

                     loc_c70b:
000000000000c70b         add        rbx, 0x1                                    ; CODE XREF=check_arrival+502
000000000000c70f         cmp        rbx, qword [rbp+0x28]
000000000000c713         jge        loc_caa0

                     loc_c719:
000000000000c719         mov        rax, qword [rbp+0x30]                       ; CODE XREF=check_arrival+482
000000000000c71d         mov        rdi, qword [r12]
000000000000c721         mov        r14, qword [rax+rbx*8]
000000000000c725         mov        r13, r14
000000000000c728         shl        r13, 0x4
000000000000c72c         lea        rsi, qword [rdi+r13]
000000000000c730         test       byte [rsi+0xa], 0x10
000000000000c734         je         loc_c6d8

000000000000c736         mov        r8, qword [rsp+0x108+var_108]
000000000000c73a         mov        rsi, qword [rsp+0x108+var_E0]
000000000000c73f         mov        rcx, r15
000000000000c742         mov        rdx, r14
000000000000c745         call       check_node_accept_bytes.isra.31             ; check_node_accept_bytes.isra.31
000000000000c74a         cmp        eax, 0x1
000000000000c74d         jle        loc_ca10

000000000000c753         cdqe
000000000000c755         add        rax, qword [rsp+0x108+var_108]
000000000000c759         mov        rdx, qword [r12+0x18]
000000000000c75e         lea        r13, qword [r14*8]
000000000000c766         mov        rdx, qword [rdx+r14*8]
000000000000c76a         mov        rcx, rax
000000000000c76d         mov        qword [rsp+0x108+var_D0], rax
000000000000c772         lea        r14, qword [rax*8]
000000000000c77a         mov        rax, qword [r15+0xb8]
000000000000c781         mov        rsi, qword [rax+rcx*8]
000000000000c785         mov        qword [rsp+0x108+var_50], 0x0
000000000000c791         test       rsi, rsi
000000000000c794         je         loc_c7b9

000000000000c796         mov        rdi, qword [rsp+0x108+var_F0]
000000000000c79b         add        rsi, 0x8
000000000000c79f         mov        qword [rsp+0x108+var_B8], rdx
000000000000c7a4         call       re_node_set_merge                           ; re_node_set_merge
000000000000c7a9         test       eax, eax
000000000000c7ab         mov        dword [rsp+0x108+var_7C], eax
000000000000c7b2         mov        rdx, qword [rsp+0x108+var_B8]
000000000000c7b7         jne        loc_c810

                     loc_c7b9:
000000000000c7b9         mov        rdi, qword [rsp+0x108+var_F0]               ; CODE XREF=check_arrival+676
000000000000c7be         mov        rsi, rdx
000000000000c7c1         call       re_node_set_insert                          ; re_node_set_insert
000000000000c7c6         test       al, al
000000000000c7c8         je         loc_ca48

000000000000c7ce         add        r14, qword [r15+0xb8]
000000000000c7d5         mov        rdx, qword [rsp+0x108+var_F0]
000000000000c7da         mov        rsi, r12
000000000000c7dd         mov        rdi, qword [rsp+0x108+var_B0]
000000000000c7e2         call       re_acquire_state                            ; re_acquire_state
000000000000c7e7         mov        rdx, qword [rsp+0x108+var_D0]
000000000000c7ec         mov        qword [r14], rax
000000000000c7ef         mov        rax, qword [r15+0xb8]
000000000000c7f6         cmp        qword [rax+rdx*8], 0x0
000000000000c7fb         jne        loc_c6f0

000000000000c801         mov        edx, dword [rsp+0x108+var_7C]
000000000000c808         test       edx, edx
000000000000c80a         je         loc_c6f0

                     loc_c810:
000000000000c810         mov        rdi, qword [rsp+0x108+var_48]               ; argument "__ptr" for method j_free, CODE XREF=check_arrival+711
000000000000c818         call       j_free                                      ; free
000000000000c81d         mov        eax, dword [rsp+0x108+var_7C]
000000000000c824         test       eax, eax
000000000000c826         mov        dword [rsp+0x108+var_80], eax
000000000000c82d         jne        loc_ca60

000000000000c833         nop        dword [rax+rax]

                     loc_c838:
000000000000c838         mov        rax, qword [rsp+0x108+var_108]              ; CODE XREF=check_arrival+412, check_arrival+1480
000000000000c83c         cmp        qword [rsp+0x108+var_70], 0x0
000000000000c845         lea        rbx, qword [rax+1]
000000000000c849         mov        r12, rbx
000000000000c84c         je         loc_c8a4

000000000000c84e         mov        ecx, dword [rsp+0x108+arg_0]
000000000000c855         mov        rdx, qword [rsp+0x108+var_C0]
000000000000c85a         mov        rsi, qword [rsp+0x108+var_100]
000000000000c85f         mov        rdi, qword [rsp+0x108+var_D8]
000000000000c864         call       check_arrival_expand_ecl                    ; check_arrival_expand_ecl
000000000000c869         test       eax, eax
000000000000c86b         mov        dword [rsp+0x108+var_80], eax
000000000000c872         jne        loc_ca60

000000000000c878         mov        r8d, dword [rsp+0x108+arg_0]
000000000000c880         mov        rcx, qword [rsp+0x108+var_C0]
000000000000c885         mov        rdx, rbx
000000000000c888         mov        rsi, qword [rsp+0x108+var_100]
000000000000c88d         mov        rdi, r15
000000000000c890         call       expand_bkref_cache                          ; expand_bkref_cache
000000000000c895         test       eax, eax
000000000000c897         mov        dword [rsp+0x108+var_80], eax
000000000000c89e         jne        loc_ca60

                     loc_c8a4:
000000000000c8a4         mov        edx, dword [r15+0xa0]                       ; CODE XREF=check_arrival+860, check_arrival+1356
000000000000c8ab         mov        rsi, qword [rsp+0x108+var_108]
000000000000c8af         mov        rdi, r15
000000000000c8b2         call       re_string_context_at                        ; re_string_context_at
000000000000c8b7         mov        rdx, qword [rsp+0x108+var_100]
000000000000c8bc         mov        rsi, qword [rsp+0x108+var_D8]
000000000000c8c1         lea        rdi, qword [rsp+0x108+var_80]
000000000000c8c9         mov        ecx, eax
000000000000c8cb         call       re_acquire_state_context                    ; re_acquire_state_context
000000000000c8d0         test       rax, rax
000000000000c8d3         mov        rbp, rax
000000000000c8d6         je         loc_cac0

000000000000c8dc         mov        rax, qword [r15+0xb8]
000000000000c8e3         mov        rdx, qword [rsp+0x108+var_F8]
000000000000c8e8         mov        qword [rsp+0x108+var_E8], 0x0
000000000000c8f1         mov        qword [rax+rdx], rbp

                     loc_c8f5:
000000000000c8f5         cmp        qword [rsp+0x108+var_C8], rbx               ; CODE XREF=check_arrival+1525
000000000000c8fa         jle        loc_c918

000000000000c8fc         movsxd     rdx, dword [r15+0xe0]
000000000000c903         add        qword [rsp+0x108+var_F8], 0x8
000000000000c909         cmp        rdx, qword [rsp+0x108+var_E8]
000000000000c90e         mov        qword [rsp+0x108+var_108], rbx
000000000000c912         jge        loc_c64e

                     loc_c918:
000000000000c918         mov        rdi, qword [rsp+0x108+var_68]               ; argument "__ptr" for method j_free, CODE XREF=check_arrival+257, check_arrival+272, check_arrival+1034
000000000000c920         call       j_free                                      ; free
000000000000c925         mov        rax, qword [r15+0xb8]
000000000000c92c         mov        rbx, qword [rsp+0x108+var_C8]
000000000000c931         mov        rax, qword [rax+rbx*8]
000000000000c935         test       rax, rax
000000000000c938         je         loc_cc15

000000000000c93e         mov        rbx, qword [rsp+0x108+var_A8]
000000000000c943         mov        rdx, qword [rsp+0x108+var_90]
000000000000c948         lea        rsi, qword [rax+0x18]
000000000000c94c         mov        qword [rbx], r12
000000000000c94f         mov        rbx, qword [rsp+0x108+var_A0]
000000000000c954         mov        qword [r15+0xb8], rbx
000000000000c95b         mov        rbx, qword [rsp+0x108+var_98]
000000000000c960         mov        qword [r15+0x48], rbx
000000000000c964         mov        rdi, qword [rax+0x10]
000000000000c968         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000c96d         test       rax, rax
000000000000c970         sete       al
000000000000c973         movzx      eax, al
000000000000c976         jmp        loc_ca74
000000000000c97b         align      128

                     loc_c980:
000000000000c980         lea        rsi, qword [rbp-1]                          ; CODE XREF=check_arrival+174
000000000000c984         mov        qword [r15+0x48], rbp
000000000000c988         mov        rdi, r15
000000000000c98b         call       re_string_context_at                        ; re_string_context_at
000000000000c990         mov        r13d, eax

                     loc_c993:
000000000000c993         mov        edi, 0x8                                    ; argument "__size" for method j_malloc, CODE XREF=check_arrival+203
000000000000c998         mov        qword [rsp+0x108+var_78], 0x1
000000000000c9a4         mov        qword [rsp+0x108+var_70], 0x1
000000000000c9b0         call       j_malloc                                    ; malloc
000000000000c9b5         test       rax, rax
000000000000c9b8         mov        qword [rsp+0x108+var_68], rax
000000000000c9c0         je         loc_cc0b

000000000000c9c6         mov        qword [rax], rbx
000000000000c9c9         mov        ecx, dword [rsp+0x108+arg_0]
000000000000c9d0         lea        rbx, qword [rsp+0x108+var_78]
000000000000c9d8         mov        rdx, qword [rsp+0x108+var_C0]
000000000000c9dd         mov        rdi, qword [rsp+0x108+var_D8]
000000000000c9e2         mov        r12, rbp
000000000000c9e5         mov        rsi, rbx
000000000000c9e8         mov        dword [rsp+0x108+var_80], 0x0
000000000000c9f3         call       check_arrival_expand_ecl                    ; check_arrival_expand_ecl
000000000000c9f8         test       eax, eax
000000000000c9fa         mov        dword [rsp+0x108+var_80], eax
000000000000ca01         je         loc_cb1d

000000000000ca07         jmp        loc_ca60
000000000000ca09         align      16

                     loc_ca10:
000000000000ca10         test       eax, eax                                    ; CODE XREF=check_arrival+605
000000000000ca12         jne        loc_c6e8

000000000000ca18         mov        rsi, qword [r12]
000000000000ca1c         add        rsi, r13
000000000000ca1f         jmp        loc_c6d8
000000000000ca24         align      8

                     loc_ca28:
000000000000ca28         test       rbp, rbp                                    ; CODE XREF=check_arrival+374
000000000000ca2b         jne        loc_c692

000000000000ca31         mov        rax, qword [rsp+0x108+var_108]
000000000000ca35         lea        rbx, qword [rax+1]
000000000000ca39         mov        r12, rbx
000000000000ca3c         jmp        loc_c8a4
000000000000ca41         align      8

                     loc_ca48:
000000000000ca48         mov        rdi, qword [rsp+0x108+var_48]               ; argument "__ptr" for method j_free, CODE XREF=check_arrival+533, check_arrival+728
000000000000ca50         call       j_free                                      ; free
000000000000ca55         mov        dword [rsp+0x108+var_80], 0xc

                     loc_ca60:
000000000000ca60         mov        rdi, qword [rsp+0x108+var_68]               ; argument "__ptr" for method j_free, CODE XREF=check_arrival+403, check_arrival+829, check_arrival+898, check_arrival+942, check_arrival+1303, check_arrival+1497, check_arrival+1628, check_arrival+1814
000000000000ca68         call       j_free                                      ; free
000000000000ca6d         mov        eax, dword [rsp+0x108+var_80]

                     loc_ca74:
000000000000ca74         mov        rbx, qword [rsp+0x108+var_40]               ; CODE XREF=check_arrival+1158, check_arrival+1565, check_arrival+1824, check_arrival+1863
000000000000ca7c         xor        rbx, qword [fs:0x28]
000000000000ca85         jne        loc_cc3c

000000000000ca8b         add        rsp, 0xd8
000000000000ca92         pop        rbx
000000000000ca93         pop        rbp
000000000000ca94         pop        r12
000000000000ca96         pop        r13
000000000000ca98         pop        r14
000000000000ca9a         pop        r15
000000000000ca9c         ret
                        ; endp
000000000000ca9d         align      32

                     loc_caa0:
000000000000caa0         mov        rdi, qword [rsp+0x108+var_48]               ; CODE XREF=check_arrival+547

                     loc_caa8:
000000000000caa8         call       j_free                                      ; free, CODE XREF=check_arrival+1794
000000000000caad         mov        dword [rsp+0x108+var_80], 0x0
000000000000cab8         jmp        loc_c838
000000000000cabd         align      64

                     loc_cac0:
000000000000cac0         mov        eax, dword [rsp+0x108+var_80]               ; CODE XREF=check_arrival+998
000000000000cac7         test       eax, eax
000000000000cac9         jne        loc_ca60

000000000000cacb         mov        rax, qword [r15+0xb8]
000000000000cad2         mov        rdx, qword [rsp+0x108+var_F8]
000000000000cad7         add        qword [rsp+0x108+var_E8], 0x1
000000000000cadd         mov        qword [rax+rdx], 0x0
000000000000cae5         jmp        loc_c8f5
000000000000caea         align      16

                     loc_caf0:
000000000000caf0         lea        rbx, qword [rsp+0x108+var_78]               ; CODE XREF=check_arrival+222
000000000000caf8         lea        rsi, qword [rbp+8]
000000000000cafc         mov        rdi, rbx
000000000000caff         call       re_node_set_init_copy                       ; re_node_set_init_copy
000000000000cb04         test       eax, eax
000000000000cb06         mov        dword [rsp+0x108+var_80], eax
000000000000cb0d         jne        loc_ca74

000000000000cb13         test       byte [rbp+0x68], 0x40
000000000000cb17         je         loc_c5ec

                     loc_cb1d:
000000000000cb1d         cmp        qword [rsp+0x108+var_70], 0x0               ; CODE XREF=check_arrival+1297
000000000000cb26         je         loc_cb52

000000000000cb28         mov        r8d, dword [rsp+0x108+arg_0]
000000000000cb30         mov        rcx, qword [rsp+0x108+var_C0]
000000000000cb35         mov        rdx, r12
000000000000cb38         mov        rsi, rbx
000000000000cb3b         mov        rdi, r15
000000000000cb3e         call       expand_bkref_cache                          ; expand_bkref_cache
000000000000cb43         test       eax, eax
000000000000cb45         mov        dword [rsp+0x108+var_80], eax
000000000000cb4c         jne        loc_ca60

                     loc_cb52:
000000000000cb52         mov        rsi, qword [rsp+0x108+var_D8]               ; CODE XREF=check_arrival+1590
000000000000cb57         lea        rdi, qword [rsp+0x108+var_80]
000000000000cb5f         mov        ecx, r13d
000000000000cb62         mov        rdx, rbx
000000000000cb65         call       re_acquire_state_context                    ; re_acquire_state_context
000000000000cb6a         test       rax, rax
000000000000cb6d         mov        rbp, rax
000000000000cb70         je         loc_cbf7

                     loc_cb76:
000000000000cb76         mov        rax, qword [r15+0xb8]                       ; CODE XREF=check_arrival+1808
000000000000cb7d         mov        qword [rax+r12*8], rbp
000000000000cb81         jmp        loc_c5ec

                     loc_cb86:
000000000000cb86         lea        r12, qword [rax+1]                          ; CODE XREF=check_arrival+118
000000000000cb8a         movabs     rax, 0x7fffffffffffffff
000000000000cb94         sub        rax, r13
000000000000cb97         cmp        rax, r12
000000000000cb9a         jl         loc_cc0b

000000000000cb9c         lea        r14, qword [r13+r12]
000000000000cba1         movabs     rax, 0x1fffffffffffffff
000000000000cbab         cmp        r14, rax
000000000000cbae         ja         loc_cc0b

000000000000cbb0         mov        rax, qword [rsp+0x108+var_A8]
000000000000cbb5         lea        rsi, qword [r14*8]                          ; argument "__size" for method j_realloc
000000000000cbbd         mov        rdi, qword [rax+0x10]                       ; argument "__ptr" for method j_realloc
000000000000cbc1         call       j_realloc                                   ; realloc
000000000000cbc6         test       rax, rax
000000000000cbc9         je         loc_cc0b

000000000000cbcb         mov        rcx, qword [rsp+0x108+var_A8]
000000000000cbd0         lea        rdx, qword [r12*8]                          ; argument "__n" for method j_memset
000000000000cbd8         lea        rdi, qword [rax+r13*8]                      ; argument "__s" for method j_memset
000000000000cbdc         xor        esi, esi                                    ; argument "__c" for method j_memset
000000000000cbde         mov        qword [rcx+0x10], rax
000000000000cbe2         mov        qword [rcx+8], r14
000000000000cbe6         call       j_memset                                    ; memset
000000000000cbeb         jmp        loc_c56c

                     loc_cbf0:
000000000000cbf0         xor        edi, edi                                    ; CODE XREF=check_arrival+461
000000000000cbf2         jmp        loc_caa8

                     loc_cbf7:
000000000000cbf7         mov        esi, dword [rsp+0x108+var_80]               ; CODE XREF=check_arrival+1664
000000000000cbfe         test       esi, esi
000000000000cc00         je         loc_cb76

000000000000cc06         jmp        loc_ca60

                     loc_cc0b:
000000000000cc0b         mov        eax, 0xc                                    ; CODE XREF=check_arrival+1232, check_arrival+1706, check_arrival+1726, check_arrival+1753
000000000000cc10         jmp        loc_ca74

                     loc_cc15:
000000000000cc15         mov        rax, qword [rsp+0x108+var_A8]               ; CODE XREF=check_arrival+1096
000000000000cc1a         mov        qword [rax], r12
000000000000cc1d         mov        rax, qword [rsp+0x108+var_A0]
000000000000cc22         mov        qword [r15+0xb8], rax
000000000000cc29         mov        rax, qword [rsp+0x108+var_98]
000000000000cc2e         mov        qword [r15+0x48], rax
000000000000cc32         mov        eax, 0x1
000000000000cc37         jmp        loc_ca74

                     loc_cc3c:
000000000000cc3c         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=check_arrival+1429
                        ; endp
000000000000cc41         align      16                                          ; End of unwind block (FDE at 0x18040)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_28: int8_t, -40
        ;    var_38: int64_t, -56
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int8_t, -112
        ;    var_78: int64_t, -120
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_C9: int8_t, -201
        ;    var_D1: int8_t, -209
        ;    var_D8: int64_t, -216


                     set_regs:
000000000000cc50         push       rbp                                         ; Begin of unwind block (FDE at 0x18090), CODE XREF=re_search_internal+4945
000000000000cc51         mov        rbp, rsp
000000000000cc54         push       r15
000000000000cc56         push       r14
000000000000cc58         push       r13
000000000000cc5a         push       r12
000000000000cc5c         mov        r13, rcx
000000000000cc5f         push       rbx
000000000000cc60         mov        r12, rsi
000000000000cc63         sub        rsp, 0xb8
000000000000cc6a         mov        qword [rbp+var_98], rdx
000000000000cc71         mov        qword [rbp+var_50], 0x0
000000000000cc79         mov        rax, qword [fs:0x28]
000000000000cc82         mov        qword [rbp+var_38], rax
000000000000cc86         xor        eax, eax
000000000000cc88         mov        rax, qword [rdi]
000000000000cc8b         test       r8b, r8b
000000000000cc8e         mov        qword [rbp+var_48], 0x2
000000000000cc96         mov        qword [rbp+var_40], 0x0
000000000000cc9e         mov        qword [rbp+var_90], rax
000000000000cca5         je         loc_d44d

000000000000ccab         mov        edi, 0x60                                   ; argument "__size" for method j_malloc
000000000000ccb0         call       j_malloc                                    ; malloc
000000000000ccb5         lea        rcx, qword [rbp+var_50]
000000000000ccb9         test       rax, rax
000000000000ccbc         mov        qword [rbp+var_40], rax
000000000000ccc0         mov        qword [rbp+var_88], rcx
000000000000ccc7         je         loc_d3ec

                     loc_cccd:
000000000000cccd         mov        rax, qword [rbp+var_90]                     ; CODE XREF=set_regs+2056
000000000000ccd4         pxor       xmm0, xmm0
000000000000ccd8         mov        qword [rbp+var_60], 0x0
000000000000cce0         mov        rbx, qword [rax+0x90]
000000000000cce7         mov        rax, qword [rbp+var_98]
000000000000ccee         movaps     xmmword [rbp+var_70], xmm0
000000000000ccf2         shl        rax, 0x4
000000000000ccf6         cmp        rax, 0xfbf
000000000000ccfc         mov        qword [rbp+var_B8], rax
000000000000cd03         ja         loc_d3f6

000000000000cd09         add        rax, 0x10
000000000000cd0d         mov        byte [rbp+var_C9], 0x0
000000000000cd14         sub        rsp, rax
000000000000cd17         lea        rax, qword [rsp+0xe0+var_D1]
000000000000cd1c         and        rax, 0xfffffffffffffff0
000000000000cd20         mov        qword [rbp+var_C0], rax

                     loc_cd27:
000000000000cd27         mov        rdx, qword [rbp+var_B8]                     ; argument "__n" for method j_memcpy, CODE XREF=set_regs+1987
000000000000cd2e         mov        rdi, qword [rbp+var_C0]                     ; argument "__dest" for method j_memcpy
000000000000cd35         mov        rsi, r13                                    ; argument "__src" for method j_memcpy
000000000000cd38         call       j_memcpy                                    ; memcpy
000000000000cd3d         lea        rax, qword [rbp+var_70]
000000000000cd41         mov        rcx, qword [r13]
000000000000cd45         mov        qword [rbp+var_A8], rax
000000000000cd4c         add        rax, 0x10
000000000000cd50         mov        qword [rbp+var_78], rcx
000000000000cd54         mov        qword [rbp+var_C8], rax

                     loc_cd5b:
000000000000cd5b         lea        rax, qword [rbp+var_78]                     ; CODE XREF=set_regs+1554
000000000000cd5f         mov        qword [rbp+var_B0], rax
000000000000cd66         jmp        loc_ce49
000000000000cd6b         align      16

                     loc_cd70:
000000000000cd70         cmp        esi, 0x9                                    ; CODE XREF=set_regs+548
000000000000cd73         je         loc_cf60

                     loc_cd79:
000000000000cd79         cmp        rax, rcx                                    ; CODE XREF=set_regs+568, set_regs+596, set_regs+798, set_regs+854, set_regs+1770, set_regs+1901
000000000000cd7c         jne        loc_cd8c

000000000000cd7e         cmp        qword [r12+0xb0], rbx
000000000000cd86         je         loc_d160

                     loc_cd8c:
000000000000cd8c         mov        r14, qword [r12+0x98]                       ; CODE XREF=set_regs+300, set_regs+1477
000000000000cd94         mov        rdi, qword [r14]
000000000000cd97         lea        rsi, qword [rdi+r9]
000000000000cd9b         movzx      eax, byte [rsi+8]
000000000000cd9f         test       al, 0x8
000000000000cda1         jne        loc_ceb0

000000000000cda7         test       byte [rsi+0xa], 0x10
000000000000cdab         jne        loc_cfb0

000000000000cdb1         cmp        al, 0x4
000000000000cdb3         je         loc_cff0

000000000000cdb9         mov        rcx, qword [rbp+var_78]

                     loc_cdbd:
000000000000cdbd         mov        rdx, rcx                                    ; CODE XREF=set_regs+922, set_regs+1701
000000000000cdc0         mov        rdi, r12
000000000000cdc3         mov        qword [rbp+var_A0], rcx
000000000000cdca         call       check_node_accept                           ; check_node_accept
000000000000cdcf         test       al, al
000000000000cdd1         mov        rcx, qword [rbp+var_A0]
000000000000cdd8         je         loc_d228

000000000000cdde         mov        rax, qword [r14+0x18]
000000000000cde2         lea        rdx, qword [rcx+1]
000000000000cde6         mov        rbx, qword [rax+r15*8]

                     loc_cdea:
000000000000cdea         cmp        qword [rbp+var_88], 0x0                     ; CODE XREF=set_regs+1073
000000000000cdf2         mov        qword [rbp+var_78], rdx
000000000000cdf6         je         loc_ce34

000000000000cdf8         cmp        rdx, qword [r12+0xa8]
000000000000ce00         jg         loc_d236

000000000000ce06         mov        rax, qword [r12+0xb8]
000000000000ce0e         mov        rax, qword [rax+rdx*8]
000000000000ce12         test       rax, rax
000000000000ce15         je         loc_d236

000000000000ce1b         mov        rdi, qword [rax+0x10]
000000000000ce1f         lea        rsi, qword [rax+0x18]
000000000000ce23         mov        rdx, rbx
000000000000ce26         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000ce2b         test       rax, rax
000000000000ce2e         je         loc_d236

                     loc_ce34:
000000000000ce34         mov        qword [rbp+var_68], 0x0                     ; CODE XREF=set_regs+422

                     loc_ce3c:
000000000000ce3c         test       rbx, rbx                                    ; CODE XREF=set_regs+772, set_regs+1136, set_regs+1244, set_regs+1571, set_regs+1675
000000000000ce3f         js         loc_d21a

000000000000ce45         mov        rcx, qword [rbp+var_78]

                     loc_ce49:
000000000000ce49         mov        rax, qword [r13+8]                          ; CODE XREF=set_regs+278
000000000000ce4d         cmp        rax, rcx
000000000000ce50         jl         loc_d340

000000000000ce56         mov        rdi, qword [rbp+var_90]
000000000000ce5d         mov        r9, rbx
000000000000ce60         mov        r15, rbx
000000000000ce63         shl        r9, 0x4
000000000000ce67         mov        rdx, qword [rdi]
000000000000ce6a         add        rdx, r9
000000000000ce6d         movzx      esi, byte [rdx+8]
000000000000ce71         cmp        esi, 0x8
000000000000ce74         jne        loc_cd70

000000000000ce7a         mov        rdx, qword [rdx]
000000000000ce7d         add        rdx, 0x1
000000000000ce81         cmp        qword [rbp+var_98], rdx
000000000000ce88         jle        loc_cd79

000000000000ce8e         shl        rdx, 0x4
000000000000ce92         add        rdx, r13
000000000000ce95         mov        qword [rdx+8], 0xffffffffffffffff
000000000000ce9d         mov        qword [rdx], rcx
000000000000cea0         mov        rax, qword [r13+8]
000000000000cea4         jmp        loc_cd79
000000000000cea9         align      16

                     loc_ceb0:
000000000000ceb0         mov        rax, qword [r12+0xb8]                       ; CODE XREF=set_regs+337
000000000000ceb8         mov        rdx, qword [rbp+var_78]
000000000000cebc         mov        rsi, rbx
000000000000cebf         mov        rdi, qword [rbp+var_A8]
000000000000cec6         mov        r9, qword [rax+rdx*8]
000000000000ceca         mov        rax, qword [r14+0x28]
000000000000cece         lea        rdx, qword [rbx+rbx*2]
000000000000ced2         mov        qword [rbp+var_A0], r9
000000000000ced9         lea        r15, qword [rax+rdx*8]
000000000000cedd         call       re_node_set_insert                          ; re_node_set_insert
000000000000cee2         test       al, al
000000000000cee4         mov        r9, qword [rbp+var_A0]
000000000000ceeb         je         loc_d3c8

000000000000cef1         mov        r10, qword [r15+8]
000000000000cef5         test       r10, r10
000000000000cef8         jle        loc_d228

000000000000cefe         mov        r15, qword [r15+0x10]
000000000000cf02         mov        r11, qword [r9+0x10]
000000000000cf06         lea        r14, qword [r9+0x18]
000000000000cf0a         mov        rbx, 0xffffffffffffffff
000000000000cf11         xor        r9d, r9d
000000000000cf14         mov        qword [rbp+var_A0], r12
000000000000cf1b         nop        dword [rax+rax]

                     loc_cf20:
000000000000cf20         mov        r12, qword [r15+r9*8]                       ; CODE XREF=set_regs+763
000000000000cf24         mov        rsi, r14
000000000000cf27         mov        rdi, r11
000000000000cf2a         mov        rdx, r12
000000000000cf2d         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000cf32         test       rax, rax
000000000000cf35         je         loc_cf44

000000000000cf37         cmp        rbx, 0xffffffffffffffff
000000000000cf3b         jne        loc_d090

000000000000cf41         mov        rbx, r12

                     loc_cf44:
000000000000cf44         add        r9, 0x1                                     ; CODE XREF=set_regs+741
000000000000cf48         cmp        r10, r9
000000000000cf4b         jne        loc_cf20

000000000000cf4d         mov        r12, qword [rbp+var_A0]
000000000000cf54         jmp        loc_ce3c
000000000000cf59         align      32

                     loc_cf60:
000000000000cf60         mov        rdi, qword [rdx]                            ; CODE XREF=set_regs+291
000000000000cf63         lea        rsi, qword [rdi+1]
000000000000cf67         cmp        qword [rbp+var_98], rsi
000000000000cf6e         jle        loc_cd79

000000000000cf74         shl        rsi, 0x4
000000000000cf78         lea        rax, qword [r13+rsi]
000000000000cf7d         cmp        qword [rax], rcx
000000000000cf80         jl         loc_d300

000000000000cf86         test       byte [rdx+0xa], 0x8
000000000000cf8a         je         loc_cf9e

000000000000cf8c         mov        rdi, qword [rbp+var_C0]
000000000000cf93         cmp        qword [rdi+rsi], 0xffffffffffffffff
000000000000cf98         jne        loc_d38b

                     loc_cf9e:
000000000000cf9e         mov        qword [rax+8], rcx                          ; CODE XREF=set_regs+826
000000000000cfa2         mov        rax, qword [r13+8]
000000000000cfa6         jmp        loc_cd79
000000000000cfab         align      16

                     loc_cfb0:
000000000000cfb0         mov        r8, qword [rbp+var_78]                      ; CODE XREF=set_regs+347
000000000000cfb4         lea        rsi, qword [r14+0xd8]
000000000000cfbb         mov        rcx, r12
000000000000cfbe         mov        rdx, rbx
000000000000cfc1         mov        qword [rbp+var_A0], r9
000000000000cfc8         call       check_node_accept_bytes.isra.31             ; check_node_accept_bytes.isra.31
000000000000cfcd         movsxd     rcx, eax
000000000000cfd0         test       rcx, rcx
000000000000cfd3         jne        loc_d1d1

000000000000cfd9         mov        r9, qword [rbp+var_A0]
000000000000cfe0         mov        rsi, qword [r14]
000000000000cfe3         mov        rcx, qword [rbp+var_78]
000000000000cfe7         add        rsi, r9
000000000000cfea         jmp        loc_cdbd
000000000000cfef         align      16

                     loc_cff0:
000000000000cff0         mov        rax, qword [rsi]                            ; CODE XREF=set_regs+355
000000000000cff3         add        rax, 0x1
000000000000cff7         shl        rax, 0x4
000000000000cffb         add        rax, r13
000000000000cffe         mov        rdx, qword [rax+8]
000000000000d002         mov        rdi, qword [rax]
000000000000d005         mov        rcx, rdx
000000000000d008         sub        rcx, rdi
000000000000d00b         cmp        qword [rbp+var_88], 0x0
000000000000d013         je         loc_d1c8

000000000000d019         cmp        rdi, 0xffffffffffffffff
000000000000d01d         je         loc_d236

000000000000d023         cmp        rdx, 0xffffffffffffffff
000000000000d027         je         loc_d236

000000000000d02d         test       rcx, rcx
000000000000d030         je         loc_d280

000000000000d036         mov        r15, qword [rbp+var_78]
000000000000d03a         mov        rdx, qword [r12+0x30]
000000000000d03f         mov        rax, qword [r12+8]
000000000000d044         sub        rdx, r15
000000000000d047         cmp        rcx, rdx
000000000000d04a         jg         loc_d236

000000000000d050         lea        rsi, qword [rax+r15]                        ; argument "__s2" for method j_memcmp
000000000000d054         add        rdi, rax                                    ; argument "__s1" for method j_memcmp
000000000000d057         mov        rdx, rcx                                    ; argument "__n" for method j_memcmp
000000000000d05a         mov        qword [rbp+var_A0], rcx
000000000000d061         call       j_memcmp                                    ; memcmp
000000000000d066         test       eax, eax
000000000000d068         mov        rcx, qword [rbp+var_A0]
000000000000d06f         jne        loc_d236

                     loc_d075:
000000000000d075         mov        rax, qword [r14+0x18]                       ; CODE XREF=set_regs+1413
000000000000d079         lea        rdx, qword [r15+rcx]
000000000000d07d         mov        rbx, qword [rax+rbx*8]
000000000000d081         jmp        loc_cdea
000000000000d086         align      16

                     loc_d090:
000000000000d090         mov        rsi, qword [rbp+var_C8]                     ; CODE XREF=set_regs+747
000000000000d097         mov        rdi, qword [rbp+var_68]
000000000000d09b         mov        rdx, rbx
000000000000d09e         mov        r14, r12
000000000000d0a1         mov        r12, qword [rbp+var_A0]
000000000000d0a8         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000d0ad         test       rax, rax
000000000000d0b0         jne        loc_d270

000000000000d0b6         mov        rcx, qword [rbp+var_88]
000000000000d0bd         test       rcx, rcx
000000000000d0c0         je         loc_ce3c

000000000000d0c6         mov        r15, qword [rcx]
000000000000d0c9         mov        rdx, qword [rbp+var_78]
000000000000d0cd         lea        rax, qword [r15+1]
000000000000d0d1         cmp        rax, qword [rcx+8]
000000000000d0d5         mov        qword [rcx], rax
000000000000d0d8         je         loc_d45d

000000000000d0de         mov        rax, qword [rcx+0x10]

                     loc_d0e2:
000000000000d0e2         lea        r15, qword [r15+r15*2]                      ; CODE XREF=set_regs+2119
000000000000d0e6         shl        r15, 0x4
000000000000d0ea         add        r15, rax
000000000000d0ed         mov        qword [r15+8], r14
000000000000d0f1         mov        r14, qword [rbp+var_B8]
000000000000d0f8         mov        qword [r15], rdx
000000000000d0fb         mov        rdi, r14                                    ; argument "__size" for method j_malloc
000000000000d0fe         call       j_malloc                                    ; malloc
000000000000d103         test       rax, rax
000000000000d106         mov        qword [r15+0x10], rax
000000000000d10a         je         loc_d132

000000000000d10c         mov        rdx, r14                                    ; argument "__n" for method j_memcpy
000000000000d10f         mov        rsi, r13                                    ; argument "__src" for method j_memcpy
000000000000d112         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
000000000000d115         call       j_memcpy                                    ; memcpy
000000000000d11a         mov        rsi, qword [rbp+var_A8]
000000000000d121         lea        rdi, qword [r15+0x18]
000000000000d125         call       re_node_set_init_copy                       ; re_node_set_init_copy
000000000000d12a         test       eax, eax
000000000000d12c         je         loc_ce3c

                     loc_d132:
000000000000d132         mov        rdi, qword [rbp+var_60]                     ; argument "__ptr" for method j_free, CODE XREF=set_regs+1210
000000000000d136         call       j_free                                      ; free
000000000000d13b         cmp        byte [rbp+var_C9], 0x0
000000000000d142         jne        loc_d4db

                     loc_d148:
000000000000d148         mov        rdi, qword [rbp+var_88]                     ; CODE XREF=set_regs+1942, set_regs+2181
000000000000d14f         call       free_fail_stack_return.part.24              ; free_fail_stack_return.part.24
000000000000d154         mov        eax, 0xc
000000000000d159         jmp        loc_d369
000000000000d15e         align      32

                     loc_d160:
000000000000d160         cmp        qword [rbp+var_88], 0x0                     ; CODE XREF=set_regs+310
000000000000d168         je         loc_d49c

000000000000d16e         mov        rcx, qword [rbp+var_98]
000000000000d175         test       rcx, rcx
000000000000d178         je         loc_d19a

000000000000d17a         mov        rax, r13
000000000000d17d         xor        edx, edx
000000000000d17f         nop

                     loc_d180:
000000000000d180         cmp        qword [rax], 0x0                            ; CODE XREF=set_regs+1352
000000000000d184         js         loc_d18d

000000000000d186         cmp        qword [rax+8], 0xffffffffffffffff
000000000000d18b         je         loc_d1e0

                     loc_d18d:
000000000000d18d         add        rdx, 0x1                                    ; CODE XREF=set_regs+1332
000000000000d191         add        rax, 0x10
000000000000d195         cmp        rcx, rdx
000000000000d198         jne        loc_d180

                     loc_d19a:
000000000000d19a         mov        rdi, qword [rbp+var_60]                     ; argument "__ptr" for method j_free, CODE XREF=set_regs+1320
000000000000d19e         call       j_free                                      ; free
000000000000d1a3         cmp        byte [rbp+var_C9], 0x0
000000000000d1aa         jne        loc_d524

                     loc_d1b0:
000000000000d1b0         mov        rdi, qword [rbp+var_88]                     ; CODE XREF=set_regs+2272
000000000000d1b7         call       free_fail_stack_return.part.24              ; free_fail_stack_return.part.24
000000000000d1bc         xor        eax, eax
000000000000d1be         jmp        loc_d369
000000000000d1c3         align      8

                     loc_d1c8:
000000000000d1c8         test       rcx, rcx                                    ; CODE XREF=set_regs+963
000000000000d1cb         je         loc_d280

                     loc_d1d1:
000000000000d1d1         mov        r15, qword [rbp+var_78]                     ; CODE XREF=set_regs+899
000000000000d1d5         jmp        loc_d075
000000000000d1da         align      32

                     loc_d1e0:
000000000000d1e0         mov        rdi, qword [rbp+var_88]                     ; CODE XREF=set_regs+1339
000000000000d1e7         mov        r9, qword [rbp+var_A8]
000000000000d1ee         mov        r8, r13
000000000000d1f1         mov        rcx, qword [rbp+var_98]
000000000000d1f8         mov        rdx, qword [rbp+var_B0]
000000000000d1ff         lea        rsi, qword [rdi+0x10]
000000000000d203         call       pop_fail_stack.isra.25                      ; pop_fail_stack.isra.25
000000000000d208         mov        r9, rax
000000000000d20b         mov        rbx, rax
000000000000d20e         mov        r15, rax
000000000000d211         shl        r9, 0x4
000000000000d215         jmp        loc_cd8c

                     loc_d21a:
000000000000d21a         cmp        rbx, 0xfffffffffffffffe                     ; CODE XREF=set_regs+495
000000000000d21e         je         loc_d3c8

000000000000d224         nop        dword [rax]

                     loc_d228:
000000000000d228         cmp        qword [rbp+var_88], 0x0                     ; CODE XREF=set_regs+392, set_regs+680
000000000000d230         je         loc_d4ec

                     loc_d236:
000000000000d236         mov        rdi, qword [rbp+var_88]                     ; CODE XREF=set_regs+432, set_regs+453, set_regs+478, set_regs+973, set_regs+983, set_regs+1018, set_regs+1055
000000000000d23d         mov        rcx, qword [rbp+var_98]
000000000000d244         lea        rdx, qword [rbp+var_78]
000000000000d248         mov        r9, qword [rbp+var_A8]
000000000000d24f         mov        r8, r13
000000000000d252         lea        rsi, qword [rdi+0x10]
000000000000d256         call       pop_fail_stack.isra.25                      ; pop_fail_stack.isra.25
000000000000d25b         mov        rcx, qword [rbp+var_78]
000000000000d25f         mov        rbx, rax
000000000000d262         jmp        loc_cd5b
000000000000d267         align      16

                     loc_d270:
000000000000d270         mov        rbx, r14                                    ; CODE XREF=set_regs+1120
000000000000d273         jmp        loc_ce3c
000000000000d278         align      128

                     loc_d280:
000000000000d280         mov        rdi, qword [rbp+var_A8]                     ; CODE XREF=set_regs+992, set_regs+1403
000000000000d287         mov        rsi, rbx
000000000000d28a         mov        qword [rbp+var_A0], r9
000000000000d291         call       re_node_set_insert                          ; re_node_set_insert
000000000000d296         test       al, al
000000000000d298         je         loc_d3c8

000000000000d29e         mov        rdx, qword [r14+0x28]
000000000000d2a2         lea        rax, qword [rbx+rbx*2]
000000000000d2a6         mov        rcx, qword [rbp+var_78]
000000000000d2aa         lea        rax, qword [rdx+rax*8]
000000000000d2ae         mov        qword [rbp+var_D8], rcx
000000000000d2b5         mov        rax, qword [rax+0x10]
000000000000d2b9         mov        rbx, qword [rax]
000000000000d2bc         mov        rax, qword [r12+0xb8]
000000000000d2c4         mov        rax, qword [rax+rcx*8]
000000000000d2c8         mov        rdx, rbx
000000000000d2cb         mov        rdi, qword [rax+0x10]
000000000000d2cf         lea        rsi, qword [rax+0x18]
000000000000d2d3         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000d2d8         test       rax, rax
000000000000d2db         jne        loc_ce3c

000000000000d2e1         mov        r9, qword [rbp+var_A0]
000000000000d2e8         mov        rsi, qword [r14]
000000000000d2eb         mov        rcx, qword [rbp+var_D8]
000000000000d2f2         add        rsi, r9
000000000000d2f5         jmp        loc_cdbd
000000000000d2fa         align      256

                     loc_d300:
000000000000d300         mov        rdx, qword [rbp+var_B8]                     ; argument "__n" for method j_memcpy, CODE XREF=set_regs+816
000000000000d307         mov        rdi, qword [rbp+var_C0]                     ; argument "__dest" for method j_memcpy
000000000000d30e         mov        rsi, r13                                    ; argument "__src" for method j_memcpy
000000000000d311         mov        qword [rax+8], rcx
000000000000d315         mov        qword [rbp+var_D8], r9
000000000000d31c         mov        qword [rbp+var_A0], rcx
000000000000d323         call       j_memcpy                                    ; memcpy
000000000000d328         mov        rax, qword [r13+8]
000000000000d32c         mov        rcx, qword [rbp+var_A0]
000000000000d333         mov        r9, qword [rbp+var_D8]
000000000000d33a         jmp        loc_cd79
000000000000d33f         align      64

                     loc_d340:
000000000000d340         mov        rdi, qword [rbp+var_60]                     ; argument "__ptr" for method j_free, CODE XREF=set_regs+512
000000000000d344         call       j_free                                      ; free
000000000000d349         cmp        byte [rbp+var_C9], 0x0
000000000000d350         jne        loc_d42c

000000000000d356         mov        rdi, qword [rbp+var_88]
000000000000d35d         test       rdi, rdi
000000000000d360         je         loc_d367

                     loc_d362:
000000000000d362         call       free_fail_stack_return.part.24              ; free_fail_stack_return.part.24, CODE XREF=set_regs+2034

                     loc_d367:
000000000000d367         xor        eax, eax                                    ; CODE XREF=set_regs+1808, set_regs+2040, set_regs+2140

                     loc_d369:
000000000000d369         mov        rbx, qword [rbp+var_38]                     ; CODE XREF=set_regs+1289, set_regs+1390, set_regs+1953, set_regs+2160, set_regs+2225, set_regs+2255
000000000000d36d         xor        rbx, qword [fs:0x28]
000000000000d376         jne        loc_d535

000000000000d37c         lea        rsp, qword [rbp+var_28]
000000000000d380         pop        rbx
000000000000d381         pop        r12
000000000000d383         pop        r13
000000000000d385         pop        r14
000000000000d387         pop        r15
000000000000d389         pop        rbp
000000000000d38a         ret
                        ; endp

                     loc_d38b:
000000000000d38b         mov        rdx, qword [rbp+var_B8]                     ; argument "__n" for method j_memcpy, CODE XREF=set_regs+840
000000000000d392         mov        rsi, rdi                                    ; argument "__src" for method j_memcpy
000000000000d395         mov        rdi, r13                                    ; argument "__dest" for method j_memcpy
000000000000d398         mov        qword [rbp+var_D8], rcx
000000000000d39f         mov        qword [rbp+var_A0], r9
000000000000d3a6         call       j_memcpy                                    ; memcpy
000000000000d3ab         mov        rax, qword [r13+8]
000000000000d3af         mov        r9, qword [rbp+var_A0]
000000000000d3b6         mov        rcx, qword [rbp+var_D8]
000000000000d3bd         jmp        loc_cd79
000000000000d3c2         align      8

                     loc_d3c8:
000000000000d3c8         mov        rdi, qword [rbp+var_60]                     ; argument "__ptr" for method j_free, CODE XREF=set_regs+667, set_regs+1486, set_regs+1608
000000000000d3cc         call       j_free                                      ; free
000000000000d3d1         cmp        byte [rbp+var_C9], 0x0
000000000000d3d8         jne        loc_d4db

                     loc_d3de:
000000000000d3de         cmp        qword [rbp+var_88], 0x0                     ; CODE XREF=set_regs+2199
000000000000d3e6         jne        loc_d148

                     loc_d3ec:
000000000000d3ec         mov        eax, 0xc                                    ; CODE XREF=set_regs+119, set_regs+2003, set_regs+2010
000000000000d3f1         jmp        loc_d369

                     loc_d3f6:
000000000000d3f6         mov        rdi, qword [rbp+var_B8]                     ; argument "__size" for method j_malloc, CODE XREF=set_regs+179
000000000000d3fd         call       j_malloc                                    ; malloc
000000000000d402         test       rax, rax
000000000000d405         mov        qword [rbp+var_C0], rax
000000000000d40c         mov        byte [rbp+var_C9], 0x1
000000000000d413         jne        loc_cd27

000000000000d419         mov        rdi, qword [rbp+var_88]
000000000000d420         test       rdi, rdi
000000000000d423         je         loc_d3ec

000000000000d425         call       free_fail_stack_return.part.24              ; free_fail_stack_return.part.24
000000000000d42a         jmp        loc_d3ec

                     loc_d42c:
000000000000d42c         mov        rdi, qword [rbp+var_C0]                     ; argument "__ptr" for method j_free, CODE XREF=set_regs+1792
000000000000d433         call       j_free                                      ; free
000000000000d438         mov        rdi, qword [rbp+var_88]
000000000000d43f         test       rdi, rdi
000000000000d442         jne        loc_d362

000000000000d448         jmp        loc_d367

                     loc_d44d:
000000000000d44d         mov        qword [rbp+var_88], 0x0                     ; CODE XREF=set_regs+85
000000000000d458         jmp        loc_cccd

                     loc_d45d:
000000000000d45d         lea        rsi, qword [rax+rax*2]                      ; CODE XREF=set_regs+1160
000000000000d461         mov        rax, qword [rbp+var_88]
000000000000d468         mov        qword [rbp+var_A0], rdx
000000000000d46f         shl        rsi, 0x5                                    ; argument "__size" for method j_realloc
000000000000d473         mov        rdi, qword [rax+0x10]                       ; argument "__ptr" for method j_realloc
000000000000d477         call       j_realloc                                   ; realloc
000000000000d47c         test       rax, rax
000000000000d47f         je         loc_d4c5

000000000000d481         mov        rcx, qword [rbp+var_88]
000000000000d488         mov        rdx, qword [rbp+var_A0]
000000000000d48f         shl        qword [rcx+8], 0x1
000000000000d493         mov        qword [rcx+0x10], rax
000000000000d497         jmp        loc_d0e2

                     loc_d49c:
000000000000d49c         mov        rdi, qword [rbp+var_60]                     ; argument "__ptr" for method j_free, CODE XREF=set_regs+1304
000000000000d4a0         call       j_free                                      ; free
000000000000d4a5         cmp        byte [rbp+var_C9], 0x0
000000000000d4ac         je         loc_d367

000000000000d4b2         mov        rdi, qword [rbp+var_C0]                     ; argument "__ptr" for method j_free
000000000000d4b9         call       j_free                                      ; free
000000000000d4be         xor        eax, eax
000000000000d4c0         jmp        loc_d369

                     loc_d4c5:
000000000000d4c5         mov        rdi, qword [rbp+var_60]                     ; argument "__ptr" for method j_free, CODE XREF=set_regs+2095
000000000000d4c9         call       j_free                                      ; free
000000000000d4ce         cmp        byte [rbp+var_C9], 0x0
000000000000d4d5         je         loc_d148

                     loc_d4db:
000000000000d4db         mov        rdi, qword [rbp+var_C0]                     ; argument "__ptr" for method j_free, CODE XREF=set_regs+1266, set_regs+1928
000000000000d4e2         call       j_free                                      ; free
000000000000d4e7         jmp        loc_d3de

                     loc_d4ec:
000000000000d4ec         mov        rdi, qword [rbp+var_60]                     ; argument "__ptr" for method j_free, CODE XREF=set_regs+1504
000000000000d4f0         call       j_free                                      ; free
000000000000d4f5         cmp        byte [rbp+var_C9], 0x0
000000000000d4fc         mov        eax, 0x1
000000000000d501         je         loc_d369

000000000000d507         mov        rdi, qword [rbp+var_C0]                     ; argument "__ptr" for method j_free
000000000000d50e         mov        dword [rbp+var_88], eax
000000000000d514         call       j_free                                      ; free
000000000000d519         mov        eax, dword [rbp+var_88]
000000000000d51f         jmp        loc_d369

                     loc_d524:
000000000000d524         mov        rdi, qword [rbp+var_C0]                     ; argument "__ptr" for method j_free, CODE XREF=set_regs+1370
000000000000d52b         call       j_free                                      ; free
000000000000d530         jmp        loc_d1b0

                     loc_d535:
000000000000d535         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=set_regs+1830
                        ; endp
000000000000d53a         align      64                                          ; End of unwind block (FDE at 0x18090)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64


                     get_subexp_sub.isra.32:
000000000000d540         push       r15                                         ; Begin of unwind block (FDE at 0x180c0), CODE XREF=transit_state_bkref.isra.34+710, transit_state_bkref.isra.34+1789
000000000000d542         push       r14
000000000000d544         mov        r14, rcx
000000000000d547         push       r13
000000000000d549         push       r12
000000000000d54b         mov        r13, rsi
000000000000d54e         push       rbp
000000000000d54f         push       rbx
000000000000d550         lea        rsi, qword [rdx+0x10]
000000000000d554         mov        rbp, rdx
000000000000d557         mov        r9, r8
000000000000d55a         mov        r12, r8
000000000000d55d         sub        rsp, 0x20
000000000000d561         mov        rcx, qword [rdx+8]
000000000000d565         mov        r8, r14
000000000000d568         push       0x8
000000000000d56a         mov        rdx, qword [rdx]
000000000000d56d         mov        rbx, rdi
000000000000d570         call       check_arrival                               ; check_arrival
000000000000d575         test       eax, eax
000000000000d577         pop        rdx
000000000000d578         pop        rcx
000000000000d579         je         loc_d590

                     loc_d57b:
000000000000d57b         add        rsp, 0x18                                   ; CODE XREF=get_subexp_sub.isra.32+401
000000000000d57f         pop        rbx
000000000000d580         pop        rbp
000000000000d581         pop        r12
000000000000d583         pop        r13
000000000000d585         pop        r14
000000000000d587         pop        r15
000000000000d589         ret
                        ; endp
000000000000d58a         align      16

                     loc_d590:
000000000000d590         mov        rax, qword [rbx+0xc8]                       ; CODE XREF=get_subexp_sub.isra.32+57
000000000000d597         mov        rdx, qword [rbx+0xd0]
000000000000d59e         mov        r15, qword [rbp+8]
000000000000d5a2         mov        rcx, qword [r13]
000000000000d5a6         mov        rdi, qword [rbx+0xd8]
000000000000d5ad         cmp        rax, rdx
000000000000d5b0         mov        rsi, r15
000000000000d5b3         jge        loc_d650

                     loc_d5b9:
000000000000d5b9         lea        rdx, qword [rax+rax*4]                      ; CODE XREF=get_subexp_sub.isra.32+379
000000000000d5bd         shl        rdx, 0x3
000000000000d5c1         test       rax, rax
000000000000d5c4         jle        loc_d5d1

000000000000d5c6         lea        r8, qword [rdi+rdx-0x28]
000000000000d5cb         cmp        r12, qword [r8+8]
000000000000d5cf         je         loc_d640

                     loc_d5d1:
000000000000d5d1         add        rdi, rdx                                    ; CODE XREF=get_subexp_sub.isra.32+132, get_subexp_sub.isra.32+261
000000000000d5d4         xor        edx, edx
000000000000d5d6         cmp        r15, rcx
000000000000d5d9         sete       dl
000000000000d5dc         add        rax, 0x1
000000000000d5e0         mov        qword [rdi], r14
000000000000d5e3         neg        edx
000000000000d5e5         mov        qword [rdi+8], r12
000000000000d5e9         mov        qword [rdi+0x10], rcx
000000000000d5ed         mov        word [rdi+0x22], dx
000000000000d5f1         mov        qword [rdi+0x18], r15
000000000000d5f5         mov        qword [rbx+0xc8], rax
000000000000d5fc         mov        byte [rdi+0x20], 0x0
000000000000d600         mov        rax, r15
000000000000d603         movsxd     rdx, dword [rbx+0xe0]
000000000000d60a         sub        rax, rcx
000000000000d60d         cmp        rdx, rax
000000000000d610         jge        loc_d61c

000000000000d612         sub        r15d, ecx
000000000000d615         mov        dword [rbx+0xe0], r15d

                     loc_d61c:
000000000000d61c         add        rsi, r12                                    ; CODE XREF=get_subexp_sub.isra.32+208
000000000000d61f         sub        rsi, qword [r13]
000000000000d623         add        rsp, 0x18
000000000000d627         mov        rdi, rbx
000000000000d62a         pop        rbx
000000000000d62b         pop        rbp
000000000000d62c         pop        r12
000000000000d62e         pop        r13
000000000000d630         pop        r14
000000000000d632         pop        r15
000000000000d634         jmp        clean_state_log_if_needed                   ; clean_state_log_if_needed
                        ; endp
000000000000d639         align      64

                     loc_d640:
000000000000d640         mov        byte [r8+0x20], 0x1                         ; CODE XREF=get_subexp_sub.isra.32+143
000000000000d645         jmp        loc_d5d1
000000000000d647         align      16

                     loc_d650:
000000000000d650         lea        rsi, qword [rdx+rdx*4]                      ; CODE XREF=get_subexp_sub.isra.32+115
000000000000d654         mov        qword [rsp+0x48+var_40], rcx
000000000000d659         shl        rsi, 0x4                                    ; argument "__size" for method j_realloc
000000000000d65d         call       j_realloc                                   ; realloc
000000000000d662         test       rax, rax
000000000000d665         mov        rcx, qword [rsp+0x48+var_40]
000000000000d66a         je         loc_d6c0

000000000000d66c         mov        rsi, qword [rbx+0xc8]
000000000000d673         mov        rdx, qword [rbx+0xd0]
000000000000d67a         mov        qword [rbx+0xd8], rax
000000000000d681         mov        qword [rsp+0x48+var_40], rcx
000000000000d686         lea        rsi, qword [rsi+rsi*4]
000000000000d68a         lea        rdx, qword [rdx+rdx*4]
000000000000d68e         lea        rdi, qword [rax+rsi*8]                      ; argument "__s" for method j_memset
000000000000d692         shl        rdx, 0x3                                    ; argument "__n" for method j_memset
000000000000d696         xor        esi, esi                                    ; argument "__c" for method j_memset
000000000000d698         call       j_memset                                    ; memset
000000000000d69d         shl        qword [rbx+0xd0], 0x1
000000000000d6a4         mov        rax, qword [rbx+0xc8]
000000000000d6ab         mov        rdi, qword [rbx+0xd8]
000000000000d6b2         mov        rsi, qword [rbp+8]
000000000000d6b6         mov        rcx, qword [rsp+0x48+var_40]
000000000000d6bb         jmp        loc_d5b9

                     loc_d6c0:
000000000000d6c0         mov        rdi, qword [rbx+0xd8]                       ; argument "__ptr" for method j_free, CODE XREF=get_subexp_sub.isra.32+298
000000000000d6c7         call       j_free                                      ; free
000000000000d6cc         mov        eax, 0xc
000000000000d6d1         jmp        loc_d57b
000000000000d6d6         align      32                                          ; End of unwind block (FDE at 0x180c0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_58: int8_t, -88
        ;    var_5C: int32_t, -92
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208
        ;    var_D8: int64_t, -216
        ;    var_E0: int64_t, -224
        ;    var_E8: int64_t, -232


                     transit_state_bkref.isra.34:
000000000000d6e0         push       r15                                         ; Begin of unwind block (FDE at 0x1812c), CODE XREF=transit_state_bkref.isra.34+2090, merge_state_with_log+449, re_search_internal+5802
000000000000d6e2         push       r14
000000000000d6e4         push       r13
000000000000d6e6         push       r12
000000000000d6e8         push       rbp
000000000000d6e9         push       rbx
000000000000d6ea         sub        rsp, 0xb8
000000000000d6f1         mov        r15, qword [rdi+0x48]
000000000000d6f5         mov        rax, qword [fs:0x28]
000000000000d6fe         mov        qword [rsp+0xe8+var_40], rax
000000000000d706         xor        eax, eax
000000000000d708         cmp        qword [rsi], 0x0
000000000000d70c         mov        rax, qword [rdi+0x98]
000000000000d713         mov        qword [rsp+0xe8+var_A0], rsi
000000000000d718         mov        qword [rsp+0xe8+var_A8], rdx
000000000000d71d         mov        qword [rsp+0xe8+var_B0], rax
000000000000d722         jle        loc_da50

000000000000d728         lea        rax, qword [r15*8]
000000000000d730         mov        r14, rdi
000000000000d733         mov        qword [rsp+0xe8+var_E8], 0x0
000000000000d73b         mov        qword [rsp+0xe8+var_E0], r15
000000000000d740         mov        qword [rsp+0xe8+var_88], rax
000000000000d745         lea        rax, qword [rsp+0xe8+var_58]
000000000000d74d         mov        qword [rsp+0xe8+var_80], rax
000000000000d752         lea        rax, qword [rsp+0xe8+var_5C]
000000000000d75a         mov        qword [rsp+0xe8+var_70], rax
000000000000d75f         jmp        loc_d7a7
000000000000d761         align      8

                     loc_d768:
000000000000d768         test       al, 0x1                                     ; CODE XREF=transit_state_bkref.isra.34+285
000000000000d76a         je         loc_d790

000000000000d76c         and        edx, 0x8
000000000000d76f         jne        loc_d790

                     loc_d771:
000000000000d771         test       cl, 0x20                                    ; CODE XREF=transit_state_bkref.isra.34+294, transit_state_bkref.isra.34+302
000000000000d774         je         loc_d77a

000000000000d776         test       al, 0x2
000000000000d778         je         loc_d790

                     loc_d77a:
000000000000d77a         and        ecx, 0x80                                   ; CODE XREF=transit_state_bkref.isra.34+148
000000000000d780         je         loc_d820

000000000000d786         test       al, 0x8
000000000000d788         jne        loc_d820

000000000000d78e         nop

                     loc_d790:
000000000000d790         mov        rdi, qword [rsp+0xe8+var_A0]                ; CODE XREF=transit_state_bkref.isra.34+138, transit_state_bkref.isra.34+143, transit_state_bkref.isra.34+152, transit_state_bkref.isra.34+237, transit_state_bkref.isra.34+308, transit_state_bkref.isra.34+976, transit_state_bkref.isra.34+1335
000000000000d795         add        qword [rsp+0xe8+var_E8], 0x1
000000000000d79a         mov        rax, qword [rsp+0xe8+var_E8]
000000000000d79e         cmp        rax, qword [rdi]
000000000000d7a1         jge        loc_da50

                     loc_d7a7:
000000000000d7a7         mov        rax, qword [rsp+0xe8+var_A8]                ; CODE XREF=transit_state_bkref.isra.34+127
000000000000d7ac         mov        rdi, qword [rsp+0xe8+var_E8]
000000000000d7b0         mov        rax, qword [rax]
000000000000d7b3         mov        r13, qword [rax+rdi*8]
000000000000d7b7         mov        rdi, qword [rsp+0xe8+var_B0]
000000000000d7bc         mov        rax, qword [rdi]
000000000000d7bf         mov        rbx, r13
000000000000d7c2         shl        rbx, 0x4
000000000000d7c6         add        rax, rbx
000000000000d7c9         cmp        byte [rax+8], 0x4
000000000000d7cd         jne        loc_d790

000000000000d7cf         mov        ebp, dword [rax+8]
000000000000d7d2         test       ebp, 0x3ff00
000000000000d7d8         je         loc_d820

000000000000d7da         mov        edx, dword [r14+0xa0]
000000000000d7e1         mov        rsi, qword [rsp+0xe8+var_E0]
000000000000d7e6         mov        rdi, r14
000000000000d7e9         call       re_string_context_at                        ; re_string_context_at
000000000000d7ee         mov        edx, ebp
000000000000d7f0         shr        edx, 0x8
000000000000d7f3         mov        ecx, edx
000000000000d7f5         and        cx, 0x3ff
000000000000d7fa         test       dl, 0x4
000000000000d7fd         jne        loc_d768

000000000000d803         and        edx, 0x8
000000000000d806         je         loc_d771

000000000000d80c         test       al, 0x1
000000000000d80e         je         loc_d771

000000000000d814         jmp        loc_d790
000000000000d819         align      32

                     loc_d820:
000000000000d820         mov        rdi, qword [r14+0xc8]                       ; CODE XREF=transit_state_bkref.isra.34+160, transit_state_bkref.isra.34+168, transit_state_bkref.isra.34+248
000000000000d827         mov        rax, qword [r14+0x98]
000000000000d82e         xor        ecx, ecx
000000000000d830         mov        r10, qword [r14+8]
000000000000d834         mov        r9, qword [rsp+0xe8+var_E0]
000000000000d839         mov        qword [rsp+0xe8+var_78], rdi
000000000000d83e         mov        qword [rsp+0xe8+var_98], rax

                     loc_d843:
000000000000d843         cmp        rcx, rdi                                    ; CODE XREF=transit_state_bkref.isra.34+871
000000000000d846         jge        loc_d89b

000000000000d848         lea        rax, qword [rcx+rdi]
000000000000d84c         mov        r11, qword [r14+0xd8]
000000000000d853         mov        rsi, rax
000000000000d856         shr        rsi, 0x3f
000000000000d85a         add        rsi, rax
000000000000d85d         sar        rsi, 0x1
000000000000d860         lea        rax, qword [rsi+rsi*4]
000000000000d864         cmp        r9, qword [r11+rax*8+8]
000000000000d869         jle        loc_d896

000000000000d86b         jmp        loc_da38

                     loc_d870:
000000000000d870         lea        rdx, qword [rsi+rcx]                        ; CODE XREF=transit_state_bkref.isra.34+441
000000000000d874         mov        rax, rdx
000000000000d877         shr        rax, 0x3f
000000000000d87b         add        rax, rdx
000000000000d87e         sar        rax, 0x1
000000000000d881         lea        rdx, qword [rax+rax*4]
000000000000d885         mov        r8, rax
000000000000d888         cmp        r9, qword [r11+rdx*8+8]
000000000000d88d         jg         loc_da40

000000000000d893         mov        rsi, rax

                     loc_d896:
000000000000d896         cmp        rsi, rcx                                    ; CODE XREF=transit_state_bkref.isra.34+393
000000000000d899         jg         loc_d870

                     loc_d89b:
000000000000d89b         cmp        qword [rsp+0xe8+var_78], rcx                ; CODE XREF=transit_state_bkref.isra.34+358
000000000000d8a0         jle        loc_d8c6

000000000000d8a2         mov        rdx, qword [r14+0xd8]
000000000000d8a9         lea        rax, qword [rcx+rcx*4]
000000000000d8ad         mov        rdi, qword [rsp+0xe8+var_E0]
000000000000d8b2         lea        rax, qword [rdx+rax*8]
000000000000d8b6         cmp        qword [rax+8], rdi
000000000000d8ba         jne        loc_d8c6

000000000000d8bc         cmp        rcx, 0xffffffffffffffff
000000000000d8c0         jne        loc_da96

                     loc_d8c6:
000000000000d8c6         mov        rax, qword [rsp+0xe8+var_98]                ; CODE XREF=transit_state_bkref.isra.34+448, transit_state_bkref.isra.34+474, transit_state_bkref.isra.34+944
000000000000d8cb         cmp        qword [r14+0xe8], 0x0
000000000000d8d3         mov        rdx, qword [rax]
000000000000d8d6         mov        rax, qword [rdx+rbx]
000000000000d8da         mov        qword [rsp+0xe8+var_90], rax
000000000000d8df         jle        loc_da9b

000000000000d8e5         mov        qword [rsp+0xe8+var_B8], r13
000000000000d8ea         mov        qword [rsp+0xe8+var_C0], 0x0
000000000000d8f3         mov        r13, r10

                     loc_d8f6:
000000000000d8f6         mov        rax, qword [r14+0xf8]                       ; CODE XREF=transit_state_bkref.isra.34+601
000000000000d8fd         mov        rbx, qword [rsp+0xe8+var_C0]
000000000000d902         mov        rdi, qword [rsp+0xe8+var_90]
000000000000d907         mov        rbx, qword [rax+rbx*8]
000000000000d90b         mov        rax, qword [rbx+8]
000000000000d90f         shl        rax, 0x4
000000000000d913         cmp        rdi, qword [rdx+rax]
000000000000d917         je         loc_d940

                     loc_d919:
000000000000d919         add        qword [rsp+0xe8+var_C0], 0x1                ; CODE XREF=transit_state_bkref.isra.34+1447, transit_state_bkref.isra.34+1829, transit_state_bkref.isra.34+1925
000000000000d91f         mov        rax, qword [rsp+0xe8+var_C0]
000000000000d924         cmp        rax, qword [r14+0xe8]
000000000000d92b         jge        loc_dfa1

000000000000d931         mov        rax, qword [rsp+0xe8+var_98]
000000000000d936         mov        rdx, qword [rax]
000000000000d939         jmp        loc_d8f6
000000000000d93b         align      64

                     loc_d940:
000000000000d940         cmp        qword [rbx+0x20], 0x0                       ; CODE XREF=transit_state_bkref.isra.34+567
000000000000d945         mov        r11, qword [rbx]
000000000000d948         jle        loc_dfb2

000000000000d94e         mov        rcx, qword [rsp+0xe8+var_E0]
000000000000d953         mov        r8, r13
000000000000d956         xor        ebp, ebp
000000000000d958         mov        r13, rbx
000000000000d95b         mov        rbx, rcx
000000000000d95e         jmp        loc_d9cc

                     loc_d960:
000000000000d960         lea        rsi, qword [r8+r11]                         ; argument "__s2" for method j_memcmp, CODE XREF=transit_state_bkref.isra.34+779, transit_state_bkref.isra.34+844
000000000000d964         lea        rdi, qword [r8+rbx]                         ; argument "__s1" for method j_memcmp
000000000000d968         mov        qword [rsp+0xe8+var_C8], r9
000000000000d96d         mov        qword [rsp+0xe8+var_D0], r11
000000000000d972         mov        qword [rsp+0xe8+var_D8], r8
000000000000d977         call       j_memcmp                                    ; memcmp
000000000000d97c         test       eax, eax
000000000000d97e         mov        r8, qword [rsp+0xe8+var_D8]
000000000000d983         mov        r11, qword [rsp+0xe8+var_D0]
000000000000d988         mov        r9, qword [rsp+0xe8+var_C8]
000000000000d98d         jne        loc_de58

                     loc_d993:
000000000000d993         mov        r8, qword [rsp+0xe8+var_E0]                 ; CODE XREF=transit_state_bkref.isra.34+773
000000000000d998         mov        rcx, qword [rsp+0xe8+var_B8]
000000000000d99d         mov        rdx, r9
000000000000d9a0         mov        rsi, r13
000000000000d9a3         mov        rdi, r14
000000000000d9a6         call       get_subexp_sub.isra.32                      ; get_subexp_sub.isra.32
000000000000d9ab         cmp        eax, 0x1
000000000000d9ae         mov        r8, qword [r14+8]
000000000000d9b2         ja         loc_da58

000000000000d9b8         add        rbp, 0x1
000000000000d9bc         cmp        rbp, qword [r13+0x20]
000000000000d9c0         mov        r11, r15
000000000000d9c3         mov        rbx, r12
000000000000d9c6         jge        loc_dc78

                     loc_d9cc:
000000000000d9cc         mov        rax, qword [r13+0x28]                       ; CODE XREF=transit_state_bkref.isra.34+638
000000000000d9d0         mov        r9, qword [rax+rbp*8]
000000000000d9d4         mov        r15, qword [r9+8]
000000000000d9d8         mov        rdx, r15
000000000000d9db         sub        rdx, r11
000000000000d9de         test       rdx, rdx
000000000000d9e1         lea        r12, qword [rdx+rbx]
000000000000d9e5         jle        loc_d993

000000000000d9e7         cmp        qword [r14+0x30], r12
000000000000d9eb         jge        loc_d960

000000000000d9f1         cmp        qword [r14+0x58], r12
000000000000d9f5         mov        qword [rsp+0xe8+var_D0], rdx
000000000000d9fa         mov        qword [rsp+0xe8+var_D8], r9
000000000000d9ff         jl         loc_de58

000000000000da05         mov        rsi, r12
000000000000da08         mov        rdi, r14
000000000000da0b         mov        qword [rsp+0xe8+var_C8], r11
000000000000da10         call       clean_state_log_if_needed                   ; clean_state_log_if_needed
000000000000da15         test       eax, eax
000000000000da17         jne        loc_da58

000000000000da19         mov        r8, qword [r14+8]
000000000000da1d         mov        rdx, qword [rsp+0xe8+var_D0]
000000000000da22         mov        r9, qword [rsp+0xe8+var_D8]
000000000000da27         mov        r11, qword [rsp+0xe8+var_C8]
000000000000da2c         jmp        loc_d960
000000000000da31         align      8

                     loc_da38:
000000000000da38         mov        r8, rsi                                     ; CODE XREF=transit_state_bkref.isra.34+395
000000000000da3b         mov        rsi, rdi
000000000000da3e         nop

                     loc_da40:
000000000000da40         lea        rcx, qword [r8+1]                           ; CODE XREF=transit_state_bkref.isra.34+429
000000000000da44         mov        rdi, rsi
000000000000da47         jmp        loc_d843
000000000000da4c         align      16

                     loc_da50:
000000000000da50         xor        eax, eax                                    ; CODE XREF=transit_state_bkref.isra.34+66, transit_state_bkref.isra.34+193
000000000000da52         nop        word [rax+rax]

                     loc_da58:
000000000000da58         mov        rbx, qword [rsp+0xe8+var_40]                ; CODE XREF=transit_state_bkref.isra.34+722, transit_state_bkref.isra.34+823, transit_state_bkref.isra.34+1694, transit_state_bkref.isra.34+1801, transit_state_bkref.isra.34+1902, transit_state_bkref.isra.34+2016, transit_state_bkref.isra.34+2070, transit_state_bkref.isra.34+2110, transit_state_bkref.isra.34+2140, transit_state_bkref.isra.34+2169
000000000000da60         xor        rbx, qword [fs:0x28]
000000000000da69         jne        loc_dfbc

000000000000da6f         add        rsp, 0xb8
000000000000da76         pop        rbx
000000000000da77         pop        rbp
000000000000da78         pop        r12
000000000000da7a         pop        r13
000000000000da7c         pop        r14
000000000000da7e         pop        r15
000000000000da80         ret
                        ; endp
000000000000da81         align      8

                     loc_da88:
000000000000da88         add        rax, 0x28                                   ; CODE XREF=transit_state_bkref.isra.34+953
000000000000da8c         cmp        byte [rax-8], 0x0
000000000000da90         je         loc_d8c6

                     loc_da96:
000000000000da96         cmp        r13, qword [rax]                            ; CODE XREF=transit_state_bkref.isra.34+480
000000000000da99         jne        loc_da88

                     loc_da9b:
000000000000da9b         mov        rax, qword [rsp+0xe8+var_78]                ; CODE XREF=transit_state_bkref.isra.34+511

                     loc_daa0:
000000000000daa0         cmp        qword [rsp+0xe8+var_78], rax                ; CODE XREF=transit_state_bkref.isra.34+2253
000000000000daa5         mov        dword [rsp+0xe8+var_5C], 0x0
000000000000dab0         jge        loc_d790

000000000000dab6         lea        rax, qword [r13*8]
000000000000dabe         mov        r12, qword [rsp+0xe8+var_78]
000000000000dac3         mov        rbp, qword [rsp+0xe8+var_B0]
000000000000dac8         mov        qword [rsp+0xe8+var_98], rax
000000000000dacd         lea        rax, qword [r13+r13*2]
000000000000dad2         lea        r8, qword [r12+r12*4]
000000000000dad6         shl        rax, 0x3
000000000000dada         mov        qword [rsp+0xe8+var_90], rax
000000000000dadf         lea        r15, qword [r8*8]
000000000000dae7         jmp        loc_dc1d
000000000000daec         align      16

                     loc_daf0:
000000000000daf0         mov        rcx, qword [rbp+0x28]                       ; CODE XREF=transit_state_bkref.isra.34+1390
000000000000daf4         mov        rdi, qword [rsp+0xe8+var_90]
000000000000daf9         mov        rcx, qword [rcx+rdi+0x10]
000000000000dafe         mov        rcx, qword [rcx]
000000000000db01         lea        rcx, qword [rcx+rcx*2]
000000000000db05         lea        rcx, qword [rdx+rcx*8]
000000000000db09         mov        qword [rsp+0xe8+var_D0], rcx

                     loc_db0e:
000000000000db0e         add        rbx, qword [rsp+0xe8+var_E0]                ; CODE XREF=transit_state_bkref.isra.34+1422
000000000000db13         mov        edx, dword [r14+0xa0]
000000000000db1a         mov        rdi, r14
000000000000db1d         sub        rbx, rax
000000000000db20         lea        rsi, qword [rbx-1]
000000000000db24         call       re_string_context_at                        ; re_string_context_at
000000000000db29         mov        rsi, qword [rsp+0xe8+var_88]
000000000000db2e         mov        ecx, eax
000000000000db30         mov        rax, qword [r14+0xb8]
000000000000db37         lea        r10, qword [rbx*8]
000000000000db3f         mov        qword [rsp+0xe8+var_D8], 0x0
000000000000db48         lea        r11, qword [rax+r10]
000000000000db4c         mov        rax, qword [rax+rsi]
000000000000db50         mov        rdx, qword [r11]
000000000000db53         test       rax, rax
000000000000db56         je         loc_db61

000000000000db58         mov        rax, qword [rax+0x10]
000000000000db5c         mov        qword [rsp+0xe8+var_D8], rax

                     loc_db61:
000000000000db61         test       rdx, rdx                                    ; CODE XREF=transit_state_bkref.isra.34+1142
000000000000db64         je         loc_de80

000000000000db6a         mov        rsi, qword [rdx+0x50]
000000000000db6e         mov        rdi, qword [rsp+0xe8+var_80]
000000000000db73         mov        rdx, qword [rsp+0xe8+var_D0]
000000000000db78         mov        qword [rsp+0xe8+var_B8], r10
000000000000db7d         mov        dword [rsp+0xe8+var_C0], ecx
000000000000db81         call       re_node_set_init_union                      ; re_node_set_init_union
000000000000db86         test       eax, eax
000000000000db88         mov        dword [rsp+0xe8+var_5C], eax
000000000000db8f         mov        ecx, dword [rsp+0xe8+var_C0]
000000000000db93         mov        r10, qword [rsp+0xe8+var_B8]
000000000000db98         jne        loc_df28

000000000000db9e         add        r10, qword [r14+0xb8]
000000000000dba5         mov        rdx, qword [rsp+0xe8+var_80]
000000000000dbaa         mov        rsi, rbp
000000000000dbad         mov        rdi, qword [rsp+0xe8+var_70]
000000000000dbb2         mov        qword [rsp+0xe8+var_C0], r10
000000000000dbb7         call       re_acquire_state_context                    ; re_acquire_state_context
000000000000dbbc         mov        r10, qword [rsp+0xe8+var_C0]
000000000000dbc1         mov        rdi, qword [rsp+0xe8+var_48]                ; argument "__ptr" for method j_free
000000000000dbc9         mov        qword [r10], rax
000000000000dbcc         call       j_free                                      ; free
000000000000dbd1         mov        rdx, qword [r14+0xb8]
000000000000dbd8         cmp        qword [rdx+rbx*8], 0x0
000000000000dbdd         je         loc_deb1

                     loc_dbe3:
000000000000dbe3         cmp        qword [rsp+0xe8+var_C8], 0x0                ; CODE XREF=transit_state_bkref.isra.34+1995, transit_state_bkref.isra.34+2010
000000000000dbe9         jne        loc_dc08

000000000000dbeb         mov        rax, qword [rsp+0xe8+var_88]
000000000000dbf0         mov        rbx, qword [rsp+0xe8+var_D8]
000000000000dbf5         mov        rax, qword [rdx+rax]
000000000000dbf9         cmp        qword [rax+0x10], rbx
000000000000dbfd         jg         loc_dec8

000000000000dc03         nop        dword [rax+rax]

                     loc_dc08:
000000000000dc08         add        r12, 0x1                                    ; CODE XREF=transit_state_bkref.isra.34+1289, transit_state_bkref.isra.34+1354, transit_state_bkref.isra.34+1365, transit_state_bkref.isra.34+2104
000000000000dc0c         add        r15, 0x28
000000000000dc10         cmp        r12, qword [r14+0xc8]
000000000000dc17         jge        loc_d790

                     loc_dc1d:
000000000000dc1d         mov        rax, qword [r14+0xd8]                       ; CODE XREF=transit_state_bkref.isra.34+1031
000000000000dc24         add        rax, r15
000000000000dc27         cmp        r13, qword [rax]
000000000000dc2a         jne        loc_dc08

000000000000dc2c         mov        rdi, qword [rsp+0xe8+var_E0]
000000000000dc31         cmp        rdi, qword [rax+8]
000000000000dc35         jne        loc_dc08

000000000000dc37         mov        rbx, qword [rax+0x18]
000000000000dc3b         mov        rax, qword [rax+0x10]
000000000000dc3f         mov        rdx, qword [rbp+0x30]
000000000000dc43         mov        rcx, rbx
000000000000dc46         sub        rcx, rax
000000000000dc49         mov        qword [rsp+0xe8+var_C8], rcx
000000000000dc4e         je         loc_daf0

000000000000dc54         mov        rcx, qword [rbp+0x18]
000000000000dc58         mov        rdi, qword [rsp+0xe8+var_98]
000000000000dc5d         mov        rcx, qword [rcx+rdi]
000000000000dc61         lea        rcx, qword [rcx+rcx*2]
000000000000dc65         lea        rcx, qword [rdx+rcx*8]
000000000000dc69         mov        qword [rsp+0xe8+var_D0], rcx
000000000000dc6e         jmp        loc_db0e
000000000000dc73         align      8

                     loc_dc78:
000000000000dc78         mov        rbx, r13                                    ; CODE XREF=transit_state_bkref.isra.34+742
000000000000dc7b         mov        r13, r8

                     loc_dc7e:
000000000000dc7e         lea        r11, qword [r15+1]                          ; CODE XREF=transit_state_bkref.isra.34+1946

                     loc_dc82:
000000000000dc82         cmp        qword [rsp+0xe8+var_E0], r11                ; CODE XREF=transit_state_bkref.isra.34+1937, transit_state_bkref.isra.34+2263
000000000000dc87         jl         loc_d919

000000000000dc8d         mov        rax, r12
000000000000dc90         lea        r15, qword [r11*8]
000000000000dc98         mov        r12, rbx
000000000000dc9b         mov        rbx, r11
000000000000dc9e         mov        r11, r13
000000000000dca1         mov        r13, rax
000000000000dca4         nop        dword [rax]

                     loc_dca8:
000000000000dca8         mov        rax, rbx                                    ; CODE XREF=transit_state_bkref.isra.34+1820
000000000000dcab         sub        rax, qword [r12]
000000000000dcaf         test       rax, rax
000000000000dcb2         jle        loc_dcd5

000000000000dcb4         cmp        qword [r14+0x30], r13
000000000000dcb8         jle        loc_df41

                     loc_dcbe:
000000000000dcbe         movzx      ecx, byte [r11+rbx-1]                       ; CODE XREF=transit_state_bkref.isra.34+2179
000000000000dcc4         lea        rax, qword [r13+1]
000000000000dcc8         cmp        byte [r11+r13], cl
000000000000dccc         jne        loc_de02

000000000000dcd2         mov        r13, rax

                     loc_dcd5:
000000000000dcd5         mov        rax, qword [r14+0xb8]                       ; CODE XREF=transit_state_bkref.isra.34+1490
000000000000dcdc         mov        rax, qword [rax+r15]
000000000000dce0         test       rax, rax
000000000000dce3         je         loc_ddef

000000000000dce9         mov        rcx, qword [rax+0x10]
000000000000dced         test       rcx, rcx
000000000000dcf0         jle        loc_ddef

000000000000dcf6         mov        rdi, qword [rax+0x18]
000000000000dcfa         mov        rax, qword [rsp+0xe8+var_98]
000000000000dcff         xor        edx, edx
000000000000dd01         mov        r8, qword [rsp+0xe8+var_90]
000000000000dd06         mov        rsi, qword [rax]
000000000000dd09         jmp        loc_dd1d
000000000000dd0b         align      16

                     loc_dd10:
000000000000dd10         add        rdx, 0x1                                    ; CODE XREF=transit_state_bkref.isra.34+1615, transit_state_bkref.isra.34+1620
000000000000dd14         cmp        rcx, rdx
000000000000dd17         je         loc_ddef

                     loc_dd1d:
000000000000dd1d         mov        rbp, qword [rdi+rdx*8]                      ; CODE XREF=transit_state_bkref.isra.34+1577
000000000000dd21         mov        rax, rbp
000000000000dd24         shl        rax, 0x4
000000000000dd28         add        rax, rsi
000000000000dd2b         cmp        byte [rax+8], 0x9
000000000000dd2f         jne        loc_dd10

000000000000dd31         cmp        r8, qword [rax]
000000000000dd34         jne        loc_dd10

000000000000dd36         cmp        rbp, 0xffffffffffffffff
000000000000dd3a         je         loc_ddef

000000000000dd40         mov        rsi, qword [r12+0x10]
000000000000dd45         mov        rcx, qword [r12]
000000000000dd49         test       rsi, rsi
000000000000dd4c         je         loc_de10

                     loc_dd52:
000000000000dd52         mov        qword [rsp+0xe8+var_D8], r11                ; CODE XREF=transit_state_bkref.isra.34+1891
000000000000dd57         mov        rdx, qword [r12+8]
000000000000dd5c         sub        rsp, 0x8
000000000000dd60         push       0x9
000000000000dd62         mov        r9, rbx
000000000000dd65         mov        r8, rbp
000000000000dd68         mov        rdi, r14
000000000000dd6b         call       check_arrival                               ; check_arrival
000000000000dd70         pop        rdx
000000000000dd71         cmp        eax, 0x1
000000000000dd74         pop        rcx
000000000000dd75         mov        r11, qword [rsp+0xe8+var_D8]
000000000000dd7a         je         loc_ddef

000000000000dd7c         test       eax, eax
000000000000dd7e         jne        loc_da58

000000000000dd84         mov        rax, qword [r12+0x20]
000000000000dd89         cmp        rax, qword [r12+0x18]
000000000000dd8e         je         loc_df68

                     loc_dd94:
000000000000dd94         mov        esi, 0x28                                   ; argument "__size" for method j_calloc, CODE XREF=transit_state_bkref.isra.34+2236
000000000000dd99         mov        edi, 0x1                                    ; argument "__nmemb" for method j_calloc
000000000000dd9e         call       j_calloc                                    ; calloc
000000000000dda3         test       rax, rax
000000000000dda6         je         loc_de49

000000000000ddac         mov        rdx, qword [r12+0x20]
000000000000ddb1         mov        rcx, qword [r12+0x28]
000000000000ddb6         mov        rsi, r12
000000000000ddb9         mov        r8, qword [rsp+0xe8+var_E0]
000000000000ddbe         mov        rdi, r14
000000000000ddc1         mov        qword [rcx+rdx*8], rax
000000000000ddc5         mov        rcx, qword [rsp+0xe8+var_B8]
000000000000ddca         add        rdx, 0x1
000000000000ddce         mov        qword [rax], rbp
000000000000ddd1         mov        qword [rax+8], rbx
000000000000ddd5         mov        qword [r12+0x20], rdx
000000000000ddda         mov        rdx, rax
000000000000dddd         call       get_subexp_sub.isra.32                      ; get_subexp_sub.isra.32
000000000000dde2         cmp        eax, 0x1
000000000000dde5         mov        r11, qword [r14+8]
000000000000dde9         ja         loc_da58

                     loc_ddef:
000000000000ddef         add        rbx, 0x1                                    ; CODE XREF=transit_state_bkref.isra.34+1539, transit_state_bkref.isra.34+1552, transit_state_bkref.isra.34+1591, transit_state_bkref.isra.34+1626, transit_state_bkref.isra.34+1690
000000000000ddf3         add        r15, 0x8
000000000000ddf7         cmp        qword [rsp+0xe8+var_E0], rbx
000000000000ddfc         jge        loc_dca8

                     loc_de02:
000000000000de02         mov        r13, r11                                    ; CODE XREF=transit_state_bkref.isra.34+1516, transit_state_bkref.isra.34+2149
000000000000de05         jmp        loc_d919
000000000000de0a         align      16

                     loc_de10:
000000000000de10         mov        rsi, rbx                                    ; CODE XREF=transit_state_bkref.isra.34+1644
000000000000de13         mov        edi, 0x18                                   ; argument "__nmemb" for method j_calloc
000000000000de18         mov        qword [rsp+0xe8+var_D0], r11
000000000000de1d         sub        rsi, rcx
000000000000de20         mov        qword [rsp+0xe8+var_D8], rcx
000000000000de25         add        rsi, 0x1                                    ; argument "__size" for method j_calloc
000000000000de29         call       j_calloc                                    ; calloc
000000000000de2e         test       rax, rax
000000000000de31         mov        rsi, rax
000000000000de34         mov        qword [r12+0x10], rax
000000000000de39         mov        rcx, qword [rsp+0xe8+var_D8]
000000000000de3e         mov        r11, qword [rsp+0xe8+var_D0]
000000000000de43         jne        loc_dd52

                     loc_de49:
000000000000de49         mov        eax, 0xc                                    ; CODE XREF=transit_state_bkref.isra.34+1734, transit_state_bkref.isra.34+2215
000000000000de4e         jmp        loc_da58
000000000000de53         align      8

                     loc_de58:
000000000000de58         mov        rcx, rbx                                    ; CODE XREF=transit_state_bkref.isra.34+685, transit_state_bkref.isra.34+799
000000000000de5b         mov        rbx, r13
000000000000de5e         mov        r13, r8
000000000000de61         cmp        qword [rbx+0x20], rbp
000000000000de65         jg         loc_d919

000000000000de6b         test       rbp, rbp
000000000000de6e         mov        r12, rcx
000000000000de71         je         loc_dc82

000000000000de77         mov        r15, r11
000000000000de7a         jmp        loc_dc7e
000000000000de7f         align      128

                     loc_de80:
000000000000de80         mov        rdx, qword [rsp+0xe8+var_D0]                ; CODE XREF=transit_state_bkref.isra.34+1156
000000000000de85         mov        rdi, qword [rsp+0xe8+var_70]
000000000000de8a         mov        rsi, rbp
000000000000de8d         mov        qword [rsp+0xe8+var_C0], r11
000000000000de92         call       re_acquire_state_context                    ; re_acquire_state_context
000000000000de97         mov        r11, qword [rsp+0xe8+var_C0]
000000000000de9c         mov        rdx, qword [r14+0xb8]
000000000000dea3         mov        qword [r11], rax
000000000000dea6         cmp        qword [rdx+rbx*8], 0x0
000000000000deab         jne        loc_dbe3

                     loc_deb1:
000000000000deb1         mov        eax, dword [rsp+0xe8+var_5C]                ; CODE XREF=transit_state_bkref.isra.34+1277
000000000000deb8         test       eax, eax
000000000000deba         je         loc_dbe3

000000000000dec0         jmp        loc_da58
000000000000dec5         align      8

                     loc_dec8:
000000000000dec8         mov        rax, qword [rsp+0xe8+var_D0]                ; CODE XREF=transit_state_bkref.isra.34+1309
000000000000decd         mov        rcx, qword [rsp+0xe8+var_E0]
000000000000ded2         mov        rdi, r14
000000000000ded5         lea        r8, qword [rax+0x10]
000000000000ded9         lea        rbx, qword [rax+8]
000000000000dedd         mov        rdx, r8
000000000000dee0         mov        rsi, rbx
000000000000dee3         mov        qword [rsp+0xe8+var_D8], r8
000000000000dee8         call       check_subexp_matching_top.isra.18           ; check_subexp_matching_top.isra.18
000000000000deed         test       eax, eax
000000000000deef         mov        dword [rsp+0xe8+var_5C], eax
000000000000def6         jne        loc_da58

000000000000defc         mov        r8, qword [rsp+0xe8+var_D8]
000000000000df01         mov        rsi, rbx
000000000000df04         mov        rdi, r14
000000000000df07         mov        rdx, r8
000000000000df0a         call       transit_state_bkref.isra.34                 ; transit_state_bkref.isra.34
000000000000df0f         test       eax, eax
000000000000df11         mov        dword [rsp+0xe8+var_5C], eax
000000000000df18         je         loc_dc08

000000000000df1e         jmp        loc_da58
000000000000df23         align      8

                     loc_df28:
000000000000df28         mov        rdi, qword [rsp+0xe8+var_48]                ; argument "__ptr" for method j_free, CODE XREF=transit_state_bkref.isra.34+1208
000000000000df30         call       j_free                                      ; free
000000000000df35         mov        eax, dword [rsp+0xe8+var_5C]
000000000000df3c         jmp        loc_da58

                     loc_df41:
000000000000df41         cmp        qword [r14+0x58], r13                       ; CODE XREF=transit_state_bkref.isra.34+1496
000000000000df45         jle        loc_de02

000000000000df4b         lea        esi, dword [r13+1]
000000000000df4f         mov        rdi, r14
000000000000df52         call       extend_buffers                              ; extend_buffers
000000000000df57         test       eax, eax
000000000000df59         jne        loc_da58

000000000000df5f         mov        r11, qword [r14+8]
000000000000df63         jmp        loc_dcbe

                     loc_df68:
000000000000df68         lea        rdx, qword [rax+rax+1]                      ; CODE XREF=transit_state_bkref.isra.34+1710
000000000000df6d         mov        rdi, qword [r12+0x28]                       ; argument "__ptr" for method j_realloc
000000000000df72         lea        rsi, qword [rdx*8]                          ; argument "__size" for method j_realloc
000000000000df7a         mov        qword [rsp+0xe8+var_D8], rdx
000000000000df7f         call       j_realloc                                   ; realloc
000000000000df84         test       rax, rax
000000000000df87         je         loc_de49

000000000000df8d         mov        rdx, qword [rsp+0xe8+var_D8]
000000000000df92         mov        qword [r12+0x28], rax
000000000000df97         mov        qword [r12+0x18], rdx
000000000000df9c         jmp        loc_dd94

                     loc_dfa1:
000000000000dfa1         mov        r13, qword [rsp+0xe8+var_B8]                ; CODE XREF=transit_state_bkref.isra.34+587
000000000000dfa6         mov        rax, qword [r14+0xc8]
000000000000dfad         jmp        loc_daa0

                     loc_dfb2:
000000000000dfb2         mov        r12, qword [rsp+0xe8+var_E0]                ; CODE XREF=transit_state_bkref.isra.34+616
000000000000dfb7         jmp        loc_dc82

                     loc_dfbc:
000000000000dfbc         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=transit_state_bkref.isra.34+905
                        ; endp
000000000000dfc1         align      16                                          ; End of unwind block (FDE at 0x1812c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_58: int8_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104


                     merge_state_with_log:
000000000000dfd0         push       r15                                         ; Begin of unwind block (FDE at 0x1818c), CODE XREF=re_search_internal+2012, re_search_internal+3011
000000000000dfd2         push       r14
000000000000dfd4         push       r13
000000000000dfd6         push       r12
000000000000dfd8         mov        r13, rdi
000000000000dfdb         push       rbp
000000000000dfdc         push       rbx
000000000000dfdd         mov        rbx, rsi
000000000000dfe0         sub        rsp, 0x38
000000000000dfe4         mov        r12, qword [rsi+0x48]
000000000000dfe8         mov        r14, qword [rsi+0xb8]
000000000000dfef         mov        rax, qword [fs:0x28]
000000000000dff8         mov        qword [rsp+0x68+var_40], rax
000000000000dffd         xor        eax, eax
000000000000dfff         mov        r15, qword [rsi+0x98]
000000000000e006         lea        rbp, qword [r12*8]
000000000000e00e         add        r14, rbp
000000000000e011         cmp        qword [rsi+0xc0], r12
000000000000e018         jge        loc_e060

000000000000e01a         mov        qword [r14], rdx
000000000000e01d         mov        rbp, rdx
000000000000e020         mov        qword [rsi+0xc0], r12

                     loc_e027:
000000000000e027         cmp        qword [r15+0x98], 0x0                       ; CODE XREF=merge_state_with_log+273, merge_state_with_log+289, merge_state_with_log+365, merge_state_with_log+382
000000000000e02f         jne        loc_e158

                     loc_e035:
000000000000e035         mov        rcx, qword [rsp+0x68+var_40]                ; CODE XREF=merge_state_with_log+434, merge_state_with_log+473, merge_state_with_log+482
000000000000e03a         xor        rcx, qword [fs:0x28]
000000000000e043         mov        rax, rbp
000000000000e046         jne        loc_e1b7

000000000000e04c         add        rsp, 0x38
000000000000e050         pop        rbx
000000000000e051         pop        rbp
000000000000e052         pop        r12
000000000000e054         pop        r13
000000000000e056         pop        r14
000000000000e058         pop        r15
000000000000e05a         ret
                        ; endp
000000000000e05b         align      32

                     loc_e060:
000000000000e060         mov        rax, qword [r14]                            ; CODE XREF=merge_state_with_log+72
000000000000e063         test       rax, rax
000000000000e066         je         loc_e148

000000000000e06c         test       rdx, rdx
000000000000e06f         mov        rax, qword [rax+0x50]
000000000000e073         je         loc_e100

000000000000e079         mov        r14, qword [rdx+0x50]
000000000000e07d         lea        rdi, qword [rsp+0x68+var_58]
000000000000e082         mov        rdx, rax
000000000000e085         mov        qword [rsp+0x68+var_68], rdi
000000000000e089         mov        rsi, r14
000000000000e08c         call       re_node_set_init_union                      ; re_node_set_init_union
000000000000e091         test       eax, eax
000000000000e093         mov        dword [r13], eax
000000000000e097         jne        loc_e1b0

000000000000e09d         mov        rax, qword [rbx+0x48]
000000000000e0a1         mov        edx, dword [rbx+0xa0]
000000000000e0a7         mov        rdi, rbx
000000000000e0aa         lea        rsi, qword [rax-1]
000000000000e0ae         call       re_string_context_at                        ; re_string_context_at
000000000000e0b3         mov        r8, qword [rbx+0xb8]
000000000000e0ba         mov        rdx, qword [rsp+0x68+var_68]
000000000000e0be         mov        ecx, eax
000000000000e0c0         mov        rsi, r15
000000000000e0c3         mov        rdi, r13
000000000000e0c6         add        r8, rbp
000000000000e0c9         mov        qword [rsp+0x68+var_60], r8
000000000000e0ce         call       re_acquire_state_context                    ; re_acquire_state_context
000000000000e0d3         mov        r8, qword [rsp+0x68+var_60]
000000000000e0d8         test       r14, r14
000000000000e0db         mov        rbp, rax
000000000000e0de         mov        qword [r8], rax
000000000000e0e1         je         loc_e027

000000000000e0e7         mov        rdi, qword [rsp+0x68+var_48]                ; argument "__ptr" for method j_free
000000000000e0ec         call       j_free                                      ; free
000000000000e0f1         jmp        loc_e027
000000000000e0f6         align      256

                     loc_e100:
000000000000e100         movdqu     xmm0, xmmword [rax]                         ; CODE XREF=merge_state_with_log+163
000000000000e104         mov        rdi, rbx
000000000000e107         mov        edx, dword [rsi+0xa0]
000000000000e10d         lea        rsi, qword [r12-1]
000000000000e112         movaps     xmmword [rsp+0x68+var_58], xmm0
000000000000e117         mov        rax, qword [rax+0x10]
000000000000e11b         mov        qword [rsp+0x68+var_48], rax
000000000000e120         call       re_string_context_at                        ; re_string_context_at
000000000000e125         lea        rdx, qword [rsp+0x68+var_58]
000000000000e12a         mov        ecx, eax
000000000000e12c         mov        rsi, r15
000000000000e12f         mov        rdi, r13
000000000000e132         call       re_acquire_state_context                    ; re_acquire_state_context
000000000000e137         mov        rbp, rax
000000000000e13a         mov        qword [r14], rax
000000000000e13d         jmp        loc_e027
000000000000e142         align      8

                     loc_e148:
000000000000e148         mov        qword [r14], rdx                            ; CODE XREF=merge_state_with_log+150
000000000000e14b         mov        rbp, rdx
000000000000e14e         jmp        loc_e027
000000000000e153         align      8

                     loc_e158:
000000000000e158         test       rbp, rbp                                    ; CODE XREF=merge_state_with_log+95
000000000000e15b         je         loc_e1b0

000000000000e15d         lea        r14, qword [rbp+0x10]
000000000000e161         lea        r15, qword [rbp+0x18]
000000000000e165         mov        rcx, r12
000000000000e168         mov        rdi, rbx
000000000000e16b         mov        rdx, r15
000000000000e16e         mov        rsi, r14
000000000000e171         call       check_subexp_matching_top.isra.18           ; check_subexp_matching_top.isra.18
000000000000e176         test       eax, eax
000000000000e178         mov        dword [r13], eax
000000000000e17c         jne        loc_e1b0

000000000000e17e         test       byte [rbp+0x68], 0x40
000000000000e182         je         loc_e035

000000000000e188         mov        rdx, r15
000000000000e18b         mov        rsi, r14
000000000000e18e         mov        rdi, rbx
000000000000e191         call       transit_state_bkref.isra.34                 ; transit_state_bkref.isra.34
000000000000e196         test       eax, eax
000000000000e198         mov        dword [r13], eax
000000000000e19c         jne        loc_e1b0

000000000000e19e         mov        rax, qword [rbx+0xb8]
000000000000e1a5         mov        rbp, qword [rax+r12*8]
000000000000e1a9         jmp        loc_e035
000000000000e1ae         align      16

                     loc_e1b0:
000000000000e1b0         xor        ebp, ebp                                    ; CODE XREF=merge_state_with_log+199, merge_state_with_log+395, merge_state_with_log+428, merge_state_with_log+460
000000000000e1b2         jmp        loc_e035

                     loc_e1b7:
000000000000e1b7         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=merge_state_with_log+118
                        ; endp
000000000000e1bc         align      64                                          ; End of unwind block (FDE at 0x1818c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_6C: int32_t, -108
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152


                     sift_states_backward:
000000000000e1c0         push       r15                                         ; Begin of unwind block (FDE at 0x181d8), CODE XREF=re_search_internal+2510, re_search_internal+4661, update_cur_sifted_state+1785
000000000000e1c2         push       r14
000000000000e1c4         mov        r14, rdi
000000000000e1c7         push       r13
000000000000e1c9         push       r12
000000000000e1cb         mov        r13, rsi
000000000000e1ce         push       rbp
000000000000e1cf         push       rbx
000000000000e1d0         sub        rsp, 0x68
000000000000e1d4         mov        r15, qword [rsi+0x18]
000000000000e1d8         mov        rbx, qword [rsi+0x10]
000000000000e1dc         mov        qword [rsp+0x98+var_98], rdi
000000000000e1e0         mov        edi, 0x8                                    ; argument "__size" for method j_malloc
000000000000e1e5         mov        qword [rsp+0x98+var_58], 0x1
000000000000e1ee         mov        rax, qword [fs:0x28]
000000000000e1f7         mov        qword [rsp+0x98+var_40], rax
000000000000e1fc         xor        eax, eax
000000000000e1fe         mov        qword [rsp+0x98+var_50], 0x1
000000000000e207         call       j_malloc                                    ; malloc
000000000000e20c         test       rax, rax
000000000000e20f         mov        qword [rsp+0x98+var_48], rax
000000000000e214         je         loc_e4f4

000000000000e21a         lea        rcx, qword [rsp+0x98+var_58]
000000000000e21f         mov        qword [rax], rbx
000000000000e222         mov        rdx, r15
000000000000e225         mov        rsi, r13
000000000000e228         mov        rdi, r14
000000000000e22b         mov        qword [rsp+0x98+var_88], rcx
000000000000e230         call       update_cur_sifted_state                     ; update_cur_sifted_state
000000000000e235         test       eax, eax
000000000000e237         jne        loc_e4c5

000000000000e23d         lea        rax, qword [r15*8]
000000000000e245         test       r15, r15
000000000000e248         mov        dword [rsp+0x98+var_6C], 0x0
000000000000e250         mov        qword [rsp+0x98+var_90], rax
000000000000e255         lea        rax, qword [r13+0x30]
000000000000e259         mov        qword [rsp+0x98+var_60], rax
000000000000e25e         jle        loc_e467

                     loc_e264:
000000000000e264         mov        rdi, qword [r13]                            ; CODE XREF=sift_states_backward+673
000000000000e268         mov        rax, qword [rsp+0x98+var_90]
000000000000e26d         cmp        qword [rdi+rax], 0x0
000000000000e272         je         loc_e488

000000000000e278         mov        rax, qword [rsp+0x98+var_98]
000000000000e27c         mov        dword [rsp+0x98+var_6C], 0x0
000000000000e284         mov        ecx, dword [rsp+0x98+var_6C]
000000000000e288         cmp        dword [rax+0xe0], ecx
000000000000e28e         jl         loc_e4a1

                     loc_e294:
000000000000e294         mov        rbx, qword [rsp+0x98+var_98]                ; CODE XREF=sift_states_backward+731
000000000000e298         mov        rdi, qword [rsp+0x98+var_90]
000000000000e29d         sub        r15, 0x1
000000000000e2a1         mov        qword [rsp+0x98+var_50], 0x0
000000000000e2aa         mov        rax, qword [rbx+0xb8]
000000000000e2b1         mov        r12, qword [rax+rdi-8]
000000000000e2b6         test       r12, r12
000000000000e2b9         je         loc_e440

000000000000e2bf         cmp        qword [r12+0x28], 0x0
000000000000e2c5         mov        r14, qword [rbx+0x98]
000000000000e2cc         jle        loc_e440

000000000000e2d2         xor        ebx, ebx
000000000000e2d4         jmp        loc_e37b
000000000000e2d9         align      32

                     loc_e2e0:
000000000000e2e0         mov        rdi, qword [rsp+0x98+var_98]                ; CODE XREF=sift_states_backward+469, sift_states_backward+625, sift_states_backward+700
000000000000e2e4         mov        rdx, r15
000000000000e2e7         call       check_node_accept                           ; check_node_accept
000000000000e2ec         test       al, al
000000000000e2ee         je         loc_e36c

000000000000e2f0         mov        rax, qword [r13]
000000000000e2f4         mov        rcx, qword [rsp+0x98+var_90]
000000000000e2f9         mov        rax, qword [rax+rcx]
000000000000e2fd         test       rax, rax
000000000000e300         je         loc_e36c

000000000000e302         mov        rdx, qword [r14+0x18]
000000000000e306         mov        rdi, qword [rax+0x10]
000000000000e30a         lea        rsi, qword [rax+0x18]
000000000000e30e         mov        rdx, qword [rdx+rbp*8]
000000000000e312         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000e317         test       rax, rax
000000000000e31a         je         loc_e36c

000000000000e31c         mov        r10d, 0x1

                     loc_e322:
000000000000e322         cmp        qword [r13+0x28], 0x0                       ; CODE XREF=sift_states_backward+555, sift_states_backward+608, loc_e470
000000000000e327         je         loc_e357

000000000000e329         mov        rax, qword [r14+0x18]
000000000000e32d         sub        rsp, 0x8
000000000000e331         lea        rsi, qword [r13+0x28]
000000000000e335         lea        r8, qword [r10+r15]
000000000000e339         mov        r9, rbp
000000000000e33c         mov        rcx, qword [rax+rbp*8]
000000000000e340         push       r15
000000000000e342         mov        rdx, qword [rsp+0xa8+var_60]
000000000000e347         mov        rdi, qword [rsp+0xa8+var_98]
000000000000e34c         call       check_dst_limits.isra.13                    ; check_dst_limits.isra.13
000000000000e351         test       al, al
000000000000e353         pop        rdx
000000000000e354         pop        rcx
000000000000e355         jne        loc_e36c

                     loc_e357:
000000000000e357         mov        rdi, qword [rsp+0x98+var_88]                ; CODE XREF=sift_states_backward+359
000000000000e35c         mov        rsi, rbp
000000000000e35f         call       re_node_set_insert                          ; re_node_set_insert
000000000000e364         test       al, al
000000000000e366         je         loc_e4c0

                     loc_e36c:
000000000000e36c         add        rbx, 0x1                                    ; CODE XREF=sift_states_backward+302, sift_states_backward+320, sift_states_backward+346, sift_states_backward+405
000000000000e370         cmp        rbx, qword [r12+0x28]
000000000000e375         jge        loc_e440

                     loc_e37b:
000000000000e37b         mov        rax, qword [r12+0x30]                       ; CODE XREF=sift_states_backward+276
000000000000e380         mov        rsi, qword [r14]
000000000000e383         mov        rbp, qword [rax+rbx*8]
000000000000e387         mov        r9, rbp
000000000000e38a         shl        r9, 0x4
000000000000e38e         add        rsi, r9
000000000000e391         test       byte [rsi+0xa], 0x10
000000000000e395         je         loc_e2e0

000000000000e39b         mov        rcx, qword [rsp+0x98+var_98]
000000000000e39f         mov        rax, qword [r13+0x18]
000000000000e3a3         mov        r8, r15
000000000000e3a6         mov        rdx, rbp
000000000000e3a9         mov        qword [rsp+0x98+var_80], r9
000000000000e3ae         mov        r11, qword [rcx+0x98]
000000000000e3b5         mov        qword [rsp+0x98+var_78], rax
000000000000e3ba         mov        rdi, qword [r11]
000000000000e3bd         lea        rsi, qword [r11+0xd8]
000000000000e3c4         mov        qword [rsp+0x98+var_68], r11
000000000000e3c9         call       check_node_accept_bytes.isra.31             ; check_node_accept_bytes.isra.31
000000000000e3ce         movsxd     r10, eax
000000000000e3d1         mov        r9, qword [rsp+0x98+var_80]
000000000000e3d6         cmp        r10d, 0x0
000000000000e3da         jle        loc_e470

000000000000e3e0         movsxd     rax, r10d
000000000000e3e3         add        rax, r15
000000000000e3e6         cmp        qword [rsp+0x98+var_78], rax
000000000000e3eb         jl         loc_e322

000000000000e3f1         mov        rdx, qword [r13]
000000000000e3f5         mov        r11, qword [rsp+0x98+var_68]
000000000000e3fa         mov        rax, qword [rdx+rax*8]
000000000000e3fe         test       rax, rax
000000000000e401         je         loc_e476

000000000000e403         mov        rdx, qword [r11+0x18]
000000000000e407         mov        rdi, qword [rax+0x10]
000000000000e40b         lea        rsi, qword [rax+0x18]
000000000000e40f         mov        qword [rsp+0x98+var_80], r9
000000000000e414         mov        rdx, qword [rdx+rbp*8]
000000000000e418         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000e41d         test       rax, rax
000000000000e420         jne        loc_e322

000000000000e426         mov        r9, qword [rsp+0x98+var_80]
000000000000e42b         mov        rsi, qword [r14]
000000000000e42e         add        rsi, r9
000000000000e431         jmp        loc_e2e0
000000000000e436         align      64

                     loc_e440:
000000000000e440         mov        rcx, qword [rsp+0x98+var_88]                ; CODE XREF=sift_states_backward+249, sift_states_backward+268, sift_states_backward+437
000000000000e445         mov        rdi, qword [rsp+0x98+var_98]
000000000000e449         mov        rdx, r15
000000000000e44c         mov        rsi, r13
000000000000e44f         call       update_cur_sifted_state                     ; update_cur_sifted_state
000000000000e454         test       eax, eax
000000000000e456         jne        loc_e4c5

000000000000e458         sub        qword [rsp+0x98+var_90], 0x8
000000000000e45e         test       r15, r15
000000000000e461         jne        loc_e264

                     loc_e467:
000000000000e467         xor        eax, eax                                    ; CODE XREF=sift_states_backward+158
000000000000e469         jmp        loc_e4c5
000000000000e46b         align      16

                     loc_e470:
000000000000e470         jne        loc_e322                                    ; CODE XREF=sift_states_backward+538

                     loc_e476:
000000000000e476         mov        rsi, qword [r14]                            ; CODE XREF=sift_states_backward+577
000000000000e479         add        rsi, r9
000000000000e47c         jmp        loc_e2e0
000000000000e481         align      8

                     loc_e488:
000000000000e488         mov        rax, qword [rsp+0x98+var_98]                ; CODE XREF=sift_states_backward+178
000000000000e48c         add        dword [rsp+0x98+var_6C], 0x1
000000000000e491         mov        ecx, dword [rsp+0x98+var_6C]
000000000000e495         cmp        dword [rax+0xe0], ecx
000000000000e49b         jge        loc_e294

                     loc_e4a1:
000000000000e4a1         mov        rdx, qword [rsp+0x98+var_90]                ; argument "__n" for method j_memset, CODE XREF=sift_states_backward+206
000000000000e4a6         xor        esi, esi                                    ; argument "__c" for method j_memset
000000000000e4a8         call       j_memset                                    ; memset
000000000000e4ad         mov        rdi, qword [rsp+0x98+var_48]                ; argument "__ptr" for method j_free
000000000000e4b2         call       j_free                                      ; free
000000000000e4b7         xor        eax, eax
000000000000e4b9         jmp        loc_e4d5
000000000000e4bb         align      64

                     loc_e4c0:
000000000000e4c0         mov        eax, 0xc                                    ; CODE XREF=sift_states_backward+422

                     loc_e4c5:
000000000000e4c5         mov        rdi, qword [rsp+0x98+var_48]                ; argument "__ptr" for method j_free, CODE XREF=sift_states_backward+119, sift_states_backward+662, sift_states_backward+681
000000000000e4ca         mov        dword [rsp+0x98+var_98], eax
000000000000e4cd         call       j_free                                      ; free
000000000000e4d2         mov        eax, dword [rsp+0x98+var_98]

                     loc_e4d5:
000000000000e4d5         mov        rdx, qword [rsp+0x98+var_40]                ; CODE XREF=sift_states_backward+761, sift_states_backward+825
000000000000e4da         xor        rdx, qword [fs:0x28]
000000000000e4e3         jne        loc_e4fb

000000000000e4e5         add        rsp, 0x68
000000000000e4e9         pop        rbx
000000000000e4ea         pop        rbp
000000000000e4eb         pop        r12
000000000000e4ed         pop        r13
000000000000e4ef         pop        r14
000000000000e4f1         pop        r15
000000000000e4f3         ret
                        ; endp

                     loc_e4f4:
000000000000e4f4         mov        eax, 0xc                                    ; CODE XREF=sift_states_backward+84
000000000000e4f9         jmp        loc_e4d5

                     loc_e4fb:
000000000000e4fb         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=sift_states_backward+803
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_0: int, 8
        ;    var_40: int64_t, -64
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_68: int32_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int32_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int32_t, -184
        ;    var_BA: int8_t, -186
        ;    var_BB: int8_t, -187
        ;    var_BC: int8_t, -188
        ;    var_BD: int8_t, -189
        ;    var_BE: int8_t, -190
        ;    var_BF: int8_t, -191
        ;    var_C0: int8_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208
        ;    var_D8: int32_t, -216
        ;    var_E0: int64_t, -224
        ;    var_E8: int64_t, -232
        ;    var_F0: int64_t, -240
        ;    var_F8: int64_t, -248
        ;    var_100: int64_t, -256
        ;    var_108: int64_t, -264
        ;    var_110: int64_t, -272
        ;    var_118: int64_t, -280
        ;    var_120: int64_t, -288
        ;    var_130: int64_t, -304
        ;    var_138: int64_t, -312
        ;    var_140: int64_t, -320
        ;    var_148: int64_t, -328
        ;    var_158: int64_t, -344
        ;    var_168: -360
        ;    var_170: int64_t, -368
        ;    var_178: int64_t, -376
        ;    var_180: int64_t, -384
        ;    var_188: int64_t, -392
        ;    var_190: int64_t, -400
        ;    var_194: int32_t, -404
        ;    var_198: int32_t, -408
        ;    var_199: int8_t, -409
        ;    var_19A: int8_t, -410
        ;    var_1A0: int32_t, -416
        ;    var_1A8: int64_t, -424
        ;    var_1B0: int64_t, -432
        ;    var_1B8: int64_t, -440
        ;    var_1BC: int32_t, -444
        ;    var_1C0: int32_t, -448
        ;    var_1C8: int64_t, -456
        ;    var_1D0: int64_t, -464
        ;    var_1D8: int64_t, -472
        ;    var_1E0: int64_t, -480
        ;    var_1E8: int64_t, -488
        ;    var_1F0: int64_t, -496
        ;    var_1F8: int64_t, -504
        ;    var_200: int64_t, -512
        ;    var_208: int64_t, -520
        ;    var_20C: int32_t, -524
        ;    var_210: int32_t, -528
        ;    var_218: int64_t, -536
        ;    var_220: int64_t, -544
        ;    var_228: int64_t, -552
        ;    var_230: int64_t, -560
        ;    var_238: int64_t, -568
        ;    var_240: int64_t, -576
        ;    var_248: int64_t, -584
        ;    var_250: int64_t, -592
        ;    var_258: int64_t, -600
        ;    var_260: int64_t, -608
        ;    var_268: int64_t, -616


                     re_search_internal:
000000000000e500         push       r15                                         ; End of unwind block (FDE at 0x181d8), Begin of unwind block (FDE at 0x18238), CODE XREF=re_search_stub+266, rpl_regexec+88
000000000000e502         push       r14
000000000000e504         push       r13
000000000000e506         push       r12
000000000000e508         mov        r13, r9
000000000000e50b         push       rbp
000000000000e50c         push       rbx
000000000000e50d         mov        rbp, rcx
000000000000e510         mov        ecx, 0x20
000000000000e515         mov        r12, r8
000000000000e518         sub        rsp, aLib64ldlinuxx8                        ; "/lib64/ld-linux-x86-64.so.2"
000000000000e51f         mov        rbx, qword [rdi]
000000000000e522         mov        rax, qword [rsp+0x268+arg_8]
000000000000e52a         mov        qword [rsp+0x268+var_220], rdi
000000000000e52f         mov        qword [rsp+0x268+var_1F0], rsi
000000000000e534         mov        rsi, rdi
000000000000e537         lea        rdi, qword [rsp+0x268+var_148]
000000000000e53f         mov        qword [rsp+0x268+var_1E0], rdx
000000000000e547         mov        qword [rsp+0x268+var_230], rbx
000000000000e54c         mov        qword [rsp+0x268+var_1B0], rax
000000000000e554         mov        qword [rsp+0x268+var_268], rdi
000000000000e558         mov        rax, qword [fs:0x28]
000000000000e561         mov        qword [rsp+0x268+var_40], rax
000000000000e569         xor        eax, eax
000000000000e56b         rep stosq  qword [rdi], rax
000000000000e56e         mov        rdi, qword [rsi+0x20]
000000000000e572         mov        qword [rsp+0x268+var_B0], rbx
000000000000e57a         test       rdi, rdi
000000000000e57d         mov        qword [rsp+0x268+var_200], rdi
000000000000e582         je         loc_e5a6

000000000000e584         movzx      edx, byte [rsi+0x38]
000000000000e588         test       dl, 0x8
000000000000e58b         je         loc_ea20

000000000000e591         cmp        rbp, r8
000000000000e594         je         loc_ea20

000000000000e59a         and        edx, 0x1
000000000000e59d         cmove      rax, rdi
000000000000e5a1         mov        qword [rsp+0x268+var_200], rax

                     loc_e5a6:
000000000000e5a6         mov        rax, qword [rsp+0x268+var_220]              ; CODE XREF=re_search_internal+130, re_search_internal+1321
000000000000e5ab         mov        qword [rsp+0x268+var_1D0], 0x0
000000000000e5b7         mov        rax, qword [rax+0x30]
000000000000e5bb         cmp        rax, qword [rsp+0x268+arg_0]
000000000000e5c3         jae        loc_e5e4

000000000000e5c5         mov        rcx, qword [rsp+0x268+arg_0]
000000000000e5cd         lea        rdx, qword [rcx-1]
000000000000e5d1         sub        rdx, rax
000000000000e5d4         sub        qword [rsp+0x268+arg_0], rdx
000000000000e5dc         mov        qword [rsp+0x268+var_1D0], rdx

                     loc_e5e4:
000000000000e5e4         mov        rsi, qword [rsp+0x268+var_220]              ; CODE XREF=re_search_internal+195
000000000000e5e9         cmp        qword [rsi+0x10], 0x0
000000000000e5ee         je         loc_f480

000000000000e5f4         mov        rdi, qword [rsp+0x268+var_230]
000000000000e5f9         mov        rax, qword [rdi+0x48]
000000000000e5fd         test       rax, rax
000000000000e600         je         loc_f480

000000000000e606         mov        rdx, qword [rdi+0x50]
000000000000e60a         test       rdx, rdx
000000000000e60d         je         loc_f480

000000000000e613         mov        rcx, qword [rdi+0x58]
000000000000e617         test       rcx, rcx
000000000000e61a         je         loc_f480

000000000000e620         cmp        qword [rdi+0x60], 0x0
000000000000e625         je         loc_f480

000000000000e62b         cmp        qword [rax+0x10], 0x0
000000000000e630         jne        loc_e668

000000000000e632         cmp        qword [rdx+0x10], 0x0
000000000000e637         jne        loc_e668

000000000000e639         cmp        qword [rcx+0x10], 0x0
000000000000e63e         je         loc_e646

000000000000e640         cmp        byte [rsi+0x38], 0x0
000000000000e644         js         loc_e668

                     loc_e646:
000000000000e646         test       rbp, rbp                                    ; CODE XREF=re_search_internal+318
000000000000e649         je         loc_e65c

000000000000e64b         test       r12, r12
000000000000e64e         mov        dword [rsp+0x268+var_20C], 0x1
000000000000e656         jne        loc_f079

                     loc_e65c:
000000000000e65c         xor        r12d, r12d                                  ; CODE XREF=re_search_internal+329
000000000000e65f         xor        ebp, ebp
000000000000e661         nop        dword [rax]

                     loc_e668:
000000000000e668         cmp        qword [rsp+0x268+arg_0], 0x0                ; CODE XREF=re_search_internal+304, re_search_internal+311, re_search_internal+324
000000000000e671         mov        dword [rsp+0x268+var_210], 0x1
000000000000e679         je         loc_ea00

                     loc_e67f:
000000000000e67f         mov        r11, qword [rsp+0x268+var_230]              ; CODE XREF=re_search_internal+1303
000000000000e684         mov        rax, qword [rsp+0x268+var_220]
000000000000e689         mov        rdi, qword [rsp+0x268+var_1E0]
000000000000e691         mov        rsi, qword [r11+0x10]
000000000000e695         mov        rbx, qword [rax+0x28]
000000000000e699         mov        edx, dword [r11+0xb4]
000000000000e6a0         mov        rax, qword [rax+0x18]
000000000000e6a4         mov        qword [rsp+0x268+var_F0], rdi
000000000000e6ac         mov        qword [rsp+0x268+var_F8], rdi
000000000000e6b4         mov        qword [rsp+0x268+var_260], rsi
000000000000e6b9         lea        rsi, qword [rsi+1]
000000000000e6bd         mov        qword [rsp+0x268+var_1B8], rbx
000000000000e6c5         movsxd     rcx, edx
000000000000e6c8         shr        rax, 0x16
000000000000e6cc         mov        qword [rsp+0x268+var_D0], rbx
000000000000e6d4         and        eax, 0x1
000000000000e6d7         cmp        rsi, rcx
000000000000e6da         mov        dword [rsp+0x268+var_B8], edx
000000000000e6e1         cmovl      rsi, rcx
000000000000e6e5         lea        rcx, qword [rdi+1]
000000000000e6e9         mov        byte [rsp+0x268+var_C0], al
000000000000e6f0         mov        qword [rsp+0x268+var_E0], rdi
000000000000e6f8         mov        qword [rsp+0x268+var_E8], rdi
000000000000e700         cmp        rsi, rcx
000000000000e703         mov        rdi, qword [rsp+0x268+var_268]
000000000000e707         cmovg      rsi, rcx
000000000000e70b         test       rbx, rbx
000000000000e70e         mov        rcx, qword [rsp+0x268+var_1F0]
000000000000e713         setne      bl
000000000000e716         or         eax, ebx
000000000000e718         mov        byte [rsp+0x268+var_BD], al
000000000000e71f         movzx      eax, byte [r11+0xb0]
000000000000e727         mov        qword [rsp+0x268+var_148], rcx
000000000000e72f         mov        edx, eax
000000000000e731         shr        al, 0x3
000000000000e734         shr        dl, 0x2
000000000000e737         and        eax, 0x1
000000000000e73a         and        edx, 0x1
000000000000e73d         mov        byte [rsp+0x268+var_BE], al
000000000000e744         mov        byte [rsp+0x268+var_BF], dl
000000000000e74b         call       re_string_realloc_buffers                   ; re_string_realloc_buffers
000000000000e750         test       eax, eax
000000000000e752         mov        dword [rsp+0x268+var_20C], eax
000000000000e756         jne        loc_f050

000000000000e75c         mov        rdi, qword [rsp+0x268+var_230]
000000000000e761         lea        rax, qword [rdi+0xb8]
000000000000e768         mov        qword [rsp+0x268+var_C8], rax
000000000000e770         movzx      eax, byte [rdi+0xb0]
000000000000e777         mov        byte [rsp+0x268+var_260], al
000000000000e77b         shr        al, 0x4
000000000000e77e         and        eax, 0x1
000000000000e781         cmp        byte [rsp+0x268+var_BD], 0x0
000000000000e789         mov        byte [rsp+0x268+var_BA], al
000000000000e790         jne        loc_e7b5

000000000000e792         mov        rsi, qword [rsp+0x268+var_230]
000000000000e797         mov        rax, qword [rsp+0x268+var_1F0]
000000000000e79c         cmp        dword [rsi+0xb4], 0x1
000000000000e7a3         mov        qword [rsp+0x268+var_140], rax
000000000000e7ab         mov        rax, qword [rsp+0x268+var_1E0]
000000000000e7b3         jle        loc_e7b7

                     loc_e7b5:
000000000000e7b5         xor        eax, eax                                    ; CODE XREF=re_search_internal+656

                     loc_e7b7:
000000000000e7b7         mov        qword [rsp+0x268+var_118], rax              ; CODE XREF=re_search_internal+691
000000000000e7bf         mov        qword [rsp+0x268+var_110], rax
000000000000e7c7         mov        rax, qword [rsp+0x268+var_220]
000000000000e7cc         mov        qword [rsp+0x268+var_E0], r13
000000000000e7d4         mov        qword [rsp+0x268+var_E8], r13
000000000000e7dc         movzx      eax, byte [rax+0x38]
000000000000e7e0         mov        byte [rsp+0x268+var_260], al
000000000000e7e4         shr        al, 0x7
000000000000e7e7         mov        byte [rsp+0x268+var_BB], al
000000000000e7ee         mov        rax, qword [rsp+0x268+var_230]
000000000000e7f3         mov        r14, qword [rax+0x98]
000000000000e7fa         mov        eax, dword [rsp+0x268+arg_10]
000000000000e801         mov        qword [rsp+0x268+var_A0], 0xffffffffffffffff
000000000000e80d         lea        r13, qword [r14+r14]
000000000000e811         mov        dword [rsp+0x268+var_A8], eax
000000000000e818         test       r13, r13
000000000000e81b         jle        loc_e86f

000000000000e81d         movabs     rax, 0x666666666666666
000000000000e827         cmp        r13, rax
000000000000e82a         jg         loc_f570

000000000000e830         lea        rdi, qword [r13+r14*8]
000000000000e835         shl        rdi, 0x3                                    ; argument "__size" for method j_malloc
000000000000e839         call       j_malloc                                    ; malloc
000000000000e83e         mov        rdi, r14
000000000000e841         mov        r15, rax
000000000000e844         mov        qword [rsp+0x268+var_70], rax
000000000000e84c         shl        rdi, 0x4                                    ; argument "__size" for method j_malloc
000000000000e850         call       j_malloc                                    ; malloc
000000000000e855         test       rax, rax
000000000000e858         mov        qword [rsp+0x268+var_50], rax
000000000000e860         je         loc_f570

000000000000e866         test       r15, r15
000000000000e869         je         loc_f570

                     loc_e86f:
000000000000e86f         cmp        qword [rsp+0x268+arg_0], 0x1                ; CODE XREF=re_search_internal+795
000000000000e878         mov        qword [rsp+0x268+var_78], r13
000000000000e880         mov        dword [rsp+0x268+var_68], 0x1
000000000000e88b         mov        qword [rsp+0x268+var_58], r13
000000000000e893         jbe        loc_f9b8

                     loc_e899:
000000000000e899         mov        rax, qword [rsp+0x268+var_108]              ; CODE XREF=re_search_internal+5316
000000000000e8a1         movabs     rdx, 0x1ffffffffffffffe
000000000000e8ab         cmp        rax, rdx
000000000000e8ae         ja         loc_f570

000000000000e8b4         lea        rdi, qword [0x8+rax*8]                      ; argument "__size" for method j_malloc
000000000000e8bc         call       j_malloc                                    ; malloc
000000000000e8c1         test       rax, rax
000000000000e8c4         mov        rdi, rax
000000000000e8c7         mov        qword [rsp+0x268+var_90], rax
000000000000e8cf         je         loc_f5c0

                     loc_e8d5:
000000000000e8d5         mov        eax, dword [rsp+0x268+arg_10]               ; CODE XREF=re_search_internal+5334
000000000000e8dc         mov        qword [rsp+0x268+var_190], rbp
000000000000e8e4         and        eax, 0x1
000000000000e8e7         cmp        eax, 0x1
000000000000e8ea         sbb        eax, eax
000000000000e8ec         and        eax, 0x2
000000000000e8ef         add        eax, 0x4
000000000000e8f2         mov        dword [rsp+0x268+var_D8], eax
000000000000e8f9         xor        eax, eax
000000000000e8fb         cmp        rbp, r12
000000000000e8fe         setle      al
000000000000e901         lea        eax, dword [rax+rax-1]
000000000000e905         mov        dword [rsp+0x268+var_1BC], eax
000000000000e90c         mov        rax, r12
000000000000e90f         cmovle     rax, rbp
000000000000e913         mov        qword [rsp+0x268+var_1D8], rax
000000000000e91b         mov        rax, r12
000000000000e91e         cmovge     rax, rbp
000000000000e922         cmp        qword [rsp+0x268+var_200], 0x0
000000000000e928         mov        qword [rsp+0x268+var_1F8], rax
000000000000e92d         mov        rax, qword [rsp+0x268+var_230]
000000000000e932         mov        esi, dword [rax+0xb4]
000000000000e938         mov        eax, 0x8
000000000000e93d         mov        dword [rsp+0x268+var_1A0], esi
000000000000e944         je         loc_e97f

000000000000e946         cmp        esi, 0x1
000000000000e949         mov        ecx, 0x4
000000000000e94e         je         loc_e96e

000000000000e950         mov        rax, qword [rsp+0x268+var_220]
000000000000e955         test       byte [rax+0x1a], 0x40
000000000000e959         jne        loc_f6de

000000000000e95f         cmp        qword [rsp+0x268+var_1B8], 0x0
000000000000e968         jne        loc_f6de

                     loc_e96e:
000000000000e96e         xor        edx, edx                                    ; CODE XREF=re_search_internal+1102, re_search_internal+4576
000000000000e970         cmp        rbp, r12
000000000000e973         movzx      eax, bl
000000000000e976         setle      dl
000000000000e979         or         eax, ecx
000000000000e97b         add        edx, edx
000000000000e97d         or         eax, edx

                     loc_e97f:
000000000000e97f         cmp        rbp, qword [rsp+0x268+var_1F8]              ; CODE XREF=re_search_internal+1092
000000000000e984         setg       cl
000000000000e987         cmp        rbp, qword [rsp+0x268+var_1D8]
000000000000e98f         setl       dl
000000000000e992         or         cl, dl
000000000000e994         jne        loc_f469

000000000000e99a         lea        rcx, qword [rsp+0x268+var_190]
000000000000e9a2         cmp        rbp, r12
000000000000e9a5         mov        edx, 0x0
000000000000e9aa         cmovle     rdx, rcx
000000000000e9ae         test       rdx, rdx
000000000000e9b1         mov        qword [rsp+0x268+var_1A8], rdx
000000000000e9b9         setne      byte [rsp+0x268+var_199]
000000000000e9c1         sub        eax, 0x4
000000000000e9c4         mov        dword [rsp+0x268+var_1C0], eax
000000000000e9cb         lea        rax, qword [rsp+0x268+var_198]
000000000000e9d3         mov        qword [rsp+0x268+var_240], rax

                     loc_e9d8:
000000000000e9d8         mov        eax, dword [rsp+0x268+var_1C0]              ; CODE XREF=re_search_internal+3939
000000000000e9df         cmp        eax, 0x4
000000000000e9e2         ja         loc_f5cd

000000000000e9e8         lea        rcx, qword [switch_table_15980]             ; switch_table_15980
000000000000e9ef         movsxd     rax, dword [rcx+rax*4]
000000000000e9f3         add        rax, rcx
000000000000e9f6         jmp        rax                                         ; switch statement using table at 0x15980, with 5 cases, 0xea2e,0xead8,0xef52,0xefc4
000000000000e9f8         align      512

                     loc_ea00:
000000000000ea00         mov        rax, qword [rsp+0x268+var_230]              ; CODE XREF=re_search_internal+377
000000000000ea05         cmp        qword [rax+0x98], 0x0
000000000000ea0d         setne      al
000000000000ea10         movzx      eax, al
000000000000ea13         mov        dword [rsp+0x268+var_210], eax
000000000000ea17         jmp        loc_e67f
000000000000ea1c         align      32

                     loc_ea20:
000000000000ea20         mov        qword [rsp+0x268+var_200], 0x0              ; CODE XREF=re_search_internal+139, re_search_internal+148
000000000000ea29         jmp        loc_e5a6

                     loc_ea2e:
000000000000ea2e         cmp        qword [rsp+0x268+var_1F8], rbp              ; case 2, CODE XREF=re_search_internal+1270
000000000000ea33         jle        loc_ea8f

000000000000ea35         mov        rax, qword [rsp+0x268+var_1F0]
000000000000ea3a         mov        rdi, qword [rsp+0x268+var_200]
000000000000ea3f         movzx      edx, byte [rax+rbp]
000000000000ea43         lea        rax, qword [rbp+1]
000000000000ea47         cmp        byte [rdi+rdx], 0x0
000000000000ea4b         jne        loc_ead8

000000000000ea51         mov        rsi, qword [rsp+0x268+var_200]
000000000000ea56         mov        rcx, qword [rsp+0x268+var_1F8]
000000000000ea5b         mov        rdi, qword [rsp+0x268+var_1F0]
000000000000ea60         jmp        loc_ea7a
000000000000ea62         align      8

                     loc_ea68:
000000000000ea68         movzx      edx, byte [rdi+rax]                         ; CODE XREF=re_search_internal+1408
000000000000ea6c         lea        rax, qword [rax+1]
000000000000ea70         cmp        byte [rsi+rdx], 0x0
000000000000ea74         jne        loc_fc11

                     loc_ea7a:
000000000000ea7a         cmp        rcx, rax                                    ; CODE XREF=re_search_internal+1376
000000000000ea7d         mov        rbp, rax
000000000000ea80         jne        loc_ea68

                     loc_ea82:
000000000000ea82         mov        rax, qword [rsp+0x268+var_1F8]              ; CODE XREF=re_search_internal+2751
000000000000ea87         mov        qword [rsp+0x268+var_190], rax

                     loc_ea8f:
000000000000ea8f         cmp        qword [rsp+0x268+var_1F8], rbp              ; CODE XREF=re_search_internal+1331, re_search_internal+2647
000000000000ea94         jne        loc_ead8

000000000000ea96         xor        eax, eax
000000000000ea98         mov        rsi, qword [rsp+0x268+var_1F8]
000000000000ea9d         cmp        qword [rsp+0x268+var_1E0], rsi
000000000000eaa5         jle        loc_eab0

000000000000eaa7         mov        rax, qword [rsp+0x268+var_1F0]
000000000000eaac         movzx      eax, byte [rax+rsi]

                     loc_eab0:
000000000000eab0         mov        rsi, qword [rsp+0x268+var_1B8]              ; CODE XREF=re_search_internal+1445
000000000000eab8         test       rsi, rsi
000000000000eabb         je         loc_eac1

000000000000eabd         movzx      eax, byte [rsi+rax]

                     loc_eac1:
000000000000eac1         mov        rdi, qword [rsp+0x268+var_200]              ; CODE XREF=re_search_internal+1467
000000000000eac6         cmp        byte [rdi+rax], 0x0
000000000000eaca         je         loc_f469

000000000000ead0         mov        rbp, qword [rsp+0x268+var_1F8]
000000000000ead5         nop        dword [rax]

                     loc_ead8:
000000000000ead8         mov        edx, dword [rsp+0x268+arg_10]               ; case 4, CODE XREF=re_search_internal+1270, re_search_internal+1355, re_search_internal+1428, re_search_internal+2687, re_search_internal+2863, re_search_internal+2880, re_search_internal+4370, re_search_internal+5913
000000000000eadf         mov        rdi, qword [rsp+0x268+var_268]
000000000000eae3         mov        rsi, rbp
000000000000eae6         call       re_string_reconstruct                       ; re_string_reconstruct
000000000000eaeb         test       eax, eax
000000000000eaed         mov        dword [rsp+0x268+var_20C], eax
000000000000eaf1         jne        loc_f050

000000000000eaf7         cmp        dword [rsp+0x268+var_1A0], 0x1
000000000000eaff         je         loc_eb1d

000000000000eb01         cmp        qword [rsp+0x268+var_118], 0x0
000000000000eb0a         je         loc_eb1d

000000000000eb0c         mov        rax, qword [rsp+0x268+var_138]
000000000000eb14         cmp        dword [rax], 0xffffffff
000000000000eb17         je         loc_f441

                     loc_eb1d:
000000000000eb1d         mov        rbx, qword [rsp+0x268+var_B0]               ; CODE XREF=re_search_internal+1535, re_search_internal+1546
000000000000eb25         movzx      eax, byte [rsp+0x268+var_210]
000000000000eb2a         mov        dword [rsp+0x268+var_68], 0x0
000000000000eb35         mov        qword [rsp+0x268+var_80], 0x0
000000000000eb41         mov        qword [rsp+0x268+var_88], 0x0
000000000000eb4d         mov        dword [rsp+0x268+var_198], 0x0
000000000000eb58         mov        r14, qword [rbx+0x48]
000000000000eb5c         and        eax, 0x1
000000000000eb5f         mov        byte [rsp+0x268+var_19A], al
000000000000eb66         mov        rax, qword [rsp+0x268+var_100]
000000000000eb6e         cmp        byte [r14+0x68], 0x0
000000000000eb73         mov        qword [rsp+0x268+var_260], rax
000000000000eb78         js         loc_f4f0

                     loc_eb7e:
000000000000eb7e         mov        rax, qword [rsp+0x268+var_90]               ; CODE XREF=re_search_internal+4115, re_search_internal+4471, re_search_internal+5698
000000000000eb86         test       rax, rax
000000000000eb89         je         loc_eba2

000000000000eb8b         cmp        qword [rbx+0x98], 0x0
000000000000eb93         mov        rdi, qword [rsp+0x268+var_260]
000000000000eb98         mov        qword [rax+rdi*8], r14
000000000000eb9c         jne        loc_fa8b

                     loc_eba2:
000000000000eba2         movzx      eax, byte [rsp+0x268+var_199]               ; CODE XREF=re_search_internal+1673
000000000000ebaa         mov        byte [rsp+0x268+var_250], al
000000000000ebae         movzx      eax, byte [r14+0x68]

                     loc_ebb3:
000000000000ebb3         test       al, 0x10                                    ; CODE XREF=re_search_internal+5569
000000000000ebb5         mov        qword [rsp+0x268+var_248], 0xffffffffffffffff
000000000000ebbe         mov        qword [rsp+0x268+var_238], 0x0
000000000000ebc7         jne        loc_fa50

                     loc_ebcd:
000000000000ebcd         mov        rax, qword [rsp+0x268+var_1A8]              ; CODE XREF=re_search_internal+5494, re_search_internal+5604
000000000000ebd5         mov        r8, qword [rsp+0x268+var_100]
000000000000ebdd         mov        qword [rsp+0x268+var_218], rax
000000000000ebe2         lea        rax, qword [rsp+0x268+var_188]
000000000000ebea         mov        qword [rsp+0x268+var_208], rax
000000000000ebef         lea        rax, qword [rsp+0x268+var_194]
000000000000ebf7         mov        qword [rsp+0x268+var_1E8], rax
000000000000ebff         jmp        loc_ec5c
000000000000ec01         align      8

                     loc_ec08:
000000000000ec08         cmp        r14, r13                                    ; CODE XREF=re_search_internal+2023, re_search_internal+5395, re_search_internal+5411
000000000000ec0b         mov        r8, qword [rsp+0x268+var_100]
000000000000ec13         sete       al
000000000000ec16         and        byte [rsp+0x268+var_250], al
000000000000ec1a         movzx      eax, byte [r13+0x68]
000000000000ec1f         cmove      rbx, qword [rsp+0x268+var_260]
000000000000ec25         test       al, 0x10
000000000000ec27         mov        qword [rsp+0x268+var_260], rbx
000000000000ec2c         je         loc_ec59

000000000000ec2e         test       al, al
000000000000ec30         js         loc_f0f0

                     loc_ec36:
000000000000ec36         mov        eax, dword [rsp+0x268+var_210]              ; CODE XREF=re_search_internal+3095
000000000000ec3a         mov        qword [rsp+0x268+var_248], r8
000000000000ec3f         test       eax, eax
000000000000ec41         je         loc_ed66

000000000000ec47         mov        qword [rsp+0x268+var_238], 0x1
000000000000ec50         mov        qword [rsp+0x268+var_218], 0x0

                     loc_ec59:
000000000000ec59         mov        r14, r13                                    ; CODE XREF=re_search_internal+1836, re_search_internal+3089

                     loc_ec5c:
000000000000ec5c         cmp        qword [rsp+0x268+var_E0], r8                ; CODE XREF=re_search_internal+1791
000000000000ec64         jle        loc_ed54

000000000000ec6a         mov        rax, qword [rsp+0x268+var_108]
000000000000ec72         lea        rbx, qword [r8+1]
000000000000ec76         cmp        rbx, rax
000000000000ec79         jge        loc_f120

                     loc_ec7f:
000000000000ec7f         mov        rax, qword [rsp+0x268+var_118]              ; CODE XREF=re_search_internal+3112
000000000000ec87         cmp        rbx, rax
000000000000ec8a         jge        loc_f410

                     loc_ec90:
000000000000ec90         test       byte [r14+0x68], 0x20                       ; CODE XREF=re_search_internal+3864
000000000000ec95         jne        loc_f160

                     loc_ec9b:
000000000000ec9b         lea        rax, qword [r8+1]                           ; CODE XREF=re_search_internal+3158, re_search_internal+4006
000000000000ec9f         mov        qword [rsp+0x268+var_100], rax
000000000000eca7         mov        rax, qword [rsp+0x268+var_140]
000000000000ecaf         movzx      r13d, byte [rax+r8]

                     loc_ecb4:
000000000000ecb4         mov        rax, qword [r14+0x58]                       ; CODE XREF=re_search_internal+4247
000000000000ecb8         test       rax, rax
000000000000ecbb         je         loc_f3d0

000000000000ecc1         mov        r13, qword [rax+r13*8]

                     loc_ecc5:
000000000000ecc5         cmp        qword [rsp+0x268+var_90], 0x0               ; CODE XREF=re_search_internal+3849, re_search_internal+4021
000000000000ecce         je         loc_ece4

                     loc_ecd0:
000000000000ecd0         mov        rsi, qword [rsp+0x268+var_268]              ; CODE XREF=re_search_internal+4067
000000000000ecd4         mov        rdi, qword [rsp+0x268+var_240]
000000000000ecd9         mov        rdx, r13
000000000000ecdc         call       merge_state_with_log                        ; merge_state_with_log
000000000000ece1         mov        r13, rax

                     loc_ece4:
000000000000ece4         test       r13, r13                                    ; CODE XREF=re_search_internal+1998
000000000000ece7         jne        loc_ec08

000000000000eced         mov        ecx, dword [rsp+0x268+var_198]
000000000000ecf4         mov        rdi, qword [rsp+0x268+var_90]
000000000000ecfc         test       ecx, ecx
000000000000ecfe         jne        loc_f5c0

000000000000ed04         test       rdi, rdi
000000000000ed07         je         loc_ed54

000000000000ed09         movzx      eax, byte [rsp+0x268+var_19A]
000000000000ed11         xor        eax, 0x1
000000000000ed14         test       byte [rsp+0x268+var_238], al
000000000000ed18         jne        loc_ed54

                     loc_ed1a:
000000000000ed1a         mov        rsi, qword [rsp+0x268+var_88]               ; CODE XREF=re_search_internal+3048
000000000000ed22         mov        rax, qword [rsp+0x268+var_100]
000000000000ed2a         xor        ecx, ecx
000000000000ed2c         jmp        loc_ed43
000000000000ed2e         align      16

                     loc_ed30:
000000000000ed30         cmp        qword [rdi+rdx*8], 0x0                      ; CODE XREF=re_search_internal+2122
000000000000ed35         mov        rax, rdx
000000000000ed38         mov        ecx, 0x1
000000000000ed3d         jne        loc_f0b0

                     loc_ed43:
000000000000ed43         lea        rdx, qword [rax+1]                          ; CODE XREF=re_search_internal+2092
000000000000ed47         cmp        rsi, rdx
000000000000ed4a         jge        loc_ed30

000000000000ed4c         test       cl, cl
000000000000ed4e         jne        loc_fc1e

                     loc_ed54:
000000000000ed54         mov        rax, qword [rsp+0x268+var_218]              ; CODE XREF=re_search_internal+1892, re_search_internal+2055, re_search_internal+2072, re_search_internal+5401, re_search_internal+5926
000000000000ed59         test       rax, rax
000000000000ed5c         je         loc_ed66

000000000000ed5e         mov        rdi, qword [rsp+0x268+var_260]
000000000000ed63         add        qword [rax], rdi

                     loc_ed66:
000000000000ed66         mov        rax, qword [rsp+0x268+var_248]              ; CODE XREF=re_search_internal+1857, re_search_internal+2140, re_search_internal+5479, re_search_internal+5631
000000000000ed6b         cmp        rax, 0xffffffffffffffff
000000000000ed6f         je         loc_f430

000000000000ed75         cmp        rax, 0xfffffffffffffffe
000000000000ed79         je         loc_f570

000000000000ed7f         mov        rax, qword [rsp+0x268+var_248]
000000000000ed84         mov        qword [rsp+0x268+var_A0], rax
000000000000ed8c         mov        rax, qword [rsp+0x268+var_220]
000000000000ed91         test       byte [rax+0x38], 0x10
000000000000ed95         jne        loc_f550

000000000000ed9b         cmp        qword [rsp+0x268+arg_0], 0x1
000000000000eda4         jbe        loc_f69c

000000000000edaa         mov        rcx, qword [rsp+0x268+var_248]
000000000000edaf         mov        rbx, qword [rsp+0x268+var_90]
000000000000edb7         mov        rdi, qword [rsp+0x268+var_268]
000000000000edbb         mov        rax, qword [rbx+rcx*8]
000000000000edbf         mov        rsi, qword [rax+0x10]
000000000000edc3         lea        rdx, qword [rax+0x18]
000000000000edc7         call       check_halt_state_context.isra.20            ; check_halt_state_context.isra.20
000000000000edcc         mov        r13, rax
000000000000edcf         mov        qword [rsp+0x268+var_98], rax
000000000000edd7         mov        rax, qword [rsp+0x268+var_230]
000000000000eddc         test       byte [rax+0xb0], 0x1
000000000000ede3         jne        loc_ee00

000000000000ede5         mov        rax, qword [rsp+0x268+var_230]
000000000000edea         cmp        qword [rax+0x98], 0x0
000000000000edf2         je         loc_f78c

                     loc_edf8:
000000000000edf8         mov        r13, qword [rsp+0x268+var_98]               ; CODE XREF=re_search_internal+4569

                     loc_ee00:
000000000000ee00         movabs     rsi, 0x1ffffffffffffffe                     ; CODE XREF=re_search_internal+2275
000000000000ee0a         cmp        qword [rsp+0x268+var_248], rsi
000000000000ee0f         mov        r15, qword [rsp+0x268+var_B0]
000000000000ee17         ja         loc_fa7b

000000000000ee1d         mov        rax, qword [rsp+0x268+var_248]
000000000000ee22         add        rax, 0x1
000000000000ee26         lea        rbx, qword [rax*8]
000000000000ee2e         mov        qword [rsp+0x268+var_260], rax
000000000000ee33         mov        rdi, rbx                                    ; argument "__size" for method j_malloc
000000000000ee36         call       j_malloc                                    ; malloc
000000000000ee3b         test       rax, rax
000000000000ee3e         mov        r12, rax
000000000000ee41         je         loc_f570

000000000000ee47         cmp        qword [r15+0x98], 0x0
000000000000ee4f         je         loc_f6e5

000000000000ee55         mov        rdi, rbx                                    ; argument "__size" for method j_malloc
000000000000ee58         call       j_malloc                                    ; malloc
000000000000ee5d         test       rax, rax
000000000000ee60         mov        rbp, rax
000000000000ee63         je         loc_f568

000000000000ee69         mov        r14, qword [rsp+0x268+var_248]
000000000000ee6e         lea        rbx, qword [rsp+0x268+var_188]
000000000000ee76         mov        qword [rsp+0x268+var_258], r15
000000000000ee7b         mov        qword [rsp+0x268+var_250], rax

                     loc_ee80:
000000000000ee80         mov        rax, qword [rsp+0x268+var_260]              ; CODE XREF=re_search_internal+2637
000000000000ee85         xor        esi, esi                                    ; argument "__c" for method j_memset
000000000000ee87         mov        rdi, rbp                                    ; argument "__s" for method j_memset
000000000000ee8a         lea        rdx, qword [rax*8]                          ; argument "__n" for method j_memset
000000000000ee92         call       j_memset                                    ; memset
000000000000ee97         pxor       xmm0, xmm0
000000000000ee9b         mov        qword [rsp+0x268+var_188], r12
000000000000eea3         mov        qword [rsp+0x268+var_180], rbp
000000000000eeab         mov        qword [rsp+0x268+var_178], r13
000000000000eeb3         mov        rsi, rbx
000000000000eeb6         mov        qword [rsp+0x268+var_170], r14
000000000000eebe         mov        rdi, qword [rsp+0x268+var_268]
000000000000eec2         movaps     xmmword [rbx+0x20], xmm0
000000000000eec6         mov        qword [rbx+0x30], 0x0
000000000000eece         call       sift_states_backward                        ; sift_states_backward
000000000000eed3         mov        rdi, qword [rsp+0x268+var_158]              ; argument "__ptr" for method j_free
000000000000eedb         mov        r15d, eax
000000000000eede         call       j_free                                      ; free
000000000000eee3         test       r15d, r15d
000000000000eee6         jne        loc_fb04

000000000000eeec         cmp        qword [r12], 0x0
000000000000eef1         jne        loc_fb63

000000000000eef7         cmp        qword [rbp], 0x0
000000000000eefc         jne        loc_fb63

000000000000ef02         mov        rdx, qword [rsp+0x268+var_90]
000000000000ef0a         nop        word [rax+rax]

                     loc_ef10:
000000000000ef10         sub        r14, 0x1                                    ; CODE XREF=re_search_internal+2597, re_search_internal+2603
000000000000ef14         cmp        r14, 0xffffffffffffffff
000000000000ef18         je         loc_f9db

000000000000ef1e         mov        rax, qword [rdx+r14*8]
000000000000ef22         test       rax, rax
000000000000ef25         je         loc_ef10

000000000000ef27         test       byte [rax+0x68], 0x10
000000000000ef2b         je         loc_ef10

000000000000ef2d         mov        rsi, qword [rax+0x10]
000000000000ef31         mov        rdi, qword [rsp+0x268+var_268]
000000000000ef35         lea        rdx, qword [rax+0x18]
000000000000ef39         mov        rcx, r14
000000000000ef3c         call       check_halt_state_context.isra.20            ; check_halt_state_context.isra.20
000000000000ef41         mov        r13, rax
000000000000ef44         lea        rax, qword [r14+1]
000000000000ef48         mov        qword [rsp+0x268+var_260], rax
000000000000ef4d         jmp        loc_ee80

                     loc_ef52:
000000000000ef52         cmp        qword [rsp+0x268+var_1F8], rbp              ; case 3, CODE XREF=re_search_internal+1270
000000000000ef57         jle        loc_ea8f

000000000000ef5d         mov        rax, qword [rsp+0x268+var_1F0]
000000000000ef62         mov        rdi, qword [rsp+0x268+var_1B8]
000000000000ef6a         mov        rsi, qword [rsp+0x268+var_200]
000000000000ef6f         movzx      eax, byte [rax+rbp]
000000000000ef73         movzx      edx, byte [rdi+rax]
000000000000ef77         lea        rax, qword [rbp+1]
000000000000ef7b         cmp        byte [rsi+rdx], 0x0
000000000000ef7f         jne        loc_ead8

000000000000ef85         mov        rsi, qword [rsp+0x268+var_200]
000000000000ef8a         mov        rdi, qword [rsp+0x268+var_1B8]
000000000000ef92         mov        rcx, qword [rsp+0x268+var_1F8]
000000000000ef97         mov        r8, qword [rsp+0x268+var_1F0]
000000000000ef9c         jmp        loc_efb7
000000000000ef9e         align      32

                     loc_efa0:
000000000000efa0         movzx      eax, byte [r8+rax]                          ; CODE XREF=re_search_internal+2749
000000000000efa5         movzx      edx, byte [rdi+rax]
000000000000efa9         lea        rax, qword [rbp+1]
000000000000efad         cmp        byte [rsi+rdx], 0x0
000000000000efb1         jne        loc_fc11

                     loc_efb7:
000000000000efb7         cmp        rcx, rax                                    ; CODE XREF=re_search_internal+2716
000000000000efba         mov        rbp, rax
000000000000efbd         jne        loc_efa0

000000000000efbf         jmp        loc_ea82

                     loc_efc4:
000000000000efc4         cmp        qword [rsp+0x268+var_1D8], rbp              ; case 1, CODE XREF=re_search_internal+1270
000000000000efcc         jg         loc_f469

000000000000efd2         xor        ecx, ecx
000000000000efd4         mov        rax, rbp
000000000000efd7         mov        rdi, qword [rsp+0x268+var_200]
000000000000efdc         mov        rsi, qword [rsp+0x268+var_1B8]
000000000000efe4         mov        r9, qword [rsp+0x268+var_1D8]
000000000000efec         mov        r10, qword [rsp+0x268+var_1F0]
000000000000eff1         mov        r8, qword [rsp+0x268+var_1E0]
000000000000eff9         jmp        loc_f012
000000000000effb         align      4096

                     loc_f000:
000000000000f000         sub        rax, 0x1                                    ; CODE XREF=re_search_internal+2859
000000000000f004         mov        ecx, 0x1
000000000000f009         cmp        rax, r9
000000000000f00c         jl         loc_f9f0

                     loc_f012:
000000000000f012         xor        edx, edx                                    ; CODE XREF=re_search_internal+2809
000000000000f014         cmp        r8, rax
000000000000f017         jle        loc_f01e

000000000000f019         movzx      edx, byte [r10+rax]

                     loc_f01e:
000000000000f01e         test       rsi, rsi                                    ; CODE XREF=re_search_internal+2839
000000000000f021         je         loc_f027

000000000000f023         movzx      edx, byte [rsi+rdx]

                     loc_f027:
000000000000f027         cmp        byte [rdi+rdx], 0x0                         ; CODE XREF=re_search_internal+2849
000000000000f02b         je         loc_f000

000000000000f02d         test       cl, cl
000000000000f02f         je         loc_ead8

000000000000f035         mov        qword [rsp+0x268+var_190], rax
000000000000f03d         mov        rbp, rax
000000000000f040         jmp        loc_ead8
000000000000f045         align      8

                     loc_f048:
000000000000f048         mov        dword [rsp+0x268+var_20C], eax              ; CODE XREF=re_search_internal+4450
000000000000f04c         nop        dword [rax]

                     loc_f050:
000000000000f050         mov        rdi, qword [rsp+0x268+var_90]               ; CODE XREF=re_search_internal+598, re_search_internal+1521, re_search_internal+4135, re_search_internal+4757

                     loc_f058:
000000000000f058         call       j_free                                      ; free, CODE XREF=re_search_internal+3961, re_search_internal+4224, re_search_internal+4296, re_search_internal+5164, re_search_internal+5250, re_search_internal+5384, re_search_internal+5510, re_search_internal+5689
000000000000f05d         mov        rax, qword [rsp+0x268+var_230]
000000000000f062         cmp        qword [rax+0x98], 0x0
000000000000f06a         jne        loc_f990

                     loc_f070:
000000000000f070         mov        rdi, qword [rsp+0x268+var_268]              ; CODE XREF=re_search_internal+5299
000000000000f074         call       re_string_destruct                          ; re_string_destruct

                     loc_f079:
000000000000f079         mov        rsi, qword [rsp+0x268+var_40]               ; CODE XREF=re_search_internal+342, re_search_internal+3976
000000000000f081         xor        rsi, qword [fs:0x28]
000000000000f08a         mov        eax, dword [rsp+0x268+var_20C]
000000000000f08e         jne        loc_fc2b

000000000000f094         add        rsp, aLib64ldlinuxx8                        ; "/lib64/ld-linux-x86-64.so.2"
000000000000f09b         pop        rbx
000000000000f09c         pop        rbp
000000000000f09d         pop        r12
000000000000f09f         pop        r13
000000000000f0a1         pop        r14
000000000000f0a3         pop        r15
000000000000f0a5         ret
                        ; endp
000000000000f0a6         align      16

                     loc_f0b0:
000000000000f0b0         mov        rsi, qword [rsp+0x268+var_268]              ; CODE XREF=re_search_internal+2109
000000000000f0b4         mov        rdi, qword [rsp+0x268+var_240]
000000000000f0b9         mov        qword [rsp+0x268+var_100], rdx
000000000000f0c1         xor        edx, edx
000000000000f0c3         call       merge_state_with_log                        ; merge_state_with_log
000000000000f0c8         mov        edx, dword [rsp+0x268+var_198]
000000000000f0cf         test       edx, edx
000000000000f0d1         jne        loc_fa0d

000000000000f0d7         test       rax, rax
000000000000f0da         jne        loc_fa20

000000000000f0e0         mov        rdi, qword [rsp+0x268+var_90]
000000000000f0e8         jmp        loc_ed1a
000000000000f0ed         align      16

                     loc_f0f0:
000000000000f0f0         mov        rsi, qword [r13+0x10]                       ; CODE XREF=re_search_internal+1840
000000000000f0f4         mov        rdi, qword [rsp+0x268+var_268]
000000000000f0f8         lea        rdx, qword [r13+0x18]
000000000000f0fc         mov        rcx, r8
000000000000f0ff         mov        qword [rsp+0x268+var_258], r8
000000000000f104         call       check_halt_state_context.isra.20            ; check_halt_state_context.isra.20
000000000000f109         test       rax, rax
000000000000f10c         mov        r8, qword [rsp+0x268+var_258]
000000000000f111         je         loc_ec59

000000000000f117         jmp        loc_ec36
000000000000f11c         align      32

                     loc_f120:
000000000000f120         cmp        rax, qword [rsp+0x268+var_F0]               ; CODE XREF=re_search_internal+1913
000000000000f128         jge        loc_ec7f

                     loc_f12e:
000000000000f12e         mov        rdi, qword [rsp+0x268+var_268]              ; CODE XREF=re_search_internal+3870
000000000000f132         lea        esi, dword [rbx+1]
000000000000f135         call       extend_buffers                              ; extend_buffers
000000000000f13a         test       eax, eax
000000000000f13c         mov        dword [rsp+0x268+var_198], eax
000000000000f143         jne        loc_fa28

000000000000f149         test       byte [r14+0x68], 0x20
000000000000f14e         mov        r8, qword [rsp+0x268+var_100]
000000000000f156         je         loc_ec9b

000000000000f15c         nop        dword [rax]

                     loc_f160:
000000000000f160         cmp        qword [r14+0x10], 0x0                       ; CODE XREF=re_search_internal+1941
000000000000f165         mov        r13, qword [rsp+0x268+var_B0]
000000000000f16d         jle        loc_f49b

000000000000f173         lea        rax, qword [r13+0xd8]
000000000000f17a         xor        r12d, r12d
000000000000f17d         mov        qword [rsp+0x268+var_1C8], rbx
000000000000f185         mov        rbx, r12
000000000000f188         mov        r12, r8
000000000000f18b         mov        qword [rsp+0x268+var_228], rax
000000000000f190         jmp        loc_f2e8
000000000000f195         align      8

                     loc_f198:
000000000000f198         test       al, 0x1                                     ; CODE XREF=re_search_internal+3643
000000000000f19a         je         loc_f2da

000000000000f1a0         and        ecx, 0x8
000000000000f1a3         jne        loc_f2da

                     loc_f1a9:
000000000000f1a9         test       dl, 0x20                                    ; CODE XREF=re_search_internal+3652, re_search_internal+3660
000000000000f1ac         je         loc_f1b6

000000000000f1ae         test       al, 0x2
000000000000f1b0         je         loc_f2da

                     loc_f1b6:
000000000000f1b6         and        edx, 0x80                                   ; CODE XREF=re_search_internal+3244
000000000000f1bc         je         loc_f1d0

000000000000f1be         test       al, 0x8
000000000000f1c0         je         loc_f2da

000000000000f1c6         nop        word [cs:rax+rax]

                     loc_f1d0:
000000000000f1d0         mov        rcx, qword [rsp+0x268+var_268]              ; CODE XREF=re_search_internal+3260, re_search_internal+3601
000000000000f1d4         mov        rsi, qword [rsp+0x268+var_228]
000000000000f1d9         mov        r8, r12
000000000000f1dc         mov        rdx, r15
000000000000f1df         mov        rdi, rbp
000000000000f1e2         call       check_node_accept_bytes.isra.31             ; check_node_accept_bytes.isra.31
000000000000f1e7         test       eax, eax
000000000000f1e9         je         loc_f2d2

000000000000f1ef         movsxd     rbp, eax
000000000000f1f2         add        rbp, qword [rsp+0x268+var_100]
000000000000f1fa         cmp        dword [rsp+0x268+var_68], eax
000000000000f201         cmovge     eax, dword [rsp+0x268+var_68]
000000000000f209         mov        rdi, qword [rsp+0x268+var_268]
000000000000f20d         mov        rsi, rbp
000000000000f210         mov        dword [rsp+0x268+var_68], eax
000000000000f217         call       clean_state_log_if_needed                   ; clean_state_log_if_needed
000000000000f21c         test       eax, eax
000000000000f21e         mov        dword [rsp+0x268+var_194], eax
000000000000f225         jne        loc_f4c0

000000000000f22b         mov        rax, qword [r13+0x18]
000000000000f22f         lea        r12, qword [rbp*8]
000000000000f237         mov        rax, qword [rax+r15*8]
000000000000f23b         mov        r15, qword [rsp+0x268+var_90]
000000000000f243         lea        rdx, qword [rax+rax*2]
000000000000f247         mov        rax, qword [r13+0x30]
000000000000f24b         add        r15, r12
000000000000f24e         lea        rdx, qword [rax+rdx*8]
000000000000f252         mov        rax, qword [r15]
000000000000f255         test       rax, rax
000000000000f258         je         loc_f358

000000000000f25e         mov        rsi, qword [rax+0x50]
000000000000f262         mov        rdi, qword [rsp+0x268+var_208]
000000000000f267         call       re_node_set_init_union                      ; re_node_set_init_union
000000000000f26c         test       eax, eax
000000000000f26e         mov        dword [rsp+0x268+var_194], eax
000000000000f275         jne        loc_f4c0

000000000000f27b         mov        edx, dword [rsp+0x268+var_A8]
000000000000f282         mov        rdi, qword [rsp+0x268+var_268]
000000000000f286         lea        rsi, qword [rbp-1]
000000000000f28a         call       re_string_context_at                        ; re_string_context_at
000000000000f28f         mov        rdx, qword [rsp+0x268+var_208]
000000000000f294         mov        rdi, qword [rsp+0x268+var_1E8]
000000000000f29c         mov        ecx, eax
000000000000f29e         add        r12, qword [rsp+0x268+var_90]
000000000000f2a6         mov        rsi, r13
000000000000f2a9         call       re_acquire_state_context                    ; re_acquire_state_context
000000000000f2ae         mov        rdi, qword [rsp+0x268+var_178]              ; argument "__ptr" for method j_free
000000000000f2b6         mov        qword [r12], rax
000000000000f2ba         call       j_free                                      ; free
000000000000f2bf         mov        rdi, qword [rsp+0x268+var_90]
000000000000f2c7         cmp        qword [rdi+rbp*8], 0x0
000000000000f2cc         je         loc_f3b1

                     loc_f2d2:
000000000000f2d2         mov        r12, qword [rsp+0x268+var_100]              ; CODE XREF=re_search_internal+3305, re_search_internal+3755, re_search_internal+3770

                     loc_f2da:
000000000000f2da         add        rbx, 0x1                                    ; CODE XREF=re_search_internal+3226, re_search_internal+3235, re_search_internal+3248, re_search_internal+3264, re_search_internal+3586, re_search_internal+3666
000000000000f2de         cmp        rbx, qword [r14+0x10]
000000000000f2e2         jge        loc_f490

                     loc_f2e8:
000000000000f2e8         mov        rax, qword [r14+0x18]                       ; CODE XREF=re_search_internal+3216
000000000000f2ec         mov        rbp, qword [r13]
000000000000f2f0         mov        r15, qword [rax+rbx*8]
000000000000f2f4         mov        rax, r15
000000000000f2f7         shl        rax, 0x4
000000000000f2fb         add        rax, rbp
000000000000f2fe         test       byte [rax+0xa], 0x10
000000000000f302         je         loc_f2da

000000000000f304         mov        ecx, dword [rax+8]
000000000000f307         test       ecx, 0x3ff00
000000000000f30d         mov        dword [rsp+0x268+var_258], ecx
000000000000f311         je         loc_f1d0

000000000000f317         mov        edx, dword [rsp+0x268+var_A8]
000000000000f31e         mov        rdi, qword [rsp+0x268+var_268]
000000000000f322         mov        rsi, r12
000000000000f325         call       re_string_context_at                        ; re_string_context_at
000000000000f32a         mov        ecx, dword [rsp+0x268+var_258]
000000000000f32e         shr        ecx, 0x8
000000000000f331         mov        edx, ecx
000000000000f333         and        dx, 0x3ff
000000000000f338         test       cl, 0x4
000000000000f33b         jne        loc_f198

000000000000f341         and        ecx, 0x8
000000000000f344         je         loc_f1a9

000000000000f34a         test       al, 0x1
000000000000f34c         je         loc_f1a9

000000000000f352         jmp        loc_f2da
000000000000f354         align      8

                     loc_f358:
000000000000f358         movdqu     xmm0, xmmword [rdx]                         ; CODE XREF=re_search_internal+3416
000000000000f35c         lea        rsi, qword [rbp-1]
000000000000f360         mov        rdi, qword [rsp+0x268+var_268]
000000000000f364         movaps     xmmword [rsp+0x268+var_188], xmm0
000000000000f36c         mov        rax, qword [rdx+0x10]
000000000000f370         mov        edx, dword [rsp+0x268+var_A8]
000000000000f377         mov        qword [rsp+0x268+var_178], rax
000000000000f37f         call       re_string_context_at                        ; re_string_context_at
000000000000f384         mov        rdi, qword [rsp+0x268+var_1E8]
000000000000f38c         mov        rdx, qword [rsp+0x268+var_208]
000000000000f391         mov        ecx, eax
000000000000f393         mov        rsi, r13
000000000000f396         call       re_acquire_state_context                    ; re_acquire_state_context
000000000000f39b         mov        rdi, qword [rsp+0x268+var_90]
000000000000f3a3         mov        qword [r15], rax
000000000000f3a6         cmp        qword [rdi+rbp*8], 0x0
000000000000f3ab         jne        loc_f2d2

                     loc_f3b1:
000000000000f3b1         mov        eax, dword [rsp+0x268+var_194]              ; CODE XREF=re_search_internal+3532
000000000000f3b8         test       eax, eax
000000000000f3ba         je         loc_f2d2

000000000000f3c0         mov        rbx, qword [rsp+0x268+var_1C8]
000000000000f3c8         jmp        loc_f4d0
000000000000f3cd         align      16

                     loc_f3d0:
000000000000f3d0         mov        rbp, qword [r14+0x60]                       ; CODE XREF=re_search_internal+1979
000000000000f3d4         test       rbp, rbp
000000000000f3d7         je         loc_f585

000000000000f3dd         mov        rax, qword [rsp+0x268+var_100]
000000000000f3e5         mov        edx, dword [rsp+0x268+var_A8]
000000000000f3ec         mov        rdi, qword [rsp+0x268+var_268]
000000000000f3f0         lea        rsi, qword [rax-1]
000000000000f3f4         call       re_string_context_at                        ; re_string_context_at
000000000000f3f9         test       al, 0x1
000000000000f3fb         je         loc_f4b0

000000000000f401         mov        r13, qword [rbp+r13*8+0x800]
000000000000f409         jmp        loc_ecc5
000000000000f40e         align      16

                     loc_f410:
000000000000f410         cmp        rax, qword [rsp+0x268+var_F0]               ; CODE XREF=re_search_internal+1930
000000000000f418         jge        loc_ec90

000000000000f41e         jmp        loc_f12e

                     loc_f423:
000000000000f423         mov        rdi, r12                                    ; argument "__ptr" for method j_free, CODE XREF=re_search_internal+4700
000000000000f426         call       j_free                                      ; free
000000000000f42b         nop        dword [rax+rax]

                     loc_f430:
000000000000f430         mov        rdi, qword [rsp+0x268+var_268]              ; CODE XREF=re_search_internal+2159, re_search_internal+5355, re_search_internal+5671
000000000000f434         call       match_ctx_clean                             ; match_ctx_clean
000000000000f439         mov        rbp, qword [rsp+0x268+var_190]

                     loc_f441:
000000000000f441         movsxd     rax, dword [rsp+0x268+var_1BC]              ; CODE XREF=re_search_internal+1559
000000000000f449         add        rbp, rax
000000000000f44c         cmp        rbp, qword [rsp+0x268+var_1D8]
000000000000f454         mov        qword [rsp+0x268+var_190], rbp
000000000000f45c         jl         loc_f469

000000000000f45e         cmp        rbp, qword [rsp+0x268+var_1F8]
000000000000f463         jle        loc_e9d8

                     loc_f469:
000000000000f469         mov        rdi, qword [rsp+0x268+var_90]               ; CODE XREF=re_search_internal+1172, re_search_internal+1482, re_search_internal+2764, re_search_internal+3932, re_search_internal+4393, re_search_internal+4402
000000000000f471         mov        dword [rsp+0x268+var_20C], 0x1
000000000000f479         jmp        loc_f058
000000000000f47e         align      128

                     loc_f480:
000000000000f480         mov        dword [rsp+0x268+var_20C], 0x1              ; CODE XREF=re_search_internal+238, re_search_internal+256, re_search_internal+269, re_search_internal+282, re_search_internal+293
000000000000f488         jmp        loc_f079
000000000000f48d         align      16

                     loc_f490:
000000000000f490         mov        rbx, qword [rsp+0x268+var_1C8]              ; CODE XREF=re_search_internal+3554
000000000000f498         mov        r8, r12

                     loc_f49b:
000000000000f49b         mov        dword [rsp+0x268+var_198], 0x0              ; CODE XREF=re_search_internal+3181
000000000000f4a6         jmp        loc_ec9b
000000000000f4ab         align      16

                     loc_f4b0:
000000000000f4b0         mov        r13, qword [rbp+r13*8]                      ; CODE XREF=re_search_internal+3835
000000000000f4b5         jmp        loc_ecc5
000000000000f4ba         align      64

                     loc_f4c0:
000000000000f4c0         mov        rbx, qword [rsp+0x268+var_1C8]              ; CODE XREF=re_search_internal+3365, re_search_internal+3445
000000000000f4c8         mov        rdi, qword [rsp+0x268+var_90]

                     loc_f4d0:
000000000000f4d0         test       rdi, rdi                                    ; CODE XREF=re_search_internal+3784
000000000000f4d3         mov        dword [rsp+0x268+var_198], eax
000000000000f4da         je         loc_f5c0

                     loc_f4e0:
000000000000f4e0         xor        r13d, r13d                                  ; CODE XREF=re_search_internal+4275
000000000000f4e3         jmp        loc_ecd0
000000000000f4e8         align      16

                     loc_f4f0:
000000000000f4f0         mov        edx, dword [rsp+0x268+var_A8]               ; CODE XREF=re_search_internal+1656
000000000000f4f7         mov        rdi, qword [rsp+0x268+var_268]
000000000000f4fb         lea        rsi, qword [rax-1]
000000000000f4ff         call       re_string_context_at                        ; re_string_context_at
000000000000f504         test       al, 0x1
000000000000f506         je         loc_f675

000000000000f50c         mov        r14, qword [rbx+0x50]

                     loc_f510:
000000000000f510         test       r14, r14                                    ; CODE XREF=re_search_internal+4503, re_search_internal+5619, re_search_internal+5726
000000000000f513         jne        loc_eb7e

000000000000f519         mov        eax, dword [rsp+0x268+var_198]
000000000000f520         cmp        eax, 0xc
000000000000f523         mov        dword [rsp+0x268+var_20C], eax
000000000000f527         je         loc_f050

000000000000f52d         lea        rcx, qword [__PRETTY_FUNCTION__.7972]       ; argument "__function" for method j___assert_fail, "check_matching"
000000000000f534         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/regexec.c"
000000000000f53b         lea        rdi, qword [aErrRegespace]                  ; argument "__assertion" for method j___assert_fail, "err == REG_ESPACE"
000000000000f542         mov        edx, 0x435                                  ; argument "__line" for method j___assert_fail
000000000000f547         call       j___assert_fail                             ; __assert_fail
                        ; endp
000000000000f54c         align      16

                     loc_f550:
000000000000f550         mov        rax, qword [rsp+0x268+var_230]              ; CODE XREF=re_search_internal+2197
000000000000f555         cmp        qword [rax+0x98], 0x0
000000000000f55d         je         loc_f78c

000000000000f563         jmp        loc_f6af

                     loc_f568:
000000000000f568         mov        rdi, r12                                    ; argument "__ptr" for method j_free, CODE XREF=re_search_internal+2403
000000000000f56b         call       j_free                                      ; free

                     loc_f570:
000000000000f570         mov        rdi, qword [rsp+0x268+var_90]               ; CODE XREF=re_search_internal+810, re_search_internal+864, re_search_internal+873, re_search_internal+942, re_search_internal+2169, re_search_internal+2369, re_search_internal+5419
000000000000f578         mov        dword [rsp+0x268+var_20C], 0xc
000000000000f580         jmp        loc_f058

                     loc_f585:
000000000000f585         mov        rdi, qword [rsp+0x268+var_B0]               ; CODE XREF=re_search_internal+3799
000000000000f58d         mov        rsi, r14
000000000000f590         call       build_trtable                               ; build_trtable
000000000000f595         test       al, al
000000000000f597         jne        loc_ecb4

000000000000f59d         mov        rdi, qword [rsp+0x268+var_90]
000000000000f5a5         mov        dword [rsp+0x268+var_198], 0xc
000000000000f5b0         test       rdi, rdi
000000000000f5b3         jne        loc_f4e0

000000000000f5b9         nop        dword [rax]

                     loc_f5c0:
000000000000f5c0         mov        dword [rsp+0x268+var_20C], 0xc              ; CODE XREF=re_search_internal+975, re_search_internal+2046, re_search_internal+4058
000000000000f5c8         jmp        loc_f058

                     loc_f5cd:
000000000000f5cd         mov        rbx, qword [rsp+0x268+var_200]              ; CODE XREF=re_search_internal+1250
000000000000f5d2         mov        r13d, dword [rsp+0x268+var_1BC]
000000000000f5da         mov        r14, qword [rsp+0x268+var_1D8]
000000000000f5e2         mov        r15, qword [rsp+0x268+var_1F8]
000000000000f5e7         mov        r12, qword [rsp+0x268+var_1E0]
000000000000f5ef         jmp        loc_f638
000000000000f5f1         align      8

                     loc_f5f8:
000000000000f5f8         cmp        r12, rbp                                    ; CODE XREF=re_search_internal+4427, re_search_internal+4467
000000000000f5fb         mov        rax, rbx
000000000000f5fe         jle        loc_f60f

000000000000f600         mov        rax, qword [rsp+0x268+var_140]
000000000000f608         movzx      eax, byte [rax+rdx]
000000000000f60c         add        rax, rbx

                     loc_f60f:
000000000000f60f         cmp        byte [rax], 0x0                             ; CODE XREF=re_search_internal+4350
000000000000f612         jne        loc_ead8

000000000000f618         movsxd     rax, r13d
000000000000f61b         add        rbp, rax
000000000000f61e         cmp        rbp, r14
000000000000f621         mov        qword [rsp+0x268+var_190], rbp
000000000000f629         jl         loc_f469

000000000000f62f         cmp        rbp, r15
000000000000f632         jg         loc_f469

                     loc_f638:
000000000000f638         mov        rdx, rbp                                    ; CODE XREF=re_search_internal+4335
000000000000f63b         sub        rdx, qword [rsp+0x268+var_120]
000000000000f643         cmp        qword [rsp+0x268+var_110], rdx
000000000000f64b         ja         loc_f5f8

000000000000f64d         mov        edx, dword [rsp+0x268+arg_10]
000000000000f654         mov        rdi, qword [rsp+0x268+var_268]
000000000000f658         mov        rsi, rbp
000000000000f65b         call       re_string_reconstruct                       ; re_string_reconstruct
000000000000f660         test       eax, eax
000000000000f662         jne        loc_f048

000000000000f668         mov        rdx, rbp
000000000000f66b         sub        rdx, qword [rsp+0x268+var_120]
000000000000f673         jmp        loc_f5f8

                     loc_f675:
000000000000f675         test       eax, eax                                    ; CODE XREF=re_search_internal+4102
000000000000f677         je         loc_eb7e

000000000000f67d         mov        edx, eax
000000000000f67f         and        edx, 0x6
000000000000f682         cmp        edx, 0x6
000000000000f685         je         loc_faef

000000000000f68b         test       al, 0x2
000000000000f68d         je         loc_fb40

000000000000f693         mov        r14, qword [rbx+0x58]
000000000000f697         jmp        loc_f510

                     loc_f69c:
000000000000f69c         mov        rax, qword [rsp+0x268+var_230]              ; CODE XREF=re_search_internal+2212
000000000000f6a1         cmp        qword [rax+0x98], 0x0
000000000000f6a9         je         loc_f78c

                     loc_f6af:
000000000000f6af         mov        rcx, qword [rsp+0x268+var_248]              ; CODE XREF=re_search_internal+4195
000000000000f6b4         mov        rbx, qword [rsp+0x268+var_90]
000000000000f6bc         mov        rdi, qword [rsp+0x268+var_268]
000000000000f6c0         mov        rax, qword [rbx+rcx*8]
000000000000f6c4         mov        rsi, qword [rax+0x10]
000000000000f6c8         lea        rdx, qword [rax+0x18]
000000000000f6cc         call       check_halt_state_context.isra.20            ; check_halt_state_context.isra.20
000000000000f6d1         mov        qword [rsp+0x268+var_98], rax
000000000000f6d9         jmp        loc_edf8

                     loc_f6de:
000000000000f6de         xor        ecx, ecx                                    ; CODE XREF=re_search_internal+1113, re_search_internal+1128
000000000000f6e0         jmp        loc_e96e

                     loc_f6e5:
000000000000f6e5         pxor       xmm0, xmm0                                  ; CODE XREF=re_search_internal+2383
000000000000f6e9         mov        qword [rsp+0x268+var_188], rax
000000000000f6f1         mov        rdi, qword [rsp+0x268+var_268]
000000000000f6f5         mov        rax, qword [rsp+0x268+var_248]
000000000000f6fa         lea        rbx, qword [rsp+0x268+var_188]
000000000000f702         mov        qword [rsp+0x268+var_180], 0x0
000000000000f70e         mov        qword [rsp+0x268+var_178], r13
000000000000f716         mov        rsi, rbx
000000000000f719         mov        qword [rsp+0x268+var_158], 0x0
000000000000f725         movaps     xmmword [rsp+0x268+var_168], xmm0
000000000000f72d         mov        qword [rsp+0x268+var_170], rax
000000000000f735         call       sift_states_backward                        ; sift_states_backward
000000000000f73a         mov        rdi, qword [rsp+0x268+var_158]              ; argument "__ptr" for method j_free
000000000000f742         mov        dword [rsp+0x268+var_260], eax
000000000000f746         call       j_free                                      ; free
000000000000f74b         mov        eax, dword [rsp+0x268+var_260]
000000000000f74f         test       eax, eax
000000000000f751         jne        loc_fb98

000000000000f757         cmp        qword [r12], 0x0
000000000000f75c         je         loc_f423

                     loc_f762:
000000000000f762         mov        rdi, qword [rsp+0x268+var_90]               ; argument "__ptr" for method j_free, CODE XREF=re_search_internal+5778
000000000000f76a         call       j_free                                      ; free
000000000000f76f         mov        rax, qword [rsp+0x268+var_248]
000000000000f774         mov        qword [rsp+0x268+var_90], r12
000000000000f77c         mov        qword [rsp+0x268+var_98], r13
000000000000f784         mov        qword [rsp+0x268+var_A0], rax

                     loc_f78c:
000000000000f78c         cmp        qword [rsp+0x268+arg_0], 0x0                ; CODE XREF=re_search_internal+2290, re_search_internal+4189, re_search_internal+4521
000000000000f795         je         loc_f050

000000000000f79b         cmp        qword [rsp+0x268+arg_0], 0x1
000000000000f7a4         je         loc_fbc8

000000000000f7aa         mov        rsi, qword [rsp+0x268+var_1B0]
000000000000f7b2         mov        rcx, qword [rsp+0x268+arg_0]
000000000000f7ba         mov        rdx, 0xffffffffffffffff
000000000000f7c1         shl        rcx, 0x4
000000000000f7c5         lea        rax, qword [rsi+0x10]
000000000000f7c9         add        rcx, rsi

                     loc_f7cc:
000000000000f7cc         mov        qword [rax+8], rdx                          ; CODE XREF=re_search_internal+4826
000000000000f7d0         mov        qword [rax], rdx
000000000000f7d3         add        rax, 0x10
000000000000f7d7         cmp        rcx, rax
000000000000f7da         jne        loc_f7cc

000000000000f7dc         mov        rdi, qword [rsp+0x268+var_1B0]
000000000000f7e4         mov        rax, qword [rsp+0x268+var_A0]
000000000000f7ec         mov        qword [rdi+8], rax
000000000000f7f0         mov        rax, qword [rsp+0x268+var_220]
000000000000f7f5         mov        qword [rdi], 0x0
000000000000f7fc         test       byte [rax+0x38], 0x10
000000000000f800         jne        loc_fbe3

000000000000f806         cmp        qword [rsp+0x268+arg_0], 0x1
000000000000f80f         je         loc_fbe3

000000000000f815         mov        rax, qword [rsp+0x268+var_230]
000000000000f81a         xor        r8d, r8d
000000000000f81d         test       byte [rax+0xb0], 0x1
000000000000f824         je         loc_f835

000000000000f826         xor        r8d, r8d
000000000000f829         cmp        qword [rax+0x98], 0x0
000000000000f831         setg       r8b

                     loc_f835:
000000000000f835         mov        rbx, qword [rsp+0x268+var_1B0]              ; CODE XREF=re_search_internal+4900
000000000000f83d         mov        rdx, qword [rsp+0x268+arg_0]
000000000000f845         mov        rsi, qword [rsp+0x268+var_268]
000000000000f849         mov        rdi, qword [rsp+0x268+var_220]
000000000000f84e         mov        rcx, rbx
000000000000f851         call       set_regs                                    ; set_regs
000000000000f856         test       eax, eax
000000000000f858         jne        loc_fb2d

000000000000f85e         mov        rax, qword [rbx]

                     loc_f861:
000000000000f861         movzx      r11d, byte [rsp+0x268+var_BC]               ; CODE XREF=re_search_internal+5861
000000000000f86a         mov        r10, qword [rsp+0x268+var_118]
000000000000f872         xor        ecx, ecx
000000000000f874         mov        r9, qword [rsp+0x268+var_130]
000000000000f87c         mov        r8, qword [rsp+0x268+var_110]
000000000000f884         mov        rdi, qword [rsp+0x268+var_190]
000000000000f88c         mov        rdx, qword [rsp+0x268+var_1B0]
000000000000f894         jmp        loc_f899

                     loc_f896:
000000000000f896         mov        rax, qword [rdx]                            ; CODE XREF=re_search_internal+5065

                     loc_f899:
000000000000f899         cmp        rax, 0xffffffffffffffff                     ; CODE XREF=re_search_internal+5012
000000000000f89d         je         loc_f8b9

000000000000f89f         test       r11b, r11b
000000000000f8a2         mov        rsi, qword [rdx+8]
000000000000f8a6         jne        loc_fbea

                     loc_f8ac:
000000000000f8ac         add        rax, rdi                                    ; CODE XREF=re_search_internal+5887, re_search_internal+5895
000000000000f8af         add        rsi, rdi
000000000000f8b2         mov        qword [rdx], rax
000000000000f8b5         mov        qword [rdx+8], rsi

                     loc_f8b9:
000000000000f8b9         add        rcx, 0x1                                    ; CODE XREF=re_search_internal+5021
000000000000f8bd         add        rdx, 0x10
000000000000f8c1         cmp        rcx, qword [rsp+0x268+arg_0]
000000000000f8c9         jne        loc_f896

000000000000f8cb         cmp        qword [rsp+0x268+var_1D0], 0x0
000000000000f8d4         jle        loc_f915

000000000000f8d6         mov        rdx, qword [rsp+0x268+var_1D0]
000000000000f8de         mov        rdi, qword [rsp+0x268+var_1B0]
000000000000f8e6         mov        rax, rcx
000000000000f8e9         shl        rax, 0x4
000000000000f8ed         add        rdx, rcx
000000000000f8f0         lea        rax, qword [rdi+rax+8]
000000000000f8f5         shl        rdx, 0x4
000000000000f8f9         lea        rsi, qword [rdi+rdx+8]
000000000000f8fe         mov        rdx, 0xffffffffffffffff

                     loc_f905:
000000000000f905         mov        qword [rax-8], rdx                          ; CODE XREF=re_search_internal+5139
000000000000f909         mov        qword [rax], rdx
000000000000f90c         add        rax, 0x10
000000000000f910         cmp        rsi, rax
000000000000f913         jne        loc_f905

                     loc_f915:
000000000000f915         mov        rax, qword [rsp+0x268+var_230]              ; CODE XREF=re_search_internal+5076
000000000000f91a         mov        rdi, qword [rsp+0x268+var_90]
000000000000f922         mov        r9, qword [rax+0xe0]
000000000000f929         test       r9, r9
000000000000f92c         je         loc_f058

000000000000f932         mov        r10, qword [rsp+0x268+var_1B0]
000000000000f93a         xor        r8d, r8d
000000000000f93d         lea        rdx, qword [r10+0x10]
000000000000f941         jmp        loc_f979

                     loc_f943:
000000000000f943         mov        rax, qword [r9+rsi*8-8]                     ; CODE XREF=re_search_internal+5248
000000000000f948         cmp        rax, r8
000000000000f94b         je         loc_f972

000000000000f94d         add        rax, 0x1
000000000000f951         shl        rax, 0x4
000000000000f955         mov        rax, qword [r10+rax]
000000000000f959         mov        qword [rdx], rax
000000000000f95c         mov        rax, qword [r9+rsi*8-8]
000000000000f961         add        rax, 0x1
000000000000f965         shl        rax, 0x4
000000000000f969         mov        rax, qword [r10+rax+8]
000000000000f96e         mov        qword [rdx+8], rax

                     loc_f972:
000000000000f972         add        rdx, 0x10                                   ; CODE XREF=re_search_internal+5195
000000000000f976         mov        r8, rsi

                     loc_f979:
000000000000f979         lea        rsi, qword [r8+1]                           ; CODE XREF=re_search_internal+5185
000000000000f97d         cmp        rsi, rcx
000000000000f980         jne        loc_f943

000000000000f982         jmp        loc_f058
000000000000f987         align      16

                     loc_f990:
000000000000f990         mov        rdi, qword [rsp+0x268+var_268]              ; CODE XREF=re_search_internal+2922
000000000000f994         call       match_ctx_clean                             ; match_ctx_clean
000000000000f999         mov        rdi, qword [rsp+0x268+var_50]               ; argument "__ptr" for method j_free
000000000000f9a1         call       j_free                                      ; free
000000000000f9a6         mov        rdi, qword [rsp+0x268+var_70]               ; argument "__ptr" for method j_free
000000000000f9ae         call       j_free                                      ; free
000000000000f9b3         jmp        loc_f070

                     loc_f9b8:
000000000000f9b8         mov        rax, qword [rsp+0x268+var_230]              ; CODE XREF=re_search_internal+915
000000000000f9bd         test       byte [rax+0xb0], 0x2
000000000000f9c4         jne        loc_e899

000000000000f9ca         mov        qword [rsp+0x268+var_90], 0x0
000000000000f9d6         jmp        loc_e8d5

                     loc_f9db:
000000000000f9db         mov        rdi, r12                                    ; argument "__ptr" for method j_free, CODE XREF=re_search_internal+2584
000000000000f9de         call       j_free                                      ; free
000000000000f9e3         mov        rdi, rbp                                    ; argument "__ptr" for method j_free
000000000000f9e6         call       j_free                                      ; free
000000000000f9eb         jmp        loc_f430

                     loc_f9f0:
000000000000f9f0         mov        qword [rsp+0x268+var_190], rax              ; CODE XREF=re_search_internal+2828
000000000000f9f8         mov        rdi, qword [rsp+0x268+var_90]
000000000000fa00         mov        dword [rsp+0x268+var_20C], 0x1
000000000000fa08         jmp        loc_f058

                     loc_fa0d:
000000000000fa0d         test       rax, rax                                    ; CODE XREF=re_search_internal+3025
000000000000fa10         mov        r13, rax
000000000000fa13         jne        loc_ec08

000000000000fa19         jmp        loc_ed54
000000000000fa1e         align      32

                     loc_fa20:
000000000000fa20         mov        r13, rax                                    ; CODE XREF=re_search_internal+3034
000000000000fa23         jmp        loc_ec08

                     loc_fa28:
000000000000fa28         cmp        eax, 0xc                                    ; CODE XREF=re_search_internal+3139
000000000000fa2b         je         loc_f570

000000000000fa31         lea        rcx, qword [__PRETTY_FUNCTION__.7972]       ; argument "__function" for method j___assert_fail, "check_matching"
000000000000fa38         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/regexec.c"
000000000000fa3f         lea        rdi, qword [aErrRegespace]                  ; argument "__assertion" for method j___assert_fail, "err == REG_ESPACE"
000000000000fa46         mov        edx, 0x46c                                  ; argument "__line" for method j___assert_fail
000000000000fa4b         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_fa50:
000000000000fa50         cmp        byte [r14+0x68], 0x0                        ; CODE XREF=re_search_internal+1735
000000000000fa55         js         loc_fac6

                     loc_fa57:
000000000000fa57         mov        esi, dword [rsp+0x268+var_210]              ; CODE XREF=re_search_internal+5610
000000000000fa5b         mov        rax, qword [rsp+0x268+var_260]
000000000000fa60         test       esi, esi
000000000000fa62         mov        qword [rsp+0x268+var_248], rax
000000000000fa67         je         loc_ed66

000000000000fa6d         mov        qword [rsp+0x268+var_238], 0x1
000000000000fa76         jmp        loc_ebcd

                     loc_fa7b:
000000000000fa7b         mov        rdi, rbx                                    ; CODE XREF=re_search_internal+2327
000000000000fa7e         mov        dword [rsp+0x268+var_20C], 0xc
000000000000fa86         jmp        loc_f058

                     loc_fa8b:
000000000000fa8b         lea        rbx, qword [r14+0x10]                       ; CODE XREF=re_search_internal+1692
000000000000fa8f         lea        rbp, qword [r14+0x18]
000000000000fa93         mov        rdi, qword [rsp+0x268+var_268]
000000000000fa97         xor        ecx, ecx
000000000000fa99         mov        rdx, rbp
000000000000fa9c         mov        rsi, rbx
000000000000fa9f         call       check_subexp_matching_top.isra.18           ; check_subexp_matching_top.isra.18
000000000000faa4         test       eax, eax
000000000000faa6         mov        dword [rsp+0x268+var_198], eax
000000000000faad         jne        loc_faf8

000000000000faaf         movzx      eax, byte [r14+0x68]
000000000000fab4         test       al, 0x40
000000000000fab6         jne        loc_fba0

                     loc_fabc:
000000000000fabc         mov        byte [rsp+0x268+var_250], 0x0               ; CODE XREF=re_search_internal+5827
000000000000fac1         jmp        loc_ebb3

                     loc_fac6:
000000000000fac6         mov        rsi, qword [r14+0x10]                       ; CODE XREF=re_search_internal+5461
000000000000faca         mov        rcx, qword [rsp+0x268+var_260]
000000000000facf         lea        rdx, qword [r14+0x18]
000000000000fad3         mov        rdi, qword [rsp+0x268+var_268]
000000000000fad7         call       check_halt_state_context.isra.20            ; check_halt_state_context.isra.20
000000000000fadc         test       rax, rax
000000000000fadf         mov        qword [rsp+0x268+var_238], rax
000000000000fae4         je         loc_ebcd

000000000000faea         jmp        loc_fa57

                     loc_faef:
000000000000faef         mov        r14, qword [rbx+0x60]                       ; CODE XREF=re_search_internal+4485
000000000000faf3         jmp        loc_f510

                     loc_faf8:
000000000000faf8         cdqe                                                   ; CODE XREF=re_search_internal+5549, re_search_internal+5816
000000000000fafa         mov        qword [rsp+0x268+var_248], rax
000000000000faff         jmp        loc_ed66

                     loc_fb04:
000000000000fb04         mov        r14, qword [rsp+0x268+var_250]              ; CODE XREF=re_search_internal+2534
000000000000fb09         mov        eax, r15d

                     loc_fb0c:
000000000000fb0c         mov        rdi, r12                                    ; argument "__ptr" for method j_free, CODE XREF=re_search_internal+5787
000000000000fb0f         mov        dword [rsp+0x268+var_260], eax
000000000000fb13         call       j_free                                      ; free
000000000000fb18         mov        rdi, r14                                    ; argument "__ptr" for method j_free
000000000000fb1b         call       j_free                                      ; free
000000000000fb20         mov        eax, dword [rsp+0x268+var_260]
000000000000fb24         cmp        eax, 0x1
000000000000fb27         je         loc_f430

                     loc_fb2d:
000000000000fb2d         mov        rdi, qword [rsp+0x268+var_90]               ; CODE XREF=re_search_internal+4952
000000000000fb35         mov        dword [rsp+0x268+var_20C], eax
000000000000fb39         jmp        loc_f058
000000000000fb3e         align      64

                     loc_fb40:
000000000000fb40         test       al, 0x4                                     ; CODE XREF=re_search_internal+4493
000000000000fb42         je         loc_eb7e

000000000000fb48         mov        rdx, qword [r14+0x50]
000000000000fb4c         mov        rdi, qword [rsp+0x268+var_240]
000000000000fb51         mov        ecx, eax
000000000000fb53         mov        rsi, rbx
000000000000fb56         call       re_acquire_state_context                    ; re_acquire_state_context
000000000000fb5b         mov        r14, rax
000000000000fb5e         jmp        loc_f510

                     loc_fb63:
000000000000fb63         mov        r15, qword [rsp+0x268+var_258]              ; CODE XREF=re_search_internal+2545, re_search_internal+2556
000000000000fb68         mov        rcx, qword [rsp+0x268+var_260]
000000000000fb6d         mov        rdx, rbp
000000000000fb70         mov        rsi, r12
000000000000fb73         mov        qword [rsp+0x268+var_248], r14
000000000000fb78         mov        rdi, r15
000000000000fb7b         call       merge_state_array                           ; merge_state_array
000000000000fb80         mov        rdi, rbp                                    ; argument "__ptr" for method j_free
000000000000fb83         mov        dword [rsp+0x268+var_260], eax
000000000000fb87         call       j_free                                      ; free
000000000000fb8c         mov        eax, dword [rsp+0x268+var_260]
000000000000fb90         test       eax, eax
000000000000fb92         je         loc_f762

                     loc_fb98:
000000000000fb98         xor        r14d, r14d                                  ; CODE XREF=re_search_internal+4689
000000000000fb9b         jmp        loc_fb0c

                     loc_fba0:
000000000000fba0         mov        rdi, qword [rsp+0x268+var_268]              ; CODE XREF=re_search_internal+5558
000000000000fba4         mov        rdx, rbp
000000000000fba7         mov        rsi, rbx
000000000000fbaa         call       transit_state_bkref.isra.34                 ; transit_state_bkref.isra.34
000000000000fbaf         test       eax, eax
000000000000fbb1         mov        dword [rsp+0x268+var_198], eax
000000000000fbb8         jne        loc_faf8

000000000000fbbe         movzx      eax, byte [r14+0x68]
000000000000fbc3         jmp        loc_fabc

                     loc_fbc8:
000000000000fbc8         mov        rsi, qword [rsp+0x268+var_1B0]              ; CODE XREF=re_search_internal+4772
000000000000fbd0         mov        rax, qword [rsp+0x268+var_A0]
000000000000fbd8         mov        qword [rsi], 0x0
000000000000fbdf         mov        qword [rsi+8], rax

                     loc_fbe3:
000000000000fbe3         xor        eax, eax                                    ; CODE XREF=re_search_internal+4864, re_search_internal+4879
000000000000fbe5         jmp        loc_f861

                     loc_fbea:
000000000000fbea         cmp        r10, rax                                    ; CODE XREF=re_search_internal+5030
000000000000fbed         je         loc_fc0c

000000000000fbef         mov        rax, qword [r9+rax*8]

                     loc_fbf3:
000000000000fbf3         cmp        r10, rsi                                    ; CODE XREF=re_search_internal+5903
000000000000fbf6         mov        qword [rdx], rax
000000000000fbf9         je         loc_fc04

000000000000fbfb         mov        rsi, qword [r9+rsi*8]
000000000000fbff         jmp        loc_f8ac

                     loc_fc04:
000000000000fc04         mov        rsi, r8                                     ; CODE XREF=re_search_internal+5881
000000000000fc07         jmp        loc_f8ac

                     loc_fc0c:
000000000000fc0c         mov        rax, r8                                     ; CODE XREF=re_search_internal+5869
000000000000fc0f         jmp        loc_fbf3

                     loc_fc11:
000000000000fc11         mov        qword [rsp+0x268+var_190], rbp              ; CODE XREF=re_search_internal+1396, re_search_internal+2737
000000000000fc19         jmp        loc_ead8

                     loc_fc1e:
000000000000fc1e         mov        qword [rsp+0x268+var_100], rax              ; CODE XREF=re_search_internal+2126
000000000000fc26         jmp        loc_ed54

                     loc_fc2b:
000000000000fc2b         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=re_search_internal+2958
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_78: int64_t, -120
        ;    var_7C: int32_t, -124
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208


                     update_cur_sifted_state:
000000000000fc30         push       r15                                         ; End of unwind block (FDE at 0x18238), Begin of unwind block (FDE at 0x18288), CODE XREF=sift_states_backward+112, sift_states_backward+655
000000000000fc32         push       r14
000000000000fc34         mov        rax, rdi
000000000000fc37         push       r13
000000000000fc39         push       r12
000000000000fc3b         mov        r13, rsi
000000000000fc3e         push       rbp
000000000000fc3f         push       rbx
000000000000fc40         mov        rbp, rdx
000000000000fc43         mov        rbx, rcx
000000000000fc46         lea        rcx, qword [rdx*8]
000000000000fc4e         sub        rsp, 0xa8
000000000000fc55         mov        r12, qword [rax+0x98]
000000000000fc5c         mov        rax, qword [rax+0xb8]
000000000000fc63         mov        qword [rsp+0xd8+var_D0], rdi
000000000000fc68         mov        qword [rsp+0xd8+var_C0], rcx
000000000000fc6d         mov        rdi, qword [fs:0x28]
000000000000fc76         mov        qword [rsp+0xd8+var_40], rdi
000000000000fc7e         xor        edi, edi
000000000000fc80         mov        rdx, qword [rax+rdx*8]
000000000000fc84         mov        dword [rsp+0xd8+var_7C], 0x0
000000000000fc8c         mov        rcx, qword [rbx+8]
000000000000fc90         test       rdx, rdx
000000000000fc93         je         loc_fee8

000000000000fc99         lea        rdi, qword [rdx+8]
000000000000fc9d         test       rcx, rcx
000000000000fca0         mov        qword [rsp+0xd8+var_C8], rdi
000000000000fca5         jne        loc_fcf8

000000000000fca7         mov        rdx, qword [rsi]
000000000000fcaa         mov        qword [rdx+rbp*8], 0x0
000000000000fcb2         mov        rdx, qword [rax+rbp*8]
000000000000fcb6         xor        eax, eax
000000000000fcb8         test       byte [rdx+0x68], 0x40
000000000000fcbc         jne        loc_fd9f

000000000000fcc2         nop        word [rax+rax]

                     loc_fcc8:
000000000000fcc8         mov        rdi, qword [rsp+0xd8+var_40]                ; CODE XREF=update_cur_sifted_state+233, update_cur_sifted_state+274, update_cur_sifted_state+321, update_cur_sifted_state+333, update_cur_sifted_state+361, update_cur_sifted_state+725, update_cur_sifted_state+738, update_cur_sifted_state+888, update_cur_sifted_state+1107, update_cur_sifted_state+1297, update_cur_sifted_state+1455
000000000000fcd0         xor        rdi, qword [fs:0x28]
000000000000fcd9         jne        loc_1047b

000000000000fcdf         add        rsp, 0xa8
000000000000fce6         pop        rbx
000000000000fce7         pop        rbp
000000000000fce8         pop        r12
000000000000fcea         pop        r13
000000000000fcec         pop        r14
000000000000fcee         pop        r15
000000000000fcf0         ret
                        ; endp
000000000000fcf1         align      8

                     loc_fcf8:
000000000000fcf8         lea        rdi, qword [rsp+0xd8+var_78]                ; CODE XREF=update_cur_sifted_state+117
000000000000fcfd         mov        rdx, rbx
000000000000fd00         mov        rsi, r12
000000000000fd03         mov        dword [rsp+0xd8+var_78], 0x0
000000000000fd0b         call       re_acquire_state                            ; re_acquire_state
000000000000fd10         mov        rdx, rax
000000000000fd13         mov        eax, dword [rsp+0xd8+var_78]
000000000000fd17         test       eax, eax
000000000000fd19         jne        loc_fcc8

000000000000fd1b         mov        r15, qword [rdx+0x38]
000000000000fd1f         lea        r14, qword [rdx+0x38]
000000000000fd23         test       r15, r15
000000000000fd26         je         loc_ff30

                     loc_fd2c:
000000000000fd2c         mov        rsi, qword [rsp+0xd8+var_C8]                ; CODE XREF=update_cur_sifted_state+827, update_cur_sifted_state+840
000000000000fd31         mov        rdx, r14
000000000000fd34         mov        rdi, rbx
000000000000fd37         call       re_node_set_add_intersect                   ; re_node_set_add_intersect
000000000000fd3c         test       eax, eax
000000000000fd3e         mov        dword [rsp+0xd8+var_7C], eax
000000000000fd42         jne        loc_fcc8

000000000000fd44         cmp        qword [r13+0x28], 0x0
000000000000fd49         jne        loc_ffc0

                     loc_fd4f:
000000000000fd4f         mov        r14, qword [rsp+0xd8+var_C0]                ; CODE XREF=update_cur_sifted_state+1155
000000000000fd54         add        r14, qword [r13]

                     loc_fd58:
000000000000fd58         lea        rdi, qword [rsp+0xd8+var_7C]                ; CODE XREF=update_cur_sifted_state+905
000000000000fd5d         mov        rdx, rbx
000000000000fd60         mov        rsi, r12
000000000000fd63         call       re_acquire_state                            ; re_acquire_state
000000000000fd68         mov        qword [r14], rax
000000000000fd6b         mov        eax, dword [rsp+0xd8+var_7C]
000000000000fd6f         test       eax, eax
000000000000fd71         jne        loc_fcc8

000000000000fd77         cmp        qword [rsp+0xd8+var_C8], 0x0
000000000000fd7d         je         loc_fcc8

000000000000fd83         mov        rax, qword [rsp+0xd8+var_D0]
000000000000fd88         mov        rax, qword [rax+0xb8]
000000000000fd8f         mov        rdx, qword [rax+rbp*8]
000000000000fd93         xor        eax, eax
000000000000fd95         test       byte [rdx+0x68], 0x40
000000000000fd99         je         loc_fcc8

                     loc_fd9f:
000000000000fd9f         mov        rax, qword [rsp+0xd8+var_D0]                ; CODE XREF=update_cur_sifted_state+140
000000000000fda4         xor        ebx, ebx
000000000000fda6         mov        rsi, qword [rax+0xc8]
000000000000fdad         mov        rdx, rsi

                     loc_fdb0:
000000000000fdb0         cmp        rbx, rdx                                    ; CODE XREF=update_cur_sifted_state+759
000000000000fdb3         jge        loc_fe13

000000000000fdb5         lea        rax, qword [rbx+rdx]
000000000000fdb9         mov        rcx, rax
000000000000fdbc         shr        rcx, 0x3f
000000000000fdc0         add        rcx, rax
000000000000fdc3         mov        rax, qword [rsp+0xd8+var_D0]
000000000000fdc8         sar        rcx, 0x1
000000000000fdcb         mov        rdi, qword [rax+0xd8]
000000000000fdd2         lea        rax, qword [rcx+rcx*4]
000000000000fdd6         cmp        rbp, qword [rdi+rax*8+8]
000000000000fddb         jle        loc_fe0e

000000000000fddd         jmp        loc_ff17
000000000000fde2         align      8

                     loc_fde8:
000000000000fde8         lea        rdx, qword [rbx+rcx]                        ; CODE XREF=update_cur_sifted_state+481
000000000000fdec         mov        rax, rdx
000000000000fdef         shr        rax, 0x3f
000000000000fdf3         add        rax, rdx
000000000000fdf6         sar        rax, 0x1
000000000000fdf9         lea        rdx, qword [rax+rax*4]
000000000000fdfd         mov        r8, rax
000000000000fe00         cmp        rbp, qword [rdi+rdx*8+8]
000000000000fe05         jg         loc_ff20

000000000000fe0b         mov        rcx, rax

                     loc_fe0e:
000000000000fe0e         cmp        rbx, rcx                                    ; CODE XREF=update_cur_sifted_state+427
000000000000fe11         jl         loc_fde8

                     loc_fe13:
000000000000fe13         cmp        rsi, rbx                                    ; CODE XREF=update_cur_sifted_state+387
000000000000fe16         jle        loc_ff10

000000000000fe1c         lea        rax, qword [rbx+rbx*4]
000000000000fe20         lea        rsi, qword [rax*8]
000000000000fe28         mov        rax, qword [rsp+0xd8+var_D0]
000000000000fe2d         mov        qword [rsp+0xd8+var_98], rsi
000000000000fe32         mov        rax, qword [rax+0xd8]
000000000000fe39         cmp        rbp, qword [rax+rsi+8]
000000000000fe3e         jne        loc_ff10

000000000000fe44         cmp        rbx, 0xffffffffffffffff
000000000000fe48         je         loc_ff10

000000000000fe4e         mov        rax, qword [rsp+0xd8+var_D0]
000000000000fe53         mov        qword [rsp+0xd8+var_78], 0x0
000000000000fe5c         mov        r12, qword [rax+0x98]
000000000000fe63         mov        rax, qword [rsp+0xd8+var_C8]
000000000000fe68         cmp        qword [rax+8], 0x0
000000000000fe6d         jle        loc_ff10

000000000000fe73         lea        rax, qword [rsp+0xd8+var_78]
000000000000fe78         mov        qword [rsp+0xd8+var_B8], 0x0
000000000000fe81         mov        qword [rsp+0xd8+var_90], rbx
000000000000fe86         mov        r15, r13
000000000000fe89         mov        qword [rsp+0xd8+var_A0], rax
000000000000fe8e         jmp        loc_feb2

                     loc_fe90:
000000000000fe90         cmp        al, 0x4                                     ; CODE XREF=update_cur_sifted_state+679, update_cur_sifted_state+685
000000000000fe92         je         loc_10218

                     loc_fe98:
000000000000fe98         mov        rcx, qword [rsp+0xd8+var_C8]                ; CODE XREF=update_cur_sifted_state+687, update_cur_sifted_state+1987
000000000000fe9d         add        qword [rsp+0xd8+var_B8], 0x1
000000000000fea3         mov        rax, qword [rsp+0xd8+var_B8]
000000000000fea8         cmp        rax, qword [rcx+8]
000000000000feac         jge        loc_1046b

                     loc_feb2:
000000000000feb2         mov        rax, qword [rsp+0xd8+var_C8]                ; CODE XREF=update_cur_sifted_state+606
000000000000feb7         mov        rdi, qword [rsp+0xd8+var_B8]
000000000000febc         mov        rax, qword [rax+0x10]
000000000000fec0         mov        r14, qword [rax+rdi*8]
000000000000fec4         mov        rax, r14
000000000000fec7         shl        rax, 0x4
000000000000fecb         add        rax, qword [r12]
000000000000fecf         cmp        r14, qword [r15+0x10]
000000000000fed3         movzx      eax, byte [rax+8]
000000000000fed7         jne        loc_fe90

000000000000fed9         cmp        rbp, qword [r15+0x18]
000000000000fedd         jne        loc_fe90

000000000000fedf         jmp        loc_fe98
000000000000fee1         align      8

                     loc_fee8:
000000000000fee8         lea        r14, qword [rbp*8]                          ; CODE XREF=update_cur_sifted_state+99
000000000000fef0         add        r14, qword [rsi]
000000000000fef3         test       rcx, rcx
000000000000fef6         jne        loc_ffb0

000000000000fefc         mov        qword [r14], 0x0
000000000000ff03         xor        eax, eax
000000000000ff05         jmp        loc_fcc8
000000000000ff0a         align      16

                     loc_ff10:
000000000000ff10         xor        eax, eax                                    ; CODE XREF=update_cur_sifted_state+486, update_cur_sifted_state+526, update_cur_sifted_state+536, update_cur_sifted_state+573, update_cur_sifted_state+2113
000000000000ff12         jmp        loc_fcc8

                     loc_ff17:
000000000000ff17         mov        r8, rcx                                     ; CODE XREF=update_cur_sifted_state+429
000000000000ff1a         mov        rcx, rdx
000000000000ff1d         nop        dword [rax]

                     loc_ff20:
000000000000ff20         lea        rbx, qword [r8+1]                           ; CODE XREF=update_cur_sifted_state+469
000000000000ff24         mov        rdx, rcx
000000000000ff27         jmp        loc_fdb0
000000000000ff2c         align      16

                     loc_ff30:
000000000000ff30         mov        rdi, qword [rbx+8]                          ; CODE XREF=update_cur_sifted_state+246
000000000000ff34         mov        qword [rdx+0x40], 0x0
000000000000ff3c         mov        qword [rsp+0xd8+var_B8], rdx
000000000000ff41         mov        qword [rdx+0x38], rdi
000000000000ff45         shl        rdi, 0x3                                    ; argument "__size" for method j_malloc
000000000000ff49         call       j_malloc                                    ; malloc
000000000000ff4e         mov        rdx, qword [rsp+0xd8+var_B8]
000000000000ff53         test       rax, rax
000000000000ff56         mov        qword [rdx+0x48], rax
000000000000ff5a         je         loc_ffa3

000000000000ff5c         cmp        qword [rbx+8], 0x0
000000000000ff61         mov        dword [rsp+0xd8+var_78], 0x0
000000000000ff69         jg         loc_ff7e

000000000000ff6b         jmp        loc_fd2c

                     loc_ff70:
000000000000ff70         add        r15, 0x1                                    ; CODE XREF=update_cur_sifted_state+881
000000000000ff74         cmp        r15, qword [rbx+8]
000000000000ff78         jge        loc_fd2c

                     loc_ff7e:
000000000000ff7e         mov        rax, qword [rbx+0x10]                       ; CODE XREF=update_cur_sifted_state+825
000000000000ff82         mov        rdi, r14
000000000000ff85         mov        rax, qword [rax+r15*8]
000000000000ff89         lea        rdx, qword [rax+rax*2]
000000000000ff8d         mov        rax, qword [r12+0x38]
000000000000ff92         lea        rsi, qword [rax+rdx*8]
000000000000ff96         call       re_node_set_merge                           ; re_node_set_merge
000000000000ff9b         test       eax, eax
000000000000ff9d         mov        dword [rsp+0xd8+var_78], eax
000000000000ffa1         je         loc_ff70

                     loc_ffa3:
000000000000ffa3         mov        eax, 0xc                                    ; CODE XREF=update_cur_sifted_state+810
000000000000ffa8         jmp        loc_fcc8
000000000000ffad         align      16

                     loc_ffb0:
000000000000ffb0         mov        qword [rsp+0xd8+var_C8], 0x0                ; CODE XREF=update_cur_sifted_state+710
000000000000ffb9         jmp        loc_fd58
000000000000ffbe         align      64

                     loc_ffc0:
000000000000ffc0         mov        rax, qword [rsp+0xd8+var_D0]                ; CODE XREF=update_cur_sifted_state+281
000000000000ffc5         mov        rax, qword [rax+0xd8]
000000000000ffcc         mov        qword [rsp+0xd8+var_B8], rax
000000000000ffd1         jle        loc_100ab

000000000000ffd7         xor        r15d, r15d
000000000000ffda         nop        word [rax+rax]

                     loc_ffe0:
000000000000ffe0         mov        rax, qword [r13+0x30]                       ; CODE XREF=update_cur_sifted_state+1141
000000000000ffe4         mov        rdi, qword [rsp+0xd8+var_B8]
000000000000ffe9         mov        rax, qword [rax+r15*8]
000000000000ffed         lea        rax, qword [rax+rax*4]
000000000000fff1         lea        rdx, qword [rdi+rax*8]
000000000000fff5         cmp        rbp, qword [rdx+0x10]
000000000000fff9         jle        loc_1009d

000000000000ffff         cmp        rbp, qword [rdx+8]
0000000000010003         jg         loc_1009d

0000000000010009         mov        rcx, qword [rdx]
000000000001000c         mov        rax, qword [r12]
0000000000010010         mov        rsi, qword [rbx+8]
0000000000010014         shl        rcx, 0x4
0000000000010018         cmp        rbp, qword [rdx+0x18]
000000000001001c         mov        r8, qword [rax+rcx]
0000000000010020         je         loc_100c0

0000000000010026         xor        r14d, r14d
0000000000010029         test       rsi, rsi
000000000001002c         jle        loc_1009d

000000000001002e         mov        qword [rsp+0xd8+var_B0], rbp
0000000000010033         mov        rbp, r8
0000000000010036         jmp        loc_1004e
0000000000010038         align      64

                     loc_10040:
0000000000010040         add        r14, 0x1                                    ; CODE XREF=update_cur_sifted_state+1082, update_cur_sifted_state+1087
0000000000010044         cmp        r14, qword [rbx+8]
0000000000010048         jge        loc_10098

                     loc_1004a:
000000000001004a         mov        rax, qword [r12]                            ; CODE XREF=update_cur_sifted_state+1121

                     loc_1004e:
000000000001004e         mov        rdx, qword [rbx+0x10]                       ; CODE XREF=update_cur_sifted_state+1030
0000000000010052         mov        rsi, qword [rdx+r14*8]
0000000000010056         mov        rdx, rsi
0000000000010059         shl        rdx, 0x4
000000000001005d         add        rax, rdx
0000000000010060         movzx      edx, byte [rax+8]
0000000000010064         sub        edx, 0x8
0000000000010067         cmp        edx, 0x1
000000000001006a         ja         loc_10040

000000000001006c         cmp        rbp, qword [rax]
000000000001006f         jne        loc_10040

0000000000010071         mov        rcx, qword [rsp+0xd8+var_C8]
0000000000010076         mov        rdx, rbx
0000000000010079         mov        rdi, r12
000000000001007c         call       sub_epsilon_src_nodes                       ; sub_epsilon_src_nodes
0000000000010081         test       eax, eax
0000000000010083         jne        loc_fcc8

0000000000010089         add        r14, 0x1
000000000001008d         cmp        r14, qword [rbx+8]
0000000000010091         jl         loc_1004a

0000000000010093         nop        dword [rax+rax]

                     loc_10098:
0000000000010098         mov        rbp, qword [rsp+0xd8+var_B0]                ; CODE XREF=update_cur_sifted_state+1048

                     loc_1009d:
000000000001009d         add        r15, 0x1                                    ; CODE XREF=update_cur_sifted_state+969, update_cur_sifted_state+979, update_cur_sifted_state+1020, update_cur_sifted_state+1171, update_cur_sifted_state+1306, update_cur_sifted_state+1317, update_cur_sifted_state+1484, update_cur_sifted_state+1501
00000000000100a1         cmp        r15, qword [r13+0x28]
00000000000100a5         jl         loc_ffe0

                     loc_100ab:
00000000000100ab         mov        dword [rsp+0xd8+var_7C], 0x0                ; CODE XREF=update_cur_sifted_state+929
00000000000100b3         jmp        loc_fd4f
00000000000100b8         align      64

                     loc_100c0:
00000000000100c0         test       rsi, rsi                                    ; CODE XREF=update_cur_sifted_state+1008
00000000000100c3         jle        loc_1009d

00000000000100c5         mov        r10, qword [rbx+0x10]
00000000000100c9         mov        r9, 0xffffffffffffffff
00000000000100d0         lea        r11, qword [r10+rsi*8]
00000000000100d4         mov        rcx, r10
00000000000100d7         mov        rsi, r9
00000000000100da         jmp        loc_100f6
00000000000100dc         align      32

                     loc_100e0:
00000000000100e0         cmp        r14d, 0x9                                   ; CODE XREF=update_cur_sifted_state+1244
00000000000100e4         jne        loc_100ed

00000000000100e6         cmp        r8, qword [rdx]
00000000000100e9         cmove      r9, rdi

                     loc_100ed:
00000000000100ed         add        rcx, 0x8                                    ; CODE XREF=update_cur_sifted_state+1204
00000000000100f1         cmp        r11, rcx
00000000000100f4         je         loc_1011e

                     loc_100f6:
00000000000100f6         mov        rdi, qword [rcx]                            ; CODE XREF=update_cur_sifted_state+1194, update_cur_sifted_state+1260
00000000000100f9         mov        rdx, rdi
00000000000100fc         shl        rdx, 0x4
0000000000010100         add        rdx, rax
0000000000010103         movzx      r14d, byte [rdx+8]
0000000000010108         cmp        r14d, 0x8
000000000001010c         jne        loc_100e0

000000000001010e         cmp        r8, qword [rdx]
0000000000010111         cmove      rsi, rdi
0000000000010115         add        rcx, 0x8
0000000000010119         cmp        r11, rcx
000000000001011c         jne        loc_100f6

                     loc_1011e:
000000000001011e         test       rsi, rsi                                    ; CODE XREF=update_cur_sifted_state+1220
0000000000010121         mov        r14, r9
0000000000010124         mov        qword [rsp+0xd8+var_B0], r9
0000000000010129         js         loc_101f0

000000000001012f         mov        rcx, qword [rsp+0xd8+var_C8]
0000000000010134         mov        rdx, rbx
0000000000010137         mov        rdi, r12
000000000001013a         call       sub_epsilon_src_nodes                       ; sub_epsilon_src_nodes
000000000001013f         test       eax, eax
0000000000010141         jne        loc_fcc8

0000000000010147         test       r14, r14
000000000001014a         js         loc_1009d

0000000000010150         cmp        qword [rbx+8], 0x0
0000000000010155         jle        loc_1009d

000000000001015b         mov        r10, qword [rbx+0x10]

                     loc_1015f:
000000000001015f         xor        r14d, r14d                                  ; CODE XREF=update_cur_sifted_state+1478
0000000000010162         mov        qword [rsp+0xd8+var_A8], rbp
0000000000010167         mov        rbp, r14
000000000001016a         mov        r14, qword [rsp+0xd8+var_B0]
000000000001016f         jmp        loc_1018a
0000000000010171         align      8

                     loc_10178:
0000000000010178         add        rbp, 0x1                                    ; CODE XREF=update_cur_sifted_state+1409, update_cur_sifted_state+1432, update_cur_sifted_state+1465
000000000001017c         cmp        rbp, qword [rbx+8]
0000000000010180         jge        loc_10208

0000000000010186         mov        r10, qword [rbx+0x10]

                     loc_1018a:
000000000001018a         mov        r10, qword [r10+rbp*8]                      ; CODE XREF=update_cur_sifted_state+1343
000000000001018e         mov        rax, qword [r12+0x38]
0000000000010193         mov        rdx, r14
0000000000010196         lea        r9, qword [r10+r10*2]
000000000001019a         shl        r9, 0x3
000000000001019e         add        rax, r9
00000000000101a1         mov        rdi, qword [rax+8]
00000000000101a5         lea        rsi, qword [rax+0x10]
00000000000101a9         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
00000000000101ae         test       rax, rax
00000000000101b1         jne        loc_10178

00000000000101b3         add        r9, qword [r12+0x30]
00000000000101b8         mov        rdi, qword [r9+8]
00000000000101bc         lea        rsi, qword [r9+0x10]
00000000000101c0         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
00000000000101c5         test       rax, rax
00000000000101c8         jne        loc_10178

00000000000101ca         mov        rcx, qword [rsp+0xd8+var_C8]
00000000000101cf         mov        rdx, rbx
00000000000101d2         mov        rsi, r10
00000000000101d5         mov        rdi, r12
00000000000101d8         call       sub_epsilon_src_nodes                       ; sub_epsilon_src_nodes
00000000000101dd         test       eax, eax
00000000000101df         jne        loc_fcc8

00000000000101e5         sub        rbp, 0x1
00000000000101e9         jmp        loc_10178
00000000000101eb         align      16

                     loc_101f0:
00000000000101f0         cmp        qword [rsp+0xd8+var_B0], 0x0                ; CODE XREF=update_cur_sifted_state+1273
00000000000101f6         jns        loc_1015f

00000000000101fc         jmp        loc_1009d
0000000000010201         align      8

                     loc_10208:
0000000000010208         mov        rbp, qword [rsp+0xd8+var_A8]                ; CODE XREF=update_cur_sifted_state+1360
000000000001020d         jmp        loc_1009d
0000000000010212         align      8

                     loc_10218:
0000000000010218         mov        rax, qword [rsp+0xd8+var_D0]                ; CODE XREF=update_cur_sifted_state+610
000000000001021d         mov        r13, qword [rsp+0xd8+var_98]
0000000000010222         mov        rbx, qword [rsp+0xd8+var_90]
0000000000010227         add        r13, qword [rax+0xd8]
000000000001022e         lea        rax, qword [r14+r14*2]
0000000000010232         shl        rax, 0x3
0000000000010236         mov        qword [rsp+0xd8+var_A8], rax
000000000001023b         lea        rax, qword [r14*8]
0000000000010243         mov        qword [rsp+0xd8+var_B0], rax
0000000000010248         mov        rax, r15
000000000001024b         mov        r15, r13
000000000001024e         mov        r13, rbx
0000000000010251         mov        rbx, rax
0000000000010254         jmp        loc_103be
0000000000010259         align      32

                     loc_10260:
0000000000010260         mov        rax, qword [r15+0x18]                       ; CODE XREF=update_cur_sifted_state+1937
0000000000010264         sub        rax, qword [r15+0x10]
0000000000010268         test       rax, rax
000000000001026b         lea        r9, qword [rbp+rax]
0000000000010270         je         loc_103d0

0000000000010276         mov        rax, qword [r12+0x18]
000000000001027b         mov        rsi, qword [rsp+0xd8+var_B0]
0000000000010280         mov        r10, qword [rax+rsi]

                     loc_10284:
0000000000010284         cmp        r9, qword [rbx+0x18]                        ; CODE XREF=update_cur_sifted_state+1970
0000000000010288         jg         loc_103c7

000000000001028e         mov        rax, qword [rbx]
0000000000010291         mov        rax, qword [rax+r9*8]
0000000000010295         test       rax, rax
0000000000010298         je         loc_103c7

000000000001029e         mov        rdi, qword [rax+0x10]
00000000000102a2         lea        rsi, qword [rax+0x18]
00000000000102a6         mov        rdx, r10
00000000000102a9         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
00000000000102ae         test       rax, rax
00000000000102b1         je         loc_103c7

00000000000102b7         sub        rsp, 0x8
00000000000102bb         lea        rdx, qword [rbx+0x30]
00000000000102bf         lea        rsi, qword [rbx+0x28]
00000000000102c3         push       r9
00000000000102c5         mov        rdi, qword [rsp+0xe8+var_D0]
00000000000102ca         mov        rcx, r14
00000000000102cd         mov        r9, r10
00000000000102d0         mov        r8, rbp
00000000000102d3         call       check_dst_limits.isra.13                    ; check_dst_limits.isra.13
00000000000102d8         test       al, al
00000000000102da         pop        rdx
00000000000102db         pop        rcx
00000000000102dc         jne        loc_103c7

00000000000102e2         cmp        qword [rsp+0xd8+var_78], 0x0
00000000000102e8         je         loc_103f8

                     loc_102ee:
00000000000102ee         mov        rax, qword [rsp+0xd8+var_A0]                ; CODE XREF=update_cur_sifted_state+2056
00000000000102f3         mov        rsi, r13
00000000000102f6         mov        qword [rsp+0xd8+var_68], r14
00000000000102fb         mov        qword [rsp+0xd8+var_60], rbp
0000000000010300         lea        rdi, qword [rax+0x20]
0000000000010304         call       re_node_set_insert                          ; re_node_set_insert
0000000000010309         test       al, al
000000000001030b         je         loc_10464

0000000000010311         mov        rdi, qword [rsp+0xd8+var_C0]
0000000000010316         mov        rax, qword [rsp+0xd8+var_78]
000000000001031b         mov        rsi, qword [rsp+0xd8+var_A0]
0000000000010320         mov        r15, qword [rax+rdi]
0000000000010324         mov        rdi, qword [rsp+0xd8+var_D0]
0000000000010329         call       sift_states_backward                        ; sift_states_backward
000000000001032e         test       eax, eax
0000000000010330         jne        loc_1043e

0000000000010336         mov        rsi, qword [rbx+8]
000000000001033a         mov        rdx, qword [rsp+0xd8+var_78]
000000000001033f         test       rsi, rsi
0000000000010342         je         loc_1035d

0000000000010344         lea        rcx, qword [rbp+1]
0000000000010348         mov        rdi, r12
000000000001034b         call       merge_state_array                           ; merge_state_array
0000000000010350         test       eax, eax
0000000000010352         jne        loc_1043e

0000000000010358         mov        rdx, qword [rsp+0xd8+var_78]

                     loc_1035d:
000000000001035d         mov        r11, qword [rsp+0xd8+var_A0]                ; CODE XREF=update_cur_sifted_state+1810
0000000000010362         mov        rax, qword [rsp+0xd8+var_C0]
0000000000010367         mov        rdi, qword [rsp+0xd8+var_50]
000000000001036f         lea        r9, qword [r11+0x30]
0000000000010373         mov        qword [rdx+rax], r15
0000000000010377         mov        rdx, r13
000000000001037a         mov        rsi, r9
000000000001037d         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
0000000000010382         sub        rax, 0x1
0000000000010386         mov        rdx, rax
0000000000010389         js         loc_10397

000000000001038b         lea        rdi, qword [r11+0x28]
000000000001038f         mov        rsi, r9
0000000000010392         call       re_node_set_remove_at.isra.4.part.5         ; re_node_set_remove_at.isra.4.part.5

                     loc_10397:
0000000000010397         mov        rcx, qword [rsp+0xd8+var_D0]                ; CODE XREF=update_cur_sifted_state+1881
000000000001039c         lea        rax, qword [r13+r13*4]
00000000000103a1         mov        rdx, qword [rcx+0xd8]
00000000000103a8         lea        rax, qword [rdx+rax*8]
00000000000103ac         nop        dword [rax]

                     loc_103b0:
00000000000103b0         add        r13, 0x1                                    ; CODE XREF=update_cur_sifted_state+1946
00000000000103b4         cmp        byte [rax+0x20], 0x0
00000000000103b8         lea        r15, qword [rax+0x28]
00000000000103bc         je         loc_103f0

                     loc_103be:
00000000000103be         cmp        r14, qword [r15]                            ; CODE XREF=update_cur_sifted_state+1572
00000000000103c1         je         loc_10260

                     loc_103c7:
00000000000103c7         mov        rax, r15                                    ; CODE XREF=update_cur_sifted_state+1624, update_cur_sifted_state+1640, update_cur_sifted_state+1665, update_cur_sifted_state+1708
00000000000103ca         jmp        loc_103b0
00000000000103cc         align      16

                     loc_103d0:
00000000000103d0         mov        rax, qword [r12+0x28]                       ; CODE XREF=update_cur_sifted_state+1600
00000000000103d5         mov        rdi, qword [rsp+0xd8+var_A8]
00000000000103da         mov        rax, qword [rax+rdi+0x10]
00000000000103df         mov        r10, qword [rax]
00000000000103e2         jmp        loc_10284
00000000000103e7         align      16

                     loc_103f0:
00000000000103f0         mov        r15, rbx                                    ; CODE XREF=update_cur_sifted_state+1932
00000000000103f3         jmp        loc_fe98

                     loc_103f8:
00000000000103f8         mov        rax, qword [rbx+0x30]                       ; CODE XREF=update_cur_sifted_state+1720
00000000000103fc         lea        rsi, qword [rbx+0x20]
0000000000010400         movdqa     xmm0, xmmword [rbx]
0000000000010404         mov        qword [rsp+0xd8+var_48], rax
000000000001040c         mov        rax, qword [rsp+0xd8+var_A0]
0000000000010411         movaps     xmmword [rsp+0xd8+var_78], xmm0
0000000000010416         lea        rdi, qword [rax+0x20]
000000000001041a         movdqa     xmm0, xmmword [rbx+0x10]
000000000001041f         movaps     xmmword [rsp+0xd8+var_68], xmm0
0000000000010424         movdqa     xmm0, xmmword [rbx+0x20]
0000000000010429         movaps     xmmword [rsp+0xd8+var_58], xmm0
0000000000010431         call       re_node_set_init_copy                       ; re_node_set_init_copy
0000000000010436         test       eax, eax
0000000000010438         je         loc_102ee

                     loc_1043e:
000000000001043e         cmp        qword [rsp+0xd8+var_78], 0x0                ; CODE XREF=update_cur_sifted_state+1792, update_cur_sifted_state+1826, update_cur_sifted_state+2105
0000000000010444         je         loc_fcc8

                     loc_1044a:
000000000001044a         mov        rdi, qword [rsp+0xd8+var_48]                ; argument "__ptr" for method j_free, CODE XREF=update_cur_sifted_state+2121
0000000000010452         mov        dword [rsp+0xd8+var_D0], eax
0000000000010456         call       j_free                                      ; free
000000000001045b         mov        eax, dword [rsp+0xd8+var_D0]
000000000001045f         jmp        loc_fcc8

                     loc_10464:
0000000000010464         mov        eax, 0xc                                    ; CODE XREF=update_cur_sifted_state+1755
0000000000010469         jmp        loc_1043e

                     loc_1046b:
000000000001046b         cmp        qword [rsp+0xd8+var_78], 0x0                ; CODE XREF=update_cur_sifted_state+636
0000000000010471         je         loc_ff10

0000000000010477         xor        eax, eax
0000000000010479         jmp        loc_1044a

                     loc_1047b:
000000000001047b         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=update_cur_sifted_state+169
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_40: int8_t, -64


                     parse_bracket_element.constprop.37:
0000000000010480         push       r14                                         ; End of unwind block (FDE at 0x18288), Begin of unwind block (FDE at 0x182e8), CODE XREF=sub_116a0+271, sub_116a0+1639
0000000000010482         push       r13
0000000000010484         mov        r10, rsi
0000000000010487         push       r12
0000000000010489         push       rbp
000000000001048a         movsxd     r11, ecx
000000000001048d         push       rbx
000000000001048e         mov        rbp, rdx
0000000000010491         mov        rbx, rdi
0000000000010494         sub        rsp, 0x20
0000000000010498         mov        r12, qword [rsi+0x48]
000000000001049c         mov        rax, qword [fs:0x28]
00000000000104a5         mov        qword [rsp+0x48+var_30], rax
00000000000104aa         xor        eax, eax
00000000000104ac         cmp        dword [rsi+0x90], 0x1
00000000000104b3         je         loc_10508

00000000000104b5         mov        rsi, r12
00000000000104b8         mov        rdi, r10
00000000000104bb         call       re_string_char_size_at.part.0               ; re_string_char_size_at.part.0
00000000000104c0         cmp        eax, 0x1
00000000000104c3         jle        loc_10508

00000000000104c5         mov        rdx, qword [r10+0x10]
00000000000104c9         cdqe
00000000000104cb         mov        dword [rbx], 0x1
00000000000104d1         add        rax, r12
00000000000104d4         mov        edx, dword [rdx+r12*4]
00000000000104d8         mov        dword [rbx+8], edx
00000000000104db         mov        qword [r10+0x48], rax
00000000000104df         xor        eax, eax

                     loc_104e1:
00000000000104e1         mov        rcx, qword [rsp+0x48+var_30]                ; CODE XREF=parse_bracket_element.constprop.37+189, parse_bracket_element.constprop.37+353, parse_bracket_element.constprop.37+493, parse_bracket_element.constprop.37+528, parse_bracket_element.constprop.37+569, parse_bracket_element.constprop.37+582, parse_bracket_element.constprop.37+595
00000000000104e6         xor        rcx, qword [fs:0x28]
00000000000104ef         jne        loc_106d8

00000000000104f5         add        rsp, 0x20
00000000000104f9         pop        rbx
00000000000104fa         pop        rbp
00000000000104fb         pop        r12
00000000000104fd         pop        r13
00000000000104ff         pop        r14
0000000000010501         ret
                        ; endp
0000000000010502         align      8

                     loc_10508:
0000000000010508         movzx      eax, byte [rbp+8]                           ; CODE XREF=parse_bracket_element.constprop.37+51, parse_bracket_element.constprop.37+67
000000000001050c         add        r11, r12
000000000001050f         mov        qword [r10+0x48], r11
0000000000010513         mov        edx, eax
0000000000010515         and        edx, 0xfffffffb
0000000000010518         cmp        dl, 0x1a
000000000001051b         je         loc_10540

000000000001051d         cmp        al, 0x1c
000000000001051f         je         loc_10540

0000000000010521         cmp        al, 0x16
0000000000010523         jne        loc_1052e

0000000000010525         test       r9b, r9b
0000000000010528         je         loc_10672

                     loc_1052e:
000000000001052e         movzx      eax, byte [rbp]                             ; CODE XREF=parse_bracket_element.constprop.37+163, parse_bracket_element.constprop.37+522
0000000000010532         mov        dword [rbx], 0x0
0000000000010538         mov        byte [rbx+8], al
000000000001053b         xor        eax, eax
000000000001053d         jmp        loc_104e1
000000000001053f         align      64

                     loc_10540:
0000000000010540         mov        r12, qword [r10+0x68]                       ; CODE XREF=parse_bracket_element.constprop.37+155, parse_bracket_element.constprop.37+159
0000000000010544         cmp        r11, r12
0000000000010547         jge        loc_10668

000000000001054d         movzx      r13d, byte [rbp]
0000000000010552         xor        r8d, r8d
0000000000010555         jmp        loc_10582
0000000000010557         align      32

                     loc_10560:
0000000000010560         mov        rax, qword [rbx+8]                          ; CODE XREF=parse_bracket_element.constprop.37+294, parse_bracket_element.constprop.37+304
0000000000010564         mov        byte [rax+r8], r9b
0000000000010568         add        r8, 0x1
000000000001056c         cmp        r8, 0x20
0000000000010570         je         loc_10668

0000000000010576         movzx      eax, byte [rbp+8]
000000000001057a         mov        r11, qword [r10+0x48]
000000000001057e         mov        r12, qword [r10+0x68]

                     loc_10582:
0000000000010582         cmp        al, 0x1e                                    ; CODE XREF=parse_bracket_element.constprop.37+213
0000000000010584         movsxd     r14, r8d
0000000000010587         je         loc_105f0

                     loc_10589:
0000000000010589         mov        rdx, qword [r10+8]                          ; CODE XREF=parse_bracket_element.constprop.37+376, parse_bracket_element.constprop.37+407, parse_bracket_element.constprop.37+436
000000000001058d         lea        rax, qword [r11+1]
0000000000010591         mov        qword [r10+0x48], rax
0000000000010595         movzx      r9d, byte [rdx+r11]

                     loc_1059a:
000000000001059a         cmp        rax, r12                                    ; CODE XREF=parse_bracket_element.constprop.37+477, parse_bracket_element.constprop.37+556
000000000001059d         jge        loc_10668

00000000000105a3         cmp        r13b, r9b
00000000000105a6         jne        loc_10560

00000000000105a8         mov        rdx, qword [r10+8]
00000000000105ac         cmp        byte [rdx+rax], 0x5d
00000000000105b0         jne        loc_10560

00000000000105b2         add        rax, 0x1
00000000000105b6         mov        qword [r10+0x48], rax
00000000000105ba         mov        rax, qword [rbx+8]
00000000000105be         mov        byte [rax+r14], 0x0
00000000000105c3         movzx      eax, byte [rbp+8]
00000000000105c7         cmp        al, 0x1c
00000000000105c9         je         loc_106cb

00000000000105cf         cmp        al, 0x1e
00000000000105d1         je         loc_106be

00000000000105d7         cmp        al, 0x1a
00000000000105d9         je         loc_106b1

00000000000105df         xor        eax, eax
00000000000105e1         jmp        loc_104e1
00000000000105e6         align      16

                     loc_105f0:
00000000000105f0         cmp        byte [r10+0x8b], 0x0                        ; CODE XREF=parse_bracket_element.constprop.37+263
00000000000105f8         je         loc_10589

00000000000105fa         cmp        byte [r10+0x8c], 0x0
0000000000010602         je         loc_10698

0000000000010608         cmp        r11, qword [r10+0x30]
000000000001060c         je         loc_1061d

000000000001060e         mov        rax, qword [r10+0x10]
0000000000010612         cmp        dword [rax+r11*4], 0xffffffff
0000000000010617         je         loc_10589

                     loc_1061d:
000000000001061d         mov        rax, qword [r10+0x18]                       ; CODE XREF=parse_bracket_element.constprop.37+396
0000000000010621         mov        rax, qword [rax+r11*8]
0000000000010625         add        rax, qword [r10]
0000000000010628         add        rax, qword [r10+0x28]
000000000001062c         movzx      r9d, byte [rax]
0000000000010630         test       r9b, 0x80
0000000000010634         jne        loc_10589

000000000001063a         cmp        dword [r10+0x90], 0x1
0000000000010642         mov        eax, 0x1
0000000000010647         je         loc_10656

0000000000010649         mov        rsi, r11
000000000001064c         mov        rdi, r10
000000000001064f         call       re_string_char_size_at.part.0               ; re_string_char_size_at.part.0
0000000000010654         cdqe

                     loc_10656:
0000000000010656         add        rax, r11                                    ; CODE XREF=parse_bracket_element.constprop.37+455
0000000000010659         mov        qword [r10+0x48], rax
000000000001065d         jmp        loc_1059a
0000000000010662         align      8

                     loc_10668:
0000000000010668         mov        eax, 0x7                                    ; CODE XREF=parse_bracket_element.constprop.37+199, parse_bracket_element.constprop.37+240, parse_bracket_element.constprop.37+285
000000000001066d         jmp        loc_104e1

                     loc_10672:
0000000000010672         mov        rdi, rsp                                    ; CODE XREF=parse_bracket_element.constprop.37+168
0000000000010675         mov        rdx, r8
0000000000010678         mov        rsi, r10
000000000001067b         call       peek_token_bracket                          ; peek_token_bracket
0000000000010680         cmp        byte [rsp+0x48+var_40], 0x15
0000000000010685         mov        eax, 0xb
000000000001068a         je         loc_1052e

0000000000010690         jmp        loc_104e1
0000000000010695         align      8

                     loc_10698:
0000000000010698         lea        rax, qword [r11+1]                          ; CODE XREF=parse_bracket_element.constprop.37+386
000000000001069c         add        r11, qword [r10]
000000000001069f         mov        rdx, qword [r10+0x28]
00000000000106a3         mov        qword [r10+0x48], rax
00000000000106a7         movzx      r9d, byte [r11+rdx]
00000000000106ac         jmp        loc_1059a

                     loc_106b1:
00000000000106b1         mov        dword [rbx], 0x3                            ; CODE XREF=parse_bracket_element.constprop.37+345
00000000000106b7         xor        eax, eax
00000000000106b9         jmp        loc_104e1

                     loc_106be:
00000000000106be         mov        dword [rbx], 0x4                            ; CODE XREF=parse_bracket_element.constprop.37+337
00000000000106c4         xor        eax, eax
00000000000106c6         jmp        loc_104e1

                     loc_106cb:
00000000000106cb         mov        dword [rbx], 0x2                            ; CODE XREF=parse_bracket_element.constprop.37+329
00000000000106d1         xor        eax, eax
00000000000106d3         jmp        loc_104e1

                     loc_106d8:
00000000000106d8         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=parse_bracket_element.constprop.37+111
                        ; endp
00000000000106dd         align      32                                          ; End of unwind block (FDE at 0x182e8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_50: int8_t, -80
        ;    var_58: int8_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104


                     peek_token:
00000000000106e0         push       r15                                         ; Begin of unwind block (FDE at 0x1832c), CODE XREF=peek_token+1722, fetch_number+41, parse_expression+139, sub_10f30+292, sub_10f30+385, sub_10f30+1077, sub_11560+304, sub_116a0+789, sub_116a0+2010, parse_reg_exp+266, re_compile_internal+1168
00000000000106e2         push       r14
00000000000106e4         push       r13
00000000000106e6         push       r12
00000000000106e8         push       rbp
00000000000106e9         push       rbx
00000000000106ea         mov        rbp, rdi
00000000000106ed         sub        rsp, 0x38
00000000000106f1         mov        r14, qword [rsi+0x48]
00000000000106f5         mov        rax, qword [fs:0x28]
00000000000106fe         mov        qword [rsp+0x68+var_40], rax
0000000000010703         xor        eax, eax
0000000000010705         cmp        qword [rsi+0x68], r14
0000000000010709         jle        loc_107a0

000000000001070f         movzx      r13d, byte [rdi+0xa]
0000000000010714         mov        r15, rdx
0000000000010717         mov        rdx, qword [rsi+8]
000000000001071b         mov        rbx, rsi
000000000001071e         movzx      r12d, byte [rdx+r14]
0000000000010723         and        r13d, 0xffffff9f
0000000000010727         mov        byte [rdi+0xa], r13b
000000000001072b         mov        eax, dword [rsi+0x90]
0000000000010731         mov        byte [rdi], r12b
0000000000010734         cmp        eax, 0x1
0000000000010737         jle        loc_107d0

000000000001073d         cmp        r14, qword [rsi+0x30]
0000000000010741         je         loc_108e0

0000000000010747         mov        rcx, qword [rsi+0x10]
000000000001074b         mov        ecx, dword [rcx+r14*4]
000000000001074f         cmp        ecx, 0xffffffff
0000000000010752         je         loc_10830

0000000000010758         cmp        r12b, 0x5c
000000000001075c         je         loc_10850

0000000000010762         mov        byte [rdi+8], 0x1

                     loc_10766:
0000000000010766         mov        edi, ecx                                    ; argument "__wc" for method j_iswalnum, CODE XREF=peek_token+534
0000000000010768         mov        qword [rsp+0x68+var_60], rdx
000000000001076d         mov        dword [rsp+0x68+var_68], ecx
0000000000010770         call       j_iswalnum                                  ; iswalnum
0000000000010775         mov        ecx, dword [rsp+0x68+var_68]
0000000000010778         test       eax, eax
000000000001077a         setne      al
000000000001077d         cmp        ecx, 0x5f
0000000000010780         sete       cl
0000000000010783         or         eax, ecx
0000000000010785         shl        eax, 0x6
0000000000010788         or         r13d, eax
000000000001078b         mov        byte [rbp+0xa], r13b
000000000001078f         mov        rdx, qword [rsp+0x68+var_60]
0000000000010794         jmp        loc_1080c
0000000000010796         align      32

                     loc_107a0:
00000000000107a0         mov        byte [rdi+8], 0x2                           ; CODE XREF=peek_token+41

                     loc_107a4:
00000000000107a4         mov        rdi, qword [rsp+0x68+var_40]                ; CODE XREF=peek_token+353, peek_token+553, peek_token+579, peek_token+589, peek_token+625, peek_token+659, peek_token+669, peek_token+714, peek_token+729, peek_token+748, peek_token+758
00000000000107a9         xor        rdi, qword [fs:0x28]
00000000000107b2         jne        loc_10dd8

00000000000107b8         add        rsp, 0x38
00000000000107bc         pop        rbx
00000000000107bd         pop        rbp
00000000000107be         pop        r12
00000000000107c0         pop        r13
00000000000107c2         pop        r14
00000000000107c4         pop        r15
00000000000107c6         ret
                        ; endp
00000000000107c7         align      16

                     loc_107d0:
00000000000107d0         cmp        r12b, 0x5c                                  ; CODE XREF=peek_token+87
00000000000107d4         je         loc_10850

00000000000107d6         mov        byte [rbp+8], 0x1
00000000000107da         mov        qword [rsp+0x68+var_68], rdx
00000000000107de         call       j___ctype_b_loc                             ; __ctype_b_loc
00000000000107e3         mov        rsi, qword [rax]
00000000000107e6         movzx      ecx, r12b
00000000000107ea         movzx      eax, word [rsi+rcx*2]
00000000000107ee         shr        ax, 0x3
00000000000107f2         and        eax, 0x1
00000000000107f5         cmp        r12b, 0x5f
00000000000107f9         sete       cl
00000000000107fc         or         eax, ecx
00000000000107fe         shl        eax, 0x6
0000000000010801         or         r13d, eax
0000000000010804         mov        byte [rbp+0xa], r13b
0000000000010808         mov        rdx, qword [rsp+0x68+var_68]

                     loc_1080c:
000000000001080c         sub        r12d, 0xa                                   ; CODE XREF=peek_token+180
0000000000010810         cmp        r12b, 0x73
0000000000010814         ja         loc_1094c

000000000001081a         lea        rcx, qword [switch_table_15994]             ; switch_table_15994
0000000000010821         movzx      r12d, r12b
0000000000010825         movsxd     rax, dword [rcx+r12*4]
0000000000010829         add        rax, rcx
000000000001082c         jmp        rax                                         ; switch statement using table at 0x15994, with 116 cases, 0x10910,0x10938,0x1094c,0x10960,0x10988,0x109b0,0x109c0,0x109e0,0x109f0,0x10a10,0x10a30,0x10a40,0x10a60,0x10a80
000000000001082e         align      16

                     loc_10830:
0000000000010830         or         r13d, 0x20                                  ; CODE XREF=peek_token+114
0000000000010834         mov        byte [rdi+8], 0x1
0000000000010838         mov        eax, 0x1
000000000001083d         mov        byte [rdi+0xa], r13b
0000000000010841         jmp        loc_107a4
0000000000010846         align      16

                     loc_10850:
0000000000010850         lea        rsi, qword [r14+1]                          ; CODE XREF=peek_token+124, peek_token+244, peek_token+516
0000000000010854         cmp        rsi, qword [rbx+0x58]
0000000000010858         jge        loc_10900

000000000001085e         cmp        byte [rbx+0x8b], 0x0
0000000000010865         jne        loc_10cf0

                     loc_1086b:
000000000001086b         movzx      edi, byte [rdx+r14+1]                       ; CODE XREF=peek_token+1647
0000000000010871         mov        r12d, edi
0000000000010874         mov        dword [rsp+0x68+var_60], edi

                     loc_10878:
0000000000010878         cmp        eax, 0x1                                    ; CODE XREF=peek_token+1653, peek_token+1702
000000000001087b         mov        byte [rbp], r12b
000000000001087f         mov        byte [rbp+8], 0x1
0000000000010883         jle        loc_10cd0

0000000000010889         mov        rax, qword [rbx+0x10]
000000000001088d         mov        r8d, dword [rax+rsi*4]

                     loc_10891:
0000000000010891         mov        edi, r8d                                    ; argument "__wc" for method j_iswalnum, CODE XREF=peek_token+1779
0000000000010894         mov        dword [rsp+0x68+var_68], r8d
0000000000010898         call       j_iswalnum                                  ; iswalnum
000000000001089d         mov        r8d, dword [rsp+0x68+var_68]
00000000000108a1         test       eax, eax
00000000000108a3         setne      al
00000000000108a6         cmp        r8d, 0x5f

                     loc_108aa:
00000000000108aa         sete       dl                                          ; CODE XREF=peek_token+1547
00000000000108ad         lea        ecx, dword [r12-0x27]
00000000000108b2         or         eax, edx
00000000000108b4         shl        eax, 0x6
00000000000108b7         or         r13d, eax
00000000000108ba         cmp        cl, 0x56
00000000000108bd         mov        byte [rbp+0xa], r13b
00000000000108c1         ja         loc_10cc5

00000000000108c7         lea        rdx, qword [switch_table_15b64]             ; switch_table_15b64
00000000000108ce         movzx      ecx, cl
00000000000108d1         movsxd     rax, dword [rdx+rcx*4]
00000000000108d5         add        rax, rdx
00000000000108d8         jmp        rax                                         ; switch statement using table at 0x15b64, with 87 cases, 0x10aa9,0x10ac4,0x10ae2,0x10afd,0x10b18,0x10b36,0x10b58,0x10b7a,0x10b95,0x10bb0,0x10bd2,0x10bed,0x10c0f,0x10c31,0x10c5a,0x10c75,0x10c8c,0x10ca3,0x10cc5
00000000000108da         align      32

                     loc_108e0:
00000000000108e0         cmp        r12b, 0x5c                                  ; CODE XREF=peek_token+97
00000000000108e4         je         loc_10850

00000000000108ea         mov        rax, qword [rbx+0x10]
00000000000108ee         mov        byte [rbp+8], 0x1
00000000000108f2         mov        ecx, dword [rax+r14*4]
00000000000108f6         jmp        loc_10766
00000000000108fb         align      256

                     loc_10900:
0000000000010900         mov        byte [rbp+8], 0x24                          ; CODE XREF=peek_token+376
0000000000010904         mov        eax, 0x1
0000000000010909         jmp        loc_107a4
000000000001090e         align      16

                     loc_10910:
0000000000010910         and        r15d, 0x1200                                ; case 115, CODE XREF=peek_token+332
0000000000010917         mov        eax, 0x1
000000000001091c         cmp        r15, 0x1200
0000000000010923         jne        loc_107a4

                     loc_10929:
0000000000010929         mov        byte [rbp+8], 0x18                          ; CODE XREF=peek_token+1105
000000000001092d         jmp        loc_107a4
0000000000010932         align      8

                     loc_10938:
0000000000010938         and        r15d, 0x8400                                ; case 114, CODE XREF=peek_token+332
000000000001093f         cmp        r15, re_node_set_merge
0000000000010946         je         loc_10a22

                     loc_1094c:
000000000001094c         mov        eax, 0x1                                    ; case 112, CODE XREF=peek_token+308, peek_token+332, peek_token+1664, peek_token+1677
0000000000010951         jmp        loc_107a4
0000000000010956         align      32

                     loc_10960:
0000000000010960         and        r15d, 0x1200                                ; case 113, CODE XREF=peek_token+332
0000000000010967         mov        eax, 0x1
000000000001096c         cmp        r15, 0x1200
0000000000010973         jne        loc_107a4

                     loc_10979:
0000000000010979         mov        byte [rbp+8], 0x17                          ; CODE XREF=peek_token+1021
000000000001097d         jmp        loc_107a4
0000000000010982         align      8

                     loc_10988:
0000000000010988         test       r15d, 0x800008                              ; case 84, CODE XREF=peek_token+332
000000000001098f         jne        loc_1099a

0000000000010991         test       r14, r14
0000000000010994         jne        loc_10d5a

                     loc_1099a:
000000000001099a         mov        byte [rbp+8], 0xc                           ; CODE XREF=peek_token+687, peek_token+1683
000000000001099e         mov        dword [rbp], 0x10
00000000000109a5         mov        eax, 0x1
00000000000109aa         jmp        loc_107a4
00000000000109af         align      16

                     loc_109b0:
00000000000109b0         mov        byte [rbp+8], 0x14                          ; case 81, CODE XREF=peek_token+332
00000000000109b4         mov        eax, 0x1
00000000000109b9         jmp        loc_107a4
00000000000109be         align      64

                     loc_109c0:
00000000000109c0         test       r15d, 0x402                                 ; case 53, CODE XREF=peek_token+332
00000000000109c7         mov        eax, 0x1
00000000000109cc         jne        loc_107a4

                     loc_109d2:
00000000000109d2         mov        byte [rbp+8], 0x13                          ; CODE XREF=peek_token+1288
00000000000109d6         jmp        loc_107a4
00000000000109db         align      32

                     loc_109e0:
00000000000109e0         mov        byte [rbp+8], 0x5                           ; case 36, CODE XREF=peek_token+332
00000000000109e4         mov        eax, 0x1
00000000000109e9         jmp        loc_107a4
00000000000109ee         align      16

                     loc_109f0:
00000000000109f0         test       r15d, 0x402                                 ; case 33, CODE XREF=peek_token+332
00000000000109f7         mov        eax, 0x1
00000000000109fc         jne        loc_107a4

                     loc_10a02:
0000000000010a02         mov        byte [rbp+8], 0x12                          ; CODE XREF=peek_token+1424
0000000000010a06         jmp        loc_107a4
0000000000010a0b         align      16

                     loc_10a10:
0000000000010a10         test       r15d, 0x800                                 ; case 0, CODE XREF=peek_token+332
0000000000010a17         mov        eax, 0x1
0000000000010a1c         je         loc_107a4

                     loc_10a22:
0000000000010a22         mov        byte [rbp+8], 0xa                           ; CODE XREF=peek_token+614
0000000000010a26         mov        eax, 0x1
0000000000010a2b         jmp        loc_107a4

                     loc_10a30:
0000000000010a30         mov        byte [rbp+8], 0xb                           ; case 32, CODE XREF=peek_token+332
0000000000010a34         mov        eax, 0x1
0000000000010a39         jmp        loc_107a4
0000000000010a3e         align      64

                     loc_10a40:
0000000000010a40         test       r15d, 0x2000                                ; case 31, CODE XREF=peek_token+332
0000000000010a47         mov        eax, 0x1
0000000000010a4c         je         loc_107a4

                     loc_10a52:
0000000000010a52         mov        byte [rbp+8], 0x9                           ; CODE XREF=peek_token+1447
0000000000010a56         jmp        loc_107a4
0000000000010a5b         align      32

                     loc_10a60:
0000000000010a60         test       r15d, 0x2000                                ; case 30, CODE XREF=peek_token+332
0000000000010a67         mov        eax, 0x1
0000000000010a6c         je         loc_107a4

                     loc_10a72:
0000000000010a72         mov        byte [rbp+8], 0x8                           ; CODE XREF=peek_token+1470
0000000000010a76         jmp        loc_107a4
0000000000010a7b         align      128

                     loc_10a80:
0000000000010a80         test       r15b, 0x8                                   ; case 26, CODE XREF=peek_token+332
0000000000010a84         jne        loc_10a94

0000000000010a86         add        r14, 0x1
0000000000010a8a         cmp        r14, qword [rbx+0x58]
0000000000010a8e         jne        loc_10d8b

                     loc_10a94:
0000000000010a94         mov        byte [rbp+8], 0xc                           ; CODE XREF=peek_token+932, peek_token+1754
0000000000010a98         mov        dword [rbp], 0x20
0000000000010a9f         mov        eax, 0x1
0000000000010aa4         jmp        loc_107a4

                     loc_10aa9:
0000000000010aa9         test       r15d, 0x8400                                ; case 85, CODE XREF=peek_token+504
0000000000010ab0         mov        eax, 0x2
0000000000010ab5         jne        loc_107a4

0000000000010abb         mov        byte [rbp+8], 0xa
0000000000010abf         jmp        loc_107a4

                     loc_10ac4:
0000000000010ac4         and        r15d, 0x1200                                ; case 84, CODE XREF=peek_token+504
0000000000010acb         mov        eax, 0x2
0000000000010ad0         cmp        r15, 0x200
0000000000010ad7         jne        loc_107a4

0000000000010add         jmp        loc_10979

                     loc_10ae2:
0000000000010ae2         test       r15d, 0x80000                               ; case 80, CODE XREF=peek_token+504
0000000000010ae9         mov        eax, 0x2
0000000000010aee         jne        loc_107a4

0000000000010af4         mov        byte [rbp+8], 0x20
0000000000010af8         jmp        loc_107a4

                     loc_10afd:
0000000000010afd         test       r15d, 0x80000                               ; case 76, CODE XREF=peek_token+504
0000000000010b04         mov        eax, 0x2
0000000000010b09         jne        loc_107a4

0000000000010b0f         mov        byte [rbp+8], 0x22
0000000000010b13         jmp        loc_107a4

                     loc_10b18:
0000000000010b18         and        r15d, 0x1200                                ; case 86, CODE XREF=peek_token+504
0000000000010b1f         mov        eax, 0x2
0000000000010b24         cmp        r15, 0x200
0000000000010b2b         jne        loc_107a4

0000000000010b31         jmp        loc_10929

                     loc_10b36:
0000000000010b36         test       r15d, 0x80000                               ; case 59, CODE XREF=peek_token+504
0000000000010b3d         mov        eax, 0x2
0000000000010b42         jne        loc_107a4

0000000000010b48         mov        byte [rbp+8], 0xc
0000000000010b4c         mov        dword [rbp], 0x100
0000000000010b53         jmp        loc_107a4

                     loc_10b58:
0000000000010b58         test       r15d, 0x80000                               ; case 57, CODE XREF=peek_token+504
0000000000010b5f         mov        eax, 0x2
0000000000010b64         jne        loc_107a4

0000000000010b6a         mov        byte [rbp+8], 0xc
0000000000010b6e         mov        dword [rbp], 0x40
0000000000010b75         jmp        loc_107a4

                     loc_10b7a:
0000000000010b7a         test       r15d, 0x80000                               ; case 48, CODE XREF=peek_token+504
0000000000010b81         mov        eax, 0x2
0000000000010b86         jne        loc_107a4

0000000000010b8c         mov        byte [rbp+8], 0x21
0000000000010b90         jmp        loc_107a4

                     loc_10b95:
0000000000010b95         test       r15d, 0x80000                               ; case 44, CODE XREF=peek_token+504
0000000000010b9c         mov        eax, 0x2
0000000000010ba1         jne        loc_107a4

0000000000010ba7         mov        byte [rbp+8], 0x23
0000000000010bab         jmp        loc_107a4

                     loc_10bb0:
0000000000010bb0         test       r15d, 0x80000                               ; case 27, CODE XREF=peek_token+504
0000000000010bb7         mov        eax, 0x2
0000000000010bbc         jne        loc_107a4

0000000000010bc2         mov        byte [rbp+8], 0xc
0000000000010bc6         mov        dword [rbp], 0x200
0000000000010bcd         jmp        loc_107a4

                     loc_10bd2:
0000000000010bd2         and        r15d, 0x402                                 ; case 24, CODE XREF=peek_token+504
0000000000010bd9         mov        eax, 0x2
0000000000010bde         cmp        r15, 0x2
0000000000010be2         jne        loc_107a4

0000000000010be8         jmp        loc_109d2

                     loc_10bed:
0000000000010bed         test       r15d, 0x80000                               ; case 23, CODE XREF=peek_token+504
0000000000010bf4         mov        eax, 0x2
0000000000010bf9         jne        loc_107a4

0000000000010bff         mov        byte [rbp+8], 0xc
0000000000010c03         mov        dword [rbp], 0x9
0000000000010c0a         jmp        loc_107a4

                     loc_10c0f:
0000000000010c0f         test       r15d, 0x80000                               ; case 21, CODE XREF=peek_token+504
0000000000010c16         mov        eax, 0x2
0000000000010c1b         jne        loc_107a4

0000000000010c21         mov        byte [rbp+8], 0xc
0000000000010c25         mov        dword [rbp], 0x6
0000000000010c2c         jmp        loc_107a4

                     loc_10c31:
0000000000010c31         test       r15d, 0x4000                                ; case 18, CODE XREF=peek_token+504
0000000000010c38         mov        eax, 0x2
0000000000010c3d         jne        loc_107a4

0000000000010c43         mov        edx, dword [rsp+0x68+var_60]
0000000000010c47         mov        byte [rbp+8], 0x4
0000000000010c4b         sub        edx, 0x31
0000000000010c4e         movsxd     rdx, edx
0000000000010c51         mov        qword [rbp], rdx
0000000000010c55         jmp        loc_107a4

                     loc_10c5a:
0000000000010c5a         and        r15d, 0x402                                 ; case 4, CODE XREF=peek_token+504
0000000000010c61         mov        eax, 0x2
0000000000010c66         cmp        r15, 0x2
0000000000010c6a         jne        loc_107a4

0000000000010c70         jmp        loc_10a02

                     loc_10c75:
0000000000010c75         test       r15d, 0x2000                                ; case 2, CODE XREF=peek_token+504
0000000000010c7c         mov        eax, 0x2
0000000000010c81         jne        loc_107a4

0000000000010c87         jmp        loc_10a52

                     loc_10c8c:
0000000000010c8c         test       r15d, 0x2000                                ; case 1, CODE XREF=peek_token+504
0000000000010c93         mov        eax, 0x2
0000000000010c98         jne        loc_107a4

0000000000010c9e         jmp        loc_10a72

                     loc_10ca3:
0000000000010ca3         test       r15d, 0x80000                               ; case 0, CODE XREF=peek_token+504
0000000000010caa         mov        eax, 0x2
0000000000010caf         jne        loc_107a4

0000000000010cb5         mov        byte [rbp+8], 0xc
0000000000010cb9         mov        dword [rbp], 0x80
0000000000010cc0         jmp        loc_107a4

                     loc_10cc5:
0000000000010cc5         mov        eax, 0x2                                    ; case 83, CODE XREF=peek_token+481, peek_token+504
0000000000010cca         jmp        loc_107a4
0000000000010ccf         align      16

                     loc_10cd0:
0000000000010cd0         call       j___ctype_b_loc                             ; __ctype_b_loc, CODE XREF=peek_token+419
0000000000010cd5         mov        rsi, qword [rax]
0000000000010cd8         movzx      edx, r12b
0000000000010cdc         movzx      eax, word [rsi+rdx*2]
0000000000010ce0         shr        ax, 0x3
0000000000010ce4         and        eax, 0x1
0000000000010ce7         cmp        r12b, 0x5f
0000000000010ceb         jmp        loc_108aa

                     loc_10cf0:
0000000000010cf0         cmp        eax, 0x1                                    ; CODE XREF=peek_token+389
0000000000010cf3         jle        loc_10d24

0000000000010cf5         mov        rcx, qword [rbx+0x10]
0000000000010cf9         lea        rdi, qword [rsi*4]
0000000000010d01         mov        r8d, dword [rcx+rsi*4]
0000000000010d05         cmp        r8d, 0xffffffff
0000000000010d09         je         loc_10dbf

0000000000010d0f         lea        r9, qword [r14+2]
0000000000010d13         cmp        qword [rbx+0x30], r9
0000000000010d17         je         loc_10d24

0000000000010d19         cmp        dword [rcx+rdi+4], 0xffffffff
0000000000010d1e         je         loc_10dbf

                     loc_10d24:
0000000000010d24         cmp        byte [rbx+0x8c], 0x0                        ; CODE XREF=peek_token+1555, peek_token+1591
0000000000010d2b         mov        rcx, qword [rbx]
0000000000010d2e         mov        rdi, qword [rbx+0x28]
0000000000010d32         je         loc_10d78

0000000000010d34         mov        r8, qword [rbx+0x18]
0000000000010d38         add        rcx, rdi
0000000000010d3b         add        rcx, qword [r8+rsi*8]
0000000000010d3f         movzx      edi, byte [rcx]
0000000000010d42         mov        r12d, edi
0000000000010d45         mov        dword [rsp+0x68+var_60], edi
0000000000010d49         and        edi, 0x80
0000000000010d4f         jne        loc_1086b

0000000000010d55         jmp        loc_10878

                     loc_10d5a:
0000000000010d5a         cmp        byte [rdx+r14-1], 0xa                       ; CODE XREF=peek_token+692
0000000000010d60         jne        loc_1094c

0000000000010d66         test       r15d, 0x800
0000000000010d6d         je         loc_1094c

0000000000010d73         jmp        loc_1099a

                     loc_10d78:
0000000000010d78         add        rcx, rsi                                    ; CODE XREF=peek_token+1618
0000000000010d7b         movzx      edi, byte [rcx+rdi]
0000000000010d7f         mov        r12d, edi
0000000000010d82         mov        dword [rsp+0x68+var_60], edi
0000000000010d86         jmp        loc_10878

                     loc_10d8b:
0000000000010d8b         lea        rdi, qword [rsp+0x68+var_58]                ; CODE XREF=peek_token+942
0000000000010d90         mov        rdx, r15
0000000000010d93         mov        qword [rbx+0x48], r14
0000000000010d97         mov        rsi, rbx
0000000000010d9a         call       peek_token                                  ; peek_token
0000000000010d9f         movzx      eax, byte [rsp+0x68+var_50]
0000000000010da4         sub        qword [rbx+0x48], 0x1
0000000000010da9         lea        edx, dword [rax-9]
0000000000010dac         mov        eax, 0x1
0000000000010db1         cmp        dl, 0x1
0000000000010db4         ja         loc_107a4

0000000000010dba         jmp        loc_10a94

                     loc_10dbf:
0000000000010dbf         movzx      eax, byte [rdx+r14+1]                       ; CODE XREF=peek_token+1577, peek_token+1598
0000000000010dc5         mov        byte [rbp+8], 0x1
0000000000010dc9         mov        r12d, eax
0000000000010dcc         mov        byte [rbp], al
0000000000010dcf         mov        dword [rsp+0x68+var_60], eax
0000000000010dd3         jmp        loc_10891

                     loc_10dd8:
0000000000010dd8         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=peek_token+210
                        ; endp
0000000000010ddd         align      32                                          ; End of unwind block (FDE at 0x1832c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fetch_number:
0000000000010de0         push       r14                                         ; Begin of unwind block (FDE at 0x18378), CODE XREF=sub_10f30+1175, sub_10f30+1409
0000000000010de2         mov        r14, rdi
0000000000010de5         push       r13
0000000000010de7         mov        r13, rsi
0000000000010dea         push       r12
0000000000010dec         mov        r12, 0xfffffffffffffffe
0000000000010df3         push       rbp
0000000000010df4         mov        rbp, rdx
0000000000010df7         push       rbx
0000000000010df8         mov        rbx, 0xffffffffffffffff
0000000000010dff         nop

                     loc_10e00:
0000000000010e00         mov        rdx, rbp                                    ; CODE XREF=fetch_number+82, fetch_number+135, fetch_number+177
0000000000010e03         mov        rsi, r14
0000000000010e06         mov        rdi, r13
0000000000010e09         call       peek_token                                  ; peek_token
0000000000010e0e         cdqe
0000000000010e10         add        qword [r14+0x48], rax
0000000000010e14         movzx      eax, byte [r13+8]
0000000000010e19         movzx      edx, byte [r13]
0000000000010e1e         cmp        al, 0x2
0000000000010e20         je         loc_10e70

0000000000010e22         cmp        al, 0x18
0000000000010e24         je         loc_10e77

0000000000010e26         cmp        dl, 0x2c
0000000000010e29         je         loc_10e77

0000000000010e2b         cmp        al, 0x1
0000000000010e2d         je         loc_10e38

                     loc_10e2f:
0000000000010e2f         mov        rbx, r12                                    ; CODE XREF=fetch_number+93, fetch_number+99
0000000000010e32         jmp        loc_10e00
0000000000010e34         align      8

                     loc_10e38:
0000000000010e38         lea        eax, dword [rdx-0x30]                       ; CODE XREF=fetch_number+77
0000000000010e3b         cmp        al, 0x9
0000000000010e3d         ja         loc_10e2f

0000000000010e3f         cmp        rbx, 0xfffffffffffffffe
0000000000010e43         je         loc_10e2f

0000000000010e45         cmp        rbx, 0xffffffffffffffff
0000000000010e49         je         loc_10e88

0000000000010e4b         lea        rax, qword [rbx+rbx*4]
0000000000010e4f         lea        rbx, qword [rdx+rax*2]
0000000000010e53         mov        eax, 0x8030
0000000000010e58         cmp        rbx, 0x8030
0000000000010e5f         cmovg      rbx, rax
0000000000010e63         sub        rbx, 0x30
0000000000010e67         jmp        loc_10e00
0000000000010e69         align      16

                     loc_10e70:
0000000000010e70         mov        rbx, 0xfffffffffffffffe                     ; CODE XREF=fetch_number+64

                     loc_10e77:
0000000000010e77         mov        rax, rbx                                    ; CODE XREF=fetch_number+68, fetch_number+73
0000000000010e7a         pop        rbx
0000000000010e7b         pop        rbp
0000000000010e7c         pop        r12
0000000000010e7e         pop        r13
0000000000010e80         pop        r14
0000000000010e82         ret
                        ; endp
0000000000010e83         align      8

                     loc_10e88:
0000000000010e88         movzx      ebx, dl                                     ; CODE XREF=fetch_number+105
0000000000010e8b         sub        ebx, 0x30
0000000000010e8e         movsxd     rbx, ebx
0000000000010e91         jmp        loc_10e00
0000000000010e96         align      32                                          ; End of unwind block (FDE at 0x18378)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_118: int64_t, -280
        ;    var_130: int64_t, -304
        ;    var_138: int64_t, -312
        ;    var_140: int64_t, -320
        ;    var_148: int64_t, -328


                     parse_expression:
0000000000010ea0         push       r15                                         ; Begin of unwind block (FDE at 0x183b8), CODE XREF=sub_116a0+2042, parse_branch+57, parse_branch+146
0000000000010ea2         push       r14
0000000000010ea4         push       r13
0000000000010ea6         push       r12
0000000000010ea8         push       rbp
0000000000010ea9         push       rbx
0000000000010eaa         sub        rsp, 0x128
0000000000010eb1         mov        qword [rsp+0x158+var_138], rcx
0000000000010eb6         movzx      ecx, byte [rdx+8]
0000000000010eba         mov        rax, qword [fs:0x28]
0000000000010ec3         mov        qword [rsp+0x158+var_40], rax
0000000000010ecb         xor        eax, eax
0000000000010ecd         mov        rax, qword [rsi]
0000000000010ed0         mov        qword [rsp+0x158+var_140], rdx
0000000000010ed5         mov        qword [rsp+0x158+var_118], r9
0000000000010eda         cmp        cl, 0x24
0000000000010edd         mov        qword [rsp+0x158+var_148], rax
0000000000010ee2         ja         loc_10fa0

0000000000010ee8         mov        rbp, rsi
0000000000010eeb         lea        rsi, qword [switch_table_15b64+348]         ; 0x15cc0
0000000000010ef2         movzx      edx, cl
0000000000010ef5         mov        r14, rdi
0000000000010ef8         movsxd     rax, dword [rsi+rdx*4]
0000000000010efc         add        rax, rsi
0000000000010eff         jmp        rax
                        ; endp
0000000000010f01         mov        rbx, qword [rbp+0x30]
0000000000010f05         mov        r15, qword [rsp+0x20]
0000000000010f0a         mov        rsi, rdi
0000000000010f0d         mov        r13, qword [rsp+0x18]
0000000000010f12         mov        qword [rsp], r8
0000000000010f16         lea        rax, qword [rbx+1]
0000000000010f1a         mov        rdx, r15
0000000000010f1d         or         rdx, 0x800000
0000000000010f24         mov        rdi, r13
0000000000010f27         mov        qword [rbp+0x30], rax
0000000000010f2b         call       peek_token                                  ; peek_token


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_10f30:
0000000000010f30         cdqe
0000000000010f32         add        qword [r14+0x48], rax
0000000000010f36         xor        eax, eax
0000000000010f38         cmp        byte [r13+8], 0x9
0000000000010f3d         mov        rdx, r13
0000000000010f40         je         loc_11a40

0000000000010f46         mov        r13, qword [rsp+64]
0000000000010f4b         mov        r8, qword [rsp+0]
0000000000010f4f         mov        rcx, r15                                    ; argument #4 for method parse_reg_exp
0000000000010f52         mov        rsi, rbp                                    ; argument #2 for method parse_reg_exp
0000000000010f55         mov        rdi, r14                                    ; argument #1 for method parse_reg_exp
0000000000010f58         add        r8, 0x1                                     ; argument #5 for method parse_reg_exp
0000000000010f5c         mov        r9, r13                                     ; argument #6 for method parse_reg_exp
0000000000010f5f         call       parse_reg_exp                               ; parse_reg_exp
0000000000010f64         mov        r11d, dword [r13]
0000000000010f68         test       r11d, r11d
0000000000010f6b         jne        sub_10f30+112

0000000000010f6d         mov        rdx, qword [rsp+24]
0000000000010f72         cmp        byte [rdx+8], 0x9
0000000000010f76         je         loc_11a40

0000000000010f7c         test       rax, rax
0000000000010f7f         je         loc_10f92

0000000000010f81         lea        rsi, qword [free_tree]                      ; argument #2 for method postorder, free_tree
0000000000010f88         xor        edx, edx                                    ; argument #3 for method postorder
0000000000010f8a         mov        rdi, rax                                    ; argument #1 for method postorder
0000000000010f8d         call       postorder                                   ; postorder

                     loc_10f92:
0000000000010f92         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_10f30+79
0000000000010f97         mov        dword [rax], 0x8
0000000000010f9d         nop        dword [rax]
                        ; endp

                     loc_10fa0:
0000000000010fa0         mov        qword [rsp+0x158+var_130], 0x0              ; CODE XREF=parse_expression+66, sub_116a0+431
0000000000010fa9         nop        dword [rax]
0000000000010fb0         mov        rdi, qword [rsp+0x158+var_40]               ; CODE XREF=sub_116a0+923, sub_116a0+1015, sub_116a0+2052, sub_116a0+2114
0000000000010fb8         xor        rdi, qword [fs:0x28]
0000000000010fc1         mov        rax, qword [rsp+0x158+var_130]
0000000000010fc6         jne        loc_1233e

0000000000010fcc         add        rsp, 0x128
0000000000010fd3         pop        rbx
0000000000010fd4         pop        rbp
0000000000010fd5         pop        r12
0000000000010fd7         pop        r13
0000000000010fd9         pop        r14
0000000000010fdb         pop        r15
0000000000010fdd         ret
                        ; endp
0000000000010fde         test       qword [rsp+0x20], 0x1000000
0000000000010fe7         jne        sub_10f30+781
0000000000010fed         mov        rax, qword [rsp+0x20]
0000000000010ff2         test       al, 0x20
0000000000010ff4         jne        sub_10f30+781
0000000000010ffa         test       al, 0x10
0000000000010ffc         jne        sub_116a0+1989
0000000000011002         cmp        cl, 0x9
0000000000011005         je         sub_116a0+888
000000000001100b         mov        rax, qword [rsp+0x10]                       ; CODE XREF=sub_116a0+897
0000000000011010         mov        r8, qword [rsp+0x18]
0000000000011015         xor        ecx, ecx
0000000000011017         xor        edx, edx
0000000000011019         lea        rsi, qword [rax+0x80]
0000000000011020         lea        rdi, qword [rax+0x70]
0000000000011024         mov        byte [r8+8], 0x1
0000000000011029         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000001102e         test       rax, rax
0000000000011031         mov        qword [rsp+0x28], rax
0000000000011036         je         sub_116a0+872

                     loc_1103c:
000000000001103c         mov        rbx, qword [rsp+24]                         ; CODE XREF=sub_116a0+416, sub_116a0+425, sub_116a0+580, sub_116a0+636, sub_116a0+649, sub_116a0+729, sub_116a0+990, sub_116a0+1526
0000000000011041         mov        rdx, qword [rsp+32]                         ; argument #3 for method peek_token
0000000000011046         mov        rsi, r14                                    ; argument #2 for method peek_token
0000000000011049         lea        r15, qword [rsp+192]
0000000000011051         mov        rdi, rbx                                    ; argument #1 for method peek_token
0000000000011054         call       peek_token                                  ; peek_token
0000000000011059         cdqe
000000000001105b         add        qword [r14+0x48], rax
000000000001105f         movzx      eax, byte [rbx+8]
0000000000011063         nop        dword [rax+rax]

                     loc_11068:
0000000000011068         cmp        al, 0x17                                    ; CODE XREF=sub_10f30+736, sub_10f30+748
000000000001106a         ja         sub_10f30+128

0000000000011070         cmp        al, 0x12
0000000000011072         mov        ecx, 0x8c0800
0000000000011077         sete       bl
000000000001107a         bt         rcx, rax
000000000001107e         jae        sub_10f30+128

0000000000011084         mov        rcx, qword [rsp+24]
0000000000011089         cmp        al, 0x17
000000000001108b         mov        rbp, qword [r14+0x48]
000000000001108f         movdqa     xmm0, xmmword [rcx]
0000000000011093         je         loc_113b8

0000000000011099         cmp        al, 0x13
000000000001109b         movzx      ebx, bl
000000000001109e         je         loc_11350

00000000000110a4         mov        rdx, qword [rsp+32]                         ; argument #3 for method peek_token
00000000000110a9         mov        rdi, qword [rsp+24]                         ; argument #1 for method peek_token
00000000000110ae         mov        rsi, r14                                    ; argument #2 for method peek_token
00000000000110b1         call       peek_token                                  ; peek_token
00000000000110b6         cdqe
00000000000110b8         add        qword [r14+0x48], rax
00000000000110bc         cmp        qword [rsp+40], 0x0
00000000000110c2         je         loc_11450

00000000000110c8         mov        qword [rsp+0], 0xffffffffffffffff

                     loc_110d0:
00000000000110d0         test       rbx, rbx                                    ; CODE XREF=sub_10f30+1107
00000000000110d3         mov        rbp, qword [rsp+40]
00000000000110d8         mov        qword [rsp+48], 0x0
00000000000110e1         jg         loc_11260

                     loc_110e7:
00000000000110e7         cmp        byte [rbp+0x30], 0x11                       ; CODE XREF=sub_10f30+993
00000000000110eb         je         loc_11430

                     loc_110f1:
00000000000110f1         cmp        qword [rsp+0], 0xffffffffffffffff           ; CODE XREF=sub_10f30+1299
00000000000110f6         mov        rdx, rbp                                    ; argument #3 for method create_token_tree.isra.16
00000000000110f9         mov        r8, r15                                     ; argument #5 for method create_token_tree.isra.16
00000000000110fc         sete       al
00000000000110ff         xor        ecx, ecx                                    ; argument #4 for method create_token_tree.isra.16
0000000000011101         add        eax, 0xa
0000000000011104         mov        byte [rsp+200], al
000000000001110b         mov        rax, qword [rsp+16]
0000000000011110         lea        r12, qword [rax+0x70]
0000000000011114         lea        r13, qword [rax+0x80]
000000000001111b         mov        rdi, r12                                    ; argument #1 for method create_token_tree.isra.16
000000000001111e         mov        rsi, r13                                    ; argument #2 for method create_token_tree.isra.16
0000000000011121         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000011126         test       rax, rax
0000000000011129         mov        rdx, rax
000000000001112c         je         loc_11320

0000000000011132         add        rbx, 0x2
0000000000011136         cmp        rbx, qword [rsp+0]
000000000001113a         jg         loc_111bb

000000000001113c         mov        qword [rsp+72], r14
0000000000011141         mov        r14, rax

                     loc_11144:
0000000000011144         mov        rsi, qword [rsp+16]                         ; argument #2 for method duplicate_tree, CODE XREF=sub_10f30+641
0000000000011149         mov        rdi, rbp                                    ; argument #1 for method duplicate_tree
000000000001114c         call       duplicate_tree                              ; duplicate_tree
0000000000011151         mov        r8, r15                                     ; argument #5 for method create_token_tree.isra.16
0000000000011154         mov        rbp, rax
0000000000011157         mov        rcx, rax                                    ; argument #4 for method create_token_tree.isra.16
000000000001115a         mov        rdx, r14                                    ; argument #3 for method create_token_tree.isra.16
000000000001115d         mov        rsi, r13                                    ; argument #2 for method create_token_tree.isra.16
0000000000011160         mov        rdi, r12                                    ; argument #1 for method create_token_tree.isra.16
0000000000011163         mov        byte [rsp+200], 0x10
000000000001116b         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000011170         test       rbp, rbp
0000000000011173         je         loc_11320

0000000000011179         test       rax, rax
000000000001117c         je         loc_11320

0000000000011182         xor        ecx, ecx                                    ; argument #4 for method create_token_tree.isra.16
0000000000011184         mov        r8, r15                                     ; argument #5 for method create_token_tree.isra.16
0000000000011187         mov        rdx, rax                                    ; argument #3 for method create_token_tree.isra.16
000000000001118a         mov        rsi, r13                                    ; argument #2 for method create_token_tree.isra.16
000000000001118d         mov        rdi, r12                                    ; argument #1 for method create_token_tree.isra.16
0000000000011190         mov        byte [rsp+200], 0xa
0000000000011198         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000001119d         test       rax, rax
00000000000111a0         mov        r14, rax
00000000000111a3         je         loc_11320

00000000000111a9         add        rbx, 0x1
00000000000111ad         cmp        rbx, qword [rsp+0]
00000000000111b1         jle        loc_11144

00000000000111b3         mov        r14, qword [rsp+72]
00000000000111b8         mov        rdx, rax

                     loc_111bb:
00000000000111bb         mov        rax, qword [rsp+48]                         ; CODE XREF=sub_10f30+522
00000000000111c0         test       rax, rax
00000000000111c3         je         loc_11470

00000000000111c9         mov        rcx, rdx                                    ; argument #4 for method create_token_tree.isra.16
00000000000111cc         mov        r8, r15                                     ; argument #5 for method create_token_tree.isra.16
00000000000111cf         mov        rdx, rax                                    ; argument #3 for method create_token_tree.isra.16
00000000000111d2         mov        rsi, r13                                    ; argument #2 for method create_token_tree.isra.16
00000000000111d5         mov        rdi, r12                                    ; argument #1 for method create_token_tree.isra.16
00000000000111d8         mov        byte [rsp+200], 0x10
00000000000111e0         call       create_token_tree.isra.16                   ; create_token_tree.isra.16

                     loc_111e5:
00000000000111e5         mov        rdi, qword [rsp+64]                         ; CODE XREF=sub_10f30+1265
00000000000111ea         mov        edx, dword [rdi]
00000000000111ec         test       edx, edx
00000000000111ee         je         loc_111f9

00000000000111f0         test       rax, rax
00000000000111f3         je         loc_1154b

                     loc_111f9:
00000000000111f9         mov        qword [rsp+40], rax                         ; CODE XREF=sub_10f30+702

                     loc_111fe:
00000000000111fe         test       qword [rsp+32], 0x1000000                   ; CODE XREF=sub_10f30+1152, sub_10f30+1349
0000000000011207         mov        rax, qword [rsp+24]
000000000001120c         movzx      eax, byte [rax+8]
0000000000011210         je         loc_11068

0000000000011216         cmp        al, 0xb
0000000000011218         je         loc_11222

000000000001121a         cmp        al, 0x17
000000000001121c         jne        loc_11068

                     loc_11222:
0000000000011222         mov        rax, qword [rsp+40]                         ; CODE XREF=sub_10f30+744
0000000000011227         test       rax, rax
000000000001122a         je         loc_1123d

000000000001122c         lea        rsi, qword [free_tree]                      ; argument #2 for method postorder, free_tree
0000000000011233         xor        edx, edx                                    ; argument #3 for method postorder
0000000000011235         mov        rdi, rax                                    ; argument #1 for method postorder
0000000000011238         call       postorder                                   ; postorder

                     loc_1123d:
000000000001123d         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_10f30+183, sub_10f30+196, sub_10f30+762
0000000000011242         mov        qword [rsp+40], 0x0
000000000001124b         mov        dword [rax], 0xd
0000000000011251         jmp        sub_10f30+128
                        ; endp
0000000000011256         nop        word [cs:rax+rax]

                     loc_11260:
0000000000011260         cmp        rbx, 0x1                                    ; CODE XREF=sub_10f30+433
0000000000011264         je         loc_11a9c

000000000001126a         mov        rax, qword [rsp+16]
000000000001126f         mov        r13, rbp
0000000000011272         mov        qword [rsp+72], r14
0000000000011277         lea        r12, qword [rax+0x80]
000000000001127e         lea        rdi, qword [rax+0x70]
0000000000011282         mov        rax, rbp
0000000000011285         mov        r14, rax
0000000000011288         mov        ebp, 0x2
000000000001128d         mov        rsi, r12
0000000000011290         mov        qword [rsp+48], rdi
0000000000011295         mov        r12, r13
0000000000011298         mov        r13, rbx
000000000001129b         mov        rbx, rsi
000000000001129e         nop

                     loc_112a0:
00000000000112a0         mov        rsi, qword [rsp+16]                         ; argument #2 for method duplicate_tree, CODE XREF=sub_10f30+946
00000000000112a5         mov        rdi, r12                                    ; argument #1 for method duplicate_tree
00000000000112a8         call       duplicate_tree                              ; duplicate_tree
00000000000112ad         mov        rdi, qword [rsp+48]                         ; argument #1 for method create_token_tree.isra.16
00000000000112b2         mov        r12, rax
00000000000112b5         mov        rdx, r14                                    ; argument #3 for method create_token_tree.isra.16
00000000000112b8         mov        r8, r15                                     ; argument #5 for method create_token_tree.isra.16
00000000000112bb         mov        rcx, rax                                    ; argument #4 for method create_token_tree.isra.16
00000000000112be         mov        rsi, rbx                                    ; argument #2 for method create_token_tree.isra.16
00000000000112c1         mov        byte [rsp+200], 0x10
00000000000112c9         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
00000000000112ce         test       r12, r12
00000000000112d1         mov        r14, rax
00000000000112d4         je         loc_11320

00000000000112d6         test       rax, rax
00000000000112d9         je         loc_11320

00000000000112db         add        rbp, 0x1
00000000000112df         cmp        rbp, r13
00000000000112e2         jle        loc_112a0

00000000000112e4         mov        r14, qword [rsp+72]
00000000000112e9         mov        rbx, r13
00000000000112ec         mov        qword [rsp+48], rax
00000000000112f1         mov        r13, r12

                     loc_112f4:
00000000000112f4         cmp        qword [rsp+0], rbx                          ; CODE XREF=sub_116a0+1030
00000000000112f8         je         loc_11464

00000000000112fe         mov        rsi, qword [rsp+16]                         ; argument #2 for method duplicate_tree
0000000000011303         mov        rdi, r13                                    ; argument #1 for method duplicate_tree
0000000000011306         call       duplicate_tree                              ; duplicate_tree
000000000001130b         test       rax, rax
000000000001130e         mov        rbp, rax
0000000000011311         jne        loc_110e7

0000000000011317         nop        word [rax+rax]

                     loc_11320:
0000000000011320         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_10f30+508, sub_10f30+579, sub_10f30+588, sub_10f30+627, sub_10f30+932, sub_10f30+937
0000000000011325         mov        dword [rax], 0xc

                     loc_1132b:
000000000001132b         mov        rdi, qword [rsp+40]                         ; argument #1 for method postorder, CODE XREF=sub_10f30+1141, sub_10f30+1569
0000000000011330         lea        rsi, qword [free_tree]                      ; argument #2 for method postorder, free_tree
0000000000011337         xor        edx, edx                                    ; argument #3 for method postorder
0000000000011339         call       postorder                                   ; postorder
000000000001133e         mov        qword [rsp+40], 0x0
0000000000011347         jmp        sub_10f30+128
                        ; endp
000000000001134c         nop        dword [rax]

                     loc_11350:
0000000000011350         mov        qword [rsp+0], 0x1                          ; CODE XREF=sub_10f30+366

                     loc_11358:
0000000000011358         mov        rdx, qword [rsp+32]                         ; argument #3 for method peek_token, CODE XREF=sub_10f30+1482
000000000001135d         mov        rdi, qword [rsp+24]                         ; argument #1 for method peek_token
0000000000011362         mov        rsi, r14                                    ; argument #2 for method peek_token
0000000000011365         call       peek_token                                  ; peek_token
000000000001136a         cdqe
000000000001136c         add        qword [r14+0x48], rax
0000000000011370         cmp        qword [rsp+40], 0x0
0000000000011376         je         loc_11450

000000000001137c         mov        rax, qword [rsp+0]
0000000000011380         or         rax, rbx
0000000000011383         jne        loc_110d0

0000000000011389         mov        rdi, qword [rsp+40]                         ; argument #1 for method postorder
000000000001138e         lea        rsi, qword [free_tree]                      ; argument #2 for method postorder, free_tree
0000000000011395         xor        edx, edx                                    ; argument #3 for method postorder
0000000000011397         call       postorder                                   ; postorder
000000000001139c         mov        rax, qword [rsp+64]
00000000000113a1         mov        esi, dword [rax]
00000000000113a3         test       esi, esi
00000000000113a5         jne        loc_1132b

                     loc_113a7:
00000000000113a7         mov        qword [rsp+40], 0x0                         ; CODE XREF=sub_10f30+1321
00000000000113b0         jmp        loc_111fe
00000000000113b5         nop        dword [rax]

                     loc_113b8:
00000000000113b8         mov        rdx, qword [rsp+32]                         ; argument #3 for method fetch_number, CODE XREF=sub_10f30+355
00000000000113bd         mov        rsi, rcx                                    ; argument #2 for method fetch_number
00000000000113c0         mov        rdi, r14                                    ; argument #1 for method fetch_number
00000000000113c3         movaps     xmmword [rsp+0], xmm0
00000000000113c7         call       fetch_number                                ; fetch_number
00000000000113cc         cmp        rax, 0xffffffffffffffff
00000000000113d0         mov        rbx, rax
00000000000113d3         movdqa     xmm0, xmmword [rsp+0]
00000000000113d8         je         loc_11480

00000000000113de         cmp        rax, 0xfffffffffffffffe
00000000000113e2         je         loc_113fd

00000000000113e4         mov        rax, qword [rsp+24]
00000000000113e9         movzx      eax, byte [rax+8]
00000000000113ed         cmp        al, 0x18
00000000000113ef         je         loc_11510

00000000000113f5         cmp        al, 0x1
00000000000113f7         je         loc_11523

                     loc_113fd:
00000000000113fd         test       qword [rsp+32], 0x200000                    ; CODE XREF=sub_10f30+1202, sub_10f30+1428
0000000000011406         je         loc_12343

                     loc_1140c:
000000000001140c         mov        rax, qword [rsp+24]                         ; CODE XREF=sub_10f30+1546
0000000000011411         mov        qword [r14+0x48], rbp
0000000000011415         movaps     xmmword [rax], xmm0
0000000000011418         mov        byte [rax+8], 0x1
000000000001141c         mov        rax, qword [rsp+40]
0000000000011421         jmp        loc_111e5
0000000000011426         nop        word [cs:rax+rax]

                     loc_11430:
0000000000011430         mov        rdx, qword [rbp+0x28]                       ; argument #3 for method postorder, CODE XREF=sub_10f30+443
0000000000011434         lea        rsi, qword [mark_opt_subexp]                ; argument #2 for method postorder, mark_opt_subexp
000000000001143b         mov        rdi, rbp                                    ; argument #1 for method postorder
000000000001143e         call       postorder                                   ; postorder
0000000000011443         jmp        loc_110f1
0000000000011448         nop        dword [rax+rax]

                     loc_11450:
0000000000011450         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_10f30+402, sub_10f30+1094
0000000000011455         mov        ecx, dword [rax]
0000000000011457         test       ecx, ecx
0000000000011459         je         loc_113a7

000000000001145f         jmp        sub_10f30+112
                        ; endp

                     loc_11464:
0000000000011464         mov        rdx, qword [rsp+48]                         ; CODE XREF=sub_10f30+968
0000000000011469         nop        dword [rax]

                     loc_11470:
0000000000011470         mov        qword [rsp+40], rdx                         ; CODE XREF=sub_10f30+659
0000000000011475         jmp        loc_111fe
000000000001147a         nop        word [rax+rax]

                     loc_11480:
0000000000011480         mov        rax, qword [rsp+24]                         ; CODE XREF=sub_10f30+1192
0000000000011485         cmp        byte [rax+8], 0x1
0000000000011489         jne        loc_11540

000000000001148f         mov        rax, qword [rsp+24]
0000000000011494         cmp        byte [rax], 0x2c
0000000000011497         jne        loc_11540

000000000001149d         xor        ebx, ebx

                     loc_1149f:
000000000001149f         mov        rdx, qword [rsp+32]                         ; argument #3 for method fetch_number, CODE XREF=sub_10f30+1531
00000000000114a4         mov        rsi, qword [rsp+24]                         ; argument #2 for method fetch_number
00000000000114a9         mov        rdi, r14                                    ; argument #1 for method fetch_number
00000000000114ac         movaps     xmmword [rsp+48], xmm0
00000000000114b1         call       fetch_number                                ; fetch_number
00000000000114b6         cmp        rax, 0xfffffffffffffffe
00000000000114ba         mov        qword [rsp+0], rax
00000000000114be         movdqa     xmm0, xmmword [rsp+48]
00000000000114c4         je         loc_113fd

00000000000114ca         mov        rax, qword [rsp+0]
00000000000114ce         cmp        rax, 0xffffffffffffffff
00000000000114d2         je         loc_114d9

00000000000114d4         cmp        rax, rbx
00000000000114d7         jl         loc_11540

                     loc_114d9:
00000000000114d9         mov        rax, qword [rsp+24]                         ; CODE XREF=sub_10f30+1442
00000000000114de         cmp        byte [rax+8], 0x18
00000000000114e2         jne        loc_11540

00000000000114e4         cmp        qword [rsp+0], 0xffffffffffffffff
00000000000114e9         jne        loc_11514

00000000000114eb         xor        eax, eax
00000000000114ed         cmp        rbx, 0x7fff
00000000000114f4         setg       al

                     loc_114f7:
00000000000114f7         test       rax, rax                                    ; CODE XREF=sub_10f30+1521
00000000000114fa         je         loc_11358

0000000000011500         mov        rax, qword [rsp+64]
0000000000011505         mov        dword [rax], 0xf
000000000001150b         jmp        loc_1154b
000000000001150d         nop        dword [rax]

                     loc_11510:
0000000000011510         mov        qword [rsp+0], rbx                          ; CODE XREF=sub_10f30+1215

                     loc_11514:
0000000000011514         xor        eax, eax                                    ; CODE XREF=sub_10f30+1465
0000000000011516         cmp        qword [rsp+0], 0x7fff
000000000001151e         setg       al
0000000000011521         jmp        loc_114f7

                     loc_11523:
0000000000011523         mov        rax, qword [rsp+24]                         ; CODE XREF=sub_10f30+1223
0000000000011528         cmp        byte [rax], 0x2c
000000000001152b         je         loc_1149f

0000000000011531         test       qword [rsp+32], 0x200000
000000000001153a         jne        loc_1140c

                     loc_11540:
0000000000011540         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_10f30+1369, sub_10f30+1383, sub_10f30+1447, sub_10f30+1458, sub_116a0+3244
0000000000011545         mov        dword [rax], 0xa

                     loc_1154b:
000000000001154b         cmp        qword [rsp+40], 0x0                         ; CODE XREF=sub_10f30+707, sub_10f30+1499, sub_116a0+3261
0000000000011551         jne        loc_1132b

0000000000011557         jmp        sub_10f30+112
                        ; endp
000000000001155c         nop        dword [rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_11560:
0000000000011560         mov        rax, qword [rsp+24]
0000000000011565         mov        ebp, dword [rax]
0000000000011567         test       ebp, 0x30f
000000000001156d         je         loc_115d1

000000000001156f         mov        rax, qword [rsp+16]
0000000000011574         movzx      eax, byte [rax+0xb0]
000000000001157b         test       al, 0x10
000000000001157d         jne        loc_115d1

000000000001157f         mov        rdi, qword [rsp+16]
0000000000011584         or         eax, 0x10
0000000000011587         test       al, 0x8
0000000000011589         mov        byte [rdi+0xb0], al
000000000001158f         jne        loc_12193

0000000000011595         movabs     rdx, 0x3ff000000000000
000000000001159f         test       al, 0x4
00000000000115a1         mov        qword [rdi+0xb8], rdx
00000000000115a8         movabs     rdx, 0x7fffffe87fffffe
00000000000115b2         mov        qword [rdi+0xc0], rdx
00000000000115b9         je         loc_12118

00000000000115bf         pxor       xmm0, xmm0
00000000000115c3         mov        rax, qword [rsp+24]
00000000000115c8         movups     xmmword [rdi+0xc8], xmm0
00000000000115cf         mov        ebp, dword [rax]

                     loc_115d1:
00000000000115d1         mov        rax, qword [rsp+16]                         ; CODE XREF=sub_11560+13, sub_11560+29, sub_116a0+2798
00000000000115d6         lea        rbx, qword [rax+0x70]
00000000000115da         lea        r12, qword [rax+0x80]
00000000000115e1         lea        eax, dword [rbp-0x100]
00000000000115e7         test       eax, 0xfffffeff
00000000000115ec         jne        loc_11c5a

00000000000115f2         cmp        ebp, 0x100
00000000000115f8         mov        r15, qword [rsp+24]
00000000000115fd         je         loc_11c32

0000000000011603         mov        dword [r15], 0x5
000000000001160a         mov        r8, r15                                     ; argument #5 for method create_token_tree.isra.16
000000000001160d         xor        ecx, ecx                                    ; argument #4 for method create_token_tree.isra.16
000000000001160f         xor        edx, edx                                    ; argument #3 for method create_token_tree.isra.16
0000000000011611         mov        rsi, r12                                    ; argument #2 for method create_token_tree.isra.16
0000000000011614         mov        rdi, rbx                                    ; argument #1 for method create_token_tree.isra.16
0000000000011617         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000001161c         mov        dword [r15], 0xa
0000000000011623         mov        rbp, rax

                     loc_11626:
0000000000011626         mov        r8, qword [rsp+24]                          ; argument #5 for method create_token_tree.isra.16, CODE XREF=sub_116a0+1461
000000000001162b         xor        ecx, ecx                                    ; argument #4 for method create_token_tree.isra.16
000000000001162d         xor        edx, edx                                    ; argument #3 for method create_token_tree.isra.16
000000000001162f         mov        rsi, r12                                    ; argument #2 for method create_token_tree.isra.16
0000000000011632         mov        rdi, rbx                                    ; argument #1 for method create_token_tree.isra.16
0000000000011635         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000001163a         lea        r8, qword [rsp+192]                         ; argument #5 for method create_token_tree.isra.16
0000000000011642         mov        rdx, rbp                                    ; argument #3 for method create_token_tree.isra.16
0000000000011645         mov        rdi, rbx                                    ; argument #1 for method create_token_tree.isra.16
0000000000011648         mov        rcx, rax                                    ; argument #4 for method create_token_tree.isra.16
000000000001164b         mov        rsi, r12                                    ; argument #2 for method create_token_tree.isra.16
000000000001164e         mov        r13, rax
0000000000011651         mov        byte [rsp+200], 0xa
0000000000011659         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000001165e         test       rbp, rbp
0000000000011661         mov        rdi, rax
0000000000011664         mov        qword [rsp+40], rax
0000000000011669         sete       dl
000000000001166c         test       r13, r13
000000000001166f         sete       al
0000000000011672         or         dl, al
0000000000011674         jne        sub_116a0+872

000000000001167a         test       rdi, rdi
000000000001167d         je         sub_116a0+872

                     loc_11683:
0000000000011683         mov        rdx, qword [rsp+32]                         ; argument #3 for method peek_token, CODE XREF=sub_116a0+1494
0000000000011688         mov        rdi, qword [rsp+24]                         ; argument #1 for method peek_token
000000000001168d         mov        rsi, r14                                    ; argument #2 for method peek_token
0000000000011690         call       peek_token                                  ; peek_token
0000000000011695         cdqe
0000000000011697         add        qword [r14+0x48], rax
000000000001169b         jmp        sub_10f30+128
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_116a0:
00000000000116a0         mov        esi, 0x1                                    ; argument "__size" for method j_calloc
00000000000116a5         mov        edi, 0x20                                   ; argument "__nmemb" for method j_calloc
00000000000116aa         mov        qword [rsp+152], 0x0
00000000000116b6         call       j_calloc                                    ; calloc
00000000000116bb         mov        esi, 0x1                                    ; argument "__size" for method j_calloc
00000000000116c0         mov        r12, rax
00000000000116c3         mov        edi, 0x50                                   ; argument "__nmemb" for method j_calloc
00000000000116c8         call       j_calloc                                    ; calloc
00000000000116cd         test       r12, r12
00000000000116d0         mov        r13, rax
00000000000116d3         sete       dl
00000000000116d6         test       rax, rax
00000000000116d9         sete       al
00000000000116dc         or         dl, al
00000000000116de         jne        loc_11eb9

00000000000116e4         mov        r10, qword [rsp+24]
00000000000116e9         mov        rdx, qword [rsp+32]                         ; argument #3 for method peek_token_bracket
00000000000116ee         mov        rsi, r14                                    ; argument #2 for method peek_token_bracket
00000000000116f1         mov        rdi, r10                                    ; argument #1 for method peek_token_bracket
00000000000116f4         call       peek_token_bracket                          ; peek_token_bracket
00000000000116f9         movsxd     rbx, eax
00000000000116fc         movzx      eax, byte [r10+8]
0000000000011701         cmp        al, 0x2
0000000000011703         je         loc_11ea9

0000000000011709         cmp        al, 0x19
000000000001170b         mov        byte [rsp+87], 0x0
0000000000011710         je         loc_11bda

                     loc_11716:
0000000000011716         cmp        al, 0x15                                    ; CODE XREF=sub_116a0+1407
0000000000011718         je         loc_11c24

                     loc_1171e:
000000000001171e         lea        rax, qword [rsp+208]                        ; CODE XREF=sub_116a0+1421
0000000000011726         mov        r15, qword [rsp+24]
000000000001172b         lea        rbp, qword [switch_table_15d54]             ; switch_table_15d54
0000000000011732         mov        qword [rsp+72], 0x0
000000000001173b         mov        r9d, 0x1
0000000000011741         mov        qword [rsp+48], 0x0
000000000001174a         mov        qword [rsp+40], rax
000000000001174f         lea        rax, qword [rsp+160]
0000000000011757         mov        qword [rsp+0], rax
000000000001175b         lea        rax, qword [rsp+152]
0000000000011763         mov        qword [rsp+88], rax
0000000000011768         lea        rax, qword [rsp+192]
0000000000011770         mov        qword [rsp+96], rax
0000000000011775         lea        rax, qword [rsp+240]
000000000001177d         mov        qword [rsp+104], rax

                     loc_11782:
0000000000011782         mov        rax, qword [rsp+40]                         ; CODE XREF=sub_116a0+1112
0000000000011787         mov        r8, qword [rsp+32]                          ; argument #5 for method parse_bracket_element.constprop.37
000000000001178c         and        r9d, 0x1                                    ; argument #6 for method parse_bracket_element.constprop.37
0000000000011790         mov        rdi, qword [rsp+0]                          ; argument #1 for method parse_bracket_element.constprop.37
0000000000011794         mov        ecx, ebx                                    ; argument #4 for method parse_bracket_element.constprop.37
0000000000011796         mov        rdx, r15                                    ; argument #3 for method parse_bracket_element.constprop.37
0000000000011799         mov        rsi, r14                                    ; argument #2 for method parse_bracket_element.constprop.37
000000000001179c         mov        dword [rsp+160], 0x3
00000000000117a7         mov        qword [rsp+168], rax
00000000000117af         call       parse_bracket_element.constprop.37          ; parse_bracket_element.constprop.37
00000000000117b4         test       eax, eax
00000000000117b6         jne        loc_11c9b

00000000000117bc         mov        rdx, qword [rsp+32]                         ; argument #3 for method peek_token_bracket
00000000000117c1         mov        rsi, r14                                    ; argument #2 for method peek_token_bracket
00000000000117c4         mov        rdi, r15                                    ; argument #1 for method peek_token_bracket
00000000000117c7         call       peek_token_bracket                          ; peek_token_bracket
00000000000117cc         movsxd     rbx, eax
00000000000117cf         mov        eax, dword [rsp+160]
00000000000117d6         lea        edx, dword [rax-2]
00000000000117d9         and        edx, 0xfffffffd
00000000000117dc         je         loc_117f5

00000000000117de         movzx      edx, byte [r15+8]
00000000000117e3         cmp        dl, 0x2
00000000000117e6         je         loc_11c81

00000000000117ec         cmp        dl, 0x16
00000000000117ef         je         loc_11ca7

                     loc_117f5:
00000000000117f5         cmp        eax, 0x4                                    ; CODE XREF=sub_116a0+316, sub_116a0+2141
00000000000117f8         ja         loc_1219a

00000000000117fe         movsxd     rax, dword [rbp+rax*4]
0000000000011803         add        rax, rbp
0000000000011806         jmp        rax                                         ; switch statement using table at 0x15d54, with 5 cases, 0x11ac5,0x11afd,0x11b47,0x11b71,0x11b99
0000000000011808         mov        rbx, qword [rsp+0x40]
000000000001180d         cmp        cl, 0x23
0000000000011810         mov        rsi, qword [rdi+0x78]
0000000000011814         sete       r8b
0000000000011818         lea        rcx, qword [aVersion+9]                     ; 0x145ad
000000000001181f         lea        rdx, qword [aSpace]                         ; "space"
0000000000011826         movzx      r8d, r8b
000000000001182a         mov        r9, rbx
000000000001182d         mov        rdi, qword [rsp+0x10]                       ; CODE XREF=sub_116a0+477
0000000000011832         call       build_charclass_op                          ; build_charclass_op
0000000000011837         mov        edi, dword [rbx]
0000000000011839         mov        qword [rsp+0x28], rax
000000000001183e         test       edi, edi
0000000000011840         je         sub_10f30+268
0000000000011846         test       rax, rax
0000000000011849         jne        sub_10f30+268
000000000001184f         jmp        sub_10f30+112
0000000000011854         nop        dword [rax]
0000000000011858         mov        rbx, qword [rsp+0x40]
000000000001185d         cmp        cl, 0x21
0000000000011860         mov        rsi, qword [rdi+0x78]
0000000000011864         sete       r8b
0000000000011868         lea        rcx, qword [aCoreutils+12]                  ; 0x14442
000000000001186f         lea        rdx, qword [aAlnum]                         ; "alnum"
0000000000011876         movzx      r8d, r8b
000000000001187a         mov        r9, rbx
000000000001187d         jmp        sub_116a0+397
000000000001187f         mov        rax, qword [rsp+0x18]
0000000000011884         mov        rdi, qword [rsp+0x10]
0000000000011889         mov        rcx, qword [rax]
000000000001188c         mov        eax, 0x1
0000000000011891         shl        eax, cl
0000000000011893         cdqe
0000000000011895         test       qword [rdi+0xa8], rax
000000000001189c         je         sub_116a0+2094
00000000000118a2         mov        rbx, qword [rsp+0x10]
00000000000118a7         mov        r8, qword [rsp+0x18]
00000000000118ac         xor        ecx, ecx
00000000000118ae         xor        edx, edx
00000000000118b0         or         qword [rbx+0xa0], rax
00000000000118b7         lea        rsi, qword [rbx+0x80]
00000000000118be         lea        rdi, qword [rbx+0x70]
00000000000118c2         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
00000000000118c7         test       rax, rax
00000000000118ca         mov        qword [rsp+0x28], rax
00000000000118cf         je         sub_116a0+872
00000000000118d5         add        qword [rbx+0x98], 0x1
00000000000118dd         or         byte [rbx+0xb0], 0x2
00000000000118e4         jmp        sub_10f30+268
00000000000118e9         mov        rbx, qword [rsp+0x10]
00000000000118ee         mov        r8, qword [rsp+0x18]
00000000000118f3         xor        ecx, ecx
00000000000118f5         xor        edx, edx
00000000000118f7         lea        rsi, qword [rbx+0x80]
00000000000118fe         lea        rdi, qword [rbx+0x70]
0000000000011902         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000011907         test       rax, rax
000000000001190a         mov        qword [rsp+0x28], rax
000000000001190f         je         sub_116a0+872
0000000000011915         cmp        dword [rbx+0xb4], 0x1
000000000001191c         jle        sub_10f30+268
0000000000011922         or         byte [rbx+0xb0], 0x2
0000000000011929         jmp        sub_10f30+268
000000000001192e         mov        rax, qword [rsp+0x10]
0000000000011933         mov        r8, qword [rsp+0x18]
0000000000011938         xor        ecx, ecx
000000000001193a         xor        edx, edx
000000000001193c         lea        rbx, qword [rax+0x70]
0000000000011940         lea        rbp, qword [rax+0x80]
0000000000011947         mov        rdi, rbx
000000000001194a         mov        rsi, rbp
000000000001194d         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000011952         test       rax, rax
0000000000011955         mov        qword [rsp+0x28], rax
000000000001195a         je         sub_116a0+872
0000000000011960         mov        rax, qword [rsp+0x10]
0000000000011965         lea        r12, qword [rsp+0xc0]
000000000001196d         mov        r15, qword [rsp+0x28]
0000000000011972         cmp        dword [rax+0xb4], 0x1
0000000000011979         jle        sub_10f30+268
000000000001197f         mov        rax, qword [r14+0x48]                       ; CODE XREF=sub_116a0+866
0000000000011983         cmp        qword [r14+0x68], rax
0000000000011987         jle        sub_116a0+1521
000000000001198d         cmp        rax, qword [r14+0x30]
0000000000011991         je         sub_116a0+1521
0000000000011997         mov        rdx, qword [r14+0x10]
000000000001199b         cmp        dword [rdx+rax*4], 0xffffffff
000000000001199f         jne        sub_116a0+1521
00000000000119a5         mov        r13, qword [rsp+0x18]
00000000000119aa         mov        rdx, qword [rsp+0x20]
00000000000119af         mov        rsi, r14
00000000000119b2         mov        rdi, r13
00000000000119b5         call       peek_token                                  ; peek_token
00000000000119ba         cdqe
00000000000119bc         add        qword [r14+0x48], rax
00000000000119c0         mov        r8, r13
00000000000119c3         xor        ecx, ecx
00000000000119c5         xor        edx, edx
00000000000119c7         mov        rsi, rbp
00000000000119ca         mov        rdi, rbx
00000000000119cd         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
00000000000119d2         mov        rdx, r15
00000000000119d5         mov        r13, rax
00000000000119d8         mov        r8, r12
00000000000119db         mov        rcx, rax
00000000000119de         mov        rsi, rbp
00000000000119e1         mov        rdi, rbx
00000000000119e4         mov        byte [rsp+0xc8], 0x10
00000000000119ec         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
00000000000119f1         test       r13, r13
00000000000119f4         mov        r15, rax
00000000000119f7         sete       dl
00000000000119fa         test       rax, rax
00000000000119fd         sete       al
0000000000011a00         or         dl, al
0000000000011a02         je         sub_116a0+735

                     loc_11a08:
0000000000011a08         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_10f30+262, sub_116a0+559, sub_116a0+623, sub_116a0+698, sub_116a0+984
0000000000011a0d         mov        dword [rax], 0xc
0000000000011a13         jmp        sub_10f30+112
                        ; endp
0000000000011a18         test       qword [rsp+0x20], 0x20000                   ; CODE XREF=sub_10f30+213
0000000000011a21         jne        sub_10f30+219
0000000000011a27         mov        rax, qword [rsp+0x40]
0000000000011a2c         mov        qword [rsp+0x28], 0x0
0000000000011a35         mov        dword [rax], 0x10
0000000000011a3b         jmp        sub_10f30+128

                     loc_11a40:
0000000000011a40         cmp        rbx, 0x8                                    ; CODE XREF=sub_10f30+16, sub_10f30+70
0000000000011a44         jbe        loc_11aab

                     loc_11a46:
0000000000011a46         mov        rdi, qword [rsp+16]                         ; CODE XREF=sub_116a0+1059
0000000000011a4b         lea        r8, qword [rsp+192]                         ; argument #5 for method create_token_tree.isra.16
0000000000011a53         xor        ecx, ecx                                    ; argument #4 for method create_token_tree.isra.16
0000000000011a55         mov        rdx, rax                                    ; argument #3 for method create_token_tree.isra.16
0000000000011a58         mov        byte [rsp+200], 0x11
0000000000011a60         lea        rsi, qword [rdi+0x80]                       ; argument #2 for method create_token_tree.isra.16
0000000000011a67         add        rdi, 0x70                                   ; argument #1 for method create_token_tree.isra.16
0000000000011a6b         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000011a70         test       rax, rax
0000000000011a73         mov        qword [rsp+40], rax
0000000000011a78         je         loc_11a08

0000000000011a7a         mov        qword [rax+0x28], rbx
0000000000011a7e         jmp        loc_1103c
0000000000011a83         mov        rax, qword [rsp+0x40]
0000000000011a88         mov        qword [rsp+0x28], 0x0
0000000000011a91         mov        dword [rax], 0x5
0000000000011a97         jmp        sub_10f30+128

                     loc_11a9c:
0000000000011a9c         mov        r13, qword [rsp+40]                         ; CODE XREF=sub_10f30+820
0000000000011aa1         mov        qword [rsp+48], r13
0000000000011aa6         jmp        loc_112f4

                     loc_11aab:
0000000000011aab         mov        rsi, qword [rsp+16]                         ; CODE XREF=sub_116a0+932
0000000000011ab0         mov        edx, 0x1
0000000000011ab5         mov        ecx, ebx
0000000000011ab7         shl        edx, cl
0000000000011ab9         movsxd     rdx, edx
0000000000011abc         or         qword [rsi+0xa8], rdx
0000000000011ac3         jmp        loc_11a46

                     loc_11ac5:
0000000000011ac5         mov        rsi, qword [rsp+168]                        ; case 3, argument #2 for method build_collating_symbol.isra.28, CODE XREF=sub_116a0+358
0000000000011acd         mov        rdi, r12                                    ; argument #1 for method build_collating_symbol.isra.28
0000000000011ad0         call       build_collating_symbol.isra.28              ; build_collating_symbol.isra.28
0000000000011ad5         mov        rdx, qword [rsp+64]
0000000000011ada         test       eax, eax
0000000000011adc         mov        dword [rdx], eax
0000000000011ade         jne        loc_11b18

                     loc_11ae0:
0000000000011ae0         movzx      eax, byte [r15+8]                           ; CODE XREF=sub_116a0+1142, sub_116a0+1228, sub_116a0+1268, sub_116a0+1327, sub_116a0+1984
0000000000011ae5         cmp        al, 0x2
0000000000011ae7         je         loc_11c81

0000000000011aed         cmp        al, 0x15
0000000000011aef         je         loc_11f02

0000000000011af5         xor        r9d, r9d
0000000000011af8         jmp        loc_11782

                     loc_11afd:
0000000000011afd         mov        rsi, qword [rsp+168]                        ; case 2, argument #2 for method build_collating_symbol.isra.28, CODE XREF=sub_116a0+358
0000000000011b05         mov        rdi, r12                                    ; argument #1 for method build_collating_symbol.isra.28
0000000000011b08         call       build_collating_symbol.isra.28              ; build_collating_symbol.isra.28
0000000000011b0d         mov        rdx, qword [rsp+64]
0000000000011b12         test       eax, eax
0000000000011b14         mov        dword [rdx], eax
0000000000011b16         je         loc_11ae0

                     loc_11b18:
0000000000011b18         mov        rdi, r12                                    ; argument "__ptr" for method j_free, CODE XREF=sub_116a0+1086, sub_116a0+1333, sub_116a0+1516, sub_116a0+1538, sub_116a0+2068, sub_116a0+2350, sub_116a0+2852, sub_116a0+2904, sub_116a0+3128
0000000000011b1b         call       j_free                                      ; free
0000000000011b20         mov        rdi, r13                                    ; argument #1 for method free_charset
0000000000011b23         call       free_charset                                ; free_charset
0000000000011b28         mov        rax, qword [rsp+64]
0000000000011b2d         mov        r8d, dword [rax]
0000000000011b30         test       r8d, r8d
0000000000011b33         jne        sub_10f30+112

0000000000011b39         mov        qword [rsp+40], 0x0
0000000000011b42         jmp        sub_10f30+268
                        ; endp

                     loc_11b47:
0000000000011b47         mov        rdx, qword [r13+0x28]                       ; case 1, CODE XREF=sub_116a0+358
0000000000011b4b         cmp        rdx, qword [rsp+48]
0000000000011b50         mov        rax, qword [r13]
0000000000011b54         je         loc_1204e

                     loc_11b5a:
0000000000011b5a         lea        rcx, qword [rdx+1]                          ; CODE XREF=sub_116a0+2526
0000000000011b5e         mov        qword [r13+0x28], rcx
0000000000011b62         mov        ecx, dword [rsp+168]
0000000000011b69         mov        dword [rax+rdx*4], ecx
0000000000011b6c         jmp        loc_11ae0

                     loc_11b71:
0000000000011b71         movzx      edx, byte [rsp+168]                         ; case 0, CODE XREF=sub_116a0+358
0000000000011b79         mov        esi, 0x1
0000000000011b7e         mov        rax, rdx
0000000000011b81         and        edx, 0x3f
0000000000011b84         shr        rax, 0x3
0000000000011b88         mov        ecx, edx
0000000000011b8a         and        eax, 0x18
0000000000011b8d         shl        rsi, cl
0000000000011b90         or         qword [r12+rax], rsi
0000000000011b94         jmp        loc_11ae0

                     loc_11b99:
0000000000011b99         sub        rsp, 0x8                                    ; case 4, CODE XREF=sub_116a0+358
0000000000011b9d         mov        rdi, qword [r14+0x78]                       ; argument #1 for method build_charclass.isra.29
0000000000011ba1         lea        rdx, qword [r13+0x18]                       ; argument #3 for method build_charclass.isra.29
0000000000011ba5         push       qword [rsp+40]                              ; argument #7 for method build_charclass.isra.29
0000000000011ba9         mov        r9, qword [rsp+184]                         ; argument #6 for method build_charclass.isra.29
0000000000011bb1         lea        rcx, qword [r13+0x48]                       ; argument #4 for method build_charclass.isra.29
0000000000011bb5         mov        r8, qword [rsp+104]                         ; argument #5 for method build_charclass.isra.29
0000000000011bba         mov        rsi, r12                                    ; argument #2 for method build_charclass.isra.29
0000000000011bbd         call       build_charclass.isra.29                     ; build_charclass.isra.29
0000000000011bc2         mov        rdx, qword [rsp+80]
0000000000011bc7         test       eax, eax
0000000000011bc9         mov        dword [rdx], eax
0000000000011bcb         pop        r9
0000000000011bcd         pop        r10
0000000000011bcf         je         loc_11ae0

0000000000011bd5         jmp        loc_11b18

                     loc_11bda:
0000000000011bda         or         byte [r13+0x20], 0x1                        ; CODE XREF=sub_116a0+112
0000000000011bdf         test       qword [rsp+32], 0x100
0000000000011be8         je         loc_11bf2

0000000000011bea         or         qword [r12], 0x400

                     loc_11bf2:
0000000000011bf2         add        qword [r14+0x48], rbx                       ; CODE XREF=sub_116a0+1352
0000000000011bf6         mov        r11, qword [rsp+24]
0000000000011bfb         mov        rsi, r14                                    ; argument #2 for method peek_token_bracket
0000000000011bfe         mov        rdx, qword [rsp+32]                         ; argument #3 for method peek_token_bracket
0000000000011c03         mov        rdi, r11                                    ; argument #1 for method peek_token_bracket
0000000000011c06         call       peek_token_bracket                          ; peek_token_bracket
0000000000011c0b         mov        ebx, eax
0000000000011c0d         movzx      eax, byte [r11+8]
0000000000011c12         cmp        al, 0x2
0000000000011c14         je         loc_11ea9

0000000000011c1a         mov        byte [rsp+87], 0x1
0000000000011c1f         jmp        loc_11716

                     loc_11c24:
0000000000011c24         mov        rax, qword [rsp+24]                         ; CODE XREF=sub_116a0+120
0000000000011c29         mov        byte [rax+8], 0x1
0000000000011c2d         jmp        loc_1171e

                     loc_11c32:
0000000000011c32         mov        dword [r15], 0x6                            ; CODE XREF=sub_11560+157
0000000000011c39         mov        r8, r15                                     ; argument #5 for method create_token_tree.isra.16
0000000000011c3c         xor        ecx, ecx                                    ; argument #4 for method create_token_tree.isra.16
0000000000011c3e         xor        edx, edx                                    ; argument #3 for method create_token_tree.isra.16
0000000000011c40         mov        rsi, r12                                    ; argument #2 for method create_token_tree.isra.16
0000000000011c43         mov        rdi, rbx                                    ; argument #1 for method create_token_tree.isra.16
0000000000011c46         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000011c4b         mov        dword [r15], 0x9
0000000000011c52         mov        rbp, rax
0000000000011c55         jmp        loc_11626

                     loc_11c5a:
0000000000011c5a         mov        r8, qword [rsp+24]                          ; argument #5 for method create_token_tree.isra.16, CODE XREF=sub_11560+140
0000000000011c5f         xor        ecx, ecx                                    ; argument #4 for method create_token_tree.isra.16
0000000000011c61         xor        edx, edx                                    ; argument #3 for method create_token_tree.isra.16
0000000000011c63         mov        rsi, r12                                    ; argument #2 for method create_token_tree.isra.16
0000000000011c66         mov        rdi, rbx                                    ; argument #1 for method create_token_tree.isra.16
0000000000011c69         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000011c6e         test       rax, rax
0000000000011c71         mov        qword [rsp+40], rax
0000000000011c76         jne        loc_11683

0000000000011c7c         jmp        sub_116a0+872
                        ; endp

                     loc_11c81:
0000000000011c81         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_116a0+326, sub_116a0+1095, sub_116a0+1582
0000000000011c86         mov        dword [rax], 0x7
0000000000011c8c         jmp        loc_11b18
0000000000011c91         mov        qword [rsp+0x28], r15                       ; CODE XREF=sub_116a0+743, sub_116a0+753, sub_116a0+767
0000000000011c96         jmp        sub_10f30+268

                     loc_11c9b:
0000000000011c9b         mov        rdx, qword [rsp+64]                         ; CODE XREF=sub_116a0+278, sub_116a0+1646
0000000000011ca0         mov        dword [rdx], eax
0000000000011ca2         jmp        loc_11b18

                     loc_11ca7:
0000000000011ca7         movsxd     rax, ebx                                    ; CODE XREF=sub_116a0+335
0000000000011caa         mov        r11, qword [rsp+32]
0000000000011caf         add        qword [r14+0x48], rax
0000000000011cb3         mov        r10, qword [rsp+96]
0000000000011cb8         mov        rdx, r11                                    ; argument #3 for method peek_token_bracket
0000000000011cbb         mov        rdi, r10                                    ; argument #1 for method peek_token_bracket
0000000000011cbe         call       peek_token_bracket                          ; peek_token_bracket
0000000000011cc3         movzx      edx, byte [rsp+200]
0000000000011ccb         cmp        dl, 0x2
0000000000011cce         je         loc_11c81

0000000000011cd0         cmp        dl, 0x15
0000000000011cd3         je         loc_11ee7

0000000000011cd9         mov        rdx, qword [rsp+104]
0000000000011cde         lea        rdi, qword [rsp+176]                        ; argument #1 for method parse_bracket_element.constprop.37
0000000000011ce6         mov        r9d, 0x1                                    ; argument #6 for method parse_bracket_element.constprop.37
0000000000011cec         mov        r8, r11                                     ; argument #5 for method parse_bracket_element.constprop.37
0000000000011cef         mov        ecx, eax                                    ; argument #4 for method parse_bracket_element.constprop.37
0000000000011cf1         mov        dword [rsp+176], 0x3
0000000000011cfc         mov        qword [rsp+184], rdx
0000000000011d04         mov        rdx, r10                                    ; argument #3 for method parse_bracket_element.constprop.37
0000000000011d07         call       parse_bracket_element.constprop.37          ; parse_bracket_element.constprop.37
0000000000011d0c         test       eax, eax
0000000000011d0e         jne        loc_11c9b

0000000000011d10         mov        rdx, qword [rsp+32]                         ; argument #3 for method peek_token_bracket
0000000000011d15         mov        rsi, r14                                    ; argument #2 for method peek_token_bracket
0000000000011d18         mov        rdi, r15                                    ; argument #1 for method peek_token_bracket
0000000000011d1b         call       peek_token_bracket                          ; peek_token_bracket
0000000000011d20         movsxd     rbx, eax
0000000000011d23         mov        rax, qword [rsp+16]
0000000000011d28         mov        esi, dword [rsp+160]
0000000000011d2f         mov        r9d, 0x0
0000000000011d35         cmp        dword [rax+0xb4], 0x1
0000000000011d3c         lea        eax, dword [rsi-2]
0000000000011d3f         cmovg      r9, r13
0000000000011d43         and        eax, 0xfffffffd
0000000000011d46         je         loc_121b9

0000000000011d4c         mov        r10d, dword [rsp+176]
0000000000011d54         lea        eax, dword [r10-2]
0000000000011d58         and        eax, 0xfffffffd
0000000000011d5b         je         loc_121b9

0000000000011d61         cmp        esi, 0x3
0000000000011d64         sete       r11b
0000000000011d68         je         loc_121fd

                     loc_11d6e:
0000000000011d6e         cmp        r10d, 0x3                                   ; CODE XREF=sub_116a0+2939
0000000000011d72         je         loc_121c9

                     loc_11d78:
0000000000011d78         test       esi, esi                                    ; CODE XREF=sub_116a0+2887
0000000000011d7a         jne        loc_120e9

0000000000011d80         movzx      edx, byte [rsp+168]

                     loc_11d88:
0000000000011d88         test       r10d, r10d                                  ; CODE XREF=sub_116a0+2638, sub_116a0+2655
0000000000011d8b         jne        loc_120cd

0000000000011d91         movzx      r8d, byte [rsp+184]

                     loc_11d9a:
0000000000011d9a         test       esi, esi                                    ; CODE XREF=sub_116a0+3278
0000000000011d9c         je         loc_12086

0000000000011da2         test       r11b, r11b
0000000000011da5         jne        loc_12086

0000000000011dab         test       r9, r9
0000000000011dae         mov        edx, dword [rsp+168]
0000000000011db5         je         loc_11dd4

                     loc_11db7:
0000000000011db7         mov        edi, r8d                                    ; argument "__c" for method j_btowc, CODE XREF=sub_116a0+2578, sub_116a0+2586
0000000000011dba         mov        dword [rsp+120], edx
0000000000011dbe         mov        qword [rsp+112], r9
0000000000011dc3         call       j_btowc                                     ; btowc
0000000000011dc8         mov        r9, qword [rsp+112]
0000000000011dcd         mov        edx, dword [rsp+120]
0000000000011dd1         mov        r8d, eax

                     loc_11dd4:
0000000000011dd4         cmp        edx, 0xffffffff                             ; CODE XREF=sub_116a0+1813, sub_116a0+2600
0000000000011dd7         je         loc_121ed

0000000000011ddd         cmp        r8d, 0xffffffff
0000000000011de1         je         loc_121ed

                     loc_11de7:
0000000000011de7         test       qword [rsp+32], 0x10000                     ; CODE XREF=sub_116a0+2663, sub_116a0+2675
0000000000011df0         je         loc_11dfb

0000000000011df2         cmp        r8d, edx
0000000000011df5         jb         loc_121b9

                     loc_11dfb:
0000000000011dfb         test       r9, r9                                      ; CODE XREF=sub_116a0+1872
0000000000011dfe         je         loc_11e26

0000000000011e00         mov        rax, qword [r9+0x40]
0000000000011e04         cmp        rax, qword [rsp+72]
0000000000011e09         mov        rcx, qword [r9+8]
0000000000011e0d         je         loc_12223

                     loc_11e13:
0000000000011e13         mov        dword [rcx+rax*4], edx                      ; CODE XREF=sub_116a0+3088
0000000000011e16         mov        rcx, qword [r9+0x10]
0000000000011e1a         lea        rsi, qword [rax+1]
0000000000011e1e         mov        qword [r9+0x40], rsi
0000000000011e22         mov        dword [rcx+rax*4], r8d

                     loc_11e26:
0000000000011e26         xor        eax, eax                                    ; CODE XREF=sub_116a0+1886
0000000000011e28         mov        edi, 0x1

                     loc_11e2d:
0000000000011e2d         cmp        edx, eax                                    ; CODE XREF=sub_116a0+1971
0000000000011e2f         mov        ecx, eax
0000000000011e31         ja         loc_11e49

0000000000011e33         cmp        r8d, eax
0000000000011e36         jb         loc_11e49

0000000000011e38         mov        rsi, rax
0000000000011e3b         mov        r11, rdi
0000000000011e3e         sar        rsi, 0x6
0000000000011e42         shl        r11, cl
0000000000011e45         or         qword [r12+rsi*8], r11

                     loc_11e49:
0000000000011e49         add        rax, 0x1                                    ; CODE XREF=sub_116a0+1937, sub_116a0+1942
0000000000011e4d         cmp        rax, 0x100
0000000000011e53         jne        loc_11e2d

0000000000011e55         mov        rax, qword [rsp+64]
0000000000011e5a         mov        dword [rax], 0x0
0000000000011e60         jmp        loc_11ae0
0000000000011e65         mov        rbx, qword [rsp+0x18]                       ; CODE XREF=sub_10f30+204
0000000000011e6a         mov        rdx, rax
0000000000011e6d         mov        rsi, r14
0000000000011e70         mov        qword [rsp], r8
0000000000011e74         mov        r15, rax
0000000000011e77         mov        rdi, rbx
0000000000011e7a         call       peek_token                                  ; peek_token
0000000000011e7f         cdqe
0000000000011e81         add        qword [r14+0x48], rax
0000000000011e85         mov        r9, qword [rsp+0x40]
0000000000011e8a         mov        r8, qword [rsp]
0000000000011e8e         mov        rcx, r15
0000000000011e91         mov        rdx, rbx
0000000000011e94         mov        rsi, rbp
0000000000011e97         mov        rdi, r14
0000000000011e9a         call       parse_expression                            ; parse_expression
0000000000011e9f         mov        qword [rsp+0x28], rax
0000000000011ea4         jmp        sub_10f30+128

                     loc_11ea9:
0000000000011ea9         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_116a0+99, sub_116a0+1396
0000000000011eae         mov        dword [rax], 0x2
0000000000011eb4         jmp        loc_11b18

                     loc_11eb9:
0000000000011eb9         mov        rdi, r12                                    ; argument "__ptr" for method j_free, CODE XREF=sub_116a0+62
0000000000011ebc         call       j_free                                      ; free
0000000000011ec1         mov        rdi, r13                                    ; argument "__ptr" for method j_free
0000000000011ec4         call       j_free                                      ; free
0000000000011ec9         jmp        sub_116a0+872
                        ; endp
0000000000011ece         mov        rax, qword [rsp+0x40]                       ; CODE XREF=sub_116a0+508
0000000000011ed3         mov        qword [rsp+0x28], 0x0
0000000000011edc         mov        dword [rax], 0x6
0000000000011ee2         jmp        sub_10f30+128

                     loc_11ee7:
0000000000011ee7         mov        eax, ebx                                    ; CODE XREF=sub_116a0+1587
0000000000011ee9         neg        eax
0000000000011eeb         cdqe
0000000000011eed         add        qword [r14+0x48], rax
0000000000011ef1         mov        byte [r15+8], 0x1
0000000000011ef6         mov        eax, dword [rsp+160]
0000000000011efd         jmp        loc_117f5

                     loc_11f02:
0000000000011f02         add        qword [r14+0x48], rbx                       ; CODE XREF=sub_116a0+1103
0000000000011f06         cmp        byte [rsp+87], 0x0
0000000000011f0b         je         loc_11f21

0000000000011f0d         lea        rdx, qword [r12+0x20]
0000000000011f12         mov        rax, r12

                     loc_11f15:
0000000000011f15         not        qword [rax]                                 ; CODE XREF=sub_116a0+2175
0000000000011f18         add        rax, 0x8
0000000000011f1c         cmp        rdx, rax
0000000000011f1f         jne        loc_11f15

                     loc_11f21:
0000000000011f21         mov        rax, qword [rsp+16]                         ; CODE XREF=sub_116a0+2155
0000000000011f26         mov        edx, dword [rax+0xb4]
0000000000011f2c         cmp        edx, 0x1
0000000000011f2f         jle        loc_11f49

0000000000011f31         mov        rcx, qword [rax+0x78]
0000000000011f35         xor        eax, eax

                     loc_11f37:
0000000000011f37         mov        rsi, qword [rcx+rax]                        ; CODE XREF=sub_116a0+2215
0000000000011f3b         and        qword [r12+rax], rsi
0000000000011f3f         add        rax, 0x8
0000000000011f43         cmp        rax, 0x20
0000000000011f47         jne        loc_11f37

                     loc_11f49:
0000000000011f49         cmp        qword [r13+0x28], 0x0                       ; CODE XREF=sub_116a0+2191
0000000000011f4e         jne        loc_11fd8

0000000000011f54         cmp        qword [r13+0x30], 0x0
0000000000011f59         jne        loc_11fd8

0000000000011f5b         cmp        qword [r13+0x38], 0x0
0000000000011f60         jne        loc_11fd8

0000000000011f62         cmp        qword [r13+0x40], 0x0
0000000000011f67         jne        loc_11fd8

0000000000011f69         sub        edx, 0x1
0000000000011f6c         jle        loc_11f7c

0000000000011f6e         cmp        qword [r13+0x48], 0x0
0000000000011f73         jne        loc_11fd8

0000000000011f75         test       byte [r13+0x20], 0x1
0000000000011f7a         jne        loc_11fd8

                     loc_11f7c:
0000000000011f7c         mov        rdi, r13                                    ; argument #1 for method free_charset, CODE XREF=sub_116a0+2252
0000000000011f7f         call       free_charset                                ; free_charset
0000000000011f84         mov        rax, qword [rsp+16]
0000000000011f89         lea        r8, qword [rsp+176]                         ; argument #5 for method create_token_tree.isra.16
0000000000011f91         xor        ecx, ecx                                    ; argument #4 for method create_token_tree.isra.16
0000000000011f93         xor        edx, edx                                    ; argument #3 for method create_token_tree.isra.16
0000000000011f95         mov        byte [rsp+184], 0x3
0000000000011f9d         mov        qword [rsp+176], r12
0000000000011fa5         lea        rsi, qword [rax+0x80]                       ; argument #2 for method create_token_tree.isra.16
0000000000011fac         lea        rdi, qword [rax+0x70]                       ; argument #1 for method create_token_tree.isra.16
0000000000011fb0         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000011fb5         test       rax, rax
0000000000011fb8         mov        qword [rsp+40], rax
0000000000011fbd         jne        sub_10f30+268

                     loc_11fc3:
0000000000011fc3         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_116a0+2444, sub_116a0+2512, sub_116a0+3170, sub_116a0+3225
0000000000011fc8         mov        dword [rax], 0xc
0000000000011fce         jmp        loc_11b18
0000000000011fd3         nop        dword [rax+rax]

                     loc_11fd8:
0000000000011fd8         mov        rax, qword [rsp+16]                         ; CODE XREF=sub_116a0+2222, sub_116a0+2233, sub_116a0+2240, sub_116a0+2247, sub_116a0+2259, sub_116a0+2266
0000000000011fdd         lea        r15, qword [rsp+176]
0000000000011fe5         xor        edx, edx                                    ; argument #3 for method create_token_tree.isra.16
0000000000011fe7         xor        ecx, ecx                                    ; argument #4 for method create_token_tree.isra.16
0000000000011fe9         mov        r8, r15                                     ; argument #5 for method create_token_tree.isra.16
0000000000011fec         or         byte [rax+0xb0], 0x2
0000000000011ff3         lea        rbx, qword [rax+0x70]
0000000000011ff7         lea        rbp, qword [rax+0x80]
0000000000011ffe         mov        byte [rsp+184], 0x6
0000000000012006         mov        qword [rsp+176], r13
000000000001200e         mov        rdi, rbx                                    ; argument #1 for method create_token_tree.isra.16
0000000000012011         mov        rsi, rbp                                    ; argument #2 for method create_token_tree.isra.16
0000000000012014         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000012019         mov        rdi, rax
000000000001201c         mov        qword [rsp+40], rax
0000000000012021         lea        rdx, qword [r12+0x20]
0000000000012026         test       rdi, rdi
0000000000012029         mov        rax, r12
000000000001202c         je         loc_11fc3

                     loc_1202e:
000000000001202e         cmp        qword [rax], 0x0                            ; CODE XREF=sub_116a0+2463
0000000000012032         jne        loc_122dd

0000000000012038         add        rax, 0x8
000000000001203c         cmp        rdx, rax
000000000001203f         jne        loc_1202e

0000000000012041         mov        rdi, r12                                    ; argument "__ptr" for method j_free
0000000000012044         call       j_free                                      ; free
0000000000012049         jmp        sub_10f30+268
                        ; endp

                     loc_1204e:
000000000001204e         mov        rdx, qword [rsp+48]                         ; CODE XREF=sub_116a0+1204
0000000000012053         lea        rdi, qword [rdx+rdx+1]
0000000000012058         lea        rsi, qword [rdi*4]                          ; argument "__size" for method j_realloc
0000000000012060         mov        qword [rsp+48], rdi
0000000000012065         mov        rdi, rax                                    ; argument "__ptr" for method j_realloc
0000000000012068         call       j_realloc                                   ; realloc
000000000001206d         test       rax, rax
0000000000012070         je         loc_11fc3

0000000000012076         mov        qword [r13], rax
000000000001207a         mov        rdx, qword [r13+0x28]
000000000001207e         jmp        loc_11b5a

                     loc_12083:
0000000000012083         xor        r8d, r8d                                    ; CODE XREF=sub_116a0+2617, sub_116a0+2622

                     loc_12086:
0000000000012086         test       r9, r9                                      ; CODE XREF=sub_116a0+1788, sub_116a0+1797
0000000000012089         je         loc_12104

000000000001208b         mov        edi, edx                                    ; argument "__c" for method j_btowc
000000000001208d         mov        dword [rsp+120], r8d
0000000000012092         mov        qword [rsp+112], r9
0000000000012097         call       j_btowc                                     ; btowc
000000000001209c         mov        edx, eax
000000000001209e         mov        eax, dword [rsp+176]
00000000000120a5         mov        r9, qword [rsp+112]
00000000000120aa         mov        r8d, dword [rsp+120]
00000000000120af         cmp        eax, 0x3
00000000000120b2         je         loc_11db7

00000000000120b8         test       eax, eax
00000000000120ba         je         loc_11db7

                     loc_120c0:
00000000000120c0         mov        r8d, dword [rsp+184]                        ; CODE XREF=sub_116a0+2631, sub_116a0+2673
00000000000120c8         jmp        loc_11dd4

                     loc_120cd:
00000000000120cd         cmp        r10d, 0x3                                   ; CODE XREF=sub_116a0+1771
00000000000120d1         je         loc_12362

00000000000120d7         test       esi, esi
00000000000120d9         je         loc_12083

00000000000120db         test       r11b, r11b
00000000000120de         jne        loc_12083

00000000000120e0         mov        edx, dword [rsp+168]
00000000000120e7         jmp        loc_120c0

                     loc_120e9:
00000000000120e9         xor        edx, edx                                    ; CODE XREF=sub_116a0+1754
00000000000120eb         cmp        esi, 0x3
00000000000120ee         jne        loc_11d88

00000000000120f4         mov        rax, qword [rsp+168]
00000000000120fc         movzx      edx, byte [rax]
00000000000120ff         jmp        loc_11d88

                     loc_12104:
0000000000012104         test       r10d, r10d                                  ; CODE XREF=sub_116a0+2537
0000000000012107         je         loc_11de7

000000000001210d         cmp        r10d, 0x3
0000000000012111         jne        loc_120c0

0000000000012113         jmp        loc_11de7

                     loc_12118:
0000000000012118         mov        ebx, 0x80                                   ; CODE XREF=sub_11560+89
000000000001211d         mov        r12d, 0x2

                     loc_12123:
0000000000012123         call       j___ctype_b_loc                             ; __ctype_b_loc, CODE XREF=sub_116a0+2808
0000000000012128         movsxd     rdx, ebx
000000000001212b         movsxd     r9, r12d
000000000001212e         mov        r8d, 0x1
0000000000012134         add        rdx, rdx
0000000000012137         add        rdx, qword [rax]
000000000001213a         mov        rax, qword [rsp+16]
000000000001213f         lea        rdi, qword [rax+r9*8]

                     loc_12143:
0000000000012143         xor        eax, eax                                    ; CODE XREF=sub_116a0+2796
0000000000012145         jmp        loc_12162
0000000000012147         nop        word [rax+rax]

                     loc_12150:
0000000000012150         lea        esi, dword [rbx+rax]                        ; CODE XREF=sub_116a0+2760
0000000000012153         cmp        esi, 0x5f
0000000000012156         je         loc_1216a

                     loc_12158:
0000000000012158         add        rax, 0x1                                    ; CODE XREF=sub_116a0+2775
000000000001215c         cmp        rax, 0x40
0000000000012160         je         loc_12179

                     loc_12162:
0000000000012162         test       byte [rdx+rax*2], 0x8                       ; CODE XREF=sub_116a0+2725
0000000000012166         mov        ecx, eax
0000000000012168         je         loc_12150

                     loc_1216a:
000000000001216a         mov        rsi, r8                                     ; CODE XREF=sub_116a0+2742
000000000001216d         shl        rsi, cl
0000000000012170         or         qword [rdi+0xb8], rsi
0000000000012177         jmp        loc_12158

                     loc_12179:
0000000000012179         add        r9, 0x1                                     ; CODE XREF=sub_116a0+2752
000000000001217d         add        ebx, 0x40
0000000000012180         sub        rdx, 0xffffffffffffff80
0000000000012184         add        rdi, 0x8
0000000000012188         cmp        r9d, 0x3
000000000001218c         jle        loc_12143

000000000001218e         jmp        loc_115d1

                     loc_12193:
0000000000012193         xor        ebx, ebx                                    ; CODE XREF=sub_11560+47
0000000000012195         xor        r12d, r12d
0000000000012198         jmp        loc_12123

                     loc_1219a:
000000000001219a         lea        rcx, qword [__PRETTY_FUNCTION__.7327]       ; argument "__function" for method j___assert_fail, "parse_bracket_exp", CODE XREF=sub_116a0+344
00000000000121a1         lea        rsi, qword [aCoreutils831li_15850]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/regcomp.c"
00000000000121a8         lea        rdi, qword [aNum0+7]                        ; argument "__assertion" for method j___assert_fail, 0x1589f
00000000000121af         mov        edx, 0xced                                  ; argument "__line" for method j___assert_fail
00000000000121b4         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_121b9:
00000000000121b9         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_116a0+1702, sub_116a0+1723, sub_116a0+1877
00000000000121be         mov        dword [rax], 0xb
00000000000121c4         jmp        loc_11b18

                     loc_121c9:
00000000000121c9         mov        rdi, qword [rsp+184]                        ; CODE XREF=sub_116a0+1746
00000000000121d1         xor        eax, eax
00000000000121d3         or         rcx, 0xffffffffffffffff
00000000000121d7         repne scasb al, byte [rdi]
00000000000121d9         mov        rax, rcx
00000000000121dc         not        rax
00000000000121df         sub        rax, 0x1
00000000000121e3         cmp        rax, 0x1
00000000000121e7         jbe        loc_11d78

                     loc_121ed:
00000000000121ed         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_116a0+1847, sub_116a0+1857, sub_116a0+2945
00000000000121f2         mov        dword [rax], 0x3
00000000000121f8         jmp        loc_11b18

                     loc_121fd:
00000000000121fd         mov        rdi, qword [rsp+168]                        ; CODE XREF=sub_116a0+1736
0000000000012205         xor        eax, eax
0000000000012207         or         rcx, 0xffffffffffffffff
000000000001220b         repne scasb al, byte [rdi]
000000000001220d         mov        rax, rcx
0000000000012210         not        rax
0000000000012213         sub        rax, 0x1
0000000000012217         cmp        rax, 0x1
000000000001221b         jbe        loc_11d6e

0000000000012221         jmp        loc_121ed

                     loc_12223:
0000000000012223         mov        rax, qword [rsp+72]                         ; CODE XREF=sub_116a0+1901
0000000000012228         mov        rdi, rcx                                    ; argument "__ptr" for method j_realloc
000000000001222b         mov        dword [rsp+140], r8d
0000000000012233         mov        dword [rsp+136], edx
000000000001223a         mov        qword [rsp+112], r9
000000000001223f         add        rax, rax
0000000000012242         add        rax, 0x1
0000000000012246         lea        r10, qword [rax*4]
000000000001224e         mov        qword [rsp+72], rax
0000000000012253         mov        rsi, r10                                    ; argument "__size" for method j_realloc
0000000000012256         mov        qword [rsp+128], r10
000000000001225e         call       j_realloc                                   ; realloc
0000000000012263         mov        r9, qword [rsp+112]
0000000000012268         mov        r10, qword [rsp+128]
0000000000012270         mov        qword [rsp+120], rax
0000000000012275         mov        rdi, qword [r9+0x10]                        ; argument "__ptr" for method j_realloc
0000000000012279         mov        rsi, r10                                    ; argument "__size" for method j_realloc
000000000001227c         call       j_realloc                                   ; realloc
0000000000012281         mov        rcx, qword [rsp+120]
0000000000012286         test       rcx, rcx
0000000000012289         je         loc_122b5

000000000001228b         test       rax, rax
000000000001228e         mov        r9, qword [rsp+112]
0000000000012293         mov        edx, dword [rsp+136]
000000000001229a         mov        r8d, dword [rsp+140]
00000000000122a2         je         loc_122b5

00000000000122a4         mov        qword [r9+0x10], rax
00000000000122a8         mov        qword [r9+8], rcx
00000000000122ac         mov        rax, qword [r9+0x40]
00000000000122b0         jmp        loc_11e13

                     loc_122b5:
00000000000122b5         mov        rdi, rcx                                    ; argument "__ptr" for method j_free, CODE XREF=sub_116a0+3049, sub_116a0+3074
00000000000122b8         mov        qword [rsp+0], rax
00000000000122bc         call       j_free                                      ; free
00000000000122c1         mov        rax, qword [rsp+0]
00000000000122c5         mov        rdi, rax                                    ; argument "__ptr" for method j_free
00000000000122c8         call       j_free                                      ; free
00000000000122cd         mov        rax, qword [rsp+64]
00000000000122d2         mov        dword [rax], 0xc
00000000000122d8         jmp        loc_11b18

                     loc_122dd:
00000000000122dd         xor        ecx, ecx                                    ; argument #4 for method create_token_tree.isra.16, CODE XREF=sub_116a0+2450
00000000000122df         xor        edx, edx                                    ; argument #3 for method create_token_tree.isra.16
00000000000122e1         mov        r8, r15                                     ; argument #5 for method create_token_tree.isra.16
00000000000122e4         mov        rsi, rbp                                    ; argument #2 for method create_token_tree.isra.16
00000000000122e7         mov        rdi, rbx                                    ; argument #1 for method create_token_tree.isra.16
00000000000122ea         mov        byte [rsp+184], 0x3
00000000000122f2         mov        qword [rsp+176], r12
00000000000122fa         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
00000000000122ff         test       rax, rax
0000000000012302         je         loc_11fc3

0000000000012308         mov        rcx, qword [rsp+40]                         ; argument #4 for method create_token_tree.isra.16
000000000001230d         lea        r8, qword [rsp+192]                         ; argument #5 for method create_token_tree.isra.16
0000000000012315         mov        rdx, rax                                    ; argument #3 for method create_token_tree.isra.16
0000000000012318         mov        rsi, rbp                                    ; argument #2 for method create_token_tree.isra.16
000000000001231b         mov        rdi, rbx                                    ; argument #1 for method create_token_tree.isra.16
000000000001231e         mov        byte [rsp+200], 0xa
0000000000012326         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000001232b         test       rax, rax
000000000001232e         mov        qword [rsp+40], rax
0000000000012333         jne        sub_10f30+268

0000000000012339         jmp        loc_11fc3

                     loc_1233e:
000000000001233e         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=sub_10f30+150
                        ; endp

                     loc_12343:
0000000000012343         mov        rax, qword [rsp+24]                         ; CODE XREF=sub_10f30+1238
0000000000012348         cmp        byte [rax+8], 0x2
000000000001234c         jne        loc_11540

0000000000012352         mov        rax, qword [rsp+64]
0000000000012357         mov        dword [rax], 0x9
000000000001235d         jmp        loc_1154b

                     loc_12362:
0000000000012362         mov        rax, qword [rsp+184]                        ; CODE XREF=sub_116a0+2609
000000000001236a         movzx      r8d, byte [rax]
000000000001236e         jmp        loc_11d9a


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_12373:
0000000000012373         nop        dword [rax]                                 ; End of unwind block (FDE at 0x183b8)
0000000000012376         nop        word [cs:rax+rax]
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_50: int8_t, -80
        ;    var_58: int8_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120


                     parse_branch:
0000000000012380         push       r15                                         ; Begin of unwind block (FDE at 0x18418), CODE XREF=parse_reg_exp+67, parse_reg_exp+174
0000000000012382         push       r14
0000000000012384         mov        r15, rcx
0000000000012387         push       r13
0000000000012389         push       r12
000000000001238b         mov        r13, rsi
000000000001238e         push       rbp
000000000001238f         push       rbx
0000000000012390         mov        rbx, r9
0000000000012393         mov        rbp, rdx
0000000000012396         mov        r12, r8
0000000000012399         sub        rsp, 0x48
000000000001239d         mov        rax, qword [fs:0x28]
00000000000123a6         mov        qword [rsp+0x78+var_40], rax
00000000000123ab         xor        eax, eax
00000000000123ad         mov        rax, qword [rsi]
00000000000123b0         mov        qword [rsp+0x78+var_78], rdi
00000000000123b4         mov        qword [rsp+0x78+var_68], rax
00000000000123b9         call       parse_expression                            ; parse_expression
00000000000123be         mov        edx, dword [rbx]
00000000000123c0         mov        r14, rax
00000000000123c3         test       edx, edx
00000000000123c5         je         loc_123d0

00000000000123c7         test       rax, rax
00000000000123ca         je         loc_124ca

                     loc_123d0:
00000000000123d0         lea        rax, qword [rsp+0x78+var_58]                ; CODE XREF=parse_branch+69
00000000000123d5         mov        qword [rsp+0x78+var_60], rax
00000000000123da         nop        word [rax+rax]

                     loc_123e0:
00000000000123e0         movzx      eax, byte [rbp+8]                           ; CODE XREF=parse_branch+303
00000000000123e4         mov        edx, eax
00000000000123e6         and        edx, 0xfffffff7
00000000000123e9         cmp        dl, 0x2
00000000000123ec         je         loc_12480

                     loc_123f2:
00000000000123f2         cmp        al, 0x9                                     ; CODE XREF=parse_branch+246
00000000000123f4         jne        loc_123ff

00000000000123f6         test       r12, r12
00000000000123f9         jne        loc_12480

                     loc_123ff:
00000000000123ff         mov        rdi, qword [rsp+0x78+var_78]                ; CODE XREF=parse_branch+116
0000000000012403         mov        r9, rbx
0000000000012406         mov        r8, r12
0000000000012409         mov        rcx, r15
000000000001240c         mov        rdx, rbp
000000000001240f         mov        rsi, r13
0000000000012412         call       parse_expression                            ; parse_expression
0000000000012417         mov        r9, rax
000000000001241a         mov        eax, dword [rbx]
000000000001241c         test       eax, eax
000000000001241e         je         loc_12429

0000000000012420         test       r9, r9
0000000000012423         je         loc_124b4

                     loc_12429:
0000000000012429         test       r14, r14                                    ; CODE XREF=parse_branch+158
000000000001242c         je         loc_124a8

000000000001242e         test       r9, r9
0000000000012431         je         loc_124a8

0000000000012433         mov        rax, qword [rsp+0x78+var_68]
0000000000012438         mov        r8, qword [rsp+0x78+var_60]
000000000001243d         mov        rcx, r9
0000000000012440         mov        rdx, r14
0000000000012443         mov        qword [rsp+0x78+var_70], r9
0000000000012448         mov        byte [rsp+0x78+var_50], 0x10
000000000001244d         lea        rsi, qword [rax+0x80]
0000000000012454         lea        rdi, qword [rax+0x70]
0000000000012458         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000001245d         test       rax, rax
0000000000012460         mov        r9, qword [rsp+0x78+var_70]
0000000000012465         je         loc_124d0

0000000000012467         mov        r14, rax
000000000001246a         movzx      eax, byte [rbp+8]
000000000001246e         mov        edx, eax
0000000000012470         and        edx, 0xfffffff7
0000000000012473         cmp        dl, 0x2
0000000000012476         jne        loc_123f2

000000000001247c         nop        dword [rax]

                     loc_12480:
0000000000012480         mov        rcx, qword [rsp+0x78+var_40]                ; CODE XREF=parse_branch+108, parse_branch+121, parse_branch+333, parse_branch+379
0000000000012485         xor        rcx, qword [fs:0x28]
000000000001248e         mov        rax, r14
0000000000012491         jne        loc_124fd

0000000000012493         add        rsp, 0x48
0000000000012497         pop        rbx
0000000000012498         pop        rbp
0000000000012499         pop        r12
000000000001249b         pop        r13
000000000001249d         pop        r14
000000000001249f         pop        r15
00000000000124a1         ret
                        ; endp
00000000000124a2         align      8

                     loc_124a8:
00000000000124a8         test       r14, r14                                    ; CODE XREF=parse_branch+172, parse_branch+177
00000000000124ab         cmove      r14, r9
00000000000124af         jmp        loc_123e0

                     loc_124b4:
00000000000124b4         test       r14, r14                                    ; CODE XREF=parse_branch+163
00000000000124b7         je         loc_124ca

00000000000124b9         lea        rsi, qword [free_tree]                      ; free_tree
00000000000124c0         xor        edx, edx
00000000000124c2         mov        rdi, r14
00000000000124c5         call       postorder                                   ; postorder

                     loc_124ca:
00000000000124ca         xor        r14d, r14d                                  ; CODE XREF=parse_branch+74, parse_branch+311
00000000000124cd         jmp        loc_12480
00000000000124cf         align      16

                     loc_124d0:
00000000000124d0         lea        rsi, qword [free_tree]                      ; free_tree, CODE XREF=parse_branch+229
00000000000124d7         mov        rdi, r9
00000000000124da         xor        edx, edx
00000000000124dc         call       postorder                                   ; postorder
00000000000124e1         lea        rsi, qword [free_tree]                      ; free_tree
00000000000124e8         mov        rdi, r14
00000000000124eb         xor        edx, edx
00000000000124ed         xor        r14d, r14d
00000000000124f0         call       postorder                                   ; postorder
00000000000124f5         mov        dword [rbx], 0xc
00000000000124fb         jmp        loc_12480

                     loc_124fd:
00000000000124fd         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=parse_branch+273
                        ; endp
0000000000012502         align      16                                          ; End of unwind block (FDE at 0x18418)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_50: int8_t, -80
        ;    var_58: int8_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128


                     parse_reg_exp:
0000000000012510         push       r15                                         ; Begin of unwind block (FDE at 0x18464), CODE XREF=sub_10f30+47, re_compile_internal+1203
0000000000012512         push       r14
0000000000012514         mov        r14, rcx
0000000000012517         push       r13
0000000000012519         push       r12
000000000001251b         mov        r13, r9
000000000001251e         push       rbp
000000000001251f         push       rbx
0000000000012520         mov        rbp, rdx
0000000000012523         mov        r12, rdi
0000000000012526         sub        rsp, 0x58
000000000001252a         mov        rbx, qword [rsi]
000000000001252d         mov        rax, qword [fs:0x28]
0000000000012536         mov        qword [rsp+0x88+var_40], rax
000000000001253b         xor        eax, eax
000000000001253d         mov        qword [rsp+0x88+var_60], rsi
0000000000012542         mov        qword [rsp+0x88+var_78], r8
0000000000012547         mov        rax, qword [rbx+0xa8]
000000000001254e         mov        qword [rsp+0x88+var_68], rax
0000000000012553         call       parse_branch                                ; parse_branch
0000000000012558         mov        edx, dword [r13]
000000000001255c         mov        r15, rax
000000000001255f         test       edx, edx
0000000000012561         je         loc_1256c

0000000000012563         test       rax, rax
0000000000012566         je         loc_12652

                     loc_1256c:
000000000001256c         lea        rax, qword [rsp+0x88+var_58]                ; CODE XREF=parse_reg_exp+81
0000000000012571         mov        qword [rsp+0x88+var_80], rax
0000000000012576         jmp        loc_12604
000000000001257b         align      128

                     loc_12580:
0000000000012580         cmp        al, 0x9                                     ; CODE XREF=parse_reg_exp+290
0000000000012582         jne        loc_12590

0000000000012584         cmp        qword [rsp+0x88+var_78], 0x0
000000000001258a         jne        loc_12638

                     loc_12590:
0000000000012590         mov        rax, qword [rbx+0xa8]                       ; CODE XREF=parse_reg_exp+114
0000000000012597         mov        r8, qword [rsp+0x88+var_78]
000000000001259c         mov        rcx, r14
000000000001259f         mov        rsi, qword [rsp+0x88+var_60]
00000000000125a4         mov        r9, r13
00000000000125a7         mov        rdx, rbp
00000000000125aa         mov        rdi, r12
00000000000125ad         mov        qword [rsp+0x88+var_70], rax
00000000000125b2         mov        rax, qword [rsp+0x88+var_68]
00000000000125b7         mov        qword [rbx+0xa8], rax
00000000000125be         call       parse_branch                                ; parse_branch
00000000000125c3         mov        rcx, rax
00000000000125c6         mov        eax, dword [r13]
00000000000125ca         test       eax, eax
00000000000125cc         je         loc_125d3

00000000000125ce         test       rcx, rcx
00000000000125d1         je         loc_1263c

                     loc_125d3:
00000000000125d3         mov        rax, qword [rsp+0x88+var_70]                ; CODE XREF=parse_reg_exp+188
00000000000125d8         or         qword [rbx+0xa8], rax

                     loc_125df:
00000000000125df         mov        r8, qword [rsp+0x88+var_80]                 ; CODE XREF=parse_reg_exp+298
00000000000125e4         lea        rsi, qword [rbx+0x80]
00000000000125eb         lea        rdi, qword [rbx+0x70]
00000000000125ef         mov        rdx, r15
00000000000125f2         mov        byte [rsp+0x88+var_50], 0xa
00000000000125f7         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
00000000000125fc         test       rax, rax
00000000000125ff         mov        r15, rax
0000000000012602         je         loc_12680

                     loc_12604:
0000000000012604         cmp        byte [rbp+8], 0xa                           ; CODE XREF=parse_reg_exp+102
0000000000012608         jne        loc_12658

000000000001260a         mov        rdx, r14
000000000001260d         mov        rsi, r12
0000000000012610         mov        rdi, rbp
0000000000012613         or         rdx, 0x800000
000000000001261a         call       peek_token                                  ; peek_token
000000000001261f         cdqe
0000000000012621         add        qword [r12+0x48], rax
0000000000012626         movzx      eax, byte [rbp+8]
000000000001262a         mov        edx, eax
000000000001262c         and        edx, 0xfffffff7
000000000001262f         cmp        dl, 0x2
0000000000012632         jne        loc_12580

                     loc_12638:
0000000000012638         xor        ecx, ecx                                    ; CODE XREF=parse_reg_exp+122
000000000001263a         jmp        loc_125df

                     loc_1263c:
000000000001263c         test       r15, r15                                    ; CODE XREF=parse_reg_exp+193
000000000001263f         je         loc_12652

0000000000012641         lea        rsi, qword [free_tree]                      ; free_tree
0000000000012648         xor        edx, edx
000000000001264a         mov        rdi, r15
000000000001264d         call       postorder                                   ; postorder

                     loc_12652:
0000000000012652         xor        r15d, r15d                                  ; CODE XREF=parse_reg_exp+86, parse_reg_exp+303
0000000000012655         nop        dword [rax]

                     loc_12658:
0000000000012658         mov        rcx, qword [rsp+0x88+var_40]                ; CODE XREF=parse_reg_exp+248, parse_reg_exp+376
000000000001265d         xor        rcx, qword [fs:0x28]
0000000000012666         mov        rax, r15
0000000000012669         jne        loc_1268a

000000000001266b         add        rsp, 0x58
000000000001266f         pop        rbx
0000000000012670         pop        rbp
0000000000012671         pop        r12
0000000000012673         pop        r13
0000000000012675         pop        r14
0000000000012677         pop        r15
0000000000012679         ret
                        ; endp
000000000001267a         align      128

                     loc_12680:
0000000000012680         mov        dword [r13], 0xc                            ; CODE XREF=parse_reg_exp+242
0000000000012688         jmp        loc_12658

                     loc_1268a:
000000000001268a         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=parse_reg_exp+345
                        ; endp
000000000001268f         align      16                                          ; End of unwind block (FDE at 0x18464)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int32_t, -72
        ;    var_4D: int8_t, -77
        ;    var_4E: int8_t, -78
        ;    var_4F: int8_t, -79
        ;    var_50: int8_t, -80
        ;    var_60: int64_t, -96
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_D0: int64_t, -208
        ;    var_D8: int64_t, -216
        ;    var_E8: int64_t, -232
        ;    var_F0: int64_t, -240
        ;    var_F8: int8_t, -248
        ;    var_108: int32_t, -264
        ;    var_10C: int32_t, -268
        ;    var_130: int64_t, -304
        ;    var_138: int64_t, -312
        ;    var_140: int64_t, -320
        ;    var_148: int64_t, -328
        ;    var_150: int64_t, -336
        ;    var_158: int64_t, -344


                     re_compile_internal:
0000000000012690         push       r15                                         ; Begin of unwind block (FDE at 0x184b4), CODE XREF=rpl_re_compile_pattern+53, rpl_regcomp+164
0000000000012692         push       r14
0000000000012694         push       r13
0000000000012696         push       r12
0000000000012698         push       rbp
0000000000012699         push       rbx
000000000001269a         sub        rsp, 0x128
00000000000126a1         mov        qword [rdi+0x18], rcx
00000000000126a5         mov        qword [rdi+0x10], 0x0
00000000000126ad         mov        rax, qword [fs:0x28]
00000000000126b6         mov        qword [rsp+0x158+var_40], rax
00000000000126be         xor        eax, eax
00000000000126c0         movzx      eax, byte [rdi+0x38]
00000000000126c4         mov        qword [rsp+0x158+var_150], rdi
00000000000126c9         mov        qword [rsp+0x158+var_148], rsi
00000000000126ce         mov        qword [rsp+0x158+var_158], rdx
00000000000126d2         mov        qword [rsp+0x158+var_140], rcx
00000000000126d7         mov        dword [rsp+0x158+var_10C], 0x0
00000000000126df         mov        qword [rdi+0x30], 0x0
00000000000126e7         mov        rbx, qword [rdi]
00000000000126ea         mov        byte [rsp+0x158+var_138], al
00000000000126ee         and        eax, 0xffffff90
00000000000126f1         cmp        qword [rdi+8], 0xe7
00000000000126f9         mov        byte [rdi+0x38], al
00000000000126fc         jbe        loc_134f6

                     loc_12702:
0000000000012702         lea        rdi, qword [rbx+8]                          ; CODE XREF=sub_13010+1295
0000000000012706         mov        rax, qword [rsp+0x158+var_150]
000000000001270b         mov        rcx, rbx
000000000001270e         and        rdi, 0xfffffffffffffff8
0000000000012712         sub        rcx, rdi
0000000000012715         mov        qword [rax+0x10], 0xe8
000000000001271d         xor        eax, eax
000000000001271f         add        ecx, 0xe8
0000000000012725         mov        qword [rbx], 0x0
000000000001272c         mov        qword [rbx+0xe0], 0x0
0000000000012737         shr        ecx, 0x3
000000000001273a         rep stosq  qword [rdi], rax
000000000001273d         movabs     rax, 0x555555555555554
0000000000012747         mov        dword [rbx+0x80], 0xf
0000000000012751         cmp        qword [rsp+0x158+var_158], rax
0000000000012755         ja         loc_12d96

000000000001275b         mov        r14, qword [rsp+0x158+var_158]
000000000001275f         lea        rax, qword [r14+1]
0000000000012763         mov        rdi, rax
0000000000012766         mov        qword [rbx+8], rax
000000000001276a         mov        qword [rsp+0x158+var_130], rax
000000000001276f         shl        rdi, 0x4                                    ; argument "__size" for method j_malloc
0000000000012773         call       j_malloc                                    ; malloc
0000000000012778         test       r14, r14
000000000001277b         mov        qword [rbx], rax
000000000001277e         je         loc_13465

0000000000012784         mov        esi, 0x1
0000000000012789         nop        dword [rax]

                     loc_12790:
0000000000012790         add        rsi, rsi                                    ; CODE XREF=re_compile_internal+263
0000000000012793         cmp        qword [rsp+0x158+var_158], rsi
0000000000012797         jae        loc_12790

0000000000012799         lea        rbp, qword [rsi-1]

                     loc_1279d:
000000000001279d         mov        edi, 0x18                                   ; argument "__nmemb" for method j_calloc, CODE XREF=sub_13010+1116
00000000000127a2         call       j_calloc                                    ; calloc
00000000000127a7         mov        qword [rbx+0x88], rbp
00000000000127ae         mov        qword [rbx+0x40], rax
00000000000127b2         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max
00000000000127b7         mov        edi, 0xe                                    ; argument "__item" for method j_nl_langinfo
00000000000127bc         mov        dword [rbx+0xb4], eax
00000000000127c2         call       j_nl_langinfo                               ; nl_langinfo
00000000000127c7         movzx      edx, byte [rax]
00000000000127ca         and        edx, 0xffffffdf
00000000000127cd         cmp        dl, 0x55
00000000000127d0         jne        loc_12820

00000000000127d2         movzx      edx, byte [rax+1]
00000000000127d6         and        edx, 0xffffffdf
00000000000127d9         cmp        dl, 0x54
00000000000127dc         jne        loc_12820

00000000000127de         movzx      edx, byte [rax+2]
00000000000127e2         and        edx, 0xffffffdf
00000000000127e5         cmp        dl, 0x46
00000000000127e8         jne        loc_12820

00000000000127ea         xor        edx, edx
00000000000127ec         cmp        byte [rax+3], 0x2d
00000000000127f0         lea        rdi, qword [aErrRegespace+18]               ; 0x158f6
00000000000127f7         mov        ecx, 0x2
00000000000127fc         sete       dl
00000000000127ff         lea        rsi, qword [rax+rdx+3]
0000000000012804         rep  cmpsb byte [rsi], byte [rdi]
0000000000012806         seta       al
0000000000012809         sbb        al, 0x0
000000000001280b         test       al, al
000000000001280d         jne        loc_12820

000000000001280f         or         byte [rbx+0xb0], 0x4
0000000000012816         nop        word [cs:rax+rax]

                     loc_12820:
0000000000012820         movzx      eax, byte [rbx+0xb0]                        ; CODE XREF=re_compile_internal+320, re_compile_internal+332, re_compile_internal+344, re_compile_internal+381
0000000000012827         mov        edx, eax
0000000000012829         and        edx, 0xfffffff7
000000000001282c         cmp        dword [rbx+0xb4], 0x1
0000000000012833         mov        byte [rbx+0xb0], dl
0000000000012839         jle        loc_1284e

000000000001283b         test       al, 0x4
000000000001283d         je         loc_12da3

0000000000012843         lea        rax, qword [utf8_sb_map]                    ; utf8_sb_map
000000000001284a         mov        qword [rbx+0x78], rax

                     loc_1284e:
000000000001284e         cmp        qword [rbx], 0x0                            ; CODE XREF=re_compile_internal+425, re_compile_internal+1939
0000000000012852         je         loc_12d96

0000000000012858         cmp        qword [rbx+0x40], 0x0
000000000001285d         je         loc_12d96

0000000000012863         mov        rax, qword [rsp+0x158+var_140]
0000000000012868         lea        rbp, qword [rsp+0x158+var_D8]
0000000000012870         mov        ecx, 0x12
0000000000012875         mov        dword [rsp+0x158+var_10C], 0x0
000000000001287d         lea        r8, qword [rbp+8]
0000000000012881         and        eax, 0x400000
0000000000012886         mov        qword [rsp+0x158+var_138], rax
000000000001288b         mov        rax, qword [rsp+0x158+var_150]
0000000000012890         setne      dl
0000000000012893         mov        rdi, r8
0000000000012896         mov        rsi, qword [rax+0x28]
000000000001289a         xor        eax, eax
000000000001289c         rep stosq  qword [rdi], rax
000000000001289f         mov        rax, qword [rsp+0x158+var_148]
00000000000128a4         mov        rdi, qword [rsp+0x158+var_158]
00000000000128a8         test       rsi, rsi
00000000000128ab         mov        byte [rsp+0x158+var_50], dl
00000000000128b2         mov        ecx, dword [rbx+0xb4]
00000000000128b8         setne      r12b
00000000000128bc         mov        qword [rsp+0x158+var_60], rsi
00000000000128c4         mov        qword [rsp+0x158+var_D8], rax
00000000000128cc         movzx      eax, byte [rbx+0xb0]
00000000000128d3         or         r12d, edx
00000000000128d6         mov        qword [rsp+0x158+var_80], rdi
00000000000128de         mov        qword [rsp+0x158+var_88], rdi
00000000000128e6         mov        esi, r12d
00000000000128e9         mov        byte [rsp+0x158+var_4D], r12b
00000000000128f1         mov        dword [rsp+0x158+var_48], ecx
00000000000128f8         mov        qword [rsp+0x158+var_70], rdi
0000000000012900         mov        qword [rsp+0x158+var_78], rdi
0000000000012908         mov        edx, eax
000000000001290a         shr        al, 0x3
000000000001290d         shr        dl, 0x2
0000000000012910         and        eax, 0x1
0000000000012913         and        edx, 0x1
0000000000012916         test       rdi, rdi
0000000000012919         mov        byte [rsp+0x158+var_4E], al
0000000000012920         mov        byte [rsp+0x158+var_4F], dl
0000000000012927         jne        loc_12d65

000000000001292d         test       sil, sil
0000000000012930         je         loc_1293f

                     loc_12932:
0000000000012932         mov        rax, qword [rsp+0x158+var_D0]               ; CODE XREF=re_compile_internal+1793
000000000001293a         mov        qword [rsp+0x158+var_148], rax

                     loc_1293f:
000000000001293f         cmp        qword [rsp+0x158+var_138], 0x0              ; CODE XREF=re_compile_internal+672, re_compile_internal+1787
0000000000012945         mov        rax, qword [rsp+0x158+var_148]
000000000001294a         mov        qword [rsp+0x158+var_D0], rax
0000000000012952         je         loc_12a55

0000000000012958         cmp        ecx, 0x1
000000000001295b         jle        loc_1354d

                     loc_12961:
0000000000012961         mov        rdi, rbp                                    ; CODE XREF=re_compile_internal+796
0000000000012964         call       build_wcs_upper_buffer                      ; build_wcs_upper_buffer
0000000000012969         test       eax, eax
000000000001296b         jne        loc_129b0

000000000001296d         mov        rax, qword [rsp+0x158+var_158]
0000000000012971         cmp        rax, qword [rsp+0x158+var_A0]
0000000000012979         jle        loc_13530

000000000001297f         movsxd     rax, dword [rbx+0xb4]
0000000000012986         mov        rsi, qword [rsp+0x158+var_98]
000000000001298e         add        rax, qword [rsp+0x158+var_A8]
0000000000012996         cmp        rsi, rax
0000000000012999         jg         loc_13530

000000000001299f         add        rsi, rsi
00000000000129a2         mov        rdi, rbp
00000000000129a5         call       re_string_realloc_buffers                   ; re_string_realloc_buffers
00000000000129aa         test       eax, eax
00000000000129ac         je         loc_12961

00000000000129ae         nop

                     loc_129b0:
00000000000129b0         mov        dword [rsp+0x158+var_10C], eax              ; CODE XREF=re_compile_internal+731, re_compile_internal+1652, re_compile_internal+1679, re_compile_internal+1764, sub_13010+177, sub_13010+495
00000000000129b4         mov        rax, qword [rsp+0x158+var_150]
00000000000129b9         mov        r13, qword [rax]

                     loc_129bc:
00000000000129bc         mov        rdi, qword [r13+0x70]                       ; CODE XREF=sub_13010+1013, sub_13010+1378, sub_13620+124, sub_13620+155
00000000000129c0         test       rdi, rdi
00000000000129c3         je         loc_129d8

00000000000129c5         nop        dword [rax]

                     loc_129c8:
00000000000129c8         mov        r12, qword [rdi]                            ; CODE XREF=re_compile_internal+838
00000000000129cb         call       j_free                                      ; free
00000000000129d0         test       r12, r12
00000000000129d3         mov        rdi, r12
00000000000129d6         jne        loc_129c8

                     loc_129d8:
00000000000129d8         mov        rdi, qword [r13+0x20]                       ; argument "__ptr" for method j_free, CODE XREF=re_compile_internal+819
00000000000129dc         mov        qword [r13+0x70], 0x0
00000000000129e4         mov        dword [r13+0x80], 0xf
00000000000129ef         mov        qword [r13+0x68], 0x0
00000000000129f7         call       j_free                                      ; free
00000000000129fc         mov        qword [r13+0x20], 0x0
0000000000012a04         mov        rdi, rbp
0000000000012a07         call       re_string_destruct                          ; re_string_destruct

                     loc_12a0c:
0000000000012a0c         mov        rdi, rbx                                    ; CODE XREF=re_compile_internal+1806, sub_13010+1000
0000000000012a0f         call       free_dfa_content                            ; free_dfa_content
0000000000012a14         mov        rax, qword [rsp+0x158+var_150]
0000000000012a19         mov        qword [rax], 0x0
0000000000012a20         mov        qword [rax+8], 0x0
0000000000012a28         mov        eax, dword [rsp+0x158+var_10C]

                     loc_12a2c:
0000000000012a2c         mov        rbx, qword [rsp+0x158+var_40]               ; CODE XREF=sub_13010+994, sub_13620+134
0000000000012a34         xor        rbx, qword [fs:0x28]
0000000000012a3d         jne        loc_13780

0000000000012a43         add        rsp, 0x128
0000000000012a4a         pop        rbx
0000000000012a4b         pop        rbp
0000000000012a4c         pop        r12
0000000000012a4e         pop        r13
0000000000012a50         pop        r14
0000000000012a52         pop        r15
0000000000012a54         ret
                        ; endp

                     loc_12a55:
0000000000012a55         cmp        ecx, 0x1                                    ; CODE XREF=re_compile_internal+706
0000000000012a58         jg         loc_1340a

0000000000012a5e         test       r12b, r12b
0000000000012a61         mov        rsi, qword [rsp+0x158+var_98]
0000000000012a69         je         loc_13084

0000000000012a6f         cmp        qword [rsp+0x158+var_80], rsi
0000000000012a77         mov        rax, qword [rsp+0x158+var_A8]
0000000000012a7f         cmovle     rsi, qword [rsp+0x158+var_80]
0000000000012a88         cmp        rsi, rax
0000000000012a8b         jg         loc_12a9d

0000000000012a8d         jmp        loc_12ad0
0000000000012a8f         align      16

                     loc_12a90:
0000000000012a90         mov        rdx, qword [rsp+0x158+var_D0]               ; CODE XREF=re_compile_internal+1086
0000000000012a98         mov        qword [rsp+0x158+var_148], rdx

                     loc_12a9d:
0000000000012a9d         mov        rdx, qword [rsp+0x158+var_D8]               ; CODE XREF=re_compile_internal+1019
0000000000012aa5         mov        rcx, qword [rsp+0x158+var_60]
0000000000012aad         add        rdx, rax
0000000000012ab0         add        rdx, qword [rsp+0x158+var_B0]
0000000000012ab8         movzx      edx, byte [rdx]
0000000000012abb         movzx      edx, byte [rcx+rdx]
0000000000012abf         mov        rcx, qword [rsp+0x158+var_148]
0000000000012ac4         mov        byte [rcx+rax], dl
0000000000012ac7         add        rax, 0x1
0000000000012acb         cmp        rsi, rax
0000000000012ace         jne        loc_12a90

                     loc_12ad0:
0000000000012ad0         mov        qword [rsp+0x158+var_A8], rax               ; CODE XREF=re_compile_internal+1021
0000000000012ad8         mov        qword [rsp+0x158+var_A0], rax
0000000000012ae0         mov        dword [rsp+0x158+var_10C], 0x0

                     loc_12ae8:
0000000000012ae8         mov        r12, qword [rsp+0x158+var_150]              ; CODE XREF=sub_13010+140, sub_13010+1034, sub_13010+1320, sub_13010+1357
0000000000012aed         mov        r14, qword [rsp+0x158+var_140]
0000000000012af2         lea        r13, qword [rsp+0x158+var_108]
0000000000012af7         mov        rsi, rbp
0000000000012afa         mov        rdi, r13
0000000000012afd         mov        qword [rsp+0x158+var_130], r13
0000000000012b02         mov        r15, qword [r12]
0000000000012b06         mov        rdx, r14
0000000000012b09         mov        qword [r12+0x30], 0x0
0000000000012b12         or         rdx, 0x800000
0000000000012b19         mov        qword [r15+0xd8], r14
0000000000012b20         call       peek_token                                  ; peek_token
0000000000012b25         lea        r9, qword [rsp+0x158+var_10C]
0000000000012b2a         xor        r8d, r8d
0000000000012b2d         mov        rcx, r14
0000000000012b30         mov        rdx, r13
0000000000012b33         mov        rsi, r12
0000000000012b36         mov        rdi, rbp
0000000000012b39         cdqe
0000000000012b3b         add        qword [rsp+0x158+var_90], rax
0000000000012b43         call       parse_reg_exp                               ; parse_reg_exp
0000000000012b48         mov        ecx, dword [rsp+0x158+var_10C]
0000000000012b4c         test       ecx, ecx
0000000000012b4e         jne        loc_13577

0000000000012b54         lea        r13, qword [r15+0x70]
0000000000012b58         lea        r12, qword [rsp+0x158+var_F8]
0000000000012b5d         sub        r15, 0xffffffffffffff80
0000000000012b61         xor        edx, edx
0000000000012b63         xor        ecx, ecx
0000000000012b65         mov        rsi, r15
0000000000012b68         mov        r8, r12
0000000000012b6b         mov        rdi, r13
0000000000012b6e         mov        qword [rsp+0x158+var_158], rax
0000000000012b72         mov        byte [rsp+0x158+var_F0], 0x2
0000000000012b77         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000012b7c         mov        r9, qword [rsp+0x158+var_158]
0000000000012b80         mov        r11, rax
0000000000012b83         mov        rdx, rax
0000000000012b86         test       r9, r9
0000000000012b89         je         loc_12bb2

                     loc_12b8b:
0000000000012b8b         mov        rcx, r11                                    ; CODE XREF=sub_13010+1439
0000000000012b8e         mov        rdx, r9
0000000000012b91         mov        r8, r12
0000000000012b94         mov        rsi, r15
0000000000012b97         mov        rdi, r13
0000000000012b9a         mov        qword [rsp+0x158+var_158], r11
0000000000012b9e         mov        byte [rsp+0x158+var_F0], 0x10
0000000000012ba3         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000012ba8         mov        r11, qword [rsp+0x158+var_158]
0000000000012bac         mov        rdx, r11
0000000000012baf         mov        r11, rax

                     loc_12bb2:
0000000000012bb2         test       rdx, rdx                                    ; CODE XREF=re_compile_internal+1273
0000000000012bb5         mov        rcx, qword [rsp+0x158+var_150]
0000000000012bba         sete       dl
0000000000012bbd         test       r11, r11
0000000000012bc0         sete       al
0000000000012bc3         or         dl, al
0000000000012bc5         mov        r13, qword [rcx]
0000000000012bc8         jne        loc_13562

0000000000012bce         mov        r15, qword [r13+8]
0000000000012bd2         mov        qword [rbx+0x68], r11
0000000000012bd6         lea        rcx, qword [r15*8]
0000000000012bde         lea        r15, qword [r15+r15*2]
0000000000012be2         mov        rdi, rcx                                    ; argument "__size" for method j_malloc
0000000000012be5         mov        qword [rsp+0x158+var_158], rcx
0000000000012be9         shl        r15, 0x3
0000000000012bed         call       j_malloc                                    ; malloc
0000000000012bf2         mov        rcx, qword [rsp+0x158+var_158]
0000000000012bf6         mov        qword [r13+0x18], rax
0000000000012bfa         mov        qword [rsp+0x158+var_140], rax
0000000000012bff         mov        rdi, rcx                                    ; argument "__size" for method j_malloc
0000000000012c02         call       j_malloc                                    ; malloc
0000000000012c07         mov        rdi, r15                                    ; argument "__size" for method j_malloc
0000000000012c0a         mov        qword [r13+0x20], rax
0000000000012c0e         mov        qword [rsp+0x158+var_148], rax
0000000000012c13         call       j_malloc                                    ; malloc
0000000000012c18         mov        rdi, r15                                    ; argument "__size" for method j_malloc
0000000000012c1b         mov        qword [r13+0x28], rax
0000000000012c1f         mov        qword [rsp+0x158+var_158], rax
0000000000012c23         call       j_malloc                                    ; malloc
0000000000012c28         mov        rdx, qword [rsp+0x158+var_140]
0000000000012c2d         mov        qword [r13+0x30], rax
0000000000012c31         mov        rsi, qword [rsp+0x158+var_158]
0000000000012c35         mov        rcx, qword [rsp+0x158+var_148]
0000000000012c3a         test       rdx, rdx
0000000000012c3d         je         loc_133fd

0000000000012c43         test       rcx, rcx
0000000000012c46         je         loc_133fd

0000000000012c4c         test       rsi, rsi
0000000000012c4f         je         loc_133fd

0000000000012c55         test       rax, rax
0000000000012c58         je         loc_133fd

0000000000012c5e         mov        rax, qword [rsp+0x158+var_150]
0000000000012c63         mov        r15, qword [rax+0x30]
0000000000012c67         lea        rdi, qword [r15*8]                          ; argument "__size" for method j_malloc
0000000000012c6f         call       j_malloc                                    ; malloc
0000000000012c74         test       rax, rax
0000000000012c77         mov        qword [r13+0xe0], rax
0000000000012c7e         je         loc_12ced

0000000000012c80         test       r15, r15
0000000000012c83         je         loc_12c9d

0000000000012c85         xor        edx, edx
0000000000012c87         nop        word [rax+rax]

                     loc_12c90:
0000000000012c90         mov        qword [rax+rdx*8], rdx                      ; CODE XREF=re_compile_internal+1547
0000000000012c94         add        rdx, 0x1
0000000000012c98         cmp        rdx, r15
0000000000012c9b         jne        loc_12c90

                     loc_12c9d:
0000000000012c9d         mov        rdi, qword [r13+0x68]                       ; CODE XREF=re_compile_internal+1523
0000000000012ca1         lea        rsi, qword [optimize_subexps]               ; optimize_subexps
0000000000012ca8         mov        rdx, r13
0000000000012cab         call       preorder                                    ; preorder
0000000000012cb0         mov        rax, qword [rsp+0x158+var_150]
0000000000012cb5         mov        rdi, qword [r13+0xe0]
0000000000012cbc         mov        rdx, qword [rax+0x30]
0000000000012cc0         test       rdx, rdx
0000000000012cc3         je         loc_135b4

0000000000012cc9         mov        rax, qword [rdi]
0000000000012ccc         test       rax, rax
0000000000012ccf         je         loc_12cde

0000000000012cd1         jmp        loc_12ced
0000000000012cd3         align      8

                     loc_12cd8:
0000000000012cd8         cmp        qword [rdi+rax*8], rax                      ; CODE XREF=re_compile_internal+1621
0000000000012cdc         jne        loc_12ced

                     loc_12cde:
0000000000012cde         add        rax, 0x1                                    ; CODE XREF=re_compile_internal+1599
0000000000012ce2         cmp        rdx, rax
0000000000012ce5         ja         loc_12cd8

0000000000012ce7         je         loc_135b4

                     loc_12ced:
0000000000012ced         mov        rdi, qword [r13+0x68]                       ; CODE XREF=re_compile_internal+1518, re_compile_internal+1601, re_compile_internal+1612, sub_13010+1460
0000000000012cf1         mov        rdx, qword [rsp+0x158+var_150]
0000000000012cf6         lea        rsi, qword [lower_subexps]                  ; lower_subexps
0000000000012cfd         call       postorder                                   ; postorder
0000000000012d02         test       eax, eax
0000000000012d04         jne        loc_129b0

0000000000012d0a         mov        rdi, qword [r13+0x68]
0000000000012d0e         lea        rsi, qword [calc_first]                     ; calc_first
0000000000012d15         mov        rdx, r13
0000000000012d18         call       postorder                                   ; postorder
0000000000012d1d         test       eax, eax
0000000000012d1f         jne        loc_129b0

0000000000012d25         mov        rdi, qword [r13+0x68]
0000000000012d29         lea        rsi, qword [calc_next]                      ; calc_next
0000000000012d30         mov        rdx, r13
0000000000012d33         call       preorder                                    ; preorder
0000000000012d38         mov        rdx, qword [r13+0x68]
0000000000012d3c         lea        rsi, qword [switch_table_15d54+20]          ; 0x15d68
0000000000012d43         nop        dword [rax+rax]

                     loc_12d48:
0000000000012d48         movzx      ecx, byte [rdx+0x30]                        ; CODE XREF=re_compile_internal+1983
0000000000012d4c         mov        rdi, qword [rdx+0x38]
0000000000012d50         cmp        cl, 0x10
0000000000012d53         ja         loc_12e28

0000000000012d59         movzx      eax, cl
0000000000012d5c         movsxd     rax, dword [rsi+rax*4]
0000000000012d60         add        rax, rsi
0000000000012d63         jmp        rax
                        ; endp

                     loc_12d65:
0000000000012d65         mov        rsi, qword [rsp+0x158+var_130]              ; CODE XREF=re_compile_internal+663
0000000000012d6a         mov        rdi, rbp
0000000000012d6d         call       re_string_realloc_buffers                   ; re_string_realloc_buffers
0000000000012d72         test       eax, eax
0000000000012d74         jne        loc_129b0

0000000000012d7a         movzx      esi, byte [rsp+0x158+var_4D]
0000000000012d82         mov        ecx, dword [rbx+0xb4]
0000000000012d88         test       sil, sil
0000000000012d8b         je         loc_1293f

0000000000012d91         jmp        loc_12932

                     loc_12d96:
0000000000012d96         mov        dword [rsp+0x158+var_10C], 0xc              ; CODE XREF=re_compile_internal+197, re_compile_internal+450, re_compile_internal+461, re_compile_internal+1833
0000000000012d9e         jmp        loc_12a0c

                     loc_12da3:
0000000000012da3         mov        esi, 0x1                                    ; argument "__size" for method j_calloc, CODE XREF=re_compile_internal+429
0000000000012da8         mov        edi, 0x20                                   ; argument "__nmemb" for method j_calloc
0000000000012dad         call       j_calloc                                    ; calloc
0000000000012db2         test       rax, rax
0000000000012db5         mov        qword [rbx+0x78], rax
0000000000012db9         je         loc_12d96

0000000000012dbb         xor        r12d, r12d
0000000000012dbe         xor        ebp, ebp
0000000000012dc0         mov        r13d, 0x1

                     loc_12dc6:
0000000000012dc6         xor        r15d, r15d                                  ; CODE XREF=re_compile_internal+1937
0000000000012dc9         nop        dword [rax]

                     loc_12dd0:
0000000000012dd0         lea        r14d, dword [rbp+r15]                       ; CODE XREF=re_compile_internal+1922
0000000000012dd5         mov        edi, r14d                                   ; argument "__c" for method j_btowc
0000000000012dd8         call       j_btowc                                     ; btowc
0000000000012ddd         cmp        eax, 0xffffffff
0000000000012de0         je         loc_12df5

0000000000012de2         mov        rsi, qword [rbx+0x78]
0000000000012de6         mov        rdi, r13
0000000000012de9         mov        ecx, r15d
0000000000012dec         shl        rdi, cl
0000000000012def         add        rsi, r12
0000000000012df2         or         qword [rsi], rdi

                     loc_12df5:
0000000000012df5         test       r14d, 0xffffff80                            ; CODE XREF=re_compile_internal+1872
0000000000012dfc         jne        loc_12e0a

0000000000012dfe         cmp        eax, r14d
0000000000012e01         je         loc_12e0a

0000000000012e03         or         byte [rbx+0xb0], 0x8

                     loc_12e0a:
0000000000012e0a         add        r15, 0x1                                    ; CODE XREF=re_compile_internal+1900, re_compile_internal+1905
0000000000012e0e         cmp        r15, 0x40
0000000000012e12         jne        loc_12dd0

0000000000012e14         add        ebp, 0x40
0000000000012e17         add        r12, 0x8
0000000000012e1b         cmp        ebp, 0x100
0000000000012e21         jne        loc_12dc6

0000000000012e23         jmp        loc_1284e

                     loc_12e28:
0000000000012e28         and        ecx, 0x8                                    ; CODE XREF=re_compile_internal+1731
0000000000012e2b         jne        loc_13742

0000000000012e31         mov        rax, qword [rdx+0x20]
0000000000012e35         mov        rcx, qword [rax+0x38]
0000000000012e39         mov        rax, qword [r13+0x18]
0000000000012e3d         mov        qword [rax+rdi*8], rcx
0000000000012e41         mov        r15, qword [rdx+8]
0000000000012e45         xor        edi, edi                                    ; CODE XREF=sub_12f40+155
0000000000012e47         test       r15, r15
0000000000012e4a         je         loc_12e5b

                     loc_12e4c:
0000000000012e4c         mov        rdx, r15                                    ; CODE XREF=re_compile_internal+2017
0000000000012e4f         jmp        loc_12d48
0000000000012e54         align      8

                     loc_12e58:
0000000000012e58         mov        rdx, rax                                    ; CODE XREF=re_compile_internal+2028

                     loc_12e5b:
0000000000012e5b         mov        r15, qword [rdx+0x10]                       ; CODE XREF=re_compile_internal+1978
0000000000012e5f         test       r15, r15
0000000000012e62         sete       cl
0000000000012e65         cmp        r15, rdi
0000000000012e68         sete       al
0000000000012e6b         or         cl, al
0000000000012e6d         mov        byte [rsp+0x158+var_148], cl
0000000000012e71         je         loc_12e4c

0000000000012e73         mov        rax, qword [rdx]
0000000000012e76         mov        rdi, rdx
0000000000012e79         test       rax, rax
0000000000012e7c         jne        loc_12e58

0000000000012e7e         xor        r14d, r14d
0000000000012e81         xor        r15d, r15d
0000000000012e84         nop        dword [rax]

                     loc_12e88:
0000000000012e88         mov        rdx, qword [r13+0x10]                       ; CODE XREF=sub_13010+201
0000000000012e8c         cmp        rdx, r15
0000000000012e8f         je         loc_12eb6

                     loc_12e91:
0000000000012e91         lea        r10, qword [r15+r15*2]                      ; CODE XREF=re_compile_internal+2084, re_compile_internal+2101, sub_13010+233
0000000000012e95         mov        rax, qword [r13+0x30]
0000000000012e99         shl        r10, 0x3
0000000000012e9d         cmp        qword [rax+r10+8], 0x0
0000000000012ea3         je         loc_130a8

0000000000012ea9         mov        rdx, qword [r13+0x10]
0000000000012ead         add        r15, 0x1
0000000000012eb1         cmp        rdx, r15
0000000000012eb4         jne        loc_12e91

                     loc_12eb6:
0000000000012eb6         test       r14b, r14b                                  ; CODE XREF=re_compile_internal+2047
0000000000012eb9         je         loc_130fe

                     loc_12ebf:
0000000000012ebf         xor        r14d, r14d                                  ; CODE XREF=sub_13010+221
0000000000012ec2         xor        r15d, r15d
0000000000012ec5         jmp        loc_12e91
0000000000012ec7         or         byte [r13+0xb0], 0x1
0000000000012ecf         mov        r15, qword [rdx+8]
0000000000012ed3         test       r15, r15
0000000000012ed6         je         sub_13010+1241
0000000000012edc         mov        rax, qword [r15+0x18]
0000000000012ee0         mov        rcx, qword [rax+0x38]
0000000000012ee4         mov        rax, qword [rdx+0x10]                       ; CODE XREF=sub_13010+1249
0000000000012ee8         test       rax, rax
0000000000012eeb         je         sub_13010+1228
0000000000012ef1         mov        rax, qword [rax+0x18]
0000000000012ef5         mov        r9, qword [rax+0x38]
0000000000012ef9         test       rcx, rcx                                    ; CODE XREF=sub_13010+1236
0000000000012efc         js         sub_136c0+161
0000000000012f02         test       r9, r9
0000000000012f05         js         sub_136c0+99
0000000000012f0b         mov        rax, qword [r13+0x28]
0000000000012f0f         lea        rdi, qword [rdi+rdi*2]
0000000000012f13         mov        qword [rsp+0x38], rsi
0000000000012f18         mov        qword [rsp+0x30], r9
0000000000012f1d         mov        qword [rsp+0x18], rcx
0000000000012f22         mov        qword [rsp+0x10], rdx
0000000000012f27         lea        r10, qword [rax+rdi*8]
0000000000012f2b         mov        edi, 0x10
0000000000012f30         mov        qword [r10], 0x2
0000000000012f37         mov        qword [rsp], r10
0000000000012f3b         call       j_malloc                                    ; malloc


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_12f40:
0000000000012f40         mov        r10, qword [rsp+0]
0000000000012f44         test       rax, rax
0000000000012f47         mov        rdx, qword [rsp+16]
0000000000012f4c         mov        rcx, qword [rsp+24]
0000000000012f51         mov        r9, qword [rsp+48]
0000000000012f56         mov        rsi, qword [rsp+56]
0000000000012f5b         mov        qword [r10+0x10], rax
0000000000012f5f         je         sub_13010+490

0000000000012f65         cmp        rcx, r9
0000000000012f68         je         loc_1353d

0000000000012f6e         mov        qword [r10+8], 0x2
0000000000012f76         jl         loc_13524

0000000000012f7c         mov        qword [rax], r9
0000000000012f7f         mov        qword [rax+8], rcx
0000000000012f83         jmp        re_compile_internal+1973
                        ; endp
0000000000012f88         mov        rax, qword [rdx+0x20]
0000000000012f8c         lea        rcx, qword [rdi+rdi*2]
0000000000012f90         mov        edi, 0x8
0000000000012f95         mov        qword [rsp+0x10], rsi
0000000000012f9a         mov        qword [rsp], rdx
0000000000012f9e         mov        r14, qword [rax+0x38]
0000000000012fa2         mov        rax, qword [r13+0x28]
0000000000012fa6         lea        r15, qword [rax+rcx*8]
0000000000012faa         mov        qword [r15], 0x1
0000000000012fb1         mov        qword [r15+8], 0x1
0000000000012fb9         call       j_malloc                                    ; malloc
0000000000012fbe         test       rax, rax
0000000000012fc1         mov        qword [r15+0x10], rax
0000000000012fc5         mov        rdx, qword [rsp]
0000000000012fc9         mov        rsi, qword [rsp+0x10]
0000000000012fce         je         sub_13620+88
0000000000012fd4         mov        qword [rax], r14
0000000000012fd7         mov        r15, qword [rdx+8]
0000000000012fdb         jmp        re_compile_internal+1973


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_12fe0:
0000000000012fe0         cmp        qword [rdx+0x20], 0x0
0000000000012fe5         je         re_compile_internal+1969

0000000000012feb         lea        rcx, qword [__PRETTY_FUNCTION__.6981]       ; argument "__function" for method j___assert_fail, "link_nfa_nodes"
0000000000012ff2         lea        rsi, qword [aCoreutils831li_15850]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/regcomp.c"
0000000000012ff9         lea        rdi, qword [aNodenextNull]                  ; argument "__assertion" for method j___assert_fail, "node->next == NULL"
0000000000013000         mov        edx, 0x59f                                  ; argument "__line" for method j___assert_fail
0000000000013005         call       j___assert_fail                             ; __assert_fail
                        ; endp
000000000001300a         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_13010:
0000000000013010         mov        rax, qword [rdx+0x20]
0000000000013014         mov        r15, qword [rax+0x38]
0000000000013018         mov        rax, qword [r13+0x18]
000000000001301c         mov        qword [rax+rdi*8], r15
0000000000013020         cmp        byte [rdx+0x30], 0x4
0000000000013024         jne        re_compile_internal+1969

000000000001302a         mov        rax, qword [r13+0x28]
000000000001302e         lea        rcx, qword [rdi+rdi*2]
0000000000013032         mov        edi, 0x8                                    ; argument "__size" for method j_malloc
0000000000013037         mov        qword [rsp+24], rsi
000000000001303c         mov        qword [rsp+16], rdx
0000000000013041         lea        rcx, qword [rax+rcx*8]
0000000000013045         mov        qword [rcx], 0x1
000000000001304c         mov        qword [rcx+8], 0x1
0000000000013054         mov        qword [rsp+0], rcx
0000000000013058         call       j_malloc                                    ; malloc
000000000001305d         mov        rcx, qword [rsp+0]
0000000000013061         test       rax, rax
0000000000013064         mov        rdx, qword [rsp+16]
0000000000013069         mov        rsi, qword [rsp+24]
000000000001306e         mov        qword [rcx+0x10], rax
0000000000013072         je         sub_136c0                                   ; sub_136c0

0000000000013078         mov        qword [rax], r15
000000000001307b         mov        r15, qword [rdx+8]
000000000001307f         jmp        re_compile_internal+1973
                        ; endp

                     loc_13084:
0000000000013084         mov        qword [rsp+0x158+var_A8], rsi               ; CODE XREF=re_compile_internal+985
000000000001308c         mov        qword [rsp+0x158+var_A0], rsi
0000000000013094         mov        dword [rsp+0x158+var_10C], 0x0
000000000001309c         jmp        loc_12ae8
00000000000130a1         align      8

                     loc_130a8:
00000000000130a8         mov        ecx, 0x1                                    ; CODE XREF=re_compile_internal+2067
00000000000130ad         mov        rdx, r15
00000000000130b0         mov        rsi, r13
00000000000130b3         mov        rdi, r12
00000000000130b6         mov        qword [rsp+0x158+var_158], r10
00000000000130ba         call       calc_eclosure_iter                          ; calc_eclosure_iter
00000000000130bf         test       eax, eax
00000000000130c1         jne        loc_129b0

00000000000130c7         mov        rax, qword [r13+0x30]
00000000000130cb         mov        r10, qword [rsp+0x158+var_158]
00000000000130cf         add        r15, 0x1
00000000000130d3         cmp        qword [rax+r10+8], 0x0
00000000000130d9         jne        loc_12e88

00000000000130df         mov        rdi, qword [rsp+0x158+var_E8]               ; argument "__ptr" for method j_free
00000000000130e4         call       j_free                                      ; free
00000000000130e9         cmp        qword [r13+0x10], r15
00000000000130ed         je         loc_12ebf

00000000000130f3         movzx      r14d, byte [rsp+0x158+var_148]
00000000000130f9         jmp        loc_12e91

                     loc_130fe:
00000000000130fe         mov        rax, qword [rsp+0x158+var_150]              ; CODE XREF=re_compile_internal+2089
0000000000013103         test       byte [rax+0x38], 0x10
0000000000013107         jne        loc_1311a

0000000000013109         cmp        qword [rax+0x30], 0x0
000000000001310e         je         loc_1311a

0000000000013110         test       byte [r13+0xb0], 0x1
0000000000013118         jne        loc_13128

                     loc_1311a:
000000000001311a         cmp        qword [r13+0x98], 0x0                       ; CODE XREF=sub_13010+247, sub_13010+254
0000000000013122         je         loc_1321b

                     loc_13128:
0000000000013128         lea        rdi, qword [rdx+rdx*2]                      ; CODE XREF=sub_13010+264
000000000001312c         mov        qword [rsp+0x158+var_158], rdx
0000000000013130         shl        rdi, 0x3                                    ; argument "__size" for method j_malloc
0000000000013134         call       j_malloc                                    ; malloc
0000000000013139         test       rax, rax
000000000001313c         mov        qword [r13+0x38], rax
0000000000013140         je         loc_1368c

0000000000013146         mov        rdx, qword [rsp+0x158+var_158]
000000000001314a         xor        esi, esi
000000000001314c         xor        ecx, ecx
000000000001314e         test       rdx, rdx
0000000000013151         jne        loc_13164

0000000000013153         jmp        loc_1321b
0000000000013158         align      32

                     loc_13160:
0000000000013160         mov        rax, qword [r13+0x38]                       ; CODE XREF=sub_13010+373

                     loc_13164:
0000000000013164         pxor       xmm0, xmm0                                  ; CODE XREF=sub_13010+321
0000000000013168         add        rax, rsi
000000000001316b         add        rcx, 0x1
000000000001316f         mov        qword [rax+0x10], 0x0
0000000000013177         add        rsi, 0x18
000000000001317b         movups     xmmword [rax], xmm0
000000000001317e         mov        rax, qword [r13+0x10]
0000000000013182         cmp        rcx, rax
0000000000013185         jb         loc_13160

0000000000013187         test       rax, rax
000000000001318a         je         loc_1321b

0000000000013190         mov        rax, qword [r13+0x30]
0000000000013194         mov        qword [rsp+0x158+var_140], 0x0
000000000001319d         mov        qword [rsp+0x158+var_148], 0x0

                     loc_131a6:
00000000000131a6         mov        rcx, qword [rsp+0x158+var_140]              ; CODE XREF=sub_13010+521
00000000000131ab         lea        rdx, qword [rax+rcx]
00000000000131af         cmp        qword [rdx+8], 0x0
00000000000131b4         mov        rcx, qword [rdx+0x10]
00000000000131b8         jle        loc_13204

00000000000131ba         xor        r15d, r15d
00000000000131bd         jmp        loc_131d8
00000000000131bf         align      64

                     loc_131c0:
00000000000131c0         mov        rax, qword [r13+0x30]                       ; CODE XREF=sub_13010+488
00000000000131c4         mov        rdx, qword [rsp+0x158+var_140]
00000000000131c9         add        r15, 0x1
00000000000131cd         mov        rcx, qword [rsp+0x158+var_158]
00000000000131d1         cmp        r15, qword [rax+rdx+8]
00000000000131d6         jge        loc_13204

                     loc_131d8:
00000000000131d8         mov        rax, qword [rcx+r15*8]                      ; CODE XREF=sub_13010+429
00000000000131dc         mov        qword [rsp+0x158+var_158], rcx
00000000000131e0         lea        rsi, qword [rax+rax*2]
00000000000131e4         mov        rax, qword [r13+0x38]
00000000000131e8         lea        rdi, qword [rax+rsi*8]
00000000000131ec         mov        rsi, qword [rsp+0x158+var_148]
00000000000131f1         call       re_node_set_insert_last                     ; re_node_set_insert_last
00000000000131f6         test       al, al
00000000000131f8         jne        loc_131c0

00000000000131fa         mov        eax, 0xc                                    ; CODE XREF=sub_13620+103
00000000000131ff         jmp        loc_129b0

                     loc_13204:
0000000000013204         add        qword [rsp+0x158+var_148], 0x1              ; CODE XREF=sub_13010+424, sub_13010+454
000000000001320a         add        qword [rsp+0x158+var_140], 0x18
0000000000013210         mov        rdx, qword [rsp+0x158+var_148]
0000000000013215         cmp        rdx, qword [r13+0x10]
0000000000013219         jb         loc_131a6

                     loc_1321b:
000000000001321b         movzx      eax, byte [rbx+0xb0]                        ; CODE XREF=sub_13010+274, sub_13010+323, sub_13010+378
0000000000013222         mov        dword [rsp+0x158+var_10C], 0x0
000000000001322a         shr        al, 0x2
000000000001322d         cmp        qword [rsp+0x158+var_138], 0x0
0000000000013233         sete       dl
0000000000013236         and        al, dl
0000000000013238         jne        loc_1341f

                     loc_1323e:
000000000001323e         mov        rax, qword [rbx+0x68]                       ; CODE XREF=sub_13010+1049, sub_13620+32, sub_13620+48, sub_13620+65, sub_136c0+34, sub_136c0+89
0000000000013242         mov        rdi, r12
0000000000013245         mov        rax, qword [rax+0x18]
0000000000013249         mov        rax, qword [rax+0x38]
000000000001324d         lea        rdx, qword [rax+rax*2]
0000000000013251         mov        qword [rbx+0x90], rax
0000000000013258         mov        rax, qword [rbx+0x30]
000000000001325c         lea        rsi, qword [rax+rdx*8]
0000000000013260         call       re_node_set_init_copy                       ; re_node_set_init_copy
0000000000013265         test       eax, eax
0000000000013267         mov        r15d, eax
000000000001326a         mov        dword [rsp+0x158+var_108], eax
000000000001326e         jne        loc_1338f

0000000000013274         cmp        qword [rbx+0x98], 0x0
000000000001327c         jle        loc_13350

0000000000013282         mov        r9, qword [rsp+0x158+var_F0]
0000000000013287         test       r9, r9
000000000001328a         jle        loc_13350

0000000000013290         xor        r10d, r10d
0000000000013293         lea        r13, qword [r12+0x10]
0000000000013298         jmp        loc_132ad
000000000001329a         align      32

                     loc_132a0:
00000000000132a0         add        r10, 0x1                                    ; CODE XREF=sub_13010+695, sub_13010+711, sub_13010+774
00000000000132a4         cmp        r9, r10
00000000000132a7         jle        loc_13350

                     loc_132ad:
00000000000132ad         mov        rcx, qword [rsp+0x158+var_E8]               ; CODE XREF=sub_13010+648, sub_13010+818
00000000000132b2         mov        rsi, qword [rbx]
00000000000132b5         mov        r8, qword [rcx+r10*8]
00000000000132b9         mov        rdi, r8
00000000000132bc         shl        rdi, 0x4
00000000000132c0         add        rdi, rsi
00000000000132c3         cmp        byte [rdi+8], 0x4
00000000000132c7         jne        loc_132a0

00000000000132c9         xor        edx, edx
00000000000132cb         jmp        loc_132d9
00000000000132cd         align      16

                     loc_132d0:
00000000000132d0         add        rdx, 0x1                                    ; CODE XREF=sub_13010+728, sub_13010+736
00000000000132d4         cmp        r9, rdx
00000000000132d7         je         loc_132a0

                     loc_132d9:
00000000000132d9         mov        rax, qword [rcx+rdx*8]                      ; CODE XREF=sub_13010+699
00000000000132dd         shl        rax, 0x4
00000000000132e1         add        rax, rsi
00000000000132e4         cmp        byte [rax+8], 0x9
00000000000132e8         jne        loc_132d0

00000000000132ea         mov        r11, qword [rdi]
00000000000132ed         cmp        qword [rax], r11
00000000000132f0         jne        loc_132d0

00000000000132f2         mov        rdx, qword [rbx+0x28]
00000000000132f6         lea        rax, qword [r8+r8*2]
00000000000132fa         mov        rsi, r13
00000000000132fd         mov        rdi, r9
0000000000013300         lea        rax, qword [rdx+rax*8]
0000000000013304         mov        rax, qword [rax+0x10]
0000000000013308         mov        r11, qword [rax]
000000000001330b         mov        rdx, r11
000000000001330e         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
0000000000013313         test       rax, rax
0000000000013316         jne        loc_132a0

0000000000013318         mov        rax, qword [rbx+0x30]
000000000001331c         lea        rdx, qword [r11+r11*2]
0000000000013320         mov        rdi, r12
0000000000013323         lea        rsi, qword [rax+rdx*8]
0000000000013327         call       re_node_set_merge                           ; re_node_set_merge
000000000001332c         test       eax, eax
000000000001332e         jne        loc_13670

0000000000013334         mov        r9, qword [rsp+0x158+var_F0]
0000000000013339         mov        r10d, 0x1
000000000001333f         cmp        r9, r10
0000000000013342         jg         loc_132ad

0000000000013348         nop        dword [rax+rax]

                     loc_13350:
0000000000013350         mov        rdi, qword [rsp+0x158+var_130]              ; CODE XREF=sub_13010+620, sub_13010+634, sub_13010+663
0000000000013355         xor        ecx, ecx
0000000000013357         mov        rdx, r12
000000000001335a         mov        rsi, rbx
000000000001335d         call       re_acquire_state_context                    ; re_acquire_state_context
0000000000013362         test       rax, rax
0000000000013365         mov        qword [rbx+0x48], rax
0000000000013369         je         loc_134d2

000000000001336f         cmp        byte [rax+0x68], 0x0
0000000000013373         js         loc_13471

0000000000013379         mov        qword [rbx+0x60], rax
000000000001337d         mov        qword [rbx+0x58], rax
0000000000013381         mov        qword [rbx+0x50], rax

                     loc_13385:
0000000000013385         mov        rdi, qword [rsp+0x158+var_E8]               ; argument "__ptr" for method j_free, CODE XREF=sub_13010+1212
000000000001338a         call       j_free                                      ; free

                     loc_1338f:
000000000001338f         mov        rax, qword [rsp+0x158+var_150]              ; CODE XREF=sub_13010+606, sub_13010+1223, sub_13620+83
0000000000013394         mov        dword [rsp+0x158+var_10C], r15d
0000000000013399         mov        r13, qword [rax]
000000000001339c         mov        rdi, qword [r13+0x70]
00000000000133a0         test       rdi, rdi
00000000000133a3         je         loc_133b8

00000000000133a5         nop        dword [rax]

                     loc_133a8:
00000000000133a8         mov        r12, qword [rdi]                            ; CODE XREF=sub_13010+934
00000000000133ab         call       j_free                                      ; free
00000000000133b0         test       r12, r12
00000000000133b3         mov        rdi, r12
00000000000133b6         jne        loc_133a8

                     loc_133b8:
00000000000133b8         mov        rdi, qword [r13+0x20]                       ; argument "__ptr" for method j_free, CODE XREF=sub_13010+915
00000000000133bc         mov        qword [r13+0x70], 0x0
00000000000133c4         mov        dword [r13+0x80], 0xf
00000000000133cf         mov        qword [r13+0x68], 0x0
00000000000133d7         call       j_free                                      ; free
00000000000133dc         mov        qword [r13+0x20], 0x0
00000000000133e4         mov        rdi, rbp
00000000000133e7         call       re_string_destruct                          ; re_string_destruct
00000000000133ec         mov        eax, dword [rsp+0x158+var_10C]
00000000000133f0         test       eax, eax
00000000000133f2         je         loc_12a2c

00000000000133f8         jmp        loc_12a0c

                     loc_133fd:
00000000000133fd         mov        dword [rsp+0x158+var_10C], 0xc              ; CODE XREF=re_compile_internal+1453, re_compile_internal+1462, re_compile_internal+1471, re_compile_internal+1480
0000000000013405         jmp        loc_129bc

                     loc_1340a:
000000000001340a         mov        rdi, rbp                                    ; CODE XREF=re_compile_internal+968
000000000001340d         call       build_wcs_buffer                            ; build_wcs_buffer
0000000000013412         mov        dword [rsp+0x158+var_10C], 0x0
000000000001341a         jmp        loc_12ae8

                     loc_1341f:
000000000001341f         mov        rcx, qword [rsp+0x158+var_150]              ; CODE XREF=sub_13010+552
0000000000013424         cmp        qword [rcx+0x28], 0x0
0000000000013429         jne        loc_1323e

000000000001342f         mov        r10, qword [rbx+0x10]
0000000000013433         test       r10, r10
0000000000013436         je         loc_136ea

000000000001343c         mov        rsi, qword [rbx]
000000000001343f         lea        r9, qword [switch_table_15d54+88]           ; 0x15dac
0000000000013446         xor        r8d, r8d
0000000000013449         xor        edx, edx
000000000001344b         mov        rcx, rsi
000000000001344e         cmp        byte [rcx+8], 0xc
0000000000013452         ja         loc_1371e

0000000000013458         movzx      edi, byte [rcx+8]
000000000001345c         movsxd     rdi, dword [r9+rdi*4]
0000000000013460         add        rdi, r9
0000000000013463         jmp        rdi
                        ; endp

                     loc_13465:
0000000000013465         xor        ebp, ebp                                    ; CODE XREF=re_compile_internal+238
0000000000013467         mov        esi, 0x1
000000000001346c         jmp        loc_1279d

                     loc_13471:
0000000000013471         mov        r14, qword [rsp+0x158+var_130]              ; CODE XREF=sub_13010+867
0000000000013476         mov        ecx, 0x1
000000000001347b         mov        rdx, r12
000000000001347e         mov        rsi, rbx
0000000000013481         mov        rdi, r14
0000000000013484         call       re_acquire_state_context                    ; re_acquire_state_context
0000000000013489         mov        ecx, 0x2
000000000001348e         mov        rdx, r12
0000000000013491         mov        rsi, rbx
0000000000013494         mov        rdi, r14
0000000000013497         mov        qword [rbx+0x50], rax
000000000001349b         call       re_acquire_state_context                    ; re_acquire_state_context
00000000000134a0         mov        ecx, 0x6
00000000000134a5         mov        qword [rbx+0x58], rax
00000000000134a9         mov        rdx, r12
00000000000134ac         mov        rsi, rbx
00000000000134af         mov        rdi, r14
00000000000134b2         call       re_acquire_state_context                    ; re_acquire_state_context
00000000000134b7         cmp        qword [rbx+0x50], 0x0
00000000000134bc         mov        qword [rbx+0x60], rax
00000000000134c0         je         loc_134d2

00000000000134c2         cmp        qword [rbx+0x58], 0x0
00000000000134c7         je         loc_134d2

00000000000134c9         test       rax, rax
00000000000134cc         jne        loc_13385

                     loc_134d2:
00000000000134d2         mov        r15d, dword [rsp+0x158+var_108]             ; CODE XREF=sub_13010+857, sub_13010+1200, sub_13010+1207
00000000000134d7         jmp        loc_1338f
00000000000134dc         mov        rax, qword [rdx+0x20]                       ; CODE XREF=re_compile_internal+2139
00000000000134e0         mov        r9, qword [rax+0x38]
00000000000134e4         jmp        re_compile_internal+2153
00000000000134e9         mov        rax, qword [rdx+0x20]                       ; CODE XREF=re_compile_internal+2118
00000000000134ed         mov        rcx, qword [rax+0x38]
00000000000134f1         jmp        re_compile_internal+2132

                     loc_134f6:
00000000000134f6         mov        rdi, rbx                                    ; argument "__ptr" for method j_realloc, CODE XREF=re_compile_internal+108
00000000000134f9         mov        esi, 0xe8                                   ; argument "__size" for method j_realloc
00000000000134fe         call       j_realloc                                   ; realloc
0000000000013503         test       rax, rax
0000000000013506         mov        rbx, rax
0000000000013509         je         loc_136a1

000000000001350f         mov        rax, qword [rsp+0x158+var_150]
0000000000013514         mov        qword [rax+8], 0xe8
000000000001351c         mov        qword [rax], rbx
000000000001351f         jmp        loc_12702

                     loc_13524:
0000000000013524         mov        qword [rax], rcx                            ; CODE XREF=sub_12f40+54
0000000000013527         mov        qword [rax+8], r9
000000000001352b         jmp        re_compile_internal+1973
                        ; endp

                     loc_13530:
0000000000013530         mov        dword [rsp+0x158+var_10C], 0x0              ; CODE XREF=re_compile_internal+745, re_compile_internal+777
0000000000013538         jmp        loc_12ae8

                     loc_1353d:
000000000001353d         mov        qword [r10+8], 0x1                          ; CODE XREF=sub_12f40+40
0000000000013545         mov        qword [rax], rcx
0000000000013548         jmp        re_compile_internal+1973
                        ; endp

                     loc_1354d:
000000000001354d         mov        rdi, rbp                                    ; CODE XREF=re_compile_internal+715
0000000000013550         call       build_upper_buffer                          ; build_upper_buffer
0000000000013555         mov        dword [rsp+0x158+var_10C], 0x0
000000000001355d         jmp        loc_12ae8

                     loc_13562:
0000000000013562         mov        dword [rsp+0x158+var_10C], 0xc              ; CODE XREF=re_compile_internal+1336
000000000001356a         mov        qword [rbx+0x68], 0x0
0000000000013572         jmp        loc_129bc

                     loc_13577:
0000000000013577         test       rax, rax                                    ; CODE XREF=re_compile_internal+1214
000000000001357a         je         loc_136ab

0000000000013580         lea        r13, qword [r15+0x70]
0000000000013584         lea        r12, qword [rsp+0x158+var_F8]
0000000000013589         sub        r15, 0xffffffffffffff80
000000000001358d         xor        ecx, ecx
000000000001358f         xor        edx, edx
0000000000013591         mov        rsi, r15
0000000000013594         mov        r8, r12
0000000000013597         mov        rdi, r13
000000000001359a         mov        qword [rsp+0x158+var_158], rax
000000000001359e         mov        byte [rsp+0x158+var_F0], 0x2
00000000000135a3         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
00000000000135a8         mov        r9, qword [rsp+0x158+var_158]
00000000000135ac         mov        r11, rax
00000000000135af         jmp        loc_12b8b

                     loc_135b4:
00000000000135b4         call       j_free                                      ; free, CODE XREF=re_compile_internal+1587, re_compile_internal+1623
00000000000135b9         mov        qword [r13+0xe0], 0x0
00000000000135c4         jmp        loc_12ced
00000000000135c9         mov        r8d, eax

                     loc_135cc:
00000000000135cc         add        rdx, 0x1                                    ; CODE XREF=sub_13620+7, sub_13620+14, sub_13620+25, sub_13620+30, sub_13620+59, sub_136c0+28
00000000000135d0         add        rcx, 0x10
00000000000135d4         cmp        rdx, r10
00000000000135d7         jne        sub_13010+1086

00000000000135dd         or         r14b, r8b
00000000000135e0         je         sub_136c0+42

00000000000135e6         mov        rax, rdx
00000000000135e9         shl        rax, 0x4
00000000000135ed         add        rax, rsi
00000000000135f0         jmp        loc_13608

                     loc_135f2:
00000000000135f2         cmp        dl, 0x5                                     ; CODE XREF=sub_13010+1535
00000000000135f5         jne        loc_135fb

00000000000135f7         mov        byte [rsi+8], 0x7

                     loc_135fb:
00000000000135fb         add        rsi, 0x10                                   ; CODE XREF=sub_13010+1509, sub_13010+1540, sub_13010+1546
00000000000135ff         cmp        rax, rsi
0000000000013602         je         loc_136e7

                     loc_13608:
0000000000013608         movzx      edx, byte [rsi+8]                           ; CODE XREF=sub_13010+1504
000000000001360c         cmp        dl, 0x1
000000000001360f         jne        loc_135f2

0000000000013611         cmp        byte [rsi], 0x0
0000000000013614         jns        loc_135fb

0000000000013616         and        byte [rsi+0xa], 0xdf
000000000001361a         jmp        loc_135fb
000000000001361c         nop        dword [rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_13620:
0000000000013620         cmp        byte [rcx], 0x0
0000000000013623         cmovs      r14d, eax
0000000000013627         jmp        loc_135cc
0000000000013629         mov        edi, dword [rcx]
000000000001362b         cmp        edi, 0x20
000000000001362e         je         sub_13010+1468
0000000000013630         jbe        sub_136c0+25
0000000000013636         cmp        edi, 0x40
0000000000013639         je         sub_13010+1468
000000000001363b         add        edi, 0xffffff80
000000000001363e         je         sub_13010+1468
0000000000013640         jmp        sub_13010+558
0000000000013645         nop        dword [rax]
0000000000013648         mov        rdi, qword [rcx]
000000000001364b         cmp        qword [rdi+0x10], 0x0
0000000000013650         jne        sub_13010+558
0000000000013656         cmp        qword [rdi+0x18], 0x0
000000000001365b         je         sub_13010+1468
0000000000013661         jmp        sub_13010+558
0000000000013666         nop        word [cs:rax+rax]

                     loc_13670:
0000000000013670         mov        r15d, eax                                   ; CODE XREF=sub_13010+798
0000000000013673         jmp        loc_1338f
0000000000013678         mov        qword [r15+8], 0x0                          ; CODE XREF=sub_12f40+142
0000000000013680         mov        qword [r15], 0x0
0000000000013687         jmp        sub_13010+490

                     loc_1368c:
000000000001368c         mov        rax, qword [rsp+0x158+var_150]              ; CODE XREF=sub_13010+304
0000000000013691         mov        dword [rsp+0x158+var_10C], 0xc
0000000000013699         mov        r13, qword [rax]
000000000001369c         jmp        loc_129bc

                     loc_136a1:
00000000000136a1         mov        eax, 0xc                                    ; CODE XREF=sub_13010+1273
00000000000136a6         jmp        loc_12a2c

                     loc_136ab:
00000000000136ab         mov        rax, qword [rsp+0x158+var_150]              ; CODE XREF=sub_13010+1386
00000000000136b0         mov        qword [rbx+0x68], 0x0
00000000000136b8         mov        r13, qword [rax]
00000000000136bb         jmp        loc_129bc


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_136c0:
00000000000136c0         mov        qword [rcx+8], 0x0
00000000000136c8         mov        qword [rcx], 0x0
00000000000136cf         mov        eax, 0xc
00000000000136d4         jmp        re_compile_internal+800
                        ; endp
00000000000136d9         cmp        edi, 0x10                                   ; CODE XREF=sub_13620+16
00000000000136dc         je         sub_13010+1468
00000000000136e2         jmp        sub_13010+558

                     loc_136e7:
00000000000136e7         mov        r14d, r8d                                   ; CODE XREF=sub_13010+1522
                        ; endp

                     loc_136ea:
00000000000136ea         cmp        qword [rbx+0x98], 0x0                       ; CODE XREF=sub_13010+1062
00000000000136f2         movzx      edx, byte [rbx+0xb0]
00000000000136f9         mov        dword [rbx+0xb4], 0x1
0000000000013703         setg       al
0000000000013706         and        edx, 0xfffffff9
0000000000013709         or         eax, r14d
000000000001370c         and        eax, 0x1
000000000001370f         add        eax, eax
0000000000013711         or         eax, edx
0000000000013713         mov        byte [rbx+0xb0], al
0000000000013719         jmp        loc_1323e

                     loc_1371e:
000000000001371e         call       j_abort                                     ; abort, CODE XREF=sub_13010+1090
                        ; endp
0000000000013723         lea        rcx, qword [__PRETTY_FUNCTION__.6981]       ; "link_nfa_nodes", CODE XREF=re_compile_internal+2165
000000000001372a         lea        rsi, qword [aCoreutils831li_15850]          ; "../coreutils-8.31/lib/regcomp.c"
0000000000013731         lea        rdi, qword [aRight1]                        ; "right > -1"
0000000000013738         mov        edx, 0x5b0
000000000001373d         call       j___assert_fail                             ; __assert_fail

                     loc_13742:
0000000000013742         lea        rcx, qword [__PRETTY_FUNCTION__.6981]       ; argument "__function" for method j___assert_fail, "link_nfa_nodes", CODE XREF=re_compile_internal+1947
0000000000013749         lea        rsi, qword [aCoreutils831li_15850]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/regcomp.c"
0000000000013750         lea        rdi, qword [aIsepsilonnodeN]                ; argument "__assertion" for method j___assert_fail, "!IS_EPSILON_NODE (node->token.type)"
0000000000013757         mov        edx, 0x5c2                                  ; argument "__line" for method j___assert_fail
000000000001375c         call       j___assert_fail                             ; __assert_fail
                        ; endp
0000000000013761         lea        rcx, qword [__PRETTY_FUNCTION__.6981]       ; "link_nfa_nodes", CODE XREF=re_compile_internal+2156
0000000000013768         lea        rsi, qword [aCoreutils831li_15850]          ; "../coreutils-8.31/lib/regcomp.c"
000000000001376f         lea        rdi, qword [aLeft1]                         ; "left > -1"
0000000000013776         mov        edx, 0x5af
000000000001377b         call       j___assert_fail                             ; __assert_fail

                     loc_13780:
0000000000013780         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=re_compile_internal+941
                        ; endp
0000000000013785         align      16                                          ; End of unwind block (FDE at 0x184b4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_re_compile_pattern:
0000000000013790         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0x18504), CODE XREF=build_type_arg+109
0000000000013794         mov        rcx, qword [rpl_re_syntax_options]          ; rpl_re_syntax_options
000000000001379b         mov        r8, rdi
000000000001379e         mov        rdi, rdx
00000000000137a1         mov        rax, rcx
00000000000137a4         shr        rax, 0x19
00000000000137a8         and        eax, 0x1
00000000000137ab         shl        eax, 0x4
00000000000137ae         mov        edx, eax
00000000000137b0         movzx      eax, byte [rdi+0x38]
00000000000137b4         and        eax, 0xffffffef
00000000000137b7         or         eax, edx
00000000000137b9         mov        rdx, rsi
00000000000137bc         mov        rsi, r8
00000000000137bf         or         eax, 0xffffff80
00000000000137c2         mov        byte [rdi+0x38], al
00000000000137c5         call       re_compile_internal                         ; re_compile_internal
00000000000137ca         test       eax, eax
00000000000137cc         je         loc_137f8

00000000000137ce         lea        rdx, qword [__re_error_msgid_idx]           ; __re_error_msgid_idx
00000000000137d5         cdqe
00000000000137d7         lea        rsi, qword [__re_error_msgid]               ; "Success"
00000000000137de         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000137e0         add        rsi, qword [rdx+rax*8]                      ; argument "msgid" for method j_dcgettext
00000000000137e4         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000137e9         add        rsp, 0x8
00000000000137ed         jmp        j_dcgettext                                 ; dcgettext
                        ; endp
00000000000137f2         align      8

                     loc_137f8:
00000000000137f8         xor        eax, eax                                    ; CODE XREF=rpl_re_compile_pattern+60
00000000000137fa         add        rsp, 0x8
00000000000137fe         ret
                        ; endp
00000000000137ff         align      2048                                        ; End of unwind block (FDE at 0x18504)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_re_set_syntax:
0000000000013800         mov        rax, qword [rpl_re_syntax_options]          ; Begin of unwind block (FDE at 0x18524), rpl_re_syntax_options
0000000000013807         mov        qword [rpl_re_syntax_options], rdi          ; rpl_re_syntax_options
000000000001380e         ret
                        ; endp
000000000001380f         align      16                                          ; End of unwind block (FDE at 0x18524)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_re_compile_fastmap:
0000000000013810         push       r12                                         ; Begin of unwind block (FDE at 0x18538), CODE XREF=re_search_stub+663, rpl_regcomp+183
0000000000013812         push       rbp
0000000000013813         xor        eax, eax
0000000000013815         push       rbx
0000000000013816         mov        rbp, qword [rdi+0x20]
000000000001381a         mov        rbx, rdi
000000000001381d         mov        r12, qword [rdi]
0000000000013820         lea        rdi, qword [rbp+8]
0000000000013824         mov        rcx, rbp
0000000000013827         mov        qword [rbp], 0x0
000000000001382f         mov        qword [rbp+0xf8], 0x0
000000000001383a         and        rdi, 0xfffffffffffffff8
000000000001383e         sub        rcx, rdi
0000000000013841         add        ecx, 0x100
0000000000013847         shr        ecx, 0x3
000000000001384a         rep stosq  qword [rdi], rax
000000000001384d         mov        rcx, rbp
0000000000013850         mov        rdi, rbx
0000000000013853         mov        rsi, qword [r12+0x48]
0000000000013858         lea        rdx, qword [rsi+0x18]
000000000001385c         add        rsi, 0x10
0000000000013860         call       re_compile_fastmap_iter.isra.30             ; re_compile_fastmap_iter.isra.30
0000000000013865         mov        rax, qword [r12+0x50]
000000000001386a         cmp        qword [r12+0x48], rax
000000000001386f         je         loc_13889

0000000000013871         lea        rdx, qword [rax+0x18]
0000000000013875         lea        rsi, qword [rax+0x10]
0000000000013879         mov        rcx, rbp
000000000001387c         mov        rdi, rbx
000000000001387f         call       re_compile_fastmap_iter.isra.30             ; re_compile_fastmap_iter.isra.30
0000000000013884         mov        rax, qword [r12+0x48]

                     loc_13889:
0000000000013889         mov        rsi, qword [r12+0x58]                       ; CODE XREF=rpl_re_compile_fastmap+95
000000000001388e         cmp        rsi, rax
0000000000013891         je         loc_138ab

0000000000013893         lea        rdx, qword [rsi+0x18]
0000000000013897         mov        rcx, rbp
000000000001389a         add        rsi, 0x10
000000000001389e         mov        rdi, rbx
00000000000138a1         call       re_compile_fastmap_iter.isra.30             ; re_compile_fastmap_iter.isra.30
00000000000138a6         mov        rax, qword [r12+0x48]

                     loc_138ab:
00000000000138ab         mov        rsi, qword [r12+0x60]                       ; CODE XREF=rpl_re_compile_fastmap+129
00000000000138b0         cmp        rsi, rax
00000000000138b3         je         loc_138c8

00000000000138b5         lea        rdx, qword [rsi+0x18]
00000000000138b9         mov        rcx, rbp
00000000000138bc         add        rsi, 0x10
00000000000138c0         mov        rdi, rbx
00000000000138c3         call       re_compile_fastmap_iter.isra.30             ; re_compile_fastmap_iter.isra.30

                     loc_138c8:
00000000000138c8         or         byte [rbx+0x38], 0x8                        ; CODE XREF=rpl_re_compile_fastmap+163
00000000000138cc         xor        eax, eax
00000000000138ce         pop        rbx
00000000000138cf         pop        rbp
00000000000138d0         pop        r12
00000000000138d2         ret
                        ; endp
00000000000138d3         align      32                                          ; End of unwind block (FDE at 0x18538)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_8: int, 16
        ;    arg_0: int, 8
        ;    var_3C: int32_t, -60
        ;    var_40: int32_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96


                     re_search_stub:
00000000000138e0         push       r15                                         ; Begin of unwind block (FDE at 0x18564), CODE XREF=re_search_2_stub+136, rpl_re_match+14, rpl_re_search+11
00000000000138e2         push       r14
00000000000138e4         mov        rax, r8
00000000000138e7         push       r13
00000000000138e9         push       r12
00000000000138eb         add        r8, rcx
00000000000138ee         push       rbp
00000000000138ef         push       rbx
00000000000138f0         sub        rsp, 0x38
00000000000138f4         test       rcx, rcx
00000000000138f7         mov        ebx, dword [rsp+0x68+arg_8]
00000000000138fb         mov        r12, qword [rsp+0x68+arg_0]
0000000000013900         mov        dword [rsp+0x68+var_40], ebx
0000000000013904         js         loc_13c40

000000000001390a         cmp        rcx, rdx
000000000001390d         jg         loc_13c40

0000000000013913         cmp        r8, rdx
0000000000013916         mov        rbx, rcx
0000000000013919         mov        r15, rdi
000000000001391c         jg         loc_13ba0

0000000000013922         test       rax, rax
0000000000013925         js         loc_13930

0000000000013927         cmp        rcx, r8
000000000001392a         jg         loc_13ba0

                     loc_13930:
0000000000013930         test       r8, r8                                      ; CODE XREF=re_search_stub+69
0000000000013933         js         loc_13c18

0000000000013939         test       rax, rax
000000000001393c         jns        loc_13947

000000000001393e         cmp        rbx, r8
0000000000013941         jle        loc_13c18

                     loc_13947:
0000000000013947         movzx      eax, byte [r15+0x38]                        ; CODE XREF=re_search_stub+92, re_search_stub+707
000000000001394c         mov        r13d, eax
000000000001394f         shr        r13b, 0x5
0000000000013953         mov        edi, r13d
0000000000013956         and        edi, 0x3
0000000000013959         cmp        r8, rbx
000000000001395c         mov        dword [rsp+0x68+var_3C], edi
0000000000013960         jle        loc_13971

0000000000013962         cmp        qword [r15+0x20], 0x0
0000000000013967         je         loc_13971

0000000000013969         test       al, 0x8
000000000001396b         je         loc_13b60

                     loc_13971:
0000000000013971         test       al, 0x10                                    ; CODE XREF=re_search_stub+128, re_search_stub+135, re_search_stub+693, re_search_stub+849
0000000000013973         jne        loc_13b40

0000000000013979         test       r12, r12
000000000001397c         je         loc_13b40

0000000000013982         and        eax, 0x6
0000000000013985         mov        rcx, qword [r15+0x30]
0000000000013989         cmp        al, 0x4
000000000001398b         je         loc_13b20

                     loc_13991:
0000000000013991         lea        r14, qword [rcx+1]                          ; CODE XREF=re_search_stub+583
0000000000013995         mov        r13, r14

                     loc_13998:
0000000000013998         mov        rdi, r14                                    ; CODE XREF=re_search_stub+595
000000000001399b         shl        rdi, 0x4

                     loc_1399f:
000000000001399f         mov        qword [rsp+0x68+var_48], r9                 ; CODE XREF=re_search_stub+628
00000000000139a4         mov        qword [rsp+0x68+var_50], rdx
00000000000139a9         mov        qword [rsp+0x68+var_58], rsi
00000000000139ae         mov        qword [rsp+0x68+var_60], r8
00000000000139b3         call       j_malloc                                    ; malloc
00000000000139b8         test       rax, rax
00000000000139bb         mov        rbp, rax
00000000000139be         je         loc_13c50

00000000000139c4         sub        rsp, 0x8
00000000000139c8         mov        rcx, rbx
00000000000139cb         mov        rdi, r15
00000000000139ce         mov        eax, dword [rsp+0x70+var_3C]
00000000000139d2         push       rax
00000000000139d3         push       rbp
00000000000139d4         push       r14
00000000000139d6         mov        r9, qword [rsp+0x88+var_48]
00000000000139db         mov        r8, qword [rsp+0x88+var_60]
00000000000139e0         mov        rdx, qword [rsp+0x88+var_50]
00000000000139e5         mov        rsi, qword [rsp+0x88+var_58]
00000000000139ea         call       re_search_internal                          ; re_search_internal
00000000000139ef         add        rsp, 0x20
00000000000139f3         test       eax, eax
00000000000139f5         je         loc_13a28

00000000000139f7         cmp        eax, 0x1
00000000000139fa         mov        r12, 0xffffffffffffffff
0000000000013a01         je         loc_13a0a

                     loc_13a03:
0000000000013a03         mov        r12, 0xfffffffffffffffe                     ; CODE XREF=re_search_stub+530

                     loc_13a0a:
0000000000013a0a         mov        rdi, rbp                                    ; argument "__ptr" for method j_free, CODE XREF=re_search_stub+289, re_search_stub+545, re_search_stub+567
0000000000013a0d         call       j_free                                      ; free

                     loc_13a12:
0000000000013a12         add        rsp, 0x38                                   ; CODE XREF=re_search_stub+871, re_search_stub+887
0000000000013a16         mov        rax, r12
0000000000013a19         pop        rbx
0000000000013a1a         pop        rbp
0000000000013a1b         pop        r12
0000000000013a1d         pop        r13
0000000000013a1f         pop        r14
0000000000013a21         pop        r15
0000000000013a23         ret
                        ; endp
0000000000013a24         align      8

                     loc_13a28:
0000000000013a28         test       r12, r12                                    ; CODE XREF=re_search_stub+277
0000000000013a2b         je         loc_13af8

0000000000013a31         movzx      eax, byte [r15+0x38]
0000000000013a36         lea        rdx, qword [r13+1]
0000000000013a3a         shr        al, 0x1
0000000000013a3c         and        eax, 0x3
0000000000013a3f         je         loc_13bb0

0000000000013a45         cmp        eax, 0x1
0000000000013a48         je         loc_13c60

0000000000013a4e         cmp        eax, 0x2
0000000000013a51         jne        loc_13d40

0000000000013a57         cmp        r14, qword [r12]
0000000000013a5b         ja         loc_13d21

0000000000013a61         mov        r9d, 0x2

                     loc_13a67:
0000000000013a67         test       r13, r13                                    ; CODE XREF=re_search_stub+812, re_search_stub+906, re_search_stub+1004
0000000000013a6a         jle        loc_13cd8

0000000000013a70         mov        r8, qword [r12+8]
0000000000013a75         mov        rdi, qword [r12+0x10]
0000000000013a7a         lea        rsi, qword [r13*8]
0000000000013a82         mov        rdx, r13
0000000000013a85         xor        eax, eax
0000000000013a87         nop        word [rax+rax]

                     loc_13a90:
0000000000013a90         mov        rcx, qword [rbp+rax*2]                      ; CODE XREF=re_search_stub+457
0000000000013a95         mov        qword [r8+rax], rcx
0000000000013a99         mov        rcx, qword [rbp+rax*2+8]
0000000000013a9e         mov        qword [rdi+rax], rcx
0000000000013aa2         add        rax, 0x8
0000000000013aa6         cmp        rsi, rax
0000000000013aa9         jne        loc_13a90

                     loc_13aab:
0000000000013aab         cmp        qword [r12], rdx                            ; CODE XREF=re_search_stub+1021
0000000000013aaf         jbe        loc_13add

0000000000013ab1         mov        rsi, qword [r12+0x10]
0000000000013ab6         mov        rcx, qword [r12+8]
0000000000013abb         mov        rax, 0xffffffffffffffff
0000000000013ac2         nop        word [rax+rax]

                     loc_13ac8:
0000000000013ac8         mov        qword [rsi+rdx*8], rax                      ; CODE XREF=re_search_stub+507
0000000000013acc         add        r13, 0x1
0000000000013ad0         mov        qword [rcx+rdx*8], rax
0000000000013ad4         cmp        r13, qword [r12]
0000000000013ad8         mov        rdx, r13
0000000000013adb         jb         loc_13ac8

                     loc_13add:
0000000000013add         movzx      eax, byte [r15+0x38]                        ; CODE XREF=re_search_stub+463, re_search_stub+1037, re_search_stub+1053
0000000000013ae2         lea        r13d, dword [r9+r9]
0000000000013ae6         and        eax, 0xfffffff9
0000000000013ae9         or         eax, r13d
0000000000013aec         test       al, 0x6
0000000000013aee         mov        byte [r15+0x38], al
0000000000013af2         je         loc_13a03

                     loc_13af8:
0000000000013af8         cmp        byte [rsp+0x68+var_40], 0x0                 ; CODE XREF=re_search_stub+331
0000000000013afd         mov        r12, qword [rbp]
0000000000013b01         je         loc_13a0a

0000000000013b07         cmp        r12, rbx
0000000000013b0a         jne        loc_13d02

0000000000013b10         mov        r12, qword [rbp+8]
0000000000013b14         sub        r12, rbx
0000000000013b17         jmp        loc_13a0a
0000000000013b1c         align      32

                     loc_13b20:
0000000000013b20         mov        r14, qword [r12]                            ; CODE XREF=re_search_stub+171
0000000000013b24         cmp        r14, rcx
0000000000013b27         ja         loc_13991

0000000000013b2d         test       r14, r14
0000000000013b30         mov        r13, r14
0000000000013b33         jg         loc_13998

0000000000013b39         nop        dword [rax]

                     loc_13b40:
0000000000013b40         mov        edi, 0x10                                   ; CODE XREF=re_search_stub+147, re_search_stub+156
0000000000013b45         mov        r14d, 0x1
0000000000013b4b         mov        r13d, 0x1
0000000000013b51         xor        r12d, r12d
0000000000013b54         jmp        loc_1399f
0000000000013b59         align      32

                     loc_13b60:
0000000000013b60         mov        rdi, r15                                    ; CODE XREF=re_search_stub+139
0000000000013b63         mov        qword [rsp+0x68+var_48], r9
0000000000013b68         mov        qword [rsp+0x68+var_50], rdx
0000000000013b6d         mov        qword [rsp+0x68+var_58], rsi
0000000000013b72         mov        qword [rsp+0x68+var_60], r8
0000000000013b77         call       rpl_re_compile_fastmap                      ; rpl_re_compile_fastmap
0000000000013b7c         movzx      eax, byte [r15+0x38]
0000000000013b81         mov        r9, qword [rsp+0x68+var_48]
0000000000013b86         mov        rdx, qword [rsp+0x68+var_50]
0000000000013b8b         mov        rsi, qword [rsp+0x68+var_58]
0000000000013b90         mov        r8, qword [rsp+0x68+var_60]
0000000000013b95         jmp        loc_13971
0000000000013b9a         align      32

                     loc_13ba0:
0000000000013ba0         mov        r8, rdx                                     ; CODE XREF=re_search_stub+60, re_search_stub+74
0000000000013ba3         jmp        loc_13947
0000000000013ba8         align      16

                     loc_13bb0:
0000000000013bb0         lea        r14, qword [rdx*8]                          ; CODE XREF=re_search_stub+351
0000000000013bb8         mov        qword [rsp+0x68+var_60], rdx
0000000000013bbd         mov        rdi, r14                                    ; argument "__size" for method j_malloc
0000000000013bc0         call       j_malloc                                    ; malloc
0000000000013bc5         test       rax, rax
0000000000013bc8         mov        qword [r12+8], rax
0000000000013bcd         mov        rdx, qword [rsp+0x68+var_60]
0000000000013bd2         je         loc_13cea

0000000000013bd8         mov        rdi, r14                                    ; argument "__size" for method j_malloc
0000000000013bdb         mov        qword [rsp+0x68+var_60], rdx
0000000000013be0         mov        qword [rsp+0x68+var_58], rax
0000000000013be5         call       j_malloc                                    ; malloc
0000000000013bea         test       rax, rax
0000000000013bed         mov        qword [r12+0x10], rax
0000000000013bf2         mov        rdx, qword [rsp+0x68+var_60]
0000000000013bf7         mov        rcx, qword [rsp+0x68+var_58]
0000000000013bfc         je         loc_13ce2

0000000000013c02         mov        qword [r12], rdx
0000000000013c06         mov        r9d, 0x1
0000000000013c0c         jmp        loc_13a67
0000000000013c11         align      8

                     loc_13c18:
0000000000013c18         movzx      eax, byte [r15+0x38]                        ; CODE XREF=re_search_stub+83, re_search_stub+97
0000000000013c1d         xor        r8d, r8d
0000000000013c20         mov        r13d, eax
0000000000013c23         shr        r13b, 0x5
0000000000013c27         mov        edi, r13d
0000000000013c2a         and        edi, 0x3
0000000000013c2d         mov        dword [rsp+0x68+var_3C], edi
0000000000013c31         jmp        loc_13971
0000000000013c36         align      64

                     loc_13c40:
0000000000013c40         mov        r12, 0xffffffffffffffff                     ; CODE XREF=re_search_stub+36, re_search_stub+45
0000000000013c47         jmp        loc_13a12
0000000000013c4c         align      16

                     loc_13c50:
0000000000013c50         mov        r12, 0xfffffffffffffffe                     ; CODE XREF=re_search_stub+222
0000000000013c57         jmp        loc_13a12
0000000000013c5c         align      32

                     loc_13c60:
0000000000013c60         cmp        qword [r12], rdx                            ; CODE XREF=re_search_stub+360
0000000000013c64         mov        r9d, 0x1
0000000000013c6a         jae        loc_13a67

0000000000013c70         lea        rcx, qword [rdx*8]
0000000000013c78         mov        rdi, qword [r12+8]                          ; argument "__ptr" for method j_realloc
0000000000013c7d         mov        byte [rsp+0x68+var_50], r9b
0000000000013c82         mov        qword [rsp+0x68+var_58], rdx
0000000000013c87         mov        rsi, rcx                                    ; argument "__size" for method j_realloc
0000000000013c8a         mov        qword [rsp+0x68+var_60], rcx
0000000000013c8f         call       j_realloc                                   ; realloc
0000000000013c94         test       rax, rax
0000000000013c97         mov        r14, rax
0000000000013c9a         je         loc_13cea

0000000000013c9c         mov        rcx, qword [rsp+0x68+var_60]
0000000000013ca1         mov        rdi, qword [r12+0x10]                       ; argument "__ptr" for method j_realloc
0000000000013ca6         mov        rsi, rcx                                    ; argument "__size" for method j_realloc
0000000000013ca9         call       j_realloc                                   ; realloc
0000000000013cae         test       rax, rax
0000000000013cb1         mov        rdx, qword [rsp+0x68+var_58]
0000000000013cb6         movzx      r9d, byte [rsp+0x68+var_50]
0000000000013cbc         je         loc_13cf2

0000000000013cbe         mov        qword [r12+8], r14
0000000000013cc3         mov        qword [r12+0x10], rax
0000000000013cc8         mov        qword [r12], rdx
0000000000013ccc         jmp        loc_13a67
0000000000013cd1         align      8

                     loc_13cd8:
0000000000013cd8         xor        edx, edx                                    ; CODE XREF=re_search_stub+394
0000000000013cda         xor        r13d, r13d
0000000000013cdd         jmp        loc_13aab

                     loc_13ce2:
0000000000013ce2         mov        rdi, rcx                                    ; argument "__ptr" for method j_free, CODE XREF=re_search_stub+796
0000000000013ce5         call       j_free                                      ; free

                     loc_13cea:
0000000000013cea         xor        r9d, r9d                                    ; CODE XREF=re_search_stub+754, re_search_stub+954
0000000000013ced         jmp        loc_13add

                     loc_13cf2:
0000000000013cf2         mov        rdi, r14                                    ; argument "__ptr" for method j_free, CODE XREF=re_search_stub+988
0000000000013cf5         call       j_free                                      ; free
0000000000013cfa         xor        r9d, r9d
0000000000013cfd         jmp        loc_13add

                     loc_13d02:
0000000000013d02         lea        rcx, qword [__PRETTY_FUNCTION__.7847]       ; argument "__function" for method j___assert_fail, "re_search_stub", CODE XREF=re_search_stub+554
0000000000013d09         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/regexec.c"
0000000000013d10         lea        rdi, qword [aPmatch0rmsoSta]                ; argument "__assertion" for method j___assert_fail, "pmatch[0].rm_so == start"
0000000000013d17         mov        edx, 0x1be                                  ; argument "__line" for method j___assert_fail
0000000000013d1c         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_13d21:
0000000000013d21         lea        rcx, qword [__PRETTY_FUNCTION__.7859]       ; argument "__function" for method j___assert_fail, "re_copy_regs", CODE XREF=re_search_stub+379
0000000000013d28         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/regexec.c"
0000000000013d2f         lea        rdi, qword [aRegsnumregsNre]                ; argument "__assertion" for method j___assert_fail, "regs->num_regs >= nregs"
0000000000013d36         mov        edx, 0x1fb                                  ; argument "__line" for method j___assert_fail
0000000000013d3b         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_13d40:
0000000000013d40         lea        rcx, qword [__PRETTY_FUNCTION__.7859]       ; argument "__function" for method j___assert_fail, "re_copy_regs", CODE XREF=re_search_stub+369
0000000000013d47         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/regexec.c"
0000000000013d4e         lea        rdi, qword [aRegsallocatedR]                ; argument "__assertion" for method j___assert_fail, "regs_allocated == REGS_FIXED"
0000000000013d55         mov        edx, 0x1f9                                  ; argument "__line" for method j___assert_fail
0000000000013d5a         call       j___assert_fail                             ; __assert_fail
                        ; endp
0000000000013d5f         align      32                                          ; End of unwind block (FDE at 0x18564)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_18: int, 32
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_0: int, 8
        ;    var_3C: int32_t, -60
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80


                     re_search_2_stub:
0000000000013d60         push       r15                                         ; Begin of unwind block (FDE at 0x185c4), CODE XREF=rpl_re_match_2+16, rpl_re_search_2+18
0000000000013d62         push       r14
0000000000013d64         push       r13
0000000000013d66         push       r12
0000000000013d68         mov        r12, rdi
0000000000013d6b         push       rbp
0000000000013d6c         push       rbx
0000000000013d6d         mov        rbp, r8
0000000000013d70         mov        rbx, rdx
0000000000013d73         mov        rdx, rbp
0000000000013d76         sub        rsp, 0x28
0000000000013d7a         shr        rdx, 0x3f
0000000000013d7e         mov        rax, qword [rsp+0x58+arg_10]
0000000000013d83         mov        edi, edx
0000000000013d85         mov        r8d, dword [rsp+0x58+arg_18]
0000000000013d8a         shr        rax, 0x3f
0000000000013d8e         or         dil, al
0000000000013d91         jne        loc_13e60

0000000000013d97         test       rbx, rbx
0000000000013d9a         js         loc_13e60

0000000000013da0         mov        r15, rbx
0000000000013da3         add        r15, rbp
0000000000013da6         jo         loc_13e60

0000000000013dac         test       rbp, rbp
0000000000013daf         mov        r14, rcx
0000000000013db2         mov        rcx, r9
0000000000013db5         je         loc_13e70

0000000000013dbb         xor        r13d, r13d
0000000000013dbe         test       rbx, rbx
0000000000013dc1         mov        qword [rsp+0x58+var_50], rsi
0000000000013dc6         jne        loc_13e10

                     loc_13dc8:
0000000000013dc8         movzx      r8d, r8b                                    ; CODE XREF=re_search_2_stub+247, re_search_2_stub+278
0000000000013dcc         mov        rdx, r15
0000000000013dcf         mov        rsi, r14
0000000000013dd2         push       r8
0000000000013dd4         push       qword [rsp+0x60+arg_8]
0000000000013dd8         mov        rdi, r12
0000000000013ddb         mov        r9, qword [rsp+0x68+arg_10]
0000000000013de3         mov        r8, qword [rsp+0x68+arg_0]
0000000000013de8         call       re_search_stub                              ; re_search_stub
0000000000013ded         mov        rdi, r13                                    ; argument "__ptr" for method j_free
0000000000013df0         mov        rbx, rax
0000000000013df3         call       j_free                                      ; free
0000000000013df8         pop        rax
0000000000013df9         pop        rdx

                     loc_13dfa:
0000000000013dfa         add        rsp, 0x28                                   ; CODE XREF=re_search_2_stub+263
0000000000013dfe         mov        rax, rbx
0000000000013e01         pop        rbx
0000000000013e02         pop        rbp
0000000000013e03         pop        r12
0000000000013e05         pop        r13
0000000000013e07         pop        r14
0000000000013e09         pop        r15
0000000000013e0b         ret
                        ; endp
0000000000013e0c         align      16

                     loc_13e10:
0000000000013e10         mov        rdi, r15                                    ; argument "__size" for method j_malloc, CODE XREF=re_search_2_stub+102
0000000000013e13         mov        dword [rsp+0x58+var_3C], r8d
0000000000013e18         mov        qword [rsp+0x58+var_48], r9
0000000000013e1d         call       j_malloc                                    ; malloc
0000000000013e22         test       rax, rax
0000000000013e25         mov        r13, rax
0000000000013e28         je         loc_13e60

0000000000013e2a         mov        rsi, qword [rsp+0x58+var_50]                ; argument "__src" for method j_memcpy
0000000000013e2f         mov        rdx, rbx                                    ; argument "__n" for method j_memcpy
0000000000013e32         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
0000000000013e35         call       j_memcpy                                    ; memcpy
0000000000013e3a         lea        rdi, qword [r13+rbx]                        ; argument "__dest" for method j_memcpy
0000000000013e3f         mov        rsi, r14                                    ; argument "__src" for method j_memcpy
0000000000013e42         mov        rdx, rbp                                    ; argument "__n" for method j_memcpy
0000000000013e45         mov        r14, r13
0000000000013e48         call       j_memcpy                                    ; memcpy
0000000000013e4d         mov        rcx, qword [rsp+0x58+var_48]
0000000000013e52         mov        r8d, dword [rsp+0x58+var_3C]
0000000000013e57         jmp        loc_13dc8
0000000000013e5c         align      32

                     loc_13e60:
0000000000013e60         mov        rbx, 0xfffffffffffffffe                     ; CODE XREF=re_search_2_stub+49, re_search_2_stub+58, re_search_2_stub+70, re_search_2_stub+200
0000000000013e67         jmp        loc_13dfa
0000000000013e69         align      16

                     loc_13e70:
0000000000013e70         mov        r14, rsi                                    ; CODE XREF=re_search_2_stub+85
0000000000013e73         xor        r13d, r13d
0000000000013e76         jmp        loc_13dc8
0000000000013e7b         align      128                                         ; End of unwind block (FDE at 0x185c4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_regcomp:
0000000000013e80         mov        eax, edx                                    ; Begin of unwind block (FDE at 0x1861c)
0000000000013e82         push       r14
0000000000013e84         push       r13
0000000000013e86         and        eax, 0x1
0000000000013e89         push       r12
0000000000013e8b         push       rbp
0000000000013e8c         cmp        eax, 0x1
0000000000013e8f         push       rbx
0000000000013e90         mov        rbx, rdi
0000000000013e93         sbb        r14, r14
0000000000013e96         mov        qword [rdi], 0x0
0000000000013e9d         mov        qword [rdi+8], 0x0
0000000000013ea5         and        r14d, 0xfd4fca
0000000000013eac         mov        qword [rdi+0x10], 0x0
0000000000013eb4         mov        edi, 0x100                                  ; argument "__size" for method j_malloc
0000000000013eb9         mov        r12, rsi
0000000000013ebc         mov        ebp, edx
0000000000013ebe         add        r14, 0x3b2fc
0000000000013ec5         call       j_malloc                                    ; malloc
0000000000013eca         test       rax, rax
0000000000013ecd         mov        qword [rbx+0x20], rax
0000000000013ed1         je         loc_13f80

0000000000013ed7         mov        r13, rbp
0000000000013eda         shl        r13, 0x15
0000000000013ede         and        r13d, 0x400000
0000000000013ee5         or         r13, r14
0000000000013ee8         test       bpl, 0x4
0000000000013eec         jne        loc_13f50

0000000000013eee         and        byte [rbx+0x38], 0x7f

                     loc_13ef2:
0000000000013ef2         movzx      edx, byte [rbx+0x38]                        ; CODE XREF=rpl_regcomp+223
0000000000013ef6         shr        ebp, 0x3
0000000000013ef9         mov        rdi, r12                                    ; argument "__s" for method j_strlen
0000000000013efc         and        ebp, 0x1
0000000000013eff         mov        qword [rbx+0x28], 0x0
0000000000013f07         shl        ebp, 0x4
0000000000013f0a         and        edx, 0xffffffef
0000000000013f0d         or         ebp, edx
0000000000013f0f         mov        byte [rbx+0x38], bpl
0000000000013f13         call       j_strlen                                    ; strlen
0000000000013f18         mov        rcx, r13
0000000000013f1b         mov        rdx, rax
0000000000013f1e         mov        rsi, r12
0000000000013f21         mov        rdi, rbx
0000000000013f24         call       re_compile_internal                         ; re_compile_internal
0000000000013f29         cmp        eax, 0x10
0000000000013f2c         mov        ebp, eax
0000000000013f2e         je         loc_13f68

0000000000013f30         test       eax, eax
0000000000013f32         jne        loc_13f6d

0000000000013f34         mov        rdi, rbx
0000000000013f37         call       rpl_re_compile_fastmap                      ; rpl_re_compile_fastmap

                     loc_13f3c:
0000000000013f3c         pop        rbx                                         ; CODE XREF=rpl_regcomp+254
0000000000013f3d         mov        eax, ebp
0000000000013f3f         pop        rbp
0000000000013f40         pop        r12
0000000000013f42         pop        r13
0000000000013f44         pop        r14
0000000000013f46         ret
                        ; endp
0000000000013f47         align      16

                     loc_13f50:
0000000000013f50         and        r13, 0xffffffffffffffbf                     ; CODE XREF=rpl_regcomp+108
0000000000013f54         or         byte [rbx+0x38], 0x80
0000000000013f58         or         r13, 0x100
0000000000013f5f         jmp        loc_13ef2
0000000000013f61         align      8

                     loc_13f68:
0000000000013f68         mov        ebp, 0x8                                    ; CODE XREF=rpl_regcomp+174

                     loc_13f6d:
0000000000013f6d         mov        rdi, qword [rbx+0x20]                       ; argument "__ptr" for method j_free, CODE XREF=rpl_regcomp+178
0000000000013f71         call       j_free                                      ; free
0000000000013f76         mov        qword [rbx+0x20], 0x0
0000000000013f7e         jmp        loc_13f3c

                     loc_13f80:
0000000000013f80         mov        ebp, 0xc                                    ; CODE XREF=rpl_regcomp+81
0000000000013f85         pop        rbx
0000000000013f86         mov        eax, ebp
0000000000013f88         pop        rbp
0000000000013f89         pop        r12
0000000000013f8b         pop        r13
0000000000013f8d         pop        r14
0000000000013f8f         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_regerror:
0000000000013f90         push       r13                                         ; End of unwind block (FDE at 0x1861c), Begin of unwind block (FDE at 0x18668)
0000000000013f92         push       r12
0000000000013f94         push       rbp
0000000000013f95         push       rbx
0000000000013f96         sub        rsp, 0x8
0000000000013f9a         cmp        edi, 0x10
0000000000013f9d         ja         loc_14000

0000000000013f9f         lea        rax, qword [__re_error_msgid_idx]           ; __re_error_msgid_idx
0000000000013fa6         movsxd     rdi, edi
0000000000013fa9         lea        rsi, qword [__re_error_msgid]               ; "Success"
0000000000013fb0         mov        rbp, rdx
0000000000013fb3         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000013fb8         mov        r12, rcx
0000000000013fbb         add        rsi, qword [rax+rdi*8]                      ; argument "msgid" for method j_dcgettext
0000000000013fbf         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000013fc1         call       j_dcgettext                                 ; dcgettext
0000000000013fc6         mov        rdi, rax                                    ; argument "__s" for method j_strlen
0000000000013fc9         mov        r13, rax
0000000000013fcc         call       j_strlen                                    ; strlen
0000000000013fd1         test       r12, r12
0000000000013fd4         lea        rbx, qword [rax+1]
0000000000013fd8         je         loc_13fed

0000000000013fda         cmp        rbx, r12
0000000000013fdd         mov        rdx, rbx
0000000000013fe0         ja         loc_14008

                     loc_13fe2:
0000000000013fe2         mov        rsi, r13                                    ; argument "__src" for method j_memcpy, CODE XREF=rpl_regerror+131
0000000000013fe5         mov        rdi, rbp                                    ; argument "__dest" for method j_memcpy
0000000000013fe8         call       j_memcpy                                    ; memcpy

                     loc_13fed:
0000000000013fed         add        rsp, 0x8                                    ; CODE XREF=rpl_regerror+72
0000000000013ff1         mov        rax, rbx
0000000000013ff4         pop        rbx
0000000000013ff5         pop        rbp
0000000000013ff6         pop        r12
0000000000013ff8         pop        r13
0000000000013ffa         ret
                        ; endp
0000000000013ffb         align      16384

                     loc_14000:
0000000000014000         call       j_abort                                     ; abort, CODE XREF=rpl_regerror+13
                        ; endp
0000000000014005         align      8

                     loc_14008:
0000000000014008         lea        rdx, qword [r12-1]                          ; CODE XREF=rpl_regerror+80
000000000001400d         mov        byte [rbp+r12-1], 0x0
0000000000014013         jmp        loc_13fe2
0000000000014015         align      32                                          ; End of unwind block (FDE at 0x18668)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_regfree:
0000000000014020         push       rbx                                         ; Begin of unwind block (FDE at 0x186a4)
0000000000014021         mov        rbx, rdi
0000000000014024         mov        rdi, qword [rdi]
0000000000014027         test       rdi, rdi
000000000001402a         je         loc_14031

000000000001402c         call       free_dfa_content                            ; free_dfa_content

                     loc_14031:
0000000000014031         mov        rdi, qword [rbx+0x20]                       ; argument "__ptr" for method j_free, CODE XREF=rpl_regfree+10
0000000000014035         mov        qword [rbx], 0x0
000000000001403c         mov        qword [rbx+8], 0x0
0000000000014044         call       j_free                                      ; free
0000000000014049         mov        rdi, qword [rbx+0x28]                       ; argument "__ptr" for method j_free
000000000001404d         mov        qword [rbx+0x20], 0x0
0000000000014055         call       j_free                                      ; free
000000000001405a         mov        qword [rbx+0x28], 0x0
0000000000014062         pop        rbx
0000000000014063         ret
                        ; endp
0000000000014064         align      16                                          ; End of unwind block (FDE at 0x186a4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48


                     rpl_regexec:
0000000000014070         test       r8d, 0xfffffff8                             ; Begin of unwind block (FDE at 0x186c0)
0000000000014077         jne        loc_14108

000000000001407d         push       r13
000000000001407f         push       r12
0000000000014081         mov        r13, rdx
0000000000014084         push       rbp
0000000000014085         push       rbx
0000000000014086         mov        r12, rcx
0000000000014089         mov        ebx, r8d
000000000001408c         mov        rbp, rdi
000000000001408f         sub        rsp, 0x18
0000000000014093         test       r8b, 0x4
0000000000014097         jne        loc_140e8

0000000000014099         mov        rdi, rsi                                    ; argument "__s" for method j_strlen
000000000001409c         mov        qword [rsp+0x38+var_30], rsi
00000000000140a1         call       j_strlen                                    ; strlen
00000000000140a6         xor        ecx, ecx
00000000000140a8         test       byte [rbp+0x38], 0x10
00000000000140ac         mov        rdx, rax
00000000000140af         mov        rsi, qword [rsp+0x38+var_30]
00000000000140b4         je         loc_140f6

                     loc_140b6:
00000000000140b6         sub        rsp, 0x8                                    ; CODE XREF=rpl_regexec+132
00000000000140ba         push       rbx
00000000000140bb         push       0x0
00000000000140bd         push       0x0

                     loc_140bf:
00000000000140bf         mov        rdi, rbp                                    ; CODE XREF=rpl_regexec+143
00000000000140c2         mov        r9, rdx
00000000000140c5         mov        r8, rdx
00000000000140c8         call       re_search_internal                          ; re_search_internal
00000000000140cd         add        rsp, 0x20
00000000000140d1         test       eax, eax
00000000000140d3         setne      al
00000000000140d6         add        rsp, 0x18
00000000000140da         pop        rbx
00000000000140db         movzx      eax, al
00000000000140de         pop        rbp
00000000000140df         pop        r12
00000000000140e1         pop        r13
00000000000140e3         ret
                        ; endp
00000000000140e4         align      8

                     loc_140e8:
00000000000140e8         test       byte [rbp+0x38], 0x10                       ; CODE XREF=rpl_regexec+39
00000000000140ec         mov        rcx, qword [rcx]
00000000000140ef         mov        rdx, qword [r12+8]
00000000000140f4         jne        loc_140b6

                     loc_140f6:
00000000000140f6         sub        rsp, 0x8                                    ; CODE XREF=rpl_regexec+68
00000000000140fa         push       rbx
00000000000140fb         push       r12
00000000000140fd         push       r13
00000000000140ff         jmp        loc_140bf
0000000000014101         align      8

                     loc_14108:
0000000000014108         mov        eax, 0x2                                    ; CODE XREF=rpl_regexec+7
000000000001410d         ret
                        ; endp
000000000001410e         align      16                                          ; End of unwind block (FDE at 0x186c0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_re_match:
0000000000014110         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0x1871c)
0000000000014114         mov        r9, rdx
0000000000014117         push       0x1
0000000000014119         push       r8
000000000001411b         xor        r8d, r8d
000000000001411e         call       re_search_stub                              ; re_search_stub
0000000000014123         add        rsp, 0x18
0000000000014127         ret
                        ; endp
0000000000014128         align      16                                          ; End of unwind block (FDE at 0x1871c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_re_search:
0000000000014130         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0x1873c), CODE XREF=nl_file+697
0000000000014134         push       0x0
0000000000014136         push       r9
0000000000014138         mov        r9, rdx
000000000001413b         call       re_search_stub                              ; re_search_stub
0000000000014140         add        rsp, 0x18
0000000000014144         ret
                        ; endp
0000000000014145         align      16                                          ; End of unwind block (FDE at 0x1873c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_8: int, 16
        ;    arg_0: int, 8


                     rpl_re_match_2:
0000000000014150         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0x1875c)
0000000000014154         push       0x1
0000000000014156         push       qword [rsp+0x10+arg_8]
000000000001415a         push       qword [rsp+0x18+arg_0]
000000000001415e         push       0x0
0000000000014160         call       re_search_2_stub                            ; re_search_2_stub
0000000000014165         add        rsp, 0x28
0000000000014169         ret
                        ; endp
000000000001416a         align      16                                          ; End of unwind block (FDE at 0x1875c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_0: int, 8


                     rpl_re_search_2:
0000000000014170         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0x18780)
0000000000014174         push       0x0
0000000000014176         push       qword [rsp+0x10+arg_10]
000000000001417a         push       qword [rsp+0x18+arg_8]
000000000001417e         push       qword [rsp+0x20+arg_0]
0000000000014182         call       re_search_2_stub                            ; re_search_2_stub
0000000000014187         add        rsp, 0x28
000000000001418b         ret
                        ; endp
000000000001418c         align      16                                          ; End of unwind block (FDE at 0x18780)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_re_set_registers:
0000000000014190         test       rdx, rdx                                    ; Begin of unwind block (FDE at 0x187a4)
0000000000014193         jne        loc_141b8

0000000000014195         and        byte [rdi+0x38], 0xf9
0000000000014199         mov        qword [rsi], 0x0
00000000000141a0         mov        qword [rsi+0x10], 0x0
00000000000141a8         mov        qword [rsi+8], 0x0
00000000000141b0         ret
                        ; endp
00000000000141b1         align      8

                     loc_141b8:
00000000000141b8         movzx      eax, byte [rdi+0x38]                        ; CODE XREF=rpl_re_set_registers+3
00000000000141bc         and        eax, 0xfffffff9
00000000000141bf         or         eax, 0x2
00000000000141c2         mov        byte [rdi+0x38], al
00000000000141c5         mov        qword [rsi], rdx
00000000000141c8         mov        qword [rsi+8], rcx
00000000000141cc         mov        qword [rsi+0x10], r8
00000000000141d0         ret
                        ; endp
00000000000141d1         align      32                                          ; End of unwind block (FDE at 0x187a4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stream:
00000000000141e0         push       r12                                         ; Begin of unwind block (FDE at 0x187bc), CODE XREF=close_stdout+13, close_stdout+51
00000000000141e2         push       rbp
00000000000141e3         mov        rbp, rdi
00000000000141e6         push       rbx
00000000000141e7         call       j___fpending                                ; __fpending
00000000000141ec         mov        ebx, dword [rbp]
00000000000141ef         mov        rdi, rbp
00000000000141f2         mov        r12, rax
00000000000141f5         call       rpl_fclose                                  ; rpl_fclose
00000000000141fa         and        ebx, 0x20
00000000000141fd         test       ebx, ebx
00000000000141ff         jne        loc_14218

0000000000014201         test       eax, eax
0000000000014203         je         loc_1420f

0000000000014205         test       r12, r12
0000000000014208         mov        eax, 0xffffffff
000000000001420d         je         loc_14248

                     loc_1420f:
000000000001420f         pop        rbx                                         ; CODE XREF=close_stream+35
0000000000014210         pop        rbp
0000000000014211         pop        r12
0000000000014213         ret
                        ; endp
0000000000014214         align      8

                     loc_14218:
0000000000014218         test       eax, eax                                    ; CODE XREF=close_stream+31
000000000001421a         jne        loc_14238

000000000001421c         call       j___errno_location                          ; __errno_location
0000000000014221         mov        dword [rax], 0x0
0000000000014227         mov        eax, 0xffffffff
000000000001422c         pop        rbx
000000000001422d         pop        rbp
000000000001422e         pop        r12
0000000000014230         ret
                        ; endp
0000000000014231         align      8

                     loc_14238:
0000000000014238         pop        rbx                                         ; CODE XREF=close_stream+58
0000000000014239         mov        eax, 0xffffffff
000000000001423e         pop        rbp
000000000001423f         pop        r12
0000000000014241         ret
                        ; endp
0000000000014242         align      8

                     loc_14248:
0000000000014248         call       j___errno_location                          ; __errno_location, CODE XREF=close_stream+45
000000000001424d         cmp        dword [rax], 0x9
0000000000014250         pop        rbx
0000000000014251         pop        rbp
0000000000014252         pop        r12
0000000000014254         setne      al
0000000000014257         movzx      eax, al
000000000001425a         neg        eax
000000000001425c         ret
                        ; endp
000000000001425d         align      32                                          ; End of unwind block (FDE at 0x187bc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hard_locale:
0000000000014260         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0x1880c), CODE XREF=rpl_mbrtowc+71
0000000000014264         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
0000000000014266         call       j_setlocale                                 ; setlocale
000000000001426b         mov        rdx, rax
000000000001426e         mov        eax, 0x1
0000000000014273         test       rdx, rdx
0000000000014276         je         loc_14295

0000000000014278         lea        rdi, qword [__re_error_msgid+400]           ; 0x160b0
000000000001427f         mov        ecx, 0x2
0000000000014284         mov        rsi, rdx
0000000000014287         rep  cmpsb byte [rsi], byte [rdi]
0000000000014289         seta       cl
000000000001428c         sbb        cl, 0x0
000000000001428f         xor        eax, eax
0000000000014291         test       cl, cl
0000000000014293         jne        loc_142a0

                     loc_14295:
0000000000014295         add        rsp, 0x8                                    ; CODE XREF=hard_locale+22
0000000000014299         ret
                        ; endp
000000000001429a         align      32

                     loc_142a0:
00000000000142a0         lea        rdi, qword [aPosix]                         ; "POSIX", CODE XREF=hard_locale+51
00000000000142a7         mov        ecx, 0x6
00000000000142ac         mov        rsi, rdx
00000000000142af         rep  cmpsb byte [rsi], byte [rdi]
00000000000142b1         seta       al
00000000000142b4         sbb        al, 0x0
00000000000142b6         test       al, al
00000000000142b8         setne      al
00000000000142bb         add        rsp, 0x8
00000000000142bf         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     locale_charset:
00000000000142c0         sub        rsp, 0x8                                    ; End of unwind block (FDE at 0x1880c), Begin of unwind block (FDE at 0x1882c), CODE XREF=gettext_quote.part.1+11
00000000000142c4         mov        edi, 0xe                                    ; argument "__item" for method j_nl_langinfo
00000000000142c9         call       j_nl_langinfo                               ; nl_langinfo
00000000000142ce         test       rax, rax
00000000000142d1         je         loc_142f0

00000000000142d3         cmp        byte [rax], 0x0
00000000000142d6         lea        rdx, qword [aAscii]                         ; "ASCII"
00000000000142dd         cmove      rax, rdx
00000000000142e1         add        rsp, 0x8
00000000000142e5         ret
                        ; endp
00000000000142e6         align      16

                     loc_142f0:
00000000000142f0         lea        rax, qword [aAscii]                         ; "ASCII", CODE XREF=locale_charset+17
00000000000142f7         add        rsp, 0x8
00000000000142fb         ret
                        ; endp
00000000000142fc         align      256                                         ; End of unwind block (FDE at 0x1882c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __libc_csu_init:
0000000000014300         push       r15                                         ; Begin of unwind block (FDE at 0x1884c), DATA XREF=_start+22
0000000000014302         push       r14
0000000000014304         mov        r15, rdx
0000000000014307         push       r13
0000000000014309         push       r12
000000000001430b         lea        r12, qword [__frame_dummy_init_array_entry] ; __frame_dummy_init_array_entry
0000000000014312         push       rbp
0000000000014313         lea        rbp, qword [__do_global_dtors_aux_fini_array_entry] ; __do_global_dtors_aux_fini_array_entry
000000000001431a         push       rbx
000000000001431b         mov        r13d, edi
000000000001431e         mov        r14, rsi
0000000000014321         sub        rbp, r12
0000000000014324         sub        rsp, 0x8
0000000000014328         sar        rbp, 0x3
000000000001432c         call       _init                                       ; _init
0000000000014331         test       rbp, rbp
0000000000014334         je         loc_14356

0000000000014336         xor        ebx, ebx
0000000000014338         nop        dword [rax+rax]

                     loc_14340:
0000000000014340         mov        rdx, r15                                    ; CODE XREF=__libc_csu_init+84
0000000000014343         mov        rsi, r14
0000000000014346         mov        edi, r13d
0000000000014349         call       qword [r12+rbx*8]
000000000001434d         add        rbx, 0x1
0000000000014351         cmp        rbp, rbx
0000000000014354         jne        loc_14340

                     loc_14356:
0000000000014356         add        rsp, 0x8                                    ; CODE XREF=__libc_csu_init+52
000000000001435a         pop        rbx
000000000001435b         pop        rbp
000000000001435c         pop        r12
000000000001435e         pop        r13
0000000000014360         pop        r14
0000000000014362         pop        r15
0000000000014364         ret
                        ; endp
0000000000014365         align      16                                          ; End of unwind block (FDE at 0x1884c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __libc_csu_fini:
0000000000014370         ret                                                    ; Begin of unwind block (FDE at 0x18894), DATA XREF=_start+15
                        ; endp
0000000000014372         align      128                                         ; End of unwind block (FDE at 0x18894)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     atexit:
0000000000014380         mov        rdx, qword [__dso_handle]                   ; Begin of unwind block (FDE at 0x188ac), __dso_handle, CODE XREF=main+109
0000000000014387         xor        esi, esi
0000000000014389         jmp        j___cxa_atexit                              ; __cxa_atexit
                        ; endp
000000000001438e         db  0x00 ; '.'                                         ; End of unwind block (FDE at 0x188ac)
000000000001438f         db  0x00 ; '.'


        ; Section .fini
        ; Range: [0x14390; 0x14399[ (9 bytes)
        ; File offset : [82832; 82841[ (9 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _fini:
0000000000014390         sub        rsp, 0x8
0000000000014394         add        rsp, 0x8
0000000000014398         ret
                        ; endp
0000000000014399         db  0x00 ; '.'
000000000001439a         db  0x00 ; '.'
000000000001439b         db  0x00 ; '.'
000000000001439c         db  0x00 ; '.'
000000000001439d         db  0x00 ; '.'
000000000001439e         db  0x00 ; '.'
000000000001439f         db  0x00 ; '.'


        ; Section .rodata
        ; Range: [0x143a0; 0x160be[ (7454 bytes)
        ; File offset : [82848; 90302[ (7454 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

                     _IO_stdin_used:
00000000000143a0         db  0x01 ; '.'
00000000000143a1         db  0x00 ; '.'
00000000000143a2         db  0x02 ; '.'
00000000000143a3         db  0x00 ; '.'
                     aLineNumberOver:
00000000000143a4         db         "line number overflow", 0                   ; DATA XREF=print_lineno+77
00000000000143b9         db  0x6e ; 'n'                                         ; DATA XREF=main+404, usage+527, usage+844, usage+1028, usage+1047, usage+1081
00000000000143ba         db  0x6c ; 'l'
00000000000143bb         db  0x00 ; '.'
00000000000143bc         db  0x5b ; '['                                         ; DATA XREF=usage+539
00000000000143bd         db  0x00 ; '.'
                     aTestInvocation:
00000000000143be         db         "test invocation", 0                        ; DATA XREF=usage+578
                     aMulticallInvoc:
00000000000143ce         db         "Multi-call invocation", 0                  ; DATA XREF=usage+626
                     aSha224sum:
00000000000143e4         db         "sha224sum", 0                              ; DATA XREF=usage+643
                     aSha2Utilities:
00000000000143ee         db         "sha2 utilities", 0                         ; DATA XREF=usage+655
                     aSha256sum:
00000000000143fd         db         "sha256sum", 0                              ; DATA XREF=usage+546
                     aSha384sum:
0000000000014407         db         "sha384sum", 0                              ; DATA XREF=usage+590
                     aSha512sum:
0000000000014411         db         "sha512sum", 0                              ; DATA XREF=usage+614
                     aNsOnlineHelpSn:
000000000001441b         db         "\n%s online help: <%s>\n", 0               ; DATA XREF=usage+730
0000000000014432         db  0x47 ; 'G'                                         ; DATA XREF=main+397, usage+758, usage+951, emit_bug_reporting_address+68
0000000000014433         db  0x4e ; 'N'
0000000000014434         db  0x55 ; 'U'
0000000000014435         db  0x20 ; ' '
                     aCoreutils:
0000000000014436         db         "coreutils", 0                              ; DATA XREF=main+78, main+90, usage+602
0000000000014440         db  0x65 ; 'e'                                         ; DATA XREF=usage+797, usage+990
0000000000014441         db  0x6e ; 'n'
0000000000014442         db  0x5f ; '_'                                         ; DATA XREF=sub_116a0+456
0000000000014443         db  0x00 ; '.'
                     aFullDocumentat:
0000000000014444         db         "Full documentation <%s%s>\n", 0            ; DATA XREF=usage+825, usage+1014
                     aUsrlocalsharel:
000000000001445f         db         "/usr/local/share/locale", 0                ; DATA XREF=main+71
                     aInvalidStartin:
0000000000014477         db         "invalid starting line number", 0           ; DATA XREF=main+664
                     aInvalidLineNum_14494:        // aInvalidLineNum
0000000000014494         db         "invalid line number increment", 0          ; DATA XREF=main+744
00000000000144b2         db  0x6c ; 'l'                                         ; DATA XREF=main+15
00000000000144b3         db  0x6e ; 'n'                                         ; DATA XREF=footer_type, header_type
00000000000144b4         db  0x00 ; '.'
00000000000144b5         db  0x72 ; 'r'                                         ; DATA XREF=main+1007
00000000000144b6         db  0x6e ; 'n'
00000000000144b7         db  0x00 ; '.'
00000000000144b8         db  0x72 ; 'r'                                         ; DATA XREF=main+1038
00000000000144b9         db  0x7a ; 'z'
00000000000144ba         db  0x00 ; '.'
                     aDavidMackenzie:
00000000000144bb         db         "David MacKenzie", 0                        ; DATA XREF=main+383
                     aScottBartram:
00000000000144cb         db         "Scott Bartram", 0                          ; DATA XREF=main+390
00000000000144d9         db  0x68 ; 'h'                                         ; DATA XREF=main+128
00000000000144da         db  0x3a ; ':'
00000000000144db         db  0x62 ; 'b'
00000000000144dc         db  0x3a ; ':'
00000000000144dd         db  0x66 ; 'f'
00000000000144de         db  0x3a ; ':'
00000000000144df         db  0x76 ; 'v'
00000000000144e0         db  0x3a ; ':'
00000000000144e1         db  0x69 ; 'i'
00000000000144e2         db  0x3a ; ':'
00000000000144e3         db  0x70 ; 'p'
00000000000144e4         db  0x6c ; 'l'
00000000000144e5         db  0x3a ; ':'
00000000000144e6         db  0x73 ; 's'
00000000000144e7         db  0x3a ; ':'
00000000000144e8         db  0x77 ; 'w'
00000000000144e9         db  0x3a ; ':'
00000000000144ea         db  0x6e ; 'n'
00000000000144eb         db  0x3a ; ':'
00000000000144ec         db  0x64 ; 'd'
00000000000144ed         db  0x3a ; ':'
00000000000144ee         db  0x00 ; '.'
                     aHeadernumberin:
00000000000144ef         db         "header-numbering", 0
                     aBodynumbering:
0000000000014500         db         "body-numbering", 0
                     aFooternumberin:
000000000001450f         db         "footer-numbering", 0
                     aStartinglinenu:
0000000000014520         db         "starting-line-number", 0
                     aLineincrement:
0000000000014535         db         "line-increment", 0
                     aNorenumber:
0000000000014544         db         "no-renumber", 0
                     aJoinblanklines:
0000000000014550         db         "join-blank-lines", 0
                     aNumberseparato:
0000000000014561         db         "number-separator", 0
                     aNumberwidth:
0000000000014572         db         "number-width", 0
                     aNumberformat:
000000000001457f         db         "number-format", 0
                     aSectiondelimit:
000000000001458d         db         "section-delimiter", 0
                     aHelp:
000000000001459f         db         "help", 0
                     aVersion:
00000000000145a4         db         "version", 0
00000000000145ac         db  0x09 ; '.'                                         ; DATA XREF=separator_str
00000000000145ad         db  0x00 ; '.'                                         ; DATA XREF=main+54, main+618, main+690, main+770, main+962, usage+883, sub_116a0+376
00000000000145ae         db  0x00 ; '.'
00000000000145af         db  0x00 ; '.'
                     aErrorInRegular:
00000000000145b0         db         "error in regular expression search", 0     ; DATA XREF=nl_file+988
00000000000145d3         align      8
                     aTrySHelpForMor:
00000000000145d8         db         "Try '%s --help' for more information.\n", 0 ; DATA XREF=usage+47
00000000000145ff         align      512
                     aUsageSOptionFi:
0000000000014600         db         "Usage: %s [OPTION]... [FILE]...\n", 0      ; DATA XREF=usage+93
0000000000014621         align      8
                     aWriteEachFileT:
0000000000014628         db         "Write each FILE to standard output, with line numbers added.\n", 0 ; DATA XREF=usage+132
0000000000014666         align      8
                     aNwithNoFileOrW:
0000000000014668         db         "\nWith no FILE, or when FILE is -, read standard input.\n", 0 ; DATA XREF=usage+169
                     aNmandatoryArgu:
00000000000146a0         db         "\nMandatory arguments to long options are mandatory for short options too.\n", 0 ; DATA XREF=usage+206
00000000000146eb         align      16
                     aBBodynumbering:
00000000000146f0         db         "  -b, --body-numbering=STYLE      use STYLE for numbering body lines\n  -d, --section-delimiter=CC      use CC for logical page delimiters\n  -f, --footer-numbering=STYLE    use STYLE for numbering footer lines\n", 0 ; DATA XREF=usage+243
00000000000147c2         align      8
                     aHHeadernumberi:
00000000000147c8         db         "  -h, --header-numbering=STYLE    use STYLE for numbering header lines\n  -i, --line-increment=NUMBER     line number increment at each line\n  -l, --join-blank-lines=NUMBER   group of NUMBER empty lines counted as one\n  -n, --number-format=FORMAT      inser" ; DATA XREF=usage+280
00000000000148c8         db         "t line numbers according to FORMAT\n  -p, --no-renumber               do not reset line numbers for each section\n  -s, --number-separator=STRING   add STRING after (possible) line number\n", 0
0000000000014983         align      8
                     aVStartinglinen:
0000000000014988         db         "  -v, --starting-line-number=NUMBER  first line number for each section\n  -w, --number-width=NUMBER       use NUMBER columns for line numbers\n", 0 ; DATA XREF=usage+317
0000000000014a17         align      8
                     aHelpDisplayThi:
0000000000014a18         db         "      --help     display this help and exit\n", 0 ; DATA XREF=usage+354
0000000000014a45         align      8
                     aVersionOutputV:
0000000000014a48         db         "      --version  output version information and exit\n", 0 ; DATA XREF=usage+391
0000000000014a7e         align      128
                     aNdefaultOption:
0000000000014a80         db         "\nDefault options are: -bt -d'\:' -fn -hn -i1 -l1 -n'rn' -s<TAB> -v1 -w6\n\nCC are two delimiter characters used to construct logical page delimiters;\na missing second character implies ':'.\n", 0 ; DATA XREF=usage+428
0000000000014b3d         align      64
                     aNstyleIsOneOfn:
0000000000014b40         db         "\nSTYLE is one of:\n\n  a      number all lines\n  t      number only nonempty lines\n  n      number no lines\n  pBRE   number only lines that contain a match for the basic regular\n         expression, BRE\n", 0 ; DATA XREF=usage+465
0000000000014c0a         align      16
                     aNformatIsOneOf:
0000000000014c10         db         "\nFORMAT is one of:\n\n  ln     left justified, no leading zeros\n  rn     right justified, no leading zeros\n  rz     right justified, leading zeros\n\n", 0 ; DATA XREF=usage+502
0000000000014ca3         align      8
                     aHttpswwwgnuorg:
0000000000014ca8         db         "https://www.gnu.org/software/coreutils/", 0 ; DATA XREF=usage+751, usage+851, usage+944, usage+1054, emit_bug_reporting_address+61
                     aReportAnyTrans:
0000000000014cd0         db         "Report any translation bugs to <https://translationproject.org/team/>\n", 0 ; DATA XREF=usage+1095
0000000000014d17         align      8
                     aOrAvailableLoc:
0000000000014d18         db         "or available locally via: info '(coreutils) %s%s'\n", 0 ; DATA XREF=usage+894
0000000000014d4b         align      16
                     aInvalidHeaderN:
0000000000014d50         db         "invalid header numbering style: %s", 0     ; DATA XREF=main+502
0000000000014d73         align      8
                     aInvalidBodyNum:
0000000000014d78         db         "invalid body numbering style: %s", 0       ; DATA XREF=main+886
0000000000014d99         align      32
                     aInvalidFooterN:
0000000000014da0         db         "invalid footer numbering style: %s", 0     ; DATA XREF=main+574
0000000000014dc3         align      8
                     aInvalidLineNum_14dc8:        // aInvalidLineNum
0000000000014dc8         db         "invalid line number of blank lines", 0     ; DATA XREF=main+936
0000000000014deb         align      16
                     aInvalidLineNum:
0000000000014df0         db         "invalid line number field width", 0        ; DATA XREF=main+592
                     aInvalidLineNum_14e10:        // aInvalidLineNum
0000000000014e10         db         "invalid line numbering format: %s", 0      ; DATA XREF=main+1610
0000000000014e32         db  0x00 ; '.'
0000000000014e33         db  0x00 ; '.'
0000000000014e34         db  0x00 ; '.'
0000000000014e35         db  0x00 ; '.'
0000000000014e36         db  0x00 ; '.'
0000000000014e37         db  0x00 ; '.'
                     DEFAULT_SECTION_DELIMITERS:
0000000000014e38         db  0x5c ; '\'                                         ; DATA XREF=section_del
0000000000014e39         db  0x3a ; ':'
0000000000014e3a         db  0x00 ; '.'
0000000000014e3b         db  0x00 ; '.'
0000000000014e3c         db  0x00 ; '.'
0000000000014e3d         db  0x00 ; '.'
0000000000014e3e         db  0x00 ; '.'
0000000000014e3f         db  0x00 ; '.'
                     FORMAT_LEFT:
0000000000014e40         db         "%-*ld%s", 0                                ; DATA XREF=main+327
                     FORMAT_RIGHT_LZ:
0000000000014e48         db         "%0*ld%s", 0                                ; DATA XREF=main+1069
                     FORMAT_RIGHT_NOLZ:
0000000000014e50         db         "%*ld%s", 0                                 ; DATA XREF=main+4, lineno_format
                     a831:
0000000000014e57         db         "8.31", 0                                   ; DATA XREF=Version
                     aWriteError:
0000000000014e5c         db         "write error", 0                            ; DATA XREF=close_stdout+67
                     aSS:
0000000000014e68         db         "%s: %s", 0                                 ; DATA XREF=close_stdout+108, xnumtoimax+127
0000000000014e6f         align      16
                     aANullArgv0WasP:
0000000000014e70         db         "A NULL argv[0] was passed through an exec system call.\n", 0 ; DATA XREF=set_program_name+132
                     aLibs:
0000000000014ea8         db         "/.libs/", 0                                ; DATA XREF=set_program_name+44
0000000000014eb0         db  0x6c ; 'l'                                         ; DATA XREF=set_program_name+68
0000000000014eb1         db  0x74 ; 't'
0000000000014eb2         db  0x2d ; '-'                                         ; DATA XREF=main+1575, main+1622, nl_file+27, nl_file+340
0000000000014eb3         db  0x00 ; '.'
0000000000014eb4         db  0xe2 ; '.'                                         ; DATA XREF=gettext_quote.part.1+206
0000000000014eb5         db  0x80 ; '.'
0000000000014eb6         db  0x98 ; '.'
0000000000014eb7         db  0x00 ; '.'
0000000000014eb8         db  0xe2 ; '.'                                         ; DATA XREF=gettext_quote.part.1+213
0000000000014eb9         db  0x80 ; '.'
0000000000014eba         db  0x99 ; '.'
0000000000014ebb         db  0x00 ; '.'
0000000000014ebc         db  0xa1 ; '.'                                         ; DATA XREF=gettext_quote.part.1+116
0000000000014ebd         db  0x07 ; '.'
0000000000014ebe         db  0x65 ; 'e'
0000000000014ebf         db  0x00 ; '.'
0000000000014ec0         db  0xa1 ; '.'                                         ; DATA XREF=gettext_quote.part.1+123
0000000000014ec1         db  0xaf ; '.'
0000000000014ec2         db  0x00 ; '.'
0000000000014ec3         db  0x22 ; '"'                                         ; DATA XREF=gettext_quote.part.1+32, sub_3900+1451, sub_3900+1493, sub_3900+2429
0000000000014ec4         db  0x00 ; '.'
0000000000014ec5         db  0x27 ; '''                                         ; DATA XREF=gettext_quote.part.1+39, quotearg_buffer_restyled+179, sub_3900+132, sub_3900+1338, sub_3900+1670, sub_3900+1697, sub_3900+2352
0000000000014ec6         db  0x00 ; '.'
0000000000014ec7         db  0x60 ; '`'                                         ; DATA XREF=sub_3900+1627, sub_3900+1654
0000000000014ec8         db  0x00 ; '.'
                     aLiteral:
0000000000014ec9         db         "literal", 0
                     aShell:
0000000000014ed1         db         "shell", 0
                     aShellalways:
0000000000014ed7         db         "shell-always", 0
0000000000014ee4         db  0x73 ; 's'
0000000000014ee5         db  0x68 ; 'h'
0000000000014ee6         db  0x65 ; 'e'
0000000000014ee7         db  0x6c ; 'l'
0000000000014ee8         db  0x6c ; 'l'
0000000000014ee9         db  0x2d ; '-'
                     aEscape:
0000000000014eea         db         "escape", 0
                     aShellescapealw:
0000000000014ef1         db         "shell-escape-always", 0
0000000000014f05         db  0x63 ; 'c'
0000000000014f06         db  0x00 ; '.'
                     aCmaybe:
0000000000014f07         db         "c-maybe", 0
                     aClocale:
0000000000014f0f         db         "clocale", 0
0000000000014f17         align      32
                     switch_table_14f20:        // switch_table
0000000000014f20         dd         quotearg_buffer_restyled.loc_3ffa-switch_table_14f20, quotearg_buffer_restyled.loc_3253-switch_table_14f20, quotearg_buffer_restyled.loc_4228-switch_table_14f20, quotearg_buffer_restyled.loc_4034-switch_table_14f20 ; switch table used at 0x3251 containing 11 entries, DATA XREF=quotearg_buffer_restyled+128
0000000000014f30         dd         quotearg_buffer_restyled.loc_3e24-switch_table_14f20, quotearg_buffer_restyled.loc_3e80-switch_table_14f20, quotearg_buffer_restyled.loc_3ed5-switch_table_14f20, quotearg_buffer_restyled.loc_3f1a-switch_table_14f20
0000000000014f40         dd         3 dup (quotearg_buffer_restyled.loc_3f54-switch_table_14f20)
0000000000014f4c         db  0x84 ; '.'                                         ; DATA XREF=quotearg_buffer_restyled+477
0000000000014f4d         db  0xe6 ; '.'
0000000000014f4e         db  0xfe ; '.'
0000000000014f4f         db  0xff ; '.'
0000000000014f50         db  0x6c ; 'l'
0000000000014f51         db  0xe7 ; '.'
0000000000014f52         db  0xfe ; '.'
0000000000014f53         db  0xff ; '.'
0000000000014f54         db  0x6c ; 'l'
0000000000014f55         db  0xe7 ; '.'
0000000000014f56         db  0xfe ; '.'
0000000000014f57         db  0xff ; '.'
0000000000014f58         db  0x6c ; 'l'
0000000000014f59         db  0xe7 ; '.'
0000000000014f5a         db  0xfe ; '.'
0000000000014f5b         db  0xff ; '.'
0000000000014f5c         db  0x6c ; 'l'
0000000000014f5d         db  0xe7 ; '.'
0000000000014f5e         db  0xfe ; '.'
0000000000014f5f         db  0xff ; '.'
0000000000014f60         db  0x6c ; 'l'
0000000000014f61         db  0xe7 ; '.'
0000000000014f62         db  0xfe ; '.'
0000000000014f63         db  0xff ; '.'
0000000000014f64         db  0x6c ; 'l'
0000000000014f65         db  0xe7 ; '.'
0000000000014f66         db  0xfe ; '.'
0000000000014f67         db  0xff ; '.'
0000000000014f68         db  0xc4 ; '.'
0000000000014f69         db  0xe6 ; '.'
0000000000014f6a         db  0xfe ; '.'
0000000000014f6b         db  0xff ; '.'
0000000000014f6c         db  0xcc ; '.'
0000000000014f6d         db  0xe5 ; '.'
0000000000014f6e         db  0xfe ; '.'
0000000000014f6f         db  0xff ; '.'
0000000000014f70         db  0x8c ; '.'
0000000000014f71         db  0xe5 ; '.'
0000000000014f72         db  0xfe ; '.'
0000000000014f73         db  0xff ; '.'
0000000000014f74         db  0x54 ; 'T'
0000000000014f75         db  0xe7 ; '.'
0000000000014f76         db  0xfe ; '.'
0000000000014f77         db  0xff ; '.'
0000000000014f78         db  0x44 ; 'D'
0000000000014f79         db  0xe7 ; '.'
0000000000014f7a         db  0xfe ; '.'
0000000000014f7b         db  0xff ; '.'
0000000000014f7c         db  0x34 ; '4'
0000000000014f7d         db  0xe7 ; '.'
0000000000014f7e         db  0xfe ; '.'
0000000000014f7f         db  0xff ; '.'
0000000000014f80         db  0x24 ; '$'
0000000000014f81         db  0xe7 ; '.'
0000000000014f82         db  0xfe ; '.'
0000000000014f83         db  0xff ; '.'
0000000000014f84         db  0x6c ; 'l'
0000000000014f85         db  0xe7 ; '.'
0000000000014f86         db  0xfe ; '.'
0000000000014f87         db  0xff ; '.'
0000000000014f88         db  0x6c ; 'l'
0000000000014f89         db  0xe7 ; '.'
0000000000014f8a         db  0xfe ; '.'
0000000000014f8b         db  0xff ; '.'
0000000000014f8c         db  0x6c ; 'l'
0000000000014f8d         db  0xe7 ; '.'
0000000000014f8e         db  0xfe ; '.'
0000000000014f8f         db  0xff ; '.'
0000000000014f90         db  0x6c ; 'l'
0000000000014f91         db  0xe7 ; '.'
0000000000014f92         db  0xfe ; '.'
0000000000014f93         db  0xff ; '.'
0000000000014f94         db  0x6c ; 'l'
0000000000014f95         db  0xe7 ; '.'
0000000000014f96         db  0xfe ; '.'
0000000000014f97         db  0xff ; '.'
0000000000014f98         db  0x6c ; 'l'
0000000000014f99         db  0xe7 ; '.'
0000000000014f9a         db  0xfe ; '.'
0000000000014f9b         db  0xff ; '.'
0000000000014f9c         db  0x6c ; 'l'
0000000000014f9d         db  0xe7 ; '.'
0000000000014f9e         db  0xfe ; '.'
0000000000014f9f         db  0xff ; '.'
0000000000014fa0         db  0x6c ; 'l'
0000000000014fa1         db  0xe7 ; '.'
0000000000014fa2         db  0xfe ; '.'
0000000000014fa3         db  0xff ; '.'
0000000000014fa4         db  0x6c ; 'l'
0000000000014fa5         db  0xe7 ; '.'
0000000000014fa6         db  0xfe ; '.'
0000000000014fa7         db  0xff ; '.'
0000000000014fa8         db  0x6c ; 'l'
0000000000014fa9         db  0xe7 ; '.'
0000000000014faa         db  0xfe ; '.'
0000000000014fab         db  0xff ; '.'
0000000000014fac         db  0x6c ; 'l'
0000000000014fad         db  0xe7 ; '.'
0000000000014fae         db  0xfe ; '.'
0000000000014faf         db  0xff ; '.'
0000000000014fb0         db  0x6c ; 'l'
0000000000014fb1         db  0xe7 ; '.'
0000000000014fb2         db  0xfe ; '.'
0000000000014fb3         db  0xff ; '.'
0000000000014fb4         db  0x6c ; 'l'
0000000000014fb5         db  0xe7 ; '.'
0000000000014fb6         db  0xfe ; '.'
0000000000014fb7         db  0xff ; '.'
0000000000014fb8         db  0x6c ; 'l'
0000000000014fb9         db  0xe7 ; '.'
0000000000014fba         db  0xfe ; '.'
0000000000014fbb         db  0xff ; '.'
0000000000014fbc         db  0x6c ; 'l'
0000000000014fbd         db  0xe7 ; '.'
0000000000014fbe         db  0xfe ; '.'
0000000000014fbf         db  0xff ; '.'
0000000000014fc0         db  0x6c ; 'l'
0000000000014fc1         db  0xe7 ; '.'
0000000000014fc2         db  0xfe ; '.'
0000000000014fc3         db  0xff ; '.'
0000000000014fc4         db  0x6c ; 'l'
0000000000014fc5         db  0xe7 ; '.'
0000000000014fc6         db  0xfe ; '.'
0000000000014fc7         db  0xff ; '.'
0000000000014fc8         db  0x6c ; 'l'
0000000000014fc9         db  0xe7 ; '.'
0000000000014fca         db  0xfe ; '.'
0000000000014fcb         db  0xff ; '.'
0000000000014fcc         db  0x14 ; '.'
0000000000014fcd         db  0xe7 ; '.'
0000000000014fce         db  0xfe ; '.'
0000000000014fcf         db  0xff ; '.'
0000000000014fd0         db  0x04 ; '.'
0000000000014fd1         db  0xe7 ; '.'
0000000000014fd2         db  0xfe ; '.'
0000000000014fd3         db  0xff ; '.'
0000000000014fd4         db  0x04 ; '.'
0000000000014fd5         db  0xe7 ; '.'
0000000000014fd6         db  0xfe ; '.'
0000000000014fd7         db  0xff ; '.'
0000000000014fd8         db  0xd4 ; '.'
0000000000014fd9         db  0xe6 ; '.'
0000000000014fda         db  0xfe ; '.'
0000000000014fdb         db  0xff ; '.'
0000000000014fdc         db  0x04 ; '.'
0000000000014fdd         db  0xe7 ; '.'
0000000000014fde         db  0xfe ; '.'
0000000000014fdf         db  0xff ; '.'
0000000000014fe0         db  0xac ; '.'
0000000000014fe1         db  0xe6 ; '.'
0000000000014fe2         db  0xfe ; '.'
0000000000014fe3         db  0xff ; '.'
0000000000014fe4         db  0x04 ; '.'
0000000000014fe5         db  0xe7 ; '.'
0000000000014fe6         db  0xfe ; '.'
0000000000014fe7         db  0xff ; '.'
0000000000014fe8         db  0x67 ; 'g'
0000000000014fe9         db  0xe5 ; '.'
0000000000014fea         db  0xfe ; '.'
0000000000014feb         db  0xff ; '.'
0000000000014fec         db  0x04 ; '.'
0000000000014fed         db  0xe7 ; '.'
0000000000014fee         db  0xfe ; '.'
0000000000014fef         db  0xff ; '.'
0000000000014ff0         db  0x04 ; '.'
0000000000014ff1         db  0xe7 ; '.'
0000000000014ff2         db  0xfe ; '.'
0000000000014ff3         db  0xff ; '.'
0000000000014ff4         db  0x04 ; '.'
0000000000014ff5         db  0xe7 ; '.'
0000000000014ff6         db  0xfe ; '.'
0000000000014ff7         db  0xff ; '.'
0000000000014ff8         db  0xac ; '.'
0000000000014ff9         db  0xe6 ; '.'
0000000000014ffa         db  0xfe ; '.'
0000000000014ffb         db  0xff ; '.'
0000000000014ffc         db  0xac ; '.'
0000000000014ffd         db  0xe6 ; '.'
0000000000014ffe         db  0xfe ; '.'
0000000000014fff         db  0xff ; '.'
0000000000015000         db  0xac ; '.'
0000000000015001         db  0xe6 ; '.'
0000000000015002         db  0xfe ; '.'
0000000000015003         db  0xff ; '.'
0000000000015004         db  0xac ; '.'
0000000000015005         db  0xe6 ; '.'
0000000000015006         db  0xfe ; '.'
0000000000015007         db  0xff ; '.'
0000000000015008         db  0xac ; '.'
0000000000015009         db  0xe6 ; '.'
000000000001500a         db  0xfe ; '.'
000000000001500b         db  0xff ; '.'
000000000001500c         db  0xac ; '.'
000000000001500d         db  0xe6 ; '.'
000000000001500e         db  0xfe ; '.'
000000000001500f         db  0xff ; '.'
0000000000015010         db  0xac ; '.'
0000000000015011         db  0xe6 ; '.'
0000000000015012         db  0xfe ; '.'
0000000000015013         db  0xff ; '.'
0000000000015014         db  0xac ; '.'
0000000000015015         db  0xe6 ; '.'
0000000000015016         db  0xfe ; '.'
0000000000015017         db  0xff ; '.'
0000000000015018         db  0xac ; '.'
0000000000015019         db  0xe6 ; '.'
000000000001501a         db  0xfe ; '.'
000000000001501b         db  0xff ; '.'
000000000001501c         db  0xac ; '.'
000000000001501d         db  0xe6 ; '.'
000000000001501e         db  0xfe ; '.'
000000000001501f         db  0xff ; '.'
0000000000015020         db  0xac ; '.'
0000000000015021         db  0xe6 ; '.'
0000000000015022         db  0xfe ; '.'
0000000000015023         db  0xff ; '.'
0000000000015024         db  0xac ; '.'
0000000000015025         db  0xe6 ; '.'
0000000000015026         db  0xfe ; '.'
0000000000015027         db  0xff ; '.'
0000000000015028         db  0xac ; '.'
0000000000015029         db  0xe6 ; '.'
000000000001502a         db  0xfe ; '.'
000000000001502b         db  0xff ; '.'
000000000001502c         db  0xac ; '.'
000000000001502d         db  0xe6 ; '.'
000000000001502e         db  0xfe ; '.'
000000000001502f         db  0xff ; '.'
0000000000015030         db  0xac ; '.'
0000000000015031         db  0xe6 ; '.'
0000000000015032         db  0xfe ; '.'
0000000000015033         db  0xff ; '.'
0000000000015034         db  0xac ; '.'
0000000000015035         db  0xe6 ; '.'
0000000000015036         db  0xfe ; '.'
0000000000015037         db  0xff ; '.'
0000000000015038         db  0x04 ; '.'
0000000000015039         db  0xe7 ; '.'
000000000001503a         db  0xfe ; '.'
000000000001503b         db  0xff ; '.'
000000000001503c         db  0x04 ; '.'
000000000001503d         db  0xe7 ; '.'
000000000001503e         db  0xfe ; '.'
000000000001503f         db  0xff ; '.'
0000000000015040         db  0x04 ; '.'
0000000000015041         db  0xe7 ; '.'
0000000000015042         db  0xfe ; '.'
0000000000015043         db  0xff ; '.'
0000000000015044         db  0x04 ; '.'
0000000000015045         db  0xe7 ; '.'
0000000000015046         db  0xfe ; '.'
0000000000015047         db  0xff ; '.'
0000000000015048         db  0x37 ; '7'
0000000000015049         db  0xe5 ; '.'
000000000001504a         db  0xfe ; '.'
000000000001504b         db  0xff ; '.'
000000000001504c         db  0x6c ; 'l'
000000000001504d         db  0xe7 ; '.'
000000000001504e         db  0xfe ; '.'
000000000001504f         db  0xff ; '.'
0000000000015050         db  0xac ; '.'
0000000000015051         db  0xe6 ; '.'
0000000000015052         db  0xfe ; '.'
0000000000015053         db  0xff ; '.'
0000000000015054         db  0xac ; '.'
0000000000015055         db  0xe6 ; '.'
0000000000015056         db  0xfe ; '.'
0000000000015057         db  0xff ; '.'
0000000000015058         db  0xac ; '.'
0000000000015059         db  0xe6 ; '.'
000000000001505a         db  0xfe ; '.'
000000000001505b         db  0xff ; '.'
000000000001505c         db  0xac ; '.'
000000000001505d         db  0xe6 ; '.'
000000000001505e         db  0xfe ; '.'
000000000001505f         db  0xff ; '.'
0000000000015060         db  0xac ; '.'
0000000000015061         db  0xe6 ; '.'
0000000000015062         db  0xfe ; '.'
0000000000015063         db  0xff ; '.'
0000000000015064         db  0xac ; '.'
0000000000015065         db  0xe6 ; '.'
0000000000015066         db  0xfe ; '.'
0000000000015067         db  0xff ; '.'
0000000000015068         db  0xac ; '.'
0000000000015069         db  0xe6 ; '.'
000000000001506a         db  0xfe ; '.'
000000000001506b         db  0xff ; '.'
000000000001506c         db  0xac ; '.'
000000000001506d         db  0xe6 ; '.'
000000000001506e         db  0xfe ; '.'
000000000001506f         db  0xff ; '.'
0000000000015070         db  0xac ; '.'
0000000000015071         db  0xe6 ; '.'
0000000000015072         db  0xfe ; '.'
0000000000015073         db  0xff ; '.'
0000000000015074         db  0xac ; '.'
0000000000015075         db  0xe6 ; '.'
0000000000015076         db  0xfe ; '.'
0000000000015077         db  0xff ; '.'
0000000000015078         db  0xac ; '.'
0000000000015079         db  0xe6 ; '.'
000000000001507a         db  0xfe ; '.'
000000000001507b         db  0xff ; '.'
000000000001507c         db  0xac ; '.'
000000000001507d         db  0xe6 ; '.'
000000000001507e         db  0xfe ; '.'
000000000001507f         db  0xff ; '.'
0000000000015080         db  0xac ; '.'
0000000000015081         db  0xe6 ; '.'
0000000000015082         db  0xfe ; '.'
0000000000015083         db  0xff ; '.'
0000000000015084         db  0xac ; '.'
0000000000015085         db  0xe6 ; '.'
0000000000015086         db  0xfe ; '.'
0000000000015087         db  0xff ; '.'
0000000000015088         db  0xac ; '.'
0000000000015089         db  0xe6 ; '.'
000000000001508a         db  0xfe ; '.'
000000000001508b         db  0xff ; '.'
000000000001508c         db  0xac ; '.'
000000000001508d         db  0xe6 ; '.'
000000000001508e         db  0xfe ; '.'
000000000001508f         db  0xff ; '.'
0000000000015090         db  0xac ; '.'
0000000000015091         db  0xe6 ; '.'
0000000000015092         db  0xfe ; '.'
0000000000015093         db  0xff ; '.'
0000000000015094         db  0xac ; '.'
0000000000015095         db  0xe6 ; '.'
0000000000015096         db  0xfe ; '.'
0000000000015097         db  0xff ; '.'
0000000000015098         db  0xac ; '.'
0000000000015099         db  0xe6 ; '.'
000000000001509a         db  0xfe ; '.'
000000000001509b         db  0xff ; '.'
000000000001509c         db  0xac ; '.'
000000000001509d         db  0xe6 ; '.'
000000000001509e         db  0xfe ; '.'
000000000001509f         db  0xff ; '.'
00000000000150a0         db  0xac ; '.'
00000000000150a1         db  0xe6 ; '.'
00000000000150a2         db  0xfe ; '.'
00000000000150a3         db  0xff ; '.'
00000000000150a4         db  0xac ; '.'
00000000000150a5         db  0xe6 ; '.'
00000000000150a6         db  0xfe ; '.'
00000000000150a7         db  0xff ; '.'
00000000000150a8         db  0xac ; '.'
00000000000150a9         db  0xe6 ; '.'
00000000000150aa         db  0xfe ; '.'
00000000000150ab         db  0xff ; '.'
00000000000150ac         db  0xac ; '.'
00000000000150ad         db  0xe6 ; '.'
00000000000150ae         db  0xfe ; '.'
00000000000150af         db  0xff ; '.'
00000000000150b0         db  0xac ; '.'
00000000000150b1         db  0xe6 ; '.'
00000000000150b2         db  0xfe ; '.'
00000000000150b3         db  0xff ; '.'
00000000000150b4         db  0xac ; '.'
00000000000150b5         db  0xe6 ; '.'
00000000000150b6         db  0xfe ; '.'
00000000000150b7         db  0xff ; '.'
00000000000150b8         db  0x04 ; '.'
00000000000150b9         db  0xe7 ; '.'
00000000000150ba         db  0xfe ; '.'
00000000000150bb         db  0xff ; '.'
00000000000150bc         db  0xdc ; '.'
00000000000150bd         db  0xe5 ; '.'
00000000000150be         db  0xfe ; '.'
00000000000150bf         db  0xff ; '.'
00000000000150c0         db  0xac ; '.'
00000000000150c1         db  0xe6 ; '.'
00000000000150c2         db  0xfe ; '.'
00000000000150c3         db  0xff ; '.'
00000000000150c4         db  0x04 ; '.'
00000000000150c5         db  0xe7 ; '.'
00000000000150c6         db  0xfe ; '.'
00000000000150c7         db  0xff ; '.'
00000000000150c8         db  0xac ; '.'
00000000000150c9         db  0xe6 ; '.'
00000000000150ca         db  0xfe ; '.'
00000000000150cb         db  0xff ; '.'
00000000000150cc         db  0x04 ; '.'
00000000000150cd         db  0xe7 ; '.'
00000000000150ce         db  0xfe ; '.'
00000000000150cf         db  0xff ; '.'
00000000000150d0         db  0xac ; '.'
00000000000150d1         db  0xe6 ; '.'
00000000000150d2         db  0xfe ; '.'
00000000000150d3         db  0xff ; '.'
00000000000150d4         db  0xac ; '.'
00000000000150d5         db  0xe6 ; '.'
00000000000150d6         db  0xfe ; '.'
00000000000150d7         db  0xff ; '.'
00000000000150d8         db  0xac ; '.'
00000000000150d9         db  0xe6 ; '.'
00000000000150da         db  0xfe ; '.'
00000000000150db         db  0xff ; '.'
00000000000150dc         db  0xac ; '.'
00000000000150dd         db  0xe6 ; '.'
00000000000150de         db  0xfe ; '.'
00000000000150df         db  0xff ; '.'
00000000000150e0         db  0xac ; '.'
00000000000150e1         db  0xe6 ; '.'
00000000000150e2         db  0xfe ; '.'
00000000000150e3         db  0xff ; '.'
00000000000150e4         db  0xac ; '.'
00000000000150e5         db  0xe6 ; '.'
00000000000150e6         db  0xfe ; '.'
00000000000150e7         db  0xff ; '.'
00000000000150e8         db  0xac ; '.'
00000000000150e9         db  0xe6 ; '.'
00000000000150ea         db  0xfe ; '.'
00000000000150eb         db  0xff ; '.'
00000000000150ec         db  0xac ; '.'
00000000000150ed         db  0xe6 ; '.'
00000000000150ee         db  0xfe ; '.'
00000000000150ef         db  0xff ; '.'
00000000000150f0         db  0xac ; '.'
00000000000150f1         db  0xe6 ; '.'
00000000000150f2         db  0xfe ; '.'
00000000000150f3         db  0xff ; '.'
00000000000150f4         db  0xac ; '.'
00000000000150f5         db  0xe6 ; '.'
00000000000150f6         db  0xfe ; '.'
00000000000150f7         db  0xff ; '.'
00000000000150f8         db  0xac ; '.'
00000000000150f9         db  0xe6 ; '.'
00000000000150fa         db  0xfe ; '.'
00000000000150fb         db  0xff ; '.'
00000000000150fc         db  0xac ; '.'
00000000000150fd         db  0xe6 ; '.'
00000000000150fe         db  0xfe ; '.'
00000000000150ff         db  0xff ; '.'
0000000000015100         db  0xac ; '.'
0000000000015101         db  0xe6 ; '.'
0000000000015102         db  0xfe ; '.'
0000000000015103         db  0xff ; '.'
0000000000015104         db  0xac ; '.'
0000000000015105         db  0xe6 ; '.'
0000000000015106         db  0xfe ; '.'
0000000000015107         db  0xff ; '.'
0000000000015108         db  0xac ; '.'
0000000000015109         db  0xe6 ; '.'
000000000001510a         db  0xfe ; '.'
000000000001510b         db  0xff ; '.'
000000000001510c         db  0xac ; '.'
000000000001510d         db  0xe6 ; '.'
000000000001510e         db  0xfe ; '.'
000000000001510f         db  0xff ; '.'
0000000000015110         db  0xac ; '.'
0000000000015111         db  0xe6 ; '.'
0000000000015112         db  0xfe ; '.'
0000000000015113         db  0xff ; '.'
0000000000015114         db  0xac ; '.'
0000000000015115         db  0xe6 ; '.'
0000000000015116         db  0xfe ; '.'
0000000000015117         db  0xff ; '.'
0000000000015118         db  0xac ; '.'
0000000000015119         db  0xe6 ; '.'
000000000001511a         db  0xfe ; '.'
000000000001511b         db  0xff ; '.'
000000000001511c         db  0xac ; '.'
000000000001511d         db  0xe6 ; '.'
000000000001511e         db  0xfe ; '.'
000000000001511f         db  0xff ; '.'
0000000000015120         db  0xac ; '.'
0000000000015121         db  0xe6 ; '.'
0000000000015122         db  0xfe ; '.'
0000000000015123         db  0xff ; '.'
0000000000015124         db  0xac ; '.'
0000000000015125         db  0xe6 ; '.'
0000000000015126         db  0xfe ; '.'
0000000000015127         db  0xff ; '.'
0000000000015128         db  0xac ; '.'
0000000000015129         db  0xe6 ; '.'
000000000001512a         db  0xfe ; '.'
000000000001512b         db  0xff ; '.'
000000000001512c         db  0xac ; '.'
000000000001512d         db  0xe6 ; '.'
000000000001512e         db  0xfe ; '.'
000000000001512f         db  0xff ; '.'
0000000000015130         db  0xac ; '.'
0000000000015131         db  0xe6 ; '.'
0000000000015132         db  0xfe ; '.'
0000000000015133         db  0xff ; '.'
0000000000015134         db  0xac ; '.'
0000000000015135         db  0xe6 ; '.'
0000000000015136         db  0xfe ; '.'
0000000000015137         db  0xff ; '.'
0000000000015138         db  0x67 ; 'g'
0000000000015139         db  0xe4 ; '.'
000000000001513a         db  0xfe ; '.'
000000000001513b         db  0xff ; '.'
000000000001513c         db  0x04 ; '.'
000000000001513d         db  0xe7 ; '.'
000000000001513e         db  0xfe ; '.'
000000000001513f         db  0xff ; '.'
0000000000015140         db  0x67 ; 'g'
0000000000015141         db  0xe4 ; '.'
0000000000015142         db  0xfe ; '.'
0000000000015143         db  0xff ; '.'
0000000000015144         db  0xd4 ; '.'
0000000000015145         db  0xe6 ; '.'
0000000000015146         db  0xfe ; '.'
0000000000015147         db  0xff ; '.'
0000000000015148         db  0x58 ; 'X'                                         ; DATA XREF=sub_36a0+137
0000000000015149         db  0xe6 ; '.'
000000000001514a         db  0xfe ; '.'
000000000001514b         db  0xff ; '.'
000000000001514c         db  0x68 ; 'h'
000000000001514d         db  0xe5 ; '.'
000000000001514e         db  0xfe ; '.'
000000000001514f         db  0xff ; '.'
0000000000015150         db  0x68 ; 'h'
0000000000015151         db  0xe5 ; '.'
0000000000015152         db  0xfe ; '.'
0000000000015153         db  0xff ; '.'
0000000000015154         db  0x68 ; 'h'
0000000000015155         db  0xe5 ; '.'
0000000000015156         db  0xfe ; '.'
0000000000015157         db  0xff ; '.'
0000000000015158         db  0x68 ; 'h'
0000000000015159         db  0xe5 ; '.'
000000000001515a         db  0xfe ; '.'
000000000001515b         db  0xff ; '.'
000000000001515c         db  0x68 ; 'h'
000000000001515d         db  0xe5 ; '.'
000000000001515e         db  0xfe ; '.'
000000000001515f         db  0xff ; '.'
0000000000015160         db  0x68 ; 'h'
0000000000015161         db  0xe5 ; '.'
0000000000015162         db  0xfe ; '.'
0000000000015163         db  0xff ; '.'
0000000000015164         db  0x48 ; 'H'
0000000000015165         db  0xe6 ; '.'
0000000000015166         db  0xfe ; '.'
0000000000015167         db  0xff ; '.'
0000000000015168         db  0x98 ; '.'
0000000000015169         db  0xe7 ; '.'
000000000001516a         db  0xfe ; '.'
000000000001516b         db  0xff ; '.'
000000000001516c         db  0x80 ; '.'
000000000001516d         db  0xe7 ; '.'
000000000001516e         db  0xfe ; '.'
000000000001516f         db  0xff ; '.'
0000000000015170         db  0x30 ; '0'
0000000000015171         db  0xe6 ; '.'
0000000000015172         db  0xfe ; '.'
0000000000015173         db  0xff ; '.'
0000000000015174         db  0x70 ; 'p'
0000000000015175         db  0xe7 ; '.'
0000000000015176         db  0xfe ; '.'
0000000000015177         db  0xff ; '.'
0000000000015178         db  0x18 ; '.'
0000000000015179         db  0xe6 ; '.'
000000000001517a         db  0xfe ; '.'
000000000001517b         db  0xff ; '.'
000000000001517c         db  0x58 ; 'X'
000000000001517d         db  0xe7 ; '.'
000000000001517e         db  0xfe ; '.'
000000000001517f         db  0xff ; '.'
0000000000015180         db  0x68 ; 'h'
0000000000015181         db  0xe5 ; '.'
0000000000015182         db  0xfe ; '.'
0000000000015183         db  0xff ; '.'
0000000000015184         db  0x68 ; 'h'
0000000000015185         db  0xe5 ; '.'
0000000000015186         db  0xfe ; '.'
0000000000015187         db  0xff ; '.'
0000000000015188         db  0x68 ; 'h'
0000000000015189         db  0xe5 ; '.'
000000000001518a         db  0xfe ; '.'
000000000001518b         db  0xff ; '.'
000000000001518c         db  0x68 ; 'h'
000000000001518d         db  0xe5 ; '.'
000000000001518e         db  0xfe ; '.'
000000000001518f         db  0xff ; '.'
0000000000015190         db  0x68 ; 'h'
0000000000015191         db  0xe5 ; '.'
0000000000015192         db  0xfe ; '.'
0000000000015193         db  0xff ; '.'
0000000000015194         db  0x68 ; 'h'
0000000000015195         db  0xe5 ; '.'
0000000000015196         db  0xfe ; '.'
0000000000015197         db  0xff ; '.'
0000000000015198         db  0x68 ; 'h'
0000000000015199         db  0xe5 ; '.'
000000000001519a         db  0xfe ; '.'
000000000001519b         db  0xff ; '.'
000000000001519c         db  0x68 ; 'h'
000000000001519d         db  0xe5 ; '.'
000000000001519e         db  0xfe ; '.'
000000000001519f         db  0xff ; '.'
00000000000151a0         db  0x68 ; 'h'
00000000000151a1         db  0xe5 ; '.'
00000000000151a2         db  0xfe ; '.'
00000000000151a3         db  0xff ; '.'
00000000000151a4         db  0x68 ; 'h'
00000000000151a5         db  0xe5 ; '.'
00000000000151a6         db  0xfe ; '.'
00000000000151a7         db  0xff ; '.'
00000000000151a8         db  0x68 ; 'h'
00000000000151a9         db  0xe5 ; '.'
00000000000151aa         db  0xfe ; '.'
00000000000151ab         db  0xff ; '.'
00000000000151ac         db  0x68 ; 'h'
00000000000151ad         db  0xe5 ; '.'
00000000000151ae         db  0xfe ; '.'
00000000000151af         db  0xff ; '.'
00000000000151b0         db  0x68 ; 'h'
00000000000151b1         db  0xe5 ; '.'
00000000000151b2         db  0xfe ; '.'
00000000000151b3         db  0xff ; '.'
00000000000151b4         db  0x68 ; 'h'
00000000000151b5         db  0xe5 ; '.'
00000000000151b6         db  0xfe ; '.'
00000000000151b7         db  0xff ; '.'
00000000000151b8         db  0x68 ; 'h'
00000000000151b9         db  0xe5 ; '.'
00000000000151ba         db  0xfe ; '.'
00000000000151bb         db  0xff ; '.'
00000000000151bc         db  0x68 ; 'h'
00000000000151bd         db  0xe5 ; '.'
00000000000151be         db  0xfe ; '.'
00000000000151bf         db  0xff ; '.'
00000000000151c0         db  0x68 ; 'h'
00000000000151c1         db  0xe5 ; '.'
00000000000151c2         db  0xfe ; '.'
00000000000151c3         db  0xff ; '.'
00000000000151c4         db  0x68 ; 'h'
00000000000151c5         db  0xe5 ; '.'
00000000000151c6         db  0xfe ; '.'
00000000000151c7         db  0xff ; '.'
00000000000151c8         db  0x40 ; '@'
00000000000151c9         db  0xe7 ; '.'
00000000000151ca         db  0xfe ; '.'
00000000000151cb         db  0xff ; '.'
00000000000151cc         db  0x28 ; '('
00000000000151cd         db  0xe7 ; '.'
00000000000151ce         db  0xfe ; '.'
00000000000151cf         db  0xff ; '.'
00000000000151d0         db  0x28 ; '('
00000000000151d1         db  0xe7 ; '.'
00000000000151d2         db  0xfe ; '.'
00000000000151d3         db  0xff ; '.'
00000000000151d4         db  0x10 ; '.'
00000000000151d5         db  0xe7 ; '.'
00000000000151d6         db  0xfe ; '.'
00000000000151d7         db  0xff ; '.'
00000000000151d8         db  0x28 ; '('
00000000000151d9         db  0xe7 ; '.'
00000000000151da         db  0xfe ; '.'
00000000000151db         db  0xff ; '.'
00000000000151dc         db  0xf8 ; '.'
00000000000151dd         db  0xe6 ; '.'
00000000000151de         db  0xfe ; '.'
00000000000151df         db  0xff ; '.'
00000000000151e0         db  0x28 ; '('
00000000000151e1         db  0xe7 ; '.'
00000000000151e2         db  0xfe ; '.'
00000000000151e3         db  0xff ; '.'
00000000000151e4         db  0x68 ; 'h'
00000000000151e5         db  0xe3 ; '.'
00000000000151e6         db  0xfe ; '.'
00000000000151e7         db  0xff ; '.'
00000000000151e8         db  0x28 ; '('
00000000000151e9         db  0xe7 ; '.'
00000000000151ea         db  0xfe ; '.'
00000000000151eb         db  0xff ; '.'
00000000000151ec         db  0x28 ; '('
00000000000151ed         db  0xe7 ; '.'
00000000000151ee         db  0xfe ; '.'
00000000000151ef         db  0xff ; '.'
00000000000151f0         db  0x28 ; '('
00000000000151f1         db  0xe7 ; '.'
00000000000151f2         db  0xfe ; '.'
00000000000151f3         db  0xff ; '.'
00000000000151f4         db  0xf8 ; '.'
00000000000151f5         db  0xe6 ; '.'
00000000000151f6         db  0xfe ; '.'
00000000000151f7         db  0xff ; '.'
00000000000151f8         db  0xf8 ; '.'
00000000000151f9         db  0xe6 ; '.'
00000000000151fa         db  0xfe ; '.'
00000000000151fb         db  0xff ; '.'
00000000000151fc         db  0xf8 ; '.'
00000000000151fd         db  0xe6 ; '.'
00000000000151fe         db  0xfe ; '.'
00000000000151ff         db  0xff ; '.'
0000000000015200         db  0xf8 ; '.'
0000000000015201         db  0xe6 ; '.'
0000000000015202         db  0xfe ; '.'
0000000000015203         db  0xff ; '.'
0000000000015204         db  0xf8 ; '.'
0000000000015205         db  0xe6 ; '.'
0000000000015206         db  0xfe ; '.'
0000000000015207         db  0xff ; '.'
0000000000015208         db  0xf8 ; '.'
0000000000015209         db  0xe6 ; '.'
000000000001520a         db  0xfe ; '.'
000000000001520b         db  0xff ; '.'
000000000001520c         db  0xf8 ; '.'
000000000001520d         db  0xe6 ; '.'
000000000001520e         db  0xfe ; '.'
000000000001520f         db  0xff ; '.'
0000000000015210         db  0xf8 ; '.'
0000000000015211         db  0xe6 ; '.'
0000000000015212         db  0xfe ; '.'
0000000000015213         db  0xff ; '.'
0000000000015214         db  0xf8 ; '.'
0000000000015215         db  0xe6 ; '.'
0000000000015216         db  0xfe ; '.'
0000000000015217         db  0xff ; '.'
0000000000015218         db  0xf8 ; '.'
0000000000015219         db  0xe6 ; '.'
000000000001521a         db  0xfe ; '.'
000000000001521b         db  0xff ; '.'
000000000001521c         db  0xf8 ; '.'
000000000001521d         db  0xe6 ; '.'
000000000001521e         db  0xfe ; '.'
000000000001521f         db  0xff ; '.'
0000000000015220         db  0xf8 ; '.'
0000000000015221         db  0xe6 ; '.'
0000000000015222         db  0xfe ; '.'
0000000000015223         db  0xff ; '.'
0000000000015224         db  0xf8 ; '.'
0000000000015225         db  0xe6 ; '.'
0000000000015226         db  0xfe ; '.'
0000000000015227         db  0xff ; '.'
0000000000015228         db  0xf8 ; '.'
0000000000015229         db  0xe6 ; '.'
000000000001522a         db  0xfe ; '.'
000000000001522b         db  0xff ; '.'
000000000001522c         db  0xf8 ; '.'
000000000001522d         db  0xe6 ; '.'
000000000001522e         db  0xfe ; '.'
000000000001522f         db  0xff ; '.'
0000000000015230         db  0xf8 ; '.'
0000000000015231         db  0xe6 ; '.'
0000000000015232         db  0xfe ; '.'
0000000000015233         db  0xff ; '.'
0000000000015234         db  0x28 ; '('
0000000000015235         db  0xe7 ; '.'
0000000000015236         db  0xfe ; '.'
0000000000015237         db  0xff ; '.'
0000000000015238         db  0x28 ; '('
0000000000015239         db  0xe7 ; '.'
000000000001523a         db  0xfe ; '.'
000000000001523b         db  0xff ; '.'
000000000001523c         db  0x28 ; '('
000000000001523d         db  0xe7 ; '.'
000000000001523e         db  0xfe ; '.'
000000000001523f         db  0xff ; '.'
0000000000015240         db  0x28 ; '('
0000000000015241         db  0xe7 ; '.'
0000000000015242         db  0xfe ; '.'
0000000000015243         db  0xff ; '.'
0000000000015244         db  0x38 ; '8'
0000000000015245         db  0xe3 ; '.'
0000000000015246         db  0xfe ; '.'
0000000000015247         db  0xff ; '.'
0000000000015248         db  0x68 ; 'h'
0000000000015249         db  0xe5 ; '.'
000000000001524a         db  0xfe ; '.'
000000000001524b         db  0xff ; '.'
000000000001524c         db  0xf8 ; '.'
000000000001524d         db  0xe6 ; '.'
000000000001524e         db  0xfe ; '.'
000000000001524f         db  0xff ; '.'
0000000000015250         db  0xf8 ; '.'
0000000000015251         db  0xe6 ; '.'
0000000000015252         db  0xfe ; '.'
0000000000015253         db  0xff ; '.'
0000000000015254         db  0xf8 ; '.'
0000000000015255         db  0xe6 ; '.'
0000000000015256         db  0xfe ; '.'
0000000000015257         db  0xff ; '.'
0000000000015258         db  0xf8 ; '.'
0000000000015259         db  0xe6 ; '.'
000000000001525a         db  0xfe ; '.'
000000000001525b         db  0xff ; '.'
000000000001525c         db  0xf8 ; '.'
000000000001525d         db  0xe6 ; '.'
000000000001525e         db  0xfe ; '.'
000000000001525f         db  0xff ; '.'
0000000000015260         db  0xf8 ; '.'
0000000000015261         db  0xe6 ; '.'
0000000000015262         db  0xfe ; '.'
0000000000015263         db  0xff ; '.'
0000000000015264         db  0xf8 ; '.'
0000000000015265         db  0xe6 ; '.'
0000000000015266         db  0xfe ; '.'
0000000000015267         db  0xff ; '.'
0000000000015268         db  0xf8 ; '.'
0000000000015269         db  0xe6 ; '.'
000000000001526a         db  0xfe ; '.'
000000000001526b         db  0xff ; '.'
000000000001526c         db  0xf8 ; '.'
000000000001526d         db  0xe6 ; '.'
000000000001526e         db  0xfe ; '.'
000000000001526f         db  0xff ; '.'
0000000000015270         db  0xf8 ; '.'
0000000000015271         db  0xe6 ; '.'
0000000000015272         db  0xfe ; '.'
0000000000015273         db  0xff ; '.'
0000000000015274         db  0xf8 ; '.'
0000000000015275         db  0xe6 ; '.'
0000000000015276         db  0xfe ; '.'
0000000000015277         db  0xff ; '.'
0000000000015278         db  0xf8 ; '.'
0000000000015279         db  0xe6 ; '.'
000000000001527a         db  0xfe ; '.'
000000000001527b         db  0xff ; '.'
000000000001527c         db  0xf8 ; '.'
000000000001527d         db  0xe6 ; '.'
000000000001527e         db  0xfe ; '.'
000000000001527f         db  0xff ; '.'
0000000000015280         db  0xf8 ; '.'
0000000000015281         db  0xe6 ; '.'
0000000000015282         db  0xfe ; '.'
0000000000015283         db  0xff ; '.'
0000000000015284         db  0xf8 ; '.'
0000000000015285         db  0xe6 ; '.'
0000000000015286         db  0xfe ; '.'
0000000000015287         db  0xff ; '.'
0000000000015288         db  0xf8 ; '.'
0000000000015289         db  0xe6 ; '.'
000000000001528a         db  0xfe ; '.'
000000000001528b         db  0xff ; '.'
000000000001528c         db  0xf8 ; '.'
000000000001528d         db  0xe6 ; '.'
000000000001528e         db  0xfe ; '.'
000000000001528f         db  0xff ; '.'
0000000000015290         db  0xf8 ; '.'
0000000000015291         db  0xe6 ; '.'
0000000000015292         db  0xfe ; '.'
0000000000015293         db  0xff ; '.'
0000000000015294         db  0xf8 ; '.'
0000000000015295         db  0xe6 ; '.'
0000000000015296         db  0xfe ; '.'
0000000000015297         db  0xff ; '.'
0000000000015298         db  0xf8 ; '.'
0000000000015299         db  0xe6 ; '.'
000000000001529a         db  0xfe ; '.'
000000000001529b         db  0xff ; '.'
000000000001529c         db  0xf8 ; '.'
000000000001529d         db  0xe6 ; '.'
000000000001529e         db  0xfe ; '.'
000000000001529f         db  0xff ; '.'
00000000000152a0         db  0xf8 ; '.'
00000000000152a1         db  0xe6 ; '.'
00000000000152a2         db  0xfe ; '.'
00000000000152a3         db  0xff ; '.'
00000000000152a4         db  0xf8 ; '.'
00000000000152a5         db  0xe6 ; '.'
00000000000152a6         db  0xfe ; '.'
00000000000152a7         db  0xff ; '.'
00000000000152a8         db  0xf8 ; '.'
00000000000152a9         db  0xe6 ; '.'
00000000000152aa         db  0xfe ; '.'
00000000000152ab         db  0xff ; '.'
00000000000152ac         db  0xf8 ; '.'
00000000000152ad         db  0xe6 ; '.'
00000000000152ae         db  0xfe ; '.'
00000000000152af         db  0xff ; '.'
00000000000152b0         db  0xf8 ; '.'
00000000000152b1         db  0xe6 ; '.'
00000000000152b2         db  0xfe ; '.'
00000000000152b3         db  0xff ; '.'
00000000000152b4         db  0x28 ; '('
00000000000152b5         db  0xe7 ; '.'
00000000000152b6         db  0xfe ; '.'
00000000000152b7         db  0xff ; '.'
00000000000152b8         db  0xf8 ; '.'
00000000000152b9         db  0xe5 ; '.'
00000000000152ba         db  0xfe ; '.'
00000000000152bb         db  0xff ; '.'
00000000000152bc         db  0xf8 ; '.'
00000000000152bd         db  0xe6 ; '.'
00000000000152be         db  0xfe ; '.'
00000000000152bf         db  0xff ; '.'
00000000000152c0         db  0x28 ; '('
00000000000152c1         db  0xe7 ; '.'
00000000000152c2         db  0xfe ; '.'
00000000000152c3         db  0xff ; '.'
00000000000152c4         db  0xf8 ; '.'
00000000000152c5         db  0xe6 ; '.'
00000000000152c6         db  0xfe ; '.'
00000000000152c7         db  0xff ; '.'
00000000000152c8         db  0x28 ; '('
00000000000152c9         db  0xe7 ; '.'
00000000000152ca         db  0xfe ; '.'
00000000000152cb         db  0xff ; '.'
00000000000152cc         db  0xf8 ; '.'
00000000000152cd         db  0xe6 ; '.'
00000000000152ce         db  0xfe ; '.'
00000000000152cf         db  0xff ; '.'
00000000000152d0         db  0xf8 ; '.'
00000000000152d1         db  0xe6 ; '.'
00000000000152d2         db  0xfe ; '.'
00000000000152d3         db  0xff ; '.'
00000000000152d4         db  0xf8 ; '.'
00000000000152d5         db  0xe6 ; '.'
00000000000152d6         db  0xfe ; '.'
00000000000152d7         db  0xff ; '.'
00000000000152d8         db  0xf8 ; '.'
00000000000152d9         db  0xe6 ; '.'
00000000000152da         db  0xfe ; '.'
00000000000152db         db  0xff ; '.'
00000000000152dc         db  0xf8 ; '.'
00000000000152dd         db  0xe6 ; '.'
00000000000152de         db  0xfe ; '.'
00000000000152df         db  0xff ; '.'
00000000000152e0         db  0xf8 ; '.'
00000000000152e1         db  0xe6 ; '.'
00000000000152e2         db  0xfe ; '.'
00000000000152e3         db  0xff ; '.'
00000000000152e4         db  0xf8 ; '.'
00000000000152e5         db  0xe6 ; '.'
00000000000152e6         db  0xfe ; '.'
00000000000152e7         db  0xff ; '.'
00000000000152e8         db  0xf8 ; '.'
00000000000152e9         db  0xe6 ; '.'
00000000000152ea         db  0xfe ; '.'
00000000000152eb         db  0xff ; '.'
00000000000152ec         db  0xf8 ; '.'
00000000000152ed         db  0xe6 ; '.'
00000000000152ee         db  0xfe ; '.'
00000000000152ef         db  0xff ; '.'
00000000000152f0         db  0xf8 ; '.'
00000000000152f1         db  0xe6 ; '.'
00000000000152f2         db  0xfe ; '.'
00000000000152f3         db  0xff ; '.'
00000000000152f4         db  0xf8 ; '.'
00000000000152f5         db  0xe6 ; '.'
00000000000152f6         db  0xfe ; '.'
00000000000152f7         db  0xff ; '.'
00000000000152f8         db  0xf8 ; '.'
00000000000152f9         db  0xe6 ; '.'
00000000000152fa         db  0xfe ; '.'
00000000000152fb         db  0xff ; '.'
00000000000152fc         db  0xf8 ; '.'
00000000000152fd         db  0xe6 ; '.'
00000000000152fe         db  0xfe ; '.'
00000000000152ff         db  0xff ; '.'
0000000000015300         db  0xf8 ; '.'
0000000000015301         db  0xe6 ; '.'
0000000000015302         db  0xfe ; '.'
0000000000015303         db  0xff ; '.'
0000000000015304         db  0xf8 ; '.'
0000000000015305         db  0xe6 ; '.'
0000000000015306         db  0xfe ; '.'
0000000000015307         db  0xff ; '.'
0000000000015308         db  0xf8 ; '.'
0000000000015309         db  0xe6 ; '.'
000000000001530a         db  0xfe ; '.'
000000000001530b         db  0xff ; '.'
000000000001530c         db  0xf8 ; '.'
000000000001530d         db  0xe6 ; '.'
000000000001530e         db  0xfe ; '.'
000000000001530f         db  0xff ; '.'
0000000000015310         db  0xf8 ; '.'
0000000000015311         db  0xe6 ; '.'
0000000000015312         db  0xfe ; '.'
0000000000015313         db  0xff ; '.'
0000000000015314         db  0xf8 ; '.'
0000000000015315         db  0xe6 ; '.'
0000000000015316         db  0xfe ; '.'
0000000000015317         db  0xff ; '.'
0000000000015318         db  0xf8 ; '.'
0000000000015319         db  0xe6 ; '.'
000000000001531a         db  0xfe ; '.'
000000000001531b         db  0xff ; '.'
000000000001531c         db  0xf8 ; '.'
000000000001531d         db  0xe6 ; '.'
000000000001531e         db  0xfe ; '.'
000000000001531f         db  0xff ; '.'
0000000000015320         db  0xf8 ; '.'
0000000000015321         db  0xe6 ; '.'
0000000000015322         db  0xfe ; '.'
0000000000015323         db  0xff ; '.'
0000000000015324         db  0xf8 ; '.'
0000000000015325         db  0xe6 ; '.'
0000000000015326         db  0xfe ; '.'
0000000000015327         db  0xff ; '.'
0000000000015328         db  0xf8 ; '.'
0000000000015329         db  0xe6 ; '.'
000000000001532a         db  0xfe ; '.'
000000000001532b         db  0xff ; '.'
000000000001532c         db  0xf8 ; '.'
000000000001532d         db  0xe6 ; '.'
000000000001532e         db  0xfe ; '.'
000000000001532f         db  0xff ; '.'
0000000000015330         db  0xf8 ; '.'
0000000000015331         db  0xe6 ; '.'
0000000000015332         db  0xfe ; '.'
0000000000015333         db  0xff ; '.'
0000000000015334         db  0x68 ; 'h'
0000000000015335         db  0xe2 ; '.'
0000000000015336         db  0xfe ; '.'
0000000000015337         db  0xff ; '.'
0000000000015338         db  0x28 ; '('
0000000000015339         db  0xe7 ; '.'
000000000001533a         db  0xfe ; '.'
000000000001533b         db  0xff ; '.'
000000000001533c         db  0x68 ; 'h'
000000000001533d         db  0xe2 ; '.'
000000000001533e         db  0xfe ; '.'
000000000001533f         db  0xff ; '.'
0000000000015340         db  0x10 ; '.'
0000000000015341         db  0xe7 ; '.'
0000000000015342         db  0xfe ; '.'
0000000000015343         db  0xff ; '.'
0000000000015344         db  0x00 ; '.'
0000000000015345         db  0x00 ; '.'
0000000000015346         db  0x00 ; '.'
0000000000015347         db  0x00 ; '.'
0000000000015348         db  0x00 ; '.'
0000000000015349         db  0x00 ; '.'
000000000001534a         db  0x00 ; '.'
000000000001534b         db  0x00 ; '.'
000000000001534c         db  0x00 ; '.'
000000000001534d         db  0x00 ; '.'
000000000001534e         db  0x00 ; '.'
000000000001534f         db  0x00 ; '.'
0000000000015350         db  0x00 ; '.'
0000000000015351         db  0x00 ; '.'
0000000000015352         db  0x00 ; '.'
0000000000015353         db  0x00 ; '.'
0000000000015354         db  0x00 ; '.'
0000000000015355         db  0x00 ; '.'
0000000000015356         db  0x00 ; '.'
0000000000015357         db  0x00 ; '.'
0000000000015358         db  0x00 ; '.'
0000000000015359         db  0x00 ; '.'
000000000001535a         db  0x00 ; '.'
000000000001535b         db  0x00 ; '.'
000000000001535c         db  0x00 ; '.'
000000000001535d         db  0x00 ; '.'
000000000001535e         db  0x00 ; '.'
000000000001535f         db  0x00 ; '.'
                     quoting_style_vals:
0000000000015360         db  0x00 ; '.'
0000000000015361         db  0x00 ; '.'
0000000000015362         db  0x00 ; '.'
0000000000015363         db  0x00 ; '.'
0000000000015364         db  0x01 ; '.'
0000000000015365         db  0x00 ; '.'
0000000000015366         db  0x00 ; '.'
0000000000015367         db  0x00 ; '.'
0000000000015368         db  0x02 ; '.'
0000000000015369         db  0x00 ; '.'
000000000001536a         db  0x00 ; '.'
000000000001536b         db  0x00 ; '.'
000000000001536c         db  0x03 ; '.'
000000000001536d         db  0x00 ; '.'
000000000001536e         db  0x00 ; '.'
000000000001536f         db  0x00 ; '.'
0000000000015370         db  0x04 ; '.'
0000000000015371         db  0x00 ; '.'
0000000000015372         db  0x00 ; '.'
0000000000015373         db  0x00 ; '.'
0000000000015374         db  0x05 ; '.'
0000000000015375         db  0x00 ; '.'
0000000000015376         db  0x00 ; '.'
0000000000015377         db  0x00 ; '.'
0000000000015378         db  0x06 ; '.'
0000000000015379         db  0x00 ; '.'
000000000001537a         db  0x00 ; '.'
000000000001537b         db  0x00 ; '.'
000000000001537c         db  0x07 ; '.'
000000000001537d         db  0x00 ; '.'
000000000001537e         db  0x00 ; '.'
000000000001537f         db  0x00 ; '.'
0000000000015380         db  0x08 ; '.'
0000000000015381         db  0x00 ; '.'
0000000000015382         db  0x00 ; '.'
0000000000015383         db  0x00 ; '.'
0000000000015384         db  0x09 ; '.'
0000000000015385         db  0x00 ; '.'
0000000000015386         db  0x00 ; '.'
0000000000015387         db  0x00 ; '.'
                     aSSSn:
0000000000015388         db         "%s (%s) %s\n", 0                           ; DATA XREF=version_etc_arn+35
                     aSSn:
0000000000015394         db         "%s %s\n", 0                                ; DATA XREF=version_etc_arn+318
000000000001539b         db  0x28 ; '('                                         ; DATA XREF=version_etc_arn+60
000000000001539c         db  0x43 ; 'C'
000000000001539d         db  0x29 ; ')'
000000000001539e         db  0x00 ; '.'
                     aWrittenBySn:
000000000001539f         db         "Written by %s.\n", 0                       ; DATA XREF=version_etc_arn+443
                     aWrittenBySAndS:
00000000000153af         db         "Written by %s and %s.\n", 0                ; DATA XREF=version_etc_arn+508
                     aWrittenBySSAnd:
00000000000153c6         db         "Written by %s, %s, and %s.\n", 0           ; DATA XREF=version_etc_arn+584
                     aNreportBugsToS:
00000000000153e2         db         "\nReport bugs to: %s\n", 0                 ; DATA XREF=emit_bug_reporting_address+1
                     aBugcoreutilsgn:
00000000000153f7         db         "bug-coreutils@gnu.org", 0                  ; DATA XREF=emit_bug_reporting_address+20
                     aSHomePageSn:
000000000001540d         db         "%s home page: <%s>\n", 0                   ; DATA XREF=emit_bug_reporting_address+42
0000000000015421         align      8
                     aNlicenseGplv3G:
0000000000015428         db         "\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\n", 0 ; DATA XREF=version_etc_arn+110
00000000000154f4         align      8
                     aWrittenBySSSna:
00000000000154f8         db         "Written by %s, %s, %s,\nand %s.\n", 0      ; DATA XREF=version_etc_arn+656
                     aWrittenBySSSns_15518:        // aWrittenBySSSns
0000000000015518         db         "Written by %s, %s, %s,\n%s, and %s.\n", 0  ; DATA XREF=version_etc_arn+748
000000000001553c         align      64
                     aWrittenBySSSns_15540:        // aWrittenBySSSns
0000000000015540         db         "Written by %s, %s, %s,\n%s, %s, and %s.\n", 0 ; DATA XREF=version_etc_arn+800
                     aWrittenBySSSns_15568:        // aWrittenBySSSns
0000000000015568         db         "Written by %s, %s, %s,\n%s, %s, %s, and %s.\n", 0 ; DATA XREF=version_etc_arn+904
0000000000015594         align      8
                     aWrittenBySSSns_15598:        // aWrittenBySSSns
0000000000015598         db         "Written by %s, %s, %s,\n%s, %s, %s, %s,\nand %s.\n", 0 ; DATA XREF=version_etc_arn+184
                     aWrittenBySSSns:
00000000000155c8         db         "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, and %s.\n", 0 ; DATA XREF=version_etc_arn+360
00000000000155fc         align      512
                     aWrittenBySSSns_15600:        // aWrittenBySSSns
0000000000015600         db         "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n", 0 ; DATA XREF=version_etc_arn+997
000000000001563c         align      64
                     aGeneralHelpUsi:
0000000000015640         db         "General help using GNU software: <https://www.gnu.org/gethelp/>\n", 0 ; DATA XREF=emit_bug_reporting_address+97
0000000000015681         align      4
                     switch_table_15684:        // switch_table
0000000000015684         dd         version_etc_arn.loc_4e86-switch_table_15684, version_etc_arn.loc_4f18-switch_table_15684, version_etc_arn.loc_4f58-switch_table_15684, version_etc_arn.loc_4fa0-switch_table_15684 ; switch table used at 0x4e04 containing 10 entries, DATA XREF=version_etc_arn+150
0000000000015694         dd         version_etc_arn.loc_4ff0-switch_table_15684, version_etc_arn.loc_5048-switch_table_15684, version_etc_arn.loc_5078-switch_table_15684, version_etc_arn.loc_50e0-switch_table_15684
00000000000156a4         dd         version_etc_arn.loc_4e10-switch_table_15684, version_etc_arn.loc_4ec0-switch_table_15684
00000000000156ac         align      64
                     version_etc_copyright:
00000000000156c0         db         "Copyright %s %d Free Software Foundation, Inc.", 0 ; DATA XREF=version_etc_arn+79
                     aMemoryExhauste:
00000000000156ef         db         "memory exhausted", 0                       ; DATA XREF=xalloc_die
                     aCoreutils831li_15700:        // aCoreutils831li
0000000000015700         db         "../coreutils-8.31/lib/xstrtol.c", 0        ; DATA XREF=xstrtoimax+1686
                     a0StrtolbaseStr:
0000000000015720         db         "0 <= strtol_base && strtol_base <= 36", 0  ; DATA XREF=xstrtoimax+1693
0000000000015746         align      8
                     switch_table_15748:        // switch_table
0000000000015748         dd         xstrtoimax.loc_5c40-switch_table_15748, 2 dup (xstrtoimax.loc_58d8-switch_table_15748), xstrtoimax.loc_5b70-switch_table_15748, xstrtoimax.loc_58d8-switch_table_15748 ; switch table used at 0x590e containing 54 entries, DATA XREF=xstrtoimax+412
000000000001575c         dd         xstrtoimax.loc_5b10-switch_table_15748, 3 dup (xstrtoimax.loc_58d8-switch_table_15748), xstrtoimax.loc_5ad0-switch_table_15748, xstrtoimax.loc_58d8-switch_table_15748
0000000000015774         dd         xstrtoimax.loc_5910-switch_table_15748, 2 dup (xstrtoimax.loc_58d8-switch_table_15748), xstrtoimax.loc_5bd8-switch_table_15748, 3 dup (xstrtoimax.loc_58d8-switch_table_15748)
0000000000015790         dd         xstrtoimax.loc_5c70-switch_table_15748, 4 dup (xstrtoimax.loc_58d8-switch_table_15748), xstrtoimax.loc_5a60-switch_table_15748, xstrtoimax.loc_59f0-switch_table_15748
00000000000157ac         dd         7 dup (xstrtoimax.loc_58d8-switch_table_15748), xstrtoimax.loc_59c0-switch_table_15748, xstrtoimax.loc_5970-switch_table_15748, 3 dup (xstrtoimax.loc_58d8-switch_table_15748)
00000000000157dc         dd         xstrtoimax.loc_5b10-switch_table_15748, 3 dup (xstrtoimax.loc_58d8-switch_table_15748), xstrtoimax.loc_5ad0-switch_table_15748, xstrtoimax.loc_58d8-switch_table_15748
00000000000157f4         dd         xstrtoimax.loc_5910-switch_table_15748, 6 dup (xstrtoimax.loc_58d8-switch_table_15748), xstrtoimax.loc_5c70-switch_table_15748, 2 dup (xstrtoimax.loc_58d8-switch_table_15748)
000000000001581c         dd         xstrtoimax.loc_5990-switch_table_15748
                     __PRETTY_FUNCTION__.4162:
0000000000015820         db         "xstrtoimax", 0                             ; DATA XREF=xstrtoimax+1679
000000000001582b         align      16
                     aCoreutils831li:
0000000000015830         db         "../coreutils-8.31/lib/regexec.c", 0        ; DATA XREF=pop_fail_stack.isra.25+124, re_search_internal+4148, re_search_internal+5432, re_search_stub+1065, re_search_stub+1096, re_search_stub+1127
                     aCoreutils831li_15850:        // aCoreutils831li
0000000000015850         db         "../coreutils-8.31/lib/regcomp.c", 0        ; DATA XREF=sub_116a0+2817, sub_12fe0+18, sub_136c0+106, sub_136c0+137, sub_136c0+168
                     aIsepsilonnodeN:
0000000000015870         db         "!IS_EPSILON_NODE (node->token.type)", 0    ; DATA XREF=sub_136c0+144
0000000000015894         align      8
                     aNum0:
0000000000015898         db         "num >= 0", 0                               ; DATA XREF=pop_fail_stack.isra.25+131
                     aAlpha:
00000000000158a1         db         "alpha", 0                                  ; DATA XREF=build_charclass.isra.29+65, build_charclass.isra.29+338, build_charclass.isra.29+626
                     aUpper:
00000000000158a7         db         "upper", 0                                  ; DATA XREF=build_charclass.isra.29+35, build_charclass.isra.29+1100
                     aLower:
00000000000158ad         db         "lower", 0                                  ; DATA XREF=build_charclass.isra.29+310, build_charclass.isra.29+424
                     aAlnum:
00000000000158b3         db         "alnum", 0                                  ; DATA XREF=build_charclass.isra.29+108, sub_116a0+463
                     aCntrl:
00000000000158b9         db         "cntrl", 0                                  ; DATA XREF=build_charclass.isra.29+138
                     aSpace:
00000000000158bf         db         "space", 0                                  ; DATA XREF=build_charclass.isra.29+450, sub_116a0+383
                     aPrint:
00000000000158c5         db         "print", 0                                  ; DATA XREF=build_charclass.isra.29+947
                     aBlank:
00000000000158cb         db         "blank", 0                                  ; DATA XREF=build_charclass.isra.29+1202
                     aGraph:
00000000000158d1         db         "graph", 0                                  ; DATA XREF=build_charclass.isra.29+1470
                     aPunct:
00000000000158d7         db         "punct", 0                                  ; DATA XREF=build_charclass.isra.29+1610
00000000000158dd         db  0x78 ; 'x'                                         ; DATA XREF=build_charclass.isra.29+1748
                     aDigit:
00000000000158de         db         "digit", 0                                  ; DATA XREF=build_charclass.isra.29+656
                     aErrRegespace:
00000000000158e4         db         "err == REG_ESPACE", 0                      ; DATA XREF=re_search_internal+4155, re_search_internal+5439
00000000000158f6         db  0x38 ; '8'                                         ; DATA XREF=re_compile_internal+352
00000000000158f7         db  0x00 ; '.'
                     aNodenextNull:
00000000000158f8         db         "node->next == NULL", 0                     ; DATA XREF=sub_12fe0+25
                     aLeft1:
000000000001590b         db         "left > -1", 0                              ; DATA XREF=sub_136c0+175
                     aRight1:
0000000000015915         db         "right > -1", 0                             ; DATA XREF=sub_136c0+113
                     aRegsallocatedR:
0000000000015920         db         "regs_allocated == REGS_FIXED", 0           ; DATA XREF=re_search_stub+1134
                     aRegsnumregsNre:
000000000001593d         db         "regs->num_regs >= nregs", 0                ; DATA XREF=re_search_stub+1103
                     aPmatch0rmsoSta:
0000000000015955         db         "pmatch[0].rm_so == start", 0               ; DATA XREF=re_search_stub+1072
000000000001596e         align      128
                     switch_table_15980:        // switch_table
0000000000015980         dd         2 dup (re_search_internal.loc_efc4-switch_table_15980), re_search_internal.loc_ea2e-switch_table_15980, re_search_internal.loc_ef52-switch_table_15980, re_search_internal.loc_ead8-switch_table_15980 ; switch table used at 0xe9f6 containing 5 entries, DATA XREF=re_search_internal+1256
                     switch_table_15994:        // switch_table
0000000000015994         dd         peek_token.loc_10a10-switch_table_15994, 25 dup (peek_token.loc_1094c-switch_table_15994), peek_token.loc_10a80-switch_table_15994, 3 dup (peek_token.loc_1094c-switch_table_15994) ; switch table used at 0x1082c containing 116 entries, DATA XREF=peek_token+314
0000000000015a0c         dd         peek_token.loc_10a60-switch_table_15994, peek_token.loc_10a40-switch_table_15994, peek_token.loc_10a30-switch_table_15994, peek_token.loc_109f0-switch_table_15994
0000000000015a1c         dd         2 dup (peek_token.loc_1094c-switch_table_15994), peek_token.loc_109e0-switch_table_15994, 16 dup (peek_token.loc_1094c-switch_table_15994), peek_token.loc_109c0-switch_table_15994
0000000000015a6c         dd         27 dup (peek_token.loc_1094c-switch_table_15994), peek_token.loc_109b0-switch_table_15994, 2 dup (peek_token.loc_1094c-switch_table_15994), peek_token.loc_10988-switch_table_15994
0000000000015ae8         dd         28 dup (peek_token.loc_1094c-switch_table_15994), peek_token.loc_10960-switch_table_15994, peek_token.loc_10938-switch_table_15994, peek_token.loc_10910-switch_table_15994
                     switch_table_15b64:        // switch_table
0000000000015b64         dd         peek_token.loc_10ca3-switch_table_15b64, peek_token.loc_10c8c-switch_table_15b64, peek_token.loc_10c75-switch_table_15b64, peek_token.loc_10cc5-switch_table_15b64 ; switch table used at 0x108d8 containing 87 entries, DATA XREF=peek_token+487
0000000000015b74         dd         peek_token.loc_10c5a-switch_table_15b64, 5 dup (peek_token.loc_10cc5-switch_table_15b64), 9 dup (peek_token.loc_10c31-switch_table_15b64), 2 dup (peek_token.loc_10cc5-switch_table_15b64)
0000000000015bb8         dd         peek_token.loc_10c0f-switch_table_15b64, peek_token.loc_10cc5-switch_table_15b64, peek_token.loc_10bed-switch_table_15b64, peek_token.loc_10bd2-switch_table_15b64
0000000000015bc8         dd         2 dup (peek_token.loc_10cc5-switch_table_15b64), peek_token.loc_10bb0-switch_table_15b64, 16 dup (peek_token.loc_10cc5-switch_table_15b64), peek_token.loc_10b95-switch_table_15b64
0000000000015c18         dd         3 dup (peek_token.loc_10cc5-switch_table_15b64), peek_token.loc_10b7a-switch_table_15b64, 8 dup (peek_token.loc_10cc5-switch_table_15b64), peek_token.loc_10b58-switch_table_15b64
0000000000015c4c         dd         peek_token.loc_10cc5-switch_table_15b64, peek_token.loc_10b36-switch_table_15b64, 16 dup (peek_token.loc_10cc5-switch_table_15b64), peek_token.loc_10afd-switch_table_15b64
0000000000015c98         dd         3 dup (peek_token.loc_10cc5-switch_table_15b64), peek_token.loc_10ae2-switch_table_15b64, 3 dup (peek_token.loc_10cc5-switch_table_15b64), peek_token.loc_10ac4-switch_table_15b64
0000000000015cb8         dd         peek_token.loc_10aa9-switch_table_15b64, peek_token.loc_10b18-switch_table_15b64
0000000000015cc0         db  0xe0 ; '.'                                         ; DATA XREF=parse_expression+75
0000000000015cc1         db  0xb2 ; '.'
0000000000015cc2         db  0xff ; '.'
0000000000015cc3         db  0xff ; '.'
0000000000015cc4         db  0x6e ; 'n'
0000000000015cc5         db  0xbc ; '.'
0000000000015cc6         db  0xff ; '.'
0000000000015cc7         db  0xff ; '.'
0000000000015cc8         db  0xe0 ; '.'
0000000000015cc9         db  0xb2 ; '.'
0000000000015cca         db  0xff ; '.'
0000000000015ccb         db  0xff ; '.'
0000000000015ccc         db  0xe0 ; '.'
0000000000015ccd         db  0xb2 ; '.'
0000000000015cce         db  0xff ; '.'
0000000000015ccf         db  0xff ; '.'
0000000000015cd0         db  0xbf ; '.'
0000000000015cd1         db  0xbb ; '.'
0000000000015cd2         db  0xff ; '.'
0000000000015cd3         db  0xff ; '.'
0000000000015cd4         db  0x29 ; ')'
0000000000015cd5         db  0xbc ; '.'
0000000000015cd6         db  0xff ; '.'
0000000000015cd7         db  0xff ; '.'
0000000000015cd8         db  0xe0 ; '.'
0000000000015cd9         db  0xb2 ; '.'
0000000000015cda         db  0xff ; '.'
0000000000015cdb         db  0xff ; '.'
0000000000015cdc         db  0xe0 ; '.'
0000000000015cdd         db  0xb2 ; '.'
0000000000015cde         db  0xff ; '.'
0000000000015cdf         db  0xff ; '.'
0000000000015ce0         db  0x41 ; 'A'
0000000000015ce1         db  0xb2 ; '.'
0000000000015ce2         db  0xff ; '.'
0000000000015ce3         db  0xff ; '.'
0000000000015ce4         db  0x58 ; 'X'
0000000000015ce5         db  0xbd ; '.'
0000000000015ce6         db  0xff ; '.'
0000000000015ce7         db  0xff ; '.'
0000000000015ce8         db  0xe0 ; '.'
0000000000015ce9         db  0xb2 ; '.'
0000000000015cea         db  0xff ; '.'
0000000000015ceb         db  0xff ; '.'
0000000000015cec         db  0x2d ; '-'
0000000000015ced         db  0xb3 ; '.'
0000000000015cee         db  0xff ; '.'
0000000000015cef         db  0xff ; '.'
0000000000015cf0         db  0xa0 ; '.'
0000000000015cf1         db  0xb8 ; '.'
0000000000015cf2         db  0xff ; '.'
0000000000015cf3         db  0xff ; '.'
0000000000015cf4         db  0xe0 ; '.'
0000000000015cf5         db  0xb2 ; '.'
0000000000015cf6         db  0xff ; '.'
0000000000015cf7         db  0xff ; '.'
0000000000015cf8         db  0xe0 ; '.'
0000000000015cf9         db  0xb2 ; '.'
0000000000015cfa         db  0xff ; '.'
0000000000015cfb         db  0xff ; '.'
0000000000015cfc         db  0xe0 ; '.'
0000000000015cfd         db  0xb2 ; '.'
0000000000015cfe         db  0xff ; '.'
0000000000015cff         db  0xff ; '.'
0000000000015d00         db  0xe0 ; '.'
0000000000015d01         db  0xb2 ; '.'
0000000000015d02         db  0xff ; '.'
0000000000015d03         db  0xff ; '.'
0000000000015d04         db  0xe0 ; '.'
0000000000015d05         db  0xb2 ; '.'
0000000000015d06         db  0xff ; '.'
0000000000015d07         db  0xff ; '.'
0000000000015d08         db  0x2d ; '-'
0000000000015d09         db  0xb3 ; '.'
0000000000015d0a         db  0xff ; '.'
0000000000015d0b         db  0xff ; '.'
0000000000015d0c         db  0x2d ; '-'
0000000000015d0d         db  0xb3 ; '.'
0000000000015d0e         db  0xff ; '.'
0000000000015d0f         db  0xff ; '.'
0000000000015d10         db  0xe0 ; '.'
0000000000015d11         db  0xb9 ; '.'
0000000000015d12         db  0xff ; '.'
0000000000015d13         db  0xff ; '.'
0000000000015d14         db  0xe0 ; '.'
0000000000015d15         db  0xb2 ; '.'
0000000000015d16         db  0xff ; '.'
0000000000015d17         db  0xff ; '.'
0000000000015d18         db  0xe0 ; '.'
0000000000015d19         db  0xb2 ; '.'
0000000000015d1a         db  0xff ; '.'
0000000000015d1b         db  0xff ; '.'
0000000000015d1c         db  0x1e ; '.'
0000000000015d1d         db  0xb3 ; '.'
0000000000015d1e         db  0xff ; '.'
0000000000015d1f         db  0xff ; '.'
0000000000015d20         db  0x4b ; 'K'
0000000000015d21         db  0xb3 ; '.'
0000000000015d22         db  0xff ; '.'
0000000000015d23         db  0xff ; '.'
0000000000015d24         db  0xe0 ; '.'
0000000000015d25         db  0xb2 ; '.'
0000000000015d26         db  0xff ; '.'
0000000000015d27         db  0xff ; '.'
0000000000015d28         db  0xe0 ; '.'
0000000000015d29         db  0xb2 ; '.'
0000000000015d2a         db  0xff ; '.'
0000000000015d2b         db  0xff ; '.'
0000000000015d2c         db  0xe0 ; '.'
0000000000015d2d         db  0xb2 ; '.'
0000000000015d2e         db  0xff ; '.'
0000000000015d2f         db  0xff ; '.'
0000000000015d30         db  0xe0 ; '.'
0000000000015d31         db  0xb2 ; '.'
0000000000015d32         db  0xff ; '.'
0000000000015d33         db  0xff ; '.'
0000000000015d34         db  0xe0 ; '.'
0000000000015d35         db  0xb2 ; '.'
0000000000015d36         db  0xff ; '.'
0000000000015d37         db  0xff ; '.'
0000000000015d38         db  0xe0 ; '.'
0000000000015d39         db  0xb2 ; '.'
0000000000015d3a         db  0xff ; '.'
0000000000015d3b         db  0xff ; '.'
0000000000015d3c         db  0xe0 ; '.'
0000000000015d3d         db  0xb2 ; '.'
0000000000015d3e         db  0xff ; '.'
0000000000015d3f         db  0xff ; '.'
0000000000015d40         db  0x98 ; '.'
0000000000015d41         db  0xbb ; '.'
0000000000015d42         db  0xff ; '.'
0000000000015d43         db  0xff ; '.'
0000000000015d44         db  0x98 ; '.'
0000000000015d45         db  0xbb ; '.'
0000000000015d46         db  0xff ; '.'
0000000000015d47         db  0xff ; '.'
0000000000015d48         db  0x48 ; 'H'
0000000000015d49         db  0xbb ; '.'
0000000000015d4a         db  0xff ; '.'
0000000000015d4b         db  0xff ; '.'
0000000000015d4c         db  0x48 ; 'H'
0000000000015d4d         db  0xbb ; '.'
0000000000015d4e         db  0xff ; '.'
0000000000015d4f         db  0xff ; '.'
0000000000015d50         db  0xc3 ; '.'
0000000000015d51         db  0xbd ; '.'
0000000000015d52         db  0xff ; '.'
0000000000015d53         db  0xff ; '.'
                     switch_table_15d54:        // switch_table
0000000000015d54         dd         sub_116a0.loc_11b71-switch_table_15d54, sub_116a0.loc_11b47-switch_table_15d54, sub_116a0.loc_11afd-switch_table_15d54, sub_116a0.loc_11ac5-switch_table_15d54 ; switch table used at 0x11806 containing 5 entries, DATA XREF=sub_116a0+139
0000000000015d64         dd         sub_116a0.loc_11b99-switch_table_15d54
0000000000015d68         db  0xc0 ; '.'                                         ; DATA XREF=re_compile_internal+1708
0000000000015d69         db  0xd0 ; '.'
0000000000015d6a         db  0xff ; '.'
0000000000015d6b         db  0xff ; '.'
0000000000015d6c         db  0xc0 ; '.'
0000000000015d6d         db  0xd0 ; '.'
0000000000015d6e         db  0xff ; '.'
0000000000015d6f         db  0xff ; '.'
0000000000015d70         db  0x78 ; 'x'
0000000000015d71         db  0xd2 ; '.'
0000000000015d72         db  0xff ; '.'
0000000000015d73         db  0xff ; '.'
0000000000015d74         db  0xc0 ; '.'
0000000000015d75         db  0xd0 ; '.'
0000000000015d76         db  0xff ; '.'
0000000000015d77         db  0xff ; '.'
0000000000015d78         db  0xa8 ; '.'
0000000000015d79         db  0xd2 ; '.'
0000000000015d7a         db  0xff ; '.'
0000000000015d7b         db  0xff ; '.'
0000000000015d7c         db  0xc0 ; '.'
0000000000015d7d         db  0xd0 ; '.'
0000000000015d7e         db  0xff ; '.'
0000000000015d7f         db  0xff ; '.'
0000000000015d80         db  0xc0 ; '.'
0000000000015d81         db  0xd0 ; '.'
0000000000015d82         db  0xff ; '.'
0000000000015d83         db  0xff ; '.'
0000000000015d84         db  0xc0 ; '.'
0000000000015d85         db  0xd0 ; '.'
0000000000015d86         db  0xff ; '.'
0000000000015d87         db  0xff ; '.'
0000000000015d88         db  0x20 ; ' '
0000000000015d89         db  0xd2 ; '.'
0000000000015d8a         db  0xff ; '.'
0000000000015d8b         db  0xff ; '.'
0000000000015d8c         db  0x20 ; ' '
0000000000015d8d         db  0xd2 ; '.'
0000000000015d8e         db  0xff ; '.'
0000000000015d8f         db  0xff ; '.'
0000000000015d90         db  0x5f ; '_'
0000000000015d91         db  0xd1 ; '.'
0000000000015d92         db  0xff ; '.'
0000000000015d93         db  0xff ; '.'
0000000000015d94         db  0x5f ; '_'
0000000000015d95         db  0xd1 ; '.'
0000000000015d96         db  0xff ; '.'
0000000000015d97         db  0xff ; '.'
0000000000015d98         db  0x20 ; ' '
0000000000015d99         db  0xd2 ; '.'
0000000000015d9a         db  0xff ; '.'
0000000000015d9b         db  0xff ; '.'
0000000000015d9c         db  0xc0 ; '.'
0000000000015d9d         db  0xd0 ; '.'
0000000000015d9e         db  0xff ; '.'
0000000000015d9f         db  0xff ; '.'
0000000000015da0         db  0xc0 ; '.'
0000000000015da1         db  0xd0 ; '.'
0000000000015da2         db  0xff ; '.'
0000000000015da3         db  0xff ; '.'
0000000000015da4         db  0xc0 ; '.'
0000000000015da5         db  0xd0 ; '.'
0000000000015da6         db  0xff ; '.'
0000000000015da7         db  0xff ; '.'
0000000000015da8         db  0xd9 ; '.'
0000000000015da9         db  0xd0 ; '.'
0000000000015daa         db  0xff ; '.'
0000000000015dab         db  0xff ; '.'
0000000000015dac         db  0x72 ; 'r'                                         ; DATA XREF=sub_13010+1071
0000000000015dad         db  0xd9 ; '.'
0000000000015dae         db  0xff ; '.'
0000000000015daf         db  0xff ; '.'
0000000000015db0         db  0x74 ; 't'
0000000000015db1         db  0xd8 ; '.'
0000000000015db2         db  0xff ; '.'
0000000000015db3         db  0xff ; '.'
0000000000015db4         db  0x20 ; ' '
0000000000015db5         db  0xd8 ; '.'
0000000000015db6         db  0xff ; '.'
0000000000015db7         db  0xff ; '.'
0000000000015db8         db  0x9c ; '.'
0000000000015db9         db  0xd8 ; '.'
0000000000015dba         db  0xff ; '.'
0000000000015dbb         db  0xff ; '.'
0000000000015dbc         db  0x20 ; ' '
0000000000015dbd         db  0xd8 ; '.'
0000000000015dbe         db  0xff ; '.'
0000000000015dbf         db  0xff ; '.'
0000000000015dc0         db  0x1d ; '.'
0000000000015dc1         db  0xd8 ; '.'
0000000000015dc2         db  0xff ; '.'
0000000000015dc3         db  0xff ; '.'
0000000000015dc4         db  0x92 ; '.'
0000000000015dc5         db  0xd4 ; '.'
0000000000015dc6         db  0xff ; '.'
0000000000015dc7         db  0xff ; '.'
0000000000015dc8         db  0x72 ; 'r'
0000000000015dc9         db  0xd9 ; '.'
0000000000015dca         db  0xff ; '.'
0000000000015dcb         db  0xff ; '.'
0000000000015dcc         db  0x20 ; ' '
0000000000015dcd         db  0xd8 ; '.'
0000000000015dce         db  0xff ; '.'
0000000000015dcf         db  0xff ; '.'
0000000000015dd0         db  0x20 ; ' '
0000000000015dd1         db  0xd8 ; '.'
0000000000015dd2         db  0xff ; '.'
0000000000015dd3         db  0xff ; '.'
0000000000015dd4         db  0x20 ; ' '
0000000000015dd5         db  0xd8 ; '.'
0000000000015dd6         db  0xff ; '.'
0000000000015dd7         db  0xff ; '.'
0000000000015dd8         db  0x20 ; ' '
0000000000015dd9         db  0xd8 ; '.'
0000000000015dda         db  0xff ; '.'
0000000000015ddb         db  0xff ; '.'
0000000000015ddc         db  0x7d ; '}'
0000000000015ddd         db  0xd8 ; '.'
0000000000015dde         db  0xff ; '.'
0000000000015ddf         db  0xff ; '.'
                     __PRETTY_FUNCTION__.7859:
0000000000015de0         db         "re_copy_regs", 0                           ; DATA XREF=re_search_stub+1089, re_search_stub+1120
0000000000015ded         align      16
                     __PRETTY_FUNCTION__.7847:
0000000000015df0         db         "re_search_stub", 0                         ; DATA XREF=re_search_stub+1058
0000000000015dff         align      512
                     __PRETTY_FUNCTION__.8040:
0000000000015e00         db         "pop_fail_stack", 0                         ; DATA XREF=pop_fail_stack.isra.25+117
0000000000015e0f         align      16
                     __PRETTY_FUNCTION__.7972:
0000000000015e10         db         "check_matching", 0                         ; DATA XREF=re_search_internal+4141, re_search_internal+5425
0000000000015e1f         align      32
                     __PRETTY_FUNCTION__.6981:
0000000000015e20         db         "link_nfa_nodes", 0                         ; DATA XREF=sub_12fe0+11, sub_136c0+99, sub_136c0+130, sub_136c0+161
0000000000015e2f         db  0x00 ; '.'
                     __PRETTY_FUNCTION__.7327:
0000000000015e30         db         "parse_bracket_exp", 0                      ; DATA XREF=sub_116a0+2810
0000000000015e42         db  0x00 ; '.'
0000000000015e43         db  0x00 ; '.'
0000000000015e44         db  0x00 ; '.'
0000000000015e45         db  0x00 ; '.'
0000000000015e46         db  0x00 ; '.'
0000000000015e47         db  0x00 ; '.'
0000000000015e48         db  0x00 ; '.'
0000000000015e49         db  0x00 ; '.'
0000000000015e4a         db  0x00 ; '.'
0000000000015e4b         db  0x00 ; '.'
0000000000015e4c         db  0x00 ; '.'
0000000000015e4d         db  0x00 ; '.'
0000000000015e4e         db  0x00 ; '.'
0000000000015e4f         db  0x00 ; '.'
0000000000015e50         db  0x00 ; '.'
0000000000015e51         db  0x00 ; '.'
0000000000015e52         db  0x00 ; '.'
0000000000015e53         db  0x00 ; '.'
0000000000015e54         db  0x00 ; '.'
0000000000015e55         db  0x00 ; '.'
0000000000015e56         db  0x00 ; '.'
0000000000015e57         db  0x00 ; '.'
0000000000015e58         db  0x00 ; '.'
0000000000015e59         db  0x00 ; '.'
0000000000015e5a         db  0x00 ; '.'
0000000000015e5b         db  0x00 ; '.'
0000000000015e5c         db  0x00 ; '.'
0000000000015e5d         db  0x00 ; '.'
0000000000015e5e         db  0x00 ; '.'
0000000000015e5f         db  0x00 ; '.'
                     utf8_sb_map:
0000000000015e60         db  0xff ; '.'                                         ; DATA XREF=free_dfa_content+305, re_compile_internal+435
0000000000015e61         db  0xff ; '.'
0000000000015e62         db  0xff ; '.'
0000000000015e63         db  0xff ; '.'
0000000000015e64         db  0xff ; '.'
0000000000015e65         db  0xff ; '.'
0000000000015e66         db  0xff ; '.'
0000000000015e67         db  0xff ; '.'
0000000000015e68         db  0xff ; '.'
0000000000015e69         db  0xff ; '.'
0000000000015e6a         db  0xff ; '.'
0000000000015e6b         db  0xff ; '.'
0000000000015e6c         db  0xff ; '.'
0000000000015e6d         db  0xff ; '.'
0000000000015e6e         db  0xff ; '.'
0000000000015e6f         db  0xff ; '.'
0000000000015e70         db  0x00 ; '.'
0000000000015e71         db  0x00 ; '.'
0000000000015e72         db  0x00 ; '.'
0000000000015e73         db  0x00 ; '.'
0000000000015e74         db  0x00 ; '.'
0000000000015e75         db  0x00 ; '.'
0000000000015e76         db  0x00 ; '.'
0000000000015e77         db  0x00 ; '.'
0000000000015e78         db  0x00 ; '.'
0000000000015e79         db  0x00 ; '.'
0000000000015e7a         db  0x00 ; '.'
0000000000015e7b         db  0x00 ; '.'
0000000000015e7c         db  0x00 ; '.'
0000000000015e7d         db  0x00 ; '.'
0000000000015e7e         db  0x00 ; '.'
0000000000015e7f         db  0x00 ; '.'
                     __re_error_msgid_idx:
0000000000015e80         db  0x00 ; '.'                                         ; DATA XREF=rpl_re_compile_pattern+62, rpl_regerror+15
0000000000015e81         db  0x00 ; '.'
0000000000015e82         db  0x00 ; '.'
0000000000015e83         db  0x00 ; '.'
0000000000015e84         db  0x00 ; '.'
0000000000015e85         db  0x00 ; '.'
0000000000015e86         db  0x00 ; '.'
0000000000015e87         db  0x00 ; '.'
0000000000015e88         db  0x08 ; '.'
0000000000015e89         db  0x00 ; '.'
0000000000015e8a         db  0x00 ; '.'
0000000000015e8b         db  0x00 ; '.'
0000000000015e8c         db  0x00 ; '.'
0000000000015e8d         db  0x00 ; '.'
0000000000015e8e         db  0x00 ; '.'
0000000000015e8f         db  0x00 ; '.'
0000000000015e90         db  0x11 ; '.'
0000000000015e91         db  0x00 ; '.'
0000000000015e92         db  0x00 ; '.'
0000000000015e93         db  0x00 ; '.'
0000000000015e94         db  0x00 ; '.'
0000000000015e95         db  0x00 ; '.'
0000000000015e96         db  0x00 ; '.'
0000000000015e97         db  0x00 ; '.'
0000000000015e98         db  0x2c ; ','
0000000000015e99         db  0x00 ; '.'
0000000000015e9a         db  0x00 ; '.'
0000000000015e9b         db  0x00 ; '.'
0000000000015e9c         db  0x00 ; '.'
0000000000015e9d         db  0x00 ; '.'
0000000000015e9e         db  0x00 ; '.'
0000000000015e9f         db  0x00 ; '.'
0000000000015ea0         db  0x48 ; 'H'
0000000000015ea1         db  0x00 ; '.'
0000000000015ea2         db  0x00 ; '.'
0000000000015ea3         db  0x00 ; '.'
0000000000015ea4         db  0x00 ; '.'
0000000000015ea5         db  0x00 ; '.'
0000000000015ea6         db  0x00 ; '.'
0000000000015ea7         db  0x00 ; '.'
0000000000015ea8         db  0x65 ; 'e'
0000000000015ea9         db  0x00 ; '.'
0000000000015eaa         db  0x00 ; '.'
0000000000015eab         db  0x00 ; '.'
0000000000015eac         db  0x00 ; '.'
0000000000015ead         db  0x00 ; '.'
0000000000015eae         db  0x00 ; '.'
0000000000015eaf         db  0x00 ; '.'
0000000000015eb0         db  0x78 ; 'x'
0000000000015eb1         db  0x00 ; '.'
0000000000015eb2         db  0x00 ; '.'
0000000000015eb3         db  0x00 ; '.'
0000000000015eb4         db  0x00 ; '.'
0000000000015eb5         db  0x00 ; '.'
0000000000015eb6         db  0x00 ; '.'
0000000000015eb7         db  0x00 ; '.'
0000000000015eb8         db  0x8f ; '.'
0000000000015eb9         db  0x00 ; '.'
0000000000015eba         db  0x00 ; '.'
0000000000015ebb         db  0x00 ; '.'
0000000000015ebc         db  0x00 ; '.'
0000000000015ebd         db  0x00 ; '.'
0000000000015ebe         db  0x00 ; '.'
0000000000015ebf         db  0x00 ; '.'
0000000000015ec0         db  0xae ; '.'
0000000000015ec1         db  0x00 ; '.'
0000000000015ec2         db  0x00 ; '.'
0000000000015ec3         db  0x00 ; '.'
0000000000015ec4         db  0x00 ; '.'
0000000000015ec5         db  0x00 ; '.'
0000000000015ec6         db  0x00 ; '.'
0000000000015ec7         db  0x00 ; '.'
0000000000015ec8         db  0xc0 ; '.'
0000000000015ec9         db  0x00 ; '.'
0000000000015eca         db  0x00 ; '.'
0000000000015ecb         db  0x00 ; '.'
0000000000015ecc         db  0x00 ; '.'
0000000000015ecd         db  0x00 ; '.'
0000000000015ece         db  0x00 ; '.'
0000000000015ecf         db  0x00 ; '.'
0000000000015ed0         db  0xcd ; '.'
0000000000015ed1         db  0x00 ; '.'
0000000000015ed2         db  0x00 ; '.'
0000000000015ed3         db  0x00 ; '.'
0000000000015ed4         db  0x00 ; '.'
0000000000015ed5         db  0x00 ; '.'
0000000000015ed6         db  0x00 ; '.'
0000000000015ed7         db  0x00 ; '.'
0000000000015ed8         db  0xe5 ; '.'
0000000000015ed9         db  0x00 ; '.'
0000000000015eda         db  0x00 ; '.'
0000000000015edb         db  0x00 ; '.'
0000000000015edc         db  0x00 ; '.'
0000000000015edd         db  0x00 ; '.'
0000000000015ede         db  0x00 ; '.'
0000000000015edf         db  0x00 ; '.'
0000000000015ee0         db  0xf7 ; '.'
0000000000015ee1         db  0x00 ; '.'
0000000000015ee2         db  0x00 ; '.'
0000000000015ee3         db  0x00 ; '.'
0000000000015ee4         db  0x00 ; '.'
0000000000015ee5         db  0x00 ; '.'
0000000000015ee6         db  0x00 ; '.'
0000000000015ee7         db  0x00 ; '.'
0000000000015ee8         db  0x08 ; '.'
0000000000015ee9         db  0x01 ; '.'
0000000000015eea         db  0x00 ; '.'
0000000000015eeb         db  0x00 ; '.'
0000000000015eec         db  0x00 ; '.'
0000000000015eed         db  0x00 ; '.'
0000000000015eee         db  0x00 ; '.'
0000000000015eef         db  0x00 ; '.'
0000000000015ef0         db  0x2d ; '-'
0000000000015ef1         db  0x01 ; '.'
0000000000015ef2         db  0x00 ; '.'
0000000000015ef3         db  0x00 ; '.'
0000000000015ef4         db  0x00 ; '.'
0000000000015ef5         db  0x00 ; '.'
0000000000015ef6         db  0x00 ; '.'
0000000000015ef7         db  0x00 ; '.'
0000000000015ef8         db  0x51 ; 'Q'
0000000000015ef9         db  0x01 ; '.'
0000000000015efa         db  0x00 ; '.'
0000000000015efb         db  0x00 ; '.'
0000000000015efc         db  0x00 ; '.'
0000000000015efd         db  0x00 ; '.'
0000000000015efe         db  0x00 ; '.'
0000000000015eff         db  0x00 ; '.'
0000000000015f00         db  0x6c ; 'l'
0000000000015f01         db  0x01 ; '.'
0000000000015f02         db  0x00 ; '.'
0000000000015f03         db  0x00 ; '.'
0000000000015f04         db  0x00 ; '.'
0000000000015f05         db  0x00 ; '.'
0000000000015f06         db  0x00 ; '.'
0000000000015f07         db  0x00 ; '.'
0000000000015f08         db  0x00 ; '.'
0000000000015f09         db  0x00 ; '.'
0000000000015f0a         db  0x00 ; '.'
0000000000015f0b         db  0x00 ; '.'
0000000000015f0c         db  0x00 ; '.'
0000000000015f0d         db  0x00 ; '.'
0000000000015f0e         db  0x00 ; '.'
0000000000015f0f         db  0x00 ; '.'
0000000000015f10         db  0x00 ; '.'
0000000000015f11         db  0x00 ; '.'
0000000000015f12         db  0x00 ; '.'
0000000000015f13         db  0x00 ; '.'
0000000000015f14         db  0x00 ; '.'
0000000000015f15         db  0x00 ; '.'
0000000000015f16         db  0x00 ; '.'
0000000000015f17         db  0x00 ; '.'
0000000000015f18         db  0x00 ; '.'
0000000000015f19         db  0x00 ; '.'
0000000000015f1a         db  0x00 ; '.'
0000000000015f1b         db  0x00 ; '.'
0000000000015f1c         db  0x00 ; '.'
0000000000015f1d         db  0x00 ; '.'
0000000000015f1e         db  0x00 ; '.'
0000000000015f1f         db  0x00 ; '.'
                     __re_error_msgid:
0000000000015f20         db         "Success", 0                                ; DATA XREF=rpl_re_compile_pattern+71, rpl_regerror+25
0000000000015f28         db  0x4e ; 'N'
0000000000015f29         db  0x6f ; 'o'
0000000000015f2a         db  0x20 ; ' '
0000000000015f2b         db  0x6d ; 'm'
0000000000015f2c         db  0x61 ; 'a'
0000000000015f2d         db  0x74 ; 't'
0000000000015f2e         db  0x63 ; 'c'
0000000000015f2f         db  0x68 ; 'h'
0000000000015f30         db  0x00 ; '.'
0000000000015f31         db  0x49 ; 'I'
0000000000015f32         db  0x6e ; 'n'
0000000000015f33         db  0x76 ; 'v'
0000000000015f34         db  0x61 ; 'a'
0000000000015f35         db  0x6c ; 'l'
0000000000015f36         db  0x69 ; 'i'
0000000000015f37         db  0x64 ; 'd'
0000000000015f38         db  0x20 ; ' '
0000000000015f39         db  0x72 ; 'r'
0000000000015f3a         db  0x65 ; 'e'
0000000000015f3b         db  0x67 ; 'g'
0000000000015f3c         db  0x75 ; 'u'
0000000000015f3d         db  0x6c ; 'l'
0000000000015f3e         db  0x61 ; 'a'
0000000000015f3f         db  0x72 ; 'r'
0000000000015f40         db  0x20 ; ' '
0000000000015f41         db  0x65 ; 'e'
0000000000015f42         db  0x78 ; 'x'
0000000000015f43         db  0x70 ; 'p'
0000000000015f44         db  0x72 ; 'r'
0000000000015f45         db  0x65 ; 'e'
0000000000015f46         db  0x73 ; 's'
0000000000015f47         db  0x73 ; 's'
0000000000015f48         db  0x69 ; 'i'
0000000000015f49         db  0x6f ; 'o'
0000000000015f4a         db  0x6e ; 'n'
0000000000015f4b         db  0x00 ; '.'
0000000000015f4c         db  0x49 ; 'I'
0000000000015f4d         db  0x6e ; 'n'
0000000000015f4e         db  0x76 ; 'v'
0000000000015f4f         db  0x61 ; 'a'
0000000000015f50         db  0x6c ; 'l'
0000000000015f51         db  0x69 ; 'i'
0000000000015f52         db  0x64 ; 'd'
0000000000015f53         db  0x20 ; ' '
0000000000015f54         db  0x63 ; 'c'
0000000000015f55         db  0x6f ; 'o'
0000000000015f56         db  0x6c ; 'l'
0000000000015f57         db  0x6c ; 'l'
0000000000015f58         db  0x61 ; 'a'
0000000000015f59         db  0x74 ; 't'
0000000000015f5a         db  0x69 ; 'i'
0000000000015f5b         db  0x6f ; 'o'
0000000000015f5c         db  0x6e ; 'n'
0000000000015f5d         db  0x20 ; ' '
0000000000015f5e         db  0x63 ; 'c'
0000000000015f5f         db  0x68 ; 'h'
0000000000015f60         db  0x61 ; 'a'
0000000000015f61         db  0x72 ; 'r'
0000000000015f62         db  0x61 ; 'a'
0000000000015f63         db  0x63 ; 'c'
0000000000015f64         db  0x74 ; 't'
0000000000015f65         db  0x65 ; 'e'
0000000000015f66         db  0x72 ; 'r'
0000000000015f67         db  0x00 ; '.'
0000000000015f68         db  0x49 ; 'I'
0000000000015f69         db  0x6e ; 'n'
0000000000015f6a         db  0x76 ; 'v'
0000000000015f6b         db  0x61 ; 'a'
0000000000015f6c         db  0x6c ; 'l'
0000000000015f6d         db  0x69 ; 'i'
0000000000015f6e         db  0x64 ; 'd'
0000000000015f6f         db  0x20 ; ' '
0000000000015f70         db  0x63 ; 'c'
0000000000015f71         db  0x68 ; 'h'
0000000000015f72         db  0x61 ; 'a'
0000000000015f73         db  0x72 ; 'r'
0000000000015f74         db  0x61 ; 'a'
0000000000015f75         db  0x63 ; 'c'
0000000000015f76         db  0x74 ; 't'
0000000000015f77         db  0x65 ; 'e'
0000000000015f78         db  0x72 ; 'r'
0000000000015f79         db  0x20 ; ' '
0000000000015f7a         db  0x63 ; 'c'
0000000000015f7b         db  0x6c ; 'l'
0000000000015f7c         db  0x61 ; 'a'
0000000000015f7d         db  0x73 ; 's'
0000000000015f7e         db  0x73 ; 's'
0000000000015f7f         db  0x20 ; ' '
0000000000015f80         db  0x6e ; 'n'
0000000000015f81         db  0x61 ; 'a'
0000000000015f82         db  0x6d ; 'm'
0000000000015f83         db  0x65 ; 'e'
0000000000015f84         db  0x00 ; '.'
0000000000015f85         db  0x54 ; 'T'
0000000000015f86         db  0x72 ; 'r'
0000000000015f87         db  0x61 ; 'a'
0000000000015f88         db  0x69 ; 'i'
0000000000015f89         db  0x6c ; 'l'
0000000000015f8a         db  0x69 ; 'i'
0000000000015f8b         db  0x6e ; 'n'
0000000000015f8c         db  0x67 ; 'g'
0000000000015f8d         db  0x20 ; ' '
0000000000015f8e         db  0x62 ; 'b'
0000000000015f8f         db  0x61 ; 'a'
0000000000015f90         db  0x63 ; 'c'
0000000000015f91         db  0x6b ; 'k'
0000000000015f92         db  0x73 ; 's'
0000000000015f93         db  0x6c ; 'l'
0000000000015f94         db  0x61 ; 'a'
0000000000015f95         db  0x73 ; 's'
0000000000015f96         db  0x68 ; 'h'
0000000000015f97         db  0x00 ; '.'
0000000000015f98         db  0x49 ; 'I'
0000000000015f99         db  0x6e ; 'n'
0000000000015f9a         db  0x76 ; 'v'
0000000000015f9b         db  0x61 ; 'a'
0000000000015f9c         db  0x6c ; 'l'
0000000000015f9d         db  0x69 ; 'i'
0000000000015f9e         db  0x64 ; 'd'
0000000000015f9f         db  0x20 ; ' '
0000000000015fa0         db  0x62 ; 'b'
0000000000015fa1         db  0x61 ; 'a'
0000000000015fa2         db  0x63 ; 'c'
0000000000015fa3         db  0x6b ; 'k'
0000000000015fa4         db  0x20 ; ' '
0000000000015fa5         db  0x72 ; 'r'
0000000000015fa6         db  0x65 ; 'e'
0000000000015fa7         db  0x66 ; 'f'
0000000000015fa8         db  0x65 ; 'e'
0000000000015fa9         db  0x72 ; 'r'
0000000000015faa         db  0x65 ; 'e'
0000000000015fab         db  0x6e ; 'n'
0000000000015fac         db  0x63 ; 'c'
0000000000015fad         db  0x65 ; 'e'
0000000000015fae         db  0x00 ; '.'
0000000000015faf         db  0x55 ; 'U'
0000000000015fb0         db  0x6e ; 'n'
0000000000015fb1         db  0x6d ; 'm'
0000000000015fb2         db  0x61 ; 'a'
0000000000015fb3         db  0x74 ; 't'
0000000000015fb4         db  0x63 ; 'c'
0000000000015fb5         db  0x68 ; 'h'
0000000000015fb6         db  0x65 ; 'e'
0000000000015fb7         db  0x64 ; 'd'
0000000000015fb8         db  0x20 ; ' '
0000000000015fb9         db  0x5b ; '['
0000000000015fba         db  0x2c ; ','
0000000000015fbb         db  0x20 ; ' '
0000000000015fbc         db  0x5b ; '['
0000000000015fbd         db  0x5e ; '^'
0000000000015fbe         db  0x2c ; ','
0000000000015fbf         db  0x20 ; ' '
0000000000015fc0         db  0x5b ; '['
0000000000015fc1         db  0x3a ; ':'
0000000000015fc2         db  0x2c ; ','
0000000000015fc3         db  0x20 ; ' '
0000000000015fc4         db  0x5b ; '['
0000000000015fc5         db  0x2e ; '.'
0000000000015fc6         db  0x2c ; ','
0000000000015fc7         db  0x20 ; ' '
0000000000015fc8         db  0x6f ; 'o'
0000000000015fc9         db  0x72 ; 'r'
0000000000015fca         db  0x20 ; ' '
0000000000015fcb         db  0x5b ; '['
0000000000015fcc         db  0x3d ; '='
0000000000015fcd         db  0x00 ; '.'
0000000000015fce         db  0x55 ; 'U'
0000000000015fcf         db  0x6e ; 'n'
0000000000015fd0         db  0x6d ; 'm'
0000000000015fd1         db  0x61 ; 'a'
0000000000015fd2         db  0x74 ; 't'
0000000000015fd3         db  0x63 ; 'c'
0000000000015fd4         db  0x68 ; 'h'
0000000000015fd5         db  0x65 ; 'e'
0000000000015fd6         db  0x64 ; 'd'
0000000000015fd7         db  0x20 ; ' '
0000000000015fd8         db  0x28 ; '('
0000000000015fd9         db  0x20 ; ' '
0000000000015fda         db  0x6f ; 'o'
0000000000015fdb         db  0x72 ; 'r'
0000000000015fdc         db  0x20 ; ' '
0000000000015fdd         db  0x5c ; '\'
0000000000015fde         db  0x28 ; '('
0000000000015fdf         db  0x00 ; '.'
0000000000015fe0         db  0x55 ; 'U'
0000000000015fe1         db  0x6e ; 'n'
0000000000015fe2         db  0x6d ; 'm'
0000000000015fe3         db  0x61 ; 'a'
0000000000015fe4         db  0x74 ; 't'
0000000000015fe5         db  0x63 ; 'c'
0000000000015fe6         db  0x68 ; 'h'
0000000000015fe7         db  0x65 ; 'e'
0000000000015fe8         db  0x64 ; 'd'
0000000000015fe9         db  0x20 ; ' '
0000000000015fea         db  0x5c ; '\'
0000000000015feb         db  0x7b ; '{'
0000000000015fec         db  0x00 ; '.'
0000000000015fed         db  0x49 ; 'I'
0000000000015fee         db  0x6e ; 'n'
0000000000015fef         db  0x76 ; 'v'
0000000000015ff0         db  0x61 ; 'a'
0000000000015ff1         db  0x6c ; 'l'
0000000000015ff2         db  0x69 ; 'i'
0000000000015ff3         db  0x64 ; 'd'
0000000000015ff4         db  0x20 ; ' '
0000000000015ff5         db  0x63 ; 'c'
0000000000015ff6         db  0x6f ; 'o'
0000000000015ff7         db  0x6e ; 'n'
0000000000015ff8         db  0x74 ; 't'
0000000000015ff9         db  0x65 ; 'e'
0000000000015ffa         db  0x6e ; 'n'
0000000000015ffb         db  0x74 ; 't'
0000000000015ffc         db  0x20 ; ' '
0000000000015ffd         db  0x6f ; 'o'
0000000000015ffe         db  0x66 ; 'f'
0000000000015fff         db  0x20 ; ' '
0000000000016000         db  0x5c ; '\'
0000000000016001         db  0x7b ; '{'
0000000000016002         db  0x5c ; '\'
0000000000016003         db  0x7d ; '}'
0000000000016004         db  0x00 ; '.'
0000000000016005         db  0x49 ; 'I'
0000000000016006         db  0x6e ; 'n'
0000000000016007         db  0x76 ; 'v'
0000000000016008         db  0x61 ; 'a'
0000000000016009         db  0x6c ; 'l'
000000000001600a         db  0x69 ; 'i'
000000000001600b         db  0x64 ; 'd'
000000000001600c         db  0x20 ; ' '
000000000001600d         db  0x72 ; 'r'
000000000001600e         db  0x61 ; 'a'
000000000001600f         db  0x6e ; 'n'
0000000000016010         db  0x67 ; 'g'
0000000000016011         db  0x65 ; 'e'
0000000000016012         db  0x20 ; ' '
0000000000016013         db  0x65 ; 'e'
0000000000016014         db  0x6e ; 'n'
0000000000016015         db  0x64 ; 'd'
0000000000016016         db  0x00 ; '.'
0000000000016017         db  0x4d ; 'M'
0000000000016018         db  0x65 ; 'e'
0000000000016019         db  0x6d ; 'm'
000000000001601a         db  0x6f ; 'o'
000000000001601b         db  0x72 ; 'r'
000000000001601c         db  0x79 ; 'y'
000000000001601d         db  0x20 ; ' '
000000000001601e         db  0x65 ; 'e'
000000000001601f         db  0x78 ; 'x'
0000000000016020         db  0x68 ; 'h'
0000000000016021         db  0x61 ; 'a'
0000000000016022         db  0x75 ; 'u'
0000000000016023         db  0x73 ; 's'
0000000000016024         db  0x74 ; 't'
0000000000016025         db  0x65 ; 'e'
0000000000016026         db  0x64 ; 'd'
0000000000016027         db  0x00 ; '.'
0000000000016028         db  0x49 ; 'I'
0000000000016029         db  0x6e ; 'n'
000000000001602a         db  0x76 ; 'v'
000000000001602b         db  0x61 ; 'a'
000000000001602c         db  0x6c ; 'l'
000000000001602d         db  0x69 ; 'i'
000000000001602e         db  0x64 ; 'd'
000000000001602f         db  0x20 ; ' '
0000000000016030         db  0x70 ; 'p'
0000000000016031         db  0x72 ; 'r'
0000000000016032         db  0x65 ; 'e'
0000000000016033         db  0x63 ; 'c'
0000000000016034         db  0x65 ; 'e'
0000000000016035         db  0x64 ; 'd'
0000000000016036         db  0x69 ; 'i'
0000000000016037         db  0x6e ; 'n'
0000000000016038         db  0x67 ; 'g'
0000000000016039         db  0x20 ; ' '
000000000001603a         db  0x72 ; 'r'
000000000001603b         db  0x65 ; 'e'
000000000001603c         db  0x67 ; 'g'
000000000001603d         db  0x75 ; 'u'
000000000001603e         db  0x6c ; 'l'
000000000001603f         db  0x61 ; 'a'
0000000000016040         db  0x72 ; 'r'
0000000000016041         db  0x20 ; ' '
0000000000016042         db  0x65 ; 'e'
0000000000016043         db  0x78 ; 'x'
0000000000016044         db  0x70 ; 'p'
0000000000016045         db  0x72 ; 'r'
0000000000016046         db  0x65 ; 'e'
0000000000016047         db  0x73 ; 's'
0000000000016048         db  0x73 ; 's'
0000000000016049         db  0x69 ; 'i'
000000000001604a         db  0x6f ; 'o'
000000000001604b         db  0x6e ; 'n'
000000000001604c         db  0x00 ; '.'
000000000001604d         db  0x50 ; 'P'
000000000001604e         db  0x72 ; 'r'
000000000001604f         db  0x65 ; 'e'
0000000000016050         db  0x6d ; 'm'
0000000000016051         db  0x61 ; 'a'
0000000000016052         db  0x74 ; 't'
0000000000016053         db  0x75 ; 'u'
0000000000016054         db  0x72 ; 'r'
0000000000016055         db  0x65 ; 'e'
0000000000016056         db  0x20 ; ' '
0000000000016057         db  0x65 ; 'e'
0000000000016058         db  0x6e ; 'n'
0000000000016059         db  0x64 ; 'd'
000000000001605a         db  0x20 ; ' '
000000000001605b         db  0x6f ; 'o'
000000000001605c         db  0x66 ; 'f'
000000000001605d         db  0x20 ; ' '
000000000001605e         db  0x72 ; 'r'
000000000001605f         db  0x65 ; 'e'
0000000000016060         db  0x67 ; 'g'
0000000000016061         db  0x75 ; 'u'
0000000000016062         db  0x6c ; 'l'
0000000000016063         db  0x61 ; 'a'
0000000000016064         db  0x72 ; 'r'
0000000000016065         db  0x20 ; ' '
0000000000016066         db  0x65 ; 'e'
0000000000016067         db  0x78 ; 'x'
0000000000016068         db  0x70 ; 'p'
0000000000016069         db  0x72 ; 'r'
000000000001606a         db  0x65 ; 'e'
000000000001606b         db  0x73 ; 's'
000000000001606c         db  0x73 ; 's'
000000000001606d         db  0x69 ; 'i'
000000000001606e         db  0x6f ; 'o'
000000000001606f         db  0x6e ; 'n'
0000000000016070         db  0x00 ; '.'
0000000000016071         db  0x52 ; 'R'
0000000000016072         db  0x65 ; 'e'
0000000000016073         db  0x67 ; 'g'
0000000000016074         db  0x75 ; 'u'
0000000000016075         db  0x6c ; 'l'
0000000000016076         db  0x61 ; 'a'
0000000000016077         db  0x72 ; 'r'
0000000000016078         db  0x20 ; ' '
0000000000016079         db  0x65 ; 'e'
000000000001607a         db  0x78 ; 'x'
000000000001607b         db  0x70 ; 'p'
000000000001607c         db  0x72 ; 'r'
000000000001607d         db  0x65 ; 'e'
000000000001607e         db  0x73 ; 's'
000000000001607f         db  0x73 ; 's'
0000000000016080         db  0x69 ; 'i'
0000000000016081         db  0x6f ; 'o'
0000000000016082         db  0x6e ; 'n'
0000000000016083         db  0x20 ; ' '
0000000000016084         db  0x74 ; 't'
0000000000016085         db  0x6f ; 'o'
0000000000016086         db  0x6f ; 'o'
0000000000016087         db  0x20 ; ' '
0000000000016088         db  0x62 ; 'b'
0000000000016089         db  0x69 ; 'i'
000000000001608a         db  0x67 ; 'g'
000000000001608b         db  0x00 ; '.'
000000000001608c         db  0x55 ; 'U'
000000000001608d         db  0x6e ; 'n'
000000000001608e         db  0x6d ; 'm'
000000000001608f         db  0x61 ; 'a'
0000000000016090         db  0x74 ; 't'
0000000000016091         db  0x63 ; 'c'
0000000000016092         db  0x68 ; 'h'
0000000000016093         db  0x65 ; 'e'
0000000000016094         db  0x64 ; 'd'
0000000000016095         db  0x20 ; ' '
0000000000016096         db  0x29 ; ')'
0000000000016097         db  0x20 ; ' '
0000000000016098         db  0x6f ; 'o'
0000000000016099         db  0x72 ; 'r'
000000000001609a         db  0x20 ; ' '
000000000001609b         db  0x5c ; '\'
000000000001609c         db  0x29 ; ')'
000000000001609d         db  0x00 ; '.'
000000000001609e         db  0x00 ; '.'
000000000001609f         db  0x00 ; '.'
00000000000160a0         dq         2 dup (7.7486e-304)                         ; DATA XREF=re_compile_fastmap_iter.isra.30+1044, re_compile_fastmap_iter.isra.30+1204
00000000000160b0         db  0x43 ; 'C'                                         ; DATA XREF=hard_locale+24
00000000000160b1         db  0x00 ; '.'
                     aPosix:
00000000000160b2         db         "POSIX", 0                                  ; DATA XREF=hard_locale+64
                     aAscii:
00000000000160b8         db         "ASCII", 0                                  ; DATA XREF=locale_charset+22, locale_charset+48
00000000000160be         db  0x00 ; '.'
00000000000160bf         db  0x00 ; '.'


        ; Section .eh_frame_hdr
        ; Range: [0x160c0; 0x16634[ (1396 bytes)
        ; File offset : [90304; 91700[ (1396 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

00000000000160c0         db  0x01 ; '.'
00000000000160c1         db  0x1b ; '.'
00000000000160c2         db  0x03 ; '.'
00000000000160c3         db  0x3b ; ';'
00000000000160c4         db  0x74 ; 't'
00000000000160c5         db  0x05 ; '.'
00000000000160c6         db  0x00 ; '.'
00000000000160c7         db  0x00 ; '.'
00000000000160c8         db  0xad ; '.'
00000000000160c9         db  0x00 ; '.'
00000000000160ca         db  0x00 ; '.'
00000000000160cb         db  0x00 ; '.'
00000000000160cc         db  0xe0 ; '.'
00000000000160cd         db  0xb7 ; '.'
00000000000160ce         db  0xfe ; '.'
00000000000160cf         db  0xff ; '.'
00000000000160d0         db  0xc0 ; '.'
00000000000160d1         db  0x05 ; '.'
00000000000160d2         db  0x00 ; '.'
00000000000160d3         db  0x00 ; '.'
00000000000160d4         db  0xc0 ; '.'
00000000000160d5         db  0xbb ; '.'
00000000000160d6         db  0xfe ; '.'
00000000000160d7         db  0xff ; '.'
00000000000160d8         db  0xe8 ; '.'
00000000000160d9         db  0x05 ; '.'
00000000000160da         db  0x00 ; '.'
00000000000160db         db  0x00 ; '.'
00000000000160dc         db  0xd0 ; '.'
00000000000160dd         db  0xbb ; '.'
00000000000160de         db  0xfe ; '.'
00000000000160df         db  0xff ; '.'
00000000000160e0         db  0xfc ; '.'
00000000000160e1         db  0x06 ; '.'
00000000000160e2         db  0x00 ; '.'
00000000000160e3         db  0x00 ; '.'
00000000000160e4         db  0x50 ; 'P'
00000000000160e5         db  0xc2 ; '.'
00000000000160e6         db  0xfe ; '.'
00000000000160e7         db  0xff ; '.'
00000000000160e8         db  0x90 ; '.'
00000000000160e9         db  0x05 ; '.'
00000000000160ea         db  0x00 ; '.'
00000000000160eb         db  0x00 ; '.'
00000000000160ec         db  0x60 ; '`'
00000000000160ed         db  0xc3 ; '.'
00000000000160ee         db  0xfe ; '.'
00000000000160ef         db  0xff ; '.'
00000000000160f0         db  0x00 ; '.'
00000000000160f1         db  0x06 ; '.'
00000000000160f2         db  0x00 ; '.'
00000000000160f3         db  0x00 ; '.'
00000000000160f4         db  0x20 ; ' '
00000000000160f5         db  0xc4 ; '.'
00000000000160f6         db  0xfe ; '.'
00000000000160f7         db  0xff ; '.'
00000000000160f8         db  0x34 ; '4'
00000000000160f9         db  0x06 ; '.'
00000000000160fa         db  0x00 ; '.'
00000000000160fb         db  0x00 ; '.'
00000000000160fc         db  0xa0 ; '.'
00000000000160fd         db  0xc4 ; '.'
00000000000160fe         db  0xfe ; '.'
00000000000160ff         db  0xff ; '.'
0000000000016100         db  0x50 ; 'P'
0000000000016101         db  0x06 ; '.'
0000000000016102         db  0x00 ; '.'
0000000000016103         db  0x00 ; '.'
0000000000016104         db  0xb0 ; '.'
0000000000016105         db  0xc8 ; '.'
0000000000016106         db  0xfe ; '.'
0000000000016107         db  0xff ; '.'
0000000000016108         db  0xd0 ; '.'
0000000000016109         db  0x06 ; '.'
000000000001610a         db  0x00 ; '.'
000000000001610b         db  0x00 ; '.'
000000000001610c         db  0x20 ; ' '
000000000001610d         db  0xcd ; '.'
000000000001610e         db  0xfe ; '.'
000000000001610f         db  0xff ; '.'
0000000000016110         db  0x58 ; 'X'
0000000000016111         db  0x07 ; '.'
0000000000016112         db  0x00 ; '.'
0000000000016113         db  0x00 ; '.'
0000000000016114         db  0x30 ; '0'
0000000000016115         db  0xcd ; '.'
0000000000016116         db  0xfe ; '.'
0000000000016117         db  0xff ; '.'
0000000000016118         db  0x6c ; 'l'
0000000000016119         db  0x07 ; '.'
000000000001611a         db  0x00 ; '.'
000000000001611b         db  0x00 ; '.'
000000000001611c         db  0x40 ; '@'
000000000001611d         db  0xcd ; '.'
000000000001611e         db  0xfe ; '.'
000000000001611f         db  0xff ; '.'
0000000000016120         db  0x80 ; '.'
0000000000016121         db  0x07 ; '.'
0000000000016122         db  0x00 ; '.'
0000000000016123         db  0x00 ; '.'
0000000000016124         db  0xf0 ; '.'
0000000000016125         db  0xcd ; '.'
0000000000016126         db  0xfe ; '.'
0000000000016127         db  0xff ; '.'
0000000000016128         db  0xb0 ; '.'
0000000000016129         db  0x07 ; '.'
000000000001612a         db  0x00 ; '.'
000000000001612b         db  0x00 ; '.'
000000000001612c         db  0x00 ; '.'
000000000001612d         db  0xce ; '.'
000000000001612e         db  0xfe ; '.'
000000000001612f         db  0xff ; '.'
0000000000016130         db  0xc4 ; '.'
0000000000016131         db  0x07 ; '.'
0000000000016132         db  0x00 ; '.'
0000000000016133         db  0x00 ; '.'
0000000000016134         db  0x30 ; '0'
0000000000016135         db  0xce ; '.'
0000000000016136         db  0xfe ; '.'
0000000000016137         db  0xff ; '.'
0000000000016138         db  0xe0 ; '.'
0000000000016139         db  0x07 ; '.'
000000000001613a         db  0x00 ; '.'
000000000001613b         db  0x00 ; '.'
000000000001613c         db  0x40 ; '@'
000000000001613d         db  0xce ; '.'
000000000001613e         db  0xfe ; '.'
000000000001613f         db  0xff ; '.'
0000000000016140         db  0xf4 ; '.'
0000000000016141         db  0x07 ; '.'
0000000000016142         db  0x00 ; '.'
0000000000016143         db  0x00 ; '.'
0000000000016144         db  0x50 ; 'P'
0000000000016145         db  0xcf ; '.'
0000000000016146         db  0xfe ; '.'
0000000000016147         db  0xff ; '.'
0000000000016148         db  0x58 ; 'X'
0000000000016149         db  0x08 ; '.'
000000000001614a         db  0x00 ; '.'
000000000001614b         db  0x00 ; '.'
000000000001614c         db  0x60 ; '`'
000000000001614d         db  0xcf ; '.'
000000000001614e         db  0xfe ; '.'
000000000001614f         db  0xff ; '.'
0000000000016150         db  0x6c ; 'l'
0000000000016151         db  0x08 ; '.'
0000000000016152         db  0x00 ; '.'
0000000000016153         db  0x00 ; '.'
0000000000016154         db  0x70 ; 'p'
0000000000016155         db  0xcf ; '.'
0000000000016156         db  0xfe ; '.'
0000000000016157         db  0xff ; '.'
0000000000016158         db  0x80 ; '.'
0000000000016159         db  0x08 ; '.'
000000000001615a         db  0x00 ; '.'
000000000001615b         db  0x00 ; '.'
000000000001615c         db  0x10 ; '.'
000000000001615d         db  0xd0 ; '.'
000000000001615e         db  0xfe ; '.'
000000000001615f         db  0xff ; '.'
0000000000016160         db  0xa0 ; '.'
0000000000016161         db  0x08 ; '.'
0000000000016162         db  0x00 ; '.'
0000000000016163         db  0x00 ; '.'
0000000000016164         db  0x00 ; '.'
0000000000016165         db  0xd1 ; '.'
0000000000016166         db  0xfe ; '.'
0000000000016167         db  0xff ; '.'
0000000000016168         db  0xe4 ; '.'
0000000000016169         db  0x08 ; '.'
000000000001616a         db  0x00 ; '.'
000000000001616b         db  0x00 ; '.'
000000000001616c         db  0x40 ; '@'
000000000001616d         db  0xe3 ; '.'
000000000001616e         db  0xfe ; '.'
000000000001616f         db  0xff ; '.'
0000000000016170         db  0x5c ; '\'
0000000000016171         db  0x09 ; '.'
0000000000016172         db  0x00 ; '.'
0000000000016173         db  0x00 ; '.'
0000000000016174         db  0xf0 ; '.'
0000000000016175         db  0xe4 ; '.'
0000000000016176         db  0xfe ; '.'
0000000000016177         db  0xff ; '.'
0000000000016178         db  0xc8 ; '.'
0000000000016179         db  0x09 ; '.'
000000000001617a         db  0x00 ; '.'
000000000001617b         db  0x00 ; '.'
000000000001617c         db  0x30 ; '0'
000000000001617d         db  0xe5 ; '.'
000000000001617e         db  0xfe ; '.'
000000000001617f         db  0xff ; '.'
0000000000016180         db  0xf4 ; '.'
0000000000016181         db  0x09 ; '.'
0000000000016182         db  0x00 ; '.'
0000000000016183         db  0x00 ; '.'
0000000000016184         db  0x50 ; 'P'
0000000000016185         db  0xe5 ; '.'
0000000000016186         db  0xfe ; '.'
0000000000016187         db  0xff ; '.'
0000000000016188         db  0x08 ; '.'
0000000000016189         db  0x0a ; '.'
000000000001618a         db  0x00 ; '.'
000000000001618b         db  0x00 ; '.'
000000000001618c         db  0x70 ; 'p'
000000000001618d         db  0xe5 ; '.'
000000000001618e         db  0xfe ; '.'
000000000001618f         db  0xff ; '.'
0000000000016190         db  0x1c ; '.'
0000000000016191         db  0x0a ; '.'
0000000000016192         db  0x00 ; '.'
0000000000016193         db  0x00 ; '.'
0000000000016194         db  0xb0 ; '.'
0000000000016195         db  0xe5 ; '.'
0000000000016196         db  0xfe ; '.'
0000000000016197         db  0xff ; '.'
0000000000016198         db  0x30 ; '0'
0000000000016199         db  0x0a ; '.'
000000000001619a         db  0x00 ; '.'
000000000001619b         db  0x00 ; '.'
000000000001619c         db  0xd0 ; '.'
000000000001619d         db  0xe5 ; '.'
000000000001619e         db  0xfe ; '.'
000000000001619f         db  0xff ; '.'
00000000000161a0         db  0x44 ; 'D'
00000000000161a1         db  0x0a ; '.'
00000000000161a2         db  0x00 ; '.'
00000000000161a3         db  0x00 ; '.'
00000000000161a4         db  0x00 ; '.'
00000000000161a5         db  0xe6 ; '.'
00000000000161a6         db  0xfe ; '.'
00000000000161a7         db  0xff ; '.'
00000000000161a8         db  0x58 ; 'X'
00000000000161a9         db  0x0a ; '.'
00000000000161aa         db  0x00 ; '.'
00000000000161ab         db  0x00 ; '.'
00000000000161ac         db  0x80 ; '.'
00000000000161ad         db  0xe6 ; '.'
00000000000161ae         db  0xfe ; '.'
00000000000161af         db  0xff ; '.'
00000000000161b0         db  0xac ; '.'
00000000000161b1         db  0x0a ; '.'
00000000000161b2         db  0x00 ; '.'
00000000000161b3         db  0x00 ; '.'
00000000000161b4         db  0x70 ; 'p'
00000000000161b5         db  0xe7 ; '.'
00000000000161b6         db  0xfe ; '.'
00000000000161b7         db  0xff ; '.'
00000000000161b8         db  0x18 ; '.'
00000000000161b9         db  0x0b ; '.'
00000000000161ba         db  0x00 ; '.'
00000000000161bb         db  0x00 ; '.'
00000000000161bc         db  0x80 ; '.'
00000000000161bd         db  0xe7 ; '.'
00000000000161be         db  0xfe ; '.'
00000000000161bf         db  0xff ; '.'
00000000000161c0         db  0x2c ; ','
00000000000161c1         db  0x0b ; '.'
00000000000161c2         db  0x00 ; '.'
00000000000161c3         db  0x00 ; '.'
00000000000161c4         db  0x20 ; ' '
00000000000161c5         db  0xe8 ; '.'
00000000000161c6         db  0xfe ; '.'
00000000000161c7         db  0xff ; '.'
00000000000161c8         db  0x58 ; 'X'
00000000000161c9         db  0x0b ; '.'
00000000000161ca         db  0x00 ; '.'
00000000000161cb         db  0x00 ; '.'
00000000000161cc         db  0x40 ; '@'
00000000000161cd         db  0xe8 ; '.'
00000000000161ce         db  0xfe ; '.'
00000000000161cf         db  0xff ; '.'
00000000000161d0         db  0x6c ; 'l'
00000000000161d1         db  0x0b ; '.'
00000000000161d2         db  0x00 ; '.'
00000000000161d3         db  0x00 ; '.'
00000000000161d4         db  0x50 ; 'P'
00000000000161d5         db  0xe8 ; '.'
00000000000161d6         db  0xfe ; '.'
00000000000161d7         db  0xff ; '.'
00000000000161d8         db  0x80 ; '.'
00000000000161d9         db  0x0b ; '.'
00000000000161da         db  0x00 ; '.'
00000000000161db         db  0x00 ; '.'
00000000000161dc         db  0x70 ; 'p'
00000000000161dd         db  0xe8 ; '.'
00000000000161de         db  0xfe ; '.'
00000000000161df         db  0xff ; '.'
00000000000161e0         db  0x94 ; '.'
00000000000161e1         db  0x0b ; '.'
00000000000161e2         db  0x00 ; '.'
00000000000161e3         db  0x00 ; '.'
00000000000161e4         db  0x90 ; '.'
00000000000161e5         db  0xe8 ; '.'
00000000000161e6         db  0xfe ; '.'
00000000000161e7         db  0xff ; '.'
00000000000161e8         db  0xa8 ; '.'
00000000000161e9         db  0x0b ; '.'
00000000000161ea         db  0x00 ; '.'
00000000000161eb         db  0x00 ; '.'
00000000000161ec         db  0x20 ; ' '
00000000000161ed         db  0xe9 ; '.'
00000000000161ee         db  0xfe ; '.'
00000000000161ef         db  0xff ; '.'
00000000000161f0         db  0xc4 ; '.'
00000000000161f1         db  0x0b ; '.'
00000000000161f2         db  0x00 ; '.'
00000000000161f3         db  0x00 ; '.'
00000000000161f4         db  0xb0 ; '.'
00000000000161f5         db  0xe9 ; '.'
00000000000161f6         db  0xfe ; '.'
00000000000161f7         db  0xff ; '.'
00000000000161f8         db  0xe0 ; '.'
00000000000161f9         db  0x0b ; '.'
00000000000161fa         db  0x00 ; '.'
00000000000161fb         db  0x00 ; '.'
00000000000161fc         db  0xc0 ; '.'
00000000000161fd         db  0xe9 ; '.'
00000000000161fe         db  0xfe ; '.'
00000000000161ff         db  0xff ; '.'
0000000000016200         db  0xf4 ; '.'
0000000000016201         db  0x0b ; '.'
0000000000016202         db  0x00 ; '.'
0000000000016203         db  0x00 ; '.'
0000000000016204         db  0xd0 ; '.'
0000000000016205         db  0xe9 ; '.'
0000000000016206         db  0xfe ; '.'
0000000000016207         db  0xff ; '.'
0000000000016208         db  0x08 ; '.'
0000000000016209         db  0x0c ; '.'
000000000001620a         db  0x00 ; '.'
000000000001620b         db  0x00 ; '.'
000000000001620c         db  0x70 ; 'p'
000000000001620d         db  0xea ; '.'
000000000001620e         db  0xfe ; '.'
000000000001620f         db  0xff ; '.'
0000000000016210         db  0x24 ; '$'
0000000000016211         db  0x0c ; '.'
0000000000016212         db  0x00 ; '.'
0000000000016213         db  0x00 ; '.'
0000000000016214         db  0x80 ; '.'
0000000000016215         db  0xea ; '.'
0000000000016216         db  0xfe ; '.'
0000000000016217         db  0xff ; '.'
0000000000016218         db  0x38 ; '8'
0000000000016219         db  0x0c ; '.'
000000000001621a         db  0x00 ; '.'
000000000001621b         db  0x00 ; '.'
000000000001621c         db  0xa0 ; '.'
000000000001621d         db  0xea ; '.'
000000000001621e         db  0xfe ; '.'
000000000001621f         db  0xff ; '.'
0000000000016220         db  0x4c ; 'L'
0000000000016221         db  0x0c ; '.'
0000000000016222         db  0x00 ; '.'
0000000000016223         db  0x00 ; '.'
0000000000016224         db  0xb0 ; '.'
0000000000016225         db  0xea ; '.'
0000000000016226         db  0xfe ; '.'
0000000000016227         db  0xff ; '.'
0000000000016228         db  0x60 ; '`'
0000000000016229         db  0x0c ; '.'
000000000001622a         db  0x00 ; '.'
000000000001622b         db  0x00 ; '.'
000000000001622c         db  0x40 ; '@'
000000000001622d         db  0xeb ; '.'
000000000001622e         db  0xfe ; '.'
000000000001622f         db  0xff ; '.'
0000000000016230         db  0x7c ; '|'
0000000000016231         db  0x0c ; '.'
0000000000016232         db  0x00 ; '.'
0000000000016233         db  0x00 ; '.'
0000000000016234         db  0xe0 ; '.'
0000000000016235         db  0xeb ; '.'
0000000000016236         db  0xfe ; '.'
0000000000016237         db  0xff ; '.'
0000000000016238         db  0x98 ; '.'
0000000000016239         db  0x0c ; '.'
000000000001623a         db  0x00 ; '.'
000000000001623b         db  0x00 ; '.'
000000000001623c         db  0xf0 ; '.'
000000000001623d         db  0xeb ; '.'
000000000001623e         db  0xfe ; '.'
000000000001623f         db  0xff ; '.'
0000000000016240         db  0xac ; '.'
0000000000016241         db  0x0c ; '.'
0000000000016242         db  0x00 ; '.'
0000000000016243         db  0x00 ; '.'
0000000000016244         db  0x10 ; '.'
0000000000016245         db  0xec ; '.'
0000000000016246         db  0xfe ; '.'
0000000000016247         db  0xff ; '.'
0000000000016248         db  0xc0 ; '.'
0000000000016249         db  0x0c ; '.'
000000000001624a         db  0x00 ; '.'
000000000001624b         db  0x00 ; '.'
000000000001624c         db  0x30 ; '0'
000000000001624d         db  0xec ; '.'
000000000001624e         db  0xfe ; '.'
000000000001624f         db  0xff ; '.'
0000000000016250         db  0xd4 ; '.'
0000000000016251         db  0x0c ; '.'
0000000000016252         db  0x00 ; '.'
0000000000016253         db  0x00 ; '.'
0000000000016254         db  0x40 ; '@'
0000000000016255         db  0xec ; '.'
0000000000016256         db  0xfe ; '.'
0000000000016257         db  0xff ; '.'
0000000000016258         db  0xe8 ; '.'
0000000000016259         db  0x0c ; '.'
000000000001625a         db  0x00 ; '.'
000000000001625b         db  0x00 ; '.'
000000000001625c         db  0x60 ; '`'
000000000001625d         db  0xec ; '.'
000000000001625e         db  0xfe ; '.'
000000000001625f         db  0xff ; '.'
0000000000016260         db  0xfc ; '.'
0000000000016261         db  0x0c ; '.'
0000000000016262         db  0x00 ; '.'
0000000000016263         db  0x00 ; '.'
0000000000016264         db  0x80 ; '.'
0000000000016265         db  0xec ; '.'
0000000000016266         db  0xfe ; '.'
0000000000016267         db  0xff ; '.'
0000000000016268         db  0x10 ; '.'
0000000000016269         db  0x0d ; '.'
000000000001626a         db  0x00 ; '.'
000000000001626b         db  0x00 ; '.'
000000000001626c         db  0xa0 ; '.'
000000000001626d         db  0xec ; '.'
000000000001626e         db  0xfe ; '.'
000000000001626f         db  0xff ; '.'
0000000000016270         db  0x28 ; '('
0000000000016271         db  0x0d ; '.'
0000000000016272         db  0x00 ; '.'
0000000000016273         db  0x00 ; '.'
0000000000016274         db  0xc0 ; '.'
0000000000016275         db  0xf0 ; '.'
0000000000016276         db  0xfe ; '.'
0000000000016277         db  0xff ; '.'
0000000000016278         db  0x3c ; '<'
0000000000016279         db  0x0e ; '.'
000000000001627a         db  0x00 ; '.'
000000000001627b         db  0x00 ; '.'
000000000001627c         db  0xe0 ; '.'
000000000001627d         db  0xf0 ; '.'
000000000001627e         db  0xfe ; '.'
000000000001627f         db  0xff ; '.'
0000000000016280         db  0x50 ; 'P'
0000000000016281         db  0x0e ; '.'
0000000000016282         db  0x00 ; '.'
0000000000016283         db  0x00 ; '.'
0000000000016284         db  0x60 ; '`'
0000000000016285         db  0xf1 ; '.'
0000000000016286         db  0xfe ; '.'
0000000000016287         db  0xff ; '.'
0000000000016288         db  0x6c ; 'l'
0000000000016289         db  0x0e ; '.'
000000000001628a         db  0x00 ; '.'
000000000001628b         db  0x00 ; '.'
000000000001628c         db  0x40 ; '@'
000000000001628d         db  0xf2 ; '.'
000000000001628e         db  0xfe ; '.'
000000000001628f         db  0xff ; '.'
0000000000016290         db  0x98 ; '.'
0000000000016291         db  0x0e ; '.'
0000000000016292         db  0x00 ; '.'
0000000000016293         db  0x00 ; '.'
0000000000016294         db  0xc0 ; '.'
0000000000016295         db  0xf2 ; '.'
0000000000016296         db  0xfe ; '.'
0000000000016297         db  0xff ; '.'
0000000000016298         db  0xb8 ; '.'
0000000000016299         db  0x0e ; '.'
000000000001629a         db  0x00 ; '.'
000000000001629b         db  0x00 ; '.'
000000000001629c         db  0xe0 ; '.'
000000000001629d         db  0xf2 ; '.'
000000000001629e         db  0xfe ; '.'
000000000001629f         db  0xff ; '.'
00000000000162a0         db  0xd4 ; '.'
00000000000162a1         db  0x0e ; '.'
00000000000162a2         db  0x00 ; '.'
00000000000162a3         db  0x00 ; '.'
00000000000162a4         db  0x10 ; '.'
00000000000162a5         db  0xf3 ; '.'
00000000000162a6         db  0xfe ; '.'
00000000000162a7         db  0xff ; '.'
00000000000162a8         db  0xe8 ; '.'
00000000000162a9         db  0x0e ; '.'
00000000000162aa         db  0x00 ; '.'
00000000000162ab         db  0x00 ; '.'
00000000000162ac         db  0x20 ; ' '
00000000000162ad         db  0xf3 ; '.'
00000000000162ae         db  0xfe ; '.'
00000000000162af         db  0xff ; '.'
00000000000162b0         db  0xfc ; '.'
00000000000162b1         db  0x0e ; '.'
00000000000162b2         db  0x00 ; '.'
00000000000162b3         db  0x00 ; '.'
00000000000162b4         db  0x60 ; '`'
00000000000162b5         db  0xf3 ; '.'
00000000000162b6         db  0xfe ; '.'
00000000000162b7         db  0xff ; '.'
00000000000162b8         db  0x20 ; ' '
00000000000162b9         db  0x0f ; '.'
00000000000162ba         db  0x00 ; '.'
00000000000162bb         db  0x00 ; '.'
00000000000162bc         db  0x90 ; '.'
00000000000162bd         db  0xf3 ; '.'
00000000000162be         db  0xfe ; '.'
00000000000162bf         db  0xff ; '.'
00000000000162c0         db  0x34 ; '4'
00000000000162c1         db  0x0f ; '.'
00000000000162c2         db  0x00 ; '.'
00000000000162c3         db  0x00 ; '.'
00000000000162c4         db  0x20 ; ' '
00000000000162c5         db  0xf4 ; '.'
00000000000162c6         db  0xfe ; '.'
00000000000162c7         db  0xff ; '.'
00000000000162c8         db  0x4c ; 'L'
00000000000162c9         db  0x0f ; '.'
00000000000162ca         db  0x00 ; '.'
00000000000162cb         db  0x00 ; '.'
00000000000162cc         db  0x70 ; 'p'
00000000000162cd         db  0xf4 ; '.'
00000000000162ce         db  0xfe ; '.'
00000000000162cf         db  0xff ; '.'
00000000000162d0         db  0x64 ; 'd'
00000000000162d1         db  0x0f ; '.'
00000000000162d2         db  0x00 ; '.'
00000000000162d3         db  0x00 ; '.'
00000000000162d4         db  0x90 ; '.'
00000000000162d5         db  0xf4 ; '.'
00000000000162d6         db  0xfe ; '.'
00000000000162d7         db  0xff ; '.'
00000000000162d8         db  0x80 ; '.'
00000000000162d9         db  0x0f ; '.'
00000000000162da         db  0x00 ; '.'
00000000000162db         db  0x00 ; '.'
00000000000162dc         db  0xc0 ; '.'
00000000000162dd         db  0xf4 ; '.'
00000000000162de         db  0xfe ; '.'
00000000000162df         db  0xff ; '.'
00000000000162e0         db  0x9c ; '.'
00000000000162e1         db  0x0f ; '.'
00000000000162e2         db  0x00 ; '.'
00000000000162e3         db  0x00 ; '.'
00000000000162e4         db  0xf0 ; '.'
00000000000162e5         db  0xf4 ; '.'
00000000000162e6         db  0xfe ; '.'
00000000000162e7         db  0xff ; '.'
00000000000162e8         db  0xc4 ; '.'
00000000000162e9         db  0x0f ; '.'
00000000000162ea         db  0x00 ; '.'
00000000000162eb         db  0x00 ; '.'
00000000000162ec         db  0x10 ; '.'
00000000000162ed         db  0xf5 ; '.'
00000000000162ee         db  0xfe ; '.'
00000000000162ef         db  0xff ; '.'
00000000000162f0         db  0xe0 ; '.'
00000000000162f1         db  0x0f ; '.'
00000000000162f2         db  0x00 ; '.'
00000000000162f3         db  0x00 ; '.'
00000000000162f4         db  0x50 ; 'P'
00000000000162f5         db  0xf5 ; '.'
00000000000162f6         db  0xfe ; '.'
00000000000162f7         db  0xff ; '.'
00000000000162f8         db  0xf8 ; '.'
00000000000162f9         db  0x0f ; '.'
00000000000162fa         db  0x00 ; '.'
00000000000162fb         db  0x00 ; '.'
00000000000162fc         db  0x70 ; 'p'
00000000000162fd         db  0xf6 ; '.'
00000000000162fe         db  0xfe ; '.'
00000000000162ff         db  0xff ; '.'
0000000000016300         db  0x44 ; 'D'
0000000000016301         db  0x10 ; '.'
0000000000016302         db  0x00 ; '.'
0000000000016303         db  0x00 ; '.'
0000000000016304         db  0xa0 ; '.'
0000000000016305         db  0xf6 ; '.'
0000000000016306         db  0xfe ; '.'
0000000000016307         db  0xff ; '.'
0000000000016308         db  0x60 ; '`'
0000000000016309         db  0x10 ; '.'
000000000001630a         db  0x00 ; '.'
000000000001630b         db  0x00 ; '.'
000000000001630c         db  0x60 ; '`'
000000000001630d         db  0xfd ; '.'
000000000001630e         db  0xfe ; '.'
000000000001630f         db  0xff ; '.'
0000000000016310         db  0xb0 ; '.'
0000000000016311         db  0x10 ; '.'
0000000000016312         db  0x00 ; '.'
0000000000016313         db  0x00 ; '.'
0000000000016314         db  0xe0 ; '.'
0000000000016315         db  0xfd ; '.'
0000000000016316         db  0xfe ; '.'
0000000000016317         db  0xff ; '.'
0000000000016318         db  0xe8 ; '.'
0000000000016319         db  0x10 ; '.'
000000000001631a         db  0x00 ; '.'
000000000001631b         db  0x00 ; '.'
000000000001631c         db  0x20 ; ' '
000000000001631d         db  0xfe ; '.'
000000000001631e         db  0xfe ; '.'
000000000001631f         db  0xff ; '.'
0000000000016320         db  0x08 ; '.'
0000000000016321         db  0x11 ; '.'
0000000000016322         db  0x00 ; '.'
0000000000016323         db  0x00 ; '.'
0000000000016324         db  0x80 ; '.'
0000000000016325         db  0xfe ; '.'
0000000000016326         db  0xfe ; '.'
0000000000016327         db  0xff ; '.'
0000000000016328         db  0x38 ; '8'
0000000000016329         db  0x11 ; '.'
000000000001632a         db  0x00 ; '.'
000000000001632b         db  0x00 ; '.'
000000000001632c         db  0x10 ; '.'
000000000001632d         db  0xff ; '.'
000000000001632e         db  0xfe ; '.'
000000000001632f         db  0xff ; '.'
0000000000016330         db  0x78 ; 'x'
0000000000016331         db  0x11 ; '.'
0000000000016332         db  0x00 ; '.'
0000000000016333         db  0x00 ; '.'
0000000000016334         db  0x40 ; '@'
0000000000016335         db  0x00 ; '.'
0000000000016336         db  0xff ; '.'
0000000000016337         db  0xff ; '.'
0000000000016338         db  0x8c ; '.'
0000000000016339         db  0x11 ; '.'
000000000001633a         db  0x00 ; '.'
000000000001633b         db  0x00 ; '.'
000000000001633c         db  0x60 ; '`'
000000000001633d         db  0x00 ; '.'
000000000001633e         db  0xff ; '.'
000000000001633f         db  0xff ; '.'
0000000000016340         db  0xa0 ; '.'
0000000000016341         db  0x11 ; '.'
0000000000016342         db  0x00 ; '.'
0000000000016343         db  0x00 ; '.'
0000000000016344         db  0x90 ; '.'
0000000000016345         db  0x02 ; '.'
0000000000016346         db  0xff ; '.'
0000000000016347         db  0xff ; '.'
0000000000016348         db  0x34 ; '4'
0000000000016349         db  0x12 ; '.'
000000000001634a         db  0x00 ; '.'
000000000001634b         db  0x00 ; '.'
000000000001634c         db  0x00 ; '.'
000000000001634d         db  0x03 ; '.'
000000000001634e         db  0xff ; '.'
000000000001634f         db  0xff ; '.'
0000000000016350         db  0x48 ; 'H'
0000000000016351         db  0x12 ; '.'
0000000000016352         db  0x00 ; '.'
0000000000016353         db  0x00 ; '.'
0000000000016354         db  0x70 ; 'p'
0000000000016355         db  0x03 ; '.'
0000000000016356         db  0xff ; '.'
0000000000016357         db  0xff ; '.'
0000000000016358         db  0x74 ; 't'
0000000000016359         db  0x12 ; '.'
000000000001635a         db  0x00 ; '.'
000000000001635b         db  0x00 ; '.'
000000000001635c         db  0xd0 ; '.'
000000000001635d         db  0x03 ; '.'
000000000001635e         db  0xff ; '.'
000000000001635f         db  0xff ; '.'
0000000000016360         db  0xa0 ; '.'
0000000000016361         db  0x12 ; '.'
0000000000016362         db  0x00 ; '.'
0000000000016363         db  0x00 ; '.'
0000000000016364         db  0x70 ; 'p'
0000000000016365         db  0x04 ; '.'
0000000000016366         db  0xff ; '.'
0000000000016367         db  0xff ; '.'
0000000000016368         db  0xd4 ; '.'
0000000000016369         db  0x12 ; '.'
000000000001636a         db  0x00 ; '.'
000000000001636b         db  0x00 ; '.'
000000000001636c         db  0xe0 ; '.'
000000000001636d         db  0x04 ; '.'
000000000001636e         db  0xff ; '.'
000000000001636f         db  0xff ; '.'
0000000000016370         db  0x00 ; '.'
0000000000016371         db  0x13 ; '.'
0000000000016372         db  0x00 ; '.'
0000000000016373         db  0x00 ; '.'
0000000000016374         db  0x10 ; '.'
0000000000016375         db  0x06 ; '.'
0000000000016376         db  0xff ; '.'
0000000000016377         db  0xff ; '.'
0000000000016378         db  0x38 ; '8'
0000000000016379         db  0x13 ; '.'
000000000001637a         db  0x00 ; '.'
000000000001637b         db  0x00 ; '.'
000000000001637c         db  0x00 ; '.'
000000000001637d         db  0x07 ; '.'
000000000001637e         db  0xff ; '.'
000000000001637f         db  0xff ; '.'
0000000000016380         db  0x88 ; '.'
0000000000016381         db  0x13 ; '.'
0000000000016382         db  0x00 ; '.'
0000000000016383         db  0x00 ; '.'
0000000000016384         db  0x70 ; 'p'
0000000000016385         db  0x07 ; '.'
0000000000016386         db  0xff ; '.'
0000000000016387         db  0xff ; '.'
0000000000016388         db  0xb8 ; '.'
0000000000016389         db  0x13 ; '.'
000000000001638a         db  0x00 ; '.'
000000000001638b         db  0x00 ; '.'
000000000001638c         db  0x40 ; '@'
000000000001638d         db  0x09 ; '.'
000000000001638e         db  0xff ; '.'
000000000001638f         db  0xff ; '.'
0000000000016390         db  0x04 ; '.'
0000000000016391         db  0x14 ; '.'
0000000000016392         db  0x00 ; '.'
0000000000016393         db  0x00 ; '.'
0000000000016394         db  0x60 ; '`'
0000000000016395         db  0x0f ; '.'
0000000000016396         db  0xff ; '.'
0000000000016397         db  0xff ; '.'
0000000000016398         db  0x50 ; 'P'
0000000000016399         db  0x14 ; '.'
000000000001639a         db  0x00 ; '.'
000000000001639b         db  0x00 ; '.'
000000000001639c         db  0xb0 ; '.'
000000000001639d         db  0x10 ; '.'
000000000001639e         db  0xff ; '.'
000000000001639f         db  0xff ; '.'
00000000000163a0         db  0xac ; '.'
00000000000163a1         db  0x14 ; '.'
00000000000163a2         db  0x00 ; '.'
00000000000163a3         db  0x00 ; '.'
00000000000163a4         db  0x40 ; '@'
00000000000163a5         db  0x11 ; '.'
00000000000163a6         db  0xff ; '.'
00000000000163a7         db  0xff ; '.'
00000000000163a8         db  0xd8 ; '.'
00000000000163a9         db  0x14 ; '.'
00000000000163aa         db  0x00 ; '.'
00000000000163ab         db  0x00 ; '.'
00000000000163ac         db  0x70 ; 'p'
00000000000163ad         db  0x11 ; '.'
00000000000163ae         db  0xff ; '.'
00000000000163af         db  0xff ; '.'
00000000000163b0         db  0xf4 ; '.'
00000000000163b1         db  0x14 ; '.'
00000000000163b2         db  0x00 ; '.'
00000000000163b3         db  0x00 ; '.'
00000000000163b4         db  0xa0 ; '.'
00000000000163b5         db  0x11 ; '.'
00000000000163b6         db  0xff ; '.'
00000000000163b7         db  0xff ; '.'
00000000000163b8         db  0x08 ; '.'
00000000000163b9         db  0x15 ; '.'
00000000000163ba         db  0x00 ; '.'
00000000000163bb         db  0x00 ; '.'
00000000000163bc         db  0xc0 ; '.'
00000000000163bd         db  0x11 ; '.'
00000000000163be         db  0xff ; '.'
00000000000163bf         db  0xff ; '.'
00000000000163c0         db  0x20 ; ' '
00000000000163c1         db  0x15 ; '.'
00000000000163c2         db  0x00 ; '.'
00000000000163c3         db  0x00 ; '.'
00000000000163c4         db  0x90 ; '.'
00000000000163c5         db  0x13 ; '.'
00000000000163c6         db  0xff ; '.'
00000000000163c7         db  0xff ; '.'
00000000000163c8         db  0x6c ; 'l'
00000000000163c9         db  0x15 ; '.'
00000000000163ca         db  0x00 ; '.'
00000000000163cb         db  0x00 ; '.'
00000000000163cc         db  0x30 ; '0'
00000000000163cd         db  0x14 ; '.'
00000000000163ce         db  0xff ; '.'
00000000000163cf         db  0xff ; '.'
00000000000163d0         db  0xa4 ; '.'
00000000000163d1         db  0x15 ; '.'
00000000000163d2         db  0x00 ; '.'
00000000000163d3         db  0x00 ; '.'
00000000000163d4         db  0xb0 ; '.'
00000000000163d5         db  0x16 ; '.'
00000000000163d6         db  0xff ; '.'
00000000000163d7         db  0xff ; '.'
00000000000163d8         db  0xf0 ; '.'
00000000000163d9         db  0x15 ; '.'
00000000000163da         db  0x00 ; '.'
00000000000163db         db  0x00 ; '.'
00000000000163dc         db  0x10 ; '.'
00000000000163dd         db  0x17 ; '.'
00000000000163de         db  0xff ; '.'
00000000000163df         db  0xff ; '.'
00000000000163e0         db  0x0c ; '.'
00000000000163e1         db  0x16 ; '.'
00000000000163e2         db  0x00 ; '.'
00000000000163e3         db  0x00 ; '.'
00000000000163e4         db  0x50 ; 'P'
00000000000163e5         db  0x17 ; '.'
00000000000163e6         db  0xff ; '.'
00000000000163e7         db  0xff ; '.'
00000000000163e8         db  0x2c ; ','
00000000000163e9         db  0x16 ; '.'
00000000000163ea         db  0x00 ; '.'
00000000000163eb         db  0x00 ; '.'
00000000000163ec         db  0xb0 ; '.'
00000000000163ed         db  0x18 ; '.'
00000000000163ee         db  0xff ; '.'
00000000000163ef         db  0xff ; '.'
00000000000163f0         db  0x68 ; 'h'
00000000000163f1         db  0x16 ; '.'
00000000000163f2         db  0x00 ; '.'
00000000000163f3         db  0x00 ; '.'
00000000000163f4         db  0x70 ; 'p'
00000000000163f5         db  0x19 ; '.'
00000000000163f6         db  0xff ; '.'
00000000000163f7         db  0xff ; '.'
00000000000163f8         db  0xa4 ; '.'
00000000000163f9         db  0x16 ; '.'
00000000000163fa         db  0x00 ; '.'
00000000000163fb         db  0x00 ; '.'
00000000000163fc         db  0xc0 ; '.'
00000000000163fd         db  0x19 ; '.'
00000000000163fe         db  0xff ; '.'
00000000000163ff         db  0xff ; '.'
0000000000016400         db  0xb8 ; '.'
0000000000016401         db  0x16 ; '.'
0000000000016402         db  0x00 ; '.'
0000000000016403         db  0x00 ; '.'
0000000000016404         db  0x20 ; ' '
0000000000016405         db  0x1a ; '.'
0000000000016406         db  0xff ; '.'
0000000000016407         db  0xff ; '.'
0000000000016408         db  0xcc ; '.'
0000000000016409         db  0x16 ; '.'
000000000001640a         db  0x00 ; '.'
000000000001640b         db  0x00 ; '.'
000000000001640c         db  0xa0 ; '.'
000000000001640d         db  0x1a ; '.'
000000000001640e         db  0xff ; '.'
000000000001640f         db  0xff ; '.'
0000000000016410         db  0xe0 ; '.'
0000000000016411         db  0x16 ; '.'
0000000000016412         db  0x00 ; '.'
0000000000016413         db  0x00 ; '.'
0000000000016414         db  0xa0 ; '.'
0000000000016415         db  0x1b ; '.'
0000000000016416         db  0xff ; '.'
0000000000016417         db  0xff ; '.'
0000000000016418         db  0x44 ; 'D'
0000000000016419         db  0x17 ; '.'
000000000001641a         db  0x00 ; '.'
000000000001641b         db  0x00 ; '.'
000000000001641c         db  0xe0 ; '.'
000000000001641d         db  0x1b ; '.'
000000000001641e         db  0xff ; '.'
000000000001641f         db  0xff ; '.'
0000000000016420         db  0x58 ; 'X'
0000000000016421         db  0x17 ; '.'
0000000000016422         db  0x00 ; '.'
0000000000016423         db  0x00 ; '.'
0000000000016424         db  0x70 ; 'p'
0000000000016425         db  0x1c ; '.'
0000000000016426         db  0xff ; '.'
0000000000016427         db  0xff ; '.'
0000000000016428         db  0x6c ; 'l'
0000000000016429         db  0x17 ; '.'
000000000001642a         db  0x00 ; '.'
000000000001642b         db  0x00 ; '.'
000000000001642c         db  0xd0 ; '.'
000000000001642d         db  0x1c ; '.'
000000000001642e         db  0xff ; '.'
000000000001642f         db  0xff ; '.'
0000000000016430         db  0x80 ; '.'
0000000000016431         db  0x17 ; '.'
0000000000016432         db  0x00 ; '.'
0000000000016433         db  0x00 ; '.'
0000000000016434         db  0x40 ; '@'
0000000000016435         db  0x1f ; '.'
0000000000016436         db  0xff ; '.'
0000000000016437         db  0xff ; '.'
0000000000016438         db  0xd0 ; '.'
0000000000016439         db  0x17 ; '.'
000000000001643a         db  0x00 ; '.'
000000000001643b         db  0x00 ; '.'
000000000001643c         db  0x20 ; ' '
000000000001643d         db  0x21 ; '!'
000000000001643e         db  0xff ; '.'
000000000001643f         db  0xff ; '.'
0000000000016440         db  0x08 ; '.'
0000000000016441         db  0x18 ; '.'
0000000000016442         db  0x00 ; '.'
0000000000016443         db  0x00 ; '.'
0000000000016444         db  0xd0 ; '.'
0000000000016445         db  0x23 ; '#'
0000000000016446         db  0xff ; '.'
0000000000016447         db  0xff ; '.'
0000000000016448         db  0x58 ; 'X'
0000000000016449         db  0x18 ; '.'
000000000001644a         db  0x00 ; '.'
000000000001644b         db  0x00 ; '.'
000000000001644c         db  0x30 ; '0'
000000000001644d         db  0x25 ; '%'
000000000001644e         db  0xff ; '.'
000000000001644f         db  0xff ; '.'
0000000000016450         db  0xa4 ; '.'
0000000000016451         db  0x18 ; '.'
0000000000016452         db  0x00 ; '.'
0000000000016453         db  0x00 ; '.'
0000000000016454         db  0xe0 ; '.'
0000000000016455         db  0x26 ; '&'
0000000000016456         db  0xff ; '.'
0000000000016457         db  0xff ; '.'
0000000000016458         db  0xf4 ; '.'
0000000000016459         db  0x18 ; '.'
000000000001645a         db  0x00 ; '.'
000000000001645b         db  0x00 ; '.'
000000000001645c         db  0xc0 ; '.'
000000000001645d         db  0x27 ; '''
000000000001645e         db  0xff ; '.'
000000000001645f         db  0xff ; '.'
0000000000016460         db  0x18 ; '.'
0000000000016461         db  0x19 ; '.'
0000000000016462         db  0x00 ; '.'
0000000000016463         db  0x00 ; '.'
0000000000016464         db  0xa0 ; '.'
0000000000016465         db  0x28 ; '('
0000000000016466         db  0xff ; '.'
0000000000016467         db  0xff ; '.'
0000000000016468         db  0x5c ; '\'
0000000000016469         db  0x19 ; '.'
000000000001646a         db  0x00 ; '.'
000000000001646b         db  0x00 ; '.'
000000000001646c         db  0xe0 ; '.'
000000000001646d         db  0x2a ; '*'
000000000001646e         db  0xff ; '.'
000000000001646f         db  0xff ; '.'
0000000000016470         db  0xac ; '.'
0000000000016471         db  0x19 ; '.'
0000000000016472         db  0x00 ; '.'
0000000000016473         db  0x00 ; '.'
0000000000016474         db  0x80 ; '.'
0000000000016475         db  0x2b ; '+'
0000000000016476         db  0xff ; '.'
0000000000016477         db  0xff ; '.'
0000000000016478         db  0xd8 ; '.'
0000000000016479         db  0x19 ; '.'
000000000001647a         db  0x00 ; '.'
000000000001647b         db  0x00 ; '.'
000000000001647c         db  0x10 ; '.'
000000000001647d         db  0x2c ; ','
000000000001647e         db  0xff ; '.'
000000000001647f         db  0xff ; '.'
0000000000016480         db  0x14 ; '.'
0000000000016481         db  0x1a ; '.'
0000000000016482         db  0x00 ; '.'
0000000000016483         db  0x00 ; '.'
0000000000016484         db  0x70 ; 'p'
0000000000016485         db  0x2d ; '-'
0000000000016486         db  0xff ; '.'
0000000000016487         db  0xff ; '.'
0000000000016488         db  0x78 ; 'x'
0000000000016489         db  0x1a ; '.'
000000000001648a         db  0x00 ; '.'
000000000001648b         db  0x00 ; '.'
000000000001648c         db  0x30 ; '0'
000000000001648d         db  0x30 ; '0'
000000000001648e         db  0xff ; '.'
000000000001648f         db  0xff ; '.'
0000000000016490         db  0xc4 ; '.'
0000000000016491         db  0x1a ; '.'
0000000000016492         db  0x00 ; '.'
0000000000016493         db  0x00 ; '.'
0000000000016494         db  0x30 ; '0'
0000000000016495         db  0x32 ; '2'
0000000000016496         db  0xff ; '.'
0000000000016497         db  0xff ; '.'
0000000000016498         db  0x10 ; '.'
0000000000016499         db  0x1b ; '.'
000000000001649a         db  0x00 ; '.'
000000000001649b         db  0x00 ; '.'
000000000001649c         db  0x10 ; '.'
000000000001649d         db  0x33 ; '3'
000000000001649e         db  0xff ; '.'
000000000001649f         db  0xff ; '.'
00000000000164a0         db  0x5c ; '\'
00000000000164a1         db  0x1b ; '.'
00000000000164a2         db  0x00 ; '.'
00000000000164a3         db  0x00 ; '.'
00000000000164a4         db  0xb0 ; '.'
00000000000164a5         db  0x36 ; '6'
00000000000164a6         db  0xff ; '.'
00000000000164a7         db  0xff ; '.'
00000000000164a8         db  0xa8 ; '.'
00000000000164a9         db  0x1b ; '.'
00000000000164aa         db  0x00 ; '.'
00000000000164ab         db  0x00 ; '.'
00000000000164ac         db  0x00 ; '.'
00000000000164ad         db  0x38 ; '8'
00000000000164ae         db  0xff ; '.'
00000000000164af         db  0xff ; '.'
00000000000164b0         db  0xf4 ; '.'
00000000000164b1         db  0x1b ; '.'
00000000000164b2         db  0x00 ; '.'
00000000000164b3         db  0x00 ; '.'
00000000000164b4         db  0xf0 ; '.'
00000000000164b5         db  0x38 ; '8'
00000000000164b6         db  0xff ; '.'
00000000000164b7         db  0xff ; '.'
00000000000164b8         db  0x38 ; '8'
00000000000164b9         db  0x1c ; '.'
00000000000164ba         db  0x00 ; '.'
00000000000164bb         db  0x00 ; '.'
00000000000164bc         db  0x00 ; '.'
00000000000164bd         db  0x3a ; ':'
00000000000164be         db  0xff ; '.'
00000000000164bf         db  0xff ; '.'
00000000000164c0         db  0x60 ; '`'
00000000000164c1         db  0x1c ; '.'
00000000000164c2         db  0x00 ; '.'
00000000000164c3         db  0x00 ; '.'
00000000000164c4         db  0xd0 ; '.'
00000000000164c5         db  0x3a ; ':'
00000000000164c6         db  0xff ; '.'
00000000000164c7         db  0xff ; '.'
00000000000164c8         db  0x98 ; '.'
00000000000164c9         db  0x1c ; '.'
00000000000164ca         db  0x00 ; '.'
00000000000164cb         db  0x00 ; '.'
00000000000164cc         db  0x70 ; 'p'
00000000000164cd         db  0x42 ; 'B'
00000000000164ce         db  0xff ; '.'
00000000000164cf         db  0xff ; '.'
00000000000164d0         db  0xe8 ; '.'
00000000000164d1         db  0x1c ; '.'
00000000000164d2         db  0x00 ; '.'
00000000000164d3         db  0x00 ; '.'
00000000000164d4         db  0xb0 ; '.'
00000000000164d5         db  0x44 ; 'D'
00000000000164d6         db  0xff ; '.'
00000000000164d7         db  0xff ; '.'
00000000000164d8         db  0x38 ; '8'
00000000000164d9         db  0x1d ; '.'
00000000000164da         db  0x00 ; '.'
00000000000164db         db  0x00 ; '.'
00000000000164dc         db  0x50 ; 'P'
00000000000164dd         db  0x50 ; 'P'
00000000000164de         db  0xff ; '.'
00000000000164df         db  0xff ; '.'
00000000000164e0         db  0x88 ; '.'
00000000000164e1         db  0x1d ; '.'
00000000000164e2         db  0x00 ; '.'
00000000000164e3         db  0x00 ; '.'
00000000000164e4         db  0xe0 ; '.'
00000000000164e5         db  0x50 ; 'P'
00000000000164e6         db  0xff ; '.'
00000000000164e7         db  0xff ; '.'
00000000000164e8         db  0xbc ; '.'
00000000000164e9         db  0x1d ; '.'
00000000000164ea         db  0x00 ; '.'
00000000000164eb         db  0x00 ; '.'
00000000000164ec         db  0x30 ; '0'
00000000000164ed         db  0x51 ; 'Q'
00000000000164ee         db  0xff ; '.'
00000000000164ef         db  0xff ; '.'
00000000000164f0         db  0xe8 ; '.'
00000000000164f1         db  0x1d ; '.'
00000000000164f2         db  0x00 ; '.'
00000000000164f3         db  0x00 ; '.'
00000000000164f4         db  0xd0 ; '.'
00000000000164f5         db  0x51 ; 'Q'
00000000000164f6         db  0xff ; '.'
00000000000164f7         db  0xff ; '.'
00000000000164f8         db  0x18 ; '.'
00000000000164f9         db  0x1e ; '.'
00000000000164fa         db  0x00 ; '.'
00000000000164fb         db  0x00 ; '.'
00000000000164fc         db  0x20 ; ' '
00000000000164fd         db  0x52 ; 'R'
00000000000164fe         db  0xff ; '.'
00000000000164ff         db  0xff ; '.'
0000000000016500         db  0x4c ; 'L'
0000000000016501         db  0x1e ; '.'
0000000000016502         db  0x00 ; '.'
0000000000016503         db  0x00 ; '.'
0000000000016504         db  0x30 ; '0'
0000000000016505         db  0x5a ; 'Z'
0000000000016506         db  0xff ; '.'
0000000000016507         db  0xff ; '.'
0000000000016508         db  0x90 ; '.'
0000000000016509         db  0x1e ; '.'
000000000001650a         db  0x00 ; '.'
000000000001650b         db  0x00 ; '.'
000000000001650c         db  0xa0 ; '.'
000000000001650d         db  0x5c ; '\'
000000000001650e         db  0xff ; '.'
000000000001650f         db  0xff ; '.'
0000000000016510         db  0xf0 ; '.'
0000000000016511         db  0x1e ; '.'
0000000000016512         db  0x00 ; '.'
0000000000016513         db  0x00 ; '.'
0000000000016514         db  0xd0 ; '.'
0000000000016515         db  0x61 ; 'a'
0000000000016516         db  0xff ; '.'
0000000000016517         db  0xff ; '.'
0000000000016518         db  0x40 ; '@'
0000000000016519         db  0x1f ; '.'
000000000001651a         db  0x00 ; '.'
000000000001651b         db  0x00 ; '.'
000000000001651c         db  0x30 ; '0'
000000000001651d         db  0x64 ; 'd'
000000000001651e         db  0xff ; '.'
000000000001651f         db  0xff ; '.'
0000000000016520         db  0x7c ; '|'
0000000000016521         db  0x1f ; '.'
0000000000016522         db  0x00 ; '.'
0000000000016523         db  0x00 ; '.'
0000000000016524         db  0x90 ; '.'
0000000000016525         db  0x6b ; 'k'
0000000000016526         db  0xff ; '.'
0000000000016527         db  0xff ; '.'
0000000000016528         db  0xcc ; '.'
0000000000016529         db  0x1f ; '.'
000000000001652a         db  0x00 ; '.'
000000000001652b         db  0x00 ; '.'
000000000001652c         db  0x80 ; '.'
000000000001652d         db  0x74 ; 't'
000000000001652e         db  0xff ; '.'
000000000001652f         db  0xff ; '.'
0000000000016530         db  0xfc ; '.'
0000000000016531         db  0x1f ; '.'
0000000000016532         db  0x00 ; '.'
0000000000016533         db  0x00 ; '.'
0000000000016534         db  0x20 ; ' '
0000000000016535         db  0x76 ; 'v'
0000000000016536         db  0xff ; '.'
0000000000016537         db  0xff ; '.'
0000000000016538         db  0x68 ; 'h'
0000000000016539         db  0x20 ; ' '
000000000001653a         db  0x00 ; '.'
000000000001653b         db  0x00 ; '.'
000000000001653c         db  0x10 ; '.'
000000000001653d         db  0x7f ; '.'
000000000001653e         db  0xff ; '.'
000000000001653f         db  0xff ; '.'
0000000000016540         db  0xc8 ; '.'
0000000000016541         db  0x20 ; ' '
0000000000016542         db  0x00 ; '.'
0000000000016543         db  0x00 ; '.'
0000000000016544         db  0x00 ; '.'
0000000000016545         db  0x81 ; '.'
0000000000016546         db  0xff ; '.'
0000000000016547         db  0xff ; '.'
0000000000016548         db  0x14 ; '.'
0000000000016549         db  0x21 ; '!'
000000000001654a         db  0x00 ; '.'
000000000001654b         db  0x00 ; '.'
000000000001654c         db  0x40 ; '@'
000000000001654d         db  0x84 ; '.'
000000000001654e         db  0xff ; '.'
000000000001654f         db  0xff ; '.'
0000000000016550         db  0x74 ; 't'
0000000000016551         db  0x21 ; '!'
0000000000016552         db  0x00 ; '.'
0000000000016553         db  0x00 ; '.'
0000000000016554         db  0x70 ; 'p'
0000000000016555         db  0x9b ; '.'
0000000000016556         db  0xff ; '.'
0000000000016557         db  0xff ; '.'
0000000000016558         db  0xc4 ; '.'
0000000000016559         db  0x21 ; '!'
000000000001655a         db  0x00 ; '.'
000000000001655b         db  0x00 ; '.'
000000000001655c         db  0xc0 ; '.'
000000000001655d         db  0xa3 ; '.'
000000000001655e         db  0xff ; '.'
000000000001655f         db  0xff ; '.'
0000000000016560         db  0x24 ; '$'
0000000000016561         db  0x22 ; '"'
0000000000016562         db  0x00 ; '.'
0000000000016563         db  0x00 ; '.'
0000000000016564         db  0x20 ; ' '
0000000000016565         db  0xa6 ; '.'
0000000000016566         db  0xff ; '.'
0000000000016567         db  0xff ; '.'
0000000000016568         db  0x68 ; 'h'
0000000000016569         db  0x22 ; '"'
000000000001656a         db  0x00 ; '.'
000000000001656b         db  0x00 ; '.'
000000000001656c         db  0x20 ; ' '
000000000001656d         db  0xad ; '.'
000000000001656e         db  0xff ; '.'
000000000001656f         db  0xff ; '.'
0000000000016570         db  0xb4 ; '.'
0000000000016571         db  0x22 ; '"'
0000000000016572         db  0x00 ; '.'
0000000000016573         db  0x00 ; '.'
0000000000016574         db  0xe0 ; '.'
0000000000016575         db  0xad ; '.'
0000000000016576         db  0xff ; '.'
0000000000016577         db  0xff ; '.'
0000000000016578         db  0xf4 ; '.'
0000000000016579         db  0x22 ; '"'
000000000001657a         db  0x00 ; '.'
000000000001657b         db  0x00 ; '.'
000000000001657c         db  0xc0 ; '.'
000000000001657d         db  0xc2 ; '.'
000000000001657e         db  0xff ; '.'
000000000001657f         db  0xff ; '.'
0000000000016580         db  0x54 ; 'T'
0000000000016581         db  0x23 ; '#'
0000000000016582         db  0x00 ; '.'
0000000000016583         db  0x00 ; '.'
0000000000016584         db  0x50 ; 'P'
0000000000016585         db  0xc4 ; '.'
0000000000016586         db  0xff ; '.'
0000000000016587         db  0xff ; '.'
0000000000016588         db  0xa0 ; '.'
0000000000016589         db  0x23 ; '#'
000000000001658a         db  0x00 ; '.'
000000000001658b         db  0x00 ; '.'
000000000001658c         db  0xd0 ; '.'
000000000001658d         db  0xc5 ; '.'
000000000001658e         db  0xff ; '.'
000000000001658f         db  0xff ; '.'
0000000000016590         db  0xf0 ; '.'
0000000000016591         db  0x23 ; '#'
0000000000016592         db  0x00 ; '.'
0000000000016593         db  0x00 ; '.'
0000000000016594         db  0xd0 ; '.'
0000000000016595         db  0xd6 ; '.'
0000000000016596         db  0xff ; '.'
0000000000016597         db  0xff ; '.'
0000000000016598         db  0x40 ; '@'
0000000000016599         db  0x24 ; '$'
000000000001659a         db  0x00 ; '.'
000000000001659b         db  0x00 ; '.'
000000000001659c         db  0x40 ; '@'
000000000001659d         db  0xd7 ; '.'
000000000001659e         db  0xff ; '.'
000000000001659f         db  0xff ; '.'
00000000000165a0         db  0x60 ; '`'
00000000000165a1         db  0x24 ; '$'
00000000000165a2         db  0x00 ; '.'
00000000000165a3         db  0x00 ; '.'
00000000000165a4         db  0x50 ; 'P'
00000000000165a5         db  0xd7 ; '.'
00000000000165a6         db  0xff ; '.'
00000000000165a7         db  0xff ; '.'
00000000000165a8         db  0x74 ; 't'
00000000000165a9         db  0x24 ; '$'
00000000000165aa         db  0x00 ; '.'
00000000000165ab         db  0x00 ; '.'
00000000000165ac         db  0x20 ; ' '
00000000000165ad         db  0xd8 ; '.'
00000000000165ae         db  0xff ; '.'
00000000000165af         db  0xff ; '.'
00000000000165b0         db  0xa0 ; '.'
00000000000165b1         db  0x24 ; '$'
00000000000165b2         db  0x00 ; '.'
00000000000165b3         db  0x00 ; '.'
00000000000165b4         db  0xa0 ; '.'
00000000000165b5         db  0xdc ; '.'
00000000000165b6         db  0xff ; '.'
00000000000165b7         db  0xff ; '.'
00000000000165b8         db  0x00 ; '.'
00000000000165b9         db  0x25 ; '%'
00000000000165ba         db  0x00 ; '.'
00000000000165bb         db  0x00 ; '.'
00000000000165bc         db  0xc0 ; '.'
00000000000165bd         db  0xdd ; '.'
00000000000165be         db  0xff ; '.'
00000000000165bf         db  0xff ; '.'
00000000000165c0         db  0x58 ; 'X'
00000000000165c1         db  0x25 ; '%'
00000000000165c2         db  0x00 ; '.'
00000000000165c3         db  0x00 ; '.'
00000000000165c4         db  0xd0 ; '.'
00000000000165c5         db  0xde ; '.'
00000000000165c6         db  0xff ; '.'
00000000000165c7         db  0xff ; '.'
00000000000165c8         db  0xa4 ; '.'
00000000000165c9         db  0x25 ; '%'
00000000000165ca         db  0x00 ; '.'
00000000000165cb         db  0x00 ; '.'
00000000000165cc         db  0x60 ; '`'
00000000000165cd         db  0xdf ; '.'
00000000000165ce         db  0xff ; '.'
00000000000165cf         db  0xff ; '.'
00000000000165d0         db  0xe0 ; '.'
00000000000165d1         db  0x25 ; '%'
00000000000165d2         db  0x00 ; '.'
00000000000165d3         db  0x00 ; '.'
00000000000165d4         db  0xb0 ; '.'
00000000000165d5         db  0xdf ; '.'
00000000000165d6         db  0xff ; '.'
00000000000165d7         db  0xff ; '.'
00000000000165d8         db  0xfc ; '.'
00000000000165d9         db  0x25 ; '%'
00000000000165da         db  0x00 ; '.'
00000000000165db         db  0x00 ; '.'
00000000000165dc         db  0x50 ; 'P'
00000000000165dd         db  0xe0 ; '.'
00000000000165de         db  0xff ; '.'
00000000000165df         db  0xff ; '.'
00000000000165e0         db  0x58 ; 'X'
00000000000165e1         db  0x26 ; '&'
00000000000165e2         db  0x00 ; '.'
00000000000165e3         db  0x00 ; '.'
00000000000165e4         db  0x70 ; 'p'
00000000000165e5         db  0xe0 ; '.'
00000000000165e6         db  0xff ; '.'
00000000000165e7         db  0xff ; '.'
00000000000165e8         db  0x78 ; 'x'
00000000000165e9         db  0x26 ; '&'
00000000000165ea         db  0x00 ; '.'
00000000000165eb         db  0x00 ; '.'
00000000000165ec         db  0x90 ; '.'
00000000000165ed         db  0xe0 ; '.'
00000000000165ee         db  0xff ; '.'
00000000000165ef         db  0xff ; '.'
00000000000165f0         db  0x98 ; '.'
00000000000165f1         db  0x26 ; '&'
00000000000165f2         db  0x00 ; '.'
00000000000165f3         db  0x00 ; '.'
00000000000165f4         db  0xb0 ; '.'
00000000000165f5         db  0xe0 ; '.'
00000000000165f6         db  0xff ; '.'
00000000000165f7         db  0xff ; '.'
00000000000165f8         db  0xbc ; '.'
00000000000165f9         db  0x26 ; '&'
00000000000165fa         db  0x00 ; '.'
00000000000165fb         db  0x00 ; '.'
00000000000165fc         db  0xd0 ; '.'
00000000000165fd         db  0xe0 ; '.'
00000000000165fe         db  0xff ; '.'
00000000000165ff         db  0xff ; '.'
0000000000016600         db  0xe0 ; '.'
0000000000016601         db  0x26 ; '&'
0000000000016602         db  0x00 ; '.'
0000000000016603         db  0x00 ; '.'
0000000000016604         db  0x20 ; ' '
0000000000016605         db  0xe1 ; '.'
0000000000016606         db  0xff ; '.'
0000000000016607         db  0xff ; '.'
0000000000016608         db  0xf8 ; '.'
0000000000016609         db  0x26 ; '&'
000000000001660a         db  0x00 ; '.'
000000000001660b         db  0x00 ; '.'
000000000001660c         db  0xa0 ; '.'
000000000001660d         db  0xe1 ; '.'
000000000001660e         db  0xff ; '.'
000000000001660f         db  0xff ; '.'
0000000000016610         db  0x48 ; 'H'
0000000000016611         db  0x27 ; '''
0000000000016612         db  0x00 ; '.'
0000000000016613         db  0x00 ; '.'
0000000000016614         db  0x00 ; '.'
0000000000016615         db  0xe2 ; '.'
0000000000016616         db  0xff ; '.'
0000000000016617         db  0xff ; '.'
0000000000016618         db  0x68 ; 'h'
0000000000016619         db  0x27 ; '''
000000000001661a         db  0x00 ; '.'
000000000001661b         db  0x00 ; '.'
000000000001661c         db  0x40 ; '@'
000000000001661d         db  0xe2 ; '.'
000000000001661e         db  0xff ; '.'
000000000001661f         db  0xff ; '.'
0000000000016620         db  0x88 ; '.'
0000000000016621         db  0x27 ; '''
0000000000016622         db  0x00 ; '.'
0000000000016623         db  0x00 ; '.'
0000000000016624         db  0xb0 ; '.'
0000000000016625         db  0xe2 ; '.'
0000000000016626         db  0xff ; '.'
0000000000016627         db  0xff ; '.'
0000000000016628         db  0xd0 ; '.'
0000000000016629         db  0x27 ; '''
000000000001662a         db  0x00 ; '.'
000000000001662b         db  0x00 ; '.'
000000000001662c         db  0xc0 ; '.'
000000000001662d         db  0xe2 ; '.'
000000000001662e         db  0xff ; '.'
000000000001662f         db  0xff ; '.'
0000000000016630         db  0xe8 ; '.'
0000000000016631         db  0x27 ; '''
0000000000016632         db  0x00 ; '.'
0000000000016633         db  0x00 ; '.'
0000000000016634         db  0x00 ; '.'
0000000000016635         db  0x00 ; '.'
0000000000016636         db  0x00 ; '.'
0000000000016637         db  0x00 ; '.'


        ; Section .eh_frame
        ; Range: [0x16638; 0x188c0[ (8840 bytes)
        ; File offset : [91704; 100544[ (8840 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

0000000000016638         dd         0x00000014                                  ; Length of the record
000000000001663c         dd         0x00000000                                  ; CIE ID
0000000000016640         db         0x01                                        ; Version
0000000000016641         db         "zR", 0                                     ; Augmentation String
0000000000016644         db         0x01                                        ; Code Alignment Factor (unsigned LEB128=1)
0000000000016645         db         0x78                                        ; Data Alignment Factor (signed LEB128=-8)
0000000000016646         db         0x10                                        ; Return address register
0000000000016647         db         0x01                                        ; Augmentation data length
0000000000016648         db         0x1b                                        ; FDE encoding
0000000000016649         db  0x0c ; '.'
000000000001664a         db  0x07 ; '.'
000000000001664b         db  0x08 ; '.'
000000000001664c         db  0x90 ; '.'
000000000001664d         db  0x01 ; '.'
000000000001664e         db  0x07 ; '.'
000000000001664f         db  0x10 ; '.'
0000000000016650         dd         0x00000014                                  ; Length of the record
0000000000016654         dd         0x0000001c                                  ; FDE: parent CIE at 0x16638 (FDE encoding = 0x1B)
0000000000016658         db         0xb8, 0xbc, 0xfe, 0xff                      ; begin 0x2310
000000000001665c         db         0x2b, 3 dup (0x00)                          ; length 0x2b (end at 0x233b)
0000000000016660         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016661         align      8
0000000000016668         dd         0x00000014                                  ; Length of the record
000000000001666c         dd         0x00000000                                  ; CIE ID
0000000000016670         db         0x01                                        ; Version
0000000000016671         db         "zR", 0                                     ; Augmentation String
0000000000016674         db         0x01                                        ; Code Alignment Factor (unsigned LEB128=1)
0000000000016675         db         0x78                                        ; Data Alignment Factor (signed LEB128=-8)
0000000000016676         db         0x10                                        ; Return address register
0000000000016677         db         0x01                                        ; Augmentation data length
0000000000016678         db         0x1b                                        ; FDE encoding
0000000000016679         db  0x0c ; '.'
000000000001667a         db  0x07 ; '.'
000000000001667b         db  0x08 ; '.'
000000000001667c         db  0x90 ; '.'
000000000001667d         db  0x01 ; '.'
000000000001667e         db  0x00 ; '.'
000000000001667f         db  0x00 ; '.'
0000000000016680         dd         0x00000024                                  ; Length of the record
0000000000016684         dd         0x0000001c                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000016688         db         0x18, 0xb2, 0xfe, 0xff                      ; begin 0x18a0
000000000001668c         db         0xe0, 0x03, 2 dup (0x00)                    ; length 0x3e0 (end at 0x1c80)
0000000000016690         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016691         db  0x0e ; '.'
0000000000016692         db  0x10 ; '.'
0000000000016693         db  0x46 ; 'F'
0000000000016694         db  0x0e ; '.'
0000000000016695         db  0x18 ; '.'
0000000000016696         db  0x4a ; 'J'
0000000000016697         db  0x0f ; '.'
0000000000016698         db  0x0b ; '.'
0000000000016699         db  0x77 ; 'w'
000000000001669a         db  0x08 ; '.'
000000000001669b         db  0x80 ; '.'
000000000001669c         db  0x00 ; '.'
000000000001669d         db  0x3f ; '?'
000000000001669e         db  0x1a ; '.'
000000000001669f         db  0x3b ; ';'
00000000000166a0         db  0x2a ; '*'
00000000000166a1         db  0x33 ; '3'
00000000000166a2         db  0x24 ; '$'
00000000000166a3         db  0x22 ; '"'
00000000000166a4         db  0x00 ; '.'
00000000000166a5         db  0x00 ; '.'
00000000000166a6         db  0x00 ; '.'
00000000000166a7         db  0x00 ; '.'
00000000000166a8         dd         0x00000014                                  ; Length of the record
00000000000166ac         dd         0x00000044                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
00000000000166b0         db         0xd0, 0xb5, 0xfe, 0xff                      ; begin 0x1c80
00000000000166b4         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0x1c88)
00000000000166b8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000166b9         align      64
00000000000166c0         dd         0x00000030                                  ; Length of the record
00000000000166c4         dd         0x0000005c                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
00000000000166c8         db         0x58, 0xbd, 0xfe, 0xff                      ; begin 0x2420
00000000000166cc         db         0xb5, 3 dup (0x00)                          ; length 0xb5 (end at 0x24d5)
00000000000166d0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000166d1         db  0x59 ; 'Y'
00000000000166d2         db  0x0e ; '.'
00000000000166d3         db  0x10 ; '.'
00000000000166d4         db  0x86 ; '.'
00000000000166d5         db  0x02 ; '.'
00000000000166d6         db  0x45 ; 'E'
00000000000166d7         db  0x0e ; '.'
00000000000166d8         db  0x18 ; '.'
00000000000166d9         db  0x83 ; '.'
00000000000166da         db  0x03 ; '.'
00000000000166db         db  0x47 ; 'G'
00000000000166dc         db  0x0e ; '.'
00000000000166dd         db  0x20 ; ' '
00000000000166de         db  0x02 ; '.'
00000000000166df         db  0x56 ; 'V'
00000000000166e0         db  0x0e ; '.'
00000000000166e1         db  0x18 ; '.'
00000000000166e2         db  0x46 ; 'F'
00000000000166e3         db  0x0e ; '.'
00000000000166e4         db  0x10 ; '.'
00000000000166e5         db  0x41 ; 'A'
00000000000166e6         db  0x0e ; '.'
00000000000166e7         db  0x08 ; '.'
00000000000166e8         db  0x46 ; 'F'
00000000000166e9         db  0xc3 ; '.'
00000000000166ea         db  0xc6 ; '.'
00000000000166eb         db  0x55 ; 'U'
00000000000166ec         db  0x0e ; '.'
00000000000166ed         db  0x20 ; ' '
00000000000166ee         db  0x83 ; '.'
00000000000166ef         db  0x03 ; '.'
00000000000166f0         db  0x86 ; '.'
00000000000166f1         db  0x02 ; '.'
00000000000166f2         db  0x00 ; '.'
00000000000166f3         db  0x00 ; '.'
00000000000166f4         dd         0x00000018                                  ; Length of the record
00000000000166f8         dd         0x00000090                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
00000000000166fc         db         0xe4, 0xbd, 0xfe, 0xff                      ; begin 0x24e0
0000000000016700         db         0x71, 3 dup (0x00)                          ; length 0x71 (end at 0x2551)
0000000000016704         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016705         db  0x44 ; 'D'
0000000000016706         db  0x0e ; '.'
0000000000016707         db  0x10 ; '.'
0000000000016708         db  0x02 ; '.'
0000000000016709         db  0x48 ; 'H'
000000000001670a         db  0x0a ; '.'
000000000001670b         db  0x0e ; '.'
000000000001670c         db  0x08 ; '.'
000000000001670d         db  0x41 ; 'A'
000000000001670e         db  0x0b ; '.'
000000000001670f         db  0x00 ; '.'
0000000000016710         dd         0x0000007c                                  ; Length of the record
0000000000016714         dd         0x000000ac                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000016718         db         0x48, 0xbe, 0xfe, 0xff                      ; begin 0x2560
000000000001671c         db         0x08, 0x04, 2 dup (0x00)                    ; length 0x408 (end at 0x2968)
0000000000016720         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016721         db  0x42 ; 'B'
0000000000016722         db  0x0e ; '.'
0000000000016723         db  0x10 ; '.'
0000000000016724         db  0x8f ; '.'
0000000000016725         db  0x02 ; '.'
0000000000016726         db  0x42 ; 'B'
0000000000016727         db  0x0e ; '.'
0000000000016728         db  0x18 ; '.'
0000000000016729         db  0x8e ; '.'
000000000001672a         db  0x03 ; '.'
000000000001672b         db  0x45 ; 'E'
000000000001672c         db  0x0e ; '.'
000000000001672d         db  0x20 ; ' '
000000000001672e         db  0x8d ; '.'
000000000001672f         db  0x04 ; '.'
0000000000016730         db  0x42 ; 'B'
0000000000016731         db  0x0e ; '.'
0000000000016732         db  0x28 ; '('
0000000000016733         db  0x8c ; '.'
0000000000016734         db  0x05 ; '.'
0000000000016735         db  0x46 ; 'F'
0000000000016736         db  0x0e ; '.'
0000000000016737         db  0x30 ; '0'
0000000000016738         db  0x86 ; '.'
0000000000016739         db  0x06 ; '.'
000000000001673a         db  0x41 ; 'A'
000000000001673b         db  0x0e ; '.'
000000000001673c         db  0x38 ; '8'
000000000001673d         db  0x83 ; '.'
000000000001673e         db  0x07 ; '.'
000000000001673f         db  0x44 ; 'D'
0000000000016740         db  0x0e ; '.'
0000000000016741         db  0x50 ; 'P'
0000000000016742         db  0x03 ; '.'
0000000000016743         db  0x75 ; 'u'
0000000000016744         db  0x01 ; '.'
0000000000016745         db  0x0a ; '.'
0000000000016746         db  0x0e ; '.'
0000000000016747         db  0x38 ; '8'
0000000000016748         db  0x41 ; 'A'
0000000000016749         db  0x0e ; '.'
000000000001674a         db  0x30 ; '0'
000000000001674b         db  0x41 ; 'A'
000000000001674c         db  0x0e ; '.'
000000000001674d         db  0x28 ; '('
000000000001674e         db  0x42 ; 'B'
000000000001674f         db  0x0e ; '.'
0000000000016750         db  0x20 ; ' '
0000000000016751         db  0x42 ; 'B'
0000000000016752         db  0x0e ; '.'
0000000000016753         db  0x18 ; '.'
0000000000016754         db  0x42 ; 'B'
0000000000016755         db  0x0e ; '.'
0000000000016756         db  0x10 ; '.'
0000000000016757         db  0x42 ; 'B'
0000000000016758         db  0x0e ; '.'
0000000000016759         db  0x08 ; '.'
000000000001675a         db  0x4b ; 'K'
000000000001675b         db  0x0b ; '.'
000000000001675c         db  0x03 ; '.'
000000000001675d         db  0xcb ; '.'
000000000001675e         db  0x01 ; '.'
000000000001675f         db  0x0a ; '.'
0000000000016760         db  0x0e ; '.'
0000000000016761         db  0x38 ; '8'
0000000000016762         db  0x46 ; 'F'
0000000000016763         db  0x0e ; '.'
0000000000016764         db  0x30 ; '0'
0000000000016765         db  0x41 ; 'A'
0000000000016766         db  0x0e ; '.'
0000000000016767         db  0x28 ; '('
0000000000016768         db  0x42 ; 'B'
0000000000016769         db  0x0e ; '.'
000000000001676a         db  0x20 ; ' '
000000000001676b         db  0x42 ; 'B'
000000000001676c         db  0x0e ; '.'
000000000001676d         db  0x18 ; '.'
000000000001676e         db  0x42 ; 'B'
000000000001676f         db  0x0e ; '.'
0000000000016770         db  0x10 ; '.'
0000000000016771         db  0x42 ; 'B'
0000000000016772         db  0x0e ; '.'
0000000000016773         db  0x08 ; '.'
0000000000016774         db  0x46 ; 'F'
0000000000016775         db  0x0b ; '.'
0000000000016776         db  0x02 ; '.'
0000000000016777         db  0x4f ; 'O'
0000000000016778         db  0x0a ; '.'
0000000000016779         db  0x0e ; '.'
000000000001677a         db  0x38 ; '8'
000000000001677b         db  0x43 ; 'C'
000000000001677c         db  0x0e ; '.'
000000000001677d         db  0x30 ; '0'
000000000001677e         db  0x41 ; 'A'
000000000001677f         db  0x0e ; '.'
0000000000016780         db  0x28 ; '('
0000000000016781         db  0x42 ; 'B'
0000000000016782         db  0x0e ; '.'
0000000000016783         db  0x20 ; ' '
0000000000016784         db  0x42 ; 'B'
0000000000016785         db  0x0e ; '.'
0000000000016786         db  0x18 ; '.'
0000000000016787         db  0x42 ; 'B'
0000000000016788         db  0x0e ; '.'
0000000000016789         db  0x10 ; '.'
000000000001678a         db  0x42 ; 'B'
000000000001678b         db  0x0e ; '.'
000000000001678c         db  0x08 ; '.'
000000000001678d         db  0x41 ; 'A'
000000000001678e         db  0x0b ; '.'
000000000001678f         db  0x00 ; '.'
0000000000016790         dd         0x00000028                                  ; Length of the record
0000000000016794         dd         0x0000012c                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000016798         db         0xd8, 0xc1, 0xfe, 0xff                      ; begin 0x2970
000000000001679c         db         0x6a, 0x04, 2 dup (0x00)                    ; length 0x46a (end at 0x2dda)
00000000000167a0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000167a1         db  0x42 ; 'B'
00000000000167a2         db  0x0e ; '.'
00000000000167a3         db  0x10 ; '.'
00000000000167a4         db  0x8d ; '.'
00000000000167a5         db  0x02 ; '.'
00000000000167a6         db  0x42 ; 'B'
00000000000167a7         db  0x0e ; '.'
00000000000167a8         db  0x18 ; '.'
00000000000167a9         db  0x8c ; '.'
00000000000167aa         db  0x03 ; '.'
00000000000167ab         db  0x46 ; 'F'
00000000000167ac         db  0x0e ; '.'
00000000000167ad         db  0x20 ; ' '
00000000000167ae         db  0x86 ; '.'
00000000000167af         db  0x04 ; '.'
00000000000167b0         db  0x41 ; 'A'
00000000000167b1         db  0x0e ; '.'
00000000000167b2         db  0x28 ; '('
00000000000167b3         db  0x83 ; '.'
00000000000167b4         db  0x05 ; '.'
00000000000167b5         db  0x49 ; 'I'
00000000000167b6         db  0x0e ; '.'
00000000000167b7         db  0xb0 ; '.'
00000000000167b8         db  0x01 ; '.'
00000000000167b9         db  0x00 ; '.'
00000000000167ba         db  0x00 ; '.'
00000000000167bb         db  0x00 ; '.'
00000000000167bc         dd         0x00000058                                  ; Length of the record
00000000000167c0         dd         0x00000158                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
00000000000167c4         db         0xcc, 0xb4, 0xfe, 0xff                      ; begin 0x1c90
00000000000167c8         db         0x74, 0x06, 2 dup (0x00)                    ; length 0x674 (end at 0x2304)
00000000000167cc         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000167cd         db  0x42 ; 'B'
00000000000167ce         db  0x0e ; '.'
00000000000167cf         db  0x10 ; '.'
00000000000167d0         db  0x8f ; '.'
00000000000167d1         db  0x02 ; '.'
00000000000167d2         db  0x42 ; 'B'
00000000000167d3         db  0x0e ; '.'
00000000000167d4         db  0x18 ; '.'
00000000000167d5         db  0x8e ; '.'
00000000000167d6         db  0x03 ; '.'
00000000000167d7         db  0x49 ; 'I'
00000000000167d8         db  0x0e ; '.'
00000000000167d9         db  0x20 ; ' '
00000000000167da         db  0x8d ; '.'
00000000000167db         db  0x04 ; '.'
00000000000167dc         db  0x42 ; 'B'
00000000000167dd         db  0x0e ; '.'
00000000000167de         db  0x28 ; '('
00000000000167df         db  0x8c ; '.'
00000000000167e0         db  0x05 ; '.'
00000000000167e1         db  0x48 ; 'H'
00000000000167e2         db  0x0e ; '.'
00000000000167e3         db  0x30 ; '0'
00000000000167e4         db  0x86 ; '.'
00000000000167e5         db  0x06 ; '.'
00000000000167e6         db  0x41 ; 'A'
00000000000167e7         db  0x0e ; '.'
00000000000167e8         db  0x38 ; '8'
00000000000167e9         db  0x83 ; '.'
00000000000167ea         db  0x07 ; '.'
00000000000167eb         db  0x56 ; 'V'
00000000000167ec         db  0x0e ; '.'
00000000000167ed         db  0x50 ; 'P'
00000000000167ee         db  0x03 ; '.'
00000000000167ef         db  0x41 ; 'A'
00000000000167f0         db  0x01 ; '.'
00000000000167f1         db  0x0a ; '.'
00000000000167f2         db  0x0e ; '.'
00000000000167f3         db  0x58 ; 'X'
00000000000167f4         db  0x50 ; 'P'
00000000000167f5         db  0x0e ; '.'
00000000000167f6         db  0x60 ; '`'
00000000000167f7         db  0x71 ; 'q'
00000000000167f8         db  0x0b ; '.'
00000000000167f9         db  0x03 ; '.'
00000000000167fa         db  0x2e ; '.'
00000000000167fb         db  0x04 ; '.'
00000000000167fc         db  0x0a ; '.'
00000000000167fd         db  0x0e ; '.'
00000000000167fe         db  0x38 ; '8'
00000000000167ff         db  0x45 ; 'E'
0000000000016800         db  0x0e ; '.'
0000000000016801         db  0x30 ; '0'
0000000000016802         db  0x45 ; 'E'
0000000000016803         db  0x0e ; '.'
0000000000016804         db  0x28 ; '('
0000000000016805         db  0x42 ; 'B'
0000000000016806         db  0x0e ; '.'
0000000000016807         db  0x20 ; ' '
0000000000016808         db  0x42 ; 'B'
0000000000016809         db  0x0e ; '.'
000000000001680a         db  0x18 ; '.'
000000000001680b         db  0x42 ; 'B'
000000000001680c         db  0x0e ; '.'
000000000001680d         db  0x10 ; '.'
000000000001680e         db  0x42 ; 'B'
000000000001680f         db  0x0e ; '.'
0000000000016810         db  0x08 ; '.'
0000000000016811         db  0x41 ; 'A'
0000000000016812         db  0x0b ; '.'
0000000000016813         db  0x00 ; '.'
0000000000016814         db  0x00 ; '.'
0000000000016815         db  0x00 ; '.'
0000000000016816         db  0x00 ; '.'
0000000000016817         db  0x00 ; '.'
0000000000016818         dd         0x00000010                                  ; Length of the record
000000000001681c         dd         0x000001b4                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000016820         db         0xc0, 0xc5, 0xfe, 0xff                      ; begin 0x2de0
0000000000016824         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0x2de8)
0000000000016828         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016829         align      4
000000000001682c         dd         0x00000010                                  ; Length of the record
0000000000016830         dd         0x000001c8                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000016834         db         0xbc, 0xc5, 0xfe, 0xff                      ; begin 0x2df0
0000000000016838         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0x2df8)
000000000001683c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001683d         align      64
0000000000016840         dd         0x0000002c                                  ; Length of the record
0000000000016844         dd         0x000001dc                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000016848         db         0xb8, 0xc5, 0xfe, 0xff                      ; begin 0x2e00
000000000001684c         db         0xa4, 3 dup (0x00)                          ; length 0xa4 (end at 0x2ea4)
0000000000016850         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016851         db  0x41 ; 'A'
0000000000016852         db  0x0e ; '.'
0000000000016853         db  0x10 ; '.'
0000000000016854         db  0x86 ; '.'
0000000000016855         db  0x02 ; '.'
0000000000016856         db  0x41 ; 'A'
0000000000016857         db  0x0e ; '.'
0000000000016858         db  0x18 ; '.'
0000000000016859         db  0x83 ; '.'
000000000001685a         db  0x03 ; '.'
000000000001685b         db  0x44 ; 'D'
000000000001685c         db  0x0e ; '.'
000000000001685d         db  0x20 ; ' '
000000000001685e         db  0x7a ; 'z'
000000000001685f         db  0x0a ; '.'
0000000000016860         db  0x0e ; '.'
0000000000016861         db  0x18 ; '.'
0000000000016862         db  0x41 ; 'A'
0000000000016863         db  0x0e ; '.'
0000000000016864         db  0x10 ; '.'
0000000000016865         db  0x41 ; 'A'
0000000000016866         db  0x0e ; '.'
0000000000016867         db  0x08 ; '.'
0000000000016868         db  0x41 ; 'A'
0000000000016869         db  0x0b ; '.'
000000000001686a         db  0x00 ; '.'
000000000001686b         db  0x00 ; '.'
000000000001686c         db  0x00 ; '.'
000000000001686d         db  0x00 ; '.'
000000000001686e         db  0x00 ; '.'
000000000001686f         db  0x00 ; '.'
0000000000016870         dd         0x00000010                                  ; Length of the record
0000000000016874         dd         0x0000020c                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000016878         db         0x38, 0xc6, 0xfe, 0xff                      ; begin 0x2eb0
000000000001687c         db         0x05, 3 dup (0x00)                          ; length 0x5 (end at 0x2eb5)
0000000000016880         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016881         align      4
0000000000016884         dd         0x00000018                                  ; Length of the record
0000000000016888         dd         0x00000220                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
000000000001688c         db         0x34, 0xc6, 0xfe, 0xff                      ; begin 0x2ec0
0000000000016890         db         0x22, 3 dup (0x00)                          ; length 0x22 (end at 0x2ee2)
0000000000016894         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016895         db  0x46 ; 'F'
0000000000016896         db  0x0e ; '.'
0000000000016897         db  0x10 ; '.'
0000000000016898         db  0x83 ; '.'
0000000000016899         db  0x02 ; '.'
000000000001689a         db  0x4e ; 'N'
000000000001689b         db  0xc3 ; '.'
000000000001689c         db  0x0e ; '.'
000000000001689d         db  0x08 ; '.'
000000000001689e         db  0x00 ; '.'
000000000001689f         db  0x00 ; '.'
00000000000168a0         dd         0x00000010                                  ; Length of the record
00000000000168a4         dd         0x0000023c                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
00000000000168a8         db         0x48, 0xc6, 0xfe, 0xff                      ; begin 0x2ef0
00000000000168ac         db         0x10, 3 dup (0x00)                          ; length 0x10 (end at 0x2f00)
00000000000168b0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000168b1         align      4
00000000000168b4         dd         0x00000060                                  ; Length of the record
00000000000168b8         dd         0x00000250                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
00000000000168bc         db         0x44, 0xc6, 0xfe, 0xff                      ; begin 0x2f00
00000000000168c0         db         0x08, 0x01, 2 dup (0x00)                    ; length 0x108 (end at 0x3008)
00000000000168c4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000168c5         db  0x42 ; 'B'
00000000000168c6         db  0x0e ; '.'
00000000000168c7         db  0x10 ; '.'
00000000000168c8         db  0x8f ; '.'
00000000000168c9         db  0x02 ; '.'
00000000000168ca         db  0x42 ; 'B'
00000000000168cb         db  0x0e ; '.'
00000000000168cc         db  0x18 ; '.'
00000000000168cd         db  0x8e ; '.'
00000000000168ce         db  0x03 ; '.'
00000000000168cf         db  0x42 ; 'B'
00000000000168d0         db  0x0e ; '.'
00000000000168d1         db  0x20 ; ' '
00000000000168d2         db  0x8d ; '.'
00000000000168d3         db  0x04 ; '.'
00000000000168d4         db  0x42 ; 'B'
00000000000168d5         db  0x0e ; '.'
00000000000168d6         db  0x28 ; '('
00000000000168d7         db  0x8c ; '.'
00000000000168d8         db  0x05 ; '.'
00000000000168d9         db  0x41 ; 'A'
00000000000168da         db  0x0e ; '.'
00000000000168db         db  0x30 ; '0'
00000000000168dc         db  0x86 ; '.'
00000000000168dd         db  0x06 ; '.'
00000000000168de         db  0x41 ; 'A'
00000000000168df         db  0x0e ; '.'
00000000000168e0         db  0x38 ; '8'
00000000000168e1         db  0x83 ; '.'
00000000000168e2         db  0x07 ; '.'
00000000000168e3         db  0x44 ; 'D'
00000000000168e4         db  0x0e ; '.'
00000000000168e5         db  0x50 ; 'P'
00000000000168e6         db  0x02 ; '.'
00000000000168e7         db  0x96 ; '.'
00000000000168e8         db  0x0a ; '.'
00000000000168e9         db  0x0e ; '.'
00000000000168ea         db  0x38 ; '8'
00000000000168eb         db  0x41 ; 'A'
00000000000168ec         db  0x0e ; '.'
00000000000168ed         db  0x30 ; '0'
00000000000168ee         db  0x41 ; 'A'
00000000000168ef         db  0x0e ; '.'
00000000000168f0         db  0x28 ; '('
00000000000168f1         db  0x42 ; 'B'
00000000000168f2         db  0x0e ; '.'
00000000000168f3         db  0x20 ; ' '
00000000000168f4         db  0x42 ; 'B'
00000000000168f5         db  0x0e ; '.'
00000000000168f6         db  0x18 ; '.'
00000000000168f7         db  0x42 ; 'B'
00000000000168f8         db  0x0e ; '.'
00000000000168f9         db  0x10 ; '.'
00000000000168fa         db  0x42 ; 'B'
00000000000168fb         db  0x0e ; '.'
00000000000168fc         db  0x08 ; '.'
00000000000168fd         db  0x42 ; 'B'
00000000000168fe         db  0x0b ; '.'
00000000000168ff         db  0x02 ; '.'
0000000000016900         db  0x44 ; 'D'
0000000000016901         db  0x0a ; '.'
0000000000016902         db  0x0e ; '.'
0000000000016903         db  0x38 ; '8'
0000000000016904         db  0x43 ; 'C'
0000000000016905         db  0x0e ; '.'
0000000000016906         db  0x30 ; '0'
0000000000016907         db  0x41 ; 'A'
0000000000016908         db  0x0e ; '.'
0000000000016909         db  0x28 ; '('
000000000001690a         db  0x42 ; 'B'
000000000001690b         db  0x0e ; '.'
000000000001690c         db  0x20 ; ' '
000000000001690d         db  0x42 ; 'B'
000000000001690e         db  0x0e ; '.'
000000000001690f         db  0x18 ; '.'
0000000000016910         db  0x42 ; 'B'
0000000000016911         db  0x0e ; '.'
0000000000016912         db  0x10 ; '.'
0000000000016913         db  0x42 ; 'B'
0000000000016914         db  0x0e ; '.'
0000000000016915         db  0x08 ; '.'
0000000000016916         db  0x41 ; 'A'
0000000000016917         db  0x0b ; '.'
0000000000016918         dd         0x00000010                                  ; Length of the record
000000000001691c         dd         0x000002b4                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000016920         db         0xf0, 0xc6, 0xfe, 0xff                      ; begin 0x3010
0000000000016924         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0x301a)
0000000000016928         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016929         align      4
000000000001692c         dd         0x00000010                                  ; Length of the record
0000000000016930         dd         0x000002c8                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000016934         db         0xec, 0xc6, 0xfe, 0xff                      ; begin 0x3020
0000000000016938         db         0x09, 3 dup (0x00)                          ; length 0x9 (end at 0x3029)
000000000001693c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001693d         align      64
0000000000016940         dd         0x0000001c                                  ; Length of the record
0000000000016944         dd         0x000002dc                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000016948         db         0xe8, 0xc6, 0xfe, 0xff                      ; begin 0x3030
000000000001694c         db         0x9f, 3 dup (0x00)                          ; length 0x9f (end at 0x30cf)
0000000000016950         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016951         db  0x44 ; 'D'
0000000000016952         db  0x0e ; '.'
0000000000016953         db  0x10 ; '.'
0000000000016954         db  0x83 ; '.'
0000000000016955         db  0x02 ; '.'
0000000000016956         db  0x02 ; '.'
0000000000016957         db  0x78 ; 'x'
0000000000016958         db  0x0a ; '.'
0000000000016959         db  0x0e ; '.'
000000000001695a         db  0x08 ; '.'
000000000001695b         db  0x41 ; 'A'
000000000001695c         db  0x0b ; '.'
000000000001695d         db  0x00 ; '.'
000000000001695e         db  0x00 ; '.'
000000000001695f         db  0x00 ; '.'
0000000000016960         dd         0x00000040                                  ; Length of the record
0000000000016964         dd         0x000002fc                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000016968         db         0x68, 0xc7, 0xfe, 0xff                      ; begin 0x30d0
000000000001696c         db         0xe7, 3 dup (0x00)                          ; length 0xe7 (end at 0x31b7)
0000000000016970         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016971         db  0x41 ; 'A'
0000000000016972         db  0x0e ; '.'
0000000000016973         db  0x10 ; '.'
0000000000016974         db  0x86 ; '.'
0000000000016975         db  0x02 ; '.'
0000000000016976         db  0x41 ; 'A'
0000000000016977         db  0x0e ; '.'
0000000000016978         db  0x18 ; '.'
0000000000016979         db  0x83 ; '.'
000000000001697a         db  0x03 ; '.'
000000000001697b         db  0x49 ; 'I'
000000000001697c         db  0x0e ; '.'
000000000001697d         db  0x20 ; ' '
000000000001697e         db  0x6e ; 'n'
000000000001697f         db  0x0a ; '.'
0000000000016980         db  0x0e ; '.'
0000000000016981         db  0x18 ; '.'
0000000000016982         db  0x41 ; 'A'
0000000000016983         db  0x0e ; '.'
0000000000016984         db  0x10 ; '.'
0000000000016985         db  0x41 ; 'A'
0000000000016986         db  0x0e ; '.'
0000000000016987         db  0x08 ; '.'
0000000000016988         db  0x45 ; 'E'
0000000000016989         db  0x0b ; '.'
000000000001698a         db  0x02 ; '.'
000000000001698b         db  0x4a ; 'J'
000000000001698c         db  0x0a ; '.'
000000000001698d         db  0x0e ; '.'
000000000001698e         db  0x18 ; '.'
000000000001698f         db  0x41 ; 'A'
0000000000016990         db  0x0e ; '.'
0000000000016991         db  0x10 ; '.'
0000000000016992         db  0x41 ; 'A'
0000000000016993         db  0x0e ; '.'
0000000000016994         db  0x08 ; '.'
0000000000016995         db  0x44 ; 'D'
0000000000016996         db  0x0b ; '.'
0000000000016997         db  0x02 ; '.'
0000000000016998         db  0x54 ; 'T'
0000000000016999         db  0x0e ; '.'
000000000001699a         db  0x18 ; '.'
000000000001699b         db  0x41 ; 'A'
000000000001699c         db  0x0e ; '.'
000000000001699d         db  0x10 ; '.'
000000000001699e         db  0x41 ; 'A'
000000000001699f         db  0x0e ; '.'
00000000000169a0         db  0x08 ; '.'
00000000000169a1         db  0x00 ; '.'
00000000000169a2         db  0x00 ; '.'
00000000000169a3         db  0x00 ; '.'
00000000000169a4         dd         0x00000074                                  ; Length of the record
00000000000169a8         dd         0x00000340                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
00000000000169ac         db         0x14, 0xc8, 0xfe, 0xff                      ; begin 0x31c0
00000000000169b0         db         0x34, 0x12, 2 dup (0x00)                    ; length 0x1234 (end at 0x43f4)
00000000000169b4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000169b5         db  0x42 ; 'B'
00000000000169b6         db  0x0e ; '.'
00000000000169b7         db  0x10 ; '.'
00000000000169b8         db  0x8f ; '.'
00000000000169b9         db  0x02 ; '.'
00000000000169ba         db  0x42 ; 'B'
00000000000169bb         db  0x0e ; '.'
00000000000169bc         db  0x18 ; '.'
00000000000169bd         db  0x8e ; '.'
00000000000169be         db  0x03 ; '.'
00000000000169bf         db  0x45 ; 'E'
00000000000169c0         db  0x0e ; '.'
00000000000169c1         db  0x20 ; ' '
00000000000169c2         db  0x8d ; '.'
00000000000169c3         db  0x04 ; '.'
00000000000169c4         db  0x42 ; 'B'
00000000000169c5         db  0x0e ; '.'
00000000000169c6         db  0x28 ; '('
00000000000169c7         db  0x8c ; '.'
00000000000169c8         db  0x05 ; '.'
00000000000169c9         db  0x44 ; 'D'
00000000000169ca         db  0x0e ; '.'
00000000000169cb         db  0x30 ; '0'
00000000000169cc         db  0x86 ; '.'
00000000000169cd         db  0x06 ; '.'
00000000000169ce         db  0x41 ; 'A'
00000000000169cf         db  0x0e ; '.'
00000000000169d0         db  0x38 ; '8'
00000000000169d1         db  0x83 ; '.'
00000000000169d2         db  0x07 ; '.'
00000000000169d3         db  0x53 ; 'S'
00000000000169d4         db  0x0e ; '.'
00000000000169d5         db  0xf0 ; '.'
00000000000169d6         db  0x01 ; '.'
00000000000169d7         db  0x03 ; '.'
00000000000169d8         db  0x81 ; '.'
00000000000169d9         db  0x0b ; '.'
00000000000169da         db  0x0e ; '.'
00000000000169db         db  0xf8 ; '.'
00000000000169dc         db  0x01 ; '.'
00000000000169dd         db  0x4a ; 'J'
00000000000169de         db  0x0e ; '.'
00000000000169df         db  0x80 ; '.'
00000000000169e0         db  0x02 ; '.'
00000000000169e1         db  0x44 ; 'D'
00000000000169e2         db  0x0e ; '.'
00000000000169e3         db  0x88 ; '.'
00000000000169e4         db  0x02 ; '.'
00000000000169e5         db  0x45 ; 'E'
00000000000169e6         db  0x0e ; '.'
00000000000169e7         db  0x90 ; '.'
00000000000169e8         db  0x02 ; '.'
00000000000169e9         db  0x5f ; '_'
00000000000169ea         db  0x0e ; '.'
00000000000169eb         db  0xf0 ; '.'
00000000000169ec         db  0x01 ; '.'
00000000000169ed         db  0x64 ; 'd'
00000000000169ee         db  0x0a ; '.'
00000000000169ef         db  0x0e ; '.'
00000000000169f0         db  0x38 ; '8'
00000000000169f1         db  0x41 ; 'A'
00000000000169f2         db  0x0e ; '.'
00000000000169f3         db  0x30 ; '0'
00000000000169f4         db  0x41 ; 'A'
00000000000169f5         db  0x0e ; '.'
00000000000169f6         db  0x28 ; '('
00000000000169f7         db  0x42 ; 'B'
00000000000169f8         db  0x0e ; '.'
00000000000169f9         db  0x20 ; ' '
00000000000169fa         db  0x42 ; 'B'
00000000000169fb         db  0x0e ; '.'
00000000000169fc         db  0x18 ; '.'
00000000000169fd         db  0x42 ; 'B'
00000000000169fe         db  0x0e ; '.'
00000000000169ff         db  0x10 ; '.'
0000000000016a00         db  0x42 ; 'B'
0000000000016a01         db  0x0e ; '.'
0000000000016a02         db  0x08 ; '.'
0000000000016a03         db  0x44 ; 'D'
0000000000016a04         db  0x0b ; '.'
0000000000016a05         db  0x03 ; '.'
0000000000016a06         db  0x99 ; '.'
0000000000016a07         db  0x05 ; '.'
0000000000016a08         db  0x0e ; '.'
0000000000016a09         db  0xf8 ; '.'
0000000000016a0a         db  0x01 ; '.'
0000000000016a0b         db  0x4d ; 'M'
0000000000016a0c         db  0x0e ; '.'
0000000000016a0d         db  0x80 ; '.'
0000000000016a0e         db  0x02 ; '.'
0000000000016a0f         db  0x44 ; 'D'
0000000000016a10         db  0x0e ; '.'
0000000000016a11         db  0x88 ; '.'
0000000000016a12         db  0x02 ; '.'
0000000000016a13         db  0x47 ; 'G'
0000000000016a14         db  0x0e ; '.'
0000000000016a15         db  0x90 ; '.'
0000000000016a16         db  0x02 ; '.'
0000000000016a17         db  0x5b ; '['
0000000000016a18         db  0x0e ; '.'
0000000000016a19         db  0xf0 ; '.'
0000000000016a1a         db  0x01 ; '.'
0000000000016a1b         db  0x00 ; '.'
0000000000016a1c         dd         0x00000068                                  ; Length of the record
0000000000016a20         dd         0x000003b8                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000016a24         db         0xdc, 0xd9, 0xfe, 0xff                      ; begin 0x4400
0000000000016a28         db         0xab, 0x01, 2 dup (0x00)                    ; length 0x1ab (end at 0x45ab)
0000000000016a2c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016a2d         db  0x42 ; 'B'
0000000000016a2e         db  0x0e ; '.'
0000000000016a2f         db  0x10 ; '.'
0000000000016a30         db  0x8f ; '.'
0000000000016a31         db  0x02 ; '.'
0000000000016a32         db  0x42 ; 'B'
0000000000016a33         db  0x0e ; '.'
0000000000016a34         db  0x18 ; '.'
0000000000016a35         db  0x8e ; '.'
0000000000016a36         db  0x03 ; '.'
0000000000016a37         db  0x45 ; 'E'
0000000000016a38         db  0x0e ; '.'
0000000000016a39         db  0x20 ; ' '
0000000000016a3a         db  0x8d ; '.'
0000000000016a3b         db  0x04 ; '.'
0000000000016a3c         db  0x42 ; 'B'
0000000000016a3d         db  0x0e ; '.'
0000000000016a3e         db  0x28 ; '('
0000000000016a3f         db  0x8c ; '.'
0000000000016a40         db  0x05 ; '.'
0000000000016a41         db  0x44 ; 'D'
0000000000016a42         db  0x0e ; '.'
0000000000016a43         db  0x30 ; '0'
0000000000016a44         db  0x86 ; '.'
0000000000016a45         db  0x06 ; '.'
0000000000016a46         db  0x41 ; 'A'
0000000000016a47         db  0x0e ; '.'
0000000000016a48         db  0x38 ; '8'
0000000000016a49         db  0x83 ; '.'
0000000000016a4a         db  0x07 ; '.'
0000000000016a4b         db  0x47 ; 'G'
0000000000016a4c         db  0x0e ; '.'
0000000000016a4d         db  0x60 ; '`'
0000000000016a4e         db  0x02 ; '.'
0000000000016a4f         db  0x99 ; '.'
0000000000016a50         db  0x0e ; '.'
0000000000016a51         db  0x68 ; 'h'
0000000000016a52         db  0x5f ; '_'
0000000000016a53         db  0x0e ; '.'
0000000000016a54         db  0x70 ; 'p'
0000000000016a55         db  0x46 ; 'F'
0000000000016a56         db  0x0e ; '.'
0000000000016a57         db  0x78 ; 'x'
0000000000016a58         db  0x42 ; 'B'
0000000000016a59         db  0x0e ; '.'
0000000000016a5a         db  0x80 ; '.'
0000000000016a5b         db  0x01 ; '.'
0000000000016a5c         db  0x59 ; 'Y'
0000000000016a5d         db  0x0e ; '.'
0000000000016a5e         db  0x60 ; '`'
0000000000016a5f         db  0x02 ; '.'
0000000000016a60         db  0x40 ; '@'
0000000000016a61         db  0x0e ; '.'
0000000000016a62         db  0x68 ; 'h'
0000000000016a63         db  0x4b ; 'K'
0000000000016a64         db  0x0e ; '.'
0000000000016a65         db  0x70 ; 'p'
0000000000016a66         db  0x43 ; 'C'
0000000000016a67         db  0x0e ; '.'
0000000000016a68         db  0x78 ; 'x'
0000000000016a69         db  0x45 ; 'E'
0000000000016a6a         db  0x0e ; '.'
0000000000016a6b         db  0x80 ; '.'
0000000000016a6c         db  0x01 ; '.'
0000000000016a6d         db  0x5e ; '^'
0000000000016a6e         db  0x0e ; '.'
0000000000016a6f         db  0x60 ; '`'
0000000000016a70         db  0x4c ; 'L'
0000000000016a71         db  0x0a ; '.'
0000000000016a72         db  0x0e ; '.'
0000000000016a73         db  0x38 ; '8'
0000000000016a74         db  0x44 ; 'D'
0000000000016a75         db  0x0e ; '.'
0000000000016a76         db  0x30 ; '0'
0000000000016a77         db  0x41 ; 'A'
0000000000016a78         db  0x0e ; '.'
0000000000016a79         db  0x28 ; '('
0000000000016a7a         db  0x42 ; 'B'
0000000000016a7b         db  0x0e ; '.'
0000000000016a7c         db  0x20 ; ' '
0000000000016a7d         db  0x42 ; 'B'
0000000000016a7e         db  0x0e ; '.'
0000000000016a7f         db  0x18 ; '.'
0000000000016a80         db  0x42 ; 'B'
0000000000016a81         db  0x0e ; '.'
0000000000016a82         db  0x10 ; '.'
0000000000016a83         db  0x42 ; 'B'
0000000000016a84         db  0x0e ; '.'
0000000000016a85         db  0x08 ; '.'
0000000000016a86         db  0x46 ; 'F'
0000000000016a87         db  0x0b ; '.'
0000000000016a88         dd         0x00000028                                  ; Length of the record
0000000000016a8c         dd         0x00000424                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000016a90         db         0x20, 0xdb, 0xfe, 0xff                      ; begin 0x45b0
0000000000016a94         db         0x36, 3 dup (0x00)                          ; length 0x36 (end at 0x45e6)
0000000000016a98         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016a99         db  0x42 ; 'B'
0000000000016a9a         db  0x0e ; '.'
0000000000016a9b         db  0x10 ; '.'
0000000000016a9c         db  0x8c ; '.'
0000000000016a9d         db  0x02 ; '.'
0000000000016a9e         db  0x41 ; 'A'
0000000000016a9f         db  0x0e ; '.'
0000000000016aa0         db  0x18 ; '.'
0000000000016aa1         db  0x86 ; '.'
0000000000016aa2         db  0x03 ; '.'
0000000000016aa3         db  0x41 ; 'A'
0000000000016aa4         db  0x0e ; '.'
0000000000016aa5         db  0x20 ; ' '
0000000000016aa6         db  0x83 ; '.'
0000000000016aa7         db  0x04 ; '.'
0000000000016aa8         db  0x6e ; 'n'
0000000000016aa9         db  0x0e ; '.'
0000000000016aaa         db  0x18 ; '.'
0000000000016aab         db  0x41 ; 'A'
0000000000016aac         db  0x0e ; '.'
0000000000016aad         db  0x10 ; '.'
0000000000016aae         db  0x42 ; 'B'
0000000000016aaf         db  0x0e ; '.'
0000000000016ab0         db  0x08 ; '.'
0000000000016ab1         db  0x00 ; '.'
0000000000016ab2         db  0x00 ; '.'
0000000000016ab3         db  0x00 ; '.'
0000000000016ab4         dd         0x00000010                                  ; Length of the record
0000000000016ab8         dd         0x00000450                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000016abc         db         0x34, 0xdb, 0xfe, 0xff                      ; begin 0x45f0
0000000000016ac0         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0x4601)
0000000000016ac4         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016ac5         align      8
0000000000016ac8         dd         0x00000010                                  ; Length of the record
0000000000016acc         dd         0x00000464                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000016ad0         db         0x40, 0xdb, 0xfe, 0xff                      ; begin 0x4610
0000000000016ad4         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0x4621)
0000000000016ad8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016ad9         align      4
0000000000016adc         dd         0x00000010                                  ; Length of the record
0000000000016ae0         dd         0x00000478                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000016ae4         db         0x4c, 0xdb, 0xfe, 0xff                      ; begin 0x4630
0000000000016ae8         db         0x35, 3 dup (0x00)                          ; length 0x35 (end at 0x4665)
0000000000016aec         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016aed         align      16
0000000000016af0         dd         0x00000010                                  ; Length of the record
0000000000016af4         dd         0x0000048c                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000016af8         db         0x78, 0xdb, 0xfe, 0xff                      ; begin 0x4670
0000000000016afc         db         0x15, 3 dup (0x00)                          ; length 0x15 (end at 0x4685)
0000000000016b00         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016b01         align      4
0000000000016b04         dd         0x00000010                                  ; Length of the record
0000000000016b08         dd         0x000004a0                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000016b0c         db         0x84, 0xdb, 0xfe, 0xff                      ; begin 0x4690
0000000000016b10         db         0x30, 3 dup (0x00)                          ; length 0x30 (end at 0x46c0)
0000000000016b14         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016b15         db  0x6b ; 'k'
0000000000016b16         db  0x0e ; '.'
0000000000016b17         db  0x10 ; '.'
0000000000016b18         dd         0x00000050                                  ; Length of the record
0000000000016b1c         dd         0x000004b4                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000016b20         db         0xa0, 0xdb, 0xfe, 0xff                      ; begin 0x46c0
0000000000016b24         db         0x74, 3 dup (0x00)                          ; length 0x74 (end at 0x4734)
0000000000016b28         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016b29         db  0x42 ; 'B'
0000000000016b2a         db  0x0e ; '.'
0000000000016b2b         db  0x10 ; '.'
0000000000016b2c         db  0x8f ; '.'
0000000000016b2d         db  0x02 ; '.'
0000000000016b2e         db  0x42 ; 'B'
0000000000016b2f         db  0x0e ; '.'
0000000000016b30         db  0x18 ; '.'
0000000000016b31         db  0x8e ; '.'
0000000000016b32         db  0x03 ; '.'
0000000000016b33         db  0x49 ; 'I'
0000000000016b34         db  0x0e ; '.'
0000000000016b35         db  0x20 ; ' '
0000000000016b36         db  0x8d ; '.'
0000000000016b37         db  0x04 ; '.'
0000000000016b38         db  0x42 ; 'B'
0000000000016b39         db  0x0e ; '.'
0000000000016b3a         db  0x28 ; '('
0000000000016b3b         db  0x8c ; '.'
0000000000016b3c         db  0x05 ; '.'
0000000000016b3d         db  0x44 ; 'D'
0000000000016b3e         db  0x0e ; '.'
0000000000016b3f         db  0x30 ; '0'
0000000000016b40         db  0x86 ; '.'
0000000000016b41         db  0x06 ; '.'
0000000000016b42         db  0x41 ; 'A'
0000000000016b43         db  0x0e ; '.'
0000000000016b44         db  0x38 ; '8'
0000000000016b45         db  0x83 ; '.'
0000000000016b46         db  0x07 ; '.'
0000000000016b47         db  0x4d ; 'M'
0000000000016b48         db  0x0e ; '.'
0000000000016b49         db  0x50 ; 'P'
0000000000016b4a         db  0x5f ; '_'
0000000000016b4b         db  0x0e ; '.'
0000000000016b4c         db  0x58 ; 'X'
0000000000016b4d         db  0x47 ; 'G'
0000000000016b4e         db  0x0e ; '.'
0000000000016b4f         db  0x60 ; '`'
0000000000016b50         db  0x46 ; 'F'
0000000000016b51         db  0x0e ; '.'
0000000000016b52         db  0x68 ; 'h'
0000000000016b53         db  0x44 ; 'D'
0000000000016b54         db  0x0e ; '.'
0000000000016b55         db  0x70 ; 'p'
0000000000016b56         db  0x58 ; 'X'
0000000000016b57         db  0x0e ; '.'
0000000000016b58         db  0x38 ; '8'
0000000000016b59         db  0x41 ; 'A'
0000000000016b5a         db  0x0e ; '.'
0000000000016b5b         db  0x30 ; '0'
0000000000016b5c         db  0x41 ; 'A'
0000000000016b5d         db  0x0e ; '.'
0000000000016b5e         db  0x28 ; '('
0000000000016b5f         db  0x42 ; 'B'
0000000000016b60         db  0x0e ; '.'
0000000000016b61         db  0x20 ; ' '
0000000000016b62         db  0x42 ; 'B'
0000000000016b63         db  0x0e ; '.'
0000000000016b64         db  0x18 ; '.'
0000000000016b65         db  0x42 ; 'B'
0000000000016b66         db  0x0e ; '.'
0000000000016b67         db  0x10 ; '.'
0000000000016b68         db  0x42 ; 'B'
0000000000016b69         db  0x0e ; '.'
0000000000016b6a         db  0x08 ; '.'
0000000000016b6b         db  0x00 ; '.'
0000000000016b6c         dd         0x00000068                                  ; Length of the record
0000000000016b70         dd         0x00000508                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000016b74         db         0xcc, 0xdb, 0xfe, 0xff                      ; begin 0x4740
0000000000016b78         db         0xe3, 3 dup (0x00)                          ; length 0xe3 (end at 0x4823)
0000000000016b7c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016b7d         db  0x42 ; 'B'
0000000000016b7e         db  0x0e ; '.'
0000000000016b7f         db  0x10 ; '.'
0000000000016b80         db  0x8f ; '.'
0000000000016b81         db  0x02 ; '.'
0000000000016b82         db  0x42 ; 'B'
0000000000016b83         db  0x0e ; '.'
0000000000016b84         db  0x18 ; '.'
0000000000016b85         db  0x8e ; '.'
0000000000016b86         db  0x03 ; '.'
0000000000016b87         db  0x49 ; 'I'
0000000000016b88         db  0x0e ; '.'
0000000000016b89         db  0x20 ; ' '
0000000000016b8a         db  0x8d ; '.'
0000000000016b8b         db  0x04 ; '.'
0000000000016b8c         db  0x42 ; 'B'
0000000000016b8d         db  0x0e ; '.'
0000000000016b8e         db  0x28 ; '('
0000000000016b8f         db  0x8c ; '.'
0000000000016b90         db  0x05 ; '.'
0000000000016b91         db  0x44 ; 'D'
0000000000016b92         db  0x0e ; '.'
0000000000016b93         db  0x30 ; '0'
0000000000016b94         db  0x86 ; '.'
0000000000016b95         db  0x06 ; '.'
0000000000016b96         db  0x41 ; 'A'
0000000000016b97         db  0x0e ; '.'
0000000000016b98         db  0x38 ; '8'
0000000000016b99         db  0x83 ; '.'
0000000000016b9a         db  0x07 ; '.'
0000000000016b9b         db  0x4d ; 'M'
0000000000016b9c         db  0x0e ; '.'
0000000000016b9d         db  0x70 ; 'p'
0000000000016b9e         db  0x65 ; 'e'
0000000000016b9f         db  0x0e ; '.'
0000000000016ba0         db  0x78 ; 'x'
0000000000016ba1         db  0x4d ; 'M'
0000000000016ba2         db  0x0e ; '.'
0000000000016ba3         db  0x80 ; '.'
0000000000016ba4         db  0x01 ; '.'
0000000000016ba5         db  0x46 ; 'F'
0000000000016ba6         db  0x0e ; '.'
0000000000016ba7         db  0x88 ; '.'
0000000000016ba8         db  0x01 ; '.'
0000000000016ba9         db  0x42 ; 'B'
0000000000016baa         db  0x0e ; '.'
0000000000016bab         db  0x90 ; '.'
0000000000016bac         db  0x01 ; '.'
0000000000016bad         db  0x5e ; '^'
0000000000016bae         db  0x0e ; '.'
0000000000016baf         db  0x70 ; 'p'
0000000000016bb0         db  0x56 ; 'V'
0000000000016bb1         db  0x0e ; '.'
0000000000016bb2         db  0x78 ; 'x'
0000000000016bb3         db  0x43 ; 'C'
0000000000016bb4         db  0x0e ; '.'
0000000000016bb5         db  0x80 ; '.'
0000000000016bb6         db  0x01 ; '.'
0000000000016bb7         db  0x43 ; 'C'
0000000000016bb8         db  0x0e ; '.'
0000000000016bb9         db  0x88 ; '.'
0000000000016bba         db  0x01 ; '.'
0000000000016bbb         db  0x56 ; 'V'
0000000000016bbc         db  0x0e ; '.'
0000000000016bbd         db  0x90 ; '.'
0000000000016bbe         db  0x01 ; '.'
0000000000016bbf         db  0x52 ; 'R'
0000000000016bc0         db  0x0e ; '.'
0000000000016bc1         db  0x70 ; 'p'
0000000000016bc2         db  0x5b ; '['
0000000000016bc3         db  0x0e ; '.'
0000000000016bc4         db  0x38 ; '8'
0000000000016bc5         db  0x41 ; 'A'
0000000000016bc6         db  0x0e ; '.'
0000000000016bc7         db  0x30 ; '0'
0000000000016bc8         db  0x41 ; 'A'
0000000000016bc9         db  0x0e ; '.'
0000000000016bca         db  0x28 ; '('
0000000000016bcb         db  0x42 ; 'B'
0000000000016bcc         db  0x0e ; '.'
0000000000016bcd         db  0x20 ; ' '
0000000000016bce         db  0x42 ; 'B'
0000000000016bcf         db  0x0e ; '.'
0000000000016bd0         db  0x18 ; '.'
0000000000016bd1         db  0x42 ; 'B'
0000000000016bd2         db  0x0e ; '.'
0000000000016bd3         db  0x10 ; '.'
0000000000016bd4         db  0x42 ; 'B'
0000000000016bd5         db  0x0e ; '.'
0000000000016bd6         db  0x08 ; '.'
0000000000016bd7         db  0x00 ; '.'
0000000000016bd8         dd         0x00000010                                  ; Length of the record
0000000000016bdc         dd         0x00000574                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000016be0         db         0x50, 0xdc, 0xfe, 0xff                      ; begin 0x4830
0000000000016be4         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0x483a)
0000000000016be8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016be9         align      4
0000000000016bec         dd         0x00000028                                  ; Length of the record
0000000000016bf0         dd         0x00000588                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000016bf4         db         0x4c, 0xdc, 0xfe, 0xff                      ; begin 0x4840
0000000000016bf8         db         0x93, 3 dup (0x00)                          ; length 0x93 (end at 0x48d3)
0000000000016bfc         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016bfd         db  0x48 ; 'H'
0000000000016bfe         db  0x0e ; '.'
0000000000016bff         db  0x10 ; '.'
0000000000016c00         db  0x8c ; '.'
0000000000016c01         db  0x02 ; '.'
0000000000016c02         db  0x48 ; 'H'
0000000000016c03         db  0x0e ; '.'
0000000000016c04         db  0x18 ; '.'
0000000000016c05         db  0x86 ; '.'
0000000000016c06         db  0x03 ; '.'
0000000000016c07         db  0x41 ; 'A'
0000000000016c08         db  0x0e ; '.'
0000000000016c09         db  0x20 ; ' '
0000000000016c0a         db  0x83 ; '.'
0000000000016c0b         db  0x04 ; '.'
0000000000016c0c         db  0x02 ; '.'
0000000000016c0d         db  0x74 ; 't'
0000000000016c0e         db  0x0e ; '.'
0000000000016c0f         db  0x18 ; '.'
0000000000016c10         db  0x4b ; 'K'
0000000000016c11         db  0x0e ; '.'
0000000000016c12         db  0x10 ; '.'
0000000000016c13         db  0x42 ; 'B'
0000000000016c14         db  0x0e ; '.'
0000000000016c15         db  0x08 ; '.'
0000000000016c16         db  0x00 ; '.'
0000000000016c17         db  0x00 ; '.'
0000000000016c18         dd         0x00000010                                  ; Length of the record
0000000000016c1c         dd         0x000005b4                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000016c20         db         0xc0, 0xdc, 0xfe, 0xff                      ; begin 0x48e0
0000000000016c24         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x48f3)
0000000000016c28         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016c29         align      4
0000000000016c2c         dd         0x00000010                                  ; Length of the record
0000000000016c30         dd         0x000005c8                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000016c34         db         0xcc, 0xdc, 0xfe, 0xff                      ; begin 0x4900
0000000000016c38         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x490c)
0000000000016c3c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016c3d         align      64
0000000000016c40         dd         0x00000010                                  ; Length of the record
0000000000016c44         dd         0x000005dc                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000016c48         db         0xc8, 0xdc, 0xfe, 0xff                      ; begin 0x4910
0000000000016c4c         db         0x18, 3 dup (0x00)                          ; length 0x18 (end at 0x4928)
0000000000016c50         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016c51         align      4
0000000000016c54         dd         0x00000010                                  ; Length of the record
0000000000016c58         dd         0x000005f0                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000016c5c         db         0xd4, 0xdc, 0xfe, 0xff                      ; begin 0x4930
0000000000016c60         db         0x14, 3 dup (0x00)                          ; length 0x14 (end at 0x4944)
0000000000016c64         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016c65         align      8
0000000000016c68         dd         0x00000018                                  ; Length of the record
0000000000016c6c         dd         0x00000604                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000016c70         db         0xe0, 0xdc, 0xfe, 0xff                      ; begin 0x4950
0000000000016c74         db         0x8e, 3 dup (0x00)                          ; length 0x8e (end at 0x49de)
0000000000016c78         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016c79         db  0x44 ; 'D'
0000000000016c7a         db  0x0e ; '.'
0000000000016c7b         db  0x50 ; 'P'
0000000000016c7c         db  0x02 ; '.'
0000000000016c7d         db  0x7f ; '.'
0000000000016c7e         db  0x0a ; '.'
0000000000016c7f         db  0x0e ; '.'
0000000000016c80         db  0x08 ; '.'
0000000000016c81         db  0x41 ; 'A'
0000000000016c82         db  0x0b ; '.'
0000000000016c83         db  0x00 ; '.'
0000000000016c84         dd         0x00000018                                  ; Length of the record
0000000000016c88         dd         0x00000620                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000016c8c         db         0x54, 0xdd, 0xfe, 0xff                      ; begin 0x49e0
0000000000016c90         db         0x8a, 3 dup (0x00)                          ; length 0x8a (end at 0x4a6a)
0000000000016c94         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016c95         db  0x44 ; 'D'
0000000000016c96         db  0x0e ; '.'
0000000000016c97         db  0x50 ; 'P'
0000000000016c98         db  0x02 ; '.'
0000000000016c99         db  0x7b ; '{'
0000000000016c9a         db  0x0a ; '.'
0000000000016c9b         db  0x0e ; '.'
0000000000016c9c         db  0x08 ; '.'
0000000000016c9d         db  0x41 ; 'A'
0000000000016c9e         db  0x0b ; '.'
0000000000016c9f         db  0x00 ; '.'
0000000000016ca0         dd         0x00000010                                  ; Length of the record
0000000000016ca4         dd         0x0000063c                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000016ca8         db         0xc8, 0xdd, 0xfe, 0xff                      ; begin 0x4a70
0000000000016cac         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x4a7c)
0000000000016cb0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016cb1         align      4
0000000000016cb4         dd         0x00000010                                  ; Length of the record
0000000000016cb8         dd         0x00000650                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000016cbc         db         0xc4, 0xdd, 0xfe, 0xff                      ; begin 0x4a80
0000000000016cc0         db         0x0f, 3 dup (0x00)                          ; length 0xf (end at 0x4a8f)
0000000000016cc4         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016cc5         align      8
0000000000016cc8         dd         0x00000018                                  ; Length of the record
0000000000016ccc         dd         0x00000664                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000016cd0         db         0xc0, 0xdd, 0xfe, 0xff                      ; begin 0x4a90
0000000000016cd4         db         0x98, 3 dup (0x00)                          ; length 0x98 (end at 0x4b28)
0000000000016cd8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016cd9         db  0x44 ; 'D'
0000000000016cda         db  0x0e ; '.'
0000000000016cdb         db  0x50 ; 'P'
0000000000016cdc         db  0x02 ; '.'
0000000000016cdd         db  0x8e ; '.'
0000000000016cde         db  0x0a ; '.'
0000000000016cdf         db  0x0e ; '.'
0000000000016ce0         db  0x08 ; '.'
0000000000016ce1         db  0x41 ; 'A'
0000000000016ce2         db  0x0b ; '.'
0000000000016ce3         db  0x00 ; '.'
0000000000016ce4         dd         0x00000010                                  ; Length of the record
0000000000016ce8         dd         0x00000680                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000016cec         db         0x44, 0xde, 0xfe, 0xff                      ; begin 0x4b30
0000000000016cf0         db         0x10, 3 dup (0x00)                          ; length 0x10 (end at 0x4b40)
0000000000016cf4         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016cf5         align      8
0000000000016cf8         dd         0x00000010                                  ; Length of the record
0000000000016cfc         dd         0x00000694                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000016d00         db         0x40, 0xde, 0xfe, 0xff                      ; begin 0x4b40
0000000000016d04         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0x4b51)
0000000000016d08         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016d09         align      4
0000000000016d0c         dd         0x00000010                                  ; Length of the record
0000000000016d10         dd         0x000006a8                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000016d14         db         0x4c, 0xde, 0xfe, 0xff                      ; begin 0x4b60
0000000000016d18         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0x4b6a)
0000000000016d1c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016d1d         align      32
0000000000016d20         dd         0x00000018                                  ; Length of the record
0000000000016d24         dd         0x000006bc                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000016d28         db         0x48, 0xde, 0xfe, 0xff                      ; begin 0x4b70
0000000000016d2c         db         0x8e, 3 dup (0x00)                          ; length 0x8e (end at 0x4bfe)
0000000000016d30         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016d31         db  0x44 ; 'D'
0000000000016d32         db  0x0e ; '.'
0000000000016d33         db  0x50 ; 'P'
0000000000016d34         db  0x02 ; '.'
0000000000016d35         db  0x7f ; '.'
0000000000016d36         db  0x0a ; '.'
0000000000016d37         db  0x0e ; '.'
0000000000016d38         db  0x08 ; '.'
0000000000016d39         db  0x41 ; 'A'
0000000000016d3a         db  0x0b ; '.'
0000000000016d3b         db  0x00 ; '.'
0000000000016d3c         dd         0x00000018                                  ; Length of the record
0000000000016d40         dd         0x000006d8                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000016d44         db         0xbc, 0xde, 0xfe, 0xff                      ; begin 0x4c00
0000000000016d48         db         0x91, 3 dup (0x00)                          ; length 0x91 (end at 0x4c91)
0000000000016d4c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016d4d         db  0x44 ; 'D'
0000000000016d4e         db  0x0e ; '.'
0000000000016d4f         db  0x50 ; 'P'
0000000000016d50         db  0x02 ; '.'
0000000000016d51         db  0x82 ; '.'
0000000000016d52         db  0x0a ; '.'
0000000000016d53         db  0x0e ; '.'
0000000000016d54         db  0x08 ; '.'
0000000000016d55         db  0x41 ; 'A'
0000000000016d56         db  0x0b ; '.'
0000000000016d57         db  0x00 ; '.'
0000000000016d58         dd         0x00000010                                  ; Length of the record
0000000000016d5c         dd         0x000006f4                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000016d60         db         0x40, 0xdf, 0xfe, 0xff                      ; begin 0x4ca0
0000000000016d64         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x4cac)
0000000000016d68         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016d69         align      4
0000000000016d6c         dd         0x00000010                                  ; Length of the record
0000000000016d70         dd         0x00000708                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000016d74         db         0x3c, 0xdf, 0xfe, 0xff                      ; begin 0x4cb0
0000000000016d78         db         0x17, 3 dup (0x00)                          ; length 0x17 (end at 0x4cc7)
0000000000016d7c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016d7d         align      128
0000000000016d80         dd         0x00000010                                  ; Length of the record
0000000000016d84         dd         0x0000071c                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000016d88         db         0x48, 0xdf, 0xfe, 0xff                      ; begin 0x4cd0
0000000000016d8c         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x4ce3)
0000000000016d90         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016d91         align      4
0000000000016d94         dd         0x00000010                                  ; Length of the record
0000000000016d98         dd         0x00000730                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000016d9c         db         0x54, 0xdf, 0xfe, 0xff                      ; begin 0x4cf0
0000000000016da0         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x4cfc)
0000000000016da4         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016da5         align      8
0000000000016da8         dd         0x00000010                                  ; Length of the record
0000000000016dac         dd         0x00000744                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000016db0         db         0x50, 0xdf, 0xfe, 0xff                      ; begin 0x4d00
0000000000016db4         db         0x14, 3 dup (0x00)                          ; length 0x14 (end at 0x4d14)
0000000000016db8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016db9         align      4
0000000000016dbc         dd         0x00000010                                  ; Length of the record
0000000000016dc0         dd         0x00000758                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000016dc4         db         0x5c, 0xdf, 0xfe, 0xff                      ; begin 0x4d20
0000000000016dc8         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x4d33)
0000000000016dcc         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016dcd         align      16
0000000000016dd0         dd         0x00000014                                  ; Length of the record
0000000000016dd4         dd         0x0000076c                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000016dd8         db         0x68, 0xdf, 0xfe, 0xff                      ; begin 0x4d40
0000000000016ddc         db         0x18, 3 dup (0x00)                          ; length 0x18 (end at 0x4d58)
0000000000016de0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016de1         align      8
0000000000016de8         dd         0x00000110                                  ; Length of the record
0000000000016dec         dd         0x00000784                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000016df0         db         0x70, 0xdf, 0xfe, 0xff                      ; begin 0x4d60
0000000000016df4         db         0x17, 0x04, 2 dup (0x00)                    ; length 0x417 (end at 0x5177)
0000000000016df8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016df9         db  0x42 ; 'B'
0000000000016dfa         db  0x0e ; '.'
0000000000016dfb         db  0x10 ; '.'
0000000000016dfc         db  0x8f ; '.'
0000000000016dfd         db  0x02 ; '.'
0000000000016dfe         db  0x42 ; 'B'
0000000000016dff         db  0x0e ; '.'
0000000000016e00         db  0x18 ; '.'
0000000000016e01         db  0x8e ; '.'
0000000000016e02         db  0x03 ; '.'
0000000000016e03         db  0x42 ; 'B'
0000000000016e04         db  0x0e ; '.'
0000000000016e05         db  0x20 ; ' '
0000000000016e06         db  0x8d ; '.'
0000000000016e07         db  0x04 ; '.'
0000000000016e08         db  0x42 ; 'B'
0000000000016e09         db  0x0e ; '.'
0000000000016e0a         db  0x28 ; '('
0000000000016e0b         db  0x8c ; '.'
0000000000016e0c         db  0x05 ; '.'
0000000000016e0d         db  0x44 ; 'D'
0000000000016e0e         db  0x0e ; '.'
0000000000016e0f         db  0x30 ; '0'
0000000000016e10         db  0x86 ; '.'
0000000000016e11         db  0x06 ; '.'
0000000000016e12         db  0x41 ; 'A'
0000000000016e13         db  0x0e ; '.'
0000000000016e14         db  0x38 ; '8'
0000000000016e15         db  0x83 ; '.'
0000000000016e16         db  0x07 ; '.'
0000000000016e17         db  0x4a ; 'J'
0000000000016e18         db  0x0e ; '.'
0000000000016e19         db  0x60 ; '`'
0000000000016e1a         db  0x02 ; '.'
0000000000016e1b         db  0xdd ; '.'
0000000000016e1c         db  0x0e ; '.'
0000000000016e1d         db  0x68 ; 'h'
0000000000016e1e         db  0x57 ; 'W'
0000000000016e1f         db  0x0e ; '.'
0000000000016e20         db  0x70 ; 'p'
0000000000016e21         db  0x42 ; 'B'
0000000000016e22         db  0x0e ; '.'
0000000000016e23         db  0x78 ; 'x'
0000000000016e24         db  0x42 ; 'B'
0000000000016e25         db  0x0e ; '.'
0000000000016e26         db  0x80 ; '.'
0000000000016e27         db  0x01 ; '.'
0000000000016e28         db  0x42 ; 'B'
0000000000016e29         db  0x0e ; '.'
0000000000016e2a         db  0x88 ; '.'
0000000000016e2b         db  0x01 ; '.'
0000000000016e2c         db  0x42 ; 'B'
0000000000016e2d         db  0x0e ; '.'
0000000000016e2e         db  0x90 ; '.'
0000000000016e2f         db  0x01 ; '.'
0000000000016e30         db  0x53 ; 'S'
0000000000016e31         db  0x0e ; '.'
0000000000016e32         db  0x60 ; '`'
0000000000016e33         db  0x44 ; 'D'
0000000000016e34         db  0x0a ; '.'
0000000000016e35         db  0x0e ; '.'
0000000000016e36         db  0x38 ; '8'
0000000000016e37         db  0x41 ; 'A'
0000000000016e38         db  0x0e ; '.'
0000000000016e39         db  0x30 ; '0'
0000000000016e3a         db  0x41 ; 'A'
0000000000016e3b         db  0x0e ; '.'
0000000000016e3c         db  0x28 ; '('
0000000000016e3d         db  0x42 ; 'B'
0000000000016e3e         db  0x0e ; '.'
0000000000016e3f         db  0x20 ; ' '
0000000000016e40         db  0x42 ; 'B'
0000000000016e41         db  0x0e ; '.'
0000000000016e42         db  0x18 ; '.'
0000000000016e43         db  0x42 ; 'B'
0000000000016e44         db  0x0e ; '.'
0000000000016e45         db  0x10 ; '.'
0000000000016e46         db  0x42 ; 'B'
0000000000016e47         db  0x0e ; '.'
0000000000016e48         db  0x08 ; '.'
0000000000016e49         db  0x44 ; 'D'
0000000000016e4a         db  0x0b ; '.'
0000000000016e4b         db  0x02 ; '.'
0000000000016e4c         db  0x78 ; 'x'
0000000000016e4d         db  0x0a ; '.'
0000000000016e4e         db  0x0e ; '.'
0000000000016e4f         db  0x68 ; 'h'
0000000000016e50         db  0x48 ; 'H'
0000000000016e51         db  0x0b ; '.'
0000000000016e52         db  0x5a ; 'Z'
0000000000016e53         db  0x0a ; '.'
0000000000016e54         db  0x0e ; '.'
0000000000016e55         db  0x38 ; '8'
0000000000016e56         db  0x47 ; 'G'
0000000000016e57         db  0x0e ; '.'
0000000000016e58         db  0x30 ; '0'
0000000000016e59         db  0x41 ; 'A'
0000000000016e5a         db  0x0e ; '.'
0000000000016e5b         db  0x28 ; '('
0000000000016e5c         db  0x42 ; 'B'
0000000000016e5d         db  0x0e ; '.'
0000000000016e5e         db  0x20 ; ' '
0000000000016e5f         db  0x42 ; 'B'
0000000000016e60         db  0x0e ; '.'
0000000000016e61         db  0x18 ; '.'
0000000000016e62         db  0x42 ; 'B'
0000000000016e63         db  0x0e ; '.'
0000000000016e64         db  0x10 ; '.'
0000000000016e65         db  0x42 ; 'B'
0000000000016e66         db  0x0e ; '.'
0000000000016e67         db  0x08 ; '.'
0000000000016e68         db  0x56 ; 'V'
0000000000016e69         db  0x0b ; '.'
0000000000016e6a         db  0x5e ; '^'
0000000000016e6b         db  0x0a ; '.'
0000000000016e6c         db  0x0e ; '.'
0000000000016e6d         db  0x38 ; '8'
0000000000016e6e         db  0x52 ; 'R'
0000000000016e6f         db  0x0e ; '.'
0000000000016e70         db  0x30 ; '0'
0000000000016e71         db  0x41 ; 'A'
0000000000016e72         db  0x0e ; '.'
0000000000016e73         db  0x28 ; '('
0000000000016e74         db  0x42 ; 'B'
0000000000016e75         db  0x0e ; '.'
0000000000016e76         db  0x20 ; ' '
0000000000016e77         db  0x42 ; 'B'
0000000000016e78         db  0x0e ; '.'
0000000000016e79         db  0x18 ; '.'
0000000000016e7a         db  0x42 ; 'B'
0000000000016e7b         db  0x0e ; '.'
0000000000016e7c         db  0x10 ; '.'
0000000000016e7d         db  0x42 ; 'B'
0000000000016e7e         db  0x0e ; '.'
0000000000016e7f         db  0x08 ; '.'
0000000000016e80         db  0x4f ; 'O'
0000000000016e81         db  0x0b ; '.'
0000000000016e82         db  0x62 ; 'b'
0000000000016e83         db  0x0a ; '.'
0000000000016e84         db  0x0e ; '.'
0000000000016e85         db  0x38 ; '8'
0000000000016e86         db  0x50 ; 'P'
0000000000016e87         db  0x0e ; '.'
0000000000016e88         db  0x30 ; '0'
0000000000016e89         db  0x41 ; 'A'
0000000000016e8a         db  0x0e ; '.'
0000000000016e8b         db  0x28 ; '('
0000000000016e8c         db  0x42 ; 'B'
0000000000016e8d         db  0x0e ; '.'
0000000000016e8e         db  0x20 ; ' '
0000000000016e8f         db  0x42 ; 'B'
0000000000016e90         db  0x0e ; '.'
0000000000016e91         db  0x18 ; '.'
0000000000016e92         db  0x42 ; 'B'
0000000000016e93         db  0x0e ; '.'
0000000000016e94         db  0x10 ; '.'
0000000000016e95         db  0x42 ; 'B'
0000000000016e96         db  0x0e ; '.'
0000000000016e97         db  0x08 ; '.'
0000000000016e98         db  0x55 ; 'U'
0000000000016e99         db  0x0b ; '.'
0000000000016e9a         db  0x66 ; 'f'
0000000000016e9b         db  0x0e ; '.'
0000000000016e9c         db  0x68 ; 'h'
0000000000016e9d         db  0x42 ; 'B'
0000000000016e9e         db  0x0e ; '.'
0000000000016e9f         db  0x70 ; 'p'
0000000000016ea0         db  0x5c ; '\'
0000000000016ea1         db  0x0e ; '.'
0000000000016ea2         db  0x68 ; 'h'
0000000000016ea3         db  0x41 ; 'A'
0000000000016ea4         db  0x0e ; '.'
0000000000016ea5         db  0x60 ; '`'
0000000000016ea6         db  0x44 ; 'D'
0000000000016ea7         db  0x0a ; '.'
0000000000016ea8         db  0x0e ; '.'
0000000000016ea9         db  0x38 ; '8'
0000000000016eaa         db  0x41 ; 'A'
0000000000016eab         db  0x0e ; '.'
0000000000016eac         db  0x30 ; '0'
0000000000016ead         db  0x41 ; 'A'
0000000000016eae         db  0x0e ; '.'
0000000000016eaf         db  0x28 ; '('
0000000000016eb0         db  0x42 ; 'B'
0000000000016eb1         db  0x0e ; '.'
0000000000016eb2         db  0x20 ; ' '
0000000000016eb3         db  0x42 ; 'B'
0000000000016eb4         db  0x0e ; '.'
0000000000016eb5         db  0x18 ; '.'
0000000000016eb6         db  0x42 ; 'B'
0000000000016eb7         db  0x0e ; '.'
0000000000016eb8         db  0x10 ; '.'
0000000000016eb9         db  0x42 ; 'B'
0000000000016eba         db  0x0e ; '.'
0000000000016ebb         db  0x08 ; '.'
0000000000016ebc         db  0x45 ; 'E'
0000000000016ebd         db  0x0b ; '.'
0000000000016ebe         db  0x68 ; 'h'
0000000000016ebf         db  0x0a ; '.'
0000000000016ec0         db  0x0e ; '.'
0000000000016ec1         db  0x68 ; 'h'
0000000000016ec2         db  0x48 ; 'H'
0000000000016ec3         db  0x0b ; '.'
0000000000016ec4         db  0x72 ; 'r'
0000000000016ec5         db  0x0e ; '.'
0000000000016ec6         db  0x68 ; 'h'
0000000000016ec7         db  0x45 ; 'E'
0000000000016ec8         db  0x0e ; '.'
0000000000016ec9         db  0x70 ; 'p'
0000000000016eca         db  0x42 ; 'B'
0000000000016ecb         db  0x0e ; '.'
0000000000016ecc         db  0x78 ; 'x'
0000000000016ecd         db  0x42 ; 'B'
0000000000016ece         db  0x0e ; '.'
0000000000016ecf         db  0x80 ; '.'
0000000000016ed0         db  0x01 ; '.'
0000000000016ed1         db  0x5e ; '^'
0000000000016ed2         db  0x0e ; '.'
0000000000016ed3         db  0x60 ; '`'
0000000000016ed4         db  0x44 ; 'D'
0000000000016ed5         db  0x0a ; '.'
0000000000016ed6         db  0x0e ; '.'
0000000000016ed7         db  0x38 ; '8'
0000000000016ed8         db  0x41 ; 'A'
0000000000016ed9         db  0x0e ; '.'
0000000000016eda         db  0x30 ; '0'
0000000000016edb         db  0x41 ; 'A'
0000000000016edc         db  0x0e ; '.'
0000000000016edd         db  0x28 ; '('
0000000000016ede         db  0x42 ; 'B'
0000000000016edf         db  0x0e ; '.'
0000000000016ee0         db  0x20 ; ' '
0000000000016ee1         db  0x42 ; 'B'
0000000000016ee2         db  0x0e ; '.'
0000000000016ee3         db  0x18 ; '.'
0000000000016ee4         db  0x42 ; 'B'
0000000000016ee5         db  0x0e ; '.'
0000000000016ee6         db  0x10 ; '.'
0000000000016ee7         db  0x42 ; 'B'
0000000000016ee8         db  0x0e ; '.'
0000000000016ee9         db  0x08 ; '.'
0000000000016eea         db  0x41 ; 'A'
0000000000016eeb         db  0x0b ; '.'
0000000000016eec         db  0x79 ; 'y'
0000000000016eed         db  0x0a ; '.'
0000000000016eee         db  0x0e ; '.'
0000000000016eef         db  0x68 ; 'h'
0000000000016ef0         db  0x42 ; 'B'
0000000000016ef1         db  0x0e ; '.'
0000000000016ef2         db  0x70 ; 'p'
0000000000016ef3         db  0x42 ; 'B'
0000000000016ef4         db  0x0e ; '.'
0000000000016ef5         db  0x78 ; 'x'
0000000000016ef6         db  0x42 ; 'B'
0000000000016ef7         db  0x0e ; '.'
0000000000016ef8         db  0x80 ; '.'
0000000000016ef9         db  0x01 ; '.'
0000000000016efa         db  0x51 ; 'Q'
0000000000016efb         db  0x0b ; '.'
0000000000016efc         dd         0x00000010                                  ; Length of the record
0000000000016f00         dd         0x00000898                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000016f04         db         0x7c, 0xe2, 0xfe, 0xff                      ; begin 0x5180
0000000000016f08         db         0x20, 3 dup (0x00)                          ; length 0x20 (end at 0x51a0)
0000000000016f0c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016f0d         align      16
0000000000016f10         dd         0x00000018                                  ; Length of the record
0000000000016f14         dd         0x000008ac                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000016f18         db         0x88, 0xe2, 0xfe, 0xff                      ; begin 0x51a0
0000000000016f1c         db         0x78, 3 dup (0x00)                          ; length 0x78 (end at 0x5218)
0000000000016f20         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016f21         db  0x44 ; 'D'
0000000000016f22         db  0x0e ; '.'
0000000000016f23         db  0x70 ; 'p'
0000000000016f24         db  0x02 ; '.'
0000000000016f25         db  0x60 ; '`'
0000000000016f26         db  0x0a ; '.'
0000000000016f27         db  0x0e ; '.'
0000000000016f28         db  0x08 ; '.'
0000000000016f29         db  0x41 ; 'A'
0000000000016f2a         db  0x0b ; '.'
0000000000016f2b         db  0x00 ; '.'
0000000000016f2c         dd         0x00000028                                  ; Length of the record
0000000000016f30         dd         0x000008c8                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000016f34         db         0xec, 0xe2, 0xfe, 0xff                      ; begin 0x5220
0000000000016f38         db         0xd5, 3 dup (0x00)                          ; length 0xd5 (end at 0x52f5)
0000000000016f3c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016f3d         db  0x41 ; 'A'
0000000000016f3e         db  0x0e ; '.'
0000000000016f3f         db  0x10 ; '.'
0000000000016f40         db  0x86 ; '.'
0000000000016f41         db  0x02 ; '.'
0000000000016f42         db  0x41 ; 'A'
0000000000016f43         db  0x0e ; '.'
0000000000016f44         db  0x18 ; '.'
0000000000016f45         db  0x83 ; '.'
0000000000016f46         db  0x03 ; '.'
0000000000016f47         db  0x50 ; 'P'
0000000000016f48         db  0x0e ; '.'
0000000000016f49         db  0xd0 ; '.'
0000000000016f4a         db  0x01 ; '.'
0000000000016f4b         db  0x02 ; '.'
0000000000016f4c         db  0xab ; '.'
0000000000016f4d         db  0x0a ; '.'
0000000000016f4e         db  0x0e ; '.'
0000000000016f4f         db  0x18 ; '.'
0000000000016f50         db  0x41 ; 'A'
0000000000016f51         db  0x0e ; '.'
0000000000016f52         db  0x10 ; '.'
0000000000016f53         db  0x41 ; 'A'
0000000000016f54         db  0x0e ; '.'
0000000000016f55         db  0x08 ; '.'
0000000000016f56         db  0x41 ; 'A'
0000000000016f57         db  0x0b ; '.'
0000000000016f58         dd         0x0000001c                                  ; Length of the record
0000000000016f5c         dd         0x000008f4                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000016f60         db         0xa0, 0xe3, 0xfe, 0xff                      ; begin 0x5300
0000000000016f64         db         0x80, 3 dup (0x00)                          ; length 0x80 (end at 0x5380)
0000000000016f68         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016f69         db  0x41 ; 'A'
0000000000016f6a         db  0x0e ; '.'
0000000000016f6b         db  0x10 ; '.'
0000000000016f6c         db  0x83 ; '.'
0000000000016f6d         db  0x02 ; '.'
0000000000016f6e         db  0x02 ; '.'
0000000000016f6f         db  0x7a ; 'z'
0000000000016f70         db  0x0e ; '.'
0000000000016f71         db  0x08 ; '.'
0000000000016f72         db  0x00 ; '.'
0000000000016f73         db  0x00 ; '.'
0000000000016f74         db  0x00 ; '.'
0000000000016f75         db  0x00 ; '.'
0000000000016f76         db  0x00 ; '.'
0000000000016f77         db  0x00 ; '.'
0000000000016f78         dd         0x00000018                                  ; Length of the record
0000000000016f7c         dd         0x00000914                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000016f80         db         0x00, 0xe4, 0xfe, 0xff                      ; begin 0x5380
0000000000016f84         db         0x1a, 3 dup (0x00)                          ; length 0x1a (end at 0x539a)
0000000000016f88         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016f89         db  0x41 ; 'A'
0000000000016f8a         db  0x0e ; '.'
0000000000016f8b         db  0x10 ; '.'
0000000000016f8c         db  0x83 ; '.'
0000000000016f8d         db  0x02 ; '.'
0000000000016f8e         db  0x53 ; 'S'
0000000000016f8f         db  0x0a ; '.'
0000000000016f90         db  0x0e ; '.'
0000000000016f91         db  0x08 ; '.'
0000000000016f92         db  0x41 ; 'A'
0000000000016f93         db  0x0b ; '.'
0000000000016f94         dd         0x00000010                                  ; Length of the record
0000000000016f98         dd         0x00000930                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000016f9c         db         0x04, 0xe4, 0xfe, 0xff                      ; begin 0x53a0
0000000000016fa0         db         0x24, 3 dup (0x00)                          ; length 0x24 (end at 0x53c4)
0000000000016fa4         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016fa5         db  0x5f ; '_'
0000000000016fa6         db  0x0e ; '.'
0000000000016fa7         db  0x10 ; '.'
0000000000016fa8         dd         0x00000010                                  ; Length of the record
0000000000016fac         dd         0x00000944                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000016fb0         db         0x20, 0xe4, 0xfe, 0xff                      ; begin 0x53d0
0000000000016fb4         db         0x02, 3 dup (0x00)                          ; length 0x2 (end at 0x53d2)
0000000000016fb8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016fb9         align      4
0000000000016fbc         dd         0x00000020                                  ; Length of the record
0000000000016fc0         dd         0x00000958                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000016fc4         db         0x1c, 0xe4, 0xfe, 0xff                      ; begin 0x53e0
0000000000016fc8         db         0x36, 3 dup (0x00)                          ; length 0x36 (end at 0x5416)
0000000000016fcc         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016fcd         db  0x44 ; 'D'
0000000000016fce         db  0x0e ; '.'
0000000000016fcf         db  0x10 ; '.'
0000000000016fd0         db  0x83 ; '.'
0000000000016fd1         db  0x02 ; '.'
0000000000016fd2         db  0x5d ; ']'
0000000000016fd3         db  0x0a ; '.'
0000000000016fd4         db  0x0e ; '.'
0000000000016fd5         db  0x08 ; '.'
0000000000016fd6         db  0x47 ; 'G'
0000000000016fd7         db  0x0b ; '.'
0000000000016fd8         db  0x48 ; 'H'
0000000000016fd9         db  0x0a ; '.'
0000000000016fda         db  0x0e ; '.'
0000000000016fdb         db  0x08 ; '.'
0000000000016fdc         db  0x41 ; 'A'
0000000000016fdd         db  0x0b ; '.'
0000000000016fde         db  0x00 ; '.'
0000000000016fdf         db  0x00 ; '.'
0000000000016fe0         dd         0x00000010                                  ; Length of the record
0000000000016fe4         dd         0x0000097c                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000016fe8         db         0x38, 0xe4, 0xfe, 0xff                      ; begin 0x5420
0000000000016fec         db         0x24, 3 dup (0x00)                          ; length 0x24 (end at 0x5444)
0000000000016ff0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016ff1         db  0x5f ; '_'
0000000000016ff2         db  0x0e ; '.'
0000000000016ff3         db  0x10 ; '.'
0000000000016ff4         dd         0x00000014                                  ; Length of the record
0000000000016ff8         dd         0x00000990                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000016ffc         db         0x54, 0xe4, 0xfe, 0xff                      ; begin 0x5450
0000000000017000         db         0x82, 3 dup (0x00)                          ; length 0x82 (end at 0x54d2)
0000000000017004         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017005         db  0x02 ; '.'
0000000000017006         db  0x5f ; '_'
0000000000017007         db  0x0e ; '.'
0000000000017008         db  0x10 ; '.'
0000000000017009         db  0x49 ; 'I'
000000000001700a         db  0x0e ; '.'
000000000001700b         db  0x08 ; '.'
000000000001700c         dd         0x00000014                                  ; Length of the record
0000000000017010         dd         0x000009a8                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000017014         db         0xcc, 0xe4, 0xfe, 0xff                      ; begin 0x54e0
0000000000017018         db         0x4a, 3 dup (0x00)                          ; length 0x4a (end at 0x552a)
000000000001701c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001701d         db  0x02 ; '.'
000000000001701e         db  0x45 ; 'E'
000000000001701f         db  0x0e ; '.'
0000000000017020         db  0x10 ; '.'
0000000000017021         db  0x00 ; '.'
0000000000017022         db  0x00 ; '.'
0000000000017023         db  0x00 ; '.'
0000000000017024         dd         0x00000018                                  ; Length of the record
0000000000017028         dd         0x000009c0                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
000000000001702c         db         0x04, 0xe5, 0xfe, 0xff                      ; begin 0x5530
0000000000017030         db         0x17, 3 dup (0x00)                          ; length 0x17 (end at 0x5547)
0000000000017034         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017035         db  0x41 ; 'A'
0000000000017036         db  0x0e ; '.'
0000000000017037         db  0x10 ; '.'
0000000000017038         db  0x83 ; '.'
0000000000017039         db  0x02 ; '.'
000000000001703a         db  0x51 ; 'Q'
000000000001703b         db  0x0e ; '.'
000000000001703c         db  0x08 ; '.'
000000000001703d         db  0x00 ; '.'
000000000001703e         db  0x00 ; '.'
000000000001703f         db  0x00 ; '.'
0000000000017040         dd         0x00000018                                  ; Length of the record
0000000000017044         dd         0x000009dc                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000017048         db         0x08, 0xe5, 0xfe, 0xff                      ; begin 0x5550
000000000001704c         db         0x2e, 3 dup (0x00)                          ; length 0x2e (end at 0x557e)
0000000000017050         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017051         db  0x47 ; 'G'
0000000000017052         db  0x0e ; '.'
0000000000017053         db  0x10 ; '.'
0000000000017054         db  0x61 ; 'a'
0000000000017055         db  0x0a ; '.'
0000000000017056         db  0x0e ; '.'
0000000000017057         db  0x08 ; '.'
0000000000017058         db  0x41 ; 'A'
0000000000017059         db  0x0b ; '.'
000000000001705a         db  0x00 ; '.'
000000000001705b         db  0x00 ; '.'
000000000001705c         dd         0x00000024                                  ; Length of the record
0000000000017060         dd         0x000009f8                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000017064         db         0x1c, 0xe5, 0xfe, 0xff                      ; begin 0x5580
0000000000017068         db         0x28, 3 dup (0x00)                          ; length 0x28 (end at 0x55a8)
000000000001706c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001706d         db  0x41 ; 'A'
000000000001706e         db  0x0e ; '.'
000000000001706f         db  0x10 ; '.'
0000000000017070         db  0x86 ; '.'
0000000000017071         db  0x02 ; '.'
0000000000017072         db  0x41 ; 'A'
0000000000017073         db  0x0e ; '.'
0000000000017074         db  0x18 ; '.'
0000000000017075         db  0x83 ; '.'
0000000000017076         db  0x03 ; '.'
0000000000017077         db  0x4d ; 'M'
0000000000017078         db  0x0e ; '.'
0000000000017079         db  0x20 ; ' '
000000000001707a         db  0x49 ; 'I'
000000000001707b         db  0x0e ; '.'
000000000001707c         db  0x18 ; '.'
000000000001707d         db  0x47 ; 'G'
000000000001707e         db  0x0e ; '.'
000000000001707f         db  0x10 ; '.'
0000000000017080         db  0x41 ; 'A'
0000000000017081         db  0x0e ; '.'
0000000000017082         db  0x08 ; '.'
0000000000017083         db  0x00 ; '.'
0000000000017084         dd         0x00000018                                  ; Length of the record
0000000000017088         dd         0x00000a20                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
000000000001708c         db         0x24, 0xe5, 0xfe, 0xff                      ; begin 0x55b0
0000000000017090         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x55c3)
0000000000017094         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017095         db  0x41 ; 'A'
0000000000017096         db  0x0e ; '.'
0000000000017097         db  0x10 ; '.'
0000000000017098         db  0x83 ; '.'
0000000000017099         db  0x02 ; '.'
000000000001709a         db  0x50 ; 'P'
000000000001709b         db  0x0e ; '.'
000000000001709c         db  0x08 ; '.'
000000000001709d         db  0x00 ; '.'
000000000001709e         db  0x00 ; '.'
000000000001709f         db  0x00 ; '.'
00000000000170a0         dd         0x00000014                                  ; Length of the record
00000000000170a4         dd         0x00000a3c                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
00000000000170a8         db         0x28, 0xe5, 0xfe, 0xff                      ; begin 0x55d0
00000000000170ac         db         0x35, 3 dup (0x00)                          ; length 0x35 (end at 0x5605)
00000000000170b0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000170b1         db  0x4b ; 'K'
00000000000170b2         db  0x0e ; '.'
00000000000170b3         db  0x10 ; '.'
00000000000170b4         db  0x00 ; '.'
00000000000170b5         db  0x00 ; '.'
00000000000170b6         db  0x00 ; '.'
00000000000170b7         db  0x00 ; '.'
00000000000170b8         dd         0x00000048                                  ; Length of the record
00000000000170bc         dd         0x00000a54                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
00000000000170c0         db         0x50, 0xe5, 0xfe, 0xff                      ; begin 0x5610
00000000000170c4         db         0x11, 0x01, 2 dup (0x00)                    ; length 0x111 (end at 0x5721)
00000000000170c8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000170c9         db  0x42 ; 'B'
00000000000170ca         db  0x0e ; '.'
00000000000170cb         db  0x10 ; '.'
00000000000170cc         db  0x8f ; '.'
00000000000170cd         db  0x02 ; '.'
00000000000170ce         db  0x42 ; 'B'
00000000000170cf         db  0x0e ; '.'
00000000000170d0         db  0x18 ; '.'
00000000000170d1         db  0x8e ; '.'
00000000000170d2         db  0x03 ; '.'
00000000000170d3         db  0x45 ; 'E'
00000000000170d4         db  0x0e ; '.'
00000000000170d5         db  0x20 ; ' '
00000000000170d6         db  0x8d ; '.'
00000000000170d7         db  0x04 ; '.'
00000000000170d8         db  0x42 ; 'B'
00000000000170d9         db  0x0e ; '.'
00000000000170da         db  0x28 ; '('
00000000000170db         db  0x8c ; '.'
00000000000170dc         db  0x05 ; '.'
00000000000170dd         db  0x44 ; 'D'
00000000000170de         db  0x0e ; '.'
00000000000170df         db  0x30 ; '0'
00000000000170e0         db  0x86 ; '.'
00000000000170e1         db  0x06 ; '.'
00000000000170e2         db  0x41 ; 'A'
00000000000170e3         db  0x0e ; '.'
00000000000170e4         db  0x38 ; '8'
00000000000170e5         db  0x83 ; '.'
00000000000170e6         db  0x07 ; '.'
00000000000170e7         db  0x4e ; 'N'
00000000000170e8         db  0x0e ; '.'
00000000000170e9         db  0x50 ; 'P'
00000000000170ea         db  0x02 ; '.'
00000000000170eb         db  0x9f ; '.'
00000000000170ec         db  0x0a ; '.'
00000000000170ed         db  0x0e ; '.'
00000000000170ee         db  0x38 ; '8'
00000000000170ef         db  0x41 ; 'A'
00000000000170f0         db  0x0e ; '.'
00000000000170f1         db  0x30 ; '0'
00000000000170f2         db  0x41 ; 'A'
00000000000170f3         db  0x0e ; '.'
00000000000170f4         db  0x28 ; '('
00000000000170f5         db  0x42 ; 'B'
00000000000170f6         db  0x0e ; '.'
00000000000170f7         db  0x20 ; ' '
00000000000170f8         db  0x42 ; 'B'
00000000000170f9         db  0x0e ; '.'
00000000000170fa         db  0x18 ; '.'
00000000000170fb         db  0x42 ; 'B'
00000000000170fc         db  0x0e ; '.'
00000000000170fd         db  0x10 ; '.'
00000000000170fe         db  0x42 ; 'B'
00000000000170ff         db  0x0e ; '.'
0000000000017100         db  0x08 ; '.'
0000000000017101         db  0x49 ; 'I'
0000000000017102         db  0x0b ; '.'
0000000000017103         db  0x00 ; '.'
0000000000017104         dd         0x00000018                                  ; Length of the record
0000000000017108         dd         0x00000aa0                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
000000000001710c         db         0x24, 0xe6, 0xfe, 0xff                      ; begin 0x5730
0000000000017110         db         0x21, 3 dup (0x00)                          ; length 0x21 (end at 0x5751)
0000000000017114         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017115         db  0x44 ; 'D'
0000000000017116         db  0x0e ; '.'
0000000000017117         db  0x18 ; '.'
0000000000017118         db  0x42 ; 'B'
0000000000017119         db  0x0e ; '.'
000000000001711a         db  0x20 ; ' '
000000000001711b         db  0x5a ; 'Z'
000000000001711c         db  0x0e ; '.'
000000000001711d         db  0x08 ; '.'
000000000001711e         db  0x00 ; '.'
000000000001711f         db  0x00 ; '.'
0000000000017120         dd         0x0000004c                                  ; Length of the record
0000000000017124         dd         0x00000abc                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000017128         db         0x38, 0xe6, 0xfe, 0xff                      ; begin 0x5760
000000000001712c         db         0xb3, 0x06, 2 dup (0x00)                    ; length 0x6b3 (end at 0x5e13)
0000000000017130         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017131         db  0x42 ; 'B'
0000000000017132         db  0x0e ; '.'
0000000000017133         db  0x10 ; '.'
0000000000017134         db  0x8f ; '.'
0000000000017135         db  0x02 ; '.'
0000000000017136         db  0x42 ; 'B'
0000000000017137         db  0x0e ; '.'
0000000000017138         db  0x18 ; '.'
0000000000017139         db  0x8e ; '.'
000000000001713a         db  0x03 ; '.'
000000000001713b         db  0x42 ; 'B'
000000000001713c         db  0x0e ; '.'
000000000001713d         db  0x20 ; ' '
000000000001713e         db  0x8d ; '.'
000000000001713f         db  0x04 ; '.'
0000000000017140         db  0x42 ; 'B'
0000000000017141         db  0x0e ; '.'
0000000000017142         db  0x28 ; '('
0000000000017143         db  0x8c ; '.'
0000000000017144         db  0x05 ; '.'
0000000000017145         db  0x41 ; 'A'
0000000000017146         db  0x0e ; '.'
0000000000017147         db  0x30 ; '0'
0000000000017148         db  0x86 ; '.'
0000000000017149         db  0x06 ; '.'
000000000001714a         db  0x41 ; 'A'
000000000001714b         db  0x0e ; '.'
000000000001714c         db  0x38 ; '8'
000000000001714d         db  0x83 ; '.'
000000000001714e         db  0x07 ; '.'
000000000001714f         db  0x44 ; 'D'
0000000000017150         db  0x0e ; '.'
0000000000017151         db  0x60 ; '`'
0000000000017152         db  0x02 ; '.'
0000000000017153         db  0x96 ; '.'
0000000000017154         db  0x0a ; '.'
0000000000017155         db  0x0e ; '.'
0000000000017156         db  0x38 ; '8'
0000000000017157         db  0x41 ; 'A'
0000000000017158         db  0x0e ; '.'
0000000000017159         db  0x30 ; '0'
000000000001715a         db  0x41 ; 'A'
000000000001715b         db  0x0e ; '.'
000000000001715c         db  0x28 ; '('
000000000001715d         db  0x42 ; 'B'
000000000001715e         db  0x0e ; '.'
000000000001715f         db  0x20 ; ' '
0000000000017160         db  0x42 ; 'B'
0000000000017161         db  0x0e ; '.'
0000000000017162         db  0x18 ; '.'
0000000000017163         db  0x42 ; 'B'
0000000000017164         db  0x0e ; '.'
0000000000017165         db  0x10 ; '.'
0000000000017166         db  0x42 ; 'B'
0000000000017167         db  0x0e ; '.'
0000000000017168         db  0x08 ; '.'
0000000000017169         db  0x42 ; 'B'
000000000001716a         db  0x0b ; '.'
000000000001716b         db  0x00 ; '.'
000000000001716c         db  0x00 ; '.'
000000000001716d         db  0x00 ; '.'
000000000001716e         db  0x00 ; '.'
000000000001716f         db  0x00 ; '.'
0000000000017170         dd         0x00000034                                  ; Length of the record
0000000000017174         dd         0x00000b0c                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000017178         db         0xa8, 0xec, 0xfe, 0xff                      ; begin 0x5e20
000000000001717c         db         0x7b, 3 dup (0x00)                          ; length 0x7b (end at 0x5e9b)
0000000000017180         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017181         db  0x42 ; 'B'
0000000000017182         db  0x0e ; '.'
0000000000017183         db  0x10 ; '.'
0000000000017184         db  0x8c ; '.'
0000000000017185         db  0x02 ; '.'
0000000000017186         db  0x41 ; 'A'
0000000000017187         db  0x0e ; '.'
0000000000017188         db  0x18 ; '.'
0000000000017189         db  0x86 ; '.'
000000000001718a         db  0x03 ; '.'
000000000001718b         db  0x41 ; 'A'
000000000001718c         db  0x0e ; '.'
000000000001718d         db  0x20 ; ' '
000000000001718e         db  0x83 ; '.'
000000000001718f         db  0x04 ; '.'
0000000000017190         db  0x7d ; '}'
0000000000017191         db  0x0a ; '.'
0000000000017192         db  0x0e ; '.'
0000000000017193         db  0x18 ; '.'
0000000000017194         db  0x41 ; 'A'
0000000000017195         db  0x0e ; '.'
0000000000017196         db  0x10 ; '.'
0000000000017197         db  0x42 ; 'B'
0000000000017198         db  0x0e ; '.'
0000000000017199         db  0x08 ; '.'
000000000001719a         db  0x44 ; 'D'
000000000001719b         db  0x0b ; '.'
000000000001719c         db  0x60 ; '`'
000000000001719d         db  0x0a ; '.'
000000000001719e         db  0x0e ; '.'
000000000001719f         db  0x18 ; '.'
00000000000171a0         db  0x41 ; 'A'
00000000000171a1         db  0x0e ; '.'
00000000000171a2         db  0x10 ; '.'
00000000000171a3         db  0x42 ; 'B'
00000000000171a4         db  0x0e ; '.'
00000000000171a5         db  0x08 ; '.'
00000000000171a6         db  0x45 ; 'E'
00000000000171a7         db  0x0b ; '.'
00000000000171a8         dd         0x0000001c                                  ; Length of the record
00000000000171ac         dd         0x00000b44                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
00000000000171b0         db         0xf0, 0xec, 0xfe, 0xff                      ; begin 0x5ea0
00000000000171b4         db         0x40, 3 dup (0x00)                          ; length 0x40 (end at 0x5ee0)
00000000000171b8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000171b9         db  0x44 ; 'D'
00000000000171ba         db  0x0e ; '.'
00000000000171bb         db  0x10 ; '.'
00000000000171bc         db  0x83 ; '.'
00000000000171bd         db  0x02 ; '.'
00000000000171be         db  0x5a ; 'Z'
00000000000171bf         db  0x0a ; '.'
00000000000171c0         db  0x0e ; '.'
00000000000171c1         db  0x08 ; '.'
00000000000171c2         db  0x4a ; 'J'
00000000000171c3         db  0x0b ; '.'
00000000000171c4         db  0x53 ; 'S'
00000000000171c5         db  0x0e ; '.'
00000000000171c6         db  0x08 ; '.'
00000000000171c7         db  0x00 ; '.'
00000000000171c8         dd         0x0000002c                                  ; Length of the record
00000000000171cc         dd         0x00000b64                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
00000000000171d0         db         0x10, 0xed, 0xfe, 0xff                      ; begin 0x5ee0
00000000000171d4         db         0x57, 3 dup (0x00)                          ; length 0x57 (end at 0x5f37)
00000000000171d8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000171d9         db  0x63 ; 'c'
00000000000171da         db  0x0e ; '.'
00000000000171db         db  0x10 ; '.'
00000000000171dc         db  0x8c ; '.'
00000000000171dd         db  0x02 ; '.'
00000000000171de         db  0x41 ; 'A'
00000000000171df         db  0x0e ; '.'
00000000000171e0         db  0x18 ; '.'
00000000000171e1         db  0x86 ; '.'
00000000000171e2         db  0x03 ; '.'
00000000000171e3         db  0x44 ; 'D'
00000000000171e4         db  0x0e ; '.'
00000000000171e5         db  0x20 ; ' '
00000000000171e6         db  0x83 ; '.'
00000000000171e7         db  0x04 ; '.'
00000000000171e8         db  0x6b ; 'k'
00000000000171e9         db  0x0e ; '.'
00000000000171ea         db  0x18 ; '.'
00000000000171eb         db  0x41 ; 'A'
00000000000171ec         db  0x0e ; '.'
00000000000171ed         db  0x10 ; '.'
00000000000171ee         db  0x42 ; 'B'
00000000000171ef         db  0x0e ; '.'
00000000000171f0         db  0x08 ; '.'
00000000000171f1         db  0x00 ; '.'
00000000000171f2         db  0x00 ; '.'
00000000000171f3         db  0x00 ; '.'
00000000000171f4         db  0x00 ; '.'
00000000000171f5         db  0x00 ; '.'
00000000000171f6         db  0x00 ; '.'
00000000000171f7         db  0x00 ; '.'
00000000000171f8         dd         0x0000003c                                  ; Length of the record
00000000000171fc         dd         0x00000b94                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000017200         db         0x40, 0xed, 0xfe, 0xff                      ; begin 0x5f40
0000000000017204         db         0x83, 3 dup (0x00)                          ; length 0x83 (end at 0x5fc3)
0000000000017208         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017209         db  0x42 ; 'B'
000000000001720a         db  0x0e ; '.'
000000000001720b         db  0x10 ; '.'
000000000001720c         db  0x8d ; '.'
000000000001720d         db  0x02 ; '.'
000000000001720e         db  0x42 ; 'B'
000000000001720f         db  0x0e ; '.'
0000000000017210         db  0x18 ; '.'
0000000000017211         db  0x8c ; '.'
0000000000017212         db  0x03 ; '.'
0000000000017213         db  0x44 ; 'D'
0000000000017214         db  0x0e ; '.'
0000000000017215         db  0x20 ; ' '
0000000000017216         db  0x86 ; '.'
0000000000017217         db  0x04 ; '.'
0000000000017218         db  0x41 ; 'A'
0000000000017219         db  0x0e ; '.'
000000000001721a         db  0x28 ; '('
000000000001721b         db  0x83 ; '.'
000000000001721c         db  0x05 ; '.'
000000000001721d         db  0x4a ; 'J'
000000000001721e         db  0x0e ; '.'
000000000001721f         db  0x40 ; '@'
0000000000017220         db  0x02 ; '.'
0000000000017221         db  0x64 ; 'd'
0000000000017222         db  0x0a ; '.'
0000000000017223         db  0x0e ; '.'
0000000000017224         db  0x28 ; '('
0000000000017225         db  0x41 ; 'A'
0000000000017226         db  0x0e ; '.'
0000000000017227         db  0x20 ; ' '
0000000000017228         db  0x41 ; 'A'
0000000000017229         db  0x0e ; '.'
000000000001722a         db  0x18 ; '.'
000000000001722b         db  0x42 ; 'B'
000000000001722c         db  0x0e ; '.'
000000000001722d         db  0x10 ; '.'
000000000001722e         db  0x42 ; 'B'
000000000001722f         db  0x0e ; '.'
0000000000017230         db  0x08 ; '.'
0000000000017231         db  0x41 ; 'A'
0000000000017232         db  0x0b ; '.'
0000000000017233         db  0x00 ; '.'
0000000000017234         db  0x00 ; '.'
0000000000017235         db  0x00 ; '.'
0000000000017236         db  0x00 ; '.'
0000000000017237         db  0x00 ; '.'
0000000000017238         dd         0x00000010                                  ; Length of the record
000000000001723c         dd         0x00000bd4                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000017240         db         0x90, 0xed, 0xfe, 0xff                      ; begin 0x5fd0
0000000000017244         db         0x2f, 0x01, 2 dup (0x00)                    ; length 0x12f (end at 0x60ff)
0000000000017248         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017249         align      4
000000000001724c         dd         0x00000010                                  ; Length of the record
0000000000017250         dd         0x00000be8                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000017254         db         0xac, 0xee, 0xfe, 0xff                      ; begin 0x6100
0000000000017258         db         0x1d, 3 dup (0x00)                          ; length 0x1d (end at 0x611d)
000000000001725c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001725d         align      4
0000000000017264         dd         0x00000bfc                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000017268         db         0xb8, 0xee, 0xfe, 0xff                      ; begin 0x6120
000000000001726c         db         0x2c, 0x02, 2 dup (0x00)                    ; length 0x22c (end at 0x634c)
0000000000017270         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017271         db  0x42 ; 'B'
0000000000017272         db  0x0e ; '.'
0000000000017273         db  0x10 ; '.'
0000000000017274         db  0x8f ; '.'
0000000000017275         db  0x02 ; '.'
0000000000017276         db  0x42 ; 'B'
0000000000017277         db  0x0e ; '.'
0000000000017278         db  0x18 ; '.'
0000000000017279         db  0x8e ; '.'
000000000001727a         db  0x03 ; '.'
000000000001727b         db  0x45 ; 'E'
000000000001727c         db  0x0e ; '.'
000000000001727d         db  0x20 ; ' '
000000000001727e         db  0x8d ; '.'
000000000001727f         db  0x04 ; '.'
0000000000017280         db  0x42 ; 'B'
0000000000017281         db  0x0e ; '.'
0000000000017282         db  0x28 ; '('
0000000000017283         db  0x8c ; '.'
0000000000017284         db  0x05 ; '.'
0000000000017285         db  0x45 ; 'E'
0000000000017286         db  0x0e ; '.'
0000000000017287         db  0x30 ; '0'
0000000000017288         db  0x86 ; '.'
0000000000017289         db  0x06 ; '.'
000000000001728a         db  0x41 ; 'A'
000000000001728b         db  0x0e ; '.'
000000000001728c         db  0x38 ; '8'
000000000001728d         db  0x83 ; '.'
000000000001728e         db  0x07 ; '.'
000000000001728f         db  0x47 ; 'G'
0000000000017290         db  0x0e ; '.'
0000000000017291         db  0x80 ; '.'
0000000000017292         db  0x01 ; '.'
0000000000017293         db  0x02 ; '.'
0000000000017294         db  0xba ; '.'
0000000000017295         db  0x0a ; '.'
0000000000017296         db  0x0e ; '.'
0000000000017297         db  0x38 ; '8'
0000000000017298         db  0x46 ; 'F'
0000000000017299         db  0x0e ; '.'
000000000001729a         db  0x30 ; '0'
000000000001729b         db  0x41 ; 'A'
000000000001729c         db  0x0e ; '.'
000000000001729d         db  0x28 ; '('
000000000001729e         db  0x42 ; 'B'
000000000001729f         db  0x0e ; '.'
00000000000172a0         db  0x20 ; ' '
00000000000172a1         db  0x42 ; 'B'
00000000000172a2         db  0x0e ; '.'
00000000000172a3         db  0x18 ; '.'
00000000000172a4         db  0x42 ; 'B'
00000000000172a5         db  0x0e ; '.'
00000000000172a6         db  0x10 ; '.'
00000000000172a7         db  0x42 ; 'B'
00000000000172a8         db  0x0e ; '.'
00000000000172a9         db  0x08 ; '.'
00000000000172aa         db  0x47 ; 'G'
00000000000172ab         db  0x0b ; '.'
00000000000172ac         db  0x02 ; '.'
00000000000172ad         db  0xe1 ; '.'
00000000000172ae         db  0x0a ; '.'
00000000000172af         db  0x0e ; '.'
00000000000172b0         db  0x38 ; '8'
00000000000172b1         db  0x44 ; 'D'
00000000000172b2         db  0x0e ; '.'
00000000000172b3         db  0x30 ; '0'
00000000000172b4         db  0x43 ; 'C'
00000000000172b5         db  0x0e ; '.'
00000000000172b6         db  0x28 ; '('
00000000000172b7         db  0x42 ; 'B'
00000000000172b8         db  0x0e ; '.'
00000000000172b9         db  0x20 ; ' '
00000000000172ba         db  0x42 ; 'B'
00000000000172bb         db  0x0e ; '.'
00000000000172bc         db  0x18 ; '.'
00000000000172bd         db  0x42 ; 'B'
00000000000172be         db  0x0e ; '.'
00000000000172bf         db  0x10 ; '.'
00000000000172c0         db  0x42 ; 'B'
00000000000172c1         db  0x0e ; '.'
00000000000172c2         db  0x08 ; '.'
00000000000172c3         db  0x48 ; 'H'
00000000000172c4         db  0x0b ; '.'
00000000000172c5         db  0x59 ; 'Y'
00000000000172c6         db  0x0a ; '.'
00000000000172c7         db  0x0e ; '.'
00000000000172c8         db  0x38 ; '8'
00000000000172c9         db  0x43 ; 'C'
00000000000172ca         db  0x0e ; '.'
00000000000172cb         db  0x30 ; '0'
00000000000172cc         db  0x41 ; 'A'
00000000000172cd         db  0x0e ; '.'
00000000000172ce         db  0x28 ; '('
00000000000172cf         db  0x42 ; 'B'
00000000000172d0         db  0x0e ; '.'
00000000000172d1         db  0x20 ; ' '
00000000000172d2         db  0x42 ; 'B'
00000000000172d3         db  0x0e ; '.'
00000000000172d4         db  0x18 ; '.'
00000000000172d5         db  0x42 ; 'B'
00000000000172d6         db  0x0e ; '.'
00000000000172d7         db  0x10 ; '.'
00000000000172d8         db  0x42 ; 'B'
00000000000172d9         db  0x0e ; '.'
00000000000172da         db  0x08 ; '.'
00000000000172db         db  0x4b ; 'K'
00000000000172dc         db  0x0b ; '.'
00000000000172dd         db  0x49 ; 'I'
00000000000172de         db  0x0e ; '.'
00000000000172df         db  0x38 ; '8'
00000000000172e0         db  0x41 ; 'A'
00000000000172e1         db  0x0e ; '.'
00000000000172e2         db  0x30 ; '0'
00000000000172e3         db  0x41 ; 'A'
00000000000172e4         db  0x0e ; '.'
00000000000172e5         db  0x28 ; '('
00000000000172e6         db  0x48 ; 'H'
00000000000172e7         db  0x0e ; '.'
00000000000172e8         db  0x20 ; ' '
00000000000172e9         db  0x44 ; 'D'
00000000000172ea         db  0x0e ; '.'
00000000000172eb         db  0x18 ; '.'
00000000000172ec         db  0x42 ; 'B'
00000000000172ed         db  0x0e ; '.'
00000000000172ee         db  0x10 ; '.'
00000000000172ef         db  0x42 ; 'B'
00000000000172f0         db  0x0e ; '.'
00000000000172f1         db  0x08 ; '.'
00000000000172f2         db  0x00 ; '.'
00000000000172f3         db  0x00 ; '.'
00000000000172f4         dd         0x00000010                                  ; Length of the record
00000000000172f8         dd         0x00000c90                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
00000000000172fc         db         0x54, 0xf0, 0xfe, 0xff                      ; begin 0x6350
0000000000017300         db         0x66, 3 dup (0x00)                          ; length 0x66 (end at 0x63b6)
0000000000017304         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017305         align      8
0000000000017308         dd         0x00000028                                  ; Length of the record
000000000001730c         dd         0x00000ca4                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000017310         db         0xb0, 0xf0, 0xfe, 0xff                      ; begin 0x63c0
0000000000017314         db         0x6b, 3 dup (0x00)                          ; length 0x6b (end at 0x642b)
0000000000017318         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017319         db  0x42 ; 'B'
000000000001731a         db  0x0e ; '.'
000000000001731b         db  0x10 ; '.'
000000000001731c         db  0x8c ; '.'
000000000001731d         db  0x02 ; '.'
000000000001731e         db  0x44 ; 'D'
000000000001731f         db  0x0e ; '.'
0000000000017320         db  0x18 ; '.'
0000000000017321         db  0x86 ; '.'
0000000000017322         db  0x03 ; '.'
0000000000017323         db  0x44 ; 'D'
0000000000017324         db  0x0e ; '.'
0000000000017325         db  0x20 ; ' '
0000000000017326         db  0x83 ; '.'
0000000000017327         db  0x04 ; '.'
0000000000017328         db  0x02 ; '.'
0000000000017329         db  0x5d ; ']'
000000000001732a         db  0x0e ; '.'
000000000001732b         db  0x18 ; '.'
000000000001732c         db  0x41 ; 'A'
000000000001732d         db  0x0e ; '.'
000000000001732e         db  0x10 ; '.'
000000000001732f         db  0x42 ; 'B'
0000000000017330         db  0x0e ; '.'
0000000000017331         db  0x08 ; '.'
0000000000017332         db  0x00 ; '.'
0000000000017333         db  0x00 ; '.'
0000000000017334         dd         0x00000028                                  ; Length of the record
0000000000017338         dd         0x00000cd0                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
000000000001733c         db         0xf4, 0xf0, 0xfe, 0xff                      ; begin 0x6430
0000000000017340         db         0x51, 3 dup (0x00)                          ; length 0x51 (end at 0x6481)
0000000000017344         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017345         db  0x42 ; 'B'
0000000000017346         db  0x0e ; '.'
0000000000017347         db  0x10 ; '.'
0000000000017348         db  0x8c ; '.'
0000000000017349         db  0x02 ; '.'
000000000001734a         db  0x44 ; 'D'
000000000001734b         db  0x0e ; '.'
000000000001734c         db  0x18 ; '.'
000000000001734d         db  0x86 ; '.'
000000000001734e         db  0x03 ; '.'
000000000001734f         db  0x44 ; 'D'
0000000000017350         db  0x0e ; '.'
0000000000017351         db  0x20 ; ' '
0000000000017352         db  0x83 ; '.'
0000000000017353         db  0x04 ; '.'
0000000000017354         db  0x02 ; '.'
0000000000017355         db  0x43 ; 'C'
0000000000017356         db  0x0e ; '.'
0000000000017357         db  0x18 ; '.'
0000000000017358         db  0x41 ; 'A'
0000000000017359         db  0x0e ; '.'
000000000001735a         db  0x10 ; '.'
000000000001735b         db  0x42 ; 'B'
000000000001735c         db  0x0e ; '.'
000000000001735d         db  0x08 ; '.'
000000000001735e         db  0x00 ; '.'
000000000001735f         db  0x00 ; '.'
0000000000017360         dd         0x00000030                                  ; Length of the record
0000000000017364         dd         0x00000cfc                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000017368         db         0x28, 0xf1, 0xfe, 0xff                      ; begin 0x6490
000000000001736c         db         0x9c, 3 dup (0x00)                          ; length 0x9c (end at 0x652c)
0000000000017370         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017371         db  0x41 ; 'A'
0000000000017372         db  0x0e ; '.'
0000000000017373         db  0x10 ; '.'
0000000000017374         db  0x86 ; '.'
0000000000017375         db  0x02 ; '.'
0000000000017376         db  0x41 ; 'A'
0000000000017377         db  0x0e ; '.'
0000000000017378         db  0x18 ; '.'
0000000000017379         db  0x83 ; '.'
000000000001737a         db  0x03 ; '.'
000000000001737b         db  0x4a ; 'J'
000000000001737c         db  0x0e ; '.'
000000000001737d         db  0x20 ; ' '
000000000001737e         db  0x02 ; '.'
000000000001737f         db  0x62 ; 'b'
0000000000017380         db  0x0a ; '.'
0000000000017381         db  0x0e ; '.'
0000000000017382         db  0x18 ; '.'
0000000000017383         db  0x43 ; 'C'
0000000000017384         db  0x0e ; '.'
0000000000017385         db  0x10 ; '.'
0000000000017386         db  0x41 ; 'A'
0000000000017387         db  0x0e ; '.'
0000000000017388         db  0x08 ; '.'
0000000000017389         db  0x46 ; 'F'
000000000001738a         db  0x0b ; '.'
000000000001738b         db  0x5c ; '\'
000000000001738c         db  0x0e ; '.'
000000000001738d         db  0x18 ; '.'
000000000001738e         db  0x46 ; 'F'
000000000001738f         db  0x0e ; '.'
0000000000017390         db  0x10 ; '.'
0000000000017391         db  0x41 ; 'A'
0000000000017392         db  0x0e ; '.'
0000000000017393         db  0x08 ; '.'
0000000000017394         dd         0x00000028                                  ; Length of the record
0000000000017398         dd         0x00000d30                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
000000000001739c         db         0x94, 0xf1, 0xfe, 0xff                      ; begin 0x6530
00000000000173a0         db         0x64, 3 dup (0x00)                          ; length 0x64 (end at 0x6594)
00000000000173a4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000173a5         db  0x41 ; 'A'
00000000000173a6         db  0x0e ; '.'
00000000000173a7         db  0x10 ; '.'
00000000000173a8         db  0x86 ; '.'
00000000000173a9         db  0x02 ; '.'
00000000000173aa         db  0x41 ; 'A'
00000000000173ab         db  0x0e ; '.'
00000000000173ac         db  0x18 ; '.'
00000000000173ad         db  0x83 ; '.'
00000000000173ae         db  0x03 ; '.'
00000000000173af         db  0x4a ; 'J'
00000000000173b0         db  0x0e ; '.'
00000000000173b1         db  0x20 ; ' '
00000000000173b2         db  0x62 ; 'b'
00000000000173b3         db  0x0a ; '.'
00000000000173b4         db  0x0e ; '.'
00000000000173b5         db  0x18 ; '.'
00000000000173b6         db  0x41 ; 'A'
00000000000173b7         db  0x0e ; '.'
00000000000173b8         db  0x10 ; '.'
00000000000173b9         db  0x41 ; 'A'
00000000000173ba         db  0x0e ; '.'
00000000000173bb         db  0x08 ; '.'
00000000000173bc         db  0x48 ; 'H'
00000000000173bd         db  0x0b ; '.'
00000000000173be         db  0x00 ; '.'
00000000000173bf         db  0x00 ; '.'
00000000000173c0         dd         0x00000034                                  ; Length of the record
00000000000173c4         dd         0x00000d5c                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
00000000000173c8         db         0xd8, 0xf1, 0xfe, 0xff                      ; begin 0x65a0
00000000000173cc         db         0x2c, 0x01, 2 dup (0x00)                    ; length 0x12c (end at 0x66cc)
00000000000173d0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000173d1         db  0x41 ; 'A'
00000000000173d2         db  0x0e ; '.'
00000000000173d3         db  0x10 ; '.'
00000000000173d4         db  0x86 ; '.'
00000000000173d5         db  0x02 ; '.'
00000000000173d6         db  0x41 ; 'A'
00000000000173d7         db  0x0e ; '.'
00000000000173d8         db  0x18 ; '.'
00000000000173d9         db  0x83 ; '.'
00000000000173da         db  0x03 ; '.'
00000000000173db         db  0x4a ; 'J'
00000000000173dc         db  0x0e ; '.'
00000000000173dd         db  0x20 ; ' '
00000000000173de         db  0x66 ; 'f'
00000000000173df         db  0x0a ; '.'
00000000000173e0         db  0x0e ; '.'
00000000000173e1         db  0x18 ; '.'
00000000000173e2         db  0x41 ; 'A'
00000000000173e3         db  0x0e ; '.'
00000000000173e4         db  0x10 ; '.'
00000000000173e5         db  0x41 ; 'A'
00000000000173e6         db  0x0e ; '.'
00000000000173e7         db  0x08 ; '.'
00000000000173e8         db  0x44 ; 'D'
00000000000173e9         db  0x0b ; '.'
00000000000173ea         db  0x6d ; 'm'
00000000000173eb         db  0x0a ; '.'
00000000000173ec         db  0x0e ; '.'
00000000000173ed         db  0x18 ; '.'
00000000000173ee         db  0x46 ; 'F'
00000000000173ef         db  0x0e ; '.'
00000000000173f0         db  0x10 ; '.'
00000000000173f1         db  0x41 ; 'A'
00000000000173f2         db  0x0e ; '.'
00000000000173f3         db  0x08 ; '.'
00000000000173f4         db  0x44 ; 'D'
00000000000173f5         db  0x0b ; '.'
00000000000173f6         db  0x00 ; '.'
00000000000173f7         db  0x00 ; '.'
00000000000173f8         dd         0x0000004c                                  ; Length of the record
00000000000173fc         dd         0x00000d94                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000017400         db         0xd0, 0xf2, 0xfe, 0xff                      ; begin 0x66d0
0000000000017404         db         0xec, 3 dup (0x00)                          ; length 0xec (end at 0x67bc)
0000000000017408         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017409         db  0x42 ; 'B'
000000000001740a         db  0x0e ; '.'
000000000001740b         db  0x10 ; '.'
000000000001740c         db  0x8e ; '.'
000000000001740d         db  0x02 ; '.'
000000000001740e         db  0x42 ; 'B'
000000000001740f         db  0x0e ; '.'
0000000000017410         db  0x18 ; '.'
0000000000017411         db  0x8d ; '.'
0000000000017412         db  0x03 ; '.'
0000000000017413         db  0x45 ; 'E'
0000000000017414         db  0x0e ; '.'
0000000000017415         db  0x20 ; ' '
0000000000017416         db  0x8c ; '.'
0000000000017417         db  0x04 ; '.'
0000000000017418         db  0x41 ; 'A'
0000000000017419         db  0x0e ; '.'
000000000001741a         db  0x28 ; '('
000000000001741b         db  0x86 ; '.'
000000000001741c         db  0x05 ; '.'
000000000001741d         db  0x44 ; 'D'
000000000001741e         db  0x0e ; '.'
000000000001741f         db  0x30 ; '0'
0000000000017420         db  0x83 ; '.'
0000000000017421         db  0x06 ; '.'
0000000000017422         db  0x02 ; '.'
0000000000017423         db  0x71 ; 'q'
0000000000017424         db  0x0a ; '.'
0000000000017425         db  0x0e ; '.'
0000000000017426         db  0x28 ; '('
0000000000017427         db  0x46 ; 'F'
0000000000017428         db  0x0e ; '.'
0000000000017429         db  0x20 ; ' '
000000000001742a         db  0x42 ; 'B'
000000000001742b         db  0x0e ; '.'
000000000001742c         db  0x18 ; '.'
000000000001742d         db  0x42 ; 'B'
000000000001742e         db  0x0e ; '.'
000000000001742f         db  0x10 ; '.'
0000000000017430         db  0x42 ; 'B'
0000000000017431         db  0x0e ; '.'
0000000000017432         db  0x08 ; '.'
0000000000017433         db  0x45 ; 'E'
0000000000017434         db  0x0b ; '.'
0000000000017435         db  0x6e ; 'n'
0000000000017436         db  0x0a ; '.'
0000000000017437         db  0x0e ; '.'
0000000000017438         db  0x28 ; '('
0000000000017439         db  0x41 ; 'A'
000000000001743a         db  0x0e ; '.'
000000000001743b         db  0x20 ; ' '
000000000001743c         db  0x42 ; 'B'
000000000001743d         db  0x0e ; '.'
000000000001743e         db  0x18 ; '.'
000000000001743f         db  0x42 ; 'B'
0000000000017440         db  0x0e ; '.'
0000000000017441         db  0x10 ; '.'
0000000000017442         db  0x42 ; 'B'
0000000000017443         db  0x0e ; '.'
0000000000017444         db  0x08 ; '.'
0000000000017445         db  0x41 ; 'A'
0000000000017446         db  0x0b ; '.'
0000000000017447         db  0x00 ; '.'
0000000000017448         dd         0x0000002c                                  ; Length of the record
000000000001744c         dd         0x00000de4                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000017450         db         0x70, 0xf3, 0xfe, 0xff                      ; begin 0x67c0
0000000000017454         db         0x6e, 3 dup (0x00)                          ; length 0x6e (end at 0x682e)
0000000000017458         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017459         db  0x42 ; 'B'
000000000001745a         db  0x0e ; '.'
000000000001745b         db  0x10 ; '.'
000000000001745c         db  0x8c ; '.'
000000000001745d         db  0x02 ; '.'
000000000001745e         db  0x49 ; 'I'
000000000001745f         db  0x0e ; '.'
0000000000017460         db  0x18 ; '.'
0000000000017461         db  0x86 ; '.'
0000000000017462         db  0x03 ; '.'
0000000000017463         db  0x49 ; 'I'
0000000000017464         db  0x0e ; '.'
0000000000017465         db  0x20 ; ' '
0000000000017466         db  0x83 ; '.'
0000000000017467         db  0x04 ; '.'
0000000000017468         db  0x02 ; '.'
0000000000017469         db  0x4a ; 'J'
000000000001746a         db  0x0a ; '.'
000000000001746b         db  0x0e ; '.'
000000000001746c         db  0x18 ; '.'
000000000001746d         db  0x41 ; 'A'
000000000001746e         db  0x0e ; '.'
000000000001746f         db  0x10 ; '.'
0000000000017470         db  0x42 ; 'B'
0000000000017471         db  0x0e ; '.'
0000000000017472         db  0x08 ; '.'
0000000000017473         db  0x47 ; 'G'
0000000000017474         db  0x0b ; '.'
0000000000017475         db  0x00 ; '.'
0000000000017476         db  0x00 ; '.'
0000000000017477         db  0x00 ; '.'
0000000000017478         dd         0x00000048                                  ; Length of the record
000000000001747c         dd         0x00000e14                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000017480         db         0xb0, 0xf3, 0xfe, 0xff                      ; begin 0x6830
0000000000017484         db         0xc3, 0x01, 2 dup (0x00)                    ; length 0x1c3 (end at 0x69f3)
0000000000017488         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017489         db  0x42 ; 'B'
000000000001748a         db  0x0e ; '.'
000000000001748b         db  0x10 ; '.'
000000000001748c         db  0x8f ; '.'
000000000001748d         db  0x02 ; '.'
000000000001748e         db  0x42 ; 'B'
000000000001748f         db  0x0e ; '.'
0000000000017490         db  0x18 ; '.'
0000000000017491         db  0x8e ; '.'
0000000000017492         db  0x03 ; '.'
0000000000017493         db  0x42 ; 'B'
0000000000017494         db  0x0e ; '.'
0000000000017495         db  0x20 ; ' '
0000000000017496         db  0x8d ; '.'
0000000000017497         db  0x04 ; '.'
0000000000017498         db  0x42 ; 'B'
0000000000017499         db  0x0e ; '.'
000000000001749a         db  0x28 ; '('
000000000001749b         db  0x8c ; '.'
000000000001749c         db  0x05 ; '.'
000000000001749d         db  0x41 ; 'A'
000000000001749e         db  0x0e ; '.'
000000000001749f         db  0x30 ; '0'
00000000000174a0         db  0x86 ; '.'
00000000000174a1         db  0x06 ; '.'
00000000000174a2         db  0x41 ; 'A'
00000000000174a3         db  0x0e ; '.'
00000000000174a4         db  0x38 ; '8'
00000000000174a5         db  0x83 ; '.'
00000000000174a6         db  0x07 ; '.'
00000000000174a7         db  0x47 ; 'G'
00000000000174a8         db  0x0e ; '.'
00000000000174a9         db  0xa0 ; '.'
00000000000174aa         db  0x01 ; '.'
00000000000174ab         db  0x02 ; '.'
00000000000174ac         db  0xd3 ; '.'
00000000000174ad         db  0x0a ; '.'
00000000000174ae         db  0x0e ; '.'
00000000000174af         db  0x38 ; '8'
00000000000174b0         db  0x41 ; 'A'
00000000000174b1         db  0x0e ; '.'
00000000000174b2         db  0x30 ; '0'
00000000000174b3         db  0x41 ; 'A'
00000000000174b4         db  0x0e ; '.'
00000000000174b5         db  0x28 ; '('
00000000000174b6         db  0x42 ; 'B'
00000000000174b7         db  0x0e ; '.'
00000000000174b8         db  0x20 ; ' '
00000000000174b9         db  0x42 ; 'B'
00000000000174ba         db  0x0e ; '.'
00000000000174bb         db  0x18 ; '.'
00000000000174bc         db  0x42 ; 'B'
00000000000174bd         db  0x0e ; '.'
00000000000174be         db  0x10 ; '.'
00000000000174bf         db  0x42 ; 'B'
00000000000174c0         db  0x0e ; '.'
00000000000174c1         db  0x08 ; '.'
00000000000174c2         db  0x42 ; 'B'
00000000000174c3         db  0x0b ; '.'
00000000000174c4         dd         0x00000048                                  ; Length of the record
00000000000174c8         dd         0x00000e60                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
00000000000174cc         db         0x34, 0xf5, 0xfe, 0xff                      ; begin 0x6a00
00000000000174d0         db         0x15, 0x06, 2 dup (0x00)                    ; length 0x615 (end at 0x7015)
00000000000174d4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000174d5         db  0x42 ; 'B'
00000000000174d6         db  0x0e ; '.'
00000000000174d7         db  0x10 ; '.'
00000000000174d8         db  0x8f ; '.'
00000000000174d9         db  0x02 ; '.'
00000000000174da         db  0x42 ; 'B'
00000000000174db         db  0x0e ; '.'
00000000000174dc         db  0x18 ; '.'
00000000000174dd         db  0x8e ; '.'
00000000000174de         db  0x03 ; '.'
00000000000174df         db  0x45 ; 'E'
00000000000174e0         db  0x0e ; '.'
00000000000174e1         db  0x20 ; ' '
00000000000174e2         db  0x8d ; '.'
00000000000174e3         db  0x04 ; '.'
00000000000174e4         db  0x42 ; 'B'
00000000000174e5         db  0x0e ; '.'
00000000000174e6         db  0x28 ; '('
00000000000174e7         db  0x8c ; '.'
00000000000174e8         db  0x05 ; '.'
00000000000174e9         db  0x41 ; 'A'
00000000000174ea         db  0x0e ; '.'
00000000000174eb         db  0x30 ; '0'
00000000000174ec         db  0x86 ; '.'
00000000000174ed         db  0x06 ; '.'
00000000000174ee         db  0x41 ; 'A'
00000000000174ef         db  0x0e ; '.'
00000000000174f0         db  0x38 ; '8'
00000000000174f1         db  0x83 ; '.'
00000000000174f2         db  0x07 ; '.'
00000000000174f3         db  0x47 ; 'G'
00000000000174f4         db  0x0e ; '.'
00000000000174f5         db  0xe0 ; '.'
00000000000174f6         db  0x01 ; '.'
00000000000174f7         db  0x02 ; '.'
00000000000174f8         db  0x69 ; 'i'
00000000000174f9         db  0x0a ; '.'
00000000000174fa         db  0x0e ; '.'
00000000000174fb         db  0x38 ; '8'
00000000000174fc         db  0x41 ; 'A'
00000000000174fd         db  0x0e ; '.'
00000000000174fe         db  0x30 ; '0'
00000000000174ff         db  0x41 ; 'A'
0000000000017500         db  0x0e ; '.'
0000000000017501         db  0x28 ; '('
0000000000017502         db  0x42 ; 'B'
0000000000017503         db  0x0e ; '.'
0000000000017504         db  0x20 ; ' '
0000000000017505         db  0x42 ; 'B'
0000000000017506         db  0x0e ; '.'
0000000000017507         db  0x18 ; '.'
0000000000017508         db  0x42 ; 'B'
0000000000017509         db  0x0e ; '.'
000000000001750a         db  0x10 ; '.'
000000000001750b         db  0x42 ; 'B'
000000000001750c         db  0x0e ; '.'
000000000001750d         db  0x08 ; '.'
000000000001750e         db  0x49 ; 'I'
000000000001750f         db  0x0b ; '.'
0000000000017510         dd         0x00000058                                  ; Length of the record
0000000000017514         dd         0x00000eac                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000017518         db         0x08, 0xfb, 0xfe, 0xff                      ; begin 0x7020
000000000001751c         db         0x4e, 0x01, 2 dup (0x00)                    ; length 0x14e (end at 0x716e)
0000000000017520         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017521         db  0x41 ; 'A'
0000000000017522         db  0x0e ; '.'
0000000000017523         db  0x10 ; '.'
0000000000017524         db  0x86 ; '.'
0000000000017525         db  0x02 ; '.'
0000000000017526         db  0x41 ; 'A'
0000000000017527         db  0x0e ; '.'
0000000000017528         db  0x18 ; '.'
0000000000017529         db  0x83 ; '.'
000000000001752a         db  0x03 ; '.'
000000000001752b         db  0x4e ; 'N'
000000000001752c         db  0x0e ; '.'
000000000001752d         db  0x20 ; ' '
000000000001752e         db  0x02 ; '.'
000000000001752f         db  0x83 ; '.'
0000000000017530         db  0x0a ; '.'
0000000000017531         db  0x0e ; '.'
0000000000017532         db  0x18 ; '.'
0000000000017533         db  0x41 ; 'A'
0000000000017534         db  0x0e ; '.'
0000000000017535         db  0x10 ; '.'
0000000000017536         db  0x41 ; 'A'
0000000000017537         db  0x0e ; '.'
0000000000017538         db  0x08 ; '.'
0000000000017539         db  0x4b ; 'K'
000000000001753a         db  0x0b ; '.'
000000000001753b         db  0x02 ; '.'
000000000001753c         db  0x61 ; 'a'
000000000001753d         db  0x0a ; '.'
000000000001753e         db  0x0e ; '.'
000000000001753f         db  0x18 ; '.'
0000000000017540         db  0x43 ; 'C'
0000000000017541         db  0x0e ; '.'
0000000000017542         db  0x10 ; '.'
0000000000017543         db  0x41 ; 'A'
0000000000017544         db  0x0e ; '.'
0000000000017545         db  0x08 ; '.'
0000000000017546         db  0x4b ; 'K'
0000000000017547         db  0x0b ; '.'
0000000000017548         db  0x4c ; 'L'
0000000000017549         db  0x0a ; '.'
000000000001754a         db  0x0e ; '.'
000000000001754b         db  0x18 ; '.'
000000000001754c         db  0x43 ; 'C'
000000000001754d         db  0x0e ; '.'
000000000001754e         db  0x10 ; '.'
000000000001754f         db  0x41 ; 'A'
0000000000017550         db  0x0e ; '.'
0000000000017551         db  0x08 ; '.'
0000000000017552         db  0x48 ; 'H'
0000000000017553         db  0x0b ; '.'
0000000000017554         db  0x49 ; 'I'
0000000000017555         db  0x0a ; '.'
0000000000017556         db  0x0e ; '.'
0000000000017557         db  0x18 ; '.'
0000000000017558         db  0x43 ; 'C'
0000000000017559         db  0x0e ; '.'
000000000001755a         db  0x10 ; '.'
000000000001755b         db  0x41 ; 'A'
000000000001755c         db  0x0e ; '.'
000000000001755d         db  0x08 ; '.'
000000000001755e         db  0x4b ; 'K'
000000000001755f         db  0x0b ; '.'
0000000000017560         db  0x49 ; 'I'
0000000000017561         db  0x0e ; '.'
0000000000017562         db  0x18 ; '.'
0000000000017563         db  0x43 ; 'C'
0000000000017564         db  0x0e ; '.'
0000000000017565         db  0x10 ; '.'
0000000000017566         db  0x41 ; 'A'
0000000000017567         db  0x0e ; '.'
0000000000017568         db  0x08 ; '.'
0000000000017569         db  0x00 ; '.'
000000000001756a         db  0x00 ; '.'
000000000001756b         db  0x00 ; '.'
000000000001756c         dd         0x00000028                                  ; Length of the record
0000000000017570         dd         0x00000f08                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000017574         db         0xfc, 0xfb, 0xfe, 0xff                      ; begin 0x7170
0000000000017578         db         0x86, 3 dup (0x00)                          ; length 0x86 (end at 0x71f6)
000000000001757c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001757d         db  0x42 ; 'B'
000000000001757e         db  0x0e ; '.'
000000000001757f         db  0x10 ; '.'
0000000000017580         db  0x8c ; '.'
0000000000017581         db  0x02 ; '.'
0000000000017582         db  0x41 ; 'A'
0000000000017583         db  0x0e ; '.'
0000000000017584         db  0x18 ; '.'
0000000000017585         db  0x86 ; '.'
0000000000017586         db  0x03 ; '.'
0000000000017587         db  0x44 ; 'D'
0000000000017588         db  0x0e ; '.'
0000000000017589         db  0x20 ; ' '
000000000001758a         db  0x83 ; '.'
000000000001758b         db  0x04 ; '.'
000000000001758c         db  0x70 ; 'p'
000000000001758d         db  0x0a ; '.'
000000000001758e         db  0x0e ; '.'
000000000001758f         db  0x18 ; '.'
0000000000017590         db  0x41 ; 'A'
0000000000017591         db  0x0e ; '.'
0000000000017592         db  0x10 ; '.'
0000000000017593         db  0x42 ; 'B'
0000000000017594         db  0x0e ; '.'
0000000000017595         db  0x08 ; '.'
0000000000017596         db  0x46 ; 'F'
0000000000017597         db  0x0b ; '.'
0000000000017598         dd         0x00000018                                  ; Length of the record
000000000001759c         dd         0x00000f34                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
00000000000175a0         db         0x60, 0xfc, 0xfe, 0xff                      ; begin 0x7200
00000000000175a4         db         0x30, 3 dup (0x00)                          ; length 0x30 (end at 0x7230)
00000000000175a8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000175a9         db  0x41 ; 'A'
00000000000175aa         db  0x0e ; '.'
00000000000175ab         db  0x10 ; '.'
00000000000175ac         db  0x83 ; '.'
00000000000175ad         db  0x02 ; '.'
00000000000175ae         db  0x6a ; 'j'
00000000000175af         db  0x0e ; '.'
00000000000175b0         db  0x08 ; '.'
00000000000175b1         db  0x00 ; '.'
00000000000175b2         db  0x00 ; '.'
00000000000175b3         db  0x00 ; '.'
00000000000175b4         dd         0x00000010                                  ; Length of the record
00000000000175b8         dd         0x00000f50                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
00000000000175bc         db         0x74, 0xfc, 0xfe, 0xff                      ; begin 0x7230
00000000000175c0         db         0x25, 3 dup (0x00)                          ; length 0x25 (end at 0x7255)
00000000000175c4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000175c5         align      8
00000000000175c8         dd         0x00000014                                  ; Length of the record
00000000000175cc         dd         0x00000f64                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
00000000000175d0         db         0x90, 0xfc, 0xfe, 0xff                      ; begin 0x7260
00000000000175d4         db         0x14, 3 dup (0x00)                          ; length 0x14 (end at 0x7274)
00000000000175d8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000175d9         db  0x48 ; 'H'
00000000000175da         db  0x0e ; '.'
00000000000175db         db  0x10 ; '.'
00000000000175dc         db  0x4b ; 'K'
00000000000175dd         db  0x0e ; '.'
00000000000175de         db  0x08 ; '.'
00000000000175df         db  0x00 ; '.'
00000000000175e0         dd         0x00000048                                  ; Length of the record
00000000000175e4         dd         0x00000f7c                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
00000000000175e8         db         0x98, 0xfc, 0xfe, 0xff                      ; begin 0x7280
00000000000175ec         db         0xce, 0x01, 2 dup (0x00)                    ; length 0x1ce (end at 0x744e)
00000000000175f0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000175f1         db  0x42 ; 'B'
00000000000175f2         db  0x0e ; '.'
00000000000175f3         db  0x10 ; '.'
00000000000175f4         db  0x8f ; '.'
00000000000175f5         db  0x02 ; '.'
00000000000175f6         db  0x42 ; 'B'
00000000000175f7         db  0x0e ; '.'
00000000000175f8         db  0x18 ; '.'
00000000000175f9         db  0x8e ; '.'
00000000000175fa         db  0x03 ; '.'
00000000000175fb         db  0x45 ; 'E'
00000000000175fc         db  0x0e ; '.'
00000000000175fd         db  0x20 ; ' '
00000000000175fe         db  0x8d ; '.'
00000000000175ff         db  0x04 ; '.'
0000000000017600         db  0x42 ; 'B'
0000000000017601         db  0x0e ; '.'
0000000000017602         db  0x28 ; '('
0000000000017603         db  0x8c ; '.'
0000000000017604         db  0x05 ; '.'
0000000000017605         db  0x41 ; 'A'
0000000000017606         db  0x0e ; '.'
0000000000017607         db  0x30 ; '0'
0000000000017608         db  0x86 ; '.'
0000000000017609         db  0x06 ; '.'
000000000001760a         db  0x41 ; 'A'
000000000001760b         db  0x0e ; '.'
000000000001760c         db  0x38 ; '8'
000000000001760d         db  0x83 ; '.'
000000000001760e         db  0x07 ; '.'
000000000001760f         db  0x47 ; 'G'
0000000000017610         db  0x0e ; '.'
0000000000017611         db  0x50 ; 'P'
0000000000017612         db  0x02 ; '.'
0000000000017613         db  0xac ; '.'
0000000000017614         db  0x0a ; '.'
0000000000017615         db  0x0e ; '.'
0000000000017616         db  0x38 ; '8'
0000000000017617         db  0x41 ; 'A'
0000000000017618         db  0x0e ; '.'
0000000000017619         db  0x30 ; '0'
000000000001761a         db  0x41 ; 'A'
000000000001761b         db  0x0e ; '.'
000000000001761c         db  0x28 ; '('
000000000001761d         db  0x42 ; 'B'
000000000001761e         db  0x0e ; '.'
000000000001761f         db  0x20 ; ' '
0000000000017620         db  0x42 ; 'B'
0000000000017621         db  0x0e ; '.'
0000000000017622         db  0x18 ; '.'
0000000000017623         db  0x42 ; 'B'
0000000000017624         db  0x0e ; '.'
0000000000017625         db  0x10 ; '.'
0000000000017626         db  0x42 ; 'B'
0000000000017627         db  0x0e ; '.'
0000000000017628         db  0x08 ; '.'
0000000000017629         db  0x46 ; 'F'
000000000001762a         db  0x0b ; '.'
000000000001762b         db  0x00 ; '.'
000000000001762c         dd         0x00000034                                  ; Length of the record
0000000000017630         dd         0x00000fc8                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000017634         db         0x1c, 2 dup (0xfe), 0xff                    ; begin 0x7450
0000000000017638         db         0x9f, 3 dup (0x00)                          ; length 0x9f (end at 0x74ef)
000000000001763c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001763d         db  0x42 ; 'B'
000000000001763e         db  0x0e ; '.'
000000000001763f         db  0x10 ; '.'
0000000000017640         db  0x8d ; '.'
0000000000017641         db  0x02 ; '.'
0000000000017642         db  0x42 ; 'B'
0000000000017643         db  0x0e ; '.'
0000000000017644         db  0x18 ; '.'
0000000000017645         db  0x8c ; '.'
0000000000017646         db  0x03 ; '.'
0000000000017647         db  0x44 ; 'D'
0000000000017648         db  0x0e ; '.'
0000000000017649         db  0x20 ; ' '
000000000001764a         db  0x86 ; '.'
000000000001764b         db  0x04 ; '.'
000000000001764c         db  0x41 ; 'A'
000000000001764d         db  0x0e ; '.'
000000000001764e         db  0x28 ; '('
000000000001764f         db  0x83 ; '.'
0000000000017650         db  0x05 ; '.'
0000000000017651         db  0x51 ; 'Q'
0000000000017652         db  0x0e ; '.'
0000000000017653         db  0x30 ; '0'
0000000000017654         db  0x02 ; '.'
0000000000017655         db  0x7e ; '~'
0000000000017656         db  0x0e ; '.'
0000000000017657         db  0x28 ; '('
0000000000017658         db  0x41 ; 'A'
0000000000017659         db  0x0e ; '.'
000000000001765a         db  0x20 ; ' '
000000000001765b         db  0x41 ; 'A'
000000000001765c         db  0x0e ; '.'
000000000001765d         db  0x18 ; '.'
000000000001765e         db  0x42 ; 'B'
000000000001765f         db  0x0e ; '.'
0000000000017660         db  0x10 ; '.'
0000000000017661         db  0x42 ; 'B'
0000000000017662         db  0x0e ; '.'
0000000000017663         db  0x08 ; '.'
0000000000017664         dd         0x00000048                                  ; Length of the record
0000000000017668         dd         0x00001000                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
000000000001766c         db         0x84, 2 dup (0xfe), 0xff                    ; begin 0x74f0
0000000000017670         db         0x75, 0x02, 2 dup (0x00)                    ; length 0x275 (end at 0x7765)
0000000000017674         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017675         db  0x42 ; 'B'
0000000000017676         db  0x0e ; '.'
0000000000017677         db  0x10 ; '.'
0000000000017678         db  0x8f ; '.'
0000000000017679         db  0x02 ; '.'
000000000001767a         db  0x42 ; 'B'
000000000001767b         db  0x0e ; '.'
000000000001767c         db  0x18 ; '.'
000000000001767d         db  0x8e ; '.'
000000000001767e         db  0x03 ; '.'
000000000001767f         db  0x45 ; 'E'
0000000000017680         db  0x0e ; '.'
0000000000017681         db  0x20 ; ' '
0000000000017682         db  0x8d ; '.'
0000000000017683         db  0x04 ; '.'
0000000000017684         db  0x42 ; 'B'
0000000000017685         db  0x0e ; '.'
0000000000017686         db  0x28 ; '('
0000000000017687         db  0x8c ; '.'
0000000000017688         db  0x05 ; '.'
0000000000017689         db  0x44 ; 'D'
000000000001768a         db  0x0e ; '.'
000000000001768b         db  0x30 ; '0'
000000000001768c         db  0x86 ; '.'
000000000001768d         db  0x06 ; '.'
000000000001768e         db  0x41 ; 'A'
000000000001768f         db  0x0e ; '.'
0000000000017690         db  0x38 ; '8'
0000000000017691         db  0x83 ; '.'
0000000000017692         db  0x07 ; '.'
0000000000017693         db  0x4a ; 'J'
0000000000017694         db  0x0e ; '.'
0000000000017695         db  0x50 ; 'P'
0000000000017696         db  0x03 ; '.'
0000000000017697         db  0x1a ; '.'
0000000000017698         db  0x01 ; '.'
0000000000017699         db  0x0a ; '.'
000000000001769a         db  0x0e ; '.'
000000000001769b         db  0x38 ; '8'
000000000001769c         db  0x41 ; 'A'
000000000001769d         db  0x0e ; '.'
000000000001769e         db  0x30 ; '0'
000000000001769f         db  0x41 ; 'A'
00000000000176a0         db  0x0e ; '.'
00000000000176a1         db  0x28 ; '('
00000000000176a2         db  0x42 ; 'B'
00000000000176a3         db  0x0e ; '.'
00000000000176a4         db  0x20 ; ' '
00000000000176a5         db  0x42 ; 'B'
00000000000176a6         db  0x0e ; '.'
00000000000176a7         db  0x18 ; '.'
00000000000176a8         db  0x42 ; 'B'
00000000000176a9         db  0x0e ; '.'
00000000000176aa         db  0x10 ; '.'
00000000000176ab         db  0x42 ; 'B'
00000000000176ac         db  0x0e ; '.'
00000000000176ad         db  0x08 ; '.'
00000000000176ae         db  0x42 ; 'B'
00000000000176af         db  0x0b ; '.'
00000000000176b0         dd         0x00000018                                  ; Length of the record
00000000000176b4         dd         0x0000104c                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
00000000000176b8         db         0xb8, 0x00, 2 dup (0xff)                    ; begin 0x7770
00000000000176bc         db         0x59, 3 dup (0x00)                          ; length 0x59 (end at 0x77c9)
00000000000176c0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000176c1         db  0x41 ; 'A'
00000000000176c2         db  0x0e ; '.'
00000000000176c3         db  0x10 ; '.'
00000000000176c4         db  0x83 ; '.'
00000000000176c5         db  0x02 ; '.'
00000000000176c6         db  0x02 ; '.'
00000000000176c7         db  0x53 ; 'S'
00000000000176c8         db  0x0e ; '.'
00000000000176c9         db  0x08 ; '.'
00000000000176ca         db  0x00 ; '.'
00000000000176cb         db  0x00 ; '.'
00000000000176cc         dd         0x0000001c                                  ; Length of the record
00000000000176d0         dd         0x00001068                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
00000000000176d4         db         0xfc, 0x00, 2 dup (0xff)                    ; begin 0x77d0
00000000000176d8         db         0x32, 3 dup (0x00)                          ; length 0x32 (end at 0x7802)
00000000000176dc         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000176dd         db  0x41 ; 'A'
00000000000176de         db  0x0e ; '.'
00000000000176df         db  0x10 ; '.'
00000000000176e0         db  0x83 ; '.'
00000000000176e1         db  0x02 ; '.'
00000000000176e2         db  0x5f ; '_'
00000000000176e3         db  0x0a ; '.'
00000000000176e4         db  0x0e ; '.'
00000000000176e5         db  0x08 ; '.'
00000000000176e6         db  0x48 ; 'H'
00000000000176e7         db  0x0b ; '.'
00000000000176e8         db  0x45 ; 'E'
00000000000176e9         db  0x0e ; '.'
00000000000176ea         db  0x08 ; '.'
00000000000176eb         db  0x00 ; '.'
00000000000176ec         dd         0x00000038                                  ; Length of the record
00000000000176f0         dd         0x00001088                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
00000000000176f4         db         0x1c, 0x01, 2 dup (0xff)                    ; begin 0x7810
00000000000176f8         db         0x5f, 0x01, 2 dup (0x00)                    ; length 0x15f (end at 0x796f)
00000000000176fc         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000176fd         db  0x42 ; 'B'
00000000000176fe         db  0x0e ; '.'
00000000000176ff         db  0x10 ; '.'
0000000000017700         db  0x8e ; '.'
0000000000017701         db  0x02 ; '.'
0000000000017702         db  0x42 ; 'B'
0000000000017703         db  0x0e ; '.'
0000000000017704         db  0x18 ; '.'
0000000000017705         db  0x8d ; '.'
0000000000017706         db  0x03 ; '.'
0000000000017707         db  0x42 ; 'B'
0000000000017708         db  0x0e ; '.'
0000000000017709         db  0x20 ; ' '
000000000001770a         db  0x8c ; '.'
000000000001770b         db  0x04 ; '.'
000000000001770c         db  0x44 ; 'D'
000000000001770d         db  0x0e ; '.'
000000000001770e         db  0x28 ; '('
000000000001770f         db  0x86 ; '.'
0000000000017710         db  0x05 ; '.'
0000000000017711         db  0x41 ; 'A'
0000000000017712         db  0x0e ; '.'
0000000000017713         db  0x30 ; '0'
0000000000017714         db  0x83 ; '.'
0000000000017715         db  0x06 ; '.'
0000000000017716         db  0x03 ; '.'
0000000000017717         db  0x45 ; 'E'
0000000000017718         db  0x01 ; '.'
0000000000017719         db  0x0e ; '.'
000000000001771a         db  0x28 ; '('
000000000001771b         db  0x44 ; 'D'
000000000001771c         db  0x0e ; '.'
000000000001771d         db  0x20 ; ' '
000000000001771e         db  0x42 ; 'B'
000000000001771f         db  0x0e ; '.'
0000000000017720         db  0x18 ; '.'
0000000000017721         db  0x42 ; 'B'
0000000000017722         db  0x0e ; '.'
0000000000017723         db  0x10 ; '.'
0000000000017724         db  0x42 ; 'B'
0000000000017725         db  0x0e ; '.'
0000000000017726         db  0x08 ; '.'
0000000000017727         db  0x00 ; '.'
0000000000017728         dd         0x00000038                                  ; Length of the record
000000000001772c         dd         0x000010c4                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000017730         db         0x40, 0x02, 2 dup (0xff)                    ; begin 0x7970
0000000000017734         db         0xb8, 3 dup (0x00)                          ; length 0xb8 (end at 0x7a28)
0000000000017738         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017739         db  0x42 ; 'B'
000000000001773a         db  0x0e ; '.'
000000000001773b         db  0x10 ; '.'
000000000001773c         db  0x8e ; '.'
000000000001773d         db  0x02 ; '.'
000000000001773e         db  0x42 ; 'B'
000000000001773f         db  0x0e ; '.'
0000000000017740         db  0x18 ; '.'
0000000000017741         db  0x8d ; '.'
0000000000017742         db  0x03 ; '.'
0000000000017743         db  0x45 ; 'E'
0000000000017744         db  0x0e ; '.'
0000000000017745         db  0x20 ; ' '
0000000000017746         db  0x8c ; '.'
0000000000017747         db  0x04 ; '.'
0000000000017748         db  0x41 ; 'A'
0000000000017749         db  0x0e ; '.'
000000000001774a         db  0x28 ; '('
000000000001774b         db  0x86 ; '.'
000000000001774c         db  0x05 ; '.'
000000000001774d         db  0x41 ; 'A'
000000000001774e         db  0x0e ; '.'
000000000001774f         db  0x30 ; '0'
0000000000017750         db  0x83 ; '.'
0000000000017751         db  0x06 ; '.'
0000000000017752         db  0x02 ; '.'
0000000000017753         db  0x8f ; '.'
0000000000017754         db  0x0e ; '.'
0000000000017755         db  0x28 ; '('
0000000000017756         db  0x57 ; 'W'
0000000000017757         db  0x0e ; '.'
0000000000017758         db  0x20 ; ' '
0000000000017759         db  0x42 ; 'B'
000000000001775a         db  0x0e ; '.'
000000000001775b         db  0x18 ; '.'
000000000001775c         db  0x42 ; 'B'
000000000001775d         db  0x0e ; '.'
000000000001775e         db  0x10 ; '.'
000000000001775f         db  0x42 ; 'B'
0000000000017760         db  0x0e ; '.'
0000000000017761         db  0x08 ; '.'
0000000000017762         db  0x00 ; '.'
0000000000017763         db  0x00 ; '.'
0000000000017764         dd         0x00000010                                  ; Length of the record
0000000000017768         dd         0x00001100                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
000000000001776c         db         0xc4, 0x02, 2 dup (0xff)                    ; begin 0x7a30
0000000000017770         db         0x4f, 3 dup (0x00)                          ; length 0x4f (end at 0x7a7f)
0000000000017774         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017775         align      8
0000000000017778         dd         0x00000010                                  ; Length of the record
000000000001777c         dd         0x00001114                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000017780         db         0x00, 0x03, 2 dup (0xff)                    ; begin 0x7a80
0000000000017784         db         0x53, 3 dup (0x00)                          ; length 0x53 (end at 0x7ad3)
0000000000017788         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017789         align      4
000000000001778c         dd         0x00000010                                  ; Length of the record
0000000000017790         dd         0x00001128                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000017794         db         0x4c, 0x03, 2 dup (0xff)                    ; begin 0x7ae0
0000000000017798         db         0x75, 3 dup (0x00)                          ; length 0x75 (end at 0x7b55)
000000000001779c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001779d         align      32
00000000000177a0         dd         0x00000060                                  ; Length of the record
00000000000177a4         dd         0x0000113c                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
00000000000177a8         db         0xb8, 0x03, 2 dup (0xff)                    ; begin 0x7b60
00000000000177ac         db         0xf5, 3 dup (0x00)                          ; length 0xf5 (end at 0x7c55)
00000000000177b0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000177b1         db  0x42 ; 'B'
00000000000177b2         db  0x0e ; '.'
00000000000177b3         db  0x10 ; '.'
00000000000177b4         db  0x8f ; '.'
00000000000177b5         db  0x02 ; '.'
00000000000177b6         db  0x42 ; 'B'
00000000000177b7         db  0x0e ; '.'
00000000000177b8         db  0x18 ; '.'
00000000000177b9         db  0x8e ; '.'
00000000000177ba         db  0x03 ; '.'
00000000000177bb         db  0x46 ; 'F'
00000000000177bc         db  0x0e ; '.'
00000000000177bd         db  0x20 ; ' '
00000000000177be         db  0x8d ; '.'
00000000000177bf         db  0x04 ; '.'
00000000000177c0         db  0x42 ; 'B'
00000000000177c1         db  0x0e ; '.'
00000000000177c2         db  0x28 ; '('
00000000000177c3         db  0x8c ; '.'
00000000000177c4         db  0x05 ; '.'
00000000000177c5         db  0x44 ; 'D'
00000000000177c6         db  0x0e ; '.'
00000000000177c7         db  0x30 ; '0'
00000000000177c8         db  0x86 ; '.'
00000000000177c9         db  0x06 ; '.'
00000000000177ca         db  0x41 ; 'A'
00000000000177cb         db  0x0e ; '.'
00000000000177cc         db  0x38 ; '8'
00000000000177cd         db  0x83 ; '.'
00000000000177ce         db  0x07 ; '.'
00000000000177cf         db  0x50 ; 'P'
00000000000177d0         db  0x0e ; '.'
00000000000177d1         db  0x40 ; '@'
00000000000177d2         db  0x02 ; '.'
00000000000177d3         db  0x85 ; '.'
00000000000177d4         db  0x0a ; '.'
00000000000177d5         db  0x0e ; '.'
00000000000177d6         db  0x38 ; '8'
00000000000177d7         db  0x41 ; 'A'
00000000000177d8         db  0x0e ; '.'
00000000000177d9         db  0x30 ; '0'
00000000000177da         db  0x41 ; 'A'
00000000000177db         db  0x0e ; '.'
00000000000177dc         db  0x28 ; '('
00000000000177dd         db  0x42 ; 'B'
00000000000177de         db  0x0e ; '.'
00000000000177df         db  0x20 ; ' '
00000000000177e0         db  0x42 ; 'B'
00000000000177e1         db  0x0e ; '.'
00000000000177e2         db  0x18 ; '.'
00000000000177e3         db  0x42 ; 'B'
00000000000177e4         db  0x0e ; '.'
00000000000177e5         db  0x10 ; '.'
00000000000177e6         db  0x42 ; 'B'
00000000000177e7         db  0x0e ; '.'
00000000000177e8         db  0x08 ; '.'
00000000000177e9         db  0x48 ; 'H'
00000000000177ea         db  0x0b ; '.'
00000000000177eb         db  0x44 ; 'D'
00000000000177ec         db  0x0a ; '.'
00000000000177ed         db  0x0e ; '.'
00000000000177ee         db  0x38 ; '8'
00000000000177ef         db  0x46 ; 'F'
00000000000177f0         db  0x0e ; '.'
00000000000177f1         db  0x30 ; '0'
00000000000177f2         db  0x41 ; 'A'
00000000000177f3         db  0x0e ; '.'
00000000000177f4         db  0x28 ; '('
00000000000177f5         db  0x42 ; 'B'
00000000000177f6         db  0x0e ; '.'
00000000000177f7         db  0x20 ; ' '
00000000000177f8         db  0x42 ; 'B'
00000000000177f9         db  0x0e ; '.'
00000000000177fa         db  0x18 ; '.'
00000000000177fb         db  0x42 ; 'B'
00000000000177fc         db  0x0e ; '.'
00000000000177fd         db  0x10 ; '.'
00000000000177fe         db  0x42 ; 'B'
00000000000177ff         db  0x0e ; '.'
0000000000017800         db  0x08 ; '.'
0000000000017801         db  0x45 ; 'E'
0000000000017802         db  0x0b ; '.'
0000000000017803         db  0x00 ; '.'
0000000000017804         dd         0x00000010                                  ; Length of the record
0000000000017808         dd         0x000011a0                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
000000000001780c         db         0x54, 0x04, 2 dup (0xff)                    ; begin 0x7c60
0000000000017810         db         0x34, 3 dup (0x00)                          ; length 0x34 (end at 0x7c94)
0000000000017814         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017815         align      8
0000000000017818         dd         0x00000010                                  ; Length of the record
000000000001781c         dd         0x000011b4                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000017820         db         0x80, 0x04, 2 dup (0xff)                    ; begin 0x7ca0
0000000000017824         db         0x8b, 3 dup (0x00)                          ; length 0x8b (end at 0x7d2b)
0000000000017828         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017829         align      4
000000000001782c         dd         0x00000010                                  ; Length of the record
0000000000017830         dd         0x000011c8                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000017834         db         0xfc, 0x04, 2 dup (0xff)                    ; begin 0x7d30
0000000000017838         db         0x57, 3 dup (0x00)                          ; length 0x57 (end at 0x7d87)
000000000001783c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001783d         align      64
0000000000017840         dd         0x0000004c                                  ; Length of the record
0000000000017844         dd         0x000011dc                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000017848         db         0x48, 0x05, 2 dup (0xff)                    ; begin 0x7d90
000000000001784c         db         0x69, 0x02, 2 dup (0x00)                    ; length 0x269 (end at 0x7ff9)
0000000000017850         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017851         db  0x42 ; 'B'
0000000000017852         db  0x0e ; '.'
0000000000017853         db  0x10 ; '.'
0000000000017854         db  0x8f ; '.'
0000000000017855         db  0x02 ; '.'
0000000000017856         db  0x42 ; 'B'
0000000000017857         db  0x0e ; '.'
0000000000017858         db  0x18 ; '.'
0000000000017859         db  0x8e ; '.'
000000000001785a         db  0x03 ; '.'
000000000001785b         db  0x42 ; 'B'
000000000001785c         db  0x0e ; '.'
000000000001785d         db  0x20 ; ' '
000000000001785e         db  0x8d ; '.'
000000000001785f         db  0x04 ; '.'
0000000000017860         db  0x42 ; 'B'
0000000000017861         db  0x0e ; '.'
0000000000017862         db  0x28 ; '('
0000000000017863         db  0x8c ; '.'
0000000000017864         db  0x05 ; '.'
0000000000017865         db  0x41 ; 'A'
0000000000017866         db  0x0e ; '.'
0000000000017867         db  0x30 ; '0'
0000000000017868         db  0x86 ; '.'
0000000000017869         db  0x06 ; '.'
000000000001786a         db  0x41 ; 'A'
000000000001786b         db  0x0e ; '.'
000000000001786c         db  0x38 ; '8'
000000000001786d         db  0x83 ; '.'
000000000001786e         db  0x07 ; '.'
000000000001786f         db  0x46 ; 'F'
0000000000017870         db  0x0e ; '.'
0000000000017871         db  0x80 ; '.'
0000000000017872         db  0x01 ; '.'
0000000000017873         db  0x03 ; '.'
0000000000017874         db  0xd2 ; '.'
0000000000017875         db  0x01 ; '.'
0000000000017876         db  0x0a ; '.'
0000000000017877         db  0x0e ; '.'
0000000000017878         db  0x38 ; '8'
0000000000017879         db  0x41 ; 'A'
000000000001787a         db  0x0e ; '.'
000000000001787b         db  0x30 ; '0'
000000000001787c         db  0x41 ; 'A'
000000000001787d         db  0x0e ; '.'
000000000001787e         db  0x28 ; '('
000000000001787f         db  0x42 ; 'B'
0000000000017880         db  0x0e ; '.'
0000000000017881         db  0x20 ; ' '
0000000000017882         db  0x42 ; 'B'
0000000000017883         db  0x0e ; '.'
0000000000017884         db  0x18 ; '.'
0000000000017885         db  0x42 ; 'B'
0000000000017886         db  0x0e ; '.'
0000000000017887         db  0x10 ; '.'
0000000000017888         db  0x42 ; 'B'
0000000000017889         db  0x0e ; '.'
000000000001788a         db  0x08 ; '.'
000000000001788b         db  0x44 ; 'D'
000000000001788c         db  0x0b ; '.'
000000000001788d         db  0x00 ; '.'
000000000001788e         db  0x00 ; '.'
000000000001788f         db  0x00 ; '.'
0000000000017890         dd         0x00000034                                  ; Length of the record
0000000000017894         dd         0x0000122c                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000017898         db         0x68, 0x07, 2 dup (0xff)                    ; begin 0x8000
000000000001789c         db         0xde, 0x01, 2 dup (0x00)                    ; length 0x1de (end at 0x81de)
00000000000178a0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000178a1         db  0x58 ; 'X'
00000000000178a2         db  0x0e ; '.'
00000000000178a3         db  0x10 ; '.'
00000000000178a4         db  0x8c ; '.'
00000000000178a5         db  0x02 ; '.'
00000000000178a6         db  0x41 ; 'A'
00000000000178a7         db  0x0e ; '.'
00000000000178a8         db  0x18 ; '.'
00000000000178a9         db  0x86 ; '.'
00000000000178aa         db  0x03 ; '.'
00000000000178ab         db  0x44 ; 'D'
00000000000178ac         db  0x0e ; '.'
00000000000178ad         db  0x20 ; ' '
00000000000178ae         db  0x83 ; '.'
00000000000178af         db  0x04 ; '.'
00000000000178b0         db  0x02 ; '.'
00000000000178b1         db  0xd0 ; '.'
00000000000178b2         db  0x0e ; '.'
00000000000178b3         db  0x18 ; '.'
00000000000178b4         db  0x41 ; 'A'
00000000000178b5         db  0x0e ; '.'
00000000000178b6         db  0x10 ; '.'
00000000000178b7         db  0x42 ; 'B'
00000000000178b8         db  0x0e ; '.'
00000000000178b9         db  0x08 ; '.'
00000000000178ba         db  0x48 ; 'H'
00000000000178bb         db  0xc3 ; '.'
00000000000178bc         db  0xc6 ; '.'
00000000000178bd         db  0xcc ; '.'
00000000000178be         db  0x48 ; 'H'
00000000000178bf         db  0x0e ; '.'
00000000000178c0         db  0x20 ; ' '
00000000000178c1         db  0x83 ; '.'
00000000000178c2         db  0x04 ; '.'
00000000000178c3         db  0x86 ; '.'
00000000000178c4         db  0x03 ; '.'
00000000000178c5         db  0x8c ; '.'
00000000000178c6         db  0x02 ; '.'
00000000000178c7         db  0x00 ; '.'
00000000000178c8         dd         0x0000004c                                  ; Length of the record
00000000000178cc         dd         0x00001264                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
00000000000178d0         db         0x10, 0x09, 2 dup (0xff)                    ; begin 0x81e0
00000000000178d4         db         0xaf, 0x02, 2 dup (0x00)                    ; length 0x2af (end at 0x848f)
00000000000178d8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000178d9         db  0x42 ; 'B'
00000000000178da         db  0x0e ; '.'
00000000000178db         db  0x10 ; '.'
00000000000178dc         db  0x8f ; '.'
00000000000178dd         db  0x02 ; '.'
00000000000178de         db  0x42 ; 'B'
00000000000178df         db  0x0e ; '.'
00000000000178e0         db  0x18 ; '.'
00000000000178e1         db  0x8e ; '.'
00000000000178e2         db  0x03 ; '.'
00000000000178e3         db  0x45 ; 'E'
00000000000178e4         db  0x0e ; '.'
00000000000178e5         db  0x20 ; ' '
00000000000178e6         db  0x8d ; '.'
00000000000178e7         db  0x04 ; '.'
00000000000178e8         db  0x42 ; 'B'
00000000000178e9         db  0x0e ; '.'
00000000000178ea         db  0x28 ; '('
00000000000178eb         db  0x8c ; '.'
00000000000178ec         db  0x05 ; '.'
00000000000178ed         db  0x41 ; 'A'
00000000000178ee         db  0x0e ; '.'
00000000000178ef         db  0x30 ; '0'
00000000000178f0         db  0x86 ; '.'
00000000000178f1         db  0x06 ; '.'
00000000000178f2         db  0x41 ; 'A'
00000000000178f3         db  0x0e ; '.'
00000000000178f4         db  0x38 ; '8'
00000000000178f5         db  0x83 ; '.'
00000000000178f6         db  0x07 ; '.'
00000000000178f7         db  0x4b ; 'K'
00000000000178f8         db  0x0e ; '.'
00000000000178f9         db  0xa0 ; '.'
00000000000178fa         db  0x01 ; '.'
00000000000178fb         db  0x03 ; '.'
00000000000178fc         db  0xa6 ; '.'
00000000000178fd         db  0x01 ; '.'
00000000000178fe         db  0x0a ; '.'
00000000000178ff         db  0x0e ; '.'
0000000000017900         db  0x38 ; '8'
0000000000017901         db  0x41 ; 'A'
0000000000017902         db  0x0e ; '.'
0000000000017903         db  0x30 ; '0'
0000000000017904         db  0x41 ; 'A'
0000000000017905         db  0x0e ; '.'
0000000000017906         db  0x28 ; '('
0000000000017907         db  0x42 ; 'B'
0000000000017908         db  0x0e ; '.'
0000000000017909         db  0x20 ; ' '
000000000001790a         db  0x42 ; 'B'
000000000001790b         db  0x0e ; '.'
000000000001790c         db  0x18 ; '.'
000000000001790d         db  0x42 ; 'B'
000000000001790e         db  0x0e ; '.'
000000000001790f         db  0x10 ; '.'
0000000000017910         db  0x42 ; 'B'
0000000000017911         db  0x0e ; '.'
0000000000017912         db  0x08 ; '.'
0000000000017913         db  0x48 ; 'H'
0000000000017914         db  0x0b ; '.'
0000000000017915         db  0x00 ; '.'
0000000000017916         db  0x00 ; '.'
0000000000017917         db  0x00 ; '.'
0000000000017918         dd         0x00000048                                  ; Length of the record
000000000001791c         dd         0x000012b4                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000017920         db         0x70, 0x0b, 2 dup (0xff)                    ; begin 0x8490
0000000000017924         db         0x59, 0x01, 2 dup (0x00)                    ; length 0x159 (end at 0x85e9)
0000000000017928         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017929         db  0x42 ; 'B'
000000000001792a         db  0x0e ; '.'
000000000001792b         db  0x10 ; '.'
000000000001792c         db  0x8f ; '.'
000000000001792d         db  0x02 ; '.'
000000000001792e         db  0x42 ; 'B'
000000000001792f         db  0x0e ; '.'
0000000000017930         db  0x18 ; '.'
0000000000017931         db  0x8e ; '.'
0000000000017932         db  0x03 ; '.'
0000000000017933         db  0x45 ; 'E'
0000000000017934         db  0x0e ; '.'
0000000000017935         db  0x20 ; ' '
0000000000017936         db  0x8d ; '.'
0000000000017937         db  0x04 ; '.'
0000000000017938         db  0x42 ; 'B'
0000000000017939         db  0x0e ; '.'
000000000001793a         db  0x28 ; '('
000000000001793b         db  0x8c ; '.'
000000000001793c         db  0x05 ; '.'
000000000001793d         db  0x44 ; 'D'
000000000001793e         db  0x0e ; '.'
000000000001793f         db  0x30 ; '0'
0000000000017940         db  0x86 ; '.'
0000000000017941         db  0x06 ; '.'
0000000000017942         db  0x41 ; 'A'
0000000000017943         db  0x0e ; '.'
0000000000017944         db  0x38 ; '8'
0000000000017945         db  0x83 ; '.'
0000000000017946         db  0x07 ; '.'
0000000000017947         db  0x49 ; 'I'
0000000000017948         db  0x0e ; '.'
0000000000017949         db  0x70 ; 'p'
000000000001794a         db  0x03 ; '.'
000000000001794b         db  0x29 ; ')'
000000000001794c         db  0x01 ; '.'
000000000001794d         db  0x0a ; '.'
000000000001794e         db  0x0e ; '.'
000000000001794f         db  0x38 ; '8'
0000000000017950         db  0x41 ; 'A'
0000000000017951         db  0x0e ; '.'
0000000000017952         db  0x30 ; '0'
0000000000017953         db  0x41 ; 'A'
0000000000017954         db  0x0e ; '.'
0000000000017955         db  0x28 ; '('
0000000000017956         db  0x42 ; 'B'
0000000000017957         db  0x0e ; '.'
0000000000017958         db  0x20 ; ' '
0000000000017959         db  0x42 ; 'B'
000000000001795a         db  0x0e ; '.'
000000000001795b         db  0x18 ; '.'
000000000001795c         db  0x42 ; 'B'
000000000001795d         db  0x0e ; '.'
000000000001795e         db  0x10 ; '.'
000000000001795f         db  0x42 ; 'B'
0000000000017960         db  0x0e ; '.'
0000000000017961         db  0x08 ; '.'
0000000000017962         db  0x41 ; 'A'
0000000000017963         db  0x0b ; '.'
0000000000017964         dd         0x0000004c                                  ; Length of the record
0000000000017968         dd         0x00001300                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
000000000001796c         db         0x84, 0x0c, 2 dup (0xff)                    ; begin 0x85f0
0000000000017970         db         0xa8, 0x01, 2 dup (0x00)                    ; length 0x1a8 (end at 0x8798)
0000000000017974         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017975         db  0x5e ; '^'
0000000000017976         db  0x0e ; '.'
0000000000017977         db  0x10 ; '.'
0000000000017978         db  0x8d ; '.'
0000000000017979         db  0x02 ; '.'
000000000001797a         db  0x42 ; 'B'
000000000001797b         db  0x0e ; '.'
000000000001797c         db  0x18 ; '.'
000000000001797d         db  0x8c ; '.'
000000000001797e         db  0x03 ; '.'
000000000001797f         db  0x45 ; 'E'
0000000000017980         db  0x0e ; '.'
0000000000017981         db  0x20 ; ' '
0000000000017982         db  0x86 ; '.'
0000000000017983         db  0x04 ; '.'
0000000000017984         db  0x41 ; 'A'
0000000000017985         db  0x0e ; '.'
0000000000017986         db  0x28 ; '('
0000000000017987         db  0x83 ; '.'
0000000000017988         db  0x05 ; '.'
0000000000017989         db  0x4d ; 'M'
000000000001798a         db  0x0e ; '.'
000000000001798b         db  0x30 ; '0'
000000000001798c         db  0x02 ; '.'
000000000001798d         db  0x95 ; '.'
000000000001798e         db  0x0e ; '.'
000000000001798f         db  0x08 ; '.'
0000000000017990         db  0xc3 ; '.'
0000000000017991         db  0xc6 ; '.'
0000000000017992         db  0xcc ; '.'
0000000000017993         db  0xcd ; '.'
0000000000017994         db  0x48 ; 'H'
0000000000017995         db  0x0e ; '.'
0000000000017996         db  0x30 ; '0'
0000000000017997         db  0x83 ; '.'
0000000000017998         db  0x05 ; '.'
0000000000017999         db  0x86 ; '.'
000000000001799a         db  0x04 ; '.'
000000000001799b         db  0x8c ; '.'
000000000001799c         db  0x03 ; '.'
000000000001799d         db  0x8d ; '.'
000000000001799e         db  0x02 ; '.'
000000000001799f         db  0x02 ; '.'
00000000000179a0         db  0x90 ; '.'
00000000000179a1         db  0x0a ; '.'
00000000000179a2         db  0x0e ; '.'
00000000000179a3         db  0x28 ; '('
00000000000179a4         db  0x41 ; 'A'
00000000000179a5         db  0x0e ; '.'
00000000000179a6         db  0x20 ; ' '
00000000000179a7         db  0x41 ; 'A'
00000000000179a8         db  0x0e ; '.'
00000000000179a9         db  0x18 ; '.'
00000000000179aa         db  0x42 ; 'B'
00000000000179ab         db  0x0e ; '.'
00000000000179ac         db  0x10 ; '.'
00000000000179ad         db  0x42 ; 'B'
00000000000179ae         db  0x0e ; '.'
00000000000179af         db  0x08 ; '.'
00000000000179b0         db  0x4a ; 'J'
00000000000179b1         db  0x0b ; '.'
00000000000179b2         db  0x00 ; '.'
00000000000179b3         db  0x00 ; '.'
00000000000179b4         dd         0x00000020                                  ; Length of the record
00000000000179b8         dd         0x00001350                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
00000000000179bc         db         0xe4, 0x0d, 2 dup (0xff)                    ; begin 0x87a0
00000000000179c0         db         0xe0, 3 dup (0x00)                          ; length 0xe0 (end at 0x8880)
00000000000179c4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000179c5         db  0x41 ; 'A'
00000000000179c6         db  0x0e ; '.'
00000000000179c7         db  0x10 ; '.'
00000000000179c8         db  0x83 ; '.'
00000000000179c9         db  0x02 ; '.'
00000000000179ca         db  0x47 ; 'G'
00000000000179cb         db  0x0e ; '.'
00000000000179cc         db  0x30 ; '0'
00000000000179cd         db  0x02 ; '.'
00000000000179ce         db  0x77 ; 'w'
00000000000179cf         db  0x0a ; '.'
00000000000179d0         db  0x0e ; '.'
00000000000179d1         db  0x10 ; '.'
00000000000179d2         db  0x41 ; 'A'
00000000000179d3         db  0x0e ; '.'
00000000000179d4         db  0x08 ; '.'
00000000000179d5         db  0x48 ; 'H'
00000000000179d6         db  0x0b ; '.'
00000000000179d7         db  0x00 ; '.'
00000000000179d8         dd         0x00000040                                  ; Length of the record
00000000000179dc         dd         0x00001374                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
00000000000179e0         db         0xa0, 0x0e, 2 dup (0xff)                    ; begin 0x8880
00000000000179e4         db         0xd1, 3 dup (0x00)                          ; length 0xd1 (end at 0x8951)
00000000000179e8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000179e9         db  0x42 ; 'B'
00000000000179ea         db  0x0e ; '.'
00000000000179eb         db  0x10 ; '.'
00000000000179ec         db  0x8e ; '.'
00000000000179ed         db  0x02 ; '.'
00000000000179ee         db  0x42 ; 'B'
00000000000179ef         db  0x0e ; '.'
00000000000179f0         db  0x18 ; '.'
00000000000179f1         db  0x8d ; '.'
00000000000179f2         db  0x03 ; '.'
00000000000179f3         db  0x46 ; 'F'
00000000000179f4         db  0x0e ; '.'
00000000000179f5         db  0x20 ; ' '
00000000000179f6         db  0x8c ; '.'
00000000000179f7         db  0x04 ; '.'
00000000000179f8         db  0x41 ; 'A'
00000000000179f9         db  0x0e ; '.'
00000000000179fa         db  0x28 ; '('
00000000000179fb         db  0x86 ; '.'
00000000000179fc         db  0x05 ; '.'
00000000000179fd         db  0x48 ; 'H'
00000000000179fe         db  0x0e ; '.'
00000000000179ff         db  0x30 ; '0'
0000000000017a00         db  0x83 ; '.'
0000000000017a01         db  0x06 ; '.'
0000000000017a02         db  0x47 ; 'G'
0000000000017a03         db  0x0e ; '.'
0000000000017a04         db  0x40 ; '@'
0000000000017a05         db  0x02 ; '.'
0000000000017a06         db  0x96 ; '.'
0000000000017a07         db  0x0a ; '.'
0000000000017a08         db  0x0e ; '.'
0000000000017a09         db  0x30 ; '0'
0000000000017a0a         db  0x41 ; 'A'
0000000000017a0b         db  0x0e ; '.'
0000000000017a0c         db  0x28 ; '('
0000000000017a0d         db  0x41 ; 'A'
0000000000017a0e         db  0x0e ; '.'
0000000000017a0f         db  0x20 ; ' '
0000000000017a10         db  0x42 ; 'B'
0000000000017a11         db  0x0e ; '.'
0000000000017a12         db  0x18 ; '.'
0000000000017a13         db  0x42 ; 'B'
0000000000017a14         db  0x0e ; '.'
0000000000017a15         db  0x10 ; '.'
0000000000017a16         db  0x42 ; 'B'
0000000000017a17         db  0x0e ; '.'
0000000000017a18         db  0x08 ; '.'
0000000000017a19         db  0x48 ; 'H'
0000000000017a1a         db  0x0b ; '.'
0000000000017a1b         db  0x00 ; '.'
0000000000017a1c         dd         0x0000004c                                  ; Length of the record
0000000000017a20         dd         0x000013b8                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000017a24         db         0x3c, 0x0f, 2 dup (0xff)                    ; begin 0x8960
0000000000017a28         db         0x37, 0x02, 2 dup (0x00)                    ; length 0x237 (end at 0x8b97)
0000000000017a2c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017a2d         db  0x42 ; 'B'
0000000000017a2e         db  0x0e ; '.'
0000000000017a2f         db  0x10 ; '.'
0000000000017a30         db  0x8f ; '.'
0000000000017a31         db  0x02 ; '.'
0000000000017a32         db  0x42 ; 'B'
0000000000017a33         db  0x0e ; '.'
0000000000017a34         db  0x18 ; '.'
0000000000017a35         db  0x8e ; '.'
0000000000017a36         db  0x03 ; '.'
0000000000017a37         db  0x42 ; 'B'
0000000000017a38         db  0x0e ; '.'
0000000000017a39         db  0x20 ; ' '
0000000000017a3a         db  0x8d ; '.'
0000000000017a3b         db  0x04 ; '.'
0000000000017a3c         db  0x42 ; 'B'
0000000000017a3d         db  0x0e ; '.'
0000000000017a3e         db  0x28 ; '('
0000000000017a3f         db  0x8c ; '.'
0000000000017a40         db  0x05 ; '.'
0000000000017a41         db  0x44 ; 'D'
0000000000017a42         db  0x0e ; '.'
0000000000017a43         db  0x30 ; '0'
0000000000017a44         db  0x86 ; '.'
0000000000017a45         db  0x06 ; '.'
0000000000017a46         db  0x41 ; 'A'
0000000000017a47         db  0x0e ; '.'
0000000000017a48         db  0x38 ; '8'
0000000000017a49         db  0x83 ; '.'
0000000000017a4a         db  0x07 ; '.'
0000000000017a4b         db  0x44 ; 'D'
0000000000017a4c         db  0x0e ; '.'
0000000000017a4d         db  0x80 ; '.'
0000000000017a4e         db  0x01 ; '.'
0000000000017a4f         db  0x03 ; '.'
0000000000017a50         db  0x87 ; '.'
0000000000017a51         db  0x01 ; '.'
0000000000017a52         db  0x0a ; '.'
0000000000017a53         db  0x0e ; '.'
0000000000017a54         db  0x38 ; '8'
0000000000017a55         db  0x41 ; 'A'
0000000000017a56         db  0x0e ; '.'
0000000000017a57         db  0x30 ; '0'
0000000000017a58         db  0x41 ; 'A'
0000000000017a59         db  0x0e ; '.'
0000000000017a5a         db  0x28 ; '('
0000000000017a5b         db  0x42 ; 'B'
0000000000017a5c         db  0x0e ; '.'
0000000000017a5d         db  0x20 ; ' '
0000000000017a5e         db  0x42 ; 'B'
0000000000017a5f         db  0x0e ; '.'
0000000000017a60         db  0x18 ; '.'
0000000000017a61         db  0x42 ; 'B'
0000000000017a62         db  0x0e ; '.'
0000000000017a63         db  0x10 ; '.'
0000000000017a64         db  0x42 ; 'B'
0000000000017a65         db  0x0e ; '.'
0000000000017a66         db  0x08 ; '.'
0000000000017a67         db  0x46 ; 'F'
0000000000017a68         db  0x0b ; '.'
0000000000017a69         db  0x00 ; '.'
0000000000017a6a         db  0x00 ; '.'
0000000000017a6b         db  0x00 ; '.'
0000000000017a6c         dd         0x00000028                                  ; Length of the record
0000000000017a70         dd         0x00001408                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000017a74         db         0x2c, 0x11, 2 dup (0xff)                    ; begin 0x8ba0
0000000000017a78         db         0xa0, 3 dup (0x00)                          ; length 0xa0 (end at 0x8c40)
0000000000017a7c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017a7d         db  0x41 ; 'A'
0000000000017a7e         db  0x0e ; '.'
0000000000017a7f         db  0x10 ; '.'
0000000000017a80         db  0x86 ; '.'
0000000000017a81         db  0x02 ; '.'
0000000000017a82         db  0x41 ; 'A'
0000000000017a83         db  0x0e ; '.'
0000000000017a84         db  0x18 ; '.'
0000000000017a85         db  0x83 ; '.'
0000000000017a86         db  0x03 ; '.'
0000000000017a87         db  0x4a ; 'J'
0000000000017a88         db  0x0e ; '.'
0000000000017a89         db  0x30 ; '0'
0000000000017a8a         db  0x02 ; '.'
0000000000017a8b         db  0x4e ; 'N'
0000000000017a8c         db  0x0a ; '.'
0000000000017a8d         db  0x0e ; '.'
0000000000017a8e         db  0x18 ; '.'
0000000000017a8f         db  0x41 ; 'A'
0000000000017a90         db  0x0e ; '.'
0000000000017a91         db  0x10 ; '.'
0000000000017a92         db  0x41 ; 'A'
0000000000017a93         db  0x0e ; '.'
0000000000017a94         db  0x08 ; '.'
0000000000017a95         db  0x44 ; 'D'
0000000000017a96         db  0x0b ; '.'
0000000000017a97         db  0x00 ; '.'
0000000000017a98         dd         0x00000038                                  ; Length of the record
0000000000017a9c         dd         0x00001434                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000017aa0         db         0xa0, 0x11, 2 dup (0xff)                    ; begin 0x8c40
0000000000017aa4         db         0x86, 3 dup (0x00)                          ; length 0x86 (end at 0x8cc6)
0000000000017aa8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017aa9         db  0x42 ; 'B'
0000000000017aaa         db  0x0e ; '.'
0000000000017aab         db  0x10 ; '.'
0000000000017aac         db  0x8c ; '.'
0000000000017aad         db  0x02 ; '.'
0000000000017aae         db  0x41 ; 'A'
0000000000017aaf         db  0x0e ; '.'
0000000000017ab0         db  0x18 ; '.'
0000000000017ab1         db  0x86 ; '.'
0000000000017ab2         db  0x03 ; '.'
0000000000017ab3         db  0x41 ; 'A'
0000000000017ab4         db  0x0e ; '.'
0000000000017ab5         db  0x20 ; ' '
0000000000017ab6         db  0x83 ; '.'
0000000000017ab7         db  0x04 ; '.'
0000000000017ab8         db  0x02 ; '.'
0000000000017ab9         db  0x47 ; 'G'
0000000000017aba         db  0x0a ; '.'
0000000000017abb         db  0x0e ; '.'
0000000000017abc         db  0x18 ; '.'
0000000000017abd         db  0x41 ; 'A'
0000000000017abe         db  0x0e ; '.'
0000000000017abf         db  0x10 ; '.'
0000000000017ac0         db  0x42 ; 'B'
0000000000017ac1         db  0x0e ; '.'
0000000000017ac2         db  0x08 ; '.'
0000000000017ac3         db  0x42 ; 'B'
0000000000017ac4         db  0x0b ; '.'
0000000000017ac5         db  0x52 ; 'R'
0000000000017ac6         db  0x0a ; '.'
0000000000017ac7         db  0x0e ; '.'
0000000000017ac8         db  0x18 ; '.'
0000000000017ac9         db  0x41 ; 'A'
0000000000017aca         db  0x0e ; '.'
0000000000017acb         db  0x10 ; '.'
0000000000017acc         db  0x42 ; 'B'
0000000000017acd         db  0x0e ; '.'
0000000000017ace         db  0x08 ; '.'
0000000000017acf         db  0x4b ; 'K'
0000000000017ad0         db  0x0b ; '.'
0000000000017ad1         db  0x00 ; '.'
0000000000017ad2         db  0x00 ; '.'
0000000000017ad3         db  0x00 ; '.'
0000000000017ad4         dd         0x00000060                                  ; Length of the record
0000000000017ad8         dd         0x00001470                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000017adc         db         0xf4, 0x11, 2 dup (0xff)                    ; begin 0x8cd0
0000000000017ae0         db         0x52, 0x01, 2 dup (0x00)                    ; length 0x152 (end at 0x8e22)
0000000000017ae4         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017ae5         db  0x45 ; 'E'
0000000000017ae6         db  0x0e ; '.'
0000000000017ae7         db  0x10 ; '.'
0000000000017ae8         db  0x8e ; '.'
0000000000017ae9         db  0x02 ; '.'
0000000000017aea         db  0x42 ; 'B'
0000000000017aeb         db  0x0e ; '.'
0000000000017aec         db  0x18 ; '.'
0000000000017aed         db  0x8d ; '.'
0000000000017aee         db  0x03 ; '.'
0000000000017aef         db  0x42 ; 'B'
0000000000017af0         db  0x0e ; '.'
0000000000017af1         db  0x20 ; ' '
0000000000017af2         db  0x8c ; '.'
0000000000017af3         db  0x04 ; '.'
0000000000017af4         db  0x41 ; 'A'
0000000000017af5         db  0x0e ; '.'
0000000000017af6         db  0x28 ; '('
0000000000017af7         db  0x86 ; '.'
0000000000017af8         db  0x05 ; '.'
0000000000017af9         db  0x41 ; 'A'
0000000000017afa         db  0x0e ; '.'
0000000000017afb         db  0x30 ; '0'
0000000000017afc         db  0x83 ; '.'
0000000000017afd         db  0x06 ; '.'
0000000000017afe         db  0x02 ; '.'
0000000000017aff         db  0xc8 ; '.'
0000000000017b00         db  0x0a ; '.'
0000000000017b01         db  0x0e ; '.'
0000000000017b02         db  0x28 ; '('
0000000000017b03         db  0x41 ; 'A'
0000000000017b04         db  0x0e ; '.'
0000000000017b05         db  0x20 ; ' '
0000000000017b06         db  0x42 ; 'B'
0000000000017b07         db  0x0e ; '.'
0000000000017b08         db  0x18 ; '.'
0000000000017b09         db  0x42 ; 'B'
0000000000017b0a         db  0x0e ; '.'
0000000000017b0b         db  0x10 ; '.'
0000000000017b0c         db  0x42 ; 'B'
0000000000017b0d         db  0x0e ; '.'
0000000000017b0e         db  0x08 ; '.'
0000000000017b0f         db  0x46 ; 'F'
0000000000017b10         db  0x0b ; '.'
0000000000017b11         db  0x44 ; 'D'
0000000000017b12         db  0x0a ; '.'
0000000000017b13         db  0x0e ; '.'
0000000000017b14         db  0x28 ; '('
0000000000017b15         db  0x41 ; 'A'
0000000000017b16         db  0x0e ; '.'
0000000000017b17         db  0x20 ; ' '
0000000000017b18         db  0x42 ; 'B'
0000000000017b19         db  0x0e ; '.'
0000000000017b1a         db  0x18 ; '.'
0000000000017b1b         db  0x42 ; 'B'
0000000000017b1c         db  0x0e ; '.'
0000000000017b1d         db  0x10 ; '.'
0000000000017b1e         db  0x42 ; 'B'
0000000000017b1f         db  0x0e ; '.'
0000000000017b20         db  0x08 ; '.'
0000000000017b21         db  0x45 ; 'E'
0000000000017b22         db  0x0b ; '.'
0000000000017b23         db  0x4d ; 'M'
0000000000017b24         db  0x0a ; '.'
0000000000017b25         db  0x0e ; '.'
0000000000017b26         db  0x28 ; '('
0000000000017b27         db  0x41 ; 'A'
0000000000017b28         db  0x0e ; '.'
0000000000017b29         db  0x20 ; ' '
0000000000017b2a         db  0x42 ; 'B'
0000000000017b2b         db  0x0e ; '.'
0000000000017b2c         db  0x18 ; '.'
0000000000017b2d         db  0x42 ; 'B'
0000000000017b2e         db  0x0e ; '.'
0000000000017b2f         db  0x10 ; '.'
0000000000017b30         db  0x42 ; 'B'
0000000000017b31         db  0x0e ; '.'
0000000000017b32         db  0x08 ; '.'
0000000000017b33         db  0x44 ; 'D'
0000000000017b34         db  0x0b ; '.'
0000000000017b35         db  0x00 ; '.'
0000000000017b36         db  0x00 ; '.'
0000000000017b37         db  0x00 ; '.'
0000000000017b38         dd         0x00000048                                  ; Length of the record
0000000000017b3c         dd         0x000014d4                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000017b40         db         0xf0, 0x12, 2 dup (0xff)                    ; begin 0x8e30
0000000000017b44         db         0xba, 0x02, 2 dup (0x00)                    ; length 0x2ba (end at 0x90ea)
0000000000017b48         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017b49         db  0x42 ; 'B'
0000000000017b4a         db  0x0e ; '.'
0000000000017b4b         db  0x10 ; '.'
0000000000017b4c         db  0x8f ; '.'
0000000000017b4d         db  0x02 ; '.'
0000000000017b4e         db  0x42 ; 'B'
0000000000017b4f         db  0x0e ; '.'
0000000000017b50         db  0x18 ; '.'
0000000000017b51         db  0x8e ; '.'
0000000000017b52         db  0x03 ; '.'
0000000000017b53         db  0x42 ; 'B'
0000000000017b54         db  0x0e ; '.'
0000000000017b55         db  0x20 ; ' '
0000000000017b56         db  0x8d ; '.'
0000000000017b57         db  0x04 ; '.'
0000000000017b58         db  0x42 ; 'B'
0000000000017b59         db  0x0e ; '.'
0000000000017b5a         db  0x28 ; '('
0000000000017b5b         db  0x8c ; '.'
0000000000017b5c         db  0x05 ; '.'
0000000000017b5d         db  0x41 ; 'A'
0000000000017b5e         db  0x0e ; '.'
0000000000017b5f         db  0x30 ; '0'
0000000000017b60         db  0x86 ; '.'
0000000000017b61         db  0x06 ; '.'
0000000000017b62         db  0x41 ; 'A'
0000000000017b63         db  0x0e ; '.'
0000000000017b64         db  0x38 ; '8'
0000000000017b65         db  0x83 ; '.'
0000000000017b66         db  0x07 ; '.'
0000000000017b67         db  0x44 ; 'D'
0000000000017b68         db  0x0e ; '.'
0000000000017b69         db  0x60 ; '`'
0000000000017b6a         db  0x02 ; '.'
0000000000017b6b         db  0xa2 ; '.'
0000000000017b6c         db  0x0a ; '.'
0000000000017b6d         db  0x0e ; '.'
0000000000017b6e         db  0x38 ; '8'
0000000000017b6f         db  0x44 ; 'D'
0000000000017b70         db  0x0e ; '.'
0000000000017b71         db  0x30 ; '0'
0000000000017b72         db  0x41 ; 'A'
0000000000017b73         db  0x0e ; '.'
0000000000017b74         db  0x28 ; '('
0000000000017b75         db  0x42 ; 'B'
0000000000017b76         db  0x0e ; '.'
0000000000017b77         db  0x20 ; ' '
0000000000017b78         db  0x42 ; 'B'
0000000000017b79         db  0x0e ; '.'
0000000000017b7a         db  0x18 ; '.'
0000000000017b7b         db  0x42 ; 'B'
0000000000017b7c         db  0x0e ; '.'
0000000000017b7d         db  0x10 ; '.'
0000000000017b7e         db  0x42 ; 'B'
0000000000017b7f         db  0x0e ; '.'
0000000000017b80         db  0x08 ; '.'
0000000000017b81         db  0x43 ; 'C'
0000000000017b82         db  0x0b ; '.'
0000000000017b83         db  0x00 ; '.'
0000000000017b84         dd         0x00000048                                  ; Length of the record
0000000000017b88         dd         0x00001520                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000017b8c         db         0x64, 0x15, 2 dup (0xff)                    ; begin 0x90f0
0000000000017b90         db         0xfa, 0x01, 2 dup (0x00)                    ; length 0x1fa (end at 0x92ea)
0000000000017b94         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017b95         db  0x42 ; 'B'
0000000000017b96         db  0x0e ; '.'
0000000000017b97         db  0x10 ; '.'
0000000000017b98         db  0x8f ; '.'
0000000000017b99         db  0x02 ; '.'
0000000000017b9a         db  0x42 ; 'B'
0000000000017b9b         db  0x0e ; '.'
0000000000017b9c         db  0x18 ; '.'
0000000000017b9d         db  0x8e ; '.'
0000000000017b9e         db  0x03 ; '.'
0000000000017b9f         db  0x42 ; 'B'
0000000000017ba0         db  0x0e ; '.'
0000000000017ba1         db  0x20 ; ' '
0000000000017ba2         db  0x8d ; '.'
0000000000017ba3         db  0x04 ; '.'
0000000000017ba4         db  0x42 ; 'B'
0000000000017ba5         db  0x0e ; '.'
0000000000017ba6         db  0x28 ; '('
0000000000017ba7         db  0x8c ; '.'
0000000000017ba8         db  0x05 ; '.'
0000000000017ba9         db  0x41 ; 'A'
0000000000017baa         db  0x0e ; '.'
0000000000017bab         db  0x30 ; '0'
0000000000017bac         db  0x86 ; '.'
0000000000017bad         db  0x06 ; '.'
0000000000017bae         db  0x41 ; 'A'
0000000000017baf         db  0x0e ; '.'
0000000000017bb0         db  0x38 ; '8'
0000000000017bb1         db  0x83 ; '.'
0000000000017bb2         db  0x07 ; '.'
0000000000017bb3         db  0x44 ; 'D'
0000000000017bb4         db  0x0e ; '.'
0000000000017bb5         db  0x40 ; '@'
0000000000017bb6         db  0x03 ; '.'
0000000000017bb7         db  0x85 ; '.'
0000000000017bb8         db  0x01 ; '.'
0000000000017bb9         db  0x0a ; '.'
0000000000017bba         db  0x0e ; '.'
0000000000017bbb         db  0x38 ; '8'
0000000000017bbc         db  0x44 ; 'D'
0000000000017bbd         db  0x0e ; '.'
0000000000017bbe         db  0x30 ; '0'
0000000000017bbf         db  0x41 ; 'A'
0000000000017bc0         db  0x0e ; '.'
0000000000017bc1         db  0x28 ; '('
0000000000017bc2         db  0x42 ; 'B'
0000000000017bc3         db  0x0e ; '.'
0000000000017bc4         db  0x20 ; ' '
0000000000017bc5         db  0x42 ; 'B'
0000000000017bc6         db  0x0e ; '.'
0000000000017bc7         db  0x18 ; '.'
0000000000017bc8         db  0x42 ; 'B'
0000000000017bc9         db  0x0e ; '.'
0000000000017bca         db  0x10 ; '.'
0000000000017bcb         db  0x42 ; 'B'
0000000000017bcc         db  0x0e ; '.'
0000000000017bcd         db  0x08 ; '.'
0000000000017bce         db  0x48 ; 'H'
0000000000017bcf         db  0x0b ; '.'
0000000000017bd0         dd         0x00000048                                  ; Length of the record
0000000000017bd4         dd         0x0000156c                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000017bd8         db         0x18, 0x17, 2 dup (0xff)                    ; begin 0x92f0
0000000000017bdc         db         0xdc, 3 dup (0x00)                          ; length 0xdc (end at 0x93cc)
0000000000017be0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017be1         db  0x42 ; 'B'
0000000000017be2         db  0x0e ; '.'
0000000000017be3         db  0x10 ; '.'
0000000000017be4         db  0x8f ; '.'
0000000000017be5         db  0x02 ; '.'
0000000000017be6         db  0x42 ; 'B'
0000000000017be7         db  0x0e ; '.'
0000000000017be8         db  0x18 ; '.'
0000000000017be9         db  0x8e ; '.'
0000000000017bea         db  0x03 ; '.'
0000000000017beb         db  0x42 ; 'B'
0000000000017bec         db  0x0e ; '.'
0000000000017bed         db  0x20 ; ' '
0000000000017bee         db  0x8d ; '.'
0000000000017bef         db  0x04 ; '.'
0000000000017bf0         db  0x42 ; 'B'
0000000000017bf1         db  0x0e ; '.'
0000000000017bf2         db  0x28 ; '('
0000000000017bf3         db  0x8c ; '.'
0000000000017bf4         db  0x05 ; '.'
0000000000017bf5         db  0x41 ; 'A'
0000000000017bf6         db  0x0e ; '.'
0000000000017bf7         db  0x30 ; '0'
0000000000017bf8         db  0x86 ; '.'
0000000000017bf9         db  0x06 ; '.'
0000000000017bfa         db  0x41 ; 'A'
0000000000017bfb         db  0x0e ; '.'
0000000000017bfc         db  0x38 ; '8'
0000000000017bfd         db  0x83 ; '.'
0000000000017bfe         db  0x07 ; '.'
0000000000017bff         db  0x44 ; 'D'
0000000000017c00         db  0x0e ; '.'
0000000000017c01         db  0x80 ; '.'
0000000000017c02         db  0x01 ; '.'
0000000000017c03         db  0x02 ; '.'
0000000000017c04         db  0xbe ; '.'
0000000000017c05         db  0x0a ; '.'
0000000000017c06         db  0x0e ; '.'
0000000000017c07         db  0x38 ; '8'
0000000000017c08         db  0x41 ; 'A'
0000000000017c09         db  0x0e ; '.'
0000000000017c0a         db  0x30 ; '0'
0000000000017c0b         db  0x41 ; 'A'
0000000000017c0c         db  0x0e ; '.'
0000000000017c0d         db  0x28 ; '('
0000000000017c0e         db  0x42 ; 'B'
0000000000017c0f         db  0x0e ; '.'
0000000000017c10         db  0x20 ; ' '
0000000000017c11         db  0x42 ; 'B'
0000000000017c12         db  0x0e ; '.'
0000000000017c13         db  0x18 ; '.'
0000000000017c14         db  0x42 ; 'B'
0000000000017c15         db  0x0e ; '.'
0000000000017c16         db  0x10 ; '.'
0000000000017c17         db  0x42 ; 'B'
0000000000017c18         db  0x0e ; '.'
0000000000017c19         db  0x08 ; '.'
0000000000017c1a         db  0x41 ; 'A'
0000000000017c1b         db  0x0b ; '.'
0000000000017c1c         dd         0x00000048                                  ; Length of the record
0000000000017c20         dd         0x000015b8                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000017c24         db         0xac, 0x17, 2 dup (0xff)                    ; begin 0x93d0
0000000000017c28         db         0x9e, 0x03, 2 dup (0x00)                    ; length 0x39e (end at 0x976e)
0000000000017c2c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017c2d         db  0x42 ; 'B'
0000000000017c2e         db  0x0e ; '.'
0000000000017c2f         db  0x10 ; '.'
0000000000017c30         db  0x8f ; '.'
0000000000017c31         db  0x02 ; '.'
0000000000017c32         db  0x42 ; 'B'
0000000000017c33         db  0x0e ; '.'
0000000000017c34         db  0x18 ; '.'
0000000000017c35         db  0x8e ; '.'
0000000000017c36         db  0x03 ; '.'
0000000000017c37         db  0x42 ; 'B'
0000000000017c38         db  0x0e ; '.'
0000000000017c39         db  0x20 ; ' '
0000000000017c3a         db  0x8d ; '.'
0000000000017c3b         db  0x04 ; '.'
0000000000017c3c         db  0x42 ; 'B'
0000000000017c3d         db  0x0e ; '.'
0000000000017c3e         db  0x28 ; '('
0000000000017c3f         db  0x8c ; '.'
0000000000017c40         db  0x05 ; '.'
0000000000017c41         db  0x44 ; 'D'
0000000000017c42         db  0x0e ; '.'
0000000000017c43         db  0x30 ; '0'
0000000000017c44         db  0x86 ; '.'
0000000000017c45         db  0x06 ; '.'
0000000000017c46         db  0x41 ; 'A'
0000000000017c47         db  0x0e ; '.'
0000000000017c48         db  0x38 ; '8'
0000000000017c49         db  0x83 ; '.'
0000000000017c4a         db  0x07 ; '.'
0000000000017c4b         db  0x4c ; 'L'
0000000000017c4c         db  0x0e ; '.'
0000000000017c4d         db  0xb0 ; '.'
0000000000017c4e         db  0x01 ; '.'
0000000000017c4f         db  0x02 ; '.'
0000000000017c50         db  0xbe ; '.'
0000000000017c51         db  0x0a ; '.'
0000000000017c52         db  0x0e ; '.'
0000000000017c53         db  0x38 ; '8'
0000000000017c54         db  0x41 ; 'A'
0000000000017c55         db  0x0e ; '.'
0000000000017c56         db  0x30 ; '0'
0000000000017c57         db  0x41 ; 'A'
0000000000017c58         db  0x0e ; '.'
0000000000017c59         db  0x28 ; '('
0000000000017c5a         db  0x42 ; 'B'
0000000000017c5b         db  0x0e ; '.'
0000000000017c5c         db  0x20 ; ' '
0000000000017c5d         db  0x42 ; 'B'
0000000000017c5e         db  0x0e ; '.'
0000000000017c5f         db  0x18 ; '.'
0000000000017c60         db  0x42 ; 'B'
0000000000017c61         db  0x0e ; '.'
0000000000017c62         db  0x10 ; '.'
0000000000017c63         db  0x42 ; 'B'
0000000000017c64         db  0x0e ; '.'
0000000000017c65         db  0x08 ; '.'
0000000000017c66         db  0x47 ; 'G'
0000000000017c67         db  0x0b ; '.'
0000000000017c68         dd         0x00000048                                  ; Length of the record
0000000000017c6c         dd         0x00001604                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000017c70         db         0x00, 0x1b, 2 dup (0xff)                    ; begin 0x9770
0000000000017c74         db         0x41, 0x01, 2 dup (0x00)                    ; length 0x141 (end at 0x98b1)
0000000000017c78         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017c79         db  0x42 ; 'B'
0000000000017c7a         db  0x0e ; '.'
0000000000017c7b         db  0x10 ; '.'
0000000000017c7c         db  0x8f ; '.'
0000000000017c7d         db  0x02 ; '.'
0000000000017c7e         db  0x42 ; 'B'
0000000000017c7f         db  0x0e ; '.'
0000000000017c80         db  0x18 ; '.'
0000000000017c81         db  0x8e ; '.'
0000000000017c82         db  0x03 ; '.'
0000000000017c83         db  0x42 ; 'B'
0000000000017c84         db  0x0e ; '.'
0000000000017c85         db  0x20 ; ' '
0000000000017c86         db  0x8d ; '.'
0000000000017c87         db  0x04 ; '.'
0000000000017c88         db  0x42 ; 'B'
0000000000017c89         db  0x0e ; '.'
0000000000017c8a         db  0x28 ; '('
0000000000017c8b         db  0x8c ; '.'
0000000000017c8c         db  0x05 ; '.'
0000000000017c8d         db  0x41 ; 'A'
0000000000017c8e         db  0x0e ; '.'
0000000000017c8f         db  0x30 ; '0'
0000000000017c90         db  0x86 ; '.'
0000000000017c91         db  0x06 ; '.'
0000000000017c92         db  0x41 ; 'A'
0000000000017c93         db  0x0e ; '.'
0000000000017c94         db  0x38 ; '8'
0000000000017c95         db  0x83 ; '.'
0000000000017c96         db  0x07 ; '.'
0000000000017c97         db  0x44 ; 'D'
0000000000017c98         db  0x0e ; '.'
0000000000017c99         db  0x60 ; '`'
0000000000017c9a         db  0x02 ; '.'
0000000000017c9b         db  0xd8 ; '.'
0000000000017c9c         db  0x0a ; '.'
0000000000017c9d         db  0x0e ; '.'
0000000000017c9e         db  0x38 ; '8'
0000000000017c9f         db  0x41 ; 'A'
0000000000017ca0         db  0x0e ; '.'
0000000000017ca1         db  0x30 ; '0'
0000000000017ca2         db  0x41 ; 'A'
0000000000017ca3         db  0x0e ; '.'
0000000000017ca4         db  0x28 ; '('
0000000000017ca5         db  0x42 ; 'B'
0000000000017ca6         db  0x0e ; '.'
0000000000017ca7         db  0x20 ; ' '
0000000000017ca8         db  0x42 ; 'B'
0000000000017ca9         db  0x0e ; '.'
0000000000017caa         db  0x18 ; '.'
0000000000017cab         db  0x42 ; 'B'
0000000000017cac         db  0x0e ; '.'
0000000000017cad         db  0x10 ; '.'
0000000000017cae         db  0x42 ; 'B'
0000000000017caf         db  0x0e ; '.'
0000000000017cb0         db  0x08 ; '.'
0000000000017cb1         db  0x41 ; 'A'
0000000000017cb2         db  0x0b ; '.'
0000000000017cb3         db  0x00 ; '.'
0000000000017cb4         dd         0x00000040                                  ; Length of the record
0000000000017cb8         dd         0x00001650                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000017cbc         db         0x04, 0x1c, 2 dup (0xff)                    ; begin 0x98c0
0000000000017cc0         db         0xe6, 3 dup (0x00)                          ; length 0xe6 (end at 0x99a6)
0000000000017cc4         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017cc5         db  0x41 ; 'A'
0000000000017cc6         db  0x0e ; '.'
0000000000017cc7         db  0x10 ; '.'
0000000000017cc8         db  0x86 ; '.'
0000000000017cc9         db  0x02 ; '.'
0000000000017cca         db  0x41 ; 'A'
0000000000017ccb         db  0x0e ; '.'
0000000000017ccc         db  0x18 ; '.'
0000000000017ccd         db  0x83 ; '.'
0000000000017cce         db  0x03 ; '.'
0000000000017ccf         db  0x47 ; 'G'
0000000000017cd0         db  0x0e ; '.'
0000000000017cd1         db  0x20 ; ' '
0000000000017cd2         db  0x02 ; '.'
0000000000017cd3         db  0x4d ; 'M'
0000000000017cd4         db  0x0a ; '.'
0000000000017cd5         db  0x0e ; '.'
0000000000017cd6         db  0x18 ; '.'
0000000000017cd7         db  0x41 ; 'A'
0000000000017cd8         db  0x0e ; '.'
0000000000017cd9         db  0x10 ; '.'
0000000000017cda         db  0x41 ; 'A'
0000000000017cdb         db  0x0e ; '.'
0000000000017cdc         db  0x08 ; '.'
0000000000017cdd         db  0x48 ; 'H'
0000000000017cde         db  0x0b ; '.'
0000000000017cdf         db  0x47 ; 'G'
0000000000017ce0         db  0x0a ; '.'
0000000000017ce1         db  0x0e ; '.'
0000000000017ce2         db  0x18 ; '.'
0000000000017ce3         db  0x41 ; 'A'
0000000000017ce4         db  0x0e ; '.'
0000000000017ce5         db  0x10 ; '.'
0000000000017ce6         db  0x41 ; 'A'
0000000000017ce7         db  0x0e ; '.'
0000000000017ce8         db  0x08 ; '.'
0000000000017ce9         db  0x47 ; 'G'
0000000000017cea         db  0x0b ; '.'
0000000000017ceb         db  0x7c ; '|'
0000000000017cec         db  0x0a ; '.'
0000000000017ced         db  0x0e ; '.'
0000000000017cee         db  0x18 ; '.'
0000000000017cef         db  0x43 ; 'C'
0000000000017cf0         db  0x0e ; '.'
0000000000017cf1         db  0x10 ; '.'
0000000000017cf2         db  0x41 ; 'A'
0000000000017cf3         db  0x0e ; '.'
0000000000017cf4         db  0x08 ; '.'
0000000000017cf5         db  0x48 ; 'H'
0000000000017cf6         db  0x0b ; '.'
0000000000017cf7         db  0x00 ; '.'
0000000000017cf8         dd         0x00000024                                  ; Length of the record
0000000000017cfc         dd         0x00001694                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000017d00         db         0xb0, 0x1c, 2 dup (0xff)                    ; begin 0x99b0
0000000000017d04         db         0x10, 0x01, 2 dup (0x00)                    ; length 0x110 (end at 0x9ac0)
0000000000017d08         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017d09         db  0x02 ; '.'
0000000000017d0a         db  0x51 ; 'Q'
0000000000017d0b         db  0x0e ; '.'
0000000000017d0c         db  0x10 ; '.'
0000000000017d0d         db  0x83 ; '.'
0000000000017d0e         db  0x02 ; '.'
0000000000017d0f         db  0x02 ; '.'
0000000000017d10         db  0x5c ; '\'
0000000000017d11         db  0x0e ; '.'
0000000000017d12         db  0x08 ; '.'
0000000000017d13         db  0x43 ; 'C'
0000000000017d14         db  0xc3 ; '.'
0000000000017d15         db  0x78 ; 'x'
0000000000017d16         db  0x0e ; '.'
0000000000017d17         db  0x10 ; '.'
0000000000017d18         db  0x83 ; '.'
0000000000017d19         db  0x02 ; '.'
0000000000017d1a         db  0x4c ; 'L'
0000000000017d1b         db  0x0e ; '.'
0000000000017d1c         db  0x08 ; '.'
0000000000017d1d         db  0x44 ; 'D'
0000000000017d1e         db  0xc3 ; '.'
0000000000017d1f         db  0x00 ; '.'
0000000000017d20         dd         0x00000034                                  ; Length of the record
0000000000017d24         dd         0x000016bc                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000017d28         db         0x98, 0x1d, 2 dup (0xff)                    ; begin 0x9ac0
0000000000017d2c         db         0xcf, 3 dup (0x00)                          ; length 0xcf (end at 0x9b8f)
0000000000017d30         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017d31         db  0x42 ; 'B'
0000000000017d32         db  0x0e ; '.'
0000000000017d33         db  0x10 ; '.'
0000000000017d34         db  0x8c ; '.'
0000000000017d35         db  0x02 ; '.'
0000000000017d36         db  0x44 ; 'D'
0000000000017d37         db  0x0e ; '.'
0000000000017d38         db  0x18 ; '.'
0000000000017d39         db  0x86 ; '.'
0000000000017d3a         db  0x03 ; '.'
0000000000017d3b         db  0x41 ; 'A'
0000000000017d3c         db  0x0e ; '.'
0000000000017d3d         db  0x20 ; ' '
0000000000017d3e         db  0x83 ; '.'
0000000000017d3f         db  0x04 ; '.'
0000000000017d40         db  0x02 ; '.'
0000000000017d41         db  0x9f ; '.'
0000000000017d42         db  0x0a ; '.'
0000000000017d43         db  0x0e ; '.'
0000000000017d44         db  0x18 ; '.'
0000000000017d45         db  0x41 ; 'A'
0000000000017d46         db  0x0e ; '.'
0000000000017d47         db  0x10 ; '.'
0000000000017d48         db  0x42 ; 'B'
0000000000017d49         db  0x0e ; '.'
0000000000017d4a         db  0x08 ; '.'
0000000000017d4b         db  0x47 ; 'G'
0000000000017d4c         db  0x0b ; '.'
0000000000017d4d         db  0x59 ; 'Y'
0000000000017d4e         db  0x0e ; '.'
0000000000017d4f         db  0x18 ; '.'
0000000000017d50         db  0x43 ; 'C'
0000000000017d51         db  0x0e ; '.'
0000000000017d52         db  0x10 ; '.'
0000000000017d53         db  0x42 ; 'B'
0000000000017d54         db  0x0e ; '.'
0000000000017d55         db  0x08 ; '.'
0000000000017d56         db  0x00 ; '.'
0000000000017d57         db  0x00 ; '.'
0000000000017d58         dd         0x0000004c                                  ; Length of the record
0000000000017d5c         dd         0x000016f4                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000017d60         db         0x30, 0x1e, 2 dup (0xff)                    ; begin 0x9b90
0000000000017d64         db         0x9f, 0x07, 2 dup (0x00)                    ; length 0x79f (end at 0xa32f)
0000000000017d68         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017d69         db  0x42 ; 'B'
0000000000017d6a         db  0x0e ; '.'
0000000000017d6b         db  0x10 ; '.'
0000000000017d6c         db  0x8f ; '.'
0000000000017d6d         db  0x02 ; '.'
0000000000017d6e         db  0x42 ; 'B'
0000000000017d6f         db  0x0e ; '.'
0000000000017d70         db  0x18 ; '.'
0000000000017d71         db  0x8e ; '.'
0000000000017d72         db  0x03 ; '.'
0000000000017d73         db  0x45 ; 'E'
0000000000017d74         db  0x0e ; '.'
0000000000017d75         db  0x20 ; ' '
0000000000017d76         db  0x8d ; '.'
0000000000017d77         db  0x04 ; '.'
0000000000017d78         db  0x42 ; 'B'
0000000000017d79         db  0x0e ; '.'
0000000000017d7a         db  0x28 ; '('
0000000000017d7b         db  0x8c ; '.'
0000000000017d7c         db  0x05 ; '.'
0000000000017d7d         db  0x44 ; 'D'
0000000000017d7e         db  0x0e ; '.'
0000000000017d7f         db  0x30 ; '0'
0000000000017d80         db  0x86 ; '.'
0000000000017d81         db  0x06 ; '.'
0000000000017d82         db  0x41 ; 'A'
0000000000017d83         db  0x0e ; '.'
0000000000017d84         db  0x38 ; '8'
0000000000017d85         db  0x83 ; '.'
0000000000017d86         db  0x07 ; '.'
0000000000017d87         db  0x4a ; 'J'
0000000000017d88         db  0x0e ; '.'
0000000000017d89         db  0x80 ; '.'
0000000000017d8a         db  0x01 ; '.'
0000000000017d8b         db  0x03 ; '.'
0000000000017d8c         db  0x3b ; ';'
0000000000017d8d         db  0x01 ; '.'
0000000000017d8e         db  0x0a ; '.'
0000000000017d8f         db  0x0e ; '.'
0000000000017d90         db  0x38 ; '8'
0000000000017d91         db  0x41 ; 'A'
0000000000017d92         db  0x0e ; '.'
0000000000017d93         db  0x30 ; '0'
0000000000017d94         db  0x41 ; 'A'
0000000000017d95         db  0x0e ; '.'
0000000000017d96         db  0x28 ; '('
0000000000017d97         db  0x42 ; 'B'
0000000000017d98         db  0x0e ; '.'
0000000000017d99         db  0x20 ; ' '
0000000000017d9a         db  0x42 ; 'B'
0000000000017d9b         db  0x0e ; '.'
0000000000017d9c         db  0x18 ; '.'
0000000000017d9d         db  0x42 ; 'B'
0000000000017d9e         db  0x0e ; '.'
0000000000017d9f         db  0x10 ; '.'
0000000000017da0         db  0x42 ; 'B'
0000000000017da1         db  0x0e ; '.'
0000000000017da2         db  0x08 ; '.'
0000000000017da3         db  0x41 ; 'A'
0000000000017da4         db  0x0b ; '.'
0000000000017da5         db  0x00 ; '.'
0000000000017da6         db  0x00 ; '.'
0000000000017da7         db  0x00 ; '.'
0000000000017da8         dd         0x0000004c                                  ; Length of the record
0000000000017dac         dd         0x00001744                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000017db0         db         0x80, 0x25, 2 dup (0xff)                    ; begin 0xa330
0000000000017db4         db         0x3b, 0x02, 2 dup (0x00)                    ; length 0x23b (end at 0xa56b)
0000000000017db8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017db9         db  0x42 ; 'B'
0000000000017dba         db  0x0e ; '.'
0000000000017dbb         db  0x10 ; '.'
0000000000017dbc         db  0x8f ; '.'
0000000000017dbd         db  0x02 ; '.'
0000000000017dbe         db  0x42 ; 'B'
0000000000017dbf         db  0x0e ; '.'
0000000000017dc0         db  0x18 ; '.'
0000000000017dc1         db  0x8e ; '.'
0000000000017dc2         db  0x03 ; '.'
0000000000017dc3         db  0x45 ; 'E'
0000000000017dc4         db  0x0e ; '.'
0000000000017dc5         db  0x20 ; ' '
0000000000017dc6         db  0x8d ; '.'
0000000000017dc7         db  0x04 ; '.'
0000000000017dc8         db  0x42 ; 'B'
0000000000017dc9         db  0x0e ; '.'
0000000000017dca         db  0x28 ; '('
0000000000017dcb         db  0x8c ; '.'
0000000000017dcc         db  0x05 ; '.'
0000000000017dcd         db  0x45 ; 'E'
0000000000017dce         db  0x0e ; '.'
0000000000017dcf         db  0x30 ; '0'
0000000000017dd0         db  0x86 ; '.'
0000000000017dd1         db  0x06 ; '.'
0000000000017dd2         db  0x41 ; 'A'
0000000000017dd3         db  0x0e ; '.'
0000000000017dd4         db  0x38 ; '8'
0000000000017dd5         db  0x83 ; '.'
0000000000017dd6         db  0x07 ; '.'
0000000000017dd7         db  0x48 ; 'H'
0000000000017dd8         db  0x0e ; '.'
0000000000017dd9         db  0x80 ; '.'
0000000000017dda         db  0x01 ; '.'
0000000000017ddb         db  0x03 ; '.'
0000000000017ddc         db  0xf3 ; '.'
0000000000017ddd         db  0x01 ; '.'
0000000000017dde         db  0x0a ; '.'
0000000000017ddf         db  0x0e ; '.'
0000000000017de0         db  0x38 ; '8'
0000000000017de1         db  0x41 ; 'A'
0000000000017de2         db  0x0e ; '.'
0000000000017de3         db  0x30 ; '0'
0000000000017de4         db  0x41 ; 'A'
0000000000017de5         db  0x0e ; '.'
0000000000017de6         db  0x28 ; '('
0000000000017de7         db  0x42 ; 'B'
0000000000017de8         db  0x0e ; '.'
0000000000017de9         db  0x20 ; ' '
0000000000017dea         db  0x42 ; 'B'
0000000000017deb         db  0x0e ; '.'
0000000000017dec         db  0x18 ; '.'
0000000000017ded         db  0x42 ; 'B'
0000000000017dee         db  0x0e ; '.'
0000000000017def         db  0x10 ; '.'
0000000000017df0         db  0x42 ; 'B'
0000000000017df1         db  0x0e ; '.'
0000000000017df2         db  0x08 ; '.'
0000000000017df3         db  0x4a ; 'J'
0000000000017df4         db  0x0b ; '.'
0000000000017df5         db  0x00 ; '.'
0000000000017df6         db  0x00 ; '.'
0000000000017df7         db  0x00 ; '.'
0000000000017df8         dd         0x0000004c                                  ; Length of the record
0000000000017dfc         dd         0x00001794                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000017e00         db         0x70, 0x27, 2 dup (0xff)                    ; begin 0xa570
0000000000017e04         db         0x91, 0x0b, 2 dup (0x00)                    ; length 0xb91 (end at 0xb101)
0000000000017e08         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017e09         db  0x42 ; 'B'
0000000000017e0a         db  0x0e ; '.'
0000000000017e0b         db  0x10 ; '.'
0000000000017e0c         db  0x8f ; '.'
0000000000017e0d         db  0x02 ; '.'
0000000000017e0e         db  0x42 ; 'B'
0000000000017e0f         db  0x0e ; '.'
0000000000017e10         db  0x18 ; '.'
0000000000017e11         db  0x8e ; '.'
0000000000017e12         db  0x03 ; '.'
0000000000017e13         db  0x45 ; 'E'
0000000000017e14         db  0x0e ; '.'
0000000000017e15         db  0x20 ; ' '
0000000000017e16         db  0x8d ; '.'
0000000000017e17         db  0x04 ; '.'
0000000000017e18         db  0x42 ; 'B'
0000000000017e19         db  0x0e ; '.'
0000000000017e1a         db  0x28 ; '('
0000000000017e1b         db  0x8c ; '.'
0000000000017e1c         db  0x05 ; '.'
0000000000017e1d         db  0x46 ; 'F'
0000000000017e1e         db  0x0e ; '.'
0000000000017e1f         db  0x30 ; '0'
0000000000017e20         db  0x86 ; '.'
0000000000017e21         db  0x06 ; '.'
0000000000017e22         db  0x41 ; 'A'
0000000000017e23         db  0x0e ; '.'
0000000000017e24         db  0x38 ; '8'
0000000000017e25         db  0x83 ; '.'
0000000000017e26         db  0x07 ; '.'
0000000000017e27         db  0x47 ; 'G'
0000000000017e28         db  0x0e ; '.'
0000000000017e29         db  0xc0 ; '.'
0000000000017e2a         db  0x02 ; '.'
0000000000017e2b         db  0x03 ; '.'
0000000000017e2c         db  0x17 ; '.'
0000000000017e2d         db  0x04 ; '.'
0000000000017e2e         db  0x0a ; '.'
0000000000017e2f         db  0x0e ; '.'
0000000000017e30         db  0x38 ; '8'
0000000000017e31         db  0x41 ; 'A'
0000000000017e32         db  0x0e ; '.'
0000000000017e33         db  0x30 ; '0'
0000000000017e34         db  0x41 ; 'A'
0000000000017e35         db  0x0e ; '.'
0000000000017e36         db  0x28 ; '('
0000000000017e37         db  0x42 ; 'B'
0000000000017e38         db  0x0e ; '.'
0000000000017e39         db  0x20 ; ' '
0000000000017e3a         db  0x42 ; 'B'
0000000000017e3b         db  0x0e ; '.'
0000000000017e3c         db  0x18 ; '.'
0000000000017e3d         db  0x42 ; 'B'
0000000000017e3e         db  0x0e ; '.'
0000000000017e3f         db  0x10 ; '.'
0000000000017e40         db  0x42 ; 'B'
0000000000017e41         db  0x0e ; '.'
0000000000017e42         db  0x08 ; '.'
0000000000017e43         db  0x46 ; 'F'
0000000000017e44         db  0x0b ; '.'
0000000000017e45         db  0x00 ; '.'
0000000000017e46         db  0x00 ; '.'
0000000000017e47         db  0x00 ; '.'
0000000000017e48         dd         0x00000030                                  ; Length of the record
0000000000017e4c         dd         0x000017e4                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000017e50         db         0xc0, 0x32, 2 dup (0xff)                    ; begin 0xb110
0000000000017e54         db         0x87, 3 dup (0x00)                          ; length 0x87 (end at 0xb197)
0000000000017e58         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017e59         db  0x47 ; 'G'
0000000000017e5a         db  0x0e ; '.'
0000000000017e5b         db  0x10 ; '.'
0000000000017e5c         db  0x86 ; '.'
0000000000017e5d         db  0x02 ; '.'
0000000000017e5e         db  0x41 ; 'A'
0000000000017e5f         db  0x0e ; '.'
0000000000017e60         db  0x18 ; '.'
0000000000017e61         db  0x83 ; '.'
0000000000017e62         db  0x03 ; '.'
0000000000017e63         db  0x4a ; 'J'
0000000000017e64         db  0x0e ; '.'
0000000000017e65         db  0x20 ; ' '
0000000000017e66         db  0x02 ; '.'
0000000000017e67         db  0x4e ; 'N'
0000000000017e68         db  0x0e ; '.'
0000000000017e69         db  0x18 ; '.'
0000000000017e6a         db  0x41 ; 'A'
0000000000017e6b         db  0x0e ; '.'
0000000000017e6c         db  0x10 ; '.'
0000000000017e6d         db  0x41 ; 'A'
0000000000017e6e         db  0x0e ; '.'
0000000000017e6f         db  0x08 ; '.'
0000000000017e70         db  0x46 ; 'F'
0000000000017e71         db  0xc3 ; '.'
0000000000017e72         db  0xc6 ; '.'
0000000000017e73         db  0x58 ; 'X'
0000000000017e74         db  0x0e ; '.'
0000000000017e75         db  0x20 ; ' '
0000000000017e76         db  0x83 ; '.'
0000000000017e77         db  0x03 ; '.'
0000000000017e78         db  0x86 ; '.'
0000000000017e79         db  0x02 ; '.'
0000000000017e7a         db  0x00 ; '.'
0000000000017e7b         db  0x00 ; '.'
0000000000017e7c         dd         0x00000028                                  ; Length of the record
0000000000017e80         dd         0x00001818                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000017e84         db         0x1c, 0x33, 2 dup (0xff)                    ; begin 0xb1a0
0000000000017e88         db         0x4f, 3 dup (0x00)                          ; length 0x4f (end at 0xb1ef)
0000000000017e8c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017e8d         db  0x42 ; 'B'
0000000000017e8e         db  0x0e ; '.'
0000000000017e8f         db  0x10 ; '.'
0000000000017e90         db  0x8c ; '.'
0000000000017e91         db  0x02 ; '.'
0000000000017e92         db  0x41 ; 'A'
0000000000017e93         db  0x0e ; '.'
0000000000017e94         db  0x18 ; '.'
0000000000017e95         db  0x86 ; '.'
0000000000017e96         db  0x03 ; '.'
0000000000017e97         db  0x44 ; 'D'
0000000000017e98         db  0x0e ; '.'
0000000000017e99         db  0x20 ; ' '
0000000000017e9a         db  0x83 ; '.'
0000000000017e9b         db  0x04 ; '.'
0000000000017e9c         db  0x7c ; '|'
0000000000017e9d         db  0x0e ; '.'
0000000000017e9e         db  0x18 ; '.'
0000000000017e9f         db  0x45 ; 'E'
0000000000017ea0         db  0x0e ; '.'
0000000000017ea1         db  0x10 ; '.'
0000000000017ea2         db  0x42 ; 'B'
0000000000017ea3         db  0x0e ; '.'
0000000000017ea4         db  0x08 ; '.'
0000000000017ea5         db  0x00 ; '.'
0000000000017ea6         db  0x00 ; '.'
0000000000017ea7         db  0x00 ; '.'
0000000000017ea8         dd         0x0000002c                                  ; Length of the record
0000000000017eac         dd         0x00001844                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000017eb0         db         0x40, 0x33, 2 dup (0xff)                    ; begin 0xb1f0
0000000000017eb4         db         0x94, 3 dup (0x00)                          ; length 0x94 (end at 0xb284)
0000000000017eb8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017eb9         db  0x42 ; 'B'
0000000000017eba         db  0x0e ; '.'
0000000000017ebb         db  0x10 ; '.'
0000000000017ebc         db  0x8c ; '.'
0000000000017ebd         db  0x02 ; '.'
0000000000017ebe         db  0x41 ; 'A'
0000000000017ebf         db  0x0e ; '.'
0000000000017ec0         db  0x18 ; '.'
0000000000017ec1         db  0x86 ; '.'
0000000000017ec2         db  0x03 ; '.'
0000000000017ec3         db  0x41 ; 'A'
0000000000017ec4         db  0x0e ; '.'
0000000000017ec5         db  0x20 ; ' '
0000000000017ec6         db  0x83 ; '.'
0000000000017ec7         db  0x04 ; '.'
0000000000017ec8         db  0x02 ; '.'
0000000000017ec9         db  0x6d ; 'm'
0000000000017eca         db  0x0a ; '.'
0000000000017ecb         db  0x0e ; '.'
0000000000017ecc         db  0x18 ; '.'
0000000000017ecd         db  0x41 ; 'A'
0000000000017ece         db  0x0e ; '.'
0000000000017ecf         db  0x10 ; '.'
0000000000017ed0         db  0x42 ; 'B'
0000000000017ed1         db  0x0e ; '.'
0000000000017ed2         db  0x08 ; '.'
0000000000017ed3         db  0x41 ; 'A'
0000000000017ed4         db  0x0b ; '.'
0000000000017ed5         db  0x00 ; '.'
0000000000017ed6         db  0x00 ; '.'
0000000000017ed7         db  0x00 ; '.'
0000000000017ed8         dd         0x00000030                                  ; Length of the record
0000000000017edc         dd         0x00001874                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000017ee0         db         0xb0, 0x33, 2 dup (0xff)                    ; begin 0xb290
0000000000017ee4         db         0x4c, 3 dup (0x00)                          ; length 0x4c (end at 0xb2dc)
0000000000017ee8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017ee9         db  0x41 ; 'A'
0000000000017eea         db  0x0e ; '.'
0000000000017eeb         db  0x10 ; '.'
0000000000017eec         db  0x86 ; '.'
0000000000017eed         db  0x02 ; '.'
0000000000017eee         db  0x41 ; 'A'
0000000000017eef         db  0x0e ; '.'
0000000000017ef0         db  0x18 ; '.'
0000000000017ef1         db  0x83 ; '.'
0000000000017ef2         db  0x03 ; '.'
0000000000017ef3         db  0x4d ; 'M'
0000000000017ef4         db  0x0e ; '.'
0000000000017ef5         db  0x20 ; ' '
0000000000017ef6         db  0x67 ; 'g'
0000000000017ef7         db  0x0a ; '.'
0000000000017ef8         db  0x0e ; '.'
0000000000017ef9         db  0x18 ; '.'
0000000000017efa         db  0x43 ; 'C'
0000000000017efb         db  0x0e ; '.'
0000000000017efc         db  0x10 ; '.'
0000000000017efd         db  0x41 ; 'A'
0000000000017efe         db  0x0e ; '.'
0000000000017eff         db  0x08 ; '.'
0000000000017f00         db  0x46 ; 'F'
0000000000017f01         db  0x0b ; '.'
0000000000017f02         db  0x44 ; 'D'
0000000000017f03         db  0x0e ; '.'
0000000000017f04         db  0x18 ; '.'
0000000000017f05         db  0x46 ; 'F'
0000000000017f06         db  0x0e ; '.'
0000000000017f07         db  0x10 ; '.'
0000000000017f08         db  0x41 ; 'A'
0000000000017f09         db  0x0e ; '.'
0000000000017f0a         db  0x08 ; '.'
0000000000017f0b         db  0x00 ; '.'
0000000000017f0c         dd         0x00000040                                  ; Length of the record
0000000000017f10         dd         0x000018a8                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000017f14         db         0xcc, 0x33, 2 dup (0xff)                    ; begin 0xb2e0
0000000000017f18         db         0x0d, 0x08, 2 dup (0x00)                    ; length 0x80d (end at 0xbaed)
0000000000017f1c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017f1d         db  0x42 ; 'B'
0000000000017f1e         db  0x0e ; '.'
0000000000017f1f         db  0x10 ; '.'
0000000000017f20         db  0x8e ; '.'
0000000000017f21         db  0x02 ; '.'
0000000000017f22         db  0x42 ; 'B'
0000000000017f23         db  0x0e ; '.'
0000000000017f24         db  0x18 ; '.'
0000000000017f25         db  0x8d ; '.'
0000000000017f26         db  0x03 ; '.'
0000000000017f27         db  0x45 ; 'E'
0000000000017f28         db  0x0e ; '.'
0000000000017f29         db  0x20 ; ' '
0000000000017f2a         db  0x8c ; '.'
0000000000017f2b         db  0x04 ; '.'
0000000000017f2c         db  0x41 ; 'A'
0000000000017f2d         db  0x0e ; '.'
0000000000017f2e         db  0x28 ; '('
0000000000017f2f         db  0x86 ; '.'
0000000000017f30         db  0x05 ; '.'
0000000000017f31         db  0x44 ; 'D'
0000000000017f32         db  0x0e ; '.'
0000000000017f33         db  0x30 ; '0'
0000000000017f34         db  0x83 ; '.'
0000000000017f35         db  0x06 ; '.'
0000000000017f36         db  0x4a ; 'J'
0000000000017f37         db  0x0e ; '.'
0000000000017f38         db  0x40 ; '@'
0000000000017f39         db  0x02 ; '.'
0000000000017f3a         db  0xd2 ; '.'
0000000000017f3b         db  0x0a ; '.'
0000000000017f3c         db  0x0e ; '.'
0000000000017f3d         db  0x30 ; '0'
0000000000017f3e         db  0x41 ; 'A'
0000000000017f3f         db  0x0e ; '.'
0000000000017f40         db  0x28 ; '('
0000000000017f41         db  0x41 ; 'A'
0000000000017f42         db  0x0e ; '.'
0000000000017f43         db  0x20 ; ' '
0000000000017f44         db  0x42 ; 'B'
0000000000017f45         db  0x0e ; '.'
0000000000017f46         db  0x18 ; '.'
0000000000017f47         db  0x42 ; 'B'
0000000000017f48         db  0x0e ; '.'
0000000000017f49         db  0x10 ; '.'
0000000000017f4a         db  0x42 ; 'B'
0000000000017f4b         db  0x0e ; '.'
0000000000017f4c         db  0x08 ; '.'
0000000000017f4d         db  0x46 ; 'F'
0000000000017f4e         db  0x0b ; '.'
0000000000017f4f         db  0x00 ; '.'
0000000000017f50         dd         0x0000005c                                  ; Length of the record
0000000000017f54         dd         0x000018ec                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000017f58         db         0x98, 0x3b, 2 dup (0xff)                    ; begin 0xbaf0
0000000000017f5c         db         0x6a, 0x02, 2 dup (0x00)                    ; length 0x26a (end at 0xbd5a)
0000000000017f60         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017f61         db  0x42 ; 'B'
0000000000017f62         db  0x0e ; '.'
0000000000017f63         db  0x10 ; '.'
0000000000017f64         db  0x8f ; '.'
0000000000017f65         db  0x02 ; '.'
0000000000017f66         db  0x42 ; 'B'
0000000000017f67         db  0x0e ; '.'
0000000000017f68         db  0x18 ; '.'
0000000000017f69         db  0x8e ; '.'
0000000000017f6a         db  0x03 ; '.'
0000000000017f6b         db  0x45 ; 'E'
0000000000017f6c         db  0x0e ; '.'
0000000000017f6d         db  0x20 ; ' '
0000000000017f6e         db  0x8d ; '.'
0000000000017f6f         db  0x04 ; '.'
0000000000017f70         db  0x42 ; 'B'
0000000000017f71         db  0x0e ; '.'
0000000000017f72         db  0x28 ; '('
0000000000017f73         db  0x8c ; '.'
0000000000017f74         db  0x05 ; '.'
0000000000017f75         db  0x44 ; 'D'
0000000000017f76         db  0x0e ; '.'
0000000000017f77         db  0x30 ; '0'
0000000000017f78         db  0x86 ; '.'
0000000000017f79         db  0x06 ; '.'
0000000000017f7a         db  0x41 ; 'A'
0000000000017f7b         db  0x0e ; '.'
0000000000017f7c         db  0x38 ; '8'
0000000000017f7d         db  0x83 ; '.'
0000000000017f7e         db  0x07 ; '.'
0000000000017f7f         db  0x4f ; 'O'
0000000000017f80         db  0x0e ; '.'
0000000000017f81         db  0x90 ; '.'
0000000000017f82         db  0x01 ; '.'
0000000000017f83         db  0x02 ; '.'
0000000000017f84         db  0x5b ; '['
0000000000017f85         db  0x0e ; '.'
0000000000017f86         db  0x98 ; '.'
0000000000017f87         db  0x01 ; '.'
0000000000017f88         db  0x45 ; 'E'
0000000000017f89         db  0x0e ; '.'
0000000000017f8a         db  0xa0 ; '.'
0000000000017f8b         db  0x01 ; '.'
0000000000017f8c         db  0x6c ; 'l'
0000000000017f8d         db  0x0e ; '.'
0000000000017f8e         db  0x98 ; '.'
0000000000017f8f         db  0x01 ; '.'
0000000000017f90         db  0x41 ; 'A'
0000000000017f91         db  0x0e ; '.'
0000000000017f92         db  0x90 ; '.'
0000000000017f93         db  0x01 ; '.'
0000000000017f94         db  0x03 ; '.'
0000000000017f95         db  0x31 ; '1'
0000000000017f96         db  0x01 ; '.'
0000000000017f97         db  0x0a ; '.'
0000000000017f98         db  0x0e ; '.'
0000000000017f99         db  0x38 ; '8'
0000000000017f9a         db  0x41 ; 'A'
0000000000017f9b         db  0x0e ; '.'
0000000000017f9c         db  0x30 ; '0'
0000000000017f9d         db  0x41 ; 'A'
0000000000017f9e         db  0x0e ; '.'
0000000000017f9f         db  0x28 ; '('
0000000000017fa0         db  0x42 ; 'B'
0000000000017fa1         db  0x0e ; '.'
0000000000017fa2         db  0x20 ; ' '
0000000000017fa3         db  0x42 ; 'B'
0000000000017fa4         db  0x0e ; '.'
0000000000017fa5         db  0x18 ; '.'
0000000000017fa6         db  0x42 ; 'B'
0000000000017fa7         db  0x0e ; '.'
0000000000017fa8         db  0x10 ; '.'
0000000000017fa9         db  0x42 ; 'B'
0000000000017faa         db  0x0e ; '.'
0000000000017fab         db  0x08 ; '.'
0000000000017fac         db  0x49 ; 'I'
0000000000017fad         db  0x0b ; '.'
0000000000017fae         db  0x00 ; '.'
0000000000017faf         db  0x00 ; '.'
0000000000017fb0         dd         0x0000004c                                  ; Length of the record
0000000000017fb4         dd         0x0000194c                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000017fb8         db         0xa8, 0x3d, 2 dup (0xff)                    ; begin 0xbd60
0000000000017fbc         db         0x27, 0x05, 2 dup (0x00)                    ; length 0x527 (end at 0xc287)
0000000000017fc0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017fc1         db  0x42 ; 'B'
0000000000017fc2         db  0x0e ; '.'
0000000000017fc3         db  0x10 ; '.'
0000000000017fc4         db  0x8f ; '.'
0000000000017fc5         db  0x02 ; '.'
0000000000017fc6         db  0x42 ; 'B'
0000000000017fc7         db  0x0e ; '.'
0000000000017fc8         db  0x18 ; '.'
0000000000017fc9         db  0x8e ; '.'
0000000000017fca         db  0x03 ; '.'
0000000000017fcb         db  0x45 ; 'E'
0000000000017fcc         db  0x0e ; '.'
0000000000017fcd         db  0x20 ; ' '
0000000000017fce         db  0x8d ; '.'
0000000000017fcf         db  0x04 ; '.'
0000000000017fd0         db  0x42 ; 'B'
0000000000017fd1         db  0x0e ; '.'
0000000000017fd2         db  0x28 ; '('
0000000000017fd3         db  0x8c ; '.'
0000000000017fd4         db  0x05 ; '.'
0000000000017fd5         db  0x41 ; 'A'
0000000000017fd6         db  0x0e ; '.'
0000000000017fd7         db  0x30 ; '0'
0000000000017fd8         db  0x86 ; '.'
0000000000017fd9         db  0x06 ; '.'
0000000000017fda         db  0x41 ; 'A'
0000000000017fdb         db  0x0e ; '.'
0000000000017fdc         db  0x38 ; '8'
0000000000017fdd         db  0x83 ; '.'
0000000000017fde         db  0x07 ; '.'
0000000000017fdf         db  0x4c ; 'L'
0000000000017fe0         db  0x0e ; '.'
0000000000017fe1         db  0xb0 ; '.'
0000000000017fe2         db  0x03 ; '.'
0000000000017fe3         db  0x03 ; '.'
0000000000017fe4         db  0x82 ; '.'
0000000000017fe5         db  0x04 ; '.'
0000000000017fe6         db  0x0a ; '.'
0000000000017fe7         db  0x0e ; '.'
0000000000017fe8         db  0x38 ; '8'
0000000000017fe9         db  0x41 ; 'A'
0000000000017fea         db  0x0e ; '.'
0000000000017feb         db  0x30 ; '0'
0000000000017fec         db  0x41 ; 'A'
0000000000017fed         db  0x0e ; '.'
0000000000017fee         db  0x28 ; '('
0000000000017fef         db  0x42 ; 'B'
0000000000017ff0         db  0x0e ; '.'
0000000000017ff1         db  0x20 ; ' '
0000000000017ff2         db  0x42 ; 'B'
0000000000017ff3         db  0x0e ; '.'
0000000000017ff4         db  0x18 ; '.'
0000000000017ff5         db  0x42 ; 'B'
0000000000017ff6         db  0x0e ; '.'
0000000000017ff7         db  0x10 ; '.'
0000000000017ff8         db  0x42 ; 'B'
0000000000017ff9         db  0x0e ; '.'
0000000000017ffa         db  0x08 ; '.'
0000000000017ffb         db  0x41 ; 'A'
0000000000017ffc         db  0x0b ; '.'
0000000000017ffd         db  0x00 ; '.'
0000000000017ffe         db  0x00 ; '.'
0000000000017fff         db  0x00 ; '.'
0000000000018000         dd         0x00000038                                  ; Length of the record
0000000000018004         dd         0x0000199c                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000018008         db         0x88, 0x42, 2 dup (0xff)                    ; begin 0xc290
000000000001800c         db         0x54, 0x02, 2 dup (0x00)                    ; length 0x254 (end at 0xc4e4)
0000000000018010         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018011         db  0x46 ; 'F'
0000000000018012         db  0x0e ; '.'
0000000000018013         db  0x10 ; '.'
0000000000018014         db  0x8d ; '.'
0000000000018015         db  0x02 ; '.'
0000000000018016         db  0x42 ; 'B'
0000000000018017         db  0x0e ; '.'
0000000000018018         db  0x18 ; '.'
0000000000018019         db  0x8c ; '.'
000000000001801a         db  0x03 ; '.'
000000000001801b         db  0x45 ; 'E'
000000000001801c         db  0x0e ; '.'
000000000001801d         db  0x20 ; ' '
000000000001801e         db  0x86 ; '.'
000000000001801f         db  0x04 ; '.'
0000000000018020         db  0x41 ; 'A'
0000000000018021         db  0x0e ; '.'
0000000000018022         db  0x28 ; '('
0000000000018023         db  0x83 ; '.'
0000000000018024         db  0x05 ; '.'
0000000000018025         db  0x44 ; 'D'
0000000000018026         db  0x0e ; '.'
0000000000018027         db  0x30 ; '0'
0000000000018028         db  0x02 ; '.'
0000000000018029         db  0xe4 ; '.'
000000000001802a         db  0x0a ; '.'
000000000001802b         db  0x0e ; '.'
000000000001802c         db  0x28 ; '('
000000000001802d         db  0x43 ; 'C'
000000000001802e         db  0x0e ; '.'
000000000001802f         db  0x20 ; ' '
0000000000018030         db  0x41 ; 'A'
0000000000018031         db  0x0e ; '.'
0000000000018032         db  0x18 ; '.'
0000000000018033         db  0x42 ; 'B'
0000000000018034         db  0x0e ; '.'
0000000000018035         db  0x10 ; '.'
0000000000018036         db  0x42 ; 'B'
0000000000018037         db  0x0e ; '.'
0000000000018038         db  0x08 ; '.'
0000000000018039         db  0x42 ; 'B'
000000000001803a         db  0x0b ; '.'
000000000001803b         db  0x00 ; '.'
000000000001803c         dd         0x0000004c                                  ; Length of the record
0000000000018040         dd         0x000019d8                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000018044         db         0xac, 0x44, 2 dup (0xff)                    ; begin 0xc4f0
0000000000018048         db         0x51, 0x07, 2 dup (0x00)                    ; length 0x751 (end at 0xcc41)
000000000001804c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001804d         db  0x42 ; 'B'
000000000001804e         db  0x0e ; '.'
000000000001804f         db  0x10 ; '.'
0000000000018050         db  0x8f ; '.'
0000000000018051         db  0x02 ; '.'
0000000000018052         db  0x42 ; 'B'
0000000000018053         db  0x0e ; '.'
0000000000018054         db  0x18 ; '.'
0000000000018055         db  0x8e ; '.'
0000000000018056         db  0x03 ; '.'
0000000000018057         db  0x45 ; 'E'
0000000000018058         db  0x0e ; '.'
0000000000018059         db  0x20 ; ' '
000000000001805a         db  0x8d ; '.'
000000000001805b         db  0x04 ; '.'
000000000001805c         db  0x42 ; 'B'
000000000001805d         db  0x0e ; '.'
000000000001805e         db  0x28 ; '('
000000000001805f         db  0x8c ; '.'
0000000000018060         db  0x05 ; '.'
0000000000018061         db  0x41 ; 'A'
0000000000018062         db  0x0e ; '.'
0000000000018063         db  0x30 ; '0'
0000000000018064         db  0x86 ; '.'
0000000000018065         db  0x06 ; '.'
0000000000018066         db  0x41 ; 'A'
0000000000018067         db  0x0e ; '.'
0000000000018068         db  0x38 ; '8'
0000000000018069         db  0x83 ; '.'
000000000001806a         db  0x07 ; '.'
000000000001806b         db  0x4d ; 'M'
000000000001806c         db  0x0e ; '.'
000000000001806d         db  0x90 ; '.'
000000000001806e         db  0x02 ; '.'
000000000001806f         db  0x03 ; '.'
0000000000018070         db  0x88 ; '.'
0000000000018071         db  0x05 ; '.'
0000000000018072         db  0x0a ; '.'
0000000000018073         db  0x0e ; '.'
0000000000018074         db  0x38 ; '8'
0000000000018075         db  0x41 ; 'A'
0000000000018076         db  0x0e ; '.'
0000000000018077         db  0x30 ; '0'
0000000000018078         db  0x41 ; 'A'
0000000000018079         db  0x0e ; '.'
000000000001807a         db  0x28 ; '('
000000000001807b         db  0x42 ; 'B'
000000000001807c         db  0x0e ; '.'
000000000001807d         db  0x20 ; ' '
000000000001807e         db  0x42 ; 'B'
000000000001807f         db  0x0e ; '.'
0000000000018080         db  0x18 ; '.'
0000000000018081         db  0x42 ; 'B'
0000000000018082         db  0x0e ; '.'
0000000000018083         db  0x10 ; '.'
0000000000018084         db  0x42 ; 'B'
0000000000018085         db  0x0e ; '.'
0000000000018086         db  0x08 ; '.'
0000000000018087         db  0x44 ; 'D'
0000000000018088         db  0x0b ; '.'
0000000000018089         db  0x00 ; '.'
000000000001808a         db  0x00 ; '.'
000000000001808b         db  0x00 ; '.'
000000000001808c         dd         0x0000002c                                  ; Length of the record
0000000000018090         dd         0x00001a28                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000018094         db         0xbc, 0x4b, 2 dup (0xff)                    ; begin 0xcc50
0000000000018098         db         0xea, 0x08, 2 dup (0x00)                    ; length 0x8ea (end at 0xd53a)
000000000001809c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001809d         db  0x41 ; 'A'
000000000001809e         db  0x0e ; '.'
000000000001809f         db  0x10 ; '.'
00000000000180a0         db  0x86 ; '.'
00000000000180a1         db  0x02 ; '.'
00000000000180a2         db  0x43 ; 'C'
00000000000180a3         db  0x0d ; '.'
00000000000180a4         db  0x06 ; '.'
00000000000180a5         db  0x48 ; 'H'
00000000000180a6         db  0x8f ; '.'
00000000000180a7         db  0x03 ; '.'
00000000000180a8         db  0x8e ; '.'
00000000000180a9         db  0x04 ; '.'
00000000000180aa         db  0x8d ; '.'
00000000000180ab         db  0x05 ; '.'
00000000000180ac         db  0x8c ; '.'
00000000000180ad         db  0x06 ; '.'
00000000000180ae         db  0x4e ; 'N'
00000000000180af         db  0x83 ; '.'
00000000000180b0         db  0x07 ; '.'
00000000000180b1         db  0x03 ; '.'
00000000000180b2         db  0x20 ; ' '
00000000000180b3         db  0x07 ; '.'
00000000000180b4         db  0x0a ; '.'
00000000000180b5         db  0x0c ; '.'
00000000000180b6         db  0x07 ; '.'
00000000000180b7         db  0x08 ; '.'
00000000000180b8         db  0x41 ; 'A'
00000000000180b9         db  0x0b ; '.'
00000000000180ba         db  0x00 ; '.'
00000000000180bb         db  0x00 ; '.'
00000000000180bc         dd         0x00000068                                  ; Length of the record
00000000000180c0         dd         0x00001a58                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
00000000000180c4         db         0x7c, 0x54, 2 dup (0xff)                    ; begin 0xd540
00000000000180c8         db         0x96, 0x01, 2 dup (0x00)                    ; length 0x196 (end at 0xd6d6)
00000000000180cc         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000180cd         db  0x42 ; 'B'
00000000000180ce         db  0x0e ; '.'
00000000000180cf         db  0x10 ; '.'
00000000000180d0         db  0x8f ; '.'
00000000000180d1         db  0x02 ; '.'
00000000000180d2         db  0x42 ; 'B'
00000000000180d3         db  0x0e ; '.'
00000000000180d4         db  0x18 ; '.'
00000000000180d5         db  0x8e ; '.'
00000000000180d6         db  0x03 ; '.'
00000000000180d7         db  0x45 ; 'E'
00000000000180d8         db  0x0e ; '.'
00000000000180d9         db  0x20 ; ' '
00000000000180da         db  0x8d ; '.'
00000000000180db         db  0x04 ; '.'
00000000000180dc         db  0x42 ; 'B'
00000000000180dd         db  0x0e ; '.'
00000000000180de         db  0x28 ; '('
00000000000180df         db  0x8c ; '.'
00000000000180e0         db  0x05 ; '.'
00000000000180e1         db  0x44 ; 'D'
00000000000180e2         db  0x0e ; '.'
00000000000180e3         db  0x30 ; '0'
00000000000180e4         db  0x86 ; '.'
00000000000180e5         db  0x06 ; '.'
00000000000180e6         db  0x41 ; 'A'
00000000000180e7         db  0x0e ; '.'
00000000000180e8         db  0x38 ; '8'
00000000000180e9         db  0x83 ; '.'
00000000000180ea         db  0x07 ; '.'
00000000000180eb         db  0x51 ; 'Q'
00000000000180ec         db  0x0e ; '.'
00000000000180ed         db  0x58 ; 'X'
00000000000180ee         db  0x49 ; 'I'
00000000000180ef         db  0x0e ; '.'
00000000000180f0         db  0x60 ; '`'
00000000000180f1         db  0x4e ; 'N'
00000000000180f2         db  0x0e ; '.'
00000000000180f3         db  0x58 ; 'X'
00000000000180f4         db  0x41 ; 'A'
00000000000180f5         db  0x0e ; '.'
00000000000180f6         db  0x50 ; 'P'
00000000000180f7         db  0x46 ; 'F'
00000000000180f8         db  0x0a ; '.'
00000000000180f9         db  0x0e ; '.'
00000000000180fa         db  0x38 ; '8'
00000000000180fb         db  0x41 ; 'A'
00000000000180fc         db  0x0e ; '.'
00000000000180fd         db  0x30 ; '0'
00000000000180fe         db  0x41 ; 'A'
00000000000180ff         db  0x0e ; '.'
0000000000018100         db  0x28 ; '('
0000000000018101         db  0x42 ; 'B'
0000000000018102         db  0x0e ; '.'
0000000000018103         db  0x20 ; ' '
0000000000018104         db  0x42 ; 'B'
0000000000018105         db  0x0e ; '.'
0000000000018106         db  0x18 ; '.'
0000000000018107         db  0x42 ; 'B'
0000000000018108         db  0x0e ; '.'
0000000000018109         db  0x10 ; '.'
000000000001810a         db  0x42 ; 'B'
000000000001810b         db  0x0e ; '.'
000000000001810c         db  0x08 ; '.'
000000000001810d         db  0x47 ; 'G'
000000000001810e         db  0x0b ; '.'
000000000001810f         db  0x02 ; '.'
0000000000018110         db  0x97 ; '.'
0000000000018111         db  0x0a ; '.'
0000000000018112         db  0x0e ; '.'
0000000000018113         db  0x38 ; '8'
0000000000018114         db  0x44 ; 'D'
0000000000018115         db  0x0e ; '.'
0000000000018116         db  0x30 ; '0'
0000000000018117         db  0x41 ; 'A'
0000000000018118         db  0x0e ; '.'
0000000000018119         db  0x28 ; '('
000000000001811a         db  0x42 ; 'B'
000000000001811b         db  0x0e ; '.'
000000000001811c         db  0x20 ; ' '
000000000001811d         db  0x42 ; 'B'
000000000001811e         db  0x0e ; '.'
000000000001811f         db  0x18 ; '.'
0000000000018120         db  0x42 ; 'B'
0000000000018121         db  0x0e ; '.'
0000000000018122         db  0x10 ; '.'
0000000000018123         db  0x42 ; 'B'
0000000000018124         db  0x0e ; '.'
0000000000018125         db  0x08 ; '.'
0000000000018126         db  0x4c ; 'L'
0000000000018127         db  0x0b ; '.'
0000000000018128         dd         0x0000005c                                  ; Length of the record
000000000001812c         dd         0x00001ac4                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000018130         db         0xb0, 0x55, 2 dup (0xff)                    ; begin 0xd6e0
0000000000018134         db         0xe1, 0x08, 2 dup (0x00)                    ; length 0x8e1 (end at 0xdfc1)
0000000000018138         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018139         db  0x42 ; 'B'
000000000001813a         db  0x0e ; '.'
000000000001813b         db  0x10 ; '.'
000000000001813c         db  0x8f ; '.'
000000000001813d         db  0x02 ; '.'
000000000001813e         db  0x42 ; 'B'
000000000001813f         db  0x0e ; '.'
0000000000018140         db  0x18 ; '.'
0000000000018141         db  0x8e ; '.'
0000000000018142         db  0x03 ; '.'
0000000000018143         db  0x42 ; 'B'
0000000000018144         db  0x0e ; '.'
0000000000018145         db  0x20 ; ' '
0000000000018146         db  0x8d ; '.'
0000000000018147         db  0x04 ; '.'
0000000000018148         db  0x42 ; 'B'
0000000000018149         db  0x0e ; '.'
000000000001814a         db  0x28 ; '('
000000000001814b         db  0x8c ; '.'
000000000001814c         db  0x05 ; '.'
000000000001814d         db  0x41 ; 'A'
000000000001814e         db  0x0e ; '.'
000000000001814f         db  0x30 ; '0'
0000000000018150         db  0x86 ; '.'
0000000000018151         db  0x06 ; '.'
0000000000018152         db  0x41 ; 'A'
0000000000018153         db  0x0e ; '.'
0000000000018154         db  0x38 ; '8'
0000000000018155         db  0x83 ; '.'
0000000000018156         db  0x07 ; '.'
0000000000018157         db  0x47 ; 'G'
0000000000018158         db  0x0e ; '.'
0000000000018159         db  0xf0 ; '.'
000000000001815a         db  0x01 ; '.'
000000000001815b         db  0x03 ; '.'
000000000001815c         db  0x85 ; '.'
000000000001815d         db  0x03 ; '.'
000000000001815e         db  0x0a ; '.'
000000000001815f         db  0x0e ; '.'
0000000000018160         db  0x38 ; '8'
0000000000018161         db  0x41 ; 'A'
0000000000018162         db  0x0e ; '.'
0000000000018163         db  0x30 ; '0'
0000000000018164         db  0x41 ; 'A'
0000000000018165         db  0x0e ; '.'
0000000000018166         db  0x28 ; '('
0000000000018167         db  0x42 ; 'B'
0000000000018168         db  0x0e ; '.'
0000000000018169         db  0x20 ; ' '
000000000001816a         db  0x42 ; 'B'
000000000001816b         db  0x0e ; '.'
000000000001816c         db  0x18 ; '.'
000000000001816d         db  0x42 ; 'B'
000000000001816e         db  0x0e ; '.'
000000000001816f         db  0x10 ; '.'
0000000000018170         db  0x42 ; 'B'
0000000000018171         db  0x0e ; '.'
0000000000018172         db  0x08 ; '.'
0000000000018173         db  0x48 ; 'H'
0000000000018174         db  0x0b ; '.'
0000000000018175         db  0x03 ; '.'
0000000000018176         db  0xd8 ; '.'
0000000000018177         db  0x02 ; '.'
0000000000018178         db  0x0e ; '.'
0000000000018179         db  0xf8 ; '.'
000000000001817a         db  0x01 ; '.'
000000000001817b         db  0x42 ; 'B'
000000000001817c         db  0x0e ; '.'
000000000001817d         db  0x80 ; '.'
000000000001817e         db  0x02 ; '.'
000000000001817f         db  0x4f ; 'O'
0000000000018180         db  0x0e ; '.'
0000000000018181         db  0xf8 ; '.'
0000000000018182         db  0x01 ; '.'
0000000000018183         db  0x44 ; 'D'
0000000000018184         db  0x0e ; '.'
0000000000018185         db  0xf0 ; '.'
0000000000018186         db  0x01 ; '.'
0000000000018187         db  0x00 ; '.'
0000000000018188         dd         0x00000048                                  ; Length of the record
000000000001818c         dd         0x00001b24                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000018190         db         0x40, 0x5e, 2 dup (0xff)                    ; begin 0xdfd0
0000000000018194         db         0xec, 0x01, 2 dup (0x00)                    ; length 0x1ec (end at 0xe1bc)
0000000000018198         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018199         db  0x42 ; 'B'
000000000001819a         db  0x0e ; '.'
000000000001819b         db  0x10 ; '.'
000000000001819c         db  0x8f ; '.'
000000000001819d         db  0x02 ; '.'
000000000001819e         db  0x42 ; 'B'
000000000001819f         db  0x0e ; '.'
00000000000181a0         db  0x18 ; '.'
00000000000181a1         db  0x8e ; '.'
00000000000181a2         db  0x03 ; '.'
00000000000181a3         db  0x42 ; 'B'
00000000000181a4         db  0x0e ; '.'
00000000000181a5         db  0x20 ; ' '
00000000000181a6         db  0x8d ; '.'
00000000000181a7         db  0x04 ; '.'
00000000000181a8         db  0x42 ; 'B'
00000000000181a9         db  0x0e ; '.'
00000000000181aa         db  0x28 ; '('
00000000000181ab         db  0x8c ; '.'
00000000000181ac         db  0x05 ; '.'
00000000000181ad         db  0x44 ; 'D'
00000000000181ae         db  0x0e ; '.'
00000000000181af         db  0x30 ; '0'
00000000000181b0         db  0x86 ; '.'
00000000000181b1         db  0x06 ; '.'
00000000000181b2         db  0x41 ; 'A'
00000000000181b3         db  0x0e ; '.'
00000000000181b4         db  0x38 ; '8'
00000000000181b5         db  0x83 ; '.'
00000000000181b6         db  0x07 ; '.'
00000000000181b7         db  0x47 ; 'G'
00000000000181b8         db  0x0e ; '.'
00000000000181b9         db  0x70 ; 'p'
00000000000181ba         db  0x02 ; '.'
00000000000181bb         db  0x6c ; 'l'
00000000000181bc         db  0x0a ; '.'
00000000000181bd         db  0x0e ; '.'
00000000000181be         db  0x38 ; '8'
00000000000181bf         db  0x41 ; 'A'
00000000000181c0         db  0x0e ; '.'
00000000000181c1         db  0x30 ; '0'
00000000000181c2         db  0x41 ; 'A'
00000000000181c3         db  0x0e ; '.'
00000000000181c4         db  0x28 ; '('
00000000000181c5         db  0x42 ; 'B'
00000000000181c6         db  0x0e ; '.'
00000000000181c7         db  0x20 ; ' '
00000000000181c8         db  0x42 ; 'B'
00000000000181c9         db  0x0e ; '.'
00000000000181ca         db  0x18 ; '.'
00000000000181cb         db  0x42 ; 'B'
00000000000181cc         db  0x0e ; '.'
00000000000181cd         db  0x10 ; '.'
00000000000181ce         db  0x42 ; 'B'
00000000000181cf         db  0x0e ; '.'
00000000000181d0         db  0x08 ; '.'
00000000000181d1         db  0x46 ; 'F'
00000000000181d2         db  0x0b ; '.'
00000000000181d3         db  0x00 ; '.'
00000000000181d4         dd         0x0000005c                                  ; Length of the record
00000000000181d8         dd         0x00001b70                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
00000000000181dc         db         0xe4, 0x5f, 2 dup (0xff)                    ; begin 0xe1c0
00000000000181e0         db         0x40, 0x03, 2 dup (0x00)                    ; length 0x340 (end at 0xe500)
00000000000181e4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000181e5         db  0x42 ; 'B'
00000000000181e6         db  0x0e ; '.'
00000000000181e7         db  0x10 ; '.'
00000000000181e8         db  0x8f ; '.'
00000000000181e9         db  0x02 ; '.'
00000000000181ea         db  0x42 ; 'B'
00000000000181eb         db  0x0e ; '.'
00000000000181ec         db  0x18 ; '.'
00000000000181ed         db  0x8e ; '.'
00000000000181ee         db  0x03 ; '.'
00000000000181ef         db  0x45 ; 'E'
00000000000181f0         db  0x0e ; '.'
00000000000181f1         db  0x20 ; ' '
00000000000181f2         db  0x8d ; '.'
00000000000181f3         db  0x04 ; '.'
00000000000181f4         db  0x42 ; 'B'
00000000000181f5         db  0x0e ; '.'
00000000000181f6         db  0x28 ; '('
00000000000181f7         db  0x8c ; '.'
00000000000181f8         db  0x05 ; '.'
00000000000181f9         db  0x44 ; 'D'
00000000000181fa         db  0x0e ; '.'
00000000000181fb         db  0x30 ; '0'
00000000000181fc         db  0x86 ; '.'
00000000000181fd         db  0x06 ; '.'
00000000000181fe         db  0x41 ; 'A'
00000000000181ff         db  0x0e ; '.'
0000000000018200         db  0x38 ; '8'
0000000000018201         db  0x83 ; '.'
0000000000018202         db  0x07 ; '.'
0000000000018203         db  0x44 ; 'D'
0000000000018204         db  0x0e ; '.'
0000000000018205         db  0xa0 ; '.'
0000000000018206         db  0x01 ; '.'
0000000000018207         db  0x03 ; '.'
0000000000018208         db  0x5d ; ']'
0000000000018209         db  0x01 ; '.'
000000000001820a         db  0x0e ; '.'
000000000001820b         db  0xa8 ; '.'
000000000001820c         db  0x01 ; '.'
000000000001820d         db  0x51 ; 'Q'
000000000001820e         db  0x0e ; '.'
000000000001820f         db  0xb0 ; '.'
0000000000018210         db  0x01 ; '.'
0000000000018211         db  0x52 ; 'R'
0000000000018212         db  0x0e ; '.'
0000000000018213         db  0xa8 ; '.'
0000000000018214         db  0x01 ; '.'
0000000000018215         db  0x41 ; 'A'
0000000000018216         db  0x0e ; '.'
0000000000018217         db  0xa0 ; '.'
0000000000018218         db  0x01 ; '.'
0000000000018219         db  0x03 ; '.'
000000000001821a         db  0x94 ; '.'
000000000001821b         db  0x01 ; '.'
000000000001821c         db  0x0a ; '.'
000000000001821d         db  0x0e ; '.'
000000000001821e         db  0x38 ; '8'
000000000001821f         db  0x41 ; 'A'
0000000000018220         db  0x0e ; '.'
0000000000018221         db  0x30 ; '0'
0000000000018222         db  0x41 ; 'A'
0000000000018223         db  0x0e ; '.'
0000000000018224         db  0x28 ; '('
0000000000018225         db  0x42 ; 'B'
0000000000018226         db  0x0e ; '.'
0000000000018227         db  0x20 ; ' '
0000000000018228         db  0x42 ; 'B'
0000000000018229         db  0x0e ; '.'
000000000001822a         db  0x18 ; '.'
000000000001822b         db  0x42 ; 'B'
000000000001822c         db  0x0e ; '.'
000000000001822d         db  0x10 ; '.'
000000000001822e         db  0x42 ; 'B'
000000000001822f         db  0x0e ; '.'
0000000000018230         db  0x08 ; '.'
0000000000018231         db  0x41 ; 'A'
0000000000018232         db  0x0b ; '.'
0000000000018233         db  0x00 ; '.'
0000000000018234         dd         0x0000004c                                  ; Length of the record
0000000000018238         dd         0x00001bd0                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
000000000001823c         db         0xc4, 0x62, 2 dup (0xff)                    ; begin 0xe500
0000000000018240         db         0x30, 0x17, 2 dup (0x00)                    ; length 0x1730 (end at 0xfc30)
0000000000018244         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018245         db  0x42 ; 'B'
0000000000018246         db  0x0e ; '.'
0000000000018247         db  0x10 ; '.'
0000000000018248         db  0x8f ; '.'
0000000000018249         db  0x02 ; '.'
000000000001824a         db  0x42 ; 'B'
000000000001824b         db  0x0e ; '.'
000000000001824c         db  0x18 ; '.'
000000000001824d         db  0x8e ; '.'
000000000001824e         db  0x03 ; '.'
000000000001824f         db  0x42 ; 'B'
0000000000018250         db  0x0e ; '.'
0000000000018251         db  0x20 ; ' '
0000000000018252         db  0x8d ; '.'
0000000000018253         db  0x04 ; '.'
0000000000018254         db  0x42 ; 'B'
0000000000018255         db  0x0e ; '.'
0000000000018256         db  0x28 ; '('
0000000000018257         db  0x8c ; '.'
0000000000018258         db  0x05 ; '.'
0000000000018259         db  0x44 ; 'D'
000000000001825a         db  0x0e ; '.'
000000000001825b         db  0x30 ; '0'
000000000001825c         db  0x86 ; '.'
000000000001825d         db  0x06 ; '.'
000000000001825e         db  0x41 ; 'A'
000000000001825f         db  0x0e ; '.'
0000000000018260         db  0x38 ; '8'
0000000000018261         db  0x83 ; '.'
0000000000018262         db  0x07 ; '.'
0000000000018263         db  0x52 ; 'R'
0000000000018264         db  0x0e ; '.'
0000000000018265         db  0xf0 ; '.'
0000000000018266         db  0x04 ; '.'
0000000000018267         db  0x03 ; '.'
0000000000018268         db  0x7c ; '|'
0000000000018269         db  0x0b ; '.'
000000000001826a         db  0x0a ; '.'
000000000001826b         db  0x0e ; '.'
000000000001826c         db  0x38 ; '8'
000000000001826d         db  0x41 ; 'A'
000000000001826e         db  0x0e ; '.'
000000000001826f         db  0x30 ; '0'
0000000000018270         db  0x41 ; 'A'
0000000000018271         db  0x0e ; '.'
0000000000018272         db  0x28 ; '('
0000000000018273         db  0x42 ; 'B'
0000000000018274         db  0x0e ; '.'
0000000000018275         db  0x20 ; ' '
0000000000018276         db  0x42 ; 'B'
0000000000018277         db  0x0e ; '.'
0000000000018278         db  0x18 ; '.'
0000000000018279         db  0x42 ; 'B'
000000000001827a         db  0x0e ; '.'
000000000001827b         db  0x10 ; '.'
000000000001827c         db  0x42 ; 'B'
000000000001827d         db  0x0e ; '.'
000000000001827e         db  0x08 ; '.'
000000000001827f         db  0x4b ; 'K'
0000000000018280         db  0x0b ; '.'
0000000000018281         db  0x00 ; '.'
0000000000018282         db  0x00 ; '.'
0000000000018283         db  0x00 ; '.'
0000000000018284         dd         0x0000005c                                  ; Length of the record
0000000000018288         dd         0x00001c20                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
000000000001828c         db         0xa4, 0x79, 2 dup (0xff)                    ; begin 0xfc30
0000000000018290         db         0x50, 0x08, 2 dup (0x00)                    ; length 0x850 (end at 0x10480)
0000000000018294         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018295         db  0x42 ; 'B'
0000000000018296         db  0x0e ; '.'
0000000000018297         db  0x10 ; '.'
0000000000018298         db  0x8f ; '.'
0000000000018299         db  0x02 ; '.'
000000000001829a         db  0x42 ; 'B'
000000000001829b         db  0x0e ; '.'
000000000001829c         db  0x18 ; '.'
000000000001829d         db  0x8e ; '.'
000000000001829e         db  0x03 ; '.'
000000000001829f         db  0x45 ; 'E'
00000000000182a0         db  0x0e ; '.'
00000000000182a1         db  0x20 ; ' '
00000000000182a2         db  0x8d ; '.'
00000000000182a3         db  0x04 ; '.'
00000000000182a4         db  0x42 ; 'B'
00000000000182a5         db  0x0e ; '.'
00000000000182a6         db  0x28 ; '('
00000000000182a7         db  0x8c ; '.'
00000000000182a8         db  0x05 ; '.'
00000000000182a9         db  0x44 ; 'D'
00000000000182aa         db  0x0e ; '.'
00000000000182ab         db  0x30 ; '0'
00000000000182ac         db  0x86 ; '.'
00000000000182ad         db  0x06 ; '.'
00000000000182ae         db  0x41 ; 'A'
00000000000182af         db  0x0e ; '.'
00000000000182b0         db  0x38 ; '8'
00000000000182b1         db  0x83 ; '.'
00000000000182b2         db  0x07 ; '.'
00000000000182b3         db  0x55 ; 'U'
00000000000182b4         db  0x0e ; '.'
00000000000182b5         db  0xe0 ; '.'
00000000000182b6         db  0x01 ; '.'
00000000000182b7         db  0x02 ; '.'
00000000000182b8         db  0x91 ; '.'
00000000000182b9         db  0x0a ; '.'
00000000000182ba         db  0x0e ; '.'
00000000000182bb         db  0x38 ; '8'
00000000000182bc         db  0x41 ; 'A'
00000000000182bd         db  0x0e ; '.'
00000000000182be         db  0x30 ; '0'
00000000000182bf         db  0x41 ; 'A'
00000000000182c0         db  0x0e ; '.'
00000000000182c1         db  0x28 ; '('
00000000000182c2         db  0x42 ; 'B'
00000000000182c3         db  0x0e ; '.'
00000000000182c4         db  0x20 ; ' '
00000000000182c5         db  0x42 ; 'B'
00000000000182c6         db  0x0e ; '.'
00000000000182c7         db  0x18 ; '.'
00000000000182c8         db  0x42 ; 'B'
00000000000182c9         db  0x0e ; '.'
00000000000182ca         db  0x10 ; '.'
00000000000182cb         db  0x42 ; 'B'
00000000000182cc         db  0x0e ; '.'
00000000000182cd         db  0x08 ; '.'
00000000000182ce         db  0x48 ; 'H'
00000000000182cf         db  0x0b ; '.'
00000000000182d0         db  0x03 ; '.'
00000000000182d1         db  0xc3 ; '.'
00000000000182d2         db  0x05 ; '.'
00000000000182d3         db  0x0e ; '.'
00000000000182d4         db  0xe8 ; '.'
00000000000182d5         db  0x01 ; '.'
00000000000182d6         db  0x4a ; 'J'
00000000000182d7         db  0x0e ; '.'
00000000000182d8         db  0xf0 ; '.'
00000000000182d9         db  0x01 ; '.'
00000000000182da         db  0x56 ; 'V'
00000000000182db         db  0x0e ; '.'
00000000000182dc         db  0xe8 ; '.'
00000000000182dd         db  0x01 ; '.'
00000000000182de         db  0x41 ; 'A'
00000000000182df         db  0x0e ; '.'
00000000000182e0         db  0xe0 ; '.'
00000000000182e1         db  0x01 ; '.'
00000000000182e2         db  0x00 ; '.'
00000000000182e3         db  0x00 ; '.'
00000000000182e4         dd         0x00000040                                  ; Length of the record
00000000000182e8         dd         0x00001c80                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
00000000000182ec         db         0x94, 0x81, 2 dup (0xff)                    ; begin 0x10480
00000000000182f0         db         0x5d, 0x02, 2 dup (0x00)                    ; length 0x25d (end at 0x106dd)
00000000000182f4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000182f5         db  0x42 ; 'B'
00000000000182f6         db  0x0e ; '.'
00000000000182f7         db  0x10 ; '.'
00000000000182f8         db  0x8e ; '.'
00000000000182f9         db  0x02 ; '.'
00000000000182fa         db  0x42 ; 'B'
00000000000182fb         db  0x0e ; '.'
00000000000182fc         db  0x18 ; '.'
00000000000182fd         db  0x8d ; '.'
00000000000182fe         db  0x03 ; '.'
00000000000182ff         db  0x45 ; 'E'
0000000000018300         db  0x0e ; '.'
0000000000018301         db  0x20 ; ' '
0000000000018302         db  0x8c ; '.'
0000000000018303         db  0x04 ; '.'
0000000000018304         db  0x41 ; 'A'
0000000000018305         db  0x0e ; '.'
0000000000018306         db  0x28 ; '('
0000000000018307         db  0x86 ; '.'
0000000000018308         db  0x05 ; '.'
0000000000018309         db  0x44 ; 'D'
000000000001830a         db  0x0e ; '.'
000000000001830b         db  0x30 ; '0'
000000000001830c         db  0x83 ; '.'
000000000001830d         db  0x06 ; '.'
000000000001830e         db  0x4a ; 'J'
000000000001830f         db  0x0e ; '.'
0000000000018310         db  0x50 ; 'P'
0000000000018311         db  0x02 ; '.'
0000000000018312         db  0x61 ; 'a'
0000000000018313         db  0x0a ; '.'
0000000000018314         db  0x0e ; '.'
0000000000018315         db  0x30 ; '0'
0000000000018316         db  0x41 ; 'A'
0000000000018317         db  0x0e ; '.'
0000000000018318         db  0x28 ; '('
0000000000018319         db  0x41 ; 'A'
000000000001831a         db  0x0e ; '.'
000000000001831b         db  0x20 ; ' '
000000000001831c         db  0x42 ; 'B'
000000000001831d         db  0x0e ; '.'
000000000001831e         db  0x18 ; '.'
000000000001831f         db  0x42 ; 'B'
0000000000018320         db  0x0e ; '.'
0000000000018321         db  0x10 ; '.'
0000000000018322         db  0x42 ; 'B'
0000000000018323         db  0x0e ; '.'
0000000000018324         db  0x08 ; '.'
0000000000018325         db  0x47 ; 'G'
0000000000018326         db  0x0b ; '.'
0000000000018327         db  0x00 ; '.'
0000000000018328         dd         0x00000048                                  ; Length of the record
000000000001832c         dd         0x00001cc4                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000018330         db         0xb0, 0x83, 2 dup (0xff)                    ; begin 0x106e0
0000000000018334         db         0xfd, 0x06, 2 dup (0x00)                    ; length 0x6fd (end at 0x10ddd)
0000000000018338         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018339         db  0x42 ; 'B'
000000000001833a         db  0x0e ; '.'
000000000001833b         db  0x10 ; '.'
000000000001833c         db  0x8f ; '.'
000000000001833d         db  0x02 ; '.'
000000000001833e         db  0x42 ; 'B'
000000000001833f         db  0x0e ; '.'
0000000000018340         db  0x18 ; '.'
0000000000018341         db  0x8e ; '.'
0000000000018342         db  0x03 ; '.'
0000000000018343         db  0x42 ; 'B'
0000000000018344         db  0x0e ; '.'
0000000000018345         db  0x20 ; ' '
0000000000018346         db  0x8d ; '.'
0000000000018347         db  0x04 ; '.'
0000000000018348         db  0x42 ; 'B'
0000000000018349         db  0x0e ; '.'
000000000001834a         db  0x28 ; '('
000000000001834b         db  0x8c ; '.'
000000000001834c         db  0x05 ; '.'
000000000001834d         db  0x41 ; 'A'
000000000001834e         db  0x0e ; '.'
000000000001834f         db  0x30 ; '0'
0000000000018350         db  0x86 ; '.'
0000000000018351         db  0x06 ; '.'
0000000000018352         db  0x41 ; 'A'
0000000000018353         db  0x0e ; '.'
0000000000018354         db  0x38 ; '8'
0000000000018355         db  0x83 ; '.'
0000000000018356         db  0x07 ; '.'
0000000000018357         db  0x47 ; 'G'
0000000000018358         db  0x0e ; '.'
0000000000018359         db  0x70 ; 'p'
000000000001835a         db  0x02 ; '.'
000000000001835b         db  0xcb ; '.'
000000000001835c         db  0x0a ; '.'
000000000001835d         db  0x0e ; '.'
000000000001835e         db  0x38 ; '8'
000000000001835f         db  0x41 ; 'A'
0000000000018360         db  0x0e ; '.'
0000000000018361         db  0x30 ; '0'
0000000000018362         db  0x41 ; 'A'
0000000000018363         db  0x0e ; '.'
0000000000018364         db  0x28 ; '('
0000000000018365         db  0x42 ; 'B'
0000000000018366         db  0x0e ; '.'
0000000000018367         db  0x20 ; ' '
0000000000018368         db  0x42 ; 'B'
0000000000018369         db  0x0e ; '.'
000000000001836a         db  0x18 ; '.'
000000000001836b         db  0x42 ; 'B'
000000000001836c         db  0x0e ; '.'
000000000001836d         db  0x10 ; '.'
000000000001836e         db  0x42 ; 'B'
000000000001836f         db  0x0e ; '.'
0000000000018370         db  0x08 ; '.'
0000000000018371         db  0x4a ; 'J'
0000000000018372         db  0x0b ; '.'
0000000000018373         db  0x00 ; '.'
0000000000018374         dd         0x0000003c                                  ; Length of the record
0000000000018378         dd         0x00001d10                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
000000000001837c         db         0x64, 0x8a, 2 dup (0xff)                    ; begin 0x10de0
0000000000018380         db         0xb6, 3 dup (0x00)                          ; length 0xb6 (end at 0x10e96)
0000000000018384         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018385         db  0x42 ; 'B'
0000000000018386         db  0x0e ; '.'
0000000000018387         db  0x10 ; '.'
0000000000018388         db  0x8e ; '.'
0000000000018389         db  0x02 ; '.'
000000000001838a         db  0x45 ; 'E'
000000000001838b         db  0x0e ; '.'
000000000001838c         db  0x18 ; '.'
000000000001838d         db  0x8d ; '.'
000000000001838e         db  0x03 ; '.'
000000000001838f         db  0x45 ; 'E'
0000000000018390         db  0x0e ; '.'
0000000000018391         db  0x20 ; ' '
0000000000018392         db  0x8c ; '.'
0000000000018393         db  0x04 ; '.'
0000000000018394         db  0x48 ; 'H'
0000000000018395         db  0x0e ; '.'
0000000000018396         db  0x28 ; '('
0000000000018397         db  0x86 ; '.'
0000000000018398         db  0x05 ; '.'
0000000000018399         db  0x44 ; 'D'
000000000001839a         db  0x0e ; '.'
000000000001839b         db  0x30 ; '0'
000000000001839c         db  0x83 ; '.'
000000000001839d         db  0x06 ; '.'
000000000001839e         db  0x02 ; '.'
000000000001839f         db  0x83 ; '.'
00000000000183a0         db  0x0a ; '.'
00000000000183a1         db  0x0e ; '.'
00000000000183a2         db  0x28 ; '('
00000000000183a3         db  0x41 ; 'A'
00000000000183a4         db  0x0e ; '.'
00000000000183a5         db  0x20 ; ' '
00000000000183a6         db  0x42 ; 'B'
00000000000183a7         db  0x0e ; '.'
00000000000183a8         db  0x18 ; '.'
00000000000183a9         db  0x42 ; 'B'
00000000000183aa         db  0x0e ; '.'
00000000000183ab         db  0x10 ; '.'
00000000000183ac         db  0x42 ; 'B'
00000000000183ad         db  0x0e ; '.'
00000000000183ae         db  0x08 ; '.'
00000000000183af         db  0x46 ; 'F'
00000000000183b0         db  0x0b ; '.'
00000000000183b1         db  0x00 ; '.'
00000000000183b2         db  0x00 ; '.'
00000000000183b3         db  0x00 ; '.'
00000000000183b4         dd         0x0000005c                                  ; Length of the record
00000000000183b8         dd         0x00001d50                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
00000000000183bc         db         0xe4, 0x8a, 2 dup (0xff)                    ; begin 0x10ea0
00000000000183c0         db         0xd3, 0x14, 2 dup (0x00)                    ; length 0x14d3 (end at 0x12373)
00000000000183c4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000183c5         db  0x42 ; 'B'
00000000000183c6         db  0x0e ; '.'
00000000000183c7         db  0x10 ; '.'
00000000000183c8         db  0x8f ; '.'
00000000000183c9         db  0x02 ; '.'
00000000000183ca         db  0x42 ; 'B'
00000000000183cb         db  0x0e ; '.'
00000000000183cc         db  0x18 ; '.'
00000000000183cd         db  0x8e ; '.'
00000000000183ce         db  0x03 ; '.'
00000000000183cf         db  0x42 ; 'B'
00000000000183d0         db  0x0e ; '.'
00000000000183d1         db  0x20 ; ' '
00000000000183d2         db  0x8d ; '.'
00000000000183d3         db  0x04 ; '.'
00000000000183d4         db  0x42 ; 'B'
00000000000183d5         db  0x0e ; '.'
00000000000183d6         db  0x28 ; '('
00000000000183d7         db  0x8c ; '.'
00000000000183d8         db  0x05 ; '.'
00000000000183d9         db  0x41 ; 'A'
00000000000183da         db  0x0e ; '.'
00000000000183db         db  0x30 ; '0'
00000000000183dc         db  0x86 ; '.'
00000000000183dd         db  0x06 ; '.'
00000000000183de         db  0x41 ; 'A'
00000000000183df         db  0x0e ; '.'
00000000000183e0         db  0x38 ; '8'
00000000000183e1         db  0x83 ; '.'
00000000000183e2         db  0x07 ; '.'
00000000000183e3         db  0x47 ; 'G'
00000000000183e4         db  0x0e ; '.'
00000000000183e5         db  0xe0 ; '.'
00000000000183e6         db  0x02 ; '.'
00000000000183e7         db  0x03 ; '.'
00000000000183e8         db  0x22 ; '"'
00000000000183e9         db  0x01 ; '.'
00000000000183ea         db  0x0a ; '.'
00000000000183eb         db  0x0e ; '.'
00000000000183ec         db  0x38 ; '8'
00000000000183ed         db  0x41 ; 'A'
00000000000183ee         db  0x0e ; '.'
00000000000183ef         db  0x30 ; '0'
00000000000183f0         db  0x41 ; 'A'
00000000000183f1         db  0x0e ; '.'
00000000000183f2         db  0x28 ; '('
00000000000183f3         db  0x42 ; 'B'
00000000000183f4         db  0x0e ; '.'
00000000000183f5         db  0x20 ; ' '
00000000000183f6         db  0x42 ; 'B'
00000000000183f7         db  0x0e ; '.'
00000000000183f8         db  0x18 ; '.'
00000000000183f9         db  0x42 ; 'B'
00000000000183fa         db  0x0e ; '.'
00000000000183fb         db  0x10 ; '.'
00000000000183fc         db  0x42 ; 'B'
00000000000183fd         db  0x0e ; '.'
00000000000183fe         db  0x08 ; '.'
00000000000183ff         db  0x41 ; 'A'
0000000000018400         db  0x0b ; '.'
0000000000018401         db  0x03 ; '.'
0000000000018402         db  0xbf ; '.'
0000000000018403         db  0x0b ; '.'
0000000000018404         db  0x0e ; '.'
0000000000018405         db  0xe8 ; '.'
0000000000018406         db  0x02 ; '.'
0000000000018407         db  0x4c ; 'L'
0000000000018408         db  0x0e ; '.'
0000000000018409         db  0xf0 ; '.'
000000000001840a         db  0x02 ; '.'
000000000001840b         db  0x64 ; 'd'
000000000001840c         db  0x0e ; '.'
000000000001840d         db  0xe8 ; '.'
000000000001840e         db  0x02 ; '.'
000000000001840f         db  0x42 ; 'B'
0000000000018410         db  0x0e ; '.'
0000000000018411         db  0xe0 ; '.'
0000000000018412         db  0x02 ; '.'
0000000000018413         db  0x00 ; '.'
0000000000018414         dd         0x00000048                                  ; Length of the record
0000000000018418         dd         0x00001db0                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
000000000001841c         db         0x64, 0x9f, 2 dup (0xff)                    ; begin 0x12380
0000000000018420         db         0x82, 0x01, 2 dup (0x00)                    ; length 0x182 (end at 0x12502)
0000000000018424         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018425         db  0x42 ; 'B'
0000000000018426         db  0x0e ; '.'
0000000000018427         db  0x10 ; '.'
0000000000018428         db  0x8f ; '.'
0000000000018429         db  0x02 ; '.'
000000000001842a         db  0x42 ; 'B'
000000000001842b         db  0x0e ; '.'
000000000001842c         db  0x18 ; '.'
000000000001842d         db  0x8e ; '.'
000000000001842e         db  0x03 ; '.'
000000000001842f         db  0x45 ; 'E'
0000000000018430         db  0x0e ; '.'
0000000000018431         db  0x20 ; ' '
0000000000018432         db  0x8d ; '.'
0000000000018433         db  0x04 ; '.'
0000000000018434         db  0x42 ; 'B'
0000000000018435         db  0x0e ; '.'
0000000000018436         db  0x28 ; '('
0000000000018437         db  0x8c ; '.'
0000000000018438         db  0x05 ; '.'
0000000000018439         db  0x44 ; 'D'
000000000001843a         db  0x0e ; '.'
000000000001843b         db  0x30 ; '0'
000000000001843c         db  0x86 ; '.'
000000000001843d         db  0x06 ; '.'
000000000001843e         db  0x41 ; 'A'
000000000001843f         db  0x0e ; '.'
0000000000018440         db  0x38 ; '8'
0000000000018441         db  0x83 ; '.'
0000000000018442         db  0x07 ; '.'
0000000000018443         db  0x4d ; 'M'
0000000000018444         db  0x0e ; '.'
0000000000018445         db  0x80 ; '.'
0000000000018446         db  0x01 ; '.'
0000000000018447         db  0x02 ; '.'
0000000000018448         db  0xfa ; '.'
0000000000018449         db  0x0a ; '.'
000000000001844a         db  0x0e ; '.'
000000000001844b         db  0x38 ; '8'
000000000001844c         db  0x41 ; 'A'
000000000001844d         db  0x0e ; '.'
000000000001844e         db  0x30 ; '0'
000000000001844f         db  0x41 ; 'A'
0000000000018450         db  0x0e ; '.'
0000000000018451         db  0x28 ; '('
0000000000018452         db  0x42 ; 'B'
0000000000018453         db  0x0e ; '.'
0000000000018454         db  0x20 ; ' '
0000000000018455         db  0x42 ; 'B'
0000000000018456         db  0x0e ; '.'
0000000000018457         db  0x18 ; '.'
0000000000018458         db  0x42 ; 'B'
0000000000018459         db  0x0e ; '.'
000000000001845a         db  0x10 ; '.'
000000000001845b         db  0x42 ; 'B'
000000000001845c         db  0x0e ; '.'
000000000001845d         db  0x08 ; '.'
000000000001845e         db  0x47 ; 'G'
000000000001845f         db  0x0b ; '.'
0000000000018460         dd         0x0000004c                                  ; Length of the record
0000000000018464         dd         0x00001dfc                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000018468         db         0xa8, 0xa0, 2 dup (0xff)                    ; begin 0x12510
000000000001846c         db         0x7f, 0x01, 2 dup (0x00)                    ; length 0x17f (end at 0x1268f)
0000000000018470         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018471         db  0x42 ; 'B'
0000000000018472         db  0x0e ; '.'
0000000000018473         db  0x10 ; '.'
0000000000018474         db  0x8f ; '.'
0000000000018475         db  0x02 ; '.'
0000000000018476         db  0x42 ; 'B'
0000000000018477         db  0x0e ; '.'
0000000000018478         db  0x18 ; '.'
0000000000018479         db  0x8e ; '.'
000000000001847a         db  0x03 ; '.'
000000000001847b         db  0x45 ; 'E'
000000000001847c         db  0x0e ; '.'
000000000001847d         db  0x20 ; ' '
000000000001847e         db  0x8d ; '.'
000000000001847f         db  0x04 ; '.'
0000000000018480         db  0x42 ; 'B'
0000000000018481         db  0x0e ; '.'
0000000000018482         db  0x28 ; '('
0000000000018483         db  0x8c ; '.'
0000000000018484         db  0x05 ; '.'
0000000000018485         db  0x44 ; 'D'
0000000000018486         db  0x0e ; '.'
0000000000018487         db  0x30 ; '0'
0000000000018488         db  0x86 ; '.'
0000000000018489         db  0x06 ; '.'
000000000001848a         db  0x41 ; 'A'
000000000001848b         db  0x0e ; '.'
000000000001848c         db  0x38 ; '8'
000000000001848d         db  0x83 ; '.'
000000000001848e         db  0x07 ; '.'
000000000001848f         db  0x4a ; 'J'
0000000000018490         db  0x0e ; '.'
0000000000018491         db  0x90 ; '.'
0000000000018492         db  0x01 ; '.'
0000000000018493         db  0x03 ; '.'
0000000000018494         db  0x45 ; 'E'
0000000000018495         db  0x01 ; '.'
0000000000018496         db  0x0a ; '.'
0000000000018497         db  0x0e ; '.'
0000000000018498         db  0x38 ; '8'
0000000000018499         db  0x41 ; 'A'
000000000001849a         db  0x0e ; '.'
000000000001849b         db  0x30 ; '0'
000000000001849c         db  0x41 ; 'A'
000000000001849d         db  0x0e ; '.'
000000000001849e         db  0x28 ; '('
000000000001849f         db  0x42 ; 'B'
00000000000184a0         db  0x0e ; '.'
00000000000184a1         db  0x20 ; ' '
00000000000184a2         db  0x42 ; 'B'
00000000000184a3         db  0x0e ; '.'
00000000000184a4         db  0x18 ; '.'
00000000000184a5         db  0x42 ; 'B'
00000000000184a6         db  0x0e ; '.'
00000000000184a7         db  0x10 ; '.'
00000000000184a8         db  0x42 ; 'B'
00000000000184a9         db  0x0e ; '.'
00000000000184aa         db  0x08 ; '.'
00000000000184ab         db  0x47 ; 'G'
00000000000184ac         db  0x0b ; '.'
00000000000184ad         db  0x00 ; '.'
00000000000184ae         db  0x00 ; '.'
00000000000184af         db  0x00 ; '.'
00000000000184b0         dd         0x0000004c                                  ; Length of the record
00000000000184b4         dd         0x00001e4c                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
00000000000184b8         db         0xd8, 0xa1, 2 dup (0xff)                    ; begin 0x12690
00000000000184bc         db         0xf5, 0x10, 2 dup (0x00)                    ; length 0x10f5 (end at 0x13785)
00000000000184c0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000184c1         db  0x42 ; 'B'
00000000000184c2         db  0x0e ; '.'
00000000000184c3         db  0x10 ; '.'
00000000000184c4         db  0x8f ; '.'
00000000000184c5         db  0x02 ; '.'
00000000000184c6         db  0x42 ; 'B'
00000000000184c7         db  0x0e ; '.'
00000000000184c8         db  0x18 ; '.'
00000000000184c9         db  0x8e ; '.'
00000000000184ca         db  0x03 ; '.'
00000000000184cb         db  0x42 ; 'B'
00000000000184cc         db  0x0e ; '.'
00000000000184cd         db  0x20 ; ' '
00000000000184ce         db  0x8d ; '.'
00000000000184cf         db  0x04 ; '.'
00000000000184d0         db  0x42 ; 'B'
00000000000184d1         db  0x0e ; '.'
00000000000184d2         db  0x28 ; '('
00000000000184d3         db  0x8c ; '.'
00000000000184d4         db  0x05 ; '.'
00000000000184d5         db  0x41 ; 'A'
00000000000184d6         db  0x0e ; '.'
00000000000184d7         db  0x30 ; '0'
00000000000184d8         db  0x86 ; '.'
00000000000184d9         db  0x06 ; '.'
00000000000184da         db  0x41 ; 'A'
00000000000184db         db  0x0e ; '.'
00000000000184dc         db  0x38 ; '8'
00000000000184dd         db  0x83 ; '.'
00000000000184de         db  0x07 ; '.'
00000000000184df         db  0x47 ; 'G'
00000000000184e0         db  0x0e ; '.'
00000000000184e1         db  0xe0 ; '.'
00000000000184e2         db  0x02 ; '.'
00000000000184e3         db  0x03 ; '.'
00000000000184e4         db  0xa9 ; '.'
00000000000184e5         db  0x03 ; '.'
00000000000184e6         db  0x0a ; '.'
00000000000184e7         db  0x0e ; '.'
00000000000184e8         db  0x38 ; '8'
00000000000184e9         db  0x41 ; 'A'
00000000000184ea         db  0x0e ; '.'
00000000000184eb         db  0x30 ; '0'
00000000000184ec         db  0x41 ; 'A'
00000000000184ed         db  0x0e ; '.'
00000000000184ee         db  0x28 ; '('
00000000000184ef         db  0x42 ; 'B'
00000000000184f0         db  0x0e ; '.'
00000000000184f1         db  0x20 ; ' '
00000000000184f2         db  0x42 ; 'B'
00000000000184f3         db  0x0e ; '.'
00000000000184f4         db  0x18 ; '.'
00000000000184f5         db  0x42 ; 'B'
00000000000184f6         db  0x0e ; '.'
00000000000184f7         db  0x10 ; '.'
00000000000184f8         db  0x42 ; 'B'
00000000000184f9         db  0x0e ; '.'
00000000000184fa         db  0x08 ; '.'
00000000000184fb         db  0x41 ; 'A'
00000000000184fc         db  0x0b ; '.'
00000000000184fd         db  0x00 ; '.'
00000000000184fe         db  0x00 ; '.'
00000000000184ff         db  0x00 ; '.'
0000000000018500         dd         0x0000001c                                  ; Length of the record
0000000000018504         dd         0x00001e9c                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000018508         db         0x88, 0xb2, 2 dup (0xff)                    ; begin 0x13790
000000000001850c         db         0x6f, 3 dup (0x00)                          ; length 0x6f (end at 0x137ff)
0000000000018510         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018511         db  0x44 ; 'D'
0000000000018512         db  0x0e ; '.'
0000000000018513         db  0x10 ; '.'
0000000000018514         db  0x02 ; '.'
0000000000018515         db  0x59 ; 'Y'
0000000000018516         db  0x0a ; '.'
0000000000018517         db  0x0e ; '.'
0000000000018518         db  0x08 ; '.'
0000000000018519         db  0x4b ; 'K'
000000000001851a         db  0x0b ; '.'
000000000001851b         db  0x46 ; 'F'
000000000001851c         db  0x0e ; '.'
000000000001851d         db  0x08 ; '.'
000000000001851e         db  0x00 ; '.'
000000000001851f         db  0x00 ; '.'
0000000000018520         dd         0x00000010                                  ; Length of the record
0000000000018524         dd         0x00001ebc                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000018528         db         0xd8, 0xb2, 2 dup (0xff)                    ; begin 0x13800
000000000001852c         db         0x0f, 3 dup (0x00)                          ; length 0xf (end at 0x1380f)
0000000000018530         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018531         align      4
0000000000018534         dd         0x00000028                                  ; Length of the record
0000000000018538         dd         0x00001ed0                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
000000000001853c         db         0xd4, 0xb2, 2 dup (0xff)                    ; begin 0x13810
0000000000018540         db         0xc3, 3 dup (0x00)                          ; length 0xc3 (end at 0x138d3)
0000000000018544         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018545         db  0x42 ; 'B'
0000000000018546         db  0x0e ; '.'
0000000000018547         db  0x10 ; '.'
0000000000018548         db  0x8c ; '.'
0000000000018549         db  0x02 ; '.'
000000000001854a         db  0x41 ; 'A'
000000000001854b         db  0x0e ; '.'
000000000001854c         db  0x18 ; '.'
000000000001854d         db  0x86 ; '.'
000000000001854e         db  0x03 ; '.'
000000000001854f         db  0x43 ; 'C'
0000000000018550         db  0x0e ; '.'
0000000000018551         db  0x20 ; ' '
0000000000018552         db  0x83 ; '.'
0000000000018553         db  0x04 ; '.'
0000000000018554         db  0x02 ; '.'
0000000000018555         db  0xb9 ; '.'
0000000000018556         db  0x0e ; '.'
0000000000018557         db  0x18 ; '.'
0000000000018558         db  0x41 ; 'A'
0000000000018559         db  0x0e ; '.'
000000000001855a         db  0x10 ; '.'
000000000001855b         db  0x42 ; 'B'
000000000001855c         db  0x0e ; '.'
000000000001855d         db  0x08 ; '.'
000000000001855e         db  0x00 ; '.'
000000000001855f         db  0x00 ; '.'
0000000000018560         dd         0x0000005c                                  ; Length of the record
0000000000018564         dd         0x00001efc                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000018568         db         0x78, 0xb3, 2 dup (0xff)                    ; begin 0x138e0
000000000001856c         db         0x7f, 0x04, 2 dup (0x00)                    ; length 0x47f (end at 0x13d5f)
0000000000018570         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018571         db  0x42 ; 'B'
0000000000018572         db  0x0e ; '.'
0000000000018573         db  0x10 ; '.'
0000000000018574         db  0x8f ; '.'
0000000000018575         db  0x02 ; '.'
0000000000018576         db  0x42 ; 'B'
0000000000018577         db  0x0e ; '.'
0000000000018578         db  0x18 ; '.'
0000000000018579         db  0x8e ; '.'
000000000001857a         db  0x03 ; '.'
000000000001857b         db  0x45 ; 'E'
000000000001857c         db  0x0e ; '.'
000000000001857d         db  0x20 ; ' '
000000000001857e         db  0x8d ; '.'
000000000001857f         db  0x04 ; '.'
0000000000018580         db  0x42 ; 'B'
0000000000018581         db  0x0e ; '.'
0000000000018582         db  0x28 ; '('
0000000000018583         db  0x8c ; '.'
0000000000018584         db  0x05 ; '.'
0000000000018585         db  0x44 ; 'D'
0000000000018586         db  0x0e ; '.'
0000000000018587         db  0x30 ; '0'
0000000000018588         db  0x86 ; '.'
0000000000018589         db  0x06 ; '.'
000000000001858a         db  0x41 ; 'A'
000000000001858b         db  0x0e ; '.'
000000000001858c         db  0x38 ; '8'
000000000001858d         db  0x83 ; '.'
000000000001858e         db  0x07 ; '.'
000000000001858f         db  0x44 ; 'D'
0000000000018590         db  0x0e ; '.'
0000000000018591         db  0x70 ; 'p'
0000000000018592         db  0x02 ; '.'
0000000000018593         db  0xd4 ; '.'
0000000000018594         db  0x0e ; '.'
0000000000018595         db  0x78 ; 'x'
0000000000018596         db  0x4b ; 'K'
0000000000018597         db  0x0e ; '.'
0000000000018598         db  0x80 ; '.'
0000000000018599         db  0x01 ; '.'
000000000001859a         db  0x41 ; 'A'
000000000001859b         db  0x0e ; '.'
000000000001859c         db  0x88 ; '.'
000000000001859d         db  0x01 ; '.'
000000000001859e         db  0x42 ; 'B'
000000000001859f         db  0x0e ; '.'
00000000000185a0         db  0x90 ; '.'
00000000000185a1         db  0x01 ; '.'
00000000000185a2         db  0x5d ; ']'
00000000000185a3         db  0x0e ; '.'
00000000000185a4         db  0x70 ; 'p'
00000000000185a5         db  0x63 ; 'c'
00000000000185a6         db  0x0a ; '.'
00000000000185a7         db  0x0e ; '.'
00000000000185a8         db  0x38 ; '8'
00000000000185a9         db  0x44 ; 'D'
00000000000185aa         db  0x0e ; '.'
00000000000185ab         db  0x30 ; '0'
00000000000185ac         db  0x41 ; 'A'
00000000000185ad         db  0x0e ; '.'
00000000000185ae         db  0x28 ; '('
00000000000185af         db  0x42 ; 'B'
00000000000185b0         db  0x0e ; '.'
00000000000185b1         db  0x20 ; ' '
00000000000185b2         db  0x42 ; 'B'
00000000000185b3         db  0x0e ; '.'
00000000000185b4         db  0x18 ; '.'
00000000000185b5         db  0x42 ; 'B'
00000000000185b6         db  0x0e ; '.'
00000000000185b7         db  0x10 ; '.'
00000000000185b8         db  0x42 ; 'B'
00000000000185b9         db  0x0e ; '.'
00000000000185ba         db  0x08 ; '.'
00000000000185bb         db  0x45 ; 'E'
00000000000185bc         db  0x0b ; '.'
00000000000185bd         db  0x00 ; '.'
00000000000185be         db  0x00 ; '.'
00000000000185bf         db  0x00 ; '.'
00000000000185c0         dd         0x00000054                                  ; Length of the record
00000000000185c4         dd         0x00001f5c                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
00000000000185c8         db         0x98, 0xb7, 2 dup (0xff)                    ; begin 0x13d60
00000000000185cc         db         0x1b, 0x01, 2 dup (0x00)                    ; length 0x11b (end at 0x13e7b)
00000000000185d0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000185d1         db  0x42 ; 'B'
00000000000185d2         db  0x0e ; '.'
00000000000185d3         db  0x10 ; '.'
00000000000185d4         db  0x8f ; '.'
00000000000185d5         db  0x02 ; '.'
00000000000185d6         db  0x42 ; 'B'
00000000000185d7         db  0x0e ; '.'
00000000000185d8         db  0x18 ; '.'
00000000000185d9         db  0x8e ; '.'
00000000000185da         db  0x03 ; '.'
00000000000185db         db  0x42 ; 'B'
00000000000185dc         db  0x0e ; '.'
00000000000185dd         db  0x20 ; ' '
00000000000185de         db  0x8d ; '.'
00000000000185df         db  0x04 ; '.'
00000000000185e0         db  0x42 ; 'B'
00000000000185e1         db  0x0e ; '.'
00000000000185e2         db  0x28 ; '('
00000000000185e3         db  0x8c ; '.'
00000000000185e4         db  0x05 ; '.'
00000000000185e5         db  0x44 ; 'D'
00000000000185e6         db  0x0e ; '.'
00000000000185e7         db  0x30 ; '0'
00000000000185e8         db  0x86 ; '.'
00000000000185e9         db  0x06 ; '.'
00000000000185ea         db  0x41 ; 'A'
00000000000185eb         db  0x0e ; '.'
00000000000185ec         db  0x38 ; '8'
00000000000185ed         db  0x83 ; '.'
00000000000185ee         db  0x07 ; '.'
00000000000185ef         db  0x4d ; 'M'
00000000000185f0         db  0x0e ; '.'
00000000000185f1         db  0x60 ; '`'
00000000000185f2         db  0x02 ; '.'
00000000000185f3         db  0x5a ; 'Z'
00000000000185f4         db  0x0e ; '.'
00000000000185f5         db  0x68 ; 'h'
00000000000185f6         db  0x44 ; 'D'
00000000000185f7         db  0x0e ; '.'
00000000000185f8         db  0x70 ; 'p'
00000000000185f9         db  0x61 ; 'a'
00000000000185fa         db  0x0e ; '.'
00000000000185fb         db  0x68 ; 'h'
00000000000185fc         db  0x41 ; 'A'
00000000000185fd         db  0x0e ; '.'
00000000000185fe         db  0x60 ; '`'
00000000000185ff         db  0x44 ; 'D'
0000000000018600         db  0x0a ; '.'
0000000000018601         db  0x0e ; '.'
0000000000018602         db  0x38 ; '8'
0000000000018603         db  0x44 ; 'D'
0000000000018604         db  0x0e ; '.'
0000000000018605         db  0x30 ; '0'
0000000000018606         db  0x41 ; 'A'
0000000000018607         db  0x0e ; '.'
0000000000018608         db  0x28 ; '('
0000000000018609         db  0x42 ; 'B'
000000000001860a         db  0x0e ; '.'
000000000001860b         db  0x20 ; ' '
000000000001860c         db  0x42 ; 'B'
000000000001860d         db  0x0e ; '.'
000000000001860e         db  0x18 ; '.'
000000000001860f         db  0x42 ; 'B'
0000000000018610         db  0x0e ; '.'
0000000000018611         db  0x10 ; '.'
0000000000018612         db  0x42 ; 'B'
0000000000018613         db  0x0e ; '.'
0000000000018614         db  0x08 ; '.'
0000000000018615         db  0x45 ; 'E'
0000000000018616         db  0x0b ; '.'
0000000000018617         db  0x00 ; '.'
0000000000018618         dd         0x00000048                                  ; Length of the record
000000000001861c         dd         0x00001fb4                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000018620         db         0x60, 0xb8, 2 dup (0xff)                    ; begin 0x13e80
0000000000018624         db         0x10, 0x01, 2 dup (0x00)                    ; length 0x110 (end at 0x13f90)
0000000000018628         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018629         db  0x44 ; 'D'
000000000001862a         db  0x0e ; '.'
000000000001862b         db  0x10 ; '.'
000000000001862c         db  0x8e ; '.'
000000000001862d         db  0x02 ; '.'
000000000001862e         db  0x42 ; 'B'
000000000001862f         db  0x0e ; '.'
0000000000018630         db  0x18 ; '.'
0000000000018631         db  0x8d ; '.'
0000000000018632         db  0x03 ; '.'
0000000000018633         db  0x45 ; 'E'
0000000000018634         db  0x0e ; '.'
0000000000018635         db  0x20 ; ' '
0000000000018636         db  0x8c ; '.'
0000000000018637         db  0x04 ; '.'
0000000000018638         db  0x41 ; 'A'
0000000000018639         db  0x0e ; '.'
000000000001863a         db  0x28 ; '('
000000000001863b         db  0x86 ; '.'
000000000001863c         db  0x05 ; '.'
000000000001863d         db  0x44 ; 'D'
000000000001863e         db  0x0e ; '.'
000000000001863f         db  0x30 ; '0'
0000000000018640         db  0x83 ; '.'
0000000000018641         db  0x06 ; '.'
0000000000018642         db  0x02 ; '.'
0000000000018643         db  0xad ; '.'
0000000000018644         db  0x0a ; '.'
0000000000018645         db  0x0e ; '.'
0000000000018646         db  0x28 ; '('
0000000000018647         db  0x43 ; 'C'
0000000000018648         db  0x0e ; '.'
0000000000018649         db  0x20 ; ' '
000000000001864a         db  0x42 ; 'B'
000000000001864b         db  0x0e ; '.'
000000000001864c         db  0x18 ; '.'
000000000001864d         db  0x42 ; 'B'
000000000001864e         db  0x0e ; '.'
000000000001864f         db  0x10 ; '.'
0000000000018650         db  0x42 ; 'B'
0000000000018651         db  0x0e ; '.'
0000000000018652         db  0x08 ; '.'
0000000000018653         db  0x4a ; 'J'
0000000000018654         db  0x0b ; '.'
0000000000018655         db  0x76 ; 'v'
0000000000018656         db  0x0e ; '.'
0000000000018657         db  0x28 ; '('
0000000000018658         db  0x43 ; 'C'
0000000000018659         db  0x0e ; '.'
000000000001865a         db  0x20 ; ' '
000000000001865b         db  0x42 ; 'B'
000000000001865c         db  0x0e ; '.'
000000000001865d         db  0x18 ; '.'
000000000001865e         db  0x42 ; 'B'
000000000001865f         db  0x0e ; '.'
0000000000018660         db  0x10 ; '.'
0000000000018661         db  0x42 ; 'B'
0000000000018662         db  0x0e ; '.'
0000000000018663         db  0x08 ; '.'
0000000000018664         dd         0x00000038                                  ; Length of the record
0000000000018668         dd         0x00002000                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
000000000001866c         db         0x24, 0xb9, 2 dup (0xff)                    ; begin 0x13f90
0000000000018670         db         0x85, 3 dup (0x00)                          ; length 0x85 (end at 0x14015)
0000000000018674         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018675         db  0x42 ; 'B'
0000000000018676         db  0x0e ; '.'
0000000000018677         db  0x10 ; '.'
0000000000018678         db  0x8d ; '.'
0000000000018679         db  0x02 ; '.'
000000000001867a         db  0x42 ; 'B'
000000000001867b         db  0x0e ; '.'
000000000001867c         db  0x18 ; '.'
000000000001867d         db  0x8c ; '.'
000000000001867e         db  0x03 ; '.'
000000000001867f         db  0x41 ; 'A'
0000000000018680         db  0x0e ; '.'
0000000000018681         db  0x20 ; ' '
0000000000018682         db  0x86 ; '.'
0000000000018683         db  0x04 ; '.'
0000000000018684         db  0x41 ; 'A'
0000000000018685         db  0x0e ; '.'
0000000000018686         db  0x28 ; '('
0000000000018687         db  0x83 ; '.'
0000000000018688         db  0x05 ; '.'
0000000000018689         db  0x44 ; 'D'
000000000001868a         db  0x0e ; '.'
000000000001868b         db  0x30 ; '0'
000000000001868c         db  0x02 ; '.'
000000000001868d         db  0x57 ; 'W'
000000000001868e         db  0x0a ; '.'
000000000001868f         db  0x0e ; '.'
0000000000018690         db  0x28 ; '('
0000000000018691         db  0x44 ; 'D'
0000000000018692         db  0x0e ; '.'
0000000000018693         db  0x20 ; ' '
0000000000018694         db  0x41 ; 'A'
0000000000018695         db  0x0e ; '.'
0000000000018696         db  0x18 ; '.'
0000000000018697         db  0x42 ; 'B'
0000000000018698         db  0x0e ; '.'
0000000000018699         db  0x10 ; '.'
000000000001869a         db  0x42 ; 'B'
000000000001869b         db  0x0e ; '.'
000000000001869c         db  0x08 ; '.'
000000000001869d         db  0x46 ; 'F'
000000000001869e         db  0x0b ; '.'
000000000001869f         db  0x00 ; '.'
00000000000186a0         dd         0x00000018                                  ; Length of the record
00000000000186a4         dd         0x0000203c                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
00000000000186a8         db         0x78, 0xb9, 2 dup (0xff)                    ; begin 0x14020
00000000000186ac         db         0x44, 3 dup (0x00)                          ; length 0x44 (end at 0x14064)
00000000000186b0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000186b1         db  0x41 ; 'A'
00000000000186b2         db  0x0e ; '.'
00000000000186b3         db  0x10 ; '.'
00000000000186b4         db  0x83 ; '.'
00000000000186b5         db  0x02 ; '.'
00000000000186b6         db  0x02 ; '.'
00000000000186b7         db  0x42 ; 'B'
00000000000186b8         db  0x0e ; '.'
00000000000186b9         db  0x08 ; '.'
00000000000186ba         db  0x00 ; '.'
00000000000186bb         db  0x00 ; '.'
00000000000186bc         dd         0x00000058                                  ; Length of the record
00000000000186c0         dd         0x00002058                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
00000000000186c4         db         0xac, 0xb9, 2 dup (0xff)                    ; begin 0x14070
00000000000186c8         db         0x9e, 3 dup (0x00)                          ; length 0x9e (end at 0x1410e)
00000000000186cc         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000186cd         db  0x4f ; 'O'
00000000000186ce         db  0x0e ; '.'
00000000000186cf         db  0x10 ; '.'
00000000000186d0         db  0x8d ; '.'
00000000000186d1         db  0x02 ; '.'
00000000000186d2         db  0x42 ; 'B'
00000000000186d3         db  0x0e ; '.'
00000000000186d4         db  0x18 ; '.'
00000000000186d5         db  0x8c ; '.'
00000000000186d6         db  0x03 ; '.'
00000000000186d7         db  0x44 ; 'D'
00000000000186d8         db  0x0e ; '.'
00000000000186d9         db  0x20 ; ' '
00000000000186da         db  0x86 ; '.'
00000000000186db         db  0x04 ; '.'
00000000000186dc         db  0x41 ; 'A'
00000000000186dd         db  0x0e ; '.'
00000000000186de         db  0x28 ; '('
00000000000186df         db  0x83 ; '.'
00000000000186e0         db  0x05 ; '.'
00000000000186e1         db  0x4d ; 'M'
00000000000186e2         db  0x0e ; '.'
00000000000186e3         db  0x40 ; '@'
00000000000186e4         db  0x67 ; 'g'
00000000000186e5         db  0x0e ; '.'
00000000000186e6         db  0x48 ; 'H'
00000000000186e7         db  0x41 ; 'A'
00000000000186e8         db  0x0e ; '.'
00000000000186e9         db  0x50 ; 'P'
00000000000186ea         db  0x42 ; 'B'
00000000000186eb         db  0x0e ; '.'
00000000000186ec         db  0x58 ; 'X'
00000000000186ed         db  0x42 ; 'B'
00000000000186ee         db  0x0e ; '.'
00000000000186ef         db  0x60 ; '`'
00000000000186f0         db  0x52 ; 'R'
00000000000186f1         db  0x0e ; '.'
00000000000186f2         db  0x40 ; '@'
00000000000186f3         db  0x49 ; 'I'
00000000000186f4         db  0x0a ; '.'
00000000000186f5         db  0x0e ; '.'
00000000000186f6         db  0x28 ; '('
00000000000186f7         db  0x41 ; 'A'
00000000000186f8         db  0x0e ; '.'
00000000000186f9         db  0x20 ; ' '
00000000000186fa         db  0x44 ; 'D'
00000000000186fb         db  0x0e ; '.'
00000000000186fc         db  0x18 ; '.'
00000000000186fd         db  0x42 ; 'B'
00000000000186fe         db  0x0e ; '.'
00000000000186ff         db  0x10 ; '.'
0000000000018700         db  0x42 ; 'B'
0000000000018701         db  0x0e ; '.'
0000000000018702         db  0x08 ; '.'
0000000000018703         db  0x45 ; 'E'
0000000000018704         db  0x0b ; '.'
0000000000018705         db  0x52 ; 'R'
0000000000018706         db  0x0e ; '.'
0000000000018707         db  0x48 ; 'H'
0000000000018708         db  0x41 ; 'A'
0000000000018709         db  0x0e ; '.'
000000000001870a         db  0x50 ; 'P'
000000000001870b         db  0x42 ; 'B'
000000000001870c         db  0x0e ; '.'
000000000001870d         db  0x58 ; 'X'
000000000001870e         db  0x42 ; 'B'
000000000001870f         db  0x0e ; '.'
0000000000018710         db  0x60 ; '`'
0000000000018711         db  0x49 ; 'I'
0000000000018712         db  0x0e ; '.'
0000000000018713         db  0x08 ; '.'
0000000000018714         db  0xc3 ; '.'
0000000000018715         db  0xc6 ; '.'
0000000000018716         db  0xcc ; '.'
0000000000018717         db  0xcd ; '.'
0000000000018718         dd         0x0000001c                                  ; Length of the record
000000000001871c         dd         0x000020b4                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000018720         db         0xf0, 0xb9, 2 dup (0xff)                    ; begin 0x14110
0000000000018724         db         0x18, 3 dup (0x00)                          ; length 0x18 (end at 0x14128)
0000000000018728         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018729         db  0x44 ; 'D'
000000000001872a         db  0x0e ; '.'
000000000001872b         db  0x10 ; '.'
000000000001872c         db  0x45 ; 'E'
000000000001872d         db  0x0e ; '.'
000000000001872e         db  0x18 ; '.'
000000000001872f         db  0x42 ; 'B'
0000000000018730         db  0x0e ; '.'
0000000000018731         db  0x20 ; ' '
0000000000018732         db  0x4c ; 'L'
0000000000018733         db  0x0e ; '.'
0000000000018734         db  0x08 ; '.'
0000000000018735         db  0x00 ; '.'
0000000000018736         db  0x00 ; '.'
0000000000018737         db  0x00 ; '.'
0000000000018738         dd         0x0000001c                                  ; Length of the record
000000000001873c         dd         0x000020d4                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000018740         db         0xf0, 0xb9, 2 dup (0xff)                    ; begin 0x14130
0000000000018744         db         0x15, 3 dup (0x00)                          ; length 0x15 (end at 0x14145)
0000000000018748         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018749         db  0x44 ; 'D'
000000000001874a         db  0x0e ; '.'
000000000001874b         db  0x10 ; '.'
000000000001874c         db  0x42 ; 'B'
000000000001874d         db  0x0e ; '.'
000000000001874e         db  0x18 ; '.'
000000000001874f         db  0x42 ; 'B'
0000000000018750         db  0x0e ; '.'
0000000000018751         db  0x20 ; ' '
0000000000018752         db  0x4c ; 'L'
0000000000018753         db  0x0e ; '.'
0000000000018754         db  0x08 ; '.'
0000000000018755         db  0x00 ; '.'
0000000000018756         db  0x00 ; '.'
0000000000018757         db  0x00 ; '.'
0000000000018758         dd         0x00000020                                  ; Length of the record
000000000001875c         dd         0x000020f4                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000018760         db         0xf0, 0xb9, 2 dup (0xff)                    ; begin 0x14150
0000000000018764         db         0x1a, 3 dup (0x00)                          ; length 0x1a (end at 0x1416a)
0000000000018768         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018769         db  0x44 ; 'D'
000000000001876a         db  0x0e ; '.'
000000000001876b         db  0x10 ; '.'
000000000001876c         db  0x42 ; 'B'
000000000001876d         db  0x0e ; '.'
000000000001876e         db  0x18 ; '.'
000000000001876f         db  0x44 ; 'D'
0000000000018770         db  0x0e ; '.'
0000000000018771         db  0x20 ; ' '
0000000000018772         db  0x44 ; 'D'
0000000000018773         db  0x0e ; '.'
0000000000018774         db  0x28 ; '('
0000000000018775         db  0x42 ; 'B'
0000000000018776         db  0x0e ; '.'
0000000000018777         db  0x30 ; '0'
0000000000018778         db  0x49 ; 'I'
0000000000018779         db  0x0e ; '.'
000000000001877a         db  0x08 ; '.'
000000000001877b         db  0x00 ; '.'
000000000001877c         dd         0x00000020                                  ; Length of the record
0000000000018780         dd         0x00002118                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000018784         db         0xec, 0xb9, 2 dup (0xff)                    ; begin 0x14170
0000000000018788         db         0x1c, 3 dup (0x00)                          ; length 0x1c (end at 0x1418c)
000000000001878c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001878d         db  0x44 ; 'D'
000000000001878e         db  0x0e ; '.'
000000000001878f         db  0x10 ; '.'
0000000000018790         db  0x42 ; 'B'
0000000000018791         db  0x0e ; '.'
0000000000018792         db  0x18 ; '.'
0000000000018793         db  0x44 ; 'D'
0000000000018794         db  0x0e ; '.'
0000000000018795         db  0x20 ; ' '
0000000000018796         db  0x44 ; 'D'
0000000000018797         db  0x0e ; '.'
0000000000018798         db  0x28 ; '('
0000000000018799         db  0x44 ; 'D'
000000000001879a         db  0x0e ; '.'
000000000001879b         db  0x30 ; '0'
000000000001879c         db  0x49 ; 'I'
000000000001879d         db  0x0e ; '.'
000000000001879e         db  0x08 ; '.'
000000000001879f         db  0x00 ; '.'
00000000000187a0         dd         0x00000014                                  ; Length of the record
00000000000187a4         dd         0x0000213c                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
00000000000187a8         db         0xe8, 0xb9, 2 dup (0xff)                    ; begin 0x14190
00000000000187ac         db         0x41, 3 dup (0x00)                          ; length 0x41 (end at 0x141d1)
00000000000187b0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000187b1         align      8
00000000000187b8         dd         0x0000004c                                  ; Length of the record
00000000000187bc         dd         0x00002154                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
00000000000187c0         db         0x20, 0xba, 2 dup (0xff)                    ; begin 0x141e0
00000000000187c4         db         0x7d, 3 dup (0x00)                          ; length 0x7d (end at 0x1425d)
00000000000187c8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000187c9         db  0x42 ; 'B'
00000000000187ca         db  0x0e ; '.'
00000000000187cb         db  0x10 ; '.'
00000000000187cc         db  0x8c ; '.'
00000000000187cd         db  0x02 ; '.'
00000000000187ce         db  0x41 ; 'A'
00000000000187cf         db  0x0e ; '.'
00000000000187d0         db  0x18 ; '.'
00000000000187d1         db  0x86 ; '.'
00000000000187d2         db  0x03 ; '.'
00000000000187d3         db  0x44 ; 'D'
00000000000187d4         db  0x0e ; '.'
00000000000187d5         db  0x20 ; ' '
00000000000187d6         db  0x83 ; '.'
00000000000187d7         db  0x04 ; '.'
00000000000187d8         db  0x69 ; 'i'
00000000000187d9         db  0x0a ; '.'
00000000000187da         db  0x0e ; '.'
00000000000187db         db  0x18 ; '.'
00000000000187dc         db  0x41 ; 'A'
00000000000187dd         db  0x0e ; '.'
00000000000187de         db  0x10 ; '.'
00000000000187df         db  0x42 ; 'B'
00000000000187e0         db  0x0e ; '.'
00000000000187e1         db  0x08 ; '.'
00000000000187e2         db  0x45 ; 'E'
00000000000187e3         db  0x0b ; '.'
00000000000187e4         db  0x55 ; 'U'
00000000000187e5         db  0x0a ; '.'
00000000000187e6         db  0x0e ; '.'
00000000000187e7         db  0x18 ; '.'
00000000000187e8         db  0x41 ; 'A'
00000000000187e9         db  0x0e ; '.'
00000000000187ea         db  0x10 ; '.'
00000000000187eb         db  0x42 ; 'B'
00000000000187ec         db  0x0e ; '.'
00000000000187ed         db  0x08 ; '.'
00000000000187ee         db  0x48 ; 'H'
00000000000187ef         db  0x0b ; '.'
00000000000187f0         db  0x41 ; 'A'
00000000000187f1         db  0x0a ; '.'
00000000000187f2         db  0x0e ; '.'
00000000000187f3         db  0x18 ; '.'
00000000000187f4         db  0x46 ; 'F'
00000000000187f5         db  0x0e ; '.'
00000000000187f6         db  0x10 ; '.'
00000000000187f7         db  0x42 ; 'B'
00000000000187f8         db  0x0e ; '.'
00000000000187f9         db  0x08 ; '.'
00000000000187fa         db  0x47 ; 'G'
00000000000187fb         db  0x0b ; '.'
00000000000187fc         db  0x49 ; 'I'
00000000000187fd         db  0x0e ; '.'
00000000000187fe         db  0x18 ; '.'
00000000000187ff         db  0x41 ; 'A'
0000000000018800         db  0x0e ; '.'
0000000000018801         db  0x10 ; '.'
0000000000018802         db  0x42 ; 'B'
0000000000018803         db  0x0e ; '.'
0000000000018804         db  0x08 ; '.'
0000000000018805         db  0x00 ; '.'
0000000000018806         db  0x00 ; '.'
0000000000018807         db  0x00 ; '.'
0000000000018808         dd         0x0000001c                                  ; Length of the record
000000000001880c         dd         0x000021a4                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000018810         db         0x50, 0xba, 2 dup (0xff)                    ; begin 0x14260
0000000000018814         db         0x60, 3 dup (0x00)                          ; length 0x60 (end at 0x142c0)
0000000000018818         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018819         db  0x44 ; 'D'
000000000001881a         db  0x0e ; '.'
000000000001881b         db  0x10 ; '.'
000000000001881c         db  0x75 ; 'u'
000000000001881d         db  0x0a ; '.'
000000000001881e         db  0x0e ; '.'
000000000001881f         db  0x08 ; '.'
0000000000018820         db  0x47 ; 'G'
0000000000018821         db  0x0b ; '.'
0000000000018822         db  0x5f ; '_'
0000000000018823         db  0x0e ; '.'
0000000000018824         db  0x08 ; '.'
0000000000018825         db  0x00 ; '.'
0000000000018826         db  0x00 ; '.'
0000000000018827         db  0x00 ; '.'
0000000000018828         dd         0x0000001c                                  ; Length of the record
000000000001882c         dd         0x000021c4                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000018830         db         0x90, 0xba, 2 dup (0xff)                    ; begin 0x142c0
0000000000018834         db         0x3c, 3 dup (0x00)                          ; length 0x3c (end at 0x142fc)
0000000000018838         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018839         db  0x44 ; 'D'
000000000001883a         db  0x0e ; '.'
000000000001883b         db  0x10 ; '.'
000000000001883c         db  0x61 ; 'a'
000000000001883d         db  0x0a ; '.'
000000000001883e         db  0x0e ; '.'
000000000001883f         db  0x08 ; '.'
0000000000018840         db  0x4b ; 'K'
0000000000018841         db  0x0b ; '.'
0000000000018842         db  0x4b ; 'K'
0000000000018843         db  0x0e ; '.'
0000000000018844         db  0x08 ; '.'
0000000000018845         db  0x00 ; '.'
0000000000018846         db  0x00 ; '.'
0000000000018847         db  0x00 ; '.'
0000000000018848         dd         0x00000044                                  ; Length of the record
000000000001884c         dd         0x000021e4                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000018850         db         0xb0, 0xba, 2 dup (0xff)                    ; begin 0x14300
0000000000018854         db         0x65, 3 dup (0x00)                          ; length 0x65 (end at 0x14365)
0000000000018858         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018859         db  0x42 ; 'B'
000000000001885a         db  0x0e ; '.'
000000000001885b         db  0x10 ; '.'
000000000001885c         db  0x8f ; '.'
000000000001885d         db  0x02 ; '.'
000000000001885e         db  0x42 ; 'B'
000000000001885f         db  0x0e ; '.'
0000000000018860         db  0x18 ; '.'
0000000000018861         db  0x8e ; '.'
0000000000018862         db  0x03 ; '.'
0000000000018863         db  0x45 ; 'E'
0000000000018864         db  0x0e ; '.'
0000000000018865         db  0x20 ; ' '
0000000000018866         db  0x8d ; '.'
0000000000018867         db  0x04 ; '.'
0000000000018868         db  0x42 ; 'B'
0000000000018869         db  0x0e ; '.'
000000000001886a         db  0x28 ; '('
000000000001886b         db  0x8c ; '.'
000000000001886c         db  0x05 ; '.'
000000000001886d         db  0x48 ; 'H'
000000000001886e         db  0x0e ; '.'
000000000001886f         db  0x30 ; '0'
0000000000018870         db  0x86 ; '.'
0000000000018871         db  0x06 ; '.'
0000000000018872         db  0x48 ; 'H'
0000000000018873         db  0x0e ; '.'
0000000000018874         db  0x38 ; '8'
0000000000018875         db  0x83 ; '.'
0000000000018876         db  0x07 ; '.'
0000000000018877         db  0x4d ; 'M'
0000000000018878         db  0x0e ; '.'
0000000000018879         db  0x40 ; '@'
000000000001887a         db  0x72 ; 'r'
000000000001887b         db  0x0e ; '.'
000000000001887c         db  0x38 ; '8'
000000000001887d         db  0x41 ; 'A'
000000000001887e         db  0x0e ; '.'
000000000001887f         db  0x30 ; '0'
0000000000018880         db  0x41 ; 'A'
0000000000018881         db  0x0e ; '.'
0000000000018882         db  0x28 ; '('
0000000000018883         db  0x42 ; 'B'
0000000000018884         db  0x0e ; '.'
0000000000018885         db  0x20 ; ' '
0000000000018886         db  0x42 ; 'B'
0000000000018887         db  0x0e ; '.'
0000000000018888         db  0x18 ; '.'
0000000000018889         db  0x42 ; 'B'
000000000001888a         db  0x0e ; '.'
000000000001888b         db  0x10 ; '.'
000000000001888c         db  0x42 ; 'B'
000000000001888d         db  0x0e ; '.'
000000000001888e         db  0x08 ; '.'
000000000001888f         db  0x00 ; '.'
0000000000018890         dd         0x00000014                                  ; Length of the record
0000000000018894         dd         0x0000222c                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
0000000000018898         db         0xd8, 0xba, 2 dup (0xff)                    ; begin 0x14370
000000000001889c         db         0x02, 3 dup (0x00)                          ; length 0x2 (end at 0x14372)
00000000000188a0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000188a1         align      8
00000000000188a8         dd         0x00000010                                  ; Length of the record
00000000000188ac         dd         0x00002244                                  ; FDE: parent CIE at 0x16668 (FDE encoding = 0x1B)
00000000000188b0         db         0xd0, 0xba, 2 dup (0xff)                    ; begin 0x14380
00000000000188b4         db         0x0e, 3 dup (0x00)                          ; length 0xe (end at 0x1438e)
00000000000188b8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000188b9         align      64


        ; Segment Segment 3
        ; Range: [0x2189b0; 0x2196e0[ (3376 bytes)
        ; File offset : [100784; 102624[ (1840 bytes)
        ; Permissions: readable / writable
        ; Flags: 0x6



        ; Section .init_array
        ; Range: [0x2189b0; 0x2189b8[ (8 bytes)
        ; File offset : [100784; 100792[ (8 bytes)
        ; Flags: 0x3
        ;   SHT_FINI_ARRAY
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     __frame_dummy_init_array_entry:
00000000002189b0         dq         frame_dummy                                 ; DATA XREF=__libc_csu_init+11


        ; Section .fini_array
        ; Range: [0x2189b8; 0x2189c0[ (8 bytes)
        ; File offset : [100792; 100800[ (8 bytes)
        ; Flags: 0x3
        ;   SHT_PREINIT_ARRAY
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     __do_global_dtors_aux_fini_array_entry:
00000000002189b8         dq         __do_global_dtors_aux                       ; DATA XREF=__libc_csu_init+19


        ; Section .data.rel.ro
        ; Range: [0x2189c0; 0x218bd8[ (536 bytes)
        ; File offset : [100800; 101336[ (536 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     longopts:
00000000002189c0         db  0xef ; '.'                                         ; DATA XREF=main+29
00000000002189c1         db  0x44 ; 'D'
00000000002189c2         db  0x01 ; '.'
00000000002189c3         db  0x00 ; '.'
00000000002189c4         db  0x00 ; '.'
00000000002189c5         db  0x00 ; '.'
00000000002189c6         db  0x00 ; '.'
00000000002189c7         db  0x00 ; '.'
00000000002189c8         db  0x01 ; '.'
00000000002189c9         db  0x00 ; '.'
00000000002189ca         db  0x00 ; '.'
00000000002189cb         db  0x00 ; '.'
00000000002189cc         db  0x00 ; '.'
00000000002189cd         db  0x00 ; '.'
00000000002189ce         db  0x00 ; '.'
00000000002189cf         db  0x00 ; '.'
00000000002189d0         db  0x00 ; '.'
00000000002189d1         db  0x00 ; '.'
00000000002189d2         db  0x00 ; '.'
00000000002189d3         db  0x00 ; '.'
00000000002189d4         db  0x00 ; '.'
00000000002189d5         db  0x00 ; '.'
00000000002189d6         db  0x00 ; '.'
00000000002189d7         db  0x00 ; '.'
00000000002189d8         db  0x68 ; 'h'
00000000002189d9         db  0x00 ; '.'
00000000002189da         db  0x00 ; '.'
00000000002189db         db  0x00 ; '.'
00000000002189dc         db  0x00 ; '.'
00000000002189dd         db  0x00 ; '.'
00000000002189de         db  0x00 ; '.'
00000000002189df         db  0x00 ; '.'
00000000002189e0         db  0x00 ; '.'
00000000002189e1         db  0x45 ; 'E'
00000000002189e2         db  0x01 ; '.'
00000000002189e3         db  0x00 ; '.'
00000000002189e4         db  0x00 ; '.'
00000000002189e5         db  0x00 ; '.'
00000000002189e6         db  0x00 ; '.'
00000000002189e7         db  0x00 ; '.'
00000000002189e8         db  0x01 ; '.'
00000000002189e9         db  0x00 ; '.'
00000000002189ea         db  0x00 ; '.'
00000000002189eb         db  0x00 ; '.'
00000000002189ec         db  0x00 ; '.'
00000000002189ed         db  0x00 ; '.'
00000000002189ee         db  0x00 ; '.'
00000000002189ef         db  0x00 ; '.'
00000000002189f0         db  0x00 ; '.'
00000000002189f1         db  0x00 ; '.'
00000000002189f2         db  0x00 ; '.'
00000000002189f3         db  0x00 ; '.'
00000000002189f4         db  0x00 ; '.'
00000000002189f5         db  0x00 ; '.'
00000000002189f6         db  0x00 ; '.'
00000000002189f7         db  0x00 ; '.'
00000000002189f8         db  0x62 ; 'b'
00000000002189f9         db  0x00 ; '.'
00000000002189fa         db  0x00 ; '.'
00000000002189fb         db  0x00 ; '.'
00000000002189fc         db  0x00 ; '.'
00000000002189fd         db  0x00 ; '.'
00000000002189fe         db  0x00 ; '.'
00000000002189ff         db  0x00 ; '.'
0000000000218a00         db  0x0f ; '.'
0000000000218a01         db  0x45 ; 'E'
0000000000218a02         db  0x01 ; '.'
0000000000218a03         db  0x00 ; '.'
0000000000218a04         db  0x00 ; '.'
0000000000218a05         db  0x00 ; '.'
0000000000218a06         db  0x00 ; '.'
0000000000218a07         db  0x00 ; '.'
0000000000218a08         db  0x01 ; '.'
0000000000218a09         db  0x00 ; '.'
0000000000218a0a         db  0x00 ; '.'
0000000000218a0b         db  0x00 ; '.'
0000000000218a0c         db  0x00 ; '.'
0000000000218a0d         db  0x00 ; '.'
0000000000218a0e         db  0x00 ; '.'
0000000000218a0f         db  0x00 ; '.'
0000000000218a10         db  0x00 ; '.'
0000000000218a11         db  0x00 ; '.'
0000000000218a12         db  0x00 ; '.'
0000000000218a13         db  0x00 ; '.'
0000000000218a14         db  0x00 ; '.'
0000000000218a15         db  0x00 ; '.'
0000000000218a16         db  0x00 ; '.'
0000000000218a17         db  0x00 ; '.'
0000000000218a18         db  0x66 ; 'f'
0000000000218a19         db  0x00 ; '.'
0000000000218a1a         db  0x00 ; '.'
0000000000218a1b         db  0x00 ; '.'
0000000000218a1c         db  0x00 ; '.'
0000000000218a1d         db  0x00 ; '.'
0000000000218a1e         db  0x00 ; '.'
0000000000218a1f         db  0x00 ; '.'
0000000000218a20         db  0x20 ; ' '
0000000000218a21         db  0x45 ; 'E'
0000000000218a22         db  0x01 ; '.'
0000000000218a23         db  0x00 ; '.'
0000000000218a24         db  0x00 ; '.'
0000000000218a25         db  0x00 ; '.'
0000000000218a26         db  0x00 ; '.'
0000000000218a27         db  0x00 ; '.'
0000000000218a28         db  0x01 ; '.'
0000000000218a29         db  0x00 ; '.'
0000000000218a2a         db  0x00 ; '.'
0000000000218a2b         db  0x00 ; '.'
0000000000218a2c         db  0x00 ; '.'
0000000000218a2d         db  0x00 ; '.'
0000000000218a2e         db  0x00 ; '.'
0000000000218a2f         db  0x00 ; '.'
0000000000218a30         db  0x00 ; '.'
0000000000218a31         db  0x00 ; '.'
0000000000218a32         db  0x00 ; '.'
0000000000218a33         db  0x00 ; '.'
0000000000218a34         db  0x00 ; '.'
0000000000218a35         db  0x00 ; '.'
0000000000218a36         db  0x00 ; '.'
0000000000218a37         db  0x00 ; '.'
0000000000218a38         db  0x76 ; 'v'
0000000000218a39         db  0x00 ; '.'
0000000000218a3a         db  0x00 ; '.'
0000000000218a3b         db  0x00 ; '.'
0000000000218a3c         db  0x00 ; '.'
0000000000218a3d         db  0x00 ; '.'
0000000000218a3e         db  0x00 ; '.'
0000000000218a3f         db  0x00 ; '.'
0000000000218a40         db  0x35 ; '5'
0000000000218a41         db  0x45 ; 'E'
0000000000218a42         db  0x01 ; '.'
0000000000218a43         db  0x00 ; '.'
0000000000218a44         db  0x00 ; '.'
0000000000218a45         db  0x00 ; '.'
0000000000218a46         db  0x00 ; '.'
0000000000218a47         db  0x00 ; '.'
0000000000218a48         db  0x01 ; '.'
0000000000218a49         db  0x00 ; '.'
0000000000218a4a         db  0x00 ; '.'
0000000000218a4b         db  0x00 ; '.'
0000000000218a4c         db  0x00 ; '.'
0000000000218a4d         db  0x00 ; '.'
0000000000218a4e         db  0x00 ; '.'
0000000000218a4f         db  0x00 ; '.'
0000000000218a50         db  0x00 ; '.'
0000000000218a51         db  0x00 ; '.'
0000000000218a52         db  0x00 ; '.'
0000000000218a53         db  0x00 ; '.'
0000000000218a54         db  0x00 ; '.'
0000000000218a55         db  0x00 ; '.'
0000000000218a56         db  0x00 ; '.'
0000000000218a57         db  0x00 ; '.'
0000000000218a58         db  0x69 ; 'i'
0000000000218a59         db  0x00 ; '.'
0000000000218a5a         db  0x00 ; '.'
0000000000218a5b         db  0x00 ; '.'
0000000000218a5c         db  0x00 ; '.'
0000000000218a5d         db  0x00 ; '.'
0000000000218a5e         db  0x00 ; '.'
0000000000218a5f         db  0x00 ; '.'
0000000000218a60         db  0x44 ; 'D'
0000000000218a61         db  0x45 ; 'E'
0000000000218a62         db  0x01 ; '.'
0000000000218a63         db  0x00 ; '.'
0000000000218a64         db  0x00 ; '.'
0000000000218a65         db  0x00 ; '.'
0000000000218a66         db  0x00 ; '.'
0000000000218a67         db  0x00 ; '.'
0000000000218a68         db  0x00 ; '.'
0000000000218a69         db  0x00 ; '.'
0000000000218a6a         db  0x00 ; '.'
0000000000218a6b         db  0x00 ; '.'
0000000000218a6c         db  0x00 ; '.'
0000000000218a6d         db  0x00 ; '.'
0000000000218a6e         db  0x00 ; '.'
0000000000218a6f         db  0x00 ; '.'
0000000000218a70         db  0x00 ; '.'
0000000000218a71         db  0x00 ; '.'
0000000000218a72         db  0x00 ; '.'
0000000000218a73         db  0x00 ; '.'
0000000000218a74         db  0x00 ; '.'
0000000000218a75         db  0x00 ; '.'
0000000000218a76         db  0x00 ; '.'
0000000000218a77         db  0x00 ; '.'
0000000000218a78         db  0x70 ; 'p'
0000000000218a79         db  0x00 ; '.'
0000000000218a7a         db  0x00 ; '.'
0000000000218a7b         db  0x00 ; '.'
0000000000218a7c         db  0x00 ; '.'
0000000000218a7d         db  0x00 ; '.'
0000000000218a7e         db  0x00 ; '.'
0000000000218a7f         db  0x00 ; '.'
0000000000218a80         db  0x50 ; 'P'
0000000000218a81         db  0x45 ; 'E'
0000000000218a82         db  0x01 ; '.'
0000000000218a83         db  0x00 ; '.'
0000000000218a84         db  0x00 ; '.'
0000000000218a85         db  0x00 ; '.'
0000000000218a86         db  0x00 ; '.'
0000000000218a87         db  0x00 ; '.'
0000000000218a88         db  0x01 ; '.'
0000000000218a89         db  0x00 ; '.'
0000000000218a8a         db  0x00 ; '.'
0000000000218a8b         db  0x00 ; '.'
0000000000218a8c         db  0x00 ; '.'
0000000000218a8d         db  0x00 ; '.'
0000000000218a8e         db  0x00 ; '.'
0000000000218a8f         db  0x00 ; '.'
0000000000218a90         db  0x00 ; '.'
0000000000218a91         db  0x00 ; '.'
0000000000218a92         db  0x00 ; '.'
0000000000218a93         db  0x00 ; '.'
0000000000218a94         db  0x00 ; '.'
0000000000218a95         db  0x00 ; '.'
0000000000218a96         db  0x00 ; '.'
0000000000218a97         db  0x00 ; '.'
0000000000218a98         db  0x6c ; 'l'
0000000000218a99         db  0x00 ; '.'
0000000000218a9a         db  0x00 ; '.'
0000000000218a9b         db  0x00 ; '.'
0000000000218a9c         db  0x00 ; '.'
0000000000218a9d         db  0x00 ; '.'
0000000000218a9e         db  0x00 ; '.'
0000000000218a9f         db  0x00 ; '.'
0000000000218aa0         db  0x61 ; 'a'
0000000000218aa1         db  0x45 ; 'E'
0000000000218aa2         db  0x01 ; '.'
0000000000218aa3         db  0x00 ; '.'
0000000000218aa4         db  0x00 ; '.'
0000000000218aa5         db  0x00 ; '.'
0000000000218aa6         db  0x00 ; '.'
0000000000218aa7         db  0x00 ; '.'
0000000000218aa8         db  0x01 ; '.'
0000000000218aa9         db  0x00 ; '.'
0000000000218aaa         db  0x00 ; '.'
0000000000218aab         db  0x00 ; '.'
0000000000218aac         db  0x00 ; '.'
0000000000218aad         db  0x00 ; '.'
0000000000218aae         db  0x00 ; '.'
0000000000218aaf         db  0x00 ; '.'
0000000000218ab0         db  0x00 ; '.'
0000000000218ab1         db  0x00 ; '.'
0000000000218ab2         db  0x00 ; '.'
0000000000218ab3         db  0x00 ; '.'
0000000000218ab4         db  0x00 ; '.'
0000000000218ab5         db  0x00 ; '.'
0000000000218ab6         db  0x00 ; '.'
0000000000218ab7         db  0x00 ; '.'
0000000000218ab8         db  0x73 ; 's'
0000000000218ab9         db  0x00 ; '.'
0000000000218aba         db  0x00 ; '.'
0000000000218abb         db  0x00 ; '.'
0000000000218abc         db  0x00 ; '.'
0000000000218abd         db  0x00 ; '.'
0000000000218abe         db  0x00 ; '.'
0000000000218abf         db  0x00 ; '.'
0000000000218ac0         db  0x72 ; 'r'
0000000000218ac1         db  0x45 ; 'E'
0000000000218ac2         db  0x01 ; '.'
0000000000218ac3         db  0x00 ; '.'
0000000000218ac4         db  0x00 ; '.'
0000000000218ac5         db  0x00 ; '.'
0000000000218ac6         db  0x00 ; '.'
0000000000218ac7         db  0x00 ; '.'
0000000000218ac8         db  0x01 ; '.'
0000000000218ac9         db  0x00 ; '.'
0000000000218aca         db  0x00 ; '.'
0000000000218acb         db  0x00 ; '.'
0000000000218acc         db  0x00 ; '.'
0000000000218acd         db  0x00 ; '.'
0000000000218ace         db  0x00 ; '.'
0000000000218acf         db  0x00 ; '.'
0000000000218ad0         db  0x00 ; '.'
0000000000218ad1         db  0x00 ; '.'
0000000000218ad2         db  0x00 ; '.'
0000000000218ad3         db  0x00 ; '.'
0000000000218ad4         db  0x00 ; '.'
0000000000218ad5         db  0x00 ; '.'
0000000000218ad6         db  0x00 ; '.'
0000000000218ad7         db  0x00 ; '.'
0000000000218ad8         db  0x77 ; 'w'
0000000000218ad9         db  0x00 ; '.'
0000000000218ada         db  0x00 ; '.'
0000000000218adb         db  0x00 ; '.'
0000000000218adc         db  0x00 ; '.'
0000000000218add         db  0x00 ; '.'
0000000000218ade         db  0x00 ; '.'
0000000000218adf         db  0x00 ; '.'
0000000000218ae0         db  0x7f ; '.'
0000000000218ae1         db  0x45 ; 'E'
0000000000218ae2         db  0x01 ; '.'
0000000000218ae3         db  0x00 ; '.'
0000000000218ae4         db  0x00 ; '.'
0000000000218ae5         db  0x00 ; '.'
0000000000218ae6         db  0x00 ; '.'
0000000000218ae7         db  0x00 ; '.'
0000000000218ae8         db  0x01 ; '.'
0000000000218ae9         db  0x00 ; '.'
0000000000218aea         db  0x00 ; '.'
0000000000218aeb         db  0x00 ; '.'
0000000000218aec         db  0x00 ; '.'
0000000000218aed         db  0x00 ; '.'
0000000000218aee         db  0x00 ; '.'
0000000000218aef         db  0x00 ; '.'
0000000000218af0         db  0x00 ; '.'
0000000000218af1         db  0x00 ; '.'
0000000000218af2         db  0x00 ; '.'
0000000000218af3         db  0x00 ; '.'
0000000000218af4         db  0x00 ; '.'
0000000000218af5         db  0x00 ; '.'
0000000000218af6         db  0x00 ; '.'
0000000000218af7         db  0x00 ; '.'
0000000000218af8         db  0x6e ; 'n'
0000000000218af9         db  0x00 ; '.'
0000000000218afa         db  0x00 ; '.'
0000000000218afb         db  0x00 ; '.'
0000000000218afc         db  0x00 ; '.'
0000000000218afd         db  0x00 ; '.'
0000000000218afe         db  0x00 ; '.'
0000000000218aff         db  0x00 ; '.'
0000000000218b00         db  0x8d ; '.'
0000000000218b01         db  0x45 ; 'E'
0000000000218b02         db  0x01 ; '.'
0000000000218b03         db  0x00 ; '.'
0000000000218b04         db  0x00 ; '.'
0000000000218b05         db  0x00 ; '.'
0000000000218b06         db  0x00 ; '.'
0000000000218b07         db  0x00 ; '.'
0000000000218b08         db  0x01 ; '.'
0000000000218b09         db  0x00 ; '.'
0000000000218b0a         db  0x00 ; '.'
0000000000218b0b         db  0x00 ; '.'
0000000000218b0c         db  0x00 ; '.'
0000000000218b0d         db  0x00 ; '.'
0000000000218b0e         db  0x00 ; '.'
0000000000218b0f         db  0x00 ; '.'
0000000000218b10         db  0x00 ; '.'
0000000000218b11         db  0x00 ; '.'
0000000000218b12         db  0x00 ; '.'
0000000000218b13         db  0x00 ; '.'
0000000000218b14         db  0x00 ; '.'
0000000000218b15         db  0x00 ; '.'
0000000000218b16         db  0x00 ; '.'
0000000000218b17         db  0x00 ; '.'
0000000000218b18         db  0x64 ; 'd'
0000000000218b19         db  0x00 ; '.'
0000000000218b1a         db  0x00 ; '.'
0000000000218b1b         db  0x00 ; '.'
0000000000218b1c         db  0x00 ; '.'
0000000000218b1d         db  0x00 ; '.'
0000000000218b1e         db  0x00 ; '.'
0000000000218b1f         db  0x00 ; '.'
0000000000218b20         db  0x9f ; '.'
0000000000218b21         db  0x45 ; 'E'
0000000000218b22         db  0x01 ; '.'
0000000000218b23         db  0x00 ; '.'
0000000000218b24         db  0x00 ; '.'
0000000000218b25         db  0x00 ; '.'
0000000000218b26         db  0x00 ; '.'
0000000000218b27         db  0x00 ; '.'
0000000000218b28         db  0x00 ; '.'
0000000000218b29         db  0x00 ; '.'
0000000000218b2a         db  0x00 ; '.'
0000000000218b2b         db  0x00 ; '.'
0000000000218b2c         db  0x00 ; '.'
0000000000218b2d         db  0x00 ; '.'
0000000000218b2e         db  0x00 ; '.'
0000000000218b2f         db  0x00 ; '.'
0000000000218b30         db  0x00 ; '.'
0000000000218b31         db  0x00 ; '.'
0000000000218b32         db  0x00 ; '.'
0000000000218b33         db  0x00 ; '.'
0000000000218b34         db  0x00 ; '.'
0000000000218b35         db  0x00 ; '.'
0000000000218b36         db  0x00 ; '.'
0000000000218b37         db  0x00 ; '.'
0000000000218b38         db  0x7e ; '~'
0000000000218b39         db  0xff ; '.'
0000000000218b3a         db  0xff ; '.'
0000000000218b3b         db  0xff ; '.'
0000000000218b3c         db  0x00 ; '.'
0000000000218b3d         db  0x00 ; '.'
0000000000218b3e         db  0x00 ; '.'
0000000000218b3f         db  0x00 ; '.'
0000000000218b40         db  0xa4 ; '.'
0000000000218b41         db  0x45 ; 'E'
0000000000218b42         db  0x01 ; '.'
0000000000218b43         db  0x00 ; '.'
0000000000218b44         db  0x00 ; '.'
0000000000218b45         db  0x00 ; '.'
0000000000218b46         db  0x00 ; '.'
0000000000218b47         db  0x00 ; '.'
0000000000218b48         db  0x00 ; '.'
0000000000218b49         db  0x00 ; '.'
0000000000218b4a         db  0x00 ; '.'
0000000000218b4b         db  0x00 ; '.'
0000000000218b4c         db  0x00 ; '.'
0000000000218b4d         db  0x00 ; '.'
0000000000218b4e         db  0x00 ; '.'
0000000000218b4f         db  0x00 ; '.'
0000000000218b50         db  0x00 ; '.'
0000000000218b51         db  0x00 ; '.'
0000000000218b52         db  0x00 ; '.'
0000000000218b53         db  0x00 ; '.'
0000000000218b54         db  0x00 ; '.'
0000000000218b55         db  0x00 ; '.'
0000000000218b56         db  0x00 ; '.'
0000000000218b57         db  0x00 ; '.'
0000000000218b58         db  0x7d ; '}'
0000000000218b59         db  0xff ; '.'
0000000000218b5a         db  0xff ; '.'
0000000000218b5b         db  0xff ; '.'
0000000000218b5c         db  0x00 ; '.'
0000000000218b5d         db  0x00 ; '.'
0000000000218b5e         db  0x00 ; '.'
0000000000218b5f         db  0x00 ; '.'
0000000000218b60         db  0x00 ; '.'
0000000000218b61         db  0x00 ; '.'
0000000000218b62         db  0x00 ; '.'
0000000000218b63         db  0x00 ; '.'
0000000000218b64         db  0x00 ; '.'
0000000000218b65         db  0x00 ; '.'
0000000000218b66         db  0x00 ; '.'
0000000000218b67         db  0x00 ; '.'
0000000000218b68         db  0x00 ; '.'
0000000000218b69         db  0x00 ; '.'
0000000000218b6a         db  0x00 ; '.'
0000000000218b6b         db  0x00 ; '.'
0000000000218b6c         db  0x00 ; '.'
0000000000218b6d         db  0x00 ; '.'
0000000000218b6e         db  0x00 ; '.'
0000000000218b6f         db  0x00 ; '.'
0000000000218b70         db  0x00 ; '.'
0000000000218b71         db  0x00 ; '.'
0000000000218b72         db  0x00 ; '.'
0000000000218b73         db  0x00 ; '.'
0000000000218b74         db  0x00 ; '.'
0000000000218b75         db  0x00 ; '.'
0000000000218b76         db  0x00 ; '.'
0000000000218b77         db  0x00 ; '.'
0000000000218b78         db  0x00 ; '.'
0000000000218b79         db  0x00 ; '.'
0000000000218b7a         db  0x00 ; '.'
0000000000218b7b         db  0x00 ; '.'
0000000000218b7c         db  0x00 ; '.'
0000000000218b7d         db  0x00 ; '.'
0000000000218b7e         db  0x00 ; '.'
0000000000218b7f         db  0x00 ; '.'
                     quoting_style_args:
0000000000218b80         db  0xc9 ; '.'
0000000000218b81         db  0x4e ; 'N'
0000000000218b82         db  0x01 ; '.'
0000000000218b83         db  0x00 ; '.'
0000000000218b84         db  0x00 ; '.'
0000000000218b85         db  0x00 ; '.'
0000000000218b86         db  0x00 ; '.'
0000000000218b87         db  0x00 ; '.'
0000000000218b88         db  0xd1 ; '.'
0000000000218b89         db  0x4e ; 'N'
0000000000218b8a         db  0x01 ; '.'
0000000000218b8b         db  0x00 ; '.'
0000000000218b8c         db  0x00 ; '.'
0000000000218b8d         db  0x00 ; '.'
0000000000218b8e         db  0x00 ; '.'
0000000000218b8f         db  0x00 ; '.'
0000000000218b90         db  0xd7 ; '.'
0000000000218b91         db  0x4e ; 'N'
0000000000218b92         db  0x01 ; '.'
0000000000218b93         db  0x00 ; '.'
0000000000218b94         db  0x00 ; '.'
0000000000218b95         db  0x00 ; '.'
0000000000218b96         db  0x00 ; '.'
0000000000218b97         db  0x00 ; '.'
0000000000218b98         db  0xe4 ; '.'
0000000000218b99         db  0x4e ; 'N'
0000000000218b9a         db  0x01 ; '.'
0000000000218b9b         db  0x00 ; '.'
0000000000218b9c         db  0x00 ; '.'
0000000000218b9d         db  0x00 ; '.'
0000000000218b9e         db  0x00 ; '.'
0000000000218b9f         db  0x00 ; '.'
0000000000218ba0         db  0xf1 ; '.'
0000000000218ba1         db  0x4e ; 'N'
0000000000218ba2         db  0x01 ; '.'
0000000000218ba3         db  0x00 ; '.'
0000000000218ba4         db  0x00 ; '.'
0000000000218ba5         db  0x00 ; '.'
0000000000218ba6         db  0x00 ; '.'
0000000000218ba7         db  0x00 ; '.'
0000000000218ba8         db  0x05 ; '.'
0000000000218ba9         db  0x4f ; 'O'
0000000000218baa         db  0x01 ; '.'
0000000000218bab         db  0x00 ; '.'
0000000000218bac         db  0x00 ; '.'
0000000000218bad         db  0x00 ; '.'
0000000000218bae         db  0x00 ; '.'
0000000000218baf         db  0x00 ; '.'
0000000000218bb0         db  0x07 ; '.'
0000000000218bb1         db  0x4f ; 'O'
0000000000218bb2         db  0x01 ; '.'
0000000000218bb3         db  0x00 ; '.'
0000000000218bb4         db  0x00 ; '.'
0000000000218bb5         db  0x00 ; '.'
0000000000218bb6         db  0x00 ; '.'
0000000000218bb7         db  0x00 ; '.'
0000000000218bb8         db  0xea ; '.'
0000000000218bb9         db  0x4e ; 'N'
0000000000218bba         db  0x01 ; '.'
0000000000218bbb         db  0x00 ; '.'
0000000000218bbc         db  0x00 ; '.'
0000000000218bbd         db  0x00 ; '.'
0000000000218bbe         db  0x00 ; '.'
0000000000218bbf         db  0x00 ; '.'
0000000000218bc0         db  0x70 ; 'p'
0000000000218bc1         db  0x44 ; 'D'
0000000000218bc2         db  0x01 ; '.'
0000000000218bc3         db  0x00 ; '.'
0000000000218bc4         db  0x00 ; '.'
0000000000218bc5         db  0x00 ; '.'
0000000000218bc6         db  0x00 ; '.'
0000000000218bc7         db  0x00 ; '.'
0000000000218bc8         db  0x0f ; '.'
0000000000218bc9         db  0x4f ; 'O'
0000000000218bca         db  0x01 ; '.'
0000000000218bcb         db  0x00 ; '.'
0000000000218bcc         db  0x00 ; '.'
0000000000218bcd         db  0x00 ; '.'
0000000000218bce         db  0x00 ; '.'
0000000000218bcf         db  0x00 ; '.'
0000000000218bd0         db  0x00 ; '.'
0000000000218bd1         db  0x00 ; '.'
0000000000218bd2         db  0x00 ; '.'
0000000000218bd3         db  0x00 ; '.'
0000000000218bd4         db  0x00 ; '.'
0000000000218bd5         db  0x00 ; '.'
0000000000218bd6         db  0x00 ; '.'
0000000000218bd7         db  0x00 ; '.'


        ; Section .dynamic
        ; Range: [0x218bd8; 0x218dc8[ (496 bytes)
        ; File offset : [101336; 101832[ (496 bytes)
        ; Flags: 0x3
        ;   SHT_DYNAMIC
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     _DYNAMIC:
0000000000218bd8         db  0x01 ; '.'
0000000000218bd9         db  0x00 ; '.'
0000000000218bda         db  0x00 ; '.'
0000000000218bdb         db  0x00 ; '.'
0000000000218bdc         db  0x00 ; '.'
0000000000218bdd         db  0x00 ; '.'
0000000000218bde         db  0x00 ; '.'
0000000000218bdf         db  0x00 ; '.'
0000000000218be0         db  0x01 ; '.'
0000000000218be1         db  0x00 ; '.'
0000000000218be2         db  0x00 ; '.'
0000000000218be3         db  0x00 ; '.'
0000000000218be4         db  0x00 ; '.'
0000000000218be5         db  0x00 ; '.'
0000000000218be6         db  0x00 ; '.'
0000000000218be7         db  0x00 ; '.'
0000000000218be8         db  0x0c ; '.'
0000000000218be9         db  0x00 ; '.'
0000000000218bea         db  0x00 ; '.'
0000000000218beb         db  0x00 ; '.'
0000000000218bec         db  0x00 ; '.'
0000000000218bed         db  0x00 ; '.'
0000000000218bee         db  0x00 ; '.'
0000000000218bef         db  0x00 ; '.'
0000000000218bf0         db  0x88 ; '.'
0000000000218bf1         db  0x18 ; '.'
0000000000218bf2         db  0x00 ; '.'
0000000000218bf3         db  0x00 ; '.'
0000000000218bf4         db  0x00 ; '.'
0000000000218bf5         db  0x00 ; '.'
0000000000218bf6         db  0x00 ; '.'
0000000000218bf7         db  0x00 ; '.'
0000000000218bf8         db  0x0d ; '.'
0000000000218bf9         db  0x00 ; '.'
0000000000218bfa         db  0x00 ; '.'
0000000000218bfb         db  0x00 ; '.'
0000000000218bfc         db  0x00 ; '.'
0000000000218bfd         db  0x00 ; '.'
0000000000218bfe         db  0x00 ; '.'
0000000000218bff         db  0x00 ; '.'
0000000000218c00         db  0x90 ; '.'
0000000000218c01         db  0x43 ; 'C'
0000000000218c02         db  0x01 ; '.'
0000000000218c03         db  0x00 ; '.'
0000000000218c04         db  0x00 ; '.'
0000000000218c05         db  0x00 ; '.'
0000000000218c06         db  0x00 ; '.'
0000000000218c07         db  0x00 ; '.'
0000000000218c08         db  0x19 ; '.'
0000000000218c09         db  0x00 ; '.'
0000000000218c0a         db  0x00 ; '.'
0000000000218c0b         db  0x00 ; '.'
0000000000218c0c         db  0x00 ; '.'
0000000000218c0d         db  0x00 ; '.'
0000000000218c0e         db  0x00 ; '.'
0000000000218c0f         db  0x00 ; '.'
0000000000218c10         db  0xb0 ; '.'
0000000000218c11         db  0x89 ; '.'
0000000000218c12         db  0x21 ; '!'
0000000000218c13         db  0x00 ; '.'
0000000000218c14         db  0x00 ; '.'
0000000000218c15         db  0x00 ; '.'
0000000000218c16         db  0x00 ; '.'
0000000000218c17         db  0x00 ; '.'
0000000000218c18         db  0x1b ; '.'
0000000000218c19         db  0x00 ; '.'
0000000000218c1a         db  0x00 ; '.'
0000000000218c1b         db  0x00 ; '.'
0000000000218c1c         db  0x00 ; '.'
0000000000218c1d         db  0x00 ; '.'
0000000000218c1e         db  0x00 ; '.'
0000000000218c1f         db  0x00 ; '.'
0000000000218c20         db  0x08 ; '.'
0000000000218c21         db  0x00 ; '.'
0000000000218c22         db  0x00 ; '.'
0000000000218c23         db  0x00 ; '.'
0000000000218c24         db  0x00 ; '.'
0000000000218c25         db  0x00 ; '.'
0000000000218c26         db  0x00 ; '.'
0000000000218c27         db  0x00 ; '.'
0000000000218c28         db  0x1a ; '.'
0000000000218c29         db  0x00 ; '.'
0000000000218c2a         db  0x00 ; '.'
0000000000218c2b         db  0x00 ; '.'
0000000000218c2c         db  0x00 ; '.'
0000000000218c2d         db  0x00 ; '.'
0000000000218c2e         db  0x00 ; '.'
0000000000218c2f         db  0x00 ; '.'
0000000000218c30         db  0xb8 ; '.'
0000000000218c31         db  0x89 ; '.'
0000000000218c32         db  0x21 ; '!'
0000000000218c33         db  0x00 ; '.'
0000000000218c34         db  0x00 ; '.'
0000000000218c35         db  0x00 ; '.'
0000000000218c36         db  0x00 ; '.'
0000000000218c37         db  0x00 ; '.'
0000000000218c38         db  0x1c ; '.'
0000000000218c39         db  0x00 ; '.'
0000000000218c3a         db  0x00 ; '.'
0000000000218c3b         db  0x00 ; '.'
0000000000218c3c         db  0x00 ; '.'
0000000000218c3d         db  0x00 ; '.'
0000000000218c3e         db  0x00 ; '.'
0000000000218c3f         db  0x00 ; '.'
0000000000218c40         db  0x08 ; '.'
0000000000218c41         db  0x00 ; '.'
0000000000218c42         db  0x00 ; '.'
0000000000218c43         db  0x00 ; '.'
0000000000218c44         db  0x00 ; '.'
0000000000218c45         db  0x00 ; '.'
0000000000218c46         db  0x00 ; '.'
0000000000218c47         db  0x00 ; '.'
0000000000218c48         db  0xf5 ; '.'
0000000000218c49         db  0xfe ; '.'
0000000000218c4a         db  0xff ; '.'
0000000000218c4b         db  0x6f ; 'o'
0000000000218c4c         db  0x00 ; '.'
0000000000218c4d         db  0x00 ; '.'
0000000000218c4e         db  0x00 ; '.'
0000000000218c4f         db  0x00 ; '.'
0000000000218c50         db  0x98 ; '.'
0000000000218c51         db  0x02 ; '.'
0000000000218c52         db  0x00 ; '.'
0000000000218c53         db  0x00 ; '.'
0000000000218c54         db  0x00 ; '.'
0000000000218c55         db  0x00 ; '.'
0000000000218c56         db  0x00 ; '.'
0000000000218c57         db  0x00 ; '.'
0000000000218c58         db  0x05 ; '.'
0000000000218c59         db  0x00 ; '.'
0000000000218c5a         db  0x00 ; '.'
0000000000218c5b         db  0x00 ; '.'
0000000000218c5c         db  0x00 ; '.'
0000000000218c5d         db  0x00 ; '.'
0000000000218c5e         db  0x00 ; '.'
0000000000218c5f         db  0x00 ; '.'
0000000000218c60         db  0x00 ; '.'
0000000000218c61         db  0x0a ; '.'
0000000000218c62         db  0x00 ; '.'
0000000000218c63         db  0x00 ; '.'
0000000000218c64         db  0x00 ; '.'
0000000000218c65         db  0x00 ; '.'
0000000000218c66         db  0x00 ; '.'
0000000000218c67         db  0x00 ; '.'
0000000000218c68         db  0x06 ; '.'
0000000000218c69         db  0x00 ; '.'
0000000000218c6a         db  0x00 ; '.'
0000000000218c6b         db  0x00 ; '.'
0000000000218c6c         db  0x00 ; '.'
0000000000218c6d         db  0x00 ; '.'
0000000000218c6e         db  0x00 ; '.'
0000000000218c6f         db  0x00 ; '.'
0000000000218c70         db  0xe0 ; '.'
0000000000218c71         db  0x02 ; '.'
0000000000218c72         db  0x00 ; '.'
0000000000218c73         db  0x00 ; '.'
0000000000218c74         db  0x00 ; '.'
0000000000218c75         db  0x00 ; '.'
0000000000218c76         db  0x00 ; '.'
0000000000218c77         db  0x00 ; '.'
0000000000218c78         db  0x0a ; '.'
0000000000218c79         db  0x00 ; '.'
0000000000218c7a         db  0x00 ; '.'
0000000000218c7b         db  0x00 ; '.'
0000000000218c7c         db  0x00 ; '.'
0000000000218c7d         db  0x00 ; '.'
0000000000218c7e         db  0x00 ; '.'
0000000000218c7f         db  0x00 ; '.'
0000000000218c80         db  0x6c ; 'l'
0000000000218c81         db  0x03 ; '.'
0000000000218c82         db  0x00 ; '.'
0000000000218c83         db  0x00 ; '.'
0000000000218c84         db  0x00 ; '.'
0000000000218c85         db  0x00 ; '.'
0000000000218c86         db  0x00 ; '.'
0000000000218c87         db  0x00 ; '.'
0000000000218c88         db  0x0b ; '.'
0000000000218c89         db  0x00 ; '.'
0000000000218c8a         db  0x00 ; '.'
0000000000218c8b         db  0x00 ; '.'
0000000000218c8c         db  0x00 ; '.'
0000000000218c8d         db  0x00 ; '.'
0000000000218c8e         db  0x00 ; '.'
0000000000218c8f         db  0x00 ; '.'
0000000000218c90         db  0x18 ; '.'
0000000000218c91         db  0x00 ; '.'
0000000000218c92         db  0x00 ; '.'
0000000000218c93         db  0x00 ; '.'
0000000000218c94         db  0x00 ; '.'
0000000000218c95         db  0x00 ; '.'
0000000000218c96         db  0x00 ; '.'
0000000000218c97         db  0x00 ; '.'
0000000000218c98         db  0x15 ; '.'
0000000000218c99         db  0x00 ; '.'
0000000000218c9a         db  0x00 ; '.'
0000000000218c9b         db  0x00 ; '.'
0000000000218c9c         db  0x00 ; '.'
0000000000218c9d         db  0x00 ; '.'
0000000000218c9e         db  0x00 ; '.'
0000000000218c9f         db  0x00 ; '.'
0000000000218ca0         db  0x00 ; '.'
0000000000218ca1         db  0x00 ; '.'
0000000000218ca2         db  0x00 ; '.'
0000000000218ca3         db  0x00 ; '.'
0000000000218ca4         db  0x00 ; '.'
0000000000218ca5         db  0x00 ; '.'
0000000000218ca6         db  0x00 ; '.'
0000000000218ca7         db  0x00 ; '.'
0000000000218ca8         db  0x03 ; '.'
0000000000218ca9         db  0x00 ; '.'
0000000000218caa         db  0x00 ; '.'
0000000000218cab         db  0x00 ; '.'
0000000000218cac         db  0x00 ; '.'
0000000000218cad         db  0x00 ; '.'
0000000000218cae         db  0x00 ; '.'
0000000000218caf         db  0x00 ; '.'
0000000000218cb0         db  0xc8 ; '.'
0000000000218cb1         db  0x8d ; '.'
0000000000218cb2         db  0x21 ; '!'
0000000000218cb3         db  0x00 ; '.'
0000000000218cb4         db  0x00 ; '.'
0000000000218cb5         db  0x00 ; '.'
0000000000218cb6         db  0x00 ; '.'
0000000000218cb7         db  0x00 ; '.'
0000000000218cb8         db  0x02 ; '.'
0000000000218cb9         db  0x00 ; '.'
0000000000218cba         db  0x00 ; '.'
0000000000218cbb         db  0x00 ; '.'
0000000000218cbc         db  0x00 ; '.'
0000000000218cbd         db  0x00 ; '.'
0000000000218cbe         db  0x00 ; '.'
0000000000218cbf         db  0x00 ; '.'
0000000000218cc0         db  0xb8 ; '.'
0000000000218cc1         db  0x05 ; '.'
0000000000218cc2         db  0x00 ; '.'
0000000000218cc3         db  0x00 ; '.'
0000000000218cc4         db  0x00 ; '.'
0000000000218cc5         db  0x00 ; '.'
0000000000218cc6         db  0x00 ; '.'
0000000000218cc7         db  0x00 ; '.'
0000000000218cc8         db  0x14 ; '.'
0000000000218cc9         db  0x00 ; '.'
0000000000218cca         db  0x00 ; '.'
0000000000218ccb         db  0x00 ; '.'
0000000000218ccc         db  0x00 ; '.'
0000000000218ccd         db  0x00 ; '.'
0000000000218cce         db  0x00 ; '.'
0000000000218ccf         db  0x00 ; '.'
0000000000218cd0         db  0x07 ; '.'
0000000000218cd1         db  0x00 ; '.'
0000000000218cd2         db  0x00 ; '.'
0000000000218cd3         db  0x00 ; '.'
0000000000218cd4         db  0x00 ; '.'
0000000000218cd5         db  0x00 ; '.'
0000000000218cd6         db  0x00 ; '.'
0000000000218cd7         db  0x00 ; '.'
0000000000218cd8         db  0x17 ; '.'
0000000000218cd9         db  0x00 ; '.'
0000000000218cda         db  0x00 ; '.'
0000000000218cdb         db  0x00 ; '.'
0000000000218cdc         db  0x00 ; '.'
0000000000218cdd         db  0x00 ; '.'
0000000000218cde         db  0x00 ; '.'
0000000000218cdf         db  0x00 ; '.'
0000000000218ce0         db  0xd0 ; '.'
0000000000218ce1         db  0x12 ; '.'
0000000000218ce2         db  0x00 ; '.'
0000000000218ce3         db  0x00 ; '.'
0000000000218ce4         db  0x00 ; '.'
0000000000218ce5         db  0x00 ; '.'
0000000000218ce6         db  0x00 ; '.'
0000000000218ce7         db  0x00 ; '.'
0000000000218ce8         db  0x07 ; '.'
0000000000218ce9         db  0x00 ; '.'
0000000000218cea         db  0x00 ; '.'
0000000000218ceb         db  0x00 ; '.'
0000000000218cec         db  0x00 ; '.'
0000000000218ced         db  0x00 ; '.'
0000000000218cee         db  0x00 ; '.'
0000000000218cef         db  0x00 ; '.'
0000000000218cf0         db  0x68 ; 'h'
0000000000218cf1         db  0x0e ; '.'
0000000000218cf2         db  0x00 ; '.'
0000000000218cf3         db  0x00 ; '.'
0000000000218cf4         db  0x00 ; '.'
0000000000218cf5         db  0x00 ; '.'
0000000000218cf6         db  0x00 ; '.'
0000000000218cf7         db  0x00 ; '.'
0000000000218cf8         db  0x08 ; '.'
0000000000218cf9         db  0x00 ; '.'
0000000000218cfa         db  0x00 ; '.'
0000000000218cfb         db  0x00 ; '.'
0000000000218cfc         db  0x00 ; '.'
0000000000218cfd         db  0x00 ; '.'
0000000000218cfe         db  0x00 ; '.'
0000000000218cff         db  0x00 ; '.'
0000000000218d00         db  0x68 ; 'h'
0000000000218d01         db  0x04 ; '.'
0000000000218d02         db  0x00 ; '.'
0000000000218d03         db  0x00 ; '.'
0000000000218d04         db  0x00 ; '.'
0000000000218d05         db  0x00 ; '.'
0000000000218d06         db  0x00 ; '.'
0000000000218d07         db  0x00 ; '.'
0000000000218d08         db  0x09 ; '.'
0000000000218d09         db  0x00 ; '.'
0000000000218d0a         db  0x00 ; '.'
0000000000218d0b         db  0x00 ; '.'
0000000000218d0c         db  0x00 ; '.'
0000000000218d0d         db  0x00 ; '.'
0000000000218d0e         db  0x00 ; '.'
0000000000218d0f         db  0x00 ; '.'
0000000000218d10         db  0x18 ; '.'
0000000000218d11         db  0x00 ; '.'
0000000000218d12         db  0x00 ; '.'
0000000000218d13         db  0x00 ; '.'
0000000000218d14         db  0x00 ; '.'
0000000000218d15         db  0x00 ; '.'
0000000000218d16         db  0x00 ; '.'
0000000000218d17         db  0x00 ; '.'
0000000000218d18         db  0x1e ; '.'
0000000000218d19         db  0x00 ; '.'
0000000000218d1a         db  0x00 ; '.'
0000000000218d1b         db  0x00 ; '.'
0000000000218d1c         db  0x00 ; '.'
0000000000218d1d         db  0x00 ; '.'
0000000000218d1e         db  0x00 ; '.'
0000000000218d1f         db  0x00 ; '.'
0000000000218d20         db  0x08 ; '.'
0000000000218d21         db  0x00 ; '.'
0000000000218d22         db  0x00 ; '.'
0000000000218d23         db  0x00 ; '.'
0000000000218d24         db  0x00 ; '.'
0000000000218d25         db  0x00 ; '.'
0000000000218d26         db  0x00 ; '.'
0000000000218d27         db  0x00 ; '.'
0000000000218d28         db  0xfb ; '.'
0000000000218d29         db  0xff ; '.'
0000000000218d2a         db  0xff ; '.'
0000000000218d2b         db  0x6f ; 'o'
0000000000218d2c         db  0x00 ; '.'
0000000000218d2d         db  0x00 ; '.'
0000000000218d2e         db  0x00 ; '.'
0000000000218d2f         db  0x00 ; '.'
0000000000218d30         db  0x01 ; '.'
0000000000218d31         db  0x00 ; '.'
0000000000218d32         db  0x00 ; '.'
0000000000218d33         db  0x08 ; '.'
0000000000218d34         db  0x00 ; '.'
0000000000218d35         db  0x00 ; '.'
0000000000218d36         db  0x00 ; '.'
0000000000218d37         db  0x00 ; '.'
0000000000218d38         db  0xfe ; '.'
0000000000218d39         db  0xff ; '.'
0000000000218d3a         db  0xff ; '.'
0000000000218d3b         db  0x6f ; 'o'
0000000000218d3c         db  0x00 ; '.'
0000000000218d3d         db  0x00 ; '.'
0000000000218d3e         db  0x00 ; '.'
0000000000218d3f         db  0x00 ; '.'
0000000000218d40         db  0x08 ; '.'
0000000000218d41         db  0x0e ; '.'
0000000000218d42         db  0x00 ; '.'
0000000000218d43         db  0x00 ; '.'
0000000000218d44         db  0x00 ; '.'
0000000000218d45         db  0x00 ; '.'
0000000000218d46         db  0x00 ; '.'
0000000000218d47         db  0x00 ; '.'
0000000000218d48         db  0xff ; '.'
0000000000218d49         db  0xff ; '.'
0000000000218d4a         db  0xff ; '.'
0000000000218d4b         db  0x6f ; 'o'
0000000000218d4c         db  0x00 ; '.'
0000000000218d4d         db  0x00 ; '.'
0000000000218d4e         db  0x00 ; '.'
0000000000218d4f         db  0x00 ; '.'
0000000000218d50         db  0x01 ; '.'
0000000000218d51         db  0x00 ; '.'
0000000000218d52         db  0x00 ; '.'
0000000000218d53         db  0x00 ; '.'
0000000000218d54         db  0x00 ; '.'
0000000000218d55         db  0x00 ; '.'
0000000000218d56         db  0x00 ; '.'
0000000000218d57         db  0x00 ; '.'
0000000000218d58         db  0xf0 ; '.'
0000000000218d59         db  0xff ; '.'
0000000000218d5a         db  0xff ; '.'
0000000000218d5b         db  0x6f ; 'o'
0000000000218d5c         db  0x00 ; '.'
0000000000218d5d         db  0x00 ; '.'
0000000000218d5e         db  0x00 ; '.'
0000000000218d5f         db  0x00 ; '.'
0000000000218d60         db  0x6c ; 'l'
0000000000218d61         db  0x0d ; '.'
0000000000218d62         db  0x00 ; '.'
0000000000218d63         db  0x00 ; '.'
0000000000218d64         db  0x00 ; '.'
0000000000218d65         db  0x00 ; '.'
0000000000218d66         db  0x00 ; '.'
0000000000218d67         db  0x00 ; '.'
0000000000218d68         db  0xf9 ; '.'
0000000000218d69         db  0xff ; '.'
0000000000218d6a         db  0xff ; '.'
0000000000218d6b         db  0x6f ; 'o'
0000000000218d6c         db  0x00 ; '.'
0000000000218d6d         db  0x00 ; '.'
0000000000218d6e         db  0x00 ; '.'
0000000000218d6f         db  0x00 ; '.'
0000000000218d70         db  0x23 ; '#'
0000000000218d71         db  0x00 ; '.'
0000000000218d72         db  0x00 ; '.'
0000000000218d73         db  0x00 ; '.'
0000000000218d74         db  0x00 ; '.'
0000000000218d75         db  0x00 ; '.'
0000000000218d76         db  0x00 ; '.'
0000000000218d77         db  0x00 ; '.'
0000000000218d78         db  0x00 ; '.'
0000000000218d79         db  0x00 ; '.'
0000000000218d7a         db  0x00 ; '.'
0000000000218d7b         db  0x00 ; '.'
0000000000218d7c         db  0x00 ; '.'
0000000000218d7d         db  0x00 ; '.'
0000000000218d7e         db  0x00 ; '.'
0000000000218d7f         db  0x00 ; '.'
0000000000218d80         db  0x00 ; '.'
0000000000218d81         db  0x00 ; '.'
0000000000218d82         db  0x00 ; '.'
0000000000218d83         db  0x00 ; '.'
0000000000218d84         db  0x00 ; '.'
0000000000218d85         db  0x00 ; '.'
0000000000218d86         db  0x00 ; '.'
0000000000218d87         db  0x00 ; '.'
0000000000218d88         db  0x00 ; '.'
0000000000218d89         db  0x00 ; '.'
0000000000218d8a         db  0x00 ; '.'
0000000000218d8b         db  0x00 ; '.'
0000000000218d8c         db  0x00 ; '.'
0000000000218d8d         db  0x00 ; '.'
0000000000218d8e         db  0x00 ; '.'
0000000000218d8f         db  0x00 ; '.'
0000000000218d90         db  0x00 ; '.'
0000000000218d91         db  0x00 ; '.'
0000000000218d92         db  0x00 ; '.'
0000000000218d93         db  0x00 ; '.'
0000000000218d94         db  0x00 ; '.'
0000000000218d95         db  0x00 ; '.'
0000000000218d96         db  0x00 ; '.'
0000000000218d97         db  0x00 ; '.'
0000000000218d98         db  0x00 ; '.'
0000000000218d99         db  0x00 ; '.'
0000000000218d9a         db  0x00 ; '.'
0000000000218d9b         db  0x00 ; '.'
0000000000218d9c         db  0x00 ; '.'
0000000000218d9d         db  0x00 ; '.'
0000000000218d9e         db  0x00 ; '.'
0000000000218d9f         db  0x00 ; '.'
0000000000218da0         db  0x00 ; '.'
0000000000218da1         db  0x00 ; '.'
0000000000218da2         db  0x00 ; '.'
0000000000218da3         db  0x00 ; '.'
0000000000218da4         db  0x00 ; '.'
0000000000218da5         db  0x00 ; '.'
0000000000218da6         db  0x00 ; '.'
0000000000218da7         db  0x00 ; '.'
0000000000218da8         db  0x00 ; '.'
0000000000218da9         db  0x00 ; '.'
0000000000218daa         db  0x00 ; '.'
0000000000218dab         db  0x00 ; '.'
0000000000218dac         db  0x00 ; '.'
0000000000218dad         db  0x00 ; '.'
0000000000218dae         db  0x00 ; '.'
0000000000218daf         db  0x00 ; '.'
0000000000218db0         db  0x00 ; '.'
0000000000218db1         db  0x00 ; '.'
0000000000218db2         db  0x00 ; '.'
0000000000218db3         db  0x00 ; '.'
0000000000218db4         db  0x00 ; '.'
0000000000218db5         db  0x00 ; '.'
0000000000218db6         db  0x00 ; '.'
0000000000218db7         db  0x00 ; '.'
0000000000218db8         db  0x00 ; '.'
0000000000218db9         db  0x00 ; '.'
0000000000218dba         db  0x00 ; '.'
0000000000218dbb         db  0x00 ; '.'
0000000000218dbc         db  0x00 ; '.'
0000000000218dbd         db  0x00 ; '.'
0000000000218dbe         db  0x00 ; '.'
0000000000218dbf         db  0x00 ; '.'
0000000000218dc0         db  0x00 ; '.'
0000000000218dc1         db  0x00 ; '.'
0000000000218dc2         db  0x00 ; '.'
0000000000218dc3         db  0x00 ; '.'
0000000000218dc4         db  0x00 ; '.'
0000000000218dc5         db  0x00 ; '.'
0000000000218dc6         db  0x00 ; '.'
0000000000218dc7         db  0x00 ; '.'


        ; Section .got
        ; Range: [0x218dc8; 0x218ff0[ (552 bytes)
        ; File offset : [101832; 102384[ (552 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     _GLOBAL_OFFSET_TABLE_:
0000000000218dc8         db  0xd8 ; '.'
0000000000218dc9         db  0x8b ; '.'
0000000000218dca         db  0x21 ; '!'
0000000000218dcb         db  0x00 ; '.'
0000000000218dcc         db  0x00 ; '.'
0000000000218dcd         db  0x00 ; '.'
0000000000218dce         db  0x00 ; '.'
0000000000218dcf         db  0x00 ; '.'
                     qword_218dd0:
0000000000218dd0         dq         0x0000000000000000                          ; DATA XREF=0x18a0
0000000000218dd8         db  0x00 ; '.'                                         ; DATA XREF=0x18a6
0000000000218dd9         db  0x00 ; '.'
0000000000218dda         db  0x00 ; '.'
0000000000218ddb         db  0x00 ; '.'
0000000000218ddc         db  0x00 ; '.'
0000000000218ddd         db  0x00 ; '.'
0000000000218dde         db  0x00 ; '.'
0000000000218ddf         db  0x00 ; '.'
                     __ctype_toupper_loc@GOT:        // __ctype_toupper_loc
0000000000218de0         dq         0x00000000002196f0                          ; DATA XREF=j___ctype_toupper_loc
                     __uflow@GOT:        // __uflow
0000000000218de8         dq         0x00000000002196f8                          ; DATA XREF=j___uflow
                     free@GOT:        // free
0000000000218df0         dq         0x0000000000219700                          ; DATA XREF=j_free
                     abort@GOT:        // abort
0000000000218df8         dq         0x0000000000219708                          ; DATA XREF=j_abort
                     __errno_location@GOT:        // __errno_location
0000000000218e00         dq         0x0000000000219710                          ; DATA XREF=j___errno_location
                     strncmp@GOT:        // strncmp
0000000000218e08         dq         0x0000000000219718                          ; DATA XREF=j_strncmp
                     _exit@GOT:        // _exit
0000000000218e10         dq         0x0000000000219728                          ; DATA XREF=j__exit
                     strcpy@GOT:        // strcpy
0000000000218e18         dq         0x0000000000219730                          ; DATA XREF=j_strcpy
                     __fpending@GOT:        // __fpending
0000000000218e20         dq         0x0000000000219738                          ; DATA XREF=j___fpending
                     clearerr_unlocked@GOT:        // clearerr_unlocked
0000000000218e28         dq         0x0000000000219740                          ; DATA XREF=j_clearerr_unlocked
                     textdomain@GOT:        // textdomain
0000000000218e30         dq         0x0000000000219748                          ; DATA XREF=j_textdomain
                     __strtol_internal@GOT:        // __strtol_internal
0000000000218e38         dq         0x0000000000219750                          ; DATA XREF=j___strtol_internal
                     iswctype@GOT:        // iswctype
0000000000218e40         dq         0x0000000000219758                          ; DATA XREF=j_iswctype
                     fclose@GOT:        // fclose
0000000000218e48         dq         0x0000000000219760                          ; DATA XREF=j_fclose
                     bindtextdomain@GOT:        // bindtextdomain
0000000000218e50         dq         0x0000000000219768                          ; DATA XREF=j_bindtextdomain
                     stpcpy@GOT:        // stpcpy
0000000000218e58         dq         0x0000000000219770                          ; DATA XREF=j_stpcpy
                     dcgettext@GOT:        // dcgettext
0000000000218e60         dq         0x0000000000219778                          ; DATA XREF=j_dcgettext
                     __ctype_get_mb_cur_max@GOT:        // __ctype_get_mb_cur_max
0000000000218e68         dq         0x0000000000219780                          ; DATA XREF=j___ctype_get_mb_cur_max
                     strlen@GOT:        // strlen
0000000000218e70         dq         0x0000000000219788                          ; DATA XREF=j_strlen
                     __stack_chk_fail@GOT:        // __stack_chk_fail
0000000000218e78         dq         0x0000000000219790                          ; DATA XREF=j___stack_chk_fail
                     getopt_long@GOT:        // getopt_long
0000000000218e80         dq         0x0000000000219798                          ; DATA XREF=j_getopt_long
                     mbrtowc@GOT:        // mbrtowc
0000000000218e88         dq         0x00000000002197a0                          ; DATA XREF=j_mbrtowc
                     strchr@GOT:        // strchr
0000000000218e90         dq         0x00000000002197a8                          ; DATA XREF=j_strchr
                     __overflow@GOT:        // __overflow
0000000000218e98         dq         0x00000000002197b0                          ; DATA XREF=j___overflow
                     strrchr@GOT:        // strrchr
0000000000218ea0         dq         0x00000000002197b8                          ; DATA XREF=j_strrchr
                     lseek@GOT:        // lseek
0000000000218ea8         dq         0x00000000002197c0                          ; DATA XREF=j_lseek
                     __assert_fail@GOT:        // __assert_fail
0000000000218eb0         dq         0x00000000002197c8                          ; DATA XREF=j___assert_fail
                     memset@GOT:        // memset
0000000000218eb8         dq         0x00000000002197d0                          ; DATA XREF=j_memset
                     posix_fadvise@GOT:        // posix_fadvise
0000000000218ec0         dq         0x00000000002197d8                          ; DATA XREF=j_posix_fadvise
                     memcmp@GOT:        // memcmp
0000000000218ec8         dq         0x00000000002197e8                          ; DATA XREF=j_memcmp
                     wctype@GOT:        // wctype
0000000000218ed0         dq         0x00000000002197f0                          ; DATA XREF=j_wctype
                     fputs_unlocked@GOT:        // fputs_unlocked
0000000000218ed8         dq         0x00000000002197f8                          ; DATA XREF=j_fputs_unlocked
                     calloc@GOT:        // calloc
0000000000218ee0         dq         0x0000000000219800                          ; DATA XREF=j_calloc
                     strcmp@GOT:        // strcmp
0000000000218ee8         dq         0x0000000000219808                          ; DATA XREF=j_strcmp
                     memcpy@GOT:        // memcpy
0000000000218ef0         dq         0x0000000000219818                          ; DATA XREF=j_memcpy
                     fileno@GOT:        // fileno
0000000000218ef8         dq         0x0000000000219820                          ; DATA XREF=j_fileno
                     iswalnum@GOT:        // iswalnum
0000000000218f00         dq         0x0000000000219828                          ; DATA XREF=j_iswalnum
                     malloc@GOT:        // malloc
0000000000218f08         dq         0x0000000000219830                          ; DATA XREF=j_malloc
                     wcrtomb@GOT:        // wcrtomb
0000000000218f10         dq         0x0000000000219838                          ; DATA XREF=j_wcrtomb
                     fflush@GOT:        // fflush
0000000000218f18         dq         0x0000000000219840                          ; DATA XREF=j_fflush
                     nl_langinfo@GOT:        // nl_langinfo
0000000000218f20         dq         0x0000000000219848                          ; DATA XREF=j_nl_langinfo
                     __freading@GOT:        // __freading
0000000000218f28         dq         0x0000000000219850                          ; DATA XREF=j___freading
                     fwrite_unlocked@GOT:        // fwrite_unlocked
0000000000218f30         dq         0x0000000000219858                          ; DATA XREF=j_fwrite_unlocked
                     realloc@GOT:        // realloc
0000000000218f38         dq         0x0000000000219860                          ; DATA XREF=j_realloc
                     setlocale@GOT:        // setlocale
0000000000218f40         dq         0x0000000000219868                          ; DATA XREF=j_setlocale
                     __printf_chk@GOT:        // __printf_chk
0000000000218f48         dq         0x0000000000219870                          ; DATA XREF=j___printf_chk
                     btowc@GOT:        // btowc
0000000000218f50         dq         0x0000000000219878                          ; DATA XREF=j_btowc
                     memmove@GOT:        // memmove
0000000000218f58         dq         0x0000000000219880                          ; DATA XREF=j_memmove
                     error@GOT:        // error
0000000000218f60         dq         0x0000000000219888                          ; DATA XREF=j_error
                     fseeko@GOT:        // fseeko
0000000000218f68         dq         0x0000000000219890                          ; DATA XREF=j_fseeko
                     fopen@GOT:        // fopen
0000000000218f70         dq         0x0000000000219898                          ; DATA XREF=j_fopen
                     towlower@GOT:        // towlower
0000000000218f78         dq         0x00000000002198a0                          ; DATA XREF=j_towlower
                     towupper@GOT:        // towupper
0000000000218f80         dq         0x00000000002198a8                          ; DATA XREF=j_towupper
                     __cxa_atexit@GOT:        // __cxa_atexit
0000000000218f88         dq         0x00000000002198b0                          ; DATA XREF=j___cxa_atexit
                     exit@GOT:        // exit
0000000000218f90         dq         0x00000000002198b8                          ; DATA XREF=j_exit
                     fwrite@GOT:        // fwrite
0000000000218f98         dq         0x00000000002198c0                          ; DATA XREF=j_fwrite
                     __fprintf_chk@GOT:        // __fprintf_chk
0000000000218fa0         dq         0x00000000002198c8                          ; DATA XREF=j___fprintf_chk
                     mbsinit@GOT:        // mbsinit
0000000000218fa8         dq         0x00000000002198d8                          ; DATA XREF=j_mbsinit
                     iswprint@GOT:        // iswprint
0000000000218fb0         dq         0x00000000002198e0                          ; DATA XREF=j_iswprint
                     __ctype_tolower_loc@GOT:        // __ctype_tolower_loc
0000000000218fb8         dq         0x00000000002198f0                          ; DATA XREF=j___ctype_tolower_loc
                     __ctype_b_loc@GOT:        // __ctype_b_loc
0000000000218fc0         dq         0x00000000002198f8                          ; DATA XREF=j___ctype_b_loc
                     qword_218fc8:
0000000000218fc8         dq         0x0000000000000000                          ; DATA XREF=deregister_tm_clones+23
0000000000218fd0         db  0x00 ; '.'                                         ; DATA XREF=_start+36
0000000000218fd1         db  0x00 ; '.'
0000000000218fd2         db  0x00 ; '.'
0000000000218fd3         db  0x00 ; '.'
0000000000218fd4         db  0x00 ; '.'
0000000000218fd5         db  0x00 ; '.'
0000000000218fd6         db  0x00 ; '.'
0000000000218fd7         db  0x00 ; '.'
                     qword_218fd8:
0000000000218fd8         dq         0x0000000000000000                          ; DATA XREF=_init+4
                     qword_218fe0:
0000000000218fe0         dq         0x0000000000000000                          ; DATA XREF=register_tm_clones+40
                     qword_218fe8:
0000000000218fe8         dq         0x0000000000000000                          ; DATA XREF=j_qword_218fe8, __do_global_dtors_aux+9
0000000000218ff0         db  0x00 ; '.'
0000000000218ff1         db  0x00 ; '.'
0000000000218ff2         db  0x00 ; '.'
0000000000218ff3         db  0x00 ; '.'
0000000000218ff4         db  0x00 ; '.'
0000000000218ff5         db  0x00 ; '.'
0000000000218ff6         db  0x00 ; '.'
0000000000218ff7         db  0x00 ; '.'
0000000000218ff8         db  0x00 ; '.'
0000000000218ff9         db  0x00 ; '.'
0000000000218ffa         db  0x00 ; '.'
0000000000218ffb         db  0x00 ; '.'
0000000000218ffc         db  0x00 ; '.'
0000000000218ffd         db  0x00 ; '.'
0000000000218ffe         db  0x00 ; '.'
0000000000218fff         db  0x00 ; '.'


        ; Section .data
        ; Range: [0x219000; 0x2190e0[ (224 bytes)
        ; File offset : [102400; 102624[ (224 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

0000000000219000         db  0x00 ; '.'
0000000000219001         db  0x00 ; '.'
0000000000219002         db  0x00 ; '.'
0000000000219003         db  0x00 ; '.'
0000000000219004         db  0x00 ; '.'
0000000000219005         db  0x00 ; '.'
0000000000219006         db  0x00 ; '.'
0000000000219007         db  0x00 ; '.'
                     __dso_handle:
0000000000219008         dq         0x0000000000219008                          ; DATA XREF=__do_global_dtors_aux+23, atexit, __dso_handle
                     lineno_width:
0000000000219010         dd         0x00000006                                  ; DATA XREF=main+646, main+1330, main+1367, print_lineno+4
0000000000219014         align      8
                     blank_join:
0000000000219018         dq         0x0000000000000001                          ; DATA XREF=main+995, nl_file+792
                     reset_numbers:
0000000000219020         db         0x01                                        ; DATA XREF=main+432, nl_file+230, nl_file+545, nl_file+625
0000000000219021         align      8
                     page_incr:
0000000000219028         dq         0x0000000000000001                          ; DATA XREF=main+803, print_lineno+50
                     starting_line_number:
0000000000219030         dq         0x0000000000000001                          ; DATA XREF=main+728, main+1398, nl_file+260
                     lineno_format:
0000000000219038         dq         0x0000000000014e50                          ; "%*ld%s", DATA XREF=main+334, main+1076, main+1539, print_lineno+24
                     section_del:
0000000000219040         dq         0x0000000000014e38                          ; DATA XREF=main+265, main+1097, main+1155, main+1222, main+1273, nl_file+137
                     separator_str:
0000000000219048         dq         0x00000000000145ac                          ; DATA XREF=main+823, main+1316, print_lineno+10
                     footer_type:
0000000000219050         dq         0x00000000000144b3                          ; DATA XREF=main+534, nl_file+237
                     header_type:
0000000000219058         dq         0x00000000000144b3                          ; DATA XREF=main+462, nl_file+538
                     body_type:
0000000000219060         dq         0x000000000001458b                          ; DATA XREF=main+854, main+1412, nl_file+618
                     Version:
0000000000219068         dq         0x0000000000014e57                          ; "8.31", DATA XREF=main+374
                     exit_failure:
0000000000219070         dd         0x00000001                                  ; DATA XREF=close_stdout+130, xalloc_die+23
0000000000219074         db  0x00 ; '.'
0000000000219075         db  0x00 ; '.'
0000000000219076         db  0x00 ; '.'
0000000000219077         db  0x00 ; '.'
0000000000219078         db  0x00 ; '.'
0000000000219079         db  0x00 ; '.'
000000000021907a         db  0x00 ; '.'
000000000021907b         db  0x00 ; '.'
000000000021907c         db  0x00 ; '.'
000000000021907d         db  0x00 ; '.'
000000000021907e         db  0x00 ; '.'
000000000021907f         db  0x00 ; '.'
                     quote_quoting_options:
0000000000219080         db  0x08 ; '.'                                         ; DATA XREF=quote_n_mem, quote_mem, quote_n, quote
0000000000219081         db  0x00 ; '.'
0000000000219082         db  0x00 ; '.'
0000000000219083         db  0x00 ; '.'
0000000000219084         db  0x00 ; '.'
0000000000219085         db  0x00 ; '.'
0000000000219086         db  0x00 ; '.'
0000000000219087         db  0x00 ; '.'
0000000000219088         db  0x00 ; '.'
0000000000219089         db  0x00 ; '.'
000000000021908a         db  0x00 ; '.'
000000000021908b         db  0x00 ; '.'
000000000021908c         db  0x00 ; '.'
000000000021908d         db  0x00 ; '.'
000000000021908e         db  0x00 ; '.'
000000000021908f         db  0x00 ; '.'
0000000000219090         db  0x00 ; '.'
0000000000219091         db  0x00 ; '.'
0000000000219092         db  0x00 ; '.'
0000000000219093         db  0x00 ; '.'
0000000000219094         db  0x00 ; '.'
0000000000219095         db  0x00 ; '.'
0000000000219096         db  0x00 ; '.'
0000000000219097         db  0x00 ; '.'
0000000000219098         db  0x00 ; '.'
0000000000219099         db  0x00 ; '.'
000000000021909a         db  0x00 ; '.'
000000000021909b         db  0x00 ; '.'
000000000021909c         db  0x00 ; '.'
000000000021909d         db  0x00 ; '.'
000000000021909e         db  0x00 ; '.'
000000000021909f         db  0x00 ; '.'
00000000002190a0         db  0x00 ; '.'
00000000002190a1         db  0x00 ; '.'
00000000002190a2         db  0x00 ; '.'
00000000002190a3         db  0x00 ; '.'
00000000002190a4         db  0x00 ; '.'
00000000002190a5         db  0x00 ; '.'
00000000002190a6         db  0x00 ; '.'
00000000002190a7         db  0x00 ; '.'
00000000002190a8         db  0x00 ; '.'
00000000002190a9         db  0x00 ; '.'
00000000002190aa         db  0x00 ; '.'
00000000002190ab         db  0x00 ; '.'
00000000002190ac         db  0x00 ; '.'
00000000002190ad         db  0x00 ; '.'
00000000002190ae         db  0x00 ; '.'
00000000002190af         db  0x00 ; '.'
00000000002190b0         db  0x00 ; '.'
00000000002190b1         db  0x00 ; '.'
00000000002190b2         db  0x00 ; '.'
00000000002190b3         db  0x00 ; '.'
00000000002190b4         db  0x00 ; '.'
00000000002190b5         db  0x00 ; '.'
00000000002190b6         db  0x00 ; '.'
00000000002190b7         db  0x00 ; '.'
                     nslots:
00000000002190b8         dd         0x00000001                                  ; DATA XREF=quotearg_n_options+58, quotearg_n_options+125, quotearg_n_options+158, quotearg_free, quotearg_free+133
00000000002190bc         align      64
                     slotvec:
00000000002190c0         dq         0x00000000002190d0                          ; DATA XREF=quotearg_n_options+41, quotearg_n_options+118, quotearg_n_options+402, quotearg_free+8, quotearg_free+125
00000000002190c8         db  0x00 ; '.'
00000000002190c9         db  0x00 ; '.'
00000000002190ca         db  0x00 ; '.'
00000000002190cb         db  0x00 ; '.'
00000000002190cc         db  0x00 ; '.'
00000000002190cd         db  0x00 ; '.'
00000000002190ce         db  0x00 ; '.'
00000000002190cf         db  0x00 ; '.'
                     slotvec0:
00000000002190d0         dq         1.26481e-321, 1.08743e-317                  ; DATA XREF=quotearg_n_options+84, quotearg_n_options+391, quotearg_free+87, quotearg_free+105, slotvec


        ; Section .bss
        ; Range: [0x2190e0; 0x2196e0[ (1536 bytes)
        ; No data on disk
        ; Flags: 0x3
        ;   SHT_NOBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     program_invocation_short_name@@GLIBC_2.2.5:
00000000002190e0         db  0x00 ; '.'                                         ; DATA XREF=deregister_tm_clones, deregister_tm_clones+8, register_tm_clones, register_tm_clones+7, set_program_name+102
00000000002190e1         db  0x00 ; '.'
00000000002190e2         db  0x00 ; '.'
00000000002190e3         db  0x00 ; '.'
00000000002190e4         db  0x00 ; '.'
00000000002190e5         db  0x00 ; '.'
00000000002190e6         db  0x00 ; '.'
00000000002190e7         db  0x00 ; '.'
                     stdout@@GLIBC_2.2.5:
00000000002190e8         db  0x00 ; '.'                                         ; DATA XREF=main+367, nl_file+274, nl_file+474, nl_file+722, usage+125, usage+162, usage+199, usage+236, usage+273, usage+310, usage+347
00000000002190e9         db  0x00 ; '.'
00000000002190ea         db  0x00 ; '.'
00000000002190eb         db  0x00 ; '.'
00000000002190ec         db  0x00 ; '.'
00000000002190ed         db  0x00 ; '.'
00000000002190ee         db  0x00 ; '.'
00000000002190ef         db  0x00 ; '.'
                     stdin@@GLIBC_2.2.5:
00000000002190f0         db  0x00 ; '.'                                         ; DATA XREF=main+1551, nl_file+49
00000000002190f1         db  0x00 ; '.'
00000000002190f2         db  0x00 ; '.'
00000000002190f3         db  0x00 ; '.'
00000000002190f4         db  0x00 ; '.'
00000000002190f5         db  0x00 ; '.'
00000000002190f6         db  0x00 ; '.'
00000000002190f7         db  0x00 ; '.'
                     optind@@GLIBC_2.2.5:
00000000002190f8         db  0x00 ; '.'                                         ; DATA XREF=main+1440, main+1470, main+1481
00000000002190f9         db  0x00 ; '.'
00000000002190fa         db  0x00 ; '.'
00000000002190fb         db  0x00 ; '.'
00000000002190fc         db  0x00 ; '.'
00000000002190fd         db  0x00 ; '.'
00000000002190fe         db  0x00 ; '.'
00000000002190ff         db  0x00 ; '.'
                     optarg@@GLIBC_2.2.5:
0000000000219100         db  0x00 ; '.'                                         ; DATA XREF=main+258, main+294, main+482, main+554, main+611, main+683, main+763, main+816, main+874, main+955, build_type_arg
0000000000219101         db  0x00 ; '.'
0000000000219102         db  0x00 ; '.'
0000000000219103         db  0x00 ; '.'
0000000000219104         db  0x00 ; '.'
0000000000219105         db  0x00 ; '.'
0000000000219106         db  0x00 ; '.'
0000000000219107         db  0x00 ; '.'
                     __progname_full@@GLIBC_2.2.5:
0000000000219108         db  0x00 ; '.'                                         ; DATA XREF=set_program_name+116
0000000000219109         db  0x00 ; '.'
000000000021910a         db  0x00 ; '.'
000000000021910b         db  0x00 ; '.'
000000000021910c         db  0x00 ; '.'
000000000021910d         db  0x00 ; '.'
000000000021910e         db  0x00 ; '.'
000000000021910f         db  0x00 ; '.'
0000000000219110         db  0x00 ; '.'
0000000000219111         db  0x00 ; '.'
0000000000219112         db  0x00 ; '.'
0000000000219113         db  0x00 ; '.'
0000000000219114         db  0x00 ; '.'
0000000000219115         db  0x00 ; '.'
0000000000219116         db  0x00 ; '.'
0000000000219117         db  0x00 ; '.'
0000000000219118         db  0x00 ; '.'
0000000000219119         db  0x00 ; '.'
000000000021911a         db  0x00 ; '.'
000000000021911b         db  0x00 ; '.'
000000000021911c         db  0x00 ; '.'
000000000021911d         db  0x00 ; '.'
000000000021911e         db  0x00 ; '.'
000000000021911f         db  0x00 ; '.'
                     stderr@@GLIBC_2.2.5:
0000000000219120         db  0x00 ; '.'                                         ; DATA XREF=usage+61, close_stdout+44, set_program_name+125
0000000000219121         db  0x00 ; '.'
0000000000219122         db  0x00 ; '.'
0000000000219123         db  0x00 ; '.'
0000000000219124         db  0x00 ; '.'
0000000000219125         db  0x00 ; '.'
0000000000219126         db  0x00 ; '.'
0000000000219127         db  0x00 ; '.'
                     completed.7697:
0000000000219128         db  0x00 ; '.'                                         ; DATA XREF=__do_global_dtors_aux, __do_global_dtors_aux+40
0000000000219129         db  0x00 ; '.'
000000000021912a         db  0x00 ; '.'
000000000021912b         db  0x00 ; '.'
000000000021912c         db  0x00 ; '.'
000000000021912d         db  0x00 ; '.'
000000000021912e         db  0x00 ; '.'
000000000021912f         db  0x00 ; '.'
0000000000219130         db  0x00 ; '.'
0000000000219131         db  0x00 ; '.'
0000000000219132         db  0x00 ; '.'
0000000000219133         db  0x00 ; '.'
0000000000219134         db  0x00 ; '.'
0000000000219135         db  0x00 ; '.'
0000000000219136         db  0x00 ; '.'
0000000000219137         db  0x00 ; '.'
0000000000219138         db  0x00 ; '.'
0000000000219139         db  0x00 ; '.'
000000000021913a         db  0x00 ; '.'
000000000021913b         db  0x00 ; '.'
000000000021913c         db  0x00 ; '.'
000000000021913d         db  0x00 ; '.'
000000000021913e         db  0x00 ; '.'
000000000021913f         db  0x00 ; '.'
                     blank_lines.7093:
0000000000219140         db  0x00 ; '.'                                         ; DATA XREF=nl_file+815, nl_file+829, nl_file+843
0000000000219141         db  0x00 ; '.'
0000000000219142         db  0x00 ; '.'
0000000000219143         db  0x00 ; '.'
0000000000219144         db  0x00 ; '.'
0000000000219145         db  0x00 ; '.'
0000000000219146         db  0x00 ; '.'
0000000000219147         db  0x00 ; '.'
                     have_read_stdin:
0000000000219148         db  0x00 ; '.'                                         ; DATA XREF=main+114, main+1489, nl_file+56
0000000000219149         db  0x00 ; '.'
000000000021914a         db  0x00 ; '.'
000000000021914b         db  0x00 ; '.'
000000000021914c         db  0x00 ; '.'
000000000021914d         db  0x00 ; '.'
000000000021914e         db  0x00 ; '.'
000000000021914f         db  0x00 ; '.'
                     line_no:
0000000000219150         db  0x00 ; '.'                                         ; DATA XREF=main+1405, print_lineno+17, print_lineno+43, print_lineno+65, nl_file+267
0000000000219151         db  0x00 ; '.'
0000000000219152         db  0x00 ; '.'
0000000000219153         db  0x00 ; '.'
0000000000219154         db  0x00 ; '.'
0000000000219155         db  0x00 ; '.'
0000000000219156         db  0x00 ; '.'
0000000000219157         db  0x00 ; '.'
                     print_no_line_fmt:
0000000000219158         db  0x00 ; '.'                                         ; DATA XREF=main+1360, nl_file+729
0000000000219159         db  0x00 ; '.'
000000000021915a         db  0x00 ; '.'
000000000021915b         db  0x00 ; '.'
000000000021915c         db  0x00 ; '.'
000000000021915d         db  0x00 ; '.'
000000000021915e         db  0x00 ; '.'
000000000021915f         db  0x00 ; '.'
                     line_buf:
0000000000219160         db  0x00 ; '.'                                         ; DATA XREF=main+1295, nl_file+63
0000000000219161         db  0x00 ; '.'
0000000000219162         db  0x00 ; '.'
0000000000219163         db  0x00 ; '.'
0000000000219164         db  0x00 ; '.'
0000000000219165         db  0x00 ; '.'
0000000000219166         db  0x00 ; '.'
0000000000219167         db  0x00 ; '.'
                     qword_219168:
0000000000219168         db  0x00 ; '.'                                         ; DATA XREF=nl_file+116, nl_file+467, nl_file+741, nl_file+854
0000000000219169         db  0x00 ; '.'
000000000021916a         db  0x00 ; '.'
000000000021916b         db  0x00 ; '.'
000000000021916c         db  0x00 ; '.'
000000000021916d         db  0x00 ; '.'
000000000021916e         db  0x00 ; '.'
000000000021916f         db  0x00 ; '.'
                     qword_219170:
0000000000219170         db  0x00 ; '.'                                         ; DATA XREF=nl_file+144, nl_file+481, nl_file+672
0000000000219171         db  0x00 ; '.'
0000000000219172         db  0x00 ; '.'
0000000000219173         db  0x00 ; '.'
0000000000219174         db  0x00 ; '.'
0000000000219175         db  0x00 ; '.'
0000000000219176         db  0x00 ; '.'
0000000000219177         db  0x00 ; '.'
                     footer_del_len:
0000000000219178         db  0x00 ; '.'                                         ; DATA XREF=main+1261, nl_file+191
0000000000219179         db  0x00 ; '.'
000000000021917a         db  0x00 ; '.'
000000000021917b         db  0x00 ; '.'
000000000021917c         db  0x00 ; '.'
000000000021917d         db  0x00 ; '.'
000000000021917e         db  0x00 ; '.'
000000000021917f         db  0x00 ; '.'
                     footer_del:
0000000000219180         db  0x00 ; '.'                                         ; DATA XREF=main+1283, nl_file+204
0000000000219181         db  0x00 ; '.'
0000000000219182         db  0x00 ; '.'
0000000000219183         db  0x00 ; '.'
0000000000219184         db  0x00 ; '.'
0000000000219185         db  0x00 ; '.'
0000000000219186         db  0x00 ; '.'
0000000000219187         db  0x00 ; '.'
                     body_del_len:
0000000000219188         db  0x00 ; '.'                                         ; DATA XREF=main+1206, nl_file+178
0000000000219189         db  0x00 ; '.'
000000000021918a         db  0x00 ; '.'
000000000021918b         db  0x00 ; '.'
000000000021918c         db  0x00 ; '.'
000000000021918d         db  0x00 ; '.'
000000000021918e         db  0x00 ; '.'
000000000021918f         db  0x00 ; '.'
                     body_del:
0000000000219190         db  0x00 ; '.'                                         ; DATA XREF=main+1232, nl_file+592
0000000000219191         db  0x00 ; '.'
0000000000219192         db  0x00 ; '.'
0000000000219193         db  0x00 ; '.'
0000000000219194         db  0x00 ; '.'
0000000000219195         db  0x00 ; '.'
0000000000219196         db  0x00 ; '.'
0000000000219197         db  0x00 ; '.'
                     header_del_len:
0000000000219198         db  0x00 ; '.'                                         ; DATA XREF=main+1139, nl_file+165
0000000000219199         db  0x00 ; '.'
000000000021919a         db  0x00 ; '.'
000000000021919b         db  0x00 ; '.'
000000000021919c         db  0x00 ; '.'
000000000021919d         db  0x00 ; '.'
000000000021919e         db  0x00 ; '.'
000000000021919f         db  0x00 ; '.'
                     header_del:
00000000002191a0         db  0x00 ; '.'                                         ; DATA XREF=main+1165, nl_file+512
00000000002191a1         db  0x00 ; '.'
00000000002191a2         db  0x00 ; '.'
00000000002191a3         db  0x00 ; '.'
00000000002191a4         db  0x00 ; '.'
00000000002191a5         db  0x00 ; '.'
00000000002191a6         db  0x00 ; '.'
00000000002191a7         db  0x00 ; '.'
                     current_regex:
00000000002191a8         db  0x00 ; '.'                                         ; DATA XREF=main+1433, nl_file+244, nl_file+566, nl_file+646, nl_file+679
00000000002191a9         db  0x00 ; '.'
00000000002191aa         db  0x00 ; '.'
00000000002191ab         db  0x00 ; '.'
00000000002191ac         db  0x00 ; '.'
00000000002191ad         db  0x00 ; '.'
00000000002191ae         db  0x00 ; '.'
00000000002191af         db  0x00 ; '.'
00000000002191b0         db  0x00 ; '.'
00000000002191b1         db  0x00 ; '.'
00000000002191b2         db  0x00 ; '.'
00000000002191b3         db  0x00 ; '.'
00000000002191b4         db  0x00 ; '.'
00000000002191b5         db  0x00 ; '.'
00000000002191b6         db  0x00 ; '.'
00000000002191b7         db  0x00 ; '.'
00000000002191b8         db  0x00 ; '.'
00000000002191b9         db  0x00 ; '.'
00000000002191ba         db  0x00 ; '.'
00000000002191bb         db  0x00 ; '.'
00000000002191bc         db  0x00 ; '.'
00000000002191bd         db  0x00 ; '.'
00000000002191be         db  0x00 ; '.'
00000000002191bf         db  0x00 ; '.'
                     footer_fastmap:
00000000002191c0         db  0x00 ; '.'                                         ; DATA XREF=main+520
00000000002191c1         db  0x00 ; '.'
00000000002191c2         db  0x00 ; '.'
00000000002191c3         db  0x00 ; '.'
00000000002191c4         db  0x00 ; '.'
00000000002191c5         db  0x00 ; '.'
00000000002191c6         db  0x00 ; '.'
00000000002191c7         db  0x00 ; '.'
00000000002191c8         db  0x00 ; '.'
00000000002191c9         db  0x00 ; '.'
00000000002191ca         db  0x00 ; '.'
00000000002191cb         db  0x00 ; '.'
00000000002191cc         db  0x00 ; '.'
00000000002191cd         db  0x00 ; '.'
00000000002191ce         db  0x00 ; '.'
00000000002191cf         db  0x00 ; '.'
00000000002191d0         db  0x00 ; '.'
00000000002191d1         db  0x00 ; '.'
00000000002191d2         db  0x00 ; '.'
00000000002191d3         db  0x00 ; '.'
00000000002191d4         db  0x00 ; '.'
00000000002191d5         db  0x00 ; '.'
00000000002191d6         db  0x00 ; '.'
00000000002191d7         db  0x00 ; '.'
00000000002191d8         db  0x00 ; '.'
00000000002191d9         db  0x00 ; '.'
00000000002191da         db  0x00 ; '.'
00000000002191db         db  0x00 ; '.'
00000000002191dc         db  0x00 ; '.'
00000000002191dd         db  0x00 ; '.'
00000000002191de         db  0x00 ; '.'
00000000002191df         db  0x00 ; '.'
00000000002191e0         db  0x00 ; '.'
00000000002191e1         db  0x00 ; '.'
00000000002191e2         db  0x00 ; '.'
00000000002191e3         db  0x00 ; '.'
00000000002191e4         db  0x00 ; '.'
00000000002191e5         db  0x00 ; '.'
00000000002191e6         db  0x00 ; '.'
00000000002191e7         db  0x00 ; '.'
00000000002191e8         db  0x00 ; '.'
00000000002191e9         db  0x00 ; '.'
00000000002191ea         db  0x00 ; '.'
00000000002191eb         db  0x00 ; '.'
00000000002191ec         db  0x00 ; '.'
00000000002191ed         db  0x00 ; '.'
00000000002191ee         db  0x00 ; '.'
00000000002191ef         db  0x00 ; '.'
00000000002191f0         db  0x00 ; '.'
00000000002191f1         db  0x00 ; '.'
00000000002191f2         db  0x00 ; '.'
00000000002191f3         db  0x00 ; '.'
00000000002191f4         db  0x00 ; '.'
00000000002191f5         db  0x00 ; '.'
00000000002191f6         db  0x00 ; '.'
00000000002191f7         db  0x00 ; '.'
00000000002191f8         db  0x00 ; '.'
00000000002191f9         db  0x00 ; '.'
00000000002191fa         db  0x00 ; '.'
00000000002191fb         db  0x00 ; '.'
00000000002191fc         db  0x00 ; '.'
00000000002191fd         db  0x00 ; '.'
00000000002191fe         db  0x00 ; '.'
00000000002191ff         db  0x00 ; '.'
0000000000219200         db  0x00 ; '.'
0000000000219201         db  0x00 ; '.'
0000000000219202         db  0x00 ; '.'
0000000000219203         db  0x00 ; '.'
0000000000219204         db  0x00 ; '.'
0000000000219205         db  0x00 ; '.'
0000000000219206         db  0x00 ; '.'
0000000000219207         db  0x00 ; '.'
0000000000219208         db  0x00 ; '.'
0000000000219209         db  0x00 ; '.'
000000000021920a         db  0x00 ; '.'
000000000021920b         db  0x00 ; '.'
000000000021920c         db  0x00 ; '.'
000000000021920d         db  0x00 ; '.'
000000000021920e         db  0x00 ; '.'
000000000021920f         db  0x00 ; '.'
0000000000219210         db  0x00 ; '.'
0000000000219211         db  0x00 ; '.'
0000000000219212         db  0x00 ; '.'
0000000000219213         db  0x00 ; '.'
0000000000219214         db  0x00 ; '.'
0000000000219215         db  0x00 ; '.'
0000000000219216         db  0x00 ; '.'
0000000000219217         db  0x00 ; '.'
0000000000219218         db  0x00 ; '.'
0000000000219219         db  0x00 ; '.'
000000000021921a         db  0x00 ; '.'
000000000021921b         db  0x00 ; '.'
000000000021921c         db  0x00 ; '.'
000000000021921d         db  0x00 ; '.'
000000000021921e         db  0x00 ; '.'
000000000021921f         db  0x00 ; '.'
0000000000219220         db  0x00 ; '.'
0000000000219221         db  0x00 ; '.'
0000000000219222         db  0x00 ; '.'
0000000000219223         db  0x00 ; '.'
0000000000219224         db  0x00 ; '.'
0000000000219225         db  0x00 ; '.'
0000000000219226         db  0x00 ; '.'
0000000000219227         db  0x00 ; '.'
0000000000219228         db  0x00 ; '.'
0000000000219229         db  0x00 ; '.'
000000000021922a         db  0x00 ; '.'
000000000021922b         db  0x00 ; '.'
000000000021922c         db  0x00 ; '.'
000000000021922d         db  0x00 ; '.'
000000000021922e         db  0x00 ; '.'
000000000021922f         db  0x00 ; '.'
0000000000219230         db  0x00 ; '.'
0000000000219231         db  0x00 ; '.'
0000000000219232         db  0x00 ; '.'
0000000000219233         db  0x00 ; '.'
0000000000219234         db  0x00 ; '.'
0000000000219235         db  0x00 ; '.'
0000000000219236         db  0x00 ; '.'
0000000000219237         db  0x00 ; '.'
0000000000219238         db  0x00 ; '.'
0000000000219239         db  0x00 ; '.'
000000000021923a         db  0x00 ; '.'
000000000021923b         db  0x00 ; '.'
000000000021923c         db  0x00 ; '.'
000000000021923d         db  0x00 ; '.'
000000000021923e         db  0x00 ; '.'
000000000021923f         db  0x00 ; '.'
0000000000219240         db  0x00 ; '.'
0000000000219241         db  0x00 ; '.'
0000000000219242         db  0x00 ; '.'
0000000000219243         db  0x00 ; '.'
0000000000219244         db  0x00 ; '.'
0000000000219245         db  0x00 ; '.'
0000000000219246         db  0x00 ; '.'
0000000000219247         db  0x00 ; '.'
0000000000219248         db  0x00 ; '.'
0000000000219249         db  0x00 ; '.'
000000000021924a         db  0x00 ; '.'
000000000021924b         db  0x00 ; '.'
000000000021924c         db  0x00 ; '.'
000000000021924d         db  0x00 ; '.'
000000000021924e         db  0x00 ; '.'
000000000021924f         db  0x00 ; '.'
0000000000219250         db  0x00 ; '.'
0000000000219251         db  0x00 ; '.'
0000000000219252         db  0x00 ; '.'
0000000000219253         db  0x00 ; '.'
0000000000219254         db  0x00 ; '.'
0000000000219255         db  0x00 ; '.'
0000000000219256         db  0x00 ; '.'
0000000000219257         db  0x00 ; '.'
0000000000219258         db  0x00 ; '.'
0000000000219259         db  0x00 ; '.'
000000000021925a         db  0x00 ; '.'
000000000021925b         db  0x00 ; '.'
000000000021925c         db  0x00 ; '.'
000000000021925d         db  0x00 ; '.'
000000000021925e         db  0x00 ; '.'
000000000021925f         db  0x00 ; '.'
0000000000219260         db  0x00 ; '.'
0000000000219261         db  0x00 ; '.'
0000000000219262         db  0x00 ; '.'
0000000000219263         db  0x00 ; '.'
0000000000219264         db  0x00 ; '.'
0000000000219265         db  0x00 ; '.'
0000000000219266         db  0x00 ; '.'
0000000000219267         db  0x00 ; '.'
0000000000219268         db  0x00 ; '.'
0000000000219269         db  0x00 ; '.'
000000000021926a         db  0x00 ; '.'
000000000021926b         db  0x00 ; '.'
000000000021926c         db  0x00 ; '.'
000000000021926d         db  0x00 ; '.'
000000000021926e         db  0x00 ; '.'
000000000021926f         db  0x00 ; '.'
0000000000219270         db  0x00 ; '.'
0000000000219271         db  0x00 ; '.'
0000000000219272         db  0x00 ; '.'
0000000000219273         db  0x00 ; '.'
0000000000219274         db  0x00 ; '.'
0000000000219275         db  0x00 ; '.'
0000000000219276         db  0x00 ; '.'
0000000000219277         db  0x00 ; '.'
0000000000219278         db  0x00 ; '.'
0000000000219279         db  0x00 ; '.'
000000000021927a         db  0x00 ; '.'
000000000021927b         db  0x00 ; '.'
000000000021927c         db  0x00 ; '.'
000000000021927d         db  0x00 ; '.'
000000000021927e         db  0x00 ; '.'
000000000021927f         db  0x00 ; '.'
0000000000219280         db  0x00 ; '.'
0000000000219281         db  0x00 ; '.'
0000000000219282         db  0x00 ; '.'
0000000000219283         db  0x00 ; '.'
0000000000219284         db  0x00 ; '.'
0000000000219285         db  0x00 ; '.'
0000000000219286         db  0x00 ; '.'
0000000000219287         db  0x00 ; '.'
0000000000219288         db  0x00 ; '.'
0000000000219289         db  0x00 ; '.'
000000000021928a         db  0x00 ; '.'
000000000021928b         db  0x00 ; '.'
000000000021928c         db  0x00 ; '.'
000000000021928d         db  0x00 ; '.'
000000000021928e         db  0x00 ; '.'
000000000021928f         db  0x00 ; '.'
0000000000219290         db  0x00 ; '.'
0000000000219291         db  0x00 ; '.'
0000000000219292         db  0x00 ; '.'
0000000000219293         db  0x00 ; '.'
0000000000219294         db  0x00 ; '.'
0000000000219295         db  0x00 ; '.'
0000000000219296         db  0x00 ; '.'
0000000000219297         db  0x00 ; '.'
0000000000219298         db  0x00 ; '.'
0000000000219299         db  0x00 ; '.'
000000000021929a         db  0x00 ; '.'
000000000021929b         db  0x00 ; '.'
000000000021929c         db  0x00 ; '.'
000000000021929d         db  0x00 ; '.'
000000000021929e         db  0x00 ; '.'
000000000021929f         db  0x00 ; '.'
00000000002192a0         db  0x00 ; '.'
00000000002192a1         db  0x00 ; '.'
00000000002192a2         db  0x00 ; '.'
00000000002192a3         db  0x00 ; '.'
00000000002192a4         db  0x00 ; '.'
00000000002192a5         db  0x00 ; '.'
00000000002192a6         db  0x00 ; '.'
00000000002192a7         db  0x00 ; '.'
00000000002192a8         db  0x00 ; '.'
00000000002192a9         db  0x00 ; '.'
00000000002192aa         db  0x00 ; '.'
00000000002192ab         db  0x00 ; '.'
00000000002192ac         db  0x00 ; '.'
00000000002192ad         db  0x00 ; '.'
00000000002192ae         db  0x00 ; '.'
00000000002192af         db  0x00 ; '.'
00000000002192b0         db  0x00 ; '.'
00000000002192b1         db  0x00 ; '.'
00000000002192b2         db  0x00 ; '.'
00000000002192b3         db  0x00 ; '.'
00000000002192b4         db  0x00 ; '.'
00000000002192b5         db  0x00 ; '.'
00000000002192b6         db  0x00 ; '.'
00000000002192b7         db  0x00 ; '.'
00000000002192b8         db  0x00 ; '.'
00000000002192b9         db  0x00 ; '.'
00000000002192ba         db  0x00 ; '.'
00000000002192bb         db  0x00 ; '.'
00000000002192bc         db  0x00 ; '.'
00000000002192bd         db  0x00 ; '.'
00000000002192be         db  0x00 ; '.'
00000000002192bf         db  0x00 ; '.'
                     header_fastmap:
00000000002192c0         db  0x00 ; '.'                                         ; DATA XREF=main+448
00000000002192c1         db  0x00 ; '.'
00000000002192c2         db  0x00 ; '.'
00000000002192c3         db  0x00 ; '.'
00000000002192c4         db  0x00 ; '.'
00000000002192c5         db  0x00 ; '.'
00000000002192c6         db  0x00 ; '.'
00000000002192c7         db  0x00 ; '.'
00000000002192c8         db  0x00 ; '.'
00000000002192c9         db  0x00 ; '.'
00000000002192ca         db  0x00 ; '.'
00000000002192cb         db  0x00 ; '.'
00000000002192cc         db  0x00 ; '.'
00000000002192cd         db  0x00 ; '.'
00000000002192ce         db  0x00 ; '.'
00000000002192cf         db  0x00 ; '.'
00000000002192d0         db  0x00 ; '.'
00000000002192d1         db  0x00 ; '.'
00000000002192d2         db  0x00 ; '.'
00000000002192d3         db  0x00 ; '.'
00000000002192d4         db  0x00 ; '.'
00000000002192d5         db  0x00 ; '.'
00000000002192d6         db  0x00 ; '.'
00000000002192d7         db  0x00 ; '.'
00000000002192d8         db  0x00 ; '.'
00000000002192d9         db  0x00 ; '.'
00000000002192da         db  0x00 ; '.'
00000000002192db         db  0x00 ; '.'
00000000002192dc         db  0x00 ; '.'
00000000002192dd         db  0x00 ; '.'
00000000002192de         db  0x00 ; '.'
00000000002192df         db  0x00 ; '.'
00000000002192e0         db  0x00 ; '.'
00000000002192e1         db  0x00 ; '.'
00000000002192e2         db  0x00 ; '.'
00000000002192e3         db  0x00 ; '.'
00000000002192e4         db  0x00 ; '.'
00000000002192e5         db  0x00 ; '.'
00000000002192e6         db  0x00 ; '.'
00000000002192e7         db  0x00 ; '.'
00000000002192e8         db  0x00 ; '.'
00000000002192e9         db  0x00 ; '.'
00000000002192ea         db  0x00 ; '.'
00000000002192eb         db  0x00 ; '.'
00000000002192ec         db  0x00 ; '.'
00000000002192ed         db  0x00 ; '.'
00000000002192ee         db  0x00 ; '.'
00000000002192ef         db  0x00 ; '.'
00000000002192f0         db  0x00 ; '.'
00000000002192f1         db  0x00 ; '.'
00000000002192f2         db  0x00 ; '.'
00000000002192f3         db  0x00 ; '.'
00000000002192f4         db  0x00 ; '.'
00000000002192f5         db  0x00 ; '.'
00000000002192f6         db  0x00 ; '.'
00000000002192f7         db  0x00 ; '.'
00000000002192f8         db  0x00 ; '.'
00000000002192f9         db  0x00 ; '.'
00000000002192fa         db  0x00 ; '.'
00000000002192fb         db  0x00 ; '.'
00000000002192fc         db  0x00 ; '.'
00000000002192fd         db  0x00 ; '.'
00000000002192fe         db  0x00 ; '.'
00000000002192ff         db  0x00 ; '.'
0000000000219300         db  0x00 ; '.'
0000000000219301         db  0x00 ; '.'
0000000000219302         db  0x00 ; '.'
0000000000219303         db  0x00 ; '.'
0000000000219304         db  0x00 ; '.'
0000000000219305         db  0x00 ; '.'
0000000000219306         db  0x00 ; '.'
0000000000219307         db  0x00 ; '.'
0000000000219308         db  0x00 ; '.'
0000000000219309         db  0x00 ; '.'
000000000021930a         db  0x00 ; '.'
000000000021930b         db  0x00 ; '.'
000000000021930c         db  0x00 ; '.'
000000000021930d         db  0x00 ; '.'
000000000021930e         db  0x00 ; '.'
000000000021930f         db  0x00 ; '.'
0000000000219310         db  0x00 ; '.'
0000000000219311         db  0x00 ; '.'
0000000000219312         db  0x00 ; '.'
0000000000219313         db  0x00 ; '.'
0000000000219314         db  0x00 ; '.'
0000000000219315         db  0x00 ; '.'
0000000000219316         db  0x00 ; '.'
0000000000219317         db  0x00 ; '.'
0000000000219318         db  0x00 ; '.'
0000000000219319         db  0x00 ; '.'
000000000021931a         db  0x00 ; '.'
000000000021931b         db  0x00 ; '.'
000000000021931c         db  0x00 ; '.'
000000000021931d         db  0x00 ; '.'
000000000021931e         db  0x00 ; '.'
000000000021931f         db  0x00 ; '.'
0000000000219320         db  0x00 ; '.'
0000000000219321         db  0x00 ; '.'
0000000000219322         db  0x00 ; '.'
0000000000219323         db  0x00 ; '.'
0000000000219324         db  0x00 ; '.'
0000000000219325         db  0x00 ; '.'
0000000000219326         db  0x00 ; '.'
0000000000219327         db  0x00 ; '.'
0000000000219328         db  0x00 ; '.'
0000000000219329         db  0x00 ; '.'
000000000021932a         db  0x00 ; '.'
000000000021932b         db  0x00 ; '.'
000000000021932c         db  0x00 ; '.'
000000000021932d         db  0x00 ; '.'
000000000021932e         db  0x00 ; '.'
000000000021932f         db  0x00 ; '.'
0000000000219330         db  0x00 ; '.'
0000000000219331         db  0x00 ; '.'
0000000000219332         db  0x00 ; '.'
0000000000219333         db  0x00 ; '.'
0000000000219334         db  0x00 ; '.'
0000000000219335         db  0x00 ; '.'
0000000000219336         db  0x00 ; '.'
0000000000219337         db  0x00 ; '.'
0000000000219338         db  0x00 ; '.'
0000000000219339         db  0x00 ; '.'
000000000021933a         db  0x00 ; '.'
000000000021933b         db  0x00 ; '.'
000000000021933c         db  0x00 ; '.'
000000000021933d         db  0x00 ; '.'
000000000021933e         db  0x00 ; '.'
000000000021933f         db  0x00 ; '.'
0000000000219340         db  0x00 ; '.'
0000000000219341         db  0x00 ; '.'
0000000000219342         db  0x00 ; '.'
0000000000219343         db  0x00 ; '.'
0000000000219344         db  0x00 ; '.'
0000000000219345         db  0x00 ; '.'
0000000000219346         db  0x00 ; '.'
0000000000219347         db  0x00 ; '.'
0000000000219348         db  0x00 ; '.'
0000000000219349         db  0x00 ; '.'
000000000021934a         db  0x00 ; '.'
000000000021934b         db  0x00 ; '.'
000000000021934c         db  0x00 ; '.'
000000000021934d         db  0x00 ; '.'
000000000021934e         db  0x00 ; '.'
000000000021934f         db  0x00 ; '.'
0000000000219350         db  0x00 ; '.'
0000000000219351         db  0x00 ; '.'
0000000000219352         db  0x00 ; '.'
0000000000219353         db  0x00 ; '.'
0000000000219354         db  0x00 ; '.'
0000000000219355         db  0x00 ; '.'
0000000000219356         db  0x00 ; '.'
0000000000219357         db  0x00 ; '.'
0000000000219358         db  0x00 ; '.'
0000000000219359         db  0x00 ; '.'
000000000021935a         db  0x00 ; '.'
000000000021935b         db  0x00 ; '.'
000000000021935c         db  0x00 ; '.'
000000000021935d         db  0x00 ; '.'
000000000021935e         db  0x00 ; '.'
000000000021935f         db  0x00 ; '.'
0000000000219360         db  0x00 ; '.'
0000000000219361         db  0x00 ; '.'
0000000000219362         db  0x00 ; '.'
0000000000219363         db  0x00 ; '.'
0000000000219364         db  0x00 ; '.'
0000000000219365         db  0x00 ; '.'
0000000000219366         db  0x00 ; '.'
0000000000219367         db  0x00 ; '.'
0000000000219368         db  0x00 ; '.'
0000000000219369         db  0x00 ; '.'
000000000021936a         db  0x00 ; '.'
000000000021936b         db  0x00 ; '.'
000000000021936c         db  0x00 ; '.'
000000000021936d         db  0x00 ; '.'
000000000021936e         db  0x00 ; '.'
000000000021936f         db  0x00 ; '.'
0000000000219370         db  0x00 ; '.'
0000000000219371         db  0x00 ; '.'
0000000000219372         db  0x00 ; '.'
0000000000219373         db  0x00 ; '.'
0000000000219374         db  0x00 ; '.'
0000000000219375         db  0x00 ; '.'
0000000000219376         db  0x00 ; '.'
0000000000219377         db  0x00 ; '.'
0000000000219378         db  0x00 ; '.'
0000000000219379         db  0x00 ; '.'
000000000021937a         db  0x00 ; '.'
000000000021937b         db  0x00 ; '.'
000000000021937c         db  0x00 ; '.'
000000000021937d         db  0x00 ; '.'
000000000021937e         db  0x00 ; '.'
000000000021937f         db  0x00 ; '.'
0000000000219380         db  0x00 ; '.'
0000000000219381         db  0x00 ; '.'
0000000000219382         db  0x00 ; '.'
0000000000219383         db  0x00 ; '.'
0000000000219384         db  0x00 ; '.'
0000000000219385         db  0x00 ; '.'
0000000000219386         db  0x00 ; '.'
0000000000219387         db  0x00 ; '.'
0000000000219388         db  0x00 ; '.'
0000000000219389         db  0x00 ; '.'
000000000021938a         db  0x00 ; '.'
000000000021938b         db  0x00 ; '.'
000000000021938c         db  0x00 ; '.'
000000000021938d         db  0x00 ; '.'
000000000021938e         db  0x00 ; '.'
000000000021938f         db  0x00 ; '.'
0000000000219390         db  0x00 ; '.'
0000000000219391         db  0x00 ; '.'
0000000000219392         db  0x00 ; '.'
0000000000219393         db  0x00 ; '.'
0000000000219394         db  0x00 ; '.'
0000000000219395         db  0x00 ; '.'
0000000000219396         db  0x00 ; '.'
0000000000219397         db  0x00 ; '.'
0000000000219398         db  0x00 ; '.'
0000000000219399         db  0x00 ; '.'
000000000021939a         db  0x00 ; '.'
000000000021939b         db  0x00 ; '.'
000000000021939c         db  0x00 ; '.'
000000000021939d         db  0x00 ; '.'
000000000021939e         db  0x00 ; '.'
000000000021939f         db  0x00 ; '.'
00000000002193a0         db  0x00 ; '.'
00000000002193a1         db  0x00 ; '.'
00000000002193a2         db  0x00 ; '.'
00000000002193a3         db  0x00 ; '.'
00000000002193a4         db  0x00 ; '.'
00000000002193a5         db  0x00 ; '.'
00000000002193a6         db  0x00 ; '.'
00000000002193a7         db  0x00 ; '.'
00000000002193a8         db  0x00 ; '.'
00000000002193a9         db  0x00 ; '.'
00000000002193aa         db  0x00 ; '.'
00000000002193ab         db  0x00 ; '.'
00000000002193ac         db  0x00 ; '.'
00000000002193ad         db  0x00 ; '.'
00000000002193ae         db  0x00 ; '.'
00000000002193af         db  0x00 ; '.'
00000000002193b0         db  0x00 ; '.'
00000000002193b1         db  0x00 ; '.'
00000000002193b2         db  0x00 ; '.'
00000000002193b3         db  0x00 ; '.'
00000000002193b4         db  0x00 ; '.'
00000000002193b5         db  0x00 ; '.'
00000000002193b6         db  0x00 ; '.'
00000000002193b7         db  0x00 ; '.'
00000000002193b8         db  0x00 ; '.'
00000000002193b9         db  0x00 ; '.'
00000000002193ba         db  0x00 ; '.'
00000000002193bb         db  0x00 ; '.'
00000000002193bc         db  0x00 ; '.'
00000000002193bd         db  0x00 ; '.'
00000000002193be         db  0x00 ; '.'
00000000002193bf         db  0x00 ; '.'
                     body_fastmap:
00000000002193c0         db  0x00 ; '.'                                         ; DATA XREF=main+840
00000000002193c1         db  0x00 ; '.'
00000000002193c2         db  0x00 ; '.'
00000000002193c3         db  0x00 ; '.'
00000000002193c4         db  0x00 ; '.'
00000000002193c5         db  0x00 ; '.'
00000000002193c6         db  0x00 ; '.'
00000000002193c7         db  0x00 ; '.'
00000000002193c8         db  0x00 ; '.'
00000000002193c9         db  0x00 ; '.'
00000000002193ca         db  0x00 ; '.'
00000000002193cb         db  0x00 ; '.'
00000000002193cc         db  0x00 ; '.'
00000000002193cd         db  0x00 ; '.'
00000000002193ce         db  0x00 ; '.'
00000000002193cf         db  0x00 ; '.'
00000000002193d0         db  0x00 ; '.'
00000000002193d1         db  0x00 ; '.'
00000000002193d2         db  0x00 ; '.'
00000000002193d3         db  0x00 ; '.'
00000000002193d4         db  0x00 ; '.'
00000000002193d5         db  0x00 ; '.'
00000000002193d6         db  0x00 ; '.'
00000000002193d7         db  0x00 ; '.'
00000000002193d8         db  0x00 ; '.'
00000000002193d9         db  0x00 ; '.'
00000000002193da         db  0x00 ; '.'
00000000002193db         db  0x00 ; '.'
00000000002193dc         db  0x00 ; '.'
00000000002193dd         db  0x00 ; '.'
00000000002193de         db  0x00 ; '.'
00000000002193df         db  0x00 ; '.'
00000000002193e0         db  0x00 ; '.'
00000000002193e1         db  0x00 ; '.'
00000000002193e2         db  0x00 ; '.'
00000000002193e3         db  0x00 ; '.'
00000000002193e4         db  0x00 ; '.'
00000000002193e5         db  0x00 ; '.'
00000000002193e6         db  0x00 ; '.'
00000000002193e7         db  0x00 ; '.'
00000000002193e8         db  0x00 ; '.'
00000000002193e9         db  0x00 ; '.'
00000000002193ea         db  0x00 ; '.'
00000000002193eb         db  0x00 ; '.'
00000000002193ec         db  0x00 ; '.'
00000000002193ed         db  0x00 ; '.'
00000000002193ee         db  0x00 ; '.'
00000000002193ef         db  0x00 ; '.'
00000000002193f0         db  0x00 ; '.'
00000000002193f1         db  0x00 ; '.'
00000000002193f2         db  0x00 ; '.'
00000000002193f3         db  0x00 ; '.'
00000000002193f4         db  0x00 ; '.'
00000000002193f5         db  0x00 ; '.'
00000000002193f6         db  0x00 ; '.'
00000000002193f7         db  0x00 ; '.'
00000000002193f8         db  0x00 ; '.'
00000000002193f9         db  0x00 ; '.'
00000000002193fa         db  0x00 ; '.'
00000000002193fb         db  0x00 ; '.'
00000000002193fc         db  0x00 ; '.'
00000000002193fd         db  0x00 ; '.'
00000000002193fe         db  0x00 ; '.'
00000000002193ff         db  0x00 ; '.'
0000000000219400         db  0x00 ; '.'
0000000000219401         db  0x00 ; '.'
0000000000219402         db  0x00 ; '.'
0000000000219403         db  0x00 ; '.'
0000000000219404         db  0x00 ; '.'
0000000000219405         db  0x00 ; '.'
0000000000219406         db  0x00 ; '.'
0000000000219407         db  0x00 ; '.'
0000000000219408         db  0x00 ; '.'
0000000000219409         db  0x00 ; '.'
000000000021940a         db  0x00 ; '.'
000000000021940b         db  0x00 ; '.'
000000000021940c         db  0x00 ; '.'
000000000021940d         db  0x00 ; '.'
000000000021940e         db  0x00 ; '.'
000000000021940f         db  0x00 ; '.'
0000000000219410         db  0x00 ; '.'
0000000000219411         db  0x00 ; '.'
0000000000219412         db  0x00 ; '.'
0000000000219413         db  0x00 ; '.'
0000000000219414         db  0x00 ; '.'
0000000000219415         db  0x00 ; '.'
0000000000219416         db  0x00 ; '.'
0000000000219417         db  0x00 ; '.'
0000000000219418         db  0x00 ; '.'
0000000000219419         db  0x00 ; '.'
000000000021941a         db  0x00 ; '.'
000000000021941b         db  0x00 ; '.'
000000000021941c         db  0x00 ; '.'
000000000021941d         db  0x00 ; '.'
000000000021941e         db  0x00 ; '.'
000000000021941f         db  0x00 ; '.'
0000000000219420         db  0x00 ; '.'
0000000000219421         db  0x00 ; '.'
0000000000219422         db  0x00 ; '.'
0000000000219423         db  0x00 ; '.'
0000000000219424         db  0x00 ; '.'
0000000000219425         db  0x00 ; '.'
0000000000219426         db  0x00 ; '.'
0000000000219427         db  0x00 ; '.'
0000000000219428         db  0x00 ; '.'
0000000000219429         db  0x00 ; '.'
000000000021942a         db  0x00 ; '.'
000000000021942b         db  0x00 ; '.'
000000000021942c         db  0x00 ; '.'
000000000021942d         db  0x00 ; '.'
000000000021942e         db  0x00 ; '.'
000000000021942f         db  0x00 ; '.'
0000000000219430         db  0x00 ; '.'
0000000000219431         db  0x00 ; '.'
0000000000219432         db  0x00 ; '.'
0000000000219433         db  0x00 ; '.'
0000000000219434         db  0x00 ; '.'
0000000000219435         db  0x00 ; '.'
0000000000219436         db  0x00 ; '.'
0000000000219437         db  0x00 ; '.'
0000000000219438         db  0x00 ; '.'
0000000000219439         db  0x00 ; '.'
000000000021943a         db  0x00 ; '.'
000000000021943b         db  0x00 ; '.'
000000000021943c         db  0x00 ; '.'
000000000021943d         db  0x00 ; '.'
000000000021943e         db  0x00 ; '.'
000000000021943f         db  0x00 ; '.'
0000000000219440         db  0x00 ; '.'
0000000000219441         db  0x00 ; '.'
0000000000219442         db  0x00 ; '.'
0000000000219443         db  0x00 ; '.'
0000000000219444         db  0x00 ; '.'
0000000000219445         db  0x00 ; '.'
0000000000219446         db  0x00 ; '.'
0000000000219447         db  0x00 ; '.'
0000000000219448         db  0x00 ; '.'
0000000000219449         db  0x00 ; '.'
000000000021944a         db  0x00 ; '.'
000000000021944b         db  0x00 ; '.'
000000000021944c         db  0x00 ; '.'
000000000021944d         db  0x00 ; '.'
000000000021944e         db  0x00 ; '.'
000000000021944f         db  0x00 ; '.'
0000000000219450         db  0x00 ; '.'
0000000000219451         db  0x00 ; '.'
0000000000219452         db  0x00 ; '.'
0000000000219453         db  0x00 ; '.'
0000000000219454         db  0x00 ; '.'
0000000000219455         db  0x00 ; '.'
0000000000219456         db  0x00 ; '.'
0000000000219457         db  0x00 ; '.'
0000000000219458         db  0x00 ; '.'
0000000000219459         db  0x00 ; '.'
000000000021945a         db  0x00 ; '.'
000000000021945b         db  0x00 ; '.'
000000000021945c         db  0x00 ; '.'
000000000021945d         db  0x00 ; '.'
000000000021945e         db  0x00 ; '.'
000000000021945f         db  0x00 ; '.'
0000000000219460         db  0x00 ; '.'
0000000000219461         db  0x00 ; '.'
0000000000219462         db  0x00 ; '.'
0000000000219463         db  0x00 ; '.'
0000000000219464         db  0x00 ; '.'
0000000000219465         db  0x00 ; '.'
0000000000219466         db  0x00 ; '.'
0000000000219467         db  0x00 ; '.'
0000000000219468         db  0x00 ; '.'
0000000000219469         db  0x00 ; '.'
000000000021946a         db  0x00 ; '.'
000000000021946b         db  0x00 ; '.'
000000000021946c         db  0x00 ; '.'
000000000021946d         db  0x00 ; '.'
000000000021946e         db  0x00 ; '.'
000000000021946f         db  0x00 ; '.'
0000000000219470         db  0x00 ; '.'
0000000000219471         db  0x00 ; '.'
0000000000219472         db  0x00 ; '.'
0000000000219473         db  0x00 ; '.'
0000000000219474         db  0x00 ; '.'
0000000000219475         db  0x00 ; '.'
0000000000219476         db  0x00 ; '.'
0000000000219477         db  0x00 ; '.'
0000000000219478         db  0x00 ; '.'
0000000000219479         db  0x00 ; '.'
000000000021947a         db  0x00 ; '.'
000000000021947b         db  0x00 ; '.'
000000000021947c         db  0x00 ; '.'
000000000021947d         db  0x00 ; '.'
000000000021947e         db  0x00 ; '.'
000000000021947f         db  0x00 ; '.'
0000000000219480         db  0x00 ; '.'
0000000000219481         db  0x00 ; '.'
0000000000219482         db  0x00 ; '.'
0000000000219483         db  0x00 ; '.'
0000000000219484         db  0x00 ; '.'
0000000000219485         db  0x00 ; '.'
0000000000219486         db  0x00 ; '.'
0000000000219487         db  0x00 ; '.'
0000000000219488         db  0x00 ; '.'
0000000000219489         db  0x00 ; '.'
000000000021948a         db  0x00 ; '.'
000000000021948b         db  0x00 ; '.'
000000000021948c         db  0x00 ; '.'
000000000021948d         db  0x00 ; '.'
000000000021948e         db  0x00 ; '.'
000000000021948f         db  0x00 ; '.'
0000000000219490         db  0x00 ; '.'
0000000000219491         db  0x00 ; '.'
0000000000219492         db  0x00 ; '.'
0000000000219493         db  0x00 ; '.'
0000000000219494         db  0x00 ; '.'
0000000000219495         db  0x00 ; '.'
0000000000219496         db  0x00 ; '.'
0000000000219497         db  0x00 ; '.'
0000000000219498         db  0x00 ; '.'
0000000000219499         db  0x00 ; '.'
000000000021949a         db  0x00 ; '.'
000000000021949b         db  0x00 ; '.'
000000000021949c         db  0x00 ; '.'
000000000021949d         db  0x00 ; '.'
000000000021949e         db  0x00 ; '.'
000000000021949f         db  0x00 ; '.'
00000000002194a0         db  0x00 ; '.'
00000000002194a1         db  0x00 ; '.'
00000000002194a2         db  0x00 ; '.'
00000000002194a3         db  0x00 ; '.'
00000000002194a4         db  0x00 ; '.'
00000000002194a5         db  0x00 ; '.'
00000000002194a6         db  0x00 ; '.'
00000000002194a7         db  0x00 ; '.'
00000000002194a8         db  0x00 ; '.'
00000000002194a9         db  0x00 ; '.'
00000000002194aa         db  0x00 ; '.'
00000000002194ab         db  0x00 ; '.'
00000000002194ac         db  0x00 ; '.'
00000000002194ad         db  0x00 ; '.'
00000000002194ae         db  0x00 ; '.'
00000000002194af         db  0x00 ; '.'
00000000002194b0         db  0x00 ; '.'
00000000002194b1         db  0x00 ; '.'
00000000002194b2         db  0x00 ; '.'
00000000002194b3         db  0x00 ; '.'
00000000002194b4         db  0x00 ; '.'
00000000002194b5         db  0x00 ; '.'
00000000002194b6         db  0x00 ; '.'
00000000002194b7         db  0x00 ; '.'
00000000002194b8         db  0x00 ; '.'
00000000002194b9         db  0x00 ; '.'
00000000002194ba         db  0x00 ; '.'
00000000002194bb         db  0x00 ; '.'
00000000002194bc         db  0x00 ; '.'
00000000002194bd         db  0x00 ; '.'
00000000002194be         db  0x00 ; '.'
00000000002194bf         db  0x00 ; '.'
                     footer_regex:
00000000002194c0         db  0x00 ; '.'                                         ; DATA XREF=main+527, nl_file+70
00000000002194c1         db  0x00 ; '.'
00000000002194c2         db  0x00 ; '.'
00000000002194c3         db  0x00 ; '.'
00000000002194c4         db  0x00 ; '.'
00000000002194c5         db  0x00 ; '.'
00000000002194c6         db  0x00 ; '.'
00000000002194c7         db  0x00 ; '.'
00000000002194c8         db  0x00 ; '.'
00000000002194c9         db  0x00 ; '.'
00000000002194ca         db  0x00 ; '.'
00000000002194cb         db  0x00 ; '.'
00000000002194cc         db  0x00 ; '.'
00000000002194cd         db  0x00 ; '.'
00000000002194ce         db  0x00 ; '.'
00000000002194cf         db  0x00 ; '.'
00000000002194d0         db  0x00 ; '.'
00000000002194d1         db  0x00 ; '.'
00000000002194d2         db  0x00 ; '.'
00000000002194d3         db  0x00 ; '.'
00000000002194d4         db  0x00 ; '.'
00000000002194d5         db  0x00 ; '.'
00000000002194d6         db  0x00 ; '.'
00000000002194d7         db  0x00 ; '.'
00000000002194d8         db  0x00 ; '.'
00000000002194d9         db  0x00 ; '.'
00000000002194da         db  0x00 ; '.'
00000000002194db         db  0x00 ; '.'
00000000002194dc         db  0x00 ; '.'
00000000002194dd         db  0x00 ; '.'
00000000002194de         db  0x00 ; '.'
00000000002194df         db  0x00 ; '.'
00000000002194e0         db  0x00 ; '.'
00000000002194e1         db  0x00 ; '.'
00000000002194e2         db  0x00 ; '.'
00000000002194e3         db  0x00 ; '.'
00000000002194e4         db  0x00 ; '.'
00000000002194e5         db  0x00 ; '.'
00000000002194e6         db  0x00 ; '.'
00000000002194e7         db  0x00 ; '.'
00000000002194e8         db  0x00 ; '.'
00000000002194e9         db  0x00 ; '.'
00000000002194ea         db  0x00 ; '.'
00000000002194eb         db  0x00 ; '.'
00000000002194ec         db  0x00 ; '.'
00000000002194ed         db  0x00 ; '.'
00000000002194ee         db  0x00 ; '.'
00000000002194ef         db  0x00 ; '.'
00000000002194f0         db  0x00 ; '.'
00000000002194f1         db  0x00 ; '.'
00000000002194f2         db  0x00 ; '.'
00000000002194f3         db  0x00 ; '.'
00000000002194f4         db  0x00 ; '.'
00000000002194f5         db  0x00 ; '.'
00000000002194f6         db  0x00 ; '.'
00000000002194f7         db  0x00 ; '.'
00000000002194f8         db  0x00 ; '.'
00000000002194f9         db  0x00 ; '.'
00000000002194fa         db  0x00 ; '.'
00000000002194fb         db  0x00 ; '.'
00000000002194fc         db  0x00 ; '.'
00000000002194fd         db  0x00 ; '.'
00000000002194fe         db  0x00 ; '.'
00000000002194ff         db  0x00 ; '.'
                     header_regex:
0000000000219500         db  0x00 ; '.'                                         ; DATA XREF=main+455, nl_file+559
0000000000219501         db  0x00 ; '.'
0000000000219502         db  0x00 ; '.'
0000000000219503         db  0x00 ; '.'
0000000000219504         db  0x00 ; '.'
0000000000219505         db  0x00 ; '.'
0000000000219506         db  0x00 ; '.'
0000000000219507         db  0x00 ; '.'
0000000000219508         db  0x00 ; '.'
0000000000219509         db  0x00 ; '.'
000000000021950a         db  0x00 ; '.'
000000000021950b         db  0x00 ; '.'
000000000021950c         db  0x00 ; '.'
000000000021950d         db  0x00 ; '.'
000000000021950e         db  0x00 ; '.'
000000000021950f         db  0x00 ; '.'
0000000000219510         db  0x00 ; '.'
0000000000219511         db  0x00 ; '.'
0000000000219512         db  0x00 ; '.'
0000000000219513         db  0x00 ; '.'
0000000000219514         db  0x00 ; '.'
0000000000219515         db  0x00 ; '.'
0000000000219516         db  0x00 ; '.'
0000000000219517         db  0x00 ; '.'
0000000000219518         db  0x00 ; '.'
0000000000219519         db  0x00 ; '.'
000000000021951a         db  0x00 ; '.'
000000000021951b         db  0x00 ; '.'
000000000021951c         db  0x00 ; '.'
000000000021951d         db  0x00 ; '.'
000000000021951e         db  0x00 ; '.'
000000000021951f         db  0x00 ; '.'
0000000000219520         db  0x00 ; '.'
0000000000219521         db  0x00 ; '.'
0000000000219522         db  0x00 ; '.'
0000000000219523         db  0x00 ; '.'
0000000000219524         db  0x00 ; '.'
0000000000219525         db  0x00 ; '.'
0000000000219526         db  0x00 ; '.'
0000000000219527         db  0x00 ; '.'
0000000000219528         db  0x00 ; '.'
0000000000219529         db  0x00 ; '.'
000000000021952a         db  0x00 ; '.'
000000000021952b         db  0x00 ; '.'
000000000021952c         db  0x00 ; '.'
000000000021952d         db  0x00 ; '.'
000000000021952e         db  0x00 ; '.'
000000000021952f         db  0x00 ; '.'
0000000000219530         db  0x00 ; '.'
0000000000219531         db  0x00 ; '.'
0000000000219532         db  0x00 ; '.'
0000000000219533         db  0x00 ; '.'
0000000000219534         db  0x00 ; '.'
0000000000219535         db  0x00 ; '.'
0000000000219536         db  0x00 ; '.'
0000000000219537         db  0x00 ; '.'
0000000000219538         db  0x00 ; '.'
0000000000219539         db  0x00 ; '.'
000000000021953a         db  0x00 ; '.'
000000000021953b         db  0x00 ; '.'
000000000021953c         db  0x00 ; '.'
000000000021953d         db  0x00 ; '.'
000000000021953e         db  0x00 ; '.'
000000000021953f         db  0x00 ; '.'
                     body_regex:
0000000000219540         db  0x00 ; '.'                                         ; DATA XREF=main+847, main+1426, nl_file+639
0000000000219541         db  0x00 ; '.'
0000000000219542         db  0x00 ; '.'
0000000000219543         db  0x00 ; '.'
0000000000219544         db  0x00 ; '.'
0000000000219545         db  0x00 ; '.'
0000000000219546         db  0x00 ; '.'
0000000000219547         db  0x00 ; '.'
0000000000219548         db  0x00 ; '.'
0000000000219549         db  0x00 ; '.'
000000000021954a         db  0x00 ; '.'
000000000021954b         db  0x00 ; '.'
000000000021954c         db  0x00 ; '.'
000000000021954d         db  0x00 ; '.'
000000000021954e         db  0x00 ; '.'
000000000021954f         db  0x00 ; '.'
0000000000219550         db  0x00 ; '.'
0000000000219551         db  0x00 ; '.'
0000000000219552         db  0x00 ; '.'
0000000000219553         db  0x00 ; '.'
0000000000219554         db  0x00 ; '.'
0000000000219555         db  0x00 ; '.'
0000000000219556         db  0x00 ; '.'
0000000000219557         db  0x00 ; '.'
0000000000219558         db  0x00 ; '.'
0000000000219559         db  0x00 ; '.'
000000000021955a         db  0x00 ; '.'
000000000021955b         db  0x00 ; '.'
000000000021955c         db  0x00 ; '.'
000000000021955d         db  0x00 ; '.'
000000000021955e         db  0x00 ; '.'
000000000021955f         db  0x00 ; '.'
0000000000219560         db  0x00 ; '.'
0000000000219561         db  0x00 ; '.'
0000000000219562         db  0x00 ; '.'
0000000000219563         db  0x00 ; '.'
0000000000219564         db  0x00 ; '.'
0000000000219565         db  0x00 ; '.'
0000000000219566         db  0x00 ; '.'
0000000000219567         db  0x00 ; '.'
0000000000219568         db  0x00 ; '.'
0000000000219569         db  0x00 ; '.'
000000000021956a         db  0x00 ; '.'
000000000021956b         db  0x00 ; '.'
000000000021956c         db  0x00 ; '.'
000000000021956d         db  0x00 ; '.'
000000000021956e         db  0x00 ; '.'
000000000021956f         db  0x00 ; '.'
0000000000219570         db  0x00 ; '.'
0000000000219571         db  0x00 ; '.'
0000000000219572         db  0x00 ; '.'
0000000000219573         db  0x00 ; '.'
0000000000219574         db  0x00 ; '.'
0000000000219575         db  0x00 ; '.'
0000000000219576         db  0x00 ; '.'
0000000000219577         db  0x00 ; '.'
0000000000219578         db  0x00 ; '.'
0000000000219579         db  0x00 ; '.'
000000000021957a         db  0x00 ; '.'
000000000021957b         db  0x00 ; '.'
000000000021957c         db  0x00 ; '.'
000000000021957d         db  0x00 ; '.'
000000000021957e         db  0x00 ; '.'
000000000021957f         db  0x00 ; '.'
                     current_type:
0000000000219580         db  0x00 ; '.'                                         ; DATA XREF=main+1419, nl_file+251, nl_file+416, nl_file+552, nl_file+632
0000000000219581         db  0x00 ; '.'
0000000000219582         db  0x00 ; '.'
0000000000219583         db  0x00 ; '.'
0000000000219584         db  0x00 ; '.'
0000000000219585         db  0x00 ; '.'
0000000000219586         db  0x00 ; '.'
0000000000219587         db  0x00 ; '.'
                     ignore_EPIPE:
0000000000219588         db  0x00 ; '.'                                         ; DATA XREF=close_stdout_set_ignore_EPIPE, close_stdout+27
0000000000219589         db  0x00 ; '.'
000000000021958a         db  0x00 ; '.'
000000000021958b         db  0x00 ; '.'
000000000021958c         db  0x00 ; '.'
000000000021958d         db  0x00 ; '.'
000000000021958e         db  0x00 ; '.'
000000000021958f         db  0x00 ; '.'
                     file_name:
0000000000219590         db  0x00 ; '.'                                         ; DATA XREF=close_stdout_set_file_name, close_stdout+86
0000000000219591         db  0x00 ; '.'
0000000000219592         db  0x00 ; '.'
0000000000219593         db  0x00 ; '.'
0000000000219594         db  0x00 ; '.'
0000000000219595         db  0x00 ; '.'
0000000000219596         db  0x00 ; '.'
0000000000219597         db  0x00 ; '.'
                     program_name:
0000000000219598         db  0x00 ; '.'                                         ; DATA XREF=usage+20, set_program_name+109
0000000000219599         db  0x00 ; '.'
000000000021959a         db  0x00 ; '.'
000000000021959b         db  0x00 ; '.'
000000000021959c         db  0x00 ; '.'
000000000021959d         db  0x00 ; '.'
000000000021959e         db  0x00 ; '.'
000000000021959f         db  0x00 ; '.'
                     slot0:
00000000002195a0         db  0x00 ; '.'                                         ; DATA XREF=quotearg_n_options+254, quotearg_free+70, slotvec0
00000000002195a1         db  0x00 ; '.'
00000000002195a2         db  0x00 ; '.'
00000000002195a3         db  0x00 ; '.'
00000000002195a4         db  0x00 ; '.'
00000000002195a5         db  0x00 ; '.'
00000000002195a6         db  0x00 ; '.'
00000000002195a7         db  0x00 ; '.'
00000000002195a8         db  0x00 ; '.'
00000000002195a9         db  0x00 ; '.'
00000000002195aa         db  0x00 ; '.'
00000000002195ab         db  0x00 ; '.'
00000000002195ac         db  0x00 ; '.'
00000000002195ad         db  0x00 ; '.'
00000000002195ae         db  0x00 ; '.'
00000000002195af         db  0x00 ; '.'
00000000002195b0         db  0x00 ; '.'
00000000002195b1         db  0x00 ; '.'
00000000002195b2         db  0x00 ; '.'
00000000002195b3         db  0x00 ; '.'
00000000002195b4         db  0x00 ; '.'
00000000002195b5         db  0x00 ; '.'
00000000002195b6         db  0x00 ; '.'
00000000002195b7         db  0x00 ; '.'
00000000002195b8         db  0x00 ; '.'
00000000002195b9         db  0x00 ; '.'
00000000002195ba         db  0x00 ; '.'
00000000002195bb         db  0x00 ; '.'
00000000002195bc         db  0x00 ; '.'
00000000002195bd         db  0x00 ; '.'
00000000002195be         db  0x00 ; '.'
00000000002195bf         db  0x00 ; '.'
00000000002195c0         db  0x00 ; '.'
00000000002195c1         db  0x00 ; '.'
00000000002195c2         db  0x00 ; '.'
00000000002195c3         db  0x00 ; '.'
00000000002195c4         db  0x00 ; '.'
00000000002195c5         db  0x00 ; '.'
00000000002195c6         db  0x00 ; '.'
00000000002195c7         db  0x00 ; '.'
00000000002195c8         db  0x00 ; '.'
00000000002195c9         db  0x00 ; '.'
00000000002195ca         db  0x00 ; '.'
00000000002195cb         db  0x00 ; '.'
00000000002195cc         db  0x00 ; '.'
00000000002195cd         db  0x00 ; '.'
00000000002195ce         db  0x00 ; '.'
00000000002195cf         db  0x00 ; '.'
00000000002195d0         db  0x00 ; '.'
00000000002195d1         db  0x00 ; '.'
00000000002195d2         db  0x00 ; '.'
00000000002195d3         db  0x00 ; '.'
00000000002195d4         db  0x00 ; '.'
00000000002195d5         db  0x00 ; '.'
00000000002195d6         db  0x00 ; '.'
00000000002195d7         db  0x00 ; '.'
00000000002195d8         db  0x00 ; '.'
00000000002195d9         db  0x00 ; '.'
00000000002195da         db  0x00 ; '.'
00000000002195db         db  0x00 ; '.'
00000000002195dc         db  0x00 ; '.'
00000000002195dd         db  0x00 ; '.'
00000000002195de         db  0x00 ; '.'
00000000002195df         db  0x00 ; '.'
00000000002195e0         db  0x00 ; '.'
00000000002195e1         db  0x00 ; '.'
00000000002195e2         db  0x00 ; '.'
00000000002195e3         db  0x00 ; '.'
00000000002195e4         db  0x00 ; '.'
00000000002195e5         db  0x00 ; '.'
00000000002195e6         db  0x00 ; '.'
00000000002195e7         db  0x00 ; '.'
00000000002195e8         db  0x00 ; '.'
00000000002195e9         db  0x00 ; '.'
00000000002195ea         db  0x00 ; '.'
00000000002195eb         db  0x00 ; '.'
00000000002195ec         db  0x00 ; '.'
00000000002195ed         db  0x00 ; '.'
00000000002195ee         db  0x00 ; '.'
00000000002195ef         db  0x00 ; '.'
00000000002195f0         db  0x00 ; '.'
00000000002195f1         db  0x00 ; '.'
00000000002195f2         db  0x00 ; '.'
00000000002195f3         db  0x00 ; '.'
00000000002195f4         db  0x00 ; '.'
00000000002195f5         db  0x00 ; '.'
00000000002195f6         db  0x00 ; '.'
00000000002195f7         db  0x00 ; '.'
00000000002195f8         db  0x00 ; '.'
00000000002195f9         db  0x00 ; '.'
00000000002195fa         db  0x00 ; '.'
00000000002195fb         db  0x00 ; '.'
00000000002195fc         db  0x00 ; '.'
00000000002195fd         db  0x00 ; '.'
00000000002195fe         db  0x00 ; '.'
00000000002195ff         db  0x00 ; '.'
0000000000219600         db  0x00 ; '.'
0000000000219601         db  0x00 ; '.'
0000000000219602         db  0x00 ; '.'
0000000000219603         db  0x00 ; '.'
0000000000219604         db  0x00 ; '.'
0000000000219605         db  0x00 ; '.'
0000000000219606         db  0x00 ; '.'
0000000000219607         db  0x00 ; '.'
0000000000219608         db  0x00 ; '.'
0000000000219609         db  0x00 ; '.'
000000000021960a         db  0x00 ; '.'
000000000021960b         db  0x00 ; '.'
000000000021960c         db  0x00 ; '.'
000000000021960d         db  0x00 ; '.'
000000000021960e         db  0x00 ; '.'
000000000021960f         db  0x00 ; '.'
0000000000219610         db  0x00 ; '.'
0000000000219611         db  0x00 ; '.'
0000000000219612         db  0x00 ; '.'
0000000000219613         db  0x00 ; '.'
0000000000219614         db  0x00 ; '.'
0000000000219615         db  0x00 ; '.'
0000000000219616         db  0x00 ; '.'
0000000000219617         db  0x00 ; '.'
0000000000219618         db  0x00 ; '.'
0000000000219619         db  0x00 ; '.'
000000000021961a         db  0x00 ; '.'
000000000021961b         db  0x00 ; '.'
000000000021961c         db  0x00 ; '.'
000000000021961d         db  0x00 ; '.'
000000000021961e         db  0x00 ; '.'
000000000021961f         db  0x00 ; '.'
0000000000219620         db  0x00 ; '.'
0000000000219621         db  0x00 ; '.'
0000000000219622         db  0x00 ; '.'
0000000000219623         db  0x00 ; '.'
0000000000219624         db  0x00 ; '.'
0000000000219625         db  0x00 ; '.'
0000000000219626         db  0x00 ; '.'
0000000000219627         db  0x00 ; '.'
0000000000219628         db  0x00 ; '.'
0000000000219629         db  0x00 ; '.'
000000000021962a         db  0x00 ; '.'
000000000021962b         db  0x00 ; '.'
000000000021962c         db  0x00 ; '.'
000000000021962d         db  0x00 ; '.'
000000000021962e         db  0x00 ; '.'
000000000021962f         db  0x00 ; '.'
0000000000219630         db  0x00 ; '.'
0000000000219631         db  0x00 ; '.'
0000000000219632         db  0x00 ; '.'
0000000000219633         db  0x00 ; '.'
0000000000219634         db  0x00 ; '.'
0000000000219635         db  0x00 ; '.'
0000000000219636         db  0x00 ; '.'
0000000000219637         db  0x00 ; '.'
0000000000219638         db  0x00 ; '.'
0000000000219639         db  0x00 ; '.'
000000000021963a         db  0x00 ; '.'
000000000021963b         db  0x00 ; '.'
000000000021963c         db  0x00 ; '.'
000000000021963d         db  0x00 ; '.'
000000000021963e         db  0x00 ; '.'
000000000021963f         db  0x00 ; '.'
0000000000219640         db  0x00 ; '.'
0000000000219641         db  0x00 ; '.'
0000000000219642         db  0x00 ; '.'
0000000000219643         db  0x00 ; '.'
0000000000219644         db  0x00 ; '.'
0000000000219645         db  0x00 ; '.'
0000000000219646         db  0x00 ; '.'
0000000000219647         db  0x00 ; '.'
0000000000219648         db  0x00 ; '.'
0000000000219649         db  0x00 ; '.'
000000000021964a         db  0x00 ; '.'
000000000021964b         db  0x00 ; '.'
000000000021964c         db  0x00 ; '.'
000000000021964d         db  0x00 ; '.'
000000000021964e         db  0x00 ; '.'
000000000021964f         db  0x00 ; '.'
0000000000219650         db  0x00 ; '.'
0000000000219651         db  0x00 ; '.'
0000000000219652         db  0x00 ; '.'
0000000000219653         db  0x00 ; '.'
0000000000219654         db  0x00 ; '.'
0000000000219655         db  0x00 ; '.'
0000000000219656         db  0x00 ; '.'
0000000000219657         db  0x00 ; '.'
0000000000219658         db  0x00 ; '.'
0000000000219659         db  0x00 ; '.'
000000000021965a         db  0x00 ; '.'
000000000021965b         db  0x00 ; '.'
000000000021965c         db  0x00 ; '.'
000000000021965d         db  0x00 ; '.'
000000000021965e         db  0x00 ; '.'
000000000021965f         db  0x00 ; '.'
0000000000219660         db  0x00 ; '.'
0000000000219661         db  0x00 ; '.'
0000000000219662         db  0x00 ; '.'
0000000000219663         db  0x00 ; '.'
0000000000219664         db  0x00 ; '.'
0000000000219665         db  0x00 ; '.'
0000000000219666         db  0x00 ; '.'
0000000000219667         db  0x00 ; '.'
0000000000219668         db  0x00 ; '.'
0000000000219669         db  0x00 ; '.'
000000000021966a         db  0x00 ; '.'
000000000021966b         db  0x00 ; '.'
000000000021966c         db  0x00 ; '.'
000000000021966d         db  0x00 ; '.'
000000000021966e         db  0x00 ; '.'
000000000021966f         db  0x00 ; '.'
0000000000219670         db  0x00 ; '.'
0000000000219671         db  0x00 ; '.'
0000000000219672         db  0x00 ; '.'
0000000000219673         db  0x00 ; '.'
0000000000219674         db  0x00 ; '.'
0000000000219675         db  0x00 ; '.'
0000000000219676         db  0x00 ; '.'
0000000000219677         db  0x00 ; '.'
0000000000219678         db  0x00 ; '.'
0000000000219679         db  0x00 ; '.'
000000000021967a         db  0x00 ; '.'
000000000021967b         db  0x00 ; '.'
000000000021967c         db  0x00 ; '.'
000000000021967d         db  0x00 ; '.'
000000000021967e         db  0x00 ; '.'
000000000021967f         db  0x00 ; '.'
0000000000219680         db  0x00 ; '.'
0000000000219681         db  0x00 ; '.'
0000000000219682         db  0x00 ; '.'
0000000000219683         db  0x00 ; '.'
0000000000219684         db  0x00 ; '.'
0000000000219685         db  0x00 ; '.'
0000000000219686         db  0x00 ; '.'
0000000000219687         db  0x00 ; '.'
0000000000219688         db  0x00 ; '.'
0000000000219689         db  0x00 ; '.'
000000000021968a         db  0x00 ; '.'
000000000021968b         db  0x00 ; '.'
000000000021968c         db  0x00 ; '.'
000000000021968d         db  0x00 ; '.'
000000000021968e         db  0x00 ; '.'
000000000021968f         db  0x00 ; '.'
0000000000219690         db  0x00 ; '.'
0000000000219691         db  0x00 ; '.'
0000000000219692         db  0x00 ; '.'
0000000000219693         db  0x00 ; '.'
0000000000219694         db  0x00 ; '.'
0000000000219695         db  0x00 ; '.'
0000000000219696         db  0x00 ; '.'
0000000000219697         db  0x00 ; '.'
0000000000219698         db  0x00 ; '.'
0000000000219699         db  0x00 ; '.'
000000000021969a         db  0x00 ; '.'
000000000021969b         db  0x00 ; '.'
000000000021969c         db  0x00 ; '.'
000000000021969d         db  0x00 ; '.'
000000000021969e         db  0x00 ; '.'
000000000021969f         db  0x00 ; '.'
                     default_quoting_options:
00000000002196a0         db  0x00 ; '.'                                         ; DATA XREF=clone_quoting_options+18, get_quoting_style, set_quoting_style, set_char_quoting, set_quoting_flags, set_custom_quoting, quotearg_buffer+4, quotearg_alloc_mem+4, quotearg_n, quotearg_n_mem, quotearg
00000000002196a1         db  0x00 ; '.'
00000000002196a2         db  0x00 ; '.'
00000000002196a3         db  0x00 ; '.'
00000000002196a4         db  0x00 ; '.'
00000000002196a5         db  0x00 ; '.'
00000000002196a6         db  0x00 ; '.'
00000000002196a7         db  0x00 ; '.'
00000000002196a8         db  0x00 ; '.'
00000000002196a9         db  0x00 ; '.'
00000000002196aa         db  0x00 ; '.'
00000000002196ab         db  0x00 ; '.'
00000000002196ac         db  0x00 ; '.'
00000000002196ad         db  0x00 ; '.'
00000000002196ae         db  0x00 ; '.'
00000000002196af         db  0x00 ; '.'
00000000002196b0         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+65, quotearg_n_custom_mem+57
00000000002196b1         db  0x00 ; '.'
00000000002196b2         db  0x00 ; '.'
00000000002196b3         db  0x00 ; '.'
00000000002196b4         db  0x00 ; '.'
00000000002196b5         db  0x00 ; '.'
00000000002196b6         db  0x00 ; '.'
00000000002196b7         db  0x00 ; '.'
00000000002196b8         db  0x00 ; '.'
00000000002196b9         db  0x00 ; '.'
00000000002196ba         db  0x00 ; '.'
00000000002196bb         db  0x00 ; '.'
00000000002196bc         db  0x00 ; '.'
00000000002196bd         db  0x00 ; '.'
00000000002196be         db  0x00 ; '.'
00000000002196bf         db  0x00 ; '.'
00000000002196c0         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+78, quotearg_n_custom_mem+70
00000000002196c1         db  0x00 ; '.'
00000000002196c2         db  0x00 ; '.'
00000000002196c3         db  0x00 ; '.'
00000000002196c4         db  0x00 ; '.'
00000000002196c5         db  0x00 ; '.'
00000000002196c6         db  0x00 ; '.'
00000000002196c7         db  0x00 ; '.'
00000000002196c8         db  0x00 ; '.'
00000000002196c9         db  0x00 ; '.'
00000000002196ca         db  0x00 ; '.'
00000000002196cb         db  0x00 ; '.'
00000000002196cc         db  0x00 ; '.'
00000000002196cd         db  0x00 ; '.'
00000000002196ce         db  0x00 ; '.'
00000000002196cf         db  0x00 ; '.'
                     qword_2196d0:
00000000002196d0         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+22, quotearg_n_custom_mem+7
00000000002196d1         db  0x00 ; '.'
00000000002196d2         db  0x00 ; '.'
00000000002196d3         db  0x00 ; '.'
00000000002196d4         db  0x00 ; '.'
00000000002196d5         db  0x00 ; '.'
00000000002196d6         db  0x00 ; '.'
00000000002196d7         db  0x00 ; '.'
                     rpl_re_syntax_options:
00000000002196d8         db  0x00 ; '.'                                         ; DATA XREF=build_type_arg+81, rpl_re_compile_pattern+4, rpl_re_set_syntax, rpl_re_set_syntax+7
00000000002196d9         db  0x00 ; '.'
00000000002196da         db  0x00 ; '.'
00000000002196db         db  0x00 ; '.'
00000000002196dc         db  0x00 ; '.'
00000000002196dd         db  0x00 ; '.'
00000000002196de         db  0x00 ; '.'
00000000002196df         db  0x00 ; '.'


        ; Segment External Symbols
        ; Range: [0x2196f0; 0x219b10[ (1056 bytes)
        ; No data on disk
        ; Permissions:  - 



        ; Section External Symbols Section
        ; Range: [0x2196f0; 0x433200[ (2202384 bytes)
        ; No data on disk

                             ; External Symbols Segment
                     __ctype_toupper_loc:
00000000002196f0         extern function code                                   ; DATA XREF=__ctype_toupper_loc@GOT
                     __uflow:
00000000002196f8         extern function code                                   ; DATA XREF=__uflow@GOT
                     free:
0000000000219700         extern function code                                   ; DATA XREF=free@GOT
                     abort:
0000000000219708         extern function code                                   ; DATA XREF=abort@GOT
                     __errno_location:
0000000000219710         extern function code                                   ; DATA XREF=__errno_location@GOT
                     strncmp:
0000000000219718         extern function code                                   ; DATA XREF=strncmp@GOT
                     _ITM_deregisterTMCloneTable:
0000000000219720         extern function code
                     _exit:
0000000000219728         extern function code                                   ; DATA XREF=_exit@GOT
                     strcpy:
0000000000219730         extern function code                                   ; DATA XREF=strcpy@GOT
                     __fpending:
0000000000219738         extern function code                                   ; DATA XREF=__fpending@GOT
                     clearerr_unlocked:
0000000000219740         extern function code                                   ; DATA XREF=clearerr_unlocked@GOT
                     textdomain:
0000000000219748         extern function code                                   ; DATA XREF=textdomain@GOT
                     __strtol_internal:
0000000000219750         extern function code                                   ; DATA XREF=__strtol_internal@GOT
                     iswctype:
0000000000219758         extern function code                                   ; DATA XREF=iswctype@GOT
                     fclose:
0000000000219760         extern function code                                   ; DATA XREF=fclose@GOT
                     bindtextdomain:
0000000000219768         extern function code                                   ; DATA XREF=bindtextdomain@GOT
                     stpcpy:
0000000000219770         extern function code                                   ; DATA XREF=stpcpy@GOT
                     dcgettext:
0000000000219778         extern function code                                   ; DATA XREF=dcgettext@GOT
                     __ctype_get_mb_cur_max:
0000000000219780         extern function code                                   ; DATA XREF=__ctype_get_mb_cur_max@GOT
                     strlen:
0000000000219788         extern function code                                   ; DATA XREF=strlen@GOT
                     __stack_chk_fail:
0000000000219790         extern function code                                   ; DATA XREF=__stack_chk_fail@GOT
                     getopt_long:
0000000000219798         extern function code                                   ; DATA XREF=getopt_long@GOT
                     mbrtowc:
00000000002197a0         extern function code                                   ; DATA XREF=mbrtowc@GOT
                     strchr:
00000000002197a8         extern function code                                   ; DATA XREF=strchr@GOT
                     __overflow:
00000000002197b0         extern function code                                   ; DATA XREF=__overflow@GOT
                     strrchr:
00000000002197b8         extern function code                                   ; DATA XREF=strrchr@GOT
                     lseek:
00000000002197c0         extern function code                                   ; DATA XREF=lseek@GOT
                     __assert_fail:
00000000002197c8         extern function code                                   ; DATA XREF=__assert_fail@GOT
                     memset:
00000000002197d0         extern function code                                   ; DATA XREF=memset@GOT
                     posix_fadvise:
00000000002197d8         extern function code                                   ; DATA XREF=posix_fadvise@GOT
                     __libc_start_main:
00000000002197e0         extern function code
                     memcmp:
00000000002197e8         extern function code                                   ; DATA XREF=memcmp@GOT
                     wctype:
00000000002197f0         extern function code                                   ; DATA XREF=wctype@GOT
                     fputs_unlocked:
00000000002197f8         extern function code                                   ; DATA XREF=fputs_unlocked@GOT
                     calloc:
0000000000219800         extern function code                                   ; DATA XREF=calloc@GOT
                     strcmp:
0000000000219808         extern function code                                   ; DATA XREF=strcmp@GOT
                     __gmon_start__:
0000000000219810         extern function code
                     memcpy:
0000000000219818         extern function code                                   ; DATA XREF=memcpy@GOT
                     fileno:
0000000000219820         extern function code                                   ; DATA XREF=fileno@GOT
                     iswalnum:
0000000000219828         extern function code                                   ; DATA XREF=iswalnum@GOT
                     malloc:
0000000000219830         extern function code                                   ; DATA XREF=malloc@GOT
                     wcrtomb:
0000000000219838         extern function code                                   ; DATA XREF=wcrtomb@GOT
                     fflush:
0000000000219840         extern function code                                   ; DATA XREF=fflush@GOT
                     nl_langinfo:
0000000000219848         extern function code                                   ; DATA XREF=nl_langinfo@GOT
                     __freading:
0000000000219850         extern function code                                   ; DATA XREF=__freading@GOT
                     fwrite_unlocked:
0000000000219858         extern function code                                   ; DATA XREF=fwrite_unlocked@GOT
                     realloc:
0000000000219860         extern function code                                   ; DATA XREF=realloc@GOT
                     setlocale:
0000000000219868         extern function code                                   ; DATA XREF=setlocale@GOT
                     __printf_chk:
0000000000219870         extern function code                                   ; DATA XREF=__printf_chk@GOT
                     btowc:
0000000000219878         extern function code                                   ; DATA XREF=btowc@GOT
                     memmove:
0000000000219880         extern function code                                   ; DATA XREF=memmove@GOT
                     error:
0000000000219888         extern function code                                   ; DATA XREF=error@GOT
                     fseeko:
0000000000219890         extern function code                                   ; DATA XREF=fseeko@GOT
                     fopen:
0000000000219898         extern function code                                   ; DATA XREF=fopen@GOT
                     towlower:
00000000002198a0         extern function code                                   ; DATA XREF=towlower@GOT
                     towupper:
00000000002198a8         extern function code                                   ; DATA XREF=towupper@GOT
                     __cxa_atexit:
00000000002198b0         extern function code                                   ; DATA XREF=__cxa_atexit@GOT
                     exit:
00000000002198b8         extern function code                                   ; DATA XREF=exit@GOT
                     fwrite:
00000000002198c0         extern function code                                   ; DATA XREF=fwrite@GOT
                     __fprintf_chk:
00000000002198c8         extern function code                                   ; DATA XREF=__fprintf_chk@GOT
                     _ITM_registerTMCloneTable:
00000000002198d0         extern function code
                     mbsinit:
00000000002198d8         extern function code                                   ; DATA XREF=mbsinit@GOT
                     iswprint:
00000000002198e0         extern function code                                   ; DATA XREF=iswprint@GOT
                     __cxa_finalize:
00000000002198e8         extern function code
                     __ctype_tolower_loc:
00000000002198f0         extern function code                                   ; DATA XREF=__ctype_tolower_loc@GOT
                     __ctype_b_loc:
00000000002198f8         extern function code                                   ; DATA XREF=__ctype_b_loc@GOT
                     __ctype_toupper_loc@@GLIBC_2.3:
0000000000219900         extern function code
                     __uflow@@GLIBC_2.2.5:
0000000000219908         extern function code
                     free@@GLIBC_2.2.5:
0000000000219910         extern function code
                     abort@@GLIBC_2.2.5:
0000000000219918         extern function code
                     __errno_location@@GLIBC_2.2.5:
0000000000219920         extern function code
                     strncmp@@GLIBC_2.2.5:
0000000000219928         extern function code
                     _ITM_deregisterTMCloneTable_219930:        // _ITM_deregisterTMCloneTable
0000000000219930         extern function code
                     _exit@@GLIBC_2.2.5:
0000000000219938         extern function code
                     strcpy@@GLIBC_2.2.5:
0000000000219940         extern function code
                     __fpending@@GLIBC_2.2.5:
0000000000219948         extern function code
                     clearerr_unlocked@@GLIBC_2.2.5:
0000000000219950         extern function code
                     textdomain@@GLIBC_2.2.5:
0000000000219958         extern function code
                     __strtol_internal@@GLIBC_2.2.5:
0000000000219960         extern function code
                     iswctype@@GLIBC_2.2.5:
0000000000219968         extern function code
                     fclose@@GLIBC_2.2.5:
0000000000219970         extern function code
                     bindtextdomain@@GLIBC_2.2.5:
0000000000219978         extern function code
                     stpcpy@@GLIBC_2.2.5:
0000000000219980         extern function code
                     dcgettext@@GLIBC_2.2.5:
0000000000219988         extern function code
                     __ctype_get_mb_cur_max@@GLIBC_2.2.5:
0000000000219990         extern function code
                     strlen@@GLIBC_2.2.5:
0000000000219998         extern function code
                     __stack_chk_fail@@GLIBC_2.4:
00000000002199a0         extern function code
                     getopt_long@@GLIBC_2.2.5:
00000000002199a8         extern function code
                     mbrtowc@@GLIBC_2.2.5:
00000000002199b0         extern function code
                     strchr@@GLIBC_2.2.5:
00000000002199b8         extern function code
                     __overflow@@GLIBC_2.2.5:
00000000002199c0         extern function code
                     strrchr@@GLIBC_2.2.5:
00000000002199c8         extern function code
                     lseek@@GLIBC_2.2.5:
00000000002199d0         extern function code
                     __assert_fail@@GLIBC_2.2.5:
00000000002199d8         extern function code
                     memset@@GLIBC_2.2.5:
00000000002199e0         extern function code
                     posix_fadvise@@GLIBC_2.2.5:
00000000002199e8         extern function code
                     __libc_start_main@@GLIBC_2.2.5:
00000000002199f0         extern function code
                     memcmp@@GLIBC_2.2.5:
00000000002199f8         extern function code
                     wctype@@GLIBC_2.2.5:
0000000000219a00         extern function code
                     fputs_unlocked@@GLIBC_2.2.5:
0000000000219a08         extern function code
                     calloc@@GLIBC_2.2.5:
0000000000219a10         extern function code
                     strcmp@@GLIBC_2.2.5:
0000000000219a18         extern function code
                     __gmon_start___219a20:        // __gmon_start__
0000000000219a20         extern function code
                     memcpy@@GLIBC_2.14:
0000000000219a28         extern function code
                     fileno@@GLIBC_2.2.5:
0000000000219a30         extern function code
                     iswalnum@@GLIBC_2.2.5:
0000000000219a38         extern function code
                     malloc@@GLIBC_2.2.5:
0000000000219a40         extern function code
                     wcrtomb@@GLIBC_2.2.5:
0000000000219a48         extern function code
                     fflush@@GLIBC_2.2.5:
0000000000219a50         extern function code
                     nl_langinfo@@GLIBC_2.2.5:
0000000000219a58         extern function code
                     __freading@@GLIBC_2.2.5:
0000000000219a60         extern function code
                     fwrite_unlocked@@GLIBC_2.2.5:
0000000000219a68         extern function code
                     realloc@@GLIBC_2.2.5:
0000000000219a70         extern function code
                     setlocale@@GLIBC_2.2.5:
0000000000219a78         extern function code
                     __printf_chk@@GLIBC_2.3.4:
0000000000219a80         extern function code
                     btowc@@GLIBC_2.2.5:
0000000000219a88         extern function code
                     memmove@@GLIBC_2.2.5:
0000000000219a90         extern function code
                     error@@GLIBC_2.2.5:
0000000000219a98         extern function code
                     fseeko@@GLIBC_2.2.5:
0000000000219aa0         extern function code
                     fopen@@GLIBC_2.2.5:
0000000000219aa8         extern function code
                     towlower@@GLIBC_2.2.5:
0000000000219ab0         extern function code
                     towupper@@GLIBC_2.2.5:
0000000000219ab8         extern function code
                     __cxa_atexit@@GLIBC_2.2.5:
0000000000219ac0         extern function code
                     exit@@GLIBC_2.2.5:
0000000000219ac8         extern function code
                     fwrite@@GLIBC_2.2.5:
0000000000219ad0         extern function code
                     __fprintf_chk@@GLIBC_2.3.4:
0000000000219ad8         extern function code
                     _ITM_registerTMCloneTable_219ae0:        // _ITM_registerTMCloneTable
0000000000219ae0         extern function code
                     mbsinit@@GLIBC_2.2.5:
0000000000219ae8         extern function code
                     iswprint@@GLIBC_2.2.5:
0000000000219af0         extern function code
                     __cxa_finalize@@GLIBC_2.2.5:
0000000000219af8         extern function code
                     __ctype_tolower_loc@@GLIBC_2.3:
0000000000219b00         extern function code
                     __ctype_b_loc@@GLIBC_2.3:
0000000000219b08         extern function code
