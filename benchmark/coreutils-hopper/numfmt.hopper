
/*
--------------------------------------------------------------------------------

        File: /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/numfmt
        UUID: 98750BF2-4E18-2BB6-60AA-9A6C2E708E4D
        Analysis version 58
        ELF file
        CPU: intel/x86_64
        64 bits addresses (Little Endian)

--------------------------------------------------------------------------------
*/



        ; Segment Segment 2
        ; Range: [0x0; 0xd1d0[ (53712 bytes)
        ; File offset : [0; 53712[ (53712 bytes)
        ; Permissions: readable / executable
        ; Flags: 0x5

0000000000000000         db  0x7f ; '.'
0000000000000001         db  0x45 ; 'E'
0000000000000002         db  0x4c ; 'L'
0000000000000003         db  0x46 ; 'F'
0000000000000004         db  0x02 ; '.'
0000000000000005         db  0x01 ; '.'
0000000000000006         db  0x01 ; '.'
0000000000000007         db  0x00 ; '.'
0000000000000008         db  0x00 ; '.'
0000000000000009         db  0x00 ; '.'
000000000000000a         db  0x00 ; '.'
000000000000000b         db  0x00 ; '.'
000000000000000c         db  0x00 ; '.'
000000000000000d         db  0x00 ; '.'
000000000000000e         db  0x00 ; '.'
000000000000000f         db  0x00 ; '.'
0000000000000010         db  0x03 ; '.'
0000000000000011         db  0x00 ; '.'
0000000000000012         db  0x3e ; '>'
0000000000000013         db  0x00 ; '.'
0000000000000014         db  0x01 ; '.'
0000000000000015         db  0x00 ; '.'
0000000000000016         db  0x00 ; '.'
0000000000000017         db  0x00 ; '.'
0000000000000018         db  0x90 ; '.'
0000000000000019         db  0x2b ; '+'
000000000000001a         db  0x00 ; '.'
000000000000001b         db  0x00 ; '.'
000000000000001c         db  0x00 ; '.'
000000000000001d         db  0x00 ; '.'
000000000000001e         db  0x00 ; '.'
000000000000001f         db  0x00 ; '.'
0000000000000020         db  0x40 ; '@'
0000000000000021         db  0x00 ; '.'
0000000000000022         db  0x00 ; '.'
0000000000000023         db  0x00 ; '.'
0000000000000024         db  0x00 ; '.'
0000000000000025         db  0x00 ; '.'
0000000000000026         db  0x00 ; '.'
0000000000000027         db  0x00 ; '.'
0000000000000028         db  0x48 ; 'H'
0000000000000029         db  0x22 ; '"'
000000000000002a         db  0x04 ; '.'
000000000000002b         db  0x00 ; '.'
000000000000002c         db  0x00 ; '.'
000000000000002d         db  0x00 ; '.'
000000000000002e         db  0x00 ; '.'
000000000000002f         db  0x00 ; '.'
0000000000000030         db  0x00 ; '.'
0000000000000031         db  0x00 ; '.'
0000000000000032         db  0x00 ; '.'
0000000000000033         db  0x00 ; '.'
0000000000000034         db  0x40 ; '@'
0000000000000035         db  0x00 ; '.'
0000000000000036         db  0x38 ; '8'
0000000000000037         db  0x00 ; '.'
0000000000000038         db  0x09 ; '.'
0000000000000039         db  0x00 ; '.'
000000000000003a         db  0x40 ; '@'
000000000000003b         db  0x00 ; '.'
000000000000003c         db  0x25 ; '%'
000000000000003d         db  0x00 ; '.'
000000000000003e         db  0x24 ; '$'
000000000000003f         db  0x00 ; '.'
0000000000000040         db  0x06 ; '.'
0000000000000041         db  0x00 ; '.'
0000000000000042         db  0x00 ; '.'
0000000000000043         db  0x00 ; '.'
0000000000000044         db  0x04 ; '.'
0000000000000045         db  0x00 ; '.'
0000000000000046         db  0x00 ; '.'
0000000000000047         db  0x00 ; '.'
0000000000000048         db  0x40 ; '@'
0000000000000049         db  0x00 ; '.'
000000000000004a         db  0x00 ; '.'
000000000000004b         db  0x00 ; '.'
000000000000004c         db  0x00 ; '.'
000000000000004d         db  0x00 ; '.'
000000000000004e         db  0x00 ; '.'
000000000000004f         db  0x00 ; '.'
0000000000000050         db  0x40 ; '@'
0000000000000051         db  0x00 ; '.'
0000000000000052         db  0x00 ; '.'
0000000000000053         db  0x00 ; '.'
0000000000000054         db  0x00 ; '.'
0000000000000055         db  0x00 ; '.'
0000000000000056         db  0x00 ; '.'
0000000000000057         db  0x00 ; '.'
0000000000000058         db  0x40 ; '@'
0000000000000059         db  0x00 ; '.'
000000000000005a         db  0x00 ; '.'
000000000000005b         db  0x00 ; '.'
000000000000005c         db  0x00 ; '.'
000000000000005d         db  0x00 ; '.'
000000000000005e         db  0x00 ; '.'
000000000000005f         db  0x00 ; '.'
0000000000000060         db  0xf8 ; '.'
0000000000000061         db  0x01 ; '.'
0000000000000062         db  0x00 ; '.'
0000000000000063         db  0x00 ; '.'
0000000000000064         db  0x00 ; '.'
0000000000000065         db  0x00 ; '.'
0000000000000066         db  0x00 ; '.'
0000000000000067         db  0x00 ; '.'
0000000000000068         db  0xf8 ; '.'
0000000000000069         db  0x01 ; '.'
000000000000006a         db  0x00 ; '.'
000000000000006b         db  0x00 ; '.'
000000000000006c         db  0x00 ; '.'
000000000000006d         db  0x00 ; '.'
000000000000006e         db  0x00 ; '.'
000000000000006f         db  0x00 ; '.'
0000000000000070         db  0x08 ; '.'
0000000000000071         db  0x00 ; '.'
0000000000000072         db  0x00 ; '.'
0000000000000073         db  0x00 ; '.'
0000000000000074         db  0x00 ; '.'
0000000000000075         db  0x00 ; '.'
0000000000000076         db  0x00 ; '.'
0000000000000077         db  0x00 ; '.'
0000000000000078         db  0x03 ; '.'
0000000000000079         db  0x00 ; '.'
000000000000007a         db  0x00 ; '.'
000000000000007b         db  0x00 ; '.'
000000000000007c         db  0x04 ; '.'
000000000000007d         db  0x00 ; '.'
000000000000007e         db  0x00 ; '.'
000000000000007f         db  0x00 ; '.'
0000000000000080         db  0x38 ; '8'
0000000000000081         db  0x02 ; '.'
0000000000000082         db  0x00 ; '.'
0000000000000083         db  0x00 ; '.'
0000000000000084         db  0x00 ; '.'
0000000000000085         db  0x00 ; '.'
0000000000000086         db  0x00 ; '.'
0000000000000087         db  0x00 ; '.'
0000000000000088         db  0x38 ; '8'
0000000000000089         db  0x02 ; '.'
000000000000008a         db  0x00 ; '.'
000000000000008b         db  0x00 ; '.'
000000000000008c         db  0x00 ; '.'
000000000000008d         db  0x00 ; '.'
000000000000008e         db  0x00 ; '.'
000000000000008f         db  0x00 ; '.'
0000000000000090         db  0x38 ; '8'
0000000000000091         db  0x02 ; '.'
0000000000000092         db  0x00 ; '.'
0000000000000093         db  0x00 ; '.'
0000000000000094         db  0x00 ; '.'
0000000000000095         db  0x00 ; '.'
0000000000000096         db  0x00 ; '.'
0000000000000097         db  0x00 ; '.'
0000000000000098         db  0x1c ; '.'
0000000000000099         db  0x00 ; '.'
000000000000009a         db  0x00 ; '.'
000000000000009b         db  0x00 ; '.'
000000000000009c         db  0x00 ; '.'
000000000000009d         db  0x00 ; '.'
000000000000009e         db  0x00 ; '.'
000000000000009f         db  0x00 ; '.'
00000000000000a0         db  0x1c ; '.'
00000000000000a1         db  0x00 ; '.'
00000000000000a2         db  0x00 ; '.'
00000000000000a3         db  0x00 ; '.'
00000000000000a4         db  0x00 ; '.'
00000000000000a5         db  0x00 ; '.'
00000000000000a6         db  0x00 ; '.'
00000000000000a7         db  0x00 ; '.'
00000000000000a8         db  0x01 ; '.'
00000000000000a9         db  0x00 ; '.'
00000000000000aa         db  0x00 ; '.'
00000000000000ab         db  0x00 ; '.'
00000000000000ac         db  0x00 ; '.'
00000000000000ad         db  0x00 ; '.'
00000000000000ae         db  0x00 ; '.'
00000000000000af         db  0x00 ; '.'
00000000000000b0         db  0x01 ; '.'
00000000000000b1         db  0x00 ; '.'
00000000000000b2         db  0x00 ; '.'
00000000000000b3         db  0x00 ; '.'
00000000000000b4         db  0x05 ; '.'
00000000000000b5         db  0x00 ; '.'
00000000000000b6         db  0x00 ; '.'
00000000000000b7         db  0x00 ; '.'
00000000000000b8         db  0x00 ; '.'
00000000000000b9         db  0x00 ; '.'
00000000000000ba         db  0x00 ; '.'
00000000000000bb         db  0x00 ; '.'
00000000000000bc         db  0x00 ; '.'
00000000000000bd         db  0x00 ; '.'
00000000000000be         db  0x00 ; '.'
00000000000000bf         db  0x00 ; '.'
00000000000000c0         db  0x00 ; '.'
00000000000000c1         db  0x00 ; '.'
00000000000000c2         db  0x00 ; '.'
00000000000000c3         db  0x00 ; '.'
00000000000000c4         db  0x00 ; '.'
00000000000000c5         db  0x00 ; '.'
00000000000000c6         db  0x00 ; '.'
00000000000000c7         db  0x00 ; '.'
00000000000000c8         db  0x00 ; '.'
00000000000000c9         db  0x00 ; '.'
00000000000000ca         db  0x00 ; '.'
00000000000000cb         db  0x00 ; '.'
00000000000000cc         db  0x00 ; '.'
00000000000000cd         db  0x00 ; '.'
00000000000000ce         db  0x00 ; '.'
00000000000000cf         db  0x00 ; '.'
00000000000000d0         db  0xd0 ; '.'
00000000000000d1         db  0xd1 ; '.'
00000000000000d2         db  0x00 ; '.'
00000000000000d3         db  0x00 ; '.'
00000000000000d4         db  0x00 ; '.'
00000000000000d5         db  0x00 ; '.'
00000000000000d6         db  0x00 ; '.'
00000000000000d7         db  0x00 ; '.'
00000000000000d8         db  0xd0 ; '.'
00000000000000d9         db  0xd1 ; '.'
00000000000000da         db  0x00 ; '.'
00000000000000db         db  0x00 ; '.'
00000000000000dc         db  0x00 ; '.'
00000000000000dd         db  0x00 ; '.'
00000000000000de         db  0x00 ; '.'
00000000000000df         db  0x00 ; '.'
00000000000000e0         db  0x00 ; '.'
00000000000000e1         db  0x00 ; '.'
00000000000000e2         db  0x20 ; ' '
00000000000000e3         db  0x00 ; '.'
00000000000000e4         db  0x00 ; '.'
00000000000000e5         db  0x00 ; '.'
00000000000000e6         db  0x00 ; '.'
00000000000000e7         db  0x00 ; '.'
00000000000000e8         db  0x01 ; '.'
00000000000000e9         db  0x00 ; '.'
00000000000000ea         db  0x00 ; '.'
00000000000000eb         db  0x00 ; '.'
00000000000000ec         db  0x06 ; '.'
00000000000000ed         db  0x00 ; '.'
00000000000000ee         db  0x00 ; '.'
00000000000000ef         db  0x00 ; '.'
00000000000000f0         db  0x30 ; '0'
00000000000000f1         db  0xd8 ; '.'
00000000000000f2         db  0x00 ; '.'
00000000000000f3         db  0x00 ; '.'
00000000000000f4         db  0x00 ; '.'
00000000000000f5         db  0x00 ; '.'
00000000000000f6         db  0x00 ; '.'
00000000000000f7         db  0x00 ; '.'
00000000000000f8         db  0x30 ; '0'
00000000000000f9         db  0xd8 ; '.'
00000000000000fa         db  0x20 ; ' '
00000000000000fb         db  0x00 ; '.'
00000000000000fc         db  0x00 ; '.'
00000000000000fd         db  0x00 ; '.'
00000000000000fe         db  0x00 ; '.'
00000000000000ff         db  0x00 ; '.'
0000000000000100         db  0x30 ; '0'                                         ; DATA XREF=quotearg_free+87, rpl_fflush+18, slotvec0
0000000000000101         db  0xd8 ; '.'
0000000000000102         db  0x20 ; ' '
0000000000000103         db  0x00 ; '.'
0000000000000104         db  0x00 ; '.'
0000000000000105         db  0x00 ; '.'
0000000000000106         db  0x00 ; '.'
0000000000000107         db  0x00 ; '.'
0000000000000108         db  0x90 ; '.'
0000000000000109         db  0x08 ; '.'
000000000000010a         db  0x00 ; '.'
000000000000010b         db  0x00 ; '.'
000000000000010c         db  0x00 ; '.'
000000000000010d         db  0x00 ; '.'
000000000000010e         db  0x00 ; '.'
000000000000010f         db  0x00 ; '.'
0000000000000110         db  0xd8 ; '.'
0000000000000111         db  0x0a ; '.'
0000000000000112         db  0x00 ; '.'
0000000000000113         db  0x00 ; '.'
0000000000000114         db  0x00 ; '.'
0000000000000115         db  0x00 ; '.'
0000000000000116         db  0x00 ; '.'
0000000000000117         db  0x00 ; '.'
0000000000000118         db  0x00 ; '.'
0000000000000119         db  0x00 ; '.'
000000000000011a         db  0x20 ; ' '
000000000000011b         db  0x00 ; '.'
000000000000011c         db  0x00 ; '.'
000000000000011d         db  0x00 ; '.'
000000000000011e         db  0x00 ; '.'
000000000000011f         db  0x00 ; '.'
0000000000000120         db  0x02 ; '.'
0000000000000121         db  0x00 ; '.'
0000000000000122         db  0x00 ; '.'
0000000000000123         db  0x00 ; '.'
0000000000000124         db  0x06 ; '.'
0000000000000125         db  0x00 ; '.'
0000000000000126         db  0x00 ; '.'
0000000000000127         db  0x00 ; '.'
0000000000000128         db  0xf8 ; '.'
0000000000000129         db  0xdb ; '.'
000000000000012a         db  0x00 ; '.'
000000000000012b         db  0x00 ; '.'
000000000000012c         db  0x00 ; '.'
000000000000012d         db  0x00 ; '.'
000000000000012e         db  0x00 ; '.'
000000000000012f         db  0x00 ; '.'
0000000000000130         db  0xf8 ; '.'
0000000000000131         db  0xdb ; '.'
0000000000000132         db  0x20 ; ' '
0000000000000133         db  0x00 ; '.'
0000000000000134         db  0x00 ; '.'
0000000000000135         db  0x00 ; '.'
0000000000000136         db  0x00 ; '.'
0000000000000137         db  0x00 ; '.'
0000000000000138         db  0xf8 ; '.'
0000000000000139         db  0xdb ; '.'
000000000000013a         db  0x20 ; ' '
000000000000013b         db  0x00 ; '.'
000000000000013c         db  0x00 ; '.'
000000000000013d         db  0x00 ; '.'
000000000000013e         db  0x00 ; '.'
000000000000013f         db  0x00 ; '.'
0000000000000140         db  0xf0 ; '.'
0000000000000141         db  0x01 ; '.'
0000000000000142         db  0x00 ; '.'
0000000000000143         db  0x00 ; '.'
0000000000000144         db  0x00 ; '.'
0000000000000145         db  0x00 ; '.'
0000000000000146         db  0x00 ; '.'
0000000000000147         db  0x00 ; '.'
0000000000000148         db  0xf0 ; '.'
0000000000000149         db  0x01 ; '.'
000000000000014a         db  0x00 ; '.'
000000000000014b         db  0x00 ; '.'
000000000000014c         db  0x00 ; '.'
000000000000014d         db  0x00 ; '.'
000000000000014e         db  0x00 ; '.'
000000000000014f         db  0x00 ; '.'
0000000000000150         db  0x08 ; '.'
0000000000000151         db  0x00 ; '.'
0000000000000152         db  0x00 ; '.'
0000000000000153         db  0x00 ; '.'
0000000000000154         db  0x00 ; '.'
0000000000000155         db  0x00 ; '.'
0000000000000156         db  0x00 ; '.'
0000000000000157         db  0x00 ; '.'
0000000000000158         db  0x04 ; '.'
0000000000000159         db  0x00 ; '.'
000000000000015a         db  0x00 ; '.'
000000000000015b         db  0x00 ; '.'
000000000000015c         db  0x04 ; '.'
000000000000015d         db  0x00 ; '.'
000000000000015e         db  0x00 ; '.'
000000000000015f         db  0x00 ; '.'
0000000000000160         db  0x54 ; 'T'
0000000000000161         db  0x02 ; '.'
0000000000000162         db  0x00 ; '.'
0000000000000163         db  0x00 ; '.'
0000000000000164         db  0x00 ; '.'
0000000000000165         db  0x00 ; '.'
0000000000000166         db  0x00 ; '.'
0000000000000167         db  0x00 ; '.'
0000000000000168         db  0x54 ; 'T'                                         ; DATA XREF=process_field+16, process_field+133
0000000000000169         db  0x02 ; '.'
000000000000016a         db  0x00 ; '.'
000000000000016b         db  0x00 ; '.'
000000000000016c         db  0x00 ; '.'
000000000000016d         db  0x00 ; '.'
000000000000016e         db  0x00 ; '.'
000000000000016f         db  0x00 ; '.'
0000000000000170         db  0x54 ; 'T'
0000000000000171         db  0x02 ; '.'
0000000000000172         db  0x00 ; '.'
0000000000000173         db  0x00 ; '.'
0000000000000174         db  0x00 ; '.'
0000000000000175         db  0x00 ; '.'
0000000000000176         db  0x00 ; '.'
0000000000000177         db  0x00 ; '.'
0000000000000178         db  0x44 ; 'D'
0000000000000179         db  0x00 ; '.'
000000000000017a         db  0x00 ; '.'
000000000000017b         db  0x00 ; '.'
000000000000017c         db  0x00 ; '.'
000000000000017d         db  0x00 ; '.'
000000000000017e         db  0x00 ; '.'
000000000000017f         db  0x00 ; '.'
0000000000000180         db  0x44 ; 'D'
0000000000000181         db  0x00 ; '.'
0000000000000182         db  0x00 ; '.'
0000000000000183         db  0x00 ; '.'
0000000000000184         db  0x00 ; '.'
0000000000000185         db  0x00 ; '.'
0000000000000186         db  0x00 ; '.'
0000000000000187         db  0x00 ; '.'
0000000000000188         db  0x04 ; '.'
0000000000000189         db  0x00 ; '.'
000000000000018a         db  0x00 ; '.'
000000000000018b         db  0x00 ; '.'
000000000000018c         db  0x00 ; '.'
000000000000018d         db  0x00 ; '.'
000000000000018e         db  0x00 ; '.'
000000000000018f         db  0x00 ; '.'
0000000000000190         db  0x50 ; 'P'
0000000000000191         db  0xe5 ; '.'
0000000000000192         db  0x74 ; 't'
0000000000000193         db  0x64 ; 'd'
0000000000000194         db  0x04 ; '.'
0000000000000195         db  0x00 ; '.'
0000000000000196         db  0x00 ; '.'
0000000000000197         db  0x00 ; '.'
0000000000000198         db  0xbc ; '.'
0000000000000199         db  0xbe ; '.'
000000000000019a         db  0x00 ; '.'
000000000000019b         db  0x00 ; '.'
000000000000019c         db  0x00 ; '.'
000000000000019d         db  0x00 ; '.'
000000000000019e         db  0x00 ; '.'
000000000000019f         db  0x00 ; '.'
00000000000001a0         db  0xbc ; '.'
00000000000001a1         db  0xbe ; '.'
00000000000001a2         db  0x00 ; '.'
00000000000001a3         db  0x00 ; '.'
00000000000001a4         db  0x00 ; '.'
00000000000001a5         db  0x00 ; '.'
00000000000001a6         db  0x00 ; '.'
00000000000001a7         db  0x00 ; '.'
00000000000001a8         db  0xbc ; '.'
00000000000001a9         db  0xbe ; '.'
00000000000001aa         db  0x00 ; '.'
00000000000001ab         db  0x00 ; '.'
00000000000001ac         db  0x00 ; '.'
00000000000001ad         db  0x00 ; '.'
00000000000001ae         db  0x00 ; '.'
00000000000001af         db  0x00 ; '.'
00000000000001b0         db  0xdc ; '.'
00000000000001b1         db  0x02 ; '.'
00000000000001b2         db  0x00 ; '.'
00000000000001b3         db  0x00 ; '.'
00000000000001b4         db  0x00 ; '.'
00000000000001b5         db  0x00 ; '.'
00000000000001b6         db  0x00 ; '.'
00000000000001b7         db  0x00 ; '.'
00000000000001b8         db  0xdc ; '.'
00000000000001b9         db  0x02 ; '.'
00000000000001ba         db  0x00 ; '.'
00000000000001bb         db  0x00 ; '.'
00000000000001bc         db  0x00 ; '.'
00000000000001bd         db  0x00 ; '.'
00000000000001be         db  0x00 ; '.'
00000000000001bf         db  0x00 ; '.'
00000000000001c0         db  0x04 ; '.'
00000000000001c1         db  0x00 ; '.'
00000000000001c2         db  0x00 ; '.'
00000000000001c3         db  0x00 ; '.'
00000000000001c4         db  0x00 ; '.'
00000000000001c5         db  0x00 ; '.'
00000000000001c6         db  0x00 ; '.'
00000000000001c7         db  0x00 ; '.'
00000000000001c8         db  0x51 ; 'Q'
00000000000001c9         db  0xe5 ; '.'
00000000000001ca         db  0x74 ; 't'
00000000000001cb         db  0x64 ; 'd'
00000000000001cc         db  0x06 ; '.'
00000000000001cd         db  0x00 ; '.'
00000000000001ce         db  0x00 ; '.'
00000000000001cf         db  0x00 ; '.'
00000000000001d0         db  0x00 ; '.'
00000000000001d1         db  0x00 ; '.'
00000000000001d2         db  0x00 ; '.'
00000000000001d3         db  0x00 ; '.'
00000000000001d4         db  0x00 ; '.'
00000000000001d5         db  0x00 ; '.'
00000000000001d6         db  0x00 ; '.'
00000000000001d7         db  0x00 ; '.'
00000000000001d8         db  0x00 ; '.'
00000000000001d9         db  0x00 ; '.'
00000000000001da         db  0x00 ; '.'
00000000000001db         db  0x00 ; '.'
00000000000001dc         db  0x00 ; '.'
00000000000001dd         db  0x00 ; '.'
00000000000001de         db  0x00 ; '.'
00000000000001df         db  0x00 ; '.'
00000000000001e0         db  0x00 ; '.'
00000000000001e1         db  0x00 ; '.'
00000000000001e2         db  0x00 ; '.'
00000000000001e3         db  0x00 ; '.'
00000000000001e4         db  0x00 ; '.'
00000000000001e5         db  0x00 ; '.'
00000000000001e6         db  0x00 ; '.'
00000000000001e7         db  0x00 ; '.'
00000000000001e8         db  0x00 ; '.'
00000000000001e9         db  0x00 ; '.'
00000000000001ea         db  0x00 ; '.'
00000000000001eb         db  0x00 ; '.'
00000000000001ec         db  0x00 ; '.'
00000000000001ed         db  0x00 ; '.'
00000000000001ee         db  0x00 ; '.'
00000000000001ef         db  0x00 ; '.'
00000000000001f0         db  0x00 ; '.'
00000000000001f1         db  0x00 ; '.'
00000000000001f2         db  0x00 ; '.'
00000000000001f3         db  0x00 ; '.'
00000000000001f4         db  0x00 ; '.'
00000000000001f5         db  0x00 ; '.'
00000000000001f6         db  0x00 ; '.'
00000000000001f7         db  0x00 ; '.'
00000000000001f8         db  0x10 ; '.'
00000000000001f9         db  0x00 ; '.'
00000000000001fa         db  0x00 ; '.'
00000000000001fb         db  0x00 ; '.'
00000000000001fc         db  0x00 ; '.'
00000000000001fd         db  0x00 ; '.'
00000000000001fe         db  0x00 ; '.'
00000000000001ff         db  0x00 ; '.'
0000000000000200         db  0x52 ; 'R'                                         ; DATA XREF=xstrtoumax+573
0000000000000201         db  0xe5 ; '.'
0000000000000202         db  0x74 ; 't'
0000000000000203         db  0x64 ; 'd'
0000000000000204         db  0x04 ; '.'
0000000000000205         db  0x00 ; '.'
0000000000000206         db  0x00 ; '.'
0000000000000207         db  0x00 ; '.'
0000000000000208         db  0x30 ; '0'
0000000000000209         db  0xd8 ; '.'
000000000000020a         db  0x00 ; '.'
000000000000020b         db  0x00 ; '.'
000000000000020c         db  0x00 ; '.'
000000000000020d         db  0x00 ; '.'
000000000000020e         db  0x00 ; '.'
000000000000020f         db  0x00 ; '.'
0000000000000210         db  0x30 ; '0'
0000000000000211         db  0xd8 ; '.'
0000000000000212         db  0x20 ; ' '
0000000000000213         db  0x00 ; '.'
0000000000000214         db  0x00 ; '.'
0000000000000215         db  0x00 ; '.'
0000000000000216         db  0x00 ; '.'
0000000000000217         db  0x00 ; '.'
0000000000000218         db  0x30 ; '0'
0000000000000219         db  0xd8 ; '.'
000000000000021a         db  0x20 ; ' '
000000000000021b         db  0x00 ; '.'
000000000000021c         db  0x00 ; '.'
000000000000021d         db  0x00 ; '.'
000000000000021e         db  0x00 ; '.'
000000000000021f         db  0x00 ; '.'
0000000000000220         db  0xd0 ; '.'
0000000000000221         db  0x07 ; '.'
0000000000000222         db  0x00 ; '.'
0000000000000223         db  0x00 ; '.'
0000000000000224         db  0x00 ; '.'
0000000000000225         db  0x00 ; '.'
0000000000000226         db  0x00 ; '.'
0000000000000227         db  0x00 ; '.'
0000000000000228         db  0xd0 ; '.'
0000000000000229         db  0x07 ; '.'
000000000000022a         db  0x00 ; '.'
000000000000022b         db  0x00 ; '.'
000000000000022c         db  0x00 ; '.'
000000000000022d         db  0x00 ; '.'
000000000000022e         db  0x00 ; '.'
000000000000022f         db  0x00 ; '.'
0000000000000230         db  0x01 ; '.'
0000000000000231         db  0x00 ; '.'
0000000000000232         db  0x00 ; '.'
0000000000000233         db  0x00 ; '.'
0000000000000234         db  0x00 ; '.'
0000000000000235         db  0x00 ; '.'
0000000000000236         db  0x00 ; '.'
0000000000000237         db  0x00 ; '.'


        ; Section .interp
        ; Range: [0x238; 0x254[ (28 bytes)
        ; File offset : [568; 596[ (28 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

                     aLib64ldlinuxx8:
0000000000000238         db         "/lib64/ld-linux-x86-64.so.2", 0


        ; Section .note.ABI-tag
        ; Range: [0x254; 0x274[ (32 bytes)
        ; File offset : [596; 628[ (32 bytes)
        ; Flags: 0x2
        ;   SHT_NOTE
        ;   SHF_ALLOC

0000000000000254         db  0x04 ; '.'
0000000000000255         db  0x00 ; '.'
0000000000000256         db  0x00 ; '.'
0000000000000257         db  0x00 ; '.'
0000000000000258         db  0x10 ; '.'
0000000000000259         db  0x00 ; '.'
000000000000025a         db  0x00 ; '.'
000000000000025b         db  0x00 ; '.'
000000000000025c         db  0x01 ; '.'
000000000000025d         db  0x00 ; '.'
000000000000025e         db  0x00 ; '.'
000000000000025f         db  0x00 ; '.'
0000000000000260         db  0x47 ; 'G'
0000000000000261         db  0x4e ; 'N'
0000000000000262         db  0x55 ; 'U'
0000000000000263         db  0x00 ; '.'
0000000000000264         db  0x00 ; '.'
0000000000000265         db  0x00 ; '.'
0000000000000266         db  0x00 ; '.'
0000000000000267         db  0x00 ; '.'
0000000000000268         db  0x03 ; '.'
0000000000000269         db  0x00 ; '.'
000000000000026a         db  0x00 ; '.'
000000000000026b         db  0x00 ; '.'
000000000000026c         db  0x02 ; '.'
000000000000026d         db  0x00 ; '.'
000000000000026e         db  0x00 ; '.'
000000000000026f         db  0x00 ; '.'
0000000000000270         db  0x00 ; '.'
0000000000000271         db  0x00 ; '.'
0000000000000272         db  0x00 ; '.'
0000000000000273         db  0x00 ; '.'


        ; Section .note.gnu.build-id
        ; Range: [0x274; 0x298[ (36 bytes)
        ; File offset : [628; 664[ (36 bytes)
        ; Flags: 0x2
        ;   SHT_NOTE
        ;   SHF_ALLOC

0000000000000274         db  0x04 ; '.'
0000000000000275         db  0x00 ; '.'
0000000000000276         db  0x00 ; '.'
0000000000000277         db  0x00 ; '.'
0000000000000278         db  0x14 ; '.'
0000000000000279         db  0x00 ; '.'
000000000000027a         db  0x00 ; '.'
000000000000027b         db  0x00 ; '.'
000000000000027c         db  0x03 ; '.'
000000000000027d         db  0x00 ; '.'
000000000000027e         db  0x00 ; '.'
000000000000027f         db  0x00 ; '.'
0000000000000280         db  0x47 ; 'G'
0000000000000281         db  0x4e ; 'N'
0000000000000282         db  0x55 ; 'U'
0000000000000283         db  0x00 ; '.'
0000000000000284         db  0x98 ; '.'
0000000000000285         db  0x75 ; 'u'
0000000000000286         db  0x0b ; '.'
0000000000000287         db  0xf2 ; '.'
0000000000000288         db  0x4e ; 'N'
0000000000000289         db  0x18 ; '.'
000000000000028a         db  0x2b ; '+'
000000000000028b         db  0xb6 ; '.'
000000000000028c         db  0x60 ; '`'
000000000000028d         db  0xaa ; '.'
000000000000028e         db  0x9a ; '.'
000000000000028f         db  0x6c ; 'l'
0000000000000290         db  0x2e ; '.'
0000000000000291         db  0x70 ; 'p'
0000000000000292         db  0x8e ; '.'
0000000000000293         db  0x4d ; 'M'
0000000000000294         db  0x08 ; '.'
0000000000000295         db  0x89 ; '.'
0000000000000296         db  0x7d ; '}'
0000000000000297         db  0x81 ; '.'


        ; Section .gnu.hash
        ; Range: [0x298; 0x2e0[ (72 bytes)
        ; File offset : [664; 736[ (72 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000000298         db  0x03 ; '.'
0000000000000299         db  0x00 ; '.'
000000000000029a         db  0x00 ; '.'
000000000000029b         db  0x00 ; '.'
000000000000029c         db  0x40 ; '@'
000000000000029d         db  0x00 ; '.'
000000000000029e         db  0x00 ; '.'
000000000000029f         db  0x00 ; '.'
00000000000002a0         db  0x01 ; '.'
00000000000002a1         db  0x00 ; '.'
00000000000002a2         db  0x00 ; '.'
00000000000002a3         db  0x00 ; '.'
00000000000002a4         db  0x06 ; '.'
00000000000002a5         db  0x00 ; '.'
00000000000002a6         db  0x00 ; '.'
00000000000002a7         db  0x00 ; '.'
00000000000002a8         db  0x04 ; '.'
00000000000002a9         db  0x4d ; 'M'
00000000000002aa         db  0x61 ; 'a'
00000000000002ab         db  0x00 ; '.'
00000000000002ac         db  0xa0 ; '.'
00000000000002ad         db  0x01 ; '.'
00000000000002ae         db  0x1c ; '.'
00000000000002af         db  0x12 ; '.'
00000000000002b0         db  0x40 ; '@'
00000000000002b1         db  0x00 ; '.'
00000000000002b2         db  0x00 ; '.'
00000000000002b3         db  0x00 ; '.'
00000000000002b4         db  0x41 ; 'A'
00000000000002b5         db  0x00 ; '.'
00000000000002b6         db  0x00 ; '.'
00000000000002b7         db  0x00 ; '.'
00000000000002b8         db  0x47 ; 'G'
00000000000002b9         db  0x00 ; '.'
00000000000002ba         db  0x00 ; '.'
00000000000002bb         db  0x00 ; '.'
00000000000002bc         db  0x29 ; ')'
00000000000002bd         db  0x1d ; '.'
00000000000002be         db  0x8c ; '.'
00000000000002bf         db  0x1c ; '.'
00000000000002c0         db  0xbc ; '.'
00000000000002c1         db  0x50 ; 'P'
00000000000002c2         db  0x76 ; 'v'
00000000000002c3         db  0x9e ; '.'
00000000000002c4         db  0x66 ; 'f'
00000000000002c5         db  0x55 ; 'U'
00000000000002c6         db  0x61 ; 'a'
00000000000002c7         db  0x10 ; '.'
00000000000002c8         db  0x96 ; '.'
00000000000002c9         db  0xa0 ; '.'
00000000000002ca         db  0x89 ; '.'
00000000000002cb         db  0x97 ; '.'
00000000000002cc         db  0xce ; '.'
00000000000002cd         db  0x2c ; ','
00000000000002ce         db  0x63 ; 'c'
00000000000002cf         db  0x72 ; 'r'
00000000000002d0         db  0xe4 ; '.'
00000000000002d1         db  0x62 ; 'b'
00000000000002d2         db  0x41 ; 'A'
00000000000002d3         db  0xf5 ; '.'
00000000000002d4         db  0x39 ; '9'
00000000000002d5         db  0xf2 ; '.'
00000000000002d6         db  0x8b ; '.'
00000000000002d7         db  0x1c ; '.'
00000000000002d8         db  0x32 ; '2'
00000000000002d9         db  0xc4 ; '.'
00000000000002da         db  0xf7 ; '.'
00000000000002db         db  0x12 ; '.'
00000000000002dc         db  0xb3 ; '.'
00000000000002dd         db  0xa2 ; '.'
00000000000002de         db  0xf7 ; '.'
00000000000002df         db  0x12 ; '.'


        ; Section .dynsym
        ; Range: [0x2e0; 0x9b8[ (1752 bytes)
        ; File offset : [736; 2488[ (1752 bytes)
        ; Flags: 0x2
        ;   SHT_DYNSYM
        ;   SHF_ALLOC

00000000000002e0         db  0x00 ; '.'
00000000000002e1         db  0x00 ; '.'
00000000000002e2         db  0x00 ; '.'
00000000000002e3         db  0x00 ; '.'
00000000000002e4         db  0x00 ; '.'
00000000000002e5         db  0x00 ; '.'
00000000000002e6         db  0x00 ; '.'
00000000000002e7         db  0x00 ; '.'
00000000000002e8         db  0x00 ; '.'
00000000000002e9         db  0x00 ; '.'
00000000000002ea         db  0x00 ; '.'
00000000000002eb         db  0x00 ; '.'
00000000000002ec         db  0x00 ; '.'
00000000000002ed         db  0x00 ; '.'
00000000000002ee         db  0x00 ; '.'
00000000000002ef         db  0x00 ; '.'
00000000000002f0         db  0x00 ; '.'
00000000000002f1         db  0x00 ; '.'
00000000000002f2         db  0x00 ; '.'
00000000000002f3         db  0x00 ; '.'
00000000000002f4         db  0x00 ; '.'
00000000000002f5         db  0x00 ; '.'
00000000000002f6         db  0x00 ; '.'
00000000000002f7         db  0x00 ; '.'
00000000000002f8         db  0xa9 ; '.'
00000000000002f9         db  0x01 ; '.'
00000000000002fa         db  0x00 ; '.'
00000000000002fb         db  0x00 ; '.'
00000000000002fc         db  0x12 ; '.'
00000000000002fd         db  0x00 ; '.'
00000000000002fe         db  0x00 ; '.'
00000000000002ff         db  0x00 ; '.'
0000000000000300         db  0x00 ; '.'
0000000000000301         db  0x00 ; '.'
0000000000000302         db  0x00 ; '.'
0000000000000303         db  0x00 ; '.'
0000000000000304         db  0x00 ; '.'
0000000000000305         db  0x00 ; '.'
0000000000000306         db  0x00 ; '.'
0000000000000307         db  0x00 ; '.'
0000000000000308         db  0x00 ; '.'
0000000000000309         db  0x00 ; '.'
000000000000030a         db  0x00 ; '.'
000000000000030b         db  0x00 ; '.'
000000000000030c         db  0x00 ; '.'
000000000000030d         db  0x00 ; '.'
000000000000030e         db  0x00 ; '.'
000000000000030f         db  0x00 ; '.'
0000000000000310         db  0x92 ; '.'
0000000000000311         db  0x02 ; '.'
0000000000000312         db  0x00 ; '.'
0000000000000313         db  0x00 ; '.'
0000000000000314         db  0x12 ; '.'
0000000000000315         db  0x00 ; '.'
0000000000000316         db  0x00 ; '.'
0000000000000317         db  0x00 ; '.'
0000000000000318         db  0x00 ; '.'
0000000000000319         db  0x00 ; '.'
000000000000031a         db  0x00 ; '.'
000000000000031b         db  0x00 ; '.'
000000000000031c         db  0x00 ; '.'
000000000000031d         db  0x00 ; '.'
000000000000031e         db  0x00 ; '.'
000000000000031f         db  0x00 ; '.'
0000000000000320         db  0x00 ; '.'
0000000000000321         db  0x00 ; '.'
0000000000000322         db  0x00 ; '.'
0000000000000323         db  0x00 ; '.'
0000000000000324         db  0x00 ; '.'
0000000000000325         db  0x00 ; '.'
0000000000000326         db  0x00 ; '.'
0000000000000327         db  0x00 ; '.'
0000000000000328         db  0x8a ; '.'
0000000000000329         db  0x00 ; '.'
000000000000032a         db  0x00 ; '.'
000000000000032b         db  0x00 ; '.'
000000000000032c         db  0x12 ; '.'
000000000000032d         db  0x00 ; '.'
000000000000032e         db  0x00 ; '.'
000000000000032f         db  0x00 ; '.'
0000000000000330         db  0x00 ; '.'
0000000000000331         db  0x00 ; '.'
0000000000000332         db  0x00 ; '.'
0000000000000333         db  0x00 ; '.'
0000000000000334         db  0x00 ; '.'
0000000000000335         db  0x00 ; '.'
0000000000000336         db  0x00 ; '.'
0000000000000337         db  0x00 ; '.'
0000000000000338         db  0x00 ; '.'
0000000000000339         db  0x00 ; '.'
000000000000033a         db  0x00 ; '.'
000000000000033b         db  0x00 ; '.'
000000000000033c         db  0x00 ; '.'
000000000000033d         db  0x00 ; '.'
000000000000033e         db  0x00 ; '.'
000000000000033f         db  0x00 ; '.'
0000000000000340         db  0xfc ; '.'
0000000000000341         db  0x00 ; '.'
0000000000000342         db  0x00 ; '.'
0000000000000343         db  0x00 ; '.'
0000000000000344         db  0x12 ; '.'
0000000000000345         db  0x00 ; '.'
0000000000000346         db  0x00 ; '.'
0000000000000347         db  0x00 ; '.'
0000000000000348         db  0x00 ; '.'
0000000000000349         db  0x00 ; '.'
000000000000034a         db  0x00 ; '.'
000000000000034b         db  0x00 ; '.'
000000000000034c         db  0x00 ; '.'
000000000000034d         db  0x00 ; '.'
000000000000034e         db  0x00 ; '.'
000000000000034f         db  0x00 ; '.'
0000000000000350         db  0x00 ; '.'
0000000000000351         db  0x00 ; '.'
0000000000000352         db  0x00 ; '.'
0000000000000353         db  0x00 ; '.'
0000000000000354         db  0x00 ; '.'
0000000000000355         db  0x00 ; '.'
0000000000000356         db  0x00 ; '.'
0000000000000357         db  0x00 ; '.'
0000000000000358         db  0x38 ; '8'
0000000000000359         db  0x00 ; '.'
000000000000035a         db  0x00 ; '.'
000000000000035b         db  0x00 ; '.'
000000000000035c         db  0x12 ; '.'
000000000000035d         db  0x00 ; '.'
000000000000035e         db  0x00 ; '.'
000000000000035f         db  0x00 ; '.'
0000000000000360         db  0x00 ; '.'
0000000000000361         db  0x00 ; '.'
0000000000000362         db  0x00 ; '.'
0000000000000363         db  0x00 ; '.'
0000000000000364         db  0x00 ; '.'
0000000000000365         db  0x00 ; '.'
0000000000000366         db  0x00 ; '.'
0000000000000367         db  0x00 ; '.'
0000000000000368         db  0x00 ; '.'
0000000000000369         db  0x00 ; '.'
000000000000036a         db  0x00 ; '.'
000000000000036b         db  0x00 ; '.'
000000000000036c         db  0x00 ; '.'
000000000000036d         db  0x00 ; '.'
000000000000036e         db  0x00 ; '.'
000000000000036f         db  0x00 ; '.'
0000000000000370         db  0xf6 ; '.'
0000000000000371         db  0x02 ; '.'
0000000000000372         db  0x00 ; '.'
0000000000000373         db  0x00 ; '.'
0000000000000374         db  0x20 ; ' '
0000000000000375         db  0x00 ; '.'
0000000000000376         db  0x00 ; '.'
0000000000000377         db  0x00 ; '.'
0000000000000378         db  0x00 ; '.'
0000000000000379         db  0x00 ; '.'
000000000000037a         db  0x00 ; '.'
000000000000037b         db  0x00 ; '.'
000000000000037c         db  0x00 ; '.'
000000000000037d         db  0x00 ; '.'
000000000000037e         db  0x00 ; '.'
000000000000037f         db  0x00 ; '.'
0000000000000380         db  0x00 ; '.'
0000000000000381         db  0x00 ; '.'
0000000000000382         db  0x00 ; '.'
0000000000000383         db  0x00 ; '.'
0000000000000384         db  0x00 ; '.'
0000000000000385         db  0x00 ; '.'
0000000000000386         db  0x00 ; '.'
0000000000000387         db  0x00 ; '.'
0000000000000388         db  0x96 ; '.'
0000000000000389         db  0x00 ; '.'
000000000000038a         db  0x00 ; '.'
000000000000038b         db  0x00 ; '.'
000000000000038c         db  0x12 ; '.'
000000000000038d         db  0x00 ; '.'
000000000000038e         db  0x00 ; '.'
000000000000038f         db  0x00 ; '.'
0000000000000390         db  0x00 ; '.'
0000000000000391         db  0x00 ; '.'
0000000000000392         db  0x00 ; '.'
0000000000000393         db  0x00 ; '.'
0000000000000394         db  0x00 ; '.'
0000000000000395         db  0x00 ; '.'
0000000000000396         db  0x00 ; '.'
0000000000000397         db  0x00 ; '.'
0000000000000398         db  0x00 ; '.'
0000000000000399         db  0x00 ; '.'
000000000000039a         db  0x00 ; '.'
000000000000039b         db  0x00 ; '.'
000000000000039c         db  0x00 ; '.'
000000000000039d         db  0x00 ; '.'
000000000000039e         db  0x00 ; '.'
000000000000039f         db  0x00 ; '.'
00000000000003a0         db  0x12 ; '.'
00000000000003a1         db  0x00 ; '.'
00000000000003a2         db  0x00 ; '.'
00000000000003a3         db  0x00 ; '.'
00000000000003a4         db  0x12 ; '.'
00000000000003a5         db  0x00 ; '.'
00000000000003a6         db  0x00 ; '.'
00000000000003a7         db  0x00 ; '.'
00000000000003a8         db  0x00 ; '.'
00000000000003a9         db  0x00 ; '.'
00000000000003aa         db  0x00 ; '.'
00000000000003ab         db  0x00 ; '.'
00000000000003ac         db  0x00 ; '.'
00000000000003ad         db  0x00 ; '.'
00000000000003ae         db  0x00 ; '.'
00000000000003af         db  0x00 ; '.'
00000000000003b0         db  0x00 ; '.'
00000000000003b1         db  0x00 ; '.'
00000000000003b2         db  0x00 ; '.'
00000000000003b3         db  0x00 ; '.'
00000000000003b4         db  0x00 ; '.'
00000000000003b5         db  0x00 ; '.'
00000000000003b6         db  0x00 ; '.'
00000000000003b7         db  0x00 ; '.'
00000000000003b8         db  0xe0 ; '.'
00000000000003b9         db  0x01 ; '.'
00000000000003ba         db  0x00 ; '.'
00000000000003bb         db  0x00 ; '.'
00000000000003bc         db  0x12 ; '.'
00000000000003bd         db  0x00 ; '.'
00000000000003be         db  0x00 ; '.'
00000000000003bf         db  0x00 ; '.'
00000000000003c0         db  0x00 ; '.'
00000000000003c1         db  0x00 ; '.'
00000000000003c2         db  0x00 ; '.'
00000000000003c3         db  0x00 ; '.'
00000000000003c4         db  0x00 ; '.'
00000000000003c5         db  0x00 ; '.'
00000000000003c6         db  0x00 ; '.'
00000000000003c7         db  0x00 ; '.'
00000000000003c8         db  0x00 ; '.'
00000000000003c9         db  0x00 ; '.'
00000000000003ca         db  0x00 ; '.'
00000000000003cb         db  0x00 ; '.'
00000000000003cc         db  0x00 ; '.'
00000000000003cd         db  0x00 ; '.'
00000000000003ce         db  0x00 ; '.'
00000000000003cf         db  0x00 ; '.'
00000000000003d0         db  0x10 ; '.'
00000000000003d1         db  0x02 ; '.'
00000000000003d2         db  0x00 ; '.'
00000000000003d3         db  0x00 ; '.'
00000000000003d4         db  0x12 ; '.'
00000000000003d5         db  0x00 ; '.'
00000000000003d6         db  0x00 ; '.'
00000000000003d7         db  0x00 ; '.'
00000000000003d8         db  0x00 ; '.'
00000000000003d9         db  0x00 ; '.'
00000000000003da         db  0x00 ; '.'
00000000000003db         db  0x00 ; '.'
00000000000003dc         db  0x00 ; '.'
00000000000003dd         db  0x00 ; '.'
00000000000003de         db  0x00 ; '.'
00000000000003df         db  0x00 ; '.'
00000000000003e0         db  0x00 ; '.'
00000000000003e1         db  0x00 ; '.'
00000000000003e2         db  0x00 ; '.'
00000000000003e3         db  0x00 ; '.'
00000000000003e4         db  0x00 ; '.'
00000000000003e5         db  0x00 ; '.'
00000000000003e6         db  0x00 ; '.'
00000000000003e7         db  0x00 ; '.'
00000000000003e8         db  0x3b ; ';'                                         ; DATA XREF=process_field+383, process_field+612, process_field+5117, xstrtol+363, xstrtoumax+420
00000000000003e9         db  0x01 ; '.'
00000000000003ea         db  0x00 ; '.'
00000000000003eb         db  0x00 ; '.'
00000000000003ec         db  0x12 ; '.'
00000000000003ed         db  0x00 ; '.'
00000000000003ee         db  0x00 ; '.'
00000000000003ef         db  0x00 ; '.'
00000000000003f0         db  0x00 ; '.'
00000000000003f1         db  0x00 ; '.'
00000000000003f2         db  0x00 ; '.'
00000000000003f3         db  0x00 ; '.'
00000000000003f4         db  0x00 ; '.'
00000000000003f5         db  0x00 ; '.'
00000000000003f6         db  0x00 ; '.'
00000000000003f7         db  0x00 ; '.'
00000000000003f8         db  0x00 ; '.'
00000000000003f9         db  0x00 ; '.'
00000000000003fa         db  0x00 ; '.'
00000000000003fb         db  0x00 ; '.'
00000000000003fc         db  0x00 ; '.'
00000000000003fd         db  0x00 ; '.'
00000000000003fe         db  0x00 ; '.'
00000000000003ff         db  0x00 ; '.'
0000000000000400         db  0x5f ; '_'                                         ; DATA XREF=process_field+410, process_field+643, process_field+3478, process_field+5563, process_field+5665, process_field+5682, xstrtol+397, xstrtol+1614, xstrtoumax+437, xstrtoumax+806, xstrtoumax+878
0000000000000401         db  0x00 ; '.'
0000000000000402         db  0x00 ; '.'
0000000000000403         db  0x00 ; '.'
0000000000000404         db  0x12 ; '.'
0000000000000405         db  0x00 ; '.'
0000000000000406         db  0x00 ; '.'
0000000000000407         db  0x00 ; '.'
0000000000000408         db  0x00 ; '.'
0000000000000409         db  0x00 ; '.'
000000000000040a         db  0x00 ; '.'
000000000000040b         db  0x00 ; '.'
000000000000040c         db  0x00 ; '.'
000000000000040d         db  0x00 ; '.'
000000000000040e         db  0x00 ; '.'
000000000000040f         db  0x00 ; '.'
0000000000000410         db  0x00 ; '.'
0000000000000411         db  0x00 ; '.'
0000000000000412         db  0x00 ; '.'
0000000000000413         db  0x00 ; '.'
0000000000000414         db  0x00 ; '.'
0000000000000415         db  0x00 ; '.'
0000000000000416         db  0x00 ; '.'
0000000000000417         db  0x00 ; '.'
0000000000000418         db  0x3a ; ':'
0000000000000419         db  0x02 ; '.'
000000000000041a         db  0x00 ; '.'
000000000000041b         db  0x00 ; '.'
000000000000041c         db  0x12 ; '.'
000000000000041d         db  0x00 ; '.'
000000000000041e         db  0x00 ; '.'
000000000000041f         db  0x00 ; '.'
0000000000000420         db  0x00 ; '.'
0000000000000421         db  0x00 ; '.'
0000000000000422         db  0x00 ; '.'
0000000000000423         db  0x00 ; '.'
0000000000000424         db  0x00 ; '.'
0000000000000425         db  0x00 ; '.'
0000000000000426         db  0x00 ; '.'
0000000000000427         db  0x00 ; '.'
0000000000000428         db  0x00 ; '.'
0000000000000429         db  0x00 ; '.'
000000000000042a         db  0x00 ; '.'
000000000000042b         db  0x00 ; '.'
000000000000042c         db  0x00 ; '.'
000000000000042d         db  0x00 ; '.'
000000000000042e         db  0x00 ; '.'
000000000000042f         db  0x00 ; '.'
0000000000000430         db  0x58 ; 'X'
0000000000000431         db  0x01 ; '.'
0000000000000432         db  0x00 ; '.'
0000000000000433         db  0x00 ; '.'
0000000000000434         db  0x12 ; '.'
0000000000000435         db  0x00 ; '.'
0000000000000436         db  0x00 ; '.'
0000000000000437         db  0x00 ; '.'
0000000000000438         db  0x00 ; '.'
0000000000000439         db  0x00 ; '.'
000000000000043a         db  0x00 ; '.'
000000000000043b         db  0x00 ; '.'
000000000000043c         db  0x00 ; '.'
000000000000043d         db  0x00 ; '.'
000000000000043e         db  0x00 ; '.'
000000000000043f         db  0x00 ; '.'
0000000000000440         db  0x00 ; '.'
0000000000000441         db  0x00 ; '.'
0000000000000442         db  0x00 ; '.'
0000000000000443         db  0x00 ; '.'
0000000000000444         db  0x00 ; '.'
0000000000000445         db  0x00 ; '.'
0000000000000446         db  0x00 ; '.'
0000000000000447         db  0x00 ; '.'
0000000000000448         db  0x36 ; '6'
0000000000000449         db  0x02 ; '.'
000000000000044a         db  0x00 ; '.'
000000000000044b         db  0x00 ; '.'
000000000000044c         db  0x12 ; '.'
000000000000044d         db  0x00 ; '.'
000000000000044e         db  0x00 ; '.'
000000000000044f         db  0x00 ; '.'
0000000000000450         db  0x00 ; '.'
0000000000000451         db  0x00 ; '.'
0000000000000452         db  0x00 ; '.'
0000000000000453         db  0x00 ; '.'
0000000000000454         db  0x00 ; '.'
0000000000000455         db  0x00 ; '.'
0000000000000456         db  0x00 ; '.'
0000000000000457         db  0x00 ; '.'
0000000000000458         db  0x00 ; '.'
0000000000000459         db  0x00 ; '.'
000000000000045a         db  0x00 ; '.'
000000000000045b         db  0x00 ; '.'
000000000000045c         db  0x00 ; '.'
000000000000045d         db  0x00 ; '.'
000000000000045e         db  0x00 ; '.'
000000000000045f         db  0x00 ; '.'
0000000000000460         db  0x4f ; 'O'
0000000000000461         db  0x00 ; '.'
0000000000000462         db  0x00 ; '.'
0000000000000463         db  0x00 ; '.'
0000000000000464         db  0x12 ; '.'
0000000000000465         db  0x00 ; '.'
0000000000000466         db  0x00 ; '.'
0000000000000467         db  0x00 ; '.'
0000000000000468         db  0x00 ; '.'
0000000000000469         db  0x00 ; '.'
000000000000046a         db  0x00 ; '.'
000000000000046b         db  0x00 ; '.'
000000000000046c         db  0x00 ; '.'
000000000000046d         db  0x00 ; '.'
000000000000046e         db  0x00 ; '.'
000000000000046f         db  0x00 ; '.'
0000000000000470         db  0x00 ; '.'
0000000000000471         db  0x00 ; '.'
0000000000000472         db  0x00 ; '.'
0000000000000473         db  0x00 ; '.'
0000000000000474         db  0x00 ; '.'
0000000000000475         db  0x00 ; '.'
0000000000000476         db  0x00 ; '.'
0000000000000477         db  0x00 ; '.'
0000000000000478         db  0xc9 ; '.'
0000000000000479         db  0x00 ; '.'
000000000000047a         db  0x00 ; '.'
000000000000047b         db  0x00 ; '.'
000000000000047c         db  0x12 ; '.'
000000000000047d         db  0x00 ; '.'
000000000000047e         db  0x00 ; '.'
000000000000047f         db  0x00 ; '.'
0000000000000480         db  0x00 ; '.'
0000000000000481         db  0x00 ; '.'
0000000000000482         db  0x00 ; '.'
0000000000000483         db  0x00 ; '.'
0000000000000484         db  0x00 ; '.'
0000000000000485         db  0x00 ; '.'
0000000000000486         db  0x00 ; '.'
0000000000000487         db  0x00 ; '.'
0000000000000488         db  0x00 ; '.'
0000000000000489         db  0x00 ; '.'
000000000000048a         db  0x00 ; '.'
000000000000048b         db  0x00 ; '.'
000000000000048c         db  0x00 ; '.'
000000000000048d         db  0x00 ; '.'
000000000000048e         db  0x00 ; '.'
000000000000048f         db  0x00 ; '.'
0000000000000490         db  0xee ; '.'
0000000000000491         db  0x00 ; '.'
0000000000000492         db  0x00 ; '.'
0000000000000493         db  0x00 ; '.'
0000000000000494         db  0x12 ; '.'
0000000000000495         db  0x00 ; '.'
0000000000000496         db  0x00 ; '.'
0000000000000497         db  0x00 ; '.'
0000000000000498         db  0x00 ; '.'
0000000000000499         db  0x00 ; '.'
000000000000049a         db  0x00 ; '.'
000000000000049b         db  0x00 ; '.'
000000000000049c         db  0x00 ; '.'
000000000000049d         db  0x00 ; '.'
000000000000049e         db  0x00 ; '.'
000000000000049f         db  0x00 ; '.'
00000000000004a0         db  0x00 ; '.'
00000000000004a1         db  0x00 ; '.'
00000000000004a2         db  0x00 ; '.'
00000000000004a3         db  0x00 ; '.'
00000000000004a4         db  0x00 ; '.'
00000000000004a5         db  0x00 ; '.'
00000000000004a6         db  0x00 ; '.'
00000000000004a7         db  0x00 ; '.'
00000000000004a8         db  0x68 ; 'h'
00000000000004a9         db  0x00 ; '.'
00000000000004aa         db  0x00 ; '.'
00000000000004ab         db  0x00 ; '.'
00000000000004ac         db  0x12 ; '.'
00000000000004ad         db  0x00 ; '.'
00000000000004ae         db  0x00 ; '.'
00000000000004af         db  0x00 ; '.'
00000000000004b0         db  0x00 ; '.'
00000000000004b1         db  0x00 ; '.'
00000000000004b2         db  0x00 ; '.'
00000000000004b3         db  0x00 ; '.'
00000000000004b4         db  0x00 ; '.'
00000000000004b5         db  0x00 ; '.'
00000000000004b6         db  0x00 ; '.'
00000000000004b7         db  0x00 ; '.'
00000000000004b8         db  0x00 ; '.'
00000000000004b9         db  0x00 ; '.'
00000000000004ba         db  0x00 ; '.'
00000000000004bb         db  0x00 ; '.'
00000000000004bc         db  0x00 ; '.'
00000000000004bd         db  0x00 ; '.'
00000000000004be         db  0x00 ; '.'
00000000000004bf         db  0x00 ; '.'
00000000000004c0         db  0xb8 ; '.'
00000000000004c1         db  0x01 ; '.'
00000000000004c2         db  0x00 ; '.'
00000000000004c3         db  0x00 ; '.'
00000000000004c4         db  0x12 ; '.'
00000000000004c5         db  0x00 ; '.'
00000000000004c6         db  0x00 ; '.'
00000000000004c7         db  0x00 ; '.'
00000000000004c8         db  0x00 ; '.'
00000000000004c9         db  0x00 ; '.'
00000000000004ca         db  0x00 ; '.'
00000000000004cb         db  0x00 ; '.'
00000000000004cc         db  0x00 ; '.'
00000000000004cd         db  0x00 ; '.'
00000000000004ce         db  0x00 ; '.'
00000000000004cf         db  0x00 ; '.'
00000000000004d0         db  0x00 ; '.'
00000000000004d1         db  0x00 ; '.'
00000000000004d2         db  0x00 ; '.'
00000000000004d3         db  0x00 ; '.'
00000000000004d4         db  0x00 ; '.'
00000000000004d5         db  0x00 ; '.'
00000000000004d6         db  0x00 ; '.'
00000000000004d7         db  0x00 ; '.'
00000000000004d8         db  0x30 ; '0'
00000000000004d9         db  0x00 ; '.'
00000000000004da         db  0x00 ; '.'
00000000000004db         db  0x00 ; '.'
00000000000004dc         db  0x12 ; '.'
00000000000004dd         db  0x00 ; '.'
00000000000004de         db  0x00 ; '.'
00000000000004df         db  0x00 ; '.'
00000000000004e0         db  0x00 ; '.'
00000000000004e1         db  0x00 ; '.'
00000000000004e2         db  0x00 ; '.'
00000000000004e3         db  0x00 ; '.'
00000000000004e4         db  0x00 ; '.'
00000000000004e5         db  0x00 ; '.'
00000000000004e6         db  0x00 ; '.'
00000000000004e7         db  0x00 ; '.'
00000000000004e8         db  0x00 ; '.'
00000000000004e9         db  0x00 ; '.'
00000000000004ea         db  0x00 ; '.'
00000000000004eb         db  0x00 ; '.'
00000000000004ec         db  0x00 ; '.'
00000000000004ed         db  0x00 ; '.'
00000000000004ee         db  0x00 ; '.'
00000000000004ef         db  0x00 ; '.'
00000000000004f0         db  0xeb ; '.'
00000000000004f1         db  0x01 ; '.'
00000000000004f2         db  0x00 ; '.'
00000000000004f3         db  0x00 ; '.'
00000000000004f4         db  0x12 ; '.'
00000000000004f5         db  0x00 ; '.'
00000000000004f6         db  0x00 ; '.'
00000000000004f7         db  0x00 ; '.'
00000000000004f8         db  0x00 ; '.'
00000000000004f9         db  0x00 ; '.'
00000000000004fa         db  0x00 ; '.'
00000000000004fb         db  0x00 ; '.'
00000000000004fc         db  0x00 ; '.'
00000000000004fd         db  0x00 ; '.'
00000000000004fe         db  0x00 ; '.'
00000000000004ff         db  0x00 ; '.'
0000000000000500         db  0x00 ; '.'
0000000000000501         db  0x00 ; '.'
0000000000000502         db  0x00 ; '.'
0000000000000503         db  0x00 ; '.'
0000000000000504         db  0x00 ; '.'
0000000000000505         db  0x00 ; '.'
0000000000000506         db  0x00 ; '.'
0000000000000507         db  0x00 ; '.'
0000000000000508         db  0x65 ; 'e'
0000000000000509         db  0x02 ; '.'
000000000000050a         db  0x00 ; '.'
000000000000050b         db  0x00 ; '.'
000000000000050c         db  0x12 ; '.'
000000000000050d         db  0x00 ; '.'
000000000000050e         db  0x00 ; '.'
000000000000050f         db  0x00 ; '.'
0000000000000510         db  0x00 ; '.'
0000000000000511         db  0x00 ; '.'
0000000000000512         db  0x00 ; '.'
0000000000000513         db  0x00 ; '.'
0000000000000514         db  0x00 ; '.'
0000000000000515         db  0x00 ; '.'
0000000000000516         db  0x00 ; '.'
0000000000000517         db  0x00 ; '.'
0000000000000518         db  0x00 ; '.'
0000000000000519         db  0x00 ; '.'
000000000000051a         db  0x00 ; '.'
000000000000051b         db  0x00 ; '.'
000000000000051c         db  0x00 ; '.'
000000000000051d         db  0x00 ; '.'
000000000000051e         db  0x00 ; '.'
000000000000051f         db  0x00 ; '.'
0000000000000520         db  0x47 ; 'G'
0000000000000521         db  0x00 ; '.'
0000000000000522         db  0x00 ; '.'
0000000000000523         db  0x00 ; '.'
0000000000000524         db  0x12 ; '.'
0000000000000525         db  0x00 ; '.'
0000000000000526         db  0x00 ; '.'
0000000000000527         db  0x00 ; '.'
0000000000000528         db  0x00 ; '.'
0000000000000529         db  0x00 ; '.'
000000000000052a         db  0x00 ; '.'
000000000000052b         db  0x00 ; '.'
000000000000052c         db  0x00 ; '.'
000000000000052d         db  0x00 ; '.'
000000000000052e         db  0x00 ; '.'
000000000000052f         db  0x00 ; '.'
0000000000000530         db  0x00 ; '.'
0000000000000531         db  0x00 ; '.'
0000000000000532         db  0x00 ; '.'
0000000000000533         db  0x00 ; '.'
0000000000000534         db  0x00 ; '.'
0000000000000535         db  0x00 ; '.'
0000000000000536         db  0x00 ; '.'
0000000000000537         db  0x00 ; '.'
0000000000000538         db  0x4b ; 'K'
0000000000000539         db  0x01 ; '.'
000000000000053a         db  0x00 ; '.'
000000000000053b         db  0x00 ; '.'
000000000000053c         db  0x12 ; '.'
000000000000053d         db  0x00 ; '.'
000000000000053e         db  0x00 ; '.'
000000000000053f         db  0x00 ; '.'
0000000000000540         db  0x00 ; '.'
0000000000000541         db  0x00 ; '.'
0000000000000542         db  0x00 ; '.'
0000000000000543         db  0x00 ; '.'
0000000000000544         db  0x00 ; '.'
0000000000000545         db  0x00 ; '.'
0000000000000546         db  0x00 ; '.'
0000000000000547         db  0x00 ; '.'
0000000000000548         db  0x00 ; '.'
0000000000000549         db  0x00 ; '.'
000000000000054a         db  0x00 ; '.'
000000000000054b         db  0x00 ; '.'
000000000000054c         db  0x00 ; '.'
000000000000054d         db  0x00 ; '.'
000000000000054e         db  0x00 ; '.'
000000000000054f         db  0x00 ; '.'
0000000000000550         db  0xbb ; '.'
0000000000000551         db  0x00 ; '.'
0000000000000552         db  0x00 ; '.'
0000000000000553         db  0x00 ; '.'
0000000000000554         db  0x12 ; '.'
0000000000000555         db  0x00 ; '.'
0000000000000556         db  0x00 ; '.'
0000000000000557         db  0x00 ; '.'
0000000000000558         db  0x00 ; '.'
0000000000000559         db  0x00 ; '.'
000000000000055a         db  0x00 ; '.'
000000000000055b         db  0x00 ; '.'
000000000000055c         db  0x00 ; '.'
000000000000055d         db  0x00 ; '.'
000000000000055e         db  0x00 ; '.'
000000000000055f         db  0x00 ; '.'
0000000000000560         db  0x00 ; '.'
0000000000000561         db  0x00 ; '.'
0000000000000562         db  0x00 ; '.'
0000000000000563         db  0x00 ; '.'
0000000000000564         db  0x00 ; '.'
0000000000000565         db  0x00 ; '.'
0000000000000566         db  0x00 ; '.'
0000000000000567         db  0x00 ; '.'
0000000000000568         db  0x70 ; 'p'
0000000000000569         db  0x02 ; '.'
000000000000056a         db  0x00 ; '.'
000000000000056b         db  0x00 ; '.'
000000000000056c         db  0x12 ; '.'
000000000000056d         db  0x00 ; '.'
000000000000056e         db  0x00 ; '.'
000000000000056f         db  0x00 ; '.'
0000000000000570         db  0x00 ; '.'
0000000000000571         db  0x00 ; '.'
0000000000000572         db  0x00 ; '.'
0000000000000573         db  0x00 ; '.'
0000000000000574         db  0x00 ; '.'
0000000000000575         db  0x00 ; '.'
0000000000000576         db  0x00 ; '.'
0000000000000577         db  0x00 ; '.'
0000000000000578         db  0x00 ; '.'
0000000000000579         db  0x00 ; '.'
000000000000057a         db  0x00 ; '.'
000000000000057b         db  0x00 ; '.'
000000000000057c         db  0x00 ; '.'
000000000000057d         db  0x00 ; '.'
000000000000057e         db  0x00 ; '.'
000000000000057f         db  0x00 ; '.'
0000000000000580         db  0xf5 ; '.'
0000000000000581         db  0x00 ; '.'
0000000000000582         db  0x00 ; '.'
0000000000000583         db  0x00 ; '.'
0000000000000584         db  0x12 ; '.'
0000000000000585         db  0x00 ; '.'
0000000000000586         db  0x00 ; '.'
0000000000000587         db  0x00 ; '.'
0000000000000588         db  0x00 ; '.'
0000000000000589         db  0x00 ; '.'
000000000000058a         db  0x00 ; '.'
000000000000058b         db  0x00 ; '.'
000000000000058c         db  0x00 ; '.'
000000000000058d         db  0x00 ; '.'
000000000000058e         db  0x00 ; '.'
000000000000058f         db  0x00 ; '.'
0000000000000590         db  0x00 ; '.'
0000000000000591         db  0x00 ; '.'
0000000000000592         db  0x00 ; '.'
0000000000000593         db  0x00 ; '.'
0000000000000594         db  0x00 ; '.'
0000000000000595         db  0x00 ; '.'
0000000000000596         db  0x00 ; '.'
0000000000000597         db  0x00 ; '.'
0000000000000598         db  0x9c ; '.'
0000000000000599         db  0x00 ; '.'
000000000000059a         db  0x00 ; '.'
000000000000059b         db  0x00 ; '.'
000000000000059c         db  0x12 ; '.'
000000000000059d         db  0x00 ; '.'
000000000000059e         db  0x00 ; '.'
000000000000059f         db  0x00 ; '.'
00000000000005a0         db  0x00 ; '.'
00000000000005a1         db  0x00 ; '.'
00000000000005a2         db  0x00 ; '.'
00000000000005a3         db  0x00 ; '.'
00000000000005a4         db  0x00 ; '.'
00000000000005a5         db  0x00 ; '.'
00000000000005a6         db  0x00 ; '.'
00000000000005a7         db  0x00 ; '.'
00000000000005a8         db  0x00 ; '.'
00000000000005a9         db  0x00 ; '.'
00000000000005aa         db  0x00 ; '.'
00000000000005ab         db  0x00 ; '.'
00000000000005ac         db  0x00 ; '.'
00000000000005ad         db  0x00 ; '.'
00000000000005ae         db  0x00 ; '.'
00000000000005af         db  0x00 ; '.'
00000000000005b0         db  0x14 ; '.'
00000000000005b1         db  0x01 ; '.'
00000000000005b2         db  0x00 ; '.'
00000000000005b3         db  0x00 ; '.'
00000000000005b4         db  0x12 ; '.'
00000000000005b5         db  0x00 ; '.'
00000000000005b6         db  0x00 ; '.'
00000000000005b7         db  0x00 ; '.'
00000000000005b8         db  0x00 ; '.'
00000000000005b9         db  0x00 ; '.'
00000000000005ba         db  0x00 ; '.'
00000000000005bb         db  0x00 ; '.'
00000000000005bc         db  0x00 ; '.'
00000000000005bd         db  0x00 ; '.'
00000000000005be         db  0x00 ; '.'
00000000000005bf         db  0x00 ; '.'
00000000000005c0         db  0x00 ; '.'
00000000000005c1         db  0x00 ; '.'
00000000000005c2         db  0x00 ; '.'
00000000000005c3         db  0x00 ; '.'
00000000000005c4         db  0x00 ; '.'
00000000000005c5         db  0x00 ; '.'
00000000000005c6         db  0x00 ; '.'
00000000000005c7         db  0x00 ; '.'
00000000000005c8         db  0x4c ; 'L'
00000000000005c9         db  0x02 ; '.'
00000000000005ca         db  0x00 ; '.'
00000000000005cb         db  0x00 ; '.'
00000000000005cc         db  0x12 ; '.'
00000000000005cd         db  0x00 ; '.'
00000000000005ce         db  0x00 ; '.'
00000000000005cf         db  0x00 ; '.'
00000000000005d0         db  0x00 ; '.'
00000000000005d1         db  0x00 ; '.'
00000000000005d2         db  0x00 ; '.'
00000000000005d3         db  0x00 ; '.'
00000000000005d4         db  0x00 ; '.'
00000000000005d5         db  0x00 ; '.'
00000000000005d6         db  0x00 ; '.'
00000000000005d7         db  0x00 ; '.'
00000000000005d8         db  0x00 ; '.'
00000000000005d9         db  0x00 ; '.'
00000000000005da         db  0x00 ; '.'
00000000000005db         db  0x00 ; '.'
00000000000005dc         db  0x00 ; '.'
00000000000005dd         db  0x00 ; '.'
00000000000005de         db  0x00 ; '.'
00000000000005df         db  0x00 ; '.'
00000000000005e0         db  0x0d ; '.'
00000000000005e1         db  0x01 ; '.'
00000000000005e2         db  0x00 ; '.'
00000000000005e3         db  0x00 ; '.'
00000000000005e4         db  0x12 ; '.'
00000000000005e5         db  0x00 ; '.'
00000000000005e6         db  0x00 ; '.'
00000000000005e7         db  0x00 ; '.'
00000000000005e8         db  0x00 ; '.'
00000000000005e9         db  0x00 ; '.'
00000000000005ea         db  0x00 ; '.'
00000000000005eb         db  0x00 ; '.'
00000000000005ec         db  0x00 ; '.'
00000000000005ed         db  0x00 ; '.'
00000000000005ee         db  0x00 ; '.'
00000000000005ef         db  0x00 ; '.'
00000000000005f0         db  0x00 ; '.'
00000000000005f1         db  0x00 ; '.'
00000000000005f2         db  0x00 ; '.'
00000000000005f3         db  0x00 ; '.'
00000000000005f4         db  0x00 ; '.'
00000000000005f5         db  0x00 ; '.'
00000000000005f6         db  0x00 ; '.'
00000000000005f7         db  0x00 ; '.'
00000000000005f8         db  0x83 ; '.'
00000000000005f9         db  0x02 ; '.'
00000000000005fa         db  0x00 ; '.'
00000000000005fb         db  0x00 ; '.'
00000000000005fc         db  0x12 ; '.'
00000000000005fd         db  0x00 ; '.'
00000000000005fe         db  0x00 ; '.'
00000000000005ff         db  0x00 ; '.'
0000000000000600         db  0x00 ; '.'
0000000000000601         db  0x00 ; '.'
0000000000000602         db  0x00 ; '.'
0000000000000603         db  0x00 ; '.'
0000000000000604         db  0x00 ; '.'
0000000000000605         db  0x00 ; '.'
0000000000000606         db  0x00 ; '.'
0000000000000607         db  0x00 ; '.'
0000000000000608         db  0x00 ; '.'
0000000000000609         db  0x00 ; '.'
000000000000060a         db  0x00 ; '.'
000000000000060b         db  0x00 ; '.'
000000000000060c         db  0x00 ; '.'
000000000000060d         db  0x00 ; '.'
000000000000060e         db  0x00 ; '.'
000000000000060f         db  0x00 ; '.'
0000000000000610         db  0xe7 ; '.'
0000000000000611         db  0x00 ; '.'
0000000000000612         db  0x00 ; '.'
0000000000000613         db  0x00 ; '.'
0000000000000614         db  0x12 ; '.'
0000000000000615         db  0x00 ; '.'
0000000000000616         db  0x00 ; '.'
0000000000000617         db  0x00 ; '.'
0000000000000618         db  0x00 ; '.'
0000000000000619         db  0x00 ; '.'
000000000000061a         db  0x00 ; '.'
000000000000061b         db  0x00 ; '.'
000000000000061c         db  0x00 ; '.'
000000000000061d         db  0x00 ; '.'
000000000000061e         db  0x00 ; '.'
000000000000061f         db  0x00 ; '.'
0000000000000620         db  0x00 ; '.'
0000000000000621         db  0x00 ; '.'
0000000000000622         db  0x00 ; '.'
0000000000000623         db  0x00 ; '.'
0000000000000624         db  0x00 ; '.'
0000000000000625         db  0x00 ; '.'
0000000000000626         db  0x00 ; '.'
0000000000000627         db  0x00 ; '.'
0000000000000628         db  0x45 ; 'E'
0000000000000629         db  0x02 ; '.'
000000000000062a         db  0x00 ; '.'
000000000000062b         db  0x00 ; '.'
000000000000062c         db  0x12 ; '.'
000000000000062d         db  0x00 ; '.'
000000000000062e         db  0x00 ; '.'
000000000000062f         db  0x00 ; '.'
0000000000000630         db  0x00 ; '.'
0000000000000631         db  0x00 ; '.'
0000000000000632         db  0x00 ; '.'
0000000000000633         db  0x00 ; '.'
0000000000000634         db  0x00 ; '.'
0000000000000635         db  0x00 ; '.'
0000000000000636         db  0x00 ; '.'
0000000000000637         db  0x00 ; '.'
0000000000000638         db  0x00 ; '.'
0000000000000639         db  0x00 ; '.'
000000000000063a         db  0x00 ; '.'
000000000000063b         db  0x00 ; '.'
000000000000063c         db  0x00 ; '.'
000000000000063d         db  0x00 ; '.'
000000000000063e         db  0x00 ; '.'
000000000000063f         db  0x00 ; '.'
0000000000000640         db  0x12 ; '.'
0000000000000641         db  0x03 ; '.'
0000000000000642         db  0x00 ; '.'
0000000000000643         db  0x00 ; '.'
0000000000000644         db  0x20 ; ' '
0000000000000645         db  0x00 ; '.'
0000000000000646         db  0x00 ; '.'
0000000000000647         db  0x00 ; '.'
0000000000000648         db  0x00 ; '.'
0000000000000649         db  0x00 ; '.'
000000000000064a         db  0x00 ; '.'
000000000000064b         db  0x00 ; '.'
000000000000064c         db  0x00 ; '.'
000000000000064d         db  0x00 ; '.'
000000000000064e         db  0x00 ; '.'
000000000000064f         db  0x00 ; '.'
0000000000000650         db  0x00 ; '.'
0000000000000651         db  0x00 ; '.'
0000000000000652         db  0x00 ; '.'
0000000000000653         db  0x00 ; '.'
0000000000000654         db  0x00 ; '.'
0000000000000655         db  0x00 ; '.'
0000000000000656         db  0x00 ; '.'
0000000000000657         db  0x00 ; '.'
0000000000000658         db  0xe0 ; '.'
0000000000000659         db  0x00 ; '.'
000000000000065a         db  0x00 ; '.'
000000000000065b         db  0x00 ; '.'
000000000000065c         db  0x12 ; '.'
000000000000065d         db  0x00 ; '.'
000000000000065e         db  0x00 ; '.'
000000000000065f         db  0x00 ; '.'
0000000000000660         db  0x00 ; '.'
0000000000000661         db  0x00 ; '.'
0000000000000662         db  0x00 ; '.'
0000000000000663         db  0x00 ; '.'
0000000000000664         db  0x00 ; '.'
0000000000000665         db  0x00 ; '.'
0000000000000666         db  0x00 ; '.'
0000000000000667         db  0x00 ; '.'
0000000000000668         db  0x00 ; '.'
0000000000000669         db  0x00 ; '.'
000000000000066a         db  0x00 ; '.'
000000000000066b         db  0x00 ; '.'
000000000000066c         db  0x00 ; '.'
000000000000066d         db  0x00 ; '.'
000000000000066e         db  0x00 ; '.'
000000000000066f         db  0x00 ; '.'
0000000000000670         db  0x51 ; 'Q'
0000000000000671         db  0x01 ; '.'
0000000000000672         db  0x00 ; '.'
0000000000000673         db  0x00 ; '.'
0000000000000674         db  0x12 ; '.'
0000000000000675         db  0x00 ; '.'
0000000000000676         db  0x00 ; '.'
0000000000000677         db  0x00 ; '.'
0000000000000678         db  0x00 ; '.'
0000000000000679         db  0x00 ; '.'
000000000000067a         db  0x00 ; '.'
000000000000067b         db  0x00 ; '.'
000000000000067c         db  0x00 ; '.'
000000000000067d         db  0x00 ; '.'
000000000000067e         db  0x00 ; '.'
000000000000067f         db  0x00 ; '.'
0000000000000680         db  0x00 ; '.'
0000000000000681         db  0x00 ; '.'
0000000000000682         db  0x00 ; '.'
0000000000000683         db  0x00 ; '.'
0000000000000684         db  0x00 ; '.'
0000000000000685         db  0x00 ; '.'
0000000000000686         db  0x00 ; '.'
0000000000000687         db  0x00 ; '.'
0000000000000688         db  0xd2 ; '.'
0000000000000689         db  0x01 ; '.'
000000000000068a         db  0x00 ; '.'
000000000000068b         db  0x00 ; '.'
000000000000068c         db  0x12 ; '.'
000000000000068d         db  0x00 ; '.'
000000000000068e         db  0x00 ; '.'
000000000000068f         db  0x00 ; '.'
0000000000000690         db  0x00 ; '.'
0000000000000691         db  0x00 ; '.'
0000000000000692         db  0x00 ; '.'
0000000000000693         db  0x00 ; '.'
0000000000000694         db  0x00 ; '.'
0000000000000695         db  0x00 ; '.'
0000000000000696         db  0x00 ; '.'
0000000000000697         db  0x00 ; '.'
0000000000000698         db  0x00 ; '.'
0000000000000699         db  0x00 ; '.'
000000000000069a         db  0x00 ; '.'
000000000000069b         db  0x00 ; '.'
000000000000069c         db  0x00 ; '.'
000000000000069d         db  0x00 ; '.'
000000000000069e         db  0x00 ; '.'
000000000000069f         db  0x00 ; '.'
00000000000006a0         db  0xa1 ; '.'
00000000000006a1         db  0x01 ; '.'
00000000000006a2         db  0x00 ; '.'
00000000000006a3         db  0x00 ; '.'
00000000000006a4         db  0x12 ; '.'
00000000000006a5         db  0x00 ; '.'
00000000000006a6         db  0x00 ; '.'
00000000000006a7         db  0x00 ; '.'
00000000000006a8         db  0x00 ; '.'
00000000000006a9         db  0x00 ; '.'
00000000000006aa         db  0x00 ; '.'
00000000000006ab         db  0x00 ; '.'
00000000000006ac         db  0x00 ; '.'
00000000000006ad         db  0x00 ; '.'
00000000000006ae         db  0x00 ; '.'
00000000000006af         db  0x00 ; '.'
00000000000006b0         db  0x00 ; '.'
00000000000006b1         db  0x00 ; '.'
00000000000006b2         db  0x00 ; '.'
00000000000006b3         db  0x00 ; '.'
00000000000006b4         db  0x00 ; '.'
00000000000006b5         db  0x00 ; '.'
00000000000006b6         db  0x00 ; '.'
00000000000006b7         db  0x00 ; '.'
00000000000006b8         db  0x5f ; '_'
00000000000006b9         db  0x01 ; '.'
00000000000006ba         db  0x00 ; '.'
00000000000006bb         db  0x00 ; '.'
00000000000006bc         db  0x12 ; '.'
00000000000006bd         db  0x00 ; '.'
00000000000006be         db  0x00 ; '.'
00000000000006bf         db  0x00 ; '.'
00000000000006c0         db  0x00 ; '.'
00000000000006c1         db  0x00 ; '.'
00000000000006c2         db  0x00 ; '.'
00000000000006c3         db  0x00 ; '.'
00000000000006c4         db  0x00 ; '.'
00000000000006c5         db  0x00 ; '.'
00000000000006c6         db  0x00 ; '.'
00000000000006c7         db  0x00 ; '.'
00000000000006c8         db  0x00 ; '.'
00000000000006c9         db  0x00 ; '.'
00000000000006ca         db  0x00 ; '.'
00000000000006cb         db  0x00 ; '.'
00000000000006cc         db  0x00 ; '.'
00000000000006cd         db  0x00 ; '.'
00000000000006ce         db  0x00 ; '.'
00000000000006cf         db  0x00 ; '.'
00000000000006d0         db  0x0b ; '.'
00000000000006d1         db  0x00 ; '.'
00000000000006d2         db  0x00 ; '.'
00000000000006d3         db  0x00 ; '.'
00000000000006d4         db  0x12 ; '.'
00000000000006d5         db  0x00 ; '.'
00000000000006d6         db  0x00 ; '.'
00000000000006d7         db  0x00 ; '.'
00000000000006d8         db  0x00 ; '.'
00000000000006d9         db  0x00 ; '.'
00000000000006da         db  0x00 ; '.'
00000000000006db         db  0x00 ; '.'
00000000000006dc         db  0x00 ; '.'
00000000000006dd         db  0x00 ; '.'
00000000000006de         db  0x00 ; '.'
00000000000006df         db  0x00 ; '.'
00000000000006e0         db  0x00 ; '.'
00000000000006e1         db  0x00 ; '.'
00000000000006e2         db  0x00 ; '.'
00000000000006e3         db  0x00 ; '.'
00000000000006e4         db  0x00 ; '.'
00000000000006e5         db  0x00 ; '.'
00000000000006e6         db  0x00 ; '.'
00000000000006e7         db  0x00 ; '.'
00000000000006e8         db  0x6e ; 'n'
00000000000006e9         db  0x01 ; '.'
00000000000006ea         db  0x00 ; '.'
00000000000006eb         db  0x00 ; '.'
00000000000006ec         db  0x12 ; '.'
00000000000006ed         db  0x00 ; '.'
00000000000006ee         db  0x00 ; '.'
00000000000006ef         db  0x00 ; '.'
00000000000006f0         db  0x00 ; '.'
00000000000006f1         db  0x00 ; '.'
00000000000006f2         db  0x00 ; '.'
00000000000006f3         db  0x00 ; '.'
00000000000006f4         db  0x00 ; '.'
00000000000006f5         db  0x00 ; '.'
00000000000006f6         db  0x00 ; '.'
00000000000006f7         db  0x00 ; '.'
00000000000006f8         db  0x00 ; '.'
00000000000006f9         db  0x00 ; '.'
00000000000006fa         db  0x00 ; '.'
00000000000006fb         db  0x00 ; '.'
00000000000006fc         db  0x00 ; '.'
00000000000006fd         db  0x00 ; '.'
00000000000006fe         db  0x00 ; '.'
00000000000006ff         db  0x00 ; '.'
0000000000000700         db  0x8f ; '.'
0000000000000701         db  0x01 ; '.'
0000000000000702         db  0x00 ; '.'
0000000000000703         db  0x00 ; '.'
0000000000000704         db  0x12 ; '.'
0000000000000705         db  0x00 ; '.'
0000000000000706         db  0x00 ; '.'
0000000000000707         db  0x00 ; '.'
0000000000000708         db  0x00 ; '.'
0000000000000709         db  0x00 ; '.'
000000000000070a         db  0x00 ; '.'
000000000000070b         db  0x00 ; '.'
000000000000070c         db  0x00 ; '.'
000000000000070d         db  0x00 ; '.'
000000000000070e         db  0x00 ; '.'
000000000000070f         db  0x00 ; '.'
0000000000000710         db  0x00 ; '.'
0000000000000711         db  0x00 ; '.'
0000000000000712         db  0x00 ; '.'
0000000000000713         db  0x00 ; '.'
0000000000000714         db  0x00 ; '.'
0000000000000715         db  0x00 ; '.'
0000000000000716         db  0x00 ; '.'
0000000000000717         db  0x00 ; '.'
0000000000000718         db  0x82 ; '.'
0000000000000719         db  0x00 ; '.'
000000000000071a         db  0x00 ; '.'
000000000000071b         db  0x00 ; '.'
000000000000071c         db  0x12 ; '.'
000000000000071d         db  0x00 ; '.'
000000000000071e         db  0x00 ; '.'
000000000000071f         db  0x00 ; '.'
0000000000000720         db  0x00 ; '.'
0000000000000721         db  0x00 ; '.'
0000000000000722         db  0x00 ; '.'
0000000000000723         db  0x00 ; '.'
0000000000000724         db  0x00 ; '.'
0000000000000725         db  0x00 ; '.'
0000000000000726         db  0x00 ; '.'
0000000000000727         db  0x00 ; '.'
0000000000000728         db  0x00 ; '.'
0000000000000729         db  0x00 ; '.'
000000000000072a         db  0x00 ; '.'
000000000000072b         db  0x00 ; '.'
000000000000072c         db  0x00 ; '.'
000000000000072d         db  0x00 ; '.'
000000000000072e         db  0x00 ; '.'
000000000000072f         db  0x00 ; '.'
0000000000000730         db  0x26 ; '&'
0000000000000731         db  0x00 ; '.'
0000000000000732         db  0x00 ; '.'
0000000000000733         db  0x00 ; '.'
0000000000000734         db  0x12 ; '.'
0000000000000735         db  0x00 ; '.'
0000000000000736         db  0x00 ; '.'
0000000000000737         db  0x00 ; '.'
0000000000000738         db  0x00 ; '.'
0000000000000739         db  0x00 ; '.'
000000000000073a         db  0x00 ; '.'
000000000000073b         db  0x00 ; '.'
000000000000073c         db  0x00 ; '.'
000000000000073d         db  0x00 ; '.'
000000000000073e         db  0x00 ; '.'
000000000000073f         db  0x00 ; '.'
0000000000000740         db  0x00 ; '.'
0000000000000741         db  0x00 ; '.'
0000000000000742         db  0x00 ; '.'
0000000000000743         db  0x00 ; '.'
0000000000000744         db  0x00 ; '.'
0000000000000745         db  0x00 ; '.'
0000000000000746         db  0x00 ; '.'
0000000000000747         db  0x00 ; '.'
0000000000000748         db  0x19 ; '.'
0000000000000749         db  0x00 ; '.'
000000000000074a         db  0x00 ; '.'
000000000000074b         db  0x00 ; '.'
000000000000074c         db  0x12 ; '.'
000000000000074d         db  0x00 ; '.'
000000000000074e         db  0x00 ; '.'
000000000000074f         db  0x00 ; '.'
0000000000000750         db  0x00 ; '.'
0000000000000751         db  0x00 ; '.'
0000000000000752         db  0x00 ; '.'
0000000000000753         db  0x00 ; '.'
0000000000000754         db  0x00 ; '.'
0000000000000755         db  0x00 ; '.'
0000000000000756         db  0x00 ; '.'
0000000000000757         db  0x00 ; '.'
0000000000000758         db  0x00 ; '.'
0000000000000759         db  0x00 ; '.'
000000000000075a         db  0x00 ; '.'
000000000000075b         db  0x00 ; '.'
000000000000075c         db  0x00 ; '.'
000000000000075d         db  0x00 ; '.'
000000000000075e         db  0x00 ; '.'
000000000000075f         db  0x00 ; '.'
0000000000000760         db  0x25 ; '%'
0000000000000761         db  0x01 ; '.'
0000000000000762         db  0x00 ; '.'
0000000000000763         db  0x00 ; '.'
0000000000000764         db  0x12 ; '.'
0000000000000765         db  0x00 ; '.'
0000000000000766         db  0x00 ; '.'
0000000000000767         db  0x00 ; '.'
0000000000000768         db  0x00 ; '.'
0000000000000769         db  0x00 ; '.'
000000000000076a         db  0x00 ; '.'
000000000000076b         db  0x00 ; '.'
000000000000076c         db  0x00 ; '.'
000000000000076d         db  0x00 ; '.'
000000000000076e         db  0x00 ; '.'
000000000000076f         db  0x00 ; '.'
0000000000000770         db  0x00 ; '.'
0000000000000771         db  0x00 ; '.'
0000000000000772         db  0x00 ; '.'
0000000000000773         db  0x00 ; '.'
0000000000000774         db  0x00 ; '.'
0000000000000775         db  0x00 ; '.'
0000000000000776         db  0x00 ; '.'
0000000000000777         db  0x00 ; '.'
0000000000000778         db  0x2e ; '.'
0000000000000779         db  0x02 ; '.'
000000000000077a         db  0x00 ; '.'
000000000000077b         db  0x00 ; '.'
000000000000077c         db  0x12 ; '.'
000000000000077d         db  0x00 ; '.'
000000000000077e         db  0x00 ; '.'
000000000000077f         db  0x00 ; '.'
0000000000000780         db  0x00 ; '.'
0000000000000781         db  0x00 ; '.'
0000000000000782         db  0x00 ; '.'
0000000000000783         db  0x00 ; '.'
0000000000000784         db  0x00 ; '.'
0000000000000785         db  0x00 ; '.'
0000000000000786         db  0x00 ; '.'
0000000000000787         db  0x00 ; '.'
0000000000000788         db  0x00 ; '.'
0000000000000789         db  0x00 ; '.'
000000000000078a         db  0x00 ; '.'
000000000000078b         db  0x00 ; '.'
000000000000078c         db  0x00 ; '.'
000000000000078d         db  0x00 ; '.'
000000000000078e         db  0x00 ; '.'
000000000000078f         db  0x00 ; '.'
0000000000000790         db  0x59 ; 'Y'
0000000000000791         db  0x00 ; '.'
0000000000000792         db  0x00 ; '.'
0000000000000793         db  0x00 ; '.'
0000000000000794         db  0x12 ; '.'
0000000000000795         db  0x00 ; '.'
0000000000000796         db  0x00 ; '.'
0000000000000797         db  0x00 ; '.'
0000000000000798         db  0x00 ; '.'
0000000000000799         db  0x00 ; '.'
000000000000079a         db  0x00 ; '.'
000000000000079b         db  0x00 ; '.'
000000000000079c         db  0x00 ; '.'
000000000000079d         db  0x00 ; '.'
000000000000079e         db  0x00 ; '.'
000000000000079f         db  0x00 ; '.'
00000000000007a0         db  0x00 ; '.'
00000000000007a1         db  0x00 ; '.'
00000000000007a2         db  0x00 ; '.'
00000000000007a3         db  0x00 ; '.'
00000000000007a4         db  0x00 ; '.'
00000000000007a5         db  0x00 ; '.'
00000000000007a6         db  0x00 ; '.'
00000000000007a7         db  0x00 ; '.'
00000000000007a8         db  0x5e ; '^'
00000000000007a9         db  0x02 ; '.'
00000000000007aa         db  0x00 ; '.'
00000000000007ab         db  0x00 ; '.'
00000000000007ac         db  0x12 ; '.'
00000000000007ad         db  0x00 ; '.'
00000000000007ae         db  0x00 ; '.'
00000000000007af         db  0x00 ; '.'
00000000000007b0         db  0x00 ; '.'
00000000000007b1         db  0x00 ; '.'
00000000000007b2         db  0x00 ; '.'
00000000000007b3         db  0x00 ; '.'
00000000000007b4         db  0x00 ; '.'
00000000000007b5         db  0x00 ; '.'
00000000000007b6         db  0x00 ; '.'
00000000000007b7         db  0x00 ; '.'
00000000000007b8         db  0x00 ; '.'
00000000000007b9         db  0x00 ; '.'
00000000000007ba         db  0x00 ; '.'
00000000000007bb         db  0x00 ; '.'
00000000000007bc         db  0x00 ; '.'
00000000000007bd         db  0x00 ; '.'
00000000000007be         db  0x00 ; '.'
00000000000007bf         db  0x00 ; '.'
00000000000007c0         db  0xb2 ; '.'
00000000000007c1         db  0x02 ; '.'
00000000000007c2         db  0x00 ; '.'
00000000000007c3         db  0x00 ; '.'
00000000000007c4         db  0x12 ; '.'
00000000000007c5         db  0x00 ; '.'
00000000000007c6         db  0x00 ; '.'
00000000000007c7         db  0x00 ; '.'
00000000000007c8         db  0x00 ; '.'
00000000000007c9         db  0x00 ; '.'
00000000000007ca         db  0x00 ; '.'
00000000000007cb         db  0x00 ; '.'
00000000000007cc         db  0x00 ; '.'
00000000000007cd         db  0x00 ; '.'
00000000000007ce         db  0x00 ; '.'
00000000000007cf         db  0x00 ; '.'
00000000000007d0         db  0x00 ; '.'
00000000000007d1         db  0x00 ; '.'
00000000000007d2         db  0x00 ; '.'
00000000000007d3         db  0x00 ; '.'
00000000000007d4         db  0x00 ; '.'
00000000000007d5         db  0x00 ; '.'
00000000000007d6         db  0x00 ; '.'
00000000000007d7         db  0x00 ; '.'
00000000000007d8         db  0x16 ; '.'
00000000000007d9         db  0x02 ; '.'
00000000000007da         db  0x00 ; '.'
00000000000007db         db  0x00 ; '.'
00000000000007dc         db  0x12 ; '.'
00000000000007dd         db  0x00 ; '.'
00000000000007de         db  0x00 ; '.'
00000000000007df         db  0x00 ; '.'
00000000000007e0         db  0x00 ; '.'
00000000000007e1         db  0x00 ; '.'
00000000000007e2         db  0x00 ; '.'
00000000000007e3         db  0x00 ; '.'                                         ; DATA XREF=version_etc_arn+89
00000000000007e4         db  0x00 ; '.'
00000000000007e5         db  0x00 ; '.'
00000000000007e6         db  0x00 ; '.'
00000000000007e7         db  0x00 ; '.'
00000000000007e8         db  0x00 ; '.'
00000000000007e9         db  0x00 ; '.'
00000000000007ea         db  0x00 ; '.'
00000000000007eb         db  0x00 ; '.'
00000000000007ec         db  0x00 ; '.'
00000000000007ed         db  0x00 ; '.'
00000000000007ee         db  0x00 ; '.'
00000000000007ef         db  0x00 ; '.'
00000000000007f0         db  0x97 ; '.'
00000000000007f1         db  0x00 ; '.'
00000000000007f2         db  0x00 ; '.'
00000000000007f3         db  0x00 ; '.'
00000000000007f4         db  0x12 ; '.'
00000000000007f5         db  0x00 ; '.'
00000000000007f6         db  0x00 ; '.'
00000000000007f7         db  0x00 ; '.'
00000000000007f8         db  0x00 ; '.'
00000000000007f9         db  0x00 ; '.'
00000000000007fa         db  0x00 ; '.'
00000000000007fb         db  0x00 ; '.'
00000000000007fc         db  0x00 ; '.'
00000000000007fd         db  0x00 ; '.'
00000000000007fe         db  0x00 ; '.'
00000000000007ff         db  0x00 ; '.'
0000000000000800         db  0x00 ; '.'
0000000000000801         db  0x00 ; '.'
0000000000000802         db  0x00 ; '.'
0000000000000803         db  0x00 ; '.'
0000000000000804         db  0x00 ; '.'
0000000000000805         db  0x00 ; '.'
0000000000000806         db  0x00 ; '.'
0000000000000807         db  0x00 ; '.'
0000000000000808         db  0xd9 ; '.'
0000000000000809         db  0x01 ; '.'
000000000000080a         db  0x00 ; '.'
000000000000080b         db  0x00 ; '.'
000000000000080c         db  0x12 ; '.'
000000000000080d         db  0x00 ; '.'
000000000000080e         db  0x00 ; '.'
000000000000080f         db  0x00 ; '.'
0000000000000810         db  0x00 ; '.'
0000000000000811         db  0x00 ; '.'
0000000000000812         db  0x00 ; '.'
0000000000000813         db  0x00 ; '.'
0000000000000814         db  0x00 ; '.'
0000000000000815         db  0x00 ; '.'
0000000000000816         db  0x00 ; '.'
0000000000000817         db  0x00 ; '.'
0000000000000818         db  0x00 ; '.'
0000000000000819         db  0x00 ; '.'
000000000000081a         db  0x00 ; '.'
000000000000081b         db  0x00 ; '.'
000000000000081c         db  0x00 ; '.'
000000000000081d         db  0x00 ; '.'
000000000000081e         db  0x00 ; '.'
000000000000081f         db  0x00 ; '.'
0000000000000820         db  0x2d ; '-'
0000000000000821         db  0x01 ; '.'
0000000000000822         db  0x00 ; '.'
0000000000000823         db  0x00 ; '.'
0000000000000824         db  0x12 ; '.'
0000000000000825         db  0x00 ; '.'
0000000000000826         db  0x00 ; '.'
0000000000000827         db  0x00 ; '.'
0000000000000828         db  0x00 ; '.'
0000000000000829         db  0x00 ; '.'
000000000000082a         db  0x00 ; '.'
000000000000082b         db  0x00 ; '.'
000000000000082c         db  0x00 ; '.'
000000000000082d         db  0x00 ; '.'
000000000000082e         db  0x00 ; '.'
000000000000082f         db  0x00 ; '.'
0000000000000830         db  0x00 ; '.'
0000000000000831         db  0x00 ; '.'
0000000000000832         db  0x00 ; '.'
0000000000000833         db  0x00 ; '.'
0000000000000834         db  0x00 ; '.'
0000000000000835         db  0x00 ; '.'
0000000000000836         db  0x00 ; '.'
0000000000000837         db  0x00 ; '.'
0000000000000838         db  0xc4 ; '.'
0000000000000839         db  0x01 ; '.'
000000000000083a         db  0x00 ; '.'
000000000000083b         db  0x00 ; '.'
000000000000083c         db  0x12 ; '.'
000000000000083d         db  0x00 ; '.'
000000000000083e         db  0x00 ; '.'
000000000000083f         db  0x00 ; '.'
0000000000000840         db  0x00 ; '.'
0000000000000841         db  0x00 ; '.'
0000000000000842         db  0x00 ; '.'
0000000000000843         db  0x00 ; '.'
0000000000000844         db  0x00 ; '.'
0000000000000845         db  0x00 ; '.'
0000000000000846         db  0x00 ; '.'
0000000000000847         db  0x00 ; '.'
0000000000000848         db  0x00 ; '.'
0000000000000849         db  0x00 ; '.'
000000000000084a         db  0x00 ; '.'
000000000000084b         db  0x00 ; '.'
000000000000084c         db  0x00 ; '.'
000000000000084d         db  0x00 ; '.'
000000000000084e         db  0x00 ; '.'
000000000000084f         db  0x00 ; '.'
0000000000000850         db  0x21 ; '!'
0000000000000851         db  0x03 ; '.'
0000000000000852         db  0x00 ; '.'
0000000000000853         db  0x00 ; '.'
0000000000000854         db  0x20 ; ' '
0000000000000855         db  0x00 ; '.'
0000000000000856         db  0x00 ; '.'
0000000000000857         db  0x00 ; '.'
0000000000000858         db  0x00 ; '.'
0000000000000859         db  0x00 ; '.'
000000000000085a         db  0x00 ; '.'
000000000000085b         db  0x00 ; '.'
000000000000085c         db  0x00 ; '.'
000000000000085d         db  0x00 ; '.'
000000000000085e         db  0x00 ; '.'
000000000000085f         db  0x00 ; '.'
0000000000000860         db  0x00 ; '.'
0000000000000861         db  0x00 ; '.'
0000000000000862         db  0x00 ; '.'
0000000000000863         db  0x00 ; '.'
0000000000000864         db  0x00 ; '.'
0000000000000865         db  0x00 ; '.'
0000000000000866         db  0x00 ; '.'
0000000000000867         db  0x00 ; '.'
0000000000000868         db  0x66 ; 'f'
0000000000000869         db  0x01 ; '.'
000000000000086a         db  0x00 ; '.'
000000000000086b         db  0x00 ; '.'
000000000000086c         db  0x12 ; '.'
000000000000086d         db  0x00 ; '.'
000000000000086e         db  0x00 ; '.'
000000000000086f         db  0x00 ; '.'
0000000000000870         db  0x00 ; '.'
0000000000000871         db  0x00 ; '.'
0000000000000872         db  0x00 ; '.'
0000000000000873         db  0x00 ; '.'
0000000000000874         db  0x00 ; '.'
0000000000000875         db  0x00 ; '.'
0000000000000876         db  0x00 ; '.'
0000000000000877         db  0x00 ; '.'
0000000000000878         db  0x00 ; '.'
0000000000000879         db  0x00 ; '.'
000000000000087a         db  0x00 ; '.'
000000000000087b         db  0x00 ; '.'
000000000000087c         db  0x00 ; '.'
000000000000087d         db  0x00 ; '.'
000000000000087e         db  0x00 ; '.'
000000000000087f         db  0x00 ; '.'
0000000000000880         db  0x79 ; 'y'
0000000000000881         db  0x00 ; '.'
0000000000000882         db  0x00 ; '.'
0000000000000883         db  0x00 ; '.'
0000000000000884         db  0x12 ; '.'
0000000000000885         db  0x00 ; '.'
0000000000000886         db  0x00 ; '.'
0000000000000887         db  0x00 ; '.'
0000000000000888         db  0x00 ; '.'
0000000000000889         db  0x00 ; '.'
000000000000088a         db  0x00 ; '.'
000000000000088b         db  0x00 ; '.'
000000000000088c         db  0x00 ; '.'
000000000000088d         db  0x00 ; '.'
000000000000088e         db  0x00 ; '.'
000000000000088f         db  0x00 ; '.'
0000000000000890         db  0x00 ; '.'
0000000000000891         db  0x00 ; '.'
0000000000000892         db  0x00 ; '.'
0000000000000893         db  0x00 ; '.'
0000000000000894         db  0x00 ; '.'
0000000000000895         db  0x00 ; '.'
0000000000000896         db  0x00 ; '.'
0000000000000897         db  0x00 ; '.'
0000000000000898         db  0x1f ; '.'
0000000000000899         db  0x02 ; '.'
000000000000089a         db  0x00 ; '.'
000000000000089b         db  0x00 ; '.'
000000000000089c         db  0x22 ; '"'
000000000000089d         db  0x00 ; '.'
000000000000089e         db  0x00 ; '.'
000000000000089f         db  0x00 ; '.'
00000000000008a0         db  0x00 ; '.'
00000000000008a1         db  0x00 ; '.'
00000000000008a2         db  0x00 ; '.'
00000000000008a3         db  0x00 ; '.'
00000000000008a4         db  0x00 ; '.'
00000000000008a5         db  0x00 ; '.'
00000000000008a6         db  0x00 ; '.'
00000000000008a7         db  0x00 ; '.'
00000000000008a8         db  0x00 ; '.'
00000000000008a9         db  0x00 ; '.'
00000000000008aa         db  0x00 ; '.'
00000000000008ab         db  0x00 ; '.'
00000000000008ac         db  0x00 ; '.'
00000000000008ad         db  0x00 ; '.'
00000000000008ae         db  0x00 ; '.'
00000000000008af         db  0x00 ; '.'
00000000000008b0         db  0x1c ; '.'
00000000000008b1         db  0x01 ; '.'
00000000000008b2         db  0x00 ; '.'
00000000000008b3         db  0x00 ; '.'
00000000000008b4         db  0x12 ; '.'
00000000000008b5         db  0x00 ; '.'
00000000000008b6         db  0x00 ; '.'
00000000000008b7         db  0x00 ; '.'
00000000000008b8         db  0x00 ; '.'
00000000000008b9         db  0x00 ; '.'
00000000000008ba         db  0x00 ; '.'
00000000000008bb         db  0x00 ; '.'
00000000000008bc         db  0x00 ; '.'
00000000000008bd         db  0x00 ; '.'
00000000000008be         db  0x00 ; '.'
00000000000008bf         db  0x00 ; '.'
00000000000008c0         db  0x00 ; '.'
00000000000008c1         db  0x00 ; '.'
00000000000008c2         db  0x00 ; '.'
00000000000008c3         db  0x00 ; '.'
00000000000008c4         db  0x00 ; '.'
00000000000008c5         db  0x00 ; '.'
00000000000008c6         db  0x00 ; '.'
00000000000008c7         db  0x00 ; '.'
00000000000008c8         db  0x7a ; 'z'
00000000000008c9         db  0x01 ; '.'
00000000000008ca         db  0x00 ; '.'
00000000000008cb         db  0x00 ; '.'
00000000000008cc         db  0x12 ; '.'
00000000000008cd         db  0x00 ; '.'
00000000000008ce         db  0x00 ; '.'
00000000000008cf         db  0x00 ; '.'
00000000000008d0         db  0x00 ; '.'
00000000000008d1         db  0x00 ; '.'
00000000000008d2         db  0x00 ; '.'
00000000000008d3         db  0x00 ; '.'
00000000000008d4         db  0x00 ; '.'
00000000000008d5         db  0x00 ; '.'
00000000000008d6         db  0x00 ; '.'
00000000000008d7         db  0x00 ; '.'
00000000000008d8         db  0x00 ; '.'
00000000000008d9         db  0x00 ; '.'
00000000000008da         db  0x00 ; '.'
00000000000008db         db  0x00 ; '.'
00000000000008dc         db  0x00 ; '.'
00000000000008dd         db  0x00 ; '.'
00000000000008de         db  0x00 ; '.'
00000000000008df         db  0x00 ; '.'
00000000000008e0         db  0x44 ; 'D'
00000000000008e1         db  0x01 ; '.'
00000000000008e2         db  0x00 ; '.'
00000000000008e3         db  0x00 ; '.'
00000000000008e4         db  0x11 ; '.'
00000000000008e5         db  0x00 ; '.'
00000000000008e6         db  0x19 ; '.'
00000000000008e7         db  0x00 ; '.'
00000000000008e8         db  0xc8 ; '.'
00000000000008e9         db  0xe0 ; '.'
00000000000008ea         db  0x20 ; ' '
00000000000008eb         db  0x00 ; '.'
00000000000008ec         db  0x00 ; '.'
00000000000008ed         db  0x00 ; '.'
00000000000008ee         db  0x00 ; '.'
00000000000008ef         db  0x00 ; '.'
00000000000008f0         db  0x08 ; '.'
00000000000008f1         db  0x00 ; '.'
00000000000008f2         db  0x00 ; '.'
00000000000008f3         db  0x00 ; '.'
00000000000008f4         db  0x00 ; '.'
00000000000008f5         db  0x00 ; '.'
00000000000008f6         db  0x00 ; '.'
00000000000008f7         db  0x00 ; '.'
00000000000008f8         db  0x97 ; '.'
00000000000008f9         db  0x02 ; '.'
00000000000008fa         db  0x00 ; '.'
00000000000008fb         db  0x00 ; '.'
00000000000008fc         db  0x11 ; '.'
00000000000008fd         db  0x00 ; '.'
00000000000008fe         db  0x19 ; '.'
00000000000008ff         db  0x00 ; '.'
0000000000000900         db  0xc0 ; '.'
0000000000000901         db  0xe0 ; '.'
0000000000000902         db  0x20 ; ' '
0000000000000903         db  0x00 ; '.'
0000000000000904         db  0x00 ; '.'
0000000000000905         db  0x00 ; '.'
0000000000000906         db  0x00 ; '.'
0000000000000907         db  0x00 ; '.'
0000000000000908         db  0x08 ; '.'
0000000000000909         db  0x00 ; '.'
000000000000090a         db  0x00 ; '.'
000000000000090b         db  0x00 ; '.'
000000000000090c         db  0x00 ; '.'
000000000000090d         db  0x00 ; '.'
000000000000090e         db  0x00 ; '.'
000000000000090f         db  0x00 ; '.'
0000000000000910         db  0x90 ; '.'
0000000000000911         db  0x00 ; '.'
0000000000000912         db  0x00 ; '.'
0000000000000913         db  0x00 ; '.'
0000000000000914         db  0x11 ; '.'
0000000000000915         db  0x00 ; '.'
0000000000000916         db  0x19 ; '.'
0000000000000917         db  0x00 ; '.'
0000000000000918         db  0xd0 ; '.'
0000000000000919         db  0xe0 ; '.'
000000000000091a         db  0x20 ; ' '
000000000000091b         db  0x00 ; '.'
000000000000091c         db  0x00 ; '.'
000000000000091d         db  0x00 ; '.'
000000000000091e         db  0x00 ; '.'
000000000000091f         db  0x00 ; '.'
0000000000000920         db  0x08 ; '.'
0000000000000921         db  0x00 ; '.'
0000000000000922         db  0x00 ; '.'
0000000000000923         db  0x00 ; '.'
0000000000000924         db  0x00 ; '.'
0000000000000925         db  0x00 ; '.'
0000000000000926         db  0x00 ; '.'
0000000000000927         db  0x00 ; '.'
0000000000000928         db  0xa3 ; '.'
0000000000000929         db  0x00 ; '.'
000000000000092a         db  0x00 ; '.'
000000000000092b         db  0x00 ; '.'
000000000000092c         db  0x21 ; '!'
000000000000092d         db  0x00 ; '.'
000000000000092e         db  0x19 ; '.'
000000000000092f         db  0x00 ; '.'
0000000000000930         db  0xe8 ; '.'
0000000000000931         db  0xe0 ; '.'
0000000000000932         db  0x20 ; ' '
0000000000000933         db  0x00 ; '.'
0000000000000934         db  0x00 ; '.'
0000000000000935         db  0x00 ; '.'
0000000000000936         db  0x00 ; '.'
0000000000000937         db  0x00 ; '.'
0000000000000938         db  0x08 ; '.'
0000000000000939         db  0x00 ; '.'
000000000000093a         db  0x00 ; '.'
000000000000093b         db  0x00 ; '.'
000000000000093c         db  0x00 ; '.'
000000000000093d         db  0x00 ; '.'
000000000000093e         db  0x00 ; '.'
000000000000093f         db  0x00 ; '.'
0000000000000940         db  0xa2 ; '.'
0000000000000941         db  0x02 ; '.'
0000000000000942         db  0x00 ; '.'
0000000000000943         db  0x00 ; '.'
0000000000000944         db  0x11 ; '.'
0000000000000945         db  0x00 ; '.'
0000000000000946         db  0x19 ; '.'
0000000000000947         db  0x00 ; '.'
0000000000000948         db  0xe8 ; '.'
0000000000000949         db  0xe0 ; '.'
000000000000094a         db  0x20 ; ' '
000000000000094b         db  0x00 ; '.'
000000000000094c         db  0x00 ; '.'
000000000000094d         db  0x00 ; '.'
000000000000094e         db  0x00 ; '.'
000000000000094f         db  0x00 ; '.'
0000000000000950         db  0x08 ; '.'
0000000000000951         db  0x00 ; '.'
0000000000000952         db  0x00 ; '.'
0000000000000953         db  0x00 ; '.'
0000000000000954         db  0x00 ; '.'
0000000000000955         db  0x00 ; '.'
0000000000000956         db  0x00 ; '.'
0000000000000957         db  0x00 ; '.'
0000000000000958         db  0xf2 ; '.'
0000000000000959         db  0x01 ; '.'
000000000000095a         db  0x00 ; '.'
000000000000095b         db  0x00 ; '.'
000000000000095c         db  0x21 ; '!'
000000000000095d         db  0x00 ; '.'
000000000000095e         db  0x19 ; '.'
000000000000095f         db  0x00 ; '.'
0000000000000960         db  0xc0 ; '.'
0000000000000961         db  0xe0 ; '.'
0000000000000962         db  0x20 ; ' '
0000000000000963         db  0x00 ; '.'
0000000000000964         db  0x00 ; '.'
0000000000000965         db  0x00 ; '.'
0000000000000966         db  0x00 ; '.'
0000000000000967         db  0x00 ; '.'
0000000000000968         db  0x08 ; '.'
0000000000000969         db  0x00 ; '.'
000000000000096a         db  0x00 ; '.'
000000000000096b         db  0x00 ; '.'
000000000000096c         db  0x00 ; '.'
000000000000096d         db  0x00 ; '.'
000000000000096e         db  0x00 ; '.'
000000000000096f         db  0x00 ; '.'
0000000000000970         db  0x9a ; '.'
0000000000000971         db  0x01 ; '.'
0000000000000972         db  0x00 ; '.'
0000000000000973         db  0x00 ; '.'
0000000000000974         db  0x11 ; '.'
0000000000000975         db  0x00 ; '.'
0000000000000976         db  0x19 ; '.'
0000000000000977         db  0x00 ; '.'
0000000000000978         db  0x00 ; '.'
0000000000000979         db  0xe1 ; '.'
000000000000097a         db  0x20 ; ' '
000000000000097b         db  0x00 ; '.'
000000000000097c         db  0x00 ; '.'
000000000000097d         db  0x00 ; '.'
000000000000097e         db  0x00 ; '.'
000000000000097f         db  0x00 ; '.'
0000000000000980         db  0x08 ; '.'
0000000000000981         db  0x00 ; '.'
0000000000000982         db  0x00 ; '.'
0000000000000983         db  0x00 ; '.'
0000000000000984         db  0x00 ; '.'
0000000000000985         db  0x00 ; '.'
0000000000000986         db  0x00 ; '.'
0000000000000987         db  0x00 ; '.'
0000000000000988         db  0x40 ; '@'
0000000000000989         db  0x00 ; '.'
000000000000098a         db  0x00 ; '.'
000000000000098b         db  0x00 ; '.'
000000000000098c         db  0x11 ; '.'
000000000000098d         db  0x00 ; '.'
000000000000098e         db  0x19 ; '.'
000000000000098f         db  0x00 ; '.'
0000000000000990         db  0xd8 ; '.'
0000000000000991         db  0xe0 ; '.'
0000000000000992         db  0x20 ; ' '
0000000000000993         db  0x00 ; '.'
0000000000000994         db  0x00 ; '.'
0000000000000995         db  0x00 ; '.'
0000000000000996         db  0x00 ; '.'
0000000000000997         db  0x00 ; '.'
0000000000000998         db  0x04 ; '.'
0000000000000999         db  0x00 ; '.'
000000000000099a         db  0x00 ; '.'
000000000000099b         db  0x00 ; '.'
000000000000099c         db  0x00 ; '.'
000000000000099d         db  0x00 ; '.'
000000000000099e         db  0x00 ; '.'
000000000000099f         db  0x00 ; '.'
00000000000009a0         db  0x88 ; '.'
00000000000009a1         db  0x01 ; '.'
00000000000009a2         db  0x00 ; '.'
00000000000009a3         db  0x00 ; '.'
00000000000009a4         db  0x11 ; '.'
00000000000009a5         db  0x00 ; '.'
00000000000009a6         db  0x19 ; '.'
00000000000009a7         db  0x00 ; '.'
00000000000009a8         db  0xe0 ; '.'
00000000000009a9         db  0xe0 ; '.'
00000000000009aa         db  0x20 ; ' '
00000000000009ab         db  0x00 ; '.'
00000000000009ac         db  0x00 ; '.'
00000000000009ad         db  0x00 ; '.'
00000000000009ae         db  0x00 ; '.'
00000000000009af         db  0x00 ; '.'
00000000000009b0         db  0x08 ; '.'
00000000000009b1         db  0x00 ; '.'
00000000000009b2         db  0x00 ; '.'
00000000000009b3         db  0x00 ; '.'
00000000000009b4         db  0x00 ; '.'
00000000000009b5         db  0x00 ; '.'
00000000000009b6         db  0x00 ; '.'
00000000000009b7         db  0x00 ; '.'


        ; Section .dynstr
        ; Range: [0x9b8; 0xcf3[ (827 bytes)
        ; File offset : [2488; 3315[ (827 bytes)
        ; Flags: 0x2
        ;   SHT_STRTAB
        ;   SHF_ALLOC

00000000000009b8         db  0x00 ; '.'
00000000000009b9         db  0x6c ; 'l'
00000000000009ba         db  0x69 ; 'i'
00000000000009bb         db  0x62 ; 'b'
00000000000009bc         db  0x63 ; 'c'
00000000000009bd         db  0x2e ; '.'
00000000000009be         db  0x73 ; 's'
00000000000009bf         db  0x6f ; 'o'
00000000000009c0         db  0x2e ; '.'
00000000000009c1         db  0x36 ; '6'
00000000000009c2         db  0x00 ; '.'
00000000000009c3         db  0x66 ; 'f'
00000000000009c4         db  0x66 ; 'f'
00000000000009c5         db  0x6c ; 'l'
00000000000009c6         db  0x75 ; 'u'
00000000000009c7         db  0x73 ; 's'
00000000000009c8         db  0x68 ; 'h'
00000000000009c9         db  0x00 ; '.'
00000000000009ca         db  0x73 ; 's'
00000000000009cb         db  0x74 ; 't'
00000000000009cc         db  0x72 ; 'r'
00000000000009cd         db  0x63 ; 'c'
00000000000009ce         db  0x70 ; 'p'
00000000000009cf         db  0x79 ; 'y'
00000000000009d0         db  0x00 ; '.'
00000000000009d1         db  0x5f ; '_'
00000000000009d2         db  0x5f ; '_'
00000000000009d3         db  0x70 ; 'p'
00000000000009d4         db  0x72 ; 'r'
00000000000009d5         db  0x69 ; 'i'
00000000000009d6         db  0x6e ; 'n'
00000000000009d7         db  0x74 ; 't'
00000000000009d8         db  0x66 ; 'f'
00000000000009d9         db  0x5f ; '_'
00000000000009da         db  0x63 ; 'c'
00000000000009db         db  0x68 ; 'h'
00000000000009dc         db  0x6b ; 'k'
00000000000009dd         db  0x00 ; '.'
00000000000009de         db  0x73 ; 's'
00000000000009df         db  0x65 ; 'e'
00000000000009e0         db  0x74 ; 't'
00000000000009e1         db  0x6c ; 'l'
00000000000009e2         db  0x6f ; 'o'
00000000000009e3         db  0x63 ; 'c'
00000000000009e4         db  0x61 ; 'a'
00000000000009e5         db  0x6c ; 'l'
00000000000009e6         db  0x65 ; 'e'
00000000000009e7         db  0x00 ; '.'
00000000000009e8         db  0x6d ; 'm'
00000000000009e9         db  0x62 ; 'b'
00000000000009ea         db  0x72 ; 'r'
00000000000009eb         db  0x74 ; 't'
00000000000009ec         db  0x6f ; 'o'
00000000000009ed         db  0x77 ; 'w'
00000000000009ee         db  0x63 ; 'c'
00000000000009ef         db  0x00 ; '.'
00000000000009f0         db  0x73 ; 's'
00000000000009f1         db  0x74 ; 't'
00000000000009f2         db  0x72 ; 'r'
00000000000009f3         db  0x6e ; 'n'
00000000000009f4         db  0x63 ; 'c'
00000000000009f5         db  0x6d ; 'm'
00000000000009f6         db  0x70 ; 'p'
00000000000009f7         db  0x00 ; '.'
00000000000009f8         db  0x6f ; 'o'
00000000000009f9         db  0x70 ; 'p'
00000000000009fa         db  0x74 ; 't'
00000000000009fb         db  0x69 ; 'i'
00000000000009fc         db  0x6e ; 'n'
00000000000009fd         db  0x64 ; 'd'
00000000000009fe         db  0x00 ; '.'
00000000000009ff         db  0x73 ; 's'
                     aTrrchr:
0000000000000a00         db         "trrchr", 0
0000000000000a07         db  0x64 ; 'd'
0000000000000a08         db  0x63 ; 'c'
0000000000000a09         db  0x67 ; 'g'
0000000000000a0a         db  0x65 ; 'e'
0000000000000a0b         db  0x74 ; 't'
0000000000000a0c         db  0x74 ; 't'
0000000000000a0d         db  0x65 ; 'e'
0000000000000a0e         db  0x78 ; 'x'
0000000000000a0f         db  0x74 ; 't'
0000000000000a10         db  0x00 ; '.'
0000000000000a11         db  0x65 ; 'e'
0000000000000a12         db  0x72 ; 'r'
0000000000000a13         db  0x72 ; 'r'
0000000000000a14         db  0x6f ; 'o'
0000000000000a15         db  0x72 ; 'r'
0000000000000a16         db  0x00 ; '.'
0000000000000a17         db  0x6d ; 'm'
0000000000000a18         db  0x62 ; 'b'
0000000000000a19         db  0x73 ; 's'
0000000000000a1a         db  0x74 ; 't'
0000000000000a1b         db  0x6f ; 'o'
0000000000000a1c         db  0x77 ; 'w'
0000000000000a1d         db  0x63 ; 'c'
0000000000000a1e         db  0x73 ; 's'
0000000000000a1f         db  0x00 ; '.'
0000000000000a20         db  0x5f ; '_'
0000000000000a21         db  0x5f ; '_'
0000000000000a22         db  0x73 ; 's'
0000000000000a23         db  0x74 ; 't'
0000000000000a24         db  0x61 ; 'a'
0000000000000a25         db  0x63 ; 'c'
0000000000000a26         db  0x6b ; 'k'
0000000000000a27         db  0x5f ; '_'
0000000000000a28         db  0x63 ; 'c'
0000000000000a29         db  0x68 ; 'h'
0000000000000a2a         db  0x6b ; 'k'
0000000000000a2b         db  0x5f ; '_'
0000000000000a2c         db  0x66 ; 'f'
0000000000000a2d         db  0x61 ; 'a'
0000000000000a2e         db  0x69 ; 'i'
0000000000000a2f         db  0x6c ; 'l'
0000000000000a30         db  0x00 ; '.'
0000000000000a31         db  0x69 ; 'i'
0000000000000a32         db  0x73 ; 's'
0000000000000a33         db  0x77 ; 'w'
0000000000000a34         db  0x70 ; 'p'
0000000000000a35         db  0x72 ; 'r'
0000000000000a36         db  0x69 ; 'i'
0000000000000a37         db  0x6e ; 'n'
0000000000000a38         db  0x74 ; 't'
0000000000000a39         db  0x00 ; '.'
0000000000000a3a         db  0x72 ; 'r'
0000000000000a3b         db  0x65 ; 'e'
0000000000000a3c         db  0x61 ; 'a'
0000000000000a3d         db  0x6c ; 'l'
0000000000000a3e         db  0x6c ; 'l'
0000000000000a3f         db  0x6f ; 'o'
0000000000000a40         db  0x63 ; 'c'
0000000000000a41         db  0x00 ; '.'
0000000000000a42         db  0x61 ; 'a'
0000000000000a43         db  0x62 ; 'b'
0000000000000a44         db  0x6f ; 'o'
0000000000000a45         db  0x72 ; 'r'
0000000000000a46         db  0x74 ; 't'
0000000000000a47         db  0x00 ; '.'
0000000000000a48         db  0x73 ; 's'
0000000000000a49         db  0x74 ; 't'
0000000000000a4a         db  0x64 ; 'd'
0000000000000a4b         db  0x69 ; 'i'
0000000000000a4c         db  0x6e ; 'n'
0000000000000a4d         db  0x00 ; '.'
0000000000000a4e         db  0x5f ; '_'
0000000000000a4f         db  0x65 ; 'e'
0000000000000a50         db  0x78 ; 'x'
0000000000000a51         db  0x69 ; 'i'
0000000000000a52         db  0x74 ; 't'
0000000000000a53         db  0x00 ; '.'
0000000000000a54         db  0x73 ; 's'
0000000000000a55         db  0x74 ; 't'
0000000000000a56         db  0x72 ; 'r'
0000000000000a57         db  0x73 ; 's'
0000000000000a58         db  0x70 ; 'p'
0000000000000a59         db  0x6e ; 'n'
0000000000000a5a         db  0x00 ; '.'
0000000000000a5b         db  0x70 ; 'p'
0000000000000a5c         db  0x72 ; 'r'
0000000000000a5d         db  0x6f ; 'o'
0000000000000a5e         db  0x67 ; 'g'
0000000000000a5f         db  0x72 ; 'r'
0000000000000a60         db  0x61 ; 'a'
0000000000000a61         db  0x6d ; 'm'
0000000000000a62         db  0x5f ; '_'
0000000000000a63         db  0x69 ; 'i'
0000000000000a64         db  0x6e ; 'n'
0000000000000a65         db  0x76 ; 'v'
0000000000000a66         db  0x6f ; 'o'
0000000000000a67         db  0x63 ; 'c'
0000000000000a68         db  0x61 ; 'a'
0000000000000a69         db  0x74 ; 't'
0000000000000a6a         db  0x69 ; 'i'
0000000000000a6b         db  0x6f ; 'o'
0000000000000a6c         db  0x6e ; 'n'
0000000000000a6d         db  0x5f ; '_'
0000000000000a6e         db  0x6e ; 'n'
0000000000000a6f         db  0x61 ; 'a'
0000000000000a70         db  0x6d ; 'm'
0000000000000a71         db  0x65 ; 'e'
0000000000000a72         db  0x00 ; '.'
0000000000000a73         db  0x5f ; '_'
0000000000000a74         db  0x5f ; '_'
0000000000000a75         db  0x61 ; 'a'
0000000000000a76         db  0x73 ; 's'
0000000000000a77         db  0x73 ; 's'
0000000000000a78         db  0x65 ; 'e'
0000000000000a79         db  0x72 ; 'r'
0000000000000a7a         db  0x74 ; 't'
0000000000000a7b         db  0x5f ; '_'
0000000000000a7c         db  0x66 ; 'f'
0000000000000a7d         db  0x61 ; 'a'
0000000000000a7e         db  0x69 ; 'i'
0000000000000a7f         db  0x6c ; 'l'
0000000000000a80         db  0x00 ; '.'
0000000000000a81         db  0x5f ; '_'
0000000000000a82         db  0x5f ; '_'
0000000000000a83         db  0x63 ; 'c'
0000000000000a84         db  0x74 ; 't'
0000000000000a85         db  0x79 ; 'y'
0000000000000a86         db  0x70 ; 'p'
0000000000000a87         db  0x65 ; 'e'
0000000000000a88         db  0x5f ; '_'
0000000000000a89         db  0x67 ; 'g'
0000000000000a8a         db  0x65 ; 'e'
0000000000000a8b         db  0x74 ; 't'
0000000000000a8c         db  0x5f ; '_'
0000000000000a8d         db  0x6d ; 'm'
0000000000000a8e         db  0x62 ; 'b'
0000000000000a8f         db  0x5f ; '_'
0000000000000a90         db  0x63 ; 'c'
0000000000000a91         db  0x75 ; 'u'
0000000000000a92         db  0x72 ; 'r'
0000000000000a93         db  0x5f ; '_'
0000000000000a94         db  0x6d ; 'm'
0000000000000a95         db  0x61 ; 'a'
0000000000000a96         db  0x78 ; 'x'
0000000000000a97         db  0x00 ; '.'
0000000000000a98         db  0x73 ; 's'
0000000000000a99         db  0x74 ; 't'
0000000000000a9a         db  0x72 ; 'r'
0000000000000a9b         db  0x74 ; 't'
0000000000000a9c         db  0x6f ; 'o'
0000000000000a9d         db  0x6c ; 'l'
0000000000000a9e         db  0x00 ; '.'
0000000000000a9f         db  0x63 ; 'c'
0000000000000aa0         db  0x61 ; 'a'
0000000000000aa1         db  0x6c ; 'l'
0000000000000aa2         db  0x6c ; 'l'
0000000000000aa3         db  0x6f ; 'o'
0000000000000aa4         db  0x63 ; 'c'
0000000000000aa5         db  0x00 ; '.'
0000000000000aa6         db  0x73 ; 's'
0000000000000aa7         db  0x74 ; 't'
0000000000000aa8         db  0x72 ; 'r'
0000000000000aa9         db  0x6c ; 'l'
0000000000000aaa         db  0x65 ; 'e'
0000000000000aab         db  0x6e ; 'n'
0000000000000aac         db  0x00 ; '.'
0000000000000aad         db  0x6d ; 'm'
0000000000000aae         db  0x65 ; 'e'
0000000000000aaf         db  0x6d ; 'm'
0000000000000ab0         db  0x73 ; 's'
0000000000000ab1         db  0x65 ; 'e'
0000000000000ab2         db  0x74 ; 't'
0000000000000ab3         db  0x00 ; '.'
0000000000000ab4         db  0x5f ; '_'
0000000000000ab5         db  0x5f ; '_'
0000000000000ab6         db  0x65 ; 'e'
0000000000000ab7         db  0x72 ; 'r'
0000000000000ab8         db  0x72 ; 'r'
0000000000000ab9         db  0x6e ; 'n'
0000000000000aba         db  0x6f ; 'o'
0000000000000abb         db  0x5f ; '_'
0000000000000abc         db  0x6c ; 'l'
0000000000000abd         db  0x6f ; 'o'
0000000000000abe         db  0x63 ; 'c'
0000000000000abf         db  0x61 ; 'a'
0000000000000ac0         db  0x74 ; 't'
0000000000000ac1         db  0x69 ; 'i'
0000000000000ac2         db  0x6f ; 'o'
0000000000000ac3         db  0x6e ; 'n'
0000000000000ac4         db  0x00 ; '.'
0000000000000ac5         db  0x6d ; 'm'
0000000000000ac6         db  0x65 ; 'e'
0000000000000ac7         db  0x6d ; 'm'
0000000000000ac8         db  0x63 ; 'c'
0000000000000ac9         db  0x6d ; 'm'
0000000000000aca         db  0x70 ; 'p'
0000000000000acb         db  0x00 ; '.'
0000000000000acc         db  0x73 ; 's'
0000000000000acd         db  0x74 ; 't'
0000000000000ace         db  0x72 ; 'r'
0000000000000acf         db  0x6e ; 'n'
0000000000000ad0         db  0x64 ; 'd'
0000000000000ad1         db  0x75 ; 'u'
0000000000000ad2         db  0x70 ; 'p'
0000000000000ad3         db  0x00 ; '.'
0000000000000ad4         db  0x67 ; 'g'
0000000000000ad5         db  0x65 ; 'e'
0000000000000ad6         db  0x74 ; 't'
0000000000000ad7         db  0x64 ; 'd'
0000000000000ad8         db  0x65 ; 'e'
0000000000000ad9         db  0x6c ; 'l'
0000000000000ada         db  0x69 ; 'i'
0000000000000adb         db  0x6d ; 'm'
0000000000000adc         db  0x00 ; '.'
0000000000000add         db  0x6d ; 'm'
0000000000000ade         db  0x65 ; 'e'
0000000000000adf         db  0x6d ; 'm'
0000000000000ae0         db  0x70 ; 'p'
0000000000000ae1         db  0x63 ; 'c'
0000000000000ae2         db  0x70 ; 'p'
0000000000000ae3         db  0x79 ; 'y'
0000000000000ae4         db  0x00 ; '.'
0000000000000ae5         db  0x5f ; '_'
0000000000000ae6         db  0x5f ; '_'
0000000000000ae7         db  0x66 ; 'f'
0000000000000ae8         db  0x70 ; 'p'
0000000000000ae9         db  0x72 ; 'r'
0000000000000aea         db  0x69 ; 'i'
0000000000000aeb         db  0x6e ; 'n'
0000000000000aec         db  0x74 ; 't'
0000000000000aed         db  0x66 ; 'f'
0000000000000aee         db  0x5f ; '_'
0000000000000aef         db  0x63 ; 'c'
0000000000000af0         db  0x68 ; 'h'
0000000000000af1         db  0x6b ; 'k'
0000000000000af2         db  0x00 ; '.'
0000000000000af3         db  0x77 ; 'w'
0000000000000af4         db  0x63 ; 'c'
0000000000000af5         db  0x73 ; 's'
0000000000000af6         db  0x77 ; 'w'
0000000000000af7         db  0x69 ; 'i'
0000000000000af8         db  0x64 ; 'd'
0000000000000af9         db  0x74 ; 't'
0000000000000afa         db  0x68 ; 'h'
0000000000000afb         db  0x00 ; '.'
0000000000000afc         db  0x73 ; 's'
0000000000000afd         db  0x74 ; 't'
0000000000000afe         db  0x64 ; 'd'
0000000000000aff         db  0x6f ; 'o'
0000000000000b00         db  0x75 ; 'u'
0000000000000b01         db  0x74 ; 't'
0000000000000b02         db  0x00 ; '.'
0000000000000b03         db  0x6c ; 'l'
0000000000000b04         db  0x73 ; 's'
0000000000000b05         db  0x65 ; 'e'
0000000000000b06         db  0x65 ; 'e'
0000000000000b07         db  0x6b ; 'k'
0000000000000b08         db  0x00 ; '.'
0000000000000b09         db  0x6d ; 'm'
0000000000000b0a         db  0x65 ; 'e'
0000000000000b0b         db  0x6d ; 'm'
0000000000000b0c         db  0x63 ; 'c'
0000000000000b0d         db  0x70 ; 'p'
0000000000000b0e         db  0x79 ; 'y'
0000000000000b0f         db  0x00 ; '.'
0000000000000b10         db  0x66 ; 'f'
0000000000000b11         db  0x63 ; 'c'
0000000000000b12         db  0x6c ; 'l'
0000000000000b13         db  0x6f ; 'o'
0000000000000b14         db  0x73 ; 's'
0000000000000b15         db  0x65 ; 'e'
0000000000000b16         db  0x00 ; '.'
0000000000000b17         db  0x6d ; 'm'
0000000000000b18         db  0x61 ; 'a'
0000000000000b19         db  0x6c ; 'l'
0000000000000b1a         db  0x6c ; 'l'
0000000000000b1b         db  0x6f ; 'o'
0000000000000b1c         db  0x63 ; 'c'
0000000000000b1d         db  0x00 ; '.'
0000000000000b1e         db  0x6d ; 'm'
0000000000000b1f         db  0x62 ; 'b'
0000000000000b20         db  0x73 ; 's'
0000000000000b21         db  0x69 ; 'i'
0000000000000b22         db  0x6e ; 'n'
0000000000000b23         db  0x69 ; 'i'
0000000000000b24         db  0x74 ; 't'
0000000000000b25         db  0x00 ; '.'
0000000000000b26         db  0x6e ; 'n'
0000000000000b27         db  0x6c ; 'l'
0000000000000b28         db  0x5f ; '_'
0000000000000b29         db  0x6c ; 'l'
0000000000000b2a         db  0x61 ; 'a'
0000000000000b2b         db  0x6e ; 'n'
0000000000000b2c         db  0x67 ; 'g'
0000000000000b2d         db  0x69 ; 'i'
0000000000000b2e         db  0x6e ; 'n'
0000000000000b2f         db  0x66 ; 'f'
0000000000000b30         db  0x6f ; 'o'
0000000000000b31         db  0x00 ; '.'
0000000000000b32         db  0x5f ; '_'
0000000000000b33         db  0x5f ; '_'
0000000000000b34         db  0x63 ; 'c'
0000000000000b35         db  0x74 ; 't'
0000000000000b36         db  0x79 ; 'y'
0000000000000b37         db  0x70 ; 'p'
0000000000000b38         db  0x65 ; 'e'
0000000000000b39         db  0x5f ; '_'
0000000000000b3a         db  0x62 ; 'b'
0000000000000b3b         db  0x5f ; '_'
0000000000000b3c         db  0x6c ; 'l'
0000000000000b3d         db  0x6f ; 'o'
0000000000000b3e         db  0x63 ; 'c'
0000000000000b3f         db  0x00 ; '.'
0000000000000b40         db  0x6f ; 'o'
                     aPtarg:
0000000000000b41         db         "ptarg", 0
0000000000000b47         db  0x5f ; '_'
0000000000000b48         db  0x5f ; '_'
0000000000000b49         db  0x66 ; 'f'
0000000000000b4a         db  0x72 ; 'r'
0000000000000b4b         db  0x65 ; 'e'
0000000000000b4c         db  0x61 ; 'a'
0000000000000b4d         db  0x64 ; 'd'
0000000000000b4e         db  0x69 ; 'i'
0000000000000b4f         db  0x6e ; 'n'
0000000000000b50         db  0x67 ; 'g'
0000000000000b51         db  0x00 ; '.'
0000000000000b52         db  0x73 ; 's'
0000000000000b53         db  0x74 ; 't'
0000000000000b54         db  0x64 ; 'd'
0000000000000b55         db  0x65 ; 'e'
0000000000000b56         db  0x72 ; 'r'
0000000000000b57         db  0x72 ; 'r'
0000000000000b58         db  0x00 ; '.'
0000000000000b59         db  0x77 ; 'w'
0000000000000b5a         db  0x63 ; 'c'
0000000000000b5b         db  0x77 ; 'w'
0000000000000b5c         db  0x69 ; 'i'
0000000000000b5d         db  0x64 ; 'd'
0000000000000b5e         db  0x74 ; 't'
0000000000000b5f         db  0x68 ; 'h'
0000000000000b60         db  0x00 ; '.'
0000000000000b61         db  0x5f ; '_'
0000000000000b62         db  0x5f ; '_'
0000000000000b63         db  0x73 ; 's'
0000000000000b64         db  0x6e ; 'n'
0000000000000b65         db  0x70 ; 'p'
0000000000000b66         db  0x72 ; 'r'
0000000000000b67         db  0x69 ; 'i'
0000000000000b68         db  0x6e ; 'n'
0000000000000b69         db  0x74 ; 't'
0000000000000b6a         db  0x66 ; 'f'
0000000000000b6b         db  0x5f ; '_'
0000000000000b6c         db  0x63 ; 'c'
0000000000000b6d         db  0x68 ; 'h'
0000000000000b6e         db  0x6b ; 'k'
0000000000000b6f         db  0x00 ; '.'
0000000000000b70         db  0x67 ; 'g'
0000000000000b71         db  0x65 ; 'e'
0000000000000b72         db  0x74 ; 't'
0000000000000b73         db  0x6f ; 'o'
0000000000000b74         db  0x70 ; 'p'
0000000000000b75         db  0x74 ; 't'
0000000000000b76         db  0x5f ; '_'
0000000000000b77         db  0x6c ; 'l'
0000000000000b78         db  0x6f ; 'o'
0000000000000b79         db  0x6e ; 'n'
0000000000000b7a         db  0x67 ; 'g'
0000000000000b7b         db  0x00 ; '.'
0000000000000b7c         db  0x5f ; '_'
0000000000000b7d         db  0x5f ; '_'
0000000000000b7e         db  0x73 ; 's'
0000000000000b7f         db  0x74 ; 't'
0000000000000b80         db  0x72 ; 'r'
0000000000000b81         db  0x6e ; 'n'
0000000000000b82         db  0x63 ; 'c'
0000000000000b83         db  0x61 ; 'a'
0000000000000b84         db  0x74 ; 't'
0000000000000b85         db  0x5f ; '_'
0000000000000b86         db  0x63 ; 'c'
0000000000000b87         db  0x68 ; 'h'
0000000000000b88         db  0x6b ; 'k'
0000000000000b89         db  0x00 ; '.'
0000000000000b8a         db  0x66 ; 'f'
0000000000000b8b         db  0x69 ; 'i'
0000000000000b8c         db  0x6c ; 'l'
0000000000000b8d         db  0x65 ; 'e'
0000000000000b8e         db  0x6e ; 'n'
0000000000000b8f         db  0x6f ; 'o'
0000000000000b90         db  0x00 ; '.'
0000000000000b91         db  0x66 ; 'f'
0000000000000b92         db  0x77 ; 'w'
0000000000000b93         db  0x72 ; 'r'
0000000000000b94         db  0x69 ; 'i'
0000000000000b95         db  0x74 ; 't'
0000000000000b96         db  0x65 ; 'e'
0000000000000b97         db  0x00 ; '.'
0000000000000b98         db  0x5f ; '_'
0000000000000b99         db  0x5f ; '_'
0000000000000b9a         db  0x66 ; 'f'
0000000000000b9b         db  0x70 ; 'p'
0000000000000b9c         db  0x65 ; 'e'
0000000000000b9d         db  0x6e ; 'n'
0000000000000b9e         db  0x64 ; 'd'
0000000000000b9f         db  0x69 ; 'i'
0000000000000ba0         db  0x6e ; 'n'
0000000000000ba1         db  0x67 ; 'g'
0000000000000ba2         db  0x00 ; '.'
0000000000000ba3         db  0x73 ; 's'
0000000000000ba4         db  0x74 ; 't'
0000000000000ba5         db  0x72 ; 'r'
0000000000000ba6         db  0x63 ; 'c'
0000000000000ba7         db  0x68 ; 'h'
0000000000000ba8         db  0x72 ; 'r'
0000000000000ba9         db  0x00 ; '.'
0000000000000baa         db  0x70 ; 'p'
0000000000000bab         db  0x72 ; 'r'
0000000000000bac         db  0x6f ; 'o'
0000000000000bad         db  0x67 ; 'g'
0000000000000bae         db  0x72 ; 'r'
0000000000000baf         db  0x61 ; 'a'
0000000000000bb0         db  0x6d ; 'm'
0000000000000bb1         db  0x5f ; '_'
0000000000000bb2         db  0x69 ; 'i'
0000000000000bb3         db  0x6e ; 'n'
0000000000000bb4         db  0x76 ; 'v'
0000000000000bb5         db  0x6f ; 'o'
0000000000000bb6         db  0x63 ; 'c'
0000000000000bb7         db  0x61 ; 'a'
0000000000000bb8         db  0x74 ; 't'
0000000000000bb9         db  0x69 ; 'i'
0000000000000bba         db  0x6f ; 'o'
0000000000000bbb         db  0x6e ; 'n'
0000000000000bbc         db  0x5f ; '_'
0000000000000bbd         db  0x73 ; 's'
0000000000000bbe         db  0x68 ; 'h'
0000000000000bbf         db  0x6f ; 'o'
0000000000000bc0         db  0x72 ; 'r'
0000000000000bc1         db  0x74 ; 't'
0000000000000bc2         db  0x5f ; '_'
0000000000000bc3         db  0x6e ; 'n'
0000000000000bc4         db  0x61 ; 'a'
0000000000000bc5         db  0x6d ; 'm'
0000000000000bc6         db  0x65 ; 'e'
0000000000000bc7         db  0x00 ; '.'
0000000000000bc8         db  0x71 ; 'q'
0000000000000bc9         db  0x73 ; 's'
0000000000000bca         db  0x6f ; 'o'
0000000000000bcb         db  0x72 ; 'r'
0000000000000bcc         db  0x74 ; 't'
0000000000000bcd         db  0x00 ; '.'
0000000000000bce         db  0x77 ; 'w'
0000000000000bcf         db  0x63 ; 'c'
0000000000000bd0         db  0x73 ; 's'
0000000000000bd1         db  0x74 ; 't'
0000000000000bd2         db  0x6f ; 'o'
0000000000000bd3         db  0x6d ; 'm'
0000000000000bd4         db  0x62 ; 'b'
0000000000000bd5         db  0x73 ; 's'
0000000000000bd6         db  0x00 ; '.'
0000000000000bd7         db  0x5f ; '_'
0000000000000bd8         db  0x5f ; '_'
0000000000000bd9         db  0x63 ; 'c'
0000000000000bda         db  0x78 ; 'x'
0000000000000bdb         db  0x61 ; 'a'
0000000000000bdc         db  0x5f ; '_'
0000000000000bdd         db  0x66 ; 'f'
0000000000000bde         db  0x69 ; 'i'
0000000000000bdf         db  0x6e ; 'n'
0000000000000be0         db  0x61 ; 'a'
0000000000000be1         db  0x6c ; 'l'
0000000000000be2         db  0x69 ; 'i'
0000000000000be3         db  0x7a ; 'z'
0000000000000be4         db  0x65 ; 'e'
0000000000000be5         db  0x00 ; '.'
0000000000000be6         db  0x6d ; 'm'
0000000000000be7         db  0x65 ; 'e'
0000000000000be8         db  0x6d ; 'm'
0000000000000be9         db  0x6d ; 'm'
0000000000000bea         db  0x6f ; 'o'
0000000000000beb         db  0x76 ; 'v'
0000000000000bec         db  0x65 ; 'e'
0000000000000bed         db  0x00 ; '.'
0000000000000bee         db  0x62 ; 'b'
0000000000000bef         db  0x69 ; 'i'
0000000000000bf0         db  0x6e ; 'n'
0000000000000bf1         db  0x64 ; 'd'
0000000000000bf2         db  0x74 ; 't'
0000000000000bf3         db  0x65 ; 'e'
0000000000000bf4         db  0x78 ; 'x'
0000000000000bf5         db  0x74 ; 't'
0000000000000bf6         db  0x64 ; 'd'
0000000000000bf7         db  0x6f ; 'o'
0000000000000bf8         db  0x6d ; 'm'
0000000000000bf9         db  0x61 ; 'a'
0000000000000bfa         db  0x69 ; 'i'
0000000000000bfb         db  0x6e ; 'n'
0000000000000bfc         db  0x00 ; '.'
0000000000000bfd         db  0x73 ; 's'
0000000000000bfe         db  0x74 ; 't'
0000000000000bff         db  0x72 ; 'r'
0000000000000c00         db  0x63 ; 'c'
0000000000000c01         db  0x6d ; 'm'
0000000000000c02         db  0x70 ; 'p'
0000000000000c03         db  0x00 ; '.'
0000000000000c04         db  0x5f ; '_'
0000000000000c05         db  0x5f ; '_'
0000000000000c06         db  0x6c ; 'l'
0000000000000c07         db  0x69 ; 'i'
0000000000000c08         db  0x62 ; 'b'
0000000000000c09         db  0x63 ; 'c'
0000000000000c0a         db  0x5f ; '_'
0000000000000c0b         db  0x73 ; 's'
0000000000000c0c         db  0x74 ; 't'
0000000000000c0d         db  0x61 ; 'a'
0000000000000c0e         db  0x72 ; 'r'
0000000000000c0f         db  0x74 ; 't'
0000000000000c10         db  0x5f ; '_'
0000000000000c11         db  0x6d ; 'm'
0000000000000c12         db  0x61 ; 'a'
0000000000000c13         db  0x69 ; 'i'
0000000000000c14         db  0x6e ; 'n'
0000000000000c15         db  0x00 ; '.'
0000000000000c16         db  0x66 ; 'f'
0000000000000c17         db  0x73 ; 's'
0000000000000c18         db  0x65 ; 'e'
0000000000000c19         db  0x65 ; 'e'
0000000000000c1a         db  0x6b ; 'k'
0000000000000c1b         db  0x6f ; 'o'
0000000000000c1c         db  0x00 ; '.'
0000000000000c1d         db  0x5f ; '_'
0000000000000c1e         db  0x5f ; '_'
0000000000000c1f         db  0x6f ; 'o'
0000000000000c20         db  0x76 ; 'v'
0000000000000c21         db  0x65 ; 'e'
0000000000000c22         db  0x72 ; 'r'
0000000000000c23         db  0x66 ; 'f'
0000000000000c24         db  0x6c ; 'l'
0000000000000c25         db  0x6f ; 'o'
0000000000000c26         db  0x77 ; 'w'
0000000000000c27         db  0x00 ; '.'
0000000000000c28         db  0x5f ; '_'
0000000000000c29         db  0x5f ; '_'
0000000000000c2a         db  0x73 ; 's'
0000000000000c2b         db  0x74 ; 't'
0000000000000c2c         db  0x72 ; 'r'
0000000000000c2d         db  0x74 ; 't'
0000000000000c2e         db  0x6f ; 'o'
0000000000000c2f         db  0x75 ; 'u'
0000000000000c30         db  0x6c ; 'l'
0000000000000c31         db  0x5f ; '_'
0000000000000c32         db  0x69 ; 'i'
0000000000000c33         db  0x6e ; 'n'
0000000000000c34         db  0x74 ; 't'
0000000000000c35         db  0x65 ; 'e'
0000000000000c36         db  0x72 ; 'r'
0000000000000c37         db  0x6e ; 'n'
0000000000000c38         db  0x61 ; 'a'
0000000000000c39         db  0x6c ; 'l'
0000000000000c3a         db  0x00 ; '.'
0000000000000c3b         db  0x66 ; 'f'
0000000000000c3c         db  0x70 ; 'p'
0000000000000c3d         db  0x75 ; 'u'
0000000000000c3e         db  0x74 ; 't'
0000000000000c3f         db  0x73 ; 's'
0000000000000c40         db  0x5f ; '_'
0000000000000c41         db  0x75 ; 'u'
0000000000000c42         db  0x6e ; 'n'
0000000000000c43         db  0x6c ; 'l'
0000000000000c44         db  0x6f ; 'o'
0000000000000c45         db  0x63 ; 'c'
0000000000000c46         db  0x6b ; 'k'
0000000000000c47         db  0x65 ; 'e'
0000000000000c48         db  0x64 ; 'd'
0000000000000c49         db  0x00 ; '.'
0000000000000c4a         db  0x66 ; 'f'
0000000000000c4b         db  0x72 ; 'r'
0000000000000c4c         db  0x65 ; 'e'
0000000000000c4d         db  0x65 ; 'e'
0000000000000c4e         db  0x00 ; '.'
0000000000000c4f         db  0x5f ; '_'
0000000000000c50         db  0x5f ; '_'
0000000000000c51         db  0x70 ; 'p'
0000000000000c52         db  0x72 ; 'r'
0000000000000c53         db  0x6f ; 'o'
0000000000000c54         db  0x67 ; 'g'
0000000000000c55         db  0x6e ; 'n'
0000000000000c56         db  0x61 ; 'a'
0000000000000c57         db  0x6d ; 'm'
0000000000000c58         db  0x65 ; 'e'
0000000000000c59         db  0x00 ; '.'
0000000000000c5a         db  0x5f ; '_'
0000000000000c5b         db  0x5f ; '_'
0000000000000c5c         db  0x70 ; 'p'
0000000000000c5d         db  0x72 ; 'r'
0000000000000c5e         db  0x6f ; 'o'
0000000000000c5f         db  0x67 ; 'g'
0000000000000c60         db  0x6e ; 'n'
0000000000000c61         db  0x61 ; 'a'
0000000000000c62         db  0x6d ; 'm'
0000000000000c63         db  0x65 ; 'e'
0000000000000c64         db  0x5f ; '_'
0000000000000c65         db  0x66 ; 'f'
0000000000000c66         db  0x75 ; 'u'
0000000000000c67         db  0x6c ; 'l'
0000000000000c68         db  0x6c ; 'l'
0000000000000c69         db  0x00 ; '.'
0000000000000c6a         db  0x5f ; '_'
0000000000000c6b         db  0x5f ; '_'
0000000000000c6c         db  0x63 ; 'c'
0000000000000c6d         db  0x78 ; 'x'
0000000000000c6e         db  0x61 ; 'a'
0000000000000c6f         db  0x5f ; '_'
0000000000000c70         db  0x61 ; 'a'
0000000000000c71         db  0x74 ; 't'
0000000000000c72         db  0x65 ; 'e'
0000000000000c73         db  0x78 ; 'x'
0000000000000c74         db  0x69 ; 'i'
0000000000000c75         db  0x74 ; 't'
0000000000000c76         db  0x00 ; '.'
0000000000000c77         db  0x47 ; 'G'
0000000000000c78         db  0x4c ; 'L'
0000000000000c79         db  0x49 ; 'I'
0000000000000c7a         db  0x42 ; 'B'
0000000000000c7b         db  0x43 ; 'C'
0000000000000c7c         db  0x5f ; '_'
0000000000000c7d         db  0x32 ; '2'
0000000000000c7e         db  0x2e ; '.'
0000000000000c7f         db  0x33 ; '3'
0000000000000c80         db  0x00 ; '.'
0000000000000c81         db  0x47 ; 'G'
0000000000000c82         db  0x4c ; 'L'
0000000000000c83         db  0x49 ; 'I'
0000000000000c84         db  0x42 ; 'B'
0000000000000c85         db  0x43 ; 'C'
0000000000000c86         db  0x5f ; '_'
0000000000000c87         db  0x32 ; '2'
0000000000000c88         db  0x2e ; '.'
0000000000000c89         db  0x31 ; '1'
0000000000000c8a         db  0x34 ; '4'
0000000000000c8b         db  0x00 ; '.'
0000000000000c8c         db  0x47 ; 'G'
0000000000000c8d         db  0x4c ; 'L'
0000000000000c8e         db  0x49 ; 'I'
0000000000000c8f         db  0x42 ; 'B'
0000000000000c90         db  0x43 ; 'C'
0000000000000c91         db  0x5f ; '_'
0000000000000c92         db  0x32 ; '2'
0000000000000c93         db  0x2e ; '.'
0000000000000c94         db  0x34 ; '4'
0000000000000c95         db  0x00 ; '.'
0000000000000c96         db  0x47 ; 'G'
0000000000000c97         db  0x4c ; 'L'
0000000000000c98         db  0x49 ; 'I'
0000000000000c99         db  0x42 ; 'B'
0000000000000c9a         db  0x43 ; 'C'
0000000000000c9b         db  0x5f ; '_'
0000000000000c9c         db  0x32 ; '2'
0000000000000c9d         db  0x2e ; '.'
0000000000000c9e         db  0x33 ; '3'
0000000000000c9f         db  0x2e ; '.'
0000000000000ca0         db  0x34 ; '4'
0000000000000ca1         db  0x00 ; '.'
0000000000000ca2         db  0x47 ; 'G'
0000000000000ca3         db  0x4c ; 'L'
0000000000000ca4         db  0x49 ; 'I'
0000000000000ca5         db  0x42 ; 'B'
0000000000000ca6         db  0x43 ; 'C'
0000000000000ca7         db  0x5f ; '_'
0000000000000ca8         db  0x32 ; '2'
0000000000000ca9         db  0x2e ; '.'
0000000000000caa         db  0x32 ; '2'
0000000000000cab         db  0x2e ; '.'
0000000000000cac         db  0x35 ; '5'
0000000000000cad         db  0x00 ; '.'
0000000000000cae         db  0x5f ; '_'
0000000000000caf         db  0x49 ; 'I'
0000000000000cb0         db  0x54 ; 'T'
0000000000000cb1         db  0x4d ; 'M'
0000000000000cb2         db  0x5f ; '_'
0000000000000cb3         db  0x64 ; 'd'
0000000000000cb4         db  0x65 ; 'e'
0000000000000cb5         db  0x72 ; 'r'
0000000000000cb6         db  0x65 ; 'e'
0000000000000cb7         db  0x67 ; 'g'
0000000000000cb8         db  0x69 ; 'i'
0000000000000cb9         db  0x73 ; 's'
0000000000000cba         db  0x74 ; 't'
0000000000000cbb         db  0x65 ; 'e'
0000000000000cbc         db  0x72 ; 'r'
0000000000000cbd         db  0x54 ; 'T'
0000000000000cbe         db  0x4d ; 'M'
0000000000000cbf         db  0x43 ; 'C'
0000000000000cc0         db  0x6c ; 'l'
0000000000000cc1         db  0x6f ; 'o'
0000000000000cc2         db  0x6e ; 'n'
0000000000000cc3         db  0x65 ; 'e'
0000000000000cc4         db  0x54 ; 'T'
0000000000000cc5         db  0x61 ; 'a'
0000000000000cc6         db  0x62 ; 'b'
0000000000000cc7         db  0x6c ; 'l'
0000000000000cc8         db  0x65 ; 'e'
0000000000000cc9         db  0x00 ; '.'
0000000000000cca         db  0x5f ; '_'
0000000000000ccb         db  0x5f ; '_'
0000000000000ccc         db  0x67 ; 'g'
0000000000000ccd         db  0x6d ; 'm'
0000000000000cce         db  0x6f ; 'o'
0000000000000ccf         db  0x6e ; 'n'
0000000000000cd0         db  0x5f ; '_'
0000000000000cd1         db  0x73 ; 's'
0000000000000cd2         db  0x74 ; 't'
0000000000000cd3         db  0x61 ; 'a'
0000000000000cd4         db  0x72 ; 'r'
0000000000000cd5         db  0x74 ; 't'
0000000000000cd6         db  0x5f ; '_'
0000000000000cd7         db  0x5f ; '_'
0000000000000cd8         db  0x00 ; '.'
0000000000000cd9         db  0x5f ; '_'
0000000000000cda         db  0x49 ; 'I'
0000000000000cdb         db  0x54 ; 'T'
0000000000000cdc         db  0x4d ; 'M'
0000000000000cdd         db  0x5f ; '_'
0000000000000cde         db  0x72 ; 'r'
0000000000000cdf         db  0x65 ; 'e'
0000000000000ce0         db  0x67 ; 'g'
0000000000000ce1         db  0x69 ; 'i'
0000000000000ce2         db  0x73 ; 's'
0000000000000ce3         db  0x74 ; 't'
0000000000000ce4         db  0x65 ; 'e'
0000000000000ce5         db  0x72 ; 'r'
0000000000000ce6         db  0x54 ; 'T'
0000000000000ce7         db  0x4d ; 'M'
0000000000000ce8         db  0x43 ; 'C'
0000000000000ce9         db  0x6c ; 'l'
0000000000000cea         db  0x6f ; 'o'
0000000000000ceb         db  0x6e ; 'n'
0000000000000cec         db  0x65 ; 'e'
0000000000000ced         db  0x54 ; 'T'
0000000000000cee         db  0x61 ; 'a'
0000000000000cef         db  0x62 ; 'b'
0000000000000cf0         db  0x6c ; 'l'
0000000000000cf1         db  0x65 ; 'e'
0000000000000cf2         db  0x00 ; '.'
0000000000000cf3         db  0x00 ; '.'


        ; Section .gnu.version
        ; Range: [0xcf4; 0xd86[ (146 bytes)
        ; File offset : [3316; 3462[ (146 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000000cf4         db  0x00 ; '.'
0000000000000cf5         db  0x00 ; '.'
0000000000000cf6         db  0x03 ; '.'
0000000000000cf7         db  0x00 ; '.'
0000000000000cf8         db  0x02 ; '.'
0000000000000cf9         db  0x00 ; '.'
0000000000000cfa         db  0x02 ; '.'
0000000000000cfb         db  0x00 ; '.'
0000000000000cfc         db  0x02 ; '.'
0000000000000cfd         db  0x00 ; '.'
0000000000000cfe         db  0x02 ; '.'
0000000000000cff         db  0x00 ; '.'
0000000000000d00         db  0x00 ; '.'
0000000000000d01         db  0x00 ; '.'
0000000000000d02         db  0x02 ; '.'
0000000000000d03         db  0x00 ; '.'
0000000000000d04         db  0x02 ; '.'
0000000000000d05         db  0x00 ; '.'
0000000000000d06         db  0x02 ; '.'
0000000000000d07         db  0x00 ; '.'
0000000000000d08         db  0x02 ; '.'
0000000000000d09         db  0x00 ; '.'
0000000000000d0a         db  0x02 ; '.'
0000000000000d0b         db  0x00 ; '.'
0000000000000d0c         db  0x02 ; '.'
0000000000000d0d         db  0x00 ; '.'
0000000000000d0e         db  0x02 ; '.'
0000000000000d0f         db  0x00 ; '.'
0000000000000d10         db  0x02 ; '.'
0000000000000d11         db  0x00 ; '.'
0000000000000d12         db  0x02 ; '.'
0000000000000d13         db  0x00 ; '.'
0000000000000d14         db  0x02 ; '.'
0000000000000d15         db  0x00 ; '.'
0000000000000d16         db  0x02 ; '.'
0000000000000d17         db  0x00 ; '.'
0000000000000d18         db  0x02 ; '.'
0000000000000d19         db  0x00 ; '.'
0000000000000d1a         db  0x04 ; '.'
0000000000000d1b         db  0x00 ; '.'
0000000000000d1c         db  0x02 ; '.'
0000000000000d1d         db  0x00 ; '.'
0000000000000d1e         db  0x02 ; '.'
0000000000000d1f         db  0x00 ; '.'
0000000000000d20         db  0x02 ; '.'
0000000000000d21         db  0x00 ; '.'
0000000000000d22         db  0x02 ; '.'
0000000000000d23         db  0x00 ; '.'
0000000000000d24         db  0x02 ; '.'
0000000000000d25         db  0x00 ; '.'
0000000000000d26         db  0x02 ; '.'
0000000000000d27         db  0x00 ; '.'
0000000000000d28         db  0x02 ; '.'
0000000000000d29         db  0x00 ; '.'
0000000000000d2a         db  0x02 ; '.'
0000000000000d2b         db  0x00 ; '.'
0000000000000d2c         db  0x02 ; '.'
0000000000000d2d         db  0x00 ; '.'
0000000000000d2e         db  0x02 ; '.'
0000000000000d2f         db  0x00 ; '.'
0000000000000d30         db  0x02 ; '.'
0000000000000d31         db  0x00 ; '.'
0000000000000d32         db  0x02 ; '.'
0000000000000d33         db  0x00 ; '.'
0000000000000d34         db  0x02 ; '.'
0000000000000d35         db  0x00 ; '.'
0000000000000d36         db  0x02 ; '.'
0000000000000d37         db  0x00 ; '.'
0000000000000d38         db  0x02 ; '.'
0000000000000d39         db  0x00 ; '.'
0000000000000d3a         db  0x02 ; '.'
0000000000000d3b         db  0x00 ; '.'
0000000000000d3c         db  0x00 ; '.'
0000000000000d3d         db  0x00 ; '.'
0000000000000d3e         db  0x02 ; '.'
0000000000000d3f         db  0x00 ; '.'
0000000000000d40         db  0x05 ; '.'
0000000000000d41         db  0x00 ; '.'
0000000000000d42         db  0x02 ; '.'
0000000000000d43         db  0x00 ; '.'
0000000000000d44         db  0x02 ; '.'
0000000000000d45         db  0x00 ; '.'
0000000000000d46         db  0x02 ; '.'
0000000000000d47         db  0x00 ; '.'
0000000000000d48         db  0x02 ; '.'
0000000000000d49         db  0x00 ; '.'
0000000000000d4a         db  0x02 ; '.'
0000000000000d4b         db  0x00 ; '.'
0000000000000d4c         db  0x02 ; '.'
0000000000000d4d         db  0x00 ; '.'
0000000000000d4e         db  0x02 ; '.'
0000000000000d4f         db  0x00 ; '.'
0000000000000d50         db  0x02 ; '.'
0000000000000d51         db  0x00 ; '.'
0000000000000d52         db  0x03 ; '.'
0000000000000d53         db  0x00 ; '.'
0000000000000d54         db  0x02 ; '.'
0000000000000d55         db  0x00 ; '.'
0000000000000d56         db  0x02 ; '.'
0000000000000d57         db  0x00 ; '.'
0000000000000d58         db  0x02 ; '.'
0000000000000d59         db  0x00 ; '.'
0000000000000d5a         db  0x02 ; '.'
0000000000000d5b         db  0x00 ; '.'
0000000000000d5c         db  0x02 ; '.'
0000000000000d5d         db  0x00 ; '.'
0000000000000d5e         db  0x02 ; '.'
0000000000000d5f         db  0x00 ; '.'
0000000000000d60         db  0x02 ; '.'
0000000000000d61         db  0x00 ; '.'
0000000000000d62         db  0x02 ; '.'
0000000000000d63         db  0x00 ; '.'
0000000000000d64         db  0x03 ; '.'
0000000000000d65         db  0x00 ; '.'
0000000000000d66         db  0x03 ; '.'
0000000000000d67         db  0x00 ; '.'
0000000000000d68         db  0x00 ; '.'
0000000000000d69         db  0x00 ; '.'
0000000000000d6a         db  0x02 ; '.'
0000000000000d6b         db  0x00 ; '.'
0000000000000d6c         db  0x02 ; '.'
0000000000000d6d         db  0x00 ; '.'
0000000000000d6e         db  0x02 ; '.'
0000000000000d6f         db  0x00 ; '.'
0000000000000d70         db  0x02 ; '.'
0000000000000d71         db  0x00 ; '.'
0000000000000d72         db  0x06 ; '.'
0000000000000d73         db  0x00 ; '.'
0000000000000d74         db  0x02 ; '.'
0000000000000d75         db  0x00 ; '.'
0000000000000d76         db  0x02 ; '.'
0000000000000d77         db  0x00 ; '.'
0000000000000d78         db  0x02 ; '.'
0000000000000d79         db  0x00 ; '.'
0000000000000d7a         db  0x02 ; '.'
0000000000000d7b         db  0x00 ; '.'
0000000000000d7c         db  0x02 ; '.'
0000000000000d7d         db  0x00 ; '.'
0000000000000d7e         db  0x02 ; '.'
0000000000000d7f         db  0x00 ; '.'
0000000000000d80         db  0x02 ; '.'
0000000000000d81         db  0x00 ; '.'
0000000000000d82         db  0x02 ; '.'
0000000000000d83         db  0x00 ; '.'
0000000000000d84         db  0x02 ; '.'
0000000000000d85         db  0x00 ; '.'
0000000000000d86         db  0x00 ; '.'
0000000000000d87         db  0x00 ; '.'


        ; Section .gnu.version_r
        ; Range: [0xd88; 0xde8[ (96 bytes)
        ; File offset : [3464; 3560[ (96 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000000d88         db  0x01 ; '.'
0000000000000d89         db  0x00 ; '.'
0000000000000d8a         db  0x05 ; '.'
0000000000000d8b         db  0x00 ; '.'
0000000000000d8c         db  0x01 ; '.'
0000000000000d8d         db  0x00 ; '.'
0000000000000d8e         db  0x00 ; '.'
0000000000000d8f         db  0x00 ; '.'
0000000000000d90         db  0x10 ; '.'
0000000000000d91         db  0x00 ; '.'
0000000000000d92         db  0x00 ; '.'
0000000000000d93         db  0x00 ; '.'
0000000000000d94         db  0x00 ; '.'
0000000000000d95         db  0x00 ; '.'
0000000000000d96         db  0x00 ; '.'
0000000000000d97         db  0x00 ; '.'
0000000000000d98         db  0x13 ; '.'
0000000000000d99         db  0x69 ; 'i'
0000000000000d9a         db  0x69 ; 'i'
0000000000000d9b         db  0x0d ; '.'
0000000000000d9c         db  0x00 ; '.'
0000000000000d9d         db  0x00 ; '.'
0000000000000d9e         db  0x06 ; '.'
0000000000000d9f         db  0x00 ; '.'
0000000000000da0         db  0xbf ; '.'
0000000000000da1         db  0x02 ; '.'
0000000000000da2         db  0x00 ; '.'
0000000000000da3         db  0x00 ; '.'
0000000000000da4         db  0x10 ; '.'
0000000000000da5         db  0x00 ; '.'
0000000000000da6         db  0x00 ; '.'
0000000000000da7         db  0x00 ; '.'
0000000000000da8         db  0x94 ; '.'
0000000000000da9         db  0x91 ; '.'
0000000000000daa         db  0x96 ; '.'
0000000000000dab         db  0x06 ; '.'
0000000000000dac         db  0x00 ; '.'
0000000000000dad         db  0x00 ; '.'
0000000000000dae         db  0x05 ; '.'
0000000000000daf         db  0x00 ; '.'
0000000000000db0         db  0xc9 ; '.'
0000000000000db1         db  0x02 ; '.'
0000000000000db2         db  0x00 ; '.'
0000000000000db3         db  0x00 ; '.'
0000000000000db4         db  0x10 ; '.'
0000000000000db5         db  0x00 ; '.'
0000000000000db6         db  0x00 ; '.'
0000000000000db7         db  0x00 ; '.'
0000000000000db8         db  0x14 ; '.'
0000000000000db9         db  0x69 ; 'i'
0000000000000dba         db  0x69 ; 'i'
0000000000000dbb         db  0x0d ; '.'
0000000000000dbc         db  0x00 ; '.'
0000000000000dbd         db  0x00 ; '.'
0000000000000dbe         db  0x04 ; '.'
0000000000000dbf         db  0x00 ; '.'
0000000000000dc0         db  0xd4 ; '.'
0000000000000dc1         db  0x02 ; '.'
0000000000000dc2         db  0x00 ; '.'
0000000000000dc3         db  0x00 ; '.'
0000000000000dc4         db  0x10 ; '.'
0000000000000dc5         db  0x00 ; '.'
0000000000000dc6         db  0x00 ; '.'
0000000000000dc7         db  0x00 ; '.'
0000000000000dc8         db  0x74 ; 't'
0000000000000dc9         db  0x19 ; '.'
0000000000000dca         db  0x69 ; 'i'
0000000000000dcb         db  0x09 ; '.'
0000000000000dcc         db  0x00 ; '.'
0000000000000dcd         db  0x00 ; '.'
0000000000000dce         db  0x03 ; '.'
0000000000000dcf         db  0x00 ; '.'
0000000000000dd0         db  0xde ; '.'
0000000000000dd1         db  0x02 ; '.'
0000000000000dd2         db  0x00 ; '.'
0000000000000dd3         db  0x00 ; '.'
0000000000000dd4         db  0x10 ; '.'
0000000000000dd5         db  0x00 ; '.'
0000000000000dd6         db  0x00 ; '.'
0000000000000dd7         db  0x00 ; '.'
0000000000000dd8         db  0x75 ; 'u'
0000000000000dd9         db  0x1a ; '.'
0000000000000dda         db  0x69 ; 'i'
0000000000000ddb         db  0x09 ; '.'
0000000000000ddc         db  0x00 ; '.'
0000000000000ddd         db  0x00 ; '.'
0000000000000dde         db  0x02 ; '.'
0000000000000ddf         db  0x00 ; '.'
0000000000000de0         db  0xea ; '.'
0000000000000de1         db  0x02 ; '.'
0000000000000de2         db  0x00 ; '.'
0000000000000de3         db  0x00 ; '.'
0000000000000de4         db  0x00 ; '.'
0000000000000de5         db  0x00 ; '.'
0000000000000de6         db  0x00 ; '.'
0000000000000de7         db  0x00 ; '.'


        ; Section .rela.dyn
        ; Range: [0xde8; 0x1400[ (1560 bytes)
        ; File offset : [3560; 5120[ (1560 bytes)
        ; Flags: 0x2
        ;   SHT_RELA
        ;   SHF_ALLOC

0000000000000de8         db  0x30 ; '0'
0000000000000de9         db  0xd8 ; '.'
0000000000000dea         db  0x20 ; ' '
0000000000000deb         db  0x00 ; '.'
0000000000000dec         db  0x00 ; '.'
0000000000000ded         db  0x00 ; '.'
0000000000000dee         db  0x00 ; '.'
0000000000000def         db  0x00 ; '.'
0000000000000df0         db  0x08 ; '.'
0000000000000df1         db  0x00 ; '.'
0000000000000df2         db  0x00 ; '.'
0000000000000df3         db  0x00 ; '.'
0000000000000df4         db  0x00 ; '.'
0000000000000df5         db  0x00 ; '.'
0000000000000df6         db  0x00 ; '.'
0000000000000df7         db  0x00 ; '.'
0000000000000df8         db  0x90 ; '.'
0000000000000df9         db  0x2c ; ','
0000000000000dfa         db  0x00 ; '.'
0000000000000dfb         db  0x00 ; '.'
0000000000000dfc         db  0x00 ; '.'
0000000000000dfd         db  0x00 ; '.'
0000000000000dfe         db  0x00 ; '.'
0000000000000dff         db  0x00 ; '.'
0000000000000e00         db  0x38 ; '8'
0000000000000e01         db  0xd8 ; '.'
0000000000000e02         db  0x20 ; ' '
0000000000000e03         db  0x00 ; '.'
0000000000000e04         db  0x00 ; '.'
0000000000000e05         db  0x00 ; '.'
0000000000000e06         db  0x00 ; '.'
0000000000000e07         db  0x00 ; '.'
0000000000000e08         db  0x08 ; '.'
0000000000000e09         db  0x00 ; '.'
0000000000000e0a         db  0x00 ; '.'
0000000000000e0b         db  0x00 ; '.'
0000000000000e0c         db  0x00 ; '.'
0000000000000e0d         db  0x00 ; '.'
0000000000000e0e         db  0x00 ; '.'
0000000000000e0f         db  0x00 ; '.'
0000000000000e10         db  0x50 ; 'P'
0000000000000e11         db  0x2c ; ','
0000000000000e12         db  0x00 ; '.'
0000000000000e13         db  0x00 ; '.'
0000000000000e14         db  0x00 ; '.'
0000000000000e15         db  0x00 ; '.'
0000000000000e16         db  0x00 ; '.'
0000000000000e17         db  0x00 ; '.'
0000000000000e18         db  0x40 ; '@'
0000000000000e19         db  0xd8 ; '.'
0000000000000e1a         db  0x20 ; ' '
0000000000000e1b         db  0x00 ; '.'
0000000000000e1c         db  0x00 ; '.'
0000000000000e1d         db  0x00 ; '.'
0000000000000e1e         db  0x00 ; '.'
0000000000000e1f         db  0x00 ; '.'
0000000000000e20         db  0x08 ; '.'
0000000000000e21         db  0x00 ; '.'
0000000000000e22         db  0x00 ; '.'
0000000000000e23         db  0x00 ; '.'
0000000000000e24         db  0x00 ; '.'
0000000000000e25         db  0x00 ; '.'
0000000000000e26         db  0x00 ; '.'
0000000000000e27         db  0x00 ; '.'
0000000000000e28         db  0xa6 ; '.'
0000000000000e29         db  0x96 ; '.'
0000000000000e2a         db  0x00 ; '.'
0000000000000e2b         db  0x00 ; '.'
0000000000000e2c         db  0x00 ; '.'
0000000000000e2d         db  0x00 ; '.'
0000000000000e2e         db  0x00 ; '.'
0000000000000e2f         db  0x00 ; '.'
0000000000000e30         db  0x60 ; '`'
0000000000000e31         db  0xd8 ; '.'
0000000000000e32         db  0x20 ; ' '
0000000000000e33         db  0x00 ; '.'
0000000000000e34         db  0x00 ; '.'
0000000000000e35         db  0x00 ; '.'
0000000000000e36         db  0x00 ; '.'
0000000000000e37         db  0x00 ; '.'
0000000000000e38         db  0x08 ; '.'
0000000000000e39         db  0x00 ; '.'
0000000000000e3a         db  0x00 ; '.'
0000000000000e3b         db  0x00 ; '.'
0000000000000e3c         db  0x00 ; '.'
0000000000000e3d         db  0x00 ; '.'
0000000000000e3e         db  0x00 ; '.'
0000000000000e3f         db  0x00 ; '.'
0000000000000e40         db  0x7c ; '|'
0000000000000e41         db  0x97 ; '.'
0000000000000e42         db  0x00 ; '.'
0000000000000e43         db  0x00 ; '.'
0000000000000e44         db  0x00 ; '.'
0000000000000e45         db  0x00 ; '.'
0000000000000e46         db  0x00 ; '.'
0000000000000e47         db  0x00 ; '.'
0000000000000e48         db  0x80 ; '.'
0000000000000e49         db  0xd8 ; '.'
0000000000000e4a         db  0x20 ; ' '
0000000000000e4b         db  0x00 ; '.'
0000000000000e4c         db  0x00 ; '.'
0000000000000e4d         db  0x00 ; '.'
0000000000000e4e         db  0x00 ; '.'
0000000000000e4f         db  0x00 ; '.'
0000000000000e50         db  0x08 ; '.'
0000000000000e51         db  0x00 ; '.'
0000000000000e52         db  0x00 ; '.'
0000000000000e53         db  0x00 ; '.'
0000000000000e54         db  0x00 ; '.'
0000000000000e55         db  0x00 ; '.'
0000000000000e56         db  0x00 ; '.'
0000000000000e57         db  0x00 ; '.'
0000000000000e58         db  0xad ; '.'
0000000000000e59         db  0x96 ; '.'
0000000000000e5a         db  0x00 ; '.'
0000000000000e5b         db  0x00 ; '.'
0000000000000e5c         db  0x00 ; '.'
0000000000000e5d         db  0x00 ; '.'
0000000000000e5e         db  0x00 ; '.'
0000000000000e5f         db  0x00 ; '.'
0000000000000e60         db  0xa0 ; '.'
0000000000000e61         db  0xd8 ; '.'
0000000000000e62         db  0x20 ; ' '
0000000000000e63         db  0x00 ; '.'
0000000000000e64         db  0x00 ; '.'
0000000000000e65         db  0x00 ; '.'
0000000000000e66         db  0x00 ; '.'
0000000000000e67         db  0x00 ; '.'
0000000000000e68         db  0x08 ; '.'
0000000000000e69         db  0x00 ; '.'
0000000000000e6a         db  0x00 ; '.'
0000000000000e6b         db  0x00 ; '.'
0000000000000e6c         db  0x00 ; '.'
0000000000000e6d         db  0x00 ; '.'
0000000000000e6e         db  0x00 ; '.'
0000000000000e6f         db  0x00 ; '.'
0000000000000e70         db  0x86 ; '.'
0000000000000e71         db  0x97 ; '.'
0000000000000e72         db  0x00 ; '.'
0000000000000e73         db  0x00 ; '.'
0000000000000e74         db  0x00 ; '.'
0000000000000e75         db  0x00 ; '.'
0000000000000e76         db  0x00 ; '.'
0000000000000e77         db  0x00 ; '.'
0000000000000e78         db  0xc0 ; '.'
0000000000000e79         db  0xd8 ; '.'
0000000000000e7a         db  0x20 ; ' '
0000000000000e7b         db  0x00 ; '.'
0000000000000e7c         db  0x00 ; '.'
0000000000000e7d         db  0x00 ; '.'
0000000000000e7e         db  0x00 ; '.'
0000000000000e7f         db  0x00 ; '.'
0000000000000e80         db  0x08 ; '.'
0000000000000e81         db  0x00 ; '.'
0000000000000e82         db  0x00 ; '.'
0000000000000e83         db  0x00 ; '.'
0000000000000e84         db  0x00 ; '.'
0000000000000e85         db  0x00 ; '.'
0000000000000e86         db  0x00 ; '.'
0000000000000e87         db  0x00 ; '.'
0000000000000e88         db  0xb2 ; '.'
0000000000000e89         db  0x96 ; '.'
0000000000000e8a         db  0x00 ; '.'
0000000000000e8b         db  0x00 ; '.'
0000000000000e8c         db  0x00 ; '.'
0000000000000e8d         db  0x00 ; '.'
0000000000000e8e         db  0x00 ; '.'
0000000000000e8f         db  0x00 ; '.'
0000000000000e90         db  0xe0 ; '.'
0000000000000e91         db  0xd8 ; '.'
0000000000000e92         db  0x20 ; ' '
0000000000000e93         db  0x00 ; '.'
0000000000000e94         db  0x00 ; '.'
0000000000000e95         db  0x00 ; '.'
0000000000000e96         db  0x00 ; '.'
0000000000000e97         db  0x00 ; '.'
0000000000000e98         db  0x08 ; '.'
0000000000000e99         db  0x00 ; '.'
0000000000000e9a         db  0x00 ; '.'
0000000000000e9b         db  0x00 ; '.'
0000000000000e9c         db  0x00 ; '.'
0000000000000e9d         db  0x00 ; '.'
0000000000000e9e         db  0x00 ; '.'
0000000000000e9f         db  0x00 ; '.'
0000000000000ea0         db  0x8e ; '.'
0000000000000ea1         db  0x97 ; '.'
0000000000000ea2         db  0x00 ; '.'
0000000000000ea3         db  0x00 ; '.'
0000000000000ea4         db  0x00 ; '.'
0000000000000ea5         db  0x00 ; '.'
0000000000000ea6         db  0x00 ; '.'
0000000000000ea7         db  0x00 ; '.'
0000000000000ea8         db  0x00 ; '.'
0000000000000ea9         db  0xd9 ; '.'
0000000000000eaa         db  0x20 ; ' '
0000000000000eab         db  0x00 ; '.'
0000000000000eac         db  0x00 ; '.'
0000000000000ead         db  0x00 ; '.'
0000000000000eae         db  0x00 ; '.'
0000000000000eaf         db  0x00 ; '.'
0000000000000eb0         db  0x08 ; '.'
0000000000000eb1         db  0x00 ; '.'
0000000000000eb2         db  0x00 ; '.'
0000000000000eb3         db  0x00 ; '.'
0000000000000eb4         db  0x00 ; '.'
0000000000000eb5         db  0x00 ; '.'
0000000000000eb6         db  0x00 ; '.'
0000000000000eb7         db  0x00 ; '.'
0000000000000eb8         db  0x96 ; '.'
0000000000000eb9         db  0x97 ; '.'
0000000000000eba         db  0x00 ; '.'
0000000000000ebb         db  0x00 ; '.'
0000000000000ebc         db  0x00 ; '.'
0000000000000ebd         db  0x00 ; '.'
0000000000000ebe         db  0x00 ; '.'
0000000000000ebf         db  0x00 ; '.'
0000000000000ec0         db  0x20 ; ' '
0000000000000ec1         db  0xd9 ; '.'
0000000000000ec2         db  0x20 ; ' '
0000000000000ec3         db  0x00 ; '.'
0000000000000ec4         db  0x00 ; '.'
0000000000000ec5         db  0x00 ; '.'
0000000000000ec6         db  0x00 ; '.'
0000000000000ec7         db  0x00 ; '.'
0000000000000ec8         db  0x08 ; '.'
0000000000000ec9         db  0x00 ; '.'
0000000000000eca         db  0x00 ; '.'
0000000000000ecb         db  0x00 ; '.'
0000000000000ecc         db  0x00 ; '.'
0000000000000ecd         db  0x00 ; '.'
0000000000000ece         db  0x00 ; '.'
0000000000000ecf         db  0x00 ; '.'
0000000000000ed0         db  0x9d ; '.'
0000000000000ed1         db  0x97 ; '.'
0000000000000ed2         db  0x00 ; '.'
0000000000000ed3         db  0x00 ; '.'
0000000000000ed4         db  0x00 ; '.'
0000000000000ed5         db  0x00 ; '.'
0000000000000ed6         db  0x00 ; '.'
0000000000000ed7         db  0x00 ; '.'
0000000000000ed8         db  0x40 ; '@'
0000000000000ed9         db  0xd9 ; '.'
0000000000000eda         db  0x20 ; ' '
0000000000000edb         db  0x00 ; '.'
0000000000000edc         db  0x00 ; '.'
0000000000000edd         db  0x00 ; '.'
0000000000000ede         db  0x00 ; '.'
0000000000000edf         db  0x00 ; '.'
0000000000000ee0         db  0x08 ; '.'
0000000000000ee1         db  0x00 ; '.'
0000000000000ee2         db  0x00 ; '.'
0000000000000ee3         db  0x00 ; '.'
0000000000000ee4         db  0x00 ; '.'
0000000000000ee5         db  0x00 ; '.'
0000000000000ee6         db  0x00 ; '.'
0000000000000ee7         db  0x00 ; '.'
0000000000000ee8         db  0xa6 ; '.'
0000000000000ee9         db  0x97 ; '.'
0000000000000eea         db  0x00 ; '.'
0000000000000eeb         db  0x00 ; '.'
0000000000000eec         db  0x00 ; '.'
0000000000000eed         db  0x00 ; '.'
0000000000000eee         db  0x00 ; '.'
0000000000000eef         db  0x00 ; '.'
0000000000000ef0         db  0x60 ; '`'
0000000000000ef1         db  0xd9 ; '.'
0000000000000ef2         db  0x20 ; ' '
0000000000000ef3         db  0x00 ; '.'
0000000000000ef4         db  0x00 ; '.'
0000000000000ef5         db  0x00 ; '.'
0000000000000ef6         db  0x00 ; '.'
0000000000000ef7         db  0x00 ; '.'
0000000000000ef8         db  0x08 ; '.'
0000000000000ef9         db  0x00 ; '.'
0000000000000efa         db  0x00 ; '.'
0000000000000efb         db  0x00 ; '.'
0000000000000efc         db  0x00 ; '.'
0000000000000efd         db  0x00 ; '.'
0000000000000efe         db  0x00 ; '.'
0000000000000eff         db  0x00 ; '.'
0000000000000f00         db  0xb0 ; '.'
0000000000000f01         db  0x97 ; '.'
0000000000000f02         db  0x00 ; '.'
0000000000000f03         db  0x00 ; '.'
0000000000000f04         db  0x00 ; '.'
0000000000000f05         db  0x00 ; '.'
0000000000000f06         db  0x00 ; '.'
0000000000000f07         db  0x00 ; '.'
0000000000000f08         db  0x80 ; '.'
0000000000000f09         db  0xd9 ; '.'
0000000000000f0a         db  0x20 ; ' '
0000000000000f0b         db  0x00 ; '.'
0000000000000f0c         db  0x00 ; '.'
0000000000000f0d         db  0x00 ; '.'
0000000000000f0e         db  0x00 ; '.'
0000000000000f0f         db  0x00 ; '.'
0000000000000f10         db  0x08 ; '.'
0000000000000f11         db  0x00 ; '.'
0000000000000f12         db  0x00 ; '.'
0000000000000f13         db  0x00 ; '.'
0000000000000f14         db  0x00 ; '.'
0000000000000f15         db  0x00 ; '.'
0000000000000f16         db  0x00 ; '.'
0000000000000f17         db  0x00 ; '.'
0000000000000f18         db  0xb7 ; '.'
0000000000000f19         db  0x97 ; '.'
0000000000000f1a         db  0x00 ; '.'
0000000000000f1b         db  0x00 ; '.'
0000000000000f1c         db  0x00 ; '.'
0000000000000f1d         db  0x00 ; '.'
0000000000000f1e         db  0x00 ; '.'
0000000000000f1f         db  0x00 ; '.'
0000000000000f20         db  0xa0 ; '.'
0000000000000f21         db  0xd9 ; '.'
0000000000000f22         db  0x20 ; ' '
0000000000000f23         db  0x00 ; '.'
0000000000000f24         db  0x00 ; '.'
0000000000000f25         db  0x00 ; '.'
0000000000000f26         db  0x00 ; '.'
0000000000000f27         db  0x00 ; '.'
0000000000000f28         db  0x08 ; '.'
0000000000000f29         db  0x00 ; '.'
0000000000000f2a         db  0x00 ; '.'
0000000000000f2b         db  0x00 ; '.'
0000000000000f2c         db  0x00 ; '.'
0000000000000f2d         db  0x00 ; '.'
0000000000000f2e         db  0x00 ; '.'
0000000000000f2f         db  0x00 ; '.'
0000000000000f30         db  0xb6 ; '.'
0000000000000f31         db  0x97 ; '.'
0000000000000f32         db  0x00 ; '.'
0000000000000f33         db  0x00 ; '.'
0000000000000f34         db  0x00 ; '.'
0000000000000f35         db  0x00 ; '.'
0000000000000f36         db  0x00 ; '.'
0000000000000f37         db  0x00 ; '.'
0000000000000f38         db  0xc0 ; '.'
0000000000000f39         db  0xd9 ; '.'
0000000000000f3a         db  0x20 ; ' '
0000000000000f3b         db  0x00 ; '.'
0000000000000f3c         db  0x00 ; '.'
0000000000000f3d         db  0x00 ; '.'
0000000000000f3e         db  0x00 ; '.'
0000000000000f3f         db  0x00 ; '.'
0000000000000f40         db  0x08 ; '.'
0000000000000f41         db  0x00 ; '.'
0000000000000f42         db  0x00 ; '.'
0000000000000f43         db  0x00 ; '.'
0000000000000f44         db  0x00 ; '.'
0000000000000f45         db  0x00 ; '.'
0000000000000f46         db  0x00 ; '.'
0000000000000f47         db  0x00 ; '.'
0000000000000f48         db  0xbd ; '.'
0000000000000f49         db  0x97 ; '.'
0000000000000f4a         db  0x00 ; '.'
0000000000000f4b         db  0x00 ; '.'
0000000000000f4c         db  0x00 ; '.'
0000000000000f4d         db  0x00 ; '.'
0000000000000f4e         db  0x00 ; '.'
0000000000000f4f         db  0x00 ; '.'
0000000000000f50         db  0xe0 ; '.'
0000000000000f51         db  0xd9 ; '.'
0000000000000f52         db  0x20 ; ' '
0000000000000f53         db  0x00 ; '.'
0000000000000f54         db  0x00 ; '.'
0000000000000f55         db  0x00 ; '.'
0000000000000f56         db  0x00 ; '.'
0000000000000f57         db  0x00 ; '.'
0000000000000f58         db  0x08 ; '.'
0000000000000f59         db  0x00 ; '.'
0000000000000f5a         db  0x00 ; '.'
0000000000000f5b         db  0x00 ; '.'
0000000000000f5c         db  0x00 ; '.'
0000000000000f5d         db  0x00 ; '.'
0000000000000f5e         db  0x00 ; '.'
0000000000000f5f         db  0x00 ; '.'
0000000000000f60         db  0xc4 ; '.'
0000000000000f61         db  0x97 ; '.'
0000000000000f62         db  0x00 ; '.'
0000000000000f63         db  0x00 ; '.'
0000000000000f64         db  0x00 ; '.'
0000000000000f65         db  0x00 ; '.'
0000000000000f66         db  0x00 ; '.'
0000000000000f67         db  0x00 ; '.'
0000000000000f68         db  0x00 ; '.'
0000000000000f69         db  0xda ; '.'
0000000000000f6a         db  0x20 ; ' '
0000000000000f6b         db  0x00 ; '.'
0000000000000f6c         db  0x00 ; '.'
0000000000000f6d         db  0x00 ; '.'
0000000000000f6e         db  0x00 ; '.'
0000000000000f6f         db  0x00 ; '.'
0000000000000f70         db  0x08 ; '.'
0000000000000f71         db  0x00 ; '.'
0000000000000f72         db  0x00 ; '.'
0000000000000f73         db  0x00 ; '.'
0000000000000f74         db  0x00 ; '.'
0000000000000f75         db  0x00 ; '.'
0000000000000f76         db  0x00 ; '.'
0000000000000f77         db  0x00 ; '.'
0000000000000f78         db  0x09 ; '.'
0000000000000f79         db  0x97 ; '.'
0000000000000f7a         db  0x00 ; '.'
0000000000000f7b         db  0x00 ; '.'
0000000000000f7c         db  0x00 ; '.'
0000000000000f7d         db  0x00 ; '.'
0000000000000f7e         db  0x00 ; '.'
0000000000000f7f         db  0x00 ; '.'
0000000000000f80         db  0x20 ; ' '
0000000000000f81         db  0xda ; '.'
0000000000000f82         db  0x20 ; ' '
0000000000000f83         db  0x00 ; '.'
0000000000000f84         db  0x00 ; '.'
0000000000000f85         db  0x00 ; '.'
0000000000000f86         db  0x00 ; '.'
0000000000000f87         db  0x00 ; '.'
0000000000000f88         db  0x08 ; '.'
0000000000000f89         db  0x00 ; '.'
0000000000000f8a         db  0x00 ; '.'
0000000000000f8b         db  0x00 ; '.'
0000000000000f8c         db  0x00 ; '.'
0000000000000f8d         db  0x00 ; '.'
0000000000000f8e         db  0x00 ; '.'
0000000000000f8f         db  0x00 ; '.'
0000000000000f90         db  0xcb ; '.'
0000000000000f91         db  0x97 ; '.'
0000000000000f92         db  0x00 ; '.'
0000000000000f93         db  0x00 ; '.'
0000000000000f94         db  0x00 ; '.'
0000000000000f95         db  0x00 ; '.'
0000000000000f96         db  0x00 ; '.'
0000000000000f97         db  0x00 ; '.'
0000000000000f98         db  0x40 ; '@'
0000000000000f99         db  0xda ; '.'
0000000000000f9a         db  0x20 ; ' '
0000000000000f9b         db  0x00 ; '.'
0000000000000f9c         db  0x00 ; '.'
0000000000000f9d         db  0x00 ; '.'
0000000000000f9e         db  0x00 ; '.'
0000000000000f9f         db  0x00 ; '.'
0000000000000fa0         db  0x08 ; '.'
0000000000000fa1         db  0x00 ; '.'
0000000000000fa2         db  0x00 ; '.'
0000000000000fa3         db  0x00 ; '.'
0000000000000fa4         db  0x00 ; '.'
0000000000000fa5         db  0x00 ; '.'
0000000000000fa6         db  0x00 ; '.'
0000000000000fa7         db  0x00 ; '.'
0000000000000fa8         db  0xdb ; '.'
0000000000000fa9         db  0x97 ; '.'
0000000000000faa         db  0x00 ; '.'
0000000000000fab         db  0x00 ; '.'
0000000000000fac         db  0x00 ; '.'
0000000000000fad         db  0x00 ; '.'
0000000000000fae         db  0x00 ; '.'
0000000000000faf         db  0x00 ; '.'
0000000000000fb0         db  0x60 ; '`'
0000000000000fb1         db  0xda ; '.'
0000000000000fb2         db  0x20 ; ' '
0000000000000fb3         db  0x00 ; '.'
0000000000000fb4         db  0x00 ; '.'
0000000000000fb5         db  0x00 ; '.'
0000000000000fb6         db  0x00 ; '.'
0000000000000fb7         db  0x00 ; '.'
0000000000000fb8         db  0x08 ; '.'
0000000000000fb9         db  0x00 ; '.'
0000000000000fba         db  0x00 ; '.'
0000000000000fbb         db  0x00 ; '.'
0000000000000fbc         db  0x00 ; '.'
0000000000000fbd         db  0x00 ; '.'
0000000000000fbe         db  0x00 ; '.'
0000000000000fbf         db  0x00 ; '.'
0000000000000fc0         db  0xe0 ; '.'
0000000000000fc1         db  0x97 ; '.'
0000000000000fc2         db  0x00 ; '.'
0000000000000fc3         db  0x00 ; '.'
0000000000000fc4         db  0x00 ; '.'
0000000000000fc5         db  0x00 ; '.'
0000000000000fc6         db  0x00 ; '.'
0000000000000fc7         db  0x00 ; '.'
0000000000000fc8         db  0xa0 ; '.'
0000000000000fc9         db  0xda ; '.'
0000000000000fca         db  0x20 ; ' '
0000000000000fcb         db  0x00 ; '.'
0000000000000fcc         db  0x00 ; '.'
0000000000000fcd         db  0x00 ; '.'
0000000000000fce         db  0x00 ; '.'
0000000000000fcf         db  0x00 ; '.'
0000000000000fd0         db  0x08 ; '.'
0000000000000fd1         db  0x00 ; '.'
0000000000000fd2         db  0x00 ; '.'
0000000000000fd3         db  0x00 ; '.'
0000000000000fd4         db  0x00 ; '.'
0000000000000fd5         db  0x00 ; '.'
0000000000000fd6         db  0x00 ; '.'
0000000000000fd7         db  0x00 ; '.'
0000000000000fd8         db  0xe8 ; '.'
0000000000000fd9         db  0x97 ; '.'
0000000000000fda         db  0x00 ; '.'
0000000000000fdb         db  0x00 ; '.'
0000000000000fdc         db  0x00 ; '.'
0000000000000fdd         db  0x00 ; '.'
0000000000000fde         db  0x00 ; '.'
0000000000000fdf         db  0x00 ; '.'
0000000000000fe0         db  0xa8 ; '.'
0000000000000fe1         db  0xda ; '.'
0000000000000fe2         db  0x20 ; ' '
0000000000000fe3         db  0x00 ; '.'
0000000000000fe4         db  0x00 ; '.'
0000000000000fe5         db  0x00 ; '.'
0000000000000fe6         db  0x00 ; '.'
0000000000000fe7         db  0x00 ; '.'
0000000000000fe8         db  0x08 ; '.'
0000000000000fe9         db  0x00 ; '.'
0000000000000fea         db  0x00 ; '.'
0000000000000feb         db  0x00 ; '.'
0000000000000fec         db  0x00 ; '.'
0000000000000fed         db  0x00 ; '.'
0000000000000fee         db  0x00 ; '.'
0000000000000fef         db  0x00 ; '.'
0000000000000ff0         db  0xee ; '.'
0000000000000ff1         db  0x97 ; '.'
0000000000000ff2         db  0x00 ; '.'
0000000000000ff3         db  0x00 ; '.'
0000000000000ff4         db  0x00 ; '.'
0000000000000ff5         db  0x00 ; '.'
0000000000000ff6         db  0x00 ; '.'
0000000000000ff7         db  0x00 ; '.'
0000000000000ff8         db  0xb0 ; '.'
0000000000000ff9         db  0xda ; '.'
0000000000000ffa         db  0x20 ; ' '
0000000000000ffb         db  0x00 ; '.'
0000000000000ffc         db  0x00 ; '.'
0000000000000ffd         db  0x00 ; '.'
0000000000000ffe         db  0x00 ; '.'
0000000000000fff         db  0x00 ; '.'
0000000000001000         db  0x08 ; '.'
0000000000001001         db  0x00 ; '.'
0000000000001002         db  0x00 ; '.'
0000000000001003         db  0x00 ; '.'
0000000000001004         db  0x00 ; '.'
0000000000001005         db  0x00 ; '.'
0000000000001006         db  0x00 ; '.'
0000000000001007         db  0x00 ; '.'
0000000000001008         db  0xf3 ; '.'
0000000000001009         db  0x97 ; '.'
000000000000100a         db  0x00 ; '.'
000000000000100b         db  0x00 ; '.'
000000000000100c         db  0x00 ; '.'
000000000000100d         db  0x00 ; '.'
000000000000100e         db  0x00 ; '.'
000000000000100f         db  0x00 ; '.'
0000000000001010         db  0xb8 ; '.'
0000000000001011         db  0xda ; '.'
0000000000001012         db  0x20 ; ' '
0000000000001013         db  0x00 ; '.'
0000000000001014         db  0x00 ; '.'
0000000000001015         db  0x00 ; '.'
0000000000001016         db  0x00 ; '.'
0000000000001017         db  0x00 ; '.'
0000000000001018         db  0x08 ; '.'
0000000000001019         db  0x00 ; '.'
000000000000101a         db  0x00 ; '.'
000000000000101b         db  0x00 ; '.'
000000000000101c         db  0x00 ; '.'
000000000000101d         db  0x00 ; '.'
000000000000101e         db  0x00 ; '.'
000000000000101f         db  0x00 ; '.'
0000000000001020         db  0xf8 ; '.'
0000000000001021         db  0x97 ; '.'
0000000000001022         db  0x00 ; '.'
0000000000001023         db  0x00 ; '.'
0000000000001024         db  0x00 ; '.'
0000000000001025         db  0x00 ; '.'
0000000000001026         db  0x00 ; '.'
0000000000001027         db  0x00 ; '.'
0000000000001028         db  0xe0 ; '.'
0000000000001029         db  0xda ; '.'
000000000000102a         db  0x20 ; ' '
000000000000102b         db  0x00 ; '.'
000000000000102c         db  0x00 ; '.'
000000000000102d         db  0x00 ; '.'
000000000000102e         db  0x00 ; '.'
000000000000102f         db  0x00 ; '.'
0000000000001030         db  0x08 ; '.'
0000000000001031         db  0x00 ; '.'
0000000000001032         db  0x00 ; '.'
0000000000001033         db  0x00 ; '.'
0000000000001034         db  0x00 ; '.'
0000000000001035         db  0x00 ; '.'
0000000000001036         db  0x00 ; '.'
0000000000001037         db  0x00 ; '.'
0000000000001038         db  0xff ; '.'
0000000000001039         db  0x97 ; '.'
000000000000103a         db  0x00 ; '.'
000000000000103b         db  0x00 ; '.'
000000000000103c         db  0x00 ; '.'
000000000000103d         db  0x00 ; '.'
000000000000103e         db  0x00 ; '.'
000000000000103f         db  0x00 ; '.'
0000000000001040         db  0xe8 ; '.'
0000000000001041         db  0xda ; '.'
0000000000001042         db  0x20 ; ' '
0000000000001043         db  0x00 ; '.'
0000000000001044         db  0x00 ; '.'
0000000000001045         db  0x00 ; '.'
0000000000001046         db  0x00 ; '.'
0000000000001047         db  0x00 ; '.'
0000000000001048         db  0x08 ; '.'
0000000000001049         db  0x00 ; '.'
000000000000104a         db  0x00 ; '.'
000000000000104b         db  0x00 ; '.'
000000000000104c         db  0x00 ; '.'
000000000000104d         db  0x00 ; '.'
000000000000104e         db  0x00 ; '.'
000000000000104f         db  0x00 ; '.'
0000000000001050         db  0x02 ; '.'
0000000000001051         db  0x98 ; '.'
0000000000001052         db  0x00 ; '.'
0000000000001053         db  0x00 ; '.'
0000000000001054         db  0x00 ; '.'
0000000000001055         db  0x00 ; '.'
0000000000001056         db  0x00 ; '.'
0000000000001057         db  0x00 ; '.'
0000000000001058         db  0xf0 ; '.'
0000000000001059         db  0xda ; '.'
000000000000105a         db  0x20 ; ' '
000000000000105b         db  0x00 ; '.'
000000000000105c         db  0x00 ; '.'
000000000000105d         db  0x00 ; '.'
000000000000105e         db  0x00 ; '.'
000000000000105f         db  0x00 ; '.'
0000000000001060         db  0x08 ; '.'
0000000000001061         db  0x00 ; '.'
0000000000001062         db  0x00 ; '.'
0000000000001063         db  0x00 ; '.'
0000000000001064         db  0x00 ; '.'
0000000000001065         db  0x00 ; '.'
0000000000001066         db  0x00 ; '.'
0000000000001067         db  0x00 ; '.'
0000000000001068         db  0x07 ; '.'
0000000000001069         db  0x98 ; '.'
000000000000106a         db  0x00 ; '.'
000000000000106b         db  0x00 ; '.'
000000000000106c         db  0x00 ; '.'
000000000000106d         db  0x00 ; '.'
000000000000106e         db  0x00 ; '.'
000000000000106f         db  0x00 ; '.'
0000000000001070         db  0xf8 ; '.'
0000000000001071         db  0xda ; '.'
0000000000001072         db  0x20 ; ' '
0000000000001073         db  0x00 ; '.'
0000000000001074         db  0x00 ; '.'
0000000000001075         db  0x00 ; '.'
0000000000001076         db  0x00 ; '.'
0000000000001077         db  0x00 ; '.'
0000000000001078         db  0x08 ; '.'
0000000000001079         db  0x00 ; '.'
000000000000107a         db  0x00 ; '.'
000000000000107b         db  0x00 ; '.'
000000000000107c         db  0x00 ; '.'
000000000000107d         db  0x00 ; '.'
000000000000107e         db  0x00 ; '.'
000000000000107f         db  0x00 ; '.'
0000000000001080         db  0x11 ; '.'
0000000000001081         db  0x98 ; '.'
0000000000001082         db  0x00 ; '.'
0000000000001083         db  0x00 ; '.'
0000000000001084         db  0x00 ; '.'
0000000000001085         db  0x00 ; '.'
0000000000001086         db  0x00 ; '.'
0000000000001087         db  0x00 ; '.'
0000000000001088         db  0x00 ; '.'
0000000000001089         db  0xdb ; '.'
000000000000108a         db  0x20 ; ' '
000000000000108b         db  0x00 ; '.'
000000000000108c         db  0x00 ; '.'
000000000000108d         db  0x00 ; '.'
000000000000108e         db  0x00 ; '.'
000000000000108f         db  0x00 ; '.'
0000000000001090         db  0x08 ; '.'
0000000000001091         db  0x00 ; '.'
0000000000001092         db  0x00 ; '.'
0000000000001093         db  0x00 ; '.'
0000000000001094         db  0x00 ; '.'
0000000000001095         db  0x00 ; '.'
0000000000001096         db  0x00 ; '.'
0000000000001097         db  0x00 ; '.'
0000000000001098         db  0x1e ; '.'
0000000000001099         db  0x98 ; '.'
000000000000109a         db  0x00 ; '.'
000000000000109b         db  0x00 ; '.'
000000000000109c         db  0x00 ; '.'
000000000000109d         db  0x00 ; '.'
000000000000109e         db  0x00 ; '.'
000000000000109f         db  0x00 ; '.'
00000000000010a0         db  0x20 ; ' '
00000000000010a1         db  0xdb ; '.'
00000000000010a2         db  0x20 ; ' '
00000000000010a3         db  0x00 ; '.'
00000000000010a4         db  0x00 ; '.'
00000000000010a5         db  0x00 ; '.'
00000000000010a6         db  0x00 ; '.'
00000000000010a7         db  0x00 ; '.'
00000000000010a8         db  0x08 ; '.'
00000000000010a9         db  0x00 ; '.'
00000000000010aa         db  0x00 ; '.'
00000000000010ab         db  0x00 ; '.'
00000000000010ac         db  0x00 ; '.'
00000000000010ad         db  0x00 ; '.'
00000000000010ae         db  0x00 ; '.'
00000000000010af         db  0x00 ; '.'
00000000000010b0         db  0x26 ; '&'
00000000000010b1         db  0x98 ; '.'
00000000000010b2         db  0x00 ; '.'
00000000000010b3         db  0x00 ; '.'
00000000000010b4         db  0x00 ; '.'
00000000000010b5         db  0x00 ; '.'
00000000000010b6         db  0x00 ; '.'
00000000000010b7         db  0x00 ; '.'
00000000000010b8         db  0x28 ; '('
00000000000010b9         db  0xdb ; '.'
00000000000010ba         db  0x20 ; ' '
00000000000010bb         db  0x00 ; '.'
00000000000010bc         db  0x00 ; '.'
00000000000010bd         db  0x00 ; '.'
00000000000010be         db  0x00 ; '.'
00000000000010bf         db  0x00 ; '.'
00000000000010c0         db  0x08 ; '.'
00000000000010c1         db  0x00 ; '.'
00000000000010c2         db  0x00 ; '.'
00000000000010c3         db  0x00 ; '.'
00000000000010c4         db  0x00 ; '.'
00000000000010c5         db  0x00 ; '.'
00000000000010c6         db  0x00 ; '.'
00000000000010c7         db  0x00 ; '.'
00000000000010c8         db  0x2b ; '+'
00000000000010c9         db  0x98 ; '.'
00000000000010ca         db  0x00 ; '.'
00000000000010cb         db  0x00 ; '.'
00000000000010cc         db  0x00 ; '.'
00000000000010cd         db  0x00 ; '.'
00000000000010ce         db  0x00 ; '.'
00000000000010cf         db  0x00 ; '.'
00000000000010d0         db  0x30 ; '0'
00000000000010d1         db  0xdb ; '.'
00000000000010d2         db  0x20 ; ' '
00000000000010d3         db  0x00 ; '.'
00000000000010d4         db  0x00 ; '.'
00000000000010d5         db  0x00 ; '.'
00000000000010d6         db  0x00 ; '.'
00000000000010d7         db  0x00 ; '.'
00000000000010d8         db  0x08 ; '.'
00000000000010d9         db  0x00 ; '.'
00000000000010da         db  0x00 ; '.'
00000000000010db         db  0x00 ; '.'
00000000000010dc         db  0x00 ; '.'
00000000000010dd         db  0x00 ; '.'
00000000000010de         db  0x00 ; '.'
00000000000010df         db  0x00 ; '.'
00000000000010e0         db  0x2e ; '.'
00000000000010e1         db  0x98 ; '.'
00000000000010e2         db  0x00 ; '.'
00000000000010e3         db  0x00 ; '.'
00000000000010e4         db  0x00 ; '.'
00000000000010e5         db  0x00 ; '.'
00000000000010e6         db  0x00 ; '.'
00000000000010e7         db  0x00 ; '.'
00000000000010e8         db  0x38 ; '8'
00000000000010e9         db  0xdb ; '.'
00000000000010ea         db  0x20 ; ' '
00000000000010eb         db  0x00 ; '.'
00000000000010ec         db  0x00 ; '.'
00000000000010ed         db  0x00 ; '.'
00000000000010ee         db  0x00 ; '.'
00000000000010ef         db  0x00 ; '.'
00000000000010f0         db  0x08 ; '.'
00000000000010f1         db  0x00 ; '.'
00000000000010f2         db  0x00 ; '.'
00000000000010f3         db  0x00 ; '.'
00000000000010f4         db  0x00 ; '.'
00000000000010f5         db  0x00 ; '.'
00000000000010f6         db  0x00 ; '.'
00000000000010f7         db  0x00 ; '.'
00000000000010f8         db  0x32 ; '2'
00000000000010f9         db  0x98 ; '.'
00000000000010fa         db  0x00 ; '.'
00000000000010fb         db  0x00 ; '.'
00000000000010fc         db  0x00 ; '.'
00000000000010fd         db  0x00 ; '.'
00000000000010fe         db  0x00 ; '.'
00000000000010ff         db  0x00 ; '.'
0000000000001100         db  0x60 ; '`'
0000000000001101         db  0xdb ; '.'
0000000000001102         db  0x20 ; ' '
0000000000001103         db  0x00 ; '.'
0000000000001104         db  0x00 ; '.'
0000000000001105         db  0x00 ; '.'
0000000000001106         db  0x00 ; '.'
0000000000001107         db  0x00 ; '.'
0000000000001108         db  0x08 ; '.'
0000000000001109         db  0x00 ; '.'
000000000000110a         db  0x00 ; '.'
000000000000110b         db  0x00 ; '.'
000000000000110c         db  0x00 ; '.'
000000000000110d         db  0x00 ; '.'
000000000000110e         db  0x00 ; '.'
000000000000110f         db  0x00 ; '.'
0000000000001110         db  0x26 ; '&'
0000000000001111         db  0x98 ; '.'
0000000000001112         db  0x00 ; '.'
0000000000001113         db  0x00 ; '.'
0000000000001114         db  0x00 ; '.'
0000000000001115         db  0x00 ; '.'
0000000000001116         db  0x00 ; '.'
0000000000001117         db  0x00 ; '.'
0000000000001118         db  0x68 ; 'h'
0000000000001119         db  0xdb ; '.'
000000000000111a         db  0x20 ; ' '
000000000000111b         db  0x00 ; '.'
000000000000111c         db  0x00 ; '.'
000000000000111d         db  0x00 ; '.'
000000000000111e         db  0x00 ; '.'
000000000000111f         db  0x00 ; '.'
0000000000001120         db  0x08 ; '.'
0000000000001121         db  0x00 ; '.'
0000000000001122         db  0x00 ; '.'
0000000000001123         db  0x00 ; '.'
0000000000001124         db  0x00 ; '.'
0000000000001125         db  0x00 ; '.'
0000000000001126         db  0x00 ; '.'
0000000000001127         db  0x00 ; '.'
0000000000001128         db  0x38 ; '8'
0000000000001129         db  0x98 ; '.'
000000000000112a         db  0x00 ; '.'
000000000000112b         db  0x00 ; '.'
000000000000112c         db  0x00 ; '.'
000000000000112d         db  0x00 ; '.'
000000000000112e         db  0x00 ; '.'
000000000000112f         db  0x00 ; '.'
0000000000001130         db  0x70 ; 'p'
0000000000001131         db  0xdb ; '.'
0000000000001132         db  0x20 ; ' '
0000000000001133         db  0x00 ; '.'
0000000000001134         db  0x00 ; '.'
0000000000001135         db  0x00 ; '.'
0000000000001136         db  0x00 ; '.'
0000000000001137         db  0x00 ; '.'
0000000000001138         db  0x08 ; '.'
0000000000001139         db  0x00 ; '.'
000000000000113a         db  0x00 ; '.'
000000000000113b         db  0x00 ; '.'
000000000000113c         db  0x00 ; '.'
000000000000113d         db  0x00 ; '.'
000000000000113e         db  0x00 ; '.'
000000000000113f         db  0x00 ; '.'
0000000000001140         db  0x2b ; '+'
0000000000001141         db  0x98 ; '.'
0000000000001142         db  0x00 ; '.'
0000000000001143         db  0x00 ; '.'
0000000000001144         db  0x00 ; '.'
0000000000001145         db  0x00 ; '.'
0000000000001146         db  0x00 ; '.'
0000000000001147         db  0x00 ; '.'
0000000000001148         db  0x78 ; 'x'
0000000000001149         db  0xdb ; '.'
000000000000114a         db  0x20 ; ' '
000000000000114b         db  0x00 ; '.'
000000000000114c         db  0x00 ; '.'
000000000000114d         db  0x00 ; '.'
000000000000114e         db  0x00 ; '.'
000000000000114f         db  0x00 ; '.'
0000000000001150         db  0x08 ; '.'
0000000000001151         db  0x00 ; '.'
0000000000001152         db  0x00 ; '.'
0000000000001153         db  0x00 ; '.'
0000000000001154         db  0x00 ; '.'
0000000000001155         db  0x00 ; '.'
0000000000001156         db  0x00 ; '.'
0000000000001157         db  0x00 ; '.'
0000000000001158         db  0x2e ; '.'
0000000000001159         db  0x98 ; '.'
000000000000115a         db  0x00 ; '.'
000000000000115b         db  0x00 ; '.'
000000000000115c         db  0x00 ; '.'
000000000000115d         db  0x00 ; '.'
000000000000115e         db  0x00 ; '.'
000000000000115f         db  0x00 ; '.'
0000000000001160         db  0x80 ; '.'
0000000000001161         db  0xdb ; '.'
0000000000001162         db  0x20 ; ' '
0000000000001163         db  0x00 ; '.'
0000000000001164         db  0x00 ; '.'
0000000000001165         db  0x00 ; '.'
0000000000001166         db  0x00 ; '.'
0000000000001167         db  0x00 ; '.'
0000000000001168         db  0x08 ; '.'
0000000000001169         db  0x00 ; '.'
000000000000116a         db  0x00 ; '.'
000000000000116b         db  0x00 ; '.'
000000000000116c         db  0x00 ; '.'
000000000000116d         db  0x00 ; '.'
000000000000116e         db  0x00 ; '.'
000000000000116f         db  0x00 ; '.'
0000000000001170         db  0x32 ; '2'
0000000000001171         db  0x98 ; '.'
0000000000001172         db  0x00 ; '.'
0000000000001173         db  0x00 ; '.'
0000000000001174         db  0x00 ; '.'
0000000000001175         db  0x00 ; '.'
0000000000001176         db  0x00 ; '.'
0000000000001177         db  0x00 ; '.'
0000000000001178         db  0xa0 ; '.'
0000000000001179         db  0xdb ; '.'
000000000000117a         db  0x20 ; ' '
000000000000117b         db  0x00 ; '.'
000000000000117c         db  0x00 ; '.'
000000000000117d         db  0x00 ; '.'
000000000000117e         db  0x00 ; '.'
000000000000117f         db  0x00 ; '.'
0000000000001180         db  0x08 ; '.'
0000000000001181         db  0x00 ; '.'
0000000000001182         db  0x00 ; '.'
0000000000001183         db  0x00 ; '.'
0000000000001184         db  0x00 ; '.'
0000000000001185         db  0x00 ; '.'
0000000000001186         db  0x00 ; '.'
0000000000001187         db  0x00 ; '.'
0000000000001188         db  0x71 ; 'q'
0000000000001189         db  0xb4 ; '.'
000000000000118a         db  0x00 ; '.'
000000000000118b         db  0x00 ; '.'
000000000000118c         db  0x00 ; '.'
000000000000118d         db  0x00 ; '.'
000000000000118e         db  0x00 ; '.'
000000000000118f         db  0x00 ; '.'
0000000000001190         db  0xa8 ; '.'
0000000000001191         db  0xdb ; '.'
0000000000001192         db  0x20 ; ' '
0000000000001193         db  0x00 ; '.'
0000000000001194         db  0x00 ; '.'
0000000000001195         db  0x00 ; '.'
0000000000001196         db  0x00 ; '.'
0000000000001197         db  0x00 ; '.'
0000000000001198         db  0x08 ; '.'
0000000000001199         db  0x00 ; '.'
000000000000119a         db  0x00 ; '.'
000000000000119b         db  0x00 ; '.'
000000000000119c         db  0x00 ; '.'
000000000000119d         db  0x00 ; '.'
000000000000119e         db  0x00 ; '.'
000000000000119f         db  0x00 ; '.'
00000000000011a0         db  0x79 ; 'y'
00000000000011a1         db  0xb4 ; '.'
00000000000011a2         db  0x00 ; '.'
00000000000011a3         db  0x00 ; '.'
00000000000011a4         db  0x00 ; '.'
00000000000011a5         db  0x00 ; '.'
00000000000011a6         db  0x00 ; '.'
00000000000011a7         db  0x00 ; '.'
00000000000011a8         db  0xb0 ; '.'
00000000000011a9         db  0xdb ; '.'
00000000000011aa         db  0x20 ; ' '
00000000000011ab         db  0x00 ; '.'
00000000000011ac         db  0x00 ; '.'
00000000000011ad         db  0x00 ; '.'
00000000000011ae         db  0x00 ; '.'
00000000000011af         db  0x00 ; '.'
00000000000011b0         db  0x08 ; '.'
00000000000011b1         db  0x00 ; '.'
00000000000011b2         db  0x00 ; '.'
00000000000011b3         db  0x00 ; '.'
00000000000011b4         db  0x00 ; '.'
00000000000011b5         db  0x00 ; '.'
00000000000011b6         db  0x00 ; '.'
00000000000011b7         db  0x00 ; '.'
00000000000011b8         db  0x7f ; '.'
00000000000011b9         db  0xb4 ; '.'
00000000000011ba         db  0x00 ; '.'
00000000000011bb         db  0x00 ; '.'
00000000000011bc         db  0x00 ; '.'
00000000000011bd         db  0x00 ; '.'
00000000000011be         db  0x00 ; '.'
00000000000011bf         db  0x00 ; '.'
00000000000011c0         db  0xb8 ; '.'
00000000000011c1         db  0xdb ; '.'
00000000000011c2         db  0x20 ; ' '
00000000000011c3         db  0x00 ; '.'
00000000000011c4         db  0x00 ; '.'
00000000000011c5         db  0x00 ; '.'
00000000000011c6         db  0x00 ; '.'
00000000000011c7         db  0x00 ; '.'
00000000000011c8         db  0x08 ; '.'
00000000000011c9         db  0x00 ; '.'
00000000000011ca         db  0x00 ; '.'
00000000000011cb         db  0x00 ; '.'
00000000000011cc         db  0x00 ; '.'
00000000000011cd         db  0x00 ; '.'
00000000000011ce         db  0x00 ; '.'
00000000000011cf         db  0x00 ; '.'
00000000000011d0         db  0x8c ; '.'
00000000000011d1         db  0xb4 ; '.'
00000000000011d2         db  0x00 ; '.'
00000000000011d3         db  0x00 ; '.'
00000000000011d4         db  0x00 ; '.'
00000000000011d5         db  0x00 ; '.'
00000000000011d6         db  0x00 ; '.'
00000000000011d7         db  0x00 ; '.'
00000000000011d8         db  0xc0 ; '.'
00000000000011d9         db  0xdb ; '.'
00000000000011da         db  0x20 ; ' '
00000000000011db         db  0x00 ; '.'
00000000000011dc         db  0x00 ; '.'
00000000000011dd         db  0x00 ; '.'
00000000000011de         db  0x00 ; '.'
00000000000011df         db  0x00 ; '.'
00000000000011e0         db  0x08 ; '.'
00000000000011e1         db  0x00 ; '.'
00000000000011e2         db  0x00 ; '.'
00000000000011e3         db  0x00 ; '.'
00000000000011e4         db  0x00 ; '.'
00000000000011e5         db  0x00 ; '.'
00000000000011e6         db  0x00 ; '.'
00000000000011e7         db  0x00 ; '.'
00000000000011e8         db  0x99 ; '.'
00000000000011e9         db  0xb4 ; '.'
00000000000011ea         db  0x00 ; '.'
00000000000011eb         db  0x00 ; '.'
00000000000011ec         db  0x00 ; '.'
00000000000011ed         db  0x00 ; '.'
00000000000011ee         db  0x00 ; '.'
00000000000011ef         db  0x00 ; '.'
00000000000011f0         db  0xc8 ; '.'
00000000000011f1         db  0xdb ; '.'
00000000000011f2         db  0x20 ; ' '
00000000000011f3         db  0x00 ; '.'
00000000000011f4         db  0x00 ; '.'
00000000000011f5         db  0x00 ; '.'
00000000000011f6         db  0x00 ; '.'
00000000000011f7         db  0x00 ; '.'
00000000000011f8         db  0x08 ; '.'
00000000000011f9         db  0x00 ; '.'
00000000000011fa         db  0x00 ; '.'
00000000000011fb         db  0x00 ; '.'
00000000000011fc         db  0x00 ; '.'
00000000000011fd         db  0x00 ; '.'
00000000000011fe         db  0x00 ; '.'
00000000000011ff         db  0x00 ; '.'
0000000000001200         db  0x30 ; '0'
0000000000001201         db  0x98 ; '.'
0000000000001202         db  0x00 ; '.'
0000000000001203         db  0x00 ; '.'
0000000000001204         db  0x00 ; '.'
0000000000001205         db  0x00 ; '.'
0000000000001206         db  0x00 ; '.'
0000000000001207         db  0x00 ; '.'
0000000000001208         db  0xd0 ; '.'
0000000000001209         db  0xdb ; '.'
000000000000120a         db  0x20 ; ' '
000000000000120b         db  0x00 ; '.'
000000000000120c         db  0x00 ; '.'
000000000000120d         db  0x00 ; '.'
000000000000120e         db  0x00 ; '.'
000000000000120f         db  0x00 ; '.'
0000000000001210         db  0x08 ; '.'
0000000000001211         db  0x00 ; '.'
0000000000001212         db  0x00 ; '.'
0000000000001213         db  0x00 ; '.'
0000000000001214         db  0x00 ; '.'
0000000000001215         db  0x00 ; '.'
0000000000001216         db  0x00 ; '.'
0000000000001217         db  0x00 ; '.'
0000000000001218         db  0xad ; '.'
0000000000001219         db  0xb4 ; '.'
000000000000121a         db  0x00 ; '.'
000000000000121b         db  0x00 ; '.'
000000000000121c         db  0x00 ; '.'
000000000000121d         db  0x00 ; '.'
000000000000121e         db  0x00 ; '.'
000000000000121f         db  0x00 ; '.'
0000000000001220         db  0xd8 ; '.'
0000000000001221         db  0xdb ; '.'
0000000000001222         db  0x20 ; ' '
0000000000001223         db  0x00 ; '.'
0000000000001224         db  0x00 ; '.'
0000000000001225         db  0x00 ; '.'
0000000000001226         db  0x00 ; '.'
0000000000001227         db  0x00 ; '.'
0000000000001228         db  0x08 ; '.'
0000000000001229         db  0x00 ; '.'
000000000000122a         db  0x00 ; '.'
000000000000122b         db  0x00 ; '.'
000000000000122c         db  0x00 ; '.'
000000000000122d         db  0x00 ; '.'
000000000000122e         db  0x00 ; '.'
000000000000122f         db  0x00 ; '.'
0000000000001230         db  0x92 ; '.'
0000000000001231         db  0xb4 ; '.'
0000000000001232         db  0x00 ; '.'
0000000000001233         db  0x00 ; '.'
0000000000001234         db  0x00 ; '.'
0000000000001235         db  0x00 ; '.'
0000000000001236         db  0x00 ; '.'
0000000000001237         db  0x00 ; '.'
0000000000001238         db  0xe0 ; '.'
0000000000001239         db  0xdb ; '.'
000000000000123a         db  0x20 ; ' '
000000000000123b         db  0x00 ; '.'
000000000000123c         db  0x00 ; '.'
000000000000123d         db  0x00 ; '.'
000000000000123e         db  0x00 ; '.'
000000000000123f         db  0x00 ; '.'
0000000000001240         db  0x08 ; '.'
0000000000001241         db  0x00 ; '.'
0000000000001242         db  0x00 ; '.'
0000000000001243         db  0x00 ; '.'
0000000000001244         db  0x00 ; '.'
0000000000001245         db  0x00 ; '.'
0000000000001246         db  0x00 ; '.'
0000000000001247         db  0x00 ; '.'
0000000000001248         db  0x2c ; ','
0000000000001249         db  0x97 ; '.'
000000000000124a         db  0x00 ; '.'
000000000000124b         db  0x00 ; '.'
000000000000124c         db  0x00 ; '.'
000000000000124d         db  0x00 ; '.'
000000000000124e         db  0x00 ; '.'
000000000000124f         db  0x00 ; '.'
0000000000001250         db  0xe8 ; '.'
0000000000001251         db  0xdb ; '.'
0000000000001252         db  0x20 ; ' '
0000000000001253         db  0x00 ; '.'
0000000000001254         db  0x00 ; '.'
0000000000001255         db  0x00 ; '.'
0000000000001256         db  0x00 ; '.'
0000000000001257         db  0x00 ; '.'
0000000000001258         db  0x08 ; '.'
0000000000001259         db  0x00 ; '.'
000000000000125a         db  0x00 ; '.'
000000000000125b         db  0x00 ; '.'
000000000000125c         db  0x00 ; '.'
000000000000125d         db  0x00 ; '.'
000000000000125e         db  0x00 ; '.'
000000000000125f         db  0x00 ; '.'
0000000000001260         db  0xb5 ; '.'
0000000000001261         db  0xb4 ; '.'
0000000000001262         db  0x00 ; '.'
0000000000001263         db  0x00 ; '.'
0000000000001264         db  0x00 ; '.'
0000000000001265         db  0x00 ; '.'
0000000000001266         db  0x00 ; '.'
0000000000001267         db  0x00 ; '.'
0000000000001268         db  0x08 ; '.'
0000000000001269         db  0xe0 ; '.'
000000000000126a         db  0x20 ; ' '
000000000000126b         db  0x00 ; '.'
000000000000126c         db  0x00 ; '.'
000000000000126d         db  0x00 ; '.'
000000000000126e         db  0x00 ; '.'
000000000000126f         db  0x00 ; '.'
0000000000001270         db  0x08 ; '.'
0000000000001271         db  0x00 ; '.'
0000000000001272         db  0x00 ; '.'
0000000000001273         db  0x00 ; '.'
0000000000001274         db  0x00 ; '.'
0000000000001275         db  0x00 ; '.'
0000000000001276         db  0x00 ; '.'
0000000000001277         db  0x00 ; '.'
0000000000001278         db  0x08 ; '.'
0000000000001279         db  0xe0 ; '.'
000000000000127a         db  0x20 ; ' '
000000000000127b         db  0x00 ; '.'
000000000000127c         db  0x00 ; '.'
000000000000127d         db  0x00 ; '.'
000000000000127e         db  0x00 ; '.'
000000000000127f         db  0x00 ; '.'
0000000000001280         db  0x40 ; '@'
0000000000001281         db  0xe0 ; '.'
0000000000001282         db  0x20 ; ' '
0000000000001283         db  0x00 ; '.'
0000000000001284         db  0x00 ; '.'
0000000000001285         db  0x00 ; '.'
0000000000001286         db  0x00 ; '.'
0000000000001287         db  0x00 ; '.'
0000000000001288         db  0x08 ; '.'
0000000000001289         db  0x00 ; '.'
000000000000128a         db  0x00 ; '.'
000000000000128b         db  0x00 ; '.'
000000000000128c         db  0x00 ; '.'
000000000000128d         db  0x00 ; '.'
000000000000128e         db  0x00 ; '.'
000000000000128f         db  0x00 ; '.'
0000000000001290         db  0xa1 ; '.'
0000000000001291         db  0xb3 ; '.'
0000000000001292         db  0x00 ; '.'
0000000000001293         db  0x00 ; '.'
0000000000001294         db  0x00 ; '.'
0000000000001295         db  0x00 ; '.'
0000000000001296         db  0x00 ; '.'
0000000000001297         db  0x00 ; '.'
0000000000001298         db  0x48 ; 'H'
0000000000001299         db  0xe0 ; '.'
000000000000129a         db  0x20 ; ' '
000000000000129b         db  0x00 ; '.'
000000000000129c         db  0x00 ; '.'
000000000000129d         db  0x00 ; '.'
000000000000129e         db  0x00 ; '.'
000000000000129f         db  0x00 ; '.'
00000000000012a0         db  0x08 ; '.'
00000000000012a1         db  0x00 ; '.'
00000000000012a2         db  0x00 ; '.'
00000000000012a3         db  0x00 ; '.'
00000000000012a4         db  0x00 ; '.'
00000000000012a5         db  0x00 ; '.'
00000000000012a6         db  0x00 ; '.'
00000000000012a7         db  0x00 ; '.'
00000000000012a8         db  0x70 ; 'p'
00000000000012a9         db  0x57 ; 'W'
00000000000012aa         db  0x00 ; '.'
00000000000012ab         db  0x00 ; '.'
00000000000012ac         db  0x00 ; '.'
00000000000012ad         db  0x00 ; '.'
00000000000012ae         db  0x00 ; '.'
00000000000012af         db  0x00 ; '.'
00000000000012b0         db  0xa0 ; '.'
00000000000012b1         db  0xe0 ; '.'
00000000000012b2         db  0x20 ; ' '
00000000000012b3         db  0x00 ; '.'
00000000000012b4         db  0x00 ; '.'
00000000000012b5         db  0x00 ; '.'
00000000000012b6         db  0x00 ; '.'
00000000000012b7         db  0x00 ; '.'
00000000000012b8         db  0x08 ; '.'
00000000000012b9         db  0x00 ; '.'
00000000000012ba         db  0x00 ; '.'
00000000000012bb         db  0x00 ; '.'
00000000000012bc         db  0x00 ; '.'
00000000000012bd         db  0x00 ; '.'
00000000000012be         db  0x00 ; '.'
00000000000012bf         db  0x00 ; '.'
00000000000012c0         db  0xb0 ; '.'
00000000000012c1         db  0xe0 ; '.'
00000000000012c2         db  0x20 ; ' '
00000000000012c3         db  0x00 ; '.'
00000000000012c4         db  0x00 ; '.'
00000000000012c5         db  0x00 ; '.'
00000000000012c6         db  0x00 ; '.'
00000000000012c7         db  0x00 ; '.'
00000000000012c8         db  0xb8 ; '.'
00000000000012c9         db  0xe0 ; '.'
00000000000012ca         db  0x20 ; ' '
00000000000012cb         db  0x00 ; '.'
00000000000012cc         db  0x00 ; '.'
00000000000012cd         db  0x00 ; '.'
00000000000012ce         db  0x00 ; '.'
00000000000012cf         db  0x00 ; '.'
00000000000012d0         db  0x08 ; '.'
00000000000012d1         db  0x00 ; '.'
00000000000012d2         db  0x00 ; '.'
00000000000012d3         db  0x00 ; '.'
00000000000012d4         db  0x00 ; '.'
00000000000012d5         db  0x00 ; '.'
00000000000012d6         db  0x00 ; '.'
00000000000012d7         db  0x00 ; '.'
00000000000012d8         db  0xc0 ; '.'
00000000000012d9         db  0xe1 ; '.'
00000000000012da         db  0x20 ; ' '
00000000000012db         db  0x00 ; '.'
00000000000012dc         db  0x00 ; '.'
00000000000012dd         db  0x00 ; '.'
00000000000012de         db  0x00 ; '.'
00000000000012df         db  0x00 ; '.'
00000000000012e0         db  0xd0 ; '.'
00000000000012e1         db  0xdf ; '.'
00000000000012e2         db  0x20 ; ' '
00000000000012e3         db  0x00 ; '.'
00000000000012e4         db  0x00 ; '.'
00000000000012e5         db  0x00 ; '.'
00000000000012e6         db  0x00 ; '.'
00000000000012e7         db  0x00 ; '.'
00000000000012e8         db  0x06 ; '.'
00000000000012e9         db  0x00 ; '.'
00000000000012ea         db  0x00 ; '.'
00000000000012eb         db  0x00 ; '.'
00000000000012ec         db  0x06 ; '.'
00000000000012ed         db  0x00 ; '.'
00000000000012ee         db  0x00 ; '.'
00000000000012ef         db  0x00 ; '.'
00000000000012f0         db  0x00 ; '.'
00000000000012f1         db  0x00 ; '.'
00000000000012f2         db  0x00 ; '.'
00000000000012f3         db  0x00 ; '.'
00000000000012f4         db  0x00 ; '.'
00000000000012f5         db  0x00 ; '.'
00000000000012f6         db  0x00 ; '.'
00000000000012f7         db  0x00 ; '.'
00000000000012f8         db  0xd8 ; '.'
00000000000012f9         db  0xdf ; '.'
00000000000012fa         db  0x20 ; ' '
00000000000012fb         db  0x00 ; '.'
00000000000012fc         db  0x00 ; '.'
00000000000012fd         db  0x00 ; '.'
00000000000012fe         db  0x00 ; '.'
00000000000012ff         db  0x00 ; '.'
0000000000001300         db  0x06 ; '.'
0000000000001301         db  0x00 ; '.'
0000000000001302         db  0x00 ; '.'
0000000000001303         db  0x00 ; '.'
0000000000001304         db  0x1f ; '.'
0000000000001305         db  0x00 ; '.'
0000000000001306         db  0x00 ; '.'
0000000000001307         db  0x00 ; '.'
0000000000001308         db  0x00 ; '.'
0000000000001309         db  0x00 ; '.'
000000000000130a         db  0x00 ; '.'
000000000000130b         db  0x00 ; '.'
000000000000130c         db  0x00 ; '.'
000000000000130d         db  0x00 ; '.'
000000000000130e         db  0x00 ; '.'
000000000000130f         db  0x00 ; '.'
0000000000001310         db  0xe0 ; '.'
0000000000001311         db  0xdf ; '.'
0000000000001312         db  0x20 ; ' '
0000000000001313         db  0x00 ; '.'
0000000000001314         db  0x00 ; '.'
0000000000001315         db  0x00 ; '.'
0000000000001316         db  0x00 ; '.'
0000000000001317         db  0x00 ; '.'
0000000000001318         db  0x06 ; '.'
0000000000001319         db  0x00 ; '.'
000000000000131a         db  0x00 ; '.'
000000000000131b         db  0x00 ; '.'
000000000000131c         db  0x24 ; '$'
000000000000131d         db  0x00 ; '.'
000000000000131e         db  0x00 ; '.'
000000000000131f         db  0x00 ; '.'
0000000000001320         db  0x00 ; '.'
0000000000001321         db  0x00 ; '.'
0000000000001322         db  0x00 ; '.'
0000000000001323         db  0x00 ; '.'
0000000000001324         db  0x00 ; '.'
0000000000001325         db  0x00 ; '.'
0000000000001326         db  0x00 ; '.'
0000000000001327         db  0x00 ; '.'
0000000000001328         db  0xe8 ; '.'
0000000000001329         db  0xdf ; '.'
000000000000132a         db  0x20 ; ' '
000000000000132b         db  0x00 ; '.'
000000000000132c         db  0x00 ; '.'
000000000000132d         db  0x00 ; '.'
000000000000132e         db  0x00 ; '.'
000000000000132f         db  0x00 ; '.'
0000000000001330         db  0x06 ; '.'
0000000000001331         db  0x00 ; '.'
0000000000001332         db  0x00 ; '.'
0000000000001333         db  0x00 ; '.'
0000000000001334         db  0x3a ; ':'
0000000000001335         db  0x00 ; '.'
0000000000001336         db  0x00 ; '.'
0000000000001337         db  0x00 ; '.'
0000000000001338         db  0x00 ; '.'
0000000000001339         db  0x00 ; '.'
000000000000133a         db  0x00 ; '.'
000000000000133b         db  0x00 ; '.'
000000000000133c         db  0x00 ; '.'
000000000000133d         db  0x00 ; '.'
000000000000133e         db  0x00 ; '.'
000000000000133f         db  0x00 ; '.'
0000000000001340         db  0xf0 ; '.'
0000000000001341         db  0xdf ; '.'
0000000000001342         db  0x20 ; ' '
0000000000001343         db  0x00 ; '.'
0000000000001344         db  0x00 ; '.'
0000000000001345         db  0x00 ; '.'
0000000000001346         db  0x00 ; '.'
0000000000001347         db  0x00 ; '.'
0000000000001348         db  0x06 ; '.'
0000000000001349         db  0x00 ; '.'
000000000000134a         db  0x00 ; '.'
000000000000134b         db  0x00 ; '.'
000000000000134c         db  0x3d ; '='
000000000000134d         db  0x00 ; '.'
000000000000134e         db  0x00 ; '.'
000000000000134f         db  0x00 ; '.'
0000000000001350         db  0x00 ; '.'
0000000000001351         db  0x00 ; '.'
0000000000001352         db  0x00 ; '.'
0000000000001353         db  0x00 ; '.'
0000000000001354         db  0x00 ; '.'
0000000000001355         db  0x00 ; '.'
0000000000001356         db  0x00 ; '.'
0000000000001357         db  0x00 ; '.'
0000000000001358         db  0xc0 ; '.'
0000000000001359         db  0xe0 ; '.'
000000000000135a         db  0x20 ; ' '
000000000000135b         db  0x00 ; '.'
000000000000135c         db  0x00 ; '.'
000000000000135d         db  0x00 ; '.'
000000000000135e         db  0x00 ; '.'
000000000000135f         db  0x00 ; '.'
0000000000001360         db  0x05 ; '.'
0000000000001361         db  0x00 ; '.'
0000000000001362         db  0x00 ; '.'
0000000000001363         db  0x00 ; '.'
0000000000001364         db  0x41 ; 'A'
0000000000001365         db  0x00 ; '.'
0000000000001366         db  0x00 ; '.'
0000000000001367         db  0x00 ; '.'
0000000000001368         db  0x00 ; '.'
0000000000001369         db  0x00 ; '.'
000000000000136a         db  0x00 ; '.'
000000000000136b         db  0x00 ; '.'
000000000000136c         db  0x00 ; '.'
000000000000136d         db  0x00 ; '.'
000000000000136e         db  0x00 ; '.'
000000000000136f         db  0x00 ; '.'
0000000000001370         db  0xc8 ; '.'
0000000000001371         db  0xe0 ; '.'
0000000000001372         db  0x20 ; ' '
0000000000001373         db  0x00 ; '.'
0000000000001374         db  0x00 ; '.'
0000000000001375         db  0x00 ; '.'
0000000000001376         db  0x00 ; '.'
0000000000001377         db  0x00 ; '.'
0000000000001378         db  0x05 ; '.'
0000000000001379         db  0x00 ; '.'
000000000000137a         db  0x00 ; '.'
000000000000137b         db  0x00 ; '.'
000000000000137c         db  0x40 ; '@'
000000000000137d         db  0x00 ; '.'
000000000000137e         db  0x00 ; '.'
000000000000137f         db  0x00 ; '.'
0000000000001380         db  0x00 ; '.'
0000000000001381         db  0x00 ; '.'
0000000000001382         db  0x00 ; '.'
0000000000001383         db  0x00 ; '.'
0000000000001384         db  0x00 ; '.'
0000000000001385         db  0x00 ; '.'
0000000000001386         db  0x00 ; '.'
0000000000001387         db  0x00 ; '.'
0000000000001388         db  0xd0 ; '.'
0000000000001389         db  0xe0 ; '.'
000000000000138a         db  0x20 ; ' '
000000000000138b         db  0x00 ; '.'
000000000000138c         db  0x00 ; '.'
000000000000138d         db  0x00 ; '.'
000000000000138e         db  0x00 ; '.'
000000000000138f         db  0x00 ; '.'
0000000000001390         db  0x05 ; '.'
0000000000001391         db  0x00 ; '.'
0000000000001392         db  0x00 ; '.'
0000000000001393         db  0x00 ; '.'
0000000000001394         db  0x42 ; 'B'
0000000000001395         db  0x00 ; '.'
0000000000001396         db  0x00 ; '.'
0000000000001397         db  0x00 ; '.'
0000000000001398         db  0x00 ; '.'
0000000000001399         db  0x00 ; '.'
000000000000139a         db  0x00 ; '.'
000000000000139b         db  0x00 ; '.'
000000000000139c         db  0x00 ; '.'
000000000000139d         db  0x00 ; '.'
000000000000139e         db  0x00 ; '.'
000000000000139f         db  0x00 ; '.'
00000000000013a0         db  0xd8 ; '.'
00000000000013a1         db  0xe0 ; '.'
00000000000013a2         db  0x20 ; ' '
00000000000013a3         db  0x00 ; '.'
00000000000013a4         db  0x00 ; '.'
00000000000013a5         db  0x00 ; '.'
00000000000013a6         db  0x00 ; '.'
00000000000013a7         db  0x00 ; '.'
00000000000013a8         db  0x05 ; '.'
00000000000013a9         db  0x00 ; '.'
00000000000013aa         db  0x00 ; '.'
00000000000013ab         db  0x00 ; '.'
00000000000013ac         db  0x47 ; 'G'
00000000000013ad         db  0x00 ; '.'
00000000000013ae         db  0x00 ; '.'
00000000000013af         db  0x00 ; '.'
00000000000013b0         db  0x00 ; '.'
00000000000013b1         db  0x00 ; '.'
00000000000013b2         db  0x00 ; '.'
00000000000013b3         db  0x00 ; '.'
00000000000013b4         db  0x00 ; '.'
00000000000013b5         db  0x00 ; '.'
00000000000013b6         db  0x00 ; '.'
00000000000013b7         db  0x00 ; '.'
00000000000013b8         db  0xe0 ; '.'
00000000000013b9         db  0xe0 ; '.'
00000000000013ba         db  0x20 ; ' '
00000000000013bb         db  0x00 ; '.'
00000000000013bc         db  0x00 ; '.'
00000000000013bd         db  0x00 ; '.'
00000000000013be         db  0x00 ; '.'
00000000000013bf         db  0x00 ; '.'
00000000000013c0         db  0x05 ; '.'
00000000000013c1         db  0x00 ; '.'
00000000000013c2         db  0x00 ; '.'
00000000000013c3         db  0x00 ; '.'
00000000000013c4         db  0x48 ; 'H'
00000000000013c5         db  0x00 ; '.'
00000000000013c6         db  0x00 ; '.'
00000000000013c7         db  0x00 ; '.'
00000000000013c8         db  0x00 ; '.'
00000000000013c9         db  0x00 ; '.'
00000000000013ca         db  0x00 ; '.'
00000000000013cb         db  0x00 ; '.'
00000000000013cc         db  0x00 ; '.'
00000000000013cd         db  0x00 ; '.'
00000000000013ce         db  0x00 ; '.'
00000000000013cf         db  0x00 ; '.'
00000000000013d0         db  0xe8 ; '.'
00000000000013d1         db  0xe0 ; '.'
00000000000013d2         db  0x20 ; ' '
00000000000013d3         db  0x00 ; '.'
00000000000013d4         db  0x00 ; '.'
00000000000013d5         db  0x00 ; '.'
00000000000013d6         db  0x00 ; '.'
00000000000013d7         db  0x00 ; '.'
00000000000013d8         db  0x05 ; '.'
00000000000013d9         db  0x00 ; '.'
00000000000013da         db  0x00 ; '.'
00000000000013db         db  0x00 ; '.'
00000000000013dc         db  0x44 ; 'D'
00000000000013dd         db  0x00 ; '.'
00000000000013de         db  0x00 ; '.'
00000000000013df         db  0x00 ; '.'
00000000000013e0         db  0x00 ; '.'
00000000000013e1         db  0x00 ; '.'
00000000000013e2         db  0x00 ; '.'
00000000000013e3         db  0x00 ; '.'
00000000000013e4         db  0x00 ; '.'
00000000000013e5         db  0x00 ; '.'
00000000000013e6         db  0x00 ; '.'
00000000000013e7         db  0x00 ; '.'
00000000000013e8         db  0x00 ; '.'
00000000000013e9         db  0xe1 ; '.'
00000000000013ea         db  0x20 ; ' '
00000000000013eb         db  0x00 ; '.'
00000000000013ec         db  0x00 ; '.'
00000000000013ed         db  0x00 ; '.'
00000000000013ee         db  0x00 ; '.'
00000000000013ef         db  0x00 ; '.'
00000000000013f0         db  0x05 ; '.'
00000000000013f1         db  0x00 ; '.'
00000000000013f2         db  0x00 ; '.'
00000000000013f3         db  0x00 ; '.'
00000000000013f4         db  0x46 ; 'F'
00000000000013f5         db  0x00 ; '.'
00000000000013f6         db  0x00 ; '.'
00000000000013f7         db  0x00 ; '.'
00000000000013f8         db  0x00 ; '.'
00000000000013f9         db  0x00 ; '.'
00000000000013fa         db  0x00 ; '.'
00000000000013fb         db  0x00 ; '.'
00000000000013fc         db  0x00 ; '.'
00000000000013fd         db  0x00 ; '.'
00000000000013fe         db  0x00 ; '.'
00000000000013ff         db  0x00 ; '.'


        ; Section .rela.plt
        ; Range: [0x1400; 0x1970[ (1392 bytes)
        ; File offset : [5120; 6512[ (1392 bytes)
        ; Flags: 0x42
        ;   SHT_RELA
        ;   SHF_ALLOC

0000000000001400         db  0x00 ; '.'
0000000000001401         db  0xde ; '.'
0000000000001402         db  0x20 ; ' '
0000000000001403         db  0x00 ; '.'
0000000000001404         db  0x00 ; '.'
0000000000001405         db  0x00 ; '.'
0000000000001406         db  0x00 ; '.'
0000000000001407         db  0x00 ; '.'
0000000000001408         db  0x07 ; '.'
0000000000001409         db  0x00 ; '.'
000000000000140a         db  0x00 ; '.'
000000000000140b         db  0x00 ; '.'
000000000000140c         db  0x01 ; '.'
000000000000140d         db  0x00 ; '.'
000000000000140e         db  0x00 ; '.'
000000000000140f         db  0x00 ; '.'
0000000000001410         db  0x00 ; '.'
0000000000001411         db  0x00 ; '.'
0000000000001412         db  0x00 ; '.'
0000000000001413         db  0x00 ; '.'
0000000000001414         db  0x00 ; '.'
0000000000001415         db  0x00 ; '.'
0000000000001416         db  0x00 ; '.'
0000000000001417         db  0x00 ; '.'
0000000000001418         db  0x08 ; '.'
0000000000001419         db  0xde ; '.'
000000000000141a         db  0x20 ; ' '
000000000000141b         db  0x00 ; '.'
000000000000141c         db  0x00 ; '.'
000000000000141d         db  0x00 ; '.'
000000000000141e         db  0x00 ; '.'
000000000000141f         db  0x00 ; '.'
0000000000001420         db  0x07 ; '.'
0000000000001421         db  0x00 ; '.'
0000000000001422         db  0x00 ; '.'
0000000000001423         db  0x00 ; '.'
0000000000001424         db  0x02 ; '.'
0000000000001425         db  0x00 ; '.'
0000000000001426         db  0x00 ; '.'
0000000000001427         db  0x00 ; '.'
0000000000001428         db  0x00 ; '.'
0000000000001429         db  0x00 ; '.'
000000000000142a         db  0x00 ; '.'
000000000000142b         db  0x00 ; '.'
000000000000142c         db  0x00 ; '.'
000000000000142d         db  0x00 ; '.'
000000000000142e         db  0x00 ; '.'
000000000000142f         db  0x00 ; '.'
0000000000001430         db  0x10 ; '.'
0000000000001431         db  0xde ; '.'
0000000000001432         db  0x20 ; ' '
0000000000001433         db  0x00 ; '.'
0000000000001434         db  0x00 ; '.'
0000000000001435         db  0x00 ; '.'
0000000000001436         db  0x00 ; '.'
0000000000001437         db  0x00 ; '.'
0000000000001438         db  0x07 ; '.'
0000000000001439         db  0x00 ; '.'
000000000000143a         db  0x00 ; '.'
000000000000143b         db  0x00 ; '.'
000000000000143c         db  0x03 ; '.'
000000000000143d         db  0x00 ; '.'
000000000000143e         db  0x00 ; '.'
000000000000143f         db  0x00 ; '.'
0000000000001440         db  0x00 ; '.'
0000000000001441         db  0x00 ; '.'
0000000000001442         db  0x00 ; '.'
0000000000001443         db  0x00 ; '.'
0000000000001444         db  0x00 ; '.'
0000000000001445         db  0x00 ; '.'
0000000000001446         db  0x00 ; '.'
0000000000001447         db  0x00 ; '.'
0000000000001448         db  0x18 ; '.'
0000000000001449         db  0xde ; '.'
000000000000144a         db  0x20 ; ' '
000000000000144b         db  0x00 ; '.'
000000000000144c         db  0x00 ; '.'
000000000000144d         db  0x00 ; '.'
000000000000144e         db  0x00 ; '.'
000000000000144f         db  0x00 ; '.'
0000000000001450         db  0x07 ; '.'
0000000000001451         db  0x00 ; '.'
0000000000001452         db  0x00 ; '.'
0000000000001453         db  0x00 ; '.'
0000000000001454         db  0x04 ; '.'
0000000000001455         db  0x00 ; '.'
0000000000001456         db  0x00 ; '.'
0000000000001457         db  0x00 ; '.'
0000000000001458         db  0x00 ; '.'
0000000000001459         db  0x00 ; '.'
000000000000145a         db  0x00 ; '.'
000000000000145b         db  0x00 ; '.'
000000000000145c         db  0x00 ; '.'
000000000000145d         db  0x00 ; '.'
000000000000145e         db  0x00 ; '.'
000000000000145f         db  0x00 ; '.'
0000000000001460         db  0x20 ; ' '
0000000000001461         db  0xde ; '.'
0000000000001462         db  0x20 ; ' '
0000000000001463         db  0x00 ; '.'
0000000000001464         db  0x00 ; '.'
0000000000001465         db  0x00 ; '.'
0000000000001466         db  0x00 ; '.'
0000000000001467         db  0x00 ; '.'
0000000000001468         db  0x07 ; '.'
0000000000001469         db  0x00 ; '.'
000000000000146a         db  0x00 ; '.'
000000000000146b         db  0x00 ; '.'
000000000000146c         db  0x05 ; '.'
000000000000146d         db  0x00 ; '.'
000000000000146e         db  0x00 ; '.'
000000000000146f         db  0x00 ; '.'
0000000000001470         db  0x00 ; '.'
0000000000001471         db  0x00 ; '.'
0000000000001472         db  0x00 ; '.'
0000000000001473         db  0x00 ; '.'
0000000000001474         db  0x00 ; '.'
0000000000001475         db  0x00 ; '.'
0000000000001476         db  0x00 ; '.'
0000000000001477         db  0x00 ; '.'
0000000000001478         db  0x28 ; '('
0000000000001479         db  0xde ; '.'
000000000000147a         db  0x20 ; ' '
000000000000147b         db  0x00 ; '.'
000000000000147c         db  0x00 ; '.'
000000000000147d         db  0x00 ; '.'
000000000000147e         db  0x00 ; '.'
000000000000147f         db  0x00 ; '.'
0000000000001480         db  0x07 ; '.'
0000000000001481         db  0x00 ; '.'
0000000000001482         db  0x00 ; '.'
0000000000001483         db  0x00 ; '.'
0000000000001484         db  0x07 ; '.'
0000000000001485         db  0x00 ; '.'
0000000000001486         db  0x00 ; '.'
0000000000001487         db  0x00 ; '.'
0000000000001488         db  0x00 ; '.'
0000000000001489         db  0x00 ; '.'
000000000000148a         db  0x00 ; '.'
000000000000148b         db  0x00 ; '.'
000000000000148c         db  0x00 ; '.'
000000000000148d         db  0x00 ; '.'
000000000000148e         db  0x00 ; '.'
000000000000148f         db  0x00 ; '.'
0000000000001490         db  0x30 ; '0'
0000000000001491         db  0xde ; '.'
0000000000001492         db  0x20 ; ' '
0000000000001493         db  0x00 ; '.'
0000000000001494         db  0x00 ; '.'
0000000000001495         db  0x00 ; '.'
0000000000001496         db  0x00 ; '.'
0000000000001497         db  0x00 ; '.'
0000000000001498         db  0x07 ; '.'
0000000000001499         db  0x00 ; '.'
000000000000149a         db  0x00 ; '.'
000000000000149b         db  0x00 ; '.'
000000000000149c         db  0x08 ; '.'
000000000000149d         db  0x00 ; '.'
000000000000149e         db  0x00 ; '.'
000000000000149f         db  0x00 ; '.'
00000000000014a0         db  0x00 ; '.'
00000000000014a1         db  0x00 ; '.'
00000000000014a2         db  0x00 ; '.'
00000000000014a3         db  0x00 ; '.'
00000000000014a4         db  0x00 ; '.'
00000000000014a5         db  0x00 ; '.'
00000000000014a6         db  0x00 ; '.'
00000000000014a7         db  0x00 ; '.'
00000000000014a8         db  0x38 ; '8'
00000000000014a9         db  0xde ; '.'
00000000000014aa         db  0x20 ; ' '
00000000000014ab         db  0x00 ; '.'
00000000000014ac         db  0x00 ; '.'
00000000000014ad         db  0x00 ; '.'
00000000000014ae         db  0x00 ; '.'
00000000000014af         db  0x00 ; '.'
00000000000014b0         db  0x07 ; '.'
00000000000014b1         db  0x00 ; '.'
00000000000014b2         db  0x00 ; '.'
00000000000014b3         db  0x00 ; '.'
00000000000014b4         db  0x09 ; '.'
00000000000014b5         db  0x00 ; '.'
00000000000014b6         db  0x00 ; '.'
00000000000014b7         db  0x00 ; '.'
00000000000014b8         db  0x00 ; '.'
00000000000014b9         db  0x00 ; '.'
00000000000014ba         db  0x00 ; '.'
00000000000014bb         db  0x00 ; '.'
00000000000014bc         db  0x00 ; '.'
00000000000014bd         db  0x00 ; '.'
00000000000014be         db  0x00 ; '.'
00000000000014bf         db  0x00 ; '.'
00000000000014c0         db  0x40 ; '@'
00000000000014c1         db  0xde ; '.'
00000000000014c2         db  0x20 ; ' '
00000000000014c3         db  0x00 ; '.'
00000000000014c4         db  0x00 ; '.'
00000000000014c5         db  0x00 ; '.'
00000000000014c6         db  0x00 ; '.'
00000000000014c7         db  0x00 ; '.'
00000000000014c8         db  0x07 ; '.'
00000000000014c9         db  0x00 ; '.'
00000000000014ca         db  0x00 ; '.'
00000000000014cb         db  0x00 ; '.'
00000000000014cc         db  0x0a ; '.'
00000000000014cd         db  0x00 ; '.'
00000000000014ce         db  0x00 ; '.'
00000000000014cf         db  0x00 ; '.'
00000000000014d0         db  0x00 ; '.'
00000000000014d1         db  0x00 ; '.'
00000000000014d2         db  0x00 ; '.'
00000000000014d3         db  0x00 ; '.'
00000000000014d4         db  0x00 ; '.'
00000000000014d5         db  0x00 ; '.'
00000000000014d6         db  0x00 ; '.'
00000000000014d7         db  0x00 ; '.'
00000000000014d8         db  0x48 ; 'H'
00000000000014d9         db  0xde ; '.'
00000000000014da         db  0x20 ; ' '
00000000000014db         db  0x00 ; '.'
00000000000014dc         db  0x00 ; '.'
00000000000014dd         db  0x00 ; '.'
00000000000014de         db  0x00 ; '.'
00000000000014df         db  0x00 ; '.'
00000000000014e0         db  0x07 ; '.'
00000000000014e1         db  0x00 ; '.'
00000000000014e2         db  0x00 ; '.'
00000000000014e3         db  0x00 ; '.'
00000000000014e4         db  0x0b ; '.'
00000000000014e5         db  0x00 ; '.'
00000000000014e6         db  0x00 ; '.'
00000000000014e7         db  0x00 ; '.'
00000000000014e8         db  0x00 ; '.'
00000000000014e9         db  0x00 ; '.'
00000000000014ea         db  0x00 ; '.'
00000000000014eb         db  0x00 ; '.'
00000000000014ec         db  0x00 ; '.'
00000000000014ed         db  0x00 ; '.'
00000000000014ee         db  0x00 ; '.'
00000000000014ef         db  0x00 ; '.'
00000000000014f0         db  0x50 ; 'P'
00000000000014f1         db  0xde ; '.'
00000000000014f2         db  0x20 ; ' '
00000000000014f3         db  0x00 ; '.'
00000000000014f4         db  0x00 ; '.'
00000000000014f5         db  0x00 ; '.'
00000000000014f6         db  0x00 ; '.'
00000000000014f7         db  0x00 ; '.'
00000000000014f8         db  0x07 ; '.'
00000000000014f9         db  0x00 ; '.'
00000000000014fa         db  0x00 ; '.'
00000000000014fb         db  0x00 ; '.'
00000000000014fc         db  0x0c ; '.'
00000000000014fd         db  0x00 ; '.'
00000000000014fe         db  0x00 ; '.'
00000000000014ff         db  0x00 ; '.'
0000000000001500         db  0x00 ; '.'
0000000000001501         db  0x00 ; '.'
0000000000001502         db  0x00 ; '.'
0000000000001503         db  0x00 ; '.'
0000000000001504         db  0x00 ; '.'
0000000000001505         db  0x00 ; '.'
0000000000001506         db  0x00 ; '.'
0000000000001507         db  0x00 ; '.'
0000000000001508         db  0x58 ; 'X'
0000000000001509         db  0xde ; '.'
000000000000150a         db  0x20 ; ' '
000000000000150b         db  0x00 ; '.'
000000000000150c         db  0x00 ; '.'
000000000000150d         db  0x00 ; '.'
000000000000150e         db  0x00 ; '.'
000000000000150f         db  0x00 ; '.'
0000000000001510         db  0x07 ; '.'
0000000000001511         db  0x00 ; '.'
0000000000001512         db  0x00 ; '.'
0000000000001513         db  0x00 ; '.'
0000000000001514         db  0x0d ; '.'
0000000000001515         db  0x00 ; '.'
0000000000001516         db  0x00 ; '.'
0000000000001517         db  0x00 ; '.'
0000000000001518         db  0x00 ; '.'
0000000000001519         db  0x00 ; '.'
000000000000151a         db  0x00 ; '.'
000000000000151b         db  0x00 ; '.'
000000000000151c         db  0x00 ; '.'
000000000000151d         db  0x00 ; '.'
000000000000151e         db  0x00 ; '.'
000000000000151f         db  0x00 ; '.'
0000000000001520         db  0x60 ; '`'
0000000000001521         db  0xde ; '.'
0000000000001522         db  0x20 ; ' '
0000000000001523         db  0x00 ; '.'
0000000000001524         db  0x00 ; '.'
0000000000001525         db  0x00 ; '.'
0000000000001526         db  0x00 ; '.'
0000000000001527         db  0x00 ; '.'
0000000000001528         db  0x07 ; '.'
0000000000001529         db  0x00 ; '.'
000000000000152a         db  0x00 ; '.'
000000000000152b         db  0x00 ; '.'
000000000000152c         db  0x0e ; '.'
000000000000152d         db  0x00 ; '.'
000000000000152e         db  0x00 ; '.'
000000000000152f         db  0x00 ; '.'
0000000000001530         db  0x00 ; '.'
0000000000001531         db  0x00 ; '.'
0000000000001532         db  0x00 ; '.'
0000000000001533         db  0x00 ; '.'
0000000000001534         db  0x00 ; '.'
0000000000001535         db  0x00 ; '.'
0000000000001536         db  0x00 ; '.'
0000000000001537         db  0x00 ; '.'
0000000000001538         db  0x68 ; 'h'
0000000000001539         db  0xde ; '.'
000000000000153a         db  0x20 ; ' '
000000000000153b         db  0x00 ; '.'
000000000000153c         db  0x00 ; '.'
000000000000153d         db  0x00 ; '.'
000000000000153e         db  0x00 ; '.'
000000000000153f         db  0x00 ; '.'
0000000000001540         db  0x07 ; '.'
0000000000001541         db  0x00 ; '.'
0000000000001542         db  0x00 ; '.'
0000000000001543         db  0x00 ; '.'
0000000000001544         db  0x0f ; '.'
0000000000001545         db  0x00 ; '.'
0000000000001546         db  0x00 ; '.'
0000000000001547         db  0x00 ; '.'
0000000000001548         db  0x00 ; '.'
0000000000001549         db  0x00 ; '.'
000000000000154a         db  0x00 ; '.'
000000000000154b         db  0x00 ; '.'
000000000000154c         db  0x00 ; '.'
000000000000154d         db  0x00 ; '.'
000000000000154e         db  0x00 ; '.'
000000000000154f         db  0x00 ; '.'
0000000000001550         db  0x70 ; 'p'
0000000000001551         db  0xde ; '.'
0000000000001552         db  0x20 ; ' '
0000000000001553         db  0x00 ; '.'
0000000000001554         db  0x00 ; '.'
0000000000001555         db  0x00 ; '.'
0000000000001556         db  0x00 ; '.'
0000000000001557         db  0x00 ; '.'
0000000000001558         db  0x07 ; '.'
0000000000001559         db  0x00 ; '.'
000000000000155a         db  0x00 ; '.'
000000000000155b         db  0x00 ; '.'
000000000000155c         db  0x10 ; '.'
000000000000155d         db  0x00 ; '.'
000000000000155e         db  0x00 ; '.'
000000000000155f         db  0x00 ; '.'
0000000000001560         db  0x00 ; '.'
0000000000001561         db  0x00 ; '.'
0000000000001562         db  0x00 ; '.'
0000000000001563         db  0x00 ; '.'
0000000000001564         db  0x00 ; '.'
0000000000001565         db  0x00 ; '.'
0000000000001566         db  0x00 ; '.'
0000000000001567         db  0x00 ; '.'
0000000000001568         db  0x78 ; 'x'
0000000000001569         db  0xde ; '.'
000000000000156a         db  0x20 ; ' '
000000000000156b         db  0x00 ; '.'
000000000000156c         db  0x00 ; '.'
000000000000156d         db  0x00 ; '.'
000000000000156e         db  0x00 ; '.'
000000000000156f         db  0x00 ; '.'
0000000000001570         db  0x07 ; '.'
0000000000001571         db  0x00 ; '.'
0000000000001572         db  0x00 ; '.'
0000000000001573         db  0x00 ; '.'
0000000000001574         db  0x11 ; '.'
0000000000001575         db  0x00 ; '.'
0000000000001576         db  0x00 ; '.'
0000000000001577         db  0x00 ; '.'
0000000000001578         db  0x00 ; '.'
0000000000001579         db  0x00 ; '.'
000000000000157a         db  0x00 ; '.'
000000000000157b         db  0x00 ; '.'
000000000000157c         db  0x00 ; '.'
000000000000157d         db  0x00 ; '.'
000000000000157e         db  0x00 ; '.'
000000000000157f         db  0x00 ; '.'
0000000000001580         db  0x80 ; '.'
0000000000001581         db  0xde ; '.'
0000000000001582         db  0x20 ; ' '
0000000000001583         db  0x00 ; '.'
0000000000001584         db  0x00 ; '.'
0000000000001585         db  0x00 ; '.'
0000000000001586         db  0x00 ; '.'
0000000000001587         db  0x00 ; '.'
0000000000001588         db  0x07 ; '.'
0000000000001589         db  0x00 ; '.'
000000000000158a         db  0x00 ; '.'
000000000000158b         db  0x00 ; '.'
000000000000158c         db  0x12 ; '.'
000000000000158d         db  0x00 ; '.'
000000000000158e         db  0x00 ; '.'
000000000000158f         db  0x00 ; '.'
0000000000001590         db  0x00 ; '.'
0000000000001591         db  0x00 ; '.'
0000000000001592         db  0x00 ; '.'
0000000000001593         db  0x00 ; '.'
0000000000001594         db  0x00 ; '.'
0000000000001595         db  0x00 ; '.'
0000000000001596         db  0x00 ; '.'
0000000000001597         db  0x00 ; '.'
0000000000001598         db  0x88 ; '.'
0000000000001599         db  0xde ; '.'
000000000000159a         db  0x20 ; ' '
000000000000159b         db  0x00 ; '.'
000000000000159c         db  0x00 ; '.'
000000000000159d         db  0x00 ; '.'
000000000000159e         db  0x00 ; '.'
000000000000159f         db  0x00 ; '.'
00000000000015a0         db  0x07 ; '.'
00000000000015a1         db  0x00 ; '.'
00000000000015a2         db  0x00 ; '.'
00000000000015a3         db  0x00 ; '.'
00000000000015a4         db  0x13 ; '.'
00000000000015a5         db  0x00 ; '.'
00000000000015a6         db  0x00 ; '.'
00000000000015a7         db  0x00 ; '.'
00000000000015a8         db  0x00 ; '.'
00000000000015a9         db  0x00 ; '.'
00000000000015aa         db  0x00 ; '.'
00000000000015ab         db  0x00 ; '.'
00000000000015ac         db  0x00 ; '.'
00000000000015ad         db  0x00 ; '.'
00000000000015ae         db  0x00 ; '.'
00000000000015af         db  0x00 ; '.'
00000000000015b0         db  0x90 ; '.'
00000000000015b1         db  0xde ; '.'
00000000000015b2         db  0x20 ; ' '
00000000000015b3         db  0x00 ; '.'
00000000000015b4         db  0x00 ; '.'
00000000000015b5         db  0x00 ; '.'
00000000000015b6         db  0x00 ; '.'
00000000000015b7         db  0x00 ; '.'
00000000000015b8         db  0x07 ; '.'
00000000000015b9         db  0x00 ; '.'
00000000000015ba         db  0x00 ; '.'
00000000000015bb         db  0x00 ; '.'
00000000000015bc         db  0x14 ; '.'
00000000000015bd         db  0x00 ; '.'
00000000000015be         db  0x00 ; '.'
00000000000015bf         db  0x00 ; '.'
00000000000015c0         db  0x00 ; '.'
00000000000015c1         db  0x00 ; '.'
00000000000015c2         db  0x00 ; '.'
00000000000015c3         db  0x00 ; '.'
00000000000015c4         db  0x00 ; '.'
00000000000015c5         db  0x00 ; '.'
00000000000015c6         db  0x00 ; '.'
00000000000015c7         db  0x00 ; '.'
00000000000015c8         db  0x98 ; '.'
00000000000015c9         db  0xde ; '.'
00000000000015ca         db  0x20 ; ' '
00000000000015cb         db  0x00 ; '.'
00000000000015cc         db  0x00 ; '.'
00000000000015cd         db  0x00 ; '.'
00000000000015ce         db  0x00 ; '.'
00000000000015cf         db  0x00 ; '.'
00000000000015d0         db  0x07 ; '.'
00000000000015d1         db  0x00 ; '.'
00000000000015d2         db  0x00 ; '.'
00000000000015d3         db  0x00 ; '.'
00000000000015d4         db  0x15 ; '.'
00000000000015d5         db  0x00 ; '.'
00000000000015d6         db  0x00 ; '.'
00000000000015d7         db  0x00 ; '.'
00000000000015d8         db  0x00 ; '.'
00000000000015d9         db  0x00 ; '.'
00000000000015da         db  0x00 ; '.'
00000000000015db         db  0x00 ; '.'
00000000000015dc         db  0x00 ; '.'
00000000000015dd         db  0x00 ; '.'
00000000000015de         db  0x00 ; '.'
00000000000015df         db  0x00 ; '.'
00000000000015e0         db  0xa0 ; '.'
00000000000015e1         db  0xde ; '.'
00000000000015e2         db  0x20 ; ' '
00000000000015e3         db  0x00 ; '.'
00000000000015e4         db  0x00 ; '.'
00000000000015e5         db  0x00 ; '.'
00000000000015e6         db  0x00 ; '.'
00000000000015e7         db  0x00 ; '.'
00000000000015e8         db  0x07 ; '.'
00000000000015e9         db  0x00 ; '.'
00000000000015ea         db  0x00 ; '.'
00000000000015eb         db  0x00 ; '.'
00000000000015ec         db  0x16 ; '.'
00000000000015ed         db  0x00 ; '.'
00000000000015ee         db  0x00 ; '.'
00000000000015ef         db  0x00 ; '.'
00000000000015f0         db  0x00 ; '.'
00000000000015f1         db  0x00 ; '.'
00000000000015f2         db  0x00 ; '.'
00000000000015f3         db  0x00 ; '.'
00000000000015f4         db  0x00 ; '.'
00000000000015f5         db  0x00 ; '.'
00000000000015f6         db  0x00 ; '.'
00000000000015f7         db  0x00 ; '.'
00000000000015f8         db  0xa8 ; '.'
00000000000015f9         db  0xde ; '.'
00000000000015fa         db  0x20 ; ' '
00000000000015fb         db  0x00 ; '.'
00000000000015fc         db  0x00 ; '.'
00000000000015fd         db  0x00 ; '.'
00000000000015fe         db  0x00 ; '.'
00000000000015ff         db  0x00 ; '.'
0000000000001600         db  0x07 ; '.'
0000000000001601         db  0x00 ; '.'
0000000000001602         db  0x00 ; '.'
0000000000001603         db  0x00 ; '.'
0000000000001604         db  0x17 ; '.'
0000000000001605         db  0x00 ; '.'
0000000000001606         db  0x00 ; '.'
0000000000001607         db  0x00 ; '.'
0000000000001608         db  0x00 ; '.'
0000000000001609         db  0x00 ; '.'
000000000000160a         db  0x00 ; '.'
000000000000160b         db  0x00 ; '.'
000000000000160c         db  0x00 ; '.'
000000000000160d         db  0x00 ; '.'
000000000000160e         db  0x00 ; '.'
000000000000160f         db  0x00 ; '.'
0000000000001610         db  0xb0 ; '.'
0000000000001611         db  0xde ; '.'
0000000000001612         db  0x20 ; ' '
0000000000001613         db  0x00 ; '.'
0000000000001614         db  0x00 ; '.'
0000000000001615         db  0x00 ; '.'
0000000000001616         db  0x00 ; '.'
0000000000001617         db  0x00 ; '.'
0000000000001618         db  0x07 ; '.'
0000000000001619         db  0x00 ; '.'
000000000000161a         db  0x00 ; '.'
000000000000161b         db  0x00 ; '.'
000000000000161c         db  0x18 ; '.'
000000000000161d         db  0x00 ; '.'
000000000000161e         db  0x00 ; '.'
000000000000161f         db  0x00 ; '.'
0000000000001620         db  0x00 ; '.'
0000000000001621         db  0x00 ; '.'
0000000000001622         db  0x00 ; '.'
0000000000001623         db  0x00 ; '.'
0000000000001624         db  0x00 ; '.'
0000000000001625         db  0x00 ; '.'
0000000000001626         db  0x00 ; '.'
0000000000001627         db  0x00 ; '.'
0000000000001628         db  0xb8 ; '.'
0000000000001629         db  0xde ; '.'
000000000000162a         db  0x20 ; ' '
000000000000162b         db  0x00 ; '.'
000000000000162c         db  0x00 ; '.'
000000000000162d         db  0x00 ; '.'
000000000000162e         db  0x00 ; '.'
000000000000162f         db  0x00 ; '.'
0000000000001630         db  0x07 ; '.'
0000000000001631         db  0x00 ; '.'
0000000000001632         db  0x00 ; '.'
0000000000001633         db  0x00 ; '.'
0000000000001634         db  0x19 ; '.'
0000000000001635         db  0x00 ; '.'
0000000000001636         db  0x00 ; '.'
0000000000001637         db  0x00 ; '.'
0000000000001638         db  0x00 ; '.'
0000000000001639         db  0x00 ; '.'
000000000000163a         db  0x00 ; '.'
000000000000163b         db  0x00 ; '.'
000000000000163c         db  0x00 ; '.'
000000000000163d         db  0x00 ; '.'
000000000000163e         db  0x00 ; '.'
000000000000163f         db  0x00 ; '.'
0000000000001640         db  0xc0 ; '.'
0000000000001641         db  0xde ; '.'
0000000000001642         db  0x20 ; ' '
0000000000001643         db  0x00 ; '.'
0000000000001644         db  0x00 ; '.'
0000000000001645         db  0x00 ; '.'
0000000000001646         db  0x00 ; '.'
0000000000001647         db  0x00 ; '.'
0000000000001648         db  0x07 ; '.'
0000000000001649         db  0x00 ; '.'
000000000000164a         db  0x00 ; '.'
000000000000164b         db  0x00 ; '.'
000000000000164c         db  0x1a ; '.'
000000000000164d         db  0x00 ; '.'
000000000000164e         db  0x00 ; '.'
000000000000164f         db  0x00 ; '.'
0000000000001650         db  0x00 ; '.'
0000000000001651         db  0x00 ; '.'
0000000000001652         db  0x00 ; '.'
0000000000001653         db  0x00 ; '.'
0000000000001654         db  0x00 ; '.'
0000000000001655         db  0x00 ; '.'
0000000000001656         db  0x00 ; '.'
0000000000001657         db  0x00 ; '.'
0000000000001658         db  0xc8 ; '.'
0000000000001659         db  0xde ; '.'
000000000000165a         db  0x20 ; ' '
000000000000165b         db  0x00 ; '.'
000000000000165c         db  0x00 ; '.'
000000000000165d         db  0x00 ; '.'
000000000000165e         db  0x00 ; '.'
000000000000165f         db  0x00 ; '.'
0000000000001660         db  0x07 ; '.'
0000000000001661         db  0x00 ; '.'
0000000000001662         db  0x00 ; '.'
0000000000001663         db  0x00 ; '.'
0000000000001664         db  0x1b ; '.'
0000000000001665         db  0x00 ; '.'
0000000000001666         db  0x00 ; '.'
0000000000001667         db  0x00 ; '.'
0000000000001668         db  0x00 ; '.'
0000000000001669         db  0x00 ; '.'
000000000000166a         db  0x00 ; '.'
000000000000166b         db  0x00 ; '.'
000000000000166c         db  0x00 ; '.'
000000000000166d         db  0x00 ; '.'
000000000000166e         db  0x00 ; '.'
000000000000166f         db  0x00 ; '.'
0000000000001670         db  0xd0 ; '.'
0000000000001671         db  0xde ; '.'
0000000000001672         db  0x20 ; ' '
0000000000001673         db  0x00 ; '.'
0000000000001674         db  0x00 ; '.'
0000000000001675         db  0x00 ; '.'
0000000000001676         db  0x00 ; '.'
0000000000001677         db  0x00 ; '.'
0000000000001678         db  0x07 ; '.'
0000000000001679         db  0x00 ; '.'
000000000000167a         db  0x00 ; '.'
000000000000167b         db  0x00 ; '.'
000000000000167c         db  0x1c ; '.'
000000000000167d         db  0x00 ; '.'
000000000000167e         db  0x00 ; '.'
000000000000167f         db  0x00 ; '.'
0000000000001680         db  0x00 ; '.'
0000000000001681         db  0x00 ; '.'
0000000000001682         db  0x00 ; '.'
0000000000001683         db  0x00 ; '.'
0000000000001684         db  0x00 ; '.'
0000000000001685         db  0x00 ; '.'
0000000000001686         db  0x00 ; '.'
0000000000001687         db  0x00 ; '.'
0000000000001688         db  0xd8 ; '.'
0000000000001689         db  0xde ; '.'
000000000000168a         db  0x20 ; ' '
000000000000168b         db  0x00 ; '.'
000000000000168c         db  0x00 ; '.'
000000000000168d         db  0x00 ; '.'
000000000000168e         db  0x00 ; '.'
000000000000168f         db  0x00 ; '.'
0000000000001690         db  0x07 ; '.'
0000000000001691         db  0x00 ; '.'
0000000000001692         db  0x00 ; '.'
0000000000001693         db  0x00 ; '.'
0000000000001694         db  0x1d ; '.'
0000000000001695         db  0x00 ; '.'
0000000000001696         db  0x00 ; '.'
0000000000001697         db  0x00 ; '.'
0000000000001698         db  0x00 ; '.'
0000000000001699         db  0x00 ; '.'
000000000000169a         db  0x00 ; '.'
000000000000169b         db  0x00 ; '.'
000000000000169c         db  0x00 ; '.'
000000000000169d         db  0x00 ; '.'
000000000000169e         db  0x00 ; '.'
000000000000169f         db  0x00 ; '.'
00000000000016a0         db  0xe0 ; '.'
00000000000016a1         db  0xde ; '.'
00000000000016a2         db  0x20 ; ' '
00000000000016a3         db  0x00 ; '.'
00000000000016a4         db  0x00 ; '.'
00000000000016a5         db  0x00 ; '.'
00000000000016a6         db  0x00 ; '.'
00000000000016a7         db  0x00 ; '.'
00000000000016a8         db  0x07 ; '.'
00000000000016a9         db  0x00 ; '.'
00000000000016aa         db  0x00 ; '.'
00000000000016ab         db  0x00 ; '.'
00000000000016ac         db  0x1e ; '.'
00000000000016ad         db  0x00 ; '.'
00000000000016ae         db  0x00 ; '.'
00000000000016af         db  0x00 ; '.'
00000000000016b0         db  0x00 ; '.'
00000000000016b1         db  0x00 ; '.'
00000000000016b2         db  0x00 ; '.'
00000000000016b3         db  0x00 ; '.'
00000000000016b4         db  0x00 ; '.'
00000000000016b5         db  0x00 ; '.'
00000000000016b6         db  0x00 ; '.'
00000000000016b7         db  0x00 ; '.'
00000000000016b8         db  0xe8 ; '.'
00000000000016b9         db  0xde ; '.'
00000000000016ba         db  0x20 ; ' '
00000000000016bb         db  0x00 ; '.'
00000000000016bc         db  0x00 ; '.'
00000000000016bd         db  0x00 ; '.'
00000000000016be         db  0x00 ; '.'
00000000000016bf         db  0x00 ; '.'
00000000000016c0         db  0x07 ; '.'
00000000000016c1         db  0x00 ; '.'
00000000000016c2         db  0x00 ; '.'
00000000000016c3         db  0x00 ; '.'
00000000000016c4         db  0x20 ; ' '
00000000000016c5         db  0x00 ; '.'
00000000000016c6         db  0x00 ; '.'
00000000000016c7         db  0x00 ; '.'
00000000000016c8         db  0x00 ; '.'
00000000000016c9         db  0x00 ; '.'
00000000000016ca         db  0x00 ; '.'
00000000000016cb         db  0x00 ; '.'
00000000000016cc         db  0x00 ; '.'
00000000000016cd         db  0x00 ; '.'
00000000000016ce         db  0x00 ; '.'
00000000000016cf         db  0x00 ; '.'
00000000000016d0         db  0xf0 ; '.'
00000000000016d1         db  0xde ; '.'
00000000000016d2         db  0x20 ; ' '
00000000000016d3         db  0x00 ; '.'
00000000000016d4         db  0x00 ; '.'
00000000000016d5         db  0x00 ; '.'
00000000000016d6         db  0x00 ; '.'
00000000000016d7         db  0x00 ; '.'
00000000000016d8         db  0x07 ; '.'
00000000000016d9         db  0x00 ; '.'
00000000000016da         db  0x00 ; '.'
00000000000016db         db  0x00 ; '.'
00000000000016dc         db  0x21 ; '!'
00000000000016dd         db  0x00 ; '.'
00000000000016de         db  0x00 ; '.'
00000000000016df         db  0x00 ; '.'
00000000000016e0         db  0x00 ; '.'
00000000000016e1         db  0x00 ; '.'
00000000000016e2         db  0x00 ; '.'
00000000000016e3         db  0x00 ; '.'
00000000000016e4         db  0x00 ; '.'
00000000000016e5         db  0x00 ; '.'
00000000000016e6         db  0x00 ; '.'
00000000000016e7         db  0x00 ; '.'
00000000000016e8         db  0xf8 ; '.'
00000000000016e9         db  0xde ; '.'
00000000000016ea         db  0x20 ; ' '
00000000000016eb         db  0x00 ; '.'
00000000000016ec         db  0x00 ; '.'
00000000000016ed         db  0x00 ; '.'
00000000000016ee         db  0x00 ; '.'
00000000000016ef         db  0x00 ; '.'
00000000000016f0         db  0x07 ; '.'
00000000000016f1         db  0x00 ; '.'
00000000000016f2         db  0x00 ; '.'
00000000000016f3         db  0x00 ; '.'
00000000000016f4         db  0x22 ; '"'
00000000000016f5         db  0x00 ; '.'
00000000000016f6         db  0x00 ; '.'
00000000000016f7         db  0x00 ; '.'
00000000000016f8         db  0x00 ; '.'
00000000000016f9         db  0x00 ; '.'
00000000000016fa         db  0x00 ; '.'
00000000000016fb         db  0x00 ; '.'
00000000000016fc         db  0x00 ; '.'
00000000000016fd         db  0x00 ; '.'
00000000000016fe         db  0x00 ; '.'
00000000000016ff         db  0x00 ; '.'
0000000000001700         db  0x00 ; '.'
0000000000001701         db  0xdf ; '.'
0000000000001702         db  0x20 ; ' '
0000000000001703         db  0x00 ; '.'
0000000000001704         db  0x00 ; '.'
0000000000001705         db  0x00 ; '.'
0000000000001706         db  0x00 ; '.'
0000000000001707         db  0x00 ; '.'
0000000000001708         db  0x07 ; '.'
0000000000001709         db  0x00 ; '.'
000000000000170a         db  0x00 ; '.'
000000000000170b         db  0x00 ; '.'
000000000000170c         db  0x23 ; '#'
000000000000170d         db  0x00 ; '.'
000000000000170e         db  0x00 ; '.'
000000000000170f         db  0x00 ; '.'
0000000000001710         db  0x00 ; '.'
0000000000001711         db  0x00 ; '.'
0000000000001712         db  0x00 ; '.'
0000000000001713         db  0x00 ; '.'
0000000000001714         db  0x00 ; '.'
0000000000001715         db  0x00 ; '.'
0000000000001716         db  0x00 ; '.'
0000000000001717         db  0x00 ; '.'
0000000000001718         db  0x08 ; '.'
0000000000001719         db  0xdf ; '.'
000000000000171a         db  0x20 ; ' '
000000000000171b         db  0x00 ; '.'
000000000000171c         db  0x00 ; '.'
000000000000171d         db  0x00 ; '.'
000000000000171e         db  0x00 ; '.'
000000000000171f         db  0x00 ; '.'
0000000000001720         db  0x07 ; '.'
0000000000001721         db  0x00 ; '.'
0000000000001722         db  0x00 ; '.'
0000000000001723         db  0x00 ; '.'
0000000000001724         db  0x25 ; '%'
0000000000001725         db  0x00 ; '.'
0000000000001726         db  0x00 ; '.'
0000000000001727         db  0x00 ; '.'
0000000000001728         db  0x00 ; '.'
0000000000001729         db  0x00 ; '.'
000000000000172a         db  0x00 ; '.'
000000000000172b         db  0x00 ; '.'
000000000000172c         db  0x00 ; '.'
000000000000172d         db  0x00 ; '.'
000000000000172e         db  0x00 ; '.'
000000000000172f         db  0x00 ; '.'
0000000000001730         db  0x10 ; '.'
0000000000001731         db  0xdf ; '.'
0000000000001732         db  0x20 ; ' '
0000000000001733         db  0x00 ; '.'
0000000000001734         db  0x00 ; '.'
0000000000001735         db  0x00 ; '.'
0000000000001736         db  0x00 ; '.'
0000000000001737         db  0x00 ; '.'
0000000000001738         db  0x07 ; '.'
0000000000001739         db  0x00 ; '.'
000000000000173a         db  0x00 ; '.'
000000000000173b         db  0x00 ; '.'
000000000000173c         db  0x26 ; '&'
000000000000173d         db  0x00 ; '.'
000000000000173e         db  0x00 ; '.'
000000000000173f         db  0x00 ; '.'
0000000000001740         db  0x00 ; '.'
0000000000001741         db  0x00 ; '.'
0000000000001742         db  0x00 ; '.'
0000000000001743         db  0x00 ; '.'
0000000000001744         db  0x00 ; '.'
0000000000001745         db  0x00 ; '.'
0000000000001746         db  0x00 ; '.'
0000000000001747         db  0x00 ; '.'
0000000000001748         db  0x18 ; '.'
0000000000001749         db  0xdf ; '.'
000000000000174a         db  0x20 ; ' '
000000000000174b         db  0x00 ; '.'
000000000000174c         db  0x00 ; '.'
000000000000174d         db  0x00 ; '.'
000000000000174e         db  0x00 ; '.'
000000000000174f         db  0x00 ; '.'
0000000000001750         db  0x07 ; '.'
0000000000001751         db  0x00 ; '.'
0000000000001752         db  0x00 ; '.'
0000000000001753         db  0x00 ; '.'
0000000000001754         db  0x27 ; '''
0000000000001755         db  0x00 ; '.'
0000000000001756         db  0x00 ; '.'
0000000000001757         db  0x00 ; '.'
0000000000001758         db  0x00 ; '.'
0000000000001759         db  0x00 ; '.'
000000000000175a         db  0x00 ; '.'
000000000000175b         db  0x00 ; '.'
000000000000175c         db  0x00 ; '.'
000000000000175d         db  0x00 ; '.'
000000000000175e         db  0x00 ; '.'
000000000000175f         db  0x00 ; '.'
0000000000001760         db  0x20 ; ' '
0000000000001761         db  0xdf ; '.'
0000000000001762         db  0x20 ; ' '
0000000000001763         db  0x00 ; '.'
0000000000001764         db  0x00 ; '.'
0000000000001765         db  0x00 ; '.'
0000000000001766         db  0x00 ; '.'
0000000000001767         db  0x00 ; '.'
0000000000001768         db  0x07 ; '.'
0000000000001769         db  0x00 ; '.'
000000000000176a         db  0x00 ; '.'
000000000000176b         db  0x00 ; '.'
000000000000176c         db  0x28 ; '('
000000000000176d         db  0x00 ; '.'
000000000000176e         db  0x00 ; '.'
000000000000176f         db  0x00 ; '.'
0000000000001770         db  0x00 ; '.'
0000000000001771         db  0x00 ; '.'
0000000000001772         db  0x00 ; '.'
0000000000001773         db  0x00 ; '.'
0000000000001774         db  0x00 ; '.'
0000000000001775         db  0x00 ; '.'
0000000000001776         db  0x00 ; '.'
0000000000001777         db  0x00 ; '.'
0000000000001778         db  0x28 ; '('
0000000000001779         db  0xdf ; '.'
000000000000177a         db  0x20 ; ' '
000000000000177b         db  0x00 ; '.'
000000000000177c         db  0x00 ; '.'
000000000000177d         db  0x00 ; '.'
000000000000177e         db  0x00 ; '.'
000000000000177f         db  0x00 ; '.'
0000000000001780         db  0x07 ; '.'
0000000000001781         db  0x00 ; '.'
0000000000001782         db  0x00 ; '.'
0000000000001783         db  0x00 ; '.'
0000000000001784         db  0x29 ; ')'
0000000000001785         db  0x00 ; '.'
0000000000001786         db  0x00 ; '.'
0000000000001787         db  0x00 ; '.'
0000000000001788         db  0x00 ; '.'
0000000000001789         db  0x00 ; '.'
000000000000178a         db  0x00 ; '.'
000000000000178b         db  0x00 ; '.'
000000000000178c         db  0x00 ; '.'
000000000000178d         db  0x00 ; '.'
000000000000178e         db  0x00 ; '.'
000000000000178f         db  0x00 ; '.'
0000000000001790         db  0x30 ; '0'
0000000000001791         db  0xdf ; '.'
0000000000001792         db  0x20 ; ' '
0000000000001793         db  0x00 ; '.'
0000000000001794         db  0x00 ; '.'
0000000000001795         db  0x00 ; '.'
0000000000001796         db  0x00 ; '.'
0000000000001797         db  0x00 ; '.'
0000000000001798         db  0x07 ; '.'
0000000000001799         db  0x00 ; '.'
000000000000179a         db  0x00 ; '.'
000000000000179b         db  0x00 ; '.'
000000000000179c         db  0x2a ; '*'
000000000000179d         db  0x00 ; '.'
000000000000179e         db  0x00 ; '.'
000000000000179f         db  0x00 ; '.'
00000000000017a0         db  0x00 ; '.'
00000000000017a1         db  0x00 ; '.'
00000000000017a2         db  0x00 ; '.'
00000000000017a3         db  0x00 ; '.'
00000000000017a4         db  0x00 ; '.'
00000000000017a5         db  0x00 ; '.'
00000000000017a6         db  0x00 ; '.'
00000000000017a7         db  0x00 ; '.'
00000000000017a8         db  0x38 ; '8'
00000000000017a9         db  0xdf ; '.'
00000000000017aa         db  0x20 ; ' '
00000000000017ab         db  0x00 ; '.'
00000000000017ac         db  0x00 ; '.'
00000000000017ad         db  0x00 ; '.'
00000000000017ae         db  0x00 ; '.'
00000000000017af         db  0x00 ; '.'
00000000000017b0         db  0x07 ; '.'
00000000000017b1         db  0x00 ; '.'
00000000000017b2         db  0x00 ; '.'
00000000000017b3         db  0x00 ; '.'
00000000000017b4         db  0x2b ; '+'
00000000000017b5         db  0x00 ; '.'
00000000000017b6         db  0x00 ; '.'
00000000000017b7         db  0x00 ; '.'
00000000000017b8         db  0x00 ; '.'
00000000000017b9         db  0x00 ; '.'
00000000000017ba         db  0x00 ; '.'
00000000000017bb         db  0x00 ; '.'
00000000000017bc         db  0x00 ; '.'
00000000000017bd         db  0x00 ; '.'
00000000000017be         db  0x00 ; '.'
00000000000017bf         db  0x00 ; '.'
00000000000017c0         db  0x40 ; '@'
00000000000017c1         db  0xdf ; '.'
00000000000017c2         db  0x20 ; ' '
00000000000017c3         db  0x00 ; '.'
00000000000017c4         db  0x00 ; '.'
00000000000017c5         db  0x00 ; '.'
00000000000017c6         db  0x00 ; '.'
00000000000017c7         db  0x00 ; '.'
00000000000017c8         db  0x07 ; '.'
00000000000017c9         db  0x00 ; '.'
00000000000017ca         db  0x00 ; '.'
00000000000017cb         db  0x00 ; '.'
00000000000017cc         db  0x2c ; ','
00000000000017cd         db  0x00 ; '.'
00000000000017ce         db  0x00 ; '.'
00000000000017cf         db  0x00 ; '.'
00000000000017d0         db  0x00 ; '.'
00000000000017d1         db  0x00 ; '.'
00000000000017d2         db  0x00 ; '.'
00000000000017d3         db  0x00 ; '.'
00000000000017d4         db  0x00 ; '.'
00000000000017d5         db  0x00 ; '.'
00000000000017d6         db  0x00 ; '.'
00000000000017d7         db  0x00 ; '.'
00000000000017d8         db  0x48 ; 'H'
00000000000017d9         db  0xdf ; '.'
00000000000017da         db  0x20 ; ' '
00000000000017db         db  0x00 ; '.'
00000000000017dc         db  0x00 ; '.'
00000000000017dd         db  0x00 ; '.'
00000000000017de         db  0x00 ; '.'
00000000000017df         db  0x00 ; '.'
00000000000017e0         db  0x07 ; '.'
00000000000017e1         db  0x00 ; '.'
00000000000017e2         db  0x00 ; '.'
00000000000017e3         db  0x00 ; '.'
00000000000017e4         db  0x2d ; '-'
00000000000017e5         db  0x00 ; '.'
00000000000017e6         db  0x00 ; '.'
00000000000017e7         db  0x00 ; '.'
00000000000017e8         db  0x00 ; '.'
00000000000017e9         db  0x00 ; '.'
00000000000017ea         db  0x00 ; '.'
00000000000017eb         db  0x00 ; '.'
00000000000017ec         db  0x00 ; '.'
00000000000017ed         db  0x00 ; '.'
00000000000017ee         db  0x00 ; '.'
00000000000017ef         db  0x00 ; '.'
00000000000017f0         db  0x50 ; 'P'
00000000000017f1         db  0xdf ; '.'
00000000000017f2         db  0x20 ; ' '
00000000000017f3         db  0x00 ; '.'
00000000000017f4         db  0x00 ; '.'
00000000000017f5         db  0x00 ; '.'
00000000000017f6         db  0x00 ; '.'
00000000000017f7         db  0x00 ; '.'
00000000000017f8         db  0x07 ; '.'
00000000000017f9         db  0x00 ; '.'
00000000000017fa         db  0x00 ; '.'
00000000000017fb         db  0x00 ; '.'
00000000000017fc         db  0x2e ; '.'
00000000000017fd         db  0x00 ; '.'
00000000000017fe         db  0x00 ; '.'
00000000000017ff         db  0x00 ; '.'
0000000000001800         db  0x00 ; '.'
0000000000001801         db  0x00 ; '.'
0000000000001802         db  0x00 ; '.'
0000000000001803         db  0x00 ; '.'
0000000000001804         db  0x00 ; '.'
0000000000001805         db  0x00 ; '.'
0000000000001806         db  0x00 ; '.'
0000000000001807         db  0x00 ; '.'
0000000000001808         db  0x58 ; 'X'
0000000000001809         db  0xdf ; '.'
000000000000180a         db  0x20 ; ' '
000000000000180b         db  0x00 ; '.'
000000000000180c         db  0x00 ; '.'
000000000000180d         db  0x00 ; '.'
000000000000180e         db  0x00 ; '.'
000000000000180f         db  0x00 ; '.'
0000000000001810         db  0x07 ; '.'
0000000000001811         db  0x00 ; '.'
0000000000001812         db  0x00 ; '.'
0000000000001813         db  0x00 ; '.'
0000000000001814         db  0x2f ; '/'
0000000000001815         db  0x00 ; '.'
0000000000001816         db  0x00 ; '.'
0000000000001817         db  0x00 ; '.'
0000000000001818         db  0x00 ; '.'
0000000000001819         db  0x00 ; '.'
000000000000181a         db  0x00 ; '.'
000000000000181b         db  0x00 ; '.'
000000000000181c         db  0x00 ; '.'
000000000000181d         db  0x00 ; '.'
000000000000181e         db  0x00 ; '.'
000000000000181f         db  0x00 ; '.'
0000000000001820         db  0x60 ; '`'
0000000000001821         db  0xdf ; '.'
0000000000001822         db  0x20 ; ' '
0000000000001823         db  0x00 ; '.'
0000000000001824         db  0x00 ; '.'
0000000000001825         db  0x00 ; '.'
0000000000001826         db  0x00 ; '.'
0000000000001827         db  0x00 ; '.'
0000000000001828         db  0x07 ; '.'
0000000000001829         db  0x00 ; '.'
000000000000182a         db  0x00 ; '.'
000000000000182b         db  0x00 ; '.'
000000000000182c         db  0x30 ; '0'
000000000000182d         db  0x00 ; '.'
000000000000182e         db  0x00 ; '.'
000000000000182f         db  0x00 ; '.'
0000000000001830         db  0x00 ; '.'
0000000000001831         db  0x00 ; '.'
0000000000001832         db  0x00 ; '.'
0000000000001833         db  0x00 ; '.'
0000000000001834         db  0x00 ; '.'
0000000000001835         db  0x00 ; '.'
0000000000001836         db  0x00 ; '.'
0000000000001837         db  0x00 ; '.'
0000000000001838         db  0x68 ; 'h'
0000000000001839         db  0xdf ; '.'
000000000000183a         db  0x20 ; ' '
000000000000183b         db  0x00 ; '.'
000000000000183c         db  0x00 ; '.'
000000000000183d         db  0x00 ; '.'
000000000000183e         db  0x00 ; '.'
000000000000183f         db  0x00 ; '.'
0000000000001840         db  0x07 ; '.'
0000000000001841         db  0x00 ; '.'
0000000000001842         db  0x00 ; '.'
0000000000001843         db  0x00 ; '.'
0000000000001844         db  0x31 ; '1'
0000000000001845         db  0x00 ; '.'
0000000000001846         db  0x00 ; '.'
0000000000001847         db  0x00 ; '.'
0000000000001848         db  0x00 ; '.'
0000000000001849         db  0x00 ; '.'
000000000000184a         db  0x00 ; '.'
000000000000184b         db  0x00 ; '.'
000000000000184c         db  0x00 ; '.'
000000000000184d         db  0x00 ; '.'
000000000000184e         db  0x00 ; '.'
000000000000184f         db  0x00 ; '.'
0000000000001850         db  0x70 ; 'p'
0000000000001851         db  0xdf ; '.'
0000000000001852         db  0x20 ; ' '
0000000000001853         db  0x00 ; '.'
0000000000001854         db  0x00 ; '.'
0000000000001855         db  0x00 ; '.'
0000000000001856         db  0x00 ; '.'
0000000000001857         db  0x00 ; '.'
0000000000001858         db  0x07 ; '.'
0000000000001859         db  0x00 ; '.'
000000000000185a         db  0x00 ; '.'
000000000000185b         db  0x00 ; '.'
000000000000185c         db  0x32 ; '2'
000000000000185d         db  0x00 ; '.'
000000000000185e         db  0x00 ; '.'
000000000000185f         db  0x00 ; '.'
0000000000001860         db  0x00 ; '.'
0000000000001861         db  0x00 ; '.'
0000000000001862         db  0x00 ; '.'
0000000000001863         db  0x00 ; '.'
0000000000001864         db  0x00 ; '.'
0000000000001865         db  0x00 ; '.'
0000000000001866         db  0x00 ; '.'
0000000000001867         db  0x00 ; '.'
0000000000001868         db  0x78 ; 'x'
0000000000001869         db  0xdf ; '.'
000000000000186a         db  0x20 ; ' '
000000000000186b         db  0x00 ; '.'
000000000000186c         db  0x00 ; '.'
000000000000186d         db  0x00 ; '.'
000000000000186e         db  0x00 ; '.'
000000000000186f         db  0x00 ; '.'
0000000000001870         db  0x07 ; '.'
0000000000001871         db  0x00 ; '.'
0000000000001872         db  0x00 ; '.'
0000000000001873         db  0x00 ; '.'
0000000000001874         db  0x33 ; '3'
0000000000001875         db  0x00 ; '.'
0000000000001876         db  0x00 ; '.'
0000000000001877         db  0x00 ; '.'
0000000000001878         db  0x00 ; '.'
0000000000001879         db  0x00 ; '.'
000000000000187a         db  0x00 ; '.'
000000000000187b         db  0x00 ; '.'
000000000000187c         db  0x00 ; '.'
000000000000187d         db  0x00 ; '.'
000000000000187e         db  0x00 ; '.'
000000000000187f         db  0x00 ; '.'
0000000000001880         db  0x80 ; '.'
0000000000001881         db  0xdf ; '.'
0000000000001882         db  0x20 ; ' '
0000000000001883         db  0x00 ; '.'
0000000000001884         db  0x00 ; '.'
0000000000001885         db  0x00 ; '.'
0000000000001886         db  0x00 ; '.'
0000000000001887         db  0x00 ; '.'
0000000000001888         db  0x07 ; '.'
0000000000001889         db  0x00 ; '.'
000000000000188a         db  0x00 ; '.'
000000000000188b         db  0x00 ; '.'
000000000000188c         db  0x34 ; '4'
000000000000188d         db  0x00 ; '.'
000000000000188e         db  0x00 ; '.'
000000000000188f         db  0x00 ; '.'
0000000000001890         db  0x00 ; '.'
0000000000001891         db  0x00 ; '.'
0000000000001892         db  0x00 ; '.'
0000000000001893         db  0x00 ; '.'
0000000000001894         db  0x00 ; '.'
0000000000001895         db  0x00 ; '.'
0000000000001896         db  0x00 ; '.'
0000000000001897         db  0x00 ; '.'
0000000000001898         db  0x88 ; '.'
0000000000001899         db  0xdf ; '.'
000000000000189a         db  0x20 ; ' '
000000000000189b         db  0x00 ; '.'
000000000000189c         db  0x00 ; '.'
000000000000189d         db  0x00 ; '.'
000000000000189e         db  0x00 ; '.'
000000000000189f         db  0x00 ; '.'
00000000000018a0         db  0x07 ; '.'
00000000000018a1         db  0x00 ; '.'
00000000000018a2         db  0x00 ; '.'
00000000000018a3         db  0x00 ; '.'
00000000000018a4         db  0x35 ; '5'
00000000000018a5         db  0x00 ; '.'
00000000000018a6         db  0x00 ; '.'
00000000000018a7         db  0x00 ; '.'
00000000000018a8         db  0x00 ; '.'
00000000000018a9         db  0x00 ; '.'
00000000000018aa         db  0x00 ; '.'
00000000000018ab         db  0x00 ; '.'
00000000000018ac         db  0x00 ; '.'
00000000000018ad         db  0x00 ; '.'
00000000000018ae         db  0x00 ; '.'
00000000000018af         db  0x00 ; '.'
00000000000018b0         db  0x90 ; '.'
00000000000018b1         db  0xdf ; '.'
00000000000018b2         db  0x20 ; ' '
00000000000018b3         db  0x00 ; '.'
00000000000018b4         db  0x00 ; '.'
00000000000018b5         db  0x00 ; '.'
00000000000018b6         db  0x00 ; '.'
00000000000018b7         db  0x00 ; '.'
00000000000018b8         db  0x07 ; '.'
00000000000018b9         db  0x00 ; '.'
00000000000018ba         db  0x00 ; '.'
00000000000018bb         db  0x00 ; '.'
00000000000018bc         db  0x36 ; '6'
00000000000018bd         db  0x00 ; '.'
00000000000018be         db  0x00 ; '.'
00000000000018bf         db  0x00 ; '.'
00000000000018c0         db  0x00 ; '.'
00000000000018c1         db  0x00 ; '.'
00000000000018c2         db  0x00 ; '.'
00000000000018c3         db  0x00 ; '.'
00000000000018c4         db  0x00 ; '.'
00000000000018c5         db  0x00 ; '.'
00000000000018c6         db  0x00 ; '.'
00000000000018c7         db  0x00 ; '.'
00000000000018c8         db  0x98 ; '.'
00000000000018c9         db  0xdf ; '.'
00000000000018ca         db  0x20 ; ' '
00000000000018cb         db  0x00 ; '.'
00000000000018cc         db  0x00 ; '.'
00000000000018cd         db  0x00 ; '.'
00000000000018ce         db  0x00 ; '.'
00000000000018cf         db  0x00 ; '.'
00000000000018d0         db  0x07 ; '.'
00000000000018d1         db  0x00 ; '.'
00000000000018d2         db  0x00 ; '.'
00000000000018d3         db  0x00 ; '.'
00000000000018d4         db  0x37 ; '7'
00000000000018d5         db  0x00 ; '.'
00000000000018d6         db  0x00 ; '.'
00000000000018d7         db  0x00 ; '.'
00000000000018d8         db  0x00 ; '.'
00000000000018d9         db  0x00 ; '.'
00000000000018da         db  0x00 ; '.'
00000000000018db         db  0x00 ; '.'
00000000000018dc         db  0x00 ; '.'
00000000000018dd         db  0x00 ; '.'
00000000000018de         db  0x00 ; '.'
00000000000018df         db  0x00 ; '.'
00000000000018e0         db  0xa0 ; '.'
00000000000018e1         db  0xdf ; '.'
00000000000018e2         db  0x20 ; ' '
00000000000018e3         db  0x00 ; '.'
00000000000018e4         db  0x00 ; '.'
00000000000018e5         db  0x00 ; '.'
00000000000018e6         db  0x00 ; '.'
00000000000018e7         db  0x00 ; '.'
00000000000018e8         db  0x07 ; '.'
00000000000018e9         db  0x00 ; '.'
00000000000018ea         db  0x00 ; '.'
00000000000018eb         db  0x00 ; '.'
00000000000018ec         db  0x38 ; '8'
00000000000018ed         db  0x00 ; '.'
00000000000018ee         db  0x00 ; '.'
00000000000018ef         db  0x00 ; '.'
00000000000018f0         db  0x00 ; '.'
00000000000018f1         db  0x00 ; '.'
00000000000018f2         db  0x00 ; '.'
00000000000018f3         db  0x00 ; '.'
00000000000018f4         db  0x00 ; '.'
00000000000018f5         db  0x00 ; '.'
00000000000018f6         db  0x00 ; '.'
00000000000018f7         db  0x00 ; '.'
00000000000018f8         db  0xa8 ; '.'
00000000000018f9         db  0xdf ; '.'
00000000000018fa         db  0x20 ; ' '
00000000000018fb         db  0x00 ; '.'
00000000000018fc         db  0x00 ; '.'
00000000000018fd         db  0x00 ; '.'
00000000000018fe         db  0x00 ; '.'
00000000000018ff         db  0x00 ; '.'
0000000000001900         db  0x07 ; '.'
0000000000001901         db  0x00 ; '.'
0000000000001902         db  0x00 ; '.'
0000000000001903         db  0x00 ; '.'
0000000000001904         db  0x39 ; '9'
0000000000001905         db  0x00 ; '.'
0000000000001906         db  0x00 ; '.'
0000000000001907         db  0x00 ; '.'
0000000000001908         db  0x00 ; '.'
0000000000001909         db  0x00 ; '.'
000000000000190a         db  0x00 ; '.'
000000000000190b         db  0x00 ; '.'
000000000000190c         db  0x00 ; '.'
000000000000190d         db  0x00 ; '.'
000000000000190e         db  0x00 ; '.'
000000000000190f         db  0x00 ; '.'
0000000000001910         db  0xb0 ; '.'
0000000000001911         db  0xdf ; '.'
0000000000001912         db  0x20 ; ' '
0000000000001913         db  0x00 ; '.'
0000000000001914         db  0x00 ; '.'
0000000000001915         db  0x00 ; '.'
0000000000001916         db  0x00 ; '.'
0000000000001917         db  0x00 ; '.'
0000000000001918         db  0x07 ; '.'
0000000000001919         db  0x00 ; '.'
000000000000191a         db  0x00 ; '.'
000000000000191b         db  0x00 ; '.'
000000000000191c         db  0x3b ; ';'
000000000000191d         db  0x00 ; '.'
000000000000191e         db  0x00 ; '.'
000000000000191f         db  0x00 ; '.'
0000000000001920         db  0x00 ; '.'
0000000000001921         db  0x00 ; '.'
0000000000001922         db  0x00 ; '.'
0000000000001923         db  0x00 ; '.'
0000000000001924         db  0x00 ; '.'
0000000000001925         db  0x00 ; '.'
0000000000001926         db  0x00 ; '.'
0000000000001927         db  0x00 ; '.'
0000000000001928         db  0xb8 ; '.'
0000000000001929         db  0xdf ; '.'
000000000000192a         db  0x20 ; ' '
000000000000192b         db  0x00 ; '.'
000000000000192c         db  0x00 ; '.'
000000000000192d         db  0x00 ; '.'
000000000000192e         db  0x00 ; '.'
000000000000192f         db  0x00 ; '.'
0000000000001930         db  0x07 ; '.'
0000000000001931         db  0x00 ; '.'
0000000000001932         db  0x00 ; '.'
0000000000001933         db  0x00 ; '.'
0000000000001934         db  0x3c ; '<'
0000000000001935         db  0x00 ; '.'
0000000000001936         db  0x00 ; '.'
0000000000001937         db  0x00 ; '.'
0000000000001938         db  0x00 ; '.'
0000000000001939         db  0x00 ; '.'
000000000000193a         db  0x00 ; '.'
000000000000193b         db  0x00 ; '.'
000000000000193c         db  0x00 ; '.'
000000000000193d         db  0x00 ; '.'
000000000000193e         db  0x00 ; '.'
000000000000193f         db  0x00 ; '.'
0000000000001940         db  0xc0 ; '.'
0000000000001941         db  0xdf ; '.'
0000000000001942         db  0x20 ; ' '
0000000000001943         db  0x00 ; '.'
0000000000001944         db  0x00 ; '.'
0000000000001945         db  0x00 ; '.'
0000000000001946         db  0x00 ; '.'
0000000000001947         db  0x00 ; '.'
0000000000001948         db  0x07 ; '.'
0000000000001949         db  0x00 ; '.'
000000000000194a         db  0x00 ; '.'
000000000000194b         db  0x00 ; '.'
000000000000194c         db  0x3e ; '>'
000000000000194d         db  0x00 ; '.'
000000000000194e         db  0x00 ; '.'
000000000000194f         db  0x00 ; '.'
0000000000001950         db  0x00 ; '.'
0000000000001951         db  0x00 ; '.'
0000000000001952         db  0x00 ; '.'
0000000000001953         db  0x00 ; '.'
0000000000001954         db  0x00 ; '.'
0000000000001955         db  0x00 ; '.'
0000000000001956         db  0x00 ; '.'
0000000000001957         db  0x00 ; '.'
0000000000001958         db  0xc8 ; '.'
0000000000001959         db  0xdf ; '.'
000000000000195a         db  0x20 ; ' '
000000000000195b         db  0x00 ; '.'
000000000000195c         db  0x00 ; '.'
000000000000195d         db  0x00 ; '.'
000000000000195e         db  0x00 ; '.'
000000000000195f         db  0x00 ; '.'
0000000000001960         db  0x07 ; '.'
0000000000001961         db  0x00 ; '.'
0000000000001962         db  0x00 ; '.'
0000000000001963         db  0x00 ; '.'
0000000000001964         db  0x3f ; '?'
0000000000001965         db  0x00 ; '.'
0000000000001966         db  0x00 ; '.'
0000000000001967         db  0x00 ; '.'
0000000000001968         db  0x00 ; '.'
0000000000001969         db  0x00 ; '.'
000000000000196a         db  0x00 ; '.'
000000000000196b         db  0x00 ; '.'
000000000000196c         db  0x00 ; '.'
000000000000196d         db  0x00 ; '.'
000000000000196e         db  0x00 ; '.'
000000000000196f         db  0x00 ; '.'


        ; Section .init
        ; Range: [0x1970; 0x1987[ (23 bytes)
        ; File offset : [6512; 6535[ (23 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _init:
0000000000001970         sub        rsp, 0x8                                    ; CODE XREF=__libc_csu_init+44
0000000000001974         mov        rax, qword [qword_20dfe0]                   ; qword_20dfe0
000000000000197b         test       rax, rax
000000000000197e         je         loc_1982

0000000000001980         call       rax

                     loc_1982:
0000000000001982         add        rsp, 0x8                                    ; CODE XREF=_init+14
0000000000001986         ret
                        ; endp
0000000000001987         db  0x00 ; '.'
0000000000001988         db  0x00 ; '.'
0000000000001989         db  0x00 ; '.'
000000000000198a         db  0x00 ; '.'
000000000000198b         db  0x00 ; '.'
000000000000198c         db  0x00 ; '.'
000000000000198d         db  0x00 ; '.'
000000000000198e         db  0x00 ; '.'
000000000000198f         db  0x00 ; '.'


        ; Section .plt
        ; Range: [0x1990; 0x1d40[ (944 bytes)
        ; File offset : [6544; 7488[ (944 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR


                     loc_1990:
0000000000001990         push       qword [qword_20ddf0]                        ; Begin of unwind block (FDE at 0xc1e4), qword_20ddf0, CODE XREF=sub_19a6+5
0000000000001996         jmp        qword [qword_20ddf0+8]                      ; 0x20ddf8
                        ; endp
000000000000199c         nop        dword [rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___snprintf_chk:        // __snprintf_chk
00000000000019a0         jmp        qword [__snprintf_chk@GOT]                  ; __snprintf_chk, __snprintf_chk@GOT, CODE XREF=process_field+2728, process_field+4136, process_field+4281, process_field+4954
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_19a6:
00000000000019a6         push       0x0
00000000000019ab         jmp        loc_1990


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_free:        // free
00000000000019b0         jmp        qword [free@GOT]                            ; free, free@GOT, CODE XREF=unit_to_umax+140, unit_to_umax+308, set_fields+1009, set_fields+1274, reset_fields+33, mbsalign+309, mbsalign+319, ambsalign+131, ambsalign+150, quotearg_n_options+277, quotearg_free+55
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_19b6:
00000000000019b6         push       0x1
00000000000019bb         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_abort:        // abort
00000000000019c0         jmp        qword [abort@GOT]                           ; abort, abort@GOT, CODE XREF=set_program_name+154, sub_6910+2799, quotearg_n_options+417, set_custom_quoting+43, quotearg_n_style+132, quotearg_n_style_mem+128, quotearg_n_style_colon+132, quotearg_n_custom_mem+135, xalloc_die+48
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_19c6:
00000000000019c6         push       0x2
00000000000019cb         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___errno_location:        // __errno_location
00000000000019d0         jmp        qword [__errno_location@GOT]                ; __errno_location, __errno_location@GOT, CODE XREF=main+2064, main+2391, close_stdout+22, quotearg_n_options+28, clone_quoting_options+7, quotearg_buffer+45, quotearg_alloc_mem+42, xstrtol+65, xstrtoumax+67, close_stream+60, close_stream+104
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_19d6:
00000000000019d6         push       0x3
00000000000019db         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strncmp:        // strncmp
00000000000019e0         jmp        qword [strncmp@GOT]                         ; strncmp, strncmp@GOT, CODE XREF=simple_strtod_int+173, process_field+998, usage+1524, usage+1717, argmatch+162
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_19e6:
00000000000019e6         push       0x4
00000000000019eb         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j__exit:        // _exit
00000000000019f0         jmp        qword [_exit@GOT]                           ; _exit, _exit@GOT, CODE XREF=close_stdout+136
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_19f6:
00000000000019f6         push       0x5
00000000000019fb         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strcpy:        // strcpy
0000000000001a00         jmp        qword [strcpy@GOT]                          ; strcpy, strcpy@GOT, CODE XREF=process_field+3032
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a06:
0000000000001a06         push       0x6
0000000000001a0b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___fpending:        // __fpending
0000000000001a10         jmp        qword [__fpending@GOT]                      ; __fpending, __fpending@GOT, CODE XREF=close_stream+7
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a16:
0000000000001a16         push       0x7
0000000000001a1b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_qsort:        // qsort
0000000000001a20         jmp        qword [qsort@GOT]                           ; qsort, qsort@GOT, CODE XREF=set_fields+370
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a26:
0000000000001a26         push       0x8
0000000000001a2b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_wcswidth:        // wcswidth
0000000000001a30         jmp        qword [wcswidth@GOT]                        ; wcswidth, wcswidth@GOT, CODE XREF=mbsalign+647, mbsalign+844
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a36:
0000000000001a36         push       0x9
0000000000001a3b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_mbstowcs:        // mbstowcs
0000000000001a40         jmp        qword [mbstowcs@GOT]                        ; mbstowcs, mbstowcs@GOT, CODE XREF=mbsalign+438, mbsalign+544
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a46:
0000000000001a46         push       0xa
0000000000001a4b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_textdomain:        // textdomain
0000000000001a50         jmp        qword [textdomain@GOT]                      ; textdomain, textdomain@GOT, CODE XREF=main+89
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a56:
0000000000001a56         push       0xb
0000000000001a5b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fclose:        // fclose
0000000000001a60         jmp        qword [fclose@GOT]                          ; fclose, fclose@GOT, CODE XREF=rpl_fclose+54, rpl_fclose+107
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a66:
0000000000001a66         push       0xc
0000000000001a6b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_bindtextdomain:        // bindtextdomain
0000000000001a70         jmp        qword [bindtextdomain@GOT]                  ; bindtextdomain, bindtextdomain@GOT, CODE XREF=main+77
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a76:
0000000000001a76         push       0xd
0000000000001a7b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_dcgettext:        // dcgettext
0000000000001a80         jmp        qword [dcgettext@GOT]                       ; dcgettext, dcgettext@GOT, CODE XREF=main+1205, main+1367, main+2056, main+2278, main+2732, main+2767, main+2805, main+2882, main+3170, main+3220, main+3270
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a86:
0000000000001a86         push       0xe
0000000000001a8b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_get_mb_cur_max:        // __ctype_get_mb_cur_max
0000000000001a90         jmp        qword [__ctype_get_mb_cur_max@GOT]          ; __ctype_get_mb_cur_max, __ctype_get_mb_cur_max@GOT, CODE XREF=mbsalign+416, quotearg_buffer_restyled+108
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a96:
0000000000001a96         push       0xf
0000000000001a9b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strlen:        // strlen
0000000000001aa0         jmp        qword [strlen@GOT]                          ; strlen, strlen@GOT, CODE XREF=main+143, unit_to_umax+27, process_field+181, process_field+192, process_field+867, argmatch+33, argmatch+174, mbsalign+36, quotearg_buffer_restyled+343, sub_6910+411, sub_6910+1742
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1aa6:
0000000000001aa6         push       0x10
0000000000001aab         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___stack_chk_fail:        // __stack_chk_fail
0000000000001ab0         jmp        qword [__stack_chk_fail@GOT]                ; __stack_chk_fail, __stack_chk_fail@GOT, CODE XREF=main+3485, unit_to_umax+363, process_field+5868, sub_6910+2739, quotearg_n_style+137, quotearg_n_style_mem+133, quotearg_char_mem+147, quotearg_n_style_colon+137, quotearg_n_custom_mem+140, version_etc_va+101, version_etc+192
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ab6:
0000000000001ab6         push       0x11
0000000000001abb         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_getopt_long:        // getopt_long
0000000000001ac0         jmp        qword [getopt_long@GOT]                     ; getopt_long, getopt_long@GOT, CODE XREF=main+194
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ac6:
0000000000001ac6         push       0x12
0000000000001acb         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_mbrtowc:        // mbrtowc
0000000000001ad0         jmp        qword [mbrtowc@GOT]                         ; mbrtowc, mbrtowc@GOT, CODE XREF=rpl_mbrtowc+50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ad6:
0000000000001ad6         push       0x13
0000000000001adb         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strchr:        // strchr
0000000000001ae0         jmp        qword [strchr@GOT]                          ; strchr, strchr@GOT, CODE XREF=process_field+1133, xstrtol+236, xstrtol+271, xstrtol+323, xstrtoumax+291, xstrtoumax+323, xstrtoumax+380
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ae6:
0000000000001ae6         push       0x14
0000000000001aeb         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___overflow:        // __overflow
0000000000001af0         jmp        qword [__overflow@GOT]                      ; __overflow, __overflow@GOT, CODE XREF=process_line+428, process_line+444, argmatch_valid+283
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1af6:
0000000000001af6         push       0x15
0000000000001afb         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strrchr:        // strrchr
0000000000001b00         jmp        qword [strrchr@GOT]                         ; strrchr, strrchr@GOT, CODE XREF=set_program_name+14
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b06:
0000000000001b06         push       0x16
0000000000001b0b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_lseek:        // lseek
0000000000001b10         jmp        qword [lseek@GOT]                           ; lseek, lseek@GOT, CODE XREF=rpl_fclose+89, j_j_fseeko+49
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b16:
0000000000001b16         push       0x17
0000000000001b1b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___assert_fail:        // __assert_fail
0000000000001b20         jmp        qword [__assert_fail@GOT]                   ; __assert_fail, __assert_fail@GOT, CODE XREF=xstrtol+1705, xstrtoumax+927
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b26:
0000000000001b26         push       0x18
0000000000001b2b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___strtoul_internal:        // __strtoul_internal
0000000000001b30         jmp        qword [__strtoul_internal@GOT]              ; __strtoul_internal, __strtoul_internal@GOT, CODE XREF=xstrtoumax+142
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b36:
0000000000001b36         push       0x19
0000000000001b3b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memset:        // memset
0000000000001b40         jmp        qword [memset@GOT]                          ; memset, memset@GOT, CODE XREF=quotearg_n_options+153, xzalloc+18
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b46:
0000000000001b46         push       0x1a
0000000000001b4b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strspn:        // strspn
0000000000001b50         jmp        qword [strspn@GOT]                          ; strspn, strspn@GOT, CODE XREF=main+2342, set_fields+1198
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b56:
0000000000001b56         push       0x1b
0000000000001b5b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strndup:        // strndup
0000000000001b60         jmp        qword [strndup@GOT]                         ; strndup, strndup@GOT, CODE XREF=xstrndup+4
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b66:
0000000000001b66         push       0x1c
0000000000001b6b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memcmp:        // memcmp
0000000000001b70         jmp        qword [memcmp@GOT]                          ; memcmp, memcmp@GOT, CODE XREF=argmatch+111, argmatch_valid+150, argmatch_to_argument+56, quotearg_buffer_restyled+410
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b76:
0000000000001b76         push       0x1d
0000000000001b7b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fputs_unlocked:        // fputs_unlocked
0000000000001b80         jmp        qword [fputs_unlocked@GOT]                  ; fputs_unlocked, fputs_unlocked@GOT, CODE XREF=main+1884, process_field+103, process_field+828, process_field+3056, process_field+3080, process_field+3108, usage+157, usage+194, usage+231, usage+268, usage+305
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b86:
0000000000001b86         push       0x1e
0000000000001b8b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_calloc:        // calloc
0000000000001b90         jmp        qword [calloc@GOT]                          ; calloc, calloc@GOT, CODE XREF=xcalloc+26
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b96:
0000000000001b96         push       0x1f
0000000000001b9b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strcmp:        // strcmp
0000000000001ba0         jmp        qword [strcmp@GOT]                          ; strcmp, strcmp@GOT, CODE XREF=process_field+214
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ba6:
0000000000001ba6         push       0x20
0000000000001bab         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strtol:        // strtol
0000000000001bb0         jmp        qword [strtol@GOT]                          ; strtol, strtol@GOT, CODE XREF=main+2423, main+2966, xstrtol+87
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1bb6:
0000000000001bb6         push       0x21
0000000000001bbb         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memcpy:        // memcpy
0000000000001bc0         jmp        qword [memcpy@GOT]                          ; memcpy, memcpy@GOT, CODE XREF=unit_to_umax+210, xmemdup+35
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1bc6:
0000000000001bc6         push       0x22
0000000000001bcb         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fileno:        // fileno
0000000000001bd0         jmp        qword [fileno@GOT]                          ; fileno, fileno@GOT, CODE XREF=rpl_fclose+7, rpl_fclose+75, j_j_fseeko+36
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1bd6:
0000000000001bd6         push       0x23
0000000000001bdb         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_wcwidth:        // wcwidth
0000000000001be0         jmp        qword [wcwidth@GOT]                         ; wcwidth, wcwidth@GOT, CODE XREF=mbsalign+750
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1be6:
0000000000001be6         push       0x24
0000000000001beb         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_malloc:        // malloc
0000000000001bf0         jmp        qword [malloc@GOT]                          ; malloc, malloc@GOT, CODE XREF=mbsalign+516, mbsalign+693, xmalloc+4
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1bf6:
0000000000001bf6         push       0x25
0000000000001bfb         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fflush:        // fflush
0000000000001c00         jmp        qword [fflush@GOT]                          ; fflush, fflush@GOT, CODE XREF=rpl_fflush+30, rpl_fflush+59
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c06:
0000000000001c06         push       0x26
0000000000001c0b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_nl_langinfo:        // nl_langinfo
0000000000001c10         jmp        qword [nl_langinfo@GOT]                     ; nl_langinfo, nl_langinfo@GOT, CODE XREF=main+99, main+2250, locale_charset+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c16:
0000000000001c16         push       0x27
0000000000001c1b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___freading:        // __freading
0000000000001c20         jmp        qword [__freading@GOT]                      ; __freading, __freading@GOT, CODE XREF=rpl_fclose+19, rpl_fflush+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c26:
0000000000001c26         push       0x28
0000000000001c2b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_realloc:        // realloc
0000000000001c30         jmp        qword [realloc@GOT]                         ; realloc, realloc@GOT, CODE XREF=ambsalign+50, xrealloc+17
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c36:
0000000000001c36         push       0x29
0000000000001c3b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_setlocale:        // setlocale
0000000000001c40         jmp        qword [setlocale@GOT]                       ; setlocale, setlocale@GOT, CODE XREF=main+55, usage+1499, usage+1692, hard_locale+6
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c46:
0000000000001c46         push       0x2a
0000000000001c4b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___printf_chk:        // __printf_chk
0000000000001c50         jmp        qword [__printf_chk@GOT]                    ; __printf_chk, __printf_chk@GOT, CODE XREF=usage+120, usage+1163, usage+1232, usage+1487, usage+1580, usage+1641, usage+1680, usage+1783, emit_bug_reporting_address+37, emit_bug_reporting_address+85
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c56:
0000000000001c56         push       0x2b
0000000000001c5b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_mempcpy:        // mempcpy
0000000000001c60         jmp        qword [mempcpy@GOT]                         ; mempcpy, mempcpy@GOT, CODE XREF=mbsalign+247
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c66:
0000000000001c66         push       0x2c
0000000000001c6b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memmove:        // memmove
0000000000001c70         jmp        qword [memmove@GOT]                         ; memmove, memmove@GOT, CODE XREF=set_fields+493
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c76:
0000000000001c76         push       0x2d
0000000000001c7b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_error:        // error
0000000000001c80         jmp        qword [error@GOT]                           ; error, error@GOT, CODE XREF=main+1225, main+1381, main+2078, main+2292, main+2746, main+2781, main+2819, main+2896, main+3190, main+3240, main+3290
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c86:
0000000000001c86         push       0x2e
0000000000001c8b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fseeko:        // fseeko
0000000000001c90         jmp        qword [fseeko@GOT]                          ; fseeko, fseeko@GOT, CODE XREF=j_j_fseeko
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c96:
0000000000001c96         push       0x2f
0000000000001c9b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___cxa_atexit:        // __cxa_atexit
0000000000001ca0         jmp        qword [__cxa_atexit@GOT]                    ; __cxa_atexit, __cxa_atexit@GOT, CODE XREF=atexit+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ca6:
0000000000001ca6         push       0x30
0000000000001cab         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_wcstombs:        // wcstombs
0000000000001cb0         jmp        qword [wcstombs@GOT]                        ; wcstombs, wcstombs@GOT, CODE XREF=mbsalign+674, mbsalign+807
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1cb6:
0000000000001cb6         push       0x31
0000000000001cbb         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_exit:        // exit
0000000000001cc0         jmp        qword [exit@GOT]                            ; exit, exit@GOT, CODE XREF=main+615, usage+88
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1cc6:
0000000000001cc6         push       0x32
0000000000001ccb         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fwrite:        // fwrite
0000000000001cd0         jmp        qword [fwrite@GOT]                          ; fwrite, fwrite@GOT, CODE XREF=process_field+2016, process_field+4902, set_program_name+149
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1cd6:
0000000000001cd6         push       0x33
0000000000001cdb         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___fprintf_chk:        // __fprintf_chk
0000000000001ce0         jmp        qword [__fprintf_chk@GOT]                   ; __fprintf_chk, __fprintf_chk@GOT, CODE XREF=main+1709, process_field+483, process_field+580, process_field+2128, process_field+2340, process_field+2644, process_field+2908, process_field+3333, process_field+3410, process_field+3613, process_field+3990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ce6:
0000000000001ce6         push       0x34
0000000000001ceb         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___strncat_chk:        // __strncat_chk
0000000000001cf0         jmp        qword [__strncat_chk@GOT]                   ; __strncat_chk, __strncat_chk@GOT, CODE XREF=process_field+2850, process_field+5624
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1cf6:
0000000000001cf6         push       0x35
0000000000001cfb         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_mbsinit:        // mbsinit
0000000000001d00         jmp        qword [mbsinit@GOT]                         ; mbsinit, mbsinit@GOT, CODE XREF=sub_6910+616
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d06:
0000000000001d06         push       0x36
0000000000001d0b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_iswprint:        // iswprint
0000000000001d10         jmp        qword [iswprint@GOT]                        ; iswprint, iswprint@GOT, CODE XREF=mbsalign+605, sub_6910+592
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d16:
0000000000001d16         push       0x37
0000000000001d1b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_getdelim:        // getdelim
0000000000001d20         jmp        qword [getdelim@GOT]                        ; getdelim, getdelim@GOT, CODE XREF=main+1932, main+2020
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d26:
0000000000001d26         push       0x38
0000000000001d2b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_b_loc:        // __ctype_b_loc
0000000000001d30         jmp        qword [__ctype_b_loc@GOT]                   ; __ctype_b_loc, __ctype_b_loc@GOT, CODE XREF=main+3002, process_field+261, process_field+1059, process_line+202, set_fields+107, sub_66b0+51, xstrtoumax+85
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d36:
0000000000001d36         push       0x39
0000000000001d3b         jmp        0x1990
                        ; endp


        ; Section .plt.got
        ; Range: [0x1d40; 0x1d48[ (8 bytes)
        ; File offset : [7488; 7496[ (8 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_qword_20dff0:        // qword_20dff0
0000000000001d40         jmp        qword [qword_20dff0]                        ; qword, End of unwind block (FDE at 0xc1e4), Begin of unwind block (FDE at 0xc20c), qword_20dff0, CODE XREF=__do_global_dtors_aux+30
                        ; endp
0000000000001d46         align      8
0000000000001d48         db  0x00 ; '.'                                         ; End of unwind block (FDE at 0xc20c)
0000000000001d49         db  0x00 ; '.'
0000000000001d4a         db  0x00 ; '.'
0000000000001d4b         db  0x00 ; '.'
0000000000001d4c         db  0x00 ; '.'
0000000000001d4d         db  0x00 ; '.'
0000000000001d4e         db  0x00 ; '.'
0000000000001d4f         db  0x00 ; '.'


        ; Section .text
        ; Range: [0x1d50; 0x947e[ (30510 bytes)
        ; File offset : [7504; 38014[ (30510 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112


                     main:
0000000000001d50         push       r15                                         ; Begin of unwind block (FDE at 0xc458), DATA XREF=_start+29
0000000000001d52         push       r14
0000000000001d54         push       r13
0000000000001d56         push       r12
0000000000001d58         push       rbp
0000000000001d59         push       rbx
0000000000001d5a         mov        ebp, edi
0000000000001d5c         mov        rbx, rsi
0000000000001d5f         sub        rsp, 0x48
0000000000001d63         mov        rdi, qword [rsi]
0000000000001d66         mov        rax, qword [fs:0x28]
0000000000001d6f         mov        qword [rsp+0x78+var_40], rax
0000000000001d74         xor        eax, eax
0000000000001d76         call       set_program_name                            ; set_program_name
0000000000001d7b         lea        rsi, qword [aReturningValue_9559+29]        ; argument "__locale" for method j_setlocale, 0x9576
0000000000001d82         mov        edi, 0x6                                    ; argument "__category" for method j_setlocale
0000000000001d87         call       j_setlocale                                 ; setlocale
0000000000001d8c         lea        rsi, qword [aUsrlocalsharel]                ; argument "__dirname" for method j_bindtextdomain, "/usr/local/share/locale"
0000000000001d93         lea        rdi, qword [aCoreutils]                     ; argument "__domainname" for method j_bindtextdomain, "coreutils"
0000000000001d9a         mov        r13, rax
0000000000001d9d         call       j_bindtextdomain                            ; bindtextdomain
0000000000001da2         lea        rdi, qword [aCoreutils]                     ; argument "__domainname" for method j_textdomain, "coreutils"
0000000000001da9         call       j_textdomain                                ; textdomain
0000000000001dae         mov        edi, 0x10000                                ; argument "__item" for method j_nl_langinfo
0000000000001db3         call       j_nl_langinfo                               ; nl_langinfo
0000000000001db8         test       rax, rax
0000000000001dbb         mov        qword [decimal_point], rax                  ; decimal_point
0000000000001dc2         je         loc_1e89

0000000000001dc8         cmp        byte [rax], 0x0
0000000000001dcb         je         loc_1e89

                     loc_1dd1:
0000000000001dd1         mov        rdi, qword [decimal_point]                  ; argument "__s" for method j_strlen, decimal_point, CODE XREF=main+327
0000000000001dd8         lea        r12, qword [longopts]                       ; longopts
0000000000001ddf         call       j_strlen                                    ; strlen
0000000000001de4         lea        rdi, qword [close_stdout]                   ; argument "__func" for method atexit, close_stdout
0000000000001deb         mov        dword [decimal_point_length], eax           ; decimal_point_length
0000000000001df1         call       atexit                                      ; atexit
0000000000001df6         nop        word [cs:rax+rax]

                     loc_1e00:
0000000000001e00         lea        rdx, qword [aUsrlocalsharel+26]             ; argument "__shortopts" for method j_getopt_long, 0x96a0, CODE XREF=main+308, main+409, main+513, main+638, main+715, main+739, main+766, main+786, main+830, main+902, main+969
0000000000001e07         xor        r8d, r8d                                    ; argument "__longind" for method j_getopt_long
0000000000001e0a         mov        rcx, r12                                    ; argument "__longopts" for method j_getopt_long
0000000000001e0d         mov        rsi, rbx                                    ; argument "___argv" for method j_getopt_long
0000000000001e10         mov        edi, ebp                                    ; argument "___argc" for method j_getopt_long
0000000000001e12         call       j_getopt_long                               ; getopt_long
0000000000001e17         cmp        eax, 0xffffffff
0000000000001e1a         je         loc_222e

0000000000001e20         cmp        eax, 0x84
0000000000001e25         je         loc_2140

0000000000001e2b         jle        loc_1ea0

0000000000001e2d         cmp        eax, 0x89
0000000000001e32         je         loc_1fc7

0000000000001e38         jg         loc_1ef0

0000000000001e3e         cmp        eax, 0x86
0000000000001e43         je         loc_2058

0000000000001e49         jl         loc_2040

0000000000001e4f         cmp        eax, 0x87
0000000000001e54         je         loc_20e0

0000000000001e5a         cmp        eax, 0x88
0000000000001e5f         jne        loc_1f7b

0000000000001e65         cmp        qword [n_frp], 0x0                          ; n_frp
0000000000001e6d         jne        loc_2b6c

0000000000001e73         mov        rdi, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5
0000000000001e7a         mov        esi, 0x1
0000000000001e7f         call       set_fields                                  ; set_fields
0000000000001e84         jmp        loc_1e00

                     loc_1e89:
0000000000001e89         lea        rax, qword [aUsrlocalsharel+24]             ; 0x969e, CODE XREF=main+114, main+123
0000000000001e90         mov        qword [decimal_point], rax                  ; decimal_point
0000000000001e97         jmp        loc_1dd1
0000000000001e9c         align      32

                     loc_1ea0:
0000000000001ea0         cmp        eax, 0x7a                                   ; CODE XREF=main+219
0000000000001ea3         je         loc_2188

0000000000001ea9         jle        loc_1f60

0000000000001eaf         cmp        eax, 0x81
0000000000001eb4         je         loc_2020

0000000000001eba         jle        loc_1fd8

0000000000001ec0         cmp        eax, 0x82
0000000000001ec5         je         loc_2098

0000000000001ecb         cmp        eax, 0x83
0000000000001ed0         jne        loc_1f7b

0000000000001ed6         mov        rdi, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5
0000000000001edd         call       unit_to_umax                                ; unit_to_umax
0000000000001ee2         mov        qword [to_unit_size], rax                   ; to_unit_size
0000000000001ee9         jmp        loc_1e00
0000000000001eee         align      16

                     loc_1ef0:
0000000000001ef0         cmp        eax, 0x8b                                   ; CODE XREF=main+232
0000000000001ef5         je         loc_21b0

0000000000001efb         jl         loc_1fc0

0000000000001f01         cmp        eax, 0x8c
0000000000001f06         je         loc_2198

0000000000001f0c         cmp        eax, 0x8d
0000000000001f11         jne        loc_1f7b

0000000000001f13         mov        r9, qword [argmatch_die]                    ; argmatch_die
0000000000001f1a         mov        rsi, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5
0000000000001f21         lea        rdx, qword [inval_args]                     ; inval_args
0000000000001f28         lea        rcx, qword [inval_types]                    ; inval_types
0000000000001f2f         lea        rdi, qword [aInvalid]                       ; "--invalid"
0000000000001f36         mov        r8d, 0x4
0000000000001f3c         call       __xargmatch_internal                        ; __xargmatch_internal
0000000000001f41         lea        rdx, qword [inval_types]                    ; inval_types
0000000000001f48         mov        eax, dword [rdx+rax*4]
0000000000001f4b         mov        dword [inval_style], eax                    ; inval_style
0000000000001f51         jmp        loc_1e00
0000000000001f56         align      32

                     loc_1f60:
0000000000001f60         cmp        eax, 0xffffff7e                             ; CODE XREF=main+345
0000000000001f65         je         loc_2992

0000000000001f6b         cmp        eax, 0x64
0000000000001f6e         je         loc_2070

0000000000001f74         cmp        eax, 0xffffff7d
0000000000001f79         je         loc_1f88

                     loc_1f7b:
0000000000001f7b         mov        edi, 0x1                                    ; argument #1 for method usage, CODE XREF=main+271, main+384, main+449, main+651
0000000000001f80         call       usage                                       ; usage
0000000000001f85         nop        dword [rax]

                     loc_1f88:
0000000000001f88         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=main+553
0000000000001f8f         mov        rcx, qword [Version]                        ; Version
0000000000001f96         lea        r8, qword [aAssafGordon]                    ; "Assaf Gordon"
0000000000001f9d         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0x9647
0000000000001fa4         lea        rsi, qword [aNumfmt]                        ; "numfmt"
0000000000001fab         xor        r9d, r9d
0000000000001fae         xor        eax, eax
0000000000001fb0         call       version_etc                                 ; version_etc
0000000000001fb5         xor        edi, edi                                    ; argument "__status" for method j_exit
0000000000001fb7         call       j_exit                                      ; exit
                        ; endp
0000000000001fbc         align      64

                     loc_1fc0:
0000000000001fc0         mov        byte [dev_debug], 0x1                       ; dev_debug, CODE XREF=main+427

                     loc_1fc7:
0000000000001fc7         mov        byte [debug], 0x1                           ; debug, CODE XREF=main+226
0000000000001fce         jmp        loc_1e00
0000000000001fd3         align      8

                     loc_1fd8:
0000000000001fd8         add        eax, 0xffffff80                             ; CODE XREF=main+362
0000000000001fdb         jne        loc_1f7b

0000000000001fdd         mov        r9, qword [argmatch_die]                    ; argmatch_die
0000000000001fe4         mov        rsi, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5
0000000000001feb         lea        rdx, qword [scale_from_args]                ; scale_from_args
0000000000001ff2         lea        rcx, qword [scale_from_types]               ; scale_from_types
0000000000001ff9         lea        rdi, qword [aFrom]                          ; "--from"
0000000000002000         mov        r8d, 0x4
0000000000002006         call       __xargmatch_internal                        ; __xargmatch_internal
000000000000200b         lea        rdx, qword [scale_from_types]               ; scale_from_types
0000000000002012         mov        eax, dword [rdx+rax*4]
0000000000002015         mov        dword [scale_from], eax                     ; scale_from
000000000000201b         jmp        loc_1e00

                     loc_2020:
0000000000002020         mov        rdi, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5, CODE XREF=main+356
0000000000002027         call       unit_to_umax                                ; unit_to_umax
000000000000202c         mov        qword [from_unit_size], rax                 ; from_unit_size
0000000000002033         jmp        loc_1e00
0000000000002038         align      64

                     loc_2040:
0000000000002040         mov        rax, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5, CODE XREF=main+249
0000000000002047         mov        qword [suffix], rax                         ; suffix
000000000000204e         jmp        loc_1e00
0000000000002053         align      8

                     loc_2058:
0000000000002058         mov        dword [grouping], 0x1                       ; grouping, CODE XREF=main+243
0000000000002062         jmp        loc_1e00
0000000000002067         align      16

                     loc_2070:
0000000000002070         mov        rdx, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5, CODE XREF=main+542
0000000000002077         movsx      eax, byte [rdx]
000000000000207a         test       al, al
000000000000207c         je         loc_2088

000000000000207e         cmp        byte [rdx+1], 0x0
0000000000002082         jne        loc_2a65

                     loc_2088:
0000000000002088         mov        dword [delimiter], eax                      ; delimiter, CODE XREF=main+812
000000000000208e         jmp        loc_1e00
0000000000002093         align      8

                     loc_2098:
0000000000002098         mov        r9, qword [argmatch_die]                    ; argmatch_die, CODE XREF=main+373
000000000000209f         mov        rsi, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5
00000000000020a6         lea        rdx, qword [scale_to_args]                  ; scale_to_args
00000000000020ad         lea        rcx, qword [scale_to_types]                 ; scale_to_types
00000000000020b4         lea        rdi, qword [aFrom+7]                        ; 0x96ab
00000000000020bb         mov        r8d, 0x4
00000000000020c1         call       __xargmatch_internal                        ; __xargmatch_internal
00000000000020c6         lea        rdx, qword [scale_to_types]                 ; scale_to_types
00000000000020cd         mov        eax, dword [rdx+rax*4]
00000000000020d0         mov        dword [scale_to], eax                       ; scale_to
00000000000020d6         jmp        loc_1e00
00000000000020db         align      32

                     loc_20e0:
00000000000020e0         mov        rdi, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5, CODE XREF=main+260
00000000000020e7         lea        r8, qword [aReturningValue_9559+29]         ; 0x9576
00000000000020ee         lea        rcx, qword [padding_width]                  ; padding_width
00000000000020f5         xor        esi, esi
00000000000020f7         mov        edx, 0xa
00000000000020fc         call       xstrtol                                     ; xstrtol
0000000000002101         test       eax, eax
0000000000002103         jne        loc_2a2f

0000000000002109         mov        rax, qword [padding_width]                  ; padding_width
0000000000002110         test       rax, rax
0000000000002113         je         loc_2a2f

0000000000002119         jns        loc_1e00

000000000000211f         neg        rax
0000000000002122         mov        dword [padding_alignment], 0x0              ; padding_alignment
000000000000212c         mov        qword [padding_width], rax                  ; padding_width
0000000000002133         jmp        loc_1e00
0000000000002138         align      64

                     loc_2140:
0000000000002140         mov        r9, qword [argmatch_die]                    ; argmatch_die, CODE XREF=main+213
0000000000002147         mov        rsi, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5
000000000000214e         lea        rdx, qword [round_args]                     ; round_args
0000000000002155         lea        rcx, qword [round_types]                    ; round_types
000000000000215c         lea        rdi, qword [aRound]                         ; "--round"
0000000000002163         mov        r8d, 0x4
0000000000002169         call       __xargmatch_internal                        ; __xargmatch_internal
000000000000216e         lea        rdx, qword [round_types]                    ; round_types
0000000000002175         mov        eax, dword [rdx+rax*4]
0000000000002178         mov        dword [round_style], eax                    ; round_style
000000000000217e         jmp        loc_1e00
0000000000002183         align      8

                     loc_2188:
0000000000002188         mov        byte [line_delim], 0x0                      ; line_delim, CODE XREF=main+339
000000000000218f         jmp        loc_1e00
0000000000002194         align      8

                     loc_2198:
0000000000002198         mov        rax, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5, CODE XREF=main+438
000000000000219f         mov        qword [format_str], rax                     ; format_str
00000000000021a6         jmp        loc_1e00
00000000000021ab         align      16

                     loc_21b0:
00000000000021b0         mov        rdi, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5, CODE XREF=main+421
00000000000021b7         test       rdi, rdi
00000000000021ba         je         loc_221e

00000000000021bc         lea        r8, qword [aReturningValue_9559+29]         ; 0x9576
00000000000021c3         lea        rcx, qword [header]                         ; header
00000000000021ca         xor        esi, esi
00000000000021cc         mov        edx, 0xa
00000000000021d1         call       xstrtoumax                                  ; xstrtoumax
00000000000021d6         test       eax, eax
00000000000021d8         jne        loc_21e8

00000000000021da         cmp        qword [header], 0x0                         ; header
00000000000021e2         jne        loc_1e00

                     loc_21e8:
00000000000021e8         mov        rdi, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5, CODE XREF=main+1160
00000000000021ef         call       quote                                       ; quote
00000000000021f4         lea        rsi, qword [aInvalidHeaderV]                ; argument "msgid" for method j_dcgettext, "invalid header value %s"
00000000000021fb         mov        rbx, rax
00000000000021fe         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002203         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002205         call       j_dcgettext                                 ; dcgettext
000000000000220a         mov        rcx, rbx
000000000000220d         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002210         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002212         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000002217         xor        eax, eax
0000000000002219         call       j_error                                     ; error

                     loc_221e:
000000000000221e         mov        qword [header], 0x1                         ; header, CODE XREF=main+1130
0000000000002229         jmp        loc_1e00

                     loc_222e:
000000000000222e         cmp        qword [format_str], 0x0                     ; format_str, CODE XREF=main+202
0000000000002236         je         loc_2245

0000000000002238         cmp        dword [grouping], 0x0                       ; grouping
000000000000223f         jne        loc_2b16

                     loc_2245:
0000000000002245         test       r13, r13                                    ; CODE XREF=main+1254
0000000000002248         jne        loc_2257

000000000000224a         cmp        byte [debug], 0x0                           ; debug
0000000000002251         jne        loc_2811

                     loc_2257:
0000000000002257         cmp        byte [debug], 0x0                           ; debug, CODE XREF=main+1272, main+2786
000000000000225e         je         loc_22ba

0000000000002260         cmp        dword [scale_from], 0x0                     ; scale_from
0000000000002267         jne        loc_22ba

0000000000002269         cmp        dword [scale_to], 0x0                       ; scale_to
0000000000002270         jne        loc_22ba

0000000000002272         cmp        dword [grouping], 0x0                       ; grouping
0000000000002279         mov        r12, qword [format_str]                     ; format_str
0000000000002280         jne        loc_2968

0000000000002286         cmp        qword [padding_width], 0x0                  ; padding_width
000000000000228e         jne        loc_2984

0000000000002294         test       r12, r12
0000000000002297         jne        loc_22ca

0000000000002299         lea        rsi, qword [aNoConversionOp]                ; argument "msgid" for method j_dcgettext, "no conversion option specified"
00000000000022a0         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000022a5         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000022a7         call       j_dcgettext                                 ; dcgettext
00000000000022ac         xor        esi, esi                                    ; argument "__errnum" for method j_error
00000000000022ae         mov        rdx, rax                                    ; argument "__format" for method j_error
00000000000022b1         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000022b3         xor        eax, eax
00000000000022b5         call       j_error                                     ; error

                     loc_22ba:
00000000000022ba         mov        r12, qword [format_str]                     ; format_str, CODE XREF=main+1294, main+1303, main+1312
00000000000022c1         test       r12, r12
00000000000022c4         je         loc_2406

                     loc_22ca:
00000000000022ca         mov        qword [rsp+0x78+var_48], 0x0                ; CODE XREF=main+1351, main+3099, main+3127
00000000000022d3         xor        r15d, r15d
00000000000022d6         xor        eax, eax
00000000000022d8         jmp        loc_22f4
00000000000022da         align      32

                     loc_22e0:
00000000000022e0         test       dl, dl                                      ; CODE XREF=main+1452
00000000000022e2         je         loc_2999

00000000000022e8         mov        edx, 0x1

                     loc_22ed:
00000000000022ed         add        rax, rdx                                    ; CODE XREF=main+1475
00000000000022f0         add        r15, 0x1

                     loc_22f4:
00000000000022f4         movzx      edx, byte [r12+rax]                         ; CODE XREF=main+1416
00000000000022f9         cmp        dl, 0x25
00000000000022fc         jne        loc_22e0

00000000000022fe         cmp        byte [r12+rax+1], 0x25
0000000000002304         lea        r13, qword [rax+1]
0000000000002308         jne        loc_2658

000000000000230e         mov        edx, 0x2
0000000000002313         jmp        loc_22ed

                     loc_2315:
0000000000002315         test       r15, r15                                    ; CODE XREF=main+2591
0000000000002318         je         loc_286b

                     loc_231e:
000000000000231e         mov        rsi, r15                                    ; CODE XREF=main+3119
0000000000002321         mov        rdi, r12
0000000000002324         call       xstrndup                                    ; xstrndup
0000000000002329         cmp        byte [r13], 0x0
000000000000232e         mov        qword [format_str_prefix], rax              ; format_str_prefix
0000000000002335         jne        loc_286b

                     loc_233b:
000000000000233b         cmp        byte [dev_debug], 0x0                       ; dev_debug, CODE XREF=main+2858, main+3113
0000000000002342         je         loc_2406

0000000000002348         mov        rsi, qword [format_str_suffix]              ; format_str_suffix
000000000000234f         test       rsi, rsi
0000000000002352         je         loc_2943

                     loc_2358:
0000000000002358         mov        edi, 0x2                                    ; CODE XREF=main+3066
000000000000235d         call       quote_n                                     ; quote_n
0000000000002362         mov        rsi, qword [format_str_prefix]              ; format_str_prefix
0000000000002369         mov        rcx, rax
000000000000236c         test       rsi, rsi
000000000000236f         je         loc_2937

                     loc_2375:
0000000000002375         mov        edi, 0x1                                    ; CODE XREF=main+3054
000000000000237a         mov        qword [rsp+0x78+var_68], rcx
000000000000237f         lea        r14, qword [aRight]                         ; "Right"
0000000000002386         call       quote_n                                     ; quote_n
000000000000238b         cmp        dword [padding_alignment], 0x0              ; padding_alignment
0000000000002392         mov        r15, rax
0000000000002395         lea        rax, qword [aFullDocumentat+27]             ; 0x9674
000000000000239c         mov        r9, qword [padding_width]                   ; padding_width
00000000000023a3         lea        r13, qword [aRight+10]                      ; 0x9683
00000000000023aa         mov        rsi, r12
00000000000023ad         cmove      r14, rax
00000000000023b1         cmp        dword [grouping], 0x0                       ; grouping
00000000000023b8         lea        rax, qword [aRight+6]                       ; 0x967f
00000000000023bf         mov        qword [rsp+0x78+var_70], r9
00000000000023c4         cmovne     r13, rax
00000000000023c8         xor        edi, edi
00000000000023ca         call       quote_n                                     ; quote_n
00000000000023cf         sub        rsp, 0x8
00000000000023d3         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
00000000000023da         lea        rdx, qword [aFormatStringnI]                ; "format String:\\n  input: %s\\n  grouping: %s\\n  padding width: %ld\\n  alignment: %s\\n  prefix: %s\\n  suffix: %s\\n"
00000000000023e1         mov        rcx, qword [rsp+0x80+var_68]
00000000000023e6         mov        r8, r13
00000000000023e9         mov        esi, 0x1
00000000000023ee         push       rcx
00000000000023ef         push       r15
00000000000023f1         mov        rcx, rax
00000000000023f4         push       r14
00000000000023f6         mov        r9, qword [rsp+0x98+var_70]
00000000000023fb         xor        eax, eax
00000000000023fd         call       j___fprintf_chk                             ; __fprintf_chk
0000000000002402         add        rsp, 0x20

                     loc_2406:
0000000000002406         cmp        dword [grouping], 0x0                       ; grouping, CODE XREF=main+1396, main+1522
000000000000240d         jne        loc_25fb

                     loc_2413:
0000000000002413         mov        rdi, qword [padding_width]                  ; padding_width, CODE XREF=main+2239, main+2258, main+2297, main+3133
000000000000241a         cmp        rdi, qword [padding_buffer_size]            ; padding_buffer_size
0000000000002421         jae        loc_264e

                     loc_2427:
0000000000002427         xor        eax, eax                                    ; CODE XREF=main+2307
0000000000002429         cmp        qword [padding_width], 0x0                  ; padding_width
0000000000002431         jne        loc_2442

0000000000002433         xor        eax, eax
0000000000002435         cmp        dword [delimiter], 0x80                     ; delimiter
000000000000243f         sete       al

                     loc_2442:
0000000000002442         cmp        dword [inval_style], 0x0                    ; inval_style, CODE XREF=main+1761
0000000000002449         mov        dword [auto_padding], eax                   ; auto_padding
000000000000244f         je         loc_245b

0000000000002451         mov        dword [conv_exit_code], 0x0                 ; conv_exit_code

                     loc_245b:
000000000000245b         mov        eax, dword [optind@@GLIBC_2.2.5]            ; optind@@GLIBC_2.2.5, CODE XREF=main+1791
0000000000002461         cmp        eax, ebp
0000000000002463         jl         loc_25ae

0000000000002469         mov        rax, qword [header]                         ; header
0000000000002470         mov        qword [rsp+0x78+var_50], 0x0
0000000000002479         lea        r13, qword [rsp+0x78+var_48]
000000000000247e         mov        qword [rsp+0x78+var_48], 0x0
0000000000002487         lea        rbx, qword [rsp+0x78+var_50]
000000000000248c         lea        rdx, qword [rax-1]
0000000000002490         test       rax, rax
0000000000002493         mov        qword [header], rdx                         ; header
000000000000249a         jne        loc_24c8

000000000000249c         jmp        loc_24e6
000000000000249e         align      32

                     loc_24a0:
00000000000024a0         mov        rsi, qword [stdout@@GLIBC_2.2.5]            ; argument "__stream" for method j_fputs_unlocked, stdout@@GLIBC_2.2.5, CODE XREF=main+1940
00000000000024a7         mov        rdi, qword [rsp+0x78+var_50]                ; argument "__s" for method j_fputs_unlocked
00000000000024ac         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000024b1         mov        rax, qword [header]                         ; header
00000000000024b8         lea        rdx, qword [rax-1]
00000000000024bc         test       rax, rax
00000000000024bf         mov        qword [header], rdx                         ; header
00000000000024c6         je         loc_24e6

                     loc_24c8:
00000000000024c8         movzx      edx, byte [line_delim]                      ; argument "__delimiter" for method j_getdelim, line_delim, CODE XREF=main+1866
00000000000024cf         mov        rcx, qword [stdin@@GLIBC_2.2.5]             ; argument "__stream" for method j_getdelim, stdin@@GLIBC_2.2.5
00000000000024d6         mov        rsi, r13                                    ; argument "__n" for method j_getdelim
00000000000024d9         mov        rdi, rbx                                    ; argument "__lineptr" for method j_getdelim
00000000000024dc         call       j_getdelim                                  ; getdelim
00000000000024e1         test       rax, rax
00000000000024e4         jg         loc_24a0

                     loc_24e6:
00000000000024e6         mov        r12d, 0x1                                   ; CODE XREF=main+1868, main+1910
00000000000024ec         jmp        loc_2520
00000000000024ee         align      16

                     loc_24f0:
00000000000024f0         mov        rdi, qword [rsp+0x78+var_50]                ; CODE XREF=main+2028
00000000000024f5         lea        rcx, qword [rdi+rax-1]
00000000000024fa         movzx      eax, byte [line_delim]                      ; line_delim
0000000000002501         movsx      edx, byte [rcx]
0000000000002504         cmp        edx, eax
0000000000002506         sete       sil
000000000000250a         jne        loc_2514

000000000000250c         mov        byte [rcx], 0x0
000000000000250f         mov        rdi, qword [rsp+0x78+var_50]

                     loc_2514:
0000000000002514         movzx      esi, sil                                    ; CODE XREF=main+1978
0000000000002518         call       process_line                                ; process_line
000000000000251d         and        r12d, eax

                     loc_2520:
0000000000002520         movzx      edx, byte [line_delim]                      ; argument "__delimiter" for method j_getdelim, line_delim, CODE XREF=main+1948
0000000000002527         mov        rcx, qword [stdin@@GLIBC_2.2.5]             ; argument "__stream" for method j_getdelim, stdin@@GLIBC_2.2.5
000000000000252e         mov        rsi, r13                                    ; argument "__n" for method j_getdelim
0000000000002531         mov        rdi, rbx                                    ; argument "__lineptr" for method j_getdelim
0000000000002534         call       j_getdelim                                  ; getdelim
0000000000002539         test       rax, rax
000000000000253c         jg         loc_24f0

000000000000253e         mov        rax, qword [stdin@@GLIBC_2.2.5]             ; stdin@@GLIBC_2.2.5
0000000000002545         test       byte [rax], 0x20
0000000000002548         je         loc_2573

000000000000254a         lea        rsi, qword [aErrorReadingIn]                ; argument "msgid" for method j_dcgettext, "error reading input"
0000000000002551         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002556         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002558         call       j_dcgettext                                 ; dcgettext
000000000000255d         mov        rbx, rax
0000000000002560         call       j___errno_location                          ; __errno_location
0000000000002565         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
0000000000002567         mov        rdx, rbx                                    ; argument "__format" for method j_error
000000000000256a         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000256c         xor        eax, eax
000000000000256e         call       j_error                                     ; error

                     loc_2573:
0000000000002573         cmp        byte [debug], 0x0                           ; debug, CODE XREF=main+2040, main+2214
000000000000257a         je         loc_27c9

0000000000002580         test       r12d, r12d
0000000000002583         je         loc_27ee

                     loc_2589:
0000000000002589         xor        eax, eax                                    ; CODE XREF=main+2684, main+2702, main+2832

                     loc_258b:
000000000000258b         mov        rbx, qword [rsp+0x78+var_40]                ; CODE XREF=main+2713
0000000000002590         xor        rbx, qword [fs:0x28]
0000000000002599         jne        loc_2aed

000000000000259f         add        rsp, 0x48
00000000000025a3         pop        rbx
00000000000025a4         pop        rbp
00000000000025a5         pop        r12
00000000000025a7         pop        r13
00000000000025a9         pop        r14
00000000000025ab         pop        r15
00000000000025ad         ret
                        ; endp

                     loc_25ae:
00000000000025ae         cmp        byte [debug], 0x0                           ; debug, CODE XREF=main+1811
00000000000025b5         je         loc_25c5

00000000000025b7         cmp        qword [header], 0x0                         ; header
00000000000025bf         jne        loc_2837

                     loc_25c5:
00000000000025c5         mov        r12d, 0x1                                   ; CODE XREF=main+2149, main+2838
00000000000025cb         nop        dword [rax+rax]

                     loc_25d0:
00000000000025d0         cdqe                                                   ; CODE XREF=main+2212
00000000000025d2         mov        esi, 0x1
00000000000025d7         mov        rdi, qword [rbx+rax*8]
00000000000025db         call       process_line                                ; process_line
00000000000025e0         and        r12d, eax
00000000000025e3         mov        eax, dword [optind@@GLIBC_2.2.5]            ; optind@@GLIBC_2.2.5
00000000000025e9         add        eax, 0x1
00000000000025ec         cmp        eax, ebp
00000000000025ee         mov        dword [optind@@GLIBC_2.2.5], eax            ; optind@@GLIBC_2.2.5
00000000000025f4         jl         loc_25d0

00000000000025f6         jmp        loc_2573

                     loc_25fb:
00000000000025fb         cmp        dword [scale_to], 0x0                       ; scale_to, CODE XREF=main+1725
0000000000002602         jne        loc_2af2

                     loc_2608:
0000000000002608         cmp        byte [debug], 0x0                           ; debug, CODE XREF=main+3105
000000000000260f         je         loc_2413

0000000000002615         mov        edi, 0x10001                                ; argument "__item" for method j_nl_langinfo
000000000000261a         call       j_nl_langinfo                               ; nl_langinfo
000000000000261f         cmp        byte [rax], 0x0
0000000000002622         jne        loc_2413

0000000000002628         lea        rsi, qword [aGroupingHasNoE]                ; argument "msgid" for method j_dcgettext, "grouping has no effect in this locale"
000000000000262f         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002631         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002636         call       j_dcgettext                                 ; dcgettext
000000000000263b         xor        esi, esi                                    ; argument "__errnum" for method j_error
000000000000263d         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002640         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000002642         xor        eax, eax
0000000000002644         call       j_error                                     ; error
0000000000002649         jmp        loc_2413

                     loc_264e:
000000000000264e         call       setup_padding_buffer.part.0                 ; setup_padding_buffer.part.0, CODE XREF=main+1745
0000000000002653         jmp        loc_2427

                     loc_2658:
0000000000002658         lea        r8, qword [r12+r13]                         ; CODE XREF=main+1464
000000000000265c         lea        r14, qword [aFormatSHasNoDi+30]             ; 0x9751
0000000000002663         mov        byte [rsp+0x78+var_70], 0x0
0000000000002668         nop        dword [rax+rax]

                     loc_2670:
0000000000002670         mov        rdi, r8                                     ; argument "__s" for method j_strspn, CODE XREF=main+2379, main+2658, main+2676
0000000000002673         mov        rsi, r14                                    ; argument "__accept" for method j_strspn
0000000000002676         call       j_strspn                                    ; strspn
000000000000267b         add        r13, rax
000000000000267e         lea        r8, qword [r12+r13]
0000000000002682         movzx      edx, byte [r8]
0000000000002686         cmp        dl, 0x27
0000000000002689         je         loc_27a0

000000000000268f         cmp        dl, 0x30
0000000000002692         je         loc_27b7

0000000000002698         test       rax, rax
000000000000269b         jne        loc_2670

000000000000269d         mov        qword [rsp+0x78+var_68], r8
00000000000026a2         lea        r13, qword [rsp+0x78+var_48]
00000000000026a7         call       j___errno_location                          ; __errno_location
00000000000026ac         mov        r8, qword [rsp+0x78+var_68]
00000000000026b1         mov        dword [rax], 0x0
00000000000026b7         mov        edx, 0xa                                    ; argument "__base" for method j_strtol
00000000000026bc         mov        rsi, r13                                    ; argument "__endptr" for method j_strtol
00000000000026bf         mov        qword [rsp+0x78+var_60], rax
00000000000026c4         mov        rdi, r8                                     ; argument "__nptr" for method j_strtol
00000000000026c7         call       j_strtol                                    ; strtol
00000000000026cc         mov        r9, qword [rsp+0x78+var_60]
00000000000026d1         mov        r14, rax
00000000000026d4         mov        r8, qword [rsp+0x78+var_68]
00000000000026d9         cmp        dword [r9], 0x22
00000000000026dd         je         loc_2b3a

00000000000026e3         cmp        qword [rsp+0x78+var_48], r8
00000000000026e8         je         loc_2725

00000000000026ea         test       rax, rax
00000000000026ed         je         loc_2725

00000000000026ef         cmp        byte [debug], 0x0                           ; debug
00000000000026f6         je         loc_28aa

00000000000026fc         cmp        qword [padding_width], 0x0                  ; padding_width
0000000000002704         je         loc_28aa

000000000000270a         cmp        byte [rsp+0x78+var_70], 0x0
000000000000270f         je         loc_287f

0000000000002715         test       rax, rax
0000000000002718         jle        loc_287f

                     loc_271e:
000000000000271e         mov        qword [zero_padding_width], r14             ; zero_padding_width, CODE XREF=main+2920

                     loc_2725:
0000000000002725         mov        rdx, qword [rsp+0x78+var_48]                ; CODE XREF=main+2456, main+2461, main+2933, main+3091
000000000000272a         mov        rax, rdx
000000000000272d         movzx      edx, byte [rdx]
0000000000002730         sub        rax, r12
0000000000002733         test       dl, dl
0000000000002735         je         loc_29fd

000000000000273b         cmp        dl, 0x2e
000000000000273e         je         loc_28ca

                     loc_2744:
0000000000002744         cmp        byte [r12+rax], 0x66                        ; CODE XREF=main+3042
0000000000002749         jne        loc_2abb

000000000000274f         add        rax, 0x1
0000000000002753         lea        r13, qword [r12+rax]
0000000000002757         movzx      edx, byte [r13]
000000000000275c         test       dl, dl
000000000000275e         jne        loc_2775

0000000000002760         jmp        loc_2976
0000000000002765         align      8

                     loc_2768:
0000000000002768         mov        edx, edi                                    ; CODE XREF=main+2610

                     loc_276a:
000000000000276a         test       dl, dl                                      ; CODE XREF=main+2632
000000000000276c         mov        rax, rsi
000000000000276f         je         loc_2315

                     loc_2775:
0000000000002775         cmp        dl, 0x25                                    ; CODE XREF=main+2574
0000000000002778         lea        rsi, qword [rax+1]
000000000000277c         movzx      edi, byte [r12+rax+1]
0000000000002782         jne        loc_2768

0000000000002784         cmp        dil, 0x25
0000000000002788         jne        loc_2a89

000000000000278e         lea        rsi, qword [rax+2]
0000000000002792         movzx      edx, byte [r12+rax+2]
0000000000002798         jmp        loc_276a
000000000000279a         align      32

                     loc_27a0:
00000000000027a0         add        r13, 0x1                                    ; CODE XREF=main+2361
00000000000027a4         mov        dword [grouping], 0x1                       ; grouping
00000000000027ae         lea        r8, qword [r12+r13]
00000000000027b2         jmp        loc_2670

                     loc_27b7:
00000000000027b7         add        r13, 0x1                                    ; CODE XREF=main+2370
00000000000027bb         mov        byte [rsp+0x78+var_70], 0x1
00000000000027c0         lea        r8, qword [r12+r13]
00000000000027c4         jmp        loc_2670

                     loc_27c9:
00000000000027c9         test       r12d, r12d                                  ; CODE XREF=main+2090
00000000000027cc         jne        loc_2589

                     loc_27d2:
00000000000027d2         mov        eax, dword [inval_style]                    ; inval_style, CODE XREF=main+2751
00000000000027d8         sub        eax, 0x2
00000000000027db         cmp        eax, 0x1
00000000000027de         jbe        loc_2589

00000000000027e4         mov        eax, 0x2
00000000000027e9         jmp        loc_258b

                     loc_27ee:
00000000000027ee         lea        rsi, qword [aFailedToConver]                ; argument "msgid" for method j_dcgettext, "failed to convert some of the input numbers", CODE XREF=main+2099
00000000000027f5         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000027f7         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000027fc         call       j_dcgettext                                 ; dcgettext
0000000000002801         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002803         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002806         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000002808         xor        eax, eax
000000000000280a         call       j_error                                     ; error
000000000000280f         jmp        loc_27d2

                     loc_2811:
0000000000002811         lea        rsi, qword [aFailedToSetLoc]                ; argument "msgid" for method j_dcgettext, "failed to set locale", CODE XREF=main+1281
0000000000002818         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000281a         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000281f         call       j_dcgettext                                 ; dcgettext
0000000000002824         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002826         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002829         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000282b         xor        eax, eax
000000000000282d         call       j_error                                     ; error
0000000000002832         jmp        loc_2257

                     loc_2837:
0000000000002837         lea        rsi, qword [aHeaderIgnoredW]                ; argument "msgid" for method j_dcgettext, "--header ignored with command-line input", CODE XREF=main+2159
000000000000283e         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002840         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002845         call       j_dcgettext                                 ; dcgettext
000000000000284a         xor        esi, esi                                    ; argument "__errnum" for method j_error
000000000000284c         mov        rdx, rax                                    ; argument "__format" for method j_error
000000000000284f         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000002851         xor        eax, eax
0000000000002853         call       j_error                                     ; error
0000000000002858         mov        eax, dword [optind@@GLIBC_2.2.5]            ; optind@@GLIBC_2.2.5
000000000000285e         cmp        ebp, eax
0000000000002860         jle        loc_2589

0000000000002866         jmp        loc_25c5

                     loc_286b:
000000000000286b         mov        rdi, r13                                    ; CODE XREF=main+1480, main+1509
000000000000286e         call       xstrdup                                     ; xstrdup
0000000000002873         mov        qword [format_str_suffix], rax              ; format_str_suffix
000000000000287a         jmp        loc_233b

                     loc_287f:
000000000000287f         lea        rsi, qword [aFormatPaddingO]                ; argument "msgid" for method j_dcgettext, "--format padding overriding --padding", CODE XREF=main+2495, main+2504
0000000000002886         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000288b         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000288d         mov        qword [rsp+0x78+var_68], r9
0000000000002892         call       j_dcgettext                                 ; dcgettext
0000000000002897         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002899         mov        rdx, rax                                    ; argument "__format" for method j_error
000000000000289c         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000289e         xor        eax, eax
00000000000028a0         call       j_error                                     ; error
00000000000028a5         mov        r9, qword [rsp+0x78+var_68]

                     loc_28aa:
00000000000028aa         test       r14, r14                                    ; CODE XREF=main+2470, main+2484
00000000000028ad         js         loc_294f

00000000000028b3         cmp        byte [rsp+0x78+var_70], 0x0
00000000000028b8         jne        loc_271e

00000000000028be         mov        qword [padding_width], r14                  ; padding_width
00000000000028c5         jmp        loc_2725

                     loc_28ca:
00000000000028ca         lea        r14, qword [r12+rax+1]                      ; CODE XREF=main+2542
00000000000028cf         mov        dword [r9], 0x0
00000000000028d6         mov        edx, 0xa                                    ; argument "__base" for method j_strtol
00000000000028db         mov        rsi, r13                                    ; argument "__endptr" for method j_strtol
00000000000028de         mov        qword [rsp+0x78+var_70], r9
00000000000028e3         mov        rdi, r14                                    ; argument "__nptr" for method j_strtol
00000000000028e6         call       j_strtol                                    ; strtol
00000000000028eb         mov        r9, qword [rsp+0x78+var_70]
00000000000028f0         mov        qword [user_precision], rax                 ; user_precision
00000000000028f7         cmp        dword [r9], 0x22
00000000000028fb         je         loc_29cb

0000000000002901         test       rax, rax
0000000000002904         js         loc_29cb

000000000000290a         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000290f         movsx      rsi, byte [r14]
0000000000002913         mov        rax, qword [rax]
0000000000002916         test       byte [rax+rsi*2], 0x1
000000000000291a         jne        loc_29cb

0000000000002920         cmp        sil, 0x2b
0000000000002924         je         loc_29cb

000000000000292a         mov        rax, qword [rsp+0x78+var_48]
000000000000292f         sub        rax, r12
0000000000002932         jmp        loc_2744

                     loc_2937:
0000000000002937         lea        rsi, qword [aReturningValue_9559+29]        ; 0x9576, CODE XREF=main+1567
000000000000293e         jmp        loc_2375

                     loc_2943:
0000000000002943         lea        rsi, qword [aReturningValue_9559+29]        ; 0x9576, CODE XREF=main+1538
000000000000294a         jmp        loc_2358

                     loc_294f:
000000000000294f         neg        r14                                         ; CODE XREF=main+2909
0000000000002952         mov        dword [padding_alignment], 0x0              ; padding_alignment
000000000000295c         mov        qword [padding_width], r14                  ; padding_width
0000000000002963         jmp        loc_2725

                     loc_2968:
0000000000002968         test       r12, r12                                    ; CODE XREF=main+1328
000000000000296b         jne        loc_22ca

0000000000002971         jmp        loc_2608

                     loc_2976:
0000000000002976         test       r15, r15                                    ; CODE XREF=main+2576
0000000000002979         je         loc_233b

000000000000297f         jmp        loc_231e

                     loc_2984:
0000000000002984         test       r12, r12                                    ; CODE XREF=main+1342
0000000000002987         jne        loc_22ca

000000000000298d         jmp        loc_2413

                     loc_2992:
0000000000002992         xor        edi, edi                                    ; argument #1 for method usage, CODE XREF=main+533
0000000000002994         call       usage                                       ; usage

                     loc_2999:
0000000000002999         mov        rdi, r12                                    ; CODE XREF=main+1426
000000000000299c         call       quote                                       ; quote
00000000000029a1         lea        rsi, qword [aFormatSHasNoDi]                ; argument "msgid" for method j_dcgettext, "format %s has no %% directive"
00000000000029a8         mov        rbx, rax
00000000000029ab         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000029b0         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000029b2         call       j_dcgettext                                 ; dcgettext
00000000000029b7         mov        rcx, rbx
00000000000029ba         mov        rdx, rax                                    ; argument "__format" for method j_error
00000000000029bd         xor        esi, esi                                    ; argument "__errnum" for method j_error
00000000000029bf         mov        edi, 0x1                                    ; argument "__status" for method j_error
00000000000029c4         xor        eax, eax
00000000000029c6         call       j_error                                     ; error

                     loc_29cb:
00000000000029cb         mov        rdi, r12                                    ; CODE XREF=main+2987, main+2996, main+3018, main+3028
00000000000029ce         call       quote                                       ; quote
00000000000029d3         lea        rsi, qword [aInvalidPrecisi]                ; argument "msgid" for method j_dcgettext, "invalid precision in format %s"
00000000000029da         mov        rbx, rax
00000000000029dd         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000029e2         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000029e4         call       j_dcgettext                                 ; dcgettext
00000000000029e9         mov        rcx, rbx
00000000000029ec         mov        rdx, rax                                    ; argument "__format" for method j_error
00000000000029ef         xor        esi, esi                                    ; argument "__errnum" for method j_error
00000000000029f1         mov        edi, 0x1                                    ; argument "__status" for method j_error
00000000000029f6         xor        eax, eax
00000000000029f8         call       j_error                                     ; error

                     loc_29fd:
00000000000029fd         mov        rdi, r12                                    ; CODE XREF=main+2533
0000000000002a00         call       quote                                       ; quote
0000000000002a05         lea        rsi, qword [aFormatSEndsIn]                 ; argument "msgid" for method j_dcgettext, "format %s ends in %%"
0000000000002a0c         mov        rbx, rax
0000000000002a0f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002a14         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002a16         call       j_dcgettext                                 ; dcgettext
0000000000002a1b         mov        rcx, rbx
0000000000002a1e         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002a21         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002a23         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000002a28         xor        eax, eax
0000000000002a2a         call       j_error                                     ; error

                     loc_2a2f:
0000000000002a2f         mov        rdi, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5, CODE XREF=main+947, main+963
0000000000002a36         call       quote                                       ; quote
0000000000002a3b         lea        rsi, qword [aInvalidPadding]                ; argument "msgid" for method j_dcgettext, "invalid padding value %s"
0000000000002a42         mov        rbx, rax
0000000000002a45         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002a4a         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002a4c         call       j_dcgettext                                 ; dcgettext
0000000000002a51         mov        rcx, rbx
0000000000002a54         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002a57         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002a59         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000002a5e         xor        eax, eax
0000000000002a60         call       j_error                                     ; error

                     loc_2a65:
0000000000002a65         lea        rsi, qword [aTheDelimiterMu]                ; argument "msgid" for method j_dcgettext, "the delimiter must be a single character", CODE XREF=main+818
0000000000002a6c         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002a71         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002a73         call       j_dcgettext                                 ; dcgettext
0000000000002a78         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002a7a         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002a7d         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000002a82         xor        eax, eax
0000000000002a84         call       j_error                                     ; error

                     loc_2a89:
0000000000002a89         mov        rdi, r12                                    ; CODE XREF=main+2616
0000000000002a8c         call       quote                                       ; quote
0000000000002a91         lea        rsi, qword [aFormatSHasTooM]                ; argument "msgid" for method j_dcgettext, "format %s has too many %% directives"
0000000000002a98         mov        rbx, rax
0000000000002a9b         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002aa0         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002aa2         call       j_dcgettext                                 ; dcgettext
0000000000002aa7         mov        rcx, rbx
0000000000002aaa         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002aad         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002aaf         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000002ab4         xor        eax, eax
0000000000002ab6         call       j_error                                     ; error

                     loc_2abb:
0000000000002abb         mov        rdi, r12                                    ; CODE XREF=main+2553
0000000000002abe         call       quote                                       ; quote
0000000000002ac3         lea        rsi, qword [aInvalidFormatS]                ; argument "msgid" for method j_dcgettext, "invalid format %s, directive must be %%[0]['][-][N][.][N]f"
0000000000002aca         mov        rbx, rax
0000000000002acd         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002ad2         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002ad4         call       j_dcgettext                                 ; dcgettext
0000000000002ad9         mov        rcx, rbx
0000000000002adc         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002adf         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002ae1         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000002ae6         xor        eax, eax
0000000000002ae8         call       j_error                                     ; error

                     loc_2aed:
0000000000002aed         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=main+2121
                        ; endp

                     loc_2af2:
0000000000002af2         lea        rsi, qword [aGroupingCannot]                ; argument "msgid" for method j_dcgettext, "grouping cannot be combined with --to", CODE XREF=main+2226
0000000000002af9         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002afe         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002b00         call       j_dcgettext                                 ; dcgettext
0000000000002b05         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002b07         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002b0a         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000002b0f         xor        eax, eax
0000000000002b11         call       j_error                                     ; error

                     loc_2b16:
0000000000002b16         lea        rsi, qword [aGroupingCannot_add0]           ; argument "msgid" for method j_dcgettext, "--grouping cannot be combined with --format", CODE XREF=main+1263
0000000000002b1d         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002b22         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002b24         call       j_dcgettext                                 ; dcgettext
0000000000002b29         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002b2b         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002b2e         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000002b33         xor        eax, eax
0000000000002b35         call       j_error                                     ; error

                     loc_2b3a:
0000000000002b3a         mov        rdi, r12                                    ; CODE XREF=main+2445
0000000000002b3d         call       quote                                       ; quote
0000000000002b42         lea        rsi, qword [aInvalidFormatS_ae20]           ; argument "msgid" for method j_dcgettext, "invalid format %s (width overflow)"
0000000000002b49         mov        rbx, rax
0000000000002b4c         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002b51         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002b53         call       j_dcgettext                                 ; dcgettext
0000000000002b58         mov        rcx, rbx
0000000000002b5b         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002b5e         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002b60         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000002b65         xor        eax, eax
0000000000002b67         call       j_error                                     ; error

                     loc_2b6c:
0000000000002b6c         lea        rsi, qword [aMultipleFieldS]                ; argument "msgid" for method j_dcgettext, "multiple field specifications", CODE XREF=main+285
0000000000002b73         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002b78         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002b7a         call       j_dcgettext                                 ; dcgettext
0000000000002b7f         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002b81         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002b84         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000002b89         xor        eax, eax
0000000000002b8b         call       j_error                                     ; error
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _start:
0000000000002b90         xor        ebp, ebp                                    ; Begin of unwind block (FDE at 0xc1b4), End of unwind block (FDE at 0xc458)
0000000000002b92         mov        r9, rdx
0000000000002b95         pop        rsi
0000000000002b96         mov        rdx, rsp
0000000000002b99         and        rsp, 0xfffffffffffffff0
0000000000002b9d         push       rax
0000000000002b9e         push       rsp
0000000000002b9f         lea        r8, qword [__libc_csu_fini]                 ; __libc_csu_fini
0000000000002ba6         lea        rcx, qword [__libc_csu_init]                ; __libc_csu_init
0000000000002bad         lea        rdi, qword [main]                           ; main
0000000000002bb4         call       qword [qword_20dfd0+8]                      ; 0x20dfd8
0000000000002bba         hlt
                        ; endp
0000000000002bbb         align      64                                          ; End of unwind block (FDE at 0xc1b4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     deregister_tm_clones:
0000000000002bc0         lea        rdi, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5, CODE XREF=__do_global_dtors_aux+35
0000000000002bc7         push       rbp
0000000000002bc8         lea        rax, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5
0000000000002bcf         cmp        rax, rdi
0000000000002bd2         mov        rbp, rsp
0000000000002bd5         je         loc_2bf0

0000000000002bd7         mov        rax, qword [qword_20dfd0]                   ; qword_20dfd0
0000000000002bde         test       rax, rax
0000000000002be1         je         loc_2bf0

0000000000002be3         pop        rbp
0000000000002be4         jmp        rax
                        ; endp
0000000000002be6         align      16

                     loc_2bf0:
0000000000002bf0         pop        rbp                                         ; CODE XREF=deregister_tm_clones+21, deregister_tm_clones+33
0000000000002bf1         ret
                        ; endp
0000000000002bf2         align      1024

                     register_tm_clones:
0000000000002c00         lea        rdi, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5, CODE XREF=frame_dummy+5
0000000000002c07         lea        rsi, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5
0000000000002c0e         push       rbp
0000000000002c0f         sub        rsi, rdi
0000000000002c12         mov        rbp, rsp
0000000000002c15         sar        rsi, 0x3
0000000000002c19         mov        rax, rsi
0000000000002c1c         shr        rax, 0x3f
0000000000002c20         add        rsi, rax
0000000000002c23         sar        rsi, 0x1
0000000000002c26         je         loc_2c40

0000000000002c28         mov        rax, qword [qword_20dfe8]                   ; qword_20dfe8
0000000000002c2f         test       rax, rax
0000000000002c32         je         loc_2c40

0000000000002c34         pop        rbp
0000000000002c35         jmp        rax
                        ; endp
0000000000002c37         align      64

                     loc_2c40:
0000000000002c40         pop        rbp                                         ; CODE XREF=register_tm_clones+38, register_tm_clones+50
0000000000002c41         ret
                        ; endp
0000000000002c42         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __do_global_dtors_aux:
0000000000002c50         cmp        byte [completed.7697], 0x0                  ; completed.7697, DATA XREF=__do_global_dtors_aux_fini_array_entry
0000000000002c57         jne        loc_2c88

0000000000002c59         cmp        qword [qword_20dff0], 0x0                   ; qword_20dff0
0000000000002c61         push       rbp
0000000000002c62         mov        rbp, rsp
0000000000002c65         je         loc_2c73

0000000000002c67         mov        rdi, qword [__dso_handle]                   ; __dso_handle
0000000000002c6e         call       j_qword_20dff0                              ; qword_20dff0

                     loc_2c73:
0000000000002c73         call       deregister_tm_clones                        ; deregister_tm_clones, CODE XREF=__do_global_dtors_aux+21
0000000000002c78         mov        byte [completed.7697], 0x1                  ; completed.7697
0000000000002c7f         pop        rbp
0000000000002c80         ret
                        ; endp
0000000000002c81         align      8

                     loc_2c88:
0000000000002c88         ret                                                    ; CODE XREF=__do_global_dtors_aux+7
                        ; endp
0000000000002c8a         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     frame_dummy:
0000000000002c90         push       rbp                                         ; DATA XREF=__frame_dummy_init_array_entry
0000000000002c91         mov        rbp, rsp
0000000000002c94         pop        rbp
0000000000002c95         jmp        register_tm_clones                          ; register_tm_clones
0000000000002c9a         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_20: int64_t, -32
        ;    var_38: int32_t, -56


                     simple_strtod_int:
0000000000002ca0         push       rbp                                         ; Begin of unwind block (FDE at 0xc224), CODE XREF=process_field+506, process_field+2069
0000000000002ca1         push       rbx
0000000000002ca2         mov        rbp, rdx
0000000000002ca5         sub        rsp, 0x28
0000000000002ca9         cmp        byte [rdi], 0x2d
0000000000002cac         je         loc_2d80

0000000000002cb2         mov        byte [rcx], 0x0
0000000000002cb5         mov        qword [rsi], rdi

                     loc_2cb8:
0000000000002cb8         fldz                                                   ; CODE XREF=simple_strtod_int+237
0000000000002cba         xor        r9d, r9d
0000000000002cbd         xor        r8d, r8d
0000000000002cc0         xor        ebx, ebx
0000000000002cc2         mov        r10d, 0x1
0000000000002cc8         fld        dword [dword_b1b4]                          ; dword_b1b4
0000000000002cce         jmp        loc_2d05

                     loc_2cd0:
0000000000002cd0         test       eax, eax                                    ; CODE XREF=simple_strtod_int+130
0000000000002cd2         jne        loc_2d24

                     loc_2cd4:
0000000000002cd4         cmp        r8d, 0x12                                   ; CODE XREF=simple_strtod_int+136
0000000000002cd8         jbe        loc_2ce9

0000000000002cda         cmp        r8d, 0x1b
0000000000002cde         ja         loc_2da0

0000000000002ce4         mov        ebx, 0x1

                     loc_2ce9:
0000000000002ce9         mov        dword [rsp+0x38+var_38], eax                ; CODE XREF=simple_strtod_int+56
0000000000002cec         add        rdi, 0x1
0000000000002cf0         test       rdi, rdi
0000000000002cf3         mov        qword [rsi], rdi
0000000000002cf6         mov        r9d, 0x1
0000000000002cfc         fmul       st1, st0
0000000000002cfe         fild       dword [rsp+0x38+var_38]
0000000000002d01         faddp      st2
0000000000002d03         je         loc_2d60

                     loc_2d05:
0000000000002d05         movsx      eax, byte [rdi]                             ; CODE XREF=simple_strtod_int+46
0000000000002d08         mov        edx, eax
0000000000002d0a         sub        edx, 0x30
0000000000002d0d         cmp        dl, 0x9
0000000000002d10         ja         loc_2d30

0000000000002d12         fldz
0000000000002d14         sub        eax, 0x30
0000000000002d17         fucomip    st2
0000000000002d19         setp       dl
0000000000002d1c         cmovne     edx, r10d
0000000000002d20         test       dl, dl
0000000000002d22         je         loc_2cd0

                     loc_2d24:
0000000000002d24         add        r8d, 0x1                                    ; CODE XREF=simple_strtod_int+50
0000000000002d28         jmp        loc_2cd4
0000000000002d2a         align      16

                     loc_2d30:
0000000000002d30         fstp       st0                                         ; CODE XREF=simple_strtod_int+112
0000000000002d32         test       r9b, r9b
0000000000002d35         jne        loc_2d62

                     loc_2d37:
0000000000002d37         fstp       tword [rsp+0x38+var_38]                     ; CODE XREF=simple_strtod_int+247
0000000000002d3a         movsxd     rdx, dword [decimal_point_length]           ; argument "__n" for method j_strncmp, decimal_point_length
0000000000002d41         mov        rsi, qword [decimal_point]                  ; argument "__s2" for method j_strncmp, decimal_point
0000000000002d48         mov        qword [rsp+0x38+var_20], rcx
0000000000002d4d         call       j_strncmp                                   ; strncmp
0000000000002d52         test       eax, eax
0000000000002d54         mov        rcx, qword [rsp+0x38+var_20]
0000000000002d59         fld        tword [rsp+0x38+var_38]
0000000000002d5c         jne        loc_2db8

0000000000002d5e         jmp        loc_2d62

                     loc_2d60:
0000000000002d60         fstp       st0                                         ; CODE XREF=simple_strtod_int+99

                     loc_2d62:
0000000000002d62         cmp        byte [rcx], 0x0                             ; CODE XREF=simple_strtod_int+149, simple_strtod_int+190
0000000000002d65         jne        loc_2d78

                     loc_2d67:
0000000000002d67         mov        eax, ebx                                    ; CODE XREF=simple_strtod_int+218
0000000000002d69         fstp       tword [rbp]
0000000000002d6c         add        rsp, 0x28
0000000000002d70         pop        rbx
0000000000002d71         pop        rbp
0000000000002d72         ret
                        ; endp
0000000000002d73         align      8

                     loc_2d78:
0000000000002d78         fchs                                                   ; CODE XREF=simple_strtod_int+197
0000000000002d7a         jmp        loc_2d67
0000000000002d7c         align      128

                     loc_2d80:
0000000000002d80         add        rdi, 0x1                                    ; CODE XREF=simple_strtod_int+12
0000000000002d84         mov        byte [rcx], 0x1
0000000000002d87         test       rdi, rdi
0000000000002d8a         mov        qword [rsi], rdi
0000000000002d8d         jne        loc_2cb8

0000000000002d93         xor        ebx, ebx
0000000000002d95         fldz
0000000000002d97         jmp        loc_2d37
0000000000002d99         align      32

                     loc_2da0:
0000000000002da0         fstp       st0                                         ; CODE XREF=simple_strtod_int+62
0000000000002da2         fstp       st0
0000000000002da4         mov        ebx, 0x2
0000000000002da9         add        rsp, 0x28
0000000000002dad         mov        eax, ebx
0000000000002daf         pop        rbx
0000000000002db0         pop        rbp
0000000000002db1         ret
                        ; endp
0000000000002db2         align      8

                     loc_2db8:
0000000000002db8         fstp       st0                                         ; CODE XREF=simple_strtod_int+188
0000000000002dba         mov        ebx, 0x3
0000000000002dbf         add        rsp, 0x28
0000000000002dc3         mov        eax, ebx
0000000000002dc5         pop        rbx
0000000000002dc6         pop        rbp
0000000000002dc7         ret
                        ; endp
0000000000002dc8         align      16                                          ; End of unwind block (FDE at 0xc224)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40
        ;    var_30: int64_t, -48


                     unit_to_umax:
0000000000002dd0         push       r12                                         ; Begin of unwind block (FDE at 0xc264), CODE XREF=main+397, main+727
0000000000002dd2         push       rbp
0000000000002dd3         push       rbx
0000000000002dd4         mov        rbx, rdi
0000000000002dd7         sub        rsp, 0x20
0000000000002ddb         mov        rax, qword [fs:0x28]
0000000000002de4         mov        qword [rsp+0x38+var_20], rax
0000000000002de9         xor        eax, eax
0000000000002deb         call       j_strlen                                    ; strlen
0000000000002df0         test       rax, rax
0000000000002df3         mov        qword [rsp+0x38+var_30], 0x0
0000000000002dfc         je         loc_2e11

0000000000002dfe         mov        rbp, rax
0000000000002e01         lea        r12, qword [rax-1]
0000000000002e05         movzx      eax, byte [rbx+rax-1]
0000000000002e0a         sub        eax, 0x30
0000000000002e0d         cmp        al, 0x9
0000000000002e0f         ja         loc_2e88

                     loc_2e11:
0000000000002e11         lea        r8, qword [aKmgtpezy]                       ; "KMGTPEZY", CODE XREF=unit_to_umax+44
0000000000002e18         mov        r9, rbx
0000000000002e1b         xor        r12d, r12d

                     loc_2e1e:
0000000000002e1e         lea        rcx, qword [rsp+0x38+var_28]                ; CODE XREF=unit_to_umax+262, unit_to_umax+300
0000000000002e23         lea        rsi, qword [rsp+0x38+var_30]
0000000000002e28         mov        edx, 0xa
0000000000002e2d         mov        rdi, r9
0000000000002e30         call       xstrtoumax                                  ; xstrtoumax
0000000000002e35         test       eax, eax
0000000000002e37         jne        loc_2f01

0000000000002e3d         mov        rax, qword [rsp+0x38+var_30]
0000000000002e42         cmp        byte [rax], 0x0
0000000000002e45         jne        loc_2f01

0000000000002e4b         mov        rbp, qword [rsp+0x38+var_28]
0000000000002e50         test       rbp, rbp
0000000000002e53         je         loc_2f01

0000000000002e59         mov        rdi, r12                                    ; argument "__ptr" for method j_free
0000000000002e5c         call       j_free                                      ; free
0000000000002e61         mov        rdx, qword [rsp+0x38+var_20]
0000000000002e66         xor        rdx, qword [fs:0x28]
0000000000002e6f         mov        rax, rbp
0000000000002e72         jne        loc_2f3b

0000000000002e78         add        rsp, 0x20
0000000000002e7c         pop        rbx
0000000000002e7d         pop        rbp
0000000000002e7e         pop        r12
0000000000002e80         ret
                        ; endp
0000000000002e81         align      8

                     loc_2e88:
0000000000002e88         lea        rdi, qword [rbp+2]                          ; CODE XREF=unit_to_umax+63
0000000000002e8c         call       xmalloc                                     ; xmalloc
0000000000002e91         mov        rdx, rbp                                    ; argument "__n" for method j_memcpy
0000000000002e94         add        r12, rax
0000000000002e97         mov        rsi, rbx                                    ; argument "__src" for method j_memcpy
0000000000002e9a         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
0000000000002e9d         mov        qword [rsp+0x38+var_30], r12
0000000000002ea2         call       j_memcpy                                    ; memcpy
0000000000002ea7         cmp        byte [r12], 0x69
0000000000002eac         mov        r9, rax
0000000000002eaf         jne        loc_2eb7

0000000000002eb1         cmp        rbp, 0x1
0000000000002eb5         jne        loc_2ee0

                     loc_2eb7:
0000000000002eb7         lea        rax, qword [r12+2]                          ; CODE XREF=unit_to_umax+223, unit_to_umax+283
0000000000002ebc         lea        r8, qword [aKmgtpezy0]                      ; "KMGTPEZY0"
0000000000002ec3         mov        qword [rsp+0x38+var_30], rax
0000000000002ec8         mov        eax, 0x42
0000000000002ecd         mov        word [r12+1], ax
0000000000002ed3         mov        r12, r9
0000000000002ed6         jmp        loc_2e1e
0000000000002edb         align      32

                     loc_2ee0:
0000000000002ee0         movzx      eax, byte [r12-1]                           ; CODE XREF=unit_to_umax+229
0000000000002ee6         sub        eax, 0x30
0000000000002ee9         cmp        al, 0x9
0000000000002eeb         jbe        loc_2eb7

0000000000002eed         mov        byte [r12], 0x0
0000000000002ef2         lea        r8, qword [aKmgtpezy]                       ; "KMGTPEZY"
0000000000002ef9         mov        r12, r9
0000000000002efc         jmp        loc_2e1e

                     loc_2f01:
0000000000002f01         mov        rdi, r12                                    ; argument "__ptr" for method j_free, CODE XREF=unit_to_umax+103, unit_to_umax+117, unit_to_umax+131
0000000000002f04         call       j_free                                      ; free
0000000000002f09         mov        rdi, rbx
0000000000002f0c         call       quote                                       ; quote
0000000000002f11         lea        rsi, qword [aInvalidUnitSiz]                ; argument "msgid" for method j_dcgettext, "invalid unit size: %s"
0000000000002f18         mov        rbx, rax
0000000000002f1b         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002f20         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002f22         call       j_dcgettext                                 ; dcgettext
0000000000002f27         mov        rcx, rbx
0000000000002f2a         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002f2d         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002f2f         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000002f34         xor        eax, eax
0000000000002f36         call       j_error                                     ; error

                     loc_2f3b:
0000000000002f3b         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=unit_to_umax+162
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     setup_padding_buffer.part.0:
0000000000002f40         sub        rsp, 0x8                                    ; End of unwind block (FDE at 0xc264), Begin of unwind block (FDE at 0xc298), CODE XREF=main+2302, process_field+895, process_field+3017
0000000000002f44         lea        rsi, qword [rdi+1]
0000000000002f48         mov        rdi, qword [padding_buffer]                 ; padding_buffer
0000000000002f4f         mov        qword [padding_buffer_size], rsi            ; padding_buffer_size
0000000000002f56         call       xrealloc                                    ; xrealloc
0000000000002f5b         mov        qword [padding_buffer], rax                 ; padding_buffer
0000000000002f62         add        rsp, 0x8
0000000000002f66         ret
                        ; endp
0000000000002f67         align      16                                          ; End of unwind block (FDE at 0xc298)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_C8: int8_t, -200
        ;    var_107: int8_t, -263
        ;    var_108: int8_t, -264
        ;    var_118: int64_t, -280
        ;    var_120: int64_t, -288
        ;    var_128: int64_t, -296
        ;    var_130: int64_t, -304
        ;    var_138: int64_t, -312
        ;    var_139: int8_t, -313
        ;    var_13A: int8_t, -314
        ;    var_14A: int16_t, -330
        ;    var_14C: int16_t, -332
        ;    var_158: int64_t, -344
        ;    var_168: int32_t, -360
        ;    var_178: int64_t, -376
        ;    var_188: int64_t, -392
        ;    var_198: int64_t, -408
        ;    var_1A8: -424
        ;    var_1B8: -440


                     process_field:
0000000000002f70         push       r15                                         ; Begin of unwind block (FDE at 0xc2b0), CODE XREF=process_line+110, process_line+311
0000000000002f72         push       r14
0000000000002f74         push       r13
0000000000002f76         push       r12
0000000000002f78         mov        r13, rsi
0000000000002f7b         push       rbp
0000000000002f7c         push       rbx
0000000000002f7d         mov        r12, rdi
0000000000002f80         sub        rsp, 0x168
0000000000002f87         mov        rax, qword [fs:0x28]
0000000000002f90         mov        qword [rsp+0x198+var_40], rax
0000000000002f98         xor        eax, eax
0000000000002f9a         mov        rax, qword [frp]                            ; frp
0000000000002fa1         test       rax, rax
0000000000002fa4         jne        loc_2fbf

0000000000002fa6         jmp        loc_3010
0000000000002fa8         align      16

                     loc_2fb0:
0000000000002fb0         cmp        r13, rdx                                    ; CODE XREF=process_field+86
0000000000002fb3         jb         loc_2fbb

0000000000002fb5         cmp        r13, qword [rax+8]
0000000000002fb9         jbe        loc_3016

                     loc_2fbb:
0000000000002fbb         add        rax, 0x10                                   ; CODE XREF=process_field+67

                     loc_2fbf:
0000000000002fbf         mov        rdx, qword [rax]                            ; CODE XREF=process_field+52
0000000000002fc2         cmp        rdx, 0xffffffffffffffff
0000000000002fc6         jne        loc_2fb0

                     loc_2fc8:
0000000000002fc8         mov        rsi, qword [stdout@@GLIBC_2.2.5]            ; argument "__stream" for method j_fputs_unlocked, stdout@@GLIBC_2.2.5, CODE XREF=process_field+164
0000000000002fcf         mov        rdi, r12                                    ; argument "__s" for method j_fputs_unlocked
0000000000002fd2         mov        ebx, 0x1
0000000000002fd7         call       j_fputs_unlocked                            ; fputs_unlocked

                     loc_2fdc:
0000000000002fdc         mov        rcx, qword [rsp+0x198+var_40]               ; CODE XREF=process_field+833, process_field+3095, process_field+3113
0000000000002fe4         xor        rcx, qword [fs:0x28]
0000000000002fed         mov        eax, ebx
0000000000002fef         jne        loc_465c

0000000000002ff5         add        rsp, 0x168
0000000000002ffc         pop        rbx
0000000000002ffd         pop        rbp
0000000000002ffe         pop        r12
0000000000003000         pop        r13
0000000000003002         pop        r14
0000000000003004         pop        r15
0000000000003006         ret
                        ; endp
0000000000003007         align      16

                     loc_3010:
0000000000003010         cmp        rsi, 0x1                                    ; CODE XREF=process_field+54
0000000000003014         jne        loc_2fc8

                     loc_3016:
0000000000003016         mov        rbp, qword [suffix]                         ; suffix, CODE XREF=process_field+73
000000000000301d         test       rbp, rbp
0000000000003020         je         loc_3068

0000000000003022         mov        rdi, r12                                    ; argument "__s" for method j_strlen
0000000000003025         call       j_strlen                                    ; strlen
000000000000302a         mov        rdi, rbp                                    ; argument "__s" for method j_strlen
000000000000302d         mov        rbx, rax
0000000000003030         call       j_strlen                                    ; strlen
0000000000003035         cmp        rbx, rax
0000000000003038         jbe        loc_3068

000000000000303a         sub        rbx, rax
000000000000303d         mov        rdi, rbp                                    ; argument "__s1" for method j_strcmp
0000000000003040         add        rbx, r12
0000000000003043         mov        rsi, rbx                                    ; argument "__s2" for method j_strcmp
0000000000003046         call       j_strcmp                                    ; strcmp
000000000000304b         test       eax, eax
000000000000304d         movzx      edx, byte [dev_debug]                       ; dev_debug
0000000000003054         jne        loc_3730

000000000000305a         test       dl, dl
000000000000305c         mov        byte [rbx], 0x0
000000000000305f         jne        loc_3874

0000000000003065         nop        dword [rax]

                     loc_3068:
0000000000003068         movzx      ebx, byte [r12]                             ; CODE XREF=process_field+176, process_field+200, process_field+1986, process_field+2021, process_field+2345
000000000000306d         test       bl, bl
000000000000306f         je         loc_3857

0000000000003075         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000307a         mov        rbp, r12
000000000000307d         mov        rax, qword [rax]
0000000000003080         jmp        loc_3094
0000000000003082         align      8

                     loc_3088:
0000000000003088         add        rbp, 0x1                                    ; CODE XREF=process_field+296
000000000000308c         movzx      ebx, byte [rbp]
0000000000003090         test       bl, bl
0000000000003092         je         loc_309a

                     loc_3094:
0000000000003094         test       byte [rax+rbx*2], 0x1                       ; CODE XREF=process_field+272
0000000000003098         jne        loc_3088

                     loc_309a:
000000000000309a         mov        eax, r12d                                   ; CODE XREF=process_field+290
000000000000309d         sub        eax, ebp

                     loc_309f:
000000000000309f         mov        r11d, dword [auto_padding]                  ; auto_padding, CODE XREF=process_field+2284
00000000000030a6         test       r11d, r11d
00000000000030a9         je         loc_31b9

00000000000030af         test       eax, eax
00000000000030b1         jne        loc_32d0

00000000000030b7         cmp        r13, 0x1
00000000000030bb         jg         loc_32d0

00000000000030c1         mov        qword [padding_width], 0x0                  ; padding_width

                     loc_30cc:
00000000000030cc         movzx      eax, byte [dev_debug]                       ; dev_debug, CODE XREF=process_field+886, process_field+900
00000000000030d3         test       al, al
00000000000030d5         jne        loc_3198

00000000000030db         pxor       xmm2, xmm2
00000000000030df         mov        r13d, dword [scale_from]                    ; scale_from
00000000000030e6         mov        qword [rsp+0x198+var_138], 0x0
00000000000030ef         mov        r15d, 0x3e8
00000000000030f5         movss      dword [rsp+0x198+var_198], xmm2
00000000000030fa         lea        edx, dword [r13-3]
00000000000030fe         fld        dword [rsp+0x198+var_198]
0000000000003101         cmp        edx, 0x1
0000000000003104         fstp       tword [rsp+0x198+var_128]
0000000000003108         ja         loc_3158

000000000000310a         mov        r15d, 0x400

                     loc_3110:
0000000000003110         test       al, al                                      ; CODE XREF=process_field+637, process_field+649
0000000000003112         je         loc_3158

0000000000003114         mov        rsi, qword [decimal_point]                  ; decimal_point
000000000000311b         mov        edi, 0x1
0000000000003120         call       quote_n                                     ; quote_n
0000000000003125         mov        rsi, rbp
0000000000003128         xor        edi, edi
000000000000312a         mov        rbx, rax
000000000000312d         call       quote_n                                     ; quote_n
0000000000003132         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
0000000000003139         lea        rdx, qword [aSimplestrtodhu]                ; "simple_strtod_human:\\n  input string: %s\\n  locale decimal-point: %s\\n  MAX_UNSCALED_DIGITS: %d\\n"
0000000000003140         mov        rcx, rax
0000000000003143         mov        r9d, 0x12
0000000000003149         mov        r8, rbx
000000000000314c         mov        esi, 0x1
0000000000003151         xor        eax, eax
0000000000003153         call       j___fprintf_chk                             ; __fprintf_chk

                     loc_3158:
0000000000003158         lea        rcx, qword [rsp+0x198+var_13A]              ; CODE XREF=process_field+408, process_field+418
000000000000315d         lea        rdx, qword [rsp+0x198+var_128]
0000000000003162         lea        rsi, qword [rsp+0x198+var_138]
0000000000003167         mov        rdi, rbp
000000000000316a         call       simple_strtod_int                           ; simple_strtod_int
000000000000316f         cmp        eax, 0x1
0000000000003172         mov        ebx, eax
0000000000003174         jbe        loc_3330

                     loc_317a:
000000000000317a         cmp        ebx, 0x6                                    ; CODE XREF=process_field+2085
000000000000317d         ja         loc_3320

0000000000003183         lea        rcx, qword [switch_table_b020]              ; switch_table_b020
000000000000318a         mov        edx, ebx
000000000000318c         movsxd     rax, dword [rcx+rdx*4]
0000000000003190         add        rax, rcx
0000000000003193         jmp        rax                                         ; switch statement using table at 0xb020, with 7 cases, 0x3200,0x32f9,0x3308,0x3320,0x37d0,0x37e4
0000000000003195         align      8

                     loc_3198:
0000000000003198         mov        rcx, qword [padding_width]                  ; padding_width, CODE XREF=process_field+357
000000000000319f         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
00000000000031a6         lea        rdx, qword [aSettingAutopad]                ; "setting Auto-Padding to %ld characters\\n"
00000000000031ad         mov        esi, 0x1
00000000000031b2         xor        eax, eax
00000000000031b4         call       j___fprintf_chk                             ; __fprintf_chk

                     loc_31b9:
00000000000031b9         pxor       xmm1, xmm1                                  ; CODE XREF=process_field+313
00000000000031bd         mov        r13d, dword [scale_from]                    ; scale_from
00000000000031c4         movzx      eax, byte [dev_debug]                       ; dev_debug
00000000000031cb         mov        qword [rsp+0x198+var_138], 0x0
00000000000031d4         mov        r15d, 0x3e8
00000000000031da         movss      dword [rsp+0x198+var_198], xmm1
00000000000031df         lea        edx, dword [r13-3]
00000000000031e3         fld        dword [rsp+0x198+var_198]
00000000000031e6         cmp        edx, 0x1
00000000000031e9         fstp       tword [rsp+0x198+var_128]
00000000000031ed         ja         loc_3110

00000000000031f3         mov        r15d, 0x400
00000000000031f9         jmp        loc_3110
00000000000031fe         align      512

                     loc_3200:
0000000000003200         lea        r13, qword [aValueTooLargeT_9840]           ; case 2, "value too large to be converted: %s", CODE XREF=process_field+547
0000000000003207         xor        r14d, r14d
000000000000320a         nop        word [rax+rax]

                     loc_3210:
0000000000003210         cmp        dword [inval_style], 0x3                    ; inval_style, CODE XREF=process_field+915, process_field+930, process_field+950, process_field+2159, process_field+2174, process_field+3436, process_field+3453, process_field+4814, process_field+6003
0000000000003217         je         loc_3248

0000000000003219         mov        rdi, rbp
000000000000321c         call       quote                                       ; quote
0000000000003221         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003226         mov        rsi, r13                                    ; argument "msgid" for method j_dcgettext
0000000000003229         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000322b         mov        rbp, rax
000000000000322e         call       j_dcgettext                                 ; dcgettext
0000000000003233         mov        edi, dword [conv_exit_code]                 ; argument "__status" for method j_error, conv_exit_code
0000000000003239         mov        rdx, rax                                    ; argument "__format" for method j_error
000000000000323c         mov        rcx, rbp
000000000000323f         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000003241         xor        eax, eax
0000000000003243         call       j_error                                     ; error

                     loc_3248:
0000000000003248         mov        rax, qword [from_unit_size]                 ; from_unit_size, CODE XREF=process_field+679, process_field+1819, process_field+1894, process_field+1920, process_field+1973, process_field+6060
000000000000324f         mov        rdx, qword [to_unit_size]                   ; to_unit_size
0000000000003256         fld        tword [rsp+0x198+var_128]
000000000000325a         cmp        rax, 0x1
000000000000325e         je         loc_3480

                     loc_3264:
0000000000003264         mov        qword [rsp+0x198+var_188], rax              ; CODE XREF=process_field+1300
0000000000003269         test       rax, rax
000000000000326c         fild       qword [rsp+0x198+var_188]
0000000000003270         jns        loc_3278

0000000000003272         fadd       dword [dword_b1bc]                          ; dword_b1bc

                     loc_3278:
0000000000003278         fmulp      st1                                         ; CODE XREF=process_field+768
000000000000327a         mov        qword [rsp+0x198+var_188], rdx
000000000000327f         test       rdx, rdx
0000000000003282         fild       qword [rsp+0x198+var_188]
0000000000003286         js         loc_32c0

                     loc_3288:
0000000000003288         fdivp      st1                                         ; CODE XREF=process_field+854

                     loc_328a:
000000000000328a         cmp        ebx, 0x1                                    ; CODE XREF=process_field+1306
000000000000328d         jbe        loc_3490

0000000000003293         fstp       st0
0000000000003295         jmp        loc_32a0

                     loc_3297:
0000000000003297         fstp       st0                                         ; CODE XREF=process_field+2201
0000000000003299         nop        dword [rax]

                     loc_32a0:
00000000000032a0         mov        rsi, qword [stdout@@GLIBC_2.2.5]            ; argument "__stream" for method j_fputs_unlocked, stdout@@GLIBC_2.2.5, CODE XREF=process_field+805, process_field+1436, process_field+1492, process_field+2274, process_field+4869
00000000000032a7         mov        rdi, r12                                    ; argument "__s" for method j_fputs_unlocked
00000000000032aa         xor        ebx, ebx
00000000000032ac         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000032b1         jmp        loc_2fdc
00000000000032b6         align      64

                     loc_32c0:
00000000000032c0         fadd       dword [dword_b1bc]                          ; dword_b1bc, CODE XREF=process_field+790
00000000000032c6         jmp        loc_3288
00000000000032c8         align      16

                     loc_32d0:
00000000000032d0         mov        rdi, r12                                    ; argument "__s" for method j_strlen, CODE XREF=process_field+321, process_field+331
00000000000032d3         call       j_strlen                                    ; strlen
00000000000032d8         cmp        rax, qword [padding_buffer_size]            ; padding_buffer_size
00000000000032df         mov        qword [padding_width], rax                  ; padding_width
00000000000032e6         jb         loc_30cc

00000000000032ec         mov        rdi, rax
00000000000032ef         call       setup_padding_buffer.part.0                 ; setup_padding_buffer.part.0
00000000000032f4         jmp        loc_30cc

                     loc_32f9:
00000000000032f9         xor        r14d, r14d                                  ; case 5, CODE XREF=process_field+547
00000000000032fc         lea        r13, qword [aInvalidSuffixI]                ; "invalid suffix in input: %s"
0000000000003303         jmp        loc_3210

                     loc_3308:
0000000000003308         xor        r14d, r14d                                  ; case 6, CODE XREF=process_field+547
000000000000330b         lea        r13, qword [aMissingISuffix]                ; "missing 'i' suffix in input: %s (e.g Ki/Mi/Gi)"
0000000000003312         jmp        loc_3210
0000000000003317         align      32

                     loc_3320:
0000000000003320         xor        r14d, r14d                                  ; case 1, CODE XREF=process_field+525, process_field+547
0000000000003323         xor        r13d, r13d
0000000000003326         jmp        loc_3210
000000000000332b         align      16

                     loc_3330:
0000000000003330         movsxd     r8, dword [decimal_point_length]            ; decimal_point_length, CODE XREF=process_field+516
0000000000003337         mov        rcx, qword [rsp+0x198+var_138]
000000000000333c         xor        r14d, r14d
000000000000333f         mov        rsi, qword [decimal_point]                  ; argument "__s2" for method j_strncmp, decimal_point
0000000000003346         mov        rdi, rcx                                    ; argument "__s1" for method j_strncmp
0000000000003349         mov        qword [rsp+0x198+var_188], rcx
000000000000334e         mov        rdx, r8                                     ; argument "__n" for method j_strncmp
0000000000003351         mov        qword [rsp+0x198+var_178], r8
0000000000003356         call       j_strncmp                                   ; strncmp
000000000000335b         test       eax, eax
000000000000335d         mov        rcx, qword [rsp+0x198+var_188]
0000000000003362         mov        r8, qword [rsp+0x198+var_178]
0000000000003367         je         loc_3760

                     loc_336d:
000000000000336d         cmp        byte [dev_debug], 0x0                       ; dev_debug, CODE XREF=process_field+2457
0000000000003374         jne        loc_37a0

                     loc_337a:
000000000000337a         mov        rdx, qword [rsp+0x198+var_138]              ; CODE XREF=process_field+2137
000000000000337f         movzx      ecx, byte [rdx]
0000000000003382         mov        qword [rsp+0x198+var_178], rdx
0000000000003387         test       cl, cl
0000000000003389         mov        byte [rsp+0x198+var_188], cl
000000000000338d         je         loc_3640

0000000000003393         call       j___ctype_b_loc                             ; __ctype_b_loc
0000000000003398         mov        rdx, qword [rsp+0x198+var_178]
000000000000339d         mov        rsi, qword [rax]
00000000000033a0         movzx      ecx, byte [rsp+0x198+var_188]
00000000000033a5         mov        rax, rdx
00000000000033a8         jmp        loc_33ba
00000000000033aa         align      16

                     loc_33b0:
00000000000033b0         mov        qword [rsp+0x198+var_138], rax              ; CODE XREF=process_field+1112
00000000000033b5         movzx      ecx, byte [r9+1]

                     loc_33ba:
00000000000033ba         movzx      edx, cl                                     ; CODE XREF=process_field+1080
00000000000033bd         mov        r9, rax
00000000000033c0         lea        rax, qword [rax+1]
00000000000033c4         test       byte [rsi+rdx*2], 0x1
00000000000033c8         jne        loc_33b0

00000000000033ca         lea        rdi, qword [aKmgtpezy]                      ; argument "__s" for method j_strchr, "KMGTPEZY"
00000000000033d1         movsx      esi, cl                                     ; argument "__c" for method j_strchr
00000000000033d4         mov        qword [rsp+0x198+var_178], r9
00000000000033d9         mov        byte [rsp+0x198+var_188], cl
00000000000033dd         call       j_strchr                                    ; strchr
00000000000033e2         test       rax, rax
00000000000033e5         je         loc_4232

00000000000033eb         test       r13d, r13d
00000000000033ee         je         loc_3ce1

00000000000033f4         movzx      ecx, byte [rsp+0x198+var_188]
00000000000033f9         xor        r8d, r8d
00000000000033fc         mov        r9, qword [rsp+0x198+var_178]
0000000000003401         sub        ecx, 0x45
0000000000003404         cmp        cl, 0x15
0000000000003407         jbe        loc_3861

                     loc_340d:
000000000000340d         lea        rax, qword [r9+1]                           ; CODE XREF=process_field+2303
0000000000003411         cmp        r13d, 0x1
0000000000003415         mov        qword [rsp+0x198+var_138], rax
000000000000341a         je         loc_390e

0000000000003420         cmp        r13d, 0x4
0000000000003424         jne        loc_343a

0000000000003426         cmp        byte [r9+1], 0x69
000000000000342b         jne        loc_46d4

0000000000003431         lea        rax, qword [r9+2]
0000000000003435         mov        qword [rsp+0x198+var_138], rax

                     loc_343a:
000000000000343a         mov        dword [rsp+0x198+var_188], r15d             ; CODE XREF=process_field+1204
000000000000343f         movzx      edx, byte [dev_debug]                       ; dev_debug
0000000000003446         fild       dword [rsp+0x198+var_188]

                     loc_344a:
000000000000344a         test       r8d, r8d                                    ; CODE XREF=process_field+2489, process_field+5569, process_field+5711
000000000000344d         je         loc_4661

0000000000003453         mov        eax, r8d
0000000000003456         sub        eax, 0x1
0000000000003459         fld        st0
000000000000345b         je         loc_346b

000000000000345d         nop        dword [rax]

                     loc_3460:
0000000000003460         sub        eax, 0x1                                    ; CODE XREF=process_field+1269
0000000000003463         fmul       st1
0000000000003465         jne        loc_3460

0000000000003467         fstp       st1
0000000000003469         jmp        loc_3470

                     loc_346b:
000000000000346b         fstp       st1                                         ; CODE XREF=process_field+1259
000000000000346d         nop        dword [rax]

                     loc_3470:
0000000000003470         xor        r14d, r14d                                  ; CODE XREF=process_field+1273
0000000000003473         jmp        loc_3656
0000000000003478         align      128

                     loc_3480:
0000000000003480         cmp        rdx, 0x1                                    ; CODE XREF=process_field+750
0000000000003484         jne        loc_3264

000000000000348a         jmp        loc_328a
000000000000348f         align      16

                     loc_3490:
0000000000003490         fld        tword [double_b1d0+16]                      ; 0xb1e0, CODE XREF=process_field+797
0000000000003496         fxch       st1
0000000000003498         mov        rax, qword [user_precision]                 ; user_precision
000000000000349f         cmp        rax, 0xffffffffffffffff
00000000000034a3         cmovne     r14, rax
00000000000034a7         fucomi     st1
00000000000034a9         fstp       st1
00000000000034ab         jb         loc_3550

00000000000034b1         fld        tword [double_b1d0+32]                      ; 0xb1f0
00000000000034b7         fucomip    st1
00000000000034b9         jb         loc_3550

00000000000034bf         fld        st0
00000000000034c1         xor        eax, eax
00000000000034c3         fld        dword [dword_b1b4]                          ; dword_b1b4
00000000000034c9         jmp        loc_34d5
00000000000034cb         align      16

                     loc_34d0:
00000000000034d0         fdivp      st2                                         ; CODE XREF=process_field+1399
00000000000034d2         add        eax, 0x1

                     loc_34d5:
00000000000034d5         fldz                                                   ; CODE XREF=process_field+1369
00000000000034d7         fld        st2
00000000000034d9         fxch       st1
00000000000034db         fucomip    st3
00000000000034dd         jbe        loc_34e1

00000000000034df         fchs

                     loc_34e1:
00000000000034e1         fld        st1                                         ; CODE XREF=process_field+1389
00000000000034e3         fxch       st1
00000000000034e5         fucomip    st1
00000000000034e7         jae        loc_34d0

00000000000034e9         fstp       st0
00000000000034eb         fstp       st0
00000000000034ed         fstp       st0
00000000000034ef         mov        ebx, dword [scale_to]                       ; scale_to
00000000000034f5         test       ebx, ebx
00000000000034f7         je         loc_37f3

                     loc_34fd:
00000000000034fd         cmp        eax, 0x1a                                   ; CODE XREF=process_field+2188
0000000000003500         jbe        loc_3564

0000000000003502         cmp        dword [inval_style], 0x3                    ; inval_style
0000000000003509         fstp       tword [rsp+0x198+var_198]
000000000000350c         je         loc_32a0

0000000000003512         lea        rsi, qword [aValueTooLargeT]                ; argument "msgid" for method j_dcgettext, "value too large to be printed: '%Lg' (cannot handle values > 999Y)"
0000000000003519         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000351e         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003520         call       j_dcgettext                                 ; dcgettext
0000000000003525         fld        tword [rsp+0x198+var_198]
0000000000003528         mov        edi, dword [conv_exit_code]                 ; argument "__status" for method j_error, conv_exit_code
000000000000352e         sub        rsp, 0x10
0000000000003532         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000003535         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000003537         xor        eax, eax
0000000000003539         fstp       tword [rsp+0x1a8+var_1A8]
000000000000353c         call       j_error                                     ; error
0000000000003541         pop        r15
0000000000003543         pop        rax
0000000000003544         jmp        loc_32a0
0000000000003549         align      16

                     loc_3550:
0000000000003550         mov        ebx, dword [scale_to]                       ; scale_to, CODE XREF=process_field+1339, process_field+1353
0000000000003556         test       ebx, ebx
0000000000003558         jne        loc_3564

000000000000355a         cmp        r14, 0x12
000000000000355e         ja         loc_3802

                     loc_3564:
0000000000003564         mov        r13d, dword [grouping]                      ; grouping, CODE XREF=process_field+1424, process_field+1512
000000000000356b         mov        r15d, dword [round_style]                   ; round_style
0000000000003572         mov        byte [rsp+0x198+var_108], 0x25
000000000000357a         test       r13d, r13d
000000000000357d         je         loc_4220

0000000000003583         lea        r12, qword [rsp+0x198+var_108]
000000000000358b         mov        byte [rsp+0x198+var_107], 0x27
0000000000003593         lea        rbp, qword [r12+2]

                     loc_3598:
0000000000003598         mov        r9, qword [zero_padding_width]              ; zero_padding_width, CODE XREF=process_field+4797
000000000000359f         test       r9, r9
00000000000035a2         jne        loc_42ab

                     loc_35a8:
00000000000035a8         movzx      edx, byte [dev_debug]                       ; dev_debug, CODE XREF=process_field+4968
00000000000035af         test       dl, dl
00000000000035b1         jne        loc_427a

                     loc_35b7:
00000000000035b7         test       ebx, ebx                                    ; CODE XREF=process_field+4918
00000000000035b9         jne        loc_3cf2

00000000000035bf         test       r14d, r14d
00000000000035c2         mov        esi, r14d
00000000000035c5         je         loc_4380

00000000000035cb         mov        eax, r14d
00000000000035ce         sub        eax, 0x1
00000000000035d1         je         loc_45dd

00000000000035d7         fld        dword [dword_b1b4]                          ; dword_b1b4
00000000000035dd         mov        ecx, eax
00000000000035df         fld        st0

                     loc_35e1:
00000000000035e1         sub        ecx, 0x1                                    ; CODE XREF=process_field+1654
00000000000035e4         fmul       st1
00000000000035e6         jne        loc_35e1

00000000000035e8         fmul       st2
00000000000035ea         fnstcw     word [rsp+0x198+var_14A]
00000000000035ee         movzx      ecx, word [rsp+0x198+var_14A]
00000000000035f3         fld        tword [double_b1d0+48]                      ; 0xb200
00000000000035f9         or         ch, 0xc
00000000000035fc         cmp        r15d, 0x4
0000000000003600         mov        word [rsp+0x198+var_14C], cx
0000000000003605         fld        st1
0000000000003607         fdiv       st1
0000000000003609         fldcw      word [rsp+0x198+var_14C]
000000000000360d         fistp      qword [rsp+0x198+var_188]
0000000000003611         fldcw      word [rsp+0x198+var_14A]
0000000000003615         fild       qword [rsp+0x198+var_188]
0000000000003619         fmulp      st1
000000000000361b         fsub       st1, st0
000000000000361d         ja         loc_4721

0000000000003623         fstp       st2
0000000000003625         fxch       st1
0000000000003627         lea        rcx, qword [switch_table_b03c]              ; switch_table_b03c
000000000000362e         movsxd     rax, dword [rcx+r15*4]
0000000000003632         add        rax, rcx
0000000000003635         jmp        rax                                         ; switch statement using table at 0xb03c, with 5 cases, 0x392e,0x3b9e,0x3bb7,0x3c00,0x3c29
0000000000003637         align      64

                     loc_3640:
0000000000003640         cmp        r13d, 0x4                                   ; CODE XREF=process_field+1053
0000000000003644         je         loc_3cd0

000000000000364a         movzx      edx, byte [dev_debug]                       ; dev_debug
0000000000003651         fld1
0000000000003653         xor        r8d, r8d

                     loc_3656:
0000000000003656         test       dl, dl                                      ; CODE XREF=process_field+1283, process_field+5880
0000000000003658         jne        loc_3c50

000000000000365e         fld        tword [rsp+0x198+var_128]
0000000000003662         fmulp      st1
0000000000003664         fstp       tword [rsp+0x198+var_128]
0000000000003668         jmp        loc_3670

                     loc_366a:
000000000000366a         fstp       st0                                         ; CODE XREF=process_field+3370
000000000000366c         nop        dword [rax]

                     loc_3670:
0000000000003670         mov        rsi, qword [rsp+0x198+var_138]              ; CODE XREF=process_field+1784, process_field+3419
0000000000003675         test       rsi, rsi
0000000000003678         je         loc_36e0

000000000000367a         cmp        byte [rsi], 0x0
000000000000367d         je         loc_36e0

000000000000367f         cmp        dword [inval_style], 0x3                    ; inval_style
0000000000003686         mov        ebx, 0x5
000000000000368b         je         loc_3248

0000000000003691         mov        edi, 0x1
0000000000003696         call       quote_n                                     ; quote_n
000000000000369b         mov        rsi, rbp
000000000000369e         xor        edi, edi
00000000000036a0         mov        r13, rax
00000000000036a3         call       quote_n                                     ; quote_n
00000000000036a8         lea        rsi, qword [aInvalidSuffixI_9a28]           ; argument "msgid" for method j_dcgettext, "invalid suffix in input %s: %s"
00000000000036af         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000036b1         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000036b6         mov        rbp, rax
00000000000036b9         call       j_dcgettext                                 ; dcgettext
00000000000036be         mov        edi, dword [conv_exit_code]                 ; argument "__status" for method j_error, conv_exit_code
00000000000036c4         mov        rdx, rax                                    ; argument "__format" for method j_error
00000000000036c7         mov        r8, r13
00000000000036ca         mov        rcx, rbp
00000000000036cd         xor        esi, esi                                    ; argument "__errnum" for method j_error
00000000000036cf         xor        eax, eax
00000000000036d1         call       j_error                                     ; error
00000000000036d6         jmp        loc_3248
00000000000036db         align      32

                     loc_36e0:
00000000000036e0         cmp        ebx, 0x1                                    ; CODE XREF=process_field+1800, process_field+1805
00000000000036e3         jne        loc_471a

00000000000036e9         cmp        byte [debug], 0x0                           ; debug
00000000000036f0         je         loc_3248

00000000000036f6         mov        rdi, rbp
00000000000036f9         call       quote                                       ; quote
00000000000036fe         lea        rsi, qword [aLargeInputValu]                ; argument "msgid" for method j_dcgettext, "large input value %s: possible precision loss"
0000000000003705         mov        rbp, rax
0000000000003708         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000370a         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000370f         call       j_dcgettext                                 ; dcgettext
0000000000003714         mov        rcx, rbp
0000000000003717         mov        rdx, rax                                    ; argument "__format" for method j_error
000000000000371a         xor        esi, esi                                    ; argument "__errnum" for method j_error
000000000000371c         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000371e         xor        eax, eax
0000000000003720         call       j_error                                     ; error
0000000000003725         jmp        loc_3248
000000000000372a         align      16

                     loc_3730:
0000000000003730         test       dl, dl                                      ; CODE XREF=process_field+228
0000000000003732         je         loc_3068

0000000000003738         mov        rcx, qword [stderr@@GLIBC_2.2.5]            ; argument "__s" for method j_fwrite, stderr@@GLIBC_2.2.5
000000000000373f         lea        rdi, qword [aNoValidSuffixF]                ; argument "__ptr" for method j_fwrite, "no valid suffix found\\n"
0000000000003746         mov        edx, 0x16                                   ; argument "__n" for method j_fwrite
000000000000374b         mov        esi, 0x1                                    ; argument "__size" for method j_fwrite
0000000000003750         call       j_fwrite                                    ; fwrite
0000000000003755         jmp        loc_3068
000000000000375a         align      32

                     loc_3760:
0000000000003760         lea        rdi, qword [rcx+r8]                         ; CODE XREF=process_field+1015
0000000000003764         fld        dword [rsp+0x198+var_198]
0000000000003767         lea        rcx, qword [rsp+0x198+var_139]
000000000000376c         lea        rdx, qword [rsp+0x198+var_118]
0000000000003774         lea        rsi, qword [rsp+0x198+var_130]
0000000000003779         fstp       tword [rsp+0x198+var_118]
0000000000003780         mov        qword [rsp+0x198+var_138], rdi
0000000000003785         call       simple_strtod_int                           ; simple_strtod_int
000000000000378a         cmp        eax, 0x1
000000000000378d         jbe        loc_389e

0000000000003793         mov        ebx, eax
0000000000003795         jmp        loc_317a
000000000000379a         align      32

                     loc_37a0:
00000000000037a0         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5, CODE XREF=process_field+1028
00000000000037a7         push       qword [rsp+0x198+var_120]
00000000000037ab         lea        rdx, qword [aParsedNumericV]                ; "  parsed numeric value: %Lf\\n  input precision = %d\\n"
00000000000037b2         push       qword [rsp+0x1a0+var_128]
00000000000037b6         mov        ecx, r14d
00000000000037b9         mov        esi, 0x1
00000000000037be         xor        eax, eax
00000000000037c0         call       j___fprintf_chk                             ; __fprintf_chk
00000000000037c5         pop        r9
00000000000037c7         pop        r10
00000000000037c9         jmp        loc_337a
00000000000037ce         align      16

                     loc_37d0:
00000000000037d0         xor        r14d, r14d                                  ; case 3, CODE XREF=process_field+547, process_field+2358
00000000000037d3         mov        ebx, 0x3
00000000000037d8         lea        r13, qword [aInvalidNumberS]                ; "invalid number: %s"
00000000000037df         jmp        loc_3210

                     loc_37e4:
00000000000037e4         xor        r14d, r14d                                  ; case 4, CODE XREF=process_field+547
00000000000037e7         lea        r13, qword [aRejectingSuffi]                ; "rejecting suffix in input: %s (consider using --from)"
00000000000037ee         jmp        loc_3210

                     loc_37f3:
00000000000037f3         mov        edx, eax                                    ; CODE XREF=process_field+1415
00000000000037f5         add        rdx, r14
00000000000037f8         cmp        rdx, 0x12
00000000000037fc         jbe        loc_34fd

                     loc_3802:
0000000000003802         cmp        dword [inval_style], 0x3                    ; inval_style, CODE XREF=process_field+1518
0000000000003809         je         loc_3297

000000000000380f         test       r14, r14
0000000000003812         mov        ebx, dword [conv_exit_code]                 ; conv_exit_code
0000000000003818         mov        edx, 0x5
000000000000381d         fstp       tword [rsp+0x198+var_198]
0000000000003820         je         loc_424d

0000000000003826         lea        rsi, qword [aValueprecision]                ; argument "msgid" for method j_dcgettext, "value/precision too large to be printed: '%Lg/%lu' (consider using --to)"
000000000000382d         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000382f         call       j_dcgettext                                 ; dcgettext
0000000000003834         sub        rsp, 0x10
0000000000003838         mov        rcx, r14
000000000000383b         mov        rdx, rax                                    ; argument "__format" for method j_error
000000000000383e         fld        tword [rsp+0x1a8+var_198]
0000000000003842         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000003844         mov        edi, ebx                                    ; argument "__status" for method j_error
0000000000003846         xor        eax, eax
0000000000003848         fstp       tword [rsp+0x1a8+var_1A8]
000000000000384b         call       j_error                                     ; error
0000000000003850         pop        rcx
0000000000003851         pop        rsi
0000000000003852         jmp        loc_32a0

                     loc_3857:
0000000000003857         mov        rbp, r12                                    ; CODE XREF=process_field+255
000000000000385a         xor        eax, eax
000000000000385c         jmp        loc_309f

                     loc_3861:
0000000000003861         lea        rax, qword [CSWTCH.317]                     ; CSWTCH.317, CODE XREF=process_field+1175
0000000000003868         movzx      ecx, cl
000000000000386b         mov        r8d, dword [rax+rcx*4]
000000000000386f         jmp        loc_340d

                     loc_3874:
0000000000003874         mov        rdi, rbp                                    ; CODE XREF=process_field+239
0000000000003877         call       quote                                       ; quote
000000000000387c         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
0000000000003883         lea        rdx, qword [aTrimmingSuffix]                ; "trimming suffix %s\\n"
000000000000388a         mov        rcx, rax
000000000000388d         mov        esi, 0x1
0000000000003892         xor        eax, eax
0000000000003894         call       j___fprintf_chk                             ; __fprintf_chk
0000000000003899         jmp        loc_3068

                     loc_389e:
000000000000389e         cmovne     eax, ebx                                    ; CODE XREF=process_field+2077
00000000000038a1         cmp        byte [rsp+0x198+var_139], 0x0
00000000000038a6         jne        loc_37d0

00000000000038ac         mov        rcx, qword [rsp+0x198+var_130]
00000000000038b1         fld        tword [rsp+0x198+var_118]
00000000000038b8         mov        r14, rcx
00000000000038bb         sub        r14, qword [rsp+0x198+var_138]
00000000000038c0         test       r14d, r14d
00000000000038c3         je         loc_38e4

00000000000038c5         mov        edx, r14d
00000000000038c8         sub        edx, 0x1
00000000000038cb         je         loc_4651

00000000000038d1         fld        dword [dword_b1b4]                          ; dword_b1b4
00000000000038d7         fld        st0

                     loc_38d9:
00000000000038d9         sub        edx, 0x1                                    ; CODE XREF=process_field+2414
00000000000038dc         fmul       st1
00000000000038de         jne        loc_38d9

00000000000038e0         fstp       st1
00000000000038e2         fdivp      st1

                     loc_38e4:
00000000000038e4         fld        st0                                         ; CODE XREF=process_field+2387, process_field+5863
00000000000038e6         fstp       tword [rsp+0x198+var_118]
00000000000038ed         cmp        byte [rsp+0x198+var_13A], 0x0
00000000000038f2         fld        tword [rsp+0x198+var_128]
00000000000038f6         je         loc_4536

00000000000038fc         fsubrp     st1
00000000000038fe         fstp       tword [rsp+0x198+var_128]

                     loc_3902:
0000000000003902         mov        qword [rsp+0x198+var_138], rcx              ; CODE XREF=process_field+5580
0000000000003907         mov        ebx, eax
0000000000003909         jmp        loc_336d

                     loc_390e:
000000000000390e         cmp        byte [r9+1], 0x69                           ; CODE XREF=process_field+1194
0000000000003913         movzx      edx, byte [dev_debug]                       ; dev_debug
000000000000391a         je         loc_4518

0000000000003920         mov        dword [rsp+0x198+var_188], r15d
0000000000003925         fild       dword [rsp+0x198+var_188]
0000000000003929         jmp        loc_344a

                     loc_392e:
000000000000392e         fxch       st1                                         ; case 0, CODE XREF=process_field+1733
0000000000003930         jmp        loc_3934

                     loc_3932:
0000000000003932         fxch       st1                                         ; case 0, CODE XREF=process_field+5826

                     loc_3934:
0000000000003934         fld        st0                                         ; case 0, CODE XREF=process_field+2496, process_field+3153, process_field+5209
0000000000003936         fldcw      word [rsp+0x198+var_14C]
000000000000393a         fistp      qword [rsp+0x198+var_198]
000000000000393d         fldcw      word [rsp+0x198+var_14A]
0000000000003941         fild       qword [rsp+0x198+var_198]
0000000000003944         fxch       st1
0000000000003946         fucomip    st1
0000000000003948         jbe        loc_395b

000000000000394a         fstp       st0
000000000000394c         mov        rax, qword [rsp+0x198+var_198]
0000000000003950         add        rax, 0x1
0000000000003954         mov        qword [rsp+0x198+var_198], rax
0000000000003958         fild       qword [rsp+0x198+var_198]

                     loc_395b:
000000000000395b         test       esi, esi                                    ; CODE XREF=process_field+2520, process_field+3138, process_field+3211, process_field+3252, process_field+5736
000000000000395d         faddp      st1
000000000000395f         je         loc_397f

0000000000003961         mov        eax, esi
0000000000003963         fld        dword [dword_b1b4]                          ; dword_b1b4
0000000000003969         sub        eax, 0x1
000000000000396c         je         loc_3c49

                     loc_3972:
0000000000003972         fld        st0                                         ; CODE XREF=process_field+6073

                     loc_3974:
0000000000003974         sub        eax, 0x1                                    ; CODE XREF=process_field+2569
0000000000003977         fmul       st1
0000000000003979         jne        loc_3974

000000000000397b         fstp       st1
000000000000397d         fdivp      st1

                     loc_397f:
000000000000397f         test       dl, dl                                      ; CODE XREF=process_field+2543, process_field+3291, process_field+5891
0000000000003981         mov        r9d, r14d
0000000000003984         je         loc_39db

0000000000003986         fxch       st1
0000000000003988         fstp       tword [rsp+0x198+var_188]
000000000000398c         lea        rax, qword [aNoScalingRetur]                ; "  no scaling, returning (grouped) value: %'.*Lf\\n"
0000000000003993         lea        rdx, qword [aNoScalingRetur_9908]           ; "  no scaling, returning value: %.*Lf\\n"
000000000000399a         test       r13d, r13d
000000000000399d         mov        ecx, r14d
00000000000039a0         mov        esi, 0x1
00000000000039a5         mov        dword [rsp+0x198+var_178], r14d
00000000000039aa         cmovne     rdx, rax
00000000000039ae         sub        rsp, 0x10
00000000000039b2         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
00000000000039b9         xor        eax, eax
00000000000039bb         fld        st0
00000000000039bd         fstp       tword [rsp+0x1a8+var_1A8]
00000000000039c0         fstp       tword [rsp+0x1a8+var_198]
00000000000039c4         call       j___fprintf_chk                             ; __fprintf_chk
00000000000039c9         pop        r13
00000000000039cb         pop        r14
00000000000039cd         mov        r9d, dword [rsp+0x198+var_178]
00000000000039d2         fld        tword [rsp+0x198+var_198]
00000000000039d5         fld        tword [rsp+0x198+var_188]
00000000000039d9         jmp        loc_39dd

                     loc_39db:
00000000000039db         fxch       st1                                         ; CODE XREF=process_field+2580

                     loc_39dd:
00000000000039dd         mov        dword [rbp], 0x664c2a2e                     ; CODE XREF=process_field+2665
00000000000039e4         mov        byte [rbp+4], 0x0
00000000000039e8         lea        rbp, qword [rsp+0x198+var_C8]
00000000000039f0         sub        rsp, 0x10
00000000000039f4         xor        eax, eax
00000000000039f6         mov        r8, r12
00000000000039f9         mov        ecx, 0x80
00000000000039fe         mov        edx, 0x1
0000000000003a03         mov        esi, 0x80
0000000000003a08         mov        rdi, rbp
0000000000003a0b         fstp       tword [rsp+0x1a8+var_188]
0000000000003a0f         fld        st0
0000000000003a11         fstp       tword [rsp+0x1a8+var_1A8]
0000000000003a14         fstp       tword [rsp+0x1a8+var_198]
0000000000003a18         call       j___snprintf_chk                            ; __snprintf_chk
0000000000003a1d         cmp        eax, 0x7f
0000000000003a20         pop        r11
0000000000003a22         pop        rbx
0000000000003a23         fld        tword [rsp+0x198+var_198]
0000000000003a26         ja         loc_46e8

0000000000003a2c         fstp       st0
0000000000003a2e         movzx      ebx, byte [dev_debug]                       ; dev_debug
0000000000003a35         fld        tword [rsp+0x198+var_188]

                     loc_3a39:
0000000000003a39         mov        rsi, qword [suffix]                         ; suffix, CODE XREF=process_field+5261
0000000000003a40         test       rsi, rsi
0000000000003a43         je         loc_3a9a

                     loc_3a45:
0000000000003a45         mov        rdx, rbp                                    ; CODE XREF=process_field+4206

                     loc_3a48:
0000000000003a48         mov        ecx, dword [rdx]                            ; CODE XREF=process_field+2797
0000000000003a4a         add        rdx, 0x4
0000000000003a4e         lea        eax, dword [rcx-0x1010101]
0000000000003a54         not        ecx
0000000000003a56         and        eax, ecx
0000000000003a58         and        eax, 0x80808080
0000000000003a5d         je         loc_3a48

0000000000003a5f         mov        ecx, eax
0000000000003a61         shr        ecx, 0x10
0000000000003a64         test       eax, 0x8080
0000000000003a69         fstp       tword [rsp+0x198+var_198]
0000000000003a6c         cmove      eax, ecx
0000000000003a6f         lea        rcx, qword [rdx+2]
0000000000003a73         mov        edi, eax
0000000000003a75         cmove      rdx, rcx
0000000000003a79         add        dil, al
0000000000003a7c         mov        rax, rbp
0000000000003a7f         sbb        rdx, 0x3
0000000000003a83         mov        ecx, 0x80
0000000000003a88         mov        rdi, rbp
0000000000003a8b         sub        rax, rdx
0000000000003a8e         lea        rdx, qword [rax+0x7f]
0000000000003a92         call       j___strncat_chk                             ; __strncat_chk
0000000000003a97         fld        tword [rsp+0x198+var_198]

                     loc_3a9a:
0000000000003a9a         test       bl, bl                                      ; CODE XREF=process_field+2771
0000000000003a9c         je         loc_3ad5

0000000000003a9e         mov        rdi, rbp
0000000000003aa1         fstp       tword [rsp+0x198+var_198]
0000000000003aa4         call       quote                                       ; quote
0000000000003aa9         lea        rdx, qword [aFormattingOutp]                ; "formatting output:\\n  value: %Lf\\n  humanized: %s\\n"
0000000000003ab0         sub        rsp, 0x10
0000000000003ab4         mov        rcx, rax
0000000000003ab7         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
0000000000003abe         mov        esi, 0x1
0000000000003ac3         xor        eax, eax
0000000000003ac5         fld        tword [rsp+0x1a8+var_198]
0000000000003ac9         fstp       tword [rsp+0x1a8+var_1A8]
0000000000003acc         call       j___fprintf_chk                             ; __fprintf_chk
0000000000003ad1         pop        rax
0000000000003ad2         pop        rdx
0000000000003ad3         jmp        loc_3ad7

                     loc_3ad5:
0000000000003ad5         fstp       st0                                         ; CODE XREF=process_field+2860

                     loc_3ad7:
0000000000003ad7         mov        rsi, qword [padding_width]                  ; padding_width, CODE XREF=process_field+2915, process_field+4214
0000000000003ade         mov        rax, rbp

                     loc_3ae1:
0000000000003ae1         mov        ecx, dword [rax]                            ; CODE XREF=process_field+2951
0000000000003ae3         add        rax, 0x4
0000000000003ae7         lea        edx, dword [rcx-0x1010101]
0000000000003aed         not        ecx
0000000000003aef         and        edx, ecx
0000000000003af1         and        edx, 0x80808080
0000000000003af7         je         loc_3ae1

0000000000003af9         mov        ecx, edx
0000000000003afb         shr        ecx, 0x10
0000000000003afe         test       edx, 0x8080
0000000000003b04         cmove      edx, ecx
0000000000003b07         lea        rcx, qword [rax+2]
0000000000003b0b         mov        edi, edx
0000000000003b0d         cmove      rax, rcx
0000000000003b11         add        dil, dl
0000000000003b14         mov        rdx, qword [padding_buffer_size]            ; padding_buffer_size
0000000000003b1b         sbb        rax, 0x3
0000000000003b1f         sub        rax, rbp
0000000000003b22         test       rsi, rsi
0000000000003b25         je         loc_3b30

0000000000003b27         cmp        rsi, rax
0000000000003b2a         ja         loc_442f

                     loc_3b30:
0000000000003b30         lea        rdi, qword [rax+1]                          ; CODE XREF=process_field+2997
0000000000003b34         cmp        rdi, rdx
0000000000003b37         jb         loc_3b3e

0000000000003b39         call       setup_padding_buffer.part.0                 ; setup_padding_buffer.part.0

                     loc_3b3e:
0000000000003b3e         mov        rdi, qword [padding_buffer]                 ; argument "__dest" for method j_strcpy, padding_buffer, CODE XREF=process_field+3015
0000000000003b45         mov        rsi, rbp                                    ; argument "__src" for method j_strcpy
0000000000003b48         call       j_strcpy                                    ; strcpy

                     loc_3b4d:
0000000000003b4d         mov        rdi, qword [format_str_prefix]              ; format_str_prefix, CODE XREF=process_field+5362, process_field+5409
0000000000003b54         mov        rsi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000003b5b         test       rdi, rdi
0000000000003b5e         je         loc_3b6c

0000000000003b60         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000003b65         mov        rsi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5

                     loc_3b6c:
0000000000003b6c         mov        rdi, qword [padding_buffer]                 ; argument "__s" for method j_fputs_unlocked, padding_buffer, CODE XREF=process_field+3054
0000000000003b73         mov        ebx, 0x1
0000000000003b78         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000003b7d         mov        rdi, qword [format_str_suffix]              ; format_str_suffix
0000000000003b84         test       rdi, rdi
0000000000003b87         je         loc_2fdc

0000000000003b8d         mov        rsi, qword [stdout@@GLIBC_2.2.5]            ; argument "__stream" for method j_fputs_unlocked, stdout@@GLIBC_2.2.5
0000000000003b94         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000003b99         jmp        loc_2fdc

                     loc_3b9e:
0000000000003b9e         fxch       st1                                         ; case 3, CODE XREF=process_field+1733
0000000000003ba0         jmp        loc_3ba4

                     loc_3ba2:
0000000000003ba2         fxch       st1                                         ; case 3, CODE XREF=process_field+5826

                     loc_3ba4:
0000000000003ba4         fldcw      word [rsp+0x198+var_14C]                    ; case 3, CODE XREF=process_field+3120, process_field+5209
0000000000003ba8         fistp      qword [rsp+0x198+var_198]
0000000000003bab         fldcw      word [rsp+0x198+var_14A]
0000000000003baf         fild       qword [rsp+0x198+var_198]
0000000000003bb2         jmp        loc_395b

                     loc_3bb7:
0000000000003bb7         fxch       st1                                         ; case 2, CODE XREF=process_field+1733
0000000000003bb9         jmp        loc_3bbd

                     loc_3bbb:
0000000000003bbb         fxch       st1                                         ; case 2, CODE XREF=process_field+5826

                     loc_3bbd:
0000000000003bbd         fldz                                                   ; case 2, CODE XREF=process_field+3145, process_field+5209
0000000000003bbf         fucomip    st1
0000000000003bc1         jbe        loc_3934

0000000000003bc7         fchs
0000000000003bc9         fld        st0
0000000000003bcb         fldcw      word [rsp+0x198+var_14C]
0000000000003bcf         fistp      qword [rsp+0x198+var_158]
0000000000003bd3         fldcw      word [rsp+0x198+var_14A]

                     loc_3bd7:
0000000000003bd7         mov        rax, qword [rsp+0x198+var_158]              ; CODE XREF=process_field+3279
0000000000003bdc         xor        ecx, ecx
0000000000003bde         mov        qword [rsp+0x198+var_198], rax
0000000000003be2         fild       qword [rsp+0x198+var_198]
0000000000003be5         fxch       st1
0000000000003be7         fucomip    st1
0000000000003be9         fstp       st0
0000000000003beb         seta       cl
0000000000003bee         add        rax, rcx
0000000000003bf1         neg        rax
0000000000003bf4         mov        qword [rsp+0x198+var_198], rax
0000000000003bf8         fild       qword [rsp+0x198+var_198]
0000000000003bfb         jmp        loc_395b

                     loc_3c00:
0000000000003c00         fxch       st1                                         ; case 4, CODE XREF=process_field+1733
0000000000003c02         jmp        loc_3c06

                     loc_3c04:
0000000000003c04         fxch       st1                                         ; case 4, CODE XREF=process_field+5826

                     loc_3c06:
0000000000003c06         fldz                                                   ; case 4, CODE XREF=process_field+3218, process_field+5209
0000000000003c08         fucomip    st1
0000000000003c0a         ja         loc_45c4

0000000000003c10         fadd       dword [dword_b1c0]                          ; dword_b1c0
0000000000003c16         fldcw      word [rsp+0x198+var_14C]
0000000000003c1a         fistp      qword [rsp+0x198+var_198]
0000000000003c1d         fldcw      word [rsp+0x198+var_14A]
0000000000003c21         fild       qword [rsp+0x198+var_198]
0000000000003c24         jmp        loc_395b

                     loc_3c29:
0000000000003c29         fxch       st1                                         ; case 1, CODE XREF=process_field+1733
0000000000003c2b         jmp        loc_3c2f

                     loc_3c2d:
0000000000003c2d         fxch       st1                                         ; case 1, CODE XREF=process_field+5826

                     loc_3c2f:
0000000000003c2f         fchs                                                   ; case 1, CODE XREF=process_field+3259, process_field+5209
0000000000003c31         fld        st0
0000000000003c33         fldcw      word [rsp+0x198+var_14C]
0000000000003c37         fistp      qword [rsp+0x198+var_158]
0000000000003c3b         fldcw      word [rsp+0x198+var_14A]
0000000000003c3f         jmp        loc_3bd7

                     loc_3c41:
0000000000003c41         fstp       st0                                         ; CODE XREF=process_field+5802
0000000000003c43         fstp       st0
0000000000003c45         fldz
0000000000003c47         fxch       st1

                     loc_3c49:
0000000000003c49         fdivp      st1                                         ; CODE XREF=process_field+2556
0000000000003c4b         jmp        loc_397f

                     loc_3c50:
0000000000003c50         sub        rsp, 0x10                                   ; CODE XREF=process_field+1768
0000000000003c54         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
0000000000003c5b         lea        rdx, qword [aSuffixPowerddL]                ; "  suffix power=%d^%d = %Lf\\n"
0000000000003c62         fld        st0
0000000000003c64         fstp       tword [rsp+0x1a8+var_1A8]
0000000000003c67         xor        eax, eax
0000000000003c69         mov        ecx, r15d
0000000000003c6c         mov        esi, 0x1
0000000000003c71         fstp       tword [rsp+0x1a8+var_188]
0000000000003c75         call       j___fprintf_chk                             ; __fprintf_chk
0000000000003c7a         cmp        byte [dev_debug], 0x0                       ; dev_debug
0000000000003c81         fld        tword [rsp+0x1a8+var_128]
0000000000003c88         fld        tword [rsp+0x1a8+var_188]
0000000000003c8c         fmulp      st1
0000000000003c8e         fld        st0
0000000000003c90         fstp       tword [rsp+0x1a8+var_128]
0000000000003c97         pop        rdi
0000000000003c98         pop        r8
0000000000003c9a         je         loc_366a

0000000000003ca0         sub        rsp, 0x20
0000000000003ca4         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
0000000000003cab         lea        rdx, qword [aReturningValue_9559]           ; "  returning value: %Lf (%LG)\\n"
0000000000003cb2         fld        st0
0000000000003cb4         fstp       tword [rsp+0x1b8+var_1A8]
0000000000003cb8         mov        esi, 0x1
0000000000003cbd         xor        eax, eax
0000000000003cbf         fstp       tword [rsp+0x1b8+var_1B8]
0000000000003cc2         call       j___fprintf_chk                             ; __fprintf_chk
0000000000003cc7         add        rsp, 0x20
0000000000003ccb         jmp        loc_3670

                     loc_3cd0:
0000000000003cd0         mov        ebx, 0x6                                    ; CODE XREF=process_field+1748
0000000000003cd5         lea        r13, qword [aMissingISuffix]                ; "missing 'i' suffix in input: %s (e.g Ki/Mi/Gi)"
0000000000003cdc         jmp        loc_3210

                     loc_3ce1:
0000000000003ce1         mov        ebx, 0x4                                    ; CODE XREF=process_field+1150
0000000000003ce6         lea        r13, qword [aRejectingSuffi]                ; "rejecting suffix in input: %s (consider using --from)"
0000000000003ced         jmp        loc_3210

                     loc_3cf2:
0000000000003cf2         lea        eax, dword [rbx-3]                          ; CODE XREF=process_field+1609
0000000000003cf5         cmp        eax, 0x1
0000000000003cf8         ja         loc_4365

0000000000003cfe         movsd      xmm3, qword [double_b1c8]                   ; double_b1c8
0000000000003d06         mov        dword [rsp+0x198+var_178], 0x400
0000000000003d0e         movsd      qword [rsp+0x198+var_188], xmm3

                     loc_3d14:
0000000000003d14         fld        tword [double_b1d0+16]                      ; 0xb1e0, CODE XREF=process_field+5131
0000000000003d1a         fxch       st1
0000000000003d1c         fucomi     st1
0000000000003d1e         fstp       st1
0000000000003d20         jb         loc_4243

0000000000003d26         fld        tword [double_b1d0+32]                      ; 0xb1f0
0000000000003d2c         fucomip    st1
0000000000003d2e         jb         loc_4243

0000000000003d34         fild       dword [rsp+0x198+var_178]
0000000000003d38         xor        r13d, r13d
0000000000003d3b         fld        st1
0000000000003d3d         jmp        loc_3d45

                     loc_3d3f:
0000000000003d3f         fdiv       st1                                         ; CODE XREF=process_field+3553
0000000000003d41         add        r13d, 0x1

                     loc_3d45:
0000000000003d45         fldz                                                   ; CODE XREF=process_field+3533
0000000000003d47         fucomip    st1
0000000000003d49         fld        st0
0000000000003d4b         jbe        loc_3d4f

0000000000003d4d         fchs

                     loc_3d4f:
0000000000003d4f         fucomip    st2                                         ; CODE XREF=process_field+3547
0000000000003d51         jae        loc_3d3f

0000000000003d53         fstp       st1

                     loc_3d55:
0000000000003d55         test       dl, dl                                      ; CODE XREF=process_field+4824
0000000000003d57         je         loc_3da5

0000000000003d59         fxch       st1
0000000000003d5b         fstp       tword [rsp+0x198+var_168]
0000000000003d5f         sub        rsp, 0x10
0000000000003d63         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
0000000000003d6a         lea        rdx, qword [aScaledValueToL]                ; "  scaled value to %Lf * %0.f ^ %u\\n"
0000000000003d71         mov        ecx, r13d
0000000000003d74         mov        esi, 0x1
0000000000003d79         mov        eax, 0x1
0000000000003d7e         movsd      xmm0, qword [rsp+0x1a8+var_188]
0000000000003d84         fld        st0
0000000000003d86         fstp       tword [rsp+0x1a8+var_1A8]
0000000000003d89         fstp       tword [rsp+0x1a8+var_178]
0000000000003d8d         call       j___fprintf_chk                             ; __fprintf_chk
0000000000003d92         pop        r9
0000000000003d94         pop        r10
0000000000003d96         movzx      edx, byte [dev_debug]                       ; dev_debug
0000000000003d9d         fld        tword [rsp+0x198+var_168]
0000000000003da1         fld        tword [rsp+0x198+var_178]

                     loc_3da5:
0000000000003da5         mov        rsi, qword [user_precision]                 ; user_precision, CODE XREF=process_field+3559
0000000000003dac         cmp        rsi, 0xffffffffffffffff
0000000000003db0         fld        qword [rsp+0x198+var_188]
0000000000003db4         je         loc_4496

0000000000003dba         lea        eax, dword [r13+r13*2]
0000000000003dbf         cmp        rax, rsi
0000000000003dc2         cmovg      rax, rsi
0000000000003dc6         test       eax, eax
0000000000003dc8         mov        edi, eax
0000000000003dca         je         loc_42e1

0000000000003dd0         sub        eax, 0x1
0000000000003dd3         je         loc_4683

0000000000003dd9         fld        dword [dword_b1b4]                          ; dword_b1b4
0000000000003ddf         mov        ecx, eax
0000000000003de1         fld        st0

                     loc_3de3:
0000000000003de3         sub        ecx, 0x1                                    ; CODE XREF=process_field+3704
0000000000003de6         fmul       st1
0000000000003de8         jne        loc_3de3

0000000000003dea         fmulp      st3
0000000000003dec         fnstcw     word [rsp+0x198+var_14A]
0000000000003df0         movzx      ecx, word [rsp+0x198+var_14A]
0000000000003df5         fld        tword [double_b1d0+48]                      ; 0xb200
0000000000003dfb         or         ch, 0xc
0000000000003dfe         cmp        r15d, 0x4
0000000000003e02         mov        word [rsp+0x198+var_14C], cx
0000000000003e07         fld        st3
0000000000003e09         fdiv       st1
0000000000003e0b         fldcw      word [rsp+0x198+var_14C]
0000000000003e0f         fistp      qword [rsp+0x198+var_178]
0000000000003e13         fldcw      word [rsp+0x198+var_14A]
0000000000003e17         fild       qword [rsp+0x198+var_178]
0000000000003e1b         fmulp      st1
0000000000003e1d         fsub       st3, st0
0000000000003e1f         ja         loc_475b

0000000000003e25         lea        rcx, qword [switch_table_b050]              ; switch_table_b050
0000000000003e2c         movsxd     rax, dword [rcx+r15*4]
0000000000003e30         add        rax, rcx
0000000000003e33         jmp        rax                                         ; switch statement using table at 0xb050, with 5 cases, 0x3e50,0x4100,0x4150,0x41c0,0x41d6

                     loc_3e35:
0000000000003e35         fstp       st3                                         ; case 0, CODE XREF=process_field+5519
0000000000003e37         fxch       st1
0000000000003e39         fxch       st2
0000000000003e3b         jmp        loc_3e45

                     loc_3e3d:
0000000000003e3d         fstp       st1                                         ; case 0, CODE XREF=process_field+5986
0000000000003e3f         fxch       st1
0000000000003e41         fxch       st2
0000000000003e43         fxch       st1

                     loc_3e45:
0000000000003e45         fxch       st2                                         ; CODE XREF=process_field+3787
0000000000003e47         fxch       st1
0000000000003e49         mov        edi, 0x1
0000000000003e4e         jmp        loc_3e58

                     loc_3e50:
0000000000003e50         fstp       st1                                         ; case 0, CODE XREF=process_field+3779
0000000000003e52         fxch       st2
0000000000003e54         jmp        loc_3e58

                     loc_3e56:
0000000000003e56         fxch       st2                                         ; CODE XREF=process_field+4582

                     loc_3e58:
0000000000003e58         fld        st0                                         ; CODE XREF=process_field+3806, process_field+3812, process_field+5097
0000000000003e5a         fldcw      word [rsp+0x198+var_14C]
0000000000003e5e         fistp      qword [rsp+0x198+var_178]
0000000000003e62         fldcw      word [rsp+0x198+var_14A]
0000000000003e66         fild       qword [rsp+0x198+var_178]
0000000000003e6a         fxch       st1
0000000000003e6c         fucomip    st1
0000000000003e6e         jbe        loc_3e84

0000000000003e70         fstp       st0
0000000000003e72         mov        rax, qword [rsp+0x198+var_178]
0000000000003e77         add        rax, 0x1
0000000000003e7b         mov        qword [rsp+0x198+var_178], rax
0000000000003e80         fild       qword [rsp+0x198+var_178]

                     loc_3e84:
0000000000003e84         test       edi, edi                                    ; CODE XREF=process_field+3838, process_field+4532, process_field+4646, process_field+5852
0000000000003e86         faddp      st2
0000000000003e88         jne        loc_4541

0000000000003e8e         fld1

                     loc_3e90:
0000000000003e90         fdivp      st2                                         ; CODE XREF=process_field+4752, loc_4211, process_field+5072, process_field+6118
0000000000003e92         fldz
0000000000003e94         fucomip    st2
0000000000003e96         ja         loc_4402

0000000000003e9c         fxch       st1

                     loc_3e9e:
0000000000003e9e         fucomi     st1                                         ; CODE XREF=process_field+5902
0000000000003ea0         jb         loc_3eb0

0000000000003ea2         jmp        loc_3ea8

                     loc_3ea4:
0000000000003ea4         fstp       st0                                         ; CODE XREF=process_field+5272
0000000000003ea6         fxch       st1

                     loc_3ea8:
0000000000003ea8         fdivrp     st1                                         ; CODE XREF=process_field+3890
0000000000003eaa         add        r13d, 0x1
0000000000003eae         jmp        loc_3eb2

                     loc_3eb0:
0000000000003eb0         fstp       st1                                         ; CODE XREF=process_field+3888

                     loc_3eb2:
0000000000003eb2         fldz                                                   ; CODE XREF=process_field+3902
0000000000003eb4         fxch       st1
0000000000003eb6         fucomi     st1
0000000000003eb8         fstp       st1
0000000000003eba         jp         loc_4501

0000000000003ec0         jne        loc_4501

0000000000003ec6         xor        r9d, r9d

                     loc_3ec9:
0000000000003ec9         test       dl, dl                                      ; CODE XREF=process_field+5306
0000000000003ecb         je         loc_3f21

0000000000003ecd         fxch       st1
0000000000003ecf         fstp       tword [rsp+0x198+var_178]
0000000000003ed3         mov        dword [rsp+0x198+var_168], r9d
0000000000003ed8         sub        rsp, 0x10
0000000000003edc         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
0000000000003ee3         lea        rdx, qword [aAfterRoundingV]                ; "  after rounding, value=%Lf * %0.f ^ %u\\n"
0000000000003eea         mov        esi, 0x1
0000000000003eef         mov        ecx, r13d
0000000000003ef2         mov        eax, 0x1
0000000000003ef7         fld        st0
0000000000003ef9         fstp       tword [rsp+0x1a8+var_1A8]
0000000000003efc         movsd      xmm0, qword [rsp+0x1a8+var_188]
0000000000003f02         fstp       tword [rsp+0x1a8+var_198]
0000000000003f06         call       j___fprintf_chk                             ; __fprintf_chk
0000000000003f0b         pop        rdi
0000000000003f0c         pop        r8
0000000000003f0e         mov        rsi, qword [user_precision]                 ; user_precision
0000000000003f15         mov        r9d, dword [rsp+0x198+var_168]
0000000000003f1a         fld        tword [rsp+0x198+var_178]
0000000000003f1e         fld        tword [rsp+0x198+var_198]

                     loc_3f21:
0000000000003f21         cmp        rsi, 0xffffffffffffffff                     ; CODE XREF=process_field+3931
0000000000003f25         mov        ecx, 0x7325
0000000000003f2a         mov        dword [rbp], 0x664c2a2e
0000000000003f31         cmovne     r9d, esi
0000000000003f35         cmp        r13d, 0x8
0000000000003f39         mov        word [rbp+4], cx
0000000000003f3d         mov        byte [rbp+6], 0x0
0000000000003f41         ja         loc_4575

0000000000003f47         lea        rdx, qword [switch_table_b064]              ; switch_table_b064
0000000000003f4e         mov        eax, r13d
0000000000003f51         movsxd     rax, dword [rdx+rax*4]
0000000000003f55         add        rax, rdx
0000000000003f58         jmp        rax                                         ; switch statement using table at 0xb064, with 9 cases, 0x3f5a,0x3feb,0x4080,0x408e,0x409c,0x40aa,0x40b8,0x40c6,0x40d4

                     loc_3f5a:
0000000000003f5a         fxch       st1                                         ; case 1, CODE XREF=process_field+4072
0000000000003f5c         lea        rax, qword [aError+8]                       ; 0x9504

                     loc_3f63:
0000000000003f63         fstp       tword [rsp+0x198+var_188]                   ; CODE XREF=process_field+4377, process_field+4391, process_field+4405, process_field+4419, process_field+4433, process_field+4447, process_field+4461, process_field+5646
0000000000003f67         lea        rbp, qword [rsp+0x198+var_C8]
0000000000003f6f         sub        rsp, 0x8
0000000000003f73         mov        r8, r12
0000000000003f76         mov        ecx, 0x80
0000000000003f7b         mov        edx, 0x1
0000000000003f80         mov        esi, 0x7f
0000000000003f85         push       rax
0000000000003f86         mov        rdi, rbp
0000000000003f89         xor        eax, eax
0000000000003f8b         sub        rsp, 0x10
0000000000003f8f         fld        st0
0000000000003f91         fstp       tword [rsp+0x1b8+var_1B8]
0000000000003f94         fstp       tword [rsp+0x1b8+var_198]
0000000000003f98         call       j___snprintf_chk                            ; __snprintf_chk
0000000000003f9d         add        rsp, 0x20
0000000000003fa1         cmp        eax, 0x7e
0000000000003fa4         fld        tword [rsp+0x198+var_198]
0000000000003fa7         fld        tword [rsp+0x198+var_188]
0000000000003fab         ja         loc_4042

0000000000003fb1         fstp       st1
0000000000003fb3         cmp        ebx, 0x4
0000000000003fb6         jne        loc_3fc5

0000000000003fb8         test       r13d, r13d
0000000000003fbb         jne        loc_454c

0000000000003fc1         jmp        loc_3fc5

                     loc_3fc3:
0000000000003fc3         fstp       st1                                         ; CODE XREF=process_field+4300

                     loc_3fc5:
0000000000003fc5         movzx      ebx, byte [dev_debug]                       ; dev_debug, CODE XREF=process_field+4166, process_field+4177, process_field+5632
0000000000003fcc         test       bl, bl
0000000000003fce         jne        loc_43cb

0000000000003fd4         mov        rsi, qword [suffix]                         ; suffix
0000000000003fdb         test       rsi, rsi
0000000000003fde         jne        loc_3a45

0000000000003fe4         fstp       st0
0000000000003fe6         jmp        loc_3ad7

                     loc_3feb:
0000000000003feb         fxch       st1                                         ; case 0, CODE XREF=process_field+4072
0000000000003fed         fstp       tword [rsp+0x198+var_188]
0000000000003ff1         lea        rax, qword [aReturningValue_9559+29]        ; 0x9576
0000000000003ff8         lea        rbp, qword [rsp+0x198+var_C8]
0000000000004000         sub        rsp, 0x8                                    ; DATA XREF=sub_66b0+88
0000000000004004         mov        r8, r12
0000000000004007         mov        ecx, 0x80
000000000000400c         mov        edx, 0x1
0000000000004011         push       rax
0000000000004012         mov        esi, 0x7f
0000000000004017         xor        eax, eax
0000000000004019         mov        rdi, rbp
000000000000401c         sub        rsp, 0x10
0000000000004020         fld        st0
0000000000004022         fstp       tword [rsp+0x1b8+var_1B8]
0000000000004025         fstp       tword [rsp+0x1b8+var_198]
0000000000004029         call       j___snprintf_chk                            ; __snprintf_chk
000000000000402e         add        rsp, 0x20
0000000000004032         cmp        eax, 0x7e
0000000000004035         fld        tword [rsp+0x198+var_198]
0000000000004038         fld        tword [rsp+0x198+var_188]
000000000000403c         jbe        loc_3fc3

000000000000403e         fstp       st0
0000000000004040         jmp        loc_4044

                     loc_4042:
0000000000004042         fstp       st0                                         ; CODE XREF=process_field+4155

                     loc_4044:
0000000000004044         fstp       tword [rsp+0x198+var_198]                   ; CODE XREF=process_field+4304
0000000000004047         lea        rsi, qword [aFailedToPrepar]                ; argument "msgid" for method j_dcgettext, "failed to prepare value '%Lf' for printing"
000000000000404e         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004053         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004055         call       j_dcgettext                                 ; dcgettext
000000000000405a         sub        rsp, 0x10
000000000000405e         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000004061         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000004063         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000004068         xor        eax, eax
000000000000406a         fld        tword [rsp+0x1a8+var_198]
000000000000406e         fstp       tword [rsp+0x1a8+var_1A8]
0000000000004071         call       j_error                                     ; error
0000000000004076         nop        word [cs:rax+rax]

                     loc_4080:
0000000000004080         fxch       st1                                         ; case 8, CODE XREF=process_field+4072
0000000000004082         lea        rax, qword [aKmgtpezy+7]                    ; 0x94ab
0000000000004089         jmp        loc_3f63

                     loc_408e:
000000000000408e         fxch       st1                                         ; case 7, CODE XREF=process_field+4072
0000000000004090         lea        rax, qword [aError+20]                      ; 0x9510
0000000000004097         jmp        loc_3f63

                     loc_409c:
000000000000409c         fxch       st1                                         ; case 6, CODE XREF=process_field+4072
000000000000409e         lea        rax, qword [aError+18]                      ; 0x950e
00000000000040a5         jmp        loc_3f63

                     loc_40aa:
00000000000040aa         fxch       st1                                         ; case 5, CODE XREF=process_field+4072
00000000000040ac         lea        rax, qword [aError+16]                      ; 0x950c
00000000000040b3         jmp        loc_3f63

                     loc_40b8:
00000000000040b8         fxch       st1                                         ; case 4, CODE XREF=process_field+4072
00000000000040ba         lea        rax, qword [aError+14]                      ; 0x950a
00000000000040c1         jmp        loc_3f63

                     loc_40c6:
00000000000040c6         fxch       st1                                         ; case 3, CODE XREF=process_field+4072
00000000000040c8         lea        rax, qword [aError+12]                      ; 0x9508
00000000000040cf         jmp        loc_3f63

                     loc_40d4:
00000000000040d4         fxch       st1                                         ; case 2, CODE XREF=process_field+4072
00000000000040d6         lea        rax, qword [aError+10]                      ; 0x9506
00000000000040dd         jmp        loc_3f63

                     loc_40e2:
00000000000040e2         fstp       st3                                         ; case 4, CODE XREF=process_field+5519
00000000000040e4         fxch       st1
00000000000040e6         fxch       st2
00000000000040e8         jmp        loc_40f2

                     loc_40ea:
00000000000040ea         fstp       st1                                         ; case 4, CODE XREF=process_field+5986
00000000000040ec         fxch       st1
00000000000040ee         fxch       st2
00000000000040f0         fxch       st1

                     loc_40f2:
00000000000040f2         fxch       st1                                         ; CODE XREF=process_field+4472
00000000000040f4         fxch       st2
00000000000040f6         fxch       st1
00000000000040f8         mov        edi, 0x1
00000000000040fd         jmp        loc_4102
00000000000040ff         align      256

                     loc_4100:
0000000000004100         fstp       st1                                         ; case 4, CODE XREF=process_field+3779

                     loc_4102:
0000000000004102         fldz                                                   ; CODE XREF=process_field+4493, process_field+5104
0000000000004104         fucomip    st3
0000000000004106         ja         loc_4634

000000000000410c         fxch       st2
000000000000410e         fadd       dword [dword_b1c0]                          ; dword_b1c0
0000000000004114         fldcw      word [rsp+0x198+var_14C]
0000000000004118         fistp      qword [rsp+0x198+var_178]
000000000000411c         fldcw      word [rsp+0x198+var_14A]
0000000000004120         fild       qword [rsp+0x198+var_178]
0000000000004124         jmp        loc_3e84

                     loc_4129:
0000000000004129         fstp       st3                                         ; case 2, CODE XREF=process_field+5519
000000000000412b         fxch       st1
000000000000412d         fxch       st2
000000000000412f         jmp        loc_4139

                     loc_4131:
0000000000004131         fstp       st1                                         ; case 2, CODE XREF=process_field+5986
0000000000004133         fxch       st1
0000000000004135         fxch       st2
0000000000004137         fxch       st1

                     loc_4139:
0000000000004139         fxch       st1                                         ; CODE XREF=process_field+4543
000000000000413b         fxch       st2
000000000000413d         fxch       st1
000000000000413f         mov        edi, 0x1
0000000000004144         jmp        loc_4152
0000000000004146         align      16

                     loc_4150:
0000000000004150         fstp       st1                                         ; case 2, CODE XREF=process_field+3779

                     loc_4152:
0000000000004152         fldz                                                   ; CODE XREF=process_field+4564, process_field+5079
0000000000004154         fucomip    st3
0000000000004156         jbe        loc_3e56

000000000000415c         fxch       st2
000000000000415e         fchs
0000000000004160         fld        st0
0000000000004162         fldcw      word [rsp+0x198+var_14C]
0000000000004166         fistp      qword [rsp+0x198+var_158]
000000000000416a         fldcw      word [rsp+0x198+var_14A]

                     loc_416e:
000000000000416e         mov        rax, qword [rsp+0x198+var_158]              ; CODE XREF=process_field+4708
0000000000004173         xor        ecx, ecx
0000000000004175         mov        qword [rsp+0x198+var_178], rax
000000000000417a         fild       qword [rsp+0x198+var_178]
000000000000417e         fxch       st1
0000000000004180         fucomip    st1
0000000000004182         fstp       st0
0000000000004184         seta       cl
0000000000004187         add        rax, rcx
000000000000418a         neg        rax
000000000000418d         mov        qword [rsp+0x198+var_178], rax
0000000000004192         fild       qword [rsp+0x198+var_178]
0000000000004196         jmp        loc_3e84

                     loc_419b:
000000000000419b         fstp       st3                                         ; case 1, CODE XREF=process_field+5519
000000000000419d         fxch       st1
000000000000419f         fxch       st2
00000000000041a1         jmp        loc_41ab

                     loc_41a3:
00000000000041a3         fstp       st1                                         ; case 1, CODE XREF=process_field+5986
00000000000041a5         fxch       st1
00000000000041a7         fxch       st2
00000000000041a9         fxch       st1

                     loc_41ab:
00000000000041ab         fxch       st2                                         ; CODE XREF=process_field+4657
00000000000041ad         fxch       st1
00000000000041af         mov        edi, 0x1
00000000000041b4         jmp        loc_41c4
00000000000041b6         align      64

                     loc_41c0:
00000000000041c0         fstp       st1                                         ; case 1, CODE XREF=process_field+3779
00000000000041c2         fxch       st2

                     loc_41c4:
00000000000041c4         fchs                                                   ; CODE XREF=process_field+4676, process_field+5088
00000000000041c6         fld        st0
00000000000041c8         fldcw      word [rsp+0x198+var_14C]
00000000000041cc         fistp      qword [rsp+0x198+var_158]
00000000000041d0         fldcw      word [rsp+0x198+var_14A]
00000000000041d4         jmp        loc_416e

                     loc_41d6:
00000000000041d6         fxch       st3                                         ; case 3, CODE XREF=process_field+3779
00000000000041d8         jmp        loc_41dc

                     loc_41da:
00000000000041da         fxch       st3                                         ; case 3, CODE XREF=process_field+5986

                     loc_41dc:
00000000000041dc         fldcw      word [rsp+0x198+var_14C]                    ; CODE XREF=process_field+4712
00000000000041e0         fistp      qword [rsp+0x198+var_178]
00000000000041e4         fldcw      word [rsp+0x198+var_14A]
00000000000041e8         fild       qword [rsp+0x198+var_178]
00000000000041ec         faddp      st3

                     loc_41ee:
00000000000041ee         mov        eax, edi                                    ; CODE XREF=process_field+5591, process_field+6091
00000000000041f0         sub        eax, 0x1
00000000000041f3         je         loc_4211

                     loc_41f5:
00000000000041f5         fld        st0                                         ; CODE XREF=process_field+6135

                     loc_41f7:
00000000000041f7         sub        eax, 0x1                                    ; CODE XREF=process_field+4748
00000000000041fa         fmul       st1
00000000000041fc         jne        loc_41f7

00000000000041fe         fstp       st1
0000000000004200         jmp        loc_3e90

                     loc_4205:
0000000000004205         fstp       st0                                         ; CODE XREF=process_field+5966
0000000000004207         fstp       st2
0000000000004209         fxch       st1
000000000000420b         fldz
000000000000420d         fxch       st2
000000000000420f         fxch       st1

                     loc_4211:
0000000000004211         jmp        loc_3e90                                    ; CODE XREF=process_field+4739
0000000000004216         align      32

                     loc_4220:
0000000000004220         lea        r12, qword [rsp+0x198+var_108]              ; CODE XREF=process_field+1549
0000000000004228         lea        rbp, qword [r12+1]
000000000000422d         jmp        loc_3598

                     loc_4232:
0000000000004232         mov        ebx, 0x5                                    ; CODE XREF=process_field+1141
0000000000004237         lea        r13, qword [aInvalidSuffixI]                ; "invalid suffix in input: %s"
000000000000423e         jmp        loc_3210

                     loc_4243:
0000000000004243         fld        st0                                         ; CODE XREF=process_field+3504, process_field+3518
0000000000004245         xor        r13d, r13d
0000000000004248         jmp        loc_3d55

                     loc_424d:
000000000000424d         lea        rsi, qword [aValueTooLargeT_9ac8]           ; argument "msgid" for method j_dcgettext, "value too large to be printed: '%Lg' (consider using --to)", CODE XREF=process_field+2224
0000000000004254         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004256         call       j_dcgettext                                 ; dcgettext
000000000000425b         fld        tword [rsp+0x198+var_198]
000000000000425e         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000004261         sub        rsp, 0x10
0000000000004265         xor        eax, eax
0000000000004267         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000004269         mov        edi, ebx                                    ; argument "__status" for method j_error
000000000000426b         fstp       tword [rsp+0x1a8+var_1A8]
000000000000426e         call       j_error                                     ; error
0000000000004273         pop        rax
0000000000004274         pop        rdx
0000000000004275         jmp        loc_32a0

                     loc_427a:
000000000000427a         fstp       tword [rsp+0x198+var_188]                   ; CODE XREF=process_field+1601
000000000000427e         mov        rcx, qword [stderr@@GLIBC_2.2.5]            ; argument "__s" for method j_fwrite, stderr@@GLIBC_2.2.5
0000000000004285         lea        rdi, qword [aDoubletohumann]                ; argument "__ptr" for method j_fwrite, "double_to_human:\\n"
000000000000428c         mov        edx, 0x11                                   ; argument "__n" for method j_fwrite
0000000000004291         mov        esi, 0x1                                    ; argument "__size" for method j_fwrite
0000000000004296         call       j_fwrite                                    ; fwrite
000000000000429b         movzx      edx, byte [dev_debug]                       ; dev_debug
00000000000042a2         fld        tword [rsp+0x198+var_188]
00000000000042a6         jmp        loc_35b7

                     loc_42ab:
00000000000042ab         fstp       tword [rsp+0x198+var_188]                   ; CODE XREF=process_field+1586
00000000000042af         lea        r8, qword [aReturningValue_9559+30]         ; 0x9577
00000000000042b6         mov        rdi, rbp
00000000000042b9         mov        ecx, 0x3f
00000000000042be         mov        edx, 0x1
00000000000042c3         mov        esi, 0x3e
00000000000042c8         xor        eax, eax
00000000000042ca         call       j___snprintf_chk                            ; __snprintf_chk
00000000000042cf         cdqe
00000000000042d1         add        rbp, rax
00000000000042d4         fld        tword [rsp+0x198+var_188]
00000000000042d8         jmp        loc_35a8

                     loc_42dd:
00000000000042dd         fstp       st0                                         ; CODE XREF=process_field+5438
00000000000042df         fstp       st0

                     loc_42e1:
00000000000042e1         fld        tword [double_b1d0+48]                      ; 0xb200, CODE XREF=process_field+3674
00000000000042e7         fnstcw     word [rsp+0x198+var_14A]
00000000000042eb         movzx      eax, word [rsp+0x198+var_14A]
00000000000042f0         or         ah, 0xc
00000000000042f3         cmp        r15d, 0x4
00000000000042f7         mov        word [rsp+0x198+var_14C], ax
00000000000042fc         fld        st2
00000000000042fe         fdiv       st1
0000000000004300         fldcw      word [rsp+0x198+var_14C]
0000000000004304         fistp      qword [rsp+0x198+var_178]
0000000000004308         fldcw      word [rsp+0x198+var_14A]
000000000000430c         fild       qword [rsp+0x198+var_178]
0000000000004310         fmulp      st1
0000000000004312         fsub       st2, st0
0000000000004314         ja         loc_4678

000000000000431a         lea        rcx, qword [switch_table_b088]              ; switch_table_b088
0000000000004321         movsxd     rax, dword [rcx+r15*4]
0000000000004325         add        rax, rcx
0000000000004328         jmp        rax                                         ; switch statement using table at 0xb088, with 5 cases, 0x432a,0x4345,0x434c,0x4355,0x435e

                     loc_432a:
000000000000432a         fxch       st2                                         ; case 3, CODE XREF=process_field+5048
000000000000432c         fldcw      word [rsp+0x198+var_14C]
0000000000004330         fistp      qword [rsp+0x198+var_178]
0000000000004334         fldcw      word [rsp+0x198+var_14A]
0000000000004338         fild       qword [rsp+0x198+var_178]
000000000000433c         faddp      st2
000000000000433e         fld1
0000000000004340         jmp        loc_3e90

                     loc_4345:
0000000000004345         xor        edi, edi                                    ; case 2, CODE XREF=process_field+5048
0000000000004347         jmp        loc_4152

                     loc_434c:
000000000000434c         fxch       st2                                         ; case 1, CODE XREF=process_field+5048
000000000000434e         xor        edi, edi
0000000000004350         jmp        loc_41c4

                     loc_4355:
0000000000004355         fxch       st2                                         ; case 0, CODE XREF=process_field+5048
0000000000004357         xor        edi, edi
0000000000004359         jmp        loc_3e58

                     loc_435e:
000000000000435e         xor        edi, edi                                    ; case 4, CODE XREF=process_field+5048
0000000000004360         jmp        loc_4102

                     loc_4365:
0000000000004365         movsd      xmm4, qword [double_b1d0]                   ; double_b1d0, CODE XREF=process_field+3464
000000000000436d         mov        dword [rsp+0x198+var_178], 0x3e8
0000000000004375         movsd      qword [rsp+0x198+var_188], xmm4
000000000000437b         jmp        loc_3d14

                     loc_4380:
0000000000004380         fld        tword [double_b1d0+48]                      ; 0xb200, CODE XREF=process_field+1621
0000000000004386         fnstcw     word [rsp+0x198+var_14A]
000000000000438a         movzx      eax, word [rsp+0x198+var_14A]
000000000000438f         or         ah, 0xc
0000000000004392         cmp        r15d, 0x4
0000000000004396         mov        word [rsp+0x198+var_14C], ax
000000000000439b         fld        st1
000000000000439d         fdiv       st1
000000000000439f         fldcw      word [rsp+0x198+var_14C]
00000000000043a3         fistp      qword [rsp+0x198+var_188]
00000000000043a7         fldcw      word [rsp+0x198+var_14A]
00000000000043ab         fild       qword [rsp+0x198+var_188]
00000000000043af         fmulp      st1
00000000000043b1         fld        st1
00000000000043b3         fsub       st1
00000000000043b5         ja         loc_466d

00000000000043bb         lea        rcx, qword [switch_table_b09c]              ; switch_table_b09c
00000000000043c2         movsxd     rax, dword [rcx+r15*4]
00000000000043c6         add        rax, rcx
00000000000043c9         jmp        rax                                         ; switch statement using table at 0xb09c, with 5 cases, 0x3934,0x3ba4,0x3bbd,0x3c06,0x3c2f

                     loc_43cb:
00000000000043cb         fstp       tword [rsp+0x198+var_198]                   ; CODE XREF=process_field+4190
00000000000043ce         mov        rdi, rbp
00000000000043d1         call       quote                                       ; quote
00000000000043d6         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
00000000000043dd         lea        rdx, qword [aReturningValue]                ; "  returning value: %s\\n"
00000000000043e4         mov        rcx, rax
00000000000043e7         mov        esi, 0x1
00000000000043ec         xor        eax, eax
00000000000043ee         call       j___fprintf_chk                             ; __fprintf_chk
00000000000043f3         movzx      ebx, byte [dev_debug]                       ; dev_debug
00000000000043fa         fld        tword [rsp+0x198+var_198]
00000000000043fd         jmp        loc_3a39

                     loc_4402:
0000000000004402         fld        st1                                         ; CODE XREF=process_field+3878
0000000000004404         fchs
0000000000004406         fucomi     st1
0000000000004408         jae        loc_3ea4

000000000000440e         fstp       st1

                     loc_4410:
0000000000004410         fld        dword [dword_b1b4]                          ; dword_b1b4, CODE XREF=process_field+5527, process_field+5535
0000000000004416         test       r13d, r13d
0000000000004419         setne      al
000000000000441c         xor        r9d, r9d
000000000000441f         fucomip    st1
0000000000004421         fstp       st0
0000000000004423         seta       r9b
0000000000004427         and        r9d, eax
000000000000442a         jmp        loc_3ec9

                     loc_442f:
000000000000442f         mov        qword [rsp+0x198+var_118], rsi              ; CODE XREF=process_field+3002
0000000000004437         mov        r8d, dword [padding_alignment]              ; padding_alignment
000000000000443e         lea        rcx, qword [rsp+0x198+var_118]
0000000000004446         mov        rsi, qword [padding_buffer]                 ; padding_buffer
000000000000444d         mov        r9d, 0x2
0000000000004453         mov        rdi, rbp
0000000000004456         call       mbsalign                                    ; mbsalign
000000000000445b         cmp        byte [dev_debug], 0x0                       ; dev_debug
0000000000004462         je         loc_3b4d

0000000000004468         mov        rdi, qword [padding_buffer]                 ; padding_buffer
000000000000446f         call       quote                                       ; quote
0000000000004474         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
000000000000447b         lea        rdx, qword [aAfterPaddingSn]                ; "  After padding: %s\\n"
0000000000004482         mov        rcx, rax
0000000000004485         mov        esi, 0x1
000000000000448a         xor        eax, eax
000000000000448c         call       j___fprintf_chk                             ; __fprintf_chk
0000000000004491         jmp        loc_3b4d

                     loc_4496:
0000000000004496         fldz                                                   ; CODE XREF=process_field+3652
0000000000004498         fld        st2
000000000000449a         fxch       st1
000000000000449c         fucomip    st3
000000000000449e         jbe        loc_44a2

00000000000044a0         fchs

                     loc_44a2:
00000000000044a2         fld        dword [dword_b1b4]                          ; dword_b1b4, CODE XREF=process_field+5422
00000000000044a8         fld        st0
00000000000044aa         fucomi     st2
00000000000044ac         fstp       st2
00000000000044ae         jbe        loc_42dd

00000000000044b4         fxch       st3
00000000000044b6         fmulp      st1
00000000000044b8         fnstcw     word [rsp+0x198+var_14A]
00000000000044bc         movzx      eax, word [rsp+0x198+var_14A]
00000000000044c1         fld        tword [double_b1d0+48]                      ; 0xb200
00000000000044c7         or         ah, 0xc
00000000000044ca         cmp        r15d, 0x4
00000000000044ce         mov        word [rsp+0x198+var_14C], ax
00000000000044d3         fld        st1
00000000000044d5         fdiv       st1
00000000000044d7         fldcw      word [rsp+0x198+var_14C]
00000000000044db         fistp      qword [rsp+0x198+var_178]
00000000000044df         fldcw      word [rsp+0x198+var_14A]
00000000000044e3         fild       qword [rsp+0x198+var_178]
00000000000044e7         fmulp      st1
00000000000044e9         fsub       st1, st0
00000000000044eb         ja         loc_472e

00000000000044f1         lea        rcx, qword [switch_table_b0b0]              ; switch_table_b0b0
00000000000044f8         movsxd     rax, dword [rcx+r15*4]
00000000000044fc         add        rax, rcx
00000000000044ff         jmp        rax                                         ; switch statement using table at 0xb0b0, with 5 cases, 0x3e35,0x40e2,0x4129,0x419b,0x4740

                     loc_4501:
0000000000004501         fldz                                                   ; CODE XREF=process_field+3914, process_field+3920
0000000000004503         fucomip    st1
0000000000004505         fld        st0
0000000000004507         jbe        loc_4410

000000000000450d         fchs
000000000000450f         jmp        loc_4410
0000000000004514         align      8

                     loc_4518:
0000000000004518         lea        rax, qword [r9+2]                           ; CODE XREF=process_field+2474
000000000000451c         test       dl, dl
000000000000451e         mov        qword [rsp+0x198+var_138], rax
0000000000004523         jne        loc_4583

0000000000004525         fld        dword [dword_b1b8]                          ; dword_b1b8
000000000000452b         mov        r15d, 0x400
0000000000004531         jmp        loc_344a

                     loc_4536:
0000000000004536         faddp      st1                                         ; CODE XREF=process_field+2438
0000000000004538         fstp       tword [rsp+0x198+var_128]
000000000000453c         jmp        loc_3902

                     loc_4541:
0000000000004541         fld        dword [dword_b1b4]                          ; dword_b1b4, CODE XREF=process_field+3864
0000000000004547         jmp        loc_41ee

                     loc_454c:
000000000000454c         fstp       tword [rsp+0x198+var_198]                   ; CODE XREF=process_field+4171
000000000000454f         cdqe
0000000000004551         mov        edx, 0x7f
0000000000004556         lea        rsi, qword [aIeci+4]                        ; 0x9836
000000000000455d         sub        rdx, rax
0000000000004560         mov        ecx, 0x80
0000000000004565         mov        rdi, rbp
0000000000004568         call       j___strncat_chk                             ; __strncat_chk
000000000000456d         fld        tword [rsp+0x198+var_198]
0000000000004570         jmp        loc_3fc5

                     loc_4575:
0000000000004575         fxch       st1                                         ; CODE XREF=process_field+4049
0000000000004577         lea        rax, qword [aError]                         ; "(error)"
000000000000457e         jmp        loc_3f63

                     loc_4583:
0000000000004583         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5, CODE XREF=process_field+5555
000000000000458a         lea        rdx, qword [aAutoscalingFou]                ; "  Auto-scaling, found 'i', switching to base %d\\n"
0000000000004591         mov        ecx, 0x400
0000000000004596         mov        esi, 0x1
000000000000459b         xor        eax, eax
000000000000459d         mov        dword [rsp+0x198+var_188], r8d
00000000000045a2         mov        r15d, 0x400
00000000000045a8         call       j___fprintf_chk                             ; __fprintf_chk
00000000000045ad         movzx      edx, byte [dev_debug]                       ; dev_debug
00000000000045b4         fld        dword [dword_b1b8]                          ; dword_b1b8
00000000000045ba         mov        r8d, dword [rsp+0x198+var_188]
00000000000045bf         jmp        loc_344a

                     loc_45c4:
00000000000045c4         fsub       dword [dword_b1c0]                          ; dword_b1c0, CODE XREF=process_field+3226
00000000000045ca         fldcw      word [rsp+0x198+var_14C]
00000000000045ce         fistp      qword [rsp+0x198+var_198]
00000000000045d1         fldcw      word [rsp+0x198+var_14A]
00000000000045d5         fild       qword [rsp+0x198+var_198]
00000000000045d8         jmp        loc_395b

                     loc_45dd:
00000000000045dd         fld        dword [dword_b1b4]                          ; dword_b1b4, CODE XREF=process_field+1633
00000000000045e3         fnstcw     word [rsp+0x198+var_14A]
00000000000045e7         movzx      eax, word [rsp+0x198+var_14A]
00000000000045ec         fld        st1
00000000000045ee         fmul       st1
00000000000045f0         or         ah, 0xc
00000000000045f3         cmp        r15d, 0x4
00000000000045f7         mov        word [rsp+0x198+var_14C], ax
00000000000045fc         fld        tword [double_b1d0+48]                      ; 0xb200
0000000000004602         fld        st1
0000000000004604         fdiv       st1
0000000000004606         fldcw      word [rsp+0x198+var_14C]
000000000000460a         fistp      qword [rsp+0x198+var_188]
000000000000460e         fldcw      word [rsp+0x198+var_14A]
0000000000004612         fild       qword [rsp+0x198+var_188]
0000000000004616         fmulp      st1
0000000000004618         fsub       st1, st0
000000000000461a         ja         loc_3c41

0000000000004620         fstp       st2
0000000000004622         fxch       st1
0000000000004624         lea        rcx, qword [switch_table_b0c4]              ; switch_table_b0c4
000000000000462b         movsxd     rax, dword [rcx+r15*4]
000000000000462f         add        rax, rcx
0000000000004632         jmp        rax                                         ; switch statement using table at 0xb0c4, with 5 cases, 0x3932,0x3ba2,0x3bbb,0x3c04,0x3c2d

                     loc_4634:
0000000000004634         fxch       st2                                         ; CODE XREF=process_field+4502
0000000000004636         fsub       dword [dword_b1c0]                          ; dword_b1c0
000000000000463c         fldcw      word [rsp+0x198+var_14C]
0000000000004640         fistp      qword [rsp+0x198+var_178]
0000000000004644         fldcw      word [rsp+0x198+var_14A]
0000000000004648         fild       qword [rsp+0x198+var_178]
000000000000464c         jmp        loc_3e84

                     loc_4651:
0000000000004651         fdiv       dword [dword_b1b4]                          ; dword_b1b4, CODE XREF=process_field+2395
0000000000004657         jmp        loc_38e4

                     loc_465c:
000000000000465c         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=process_field+127
                        ; endp

                     loc_4661:
0000000000004661         fstp       st0                                         ; CODE XREF=process_field+1245
0000000000004663         xor        r14d, r14d
0000000000004666         fld1
0000000000004668         jmp        loc_3656

                     loc_466d:
000000000000466d         fstp       st0                                         ; CODE XREF=process_field+5189
000000000000466f         fstp       st0
0000000000004671         fldz
0000000000004673         jmp        loc_397f

                     loc_4678:
0000000000004678         fstp       st0                                         ; CODE XREF=process_field+5028
000000000000467a         fstp       st1
000000000000467c         fldz
000000000000467e         jmp        loc_3e9e

                     loc_4683:
0000000000004683         fld        dword [dword_b1b4]                          ; dword_b1b4, CODE XREF=process_field+3683
0000000000004689         fnstcw     word [rsp+0x198+var_14A]
000000000000468d         movzx      eax, word [rsp+0x198+var_14A]
0000000000004692         fmul       st2, st0
0000000000004694         or         ah, 0xc
0000000000004697         cmp        r15d, 0x4
000000000000469b         mov        word [rsp+0x198+var_14C], ax
00000000000046a0         fld        tword [double_b1d0+48]                      ; 0xb200
00000000000046a6         fld        st3
00000000000046a8         fdiv       st1
00000000000046aa         fldcw      word [rsp+0x198+var_14C]
00000000000046ae         fistp      qword [rsp+0x198+var_178]
00000000000046b2         fldcw      word [rsp+0x198+var_14A]
00000000000046b6         fild       qword [rsp+0x198+var_178]
00000000000046ba         fmulp      st1
00000000000046bc         fsub       st3, st0
00000000000046be         ja         loc_4205

00000000000046c4         lea        rcx, qword [switch_table_b0d8]              ; switch_table_b0d8
00000000000046cb         movsxd     rax, dword [rcx+r15*4]
00000000000046cf         add        rax, rcx
00000000000046d2         jmp        rax                                         ; switch statement using table at 0xb0d8, with 5 cases, 0x3e3d,0x40ea,0x4131,0x41a3,0x41da

                     loc_46d4:
00000000000046d4         xor        r14d, r14d                                  ; CODE XREF=process_field+1211
00000000000046d7         mov        ebx, 0x6
00000000000046dc         lea        r13, qword [aMissingISuffix]                ; "missing 'i' suffix in input: %s (e.g Ki/Mi/Gi)"
00000000000046e3         jmp        loc_3210

                     loc_46e8:
00000000000046e8         fstp       tword [rsp+0x198+var_198]                   ; CODE XREF=process_field+2742
00000000000046eb         lea        rsi, qword [aFailedToPrepar]                ; argument "msgid" for method j_dcgettext, "failed to prepare value '%Lf' for printing"
00000000000046f2         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000046f7         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000046f9         call       j_dcgettext                                 ; dcgettext
00000000000046fe         sub        rsp, 0x10
0000000000004702         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000004705         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000004707         mov        edi, 0x1                                    ; argument "__status" for method j_error
000000000000470c         xor        eax, eax
000000000000470e         fld        tword [rsp+0x1a8+var_198]
0000000000004712         fstp       tword [rsp+0x1a8+var_1A8]
0000000000004715         call       j_error                                     ; error

                     loc_471a:
000000000000471a         xor        ebx, ebx                                    ; CODE XREF=process_field+1907
000000000000471c         jmp        loc_3248

                     loc_4721:
0000000000004721         fstp       st0                                         ; CODE XREF=process_field+1709
0000000000004723         fstp       st0
0000000000004725         fldz
0000000000004727         fxch       st1
0000000000004729         jmp        loc_3972

                     loc_472e:
000000000000472e         fstp       st0                                         ; CODE XREF=process_field+5499
0000000000004730         fstp       st0
0000000000004732         fldz
0000000000004734         fxch       st2
0000000000004736         mov        edi, 0x1
000000000000473b         jmp        loc_41ee

                     loc_4740:
0000000000004740         fxch       st1                                         ; case 3, CODE XREF=process_field+5519
0000000000004742         fldcw      word [rsp+0x198+var_14C]
0000000000004746         fistp      qword [rsp+0x198+var_178]
000000000000474a         fldcw      word [rsp+0x198+var_14A]
000000000000474e         fild       qword [rsp+0x198+var_178]
0000000000004752         faddp      st1
0000000000004754         fxch       st2
0000000000004756         jmp        loc_3e90

                     loc_475b:
000000000000475b         fstp       st0                                         ; CODE XREF=process_field+3759
000000000000475d         fstp       st2
000000000000475f         fxch       st1
0000000000004761         fldz
0000000000004763         fxch       st2
0000000000004765         fxch       st1
0000000000004767         jmp        loc_41f5
000000000000476c         align      16                                          ; End of unwind block (FDE at 0xc2b0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64


                     process_line:
0000000000004770         push       r15                                         ; Begin of unwind block (FDE at 0xc3c4), CODE XREF=main+1992, main+2187
0000000000004772         push       r14
0000000000004774         mov        r14d, esi
0000000000004777         push       r13
0000000000004779         push       r12
000000000000477b         xor        r13d, r13d
000000000000477e         push       rbp
000000000000477f         push       rbx
0000000000004780         mov        r12d, 0x1
0000000000004786         xor        ebp, ebp
0000000000004788         sub        rsp, 0x18
000000000000478c         mov        eax, dword [delimiter]                      ; delimiter
0000000000004792         nop        word [rax+rax]

                     loc_4798:
0000000000004798         add        rbp, 0x1                                    ; CODE XREF=process_line+373
000000000000479c         cmp        eax, 0x80
00000000000047a1         movzx      r15d, byte [rdi]
00000000000047a5         je         loc_4830

00000000000047ab         movsx      edx, r15b
00000000000047af         cmp        edx, eax
00000000000047b1         je         loc_4910

00000000000047b7         test       r15b, r15b
00000000000047ba         je         loc_47db

00000000000047bc         mov        rbx, rdi
00000000000047bf         jmp        loc_47d0
00000000000047c1         align      8

                     loc_47c8:
00000000000047c8         cmp        edx, eax                                    ; CODE XREF=process_line+105
00000000000047ca         je         loc_48a1

                     loc_47d0:
00000000000047d0         add        rbx, 0x1                                    ; CODE XREF=process_line+79
00000000000047d4         movsx      edx, byte [rbx]
00000000000047d7         test       dl, dl
00000000000047d9         jne        loc_47c8

                     loc_47db:
00000000000047db         mov        rsi, rbp                                    ; CODE XREF=process_line+74, process_line+195, process_line+255, process_line+277, process_line+299, process_line+401
00000000000047de         call       process_field                               ; process_field
00000000000047e3         test       al, al
00000000000047e5         mov        eax, 0x0
00000000000047ea         cmove      r12d, eax
00000000000047ee         test       r14b, r14b
00000000000047f1         je         loc_4819

00000000000047f3         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000047fa         movzx      edx, byte [line_delim]                      ; line_delim
0000000000004801         mov        rax, qword [rdi+0x28]
0000000000004805         cmp        rax, qword [rdi+0x30]
0000000000004809         jae        loc_4929

000000000000480f         lea        rcx, qword [rax+1]
0000000000004813         mov        qword [rdi+0x28], rcx
0000000000004817         mov        byte [rax], dl

                     loc_4819:
0000000000004819         add        rsp, 0x18                                   ; CODE XREF=process_line+129, process_line+449
000000000000481d         mov        eax, r12d
0000000000004820         pop        rbx
0000000000004821         pop        rbp
0000000000004822         pop        r12
0000000000004824         pop        r13
0000000000004826         pop        r14
0000000000004828         pop        r15
000000000000482a         ret
                        ; endp
000000000000482b         align      16

                     loc_4830:
0000000000004830         test       r15b, r15b                                  ; CODE XREF=process_line+53
0000000000004833         je         loc_47db

0000000000004835         mov        qword [rsp+0x48+var_40], rdi
000000000000483a         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000483f         mov        rdi, qword [rsp+0x48+var_40]
0000000000004844         mov        rdx, qword [rax]
0000000000004847         mov        rbx, rdi
000000000000484a         nop        word [rax+rax]

                     loc_4850:
0000000000004850         movzx      eax, r15b                                   ; CODE XREF=process_line+395
0000000000004854         test       byte [rdx+rax*2], 0x1
0000000000004858         jne        loc_48f0

000000000000485e         cmp        r15b, 0xa
0000000000004862         je         loc_48f0

0000000000004868         movzx      eax, byte [rbx]
000000000000486b         test       al, al
000000000000486d         jne        loc_488b

000000000000486f         jmp        loc_47db
0000000000004874         align      8

                     loc_4878:
0000000000004878         cmp        al, 0xa                                     ; CODE XREF=process_line+290
000000000000487a         je         loc_4894

000000000000487c         add        rbx, 0x1
0000000000004880         movzx      eax, byte [rbx]
0000000000004883         test       al, al
0000000000004885         je         loc_47db

                     loc_488b:
000000000000488b         movzx      ecx, al                                     ; CODE XREF=process_line+253
000000000000488e         test       byte [rdx+rcx*2], 0x1
0000000000004892         je         loc_4878

                     loc_4894:
0000000000004894         movzx      r15d, byte [rbx]                            ; CODE XREF=process_line+266

                     loc_4898:
0000000000004898         test       r15b, r15b                                  ; CODE XREF=process_line+419
000000000000489b         je         loc_47db

                     loc_48a1:
00000000000048a1         mov        rsi, rbp                                    ; CODE XREF=process_line+90
00000000000048a4         mov        byte [rbx], 0x0
00000000000048a7         call       process_field                               ; process_field
00000000000048ac         test       al, al
00000000000048ae         mov        eax, dword [delimiter]                      ; delimiter
00000000000048b4         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000048bb         cmove      r12d, r13d
00000000000048bf         mov        esi, 0x20
00000000000048c4         cmp        eax, 0x80
00000000000048c9         mov        rdx, qword [rdi+0x28]
00000000000048cd         cmovne     esi, eax
00000000000048d0         cmp        rdx, qword [rdi+0x30]
00000000000048d4         jae        loc_4918

00000000000048d6         lea        rcx, qword [rdx+1]
00000000000048da         mov        qword [rdi+0x28], rcx
00000000000048de         mov        byte [rdx], sil

                     loc_48e1:
00000000000048e1         lea        rdi, qword [rbx+1]                          ; CODE XREF=process_line+439
00000000000048e5         jmp        loc_4798
00000000000048ea         align      16

                     loc_48f0:
00000000000048f0         add        rbx, 0x1                                    ; CODE XREF=process_line+232, process_line+242
00000000000048f4         movzx      r15d, byte [rbx]
00000000000048f8         test       r15b, r15b
00000000000048fb         jne        loc_4850

0000000000004901         jmp        loc_47db
0000000000004906         align      16

                     loc_4910:
0000000000004910         mov        rbx, rdi                                    ; CODE XREF=process_line+65
0000000000004913         jmp        loc_4898
0000000000004915         align      8

                     loc_4918:
0000000000004918         movzx      esi, sil                                    ; argument #2 for method j___overflow, CODE XREF=process_line+356
000000000000491c         call       j___overflow                                ; __overflow
0000000000004921         mov        eax, dword [delimiter]                      ; delimiter
0000000000004927         jmp        loc_48e1

                     loc_4929:
0000000000004929         movzx      esi, dl                                     ; argument #2 for method j___overflow, CODE XREF=process_line+153
000000000000492c         call       j___overflow                                ; __overflow
0000000000004931         jmp        loc_4819
0000000000004936         align      64                                          ; End of unwind block (FDE at 0xc3c4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168


                     usage:
0000000000004940         push       r13                                         ; Begin of unwind block (FDE at 0xc410), CODE XREF=main+560, main+3140, set_fields+1107, set_fields+1284, set_fields+1431, __argmatch_die+5
0000000000004942         push       r12
0000000000004944         mov        edx, 0x5
0000000000004949         push       rbp
000000000000494a         push       rbx
000000000000494b         mov        ebp, edi
000000000000494d         sub        rsp, 0x88
0000000000004954         mov        rbx, qword [program_name]                   ; program_name
000000000000495b         mov        rax, qword [fs:0x28]
0000000000004964         mov        qword [rsp+0xa8+var_30], rax
0000000000004969         xor        eax, eax
000000000000496b         test       edi, edi
000000000000496d         je         loc_499d

000000000000496f         lea        rsi, qword [aTrySHelpForMor]                ; argument "msgid" for method j_dcgettext, "Try '%s --help' for more information.\\n"
0000000000004976         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004978         call       j_dcgettext                                 ; dcgettext
000000000000497d         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
0000000000004984         mov        rdx, rax
0000000000004987         mov        rcx, rbx
000000000000498a         mov        esi, 0x1
000000000000498f         xor        eax, eax
0000000000004991         call       j___fprintf_chk                             ; __fprintf_chk

                     loc_4996:
0000000000004996         mov        edi, ebp                                    ; argument "__status" for method j_exit, CODE XREF=usage+1646
0000000000004998         call       j_exit                                      ; exit
                        ; endp

                     loc_499d:
000000000000499d         lea        rsi, qword [aUsageSOptionNu]                ; argument "msgid" for method j_dcgettext, "Usage: %s [OPTION]... [NUMBER]...\\n", CODE XREF=usage+45
00000000000049a4         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000049a6         call       j_dcgettext                                 ; dcgettext
00000000000049ab         mov        rdx, rbx
00000000000049ae         mov        rsi, rax
00000000000049b1         mov        edi, 0x1
00000000000049b6         xor        eax, eax
00000000000049b8         call       j___printf_chk                              ; __printf_chk
00000000000049bd         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000049c4         lea        rsi, qword [aReformatNumber]                ; argument "msgid" for method j_dcgettext, "Reformat NUMBER(s), or the numbers from standard input if none are specified.\\n"
00000000000049cb         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000049d0         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000049d2         call       j_dcgettext                                 ; dcgettext
00000000000049d7         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
00000000000049da         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000049dd         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000049e2         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000049e9         lea        rsi, qword [aNmandatoryArgu]                ; argument "msgid" for method j_dcgettext, "\\nMandatory arguments to long options are mandatory for short options too.\\n"
00000000000049f0         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000049f5         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000049f7         call       j_dcgettext                                 ; dcgettext
00000000000049fc         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
00000000000049ff         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004a02         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004a07         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004a0e         lea        rsi, qword [aDebugPrintWarn]                ; argument "msgid" for method j_dcgettext, "      --debug          print warnings about invalid input\\n"
0000000000004a15         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004a1a         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004a1c         call       j_dcgettext                                 ; dcgettext
0000000000004a21         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004a24         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004a27         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004a2c         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004a33         lea        rsi, qword [aDDelimiterxUse]                ; argument "msgid" for method j_dcgettext, "  -d, --delimiter=X    use X instead of whitespace for field delimiter\\n"
0000000000004a3a         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004a3f         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004a41         call       j_dcgettext                                 ; dcgettext
0000000000004a46         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004a49         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004a4c         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004a51         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004a58         lea        rsi, qword [aFieldfieldsRep]                ; argument "msgid" for method j_dcgettext, "      --field=FIELDS   replace the numbers in these input fields (default=1)\\n                         see FIELDS below\\n"
0000000000004a5f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004a64         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004a66         call       j_dcgettext                                 ; dcgettext
0000000000004a6b         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004a6e         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004a71         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004a76         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004a7d         lea        rsi, qword [aFormatformatUs]                ; argument "msgid" for method j_dcgettext, "      --format=FORMAT  use printf style floating-point FORMAT;\\n                         see FORMAT below for details\\n"
0000000000004a84         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004a89         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004a8b         call       j_dcgettext                                 ; dcgettext
0000000000004a90         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004a93         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004a96         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004a9b         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004aa2         lea        rsi, qword [aFromunitAutosc]                ; argument "msgid" for method j_dcgettext, "      --from=UNIT      auto-scale input numbers to UNITs; default is 'none';\\n                         see UNIT below\\n"
0000000000004aa9         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004aae         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004ab0         call       j_dcgettext                                 ; dcgettext
0000000000004ab5         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004ab8         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004abb         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004ac0         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004ac7         lea        rsi, qword [aFromunitnSpeci]                ; argument "msgid" for method j_dcgettext, "      --from-unit=N    specify the input unit size (instead of the default 1)\\n"
0000000000004ace         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004ad3         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004ad5         call       j_dcgettext                                 ; dcgettext
0000000000004ada         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004add         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004ae0         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004ae5         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004aec         lea        rsi, qword [aGroupingUseLoc]                ; argument "msgid" for method j_dcgettext, "      --grouping       use locale-defined grouping of digits, e.g. 1,000,000\\n                         (which means it has no effect in the C/POSIX locale)\\n"
0000000000004af3         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004af8         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004afa         call       j_dcgettext                                 ; dcgettext
0000000000004aff         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004b02         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004b05         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004b0a         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004b11         lea        rsi, qword [aHeadernPrintWi]                ; argument "msgid" for method j_dcgettext, "      --header[=N]     print (without converting) the first N header lines;\\n                         N defaults to 1 if not specified\\n"
0000000000004b18         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004b1d         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004b1f         call       j_dcgettext                                 ; dcgettext
0000000000004b24         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004b27         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004b2a         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004b2f         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004b36         lea        rsi, qword [aInvalidmodeFai]                ; argument "msgid" for method j_dcgettext, "      --invalid=MODE   failure mode for invalid numbers: MODE can be:\\n                         abort (default), fail, warn, ignore\\n"
0000000000004b3d         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004b42         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004b44         call       j_dcgettext                                 ; dcgettext
0000000000004b49         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004b4c         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004b4f         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004b54         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004b5b         lea        rsi, qword [aPaddingnPadThe]                ; argument "msgid" for method j_dcgettext, "      --padding=N      pad the output to N characters; positive N will\\n                         right-align; negative N will left-align;\\n                         padding is ignored if the output is wider than N;\\n                         the default is to a…"
0000000000004b62         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004b67         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004b69         call       j_dcgettext                                 ; dcgettext
0000000000004b6e         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004b71         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004b74         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004b79         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004b80         lea        rsi, qword [aRoundmethodUse]                ; argument "msgid" for method j_dcgettext, "      --round=METHOD   use METHOD for rounding when scaling; METHOD can be:\\n                         up, down, from-zero (default), towards-zero, nearest\\n"
0000000000004b87         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004b8c         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004b8e         call       j_dcgettext                                 ; dcgettext
0000000000004b93         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004b96         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004b99         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004b9e         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004ba5         lea        rsi, qword [aSuffixsuffixAd]                ; argument "msgid" for method j_dcgettext, "      --suffix=SUFFIX  add SUFFIX to output numbers, and accept optional\\n                         SUFFIX in input numbers\\n"
0000000000004bac         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004bb1         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004bb3         call       j_dcgettext                                 ; dcgettext
0000000000004bb8         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004bbb         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004bbe         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004bc3         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004bca         lea        rsi, qword [aTounitAutoscal]                ; argument "msgid" for method j_dcgettext, "      --to=UNIT        auto-scale output numbers to UNITs; see UNIT below\\n"
0000000000004bd1         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004bd6         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004bd8         call       j_dcgettext                                 ; dcgettext
0000000000004bdd         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004be0         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004be3         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004be8         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004bef         lea        rsi, qword [aTounitnTheOutp]                ; argument "msgid" for method j_dcgettext, "      --to-unit=N      the output unit size (instead of the default 1)\\n"
0000000000004bf6         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004bfb         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004bfd         call       j_dcgettext                                 ; dcgettext
0000000000004c02         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004c05         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004c08         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004c0d         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004c14         lea        rsi, qword [aZZeroterminate]                ; argument "msgid" for method j_dcgettext, "  -z, --zero-terminated    line delimiter is NUL, not newline\\n"
0000000000004c1b         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004c20         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004c22         call       j_dcgettext                                 ; dcgettext
0000000000004c27         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004c2a         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004c2d         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004c32         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004c39         lea        rsi, qword [aHelpDisplayThi]                ; argument "msgid" for method j_dcgettext, "      --help     display this help and exit\\n"
0000000000004c40         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004c45         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004c47         call       j_dcgettext                                 ; dcgettext
0000000000004c4c         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004c4f         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004c52         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004c57         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004c5e         lea        rsi, qword [aVersionOutputV]                ; argument "msgid" for method j_dcgettext, "      --version  output version information and exit\\n"
0000000000004c65         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004c6a         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004c6c         call       j_dcgettext                                 ; dcgettext
0000000000004c71         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004c74         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004c77         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004c7c         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004c83         lea        rsi, qword [aNunitOptionsn]                 ; argument "msgid" for method j_dcgettext, "\\nUNIT options:\\n"
0000000000004c8a         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004c8f         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004c91         call       j_dcgettext                                 ; dcgettext
0000000000004c96         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004c99         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004c9c         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004ca1         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004ca8         lea        rsi, qword [aNoneNoAutoscal]                ; argument "msgid" for method j_dcgettext, "  none       no auto-scaling is done; suffixes will trigger an error\\n"
0000000000004caf         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004cb1         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004cb6         call       j_dcgettext                                 ; dcgettext
0000000000004cbb         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004cbe         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004cc1         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004cc6         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004ccd         lea        rsi, qword [aAutoAcceptOpti]                ; argument "msgid" for method j_dcgettext, "  auto       accept optional single/two letter suffix:\\n               1K = 1000,\\n               1Ki = 1024,\\n               1M = 1000000,\\n               1Mi = 1048576,\\n"
0000000000004cd4         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004cd9         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004cdb         call       j_dcgettext                                 ; dcgettext
0000000000004ce0         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004ce3         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004ce6         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004ceb         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004cf2         lea        rsi, qword [aSiAcceptOption]                ; argument "msgid" for method j_dcgettext, "  si         accept optional single letter suffix:\\n               1K = 1000,\\n               1M = 1000000,\\n               ...\\n"
0000000000004cf9         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004cfe         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004d00         call       j_dcgettext                                 ; dcgettext
0000000000004d05         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004d08         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004d0b         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004d10         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004d17         lea        rsi, qword [aIecAcceptOptio]                ; argument "msgid" for method j_dcgettext, "  iec        accept optional single letter suffix:\\n               1K = 1024,\\n               1M = 1048576,\\n               ...\\n"
0000000000004d1e         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004d23         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004d25         call       j_dcgettext                                 ; dcgettext
0000000000004d2a         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004d2d         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004d30         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004d35         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004d3c         lea        rsi, qword [aIeciAcceptOpti]                ; argument "msgid" for method j_dcgettext, "  iec-i      accept optional two-letter suffix:\\n               1Ki = 1024,\\n               1Mi = 1048576,\\n               ...\\n"
0000000000004d43         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004d48         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004d4a         call       j_dcgettext                                 ; dcgettext
0000000000004d4f         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004d52         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004d55         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004d5a         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004d61         lea        rsi, qword [aNfieldsSupport]                ; argument "msgid" for method j_dcgettext, "\\nFIELDS supports cut(1) style field ranges:\\n  N    N'th field, counted from 1\\n  N-   from N'th field, to end of line\\n  N-M  from N'th to M'th field (inclusive)\\n  -M   from first to M'th field (inclusive)\\n  -    all fields\\nMultiple fields/ranges can be sepa…"
0000000000004d68         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004d6d         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004d6f         call       j_dcgettext                                 ; dcgettext
0000000000004d74         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004d77         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004d7a         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004d7f         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004d86         lea        rsi, qword [aNformatMustBeS]                ; argument "msgid" for method j_dcgettext, "\\nFORMAT must be suitable for printing one floating-point argument '%f'.\\nOptional quote (%'f) will enable --grouping (if supported by current locale).\\nOptional width value (%10f) will pad output. Optional zero (%010f) width\\nwill zero pad the number. Optiona…"
0000000000004d8d         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004d92         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004d94         call       j_dcgettext                                 ; dcgettext
0000000000004d99         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004d9c         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004d9f         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004da4         mov        rbx, qword [program_name]                   ; program_name
0000000000004dab         lea        rsi, qword [aNexitStatusIs0]                ; argument "msgid" for method j_dcgettext, "\\nExit status is 0 if all input numbers were successfully converted.\\nBy default, %s will stop at the first conversion error with exit status 2.\\nWith --invalid='fail' a warning is printed for each conversion error\\nand the exit status is 2.  With --invalid='w…"
0000000000004db2         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004db7         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004db9         call       j_dcgettext                                 ; dcgettext
0000000000004dbe         mov        rdx, rbx
0000000000004dc1         mov        rsi, rax
0000000000004dc4         mov        edi, 0x1
0000000000004dc9         xor        eax, eax
0000000000004dcb         call       j___printf_chk                              ; __printf_chk
0000000000004dd0         mov        rbx, qword [program_name]                   ; program_name
0000000000004dd7         lea        rsi, qword [aNexamplesnSTos]                ; argument "msgid" for method j_dcgettext, "\\nExamples:\\n  $ %s --to=si 1000\\n            -> \\\"1.0K\\\"\\n  $ %s --to=iec 2048\\n           -> \\\"2.0K\\\"\\n  $ %s --to=iec-i 4096\\n           -> \\\"4.0Ki\\\"\\n  $ echo 1K | %s --from=si\\n           -> \\\"1000\\\"\\n  $ echo 1K | %s --from=iec\\n           -> \\\"1024\\\"\\n  $ df -B1 | %s --h…"
0000000000004dde         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004de3         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004de5         call       j_dcgettext                                 ; dcgettext
0000000000004dea         sub        rsp, 0x8
0000000000004dee         mov        rcx, rbx
0000000000004df1         mov        rdx, rbx
0000000000004df4         push       rbx
0000000000004df5         push       rbx
0000000000004df6         mov        r9, rbx
0000000000004df9         push       rbx
0000000000004dfa         push       rbx
0000000000004dfb         mov        r8, rbx
0000000000004dfe         push       rbx
0000000000004dff         mov        rsi, rax
0000000000004e02         mov        edi, 0x1
0000000000004e07         xor        eax, eax
0000000000004e09         lea        rbx, qword [aNumfmt]                        ; "numfmt"
0000000000004e10         call       j___printf_chk                              ; __printf_chk
0000000000004e15         lea        rax, qword [aNunitOptionsn+16]              ; 0x95d1
0000000000004e1c         lea        rcx, qword [aSha256sum]                     ; "sha256sum"
0000000000004e23         mov        qword [rsp+0xd8+var_48], 0x0
0000000000004e2f         mov        qword [rsp+0xd8+var_40], 0x0
0000000000004e3b         mov        qword [rsp+0xd8+var_A8], rax
0000000000004e40         lea        rax, qword [aTestInvocation]                ; "test invocation"
0000000000004e47         mov        qword [rsp+0xd8+var_78], rcx
0000000000004e4c         lea        rcx, qword [aSha384sum]                     ; "sha384sum"
0000000000004e53         mov        qword [rsp+0xd8+var_A0], rax
0000000000004e58         lea        rax, qword [aCoreutils]                     ; "coreutils"
0000000000004e5f         mov        qword [rsp+0xd8+var_68], rcx
0000000000004e64         lea        rcx, qword [aSha512sum]                     ; "sha512sum"
0000000000004e6b         mov        qword [rsp+0xd8+var_98], rax
0000000000004e70         lea        rax, qword [aMulticallInvoc]                ; "Multi-call invocation"
0000000000004e77         mov        qword [rsp+0xd8+var_58], rcx
0000000000004e7f         mov        qword [rsp+0xd8+var_90], rax
0000000000004e84         lea        rax, qword [aSha224sum]                     ; "sha224sum"
0000000000004e8b         mov        qword [rsp+0xd8+var_88], rax
0000000000004e90         lea        rax, qword [aSha2Utilities]                 ; "sha2 utilities"
0000000000004e97         mov        qword [rsp+0xd8+var_80], rax
0000000000004e9c         mov        qword [rsp+0xd8+var_70], rax
0000000000004ea1         mov        qword [rsp+0xd8+var_60], rax
0000000000004ea6         mov        qword [rsp+0xd8+var_50], rax
0000000000004eae         add        rsp, 0x30
0000000000004eb2         mov        rdx, rsp
0000000000004eb5         nop        dword [rax]

                     loc_4eb8:
0000000000004eb8         add        rdx, 0x10                                   ; CODE XREF=usage+1429
0000000000004ebc         mov        rdi, qword [rdx]
0000000000004ebf         test       rdi, rdi
0000000000004ec2         je         loc_4ed7

0000000000004ec4         mov        ecx, 0x7
0000000000004ec9         mov        rsi, rbx
0000000000004ecc         rep  cmpsb byte [rsi], byte [rdi]
0000000000004ece         seta       al
0000000000004ed1         sbb        al, 0x0
0000000000004ed3         test       al, al
0000000000004ed5         jne        loc_4eb8

                     loc_4ed7:
0000000000004ed7         mov        r12, qword [rdx+8]                          ; CODE XREF=usage+1410
0000000000004edb         xor        edi, edi
0000000000004edd         mov        edx, 0x5
0000000000004ee2         lea        rsi, qword [aNsOnlineHelpSn]                ; "\\n%s online help: <%s>\\n"
0000000000004ee9         test       r12, r12
0000000000004eec         je         loc_4fb3

0000000000004ef2         call       j_dcgettext                                 ; dcgettext
0000000000004ef7         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000004efe         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0x9647
0000000000004f05         mov        rsi, rax
0000000000004f08         mov        edi, 0x1
0000000000004f0d         xor        eax, eax
0000000000004f0f         call       j___printf_chk                              ; __printf_chk
0000000000004f14         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
0000000000004f16         mov        edi, 0x5                                    ; argument "__category" for method j_setlocale
0000000000004f1b         call       j_setlocale                                 ; setlocale
0000000000004f20         test       rax, rax
0000000000004f23         je         loc_4f41

0000000000004f25         lea        rsi, qword [aCoreutils+10]                  ; argument "__s2" for method j_strncmp, 0x9655
0000000000004f2c         mov        edx, 0x3                                    ; argument "__n" for method j_strncmp
0000000000004f31         mov        rdi, rax                                    ; argument "__s1" for method j_strncmp
0000000000004f34         call       j_strncmp                                   ; strncmp
0000000000004f39         test       eax, eax
0000000000004f3b         jne        loc_5048

                     loc_4f41:
0000000000004f41         lea        rsi, qword [aFullDocumentat]                ; argument "msgid" for method j_dcgettext, "Full documentation <%s%s>\\n", CODE XREF=usage+1507, usage+1837
0000000000004f48         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004f4a         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004f4f         call       j_dcgettext                                 ; dcgettext
0000000000004f54         lea        rcx, qword [aNumfmt]                        ; "numfmt"
0000000000004f5b         lea        rdx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000004f62         mov        rsi, rax
0000000000004f65         mov        edi, 0x1
0000000000004f6a         xor        eax, eax
0000000000004f6c         call       j___printf_chk                              ; __printf_chk
0000000000004f71         cmp        r12, rbx
0000000000004f74         lea        rcx, qword [aMulticallInvoc+10]             ; 0x95ed
0000000000004f7b         lea        rbx, qword [aReturningValue_9559+29]        ; 0x9576
0000000000004f82         cmove      rbx, rcx

                     loc_4f86:
0000000000004f86         lea        rsi, qword [aOrAvailableLoc]                ; argument "msgid" for method j_dcgettext, "or available locally via: info '(coreutils) %s%s'\\n", CODE XREF=usage+1788
0000000000004f8d         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004f8f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004f94         call       j_dcgettext                                 ; dcgettext
0000000000004f99         mov        rcx, rbx
0000000000004f9c         mov        rsi, rax
0000000000004f9f         mov        rdx, r12
0000000000004fa2         mov        edi, 0x1
0000000000004fa7         xor        eax, eax
0000000000004fa9         call       j___printf_chk                              ; __printf_chk
0000000000004fae         jmp        loc_4996

                     loc_4fb3:
0000000000004fb3         call       j_dcgettext                                 ; dcgettext, CODE XREF=usage+1452
0000000000004fb8         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000004fbf         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0x9647
0000000000004fc6         mov        rsi, rax
0000000000004fc9         mov        edi, 0x1
0000000000004fce         xor        eax, eax
0000000000004fd0         call       j___printf_chk                              ; __printf_chk
0000000000004fd5         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
0000000000004fd7         mov        edi, 0x5                                    ; argument "__category" for method j_setlocale
0000000000004fdc         call       j_setlocale                                 ; setlocale
0000000000004fe1         test       rax, rax
0000000000004fe4         je         loc_4ffe

0000000000004fe6         lea        rsi, qword [aCoreutils+10]                  ; argument "__s2" for method j_strncmp, 0x9655
0000000000004fed         mov        edx, 0x3                                    ; argument "__n" for method j_strncmp
0000000000004ff2         mov        rdi, rax                                    ; argument "__s1" for method j_strncmp
0000000000004ff5         call       j_strncmp                                   ; strncmp
0000000000004ffa         test       eax, eax
0000000000004ffc         jne        loc_5041

                     loc_4ffe:
0000000000004ffe         lea        rsi, qword [aFullDocumentat]                ; argument "msgid" for method j_dcgettext, "Full documentation <%s%s>\\n", CODE XREF=usage+1700
0000000000005005         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000500a         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000500c         lea        r12, qword [aNumfmt]                        ; "numfmt"
0000000000005013         lea        rbx, qword [aMulticallInvoc+10]             ; 0x95ed
000000000000501a         call       j_dcgettext                                 ; dcgettext
000000000000501f         lea        rcx, qword [aNumfmt]                        ; "numfmt"
0000000000005026         lea        rdx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
000000000000502d         mov        rsi, rax
0000000000005030         mov        edi, 0x1
0000000000005035         xor        eax, eax
0000000000005037         call       j___printf_chk                              ; __printf_chk
000000000000503c         jmp        loc_4f86

                     loc_5041:
0000000000005041         lea        r12, qword [aNumfmt]                        ; "numfmt", CODE XREF=usage+1724

                     loc_5048:
0000000000005048         mov        r13, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=usage+1531
000000000000504f         lea        rsi, qword [aReportAnyTrans]                ; argument "msgid" for method j_dcgettext, "Report any translation bugs to <https://translationproject.org/team/>\\n"
0000000000005056         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005058         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000505d         call       j_dcgettext                                 ; dcgettext
0000000000005062         mov        rsi, r13                                    ; argument "__stream" for method j_fputs_unlocked
0000000000005065         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000005068         call       j_fputs_unlocked                            ; fputs_unlocked
000000000000506d         jmp        loc_4f41
0000000000005072         align      128                                         ; End of unwind block (FDE at 0xc410)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     compare_ranges:
0000000000005080         mov        eax, dword [rsi]                            ; Begin of unwind block (FDE at 0xc4bc), DATA XREF=set_fields+353
0000000000005082         cmp        dword [rdi], eax
0000000000005084         jl         loc_5090

0000000000005086         setg       al
0000000000005089         movzx      eax, al
000000000000508c         ret
                        ; endp
000000000000508d         align      16

                     loc_5090:
0000000000005090         mov        eax, 0xffffffff                             ; CODE XREF=compare_ranges+4
0000000000005095         ret
                        ; endp
0000000000005096         align      32                                          ; End of unwind block (FDE at 0xc4bc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     add_range_pair:
00000000000050a0         push       rbp                                         ; Begin of unwind block (FDE at 0xc4d0), CODE XREF=set_fields+194, set_fields+319, set_fields+675, set_fields+946, set_fields+996, set_fields+1047
00000000000050a1         push       rbx
00000000000050a2         mov        rbx, rsi
00000000000050a5         mov        rbp, rdi
00000000000050a8         sub        rsp, 0x8
00000000000050ac         mov        rsi, qword [n_frp]                          ; n_frp
00000000000050b3         cmp        rsi, qword [n_frp_allocated]                ; n_frp_allocated
00000000000050ba         mov        rdi, qword [frp]                            ; frp
00000000000050c1         je         loc_50f0

                     loc_50c3:
00000000000050c3         mov        rax, rsi                                    ; CODE XREF=add_range_pair+144
00000000000050c6         add        rsi, 0x1
00000000000050ca         shl        rax, 0x4
00000000000050ce         add        rdi, rax
00000000000050d1         mov        qword [rdi], rbp
00000000000050d4         mov        qword [rdi+8], rbx
00000000000050d8         mov        qword [n_frp], rsi                          ; n_frp
00000000000050df         add        rsp, 0x8
00000000000050e3         pop        rbx
00000000000050e4         pop        rbp
00000000000050e5         ret
                        ; endp
00000000000050e6         align      16

                     loc_50f0:
00000000000050f0         test       rdi, rdi                                    ; CODE XREF=add_range_pair+33
00000000000050f3         je         loc_5138

00000000000050f5         movabs     rax, 0x555555555555554
00000000000050ff         cmp        rsi, rax
0000000000005102         ja         loc_515d

0000000000005104         mov        rax, rsi
0000000000005107         shr        rax, 0x1
000000000000510a         lea        rsi, qword [rsi+rax+1]

                     loc_510f:
000000000000510f         mov        qword [n_frp_allocated], rsi                ; n_frp_allocated, CODE XREF=add_range_pair+187
0000000000005116         shl        rsi, 0x4                                    ; argument #2 for method xrealloc
000000000000511a         call       xrealloc                                    ; xrealloc
000000000000511f         mov        rsi, qword [n_frp]                          ; n_frp
0000000000005126         mov        rdi, rax
0000000000005129         mov        qword [frp], rax                            ; frp
0000000000005130         jmp        loc_50c3
0000000000005132         align      8

                     loc_5138:
0000000000005138         test       rsi, rsi                                    ; CODE XREF=add_range_pair+83
000000000000513b         mov        eax, 0x8
0000000000005140         mov        edx, 0x10
0000000000005145         cmove      rsi, rax
0000000000005149         mov        rax, rdx
000000000000514c         xor        ecx, ecx
000000000000514e         mul        rsi
0000000000005151         jo         loc_5162

                     loc_5153:
0000000000005153         test       rax, rax                                    ; CODE XREF=add_range_pair+199
0000000000005156         js         loc_515d

0000000000005158         test       rcx, rcx
000000000000515b         je         loc_510f

                     loc_515d:
000000000000515d         call       xalloc_die                                  ; xalloc_die, CODE XREF=add_range_pair+98, add_range_pair+182
                        ; endp

                     loc_5162:
0000000000005162         mov        ecx, 0x1                                    ; CODE XREF=add_range_pair+177
0000000000005167         jmp        loc_5153
0000000000005169         align      16                                          ; End of unwind block (FDE at 0xc4d0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_3C: int32_t, -60
        ;    var_40: int32_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80


                     set_fields:
0000000000005170         push       r15                                         ; Begin of unwind block (FDE at 0xc4fc), CODE XREF=main+303
0000000000005172         push       r14
0000000000005174         mov        eax, esi
0000000000005176         push       r13
0000000000005178         push       r12
000000000000517a         mov        r14, rdi
000000000000517d         push       rbp
000000000000517e         push       rbx
000000000000517f         sub        rsp, 0x28
0000000000005183         and        eax, 0x1
0000000000005186         mov        dword [rsp+0x58+var_3C], esi
000000000000518a         mov        dword [rsp+0x58+var_40], eax
000000000000518e         je         loc_51ae

0000000000005190         lea        rdi, qword [aLibs+10]                       ; 0xb45a
0000000000005197         mov        ecx, 0x2
000000000000519c         mov        rsi, r14
000000000000519f         rep  cmpsb byte [rsi], byte [rdi]
00000000000051a1         seta       al
00000000000051a4         sbb        al, 0x0
00000000000051a6         test       al, al
00000000000051a8         je         loc_54a9

                     loc_51ae:
00000000000051ae         xor        r15d, r15d                                  ; CODE XREF=set_fields+30
00000000000051b1         xor        ebx, ebx

                     loc_51b3:
00000000000051b3         mov        ebp, ebx                                    ; CODE XREF=set_fields+840
00000000000051b5         xor        r13d, r13d
00000000000051b8         xor        r12d, r12d
00000000000051bb         mov        qword [rsp+0x58+var_48], 0x1
00000000000051c4         jmp        loc_524e
00000000000051c9         align      16

                     loc_51d0:
00000000000051d0         cmp        r8b, 0x2c                                   ; CODE XREF=set_fields+230
00000000000051d4         mov        byte [rsp+0x58+var_50], r8b
00000000000051d9         je         loc_51f7

00000000000051db         call       j___ctype_b_loc                             ; __ctype_b_loc
00000000000051e0         movzx      edx, byte [rsp+0x58+var_50]
00000000000051e5         mov        r10, qword [rax]
00000000000051e8         test       byte [r10+rdx*2], 0x1
00000000000051ed         jne        loc_51f7

00000000000051ef         test       dl, dl
00000000000051f1         jne        loc_5430

                     loc_51f7:
00000000000051f7         test       bpl, bpl                                    ; CODE XREF=set_fields+105, set_fields+125
00000000000051fa         je         loc_52a0

0000000000005200         test       bl, bl
0000000000005202         jne        loc_53f0

0000000000005208         test       r12b, r12b
000000000000520b         jne        loc_5400

0000000000005211         mov        eax, dword [rsp+0x58+var_40]
0000000000005215         test       eax, eax
0000000000005217         je         loc_5679

000000000000521d         mov        qword [rsp+0x58+var_48], 0x1

                     loc_5226:
0000000000005226         mov        rdi, qword [rsp+0x58+var_48]                ; CODE XREF=set_fields+643
000000000000522b         mov        rsi, 0xffffffffffffffff
0000000000005232         call       add_range_pair                              ; add_range_pair

                     loc_5237:
0000000000005237         cmp        byte [r14], 0x0                             ; CODE XREF=set_fields+680
000000000000523b         je         loc_52ba

                     loc_523d:
000000000000523d         xor        r15d, r15d                                  ; CODE XREF=set_fields+328
0000000000005240         xor        r13d, r13d
0000000000005243         xor        ebp, ebp
0000000000005245         xor        r12d, r12d
0000000000005248         xor        ebx, ebx

                     loc_524a:
000000000000524a         add        r14, 0x1                                    ; CODE XREF=set_fields+292, set_fields+698, set_fields+809

                     loc_524e:
000000000000524e         movzx      r8d, byte [r14]                             ; CODE XREF=set_fields+84
0000000000005252         cmp        r8b, 0x2d
0000000000005256         jne        loc_51d0

000000000000525c         test       bpl, bpl
000000000000525f         jne        loc_55ed

0000000000005265         test       r15, r15
0000000000005268         sete       r9b
000000000000526c         and        r9b, bl
000000000000526f         mov        r13d, r9d
0000000000005272         jne        loc_5596

0000000000005278         test       bl, bl
000000000000527a         jne        loc_5420

0000000000005280         mov        r13d, ebx
0000000000005283         xor        r15d, r15d
0000000000005286         mov        ebp, 0x1
000000000000528b         mov        qword [rsp+0x58+var_48], 0x1
0000000000005294         jmp        loc_524a
0000000000005296         align      32

                     loc_52a0:
00000000000052a0         test       r15, r15                                    ; CODE XREF=set_fields+138
00000000000052a3         je         loc_5596

00000000000052a9         mov        rsi, r15
00000000000052ac         mov        rdi, r15
00000000000052af         call       add_range_pair                              ; add_range_pair
00000000000052b4         cmp        byte [r14], 0x0
00000000000052b8         jne        loc_523d

                     loc_52ba:
00000000000052ba         mov        rsi, qword [n_frp]                          ; n_frp, CODE XREF=set_fields+203
00000000000052c1         test       rsi, rsi
00000000000052c4         je         loc_56ad

00000000000052ca         mov        rdi, qword [frp]                            ; argument "__base" for method j_qsort, frp
00000000000052d1         lea        rcx, qword [compare_ranges]                 ; argument "__compar" for method j_qsort, compare_ranges
00000000000052d8         mov        edx, 0x10                                   ; argument "__size" for method j_qsort
00000000000052dd         xor        r15d, r15d
00000000000052e0         xor        ebp, ebp
00000000000052e2         call       j_qsort                                     ; qsort
00000000000052e7         mov        rbx, qword [n_frp]                          ; n_frp
00000000000052ee         mov        rcx, qword [frp]                            ; frp
00000000000052f5         cmp        r15, rbx
00000000000052f8         jae        loc_538d

00000000000052fe         nop

                     loc_5300:
0000000000005300         add        r15, 0x1                                    ; CODE XREF=set_fields+535
0000000000005304         cmp        r15, rbx
0000000000005307         jae        loc_5380

0000000000005309         mov        r13, r15
000000000000530c         lea        rdx, qword [rcx+rbp]
0000000000005310         shl        r13, 0x4
0000000000005314         lea        rdi, qword [rcx+r13]
0000000000005318         mov        rax, qword [rdx+8]
000000000000531c         cmp        rax, qword [rdi]
000000000000531f         jb         loc_5380

0000000000005321         lea        r14, qword [rbp+0x20]
0000000000005325         jmp        loc_5341
0000000000005327         align      16

                     loc_5330:
0000000000005330         lea        rdi, qword [rcx+r13]                        ; CODE XREF=set_fields+526
0000000000005334         lea        rdx, qword [rcx+rbp]
0000000000005338         mov        rax, qword [rdx+8]
000000000000533c         cmp        qword [rdi], rax
000000000000533f         ja         loc_5380

                     loc_5341:
0000000000005341         cmp        qword [rdi+8], rax                          ; argument "__dest" for method j_memmove, CODE XREF=set_fields+437
0000000000005345         lea        rsi, qword [rcx+r14]                        ; argument "__src" for method j_memmove
0000000000005349         cmovae     rax, qword [rdi+8]
000000000000534e         sub        rbx, r15
0000000000005351         shl        rbx, 0x4
0000000000005355         mov        qword [rdx+8], rax
0000000000005359         lea        rdx, qword [rbx-0x10]                       ; argument "__n" for method j_memmove
000000000000535d         call       j_memmove                                   ; memmove
0000000000005362         mov        rax, qword [n_frp]                          ; n_frp
0000000000005369         mov        rcx, qword [frp]                            ; frp
0000000000005370         lea        rbx, qword [rax-1]
0000000000005374         cmp        rbx, r15
0000000000005377         mov        qword [n_frp], rbx                          ; n_frp
000000000000537e         ja         loc_5330

                     loc_5380:
0000000000005380         add        rbp, 0x10                                   ; CODE XREF=set_fields+407, set_fields+431, set_fields+463
0000000000005384         cmp        r15, rbx
0000000000005387         jb         loc_5300

                     loc_538d:
000000000000538d         test       byte [rsp+0x58+var_3C], 0x2                 ; CODE XREF=set_fields+392
0000000000005392         jne        loc_54bd

                     loc_5398:
0000000000005398         add        rbx, 0x1                                    ; CODE XREF=set_fields+1028
000000000000539c         mov        rdi, rcx
000000000000539f         mov        rsi, rbx
00000000000053a2         mov        qword [n_frp], rbx                          ; n_frp
00000000000053a9         shl        rsi, 0x4
00000000000053ad         call       xrealloc                                    ; xrealloc
00000000000053b2         mov        rdx, qword [n_frp]                          ; n_frp
00000000000053b9         mov        qword [frp], rax                            ; frp
00000000000053c0         shl        rdx, 0x4
00000000000053c4         lea        rax, qword [rax+rdx-0x10]
00000000000053c9         mov        rdx, 0xffffffffffffffff
00000000000053d0         mov        qword [rax+8], rdx
00000000000053d4         mov        qword [rax], rdx
00000000000053d7         add        rsp, 0x28
00000000000053db         pop        rbx
00000000000053dc         pop        rbp
00000000000053dd         pop        r12
00000000000053df         pop        r13
00000000000053e1         pop        r14
00000000000053e3         pop        r15
00000000000053e5         ret
                        ; endp
00000000000053e6         align      16

                     loc_53f0:
00000000000053f0         test       r12b, r12b                                  ; CODE XREF=set_fields+146
00000000000053f3         je         loc_5226

00000000000053f9         nop        dword [rax]

                     loc_5400:
0000000000005400         cmp        qword [rsp+0x58+var_48], r15                ; CODE XREF=set_fields+155
0000000000005405         ja         loc_55d8

000000000000540b         mov        rdi, qword [rsp+0x58+var_48]
0000000000005410         mov        rsi, r15
0000000000005413         call       add_range_pair                              ; add_range_pair
0000000000005418         jmp        loc_5237
000000000000541d         align      32

                     loc_5420:
0000000000005420         mov        qword [rsp+0x58+var_48], r15                ; CODE XREF=set_fields+266
0000000000005425         mov        ebp, ebx
0000000000005427         xor        r15d, r15d
000000000000542a         jmp        loc_524a
000000000000542f         align      16

                     loc_5430:
0000000000005430         movsx      eax, dl                                     ; CODE XREF=set_fields+129
0000000000005433         lea        edx, dword [rax-0x30]
0000000000005436         cmp        edx, 0x9
0000000000005439         ja         loc_56cc

000000000000543f         test       r13b, r13b
0000000000005442         je         loc_54a0

0000000000005444         cmp        qword [num_start.6877], 0x0                 ; num_start.6877
000000000000544c         je         loc_54a0

                     loc_544e:
000000000000544e         test       bpl, bpl                                    ; CODE XREF=set_fields+823
0000000000005451         mov        edx, 0x1
0000000000005456         movabs     rcx, 0x1999999999999999
0000000000005460         cmovne     r12d, ebp
0000000000005464         cmove      ebx, edx
0000000000005467         cmp        r15, rcx
000000000000546a         ja         loc_560d

0000000000005470         sub        eax, 0x30
0000000000005473         lea        rdx, qword [r15+r15*4]
0000000000005477         cdqe
0000000000005479         lea        rax, qword [rax+rdx*2]
000000000000547d         cmp        rax, r15
0000000000005480         jb         loc_560d

0000000000005486         cmp        rax, 0xffffffffffffffff
000000000000548a         je         loc_560d

0000000000005490         mov        r15, rax
0000000000005493         mov        r13d, 0x1
0000000000005499         jmp        loc_524a
000000000000549e         align      32

                     loc_54a0:
00000000000054a0         mov        qword [num_start.6877], r14                 ; num_start.6877, CODE XREF=set_fields+722, set_fields+732
00000000000054a7         jmp        loc_544e

                     loc_54a9:
00000000000054a9         add        r14, 0x1                                    ; CODE XREF=set_fields+56
00000000000054ad         mov        r15d, 0x1
00000000000054b3         mov        ebx, 0x1
00000000000054b8         jmp        loc_51b3

                     loc_54bd:
00000000000054bd         mov        rax, qword [rcx]                            ; CODE XREF=set_fields+546
00000000000054c0         mov        qword [frp], 0x0                            ; frp
00000000000054cb         mov        qword [n_frp], 0x0                          ; n_frp
00000000000054d6         mov        qword [n_frp_allocated], 0x0                ; n_frp_allocated
00000000000054e1         cmp        rax, 0x1
00000000000054e5         ja         loc_5579

                     loc_54eb:
00000000000054eb         cmp        rbx, 0x1                                    ; CODE XREF=set_fields+1057
00000000000054ef         jbe        loc_5535

00000000000054f1         mov        rax, rbx
00000000000054f4         lea        rbp, qword [rcx+8]
00000000000054f8         shl        rax, 0x4
00000000000054fc         lea        r12, qword [rcx+rax-8]
0000000000005501         nop        dword [rax]

                     loc_5508:
0000000000005508         mov        rax, qword [rbp]                            ; CODE XREF=set_fields+963
000000000000550c         lea        rdi, qword [rax+1]
0000000000005510         mov        rax, qword [rbp+8]
0000000000005514         cmp        rdi, rax
0000000000005517         je         loc_552c

0000000000005519         lea        rsi, qword [rax-1]
000000000000551d         mov        qword [rsp+0x58+var_50], rcx
0000000000005522         call       add_range_pair                              ; add_range_pair
0000000000005527         mov        rcx, qword [rsp+0x58+var_50]

                     loc_552c:
000000000000552c         add        rbp, 0x10                                   ; CODE XREF=set_fields+935
0000000000005530         cmp        r12, rbp
0000000000005533         jne        loc_5508

                     loc_5535:
0000000000005535         shl        rbx, 0x4                                    ; CODE XREF=set_fields+895
0000000000005539         mov        rax, qword [rcx+rbx-8]
000000000000553e         cmp        rax, 0xffffffffffffffff
0000000000005542         je         loc_555e

0000000000005544         lea        rdi, qword [rax+1]
0000000000005548         mov        rsi, 0xffffffffffffffff
000000000000554f         mov        qword [rsp+0x58+var_50], rcx
0000000000005554         call       add_range_pair                              ; add_range_pair
0000000000005559         mov        rcx, qword [rsp+0x58+var_50]

                     loc_555e:
000000000000555e         mov        rdi, rcx                                    ; argument "__ptr" for method j_free, CODE XREF=set_fields+978
0000000000005561         call       j_free                                      ; free
0000000000005566         mov        rbx, qword [n_frp]                          ; n_frp
000000000000556d         mov        rcx, qword [frp]                            ; frp
0000000000005574         jmp        loc_5398

                     loc_5579:
0000000000005579         lea        rsi, qword [rax-1]                          ; CODE XREF=set_fields+885
000000000000557d         mov        edi, 0x1
0000000000005582         mov        qword [rsp+0x58+var_50], rcx
0000000000005587         call       add_range_pair                              ; add_range_pair
000000000000558c         mov        rcx, qword [rsp+0x58+var_50]
0000000000005591         jmp        loc_54eb

                     loc_5596:
0000000000005596         test       byte [rsp+0x58+var_3C], 0x4                 ; CODE XREF=set_fields+258, set_fields+307
000000000000559b         mov        edx, 0x5
00000000000055a0         je         loc_55c8

00000000000055a2         lea        rsi, qword [aBytecharacterP]                ; argument "msgid" for method j_dcgettext, "byte/character positions are numbered from 1"
00000000000055a9         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000055ab         call       j_dcgettext                                 ; dcgettext

                     loc_55b0:
00000000000055b0         mov        rdx, rax                                    ; argument "__format" for method j_error, CODE XREF=set_fields+1126, set_fields+1147, set_fields+1179, set_fields+1320, set_fields+1367
00000000000055b3         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000055b5         xor        esi, esi                                    ; argument "__errnum" for method j_error
00000000000055b7         xor        eax, eax
00000000000055b9         call       j_error                                     ; error
00000000000055be         mov        edi, 0x1                                    ; argument #1 for method usage
00000000000055c3         call       usage                                       ; usage

                     loc_55c8:
00000000000055c8         lea        rsi, qword [aFieldsAreNumbe]                ; argument "msgid" for method j_dcgettext, "fields are numbered from 1", CODE XREF=set_fields+1072
00000000000055cf         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000055d1         call       j_dcgettext                                 ; dcgettext
00000000000055d6         jmp        loc_55b0

                     loc_55d8:
00000000000055d8         lea        rsi, qword [aInvalidDecreas]                ; "invalid decreasing range", CODE XREF=set_fields+661
00000000000055df         mov        edx, 0x5

                     loc_55e4:
00000000000055e4         xor        edi, edi                                    ; argument "domain" for method j_dcgettext, CODE XREF=set_fields+1301, set_fields+1443
00000000000055e6         call       j_dcgettext                                 ; dcgettext
00000000000055eb         jmp        loc_55b0

                     loc_55ed:
00000000000055ed         test       byte [rsp+0x58+var_3C], 0x4                 ; CODE XREF=set_fields+239
00000000000055f2         mov        edx, 0x5
00000000000055f7         je         loc_568a

00000000000055fd         lea        rsi, qword [aInvalidByteOrC]                ; argument "msgid" for method j_dcgettext, "invalid byte or character range"
0000000000005604         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005606         call       j_dcgettext                                 ; dcgettext
000000000000560b         jmp        loc_55b0

                     loc_560d:
000000000000560d         mov        rbx, qword [num_start.6877]                 ; num_start.6877, CODE XREF=set_fields+762, set_fields+784, set_fields+794
0000000000005614         lea        rsi, qword [a0123456789]                    ; argument "__accept" for method j_strspn, "0123456789"
000000000000561b         mov        rdi, rbx                                    ; argument "__s" for method j_strspn
000000000000561e         call       j_strspn                                    ; strspn
0000000000005623         mov        rdi, rbx
0000000000005626         mov        rsi, rax
0000000000005629         call       xstrndup                                    ; xstrndup
000000000000562e         mov        rdi, rax
0000000000005631         mov        rbx, rax
0000000000005634         call       quote                                       ; quote
0000000000005639         test       byte [rsp+0x58+var_3C], 0x4
000000000000563e         mov        rbp, rax
0000000000005641         mov        edx, 0x5
0000000000005646         je         loc_569d

0000000000005648         lea        rsi, qword [aBytecharacterO]                ; argument "msgid" for method j_dcgettext, "byte/character offset %s is too large"
000000000000564f         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005651         call       j_dcgettext                                 ; dcgettext

                     loc_5656:
0000000000005656         mov        rdx, rax                                    ; argument "__format" for method j_error, CODE XREF=set_fields+1339
0000000000005659         mov        rcx, rbp
000000000000565c         xor        esi, esi                                    ; argument "__errnum" for method j_error
000000000000565e         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000005660         xor        eax, eax
0000000000005662         call       j_error                                     ; error
0000000000005667         mov        rdi, rbx                                    ; argument "__ptr" for method j_free
000000000000566a         call       j_free                                      ; free
000000000000566f         mov        edi, 0x1                                    ; argument #1 for method usage
0000000000005674         call       usage                                       ; usage

                     loc_5679:
0000000000005679         mov        edx, 0x5                                    ; CODE XREF=set_fields+167
000000000000567e         lea        rsi, qword [aInvalidRangeWi]                ; "invalid range with no endpoint: -"
0000000000005685         jmp        loc_55e4

                     loc_568a:
000000000000568a         lea        rsi, qword [aInvalidFieldRa]                ; argument "msgid" for method j_dcgettext, "invalid field range", CODE XREF=set_fields+1159
0000000000005691         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005693         call       j_dcgettext                                 ; dcgettext
0000000000005698         jmp        loc_55b0

                     loc_569d:
000000000000569d         lea        rsi, qword [aFieldNumberSIs]                ; argument "msgid" for method j_dcgettext, "field number %s is too large", CODE XREF=set_fields+1238
00000000000056a4         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000056a6         call       j_dcgettext                                 ; dcgettext
00000000000056ab         jmp        loc_5656

                     loc_56ad:
00000000000056ad         test       byte [rsp+0x58+var_3C], 0x4                 ; CODE XREF=set_fields+340
00000000000056b2         mov        edx, 0x5
00000000000056b7         je         loc_570c

00000000000056b9         lea        rsi, qword [aMissingListOfB]                ; argument "msgid" for method j_dcgettext, "missing list of byte/character positions"
00000000000056c0         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000056c2         call       j_dcgettext                                 ; dcgettext
00000000000056c7         jmp        loc_55b0

                     loc_56cc:
00000000000056cc         mov        rdi, r14                                    ; CODE XREF=set_fields+713
00000000000056cf         call       quote                                       ; quote
00000000000056d4         test       byte [rsp+0x58+var_3C], 0x4
00000000000056d9         mov        rbx, rax
00000000000056dc         mov        edx, 0x5
00000000000056e1         je         loc_5718

00000000000056e3         lea        rsi, qword [aInvalidBytecha]                ; argument "msgid" for method j_dcgettext, "invalid byte/character position %s"
00000000000056ea         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000056ec         call       j_dcgettext                                 ; dcgettext

                     loc_56f1:
00000000000056f1         mov        rdx, rax                                    ; argument "__format" for method j_error, CODE XREF=set_fields+1462
00000000000056f4         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000056f6         mov        rcx, rbx
00000000000056f9         xor        esi, esi                                    ; argument "__errnum" for method j_error
00000000000056fb         xor        eax, eax
00000000000056fd         call       j_error                                     ; error
0000000000005702         mov        edi, 0x1                                    ; argument #1 for method usage
0000000000005707         call       usage                                       ; usage

                     loc_570c:
000000000000570c         lea        rsi, qword [aMissingListOfF]                ; "missing list of fields", CODE XREF=set_fields+1351
0000000000005713         jmp        loc_55e4

                     loc_5718:
0000000000005718         lea        rsi, qword [aInvalidFieldVa]                ; argument "msgid" for method j_dcgettext, "invalid field value %s", CODE XREF=set_fields+1393
000000000000571f         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005721         call       j_dcgettext                                 ; dcgettext
0000000000005726         jmp        loc_56f1
0000000000005728         align      16                                          ; End of unwind block (FDE at 0xc4fc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     reset_fields:
0000000000005730         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0xc548)
0000000000005734         mov        rdi, qword [frp]                            ; argument "__ptr" for method j_free, frp
000000000000573b         mov        qword [n_frp], 0x0                          ; n_frp
0000000000005746         mov        qword [n_frp_allocated], 0x0                ; n_frp_allocated
0000000000005751         call       j_free                                      ; free
0000000000005756         mov        qword [frp], 0x0                            ; frp
0000000000005761         add        rsp, 0x8
0000000000005765         ret
                        ; endp
0000000000005766         align      16                                          ; End of unwind block (FDE at 0xc548)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __argmatch_die:
0000000000005770         mov        edi, 0x1                                    ; Begin of unwind block (FDE at 0xc564), argument #1 for method usage, DATA XREF=argmatch_die
0000000000005775         jmp        usage                                       ; usage
                        ; endp
000000000000577a         align      128                                         ; End of unwind block (FDE at 0xc564)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_41: int8_t, -65
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88


                     argmatch:
0000000000005780         push       r15                                         ; Begin of unwind block (FDE at 0xc578), CODE XREF=__xargmatch_internal+44
0000000000005782         push       r14
0000000000005784         mov        r15, rsi
0000000000005787         push       r13
0000000000005789         push       r12
000000000000578b         mov        r13, rcx
000000000000578e         push       rbp
000000000000578f         push       rbx
0000000000005790         mov        rbp, rdx
0000000000005793         sub        rsp, 0x28
0000000000005797         mov        qword [rsp+0x58+var_50], rdi
000000000000579c         mov        qword [rsp+0x58+var_40], rdx
00000000000057a1         call       j_strlen                                    ; strlen
00000000000057a6         mov        r14, qword [r15]
00000000000057a9         mov        qword [rsp+0x58+var_58], 0xffffffffffffffff
00000000000057b1         test       r14, r14
00000000000057b4         je         loc_586d

00000000000057ba         mov        r12, rax
00000000000057bd         mov        byte [rsp+0x58+var_41], 0x0
00000000000057c2         xor        ebx, ebx
00000000000057c4         jmp        loc_5817
00000000000057c6         align      16

                     loc_57d0:
00000000000057d0         mov        rax, qword [rsp+0x58+var_40]                ; CODE XREF=argmatch+189
00000000000057d5         test       rax, rax
00000000000057d8         je         loc_5880

00000000000057de         mov        rdi, qword [rsp+0x58+var_58]
00000000000057e2         mov        rdx, r13                                    ; argument "__n" for method j_memcmp
00000000000057e5         mov        rsi, rbp                                    ; argument "__s2" for method j_memcmp
00000000000057e8         imul       rdi, r13
00000000000057ec         add        rdi, rax                                    ; argument "__s1" for method j_memcmp
00000000000057ef         call       j_memcmp                                    ; memcmp
00000000000057f4         test       eax, eax
00000000000057f6         movzx      eax, byte [rsp+0x58+var_41]
00000000000057fb         mov        ecx, 0x1
0000000000005800         cmovne     eax, ecx
0000000000005803         mov        byte [rsp+0x58+var_41], al

                     loc_5807:
0000000000005807         add        rbx, 0x1                                    ; CODE XREF=argmatch+169, argmatch+261
000000000000580b         add        rbp, r13
000000000000580e         mov        r14, qword [r15+rbx*8]
0000000000005812         test       r14, r14
0000000000005815         je         loc_5858

                     loc_5817:
0000000000005817         mov        rsi, qword [rsp+0x58+var_50]                ; argument "__s2" for method j_strncmp, CODE XREF=argmatch+68, argmatch+209
000000000000581c         mov        rdx, r12                                    ; argument "__n" for method j_strncmp
000000000000581f         mov        rdi, r14                                    ; argument "__s1" for method j_strncmp
0000000000005822         call       j_strncmp                                   ; strncmp
0000000000005827         test       eax, eax
0000000000005829         jne        loc_5807

000000000000582b         mov        rdi, r14                                    ; argument "__s" for method j_strlen
000000000000582e         call       j_strlen                                    ; strlen
0000000000005833         cmp        rax, r12
0000000000005836         je         loc_5890

0000000000005838         cmp        qword [rsp+0x58+var_58], 0xffffffffffffffff
000000000000583d         jne        loc_57d0

000000000000583f         mov        qword [rsp+0x58+var_58], rbx
0000000000005843         add        rbx, 0x1
0000000000005847         add        rbp, r13
000000000000584a         mov        r14, qword [r15+rbx*8]
000000000000584e         test       r14, r14
0000000000005851         jne        loc_5817

0000000000005853         nop        dword [rax+rax]

                     loc_5858:
0000000000005858         cmp        byte [rsp+0x58+var_41], 0x0                 ; CODE XREF=argmatch+149
000000000000585d         mov        rax, 0xfffffffffffffffe
0000000000005864         cmove      rax, qword [rsp+0x58+var_58]
0000000000005869         mov        qword [rsp+0x58+var_58], rax

                     loc_586d:
000000000000586d         mov        rax, qword [rsp+0x58+var_58]                ; CODE XREF=argmatch+52, argmatch+276
0000000000005871         add        rsp, 0x28
0000000000005875         pop        rbx
0000000000005876         pop        rbp
0000000000005877         pop        r12
0000000000005879         pop        r13
000000000000587b         pop        r14
000000000000587d         pop        r15
000000000000587f         ret
                        ; endp

                     loc_5880:
0000000000005880         mov        byte [rsp+0x58+var_41], 0x1                 ; CODE XREF=argmatch+88
0000000000005885         jmp        loc_5807
0000000000005887         align      16

                     loc_5890:
0000000000005890         mov        qword [rsp+0x58+var_58], rbx                ; CODE XREF=argmatch+182
0000000000005894         jmp        loc_586d
0000000000005896         align      32                                          ; End of unwind block (FDE at 0xc578)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     argmatch_invalid:
00000000000058a0         cmp        rdx, 0xffffffffffffffff                     ; Begin of unwind block (FDE at 0xc5c4), CODE XREF=__xargmatch_internal+78
00000000000058a4         push       r12
00000000000058a6         mov        edx, 0x5
00000000000058ab         push       rbp
00000000000058ac         mov        r12, rsi
00000000000058af         push       rbx
00000000000058b0         mov        rbp, rdi
00000000000058b3         je         loc_5900

00000000000058b5         lea        rsi, qword [aAmbiguousArgum]                ; argument "msgid" for method j_dcgettext, "ambiguous argument %s for %s"
00000000000058bc         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000058be         call       j_dcgettext                                 ; dcgettext
00000000000058c3         mov        rbx, rax

                     loc_58c6:
00000000000058c6         mov        rsi, rbp                                    ; CODE XREF=argmatch_invalid+113
00000000000058c9         mov        edi, 0x1
00000000000058ce         call       quote_n                                     ; quote_n
00000000000058d3         mov        rdx, r12
00000000000058d6         mov        rbp, rax
00000000000058d9         mov        esi, 0x8
00000000000058de         xor        edi, edi
00000000000058e0         call       quotearg_n_style                            ; quotearg_n_style
00000000000058e5         mov        r8, rbp
00000000000058e8         mov        rdx, rbx                                    ; argument "__format" for method j_error
00000000000058eb         mov        rcx, rax
00000000000058ee         pop        rbx
00000000000058ef         pop        rbp
00000000000058f0         pop        r12
00000000000058f2         xor        esi, esi                                    ; argument "__errnum" for method j_error
00000000000058f4         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000058f6         xor        eax, eax
00000000000058f8         jmp        j_error                                     ; error
                        ; endp
00000000000058fd         align      256

                     loc_5900:
0000000000005900         lea        rsi, qword [aInvalidArgumen]                ; argument "msgid" for method j_dcgettext, "invalid argument %s for %s", CODE XREF=argmatch_invalid+19
0000000000005907         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005909         call       j_dcgettext                                 ; dcgettext
000000000000590e         mov        rbx, rax
0000000000005911         jmp        loc_58c6
0000000000005913         align      32                                          ; End of unwind block (FDE at 0xc5c4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     argmatch_valid:
0000000000005920         push       r15                                         ; Begin of unwind block (FDE at 0xc5f0), CODE XREF=__xargmatch_internal+92
0000000000005922         push       r14
0000000000005924         mov        r14, rdi
0000000000005927         push       r13
0000000000005929         push       r12
000000000000592b         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000592d         push       rbp
000000000000592e         push       rbx
000000000000592f         mov        rbp, rsi
0000000000005932         lea        rsi, qword [aValidArguments]                ; argument "msgid" for method j_dcgettext, "Valid arguments are:"
0000000000005939         mov        r12, rdx
000000000000593c         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005941         sub        rsp, 0x8
0000000000005945         mov        rbx, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
000000000000594c         call       j_dcgettext                                 ; dcgettext
0000000000005951         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000005954         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000005957         call       j_fputs_unlocked                            ; fputs_unlocked
000000000000595c         mov        r15, qword [r14]
000000000000595f         test       r15, r15
0000000000005962         je         loc_59f8

0000000000005968         xor        r13d, r13d
000000000000596b         xor        ebx, ebx
000000000000596d         jmp        loc_59a8
000000000000596f         align      16

                     loc_5970:
0000000000005970         mov        rdi, r15                                    ; CODE XREF=argmatch_valid+139, argmatch_valid+157
0000000000005973         add        rbx, 0x1
0000000000005977         mov        r13, rbp
000000000000597a         call       quote                                       ; quote
000000000000597f         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
0000000000005986         lea        rdx, qword [aNS]                            ; "\\n  - %s"
000000000000598d         mov        rcx, rax
0000000000005990         mov        esi, 0x1
0000000000005995         xor        eax, eax
0000000000005997         add        rbp, r12
000000000000599a         call       j___fprintf_chk                             ; __fprintf_chk
000000000000599f         mov        r15, qword [r14+rbx*8]
00000000000059a3         test       r15, r15
00000000000059a6         je         loc_59f8

                     loc_59a8:
00000000000059a8         test       rbx, rbx                                    ; CODE XREF=argmatch_valid+77, argmatch_valid+210
00000000000059ab         je         loc_5970

00000000000059ad         mov        rdx, r12                                    ; argument "__n" for method j_memcmp
00000000000059b0         mov        rsi, rbp                                    ; argument "__s2" for method j_memcmp
00000000000059b3         mov        rdi, r13                                    ; argument "__s1" for method j_memcmp
00000000000059b6         call       j_memcmp                                    ; memcmp
00000000000059bb         test       eax, eax
00000000000059bd         jne        loc_5970

00000000000059bf         mov        rdi, r15
00000000000059c2         add        rbx, 0x1
00000000000059c6         add        rbp, r12
00000000000059c9         call       quote                                       ; quote
00000000000059ce         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
00000000000059d5         lea        rdx, qword [aNS+8]                          ; 0xb3fb
00000000000059dc         mov        rcx, rax
00000000000059df         mov        esi, 0x1
00000000000059e4         xor        eax, eax
00000000000059e6         call       j___fprintf_chk                             ; __fprintf_chk
00000000000059eb         mov        r15, qword [r14+rbx*8]
00000000000059ef         test       r15, r15
00000000000059f2         jne        loc_59a8

00000000000059f4         nop        dword [rax]

                     loc_59f8:
00000000000059f8         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5, CODE XREF=argmatch_valid+66, argmatch_valid+134
00000000000059ff         mov        rax, qword [rdi+0x28]
0000000000005a03         cmp        rax, qword [rdi+0x30]
0000000000005a07         jae        loc_5a28

0000000000005a09         lea        rdx, qword [rax+1]
0000000000005a0d         mov        qword [rdi+0x28], rdx
0000000000005a11         mov        byte [rax], 0xa
0000000000005a14         add        rsp, 0x8
0000000000005a18         pop        rbx
0000000000005a19         pop        rbp
0000000000005a1a         pop        r12
0000000000005a1c         pop        r13
0000000000005a1e         pop        r14
0000000000005a20         pop        r15
0000000000005a22         ret
                        ; endp
0000000000005a23         align      8

                     loc_5a28:
0000000000005a28         add        rsp, 0x8                                    ; CODE XREF=argmatch_valid+231
0000000000005a2c         mov        esi, 0xa                                    ; argument #2 for method j___overflow
0000000000005a31         pop        rbx
0000000000005a32         pop        rbp
0000000000005a33         pop        r12
0000000000005a35         pop        r13
0000000000005a37         pop        r14
0000000000005a39         pop        r15
0000000000005a3b         jmp        j___overflow                                ; __overflow
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __xargmatch_internal:
0000000000005a40         push       r15                                         ; End of unwind block (FDE at 0xc5f0), Begin of unwind block (FDE at 0xc650), CODE XREF=main+492, main+694, main+881, main+1049
0000000000005a42         push       r14
0000000000005a44         mov        r14, rdi
0000000000005a47         push       r13
0000000000005a49         push       r12
0000000000005a4b         mov        r12, rsi
0000000000005a4e         push       rbp
0000000000005a4f         push       rbx
0000000000005a50         mov        rbp, rcx
0000000000005a53         mov        rbx, rdx
0000000000005a56         mov        rcx, r8
0000000000005a59         mov        rdx, rbp
0000000000005a5c         sub        rsp, 0x8
0000000000005a60         mov        rsi, rbx
0000000000005a63         mov        rdi, r12
0000000000005a66         mov        r15, r8
0000000000005a69         mov        r13, r9
0000000000005a6c         call       argmatch                                    ; argmatch
0000000000005a71         test       rax, rax
0000000000005a74         js         loc_5a85

                     loc_5a76:
0000000000005a76         add        rsp, 0x8                                    ; CODE XREF=__xargmatch_internal+107
0000000000005a7a         pop        rbx
0000000000005a7b         pop        rbp
0000000000005a7c         pop        r12
0000000000005a7e         pop        r13
0000000000005a80         pop        r14
0000000000005a82         pop        r15
0000000000005a84         ret
                        ; endp

                     loc_5a85:
0000000000005a85         mov        rdx, rax                                    ; CODE XREF=__xargmatch_internal+52
0000000000005a88         mov        rsi, r12
0000000000005a8b         mov        rdi, r14
0000000000005a8e         call       argmatch_invalid                            ; argmatch_invalid
0000000000005a93         mov        rdx, r15
0000000000005a96         mov        rsi, rbp
0000000000005a99         mov        rdi, rbx
0000000000005a9c         call       argmatch_valid                              ; argmatch_valid
0000000000005aa1         call       r13
0000000000005aa4         mov        rax, 0xffffffffffffffff
0000000000005aab         jmp        loc_5a76
0000000000005aad         align      16                                          ; End of unwind block (FDE at 0xc650)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     argmatch_to_argument:
0000000000005ab0         push       r14                                         ; Begin of unwind block (FDE at 0xc69c)
0000000000005ab2         push       r13
0000000000005ab4         push       r12
0000000000005ab6         push       rbp
0000000000005ab7         push       rbx
0000000000005ab8         mov        r14, qword [rsi]
0000000000005abb         test       r14, r14
0000000000005abe         je         loc_5af1

0000000000005ac0         mov        r12, rcx
0000000000005ac3         mov        r13, rdi
0000000000005ac6         mov        rbp, rdx
0000000000005ac9         lea        rbx, qword [rsi+8]
0000000000005acd         jmp        loc_5adf
0000000000005acf         align      16

                     loc_5ad0:
0000000000005ad0         mov        r14, qword [rbx]                            ; CODE XREF=argmatch_to_argument+63
0000000000005ad3         add        rbp, r12
0000000000005ad6         add        rbx, 0x8
0000000000005ada         test       r14, r14
0000000000005add         je         loc_5af1

                     loc_5adf:
0000000000005adf         mov        rdx, r12                                    ; argument "__n" for method j_memcmp, CODE XREF=argmatch_to_argument+29
0000000000005ae2         mov        rsi, rbp                                    ; argument "__s2" for method j_memcmp
0000000000005ae5         mov        rdi, r13                                    ; argument "__s1" for method j_memcmp
0000000000005ae8         call       j_memcmp                                    ; memcmp
0000000000005aed         test       eax, eax
0000000000005aef         jne        loc_5ad0

                     loc_5af1:
0000000000005af1         pop        rbx                                         ; CODE XREF=argmatch_to_argument+14, argmatch_to_argument+45
0000000000005af2         mov        rax, r14
0000000000005af5         pop        rbp
0000000000005af6         pop        r12
0000000000005af8         pop        r13
0000000000005afa         pop        r14
0000000000005afc         ret
                        ; endp
0000000000005afd         align      256                                         ; End of unwind block (FDE at 0xc69c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout_set_file_name:
0000000000005b00         mov        qword [file_name], rdi                      ; Begin of unwind block (FDE at 0xc6dc), file_name
0000000000005b07         ret
                        ; endp
0000000000005b08         align      16                                          ; End of unwind block (FDE at 0xc6dc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout_set_ignore_EPIPE:
0000000000005b10         mov        byte [ignore_EPIPE], dil                    ; Begin of unwind block (FDE at 0xc6f0), ignore_EPIPE
0000000000005b17         ret
                        ; endp
0000000000005b18         align      32                                          ; End of unwind block (FDE at 0xc6f0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout:
0000000000005b20         push       rbp                                         ; Begin of unwind block (FDE at 0xc704), DATA XREF=main+148
0000000000005b21         push       rbx
0000000000005b22         sub        rsp, 0x8
0000000000005b26         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000005b2d         call       close_stream                                ; close_stream
0000000000005b32         test       eax, eax
0000000000005b34         je         loc_5b4c

0000000000005b36         call       j___errno_location                          ; __errno_location
0000000000005b3b         cmp        byte [ignore_EPIPE], 0x0                    ; ignore_EPIPE
0000000000005b42         mov        rbx, rax
0000000000005b45         je         loc_5b63

0000000000005b47         cmp        dword [rax], 0x20
0000000000005b4a         jne        loc_5b63

                     loc_5b4c:
0000000000005b4c         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5, CODE XREF=close_stdout+20
0000000000005b53         call       close_stream                                ; close_stream
0000000000005b58         test       eax, eax
0000000000005b5a         jne        loc_5ba2

0000000000005b5c         add        rsp, 0x8
0000000000005b60         pop        rbx
0000000000005b61         pop        rbp
0000000000005b62         ret
                        ; endp

                     loc_5b63:
0000000000005b63         lea        rsi, qword [aWriteError]                    ; argument "msgid" for method j_dcgettext, "write error", CODE XREF=close_stdout+37, close_stdout+42
0000000000005b6a         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005b6c         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005b71         call       j_dcgettext                                 ; dcgettext
0000000000005b76         mov        rdi, qword [file_name]                      ; file_name
0000000000005b7d         mov        rbp, rax
0000000000005b80         test       rdi, rdi
0000000000005b83         je         loc_5bad

0000000000005b85         call       quotearg_colon                              ; quotearg_colon
0000000000005b8a         mov        esi, dword [rbx]                            ; argument "__errnum" for method j_error
0000000000005b8c         lea        rdx, qword [aSS]                            ; argument "__format" for method j_error, "%s: %s"
0000000000005b93         mov        rcx, rax
0000000000005b96         mov        r8, rbp
0000000000005b99         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000005b9b         xor        eax, eax
0000000000005b9d         call       j_error                                     ; error

                     loc_5ba2:
0000000000005ba2         mov        edi, dword [exit_failure]                   ; argument "__status" for method j__exit, exit_failure, CODE XREF=close_stdout+58, close_stdout+162
0000000000005ba8         call       j__exit                                     ; _exit
                        ; endp

                     loc_5bad:
0000000000005bad         mov        esi, dword [rbx]                            ; argument "__errnum" for method j_error, CODE XREF=close_stdout+99
0000000000005baf         lea        rdx, qword [aNS+10]                         ; argument "__format" for method j_error, 0xb3fd
0000000000005bb6         mov        rcx, rax
0000000000005bb9         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000005bbb         xor        eax, eax
0000000000005bbd         call       j_error                                     ; error
0000000000005bc2         jmp        loc_5ba2
0000000000005bc4         align      16                                          ; End of unwind block (FDE at 0xc704)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_4C: int32_t, -76
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104


                     mbsalign:
0000000000005bd0         push       r15                                         ; Begin of unwind block (FDE at 0xc734), CODE XREF=process_field+5350, ambsalign+89
0000000000005bd2         push       r14
0000000000005bd4         mov        r14, rdi
0000000000005bd7         push       r13
0000000000005bd9         push       r12
0000000000005bdb         mov        r13, rsi
0000000000005bde         push       rbp
0000000000005bdf         push       rbx
0000000000005be0         mov        ebx, r9d
0000000000005be3         mov        r12, rcx
0000000000005be6         sub        rsp, 0x38
0000000000005bea         mov        qword [rsp+0x68+var_58], rdx
0000000000005bef         mov        dword [rsp+0x68+var_4C], r8d
0000000000005bf4         call       j_strlen                                    ; strlen
0000000000005bf9         test       bl, 0x2
0000000000005bfc         mov        r15, rax
0000000000005bff         mov        qword [rsp+0x68+var_60], rax
0000000000005c04         je         loc_5d70

                     loc_5c0a:
0000000000005c0a         mov        rbp, r15                                    ; CODE XREF=mbsalign+425, mbsalign+452
0000000000005c0d         mov        qword [rsp+0x68+var_68], 0x0
0000000000005c15         mov        qword [rsp+0x68+var_60], 0x0

                     loc_5c1e:
0000000000005c1e         mov        rax, qword [r12]                            ; CODE XREF=mbsalign+815, mbsalign+832, mbsalign+899, mbsalign+932
0000000000005c22         cmp        rax, rbp
0000000000005c25         jae        loc_5d39

0000000000005c2b         mov        r15, rax
0000000000005c2e         xor        edx, edx

                     loc_5c30:
0000000000005c30         mov        qword [r12], rax                            ; CODE XREF=mbsalign+959
0000000000005c34         mov        eax, dword [rsp+0x68+var_4C]
0000000000005c38         test       eax, eax
0000000000005c3a         je         loc_5d5b

                     loc_5c40:
0000000000005c40         xor        ebp, ebp                                    ; CODE XREF=mbsalign+389
0000000000005c42         cmp        eax, 0x1
0000000000005c45         je         loc_5c53

0000000000005c47         mov        rbp, rdx
0000000000005c4a         and        edx, 0x1
0000000000005c4d         shr        rbp, 0x1
0000000000005c50         add        rdx, rbp

                     loc_5c53:
0000000000005c53         test       bl, 0x4                                     ; CODE XREF=mbsalign+117, mbsalign+400
0000000000005c56         lea        r12, qword [rdx+r15]
0000000000005c5a         je         loc_5c61

0000000000005c5c         mov        r12, r15
0000000000005c5f         xor        edx, edx

                     loc_5c61:
0000000000005c61         and        ebx, 0x8                                    ; CODE XREF=mbsalign+138
0000000000005c64         jne        loc_5d68

0000000000005c6a         add        r12, rbp

                     loc_5c6d:
0000000000005c6d         mov        rax, qword [rsp+0x68+var_58]                ; CODE XREF=mbsalign+410
0000000000005c72         test       rax, rax
0000000000005c75         je         loc_5d01

0000000000005c7b         lea        rbx, qword [r13+rax-1]
0000000000005c80         lea        rax, qword [rdx-1]
0000000000005c84         cmp        r13, rbx
0000000000005c87         jae        loc_5caf

0000000000005c89         test       rdx, rdx
0000000000005c8c         je         loc_5caf

0000000000005c8e         nop

                     loc_5c90:
0000000000005c90         add        r13, 0x1                                    ; CODE XREF=mbsalign+221
0000000000005c94         mov        byte [r13-1], 0x20
0000000000005c99         cmp        rbx, r13
0000000000005c9c         seta       sil
0000000000005ca0         test       rax, rax
0000000000005ca3         setne      dl
0000000000005ca6         sub        rax, 0x1
0000000000005caa         test       sil, dl
0000000000005cad         jne        loc_5c90

                     loc_5caf:
0000000000005caf         mov        rdx, rbx                                    ; CODE XREF=mbsalign+183, mbsalign+188
0000000000005cb2         mov        byte [r13], 0x0
0000000000005cb7         mov        rsi, r14                                    ; argument "__src" for method j_mempcpy
0000000000005cba         sub        rdx, r13
0000000000005cbd         mov        rdi, r13                                    ; argument "__dest" for method j_mempcpy
0000000000005cc0         cmp        rdx, r15
0000000000005cc3         cmova      rdx, r15                                    ; argument "__n" for method j_mempcpy
0000000000005cc7         call       j_mempcpy                                   ; mempcpy
0000000000005ccc         cmp        rbx, rax
0000000000005ccf         lea        rdx, qword [rbp-1]
0000000000005cd3         jbe        loc_5cfe

0000000000005cd5         test       rbp, rbp
0000000000005cd8         je         loc_5cfe

0000000000005cda         nop        word [rax+rax]

                     loc_5ce0:
0000000000005ce0         add        rax, 0x1                                    ; CODE XREF=mbsalign+300
0000000000005ce4         test       rdx, rdx
0000000000005ce7         mov        byte [rax-1], 0x20
0000000000005ceb         setne      sil
0000000000005cef         cmp        rbx, rax
0000000000005cf2         seta       cl
0000000000005cf5         sub        rdx, 0x1
0000000000005cf9         test       sil, cl
0000000000005cfc         jne        loc_5ce0

                     loc_5cfe:
0000000000005cfe         mov        byte [rax], 0x0                             ; CODE XREF=mbsalign+259, mbsalign+264

                     loc_5d01:
0000000000005d01         mov        rdi, qword [rsp+0x68+var_68]                ; argument "__ptr" for method j_free, CODE XREF=mbsalign+165, mbsalign+482, mbsalign+912
0000000000005d05         call       j_free                                      ; free
0000000000005d0a         mov        rdi, qword [rsp+0x68+var_60]                ; argument "__ptr" for method j_free
0000000000005d0f         call       j_free                                      ; free
0000000000005d14         add        rsp, 0x38
0000000000005d18         mov        rax, r12
0000000000005d1b         pop        rbx
0000000000005d1c         pop        rbp
0000000000005d1d         pop        r12
0000000000005d1f         pop        r13
0000000000005d21         pop        r14
0000000000005d23         pop        r15
0000000000005d25         ret
                        ; endp
0000000000005d26         align      16

                     loc_5d30:
0000000000005d30         mov        qword [rsp+0x68+var_60], 0x0                ; CODE XREF=mbsalign+863

                     loc_5d39:
0000000000005d39         cmp        rbp, rax                                    ; CODE XREF=mbsalign+85
0000000000005d3c         jae        loc_5f8a

0000000000005d42         sub        rax, rbp
0000000000005d45         mov        rdx, rax
0000000000005d48         mov        rax, rbp
0000000000005d4b         mov        qword [r12], rax
0000000000005d4f         mov        eax, dword [rsp+0x68+var_4C]
0000000000005d53         test       eax, eax
0000000000005d55         jne        loc_5c40

                     loc_5d5b:
0000000000005d5b         mov        rbp, rdx                                    ; CODE XREF=mbsalign+106
0000000000005d5e         xor        edx, edx
0000000000005d60         jmp        loc_5c53
0000000000005d65         align      8

                     loc_5d68:
0000000000005d68         xor        ebp, ebp                                    ; CODE XREF=mbsalign+148
0000000000005d6a         jmp        loc_5c6d
0000000000005d6f         align      16

                     loc_5d70:
0000000000005d70         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max, CODE XREF=mbsalign+52
0000000000005d75         cmp        rax, 0x1
0000000000005d79         jbe        loc_5c0a

0000000000005d7f         xor        edx, edx                                    ; argument "__n" for method j_mbstowcs
0000000000005d81         xor        edi, edi                                    ; argument "__pwcs" for method j_mbstowcs
0000000000005d83         mov        rsi, r14                                    ; argument "__s" for method j_mbstowcs
0000000000005d86         call       j_mbstowcs                                  ; mbstowcs
0000000000005d8b         cmp        rax, 0xffffffffffffffff
0000000000005d8f         jne        loc_5dc0

0000000000005d91         test       bl, 0x1
0000000000005d94         jne        loc_5c0a

                     loc_5d9a:
0000000000005d9a         mov        qword [rsp+0x68+var_68], 0x0                ; CODE XREF=mbsalign+938
0000000000005da2         mov        qword [rsp+0x68+var_60], 0x0
0000000000005dab         mov        r12, 0xffffffffffffffff
0000000000005db2         jmp        loc_5d01
0000000000005db7         align      64

                     loc_5dc0:
0000000000005dc0         lea        rbp, qword [rax+1]                          ; CODE XREF=mbsalign+447
0000000000005dc4         lea        rax, qword [rbp*4]
0000000000005dcc         mov        rdi, rax                                    ; argument "__size" for method j_malloc
0000000000005dcf         mov        qword [rsp+0x68+var_48], rax
0000000000005dd4         call       j_malloc                                    ; malloc
0000000000005dd9         test       rax, rax
0000000000005ddc         mov        qword [rsp+0x68+var_68], rax
0000000000005de0         je         loc_5f65

0000000000005de6         mov        rdi, qword [rsp+0x68+var_68]                ; argument "__pwcs" for method j_mbstowcs
0000000000005dea         mov        rdx, rbp                                    ; argument "__n" for method j_mbstowcs
0000000000005ded         mov        rsi, r14                                    ; argument "__s" for method j_mbstowcs
0000000000005df0         call       j_mbstowcs                                  ; mbstowcs
0000000000005df5         test       rax, rax
0000000000005df8         je         loc_5f04

0000000000005dfe         mov        rax, qword [rsp+0x68+var_68]
0000000000005e02         mov        rcx, qword [rsp+0x68+var_48]
0000000000005e07         mov        dword [rax+rcx-4], 0x0
0000000000005e0f         mov        edi, dword [rax]
0000000000005e11         mov        rdx, rax
0000000000005e14         test       edi, edi
0000000000005e16         je         loc_5f15

0000000000005e1c         mov        byte [rsp+0x68+var_48], 0x0
0000000000005e21         nop        dword [rax]

                     loc_5e28:
0000000000005e28         mov        qword [rsp+0x68+var_40], rdx                ; CODE XREF=mbsalign+638
0000000000005e2d         call       j_iswprint                                  ; iswprint
0000000000005e32         test       eax, eax
0000000000005e34         mov        rdx, qword [rsp+0x68+var_40]
0000000000005e39         jne        loc_5e46

0000000000005e3b         mov        dword [rdx], 0xfffd
0000000000005e41         mov        byte [rsp+0x68+var_48], 0x1

                     loc_5e46:
0000000000005e46         add        rdx, 0x4                                    ; CODE XREF=mbsalign+617
0000000000005e4a         mov        edi, dword [rdx]
0000000000005e4c         test       edi, edi
0000000000005e4e         jne        loc_5e28

0000000000005e50         mov        rdi, qword [rsp+0x68+var_68]                ; argument "__s" for method j_wcswidth
0000000000005e54         mov        rsi, rbp                                    ; argument "__n" for method j_wcswidth
0000000000005e57         call       j_wcswidth                                  ; wcswidth
0000000000005e5c         cmp        byte [rsp+0x68+var_48], 0x0
0000000000005e61         movsxd     rbp, eax
0000000000005e64         je         loc_5f28

0000000000005e6a         mov        rsi, qword [rsp+0x68+var_68]                ; argument "__pwcs" for method j_wcstombs
0000000000005e6e         xor        edx, edx                                    ; argument "__n" for method j_wcstombs
0000000000005e70         xor        edi, edi                                    ; argument "__s" for method j_wcstombs
0000000000005e72         call       j_wcstombs                                  ; wcstombs
0000000000005e77         add        rax, 0x1
0000000000005e7b         mov        qword [rsp+0x68+var_48], rax

                     loc_5e80:
0000000000005e80         mov        rdi, qword [rsp+0x68+var_48]                ; argument "__size" for method j_malloc, CODE XREF=mbsalign+883
0000000000005e85         call       j_malloc                                    ; malloc
0000000000005e8a         test       rax, rax
0000000000005e8d         mov        qword [rsp+0x68+var_60], rax
0000000000005e92         je         loc_5f50

0000000000005e98         mov        r15, qword [rsp+0x68+var_68]
0000000000005e9c         mov        r14, qword [r12]
0000000000005ea0         mov        edi, dword [r15]
0000000000005ea3         test       edi, edi
0000000000005ea5         je         loc_5f7f

0000000000005eab         xor        ebp, ebp
0000000000005ead         jmp        loc_5ebe
0000000000005eaf         align      16

                     loc_5eb0:
0000000000005eb0         add        r15, 0x4                                    ; CODE XREF=mbsalign+781
0000000000005eb4         mov        edi, dword [r15]
0000000000005eb7         mov        rbp, rdx
0000000000005eba         test       edi, edi
0000000000005ebc         je         loc_5edf

                     loc_5ebe:
0000000000005ebe         call       j_wcwidth                                   ; wcwidth, CODE XREF=mbsalign+733
0000000000005ec3         cmp        eax, 0xffffffff
0000000000005ec6         movsxd     rdx, eax
0000000000005ec9         jne        loc_5ed7

0000000000005ecb         mov        dword [r15], 0xfffd
0000000000005ed2         mov        edx, 0x1

                     loc_5ed7:
0000000000005ed7         add        rdx, rbp                                    ; CODE XREF=mbsalign+761
0000000000005eda         cmp        r14, rdx
0000000000005edd         jae        loc_5eb0

                     loc_5edf:
0000000000005edf         mov        r14, qword [rsp+0x68+var_60]                ; CODE XREF=mbsalign+748, mbsalign+949
0000000000005ee4         mov        rdx, qword [rsp+0x68+var_48]                ; argument "__n" for method j_wcstombs
0000000000005ee9         mov        rsi, qword [rsp+0x68+var_68]                ; argument "__pwcs" for method j_wcstombs
0000000000005eed         mov        dword [r15], 0x0
0000000000005ef4         mov        rdi, r14                                    ; argument "__s" for method j_wcstombs
0000000000005ef7         call       j_wcstombs                                  ; wcstombs
0000000000005efc         mov        r15, rax
0000000000005eff         jmp        loc_5c1e

                     loc_5f04:
0000000000005f04         mov        rbp, r15                                    ; CODE XREF=mbsalign+552
0000000000005f07         mov        qword [rsp+0x68+var_60], 0x0
0000000000005f10         jmp        loc_5c1e

                     loc_5f15:
0000000000005f15         mov        rdi, qword [rsp+0x68+var_68]                ; argument "__s" for method j_wcswidth, CODE XREF=mbsalign+582
0000000000005f19         mov        rsi, rbp                                    ; argument "__n" for method j_wcswidth
0000000000005f1c         call       j_wcswidth                                  ; wcswidth
0000000000005f21         movsxd     rbp, eax
0000000000005f24         nop        dword [rax]

                     loc_5f28:
0000000000005f28         mov        rax, qword [r12]                            ; CODE XREF=mbsalign+660
0000000000005f2c         cmp        rax, rbp
0000000000005f2f         jae        loc_5d30

0000000000005f35         mov        rax, qword [rsp+0x68+var_60]
0000000000005f3a         add        rax, 0x1
0000000000005f3e         mov        qword [rsp+0x68+var_48], rax
0000000000005f43         jmp        loc_5e80
0000000000005f48         align      16

                     loc_5f50:
0000000000005f50         test       bl, 0x1                                     ; CODE XREF=mbsalign+706
0000000000005f53         jne        loc_5c1e

0000000000005f59         mov        r12, 0xffffffffffffffff
0000000000005f60         jmp        loc_5d01

                     loc_5f65:
0000000000005f65         test       bl, 0x1                                     ; CODE XREF=mbsalign+528
0000000000005f68         mov        rbp, r15
0000000000005f6b         mov        qword [rsp+0x68+var_60], 0x0
0000000000005f74         jne        loc_5c1e

0000000000005f7a         jmp        loc_5d9a

                     loc_5f7f:
0000000000005f7f         mov        r15, qword [rsp+0x68+var_68]                ; CODE XREF=mbsalign+725
0000000000005f83         xor        ebp, ebp
0000000000005f85         jmp        loc_5edf

                     loc_5f8a:
0000000000005f8a         mov        rax, rbp                                    ; CODE XREF=mbsalign+364
0000000000005f8d         xor        edx, edx
0000000000005f8f         jmp        loc_5c30
0000000000005f94         align      32                                          ; End of unwind block (FDE at 0xc734)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_3C: int32_t, -60
        ;    var_40: int32_t, -64


                     ambsalign:
0000000000005fa0         push       r15                                         ; Begin of unwind block (FDE at 0xc780)
0000000000005fa2         push       r14
0000000000005fa4         mov        r15, rdi
0000000000005fa7         push       r13
0000000000005fa9         push       r12
0000000000005fab         xor        r12d, r12d
0000000000005fae         push       rbp
0000000000005faf         push       rbx
0000000000005fb0         mov        rbp, rsi
0000000000005fb3         sub        rsp, 0x18
0000000000005fb7         mov        r13, qword [rsi]
0000000000005fba         mov        dword [rsp+0x48+var_40], edx
0000000000005fbe         mov        dword [rsp+0x48+var_3C], ecx
0000000000005fc2         mov        rax, r13
0000000000005fc5         nop        dword [rax]

                     loc_5fc8:
0000000000005fc8         lea        rbx, qword [rax+1]                          ; CODE XREF=ambsalign+106
0000000000005fcc         mov        rdi, r12                                    ; argument "__ptr" for method j_realloc
0000000000005fcf         mov        rsi, rbx                                    ; argument "__size" for method j_realloc
0000000000005fd2         call       j_realloc                                   ; realloc
0000000000005fd7         test       rax, rax
0000000000005fda         mov        r14, rax
0000000000005fdd         je         loc_6020

0000000000005fdf         mov        r9d, dword [rsp+0x48+var_3C]
0000000000005fe4         mov        r8d, dword [rsp+0x48+var_40]
0000000000005fe9         mov        rcx, rbp
0000000000005fec         mov        qword [rbp], r13
0000000000005ff0         mov        rdx, rbx
0000000000005ff3         mov        rsi, rax
0000000000005ff6         mov        rdi, r15
0000000000005ff9         call       mbsalign                                    ; mbsalign
0000000000005ffe         cmp        rax, 0xffffffffffffffff
0000000000006002         je         loc_6030

0000000000006004         cmp        rbx, rax
0000000000006007         mov        r12, r14
000000000000600a         jbe        loc_5fc8

                     loc_600c:
000000000000600c         add        rsp, 0x18                                   ; CODE XREF=ambsalign+136, ambsalign+155
0000000000006010         mov        rax, r14
0000000000006013         pop        rbx
0000000000006014         pop        rbp
0000000000006015         pop        r12
0000000000006017         pop        r13
0000000000006019         pop        r14
000000000000601b         pop        r15
000000000000601d         ret
                        ; endp
000000000000601e         align      32

                     loc_6020:
0000000000006020         mov        rdi, r12                                    ; argument "__ptr" for method j_free, CODE XREF=ambsalign+61
0000000000006023         call       j_free                                      ; free
0000000000006028         jmp        loc_600c
000000000000602a         align      16

                     loc_6030:
0000000000006030         mov        rdi, r14                                    ; argument "__ptr" for method j_free, CODE XREF=ambsalign+98
0000000000006033         xor        r14d, r14d
0000000000006036         call       j_free                                      ; free
000000000000603b         jmp        loc_600c
000000000000603d         align      64                                          ; End of unwind block (FDE at 0xc780)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_program_name:
0000000000006040         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0xc7cc), CODE XREF=main+38
0000000000006043         push       rbx
0000000000006044         je         loc_60bd

0000000000006046         mov        esi, 0x2f                                   ; argument "__c" for method j_strrchr
000000000000604b         mov        rbx, rdi
000000000000604e         call       j_strrchr                                   ; strrchr
0000000000006053         test       rax, rax
0000000000006056         je         loc_60ad

0000000000006058         lea        r8, qword [rax+1]
000000000000605c         mov        rdx, r8
000000000000605f         sub        rdx, rbx
0000000000006062         cmp        rdx, 0x6
0000000000006066         jle        loc_60ad

0000000000006068         lea        rsi, qword [rax-6]
000000000000606c         lea        rdi, qword [aLibs]                          ; "/.libs/"
0000000000006073         mov        ecx, 0x7
0000000000006078         rep  cmpsb byte [rsi], byte [rdi]
000000000000607a         seta       dl
000000000000607d         sbb        dl, 0x0
0000000000006080         test       dl, dl
0000000000006082         jne        loc_60ad

0000000000006084         lea        rdi, qword [aLibs+8]                        ; 0xb458
000000000000608b         mov        ecx, 0x3
0000000000006090         mov        rsi, r8
0000000000006093         mov        rbx, r8
0000000000006096         rep  cmpsb byte [rsi], byte [rdi]
0000000000006098         seta       dl
000000000000609b         sbb        dl, 0x0
000000000000609e         test       dl, dl
00000000000060a0         jne        loc_60ad

00000000000060a2         lea        rbx, qword [rax+4]
00000000000060a6         mov        qword [program_invocation_short_name@@GLIBC_2.2.5], rbx ; program_invocation_short_name@@GLIBC_2.2.5

                     loc_60ad:
00000000000060ad         mov        qword [program_name], rbx                   ; program_name, CODE XREF=set_program_name+22, set_program_name+38, set_program_name+66, set_program_name+96
00000000000060b4         mov        qword [__progname_full@@GLIBC_2.2.5], rbx   ; __progname_full@@GLIBC_2.2.5
00000000000060bb         pop        rbx
00000000000060bc         ret
                        ; endp

                     loc_60bd:
00000000000060bd         mov        rcx, qword [stderr@@GLIBC_2.2.5]            ; argument "__s" for method j_fwrite, stderr@@GLIBC_2.2.5, CODE XREF=set_program_name+4
00000000000060c4         lea        rdi, qword [aANullArgv0WasP]                ; argument "__ptr" for method j_fwrite, "A NULL argv[0] was passed through an exec system call.\\n"
00000000000060cb         mov        edx, 0x37                                   ; argument "__n" for method j_fwrite
00000000000060d0         mov        esi, 0x1                                    ; argument "__size" for method j_fwrite
00000000000060d5         call       j_fwrite                                    ; fwrite
00000000000060da         call       j_abort                                     ; abort
                        ; endp
00000000000060df         align      32                                          ; End of unwind block (FDE at 0xc7cc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     gettext_quote.part.1:
00000000000060e0         push       rbp                                         ; Begin of unwind block (FDE at 0xc7ec), CODE XREF=sub_6910+2597, sub_6910+2619
00000000000060e1         push       rbx
00000000000060e2         mov        rbp, rdi
00000000000060e5         mov        ebx, esi
00000000000060e7         sub        rsp, 0x8
00000000000060eb         call       locale_charset                              ; locale_charset
00000000000060f0         movzx      edx, byte [rax]
00000000000060f3         and        edx, 0xffffffdf
00000000000060f6         cmp        dl, 0x55
00000000000060f9         je         loc_6170

00000000000060fb         cmp        dl, 0x47
00000000000060fe         je         loc_6120

                     loc_6100:
0000000000006100         lea        rax, qword [aLibs+27]                       ; 0xb46b, CODE XREF=gettext_quote.part.1+74, gettext_quote.part.1+80, gettext_quote.part.1+86, gettext_quote.part.1+92, gettext_quote.part.1+98, gettext_quote.part.1+104, gettext_quote.part.1+110, gettext_quote.part.1+154, gettext_quote.part.1+166, gettext_quote.part.1+176, gettext_quote.part.1+186
0000000000006107         lea        rdx, qword [aLibs+29]                       ; 0xb46d
000000000000610e         cmp        ebx, 0x9
0000000000006111         cmovne     rax, rdx
0000000000006115         add        rsp, 0x8
0000000000006119         pop        rbx
000000000000611a         pop        rbp
000000000000611b         ret
                        ; endp
000000000000611c         align      32

                     loc_6120:
0000000000006120         movzx      edx, byte [rax+1]                           ; CODE XREF=gettext_quote.part.1+30
0000000000006124         and        edx, 0xffffffdf
0000000000006127         cmp        dl, 0x42
000000000000612a         jne        loc_6100

000000000000612c         cmp        byte [rax+2], 0x31
0000000000006130         jne        loc_6100

0000000000006132         cmp        byte [rax+3], 0x38
0000000000006136         jne        loc_6100

0000000000006138         cmp        byte [rax+4], 0x30
000000000000613c         jne        loc_6100

000000000000613e         cmp        byte [rax+5], 0x33
0000000000006142         jne        loc_6100

0000000000006144         cmp        byte [rax+6], 0x30
0000000000006148         jne        loc_6100

000000000000614a         cmp        byte [rax+7], 0x0
000000000000614e         jne        loc_6100

0000000000006150         cmp        byte [rbp], 0x60
0000000000006154         lea        rax, qword [aLibs+20]                       ; 0xb464
000000000000615b         lea        rdx, qword [aLibs+24]                       ; 0xb468
0000000000006162         cmovne     rax, rdx
0000000000006166         add        rsp, 0x8
000000000000616a         pop        rbx
000000000000616b         pop        rbp
000000000000616c         ret
                        ; endp
000000000000616d         align      16

                     loc_6170:
0000000000006170         movzx      edx, byte [rax+1]                           ; CODE XREF=gettext_quote.part.1+25
0000000000006174         and        edx, 0xffffffdf
0000000000006177         cmp        dl, 0x54
000000000000617a         jne        loc_6100

000000000000617c         movzx      edx, byte [rax+2]
0000000000006180         and        edx, 0xffffffdf
0000000000006183         cmp        dl, 0x46
0000000000006186         jne        loc_6100

000000000000618c         cmp        byte [rax+3], 0x2d
0000000000006190         jne        loc_6100

0000000000006196         cmp        byte [rax+4], 0x38
000000000000619a         jne        loc_6100

00000000000061a0         cmp        byte [rax+5], 0x0
00000000000061a4         jne        loc_6100

00000000000061aa         cmp        byte [rbp], 0x60
00000000000061ae         lea        rax, qword [aLibs+12]                       ; 0xb45c
00000000000061b5         lea        rdx, qword [aLibs+16]                       ; 0xb460
00000000000061bc         cmovne     rax, rdx
00000000000061c0         add        rsp, 0x8
00000000000061c4         pop        rbx
00000000000061c5         pop        rbp
00000000000061c6         ret
                        ; endp
00000000000061c7         align      16                                          ; End of unwind block (FDE at 0xc7ec)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_0: int, 8
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_4C: int32_t, -76
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_69: int8_t, -105
        ;    var_6A: int8_t, -106
        ;    var_6B: int8_t, -107
        ;    var_6C: int8_t, -108
        ;    var_70: int32_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208
        ;    var_D8: int64_t, -216
        ;    var_D9: int8_t, -217
        ;    var_DA: int8_t, -218
        ;    var_DB: int8_t, -219
        ;    var_E0: int32_t, -224


                     quotearg_buffer_restyled:
00000000000061d0         push       r15                                         ; Begin of unwind block (FDE at 0xc830), CODE XREF=sub_6910+1165, sub_6910+2699, quotearg_n_options+231, quotearg_n_options+344, quotearg_buffer+92, quotearg_alloc_mem+103, quotearg_alloc_mem+176
00000000000061d2         push       r14
00000000000061d4         mov        r15d, r8d
00000000000061d7         push       r13
00000000000061d9         push       r12
00000000000061db         mov        r14, rdi
00000000000061de         push       rbp
00000000000061df         push       rbx
00000000000061e0         mov        ebx, r9d
00000000000061e3         mov        r13, rsi
00000000000061e6         mov        rbp, rcx
00000000000061e9         and        ebx, 0x2
00000000000061ec         sub        rsp, 0xb8
00000000000061f3         mov        rax, qword [rsp+0xe8+arg_0]
00000000000061fb         mov        qword [rsp+0xe8+var_D8], rdx
0000000000006200         mov        dword [rsp+0xe8+var_E0], r8d
0000000000006205         mov        dword [rsp+0xe8+var_70], r9d
000000000000620a         mov        qword [rsp+0xe8+var_C8], rax
000000000000620f         mov        rax, qword [rsp+0xe8+arg_8]
0000000000006217         mov        qword [rsp+0xe8+var_80], rax
000000000000621c         mov        rax, qword [rsp+0xe8+arg_10]
0000000000006224         mov        qword [rsp+0xe8+var_88], rax
0000000000006229         mov        rax, qword [fs:0x28]
0000000000006232         mov        qword [rsp+0xe8+var_40], rax
000000000000623a         xor        eax, eax
000000000000623c         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max
0000000000006241         cmp        r15d, 0xa
0000000000006245         mov        qword [rsp+0xe8+var_90], rax
000000000000624a         ja         loc_73ff

0000000000006250         lea        rcx, qword [switch_table_b4c0]              ; switch_table_b4c0
0000000000006257         mov        edx, r15d
000000000000625a         movsxd     rax, dword [rcx+rdx*4]
000000000000625e         add        rax, rcx
0000000000006261         jmp        rax                                         ; switch statement using table at 0xb4c0, with 11 cases, 0x6263,0x6e34,0x6e90,0x6ee5,0x6f2a,0x6f64,0x700a,0x7044,0x7238

                     loc_6263:
0000000000006263         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 1, CODE XREF=quotearg_buffer_restyled+145, sub_6910+1318
0000000000006268         mov        byte [rsp+0xe8+var_6C], 0x0
000000000000626d         xor        r12d, r12d
0000000000006270         mov        qword [rsp+0xe8+var_98], 0x0
0000000000006279         mov        byte [rsp+0xe8+var_D9], 0x1
000000000000627e         mov        byte [rsp+0xe8+var_DB], 0x0

                     loc_6283:
0000000000006283         lea        rax, qword [aLibs+29]                       ; 0xb46d, CODE XREF=sub_6910+1876
000000000000628a         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000006293         xor        r15d, r15d
0000000000006296         mov        dword [rsp+0xe8+var_E0], 0x2
000000000000629e         mov        qword [rsp+0xe8+var_A0], rax

                     loc_62a3:
00000000000062a3         xor        r11d, r11d                                  ; CODE XREF=sub_6910+180, sub_6910+1400, sub_6910+1488, sub_6910+1557, sub_6910+1615, sub_6910+1781, sub_6910+1839, sub_6910+2408, sub_6910+2485
00000000000062a6         mov        rax, rbp
00000000000062a9         mov        r8d, r12d
00000000000062ac         mov        rbp, r11
00000000000062af         mov        r11, rax
00000000000062b2         nop        word [rax+rax]

                     loc_62b8:
00000000000062b8         cmp        r11, rbp                                    ; CODE XREF=sub_63c0+194
00000000000062bb         setne      r12b
00000000000062bf         cmp        r11, 0xffffffffffffffff
00000000000062c3         jne        loc_62d2

00000000000062c5         mov        rax, qword [rsp+0xe8+var_D8]
00000000000062ca         cmp        byte [rax+rbp], 0x0
00000000000062ce         setne      r12b

                     loc_62d2:
00000000000062d2         test       r12b, r12b                                  ; CODE XREF=quotearg_buffer_restyled+243
00000000000062d5         je         loc_6930

00000000000062db         cmp        dword [rsp+0xe8+var_E0], 0x2
00000000000062e0         mov        rdi, qword [rsp+0xe8+var_D8]
00000000000062e5         lea        r9, qword [rdi+rbp]
00000000000062e9         setne      al
00000000000062ec         and        al, byte [rsp+0xe8+var_DB]
00000000000062f0         mov        r10d, eax
00000000000062f3         je         loc_63a0

00000000000062f9         mov        rax, qword [rsp+0xe8+var_D0]
00000000000062fe         test       rax, rax
0000000000006301         je         loc_6730

0000000000006307         cmp        r11, 0xffffffffffffffff
000000000000630b         lea        rbx, qword [rbp+rax]
0000000000006310         jne        loc_6340

0000000000006312         cmp        rax, 0x1
0000000000006316         jbe        loc_6340

0000000000006318         mov        byte [rsp+0xe8+var_B0], r8b
000000000000631d         mov        byte [rsp+0xe8+var_B8], r10b
0000000000006322         mov        qword [rsp+0xe8+var_C0], r9
0000000000006327         call       j_strlen                                    ; strlen
000000000000632c         movzx      r8d, byte [rsp+0xe8+var_B0]
0000000000006332         movzx      r10d, byte [rsp+0xe8+var_B8]
0000000000006338         mov        r11, rax
000000000000633b         mov        r9, qword [rsp+0xe8+var_C0]

                     loc_6340:
0000000000006340         cmp        rbx, r11                                    ; CODE XREF=quotearg_buffer_restyled+320, quotearg_buffer_restyled+326
0000000000006343         mov        byte [rsp+0xe8+var_C0], r10b
0000000000006348         ja         loc_6900

000000000000634e         mov        rdx, qword [rsp+0xe8+var_D0]                ; argument "__n" for method j_memcmp
0000000000006353         mov        rsi, qword [rsp+0xe8+var_A0]                ; argument "__s2" for method j_memcmp
0000000000006358         mov        rdi, r9                                     ; argument "__s1" for method j_memcmp
000000000000635b         mov        qword [rsp+0xe8+var_A8], r11
0000000000006360         mov        byte [rsp+0xe8+var_B0], r8b
0000000000006365         mov        qword [rsp+0xe8+var_B8], r9
000000000000636a         call       j_memcmp                                    ; memcmp
000000000000636f         test       eax, eax
0000000000006371         mov        r9, qword [rsp+0xe8+var_B8]
0000000000006376         movzx      r8d, byte [rsp+0xe8+var_B0]
000000000000637c         mov        r11, qword [rsp+0xe8+var_A8]
0000000000006381         jne        loc_6900

0000000000006387         cmp        byte [rsp+0xe8+var_D9], 0x0
000000000000638c         movzx      r10d, byte [rsp+0xe8+var_C0]
0000000000006392         jne        loc_7315

0000000000006398         nop        dword [rax+rax]

                     loc_63a0:
00000000000063a0         movzx      ebx, byte [r9]                              ; CODE XREF=quotearg_buffer_restyled+291, sub_68f0+19
00000000000063a4         cmp        bl, 0x7e
00000000000063a7         ja         loc_66c8

00000000000063ad         lea        rcx, qword [switch_table_b4c0+44]           ; 0xb4ec
00000000000063b4         movzx      edx, bl
00000000000063b7         movsxd     rax, dword [rcx+rdx*4]
00000000000063bb         add        rax, rcx
00000000000063be         jmp        rax
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_63c0:
00000000000063c0         xor        r10d, r10d
00000000000063c3         cmp        r11, 0x1
00000000000063c7         setne      al
00000000000063ca         cmp        r11, 0xffffffffffffffff
00000000000063ce         jne        loc_63dc

00000000000063d0         mov        rax, qword [rsp+arg_8]
00000000000063d5         cmp        byte [rax+1], 0x0
00000000000063d9         setne      al

                     loc_63dc:
00000000000063dc         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_63c0+14
00000000000063e1         sete       dl
00000000000063e4         test       al, al
00000000000063e6         je         loc_6638

                     loc_63ec:
00000000000063ec         xor        r12d, r12d                                  ; CODE XREF=sub_6630+11
00000000000063ef         xor        eax, eax
00000000000063f1         nop        dword [rax]
                        ; endp

                     loc_63f8:
00000000000063f8         cmp        byte [rsp+0xe8+var_DB], 0x1                 ; CODE XREF=sub_65e0+50, sub_66b0+119
00000000000063fd         jne        loc_6512

0000000000006403         test       dl, dl
0000000000006405         jne        loc_6512

                     loc_640b:
000000000000640b         mov        rsi, qword [rsp+0xe8+var_C8]                ; CODE XREF=sub_64c0+87
0000000000006410         test       rsi, rsi
0000000000006413         je         loc_6429

0000000000006415         mov        edx, ebx
0000000000006417         shr        dl, 0x5
000000000000641a         movzx      edx, dl
000000000000641d         mov        edx, dword [rsi+rdx*4]
0000000000006420         bt         edx, ebx
0000000000006423         jb         loc_6573

                     loc_6429:
0000000000006429         test       r10b, r10b                                  ; CODE XREF=sub_63c0+83, sub_64c0+93
000000000000642c         jne        loc_6573

0000000000006432         xor        eax, 0x1
0000000000006435         add        rbp, 0x1
0000000000006439         and        eax, r8d

                     loc_643c:
000000000000643c         test       al, al                                      ; CODE XREF=sub_6910+936
000000000000643e         je         loc_6460

0000000000006440         cmp        r13, r15
0000000000006443         jbe        loc_644a

0000000000006445         mov        byte [r14+r15], 0x27

                     loc_644a:
000000000000644a         lea        rax, qword [r15+1]                          ; CODE XREF=sub_63c0+131
000000000000644e         cmp        r13, rax
0000000000006451         jbe        loc_6459

0000000000006453         mov        byte [r14+r15+1], 0x27

                     loc_6459:
0000000000006459         add        r15, 0x2                                    ; CODE XREF=sub_63c0+145
000000000000645d         xor        r8d, r8d

                     loc_6460:
0000000000006460         cmp        r15, r13                                    ; CODE XREF=sub_63c0+126, sub_64c0+275, sub_6910+869
0000000000006463         jae        loc_6469

0000000000006465         mov        byte [r14+r15], bl

                     loc_6469:
0000000000006469         movzx      edi, byte [rsp+0xe8+var_DA]                 ; CODE XREF=sub_63c0+163
000000000000646e         add        r15, 0x1
0000000000006472         mov        eax, 0x0
0000000000006477         test       r12b, r12b
000000000000647a         cmove      edi, eax
000000000000647d         mov        byte [rsp+0xe8+var_DA], dil
0000000000006482         jmp        loc_62b8
0000000000006487         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_70: int8_t, 120
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_6490:
0000000000006490         xor        r10d, r10d
0000000000006493         mov        eax, dword [rsp+arg_0]
0000000000006497         cmp        eax, 0x2
000000000000649a         je         loc_6a58

00000000000064a0         cmp        eax, 0x5
00000000000064a3         je         loc_6a18

00000000000064a9         cmp        eax, 0x2
00000000000064ac         mov        ebx, 0x3f
00000000000064b1         sete       dl
00000000000064b4         xor        r12d, r12d
00000000000064b7         xor        eax, eax
00000000000064b9         jmp        sub_63c0+56
                        ; endp
00000000000064be         align      64


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_74: int8_t, 124
        ;    arg_48: int, 80
        ;    arg_40: int, 72
        ;    arg_38: int, 64
        ;    arg_30: int, 56
        ;    arg_28: int, 48
        ;    arg_20: int, 40
        ;    arg_18: int, 32
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_64c0:
00000000000064c0         xor        r10d, r10d
00000000000064c3         cmp        dword [rsp+arg_0], 0x2
00000000000064c8         je         loc_69d0

00000000000064ce         mov        byte [rsp+arg_74], r12b
00000000000064d3         xor        edx, edx
00000000000064d5         xor        eax, eax
00000000000064d7         mov        ebx, 0x27
00000000000064dc         jmp        sub_63c0+56
                        ; endp
00000000000064e1         nop        dword [rax]
00000000000064e8         mov        edx, 0x9
00000000000064ed         mov        ebx, 0x74

                     loc_64f2:
00000000000064f2         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_6680+10, sub_6770+37, sub_68b0+53
00000000000064f7         sete       al
00000000000064fa         and        al, byte [rsp+arg_7]
00000000000064fe         jne        sub_6630+30

0000000000006504         cmp        byte [rsp+arg_5], 0x0                       ; CODE XREF=sub_64c0+114
0000000000006509         jne        loc_6570

                     loc_650b:
000000000000650b         mov        ebx, edx                                    ; CODE XREF=sub_65e0+18
000000000000650d         xor        r12d, r12d
0000000000006510         xor        eax, eax
                        ; endp

                     loc_6512:
0000000000006512         cmp        byte [rsp+0xe8+var_D9], 0x0                 ; CODE XREF=sub_63c0+61, sub_63c0+69
0000000000006517         jne        loc_640b

000000000000651d         jmp        loc_6429
0000000000006522         nop        word [rax+rax]
0000000000006528         mov        edx, 0x8
000000000000652d         mov        ebx, 0x62
0000000000006532         jmp        sub_64c0+68
0000000000006534         nop        dword [rax]
0000000000006538         cmp        dword [rsp+8], 0x2
000000000000653d         je         sub_6910                                    ; sub_6910
0000000000006543         cmp        byte [rsp+0xd], 0x0
0000000000006548         je         sub_6750+16

                     loc_654e:
000000000000654e         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_6750+8
0000000000006553         je         loc_6760

0000000000006559         cmp        qword [rsp+arg_10], 0x0
000000000000655f         jne        loc_691b

0000000000006565         mov        ebx, 0x5c
000000000000656a         nop        word [rax+rax]
                        ; endp

                     loc_6570:
0000000000006570         xor        r12d, r12d                                  ; CODE XREF=sub_64c0+73, sub_68b0+29
                        ; endp

                     loc_6573:
0000000000006573         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_63c0+99, sub_63c0+108
0000000000006578         sete       dl
000000000000657b         cmp        byte [rsp+0xe8+var_D9], 0x0
0000000000006580         mov        eax, edx
0000000000006582         jne        loc_6dd8

0000000000006588         mov        eax, r8d
000000000000658b         xor        eax, 0x1
000000000000658e         and        al, dl
0000000000006590         je         loc_65c1

0000000000006592         cmp        r13, r15
0000000000006595         jbe        loc_659c

0000000000006597         mov        byte [r14+r15], 0x27

                     loc_659c:
000000000000659c         lea        rdx, qword [r15+1]                          ; CODE XREF=sub_64c0+213
00000000000065a0         cmp        r13, rdx
00000000000065a3         jbe        loc_65ab

00000000000065a5         mov        byte [r14+r15+1], 0x24

                     loc_65ab:
00000000000065ab         lea        rdx, qword [r15+2]                          ; CODE XREF=sub_64c0+227
00000000000065af         cmp        r13, rdx
00000000000065b2         jbe        loc_65ba

00000000000065b4         mov        byte [r14+r15+2], 0x27

                     loc_65ba:
00000000000065ba         add        r15, 0x3                                    ; CODE XREF=sub_64c0+242
00000000000065be         mov        r8d, eax

                     loc_65c1:
00000000000065c1         cmp        r13, r15                                    ; CODE XREF=sub_64c0+208
00000000000065c4         jbe        loc_65cb

00000000000065c6         mov        byte [r14+r15], 0x5c

                     loc_65cb:
00000000000065cb         add        r15, 0x1                                    ; CODE XREF=sub_64c0+260
00000000000065cf         add        rbp, 0x1
00000000000065d3         jmp        loc_6460
00000000000065d8         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_70: int8_t, 120
        ;    arg_20: int, 40
        ;    arg_18: int, 32
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_65e0:
00000000000065e0         cmp        byte [rsp+arg_5], 0x0
00000000000065e5         jne        loc_67b3

00000000000065eb         xor        edx, edx
00000000000065ed         test       byte [rsp+arg_70], 0x1
00000000000065f2         je         loc_650b

00000000000065f8         add        rbp, 0x1
00000000000065fc         jmp        quotearg_buffer_restyled+232
                        ; endp
0000000000006601         nop        dword [rax]
0000000000006608         cmp        dword [rsp+8], 0x2
000000000000660d         sete       dl
0000000000006610         xor        eax, eax
0000000000006612         jmp        sub_63c0+56
0000000000006617         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_6620:
0000000000006620         mov        edx, 0x7
0000000000006625         mov        ebx, 0x61
000000000000662a         jmp        sub_64c0+68
                        ; endp
000000000000662f         nop


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_6630:
0000000000006630         cmp        dword [rsp+8], 0x2
0000000000006635         sete       dl
                        ; endp

                     loc_6638:
0000000000006638         test       rbp, rbp                                    ; CODE XREF=sub_63c0+38, sub_6850+35
000000000000663b         jne        loc_63ec

0000000000006641         movzx      eax, byte [rsp+arg_7]                       ; CODE XREF=sub_6880+43
0000000000006646         and        al, dl
0000000000006648         je         sub_63c0+56

000000000000664e         mov        rbp, r11
0000000000006651         mov        dword [rsp+arg_0], 0x2
0000000000006659         jmp        sub_6910+1097
                        ; endp
000000000000665e         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_6660:
0000000000006660         cmp        dword [rsp+arg_0], 0x2
0000000000006665         sete       dl
0000000000006668         xor        r12d, r12d
000000000000666b         jmp        sub_6630+17
                        ; endp
000000000000666d         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_6670:
0000000000006670         cmp        dword [rsp+arg_0], 0x2
0000000000006675         mov        ebx, 0x20
000000000000667a         sete       dl
000000000000667d         jmp        sub_6630+17
                        ; endp
000000000000667f         align      128


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_6680:
0000000000006680         mov        edx, 0xd
0000000000006685         mov        ebx, 0x72
000000000000668a         jmp        loc_64f2
000000000000668f         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_6690:
0000000000006690         mov        edx, 0xc
0000000000006695         mov        ebx, 0x66
000000000000669a         jmp        sub_64c0+68
                        ; endp
000000000000669f         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_66a0:
00000000000066a0         mov        edx, 0xb
00000000000066a5         mov        ebx, 0x76
00000000000066aa         jmp        sub_64c0+68
                        ; endp
00000000000066af         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_66b0:
00000000000066b0         mov        edx, 0xa
00000000000066b5         mov        ebx, 0x6e
00000000000066ba         jmp        sub_64c0+50
                        ; endp
00000000000066bf         align      64

                     loc_66c0:
00000000000066c0         xor        r10d, r10d                                  ; CODE XREF=sub_66b0+135
00000000000066c3         nop        dword [rax+rax]

                     loc_66c8:
00000000000066c8         cmp        qword [rsp+0xe8+var_90], 0x1                ; CODE XREF=quotearg_buffer_restyled+471
00000000000066ce         jne        loc_6a78

00000000000066d4         mov        qword [rsp+0xe8+var_B0], r11
00000000000066d9         mov        byte [rsp+0xe8+var_B8], r8b
00000000000066de         mov        byte [rsp+0xe8+var_C0], r10b
00000000000066e3         call       j___ctype_b_loc                             ; __ctype_b_loc
00000000000066e8         mov        rcx, qword [rax]
00000000000066eb         movzx      edx, bl
00000000000066ee         movzx      r10d, byte [rsp+0xe8+var_C0]
00000000000066f4         movzx      r8d, byte [rsp+0xe8+var_B8]
00000000000066fa         mov        r11, qword [rsp+0xe8+var_B0]
00000000000066ff         mov        edi, 0x1
0000000000006704         movzx      eax, word [rcx+rdx*2]
0000000000006708         and        ax, 0x4000
000000000000670c         setne      r12b
0000000000006710         sete       al
0000000000006713         and        al, byte [rsp+0xe8+var_DB]

                     loc_6717:
0000000000006717         test       al, al                                      ; CODE XREF=sub_6910+2221
0000000000006719         jne        loc_70b1

000000000000671f         cmp        dword [rsp+0xe8+var_E0], 0x2
0000000000006724         sete       dl
0000000000006727         jmp        loc_63f8
000000000000672c         align      16

                     loc_6730:
0000000000006730         movzx      ebx, byte [r9]                              ; CODE XREF=quotearg_buffer_restyled+305
0000000000006734         cmp        bl, 0x7e
0000000000006737         ja         loc_66c0

0000000000006739         lea        rcx, qword [switch_table_b4c0+552]          ; 0xb6e8
0000000000006740         movzx      edx, bl
0000000000006743         movsxd     rax, dword [rcx+rdx*4]
0000000000006747         add        rax, rcx
000000000000674a         jmp        rax
                        ; endp
000000000000674c         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_6750:
0000000000006750         xor        r10d, r10d
0000000000006753         cmp        byte [rsp+arg_5], 0x0
0000000000006758         jne        loc_654e

000000000000675e         nop

                     loc_6760:
0000000000006760         mov        edx, 0x5c                                   ; CODE XREF=sub_64c0+136, sub_64c0+147
0000000000006765         mov        ebx, 0x5c
000000000000676a         jmp        sub_64c0+68
                        ; endp
000000000000676f         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_6770:
0000000000006770         mov        edx, 0xc
0000000000006775         xor        r10d, r10d
0000000000006778         mov        ebx, 0x66
000000000000677d         jmp        sub_64c0+68
                        ; endp
0000000000006782         nop        word [rax+rax]
0000000000006788         mov        edx, 0xa
000000000000678d         xor        r10d, r10d
0000000000006790         mov        ebx, 0x6e
0000000000006795         jmp        sub_64c0+50
000000000000679a         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_67a0:
00000000000067a0         mov        ebx, 0x61
00000000000067a5         jmp        sub_64c0+176
                        ; endp
00000000000067aa         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_67b0:
00000000000067b0         xor        r10d, r10d
                        ; endp

                     loc_67b3:
00000000000067b3         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_65e0+5
00000000000067b8         sete       dl
00000000000067bb         cmp        byte [rsp+arg_7], 0x0
00000000000067c0         jne        loc_735a

00000000000067c6         mov        eax, r8d
00000000000067c9         mov        rcx, r15
00000000000067cc         xor        eax, 0x1
00000000000067cf         and        al, dl
00000000000067d1         je         loc_6800

00000000000067d3         cmp        r13, r15
00000000000067d6         jbe        loc_67dd

00000000000067d8         mov        byte [r14+r15], 0x27

                     loc_67dd:
00000000000067dd         lea        rcx, qword [r15+1]                          ; CODE XREF=sub_67b0+38
00000000000067e1         cmp        r13, rcx
00000000000067e4         jbe        loc_67ec

00000000000067e6         mov        byte [r14+r15+1], 0x24

                     loc_67ec:
00000000000067ec         lea        rcx, qword [r15+2]                          ; CODE XREF=sub_67b0+52
00000000000067f0         cmp        r13, rcx
00000000000067f3         ja         loc_6e29

                     loc_67f9:
00000000000067f9         lea        rcx, qword [r15+3]                          ; CODE XREF=sub_6910+1311
00000000000067fd         mov        r8d, eax

                     loc_6800:
0000000000006800         cmp        r13, rcx                                    ; CODE XREF=sub_67b0+33
0000000000006803         jbe        loc_680a

0000000000006805         mov        byte [r14+rcx], 0x5c

                     loc_680a:
000000000000680a         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_67b0+83
000000000000680f         lea        r15, qword [rcx+1]
0000000000006813         je         loc_6e19

0000000000006819         lea        rax, qword [rbp+1]
000000000000681d         cmp        rax, r11
0000000000006820         jae        loc_683b

0000000000006822         mov        rax, qword [rsp+arg_8]
0000000000006827         movzx      eax, byte [rax+rbp+1]
000000000000682c         mov        byte [rsp+arg_20], al
0000000000006830         sub        eax, 0x30
0000000000006833         cmp        al, 0x9
0000000000006835         jbe        loc_7069

                     loc_683b:
000000000000683b         mov        eax, r12d                                   ; CODE XREF=sub_67b0+112
000000000000683e         mov        ebx, 0x30
0000000000006843         xor        r12d, r12d
0000000000006846         jmp        sub_63c0+56
                        ; endp
000000000000684b         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_6850:
0000000000006850         cmp        dword [rsp+arg_0], 0x2
0000000000006855         mov        r12d, r10d
0000000000006858         sete       dl
000000000000685b         xor        r10d, r10d
000000000000685e         xor        eax, eax
0000000000006860         jmp        sub_63c0+56
                        ; endp
0000000000006865         nop        dword [rax]
0000000000006868         cmp        dword [rsp+8], 0x2
000000000000686d         sete       dl
0000000000006870         xor        r10d, r10d
0000000000006873         jmp        sub_6630+8
0000000000006878         nop        dword [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_6880:
0000000000006880         cmp        dword [rsp+8], 0x2
0000000000006885         sete       dl
0000000000006888         xor        r10d, r10d
000000000000688b         xor        r12d, r12d
000000000000688e         jmp        sub_6630+17
                        ; endp
0000000000006893         nop        dword [rax+rax]
0000000000006898         cmp        dword [rsp+8], 0x2
000000000000689d         mov        r12d, r10d
00000000000068a0         mov        ebx, 0x20
00000000000068a5         sete       dl
00000000000068a8         xor        r10d, r10d
00000000000068ab         jmp        sub_6630+17


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_68b0:
00000000000068b0         mov        edx, 0xd
00000000000068b5         xor        r10d, r10d
00000000000068b8         mov        ebx, 0x72
00000000000068bd         jmp        sub_64c0+50
                        ; endp
00000000000068c2         nop        word [rax+rax]
00000000000068c8         mov        ebx, 0x76
00000000000068cd         jmp        sub_64c0+176
00000000000068d2         nop        word [rax+rax]
00000000000068d8         mov        edx, 0x9
00000000000068dd         xor        r10d, r10d
00000000000068e0         mov        ebx, 0x74
00000000000068e5         jmp        sub_64c0+50
00000000000068ea         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_68f0:
00000000000068f0         mov        ebx, 0x62
00000000000068f5         jmp        sub_64c0+176
                        ; endp
00000000000068fa         nop        word [rax+rax]

                     loc_6900:
0000000000006900         xor        r10d, r10d                                  ; CODE XREF=quotearg_buffer_restyled+376, quotearg_buffer_restyled+433
0000000000006903         jmp        loc_63a0
0000000000006908         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_7: int8_t, 15


                     sub_6910:
0000000000006910         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_64c0+125
0000000000006915         jne        sub_6910+2416
                        ; endp

                     loc_691b:
000000000000691b         add        rbp, 0x1                                    ; CODE XREF=sub_64c0+159
000000000000691f         mov        eax, r8d
0000000000006922         xor        r12d, r12d
0000000000006925         mov        ebx, 0x5c
000000000000692a         jmp        sub_63c0+124
                        ; endp
000000000000692f         align      16

                     loc_6930:
0000000000006930         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=quotearg_buffer_restyled+261
0000000000006935         movzx      ebx, byte [rsp+0xe8+var_D9]
000000000000693a         mov        r12d, r8d
000000000000693d         mov        rbp, r11
0000000000006940         sete       dl
0000000000006943         mov        eax, ebx
0000000000006945         test       r15, r15
0000000000006948         sete       cl
000000000000694b         and        eax, edx
000000000000694d         and        al, cl
000000000000694f         jne        loc_73b6

0000000000006955         mov        eax, ebx
0000000000006957         xor        eax, 0x1
000000000000695a         and        dl, al
000000000000695c         je         loc_72cc

0000000000006962         cmp        byte [rsp+0xe8+var_6C], 0x0
0000000000006967         je         loc_72ca

000000000000696d         cmp        byte [rsp+0xe8+var_DA], 0x0
0000000000006972         jne        loc_736d

0000000000006978         test       r13, r13
000000000000697b         sete       al
000000000000697e         cmp        qword [rsp+0xe8+var_98], 0x0
0000000000006984         setne      dl
0000000000006987         and        al, dl
0000000000006989         je         loc_73ac

000000000000698f         mov        r13, qword [rsp+0xe8+var_98]

                     loc_6994:
0000000000006994         lea        rbx, qword [aLibs+29]                       ; 0xb46d, CODE XREF=sub_6910+2781
000000000000699b         mov        byte [r14], 0x27
000000000000699f         mov        dword [rsp+0xe8+var_E0], 0x2
00000000000069a7         mov        r15d, 0x1
00000000000069ad         mov        qword [rsp+0xe8+var_D0], 0x1
00000000000069b6         mov        byte [rsp+0xe8+var_D9], 0x0
00000000000069bb         mov        qword [rsp+0xe8+var_A0], rbx
00000000000069c0         mov        byte [rsp+0xe8+var_6C], al
00000000000069c4         jmp        loc_62a3
00000000000069c9         align      16

                     loc_69d0:
00000000000069d0         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_64c0+8
00000000000069d5         jne        sub_6910+2416

00000000000069db         test       r13, r13
00000000000069de         je         loc_6de0

00000000000069e4         xor        edx, edx
00000000000069e6         cmp        qword [rsp+arg_48], 0x0
00000000000069ec         jne        loc_6de0

                     loc_69f2:
00000000000069f2         mov        qword [rsp+arg_48], r13                     ; CODE XREF=sub_6910+1284, sub_6910+2794
00000000000069f7         add        r15, 0x3
00000000000069fb         xor        eax, eax
00000000000069fd         mov        byte [rsp+arg_74], r12b
0000000000006a02         xor        r8d, r8d
0000000000006a05         mov        r13, rdx
0000000000006a08         mov        ebx, 0x27
0000000000006a0d         jmp        sub_63c0+105
                        ; endp
0000000000006a12         align      8

                     loc_6a18:
0000000000006a18         test       byte [rsp+arg_70], 0x4                      ; CODE XREF=sub_6490+19
0000000000006a1d         je         loc_6a40

0000000000006a1f         lea        rcx, qword [rbp+2]
0000000000006a23         cmp        rcx, r11
0000000000006a26         jae        loc_6a40

0000000000006a28         mov        rax, qword [rsp+arg_8]
0000000000006a2d         cmp        byte [rax+rbp+1], 0x3f
0000000000006a32         je         loc_71c2

0000000000006a38         nop        dword [rax+rax]

                     loc_6a40:
0000000000006a40         xor        edx, edx                                    ; CODE XREF=sub_6910+269, sub_6910+278, sub_6910+2233, sub_6910+2253
0000000000006a42         xor        r12d, r12d
0000000000006a45         xor        eax, eax
0000000000006a47         mov        ebx, 0x3f
0000000000006a4c         jmp        sub_63c0+56
                        ; endp
0000000000006a51         align      8

                     loc_6a58:
0000000000006a58         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_6490+10
0000000000006a5d         jne        loc_7280

0000000000006a63         xor        r12d, r12d
0000000000006a66         xor        eax, eax
0000000000006a68         mov        ebx, 0x3f
0000000000006a6d         jmp        sub_63c0+105
                        ; endp
0000000000006a72         align      8

                     loc_6a78:
0000000000006a78         lea        rax, qword [rsp+0xe8+var_48]                ; CODE XREF=sub_66b0+30
0000000000006a80         cmp        r11, 0xffffffffffffffff
0000000000006a84         mov        qword [rsp+0xe8+var_48], 0x0
0000000000006a90         mov        qword [rsp+0xe8+var_C0], rax
0000000000006a95         jne        loc_6ac4

0000000000006a97         mov        rdi, qword [rsp+0xe8+var_D8]                ; argument "__s" for method j_strlen
0000000000006a9c         mov        byte [rsp+0xe8+var_A8], r8b
0000000000006aa1         mov        byte [rsp+0xe8+var_B0], r10b
0000000000006aa6         mov        qword [rsp+0xe8+var_B8], r9
0000000000006aab         call       j_strlen                                    ; strlen
0000000000006ab0         movzx      r8d, byte [rsp+0xe8+var_A8]
0000000000006ab6         movzx      r10d, byte [rsp+0xe8+var_B0]
0000000000006abc         mov        r11, rax
0000000000006abf         mov        r9, qword [rsp+0xe8+var_B8]

                     loc_6ac4:
0000000000006ac4         lea        rax, qword [rsp+0xe8+var_4C]                ; CODE XREF=sub_6910+389
0000000000006acc         xor        ecx, ecx
0000000000006ace         mov        byte [rsp+0xe8+var_6A], bl
0000000000006ad2         mov        byte [rsp+0xe8+var_6B], r8b
0000000000006ad7         mov        rbx, rcx
0000000000006ada         mov        qword [rsp+0xe8+var_60], r9
0000000000006ae2         mov        qword [rsp+0xe8+var_B0], rax
0000000000006ae7         mov        byte [rsp+0xe8+var_69], r10b
0000000000006aec         mov        qword [rsp+0xe8+var_68], r15
0000000000006af4         mov        qword [rsp+0xe8+var_A8], r14
0000000000006af9         mov        qword [rsp+0xe8+var_78], r13
0000000000006afe         mov        qword [rsp+0xe8+var_B8], r11

                     loc_6b03:
0000000000006b03         mov        rax, qword [rsp+0xe8+var_D8]                ; CODE XREF=sub_6910+623
0000000000006b08         lea        r14, qword [rbp+rbx]
0000000000006b0d         mov        rdx, qword [rsp+0xe8+var_B8]
0000000000006b12         mov        rcx, qword [rsp+0xe8+var_C0]
0000000000006b17         mov        rdi, qword [rsp+0xe8+var_B0]
0000000000006b1c         lea        r13, qword [rax+r14]
0000000000006b20         sub        rdx, r14
0000000000006b23         mov        rsi, r13
0000000000006b26         call       rpl_mbrtowc                                 ; rpl_mbrtowc
0000000000006b2b         test       rax, rax
0000000000006b2e         mov        r15, rax
0000000000006b31         je         loc_6b81

0000000000006b33         cmp        rax, 0xffffffffffffffff
0000000000006b37         je         loc_7155

0000000000006b3d         cmp        rax, 0xfffffffffffffffe
0000000000006b41         je         loc_70e1

0000000000006b47         cmp        dword [rsp+0xe8+var_E0], 0x2
0000000000006b4c         sete       al
0000000000006b4f         and        al, byte [rsp+0xe8+var_D9]
0000000000006b53         jne        loc_6cf0

                     loc_6b59:
0000000000006b59         mov        edi, dword [rsp+0xe8+var_4C]                ; argument "__wc" for method j_iswprint, CODE XREF=sub_6910+996, sub_6910+1031
0000000000006b60         call       j_iswprint                                  ; iswprint
0000000000006b65         mov        rdi, qword [rsp+0xe8+var_C0]                ; argument "__ps" for method j_mbsinit
0000000000006b6a         test       eax, eax
0000000000006b6c         mov        eax, 0x0
0000000000006b71         cmove      r12d, eax
0000000000006b75         add        rbx, r15
0000000000006b78         call       j_mbsinit                                   ; mbsinit
0000000000006b7d         test       eax, eax
0000000000006b7f         je         loc_6b03

                     loc_6b81:
0000000000006b81         mov        edx, r12d                                   ; CODE XREF=sub_6910+545
0000000000006b84         mov        rdi, rbx
0000000000006b87         movzx      r8d, byte [rsp+0xe8+var_6B]
0000000000006b8d         xor        edx, 0x1
0000000000006b90         movzx      ebx, byte [rsp+0xe8+var_6A]
0000000000006b95         movzx      r10d, byte [rsp+0xe8+var_69]
0000000000006b9b         and        dl, byte [rsp+0xe8+var_DB]
0000000000006b9f         mov        r15, qword [rsp+0xe8+var_68]
0000000000006ba7         mov        r14, qword [rsp+0xe8+var_A8]
0000000000006bac         mov        r13, qword [rsp+0xe8+var_78]
0000000000006bb1         mov        r11, qword [rsp+0xe8+var_B8]

                     loc_6bb6:
0000000000006bb6         cmp        rdi, 0x1                                    ; CODE XREF=sub_6910+2112, sub_6910+2168
0000000000006bba         jbe        loc_71bb

                     loc_6bc0:
0000000000006bc0         mov        rcx, rdi                                    ; CODE XREF=sub_6910+1961
0000000000006bc3         xor        esi, esi
0000000000006bc5         movzx      r9d, byte [rsp+0xe8+var_D9]
0000000000006bcb         add        rcx, rbp
0000000000006bce         mov        rdi, qword [rsp+0xe8+var_D8]
0000000000006bd3         jmp        loc_6c8e
0000000000006bd8         align      32

                     loc_6be0:
0000000000006be0         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_6910+896
0000000000006be5         sete       al
0000000000006be8         test       r9b, r9b
0000000000006beb         jne        loc_70a0

0000000000006bf1         mov        esi, r8d
0000000000006bf4         xor        esi, 0x1
0000000000006bf7         and        al, sil
0000000000006bfa         je         loc_6c2b

0000000000006bfc         cmp        r13, r15
0000000000006bff         jbe        loc_6c06

0000000000006c01         mov        byte [r14+r15], 0x27

                     loc_6c06:
0000000000006c06         lea        rsi, qword [r15+1]                          ; CODE XREF=sub_6910+751
0000000000006c0a         cmp        r13, rsi
0000000000006c0d         jbe        loc_6c15

0000000000006c0f         mov        byte [r14+r15+1], 0x24

                     loc_6c15:
0000000000006c15         lea        rsi, qword [r15+2]                          ; CODE XREF=sub_6910+765
0000000000006c19         cmp        r13, rsi
0000000000006c1c         jbe        loc_6c24

0000000000006c1e         mov        byte [r14+r15+2], 0x27

                     loc_6c24:
0000000000006c24         add        r15, 0x3                                    ; CODE XREF=sub_6910+780
0000000000006c28         mov        r8d, eax

                     loc_6c2b:
0000000000006c2b         cmp        r13, r15                                    ; CODE XREF=sub_6910+746
0000000000006c2e         jbe        loc_6c35

0000000000006c30         mov        byte [r14+r15], 0x5c

                     loc_6c35:
0000000000006c35         lea        rax, qword [r15+1]                          ; CODE XREF=sub_6910+798
0000000000006c39         cmp        r13, rax
0000000000006c3c         jbe        loc_6c4b

0000000000006c3e         mov        eax, ebx
0000000000006c40         shr        al, 0x6
0000000000006c43         add        eax, 0x30
0000000000006c46         mov        byte [r14+r15+1], al

                     loc_6c4b:
0000000000006c4b         lea        rax, qword [r15+2]                          ; CODE XREF=sub_6910+812
0000000000006c4f         cmp        r13, rax
0000000000006c52         jbe        loc_6c64

0000000000006c54         mov        eax, ebx
0000000000006c56         shr        al, 0x3
0000000000006c59         and        eax, 0x7
0000000000006c5c         add        eax, 0x30
0000000000006c5f         mov        byte [r14+r15+2], al

                     loc_6c64:
0000000000006c64         and        ebx, 0x7                                    ; CODE XREF=sub_6910+834
0000000000006c67         add        rbp, 0x1
0000000000006c6b         add        r15, 0x3
0000000000006c6f         add        ebx, 0x30
0000000000006c72         cmp        rbp, rcx
0000000000006c75         jae        loc_6460

0000000000006c7b         mov        esi, edx

                     loc_6c7d:
0000000000006c7d         cmp        r13, r15                                    ; CODE XREF=sub_6910+985, sub_6910+1969
0000000000006c80         jbe        loc_6c86

0000000000006c82         mov        byte [r14+r15], bl

                     loc_6c86:
0000000000006c86         movzx      ebx, byte [rdi+rbp]                         ; CODE XREF=sub_6910+880
0000000000006c8a         add        r15, 0x1

                     loc_6c8e:
0000000000006c8e         test       dl, dl                                      ; CODE XREF=sub_6910+707
0000000000006c90         jne        loc_6be0

0000000000006c96         mov        eax, esi
0000000000006c98         xor        eax, 0x1
0000000000006c9b         and        eax, r8d
0000000000006c9e         test       r10b, r10b
0000000000006ca1         je         loc_6cb1

0000000000006ca3         cmp        r13, r15
0000000000006ca6         jbe        loc_6cad

0000000000006ca8         mov        byte [r14+r15], 0x5c

                     loc_6cad:
0000000000006cad         add        r15, 0x1                                    ; CODE XREF=sub_6910+918

                     loc_6cb1:
0000000000006cb1         add        rbp, 0x1                                    ; CODE XREF=sub_6910+913
0000000000006cb5         cmp        rbp, rcx
0000000000006cb8         jae        loc_643c

0000000000006cbe         test       al, al
0000000000006cc0         je         loc_70be

0000000000006cc6         cmp        r13, r15
0000000000006cc9         jbe        loc_6cd0

0000000000006ccb         mov        byte [r14+r15], 0x27

                     loc_6cd0:
0000000000006cd0         lea        rax, qword [r15+1]                          ; CODE XREF=sub_6910+953
0000000000006cd4         cmp        r13, rax
0000000000006cd7         jbe        loc_6cdf

0000000000006cd9         mov        byte [r14+r15+1], 0x27

                     loc_6cdf:
0000000000006cdf         add        r15, 0x2                                    ; CODE XREF=sub_6910+967
0000000000006ce3         xor        r10d, r10d
0000000000006ce6         xor        r8d, r8d
0000000000006ce9         jmp        loc_6c7d
0000000000006ceb         align      16

                     loc_6cf0:
0000000000006cf0         cmp        r15, 0x1                                    ; CODE XREF=sub_6910+579
0000000000006cf4         je         loc_6b59

0000000000006cfa         mov        rdi, qword [rsp+0xe8+var_D8]
0000000000006cff         lea        rcx, qword [rdi+r15]
0000000000006d03         lea        rdx, qword [rdi+r14+1]
0000000000006d08         lea        r8, qword [rcx+r14]
0000000000006d0c         jmp        loc_6d1d
0000000000006d0e         align      16

                     loc_6d10:
0000000000006d10         add        rdx, 0x1                                    ; CODE XREF=sub_6910+1046, sub_6910+1072
0000000000006d14         cmp        r8, rdx
0000000000006d17         je         loc_6b59

                     loc_6d1d:
0000000000006d1d         movzx      ecx, byte [rdx]                             ; CODE XREF=sub_6910+1020
0000000000006d20         sub        ecx, 0x5b
0000000000006d23         cmp        cl, 0x21
0000000000006d26         ja         loc_6d10

0000000000006d28         mov        esi, 0x1
0000000000006d2d         shl        rsi, cl
0000000000006d30         mov        rcx, rsi
0000000000006d33         movabs     rsi, 0x20000002b
0000000000006d3d         test       rcx, rsi
0000000000006d40         je         loc_6d10

0000000000006d42         mov        r14, qword [rsp+0xe8+var_A8]
0000000000006d47         mov        r13, qword [rsp+0xe8+var_78]
0000000000006d4c         mov        rbp, qword [rsp+0xe8+var_B8]
0000000000006d51         mov        dword [rsp+0xe8+var_E0], 0x2

                     loc_6d59:
0000000000006d59         cmp        byte [rsp+0xe8+var_DB], 0x0                 ; CODE XREF=sub_6910+1227, sub_6910+1948, sub_6910+2585, sub_6910+2734
0000000000006d5e         je         loc_6d70

0000000000006d60         test       al, al
0000000000006d62         mov        eax, 0x4
0000000000006d67         cmove      eax, dword [rsp+0xe8+var_E0]
0000000000006d6c         mov        dword [rsp+0xe8+var_E0], eax

                     loc_6d70:
0000000000006d70         sub        rsp, 0x8                                    ; CODE XREF=sub_6910+1102
0000000000006d74         mov        rcx, rbp
0000000000006d77         mov        rsi, r13
0000000000006d7a         push       qword [rsp+0xf0+var_88]
0000000000006d7e         push       qword [rsp+0xf8+var_80]
0000000000006d82         mov        rdi, r14
0000000000006d85         push       0x0
0000000000006d87         mov        r9d, dword [rsp+0x108+var_70]
0000000000006d8f         mov        r8d, dword [rsp+0x108+var_E0]
0000000000006d94         mov        rdx, qword [rsp+0x108+var_D8]
0000000000006d99         and        r9d, 0xfffffffd
0000000000006d9d         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000006da2         add        rsp, 0x20
0000000000006da6         mov        r15, rax

                     loc_6da9:
0000000000006da9         mov        rbx, qword [rsp+0xe8+var_40]                ; CODE XREF=sub_6910+2549, sub_6910+2560, sub_6910+2711
0000000000006db1         xor        rbx, qword [fs:0x28]
0000000000006dba         mov        rax, r15
0000000000006dbd         jne        loc_73c3

0000000000006dc3         add        rsp, 0xb8
0000000000006dca         pop        rbx
0000000000006dcb         pop        rbp
0000000000006dcc         pop        r12
0000000000006dce         pop        r13
0000000000006dd0         pop        r14
0000000000006dd2         pop        r15
0000000000006dd4         ret
                        ; endp
0000000000006dd5         align      8

                     loc_6dd8:
0000000000006dd8         mov        rbp, r11                                    ; CODE XREF=sub_64c0+194
0000000000006ddb         jmp        loc_6d59

                     loc_6de0:
0000000000006de0         cmp        r13, r15                                    ; CODE XREF=sub_6910+206, sub_6910+220
0000000000006de3         jbe        loc_6dea

0000000000006de5         mov        byte [r14+r15], 0x27

                     loc_6dea:
0000000000006dea         lea        rax, qword [r15+1]                          ; CODE XREF=sub_6910+1235
0000000000006dee         cmp        r13, rax
0000000000006df1         jbe        loc_6df9

0000000000006df3         mov        byte [r14+r15+1], 0x5c

                     loc_6df9:
0000000000006df9         lea        rax, qword [r15+2]                          ; CODE XREF=sub_6910+1249
0000000000006dfd         cmp        r13, rax
0000000000006e00         jbe        loc_73f2

0000000000006e06         mov        rdx, r13
0000000000006e09         mov        byte [r14+r15+2], 0x27
0000000000006e0f         mov        r13, qword [rsp+arg_48]
0000000000006e14         jmp        loc_69f2

                     loc_6e19:
0000000000006e19         mov        eax, r12d                                   ; CODE XREF=sub_67b0+99
0000000000006e1c         mov        ebx, 0x30
0000000000006e21         xor        r12d, r12d
0000000000006e24         jmp        sub_63c0+105
                        ; endp

                     loc_6e29:
0000000000006e29         mov        byte [r14+r15+2], 0x27                      ; CODE XREF=sub_67b0+67
0000000000006e2f         jmp        loc_67f9

                     loc_6e34:
0000000000006e34         test       ebx, ebx                                    ; case 4, CODE XREF=quotearg_buffer_restyled+145
0000000000006e36         jne        loc_6263

0000000000006e3c         mov        byte [rsp+0xe8+var_DB], 0x1

                     loc_6e41:
0000000000006e41         test       r13, r13                                    ; CODE XREF=sub_6910+2749
0000000000006e44         jne        loc_73da

0000000000006e4a         lea        rax, qword [aLibs+29]                       ; 0xb46d
0000000000006e51         mov        qword [rsp+0xe8+var_98], 0x0
0000000000006e5a         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000006e5f         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000006e64         xor        r12d, r12d
0000000000006e67         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000006e6c         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000006e75         mov        qword [rsp+0xe8+var_A0], rax
0000000000006e7a         mov        r15d, 0x1
0000000000006e80         mov        dword [rsp+0xe8+var_E0], 0x2
0000000000006e88         jmp        loc_62a3
0000000000006e8d         align      16

                     loc_6e90:
0000000000006e90         test       ebx, ebx                                    ; case 5, CODE XREF=quotearg_buffer_restyled+145
0000000000006e92         jne        loc_728d

0000000000006e98         test       r13, r13
0000000000006e9b         je         loc_70c6

0000000000006ea1         mov        byte [r14], 0x22
0000000000006ea5         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000006eaa         xor        r12d, r12d
0000000000006ead         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000006eb2         mov        qword [rsp+0xe8+var_98], 0x0

                     loc_6ebb:
0000000000006ebb         lea        rax, qword [aLibs+27]                       ; 0xb46b, CODE XREF=sub_6910+1996
0000000000006ec2         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000006ec7         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000006ecc         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000006ed5         mov        r15d, 0x1
0000000000006edb         mov        qword [rsp+0xe8+var_A0], rax
0000000000006ee0         jmp        loc_62a3

                     loc_6ee5:
0000000000006ee5         lea        rax, qword [aLibs+27]                       ; case 6, 0xb46b, CODE XREF=quotearg_buffer_restyled+145
0000000000006eec         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000006ef1         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000006ef6         xor        r12d, r12d
0000000000006ef9         mov        qword [rsp+0xe8+var_98], 0x0
0000000000006f02         mov        byte [rsp+0xe8+var_D9], 0x1
0000000000006f07         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000006f0c         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000006f15         xor        r15d, r15d
0000000000006f18         mov        qword [rsp+0xe8+var_A0], rax
0000000000006f1d         mov        dword [rsp+0xe8+var_E0], 0x5
0000000000006f25         jmp        loc_62a3

                     loc_6f2a:
0000000000006f2a         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 7, CODE XREF=quotearg_buffer_restyled+145
0000000000006f2f         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000006f34         xor        r12d, r12d
0000000000006f37         mov        qword [rsp+0xe8+var_98], 0x0
0000000000006f40         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000006f45         xor        r15d, r15d
0000000000006f48         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000006f4d         mov        qword [rsp+0xe8+var_D0], 0x0
0000000000006f56         mov        qword [rsp+0xe8+var_A0], 0x0
0000000000006f5f         jmp        loc_62a3

                     loc_6f64:
0000000000006f64         cmp        dword [rsp+0xe8+var_E0], 0xa                ; case 10, CODE XREF=quotearg_buffer_restyled+145
0000000000006f69         je         loc_6fc1

0000000000006f6b         lea        rsi, qword [aLibs+31]                       ; argument "msgid" for method j_dcgettext, 0xb46f
0000000000006f72         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000006f74         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000006f79         call       j_dcgettext                                 ; dcgettext
0000000000006f7e         mov        rcx, rax
0000000000006f81         mov        qword [rsp+0xe8+var_80], rax
0000000000006f86         lea        rax, qword [aLibs+31]                       ; 0xb46f
0000000000006f8d         cmp        rcx, rax
0000000000006f90         je         loc_732e

                     loc_6f96:
0000000000006f96         lea        rsi, qword [aLibs+29]                       ; argument "msgid" for method j_dcgettext, 0xb46d, CODE XREF=sub_6910+2607
0000000000006f9d         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000006f9f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000006fa4         call       j_dcgettext                                 ; dcgettext
0000000000006fa9         mov        rcx, rax
0000000000006fac         mov        qword [rsp+0xe8+var_88], rax
0000000000006fb1         lea        rax, qword [aLibs+29]                       ; 0xb46d
0000000000006fb8         cmp        rcx, rax
0000000000006fbb         je         loc_7344

                     loc_6fc1:
0000000000006fc1         xor        r15d, r15d                                  ; CODE XREF=sub_6910+1625, sub_6910+2629
0000000000006fc4         test       ebx, ebx
0000000000006fc6         je         loc_718d

                     loc_6fcc:
0000000000006fcc         test       ebx, ebx                                    ; CODE XREF=sub_6910+2183, sub_6910+2214
0000000000006fce         mov        rbx, qword [rsp+0xe8+var_88]
0000000000006fd3         setne      byte [rsp+0xe8+var_D9]
0000000000006fd8         xor        r12d, r12d
0000000000006fdb         mov        rdi, rbx                                    ; argument "__s" for method j_strlen
0000000000006fde         call       j_strlen                                    ; strlen
0000000000006fe3         mov        qword [rsp+0xe8+var_A0], rbx
0000000000006fe8         mov        qword [rsp+0xe8+var_D0], rax
0000000000006fed         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000006ff2         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000006ff7         mov        qword [rsp+0xe8+var_98], 0x0
0000000000007000         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000007005         jmp        loc_62a3

                     loc_700a:
000000000000700a         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 0, CODE XREF=quotearg_buffer_restyled+145
000000000000700f         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000007014         xor        r12d, r12d
0000000000007017         mov        qword [rsp+0xe8+var_98], 0x0
0000000000007020         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000007025         xor        r15d, r15d
0000000000007028         mov        byte [rsp+0xe8+var_DB], 0x0
000000000000702d         mov        qword [rsp+0xe8+var_D0], 0x0
0000000000007036         mov        qword [rsp+0xe8+var_A0], 0x0
000000000000703f         jmp        loc_62a3

                     loc_7044:
0000000000007044         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 3, CODE XREF=quotearg_buffer_restyled+145
0000000000007049         mov        byte [rsp+0xe8+var_6C], 0x0
000000000000704e         xor        r12d, r12d
0000000000007051         mov        qword [rsp+0xe8+var_98], 0x0
000000000000705a         mov        byte [rsp+0xe8+var_D9], 0x1
000000000000705f         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000007064         jmp        loc_6283

                     loc_7069:
0000000000007069         cmp        r13, r15                                    ; CODE XREF=sub_67b0+133
000000000000706c         jbe        loc_7073

000000000000706e         mov        byte [r14+r15], 0x30

                     loc_7073:
0000000000007073         lea        rax, qword [rcx+2]                          ; CODE XREF=sub_6910+1884
0000000000007077         cmp        r13, rax
000000000000707a         jbe        loc_7082

000000000000707c         mov        byte [r14+rcx+2], 0x30

                     loc_7082:
0000000000007082         mov        eax, r12d                                   ; CODE XREF=sub_6910+1898
0000000000007085         lea        r15, qword [rcx+3]
0000000000007089         xor        r12d, r12d
000000000000708c         mov        ebx, 0x30
0000000000007091         jmp        sub_63c0+56
                        ; endp
0000000000007096         align      32

                     loc_70a0:
00000000000070a0         movzx      ebx, byte [rsp+0xe8+var_D9]                 ; CODE XREF=sub_6910+731
00000000000070a5         mov        rbp, r11
00000000000070a8         mov        byte [rsp+0xe8+var_DB], bl
00000000000070ac         jmp        loc_6d59

                     loc_70b1:
00000000000070b1         movzx      edx, byte [rsp+0xe8+var_DB]                 ; CODE XREF=sub_66b0+105
00000000000070b6         xor        r12d, r12d
00000000000070b9         jmp        loc_6bc0

                     loc_70be:
00000000000070be         xor        r10d, r10d                                  ; CODE XREF=sub_6910+944
00000000000070c1         jmp        loc_6c7d

                     loc_70c6:
00000000000070c6         mov        qword [rsp+0xe8+var_98], 0x0                ; CODE XREF=sub_6910+1419
00000000000070cf         mov        byte [rsp+0xe8+var_DA], 0x1
00000000000070d4         xor        r12d, r12d
00000000000070d7         mov        byte [rsp+0xe8+var_6C], 0x0
00000000000070dc         jmp        loc_6ebb

                     loc_70e1:
00000000000070e1         mov        r11, qword [rsp+0xe8+var_B8]                ; CODE XREF=sub_6910+561
00000000000070e6         mov        rsi, r14
00000000000070e9         mov        rcx, r13
00000000000070ec         mov        rax, rbx
00000000000070ef         mov        rdi, rbx
00000000000070f2         movzx      r8d, byte [rsp+0xe8+var_6B]
00000000000070f8         movzx      ebx, byte [rsp+0xe8+var_6A]
00000000000070fd         mov        r9, qword [rsp+0xe8+var_60]
0000000000007105         cmp        rsi, r11
0000000000007108         movzx      r10d, byte [rsp+0xe8+var_69]
000000000000710e         mov        r15, qword [rsp+0xe8+var_68]
0000000000007116         mov        r14, qword [rsp+0xe8+var_A8]
000000000000711b         mov        r13, qword [rsp+0xe8+var_78]
0000000000007120         jae        loc_7148

0000000000007122         cmp        byte [rcx], 0x0
0000000000007125         jne        loc_7137

0000000000007127         jmp        loc_7148
0000000000007129         align      16

                     loc_7130:
0000000000007130         cmp        byte [r9+rax], 0x0                          ; CODE XREF=sub_6910+2099
0000000000007135         je         loc_7145

                     loc_7137:
0000000000007137         add        rax, 0x1                                    ; CODE XREF=sub_6910+2069
000000000000713b         lea        rdx, qword [rbp+rax]
0000000000007140         cmp        r11, rdx
0000000000007143         ja         loc_7130

                     loc_7145:
0000000000007145         mov        rdi, rax                                    ; CODE XREF=sub_6910+2085

                     loc_7148:
0000000000007148         movzx      edx, byte [rsp+0xe8+var_DB]                 ; CODE XREF=sub_6910+2064, sub_6910+2071
000000000000714d         xor        r12d, r12d
0000000000007150         jmp        loc_6bb6

                     loc_7155:
0000000000007155         mov        rdi, rbx                                    ; CODE XREF=sub_6910+551
0000000000007158         movzx      r8d, byte [rsp+0xe8+var_6B]
000000000000715e         movzx      ebx, byte [rsp+0xe8+var_6A]
0000000000007163         movzx      r10d, byte [rsp+0xe8+var_69]
0000000000007169         mov        r15, qword [rsp+0xe8+var_68]
0000000000007171         xor        r12d, r12d
0000000000007174         mov        r14, qword [rsp+0xe8+var_A8]
0000000000007179         mov        r13, qword [rsp+0xe8+var_78]
000000000000717e         mov        r11, qword [rsp+0xe8+var_B8]
0000000000007183         movzx      edx, byte [rsp+0xe8+var_DB]
0000000000007188         jmp        loc_6bb6

                     loc_718d:
000000000000718d         mov        rdx, qword [rsp+0xe8+var_80]                ; CODE XREF=sub_6910+1718
0000000000007192         movzx      eax, byte [rdx]
0000000000007195         test       al, al
0000000000007197         je         loc_6fcc

000000000000719d         nop        dword [rax]

                     loc_71a0:
00000000000071a0         cmp        r13, r15                                    ; CODE XREF=sub_6910+2212
00000000000071a3         jbe        loc_71a9

00000000000071a5         mov        byte [r14+r15], al

                     loc_71a9:
00000000000071a9         add        r15, 0x1                                    ; CODE XREF=sub_6910+2195
00000000000071ad         movzx      eax, byte [rdx+r15]
00000000000071b2         test       al, al
00000000000071b4         jne        loc_71a0

00000000000071b6         jmp        loc_6fcc

                     loc_71bb:
00000000000071bb         mov        eax, edx                                    ; CODE XREF=sub_6910+682
00000000000071bd         jmp        loc_6717

                     loc_71c2:
00000000000071c2         movzx      ebx, byte [rax+rcx]                         ; CODE XREF=sub_6910+290
00000000000071c6         cmp        bl, 0x3e
00000000000071c9         ja         loc_6a40

00000000000071cf         movabs     rax, 0x7000a38200000000
00000000000071d9         bt         rax, rbx
00000000000071dd         jae        loc_6a40

00000000000071e3         cmp        byte [rsp+arg_7], 0x0
00000000000071e8         jne        loc_73d2

00000000000071ee         cmp        r13, r15
00000000000071f1         jbe        loc_71f8

00000000000071f3         mov        byte [r14+r15], 0x3f

                     loc_71f8:
00000000000071f8         lea        rax, qword [r15+1]                          ; CODE XREF=sub_6910+2273
00000000000071fc         cmp        r13, rax
00000000000071ff         jbe        loc_7207

0000000000007201         mov        byte [r14+r15+1], 0x22

                     loc_7207:
0000000000007207         lea        rax, qword [r15+2]                          ; CODE XREF=sub_6910+2287
000000000000720b         cmp        r13, rax
000000000000720e         jbe        loc_7216

0000000000007210         mov        byte [r14+r15+2], 0x22

                     loc_7216:
0000000000007216         lea        rax, qword [r15+3]                          ; CODE XREF=sub_6910+2302
000000000000721a         cmp        r13, rax
000000000000721d         jbe        loc_7225

000000000000721f         mov        byte [r14+r15+3], 0x3f

                     loc_7225:
0000000000007225         add        r15, 0x4                                    ; CODE XREF=sub_6910+2317
0000000000007229         xor        edx, edx
000000000000722b         xor        r12d, r12d
000000000000722e         xor        eax, eax
0000000000007230         mov        rbp, rcx
0000000000007233         jmp        sub_63c0+56
                        ; endp

                     loc_7238:
0000000000007238         test       ebx, ebx                                    ; case 2, CODE XREF=quotearg_buffer_restyled+145
000000000000723a         je         loc_73c8

0000000000007240         lea        rax, qword [aLibs+29]                       ; 0xb46d
0000000000007247         mov        byte [rsp+0xe8+var_DA], 0x1
000000000000724c         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000007251         xor        r12d, r12d
0000000000007254         mov        qword [rsp+0xe8+var_98], 0x0
000000000000725d         mov        byte [rsp+0xe8+var_D9], 0x1
0000000000007262         mov        byte [rsp+0xe8+var_DB], 0x0
0000000000007267         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000007270         xor        r15d, r15d
0000000000007273         mov        qword [rsp+0xe8+var_A0], rax
0000000000007278         jmp        loc_62a3
000000000000727d         align      128

                     loc_7280:
0000000000007280         mov        rbp, r11                                    ; CODE XREF=sub_6910+333
0000000000007283         movzx      eax, byte [rsp+arg_7]
0000000000007288         jmp        sub_6910+1097
                        ; endp

                     loc_728d:
000000000000728d         lea        rax, qword [aLibs+27]                       ; 0xb46b, CODE XREF=sub_6910+1410
0000000000007294         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000007299         mov        byte [rsp+0xe8+var_6C], 0x0
000000000000729e         xor        r12d, r12d
00000000000072a1         mov        qword [rsp+0xe8+var_98], 0x0
00000000000072aa         mov        byte [rsp+0xe8+var_D9], 0x1
00000000000072af         mov        byte [rsp+0xe8+var_DB], 0x1
00000000000072b4         mov        qword [rsp+0xe8+var_D0], 0x1
00000000000072bd         xor        r15d, r15d
00000000000072c0         mov        qword [rsp+0xe8+var_A0], rax
00000000000072c5         jmp        loc_62a3

                     loc_72ca:
00000000000072ca         mov        eax, edx                                    ; CODE XREF=sub_6910+87

                     loc_72cc:
00000000000072cc         mov        rbx, qword [rsp+0xe8+var_A0]                ; CODE XREF=sub_6910+76, sub_6910+2721
00000000000072d1         test       rbx, rbx
00000000000072d4         je         loc_7302

00000000000072d6         test       al, al
00000000000072d8         je         loc_7302

00000000000072da         movzx      ecx, byte [rbx]
00000000000072dd         mov        rax, rbx
00000000000072e0         test       cl, cl
00000000000072e2         je         loc_7302

00000000000072e4         mov        rdx, r15
00000000000072e7         sub        rax, r15

                     loc_72ea:
00000000000072ea         cmp        r13, rdx                                    ; CODE XREF=sub_6910+2541
00000000000072ed         jbe        loc_72f3

00000000000072ef         mov        byte [r14+rdx], cl

                     loc_72f3:
00000000000072f3         add        rdx, 0x1                                    ; CODE XREF=sub_6910+2525
00000000000072f7         movzx      ecx, byte [rax+rdx]
00000000000072fb         test       cl, cl
00000000000072fd         jne        loc_72ea

00000000000072ff         mov        r15, rdx

                     loc_7302:
0000000000007302         cmp        r13, r15                                    ; CODE XREF=sub_6910+2500, sub_6910+2504, sub_6910+2514
0000000000007305         jbe        loc_6da9

000000000000730b         mov        byte [r14+r15], 0x0
0000000000007310         jmp        loc_6da9

                     loc_7315:
0000000000007315         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=quotearg_buffer_restyled+450
000000000000731a         movzx      ebx, byte [rsp+0xe8+var_D9]
000000000000731f         mov        rbp, r11
0000000000007322         sete       al
0000000000007325         mov        byte [rsp+0xe8+var_DB], bl                  ; DATA XREF=process_field+4021
0000000000007329         jmp        loc_6d59

                     loc_732e:
000000000000732e         mov        esi, dword [rsp+0xe8+var_E0]                ; CODE XREF=sub_6910+1664
0000000000007332         mov        rdi, rcx
0000000000007335         call       gettext_quote.part.1                        ; gettext_quote.part.1
000000000000733a         mov        qword [rsp+0xe8+var_80], rax
000000000000733f         jmp        loc_6f96

                     loc_7344:
0000000000007344         mov        esi, dword [rsp+0xe8+var_E0]                ; CODE XREF=sub_6910+1707
0000000000007348         mov        rdi, rcx
000000000000734b         call       gettext_quote.part.1                        ; gettext_quote.part.1
0000000000007350         mov        qword [rsp+0xe8+var_88], rax
0000000000007355         jmp        loc_6fc1

                     loc_735a:
000000000000735a         movzx      ebx, byte [rsp+arg_7]                       ; CODE XREF=sub_67b0+16
000000000000735f         mov        rbp, r11
0000000000007362         mov        eax, edx
0000000000007364         mov        byte [rsp+arg_5], bl
0000000000007368         jmp        sub_6910+1097
                        ; endp

                     loc_736d:
000000000000736d         sub        rsp, 0x8                                    ; CODE XREF=sub_6910+98
0000000000007371         mov        r8d, 0x5
0000000000007377         mov        rcx, r11
000000000000737a         push       qword [rsp+0xf0+var_88]
000000000000737e         push       qword [rsp+0xf8+var_80]
0000000000007382         mov        rdi, r14
0000000000007385         push       qword [rsp+0x100+var_C8]
0000000000007389         mov        r9d, dword [rsp+0x108+var_70]
0000000000007391         mov        rdx, qword [rsp+0x108+var_D8]
0000000000007396         mov        rsi, qword [rsp+0x108+var_98]
000000000000739b         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
00000000000073a0         add        rsp, 0x20
00000000000073a4         mov        r15, rax
00000000000073a7         jmp        loc_6da9

                     loc_73ac:
00000000000073ac         movzx      eax, byte [rsp+0xe8+var_6C]                 ; CODE XREF=sub_6910+121
00000000000073b1         jmp        loc_72cc

                     loc_73b6:
00000000000073b6         mov        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_6910+63
00000000000073be         jmp        loc_6d59

                     loc_73c3:
00000000000073c3         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=sub_6910+1197
                        ; endp

                     loc_73c8:
00000000000073c8         mov        byte [rsp+0xe8+var_DB], 0x0                 ; CODE XREF=sub_6910+2346
00000000000073cd         jmp        loc_6e41

                     loc_73d2:
00000000000073d2         mov        rbp, r11                                    ; CODE XREF=sub_6910+2264
00000000000073d5         jmp        sub_6910+1120
                        ; endp

                     loc_73da:
00000000000073da         mov        byte [rsp+0xe8+var_DA], 0x1                 ; CODE XREF=sub_6910+1332
00000000000073df         xor        eax, eax
00000000000073e1         xor        r12d, r12d
00000000000073e4         mov        qword [rsp+0xe8+var_98], 0x0
00000000000073ed         jmp        loc_6994

                     loc_73f2:
00000000000073f2         mov        rdx, r13                                    ; CODE XREF=sub_6910+1264
00000000000073f5         mov        r13, qword [rsp+arg_48]
00000000000073fa         jmp        loc_69f2

                     loc_73ff:
00000000000073ff         call       j_abort                                     ; abort, CODE XREF=quotearg_buffer_restyled+122
                        ; endp
0000000000007404         align      16                                          ; End of unwind block (FDE at 0xc830)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_3C: int32_t, -60
        ;    var_40: int32_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80


                     quotearg_n_options:
0000000000007410         push       r15                                         ; Begin of unwind block (FDE at 0xc8a8), CODE XREF=quotearg_n+14, quotearg_n_mem+7, quotearg+19, quotearg_mem+15, quotearg_n_style+106, quotearg_n_style_mem+102, quotearg_char_mem+121, quotearg_n_style_colon+106, quotearg_n_custom_mem+109, quote_n_mem+7, quote_mem+15
0000000000007412         push       r14
0000000000007414         movsxd     r15, edi
0000000000007417         push       r13
0000000000007419         push       r12
000000000000741b         mov        r14, rdx
000000000000741e         push       rbp
000000000000741f         push       rbx
0000000000007420         mov        rbp, rcx
0000000000007423         sub        rsp, 0x28
0000000000007427         mov        qword [rsp+0x58+var_50], rsi
000000000000742c         call       j___errno_location                          ; __errno_location
0000000000007431         mov        r13, rax
0000000000007434         mov        eax, dword [rax]
0000000000007436         test       r15d, r15d
0000000000007439         mov        rbx, qword [slotvec]                        ; slotvec
0000000000007440         mov        dword [rsp+0x58+var_40], eax
0000000000007444         js         loc_75b1

000000000000744a         cmp        dword [nslots], r15d                        ; nslots
0000000000007451         jg         loc_74b5

0000000000007453         cmp        r15d, 0x7fffffff
000000000000745a         je         loc_75b6

0000000000007460         lea        r12d, dword [r15+1]
0000000000007464         lea        rax, qword [slotvec0]                       ; slotvec0
000000000000746b         movsxd     rsi, r12d
000000000000746e         shl        rsi, 0x4
0000000000007472         cmp        rbx, rax
0000000000007475         je         loc_7590

000000000000747b         mov        rdi, rbx                                    ; argument #1 for method xrealloc
000000000000747e         call       xrealloc                                    ; xrealloc
0000000000007483         mov        rbx, rax
0000000000007486         mov        qword [slotvec], rax                        ; slotvec

                     loc_748d:
000000000000748d         movsxd     rdi, dword [nslots]                         ; nslots, CODE XREF=quotearg_n_options+412
0000000000007494         mov        edx, r12d
0000000000007497         xor        esi, esi                                    ; argument "__c" for method j_memset
0000000000007499         sub        edx, edi
000000000000749b         shl        rdi, 0x4
000000000000749f         movsxd     rdx, edx
00000000000074a2         add        rdi, rbx                                    ; argument "__s" for method j_memset
00000000000074a5         shl        rdx, 0x4                                    ; argument "__n" for method j_memset
00000000000074a9         call       j_memset                                    ; memset
00000000000074ae         mov        dword [nslots], r12d                        ; nslots

                     loc_74b5:
00000000000074b5         mov        eax, dword [rbp+4]                          ; CODE XREF=quotearg_n_options+65
00000000000074b8         shl        r15, 0x4
00000000000074bc         sub        rsp, 0x8
00000000000074c0         add        rbx, r15
00000000000074c3         lea        r15, qword [rbp+8]
00000000000074c7         mov        r8d, dword [rbp]                            ; argument #5 for method quotearg_buffer_restyled
00000000000074cb         mov        r11, qword [rbx]
00000000000074ce         mov        r12, qword [rbx+8]
00000000000074d2         mov        rcx, r14                                    ; argument #4 for method quotearg_buffer_restyled
00000000000074d5         or         eax, 0x1
00000000000074d8         mov        dword [rsp+0x60+var_3C], eax
00000000000074dc         push       qword [rbp+0x30]                            ; argument #9 for method quotearg_buffer_restyled
00000000000074df         mov        r9d, eax                                    ; argument #6 for method quotearg_buffer_restyled
00000000000074e2         push       qword [rbp+0x28]                            ; argument #8 for method quotearg_buffer_restyled
00000000000074e5         push       r15                                         ; argument #7 for method quotearg_buffer_restyled
00000000000074e7         mov        rsi, r11                                    ; argument #2 for method quotearg_buffer_restyled
00000000000074ea         mov        rdx, qword [rsp+0x78+var_50]                ; argument #3 for method quotearg_buffer_restyled
00000000000074ef         mov        rdi, r12                                    ; argument #1 for method quotearg_buffer_restyled
00000000000074f2         mov        qword [rsp+0x78+var_48], r11
00000000000074f7         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
00000000000074fc         add        rsp, 0x20
0000000000007500         mov        r11, qword [rsp+0x58+var_48]
0000000000007505         cmp        r11, rax
0000000000007508         ja         loc_7571

000000000000750a         lea        rsi, qword [rax+1]
000000000000750e         lea        rax, qword [slot0]                          ; slot0
0000000000007515         cmp        r12, rax
0000000000007518         mov        qword [rbx], rsi
000000000000751b         je         loc_752f

000000000000751d         mov        rdi, r12                                    ; argument "__ptr" for method j_free
0000000000007520         mov        qword [rsp+0x58+var_48], rsi
0000000000007525         call       j_free                                      ; free
000000000000752a         mov        rsi, qword [rsp+0x58+var_48]

                     loc_752f:
000000000000752f         mov        rdi, rsi                                    ; CODE XREF=quotearg_n_options+267
0000000000007532         mov        qword [rsp+0x58+var_48], rsi
0000000000007537         call       xmalloc                                     ; xmalloc
000000000000753c         sub        rsp, 0x8
0000000000007540         mov        qword [rbx+8], rax
0000000000007544         mov        r8d, dword [rbp]                            ; argument #5 for method quotearg_buffer_restyled
0000000000007548         push       qword [rbp+0x30]                            ; argument #9 for method quotearg_buffer_restyled
000000000000754b         push       qword [rbp+0x28]                            ; argument #8 for method quotearg_buffer_restyled
000000000000754e         mov        rcx, r14                                    ; argument #4 for method quotearg_buffer_restyled
0000000000007551         push       r15                                         ; argument #7 for method quotearg_buffer_restyled
0000000000007553         mov        r9d, dword [rsp+0x78+var_3C]                ; argument #6 for method quotearg_buffer_restyled
0000000000007558         mov        rdi, rax                                    ; argument #1 for method quotearg_buffer_restyled
000000000000755b         mov        rdx, qword [rsp+0x78+var_50]                ; argument #3 for method quotearg_buffer_restyled
0000000000007560         mov        rsi, qword [rsp+0x78+var_48]                ; argument #2 for method quotearg_buffer_restyled
0000000000007565         mov        r12, rax
0000000000007568         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
000000000000756d         add        rsp, 0x20

                     loc_7571:
0000000000007571         mov        eax, dword [rsp+0x58+var_40]                ; CODE XREF=quotearg_n_options+248
0000000000007575         mov        dword [r13], eax
0000000000007579         add        rsp, 0x28
000000000000757d         mov        rax, r12
0000000000007580         pop        rbx
0000000000007581         pop        rbp
0000000000007582         pop        r12
0000000000007584         pop        r13
0000000000007586         pop        r14
0000000000007588         pop        r15
000000000000758a         ret
                        ; endp
000000000000758b         align      16

                     loc_7590:
0000000000007590         xor        edi, edi                                    ; argument #1 for method xrealloc, CODE XREF=quotearg_n_options+101
0000000000007592         call       xrealloc                                    ; xrealloc
0000000000007597         movdqa     xmm0, xmmword [slotvec0]                    ; slotvec0
000000000000759f         mov        rbx, rax
00000000000075a2         mov        qword [slotvec], rax                        ; slotvec
00000000000075a9         movups     xmmword [rax], xmm0
00000000000075ac         jmp        loc_748d

                     loc_75b1:
00000000000075b1         call       j_abort                                     ; abort, CODE XREF=quotearg_n_options+52
                        ; endp

                     loc_75b6:
00000000000075b6         call       xalloc_die                                  ; xalloc_die, CODE XREF=quotearg_n_options+74
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_75bb:
00000000000075bb         nop        dword [rax+rax]                             ; End of unwind block (FDE at 0xc8a8)
                     clone_quoting_options:
00000000000075c0         push       r12                                         ; Begin of unwind block (FDE at 0xc914)
00000000000075c2         push       rbp
00000000000075c3         push       rbx
00000000000075c4         mov        rbx, rdi
00000000000075c7         call       j___errno_location                          ; __errno_location
00000000000075cc         mov        r12d, dword [rax]
00000000000075cf         mov        rbp, rax
00000000000075d2         lea        rax, qword [default_quoting_options]        ; default_quoting_options
00000000000075d9         test       rbx, rbx
00000000000075dc         mov        esi, 0x38
00000000000075e1         cmove      rbx, rax
00000000000075e5         mov        rdi, rbx
00000000000075e8         call       xmemdup                                     ; xmemdup
00000000000075ed         mov        dword [rbp], r12d
00000000000075f1         pop        rbx
00000000000075f2         pop        rbp
00000000000075f3         pop        r12
00000000000075f5         ret
                        ; endp
00000000000075f6         align      512                                         ; End of unwind block (FDE at 0xc914)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     get_quoting_style:
0000000000007600         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xc940), default_quoting_options
0000000000007607         test       rdi, rdi
000000000000760a         cmove      rdi, rax
000000000000760e         mov        eax, dword [rdi]
0000000000007610         ret
                        ; endp
0000000000007611         align      32                                          ; End of unwind block (FDE at 0xc940)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_quoting_style:
0000000000007620         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xc954), default_quoting_options
0000000000007627         test       rdi, rdi
000000000000762a         cmove      rdi, rax
000000000000762e         mov        dword [rdi], esi
0000000000007630         ret
                        ; endp
0000000000007631         align      64                                          ; End of unwind block (FDE at 0xc954)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_char_quoting:
0000000000007640         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xc968), default_quoting_options
0000000000007647         test       rdi, rdi
000000000000764a         mov        ecx, esi
000000000000764c         cmove      rdi, rax
0000000000007650         mov        eax, esi
0000000000007652         and        ecx, 0x1f
0000000000007655         shr        al, 0x5
0000000000007658         movzx      eax, al
000000000000765b         lea        rdi, qword [rdi+rax*4+8]
0000000000007660         mov        esi, dword [rdi]
0000000000007662         mov        eax, esi
0000000000007664         shr        eax, cl
0000000000007666         xor        edx, eax
0000000000007668         and        eax, 0x1
000000000000766b         and        edx, 0x1
000000000000766e         shl        edx, cl
0000000000007670         xor        edx, esi
0000000000007672         mov        dword [rdi], edx
0000000000007674         ret
                        ; endp
0000000000007675         align      128                                         ; End of unwind block (FDE at 0xc968)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_quoting_flags:
0000000000007680         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xc97c), default_quoting_options
0000000000007687         test       rdi, rdi
000000000000768a         cmove      rdi, rax
000000000000768e         mov        eax, dword [rdi+4]
0000000000007691         mov        dword [rdi+4], esi
0000000000007694         ret
                        ; endp
0000000000007695         align      32                                          ; End of unwind block (FDE at 0xc97c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_custom_quoting:
00000000000076a0         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xc990), default_quoting_options
00000000000076a7         test       rdi, rdi
00000000000076aa         cmove      rdi, rax
00000000000076ae         test       rsi, rsi
00000000000076b1         mov        dword [rdi], 0xa
00000000000076b7         je         loc_76c7

00000000000076b9         test       rdx, rdx
00000000000076bc         je         loc_76c7

00000000000076be         mov        qword [rdi+0x28], rsi
00000000000076c2         mov        qword [rdi+0x30], rdx
00000000000076c6         ret
                        ; endp

                     loc_76c7:
00000000000076c7         sub        rsp, 0x8                                    ; CODE XREF=set_custom_quoting+23, set_custom_quoting+28
00000000000076cb         call       j_abort                                     ; abort
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64


                     quotearg_buffer:
00000000000076d0         push       r15                                         ; End of unwind block (FDE at 0xc990), Begin of unwind block (FDE at 0xc9a4)
00000000000076d2         push       r14
00000000000076d4         lea        rax, qword [default_quoting_options]        ; default_quoting_options
00000000000076db         push       r13
00000000000076dd         push       r12
00000000000076df         mov        r13, rdi
00000000000076e2         push       rbp
00000000000076e3         push       rbx
00000000000076e4         mov        rbx, r8
00000000000076e7         mov        r14, rsi
00000000000076ea         mov        r15, rdx
00000000000076ed         sub        rsp, 0x18
00000000000076f1         test       r8, r8
00000000000076f4         cmove      rbx, rax
00000000000076f8         mov        qword [rsp+0x48+var_40], rcx
00000000000076fd         call       j___errno_location                          ; __errno_location
0000000000007702         mov        r12d, dword [rax]
0000000000007705         mov        rbp, rax
0000000000007708         lea        rax, qword [rbx+8]
000000000000770c         sub        rsp, 0x8
0000000000007710         mov        r9d, dword [rbx+4]
0000000000007714         push       qword [rbx+0x30]
0000000000007717         mov        r8d, dword [rbx]
000000000000771a         push       qword [rbx+0x28]
000000000000771d         mov        rdx, r15
0000000000007720         push       rax
0000000000007721         mov        rcx, qword [rsp+0x68+var_40]
0000000000007726         mov        rsi, r14
0000000000007729         mov        rdi, r13
000000000000772c         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000007731         mov        dword [rbp], r12d
0000000000007735         add        rsp, 0x38
0000000000007739         pop        rbx
000000000000773a         pop        rbp
000000000000773b         pop        r12
000000000000773d         pop        r13
000000000000773f         pop        r14
0000000000007741         pop        r15
0000000000007743         ret
                        ; endp
0000000000007744         align      16                                          ; End of unwind block (FDE at 0xc9a4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_5C: int32_t, -92


                     quotearg_alloc_mem:
0000000000007750         push       r15                                         ; Begin of unwind block (FDE at 0xc9f8), CODE XREF=quotearg_alloc+5
0000000000007752         push       r14
0000000000007754         lea        rax, qword [default_quoting_options]        ; default_quoting_options
000000000000775b         push       r13
000000000000775d         push       r12
000000000000775f         mov        r12, rdx
0000000000007762         push       rbp
0000000000007763         push       rbx
0000000000007764         mov        rbx, rcx
0000000000007767         mov        r14, rdi
000000000000776a         mov        r15, rsi
000000000000776d         sub        rsp, 0x38
0000000000007771         test       rcx, rcx
0000000000007774         cmove      rbx, rax
0000000000007778         xor        ebp, ebp
000000000000777a         call       j___errno_location                          ; __errno_location
000000000000777f         test       r12, r12
0000000000007782         mov        r13, rax
0000000000007785         mov        eax, dword [rax]
0000000000007787         sete       bpl
000000000000778b         or         ebp, dword [rbx+4]
000000000000778e         lea        r10, qword [rbx+8]
0000000000007792         sub        rsp, 0x8
0000000000007796         mov        r8d, dword [rbx]
0000000000007799         mov        rcx, r15
000000000000779c         mov        dword [rsp+0x70+var_5C], eax
00000000000077a0         push       qword [rbx+0x30]
00000000000077a3         mov        rdx, r14
00000000000077a6         push       qword [rbx+0x28]
00000000000077a9         push       r10
00000000000077ab         xor        esi, esi
00000000000077ad         mov        r9d, ebp
00000000000077b0         xor        edi, edi
00000000000077b2         mov        qword [rsp+0x88+var_48], r10
00000000000077b7         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
00000000000077bc         lea        rsi, qword [rax+1]
00000000000077c0         mov        qword [rsp+0x88+var_40], rax
00000000000077c5         add        rsp, 0x20
00000000000077c9         mov        rdi, rsi
00000000000077cc         mov        qword [rsp+0x68+var_50], rsi
00000000000077d1         call       xmalloc                                     ; xmalloc
00000000000077d6         mov        qword [rsp+0x68+var_58], rax
00000000000077db         sub        rsp, 0x8
00000000000077df         push       qword [rbx+0x30]
00000000000077e2         push       qword [rbx+0x28]
00000000000077e5         mov        r10, qword [rsp+0x80+var_48]
00000000000077ea         mov        r9d, ebp
00000000000077ed         mov        r8d, dword [rbx]
00000000000077f0         mov        rcx, r15
00000000000077f3         mov        rdx, r14
00000000000077f6         mov        rdi, rax
00000000000077f9         push       r10
00000000000077fb         mov        rsi, qword [rsp+0x88+var_50]
0000000000007800         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000007805         mov        eax, dword [rsp+0x88+var_5C]
0000000000007809         add        rsp, 0x20
000000000000780d         test       r12, r12
0000000000007810         mov        dword [r13], eax
0000000000007814         je         loc_781f

0000000000007816         mov        r11, qword [rsp+0x68+var_40]
000000000000781b         mov        qword [r12], r11

                     loc_781f:
000000000000781f         mov        rax, qword [rsp+0x68+var_58]                ; CODE XREF=quotearg_alloc_mem+196
0000000000007824         add        rsp, 0x38
0000000000007828         pop        rbx
0000000000007829         pop        rbp
000000000000782a         pop        r12
000000000000782c         pop        r13
000000000000782e         pop        r14
0000000000007830         pop        r15
0000000000007832         ret
                        ; endp
0000000000007833         align      64                                          ; End of unwind block (FDE at 0xc9f8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_alloc:
0000000000007840         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0xca64)
0000000000007843         xor        edx, edx
0000000000007845         jmp        quotearg_alloc_mem                          ; quotearg_alloc_mem
                        ; endp
000000000000784a         align      16                                          ; End of unwind block (FDE at 0xca64)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_free:
0000000000007850         mov        eax, dword [nslots]                         ; Begin of unwind block (FDE at 0xca78), nslots
0000000000007856         push       r12
0000000000007858         mov        r12, qword [slotvec]                        ; slotvec
000000000000785f         push       rbp
0000000000007860         push       rbx
0000000000007861         cmp        eax, 0x1
0000000000007864         jle        loc_7891

0000000000007866         sub        eax, 0x2
0000000000007869         lea        rbx, qword [r12+0x18]
000000000000786e         shl        rax, 0x4
0000000000007872         lea        rbp, qword [r12+rax+0x28]
0000000000007877         nop        word [rax+rax]

                     loc_7880:
0000000000007880         mov        rdi, qword [rbx]                            ; argument "__ptr" for method j_free, CODE XREF=quotearg_free+63
0000000000007883         add        rbx, 0x10
0000000000007887         call       j_free                                      ; free
000000000000788c         cmp        rbx, rbp
000000000000788f         jne        loc_7880

                     loc_7891:
0000000000007891         mov        rdi, qword [r12+8]                          ; CODE XREF=quotearg_free+20
0000000000007896         lea        rbx, qword [slot0]                          ; slot0
000000000000789d         cmp        rdi, rbx
00000000000078a0         je         loc_78b9

00000000000078a2         call       j_free                                      ; free
00000000000078a7         mov        qword [slotvec0], 0x100                     ; slotvec0
00000000000078b2         mov        qword [slotvec0+8], rbx                     ; 0x20e0b8

                     loc_78b9:
00000000000078b9         lea        rbx, qword [slotvec0]                       ; slotvec0, CODE XREF=quotearg_free+80
00000000000078c0         cmp        r12, rbx
00000000000078c3         je         loc_78d4

00000000000078c5         mov        rdi, r12                                    ; argument "__ptr" for method j_free
00000000000078c8         call       j_free                                      ; free
00000000000078cd         mov        qword [slotvec], rbx                        ; slotvec

                     loc_78d4:
00000000000078d4         pop        rbx                                         ; CODE XREF=quotearg_free+115
00000000000078d5         mov        dword [nslots], 0x1                         ; nslots
00000000000078df         pop        rbp
00000000000078e0         pop        r12
00000000000078e2         ret
                        ; endp
00000000000078e3         align      16                                          ; End of unwind block (FDE at 0xca78)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_n:
00000000000078f0         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xcaa4), default_quoting_options
00000000000078f7         mov        rdx, 0xffffffffffffffff
00000000000078fe         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000007903         align      16                                          ; End of unwind block (FDE at 0xcaa4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_n_mem:
0000000000007910         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xcab8), default_quoting_options
0000000000007917         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
000000000000791c         align      32                                          ; End of unwind block (FDE at 0xcab8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg:
0000000000007920         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xcacc), default_quoting_options
0000000000007927         mov        rsi, rdi
000000000000792a         mov        rdx, 0xffffffffffffffff
0000000000007931         xor        edi, edi
0000000000007933         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000007938         align      64                                          ; End of unwind block (FDE at 0xcacc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_mem:
0000000000007940         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xcae0), default_quoting_options
0000000000007947         mov        rdx, rsi
000000000000794a         mov        rsi, rdi
000000000000794d         xor        edi, edi
000000000000794f         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000007954         align      32                                          ; End of unwind block (FDE at 0xcae0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_n_style:
0000000000007960         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0xcaf4), CODE XREF=argmatch_invalid+64
0000000000007964         mov        rax, rdx
0000000000007967         mov        rdx, qword [fs:0x28]
0000000000007970         mov        qword [rsp+0x48+var_10], rdx
0000000000007975         xor        edx, edx
0000000000007977         cmp        esi, 0xa
000000000000797a         je         loc_79e4

000000000000797c         mov        dword [rsp+0x48+var_48], esi
000000000000797f         mov        rcx, rsp
0000000000007982         mov        rdx, 0xffffffffffffffff
0000000000007989         mov        rsi, rax
000000000000798c         mov        qword [rsp+0x48+var_44], 0x0
0000000000007995         mov        qword [rsp+0x48+var_3C], 0x0
000000000000799e         mov        qword [rsp+0x48+var_34], 0x0
00000000000079a7         mov        qword [rsp+0x48+var_2C], 0x0
00000000000079b0         mov        qword [rsp+0x48+var_24], 0x0
00000000000079b9         mov        qword [rsp+0x48+var_1C], 0x0
00000000000079c2         mov        dword [rsp+0x48+var_14], 0x0
00000000000079ca         call       quotearg_n_options                          ; quotearg_n_options
00000000000079cf         mov        rcx, qword [rsp+0x48+var_10]
00000000000079d4         xor        rcx, qword [fs:0x28]
00000000000079dd         jne        loc_79e9

00000000000079df         add        rsp, 0x48
00000000000079e3         ret
                        ; endp

                     loc_79e4:
00000000000079e4         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style+26
                        ; endp

                     loc_79e9:
00000000000079e9         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style+125
                        ; endp
00000000000079ee         align      16                                          ; End of unwind block (FDE at 0xcaf4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_n_style_mem:
00000000000079f0         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0xcb10), CODE XREF=quotearg_style_mem+10
00000000000079f4         mov        rax, rdx
00000000000079f7         mov        rdx, rcx
00000000000079fa         mov        rcx, qword [fs:0x28]
0000000000007a03         mov        qword [rsp+0x48+var_10], rcx
0000000000007a08         xor        ecx, ecx
0000000000007a0a         cmp        esi, 0xa
0000000000007a0d         je         loc_7a70

0000000000007a0f         mov        dword [rsp+0x48+var_48], esi
0000000000007a12         mov        rcx, rsp
0000000000007a15         mov        rsi, rax
0000000000007a18         mov        qword [rsp+0x48+var_44], 0x0
0000000000007a21         mov        qword [rsp+0x48+var_3C], 0x0
0000000000007a2a         mov        qword [rsp+0x48+var_34], 0x0
0000000000007a33         mov        qword [rsp+0x48+var_2C], 0x0
0000000000007a3c         mov        qword [rsp+0x48+var_24], 0x0
0000000000007a45         mov        qword [rsp+0x48+var_1C], 0x0
0000000000007a4e         mov        dword [rsp+0x48+var_14], 0x0
0000000000007a56         call       quotearg_n_options                          ; quotearg_n_options
0000000000007a5b         mov        rdx, qword [rsp+0x48+var_10]
0000000000007a60         xor        rdx, qword [fs:0x28]
0000000000007a69         jne        loc_7a75

0000000000007a6b         add        rsp, 0x48
0000000000007a6f         ret
                        ; endp

                     loc_7a70:
0000000000007a70         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style_mem+29
                        ; endp

                     loc_7a75:
0000000000007a75         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style_mem+121
                        ; endp
0000000000007a7a         align      128                                         ; End of unwind block (FDE at 0xcb10)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_style:
0000000000007a80         mov        rdx, rsi                                    ; Begin of unwind block (FDE at 0xcb2c)
0000000000007a83         mov        esi, edi
0000000000007a85         xor        edi, edi
0000000000007a87         jmp        quotearg_n_style                            ; quotearg_n_style
                        ; endp
0000000000007a8c         align      16                                          ; End of unwind block (FDE at 0xcb2c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_style_mem:
0000000000007a90         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0xcb40)
0000000000007a93         mov        rdx, rsi
0000000000007a96         mov        esi, edi
0000000000007a98         xor        edi, edi
0000000000007a9a         jmp        quotearg_n_style_mem                        ; quotearg_n_style_mem
                        ; endp
0000000000007a9f         align      32                                          ; End of unwind block (FDE at 0xcb40)

                     quotearg_char_mem:
0000000000007aa0         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0xcb54), CODE XREF=quotearg_char+11
0000000000007aa4         mov        ecx, edx
0000000000007aa6         mov        rax, qword [fs:0x28]
0000000000007aaf         mov        qword [rsp+0x48+var_10], rax
0000000000007ab4         xor        eax, eax
0000000000007ab6         mov        rax, qword [qword_20e2f0]                   ; qword_20e2f0
0000000000007abd         mov        r8, rsp
0000000000007ac0         and        ecx, 0x1f
0000000000007ac3         movdqa     xmm0, xmmword [default_quoting_options]     ; default_quoting_options
0000000000007acb         mov        qword [rsp+0x48+var_18], rax
0000000000007ad0         mov        eax, edx
0000000000007ad2         movaps     xmmword [rsp+0x48+var_48], xmm0
0000000000007ad6         shr        al, 0x5
0000000000007ad9         movzx      eax, al
0000000000007adc         lea        r9, qword [r8+rax*4+8]
0000000000007ae1         movdqa     xmm0, xmmword [default_quoting_options+16]  ; 0x20e2d0
0000000000007ae9         movaps     xmmword [rsp+0x48+var_38], xmm0
0000000000007aee         movdqa     xmm0, xmmword [default_quoting_options+32]  ; 0x20e2e0
0000000000007af6         movaps     xmmword [rsp+0x48+var_28], xmm0
0000000000007afb         mov        edx, dword [r9]
0000000000007afe         mov        eax, edx
0000000000007b00         shr        eax, cl
0000000000007b02         not        eax
0000000000007b04         and        eax, 0x1
0000000000007b07         shl        eax, cl
0000000000007b09         mov        rcx, r8
0000000000007b0c         xor        eax, edx
0000000000007b0e         mov        rdx, rsi
0000000000007b11         mov        rsi, rdi
0000000000007b14         mov        dword [r9], eax
0000000000007b17         xor        edi, edi
0000000000007b19         call       quotearg_n_options                          ; quotearg_n_options
0000000000007b1e         mov        rsi, qword [rsp+0x48+var_10]
0000000000007b23         xor        rsi, qword [fs:0x28]
0000000000007b2c         jne        loc_7b33

0000000000007b2e         add        rsp, 0x48
0000000000007b32         ret
                        ; endp

                     loc_7b33:
0000000000007b33         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_char_mem+140
                        ; endp
0000000000007b38         align      64                                          ; End of unwind block (FDE at 0xcb54)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24
        ;    var_28: -40
        ;    var_38: -56
        ;    var_48: -72


                     quotearg_char:
0000000000007b40         movsx      edx, sil                                    ; Begin of unwind block (FDE at 0xcb70)
0000000000007b44         mov        rsi, 0xffffffffffffffff
0000000000007b4b         jmp        quotearg_char_mem                           ; quotearg_char_mem


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_colon:
0000000000007b50         mov        edx, 0x3a                                   ; End of unwind block (FDE at 0xcb70), Begin of unwind block (FDE at 0xcb84), CODE XREF=close_stdout+101
0000000000007b55         mov        rsi, 0xffffffffffffffff
0000000000007b5c         jmp        quotearg_char_mem                           ; quotearg_char_mem
                        ; endp
0000000000007b61         align      16                                          ; End of unwind block (FDE at 0xcb84)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_colon_mem:
0000000000007b70         mov        edx, 0x3a                                   ; Begin of unwind block (FDE at 0xcb98)
0000000000007b75         jmp        quotearg_char_mem                           ; quotearg_char_mem
                        ; endp
0000000000007b7a         align      128                                         ; End of unwind block (FDE at 0xcb98)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_n_style_colon:
0000000000007b80         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0xcbac)
0000000000007b84         mov        rax, rdx
0000000000007b87         mov        rdx, qword [fs:0x28]
0000000000007b90         mov        qword [rsp+0x48+var_10], rdx
0000000000007b95         xor        edx, edx
0000000000007b97         cmp        esi, 0xa
0000000000007b9a         je         loc_7c04

0000000000007b9c         mov        dword [rsp+0x48+var_48], esi
0000000000007b9f         mov        rcx, rsp
0000000000007ba2         mov        rdx, 0xffffffffffffffff
0000000000007ba9         mov        rsi, rax
0000000000007bac         mov        qword [rsp+0x48+var_44], 0x0
0000000000007bb5         mov        qword [rsp+0x48+var_3C], 0x4000000
0000000000007bbe         mov        qword [rsp+0x48+var_34], 0x0
0000000000007bc7         mov        qword [rsp+0x48+var_2C], 0x0
0000000000007bd0         mov        qword [rsp+0x48+var_24], 0x0
0000000000007bd9         mov        qword [rsp+0x48+var_1C], 0x0
0000000000007be2         mov        dword [rsp+0x48+var_14], 0x0
0000000000007bea         call       quotearg_n_options                          ; quotearg_n_options
0000000000007bef         mov        rcx, qword [rsp+0x48+var_10]
0000000000007bf4         xor        rcx, qword [fs:0x28]
0000000000007bfd         jne        loc_7c09

0000000000007bff         add        rsp, 0x48
0000000000007c03         ret
                        ; endp

                     loc_7c04:
0000000000007c04         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style_colon+26
                        ; endp

                     loc_7c09:
0000000000007c09         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style_colon+125
                        ; endp
0000000000007c0e         align      16                                          ; End of unwind block (FDE at 0xcbac)

                     quotearg_n_custom_mem:
0000000000007c10         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0xcbc8), CODE XREF=quotearg_n_custom+7, quotearg_custom+18, quotearg_custom_mem+14
0000000000007c14         mov        r9, rcx
0000000000007c17         mov        rcx, qword [qword_20e2f0]                   ; qword_20e2f0
0000000000007c1e         movdqa     xmm0, xmmword [default_quoting_options]     ; default_quoting_options
0000000000007c26         mov        rax, qword [fs:0x28]
0000000000007c2f         mov        qword [rsp+0x48+var_10], rax
0000000000007c34         xor        eax, eax
0000000000007c36         movaps     xmmword [rsp+0x48+var_48], xmm0
0000000000007c3a         test       rsi, rsi
0000000000007c3d         mov        qword [rsp+0x48+var_18], rcx
0000000000007c42         mov        dword [rsp+0x48+var_48], 0xa
0000000000007c49         movdqa     xmm0, xmmword [default_quoting_options+16]  ; 0x20e2d0
0000000000007c51         movaps     xmmword [rsp+0x48+var_38], xmm0
0000000000007c56         movdqa     xmm0, xmmword [default_quoting_options+32]  ; 0x20e2e0
0000000000007c5e         movaps     xmmword [rsp+0x48+var_28], xmm0
0000000000007c63         je         loc_7c97

0000000000007c65         test       rdx, rdx
0000000000007c68         je         loc_7c97

0000000000007c6a         mov        qword [rsp+0x48+var_20], rsi
0000000000007c6f         mov        qword [rsp+0x48+var_18], rdx
0000000000007c74         mov        rcx, rsp
0000000000007c77         mov        rdx, r8
0000000000007c7a         mov        rsi, r9
0000000000007c7d         call       quotearg_n_options                          ; quotearg_n_options
0000000000007c82         mov        rdi, qword [rsp+0x48+var_10]
0000000000007c87         xor        rdi, qword [fs:0x28]
0000000000007c90         jne        loc_7c9c

0000000000007c92         add        rsp, 0x48
0000000000007c96         ret
                        ; endp

                     loc_7c97:
0000000000007c97         call       j_abort                                     ; abort, CODE XREF=quotearg_n_custom_mem+83, quotearg_n_custom_mem+88
                        ; endp

                     loc_7c9c:
0000000000007c9c         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_custom_mem+128
                        ; endp
0000000000007ca1         align      16                                          ; End of unwind block (FDE at 0xcbc8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24
        ;    var_20: int64_t, -32
        ;    var_28: -40
        ;    var_38: -56
        ;    var_48: int32_t, -72


                     quotearg_n_custom:
0000000000007cb0         mov        r8, 0xffffffffffffffff                      ; Begin of unwind block (FDE at 0xcbe4)
0000000000007cb7         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
0000000000007cbc         align      64                                          ; End of unwind block (FDE at 0xcbe4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_custom:
0000000000007cc0         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0xcbf8)
0000000000007cc3         mov        r8, 0xffffffffffffffff
0000000000007cca         mov        rdx, rsi
0000000000007ccd         mov        rsi, rdi
0000000000007cd0         xor        edi, edi
0000000000007cd2         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
                        ; endp
0000000000007cd7         align      32                                          ; End of unwind block (FDE at 0xcbf8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_custom_mem:
0000000000007ce0         mov        r8, rcx                                     ; Begin of unwind block (FDE at 0xcc0c)
0000000000007ce3         mov        rcx, rdx
0000000000007ce6         mov        rdx, rsi
0000000000007ce9         mov        rsi, rdi
0000000000007cec         xor        edi, edi
0000000000007cee         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
                        ; endp
0000000000007cf3         align      256                                         ; End of unwind block (FDE at 0xcc0c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_n_mem:
0000000000007d00         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0xcc20), quote_quoting_options
0000000000007d07         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000007d0c         align      16                                          ; End of unwind block (FDE at 0xcc20)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_mem:
0000000000007d10         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0xcc34), quote_quoting_options
0000000000007d17         mov        rdx, rsi
0000000000007d1a         mov        rsi, rdi
0000000000007d1d         xor        edi, edi
0000000000007d1f         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000007d24         align      16                                          ; End of unwind block (FDE at 0xcc34)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_n:
0000000000007d30         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0xcc48), quote_quoting_options, CODE XREF=main+1549, main+1590, main+1658, process_field+432, process_field+445, process_field+1830, process_field+1843, argmatch_invalid+46
0000000000007d37         mov        rdx, 0xffffffffffffffff
0000000000007d3e         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000007d43         align      16                                          ; End of unwind block (FDE at 0xcc48)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote:
0000000000007d50         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0xcc5c), quote_quoting_options, CODE XREF=main+1183, main+3148, main+3198, main+3248, main+3302, main+3388, main+3438, main+3565, unit_to_umax+316, process_field+684, process_field+1929
0000000000007d57         mov        rsi, rdi
0000000000007d5a         mov        rdx, 0xffffffffffffffff
0000000000007d61         xor        edi, edi
0000000000007d63         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000007d68         align      16                                          ; End of unwind block (FDE at 0xcc5c)

                     version_etc_arn:
0000000000007d70         push       r15                                         ; Begin of unwind block (FDE at 0xcc74), CODE XREF=j_version_etc_arn, version_etc_va+75, version_etc+161
0000000000007d72         push       r14
0000000000007d74         push       r13
0000000000007d76         push       r12
0000000000007d78         mov        r12, r9
0000000000007d7b         push       rbp
0000000000007d7c         push       rbx
0000000000007d7d         mov        rbp, rdi
0000000000007d80         mov        rbx, r8
0000000000007d83         sub        rsp, 0x28
0000000000007d87         test       rsi, rsi
0000000000007d8a         je         loc_7ea8

0000000000007d90         mov        r8, rdx
0000000000007d93         lea        rdx, qword [aSSSn]                          ; "%s (%s) %s\\n"
0000000000007d9a         mov        r9, rcx
0000000000007d9d         xor        eax, eax
0000000000007d9f         mov        rcx, rsi
0000000000007da2         mov        esi, 0x1
0000000000007da7         call       j___fprintf_chk                             ; __fprintf_chk

                     loc_7dac:
0000000000007dac         lea        rsi, qword [aSSn+7]                         ; argument "msgid" for method j_dcgettext, 0xb93b, CODE XREF=version_etc_arn+337
0000000000007db3         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000007db5         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000007dba         call       j_dcgettext                                 ; dcgettext
0000000000007dbf         lea        rdx, qword [version_etc_copyright]          ; "Copyright %s %d Free Software Foundation, Inc."
0000000000007dc6         mov        rcx, rax
0000000000007dc9         mov        r8d, 0x7e3
0000000000007dcf         mov        esi, 0x1
0000000000007dd4         mov        rdi, rbp
0000000000007dd7         xor        eax, eax
0000000000007dd9         call       j___fprintf_chk                             ; __fprintf_chk
0000000000007dde         lea        rsi, qword [aNlicenseGplv3G]                ; argument "msgid" for method j_dcgettext, "\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n"
0000000000007de5         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000007de7         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000007dec         call       j_dcgettext                                 ; dcgettext
0000000000007df1         mov        rsi, rbp                                    ; argument "__stream" for method j_fputs_unlocked
0000000000007df4         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000007df7         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000007dfc         cmp        r12, 0x9
0000000000007e00         ja         loc_8140

0000000000007e06         lea        rdx, qword [switch_table_bc24]              ; switch_table_bc24
0000000000007e0d         movsxd     rax, dword [rdx+r12*4]
0000000000007e11         add        rax, rdx
0000000000007e14         jmp        rax                                         ; switch statement using table at 0xbc24, with 10 cases, 0x7e20,0x7e96,0x7ed0,0x7f28,0x7f68,0x7fb0,0x8000,0x8058,0x8088,0x80f0
0000000000007e16         align      32

                     loc_7e20:
0000000000007e20         mov        r9, qword [rbx+0x38]                        ; case 8, CODE XREF=version_etc_arn+164
0000000000007e24         mov        rax, qword [rbx+0x10]
0000000000007e28         lea        rsi, qword [aWrittenBySSSns_bb38]           ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n"
0000000000007e2f         mov        r8, qword [rbx+8]
0000000000007e33         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000007e38         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000007e3a         mov        r13, qword [rbx+0x30]
0000000000007e3e         mov        r12, qword [rbx+0x28]
0000000000007e42         mov        qword [rsp+0x58+var_48], r9
0000000000007e47         mov        r15, qword [rbx+0x20]
0000000000007e4b         mov        r14, qword [rbx+0x18]
0000000000007e4f         mov        qword [rsp+0x58+var_58], rax
0000000000007e53         mov        qword [rsp+0x58+var_50], r8
0000000000007e58         mov        rbx, qword [rbx]
0000000000007e5b         call       j_dcgettext                                 ; dcgettext
0000000000007e60         sub        rsp, 0x8

                     loc_7e64:
0000000000007e64         mov        r9, qword [rsp+0x60+var_48]                 ; CODE XREF=version_etc_arn+432
0000000000007e69         mov        rdx, rax
0000000000007e6c         mov        rcx, rbx
0000000000007e6f         mov        esi, 0x1
0000000000007e74         mov        rdi, rbp
0000000000007e77         xor        eax, eax
0000000000007e79         push       r9
0000000000007e7b         push       r13
0000000000007e7d         push       r12
0000000000007e7f         push       r15
0000000000007e81         push       r14
0000000000007e83         mov        r9, qword [rsp+0x88+var_58]
0000000000007e88         mov        r8, qword [rsp+0x88+var_50]
0000000000007e8d         call       j___fprintf_chk                             ; __fprintf_chk
0000000000007e92         add        rsp, 0x30

                     loc_7e96:
0000000000007e96         add        rsp, 0x28                                   ; case 0, CODE XREF=version_etc_arn+164
0000000000007e9a         pop        rbx
0000000000007e9b         pop        rbp
0000000000007e9c         pop        r12
0000000000007e9e         pop        r13
0000000000007ea0         pop        r14
0000000000007ea2         pop        r15
0000000000007ea4         ret
                        ; endp
0000000000007ea5         align      8

                     loc_7ea8:
0000000000007ea8         mov        r8, rcx                                     ; CODE XREF=version_etc_arn+26
0000000000007eab         mov        rcx, rdx
0000000000007eae         lea        rdx, qword [aSSn]                           ; "%s %s\\n"
0000000000007eb5         mov        esi, 0x1
0000000000007eba         xor        eax, eax
0000000000007ebc         call       j___fprintf_chk                             ; __fprintf_chk
0000000000007ec1         jmp        loc_7dac
0000000000007ec6         align      16

                     loc_7ed0:
0000000000007ed0         mov        r10, qword [rbx+0x40]                       ; case 9, CODE XREF=version_etc_arn+164
0000000000007ed4         mov        r9, qword [rbx+0x38]
0000000000007ed8         lea        rsi, qword [aWrittenBySSSns]                ; "Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n"
0000000000007edf         mov        rax, qword [rbx+0x10]
0000000000007ee3         mov        r8, qword [rbx+8]
0000000000007ee7         mov        edx, 0x5
0000000000007eec         mov        r13, qword [rbx+0x30]
0000000000007ef0         mov        r12, qword [rbx+0x28]
0000000000007ef4         mov        r15, qword [rbx+0x20]
0000000000007ef8         mov        r14, qword [rbx+0x18]
0000000000007efc         mov        rbx, qword [rbx]
0000000000007eff         mov        qword [rsp+0x58+var_40], r10
0000000000007f04         mov        qword [rsp+0x58+var_48], r9
0000000000007f09         mov        qword [rsp+0x58+var_58], rax
0000000000007f0d         mov        qword [rsp+0x58+var_50], r8

                     loc_7f12:
0000000000007f12         xor        edi, edi                                    ; argument "domain" for method j_dcgettext, CODE XREF=version_etc_arn+1042
0000000000007f14         call       j_dcgettext                                 ; dcgettext
0000000000007f19         mov        r10, qword [rsp+0x58+var_40]
0000000000007f1e         push       r10
0000000000007f20         jmp        loc_7e64
0000000000007f25         align      8

                     loc_7f28:
0000000000007f28         mov        rbx, qword [rbx]                            ; case 1, CODE XREF=version_etc_arn+164
0000000000007f2b         lea        rsi, qword [aWrittenBySn]                   ; argument "msgid" for method j_dcgettext, "Written by %s.\\n"
0000000000007f32         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000007f37         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000007f39         call       j_dcgettext                                 ; dcgettext
0000000000007f3e         add        rsp, 0x28
0000000000007f42         mov        rcx, rbx
0000000000007f45         mov        rdi, rbp
0000000000007f48         pop        rbx
0000000000007f49         pop        rbp
0000000000007f4a         pop        r12
0000000000007f4c         pop        r13
0000000000007f4e         pop        r14
0000000000007f50         pop        r15
0000000000007f52         mov        rdx, rax
0000000000007f55         mov        esi, 0x1
0000000000007f5a         xor        eax, eax
0000000000007f5c         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
0000000000007f61         align      8

                     loc_7f68:
0000000000007f68         mov        r12, qword [rbx+8]                          ; case 2, CODE XREF=version_etc_arn+164
0000000000007f6c         lea        rsi, qword [aWrittenBySAndS]                ; argument "msgid" for method j_dcgettext, "Written by %s and %s.\\n"
0000000000007f73         mov        rbx, qword [rbx]
0000000000007f76         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000007f7b         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000007f7d         call       j_dcgettext                                 ; dcgettext
0000000000007f82         add        rsp, 0x28
0000000000007f86         mov        r8, r12
0000000000007f89         mov        rcx, rbx
0000000000007f8c         mov        rdi, rbp
0000000000007f8f         mov        rdx, rax
0000000000007f92         mov        esi, 0x1
0000000000007f97         pop        rbx
0000000000007f98         pop        rbp
0000000000007f99         pop        r12
0000000000007f9b         pop        r13
0000000000007f9d         pop        r14
0000000000007f9f         pop        r15
0000000000007fa1         xor        eax, eax
0000000000007fa3         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
0000000000007fa8         align      16

                     loc_7fb0:
0000000000007fb0         mov        r13, qword [rbx+0x10]                       ; case 3, CODE XREF=version_etc_arn+164
0000000000007fb4         mov        r12, qword [rbx+8]
0000000000007fb8         lea        rsi, qword [aWrittenBySSAnd]                ; argument "msgid" for method j_dcgettext, "Written by %s, %s, and %s.\\n"
0000000000007fbf         mov        rbx, qword [rbx]
0000000000007fc2         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000007fc7         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000007fc9         call       j_dcgettext                                 ; dcgettext
0000000000007fce         add        rsp, 0x28
0000000000007fd2         mov        r9, r13
0000000000007fd5         mov        r8, r12
0000000000007fd8         mov        rcx, rbx
0000000000007fdb         mov        rdi, rbp
0000000000007fde         mov        rdx, rax
0000000000007fe1         pop        rbx
0000000000007fe2         pop        rbp
0000000000007fe3         pop        r12
0000000000007fe5         pop        r13
0000000000007fe7         pop        r14
0000000000007fe9         pop        r15
0000000000007feb         mov        esi, 0x1
0000000000007ff0         xor        eax, eax
0000000000007ff2         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
0000000000007ff7         align      32768

                     loc_8000:
0000000000008000         lea        rsi, qword [aWrittenBySSSna]                ; case 4, argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\nand %s.\\n", CODE XREF=version_etc_arn+164
0000000000008007         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000800c         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000800e         mov        r14, qword [rbx+0x18]
0000000000008012         mov        r13, qword [rbx+0x10]
0000000000008016         mov        r12, qword [rbx+8]
000000000000801a         mov        rbx, qword [rbx]
000000000000801d         call       j_dcgettext                                 ; dcgettext
0000000000008022         sub        rsp, 0x8

                     loc_8026:
0000000000008026         push       r14                                         ; CODE XREF=version_etc_arn+784
0000000000008028         mov        rdx, rax
000000000000802b         mov        r9, r13
000000000000802e         mov        r8, r12
0000000000008031         mov        rcx, rbx
0000000000008034         mov        rdi, rbp
0000000000008037         mov        esi, 0x1
000000000000803c         xor        eax, eax
000000000000803e         call       j___fprintf_chk                             ; __fprintf_chk
0000000000008043         pop        rax
0000000000008044         pop        rdx
0000000000008045         add        rsp, 0x28
0000000000008049         pop        rbx
000000000000804a         pop        rbp
000000000000804b         pop        r12
000000000000804d         pop        r13
000000000000804f         pop        r14
0000000000008051         pop        r15
0000000000008053         ret
                        ; endp
0000000000008054         align      8

                     loc_8058:
0000000000008058         mov        r15, qword [rbx+0x20]                       ; case 5, CODE XREF=version_etc_arn+164
000000000000805c         lea        rsi, qword [aWrittenBySSSns_bab8]           ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, and %s.\\n"
0000000000008063         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000008068         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000806a         mov        r14, qword [rbx+0x18]
000000000000806e         mov        r13, qword [rbx+0x10]
0000000000008072         mov        r12, qword [rbx+8]
0000000000008076         mov        rbx, qword [rbx]
0000000000008079         call       j_dcgettext                                 ; dcgettext
000000000000807e         push       r15
0000000000008080         jmp        loc_8026                                    ; DATA XREF=process_field+2804, process_field+2958
0000000000008082         align      8

                     loc_8088:
0000000000008088         mov        r8, qword [rbx+8]                           ; case 6, CODE XREF=version_etc_arn+164
000000000000808c         mov        r12, qword [rbx+0x28]
0000000000008090         lea        rsi, qword [aWrittenBySSSns_bae0]           ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, %s, and %s.\\n"
0000000000008097         mov        r15, qword [rbx+0x20]
000000000000809b         mov        r14, qword [rbx+0x18]
000000000000809f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000080a4         mov        r13, qword [rbx+0x10]
00000000000080a8         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000080aa         mov        rbx, qword [rbx]
00000000000080ad         mov        qword [rsp+0x58+var_58], r8
00000000000080b1         call       j_dcgettext                                 ; dcgettext
00000000000080b6         sub        rsp, 0x8
00000000000080ba         mov        r9, r13
00000000000080bd         push       r12
00000000000080bf         push       r15
00000000000080c1         push       r14

                     loc_80c3:
00000000000080c3         mov        r8, qword [rsp+0x78+var_58]                 ; CODE XREF=version_etc_arn+964
00000000000080c8         mov        rcx, rbx
00000000000080cb         mov        rdx, rax
00000000000080ce         mov        rdi, rbp
00000000000080d1         mov        esi, 0x1
00000000000080d6         xor        eax, eax
00000000000080d8         call       j___fprintf_chk                             ; __fprintf_chk
00000000000080dd         add        rsp, 0x20
00000000000080e1         add        rsp, 0x28
00000000000080e5         pop        rbx
00000000000080e6         pop        rbp
00000000000080e7         pop        r12
00000000000080e9         pop        r13
00000000000080eb         pop        r14
00000000000080ed         pop        r15
00000000000080ef         ret
                        ; endp

                     loc_80f0:
00000000000080f0         mov        r9, qword [rbx+0x10]                        ; case 7, CODE XREF=version_etc_arn+164
00000000000080f4         mov        r13, qword [rbx+0x30]
00000000000080f8         lea        rsi, qword [aWrittenBySSSns_bb08]           ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n"
00000000000080ff         mov        r12, qword [rbx+0x28]
0000000000008103         mov        r15, qword [rbx+0x20]
0000000000008107         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000810c         mov        r14, qword [rbx+0x18]
0000000000008110         mov        r8, qword [rbx+8]
0000000000008114         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000008116         mov        qword [rsp+0x58+var_50], r9
000000000000811b         mov        rbx, qword [rbx]
000000000000811e         mov        qword [rsp+0x58+var_58], r8
0000000000008122         call       j_dcgettext                                 ; dcgettext
0000000000008127         push       r13
0000000000008129         push       r12
000000000000812b         push       r15
000000000000812d         push       r14
000000000000812f         mov        r9, qword [rsp+0x78+var_50]
0000000000008134         jmp        loc_80c3
0000000000008136         align      64

                     loc_8140:
0000000000008140         mov        r10, qword [rbx+0x40]                       ; CODE XREF=version_etc_arn+144
0000000000008144         mov        r9, qword [rbx+0x38]
0000000000008148         mov        edx, 0x5
000000000000814d         mov        rax, qword [rbx+0x10]
0000000000008151         mov        r8, qword [rbx+8]
0000000000008155         lea        rsi, qword [aWrittenBySSSns_bba0]           ; "Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n"
000000000000815c         mov        r13, qword [rbx+0x30]
0000000000008160         mov        r12, qword [rbx+0x28]
0000000000008164         mov        r15, qword [rbx+0x20]
0000000000008168         mov        r14, qword [rbx+0x18]
000000000000816c         mov        qword [rsp+0x58+var_40], r10
0000000000008171         mov        qword [rsp+0x58+var_48], r9
0000000000008176         mov        qword [rsp+0x58+var_58], rax
000000000000817a         mov        qword [rsp+0x58+var_50], r8
000000000000817f         mov        rbx, qword [rbx]
0000000000008182         jmp        loc_7f12
0000000000008187         align      16                                          ; End of unwind block (FDE at 0xcc74)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88


                     version_etc_ar:
0000000000008190         xor        r9d, r9d                                    ; Begin of unwind block (FDE at 0xcd88)
0000000000008193         cmp        qword [r8], 0x0
0000000000008197         je         j_version_etc_arn                           ; version_etc_arn

0000000000008199         nop        dword [rax]

                     loc_81a0:
00000000000081a0         add        r9, 0x1                                     ; CODE XREF=version_etc_ar+25
00000000000081a4         cmp        qword [r8+r9*8], 0x0
00000000000081a9         jne        loc_81a0

                     j_version_etc_arn:        // version_etc_arn
00000000000081ab         jmp        version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc_ar+7


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16


                     version_etc_va:
00000000000081b0         sub        rsp, 0x68                                   ; End of unwind block (FDE at 0xcd88), Begin of unwind block (FDE at 0xcd9c)
00000000000081b4         mov        r10, r8
00000000000081b7         xor        r9d, r9d
00000000000081ba         mov        rax, qword [fs:0x28]
00000000000081c3         mov        qword [rsp+0x68+var_10], rax
00000000000081c8         xor        eax, eax
00000000000081ca         mov        r8, rsp
00000000000081cd         nop        dword [rax]

                     loc_81d0:
00000000000081d0         mov        eax, dword [r10]                            ; CODE XREF=version_etc_va+73
00000000000081d3         cmp        eax, 0x2f
00000000000081d6         ja         loc_821a

00000000000081d8         mov        r11d, eax
00000000000081db         add        r11, qword [r10+0x10]
00000000000081df         add        eax, 0x8
00000000000081e2         mov        dword [r10], eax

                     loc_81e5:
00000000000081e5         mov        rax, qword [r11]                            ; CODE XREF=version_etc_va+118
00000000000081e8         test       rax, rax
00000000000081eb         mov        qword [r8+r9*8], rax
00000000000081ef         je         loc_81fb

00000000000081f1         add        r9, 0x1
00000000000081f5         cmp        r9, 0xa
00000000000081f9         jne        loc_81d0

                     loc_81fb:
00000000000081fb         call       version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc_va+63
0000000000008200         mov        rax, qword [rsp+0x68+var_10]
0000000000008205         xor        rax, qword [fs:0x28]
000000000000820e         jne        loc_8215

0000000000008210         add        rsp, 0x68
0000000000008214         ret
                        ; endp

                     loc_8215:
0000000000008215         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=version_etc_va+94
                        ; endp

                     loc_821a:
000000000000821a         mov        r11, qword [r10+8]                          ; CODE XREF=version_etc_va+38
000000000000821e         lea        rax, qword [r11+8]
0000000000008222         mov        qword [r10+8], rax
0000000000008226         jmp        loc_81e5
0000000000008228         align      16                                          ; End of unwind block (FDE at 0xcd9c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40
        ;    var_48: int8_t, -72
        ;    var_50: int64_t, -80
        ;    var_A8: int8_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int32_t, -192


                     version_etc:
0000000000008230         push       rbp                                         ; Begin of unwind block (FDE at 0xcdb8), CODE XREF=main+608
0000000000008231         push       rbx
0000000000008232         mov        r10d, 0x20
0000000000008238         xor        r11d, r11d
000000000000823b         sub        rsp, 0xb8
0000000000008242         mov        rax, qword [fs:0x28]
000000000000824b         mov        qword [rsp+0xc8+var_50], rax
0000000000008250         xor        eax, eax
0000000000008252         lea        rax, qword [rsp+0xc8+arg_0]
000000000000825a         mov        qword [rsp+0xc8+var_28], r8
0000000000008262         lea        rbx, qword [rsp+0xc8+arg_0]
000000000000826a         lea        r8, qword [rsp+0xc8+var_A8]
000000000000826f         mov        qword [rsp+0xc8+var_20], r9
0000000000008277         mov        dword [rsp+0xc8+var_C0], 0x20
000000000000827f         mov        qword [rsp+0xc8+var_B8], rax
0000000000008284         lea        rax, qword [rsp+0xc8+var_48]
000000000000828c         xor        r9d, r9d
000000000000828f         mov        qword [rsp+0xc8+var_B0], rax
0000000000008294         mov        rbp, rax
0000000000008297         nop        word [rax+rax]

                     loc_82a0:
00000000000082a0         cmp        r10d, 0x2f                                  ; CODE XREF=version_etc+154
00000000000082a4         ja         loc_82fc

00000000000082a6         mov        eax, r10d
00000000000082a9         mov        r11d, 0x1
00000000000082af         add        r10d, 0x8
00000000000082b3         add        rax, rbp

                     loc_82b6:
00000000000082b6         mov        rax, qword [rax]                            ; CODE XREF=version_etc+211
00000000000082b9         test       rax, rax
00000000000082bc         mov        qword [r8+r9*8], rax
00000000000082c0         je         loc_82cc

00000000000082c2         add        r9, 0x1
00000000000082c6         cmp        r9, 0xa
00000000000082ca         jne        loc_82a0

                     loc_82cc:
00000000000082cc         test       r11b, r11b                                  ; CODE XREF=version_etc+144
00000000000082cf         jne        loc_82f5

                     loc_82d1:
00000000000082d1         call       version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc+202
00000000000082d6         mov        rax, qword [rsp+0xc8+var_50]
00000000000082db         xor        rax, qword [fs:0x28]
00000000000082e4         jne        loc_82f0

00000000000082e6         add        rsp, 0xb8
00000000000082ed         pop        rbx
00000000000082ee         pop        rbp
00000000000082ef         ret
                        ; endp

                     loc_82f0:
00000000000082f0         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=version_etc+180
                        ; endp

                     loc_82f5:
00000000000082f5         mov        dword [rsp+0xc8+var_C0], r10d               ; CODE XREF=version_etc+159
00000000000082fa         jmp        loc_82d1

                     loc_82fc:
00000000000082fc         mov        rax, rbx                                    ; CODE XREF=version_etc+116
00000000000082ff         add        rbx, 0x8
0000000000008303         jmp        loc_82b6
0000000000008305         align      16                                          ; End of unwind block (FDE at 0xcdb8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     emit_bug_reporting_address:
0000000000008310         push       rbx                                         ; Begin of unwind block (FDE at 0xcde4)
0000000000008311         lea        rsi, qword [aNreportBugsToS]                ; argument "msgid" for method j_dcgettext, "\\nReport bugs to: %s\\n"
0000000000008318         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000831d         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000831f         call       j_dcgettext                                 ; dcgettext
0000000000008324         lea        rdx, qword [aBugcoreutilsgn]                ; "bug-coreutils@gnu.org"
000000000000832b         mov        rsi, rax
000000000000832e         mov        edi, 0x1
0000000000008333         xor        eax, eax
0000000000008335         call       j___printf_chk                              ; __printf_chk
000000000000833a         lea        rsi, qword [aSHomePageSn]                   ; argument "msgid" for method j_dcgettext, "%s home page: <%s>\\n"
0000000000008341         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000008346         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000008348         call       j_dcgettext                                 ; dcgettext
000000000000834d         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000008354         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0x9647
000000000000835b         mov        rsi, rax
000000000000835e         mov        edi, 0x1
0000000000008363         xor        eax, eax
0000000000008365         call       j___printf_chk                              ; __printf_chk
000000000000836a         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000008371         lea        rsi, qword [aGeneralHelpUsi]                ; argument "msgid" for method j_dcgettext, "General help using GNU software: <https://www.gnu.org/gethelp/>\\n"
0000000000008378         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000837a         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000837f         call       j_dcgettext                                 ; dcgettext
0000000000008384         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000008387         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
000000000000838a         pop        rbx
000000000000838b         jmp        j_fputs_unlocked                            ; fputs_unlocked
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xmalloc:
0000000000008390         push       rbx                                         ; End of unwind block (FDE at 0xcde4), Begin of unwind block (FDE at 0xce04), CODE XREF=unit_to_umax+188, quotearg_n_options+295, quotearg_alloc_mem+129, xnmalloc+25, xcharalloc, xzalloc+4, xmemdup+15
0000000000008391         mov        rbx, rdi
0000000000008394         call       j_malloc                                    ; malloc
0000000000008399         test       rax, rax
000000000000839c         jne        loc_83a3

000000000000839e         test       rbx, rbx
00000000000083a1         jne        loc_83a5

                     loc_83a3:
00000000000083a3         pop        rbx                                         ; CODE XREF=xmalloc+12
00000000000083a4         ret
                        ; endp

                     loc_83a5:
00000000000083a5         call       xalloc_die                                  ; xalloc_die, CODE XREF=xmalloc+17
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_83aa:
00000000000083aa         nop        word [rax+rax]                              ; End of unwind block (FDE at 0xce04)
                     xnmalloc:
00000000000083b0         mov        rax, rdi                                    ; Begin of unwind block (FDE at 0xce20)
00000000000083b3         mul        rsi
00000000000083b6         mov        rdi, rax
00000000000083b9         seto       al
00000000000083bc         test       rdi, rdi
00000000000083bf         js         loc_83cb

00000000000083c1         movzx      eax, al
00000000000083c4         test       rax, rax
00000000000083c7         jne        loc_83cb

00000000000083c9         jmp        xmalloc                                     ; xmalloc
                        ; endp

                     loc_83cb:
00000000000083cb         sub        rsp, 0x8                                    ; CODE XREF=xnmalloc+15, xnmalloc+23
00000000000083cf         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_83d4:
00000000000083d4         nop                                                    ; End of unwind block (FDE at 0xce20)
00000000000083d6         nop        word [cs:rax+rax]
                     xcharalloc:
00000000000083e0         jmp        xmalloc                                     ; xmalloc, Begin of unwind block (FDE at 0xce34)
                        ; endp
00000000000083e2         align      16                                          ; End of unwind block (FDE at 0xce34)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xrealloc:
00000000000083f0         test       rsi, rsi                                    ; Begin of unwind block (FDE at 0xce48), CODE XREF=setup_padding_buffer.part.0+22, add_range_pair+122, set_fields+573, quotearg_n_options+110, quotearg_n_options+386, xnrealloc+25, x2nrealloc+52, x2realloc+40
00000000000083f3         push       rbx
00000000000083f4         mov        rbx, rsi
00000000000083f7         jne        loc_83fe

00000000000083f9         test       rdi, rdi
00000000000083fc         jne        loc_8418

                     loc_83fe:
00000000000083fe         mov        rsi, rbx                                    ; argument "__size" for method j_realloc, CODE XREF=xrealloc+7
0000000000008401         call       j_realloc                                   ; realloc
0000000000008406         test       rax, rax
0000000000008409         jne        loc_8410

000000000000840b         test       rbx, rbx
000000000000840e         jne        loc_8421

                     loc_8410:
0000000000008410         pop        rbx                                         ; CODE XREF=xrealloc+25
0000000000008411         ret
                        ; endp
0000000000008412         align      8

                     loc_8418:
0000000000008418         call       j_free                                      ; free, CODE XREF=xrealloc+12
000000000000841d         xor        eax, eax
000000000000841f         pop        rbx
0000000000008420         ret
                        ; endp

                     loc_8421:
0000000000008421         call       xalloc_die                                  ; xalloc_die, CODE XREF=xrealloc+30
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_8426:
0000000000008426         nop        word [cs:rax+rax]                           ; End of unwind block (FDE at 0xce48)
                     xnrealloc:
0000000000008430         mov        rax, rsi                                    ; Begin of unwind block (FDE at 0xce6c)
0000000000008433         mul        rdx
0000000000008436         mov        rsi, rax
0000000000008439         seto       al
000000000000843c         test       rsi, rsi
000000000000843f         js         loc_844b

0000000000008441         movzx      eax, al
0000000000008444         test       rax, rax
0000000000008447         jne        loc_844b

0000000000008449         jmp        xrealloc                                    ; xrealloc
                        ; endp

                     loc_844b:
000000000000844b         sub        rsp, 0x8                                    ; CODE XREF=xnrealloc+15, xnrealloc+23
000000000000844f         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_8454:
0000000000008454         nop                                                    ; End of unwind block (FDE at 0xce6c)
0000000000008456         nop        word [cs:rax+rax]
                     x2nrealloc:
0000000000008460         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0xce80)
0000000000008463         mov        r9, rdx
0000000000008466         mov        rcx, qword [rsi]
0000000000008469         je         loc_84a0

000000000000846b         xor        edx, edx
000000000000846d         movabs     rax, 0x5555555555555554
0000000000008477         div        r9
000000000000847a         cmp        rax, rcx
000000000000847d         jbe        loc_84bb

000000000000847f         mov        rax, rcx
0000000000008482         shr        rax, 0x1
0000000000008485         lea        rcx, qword [rax+rcx+1]

                     loc_848a:
000000000000848a         mov        qword [rsi], rcx                            ; CODE XREF=x2nrealloc+89
000000000000848d         imul       rcx, r9                                     ; argument #4 for method xrealloc
0000000000008491         mov        rsi, rcx                                    ; argument #2 for method xrealloc
0000000000008494         jmp        xrealloc                                    ; xrealloc
                        ; endp
0000000000008499         align      32

                     loc_84a0:
00000000000084a0         test       rcx, rcx                                    ; CODE XREF=x2nrealloc+9
00000000000084a3         je         loc_84c8

                     loc_84a5:
00000000000084a5         mov        rax, rcx                                    ; CODE XREF=sub_84c4+28
00000000000084a8         mul        r9
00000000000084ab         seto       dl
00000000000084ae         test       rax, rax
00000000000084b1         movzx      edx, dl
00000000000084b4         js         loc_84bb

00000000000084b6         test       rdx, rdx
00000000000084b9         je         loc_848a

                     loc_84bb:
00000000000084bb         sub        rsp, 0x8                                    ; CODE XREF=x2nrealloc+29, x2nrealloc+84
00000000000084bf         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_84c4:
00000000000084c4         nop        dword [rax]
                        ; endp

                     loc_84c8:
00000000000084c8         xor        edx, edx                                    ; CODE XREF=x2nrealloc+67
00000000000084ca         mov        eax, 0x80
00000000000084cf         xor        r8d, r8d
00000000000084d2         div        r9
00000000000084d5         test       rax, rax
00000000000084d8         sete       r8b
00000000000084dc         lea        rcx, qword [r8+rax]
00000000000084e0         jmp        loc_84a5
00000000000084e2         align      16                                          ; End of unwind block (FDE at 0xce80)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     x2realloc:
00000000000084f0         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0xce98)
00000000000084f3         mov        rax, qword [rsi]
00000000000084f6         je         loc_8520

00000000000084f8         movabs     rdx, 0x5555555555555553
0000000000008502         cmp        rax, rdx
0000000000008505         ja         loc_8531

0000000000008507         mov        rdx, rax
000000000000850a         shr        rdx, 0x1
000000000000850d         lea        rax, qword [rdx+rax+1]

                     loc_8512:
0000000000008512         mov        qword [rsi], rax                            ; CODE XREF=x2realloc+63
0000000000008515         mov        rsi, rax                                    ; argument #2 for method xrealloc
0000000000008518         jmp        xrealloc                                    ; xrealloc
                        ; endp
000000000000851d         align      32

                     loc_8520:
0000000000008520         test       rax, rax                                    ; CODE XREF=x2realloc+6
0000000000008523         mov        edx, 0x80
0000000000008528         cmove      rax, rdx
000000000000852c         test       rax, rax
000000000000852f         jns        loc_8512

                     loc_8531:
0000000000008531         sub        rsp, 0x8                                    ; CODE XREF=x2realloc+21
0000000000008535         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_853a:
000000000000853a         nop        word [rax+rax]                              ; End of unwind block (FDE at 0xce98)
                     xzalloc:
0000000000008540         push       rbx                                         ; Begin of unwind block (FDE at 0xceb0)
0000000000008541         mov        rbx, rdi
0000000000008544         call       xmalloc                                     ; xmalloc
0000000000008549         mov        rdx, rbx                                    ; argument "__n" for method j_memset
000000000000854c         xor        esi, esi                                    ; argument "__c" for method j_memset
000000000000854e         mov        rdi, rax                                    ; argument "__s" for method j_memset
0000000000008551         pop        rbx
0000000000008552         jmp        j_memset                                    ; memset
                        ; endp
0000000000008557         align      32                                          ; End of unwind block (FDE at 0xceb0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xcalloc:
0000000000008560         mov        rax, rdi                                    ; Begin of unwind block (FDE at 0xcecc)
0000000000008563         sub        rsp, 0x8
0000000000008567         mul        rsi
000000000000856a         seto       dl
000000000000856d         test       rax, rax
0000000000008570         js         loc_8589

0000000000008572         movzx      edx, dl
0000000000008575         test       rdx, rdx
0000000000008578         jne        loc_8589

000000000000857a         call       j_calloc                                    ; calloc
000000000000857f         test       rax, rax
0000000000008582         je         loc_8589

0000000000008584         add        rsp, 0x8
0000000000008588         ret
                        ; endp

                     loc_8589:
0000000000008589         call       xalloc_die                                  ; xalloc_die, CODE XREF=xcalloc+16, xcalloc+24, xcalloc+34
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_858e:
000000000000858e         nop                                                    ; End of unwind block (FDE at 0xcecc)
                        ; endp

                     xmemdup:
0000000000008590         push       rbp                                         ; Begin of unwind block (FDE at 0xcee8), CODE XREF=clone_quoting_options+40, xstrdup+17
0000000000008591         push       rbx
0000000000008592         mov        rbp, rdi
0000000000008595         mov        rdi, rsi
0000000000008598         mov        rbx, rsi
000000000000859b         sub        rsp, 0x8
000000000000859f         call       xmalloc                                     ; xmalloc
00000000000085a4         add        rsp, 0x8
00000000000085a8         mov        rdx, rbx                                    ; argument "__n" for method j_memcpy
00000000000085ab         mov        rsi, rbp                                    ; argument "__src" for method j_memcpy
00000000000085ae         pop        rbx
00000000000085af         pop        rbp
00000000000085b0         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
00000000000085b3         jmp        j_memcpy                                    ; memcpy
                        ; endp
00000000000085b8         align      64                                          ; End of unwind block (FDE at 0xcee8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xstrdup:
00000000000085c0         push       rbx                                         ; Begin of unwind block (FDE at 0xcf10), CODE XREF=main+2846
00000000000085c1         mov        rbx, rdi
00000000000085c4         call       j_strlen                                    ; strlen
00000000000085c9         mov        rdi, rbx
00000000000085cc         lea        rsi, qword [rax+1]
00000000000085d0         pop        rbx
00000000000085d1         jmp        xmemdup                                     ; xmemdup
00000000000085d3         align      32                                          ; End of unwind block (FDE at 0xcf10)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xalloc_die:
00000000000085e0         lea        rsi, qword [aMemoryExhauste]                ; Begin of unwind block (FDE at 0xcf2c), argument "msgid" for method j_dcgettext, "memory exhausted", CODE XREF=add_range_pair+189, quotearg_n_options+422, xmalloc+21, xnmalloc+31, xrealloc+49, xnrealloc+31, x2nrealloc+95, x2realloc+69, xcalloc+41, xstrndup+19
00000000000085e7         sub        rsp, 0x8
00000000000085eb         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000085f0         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000085f2         call       j_dcgettext                                 ; dcgettext
00000000000085f7         mov        edi, dword [exit_failure]                   ; argument "__status" for method j_error, exit_failure
00000000000085fd         lea        rdx, qword [aNS+10]                         ; argument "__format" for method j_error, 0xb3fd
0000000000008604         mov        rcx, rax
0000000000008607         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000008609         xor        eax, eax
000000000000860b         call       j_error                                     ; error
0000000000008610         call       j_abort                                     ; abort
                        ; endp
0000000000008615         align      32                                          ; End of unwind block (FDE at 0xcf2c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xstrndup:
0000000000008620         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0xcf44), CODE XREF=main+1492, set_fields+1209
0000000000008624         call       j_strndup                                   ; strndup
0000000000008629         test       rax, rax
000000000000862c         je         loc_8633

000000000000862e         add        rsp, 0x8
0000000000008632         ret
                        ; endp

                     loc_8633:
0000000000008633         call       xalloc_die                                  ; xalloc_die, CODE XREF=xstrndup+12
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_8638:
0000000000008638         nop        dword [rax+rax]                             ; End of unwind block (FDE at 0xcf44)
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int8_t, -72
        ;    var_50: int64_t, -80


                     xstrtol:
0000000000008640         push       r15                                         ; Begin of unwind block (FDE at 0xcf64), CODE XREF=main+940
0000000000008642         push       r14
0000000000008644         push       r13
0000000000008646         push       r12
0000000000008648         push       rbp
0000000000008649         push       rbx
000000000000864a         sub        rsp, 0x28
000000000000864e         mov        rax, qword [fs:0x28]
0000000000008657         mov        qword [rsp+0x58+var_40], rax
000000000000865c         xor        eax, eax
000000000000865e         cmp        edx, 0x24
0000000000008661         ja         loc_8ccf

0000000000008667         lea        rax, qword [rsp+0x58+var_48]
000000000000866c         test       rsi, rsi
000000000000866f         mov        rbx, rsi
0000000000008672         mov        r12, rdi
0000000000008675         mov        ebp, edx
0000000000008677         mov        r14, rcx
000000000000867a         cmove      rbx, rax
000000000000867e         mov        r15, r8
0000000000008681         call       j___errno_location                          ; __errno_location
0000000000008686         mov        edx, ebp                                    ; argument "__base" for method j_strtol
0000000000008688         mov        dword [rax], 0x0
000000000000868e         mov        rsi, rbx                                    ; argument "__endptr" for method j_strtol
0000000000008691         mov        rdi, r12                                    ; argument "__nptr" for method j_strtol
0000000000008694         mov        r13, rax
0000000000008697         call       j_strtol                                    ; strtol
000000000000869c         mov        rcx, qword [rbx]
000000000000869f         mov        rbp, rax
00000000000086a2         cmp        rcx, r12
00000000000086a5         je         loc_8708

00000000000086a7         mov        eax, dword [r13]
00000000000086ab         test       eax, eax
00000000000086ad         jne        loc_86f0

00000000000086af         xor        r12d, r12d

                     loc_86b2:
00000000000086b2         test       r15, r15                                    ; CODE XREF=xstrtol+193
00000000000086b5         je         loc_86c4

00000000000086b7         movzx      r13d, byte [rcx]
00000000000086bb         test       r13b, r13b
00000000000086be         jne        loc_8743

                     loc_86c4:
00000000000086c4         mov        qword [r14], rbp                            ; CODE XREF=xstrtol+117, xstrtol+550

                     loc_86c7:
00000000000086c7         mov        rdi, qword [rsp+0x58+var_40]                ; CODE XREF=xstrtol+185, xstrtol+227, xstrtol+249, xstrtol+383, xstrtol+1382
00000000000086cc         xor        rdi, qword [fs:0x28]
00000000000086d5         mov        eax, r12d
00000000000086d8         jne        loc_8cee

00000000000086de         add        rsp, 0x28
00000000000086e2         pop        rbx
00000000000086e3         pop        rbp
00000000000086e4         pop        r12
00000000000086e6         pop        r13
00000000000086e8         pop        r14
00000000000086ea         pop        r15
00000000000086ec         ret
                        ; endp
00000000000086ed         align      16

                     loc_86f0:
00000000000086f0         cmp        eax, 0x22                                   ; CODE XREF=xstrtol+109
00000000000086f3         mov        r12d, 0x4
00000000000086f9         jne        loc_86c7

00000000000086fb         mov        r12d, 0x1
0000000000008701         jmp        loc_86b2
0000000000008703         align      8

                     loc_8708:
0000000000008708         test       r15, r15                                    ; CODE XREF=xstrtol+101
000000000000870b         je         loc_8ba0

0000000000008711         movzx      r13d, byte [rcx]
0000000000008715         mov        qword [rsp+0x58+var_50], rcx
000000000000871a         mov        r12d, 0x4
0000000000008720         test       r13b, r13b
0000000000008723         je         loc_86c7

0000000000008725         movsx      esi, r13b                                   ; argument "__c" for method j_strchr
0000000000008729         mov        rdi, r15                                    ; argument "__s" for method j_strchr
000000000000872c         call       j_strchr                                    ; strchr
0000000000008731         test       rax, rax
0000000000008734         mov        rcx, qword [rsp+0x58+var_50]
0000000000008739         je         loc_86c7

000000000000873b         mov        ebp, 0x1
0000000000008740         xor        r12d, r12d

                     loc_8743:
0000000000008743         movsx      esi, r13b                                   ; argument "__c" for method j_strchr, CODE XREF=xstrtol+126
0000000000008747         mov        rdi, r15                                    ; argument "__s" for method j_strchr
000000000000874a         mov        qword [rsp+0x58+var_50], rcx
000000000000874f         call       j_strchr                                    ; strchr
0000000000008754         test       rax, rax
0000000000008757         mov        rcx, qword [rsp+0x58+var_50]
000000000000875c         je         loc_87b8

000000000000875e         lea        eax, dword [r13-0x45]
0000000000008762         cmp        al, 0x2f
0000000000008764         ja         loc_87c8

0000000000008766         movabs     rdx, 0x814400308945
0000000000008770         bt         rdx, rax
0000000000008774         jae        loc_87c8

0000000000008776         mov        esi, 0x30                                   ; argument "__c" for method j_strchr
000000000000877b         mov        rdi, r15                                    ; argument "__s" for method j_strchr
000000000000877e         mov        qword [rsp+0x58+var_50], rcx
0000000000008783         call       j_strchr                                    ; strchr
0000000000008788         test       rax, rax
000000000000878b         mov        rcx, qword [rsp+0x58+var_50]
0000000000008790         je         loc_87c8

0000000000008792         movzx      eax, byte [rcx+1]
0000000000008796         cmp        al, 0x44
0000000000008798         je         loc_87a6

000000000000879a         cmp        al, 0x69
000000000000879c         je         loc_8c88

00000000000087a2         cmp        al, 0x42
00000000000087a4         jne        loc_87c8

                     loc_87a6:
00000000000087a6         mov        edi, 0x2                                    ; CODE XREF=xstrtol+344
00000000000087ab         mov        eax, 0x3e8
00000000000087b0         jmp        loc_87d2
00000000000087b2         align      8

                     loc_87b8:
00000000000087b8         mov        qword [r14], rbp                            ; case 52, CODE XREF=xstrtol+284, xstrtol+410, xstrtol+430
00000000000087bb         or         r12d, 0x2
00000000000087bf         jmp        loc_86c7
00000000000087c4         align      8

                     loc_87c8:
00000000000087c8         mov        edi, 0x1                                    ; CODE XREF=xstrtol+292, xstrtol+308, xstrtol+336, xstrtol+356
00000000000087cd         mov        eax, 0x400

                     loc_87d2:
00000000000087d2         sub        r13d, 0x42                                  ; CODE XREF=xstrtol+368, xstrtol+1627
00000000000087d6         cmp        r13b, 0x35
00000000000087da         ja         loc_87b8

00000000000087dc         lea        rsi, qword [switch_table_bce8]              ; switch_table_bce8
00000000000087e3         movzx      r13d, r13b
00000000000087e7         movsxd     rdx, dword [rsi+r13*4]
00000000000087eb         add        rdx, rsi
00000000000087ee         jmp        rdx                                         ; switch statement using table at 0xbce8, with 54 cases, 0x87b8,0x87f0,0x8850,0x8870,0x88a0,0x88d0,0x8940,0x89b0,0x89f0,0x8a50,0x8ab8,0x8b20,0x8b50

                     loc_87f0:
00000000000087f0         movabs     r8, 0x8000000000000000                      ; case 43, CODE XREF=xstrtol+430
00000000000087fa         movsxd     rsi, eax
00000000000087fd         mov        rax, r8
0000000000008800         cqo
0000000000008802         idiv       rsi
0000000000008805         cmp        rbp, rax
0000000000008808         mov        r9, rax
000000000000880b         jl         loc_8cb5

0000000000008811         movabs     r10, 0x7fffffffffffffff
000000000000881b         mov        rax, r10
000000000000881e         cqo
0000000000008820         idiv       rsi
0000000000008823         cmp        rbp, rax
0000000000008826         jg         loc_8cc2

000000000000882c         imul       rbp, rsi
0000000000008830         cmp        r9, rbp
0000000000008833         jg         loc_8cb5

0000000000008839         cmp        rax, rbp
000000000000883c         jl         loc_8cc2

0000000000008842         imul       rbp, rsi
0000000000008846         xor        eax, eax

                     loc_8848:
0000000000008848         or         r12d, eax                                   ; CODE XREF=xstrtol+1661, xstrtol+1674
000000000000884b         nop        dword [rax+rax]

                     loc_8850:
0000000000008850         movsxd     rax, edi                                    ; case 33, CODE XREF=xstrtol+430, xstrtol+601, xstrtol+650, xstrtol+935, xstrtol+1027, xstrtol+1290, xstrtol+1408, xstrtol+1600
0000000000008853         add        rcx, rax
0000000000008856         mov        eax, r12d
0000000000008859         or         eax, 0x2
000000000000885c         mov        qword [rbx], rcx
000000000000885f         cmp        byte [rcx], 0x0
0000000000008862         cmovne     r12d, eax
0000000000008866         jmp        loc_86c4
000000000000886b         align      16

                     loc_8870:
0000000000008870         movabs     rax, 0xc000000000000000                     ; case 53, CODE XREF=xstrtol+430
000000000000887a         cmp        rbp, rax
000000000000887d         jl         loc_8bb0

0000000000008883         movabs     rax, 0x3fffffffffffffff
000000000000888d         cmp        rbp, rax
0000000000008890         jg         loc_8c70

0000000000008896         add        rbp, rbp
0000000000008899         jmp        loc_8850
000000000000889b         align      32

                     loc_88a0:
00000000000088a0         movabs     rax, 0xffc0000000000000                     ; case 32, CODE XREF=xstrtol+430
00000000000088aa         cmp        rbp, rax
00000000000088ad         jl         loc_8bb0

00000000000088b3         movabs     rax, 0x3fffffffffffff
00000000000088bd         cmp        rbp, rax
00000000000088c0         jg         loc_8c70

00000000000088c6         shl        rbp, 0x9
00000000000088ca         jmp        loc_8850
00000000000088cc         align      16

                     loc_88d0:
00000000000088d0         movsxd     rsi, eax                                    ; case 24, CODE XREF=xstrtol+430
00000000000088d3         movabs     rax, 0x8000000000000000
00000000000088dd         mov        r8d, 0x7
00000000000088e3         cqo
00000000000088e5         xor        r11d, r11d
00000000000088e8         movabs     r9, 0x7fffffffffffffff
00000000000088f2         idiv       rsi
00000000000088f5         mov        r10, rax
00000000000088f8         jmp        loc_891f
00000000000088fa         align      256

                     loc_8900:
0000000000008900         mov        rax, r9                                     ; CODE XREF=xstrtol+738
0000000000008903         cqo
0000000000008905         idiv       rsi
0000000000008908         cmp        rax, rbp
000000000000890b         jl         loc_8bf8

0000000000008911         imul       rbp, rsi

                     loc_8915:
0000000000008915         sub        r8d, 0x1                                    ; CODE XREF=xstrtol+756, xstrtol+1480
0000000000008919         je         loc_8a40

                     loc_891f:
000000000000891f         cmp        r10, rbp                                    ; CODE XREF=xstrtol+696
0000000000008922         jle        loc_8900

0000000000008924         mov        r11d, 0x1
000000000000892a         movabs     rbp, 0x8000000000000000
0000000000008934         jmp        loc_8915
0000000000008936         align      64

                     loc_8940:
0000000000008940         movsxd     rsi, eax                                    ; case 23, CODE XREF=xstrtol+430
0000000000008943         movabs     rax, 0x8000000000000000
000000000000894d         mov        r8d, 0x8
0000000000008953         cqo
0000000000008955         xor        r11d, r11d
0000000000008958         movabs     r9, 0x7fffffffffffffff
0000000000008962         idiv       rsi
0000000000008965         mov        r10, rax
0000000000008968         jmp        loc_898f
000000000000896a         align      16

                     loc_8970:
0000000000008970         mov        rax, r9                                     ; CODE XREF=xstrtol+850
0000000000008973         cqo
0000000000008975         idiv       rsi
0000000000008978         cmp        rax, rbp
000000000000897b         jl         loc_8bc8

0000000000008981         imul       rbp, rsi

                     loc_8985:
0000000000008985         sub        r8d, 0x1                                    ; CODE XREF=xstrtol+868, xstrtol+1432
0000000000008989         je         loc_8a40

                     loc_898f:
000000000000898f         cmp        r10, rbp                                    ; CODE XREF=xstrtol+808
0000000000008992         jle        loc_8970

0000000000008994         mov        r11d, 0x1
000000000000899a         movabs     rbp, 0x8000000000000000
00000000000089a4         jmp        loc_8985
00000000000089a6         align      16

                     loc_89b0:
00000000000089b0         movabs     r8, 0x8000000000000000                      ; case 41, CODE XREF=xstrtol+430
00000000000089ba         movsxd     rsi, eax
00000000000089bd         mov        rax, r8
00000000000089c0         cqo
00000000000089c2         idiv       rsi
00000000000089c5         cmp        rbp, rax
00000000000089c8         jl         loc_8bb0

00000000000089ce         sub        r8, 0x1
00000000000089d2         mov        rax, r8
00000000000089d5         cqo
00000000000089d7         idiv       rsi
00000000000089da         cmp        rbp, rax
00000000000089dd         jg         loc_8c70

00000000000089e3         imul       rbp, rsi
00000000000089e7         jmp        loc_8850
00000000000089ec         align      16

                     loc_89f0:
00000000000089f0         movsxd     rsi, eax                                    ; case 37, CODE XREF=xstrtol+430
00000000000089f3         movabs     rax, 0x8000000000000000
00000000000089fd         mov        r8d, 0x3
0000000000008a03         cqo
0000000000008a05         xor        r11d, r11d
0000000000008a08         movabs     r9, 0x7fffffffffffffff
0000000000008a12         idiv       rsi
0000000000008a15         mov        r10, rax

                     loc_8a18:
0000000000008a18         cmp        r10, rbp                                    ; CODE XREF=xstrtol+1018
0000000000008a1b         jg         loc_8c10

0000000000008a21         mov        rax, r9
0000000000008a24         cqo
0000000000008a26         idiv       rsi
0000000000008a29         cmp        rax, rbp
0000000000008a2c         jl         loc_8ca0

0000000000008a32         imul       rbp, rsi

                     loc_8a36:
0000000000008a36         sub        r8d, 0x1                                    ; CODE XREF=xstrtol+1504, xstrtol+1648
0000000000008a3a         jne        loc_8a18

0000000000008a3c         nop        dword [rax]

                     loc_8a40:
0000000000008a40         or         r12d, r11d                                  ; CODE XREF=xstrtol+729, xstrtol+841, xstrtol+1113, xstrtol+1217, xstrtol+1368
0000000000008a43         jmp        loc_8850
0000000000008a48         align      16

                     loc_8a50:
0000000000008a50         movsxd     rsi, eax                                    ; case 3, CODE XREF=xstrtol+430
0000000000008a53         movabs     rax, 0x8000000000000000
0000000000008a5d         mov        r8d, 0x6
0000000000008a63         cqo
0000000000008a65         xor        r11d, r11d
0000000000008a68         movabs     r9, 0x7fffffffffffffff
0000000000008a72         idiv       rsi
0000000000008a75         mov        r10, rax
0000000000008a78         jmp        loc_8a9b
0000000000008a7a         align      128

                     loc_8a80:
0000000000008a80         mov        rax, r9                                     ; CODE XREF=xstrtol+1118
0000000000008a83         cqo
0000000000008a85         idiv       rsi
0000000000008a88         cmp        rax, rbp
0000000000008a8b         jl         loc_8c28

0000000000008a91         imul       rbp, rsi

                     loc_8a95:
0000000000008a95         sub        r8d, 0x1                                    ; CODE XREF=xstrtol+1136, xstrtol+1528
0000000000008a99         je         loc_8a40

                     loc_8a9b:
0000000000008a9b         cmp        r10, rbp                                    ; CODE XREF=xstrtol+1080
0000000000008a9e         jle        loc_8a80

0000000000008aa0         mov        r11d, 0x1
0000000000008aa6         movabs     rbp, 0x8000000000000000
0000000000008ab0         jmp        loc_8a95
0000000000008ab2         align      8

                     loc_8ab8:
0000000000008ab8         movsxd     rsi, eax                                    ; case 14, CODE XREF=xstrtol+430
0000000000008abb         movabs     rax, 0x8000000000000000
0000000000008ac5         mov        r8d, 0x5
0000000000008acb         cqo
0000000000008acd         xor        r11d, r11d
0000000000008ad0         movabs     r9, 0x7fffffffffffffff
0000000000008ada         idiv       rsi
0000000000008add         mov        r10, rax
0000000000008ae0         jmp        loc_8b07
0000000000008ae2         align      8

                     loc_8ae8:
0000000000008ae8         mov        rax, r9                                     ; CODE XREF=xstrtol+1226
0000000000008aeb         cqo
0000000000008aed         idiv       rsi
0000000000008af0         cmp        rax, rbp
0000000000008af3         jl         loc_8c40

0000000000008af9         imul       rbp, rsi

                     loc_8afd:
0000000000008afd         sub        r8d, 0x1                                    ; CODE XREF=xstrtol+1244, xstrtol+1552
0000000000008b01         je         loc_8a40

                     loc_8b07:
0000000000008b07         cmp        r10, rbp                                    ; CODE XREF=xstrtol+1184
0000000000008b0a         jle        loc_8ae8

0000000000008b0c         mov        r11d, 0x1
0000000000008b12         movabs     rbp, 0x8000000000000000
0000000000008b1c         jmp        loc_8afd
0000000000008b1e         align      32

                     loc_8b20:
0000000000008b20         movabs     rax, 0xffe0000000000000                     ; case 0, CODE XREF=xstrtol+430
0000000000008b2a         cmp        rbp, rax
0000000000008b2d         jl         loc_8bb0

0000000000008b33         movabs     rax, 0x1fffffffffffff
0000000000008b3d         cmp        rbp, rax
0000000000008b40         jg         loc_8c70

0000000000008b46         shl        rbp, 0xa
0000000000008b4a         jmp        loc_8850
0000000000008b4f         align      16

                     loc_8b50:
0000000000008b50         movsxd     rsi, eax                                    ; case 50, CODE XREF=xstrtol+430
0000000000008b53         movabs     rax, 0x8000000000000000
0000000000008b5d         mov        r8d, 0x4
0000000000008b63         cqo
0000000000008b65         xor        r11d, r11d
0000000000008b68         movabs     r9, 0x7fffffffffffffff
0000000000008b72         idiv       rsi
0000000000008b75         mov        r10, rax

                     loc_8b78:
0000000000008b78         cmp        r10, rbp                                    ; CODE XREF=xstrtol+1366
0000000000008b7b         jg         loc_8be0

0000000000008b7d         mov        rax, r9
0000000000008b80         cqo
0000000000008b82         idiv       rsi
0000000000008b85         cmp        rax, rbp
0000000000008b88         jl         loc_8c58

0000000000008b8e         imul       rbp, rsi

                     loc_8b92:
0000000000008b92         sub        r8d, 0x1                                    ; CODE XREF=xstrtol+1456, xstrtol+1576
0000000000008b96         jne        loc_8b78

0000000000008b98         jmp        loc_8a40
0000000000008b9d         align      32

                     loc_8ba0:
0000000000008ba0         mov        r12d, 0x4                                   ; CODE XREF=xstrtol+203
0000000000008ba6         jmp        loc_86c7
0000000000008bab         align      16

                     loc_8bb0:
0000000000008bb0         mov        r12d, 0x1                                   ; CODE XREF=xstrtol+573, xstrtol+621, xstrtol+904, xstrtol+1261
0000000000008bb6         movabs     rbp, 0x8000000000000000
0000000000008bc0         jmp        loc_8850
0000000000008bc5         align      8

                     loc_8bc8:
0000000000008bc8         mov        r11d, 0x1                                   ; CODE XREF=xstrtol+827
0000000000008bce         movabs     rbp, 0x7fffffffffffffff
0000000000008bd8         jmp        loc_8985
0000000000008bdd         align      32

                     loc_8be0:
0000000000008be0         mov        r11d, 0x1                                   ; CODE XREF=xstrtol+1339
0000000000008be6         movabs     rbp, 0x8000000000000000
0000000000008bf0         jmp        loc_8b92
0000000000008bf2         align      8

                     loc_8bf8:
0000000000008bf8         mov        r11d, 0x1                                   ; CODE XREF=xstrtol+715
0000000000008bfe         movabs     rbp, 0x7fffffffffffffff
0000000000008c08         jmp        loc_8915
0000000000008c0d         align      16

                     loc_8c10:
0000000000008c10         mov        r11d, 0x1                                   ; CODE XREF=xstrtol+987
0000000000008c16         movabs     rbp, 0x8000000000000000
0000000000008c20         jmp        loc_8a36
0000000000008c25         align      8

                     loc_8c28:
0000000000008c28         mov        r11d, 0x1                                   ; CODE XREF=xstrtol+1099
0000000000008c2e         movabs     rbp, 0x7fffffffffffffff
0000000000008c38         jmp        loc_8a95
0000000000008c3d         align      64

                     loc_8c40:
0000000000008c40         mov        r11d, 0x1                                   ; CODE XREF=xstrtol+1203
0000000000008c46         movabs     rbp, 0x7fffffffffffffff
0000000000008c50         jmp        loc_8afd
0000000000008c55         align      8

                     loc_8c58:
0000000000008c58         mov        r11d, 0x1                                   ; CODE XREF=xstrtol+1352
0000000000008c5e         movabs     rbp, 0x7fffffffffffffff
0000000000008c68         jmp        loc_8b92
0000000000008c6d         align      16

                     loc_8c70:
0000000000008c70         mov        r12d, 0x1                                   ; CODE XREF=xstrtol+592, xstrtol+640, xstrtol+925, xstrtol+1280
0000000000008c76         movabs     rbp, 0x7fffffffffffffff
0000000000008c80         jmp        loc_8850
0000000000008c85         align      8

                     loc_8c88:
0000000000008c88         xor        edi, edi                                    ; CODE XREF=xstrtol+348
0000000000008c8a         cmp        byte [rcx+2], 0x42
0000000000008c8e         mov        eax, 0x400
0000000000008c93         sete       dil
0000000000008c97         lea        edi, dword [rdi+rdi+1]
0000000000008c9b         jmp        loc_87d2

                     loc_8ca0:
0000000000008ca0         mov        r11d, 0x1                                   ; CODE XREF=xstrtol+1004
0000000000008ca6         movabs     rbp, 0x7fffffffffffffff
0000000000008cb0         jmp        loc_8a36

                     loc_8cb5:
0000000000008cb5         mov        eax, 0x1                                    ; CODE XREF=xstrtol+459, xstrtol+499
0000000000008cba         mov        rbp, r8
0000000000008cbd         jmp        loc_8848

                     loc_8cc2:
0000000000008cc2         mov        eax, 0x1                                    ; CODE XREF=xstrtol+486, xstrtol+508
0000000000008cc7         mov        rbp, r10
0000000000008cca         jmp        loc_8848

                     loc_8ccf:
0000000000008ccf         lea        rcx, qword [__PRETTY_FUNCTION__.4162]       ; argument "__function" for method j___assert_fail, "xstrtol", CODE XREF=xstrtol+33
0000000000008cd6         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/xstrtol.c"
0000000000008cdd         lea        rdi, qword [a0StrtolbaseStr]                ; argument "__assertion" for method j___assert_fail, "0 <= strtol_base && strtol_base <= 36"
0000000000008ce4         mov        edx, 0x54                                   ; argument "__line" for method j___assert_fail
0000000000008ce9         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_8cee:
0000000000008cee         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=xstrtol+152
                        ; endp
0000000000008cf3         align      256                                         ; End of unwind block (FDE at 0xcf64)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int8_t, -72
        ;    var_50: int64_t, -80


                     xstrtoumax:
0000000000008d00         push       r15                                         ; Begin of unwind block (FDE at 0xcfb4), CODE XREF=main+1153, unit_to_umax+96
0000000000008d02         push       r14
0000000000008d04         push       r13
0000000000008d06         push       r12
0000000000008d08         push       rbp
0000000000008d09         push       rbx
0000000000008d0a         sub        rsp, 0x28
0000000000008d0e         mov        rax, qword [fs:0x28]
0000000000008d17         mov        qword [rsp+0x58+var_40], rax
0000000000008d1c         xor        eax, eax
0000000000008d1e         cmp        edx, 0x24
0000000000008d21         ja         loc_9085

0000000000008d27         lea        rax, qword [rsp+0x58+var_48]
0000000000008d2c         mov        r15, rsi
0000000000008d2f         test       rsi, rsi
0000000000008d32         mov        rbp, rdi
0000000000008d35         mov        dword [rsp+0x58+var_50], edx
0000000000008d39         mov        r14, rcx
0000000000008d3c         mov        r13, r8
0000000000008d3f         cmove      r15, rax
0000000000008d43         call       j___errno_location                          ; __errno_location
0000000000008d48         mov        dword [rax], 0x0
0000000000008d4e         mov        r12, rax
0000000000008d51         movzx      ebx, byte [rbp]
0000000000008d55         call       j___ctype_b_loc                             ; __ctype_b_loc
0000000000008d5a         mov        edx, dword [rsp+0x58+var_50]
0000000000008d5e         mov        rsi, qword [rax]
0000000000008d61         mov        rax, rbp
0000000000008d64         jmp        loc_8d77
0000000000008d66         align      16

                     loc_8d70:
0000000000008d70         add        rax, 0x1                                    ; CODE XREF=xstrtoumax+127
0000000000008d74         movzx      ebx, byte [rax]

                     loc_8d77:
0000000000008d77         movzx      ecx, bl                                     ; CODE XREF=xstrtoumax+100
0000000000008d7a         test       byte [rsi+rcx*2+1], 0x20
0000000000008d7f         jne        loc_8d70

0000000000008d81         cmp        bl, 0x2d
0000000000008d84         je         loc_8dd8

0000000000008d86         xor        ecx, ecx
0000000000008d88         mov        rsi, r15
0000000000008d8b         mov        rdi, rbp
0000000000008d8e         call       j___strtoul_internal                        ; __strtoul_internal
0000000000008d93         mov        rcx, qword [r15]
0000000000008d96         mov        rbx, rax
0000000000008d99         cmp        rcx, rbp
0000000000008d9c         je         loc_8dc8

0000000000008d9e         mov        eax, dword [r12]
0000000000008da2         test       eax, eax
0000000000008da4         je         loc_8e08

0000000000008da6         cmp        eax, 0x22
0000000000008da9         mov        ebp, 0x1
0000000000008dae         jne        loc_8dd8

                     loc_8db0:
0000000000008db0         test       r13, r13                                    ; CODE XREF=xstrtoumax+266
0000000000008db3         je         loc_8dbe

0000000000008db5         movzx      r12d, byte [rcx]
0000000000008db9         test       r12b, r12b
0000000000008dbc         jne        loc_8e37

                     loc_8dbe:
0000000000008dbe         mov        qword [r14], rbx                            ; CODE XREF=xstrtoumax+179
0000000000008dc1         jmp        loc_8ddd
0000000000008dc3         align      8

                     loc_8dc8:
0000000000008dc8         test       r13, r13                                    ; CODE XREF=xstrtoumax+156
0000000000008dcb         mov        qword [rsp+0x58+var_50], rcx
0000000000008dd0         jne        loc_8e10

0000000000008dd2         nop        word [rax+rax]

                     loc_8dd8:
0000000000008dd8         mov        ebp, 0x4                                    ; CODE XREF=xstrtoumax+132, xstrtoumax+174, xstrtoumax+280, xstrtoumax+309

                     loc_8ddd:
0000000000008ddd         mov        rdi, qword [rsp+0x58+var_40]                ; CODE XREF=xstrtoumax+193, xstrtoumax+535, xstrtoumax+546
0000000000008de2         xor        rdi, qword [fs:0x28]
0000000000008deb         mov        eax, ebp
0000000000008ded         jne        loc_9080

0000000000008df3         add        rsp, 0x28
0000000000008df7         pop        rbx
0000000000008df8         pop        rbp
0000000000008df9         pop        r12
0000000000008dfb         pop        r13
0000000000008dfd         pop        r14
0000000000008dff         pop        r15
0000000000008e01         ret
                        ; endp
0000000000008e02         align      8

                     loc_8e08:
0000000000008e08         xor        ebp, ebp                                    ; CODE XREF=xstrtoumax+164
0000000000008e0a         jmp        loc_8db0
0000000000008e0c         align      16

                     loc_8e10:
0000000000008e10         movzx      r12d, byte [rbp]                            ; CODE XREF=xstrtoumax+208
0000000000008e15         test       r12b, r12b
0000000000008e18         je         loc_8dd8

0000000000008e1a         movsx      esi, r12b                                   ; argument "__c" for method j_strchr
0000000000008e1e         mov        rdi, r13                                    ; argument "__s" for method j_strchr
0000000000008e21         xor        ebp, ebp
0000000000008e23         call       j_strchr                                    ; strchr
0000000000008e28         test       rax, rax
0000000000008e2b         mov        ebx, 0x1
0000000000008e30         mov        rcx, qword [rsp+0x58+var_50]
0000000000008e35         je         loc_8dd8

                     loc_8e37:
0000000000008e37         movsx      esi, r12b                                   ; argument "__c" for method j_strchr, CODE XREF=xstrtoumax+188
0000000000008e3b         mov        rdi, r13                                    ; argument "__s" for method j_strchr
0000000000008e3e         mov        qword [rsp+0x58+var_50], rcx
0000000000008e43         call       j_strchr                                    ; strchr
0000000000008e48         test       rax, rax
0000000000008e4b         mov        rcx, qword [rsp+0x58+var_50]
0000000000008e50         je         loc_8f1c

0000000000008e56         lea        eax, dword [r12-0x45]
0000000000008e5b         cmp        al, 0x2f
0000000000008e5d         ja         loc_8eb0

0000000000008e5f         movabs     rdx, 0x814400308945
0000000000008e69         bt         rdx, rax
0000000000008e6d         jae        loc_8eb0

0000000000008e6f         mov        esi, 0x30                                   ; argument "__c" for method j_strchr
0000000000008e74         mov        rdi, r13                                    ; argument "__s" for method j_strchr
0000000000008e77         mov        qword [rsp+0x58+var_50], rcx
0000000000008e7c         call       j_strchr                                    ; strchr
0000000000008e81         test       rax, rax
0000000000008e84         mov        rcx, qword [rsp+0x58+var_50]
0000000000008e89         je         loc_8eb0

0000000000008e8b         movzx      eax, byte [rcx+1]
0000000000008e8f         cmp        al, 0x44
0000000000008e91         je         loc_8e9f

0000000000008e93         cmp        al, 0x69
0000000000008e95         je         loc_9068

0000000000008e9b         cmp        al, 0x42
0000000000008e9d         jne        loc_8eb0

                     loc_8e9f:
0000000000008e9f         mov        edi, 0x2                                    ; CODE XREF=xstrtoumax+401
0000000000008ea4         mov        esi, 0x3e8
0000000000008ea9         jmp        loc_8eba
0000000000008eab         align      16

                     loc_8eb0:
0000000000008eb0         mov        edi, 0x1                                    ; CODE XREF=xstrtoumax+349, xstrtoumax+365, xstrtoumax+393, xstrtoumax+413
0000000000008eb5         mov        esi, 0x400

                     loc_8eba:
0000000000008eba         sub        r12d, 0x42                                  ; CODE XREF=xstrtoumax+425, xstrtoumax+891
0000000000008ebe         cmp        r12b, 0x35
0000000000008ec2         ja         loc_8f1c

0000000000008ec4         lea        rdx, qword [switch_table_bdc8]              ; switch_table_bdc8
0000000000008ecb         movzx      r12d, r12b
0000000000008ecf         movsxd     rax, dword [rdx+r12*4]
0000000000008ed3         add        rax, rdx
0000000000008ed6         jmp        rax                                         ; switch statement using table at 0xbdc8, with 54 cases, 0x8ed8,0x8f00,0x8f1c,0x8f27,0x8f3d,0x8f54,0x8f7a,0x8f9f,0x8fbf,0x8fe0,0x9003,0x9026,0x903c

                     loc_8ed8:
0000000000008ed8         mov        rax, rbx                                    ; case 43, CODE XREF=xstrtoumax+470
0000000000008edb         mul        rsi
0000000000008ede         jo         loc_90d1

0000000000008ee4         xor        r8d, r8d

                     loc_8ee7:
0000000000008ee7         mul        rsi                                         ; CODE XREF=xstrtoumax+846, xstrtoumax+862, xstrtoumax+987
0000000000008eea         jo         loc_90c2

0000000000008ef0         mov        rbx, rax

                     loc_8ef3:
0000000000008ef3         or         ebp, r8d                                    ; CODE XREF=xstrtoumax+972
0000000000008ef6         nop        word [cs:rax+rax]

                     loc_8f00:
0000000000008f00         movsxd     rdi, edi                                    ; case 33, CODE XREF=xstrtoumax+470, xstrtoumax+571, xstrtoumax+594, xstrtoumax+632, xstrtoumax+712, xstrtoumax+727, xstrtoumax+823
0000000000008f03         mov        eax, ebp
0000000000008f05         add        rcx, rdi
0000000000008f08         or         eax, 0x2
0000000000008f0b         mov        qword [r15], rcx
0000000000008f0e         cmp        byte [rcx], 0x0
0000000000008f11         mov        qword [r14], rbx
0000000000008f14         cmovne     ebp, eax
0000000000008f17         jmp        loc_8ddd

                     loc_8f1c:
0000000000008f1c         mov        qword [r14], rbx                            ; case 52, CODE XREF=xstrtoumax+336, xstrtoumax+450, xstrtoumax+470
0000000000008f1f         or         ebp, 0x2
0000000000008f22         jmp        loc_8ddd

                     loc_8f27:
0000000000008f27         mov        edx, 0x2                                    ; case 53, CODE XREF=xstrtoumax+470
0000000000008f2c         mov        rax, rdx
0000000000008f2f         mul        rbx
0000000000008f32         jo         loc_8fce

0000000000008f38         add        rbx, rbx
0000000000008f3b         jmp        loc_8f00

                     loc_8f3d:
0000000000008f3d         mov        edx, 0x200                                  ; case 32, CODE XREF=xstrtoumax+470
0000000000008f42         mov        rax, rdx
0000000000008f45         mul        rbx
0000000000008f48         jo         loc_8fce

0000000000008f4e         shl        rbx, 0x9
0000000000008f52         jmp        loc_8f00

                     loc_8f54:
0000000000008f54         mov        r8d, 0x7                                    ; case 24, CODE XREF=xstrtoumax+470
0000000000008f5a         xor        r9d, r9d
0000000000008f5d         nop        dword [rax]

                     loc_8f60:
0000000000008f60         mov        rax, rbx                                    ; CODE XREF=xstrtoumax+627
0000000000008f63         mul        rsi
0000000000008f66         mov        rbx, rax
0000000000008f69         jo         loc_90fe

                     loc_8f6f:
0000000000008f6f         sub        r8d, 0x1                                    ; CODE XREF=xstrtoumax+1032
0000000000008f73         jne        loc_8f60

                     loc_8f75:
0000000000008f75         or         ebp, r9d                                    ; CODE XREF=xstrtoumax+669, xstrtoumax+701, xstrtoumax+766, xstrtoumax+801
0000000000008f78         jmp        loc_8f00

                     loc_8f7a:
0000000000008f7a         mov        r8d, 0x8                                    ; case 23, CODE XREF=xstrtoumax+470
0000000000008f80         xor        r9d, r9d
0000000000008f83         nop        dword [rax+rax]

                     loc_8f88:
0000000000008f88         mov        rax, rbx                                    ; CODE XREF=xstrtoumax+667
0000000000008f8b         mul        rsi
0000000000008f8e         mov        rbx, rax
0000000000008f91         jo         loc_90e0

                     loc_8f97:
0000000000008f97         sub        r8d, 0x1                                    ; CODE XREF=xstrtoumax+1002
0000000000008f9b         jne        loc_8f88

0000000000008f9d         jmp        loc_8f75

                     loc_8f9f:
0000000000008f9f         mov        r8d, 0x4                                    ; case 50, CODE XREF=xstrtoumax+470
0000000000008fa5         xor        r9d, r9d

                     loc_8fa8:
0000000000008fa8         mov        rax, rbx                                    ; CODE XREF=xstrtoumax+699
0000000000008fab         mul        rsi
0000000000008fae         mov        rbx, rax
0000000000008fb1         jo         loc_90b3

                     loc_8fb7:
0000000000008fb7         sub        r8d, 0x1                                    ; CODE XREF=xstrtoumax+957
0000000000008fbb         jne        loc_8fa8

0000000000008fbd         jmp        loc_8f75

                     loc_8fbf:
0000000000008fbf         mov        rax, rbx                                    ; case 41, CODE XREF=xstrtoumax+470
0000000000008fc2         mul        rsi
0000000000008fc5         mov        rbx, rax
0000000000008fc8         jno        loc_8f00

                     loc_8fce:
0000000000008fce         mov        ebp, 0x1                                    ; CODE XREF=xstrtoumax+562, xstrtoumax+584, xstrtoumax+817
0000000000008fd3         or         rbx, 0xffffffffffffffff
0000000000008fd7         jmp        loc_8f00
0000000000008fdc         align      32

                     loc_8fe0:
0000000000008fe0         mov        r8d, 0x5                                    ; case 14, CODE XREF=xstrtoumax+470
0000000000008fe6         xor        r9d, r9d

                     loc_8fe9:
0000000000008fe9         mov        rax, rbx                                    ; CODE XREF=xstrtoumax+764
0000000000008fec         mul        rsi
0000000000008fef         mov        rbx, rax
0000000000008ff2         jo         loc_90ef

                     loc_8ff8:
0000000000008ff8         sub        r8d, 0x1                                    ; CODE XREF=xstrtoumax+1017
0000000000008ffc         jne        loc_8fe9

0000000000008ffe         jmp        loc_8f75

                     loc_9003:
0000000000009003         mov        r8d, 0x6                                    ; case 3, CODE XREF=xstrtoumax+470
0000000000009009         xor        r9d, r9d

                     loc_900c:
000000000000900c         mov        rax, rbx                                    ; CODE XREF=xstrtoumax+799
000000000000900f         mul        rsi
0000000000009012         mov        rbx, rax
0000000000009015         jo         loc_90a4

                     loc_901b:
000000000000901b         sub        r8d, 0x1                                    ; CODE XREF=xstrtoumax+942
000000000000901f         jne        loc_900c

0000000000009021         jmp        loc_8f75

                     loc_9026:
0000000000009026         mov        edx, 0x400                                  ; case 0, CODE XREF=xstrtoumax+470
000000000000902b         mov        rax, rdx
000000000000902e         mul        rbx
0000000000009031         jo         loc_8fce

0000000000009033         shl        rbx, 0xa
0000000000009037         jmp        loc_8f00

                     loc_903c:
000000000000903c         mov        rax, rbx                                    ; case 37, CODE XREF=xstrtoumax+470
000000000000903f         mul        rsi
0000000000009042         jo         loc_910d

0000000000009048         xor        r8d, r8d

                     loc_904b:
000000000000904b         mul        rsi                                         ; CODE XREF=xstrtoumax+1047
000000000000904e         jno        loc_8ee7

0000000000009054         mov        r8d, 0x1
000000000000905a         or         rax, 0xffffffffffffffff
000000000000905e         jmp        loc_8ee7
0000000000009063         align      8

                     loc_9068:
0000000000009068         xor        edi, edi                                    ; CODE XREF=xstrtoumax+405
000000000000906a         cmp        byte [rcx+2], 0x42
000000000000906e         mov        esi, 0x400
0000000000009073         sete       dil
0000000000009077         lea        edi, dword [rdi+rdi+1]
000000000000907b         jmp        loc_8eba

                     loc_9080:
0000000000009080         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=xstrtoumax+237
                        ; endp

                     loc_9085:
0000000000009085         lea        rcx, qword [__PRETTY_FUNCTION__.4162_bea0]  ; argument "__function" for method j___assert_fail, "xstrtoumax", CODE XREF=xstrtoumax+33
000000000000908c         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/xstrtol.c"
0000000000009093         lea        rdi, qword [a0StrtolbaseStr]                ; argument "__assertion" for method j___assert_fail, "0 <= strtol_base && strtol_base <= 36"
000000000000909a         mov        edx, 0x54                                   ; argument "__line" for method j___assert_fail
000000000000909f         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_90a4:
00000000000090a4         mov        r9d, 0x1                                    ; CODE XREF=xstrtoumax+789
00000000000090aa         or         rbx, 0xffffffffffffffff
00000000000090ae         jmp        loc_901b

                     loc_90b3:
00000000000090b3         mov        r9d, 0x1                                    ; CODE XREF=xstrtoumax+689
00000000000090b9         or         rbx, 0xffffffffffffffff
00000000000090bd         jmp        loc_8fb7

                     loc_90c2:
00000000000090c2         mov        r8d, 0x1                                    ; CODE XREF=xstrtoumax+490
00000000000090c8         or         rbx, 0xffffffffffffffff
00000000000090cc         jmp        loc_8ef3

                     loc_90d1:
00000000000090d1         or         rax, 0xffffffffffffffff                     ; CODE XREF=xstrtoumax+478
00000000000090d5         mov        r8d, 0x1
00000000000090db         jmp        loc_8ee7

                     loc_90e0:
00000000000090e0         mov        r9d, 0x1                                    ; CODE XREF=xstrtoumax+657
00000000000090e6         or         rbx, 0xffffffffffffffff
00000000000090ea         jmp        loc_8f97

                     loc_90ef:
00000000000090ef         mov        r9d, 0x1                                    ; CODE XREF=xstrtoumax+754
00000000000090f5         or         rbx, 0xffffffffffffffff
00000000000090f9         jmp        loc_8ff8

                     loc_90fe:
00000000000090fe         mov        r9d, 0x1                                    ; CODE XREF=xstrtoumax+617
0000000000009104         or         rbx, 0xffffffffffffffff
0000000000009108         jmp        loc_8f6f

                     loc_910d:
000000000000910d         mov        r8d, 0x1                                    ; CODE XREF=xstrtoumax+834
0000000000009113         or         rax, 0xffffffffffffffff
0000000000009117         jmp        loc_904b
000000000000911c         align      32                                          ; End of unwind block (FDE at 0xcfb4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_34: int8_t, -52


                     rpl_mbrtowc:
0000000000009120         push       r13                                         ; Begin of unwind block (FDE at 0xd004), CODE XREF=sub_6910+534
0000000000009122         push       r12
0000000000009124         mov        r13, rsi
0000000000009127         push       rbp
0000000000009128         push       rbx
0000000000009129         mov        rbx, rdi
000000000000912c         mov        r12, rdx
000000000000912f         sub        rsp, 0x18
0000000000009133         mov        rax, qword [fs:0x28]
000000000000913c         mov        qword [rsp+0x38+var_30], rax
0000000000009141         xor        eax, eax
0000000000009143         lea        rax, qword [rsp+0x38+var_34]
0000000000009148         test       rdi, rdi
000000000000914b         cmove      rbx, rax
000000000000914f         mov        rdi, rbx                                    ; argument "__pwc" for method j_mbrtowc
0000000000009152         call       j_mbrtowc                                   ; mbrtowc
0000000000009157         cmp        rax, 0xfffffffffffffffd
000000000000915b         mov        rbp, rax
000000000000915e         jbe        loc_9180

0000000000009160         test       r12, r12
0000000000009163         je         loc_9180

0000000000009165         xor        edi, edi
0000000000009167         call       hard_locale                                 ; hard_locale
000000000000916c         test       al, al
000000000000916e         jne        loc_9180

0000000000009170         movzx      eax, byte [r13]
0000000000009175         mov        ebp, 0x1
000000000000917a         mov        dword [rbx], eax
000000000000917c         nop        dword [rax]

                     loc_9180:
0000000000009180         mov        rdx, qword [rsp+0x38+var_30]                ; CODE XREF=rpl_mbrtowc+62, rpl_mbrtowc+67, rpl_mbrtowc+78
0000000000009185         xor        rdx, qword [fs:0x28]
000000000000918e         mov        rax, rbp
0000000000009191         jne        loc_919e

0000000000009193         add        rsp, 0x18
0000000000009197         pop        rbx
0000000000009198         pop        rbp
0000000000009199         pop        r12
000000000000919b         pop        r13
000000000000919d         ret
                        ; endp

                     loc_919e:
000000000000919e         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=rpl_mbrtowc+113
                        ; endp
00000000000091a3         align      16                                          ; End of unwind block (FDE at 0xd004)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stream:
00000000000091b0         push       r12                                         ; Begin of unwind block (FDE at 0xd044), CODE XREF=close_stdout+13, close_stdout+51
00000000000091b2         push       rbp
00000000000091b3         mov        rbp, rdi
00000000000091b6         push       rbx
00000000000091b7         call       j___fpending                                ; __fpending
00000000000091bc         mov        ebx, dword [rbp]
00000000000091bf         mov        rdi, rbp
00000000000091c2         mov        r12, rax
00000000000091c5         call       rpl_fclose                                  ; rpl_fclose
00000000000091ca         and        ebx, 0x20
00000000000091cd         test       ebx, ebx
00000000000091cf         jne        loc_91e8

00000000000091d1         test       eax, eax
00000000000091d3         je         loc_91df

00000000000091d5         test       r12, r12
00000000000091d8         mov        eax, 0xffffffff
00000000000091dd         je         loc_9218

                     loc_91df:
00000000000091df         pop        rbx                                         ; CODE XREF=close_stream+35
00000000000091e0         pop        rbp
00000000000091e1         pop        r12
00000000000091e3         ret
                        ; endp
00000000000091e4         align      8

                     loc_91e8:
00000000000091e8         test       eax, eax                                    ; CODE XREF=close_stream+31
00000000000091ea         jne        loc_9208

00000000000091ec         call       j___errno_location                          ; __errno_location
00000000000091f1         mov        dword [rax], 0x0
00000000000091f7         mov        eax, 0xffffffff
00000000000091fc         pop        rbx
00000000000091fd         pop        rbp
00000000000091fe         pop        r12
0000000000009200         ret
                        ; endp
0000000000009201         align      8

                     loc_9208:
0000000000009208         pop        rbx                                         ; CODE XREF=close_stream+58
0000000000009209         mov        eax, 0xffffffff
000000000000920e         pop        rbp
000000000000920f         pop        r12
0000000000009211         ret
                        ; endp
0000000000009212         align      8

                     loc_9218:
0000000000009218         call       j___errno_location                          ; __errno_location, CODE XREF=close_stream+45
000000000000921d         cmp        dword [rax], 0x9
0000000000009220         pop        rbx
0000000000009221         pop        rbp
0000000000009222         pop        r12
0000000000009224         setne      al
0000000000009227         movzx      eax, al
000000000000922a         neg        eax
000000000000922c         ret
                        ; endp
000000000000922d         align      16                                          ; End of unwind block (FDE at 0xd044)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hard_locale:
0000000000009230         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0xd094), CODE XREF=rpl_mbrtowc+71
0000000000009234         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
0000000000009236         call       j_setlocale                                 ; setlocale
000000000000923b         mov        rdx, rax
000000000000923e         mov        eax, 0x1
0000000000009243         test       rdx, rdx
0000000000009246         je         loc_9265

0000000000009248         lea        rdi, qword [__PRETTY_FUNCTION__.4162_bea0+11] ; 0xbeab
000000000000924f         mov        ecx, 0x2
0000000000009254         mov        rsi, rdx
0000000000009257         rep  cmpsb byte [rsi], byte [rdi]
0000000000009259         seta       cl
000000000000925c         sbb        cl, 0x0
000000000000925f         xor        eax, eax
0000000000009261         test       cl, cl
0000000000009263         jne        loc_9270

                     loc_9265:
0000000000009265         add        rsp, 0x8                                    ; CODE XREF=hard_locale+22
0000000000009269         ret
                        ; endp
000000000000926a         align      16

                     loc_9270:
0000000000009270         lea        rdi, qword [aPosix]                         ; "POSIX", CODE XREF=hard_locale+51
0000000000009277         mov        ecx, 0x6
000000000000927c         mov        rsi, rdx
000000000000927f         rep  cmpsb byte [rsi], byte [rdi]
0000000000009281         seta       al
0000000000009284         sbb        al, 0x0
0000000000009286         test       al, al
0000000000009288         setne      al
000000000000928b         add        rsp, 0x8
000000000000928f         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     locale_charset:
0000000000009290         sub        rsp, 0x8                                    ; End of unwind block (FDE at 0xd094), Begin of unwind block (FDE at 0xd0b4), CODE XREF=gettext_quote.part.1+11
0000000000009294         mov        edi, 0xe                                    ; argument "__item" for method j_nl_langinfo
0000000000009299         call       j_nl_langinfo                               ; nl_langinfo
000000000000929e         test       rax, rax
00000000000092a1         je         loc_92c0

00000000000092a3         cmp        byte [rax], 0x0
00000000000092a6         lea        rdx, qword [aAscii]                         ; "ASCII"
00000000000092ad         cmove      rax, rdx
00000000000092b1         add        rsp, 0x8
00000000000092b5         ret
                        ; endp
00000000000092b6         align      64

                     loc_92c0:
00000000000092c0         lea        rax, qword [aAscii]                         ; "ASCII", CODE XREF=locale_charset+17
00000000000092c7         add        rsp, 0x8
00000000000092cb         ret
                        ; endp
00000000000092cc         align      16                                          ; End of unwind block (FDE at 0xd0b4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fclose:
00000000000092d0         push       r12                                         ; Begin of unwind block (FDE at 0xd0d4), CODE XREF=close_stream+21
00000000000092d2         push       rbp
00000000000092d3         push       rbx
00000000000092d4         mov        rbx, rdi
00000000000092d7         call       j_fileno                                    ; fileno
00000000000092dc         test       eax, eax
00000000000092de         mov        rdi, rbx
00000000000092e1         js         loc_9337

00000000000092e3         call       j___freading                                ; __freading
00000000000092e8         test       eax, eax
00000000000092ea         jne        loc_9318

                     loc_92ec:
00000000000092ec         mov        rdi, rbx                                    ; CODE XREF=rpl_fclose+98
00000000000092ef         call       rpl_fflush                                  ; rpl_fflush
00000000000092f4         test       eax, eax
00000000000092f6         je         loc_9334

00000000000092f8         call       j___errno_location                          ; __errno_location
00000000000092fd         mov        r12d, dword [rax]
0000000000009300         mov        rdi, rbx                                    ; argument "__stream" for method j_fclose
0000000000009303         mov        rbp, rax
0000000000009306         call       j_fclose                                    ; fclose
000000000000930b         test       r12d, r12d
000000000000930e         jne        loc_9340

                     loc_9310:
0000000000009310         pop        rbx                                         ; CODE XREF=rpl_fclose+121
0000000000009311         pop        rbp
0000000000009312         pop        r12
0000000000009314         ret
                        ; endp
0000000000009315         align      8

                     loc_9318:
0000000000009318         mov        rdi, rbx                                    ; argument "__stream" for method j_fileno, CODE XREF=rpl_fclose+26
000000000000931b         call       j_fileno                                    ; fileno
0000000000009320         xor        esi, esi                                    ; argument "__offset" for method j_lseek
0000000000009322         mov        edx, 0x1                                    ; argument "__whence" for method j_lseek
0000000000009327         mov        edi, eax                                    ; argument "__fd" for method j_lseek
0000000000009329         call       j_lseek                                     ; lseek
000000000000932e         cmp        rax, 0xffffffffffffffff
0000000000009332         jne        loc_92ec

                     loc_9334:
0000000000009334         mov        rdi, rbx                                    ; CODE XREF=rpl_fclose+38

                     loc_9337:
0000000000009337         pop        rbx                                         ; CODE XREF=rpl_fclose+17
0000000000009338         pop        rbp
0000000000009339         pop        r12
000000000000933b         jmp        j_fclose                                    ; fclose
                        ; endp

                     loc_9340:
0000000000009340         mov        dword [rbp], r12d                           ; CODE XREF=rpl_fclose+62
0000000000009344         mov        eax, 0xffffffff
0000000000009349         jmp        loc_9310
000000000000934b         align      16                                          ; End of unwind block (FDE at 0xd0d4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fflush:
0000000000009350         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0xd10c), CODE XREF=rpl_fclose+31
0000000000009353         push       rbx
0000000000009354         mov        rbx, rdi
0000000000009357         je         loc_936a

0000000000009359         call       j___freading                                ; __freading
000000000000935e         test       eax, eax
0000000000009360         je         loc_936a

0000000000009362         test       dword [rbx], 0x100
0000000000009368         jne        loc_9378

                     loc_936a:
000000000000936a         mov        rdi, rbx                                    ; argument "__stream" for method j_fflush, CODE XREF=rpl_fflush+7, rpl_fflush+16
000000000000936d         pop        rbx
000000000000936e         jmp        j_fflush                                    ; fflush
                        ; endp
0000000000009373         align      8

                     loc_9378:
0000000000009378         mov        rdi, rbx                                    ; CODE XREF=rpl_fflush+24
000000000000937b         mov        edx, 0x1
0000000000009380         xor        esi, esi
0000000000009382         call       rpl_fseeko                                  ; rpl_fseeko
0000000000009387         mov        rdi, rbx                                    ; argument "__stream" for method j_fflush
000000000000938a         pop        rbx
000000000000938b         jmp        j_fflush                                    ; fflush
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fseeko:
0000000000009390         mov        rax, qword [rdi+8]                          ; End of unwind block (FDE at 0xd10c), Begin of unwind block (FDE at 0xd12c), CODE XREF=rpl_fflush+50
0000000000009394         cmp        qword [rdi+0x10], rax
0000000000009398         je         loc_93a0

                     j_j_fseeko:        // fseeko
000000000000939a         jmp        j_fseeko                                    ; fseeko, CODE XREF=j_j_fseeko+14, j_j_fseeko+21
                        ; endp
000000000000939f         align      32

                     loc_93a0:
00000000000093a0         mov        rax, qword [rdi+0x20]                       ; CODE XREF=rpl_fseeko+8
00000000000093a4         cmp        qword [rdi+0x28], rax
00000000000093a8         jne        j_j_fseeko                                  ; fseeko

00000000000093aa         cmp        qword [rdi+0x48], 0x0
00000000000093af         jne        j_j_fseeko                                  ; fseeko

00000000000093b1         push       r12
00000000000093b3         push       rbp
00000000000093b4         mov        r12d, edx
00000000000093b7         push       rbx
00000000000093b8         mov        rbp, rsi
00000000000093bb         mov        rbx, rdi
00000000000093be         call       j_fileno                                    ; fileno
00000000000093c3         mov        edx, r12d                                   ; argument "__whence" for method j_lseek
00000000000093c6         mov        rsi, rbp                                    ; argument "__offset" for method j_lseek
00000000000093c9         mov        edi, eax                                    ; argument "__fd" for method j_lseek
00000000000093cb         call       j_lseek                                     ; lseek
00000000000093d0         cmp        rax, 0xffffffffffffffff
00000000000093d4         je         loc_93e2

00000000000093d6         and        dword [rbx], 0xffffffef
00000000000093d9         mov        qword [rbx+0x90], rax
00000000000093e0         xor        eax, eax

                     loc_93e2:
00000000000093e2         pop        rbx                                         ; CODE XREF=j_j_fseeko+58
00000000000093e3         pop        rbp
00000000000093e4         pop        r12
00000000000093e6         ret
                        ; endp
00000000000093e7         align      16                                          ; End of unwind block (FDE at 0xd12c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __libc_csu_init:
00000000000093f0         push       r15                                         ; Begin of unwind block (FDE at 0xd15c), DATA XREF=_start+22
00000000000093f2         push       r14
00000000000093f4         mov        r15, rdx
00000000000093f7         push       r13
00000000000093f9         push       r12
00000000000093fb         lea        r12, qword [__frame_dummy_init_array_entry] ; __frame_dummy_init_array_entry
0000000000009402         push       rbp
0000000000009403         lea        rbp, qword [__do_global_dtors_aux_fini_array_entry] ; __do_global_dtors_aux_fini_array_entry
000000000000940a         push       rbx
000000000000940b         mov        r13d, edi
000000000000940e         mov        r14, rsi
0000000000009411         sub        rbp, r12
0000000000009414         sub        rsp, 0x8
0000000000009418         sar        rbp, 0x3
000000000000941c         call       _init                                       ; _init
0000000000009421         test       rbp, rbp
0000000000009424         je         loc_9446

0000000000009426         xor        ebx, ebx
0000000000009428         nop        dword [rax+rax]

                     loc_9430:
0000000000009430         mov        rdx, r15                                    ; CODE XREF=__libc_csu_init+84
0000000000009433         mov        rsi, r14
0000000000009436         mov        edi, r13d
0000000000009439         call       qword [r12+rbx*8]
000000000000943d         add        rbx, 0x1
0000000000009441         cmp        rbp, rbx
0000000000009444         jne        loc_9430

                     loc_9446:
0000000000009446         add        rsp, 0x8                                    ; CODE XREF=__libc_csu_init+52
000000000000944a         pop        rbx
000000000000944b         pop        rbp
000000000000944c         pop        r12
000000000000944e         pop        r13
0000000000009450         pop        r14
0000000000009452         pop        r15
0000000000009454         ret
                        ; endp
0000000000009455         align      32                                          ; End of unwind block (FDE at 0xd15c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __libc_csu_fini:
0000000000009460         ret                                                    ; Begin of unwind block (FDE at 0xd1a4), DATA XREF=_start+15
                        ; endp
0000000000009462         align      16                                          ; End of unwind block (FDE at 0xd1a4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     atexit:
0000000000009470         mov        rdx, qword [__dso_handle]                   ; Begin of unwind block (FDE at 0xd1bc), __dso_handle, CODE XREF=main+161
0000000000009477         xor        esi, esi
0000000000009479         jmp        j___cxa_atexit                              ; __cxa_atexit
                        ; endp
000000000000947e         db  0x00 ; '.'                                         ; End of unwind block (FDE at 0xd1bc)
000000000000947f         db  0x00 ; '.'


        ; Section .fini
        ; Range: [0x9480; 0x9489[ (9 bytes)
        ; File offset : [38016; 38025[ (9 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _fini:
0000000000009480         sub        rsp, 0x8
0000000000009484         add        rsp, 0x8
0000000000009488         ret
                        ; endp
0000000000009489         db  0x00 ; '.'
000000000000948a         db  0x00 ; '.'
000000000000948b         db  0x00 ; '.'
000000000000948c         db  0x00 ; '.'
000000000000948d         db  0x00 ; '.'
000000000000948e         db  0x00 ; '.'
000000000000948f         db  0x00 ; '.'
0000000000009490         db  0x00 ; '.'
0000000000009491         db  0x00 ; '.'
0000000000009492         db  0x00 ; '.'
0000000000009493         db  0x00 ; '.'
0000000000009494         db  0x00 ; '.'
0000000000009495         db  0x00 ; '.'
0000000000009496         db  0x00 ; '.'
0000000000009497         db  0x00 ; '.'
0000000000009498         db  0x00 ; '.'
0000000000009499         db  0x00 ; '.'
000000000000949a         db  0x00 ; '.'
000000000000949b         db  0x00 ; '.'
000000000000949c         db  0x00 ; '.'
000000000000949d         db  0x00 ; '.'
000000000000949e         db  0x00 ; '.'
000000000000949f         db  0x00 ; '.'


        ; Section .rodata
        ; Range: [0x94a0; 0xbeb9[ (10777 bytes)
        ; File offset : [38048; 48825[ (10777 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

                     _IO_stdin_used:
00000000000094a0         db  0x01 ; '.'
00000000000094a1         db  0x00 ; '.'
00000000000094a2         db  0x02 ; '.'
00000000000094a3         db  0x00 ; '.'
                     aKmgtpezy:
00000000000094a4         db         "KMGTPEZY", 0                               ; DATA XREF=unit_to_umax+65, unit_to_umax+290, process_field+1114
                     aKmgtpezy0:
00000000000094ad         db         "KMGTPEZY0", 0                              ; DATA XREF=unit_to_umax+236
                     aInvalidUnitSiz:
00000000000094b7         db         "invalid unit size: %s", 0                  ; DATA XREF=unit_to_umax+321
                     aInvalidNumberS:
00000000000094cd         db         "invalid number: %s", 0                     ; DATA XREF=process_field+2152
                     aInvalidSuffixI:
00000000000094e0         db         "invalid suffix in input: %s", 0            ; DATA XREF=process_field+908, process_field+4807
                     aError:
00000000000094fc         db         "(error)", 0                                ; DATA XREF=process_field+5639
0000000000009504         db  0x4b ; 'K'                                         ; DATA XREF=process_field+4076
0000000000009505         db  0x00 ; '.'
0000000000009506         db  0x4d ; 'M'                                         ; DATA XREF=process_field+4454
0000000000009507         db  0x00 ; '.'
0000000000009508         db  0x47 ; 'G'                                         ; DATA XREF=process_field+4440
0000000000009509         db  0x00 ; '.'
000000000000950a         db  0x54 ; 'T'                                         ; DATA XREF=process_field+4426
000000000000950b         db  0x00 ; '.'
000000000000950c         db  0x50 ; 'P'                                         ; DATA XREF=process_field+4412
000000000000950d         db  0x00 ; '.'
000000000000950e         db  0x45 ; 'E'                                         ; DATA XREF=process_field+4398
000000000000950f         db  0x00 ; '.'
0000000000009510         db  0x5a ; 'Z'                                         ; DATA XREF=process_field+4384
0000000000009511         db  0x00 ; '.'
                     aTrimmingSuffix:
0000000000009512         db         "trimming suffix %s\n", 0                   ; DATA XREF=process_field+2323
                     aNoValidSuffixF:
0000000000009526         db         "no valid suffix found\n", 0                ; DATA XREF=process_field+1999
                     aSuffixPowerddL:
000000000000953d         db         "  suffix power=%d^%d = %Lf\n", 0           ; DATA XREF=process_field+3307
                     aReturningValue_9559:        // aReturningValue
0000000000009559         db         "  returning value: %Lf (%LG)\n", 0         ; DATA XREF=process_field+3387
0000000000009577         db  0x30 ; '0'                                         ; DATA XREF=process_field+4927
0000000000009578         db  0x25 ; '%'
0000000000009579         db  0x6c ; 'l'
000000000000957a         db  0x64 ; 'd'
000000000000957b         db  0x00 ; '.'
                     aDoubletohumann:
000000000000957c         db         "double_to_human:\n", 0                     ; DATA XREF=process_field+4885
                     aReturningValue:
000000000000958e         db         "  returning value: %s\n", 0                ; DATA XREF=process_field+5229
                     aAfterPaddingSn:
00000000000095a5         db         "  After padding: %s\n", 0                  ; DATA XREF=process_field+5387
                     aNumfmt:
00000000000095ba         db         "numfmt", 0                                 ; DATA XREF=main+596, usage+1225, usage+1556, usage+1740, usage+1759, usage+1793
                     aNunitOptionsn:
00000000000095c1         db         "\nUNIT options:\n", 0                      ; DATA XREF=usage+835
00000000000095d1         db  0x5b ; '['                                         ; DATA XREF=usage+1237
00000000000095d2         db  0x00 ; '.'
                     aTestInvocation:
00000000000095d3         db         "test invocation", 0                        ; DATA XREF=usage+1280
                     aMulticallInvoc:
00000000000095e3         db         "Multi-call invocation", 0                  ; DATA XREF=usage+1328
                     aSha224sum:
00000000000095f9         db         "sha224sum", 0                              ; DATA XREF=usage+1348
                     aSha2Utilities:
0000000000009603         db         "sha2 utilities", 0                         ; DATA XREF=usage+1360
                     aSha256sum:
0000000000009612         db         "sha256sum", 0                              ; DATA XREF=usage+1244
                     aSha384sum:
000000000000961c         db         "sha384sum", 0                              ; DATA XREF=usage+1292
                     aSha512sum:
0000000000009626         db         "sha512sum", 0                              ; DATA XREF=usage+1316
                     aNsOnlineHelpSn:
0000000000009630         db         "\n%s online help: <%s>\n", 0               ; DATA XREF=usage+1442
0000000000009647         db  0x47 ; 'G'                                         ; DATA XREF=main+589, usage+1470, usage+1663, emit_bug_reporting_address+68
0000000000009648         db  0x4e ; 'N'
0000000000009649         db  0x55 ; 'U'
000000000000964a         db  0x20 ; ' '
                     aCoreutils:
000000000000964b         db         "coreutils", 0                              ; DATA XREF=main+67, main+82, usage+1304
0000000000009655         db  0x65 ; 'e'                                         ; DATA XREF=usage+1509, usage+1702
0000000000009656         db  0x6e ; 'n'
0000000000009657         db  0x5f ; '_'
0000000000009658         db  0x00 ; '.'
                     aFullDocumentat:
0000000000009659         db         "Full documentation <%s%s>\n", 0            ; DATA XREF=usage+1537, usage+1726
0000000000009674         db  0x4c ; 'L'                                         ; DATA XREF=main+1605
0000000000009675         db  0x65 ; 'e'
0000000000009676         db  0x66 ; 'f'
0000000000009677         db  0x74 ; 't'
0000000000009678         db  0x00 ; '.'
                     aRight:
0000000000009679         db         "Right", 0                                  ; DATA XREF=main+1583
000000000000967f         db  0x79 ; 'y'                                         ; DATA XREF=main+1640
0000000000009680         db  0x65 ; 'e'
0000000000009681         db  0x73 ; 's'
0000000000009682         db  0x00 ; '.'
0000000000009683         db  0x6e ; 'n'                                         ; DATA XREF=main+1619
0000000000009684         db  0x6f ; 'o'
0000000000009685         db  0x00 ; '.'
                     aUsrlocalsharel:
0000000000009686         db         "/usr/local/share/locale", 0                ; DATA XREF=main+60
000000000000969e         db  0x2e ; '.'                                         ; DATA XREF=main+313
000000000000969f         db  0x00 ; '.'
00000000000096a0         db  0x64 ; 'd'                                         ; DATA XREF=main+176
00000000000096a1         db  0x3a ; ':'
00000000000096a2         db  0x7a ; 'z'
00000000000096a3         db  0x00 ; '.'
                     aFrom:
00000000000096a4         db         "--from", 0                                 ; DATA XREF=main+681
00000000000096ab         db  0x2d ; '-'                                         ; DATA XREF=main+868
00000000000096ac         db  0x2d ; '-'
00000000000096ad         db  0x74 ; 't'
00000000000096ae         db  0x6f ; 'o'
00000000000096af         db  0x00 ; '.'
                     aRound:
00000000000096b0         db         "--round", 0                                ; DATA XREF=main+1036
                     aInvalidPadding:
00000000000096b8         db         "invalid padding value %s", 0               ; DATA XREF=main+3307
                     aMultipleFieldS:
00000000000096d1         db         "multiple field specifications", 0          ; DATA XREF=main+3612
                     aInvalidHeaderV:
00000000000096ef         db         "invalid header value %s", 0                ; DATA XREF=main+1188
                     aInvalid:
0000000000009707         db         "--invalid", 0                              ; DATA XREF=main+479
                     aAssafGordon:
0000000000009711         db         "Assaf Gordon", 0                           ; DATA XREF=main+582
                     aFailedToSetLoc:
000000000000971e         db         "failed to set locale", 0                   ; DATA XREF=main+2753
                     aFormatSHasNoDi:
0000000000009733         db         "format %s has no %% directive", 0          ; DATA XREF=main+3153
0000000000009751         db  0x20 ; ' '                                         ; DATA XREF=main+2316
0000000000009752         db  0x00 ; '.'
                     aFormatSEndsIn:
0000000000009753         db         "format %s ends in %%", 0                   ; DATA XREF=main+3253
                     aErrorReadingIn:
0000000000009768         db         "error reading input", 0                    ; DATA XREF=main+2042
                     aFromunit:
000000000000977c         db         "from-unit", 0
                     aTounit:
0000000000009786         db         "to-unit", 0
                     aPadding:
000000000000978e         db         "padding", 0
                     aSuffix:
0000000000009796         db         "suffix", 0
                     aGrouping:
000000000000979d         db         "grouping", 0
                     aDelimiter:
00000000000097a6         db         "delimiter", 0
                     aField:
00000000000097b0         db         "field", 0
00000000000097b6         db  0x2d ; '-'
                     aDebug:
00000000000097b7         db         "debug", 0
                     aHeader:
00000000000097bd         db         "header", 0
                     aFormat:
00000000000097c4         db         "format", 0
                     aZeroterminated:
00000000000097cb         db         "zero-terminated", 0
                     aHelp:
00000000000097db         db         "help", 0
                     aVersion:
00000000000097e0         db         "version", 0
                     aAbort:
00000000000097e8         db         "abort", 0
                     aFail:
00000000000097ee         db         "fail", 0
                     aWarn:
00000000000097f3         db         "warn", 0
                     aIgnore:
00000000000097f8         db         "ignore", 0
00000000000097ff         db  0x75 ; 'u'
0000000000009800         db  0x70 ; 'p'
0000000000009801         db  0x00 ; '.'
                     aDown:
0000000000009802         db         "down", 0
                     aFromzero:
0000000000009807         db         "from-zero", 0
                     aTowardszero:
0000000000009811         db         "towards-zero", 0
                     aNearest:
000000000000981e         db         "nearest", 0
                     aNone:
0000000000009826         db         "none", 0
000000000000982b         db  0x73 ; 's'
000000000000982c         db  0x69 ; 'i'
000000000000982d         db  0x00 ; '.'
000000000000982e         db  0x69 ; 'i'
000000000000982f         db  0x65 ; 'e'
0000000000009830         db  0x63 ; 'c'
0000000000009831         db  0x00 ; '.'
                     aIeci:
0000000000009832         db         "iec-i", 0
                     aAuto:
0000000000009838         db         "auto", 0
000000000000983d         align      64
                     aValueTooLargeT_9840:        // aValueTooLargeT
0000000000009840         db         "value too large to be converted: %s", 0    ; DATA XREF=process_field+656
0000000000009864         align      8
                     aRejectingSuffi:
0000000000009868         db         "rejecting suffix in input: %s (consider using --from)", 0 ; DATA XREF=process_field+2167, process_field+3446
000000000000989e         align      32
                     aMissingISuffix:
00000000000098a0         db         "missing 'i' suffix in input: %s (e.g Ki/Mi/Gi)", 0 ; DATA XREF=process_field+923, process_field+3429, process_field+5996
00000000000098cf         align      16
                     aNoScalingRetur:
00000000000098d0         db         "  no scaling, returning (grouped) value: %'.*Lf\n", 0 ; DATA XREF=process_field+2588
0000000000009901         align      8
                     aNoScalingRetur_9908:        // aNoScalingRetur
0000000000009908         db         "  no scaling, returning value: %.*Lf\n", 0 ; DATA XREF=process_field+2595
000000000000992e         align      16
                     aSettingAutopad:
0000000000009930         db         "setting Auto-Padding to %ld characters\n", 0 ; DATA XREF=process_field+566
                     aSimplestrtodhu:
0000000000009958         db         "simple_strtod_human:\n  input string: %s\n  locale decimal-point: %s\n  MAX_UNSCALED_DIGITS: %d\n", 0 ; DATA XREF=process_field+457
00000000000099b6         align      8
                     aParsedNumericV:
00000000000099b8         db         "  parsed numeric value: %Lf\n  input precision = %d\n", 0 ; DATA XREF=process_field+2107
00000000000099ec         align      16
                     aAutoscalingFou:
00000000000099f0         db         "  Auto-scaling, found 'i', switching to base %d\n", 0 ; DATA XREF=process_field+5658
0000000000009a21         align      8
                     aInvalidSuffixI_9a28:        // aInvalidSuffixI
0000000000009a28         db         "invalid suffix in input %s: %s", 0         ; DATA XREF=process_field+1848
0000000000009a47         align      8
                     aLargeInputValu:
0000000000009a48         db         "large input value %s: possible precision loss", 0 ; DATA XREF=process_field+1934
0000000000009a76         align      8
                     aValueprecision:
0000000000009a78         db         "value/precision too large to be printed: '%Lg/%lu' (consider using --to)", 0 ; DATA XREF=process_field+2230
0000000000009ac1         align      8
                     aValueTooLargeT_9ac8:        // aValueTooLargeT
0000000000009ac8         db         "value too large to be printed: '%Lg' (consider using --to)", 0 ; DATA XREF=process_field+4829
0000000000009b03         align      8
                     aValueTooLargeT:
0000000000009b08         db         "value too large to be printed: '%Lg' (cannot handle values > 999Y)", 0 ; DATA XREF=process_field+1442
0000000000009b4b         align      16
                     aFailedToPrepar:
0000000000009b50         db         "failed to prepare value '%Lf' for printing", 0 ; DATA XREF=process_field+4311, process_field+6011
0000000000009b7b         align      128
                     aScaledValueToL:
0000000000009b80         db         "  scaled value to %Lf * %0.f ^ %u\n", 0    ; DATA XREF=process_field+3578
0000000000009ba3         align      8
                     aAfterRoundingV:
0000000000009ba8         db         "  after rounding, value=%Lf * %0.f ^ %u\n", 0 ; DATA XREF=process_field+3955
0000000000009bd1         align      8
                     aFormattingOutp:
0000000000009bd8         db         "formatting output:\n  value: %Lf\n  humanized: %s\n", 0 ; DATA XREF=process_field+2873
0000000000009c09         align      16
                     aTrySHelpForMor:
0000000000009c10         db         "Try '%s --help' for more information.\n", 0 ; DATA XREF=usage+47
0000000000009c37         align      8
                     aUsageSOptionNu:
0000000000009c38         db         "Usage: %s [OPTION]... [NUMBER]...\n", 0    ; DATA XREF=usage+93
0000000000009c5b         align      32
                     aReformatNumber:
0000000000009c60         db         "Reformat NUMBER(s), or the numbers from standard input if none are specified.\n", 0 ; DATA XREF=usage+132
0000000000009caf         align      16
                     aNmandatoryArgu:
0000000000009cb0         db         "\nMandatory arguments to long options are mandatory for short options too.\n", 0 ; DATA XREF=usage+169
0000000000009cfb         align      256
                     aDebugPrintWarn:
0000000000009d00         db         "      --debug          print warnings about invalid input\n", 0 ; DATA XREF=usage+206
0000000000009d3b         align      64
                     aDDelimiterxUse:
0000000000009d40         db         "  -d, --delimiter=X    use X instead of whitespace for field delimiter\n", 0 ; DATA XREF=usage+243
                     aFieldfieldsRep:
0000000000009d88         db         "      --field=FIELDS   replace the numbers in these input fields (default=1)\n                         see FIELDS below\n", 0 ; DATA XREF=usage+280
                     aFormatformatUs:
0000000000009e00         db         "      --format=FORMAT  use printf style floating-point FORMAT;\n                         see FORMAT below for details\n", 0 ; DATA XREF=usage+317
0000000000009e76         align      8
                     aFromunitAutosc:
0000000000009e78         db         "      --from=UNIT      auto-scale input numbers to UNITs; default is 'none';\n                         see UNIT below\n", 0 ; DATA XREF=usage+354
0000000000009eee         align      16
                     aFromunitnSpeci:
0000000000009ef0         db         "      --from-unit=N    specify the input unit size (instead of the default 1)\n", 0 ; DATA XREF=usage+391
0000000000009f3f         align      64
                     aGroupingUseLoc:
0000000000009f40         db         "      --grouping       use locale-defined grouping of digits, e.g. 1,000,000\n                         (which means it has no effect in the C/POSIX locale)\n", 0 ; DATA XREF=usage+428
0000000000009fdc         align      32
                     aHeadernPrintWi:
0000000000009fe0         db         "      --header[=N]     print (without converting) the first N header lines;\n                         N defaults to 1 if not specified\n", 0 ; DATA XREF=usage+465
000000000000a067         align      8
                     aInvalidmodeFai:
000000000000a068         db         "      --invalid=MODE   failure mode for invalid numbers: MODE can be:\n                         abort (default), fail, warn, ignore\n", 0 ; DATA XREF=usage+502
000000000000a0ec         align      16
                     aPaddingnPadThe:
000000000000a0f0         db         "      --padding=N      pad the output to N characters; positive N will\n                         right-align; negative N will left-align;\n                         padding is ignored if the output is wider than N;\n                         the default is to a" ; DATA XREF=usage+539
000000000000a1f0         db         "utomatically pad if a whitespace\n                         is found\n", 0
000000000000a234         align      8
                     aRoundmethodUse:
000000000000a238         db         "      --round=METHOD   use METHOD for rounding when scaling; METHOD can be:\n                         up, down, from-zero (default), towards-zero, nearest\n", 0 ; DATA XREF=usage+576
000000000000a2d3         align      8
                     aSuffixsuffixAd:
000000000000a2d8         db         "      --suffix=SUFFIX  add SUFFIX to output numbers, and accept optional\n                         SUFFIX in input numbers\n", 0 ; DATA XREF=usage+613
000000000000a353         align      8
                     aTounitAutoscal:
000000000000a358         db         "      --to=UNIT        auto-scale output numbers to UNITs; see UNIT below\n", 0 ; DATA XREF=usage+650
000000000000a3a3         align      8
                     aTounitnTheOutp:
000000000000a3a8         db         "      --to-unit=N      the output unit size (instead of the default 1)\n", 0 ; DATA XREF=usage+687
                     aZZeroterminate:
000000000000a3f0         db         "  -z, --zero-terminated    line delimiter is NUL, not newline\n", 0 ; DATA XREF=usage+724
000000000000a42f         align      16
                     aHelpDisplayThi:
000000000000a430         db         "      --help     display this help and exit\n", 0 ; DATA XREF=usage+761
000000000000a45d         align      32
                     aVersionOutputV:
000000000000a460         db         "      --version  output version information and exit\n", 0 ; DATA XREF=usage+798
000000000000a496         align      8
                     aNoneNoAutoscal:
000000000000a498         db         "  none       no auto-scaling is done; suffixes will trigger an error\n", 0 ; DATA XREF=usage+872
000000000000a4de         align      32
                     aAutoAcceptOpti:
000000000000a4e0         db         "  auto       accept optional single/two letter suffix:\n               1K = 1000,\n               1Ki = 1024,\n               1M = 1000000,\n               1Mi = 1048576,\n", 0 ; DATA XREF=usage+909
                     aSiAcceptOption:
000000000000a588         db         "  si         accept optional single letter suffix:\n               1K = 1000,\n               1M = 1000000,\n               ...\n", 0 ; DATA XREF=usage+946
000000000000a606         align      8
                     aIecAcceptOptio:
000000000000a608         db         "  iec        accept optional single letter suffix:\n               1K = 1024,\n               1M = 1048576,\n               ...\n", 0 ; DATA XREF=usage+983
000000000000a686         align      8
                     aIeciAcceptOpti:
000000000000a688         db         "  iec-i      accept optional two-letter suffix:\n               1Ki = 1024,\n               1Mi = 1048576,\n               ...\n", 0 ; DATA XREF=usage+1020
000000000000a705         align      8
                     aNfieldsSupport:
000000000000a708         db         "\nFIELDS supports cut(1) style field ranges:\n  N    N'th field, counted from 1\n  N-   from N'th field, to end of line\n  N-M  from N'th to M'th field (inclusive)\n  -M   from first to M'th field (inclusive)\n  -    all fields\nMultiple fields/ranges can be sepa" ; DATA XREF=usage+1057
000000000000a808         db         "rated with commas\n", 0
000000000000a81b         align      32
                     aNformatMustBeS:
000000000000a820         db         "\nFORMAT must be suitable for printing one floating-point argument '%f'.\nOptional quote (%'f) will enable --grouping (if supported by current locale).\nOptional width value (%10f) will pad output. Optional zero (%010f) width\nwill zero pad the number. Optiona" ; DATA XREF=usage+1094
000000000000a920         db         "l negative values (%-10f) will left align.\nOptional precision (%.1f) will override the input determined precision.\n", 0
000000000000a994         align      8
                     aNexitStatusIs0:
000000000000a998         db         "\nExit status is 0 if all input numbers were successfully converted.\nBy default, %s will stop at the first conversion error with exit status 2.\nWith --invalid='fail' a warning is printed for each conversion error\nand the exit status is 2.  With --invalid='w" ; DATA XREF=usage+1131
000000000000aa98         db         "arn' each conversion error is\ndiagnosed, but the exit status is 0.  With --invalid='ignore' conversion\nerrors are not diagnosed and the exit status is 0.\n", 0
000000000000ab33         align      8
                     aNexamplesnSTos:
000000000000ab38         db         "\nExamples:\n  $ %s --to=si 1000\n            -> \"1.0K\"\n  $ %s --to=iec 2048\n           -> \"2.0K\"\n  $ %s --to=iec-i 4096\n           -> \"4.0Ki\"\n  $ echo 1K | %s --from=si\n           -> \"1000\"\n  $ echo 1K | %s --from=iec\n           -> \"1024\"\n  $ df -B1 | %s --h" ; DATA XREF=usage+1175
000000000000ac38         db         "eader --field 2-4 --to=si\n  $ ls -l  | %s --header --field 5 --to=iec\n  $ ls -lh | %s --header --field 5 --from=iec --padding=10\n  $ ls -lh | %s --header --field 5 --from=iec --format %%10f\n", 0
000000000000acf7         align      8
                     aHttpswwwgnuorg:
000000000000acf8         db         "https://www.gnu.org/software/coreutils/", 0 ; DATA XREF=usage+1463, usage+1563, usage+1656, usage+1766, emit_bug_reporting_address+61
                     aReportAnyTrans:
000000000000ad20         db         "Report any translation bugs to <https://translationproject.org/team/>\n", 0 ; DATA XREF=usage+1807
000000000000ad67         align      8
                     aOrAvailableLoc:
000000000000ad68         db         "or available locally via: info '(coreutils) %s%s'\n", 0 ; DATA XREF=usage+1606
000000000000ad9b         align      32
                     aTheDelimiterMu:
000000000000ada0         db         "the delimiter must be a single character", 0 ; DATA XREF=main+3349
000000000000adc9         align      16
                     aGroupingCannot_add0:        // aGroupingCannot
000000000000add0         db         "--grouping cannot be combined with --format", 0 ; DATA XREF=main+3526
000000000000adfc         align      512
                     aNoConversionOp:
000000000000ae00         db         "no conversion option specified", 0         ; DATA XREF=main+1353
000000000000ae1f         align      32
                     aInvalidFormatS_ae20:        // aInvalidFormatS
000000000000ae20         db         "invalid format %s (width overflow)", 0     ; DATA XREF=main+3570
000000000000ae43         align      8
                     aFormatPaddingO:
000000000000ae48         db         "--format padding overriding --padding", 0  ; DATA XREF=main+2863
000000000000ae6e         align      16
                     aInvalidPrecisi:
000000000000ae70         db         "invalid precision in format %s", 0         ; DATA XREF=main+3203
000000000000ae8f         align      16
                     aInvalidFormatS:
000000000000ae90         db         "invalid format %s, directive must be %%[0]['][-][N][.][N]f", 0 ; DATA XREF=main+3443
000000000000aecb         align      16
                     aFormatSHasTooM:
000000000000aed0         db         "format %s has too many %% directives", 0   ; DATA XREF=main+3393
000000000000aef5         align      8
                     aFormatStringnI:
000000000000aef8         db         "format String:\n  input: %s\n  grouping: %s\n  padding width: %ld\n  alignment: %s\n  prefix: %s\n  suffix: %s\n", 0 ; DATA XREF=main+1674
000000000000af62         align      8
                     aGroupingCannot:
000000000000af68         db         "grouping cannot be combined with --to", 0  ; DATA XREF=main+3490
000000000000af8e         align      16
                     aGroupingHasNoE:
000000000000af90         db         "grouping has no effect in this locale", 0  ; DATA XREF=main+2264
000000000000afb6         align      8
                     aHeaderIgnoredW:
000000000000afb8         db         "--header ignored with command-line input", 0 ; DATA XREF=main+2791
000000000000afe1         align      8
                     aFailedToConver:
000000000000afe8         db         "failed to convert some of the input numbers", 0 ; DATA XREF=main+2718
000000000000b014         db  0x00 ; '.'
000000000000b015         db  0x00 ; '.'
000000000000b016         db  0x00 ; '.'
000000000000b017         db  0x00 ; '.'
000000000000b018         db  0x00 ; '.'
000000000000b019         db  0x00 ; '.'
000000000000b01a         db  0x00 ; '.'
000000000000b01b         db  0x00 ; '.'
000000000000b01c         db  0x00 ; '.'
000000000000b01d         db  0x00 ; '.'
000000000000b01e         db  0x00 ; '.'
000000000000b01f         db  0x00 ; '.'
                     switch_table_b020:        // switch_table
000000000000b020         dd         2 dup (process_field.loc_3320-switch_table_b020), process_field.loc_3200-switch_table_b020, process_field.loc_37d0-switch_table_b020, process_field.loc_37e4-switch_table_b020 ; switch table used at 0x3193 containing 7 entries, DATA XREF=process_field+531
000000000000b034         dd         process_field.loc_32f9-switch_table_b020, process_field.loc_3308-switch_table_b020
                     switch_table_b03c:        // switch_table
000000000000b03c         dd         process_field.loc_392e-switch_table_b03c, process_field.loc_3c29-switch_table_b03c, process_field.loc_3bb7-switch_table_b03c, process_field.loc_3b9e-switch_table_b03c ; switch table used at 0x3635 containing 5 entries, DATA XREF=process_field+1719
000000000000b04c         dd         process_field.loc_3c00-switch_table_b03c
                     switch_table_b050:        // switch_table
000000000000b050         dd         process_field.loc_3e50-switch_table_b050, process_field.loc_41c0-switch_table_b050, process_field.loc_4150-switch_table_b050, process_field.loc_41d6-switch_table_b050 ; switch table used at 0x3e33 containing 5 entries, DATA XREF=process_field+3765
000000000000b060         dd         process_field.loc_4100-switch_table_b050
                     switch_table_b064:        // switch_table
000000000000b064         dd         process_field.loc_3feb-switch_table_b064, process_field.loc_3f5a-switch_table_b064, process_field.loc_40d4-switch_table_b064, process_field.loc_40c6-switch_table_b064 ; switch table used at 0x3f58 containing 9 entries, DATA XREF=process_field+4055
000000000000b074         dd         process_field.loc_40b8-switch_table_b064, process_field.loc_40aa-switch_table_b064, process_field.loc_409c-switch_table_b064, process_field.loc_408e-switch_table_b064
000000000000b084         dd         process_field.loc_4080-switch_table_b064
                     switch_table_b088:        // switch_table
000000000000b088         dd         process_field.loc_4355-switch_table_b088, process_field.loc_434c-switch_table_b088, process_field.loc_4345-switch_table_b088, process_field.loc_432a-switch_table_b088 ; switch table used at 0x4328 containing 5 entries, DATA XREF=process_field+5034
000000000000b098         dd         process_field.loc_435e-switch_table_b088
                     switch_table_b09c:        // switch_table
000000000000b09c         dd         process_field.loc_3934-switch_table_b09c, process_field.loc_3c2f-switch_table_b09c, process_field.loc_3bbd-switch_table_b09c, process_field.loc_3ba4-switch_table_b09c ; switch table used at 0x43c9 containing 5 entries, DATA XREF=process_field+5195
000000000000b0ac         dd         process_field.loc_3c06-switch_table_b09c
                     switch_table_b0b0:        // switch_table
000000000000b0b0         dd         process_field.loc_3e35-switch_table_b0b0, process_field.loc_419b-switch_table_b0b0, process_field.loc_4129-switch_table_b0b0, process_field.loc_4740-switch_table_b0b0 ; switch table used at 0x44ff containing 5 entries, DATA XREF=process_field+5505
000000000000b0c0         dd         process_field.loc_40e2-switch_table_b0b0
                     switch_table_b0c4:        // switch_table
000000000000b0c4         dd         process_field.loc_3932-switch_table_b0c4, process_field.loc_3c2d-switch_table_b0c4, process_field.loc_3bbb-switch_table_b0c4, process_field.loc_3ba2-switch_table_b0c4 ; switch table used at 0x4632 containing 5 entries, DATA XREF=process_field+5812
000000000000b0d4         dd         process_field.loc_3c04-switch_table_b0c4
                     switch_table_b0d8:        // switch_table
000000000000b0d8         dd         process_field.loc_3e3d-switch_table_b0d8, process_field.loc_41a3-switch_table_b0d8, process_field.loc_4131-switch_table_b0d8, process_field.loc_41da-switch_table_b0d8 ; switch table used at 0x46d2 containing 5 entries, DATA XREF=process_field+5972
000000000000b0e8         dd         process_field.loc_40ea-switch_table_b0d8
000000000000b0ec         db  0x00 ; '.'
000000000000b0ed         db  0x00 ; '.'
000000000000b0ee         db  0x00 ; '.'
000000000000b0ef         db  0x00 ; '.'
000000000000b0f0         db  0x00 ; '.'
000000000000b0f1         db  0x00 ; '.'
000000000000b0f2         db  0x00 ; '.'
000000000000b0f3         db  0x00 ; '.'
000000000000b0f4         db  0x00 ; '.'
000000000000b0f5         db  0x00 ; '.'
000000000000b0f6         db  0x00 ; '.'
000000000000b0f7         db  0x00 ; '.'
000000000000b0f8         db  0x00 ; '.'
000000000000b0f9         db  0x00 ; '.'
000000000000b0fa         db  0x00 ; '.'
000000000000b0fb         db  0x00 ; '.'
000000000000b0fc         db  0x00 ; '.'
000000000000b0fd         db  0x00 ; '.'
000000000000b0fe         db  0x00 ; '.'
000000000000b0ff         db  0x00 ; '.'
                     CSWTCH.317:
000000000000b100         db  0x06 ; '.'                                         ; DATA XREF=process_field+2289
000000000000b101         db  0x00 ; '.'
000000000000b102         db  0x00 ; '.'
000000000000b103         db  0x00 ; '.'
000000000000b104         db  0x00 ; '.'
000000000000b105         db  0x00 ; '.'
000000000000b106         db  0x00 ; '.'
000000000000b107         db  0x00 ; '.'
000000000000b108         db  0x03 ; '.'
000000000000b109         db  0x00 ; '.'
000000000000b10a         db  0x00 ; '.'
000000000000b10b         db  0x00 ; '.'
000000000000b10c         db  0x00 ; '.'
000000000000b10d         db  0x00 ; '.'
000000000000b10e         db  0x00 ; '.'
000000000000b10f         db  0x00 ; '.'
000000000000b110         db  0x00 ; '.'
000000000000b111         db  0x00 ; '.'
000000000000b112         db  0x00 ; '.'
000000000000b113         db  0x00 ; '.'
000000000000b114         db  0x00 ; '.'
000000000000b115         db  0x00 ; '.'
000000000000b116         db  0x00 ; '.'
000000000000b117         db  0x00 ; '.'
000000000000b118         db  0x01 ; '.'
000000000000b119         db  0x00 ; '.'
000000000000b11a         db  0x00 ; '.'
000000000000b11b         db  0x00 ; '.'
000000000000b11c         db  0x00 ; '.'
000000000000b11d         db  0x00 ; '.'
000000000000b11e         db  0x00 ; '.'
000000000000b11f         db  0x00 ; '.'
000000000000b120         db  0x02 ; '.'
000000000000b121         db  0x00 ; '.'
000000000000b122         db  0x00 ; '.'
000000000000b123         db  0x00 ; '.'
000000000000b124         db  0x00 ; '.'
000000000000b125         db  0x00 ; '.'
000000000000b126         db  0x00 ; '.'
000000000000b127         db  0x00 ; '.'
000000000000b128         db  0x00 ; '.'
000000000000b129         db  0x00 ; '.'
000000000000b12a         db  0x00 ; '.'
000000000000b12b         db  0x00 ; '.'
000000000000b12c         db  0x05 ; '.'
000000000000b12d         db  0x00 ; '.'
000000000000b12e         db  0x00 ; '.'
000000000000b12f         db  0x00 ; '.'
000000000000b130         db  0x00 ; '.'
000000000000b131         db  0x00 ; '.'
000000000000b132         db  0x00 ; '.'
000000000000b133         db  0x00 ; '.'
000000000000b134         db  0x00 ; '.'
000000000000b135         db  0x00 ; '.'
000000000000b136         db  0x00 ; '.'
000000000000b137         db  0x00 ; '.'
000000000000b138         db  0x00 ; '.'
000000000000b139         db  0x00 ; '.'
000000000000b13a         db  0x00 ; '.'
000000000000b13b         db  0x00 ; '.'
000000000000b13c         db  0x04 ; '.'
000000000000b13d         db  0x00 ; '.'
000000000000b13e         db  0x00 ; '.'
000000000000b13f         db  0x00 ; '.'
000000000000b140         db  0x00 ; '.'
000000000000b141         db  0x00 ; '.'
000000000000b142         db  0x00 ; '.'
000000000000b143         db  0x00 ; '.'
000000000000b144         db  0x00 ; '.'
000000000000b145         db  0x00 ; '.'
000000000000b146         db  0x00 ; '.'
000000000000b147         db  0x00 ; '.'
000000000000b148         db  0x00 ; '.'
000000000000b149         db  0x00 ; '.'
000000000000b14a         db  0x00 ; '.'
000000000000b14b         db  0x00 ; '.'
000000000000b14c         db  0x00 ; '.'
000000000000b14d         db  0x00 ; '.'
000000000000b14e         db  0x00 ; '.'
000000000000b14f         db  0x00 ; '.'
000000000000b150         db  0x08 ; '.'
000000000000b151         db  0x00 ; '.'
000000000000b152         db  0x00 ; '.'
000000000000b153         db  0x00 ; '.'
000000000000b154         db  0x07 ; '.'
000000000000b155         db  0x00 ; '.'
000000000000b156         db  0x00 ; '.'
000000000000b157         db  0x00 ; '.'
000000000000b158         db  0x00 ; '.'
000000000000b159         db  0x00 ; '.'
000000000000b15a         db  0x00 ; '.'
000000000000b15b         db  0x00 ; '.'
000000000000b15c         db  0x00 ; '.'
000000000000b15d         db  0x00 ; '.'
000000000000b15e         db  0x00 ; '.'
000000000000b15f         db  0x00 ; '.'
                     inval_types:
000000000000b160         db  0x00 ; '.'                                         ; DATA XREF=main+472, main+497
000000000000b161         db  0x00 ; '.'
000000000000b162         db  0x00 ; '.'
000000000000b163         db  0x00 ; '.'
000000000000b164         db  0x01 ; '.'
000000000000b165         db  0x00 ; '.'
000000000000b166         db  0x00 ; '.'
000000000000b167         db  0x00 ; '.'
000000000000b168         db  0x02 ; '.'
000000000000b169         db  0x00 ; '.'
000000000000b16a         db  0x00 ; '.'
000000000000b16b         db  0x00 ; '.'
000000000000b16c         db  0x03 ; '.'
000000000000b16d         db  0x00 ; '.'
000000000000b16e         db  0x00 ; '.'
000000000000b16f         db  0x00 ; '.'
                     round_types:
000000000000b170         db  0x00 ; '.'                                         ; DATA XREF=main+1029, main+1054
000000000000b171         db  0x00 ; '.'
000000000000b172         db  0x00 ; '.'
000000000000b173         db  0x00 ; '.'
000000000000b174         db  0x01 ; '.'
000000000000b175         db  0x00 ; '.'
000000000000b176         db  0x00 ; '.'
000000000000b177         db  0x00 ; '.'
000000000000b178         db  0x02 ; '.'
000000000000b179         db  0x00 ; '.'
000000000000b17a         db  0x00 ; '.'
000000000000b17b         db  0x00 ; '.'
000000000000b17c         db  0x03 ; '.'
000000000000b17d         db  0x00 ; '.'
000000000000b17e         db  0x00 ; '.'
000000000000b17f         db  0x00 ; '.'
000000000000b180         db  0x04 ; '.'
000000000000b181         db  0x00 ; '.'
000000000000b182         db  0x00 ; '.'
000000000000b183         db  0x00 ; '.'
000000000000b184         db  0x00 ; '.'
000000000000b185         db  0x00 ; '.'
000000000000b186         db  0x00 ; '.'
000000000000b187         db  0x00 ; '.'
000000000000b188         db  0x00 ; '.'
000000000000b189         db  0x00 ; '.'
000000000000b18a         db  0x00 ; '.'
000000000000b18b         db  0x00 ; '.'
000000000000b18c         db  0x00 ; '.'
000000000000b18d         db  0x00 ; '.'
000000000000b18e         db  0x00 ; '.'
000000000000b18f         db  0x00 ; '.'
                     scale_to_types:
000000000000b190         db  0x00 ; '.'                                         ; DATA XREF=main+861, main+886
000000000000b191         db  0x00 ; '.'
000000000000b192         db  0x00 ; '.'
000000000000b193         db  0x00 ; '.'
000000000000b194         db  0x02 ; '.'
000000000000b195         db  0x00 ; '.'
000000000000b196         db  0x00 ; '.'
000000000000b197         db  0x00 ; '.'
000000000000b198         db  0x03 ; '.'
000000000000b199         db  0x00 ; '.'
000000000000b19a         db  0x00 ; '.'
000000000000b19b         db  0x00 ; '.'
000000000000b19c         db  0x04 ; '.'
000000000000b19d         db  0x00 ; '.'
000000000000b19e         db  0x00 ; '.'
000000000000b19f         db  0x00 ; '.'
                     scale_from_types:
000000000000b1a0         db  0x00 ; '.'                                         ; DATA XREF=main+674, main+699
000000000000b1a1         db  0x00 ; '.'
000000000000b1a2         db  0x00 ; '.'
000000000000b1a3         db  0x00 ; '.'
000000000000b1a4         db  0x01 ; '.'
000000000000b1a5         db  0x00 ; '.'
000000000000b1a6         db  0x00 ; '.'
000000000000b1a7         db  0x00 ; '.'
000000000000b1a8         db  0x02 ; '.'
000000000000b1a9         db  0x00 ; '.'
000000000000b1aa         db  0x00 ; '.'
000000000000b1ab         db  0x00 ; '.'
000000000000b1ac         db  0x03 ; '.'
000000000000b1ad         db  0x00 ; '.'
000000000000b1ae         db  0x00 ; '.'
000000000000b1af         db  0x00 ; '.'
000000000000b1b0         db  0x04 ; '.'
000000000000b1b1         db  0x00 ; '.'
000000000000b1b2         db  0x00 ; '.'
000000000000b1b3         db  0x00 ; '.'
                     dword_b1b4:
000000000000b1b4         dd         0x41200000                                  ; DATA XREF=simple_strtod_int+40, process_field+1363, process_field+1639, process_field+2401, process_field+2547, process_field+3689, process_field+5280, process_field+5426, process_field+5585, process_field+5741, process_field+5857
                     dword_b1b8:
000000000000b1b8         dd         0x44800000                                  ; DATA XREF=process_field+5557, process_field+5700
                     dword_b1bc:
000000000000b1bc         dd         0x5f800000                                  ; DATA XREF=process_field+770, process_field+848
                     dword_b1c0:
000000000000b1c0         dd         0x3f000000                                  ; DATA XREF=process_field+3232, process_field+4510, process_field+5716, process_field+5830
000000000000b1c4         db  0x00 ; '.'
000000000000b1c5         db  0x00 ; '.'
000000000000b1c6         db  0x00 ; '.'
000000000000b1c7         db  0x00 ; '.'
                     double_b1c8:        // double
000000000000b1c8         dq         1024.0                                      ; DATA XREF=process_field+3470
                     double_b1d0:        // double
000000000000b1d0         dq         1000.0                                      ; DATA XREF=process_field+5109
000000000000b1d8         db  0x00 ; '.'
000000000000b1d9         db  0x00 ; '.'
000000000000b1da         db  0x00 ; '.'
000000000000b1db         db  0x00 ; '.'
000000000000b1dc         db  0x00 ; '.'
000000000000b1dd         db  0x00 ; '.'
000000000000b1de         db  0x00 ; '.'
000000000000b1df         db  0x00 ; '.'
000000000000b1e0         db  0xff ; '.'                                         ; DATA XREF=process_field+1312, process_field+3492
000000000000b1e1         db  0xff ; '.'
000000000000b1e2         db  0xff ; '.'
000000000000b1e3         db  0xff ; '.'
000000000000b1e4         db  0xff ; '.'
000000000000b1e5         db  0xff ; '.'
000000000000b1e6         db  0xff ; '.'
000000000000b1e7         db  0xff ; '.'
000000000000b1e8         db  0xfe ; '.'
000000000000b1e9         db  0xff ; '.'
000000000000b1ea         db  0x00 ; '.'
000000000000b1eb         db  0x00 ; '.'
000000000000b1ec         db  0x00 ; '.'
000000000000b1ed         db  0x00 ; '.'
000000000000b1ee         db  0x00 ; '.'
000000000000b1ef         db  0x00 ; '.'
000000000000b1f0         db  0xff ; '.'                                         ; DATA XREF=process_field+1345, process_field+3510
000000000000b1f1         db  0xff ; '.'
000000000000b1f2         db  0xff ; '.'
000000000000b1f3         db  0xff ; '.'
000000000000b1f4         db  0xff ; '.'
000000000000b1f5         db  0xff ; '.'
000000000000b1f6         db  0xff ; '.'
000000000000b1f7         db  0xff ; '.'
000000000000b1f8         db  0xfe ; '.'
000000000000b1f9         db  0x7f ; '.'
000000000000b1fa         db  0x00 ; '.'
000000000000b1fb         db  0x00 ; '.'
000000000000b1fc         db  0x00 ; '.'
000000000000b1fd         db  0x00 ; '.'
000000000000b1fe         db  0x00 ; '.'
000000000000b1ff         db  0x00 ; '.'
000000000000b200         db  0xfe ; '.'                                         ; DATA XREF=process_field+1667, process_field+3717, process_field+4977, process_field+5136, process_field+5457, process_field+5772, process_field+5936
000000000000b201         db  0xff ; '.'
000000000000b202         db  0xff ; '.'
000000000000b203         db  0xff ; '.'
000000000000b204         db  0xff ; '.'
000000000000b205         db  0xff ; '.'
000000000000b206         db  0xff ; '.'
000000000000b207         db  0xff ; '.'
000000000000b208         db  0x3d ; '='
000000000000b209         db  0x40 ; '@'
000000000000b20a         db  0x00 ; '.'
000000000000b20b         db  0x00 ; '.'
000000000000b20c         db  0x00 ; '.'
000000000000b20d         db  0x00 ; '.'
000000000000b20e         db  0x00 ; '.'
000000000000b20f         db  0x00 ; '.'
                     aInvalidFieldRa:
000000000000b210         db         "invalid field range", 0                    ; DATA XREF=set_fields+1306
                     aFieldsAreNumbe:
000000000000b224         db         "fields are numbered from 1", 0             ; DATA XREF=set_fields+1112
                     aInvalidDecreas:
000000000000b23f         db         "invalid decreasing range", 0               ; DATA XREF=set_fields+1128
                     a0123456789:
000000000000b258         db         "0123456789", 0                             ; DATA XREF=set_fields+1188
                     aFieldNumberSIs:
000000000000b263         db         "field number %s is too large", 0           ; DATA XREF=set_fields+1325
                     aInvalidFieldVa:
000000000000b280         db         "invalid field value %s", 0                 ; DATA XREF=set_fields+1448
                     aMissingListOfF:
000000000000b297         db         "missing list of fields", 0                 ; DATA XREF=set_fields+1436
000000000000b2ae         align      16
                     aInvalidByteOrC:
000000000000b2b0         db         "invalid byte or character range", 0        ; DATA XREF=set_fields+1165
                     aBytecharacterP:
000000000000b2d0         db         "byte/character positions are numbered from 1", 0 ; DATA XREF=set_fields+1074
000000000000b2fd         align      256
                     aInvalidRangeWi:
000000000000b300         db         "invalid range with no endpoint: -", 0      ; DATA XREF=set_fields+1294
000000000000b322         align      8
                     aBytecharacterO:
000000000000b328         db         "byte/character offset %s is too large", 0  ; DATA XREF=set_fields+1240
000000000000b34e         align      16
                     aInvalidBytecha:
000000000000b350         db         "invalid byte/character position %s", 0     ; DATA XREF=set_fields+1395
000000000000b373         align      8
                     aMissingListOfB:
000000000000b378         db         "missing list of byte/character positions", 0 ; DATA XREF=set_fields+1353
                     a831:
000000000000b3a1         db         "8.31", 0                                   ; DATA XREF=Version
                     aInvalidArgumen:
000000000000b3a6         db         "invalid argument %s for %s", 0             ; DATA XREF=argmatch_invalid+96
                     aAmbiguousArgum:
000000000000b3c1         db         "ambiguous argument %s for %s", 0           ; DATA XREF=argmatch_invalid+21
                     aValidArguments:
000000000000b3de         db         "Valid arguments are:", 0                   ; DATA XREF=argmatch_valid+18
                     aNS:
000000000000b3f3         db         "\n  - %s", 0                               ; DATA XREF=argmatch_valid+102
000000000000b3fb         db  0x2c ; ','                                         ; DATA XREF=argmatch_valid+181
000000000000b3fc         db  0x20 ; ' '
000000000000b3fd         db  0x25 ; '%'                                         ; DATA XREF=close_stdout+143, xalloc_die+29
000000000000b3fe         db  0x73 ; 's'
000000000000b3ff         db  0x00 ; '.'
                     aWriteError:
000000000000b400         db         "write error", 0                            ; DATA XREF=close_stdout+67
                     aSS:
000000000000b40c         db         "%s: %s", 0                                 ; DATA XREF=close_stdout+108
000000000000b413         align      8
                     aANullArgv0WasP:
000000000000b418         db         "A NULL argv[0] was passed through an exec system call.\n", 0 ; DATA XREF=set_program_name+132
                     aLibs:
000000000000b450         db         "/.libs/", 0                                ; DATA XREF=set_program_name+44
000000000000b458         db  0x6c ; 'l'                                         ; DATA XREF=set_program_name+68
000000000000b459         db  0x74 ; 't'
000000000000b45a         db  0x2d ; '-'                                         ; DATA XREF=set_fields+32
000000000000b45b         db  0x00 ; '.'
000000000000b45c         db  0xe2 ; '.'                                         ; DATA XREF=gettext_quote.part.1+206
000000000000b45d         db  0x80 ; '.'
000000000000b45e         db  0x98 ; '.'
000000000000b45f         db  0x00 ; '.'
000000000000b460         db  0xe2 ; '.'                                         ; DATA XREF=gettext_quote.part.1+213
000000000000b461         db  0x80 ; '.'
000000000000b462         db  0x99 ; '.'
000000000000b463         db  0x00 ; '.'
000000000000b464         db  0xa1 ; '.'                                         ; DATA XREF=gettext_quote.part.1+116
000000000000b465         db  0x07 ; '.'
000000000000b466         db  0x65 ; 'e'
000000000000b467         db  0x00 ; '.'
000000000000b468         db  0xa1 ; '.'                                         ; DATA XREF=gettext_quote.part.1+123
000000000000b469         db  0xaf ; '.'
000000000000b46a         db  0x00 ; '.'
000000000000b46b         db  0x22 ; '"'                                         ; DATA XREF=gettext_quote.part.1+32, sub_6910+1451, sub_6910+1493, sub_6910+2429
000000000000b46c         db  0x00 ; '.'
000000000000b46d         db  0x27 ; '''                                         ; DATA XREF=gettext_quote.part.1+39, quotearg_buffer_restyled+179, sub_6910+132, sub_6910+1338, sub_6910+1670, sub_6910+1697, sub_6910+2352
000000000000b46e         db  0x00 ; '.'
000000000000b46f         db  0x60 ; '`'                                         ; DATA XREF=sub_6910+1627, sub_6910+1654
000000000000b470         db  0x00 ; '.'
                     aLiteral:
000000000000b471         db         "literal", 0
                     aShell:
000000000000b479         db         "shell", 0
                     aShellalways:
000000000000b47f         db         "shell-always", 0
000000000000b48c         db  0x73 ; 's'
000000000000b48d         db  0x68 ; 'h'
000000000000b48e         db  0x65 ; 'e'
000000000000b48f         db  0x6c ; 'l'
000000000000b490         db  0x6c ; 'l'
000000000000b491         db  0x2d ; '-'
                     aEscape:
000000000000b492         db         "escape", 0
                     aShellescapealw:
000000000000b499         db         "shell-escape-always", 0
                     aCmaybe:
000000000000b4ad         db         "c-maybe", 0
                     aClocale:
000000000000b4b5         db         "clocale", 0
000000000000b4bd         align      64
                     switch_table_b4c0:        // switch_table
000000000000b4c0         dd         quotearg_buffer_restyled.loc_700a-switch_table_b4c0, quotearg_buffer_restyled.loc_6263-switch_table_b4c0, quotearg_buffer_restyled.loc_7238-switch_table_b4c0, quotearg_buffer_restyled.loc_7044-switch_table_b4c0 ; switch table used at 0x6261 containing 11 entries, DATA XREF=quotearg_buffer_restyled+128
000000000000b4d0         dd         quotearg_buffer_restyled.loc_6e34-switch_table_b4c0, quotearg_buffer_restyled.loc_6e90-switch_table_b4c0, quotearg_buffer_restyled.loc_6ee5-switch_table_b4c0, quotearg_buffer_restyled.loc_6f2a-switch_table_b4c0
000000000000b4e0         dd         3 dup (quotearg_buffer_restyled.loc_6f64-switch_table_b4c0)
000000000000b4ec         db  0xf4 ; '.'                                         ; DATA XREF=quotearg_buffer_restyled+477
000000000000b4ed         db  0xb0 ; '.'
000000000000b4ee         db  0xff ; '.'
000000000000b4ef         db  0xff ; '.'
000000000000b4f0         db  0xdc ; '.'
000000000000b4f1         db  0xb1 ; '.'
000000000000b4f2         db  0xff ; '.'
000000000000b4f3         db  0xff ; '.'
000000000000b4f4         db  0xdc ; '.'
000000000000b4f5         db  0xb1 ; '.'
000000000000b4f6         db  0xff ; '.'
000000000000b4f7         db  0xff ; '.'
000000000000b4f8         db  0xdc ; '.'
000000000000b4f9         db  0xb1 ; '.'
000000000000b4fa         db  0xff ; '.'
000000000000b4fb         db  0xff ; '.'
000000000000b4fc         db  0xdc ; '.'
000000000000b4fd         db  0xb1 ; '.'
000000000000b4fe         db  0xff ; '.'
000000000000b4ff         db  0xff ; '.'
000000000000b500         db  0xdc ; '.'
000000000000b501         db  0xb1 ; '.'
000000000000b502         db  0xff ; '.'
000000000000b503         db  0xff ; '.'
000000000000b504         db  0xdc ; '.'
000000000000b505         db  0xb1 ; '.'
000000000000b506         db  0xff ; '.'
000000000000b507         db  0xff ; '.'
000000000000b508         db  0x34 ; '4'
000000000000b509         db  0xb1 ; '.'
000000000000b50a         db  0xff ; '.'
000000000000b50b         db  0xff ; '.'
000000000000b50c         db  0x3c ; '<'
000000000000b50d         db  0xb0 ; '.'
000000000000b50e         db  0xff ; '.'
000000000000b50f         db  0xff ; '.'
000000000000b510         db  0xfc ; '.'
000000000000b511         db  0xaf ; '.'
000000000000b512         db  0xff ; '.'
000000000000b513         db  0xff ; '.'
000000000000b514         db  0xc4 ; '.'
000000000000b515         db  0xb1 ; '.'
000000000000b516         db  0xff ; '.'
000000000000b517         db  0xff ; '.'
000000000000b518         db  0xb4 ; '.'
000000000000b519         db  0xb1 ; '.'
000000000000b51a         db  0xff ; '.'
000000000000b51b         db  0xff ; '.'
000000000000b51c         db  0xa4 ; '.'
000000000000b51d         db  0xb1 ; '.'
000000000000b51e         db  0xff ; '.'
000000000000b51f         db  0xff ; '.'
000000000000b520         db  0x94 ; '.'
000000000000b521         db  0xb1 ; '.'
000000000000b522         db  0xff ; '.'
000000000000b523         db  0xff ; '.'
000000000000b524         db  0xdc ; '.'
000000000000b525         db  0xb1 ; '.'
000000000000b526         db  0xff ; '.'
000000000000b527         db  0xff ; '.'
000000000000b528         db  0xdc ; '.'
000000000000b529         db  0xb1 ; '.'
000000000000b52a         db  0xff ; '.'
000000000000b52b         db  0xff ; '.'
000000000000b52c         db  0xdc ; '.'
000000000000b52d         db  0xb1 ; '.'
000000000000b52e         db  0xff ; '.'
000000000000b52f         db  0xff ; '.'
000000000000b530         db  0xdc ; '.'
000000000000b531         db  0xb1 ; '.'
000000000000b532         db  0xff ; '.'
000000000000b533         db  0xff ; '.'
000000000000b534         db  0xdc ; '.'
000000000000b535         db  0xb1 ; '.'
000000000000b536         db  0xff ; '.'
000000000000b537         db  0xff ; '.'
000000000000b538         db  0xdc ; '.'
000000000000b539         db  0xb1 ; '.'
000000000000b53a         db  0xff ; '.'
000000000000b53b         db  0xff ; '.'
000000000000b53c         db  0xdc ; '.'
000000000000b53d         db  0xb1 ; '.'
000000000000b53e         db  0xff ; '.'
000000000000b53f         db  0xff ; '.'
000000000000b540         db  0xdc ; '.'
000000000000b541         db  0xb1 ; '.'
000000000000b542         db  0xff ; '.'
000000000000b543         db  0xff ; '.'
000000000000b544         db  0xdc ; '.'
000000000000b545         db  0xb1 ; '.'
000000000000b546         db  0xff ; '.'
000000000000b547         db  0xff ; '.'
000000000000b548         db  0xdc ; '.'
000000000000b549         db  0xb1 ; '.'
000000000000b54a         db  0xff ; '.'
000000000000b54b         db  0xff ; '.'
000000000000b54c         db  0xdc ; '.'
000000000000b54d         db  0xb1 ; '.'
000000000000b54e         db  0xff ; '.'
000000000000b54f         db  0xff ; '.'
000000000000b550         db  0xdc ; '.'
000000000000b551         db  0xb1 ; '.'
000000000000b552         db  0xff ; '.'
000000000000b553         db  0xff ; '.'
000000000000b554         db  0xdc ; '.'
000000000000b555         db  0xb1 ; '.'
000000000000b556         db  0xff ; '.'
000000000000b557         db  0xff ; '.'
000000000000b558         db  0xdc ; '.'
000000000000b559         db  0xb1 ; '.'
000000000000b55a         db  0xff ; '.'
000000000000b55b         db  0xff ; '.'
000000000000b55c         db  0xdc ; '.'
000000000000b55d         db  0xb1 ; '.'
000000000000b55e         db  0xff ; '.'
000000000000b55f         db  0xff ; '.'
000000000000b560         db  0xdc ; '.'
000000000000b561         db  0xb1 ; '.'
000000000000b562         db  0xff ; '.'
000000000000b563         db  0xff ; '.'
000000000000b564         db  0xdc ; '.'
000000000000b565         db  0xb1 ; '.'
000000000000b566         db  0xff ; '.'
000000000000b567         db  0xff ; '.'
000000000000b568         db  0xdc ; '.'
000000000000b569         db  0xb1 ; '.'
000000000000b56a         db  0xff ; '.'
000000000000b56b         db  0xff ; '.'
000000000000b56c         db  0x84 ; '.'
000000000000b56d         db  0xb1 ; '.'
000000000000b56e         db  0xff ; '.'
000000000000b56f         db  0xff ; '.'
000000000000b570         db  0x74 ; 't'
000000000000b571         db  0xb1 ; '.'
000000000000b572         db  0xff ; '.'
000000000000b573         db  0xff ; '.'
000000000000b574         db  0x74 ; 't'
000000000000b575         db  0xb1 ; '.'
000000000000b576         db  0xff ; '.'
000000000000b577         db  0xff ; '.'
000000000000b578         db  0x44 ; 'D'
000000000000b579         db  0xb1 ; '.'
000000000000b57a         db  0xff ; '.'
000000000000b57b         db  0xff ; '.'
000000000000b57c         db  0x74 ; 't'
000000000000b57d         db  0xb1 ; '.'
000000000000b57e         db  0xff ; '.'
000000000000b57f         db  0xff ; '.'
000000000000b580         db  0x1c ; '.'
000000000000b581         db  0xb1 ; '.'
000000000000b582         db  0xff ; '.'
000000000000b583         db  0xff ; '.'
000000000000b584         db  0x74 ; 't'
000000000000b585         db  0xb1 ; '.'
000000000000b586         db  0xff ; '.'
000000000000b587         db  0xff ; '.'
000000000000b588         db  0xd7 ; '.'
000000000000b589         db  0xaf ; '.'
000000000000b58a         db  0xff ; '.'
000000000000b58b         db  0xff ; '.'
000000000000b58c         db  0x74 ; 't'
000000000000b58d         db  0xb1 ; '.'
000000000000b58e         db  0xff ; '.'
000000000000b58f         db  0xff ; '.'
000000000000b590         db  0x74 ; 't'
000000000000b591         db  0xb1 ; '.'
000000000000b592         db  0xff ; '.'
000000000000b593         db  0xff ; '.'
000000000000b594         db  0x74 ; 't'
000000000000b595         db  0xb1 ; '.'
000000000000b596         db  0xff ; '.'
000000000000b597         db  0xff ; '.'
000000000000b598         db  0x1c ; '.'
000000000000b599         db  0xb1 ; '.'
000000000000b59a         db  0xff ; '.'
000000000000b59b         db  0xff ; '.'
000000000000b59c         db  0x1c ; '.'
000000000000b59d         db  0xb1 ; '.'
000000000000b59e         db  0xff ; '.'
000000000000b59f         db  0xff ; '.'
000000000000b5a0         db  0x1c ; '.'
000000000000b5a1         db  0xb1 ; '.'
000000000000b5a2         db  0xff ; '.'
000000000000b5a3         db  0xff ; '.'
000000000000b5a4         db  0x1c ; '.'
000000000000b5a5         db  0xb1 ; '.'
000000000000b5a6         db  0xff ; '.'
000000000000b5a7         db  0xff ; '.'
000000000000b5a8         db  0x1c ; '.'
000000000000b5a9         db  0xb1 ; '.'
000000000000b5aa         db  0xff ; '.'
000000000000b5ab         db  0xff ; '.'
000000000000b5ac         db  0x1c ; '.'
000000000000b5ad         db  0xb1 ; '.'
000000000000b5ae         db  0xff ; '.'
000000000000b5af         db  0xff ; '.'
000000000000b5b0         db  0x1c ; '.'
000000000000b5b1         db  0xb1 ; '.'
000000000000b5b2         db  0xff ; '.'
000000000000b5b3         db  0xff ; '.'
000000000000b5b4         db  0x1c ; '.'
000000000000b5b5         db  0xb1 ; '.'
000000000000b5b6         db  0xff ; '.'
000000000000b5b7         db  0xff ; '.'
000000000000b5b8         db  0x1c ; '.'
000000000000b5b9         db  0xb1 ; '.'
000000000000b5ba         db  0xff ; '.'
000000000000b5bb         db  0xff ; '.'
000000000000b5bc         db  0x1c ; '.'
000000000000b5bd         db  0xb1 ; '.'
000000000000b5be         db  0xff ; '.'
000000000000b5bf         db  0xff ; '.'
000000000000b5c0         db  0x1c ; '.'
000000000000b5c1         db  0xb1 ; '.'
000000000000b5c2         db  0xff ; '.'
000000000000b5c3         db  0xff ; '.'
000000000000b5c4         db  0x1c ; '.'
000000000000b5c5         db  0xb1 ; '.'
000000000000b5c6         db  0xff ; '.'
000000000000b5c7         db  0xff ; '.'
000000000000b5c8         db  0x1c ; '.'
000000000000b5c9         db  0xb1 ; '.'
000000000000b5ca         db  0xff ; '.'
000000000000b5cb         db  0xff ; '.'
000000000000b5cc         db  0x1c ; '.'
000000000000b5cd         db  0xb1 ; '.'
000000000000b5ce         db  0xff ; '.'
000000000000b5cf         db  0xff ; '.'
000000000000b5d0         db  0x1c ; '.'
000000000000b5d1         db  0xb1 ; '.'
000000000000b5d2         db  0xff ; '.'
000000000000b5d3         db  0xff ; '.'
000000000000b5d4         db  0x1c ; '.'
000000000000b5d5         db  0xb1 ; '.'
000000000000b5d6         db  0xff ; '.'
000000000000b5d7         db  0xff ; '.'
000000000000b5d8         db  0x74 ; 't'
000000000000b5d9         db  0xb1 ; '.'
000000000000b5da         db  0xff ; '.'
000000000000b5db         db  0xff ; '.'
000000000000b5dc         db  0x74 ; 't'
000000000000b5dd         db  0xb1 ; '.'
000000000000b5de         db  0xff ; '.'
000000000000b5df         db  0xff ; '.'
000000000000b5e0         db  0x74 ; 't'
000000000000b5e1         db  0xb1 ; '.'
000000000000b5e2         db  0xff ; '.'
000000000000b5e3         db  0xff ; '.'
000000000000b5e4         db  0x74 ; 't'
000000000000b5e5         db  0xb1 ; '.'
000000000000b5e6         db  0xff ; '.'
000000000000b5e7         db  0xff ; '.'
000000000000b5e8         db  0xa7 ; '.'
000000000000b5e9         db  0xaf ; '.'
000000000000b5ea         db  0xff ; '.'
000000000000b5eb         db  0xff ; '.'
000000000000b5ec         db  0xdc ; '.'
000000000000b5ed         db  0xb1 ; '.'
000000000000b5ee         db  0xff ; '.'
000000000000b5ef         db  0xff ; '.'
000000000000b5f0         db  0x1c ; '.'
000000000000b5f1         db  0xb1 ; '.'
000000000000b5f2         db  0xff ; '.'
000000000000b5f3         db  0xff ; '.'
000000000000b5f4         db  0x1c ; '.'
000000000000b5f5         db  0xb1 ; '.'
000000000000b5f6         db  0xff ; '.'
000000000000b5f7         db  0xff ; '.'
000000000000b5f8         db  0x1c ; '.'
000000000000b5f9         db  0xb1 ; '.'
000000000000b5fa         db  0xff ; '.'
000000000000b5fb         db  0xff ; '.'
000000000000b5fc         db  0x1c ; '.'
000000000000b5fd         db  0xb1 ; '.'
000000000000b5fe         db  0xff ; '.'
000000000000b5ff         db  0xff ; '.'
000000000000b600         db  0x1c ; '.'
000000000000b601         db  0xb1 ; '.'
000000000000b602         db  0xff ; '.'
000000000000b603         db  0xff ; '.'
000000000000b604         db  0x1c ; '.'
000000000000b605         db  0xb1 ; '.'
000000000000b606         db  0xff ; '.'
000000000000b607         db  0xff ; '.'
000000000000b608         db  0x1c ; '.'
000000000000b609         db  0xb1 ; '.'
000000000000b60a         db  0xff ; '.'
000000000000b60b         db  0xff ; '.'
000000000000b60c         db  0x1c ; '.'
000000000000b60d         db  0xb1 ; '.'
000000000000b60e         db  0xff ; '.'
000000000000b60f         db  0xff ; '.'
000000000000b610         db  0x1c ; '.'
000000000000b611         db  0xb1 ; '.'
000000000000b612         db  0xff ; '.'
000000000000b613         db  0xff ; '.'
000000000000b614         db  0x1c ; '.'
000000000000b615         db  0xb1 ; '.'
000000000000b616         db  0xff ; '.'
000000000000b617         db  0xff ; '.'
000000000000b618         db  0x1c ; '.'
000000000000b619         db  0xb1 ; '.'
000000000000b61a         db  0xff ; '.'
000000000000b61b         db  0xff ; '.'
000000000000b61c         db  0x1c ; '.'
000000000000b61d         db  0xb1 ; '.'
000000000000b61e         db  0xff ; '.'
000000000000b61f         db  0xff ; '.'
000000000000b620         db  0x1c ; '.'
000000000000b621         db  0xb1 ; '.'
000000000000b622         db  0xff ; '.'
000000000000b623         db  0xff ; '.'
000000000000b624         db  0x1c ; '.'
000000000000b625         db  0xb1 ; '.'
000000000000b626         db  0xff ; '.'
000000000000b627         db  0xff ; '.'
000000000000b628         db  0x1c ; '.'
000000000000b629         db  0xb1 ; '.'
000000000000b62a         db  0xff ; '.'
000000000000b62b         db  0xff ; '.'
000000000000b62c         db  0x1c ; '.'
000000000000b62d         db  0xb1 ; '.'
000000000000b62e         db  0xff ; '.'
000000000000b62f         db  0xff ; '.'
000000000000b630         db  0x1c ; '.'
000000000000b631         db  0xb1 ; '.'
000000000000b632         db  0xff ; '.'
000000000000b633         db  0xff ; '.'
000000000000b634         db  0x1c ; '.'
000000000000b635         db  0xb1 ; '.'
000000000000b636         db  0xff ; '.'
000000000000b637         db  0xff ; '.'
000000000000b638         db  0x1c ; '.'
000000000000b639         db  0xb1 ; '.'
000000000000b63a         db  0xff ; '.'
000000000000b63b         db  0xff ; '.'
000000000000b63c         db  0x1c ; '.'
000000000000b63d         db  0xb1 ; '.'
000000000000b63e         db  0xff ; '.'
000000000000b63f         db  0xff ; '.'
000000000000b640         db  0x1c ; '.'
000000000000b641         db  0xb1 ; '.'
000000000000b642         db  0xff ; '.'
000000000000b643         db  0xff ; '.'
000000000000b644         db  0x1c ; '.'
000000000000b645         db  0xb1 ; '.'
000000000000b646         db  0xff ; '.'
000000000000b647         db  0xff ; '.'
000000000000b648         db  0x1c ; '.'
000000000000b649         db  0xb1 ; '.'
000000000000b64a         db  0xff ; '.'
000000000000b64b         db  0xff ; '.'
000000000000b64c         db  0x1c ; '.'
000000000000b64d         db  0xb1 ; '.'
000000000000b64e         db  0xff ; '.'
000000000000b64f         db  0xff ; '.'
000000000000b650         db  0x1c ; '.'
000000000000b651         db  0xb1 ; '.'
000000000000b652         db  0xff ; '.'
000000000000b653         db  0xff ; '.'
000000000000b654         db  0x1c ; '.'
000000000000b655         db  0xb1 ; '.'
000000000000b656         db  0xff ; '.'
000000000000b657         db  0xff ; '.'
000000000000b658         db  0x74 ; 't'
000000000000b659         db  0xb1 ; '.'
000000000000b65a         db  0xff ; '.'
000000000000b65b         db  0xff ; '.'
000000000000b65c         db  0x4c ; 'L'
000000000000b65d         db  0xb0 ; '.'
000000000000b65e         db  0xff ; '.'
000000000000b65f         db  0xff ; '.'
000000000000b660         db  0x1c ; '.'
000000000000b661         db  0xb1 ; '.'
000000000000b662         db  0xff ; '.'
000000000000b663         db  0xff ; '.'
000000000000b664         db  0x74 ; 't'
000000000000b665         db  0xb1 ; '.'
000000000000b666         db  0xff ; '.'
000000000000b667         db  0xff ; '.'
000000000000b668         db  0x1c ; '.'
000000000000b669         db  0xb1 ; '.'
000000000000b66a         db  0xff ; '.'
000000000000b66b         db  0xff ; '.'
000000000000b66c         db  0x74 ; 't'
000000000000b66d         db  0xb1 ; '.'
000000000000b66e         db  0xff ; '.'
000000000000b66f         db  0xff ; '.'
000000000000b670         db  0x1c ; '.'
000000000000b671         db  0xb1 ; '.'
000000000000b672         db  0xff ; '.'
000000000000b673         db  0xff ; '.'
000000000000b674         db  0x1c ; '.'
000000000000b675         db  0xb1 ; '.'
000000000000b676         db  0xff ; '.'
000000000000b677         db  0xff ; '.'
000000000000b678         db  0x1c ; '.'
000000000000b679         db  0xb1 ; '.'
000000000000b67a         db  0xff ; '.'
000000000000b67b         db  0xff ; '.'
000000000000b67c         db  0x1c ; '.'
000000000000b67d         db  0xb1 ; '.'
000000000000b67e         db  0xff ; '.'
000000000000b67f         db  0xff ; '.'
000000000000b680         db  0x1c ; '.'
000000000000b681         db  0xb1 ; '.'
000000000000b682         db  0xff ; '.'
000000000000b683         db  0xff ; '.'
000000000000b684         db  0x1c ; '.'
000000000000b685         db  0xb1 ; '.'
000000000000b686         db  0xff ; '.'
000000000000b687         db  0xff ; '.'
000000000000b688         db  0x1c ; '.'
000000000000b689         db  0xb1 ; '.'
000000000000b68a         db  0xff ; '.'
000000000000b68b         db  0xff ; '.'
000000000000b68c         db  0x1c ; '.'
000000000000b68d         db  0xb1 ; '.'
000000000000b68e         db  0xff ; '.'
000000000000b68f         db  0xff ; '.'
000000000000b690         db  0x1c ; '.'
000000000000b691         db  0xb1 ; '.'
000000000000b692         db  0xff ; '.'
000000000000b693         db  0xff ; '.'
000000000000b694         db  0x1c ; '.'
000000000000b695         db  0xb1 ; '.'
000000000000b696         db  0xff ; '.'
000000000000b697         db  0xff ; '.'
000000000000b698         db  0x1c ; '.'
000000000000b699         db  0xb1 ; '.'
000000000000b69a         db  0xff ; '.'
000000000000b69b         db  0xff ; '.'
000000000000b69c         db  0x1c ; '.'
000000000000b69d         db  0xb1 ; '.'
000000000000b69e         db  0xff ; '.'
000000000000b69f         db  0xff ; '.'
000000000000b6a0         db  0x1c ; '.'
000000000000b6a1         db  0xb1 ; '.'
000000000000b6a2         db  0xff ; '.'
000000000000b6a3         db  0xff ; '.'
000000000000b6a4         db  0x1c ; '.'
000000000000b6a5         db  0xb1 ; '.'
000000000000b6a6         db  0xff ; '.'
000000000000b6a7         db  0xff ; '.'
000000000000b6a8         db  0x1c ; '.'
000000000000b6a9         db  0xb1 ; '.'
000000000000b6aa         db  0xff ; '.'
000000000000b6ab         db  0xff ; '.'
000000000000b6ac         db  0x1c ; '.'
000000000000b6ad         db  0xb1 ; '.'
000000000000b6ae         db  0xff ; '.'
000000000000b6af         db  0xff ; '.'
000000000000b6b0         db  0x1c ; '.'
000000000000b6b1         db  0xb1 ; '.'
000000000000b6b2         db  0xff ; '.'
000000000000b6b3         db  0xff ; '.'
000000000000b6b4         db  0x1c ; '.'
000000000000b6b5         db  0xb1 ; '.'
000000000000b6b6         db  0xff ; '.'
000000000000b6b7         db  0xff ; '.'
000000000000b6b8         db  0x1c ; '.'
000000000000b6b9         db  0xb1 ; '.'
000000000000b6ba         db  0xff ; '.'
000000000000b6bb         db  0xff ; '.'
000000000000b6bc         db  0x1c ; '.'
000000000000b6bd         db  0xb1 ; '.'
000000000000b6be         db  0xff ; '.'
000000000000b6bf         db  0xff ; '.'
000000000000b6c0         db  0x1c ; '.'
000000000000b6c1         db  0xb1 ; '.'
000000000000b6c2         db  0xff ; '.'
000000000000b6c3         db  0xff ; '.'
000000000000b6c4         db  0x1c ; '.'
000000000000b6c5         db  0xb1 ; '.'
000000000000b6c6         db  0xff ; '.'
000000000000b6c7         db  0xff ; '.'
000000000000b6c8         db  0x1c ; '.'
000000000000b6c9         db  0xb1 ; '.'
000000000000b6ca         db  0xff ; '.'
000000000000b6cb         db  0xff ; '.'
000000000000b6cc         db  0x1c ; '.'
000000000000b6cd         db  0xb1 ; '.'
000000000000b6ce         db  0xff ; '.'
000000000000b6cf         db  0xff ; '.'
000000000000b6d0         db  0x1c ; '.'
000000000000b6d1         db  0xb1 ; '.'
000000000000b6d2         db  0xff ; '.'
000000000000b6d3         db  0xff ; '.'
000000000000b6d4         db  0x1c ; '.'
000000000000b6d5         db  0xb1 ; '.'
000000000000b6d6         db  0xff ; '.'
000000000000b6d7         db  0xff ; '.'
000000000000b6d8         db  0xd7 ; '.'
000000000000b6d9         db  0xae ; '.'
000000000000b6da         db  0xff ; '.'
000000000000b6db         db  0xff ; '.'
000000000000b6dc         db  0x74 ; 't'
000000000000b6dd         db  0xb1 ; '.'
000000000000b6de         db  0xff ; '.'
000000000000b6df         db  0xff ; '.'
000000000000b6e0         db  0xd7 ; '.'
000000000000b6e1         db  0xae ; '.'
000000000000b6e2         db  0xff ; '.'
000000000000b6e3         db  0xff ; '.'
000000000000b6e4         db  0x44 ; 'D'
000000000000b6e5         db  0xb1 ; '.'
000000000000b6e6         db  0xff ; '.'
000000000000b6e7         db  0xff ; '.'
000000000000b6e8         db  0xc8 ; '.'                                         ; DATA XREF=sub_66b0+137
000000000000b6e9         db  0xb0 ; '.'
000000000000b6ea         db  0xff ; '.'
000000000000b6eb         db  0xff ; '.'
000000000000b6ec         db  0xd8 ; '.'
000000000000b6ed         db  0xaf ; '.'
000000000000b6ee         db  0xff ; '.'
000000000000b6ef         db  0xff ; '.'
000000000000b6f0         db  0xd8 ; '.'
000000000000b6f1         db  0xaf ; '.'
000000000000b6f2         db  0xff ; '.'
000000000000b6f3         db  0xff ; '.'
000000000000b6f4         db  0xd8 ; '.'
000000000000b6f5         db  0xaf ; '.'
000000000000b6f6         db  0xff ; '.'
000000000000b6f7         db  0xff ; '.'
000000000000b6f8         db  0xd8 ; '.'
000000000000b6f9         db  0xaf ; '.'
000000000000b6fa         db  0xff ; '.'
000000000000b6fb         db  0xff ; '.'
000000000000b6fc         db  0xd8 ; '.'
000000000000b6fd         db  0xaf ; '.'
000000000000b6fe         db  0xff ; '.'
000000000000b6ff         db  0xff ; '.'
000000000000b700         db  0xd8 ; '.'
000000000000b701         db  0xaf ; '.'
000000000000b702         db  0xff ; '.'
000000000000b703         db  0xff ; '.'
000000000000b704         db  0xb8 ; '.'
000000000000b705         db  0xb0 ; '.'
000000000000b706         db  0xff ; '.'
000000000000b707         db  0xff ; '.'
000000000000b708         db  0x08 ; '.'
000000000000b709         db  0xb2 ; '.'
000000000000b70a         db  0xff ; '.'
000000000000b70b         db  0xff ; '.'
000000000000b70c         db  0xf0 ; '.'
000000000000b70d         db  0xb1 ; '.'
000000000000b70e         db  0xff ; '.'
000000000000b70f         db  0xff ; '.'
000000000000b710         db  0xa0 ; '.'
000000000000b711         db  0xb0 ; '.'
000000000000b712         db  0xff ; '.'
000000000000b713         db  0xff ; '.'
000000000000b714         db  0xe0 ; '.'
000000000000b715         db  0xb1 ; '.'
000000000000b716         db  0xff ; '.'
000000000000b717         db  0xff ; '.'
000000000000b718         db  0x88 ; '.'
000000000000b719         db  0xb0 ; '.'
000000000000b71a         db  0xff ; '.'
000000000000b71b         db  0xff ; '.'
000000000000b71c         db  0xc8 ; '.'
000000000000b71d         db  0xb1 ; '.'
000000000000b71e         db  0xff ; '.'
000000000000b71f         db  0xff ; '.'
000000000000b720         db  0xd8 ; '.'
000000000000b721         db  0xaf ; '.'
000000000000b722         db  0xff ; '.'
000000000000b723         db  0xff ; '.'
000000000000b724         db  0xd8 ; '.'
000000000000b725         db  0xaf ; '.'
000000000000b726         db  0xff ; '.'
000000000000b727         db  0xff ; '.'
000000000000b728         db  0xd8 ; '.'
000000000000b729         db  0xaf ; '.'
000000000000b72a         db  0xff ; '.'
000000000000b72b         db  0xff ; '.'
000000000000b72c         db  0xd8 ; '.'
000000000000b72d         db  0xaf ; '.'
000000000000b72e         db  0xff ; '.'
000000000000b72f         db  0xff ; '.'
000000000000b730         db  0xd8 ; '.'
000000000000b731         db  0xaf ; '.'
000000000000b732         db  0xff ; '.'
000000000000b733         db  0xff ; '.'
000000000000b734         db  0xd8 ; '.'
000000000000b735         db  0xaf ; '.'
000000000000b736         db  0xff ; '.'
000000000000b737         db  0xff ; '.'
000000000000b738         db  0xd8 ; '.'
000000000000b739         db  0xaf ; '.'
000000000000b73a         db  0xff ; '.'
000000000000b73b         db  0xff ; '.'
000000000000b73c         db  0xd8 ; '.'
000000000000b73d         db  0xaf ; '.'
000000000000b73e         db  0xff ; '.'
000000000000b73f         db  0xff ; '.'
000000000000b740         db  0xd8 ; '.'
000000000000b741         db  0xaf ; '.'
000000000000b742         db  0xff ; '.'
000000000000b743         db  0xff ; '.'
000000000000b744         db  0xd8 ; '.'
000000000000b745         db  0xaf ; '.'
000000000000b746         db  0xff ; '.'
000000000000b747         db  0xff ; '.'
000000000000b748         db  0xd8 ; '.'
000000000000b749         db  0xaf ; '.'
000000000000b74a         db  0xff ; '.'
000000000000b74b         db  0xff ; '.'
000000000000b74c         db  0xd8 ; '.'
000000000000b74d         db  0xaf ; '.'
000000000000b74e         db  0xff ; '.'
000000000000b74f         db  0xff ; '.'
000000000000b750         db  0xd8 ; '.'
000000000000b751         db  0xaf ; '.'
000000000000b752         db  0xff ; '.'
000000000000b753         db  0xff ; '.'
000000000000b754         db  0xd8 ; '.'
000000000000b755         db  0xaf ; '.'
000000000000b756         db  0xff ; '.'
000000000000b757         db  0xff ; '.'
000000000000b758         db  0xd8 ; '.'
000000000000b759         db  0xaf ; '.'
000000000000b75a         db  0xff ; '.'
000000000000b75b         db  0xff ; '.'
000000000000b75c         db  0xd8 ; '.'
000000000000b75d         db  0xaf ; '.'
000000000000b75e         db  0xff ; '.'
000000000000b75f         db  0xff ; '.'
000000000000b760         db  0xd8 ; '.'
000000000000b761         db  0xaf ; '.'
000000000000b762         db  0xff ; '.'
000000000000b763         db  0xff ; '.'
000000000000b764         db  0xd8 ; '.'
000000000000b765         db  0xaf ; '.'
000000000000b766         db  0xff ; '.'
000000000000b767         db  0xff ; '.'
000000000000b768         db  0xb0 ; '.'
000000000000b769         db  0xb1 ; '.'
000000000000b76a         db  0xff ; '.'
000000000000b76b         db  0xff ; '.'
000000000000b76c         db  0x98 ; '.'
000000000000b76d         db  0xb1 ; '.'
000000000000b76e         db  0xff ; '.'
000000000000b76f         db  0xff ; '.'
000000000000b770         db  0x98 ; '.'
000000000000b771         db  0xb1 ; '.'
000000000000b772         db  0xff ; '.'
000000000000b773         db  0xff ; '.'
000000000000b774         db  0x80 ; '.'
000000000000b775         db  0xb1 ; '.'
000000000000b776         db  0xff ; '.'
000000000000b777         db  0xff ; '.'
000000000000b778         db  0x98 ; '.'
000000000000b779         db  0xb1 ; '.'
000000000000b77a         db  0xff ; '.'
000000000000b77b         db  0xff ; '.'
000000000000b77c         db  0x68 ; 'h'
000000000000b77d         db  0xb1 ; '.'
000000000000b77e         db  0xff ; '.'
000000000000b77f         db  0xff ; '.'
000000000000b780         db  0x98 ; '.'
000000000000b781         db  0xb1 ; '.'
000000000000b782         db  0xff ; '.'
000000000000b783         db  0xff ; '.'
000000000000b784         db  0xd8 ; '.'
000000000000b785         db  0xad ; '.'
000000000000b786         db  0xff ; '.'
000000000000b787         db  0xff ; '.'
000000000000b788         db  0x98 ; '.'
000000000000b789         db  0xb1 ; '.'
000000000000b78a         db  0xff ; '.'
000000000000b78b         db  0xff ; '.'
000000000000b78c         db  0x98 ; '.'
000000000000b78d         db  0xb1 ; '.'
000000000000b78e         db  0xff ; '.'
000000000000b78f         db  0xff ; '.'
000000000000b790         db  0x98 ; '.'
000000000000b791         db  0xb1 ; '.'
000000000000b792         db  0xff ; '.'
000000000000b793         db  0xff ; '.'
000000000000b794         db  0x68 ; 'h'
000000000000b795         db  0xb1 ; '.'
000000000000b796         db  0xff ; '.'
000000000000b797         db  0xff ; '.'
000000000000b798         db  0x68 ; 'h'
000000000000b799         db  0xb1 ; '.'
000000000000b79a         db  0xff ; '.'
000000000000b79b         db  0xff ; '.'
000000000000b79c         db  0x68 ; 'h'
000000000000b79d         db  0xb1 ; '.'
000000000000b79e         db  0xff ; '.'
000000000000b79f         db  0xff ; '.'
000000000000b7a0         db  0x68 ; 'h'
000000000000b7a1         db  0xb1 ; '.'
000000000000b7a2         db  0xff ; '.'
000000000000b7a3         db  0xff ; '.'
000000000000b7a4         db  0x68 ; 'h'
000000000000b7a5         db  0xb1 ; '.'
000000000000b7a6         db  0xff ; '.'
000000000000b7a7         db  0xff ; '.'
000000000000b7a8         db  0x68 ; 'h'
000000000000b7a9         db  0xb1 ; '.'
000000000000b7aa         db  0xff ; '.'
000000000000b7ab         db  0xff ; '.'
000000000000b7ac         db  0x68 ; 'h'
000000000000b7ad         db  0xb1 ; '.'
000000000000b7ae         db  0xff ; '.'
000000000000b7af         db  0xff ; '.'
000000000000b7b0         db  0x68 ; 'h'
000000000000b7b1         db  0xb1 ; '.'
000000000000b7b2         db  0xff ; '.'
000000000000b7b3         db  0xff ; '.'
000000000000b7b4         db  0x68 ; 'h'
000000000000b7b5         db  0xb1 ; '.'
000000000000b7b6         db  0xff ; '.'
000000000000b7b7         db  0xff ; '.'
000000000000b7b8         db  0x68 ; 'h'
000000000000b7b9         db  0xb1 ; '.'
000000000000b7ba         db  0xff ; '.'
000000000000b7bb         db  0xff ; '.'
000000000000b7bc         db  0x68 ; 'h'
000000000000b7bd         db  0xb1 ; '.'
000000000000b7be         db  0xff ; '.'
000000000000b7bf         db  0xff ; '.'
000000000000b7c0         db  0x68 ; 'h'
000000000000b7c1         db  0xb1 ; '.'
000000000000b7c2         db  0xff ; '.'
000000000000b7c3         db  0xff ; '.'
000000000000b7c4         db  0x68 ; 'h'
000000000000b7c5         db  0xb1 ; '.'
000000000000b7c6         db  0xff ; '.'
000000000000b7c7         db  0xff ; '.'
000000000000b7c8         db  0x68 ; 'h'
000000000000b7c9         db  0xb1 ; '.'
000000000000b7ca         db  0xff ; '.'
000000000000b7cb         db  0xff ; '.'
000000000000b7cc         db  0x68 ; 'h'
000000000000b7cd         db  0xb1 ; '.'
000000000000b7ce         db  0xff ; '.'
000000000000b7cf         db  0xff ; '.'
000000000000b7d0         db  0x68 ; 'h'
000000000000b7d1         db  0xb1 ; '.'
000000000000b7d2         db  0xff ; '.'
000000000000b7d3         db  0xff ; '.'
000000000000b7d4         db  0x98 ; '.'
000000000000b7d5         db  0xb1 ; '.'
000000000000b7d6         db  0xff ; '.'
000000000000b7d7         db  0xff ; '.'
000000000000b7d8         db  0x98 ; '.'
000000000000b7d9         db  0xb1 ; '.'
000000000000b7da         db  0xff ; '.'
000000000000b7db         db  0xff ; '.'
000000000000b7dc         db  0x98 ; '.'
000000000000b7dd         db  0xb1 ; '.'
000000000000b7de         db  0xff ; '.'
000000000000b7df         db  0xff ; '.'
000000000000b7e0         db  0x98 ; '.'
000000000000b7e1         db  0xb1 ; '.'
000000000000b7e2         db  0xff ; '.'
000000000000b7e3         db  0xff ; '.'
000000000000b7e4         db  0xa8 ; '.'
000000000000b7e5         db  0xad ; '.'
000000000000b7e6         db  0xff ; '.'
000000000000b7e7         db  0xff ; '.'
000000000000b7e8         db  0xd8 ; '.'
000000000000b7e9         db  0xaf ; '.'
000000000000b7ea         db  0xff ; '.'
000000000000b7eb         db  0xff ; '.'
000000000000b7ec         db  0x68 ; 'h'
000000000000b7ed         db  0xb1 ; '.'
000000000000b7ee         db  0xff ; '.'
000000000000b7ef         db  0xff ; '.'
000000000000b7f0         db  0x68 ; 'h'
000000000000b7f1         db  0xb1 ; '.'
000000000000b7f2         db  0xff ; '.'
000000000000b7f3         db  0xff ; '.'
000000000000b7f4         db  0x68 ; 'h'
000000000000b7f5         db  0xb1 ; '.'
000000000000b7f6         db  0xff ; '.'
000000000000b7f7         db  0xff ; '.'
000000000000b7f8         db  0x68 ; 'h'
000000000000b7f9         db  0xb1 ; '.'
000000000000b7fa         db  0xff ; '.'
000000000000b7fb         db  0xff ; '.'
000000000000b7fc         db  0x68 ; 'h'
000000000000b7fd         db  0xb1 ; '.'
000000000000b7fe         db  0xff ; '.'
000000000000b7ff         db  0xff ; '.'
000000000000b800         db  0x68 ; 'h'
000000000000b801         db  0xb1 ; '.'
000000000000b802         db  0xff ; '.'
000000000000b803         db  0xff ; '.'
000000000000b804         db  0x68 ; 'h'
000000000000b805         db  0xb1 ; '.'
000000000000b806         db  0xff ; '.'
000000000000b807         db  0xff ; '.'
000000000000b808         db  0x68 ; 'h'
000000000000b809         db  0xb1 ; '.'
000000000000b80a         db  0xff ; '.'
000000000000b80b         db  0xff ; '.'
000000000000b80c         db  0x68 ; 'h'
000000000000b80d         db  0xb1 ; '.'
000000000000b80e         db  0xff ; '.'
000000000000b80f         db  0xff ; '.'
000000000000b810         db  0x68 ; 'h'
000000000000b811         db  0xb1 ; '.'
000000000000b812         db  0xff ; '.'
000000000000b813         db  0xff ; '.'
000000000000b814         db  0x68 ; 'h'
000000000000b815         db  0xb1 ; '.'
000000000000b816         db  0xff ; '.'
000000000000b817         db  0xff ; '.'
000000000000b818         db  0x68 ; 'h'
000000000000b819         db  0xb1 ; '.'
000000000000b81a         db  0xff ; '.'
000000000000b81b         db  0xff ; '.'
000000000000b81c         db  0x68 ; 'h'
000000000000b81d         db  0xb1 ; '.'
000000000000b81e         db  0xff ; '.'
000000000000b81f         db  0xff ; '.'
000000000000b820         db  0x68 ; 'h'
000000000000b821         db  0xb1 ; '.'
000000000000b822         db  0xff ; '.'
000000000000b823         db  0xff ; '.'
000000000000b824         db  0x68 ; 'h'
000000000000b825         db  0xb1 ; '.'
000000000000b826         db  0xff ; '.'
000000000000b827         db  0xff ; '.'
000000000000b828         db  0x68 ; 'h'
000000000000b829         db  0xb1 ; '.'
000000000000b82a         db  0xff ; '.'
000000000000b82b         db  0xff ; '.'
000000000000b82c         db  0x68 ; 'h'
000000000000b82d         db  0xb1 ; '.'
000000000000b82e         db  0xff ; '.'
000000000000b82f         db  0xff ; '.'
000000000000b830         db  0x68 ; 'h'
000000000000b831         db  0xb1 ; '.'
000000000000b832         db  0xff ; '.'
000000000000b833         db  0xff ; '.'
000000000000b834         db  0x68 ; 'h'
000000000000b835         db  0xb1 ; '.'
000000000000b836         db  0xff ; '.'
000000000000b837         db  0xff ; '.'
000000000000b838         db  0x68 ; 'h'
000000000000b839         db  0xb1 ; '.'
000000000000b83a         db  0xff ; '.'
000000000000b83b         db  0xff ; '.'
000000000000b83c         db  0x68 ; 'h'
000000000000b83d         db  0xb1 ; '.'
000000000000b83e         db  0xff ; '.'
000000000000b83f         db  0xff ; '.'
000000000000b840         db  0x68 ; 'h'
000000000000b841         db  0xb1 ; '.'
000000000000b842         db  0xff ; '.'
000000000000b843         db  0xff ; '.'
000000000000b844         db  0x68 ; 'h'
000000000000b845         db  0xb1 ; '.'
000000000000b846         db  0xff ; '.'
000000000000b847         db  0xff ; '.'
000000000000b848         db  0x68 ; 'h'
000000000000b849         db  0xb1 ; '.'
000000000000b84a         db  0xff ; '.'
000000000000b84b         db  0xff ; '.'
000000000000b84c         db  0x68 ; 'h'
000000000000b84d         db  0xb1 ; '.'
000000000000b84e         db  0xff ; '.'
000000000000b84f         db  0xff ; '.'
000000000000b850         db  0x68 ; 'h'
000000000000b851         db  0xb1 ; '.'
000000000000b852         db  0xff ; '.'
000000000000b853         db  0xff ; '.'
000000000000b854         db  0x98 ; '.'
000000000000b855         db  0xb1 ; '.'
000000000000b856         db  0xff ; '.'
000000000000b857         db  0xff ; '.'
000000000000b858         db  0x68 ; 'h'
000000000000b859         db  0xb0 ; '.'
000000000000b85a         db  0xff ; '.'
000000000000b85b         db  0xff ; '.'
000000000000b85c         db  0x68 ; 'h'
000000000000b85d         db  0xb1 ; '.'
000000000000b85e         db  0xff ; '.'
000000000000b85f         db  0xff ; '.'
000000000000b860         db  0x98 ; '.'
000000000000b861         db  0xb1 ; '.'
000000000000b862         db  0xff ; '.'
000000000000b863         db  0xff ; '.'
000000000000b864         db  0x68 ; 'h'
000000000000b865         db  0xb1 ; '.'
000000000000b866         db  0xff ; '.'
000000000000b867         db  0xff ; '.'
000000000000b868         db  0x98 ; '.'
000000000000b869         db  0xb1 ; '.'
000000000000b86a         db  0xff ; '.'
000000000000b86b         db  0xff ; '.'
000000000000b86c         db  0x68 ; 'h'
000000000000b86d         db  0xb1 ; '.'
000000000000b86e         db  0xff ; '.'
000000000000b86f         db  0xff ; '.'
000000000000b870         db  0x68 ; 'h'
000000000000b871         db  0xb1 ; '.'
000000000000b872         db  0xff ; '.'
000000000000b873         db  0xff ; '.'
000000000000b874         db  0x68 ; 'h'
000000000000b875         db  0xb1 ; '.'
000000000000b876         db  0xff ; '.'
000000000000b877         db  0xff ; '.'
000000000000b878         db  0x68 ; 'h'
000000000000b879         db  0xb1 ; '.'
000000000000b87a         db  0xff ; '.'
000000000000b87b         db  0xff ; '.'
000000000000b87c         db  0x68 ; 'h'
000000000000b87d         db  0xb1 ; '.'
000000000000b87e         db  0xff ; '.'
000000000000b87f         db  0xff ; '.'
000000000000b880         db  0x68 ; 'h'
000000000000b881         db  0xb1 ; '.'
000000000000b882         db  0xff ; '.'
000000000000b883         db  0xff ; '.'
000000000000b884         db  0x68 ; 'h'
000000000000b885         db  0xb1 ; '.'
000000000000b886         db  0xff ; '.'
000000000000b887         db  0xff ; '.'
000000000000b888         db  0x68 ; 'h'
000000000000b889         db  0xb1 ; '.'
000000000000b88a         db  0xff ; '.'
000000000000b88b         db  0xff ; '.'
000000000000b88c         db  0x68 ; 'h'
000000000000b88d         db  0xb1 ; '.'
000000000000b88e         db  0xff ; '.'
000000000000b88f         db  0xff ; '.'
000000000000b890         db  0x68 ; 'h'
000000000000b891         db  0xb1 ; '.'
000000000000b892         db  0xff ; '.'
000000000000b893         db  0xff ; '.'
000000000000b894         db  0x68 ; 'h'
000000000000b895         db  0xb1 ; '.'
000000000000b896         db  0xff ; '.'
000000000000b897         db  0xff ; '.'
000000000000b898         db  0x68 ; 'h'
000000000000b899         db  0xb1 ; '.'
000000000000b89a         db  0xff ; '.'
000000000000b89b         db  0xff ; '.'
000000000000b89c         db  0x68 ; 'h'
000000000000b89d         db  0xb1 ; '.'
000000000000b89e         db  0xff ; '.'
000000000000b89f         db  0xff ; '.'
000000000000b8a0         db  0x68 ; 'h'
000000000000b8a1         db  0xb1 ; '.'
000000000000b8a2         db  0xff ; '.'
000000000000b8a3         db  0xff ; '.'
000000000000b8a4         db  0x68 ; 'h'
000000000000b8a5         db  0xb1 ; '.'
000000000000b8a6         db  0xff ; '.'
000000000000b8a7         db  0xff ; '.'
000000000000b8a8         db  0x68 ; 'h'
000000000000b8a9         db  0xb1 ; '.'
000000000000b8aa         db  0xff ; '.'
000000000000b8ab         db  0xff ; '.'
000000000000b8ac         db  0x68 ; 'h'
000000000000b8ad         db  0xb1 ; '.'
000000000000b8ae         db  0xff ; '.'
000000000000b8af         db  0xff ; '.'
000000000000b8b0         db  0x68 ; 'h'
000000000000b8b1         db  0xb1 ; '.'
000000000000b8b2         db  0xff ; '.'
000000000000b8b3         db  0xff ; '.'
000000000000b8b4         db  0x68 ; 'h'
000000000000b8b5         db  0xb1 ; '.'
000000000000b8b6         db  0xff ; '.'
000000000000b8b7         db  0xff ; '.'
000000000000b8b8         db  0x68 ; 'h'
000000000000b8b9         db  0xb1 ; '.'
000000000000b8ba         db  0xff ; '.'
000000000000b8bb         db  0xff ; '.'
000000000000b8bc         db  0x68 ; 'h'
000000000000b8bd         db  0xb1 ; '.'
000000000000b8be         db  0xff ; '.'
000000000000b8bf         db  0xff ; '.'
000000000000b8c0         db  0x68 ; 'h'
000000000000b8c1         db  0xb1 ; '.'
000000000000b8c2         db  0xff ; '.'
000000000000b8c3         db  0xff ; '.'
000000000000b8c4         db  0x68 ; 'h'
000000000000b8c5         db  0xb1 ; '.'
000000000000b8c6         db  0xff ; '.'
000000000000b8c7         db  0xff ; '.'
000000000000b8c8         db  0x68 ; 'h'
000000000000b8c9         db  0xb1 ; '.'
000000000000b8ca         db  0xff ; '.'
000000000000b8cb         db  0xff ; '.'
000000000000b8cc         db  0x68 ; 'h'
000000000000b8cd         db  0xb1 ; '.'
000000000000b8ce         db  0xff ; '.'
000000000000b8cf         db  0xff ; '.'
000000000000b8d0         db  0x68 ; 'h'
000000000000b8d1         db  0xb1 ; '.'
000000000000b8d2         db  0xff ; '.'
000000000000b8d3         db  0xff ; '.'
000000000000b8d4         db  0xd8 ; '.'
000000000000b8d5         db  0xac ; '.'
000000000000b8d6         db  0xff ; '.'
000000000000b8d7         db  0xff ; '.'
000000000000b8d8         db  0x98 ; '.'
000000000000b8d9         db  0xb1 ; '.'
000000000000b8da         db  0xff ; '.'
000000000000b8db         db  0xff ; '.'
000000000000b8dc         db  0xd8 ; '.'
000000000000b8dd         db  0xac ; '.'
000000000000b8de         db  0xff ; '.'
000000000000b8df         db  0xff ; '.'
000000000000b8e0         db  0x80 ; '.'
000000000000b8e1         db  0xb1 ; '.'
000000000000b8e2         db  0xff ; '.'
000000000000b8e3         db  0xff ; '.'
000000000000b8e4         db  0x00 ; '.'
000000000000b8e5         db  0x00 ; '.'
000000000000b8e6         db  0x00 ; '.'
000000000000b8e7         db  0x00 ; '.'
000000000000b8e8         db  0x00 ; '.'
000000000000b8e9         db  0x00 ; '.'
000000000000b8ea         db  0x00 ; '.'
000000000000b8eb         db  0x00 ; '.'
000000000000b8ec         db  0x00 ; '.'
000000000000b8ed         db  0x00 ; '.'
000000000000b8ee         db  0x00 ; '.'
000000000000b8ef         db  0x00 ; '.'
000000000000b8f0         db  0x00 ; '.'
000000000000b8f1         db  0x00 ; '.'
000000000000b8f2         db  0x00 ; '.'
000000000000b8f3         db  0x00 ; '.'
000000000000b8f4         db  0x00 ; '.'
000000000000b8f5         db  0x00 ; '.'
000000000000b8f6         db  0x00 ; '.'
000000000000b8f7         db  0x00 ; '.'
000000000000b8f8         db  0x00 ; '.'
000000000000b8f9         db  0x00 ; '.'
000000000000b8fa         db  0x00 ; '.'
000000000000b8fb         db  0x00 ; '.'
000000000000b8fc         db  0x00 ; '.'
000000000000b8fd         db  0x00 ; '.'
000000000000b8fe         db  0x00 ; '.'
000000000000b8ff         db  0x00 ; '.'
                     quoting_style_vals:
000000000000b900         db  0x00 ; '.'
000000000000b901         db  0x00 ; '.'
000000000000b902         db  0x00 ; '.'
000000000000b903         db  0x00 ; '.'
000000000000b904         db  0x01 ; '.'
000000000000b905         db  0x00 ; '.'
000000000000b906         db  0x00 ; '.'
000000000000b907         db  0x00 ; '.'
000000000000b908         db  0x02 ; '.'
000000000000b909         db  0x00 ; '.'
000000000000b90a         db  0x00 ; '.'
000000000000b90b         db  0x00 ; '.'
000000000000b90c         db  0x03 ; '.'
000000000000b90d         db  0x00 ; '.'
000000000000b90e         db  0x00 ; '.'
000000000000b90f         db  0x00 ; '.'
000000000000b910         db  0x04 ; '.'
000000000000b911         db  0x00 ; '.'
000000000000b912         db  0x00 ; '.'
000000000000b913         db  0x00 ; '.'
000000000000b914         db  0x05 ; '.'
000000000000b915         db  0x00 ; '.'
000000000000b916         db  0x00 ; '.'
000000000000b917         db  0x00 ; '.'
000000000000b918         db  0x06 ; '.'
000000000000b919         db  0x00 ; '.'
000000000000b91a         db  0x00 ; '.'
000000000000b91b         db  0x00 ; '.'
000000000000b91c         db  0x07 ; '.'
000000000000b91d         db  0x00 ; '.'
000000000000b91e         db  0x00 ; '.'
000000000000b91f         db  0x00 ; '.'
000000000000b920         db  0x08 ; '.'
000000000000b921         db  0x00 ; '.'
000000000000b922         db  0x00 ; '.'
000000000000b923         db  0x00 ; '.'
000000000000b924         db  0x09 ; '.'
000000000000b925         db  0x00 ; '.'
000000000000b926         db  0x00 ; '.'
000000000000b927         db  0x00 ; '.'
                     aSSSn:
000000000000b928         db         "%s (%s) %s\n", 0                           ; DATA XREF=version_etc_arn+35
                     aSSn:
000000000000b934         db         "%s %s\n", 0                                ; DATA XREF=version_etc_arn+318
000000000000b93b         db  0x28 ; '('                                         ; DATA XREF=version_etc_arn+60
000000000000b93c         db  0x43 ; 'C'
000000000000b93d         db  0x29 ; ')'
000000000000b93e         db  0x00 ; '.'
                     aWrittenBySn:
000000000000b93f         db         "Written by %s.\n", 0                       ; DATA XREF=version_etc_arn+443
                     aWrittenBySAndS:
000000000000b94f         db         "Written by %s and %s.\n", 0                ; DATA XREF=version_etc_arn+508
                     aWrittenBySSAnd:
000000000000b966         db         "Written by %s, %s, and %s.\n", 0           ; DATA XREF=version_etc_arn+584
                     aNreportBugsToS:
000000000000b982         db         "\nReport bugs to: %s\n", 0                 ; DATA XREF=emit_bug_reporting_address+1
                     aBugcoreutilsgn:
000000000000b997         db         "bug-coreutils@gnu.org", 0                  ; DATA XREF=emit_bug_reporting_address+20
                     aSHomePageSn:
000000000000b9ad         db         "%s home page: <%s>\n", 0                   ; DATA XREF=emit_bug_reporting_address+42
000000000000b9c1         align      8
                     aNlicenseGplv3G:
000000000000b9c8         db         "\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\n", 0 ; DATA XREF=version_etc_arn+110
000000000000ba94         align      8
                     aWrittenBySSSna:
000000000000ba98         db         "Written by %s, %s, %s,\nand %s.\n", 0      ; DATA XREF=version_etc_arn+656
                     aWrittenBySSSns_bab8:        // aWrittenBySSSns
000000000000bab8         db         "Written by %s, %s, %s,\n%s, and %s.\n", 0  ; DATA XREF=version_etc_arn+748
000000000000badc         align      32
                     aWrittenBySSSns_bae0:        // aWrittenBySSSns
000000000000bae0         db         "Written by %s, %s, %s,\n%s, %s, and %s.\n", 0 ; DATA XREF=version_etc_arn+800
                     aWrittenBySSSns_bb08:        // aWrittenBySSSns
000000000000bb08         db         "Written by %s, %s, %s,\n%s, %s, %s, and %s.\n", 0 ; DATA XREF=version_etc_arn+904
000000000000bb34         align      8
                     aWrittenBySSSns_bb38:        // aWrittenBySSSns
000000000000bb38         db         "Written by %s, %s, %s,\n%s, %s, %s, %s,\nand %s.\n", 0 ; DATA XREF=version_etc_arn+184
                     aWrittenBySSSns:
000000000000bb68         db         "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, and %s.\n", 0 ; DATA XREF=version_etc_arn+360
000000000000bb9c         align      32
                     aWrittenBySSSns_bba0:        // aWrittenBySSSns
000000000000bba0         db         "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n", 0 ; DATA XREF=version_etc_arn+997
000000000000bbdc         align      32
                     aGeneralHelpUsi:
000000000000bbe0         db         "General help using GNU software: <https://www.gnu.org/gethelp/>\n", 0 ; DATA XREF=emit_bug_reporting_address+97
000000000000bc21         align      4
                     switch_table_bc24:        // switch_table
000000000000bc24         dd         version_etc_ar.loc_7e96-switch_table_bc24, version_etc_ar.loc_7f28-switch_table_bc24, version_etc_ar.loc_7f68-switch_table_bc24, version_etc_ar.loc_7fb0-switch_table_bc24 ; switch table used at 0x7e14 containing 10 entries, DATA XREF=version_etc_arn+150
000000000000bc34         dd         version_etc_ar.loc_8000-switch_table_bc24, version_etc_ar.loc_8058-switch_table_bc24, version_etc_ar.loc_8088-switch_table_bc24, version_etc_ar.loc_80f0-switch_table_bc24
000000000000bc44         dd         version_etc_ar.loc_7e20-switch_table_bc24, version_etc_ar.loc_7ed0-switch_table_bc24
000000000000bc4c         align      32
                     version_etc_copyright:
000000000000bc60         db         "Copyright %s %d Free Software Foundation, Inc.", 0 ; DATA XREF=version_etc_arn+79
                     aMemoryExhauste:
000000000000bc8f         db         "memory exhausted", 0                       ; DATA XREF=xalloc_die
                     aCoreutils831li:
000000000000bca0         db         "../coreutils-8.31/lib/xstrtol.c", 0        ; DATA XREF=xstrtol+1686, xstrtoumax+908
                     a0StrtolbaseStr:
000000000000bcc0         db         "0 <= strtol_base && strtol_base <= 36", 0  ; DATA XREF=xstrtol+1693, xstrtoumax+915
000000000000bce6         align      8
                     switch_table_bce8:        // switch_table
000000000000bce8         dd         xstrtol.loc_8b20-switch_table_bce8, 2 dup (xstrtol.loc_87b8-switch_table_bce8), xstrtol.loc_8a50-switch_table_bce8, xstrtol.loc_87b8-switch_table_bce8 ; switch table used at 0x87ee containing 54 entries, DATA XREF=xstrtol+412
000000000000bcfc         dd         xstrtol.loc_89f0-switch_table_bce8, 3 dup (xstrtol.loc_87b8-switch_table_bce8), xstrtol.loc_89b0-switch_table_bce8, xstrtol.loc_87b8-switch_table_bce8
000000000000bd14         dd         xstrtol.loc_87f0-switch_table_bce8, 2 dup (xstrtol.loc_87b8-switch_table_bce8), xstrtol.loc_8ab8-switch_table_bce8, 3 dup (xstrtol.loc_87b8-switch_table_bce8)
000000000000bd30         dd         xstrtol.loc_8b50-switch_table_bce8, 4 dup (xstrtol.loc_87b8-switch_table_bce8), xstrtol.loc_8940-switch_table_bce8, xstrtol.loc_88d0-switch_table_bce8
000000000000bd4c         dd         7 dup (xstrtol.loc_87b8-switch_table_bce8), xstrtol.loc_88a0-switch_table_bce8, xstrtol.loc_8850-switch_table_bce8, 3 dup (xstrtol.loc_87b8-switch_table_bce8)
000000000000bd7c         dd         xstrtol.loc_89f0-switch_table_bce8, 3 dup (xstrtol.loc_87b8-switch_table_bce8), xstrtol.loc_89b0-switch_table_bce8, xstrtol.loc_87b8-switch_table_bce8
000000000000bd94         dd         xstrtol.loc_87f0-switch_table_bce8, 6 dup (xstrtol.loc_87b8-switch_table_bce8), xstrtol.loc_8b50-switch_table_bce8, 2 dup (xstrtol.loc_87b8-switch_table_bce8)
000000000000bdbc         dd         xstrtol.loc_8870-switch_table_bce8
                     __PRETTY_FUNCTION__.4162:
000000000000bdc0         db         "xstrtol", 0                                ; DATA XREF=xstrtol+1679
                     switch_table_bdc8:        // switch_table
000000000000bdc8         dd         xstrtoumax.loc_9026-switch_table_bdc8, 2 dup (xstrtoumax.loc_8f1c-switch_table_bdc8), xstrtoumax.loc_9003-switch_table_bdc8, xstrtoumax.loc_8f1c-switch_table_bdc8 ; switch table used at 0x8ed6 containing 54 entries, DATA XREF=xstrtoumax+452
000000000000bddc         dd         xstrtoumax.loc_903c-switch_table_bdc8, 3 dup (xstrtoumax.loc_8f1c-switch_table_bdc8), xstrtoumax.loc_8fbf-switch_table_bdc8, xstrtoumax.loc_8f1c-switch_table_bdc8
000000000000bdf4         dd         xstrtoumax.loc_8ed8-switch_table_bdc8, 2 dup (xstrtoumax.loc_8f1c-switch_table_bdc8), xstrtoumax.loc_8fe0-switch_table_bdc8, 3 dup (xstrtoumax.loc_8f1c-switch_table_bdc8)
000000000000be10         dd         xstrtoumax.loc_8f9f-switch_table_bdc8, 4 dup (xstrtoumax.loc_8f1c-switch_table_bdc8), xstrtoumax.loc_8f7a-switch_table_bdc8, xstrtoumax.loc_8f54-switch_table_bdc8
000000000000be2c         dd         7 dup (xstrtoumax.loc_8f1c-switch_table_bdc8), xstrtoumax.loc_8f3d-switch_table_bdc8, xstrtoumax.loc_8f00-switch_table_bdc8, 3 dup (xstrtoumax.loc_8f1c-switch_table_bdc8)
000000000000be5c         dd         xstrtoumax.loc_903c-switch_table_bdc8, 3 dup (xstrtoumax.loc_8f1c-switch_table_bdc8), xstrtoumax.loc_8fbf-switch_table_bdc8, xstrtoumax.loc_8f1c-switch_table_bdc8
000000000000be74         dd         xstrtoumax.loc_8ed8-switch_table_bdc8, 6 dup (xstrtoumax.loc_8f1c-switch_table_bdc8), xstrtoumax.loc_8f9f-switch_table_bdc8, 2 dup (xstrtoumax.loc_8f1c-switch_table_bdc8)
000000000000be9c         dd         xstrtoumax.loc_8f27-switch_table_bdc8
                     __PRETTY_FUNCTION__.4162_bea0:        // __PRETTY_FUNCTION__.4162
000000000000bea0         db         "xstrtoumax", 0                             ; DATA XREF=xstrtoumax+901
000000000000beab         db  0x43 ; 'C'                                         ; DATA XREF=hard_locale+24
000000000000beac         db  0x00 ; '.'
                     aPosix:
000000000000bead         db         "POSIX", 0                                  ; DATA XREF=hard_locale+64
                     aAscii:
000000000000beb3         db         "ASCII", 0                                  ; DATA XREF=locale_charset+22, locale_charset+48
000000000000beb9         db  0x00 ; '.'
000000000000beba         db  0x00 ; '.'
000000000000bebb         db  0x00 ; '.'


        ; Section .eh_frame_hdr
        ; Range: [0xbebc; 0xc198[ (732 bytes)
        ; File offset : [48828; 49560[ (732 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

000000000000bebc         db  0x01 ; '.'
000000000000bebd         db  0x1b ; '.'
000000000000bebe         db  0x03 ; '.'
000000000000bebf         db  0x3b ; ';'
000000000000bec0         db  0xd8 ; '.'
000000000000bec1         db  0x02 ; '.'
000000000000bec2         db  0x00 ; '.'
000000000000bec3         db  0x00 ; '.'
000000000000bec4         db  0x5a ; 'Z'
000000000000bec5         db  0x00 ; '.'
000000000000bec6         db  0x00 ; '.'
000000000000bec7         db  0x00 ; '.'
000000000000bec8         db  0xd4 ; '.'
000000000000bec9         db  0x5a ; 'Z'
000000000000beca         db  0xff ; '.'
000000000000becb         db  0xff ; '.'
000000000000becc         db  0x24 ; '$'
000000000000becd         db  0x03 ; '.'
000000000000bece         db  0x00 ; '.'
000000000000becf         db  0x00 ; '.'
000000000000bed0         db  0x84 ; '.'
000000000000bed1         db  0x5e ; '^'
000000000000bed2         db  0xff ; '.'
000000000000bed3         db  0xff ; '.'
000000000000bed4         db  0x4c ; 'L'
000000000000bed5         db  0x03 ; '.'
000000000000bed6         db  0x00 ; '.'
000000000000bed7         db  0x00 ; '.'
000000000000bed8         db  0x94 ; '.'
000000000000bed9         db  0x5e ; '^'
000000000000beda         db  0xff ; '.'
000000000000bedb         db  0xff ; '.'
000000000000bedc         db  0x98 ; '.'
000000000000bedd         db  0x05 ; '.'
000000000000bede         db  0x00 ; '.'
000000000000bedf         db  0x00 ; '.'
000000000000bee0         db  0xd4 ; '.'
000000000000bee1         db  0x6c ; 'l'
000000000000bee2         db  0xff ; '.'
000000000000bee3         db  0xff ; '.'
000000000000bee4         db  0xf4 ; '.'
000000000000bee5         db  0x02 ; '.'
000000000000bee6         db  0x00 ; '.'
000000000000bee7         db  0x00 ; '.'
000000000000bee8         db  0xe4 ; '.'
000000000000bee9         db  0x6d ; 'm'
000000000000beea         db  0xff ; '.'
000000000000beeb         db  0xff ; '.'
000000000000beec         db  0x64 ; 'd'
000000000000beed         db  0x03 ; '.'
000000000000beee         db  0x00 ; '.'
000000000000beef         db  0x00 ; '.'
000000000000bef0         db  0x14 ; '.'
000000000000bef1         db  0x6f ; 'o'
000000000000bef2         db  0xff ; '.'
000000000000bef3         db  0xff ; '.'
000000000000bef4         db  0xa4 ; '.'
000000000000bef5         db  0x03 ; '.'
000000000000bef6         db  0x00 ; '.'
000000000000bef7         db  0x00 ; '.'
000000000000bef8         db  0x84 ; '.'
000000000000bef9         db  0x70 ; 'p'
000000000000befa         db  0xff ; '.'
000000000000befb         db  0xff ; '.'
000000000000befc         db  0xd8 ; '.'
000000000000befd         db  0x03 ; '.'
000000000000befe         db  0x00 ; '.'
000000000000beff         db  0x00 ; '.'
000000000000bf00         db  0xb4 ; '.'
000000000000bf01         db  0x70 ; 'p'
000000000000bf02         db  0xff ; '.'
000000000000bf03         db  0xff ; '.'
000000000000bf04         db  0xf0 ; '.'
000000000000bf05         db  0x03 ; '.'
000000000000bf06         db  0x00 ; '.'
000000000000bf07         db  0x00 ; '.'
000000000000bf08         db  0xb4 ; '.'
000000000000bf09         db  0x88 ; '.'
000000000000bf0a         db  0xff ; '.'
000000000000bf0b         db  0xff ; '.'
000000000000bf0c         db  0x04 ; '.'
000000000000bf0d         db  0x05 ; '.'
000000000000bf0e         db  0x00 ; '.'
000000000000bf0f         db  0x00 ; '.'
000000000000bf10         db  0x84 ; '.'
000000000000bf11         db  0x8a ; '.'
000000000000bf12         db  0xff ; '.'
000000000000bf13         db  0xff ; '.'
000000000000bf14         db  0x50 ; 'P'
000000000000bf15         db  0x05 ; '.'
000000000000bf16         db  0x00 ; '.'
000000000000bf17         db  0x00 ; '.'
000000000000bf18         db  0xc4 ; '.'
000000000000bf19         db  0x91 ; '.'
000000000000bf1a         db  0xff ; '.'
000000000000bf1b         db  0xff ; '.'
000000000000bf1c         db  0xfc ; '.'
000000000000bf1d         db  0x05 ; '.'
000000000000bf1e         db  0x00 ; '.'
000000000000bf1f         db  0x00 ; '.'
000000000000bf20         db  0xe4 ; '.'
000000000000bf21         db  0x91 ; '.'
000000000000bf22         db  0xff ; '.'
000000000000bf23         db  0xff ; '.'
000000000000bf24         db  0x10 ; '.'
000000000000bf25         db  0x06 ; '.'
000000000000bf26         db  0x00 ; '.'
000000000000bf27         db  0x00 ; '.'
000000000000bf28         db  0xb4 ; '.'
000000000000bf29         db  0x92 ; '.'
000000000000bf2a         db  0xff ; '.'
000000000000bf2b         db  0xff ; '.'
000000000000bf2c         db  0x3c ; '<'
000000000000bf2d         db  0x06 ; '.'
000000000000bf2e         db  0x00 ; '.'
000000000000bf2f         db  0x00 ; '.'
000000000000bf30         db  0x74 ; 't'
000000000000bf31         db  0x98 ; '.'
000000000000bf32         db  0xff ; '.'
000000000000bf33         db  0xff ; '.'
000000000000bf34         db  0x88 ; '.'
000000000000bf35         db  0x06 ; '.'
000000000000bf36         db  0x00 ; '.'
000000000000bf37         db  0x00 ; '.'
000000000000bf38         db  0xb4 ; '.'
000000000000bf39         db  0x98 ; '.'
000000000000bf3a         db  0xff ; '.'
000000000000bf3b         db  0xff ; '.'
000000000000bf3c         db  0xa4 ; '.'
000000000000bf3d         db  0x06 ; '.'
000000000000bf3e         db  0x00 ; '.'
000000000000bf3f         db  0x00 ; '.'
000000000000bf40         db  0xc4 ; '.'
000000000000bf41         db  0x98 ; '.'
000000000000bf42         db  0xff ; '.'
000000000000bf43         db  0xff ; '.'
000000000000bf44         db  0xb8 ; '.'
000000000000bf45         db  0x06 ; '.'
000000000000bf46         db  0x00 ; '.'
000000000000bf47         db  0x00 ; '.'
000000000000bf48         db  0xe4 ; '.'
000000000000bf49         db  0x99 ; '.'
000000000000bf4a         db  0xff ; '.'
000000000000bf4b         db  0xff ; '.'
000000000000bf4c         db  0x04 ; '.'
000000000000bf4d         db  0x07 ; '.'
000000000000bf4e         db  0x00 ; '.'
000000000000bf4f         db  0x00 ; '.'
000000000000bf50         db  0x64 ; 'd'
000000000000bf51         db  0x9a ; '.'
000000000000bf52         db  0xff ; '.'
000000000000bf53         db  0xff ; '.'
000000000000bf54         db  0x30 ; '0'
000000000000bf55         db  0x07 ; '.'
000000000000bf56         db  0x00 ; '.'
000000000000bf57         db  0x00 ; '.'
000000000000bf58         db  0x84 ; '.'
000000000000bf59         db  0x9b ; '.'
000000000000bf5a         db  0xff ; '.'
000000000000bf5b         db  0xff ; '.'
000000000000bf5c         db  0x90 ; '.'
000000000000bf5d         db  0x07 ; '.'
000000000000bf5e         db  0x00 ; '.'
000000000000bf5f         db  0x00 ; '.'
000000000000bf60         db  0xf4 ; '.'
000000000000bf61         db  0x9b ; '.'
000000000000bf62         db  0xff ; '.'
000000000000bf63         db  0xff ; '.'
000000000000bf64         db  0xdc ; '.'
000000000000bf65         db  0x07 ; '.'
000000000000bf66         db  0x00 ; '.'
000000000000bf67         db  0x00 ; '.'
000000000000bf68         db  0x44 ; 'D'
000000000000bf69         db  0x9c ; '.'
000000000000bf6a         db  0xff ; '.'
000000000000bf6b         db  0xff ; '.'
000000000000bf6c         db  0x1c ; '.'
000000000000bf6d         db  0x08 ; '.'
000000000000bf6e         db  0x00 ; '.'
000000000000bf6f         db  0x00 ; '.'
000000000000bf70         db  0x54 ; 'T'
000000000000bf71         db  0x9c ; '.'
000000000000bf72         db  0xff ; '.'
000000000000bf73         db  0xff ; '.'
000000000000bf74         db  0x30 ; '0'
000000000000bf75         db  0x08 ; '.'
000000000000bf76         db  0x00 ; '.'
000000000000bf77         db  0x00 ; '.'
000000000000bf78         db  0x64 ; 'd'
000000000000bf79         db  0x9c ; '.'
000000000000bf7a         db  0xff ; '.'
000000000000bf7b         db  0xff ; '.'
000000000000bf7c         db  0x44 ; 'D'
000000000000bf7d         db  0x08 ; '.'
000000000000bf7e         db  0x00 ; '.'
000000000000bf7f         db  0x00 ; '.'
000000000000bf80         db  0x14 ; '.'
000000000000bf81         db  0x9d ; '.'
000000000000bf82         db  0xff ; '.'
000000000000bf83         db  0xff ; '.'
000000000000bf84         db  0x74 ; 't'
000000000000bf85         db  0x08 ; '.'
000000000000bf86         db  0x00 ; '.'
000000000000bf87         db  0x00 ; '.'
000000000000bf88         db  0xe4 ; '.'
000000000000bf89         db  0xa0 ; '.'
000000000000bf8a         db  0xff ; '.'
000000000000bf8b         db  0xff ; '.'
000000000000bf8c         db  0xc0 ; '.'
000000000000bf8d         db  0x08 ; '.'
000000000000bf8e         db  0x00 ; '.'
000000000000bf8f         db  0x00 ; '.'
000000000000bf90         db  0x84 ; '.'
000000000000bf91         db  0xa1 ; '.'
000000000000bf92         db  0xff ; '.'
000000000000bf93         db  0xff ; '.'
000000000000bf94         db  0x0c ; '.'
000000000000bf95         db  0x09 ; '.'
000000000000bf96         db  0x00 ; '.'
000000000000bf97         db  0x00 ; '.'
000000000000bf98         db  0x24 ; '$'
000000000000bf99         db  0xa2 ; '.'
000000000000bf9a         db  0xff ; '.'
000000000000bf9b         db  0xff ; '.'
000000000000bf9c         db  0x2c ; ','
000000000000bf9d         db  0x09 ; '.'
000000000000bf9e         db  0x00 ; '.'
000000000000bf9f         db  0x00 ; '.'
000000000000bfa0         db  0x14 ; '.'
000000000000bfa1         db  0xa3 ; '.'
000000000000bfa2         db  0xff ; '.'
000000000000bfa3         db  0xff ; '.'
000000000000bfa4         db  0x70 ; 'p'
000000000000bfa5         db  0x09 ; '.'
000000000000bfa6         db  0x00 ; '.'
000000000000bfa7         db  0x00 ; '.'
000000000000bfa8         db  0x54 ; 'T'
000000000000bfa9         db  0xb5 ; '.'
000000000000bfaa         db  0xff ; '.'
000000000000bfab         db  0xff ; '.'
000000000000bfac         db  0xe8 ; '.'
000000000000bfad         db  0x09 ; '.'
000000000000bfae         db  0x00 ; '.'
000000000000bfaf         db  0x00 ; '.'
000000000000bfb0         db  0x04 ; '.'
000000000000bfb1         db  0xb7 ; '.'
000000000000bfb2         db  0xff ; '.'
000000000000bfb3         db  0xff ; '.'
000000000000bfb4         db  0x54 ; 'T'
000000000000bfb5         db  0x0a ; '.'
000000000000bfb6         db  0x00 ; '.'
000000000000bfb7         db  0x00 ; '.'
000000000000bfb8         db  0x44 ; 'D'
000000000000bfb9         db  0xb7 ; '.'
000000000000bfba         db  0xff ; '.'
000000000000bfbb         db  0xff ; '.'
000000000000bfbc         db  0x80 ; '.'
000000000000bfbd         db  0x0a ; '.'
000000000000bfbe         db  0x00 ; '.'
000000000000bfbf         db  0x00 ; '.'
000000000000bfc0         db  0x64 ; 'd'
000000000000bfc1         db  0xb7 ; '.'
000000000000bfc2         db  0xff ; '.'
000000000000bfc3         db  0xff ; '.'
000000000000bfc4         db  0x94 ; '.'
000000000000bfc5         db  0x0a ; '.'
000000000000bfc6         db  0x00 ; '.'
000000000000bfc7         db  0x00 ; '.'
000000000000bfc8         db  0x84 ; '.'
000000000000bfc9         db  0xb7 ; '.'
000000000000bfca         db  0xff ; '.'
000000000000bfcb         db  0xff ; '.'
000000000000bfcc         db  0xa8 ; '.'
000000000000bfcd         db  0x0a ; '.'
000000000000bfce         db  0x00 ; '.'
000000000000bfcf         db  0x00 ; '.'
000000000000bfd0         db  0xc4 ; '.'
000000000000bfd1         db  0xb7 ; '.'
000000000000bfd2         db  0xff ; '.'
000000000000bfd3         db  0xff ; '.'
000000000000bfd4         db  0xbc ; '.'
000000000000bfd5         db  0x0a ; '.'
000000000000bfd6         db  0x00 ; '.'
000000000000bfd7         db  0x00 ; '.'
000000000000bfd8         db  0xe4 ; '.'
000000000000bfd9         db  0xb7 ; '.'
000000000000bfda         db  0xff ; '.'
000000000000bfdb         db  0xff ; '.'
000000000000bfdc         db  0xd0 ; '.'
000000000000bfdd         db  0x0a ; '.'
000000000000bfde         db  0x00 ; '.'
000000000000bfdf         db  0x00 ; '.'
000000000000bfe0         db  0x14 ; '.'
000000000000bfe1         db  0xb8 ; '.'
000000000000bfe2         db  0xff ; '.'
000000000000bfe3         db  0xff ; '.'
000000000000bfe4         db  0xe4 ; '.'
000000000000bfe5         db  0x0a ; '.'
000000000000bfe6         db  0x00 ; '.'
000000000000bfe7         db  0x00 ; '.'
000000000000bfe8         db  0x94 ; '.'
000000000000bfe9         db  0xb8 ; '.'
000000000000bfea         db  0xff ; '.'
000000000000bfeb         db  0xff ; '.'
000000000000bfec         db  0x38 ; '8'
000000000000bfed         db  0x0b ; '.'
000000000000bfee         db  0x00 ; '.'
000000000000bfef         db  0x00 ; '.'
000000000000bff0         db  0x84 ; '.'
000000000000bff1         db  0xb9 ; '.'
000000000000bff2         db  0xff ; '.'
000000000000bff3         db  0xff ; '.'
000000000000bff4         db  0xa4 ; '.'
000000000000bff5         db  0x0b ; '.'
000000000000bff6         db  0x00 ; '.'
000000000000bff7         db  0x00 ; '.'
000000000000bff8         db  0x94 ; '.'
000000000000bff9         db  0xb9 ; '.'
000000000000bffa         db  0xff ; '.'
000000000000bffb         db  0xff ; '.'
000000000000bffc         db  0xb8 ; '.'
000000000000bffd         db  0x0b ; '.'
000000000000bffe         db  0x00 ; '.'
000000000000bfff         db  0x00 ; '.'
000000000000c000         db  0x34 ; '4'
000000000000c001         db  0xba ; '.'
000000000000c002         db  0xff ; '.'
000000000000c003         db  0xff ; '.'
000000000000c004         db  0xe4 ; '.'
000000000000c005         db  0x0b ; '.'
000000000000c006         db  0x00 ; '.'
000000000000c007         db  0x00 ; '.'
000000000000c008         db  0x54 ; 'T'
000000000000c009         db  0xba ; '.'
000000000000c00a         db  0xff ; '.'
000000000000c00b         db  0xff ; '.'
000000000000c00c         db  0xf8 ; '.'
000000000000c00d         db  0x0b ; '.'
000000000000c00e         db  0x00 ; '.'
000000000000c00f         db  0x00 ; '.'
000000000000c010         db  0x64 ; 'd'
000000000000c011         db  0xba ; '.'
000000000000c012         db  0xff ; '.'
000000000000c013         db  0xff ; '.'
000000000000c014         db  0x0c ; '.'
000000000000c015         db  0x0c ; '.'
000000000000c016         db  0x00 ; '.'
000000000000c017         db  0x00 ; '.'
000000000000c018         db  0x84 ; '.'
000000000000c019         db  0xba ; '.'
000000000000c01a         db  0xff ; '.'
000000000000c01b         db  0xff ; '.'
000000000000c01c         db  0x20 ; ' '
000000000000c01d         db  0x0c ; '.'
000000000000c01e         db  0x00 ; '.'
000000000000c01f         db  0x00 ; '.'
000000000000c020         db  0xa4 ; '.'
000000000000c021         db  0xba ; '.'
000000000000c022         db  0xff ; '.'
000000000000c023         db  0xff ; '.'
000000000000c024         db  0x34 ; '4'
000000000000c025         db  0x0c ; '.'
000000000000c026         db  0x00 ; '.'
000000000000c027         db  0x00 ; '.'
000000000000c028         db  0x34 ; '4'
000000000000c029         db  0xbb ; '.'
000000000000c02a         db  0xff ; '.'
000000000000c02b         db  0xff ; '.'
000000000000c02c         db  0x50 ; 'P'
000000000000c02d         db  0x0c ; '.'
000000000000c02e         db  0x00 ; '.'
000000000000c02f         db  0x00 ; '.'
000000000000c030         db  0xc4 ; '.'
000000000000c031         db  0xbb ; '.'
000000000000c032         db  0xff ; '.'
000000000000c033         db  0xff ; '.'
000000000000c034         db  0x6c ; 'l'
000000000000c035         db  0x0c ; '.'
000000000000c036         db  0x00 ; '.'
000000000000c037         db  0x00 ; '.'
000000000000c038         db  0xd4 ; '.'
000000000000c039         db  0xbb ; '.'
000000000000c03a         db  0xff ; '.'
000000000000c03b         db  0xff ; '.'
000000000000c03c         db  0x80 ; '.'
000000000000c03d         db  0x0c ; '.'
000000000000c03e         db  0x00 ; '.'
000000000000c03f         db  0x00 ; '.'
000000000000c040         db  0xe4 ; '.'
000000000000c041         db  0xbb ; '.'
000000000000c042         db  0xff ; '.'
000000000000c043         db  0xff ; '.'
000000000000c044         db  0x94 ; '.'
000000000000c045         db  0x0c ; '.'
000000000000c046         db  0x00 ; '.'
000000000000c047         db  0x00 ; '.'
000000000000c048         db  0x84 ; '.'
000000000000c049         db  0xbc ; '.'
000000000000c04a         db  0xff ; '.'
000000000000c04b         db  0xff ; '.'
000000000000c04c         db  0xb0 ; '.'
000000000000c04d         db  0x0c ; '.'
000000000000c04e         db  0x00 ; '.'
000000000000c04f         db  0x00 ; '.'
000000000000c050         db  0x94 ; '.'
000000000000c051         db  0xbc ; '.'
000000000000c052         db  0xff ; '.'
000000000000c053         db  0xff ; '.'
000000000000c054         db  0xc4 ; '.'
000000000000c055         db  0x0c ; '.'
000000000000c056         db  0x00 ; '.'
000000000000c057         db  0x00 ; '.'
000000000000c058         db  0xb4 ; '.'
000000000000c059         db  0xbc ; '.'
000000000000c05a         db  0xff ; '.'
000000000000c05b         db  0xff ; '.'
000000000000c05c         db  0xd8 ; '.'
000000000000c05d         db  0x0c ; '.'
000000000000c05e         db  0x00 ; '.'
000000000000c05f         db  0x00 ; '.'
000000000000c060         db  0xc4 ; '.'
000000000000c061         db  0xbc ; '.'
000000000000c062         db  0xff ; '.'
000000000000c063         db  0xff ; '.'
000000000000c064         db  0xec ; '.'
000000000000c065         db  0x0c ; '.'
000000000000c066         db  0x00 ; '.'
000000000000c067         db  0x00 ; '.'
000000000000c068         db  0x54 ; 'T'
000000000000c069         db  0xbd ; '.'
000000000000c06a         db  0xff ; '.'
000000000000c06b         db  0xff ; '.'
000000000000c06c         db  0x08 ; '.'
000000000000c06d         db  0x0d ; '.'
000000000000c06e         db  0x00 ; '.'
000000000000c06f         db  0x00 ; '.'
000000000000c070         db  0xf4 ; '.'
000000000000c071         db  0xbd ; '.'
000000000000c072         db  0xff ; '.'
000000000000c073         db  0xff ; '.'
000000000000c074         db  0x24 ; '$'
000000000000c075         db  0x0d ; '.'
000000000000c076         db  0x00 ; '.'
000000000000c077         db  0x00 ; '.'
000000000000c078         db  0x04 ; '.'
000000000000c079         db  0xbe ; '.'
000000000000c07a         db  0xff ; '.'
000000000000c07b         db  0xff ; '.'
000000000000c07c         db  0x38 ; '8'
000000000000c07d         db  0x0d ; '.'
000000000000c07e         db  0x00 ; '.'
000000000000c07f         db  0x00 ; '.'
000000000000c080         db  0x24 ; '$'
000000000000c081         db  0xbe ; '.'
000000000000c082         db  0xff ; '.'
000000000000c083         db  0xff ; '.'
000000000000c084         db  0x4c ; 'L'
000000000000c085         db  0x0d ; '.'
000000000000c086         db  0x00 ; '.'
000000000000c087         db  0x00 ; '.'
000000000000c088         db  0x44 ; 'D'
000000000000c089         db  0xbe ; '.'
000000000000c08a         db  0xff ; '.'
000000000000c08b         db  0xff ; '.'
000000000000c08c         db  0x60 ; '`'
000000000000c08d         db  0x0d ; '.'
000000000000c08e         db  0x00 ; '.'
000000000000c08f         db  0x00 ; '.'
000000000000c090         db  0x54 ; 'T'
000000000000c091         db  0xbe ; '.'
000000000000c092         db  0xff ; '.'
000000000000c093         db  0xff ; '.'
000000000000c094         db  0x74 ; 't'
000000000000c095         db  0x0d ; '.'
000000000000c096         db  0x00 ; '.'
000000000000c097         db  0x00 ; '.'
000000000000c098         db  0x74 ; 't'
000000000000c099         db  0xbe ; '.'
000000000000c09a         db  0xff ; '.'
000000000000c09b         db  0xff ; '.'
000000000000c09c         db  0x88 ; '.'
000000000000c09d         db  0x0d ; '.'
000000000000c09e         db  0x00 ; '.'
000000000000c09f         db  0x00 ; '.'
000000000000c0a0         db  0x94 ; '.'
000000000000c0a1         db  0xbe ; '.'
000000000000c0a2         db  0xff ; '.'
000000000000c0a3         db  0xff ; '.'
000000000000c0a4         db  0x9c ; '.'
000000000000c0a5         db  0x0d ; '.'
000000000000c0a6         db  0x00 ; '.'
000000000000c0a7         db  0x00 ; '.'
000000000000c0a8         db  0xb4 ; '.'
000000000000c0a9         db  0xbe ; '.'
000000000000c0aa         db  0xff ; '.'
000000000000c0ab         db  0xff ; '.'
000000000000c0ac         db  0xb4 ; '.'
000000000000c0ad         db  0x0d ; '.'
000000000000c0ae         db  0x00 ; '.'
000000000000c0af         db  0x00 ; '.'
000000000000c0b0         db  0xd4 ; '.'
000000000000c0b1         db  0xc2 ; '.'
000000000000c0b2         db  0xff ; '.'
000000000000c0b3         db  0xff ; '.'
000000000000c0b4         db  0xc8 ; '.'
000000000000c0b5         db  0x0e ; '.'
000000000000c0b6         db  0x00 ; '.'
000000000000c0b7         db  0x00 ; '.'
000000000000c0b8         db  0xf4 ; '.'
000000000000c0b9         db  0xc2 ; '.'
000000000000c0ba         db  0xff ; '.'
000000000000c0bb         db  0xff ; '.'
000000000000c0bc         db  0xdc ; '.'
000000000000c0bd         db  0x0e ; '.'
000000000000c0be         db  0x00 ; '.'
000000000000c0bf         db  0x00 ; '.'
000000000000c0c0         db  0x74 ; 't'
000000000000c0c1         db  0xc3 ; '.'
000000000000c0c2         db  0xff ; '.'
000000000000c0c3         db  0xff ; '.'
000000000000c0c4         db  0xf8 ; '.'
000000000000c0c5         db  0x0e ; '.'
000000000000c0c6         db  0x00 ; '.'
000000000000c0c7         db  0x00 ; '.'
000000000000c0c8         db  0x54 ; 'T'
000000000000c0c9         db  0xc4 ; '.'
000000000000c0ca         db  0xff ; '.'
000000000000c0cb         db  0xff ; '.'
000000000000c0cc         db  0x24 ; '$'
000000000000c0cd         db  0x0f ; '.'
000000000000c0ce         db  0x00 ; '.'
000000000000c0cf         db  0x00 ; '.'
000000000000c0d0         db  0xd4 ; '.'
000000000000c0d1         db  0xc4 ; '.'
000000000000c0d2         db  0xff ; '.'
000000000000c0d3         db  0xff ; '.'
000000000000c0d4         db  0x44 ; 'D'
000000000000c0d5         db  0x0f ; '.'
000000000000c0d6         db  0x00 ; '.'
000000000000c0d7         db  0x00 ; '.'
000000000000c0d8         db  0xf4 ; '.'
000000000000c0d9         db  0xc4 ; '.'
000000000000c0da         db  0xff ; '.'
000000000000c0db         db  0xff ; '.'
000000000000c0dc         db  0x60 ; '`'
000000000000c0dd         db  0x0f ; '.'
000000000000c0de         db  0x00 ; '.'
000000000000c0df         db  0x00 ; '.'
000000000000c0e0         db  0x24 ; '$'
000000000000c0e1         db  0xc5 ; '.'
000000000000c0e2         db  0xff ; '.'
000000000000c0e3         db  0xff ; '.'
000000000000c0e4         db  0x74 ; 't'
000000000000c0e5         db  0x0f ; '.'
000000000000c0e6         db  0x00 ; '.'
000000000000c0e7         db  0x00 ; '.'
000000000000c0e8         db  0x34 ; '4'
000000000000c0e9         db  0xc5 ; '.'
000000000000c0ea         db  0xff ; '.'
000000000000c0eb         db  0xff ; '.'
000000000000c0ec         db  0x88 ; '.'
000000000000c0ed         db  0x0f ; '.'
000000000000c0ee         db  0x00 ; '.'
000000000000c0ef         db  0x00 ; '.'
000000000000c0f0         db  0x74 ; 't'
000000000000c0f1         db  0xc5 ; '.'
000000000000c0f2         db  0xff ; '.'
000000000000c0f3         db  0xff ; '.'
000000000000c0f4         db  0xac ; '.'
000000000000c0f5         db  0x0f ; '.'
000000000000c0f6         db  0x00 ; '.'
000000000000c0f7         db  0x00 ; '.'
000000000000c0f8         db  0xa4 ; '.'
000000000000c0f9         db  0xc5 ; '.'
000000000000c0fa         db  0xff ; '.'
000000000000c0fb         db  0xff ; '.'
000000000000c0fc         db  0xc0 ; '.'
000000000000c0fd         db  0x0f ; '.'
000000000000c0fe         db  0x00 ; '.'
000000000000c0ff         db  0x00 ; '.'
000000000000c100         db  0x34 ; '4'
000000000000c101         db  0xc6 ; '.'
000000000000c102         db  0xff ; '.'
000000000000c103         db  0xff ; '.'
000000000000c104         db  0xd8 ; '.'
000000000000c105         db  0x0f ; '.'
000000000000c106         db  0x00 ; '.'
000000000000c107         db  0x00 ; '.'
000000000000c108         db  0x84 ; '.'
000000000000c109         db  0xc6 ; '.'
000000000000c10a         db  0xff ; '.'
000000000000c10b         db  0xff ; '.'
000000000000c10c         db  0xf0 ; '.'
000000000000c10d         db  0x0f ; '.'
000000000000c10e         db  0x00 ; '.'
000000000000c10f         db  0x00 ; '.'
000000000000c110         db  0xa4 ; '.'
000000000000c111         db  0xc6 ; '.'
000000000000c112         db  0xff ; '.'
000000000000c113         db  0xff ; '.'
000000000000c114         db  0x0c ; '.'
000000000000c115         db  0x10 ; '.'
000000000000c116         db  0x00 ; '.'
000000000000c117         db  0x00 ; '.'
000000000000c118         db  0xd4 ; '.'
000000000000c119         db  0xc6 ; '.'
000000000000c11a         db  0xff ; '.'
000000000000c11b         db  0xff ; '.'
000000000000c11c         db  0x28 ; '('
000000000000c11d         db  0x10 ; '.'
000000000000c11e         db  0x00 ; '.'
000000000000c11f         db  0x00 ; '.'
000000000000c120         db  0x04 ; '.'
000000000000c121         db  0xc7 ; '.'
000000000000c122         db  0xff ; '.'
000000000000c123         db  0xff ; '.'
000000000000c124         db  0x50 ; 'P'
000000000000c125         db  0x10 ; '.'
000000000000c126         db  0x00 ; '.'
000000000000c127         db  0x00 ; '.'
000000000000c128         db  0x24 ; '$'
000000000000c129         db  0xc7 ; '.'
000000000000c12a         db  0xff ; '.'
000000000000c12b         db  0xff ; '.'
000000000000c12c         db  0x6c ; 'l'
000000000000c12d         db  0x10 ; '.'
000000000000c12e         db  0x00 ; '.'
000000000000c12f         db  0x00 ; '.'
000000000000c130         db  0x64 ; 'd'
000000000000c131         db  0xc7 ; '.'
000000000000c132         db  0xff ; '.'
000000000000c133         db  0xff ; '.'
000000000000c134         db  0x84 ; '.'
000000000000c135         db  0x10 ; '.'
000000000000c136         db  0x00 ; '.'
000000000000c137         db  0x00 ; '.'
000000000000c138         db  0x84 ; '.'
000000000000c139         db  0xc7 ; '.'
000000000000c13a         db  0xff ; '.'
000000000000c13b         db  0xff ; '.'
000000000000c13c         db  0xa4 ; '.'
000000000000c13d         db  0x10 ; '.'
000000000000c13e         db  0x00 ; '.'
000000000000c13f         db  0x00 ; '.'
000000000000c140         db  0x44 ; 'D'
000000000000c141         db  0xce ; '.'
000000000000c142         db  0xff ; '.'
000000000000c143         db  0xff ; '.'
000000000000c144         db  0xf4 ; '.'
000000000000c145         db  0x10 ; '.'
000000000000c146         db  0x00 ; '.'
000000000000c147         db  0x00 ; '.'
000000000000c148         db  0x64 ; 'd'
000000000000c149         db  0xd2 ; '.'
000000000000c14a         db  0xff ; '.'
000000000000c14b         db  0xff ; '.'
000000000000c14c         db  0x44 ; 'D'
000000000000c14d         db  0x11 ; '.'
000000000000c14e         db  0x00 ; '.'
000000000000c14f         db  0x00 ; '.'
000000000000c150         db  0xf4 ; '.'
000000000000c151         db  0xd2 ; '.'
000000000000c152         db  0xff ; '.'
000000000000c153         db  0xff ; '.'
000000000000c154         db  0x84 ; '.'
000000000000c155         db  0x11 ; '.'
000000000000c156         db  0x00 ; '.'
000000000000c157         db  0x00 ; '.'
000000000000c158         db  0x74 ; 't'
000000000000c159         db  0xd3 ; '.'
000000000000c15a         db  0xff ; '.'
000000000000c15b         db  0xff ; '.'
000000000000c15c         db  0xd4 ; '.'
000000000000c15d         db  0x11 ; '.'
000000000000c15e         db  0x00 ; '.'
000000000000c15f         db  0x00 ; '.'
000000000000c160         db  0xd4 ; '.'
000000000000c161         db  0xd3 ; '.'
000000000000c162         db  0xff ; '.'
000000000000c163         db  0xff ; '.'
000000000000c164         db  0xf4 ; '.'
000000000000c165         db  0x11 ; '.'
000000000000c166         db  0x00 ; '.'
000000000000c167         db  0x00 ; '.'
000000000000c168         db  0x14 ; '.'
000000000000c169         db  0xd4 ; '.'
000000000000c16a         db  0xff ; '.'
000000000000c16b         db  0xff ; '.'
000000000000c16c         db  0x14 ; '.'
000000000000c16d         db  0x12 ; '.'
000000000000c16e         db  0x00 ; '.'
000000000000c16f         db  0x00 ; '.'
000000000000c170         db  0x94 ; '.'
000000000000c171         db  0xd4 ; '.'
000000000000c172         db  0xff ; '.'
000000000000c173         db  0xff ; '.'
000000000000c174         db  0x4c ; 'L'
000000000000c175         db  0x12 ; '.'
000000000000c176         db  0x00 ; '.'
000000000000c177         db  0x00 ; '.'
000000000000c178         db  0xd4 ; '.'
000000000000c179         db  0xd4 ; '.'
000000000000c17a         db  0xff ; '.'
000000000000c17b         db  0xff ; '.'
000000000000c17c         db  0x6c ; 'l'
000000000000c17d         db  0x12 ; '.'
000000000000c17e         db  0x00 ; '.'
000000000000c17f         db  0x00 ; '.'
000000000000c180         db  0x34 ; '4'
000000000000c181         db  0xd5 ; '.'
000000000000c182         db  0xff ; '.'
000000000000c183         db  0xff ; '.'
000000000000c184         db  0x9c ; '.'
000000000000c185         db  0x12 ; '.'
000000000000c186         db  0x00 ; '.'
000000000000c187         db  0x00 ; '.'
000000000000c188         db  0xa4 ; '.'
000000000000c189         db  0xd5 ; '.'
000000000000c18a         db  0xff ; '.'
000000000000c18b         db  0xff ; '.'
000000000000c18c         db  0xe4 ; '.'
000000000000c18d         db  0x12 ; '.'
000000000000c18e         db  0x00 ; '.'
000000000000c18f         db  0x00 ; '.'
000000000000c190         db  0xb4 ; '.'
000000000000c191         db  0xd5 ; '.'
000000000000c192         db  0xff ; '.'
000000000000c193         db  0xff ; '.'
000000000000c194         db  0xfc ; '.'
000000000000c195         db  0x12 ; '.'
000000000000c196         db  0x00 ; '.'
000000000000c197         db  0x00 ; '.'


        ; Section .eh_frame
        ; Range: [0xc198; 0xd1d0[ (4152 bytes)
        ; File offset : [49560; 53712[ (4152 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

000000000000c198         dd         0x00000014                                  ; Length of the record
000000000000c19c         dd         0x00000000                                  ; CIE ID
000000000000c1a0         db         0x01                                        ; Version
000000000000c1a1         db         "zR", 0                                     ; Augmentation String
000000000000c1a4         db         0x01                                        ; Code Alignment Factor (unsigned LEB128=1)
000000000000c1a5         db         0x78                                        ; Data Alignment Factor (signed LEB128=-8)
000000000000c1a6         db         0x10                                        ; Return address register
000000000000c1a7         db         0x01                                        ; Augmentation data length
000000000000c1a8         db         0x1b                                        ; FDE encoding
000000000000c1a9         db  0x0c ; '.'
000000000000c1aa         db  0x07 ; '.'
000000000000c1ab         db  0x08 ; '.'
000000000000c1ac         db  0x90 ; '.'
000000000000c1ad         db  0x01 ; '.'
000000000000c1ae         db  0x07 ; '.'
000000000000c1af         db  0x10 ; '.'
000000000000c1b0         dd         0x00000014                                  ; Length of the record
000000000000c1b4         dd         0x0000001c                                  ; FDE: parent CIE at 0xc198 (FDE encoding = 0x1B)
000000000000c1b8         db         0xd8, 0x69, 2 dup (0xff)                    ; begin 0x2b90
000000000000c1bc         db         0x2b, 3 dup (0x00)                          ; length 0x2b (end at 0x2bbb)
000000000000c1c0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000c1c1         align      8
000000000000c1c8         dd         0x00000014                                  ; Length of the record
000000000000c1cc         dd         0x00000000                                  ; CIE ID
000000000000c1d0         db         0x01                                        ; Version
000000000000c1d1         db         "zR", 0                                     ; Augmentation String
000000000000c1d4         db         0x01                                        ; Code Alignment Factor (unsigned LEB128=1)
000000000000c1d5         db         0x78                                        ; Data Alignment Factor (signed LEB128=-8)
000000000000c1d6         db         0x10                                        ; Return address register
000000000000c1d7         db         0x01                                        ; Augmentation data length
000000000000c1d8         db         0x1b                                        ; FDE encoding
000000000000c1d9         db  0x0c ; '.'
000000000000c1da         db  0x07 ; '.'
000000000000c1db         db  0x08 ; '.'
000000000000c1dc         db  0x90 ; '.'
000000000000c1dd         db  0x01 ; '.'
000000000000c1de         db  0x00 ; '.'
000000000000c1df         db  0x00 ; '.'
000000000000c1e0         dd         0x00000024                                  ; Length of the record
000000000000c1e4         dd         0x0000001c                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000c1e8         db         0xa8, 0x57, 2 dup (0xff)                    ; begin 0x1990
000000000000c1ec         db         0xb0, 0x03, 2 dup (0x00)                    ; length 0x3b0 (end at 0x1d40)
000000000000c1f0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000c1f1         db  0x0e ; '.'
000000000000c1f2         db  0x10 ; '.'
000000000000c1f3         db  0x46 ; 'F'
000000000000c1f4         db  0x0e ; '.'
000000000000c1f5         db  0x18 ; '.'
000000000000c1f6         db  0x4a ; 'J'
000000000000c1f7         db  0x0f ; '.'
000000000000c1f8         db  0x0b ; '.'
000000000000c1f9         db  0x77 ; 'w'
000000000000c1fa         db  0x08 ; '.'
000000000000c1fb         db  0x80 ; '.'
000000000000c1fc         db  0x00 ; '.'
000000000000c1fd         db  0x3f ; '?'
000000000000c1fe         db  0x1a ; '.'
000000000000c1ff         db  0x3b ; ';'
000000000000c200         db  0x2a ; '*'
000000000000c201         db  0x33 ; '3'
000000000000c202         db  0x24 ; '$'
000000000000c203         db  0x22 ; '"'
000000000000c204         db  0x00 ; '.'
000000000000c205         db  0x00 ; '.'
000000000000c206         db  0x00 ; '.'
000000000000c207         db  0x00 ; '.'
000000000000c208         dd         0x00000014                                  ; Length of the record
000000000000c20c         dd         0x00000044                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000c210         db         0x30, 0x5b, 2 dup (0xff)                    ; begin 0x1d40
000000000000c214         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0x1d48)
000000000000c218         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000c219         align      32
000000000000c220         dd         0x0000003c                                  ; Length of the record
000000000000c224         dd         0x0000005c                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000c228         db         0x78, 0x6a, 2 dup (0xff)                    ; begin 0x2ca0
000000000000c22c         db         0x28, 0x01, 2 dup (0x00)                    ; length 0x128 (end at 0x2dc8)
000000000000c230         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000c231         db  0x41 ; 'A'
000000000000c232         db  0x0e ; '.'
000000000000c233         db  0x10 ; '.'
000000000000c234         db  0x86 ; '.'
000000000000c235         db  0x02 ; '.'
000000000000c236         db  0x41 ; 'A'
000000000000c237         db  0x0e ; '.'
000000000000c238         db  0x18 ; '.'
000000000000c239         db  0x83 ; '.'
000000000000c23a         db  0x03 ; '.'
000000000000c23b         db  0x47 ; 'G'
000000000000c23c         db  0x0e ; '.'
000000000000c23d         db  0x40 ; '@'
000000000000c23e         db  0x02 ; '.'
000000000000c23f         db  0xc7 ; '.'
000000000000c240         db  0x0a ; '.'
000000000000c241         db  0x0e ; '.'
000000000000c242         db  0x18 ; '.'
000000000000c243         db  0x41 ; 'A'
000000000000c244         db  0x0e ; '.'
000000000000c245         db  0x10 ; '.'
000000000000c246         db  0x41 ; 'A'
000000000000c247         db  0x0e ; '.'
000000000000c248         db  0x08 ; '.'
000000000000c249         db  0x46 ; 'F'
000000000000c24a         db  0x0b ; '.'
000000000000c24b         db  0x75 ; 'u'
000000000000c24c         db  0x0a ; '.'
000000000000c24d         db  0x0e ; '.'
000000000000c24e         db  0x18 ; '.'
000000000000c24f         db  0x43 ; 'C'
000000000000c250         db  0x0e ; '.'
000000000000c251         db  0x10 ; '.'
000000000000c252         db  0x41 ; 'A'
000000000000c253         db  0x0e ; '.'
000000000000c254         db  0x08 ; '.'
000000000000c255         db  0x47 ; 'G'
000000000000c256         db  0x0b ; '.'
000000000000c257         db  0x4b ; 'K'
000000000000c258         db  0x0e ; '.'
000000000000c259         db  0x18 ; '.'
000000000000c25a         db  0x43 ; 'C'
000000000000c25b         db  0x0e ; '.'
000000000000c25c         db  0x10 ; '.'
000000000000c25d         db  0x41 ; 'A'
000000000000c25e         db  0x0e ; '.'
000000000000c25f         db  0x08 ; '.'
000000000000c260         dd         0x00000030                                  ; Length of the record
000000000000c264         dd         0x0000009c                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000c268         db         0x68, 0x6b, 2 dup (0xff)                    ; begin 0x2dd0
000000000000c26c         db         0x70, 0x01, 2 dup (0x00)                    ; length 0x170 (end at 0x2f40)
000000000000c270         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000c271         db  0x42 ; 'B'
000000000000c272         db  0x0e ; '.'
000000000000c273         db  0x10 ; '.'
000000000000c274         db  0x8c ; '.'
000000000000c275         db  0x02 ; '.'
000000000000c276         db  0x41 ; 'A'
000000000000c277         db  0x0e ; '.'
000000000000c278         db  0x18 ; '.'
000000000000c279         db  0x86 ; '.'
000000000000c27a         db  0x03 ; '.'
000000000000c27b         db  0x41 ; 'A'
000000000000c27c         db  0x0e ; '.'
000000000000c27d         db  0x20 ; ' '
000000000000c27e         db  0x83 ; '.'
000000000000c27f         db  0x04 ; '.'
000000000000c280         db  0x47 ; 'G'
000000000000c281         db  0x0e ; '.'
000000000000c282         db  0x40 ; '@'
000000000000c283         db  0x02 ; '.'
000000000000c284         db  0xa1 ; '.'
000000000000c285         db  0x0a ; '.'
000000000000c286         db  0x0e ; '.'
000000000000c287         db  0x20 ; ' '
000000000000c288         db  0x41 ; 'A'
000000000000c289         db  0x0e ; '.'
000000000000c28a         db  0x18 ; '.'
000000000000c28b         db  0x41 ; 'A'
000000000000c28c         db  0x0e ; '.'
000000000000c28d         db  0x10 ; '.'
000000000000c28e         db  0x42 ; 'B'
000000000000c28f         db  0x0e ; '.'
000000000000c290         db  0x08 ; '.'
000000000000c291         db  0x48 ; 'H'
000000000000c292         db  0x0b ; '.'
000000000000c293         db  0x00 ; '.'
000000000000c294         dd         0x00000014                                  ; Length of the record
000000000000c298         dd         0x000000d0                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000c29c         db         0xa4, 0x6c, 2 dup (0xff)                    ; begin 0x2f40
000000000000c2a0         db         0x27, 3 dup (0x00)                          ; length 0x27 (end at 0x2f67)
000000000000c2a4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000c2a5         db  0x44 ; 'D'
000000000000c2a6         db  0x0e ; '.'
000000000000c2a7         db  0x10 ; '.'
000000000000c2a8         db  0x62 ; 'b'
000000000000c2a9         db  0x0e ; '.'
000000000000c2aa         db  0x08 ; '.'
000000000000c2ab         db  0x00 ; '.'
000000000000c2ac         dd         0x00000110                                  ; Length of the record
000000000000c2b0         dd         0x000000e8                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000c2b4         db         0xbc, 0x6c, 2 dup (0xff)                    ; begin 0x2f70
000000000000c2b8         db         0xfc, 0x17, 2 dup (0x00)                    ; length 0x17fc (end at 0x476c)
000000000000c2bc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000c2bd         db  0x42 ; 'B'
000000000000c2be         db  0x0e ; '.'
000000000000c2bf         db  0x10 ; '.'
000000000000c2c0         db  0x8f ; '.'
000000000000c2c1         db  0x02 ; '.'
000000000000c2c2         db  0x42 ; 'B'
000000000000c2c3         db  0x0e ; '.'
000000000000c2c4         db  0x18 ; '.'
000000000000c2c5         db  0x8e ; '.'
000000000000c2c6         db  0x03 ; '.'
000000000000c2c7         db  0x42 ; 'B'
000000000000c2c8         db  0x0e ; '.'
000000000000c2c9         db  0x20 ; ' '
000000000000c2ca         db  0x8d ; '.'
000000000000c2cb         db  0x04 ; '.'
000000000000c2cc         db  0x42 ; 'B'
000000000000c2cd         db  0x0e ; '.'
000000000000c2ce         db  0x28 ; '('
000000000000c2cf         db  0x8c ; '.'
000000000000c2d0         db  0x05 ; '.'
000000000000c2d1         db  0x44 ; 'D'
000000000000c2d2         db  0x0e ; '.'
000000000000c2d3         db  0x30 ; '0'
000000000000c2d4         db  0x86 ; '.'
000000000000c2d5         db  0x06 ; '.'
000000000000c2d6         db  0x41 ; 'A'
000000000000c2d7         db  0x0e ; '.'
000000000000c2d8         db  0x38 ; '8'
000000000000c2d9         db  0x83 ; '.'
000000000000c2da         db  0x07 ; '.'
000000000000c2db         db  0x4a ; 'J'
000000000000c2dc         db  0x0e ; '.'
000000000000c2dd         db  0xa0 ; '.'
000000000000c2de         db  0x03 ; '.'
000000000000c2df         db  0x02 ; '.'
000000000000c2e0         db  0x75 ; 'u'
000000000000c2e1         db  0x0a ; '.'
000000000000c2e2         db  0x0e ; '.'
000000000000c2e3         db  0x38 ; '8'
000000000000c2e4         db  0x41 ; 'A'
000000000000c2e5         db  0x0e ; '.'
000000000000c2e6         db  0x30 ; '0'
000000000000c2e7         db  0x41 ; 'A'
000000000000c2e8         db  0x0e ; '.'
000000000000c2e9         db  0x28 ; '('
000000000000c2ea         db  0x42 ; 'B'
000000000000c2eb         db  0x0e ; '.'
000000000000c2ec         db  0x20 ; ' '
000000000000c2ed         db  0x42 ; 'B'
000000000000c2ee         db  0x0e ; '.'
000000000000c2ef         db  0x18 ; '.'
000000000000c2f0         db  0x42 ; 'B'
000000000000c2f1         db  0x0e ; '.'
000000000000c2f2         db  0x10 ; '.'
000000000000c2f3         db  0x42 ; 'B'
000000000000c2f4         db  0x0e ; '.'
000000000000c2f5         db  0x08 ; '.'
000000000000c2f6         db  0x4a ; 'J'
000000000000c2f7         db  0x0b ; '.'
000000000000c2f8         db  0x03 ; '.'
000000000000c2f9         db  0x22 ; '"'
000000000000c2fa         db  0x05 ; '.'
000000000000c2fb         db  0x0e ; '.'
000000000000c2fc         db  0xb0 ; '.'
000000000000c2fd         db  0x03 ; '.'
000000000000c2fe         db  0x51 ; 'Q'
000000000000c2ff         db  0x0e ; '.'
000000000000c300         db  0xa8 ; '.'
000000000000c301         db  0x03 ; '.'
000000000000c302         db  0x41 ; 'A'
000000000000c303         db  0x0e ; '.'
000000000000c304         db  0xa0 ; '.'
000000000000c305         db  0x03 ; '.'
000000000000c306         db  0x03 ; '.'
000000000000c307         db  0x67 ; 'g'
000000000000c308         db  0x02 ; '.'
000000000000c309         db  0x0e ; '.'
000000000000c30a         db  0xa8 ; '.'
000000000000c30b         db  0x03 ; '.'
000000000000c30c         db  0x4b ; 'K'
000000000000c30d         db  0x0e ; '.'
000000000000c30e         db  0xb0 ; '.'
000000000000c30f         db  0x03 ; '.'
000000000000c310         db  0x51 ; 'Q'
000000000000c311         db  0x0e ; '.'
000000000000c312         db  0xa8 ; '.'
000000000000c313         db  0x03 ; '.'
000000000000c314         db  0x42 ; 'B'
000000000000c315         db  0x0e ; '.'
000000000000c316         db  0xa0 ; '.'
000000000000c317         db  0x03 ; '.'
000000000000c318         db  0x02 ; '.'
000000000000c319         db  0x6f ; 'o'
000000000000c31a         db  0x0e ; '.'
000000000000c31b         db  0xb0 ; '.'
000000000000c31c         db  0x03 ; '.'
000000000000c31d         db  0x59 ; 'Y'
000000000000c31e         db  0x0e ; '.'
000000000000c31f         db  0xa8 ; '.'
000000000000c320         db  0x03 ; '.'
000000000000c321         db  0x41 ; 'A'
000000000000c322         db  0x0e ; '.'
000000000000c323         db  0xa0 ; '.'
000000000000c324         db  0x03 ; '.'
000000000000c325         db  0x03 ; '.'
000000000000c326         db  0x60 ; '`'
000000000000c327         db  0x01 ; '.'
000000000000c328         db  0x0e ; '.'
000000000000c329         db  0xb0 ; '.'
000000000000c32a         db  0x03 ; '.'
000000000000c32b         db  0x59 ; 'Y'
000000000000c32c         db  0x0e ; '.'
000000000000c32d         db  0xa8 ; '.'
000000000000c32e         db  0x03 ; '.'
000000000000c32f         db  0x42 ; 'B'
000000000000c330         db  0x0e ; '.'
000000000000c331         db  0xa0 ; '.'
000000000000c332         db  0x03 ; '.'
000000000000c333         db  0x67 ; 'g'
000000000000c334         db  0x0e ; '.'
000000000000c335         db  0xb0 ; '.'
000000000000c336         db  0x03 ; '.'
000000000000c337         db  0x6e ; 'n'
000000000000c338         db  0x0e ; '.'
000000000000c339         db  0xa8 ; '.'
000000000000c33a         db  0x03 ; '.'
000000000000c33b         db  0x41 ; 'A'
000000000000c33c         db  0x0e ; '.'
000000000000c33d         db  0xa0 ; '.'
000000000000c33e         db  0x03 ; '.'
000000000000c33f         db  0x02 ; '.'
000000000000c340         db  0x91 ; '.'
000000000000c341         db  0x0e ; '.'
000000000000c342         db  0xb0 ; '.'
000000000000c343         db  0x03 ; '.'
000000000000c344         db  0x5e ; '^'
000000000000c345         db  0x0e ; '.'
000000000000c346         db  0xa8 ; '.'
000000000000c347         db  0x03 ; '.'
000000000000c348         db  0x41 ; 'A'
000000000000c349         db  0x0e ; '.'
000000000000c34a         db  0xa0 ; '.'
000000000000c34b         db  0x03 ; '.'
000000000000c34c         db  0x03 ; '.'
000000000000c34d         db  0x81 ; '.'
000000000000c34e         db  0x01 ; '.'
000000000000c34f         db  0x0e ; '.'
000000000000c350         db  0xb0 ; '.'
000000000000c351         db  0x03 ; '.'
000000000000c352         db  0x02 ; '.'
000000000000c353         db  0x44 ; 'D'
000000000000c354         db  0x0e ; '.'
000000000000c355         db  0xa8 ; '.'
000000000000c356         db  0x03 ; '.'
000000000000c357         db  0x42 ; 'B'
000000000000c358         db  0x0e ; '.'
000000000000c359         db  0xa0 ; '.'
000000000000c35a         db  0x03 ; '.'
000000000000c35b         db  0x4a ; 'J'
000000000000c35c         db  0x0e ; '.'
000000000000c35d         db  0xc0 ; '.'
000000000000c35e         db  0x03 ; '.'
000000000000c35f         db  0x67 ; 'g'
000000000000c360         db  0x0e ; '.'
000000000000c361         db  0xa0 ; '.'
000000000000c362         db  0x03 ; '.'
000000000000c363         db  0x02 ; '.'
000000000000c364         db  0x98 ; '.'
000000000000c365         db  0x0e ; '.'
000000000000c366         db  0xb0 ; '.'
000000000000c367         db  0x03 ; '.'
000000000000c368         db  0x71 ; 'q'
000000000000c369         db  0x0e ; '.'
000000000000c36a         db  0xa8 ; '.'
000000000000c36b         db  0x03 ; '.'
000000000000c36c         db  0x42 ; 'B'
000000000000c36d         db  0x0e ; '.'
000000000000c36e         db  0xa0 ; '.'
000000000000c36f         db  0x03 ; '.'
000000000000c370         db  0x03 ; '.'
000000000000c371         db  0x46 ; 'F'
000000000000c372         db  0x01 ; '.'
000000000000c373         db  0x0e ; '.'
000000000000c374         db  0xb0 ; '.'
000000000000c375         db  0x03 ; '.'
000000000000c376         db  0x70 ; 'p'
000000000000c377         db  0x0e ; '.'
000000000000c378         db  0xa8 ; '.'
000000000000c379         db  0x03 ; '.'
000000000000c37a         db  0x42 ; 'B'
000000000000c37b         db  0x0e ; '.'
000000000000c37c         db  0xa0 ; '.'
000000000000c37d         db  0x03 ; '.'
000000000000c37e         db  0x02 ; '.'
000000000000c37f         db  0x65 ; 'e'
000000000000c380         db  0x0e ; '.'
000000000000c381         db  0xa8 ; '.'
000000000000c382         db  0x03 ; '.'
000000000000c383         db  0x53 ; 'S'
000000000000c384         db  0x0e ; '.'
000000000000c385         db  0xb0 ; '.'
000000000000c386         db  0x03 ; '.'
000000000000c387         db  0x49 ; 'I'
000000000000c388         db  0x0e ; '.'
000000000000c389         db  0xc0 ; '.'
000000000000c38a         db  0x03 ; '.'
000000000000c38b         db  0x52 ; 'R'
000000000000c38c         db  0x0e ; '.'
000000000000c38d         db  0xa0 ; '.'
000000000000c38e         db  0x03 ; '.'
000000000000c38f         db  0x02 ; '.'
000000000000c390         db  0x63 ; 'c'
000000000000c391         db  0x0e ; '.'
000000000000c392         db  0xa8 ; '.'
000000000000c393         db  0x03 ; '.'
000000000000c394         db  0x4e ; 'N'
000000000000c395         db  0x0e ; '.'
000000000000c396         db  0xb0 ; '.'
000000000000c397         db  0x03 ; '.'
000000000000c398         db  0x4e ; 'N'
000000000000c399         db  0x0e ; '.'
000000000000c39a         db  0xc0 ; '.'
000000000000c39b         db  0x03 ; '.'
000000000000c39c         db  0x52 ; 'R'
000000000000c39d         db  0x0e ; '.'
000000000000c39e         db  0xa0 ; '.'
000000000000c39f         db  0x03 ; '.'
000000000000c3a0         db  0x6c ; 'l'
000000000000c3a1         db  0x0a ; '.'
000000000000c3a2         db  0x0e ; '.'
000000000000c3a3         db  0xb0 ; '.'
000000000000c3a4         db  0x03 ; '.'
000000000000c3a5         db  0x62 ; 'b'
000000000000c3a6         db  0x0b ; '.'
000000000000c3a7         db  0x03 ; '.'
000000000000c3a8         db  0xe5 ; '.'
000000000000c3a9         db  0x01 ; '.'
000000000000c3aa         db  0x0e ; '.'
000000000000c3ab         db  0xb0 ; '.'
000000000000c3ac         db  0x03 ; '.'
000000000000c3ad         db  0x4f ; 'O'
000000000000c3ae         db  0x0e ; '.'
000000000000c3af         db  0xa8 ; '.'
000000000000c3b0         db  0x03 ; '.'
000000000000c3b1         db  0x41 ; 'A'
000000000000c3b2         db  0x0e ; '.'
000000000000c3b3         db  0xa0 ; '.'
000000000000c3b4         db  0x03 ; '.'
000000000000c3b5         db  0x03 ; '.'
000000000000c3b6         db  0x8d ; '.'
000000000000c3b7         db  0x04 ; '.'
000000000000c3b8         db  0x0a ; '.'
000000000000c3b9         db  0x0e ; '.'
000000000000c3ba         db  0xb0 ; '.'
000000000000c3bb         db  0x03 ; '.'
000000000000c3bc         db  0x58 ; 'X'
000000000000c3bd         db  0x0b ; '.'
000000000000c3be         db  0x00 ; '.'
000000000000c3bf         db  0x00 ; '.'
000000000000c3c0         dd         0x00000048                                  ; Length of the record
000000000000c3c4         dd         0x000001fc                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000c3c8         db         0xa8, 0x83, 2 dup (0xff)                    ; begin 0x4770
000000000000c3cc         db         0xc6, 0x01, 2 dup (0x00)                    ; length 0x1c6 (end at 0x4936)
000000000000c3d0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000c3d1         db  0x42 ; 'B'
000000000000c3d2         db  0x0e ; '.'
000000000000c3d3         db  0x10 ; '.'
000000000000c3d4         db  0x8f ; '.'
000000000000c3d5         db  0x02 ; '.'
000000000000c3d6         db  0x42 ; 'B'
000000000000c3d7         db  0x0e ; '.'
000000000000c3d8         db  0x18 ; '.'
000000000000c3d9         db  0x8e ; '.'
000000000000c3da         db  0x03 ; '.'
000000000000c3db         db  0x45 ; 'E'
000000000000c3dc         db  0x0e ; '.'
000000000000c3dd         db  0x20 ; ' '
000000000000c3de         db  0x8d ; '.'
000000000000c3df         db  0x04 ; '.'
000000000000c3e0         db  0x42 ; 'B'
000000000000c3e1         db  0x0e ; '.'
000000000000c3e2         db  0x28 ; '('
000000000000c3e3         db  0x8c ; '.'
000000000000c3e4         db  0x05 ; '.'
000000000000c3e5         db  0x44 ; 'D'
000000000000c3e6         db  0x0e ; '.'
000000000000c3e7         db  0x30 ; '0'
000000000000c3e8         db  0x86 ; '.'
000000000000c3e9         db  0x06 ; '.'
000000000000c3ea         db  0x41 ; 'A'
000000000000c3eb         db  0x0e ; '.'
000000000000c3ec         db  0x38 ; '8'
000000000000c3ed         db  0x83 ; '.'
000000000000c3ee         db  0x07 ; '.'
000000000000c3ef         db  0x4c ; 'L'
000000000000c3f0         db  0x0e ; '.'
000000000000c3f1         db  0x50 ; 'P'
000000000000c3f2         db  0x02 ; '.'
000000000000c3f3         db  0x91 ; '.'
000000000000c3f4         db  0x0a ; '.'
000000000000c3f5         db  0x0e ; '.'
000000000000c3f6         db  0x38 ; '8'
000000000000c3f7         db  0x44 ; 'D'
000000000000c3f8         db  0x0e ; '.'
000000000000c3f9         db  0x30 ; '0'
000000000000c3fa         db  0x41 ; 'A'
000000000000c3fb         db  0x0e ; '.'
000000000000c3fc         db  0x28 ; '('
000000000000c3fd         db  0x42 ; 'B'
000000000000c3fe         db  0x0e ; '.'
000000000000c3ff         db  0x20 ; ' '
000000000000c400         db  0x42 ; 'B'
000000000000c401         db  0x0e ; '.'
000000000000c402         db  0x18 ; '.'
000000000000c403         db  0x42 ; 'B'
000000000000c404         db  0x0e ; '.'
000000000000c405         db  0x10 ; '.'
000000000000c406         db  0x42 ; 'B'
000000000000c407         db  0x0e ; '.'
000000000000c408         db  0x08 ; '.'
000000000000c409         db  0x46 ; 'F'
000000000000c40a         db  0x0b ; '.'
000000000000c40b         db  0x00 ; '.'
000000000000c40c         dd         0x00000044                                  ; Length of the record
000000000000c410         dd         0x00000248                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000c414         db         0x2c, 0x85, 2 dup (0xff)                    ; begin 0x4940
000000000000c418         db         0x32, 0x07, 2 dup (0x00)                    ; length 0x732 (end at 0x5072)
000000000000c41c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000c41d         db  0x42 ; 'B'
000000000000c41e         db  0x0e ; '.'
000000000000c41f         db  0x10 ; '.'
000000000000c420         db  0x8d ; '.'
000000000000c421         db  0x02 ; '.'
000000000000c422         db  0x42 ; 'B'
000000000000c423         db  0x0e ; '.'
000000000000c424         db  0x18 ; '.'
000000000000c425         db  0x8c ; '.'
000000000000c426         db  0x03 ; '.'
000000000000c427         db  0x46 ; 'F'
000000000000c428         db  0x0e ; '.'
000000000000c429         db  0x20 ; ' '
000000000000c42a         db  0x86 ; '.'
000000000000c42b         db  0x04 ; '.'
000000000000c42c         db  0x41 ; 'A'
000000000000c42d         db  0x0e ; '.'
000000000000c42e         db  0x28 ; '('
000000000000c42f         db  0x83 ; '.'
000000000000c430         db  0x05 ; '.'
000000000000c431         db  0x49 ; 'I'
000000000000c432         db  0x0e ; '.'
000000000000c433         db  0xb0 ; '.'
000000000000c434         db  0x01 ; '.'
000000000000c435         db  0x03 ; '.'
000000000000c436         db  0x9a ; '.'
000000000000c437         db  0x04 ; '.'
000000000000c438         db  0x0e ; '.'
000000000000c439         db  0xb8 ; '.'
000000000000c43a         db  0x01 ; '.'
000000000000c43b         db  0x47 ; 'G'
000000000000c43c         db  0x0e ; '.'
000000000000c43d         db  0xc0 ; '.'
000000000000c43e         db  0x01 ; '.'
000000000000c43f         db  0x41 ; 'A'
000000000000c440         db  0x0e ; '.'
000000000000c441         db  0xc8 ; '.'
000000000000c442         db  0x01 ; '.'
000000000000c443         db  0x44 ; 'D'
000000000000c444         db  0x0e ; '.'
000000000000c445         db  0xd0 ; '.'
000000000000c446         db  0x01 ; '.'
000000000000c447         db  0x41 ; 'A'
000000000000c448         db  0x0e ; '.'
000000000000c449         db  0xd8 ; '.'
000000000000c44a         db  0x01 ; '.'
000000000000c44b         db  0x44 ; 'D'
000000000000c44c         db  0x0e ; '.'
000000000000c44d         db  0xe0 ; '.'
000000000000c44e         db  0x01 ; '.'
000000000000c44f         db  0x02 ; '.'
000000000000c450         db  0xb3 ; '.'
000000000000c451         db  0x0e ; '.'
000000000000c452         db  0xb0 ; '.'
000000000000c453         db  0x01 ; '.'
000000000000c454         dd         0x00000060                                  ; Length of the record
000000000000c458         dd         0x00000290                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000c45c         db         0xf4, 0x58, 2 dup (0xff)                    ; begin 0x1d50
000000000000c460         db         0x40, 0x0e, 2 dup (0x00)                    ; length 0xe40 (end at 0x2b90)
000000000000c464         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000c465         db  0x42 ; 'B'
000000000000c466         db  0x0e ; '.'
000000000000c467         db  0x10 ; '.'
000000000000c468         db  0x8f ; '.'
000000000000c469         db  0x02 ; '.'
000000000000c46a         db  0x42 ; 'B'
000000000000c46b         db  0x0e ; '.'
000000000000c46c         db  0x18 ; '.'
000000000000c46d         db  0x8e ; '.'
000000000000c46e         db  0x03 ; '.'
000000000000c46f         db  0x42 ; 'B'
000000000000c470         db  0x0e ; '.'
000000000000c471         db  0x20 ; ' '
000000000000c472         db  0x8d ; '.'
000000000000c473         db  0x04 ; '.'
000000000000c474         db  0x42 ; 'B'
000000000000c475         db  0x0e ; '.'
000000000000c476         db  0x28 ; '('
000000000000c477         db  0x8c ; '.'
000000000000c478         db  0x05 ; '.'
000000000000c479         db  0x41 ; 'A'
000000000000c47a         db  0x0e ; '.'
000000000000c47b         db  0x30 ; '0'
000000000000c47c         db  0x86 ; '.'
000000000000c47d         db  0x06 ; '.'
000000000000c47e         db  0x41 ; 'A'
000000000000c47f         db  0x0e ; '.'
000000000000c480         db  0x38 ; '8'
000000000000c481         db  0x83 ; '.'
000000000000c482         db  0x07 ; '.'
000000000000c483         db  0x49 ; 'I'
000000000000c484         db  0x0e ; '.'
000000000000c485         db  0x80 ; '.'
000000000000c486         db  0x01 ; '.'
000000000000c487         db  0x03 ; '.'
000000000000c488         db  0x70 ; 'p'
000000000000c489         db  0x06 ; '.'
000000000000c48a         db  0x0e ; '.'
000000000000c48b         db  0x88 ; '.'
000000000000c48c         db  0x01 ; '.'
000000000000c48d         db  0x5c ; '\'
000000000000c48e         db  0x0e ; '.'
000000000000c48f         db  0x90 ; '.'
000000000000c490         db  0x01 ; '.'
000000000000c491         db  0x42 ; 'B'
000000000000c492         db  0x0e ; '.'
000000000000c493         db  0x98 ; '.'
000000000000c494         db  0x01 ; '.'
000000000000c495         db  0x45 ; 'E'
000000000000c496         db  0x0e ; '.'
000000000000c497         db  0xa0 ; '.'
000000000000c498         db  0x01 ; '.'
000000000000c499         db  0x50 ; 'P'
000000000000c49a         db  0x0e ; '.'
000000000000c49b         db  0x80 ; '.'
000000000000c49c         db  0x01 ; '.'
000000000000c49d         db  0x03 ; '.'
000000000000c49e         db  0x9d ; '.'
000000000000c49f         db  0x01 ; '.'
000000000000c4a0         db  0x0a ; '.'
000000000000c4a1         db  0x0e ; '.'
000000000000c4a2         db  0x38 ; '8'
000000000000c4a3         db  0x41 ; 'A'
000000000000c4a4         db  0x0e ; '.'
000000000000c4a5         db  0x30 ; '0'
000000000000c4a6         db  0x41 ; 'A'
000000000000c4a7         db  0x0e ; '.'
000000000000c4a8         db  0x28 ; '('
000000000000c4a9         db  0x42 ; 'B'
000000000000c4aa         db  0x0e ; '.'
000000000000c4ab         db  0x20 ; ' '
000000000000c4ac         db  0x42 ; 'B'
000000000000c4ad         db  0x0e ; '.'
000000000000c4ae         db  0x18 ; '.'
000000000000c4af         db  0x42 ; 'B'
000000000000c4b0         db  0x0e ; '.'
000000000000c4b1         db  0x10 ; '.'
000000000000c4b2         db  0x42 ; 'B'
000000000000c4b3         db  0x0e ; '.'
000000000000c4b4         db  0x08 ; '.'
000000000000c4b5         db  0x41 ; 'A'
000000000000c4b6         db  0x0b ; '.'
000000000000c4b7         db  0x00 ; '.'
000000000000c4b8         dd         0x00000010                                  ; Length of the record
000000000000c4bc         dd         0x000002f4                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000c4c0         db         0xc0, 0x8b, 2 dup (0xff)                    ; begin 0x5080
000000000000c4c4         db         0x16, 3 dup (0x00)                          ; length 0x16 (end at 0x5096)
000000000000c4c8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000c4c9         align      4
000000000000c4cc         dd         0x00000028                                  ; Length of the record
000000000000c4d0         dd         0x00000308                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000c4d4         db         0xcc, 0x8b, 2 dup (0xff)                    ; begin 0x50a0
000000000000c4d8         db         0xc9, 3 dup (0x00)                          ; length 0xc9 (end at 0x5169)
000000000000c4dc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000c4dd         db  0x41 ; 'A'
000000000000c4de         db  0x0e ; '.'
000000000000c4df         db  0x10 ; '.'
000000000000c4e0         db  0x86 ; '.'
000000000000c4e1         db  0x02 ; '.'
000000000000c4e2         db  0x41 ; 'A'
000000000000c4e3         db  0x0e ; '.'
000000000000c4e4         db  0x18 ; '.'
000000000000c4e5         db  0x83 ; '.'
000000000000c4e6         db  0x03 ; '.'
000000000000c4e7         db  0x4a ; 'J'
000000000000c4e8         db  0x0e ; '.'
000000000000c4e9         db  0x20 ; ' '
000000000000c4ea         db  0x77 ; 'w'
000000000000c4eb         db  0x0a ; '.'
000000000000c4ec         db  0x0e ; '.'
000000000000c4ed         db  0x18 ; '.'
000000000000c4ee         db  0x41 ; 'A'
000000000000c4ef         db  0x0e ; '.'
000000000000c4f0         db  0x10 ; '.'
000000000000c4f1         db  0x41 ; 'A'
000000000000c4f2         db  0x0e ; '.'
000000000000c4f3         db  0x08 ; '.'
000000000000c4f4         db  0x4b ; 'K'
000000000000c4f5         db  0x0b ; '.'
000000000000c4f6         db  0x00 ; '.'
000000000000c4f7         db  0x00 ; '.'
000000000000c4f8         dd         0x00000048                                  ; Length of the record
000000000000c4fc         dd         0x00000334                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000c500         db         0x70, 0x8c, 2 dup (0xff)                    ; begin 0x5170
000000000000c504         db         0xb8, 0x05, 2 dup (0x00)                    ; length 0x5b8 (end at 0x5728)
000000000000c508         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000c509         db  0x42 ; 'B'
000000000000c50a         db  0x0e ; '.'
000000000000c50b         db  0x10 ; '.'
000000000000c50c         db  0x8f ; '.'
000000000000c50d         db  0x02 ; '.'
000000000000c50e         db  0x42 ; 'B'
000000000000c50f         db  0x0e ; '.'
000000000000c510         db  0x18 ; '.'
000000000000c511         db  0x8e ; '.'
000000000000c512         db  0x03 ; '.'
000000000000c513         db  0x44 ; 'D'
000000000000c514         db  0x0e ; '.'
000000000000c515         db  0x20 ; ' '
000000000000c516         db  0x8d ; '.'
000000000000c517         db  0x04 ; '.'
000000000000c518         db  0x42 ; 'B'
000000000000c519         db  0x0e ; '.'
000000000000c51a         db  0x28 ; '('
000000000000c51b         db  0x8c ; '.'
000000000000c51c         db  0x05 ; '.'
000000000000c51d         db  0x44 ; 'D'
000000000000c51e         db  0x0e ; '.'
000000000000c51f         db  0x30 ; '0'
000000000000c520         db  0x86 ; '.'
000000000000c521         db  0x06 ; '.'
000000000000c522         db  0x41 ; 'A'
000000000000c523         db  0x0e ; '.'
000000000000c524         db  0x38 ; '8'
000000000000c525         db  0x83 ; '.'
000000000000c526         db  0x07 ; '.'
000000000000c527         db  0x44 ; 'D'
000000000000c528         db  0x0e ; '.'
000000000000c529         db  0x60 ; '`'
000000000000c52a         db  0x03 ; '.'
000000000000c52b         db  0x58 ; 'X'
000000000000c52c         db  0x02 ; '.'
000000000000c52d         db  0x0a ; '.'
000000000000c52e         db  0x0e ; '.'
000000000000c52f         db  0x38 ; '8'
000000000000c530         db  0x41 ; 'A'
000000000000c531         db  0x0e ; '.'
000000000000c532         db  0x30 ; '0'
000000000000c533         db  0x41 ; 'A'
000000000000c534         db  0x0e ; '.'
000000000000c535         db  0x28 ; '('
000000000000c536         db  0x42 ; 'B'
000000000000c537         db  0x0e ; '.'
000000000000c538         db  0x20 ; ' '
000000000000c539         db  0x42 ; 'B'
000000000000c53a         db  0x0e ; '.'
000000000000c53b         db  0x18 ; '.'
000000000000c53c         db  0x42 ; 'B'
000000000000c53d         db  0x0e ; '.'
000000000000c53e         db  0x10 ; '.'
000000000000c53f         db  0x42 ; 'B'
000000000000c540         db  0x0e ; '.'
000000000000c541         db  0x08 ; '.'
000000000000c542         db  0x4b ; 'K'
000000000000c543         db  0x0b ; '.'
000000000000c544         dd         0x00000018                                  ; Length of the record
000000000000c548         dd         0x00000380                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000c54c         db         0xe4, 0x91, 2 dup (0xff)                    ; begin 0x5730
000000000000c550         db         0x36, 3 dup (0x00)                          ; length 0x36 (end at 0x5766)
000000000000c554         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000c555         db  0x44 ; 'D'
000000000000c556         db  0x0e ; '.'
000000000000c557         db  0x10 ; '.'
000000000000c558         db  0x71 ; 'q'
000000000000c559         db  0x0e ; '.'
000000000000c55a         db  0x08 ; '.'
000000000000c55b         db  0x00 ; '.'
000000000000c55c         db  0x00 ; '.'
000000000000c55d         db  0x00 ; '.'
000000000000c55e         db  0x00 ; '.'
000000000000c55f         db  0x00 ; '.'
000000000000c560         dd         0x00000010                                  ; Length of the record
000000000000c564         dd         0x0000039c                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000c568         db         0x08, 0x92, 2 dup (0xff)                    ; begin 0x5770
000000000000c56c         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0x577a)
000000000000c570         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000c571         align      4
000000000000c574         dd         0x00000048                                  ; Length of the record
000000000000c578         dd         0x000003b0                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000c57c         db         0x04, 0x92, 2 dup (0xff)                    ; begin 0x5780
000000000000c580         db         0x16, 0x01, 2 dup (0x00)                    ; length 0x116 (end at 0x5896)
000000000000c584         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000c585         db  0x42 ; 'B'
000000000000c586         db  0x0e ; '.'
000000000000c587         db  0x10 ; '.'
000000000000c588         db  0x8f ; '.'
000000000000c589         db  0x02 ; '.'
000000000000c58a         db  0x42 ; 'B'
000000000000c58b         db  0x0e ; '.'
000000000000c58c         db  0x18 ; '.'
000000000000c58d         db  0x8e ; '.'
000000000000c58e         db  0x03 ; '.'
000000000000c58f         db  0x45 ; 'E'
000000000000c590         db  0x0e ; '.'
000000000000c591         db  0x20 ; ' '
000000000000c592         db  0x8d ; '.'
000000000000c593         db  0x04 ; '.'
000000000000c594         db  0x42 ; 'B'
000000000000c595         db  0x0e ; '.'
000000000000c596         db  0x28 ; '('
000000000000c597         db  0x8c ; '.'
000000000000c598         db  0x05 ; '.'
000000000000c599         db  0x44 ; 'D'
000000000000c59a         db  0x0e ; '.'
000000000000c59b         db  0x30 ; '0'
000000000000c59c         db  0x86 ; '.'
000000000000c59d         db  0x06 ; '.'
000000000000c59e         db  0x41 ; 'A'
000000000000c59f         db  0x0e ; '.'
000000000000c5a0         db  0x38 ; '8'
000000000000c5a1         db  0x83 ; '.'
000000000000c5a2         db  0x07 ; '.'
000000000000c5a3         db  0x47 ; 'G'
000000000000c5a4         db  0x0e ; '.'
000000000000c5a5         db  0x60 ; '`'
000000000000c5a6         db  0x02 ; '.'
000000000000c5a7         db  0xde ; '.'
000000000000c5a8         db  0x0a ; '.'
000000000000c5a9         db  0x0e ; '.'
000000000000c5aa         db  0x38 ; '8'
000000000000c5ab         db  0x41 ; 'A'
000000000000c5ac         db  0x0e ; '.'
000000000000c5ad         db  0x30 ; '0'
000000000000c5ae         db  0x41 ; 'A'
000000000000c5af         db  0x0e ; '.'
000000000000c5b0         db  0x28 ; '('
000000000000c5b1         db  0x42 ; 'B'
000000000000c5b2         db  0x0e ; '.'
000000000000c5b3         db  0x20 ; ' '
000000000000c5b4         db  0x42 ; 'B'
000000000000c5b5         db  0x0e ; '.'
000000000000c5b6         db  0x18 ; '.'
000000000000c5b7         db  0x42 ; 'B'
000000000000c5b8         db  0x0e ; '.'
000000000000c5b9         db  0x10 ; '.'
000000000000c5ba         db  0x42 ; 'B'
000000000000c5bb         db  0x0e ; '.'
000000000000c5bc         db  0x08 ; '.'
000000000000c5bd         db  0x41 ; 'A'
000000000000c5be         db  0x0b ; '.'
000000000000c5bf         db  0x00 ; '.'
000000000000c5c0         dd         0x00000028                                  ; Length of the record
000000000000c5c4         dd         0x000003fc                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000c5c8         db         0xd8, 0x92, 2 dup (0xff)                    ; begin 0x58a0
000000000000c5cc         db         0x73, 3 dup (0x00)                          ; length 0x73 (end at 0x5913)
000000000000c5d0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000c5d1         db  0x46 ; 'F'
000000000000c5d2         db  0x0e ; '.'
000000000000c5d3         db  0x10 ; '.'
000000000000c5d4         db  0x8c ; '.'
000000000000c5d5         db  0x02 ; '.'
000000000000c5d6         db  0x46 ; 'F'
000000000000c5d7         db  0x0e ; '.'
000000000000c5d8         db  0x18 ; '.'
000000000000c5d9         db  0x86 ; '.'
000000000000c5da         db  0x03 ; '.'
000000000000c5db         db  0x44 ; 'D'
000000000000c5dc         db  0x0e ; '.'
000000000000c5dd         db  0x20 ; ' '
000000000000c5de         db  0x83 ; '.'
000000000000c5df         db  0x04 ; '.'
000000000000c5e0         db  0x7f ; '.'
000000000000c5e1         db  0x0a ; '.'
000000000000c5e2         db  0x0e ; '.'
000000000000c5e3         db  0x18 ; '.'
000000000000c5e4         db  0x41 ; 'A'
000000000000c5e5         db  0x0e ; '.'
000000000000c5e6         db  0x10 ; '.'
000000000000c5e7         db  0x42 ; 'B'
000000000000c5e8         db  0x0e ; '.'
000000000000c5e9         db  0x08 ; '.'
000000000000c5ea         db  0x4e ; 'N'
000000000000c5eb         db  0x0b ; '.'
000000000000c5ec         dd         0x0000005c                                  ; Length of the record
000000000000c5f0         dd         0x00000428                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000c5f4         db         0x2c, 0x93, 2 dup (0xff)                    ; begin 0x5920
000000000000c5f8         db         0x20, 0x01, 2 dup (0x00)                    ; length 0x120 (end at 0x5a40)
000000000000c5fc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000c5fd         db  0x42 ; 'B'
000000000000c5fe         db  0x0e ; '.'
000000000000c5ff         db  0x10 ; '.'
000000000000c600         db  0x8f ; '.'
000000000000c601         db  0x02 ; '.'
000000000000c602         db  0x42 ; 'B'
000000000000c603         db  0x0e ; '.'
000000000000c604         db  0x18 ; '.'
000000000000c605         db  0x8e ; '.'
000000000000c606         db  0x03 ; '.'
000000000000c607         db  0x45 ; 'E'
000000000000c608         db  0x0e ; '.'
000000000000c609         db  0x20 ; ' '
000000000000c60a         db  0x8d ; '.'
000000000000c60b         db  0x04 ; '.'
000000000000c60c         db  0x42 ; 'B'
000000000000c60d         db  0x0e ; '.'
000000000000c60e         db  0x28 ; '('
000000000000c60f         db  0x8c ; '.'
000000000000c610         db  0x05 ; '.'
000000000000c611         db  0x43 ; 'C'
000000000000c612         db  0x0e ; '.'
000000000000c613         db  0x30 ; '0'
000000000000c614         db  0x86 ; '.'
000000000000c615         db  0x06 ; '.'
000000000000c616         db  0x41 ; 'A'
000000000000c617         db  0x0e ; '.'
000000000000c618         db  0x38 ; '8'
000000000000c619         db  0x83 ; '.'
000000000000c61a         db  0x07 ; '.'
000000000000c61b         db  0x56 ; 'V'
000000000000c61c         db  0x0e ; '.'
000000000000c61d         db  0x40 ; '@'
000000000000c61e         db  0x02 ; '.'
000000000000c61f         db  0xd3 ; '.'
000000000000c620         db  0x0a ; '.'
000000000000c621         db  0x0e ; '.'
000000000000c622         db  0x38 ; '8'
000000000000c623         db  0x41 ; 'A'
000000000000c624         db  0x0e ; '.'
000000000000c625         db  0x30 ; '0'
000000000000c626         db  0x41 ; 'A'
000000000000c627         db  0x0e ; '.'
000000000000c628         db  0x28 ; '('
000000000000c629         db  0x42 ; 'B'
000000000000c62a         db  0x0e ; '.'
000000000000c62b         db  0x20 ; ' '
000000000000c62c         db  0x42 ; 'B'
000000000000c62d         db  0x0e ; '.'
000000000000c62e         db  0x18 ; '.'
000000000000c62f         db  0x42 ; 'B'
000000000000c630         db  0x0e ; '.'
000000000000c631         db  0x10 ; '.'
000000000000c632         db  0x42 ; 'B'
000000000000c633         db  0x0e ; '.'
000000000000c634         db  0x08 ; '.'
000000000000c635         db  0x46 ; 'F'
000000000000c636         db  0x0b ; '.'
000000000000c637         db  0x44 ; 'D'
000000000000c638         db  0x0e ; '.'
000000000000c639         db  0x38 ; '8'
000000000000c63a         db  0x46 ; 'F'
000000000000c63b         db  0x0e ; '.'
000000000000c63c         db  0x30 ; '0'
000000000000c63d         db  0x41 ; 'A'
000000000000c63e         db  0x0e ; '.'
000000000000c63f         db  0x28 ; '('
000000000000c640         db  0x42 ; 'B'
000000000000c641         db  0x0e ; '.'
000000000000c642         db  0x20 ; ' '
000000000000c643         db  0x42 ; 'B'
000000000000c644         db  0x0e ; '.'
000000000000c645         db  0x18 ; '.'
000000000000c646         db  0x42 ; 'B'
000000000000c647         db  0x0e ; '.'
000000000000c648         db  0x10 ; '.'
000000000000c649         db  0x42 ; 'B'
000000000000c64a         db  0x0e ; '.'
000000000000c64b         db  0x08 ; '.'
000000000000c64c         dd         0x00000048                                  ; Length of the record
000000000000c650         dd         0x00000488                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000c654         db         0xec, 0x93, 2 dup (0xff)                    ; begin 0x5a40
000000000000c658         db         0x6d, 3 dup (0x00)                          ; length 0x6d (end at 0x5aad)
000000000000c65c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000c65d         db  0x42 ; 'B'
000000000000c65e         db  0x0e ; '.'
000000000000c65f         db  0x10 ; '.'
000000000000c660         db  0x8f ; '.'
000000000000c661         db  0x02 ; '.'
000000000000c662         db  0x42 ; 'B'
000000000000c663         db  0x0e ; '.'
000000000000c664         db  0x18 ; '.'
000000000000c665         db  0x8e ; '.'
000000000000c666         db  0x03 ; '.'
000000000000c667         db  0x45 ; 'E'
000000000000c668         db  0x0e ; '.'
000000000000c669         db  0x20 ; ' '
000000000000c66a         db  0x8d ; '.'
000000000000c66b         db  0x04 ; '.'
000000000000c66c         db  0x42 ; 'B'
000000000000c66d         db  0x0e ; '.'
000000000000c66e         db  0x28 ; '('
000000000000c66f         db  0x8c ; '.'
000000000000c670         db  0x05 ; '.'
000000000000c671         db  0x44 ; 'D'
000000000000c672         db  0x0e ; '.'
000000000000c673         db  0x30 ; '0'
000000000000c674         db  0x86 ; '.'
000000000000c675         db  0x06 ; '.'
000000000000c676         db  0x41 ; 'A'
000000000000c677         db  0x0e ; '.'
000000000000c678         db  0x38 ; '8'
000000000000c679         db  0x83 ; '.'
000000000000c67a         db  0x07 ; '.'
000000000000c67b         db  0x50 ; 'P'
000000000000c67c         db  0x0e ; '.'
000000000000c67d         db  0x40 ; '@'
000000000000c67e         db  0x5a ; 'Z'
000000000000c67f         db  0x0a ; '.'
000000000000c680         db  0x0e ; '.'
000000000000c681         db  0x38 ; '8'
000000000000c682         db  0x41 ; 'A'
000000000000c683         db  0x0e ; '.'
000000000000c684         db  0x30 ; '0'
000000000000c685         db  0x41 ; 'A'
000000000000c686         db  0x0e ; '.'
000000000000c687         db  0x28 ; '('
000000000000c688         db  0x42 ; 'B'
000000000000c689         db  0x0e ; '.'
000000000000c68a         db  0x20 ; ' '
000000000000c68b         db  0x42 ; 'B'
000000000000c68c         db  0x0e ; '.'
000000000000c68d         db  0x18 ; '.'
000000000000c68e         db  0x42 ; 'B'
000000000000c68f         db  0x0e ; '.'
000000000000c690         db  0x10 ; '.'
000000000000c691         db  0x42 ; 'B'
000000000000c692         db  0x0e ; '.'
000000000000c693         db  0x08 ; '.'
000000000000c694         db  0x41 ; 'A'
000000000000c695         db  0x0b ; '.'
000000000000c696         db  0x00 ; '.'
000000000000c697         db  0x00 ; '.'
000000000000c698         dd         0x0000003c                                  ; Length of the record
000000000000c69c         dd         0x000004d4                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000c6a0         db         0x10, 0x94, 2 dup (0xff)                    ; begin 0x5ab0
000000000000c6a4         db         0x4d, 3 dup (0x00)                          ; length 0x4d (end at 0x5afd)
000000000000c6a8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000c6a9         db  0x42 ; 'B'
000000000000c6aa         db  0x0e ; '.'
000000000000c6ab         db  0x10 ; '.'
000000000000c6ac         db  0x8e ; '.'
000000000000c6ad         db  0x02 ; '.'
000000000000c6ae         db  0x42 ; 'B'
000000000000c6af         db  0x0e ; '.'
000000000000c6b0         db  0x18 ; '.'
000000000000c6b1         db  0x8d ; '.'
000000000000c6b2         db  0x03 ; '.'
000000000000c6b3         db  0x42 ; 'B'
000000000000c6b4         db  0x0e ; '.'
000000000000c6b5         db  0x20 ; ' '
000000000000c6b6         db  0x8c ; '.'
000000000000c6b7         db  0x04 ; '.'
000000000000c6b8         db  0x41 ; 'A'
000000000000c6b9         db  0x0e ; '.'
000000000000c6ba         db  0x28 ; '('
000000000000c6bb         db  0x86 ; '.'
000000000000c6bc         db  0x05 ; '.'
000000000000c6bd         db  0x41 ; 'A'
000000000000c6be         db  0x0e ; '.'
000000000000c6bf         db  0x30 ; '0'
000000000000c6c0         db  0x83 ; '.'
000000000000c6c1         db  0x06 ; '.'
000000000000c6c2         db  0x7a ; 'z'
000000000000c6c3         db  0x0e ; '.'
000000000000c6c4         db  0x28 ; '('
000000000000c6c5         db  0x44 ; 'D'
000000000000c6c6         db  0x0e ; '.'
000000000000c6c7         db  0x20 ; ' '
000000000000c6c8         db  0x42 ; 'B'
000000000000c6c9         db  0x0e ; '.'
000000000000c6ca         db  0x18 ; '.'
000000000000c6cb         db  0x42 ; 'B'
000000000000c6cc         db  0x0e ; '.'
000000000000c6cd         db  0x10 ; '.'
000000000000c6ce         db  0x42 ; 'B'
000000000000c6cf         db  0x0e ; '.'
000000000000c6d0         db  0x08 ; '.'
000000000000c6d1         db  0x00 ; '.'
000000000000c6d2         db  0x00 ; '.'
000000000000c6d3         db  0x00 ; '.'
000000000000c6d4         db  0x00 ; '.'
000000000000c6d5         db  0x00 ; '.'
000000000000c6d6         db  0x00 ; '.'
000000000000c6d7         db  0x00 ; '.'
000000000000c6d8         dd         0x00000010                                  ; Length of the record
000000000000c6dc         dd         0x00000514                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000c6e0         db         0x20, 0x94, 2 dup (0xff)                    ; begin 0x5b00
000000000000c6e4         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0x5b08)
000000000000c6e8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000c6e9         align      4
000000000000c6ec         dd         0x00000010                                  ; Length of the record
000000000000c6f0         dd         0x00000528                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000c6f4         db         0x1c, 0x94, 2 dup (0xff)                    ; begin 0x5b10
000000000000c6f8         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0x5b18)
000000000000c6fc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000c6fd         align      256
000000000000c700         dd         0x0000002c                                  ; Length of the record
000000000000c704         dd         0x0000053c                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000c708         db         0x18, 0x94, 2 dup (0xff)                    ; begin 0x5b20
000000000000c70c         db         0xa4, 3 dup (0x00)                          ; length 0xa4 (end at 0x5bc4)
000000000000c710         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000c711         db  0x41 ; 'A'
000000000000c712         db  0x0e ; '.'
000000000000c713         db  0x10 ; '.'
000000000000c714         db  0x86 ; '.'
000000000000c715         db  0x02 ; '.'
000000000000c716         db  0x41 ; 'A'
000000000000c717         db  0x0e ; '.'
000000000000c718         db  0x18 ; '.'
000000000000c719         db  0x83 ; '.'
000000000000c71a         db  0x03 ; '.'
000000000000c71b         db  0x44 ; 'D'
000000000000c71c         db  0x0e ; '.'
000000000000c71d         db  0x20 ; ' '
000000000000c71e         db  0x7a ; 'z'
000000000000c71f         db  0x0a ; '.'
000000000000c720         db  0x0e ; '.'
000000000000c721         db  0x18 ; '.'
000000000000c722         db  0x41 ; 'A'
000000000000c723         db  0x0e ; '.'
000000000000c724         db  0x10 ; '.'
000000000000c725         db  0x41 ; 'A'
000000000000c726         db  0x0e ; '.'
000000000000c727         db  0x08 ; '.'
000000000000c728         db  0x41 ; 'A'
000000000000c729         db  0x0b ; '.'
000000000000c72a         db  0x00 ; '.'
000000000000c72b         db  0x00 ; '.'
000000000000c72c         db  0x00 ; '.'
000000000000c72d         db  0x00 ; '.'
000000000000c72e         db  0x00 ; '.'
000000000000c72f         db  0x00 ; '.'
000000000000c730         dd         0x00000048                                  ; Length of the record
000000000000c734         dd         0x0000056c                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000c738         db         0x98, 0x94, 2 dup (0xff)                    ; begin 0x5bd0
000000000000c73c         db         0xc4, 0x03, 2 dup (0x00)                    ; length 0x3c4 (end at 0x5f94)
000000000000c740         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000c741         db  0x42 ; 'B'
000000000000c742         db  0x0e ; '.'
000000000000c743         db  0x10 ; '.'
000000000000c744         db  0x8f ; '.'
000000000000c745         db  0x02 ; '.'
000000000000c746         db  0x42 ; 'B'
000000000000c747         db  0x0e ; '.'
000000000000c748         db  0x18 ; '.'
000000000000c749         db  0x8e ; '.'
000000000000c74a         db  0x03 ; '.'
000000000000c74b         db  0x45 ; 'E'
000000000000c74c         db  0x0e ; '.'
000000000000c74d         db  0x20 ; ' '
000000000000c74e         db  0x8d ; '.'
000000000000c74f         db  0x04 ; '.'
000000000000c750         db  0x42 ; 'B'
000000000000c751         db  0x0e ; '.'
000000000000c752         db  0x28 ; '('
000000000000c753         db  0x8c ; '.'
000000000000c754         db  0x05 ; '.'
000000000000c755         db  0x44 ; 'D'
000000000000c756         db  0x0e ; '.'
000000000000c757         db  0x30 ; '0'
000000000000c758         db  0x86 ; '.'
000000000000c759         db  0x06 ; '.'
000000000000c75a         db  0x41 ; 'A'
000000000000c75b         db  0x0e ; '.'
000000000000c75c         db  0x38 ; '8'
000000000000c75d         db  0x83 ; '.'
000000000000c75e         db  0x07 ; '.'
000000000000c75f         db  0x4a ; 'J'
000000000000c760         db  0x0e ; '.'
000000000000c761         db  0x70 ; 'p'
000000000000c762         db  0x03 ; '.'
000000000000c763         db  0x2e ; '.'
000000000000c764         db  0x01 ; '.'
000000000000c765         db  0x0a ; '.'
000000000000c766         db  0x0e ; '.'
000000000000c767         db  0x38 ; '8'
000000000000c768         db  0x44 ; 'D'
000000000000c769         db  0x0e ; '.'
000000000000c76a         db  0x30 ; '0'
000000000000c76b         db  0x41 ; 'A'
000000000000c76c         db  0x0e ; '.'
000000000000c76d         db  0x28 ; '('
000000000000c76e         db  0x42 ; 'B'
000000000000c76f         db  0x0e ; '.'
000000000000c770         db  0x20 ; ' '
000000000000c771         db  0x42 ; 'B'
000000000000c772         db  0x0e ; '.'
000000000000c773         db  0x18 ; '.'
000000000000c774         db  0x42 ; 'B'
000000000000c775         db  0x0e ; '.'
000000000000c776         db  0x10 ; '.'
000000000000c777         db  0x42 ; 'B'
000000000000c778         db  0x0e ; '.'
000000000000c779         db  0x08 ; '.'
000000000000c77a         db  0x4b ; 'K'
000000000000c77b         db  0x0b ; '.'
000000000000c77c         dd         0x00000048                                  ; Length of the record
000000000000c780         dd         0x000005b8                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000c784         db         0x1c, 0x98, 2 dup (0xff)                    ; begin 0x5fa0
000000000000c788         db         0x9d, 3 dup (0x00)                          ; length 0x9d (end at 0x603d)
000000000000c78c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000c78d         db  0x42 ; 'B'
000000000000c78e         db  0x0e ; '.'
000000000000c78f         db  0x10 ; '.'
000000000000c790         db  0x8f ; '.'
000000000000c791         db  0x02 ; '.'
000000000000c792         db  0x42 ; 'B'
000000000000c793         db  0x0e ; '.'
000000000000c794         db  0x18 ; '.'
000000000000c795         db  0x8e ; '.'
000000000000c796         db  0x03 ; '.'
000000000000c797         db  0x45 ; 'E'
000000000000c798         db  0x0e ; '.'
000000000000c799         db  0x20 ; ' '
000000000000c79a         db  0x8d ; '.'
000000000000c79b         db  0x04 ; '.'
000000000000c79c         db  0x42 ; 'B'
000000000000c79d         db  0x0e ; '.'
000000000000c79e         db  0x28 ; '('
000000000000c79f         db  0x8c ; '.'
000000000000c7a0         db  0x05 ; '.'
000000000000c7a1         db  0x44 ; 'D'
000000000000c7a2         db  0x0e ; '.'
000000000000c7a3         db  0x30 ; '0'
000000000000c7a4         db  0x86 ; '.'
000000000000c7a5         db  0x06 ; '.'
000000000000c7a6         db  0x41 ; 'A'
000000000000c7a7         db  0x0e ; '.'
000000000000c7a8         db  0x38 ; '8'
000000000000c7a9         db  0x83 ; '.'
000000000000c7aa         db  0x07 ; '.'
000000000000c7ab         db  0x47 ; 'G'
000000000000c7ac         db  0x0e ; '.'
000000000000c7ad         db  0x50 ; 'P'
000000000000c7ae         db  0x02 ; '.'
000000000000c7af         db  0x59 ; 'Y'
000000000000c7b0         db  0x0a ; '.'
000000000000c7b1         db  0x0e ; '.'
000000000000c7b2         db  0x38 ; '8'
000000000000c7b3         db  0x44 ; 'D'
000000000000c7b4         db  0x0e ; '.'
000000000000c7b5         db  0x30 ; '0'
000000000000c7b6         db  0x41 ; 'A'
000000000000c7b7         db  0x0e ; '.'
000000000000c7b8         db  0x28 ; '('
000000000000c7b9         db  0x42 ; 'B'
000000000000c7ba         db  0x0e ; '.'
000000000000c7bb         db  0x20 ; ' '
000000000000c7bc         db  0x42 ; 'B'
000000000000c7bd         db  0x0e ; '.'
000000000000c7be         db  0x18 ; '.'
000000000000c7bf         db  0x42 ; 'B'
000000000000c7c0         db  0x0e ; '.'
000000000000c7c1         db  0x10 ; '.'
000000000000c7c2         db  0x42 ; 'B'
000000000000c7c3         db  0x0e ; '.'
000000000000c7c4         db  0x08 ; '.'
000000000000c7c5         db  0x43 ; 'C'
000000000000c7c6         db  0x0b ; '.'
000000000000c7c7         db  0x00 ; '.'
000000000000c7c8         dd         0x0000001c                                  ; Length of the record
000000000000c7cc         dd         0x00000604                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000c7d0         db         0x70, 0x98, 2 dup (0xff)                    ; begin 0x6040
000000000000c7d4         db         0x9f, 3 dup (0x00)                          ; length 0x9f (end at 0x60df)
000000000000c7d8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000c7d9         db  0x44 ; 'D'
000000000000c7da         db  0x0e ; '.'
000000000000c7db         db  0x10 ; '.'
000000000000c7dc         db  0x83 ; '.'
000000000000c7dd         db  0x02 ; '.'
000000000000c7de         db  0x02 ; '.'
000000000000c7df         db  0x78 ; 'x'
000000000000c7e0         db  0x0a ; '.'
000000000000c7e1         db  0x0e ; '.'
000000000000c7e2         db  0x08 ; '.'
000000000000c7e3         db  0x41 ; 'A'
000000000000c7e4         db  0x0b ; '.'
000000000000c7e5         db  0x00 ; '.'
000000000000c7e6         db  0x00 ; '.'
000000000000c7e7         db  0x00 ; '.'
000000000000c7e8         dd         0x00000040                                  ; Length of the record
000000000000c7ec         dd         0x00000624                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000c7f0         db         0xf0, 0x98, 2 dup (0xff)                    ; begin 0x60e0
000000000000c7f4         db         0xe7, 3 dup (0x00)                          ; length 0xe7 (end at 0x61c7)
000000000000c7f8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000c7f9         db  0x41 ; 'A'
000000000000c7fa         db  0x0e ; '.'
000000000000c7fb         db  0x10 ; '.'
000000000000c7fc         db  0x86 ; '.'
000000000000c7fd         db  0x02 ; '.'
000000000000c7fe         db  0x41 ; 'A'
000000000000c7ff         db  0x0e ; '.'
000000000000c800         db  0x18 ; '.'
000000000000c801         db  0x83 ; '.'
000000000000c802         db  0x03 ; '.'
000000000000c803         db  0x49 ; 'I'
000000000000c804         db  0x0e ; '.'
000000000000c805         db  0x20 ; ' '
000000000000c806         db  0x6e ; 'n'
000000000000c807         db  0x0a ; '.'
000000000000c808         db  0x0e ; '.'
000000000000c809         db  0x18 ; '.'
000000000000c80a         db  0x41 ; 'A'
000000000000c80b         db  0x0e ; '.'
000000000000c80c         db  0x10 ; '.'
000000000000c80d         db  0x41 ; 'A'
000000000000c80e         db  0x0e ; '.'
000000000000c80f         db  0x08 ; '.'
000000000000c810         db  0x45 ; 'E'
000000000000c811         db  0x0b ; '.'
000000000000c812         db  0x02 ; '.'
000000000000c813         db  0x4a ; 'J'
000000000000c814         db  0x0a ; '.'
000000000000c815         db  0x0e ; '.'
000000000000c816         db  0x18 ; '.'
000000000000c817         db  0x41 ; 'A'
000000000000c818         db  0x0e ; '.'
000000000000c819         db  0x10 ; '.'
000000000000c81a         db  0x41 ; 'A'
000000000000c81b         db  0x0e ; '.'
000000000000c81c         db  0x08 ; '.'
000000000000c81d         db  0x44 ; 'D'
000000000000c81e         db  0x0b ; '.'
000000000000c81f         db  0x02 ; '.'
000000000000c820         db  0x54 ; 'T'
000000000000c821         db  0x0e ; '.'
000000000000c822         db  0x18 ; '.'
000000000000c823         db  0x41 ; 'A'
000000000000c824         db  0x0e ; '.'
000000000000c825         db  0x10 ; '.'
000000000000c826         db  0x41 ; 'A'
000000000000c827         db  0x0e ; '.'
000000000000c828         db  0x08 ; '.'
000000000000c829         db  0x00 ; '.'
000000000000c82a         db  0x00 ; '.'
000000000000c82b         db  0x00 ; '.'
000000000000c82c         dd         0x00000074                                  ; Length of the record
000000000000c830         dd         0x00000668                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000c834         db         0x9c, 0x99, 2 dup (0xff)                    ; begin 0x61d0
000000000000c838         db         0x34, 0x12, 2 dup (0x00)                    ; length 0x1234 (end at 0x7404)
000000000000c83c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000c83d         db  0x42 ; 'B'
000000000000c83e         db  0x0e ; '.'
000000000000c83f         db  0x10 ; '.'
000000000000c840         db  0x8f ; '.'
000000000000c841         db  0x02 ; '.'
000000000000c842         db  0x42 ; 'B'
000000000000c843         db  0x0e ; '.'
000000000000c844         db  0x18 ; '.'
000000000000c845         db  0x8e ; '.'
000000000000c846         db  0x03 ; '.'
000000000000c847         db  0x45 ; 'E'
000000000000c848         db  0x0e ; '.'
000000000000c849         db  0x20 ; ' '
000000000000c84a         db  0x8d ; '.'
000000000000c84b         db  0x04 ; '.'
000000000000c84c         db  0x42 ; 'B'
000000000000c84d         db  0x0e ; '.'
000000000000c84e         db  0x28 ; '('
000000000000c84f         db  0x8c ; '.'
000000000000c850         db  0x05 ; '.'
000000000000c851         db  0x44 ; 'D'
000000000000c852         db  0x0e ; '.'
000000000000c853         db  0x30 ; '0'
000000000000c854         db  0x86 ; '.'
000000000000c855         db  0x06 ; '.'
000000000000c856         db  0x41 ; 'A'
000000000000c857         db  0x0e ; '.'
000000000000c858         db  0x38 ; '8'
000000000000c859         db  0x83 ; '.'
000000000000c85a         db  0x07 ; '.'
000000000000c85b         db  0x53 ; 'S'
000000000000c85c         db  0x0e ; '.'
000000000000c85d         db  0xf0 ; '.'
000000000000c85e         db  0x01 ; '.'
000000000000c85f         db  0x03 ; '.'
000000000000c860         db  0x81 ; '.'
000000000000c861         db  0x0b ; '.'
000000000000c862         db  0x0e ; '.'
000000000000c863         db  0xf8 ; '.'
000000000000c864         db  0x01 ; '.'
000000000000c865         db  0x4a ; 'J'
000000000000c866         db  0x0e ; '.'
000000000000c867         db  0x80 ; '.'
000000000000c868         db  0x02 ; '.'
000000000000c869         db  0x44 ; 'D'
000000000000c86a         db  0x0e ; '.'
000000000000c86b         db  0x88 ; '.'
000000000000c86c         db  0x02 ; '.'
000000000000c86d         db  0x45 ; 'E'
000000000000c86e         db  0x0e ; '.'
000000000000c86f         db  0x90 ; '.'
000000000000c870         db  0x02 ; '.'
000000000000c871         db  0x5f ; '_'
000000000000c872         db  0x0e ; '.'
000000000000c873         db  0xf0 ; '.'
000000000000c874         db  0x01 ; '.'
000000000000c875         db  0x64 ; 'd'
000000000000c876         db  0x0a ; '.'
000000000000c877         db  0x0e ; '.'
000000000000c878         db  0x38 ; '8'
000000000000c879         db  0x41 ; 'A'
000000000000c87a         db  0x0e ; '.'
000000000000c87b         db  0x30 ; '0'
000000000000c87c         db  0x41 ; 'A'
000000000000c87d         db  0x0e ; '.'
000000000000c87e         db  0x28 ; '('
000000000000c87f         db  0x42 ; 'B'
000000000000c880         db  0x0e ; '.'
000000000000c881         db  0x20 ; ' '
000000000000c882         db  0x42 ; 'B'
000000000000c883         db  0x0e ; '.'
000000000000c884         db  0x18 ; '.'
000000000000c885         db  0x42 ; 'B'
000000000000c886         db  0x0e ; '.'
000000000000c887         db  0x10 ; '.'
000000000000c888         db  0x42 ; 'B'
000000000000c889         db  0x0e ; '.'
000000000000c88a         db  0x08 ; '.'
000000000000c88b         db  0x44 ; 'D'
000000000000c88c         db  0x0b ; '.'
000000000000c88d         db  0x03 ; '.'
000000000000c88e         db  0x99 ; '.'
000000000000c88f         db  0x05 ; '.'
000000000000c890         db  0x0e ; '.'
000000000000c891         db  0xf8 ; '.'
000000000000c892         db  0x01 ; '.'
000000000000c893         db  0x4d ; 'M'
000000000000c894         db  0x0e ; '.'
000000000000c895         db  0x80 ; '.'
000000000000c896         db  0x02 ; '.'
000000000000c897         db  0x44 ; 'D'
000000000000c898         db  0x0e ; '.'
000000000000c899         db  0x88 ; '.'
000000000000c89a         db  0x02 ; '.'
000000000000c89b         db  0x47 ; 'G'
000000000000c89c         db  0x0e ; '.'
000000000000c89d         db  0x90 ; '.'
000000000000c89e         db  0x02 ; '.'
000000000000c89f         db  0x5b ; '['
000000000000c8a0         db  0x0e ; '.'
000000000000c8a1         db  0xf0 ; '.'
000000000000c8a2         db  0x01 ; '.'
000000000000c8a3         db  0x00 ; '.'
000000000000c8a4         dd         0x00000068                                  ; Length of the record
000000000000c8a8         dd         0x000006e0                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000c8ac         db         0x64, 0xab, 2 dup (0xff)                    ; begin 0x7410
000000000000c8b0         db         0xab, 0x01, 2 dup (0x00)                    ; length 0x1ab (end at 0x75bb)
000000000000c8b4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000c8b5         db  0x42 ; 'B'
000000000000c8b6         db  0x0e ; '.'
000000000000c8b7         db  0x10 ; '.'
000000000000c8b8         db  0x8f ; '.'
000000000000c8b9         db  0x02 ; '.'
000000000000c8ba         db  0x42 ; 'B'
000000000000c8bb         db  0x0e ; '.'
000000000000c8bc         db  0x18 ; '.'
000000000000c8bd         db  0x8e ; '.'
000000000000c8be         db  0x03 ; '.'
000000000000c8bf         db  0x45 ; 'E'
000000000000c8c0         db  0x0e ; '.'
000000000000c8c1         db  0x20 ; ' '
000000000000c8c2         db  0x8d ; '.'
000000000000c8c3         db  0x04 ; '.'
000000000000c8c4         db  0x42 ; 'B'
000000000000c8c5         db  0x0e ; '.'
000000000000c8c6         db  0x28 ; '('
000000000000c8c7         db  0x8c ; '.'
000000000000c8c8         db  0x05 ; '.'
000000000000c8c9         db  0x44 ; 'D'
000000000000c8ca         db  0x0e ; '.'
000000000000c8cb         db  0x30 ; '0'
000000000000c8cc         db  0x86 ; '.'
000000000000c8cd         db  0x06 ; '.'
000000000000c8ce         db  0x41 ; 'A'
000000000000c8cf         db  0x0e ; '.'
000000000000c8d0         db  0x38 ; '8'
000000000000c8d1         db  0x83 ; '.'
000000000000c8d2         db  0x07 ; '.'
000000000000c8d3         db  0x47 ; 'G'
000000000000c8d4         db  0x0e ; '.'
000000000000c8d5         db  0x60 ; '`'
000000000000c8d6         db  0x02 ; '.'
000000000000c8d7         db  0x99 ; '.'
000000000000c8d8         db  0x0e ; '.'
000000000000c8d9         db  0x68 ; 'h'
000000000000c8da         db  0x5f ; '_'
000000000000c8db         db  0x0e ; '.'
000000000000c8dc         db  0x70 ; 'p'
000000000000c8dd         db  0x46 ; 'F'
000000000000c8de         db  0x0e ; '.'
000000000000c8df         db  0x78 ; 'x'
000000000000c8e0         db  0x42 ; 'B'
000000000000c8e1         db  0x0e ; '.'
000000000000c8e2         db  0x80 ; '.'
000000000000c8e3         db  0x01 ; '.'
000000000000c8e4         db  0x59 ; 'Y'
000000000000c8e5         db  0x0e ; '.'
000000000000c8e6         db  0x60 ; '`'
000000000000c8e7         db  0x02 ; '.'
000000000000c8e8         db  0x40 ; '@'
000000000000c8e9         db  0x0e ; '.'
000000000000c8ea         db  0x68 ; 'h'
000000000000c8eb         db  0x4b ; 'K'
000000000000c8ec         db  0x0e ; '.'
000000000000c8ed         db  0x70 ; 'p'
000000000000c8ee         db  0x43 ; 'C'
000000000000c8ef         db  0x0e ; '.'
000000000000c8f0         db  0x78 ; 'x'
000000000000c8f1         db  0x45 ; 'E'
000000000000c8f2         db  0x0e ; '.'
000000000000c8f3         db  0x80 ; '.'
000000000000c8f4         db  0x01 ; '.'
000000000000c8f5         db  0x5e ; '^'
000000000000c8f6         db  0x0e ; '.'
000000000000c8f7         db  0x60 ; '`'
000000000000c8f8         db  0x4c ; 'L'
000000000000c8f9         db  0x0a ; '.'
000000000000c8fa         db  0x0e ; '.'
000000000000c8fb         db  0x38 ; '8'
000000000000c8fc         db  0x44 ; 'D'
000000000000c8fd         db  0x0e ; '.'
000000000000c8fe         db  0x30 ; '0'
000000000000c8ff         db  0x41 ; 'A'
000000000000c900         db  0x0e ; '.'
000000000000c901         db  0x28 ; '('
000000000000c902         db  0x42 ; 'B'
000000000000c903         db  0x0e ; '.'
000000000000c904         db  0x20 ; ' '
000000000000c905         db  0x42 ; 'B'
000000000000c906         db  0x0e ; '.'
000000000000c907         db  0x18 ; '.'
000000000000c908         db  0x42 ; 'B'
000000000000c909         db  0x0e ; '.'
000000000000c90a         db  0x10 ; '.'
000000000000c90b         db  0x42 ; 'B'
000000000000c90c         db  0x0e ; '.'
000000000000c90d         db  0x08 ; '.'
000000000000c90e         db  0x46 ; 'F'
000000000000c90f         db  0x0b ; '.'
000000000000c910         dd         0x00000028                                  ; Length of the record
000000000000c914         dd         0x0000074c                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000c918         db         0xa8, 0xac, 2 dup (0xff)                    ; begin 0x75c0
000000000000c91c         db         0x36, 3 dup (0x00)                          ; length 0x36 (end at 0x75f6)
000000000000c920         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000c921         db  0x42 ; 'B'
000000000000c922         db  0x0e ; '.'
000000000000c923         db  0x10 ; '.'
000000000000c924         db  0x8c ; '.'
000000000000c925         db  0x02 ; '.'
000000000000c926         db  0x41 ; 'A'
000000000000c927         db  0x0e ; '.'
000000000000c928         db  0x18 ; '.'
000000000000c929         db  0x86 ; '.'
000000000000c92a         db  0x03 ; '.'
000000000000c92b         db  0x41 ; 'A'
000000000000c92c         db  0x0e ; '.'
000000000000c92d         db  0x20 ; ' '
000000000000c92e         db  0x83 ; '.'
000000000000c92f         db  0x04 ; '.'
000000000000c930         db  0x6e ; 'n'
000000000000c931         db  0x0e ; '.'
000000000000c932         db  0x18 ; '.'
000000000000c933         db  0x41 ; 'A'
000000000000c934         db  0x0e ; '.'
000000000000c935         db  0x10 ; '.'
000000000000c936         db  0x42 ; 'B'
000000000000c937         db  0x0e ; '.'
000000000000c938         db  0x08 ; '.'
000000000000c939         db  0x00 ; '.'
000000000000c93a         db  0x00 ; '.'
000000000000c93b         db  0x00 ; '.'
000000000000c93c         dd         0x00000010                                  ; Length of the record
000000000000c940         dd         0x00000778                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000c944         db         0xbc, 0xac, 2 dup (0xff)                    ; begin 0x7600
000000000000c948         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0x7611)
000000000000c94c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000c94d         align      16
000000000000c950         dd         0x00000010                                  ; Length of the record
000000000000c954         dd         0x0000078c                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000c958         db         0xc8, 0xac, 2 dup (0xff)                    ; begin 0x7620
000000000000c95c         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0x7631)
000000000000c960         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000c961         align      4
000000000000c964         dd         0x00000010                                  ; Length of the record
000000000000c968         dd         0x000007a0                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000c96c         db         0xd4, 0xac, 2 dup (0xff)                    ; begin 0x7640
000000000000c970         db         0x35, 3 dup (0x00)                          ; length 0x35 (end at 0x7675)
000000000000c974         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000c975         align      8
000000000000c978         dd         0x00000010                                  ; Length of the record
000000000000c97c         dd         0x000007b4                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000c980         db         0x00, 0xad, 2 dup (0xff)                    ; begin 0x7680
000000000000c984         db         0x15, 3 dup (0x00)                          ; length 0x15 (end at 0x7695)
000000000000c988         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000c989         align      4
000000000000c98c         dd         0x00000010                                  ; Length of the record
000000000000c990         dd         0x000007c8                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000c994         db         0x0c, 0xad, 2 dup (0xff)                    ; begin 0x76a0
000000000000c998         db         0x30, 3 dup (0x00)                          ; length 0x30 (end at 0x76d0)
000000000000c99c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000c99d         db  0x6b ; 'k'
000000000000c99e         db  0x0e ; '.'
000000000000c99f         db  0x10 ; '.'
000000000000c9a0         dd         0x00000050                                  ; Length of the record
000000000000c9a4         dd         0x000007dc                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000c9a8         db         0x28, 0xad, 2 dup (0xff)                    ; begin 0x76d0
000000000000c9ac         db         0x74, 3 dup (0x00)                          ; length 0x74 (end at 0x7744)
000000000000c9b0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000c9b1         db  0x42 ; 'B'
000000000000c9b2         db  0x0e ; '.'
000000000000c9b3         db  0x10 ; '.'
000000000000c9b4         db  0x8f ; '.'
000000000000c9b5         db  0x02 ; '.'
000000000000c9b6         db  0x42 ; 'B'
000000000000c9b7         db  0x0e ; '.'
000000000000c9b8         db  0x18 ; '.'
000000000000c9b9         db  0x8e ; '.'
000000000000c9ba         db  0x03 ; '.'
000000000000c9bb         db  0x49 ; 'I'
000000000000c9bc         db  0x0e ; '.'
000000000000c9bd         db  0x20 ; ' '
000000000000c9be         db  0x8d ; '.'
000000000000c9bf         db  0x04 ; '.'
000000000000c9c0         db  0x42 ; 'B'
000000000000c9c1         db  0x0e ; '.'
000000000000c9c2         db  0x28 ; '('
000000000000c9c3         db  0x8c ; '.'
000000000000c9c4         db  0x05 ; '.'
000000000000c9c5         db  0x44 ; 'D'
000000000000c9c6         db  0x0e ; '.'
000000000000c9c7         db  0x30 ; '0'
000000000000c9c8         db  0x86 ; '.'
000000000000c9c9         db  0x06 ; '.'
000000000000c9ca         db  0x41 ; 'A'
000000000000c9cb         db  0x0e ; '.'
000000000000c9cc         db  0x38 ; '8'
000000000000c9cd         db  0x83 ; '.'
000000000000c9ce         db  0x07 ; '.'
000000000000c9cf         db  0x4d ; 'M'
000000000000c9d0         db  0x0e ; '.'
000000000000c9d1         db  0x50 ; 'P'
000000000000c9d2         db  0x5f ; '_'
000000000000c9d3         db  0x0e ; '.'
000000000000c9d4         db  0x58 ; 'X'
000000000000c9d5         db  0x47 ; 'G'
000000000000c9d6         db  0x0e ; '.'
000000000000c9d7         db  0x60 ; '`'
000000000000c9d8         db  0x46 ; 'F'
000000000000c9d9         db  0x0e ; '.'
000000000000c9da         db  0x68 ; 'h'
000000000000c9db         db  0x44 ; 'D'
000000000000c9dc         db  0x0e ; '.'
000000000000c9dd         db  0x70 ; 'p'
000000000000c9de         db  0x58 ; 'X'
000000000000c9df         db  0x0e ; '.'
000000000000c9e0         db  0x38 ; '8'
000000000000c9e1         db  0x41 ; 'A'
000000000000c9e2         db  0x0e ; '.'
000000000000c9e3         db  0x30 ; '0'
000000000000c9e4         db  0x41 ; 'A'
000000000000c9e5         db  0x0e ; '.'
000000000000c9e6         db  0x28 ; '('
000000000000c9e7         db  0x42 ; 'B'
000000000000c9e8         db  0x0e ; '.'
000000000000c9e9         db  0x20 ; ' '
000000000000c9ea         db  0x42 ; 'B'
000000000000c9eb         db  0x0e ; '.'
000000000000c9ec         db  0x18 ; '.'
000000000000c9ed         db  0x42 ; 'B'
000000000000c9ee         db  0x0e ; '.'
000000000000c9ef         db  0x10 ; '.'
000000000000c9f0         db  0x42 ; 'B'
000000000000c9f1         db  0x0e ; '.'
000000000000c9f2         db  0x08 ; '.'
000000000000c9f3         db  0x00 ; '.'
000000000000c9f4         dd         0x00000068                                  ; Length of the record
000000000000c9f8         dd         0x00000830                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000c9fc         db         0x54, 0xad, 2 dup (0xff)                    ; begin 0x7750
000000000000ca00         db         0xe3, 3 dup (0x00)                          ; length 0xe3 (end at 0x7833)
000000000000ca04         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ca05         db  0x42 ; 'B'
000000000000ca06         db  0x0e ; '.'
000000000000ca07         db  0x10 ; '.'
000000000000ca08         db  0x8f ; '.'
000000000000ca09         db  0x02 ; '.'
000000000000ca0a         db  0x42 ; 'B'
000000000000ca0b         db  0x0e ; '.'
000000000000ca0c         db  0x18 ; '.'
000000000000ca0d         db  0x8e ; '.'
000000000000ca0e         db  0x03 ; '.'
000000000000ca0f         db  0x49 ; 'I'
000000000000ca10         db  0x0e ; '.'
000000000000ca11         db  0x20 ; ' '
000000000000ca12         db  0x8d ; '.'
000000000000ca13         db  0x04 ; '.'
000000000000ca14         db  0x42 ; 'B'
000000000000ca15         db  0x0e ; '.'
000000000000ca16         db  0x28 ; '('
000000000000ca17         db  0x8c ; '.'
000000000000ca18         db  0x05 ; '.'
000000000000ca19         db  0x44 ; 'D'
000000000000ca1a         db  0x0e ; '.'
000000000000ca1b         db  0x30 ; '0'
000000000000ca1c         db  0x86 ; '.'
000000000000ca1d         db  0x06 ; '.'
000000000000ca1e         db  0x41 ; 'A'
000000000000ca1f         db  0x0e ; '.'
000000000000ca20         db  0x38 ; '8'
000000000000ca21         db  0x83 ; '.'
000000000000ca22         db  0x07 ; '.'
000000000000ca23         db  0x4d ; 'M'
000000000000ca24         db  0x0e ; '.'
000000000000ca25         db  0x70 ; 'p'
000000000000ca26         db  0x65 ; 'e'
000000000000ca27         db  0x0e ; '.'
000000000000ca28         db  0x78 ; 'x'
000000000000ca29         db  0x4d ; 'M'
000000000000ca2a         db  0x0e ; '.'
000000000000ca2b         db  0x80 ; '.'
000000000000ca2c         db  0x01 ; '.'
000000000000ca2d         db  0x46 ; 'F'
000000000000ca2e         db  0x0e ; '.'
000000000000ca2f         db  0x88 ; '.'
000000000000ca30         db  0x01 ; '.'
000000000000ca31         db  0x42 ; 'B'
000000000000ca32         db  0x0e ; '.'
000000000000ca33         db  0x90 ; '.'
000000000000ca34         db  0x01 ; '.'
000000000000ca35         db  0x5e ; '^'
000000000000ca36         db  0x0e ; '.'
000000000000ca37         db  0x70 ; 'p'
000000000000ca38         db  0x56 ; 'V'
000000000000ca39         db  0x0e ; '.'
000000000000ca3a         db  0x78 ; 'x'
000000000000ca3b         db  0x43 ; 'C'
000000000000ca3c         db  0x0e ; '.'
000000000000ca3d         db  0x80 ; '.'
000000000000ca3e         db  0x01 ; '.'
000000000000ca3f         db  0x43 ; 'C'
000000000000ca40         db  0x0e ; '.'
000000000000ca41         db  0x88 ; '.'
000000000000ca42         db  0x01 ; '.'
000000000000ca43         db  0x56 ; 'V'
000000000000ca44         db  0x0e ; '.'
000000000000ca45         db  0x90 ; '.'
000000000000ca46         db  0x01 ; '.'
000000000000ca47         db  0x52 ; 'R'
000000000000ca48         db  0x0e ; '.'
000000000000ca49         db  0x70 ; 'p'
000000000000ca4a         db  0x5b ; '['
000000000000ca4b         db  0x0e ; '.'
000000000000ca4c         db  0x38 ; '8'
000000000000ca4d         db  0x41 ; 'A'
000000000000ca4e         db  0x0e ; '.'
000000000000ca4f         db  0x30 ; '0'
000000000000ca50         db  0x41 ; 'A'
000000000000ca51         db  0x0e ; '.'
000000000000ca52         db  0x28 ; '('
000000000000ca53         db  0x42 ; 'B'
000000000000ca54         db  0x0e ; '.'
000000000000ca55         db  0x20 ; ' '
000000000000ca56         db  0x42 ; 'B'
000000000000ca57         db  0x0e ; '.'
000000000000ca58         db  0x18 ; '.'
000000000000ca59         db  0x42 ; 'B'
000000000000ca5a         db  0x0e ; '.'
000000000000ca5b         db  0x10 ; '.'
000000000000ca5c         db  0x42 ; 'B'
000000000000ca5d         db  0x0e ; '.'
000000000000ca5e         db  0x08 ; '.'
000000000000ca5f         db  0x00 ; '.'
000000000000ca60         dd         0x00000010                                  ; Length of the record
000000000000ca64         dd         0x0000089c                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000ca68         db         0xd8, 0xad, 2 dup (0xff)                    ; begin 0x7840
000000000000ca6c         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0x784a)
000000000000ca70         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ca71         align      4
000000000000ca74         dd         0x00000028                                  ; Length of the record
000000000000ca78         dd         0x000008b0                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000ca7c         db         0xd4, 0xad, 2 dup (0xff)                    ; begin 0x7850
000000000000ca80         db         0x93, 3 dup (0x00)                          ; length 0x93 (end at 0x78e3)
000000000000ca84         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ca85         db  0x48 ; 'H'
000000000000ca86         db  0x0e ; '.'
000000000000ca87         db  0x10 ; '.'
000000000000ca88         db  0x8c ; '.'
000000000000ca89         db  0x02 ; '.'
000000000000ca8a         db  0x48 ; 'H'
000000000000ca8b         db  0x0e ; '.'
000000000000ca8c         db  0x18 ; '.'
000000000000ca8d         db  0x86 ; '.'
000000000000ca8e         db  0x03 ; '.'
000000000000ca8f         db  0x41 ; 'A'
000000000000ca90         db  0x0e ; '.'
000000000000ca91         db  0x20 ; ' '
000000000000ca92         db  0x83 ; '.'
000000000000ca93         db  0x04 ; '.'
000000000000ca94         db  0x02 ; '.'
000000000000ca95         db  0x74 ; 't'
000000000000ca96         db  0x0e ; '.'
000000000000ca97         db  0x18 ; '.'
000000000000ca98         db  0x4b ; 'K'
000000000000ca99         db  0x0e ; '.'
000000000000ca9a         db  0x10 ; '.'
000000000000ca9b         db  0x42 ; 'B'
000000000000ca9c         db  0x0e ; '.'
000000000000ca9d         db  0x08 ; '.'
000000000000ca9e         db  0x00 ; '.'
000000000000ca9f         db  0x00 ; '.'
000000000000caa0         dd         0x00000010                                  ; Length of the record
000000000000caa4         dd         0x000008dc                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000caa8         db         0x48, 0xae, 2 dup (0xff)                    ; begin 0x78f0
000000000000caac         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x7903)
000000000000cab0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cab1         align      4
000000000000cab4         dd         0x00000010                                  ; Length of the record
000000000000cab8         dd         0x000008f0                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000cabc         db         0x54, 0xae, 2 dup (0xff)                    ; begin 0x7910
000000000000cac0         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x791c)
000000000000cac4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cac5         align      8
000000000000cac8         dd         0x00000010                                  ; Length of the record
000000000000cacc         dd         0x00000904                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000cad0         db         0x50, 0xae, 2 dup (0xff)                    ; begin 0x7920
000000000000cad4         db         0x18, 3 dup (0x00)                          ; length 0x18 (end at 0x7938)
000000000000cad8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cad9         align      4
000000000000cadc         dd         0x00000010                                  ; Length of the record
000000000000cae0         dd         0x00000918                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000cae4         db         0x5c, 0xae, 2 dup (0xff)                    ; begin 0x7940
000000000000cae8         db         0x14, 3 dup (0x00)                          ; length 0x14 (end at 0x7954)
000000000000caec         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000caed         align      16
000000000000caf0         dd         0x00000018                                  ; Length of the record
000000000000caf4         dd         0x0000092c                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000caf8         db         0x68, 0xae, 2 dup (0xff)                    ; begin 0x7960
000000000000cafc         db         0x8e, 3 dup (0x00)                          ; length 0x8e (end at 0x79ee)
000000000000cb00         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cb01         db  0x44 ; 'D'
000000000000cb02         db  0x0e ; '.'
000000000000cb03         db  0x50 ; 'P'
000000000000cb04         db  0x02 ; '.'
000000000000cb05         db  0x7f ; '.'
000000000000cb06         db  0x0a ; '.'
000000000000cb07         db  0x0e ; '.'
000000000000cb08         db  0x08 ; '.'
000000000000cb09         db  0x41 ; 'A'
000000000000cb0a         db  0x0b ; '.'
000000000000cb0b         db  0x00 ; '.'
000000000000cb0c         dd         0x00000018                                  ; Length of the record
000000000000cb10         dd         0x00000948                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000cb14         db         0xdc, 0xae, 2 dup (0xff)                    ; begin 0x79f0
000000000000cb18         db         0x8a, 3 dup (0x00)                          ; length 0x8a (end at 0x7a7a)
000000000000cb1c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cb1d         db  0x44 ; 'D'
000000000000cb1e         db  0x0e ; '.'
000000000000cb1f         db  0x50 ; 'P'
000000000000cb20         db  0x02 ; '.'
000000000000cb21         db  0x7b ; '{'
000000000000cb22         db  0x0a ; '.'
000000000000cb23         db  0x0e ; '.'
000000000000cb24         db  0x08 ; '.'
000000000000cb25         db  0x41 ; 'A'
000000000000cb26         db  0x0b ; '.'
000000000000cb27         db  0x00 ; '.'
000000000000cb28         dd         0x00000010                                  ; Length of the record
000000000000cb2c         dd         0x00000964                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000cb30         db         0x50, 0xaf, 2 dup (0xff)                    ; begin 0x7a80
000000000000cb34         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x7a8c)
000000000000cb38         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cb39         align      4
000000000000cb3c         dd         0x00000010                                  ; Length of the record
000000000000cb40         dd         0x00000978                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000cb44         db         0x4c, 0xaf, 2 dup (0xff)                    ; begin 0x7a90
000000000000cb48         db         0x0f, 3 dup (0x00)                          ; length 0xf (end at 0x7a9f)
000000000000cb4c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cb4d         align      16
000000000000cb50         dd         0x00000018                                  ; Length of the record
000000000000cb54         dd         0x0000098c                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000cb58         db         0x48, 0xaf, 2 dup (0xff)                    ; begin 0x7aa0
000000000000cb5c         db         0x98, 3 dup (0x00)                          ; length 0x98 (end at 0x7b38)
000000000000cb60         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cb61         db  0x44 ; 'D'
000000000000cb62         db  0x0e ; '.'
000000000000cb63         db  0x50 ; 'P'
000000000000cb64         db  0x02 ; '.'
000000000000cb65         db  0x8e ; '.'
000000000000cb66         db  0x0a ; '.'
000000000000cb67         db  0x0e ; '.'
000000000000cb68         db  0x08 ; '.'
000000000000cb69         db  0x41 ; 'A'
000000000000cb6a         db  0x0b ; '.'
000000000000cb6b         db  0x00 ; '.'
000000000000cb6c         dd         0x00000010                                  ; Length of the record
000000000000cb70         dd         0x000009a8                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000cb74         db         0xcc, 0xaf, 2 dup (0xff)                    ; begin 0x7b40
000000000000cb78         db         0x10, 3 dup (0x00)                          ; length 0x10 (end at 0x7b50)
000000000000cb7c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cb7d         align      128
000000000000cb80         dd         0x00000010                                  ; Length of the record
000000000000cb84         dd         0x000009bc                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000cb88         db         0xc8, 0xaf, 2 dup (0xff)                    ; begin 0x7b50
000000000000cb8c         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0x7b61)
000000000000cb90         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cb91         align      4
000000000000cb94         dd         0x00000010                                  ; Length of the record
000000000000cb98         dd         0x000009d0                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000cb9c         db         0xd4, 0xaf, 2 dup (0xff)                    ; begin 0x7b70
000000000000cba0         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0x7b7a)
000000000000cba4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cba5         align      8
000000000000cba8         dd         0x00000018                                  ; Length of the record
000000000000cbac         dd         0x000009e4                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000cbb0         db         0xd0, 0xaf, 2 dup (0xff)                    ; begin 0x7b80
000000000000cbb4         db         0x8e, 3 dup (0x00)                          ; length 0x8e (end at 0x7c0e)
000000000000cbb8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cbb9         db  0x44 ; 'D'
000000000000cbba         db  0x0e ; '.'
000000000000cbbb         db  0x50 ; 'P'
000000000000cbbc         db  0x02 ; '.'
000000000000cbbd         db  0x7f ; '.'
000000000000cbbe         db  0x0a ; '.'
000000000000cbbf         db  0x0e ; '.'
000000000000cbc0         db  0x08 ; '.'
000000000000cbc1         db  0x41 ; 'A'
000000000000cbc2         db  0x0b ; '.'
000000000000cbc3         db  0x00 ; '.'
000000000000cbc4         dd         0x00000018                                  ; Length of the record
000000000000cbc8         dd         0x00000a00                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000cbcc         db         0x44, 0xb0, 2 dup (0xff)                    ; begin 0x7c10
000000000000cbd0         db         0x91, 3 dup (0x00)                          ; length 0x91 (end at 0x7ca1)
000000000000cbd4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cbd5         db  0x44 ; 'D'
000000000000cbd6         db  0x0e ; '.'
000000000000cbd7         db  0x50 ; 'P'
000000000000cbd8         db  0x02 ; '.'
000000000000cbd9         db  0x82 ; '.'
000000000000cbda         db  0x0a ; '.'
000000000000cbdb         db  0x0e ; '.'
000000000000cbdc         db  0x08 ; '.'
000000000000cbdd         db  0x41 ; 'A'
000000000000cbde         db  0x0b ; '.'
000000000000cbdf         db  0x00 ; '.'
000000000000cbe0         dd         0x00000010                                  ; Length of the record
000000000000cbe4         dd         0x00000a1c                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000cbe8         db         0xc8, 0xb0, 2 dup (0xff)                    ; begin 0x7cb0
000000000000cbec         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x7cbc)
000000000000cbf0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cbf1         align      4
000000000000cbf4         dd         0x00000010                                  ; Length of the record
000000000000cbf8         dd         0x00000a30                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000cbfc         db         0xc4, 0xb0, 2 dup (0xff)                    ; begin 0x7cc0
000000000000cc00         db         0x17, 3 dup (0x00)                          ; length 0x17 (end at 0x7cd7)
000000000000cc04         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cc05         align      8
000000000000cc08         dd         0x00000010                                  ; Length of the record
000000000000cc0c         dd         0x00000a44                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000cc10         db         0xd0, 0xb0, 2 dup (0xff)                    ; begin 0x7ce0
000000000000cc14         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x7cf3)
000000000000cc18         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cc19         align      4
000000000000cc1c         dd         0x00000010                                  ; Length of the record
000000000000cc20         dd         0x00000a58                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000cc24         db         0xdc, 0xb0, 2 dup (0xff)                    ; begin 0x7d00
000000000000cc28         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x7d0c)
000000000000cc2c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cc2d         align      16
000000000000cc30         dd         0x00000010                                  ; Length of the record
000000000000cc34         dd         0x00000a6c                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000cc38         db         0xd8, 0xb0, 2 dup (0xff)                    ; begin 0x7d10
000000000000cc3c         db         0x14, 3 dup (0x00)                          ; length 0x14 (end at 0x7d24)
000000000000cc40         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cc41         align      4
000000000000cc44         dd         0x00000010                                  ; Length of the record
000000000000cc48         dd         0x00000a80                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000cc4c         db         0xe4, 0xb0, 2 dup (0xff)                    ; begin 0x7d30
000000000000cc50         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x7d43)
000000000000cc54         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cc55         align      8
000000000000cc58         dd         0x00000014                                  ; Length of the record
000000000000cc5c         dd         0x00000a94                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000cc60         db         0xf0, 0xb0, 2 dup (0xff)                    ; begin 0x7d50
000000000000cc64         db         0x18, 3 dup (0x00)                          ; length 0x18 (end at 0x7d68)
000000000000cc68         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cc69         align      16
000000000000cc70         dd         0x00000110                                  ; Length of the record
000000000000cc74         dd         0x00000aac                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000cc78         db         0xf8, 0xb0, 2 dup (0xff)                    ; begin 0x7d70
000000000000cc7c         db         0x17, 0x04, 2 dup (0x00)                    ; length 0x417 (end at 0x8187)
000000000000cc80         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cc81         db  0x42 ; 'B'
000000000000cc82         db  0x0e ; '.'
000000000000cc83         db  0x10 ; '.'
000000000000cc84         db  0x8f ; '.'
000000000000cc85         db  0x02 ; '.'
000000000000cc86         db  0x42 ; 'B'
000000000000cc87         db  0x0e ; '.'
000000000000cc88         db  0x18 ; '.'
000000000000cc89         db  0x8e ; '.'
000000000000cc8a         db  0x03 ; '.'
000000000000cc8b         db  0x42 ; 'B'
000000000000cc8c         db  0x0e ; '.'
000000000000cc8d         db  0x20 ; ' '
000000000000cc8e         db  0x8d ; '.'
000000000000cc8f         db  0x04 ; '.'
000000000000cc90         db  0x42 ; 'B'
000000000000cc91         db  0x0e ; '.'
000000000000cc92         db  0x28 ; '('
000000000000cc93         db  0x8c ; '.'
000000000000cc94         db  0x05 ; '.'
000000000000cc95         db  0x44 ; 'D'
000000000000cc96         db  0x0e ; '.'
000000000000cc97         db  0x30 ; '0'
000000000000cc98         db  0x86 ; '.'
000000000000cc99         db  0x06 ; '.'
000000000000cc9a         db  0x41 ; 'A'
000000000000cc9b         db  0x0e ; '.'
000000000000cc9c         db  0x38 ; '8'
000000000000cc9d         db  0x83 ; '.'
000000000000cc9e         db  0x07 ; '.'
000000000000cc9f         db  0x4a ; 'J'
000000000000cca0         db  0x0e ; '.'
000000000000cca1         db  0x60 ; '`'
000000000000cca2         db  0x02 ; '.'
000000000000cca3         db  0xdd ; '.'
000000000000cca4         db  0x0e ; '.'
000000000000cca5         db  0x68 ; 'h'
000000000000cca6         db  0x57 ; 'W'
000000000000cca7         db  0x0e ; '.'
000000000000cca8         db  0x70 ; 'p'
000000000000cca9         db  0x42 ; 'B'
000000000000ccaa         db  0x0e ; '.'
000000000000ccab         db  0x78 ; 'x'
000000000000ccac         db  0x42 ; 'B'
000000000000ccad         db  0x0e ; '.'
000000000000ccae         db  0x80 ; '.'
000000000000ccaf         db  0x01 ; '.'
000000000000ccb0         db  0x42 ; 'B'
000000000000ccb1         db  0x0e ; '.'
000000000000ccb2         db  0x88 ; '.'
000000000000ccb3         db  0x01 ; '.'
000000000000ccb4         db  0x42 ; 'B'
000000000000ccb5         db  0x0e ; '.'
000000000000ccb6         db  0x90 ; '.'
000000000000ccb7         db  0x01 ; '.'
000000000000ccb8         db  0x53 ; 'S'
000000000000ccb9         db  0x0e ; '.'
000000000000ccba         db  0x60 ; '`'
000000000000ccbb         db  0x44 ; 'D'
000000000000ccbc         db  0x0a ; '.'
000000000000ccbd         db  0x0e ; '.'
000000000000ccbe         db  0x38 ; '8'
000000000000ccbf         db  0x41 ; 'A'
000000000000ccc0         db  0x0e ; '.'
000000000000ccc1         db  0x30 ; '0'
000000000000ccc2         db  0x41 ; 'A'
000000000000ccc3         db  0x0e ; '.'
000000000000ccc4         db  0x28 ; '('
000000000000ccc5         db  0x42 ; 'B'
000000000000ccc6         db  0x0e ; '.'
000000000000ccc7         db  0x20 ; ' '
000000000000ccc8         db  0x42 ; 'B'
000000000000ccc9         db  0x0e ; '.'
000000000000ccca         db  0x18 ; '.'
000000000000cccb         db  0x42 ; 'B'
000000000000cccc         db  0x0e ; '.'
000000000000cccd         db  0x10 ; '.'
000000000000ccce         db  0x42 ; 'B'
000000000000cccf         db  0x0e ; '.'
000000000000ccd0         db  0x08 ; '.'
000000000000ccd1         db  0x44 ; 'D'
000000000000ccd2         db  0x0b ; '.'
000000000000ccd3         db  0x02 ; '.'
000000000000ccd4         db  0x78 ; 'x'
000000000000ccd5         db  0x0a ; '.'
000000000000ccd6         db  0x0e ; '.'
000000000000ccd7         db  0x68 ; 'h'
000000000000ccd8         db  0x48 ; 'H'
000000000000ccd9         db  0x0b ; '.'
000000000000ccda         db  0x5a ; 'Z'
000000000000ccdb         db  0x0a ; '.'
000000000000ccdc         db  0x0e ; '.'
000000000000ccdd         db  0x38 ; '8'
000000000000ccde         db  0x47 ; 'G'
000000000000ccdf         db  0x0e ; '.'
000000000000cce0         db  0x30 ; '0'
000000000000cce1         db  0x41 ; 'A'
000000000000cce2         db  0x0e ; '.'
000000000000cce3         db  0x28 ; '('
000000000000cce4         db  0x42 ; 'B'
000000000000cce5         db  0x0e ; '.'
000000000000cce6         db  0x20 ; ' '
000000000000cce7         db  0x42 ; 'B'
000000000000cce8         db  0x0e ; '.'
000000000000cce9         db  0x18 ; '.'
000000000000ccea         db  0x42 ; 'B'
000000000000cceb         db  0x0e ; '.'
000000000000ccec         db  0x10 ; '.'
000000000000cced         db  0x42 ; 'B'
000000000000ccee         db  0x0e ; '.'
000000000000ccef         db  0x08 ; '.'
000000000000ccf0         db  0x56 ; 'V'
000000000000ccf1         db  0x0b ; '.'
000000000000ccf2         db  0x5e ; '^'
000000000000ccf3         db  0x0a ; '.'
000000000000ccf4         db  0x0e ; '.'
000000000000ccf5         db  0x38 ; '8'
000000000000ccf6         db  0x52 ; 'R'
000000000000ccf7         db  0x0e ; '.'
000000000000ccf8         db  0x30 ; '0'
000000000000ccf9         db  0x41 ; 'A'
000000000000ccfa         db  0x0e ; '.'
000000000000ccfb         db  0x28 ; '('
000000000000ccfc         db  0x42 ; 'B'
000000000000ccfd         db  0x0e ; '.'
000000000000ccfe         db  0x20 ; ' '
000000000000ccff         db  0x42 ; 'B'
000000000000cd00         db  0x0e ; '.'
000000000000cd01         db  0x18 ; '.'
000000000000cd02         db  0x42 ; 'B'
000000000000cd03         db  0x0e ; '.'
000000000000cd04         db  0x10 ; '.'
000000000000cd05         db  0x42 ; 'B'
000000000000cd06         db  0x0e ; '.'
000000000000cd07         db  0x08 ; '.'
000000000000cd08         db  0x4f ; 'O'
000000000000cd09         db  0x0b ; '.'
000000000000cd0a         db  0x62 ; 'b'
000000000000cd0b         db  0x0a ; '.'
000000000000cd0c         db  0x0e ; '.'
000000000000cd0d         db  0x38 ; '8'
000000000000cd0e         db  0x50 ; 'P'
000000000000cd0f         db  0x0e ; '.'
000000000000cd10         db  0x30 ; '0'
000000000000cd11         db  0x41 ; 'A'
000000000000cd12         db  0x0e ; '.'
000000000000cd13         db  0x28 ; '('
000000000000cd14         db  0x42 ; 'B'
000000000000cd15         db  0x0e ; '.'
000000000000cd16         db  0x20 ; ' '
000000000000cd17         db  0x42 ; 'B'
000000000000cd18         db  0x0e ; '.'
000000000000cd19         db  0x18 ; '.'
000000000000cd1a         db  0x42 ; 'B'
000000000000cd1b         db  0x0e ; '.'
000000000000cd1c         db  0x10 ; '.'
000000000000cd1d         db  0x42 ; 'B'
000000000000cd1e         db  0x0e ; '.'
000000000000cd1f         db  0x08 ; '.'
000000000000cd20         db  0x55 ; 'U'
000000000000cd21         db  0x0b ; '.'
000000000000cd22         db  0x66 ; 'f'
000000000000cd23         db  0x0e ; '.'
000000000000cd24         db  0x68 ; 'h'
000000000000cd25         db  0x42 ; 'B'
000000000000cd26         db  0x0e ; '.'
000000000000cd27         db  0x70 ; 'p'
000000000000cd28         db  0x5c ; '\'
000000000000cd29         db  0x0e ; '.'
000000000000cd2a         db  0x68 ; 'h'
000000000000cd2b         db  0x41 ; 'A'
000000000000cd2c         db  0x0e ; '.'
000000000000cd2d         db  0x60 ; '`'
000000000000cd2e         db  0x44 ; 'D'
000000000000cd2f         db  0x0a ; '.'
000000000000cd30         db  0x0e ; '.'
000000000000cd31         db  0x38 ; '8'
000000000000cd32         db  0x41 ; 'A'
000000000000cd33         db  0x0e ; '.'
000000000000cd34         db  0x30 ; '0'
000000000000cd35         db  0x41 ; 'A'
000000000000cd36         db  0x0e ; '.'
000000000000cd37         db  0x28 ; '('
000000000000cd38         db  0x42 ; 'B'
000000000000cd39         db  0x0e ; '.'
000000000000cd3a         db  0x20 ; ' '
000000000000cd3b         db  0x42 ; 'B'
000000000000cd3c         db  0x0e ; '.'
000000000000cd3d         db  0x18 ; '.'
000000000000cd3e         db  0x42 ; 'B'
000000000000cd3f         db  0x0e ; '.'
000000000000cd40         db  0x10 ; '.'
000000000000cd41         db  0x42 ; 'B'
000000000000cd42         db  0x0e ; '.'
000000000000cd43         db  0x08 ; '.'
000000000000cd44         db  0x45 ; 'E'
000000000000cd45         db  0x0b ; '.'
000000000000cd46         db  0x68 ; 'h'
000000000000cd47         db  0x0a ; '.'
000000000000cd48         db  0x0e ; '.'
000000000000cd49         db  0x68 ; 'h'
000000000000cd4a         db  0x48 ; 'H'
000000000000cd4b         db  0x0b ; '.'
000000000000cd4c         db  0x72 ; 'r'
000000000000cd4d         db  0x0e ; '.'
000000000000cd4e         db  0x68 ; 'h'
000000000000cd4f         db  0x45 ; 'E'
000000000000cd50         db  0x0e ; '.'
000000000000cd51         db  0x70 ; 'p'
000000000000cd52         db  0x42 ; 'B'
000000000000cd53         db  0x0e ; '.'
000000000000cd54         db  0x78 ; 'x'
000000000000cd55         db  0x42 ; 'B'
000000000000cd56         db  0x0e ; '.'
000000000000cd57         db  0x80 ; '.'
000000000000cd58         db  0x01 ; '.'
000000000000cd59         db  0x5e ; '^'
000000000000cd5a         db  0x0e ; '.'
000000000000cd5b         db  0x60 ; '`'
000000000000cd5c         db  0x44 ; 'D'
000000000000cd5d         db  0x0a ; '.'
000000000000cd5e         db  0x0e ; '.'
000000000000cd5f         db  0x38 ; '8'
000000000000cd60         db  0x41 ; 'A'
000000000000cd61         db  0x0e ; '.'
000000000000cd62         db  0x30 ; '0'
000000000000cd63         db  0x41 ; 'A'
000000000000cd64         db  0x0e ; '.'
000000000000cd65         db  0x28 ; '('
000000000000cd66         db  0x42 ; 'B'
000000000000cd67         db  0x0e ; '.'
000000000000cd68         db  0x20 ; ' '
000000000000cd69         db  0x42 ; 'B'
000000000000cd6a         db  0x0e ; '.'
000000000000cd6b         db  0x18 ; '.'
000000000000cd6c         db  0x42 ; 'B'
000000000000cd6d         db  0x0e ; '.'
000000000000cd6e         db  0x10 ; '.'
000000000000cd6f         db  0x42 ; 'B'
000000000000cd70         db  0x0e ; '.'
000000000000cd71         db  0x08 ; '.'
000000000000cd72         db  0x41 ; 'A'
000000000000cd73         db  0x0b ; '.'
000000000000cd74         db  0x79 ; 'y'
000000000000cd75         db  0x0a ; '.'
000000000000cd76         db  0x0e ; '.'
000000000000cd77         db  0x68 ; 'h'
000000000000cd78         db  0x42 ; 'B'
000000000000cd79         db  0x0e ; '.'
000000000000cd7a         db  0x70 ; 'p'
000000000000cd7b         db  0x42 ; 'B'
000000000000cd7c         db  0x0e ; '.'
000000000000cd7d         db  0x78 ; 'x'
000000000000cd7e         db  0x42 ; 'B'
000000000000cd7f         db  0x0e ; '.'
000000000000cd80         db  0x80 ; '.'
000000000000cd81         db  0x01 ; '.'
000000000000cd82         db  0x51 ; 'Q'
000000000000cd83         db  0x0b ; '.'
000000000000cd84         dd         0x00000010                                  ; Length of the record
000000000000cd88         dd         0x00000bc0                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000cd8c         db         0x04, 0xb4, 2 dup (0xff)                    ; begin 0x8190
000000000000cd90         db         0x20, 3 dup (0x00)                          ; length 0x20 (end at 0x81b0)
000000000000cd94         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cd95         align      8
000000000000cd98         dd         0x00000018                                  ; Length of the record
000000000000cd9c         dd         0x00000bd4                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000cda0         db         0x10, 0xb4, 2 dup (0xff)                    ; begin 0x81b0
000000000000cda4         db         0x78, 3 dup (0x00)                          ; length 0x78 (end at 0x8228)
000000000000cda8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cda9         db  0x44 ; 'D'
000000000000cdaa         db  0x0e ; '.'
000000000000cdab         db  0x70 ; 'p'
000000000000cdac         db  0x02 ; '.'
000000000000cdad         db  0x60 ; '`'
000000000000cdae         db  0x0a ; '.'
000000000000cdaf         db  0x0e ; '.'
000000000000cdb0         db  0x08 ; '.'
000000000000cdb1         db  0x41 ; 'A'
000000000000cdb2         db  0x0b ; '.'
000000000000cdb3         db  0x00 ; '.'
000000000000cdb4         dd         0x00000028                                  ; Length of the record
000000000000cdb8         dd         0x00000bf0                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000cdbc         db         0x74, 0xb4, 2 dup (0xff)                    ; begin 0x8230
000000000000cdc0         db         0xd5, 3 dup (0x00)                          ; length 0xd5 (end at 0x8305)
000000000000cdc4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cdc5         db  0x41 ; 'A'
000000000000cdc6         db  0x0e ; '.'
000000000000cdc7         db  0x10 ; '.'
000000000000cdc8         db  0x86 ; '.'
000000000000cdc9         db  0x02 ; '.'
000000000000cdca         db  0x41 ; 'A'
000000000000cdcb         db  0x0e ; '.'
000000000000cdcc         db  0x18 ; '.'
000000000000cdcd         db  0x83 ; '.'
000000000000cdce         db  0x03 ; '.'
000000000000cdcf         db  0x50 ; 'P'
000000000000cdd0         db  0x0e ; '.'
000000000000cdd1         db  0xd0 ; '.'
000000000000cdd2         db  0x01 ; '.'
000000000000cdd3         db  0x02 ; '.'
000000000000cdd4         db  0xab ; '.'
000000000000cdd5         db  0x0a ; '.'
000000000000cdd6         db  0x0e ; '.'
000000000000cdd7         db  0x18 ; '.'
000000000000cdd8         db  0x41 ; 'A'
000000000000cdd9         db  0x0e ; '.'
000000000000cdda         db  0x10 ; '.'
000000000000cddb         db  0x41 ; 'A'
000000000000cddc         db  0x0e ; '.'
000000000000cddd         db  0x08 ; '.'
000000000000cdde         db  0x41 ; 'A'
000000000000cddf         db  0x0b ; '.'
000000000000cde0         dd         0x0000001c                                  ; Length of the record
000000000000cde4         dd         0x00000c1c                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000cde8         db         0x28, 0xb5, 2 dup (0xff)                    ; begin 0x8310
000000000000cdec         db         0x80, 3 dup (0x00)                          ; length 0x80 (end at 0x8390)
000000000000cdf0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cdf1         db  0x41 ; 'A'
000000000000cdf2         db  0x0e ; '.'
000000000000cdf3         db  0x10 ; '.'
000000000000cdf4         db  0x83 ; '.'
000000000000cdf5         db  0x02 ; '.'
000000000000cdf6         db  0x02 ; '.'
000000000000cdf7         db  0x7a ; 'z'
000000000000cdf8         db  0x0e ; '.'
000000000000cdf9         db  0x08 ; '.'
000000000000cdfa         db  0x00 ; '.'
000000000000cdfb         db  0x00 ; '.'
000000000000cdfc         db  0x00 ; '.'
000000000000cdfd         db  0x00 ; '.'
000000000000cdfe         db  0x00 ; '.'
000000000000cdff         db  0x00 ; '.'
000000000000ce00         dd         0x00000018                                  ; Length of the record
000000000000ce04         dd         0x00000c3c                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000ce08         db         0x88, 0xb5, 2 dup (0xff)                    ; begin 0x8390
000000000000ce0c         db         0x1a, 3 dup (0x00)                          ; length 0x1a (end at 0x83aa)
000000000000ce10         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ce11         db  0x41 ; 'A'
000000000000ce12         db  0x0e ; '.'
000000000000ce13         db  0x10 ; '.'
000000000000ce14         db  0x83 ; '.'
000000000000ce15         db  0x02 ; '.'
000000000000ce16         db  0x53 ; 'S'
000000000000ce17         db  0x0a ; '.'
000000000000ce18         db  0x0e ; '.'
000000000000ce19         db  0x08 ; '.'
000000000000ce1a         db  0x41 ; 'A'
000000000000ce1b         db  0x0b ; '.'
000000000000ce1c         dd         0x00000010                                  ; Length of the record
000000000000ce20         dd         0x00000c58                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000ce24         db         0x8c, 0xb5, 2 dup (0xff)                    ; begin 0x83b0
000000000000ce28         db         0x24, 3 dup (0x00)                          ; length 0x24 (end at 0x83d4)
000000000000ce2c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ce2d         db  0x5f ; '_'
000000000000ce2e         db  0x0e ; '.'
000000000000ce2f         db  0x10 ; '.'
000000000000ce30         dd         0x00000010                                  ; Length of the record
000000000000ce34         dd         0x00000c6c                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000ce38         db         0xa8, 0xb5, 2 dup (0xff)                    ; begin 0x83e0
000000000000ce3c         db         0x02, 3 dup (0x00)                          ; length 0x2 (end at 0x83e2)
000000000000ce40         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ce41         align      4
000000000000ce44         dd         0x00000020                                  ; Length of the record
000000000000ce48         dd         0x00000c80                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000ce4c         db         0xa4, 0xb5, 2 dup (0xff)                    ; begin 0x83f0
000000000000ce50         db         0x36, 3 dup (0x00)                          ; length 0x36 (end at 0x8426)
000000000000ce54         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ce55         db  0x44 ; 'D'
000000000000ce56         db  0x0e ; '.'
000000000000ce57         db  0x10 ; '.'
000000000000ce58         db  0x83 ; '.'
000000000000ce59         db  0x02 ; '.'
000000000000ce5a         db  0x5d ; ']'
000000000000ce5b         db  0x0a ; '.'
000000000000ce5c         db  0x0e ; '.'
000000000000ce5d         db  0x08 ; '.'
000000000000ce5e         db  0x47 ; 'G'
000000000000ce5f         db  0x0b ; '.'
000000000000ce60         db  0x48 ; 'H'
000000000000ce61         db  0x0a ; '.'
000000000000ce62         db  0x0e ; '.'
000000000000ce63         db  0x08 ; '.'
000000000000ce64         db  0x41 ; 'A'
000000000000ce65         db  0x0b ; '.'
000000000000ce66         db  0x00 ; '.'
000000000000ce67         db  0x00 ; '.'
000000000000ce68         dd         0x00000010                                  ; Length of the record
000000000000ce6c         dd         0x00000ca4                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000ce70         db         0xc0, 0xb5, 2 dup (0xff)                    ; begin 0x8430
000000000000ce74         db         0x24, 3 dup (0x00)                          ; length 0x24 (end at 0x8454)
000000000000ce78         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ce79         db  0x5f ; '_'
000000000000ce7a         db  0x0e ; '.'
000000000000ce7b         db  0x10 ; '.'
000000000000ce7c         dd         0x00000014                                  ; Length of the record
000000000000ce80         dd         0x00000cb8                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000ce84         db         0xdc, 0xb5, 2 dup (0xff)                    ; begin 0x8460
000000000000ce88         db         0x82, 3 dup (0x00)                          ; length 0x82 (end at 0x84e2)
000000000000ce8c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ce8d         db  0x02 ; '.'
000000000000ce8e         db  0x5f ; '_'
000000000000ce8f         db  0x0e ; '.'
000000000000ce90         db  0x10 ; '.'
000000000000ce91         db  0x49 ; 'I'
000000000000ce92         db  0x0e ; '.'
000000000000ce93         db  0x08 ; '.'
000000000000ce94         dd         0x00000014                                  ; Length of the record
000000000000ce98         dd         0x00000cd0                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000ce9c         db         0x54, 0xb6, 2 dup (0xff)                    ; begin 0x84f0
000000000000cea0         db         0x4a, 3 dup (0x00)                          ; length 0x4a (end at 0x853a)
000000000000cea4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cea5         db  0x02 ; '.'
000000000000cea6         db  0x45 ; 'E'
000000000000cea7         db  0x0e ; '.'
000000000000cea8         db  0x10 ; '.'
000000000000cea9         db  0x00 ; '.'
000000000000ceaa         db  0x00 ; '.'
000000000000ceab         db  0x00 ; '.'
000000000000ceac         dd         0x00000018                                  ; Length of the record
000000000000ceb0         dd         0x00000ce8                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000ceb4         db         0x8c, 0xb6, 2 dup (0xff)                    ; begin 0x8540
000000000000ceb8         db         0x17, 3 dup (0x00)                          ; length 0x17 (end at 0x8557)
000000000000cebc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cebd         db  0x41 ; 'A'
000000000000cebe         db  0x0e ; '.'
000000000000cebf         db  0x10 ; '.'
000000000000cec0         db  0x83 ; '.'
000000000000cec1         db  0x02 ; '.'
000000000000cec2         db  0x51 ; 'Q'
000000000000cec3         db  0x0e ; '.'
000000000000cec4         db  0x08 ; '.'
000000000000cec5         db  0x00 ; '.'
000000000000cec6         db  0x00 ; '.'
000000000000cec7         db  0x00 ; '.'
000000000000cec8         dd         0x00000018                                  ; Length of the record
000000000000cecc         dd         0x00000d04                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000ced0         db         0x90, 0xb6, 2 dup (0xff)                    ; begin 0x8560
000000000000ced4         db         0x2e, 3 dup (0x00)                          ; length 0x2e (end at 0x858e)
000000000000ced8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ced9         db  0x47 ; 'G'
000000000000ceda         db  0x0e ; '.'
000000000000cedb         db  0x10 ; '.'
000000000000cedc         db  0x61 ; 'a'
000000000000cedd         db  0x0a ; '.'
000000000000cede         db  0x0e ; '.'
000000000000cedf         db  0x08 ; '.'
000000000000cee0         db  0x41 ; 'A'
000000000000cee1         db  0x0b ; '.'
000000000000cee2         db  0x00 ; '.'
000000000000cee3         db  0x00 ; '.'
000000000000cee4         dd         0x00000024                                  ; Length of the record
000000000000cee8         dd         0x00000d20                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000ceec         db         0xa4, 0xb6, 2 dup (0xff)                    ; begin 0x8590
000000000000cef0         db         0x28, 3 dup (0x00)                          ; length 0x28 (end at 0x85b8)
000000000000cef4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cef5         db  0x41 ; 'A'
000000000000cef6         db  0x0e ; '.'
000000000000cef7         db  0x10 ; '.'
000000000000cef8         db  0x86 ; '.'
000000000000cef9         db  0x02 ; '.'
000000000000cefa         db  0x41 ; 'A'
000000000000cefb         db  0x0e ; '.'
000000000000cefc         db  0x18 ; '.'
000000000000cefd         db  0x83 ; '.'
000000000000cefe         db  0x03 ; '.'
000000000000ceff         db  0x4d ; 'M'
000000000000cf00         db  0x0e ; '.'
000000000000cf01         db  0x20 ; ' '
000000000000cf02         db  0x49 ; 'I'
000000000000cf03         db  0x0e ; '.'
000000000000cf04         db  0x18 ; '.'
000000000000cf05         db  0x47 ; 'G'
000000000000cf06         db  0x0e ; '.'
000000000000cf07         db  0x10 ; '.'
000000000000cf08         db  0x41 ; 'A'
000000000000cf09         db  0x0e ; '.'
000000000000cf0a         db  0x08 ; '.'
000000000000cf0b         db  0x00 ; '.'
000000000000cf0c         dd         0x00000018                                  ; Length of the record
000000000000cf10         dd         0x00000d48                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000cf14         db         0xac, 0xb6, 2 dup (0xff)                    ; begin 0x85c0
000000000000cf18         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x85d3)
000000000000cf1c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cf1d         db  0x41 ; 'A'
000000000000cf1e         db  0x0e ; '.'
000000000000cf1f         db  0x10 ; '.'
000000000000cf20         db  0x83 ; '.'
000000000000cf21         db  0x02 ; '.'
000000000000cf22         db  0x50 ; 'P'
000000000000cf23         db  0x0e ; '.'
000000000000cf24         db  0x08 ; '.'
000000000000cf25         db  0x00 ; '.'
000000000000cf26         db  0x00 ; '.'
000000000000cf27         db  0x00 ; '.'
000000000000cf28         dd         0x00000014                                  ; Length of the record
000000000000cf2c         dd         0x00000d64                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000cf30         db         0xb0, 0xb6, 2 dup (0xff)                    ; begin 0x85e0
000000000000cf34         db         0x35, 3 dup (0x00)                          ; length 0x35 (end at 0x8615)
000000000000cf38         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cf39         db  0x4b ; 'K'
000000000000cf3a         db  0x0e ; '.'
000000000000cf3b         db  0x10 ; '.'
000000000000cf3c         db  0x00 ; '.'
000000000000cf3d         db  0x00 ; '.'
000000000000cf3e         db  0x00 ; '.'
000000000000cf3f         db  0x00 ; '.'
000000000000cf40         dd         0x0000001c                                  ; Length of the record
000000000000cf44         dd         0x00000d7c                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000cf48         db         0xd8, 0xb6, 2 dup (0xff)                    ; begin 0x8620
000000000000cf4c         db         0x18, 3 dup (0x00)                          ; length 0x18 (end at 0x8638)
000000000000cf50         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cf51         db  0x44 ; 'D'
000000000000cf52         db  0x0e ; '.'
000000000000cf53         db  0x10 ; '.'
000000000000cf54         db  0x4e ; 'N'
000000000000cf55         db  0x0a ; '.'
000000000000cf56         db  0x0e ; '.'
000000000000cf57         db  0x08 ; '.'
000000000000cf58         db  0x41 ; 'A'
000000000000cf59         db  0x0b ; '.'
000000000000cf5a         db  0x00 ; '.'
000000000000cf5b         db  0x00 ; '.'
000000000000cf5c         db  0x00 ; '.'
000000000000cf5d         db  0x00 ; '.'
000000000000cf5e         db  0x00 ; '.'
000000000000cf5f         db  0x00 ; '.'
000000000000cf60         dd         0x0000004c                                  ; Length of the record
000000000000cf64         dd         0x00000d9c                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000cf68         db         0xd8, 0xb6, 2 dup (0xff)                    ; begin 0x8640
000000000000cf6c         db         0xb3, 0x06, 2 dup (0x00)                    ; length 0x6b3 (end at 0x8cf3)
000000000000cf70         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cf71         db  0x42 ; 'B'
000000000000cf72         db  0x0e ; '.'
000000000000cf73         db  0x10 ; '.'
000000000000cf74         db  0x8f ; '.'
000000000000cf75         db  0x02 ; '.'
000000000000cf76         db  0x42 ; 'B'
000000000000cf77         db  0x0e ; '.'
000000000000cf78         db  0x18 ; '.'
000000000000cf79         db  0x8e ; '.'
000000000000cf7a         db  0x03 ; '.'
000000000000cf7b         db  0x42 ; 'B'
000000000000cf7c         db  0x0e ; '.'
000000000000cf7d         db  0x20 ; ' '
000000000000cf7e         db  0x8d ; '.'
000000000000cf7f         db  0x04 ; '.'
000000000000cf80         db  0x42 ; 'B'
000000000000cf81         db  0x0e ; '.'
000000000000cf82         db  0x28 ; '('
000000000000cf83         db  0x8c ; '.'
000000000000cf84         db  0x05 ; '.'
000000000000cf85         db  0x41 ; 'A'
000000000000cf86         db  0x0e ; '.'
000000000000cf87         db  0x30 ; '0'
000000000000cf88         db  0x86 ; '.'
000000000000cf89         db  0x06 ; '.'
000000000000cf8a         db  0x41 ; 'A'
000000000000cf8b         db  0x0e ; '.'
000000000000cf8c         db  0x38 ; '8'
000000000000cf8d         db  0x83 ; '.'
000000000000cf8e         db  0x07 ; '.'
000000000000cf8f         db  0x44 ; 'D'
000000000000cf90         db  0x0e ; '.'
000000000000cf91         db  0x60 ; '`'
000000000000cf92         db  0x02 ; '.'
000000000000cf93         db  0x94 ; '.'
000000000000cf94         db  0x0a ; '.'
000000000000cf95         db  0x0e ; '.'
000000000000cf96         db  0x38 ; '8'
000000000000cf97         db  0x41 ; 'A'
000000000000cf98         db  0x0e ; '.'
000000000000cf99         db  0x30 ; '0'
000000000000cf9a         db  0x41 ; 'A'
000000000000cf9b         db  0x0e ; '.'
000000000000cf9c         db  0x28 ; '('
000000000000cf9d         db  0x42 ; 'B'
000000000000cf9e         db  0x0e ; '.'
000000000000cf9f         db  0x20 ; ' '
000000000000cfa0         db  0x42 ; 'B'
000000000000cfa1         db  0x0e ; '.'
000000000000cfa2         db  0x18 ; '.'
000000000000cfa3         db  0x42 ; 'B'
000000000000cfa4         db  0x0e ; '.'
000000000000cfa5         db  0x10 ; '.'
000000000000cfa6         db  0x42 ; 'B'
000000000000cfa7         db  0x0e ; '.'
000000000000cfa8         db  0x08 ; '.'
000000000000cfa9         db  0x44 ; 'D'
000000000000cfaa         db  0x0b ; '.'
000000000000cfab         db  0x00 ; '.'
000000000000cfac         db  0x00 ; '.'
000000000000cfad         db  0x00 ; '.'
000000000000cfae         db  0x00 ; '.'
000000000000cfaf         db  0x00 ; '.'
000000000000cfb0         dd         0x0000004c                                  ; Length of the record
000000000000cfb4         dd         0x00000dec                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000cfb8         db         0x48, 0xbd, 2 dup (0xff)                    ; begin 0x8d00
000000000000cfbc         db         0x1c, 0x04, 2 dup (0x00)                    ; length 0x41c (end at 0x911c)
000000000000cfc0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cfc1         db  0x42 ; 'B'
000000000000cfc2         db  0x0e ; '.'
000000000000cfc3         db  0x10 ; '.'
000000000000cfc4         db  0x8f ; '.'
000000000000cfc5         db  0x02 ; '.'
000000000000cfc6         db  0x42 ; 'B'
000000000000cfc7         db  0x0e ; '.'
000000000000cfc8         db  0x18 ; '.'
000000000000cfc9         db  0x8e ; '.'
000000000000cfca         db  0x03 ; '.'
000000000000cfcb         db  0x42 ; 'B'
000000000000cfcc         db  0x0e ; '.'
000000000000cfcd         db  0x20 ; ' '
000000000000cfce         db  0x8d ; '.'
000000000000cfcf         db  0x04 ; '.'
000000000000cfd0         db  0x42 ; 'B'
000000000000cfd1         db  0x0e ; '.'
000000000000cfd2         db  0x28 ; '('
000000000000cfd3         db  0x8c ; '.'
000000000000cfd4         db  0x05 ; '.'
000000000000cfd5         db  0x41 ; 'A'
000000000000cfd6         db  0x0e ; '.'
000000000000cfd7         db  0x30 ; '0'
000000000000cfd8         db  0x86 ; '.'
000000000000cfd9         db  0x06 ; '.'
000000000000cfda         db  0x41 ; 'A'
000000000000cfdb         db  0x0e ; '.'
000000000000cfdc         db  0x38 ; '8'
000000000000cfdd         db  0x83 ; '.'
000000000000cfde         db  0x07 ; '.'
000000000000cfdf         db  0x44 ; 'D'
000000000000cfe0         db  0x0e ; '.'
000000000000cfe1         db  0x60 ; '`'
000000000000cfe2         db  0x02 ; '.'
000000000000cfe3         db  0xe9 ; '.'
000000000000cfe4         db  0x0a ; '.'
000000000000cfe5         db  0x0e ; '.'
000000000000cfe6         db  0x38 ; '8'
000000000000cfe7         db  0x41 ; 'A'
000000000000cfe8         db  0x0e ; '.'
000000000000cfe9         db  0x30 ; '0'
000000000000cfea         db  0x41 ; 'A'
000000000000cfeb         db  0x0e ; '.'
000000000000cfec         db  0x28 ; '('
000000000000cfed         db  0x42 ; 'B'
000000000000cfee         db  0x0e ; '.'
000000000000cfef         db  0x20 ; ' '
000000000000cff0         db  0x42 ; 'B'
000000000000cff1         db  0x0e ; '.'
000000000000cff2         db  0x18 ; '.'
000000000000cff3         db  0x42 ; 'B'
000000000000cff4         db  0x0e ; '.'
000000000000cff5         db  0x10 ; '.'
000000000000cff6         db  0x42 ; 'B'
000000000000cff7         db  0x0e ; '.'
000000000000cff8         db  0x08 ; '.'
000000000000cff9         db  0x47 ; 'G'
000000000000cffa         db  0x0b ; '.'
000000000000cffb         db  0x00 ; '.'
000000000000cffc         db  0x00 ; '.'
000000000000cffd         db  0x00 ; '.'
000000000000cffe         db  0x00 ; '.'
000000000000cfff         db  0x00 ; '.'
000000000000d000         dd         0x0000003c                                  ; Length of the record
000000000000d004         dd         0x00000e3c                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000d008         db         0x18, 0xc1, 2 dup (0xff)                    ; begin 0x9120
000000000000d00c         db         0x83, 3 dup (0x00)                          ; length 0x83 (end at 0x91a3)
000000000000d010         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d011         db  0x42 ; 'B'
000000000000d012         db  0x0e ; '.'
000000000000d013         db  0x10 ; '.'
000000000000d014         db  0x8d ; '.'
000000000000d015         db  0x02 ; '.'
000000000000d016         db  0x42 ; 'B'
000000000000d017         db  0x0e ; '.'
000000000000d018         db  0x18 ; '.'
000000000000d019         db  0x8c ; '.'
000000000000d01a         db  0x03 ; '.'
000000000000d01b         db  0x44 ; 'D'
000000000000d01c         db  0x0e ; '.'
000000000000d01d         db  0x20 ; ' '
000000000000d01e         db  0x86 ; '.'
000000000000d01f         db  0x04 ; '.'
000000000000d020         db  0x41 ; 'A'
000000000000d021         db  0x0e ; '.'
000000000000d022         db  0x28 ; '('
000000000000d023         db  0x83 ; '.'
000000000000d024         db  0x05 ; '.'
000000000000d025         db  0x4a ; 'J'
000000000000d026         db  0x0e ; '.'
000000000000d027         db  0x40 ; '@'
000000000000d028         db  0x02 ; '.'
000000000000d029         db  0x64 ; 'd'
000000000000d02a         db  0x0a ; '.'
000000000000d02b         db  0x0e ; '.'
000000000000d02c         db  0x28 ; '('
000000000000d02d         db  0x41 ; 'A'
000000000000d02e         db  0x0e ; '.'
000000000000d02f         db  0x20 ; ' '
000000000000d030         db  0x41 ; 'A'
000000000000d031         db  0x0e ; '.'
000000000000d032         db  0x18 ; '.'
000000000000d033         db  0x42 ; 'B'
000000000000d034         db  0x0e ; '.'
000000000000d035         db  0x10 ; '.'
000000000000d036         db  0x42 ; 'B'
000000000000d037         db  0x0e ; '.'
000000000000d038         db  0x08 ; '.'
000000000000d039         db  0x41 ; 'A'
000000000000d03a         db  0x0b ; '.'
000000000000d03b         db  0x00 ; '.'
000000000000d03c         db  0x00 ; '.'
000000000000d03d         db  0x00 ; '.'
000000000000d03e         db  0x00 ; '.'
000000000000d03f         db  0x00 ; '.'
000000000000d040         dd         0x0000004c                                  ; Length of the record
000000000000d044         dd         0x00000e7c                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000d048         db         0x68, 0xc1, 2 dup (0xff)                    ; begin 0x91b0
000000000000d04c         db         0x7d, 3 dup (0x00)                          ; length 0x7d (end at 0x922d)
000000000000d050         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d051         db  0x42 ; 'B'
000000000000d052         db  0x0e ; '.'
000000000000d053         db  0x10 ; '.'
000000000000d054         db  0x8c ; '.'
000000000000d055         db  0x02 ; '.'
000000000000d056         db  0x41 ; 'A'
000000000000d057         db  0x0e ; '.'
000000000000d058         db  0x18 ; '.'
000000000000d059         db  0x86 ; '.'
000000000000d05a         db  0x03 ; '.'
000000000000d05b         db  0x44 ; 'D'
000000000000d05c         db  0x0e ; '.'
000000000000d05d         db  0x20 ; ' '
000000000000d05e         db  0x83 ; '.'
000000000000d05f         db  0x04 ; '.'
000000000000d060         db  0x69 ; 'i'
000000000000d061         db  0x0a ; '.'
000000000000d062         db  0x0e ; '.'
000000000000d063         db  0x18 ; '.'
000000000000d064         db  0x41 ; 'A'
000000000000d065         db  0x0e ; '.'
000000000000d066         db  0x10 ; '.'
000000000000d067         db  0x42 ; 'B'
000000000000d068         db  0x0e ; '.'
000000000000d069         db  0x08 ; '.'
000000000000d06a         db  0x45 ; 'E'
000000000000d06b         db  0x0b ; '.'
000000000000d06c         db  0x55 ; 'U'
000000000000d06d         db  0x0a ; '.'
000000000000d06e         db  0x0e ; '.'
000000000000d06f         db  0x18 ; '.'
000000000000d070         db  0x41 ; 'A'
000000000000d071         db  0x0e ; '.'
000000000000d072         db  0x10 ; '.'
000000000000d073         db  0x42 ; 'B'
000000000000d074         db  0x0e ; '.'
000000000000d075         db  0x08 ; '.'
000000000000d076         db  0x48 ; 'H'
000000000000d077         db  0x0b ; '.'
000000000000d078         db  0x41 ; 'A'
000000000000d079         db  0x0a ; '.'
000000000000d07a         db  0x0e ; '.'
000000000000d07b         db  0x18 ; '.'
000000000000d07c         db  0x46 ; 'F'
000000000000d07d         db  0x0e ; '.'
000000000000d07e         db  0x10 ; '.'
000000000000d07f         db  0x42 ; 'B'
000000000000d080         db  0x0e ; '.'
000000000000d081         db  0x08 ; '.'
000000000000d082         db  0x47 ; 'G'
000000000000d083         db  0x0b ; '.'
000000000000d084         db  0x49 ; 'I'
000000000000d085         db  0x0e ; '.'
000000000000d086         db  0x18 ; '.'
000000000000d087         db  0x41 ; 'A'
000000000000d088         db  0x0e ; '.'
000000000000d089         db  0x10 ; '.'
000000000000d08a         db  0x42 ; 'B'
000000000000d08b         db  0x0e ; '.'
000000000000d08c         db  0x08 ; '.'
000000000000d08d         db  0x00 ; '.'
000000000000d08e         db  0x00 ; '.'
000000000000d08f         db  0x00 ; '.'
000000000000d090         dd         0x0000001c                                  ; Length of the record
000000000000d094         dd         0x00000ecc                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000d098         db         0x98, 0xc1, 2 dup (0xff)                    ; begin 0x9230
000000000000d09c         db         0x60, 3 dup (0x00)                          ; length 0x60 (end at 0x9290)
000000000000d0a0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d0a1         db  0x44 ; 'D'
000000000000d0a2         db  0x0e ; '.'
000000000000d0a3         db  0x10 ; '.'
000000000000d0a4         db  0x75 ; 'u'
000000000000d0a5         db  0x0a ; '.'
000000000000d0a6         db  0x0e ; '.'
000000000000d0a7         db  0x08 ; '.'
000000000000d0a8         db  0x47 ; 'G'
000000000000d0a9         db  0x0b ; '.'
000000000000d0aa         db  0x5f ; '_'
000000000000d0ab         db  0x0e ; '.'
000000000000d0ac         db  0x08 ; '.'
000000000000d0ad         db  0x00 ; '.'
000000000000d0ae         db  0x00 ; '.'
000000000000d0af         db  0x00 ; '.'
000000000000d0b0         dd         0x0000001c                                  ; Length of the record
000000000000d0b4         dd         0x00000eec                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000d0b8         db         0xd8, 0xc1, 2 dup (0xff)                    ; begin 0x9290
000000000000d0bc         db         0x3c, 3 dup (0x00)                          ; length 0x3c (end at 0x92cc)
000000000000d0c0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d0c1         db  0x44 ; 'D'
000000000000d0c2         db  0x0e ; '.'
000000000000d0c3         db  0x10 ; '.'
000000000000d0c4         db  0x61 ; 'a'
000000000000d0c5         db  0x0a ; '.'
000000000000d0c6         db  0x0e ; '.'
000000000000d0c7         db  0x08 ; '.'
000000000000d0c8         db  0x4b ; 'K'
000000000000d0c9         db  0x0b ; '.'
000000000000d0ca         db  0x4b ; 'K'
000000000000d0cb         db  0x0e ; '.'
000000000000d0cc         db  0x08 ; '.'
000000000000d0cd         db  0x00 ; '.'
000000000000d0ce         db  0x00 ; '.'
000000000000d0cf         db  0x00 ; '.'
000000000000d0d0         dd         0x00000034                                  ; Length of the record
000000000000d0d4         dd         0x00000f0c                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000d0d8         db         0xf8, 0xc1, 2 dup (0xff)                    ; begin 0x92d0
000000000000d0dc         db         0x7b, 3 dup (0x00)                          ; length 0x7b (end at 0x934b)
000000000000d0e0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d0e1         db  0x42 ; 'B'
000000000000d0e2         db  0x0e ; '.'
000000000000d0e3         db  0x10 ; '.'
000000000000d0e4         db  0x8c ; '.'
000000000000d0e5         db  0x02 ; '.'
000000000000d0e6         db  0x41 ; 'A'
000000000000d0e7         db  0x0e ; '.'
000000000000d0e8         db  0x18 ; '.'
000000000000d0e9         db  0x86 ; '.'
000000000000d0ea         db  0x03 ; '.'
000000000000d0eb         db  0x41 ; 'A'
000000000000d0ec         db  0x0e ; '.'
000000000000d0ed         db  0x20 ; ' '
000000000000d0ee         db  0x83 ; '.'
000000000000d0ef         db  0x04 ; '.'
000000000000d0f0         db  0x7d ; '}'
000000000000d0f1         db  0x0a ; '.'
000000000000d0f2         db  0x0e ; '.'
000000000000d0f3         db  0x18 ; '.'
000000000000d0f4         db  0x41 ; 'A'
000000000000d0f5         db  0x0e ; '.'
000000000000d0f6         db  0x10 ; '.'
000000000000d0f7         db  0x42 ; 'B'
000000000000d0f8         db  0x0e ; '.'
000000000000d0f9         db  0x08 ; '.'
000000000000d0fa         db  0x44 ; 'D'
000000000000d0fb         db  0x0b ; '.'
000000000000d0fc         db  0x60 ; '`'
000000000000d0fd         db  0x0a ; '.'
000000000000d0fe         db  0x0e ; '.'
000000000000d0ff         db  0x18 ; '.'
000000000000d100         db  0x41 ; 'A'
000000000000d101         db  0x0e ; '.'
000000000000d102         db  0x10 ; '.'
000000000000d103         db  0x42 ; 'B'
000000000000d104         db  0x0e ; '.'
000000000000d105         db  0x08 ; '.'
000000000000d106         db  0x45 ; 'E'
000000000000d107         db  0x0b ; '.'
000000000000d108         dd         0x0000001c                                  ; Length of the record
000000000000d10c         dd         0x00000f44                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000d110         db         0x40, 0xc2, 2 dup (0xff)                    ; begin 0x9350
000000000000d114         db         0x40, 3 dup (0x00)                          ; length 0x40 (end at 0x9390)
000000000000d118         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d119         db  0x44 ; 'D'
000000000000d11a         db  0x0e ; '.'
000000000000d11b         db  0x10 ; '.'
000000000000d11c         db  0x83 ; '.'
000000000000d11d         db  0x02 ; '.'
000000000000d11e         db  0x5a ; 'Z'
000000000000d11f         db  0x0a ; '.'
000000000000d120         db  0x0e ; '.'
000000000000d121         db  0x08 ; '.'
000000000000d122         db  0x4a ; 'J'
000000000000d123         db  0x0b ; '.'
000000000000d124         db  0x53 ; 'S'
000000000000d125         db  0x0e ; '.'
000000000000d126         db  0x08 ; '.'
000000000000d127         db  0x00 ; '.'
000000000000d128         dd         0x0000002c                                  ; Length of the record
000000000000d12c         dd         0x00000f64                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000d130         db         0x60, 0xc2, 2 dup (0xff)                    ; begin 0x9390
000000000000d134         db         0x57, 3 dup (0x00)                          ; length 0x57 (end at 0x93e7)
000000000000d138         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d139         db  0x63 ; 'c'
000000000000d13a         db  0x0e ; '.'
000000000000d13b         db  0x10 ; '.'
000000000000d13c         db  0x8c ; '.'
000000000000d13d         db  0x02 ; '.'
000000000000d13e         db  0x41 ; 'A'
000000000000d13f         db  0x0e ; '.'
000000000000d140         db  0x18 ; '.'
000000000000d141         db  0x86 ; '.'
000000000000d142         db  0x03 ; '.'
000000000000d143         db  0x44 ; 'D'
000000000000d144         db  0x0e ; '.'
000000000000d145         db  0x20 ; ' '
000000000000d146         db  0x83 ; '.'
000000000000d147         db  0x04 ; '.'
000000000000d148         db  0x6b ; 'k'
000000000000d149         db  0x0e ; '.'
000000000000d14a         db  0x18 ; '.'
000000000000d14b         db  0x41 ; 'A'
000000000000d14c         db  0x0e ; '.'
000000000000d14d         db  0x10 ; '.'
000000000000d14e         db  0x42 ; 'B'
000000000000d14f         db  0x0e ; '.'
000000000000d150         db  0x08 ; '.'
000000000000d151         db  0x00 ; '.'
000000000000d152         db  0x00 ; '.'
000000000000d153         db  0x00 ; '.'
000000000000d154         db  0x00 ; '.'
000000000000d155         db  0x00 ; '.'
000000000000d156         db  0x00 ; '.'
000000000000d157         db  0x00 ; '.'
000000000000d158         dd         0x00000044                                  ; Length of the record
000000000000d15c         dd         0x00000f94                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000d160         db         0x90, 0xc2, 2 dup (0xff)                    ; begin 0x93f0
000000000000d164         db         0x65, 3 dup (0x00)                          ; length 0x65 (end at 0x9455)
000000000000d168         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d169         db  0x42 ; 'B'
000000000000d16a         db  0x0e ; '.'
000000000000d16b         db  0x10 ; '.'
000000000000d16c         db  0x8f ; '.'
000000000000d16d         db  0x02 ; '.'
000000000000d16e         db  0x42 ; 'B'
000000000000d16f         db  0x0e ; '.'
000000000000d170         db  0x18 ; '.'
000000000000d171         db  0x8e ; '.'
000000000000d172         db  0x03 ; '.'
000000000000d173         db  0x45 ; 'E'
000000000000d174         db  0x0e ; '.'
000000000000d175         db  0x20 ; ' '
000000000000d176         db  0x8d ; '.'
000000000000d177         db  0x04 ; '.'
000000000000d178         db  0x42 ; 'B'
000000000000d179         db  0x0e ; '.'
000000000000d17a         db  0x28 ; '('
000000000000d17b         db  0x8c ; '.'
000000000000d17c         db  0x05 ; '.'
000000000000d17d         db  0x48 ; 'H'
000000000000d17e         db  0x0e ; '.'
000000000000d17f         db  0x30 ; '0'
000000000000d180         db  0x86 ; '.'
000000000000d181         db  0x06 ; '.'
000000000000d182         db  0x48 ; 'H'
000000000000d183         db  0x0e ; '.'
000000000000d184         db  0x38 ; '8'
000000000000d185         db  0x83 ; '.'
000000000000d186         db  0x07 ; '.'
000000000000d187         db  0x4d ; 'M'
000000000000d188         db  0x0e ; '.'
000000000000d189         db  0x40 ; '@'
000000000000d18a         db  0x72 ; 'r'
000000000000d18b         db  0x0e ; '.'
000000000000d18c         db  0x38 ; '8'
000000000000d18d         db  0x41 ; 'A'
000000000000d18e         db  0x0e ; '.'
000000000000d18f         db  0x30 ; '0'
000000000000d190         db  0x41 ; 'A'
000000000000d191         db  0x0e ; '.'
000000000000d192         db  0x28 ; '('
000000000000d193         db  0x42 ; 'B'
000000000000d194         db  0x0e ; '.'
000000000000d195         db  0x20 ; ' '
000000000000d196         db  0x42 ; 'B'
000000000000d197         db  0x0e ; '.'
000000000000d198         db  0x18 ; '.'
000000000000d199         db  0x42 ; 'B'
000000000000d19a         db  0x0e ; '.'
000000000000d19b         db  0x10 ; '.'
000000000000d19c         db  0x42 ; 'B'
000000000000d19d         db  0x0e ; '.'
000000000000d19e         db  0x08 ; '.'
000000000000d19f         db  0x00 ; '.'
000000000000d1a0         dd         0x00000014                                  ; Length of the record
000000000000d1a4         dd         0x00000fdc                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000d1a8         db         0xb8, 0xc2, 2 dup (0xff)                    ; begin 0x9460
000000000000d1ac         db         0x02, 3 dup (0x00)                          ; length 0x2 (end at 0x9462)
000000000000d1b0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d1b1         align      8
000000000000d1b8         dd         0x00000010                                  ; Length of the record
000000000000d1bc         dd         0x00000ff4                                  ; FDE: parent CIE at 0xc1c8 (FDE encoding = 0x1B)
000000000000d1c0         db         0xb0, 0xc2, 2 dup (0xff)                    ; begin 0x9470
000000000000d1c4         db         0x0e, 3 dup (0x00)                          ; length 0xe (end at 0x947e)
000000000000d1c8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d1c9         align      16


        ; Segment Segment 3
        ; Range: [0x20d830; 0x20e308[ (2776 bytes)
        ; File offset : [55344; 57536[ (2192 bytes)
        ; Permissions: readable / writable
        ; Flags: 0x6



        ; Section .init_array
        ; Range: [0x20d830; 0x20d838[ (8 bytes)
        ; File offset : [55344; 55352[ (8 bytes)
        ; Flags: 0x3
        ;   SHT_FINI_ARRAY
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     __frame_dummy_init_array_entry:
000000000020d830         dq         frame_dummy                                 ; DATA XREF=__libc_csu_init+11


        ; Section .fini_array
        ; Range: [0x20d838; 0x20d840[ (8 bytes)
        ; File offset : [55352; 55360[ (8 bytes)
        ; Flags: 0x3
        ;   SHT_PREINIT_ARRAY
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     __do_global_dtors_aux_fini_array_entry:
000000000020d838         dq         __do_global_dtors_aux                       ; DATA XREF=__libc_csu_init+19


        ; Section .data.rel.ro
        ; Range: [0x20d840; 0x20dbf8[ (952 bytes)
        ; File offset : [55360; 56312[ (952 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     longopts:
000000000020d840         db  0xa6 ; '.'                                         ; DATA XREF=main+136
000000000020d841         db  0x96 ; '.'
000000000020d842         db  0x00 ; '.'
000000000020d843         db  0x00 ; '.'
000000000020d844         db  0x00 ; '.'
000000000020d845         db  0x00 ; '.'
000000000020d846         db  0x00 ; '.'
000000000020d847         db  0x00 ; '.'
000000000020d848         db  0x01 ; '.'
000000000020d849         db  0x00 ; '.'
000000000020d84a         db  0x00 ; '.'
000000000020d84b         db  0x00 ; '.'
000000000020d84c         db  0x00 ; '.'
000000000020d84d         db  0x00 ; '.'
000000000020d84e         db  0x00 ; '.'
000000000020d84f         db  0x00 ; '.'
000000000020d850         db  0x00 ; '.'
000000000020d851         db  0x00 ; '.'
000000000020d852         db  0x00 ; '.'
000000000020d853         db  0x00 ; '.'
000000000020d854         db  0x00 ; '.'
000000000020d855         db  0x00 ; '.'
000000000020d856         db  0x00 ; '.'
000000000020d857         db  0x00 ; '.'
000000000020d858         db  0x80 ; '.'
000000000020d859         db  0x00 ; '.'
000000000020d85a         db  0x00 ; '.'
000000000020d85b         db  0x00 ; '.'
000000000020d85c         db  0x00 ; '.'
000000000020d85d         db  0x00 ; '.'
000000000020d85e         db  0x00 ; '.'
000000000020d85f         db  0x00 ; '.'
000000000020d860         db  0x7c ; '|'
000000000020d861         db  0x97 ; '.'
000000000020d862         db  0x00 ; '.'
000000000020d863         db  0x00 ; '.'
000000000020d864         db  0x00 ; '.'
000000000020d865         db  0x00 ; '.'
000000000020d866         db  0x00 ; '.'
000000000020d867         db  0x00 ; '.'
000000000020d868         db  0x01 ; '.'
000000000020d869         db  0x00 ; '.'
000000000020d86a         db  0x00 ; '.'
000000000020d86b         db  0x00 ; '.'
000000000020d86c         db  0x00 ; '.'
000000000020d86d         db  0x00 ; '.'
000000000020d86e         db  0x00 ; '.'
000000000020d86f         db  0x00 ; '.'
000000000020d870         db  0x00 ; '.'
000000000020d871         db  0x00 ; '.'
000000000020d872         db  0x00 ; '.'
000000000020d873         db  0x00 ; '.'
000000000020d874         db  0x00 ; '.'
000000000020d875         db  0x00 ; '.'
000000000020d876         db  0x00 ; '.'
000000000020d877         db  0x00 ; '.'
000000000020d878         db  0x81 ; '.'
000000000020d879         db  0x00 ; '.'
000000000020d87a         db  0x00 ; '.'
000000000020d87b         db  0x00 ; '.'
000000000020d87c         db  0x00 ; '.'
000000000020d87d         db  0x00 ; '.'
000000000020d87e         db  0x00 ; '.'
000000000020d87f         db  0x00 ; '.'
000000000020d880         db  0xad ; '.'
000000000020d881         db  0x96 ; '.'
000000000020d882         db  0x00 ; '.'
000000000020d883         db  0x00 ; '.'
000000000020d884         db  0x00 ; '.'
000000000020d885         db  0x00 ; '.'
000000000020d886         db  0x00 ; '.'
000000000020d887         db  0x00 ; '.'
000000000020d888         db  0x01 ; '.'
000000000020d889         db  0x00 ; '.'
000000000020d88a         db  0x00 ; '.'
000000000020d88b         db  0x00 ; '.'
000000000020d88c         db  0x00 ; '.'
000000000020d88d         db  0x00 ; '.'
000000000020d88e         db  0x00 ; '.'
000000000020d88f         db  0x00 ; '.'
000000000020d890         db  0x00 ; '.'
000000000020d891         db  0x00 ; '.'
000000000020d892         db  0x00 ; '.'
000000000020d893         db  0x00 ; '.'
000000000020d894         db  0x00 ; '.'
000000000020d895         db  0x00 ; '.'
000000000020d896         db  0x00 ; '.'
000000000020d897         db  0x00 ; '.'
000000000020d898         db  0x82 ; '.'
000000000020d899         db  0x00 ; '.'
000000000020d89a         db  0x00 ; '.'
000000000020d89b         db  0x00 ; '.'
000000000020d89c         db  0x00 ; '.'
000000000020d89d         db  0x00 ; '.'
000000000020d89e         db  0x00 ; '.'
000000000020d89f         db  0x00 ; '.'
000000000020d8a0         db  0x86 ; '.'
000000000020d8a1         db  0x97 ; '.'
000000000020d8a2         db  0x00 ; '.'
000000000020d8a3         db  0x00 ; '.'
000000000020d8a4         db  0x00 ; '.'
000000000020d8a5         db  0x00 ; '.'
000000000020d8a6         db  0x00 ; '.'
000000000020d8a7         db  0x00 ; '.'
000000000020d8a8         db  0x01 ; '.'
000000000020d8a9         db  0x00 ; '.'
000000000020d8aa         db  0x00 ; '.'
000000000020d8ab         db  0x00 ; '.'
000000000020d8ac         db  0x00 ; '.'
000000000020d8ad         db  0x00 ; '.'
000000000020d8ae         db  0x00 ; '.'
000000000020d8af         db  0x00 ; '.'
000000000020d8b0         db  0x00 ; '.'
000000000020d8b1         db  0x00 ; '.'
000000000020d8b2         db  0x00 ; '.'
000000000020d8b3         db  0x00 ; '.'
000000000020d8b4         db  0x00 ; '.'
000000000020d8b5         db  0x00 ; '.'
000000000020d8b6         db  0x00 ; '.'
000000000020d8b7         db  0x00 ; '.'
000000000020d8b8         db  0x83 ; '.'
000000000020d8b9         db  0x00 ; '.'
000000000020d8ba         db  0x00 ; '.'
000000000020d8bb         db  0x00 ; '.'
000000000020d8bc         db  0x00 ; '.'
000000000020d8bd         db  0x00 ; '.'
000000000020d8be         db  0x00 ; '.'
000000000020d8bf         db  0x00 ; '.'
000000000020d8c0         db  0xb2 ; '.'
000000000020d8c1         db  0x96 ; '.'
000000000020d8c2         db  0x00 ; '.'
000000000020d8c3         db  0x00 ; '.'
000000000020d8c4         db  0x00 ; '.'
000000000020d8c5         db  0x00 ; '.'
000000000020d8c6         db  0x00 ; '.'
000000000020d8c7         db  0x00 ; '.'
000000000020d8c8         db  0x01 ; '.'
000000000020d8c9         db  0x00 ; '.'
000000000020d8ca         db  0x00 ; '.'
000000000020d8cb         db  0x00 ; '.'
000000000020d8cc         db  0x00 ; '.'
000000000020d8cd         db  0x00 ; '.'
000000000020d8ce         db  0x00 ; '.'
000000000020d8cf         db  0x00 ; '.'
000000000020d8d0         db  0x00 ; '.'
000000000020d8d1         db  0x00 ; '.'
000000000020d8d2         db  0x00 ; '.'
000000000020d8d3         db  0x00 ; '.'
000000000020d8d4         db  0x00 ; '.'
000000000020d8d5         db  0x00 ; '.'
000000000020d8d6         db  0x00 ; '.'
000000000020d8d7         db  0x00 ; '.'
000000000020d8d8         db  0x84 ; '.'
000000000020d8d9         db  0x00 ; '.'
000000000020d8da         db  0x00 ; '.'
000000000020d8db         db  0x00 ; '.'
000000000020d8dc         db  0x00 ; '.'
000000000020d8dd         db  0x00 ; '.'
000000000020d8de         db  0x00 ; '.'
000000000020d8df         db  0x00 ; '.'
000000000020d8e0         db  0x8e ; '.'
000000000020d8e1         db  0x97 ; '.'
000000000020d8e2         db  0x00 ; '.'
000000000020d8e3         db  0x00 ; '.'
000000000020d8e4         db  0x00 ; '.'
000000000020d8e5         db  0x00 ; '.'
000000000020d8e6         db  0x00 ; '.'
000000000020d8e7         db  0x00 ; '.'
000000000020d8e8         db  0x01 ; '.'
000000000020d8e9         db  0x00 ; '.'
000000000020d8ea         db  0x00 ; '.'
000000000020d8eb         db  0x00 ; '.'
000000000020d8ec         db  0x00 ; '.'
000000000020d8ed         db  0x00 ; '.'
000000000020d8ee         db  0x00 ; '.'
000000000020d8ef         db  0x00 ; '.'
000000000020d8f0         db  0x00 ; '.'
000000000020d8f1         db  0x00 ; '.'
000000000020d8f2         db  0x00 ; '.'
000000000020d8f3         db  0x00 ; '.'
000000000020d8f4         db  0x00 ; '.'
000000000020d8f5         db  0x00 ; '.'
000000000020d8f6         db  0x00 ; '.'
000000000020d8f7         db  0x00 ; '.'
000000000020d8f8         db  0x87 ; '.'
000000000020d8f9         db  0x00 ; '.'
000000000020d8fa         db  0x00 ; '.'
000000000020d8fb         db  0x00 ; '.'
000000000020d8fc         db  0x00 ; '.'
000000000020d8fd         db  0x00 ; '.'
000000000020d8fe         db  0x00 ; '.'
000000000020d8ff         db  0x00 ; '.'
000000000020d900         db  0x96 ; '.'
000000000020d901         db  0x97 ; '.'
000000000020d902         db  0x00 ; '.'
000000000020d903         db  0x00 ; '.'
000000000020d904         db  0x00 ; '.'
000000000020d905         db  0x00 ; '.'
000000000020d906         db  0x00 ; '.'
000000000020d907         db  0x00 ; '.'
000000000020d908         db  0x01 ; '.'
000000000020d909         db  0x00 ; '.'
000000000020d90a         db  0x00 ; '.'
000000000020d90b         db  0x00 ; '.'
000000000020d90c         db  0x00 ; '.'
000000000020d90d         db  0x00 ; '.'
000000000020d90e         db  0x00 ; '.'
000000000020d90f         db  0x00 ; '.'
000000000020d910         db  0x00 ; '.'
000000000020d911         db  0x00 ; '.'
000000000020d912         db  0x00 ; '.'
000000000020d913         db  0x00 ; '.'
000000000020d914         db  0x00 ; '.'
000000000020d915         db  0x00 ; '.'
000000000020d916         db  0x00 ; '.'
000000000020d917         db  0x00 ; '.'
000000000020d918         db  0x85 ; '.'
000000000020d919         db  0x00 ; '.'
000000000020d91a         db  0x00 ; '.'
000000000020d91b         db  0x00 ; '.'
000000000020d91c         db  0x00 ; '.'
000000000020d91d         db  0x00 ; '.'
000000000020d91e         db  0x00 ; '.'
000000000020d91f         db  0x00 ; '.'
000000000020d920         db  0x9d ; '.'
000000000020d921         db  0x97 ; '.'
000000000020d922         db  0x00 ; '.'
000000000020d923         db  0x00 ; '.'
000000000020d924         db  0x00 ; '.'
000000000020d925         db  0x00 ; '.'
000000000020d926         db  0x00 ; '.'
000000000020d927         db  0x00 ; '.'
000000000020d928         db  0x00 ; '.'
000000000020d929         db  0x00 ; '.'
000000000020d92a         db  0x00 ; '.'
000000000020d92b         db  0x00 ; '.'
000000000020d92c         db  0x00 ; '.'
000000000020d92d         db  0x00 ; '.'
000000000020d92e         db  0x00 ; '.'
000000000020d92f         db  0x00 ; '.'
000000000020d930         db  0x00 ; '.'
000000000020d931         db  0x00 ; '.'
000000000020d932         db  0x00 ; '.'
000000000020d933         db  0x00 ; '.'
000000000020d934         db  0x00 ; '.'
000000000020d935         db  0x00 ; '.'
000000000020d936         db  0x00 ; '.'
000000000020d937         db  0x00 ; '.'
000000000020d938         db  0x86 ; '.'
000000000020d939         db  0x00 ; '.'
000000000020d93a         db  0x00 ; '.'
000000000020d93b         db  0x00 ; '.'
000000000020d93c         db  0x00 ; '.'
000000000020d93d         db  0x00 ; '.'
000000000020d93e         db  0x00 ; '.'
000000000020d93f         db  0x00 ; '.'
000000000020d940         db  0xa6 ; '.'
000000000020d941         db  0x97 ; '.'
000000000020d942         db  0x00 ; '.'
000000000020d943         db  0x00 ; '.'
000000000020d944         db  0x00 ; '.'
000000000020d945         db  0x00 ; '.'
000000000020d946         db  0x00 ; '.'
000000000020d947         db  0x00 ; '.'
000000000020d948         db  0x01 ; '.'
000000000020d949         db  0x00 ; '.'
000000000020d94a         db  0x00 ; '.'
000000000020d94b         db  0x00 ; '.'
000000000020d94c         db  0x00 ; '.'
000000000020d94d         db  0x00 ; '.'
000000000020d94e         db  0x00 ; '.'
000000000020d94f         db  0x00 ; '.'
000000000020d950         db  0x00 ; '.'
000000000020d951         db  0x00 ; '.'
000000000020d952         db  0x00 ; '.'
000000000020d953         db  0x00 ; '.'
000000000020d954         db  0x00 ; '.'
000000000020d955         db  0x00 ; '.'
000000000020d956         db  0x00 ; '.'
000000000020d957         db  0x00 ; '.'
000000000020d958         db  0x64 ; 'd'
000000000020d959         db  0x00 ; '.'
000000000020d95a         db  0x00 ; '.'
000000000020d95b         db  0x00 ; '.'
000000000020d95c         db  0x00 ; '.'
000000000020d95d         db  0x00 ; '.'
000000000020d95e         db  0x00 ; '.'
000000000020d95f         db  0x00 ; '.'
000000000020d960         db  0xb0 ; '.'
000000000020d961         db  0x97 ; '.'
000000000020d962         db  0x00 ; '.'
000000000020d963         db  0x00 ; '.'
000000000020d964         db  0x00 ; '.'
000000000020d965         db  0x00 ; '.'
000000000020d966         db  0x00 ; '.'
000000000020d967         db  0x00 ; '.'
000000000020d968         db  0x01 ; '.'
000000000020d969         db  0x00 ; '.'
000000000020d96a         db  0x00 ; '.'
000000000020d96b         db  0x00 ; '.'
000000000020d96c         db  0x00 ; '.'
000000000020d96d         db  0x00 ; '.'
000000000020d96e         db  0x00 ; '.'
000000000020d96f         db  0x00 ; '.'
000000000020d970         db  0x00 ; '.'
000000000020d971         db  0x00 ; '.'
000000000020d972         db  0x00 ; '.'
000000000020d973         db  0x00 ; '.'
000000000020d974         db  0x00 ; '.'
000000000020d975         db  0x00 ; '.'
000000000020d976         db  0x00 ; '.'
000000000020d977         db  0x00 ; '.'
000000000020d978         db  0x88 ; '.'
000000000020d979         db  0x00 ; '.'
000000000020d97a         db  0x00 ; '.'
000000000020d97b         db  0x00 ; '.'
000000000020d97c         db  0x00 ; '.'
000000000020d97d         db  0x00 ; '.'
000000000020d97e         db  0x00 ; '.'
000000000020d97f         db  0x00 ; '.'
000000000020d980         db  0xb7 ; '.'
000000000020d981         db  0x97 ; '.'
000000000020d982         db  0x00 ; '.'
000000000020d983         db  0x00 ; '.'
000000000020d984         db  0x00 ; '.'
000000000020d985         db  0x00 ; '.'
000000000020d986         db  0x00 ; '.'
000000000020d987         db  0x00 ; '.'
000000000020d988         db  0x00 ; '.'
000000000020d989         db  0x00 ; '.'
000000000020d98a         db  0x00 ; '.'
000000000020d98b         db  0x00 ; '.'
000000000020d98c         db  0x00 ; '.'
000000000020d98d         db  0x00 ; '.'
000000000020d98e         db  0x00 ; '.'
000000000020d98f         db  0x00 ; '.'
000000000020d990         db  0x00 ; '.'
000000000020d991         db  0x00 ; '.'
000000000020d992         db  0x00 ; '.'
000000000020d993         db  0x00 ; '.'
000000000020d994         db  0x00 ; '.'
000000000020d995         db  0x00 ; '.'
000000000020d996         db  0x00 ; '.'
000000000020d997         db  0x00 ; '.'
000000000020d998         db  0x89 ; '.'
000000000020d999         db  0x00 ; '.'
000000000020d99a         db  0x00 ; '.'
000000000020d99b         db  0x00 ; '.'
000000000020d99c         db  0x00 ; '.'
000000000020d99d         db  0x00 ; '.'
000000000020d99e         db  0x00 ; '.'
000000000020d99f         db  0x00 ; '.'
000000000020d9a0         db  0xb6 ; '.'
000000000020d9a1         db  0x97 ; '.'
000000000020d9a2         db  0x00 ; '.'
000000000020d9a3         db  0x00 ; '.'
000000000020d9a4         db  0x00 ; '.'
000000000020d9a5         db  0x00 ; '.'
000000000020d9a6         db  0x00 ; '.'
000000000020d9a7         db  0x00 ; '.'
000000000020d9a8         db  0x00 ; '.'
000000000020d9a9         db  0x00 ; '.'
000000000020d9aa         db  0x00 ; '.'
000000000020d9ab         db  0x00 ; '.'
000000000020d9ac         db  0x00 ; '.'
000000000020d9ad         db  0x00 ; '.'
000000000020d9ae         db  0x00 ; '.'
000000000020d9af         db  0x00 ; '.'
000000000020d9b0         db  0x00 ; '.'
000000000020d9b1         db  0x00 ; '.'
000000000020d9b2         db  0x00 ; '.'
000000000020d9b3         db  0x00 ; '.'
000000000020d9b4         db  0x00 ; '.'
000000000020d9b5         db  0x00 ; '.'
000000000020d9b6         db  0x00 ; '.'
000000000020d9b7         db  0x00 ; '.'
000000000020d9b8         db  0x8a ; '.'
000000000020d9b9         db  0x00 ; '.'
000000000020d9ba         db  0x00 ; '.'
000000000020d9bb         db  0x00 ; '.'
000000000020d9bc         db  0x00 ; '.'
000000000020d9bd         db  0x00 ; '.'
000000000020d9be         db  0x00 ; '.'
000000000020d9bf         db  0x00 ; '.'
000000000020d9c0         db  0xbd ; '.'
000000000020d9c1         db  0x97 ; '.'
000000000020d9c2         db  0x00 ; '.'
000000000020d9c3         db  0x00 ; '.'
000000000020d9c4         db  0x00 ; '.'
000000000020d9c5         db  0x00 ; '.'
000000000020d9c6         db  0x00 ; '.'
000000000020d9c7         db  0x00 ; '.'
000000000020d9c8         db  0x02 ; '.'
000000000020d9c9         db  0x00 ; '.'
000000000020d9ca         db  0x00 ; '.'
000000000020d9cb         db  0x00 ; '.'
000000000020d9cc         db  0x00 ; '.'
000000000020d9cd         db  0x00 ; '.'
000000000020d9ce         db  0x00 ; '.'
000000000020d9cf         db  0x00 ; '.'
000000000020d9d0         db  0x00 ; '.'
000000000020d9d1         db  0x00 ; '.'
000000000020d9d2         db  0x00 ; '.'
000000000020d9d3         db  0x00 ; '.'
000000000020d9d4         db  0x00 ; '.'
000000000020d9d5         db  0x00 ; '.'
000000000020d9d6         db  0x00 ; '.'
000000000020d9d7         db  0x00 ; '.'
000000000020d9d8         db  0x8b ; '.'
000000000020d9d9         db  0x00 ; '.'
000000000020d9da         db  0x00 ; '.'
000000000020d9db         db  0x00 ; '.'
000000000020d9dc         db  0x00 ; '.'
000000000020d9dd         db  0x00 ; '.'
000000000020d9de         db  0x00 ; '.'
000000000020d9df         db  0x00 ; '.'
000000000020d9e0         db  0xc4 ; '.'
000000000020d9e1         db  0x97 ; '.'
000000000020d9e2         db  0x00 ; '.'
000000000020d9e3         db  0x00 ; '.'
000000000020d9e4         db  0x00 ; '.'
000000000020d9e5         db  0x00 ; '.'
000000000020d9e6         db  0x00 ; '.'
000000000020d9e7         db  0x00 ; '.'
000000000020d9e8         db  0x01 ; '.'
000000000020d9e9         db  0x00 ; '.'
000000000020d9ea         db  0x00 ; '.'
000000000020d9eb         db  0x00 ; '.'
000000000020d9ec         db  0x00 ; '.'
000000000020d9ed         db  0x00 ; '.'
000000000020d9ee         db  0x00 ; '.'
000000000020d9ef         db  0x00 ; '.'
000000000020d9f0         db  0x00 ; '.'
000000000020d9f1         db  0x00 ; '.'
000000000020d9f2         db  0x00 ; '.'
000000000020d9f3         db  0x00 ; '.'
000000000020d9f4         db  0x00 ; '.'
000000000020d9f5         db  0x00 ; '.'
000000000020d9f6         db  0x00 ; '.'
000000000020d9f7         db  0x00 ; '.'
000000000020d9f8         db  0x8c ; '.'
000000000020d9f9         db  0x00 ; '.'
000000000020d9fa         db  0x00 ; '.'
000000000020d9fb         db  0x00 ; '.'
000000000020d9fc         db  0x00 ; '.'
000000000020d9fd         db  0x00 ; '.'
000000000020d9fe         db  0x00 ; '.'
000000000020d9ff         db  0x00 ; '.'
000000000020da00         db  0x09 ; '.'
000000000020da01         db  0x97 ; '.'
000000000020da02         db  0x00 ; '.'
000000000020da03         db  0x00 ; '.'
000000000020da04         db  0x00 ; '.'
000000000020da05         db  0x00 ; '.'
000000000020da06         db  0x00 ; '.'
000000000020da07         db  0x00 ; '.'
000000000020da08         db  0x01 ; '.'
000000000020da09         db  0x00 ; '.'
000000000020da0a         db  0x00 ; '.'
000000000020da0b         db  0x00 ; '.'
000000000020da0c         db  0x00 ; '.'
000000000020da0d         db  0x00 ; '.'
000000000020da0e         db  0x00 ; '.'
000000000020da0f         db  0x00 ; '.'
000000000020da10         db  0x00 ; '.'
000000000020da11         db  0x00 ; '.'
000000000020da12         db  0x00 ; '.'
000000000020da13         db  0x00 ; '.'
000000000020da14         db  0x00 ; '.'
000000000020da15         db  0x00 ; '.'
000000000020da16         db  0x00 ; '.'
000000000020da17         db  0x00 ; '.'
000000000020da18         db  0x8d ; '.'
000000000020da19         db  0x00 ; '.'
000000000020da1a         db  0x00 ; '.'
000000000020da1b         db  0x00 ; '.'
000000000020da1c         db  0x00 ; '.'
000000000020da1d         db  0x00 ; '.'
000000000020da1e         db  0x00 ; '.'
000000000020da1f         db  0x00 ; '.'
000000000020da20         db  0xcb ; '.'
000000000020da21         db  0x97 ; '.'
000000000020da22         db  0x00 ; '.'
000000000020da23         db  0x00 ; '.'
000000000020da24         db  0x00 ; '.'
000000000020da25         db  0x00 ; '.'
000000000020da26         db  0x00 ; '.'
000000000020da27         db  0x00 ; '.'
000000000020da28         db  0x00 ; '.'
000000000020da29         db  0x00 ; '.'
000000000020da2a         db  0x00 ; '.'
000000000020da2b         db  0x00 ; '.'
000000000020da2c         db  0x00 ; '.'
000000000020da2d         db  0x00 ; '.'
000000000020da2e         db  0x00 ; '.'
000000000020da2f         db  0x00 ; '.'
000000000020da30         db  0x00 ; '.'
000000000020da31         db  0x00 ; '.'
000000000020da32         db  0x00 ; '.'
000000000020da33         db  0x00 ; '.'
000000000020da34         db  0x00 ; '.'
000000000020da35         db  0x00 ; '.'
000000000020da36         db  0x00 ; '.'
000000000020da37         db  0x00 ; '.'
000000000020da38         db  0x7a ; 'z'
000000000020da39         db  0x00 ; '.'
000000000020da3a         db  0x00 ; '.'
000000000020da3b         db  0x00 ; '.'
000000000020da3c         db  0x00 ; '.'
000000000020da3d         db  0x00 ; '.'
000000000020da3e         db  0x00 ; '.'
000000000020da3f         db  0x00 ; '.'
000000000020da40         db  0xdb ; '.'
000000000020da41         db  0x97 ; '.'
000000000020da42         db  0x00 ; '.'
000000000020da43         db  0x00 ; '.'
000000000020da44         db  0x00 ; '.'
000000000020da45         db  0x00 ; '.'
000000000020da46         db  0x00 ; '.'
000000000020da47         db  0x00 ; '.'
000000000020da48         db  0x00 ; '.'
000000000020da49         db  0x00 ; '.'
000000000020da4a         db  0x00 ; '.'
000000000020da4b         db  0x00 ; '.'
000000000020da4c         db  0x00 ; '.'
000000000020da4d         db  0x00 ; '.'
000000000020da4e         db  0x00 ; '.'
000000000020da4f         db  0x00 ; '.'
000000000020da50         db  0x00 ; '.'
000000000020da51         db  0x00 ; '.'
000000000020da52         db  0x00 ; '.'
000000000020da53         db  0x00 ; '.'
000000000020da54         db  0x00 ; '.'
000000000020da55         db  0x00 ; '.'
000000000020da56         db  0x00 ; '.'
000000000020da57         db  0x00 ; '.'
000000000020da58         db  0x7e ; '~'
000000000020da59         db  0xff ; '.'
000000000020da5a         db  0xff ; '.'
000000000020da5b         db  0xff ; '.'
000000000020da5c         db  0x00 ; '.'
000000000020da5d         db  0x00 ; '.'
000000000020da5e         db  0x00 ; '.'
000000000020da5f         db  0x00 ; '.'
000000000020da60         db  0xe0 ; '.'
000000000020da61         db  0x97 ; '.'
000000000020da62         db  0x00 ; '.'
000000000020da63         db  0x00 ; '.'
000000000020da64         db  0x00 ; '.'
000000000020da65         db  0x00 ; '.'
000000000020da66         db  0x00 ; '.'
000000000020da67         db  0x00 ; '.'
000000000020da68         db  0x00 ; '.'
000000000020da69         db  0x00 ; '.'
000000000020da6a         db  0x00 ; '.'
000000000020da6b         db  0x00 ; '.'
000000000020da6c         db  0x00 ; '.'
000000000020da6d         db  0x00 ; '.'
000000000020da6e         db  0x00 ; '.'
000000000020da6f         db  0x00 ; '.'
000000000020da70         db  0x00 ; '.'
000000000020da71         db  0x00 ; '.'
000000000020da72         db  0x00 ; '.'
000000000020da73         db  0x00 ; '.'
000000000020da74         db  0x00 ; '.'
000000000020da75         db  0x00 ; '.'
000000000020da76         db  0x00 ; '.'
000000000020da77         db  0x00 ; '.'
000000000020da78         db  0x7d ; '}'
000000000020da79         db  0xff ; '.'
000000000020da7a         db  0xff ; '.'
000000000020da7b         db  0xff ; '.'
000000000020da7c         db  0x00 ; '.'
000000000020da7d         db  0x00 ; '.'
000000000020da7e         db  0x00 ; '.'
000000000020da7f         db  0x00 ; '.'
000000000020da80         db  0x00 ; '.'
000000000020da81         db  0x00 ; '.'
000000000020da82         db  0x00 ; '.'
000000000020da83         db  0x00 ; '.'
000000000020da84         db  0x00 ; '.'
000000000020da85         db  0x00 ; '.'
000000000020da86         db  0x00 ; '.'
000000000020da87         db  0x00 ; '.'
000000000020da88         db  0x00 ; '.'
000000000020da89         db  0x00 ; '.'
000000000020da8a         db  0x00 ; '.'
000000000020da8b         db  0x00 ; '.'
000000000020da8c         db  0x00 ; '.'
000000000020da8d         db  0x00 ; '.'
000000000020da8e         db  0x00 ; '.'
000000000020da8f         db  0x00 ; '.'
000000000020da90         db  0x00 ; '.'
000000000020da91         db  0x00 ; '.'
000000000020da92         db  0x00 ; '.'
000000000020da93         db  0x00 ; '.'
000000000020da94         db  0x00 ; '.'
000000000020da95         db  0x00 ; '.'
000000000020da96         db  0x00 ; '.'
000000000020da97         db  0x00 ; '.'
000000000020da98         db  0x00 ; '.'
000000000020da99         db  0x00 ; '.'
000000000020da9a         db  0x00 ; '.'
000000000020da9b         db  0x00 ; '.'
000000000020da9c         db  0x00 ; '.'
000000000020da9d         db  0x00 ; '.'
000000000020da9e         db  0x00 ; '.'
000000000020da9f         db  0x00 ; '.'
                     inval_args:
000000000020daa0         db  0xe8 ; '.'                                         ; DATA XREF=main+465
000000000020daa1         db  0x97 ; '.'
000000000020daa2         db  0x00 ; '.'
000000000020daa3         db  0x00 ; '.'
000000000020daa4         db  0x00 ; '.'
000000000020daa5         db  0x00 ; '.'
000000000020daa6         db  0x00 ; '.'
000000000020daa7         db  0x00 ; '.'
000000000020daa8         db  0xee ; '.'
000000000020daa9         db  0x97 ; '.'
000000000020daaa         db  0x00 ; '.'
000000000020daab         db  0x00 ; '.'
000000000020daac         db  0x00 ; '.'
000000000020daad         db  0x00 ; '.'
000000000020daae         db  0x00 ; '.'
000000000020daaf         db  0x00 ; '.'
000000000020dab0         db  0xf3 ; '.'
000000000020dab1         db  0x97 ; '.'
000000000020dab2         db  0x00 ; '.'
000000000020dab3         db  0x00 ; '.'
000000000020dab4         db  0x00 ; '.'
000000000020dab5         db  0x00 ; '.'
000000000020dab6         db  0x00 ; '.'
000000000020dab7         db  0x00 ; '.'
000000000020dab8         db  0xf8 ; '.'
000000000020dab9         db  0x97 ; '.'
000000000020daba         db  0x00 ; '.'
000000000020dabb         db  0x00 ; '.'
000000000020dabc         db  0x00 ; '.'
000000000020dabd         db  0x00 ; '.'
000000000020dabe         db  0x00 ; '.'
000000000020dabf         db  0x00 ; '.'
000000000020dac0         db  0x00 ; '.'
000000000020dac1         db  0x00 ; '.'
000000000020dac2         db  0x00 ; '.'
000000000020dac3         db  0x00 ; '.'
000000000020dac4         db  0x00 ; '.'
000000000020dac5         db  0x00 ; '.'
000000000020dac6         db  0x00 ; '.'
000000000020dac7         db  0x00 ; '.'
000000000020dac8         db  0x00 ; '.'
000000000020dac9         db  0x00 ; '.'
000000000020daca         db  0x00 ; '.'
000000000020dacb         db  0x00 ; '.'
000000000020dacc         db  0x00 ; '.'
000000000020dacd         db  0x00 ; '.'
000000000020dace         db  0x00 ; '.'
000000000020dacf         db  0x00 ; '.'
000000000020dad0         db  0x00 ; '.'
000000000020dad1         db  0x00 ; '.'
000000000020dad2         db  0x00 ; '.'
000000000020dad3         db  0x00 ; '.'
000000000020dad4         db  0x00 ; '.'
000000000020dad5         db  0x00 ; '.'
000000000020dad6         db  0x00 ; '.'
000000000020dad7         db  0x00 ; '.'
000000000020dad8         db  0x00 ; '.'
000000000020dad9         db  0x00 ; '.'
000000000020dada         db  0x00 ; '.'
000000000020dadb         db  0x00 ; '.'
000000000020dadc         db  0x00 ; '.'
000000000020dadd         db  0x00 ; '.'
000000000020dade         db  0x00 ; '.'
000000000020dadf         db  0x00 ; '.'
                     round_args:
000000000020dae0         db  0xff ; '.'                                         ; DATA XREF=main+1022
000000000020dae1         db  0x97 ; '.'
000000000020dae2         db  0x00 ; '.'
000000000020dae3         db  0x00 ; '.'
000000000020dae4         db  0x00 ; '.'
000000000020dae5         db  0x00 ; '.'
000000000020dae6         db  0x00 ; '.'
000000000020dae7         db  0x00 ; '.'
000000000020dae8         db  0x02 ; '.'
000000000020dae9         db  0x98 ; '.'
000000000020daea         db  0x00 ; '.'
000000000020daeb         db  0x00 ; '.'
000000000020daec         db  0x00 ; '.'
000000000020daed         db  0x00 ; '.'
000000000020daee         db  0x00 ; '.'
000000000020daef         db  0x00 ; '.'
000000000020daf0         db  0x07 ; '.'
000000000020daf1         db  0x98 ; '.'
000000000020daf2         db  0x00 ; '.'
000000000020daf3         db  0x00 ; '.'
000000000020daf4         db  0x00 ; '.'
000000000020daf5         db  0x00 ; '.'
000000000020daf6         db  0x00 ; '.'
000000000020daf7         db  0x00 ; '.'
000000000020daf8         db  0x11 ; '.'
000000000020daf9         db  0x98 ; '.'
000000000020dafa         db  0x00 ; '.'
000000000020dafb         db  0x00 ; '.'
000000000020dafc         db  0x00 ; '.'
000000000020dafd         db  0x00 ; '.'
000000000020dafe         db  0x00 ; '.'
000000000020daff         db  0x00 ; '.'
000000000020db00         db  0x1e ; '.'
000000000020db01         db  0x98 ; '.'
000000000020db02         db  0x00 ; '.'
000000000020db03         db  0x00 ; '.'
000000000020db04         db  0x00 ; '.'
000000000020db05         db  0x00 ; '.'
000000000020db06         db  0x00 ; '.'
000000000020db07         db  0x00 ; '.'
000000000020db08         db  0x00 ; '.'
000000000020db09         db  0x00 ; '.'
000000000020db0a         db  0x00 ; '.'
000000000020db0b         db  0x00 ; '.'
000000000020db0c         db  0x00 ; '.'
000000000020db0d         db  0x00 ; '.'
000000000020db0e         db  0x00 ; '.'
000000000020db0f         db  0x00 ; '.'
000000000020db10         db  0x00 ; '.'
000000000020db11         db  0x00 ; '.'
000000000020db12         db  0x00 ; '.'
000000000020db13         db  0x00 ; '.'
000000000020db14         db  0x00 ; '.'
000000000020db15         db  0x00 ; '.'
000000000020db16         db  0x00 ; '.'
000000000020db17         db  0x00 ; '.'
000000000020db18         db  0x00 ; '.'
000000000020db19         db  0x00 ; '.'
000000000020db1a         db  0x00 ; '.'
000000000020db1b         db  0x00 ; '.'
000000000020db1c         db  0x00 ; '.'
000000000020db1d         db  0x00 ; '.'
000000000020db1e         db  0x00 ; '.'
000000000020db1f         db  0x00 ; '.'
                     scale_to_args:
000000000020db20         db  0x26 ; '&'                                         ; DATA XREF=main+854
000000000020db21         db  0x98 ; '.'
000000000020db22         db  0x00 ; '.'
000000000020db23         db  0x00 ; '.'
000000000020db24         db  0x00 ; '.'
000000000020db25         db  0x00 ; '.'
000000000020db26         db  0x00 ; '.'
000000000020db27         db  0x00 ; '.'
000000000020db28         db  0x2b ; '+'
000000000020db29         db  0x98 ; '.'
000000000020db2a         db  0x00 ; '.'
000000000020db2b         db  0x00 ; '.'
000000000020db2c         db  0x00 ; '.'
000000000020db2d         db  0x00 ; '.'
000000000020db2e         db  0x00 ; '.'
000000000020db2f         db  0x00 ; '.'
000000000020db30         db  0x2e ; '.'
000000000020db31         db  0x98 ; '.'
000000000020db32         db  0x00 ; '.'
000000000020db33         db  0x00 ; '.'
000000000020db34         db  0x00 ; '.'
000000000020db35         db  0x00 ; '.'
000000000020db36         db  0x00 ; '.'
000000000020db37         db  0x00 ; '.'
000000000020db38         db  0x32 ; '2'
000000000020db39         db  0x98 ; '.'
000000000020db3a         db  0x00 ; '.'
000000000020db3b         db  0x00 ; '.'
000000000020db3c         db  0x00 ; '.'
000000000020db3d         db  0x00 ; '.'
000000000020db3e         db  0x00 ; '.'
000000000020db3f         db  0x00 ; '.'
000000000020db40         db  0x00 ; '.'
000000000020db41         db  0x00 ; '.'
000000000020db42         db  0x00 ; '.'
000000000020db43         db  0x00 ; '.'
000000000020db44         db  0x00 ; '.'
000000000020db45         db  0x00 ; '.'
000000000020db46         db  0x00 ; '.'
000000000020db47         db  0x00 ; '.'
000000000020db48         db  0x00 ; '.'
000000000020db49         db  0x00 ; '.'
000000000020db4a         db  0x00 ; '.'
000000000020db4b         db  0x00 ; '.'
000000000020db4c         db  0x00 ; '.'
000000000020db4d         db  0x00 ; '.'
000000000020db4e         db  0x00 ; '.'
000000000020db4f         db  0x00 ; '.'
000000000020db50         db  0x00 ; '.'
000000000020db51         db  0x00 ; '.'
000000000020db52         db  0x00 ; '.'
000000000020db53         db  0x00 ; '.'
000000000020db54         db  0x00 ; '.'
000000000020db55         db  0x00 ; '.'
000000000020db56         db  0x00 ; '.'
000000000020db57         db  0x00 ; '.'
000000000020db58         db  0x00 ; '.'
000000000020db59         db  0x00 ; '.'
000000000020db5a         db  0x00 ; '.'
000000000020db5b         db  0x00 ; '.'
000000000020db5c         db  0x00 ; '.'
000000000020db5d         db  0x00 ; '.'
000000000020db5e         db  0x00 ; '.'
000000000020db5f         db  0x00 ; '.'
                     scale_from_args:
000000000020db60         db  0x26 ; '&'                                         ; DATA XREF=main+667
000000000020db61         db  0x98 ; '.'
000000000020db62         db  0x00 ; '.'
000000000020db63         db  0x00 ; '.'
000000000020db64         db  0x00 ; '.'
000000000020db65         db  0x00 ; '.'
000000000020db66         db  0x00 ; '.'
000000000020db67         db  0x00 ; '.'
000000000020db68         db  0x38 ; '8'
000000000020db69         db  0x98 ; '.'
000000000020db6a         db  0x00 ; '.'
000000000020db6b         db  0x00 ; '.'
000000000020db6c         db  0x00 ; '.'
000000000020db6d         db  0x00 ; '.'
000000000020db6e         db  0x00 ; '.'
000000000020db6f         db  0x00 ; '.'
000000000020db70         db  0x2b ; '+'
000000000020db71         db  0x98 ; '.'
000000000020db72         db  0x00 ; '.'
000000000020db73         db  0x00 ; '.'
000000000020db74         db  0x00 ; '.'
000000000020db75         db  0x00 ; '.'
000000000020db76         db  0x00 ; '.'
000000000020db77         db  0x00 ; '.'
000000000020db78         db  0x2e ; '.'
000000000020db79         db  0x98 ; '.'
000000000020db7a         db  0x00 ; '.'
000000000020db7b         db  0x00 ; '.'
000000000020db7c         db  0x00 ; '.'
000000000020db7d         db  0x00 ; '.'
000000000020db7e         db  0x00 ; '.'
000000000020db7f         db  0x00 ; '.'
000000000020db80         db  0x32 ; '2'
000000000020db81         db  0x98 ; '.'
000000000020db82         db  0x00 ; '.'
000000000020db83         db  0x00 ; '.'
000000000020db84         db  0x00 ; '.'
000000000020db85         db  0x00 ; '.'
000000000020db86         db  0x00 ; '.'
000000000020db87         db  0x00 ; '.'
000000000020db88         db  0x00 ; '.'
000000000020db89         db  0x00 ; '.'
000000000020db8a         db  0x00 ; '.'
000000000020db8b         db  0x00 ; '.'
000000000020db8c         db  0x00 ; '.'
000000000020db8d         db  0x00 ; '.'
000000000020db8e         db  0x00 ; '.'
000000000020db8f         db  0x00 ; '.'
000000000020db90         db  0x00 ; '.'
000000000020db91         db  0x00 ; '.'
000000000020db92         db  0x00 ; '.'
000000000020db93         db  0x00 ; '.'
000000000020db94         db  0x00 ; '.'
000000000020db95         db  0x00 ; '.'
000000000020db96         db  0x00 ; '.'
000000000020db97         db  0x00 ; '.'
000000000020db98         db  0x00 ; '.'
000000000020db99         db  0x00 ; '.'
000000000020db9a         db  0x00 ; '.'
000000000020db9b         db  0x00 ; '.'
000000000020db9c         db  0x00 ; '.'
000000000020db9d         db  0x00 ; '.'
000000000020db9e         db  0x00 ; '.'
000000000020db9f         db  0x00 ; '.'
                     quoting_style_args:
000000000020dba0         db  0x71 ; 'q'
000000000020dba1         db  0xb4 ; '.'
000000000020dba2         db  0x00 ; '.'
000000000020dba3         db  0x00 ; '.'
000000000020dba4         db  0x00 ; '.'
000000000020dba5         db  0x00 ; '.'
000000000020dba6         db  0x00 ; '.'
000000000020dba7         db  0x00 ; '.'
000000000020dba8         db  0x79 ; 'y'
000000000020dba9         db  0xb4 ; '.'
000000000020dbaa         db  0x00 ; '.'
000000000020dbab         db  0x00 ; '.'
000000000020dbac         db  0x00 ; '.'
000000000020dbad         db  0x00 ; '.'
000000000020dbae         db  0x00 ; '.'
000000000020dbaf         db  0x00 ; '.'
000000000020dbb0         db  0x7f ; '.'
000000000020dbb1         db  0xb4 ; '.'
000000000020dbb2         db  0x00 ; '.'
000000000020dbb3         db  0x00 ; '.'
000000000020dbb4         db  0x00 ; '.'
000000000020dbb5         db  0x00 ; '.'
000000000020dbb6         db  0x00 ; '.'
000000000020dbb7         db  0x00 ; '.'
000000000020dbb8         db  0x8c ; '.'
000000000020dbb9         db  0xb4 ; '.'
000000000020dbba         db  0x00 ; '.'
000000000020dbbb         db  0x00 ; '.'
000000000020dbbc         db  0x00 ; '.'
000000000020dbbd         db  0x00 ; '.'
000000000020dbbe         db  0x00 ; '.'
000000000020dbbf         db  0x00 ; '.'
000000000020dbc0         db  0x99 ; '.'
000000000020dbc1         db  0xb4 ; '.'
000000000020dbc2         db  0x00 ; '.'
000000000020dbc3         db  0x00 ; '.'
000000000020dbc4         db  0x00 ; '.'
000000000020dbc5         db  0x00 ; '.'
000000000020dbc6         db  0x00 ; '.'
000000000020dbc7         db  0x00 ; '.'
000000000020dbc8         db  0x30 ; '0'
000000000020dbc9         db  0x98 ; '.'
000000000020dbca         db  0x00 ; '.'
000000000020dbcb         db  0x00 ; '.'
000000000020dbcc         db  0x00 ; '.'
000000000020dbcd         db  0x00 ; '.'
000000000020dbce         db  0x00 ; '.'
000000000020dbcf         db  0x00 ; '.'
000000000020dbd0         db  0xad ; '.'
000000000020dbd1         db  0xb4 ; '.'
000000000020dbd2         db  0x00 ; '.'
000000000020dbd3         db  0x00 ; '.'
000000000020dbd4         db  0x00 ; '.'
000000000020dbd5         db  0x00 ; '.'
000000000020dbd6         db  0x00 ; '.'
000000000020dbd7         db  0x00 ; '.'
000000000020dbd8         db  0x92 ; '.'
000000000020dbd9         db  0xb4 ; '.'
000000000020dbda         db  0x00 ; '.'
000000000020dbdb         db  0x00 ; '.'
000000000020dbdc         db  0x00 ; '.'
000000000020dbdd         db  0x00 ; '.'
000000000020dbde         db  0x00 ; '.'
000000000020dbdf         db  0x00 ; '.'
000000000020dbe0         db  0x2c ; ','
000000000020dbe1         db  0x97 ; '.'
000000000020dbe2         db  0x00 ; '.'
000000000020dbe3         db  0x00 ; '.'
000000000020dbe4         db  0x00 ; '.'
000000000020dbe5         db  0x00 ; '.'
000000000020dbe6         db  0x00 ; '.'
000000000020dbe7         db  0x00 ; '.'
000000000020dbe8         db  0xb5 ; '.'
000000000020dbe9         db  0xb4 ; '.'
000000000020dbea         db  0x00 ; '.'
000000000020dbeb         db  0x00 ; '.'
000000000020dbec         db  0x00 ; '.'
000000000020dbed         db  0x00 ; '.'
000000000020dbee         db  0x00 ; '.'
000000000020dbef         db  0x00 ; '.'
000000000020dbf0         db  0x00 ; '.'
000000000020dbf1         db  0x00 ; '.'
000000000020dbf2         db  0x00 ; '.'
000000000020dbf3         db  0x00 ; '.'
000000000020dbf4         db  0x00 ; '.'
000000000020dbf5         db  0x00 ; '.'
000000000020dbf6         db  0x00 ; '.'
000000000020dbf7         db  0x00 ; '.'


        ; Section .dynamic
        ; Range: [0x20dbf8; 0x20dde8[ (496 bytes)
        ; File offset : [56312; 56808[ (496 bytes)
        ; Flags: 0x3
        ;   SHT_DYNAMIC
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     _DYNAMIC:
000000000020dbf8         db  0x01 ; '.'
000000000020dbf9         db  0x00 ; '.'
000000000020dbfa         db  0x00 ; '.'
000000000020dbfb         db  0x00 ; '.'
000000000020dbfc         db  0x00 ; '.'
000000000020dbfd         db  0x00 ; '.'
000000000020dbfe         db  0x00 ; '.'
000000000020dbff         db  0x00 ; '.'
000000000020dc00         db  0x01 ; '.'
000000000020dc01         db  0x00 ; '.'
000000000020dc02         db  0x00 ; '.'
000000000020dc03         db  0x00 ; '.'
000000000020dc04         db  0x00 ; '.'
000000000020dc05         db  0x00 ; '.'
000000000020dc06         db  0x00 ; '.'
000000000020dc07         db  0x00 ; '.'
000000000020dc08         db  0x0c ; '.'
000000000020dc09         db  0x00 ; '.'
000000000020dc0a         db  0x00 ; '.'
000000000020dc0b         db  0x00 ; '.'
000000000020dc0c         db  0x00 ; '.'
000000000020dc0d         db  0x00 ; '.'
000000000020dc0e         db  0x00 ; '.'
000000000020dc0f         db  0x00 ; '.'
000000000020dc10         db  0x70 ; 'p'
000000000020dc11         db  0x19 ; '.'
000000000020dc12         db  0x00 ; '.'
000000000020dc13         db  0x00 ; '.'
000000000020dc14         db  0x00 ; '.'
000000000020dc15         db  0x00 ; '.'
000000000020dc16         db  0x00 ; '.'
000000000020dc17         db  0x00 ; '.'
000000000020dc18         db  0x0d ; '.'
000000000020dc19         db  0x00 ; '.'
000000000020dc1a         db  0x00 ; '.'
000000000020dc1b         db  0x00 ; '.'
000000000020dc1c         db  0x00 ; '.'
000000000020dc1d         db  0x00 ; '.'
000000000020dc1e         db  0x00 ; '.'
000000000020dc1f         db  0x00 ; '.'
000000000020dc20         db  0x80 ; '.'
000000000020dc21         db  0x94 ; '.'
000000000020dc22         db  0x00 ; '.'
000000000020dc23         db  0x00 ; '.'
000000000020dc24         db  0x00 ; '.'
000000000020dc25         db  0x00 ; '.'
000000000020dc26         db  0x00 ; '.'
000000000020dc27         db  0x00 ; '.'
000000000020dc28         db  0x19 ; '.'
000000000020dc29         db  0x00 ; '.'
000000000020dc2a         db  0x00 ; '.'
000000000020dc2b         db  0x00 ; '.'
000000000020dc2c         db  0x00 ; '.'
000000000020dc2d         db  0x00 ; '.'
000000000020dc2e         db  0x00 ; '.'
000000000020dc2f         db  0x00 ; '.'
000000000020dc30         db  0x30 ; '0'
000000000020dc31         db  0xd8 ; '.'
000000000020dc32         db  0x20 ; ' '
000000000020dc33         db  0x00 ; '.'
000000000020dc34         db  0x00 ; '.'
000000000020dc35         db  0x00 ; '.'
000000000020dc36         db  0x00 ; '.'
000000000020dc37         db  0x00 ; '.'
000000000020dc38         db  0x1b ; '.'
000000000020dc39         db  0x00 ; '.'
000000000020dc3a         db  0x00 ; '.'
000000000020dc3b         db  0x00 ; '.'
000000000020dc3c         db  0x00 ; '.'
000000000020dc3d         db  0x00 ; '.'
000000000020dc3e         db  0x00 ; '.'
000000000020dc3f         db  0x00 ; '.'
000000000020dc40         db  0x08 ; '.'
000000000020dc41         db  0x00 ; '.'
000000000020dc42         db  0x00 ; '.'
000000000020dc43         db  0x00 ; '.'
000000000020dc44         db  0x00 ; '.'
000000000020dc45         db  0x00 ; '.'
000000000020dc46         db  0x00 ; '.'
000000000020dc47         db  0x00 ; '.'
000000000020dc48         db  0x1a ; '.'
000000000020dc49         db  0x00 ; '.'
000000000020dc4a         db  0x00 ; '.'
000000000020dc4b         db  0x00 ; '.'
000000000020dc4c         db  0x00 ; '.'
000000000020dc4d         db  0x00 ; '.'
000000000020dc4e         db  0x00 ; '.'
000000000020dc4f         db  0x00 ; '.'
000000000020dc50         db  0x38 ; '8'
000000000020dc51         db  0xd8 ; '.'
000000000020dc52         db  0x20 ; ' '
000000000020dc53         db  0x00 ; '.'
000000000020dc54         db  0x00 ; '.'
000000000020dc55         db  0x00 ; '.'
000000000020dc56         db  0x00 ; '.'
000000000020dc57         db  0x00 ; '.'
000000000020dc58         db  0x1c ; '.'
000000000020dc59         db  0x00 ; '.'
000000000020dc5a         db  0x00 ; '.'
000000000020dc5b         db  0x00 ; '.'
000000000020dc5c         db  0x00 ; '.'
000000000020dc5d         db  0x00 ; '.'
000000000020dc5e         db  0x00 ; '.'
000000000020dc5f         db  0x00 ; '.'
000000000020dc60         db  0x08 ; '.'
000000000020dc61         db  0x00 ; '.'
000000000020dc62         db  0x00 ; '.'
000000000020dc63         db  0x00 ; '.'
000000000020dc64         db  0x00 ; '.'
000000000020dc65         db  0x00 ; '.'
000000000020dc66         db  0x00 ; '.'
000000000020dc67         db  0x00 ; '.'
000000000020dc68         db  0xf5 ; '.'
000000000020dc69         db  0xfe ; '.'
000000000020dc6a         db  0xff ; '.'
000000000020dc6b         db  0x6f ; 'o'
000000000020dc6c         db  0x00 ; '.'
000000000020dc6d         db  0x00 ; '.'
000000000020dc6e         db  0x00 ; '.'
000000000020dc6f         db  0x00 ; '.'
000000000020dc70         db  0x98 ; '.'
000000000020dc71         db  0x02 ; '.'
000000000020dc72         db  0x00 ; '.'
000000000020dc73         db  0x00 ; '.'
000000000020dc74         db  0x00 ; '.'
000000000020dc75         db  0x00 ; '.'
000000000020dc76         db  0x00 ; '.'
000000000020dc77         db  0x00 ; '.'
000000000020dc78         db  0x05 ; '.'
000000000020dc79         db  0x00 ; '.'
000000000020dc7a         db  0x00 ; '.'
000000000020dc7b         db  0x00 ; '.'
000000000020dc7c         db  0x00 ; '.'
000000000020dc7d         db  0x00 ; '.'
000000000020dc7e         db  0x00 ; '.'
000000000020dc7f         db  0x00 ; '.'
000000000020dc80         db  0xb8 ; '.'
000000000020dc81         db  0x09 ; '.'
000000000020dc82         db  0x00 ; '.'
000000000020dc83         db  0x00 ; '.'
000000000020dc84         db  0x00 ; '.'
000000000020dc85         db  0x00 ; '.'
000000000020dc86         db  0x00 ; '.'
000000000020dc87         db  0x00 ; '.'
000000000020dc88         db  0x06 ; '.'
000000000020dc89         db  0x00 ; '.'
000000000020dc8a         db  0x00 ; '.'
000000000020dc8b         db  0x00 ; '.'
000000000020dc8c         db  0x00 ; '.'
000000000020dc8d         db  0x00 ; '.'
000000000020dc8e         db  0x00 ; '.'
000000000020dc8f         db  0x00 ; '.'
000000000020dc90         db  0xe0 ; '.'
000000000020dc91         db  0x02 ; '.'
000000000020dc92         db  0x00 ; '.'
000000000020dc93         db  0x00 ; '.'
000000000020dc94         db  0x00 ; '.'
000000000020dc95         db  0x00 ; '.'
000000000020dc96         db  0x00 ; '.'
000000000020dc97         db  0x00 ; '.'
000000000020dc98         db  0x0a ; '.'
000000000020dc99         db  0x00 ; '.'
000000000020dc9a         db  0x00 ; '.'
000000000020dc9b         db  0x00 ; '.'
000000000020dc9c         db  0x00 ; '.'
000000000020dc9d         db  0x00 ; '.'
000000000020dc9e         db  0x00 ; '.'
000000000020dc9f         db  0x00 ; '.'
000000000020dca0         db  0x3b ; ';'
000000000020dca1         db  0x03 ; '.'
000000000020dca2         db  0x00 ; '.'
000000000020dca3         db  0x00 ; '.'
000000000020dca4         db  0x00 ; '.'
000000000020dca5         db  0x00 ; '.'
000000000020dca6         db  0x00 ; '.'
000000000020dca7         db  0x00 ; '.'
000000000020dca8         db  0x0b ; '.'
000000000020dca9         db  0x00 ; '.'
000000000020dcaa         db  0x00 ; '.'
000000000020dcab         db  0x00 ; '.'
000000000020dcac         db  0x00 ; '.'
000000000020dcad         db  0x00 ; '.'
000000000020dcae         db  0x00 ; '.'
000000000020dcaf         db  0x00 ; '.'
000000000020dcb0         db  0x18 ; '.'
000000000020dcb1         db  0x00 ; '.'
000000000020dcb2         db  0x00 ; '.'
000000000020dcb3         db  0x00 ; '.'
000000000020dcb4         db  0x00 ; '.'
000000000020dcb5         db  0x00 ; '.'
000000000020dcb6         db  0x00 ; '.'
000000000020dcb7         db  0x00 ; '.'
000000000020dcb8         db  0x15 ; '.'
000000000020dcb9         db  0x00 ; '.'
000000000020dcba         db  0x00 ; '.'
000000000020dcbb         db  0x00 ; '.'
000000000020dcbc         db  0x00 ; '.'
000000000020dcbd         db  0x00 ; '.'
000000000020dcbe         db  0x00 ; '.'
000000000020dcbf         db  0x00 ; '.'
000000000020dcc0         db  0x00 ; '.'
000000000020dcc1         db  0x00 ; '.'
000000000020dcc2         db  0x00 ; '.'
000000000020dcc3         db  0x00 ; '.'
000000000020dcc4         db  0x00 ; '.'
000000000020dcc5         db  0x00 ; '.'
000000000020dcc6         db  0x00 ; '.'
000000000020dcc7         db  0x00 ; '.'
000000000020dcc8         db  0x03 ; '.'
000000000020dcc9         db  0x00 ; '.'
000000000020dcca         db  0x00 ; '.'
000000000020dccb         db  0x00 ; '.'
000000000020dccc         db  0x00 ; '.'
000000000020dccd         db  0x00 ; '.'
000000000020dcce         db  0x00 ; '.'
000000000020dccf         db  0x00 ; '.'
000000000020dcd0         db  0xe8 ; '.'
000000000020dcd1         db  0xdd ; '.'
000000000020dcd2         db  0x20 ; ' '
000000000020dcd3         db  0x00 ; '.'
000000000020dcd4         db  0x00 ; '.'
000000000020dcd5         db  0x00 ; '.'
000000000020dcd6         db  0x00 ; '.'
000000000020dcd7         db  0x00 ; '.'
000000000020dcd8         db  0x02 ; '.'
000000000020dcd9         db  0x00 ; '.'
000000000020dcda         db  0x00 ; '.'
000000000020dcdb         db  0x00 ; '.'
000000000020dcdc         db  0x00 ; '.'
000000000020dcdd         db  0x00 ; '.'
000000000020dcde         db  0x00 ; '.'
000000000020dcdf         db  0x00 ; '.'
000000000020dce0         db  0x70 ; 'p'
000000000020dce1         db  0x05 ; '.'
000000000020dce2         db  0x00 ; '.'
000000000020dce3         db  0x00 ; '.'
000000000020dce4         db  0x00 ; '.'
000000000020dce5         db  0x00 ; '.'
000000000020dce6         db  0x00 ; '.'
000000000020dce7         db  0x00 ; '.'
000000000020dce8         db  0x14 ; '.'
000000000020dce9         db  0x00 ; '.'
000000000020dcea         db  0x00 ; '.'
000000000020dceb         db  0x00 ; '.'
000000000020dcec         db  0x00 ; '.'
000000000020dced         db  0x00 ; '.'
000000000020dcee         db  0x00 ; '.'
000000000020dcef         db  0x00 ; '.'
000000000020dcf0         db  0x07 ; '.'
000000000020dcf1         db  0x00 ; '.'
000000000020dcf2         db  0x00 ; '.'
000000000020dcf3         db  0x00 ; '.'
000000000020dcf4         db  0x00 ; '.'
000000000020dcf5         db  0x00 ; '.'
000000000020dcf6         db  0x00 ; '.'
000000000020dcf7         db  0x00 ; '.'
000000000020dcf8         db  0x17 ; '.'
000000000020dcf9         db  0x00 ; '.'
000000000020dcfa         db  0x00 ; '.'
000000000020dcfb         db  0x00 ; '.'
000000000020dcfc         db  0x00 ; '.'
000000000020dcfd         db  0x00 ; '.'
000000000020dcfe         db  0x00 ; '.'
000000000020dcff         db  0x00 ; '.'
000000000020dd00         db  0x00 ; '.'
000000000020dd01         db  0x14 ; '.'
000000000020dd02         db  0x00 ; '.'
000000000020dd03         db  0x00 ; '.'
000000000020dd04         db  0x00 ; '.'
000000000020dd05         db  0x00 ; '.'
000000000020dd06         db  0x00 ; '.'
000000000020dd07         db  0x00 ; '.'
000000000020dd08         db  0x07 ; '.'
000000000020dd09         db  0x00 ; '.'
000000000020dd0a         db  0x00 ; '.'
000000000020dd0b         db  0x00 ; '.'
000000000020dd0c         db  0x00 ; '.'
000000000020dd0d         db  0x00 ; '.'
000000000020dd0e         db  0x00 ; '.'
000000000020dd0f         db  0x00 ; '.'
000000000020dd10         db  0xe8 ; '.'
000000000020dd11         db  0x0d ; '.'
000000000020dd12         db  0x00 ; '.'
000000000020dd13         db  0x00 ; '.'
000000000020dd14         db  0x00 ; '.'
000000000020dd15         db  0x00 ; '.'
000000000020dd16         db  0x00 ; '.'
000000000020dd17         db  0x00 ; '.'
000000000020dd18         db  0x08 ; '.'
000000000020dd19         db  0x00 ; '.'
000000000020dd1a         db  0x00 ; '.'
000000000020dd1b         db  0x00 ; '.'
000000000020dd1c         db  0x00 ; '.'
000000000020dd1d         db  0x00 ; '.'
000000000020dd1e         db  0x00 ; '.'
000000000020dd1f         db  0x00 ; '.'
000000000020dd20         db  0x18 ; '.'
000000000020dd21         db  0x06 ; '.'
000000000020dd22         db  0x00 ; '.'
000000000020dd23         db  0x00 ; '.'
000000000020dd24         db  0x00 ; '.'
000000000020dd25         db  0x00 ; '.'
000000000020dd26         db  0x00 ; '.'
000000000020dd27         db  0x00 ; '.'
000000000020dd28         db  0x09 ; '.'
000000000020dd29         db  0x00 ; '.'
000000000020dd2a         db  0x00 ; '.'
000000000020dd2b         db  0x00 ; '.'
000000000020dd2c         db  0x00 ; '.'
000000000020dd2d         db  0x00 ; '.'
000000000020dd2e         db  0x00 ; '.'
000000000020dd2f         db  0x00 ; '.'
000000000020dd30         db  0x18 ; '.'
000000000020dd31         db  0x00 ; '.'
000000000020dd32         db  0x00 ; '.'
000000000020dd33         db  0x00 ; '.'
000000000020dd34         db  0x00 ; '.'
000000000020dd35         db  0x00 ; '.'
000000000020dd36         db  0x00 ; '.'
000000000020dd37         db  0x00 ; '.'
000000000020dd38         db  0x1e ; '.'
000000000020dd39         db  0x00 ; '.'
000000000020dd3a         db  0x00 ; '.'
000000000020dd3b         db  0x00 ; '.'
000000000020dd3c         db  0x00 ; '.'
000000000020dd3d         db  0x00 ; '.'
000000000020dd3e         db  0x00 ; '.'
000000000020dd3f         db  0x00 ; '.'
000000000020dd40         db  0x08 ; '.'
000000000020dd41         db  0x00 ; '.'
000000000020dd42         db  0x00 ; '.'
000000000020dd43         db  0x00 ; '.'
000000000020dd44         db  0x00 ; '.'
000000000020dd45         db  0x00 ; '.'
000000000020dd46         db  0x00 ; '.'
000000000020dd47         db  0x00 ; '.'
000000000020dd48         db  0xfb ; '.'
000000000020dd49         db  0xff ; '.'
000000000020dd4a         db  0xff ; '.'
000000000020dd4b         db  0x6f ; 'o'
000000000020dd4c         db  0x00 ; '.'
000000000020dd4d         db  0x00 ; '.'
000000000020dd4e         db  0x00 ; '.'
000000000020dd4f         db  0x00 ; '.'
000000000020dd50         db  0x01 ; '.'
000000000020dd51         db  0x00 ; '.'
000000000020dd52         db  0x00 ; '.'
000000000020dd53         db  0x08 ; '.'
000000000020dd54         db  0x00 ; '.'
000000000020dd55         db  0x00 ; '.'
000000000020dd56         db  0x00 ; '.'
000000000020dd57         db  0x00 ; '.'
000000000020dd58         db  0xfe ; '.'
000000000020dd59         db  0xff ; '.'
000000000020dd5a         db  0xff ; '.'
000000000020dd5b         db  0x6f ; 'o'
000000000020dd5c         db  0x00 ; '.'
000000000020dd5d         db  0x00 ; '.'
000000000020dd5e         db  0x00 ; '.'
000000000020dd5f         db  0x00 ; '.'
000000000020dd60         db  0x88 ; '.'
000000000020dd61         db  0x0d ; '.'
000000000020dd62         db  0x00 ; '.'
000000000020dd63         db  0x00 ; '.'
000000000020dd64         db  0x00 ; '.'
000000000020dd65         db  0x00 ; '.'
000000000020dd66         db  0x00 ; '.'
000000000020dd67         db  0x00 ; '.'
000000000020dd68         db  0xff ; '.'
000000000020dd69         db  0xff ; '.'
000000000020dd6a         db  0xff ; '.'
000000000020dd6b         db  0x6f ; 'o'
000000000020dd6c         db  0x00 ; '.'
000000000020dd6d         db  0x00 ; '.'
000000000020dd6e         db  0x00 ; '.'
000000000020dd6f         db  0x00 ; '.'
000000000020dd70         db  0x01 ; '.'
000000000020dd71         db  0x00 ; '.'
000000000020dd72         db  0x00 ; '.'
000000000020dd73         db  0x00 ; '.'
000000000020dd74         db  0x00 ; '.'
000000000020dd75         db  0x00 ; '.'
000000000020dd76         db  0x00 ; '.'
000000000020dd77         db  0x00 ; '.'
000000000020dd78         db  0xf0 ; '.'
000000000020dd79         db  0xff ; '.'
000000000020dd7a         db  0xff ; '.'
000000000020dd7b         db  0x6f ; 'o'
000000000020dd7c         db  0x00 ; '.'
000000000020dd7d         db  0x00 ; '.'
000000000020dd7e         db  0x00 ; '.'
000000000020dd7f         db  0x00 ; '.'
000000000020dd80         db  0xf4 ; '.'
000000000020dd81         db  0x0c ; '.'
000000000020dd82         db  0x00 ; '.'
000000000020dd83         db  0x00 ; '.'
000000000020dd84         db  0x00 ; '.'
000000000020dd85         db  0x00 ; '.'
000000000020dd86         db  0x00 ; '.'
000000000020dd87         db  0x00 ; '.'
000000000020dd88         db  0xf9 ; '.'
000000000020dd89         db  0xff ; '.'
000000000020dd8a         db  0xff ; '.'
000000000020dd8b         db  0x6f ; 'o'
000000000020dd8c         db  0x00 ; '.'
000000000020dd8d         db  0x00 ; '.'
000000000020dd8e         db  0x00 ; '.'
000000000020dd8f         db  0x00 ; '.'
000000000020dd90         db  0x35 ; '5'
000000000020dd91         db  0x00 ; '.'
000000000020dd92         db  0x00 ; '.'
000000000020dd93         db  0x00 ; '.'
000000000020dd94         db  0x00 ; '.'
000000000020dd95         db  0x00 ; '.'
000000000020dd96         db  0x00 ; '.'
000000000020dd97         db  0x00 ; '.'
000000000020dd98         db  0x00 ; '.'
000000000020dd99         db  0x00 ; '.'
000000000020dd9a         db  0x00 ; '.'
000000000020dd9b         db  0x00 ; '.'
000000000020dd9c         db  0x00 ; '.'
000000000020dd9d         db  0x00 ; '.'
000000000020dd9e         db  0x00 ; '.'
000000000020dd9f         db  0x00 ; '.'
000000000020dda0         db  0x00 ; '.'
000000000020dda1         db  0x00 ; '.'
000000000020dda2         db  0x00 ; '.'
000000000020dda3         db  0x00 ; '.'
000000000020dda4         db  0x00 ; '.'
000000000020dda5         db  0x00 ; '.'
000000000020dda6         db  0x00 ; '.'
000000000020dda7         db  0x00 ; '.'
000000000020dda8         db  0x00 ; '.'
000000000020dda9         db  0x00 ; '.'
000000000020ddaa         db  0x00 ; '.'
000000000020ddab         db  0x00 ; '.'
000000000020ddac         db  0x00 ; '.'
000000000020ddad         db  0x00 ; '.'
000000000020ddae         db  0x00 ; '.'
000000000020ddaf         db  0x00 ; '.'
000000000020ddb0         db  0x00 ; '.'
000000000020ddb1         db  0x00 ; '.'
000000000020ddb2         db  0x00 ; '.'
000000000020ddb3         db  0x00 ; '.'
000000000020ddb4         db  0x00 ; '.'
000000000020ddb5         db  0x00 ; '.'
000000000020ddb6         db  0x00 ; '.'
000000000020ddb7         db  0x00 ; '.'
000000000020ddb8         db  0x00 ; '.'
000000000020ddb9         db  0x00 ; '.'
000000000020ddba         db  0x00 ; '.'
000000000020ddbb         db  0x00 ; '.'
000000000020ddbc         db  0x00 ; '.'
000000000020ddbd         db  0x00 ; '.'
000000000020ddbe         db  0x00 ; '.'
000000000020ddbf         db  0x00 ; '.'
000000000020ddc0         db  0x00 ; '.'
000000000020ddc1         db  0x00 ; '.'
000000000020ddc2         db  0x00 ; '.'
000000000020ddc3         db  0x00 ; '.'
000000000020ddc4         db  0x00 ; '.'
000000000020ddc5         db  0x00 ; '.'
000000000020ddc6         db  0x00 ; '.'
000000000020ddc7         db  0x00 ; '.'
000000000020ddc8         db  0x00 ; '.'
000000000020ddc9         db  0x00 ; '.'
000000000020ddca         db  0x00 ; '.'
000000000020ddcb         db  0x00 ; '.'
000000000020ddcc         db  0x00 ; '.'
000000000020ddcd         db  0x00 ; '.'
000000000020ddce         db  0x00 ; '.'
000000000020ddcf         db  0x00 ; '.'
000000000020ddd0         db  0x00 ; '.'
000000000020ddd1         db  0x00 ; '.'
000000000020ddd2         db  0x00 ; '.'
000000000020ddd3         db  0x00 ; '.'
000000000020ddd4         db  0x00 ; '.'
000000000020ddd5         db  0x00 ; '.'
000000000020ddd6         db  0x00 ; '.'
000000000020ddd7         db  0x00 ; '.'
000000000020ddd8         db  0x00 ; '.'
000000000020ddd9         db  0x00 ; '.'
000000000020ddda         db  0x00 ; '.'
000000000020dddb         db  0x00 ; '.'
000000000020dddc         db  0x00 ; '.'
000000000020dddd         db  0x00 ; '.'
000000000020ddde         db  0x00 ; '.'
000000000020dddf         db  0x00 ; '.'
000000000020dde0         db  0x00 ; '.'
000000000020dde1         db  0x00 ; '.'
000000000020dde2         db  0x00 ; '.'
000000000020dde3         db  0x00 ; '.'
000000000020dde4         db  0x00 ; '.'
000000000020dde5         db  0x00 ; '.'
000000000020dde6         db  0x00 ; '.'
000000000020dde7         db  0x00 ; '.'


        ; Section .got
        ; Range: [0x20dde8; 0x20dff8[ (528 bytes)
        ; File offset : [56808; 57336[ (528 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     _GLOBAL_OFFSET_TABLE_:
000000000020dde8         db  0xf8 ; '.'
000000000020dde9         db  0xdb ; '.'
000000000020ddea         db  0x20 ; ' '
000000000020ddeb         db  0x00 ; '.'
000000000020ddec         db  0x00 ; '.'
000000000020dded         db  0x00 ; '.'
000000000020ddee         db  0x00 ; '.'
000000000020ddef         db  0x00 ; '.'
                     qword_20ddf0:
000000000020ddf0         dq         0x0000000000000000                          ; DATA XREF=0x1990
000000000020ddf8         db  0x00 ; '.'                                         ; DATA XREF=0x1996
000000000020ddf9         db  0x00 ; '.'
000000000020ddfa         db  0x00 ; '.'
000000000020ddfb         db  0x00 ; '.'
000000000020ddfc         db  0x00 ; '.'
000000000020ddfd         db  0x00 ; '.'
000000000020ddfe         db  0x00 ; '.'
000000000020ddff         db  0x00 ; '.'
                     __snprintf_chk@GOT:        // __snprintf_chk
000000000020de00         dq         0x000000000020e310                          ; DATA XREF=j___snprintf_chk
                     free@GOT:        // free
000000000020de08         dq         0x000000000020e318                          ; DATA XREF=j_free
                     abort@GOT:        // abort
000000000020de10         dq         0x000000000020e320                          ; DATA XREF=j_abort
                     __errno_location@GOT:        // __errno_location
000000000020de18         dq         0x000000000020e328                          ; DATA XREF=j___errno_location
                     strncmp@GOT:        // strncmp
000000000020de20         dq         0x000000000020e330                          ; DATA XREF=j_strncmp
                     _exit@GOT:        // _exit
000000000020de28         dq         0x000000000020e340                          ; DATA XREF=j__exit
                     strcpy@GOT:        // strcpy
000000000020de30         dq         0x000000000020e348                          ; DATA XREF=j_strcpy
                     __fpending@GOT:        // __fpending
000000000020de38         dq         0x000000000020e350                          ; DATA XREF=j___fpending
                     qsort@GOT:        // qsort
000000000020de40         dq         0x000000000020e358                          ; DATA XREF=j_qsort
                     wcswidth@GOT:        // wcswidth
000000000020de48         dq         0x000000000020e360                          ; DATA XREF=j_wcswidth
                     mbstowcs@GOT:        // mbstowcs
000000000020de50         dq         0x000000000020e368                          ; DATA XREF=j_mbstowcs
                     textdomain@GOT:        // textdomain
000000000020de58         dq         0x000000000020e370                          ; DATA XREF=j_textdomain
                     fclose@GOT:        // fclose
000000000020de60         dq         0x000000000020e378                          ; DATA XREF=j_fclose
                     bindtextdomain@GOT:        // bindtextdomain
000000000020de68         dq         0x000000000020e380                          ; DATA XREF=j_bindtextdomain
                     dcgettext@GOT:        // dcgettext
000000000020de70         dq         0x000000000020e388                          ; DATA XREF=j_dcgettext
                     __ctype_get_mb_cur_max@GOT:        // __ctype_get_mb_cur_max
000000000020de78         dq         0x000000000020e390                          ; DATA XREF=j___ctype_get_mb_cur_max
                     strlen@GOT:        // strlen
000000000020de80         dq         0x000000000020e398                          ; DATA XREF=j_strlen
                     __stack_chk_fail@GOT:        // __stack_chk_fail
000000000020de88         dq         0x000000000020e3a0                          ; DATA XREF=j___stack_chk_fail
                     getopt_long@GOT:        // getopt_long
000000000020de90         dq         0x000000000020e3a8                          ; DATA XREF=j_getopt_long
                     mbrtowc@GOT:        // mbrtowc
000000000020de98         dq         0x000000000020e3b0                          ; DATA XREF=j_mbrtowc
                     strchr@GOT:        // strchr
000000000020dea0         dq         0x000000000020e3b8                          ; DATA XREF=j_strchr
                     __overflow@GOT:        // __overflow
000000000020dea8         dq         0x000000000020e3c0                          ; DATA XREF=j___overflow
                     strrchr@GOT:        // strrchr
000000000020deb0         dq         0x000000000020e3c8                          ; DATA XREF=j_strrchr
                     lseek@GOT:        // lseek
000000000020deb8         dq         0x000000000020e3d0                          ; DATA XREF=j_lseek
                     __assert_fail@GOT:        // __assert_fail
000000000020dec0         dq         0x000000000020e3d8                          ; DATA XREF=j___assert_fail
                     __strtoul_internal@GOT:        // __strtoul_internal
000000000020dec8         dq         0x000000000020e3e0                          ; DATA XREF=j___strtoul_internal
                     memset@GOT:        // memset
000000000020ded0         dq         0x000000000020e3e8                          ; DATA XREF=j_memset
                     strspn@GOT:        // strspn
000000000020ded8         dq         0x000000000020e3f0                          ; DATA XREF=j_strspn
                     strndup@GOT:        // strndup
000000000020dee0         dq         0x000000000020e3f8                          ; DATA XREF=j_strndup
                     memcmp@GOT:        // memcmp
000000000020dee8         dq         0x000000000020e408                          ; DATA XREF=j_memcmp
                     fputs_unlocked@GOT:        // fputs_unlocked
000000000020def0         dq         0x000000000020e410                          ; DATA XREF=j_fputs_unlocked
                     calloc@GOT:        // calloc
000000000020def8         dq         0x000000000020e418                          ; DATA XREF=j_calloc
                     strcmp@GOT:        // strcmp
000000000020df00         dq         0x000000000020e420                          ; DATA XREF=j_strcmp
                     strtol@GOT:        // strtol
000000000020df08         dq         0x000000000020e430                          ; DATA XREF=j_strtol
                     memcpy@GOT:        // memcpy
000000000020df10         dq         0x000000000020e438                          ; DATA XREF=j_memcpy
                     fileno@GOT:        // fileno
000000000020df18         dq         0x000000000020e440                          ; DATA XREF=j_fileno
                     wcwidth@GOT:        // wcwidth
000000000020df20         dq         0x000000000020e448                          ; DATA XREF=j_wcwidth
                     malloc@GOT:        // malloc
000000000020df28         dq         0x000000000020e450                          ; DATA XREF=j_malloc
                     fflush@GOT:        // fflush
000000000020df30         dq         0x000000000020e458                          ; DATA XREF=j_fflush
                     nl_langinfo@GOT:        // nl_langinfo
000000000020df38         dq         0x000000000020e460                          ; DATA XREF=j_nl_langinfo
                     __freading@GOT:        // __freading
000000000020df40         dq         0x000000000020e468                          ; DATA XREF=j___freading
                     realloc@GOT:        // realloc
000000000020df48         dq         0x000000000020e470                          ; DATA XREF=j_realloc
                     setlocale@GOT:        // setlocale
000000000020df50         dq         0x000000000020e478                          ; DATA XREF=j_setlocale
                     __printf_chk@GOT:        // __printf_chk
000000000020df58         dq         0x000000000020e480                          ; DATA XREF=j___printf_chk
                     mempcpy@GOT:        // mempcpy
000000000020df60         dq         0x000000000020e488                          ; DATA XREF=j_mempcpy
                     memmove@GOT:        // memmove
000000000020df68         dq         0x000000000020e490                          ; DATA XREF=j_memmove
                     error@GOT:        // error
000000000020df70         dq         0x000000000020e498                          ; DATA XREF=j_error
                     fseeko@GOT:        // fseeko
000000000020df78         dq         0x000000000020e4a0                          ; DATA XREF=j_fseeko
                     __cxa_atexit@GOT:        // __cxa_atexit
000000000020df80         dq         0x000000000020e4a8                          ; DATA XREF=j___cxa_atexit
                     wcstombs@GOT:        // wcstombs
000000000020df88         dq         0x000000000020e4b0                          ; DATA XREF=j_wcstombs
                     exit@GOT:        // exit
000000000020df90         dq         0x000000000020e4b8                          ; DATA XREF=j_exit
                     fwrite@GOT:        // fwrite
000000000020df98         dq         0x000000000020e4c0                          ; DATA XREF=j_fwrite
                     __fprintf_chk@GOT:        // __fprintf_chk
000000000020dfa0         dq         0x000000000020e4c8                          ; DATA XREF=j___fprintf_chk
                     __strncat_chk@GOT:        // __strncat_chk
000000000020dfa8         dq         0x000000000020e4d0                          ; DATA XREF=j___strncat_chk
                     mbsinit@GOT:        // mbsinit
000000000020dfb0         dq         0x000000000020e4e0                          ; DATA XREF=j_mbsinit
                     iswprint@GOT:        // iswprint
000000000020dfb8         dq         0x000000000020e4e8                          ; DATA XREF=j_iswprint
                     getdelim@GOT:        // getdelim
000000000020dfc0         dq         0x000000000020e4f8                          ; DATA XREF=j_getdelim
                     __ctype_b_loc@GOT:        // __ctype_b_loc
000000000020dfc8         dq         0x000000000020e500                          ; DATA XREF=j___ctype_b_loc
                     qword_20dfd0:
000000000020dfd0         dq         0x0000000000000000                          ; DATA XREF=deregister_tm_clones+23
000000000020dfd8         db  0x00 ; '.'                                         ; DATA XREF=_start+36
000000000020dfd9         db  0x00 ; '.'
000000000020dfda         db  0x00 ; '.'
000000000020dfdb         db  0x00 ; '.'
000000000020dfdc         db  0x00 ; '.'
000000000020dfdd         db  0x00 ; '.'
000000000020dfde         db  0x00 ; '.'
000000000020dfdf         db  0x00 ; '.'
                     qword_20dfe0:
000000000020dfe0         dq         0x0000000000000000                          ; DATA XREF=_init+4
                     qword_20dfe8:
000000000020dfe8         dq         0x0000000000000000                          ; DATA XREF=register_tm_clones+40
                     qword_20dff0:
000000000020dff0         dq         0x0000000000000000                          ; DATA XREF=j_qword_20dff0, __do_global_dtors_aux+9
000000000020dff8         db  0x00 ; '.'
000000000020dff9         db  0x00 ; '.'
000000000020dffa         db  0x00 ; '.'
000000000020dffb         db  0x00 ; '.'
000000000020dffc         db  0x00 ; '.'
000000000020dffd         db  0x00 ; '.'
000000000020dffe         db  0x00 ; '.'
000000000020dfff         db  0x00 ; '.'


        ; Section .data
        ; Range: [0x20e000; 0x20e0c0[ (192 bytes)
        ; File offset : [57344; 57536[ (192 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

000000000020e000         db  0x00 ; '.'
000000000020e001         db  0x00 ; '.'
000000000020e002         db  0x00 ; '.'
000000000020e003         db  0x00 ; '.'
000000000020e004         db  0x00 ; '.'
000000000020e005         db  0x00 ; '.'
000000000020e006         db  0x00 ; '.'
000000000020e007         db  0x00 ; '.'
                     __dso_handle:
000000000020e008         dq         0x000000000020e008                          ; DATA XREF=__do_global_dtors_aux+23, atexit, __dso_handle
                     line_delim:
000000000020e010         db         0x0a                                        ; DATA XREF=main+1080, main+1912, main+1962, main+2000, process_line+138
000000000020e011         align      4
                     delimiter:
000000000020e014         dd         0x00000080                                  ; DATA XREF=main+824, main+1765, process_line+28, process_line+318, process_line+433
                     padding_alignment:
000000000020e018         dd         0x00000001                                  ; DATA XREF=main+978, main+1595, main+3074, process_field+5319
                     conv_exit_code:
000000000020e01c         dd         0x00000002                                  ; DATA XREF=main+1793, process_field+707, process_field+1464, process_field+1870, process_field+2210
                     user_precision:
000000000020e020         dq         0xffffffffffffffff                          ; DATA XREF=main+2976, process_field+1320, process_field+3637, process_field+3998
                     to_unit_size:
000000000020e028         dq         0x0000000000000001                          ; DATA XREF=main+402, process_field+735
                     from_unit_size:
000000000020e030         dq         0x0000000000000001                          ; DATA XREF=main+732, process_field+728
                     round_style:
000000000020e038         dd         0x00000002                                  ; DATA XREF=main+1064, process_field+1531
000000000020e03c         align      64
                     Version:
000000000020e040         dq         0x000000000000b3a1                          ; "8.31", DATA XREF=main+575
                     argmatch_die:
000000000020e048         dq         0x0000000000005770                          ; DATA XREF=main+451, main+653, main+840, main+1008
                     exit_failure:
000000000020e050         dd         0x00000001                                  ; DATA XREF=close_stdout+130, xalloc_die+23
000000000020e054         db  0x00 ; '.'
000000000020e055         db  0x00 ; '.'
000000000020e056         db  0x00 ; '.'
000000000020e057         db  0x00 ; '.'
000000000020e058         db  0x00 ; '.'
000000000020e059         db  0x00 ; '.'
000000000020e05a         db  0x00 ; '.'
000000000020e05b         db  0x00 ; '.'
000000000020e05c         db  0x00 ; '.'
000000000020e05d         db  0x00 ; '.'
000000000020e05e         db  0x00 ; '.'
000000000020e05f         db  0x00 ; '.'
                     quote_quoting_options:
000000000020e060         db  0x08 ; '.'                                         ; DATA XREF=quote_n_mem, quote_mem, quote_n, quote
000000000020e061         db  0x00 ; '.'
000000000020e062         db  0x00 ; '.'
000000000020e063         db  0x00 ; '.'
000000000020e064         db  0x00 ; '.'
000000000020e065         db  0x00 ; '.'
000000000020e066         db  0x00 ; '.'
000000000020e067         db  0x00 ; '.'
000000000020e068         db  0x00 ; '.'
000000000020e069         db  0x00 ; '.'
000000000020e06a         db  0x00 ; '.'
000000000020e06b         db  0x00 ; '.'
000000000020e06c         db  0x00 ; '.'
000000000020e06d         db  0x00 ; '.'
000000000020e06e         db  0x00 ; '.'
000000000020e06f         db  0x00 ; '.'
000000000020e070         db  0x00 ; '.'
000000000020e071         db  0x00 ; '.'
000000000020e072         db  0x00 ; '.'
000000000020e073         db  0x00 ; '.'
000000000020e074         db  0x00 ; '.'
000000000020e075         db  0x00 ; '.'
000000000020e076         db  0x00 ; '.'
000000000020e077         db  0x00 ; '.'
000000000020e078         db  0x00 ; '.'
000000000020e079         db  0x00 ; '.'
000000000020e07a         db  0x00 ; '.'
000000000020e07b         db  0x00 ; '.'
000000000020e07c         db  0x00 ; '.'
000000000020e07d         db  0x00 ; '.'
000000000020e07e         db  0x00 ; '.'
000000000020e07f         db  0x00 ; '.'
000000000020e080         db  0x00 ; '.'
000000000020e081         db  0x00 ; '.'
000000000020e082         db  0x00 ; '.'
000000000020e083         db  0x00 ; '.'
000000000020e084         db  0x00 ; '.'
000000000020e085         db  0x00 ; '.'
000000000020e086         db  0x00 ; '.'
000000000020e087         db  0x00 ; '.'
000000000020e088         db  0x00 ; '.'
000000000020e089         db  0x00 ; '.'
000000000020e08a         db  0x00 ; '.'
000000000020e08b         db  0x00 ; '.'
000000000020e08c         db  0x00 ; '.'
000000000020e08d         db  0x00 ; '.'
000000000020e08e         db  0x00 ; '.'
000000000020e08f         db  0x00 ; '.'
000000000020e090         db  0x00 ; '.'
000000000020e091         db  0x00 ; '.'
000000000020e092         db  0x00 ; '.'
000000000020e093         db  0x00 ; '.'
000000000020e094         db  0x00 ; '.'
000000000020e095         db  0x00 ; '.'
000000000020e096         db  0x00 ; '.'
000000000020e097         db  0x00 ; '.'
                     nslots:
000000000020e098         dd         0x00000001                                  ; DATA XREF=quotearg_n_options+58, quotearg_n_options+125, quotearg_n_options+158, quotearg_free, quotearg_free+133
000000000020e09c         align      32
                     slotvec:
000000000020e0a0         dq         0x000000000020e0b0                          ; DATA XREF=quotearg_n_options+41, quotearg_n_options+118, quotearg_n_options+402, quotearg_free+8, quotearg_free+125
000000000020e0a8         db  0x00 ; '.'
000000000020e0a9         db  0x00 ; '.'
000000000020e0aa         db  0x00 ; '.'
000000000020e0ab         db  0x00 ; '.'
000000000020e0ac         db  0x00 ; '.'
000000000020e0ad         db  0x00 ; '.'
000000000020e0ae         db  0x00 ; '.'
000000000020e0af         db  0x00 ; '.'
                     slotvec0:
000000000020e0b0         dq         1.26481e-321, 1.06468e-317                  ; DATA XREF=quotearg_n_options+84, quotearg_n_options+391, quotearg_free+87, quotearg_free+105, slotvec


        ; Section .bss
        ; Range: [0x20e0c0; 0x20e308[ (584 bytes)
        ; No data on disk
        ; Flags: 0x3
        ;   SHT_NOBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     program_invocation_short_name@@GLIBC_2.2.5:
000000000020e0c0         db  0x00 ; '.'                                         ; DATA XREF=deregister_tm_clones, deregister_tm_clones+8, register_tm_clones, register_tm_clones+7, set_program_name+102
000000000020e0c1         db  0x00 ; '.'
000000000020e0c2         db  0x00 ; '.'
000000000020e0c3         db  0x00 ; '.'
000000000020e0c4         db  0x00 ; '.'
000000000020e0c5         db  0x00 ; '.'
000000000020e0c6         db  0x00 ; '.'
000000000020e0c7         db  0x00 ; '.'
                     stdout@@GLIBC_2.2.5:
000000000020e0c8         db  0x00 ; '.'                                         ; DATA XREF=main+568, main+1872, process_field+88, process_field+816, process_field+3044, process_field+3061, process_field+3101, process_line+131, process_line+324, usage+125, usage+162
000000000020e0c9         db  0x00 ; '.'
000000000020e0ca         db  0x00 ; '.'
000000000020e0cb         db  0x00 ; '.'
000000000020e0cc         db  0x00 ; '.'
000000000020e0cd         db  0x00 ; '.'
000000000020e0ce         db  0x00 ; '.'
000000000020e0cf         db  0x00 ; '.'
                     stdin@@GLIBC_2.2.5:
000000000020e0d0         db  0x00 ; '.'                                         ; DATA XREF=main+1919, main+2007, main+2030
000000000020e0d1         db  0x00 ; '.'
000000000020e0d2         db  0x00 ; '.'
000000000020e0d3         db  0x00 ; '.'
000000000020e0d4         db  0x00 ; '.'
000000000020e0d5         db  0x00 ; '.'
000000000020e0d6         db  0x00 ; '.'
000000000020e0d7         db  0x00 ; '.'
                     optind@@GLIBC_2.2.5:
000000000020e0d8         db  0x00 ; '.'                                         ; DATA XREF=main+1803, main+2195, main+2206, main+2824
000000000020e0d9         db  0x00 ; '.'
000000000020e0da         db  0x00 ; '.'
000000000020e0db         db  0x00 ; '.'
000000000020e0dc         db  0x00 ; '.'
000000000020e0dd         db  0x00 ; '.'
000000000020e0de         db  0x00 ; '.'
000000000020e0df         db  0x00 ; '.'
                     optarg@@GLIBC_2.2.5:
000000000020e0e0         db  0x00 ; '.'                                         ; DATA XREF=main+291, main+390, main+458, main+660, main+720, main+752, main+800, main+847, main+912, main+1015, main+1096
000000000020e0e1         db  0x00 ; '.'
000000000020e0e2         db  0x00 ; '.'
000000000020e0e3         db  0x00 ; '.'
000000000020e0e4         db  0x00 ; '.'
000000000020e0e5         db  0x00 ; '.'
000000000020e0e6         db  0x00 ; '.'
000000000020e0e7         db  0x00 ; '.'
                     __progname_full@@GLIBC_2.2.5:
000000000020e0e8         db  0x00 ; '.'                                         ; DATA XREF=set_program_name+116
000000000020e0e9         db  0x00 ; '.'
000000000020e0ea         db  0x00 ; '.'
000000000020e0eb         db  0x00 ; '.'
000000000020e0ec         db  0x00 ; '.'
000000000020e0ed         db  0x00 ; '.'
000000000020e0ee         db  0x00 ; '.'
000000000020e0ef         db  0x00 ; '.'
000000000020e0f0         db  0x00 ; '.'
000000000020e0f1         db  0x00 ; '.'
000000000020e0f2         db  0x00 ; '.'
000000000020e0f3         db  0x00 ; '.'
000000000020e0f4         db  0x00 ; '.'
000000000020e0f5         db  0x00 ; '.'
000000000020e0f6         db  0x00 ; '.'
000000000020e0f7         db  0x00 ; '.'
000000000020e0f8         db  0x00 ; '.'
000000000020e0f9         db  0x00 ; '.'
000000000020e0fa         db  0x00 ; '.'
000000000020e0fb         db  0x00 ; '.'
000000000020e0fc         db  0x00 ; '.'
000000000020e0fd         db  0x00 ; '.'
000000000020e0fe         db  0x00 ; '.'
000000000020e0ff         db  0x00 ; '.'
                     stderr@@GLIBC_2.2.5:
000000000020e100         db  0x00 ; '.'                                         ; DATA XREF=main+1667, process_field+450, process_field+559, process_field+1992, process_field+2096, process_field+2316, process_field+2626, process_field+2887, process_field+3300, process_field+3380, process_field+3571
000000000020e101         db  0x00 ; '.'
000000000020e102         db  0x00 ; '.'
000000000020e103         db  0x00 ; '.'
000000000020e104         db  0x00 ; '.'
000000000020e105         db  0x00 ; '.'
000000000020e106         db  0x00 ; '.'
000000000020e107         db  0x00 ; '.'
                     completed.7697:
000000000020e108         db  0x00 ; '.'                                         ; DATA XREF=__do_global_dtors_aux, __do_global_dtors_aux+40
000000000020e109         db  0x00 ; '.'
000000000020e10a         db  0x00 ; '.'
000000000020e10b         db  0x00 ; '.'
000000000020e10c         db  0x00 ; '.'
000000000020e10d         db  0x00 ; '.'
000000000020e10e         db  0x00 ; '.'
000000000020e10f         db  0x00 ; '.'
                     dev_debug:
000000000020e110         db  0x00 ; '.'                                         ; DATA XREF=main+624, main+1515, process_field+221, process_field+348, process_field+596, process_field+1021, process_field+1231, process_field+1592, process_field+1754, process_field+2467, process_field+2750
000000000020e111         db  0x00 ; '.'
000000000020e112         db  0x00 ; '.'
000000000020e113         db  0x00 ; '.'
                     decimal_point_length:
000000000020e114         db  0x00 ; '.'                                         ; DATA XREF=main+155, simple_strtod_int+154, process_field+960
000000000020e115         db  0x00 ; '.'
000000000020e116         db  0x00 ; '.'
000000000020e117         db  0x00 ; '.'
                     decimal_point:
000000000020e118         db  0x00 ; '.'                                         ; DATA XREF=main+107, main+129, main+320, simple_strtod_int+161, process_field+420, process_field+975
000000000020e119         db  0x00 ; '.'
000000000020e11a         db  0x00 ; '.'
000000000020e11b         db  0x00 ; '.'
000000000020e11c         db  0x00 ; '.'
000000000020e11d         db  0x00 ; '.'
000000000020e11e         db  0x00 ; '.'
000000000020e11f         db  0x00 ; '.'
                     debug:
000000000020e120         db  0x00 ; '.'                                         ; DATA XREF=main+631, main+1274, main+1287, main+2083, main+2142, main+2232, main+2463, process_field+1913
000000000020e121         db  0x00 ; '.'
000000000020e122         db  0x00 ; '.'
000000000020e123         db  0x00 ; '.'
000000000020e124         db  0x00 ; '.'
000000000020e125         db  0x00 ; '.'
000000000020e126         db  0x00 ; '.'
000000000020e127         db  0x00 ; '.'
                     header:
000000000020e128         db  0x00 ; '.'                                         ; DATA XREF=main+1139, main+1162, main+1230, main+1817, main+1859, main+1889, main+1903, main+2151
000000000020e129         db  0x00 ; '.'
000000000020e12a         db  0x00 ; '.'
000000000020e12b         db  0x00 ; '.'
000000000020e12c         db  0x00 ; '.'
000000000020e12d         db  0x00 ; '.'
000000000020e12e         db  0x00 ; '.'
000000000020e12f         db  0x00 ; '.'
                     auto_padding:
000000000020e130         db  0x00 ; '.'                                         ; DATA XREF=main+1785, process_field+303
000000000020e131         db  0x00 ; '.'
000000000020e132         db  0x00 ; '.'
000000000020e133         db  0x00 ; '.'
000000000020e134         db  0x00 ; '.'
000000000020e135         db  0x00 ; '.'
000000000020e136         db  0x00 ; '.'
000000000020e137         db  0x00 ; '.'
                     format_str_suffix:
000000000020e138         db  0x00 ; '.'                                         ; DATA XREF=main+1528, main+2851, process_field+3085
000000000020e139         db  0x00 ; '.'
000000000020e13a         db  0x00 ; '.'
000000000020e13b         db  0x00 ; '.'
000000000020e13c         db  0x00 ; '.'
000000000020e13d         db  0x00 ; '.'
000000000020e13e         db  0x00 ; '.'
000000000020e13f         db  0x00 ; '.'
                     format_str_prefix:
000000000020e140         db  0x00 ; '.'                                         ; DATA XREF=main+1502, main+1554, process_field+3037
000000000020e141         db  0x00 ; '.'
000000000020e142         db  0x00 ; '.'
000000000020e143         db  0x00 ; '.'
000000000020e144         db  0x00 ; '.'
000000000020e145         db  0x00 ; '.'
000000000020e146         db  0x00 ; '.'
000000000020e147         db  0x00 ; '.'
                     format_str:
000000000020e148         db  0x00 ; '.'                                         ; DATA XREF=main+1103, main+1246, main+1321, main+1386
000000000020e149         db  0x00 ; '.'
000000000020e14a         db  0x00 ; '.'
000000000020e14b         db  0x00 ; '.'
000000000020e14c         db  0x00 ; '.'
000000000020e14d         db  0x00 ; '.'
000000000020e14e         db  0x00 ; '.'
000000000020e14f         db  0x00 ; '.'
                     zero_padding_width:
000000000020e150         db  0x00 ; '.'                                         ; DATA XREF=main+2510, process_field+1576
000000000020e151         db  0x00 ; '.'
000000000020e152         db  0x00 ; '.'
000000000020e153         db  0x00 ; '.'
000000000020e154         db  0x00 ; '.'
000000000020e155         db  0x00 ; '.'
000000000020e156         db  0x00 ; '.'
000000000020e157         db  0x00 ; '.'
                     padding_width:
000000000020e158         db  0x00 ; '.'                                         ; DATA XREF=main+926, main+953, main+988, main+1334, main+1612, main+1731, main+1753, main+2476, main+2926, main+3084, process_field+337
000000000020e159         db  0x00 ; '.'
000000000020e15a         db  0x00 ; '.'
000000000020e15b         db  0x00 ; '.'
000000000020e15c         db  0x00 ; '.'
000000000020e15d         db  0x00 ; '.'
000000000020e15e         db  0x00 ; '.'
000000000020e15f         db  0x00 ; '.'
                     padding_buffer_size:
000000000020e160         db  0x00 ; '.'                                         ; DATA XREF=main+1738, setup_padding_buffer.part.0+15, process_field+872, process_field+2980
000000000020e161         db  0x00 ; '.'
000000000020e162         db  0x00 ; '.'
000000000020e163         db  0x00 ; '.'
000000000020e164         db  0x00 ; '.'
000000000020e165         db  0x00 ; '.'
000000000020e166         db  0x00 ; '.'
000000000020e167         db  0x00 ; '.'
                     padding_buffer:
000000000020e168         db  0x00 ; '.'                                         ; DATA XREF=setup_padding_buffer.part.0+8, setup_padding_buffer.part.0+27, process_field+3022, process_field+3068, process_field+5334, process_field+5368
000000000020e169         db  0x00 ; '.'
000000000020e16a         db  0x00 ; '.'
000000000020e16b         db  0x00 ; '.'
000000000020e16c         db  0x00 ; '.'
000000000020e16d         db  0x00 ; '.'
000000000020e16e         db  0x00 ; '.'
000000000020e16f         db  0x00 ; '.'
                     grouping:
000000000020e170         db  0x00 ; '.'                                         ; DATA XREF=main+776, main+1256, main+1314, main+1633, main+1718, main+2644, process_field+1524
000000000020e171         db  0x00 ; '.'
000000000020e172         db  0x00 ; '.'
000000000020e173         db  0x00 ; '.'
000000000020e174         db  0x00 ; '.'
000000000020e175         db  0x00 ; '.'
000000000020e176         db  0x00 ; '.'
000000000020e177         db  0x00 ; '.'
                     suffix:
000000000020e178         db  0x00 ; '.'                                         ; DATA XREF=main+759, process_field+166, process_field+2761, process_field+4196
000000000020e179         db  0x00 ; '.'
000000000020e17a         db  0x00 ; '.'
000000000020e17b         db  0x00 ; '.'
000000000020e17c         db  0x00 ; '.'
000000000020e17d         db  0x00 ; '.'
000000000020e17e         db  0x00 ; '.'
000000000020e17f         db  0x00 ; '.'
                     inval_style:
000000000020e180         db  0x00 ; '.'                                         ; DATA XREF=main+507, main+1778, main+2690, process_field+672, process_field+1426, process_field+1807, process_field+2194
000000000020e181         db  0x00 ; '.'
000000000020e182         db  0x00 ; '.'
000000000020e183         db  0x00 ; '.'
                     scale_to:
000000000020e184         db  0x00 ; '.'                                         ; DATA XREF=main+896, main+1305, main+2219, process_field+1407, process_field+1504
000000000020e185         db  0x00 ; '.'
000000000020e186         db  0x00 ; '.'
000000000020e187         db  0x00 ; '.'
                     scale_from:
000000000020e188         db  0x00 ; '.'                                         ; DATA XREF=main+709, main+1296, process_field+367, process_field+589
000000000020e189         db  0x00 ; '.'
000000000020e18a         db  0x00 ; '.'
000000000020e18b         db  0x00 ; '.'
000000000020e18c         db  0x00 ; '.'
000000000020e18d         db  0x00 ; '.'
000000000020e18e         db  0x00 ; '.'
000000000020e18f         db  0x00 ; '.'
                     num_start.6877:
000000000020e190         db  0x00 ; '.'                                         ; DATA XREF=set_fields+724, set_fields+816, set_fields+1181
000000000020e191         db  0x00 ; '.'
000000000020e192         db  0x00 ; '.'
000000000020e193         db  0x00 ; '.'
000000000020e194         db  0x00 ; '.'
000000000020e195         db  0x00 ; '.'
000000000020e196         db  0x00 ; '.'
000000000020e197         db  0x00 ; '.'
                     n_frp_allocated:
000000000020e198         db  0x00 ; '.'                                         ; DATA XREF=add_range_pair+19, add_range_pair+111, set_fields+870, reset_fields+22
000000000020e199         db  0x00 ; '.'
000000000020e19a         db  0x00 ; '.'
000000000020e19b         db  0x00 ; '.'
000000000020e19c         db  0x00 ; '.'
000000000020e19d         db  0x00 ; '.'
000000000020e19e         db  0x00 ; '.'
000000000020e19f         db  0x00 ; '.'
                     ignore_EPIPE:
000000000020e1a0         db  0x00 ; '.'                                         ; DATA XREF=close_stdout_set_ignore_EPIPE, close_stdout+27
000000000020e1a1         db  0x00 ; '.'
000000000020e1a2         db  0x00 ; '.'
000000000020e1a3         db  0x00 ; '.'
000000000020e1a4         db  0x00 ; '.'
000000000020e1a5         db  0x00 ; '.'
000000000020e1a6         db  0x00 ; '.'
000000000020e1a7         db  0x00 ; '.'
                     file_name:
000000000020e1a8         db  0x00 ; '.'                                         ; DATA XREF=close_stdout_set_file_name, close_stdout+86
000000000020e1a9         db  0x00 ; '.'
000000000020e1aa         db  0x00 ; '.'
000000000020e1ab         db  0x00 ; '.'
000000000020e1ac         db  0x00 ; '.'
000000000020e1ad         db  0x00 ; '.'
000000000020e1ae         db  0x00 ; '.'
000000000020e1af         db  0x00 ; '.'
                     program_name:
000000000020e1b0         db  0x00 ; '.'                                         ; DATA XREF=usage+20, usage+1124, usage+1168, set_program_name+109
000000000020e1b1         db  0x00 ; '.'
000000000020e1b2         db  0x00 ; '.'
000000000020e1b3         db  0x00 ; '.'
000000000020e1b4         db  0x00 ; '.'
000000000020e1b5         db  0x00 ; '.'
000000000020e1b6         db  0x00 ; '.'
000000000020e1b7         db  0x00 ; '.'
000000000020e1b8         db  0x00 ; '.'
000000000020e1b9         db  0x00 ; '.'
000000000020e1ba         db  0x00 ; '.'
000000000020e1bb         db  0x00 ; '.'
000000000020e1bc         db  0x00 ; '.'
000000000020e1bd         db  0x00 ; '.'
000000000020e1be         db  0x00 ; '.'
000000000020e1bf         db  0x00 ; '.'
                     slot0:
000000000020e1c0         db  0x00 ; '.'                                         ; DATA XREF=quotearg_n_options+254, quotearg_free+70, slotvec0
000000000020e1c1         db  0x00 ; '.'
000000000020e1c2         db  0x00 ; '.'
000000000020e1c3         db  0x00 ; '.'
000000000020e1c4         db  0x00 ; '.'
000000000020e1c5         db  0x00 ; '.'
000000000020e1c6         db  0x00 ; '.'
000000000020e1c7         db  0x00 ; '.'
000000000020e1c8         db  0x00 ; '.'
000000000020e1c9         db  0x00 ; '.'
000000000020e1ca         db  0x00 ; '.'
000000000020e1cb         db  0x00 ; '.'
000000000020e1cc         db  0x00 ; '.'
000000000020e1cd         db  0x00 ; '.'
000000000020e1ce         db  0x00 ; '.'
000000000020e1cf         db  0x00 ; '.'
000000000020e1d0         db  0x00 ; '.'
000000000020e1d1         db  0x00 ; '.'
000000000020e1d2         db  0x00 ; '.'
000000000020e1d3         db  0x00 ; '.'
000000000020e1d4         db  0x00 ; '.'
000000000020e1d5         db  0x00 ; '.'
000000000020e1d6         db  0x00 ; '.'
000000000020e1d7         db  0x00 ; '.'
000000000020e1d8         db  0x00 ; '.'
000000000020e1d9         db  0x00 ; '.'
000000000020e1da         db  0x00 ; '.'
000000000020e1db         db  0x00 ; '.'
000000000020e1dc         db  0x00 ; '.'
000000000020e1dd         db  0x00 ; '.'
000000000020e1de         db  0x00 ; '.'
000000000020e1df         db  0x00 ; '.'
000000000020e1e0         db  0x00 ; '.'
000000000020e1e1         db  0x00 ; '.'
000000000020e1e2         db  0x00 ; '.'
000000000020e1e3         db  0x00 ; '.'
000000000020e1e4         db  0x00 ; '.'
000000000020e1e5         db  0x00 ; '.'
000000000020e1e6         db  0x00 ; '.'
000000000020e1e7         db  0x00 ; '.'
000000000020e1e8         db  0x00 ; '.'
000000000020e1e9         db  0x00 ; '.'
000000000020e1ea         db  0x00 ; '.'
000000000020e1eb         db  0x00 ; '.'
000000000020e1ec         db  0x00 ; '.'
000000000020e1ed         db  0x00 ; '.'
000000000020e1ee         db  0x00 ; '.'
000000000020e1ef         db  0x00 ; '.'
000000000020e1f0         db  0x00 ; '.'
000000000020e1f1         db  0x00 ; '.'
000000000020e1f2         db  0x00 ; '.'
000000000020e1f3         db  0x00 ; '.'
000000000020e1f4         db  0x00 ; '.'
000000000020e1f5         db  0x00 ; '.'
000000000020e1f6         db  0x00 ; '.'
000000000020e1f7         db  0x00 ; '.'
000000000020e1f8         db  0x00 ; '.'
000000000020e1f9         db  0x00 ; '.'
000000000020e1fa         db  0x00 ; '.'
000000000020e1fb         db  0x00 ; '.'
000000000020e1fc         db  0x00 ; '.'
000000000020e1fd         db  0x00 ; '.'
000000000020e1fe         db  0x00 ; '.'
000000000020e1ff         db  0x00 ; '.'
000000000020e200         db  0x00 ; '.'
000000000020e201         db  0x00 ; '.'
000000000020e202         db  0x00 ; '.'
000000000020e203         db  0x00 ; '.'
000000000020e204         db  0x00 ; '.'
000000000020e205         db  0x00 ; '.'
000000000020e206         db  0x00 ; '.'
000000000020e207         db  0x00 ; '.'
000000000020e208         db  0x00 ; '.'
000000000020e209         db  0x00 ; '.'
000000000020e20a         db  0x00 ; '.'
000000000020e20b         db  0x00 ; '.'
000000000020e20c         db  0x00 ; '.'
000000000020e20d         db  0x00 ; '.'
000000000020e20e         db  0x00 ; '.'
000000000020e20f         db  0x00 ; '.'
000000000020e210         db  0x00 ; '.'
000000000020e211         db  0x00 ; '.'
000000000020e212         db  0x00 ; '.'
000000000020e213         db  0x00 ; '.'
000000000020e214         db  0x00 ; '.'
000000000020e215         db  0x00 ; '.'
000000000020e216         db  0x00 ; '.'
000000000020e217         db  0x00 ; '.'
000000000020e218         db  0x00 ; '.'
000000000020e219         db  0x00 ; '.'
000000000020e21a         db  0x00 ; '.'
000000000020e21b         db  0x00 ; '.'
000000000020e21c         db  0x00 ; '.'
000000000020e21d         db  0x00 ; '.'
000000000020e21e         db  0x00 ; '.'
000000000020e21f         db  0x00 ; '.'
000000000020e220         db  0x00 ; '.'
000000000020e221         db  0x00 ; '.'
000000000020e222         db  0x00 ; '.'
000000000020e223         db  0x00 ; '.'
000000000020e224         db  0x00 ; '.'
000000000020e225         db  0x00 ; '.'
000000000020e226         db  0x00 ; '.'
000000000020e227         db  0x00 ; '.'
000000000020e228         db  0x00 ; '.'
000000000020e229         db  0x00 ; '.'
000000000020e22a         db  0x00 ; '.'
000000000020e22b         db  0x00 ; '.'
000000000020e22c         db  0x00 ; '.'
000000000020e22d         db  0x00 ; '.'
000000000020e22e         db  0x00 ; '.'
000000000020e22f         db  0x00 ; '.'
000000000020e230         db  0x00 ; '.'
000000000020e231         db  0x00 ; '.'
000000000020e232         db  0x00 ; '.'
000000000020e233         db  0x00 ; '.'
000000000020e234         db  0x00 ; '.'
000000000020e235         db  0x00 ; '.'
000000000020e236         db  0x00 ; '.'
000000000020e237         db  0x00 ; '.'
000000000020e238         db  0x00 ; '.'
000000000020e239         db  0x00 ; '.'
000000000020e23a         db  0x00 ; '.'
000000000020e23b         db  0x00 ; '.'
000000000020e23c         db  0x00 ; '.'
000000000020e23d         db  0x00 ; '.'
000000000020e23e         db  0x00 ; '.'
000000000020e23f         db  0x00 ; '.'
000000000020e240         db  0x00 ; '.'
000000000020e241         db  0x00 ; '.'
000000000020e242         db  0x00 ; '.'
000000000020e243         db  0x00 ; '.'
000000000020e244         db  0x00 ; '.'
000000000020e245         db  0x00 ; '.'
000000000020e246         db  0x00 ; '.'
000000000020e247         db  0x00 ; '.'
000000000020e248         db  0x00 ; '.'
000000000020e249         db  0x00 ; '.'
000000000020e24a         db  0x00 ; '.'
000000000020e24b         db  0x00 ; '.'
000000000020e24c         db  0x00 ; '.'
000000000020e24d         db  0x00 ; '.'
000000000020e24e         db  0x00 ; '.'
000000000020e24f         db  0x00 ; '.'
000000000020e250         db  0x00 ; '.'
000000000020e251         db  0x00 ; '.'
000000000020e252         db  0x00 ; '.'
000000000020e253         db  0x00 ; '.'
000000000020e254         db  0x00 ; '.'
000000000020e255         db  0x00 ; '.'
000000000020e256         db  0x00 ; '.'
000000000020e257         db  0x00 ; '.'
000000000020e258         db  0x00 ; '.'
000000000020e259         db  0x00 ; '.'
000000000020e25a         db  0x00 ; '.'
000000000020e25b         db  0x00 ; '.'
000000000020e25c         db  0x00 ; '.'
000000000020e25d         db  0x00 ; '.'
000000000020e25e         db  0x00 ; '.'
000000000020e25f         db  0x00 ; '.'
000000000020e260         db  0x00 ; '.'
000000000020e261         db  0x00 ; '.'
000000000020e262         db  0x00 ; '.'
000000000020e263         db  0x00 ; '.'
000000000020e264         db  0x00 ; '.'
000000000020e265         db  0x00 ; '.'
000000000020e266         db  0x00 ; '.'
000000000020e267         db  0x00 ; '.'
000000000020e268         db  0x00 ; '.'
000000000020e269         db  0x00 ; '.'
000000000020e26a         db  0x00 ; '.'
000000000020e26b         db  0x00 ; '.'
000000000020e26c         db  0x00 ; '.'
000000000020e26d         db  0x00 ; '.'
000000000020e26e         db  0x00 ; '.'
000000000020e26f         db  0x00 ; '.'
000000000020e270         db  0x00 ; '.'
000000000020e271         db  0x00 ; '.'
000000000020e272         db  0x00 ; '.'
000000000020e273         db  0x00 ; '.'
000000000020e274         db  0x00 ; '.'
000000000020e275         db  0x00 ; '.'
000000000020e276         db  0x00 ; '.'
000000000020e277         db  0x00 ; '.'
000000000020e278         db  0x00 ; '.'
000000000020e279         db  0x00 ; '.'
000000000020e27a         db  0x00 ; '.'
000000000020e27b         db  0x00 ; '.'
000000000020e27c         db  0x00 ; '.'
000000000020e27d         db  0x00 ; '.'
000000000020e27e         db  0x00 ; '.'
000000000020e27f         db  0x00 ; '.'
000000000020e280         db  0x00 ; '.'
000000000020e281         db  0x00 ; '.'
000000000020e282         db  0x00 ; '.'
000000000020e283         db  0x00 ; '.'
000000000020e284         db  0x00 ; '.'
000000000020e285         db  0x00 ; '.'
000000000020e286         db  0x00 ; '.'
000000000020e287         db  0x00 ; '.'
000000000020e288         db  0x00 ; '.'
000000000020e289         db  0x00 ; '.'
000000000020e28a         db  0x00 ; '.'
000000000020e28b         db  0x00 ; '.'
000000000020e28c         db  0x00 ; '.'
000000000020e28d         db  0x00 ; '.'
000000000020e28e         db  0x00 ; '.'
000000000020e28f         db  0x00 ; '.'
000000000020e290         db  0x00 ; '.'
000000000020e291         db  0x00 ; '.'
000000000020e292         db  0x00 ; '.'
000000000020e293         db  0x00 ; '.'
000000000020e294         db  0x00 ; '.'
000000000020e295         db  0x00 ; '.'
000000000020e296         db  0x00 ; '.'
000000000020e297         db  0x00 ; '.'
000000000020e298         db  0x00 ; '.'
000000000020e299         db  0x00 ; '.'
000000000020e29a         db  0x00 ; '.'
000000000020e29b         db  0x00 ; '.'
000000000020e29c         db  0x00 ; '.'
000000000020e29d         db  0x00 ; '.'
000000000020e29e         db  0x00 ; '.'
000000000020e29f         db  0x00 ; '.'
000000000020e2a0         db  0x00 ; '.'
000000000020e2a1         db  0x00 ; '.'
000000000020e2a2         db  0x00 ; '.'
000000000020e2a3         db  0x00 ; '.'
000000000020e2a4         db  0x00 ; '.'
000000000020e2a5         db  0x00 ; '.'
000000000020e2a6         db  0x00 ; '.'
000000000020e2a7         db  0x00 ; '.'
000000000020e2a8         db  0x00 ; '.'
000000000020e2a9         db  0x00 ; '.'
000000000020e2aa         db  0x00 ; '.'
000000000020e2ab         db  0x00 ; '.'
000000000020e2ac         db  0x00 ; '.'
000000000020e2ad         db  0x00 ; '.'
000000000020e2ae         db  0x00 ; '.'
000000000020e2af         db  0x00 ; '.'
000000000020e2b0         db  0x00 ; '.'
000000000020e2b1         db  0x00 ; '.'
000000000020e2b2         db  0x00 ; '.'
000000000020e2b3         db  0x00 ; '.'
000000000020e2b4         db  0x00 ; '.'
000000000020e2b5         db  0x00 ; '.'
000000000020e2b6         db  0x00 ; '.'
000000000020e2b7         db  0x00 ; '.'
000000000020e2b8         db  0x00 ; '.'
000000000020e2b9         db  0x00 ; '.'
000000000020e2ba         db  0x00 ; '.'
000000000020e2bb         db  0x00 ; '.'
000000000020e2bc         db  0x00 ; '.'
000000000020e2bd         db  0x00 ; '.'
000000000020e2be         db  0x00 ; '.'
000000000020e2bf         db  0x00 ; '.'
                     default_quoting_options:
000000000020e2c0         db  0x00 ; '.'                                         ; DATA XREF=clone_quoting_options+18, get_quoting_style, set_quoting_style, set_char_quoting, set_quoting_flags, set_custom_quoting, quotearg_buffer+4, quotearg_alloc_mem+4, quotearg_n, quotearg_n_mem, quotearg
000000000020e2c1         db  0x00 ; '.'
000000000020e2c2         db  0x00 ; '.'
000000000020e2c3         db  0x00 ; '.'
000000000020e2c4         db  0x00 ; '.'
000000000020e2c5         db  0x00 ; '.'
000000000020e2c6         db  0x00 ; '.'
000000000020e2c7         db  0x00 ; '.'
000000000020e2c8         db  0x00 ; '.'
000000000020e2c9         db  0x00 ; '.'
000000000020e2ca         db  0x00 ; '.'
000000000020e2cb         db  0x00 ; '.'
000000000020e2cc         db  0x00 ; '.'
000000000020e2cd         db  0x00 ; '.'
000000000020e2ce         db  0x00 ; '.'
000000000020e2cf         db  0x00 ; '.'
000000000020e2d0         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+65, quotearg_n_custom_mem+57
000000000020e2d1         db  0x00 ; '.'
000000000020e2d2         db  0x00 ; '.'
000000000020e2d3         db  0x00 ; '.'
000000000020e2d4         db  0x00 ; '.'
000000000020e2d5         db  0x00 ; '.'
000000000020e2d6         db  0x00 ; '.'
000000000020e2d7         db  0x00 ; '.'
000000000020e2d8         db  0x00 ; '.'
000000000020e2d9         db  0x00 ; '.'
000000000020e2da         db  0x00 ; '.'
000000000020e2db         db  0x00 ; '.'
000000000020e2dc         db  0x00 ; '.'
000000000020e2dd         db  0x00 ; '.'
000000000020e2de         db  0x00 ; '.'
000000000020e2df         db  0x00 ; '.'
000000000020e2e0         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+78, quotearg_n_custom_mem+70
000000000020e2e1         db  0x00 ; '.'
000000000020e2e2         db  0x00 ; '.'
000000000020e2e3         db  0x00 ; '.'
000000000020e2e4         db  0x00 ; '.'
000000000020e2e5         db  0x00 ; '.'
000000000020e2e6         db  0x00 ; '.'
000000000020e2e7         db  0x00 ; '.'
000000000020e2e8         db  0x00 ; '.'
000000000020e2e9         db  0x00 ; '.'
000000000020e2ea         db  0x00 ; '.'
000000000020e2eb         db  0x00 ; '.'
000000000020e2ec         db  0x00 ; '.'
000000000020e2ed         db  0x00 ; '.'
000000000020e2ee         db  0x00 ; '.'
000000000020e2ef         db  0x00 ; '.'
                     qword_20e2f0:
000000000020e2f0         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+22, quotearg_n_custom_mem+7
000000000020e2f1         db  0x00 ; '.'
000000000020e2f2         db  0x00 ; '.'
000000000020e2f3         db  0x00 ; '.'
000000000020e2f4         db  0x00 ; '.'
000000000020e2f5         db  0x00 ; '.'
000000000020e2f6         db  0x00 ; '.'
000000000020e2f7         db  0x00 ; '.'
                     frp:
000000000020e2f8         db  0x00 ; '.'                                         ; DATA XREF=process_field+42, add_range_pair+26, add_range_pair+137, set_fields+346, set_fields+382, set_fields+505, set_fields+585, set_fields+848, set_fields+1021, reset_fields+4, reset_fields+38
000000000020e2f9         db  0x00 ; '.'
000000000020e2fa         db  0x00 ; '.'
000000000020e2fb         db  0x00 ; '.'
000000000020e2fc         db  0x00 ; '.'
000000000020e2fd         db  0x00 ; '.'
000000000020e2fe         db  0x00 ; '.'
000000000020e2ff         db  0x00 ; '.'
                     n_frp:
000000000020e300         db  0x00 ; '.'                                         ; DATA XREF=main+277, add_range_pair+12, add_range_pair+56, add_range_pair+127, set_fields+330, set_fields+375, set_fields+498, set_fields+519, set_fields+562, set_fields+578, set_fields+859
000000000020e301         db  0x00 ; '.'
000000000020e302         db  0x00 ; '.'
000000000020e303         db  0x00 ; '.'
000000000020e304         db  0x00 ; '.'
000000000020e305         db  0x00 ; '.'
000000000020e306         db  0x00 ; '.'
000000000020e307         db  0x00 ; '.'


        ; Segment External Symbols
        ; Range: [0x20e310; 0x20e700[ (1008 bytes)
        ; No data on disk
        ; Permissions:  - 



        ; Section External Symbols Section
        ; Range: [0x20e310; 0x41ca10[ (2156288 bytes)
        ; No data on disk

                             ; External Symbols Segment
                     __snprintf_chk:
000000000020e310         extern function code                                   ; DATA XREF=__snprintf_chk@GOT
                     free:
000000000020e318         extern function code                                   ; DATA XREF=free@GOT
                     abort:
000000000020e320         extern function code                                   ; DATA XREF=abort@GOT
                     __errno_location:
000000000020e328         extern function code                                   ; DATA XREF=__errno_location@GOT
                     strncmp:
000000000020e330         extern function code                                   ; DATA XREF=strncmp@GOT
                     _ITM_deregisterTMCloneTable:
000000000020e338         extern function code
                     _exit:
000000000020e340         extern function code                                   ; DATA XREF=_exit@GOT
                     strcpy:
000000000020e348         extern function code                                   ; DATA XREF=strcpy@GOT
                     __fpending:
000000000020e350         extern function code                                   ; DATA XREF=__fpending@GOT
                     qsort:
000000000020e358         extern function code                                   ; DATA XREF=qsort@GOT
                     wcswidth:
000000000020e360         extern function code                                   ; DATA XREF=wcswidth@GOT
                     mbstowcs:
000000000020e368         extern function code                                   ; DATA XREF=mbstowcs@GOT
                     textdomain:
000000000020e370         extern function code                                   ; DATA XREF=textdomain@GOT
                     fclose:
000000000020e378         extern function code                                   ; DATA XREF=fclose@GOT
                     bindtextdomain:
000000000020e380         extern function code                                   ; DATA XREF=bindtextdomain@GOT
                     dcgettext:
000000000020e388         extern function code                                   ; DATA XREF=dcgettext@GOT
                     __ctype_get_mb_cur_max:
000000000020e390         extern function code                                   ; DATA XREF=__ctype_get_mb_cur_max@GOT
                     strlen:
000000000020e398         extern function code                                   ; DATA XREF=strlen@GOT
                     __stack_chk_fail:
000000000020e3a0         extern function code                                   ; DATA XREF=__stack_chk_fail@GOT
                     getopt_long:
000000000020e3a8         extern function code                                   ; DATA XREF=getopt_long@GOT
                     mbrtowc:
000000000020e3b0         extern function code                                   ; DATA XREF=mbrtowc@GOT
                     strchr:
000000000020e3b8         extern function code                                   ; DATA XREF=strchr@GOT
                     __overflow:
000000000020e3c0         extern function code                                   ; DATA XREF=__overflow@GOT
                     strrchr:
000000000020e3c8         extern function code                                   ; DATA XREF=strrchr@GOT
                     lseek:
000000000020e3d0         extern function code                                   ; DATA XREF=lseek@GOT
                     __assert_fail:
000000000020e3d8         extern function code                                   ; DATA XREF=__assert_fail@GOT
                     __strtoul_internal:
000000000020e3e0         extern function code                                   ; DATA XREF=__strtoul_internal@GOT
                     memset:
000000000020e3e8         extern function code                                   ; DATA XREF=memset@GOT
                     strspn:
000000000020e3f0         extern function code                                   ; DATA XREF=strspn@GOT
                     strndup:
000000000020e3f8         extern function code                                   ; DATA XREF=strndup@GOT
                     __libc_start_main:
000000000020e400         extern function code
                     memcmp:
000000000020e408         extern function code                                   ; DATA XREF=memcmp@GOT
                     fputs_unlocked:
000000000020e410         extern function code                                   ; DATA XREF=fputs_unlocked@GOT
                     calloc:
000000000020e418         extern function code                                   ; DATA XREF=calloc@GOT
                     strcmp:
000000000020e420         extern function code                                   ; DATA XREF=strcmp@GOT
                     __gmon_start__:
000000000020e428         extern function code
                     strtol:
000000000020e430         extern function code                                   ; DATA XREF=strtol@GOT
                     memcpy:
000000000020e438         extern function code                                   ; DATA XREF=memcpy@GOT
                     fileno:
000000000020e440         extern function code                                   ; DATA XREF=fileno@GOT
                     wcwidth:
000000000020e448         extern function code                                   ; DATA XREF=wcwidth@GOT
                     malloc:
000000000020e450         extern function code                                   ; DATA XREF=malloc@GOT
                     fflush:
000000000020e458         extern function code                                   ; DATA XREF=fflush@GOT
                     nl_langinfo:
000000000020e460         extern function code                                   ; DATA XREF=nl_langinfo@GOT
                     __freading:
000000000020e468         extern function code                                   ; DATA XREF=__freading@GOT
                     realloc:
000000000020e470         extern function code                                   ; DATA XREF=realloc@GOT
                     setlocale:
000000000020e478         extern function code                                   ; DATA XREF=setlocale@GOT
                     __printf_chk:
000000000020e480         extern function code                                   ; DATA XREF=__printf_chk@GOT
                     mempcpy:
000000000020e488         extern function code                                   ; DATA XREF=mempcpy@GOT
                     memmove:
000000000020e490         extern function code                                   ; DATA XREF=memmove@GOT
                     error:
000000000020e498         extern function code                                   ; DATA XREF=error@GOT
                     fseeko:
000000000020e4a0         extern function code                                   ; DATA XREF=fseeko@GOT
                     __cxa_atexit:
000000000020e4a8         extern function code                                   ; DATA XREF=__cxa_atexit@GOT
                     wcstombs:
000000000020e4b0         extern function code                                   ; DATA XREF=wcstombs@GOT
                     exit:
000000000020e4b8         extern function code                                   ; DATA XREF=exit@GOT
                     fwrite:
000000000020e4c0         extern function code                                   ; DATA XREF=fwrite@GOT
                     __fprintf_chk:
000000000020e4c8         extern function code                                   ; DATA XREF=__fprintf_chk@GOT
                     __strncat_chk:
000000000020e4d0         extern function code                                   ; DATA XREF=__strncat_chk@GOT
                     _ITM_registerTMCloneTable:
000000000020e4d8         extern function code
                     mbsinit:
000000000020e4e0         extern function code                                   ; DATA XREF=mbsinit@GOT
                     iswprint:
000000000020e4e8         extern function code                                   ; DATA XREF=iswprint@GOT
                     __cxa_finalize:
000000000020e4f0         extern function code
                     getdelim:
000000000020e4f8         extern function code                                   ; DATA XREF=getdelim@GOT
                     __ctype_b_loc:
000000000020e500         extern function code                                   ; DATA XREF=__ctype_b_loc@GOT
                     __snprintf_chk@@GLIBC_2.3.4:
000000000020e508         extern function code
                     free@@GLIBC_2.2.5:
000000000020e510         extern function code
                     abort@@GLIBC_2.2.5:
000000000020e518         extern function code
                     __errno_location@@GLIBC_2.2.5:
000000000020e520         extern function code
                     strncmp@@GLIBC_2.2.5:
000000000020e528         extern function code
                     _ITM_deregisterTMCloneTable_20e530:        // _ITM_deregisterTMCloneTable
000000000020e530         extern function code
                     _exit@@GLIBC_2.2.5:
000000000020e538         extern function code
                     strcpy@@GLIBC_2.2.5:
000000000020e540         extern function code
                     __fpending@@GLIBC_2.2.5:
000000000020e548         extern function code
                     qsort@@GLIBC_2.2.5:
000000000020e550         extern function code
                     wcswidth@@GLIBC_2.2.5:
000000000020e558         extern function code
                     mbstowcs@@GLIBC_2.2.5:
000000000020e560         extern function code
                     textdomain@@GLIBC_2.2.5:
000000000020e568         extern function code
                     fclose@@GLIBC_2.2.5:
000000000020e570         extern function code
                     bindtextdomain@@GLIBC_2.2.5:
000000000020e578         extern function code
                     dcgettext@@GLIBC_2.2.5:
000000000020e580         extern function code
                     __ctype_get_mb_cur_max@@GLIBC_2.2.5:
000000000020e588         extern function code
                     strlen@@GLIBC_2.2.5:
000000000020e590         extern function code
                     __stack_chk_fail@@GLIBC_2.4:
000000000020e598         extern function code
                     getopt_long@@GLIBC_2.2.5:
000000000020e5a0         extern function code
                     mbrtowc@@GLIBC_2.2.5:
000000000020e5a8         extern function code
                     strchr@@GLIBC_2.2.5:
000000000020e5b0         extern function code
                     __overflow@@GLIBC_2.2.5:
000000000020e5b8         extern function code
                     strrchr@@GLIBC_2.2.5:
000000000020e5c0         extern function code
                     lseek@@GLIBC_2.2.5:
000000000020e5c8         extern function code
                     __assert_fail@@GLIBC_2.2.5:
000000000020e5d0         extern function code
                     __strtoul_internal@@GLIBC_2.2.5:
000000000020e5d8         extern function code
                     memset@@GLIBC_2.2.5:
000000000020e5e0         extern function code
                     strspn@@GLIBC_2.2.5:
000000000020e5e8         extern function code
                     strndup@@GLIBC_2.2.5:
000000000020e5f0         extern function code
                     __libc_start_main@@GLIBC_2.2.5:
000000000020e5f8         extern function code
                     memcmp@@GLIBC_2.2.5:
000000000020e600         extern function code
                     fputs_unlocked@@GLIBC_2.2.5:
000000000020e608         extern function code
                     calloc@@GLIBC_2.2.5:
000000000020e610         extern function code
                     strcmp@@GLIBC_2.2.5:
000000000020e618         extern function code
                     __gmon_start___20e620:        // __gmon_start__
000000000020e620         extern function code
                     strtol@@GLIBC_2.2.5:
000000000020e628         extern function code
                     memcpy@@GLIBC_2.14:
000000000020e630         extern function code
                     fileno@@GLIBC_2.2.5:
000000000020e638         extern function code
                     wcwidth@@GLIBC_2.2.5:
000000000020e640         extern function code
                     malloc@@GLIBC_2.2.5:
000000000020e648         extern function code
                     fflush@@GLIBC_2.2.5:
000000000020e650         extern function code
                     nl_langinfo@@GLIBC_2.2.5:
000000000020e658         extern function code
                     __freading@@GLIBC_2.2.5:
000000000020e660         extern function code
                     realloc@@GLIBC_2.2.5:
000000000020e668         extern function code
                     setlocale@@GLIBC_2.2.5:
000000000020e670         extern function code
                     __printf_chk@@GLIBC_2.3.4:
000000000020e678         extern function code
                     mempcpy@@GLIBC_2.2.5:
000000000020e680         extern function code
                     memmove@@GLIBC_2.2.5:
000000000020e688         extern function code
                     error@@GLIBC_2.2.5:
000000000020e690         extern function code
                     fseeko@@GLIBC_2.2.5:
000000000020e698         extern function code
                     __cxa_atexit@@GLIBC_2.2.5:
000000000020e6a0         extern function code
                     wcstombs@@GLIBC_2.2.5:
000000000020e6a8         extern function code
                     exit@@GLIBC_2.2.5:
000000000020e6b0         extern function code
                     fwrite@@GLIBC_2.2.5:
000000000020e6b8         extern function code
                     __fprintf_chk@@GLIBC_2.3.4:
000000000020e6c0         extern function code
                     __strncat_chk@@GLIBC_2.3.4:
000000000020e6c8         extern function code
                     _ITM_registerTMCloneTable_20e6d0:        // _ITM_registerTMCloneTable
000000000020e6d0         extern function code
                     mbsinit@@GLIBC_2.2.5:
000000000020e6d8         extern function code
                     iswprint@@GLIBC_2.2.5:
000000000020e6e0         extern function code
                     __cxa_finalize@@GLIBC_2.2.5:
000000000020e6e8         extern function code
                     getdelim@@GLIBC_2.2.5:
000000000020e6f0         extern function code
                     __ctype_b_loc@@GLIBC_2.3:
000000000020e6f8         extern function code
