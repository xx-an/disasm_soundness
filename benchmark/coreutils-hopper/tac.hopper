
/*
--------------------------------------------------------------------------------

        File: /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/tac
        UUID: 6383A9EB-67B7-2C9D-637D-51CCB3F95E15
        Analysis version 58
        ELF file
        CPU: intel/x86_64
        64 bits addresses (Little Endian)

--------------------------------------------------------------------------------
*/



        ; Segment Segment 2
        ; Range: [0x0; 0x17ff0[ (98288 bytes)
        ; File offset : [0; 98288[ (98288 bytes)
        ; Permissions: readable / executable
        ; Flags: 0x5

0000000000000000         db  0x7f ; '.'
0000000000000001         db  0x45 ; 'E'
0000000000000002         db  0x4c ; 'L'
0000000000000003         db  0x46 ; 'F'
0000000000000004         db  0x02 ; '.'
0000000000000005         db  0x01 ; '.'
0000000000000006         db  0x01 ; '.'
0000000000000007         db  0x00 ; '.'
0000000000000008         db  0x00 ; '.'
0000000000000009         db  0x00 ; '.'
000000000000000a         db  0x00 ; '.'
000000000000000b         db  0x00 ; '.'
000000000000000c         db  0x00 ; '.'
000000000000000d         db  0x00 ; '.'
000000000000000e         db  0x00 ; '.'
000000000000000f         db  0x00 ; '.'
0000000000000010         db  0x03 ; '.'
0000000000000011         db  0x00 ; '.'
0000000000000012         db  0x3e ; '>'
0000000000000013         db  0x00 ; '.'
0000000000000014         db  0x01 ; '.'
0000000000000015         db  0x00 ; '.'
0000000000000016         db  0x00 ; '.'
0000000000000017         db  0x00 ; '.'
0000000000000018         db  0x20 ; ' '
0000000000000019         db  0x24 ; '$'
000000000000001a         db  0x00 ; '.'
000000000000001b         db  0x00 ; '.'
000000000000001c         db  0x00 ; '.'
000000000000001d         db  0x00 ; '.'
000000000000001e         db  0x00 ; '.'
000000000000001f         db  0x00 ; '.'
0000000000000020         db  0x40 ; '@'
0000000000000021         db  0x00 ; '.'
0000000000000022         db  0x00 ; '.'
0000000000000023         db  0x00 ; '.'
0000000000000024         db  0x00 ; '.'
0000000000000025         db  0x00 ; '.'
0000000000000026         db  0x00 ; '.'
0000000000000027         db  0x00 ; '.'
0000000000000028         db  0x78 ; 'x'
0000000000000029         db  0x9f ; '.'
000000000000002a         db  0x07 ; '.'
000000000000002b         db  0x00 ; '.'
000000000000002c         db  0x00 ; '.'
000000000000002d         db  0x00 ; '.'
000000000000002e         db  0x00 ; '.'
000000000000002f         db  0x00 ; '.'
0000000000000030         db  0x00 ; '.'
0000000000000031         db  0x00 ; '.'
0000000000000032         db  0x00 ; '.'
0000000000000033         db  0x00 ; '.'
0000000000000034         db  0x40 ; '@'
0000000000000035         db  0x00 ; '.'
0000000000000036         db  0x38 ; '8'
0000000000000037         db  0x00 ; '.'
0000000000000038         db  0x09 ; '.'
0000000000000039         db  0x00 ; '.'
000000000000003a         db  0x40 ; '@'
000000000000003b         db  0x00 ; '.'
000000000000003c         db  0x25 ; '%'
000000000000003d         db  0x00 ; '.'
000000000000003e         db  0x24 ; '$'
000000000000003f         db  0x00 ; '.'
0000000000000040         db  0x06 ; '.'
0000000000000041         db  0x00 ; '.'
0000000000000042         db  0x00 ; '.'
0000000000000043         db  0x00 ; '.'
0000000000000044         db  0x04 ; '.'
0000000000000045         db  0x00 ; '.'
0000000000000046         db  0x00 ; '.'
0000000000000047         db  0x00 ; '.'
0000000000000048         db  0x40 ; '@'
0000000000000049         db  0x00 ; '.'
000000000000004a         db  0x00 ; '.'
000000000000004b         db  0x00 ; '.'
000000000000004c         db  0x00 ; '.'
000000000000004d         db  0x00 ; '.'
000000000000004e         db  0x00 ; '.'
000000000000004f         db  0x00 ; '.'
0000000000000050         db  0x40 ; '@'
0000000000000051         db  0x00 ; '.'
0000000000000052         db  0x00 ; '.'
0000000000000053         db  0x00 ; '.'
0000000000000054         db  0x00 ; '.'
0000000000000055         db  0x00 ; '.'
0000000000000056         db  0x00 ; '.'
0000000000000057         db  0x00 ; '.'
0000000000000058         db  0x40 ; '@'
0000000000000059         db  0x00 ; '.'
000000000000005a         db  0x00 ; '.'
000000000000005b         db  0x00 ; '.'
000000000000005c         db  0x00 ; '.'
000000000000005d         db  0x00 ; '.'
000000000000005e         db  0x00 ; '.'
000000000000005f         db  0x00 ; '.'
0000000000000060         db  0xf8 ; '.'
0000000000000061         db  0x01 ; '.'
0000000000000062         db  0x00 ; '.'
0000000000000063         db  0x00 ; '.'
0000000000000064         db  0x00 ; '.'
0000000000000065         db  0x00 ; '.'
0000000000000066         db  0x00 ; '.'
0000000000000067         db  0x00 ; '.'
0000000000000068         db  0xf8 ; '.'
0000000000000069         db  0x01 ; '.'
000000000000006a         db  0x00 ; '.'
000000000000006b         db  0x00 ; '.'
000000000000006c         db  0x00 ; '.'
000000000000006d         db  0x00 ; '.'
000000000000006e         db  0x00 ; '.'
000000000000006f         db  0x00 ; '.'
0000000000000070         db  0x08 ; '.'
0000000000000071         db  0x00 ; '.'
0000000000000072         db  0x00 ; '.'
0000000000000073         db  0x00 ; '.'
0000000000000074         db  0x00 ; '.'
0000000000000075         db  0x00 ; '.'
0000000000000076         db  0x00 ; '.'
0000000000000077         db  0x00 ; '.'
0000000000000078         db  0x03 ; '.'
0000000000000079         db  0x00 ; '.'
000000000000007a         db  0x00 ; '.'
000000000000007b         db  0x00 ; '.'
000000000000007c         db  0x04 ; '.'
000000000000007d         db  0x00 ; '.'
000000000000007e         db  0x00 ; '.'
000000000000007f         db  0x00 ; '.'
0000000000000080         db  0x38 ; '8'
0000000000000081         db  0x02 ; '.'
0000000000000082         db  0x00 ; '.'
0000000000000083         db  0x00 ; '.'
0000000000000084         db  0x00 ; '.'
0000000000000085         db  0x00 ; '.'
0000000000000086         db  0x00 ; '.'
0000000000000087         db  0x00 ; '.'
0000000000000088         db  0x38 ; '8'
0000000000000089         db  0x02 ; '.'
000000000000008a         db  0x00 ; '.'
000000000000008b         db  0x00 ; '.'
000000000000008c         db  0x00 ; '.'
000000000000008d         db  0x00 ; '.'
000000000000008e         db  0x00 ; '.'
000000000000008f         db  0x00 ; '.'
0000000000000090         db  0x38 ; '8'
0000000000000091         db  0x02 ; '.'
0000000000000092         db  0x00 ; '.'
0000000000000093         db  0x00 ; '.'
0000000000000094         db  0x00 ; '.'
0000000000000095         db  0x00 ; '.'
0000000000000096         db  0x00 ; '.'
0000000000000097         db  0x00 ; '.'
0000000000000098         db  0x1c ; '.'
0000000000000099         db  0x00 ; '.'
000000000000009a         db  0x00 ; '.'
000000000000009b         db  0x00 ; '.'
000000000000009c         db  0x00 ; '.'
000000000000009d         db  0x00 ; '.'
000000000000009e         db  0x00 ; '.'
000000000000009f         db  0x00 ; '.'
00000000000000a0         db  0x1c ; '.'
00000000000000a1         db  0x00 ; '.'
00000000000000a2         db  0x00 ; '.'
00000000000000a3         db  0x00 ; '.'
00000000000000a4         db  0x00 ; '.'
00000000000000a5         db  0x00 ; '.'
00000000000000a6         db  0x00 ; '.'
00000000000000a7         db  0x00 ; '.'
00000000000000a8         db  0x01 ; '.'
00000000000000a9         db  0x00 ; '.'
00000000000000aa         db  0x00 ; '.'
00000000000000ab         db  0x00 ; '.'
00000000000000ac         db  0x00 ; '.'
00000000000000ad         db  0x00 ; '.'
00000000000000ae         db  0x00 ; '.'
00000000000000af         db  0x00 ; '.'
00000000000000b0         db  0x01 ; '.'
00000000000000b1         db  0x00 ; '.'
00000000000000b2         db  0x00 ; '.'
00000000000000b3         db  0x00 ; '.'
00000000000000b4         db  0x05 ; '.'
00000000000000b5         db  0x00 ; '.'
00000000000000b6         db  0x00 ; '.'
00000000000000b7         db  0x00 ; '.'
00000000000000b8         db  0x00 ; '.'
00000000000000b9         db  0x00 ; '.'
00000000000000ba         db  0x00 ; '.'
00000000000000bb         db  0x00 ; '.'
00000000000000bc         db  0x00 ; '.'
00000000000000bd         db  0x00 ; '.'
00000000000000be         db  0x00 ; '.'
00000000000000bf         db  0x00 ; '.'
00000000000000c0         db  0x00 ; '.'
00000000000000c1         db  0x00 ; '.'
00000000000000c2         db  0x00 ; '.'
00000000000000c3         db  0x00 ; '.'
00000000000000c4         db  0x00 ; '.'
00000000000000c5         db  0x00 ; '.'
00000000000000c6         db  0x00 ; '.'
00000000000000c7         db  0x00 ; '.'
00000000000000c8         db  0x00 ; '.'
00000000000000c9         db  0x00 ; '.'
00000000000000ca         db  0x00 ; '.'
00000000000000cb         db  0x00 ; '.'
00000000000000cc         db  0x00 ; '.'
00000000000000cd         db  0x00 ; '.'
00000000000000ce         db  0x00 ; '.'
00000000000000cf         db  0x00 ; '.'
00000000000000d0         db  0xf0 ; '.'
00000000000000d1         db  0x7f ; '.'
00000000000000d2         db  0x01 ; '.'
00000000000000d3         db  0x00 ; '.'
00000000000000d4         db  0x00 ; '.'
00000000000000d5         db  0x00 ; '.'
00000000000000d6         db  0x00 ; '.'
00000000000000d7         db  0x00 ; '.'
00000000000000d8         db  0xf0 ; '.'
00000000000000d9         db  0x7f ; '.'
00000000000000da         db  0x01 ; '.'
00000000000000db         db  0x00 ; '.'
00000000000000dc         db  0x00 ; '.'
00000000000000dd         db  0x00 ; '.'
00000000000000de         db  0x00 ; '.'
00000000000000df         db  0x00 ; '.'
00000000000000e0         db  0x00 ; '.'
00000000000000e1         db  0x00 ; '.'
00000000000000e2         db  0x20 ; ' '
00000000000000e3         db  0x00 ; '.'
00000000000000e4         db  0x00 ; '.'
00000000000000e5         db  0x00 ; '.'
00000000000000e6         db  0x00 ; '.'
00000000000000e7         db  0x00 ; '.'
00000000000000e8         db  0x01 ; '.'
00000000000000e9         db  0x00 ; '.'
00000000000000ea         db  0x00 ; '.'
00000000000000eb         db  0x00 ; '.'
00000000000000ec         db  0x06 ; '.'
00000000000000ed         db  0x00 ; '.'
00000000000000ee         db  0x00 ; '.'
00000000000000ef         db  0x00 ; '.'
00000000000000f0         db  0x70 ; 'p'
00000000000000f1         db  0x8a ; '.'
00000000000000f2         db  0x01 ; '.'
00000000000000f3         db  0x00 ; '.'
00000000000000f4         db  0x00 ; '.'
00000000000000f5         db  0x00 ; '.'
00000000000000f6         db  0x00 ; '.'
00000000000000f7         db  0x00 ; '.'
00000000000000f8         db  0x70 ; 'p'
00000000000000f9         db  0x8a ; '.'
00000000000000fa         db  0x21 ; '!'
00000000000000fb         db  0x00 ; '.'
00000000000000fc         db  0x00 ; '.'
00000000000000fd         db  0x00 ; '.'
00000000000000fe         db  0x00 ; '.'
00000000000000ff         db  0x00 ; '.'
0000000000000100         db  0x70 ; 'p'                                         ; DATA XREF=quotearg_free+87, build_trtable+736, build_trtable+2820, build_charclass.isra.29+219, build_charclass.isra.29+299, build_charclass.isra.29+540, build_charclass.isra.29+612, build_charclass.isra.29+748, build_charclass.isra.29+806, build_charclass.isra.29+876, build_charclass.isra.29+934
0000000000000101         db  0x8a ; '.'
0000000000000102         db  0x21 ; '!'
0000000000000103         db  0x00 ; '.'
0000000000000104         db  0x00 ; '.'
0000000000000105         db  0x00 ; '.'
0000000000000106         db  0x00 ; '.'
0000000000000107         db  0x00 ; '.'
0000000000000108         db  0x10 ; '.'                                         ; DATA XREF=build_trtable+18, build_trtable+1065
0000000000000109         db  0x06 ; '.'
000000000000010a         db  0x00 ; '.'
000000000000010b         db  0x00 ; '.'
000000000000010c         db  0x00 ; '.'
000000000000010d         db  0x00 ; '.'
000000000000010e         db  0x00 ; '.'
000000000000010f         db  0x00 ; '.'
0000000000000110         db  0x98 ; '.'
0000000000000111         db  0x29 ; ')'
0000000000000112         db  0x00 ; '.'
0000000000000113         db  0x00 ; '.'
0000000000000114         db  0x00 ; '.'
0000000000000115         db  0x00 ; '.'
0000000000000116         db  0x00 ; '.'
0000000000000117         db  0x00 ; '.'
0000000000000118         db  0x00 ; '.'
0000000000000119         db  0x00 ; '.'
000000000000011a         db  0x20 ; ' '
000000000000011b         db  0x00 ; '.'
000000000000011c         db  0x00 ; '.'
000000000000011d         db  0x00 ; '.'
000000000000011e         db  0x00 ; '.'
000000000000011f         db  0x00 ; '.'
0000000000000120         db  0x02 ; '.'
0000000000000121         db  0x00 ; '.'
0000000000000122         db  0x00 ; '.'
0000000000000123         db  0x00 ; '.'
0000000000000124         db  0x06 ; '.'
0000000000000125         db  0x00 ; '.'
0000000000000126         db  0x00 ; '.'
0000000000000127         db  0x00 ; '.'
0000000000000128         db  0xb8 ; '.'                                         ; DATA XREF=parse_expression+10, sub_10870+156, re_compile_internal+10, re_compile_internal+947
0000000000000129         db  0x8b ; '.'
000000000000012a         db  0x01 ; '.'
000000000000012b         db  0x00 ; '.'
000000000000012c         db  0x00 ; '.'
000000000000012d         db  0x00 ; '.'
000000000000012e         db  0x00 ; '.'
000000000000012f         db  0x00 ; '.'
0000000000000130         db  0xb8 ; '.'
0000000000000131         db  0x8b ; '.'
0000000000000132         db  0x21 ; '!'
0000000000000133         db  0x00 ; '.'
0000000000000134         db  0x00 ; '.'
0000000000000135         db  0x00 ; '.'
0000000000000136         db  0x00 ; '.'
0000000000000137         db  0x00 ; '.'
0000000000000138         db  0xb8 ; '.'
0000000000000139         db  0x8b ; '.'
000000000000013a         db  0x21 ; '!'
000000000000013b         db  0x00 ; '.'
000000000000013c         db  0x00 ; '.'
000000000000013d         db  0x00 ; '.'
000000000000013e         db  0x00 ; '.'
000000000000013f         db  0x00 ; '.'
0000000000000140         db  0xf0 ; '.'
0000000000000141         db  0x01 ; '.'
0000000000000142         db  0x00 ; '.'
0000000000000143         db  0x00 ; '.'
0000000000000144         db  0x00 ; '.'
0000000000000145         db  0x00 ; '.'
0000000000000146         db  0x00 ; '.'
0000000000000147         db  0x00 ; '.'
0000000000000148         db  0xf0 ; '.'
0000000000000149         db  0x01 ; '.'
000000000000014a         db  0x00 ; '.'
000000000000014b         db  0x00 ; '.'
000000000000014c         db  0x00 ; '.'
000000000000014d         db  0x00 ; '.'
000000000000014e         db  0x00 ; '.'
000000000000014f         db  0x00 ; '.'
0000000000000150         db  0x08 ; '.'
0000000000000151         db  0x00 ; '.'
0000000000000152         db  0x00 ; '.'
0000000000000153         db  0x00 ; '.'
0000000000000154         db  0x00 ; '.'
0000000000000155         db  0x00 ; '.'
0000000000000156         db  0x00 ; '.'
0000000000000157         db  0x00 ; '.'
0000000000000158         db  0x04 ; '.'
0000000000000159         db  0x00 ; '.'
000000000000015a         db  0x00 ; '.'
000000000000015b         db  0x00 ; '.'
000000000000015c         db  0x04 ; '.'
000000000000015d         db  0x00 ; '.'
000000000000015e         db  0x00 ; '.'
000000000000015f         db  0x00 ; '.'
0000000000000160         db  0x54 ; 'T'
0000000000000161         db  0x02 ; '.'
0000000000000162         db  0x00 ; '.'
0000000000000163         db  0x00 ; '.'
0000000000000164         db  0x00 ; '.'
0000000000000165         db  0x00 ; '.'
0000000000000166         db  0x00 ; '.'
0000000000000167         db  0x00 ; '.'
0000000000000168         db  0x54 ; 'T'
0000000000000169         db  0x02 ; '.'
000000000000016a         db  0x00 ; '.'
000000000000016b         db  0x00 ; '.'
000000000000016c         db  0x00 ; '.'
000000000000016d         db  0x00 ; '.'
000000000000016e         db  0x00 ; '.'
000000000000016f         db  0x00 ; '.'
0000000000000170         db  0x54 ; 'T'
0000000000000171         db  0x02 ; '.'
0000000000000172         db  0x00 ; '.'
0000000000000173         db  0x00 ; '.'
0000000000000174         db  0x00 ; '.'
0000000000000175         db  0x00 ; '.'
0000000000000176         db  0x00 ; '.'
0000000000000177         db  0x00 ; '.'
0000000000000178         db  0x44 ; 'D'                                         ; DATA XREF=re_compile_fastmap_iter.isra.30+18, re_compile_fastmap_iter.isra.30+1172
0000000000000179         db  0x00 ; '.'
000000000000017a         db  0x00 ; '.'
000000000000017b         db  0x00 ; '.'
000000000000017c         db  0x00 ; '.'
000000000000017d         db  0x00 ; '.'
000000000000017e         db  0x00 ; '.'
000000000000017f         db  0x00 ; '.'
0000000000000180         db  0x44 ; 'D'
0000000000000181         db  0x00 ; '.'
0000000000000182         db  0x00 ; '.'
0000000000000183         db  0x00 ; '.'
0000000000000184         db  0x00 ; '.'
0000000000000185         db  0x00 ; '.'
0000000000000186         db  0x00 ; '.'
0000000000000187         db  0x00 ; '.'
0000000000000188         db  0x04 ; '.'
0000000000000189         db  0x00 ; '.'
000000000000018a         db  0x00 ; '.'
000000000000018b         db  0x00 ; '.'
000000000000018c         db  0x00 ; '.'
000000000000018d         db  0x00 ; '.'
000000000000018e         db  0x00 ; '.'
000000000000018f         db  0x00 ; '.'
0000000000000190         db  0x50 ; 'P'
0000000000000191         db  0xe5 ; '.'
0000000000000192         db  0x74 ; 't'
0000000000000193         db  0x64 ; 'd'
0000000000000194         db  0x04 ; '.'
0000000000000195         db  0x00 ; '.'
0000000000000196         db  0x00 ; '.'
0000000000000197         db  0x00 ; '.'
0000000000000198         db  0xa0 ; '.'
0000000000000199         db  0x57 ; 'W'
000000000000019a         db  0x01 ; '.'
000000000000019b         db  0x00 ; '.'
000000000000019c         db  0x00 ; '.'
000000000000019d         db  0x00 ; '.'
000000000000019e         db  0x00 ; '.'
000000000000019f         db  0x00 ; '.'
00000000000001a0         db  0xa0 ; '.'
00000000000001a1         db  0x57 ; 'W'
00000000000001a2         db  0x01 ; '.'
00000000000001a3         db  0x00 ; '.'
00000000000001a4         db  0x00 ; '.'
00000000000001a5         db  0x00 ; '.'
00000000000001a6         db  0x00 ; '.'
00000000000001a7         db  0x00 ; '.'
00000000000001a8         db  0xa0 ; '.'
00000000000001a9         db  0x57 ; 'W'
00000000000001aa         db  0x01 ; '.'
00000000000001ab         db  0x00 ; '.'
00000000000001ac         db  0x00 ; '.'
00000000000001ad         db  0x00 ; '.'
00000000000001ae         db  0x00 ; '.'
00000000000001af         db  0x00 ; '.'
00000000000001b0         db  0x7c ; '|'
00000000000001b1         db  0x05 ; '.'
00000000000001b2         db  0x00 ; '.'
00000000000001b3         db  0x00 ; '.'
00000000000001b4         db  0x00 ; '.'
00000000000001b5         db  0x00 ; '.'
00000000000001b6         db  0x00 ; '.'
00000000000001b7         db  0x00 ; '.'
00000000000001b8         db  0x7c ; '|'
00000000000001b9         db  0x05 ; '.'
00000000000001ba         db  0x00 ; '.'
00000000000001bb         db  0x00 ; '.'
00000000000001bc         db  0x00 ; '.'
00000000000001bd         db  0x00 ; '.'
00000000000001be         db  0x00 ; '.'                                         ; DATA XREF=re_search_stub+1079
00000000000001bf         db  0x00 ; '.'
00000000000001c0         db  0x04 ; '.'
00000000000001c1         db  0x00 ; '.'
00000000000001c2         db  0x00 ; '.'
00000000000001c3         db  0x00 ; '.'
00000000000001c4         db  0x00 ; '.'
00000000000001c5         db  0x00 ; '.'
00000000000001c6         db  0x00 ; '.'
00000000000001c7         db  0x00 ; '.'
00000000000001c8         db  0x51 ; 'Q'
00000000000001c9         db  0xe5 ; '.'
00000000000001ca         db  0x74 ; 't'
00000000000001cb         db  0x64 ; 'd'
00000000000001cc         db  0x06 ; '.'
00000000000001cd         db  0x00 ; '.'
00000000000001ce         db  0x00 ; '.'
00000000000001cf         db  0x00 ; '.'
00000000000001d0         db  0x00 ; '.'
00000000000001d1         db  0x00 ; '.'
00000000000001d2         db  0x00 ; '.'
00000000000001d3         db  0x00 ; '.'
00000000000001d4         db  0x00 ; '.'
00000000000001d5         db  0x00 ; '.'
00000000000001d6         db  0x00 ; '.'
00000000000001d7         db  0x00 ; '.'
00000000000001d8         db  0x00 ; '.'
00000000000001d9         db  0x00 ; '.'
00000000000001da         db  0x00 ; '.'
00000000000001db         db  0x00 ; '.'
00000000000001dc         db  0x00 ; '.'
00000000000001dd         db  0x00 ; '.'
00000000000001de         db  0x00 ; '.'
00000000000001df         db  0x00 ; '.'
00000000000001e0         db  0x00 ; '.'
00000000000001e1         db  0x00 ; '.'
00000000000001e2         db  0x00 ; '.'
00000000000001e3         db  0x00 ; '.'
00000000000001e4         db  0x00 ; '.'
00000000000001e5         db  0x00 ; '.'
00000000000001e6         db  0x00 ; '.'
00000000000001e7         db  0x00 ; '.'
00000000000001e8         db  0x00 ; '.'
00000000000001e9         db  0x00 ; '.'
00000000000001ea         db  0x00 ; '.'
00000000000001eb         db  0x00 ; '.'
00000000000001ec         db  0x00 ; '.'
00000000000001ed         db  0x00 ; '.'
00000000000001ee         db  0x00 ; '.'
00000000000001ef         db  0x00 ; '.'
00000000000001f0         db  0x00 ; '.'
00000000000001f1         db  0x00 ; '.'
00000000000001f2         db  0x00 ; '.'
00000000000001f3         db  0x00 ; '.'
00000000000001f4         db  0x00 ; '.'
00000000000001f5         db  0x00 ; '.'
00000000000001f6         db  0x00 ; '.'
00000000000001f7         db  0x00 ; '.'
00000000000001f8         db  0x10 ; '.'
00000000000001f9         db  0x00 ; '.'                                         ; DATA XREF=re_search_stub+1141
00000000000001fa         db  0x00 ; '.'
00000000000001fb         db  0x00 ; '.'                                         ; DATA XREF=re_search_stub+1110
00000000000001fc         db  0x00 ; '.'
00000000000001fd         db  0x00 ; '.'
00000000000001fe         db  0x00 ; '.'
00000000000001ff         db  0x00 ; '.'
0000000000000200         db  0x52 ; 'R'                                         ; DATA XREF=build_trtable+2601, build_trtable+2707, peek_token+1008, peek_token+1092, peek_token+1254
0000000000000201         db  0xe5 ; '.'
0000000000000202         db  0x74 ; 't'
0000000000000203         db  0x64 ; 'd'
0000000000000204         db  0x04 ; '.'
0000000000000205         db  0x00 ; '.'
0000000000000206         db  0x00 ; '.'
0000000000000207         db  0x00 ; '.'
0000000000000208         db  0x70 ; 'p'
0000000000000209         db  0x8a ; '.'
000000000000020a         db  0x01 ; '.'
000000000000020b         db  0x00 ; '.'
000000000000020c         db  0x00 ; '.'
000000000000020d         db  0x00 ; '.'
000000000000020e         db  0x00 ; '.'
000000000000020f         db  0x00 ; '.'
0000000000000210         db  0x70 ; 'p'
0000000000000211         db  0x8a ; '.'
0000000000000212         db  0x21 ; '!'
0000000000000213         db  0x00 ; '.'
0000000000000214         db  0x00 ; '.'
0000000000000215         db  0x00 ; '.'
0000000000000216         db  0x00 ; '.'
0000000000000217         db  0x00 ; '.'
0000000000000218         db  0x70 ; 'p'
0000000000000219         db  0x8a ; '.'
000000000000021a         db  0x21 ; '!'
000000000000021b         db  0x00 ; '.'
000000000000021c         db  0x00 ; '.'
000000000000021d         db  0x00 ; '.'
000000000000021e         db  0x00 ; '.'
000000000000021f         db  0x00 ; '.'
0000000000000220         db  0x90 ; '.'
0000000000000221         db  0x05 ; '.'
0000000000000222         db  0x00 ; '.'
0000000000000223         db  0x00 ; '.'
0000000000000224         db  0x00 ; '.'
0000000000000225         db  0x00 ; '.'
0000000000000226         db  0x00 ; '.'
0000000000000227         db  0x00 ; '.'
0000000000000228         db  0x90 ; '.'
0000000000000229         db  0x05 ; '.'
000000000000022a         db  0x00 ; '.'
000000000000022b         db  0x00 ; '.'
000000000000022c         db  0x00 ; '.'
000000000000022d         db  0x00 ; '.'
000000000000022e         db  0x00 ; '.'
000000000000022f         db  0x00 ; '.'
0000000000000230         db  0x01 ; '.'
0000000000000231         db  0x00 ; '.'
0000000000000232         db  0x00 ; '.'
0000000000000233         db  0x00 ; '.'
0000000000000234         db  0x00 ; '.'
0000000000000235         db  0x00 ; '.'
0000000000000236         db  0x00 ; '.'
0000000000000237         db  0x00 ; '.'


        ; Section .interp
        ; Range: [0x238; 0x254[ (28 bytes)
        ; File offset : [568; 596[ (28 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

                     aLib64ldlinuxx8:
0000000000000238         db         "/lib64/ld-linux-x86-64.so.2", 0            ; DATA XREF=re_search_internal+24, re_search_internal+2964


        ; Section .note.ABI-tag
        ; Range: [0x254; 0x274[ (32 bytes)
        ; File offset : [596; 628[ (32 bytes)
        ; Flags: 0x2
        ;   SHT_NOTE
        ;   SHF_ALLOC

0000000000000254         db  0x04 ; '.'
0000000000000255         db  0x00 ; '.'
0000000000000256         db  0x00 ; '.'
0000000000000257         db  0x00 ; '.'
0000000000000258         db  0x10 ; '.'
0000000000000259         db  0x00 ; '.'
000000000000025a         db  0x00 ; '.'
000000000000025b         db  0x00 ; '.'
000000000000025c         db  0x01 ; '.'
000000000000025d         db  0x00 ; '.'
000000000000025e         db  0x00 ; '.'
000000000000025f         db  0x00 ; '.'
0000000000000260         db  0x47 ; 'G'
0000000000000261         db  0x4e ; 'N'
0000000000000262         db  0x55 ; 'U'
0000000000000263         db  0x00 ; '.'
0000000000000264         db  0x00 ; '.'
0000000000000265         db  0x00 ; '.'
0000000000000266         db  0x00 ; '.'
0000000000000267         db  0x00 ; '.'
0000000000000268         db  0x03 ; '.'
0000000000000269         db  0x00 ; '.'
000000000000026a         db  0x00 ; '.'
000000000000026b         db  0x00 ; '.'
000000000000026c         db  0x02 ; '.'
000000000000026d         db  0x00 ; '.'
000000000000026e         db  0x00 ; '.'
000000000000026f         db  0x00 ; '.'
0000000000000270         db  0x00 ; '.'
0000000000000271         db  0x00 ; '.'
0000000000000272         db  0x00 ; '.'
0000000000000273         db  0x00 ; '.'


        ; Section .note.gnu.build-id
        ; Range: [0x274; 0x298[ (36 bytes)
        ; File offset : [628; 664[ (36 bytes)
        ; Flags: 0x2
        ;   SHT_NOTE
        ;   SHF_ALLOC

0000000000000274         db  0x04 ; '.'
0000000000000275         db  0x00 ; '.'
0000000000000276         db  0x00 ; '.'
0000000000000277         db  0x00 ; '.'
0000000000000278         db  0x14 ; '.'
0000000000000279         db  0x00 ; '.'
000000000000027a         db  0x00 ; '.'
000000000000027b         db  0x00 ; '.'
000000000000027c         db  0x03 ; '.'
000000000000027d         db  0x00 ; '.'
000000000000027e         db  0x00 ; '.'
000000000000027f         db  0x00 ; '.'
0000000000000280         db  0x47 ; 'G'
0000000000000281         db  0x4e ; 'N'
0000000000000282         db  0x55 ; 'U'
0000000000000283         db  0x00 ; '.'
0000000000000284         db  0x63 ; 'c'
0000000000000285         db  0x83 ; '.'
0000000000000286         db  0xa9 ; '.'
0000000000000287         db  0xeb ; '.'
0000000000000288         db  0x67 ; 'g'
0000000000000289         db  0xb7 ; '.'
000000000000028a         db  0x2c ; ','
000000000000028b         db  0x9d ; '.'
000000000000028c         db  0x63 ; 'c'
000000000000028d         db  0x7d ; '}'
000000000000028e         db  0x51 ; 'Q'
000000000000028f         db  0xcc ; '.'


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_290:
0000000000000290         mov        bl, 0xf9
0000000000000292         pop        rsi
0000000000000293         adc        eax, 0xe122d923
                        ; endp


        ; Section .gnu.hash
        ; Range: [0x298; 0x2dc[ (68 bytes)
        ; File offset : [664; 732[ (68 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000000298         db  0x03 ; '.'
0000000000000299         db  0x00 ; '.'
000000000000029a         db  0x00 ; '.'
000000000000029b         db  0x00 ; '.'
000000000000029c         db  0x48 ; 'H'
000000000000029d         db  0x00 ; '.'
000000000000029e         db  0x00 ; '.'
000000000000029f         db  0x00 ; '.'
00000000000002a0         db  0x01 ; '.'
00000000000002a1         db  0x00 ; '.'
00000000000002a2         db  0x00 ; '.'
00000000000002a3         db  0x00 ; '.'
00000000000002a4         db  0x06 ; '.'
00000000000002a5         db  0x00 ; '.'
00000000000002a6         db  0x00 ; '.'
00000000000002a7         db  0x00 ; '.'
00000000000002a8         db  0x04 ; '.'
00000000000002a9         db  0x4d ; 'M'
00000000000002aa         db  0x41 ; 'A'
00000000000002ab         db  0x00 ; '.'
00000000000002ac         db  0x20 ; ' '
00000000000002ad         db  0x01 ; '.'
00000000000002ae         db  0x1c ; '.'
00000000000002af         db  0x12 ; '.'
00000000000002b0         db  0x48 ; 'H'
00000000000002b1         db  0x00 ; '.'
00000000000002b2         db  0x00 ; '.'
00000000000002b3         db  0x00 ; '.'
00000000000002b4         db  0x49 ; 'I'
00000000000002b5         db  0x00 ; '.'
00000000000002b6         db  0x00 ; '.'
00000000000002b7         db  0x00 ; '.'
00000000000002b8         db  0x4e ; 'N'
00000000000002b9         db  0x00 ; '.'
00000000000002ba         db  0x00 ; '.'
00000000000002bb         db  0x00 ; '.'
00000000000002bc         db  0x29 ; ')'
00000000000002bd         db  0x1d ; '.'
00000000000002be         db  0x8c ; '.'
00000000000002bf         db  0x1c ; '.'
00000000000002c0         db  0xbc ; '.'
00000000000002c1         db  0x50 ; 'P'
00000000000002c2         db  0x76 ; 'v'
00000000000002c3         db  0x9e ; '.'
00000000000002c4         db  0x96 ; '.'
00000000000002c5         db  0xa0 ; '.'
00000000000002c6         db  0x89 ; '.'
00000000000002c7         db  0x97 ; '.'
00000000000002c8         db  0xce ; '.'
00000000000002c9         db  0x2c ; ','
00000000000002ca         db  0x63 ; 'c'
00000000000002cb         db  0x72 ; 'r'
00000000000002cc         db  0xe4 ; '.'
00000000000002cd         db  0x62 ; 'b'
00000000000002ce         db  0x41 ; 'A'
00000000000002cf         db  0xf5 ; '.'
00000000000002d0         db  0x39 ; '9'
00000000000002d1         db  0xf2 ; '.'
00000000000002d2         db  0x8b ; '.'
00000000000002d3         db  0x1c ; '.'
00000000000002d4         db  0x32 ; '2'
00000000000002d5         db  0xc4 ; '.'
00000000000002d6         db  0xf7 ; '.'
00000000000002d7         db  0x12 ; '.'
00000000000002d8         db  0xb3 ; '.'
00000000000002d9         db  0xa2 ; '.'
00000000000002da         db  0xf7 ; '.'
00000000000002db         db  0x12 ; '.'
00000000000002dc         db  0x00 ; '.'
00000000000002dd         db  0x00 ; '.'
00000000000002de         db  0x00 ; '.'
00000000000002df         db  0x00 ; '.'


        ; Section .dynsym
        ; Range: [0x2e0; 0xa60[ (1920 bytes)
        ; File offset : [736; 2656[ (1920 bytes)
        ; Flags: 0x2
        ;   SHT_DYNSYM
        ;   SHF_ALLOC

00000000000002e0         db  0x00 ; '.'
00000000000002e1         db  0x00 ; '.'
00000000000002e2         db  0x00 ; '.'
00000000000002e3         db  0x00 ; '.'
00000000000002e4         db  0x00 ; '.'
00000000000002e5         db  0x00 ; '.'
00000000000002e6         db  0x00 ; '.'
00000000000002e7         db  0x00 ; '.'
00000000000002e8         db  0x00 ; '.'
00000000000002e9         db  0x00 ; '.'
00000000000002ea         db  0x00 ; '.'
00000000000002eb         db  0x00 ; '.'
00000000000002ec         db  0x00 ; '.'
00000000000002ed         db  0x00 ; '.'
00000000000002ee         db  0x00 ; '.'
00000000000002ef         db  0x00 ; '.'
00000000000002f0         db  0x00 ; '.'
00000000000002f1         db  0x00 ; '.'
00000000000002f2         db  0x00 ; '.'
00000000000002f3         db  0x00 ; '.'
00000000000002f4         db  0x00 ; '.'
00000000000002f5         db  0x00 ; '.'
00000000000002f6         db  0x00 ; '.'
00000000000002f7         db  0x00 ; '.'
00000000000002f8         db  0x2d ; '-'
00000000000002f9         db  0x02 ; '.'
00000000000002fa         db  0x00 ; '.'
00000000000002fb         db  0x00 ; '.'
00000000000002fc         db  0x12 ; '.'
00000000000002fd         db  0x00 ; '.'
00000000000002fe         db  0x00 ; '.'
00000000000002ff         db  0x00 ; '.'
0000000000000300         db  0x00 ; '.'
0000000000000301         db  0x00 ; '.'
0000000000000302         db  0x00 ; '.'
0000000000000303         db  0x00 ; '.'
0000000000000304         db  0x00 ; '.'
0000000000000305         db  0x00 ; '.'
0000000000000306         db  0x00 ; '.'
0000000000000307         db  0x00 ; '.'
0000000000000308         db  0x00 ; '.'
0000000000000309         db  0x00 ; '.'
000000000000030a         db  0x00 ; '.'
000000000000030b         db  0x00 ; '.'
000000000000030c         db  0x00 ; '.'
000000000000030d         db  0x00 ; '.'
000000000000030e         db  0x00 ; '.'
000000000000030f         db  0x00 ; '.'                                         ; DATA XREF=sub_10ea0+7
0000000000000310         db  0xc3 ; '.'
0000000000000311         db  0x01 ; '.'
0000000000000312         db  0x00 ; '.'
0000000000000313         db  0x00 ; '.'
0000000000000314         db  0x12 ; '.'
0000000000000315         db  0x00 ; '.'
0000000000000316         db  0x00 ; '.'
0000000000000317         db  0x00 ; '.'
0000000000000318         db  0x00 ; '.'
0000000000000319         db  0x00 ; '.'
000000000000031a         db  0x00 ; '.'
000000000000031b         db  0x00 ; '.'
000000000000031c         db  0x00 ; '.'
000000000000031d         db  0x00 ; '.'
000000000000031e         db  0x00 ; '.'
000000000000031f         db  0x00 ; '.'
0000000000000320         db  0x00 ; '.'
0000000000000321         db  0x00 ; '.'
0000000000000322         db  0x00 ; '.'
0000000000000323         db  0x00 ; '.'
0000000000000324         db  0x00 ; '.'
0000000000000325         db  0x00 ; '.'
0000000000000326         db  0x00 ; '.'
0000000000000327         db  0x00 ; '.'
0000000000000328         db  0xc9 ; '.'
0000000000000329         db  0x02 ; '.'
000000000000032a         db  0x00 ; '.'
000000000000032b         db  0x00 ; '.'
000000000000032c         db  0x12 ; '.'
000000000000032d         db  0x00 ; '.'
000000000000032e         db  0x00 ; '.'
000000000000032f         db  0x00 ; '.'
0000000000000330         db  0x00 ; '.'
0000000000000331         db  0x00 ; '.'
0000000000000332         db  0x00 ; '.'
0000000000000333         db  0x00 ; '.'
0000000000000334         db  0x00 ; '.'
0000000000000335         db  0x00 ; '.'
0000000000000336         db  0x00 ; '.'
0000000000000337         db  0x00 ; '.'
0000000000000338         db  0x00 ; '.'
0000000000000339         db  0x00 ; '.'
000000000000033a         db  0x00 ; '.'
000000000000033b         db  0x00 ; '.'
000000000000033c         db  0x00 ; '.'
000000000000033d         db  0x00 ; '.'
000000000000033e         db  0x00 ; '.'
000000000000033f         db  0x00 ; '.'
0000000000000340         db  0xcd ; '.'
0000000000000341         db  0x00 ; '.'
0000000000000342         db  0x00 ; '.'
0000000000000343         db  0x00 ; '.'
0000000000000344         db  0x12 ; '.'
0000000000000345         db  0x00 ; '.'
0000000000000346         db  0x00 ; '.'
0000000000000347         db  0x00 ; '.'
0000000000000348         db  0x00 ; '.'
0000000000000349         db  0x00 ; '.'
000000000000034a         db  0x00 ; '.'
000000000000034b         db  0x00 ; '.'
000000000000034c         db  0x00 ; '.'
000000000000034d         db  0x00 ; '.'
000000000000034e         db  0x00 ; '.'
000000000000034f         db  0x00 ; '.'
0000000000000350         db  0x00 ; '.'
0000000000000351         db  0x00 ; '.'
0000000000000352         db  0x00 ; '.'
0000000000000353         db  0x00 ; '.'
0000000000000354         db  0x00 ; '.'
0000000000000355         db  0x00 ; '.'
0000000000000356         db  0x00 ; '.'
0000000000000357         db  0x00 ; '.'
0000000000000358         db  0x4c ; 'L'
0000000000000359         db  0x01 ; '.'
000000000000035a         db  0x00 ; '.'
000000000000035b         db  0x00 ; '.'
000000000000035c         db  0x12 ; '.'
000000000000035d         db  0x00 ; '.'
000000000000035e         db  0x00 ; '.'
000000000000035f         db  0x00 ; '.'
0000000000000360         db  0x00 ; '.'
0000000000000361         db  0x00 ; '.'
0000000000000362         db  0x00 ; '.'
0000000000000363         db  0x00 ; '.'
0000000000000364         db  0x00 ; '.'
0000000000000365         db  0x00 ; '.'
0000000000000366         db  0x00 ; '.'
0000000000000367         db  0x00 ; '.'
0000000000000368         db  0x00 ; '.'
0000000000000369         db  0x00 ; '.'
000000000000036a         db  0x00 ; '.'
000000000000036b         db  0x00 ; '.'
000000000000036c         db  0x00 ; '.'
000000000000036d         db  0x00 ; '.'
000000000000036e         db  0x00 ; '.'
000000000000036f         db  0x00 ; '.'
0000000000000370         db  0xa6 ; '.'
0000000000000371         db  0x00 ; '.'
0000000000000372         db  0x00 ; '.'
0000000000000373         db  0x00 ; '.'
0000000000000374         db  0x12 ; '.'
0000000000000375         db  0x00 ; '.'
0000000000000376         db  0x00 ; '.'
0000000000000377         db  0x00 ; '.'
0000000000000378         db  0x00 ; '.'
0000000000000379         db  0x00 ; '.'
000000000000037a         db  0x00 ; '.'
000000000000037b         db  0x00 ; '.'
000000000000037c         db  0x00 ; '.'
000000000000037d         db  0x00 ; '.'
000000000000037e         db  0x00 ; '.'
000000000000037f         db  0x00 ; '.'
0000000000000380         db  0x00 ; '.'
0000000000000381         db  0x00 ; '.'
0000000000000382         db  0x00 ; '.'
0000000000000383         db  0x00 ; '.'
0000000000000384         db  0x00 ; '.'
0000000000000385         db  0x00 ; '.'
0000000000000386         db  0x00 ; '.'
0000000000000387         db  0x00 ; '.'
0000000000000388         db  0x4c ; 'L'
0000000000000389         db  0x00 ; '.'
000000000000038a         db  0x00 ; '.'
000000000000038b         db  0x00 ; '.'
000000000000038c         db  0x12 ; '.'
000000000000038d         db  0x00 ; '.'
000000000000038e         db  0x00 ; '.'
000000000000038f         db  0x00 ; '.'
0000000000000390         db  0x00 ; '.'
0000000000000391         db  0x00 ; '.'
0000000000000392         db  0x00 ; '.'
0000000000000393         db  0x00 ; '.'
0000000000000394         db  0x00 ; '.'
0000000000000395         db  0x00 ; '.'
0000000000000396         db  0x00 ; '.'
0000000000000397         db  0x00 ; '.'
0000000000000398         db  0x00 ; '.'
0000000000000399         db  0x00 ; '.'
000000000000039a         db  0x00 ; '.'
000000000000039b         db  0x00 ; '.'
000000000000039c         db  0x00 ; '.'
000000000000039d         db  0x00 ; '.'
000000000000039e         db  0x00 ; '.'
000000000000039f         db  0x00 ; '.'
00000000000003a0         db  0x37 ; '7'
00000000000003a1         db  0x03 ; '.'
00000000000003a2         db  0x00 ; '.'
00000000000003a3         db  0x00 ; '.'
00000000000003a4         db  0x20 ; ' '
00000000000003a5         db  0x00 ; '.'
00000000000003a6         db  0x00 ; '.'
00000000000003a7         db  0x00 ; '.'
00000000000003a8         db  0x00 ; '.'
00000000000003a9         db  0x00 ; '.'
00000000000003aa         db  0x00 ; '.'
00000000000003ab         db  0x00 ; '.'
00000000000003ac         db  0x00 ; '.'
00000000000003ad         db  0x00 ; '.'
00000000000003ae         db  0x00 ; '.'
00000000000003af         db  0x00 ; '.'
00000000000003b0         db  0x00 ; '.'
00000000000003b1         db  0x00 ; '.'
00000000000003b2         db  0x00 ; '.'
00000000000003b3         db  0x00 ; '.'
00000000000003b4         db  0x00 ; '.'
00000000000003b5         db  0x00 ; '.'
00000000000003b6         db  0x00 ; '.'
00000000000003b7         db  0x00 ; '.'
00000000000003b8         db  0xd3 ; '.'
00000000000003b9         db  0x00 ; '.'
00000000000003ba         db  0x00 ; '.'
00000000000003bb         db  0x00 ; '.'
00000000000003bc         db  0x12 ; '.'
00000000000003bd         db  0x00 ; '.'
00000000000003be         db  0x00 ; '.'
00000000000003bf         db  0x00 ; '.'
00000000000003c0         db  0x00 ; '.'
00000000000003c1         db  0x00 ; '.'
00000000000003c2         db  0x00 ; '.'
00000000000003c3         db  0x00 ; '.'
00000000000003c4         db  0x00 ; '.'
00000000000003c5         db  0x00 ; '.'
00000000000003c6         db  0x00 ; '.'
00000000000003c7         db  0x00 ; '.'
00000000000003c8         db  0x00 ; '.'                                         ; DATA XREF=create_token_tree.isra.16+136
00000000000003c9         db  0x00 ; '.'
00000000000003ca         db  0x00 ; '.'
00000000000003cb         db  0x00 ; '.'
00000000000003cc         db  0x00 ; '.'
00000000000003cd         db  0x00 ; '.'
00000000000003ce         db  0x00 ; '.'
00000000000003cf         db  0x00 ; '.'
00000000000003d0         db  0xfd ; '.'
00000000000003d1         db  0x01 ; '.'
00000000000003d2         db  0x00 ; '.'
00000000000003d3         db  0x00 ; '.'
00000000000003d4         db  0x12 ; '.'
00000000000003d5         db  0x00 ; '.'
00000000000003d6         db  0x00 ; '.'
00000000000003d7         db  0x00 ; '.'
00000000000003d8         db  0x00 ; '.'
00000000000003d9         db  0x00 ; '.'
00000000000003da         db  0x00 ; '.'
00000000000003db         db  0x00 ; '.'
00000000000003dc         db  0x00 ; '.'
00000000000003dd         db  0x00 ; '.'
00000000000003de         db  0x00 ; '.'
00000000000003df         db  0x00 ; '.'
00000000000003e0         db  0x00 ; '.'
00000000000003e1         db  0x00 ; '.'
00000000000003e2         db  0x00 ; '.'
00000000000003e3         db  0x00 ; '.'
00000000000003e4         db  0x00 ; '.'
00000000000003e5         db  0x00 ; '.'
00000000000003e6         db  0x00 ; '.'
00000000000003e7         db  0x00 ; '.'
00000000000003e8         db  0x27 ; '''
00000000000003e9         db  0x01 ; '.'
00000000000003ea         db  0x00 ; '.'
00000000000003eb         db  0x00 ; '.'
00000000000003ec         db  0x12 ; '.'
00000000000003ed         db  0x00 ; '.'
00000000000003ee         db  0x00 ; '.'
00000000000003ef         db  0x00 ; '.'
00000000000003f0         db  0x00 ; '.'
00000000000003f1         db  0x00 ; '.'
00000000000003f2         db  0x00 ; '.'
00000000000003f3         db  0x00 ; '.'
00000000000003f4         db  0x00 ; '.'
00000000000003f5         db  0x00 ; '.'
00000000000003f6         db  0x00 ; '.'
00000000000003f7         db  0x00 ; '.'
00000000000003f8         db  0x00 ; '.'
00000000000003f9         db  0x00 ; '.'
00000000000003fa         db  0x00 ; '.'
00000000000003fb         db  0x00 ; '.'
00000000000003fc         db  0x00 ; '.'
00000000000003fd         db  0x00 ; '.'
00000000000003fe         db  0x00 ; '.'
00000000000003ff         db  0x00 ; '.'                                         ; DATA XREF=duplicate_node+58, duplicate_node+69, duplicate_node+113, duplicate_node_closure+214, duplicate_node_closure+428, calc_eclosure_iter+605, re_acquire_state_context+346, check_node_accept+118, check_halt_state_context.isra.20+111, build_trtable+211, calc_first+67
0000000000000400         db  0x64 ; 'd'                                         ; DATA XREF=build_trtable+894, build_trtable+2048, sub_10fe0+1354, rpl_fcntl+288
0000000000000401         db  0x02 ; '.'                                         ; DATA XREF=rpl_fcntl+272
0000000000000402         db  0x00 ; '.'                                         ; DATA XREF=peek_token+736, peek_token+784, peek_token+1266, peek_token+1402, rpl_fcntl+280
0000000000000403         db  0x00 ; '.'
0000000000000404         db  0x12 ; '.'
0000000000000405         db  0x00 ; '.'
0000000000000406         db  0x00 ; '.'                                         ; DATA XREF=dup_safer_flag+6, rpl_fcntl+81, rpl_fcntl+123, rpl_fcntl+264
0000000000000407         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+256
0000000000000408         db  0x00 ; '.'
0000000000000409         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+336
000000000000040a         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+350
000000000000040b         db  0x00 ; '.'
000000000000040c         db  0x00 ; '.'
000000000000040d         db  0x00 ; '.'
000000000000040e         db  0x00 ; '.'
000000000000040f         db  0x00 ; '.'
0000000000000410         db  0x00 ; '.'
0000000000000411         db  0x00 ; '.'
0000000000000412         db  0x00 ; '.'
0000000000000413         db  0x00 ; '.'
0000000000000414         db  0x00 ; '.'
0000000000000415         db  0x00 ; '.'
0000000000000416         db  0x00 ; '.'
0000000000000417         db  0x00 ; '.'
0000000000000418         db  0x1f ; '.'
0000000000000419         db  0x00 ; '.'
000000000000041a         db  0x00 ; '.'
000000000000041b         db  0x00 ; '.'
000000000000041c         db  0x12 ; '.'
000000000000041d         db  0x00 ; '.'
000000000000041e         db  0x00 ; '.'
000000000000041f         db  0x00 ; '.'
0000000000000420         db  0x00 ; '.'
0000000000000421         db  0x00 ; '.'
0000000000000422         db  0x00 ; '.'
0000000000000423         db  0x00 ; '.'
0000000000000424         db  0x00 ; '.'
0000000000000425         db  0x00 ; '.'
0000000000000426         db  0x00 ; '.'
0000000000000427         db  0x00 ; '.'
0000000000000428         db  0x00 ; '.'
0000000000000429         db  0x00 ; '.'
000000000000042a         db  0x00 ; '.'
000000000000042b         db  0x00 ; '.'
000000000000042c         db  0x00 ; '.'
000000000000042d         db  0x00 ; '.'
000000000000042e         db  0x00 ; '.'
000000000000042f         db  0x00 ; '.'
0000000000000430         db  0x7f ; '.'
0000000000000431         db  0x02 ; '.'
0000000000000432         db  0x00 ; '.'
0000000000000433         db  0x00 ; '.'
0000000000000434         db  0x12 ; '.'
0000000000000435         db  0x00 ; '.'                                         ; DATA XREF=re_search_internal+4162
0000000000000436         db  0x00 ; '.'
0000000000000437         db  0x00 ; '.'
0000000000000438         db  0x00 ; '.'
0000000000000439         db  0x00 ; '.'
000000000000043a         db  0x00 ; '.'
000000000000043b         db  0x00 ; '.'
000000000000043c         db  0x00 ; '.'
000000000000043d         db  0x00 ; '.'
000000000000043e         db  0x00 ; '.'
000000000000043f         db  0x00 ; '.'
0000000000000440         db  0x00 ; '.'
0000000000000441         db  0x00 ; '.'
0000000000000442         db  0x00 ; '.'
0000000000000443         db  0x00 ; '.'
0000000000000444         db  0x00 ; '.'
0000000000000445         db  0x00 ; '.'
0000000000000446         db  0x00 ; '.'
0000000000000447         db  0x00 ; '.'
0000000000000448         db  0x3c ; '<'
0000000000000449         db  0x01 ; '.'
000000000000044a         db  0x00 ; '.'
000000000000044b         db  0x00 ; '.'
000000000000044c         db  0x12 ; '.'
000000000000044d         db  0x00 ; '.'
000000000000044e         db  0x00 ; '.'
000000000000044f         db  0x00 ; '.'
0000000000000450         db  0x00 ; '.'
0000000000000451         db  0x00 ; '.'
0000000000000452         db  0x00 ; '.'
0000000000000453         db  0x00 ; '.'
0000000000000454         db  0x00 ; '.'
0000000000000455         db  0x00 ; '.'
0000000000000456         db  0x00 ; '.'
0000000000000457         db  0x00 ; '.'
0000000000000458         db  0x00 ; '.'
0000000000000459         db  0x00 ; '.'
000000000000045a         db  0x00 ; '.'
000000000000045b         db  0x00 ; '.'
000000000000045c         db  0x00 ; '.'
000000000000045d         db  0x00 ; '.'
000000000000045e         db  0x00 ; '.'
000000000000045f         db  0x00 ; '.'
0000000000000460         db  0x93 ; '.'
0000000000000461         db  0x01 ; '.'
0000000000000462         db  0x00 ; '.'
0000000000000463         db  0x00 ; '.'
0000000000000464         db  0x12 ; '.'
0000000000000465         db  0x00 ; '.'
0000000000000466         db  0x00 ; '.'
0000000000000467         db  0x00 ; '.'
0000000000000468         db  0x00 ; '.'
0000000000000469         db  0x00 ; '.'
000000000000046a         db  0x00 ; '.'
000000000000046b         db  0x00 ; '.'
000000000000046c         db  0x00 ; '.'                                         ; DATA XREF=re_search_internal+5446
000000000000046d         db  0x00 ; '.'
000000000000046e         db  0x00 ; '.'
000000000000046f         db  0x00 ; '.'
0000000000000470         db  0x00 ; '.'
0000000000000471         db  0x00 ; '.'
0000000000000472         db  0x00 ; '.'
0000000000000473         db  0x00 ; '.'
0000000000000474         db  0x00 ; '.'
0000000000000475         db  0x00 ; '.'
0000000000000476         db  0x00 ; '.'
0000000000000477         db  0x00 ; '.'
0000000000000478         db  0x7b ; '{'
0000000000000479         db  0x02 ; '.'
000000000000047a         db  0x00 ; '.'
000000000000047b         db  0x00 ; '.'
000000000000047c         db  0x12 ; '.'
000000000000047d         db  0x00 ; '.'
000000000000047e         db  0x00 ; '.'
000000000000047f         db  0x00 ; '.'
0000000000000480         db  0x00 ; '.'
0000000000000481         db  0x00 ; '.'
0000000000000482         db  0x00 ; '.'
0000000000000483         db  0x00 ; '.'
0000000000000484         db  0x00 ; '.'
0000000000000485         db  0x00 ; '.'
0000000000000486         db  0x00 ; '.'
0000000000000487         db  0x00 ; '.'
0000000000000488         db  0x00 ; '.'
0000000000000489         db  0x00 ; '.'
000000000000048a         db  0x00 ; '.'
000000000000048b         db  0x00 ; '.'
000000000000048c         db  0x00 ; '.'
000000000000048d         db  0x00 ; '.'
000000000000048e         db  0x00 ; '.'
000000000000048f         db  0x00 ; '.'
0000000000000490         db  0x7d ; '}'
0000000000000491         db  0x00 ; '.'
0000000000000492         db  0x00 ; '.'
0000000000000493         db  0x00 ; '.'
0000000000000494         db  0x12 ; '.'
0000000000000495         db  0x00 ; '.'
0000000000000496         db  0x00 ; '.'
0000000000000497         db  0x00 ; '.'
0000000000000498         db  0x00 ; '.'
0000000000000499         db  0x00 ; '.'
000000000000049a         db  0x00 ; '.'
000000000000049b         db  0x00 ; '.'
000000000000049c         db  0x00 ; '.'
000000000000049d         db  0x00 ; '.'
000000000000049e         db  0x00 ; '.'
000000000000049f         db  0x00 ; '.'
00000000000004a0         db  0x00 ; '.'
00000000000004a1         db  0x00 ; '.'
00000000000004a2         db  0x00 ; '.'
00000000000004a3         db  0x00 ; '.'
00000000000004a4         db  0x00 ; '.'
00000000000004a5         db  0x00 ; '.'
00000000000004a6         db  0x00 ; '.'
00000000000004a7         db  0x00 ; '.'
00000000000004a8         db  0x10 ; '.'
00000000000004a9         db  0x01 ; '.'
00000000000004aa         db  0x00 ; '.'
00000000000004ab         db  0x00 ; '.'
00000000000004ac         db  0x12 ; '.'
00000000000004ad         db  0x00 ; '.'
00000000000004ae         db  0x00 ; '.'
00000000000004af         db  0x00 ; '.'
00000000000004b0         db  0x00 ; '.'
00000000000004b1         db  0x00 ; '.'
00000000000004b2         db  0x00 ; '.'
00000000000004b3         db  0x00 ; '.'
00000000000004b4         db  0x00 ; '.'
00000000000004b5         db  0x00 ; '.'
00000000000004b6         db  0x00 ; '.'
00000000000004b7         db  0x00 ; '.'
00000000000004b8         db  0x00 ; '.'
00000000000004b9         db  0x00 ; '.'
00000000000004ba         db  0x00 ; '.'
00000000000004bb         db  0x00 ; '.'
00000000000004bc         db  0x00 ; '.'
00000000000004bd         db  0x00 ; '.'
00000000000004be         db  0x00 ; '.'
00000000000004bf         db  0x00 ; '.'
00000000000004c0         db  0x35 ; '5'
00000000000004c1         db  0x01 ; '.'
00000000000004c2         db  0x00 ; '.'
00000000000004c3         db  0x00 ; '.'
00000000000004c4         db  0x12 ; '.'
00000000000004c5         db  0x00 ; '.'
00000000000004c6         db  0x00 ; '.'
00000000000004c7         db  0x00 ; '.'
00000000000004c8         db  0x00 ; '.'
00000000000004c9         db  0x00 ; '.'
00000000000004ca         db  0x00 ; '.'
00000000000004cb         db  0x00 ; '.'
00000000000004cc         db  0x00 ; '.'
00000000000004cd         db  0x00 ; '.'
00000000000004ce         db  0x00 ; '.'
00000000000004cf         db  0x00 ; '.'
00000000000004d0         db  0x00 ; '.'
00000000000004d1         db  0x00 ; '.'
00000000000004d2         db  0x00 ; '.'
00000000000004d3         db  0x00 ; '.'
00000000000004d4         db  0x00 ; '.'
00000000000004d5         db  0x00 ; '.'
00000000000004d6         db  0x00 ; '.'
00000000000004d7         db  0x00 ; '.'
00000000000004d8         db  0x95 ; '.'
00000000000004d9         db  0x00 ; '.'
00000000000004da         db  0x00 ; '.'
00000000000004db         db  0x00 ; '.'
00000000000004dc         db  0x12 ; '.'
00000000000004dd         db  0x00 ; '.'
00000000000004de         db  0x00 ; '.'
00000000000004df         db  0x00 ; '.'
00000000000004e0         db  0x00 ; '.'
00000000000004e1         db  0x00 ; '.'
00000000000004e2         db  0x00 ; '.'
00000000000004e3         db  0x00 ; '.'
00000000000004e4         db  0x00 ; '.'
00000000000004e5         db  0x00 ; '.'
00000000000004e6         db  0x00 ; '.'
00000000000004e7         db  0x00 ; '.'
00000000000004e8         db  0x00 ; '.'
00000000000004e9         db  0x00 ; '.'
00000000000004ea         db  0x00 ; '.'
00000000000004eb         db  0x00 ; '.'
00000000000004ec         db  0x00 ; '.'
00000000000004ed         db  0x00 ; '.'
00000000000004ee         db  0x00 ; '.'
00000000000004ef         db  0x00 ; '.'
00000000000004f0         db  0xe3 ; '.'
00000000000004f1         db  0x01 ; '.'
00000000000004f2         db  0x00 ; '.'
00000000000004f3         db  0x00 ; '.'
00000000000004f4         db  0x12 ; '.'
00000000000004f5         db  0x00 ; '.'
00000000000004f6         db  0x00 ; '.'
00000000000004f7         db  0x00 ; '.'
00000000000004f8         db  0x00 ; '.'
00000000000004f9         db  0x00 ; '.'
00000000000004fa         db  0x00 ; '.'
00000000000004fb         db  0x00 ; '.'
00000000000004fc         db  0x00 ; '.'
00000000000004fd         db  0x00 ; '.'
00000000000004fe         db  0x00 ; '.'
00000000000004ff         db  0x00 ; '.'
0000000000000500         db  0x00 ; '.'
0000000000000501         db  0x00 ; '.'
0000000000000502         db  0x00 ; '.'
0000000000000503         db  0x00 ; '.'
0000000000000504         db  0x00 ; '.'
0000000000000505         db  0x00 ; '.'
0000000000000506         db  0x00 ; '.'
0000000000000507         db  0x00 ; '.'
0000000000000508         db  0x3b ; ';'
0000000000000509         db  0x00 ; '.'
000000000000050a         db  0x00 ; '.'
000000000000050b         db  0x00 ; '.'
000000000000050c         db  0x12 ; '.'
000000000000050d         db  0x00 ; '.'
000000000000050e         db  0x00 ; '.'
000000000000050f         db  0x00 ; '.'
0000000000000510         db  0x00 ; '.'
0000000000000511         db  0x00 ; '.'
0000000000000512         db  0x00 ; '.'
0000000000000513         db  0x00 ; '.'
0000000000000514         db  0x00 ; '.'
0000000000000515         db  0x00 ; '.'
0000000000000516         db  0x00 ; '.'
0000000000000517         db  0x00 ; '.'
0000000000000518         db  0x00 ; '.'
0000000000000519         db  0x00 ; '.'
000000000000051a         db  0x00 ; '.'
000000000000051b         db  0x00 ; '.'
000000000000051c         db  0x00 ; '.'
000000000000051d         db  0x00 ; '.'
000000000000051e         db  0x00 ; '.'
000000000000051f         db  0x00 ; '.'
0000000000000520         db  0x65 ; 'e'
0000000000000521         db  0x00 ; '.'
0000000000000522         db  0x00 ; '.'
0000000000000523         db  0x00 ; '.'
0000000000000524         db  0x12 ; '.'
0000000000000525         db  0x00 ; '.'
0000000000000526         db  0x00 ; '.'
0000000000000527         db  0x00 ; '.'
0000000000000528         db  0x00 ; '.'
0000000000000529         db  0x00 ; '.'
000000000000052a         db  0x00 ; '.'
000000000000052b         db  0x00 ; '.'
000000000000052c         db  0x00 ; '.'
000000000000052d         db  0x00 ; '.'
000000000000052e         db  0x00 ; '.'
000000000000052f         db  0x00 ; '.'
0000000000000530         db  0x00 ; '.'
0000000000000531         db  0x00 ; '.'
0000000000000532         db  0x00 ; '.'
0000000000000533         db  0x00 ; '.'
0000000000000534         db  0x00 ; '.'
0000000000000535         db  0x00 ; '.'
0000000000000536         db  0x00 ; '.'
0000000000000537         db  0x00 ; '.'
0000000000000538         db  0x54 ; 'T'
0000000000000539         db  0x00 ; '.'
000000000000053a         db  0x00 ; '.'
000000000000053b         db  0x00 ; '.'
000000000000053c         db  0x12 ; '.'
000000000000053d         db  0x00 ; '.'
000000000000053e         db  0x00 ; '.'
000000000000053f         db  0x00 ; '.'
0000000000000540         db  0x00 ; '.'
0000000000000541         db  0x00 ; '.'
0000000000000542         db  0x00 ; '.'
0000000000000543         db  0x00 ; '.'
0000000000000544         db  0x00 ; '.'
0000000000000545         db  0x00 ; '.'
0000000000000546         db  0x00 ; '.'
0000000000000547         db  0x00 ; '.'
0000000000000548         db  0x00 ; '.'
0000000000000549         db  0x00 ; '.'
000000000000054a         db  0x00 ; '.'
000000000000054b         db  0x00 ; '.'
000000000000054c         db  0x00 ; '.'
000000000000054d         db  0x00 ; '.'
000000000000054e         db  0x00 ; '.'
000000000000054f         db  0x00 ; '.'
0000000000000550         db  0x72 ; 'r'
0000000000000551         db  0x02 ; '.'
0000000000000552         db  0x00 ; '.'
0000000000000553         db  0x00 ; '.'
0000000000000554         db  0x12 ; '.'
0000000000000555         db  0x00 ; '.'                                         ; DATA XREF=pop_fail_stack.isra.25+138
0000000000000556         db  0x00 ; '.'
0000000000000557         db  0x00 ; '.'
0000000000000558         db  0x00 ; '.'
0000000000000559         db  0x00 ; '.'
000000000000055a         db  0x00 ; '.'
000000000000055b         db  0x00 ; '.'
000000000000055c         db  0x00 ; '.'
000000000000055d         db  0x00 ; '.'
000000000000055e         db  0x00 ; '.'
000000000000055f         db  0x00 ; '.'
0000000000000560         db  0x00 ; '.'
0000000000000561         db  0x00 ; '.'
0000000000000562         db  0x00 ; '.'
0000000000000563         db  0x00 ; '.'
0000000000000564         db  0x00 ; '.'
0000000000000565         db  0x00 ; '.'
0000000000000566         db  0x00 ; '.'
0000000000000567         db  0x00 ; '.'
0000000000000568         db  0x86 ; '.'
0000000000000569         db  0x01 ; '.'
000000000000056a         db  0x00 ; '.'
000000000000056b         db  0x00 ; '.'
000000000000056c         db  0x12 ; '.'
000000000000056d         db  0x00 ; '.'
000000000000056e         db  0x00 ; '.'
000000000000056f         db  0x00 ; '.'
0000000000000570         db  0x00 ; '.'
0000000000000571         db  0x00 ; '.'
0000000000000572         db  0x00 ; '.'
0000000000000573         db  0x00 ; '.'
0000000000000574         db  0x00 ; '.'
0000000000000575         db  0x00 ; '.'
0000000000000576         db  0x00 ; '.'
0000000000000577         db  0x00 ; '.'
0000000000000578         db  0x00 ; '.'
0000000000000579         db  0x00 ; '.'
000000000000057a         db  0x00 ; '.'
000000000000057b         db  0x00 ; '.'
000000000000057c         db  0x00 ; '.'
000000000000057d         db  0x00 ; '.'
000000000000057e         db  0x00 ; '.'
000000000000057f         db  0x00 ; '.'
0000000000000580         db  0xf1 ; '.'
0000000000000581         db  0x00 ; '.'
0000000000000582         db  0x00 ; '.'
0000000000000583         db  0x00 ; '.'
0000000000000584         db  0x12 ; '.'
0000000000000585         db  0x00 ; '.'
0000000000000586         db  0x00 ; '.'
0000000000000587         db  0x00 ; '.'
0000000000000588         db  0x00 ; '.'
0000000000000589         db  0x00 ; '.'
000000000000058a         db  0x00 ; '.'
000000000000058b         db  0x00 ; '.'
000000000000058c         db  0x00 ; '.'
000000000000058d         db  0x00 ; '.'
000000000000058e         db  0x00 ; '.'
000000000000058f         db  0x00 ; '.'
0000000000000590         db  0x00 ; '.'
0000000000000591         db  0x00 ; '.'
0000000000000592         db  0x00 ; '.'
0000000000000593         db  0x00 ; '.'
0000000000000594         db  0x00 ; '.'
0000000000000595         db  0x00 ; '.'
0000000000000596         db  0x00 ; '.'
0000000000000597         db  0x00 ; '.'
0000000000000598         db  0x45 ; 'E'
0000000000000599         db  0x01 ; '.'
000000000000059a         db  0x00 ; '.'
000000000000059b         db  0x00 ; '.'
000000000000059c         db  0x12 ; '.'
000000000000059d         db  0x00 ; '.'
000000000000059e         db  0x00 ; '.'
000000000000059f         db  0x00 ; '.'                                         ; DATA XREF=sub_12920+32
00000000000005a0         db  0x00 ; '.'
00000000000005a1         db  0x00 ; '.'
00000000000005a2         db  0x00 ; '.'
00000000000005a3         db  0x00 ; '.'
00000000000005a4         db  0x00 ; '.'
00000000000005a5         db  0x00 ; '.'
00000000000005a6         db  0x00 ; '.'
00000000000005a7         db  0x00 ; '.'
00000000000005a8         db  0x00 ; '.'
00000000000005a9         db  0x00 ; '.'
00000000000005aa         db  0x00 ; '.'
00000000000005ab         db  0x00 ; '.'
00000000000005ac         db  0x00 ; '.'
00000000000005ad         db  0x00 ; '.'
00000000000005ae         db  0x00 ; '.'
00000000000005af         db  0x00 ; '.'                                         ; DATA XREF=sub_13000+182
00000000000005b0         db  0x94 ; '.'                                         ; DATA XREF=sub_13000+120
00000000000005b1         db  0x01 ; '.'
00000000000005b2         db  0x00 ; '.'
00000000000005b3         db  0x00 ; '.'
00000000000005b4         db  0x12 ; '.'
00000000000005b5         db  0x00 ; '.'
00000000000005b6         db  0x00 ; '.'
00000000000005b7         db  0x00 ; '.'
00000000000005b8         db  0x00 ; '.'
00000000000005b9         db  0x00 ; '.'
00000000000005ba         db  0x00 ; '.'
00000000000005bb         db  0x00 ; '.'
00000000000005bc         db  0x00 ; '.'
00000000000005bd         db  0x00 ; '.'
00000000000005be         db  0x00 ; '.'
00000000000005bf         db  0x00 ; '.'
00000000000005c0         db  0x00 ; '.'
00000000000005c1         db  0x00 ; '.'
00000000000005c2         db  0x00 ; '.'                                         ; DATA XREF=sub_13000+151
00000000000005c3         db  0x00 ; '.'
00000000000005c4         db  0x00 ; '.'
00000000000005c5         db  0x00 ; '.'
00000000000005c6         db  0x00 ; '.'
00000000000005c7         db  0x00 ; '.'
00000000000005c8         db  0x5d ; ']'
00000000000005c9         db  0x01 ; '.'
00000000000005ca         db  0x00 ; '.'
00000000000005cb         db  0x00 ; '.'
00000000000005cc         db  0x12 ; '.'
00000000000005cd         db  0x00 ; '.'
00000000000005ce         db  0x00 ; '.'
00000000000005cf         db  0x00 ; '.'
00000000000005d0         db  0x00 ; '.'
00000000000005d1         db  0x00 ; '.'
00000000000005d2         db  0x00 ; '.'
00000000000005d3         db  0x00 ; '.'
00000000000005d4         db  0x00 ; '.'
00000000000005d5         db  0x00 ; '.'
00000000000005d6         db  0x00 ; '.'
00000000000005d7         db  0x00 ; '.'
00000000000005d8         db  0x00 ; '.'
00000000000005d9         db  0x00 ; '.'
00000000000005da         db  0x00 ; '.'
00000000000005db         db  0x00 ; '.'
00000000000005dc         db  0x00 ; '.'
00000000000005dd         db  0x00 ; '.'
00000000000005de         db  0x00 ; '.'
00000000000005df         db  0x00 ; '.'
00000000000005e0         db  0xa1 ; '.'
00000000000005e1         db  0x02 ; '.'
00000000000005e2         db  0x00 ; '.'
00000000000005e3         db  0x00 ; '.'
00000000000005e4         db  0x12 ; '.'
00000000000005e5         db  0x00 ; '.'
00000000000005e6         db  0x00 ; '.'
00000000000005e7         db  0x00 ; '.'
00000000000005e8         db  0x00 ; '.'
00000000000005e9         db  0x00 ; '.'
00000000000005ea         db  0x00 ; '.'
00000000000005eb         db  0x00 ; '.'
00000000000005ec         db  0x00 ; '.'
00000000000005ed         db  0x00 ; '.'
00000000000005ee         db  0x00 ; '.'
00000000000005ef         db  0x00 ; '.'
00000000000005f0         db  0x00 ; '.'
00000000000005f1         db  0x00 ; '.'
00000000000005f2         db  0x00 ; '.'
00000000000005f3         db  0x00 ; '.'
00000000000005f4         db  0x00 ; '.'
00000000000005f5         db  0x00 ; '.'
00000000000005f6         db  0x00 ; '.'
00000000000005f7         db  0x00 ; '.'
00000000000005f8         db  0x62 ; 'b'
00000000000005f9         db  0x01 ; '.'
00000000000005fa         db  0x00 ; '.'
00000000000005fb         db  0x00 ; '.'
00000000000005fc         db  0x12 ; '.'
00000000000005fd         db  0x00 ; '.'
00000000000005fe         db  0x00 ; '.'
00000000000005ff         db  0x00 ; '.'
0000000000000600         db  0x00 ; '.'
0000000000000601         db  0x00 ; '.'
0000000000000602         db  0x00 ; '.'
0000000000000603         db  0x00 ; '.'
0000000000000604         db  0x00 ; '.'
0000000000000605         db  0x00 ; '.'
0000000000000606         db  0x00 ; '.'
0000000000000607         db  0x00 ; '.'
0000000000000608         db  0x00 ; '.'
0000000000000609         db  0x00 ; '.'
000000000000060a         db  0x00 ; '.'
000000000000060b         db  0x00 ; '.'
000000000000060c         db  0x00 ; '.'
000000000000060d         db  0x00 ; '.'
000000000000060e         db  0x00 ; '.'
000000000000060f         db  0x00 ; '.'
0000000000000610         db  0x3e ; '>'
0000000000000611         db  0x01 ; '.'
0000000000000612         db  0x00 ; '.'
0000000000000613         db  0x00 ; '.'
0000000000000614         db  0x12 ; '.'
0000000000000615         db  0x00 ; '.'
0000000000000616         db  0x00 ; '.'
0000000000000617         db  0x00 ; '.'
0000000000000618         db  0x00 ; '.'
0000000000000619         db  0x00 ; '.'
000000000000061a         db  0x00 ; '.'
000000000000061b         db  0x00 ; '.'
000000000000061c         db  0x00 ; '.'
000000000000061d         db  0x00 ; '.'
000000000000061e         db  0x00 ; '.'
000000000000061f         db  0x00 ; '.'
0000000000000620         db  0x00 ; '.'
0000000000000621         db  0x00 ; '.'
0000000000000622         db  0x00 ; '.'
0000000000000623         db  0x00 ; '.'
0000000000000624         db  0x00 ; '.'
0000000000000625         db  0x00 ; '.'
0000000000000626         db  0x00 ; '.'
0000000000000627         db  0x00 ; '.'
0000000000000628         db  0xba ; '.'
0000000000000629         db  0x02 ; '.'
000000000000062a         db  0x00 ; '.'
000000000000062b         db  0x00 ; '.'
000000000000062c         db  0x12 ; '.'
000000000000062d         db  0x00 ; '.'
000000000000062e         db  0x00 ; '.'
000000000000062f         db  0x00 ; '.'
0000000000000630         db  0x00 ; '.'
0000000000000631         db  0x00 ; '.'
0000000000000632         db  0x00 ; '.'
0000000000000633         db  0x00 ; '.'
0000000000000634         db  0x00 ; '.'
0000000000000635         db  0x00 ; '.'
0000000000000636         db  0x00 ; '.'
0000000000000637         db  0x00 ; '.'
0000000000000638         db  0x00 ; '.'
0000000000000639         db  0x00 ; '.'
000000000000063a         db  0x00 ; '.'
000000000000063b         db  0x00 ; '.'
000000000000063c         db  0x00 ; '.'
000000000000063d         db  0x00 ; '.'
000000000000063e         db  0x00 ; '.'
000000000000063f         db  0x00 ; '.'
0000000000000640         db  0x2e ; '.'
0000000000000641         db  0x01 ; '.'
0000000000000642         db  0x00 ; '.'
0000000000000643         db  0x00 ; '.'
0000000000000644         db  0x12 ; '.'
0000000000000645         db  0x00 ; '.'
0000000000000646         db  0x00 ; '.'
0000000000000647         db  0x00 ; '.'
0000000000000648         db  0x00 ; '.'
0000000000000649         db  0x00 ; '.'
000000000000064a         db  0x00 ; '.'
000000000000064b         db  0x00 ; '.'
000000000000064c         db  0x00 ; '.'
000000000000064d         db  0x00 ; '.'
000000000000064e         db  0x00 ; '.'
000000000000064f         db  0x00 ; '.'
0000000000000650         db  0x00 ; '.'
0000000000000651         db  0x00 ; '.'
0000000000000652         db  0x00 ; '.'
0000000000000653         db  0x00 ; '.'
0000000000000654         db  0x00 ; '.'
0000000000000655         db  0x00 ; '.'
0000000000000656         db  0x00 ; '.'
0000000000000657         db  0x00 ; '.'
0000000000000658         db  0x9a ; '.'
0000000000000659         db  0x02 ; '.'
000000000000065a         db  0x00 ; '.'
000000000000065b         db  0x00 ; '.'
000000000000065c         db  0x12 ; '.'
000000000000065d         db  0x00 ; '.'
000000000000065e         db  0x00 ; '.'
000000000000065f         db  0x00 ; '.'
0000000000000660         db  0x00 ; '.'
0000000000000661         db  0x00 ; '.'
0000000000000662         db  0x00 ; '.'
0000000000000663         db  0x00 ; '.'
0000000000000664         db  0x00 ; '.'
0000000000000665         db  0x00 ; '.'
0000000000000666         db  0x00 ; '.'
0000000000000667         db  0x00 ; '.'
0000000000000668         db  0x00 ; '.'
0000000000000669         db  0x00 ; '.'
000000000000066a         db  0x00 ; '.'
000000000000066b         db  0x00 ; '.'
000000000000066c         db  0x00 ; '.'
000000000000066d         db  0x00 ; '.'
000000000000066e         db  0x00 ; '.'
000000000000066f         db  0x00 ; '.'
0000000000000670         db  0x53 ; 'S'
0000000000000671         db  0x03 ; '.'
0000000000000672         db  0x00 ; '.'
0000000000000673         db  0x00 ; '.'
0000000000000674         db  0x20 ; ' '
0000000000000675         db  0x00 ; '.'
0000000000000676         db  0x00 ; '.'
0000000000000677         db  0x00 ; '.'
0000000000000678         db  0x00 ; '.'
0000000000000679         db  0x00 ; '.'
000000000000067a         db  0x00 ; '.'
000000000000067b         db  0x00 ; '.'
000000000000067c         db  0x00 ; '.'
000000000000067d         db  0x00 ; '.'
000000000000067e         db  0x00 ; '.'
000000000000067f         db  0x00 ; '.'
0000000000000680         db  0x00 ; '.'
0000000000000681         db  0x00 ; '.'
0000000000000682         db  0x00 ; '.'
0000000000000683         db  0x00 ; '.'
0000000000000684         db  0x00 ; '.'
0000000000000685         db  0x00 ; '.'
0000000000000686         db  0x00 ; '.'
0000000000000687         db  0x00 ; '.'
0000000000000688         db  0x8c ; '.'
0000000000000689         db  0x01 ; '.'
000000000000068a         db  0x00 ; '.'
000000000000068b         db  0x00 ; '.'
000000000000068c         db  0x12 ; '.'
000000000000068d         db  0x00 ; '.'
000000000000068e         db  0x00 ; '.'
000000000000068f         db  0x00 ; '.'
0000000000000690         db  0x00 ; '.'
0000000000000691         db  0x00 ; '.'
0000000000000692         db  0x00 ; '.'
0000000000000693         db  0x00 ; '.'
0000000000000694         db  0x00 ; '.'
0000000000000695         db  0x00 ; '.'
0000000000000696         db  0x00 ; '.'
0000000000000697         db  0x00 ; '.'
0000000000000698         db  0x00 ; '.'
0000000000000699         db  0x00 ; '.'
000000000000069a         db  0x00 ; '.'
000000000000069b         db  0x00 ; '.'
000000000000069c         db  0x00 ; '.'
000000000000069d         db  0x00 ; '.'
000000000000069e         db  0x00 ; '.'
000000000000069f         db  0x00 ; '.'
00000000000006a0         db  0xef ; '.'
00000000000006a1         db  0x01 ; '.'
00000000000006a2         db  0x00 ; '.'
00000000000006a3         db  0x00 ; '.'
00000000000006a4         db  0x12 ; '.'
00000000000006a5         db  0x00 ; '.'
00000000000006a6         db  0x00 ; '.'
00000000000006a7         db  0x00 ; '.'
00000000000006a8         db  0x00 ; '.'
00000000000006a9         db  0x00 ; '.'
00000000000006aa         db  0x00 ; '.'
00000000000006ab         db  0x00 ; '.'
00000000000006ac         db  0x00 ; '.'
00000000000006ad         db  0x00 ; '.'
00000000000006ae         db  0x00 ; '.'
00000000000006af         db  0x00 ; '.'
00000000000006b0         db  0x00 ; '.'
00000000000006b1         db  0x00 ; '.'
00000000000006b2         db  0x00 ; '.'
00000000000006b3         db  0x00 ; '.'
00000000000006b4         db  0x00 ; '.'
00000000000006b5         db  0x00 ; '.'
00000000000006b6         db  0x00 ; '.'
00000000000006b7         db  0x00 ; '.'
00000000000006b8         db  0xff ; '.'
00000000000006b9         db  0x00 ; '.'
00000000000006ba         db  0x00 ; '.'
00000000000006bb         db  0x00 ; '.'
00000000000006bc         db  0x12 ; '.'
00000000000006bd         db  0x00 ; '.'
00000000000006be         db  0x00 ; '.'
00000000000006bf         db  0x00 ; '.'
00000000000006c0         db  0x00 ; '.'
00000000000006c1         db  0x00 ; '.'
00000000000006c2         db  0x00 ; '.'
00000000000006c3         db  0x00 ; '.'
00000000000006c4         db  0x00 ; '.'
00000000000006c5         db  0x00 ; '.'
00000000000006c6         db  0x00 ; '.'
00000000000006c7         db  0x00 ; '.'
00000000000006c8         db  0x00 ; '.'
00000000000006c9         db  0x00 ; '.'
00000000000006ca         db  0x00 ; '.'
00000000000006cb         db  0x00 ; '.'
00000000000006cc         db  0x00 ; '.'
00000000000006cd         db  0x00 ; '.'
00000000000006ce         db  0x00 ; '.'
00000000000006cf         db  0x00 ; '.'
00000000000006d0         db  0x9a ; '.'
00000000000006d1         db  0x01 ; '.'
00000000000006d2         db  0x00 ; '.'
00000000000006d3         db  0x00 ; '.'
00000000000006d4         db  0x12 ; '.'
00000000000006d5         db  0x00 ; '.'
00000000000006d6         db  0x00 ; '.'
00000000000006d7         db  0x00 ; '.'
00000000000006d8         db  0x00 ; '.'
00000000000006d9         db  0x00 ; '.'
00000000000006da         db  0x00 ; '.'
00000000000006db         db  0x00 ; '.'
00000000000006dc         db  0x00 ; '.'
00000000000006dd         db  0x00 ; '.'
00000000000006de         db  0x00 ; '.'
00000000000006df         db  0x00 ; '.'
00000000000006e0         db  0x00 ; '.'
00000000000006e1         db  0x00 ; '.'
00000000000006e2         db  0x00 ; '.'
00000000000006e3         db  0x00 ; '.'
00000000000006e4         db  0x00 ; '.'
00000000000006e5         db  0x00 ; '.'
00000000000006e6         db  0x00 ; '.'
00000000000006e7         db  0x00 ; '.'
00000000000006e8         db  0x87 ; '.'
00000000000006e9         db  0x00 ; '.'
00000000000006ea         db  0x00 ; '.'
00000000000006eb         db  0x00 ; '.'
00000000000006ec         db  0x12 ; '.'
00000000000006ed         db  0x00 ; '.'
00000000000006ee         db  0x00 ; '.'
00000000000006ef         db  0x00 ; '.'
00000000000006f0         db  0x00 ; '.'
00000000000006f1         db  0x00 ; '.'
00000000000006f2         db  0x00 ; '.'
00000000000006f3         db  0x00 ; '.'
00000000000006f4         db  0x00 ; '.'
00000000000006f5         db  0x00 ; '.'
00000000000006f6         db  0x00 ; '.'
00000000000006f7         db  0x00 ; '.'
00000000000006f8         db  0x00 ; '.'
00000000000006f9         db  0x00 ; '.'
00000000000006fa         db  0x00 ; '.'
00000000000006fb         db  0x00 ; '.'
00000000000006fc         db  0x00 ; '.'
00000000000006fd         db  0x00 ; '.'
00000000000006fe         db  0x00 ; '.'
00000000000006ff         db  0x00 ; '.'
0000000000000700         db  0x0b ; '.'
0000000000000701         db  0x00 ; '.'
0000000000000702         db  0x00 ; '.'
0000000000000703         db  0x00 ; '.'
0000000000000704         db  0x12 ; '.'
0000000000000705         db  0x00 ; '.'
0000000000000706         db  0x00 ; '.'
0000000000000707         db  0x00 ; '.'
0000000000000708         db  0x00 ; '.'
0000000000000709         db  0x00 ; '.'
000000000000070a         db  0x00 ; '.'
000000000000070b         db  0x00 ; '.'
000000000000070c         db  0x00 ; '.'
000000000000070d         db  0x00 ; '.'
000000000000070e         db  0x00 ; '.'
000000000000070f         db  0x00 ; '.'
0000000000000710         db  0x00 ; '.'
0000000000000711         db  0x00 ; '.'
0000000000000712         db  0x00 ; '.'
0000000000000713         db  0x00 ; '.'
0000000000000714         db  0x00 ; '.'
0000000000000715         db  0x00 ; '.'
0000000000000716         db  0x00 ; '.'
0000000000000717         db  0x00 ; '.'
0000000000000718         db  0xa9 ; '.'
0000000000000719         db  0x01 ; '.'
000000000000071a         db  0x00 ; '.'
000000000000071b         db  0x00 ; '.'
000000000000071c         db  0x12 ; '.'
000000000000071d         db  0x00 ; '.'
000000000000071e         db  0x00 ; '.'
000000000000071f         db  0x00 ; '.'
0000000000000720         db  0x00 ; '.'
0000000000000721         db  0x00 ; '.'
0000000000000722         db  0x00 ; '.'
0000000000000723         db  0x00 ; '.'
0000000000000724         db  0x00 ; '.'
0000000000000725         db  0x00 ; '.'
0000000000000726         db  0x00 ; '.'
0000000000000727         db  0x00 ; '.'
0000000000000728         db  0x00 ; '.'
0000000000000729         db  0x00 ; '.'
000000000000072a         db  0x00 ; '.'
000000000000072b         db  0x00 ; '.'
000000000000072c         db  0x00 ; '.'
000000000000072d         db  0x00 ; '.'
000000000000072e         db  0x00 ; '.'
000000000000072f         db  0x00 ; '.'
0000000000000730         db  0x08 ; '.'
0000000000000731         db  0x01 ; '.'
0000000000000732         db  0x00 ; '.'
0000000000000733         db  0x00 ; '.'
0000000000000734         db  0x12 ; '.'
0000000000000735         db  0x00 ; '.'
0000000000000736         db  0x00 ; '.'
0000000000000737         db  0x00 ; '.'
0000000000000738         db  0x00 ; '.'
0000000000000739         db  0x00 ; '.'
000000000000073a         db  0x00 ; '.'
000000000000073b         db  0x00 ; '.'
000000000000073c         db  0x00 ; '.'
000000000000073d         db  0x00 ; '.'
000000000000073e         db  0x00 ; '.'
000000000000073f         db  0x00 ; '.'
0000000000000740         db  0x00 ; '.'
0000000000000741         db  0x00 ; '.'
0000000000000742         db  0x00 ; '.'
0000000000000743         db  0x00 ; '.'
0000000000000744         db  0x00 ; '.'
0000000000000745         db  0x00 ; '.'
0000000000000746         db  0x00 ; '.'
0000000000000747         db  0x00 ; '.'
0000000000000748         db  0xd1 ; '.'
0000000000000749         db  0x01 ; '.'
000000000000074a         db  0x00 ; '.'
000000000000074b         db  0x00 ; '.'
000000000000074c         db  0x12 ; '.'
000000000000074d         db  0x00 ; '.'
000000000000074e         db  0x00 ; '.'
000000000000074f         db  0x00 ; '.'
0000000000000750         db  0x00 ; '.'
0000000000000751         db  0x00 ; '.'
0000000000000752         db  0x00 ; '.'
0000000000000753         db  0x00 ; '.'
0000000000000754         db  0x00 ; '.'
0000000000000755         db  0x00 ; '.'
0000000000000756         db  0x00 ; '.'
0000000000000757         db  0x00 ; '.'
0000000000000758         db  0x00 ; '.'
0000000000000759         db  0x00 ; '.'
000000000000075a         db  0x00 ; '.'
000000000000075b         db  0x00 ; '.'
000000000000075c         db  0x00 ; '.'
000000000000075d         db  0x00 ; '.'
000000000000075e         db  0x00 ; '.'
000000000000075f         db  0x00 ; '.'
0000000000000760         db  0x8a ; '.'
0000000000000761         db  0x02 ; '.'
0000000000000762         db  0x00 ; '.'
0000000000000763         db  0x00 ; '.'
0000000000000764         db  0x12 ; '.'
0000000000000765         db  0x00 ; '.'
0000000000000766         db  0x00 ; '.'
0000000000000767         db  0x00 ; '.'
0000000000000768         db  0x00 ; '.'
0000000000000769         db  0x00 ; '.'
000000000000076a         db  0x00 ; '.'
000000000000076b         db  0x00 ; '.'
000000000000076c         db  0x00 ; '.'
000000000000076d         db  0x00 ; '.'
000000000000076e         db  0x00 ; '.'
000000000000076f         db  0x00 ; '.'
0000000000000770         db  0x00 ; '.'
0000000000000771         db  0x00 ; '.'
0000000000000772         db  0x00 ; '.'
0000000000000773         db  0x00 ; '.'
0000000000000774         db  0x00 ; '.'
0000000000000775         db  0x00 ; '.'
0000000000000776         db  0x00 ; '.'
0000000000000777         db  0x00 ; '.'
0000000000000778         db  0xb6 ; '.'
0000000000000779         db  0x00 ; '.'
000000000000077a         db  0x00 ; '.'
000000000000077b         db  0x00 ; '.'
000000000000077c         db  0x12 ; '.'
000000000000077d         db  0x00 ; '.'
000000000000077e         db  0x00 ; '.'
000000000000077f         db  0x00 ; '.'
0000000000000780         db  0x00 ; '.'
0000000000000781         db  0x00 ; '.'
0000000000000782         db  0x00 ; '.'
0000000000000783         db  0x00 ; '.'
0000000000000784         db  0x00 ; '.'
0000000000000785         db  0x00 ; '.'
0000000000000786         db  0x00 ; '.'
0000000000000787         db  0x00 ; '.'
0000000000000788         db  0x00 ; '.'
0000000000000789         db  0x00 ; '.'
000000000000078a         db  0x00 ; '.'
000000000000078b         db  0x00 ; '.'
000000000000078c         db  0x00 ; '.'
000000000000078d         db  0x00 ; '.'
000000000000078e         db  0x00 ; '.'
000000000000078f         db  0x00 ; '.'
0000000000000790         db  0x26 ; '&'
0000000000000791         db  0x02 ; '.'
0000000000000792         db  0x00 ; '.'
0000000000000793         db  0x00 ; '.'
0000000000000794         db  0x12 ; '.'
0000000000000795         db  0x00 ; '.'
0000000000000796         db  0x00 ; '.'
0000000000000797         db  0x00 ; '.'
0000000000000798         db  0x00 ; '.'
0000000000000799         db  0x00 ; '.'
000000000000079a         db  0x00 ; '.'
000000000000079b         db  0x00 ; '.'
000000000000079c         db  0x00 ; '.'
000000000000079d         db  0x00 ; '.'
000000000000079e         db  0x00 ; '.'
000000000000079f         db  0x00 ; '.'
00000000000007a0         db  0x00 ; '.'
00000000000007a1         db  0x00 ; '.'
00000000000007a2         db  0x00 ; '.'
00000000000007a3         db  0x00 ; '.'
00000000000007a4         db  0x00 ; '.'
00000000000007a5         db  0x00 ; '.'
00000000000007a6         db  0x00 ; '.'
00000000000007a7         db  0x00 ; '.'
00000000000007a8         db  0x31 ; '1'
00000000000007a9         db  0x00 ; '.'
00000000000007aa         db  0x00 ; '.'
00000000000007ab         db  0x00 ; '.'
00000000000007ac         db  0x12 ; '.'
00000000000007ad         db  0x00 ; '.'
00000000000007ae         db  0x00 ; '.'
00000000000007af         db  0x00 ; '.'
00000000000007b0         db  0x00 ; '.'
00000000000007b1         db  0x00 ; '.'
00000000000007b2         db  0x00 ; '.'
00000000000007b3         db  0x00 ; '.'
00000000000007b4         db  0x00 ; '.'
00000000000007b5         db  0x00 ; '.'
00000000000007b6         db  0x00 ; '.'
00000000000007b7         db  0x00 ; '.'
00000000000007b8         db  0x00 ; '.'
00000000000007b9         db  0x00 ; '.'
00000000000007ba         db  0x00 ; '.'
00000000000007bb         db  0x00 ; '.'
00000000000007bc         db  0x00 ; '.'
00000000000007bd         db  0x00 ; '.'
00000000000007be         db  0x00 ; '.'
00000000000007bf         db  0x00 ; '.'
00000000000007c0         db  0x12 ; '.'
00000000000007c1         db  0x00 ; '.'
00000000000007c2         db  0x00 ; '.'
00000000000007c3         db  0x00 ; '.'
00000000000007c4         db  0x12 ; '.'
00000000000007c5         db  0x00 ; '.'
00000000000007c6         db  0x00 ; '.'
00000000000007c7         db  0x00 ; '.'
00000000000007c8         db  0x00 ; '.'
00000000000007c9         db  0x00 ; '.'
00000000000007ca         db  0x00 ; '.'
00000000000007cb         db  0x00 ; '.'
00000000000007cc         db  0x00 ; '.'
00000000000007cd         db  0x00 ; '.'
00000000000007ce         db  0x00 ; '.'
00000000000007cf         db  0x00 ; '.'
00000000000007d0         db  0x00 ; '.'
00000000000007d1         db  0x00 ; '.'
00000000000007d2         db  0x00 ; '.'
00000000000007d3         db  0x00 ; '.'
00000000000007d4         db  0x00 ; '.'
00000000000007d5         db  0x00 ; '.'
00000000000007d6         db  0x00 ; '.'
00000000000007d7         db  0x00 ; '.'
00000000000007d8         db  0xbe ; '.'
00000000000007d9         db  0x00 ; '.'
00000000000007da         db  0x00 ; '.'
00000000000007db         db  0x00 ; '.'
00000000000007dc         db  0x12 ; '.'
00000000000007dd         db  0x00 ; '.'
00000000000007de         db  0x00 ; '.'
00000000000007df         db  0x00 ; '.'
00000000000007e0         db  0x00 ; '.'
00000000000007e1         db  0x00 ; '.'
00000000000007e2         db  0x00 ; '.'
00000000000007e3         db  0x00 ; '.'                                         ; DATA XREF=version_etc_arn+89
00000000000007e4         db  0x00 ; '.'
00000000000007e5         db  0x00 ; '.'
00000000000007e6         db  0x00 ; '.'
00000000000007e7         db  0x00 ; '.'
00000000000007e8         db  0x00 ; '.'
00000000000007e9         db  0x00 ; '.'
00000000000007ea         db  0x00 ; '.'
00000000000007eb         db  0x00 ; '.'
00000000000007ec         db  0x00 ; '.'
00000000000007ed         db  0x00 ; '.'
00000000000007ee         db  0x00 ; '.'
00000000000007ef         db  0x00 ; '.'
00000000000007f0         db  0x69 ; 'i'
00000000000007f1         db  0x01 ; '.'
00000000000007f2         db  0x00 ; '.'
00000000000007f3         db  0x00 ; '.'
00000000000007f4         db  0x12 ; '.'
00000000000007f5         db  0x00 ; '.'
00000000000007f6         db  0x00 ; '.'
00000000000007f7         db  0x00 ; '.'
00000000000007f8         db  0x00 ; '.'
00000000000007f9         db  0x00 ; '.'
00000000000007fa         db  0x00 ; '.'
00000000000007fb         db  0x00 ; '.'
00000000000007fc         db  0x00 ; '.'
00000000000007fd         db  0x00 ; '.'
00000000000007fe         db  0x00 ; '.'
00000000000007ff         db  0x00 ; '.'
0000000000000800         db  0x00 ; '.'                                         ; DATA XREF=peek_token+816, peek_token+1670
0000000000000801         db  0x00 ; '.'
0000000000000802         db  0x00 ; '.'
0000000000000803         db  0x00 ; '.'
0000000000000804         db  0x00 ; '.'
0000000000000805         db  0x00 ; '.'
0000000000000806         db  0x00 ; '.'
0000000000000807         db  0x00 ; '.'
0000000000000808         db  0x6a ; 'j'
0000000000000809         db  0x02 ; '.'
000000000000080a         db  0x00 ; '.'
000000000000080b         db  0x00 ; '.'
000000000000080c         db  0x12 ; '.'
000000000000080d         db  0x00 ; '.'
000000000000080e         db  0x00 ; '.'
000000000000080f         db  0x00 ; '.'
0000000000000810         db  0x00 ; '.'
0000000000000811         db  0x00 ; '.'
0000000000000812         db  0x00 ; '.'
0000000000000813         db  0x00 ; '.'
0000000000000814         db  0x00 ; '.'
0000000000000815         db  0x00 ; '.'
0000000000000816         db  0x00 ; '.'
0000000000000817         db  0x00 ; '.'
0000000000000818         db  0x00 ; '.'
0000000000000819         db  0x00 ; '.'
000000000000081a         db  0x00 ; '.'
000000000000081b         db  0x00 ; '.'
000000000000081c         db  0x00 ; '.'
000000000000081d         db  0x00 ; '.'
000000000000081e         db  0x00 ; '.'
000000000000081f         db  0x00 ; '.'
0000000000000820         db  0x8f ; '.'
0000000000000821         db  0x00 ; '.'
0000000000000822         db  0x00 ; '.'
0000000000000823         db  0x00 ; '.'
0000000000000824         db  0x12 ; '.'
0000000000000825         db  0x00 ; '.'
0000000000000826         db  0x00 ; '.'
0000000000000827         db  0x00 ; '.'
0000000000000828         db  0x00 ; '.'
0000000000000829         db  0x00 ; '.'
000000000000082a         db  0x00 ; '.'
000000000000082b         db  0x00 ; '.'
000000000000082c         db  0x00 ; '.'
000000000000082d         db  0x00 ; '.'
000000000000082e         db  0x00 ; '.'
000000000000082f         db  0x00 ; '.'
0000000000000830         db  0x00 ; '.'
0000000000000831         db  0x00 ; '.'
0000000000000832         db  0x00 ; '.'
0000000000000833         db  0x00 ; '.'
0000000000000834         db  0x00 ; '.'
0000000000000835         db  0x00 ; '.'
0000000000000836         db  0x00 ; '.'
0000000000000837         db  0x00 ; '.'
0000000000000838         db  0x28 ; '('
0000000000000839         db  0x02 ; '.'
000000000000083a         db  0x00 ; '.'
000000000000083b         db  0x00 ; '.'
000000000000083c         db  0x12 ; '.'
000000000000083d         db  0x00 ; '.'
000000000000083e         db  0x00 ; '.'
000000000000083f         db  0x00 ; '.'
0000000000000840         db  0x00 ; '.'
0000000000000841         db  0x00 ; '.'
0000000000000842         db  0x00 ; '.'
0000000000000843         db  0x00 ; '.'
0000000000000844         db  0x00 ; '.'
0000000000000845         db  0x00 ; '.'
0000000000000846         db  0x00 ; '.'
0000000000000847         db  0x00 ; '.'
0000000000000848         db  0x00 ; '.'
0000000000000849         db  0x00 ; '.'
000000000000084a         db  0x00 ; '.'
000000000000084b         db  0x00 ; '.'
000000000000084c         db  0x00 ; '.'
000000000000084d         db  0x00 ; '.'
000000000000084e         db  0x00 ; '.'
000000000000084f         db  0x00 ; '.'
0000000000000850         db  0xb3 ; '.'
0000000000000851         db  0x02 ; '.'
0000000000000852         db  0x00 ; '.'
0000000000000853         db  0x00 ; '.'
0000000000000854         db  0x12 ; '.'
0000000000000855         db  0x00 ; '.'
0000000000000856         db  0x00 ; '.'
0000000000000857         db  0x00 ; '.'
0000000000000858         db  0x00 ; '.'
0000000000000859         db  0x00 ; '.'
000000000000085a         db  0x00 ; '.'
000000000000085b         db  0x00 ; '.'
000000000000085c         db  0x00 ; '.'
000000000000085d         db  0x00 ; '.'
000000000000085e         db  0x00 ; '.'
000000000000085f         db  0x00 ; '.'
0000000000000860         db  0x00 ; '.'
0000000000000861         db  0x00 ; '.'
0000000000000862         db  0x00 ; '.'
0000000000000863         db  0x00 ; '.'
0000000000000864         db  0x00 ; '.'
0000000000000865         db  0x00 ; '.'
0000000000000866         db  0x00 ; '.'
0000000000000867         db  0x00 ; '.'
0000000000000868         db  0x43 ; 'C'
0000000000000869         db  0x00 ; '.'
000000000000086a         db  0x00 ; '.'
000000000000086b         db  0x00 ; '.'
000000000000086c         db  0x12 ; '.'
000000000000086d         db  0x00 ; '.'
000000000000086e         db  0x00 ; '.'
000000000000086f         db  0x00 ; '.'
0000000000000870         db  0x00 ; '.'
0000000000000871         db  0x00 ; '.'
0000000000000872         db  0x00 ; '.'
0000000000000873         db  0x00 ; '.'
0000000000000874         db  0x00 ; '.'
0000000000000875         db  0x00 ; '.'
0000000000000876         db  0x00 ; '.'
0000000000000877         db  0x00 ; '.'
0000000000000878         db  0x00 ; '.'
0000000000000879         db  0x00 ; '.'
000000000000087a         db  0x00 ; '.'
000000000000087b         db  0x00 ; '.'
000000000000087c         db  0x00 ; '.'
000000000000087d         db  0x00 ; '.'
000000000000087e         db  0x00 ; '.'
000000000000087f         db  0x00 ; '.'
0000000000000880         db  0xc4 ; '.'
0000000000000881         db  0x00 ; '.'
0000000000000882         db  0x00 ; '.'
0000000000000883         db  0x00 ; '.'
0000000000000884         db  0x12 ; '.'
0000000000000885         db  0x00 ; '.'
0000000000000886         db  0x00 ; '.'
0000000000000887         db  0x00 ; '.'
0000000000000888         db  0x00 ; '.'
0000000000000889         db  0x00 ; '.'
000000000000088a         db  0x00 ; '.'
000000000000088b         db  0x00 ; '.'
000000000000088c         db  0x00 ; '.'
000000000000088d         db  0x00 ; '.'
000000000000088e         db  0x00 ; '.'
000000000000088f         db  0x00 ; '.'
0000000000000890         db  0x00 ; '.'
0000000000000891         db  0x00 ; '.'
0000000000000892         db  0x00 ; '.'
0000000000000893         db  0x00 ; '.'
0000000000000894         db  0x00 ; '.'
0000000000000895         db  0x00 ; '.'
0000000000000896         db  0x00 ; '.'
0000000000000897         db  0x00 ; '.'
0000000000000898         db  0xe9 ; '.'
0000000000000899         db  0x02 ; '.'
000000000000089a         db  0x00 ; '.'
000000000000089b         db  0x00 ; '.'
000000000000089c         db  0x12 ; '.'
000000000000089d         db  0x00 ; '.'
000000000000089e         db  0x00 ; '.'
000000000000089f         db  0x00 ; '.'
00000000000008a0         db  0x00 ; '.'
00000000000008a1         db  0x00 ; '.'
00000000000008a2         db  0x00 ; '.'
00000000000008a3         db  0x00 ; '.'
00000000000008a4         db  0x00 ; '.'
00000000000008a5         db  0x00 ; '.'
00000000000008a6         db  0x00 ; '.'
00000000000008a7         db  0x00 ; '.'
00000000000008a8         db  0x00 ; '.'
00000000000008a9         db  0x00 ; '.'
00000000000008aa         db  0x00 ; '.'
00000000000008ab         db  0x00 ; '.'
00000000000008ac         db  0x00 ; '.'
00000000000008ad         db  0x00 ; '.'
00000000000008ae         db  0x00 ; '.'
00000000000008af         db  0x00 ; '.'
00000000000008b0         db  0xd4 ; '.'
00000000000008b1         db  0x00 ; '.'
00000000000008b2         db  0x00 ; '.'
00000000000008b3         db  0x00 ; '.'
00000000000008b4         db  0x12 ; '.'
00000000000008b5         db  0x00 ; '.'
00000000000008b6         db  0x00 ; '.'
00000000000008b7         db  0x00 ; '.'
00000000000008b8         db  0x00 ; '.'
00000000000008b9         db  0x00 ; '.'
00000000000008ba         db  0x00 ; '.'
00000000000008bb         db  0x00 ; '.'
00000000000008bc         db  0x00 ; '.'
00000000000008bd         db  0x00 ; '.'
00000000000008be         db  0x00 ; '.'
00000000000008bf         db  0x00 ; '.'
00000000000008c0         db  0x00 ; '.'
00000000000008c1         db  0x00 ; '.'
00000000000008c2         db  0x00 ; '.'
00000000000008c3         db  0x00 ; '.'
00000000000008c4         db  0x00 ; '.'
00000000000008c5         db  0x00 ; '.'
00000000000008c6         db  0x00 ; '.'
00000000000008c7         db  0x00 ; '.'
00000000000008c8         db  0xf6 ; '.'
00000000000008c9         db  0x01 ; '.'
00000000000008ca         db  0x00 ; '.'
00000000000008cb         db  0x00 ; '.'
00000000000008cc         db  0x12 ; '.'
00000000000008cd         db  0x00 ; '.'
00000000000008ce         db  0x00 ; '.'
00000000000008cf         db  0x00 ; '.'
00000000000008d0         db  0x00 ; '.'
00000000000008d1         db  0x00 ; '.'
00000000000008d2         db  0x00 ; '.'
00000000000008d3         db  0x00 ; '.'
00000000000008d4         db  0x00 ; '.'
00000000000008d5         db  0x00 ; '.'
00000000000008d6         db  0x00 ; '.'
00000000000008d7         db  0x00 ; '.'
00000000000008d8         db  0x00 ; '.'
00000000000008d9         db  0x00 ; '.'
00000000000008da         db  0x00 ; '.'
00000000000008db         db  0x00 ; '.'
00000000000008dc         db  0x00 ; '.'
00000000000008dd         db  0x00 ; '.'
00000000000008de         db  0x00 ; '.'
00000000000008df         db  0x00 ; '.'
00000000000008e0         db  0x71 ; 'q'
00000000000008e1         db  0x01 ; '.'
00000000000008e2         db  0x00 ; '.'
00000000000008e3         db  0x00 ; '.'
00000000000008e4         db  0x12 ; '.'
00000000000008e5         db  0x00 ; '.'
00000000000008e6         db  0x00 ; '.'
00000000000008e7         db  0x00 ; '.'
00000000000008e8         db  0x00 ; '.'
00000000000008e9         db  0x00 ; '.'
00000000000008ea         db  0x00 ; '.'
00000000000008eb         db  0x00 ; '.'
00000000000008ec         db  0x00 ; '.'
00000000000008ed         db  0x00 ; '.'
00000000000008ee         db  0x00 ; '.'
00000000000008ef         db  0x00 ; '.'
00000000000008f0         db  0x00 ; '.'
00000000000008f1         db  0x00 ; '.'
00000000000008f2         db  0x00 ; '.'
00000000000008f3         db  0x00 ; '.'
00000000000008f4         db  0x00 ; '.'
00000000000008f5         db  0x00 ; '.'
00000000000008f6         db  0x00 ; '.'
00000000000008f7         db  0x00 ; '.'
00000000000008f8         db  0x62 ; 'b'
00000000000008f9         db  0x03 ; '.'
00000000000008fa         db  0x00 ; '.'
00000000000008fb         db  0x00 ; '.'
00000000000008fc         db  0x20 ; ' '
00000000000008fd         db  0x00 ; '.'
00000000000008fe         db  0x00 ; '.'
00000000000008ff         db  0x00 ; '.'
0000000000000900         db  0x00 ; '.'
0000000000000901         db  0x00 ; '.'
0000000000000902         db  0x00 ; '.'
0000000000000903         db  0x00 ; '.'
0000000000000904         db  0x00 ; '.'
0000000000000905         db  0x00 ; '.'
0000000000000906         db  0x00 ; '.'
0000000000000907         db  0x00 ; '.'
0000000000000908         db  0x00 ; '.'
0000000000000909         db  0x00 ; '.'
000000000000090a         db  0x00 ; '.'
000000000000090b         db  0x00 ; '.'
000000000000090c         db  0x00 ; '.'
000000000000090d         db  0x00 ; '.'
000000000000090e         db  0x00 ; '.'
000000000000090f         db  0x00 ; '.'
0000000000000910         db  0x6d ; 'm'
0000000000000911         db  0x00 ; '.'
0000000000000912         db  0x00 ; '.'
0000000000000913         db  0x00 ; '.'
0000000000000914         db  0x12 ; '.'
0000000000000915         db  0x00 ; '.'
0000000000000916         db  0x00 ; '.'
0000000000000917         db  0x00 ; '.'
0000000000000918         db  0x00 ; '.'
0000000000000919         db  0x00 ; '.'
000000000000091a         db  0x00 ; '.'
000000000000091b         db  0x00 ; '.'
000000000000091c         db  0x00 ; '.'
000000000000091d         db  0x00 ; '.'
000000000000091e         db  0x00 ; '.'
000000000000091f         db  0x00 ; '.'
0000000000000920         db  0x00 ; '.'
0000000000000921         db  0x00 ; '.'
0000000000000922         db  0x00 ; '.'
0000000000000923         db  0x00 ; '.'
0000000000000924         db  0x00 ; '.'
0000000000000925         db  0x00 ; '.'
0000000000000926         db  0x00 ; '.'
0000000000000927         db  0x00 ; '.'
0000000000000928         db  0xa1 ; '.'
0000000000000929         db  0x01 ; '.'
000000000000092a         db  0x00 ; '.'
000000000000092b         db  0x00 ; '.'
000000000000092c         db  0x12 ; '.'
000000000000092d         db  0x00 ; '.'
000000000000092e         db  0x00 ; '.'
000000000000092f         db  0x00 ; '.'
0000000000000930         db  0x00 ; '.'
0000000000000931         db  0x00 ; '.'
0000000000000932         db  0x00 ; '.'
0000000000000933         db  0x00 ; '.'
0000000000000934         db  0x00 ; '.'
0000000000000935         db  0x00 ; '.'
0000000000000936         db  0x00 ; '.'
0000000000000937         db  0x00 ; '.'
0000000000000938         db  0x00 ; '.'
0000000000000939         db  0x00 ; '.'
000000000000093a         db  0x00 ; '.'
000000000000093b         db  0x00 ; '.'
000000000000093c         db  0x00 ; '.'
000000000000093d         db  0x00 ; '.'
000000000000093e         db  0x00 ; '.'
000000000000093f         db  0x00 ; '.'
0000000000000940         db  0xad ; '.'
0000000000000941         db  0x00 ; '.'
0000000000000942         db  0x00 ; '.'
0000000000000943         db  0x00 ; '.'
0000000000000944         db  0x12 ; '.'
0000000000000945         db  0x00 ; '.'
0000000000000946         db  0x00 ; '.'
0000000000000947         db  0x00 ; '.'
0000000000000948         db  0x00 ; '.'
0000000000000949         db  0x00 ; '.'
000000000000094a         db  0x00 ; '.'
000000000000094b         db  0x00 ; '.'
000000000000094c         db  0x00 ; '.'
000000000000094d         db  0x00 ; '.'
000000000000094e         db  0x00 ; '.'
000000000000094f         db  0x00 ; '.'
0000000000000950         db  0x00 ; '.'
0000000000000951         db  0x00 ; '.'
0000000000000952         db  0x00 ; '.'
0000000000000953         db  0x00 ; '.'
0000000000000954         db  0x00 ; '.'
0000000000000955         db  0x00 ; '.'
0000000000000956         db  0x00 ; '.'
0000000000000957         db  0x00 ; '.'
0000000000000958         db  0x55 ; 'U'
0000000000000959         db  0x02 ; '.'
000000000000095a         db  0x00 ; '.'
000000000000095b         db  0x00 ; '.'
000000000000095c         db  0x22 ; '"'
000000000000095d         db  0x00 ; '.'
000000000000095e         db  0x00 ; '.'
000000000000095f         db  0x00 ; '.'
0000000000000960         db  0x00 ; '.'
0000000000000961         db  0x00 ; '.'
0000000000000962         db  0x00 ; '.'
0000000000000963         db  0x00 ; '.'
0000000000000964         db  0x00 ; '.'
0000000000000965         db  0x00 ; '.'
0000000000000966         db  0x00 ; '.'
0000000000000967         db  0x00 ; '.'
0000000000000968         db  0x00 ; '.'
0000000000000969         db  0x00 ; '.'
000000000000096a         db  0x00 ; '.'
000000000000096b         db  0x00 ; '.'
000000000000096c         db  0x00 ; '.'
000000000000096d         db  0x00 ; '.'
000000000000096e         db  0x00 ; '.'
000000000000096f         db  0x00 ; '.'
0000000000000970         db  0x41 ; 'A'
0000000000000971         db  0x02 ; '.'
0000000000000972         db  0x00 ; '.'
0000000000000973         db  0x00 ; '.'
0000000000000974         db  0x12 ; '.'
0000000000000975         db  0x00 ; '.'
0000000000000976         db  0x00 ; '.'
0000000000000977         db  0x00 ; '.'
0000000000000978         db  0x00 ; '.'
0000000000000979         db  0x00 ; '.'
000000000000097a         db  0x00 ; '.'
000000000000097b         db  0x00 ; '.'
000000000000097c         db  0x00 ; '.'
000000000000097d         db  0x00 ; '.'
000000000000097e         db  0x00 ; '.'
000000000000097f         db  0x00 ; '.'
0000000000000980         db  0x00 ; '.'
0000000000000981         db  0x00 ; '.'
0000000000000982         db  0x00 ; '.'
0000000000000983         db  0x00 ; '.'
0000000000000984         db  0x00 ; '.'
0000000000000985         db  0x00 ; '.'
0000000000000986         db  0x00 ; '.'
0000000000000987         db  0x00 ; '.'
0000000000000988         db  0xb5 ; '.'
0000000000000989         db  0x01 ; '.'
000000000000098a         db  0x00 ; '.'
000000000000098b         db  0x00 ; '.'
000000000000098c         db  0x12 ; '.'
000000000000098d         db  0x00 ; '.'
000000000000098e         db  0x00 ; '.'
000000000000098f         db  0x00 ; '.'
0000000000000990         db  0x00 ; '.'
0000000000000991         db  0x00 ; '.'
0000000000000992         db  0x00 ; '.'
0000000000000993         db  0x00 ; '.'
0000000000000994         db  0x00 ; '.'
0000000000000995         db  0x00 ; '.'
0000000000000996         db  0x00 ; '.'
0000000000000997         db  0x00 ; '.'
0000000000000998         db  0x00 ; '.'
0000000000000999         db  0x00 ; '.'
000000000000099a         db  0x00 ; '.'
000000000000099b         db  0x00 ; '.'
000000000000099c         db  0x00 ; '.'
000000000000099d         db  0x00 ; '.'
000000000000099e         db  0x00 ; '.'
000000000000099f         db  0x00 ; '.'
00000000000009a0         db  0x7f ; '.'
00000000000009a1         db  0x01 ; '.'
00000000000009a2         db  0x00 ; '.'
00000000000009a3         db  0x00 ; '.'
00000000000009a4         db  0x11 ; '.'
00000000000009a5         db  0x00 ; '.'
00000000000009a6         db  0x19 ; '.'
00000000000009a7         db  0x00 ; '.'
00000000000009a8         db  0x88 ; '.'
00000000000009a9         db  0x90 ; '.'
00000000000009aa         db  0x21 ; '!'
00000000000009ab         db  0x00 ; '.'
00000000000009ac         db  0x00 ; '.'
00000000000009ad         db  0x00 ; '.'
00000000000009ae         db  0x00 ; '.'
00000000000009af         db  0x00 ; '.'
00000000000009b0         db  0x08 ; '.'
00000000000009b1         db  0x00 ; '.'
00000000000009b2         db  0x00 ; '.'
00000000000009b3         db  0x00 ; '.'
00000000000009b4         db  0x00 ; '.'
00000000000009b5         db  0x00 ; '.'
00000000000009b6         db  0x00 ; '.'
00000000000009b7         db  0x00 ; '.'
00000000000009b8         db  0xce ; '.'
00000000000009b9         db  0x02 ; '.'
00000000000009ba         db  0x00 ; '.'
00000000000009bb         db  0x00 ; '.'
00000000000009bc         db  0x11 ; '.'
00000000000009bd         db  0x00 ; '.'
00000000000009be         db  0x19 ; '.'
00000000000009bf         db  0x00 ; '.'
00000000000009c0         db  0x80 ; '.'
00000000000009c1         db  0x90 ; '.'
00000000000009c2         db  0x21 ; '!'
00000000000009c3         db  0x00 ; '.'
00000000000009c4         db  0x00 ; '.'
00000000000009c5         db  0x00 ; '.'
00000000000009c6         db  0x00 ; '.'
00000000000009c7         db  0x00 ; '.'
00000000000009c8         db  0x08 ; '.'
00000000000009c9         db  0x00 ; '.'
00000000000009ca         db  0x00 ; '.'
00000000000009cb         db  0x00 ; '.'
00000000000009cc         db  0x00 ; '.'
00000000000009cd         db  0x00 ; '.'
00000000000009ce         db  0x00 ; '.'
00000000000009cf         db  0x00 ; '.'
00000000000009d0         db  0xd9 ; '.'
00000000000009d1         db  0x00 ; '.'
00000000000009d2         db  0x00 ; '.'
00000000000009d3         db  0x00 ; '.'
00000000000009d4         db  0x21 ; '!'
00000000000009d5         db  0x00 ; '.'
00000000000009d6         db  0x19 ; '.'
00000000000009d7         db  0x00 ; '.'
00000000000009d8         db  0xa0 ; '.'
00000000000009d9         db  0x90 ; '.'
00000000000009da         db  0x21 ; '!'
00000000000009db         db  0x00 ; '.'
00000000000009dc         db  0x00 ; '.'
00000000000009dd         db  0x00 ; '.'
00000000000009de         db  0x00 ; '.'
00000000000009df         db  0x00 ; '.'
00000000000009e0         db  0x08 ; '.'
00000000000009e1         db  0x00 ; '.'
00000000000009e2         db  0x00 ; '.'
00000000000009e3         db  0x00 ; '.'
00000000000009e4         db  0x00 ; '.'
00000000000009e5         db  0x00 ; '.'
00000000000009e6         db  0x00 ; '.'
00000000000009e7         db  0x00 ; '.'
00000000000009e8         db  0xd9 ; '.'
00000000000009e9         db  0x02 ; '.'
00000000000009ea         db  0x00 ; '.'
00000000000009eb         db  0x00 ; '.'
00000000000009ec         db  0x11 ; '.'
00000000000009ed         db  0x00 ; '.'
00000000000009ee         db  0x19 ; '.'
00000000000009ef         db  0x00 ; '.'
00000000000009f0         db  0xa0 ; '.'
00000000000009f1         db  0x90 ; '.'
00000000000009f2         db  0x21 ; '!'
00000000000009f3         db  0x00 ; '.'
00000000000009f4         db  0x00 ; '.'
00000000000009f5         db  0x00 ; '.'
00000000000009f6         db  0x00 ; '.'
00000000000009f7         db  0x00 ; '.'
00000000000009f8         db  0x08 ; '.'
00000000000009f9         db  0x00 ; '.'
00000000000009fa         db  0x00 ; '.'
00000000000009fb         db  0x00 ; '.'
00000000000009fc         db  0x00 ; '.'
00000000000009fd         db  0x00 ; '.'
00000000000009fe         db  0x00 ; '.'
00000000000009ff         db  0x00 ; '.'
0000000000000a00         db  0x08 ; '.'
0000000000000a01         db  0x02 ; '.'
0000000000000a02         db  0x00 ; '.'
0000000000000a03         db  0x00 ; '.'
0000000000000a04         db  0x21 ; '!'
0000000000000a05         db  0x00 ; '.'
0000000000000a06         db  0x19 ; '.'
0000000000000a07         db  0x00 ; '.'
0000000000000a08         db  0x80 ; '.'
0000000000000a09         db  0x90 ; '.'
0000000000000a0a         db  0x21 ; '!'
0000000000000a0b         db  0x00 ; '.'
0000000000000a0c         db  0x00 ; '.'
0000000000000a0d         db  0x00 ; '.'
0000000000000a0e         db  0x00 ; '.'
0000000000000a0f         db  0x00 ; '.'
0000000000000a10         db  0x08 ; '.'
0000000000000a11         db  0x00 ; '.'
0000000000000a12         db  0x00 ; '.'
0000000000000a13         db  0x00 ; '.'
0000000000000a14         db  0x00 ; '.'
0000000000000a15         db  0x00 ; '.'
0000000000000a16         db  0x00 ; '.'
0000000000000a17         db  0x00 ; '.'
0000000000000a18         db  0xdc ; '.'
0000000000000a19         db  0x01 ; '.'
0000000000000a1a         db  0x00 ; '.'
0000000000000a1b         db  0x00 ; '.'
0000000000000a1c         db  0x11 ; '.'
0000000000000a1d         db  0x00 ; '.'
0000000000000a1e         db  0x19 ; '.'
0000000000000a1f         db  0x00 ; '.'
0000000000000a20         db  0xc0 ; '.'
0000000000000a21         db  0x90 ; '.'
0000000000000a22         db  0x21 ; '!'
0000000000000a23         db  0x00 ; '.'
0000000000000a24         db  0x00 ; '.'
0000000000000a25         db  0x00 ; '.'
0000000000000a26         db  0x00 ; '.'
0000000000000a27         db  0x00 ; '.'
0000000000000a28         db  0x08 ; '.'
0000000000000a29         db  0x00 ; '.'
0000000000000a2a         db  0x00 ; '.'
0000000000000a2b         db  0x00 ; '.'
0000000000000a2c         db  0x00 ; '.'
0000000000000a2d         db  0x00 ; '.'
0000000000000a2e         db  0x00 ; '.'
0000000000000a2f         db  0x00 ; '.'
0000000000000a30         db  0x5e ; '^'
0000000000000a31         db  0x00 ; '.'
0000000000000a32         db  0x00 ; '.'
0000000000000a33         db  0x00 ; '.'
0000000000000a34         db  0x11 ; '.'
0000000000000a35         db  0x00 ; '.'
0000000000000a36         db  0x19 ; '.'
0000000000000a37         db  0x00 ; '.'
0000000000000a38         db  0x90 ; '.'
0000000000000a39         db  0x90 ; '.'
0000000000000a3a         db  0x21 ; '!'
0000000000000a3b         db  0x00 ; '.'
0000000000000a3c         db  0x00 ; '.'
0000000000000a3d         db  0x00 ; '.'
0000000000000a3e         db  0x00 ; '.'
0000000000000a3f         db  0x00 ; '.'
0000000000000a40         db  0x04 ; '.'
0000000000000a41         db  0x00 ; '.'
0000000000000a42         db  0x00 ; '.'
0000000000000a43         db  0x00 ; '.'
0000000000000a44         db  0x00 ; '.'
0000000000000a45         db  0x00 ; '.'
0000000000000a46         db  0x00 ; '.'
0000000000000a47         db  0x00 ; '.'
0000000000000a48         db  0xca ; '.'
0000000000000a49         db  0x01 ; '.'
0000000000000a4a         db  0x00 ; '.'
0000000000000a4b         db  0x00 ; '.'
0000000000000a4c         db  0x11 ; '.'
0000000000000a4d         db  0x00 ; '.'
0000000000000a4e         db  0x19 ; '.'
0000000000000a4f         db  0x00 ; '.'
0000000000000a50         db  0x98 ; '.'
0000000000000a51         db  0x90 ; '.'
0000000000000a52         db  0x21 ; '!'
0000000000000a53         db  0x00 ; '.'
0000000000000a54         db  0x00 ; '.'
0000000000000a55         db  0x00 ; '.'
0000000000000a56         db  0x00 ; '.'
0000000000000a57         db  0x00 ; '.'
0000000000000a58         db  0x08 ; '.'
0000000000000a59         db  0x00 ; '.'
0000000000000a5a         db  0x00 ; '.'
0000000000000a5b         db  0x00 ; '.'
0000000000000a5c         db  0x00 ; '.'
0000000000000a5d         db  0x00 ; '.'
0000000000000a5e         db  0x00 ; '.'
0000000000000a5f         db  0x00 ; '.'


        ; Section .dynstr
        ; Range: [0xa60; 0xddc[ (892 bytes)
        ; File offset : [2656; 3548[ (892 bytes)
        ; Flags: 0x2
        ;   SHT_STRTAB
        ;   SHF_ALLOC

0000000000000a60         db  0x00 ; '.'
0000000000000a61         db  0x6c ; 'l'
0000000000000a62         db  0x69 ; 'i'
0000000000000a63         db  0x62 ; 'b'
0000000000000a64         db  0x63 ; 'c'
0000000000000a65         db  0x2e ; '.'
0000000000000a66         db  0x73 ; 's'
0000000000000a67         db  0x6f ; 'o'
0000000000000a68         db  0x2e ; '.'
0000000000000a69         db  0x36 ; '6'
0000000000000a6a         db  0x00 ; '.'
0000000000000a6b         db  0x66 ; 'f'
0000000000000a6c         db  0x66 ; 'f'
0000000000000a6d         db  0x6c ; 'l'
0000000000000a6e         db  0x75 ; 'u'
0000000000000a6f         db  0x73 ; 's'
0000000000000a70         db  0x68 ; 'h'
0000000000000a71         db  0x00 ; '.'
0000000000000a72         db  0x5f ; '_'
0000000000000a73         db  0x5f ; '_'
0000000000000a74         db  0x70 ; 'p'
0000000000000a75         db  0x72 ; 'r'
0000000000000a76         db  0x69 ; 'i'
0000000000000a77         db  0x6e ; 'n'
0000000000000a78         db  0x74 ; 't'
0000000000000a79         db  0x66 ; 'f'
0000000000000a7a         db  0x5f ; '_'
0000000000000a7b         db  0x63 ; 'c'
0000000000000a7c         db  0x68 ; 'h'
0000000000000a7d         db  0x6b ; 'k'
0000000000000a7e         db  0x00 ; '.'
0000000000000a7f         db  0x63 ; 'c'
0000000000000a80         db  0x6c ; 'l'
0000000000000a81         db  0x65 ; 'e'
0000000000000a82         db  0x61 ; 'a'
0000000000000a83         db  0x72 ; 'r'
0000000000000a84         db  0x65 ; 'e'
0000000000000a85         db  0x72 ; 'r'
0000000000000a86         db  0x72 ; 'r'
0000000000000a87         db  0x5f ; '_'
0000000000000a88         db  0x75 ; 'u'
0000000000000a89         db  0x6e ; 'n'
0000000000000a8a         db  0x6c ; 'l'
0000000000000a8b         db  0x6f ; 'o'
0000000000000a8c         db  0x63 ; 'c'
0000000000000a8d         db  0x6b ; 'k'
0000000000000a8e         db  0x65 ; 'e'
0000000000000a8f         db  0x64 ; 'd'
0000000000000a90         db  0x00 ; '.'
0000000000000a91         db  0x73 ; 's'
0000000000000a92         db  0x65 ; 'e'
0000000000000a93         db  0x74 ; 't'
0000000000000a94         db  0x6c ; 'l'
0000000000000a95         db  0x6f ; 'o'
0000000000000a96         db  0x63 ; 'c'
0000000000000a97         db  0x61 ; 'a'
0000000000000a98         db  0x6c ; 'l'
0000000000000a99         db  0x65 ; 'e'
0000000000000a9a         db  0x00 ; '.'
0000000000000a9b         db  0x6d ; 'm'
0000000000000a9c         db  0x62 ; 'b'
0000000000000a9d         db  0x72 ; 'r'
0000000000000a9e         db  0x74 ; 't'
0000000000000a9f         db  0x6f ; 'o'
0000000000000aa0         db  0x77 ; 'w'
0000000000000aa1         db  0x63 ; 'c'
0000000000000aa2         db  0x00 ; '.'
0000000000000aa3         db  0x74 ; 't'
0000000000000aa4         db  0x6f ; 'o'
0000000000000aa5         db  0x77 ; 'w'
0000000000000aa6         db  0x6c ; 'l'
0000000000000aa7         db  0x6f ; 'o'
0000000000000aa8         db  0x77 ; 'w'
0000000000000aa9         db  0x65 ; 'e'
0000000000000aaa         db  0x72 ; 'r'
0000000000000aab         db  0x00 ; '.'
0000000000000aac         db  0x73 ; 's'
0000000000000aad         db  0x74 ; 't'
0000000000000aae         db  0x72 ; 'r'
0000000000000aaf         db  0x6e ; 'n'
0000000000000ab0         db  0x63 ; 'c'
0000000000000ab1         db  0x6d ; 'm'
0000000000000ab2         db  0x70 ; 'p'
0000000000000ab3         db  0x00 ; '.'
0000000000000ab4         db  0x66 ; 'f'
0000000000000ab5         db  0x74 ; 't'
0000000000000ab6         db  0x72 ; 'r'
0000000000000ab7         db  0x75 ; 'u'
0000000000000ab8         db  0x6e ; 'n'
0000000000000ab9         db  0x63 ; 'c'
0000000000000aba         db  0x61 ; 'a'
0000000000000abb         db  0x74 ; 't'
0000000000000abc         db  0x65 ; 'e'
0000000000000abd         db  0x00 ; '.'
0000000000000abe         db  0x6f ; 'o'
0000000000000abf         db  0x70 ; 'p'
0000000000000ac0         db  0x74 ; 't'
0000000000000ac1         db  0x69 ; 'i'
0000000000000ac2         db  0x6e ; 'n'
0000000000000ac3         db  0x64 ; 'd'
0000000000000ac4         db  0x00 ; '.'
0000000000000ac5         db  0x73 ; 's'
0000000000000ac6         db  0x74 ; 't'
0000000000000ac7         db  0x72 ; 'r'
0000000000000ac8         db  0x72 ; 'r'
0000000000000ac9         db  0x63 ; 'c'
0000000000000aca         db  0x68 ; 'h'
0000000000000acb         db  0x72 ; 'r'
0000000000000acc         db  0x00 ; '.'
0000000000000acd         db  0x66 ; 'f'
0000000000000ace         db  0x66 ; 'f'
0000000000000acf         db  0x6c ; 'l'
0000000000000ad0         db  0x75 ; 'u'
0000000000000ad1         db  0x73 ; 's'
0000000000000ad2         db  0x68 ; 'h'
0000000000000ad3         db  0x5f ; '_'
0000000000000ad4         db  0x75 ; 'u'
0000000000000ad5         db  0x6e ; 'n'
0000000000000ad6         db  0x6c ; 'l'
0000000000000ad7         db  0x6f ; 'o'
0000000000000ad8         db  0x63 ; 'c'
0000000000000ad9         db  0x6b ; 'k'
0000000000000ada         db  0x65 ; 'e'
0000000000000adb         db  0x64 ; 'd'
0000000000000adc         db  0x00 ; '.'
0000000000000add         db  0x64 ; 'd'
0000000000000ade         db  0x63 ; 'c'
0000000000000adf         db  0x67 ; 'g'
0000000000000ae0         db  0x65 ; 'e'
0000000000000ae1         db  0x74 ; 't'
0000000000000ae2         db  0x74 ; 't'
0000000000000ae3         db  0x65 ; 'e'
0000000000000ae4         db  0x78 ; 'x'
0000000000000ae5         db  0x74 ; 't'
0000000000000ae6         db  0x00 ; '.'
0000000000000ae7         db  0x77 ; 'w'
0000000000000ae8         db  0x63 ; 'c'
0000000000000ae9         db  0x72 ; 'r'
0000000000000aea         db  0x74 ; 't'
0000000000000aeb         db  0x6f ; 'o'
0000000000000aec         db  0x6d ; 'm'
0000000000000aed         db  0x62 ; 'b'
0000000000000aee         db  0x00 ; '.'
0000000000000aef         db  0x65 ; 'e'
0000000000000af0         db  0x72 ; 'r'
0000000000000af1         db  0x72 ; 'r'
0000000000000af2         db  0x6f ; 'o'
0000000000000af3         db  0x72 ; 'r'
0000000000000af4         db  0x00 ; '.'
0000000000000af5         db  0x5f ; '_'
0000000000000af6         db  0x5f ; '_'
0000000000000af7         db  0x73 ; 's'
0000000000000af8         db  0x74 ; 't'
0000000000000af9         db  0x61 ; 'a'
0000000000000afa         db  0x63 ; 'c'
0000000000000afb         db  0x6b ; 'k'
0000000000000afc         db  0x5f ; '_'
0000000000000afd         db  0x63 ; 'c'
0000000000000afe         db  0x68 ; 'h'
0000000000000aff         db  0x6b ; 'k'
                     aFail:
0000000000000b00         db         "_fail", 0
0000000000000b06         db  0x75 ; 'u'
0000000000000b07         db  0x6e ; 'n'
0000000000000b08         db  0x6c ; 'l'
0000000000000b09         db  0x69 ; 'i'
0000000000000b0a         db  0x6e ; 'n'
0000000000000b0b         db  0x6b ; 'k'
0000000000000b0c         db  0x00 ; '.'
0000000000000b0d         db  0x69 ; 'i'
0000000000000b0e         db  0x73 ; 's'
0000000000000b0f         db  0x77 ; 'w'
0000000000000b10         db  0x70 ; 'p'
0000000000000b11         db  0x72 ; 'r'
0000000000000b12         db  0x69 ; 'i'
0000000000000b13         db  0x6e ; 'n'
0000000000000b14         db  0x74 ; 't'
0000000000000b15         db  0x00 ; '.'
0000000000000b16         db  0x72 ; 'r'
0000000000000b17         db  0x65 ; 'e'
0000000000000b18         db  0x61 ; 'a'
0000000000000b19         db  0x6c ; 'l'
0000000000000b1a         db  0x6c ; 'l'
0000000000000b1b         db  0x6f ; 'o'
0000000000000b1c         db  0x63 ; 'c'
0000000000000b1d         db  0x00 ; '.'
0000000000000b1e         db  0x62 ; 'b'
0000000000000b1f         db  0x74 ; 't'
0000000000000b20         db  0x6f ; 'o'
0000000000000b21         db  0x77 ; 'w'
0000000000000b22         db  0x63 ; 'c'
0000000000000b23         db  0x00 ; '.'
0000000000000b24         db  0x74 ; 't'
0000000000000b25         db  0x6f ; 'o'
0000000000000b26         db  0x77 ; 'w'
0000000000000b27         db  0x75 ; 'u'
0000000000000b28         db  0x70 ; 'p'
0000000000000b29         db  0x70 ; 'p'
0000000000000b2a         db  0x65 ; 'e'
0000000000000b2b         db  0x72 ; 'r'
0000000000000b2c         db  0x00 ; '.'
0000000000000b2d         db  0x61 ; 'a'
0000000000000b2e         db  0x62 ; 'b'
0000000000000b2f         db  0x6f ; 'o'
0000000000000b30         db  0x72 ; 'r'
0000000000000b31         db  0x74 ; 't'
0000000000000b32         db  0x00 ; '.'
0000000000000b33         db  0x5f ; '_'
0000000000000b34         db  0x65 ; 'e'
0000000000000b35         db  0x78 ; 'x'
0000000000000b36         db  0x69 ; 'i'
0000000000000b37         db  0x74 ; 't'
0000000000000b38         db  0x00 ; '.'
0000000000000b39         db  0x70 ; 'p'
0000000000000b3a         db  0x72 ; 'r'
0000000000000b3b         db  0x6f ; 'o'
0000000000000b3c         db  0x67 ; 'g'
0000000000000b3d         db  0x72 ; 'r'
0000000000000b3e         db  0x61 ; 'a'
0000000000000b3f         db  0x6d ; 'm'
0000000000000b40         db  0x5f ; '_'
                     aInvocationname:
0000000000000b41         db         "invocation_name", 0
0000000000000b51         db  0x5f ; '_'
0000000000000b52         db  0x5f ; '_'
0000000000000b53         db  0x61 ; 'a'
0000000000000b54         db  0x73 ; 's'
0000000000000b55         db  0x73 ; 's'
0000000000000b56         db  0x65 ; 'e'
0000000000000b57         db  0x72 ; 'r'
0000000000000b58         db  0x74 ; 't'
0000000000000b59         db  0x5f ; '_'
0000000000000b5a         db  0x66 ; 'f'
0000000000000b5b         db  0x61 ; 'a'
0000000000000b5c         db  0x69 ; 'i'
0000000000000b5d         db  0x6c ; 'l'
0000000000000b5e         db  0x00 ; '.'
0000000000000b5f         db  0x69 ; 'i'
0000000000000b60         db  0x73 ; 's'
0000000000000b61         db  0x77 ; 'w'
0000000000000b62         db  0x61 ; 'a'
0000000000000b63         db  0x6c ; 'l'
0000000000000b64         db  0x6e ; 'n'
0000000000000b65         db  0x75 ; 'u'
0000000000000b66         db  0x6d ; 'm'
0000000000000b67         db  0x00 ; '.'
0000000000000b68         db  0x6d ; 'm'
0000000000000b69         db  0x6b ; 'k'
0000000000000b6a         db  0x73 ; 's'
0000000000000b6b         db  0x74 ; 't'
0000000000000b6c         db  0x65 ; 'e'
0000000000000b6d         db  0x6d ; 'm'
0000000000000b6e         db  0x70 ; 'p'
0000000000000b6f         db  0x00 ; '.'
0000000000000b70         db  0x5f ; '_'
0000000000000b71         db  0x5f ; '_'
0000000000000b72         db  0x63 ; 'c'
0000000000000b73         db  0x74 ; 't'
0000000000000b74         db  0x79 ; 'y'
0000000000000b75         db  0x70 ; 'p'
0000000000000b76         db  0x65 ; 'e'
0000000000000b77         db  0x5f ; '_'
0000000000000b78         db  0x67 ; 'g'
0000000000000b79         db  0x65 ; 'e'
0000000000000b7a         db  0x74 ; 't'
0000000000000b7b         db  0x5f ; '_'
0000000000000b7c         db  0x6d ; 'm'
0000000000000b7d         db  0x62 ; 'b'
0000000000000b7e         db  0x5f ; '_'
0000000000000b7f         db  0x63 ; 'c'
0000000000000b80         db  0x75 ; 'u'
0000000000000b81         db  0x72 ; 'r'
0000000000000b82         db  0x5f ; '_'
0000000000000b83         db  0x6d ; 'm'
0000000000000b84         db  0x61 ; 'a'
0000000000000b85         db  0x78 ; 'x'
0000000000000b86         db  0x00 ; '.'
0000000000000b87         db  0x69 ; 'i'
0000000000000b88         db  0x73 ; 's'
0000000000000b89         db  0x61 ; 'a'
0000000000000b8a         db  0x74 ; 't'
0000000000000b8b         db  0x74 ; 't'
0000000000000b8c         db  0x79 ; 'y'
0000000000000b8d         db  0x00 ; '.'
0000000000000b8e         db  0x63 ; 'c'
0000000000000b8f         db  0x61 ; 'a'
0000000000000b90         db  0x6c ; 'l'
0000000000000b91         db  0x6c ; 'l'
0000000000000b92         db  0x6f ; 'o'
0000000000000b93         db  0x63 ; 'c'
0000000000000b94         db  0x00 ; '.'
0000000000000b95         db  0x73 ; 's'
0000000000000b96         db  0x74 ; 't'
0000000000000b97         db  0x72 ; 'r'
0000000000000b98         db  0x6c ; 'l'
0000000000000b99         db  0x65 ; 'e'
0000000000000b9a         db  0x6e ; 'n'
0000000000000b9b         db  0x00 ; '.'
0000000000000b9c         db  0x69 ; 'i'
0000000000000b9d         db  0x73 ; 's'
0000000000000b9e         db  0x77 ; 'w'
0000000000000b9f         db  0x63 ; 'c'
0000000000000ba0         db  0x74 ; 't'
0000000000000ba1         db  0x79 ; 'y'
0000000000000ba2         db  0x70 ; 'p'
0000000000000ba3         db  0x65 ; 'e'
0000000000000ba4         db  0x00 ; '.'
0000000000000ba5         db  0x6d ; 'm'
0000000000000ba6         db  0x65 ; 'e'
0000000000000ba7         db  0x6d ; 'm'
0000000000000ba8         db  0x73 ; 's'
0000000000000ba9         db  0x65 ; 'e'
0000000000000baa         db  0x74 ; 't'
0000000000000bab         db  0x00 ; '.'
0000000000000bac         db  0x5f ; '_'
0000000000000bad         db  0x5f ; '_'
0000000000000bae         db  0x65 ; 'e'
0000000000000baf         db  0x72 ; 'r'
0000000000000bb0         db  0x72 ; 'r'
0000000000000bb1         db  0x6e ; 'n'
0000000000000bb2         db  0x6f ; 'o'
0000000000000bb3         db  0x5f ; '_'
0000000000000bb4         db  0x6c ; 'l'
0000000000000bb5         db  0x6f ; 'o'
0000000000000bb6         db  0x63 ; 'c'
0000000000000bb7         db  0x61 ; 'a'
0000000000000bb8         db  0x74 ; 't'
0000000000000bb9         db  0x69 ; 'i'
0000000000000bba         db  0x6f ; 'o'
0000000000000bbb         db  0x6e ; 'n'
0000000000000bbc         db  0x00 ; '.'
0000000000000bbd         db  0x72 ; 'r'
0000000000000bbe         db  0x65 ; 'e'
0000000000000bbf         db  0x61 ; 'a'
0000000000000bc0         db  0x64 ; 'd'
0000000000000bc1         db  0x00 ; '.'
0000000000000bc2         db  0x6d ; 'm'
0000000000000bc3         db  0x65 ; 'e'
0000000000000bc4         db  0x6d ; 'm'
0000000000000bc5         db  0x63 ; 'c'
0000000000000bc6         db  0x6d ; 'm'
0000000000000bc7         db  0x70 ; 'p'
0000000000000bc8         db  0x00 ; '.'
0000000000000bc9         db  0x6d ; 'm'
0000000000000bca         db  0x65 ; 'e'
0000000000000bcb         db  0x6d ; 'm'
0000000000000bcc         db  0x70 ; 'p'
0000000000000bcd         db  0x63 ; 'c'
0000000000000bce         db  0x70 ; 'p'
0000000000000bcf         db  0x79 ; 'y'
0000000000000bd0         db  0x00 ; '.'
0000000000000bd1         db  0x5f ; '_'
0000000000000bd2         db  0x5f ; '_'
0000000000000bd3         db  0x66 ; 'f'
0000000000000bd4         db  0x70 ; 'p'
0000000000000bd5         db  0x72 ; 'r'
0000000000000bd6         db  0x69 ; 'i'
0000000000000bd7         db  0x6e ; 'n'
0000000000000bd8         db  0x74 ; 't'
0000000000000bd9         db  0x66 ; 'f'
0000000000000bda         db  0x5f ; '_'
0000000000000bdb         db  0x63 ; 'c'
0000000000000bdc         db  0x68 ; 'h'
0000000000000bdd         db  0x6b ; 'k'
0000000000000bde         db  0x00 ; '.'
0000000000000bdf         db  0x73 ; 's'
0000000000000be0         db  0x74 ; 't'
0000000000000be1         db  0x64 ; 'd'
0000000000000be2         db  0x6f ; 'o'
0000000000000be3         db  0x75 ; 'u'
0000000000000be4         db  0x74 ; 't'
0000000000000be5         db  0x00 ; '.'
0000000000000be6         db  0x6c ; 'l'
0000000000000be7         db  0x73 ; 's'
0000000000000be8         db  0x65 ; 'e'
0000000000000be9         db  0x65 ; 'e'
0000000000000bea         db  0x6b ; 'k'
0000000000000beb         db  0x00 ; '.'
0000000000000bec         db  0x6d ; 'm'
0000000000000bed         db  0x65 ; 'e'
0000000000000bee         db  0x6d ; 'm'
0000000000000bef         db  0x63 ; 'c'
0000000000000bf0         db  0x70 ; 'p'
0000000000000bf1         db  0x79 ; 'y'
0000000000000bf2         db  0x00 ; '.'
0000000000000bf3         db  0x66 ; 'f'
0000000000000bf4         db  0x63 ; 'c'
0000000000000bf5         db  0x6c ; 'l'
0000000000000bf6         db  0x6f ; 'o'
0000000000000bf7         db  0x73 ; 's'
0000000000000bf8         db  0x65 ; 'e'
0000000000000bf9         db  0x00 ; '.'
0000000000000bfa         db  0x6d ; 'm'
0000000000000bfb         db  0x61 ; 'a'
0000000000000bfc         db  0x6c ; 'l'
0000000000000bfd         db  0x6c ; 'l'
0000000000000bfe         db  0x6f ; 'o'
0000000000000bff         db  0x63 ; 'c'
0000000000000c00         db  0x00 ; '.'
0000000000000c01         db  0x6d ; 'm'
0000000000000c02         db  0x62 ; 'b'
0000000000000c03         db  0x73 ; 's'
0000000000000c04         db  0x69 ; 'i'
0000000000000c05         db  0x6e ; 'n'
0000000000000c06         db  0x69 ; 'i'
0000000000000c07         db  0x74 ; 't'
0000000000000c08         db  0x00 ; '.'
0000000000000c09         db  0x6e ; 'n'
0000000000000c0a         db  0x6c ; 'l'
0000000000000c0b         db  0x5f ; '_'
0000000000000c0c         db  0x6c ; 'l'
0000000000000c0d         db  0x61 ; 'a'
0000000000000c0e         db  0x6e ; 'n'
0000000000000c0f         db  0x67 ; 'g'
0000000000000c10         db  0x69 ; 'i'
0000000000000c11         db  0x6e ; 'n'
0000000000000c12         db  0x66 ; 'f'
0000000000000c13         db  0x6f ; 'o'
0000000000000c14         db  0x00 ; '.'
0000000000000c15         db  0x5f ; '_'
0000000000000c16         db  0x5f ; '_'
0000000000000c17         db  0x63 ; 'c'
0000000000000c18         db  0x74 ; 't'
0000000000000c19         db  0x79 ; 'y'
0000000000000c1a         db  0x70 ; 'p'
0000000000000c1b         db  0x65 ; 'e'
0000000000000c1c         db  0x5f ; '_'
0000000000000c1d         db  0x62 ; 'b'
0000000000000c1e         db  0x5f ; '_'
0000000000000c1f         db  0x6c ; 'l'
0000000000000c20         db  0x6f ; 'o'
0000000000000c21         db  0x63 ; 'c'
0000000000000c22         db  0x00 ; '.'
0000000000000c23         db  0x67 ; 'g'
0000000000000c24         db  0x65 ; 'e'
0000000000000c25         db  0x74 ; 't'
0000000000000c26         db  0x65 ; 'e'
0000000000000c27         db  0x6e ; 'n'
0000000000000c28         db  0x76 ; 'v'
0000000000000c29         db  0x00 ; '.'
0000000000000c2a         db  0x6f ; 'o'
0000000000000c2b         db  0x70 ; 'p'
0000000000000c2c         db  0x74 ; 't'
0000000000000c2d         db  0x61 ; 'a'
0000000000000c2e         db  0x72 ; 'r'
0000000000000c2f         db  0x67 ; 'g'
0000000000000c30         db  0x00 ; '.'
0000000000000c31         db  0x5f ; '_'
0000000000000c32         db  0x5f ; '_'
0000000000000c33         db  0x66 ; 'f'
0000000000000c34         db  0x72 ; 'r'
0000000000000c35         db  0x65 ; 'e'
0000000000000c36         db  0x61 ; 'a'
0000000000000c37         db  0x64 ; 'd'
0000000000000c38         db  0x69 ; 'i'
0000000000000c39         db  0x6e ; 'n'
0000000000000c3a         db  0x67 ; 'g'
0000000000000c3b         db  0x00 ; '.'
0000000000000c3c         db  0x73 ; 's'
0000000000000c3d         db  0x74 ; 't'
0000000000000c3e         db  0x64 ; 'd'
0000000000000c3f         db  0x65 ; 'e'
0000000000000c40         db  0x72 ; 'r'
0000000000000c41         db  0x72 ; 'r'
0000000000000c42         db  0x00 ; '.'
0000000000000c43         db  0x67 ; 'g'
0000000000000c44         db  0x65 ; 'e'
0000000000000c45         db  0x74 ; 't'
0000000000000c46         db  0x6f ; 'o'
0000000000000c47         db  0x70 ; 'p'
0000000000000c48         db  0x74 ; 't'
0000000000000c49         db  0x5f ; '_'
0000000000000c4a         db  0x6c ; 'l'
0000000000000c4b         db  0x6f ; 'o'
0000000000000c4c         db  0x6e ; 'n'
0000000000000c4d         db  0x67 ; 'g'
0000000000000c4e         db  0x00 ; '.'
0000000000000c4f         db  0x66 ; 'f'
0000000000000c50         db  0x69 ; 'i'
0000000000000c51         db  0x6c ; 'l'
0000000000000c52         db  0x65 ; 'e'
0000000000000c53         db  0x6e ; 'n'
0000000000000c54         db  0x6f ; 'o'
0000000000000c55         db  0x00 ; '.'
0000000000000c56         db  0x66 ; 'f'
0000000000000c57         db  0x77 ; 'w'
0000000000000c58         db  0x72 ; 'r'
0000000000000c59         db  0x69 ; 'i'
0000000000000c5a         db  0x74 ; 't'
0000000000000c5b         db  0x65 ; 'e'
0000000000000c5c         db  0x00 ; '.'
0000000000000c5d         db  0x5f ; '_'
0000000000000c5e         db  0x5f ; '_'
0000000000000c5f         db  0x66 ; 'f'
0000000000000c60         db  0x70 ; 'p'
0000000000000c61         db  0x65 ; 'e'
0000000000000c62         db  0x6e ; 'n'
0000000000000c63         db  0x64 ; 'd'
0000000000000c64         db  0x69 ; 'i'
0000000000000c65         db  0x6e ; 'n'
0000000000000c66         db  0x67 ; 'g'
0000000000000c67         db  0x00 ; '.'
0000000000000c68         db  0x70 ; 'p'
0000000000000c69         db  0x72 ; 'r'
0000000000000c6a         db  0x6f ; 'o'
0000000000000c6b         db  0x67 ; 'g'
0000000000000c6c         db  0x72 ; 'r'
0000000000000c6d         db  0x61 ; 'a'
0000000000000c6e         db  0x6d ; 'm'
0000000000000c6f         db  0x5f ; '_'
0000000000000c70         db  0x69 ; 'i'
0000000000000c71         db  0x6e ; 'n'
0000000000000c72         db  0x76 ; 'v'
0000000000000c73         db  0x6f ; 'o'
0000000000000c74         db  0x63 ; 'c'
0000000000000c75         db  0x61 ; 'a'
0000000000000c76         db  0x74 ; 't'
0000000000000c77         db  0x69 ; 'i'
0000000000000c78         db  0x6f ; 'o'
0000000000000c79         db  0x6e ; 'n'
0000000000000c7a         db  0x5f ; '_'
0000000000000c7b         db  0x73 ; 's'
0000000000000c7c         db  0x68 ; 'h'
0000000000000c7d         db  0x6f ; 'o'
0000000000000c7e         db  0x72 ; 'r'
0000000000000c7f         db  0x74 ; 't'
0000000000000c80         db  0x5f ; '_'
0000000000000c81         db  0x6e ; 'n'
0000000000000c82         db  0x61 ; 'a'
0000000000000c83         db  0x6d ; 'm'
0000000000000c84         db  0x65 ; 'e'
0000000000000c85         db  0x00 ; '.'
0000000000000c86         db  0x66 ; 'f'
0000000000000c87         db  0x64 ; 'd'
0000000000000c88         db  0x6f ; 'o'
0000000000000c89         db  0x70 ; 'p'
0000000000000c8a         db  0x65 ; 'e'
0000000000000c8b         db  0x6e ; 'n'
0000000000000c8c         db  0x00 ; '.'
0000000000000c8d         db  0x5f ; '_'
0000000000000c8e         db  0x5f ; '_'
0000000000000c8f         db  0x63 ; 'c'
0000000000000c90         db  0x74 ; 't'
0000000000000c91         db  0x79 ; 'y'
0000000000000c92         db  0x70 ; 'p'
0000000000000c93         db  0x65 ; 'e'
0000000000000c94         db  0x5f ; '_'
0000000000000c95         db  0x74 ; 't'
0000000000000c96         db  0x6f ; 'o'
0000000000000c97         db  0x75 ; 'u'
0000000000000c98         db  0x70 ; 'p'
0000000000000c99         db  0x70 ; 'p'
0000000000000c9a         db  0x65 ; 'e'
0000000000000c9b         db  0x72 ; 'r'
0000000000000c9c         db  0x5f ; '_'
0000000000000c9d         db  0x6c ; 'l'
0000000000000c9e         db  0x6f ; 'o'
0000000000000c9f         db  0x63 ; 'c'
0000000000000ca0         db  0x00 ; '.'
0000000000000ca1         db  0x5f ; '_'
0000000000000ca2         db  0x5f ; '_'
0000000000000ca3         db  0x63 ; 'c'
0000000000000ca4         db  0x74 ; 't'
0000000000000ca5         db  0x79 ; 'y'
0000000000000ca6         db  0x70 ; 'p'
0000000000000ca7         db  0x65 ; 'e'
0000000000000ca8         db  0x5f ; '_'
0000000000000ca9         db  0x74 ; 't'
0000000000000caa         db  0x6f ; 'o'
0000000000000cab         db  0x6c ; 'l'
0000000000000cac         db  0x6f ; 'o'
0000000000000cad         db  0x77 ; 'w'
0000000000000cae         db  0x65 ; 'e'
0000000000000caf         db  0x72 ; 'r'
0000000000000cb0         db  0x5f ; '_'
0000000000000cb1         db  0x6c ; 'l'
0000000000000cb2         db  0x6f ; 'o'
0000000000000cb3         db  0x63 ; 'c'
0000000000000cb4         db  0x00 ; '.'
0000000000000cb5         db  0x5f ; '_'
0000000000000cb6         db  0x5f ; '_'
0000000000000cb7         db  0x63 ; 'c'
0000000000000cb8         db  0x78 ; 'x'
0000000000000cb9         db  0x61 ; 'a'
0000000000000cba         db  0x5f ; '_'
0000000000000cbb         db  0x66 ; 'f'
0000000000000cbc         db  0x69 ; 'i'
0000000000000cbd         db  0x6e ; 'n'
0000000000000cbe         db  0x61 ; 'a'
0000000000000cbf         db  0x6c ; 'l'
0000000000000cc0         db  0x69 ; 'i'
0000000000000cc1         db  0x7a ; 'z'
0000000000000cc2         db  0x65 ; 'e'
0000000000000cc3         db  0x00 ; '.'
0000000000000cc4         db  0x66 ; 'f'
0000000000000cc5         db  0x63 ; 'c'
0000000000000cc6         db  0x6e ; 'n'
0000000000000cc7         db  0x74 ; 't'
0000000000000cc8         db  0x6c ; 'l'
0000000000000cc9         db  0x00 ; '.'
0000000000000cca         db  0x6d ; 'm'
0000000000000ccb         db  0x65 ; 'e'
0000000000000ccc         db  0x6d ; 'm'
0000000000000ccd         db  0x6d ; 'm'
0000000000000cce         db  0x6f ; 'o'
0000000000000ccf         db  0x76 ; 'v'
0000000000000cd0         db  0x65 ; 'e'
0000000000000cd1         db  0x00 ; '.'
0000000000000cd2         db  0x6d ; 'm'
0000000000000cd3         db  0x6b ; 'k'
0000000000000cd4         db  0x6f ; 'o'
0000000000000cd5         db  0x73 ; 's'
0000000000000cd6         db  0x74 ; 't'
0000000000000cd7         db  0x65 ; 'e'
0000000000000cd8         db  0x6d ; 'm'
0000000000000cd9         db  0x70 ; 'p'
0000000000000cda         db  0x00 ; '.'
0000000000000cdb         db  0x62 ; 'b'
0000000000000cdc         db  0x69 ; 'i'
0000000000000cdd         db  0x6e ; 'n'
0000000000000cde         db  0x64 ; 'd'
0000000000000cdf         db  0x74 ; 't'
0000000000000ce0         db  0x65 ; 'e'
0000000000000ce1         db  0x78 ; 'x'
0000000000000ce2         db  0x74 ; 't'
0000000000000ce3         db  0x64 ; 'd'
0000000000000ce4         db  0x6f ; 'o'
0000000000000ce5         db  0x6d ; 'm'
0000000000000ce6         db  0x61 ; 'a'
0000000000000ce7         db  0x69 ; 'i'
0000000000000ce8         db  0x6e ; 'n'
0000000000000ce9         db  0x00 ; '.'
0000000000000cea         db  0x66 ; 'f'
0000000000000ceb         db  0x77 ; 'w'
0000000000000cec         db  0x72 ; 'r'
                     aIteunlocked:
0000000000000ced         db         "ite_unlocked", 0                           ; DATA XREF=sub_10fe0+2831
0000000000000cfa         db  0x73 ; 's'
0000000000000cfb         db  0x74 ; 't'
0000000000000cfc         db  0x72 ; 'r'
0000000000000cfd         db  0x63 ; 'c'
0000000000000cfe         db  0x6d ; 'm'
0000000000000cff         db  0x70 ; 'p'
0000000000000d00         db  0x00 ; '.'
0000000000000d01         db  0x5f ; '_'
0000000000000d02         db  0x5f ; '_'
0000000000000d03         db  0x6c ; 'l'
0000000000000d04         db  0x69 ; 'i'
0000000000000d05         db  0x62 ; 'b'
0000000000000d06         db  0x63 ; 'c'
0000000000000d07         db  0x5f ; '_'
0000000000000d08         db  0x73 ; 's'
0000000000000d09         db  0x74 ; 't'
0000000000000d0a         db  0x61 ; 'a'
0000000000000d0b         db  0x72 ; 'r'
0000000000000d0c         db  0x74 ; 't'
0000000000000d0d         db  0x5f ; '_'
0000000000000d0e         db  0x6d ; 'm'
0000000000000d0f         db  0x61 ; 'a'
0000000000000d10         db  0x69 ; 'i'
0000000000000d11         db  0x6e ; 'n'
0000000000000d12         db  0x00 ; '.'
0000000000000d13         db  0x66 ; 'f'
0000000000000d14         db  0x73 ; 's'
0000000000000d15         db  0x65 ; 'e'
0000000000000d16         db  0x65 ; 'e'
0000000000000d17         db  0x6b ; 'k'
0000000000000d18         db  0x6f ; 'o'
0000000000000d19         db  0x00 ; '.'
0000000000000d1a         db  0x66 ; 'f'
0000000000000d1b         db  0x70 ; 'p'
0000000000000d1c         db  0x75 ; 'u'
0000000000000d1d         db  0x74 ; 't'
0000000000000d1e         db  0x73 ; 's'
0000000000000d1f         db  0x5f ; '_'
0000000000000d20         db  0x75 ; 'u'
0000000000000d21         db  0x6e ; 'n'
0000000000000d22         db  0x6c ; 'l'
0000000000000d23         db  0x6f ; 'o'
0000000000000d24         db  0x63 ; 'c'
0000000000000d25         db  0x6b ; 'k'
0000000000000d26         db  0x65 ; 'e'
0000000000000d27         db  0x64 ; 'd'
0000000000000d28         db  0x00 ; '.'
0000000000000d29         db  0x66 ; 'f'
0000000000000d2a         db  0x72 ; 'r'
0000000000000d2b         db  0x65 ; 'e'
0000000000000d2c         db  0x65 ; 'e'
0000000000000d2d         db  0x00 ; '.'
0000000000000d2e         db  0x5f ; '_'
0000000000000d2f         db  0x5f ; '_'
0000000000000d30         db  0x70 ; 'p'
0000000000000d31         db  0x72 ; 'r'
0000000000000d32         db  0x6f ; 'o'
0000000000000d33         db  0x67 ; 'g'
0000000000000d34         db  0x6e ; 'n'
0000000000000d35         db  0x61 ; 'a'
0000000000000d36         db  0x6d ; 'm'
0000000000000d37         db  0x65 ; 'e'
0000000000000d38         db  0x00 ; '.'
0000000000000d39         db  0x5f ; '_'
0000000000000d3a         db  0x5f ; '_'
0000000000000d3b         db  0x70 ; 'p'
0000000000000d3c         db  0x72 ; 'r'
0000000000000d3d         db  0x6f ; 'o'
0000000000000d3e         db  0x67 ; 'g'
0000000000000d3f         db  0x6e ; 'n'
0000000000000d40         db  0x61 ; 'a'
0000000000000d41         db  0x6d ; 'm'
0000000000000d42         db  0x65 ; 'e'
0000000000000d43         db  0x5f ; '_'
0000000000000d44         db  0x66 ; 'f'
0000000000000d45         db  0x75 ; 'u'
0000000000000d46         db  0x6c ; 'l'
0000000000000d47         db  0x6c ; 'l'
0000000000000d48         db  0x00 ; '.'
0000000000000d49         db  0x5f ; '_'
0000000000000d4a         db  0x5f ; '_'
0000000000000d4b         db  0x63 ; 'c'
0000000000000d4c         db  0x78 ; 'x'
0000000000000d4d         db  0x61 ; 'a'
0000000000000d4e         db  0x5f ; '_'
0000000000000d4f         db  0x61 ; 'a'
0000000000000d50         db  0x74 ; 't'
0000000000000d51         db  0x65 ; 'e'
0000000000000d52         db  0x78 ; 'x'
0000000000000d53         db  0x69 ; 'i'
0000000000000d54         db  0x74 ; 't'
0000000000000d55         db  0x00 ; '.'
0000000000000d56         db  0x47 ; 'G'
0000000000000d57         db  0x4c ; 'L'
0000000000000d58         db  0x49 ; 'I'
0000000000000d59         db  0x42 ; 'B'
0000000000000d5a         db  0x43 ; 'C'
0000000000000d5b         db  0x5f ; '_'
0000000000000d5c         db  0x32 ; '2'
0000000000000d5d         db  0x2e ; '.'
0000000000000d5e         db  0x33 ; '3'
0000000000000d5f         db  0x2e ; '.'
0000000000000d60         db  0x34 ; '4'
0000000000000d61         db  0x00 ; '.'
0000000000000d62         db  0x47 ; 'G'
0000000000000d63         db  0x4c ; 'L'
0000000000000d64         db  0x49 ; 'I'
0000000000000d65         db  0x42 ; 'B'
0000000000000d66         db  0x43 ; 'C'
0000000000000d67         db  0x5f ; '_'
0000000000000d68         db  0x32 ; '2'
0000000000000d69         db  0x2e ; '.'
0000000000000d6a         db  0x31 ; '1'
0000000000000d6b         db  0x34 ; '4'
0000000000000d6c         db  0x00 ; '.'
0000000000000d6d         db  0x47 ; 'G'
0000000000000d6e         db  0x4c ; 'L'
0000000000000d6f         db  0x49 ; 'I'
0000000000000d70         db  0x42 ; 'B'
0000000000000d71         db  0x43 ; 'C'
0000000000000d72         db  0x5f ; '_'
0000000000000d73         db  0x32 ; '2'
0000000000000d74         db  0x2e ; '.'
0000000000000d75         db  0x37 ; '7'
0000000000000d76         db  0x00 ; '.'
0000000000000d77         db  0x47 ; 'G'
0000000000000d78         db  0x4c ; 'L'
0000000000000d79         db  0x49 ; 'I'
0000000000000d7a         db  0x42 ; 'B'
0000000000000d7b         db  0x43 ; 'C'
0000000000000d7c         db  0x5f ; '_'
0000000000000d7d         db  0x32 ; '2'
0000000000000d7e         db  0x2e ; '.'
0000000000000d7f         db  0x34 ; '4'
0000000000000d80         db  0x00 ; '.'
0000000000000d81         db  0x47 ; 'G'
0000000000000d82         db  0x4c ; 'L'
0000000000000d83         db  0x49 ; 'I'
0000000000000d84         db  0x42 ; 'B'
0000000000000d85         db  0x43 ; 'C'
0000000000000d86         db  0x5f ; '_'
0000000000000d87         db  0x32 ; '2'
0000000000000d88         db  0x2e ; '.'
0000000000000d89         db  0x32 ; '2'
0000000000000d8a         db  0x2e ; '.'
0000000000000d8b         db  0x35 ; '5'
0000000000000d8c         db  0x00 ; '.'
0000000000000d8d         db  0x47 ; 'G'
0000000000000d8e         db  0x4c ; 'L'
0000000000000d8f         db  0x49 ; 'I'
0000000000000d90         db  0x42 ; 'B'
0000000000000d91         db  0x43 ; 'C'
0000000000000d92         db  0x5f ; '_'
0000000000000d93         db  0x32 ; '2'
0000000000000d94         db  0x2e ; '.'
0000000000000d95         db  0x33 ; '3'
0000000000000d96         db  0x00 ; '.'
0000000000000d97         db  0x5f ; '_'
0000000000000d98         db  0x49 ; 'I'
0000000000000d99         db  0x54 ; 'T'
0000000000000d9a         db  0x4d ; 'M'
0000000000000d9b         db  0x5f ; '_'
0000000000000d9c         db  0x64 ; 'd'
0000000000000d9d         db  0x65 ; 'e'
0000000000000d9e         db  0x72 ; 'r'
0000000000000d9f         db  0x65 ; 'e'
0000000000000da0         db  0x67 ; 'g'
0000000000000da1         db  0x69 ; 'i'
0000000000000da2         db  0x73 ; 's'
0000000000000da3         db  0x74 ; 't'
0000000000000da4         db  0x65 ; 'e'
0000000000000da5         db  0x72 ; 'r'
0000000000000da6         db  0x54 ; 'T'
0000000000000da7         db  0x4d ; 'M'
0000000000000da8         db  0x43 ; 'C'
0000000000000da9         db  0x6c ; 'l'
0000000000000daa         db  0x6f ; 'o'
0000000000000dab         db  0x6e ; 'n'
0000000000000dac         db  0x65 ; 'e'
0000000000000dad         db  0x54 ; 'T'
0000000000000dae         db  0x61 ; 'a'
0000000000000daf         db  0x62 ; 'b'
0000000000000db0         db  0x6c ; 'l'
0000000000000db1         db  0x65 ; 'e'
0000000000000db2         db  0x00 ; '.'
0000000000000db3         db  0x5f ; '_'
0000000000000db4         db  0x5f ; '_'
0000000000000db5         db  0x67 ; 'g'
0000000000000db6         db  0x6d ; 'm'
0000000000000db7         db  0x6f ; 'o'
0000000000000db8         db  0x6e ; 'n'
0000000000000db9         db  0x5f ; '_'
0000000000000dba         db  0x73 ; 's'
0000000000000dbb         db  0x74 ; 't'
0000000000000dbc         db  0x61 ; 'a'
0000000000000dbd         db  0x72 ; 'r'
0000000000000dbe         db  0x74 ; 't'
0000000000000dbf         db  0x5f ; '_'
0000000000000dc0         db  0x5f ; '_'
0000000000000dc1         db  0x00 ; '.'
0000000000000dc2         db  0x5f ; '_'
0000000000000dc3         db  0x49 ; 'I'
0000000000000dc4         db  0x54 ; 'T'
0000000000000dc5         db  0x4d ; 'M'
0000000000000dc6         db  0x5f ; '_'
0000000000000dc7         db  0x72 ; 'r'
0000000000000dc8         db  0x65 ; 'e'
0000000000000dc9         db  0x67 ; 'g'
0000000000000dca         db  0x69 ; 'i'
0000000000000dcb         db  0x73 ; 's'
0000000000000dcc         db  0x74 ; 't'
0000000000000dcd         db  0x65 ; 'e'
0000000000000dce         db  0x72 ; 'r'
0000000000000dcf         db  0x54 ; 'T'
0000000000000dd0         db  0x4d ; 'M'
0000000000000dd1         db  0x43 ; 'C'
0000000000000dd2         db  0x6c ; 'l'
0000000000000dd3         db  0x6f ; 'o'
0000000000000dd4         db  0x6e ; 'n'
0000000000000dd5         db  0x65 ; 'e'
0000000000000dd6         db  0x54 ; 'T'
0000000000000dd7         db  0x61 ; 'a'
0000000000000dd8         db  0x62 ; 'b'
0000000000000dd9         db  0x6c ; 'l'
0000000000000dda         db  0x65 ; 'e'
0000000000000ddb         db  0x00 ; '.'


        ; Section .gnu.version
        ; Range: [0xddc; 0xe7c[ (160 bytes)
        ; File offset : [3548; 3708[ (160 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000000ddc         db  0x00 ; '.'
0000000000000ddd         db  0x00 ; '.'
0000000000000dde         db  0x02 ; '.'
0000000000000ddf         db  0x00 ; '.'
0000000000000de0         db  0x03 ; '.'
0000000000000de1         db  0x00 ; '.'
0000000000000de2         db  0x03 ; '.'
0000000000000de3         db  0x00 ; '.'
0000000000000de4         db  0x03 ; '.'
0000000000000de5         db  0x00 ; '.'
0000000000000de6         db  0x03 ; '.'
0000000000000de7         db  0x00 ; '.'
0000000000000de8         db  0x03 ; '.'
0000000000000de9         db  0x00 ; '.'
0000000000000dea         db  0x03 ; '.'
0000000000000deb         db  0x00 ; '.'
0000000000000dec         db  0x00 ; '.'
0000000000000ded         db  0x00 ; '.'
0000000000000dee         db  0x03 ; '.'
0000000000000def         db  0x00 ; '.'
0000000000000df0         db  0x03 ; '.'
0000000000000df1         db  0x00 ; '.'
0000000000000df2         db  0x03 ; '.'
0000000000000df3         db  0x00 ; '.'
0000000000000df4         db  0x03 ; '.'
0000000000000df5         db  0x00 ; '.'
0000000000000df6         db  0x03 ; '.'
0000000000000df7         db  0x00 ; '.'
0000000000000df8         db  0x03 ; '.'
0000000000000df9         db  0x00 ; '.'
0000000000000dfa         db  0x03 ; '.'
0000000000000dfb         db  0x00 ; '.'
0000000000000dfc         db  0x03 ; '.'
0000000000000dfd         db  0x00 ; '.'
0000000000000dfe         db  0x03 ; '.'
0000000000000dff         db  0x00 ; '.'
0000000000000e00         db  0x03 ; '.'
0000000000000e01         db  0x00 ; '.'
0000000000000e02         db  0x03 ; '.'
0000000000000e03         db  0x00 ; '.'
0000000000000e04         db  0x03 ; '.'
0000000000000e05         db  0x00 ; '.'
0000000000000e06         db  0x04 ; '.'
0000000000000e07         db  0x00 ; '.'
0000000000000e08         db  0x03 ; '.'
0000000000000e09         db  0x00 ; '.'
0000000000000e0a         db  0x03 ; '.'
0000000000000e0b         db  0x00 ; '.'
0000000000000e0c         db  0x03 ; '.'
0000000000000e0d         db  0x00 ; '.'
0000000000000e0e         db  0x03 ; '.'
0000000000000e0f         db  0x00 ; '.'
0000000000000e10         db  0x05 ; '.'
0000000000000e11         db  0x00 ; '.'
0000000000000e12         db  0x03 ; '.'
0000000000000e13         db  0x00 ; '.'
0000000000000e14         db  0x03 ; '.'
0000000000000e15         db  0x00 ; '.'
0000000000000e16         db  0x03 ; '.'
0000000000000e17         db  0x00 ; '.'
0000000000000e18         db  0x03 ; '.'
0000000000000e19         db  0x00 ; '.'
0000000000000e1a         db  0x03 ; '.'
0000000000000e1b         db  0x00 ; '.'
0000000000000e1c         db  0x03 ; '.'
0000000000000e1d         db  0x00 ; '.'
0000000000000e1e         db  0x03 ; '.'
0000000000000e1f         db  0x00 ; '.'
0000000000000e20         db  0x03 ; '.'
0000000000000e21         db  0x00 ; '.'
0000000000000e22         db  0x03 ; '.'
0000000000000e23         db  0x00 ; '.'
0000000000000e24         db  0x03 ; '.'
0000000000000e25         db  0x00 ; '.'
0000000000000e26         db  0x03 ; '.'
0000000000000e27         db  0x00 ; '.'
0000000000000e28         db  0x00 ; '.'
0000000000000e29         db  0x00 ; '.'
0000000000000e2a         db  0x06 ; '.'
0000000000000e2b         db  0x00 ; '.'
0000000000000e2c         db  0x03 ; '.'
0000000000000e2d         db  0x00 ; '.'
0000000000000e2e         db  0x03 ; '.'
0000000000000e2f         db  0x00 ; '.'
0000000000000e30         db  0x03 ; '.'
0000000000000e31         db  0x00 ; '.'
0000000000000e32         db  0x03 ; '.'
0000000000000e33         db  0x00 ; '.'
0000000000000e34         db  0x03 ; '.'
0000000000000e35         db  0x00 ; '.'
0000000000000e36         db  0x03 ; '.'
0000000000000e37         db  0x00 ; '.'
0000000000000e38         db  0x03 ; '.'
0000000000000e39         db  0x00 ; '.'
0000000000000e3a         db  0x03 ; '.'
0000000000000e3b         db  0x00 ; '.'
0000000000000e3c         db  0x03 ; '.'
0000000000000e3d         db  0x00 ; '.'
0000000000000e3e         db  0x03 ; '.'
0000000000000e3f         db  0x00 ; '.'
0000000000000e40         db  0x03 ; '.'
0000000000000e41         db  0x00 ; '.'
0000000000000e42         db  0x03 ; '.'
0000000000000e43         db  0x00 ; '.'
0000000000000e44         db  0x07 ; '.'
0000000000000e45         db  0x00 ; '.'
0000000000000e46         db  0x03 ; '.'
0000000000000e47         db  0x00 ; '.'
0000000000000e48         db  0x03 ; '.'
0000000000000e49         db  0x00 ; '.'
0000000000000e4a         db  0x03 ; '.'
0000000000000e4b         db  0x00 ; '.'
0000000000000e4c         db  0x03 ; '.'
0000000000000e4d         db  0x00 ; '.'
0000000000000e4e         db  0x03 ; '.'
0000000000000e4f         db  0x00 ; '.'
0000000000000e50         db  0x03 ; '.'
0000000000000e51         db  0x00 ; '.'
0000000000000e52         db  0x03 ; '.'
0000000000000e53         db  0x00 ; '.'
0000000000000e54         db  0x03 ; '.'
0000000000000e55         db  0x00 ; '.'
0000000000000e56         db  0x03 ; '.'
0000000000000e57         db  0x00 ; '.'
0000000000000e58         db  0x03 ; '.'
0000000000000e59         db  0x00 ; '.'
0000000000000e5a         db  0x03 ; '.'
0000000000000e5b         db  0x00 ; '.'
0000000000000e5c         db  0x07 ; '.'
0000000000000e5d         db  0x00 ; '.'
0000000000000e5e         db  0x00 ; '.'
0000000000000e5f         db  0x00 ; '.'
0000000000000e60         db  0x03 ; '.'
0000000000000e61         db  0x00 ; '.'
0000000000000e62         db  0x03 ; '.'
0000000000000e63         db  0x00 ; '.'
0000000000000e64         db  0x03 ; '.'
0000000000000e65         db  0x00 ; '.'
0000000000000e66         db  0x03 ; '.'
0000000000000e67         db  0x00 ; '.'
0000000000000e68         db  0x02 ; '.'
0000000000000e69         db  0x00 ; '.'
0000000000000e6a         db  0x02 ; '.'
0000000000000e6b         db  0x00 ; '.'
0000000000000e6c         db  0x03 ; '.'
0000000000000e6d         db  0x00 ; '.'
0000000000000e6e         db  0x03 ; '.'
0000000000000e6f         db  0x00 ; '.'
0000000000000e70         db  0x03 ; '.'
0000000000000e71         db  0x00 ; '.'
0000000000000e72         db  0x03 ; '.'
0000000000000e73         db  0x00 ; '.'
0000000000000e74         db  0x03 ; '.'
0000000000000e75         db  0x00 ; '.'
0000000000000e76         db  0x03 ; '.'
0000000000000e77         db  0x00 ; '.'
0000000000000e78         db  0x03 ; '.'
0000000000000e79         db  0x00 ; '.'
0000000000000e7a         db  0x03 ; '.'
0000000000000e7b         db  0x00 ; '.'
0000000000000e7c         db  0x00 ; '.'
0000000000000e7d         db  0x00 ; '.'
0000000000000e7e         db  0x00 ; '.'
0000000000000e7f         db  0x00 ; '.'


        ; Section .gnu.version_r
        ; Range: [0xe80; 0xef0[ (112 bytes)
        ; File offset : [3712; 3824[ (112 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000000e80         db  0x01 ; '.'
0000000000000e81         db  0x00 ; '.'
0000000000000e82         db  0x06 ; '.'
0000000000000e83         db  0x00 ; '.'
0000000000000e84         db  0x01 ; '.'
0000000000000e85         db  0x00 ; '.'
0000000000000e86         db  0x00 ; '.'
0000000000000e87         db  0x00 ; '.'
0000000000000e88         db  0x10 ; '.'
0000000000000e89         db  0x00 ; '.'
0000000000000e8a         db  0x00 ; '.'
0000000000000e8b         db  0x00 ; '.'
0000000000000e8c         db  0x00 ; '.'
0000000000000e8d         db  0x00 ; '.'
0000000000000e8e         db  0x00 ; '.'
0000000000000e8f         db  0x00 ; '.'
0000000000000e90         db  0x74 ; 't'
0000000000000e91         db  0x19 ; '.'
0000000000000e92         db  0x69 ; 'i'
0000000000000e93         db  0x09 ; '.'
0000000000000e94         db  0x00 ; '.'
0000000000000e95         db  0x00 ; '.'
0000000000000e96         db  0x07 ; '.'
0000000000000e97         db  0x00 ; '.'
0000000000000e98         db  0xf6 ; '.'
0000000000000e99         db  0x02 ; '.'
0000000000000e9a         db  0x00 ; '.'
0000000000000e9b         db  0x00 ; '.'
0000000000000e9c         db  0x10 ; '.'
0000000000000e9d         db  0x00 ; '.'
0000000000000e9e         db  0x00 ; '.'
0000000000000e9f         db  0x00 ; '.'
0000000000000ea0         db  0x94 ; '.'
0000000000000ea1         db  0x91 ; '.'
0000000000000ea2         db  0x96 ; '.'
0000000000000ea3         db  0x06 ; '.'
0000000000000ea4         db  0x00 ; '.'
0000000000000ea5         db  0x00 ; '.'
0000000000000ea6         db  0x06 ; '.'
0000000000000ea7         db  0x00 ; '.'
0000000000000ea8         db  0x02 ; '.'
0000000000000ea9         db  0x03 ; '.'
0000000000000eaa         db  0x00 ; '.'
0000000000000eab         db  0x00 ; '.'
0000000000000eac         db  0x10 ; '.'
0000000000000ead         db  0x00 ; '.'
0000000000000eae         db  0x00 ; '.'
0000000000000eaf         db  0x00 ; '.'
0000000000000eb0         db  0x17 ; '.'
0000000000000eb1         db  0x69 ; 'i'
0000000000000eb2         db  0x69 ; 'i'
0000000000000eb3         db  0x0d ; '.'
0000000000000eb4         db  0x00 ; '.'
0000000000000eb5         db  0x00 ; '.'
0000000000000eb6         db  0x05 ; '.'
0000000000000eb7         db  0x00 ; '.'
0000000000000eb8         db  0x0d ; '.'
0000000000000eb9         db  0x03 ; '.'
0000000000000eba         db  0x00 ; '.'
0000000000000ebb         db  0x00 ; '.'
0000000000000ebc         db  0x10 ; '.'
0000000000000ebd         db  0x00 ; '.'
0000000000000ebe         db  0x00 ; '.'
0000000000000ebf         db  0x00 ; '.'
0000000000000ec0         db  0x14 ; '.'
0000000000000ec1         db  0x69 ; 'i'
0000000000000ec2         db  0x69 ; 'i'
0000000000000ec3         db  0x0d ; '.'
0000000000000ec4         db  0x00 ; '.'
0000000000000ec5         db  0x00 ; '.'
0000000000000ec6         db  0x04 ; '.'
0000000000000ec7         db  0x00 ; '.'
0000000000000ec8         db  0x17 ; '.'
0000000000000ec9         db  0x03 ; '.'
0000000000000eca         db  0x00 ; '.'
0000000000000ecb         db  0x00 ; '.'
0000000000000ecc         db  0x10 ; '.'
0000000000000ecd         db  0x00 ; '.'
0000000000000ece         db  0x00 ; '.'
0000000000000ecf         db  0x00 ; '.'
0000000000000ed0         db  0x75 ; 'u'
0000000000000ed1         db  0x1a ; '.'
0000000000000ed2         db  0x69 ; 'i'
0000000000000ed3         db  0x09 ; '.'
0000000000000ed4         db  0x00 ; '.'
0000000000000ed5         db  0x00 ; '.'
0000000000000ed6         db  0x03 ; '.'
0000000000000ed7         db  0x00 ; '.'
0000000000000ed8         db  0x21 ; '!'
0000000000000ed9         db  0x03 ; '.'
0000000000000eda         db  0x00 ; '.'
0000000000000edb         db  0x00 ; '.'
0000000000000edc         db  0x10 ; '.'
0000000000000edd         db  0x00 ; '.'
0000000000000ede         db  0x00 ; '.'
0000000000000edf         db  0x00 ; '.'
0000000000000ee0         db  0x13 ; '.'
0000000000000ee1         db  0x69 ; 'i'
0000000000000ee2         db  0x69 ; 'i'
0000000000000ee3         db  0x0d ; '.'
0000000000000ee4         db  0x00 ; '.'
0000000000000ee5         db  0x00 ; '.'
0000000000000ee6         db  0x02 ; '.'
0000000000000ee7         db  0x00 ; '.'
0000000000000ee8         db  0x2d ; '-'
0000000000000ee9         db  0x03 ; '.'
0000000000000eea         db  0x00 ; '.'
0000000000000eeb         db  0x00 ; '.'
0000000000000eec         db  0x00 ; '.'
0000000000000eed         db  0x00 ; '.'
0000000000000eee         db  0x00 ; '.'
0000000000000eef         db  0x00 ; '.'


        ; Section .rela.dyn
        ; Range: [0xef0; 0x1208[ (792 bytes)
        ; File offset : [3824; 4616[ (792 bytes)
        ; Flags: 0x2
        ;   SHT_RELA
        ;   SHF_ALLOC

0000000000000ef0         db  0x70 ; 'p'
0000000000000ef1         db  0x8a ; '.'
0000000000000ef2         db  0x21 ; '!'
0000000000000ef3         db  0x00 ; '.'
0000000000000ef4         db  0x00 ; '.'
0000000000000ef5         db  0x00 ; '.'
0000000000000ef6         db  0x00 ; '.'
0000000000000ef7         db  0x00 ; '.'
0000000000000ef8         db  0x08 ; '.'
0000000000000ef9         db  0x00 ; '.'
0000000000000efa         db  0x00 ; '.'
0000000000000efb         db  0x00 ; '.'
0000000000000efc         db  0x00 ; '.'
0000000000000efd         db  0x00 ; '.'
0000000000000efe         db  0x00 ; '.'
0000000000000eff         db  0x00 ; '.'
0000000000000f00         db  0x20 ; ' '
0000000000000f01         db  0x25 ; '%'
0000000000000f02         db  0x00 ; '.'
0000000000000f03         db  0x00 ; '.'
0000000000000f04         db  0x00 ; '.'
0000000000000f05         db  0x00 ; '.'
0000000000000f06         db  0x00 ; '.'
0000000000000f07         db  0x00 ; '.'
0000000000000f08         db  0x78 ; 'x'
0000000000000f09         db  0x8a ; '.'
0000000000000f0a         db  0x21 ; '!'
0000000000000f0b         db  0x00 ; '.'
0000000000000f0c         db  0x00 ; '.'
0000000000000f0d         db  0x00 ; '.'
0000000000000f0e         db  0x00 ; '.'
0000000000000f0f         db  0x00 ; '.'
0000000000000f10         db  0x08 ; '.'
0000000000000f11         db  0x00 ; '.'
0000000000000f12         db  0x00 ; '.'
0000000000000f13         db  0x00 ; '.'
0000000000000f14         db  0x00 ; '.'
0000000000000f15         db  0x00 ; '.'
0000000000000f16         db  0x00 ; '.'
0000000000000f17         db  0x00 ; '.'
0000000000000f18         db  0xe0 ; '.'
0000000000000f19         db  0x24 ; '$'
0000000000000f1a         db  0x00 ; '.'
0000000000000f1b         db  0x00 ; '.'
0000000000000f1c         db  0x00 ; '.'
0000000000000f1d         db  0x00 ; '.'
0000000000000f1e         db  0x00 ; '.'
0000000000000f1f         db  0x00 ; '.'
0000000000000f20         db  0x80 ; '.'
0000000000000f21         db  0x8a ; '.'
0000000000000f22         db  0x21 ; '!'
0000000000000f23         db  0x00 ; '.'
0000000000000f24         db  0x00 ; '.'
0000000000000f25         db  0x00 ; '.'
0000000000000f26         db  0x00 ; '.'
0000000000000f27         db  0x00 ; '.'
0000000000000f28         db  0x08 ; '.'
0000000000000f29         db  0x00 ; '.'
0000000000000f2a         db  0x00 ; '.'
0000000000000f2b         db  0x00 ; '.'
0000000000000f2c         db  0x00 ; '.'
0000000000000f2d         db  0x00 ; '.'
0000000000000f2e         db  0x00 ; '.'
0000000000000f2f         db  0x00 ; '.'
0000000000000f30         db  0xca ; '.'
0000000000000f31         db  0x46 ; 'F'
0000000000000f32         db  0x01 ; '.'
0000000000000f33         db  0x00 ; '.'
0000000000000f34         db  0x00 ; '.'
0000000000000f35         db  0x00 ; '.'
0000000000000f36         db  0x00 ; '.'
0000000000000f37         db  0x00 ; '.'
0000000000000f38         db  0xa0 ; '.'
0000000000000f39         db  0x8a ; '.'
0000000000000f3a         db  0x21 ; '!'
0000000000000f3b         db  0x00 ; '.'
0000000000000f3c         db  0x00 ; '.'
0000000000000f3d         db  0x00 ; '.'
0000000000000f3e         db  0x00 ; '.'
0000000000000f3f         db  0x00 ; '.'
0000000000000f40         db  0x08 ; '.'
0000000000000f41         db  0x00 ; '.'
0000000000000f42         db  0x00 ; '.'
0000000000000f43         db  0x00 ; '.'
0000000000000f44         db  0x00 ; '.'
0000000000000f45         db  0x00 ; '.'
0000000000000f46         db  0x00 ; '.'
0000000000000f47         db  0x00 ; '.'
0000000000000f48         db  0xe2 ; '.'
0000000000000f49         db  0x42 ; 'B'
0000000000000f4a         db  0x01 ; '.'
0000000000000f4b         db  0x00 ; '.'
0000000000000f4c         db  0x00 ; '.'
0000000000000f4d         db  0x00 ; '.'
0000000000000f4e         db  0x00 ; '.'
0000000000000f4f         db  0x00 ; '.'
0000000000000f50         db  0xc0 ; '.'
0000000000000f51         db  0x8a ; '.'
0000000000000f52         db  0x21 ; '!'
0000000000000f53         db  0x00 ; '.'
0000000000000f54         db  0x00 ; '.'
0000000000000f55         db  0x00 ; '.'
0000000000000f56         db  0x00 ; '.'
0000000000000f57         db  0x00 ; '.'
0000000000000f58         db  0x08 ; '.'
0000000000000f59         db  0x00 ; '.'
0000000000000f5a         db  0x00 ; '.'
0000000000000f5b         db  0x00 ; '.'
0000000000000f5c         db  0x00 ; '.'
0000000000000f5d         db  0x00 ; '.'
0000000000000f5e         db  0x00 ; '.'
0000000000000f5f         db  0x00 ; '.'
0000000000000f60         db  0xe9 ; '.'
0000000000000f61         db  0x42 ; 'B'
0000000000000f62         db  0x01 ; '.'
0000000000000f63         db  0x00 ; '.'
0000000000000f64         db  0x00 ; '.'
0000000000000f65         db  0x00 ; '.'
0000000000000f66         db  0x00 ; '.'
0000000000000f67         db  0x00 ; '.'
0000000000000f68         db  0xe0 ; '.'
0000000000000f69         db  0x8a ; '.'
0000000000000f6a         db  0x21 ; '!'
0000000000000f6b         db  0x00 ; '.'
0000000000000f6c         db  0x00 ; '.'
0000000000000f6d         db  0x00 ; '.'
0000000000000f6e         db  0x00 ; '.'
0000000000000f6f         db  0x00 ; '.'
0000000000000f70         db  0x08 ; '.'
0000000000000f71         db  0x00 ; '.'
0000000000000f72         db  0x00 ; '.'
0000000000000f73         db  0x00 ; '.'
0000000000000f74         db  0x00 ; '.'
0000000000000f75         db  0x00 ; '.'
0000000000000f76         db  0x00 ; '.'
0000000000000f77         db  0x00 ; '.'
0000000000000f78         db  0xef ; '.'
0000000000000f79         db  0x42 ; 'B'
0000000000000f7a         db  0x01 ; '.'
0000000000000f7b         db  0x00 ; '.'
0000000000000f7c         db  0x00 ; '.'
0000000000000f7d         db  0x00 ; '.'
0000000000000f7e         db  0x00 ; '.'
0000000000000f7f         db  0x00 ; '.'
0000000000000f80         db  0x00 ; '.'
0000000000000f81         db  0x8b ; '.'
0000000000000f82         db  0x21 ; '!'
0000000000000f83         db  0x00 ; '.'
0000000000000f84         db  0x00 ; '.'
0000000000000f85         db  0x00 ; '.'
0000000000000f86         db  0x00 ; '.'
0000000000000f87         db  0x00 ; '.'
0000000000000f88         db  0x08 ; '.'
0000000000000f89         db  0x00 ; '.'
0000000000000f8a         db  0x00 ; '.'
0000000000000f8b         db  0x00 ; '.'
0000000000000f8c         db  0x00 ; '.'
0000000000000f8d         db  0x00 ; '.'
0000000000000f8e         db  0x00 ; '.'
0000000000000f8f         db  0x00 ; '.'
0000000000000f90         db  0xf9 ; '.'
0000000000000f91         db  0x42 ; 'B'
0000000000000f92         db  0x01 ; '.'
0000000000000f93         db  0x00 ; '.'
0000000000000f94         db  0x00 ; '.'
0000000000000f95         db  0x00 ; '.'
0000000000000f96         db  0x00 ; '.'
0000000000000f97         db  0x00 ; '.'
0000000000000f98         db  0x20 ; ' '
0000000000000f99         db  0x8b ; '.'
0000000000000f9a         db  0x21 ; '!'
0000000000000f9b         db  0x00 ; '.'
0000000000000f9c         db  0x00 ; '.'
0000000000000f9d         db  0x00 ; '.'
0000000000000f9e         db  0x00 ; '.'
0000000000000f9f         db  0x00 ; '.'
0000000000000fa0         db  0x08 ; '.'
0000000000000fa1         db  0x00 ; '.'
0000000000000fa2         db  0x00 ; '.'
0000000000000fa3         db  0x00 ; '.'
0000000000000fa4         db  0x00 ; '.'
0000000000000fa5         db  0x00 ; '.'
0000000000000fa6         db  0x00 ; '.'
0000000000000fa7         db  0x00 ; '.'
0000000000000fa8         db  0xfe ; '.'
0000000000000fa9         db  0x42 ; 'B'
0000000000000faa         db  0x01 ; '.'
0000000000000fab         db  0x00 ; '.'
0000000000000fac         db  0x00 ; '.'
0000000000000fad         db  0x00 ; '.'
0000000000000fae         db  0x00 ; '.'
0000000000000faf         db  0x00 ; '.'
0000000000000fb0         db  0x60 ; '`'
0000000000000fb1         db  0x8b ; '.'
0000000000000fb2         db  0x21 ; '!'
0000000000000fb3         db  0x00 ; '.'
0000000000000fb4         db  0x00 ; '.'
0000000000000fb5         db  0x00 ; '.'
0000000000000fb6         db  0x00 ; '.'
0000000000000fb7         db  0x00 ; '.'
0000000000000fb8         db  0x08 ; '.'
0000000000000fb9         db  0x00 ; '.'
0000000000000fba         db  0x00 ; '.'
0000000000000fbb         db  0x00 ; '.'
0000000000000fbc         db  0x00 ; '.'
0000000000000fbd         db  0x00 ; '.'
0000000000000fbe         db  0x00 ; '.'
0000000000000fbf         db  0x00 ; '.'                                         ; DATA XREF=set_regs+166
0000000000000fc0         db  0xe1 ; '.'
0000000000000fc1         db  0x46 ; 'F'
0000000000000fc2         db  0x01 ; '.'
0000000000000fc3         db  0x00 ; '.'
0000000000000fc4         db  0x00 ; '.'
0000000000000fc5         db  0x00 ; '.'
0000000000000fc6         db  0x00 ; '.'
0000000000000fc7         db  0x00 ; '.'
0000000000000fc8         db  0x68 ; 'h'
0000000000000fc9         db  0x8b ; '.'
0000000000000fca         db  0x21 ; '!'
0000000000000fcb         db  0x00 ; '.'
0000000000000fcc         db  0x00 ; '.'
0000000000000fcd         db  0x00 ; '.'
0000000000000fce         db  0x00 ; '.'
0000000000000fcf         db  0x00 ; '.'
0000000000000fd0         db  0x08 ; '.'
0000000000000fd1         db  0x00 ; '.'
0000000000000fd2         db  0x00 ; '.'
0000000000000fd3         db  0x00 ; '.'
0000000000000fd4         db  0x00 ; '.'
0000000000000fd5         db  0x00 ; '.'
0000000000000fd6         db  0x00 ; '.'
0000000000000fd7         db  0x00 ; '.'
0000000000000fd8         db  0xe9 ; '.'
0000000000000fd9         db  0x46 ; 'F'
0000000000000fda         db  0x01 ; '.'
0000000000000fdb         db  0x00 ; '.'
0000000000000fdc         db  0x00 ; '.'
0000000000000fdd         db  0x00 ; '.'
0000000000000fde         db  0x00 ; '.'
0000000000000fdf         db  0x00 ; '.'
0000000000000fe0         db  0x70 ; 'p'
0000000000000fe1         db  0x8b ; '.'
0000000000000fe2         db  0x21 ; '!'
0000000000000fe3         db  0x00 ; '.'
0000000000000fe4         db  0x00 ; '.'
0000000000000fe5         db  0x00 ; '.'
0000000000000fe6         db  0x00 ; '.'
0000000000000fe7         db  0x00 ; '.'
0000000000000fe8         db  0x08 ; '.'
0000000000000fe9         db  0x00 ; '.'
0000000000000fea         db  0x00 ; '.'
0000000000000feb         db  0x00 ; '.'
0000000000000fec         db  0x00 ; '.'
0000000000000fed         db  0x00 ; '.'
0000000000000fee         db  0x00 ; '.'
0000000000000fef         db  0x00 ; '.'
0000000000000ff0         db  0xef ; '.'
0000000000000ff1         db  0x46 ; 'F'
0000000000000ff2         db  0x01 ; '.'
0000000000000ff3         db  0x00 ; '.'
0000000000000ff4         db  0x00 ; '.'
0000000000000ff5         db  0x00 ; '.'
0000000000000ff6         db  0x00 ; '.'
0000000000000ff7         db  0x00 ; '.'
0000000000000ff8         db  0x78 ; 'x'
0000000000000ff9         db  0x8b ; '.'
0000000000000ffa         db  0x21 ; '!'
0000000000000ffb         db  0x00 ; '.'
0000000000000ffc         db  0x00 ; '.'
0000000000000ffd         db  0x00 ; '.'
0000000000000ffe         db  0x00 ; '.'
0000000000000fff         db  0x00 ; '.'                                         ; DATA XREF=main+465
0000000000001000         db  0x08 ; '.'
0000000000001001         db  0x00 ; '.'
0000000000001002         db  0x00 ; '.'
0000000000001003         db  0x00 ; '.'
0000000000001004         db  0x00 ; '.'
0000000000001005         db  0x00 ; '.'
0000000000001006         db  0x00 ; '.'
0000000000001007         db  0x00 ; '.'
0000000000001008         db  0xfc ; '.'
0000000000001009         db  0x46 ; 'F'
000000000000100a         db  0x01 ; '.'
000000000000100b         db  0x00 ; '.'
000000000000100c         db  0x00 ; '.'
000000000000100d         db  0x00 ; '.'
000000000000100e         db  0x00 ; '.'
000000000000100f         db  0x00 ; '.'
0000000000001010         db  0x80 ; '.'
0000000000001011         db  0x8b ; '.'
0000000000001012         db  0x21 ; '!'
0000000000001013         db  0x00 ; '.'
0000000000001014         db  0x00 ; '.'
0000000000001015         db  0x00 ; '.'
0000000000001016         db  0x00 ; '.'
0000000000001017         db  0x00 ; '.'
0000000000001018         db  0x08 ; '.'
0000000000001019         db  0x00 ; '.'
000000000000101a         db  0x00 ; '.'
000000000000101b         db  0x00 ; '.'
000000000000101c         db  0x00 ; '.'
000000000000101d         db  0x00 ; '.'
000000000000101e         db  0x00 ; '.'
000000000000101f         db  0x00 ; '.'
0000000000001020         db  0x09 ; '.'
0000000000001021         db  0x47 ; 'G'
0000000000001022         db  0x01 ; '.'
0000000000001023         db  0x00 ; '.'
0000000000001024         db  0x00 ; '.'
0000000000001025         db  0x00 ; '.'
0000000000001026         db  0x00 ; '.'
0000000000001027         db  0x00 ; '.'
0000000000001028         db  0x88 ; '.'
0000000000001029         db  0x8b ; '.'
000000000000102a         db  0x21 ; '!'
000000000000102b         db  0x00 ; '.'
000000000000102c         db  0x00 ; '.'
000000000000102d         db  0x00 ; '.'
000000000000102e         db  0x00 ; '.'
000000000000102f         db  0x00 ; '.'
0000000000001030         db  0x08 ; '.'
0000000000001031         db  0x00 ; '.'
0000000000001032         db  0x00 ; '.'
0000000000001033         db  0x00 ; '.'
0000000000001034         db  0x00 ; '.'
0000000000001035         db  0x00 ; '.'
0000000000001036         db  0x00 ; '.'
0000000000001037         db  0x00 ; '.'
0000000000001038         db  0x76 ; 'v'
0000000000001039         db  0x41 ; 'A'
000000000000103a         db  0x01 ; '.'
000000000000103b         db  0x00 ; '.'
000000000000103c         db  0x00 ; '.'
000000000000103d         db  0x00 ; '.'
000000000000103e         db  0x00 ; '.'
000000000000103f         db  0x00 ; '.'
0000000000001040         db  0x90 ; '.'
0000000000001041         db  0x8b ; '.'
0000000000001042         db  0x21 ; '!'
0000000000001043         db  0x00 ; '.'
0000000000001044         db  0x00 ; '.'
0000000000001045         db  0x00 ; '.'
0000000000001046         db  0x00 ; '.'
0000000000001047         db  0x00 ; '.'
0000000000001048         db  0x08 ; '.'
0000000000001049         db  0x00 ; '.'
000000000000104a         db  0x00 ; '.'
000000000000104b         db  0x00 ; '.'
000000000000104c         db  0x00 ; '.'
000000000000104d         db  0x00 ; '.'
000000000000104e         db  0x00 ; '.'
000000000000104f         db  0x00 ; '.'
0000000000001050         db  0x1d ; '.'
0000000000001051         db  0x47 ; 'G'
0000000000001052         db  0x01 ; '.'
0000000000001053         db  0x00 ; '.'
0000000000001054         db  0x00 ; '.'
0000000000001055         db  0x00 ; '.'
0000000000001056         db  0x00 ; '.'
0000000000001057         db  0x00 ; '.'
0000000000001058         db  0x98 ; '.'
0000000000001059         db  0x8b ; '.'
000000000000105a         db  0x21 ; '!'
000000000000105b         db  0x00 ; '.'
000000000000105c         db  0x00 ; '.'
000000000000105d         db  0x00 ; '.'
000000000000105e         db  0x00 ; '.'
000000000000105f         db  0x00 ; '.'
0000000000001060         db  0x08 ; '.'
0000000000001061         db  0x00 ; '.'
0000000000001062         db  0x00 ; '.'
0000000000001063         db  0x00 ; '.'
0000000000001064         db  0x00 ; '.'
0000000000001065         db  0x00 ; '.'
0000000000001066         db  0x00 ; '.'
0000000000001067         db  0x00 ; '.'
0000000000001068         db  0x02 ; '.'
0000000000001069         db  0x47 ; 'G'
000000000000106a         db  0x01 ; '.'
000000000000106b         db  0x00 ; '.'
000000000000106c         db  0x00 ; '.'
000000000000106d         db  0x00 ; '.'
000000000000106e         db  0x00 ; '.'
000000000000106f         db  0x00 ; '.'
0000000000001070         db  0xa0 ; '.'
0000000000001071         db  0x8b ; '.'
0000000000001072         db  0x21 ; '!'
0000000000001073         db  0x00 ; '.'
0000000000001074         db  0x00 ; '.'
0000000000001075         db  0x00 ; '.'
0000000000001076         db  0x00 ; '.'
0000000000001077         db  0x00 ; '.'
0000000000001078         db  0x08 ; '.'
0000000000001079         db  0x00 ; '.'
000000000000107a         db  0x00 ; '.'
000000000000107b         db  0x00 ; '.'
000000000000107c         db  0x00 ; '.'
000000000000107d         db  0x00 ; '.'
000000000000107e         db  0x00 ; '.'
000000000000107f         db  0x00 ; '.'
0000000000001080         db  0x31 ; '1'
0000000000001081         db  0x42 ; 'B'
0000000000001082         db  0x01 ; '.'
0000000000001083         db  0x00 ; '.'
0000000000001084         db  0x00 ; '.'
0000000000001085         db  0x00 ; '.'
0000000000001086         db  0x00 ; '.'
0000000000001087         db  0x00 ; '.'
0000000000001088         db  0xa8 ; '.'
0000000000001089         db  0x8b ; '.'
000000000000108a         db  0x21 ; '!'
000000000000108b         db  0x00 ; '.'
000000000000108c         db  0x00 ; '.'
000000000000108d         db  0x00 ; '.'
000000000000108e         db  0x00 ; '.'
000000000000108f         db  0x00 ; '.'
0000000000001090         db  0x08 ; '.'
0000000000001091         db  0x00 ; '.'
0000000000001092         db  0x00 ; '.'
0000000000001093         db  0x00 ; '.'
0000000000001094         db  0x00 ; '.'
0000000000001095         db  0x00 ; '.'
0000000000001096         db  0x00 ; '.'
0000000000001097         db  0x00 ; '.'
0000000000001098         db  0x25 ; '%'
0000000000001099         db  0x47 ; 'G'
000000000000109a         db  0x01 ; '.'
000000000000109b         db  0x00 ; '.'
000000000000109c         db  0x00 ; '.'
000000000000109d         db  0x00 ; '.'
000000000000109e         db  0x00 ; '.'
000000000000109f         db  0x00 ; '.'
00000000000010a0         db  0x08 ; '.'
00000000000010a1         db  0x90 ; '.'
00000000000010a2         db  0x21 ; '!'
00000000000010a3         db  0x00 ; '.'
00000000000010a4         db  0x00 ; '.'
00000000000010a5         db  0x00 ; '.'
00000000000010a6         db  0x00 ; '.'
00000000000010a7         db  0x00 ; '.'
00000000000010a8         db  0x08 ; '.'
00000000000010a9         db  0x00 ; '.'
00000000000010aa         db  0x00 ; '.'
00000000000010ab         db  0x00 ; '.'
00000000000010ac         db  0x00 ; '.'
00000000000010ad         db  0x00 ; '.'
00000000000010ae         db  0x00 ; '.'
00000000000010af         db  0x00 ; '.'
00000000000010b0         db  0x08 ; '.'
00000000000010b1         db  0x90 ; '.'
00000000000010b2         db  0x21 ; '!'
00000000000010b3         db  0x00 ; '.'
00000000000010b4         db  0x00 ; '.'
00000000000010b5         db  0x00 ; '.'
00000000000010b6         db  0x00 ; '.'
00000000000010b7         db  0x00 ; '.'
00000000000010b8         db  0x10 ; '.'
00000000000010b9         db  0x90 ; '.'
00000000000010ba         db  0x21 ; '!'
00000000000010bb         db  0x00 ; '.'
00000000000010bc         db  0x00 ; '.'
00000000000010bd         db  0x00 ; '.'
00000000000010be         db  0x00 ; '.'
00000000000010bf         db  0x00 ; '.'
00000000000010c0         db  0x08 ; '.'
00000000000010c1         db  0x00 ; '.'
00000000000010c2         db  0x00 ; '.'
00000000000010c3         db  0x00 ; '.'
00000000000010c4         db  0x00 ; '.'
00000000000010c5         db  0x00 ; '.'
00000000000010c6         db  0x00 ; '.'
00000000000010c7         db  0x00 ; '.'
00000000000010c8         db  0x77 ; 'w'
00000000000010c9         db  0x46 ; 'F'
00000000000010ca         db  0x01 ; '.'
00000000000010cb         db  0x00 ; '.'
00000000000010cc         db  0x00 ; '.'
00000000000010cd         db  0x00 ; '.'
00000000000010ce         db  0x00 ; '.'
00000000000010cf         db  0x00 ; '.'
00000000000010d0         db  0x60 ; '`'
00000000000010d1         db  0x90 ; '.'
00000000000010d2         db  0x21 ; '!'
00000000000010d3         db  0x00 ; '.'
00000000000010d4         db  0x00 ; '.'
00000000000010d5         db  0x00 ; '.'
00000000000010d6         db  0x00 ; '.'
00000000000010d7         db  0x00 ; '.'
00000000000010d8         db  0x08 ; '.'
00000000000010d9         db  0x00 ; '.'
00000000000010da         db  0x00 ; '.'
00000000000010db         db  0x00 ; '.'
00000000000010dc         db  0x00 ; '.'
00000000000010dd         db  0x00 ; '.'
00000000000010de         db  0x00 ; '.'
00000000000010df         db  0x00 ; '.'
00000000000010e0         db  0x70 ; 'p'
00000000000010e1         db  0x90 ; '.'
00000000000010e2         db  0x21 ; '!'
00000000000010e3         db  0x00 ; '.'
00000000000010e4         db  0x00 ; '.'
00000000000010e5         db  0x00 ; '.'
00000000000010e6         db  0x00 ; '.'
00000000000010e7         db  0x00 ; '.'
00000000000010e8         db  0x78 ; 'x'
00000000000010e9         db  0x90 ; '.'
00000000000010ea         db  0x21 ; '!'
00000000000010eb         db  0x00 ; '.'
00000000000010ec         db  0x00 ; '.'
00000000000010ed         db  0x00 ; '.'
00000000000010ee         db  0x00 ; '.'
00000000000010ef         db  0x00 ; '.'
00000000000010f0         db  0x08 ; '.'
00000000000010f1         db  0x00 ; '.'
00000000000010f2         db  0x00 ; '.'
00000000000010f3         db  0x00 ; '.'
00000000000010f4         db  0x00 ; '.'
00000000000010f5         db  0x00 ; '.'
00000000000010f6         db  0x00 ; '.'
00000000000010f7         db  0x00 ; '.'
00000000000010f8         db  0xc0 ; '.'
00000000000010f9         db  0xb2 ; '.'
00000000000010fa         db  0x21 ; '!'
00000000000010fb         db  0x00 ; '.'
00000000000010fc         db  0x00 ; '.'
00000000000010fd         db  0x00 ; '.'
00000000000010fe         db  0x00 ; '.'
00000000000010ff         db  0x00 ; '.'
0000000000001100         db  0xd0 ; '.'
0000000000001101         db  0x8f ; '.'
0000000000001102         db  0x21 ; '!'
0000000000001103         db  0x00 ; '.'
0000000000001104         db  0x00 ; '.'
0000000000001105         db  0x00 ; '.'
0000000000001106         db  0x00 ; '.'
0000000000001107         db  0x00 ; '.'
0000000000001108         db  0x06 ; '.'
0000000000001109         db  0x00 ; '.'
000000000000110a         db  0x00 ; '.'
000000000000110b         db  0x00 ; '.'
000000000000110c         db  0x08 ; '.'
000000000000110d         db  0x00 ; '.'
000000000000110e         db  0x00 ; '.'
000000000000110f         db  0x00 ; '.'
0000000000001110         db  0x00 ; '.'
0000000000001111         db  0x00 ; '.'
0000000000001112         db  0x00 ; '.'
0000000000001113         db  0x00 ; '.'
0000000000001114         db  0x00 ; '.'
0000000000001115         db  0x00 ; '.'
0000000000001116         db  0x00 ; '.'
0000000000001117         db  0x00 ; '.'
0000000000001118         db  0xd8 ; '.'
0000000000001119         db  0x8f ; '.'
000000000000111a         db  0x21 ; '!'
000000000000111b         db  0x00 ; '.'
000000000000111c         db  0x00 ; '.'
000000000000111d         db  0x00 ; '.'
000000000000111e         db  0x00 ; '.'
000000000000111f         db  0x00 ; '.'
0000000000001120         db  0x06 ; '.'
0000000000001121         db  0x00 ; '.'
0000000000001122         db  0x00 ; '.'
0000000000001123         db  0x00 ; '.'
0000000000001124         db  0x20 ; ' '
0000000000001125         db  0x00 ; '.'
0000000000001126         db  0x00 ; '.'
0000000000001127         db  0x00 ; '.'
0000000000001128         db  0x00 ; '.'
0000000000001129         db  0x00 ; '.'
000000000000112a         db  0x00 ; '.'
000000000000112b         db  0x00 ; '.'
000000000000112c         db  0x00 ; '.'
000000000000112d         db  0x00 ; '.'
000000000000112e         db  0x00 ; '.'
000000000000112f         db  0x00 ; '.'
0000000000001130         db  0xe0 ; '.'
0000000000001131         db  0x8f ; '.'
0000000000001132         db  0x21 ; '!'
0000000000001133         db  0x00 ; '.'
0000000000001134         db  0x00 ; '.'
0000000000001135         db  0x00 ; '.'
0000000000001136         db  0x00 ; '.'
0000000000001137         db  0x00 ; '.'
0000000000001138         db  0x06 ; '.'
0000000000001139         db  0x00 ; '.'
000000000000113a         db  0x00 ; '.'
000000000000113b         db  0x00 ; '.'
000000000000113c         db  0x26 ; '&'
000000000000113d         db  0x00 ; '.'
000000000000113e         db  0x00 ; '.'
000000000000113f         db  0x00 ; '.'
0000000000001140         db  0x00 ; '.'
0000000000001141         db  0x00 ; '.'
0000000000001142         db  0x00 ; '.'
0000000000001143         db  0x00 ; '.'
0000000000001144         db  0x00 ; '.'
0000000000001145         db  0x00 ; '.'
0000000000001146         db  0x00 ; '.'
0000000000001147         db  0x00 ; '.'
0000000000001148         db  0xe8 ; '.'
0000000000001149         db  0x8f ; '.'
000000000000114a         db  0x21 ; '!'
000000000000114b         db  0x00 ; '.'
000000000000114c         db  0x00 ; '.'
000000000000114d         db  0x00 ; '.'
000000000000114e         db  0x00 ; '.'
000000000000114f         db  0x00 ; '.'
0000000000001150         db  0x06 ; '.'
0000000000001151         db  0x00 ; '.'
0000000000001152         db  0x00 ; '.'
0000000000001153         db  0x00 ; '.'
0000000000001154         db  0x41 ; 'A'
0000000000001155         db  0x00 ; '.'
0000000000001156         db  0x00 ; '.'
0000000000001157         db  0x00 ; '.'
0000000000001158         db  0x00 ; '.'
0000000000001159         db  0x00 ; '.'
000000000000115a         db  0x00 ; '.'
000000000000115b         db  0x00 ; '.'
000000000000115c         db  0x00 ; '.'
000000000000115d         db  0x00 ; '.'
000000000000115e         db  0x00 ; '.'
000000000000115f         db  0x00 ; '.'
0000000000001160         db  0xf0 ; '.'
0000000000001161         db  0x8f ; '.'
0000000000001162         db  0x21 ; '!'
0000000000001163         db  0x00 ; '.'
0000000000001164         db  0x00 ; '.'
0000000000001165         db  0x00 ; '.'
0000000000001166         db  0x00 ; '.'
0000000000001167         db  0x00 ; '.'
0000000000001168         db  0x06 ; '.'
0000000000001169         db  0x00 ; '.'
000000000000116a         db  0x00 ; '.'
000000000000116b         db  0x00 ; '.'
000000000000116c         db  0x45 ; 'E'
000000000000116d         db  0x00 ; '.'
000000000000116e         db  0x00 ; '.'
000000000000116f         db  0x00 ; '.'
0000000000001170         db  0x00 ; '.'
0000000000001171         db  0x00 ; '.'
0000000000001172         db  0x00 ; '.'
0000000000001173         db  0x00 ; '.'
0000000000001174         db  0x00 ; '.'
0000000000001175         db  0x00 ; '.'
0000000000001176         db  0x00 ; '.'
0000000000001177         db  0x00 ; '.'
0000000000001178         db  0x80 ; '.'
0000000000001179         db  0x90 ; '.'
000000000000117a         db  0x21 ; '!'
000000000000117b         db  0x00 ; '.'
000000000000117c         db  0x00 ; '.'
000000000000117d         db  0x00 ; '.'
000000000000117e         db  0x00 ; '.'
000000000000117f         db  0x00 ; '.'
0000000000001180         db  0x05 ; '.'
0000000000001181         db  0x00 ; '.'
0000000000001182         db  0x00 ; '.'
0000000000001183         db  0x00 ; '.'
0000000000001184         db  0x49 ; 'I'
0000000000001185         db  0x00 ; '.'
0000000000001186         db  0x00 ; '.'
0000000000001187         db  0x00 ; '.'
0000000000001188         db  0x00 ; '.'
0000000000001189         db  0x00 ; '.'
000000000000118a         db  0x00 ; '.'
000000000000118b         db  0x00 ; '.'
000000000000118c         db  0x00 ; '.'
000000000000118d         db  0x00 ; '.'
000000000000118e         db  0x00 ; '.'
000000000000118f         db  0x00 ; '.'
0000000000001190         db  0x88 ; '.'
0000000000001191         db  0x90 ; '.'
0000000000001192         db  0x21 ; '!'
0000000000001193         db  0x00 ; '.'
0000000000001194         db  0x00 ; '.'
0000000000001195         db  0x00 ; '.'
0000000000001196         db  0x00 ; '.'
0000000000001197         db  0x00 ; '.'
0000000000001198         db  0x05 ; '.'
0000000000001199         db  0x00 ; '.'
000000000000119a         db  0x00 ; '.'
000000000000119b         db  0x00 ; '.'
000000000000119c         db  0x48 ; 'H'
000000000000119d         db  0x00 ; '.'
000000000000119e         db  0x00 ; '.'
000000000000119f         db  0x00 ; '.'
00000000000011a0         db  0x00 ; '.'
00000000000011a1         db  0x00 ; '.'
00000000000011a2         db  0x00 ; '.'
00000000000011a3         db  0x00 ; '.'
00000000000011a4         db  0x00 ; '.'
00000000000011a5         db  0x00 ; '.'
00000000000011a6         db  0x00 ; '.'
00000000000011a7         db  0x00 ; '.'
00000000000011a8         db  0x90 ; '.'
00000000000011a9         db  0x90 ; '.'
00000000000011aa         db  0x21 ; '!'
00000000000011ab         db  0x00 ; '.'
00000000000011ac         db  0x00 ; '.'
00000000000011ad         db  0x00 ; '.'
00000000000011ae         db  0x00 ; '.'
00000000000011af         db  0x00 ; '.'
00000000000011b0         db  0x05 ; '.'
00000000000011b1         db  0x00 ; '.'
00000000000011b2         db  0x00 ; '.'
00000000000011b3         db  0x00 ; '.'
00000000000011b4         db  0x4e ; 'N'
00000000000011b5         db  0x00 ; '.'
00000000000011b6         db  0x00 ; '.'
00000000000011b7         db  0x00 ; '.'
00000000000011b8         db  0x00 ; '.'
00000000000011b9         db  0x00 ; '.'
00000000000011ba         db  0x00 ; '.'
00000000000011bb         db  0x00 ; '.'
00000000000011bc         db  0x00 ; '.'
00000000000011bd         db  0x00 ; '.'
00000000000011be         db  0x00 ; '.'
00000000000011bf         db  0x00 ; '.'
00000000000011c0         db  0x98 ; '.'
00000000000011c1         db  0x90 ; '.'
00000000000011c2         db  0x21 ; '!'
00000000000011c3         db  0x00 ; '.'
00000000000011c4         db  0x00 ; '.'
00000000000011c5         db  0x00 ; '.'
00000000000011c6         db  0x00 ; '.'
00000000000011c7         db  0x00 ; '.'
00000000000011c8         db  0x05 ; '.'
00000000000011c9         db  0x00 ; '.'
00000000000011ca         db  0x00 ; '.'
00000000000011cb         db  0x00 ; '.'
00000000000011cc         db  0x4f ; 'O'
00000000000011cd         db  0x00 ; '.'
00000000000011ce         db  0x00 ; '.'
00000000000011cf         db  0x00 ; '.'
00000000000011d0         db  0x00 ; '.'
00000000000011d1         db  0x00 ; '.'
00000000000011d2         db  0x00 ; '.'
00000000000011d3         db  0x00 ; '.'
00000000000011d4         db  0x00 ; '.'
00000000000011d5         db  0x00 ; '.'
00000000000011d6         db  0x00 ; '.'
00000000000011d7         db  0x00 ; '.'
00000000000011d8         db  0xa0 ; '.'
00000000000011d9         db  0x90 ; '.'
00000000000011da         db  0x21 ; '!'
00000000000011db         db  0x00 ; '.'
00000000000011dc         db  0x00 ; '.'
00000000000011dd         db  0x00 ; '.'
00000000000011de         db  0x00 ; '.'
00000000000011df         db  0x00 ; '.'
00000000000011e0         db  0x05 ; '.'
00000000000011e1         db  0x00 ; '.'
00000000000011e2         db  0x00 ; '.'
00000000000011e3         db  0x00 ; '.'
00000000000011e4         db  0x4b ; 'K'
00000000000011e5         db  0x00 ; '.'
00000000000011e6         db  0x00 ; '.'
00000000000011e7         db  0x00 ; '.'
00000000000011e8         db  0x00 ; '.'
00000000000011e9         db  0x00 ; '.'
00000000000011ea         db  0x00 ; '.'
00000000000011eb         db  0x00 ; '.'
00000000000011ec         db  0x00 ; '.'
00000000000011ed         db  0x00 ; '.'
00000000000011ee         db  0x00 ; '.'
00000000000011ef         db  0x00 ; '.'
00000000000011f0         db  0xc0 ; '.'
00000000000011f1         db  0x90 ; '.'
00000000000011f2         db  0x21 ; '!'
00000000000011f3         db  0x00 ; '.'
00000000000011f4         db  0x00 ; '.'
00000000000011f5         db  0x00 ; '.'
00000000000011f6         db  0x00 ; '.'
00000000000011f7         db  0x00 ; '.'
00000000000011f8         db  0x05 ; '.'
00000000000011f9         db  0x00 ; '.'
00000000000011fa         db  0x00 ; '.'
00000000000011fb         db  0x00 ; '.'
00000000000011fc         db  0x4d ; 'M'
00000000000011fd         db  0x00 ; '.'
00000000000011fe         db  0x00 ; '.'
00000000000011ff         db  0x00 ; '.'
0000000000001200         db  0x00 ; '.'                                         ; DATA XREF=peek_token+560, peek_token+572, peek_token+640, peek_token+652, peek_token+996, peek_token+1080
0000000000001201         db  0x00 ; '.'
0000000000001202         db  0x00 ; '.'
0000000000001203         db  0x00 ; '.'
0000000000001204         db  0x00 ; '.'
0000000000001205         db  0x00 ; '.'
0000000000001206         db  0x00 ; '.'
0000000000001207         db  0x00 ; '.'


        ; Section .rela.plt
        ; Range: [0x1208; 0x1838[ (1584 bytes)
        ; File offset : [4616; 6200[ (1584 bytes)
        ; Flags: 0x42
        ;   SHT_RELA
        ;   SHF_ALLOC

0000000000001208         db  0xc0 ; '.'
0000000000001209         db  0x8d ; '.'
000000000000120a         db  0x21 ; '!'
000000000000120b         db  0x00 ; '.'
000000000000120c         db  0x00 ; '.'
000000000000120d         db  0x00 ; '.'
000000000000120e         db  0x00 ; '.'
000000000000120f         db  0x00 ; '.'
0000000000001210         db  0x07 ; '.'
0000000000001211         db  0x00 ; '.'
0000000000001212         db  0x00 ; '.'
0000000000001213         db  0x00 ; '.'
0000000000001214         db  0x01 ; '.'
0000000000001215         db  0x00 ; '.'
0000000000001216         db  0x00 ; '.'
0000000000001217         db  0x00 ; '.'
0000000000001218         db  0x00 ; '.'
0000000000001219         db  0x00 ; '.'
000000000000121a         db  0x00 ; '.'
000000000000121b         db  0x00 ; '.'
000000000000121c         db  0x00 ; '.'
000000000000121d         db  0x00 ; '.'
000000000000121e         db  0x00 ; '.'
000000000000121f         db  0x00 ; '.'
0000000000001220         db  0xc8 ; '.'
0000000000001221         db  0x8d ; '.'
0000000000001222         db  0x21 ; '!'
0000000000001223         db  0x00 ; '.'
0000000000001224         db  0x00 ; '.'
0000000000001225         db  0x00 ; '.'
0000000000001226         db  0x00 ; '.'
0000000000001227         db  0x00 ; '.'
0000000000001228         db  0x07 ; '.'
0000000000001229         db  0x00 ; '.'
000000000000122a         db  0x00 ; '.'
000000000000122b         db  0x00 ; '.'
000000000000122c         db  0x02 ; '.'
000000000000122d         db  0x00 ; '.'
000000000000122e         db  0x00 ; '.'
000000000000122f         db  0x00 ; '.'
0000000000001230         db  0x00 ; '.'
0000000000001231         db  0x00 ; '.'
0000000000001232         db  0x00 ; '.'
0000000000001233         db  0x00 ; '.'
0000000000001234         db  0x00 ; '.'
0000000000001235         db  0x00 ; '.'
0000000000001236         db  0x00 ; '.'
0000000000001237         db  0x00 ; '.'
0000000000001238         db  0xd0 ; '.'
0000000000001239         db  0x8d ; '.'
000000000000123a         db  0x21 ; '!'
000000000000123b         db  0x00 ; '.'
000000000000123c         db  0x00 ; '.'
000000000000123d         db  0x00 ; '.'
000000000000123e         db  0x00 ; '.'
000000000000123f         db  0x00 ; '.'
0000000000001240         db  0x07 ; '.'
0000000000001241         db  0x00 ; '.'
0000000000001242         db  0x00 ; '.'
0000000000001243         db  0x00 ; '.'
0000000000001244         db  0x03 ; '.'
0000000000001245         db  0x00 ; '.'
0000000000001246         db  0x00 ; '.'
0000000000001247         db  0x00 ; '.'
0000000000001248         db  0x00 ; '.'
0000000000001249         db  0x00 ; '.'
000000000000124a         db  0x00 ; '.'
000000000000124b         db  0x00 ; '.'
000000000000124c         db  0x00 ; '.'
000000000000124d         db  0x00 ; '.'
000000000000124e         db  0x00 ; '.'
000000000000124f         db  0x00 ; '.'
0000000000001250         db  0xd8 ; '.'
0000000000001251         db  0x8d ; '.'
0000000000001252         db  0x21 ; '!'
0000000000001253         db  0x00 ; '.'
0000000000001254         db  0x00 ; '.'
0000000000001255         db  0x00 ; '.'
0000000000001256         db  0x00 ; '.'
0000000000001257         db  0x00 ; '.'
0000000000001258         db  0x07 ; '.'
0000000000001259         db  0x00 ; '.'
000000000000125a         db  0x00 ; '.'
000000000000125b         db  0x00 ; '.'
000000000000125c         db  0x04 ; '.'
000000000000125d         db  0x00 ; '.'
000000000000125e         db  0x00 ; '.'
000000000000125f         db  0x00 ; '.'
0000000000001260         db  0x00 ; '.'
0000000000001261         db  0x00 ; '.'
0000000000001262         db  0x00 ; '.'
0000000000001263         db  0x00 ; '.'
0000000000001264         db  0x00 ; '.'
0000000000001265         db  0x00 ; '.'
0000000000001266         db  0x00 ; '.'
0000000000001267         db  0x00 ; '.'
0000000000001268         db  0xe0 ; '.'
0000000000001269         db  0x8d ; '.'
000000000000126a         db  0x21 ; '!'
000000000000126b         db  0x00 ; '.'
000000000000126c         db  0x00 ; '.'
000000000000126d         db  0x00 ; '.'
000000000000126e         db  0x00 ; '.'
000000000000126f         db  0x00 ; '.'
0000000000001270         db  0x07 ; '.'
0000000000001271         db  0x00 ; '.'
0000000000001272         db  0x00 ; '.'
0000000000001273         db  0x00 ; '.'
0000000000001274         db  0x05 ; '.'
0000000000001275         db  0x00 ; '.'
0000000000001276         db  0x00 ; '.'
0000000000001277         db  0x00 ; '.'
0000000000001278         db  0x00 ; '.'
0000000000001279         db  0x00 ; '.'
000000000000127a         db  0x00 ; '.'
000000000000127b         db  0x00 ; '.'
000000000000127c         db  0x00 ; '.'
000000000000127d         db  0x00 ; '.'
000000000000127e         db  0x00 ; '.'
000000000000127f         db  0x00 ; '.'
0000000000001280         db  0xe8 ; '.'
0000000000001281         db  0x8d ; '.'
0000000000001282         db  0x21 ; '!'
0000000000001283         db  0x00 ; '.'
0000000000001284         db  0x00 ; '.'
0000000000001285         db  0x00 ; '.'
0000000000001286         db  0x00 ; '.'
0000000000001287         db  0x00 ; '.'
0000000000001288         db  0x07 ; '.'
0000000000001289         db  0x00 ; '.'
000000000000128a         db  0x00 ; '.'
000000000000128b         db  0x00 ; '.'
000000000000128c         db  0x06 ; '.'
000000000000128d         db  0x00 ; '.'
000000000000128e         db  0x00 ; '.'
000000000000128f         db  0x00 ; '.'
0000000000001290         db  0x00 ; '.'
0000000000001291         db  0x00 ; '.'
0000000000001292         db  0x00 ; '.'
0000000000001293         db  0x00 ; '.'
0000000000001294         db  0x00 ; '.'
0000000000001295         db  0x00 ; '.'
0000000000001296         db  0x00 ; '.'
0000000000001297         db  0x00 ; '.'
0000000000001298         db  0xf0 ; '.'
0000000000001299         db  0x8d ; '.'
000000000000129a         db  0x21 ; '!'
000000000000129b         db  0x00 ; '.'
000000000000129c         db  0x00 ; '.'
000000000000129d         db  0x00 ; '.'
000000000000129e         db  0x00 ; '.'
000000000000129f         db  0x00 ; '.'
00000000000012a0         db  0x07 ; '.'
00000000000012a1         db  0x00 ; '.'
00000000000012a2         db  0x00 ; '.'
00000000000012a3         db  0x00 ; '.'
00000000000012a4         db  0x07 ; '.'
00000000000012a5         db  0x00 ; '.'
00000000000012a6         db  0x00 ; '.'
00000000000012a7         db  0x00 ; '.'
00000000000012a8         db  0x00 ; '.'
00000000000012a9         db  0x00 ; '.'
00000000000012aa         db  0x00 ; '.'
00000000000012ab         db  0x00 ; '.'
00000000000012ac         db  0x00 ; '.'
00000000000012ad         db  0x00 ; '.'
00000000000012ae         db  0x00 ; '.'
00000000000012af         db  0x00 ; '.'
00000000000012b0         db  0xf8 ; '.'
00000000000012b1         db  0x8d ; '.'
00000000000012b2         db  0x21 ; '!'
00000000000012b3         db  0x00 ; '.'
00000000000012b4         db  0x00 ; '.'
00000000000012b5         db  0x00 ; '.'
00000000000012b6         db  0x00 ; '.'
00000000000012b7         db  0x00 ; '.'
00000000000012b8         db  0x07 ; '.'
00000000000012b9         db  0x00 ; '.'
00000000000012ba         db  0x00 ; '.'
00000000000012bb         db  0x00 ; '.'
00000000000012bc         db  0x09 ; '.'
00000000000012bd         db  0x00 ; '.'
00000000000012be         db  0x00 ; '.'
00000000000012bf         db  0x00 ; '.'
00000000000012c0         db  0x00 ; '.'
00000000000012c1         db  0x00 ; '.'
00000000000012c2         db  0x00 ; '.'
00000000000012c3         db  0x00 ; '.'
00000000000012c4         db  0x00 ; '.'
00000000000012c5         db  0x00 ; '.'
00000000000012c6         db  0x00 ; '.'
00000000000012c7         db  0x00 ; '.'
00000000000012c8         db  0x00 ; '.'
00000000000012c9         db  0x8e ; '.'
00000000000012ca         db  0x21 ; '!'
00000000000012cb         db  0x00 ; '.'
00000000000012cc         db  0x00 ; '.'
00000000000012cd         db  0x00 ; '.'
00000000000012ce         db  0x00 ; '.'
00000000000012cf         db  0x00 ; '.'
00000000000012d0         db  0x07 ; '.'
00000000000012d1         db  0x00 ; '.'
00000000000012d2         db  0x00 ; '.'
00000000000012d3         db  0x00 ; '.'
00000000000012d4         db  0x0a ; '.'
00000000000012d5         db  0x00 ; '.'
00000000000012d6         db  0x00 ; '.'
00000000000012d7         db  0x00 ; '.'
00000000000012d8         db  0x00 ; '.'
00000000000012d9         db  0x00 ; '.'
00000000000012da         db  0x00 ; '.'
00000000000012db         db  0x00 ; '.'
00000000000012dc         db  0x00 ; '.'
00000000000012dd         db  0x00 ; '.'
00000000000012de         db  0x00 ; '.'
00000000000012df         db  0x00 ; '.'
00000000000012e0         db  0x08 ; '.'
00000000000012e1         db  0x8e ; '.'
00000000000012e2         db  0x21 ; '!'
00000000000012e3         db  0x00 ; '.'
00000000000012e4         db  0x00 ; '.'
00000000000012e5         db  0x00 ; '.'
00000000000012e6         db  0x00 ; '.'
00000000000012e7         db  0x00 ; '.'
00000000000012e8         db  0x07 ; '.'
00000000000012e9         db  0x00 ; '.'
00000000000012ea         db  0x00 ; '.'
00000000000012eb         db  0x00 ; '.'
00000000000012ec         db  0x0b ; '.'
00000000000012ed         db  0x00 ; '.'
00000000000012ee         db  0x00 ; '.'
00000000000012ef         db  0x00 ; '.'
00000000000012f0         db  0x00 ; '.'
00000000000012f1         db  0x00 ; '.'
00000000000012f2         db  0x00 ; '.'
00000000000012f3         db  0x00 ; '.'
00000000000012f4         db  0x00 ; '.'
00000000000012f5         db  0x00 ; '.'
00000000000012f6         db  0x00 ; '.'
00000000000012f7         db  0x00 ; '.'
00000000000012f8         db  0x10 ; '.'
00000000000012f9         db  0x8e ; '.'
00000000000012fa         db  0x21 ; '!'
00000000000012fb         db  0x00 ; '.'
00000000000012fc         db  0x00 ; '.'
00000000000012fd         db  0x00 ; '.'
00000000000012fe         db  0x00 ; '.'
00000000000012ff         db  0x00 ; '.'
0000000000001300         db  0x07 ; '.'
0000000000001301         db  0x00 ; '.'
0000000000001302         db  0x00 ; '.'
0000000000001303         db  0x00 ; '.'
0000000000001304         db  0x0c ; '.'
0000000000001305         db  0x00 ; '.'
0000000000001306         db  0x00 ; '.'
0000000000001307         db  0x00 ; '.'
0000000000001308         db  0x00 ; '.'
0000000000001309         db  0x00 ; '.'
000000000000130a         db  0x00 ; '.'
000000000000130b         db  0x00 ; '.'
000000000000130c         db  0x00 ; '.'
000000000000130d         db  0x00 ; '.'
000000000000130e         db  0x00 ; '.'
000000000000130f         db  0x00 ; '.'
0000000000001310         db  0x18 ; '.'
0000000000001311         db  0x8e ; '.'
0000000000001312         db  0x21 ; '!'
0000000000001313         db  0x00 ; '.'
0000000000001314         db  0x00 ; '.'
0000000000001315         db  0x00 ; '.'
0000000000001316         db  0x00 ; '.'
0000000000001317         db  0x00 ; '.'
0000000000001318         db  0x07 ; '.'
0000000000001319         db  0x00 ; '.'
000000000000131a         db  0x00 ; '.'
000000000000131b         db  0x00 ; '.'
000000000000131c         db  0x0d ; '.'
000000000000131d         db  0x00 ; '.'
000000000000131e         db  0x00 ; '.'
000000000000131f         db  0x00 ; '.'
0000000000001320         db  0x00 ; '.'
0000000000001321         db  0x00 ; '.'
0000000000001322         db  0x00 ; '.'
0000000000001323         db  0x00 ; '.'
0000000000001324         db  0x00 ; '.'
0000000000001325         db  0x00 ; '.'
0000000000001326         db  0x00 ; '.'
0000000000001327         db  0x00 ; '.'
0000000000001328         db  0x20 ; ' '
0000000000001329         db  0x8e ; '.'
000000000000132a         db  0x21 ; '!'
000000000000132b         db  0x00 ; '.'
000000000000132c         db  0x00 ; '.'
000000000000132d         db  0x00 ; '.'
000000000000132e         db  0x00 ; '.'
000000000000132f         db  0x00 ; '.'
0000000000001330         db  0x07 ; '.'
0000000000001331         db  0x00 ; '.'
0000000000001332         db  0x00 ; '.'
0000000000001333         db  0x00 ; '.'
0000000000001334         db  0x0e ; '.'
0000000000001335         db  0x00 ; '.'
0000000000001336         db  0x00 ; '.'
0000000000001337         db  0x00 ; '.'
0000000000001338         db  0x00 ; '.'
0000000000001339         db  0x00 ; '.'
000000000000133a         db  0x00 ; '.'
000000000000133b         db  0x00 ; '.'
000000000000133c         db  0x00 ; '.'
000000000000133d         db  0x00 ; '.'
000000000000133e         db  0x00 ; '.'
000000000000133f         db  0x00 ; '.'
0000000000001340         db  0x28 ; '('
0000000000001341         db  0x8e ; '.'
0000000000001342         db  0x21 ; '!'
0000000000001343         db  0x00 ; '.'
0000000000001344         db  0x00 ; '.'
0000000000001345         db  0x00 ; '.'
0000000000001346         db  0x00 ; '.'
0000000000001347         db  0x00 ; '.'
0000000000001348         db  0x07 ; '.'
0000000000001349         db  0x00 ; '.'
000000000000134a         db  0x00 ; '.'
000000000000134b         db  0x00 ; '.'
000000000000134c         db  0x0f ; '.'
000000000000134d         db  0x00 ; '.'
000000000000134e         db  0x00 ; '.'
000000000000134f         db  0x00 ; '.'
0000000000001350         db  0x00 ; '.'
0000000000001351         db  0x00 ; '.'
0000000000001352         db  0x00 ; '.'
0000000000001353         db  0x00 ; '.'
0000000000001354         db  0x00 ; '.'
0000000000001355         db  0x00 ; '.'
0000000000001356         db  0x00 ; '.'
0000000000001357         db  0x00 ; '.'
0000000000001358         db  0x30 ; '0'
0000000000001359         db  0x8e ; '.'
000000000000135a         db  0x21 ; '!'
000000000000135b         db  0x00 ; '.'
000000000000135c         db  0x00 ; '.'
000000000000135d         db  0x00 ; '.'
000000000000135e         db  0x00 ; '.'
000000000000135f         db  0x00 ; '.'
0000000000001360         db  0x07 ; '.'
0000000000001361         db  0x00 ; '.'
0000000000001362         db  0x00 ; '.'
0000000000001363         db  0x00 ; '.'
0000000000001364         db  0x10 ; '.'
0000000000001365         db  0x00 ; '.'
0000000000001366         db  0x00 ; '.'
0000000000001367         db  0x00 ; '.'
0000000000001368         db  0x00 ; '.'
0000000000001369         db  0x00 ; '.'
000000000000136a         db  0x00 ; '.'
000000000000136b         db  0x00 ; '.'
000000000000136c         db  0x00 ; '.'
000000000000136d         db  0x00 ; '.'
000000000000136e         db  0x00 ; '.'
000000000000136f         db  0x00 ; '.'
0000000000001370         db  0x38 ; '8'
0000000000001371         db  0x8e ; '.'
0000000000001372         db  0x21 ; '!'
0000000000001373         db  0x00 ; '.'
0000000000001374         db  0x00 ; '.'
0000000000001375         db  0x00 ; '.'
0000000000001376         db  0x00 ; '.'
0000000000001377         db  0x00 ; '.'
0000000000001378         db  0x07 ; '.'
0000000000001379         db  0x00 ; '.'
000000000000137a         db  0x00 ; '.'
000000000000137b         db  0x00 ; '.'
000000000000137c         db  0x11 ; '.'
000000000000137d         db  0x00 ; '.'
000000000000137e         db  0x00 ; '.'
000000000000137f         db  0x00 ; '.'
0000000000001380         db  0x00 ; '.'
0000000000001381         db  0x00 ; '.'
0000000000001382         db  0x00 ; '.'
0000000000001383         db  0x00 ; '.'
0000000000001384         db  0x00 ; '.'
0000000000001385         db  0x00 ; '.'
0000000000001386         db  0x00 ; '.'
0000000000001387         db  0x00 ; '.'
0000000000001388         db  0x40 ; '@'
0000000000001389         db  0x8e ; '.'
000000000000138a         db  0x21 ; '!'
000000000000138b         db  0x00 ; '.'
000000000000138c         db  0x00 ; '.'
000000000000138d         db  0x00 ; '.'
000000000000138e         db  0x00 ; '.'
000000000000138f         db  0x00 ; '.'
0000000000001390         db  0x07 ; '.'
0000000000001391         db  0x00 ; '.'
0000000000001392         db  0x00 ; '.'
0000000000001393         db  0x00 ; '.'
0000000000001394         db  0x12 ; '.'
0000000000001395         db  0x00 ; '.'
0000000000001396         db  0x00 ; '.'
0000000000001397         db  0x00 ; '.'
0000000000001398         db  0x00 ; '.'
0000000000001399         db  0x00 ; '.'
000000000000139a         db  0x00 ; '.'
000000000000139b         db  0x00 ; '.'
000000000000139c         db  0x00 ; '.'
000000000000139d         db  0x00 ; '.'
000000000000139e         db  0x00 ; '.'
000000000000139f         db  0x00 ; '.'
00000000000013a0         db  0x48 ; 'H'
00000000000013a1         db  0x8e ; '.'
00000000000013a2         db  0x21 ; '!'
00000000000013a3         db  0x00 ; '.'
00000000000013a4         db  0x00 ; '.'
00000000000013a5         db  0x00 ; '.'
00000000000013a6         db  0x00 ; '.'
00000000000013a7         db  0x00 ; '.'
00000000000013a8         db  0x07 ; '.'
00000000000013a9         db  0x00 ; '.'
00000000000013aa         db  0x00 ; '.'
00000000000013ab         db  0x00 ; '.'
00000000000013ac         db  0x13 ; '.'
00000000000013ad         db  0x00 ; '.'
00000000000013ae         db  0x00 ; '.'
00000000000013af         db  0x00 ; '.'
00000000000013b0         db  0x00 ; '.'
00000000000013b1         db  0x00 ; '.'
00000000000013b2         db  0x00 ; '.'
00000000000013b3         db  0x00 ; '.'
00000000000013b4         db  0x00 ; '.'
00000000000013b5         db  0x00 ; '.'
00000000000013b6         db  0x00 ; '.'
00000000000013b7         db  0x00 ; '.'
00000000000013b8         db  0x50 ; 'P'
00000000000013b9         db  0x8e ; '.'
00000000000013ba         db  0x21 ; '!'
00000000000013bb         db  0x00 ; '.'
00000000000013bc         db  0x00 ; '.'
00000000000013bd         db  0x00 ; '.'
00000000000013be         db  0x00 ; '.'
00000000000013bf         db  0x00 ; '.'
00000000000013c0         db  0x07 ; '.'
00000000000013c1         db  0x00 ; '.'
00000000000013c2         db  0x00 ; '.'
00000000000013c3         db  0x00 ; '.'
00000000000013c4         db  0x14 ; '.'
00000000000013c5         db  0x00 ; '.'
00000000000013c6         db  0x00 ; '.'
00000000000013c7         db  0x00 ; '.'
00000000000013c8         db  0x00 ; '.'
00000000000013c9         db  0x00 ; '.'
00000000000013ca         db  0x00 ; '.'
00000000000013cb         db  0x00 ; '.'
00000000000013cc         db  0x00 ; '.'
00000000000013cd         db  0x00 ; '.'
00000000000013ce         db  0x00 ; '.'
00000000000013cf         db  0x00 ; '.'
00000000000013d0         db  0x58 ; 'X'
00000000000013d1         db  0x8e ; '.'
00000000000013d2         db  0x21 ; '!'
00000000000013d3         db  0x00 ; '.'
00000000000013d4         db  0x00 ; '.'
00000000000013d5         db  0x00 ; '.'
00000000000013d6         db  0x00 ; '.'
00000000000013d7         db  0x00 ; '.'
00000000000013d8         db  0x07 ; '.'
00000000000013d9         db  0x00 ; '.'
00000000000013da         db  0x00 ; '.'
00000000000013db         db  0x00 ; '.'
00000000000013dc         db  0x15 ; '.'
00000000000013dd         db  0x00 ; '.'
00000000000013de         db  0x00 ; '.'
00000000000013df         db  0x00 ; '.'
00000000000013e0         db  0x00 ; '.'
00000000000013e1         db  0x00 ; '.'
00000000000013e2         db  0x00 ; '.'
00000000000013e3         db  0x00 ; '.'
00000000000013e4         db  0x00 ; '.'
00000000000013e5         db  0x00 ; '.'
00000000000013e6         db  0x00 ; '.'
00000000000013e7         db  0x00 ; '.'
00000000000013e8         db  0x60 ; '`'
00000000000013e9         db  0x8e ; '.'
00000000000013ea         db  0x21 ; '!'
00000000000013eb         db  0x00 ; '.'
00000000000013ec         db  0x00 ; '.'
00000000000013ed         db  0x00 ; '.'
00000000000013ee         db  0x00 ; '.'
00000000000013ef         db  0x00 ; '.'
00000000000013f0         db  0x07 ; '.'
00000000000013f1         db  0x00 ; '.'
00000000000013f2         db  0x00 ; '.'
00000000000013f3         db  0x00 ; '.'
00000000000013f4         db  0x16 ; '.'
00000000000013f5         db  0x00 ; '.'
00000000000013f6         db  0x00 ; '.'
00000000000013f7         db  0x00 ; '.'
00000000000013f8         db  0x00 ; '.'
00000000000013f9         db  0x00 ; '.'
00000000000013fa         db  0x00 ; '.'
00000000000013fb         db  0x00 ; '.'
00000000000013fc         db  0x00 ; '.'
00000000000013fd         db  0x00 ; '.'
00000000000013fe         db  0x00 ; '.'
00000000000013ff         db  0x00 ; '.'
0000000000001400         db  0x68 ; 'h'
0000000000001401         db  0x8e ; '.'
0000000000001402         db  0x21 ; '!'
0000000000001403         db  0x00 ; '.'
0000000000001404         db  0x00 ; '.'
0000000000001405         db  0x00 ; '.'
0000000000001406         db  0x00 ; '.'
0000000000001407         db  0x00 ; '.'
0000000000001408         db  0x07 ; '.'
0000000000001409         db  0x00 ; '.'
000000000000140a         db  0x00 ; '.'
000000000000140b         db  0x00 ; '.'
000000000000140c         db  0x17 ; '.'
000000000000140d         db  0x00 ; '.'
000000000000140e         db  0x00 ; '.'
000000000000140f         db  0x00 ; '.'
0000000000001410         db  0x00 ; '.'
0000000000001411         db  0x00 ; '.'
0000000000001412         db  0x00 ; '.'
0000000000001413         db  0x00 ; '.'
0000000000001414         db  0x00 ; '.'
0000000000001415         db  0x00 ; '.'
0000000000001416         db  0x00 ; '.'
0000000000001417         db  0x00 ; '.'
0000000000001418         db  0x70 ; 'p'
0000000000001419         db  0x8e ; '.'
000000000000141a         db  0x21 ; '!'
000000000000141b         db  0x00 ; '.'
000000000000141c         db  0x00 ; '.'
000000000000141d         db  0x00 ; '.'
000000000000141e         db  0x00 ; '.'
000000000000141f         db  0x00 ; '.'
0000000000001420         db  0x07 ; '.'
0000000000001421         db  0x00 ; '.'
0000000000001422         db  0x00 ; '.'
0000000000001423         db  0x00 ; '.'
0000000000001424         db  0x18 ; '.'
0000000000001425         db  0x00 ; '.'
0000000000001426         db  0x00 ; '.'
0000000000001427         db  0x00 ; '.'
0000000000001428         db  0x00 ; '.'
0000000000001429         db  0x00 ; '.'
000000000000142a         db  0x00 ; '.'
000000000000142b         db  0x00 ; '.'
000000000000142c         db  0x00 ; '.'
000000000000142d         db  0x00 ; '.'
000000000000142e         db  0x00 ; '.'
000000000000142f         db  0x00 ; '.'
0000000000001430         db  0x78 ; 'x'
0000000000001431         db  0x8e ; '.'
0000000000001432         db  0x21 ; '!'
0000000000001433         db  0x00 ; '.'
0000000000001434         db  0x00 ; '.'
0000000000001435         db  0x00 ; '.'
0000000000001436         db  0x00 ; '.'
0000000000001437         db  0x00 ; '.'
0000000000001438         db  0x07 ; '.'
0000000000001439         db  0x00 ; '.'
000000000000143a         db  0x00 ; '.'
000000000000143b         db  0x00 ; '.'
000000000000143c         db  0x19 ; '.'
000000000000143d         db  0x00 ; '.'
000000000000143e         db  0x00 ; '.'
000000000000143f         db  0x00 ; '.'
0000000000001440         db  0x00 ; '.'
0000000000001441         db  0x00 ; '.'
0000000000001442         db  0x00 ; '.'
0000000000001443         db  0x00 ; '.'
0000000000001444         db  0x00 ; '.'
0000000000001445         db  0x00 ; '.'
0000000000001446         db  0x00 ; '.'
0000000000001447         db  0x00 ; '.'
0000000000001448         db  0x80 ; '.'
0000000000001449         db  0x8e ; '.'
000000000000144a         db  0x21 ; '!'
000000000000144b         db  0x00 ; '.'
000000000000144c         db  0x00 ; '.'
000000000000144d         db  0x00 ; '.'
000000000000144e         db  0x00 ; '.'
000000000000144f         db  0x00 ; '.'
0000000000001450         db  0x07 ; '.'
0000000000001451         db  0x00 ; '.'
0000000000001452         db  0x00 ; '.'
0000000000001453         db  0x00 ; '.'
0000000000001454         db  0x1a ; '.'
0000000000001455         db  0x00 ; '.'
0000000000001456         db  0x00 ; '.'
0000000000001457         db  0x00 ; '.'
0000000000001458         db  0x00 ; '.'
0000000000001459         db  0x00 ; '.'
000000000000145a         db  0x00 ; '.'
000000000000145b         db  0x00 ; '.'
000000000000145c         db  0x00 ; '.'
000000000000145d         db  0x00 ; '.'
000000000000145e         db  0x00 ; '.'
000000000000145f         db  0x00 ; '.'
0000000000001460         db  0x88 ; '.'
0000000000001461         db  0x8e ; '.'
0000000000001462         db  0x21 ; '!'
0000000000001463         db  0x00 ; '.'
0000000000001464         db  0x00 ; '.'
0000000000001465         db  0x00 ; '.'
0000000000001466         db  0x00 ; '.'
0000000000001467         db  0x00 ; '.'
0000000000001468         db  0x07 ; '.'
0000000000001469         db  0x00 ; '.'
000000000000146a         db  0x00 ; '.'
000000000000146b         db  0x00 ; '.'
000000000000146c         db  0x1b ; '.'
000000000000146d         db  0x00 ; '.'
000000000000146e         db  0x00 ; '.'
000000000000146f         db  0x00 ; '.'
0000000000001470         db  0x00 ; '.'
0000000000001471         db  0x00 ; '.'
0000000000001472         db  0x00 ; '.'
0000000000001473         db  0x00 ; '.'
0000000000001474         db  0x00 ; '.'
0000000000001475         db  0x00 ; '.'
0000000000001476         db  0x00 ; '.'
0000000000001477         db  0x00 ; '.'
0000000000001478         db  0x90 ; '.'
0000000000001479         db  0x8e ; '.'
000000000000147a         db  0x21 ; '!'
000000000000147b         db  0x00 ; '.'
000000000000147c         db  0x00 ; '.'
000000000000147d         db  0x00 ; '.'
000000000000147e         db  0x00 ; '.'
000000000000147f         db  0x00 ; '.'
0000000000001480         db  0x07 ; '.'
0000000000001481         db  0x00 ; '.'
0000000000001482         db  0x00 ; '.'
0000000000001483         db  0x00 ; '.'
0000000000001484         db  0x1c ; '.'
0000000000001485         db  0x00 ; '.'
0000000000001486         db  0x00 ; '.'
0000000000001487         db  0x00 ; '.'
0000000000001488         db  0x00 ; '.'
0000000000001489         db  0x00 ; '.'
000000000000148a         db  0x00 ; '.'
000000000000148b         db  0x00 ; '.'
000000000000148c         db  0x00 ; '.'
000000000000148d         db  0x00 ; '.'
000000000000148e         db  0x00 ; '.'
000000000000148f         db  0x00 ; '.'
0000000000001490         db  0x98 ; '.'
0000000000001491         db  0x8e ; '.'
0000000000001492         db  0x21 ; '!'
0000000000001493         db  0x00 ; '.'
0000000000001494         db  0x00 ; '.'
0000000000001495         db  0x00 ; '.'
0000000000001496         db  0x00 ; '.'
0000000000001497         db  0x00 ; '.'
0000000000001498         db  0x07 ; '.'
0000000000001499         db  0x00 ; '.'
000000000000149a         db  0x00 ; '.'
000000000000149b         db  0x00 ; '.'
000000000000149c         db  0x1d ; '.'
000000000000149d         db  0x00 ; '.'
000000000000149e         db  0x00 ; '.'
000000000000149f         db  0x00 ; '.'
00000000000014a0         db  0x00 ; '.'
00000000000014a1         db  0x00 ; '.'
00000000000014a2         db  0x00 ; '.'
00000000000014a3         db  0x00 ; '.'
00000000000014a4         db  0x00 ; '.'
00000000000014a5         db  0x00 ; '.'
00000000000014a6         db  0x00 ; '.'
00000000000014a7         db  0x00 ; '.'
00000000000014a8         db  0xa0 ; '.'
00000000000014a9         db  0x8e ; '.'
00000000000014aa         db  0x21 ; '!'
00000000000014ab         db  0x00 ; '.'
00000000000014ac         db  0x00 ; '.'
00000000000014ad         db  0x00 ; '.'
00000000000014ae         db  0x00 ; '.'
00000000000014af         db  0x00 ; '.'
00000000000014b0         db  0x07 ; '.'
00000000000014b1         db  0x00 ; '.'
00000000000014b2         db  0x00 ; '.'
00000000000014b3         db  0x00 ; '.'
00000000000014b4         db  0x1e ; '.'
00000000000014b5         db  0x00 ; '.'
00000000000014b6         db  0x00 ; '.'
00000000000014b7         db  0x00 ; '.'
00000000000014b8         db  0x00 ; '.'
00000000000014b9         db  0x00 ; '.'
00000000000014ba         db  0x00 ; '.'
00000000000014bb         db  0x00 ; '.'
00000000000014bc         db  0x00 ; '.'
00000000000014bd         db  0x00 ; '.'
00000000000014be         db  0x00 ; '.'
00000000000014bf         db  0x00 ; '.'
00000000000014c0         db  0xa8 ; '.'
00000000000014c1         db  0x8e ; '.'
00000000000014c2         db  0x21 ; '!'
00000000000014c3         db  0x00 ; '.'
00000000000014c4         db  0x00 ; '.'
00000000000014c5         db  0x00 ; '.'
00000000000014c6         db  0x00 ; '.'
00000000000014c7         db  0x00 ; '.'
00000000000014c8         db  0x07 ; '.'
00000000000014c9         db  0x00 ; '.'
00000000000014ca         db  0x00 ; '.'
00000000000014cb         db  0x00 ; '.'
00000000000014cc         db  0x1f ; '.'
00000000000014cd         db  0x00 ; '.'
00000000000014ce         db  0x00 ; '.'
00000000000014cf         db  0x00 ; '.'
00000000000014d0         db  0x00 ; '.'
00000000000014d1         db  0x00 ; '.'
00000000000014d2         db  0x00 ; '.'
00000000000014d3         db  0x00 ; '.'
00000000000014d4         db  0x00 ; '.'
00000000000014d5         db  0x00 ; '.'
00000000000014d6         db  0x00 ; '.'
00000000000014d7         db  0x00 ; '.'
00000000000014d8         db  0xb0 ; '.'
00000000000014d9         db  0x8e ; '.'
00000000000014da         db  0x21 ; '!'
00000000000014db         db  0x00 ; '.'
00000000000014dc         db  0x00 ; '.'
00000000000014dd         db  0x00 ; '.'
00000000000014de         db  0x00 ; '.'
00000000000014df         db  0x00 ; '.'
00000000000014e0         db  0x07 ; '.'
00000000000014e1         db  0x00 ; '.'
00000000000014e2         db  0x00 ; '.'
00000000000014e3         db  0x00 ; '.'
00000000000014e4         db  0x21 ; '!'
00000000000014e5         db  0x00 ; '.'
00000000000014e6         db  0x00 ; '.'
00000000000014e7         db  0x00 ; '.'
00000000000014e8         db  0x00 ; '.'
00000000000014e9         db  0x00 ; '.'
00000000000014ea         db  0x00 ; '.'
00000000000014eb         db  0x00 ; '.'
00000000000014ec         db  0x00 ; '.'
00000000000014ed         db  0x00 ; '.'
00000000000014ee         db  0x00 ; '.'
00000000000014ef         db  0x00 ; '.'
00000000000014f0         db  0xb8 ; '.'
00000000000014f1         db  0x8e ; '.'
00000000000014f2         db  0x21 ; '!'
00000000000014f3         db  0x00 ; '.'
00000000000014f4         db  0x00 ; '.'
00000000000014f5         db  0x00 ; '.'
00000000000014f6         db  0x00 ; '.'
00000000000014f7         db  0x00 ; '.'
00000000000014f8         db  0x07 ; '.'
00000000000014f9         db  0x00 ; '.'
00000000000014fa         db  0x00 ; '.'
00000000000014fb         db  0x00 ; '.'
00000000000014fc         db  0x22 ; '"'
00000000000014fd         db  0x00 ; '.'
00000000000014fe         db  0x00 ; '.'
00000000000014ff         db  0x00 ; '.'
0000000000001500         db  0x00 ; '.'
0000000000001501         db  0x00 ; '.'
0000000000001502         db  0x00 ; '.'
0000000000001503         db  0x00 ; '.'
0000000000001504         db  0x00 ; '.'
0000000000001505         db  0x00 ; '.'
0000000000001506         db  0x00 ; '.'
0000000000001507         db  0x00 ; '.'
0000000000001508         db  0xc0 ; '.'
0000000000001509         db  0x8e ; '.'
000000000000150a         db  0x21 ; '!'
000000000000150b         db  0x00 ; '.'
000000000000150c         db  0x00 ; '.'
000000000000150d         db  0x00 ; '.'
000000000000150e         db  0x00 ; '.'
000000000000150f         db  0x00 ; '.'
0000000000001510         db  0x07 ; '.'
0000000000001511         db  0x00 ; '.'
0000000000001512         db  0x00 ; '.'
0000000000001513         db  0x00 ; '.'
0000000000001514         db  0x23 ; '#'
0000000000001515         db  0x00 ; '.'
0000000000001516         db  0x00 ; '.'
0000000000001517         db  0x00 ; '.'
0000000000001518         db  0x00 ; '.'
0000000000001519         db  0x00 ; '.'
000000000000151a         db  0x00 ; '.'
000000000000151b         db  0x00 ; '.'
000000000000151c         db  0x00 ; '.'
000000000000151d         db  0x00 ; '.'
000000000000151e         db  0x00 ; '.'
000000000000151f         db  0x00 ; '.'
0000000000001520         db  0xc8 ; '.'
0000000000001521         db  0x8e ; '.'
0000000000001522         db  0x21 ; '!'
0000000000001523         db  0x00 ; '.'
0000000000001524         db  0x00 ; '.'
0000000000001525         db  0x00 ; '.'
0000000000001526         db  0x00 ; '.'
0000000000001527         db  0x00 ; '.'
0000000000001528         db  0x07 ; '.'
0000000000001529         db  0x00 ; '.'
000000000000152a         db  0x00 ; '.'
000000000000152b         db  0x00 ; '.'
000000000000152c         db  0x24 ; '$'
000000000000152d         db  0x00 ; '.'
000000000000152e         db  0x00 ; '.'
000000000000152f         db  0x00 ; '.'
0000000000001530         db  0x00 ; '.'
0000000000001531         db  0x00 ; '.'
0000000000001532         db  0x00 ; '.'
0000000000001533         db  0x00 ; '.'
0000000000001534         db  0x00 ; '.'
0000000000001535         db  0x00 ; '.'
0000000000001536         db  0x00 ; '.'
0000000000001537         db  0x00 ; '.'
0000000000001538         db  0xd0 ; '.'
0000000000001539         db  0x8e ; '.'
000000000000153a         db  0x21 ; '!'
000000000000153b         db  0x00 ; '.'
000000000000153c         db  0x00 ; '.'
000000000000153d         db  0x00 ; '.'
000000000000153e         db  0x00 ; '.'
000000000000153f         db  0x00 ; '.'
0000000000001540         db  0x07 ; '.'
0000000000001541         db  0x00 ; '.'
0000000000001542         db  0x00 ; '.'
0000000000001543         db  0x00 ; '.'
0000000000001544         db  0x25 ; '%'
0000000000001545         db  0x00 ; '.'
0000000000001546         db  0x00 ; '.'
0000000000001547         db  0x00 ; '.'
0000000000001548         db  0x00 ; '.'
0000000000001549         db  0x00 ; '.'
000000000000154a         db  0x00 ; '.'
000000000000154b         db  0x00 ; '.'
000000000000154c         db  0x00 ; '.'
000000000000154d         db  0x00 ; '.'
000000000000154e         db  0x00 ; '.'
000000000000154f         db  0x00 ; '.'
0000000000001550         db  0xd8 ; '.'
0000000000001551         db  0x8e ; '.'
0000000000001552         db  0x21 ; '!'
0000000000001553         db  0x00 ; '.'
0000000000001554         db  0x00 ; '.'
0000000000001555         db  0x00 ; '.'
0000000000001556         db  0x00 ; '.'
0000000000001557         db  0x00 ; '.'
0000000000001558         db  0x07 ; '.'
0000000000001559         db  0x00 ; '.'
000000000000155a         db  0x00 ; '.'
000000000000155b         db  0x00 ; '.'
000000000000155c         db  0x27 ; '''
000000000000155d         db  0x00 ; '.'
000000000000155e         db  0x00 ; '.'
000000000000155f         db  0x00 ; '.'
0000000000001560         db  0x00 ; '.'
0000000000001561         db  0x00 ; '.'
0000000000001562         db  0x00 ; '.'
0000000000001563         db  0x00 ; '.'
0000000000001564         db  0x00 ; '.'
0000000000001565         db  0x00 ; '.'
0000000000001566         db  0x00 ; '.'
0000000000001567         db  0x00 ; '.'
0000000000001568         db  0xe0 ; '.'
0000000000001569         db  0x8e ; '.'
000000000000156a         db  0x21 ; '!'
000000000000156b         db  0x00 ; '.'
000000000000156c         db  0x00 ; '.'
000000000000156d         db  0x00 ; '.'
000000000000156e         db  0x00 ; '.'
000000000000156f         db  0x00 ; '.'
0000000000001570         db  0x07 ; '.'
0000000000001571         db  0x00 ; '.'
0000000000001572         db  0x00 ; '.'
0000000000001573         db  0x00 ; '.'
0000000000001574         db  0x28 ; '('
0000000000001575         db  0x00 ; '.'
0000000000001576         db  0x00 ; '.'
0000000000001577         db  0x00 ; '.'
0000000000001578         db  0x00 ; '.'
0000000000001579         db  0x00 ; '.'
000000000000157a         db  0x00 ; '.'
000000000000157b         db  0x00 ; '.'
000000000000157c         db  0x00 ; '.'
000000000000157d         db  0x00 ; '.'
000000000000157e         db  0x00 ; '.'
000000000000157f         db  0x00 ; '.'
0000000000001580         db  0xe8 ; '.'
0000000000001581         db  0x8e ; '.'
0000000000001582         db  0x21 ; '!'
0000000000001583         db  0x00 ; '.'
0000000000001584         db  0x00 ; '.'
0000000000001585         db  0x00 ; '.'
0000000000001586         db  0x00 ; '.'
0000000000001587         db  0x00 ; '.'
0000000000001588         db  0x07 ; '.'
0000000000001589         db  0x00 ; '.'
000000000000158a         db  0x00 ; '.'
000000000000158b         db  0x00 ; '.'
000000000000158c         db  0x29 ; ')'
000000000000158d         db  0x00 ; '.'
000000000000158e         db  0x00 ; '.'
000000000000158f         db  0x00 ; '.'
0000000000001590         db  0x00 ; '.'
0000000000001591         db  0x00 ; '.'
0000000000001592         db  0x00 ; '.'
0000000000001593         db  0x00 ; '.'
0000000000001594         db  0x00 ; '.'
0000000000001595         db  0x00 ; '.'
0000000000001596         db  0x00 ; '.'
0000000000001597         db  0x00 ; '.'
0000000000001598         db  0xf0 ; '.'
0000000000001599         db  0x8e ; '.'
000000000000159a         db  0x21 ; '!'
000000000000159b         db  0x00 ; '.'
000000000000159c         db  0x00 ; '.'
000000000000159d         db  0x00 ; '.'
000000000000159e         db  0x00 ; '.'
000000000000159f         db  0x00 ; '.'
00000000000015a0         db  0x07 ; '.'
00000000000015a1         db  0x00 ; '.'
00000000000015a2         db  0x00 ; '.'
00000000000015a3         db  0x00 ; '.'
00000000000015a4         db  0x2a ; '*'
00000000000015a5         db  0x00 ; '.'
00000000000015a6         db  0x00 ; '.'
00000000000015a7         db  0x00 ; '.'
00000000000015a8         db  0x00 ; '.'
00000000000015a9         db  0x00 ; '.'
00000000000015aa         db  0x00 ; '.'
00000000000015ab         db  0x00 ; '.'
00000000000015ac         db  0x00 ; '.'
00000000000015ad         db  0x00 ; '.'
00000000000015ae         db  0x00 ; '.'
00000000000015af         db  0x00 ; '.'
00000000000015b0         db  0xf8 ; '.'
00000000000015b1         db  0x8e ; '.'
00000000000015b2         db  0x21 ; '!'
00000000000015b3         db  0x00 ; '.'
00000000000015b4         db  0x00 ; '.'
00000000000015b5         db  0x00 ; '.'
00000000000015b6         db  0x00 ; '.'
00000000000015b7         db  0x00 ; '.'
00000000000015b8         db  0x07 ; '.'
00000000000015b9         db  0x00 ; '.'
00000000000015ba         db  0x00 ; '.'
00000000000015bb         db  0x00 ; '.'
00000000000015bc         db  0x2b ; '+'
00000000000015bd         db  0x00 ; '.'
00000000000015be         db  0x00 ; '.'
00000000000015bf         db  0x00 ; '.'
00000000000015c0         db  0x00 ; '.'
00000000000015c1         db  0x00 ; '.'
00000000000015c2         db  0x00 ; '.'
00000000000015c3         db  0x00 ; '.'
00000000000015c4         db  0x00 ; '.'
00000000000015c5         db  0x00 ; '.'
00000000000015c6         db  0x00 ; '.'
00000000000015c7         db  0x00 ; '.'
00000000000015c8         db  0x00 ; '.'
00000000000015c9         db  0x8f ; '.'
00000000000015ca         db  0x21 ; '!'
00000000000015cb         db  0x00 ; '.'
00000000000015cc         db  0x00 ; '.'
00000000000015cd         db  0x00 ; '.'
00000000000015ce         db  0x00 ; '.'
00000000000015cf         db  0x00 ; '.'
00000000000015d0         db  0x07 ; '.'
00000000000015d1         db  0x00 ; '.'
00000000000015d2         db  0x00 ; '.'
00000000000015d3         db  0x00 ; '.'
00000000000015d4         db  0x2c ; ','
00000000000015d5         db  0x00 ; '.'
00000000000015d6         db  0x00 ; '.'
00000000000015d7         db  0x00 ; '.'
00000000000015d8         db  0x00 ; '.'
00000000000015d9         db  0x00 ; '.'
00000000000015da         db  0x00 ; '.'
00000000000015db         db  0x00 ; '.'
00000000000015dc         db  0x00 ; '.'
00000000000015dd         db  0x00 ; '.'
00000000000015de         db  0x00 ; '.'
00000000000015df         db  0x00 ; '.'
00000000000015e0         db  0x08 ; '.'
00000000000015e1         db  0x8f ; '.'
00000000000015e2         db  0x21 ; '!'
00000000000015e3         db  0x00 ; '.'
00000000000015e4         db  0x00 ; '.'
00000000000015e5         db  0x00 ; '.'
00000000000015e6         db  0x00 ; '.'
00000000000015e7         db  0x00 ; '.'
00000000000015e8         db  0x07 ; '.'
00000000000015e9         db  0x00 ; '.'
00000000000015ea         db  0x00 ; '.'
00000000000015eb         db  0x00 ; '.'
00000000000015ec         db  0x2d ; '-'
00000000000015ed         db  0x00 ; '.'
00000000000015ee         db  0x00 ; '.'
00000000000015ef         db  0x00 ; '.'
00000000000015f0         db  0x00 ; '.'
00000000000015f1         db  0x00 ; '.'
00000000000015f2         db  0x00 ; '.'
00000000000015f3         db  0x00 ; '.'
00000000000015f4         db  0x00 ; '.'
00000000000015f5         db  0x00 ; '.'
00000000000015f6         db  0x00 ; '.'
00000000000015f7         db  0x00 ; '.'
00000000000015f8         db  0x10 ; '.'
00000000000015f9         db  0x8f ; '.'
00000000000015fa         db  0x21 ; '!'
00000000000015fb         db  0x00 ; '.'
00000000000015fc         db  0x00 ; '.'
00000000000015fd         db  0x00 ; '.'
00000000000015fe         db  0x00 ; '.'
00000000000015ff         db  0x00 ; '.'
0000000000001600         db  0x07 ; '.'
0000000000001601         db  0x00 ; '.'
0000000000001602         db  0x00 ; '.'
0000000000001603         db  0x00 ; '.'
0000000000001604         db  0x2e ; '.'
0000000000001605         db  0x00 ; '.'
0000000000001606         db  0x00 ; '.'
0000000000001607         db  0x00 ; '.'
0000000000001608         db  0x00 ; '.'
0000000000001609         db  0x00 ; '.'
000000000000160a         db  0x00 ; '.'
000000000000160b         db  0x00 ; '.'
000000000000160c         db  0x00 ; '.'
000000000000160d         db  0x00 ; '.'
000000000000160e         db  0x00 ; '.'
000000000000160f         db  0x00 ; '.'
0000000000001610         db  0x18 ; '.'
0000000000001611         db  0x8f ; '.'
0000000000001612         db  0x21 ; '!'
0000000000001613         db  0x00 ; '.'
0000000000001614         db  0x00 ; '.'
0000000000001615         db  0x00 ; '.'
0000000000001616         db  0x00 ; '.'
0000000000001617         db  0x00 ; '.'
0000000000001618         db  0x07 ; '.'
0000000000001619         db  0x00 ; '.'
000000000000161a         db  0x00 ; '.'
000000000000161b         db  0x00 ; '.'
000000000000161c         db  0x2f ; '/'
000000000000161d         db  0x00 ; '.'
000000000000161e         db  0x00 ; '.'
000000000000161f         db  0x00 ; '.'
0000000000001620         db  0x00 ; '.'
0000000000001621         db  0x00 ; '.'
0000000000001622         db  0x00 ; '.'
0000000000001623         db  0x00 ; '.'
0000000000001624         db  0x00 ; '.'
0000000000001625         db  0x00 ; '.'
0000000000001626         db  0x00 ; '.'
0000000000001627         db  0x00 ; '.'
0000000000001628         db  0x20 ; ' '
0000000000001629         db  0x8f ; '.'
000000000000162a         db  0x21 ; '!'
000000000000162b         db  0x00 ; '.'
000000000000162c         db  0x00 ; '.'
000000000000162d         db  0x00 ; '.'
000000000000162e         db  0x00 ; '.'
000000000000162f         db  0x00 ; '.'
0000000000001630         db  0x07 ; '.'
0000000000001631         db  0x00 ; '.'
0000000000001632         db  0x00 ; '.'
0000000000001633         db  0x00 ; '.'
0000000000001634         db  0x30 ; '0'
0000000000001635         db  0x00 ; '.'
0000000000001636         db  0x00 ; '.'
0000000000001637         db  0x00 ; '.'
0000000000001638         db  0x00 ; '.'
0000000000001639         db  0x00 ; '.'
000000000000163a         db  0x00 ; '.'
000000000000163b         db  0x00 ; '.'
000000000000163c         db  0x00 ; '.'
000000000000163d         db  0x00 ; '.'
000000000000163e         db  0x00 ; '.'
000000000000163f         db  0x00 ; '.'
0000000000001640         db  0x28 ; '('
0000000000001641         db  0x8f ; '.'
0000000000001642         db  0x21 ; '!'
0000000000001643         db  0x00 ; '.'
0000000000001644         db  0x00 ; '.'
0000000000001645         db  0x00 ; '.'
0000000000001646         db  0x00 ; '.'
0000000000001647         db  0x00 ; '.'
0000000000001648         db  0x07 ; '.'
0000000000001649         db  0x00 ; '.'
000000000000164a         db  0x00 ; '.'
000000000000164b         db  0x00 ; '.'
000000000000164c         db  0x31 ; '1'
000000000000164d         db  0x00 ; '.'
000000000000164e         db  0x00 ; '.'
000000000000164f         db  0x00 ; '.'
0000000000001650         db  0x00 ; '.'
0000000000001651         db  0x00 ; '.'
0000000000001652         db  0x00 ; '.'
0000000000001653         db  0x00 ; '.'
0000000000001654         db  0x00 ; '.'
0000000000001655         db  0x00 ; '.'
0000000000001656         db  0x00 ; '.'
0000000000001657         db  0x00 ; '.'
0000000000001658         db  0x30 ; '0'
0000000000001659         db  0x8f ; '.'
000000000000165a         db  0x21 ; '!'
000000000000165b         db  0x00 ; '.'
000000000000165c         db  0x00 ; '.'
000000000000165d         db  0x00 ; '.'
000000000000165e         db  0x00 ; '.'
000000000000165f         db  0x00 ; '.'
0000000000001660         db  0x07 ; '.'
0000000000001661         db  0x00 ; '.'
0000000000001662         db  0x00 ; '.'
0000000000001663         db  0x00 ; '.'
0000000000001664         db  0x32 ; '2'
0000000000001665         db  0x00 ; '.'
0000000000001666         db  0x00 ; '.'
0000000000001667         db  0x00 ; '.'
0000000000001668         db  0x00 ; '.'
0000000000001669         db  0x00 ; '.'
000000000000166a         db  0x00 ; '.'
000000000000166b         db  0x00 ; '.'
000000000000166c         db  0x00 ; '.'
000000000000166d         db  0x00 ; '.'
000000000000166e         db  0x00 ; '.'
000000000000166f         db  0x00 ; '.'
0000000000001670         db  0x38 ; '8'
0000000000001671         db  0x8f ; '.'
0000000000001672         db  0x21 ; '!'
0000000000001673         db  0x00 ; '.'
0000000000001674         db  0x00 ; '.'
0000000000001675         db  0x00 ; '.'
0000000000001676         db  0x00 ; '.'
0000000000001677         db  0x00 ; '.'
0000000000001678         db  0x07 ; '.'
0000000000001679         db  0x00 ; '.'
000000000000167a         db  0x00 ; '.'
000000000000167b         db  0x00 ; '.'
000000000000167c         db  0x33 ; '3'
000000000000167d         db  0x00 ; '.'
000000000000167e         db  0x00 ; '.'
000000000000167f         db  0x00 ; '.'
0000000000001680         db  0x00 ; '.'
0000000000001681         db  0x00 ; '.'
0000000000001682         db  0x00 ; '.'
0000000000001683         db  0x00 ; '.'
0000000000001684         db  0x00 ; '.'
0000000000001685         db  0x00 ; '.'
0000000000001686         db  0x00 ; '.'
0000000000001687         db  0x00 ; '.'
0000000000001688         db  0x40 ; '@'
0000000000001689         db  0x8f ; '.'
000000000000168a         db  0x21 ; '!'
000000000000168b         db  0x00 ; '.'
000000000000168c         db  0x00 ; '.'
000000000000168d         db  0x00 ; '.'
000000000000168e         db  0x00 ; '.'
000000000000168f         db  0x00 ; '.'
0000000000001690         db  0x07 ; '.'
0000000000001691         db  0x00 ; '.'
0000000000001692         db  0x00 ; '.'
0000000000001693         db  0x00 ; '.'
0000000000001694         db  0x34 ; '4'
0000000000001695         db  0x00 ; '.'
0000000000001696         db  0x00 ; '.'
0000000000001697         db  0x00 ; '.'
0000000000001698         db  0x00 ; '.'
0000000000001699         db  0x00 ; '.'
000000000000169a         db  0x00 ; '.'
000000000000169b         db  0x00 ; '.'
000000000000169c         db  0x00 ; '.'
000000000000169d         db  0x00 ; '.'
000000000000169e         db  0x00 ; '.'
000000000000169f         db  0x00 ; '.'
00000000000016a0         db  0x48 ; 'H'
00000000000016a1         db  0x8f ; '.'
00000000000016a2         db  0x21 ; '!'
00000000000016a3         db  0x00 ; '.'
00000000000016a4         db  0x00 ; '.'
00000000000016a5         db  0x00 ; '.'
00000000000016a6         db  0x00 ; '.'
00000000000016a7         db  0x00 ; '.'
00000000000016a8         db  0x07 ; '.'
00000000000016a9         db  0x00 ; '.'
00000000000016aa         db  0x00 ; '.'
00000000000016ab         db  0x00 ; '.'
00000000000016ac         db  0x35 ; '5'
00000000000016ad         db  0x00 ; '.'
00000000000016ae         db  0x00 ; '.'
00000000000016af         db  0x00 ; '.'
00000000000016b0         db  0x00 ; '.'
00000000000016b1         db  0x00 ; '.'
00000000000016b2         db  0x00 ; '.'
00000000000016b3         db  0x00 ; '.'
00000000000016b4         db  0x00 ; '.'
00000000000016b5         db  0x00 ; '.'
00000000000016b6         db  0x00 ; '.'
00000000000016b7         db  0x00 ; '.'
00000000000016b8         db  0x50 ; 'P'
00000000000016b9         db  0x8f ; '.'
00000000000016ba         db  0x21 ; '!'
00000000000016bb         db  0x00 ; '.'
00000000000016bc         db  0x00 ; '.'
00000000000016bd         db  0x00 ; '.'
00000000000016be         db  0x00 ; '.'
00000000000016bf         db  0x00 ; '.'
00000000000016c0         db  0x07 ; '.'
00000000000016c1         db  0x00 ; '.'
00000000000016c2         db  0x00 ; '.'
00000000000016c3         db  0x00 ; '.'
00000000000016c4         db  0x36 ; '6'
00000000000016c5         db  0x00 ; '.'
00000000000016c6         db  0x00 ; '.'
00000000000016c7         db  0x00 ; '.'
00000000000016c8         db  0x00 ; '.'
00000000000016c9         db  0x00 ; '.'
00000000000016ca         db  0x00 ; '.'
00000000000016cb         db  0x00 ; '.'
00000000000016cc         db  0x00 ; '.'
00000000000016cd         db  0x00 ; '.'
00000000000016ce         db  0x00 ; '.'
00000000000016cf         db  0x00 ; '.'
00000000000016d0         db  0x58 ; 'X'
00000000000016d1         db  0x8f ; '.'
00000000000016d2         db  0x21 ; '!'
00000000000016d3         db  0x00 ; '.'
00000000000016d4         db  0x00 ; '.'
00000000000016d5         db  0x00 ; '.'
00000000000016d6         db  0x00 ; '.'
00000000000016d7         db  0x00 ; '.'
00000000000016d8         db  0x07 ; '.'
00000000000016d9         db  0x00 ; '.'
00000000000016da         db  0x00 ; '.'
00000000000016db         db  0x00 ; '.'
00000000000016dc         db  0x37 ; '7'
00000000000016dd         db  0x00 ; '.'
00000000000016de         db  0x00 ; '.'
00000000000016df         db  0x00 ; '.'
00000000000016e0         db  0x00 ; '.'
00000000000016e1         db  0x00 ; '.'
00000000000016e2         db  0x00 ; '.'
00000000000016e3         db  0x00 ; '.'
00000000000016e4         db  0x00 ; '.'
00000000000016e5         db  0x00 ; '.'
00000000000016e6         db  0x00 ; '.'
00000000000016e7         db  0x00 ; '.'
00000000000016e8         db  0x60 ; '`'
00000000000016e9         db  0x8f ; '.'
00000000000016ea         db  0x21 ; '!'
00000000000016eb         db  0x00 ; '.'
00000000000016ec         db  0x00 ; '.'
00000000000016ed         db  0x00 ; '.'
00000000000016ee         db  0x00 ; '.'
00000000000016ef         db  0x00 ; '.'
00000000000016f0         db  0x07 ; '.'
00000000000016f1         db  0x00 ; '.'
00000000000016f2         db  0x00 ; '.'
00000000000016f3         db  0x00 ; '.'
00000000000016f4         db  0x38 ; '8'
00000000000016f5         db  0x00 ; '.'
00000000000016f6         db  0x00 ; '.'
00000000000016f7         db  0x00 ; '.'
00000000000016f8         db  0x00 ; '.'
00000000000016f9         db  0x00 ; '.'
00000000000016fa         db  0x00 ; '.'
00000000000016fb         db  0x00 ; '.'
00000000000016fc         db  0x00 ; '.'
00000000000016fd         db  0x00 ; '.'
00000000000016fe         db  0x00 ; '.'
00000000000016ff         db  0x00 ; '.'
0000000000001700         db  0x68 ; 'h'
0000000000001701         db  0x8f ; '.'
0000000000001702         db  0x21 ; '!'
0000000000001703         db  0x00 ; '.'
0000000000001704         db  0x00 ; '.'
0000000000001705         db  0x00 ; '.'
0000000000001706         db  0x00 ; '.'
0000000000001707         db  0x00 ; '.'
0000000000001708         db  0x07 ; '.'
0000000000001709         db  0x00 ; '.'
000000000000170a         db  0x00 ; '.'
000000000000170b         db  0x00 ; '.'
000000000000170c         db  0x39 ; '9'
000000000000170d         db  0x00 ; '.'
000000000000170e         db  0x00 ; '.'
000000000000170f         db  0x00 ; '.'
0000000000001710         db  0x00 ; '.'
0000000000001711         db  0x00 ; '.'
0000000000001712         db  0x00 ; '.'
0000000000001713         db  0x00 ; '.'
0000000000001714         db  0x00 ; '.'
0000000000001715         db  0x00 ; '.'
0000000000001716         db  0x00 ; '.'
0000000000001717         db  0x00 ; '.'
0000000000001718         db  0x70 ; 'p'
0000000000001719         db  0x8f ; '.'
000000000000171a         db  0x21 ; '!'
000000000000171b         db  0x00 ; '.'
000000000000171c         db  0x00 ; '.'
000000000000171d         db  0x00 ; '.'
000000000000171e         db  0x00 ; '.'
000000000000171f         db  0x00 ; '.'
0000000000001720         db  0x07 ; '.'
0000000000001721         db  0x00 ; '.'
0000000000001722         db  0x00 ; '.'
0000000000001723         db  0x00 ; '.'
0000000000001724         db  0x3a ; ':'
0000000000001725         db  0x00 ; '.'
0000000000001726         db  0x00 ; '.'
0000000000001727         db  0x00 ; '.'
0000000000001728         db  0x00 ; '.'
0000000000001729         db  0x00 ; '.'
000000000000172a         db  0x00 ; '.'
000000000000172b         db  0x00 ; '.'
000000000000172c         db  0x00 ; '.'
000000000000172d         db  0x00 ; '.'
000000000000172e         db  0x00 ; '.'
000000000000172f         db  0x00 ; '.'
0000000000001730         db  0x78 ; 'x'
0000000000001731         db  0x8f ; '.'
0000000000001732         db  0x21 ; '!'
0000000000001733         db  0x00 ; '.'
0000000000001734         db  0x00 ; '.'
0000000000001735         db  0x00 ; '.'
0000000000001736         db  0x00 ; '.'
0000000000001737         db  0x00 ; '.'
0000000000001738         db  0x07 ; '.'
0000000000001739         db  0x00 ; '.'
000000000000173a         db  0x00 ; '.'
000000000000173b         db  0x00 ; '.'
000000000000173c         db  0x3b ; ';'
000000000000173d         db  0x00 ; '.'
000000000000173e         db  0x00 ; '.'
000000000000173f         db  0x00 ; '.'
0000000000001740         db  0x00 ; '.'
0000000000001741         db  0x00 ; '.'
0000000000001742         db  0x00 ; '.'
0000000000001743         db  0x00 ; '.'
0000000000001744         db  0x00 ; '.'
0000000000001745         db  0x00 ; '.'
0000000000001746         db  0x00 ; '.'
0000000000001747         db  0x00 ; '.'
0000000000001748         db  0x80 ; '.'
0000000000001749         db  0x8f ; '.'
000000000000174a         db  0x21 ; '!'
000000000000174b         db  0x00 ; '.'
000000000000174c         db  0x00 ; '.'
000000000000174d         db  0x00 ; '.'
000000000000174e         db  0x00 ; '.'
000000000000174f         db  0x00 ; '.'
0000000000001750         db  0x07 ; '.'
0000000000001751         db  0x00 ; '.'
0000000000001752         db  0x00 ; '.'
0000000000001753         db  0x00 ; '.'
0000000000001754         db  0x3c ; '<'
0000000000001755         db  0x00 ; '.'
0000000000001756         db  0x00 ; '.'
0000000000001757         db  0x00 ; '.'
0000000000001758         db  0x00 ; '.'
0000000000001759         db  0x00 ; '.'
000000000000175a         db  0x00 ; '.'
000000000000175b         db  0x00 ; '.'
000000000000175c         db  0x00 ; '.'
000000000000175d         db  0x00 ; '.'
000000000000175e         db  0x00 ; '.'
000000000000175f         db  0x00 ; '.'
0000000000001760         db  0x88 ; '.'
0000000000001761         db  0x8f ; '.'
0000000000001762         db  0x21 ; '!'
0000000000001763         db  0x00 ; '.'
0000000000001764         db  0x00 ; '.'
0000000000001765         db  0x00 ; '.'
0000000000001766         db  0x00 ; '.'
0000000000001767         db  0x00 ; '.'
0000000000001768         db  0x07 ; '.'
0000000000001769         db  0x00 ; '.'
000000000000176a         db  0x00 ; '.'
000000000000176b         db  0x00 ; '.'
000000000000176c         db  0x3d ; '='
000000000000176d         db  0x00 ; '.'
000000000000176e         db  0x00 ; '.'
000000000000176f         db  0x00 ; '.'
0000000000001770         db  0x00 ; '.'
0000000000001771         db  0x00 ; '.'
0000000000001772         db  0x00 ; '.'
0000000000001773         db  0x00 ; '.'
0000000000001774         db  0x00 ; '.'
0000000000001775         db  0x00 ; '.'
0000000000001776         db  0x00 ; '.'
0000000000001777         db  0x00 ; '.'
0000000000001778         db  0x90 ; '.'
0000000000001779         db  0x8f ; '.'
000000000000177a         db  0x21 ; '!'
000000000000177b         db  0x00 ; '.'
000000000000177c         db  0x00 ; '.'
000000000000177d         db  0x00 ; '.'
000000000000177e         db  0x00 ; '.'
000000000000177f         db  0x00 ; '.'
0000000000001780         db  0x07 ; '.'
0000000000001781         db  0x00 ; '.'
0000000000001782         db  0x00 ; '.'
0000000000001783         db  0x00 ; '.'
0000000000001784         db  0x3e ; '>'
0000000000001785         db  0x00 ; '.'
0000000000001786         db  0x00 ; '.'
0000000000001787         db  0x00 ; '.'
0000000000001788         db  0x00 ; '.'
0000000000001789         db  0x00 ; '.'
000000000000178a         db  0x00 ; '.'
000000000000178b         db  0x00 ; '.'
000000000000178c         db  0x00 ; '.'
000000000000178d         db  0x00 ; '.'
000000000000178e         db  0x00 ; '.'
000000000000178f         db  0x00 ; '.'
0000000000001790         db  0x98 ; '.'
0000000000001791         db  0x8f ; '.'
0000000000001792         db  0x21 ; '!'
0000000000001793         db  0x00 ; '.'
0000000000001794         db  0x00 ; '.'
0000000000001795         db  0x00 ; '.'
0000000000001796         db  0x00 ; '.'
0000000000001797         db  0x00 ; '.'
0000000000001798         db  0x07 ; '.'
0000000000001799         db  0x00 ; '.'
000000000000179a         db  0x00 ; '.'
000000000000179b         db  0x00 ; '.'
000000000000179c         db  0x3f ; '?'
000000000000179d         db  0x00 ; '.'
000000000000179e         db  0x00 ; '.'
000000000000179f         db  0x00 ; '.'
00000000000017a0         db  0x00 ; '.'
00000000000017a1         db  0x00 ; '.'
00000000000017a2         db  0x00 ; '.'
00000000000017a3         db  0x00 ; '.'
00000000000017a4         db  0x00 ; '.'
00000000000017a5         db  0x00 ; '.'
00000000000017a6         db  0x00 ; '.'
00000000000017a7         db  0x00 ; '.'
00000000000017a8         db  0xa0 ; '.'
00000000000017a9         db  0x8f ; '.'
00000000000017aa         db  0x21 ; '!'
00000000000017ab         db  0x00 ; '.'
00000000000017ac         db  0x00 ; '.'
00000000000017ad         db  0x00 ; '.'
00000000000017ae         db  0x00 ; '.'
00000000000017af         db  0x00 ; '.'
00000000000017b0         db  0x07 ; '.'
00000000000017b1         db  0x00 ; '.'
00000000000017b2         db  0x00 ; '.'
00000000000017b3         db  0x00 ; '.'
00000000000017b4         db  0x40 ; '@'
00000000000017b5         db  0x00 ; '.'
00000000000017b6         db  0x00 ; '.'
00000000000017b7         db  0x00 ; '.'
00000000000017b8         db  0x00 ; '.'
00000000000017b9         db  0x00 ; '.'
00000000000017ba         db  0x00 ; '.'
00000000000017bb         db  0x00 ; '.'
00000000000017bc         db  0x00 ; '.'
00000000000017bd         db  0x00 ; '.'
00000000000017be         db  0x00 ; '.'
00000000000017bf         db  0x00 ; '.'
00000000000017c0         db  0xa8 ; '.'
00000000000017c1         db  0x8f ; '.'
00000000000017c2         db  0x21 ; '!'
00000000000017c3         db  0x00 ; '.'
00000000000017c4         db  0x00 ; '.'
00000000000017c5         db  0x00 ; '.'
00000000000017c6         db  0x00 ; '.'
00000000000017c7         db  0x00 ; '.'
00000000000017c8         db  0x07 ; '.'
00000000000017c9         db  0x00 ; '.'
00000000000017ca         db  0x00 ; '.'
00000000000017cb         db  0x00 ; '.'
00000000000017cc         db  0x42 ; 'B'
00000000000017cd         db  0x00 ; '.'
00000000000017ce         db  0x00 ; '.'
00000000000017cf         db  0x00 ; '.'
00000000000017d0         db  0x00 ; '.'
00000000000017d1         db  0x00 ; '.'
00000000000017d2         db  0x00 ; '.'
00000000000017d3         db  0x00 ; '.'
00000000000017d4         db  0x00 ; '.'
00000000000017d5         db  0x00 ; '.'
00000000000017d6         db  0x00 ; '.'
00000000000017d7         db  0x00 ; '.'
00000000000017d8         db  0xb0 ; '.'
00000000000017d9         db  0x8f ; '.'
00000000000017da         db  0x21 ; '!'
00000000000017db         db  0x00 ; '.'
00000000000017dc         db  0x00 ; '.'
00000000000017dd         db  0x00 ; '.'
00000000000017de         db  0x00 ; '.'
00000000000017df         db  0x00 ; '.'
00000000000017e0         db  0x07 ; '.'
00000000000017e1         db  0x00 ; '.'
00000000000017e2         db  0x00 ; '.'
00000000000017e3         db  0x00 ; '.'
00000000000017e4         db  0x43 ; 'C'
00000000000017e5         db  0x00 ; '.'
00000000000017e6         db  0x00 ; '.'
00000000000017e7         db  0x00 ; '.'
00000000000017e8         db  0x00 ; '.'
00000000000017e9         db  0x00 ; '.'
00000000000017ea         db  0x00 ; '.'
00000000000017eb         db  0x00 ; '.'
00000000000017ec         db  0x00 ; '.'
00000000000017ed         db  0x00 ; '.'
00000000000017ee         db  0x00 ; '.'
00000000000017ef         db  0x00 ; '.'
00000000000017f0         db  0xb8 ; '.'
00000000000017f1         db  0x8f ; '.'
00000000000017f2         db  0x21 ; '!'
00000000000017f3         db  0x00 ; '.'
00000000000017f4         db  0x00 ; '.'
00000000000017f5         db  0x00 ; '.'
00000000000017f6         db  0x00 ; '.'
00000000000017f7         db  0x00 ; '.'
00000000000017f8         db  0x07 ; '.'
00000000000017f9         db  0x00 ; '.'
00000000000017fa         db  0x00 ; '.'
00000000000017fb         db  0x00 ; '.'
00000000000017fc         db  0x44 ; 'D'
00000000000017fd         db  0x00 ; '.'
00000000000017fe         db  0x00 ; '.'
00000000000017ff         db  0x00 ; '.'
0000000000001800         db  0x00 ; '.'
0000000000001801         db  0x00 ; '.'
0000000000001802         db  0x00 ; '.'
0000000000001803         db  0x00 ; '.'
0000000000001804         db  0x00 ; '.'
0000000000001805         db  0x00 ; '.'
0000000000001806         db  0x00 ; '.'
0000000000001807         db  0x00 ; '.'
0000000000001808         db  0xc0 ; '.'
0000000000001809         db  0x8f ; '.'
000000000000180a         db  0x21 ; '!'
000000000000180b         db  0x00 ; '.'
000000000000180c         db  0x00 ; '.'
000000000000180d         db  0x00 ; '.'
000000000000180e         db  0x00 ; '.'
000000000000180f         db  0x00 ; '.'
0000000000001810         db  0x07 ; '.'
0000000000001811         db  0x00 ; '.'
0000000000001812         db  0x00 ; '.'
0000000000001813         db  0x00 ; '.'
0000000000001814         db  0x46 ; 'F'
0000000000001815         db  0x00 ; '.'
0000000000001816         db  0x00 ; '.'
0000000000001817         db  0x00 ; '.'
0000000000001818         db  0x00 ; '.'
0000000000001819         db  0x00 ; '.'
000000000000181a         db  0x00 ; '.'
000000000000181b         db  0x00 ; '.'
000000000000181c         db  0x00 ; '.'
000000000000181d         db  0x00 ; '.'
000000000000181e         db  0x00 ; '.'
000000000000181f         db  0x00 ; '.'
0000000000001820         db  0xc8 ; '.'
0000000000001821         db  0x8f ; '.'
0000000000001822         db  0x21 ; '!'
0000000000001823         db  0x00 ; '.'
0000000000001824         db  0x00 ; '.'
0000000000001825         db  0x00 ; '.'
0000000000001826         db  0x00 ; '.'
0000000000001827         db  0x00 ; '.'
0000000000001828         db  0x07 ; '.'
0000000000001829         db  0x00 ; '.'
000000000000182a         db  0x00 ; '.'
000000000000182b         db  0x00 ; '.'
000000000000182c         db  0x47 ; 'G'
000000000000182d         db  0x00 ; '.'
000000000000182e         db  0x00 ; '.'
000000000000182f         db  0x00 ; '.'
0000000000001830         db  0x00 ; '.'
0000000000001831         db  0x00 ; '.'
0000000000001832         db  0x00 ; '.'
0000000000001833         db  0x00 ; '.'
0000000000001834         db  0x00 ; '.'
0000000000001835         db  0x00 ; '.'
0000000000001836         db  0x00 ; '.'
0000000000001837         db  0x00 ; '.'


        ; Section .init
        ; Range: [0x1838; 0x184f[ (23 bytes)
        ; File offset : [6200; 6223[ (23 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _init:
0000000000001838         sub        rsp, 0x8                                    ; CODE XREF=__libc_csu_init+44
000000000000183c         mov        rax, qword [qword_218fe0]                   ; qword_218fe0
0000000000001843         test       rax, rax
0000000000001846         je         loc_184a

0000000000001848         call       rax

                     loc_184a:
000000000000184a         add        rsp, 0x8                                    ; CODE XREF=_init+14
000000000000184e         ret
                        ; endp
000000000000184f         db  0x00 ; '.'


        ; Section .plt
        ; Range: [0x1850; 0x1c80[ (1072 bytes)
        ; File offset : [6224; 7296[ (1072 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR


                     loc_1850:
0000000000001850         push       qword [qword_218db0]                        ; Begin of unwind block (FDE at 0x15d6c), qword_218db0, CODE XREF=sub_1866+5
0000000000001856         jmp        qword [qword_218db0+8]                      ; 0x218db8
                        ; endp
000000000000185c         nop        dword [rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_toupper_loc:        // __ctype_toupper_loc
0000000000001860         jmp        qword [__ctype_toupper_loc@GOT]             ; __ctype_toupper_loc, __ctype_toupper_loc@GOT, CODE XREF=build_upper_buffer+29, build_wcs_upper_buffer+808
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1866:
0000000000001866         push       0x0
000000000000186b         jmp        loc_1850


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_getenv:        // getenv
0000000000001870         jmp        qword [getenv@GOT]                          ; getenv, getenv@GOT, CODE XREF=main+1421
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1876:
0000000000001876         push       0x1
000000000000187b         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_free:        // free
0000000000001880         jmp        qword [free@GOT]                            ; free, free@GOT, CODE XREF=main+1718, quotearg_n_options+277, quotearg_free+55, quotearg_free+82, quotearg_free+120, xrealloc+40, free_charset+7, free_charset+16, free_charset+25, free_charset+34, free_charset+43
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1886:
0000000000001886         push       0x2
000000000000188b         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_abort:        // abort
0000000000001890         jmp        qword [abort@GOT]                           ; abort, abort@GOT, CODE XREF=set_program_name+154, sub_3f00+1567, quotearg_n_options+417, set_custom_quoting+43, quotearg_n_style+132, quotearg_n_style_mem+128, quotearg_n_style_colon+132, quotearg_n_custom_mem+135, xalloc_die+48, sub_13000+94, rpl_regerror+112
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1896:
0000000000001896         push       0x3
000000000000189b         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___errno_location:        // __errno_location
00000000000018a0         jmp        qword [__errno_location@GOT]                ; __errno_location, __errno_location@GOT, CODE XREF=main+1177, main+1266, main+1568, main+1687, main+1779, tac_seekable+205, tac_seekable+1090, tac_seekable+1159, tac_seekable+1321, close_stdout+22, quotearg_n_options+28
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_18a6:
00000000000018a6         push       0x4
00000000000018ab         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_unlink:        // unlink
00000000000018b0         jmp        qword [unlink@GOT]                          ; unlink, unlink@GOT, CODE XREF=main+1523, main+1818
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_18b6:
00000000000018b6         push       0x5
00000000000018bb         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strncmp:        // strncmp
00000000000018c0         jmp        qword [strncmp@GOT]                         ; strncmp, strncmp@GOT, CODE XREF=tac_seekable+817, usage+628, usage+821
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_18c6:
00000000000018c6         push       0x6
00000000000018cb         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j__exit:        // _exit
00000000000018d0         jmp        qword [_exit@GOT]                           ; _exit, _exit@GOT, CODE XREF=close_stdout+136
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_18d6:
00000000000018d6         push       0x7
00000000000018db         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___fpending:        // __fpending
00000000000018e0         jmp        qword [__fpending@GOT]                      ; __fpending, __fpending@GOT, CODE XREF=close_stream+7
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_18e6:
00000000000018e6         push       0x8
00000000000018eb         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_isatty:        // isatty
00000000000018f0         jmp        qword [isatty@GOT]                          ; isatty, isatty@GOT, CODE XREF=main+811
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_18f6:
00000000000018f6         push       0x9
00000000000018fb         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fcntl:        // fcntl
0000000000001900         jmp        qword [fcntl@GOT]                           ; fcntl, fcntl@GOT, CODE XREF=rpl_fcntl+128, rpl_fcntl+212, rpl_fcntl+320, rpl_fcntl+407, rpl_fcntl+423, rpl_fcntl+460, rpl_fcntl+483, rpl_fcntl+559, rpl_fcntl+606
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1906:
0000000000001906         push       0xa
000000000000190b         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_clearerr_unlocked:        // clearerr_unlocked
0000000000001910         jmp        qword [clearerr_unlocked@GOT]               ; clearerr_unlocked, clearerr_unlocked@GOT, CODE XREF=main+848
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1916:
0000000000001916         push       0xb
000000000000191b         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_textdomain:        // textdomain
0000000000001920         jmp        qword [textdomain@GOT]                      ; textdomain, textdomain@GOT, CODE XREF=main+77
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1926:
0000000000001926         push       0xc
000000000000192b         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_iswctype:        // iswctype
0000000000001930         jmp        qword [iswctype@GOT]                        ; iswctype, iswctype@GOT, CODE XREF=check_node_accept_bytes.isra.31+217
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1936:
0000000000001936         push       0xd
000000000000193b         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fclose:        // fclose
0000000000001940         jmp        qword [fclose@GOT]                          ; fclose, fclose@GOT, CODE XREF=rpl_fclose+54, rpl_fclose+107
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1946:
0000000000001946         push       0xe
000000000000194b         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_bindtextdomain:        // bindtextdomain
0000000000001950         jmp        qword [bindtextdomain@GOT]                  ; bindtextdomain, bindtextdomain@GOT, CODE XREF=main+65
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1956:
0000000000001956         push       0xf
000000000000195b         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_dcgettext:        // dcgettext
0000000000001960         jmp        qword [dcgettext@GOT]                       ; dcgettext, dcgettext@GOT, CODE XREF=main+779, main+1169, main+1258, main+1679, main+1769, main+1875, tac_seekable+197, tac_seekable+1082, tac_seekable+1151, tac_seekable+1313, tac_seekable+1382
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1966:
0000000000001966         push       0x10
000000000000196b         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_get_mb_cur_max:        // __ctype_get_mb_cur_max
0000000000001970         jmp        qword [__ctype_get_mb_cur_max@GOT]          ; __ctype_get_mb_cur_max, __ctype_get_mb_cur_max@GOT, CODE XREF=quotearg_buffer_restyled+108, re_compile_internal+290
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1976:
0000000000001976         push       0x11
000000000000197b         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strlen:        // strlen
0000000000001980         jmp        qword [strlen@GOT]                          ; strlen, strlen@GOT, CODE XREF=mfile_name_concat+51, quotearg_buffer_restyled+343, sub_3a30+411, sub_3f00+510, xstrdup+4, build_collating_symbol.isra.28+15, rpl_regcomp+147, rpl_regerror+60, rpl_regexec+49, base_len+4
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1986:
0000000000001986         push       0x12
000000000000198b         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___stack_chk_fail:        // __stack_chk_fail
0000000000001990         jmp        qword [__stack_chk_fail@GOT]                ; __stack_chk_fail, __stack_chk_fail@GOT, CODE XREF=sub_3f00+1507, quotearg_n_style+137, quotearg_n_style_mem+133, quotearg_char_mem+147, quotearg_n_style_colon+137, quotearg_n_custom_mem+140, version_etc_va+101, version_etc+192, rpl_mbrtowc+126, build_wcs_buffer+446, build_wcs_upper_buffer+1530
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1996:
0000000000001996         push       0x13
000000000000199b         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_getopt_long:        // getopt_long
00000000000019a0         jmp        qword [getopt_long@GOT]                     ; getopt_long, getopt_long@GOT, CODE XREF=main+144
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_19a6:
00000000000019a6         push       0x14
00000000000019ab         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_mbrtowc:        // mbrtowc
00000000000019b0         jmp        qword [mbrtowc@GOT]                         ; mbrtowc, mbrtowc@GOT, CODE XREF=rpl_mbrtowc+50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_19b6:
00000000000019b6         push       0x15
00000000000019bb         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strrchr:        // strrchr
00000000000019c0         jmp        qword [strrchr@GOT]                         ; strrchr, strrchr@GOT, CODE XREF=set_program_name+14
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_19c6:
00000000000019c6         push       0x16
00000000000019cb         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_ftruncate:        // ftruncate
00000000000019d0         jmp        qword [ftruncate@GOT]                       ; ftruncate, ftruncate@GOT, CODE XREF=main+889
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_19d6:
00000000000019d6         push       0x17
00000000000019db         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_mkostemp:        // mkostemp
00000000000019e0         jmp        qword [mkostemp@GOT]                        ; mkostemp, mkostemp@GOT, CODE XREF=mkostemp_safer+3
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_19e6:
00000000000019e6         push       0x18
00000000000019eb         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_lseek:        // lseek
00000000000019f0         jmp        qword [lseek@GOT]                           ; lseek, lseek@GOT, CODE XREF=main+796, tac_seekable+157, tac_seekable+641, tac_seekable+1265, j_j_fseeko+49, rpl_fclose+89
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_19f6:
00000000000019f6         push       0x19
00000000000019fb         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___assert_fail:        // __assert_fail
0000000000001a00         jmp        qword [__assert_fail@GOT]                   ; __assert_fail, __assert_fail@GOT, CODE XREF=pop_fail_stack.isra.25+143, re_search_internal+4167, re_search_internal+5451, sub_10fe0+2836, sub_12920+37, sub_13000+125, sub_13000+156, sub_13000+187, re_search_stub+1084, re_search_stub+1115, re_search_stub+1146
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a06:
0000000000001a06         push       0x1a
0000000000001a0b         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memset:        // memset
0000000000001a10         jmp        qword [memset@GOT]                          ; memset, memset@GOT, CODE XREF=quotearg_n_options+153, xzalloc+18, clean_state_log_if_needed+120, re_string_reconstruct+1128, re_string_reconstruct+1876, check_arrival+1782, get_subexp_sub.isra.32+344, sift_states_backward+744, re_search_internal+2450
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a16:
0000000000001a16         push       0x1b
0000000000001a1b         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_close:        // close
0000000000001a20         jmp        qword [close@GOT]                           ; close, close@GOT, CODE XREF=main+1297, main+1555, main+1806, fd_safer+38, fd_safer_flag+38, rpl_fcntl+510
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a26:
0000000000001a26         push       0x1c
0000000000001a2b         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_read:        // read
0000000000001a30         jmp        qword [read@GOT]                            ; read, read@GOT, CODE XREF=safe_read+33
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a36:
0000000000001a36         push       0x1d
0000000000001a3b         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memcmp:        // memcmp
0000000000001a40         jmp        qword [memcmp@GOT]                          ; memcmp, memcmp@GOT, CODE XREF=quotearg_buffer_restyled+410, set_regs+1041, transit_state_bkref.isra.34+663
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a46:
0000000000001a46         push       0x1e
0000000000001a4b         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_wctype:        // wctype
0000000000001a50         jmp        qword [wctype@GOT]                          ; wctype, wctype@GOT, CODE XREF=build_charclass.isra.29+103
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a56:
0000000000001a56         push       0x1f
0000000000001a5b         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fputs_unlocked:        // fputs_unlocked
0000000000001a60         jmp        qword [fputs_unlocked@GOT]                  ; fputs_unlocked, fputs_unlocked@GOT, CODE XREF=usage+157, usage+194, usage+231, usage+268, usage+305, usage+349, usage+936, version_etc_arn+135, emit_bug_reporting_address+123
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a66:
0000000000001a66         push       0x20
0000000000001a6b         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_calloc:        // calloc
0000000000001a70         jmp        qword [calloc@GOT]                          ; calloc, calloc@GOT, CODE XREF=xcalloc+26, re_acquire_state_context+202, re_acquire_state+160, check_subexp_matching_top.isra.18+156, build_trtable+746, build_trtable+2611, build_trtable+2830, build_charclass_op+70, build_charclass_op+97, transit_state_bkref.isra.34+1726, transit_state_bkref.isra.34+1865
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a76:
0000000000001a76         push       0x21
0000000000001a7b         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strcmp:        // strcmp
0000000000001a80         jmp        qword [strcmp@GOT]                          ; strcmp, strcmp@GOT, CODE XREF=build_charclass.isra.29+1480, build_charclass.isra.29+1620, build_charclass.isra.29+1758
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a86:
0000000000001a86         push       0x22
0000000000001a8b         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memcpy:        // memcpy
0000000000001a90         jmp        qword [memcpy@GOT]                          ; memcpy, memcpy@GOT, CODE XREF=main+1626, output+91, output+163, xmemdup+35, build_wcs_upper_buffer+348, build_wcs_upper_buffer+697, build_wcs_upper_buffer+796, build_wcs_upper_buffer+1071, build_wcs_upper_buffer+1340, re_node_set_merge+320, re_node_set_merge+357
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a96:
0000000000001a96         push       0x23
0000000000001a9b         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fileno:        // fileno
0000000000001aa0         jmp        qword [fileno@GOT]                          ; fileno, fileno@GOT, CODE XREF=main+880, main+1030, j_j_fseeko+36, rpl_fclose+7, rpl_fclose+75
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1aa6:
0000000000001aa6         push       0x24
0000000000001aab         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_iswalnum:        // iswalnum
0000000000001ab0         jmp        qword [iswalnum@GOT]                        ; iswalnum, iswalnum@GOT, CODE XREF=re_string_context_at+202, re_string_reconstruct+1790, peek_token+144, peek_token+440
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ab6:
0000000000001ab6         push       0x25
0000000000001abb         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_malloc:        // malloc
0000000000001ac0         jmp        qword [malloc@GOT]                          ; malloc, malloc@GOT, CODE XREF=mfile_name_concat+151, xmalloc+4, re_node_set_insert+76, register_state+48, build_wcs_upper_buffer+1482, calc_eclosure_iter+87, check_arrival_expand_ecl+67, create_token_tree.isra.16+160, re_node_set_init_copy+38, re_node_set_init_union+74, re_acquire_state_context+629
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ac6:
0000000000001ac6         push       0x26
0000000000001acb         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_wcrtomb:        // wcrtomb
0000000000001ad0         jmp        qword [wcrtomb@GOT]                         ; wcrtomb, wcrtomb@GOT, CODE XREF=build_wcs_upper_buffer+313, build_wcs_upper_buffer+668, re_compile_fastmap_iter.isra.30+534, re_compile_fastmap_iter.isra.30+698, re_compile_fastmap_iter.isra.30+797
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ad6:
0000000000001ad6         push       0x27
0000000000001adb         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fflush:        // fflush
0000000000001ae0         jmp        qword [fflush@GOT]                          ; fflush, fflush@GOT, CODE XREF=rpl_fflush+30, rpl_fflush+59
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ae6:
0000000000001ae6         push       0x28
0000000000001aeb         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_nl_langinfo:        // nl_langinfo
0000000000001af0         jmp        qword [nl_langinfo@GOT]                     ; nl_langinfo, nl_langinfo@GOT, CODE XREF=re_compile_internal+306, locale_charset+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1af6:
0000000000001af6         push       0x29
0000000000001afb         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_mkstemp:        // mkstemp
0000000000001b00         jmp        qword [mkstemp@GOT]                         ; mkstemp, mkstemp@GOT, CODE XREF=mkstemp_safer+4
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b06:
0000000000001b06         push       0x2a
0000000000001b0b         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___freading:        // __freading
0000000000001b10         jmp        qword [__freading@GOT]                      ; __freading, __freading@GOT, CODE XREF=rpl_fclose+19, rpl_fflush+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b16:
0000000000001b16         push       0x2b
0000000000001b1b         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fwrite_unlocked:        // fwrite_unlocked
0000000000001b20         jmp        qword [fwrite_unlocked@GOT]                 ; fwrite_unlocked, fwrite_unlocked@GOT, CODE XREF=main+956, output+122, output+214
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b26:
0000000000001b26         push       0x2c
0000000000001b2b         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_realloc:        // realloc
0000000000001b30         jmp        qword [realloc@GOT]                         ; realloc, realloc@GOT, CODE XREF=xrealloc+17, re_string_realloc_buffers+48, re_string_realloc_buffers+79, re_string_realloc_buffers+127, re_node_set_insert_last+74, re_node_set_insert+270, register_state+209, extend_buffers+95, re_dfa_add_node+247, re_dfa_add_node+278, re_dfa_add_node+302
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b36:
0000000000001b36         push       0x2d
0000000000001b3b         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fdopen:        // fdopen
0000000000001b40         jmp        qword [fdopen@GOT]                          ; fdopen, fdopen@GOT, CODE XREF=main+1495
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b46:
0000000000001b46         push       0x2e
0000000000001b4b         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_setlocale:        // setlocale
0000000000001b50         jmp        qword [setlocale@GOT]                       ; setlocale, setlocale@GOT, CODE XREF=main+46, usage+603, usage+796, hard_locale+6
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b56:
0000000000001b56         push       0x2f
0000000000001b5b         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___printf_chk:        // __printf_chk
0000000000001b60         jmp        qword [__printf_chk@GOT]                    ; __printf_chk, __printf_chk@GOT, CODE XREF=usage+120, usage+591, usage+684, usage+745, usage+784, usage+887, emit_bug_reporting_address+37, emit_bug_reporting_address+85
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b66:
0000000000001b66         push       0x30
0000000000001b6b         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_btowc:        // btowc
0000000000001b70         jmp        qword [btowc@GOT]                           ; btowc, btowc@GOT, CODE XREF=sub_10fe0+1827, sub_10fe0+2551, re_compile_internal+1864
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b76:
0000000000001b76         push       0x31
0000000000001b7b         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_mempcpy:        // mempcpy
0000000000001b80         jmp        qword [mempcpy@GOT]                         ; mempcpy, mempcpy@GOT, CODE XREF=mfile_name_concat+173, mfile_name_concat+206
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b86:
0000000000001b86         push       0x32
0000000000001b8b         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memmove:        // memmove
0000000000001b90         jmp        qword [memmove@GOT]                         ; memmove, memmove@GOT, CODE XREF=tac_seekable+687, re_string_reconstruct+400, re_string_reconstruct+856, re_string_reconstruct+876, re_string_reconstruct+1179
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b96:
0000000000001b96         push       0x33
0000000000001b9b         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_error:        // error
0000000000001ba0         jmp        qword [error@GOT]                           ; error, error@GOT, CODE XREF=main+1194, main+1285, main+1586, main+1704, main+1798, main+1892, main+1916, tac_seekable+222, tac_seekable+1107, tac_seekable+1176, tac_seekable+1338
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ba6:
0000000000001ba6         push       0x34
0000000000001bab         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_open:        // open
0000000000001bb0         jmp        qword [open@GOT]                            ; open, open@GOT, CODE XREF=main+1213
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1bb6:
0000000000001bb6         push       0x35
0000000000001bbb         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fseeko:        // fseeko
0000000000001bc0         jmp        qword [fseeko@GOT]                          ; fseeko, fseeko@GOT, CODE XREF=j_j_fseeko
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1bc6:
0000000000001bc6         push       0x36
0000000000001bcb         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_towlower:        // towlower
0000000000001bd0         jmp        qword [towlower@GOT]                        ; towlower, towlower@GOT, CODE XREF=re_compile_fastmap_iter.isra.30+517, re_compile_fastmap_iter.isra.30+782
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1bd6:
0000000000001bd6         push       0x37
0000000000001bdb         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_towupper:        // towupper
0000000000001be0         jmp        qword [towupper@GOT]                        ; towupper, towupper@GOT, CODE XREF=build_wcs_upper_buffer+268, build_wcs_upper_buffer+640
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1be6:
0000000000001be6         push       0x38
0000000000001beb         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___cxa_atexit:        // __cxa_atexit
0000000000001bf0         jmp        qword [__cxa_atexit@GOT]                    ; __cxa_atexit, __cxa_atexit@GOT, CODE XREF=atexit+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1bf6:
0000000000001bf6         push       0x39
0000000000001bfb         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_exit:        // exit
0000000000001c00         jmp        qword [exit@GOT]                            ; exit, exit@GOT, CODE XREF=main+268, usage+88
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c06:
0000000000001c06         push       0x3a
0000000000001c0b         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fwrite:        // fwrite
0000000000001c10         jmp        qword [fwrite@GOT]                          ; fwrite, fwrite@GOT, CODE XREF=set_program_name+149
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c16:
0000000000001c16         push       0x3b
0000000000001c1b         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___fprintf_chk:        // __fprintf_chk
0000000000001c20         jmp        qword [__fprintf_chk@GOT]                   ; __fprintf_chk, __fprintf_chk@GOT, CODE XREF=usage+81, version_etc_arn+55, version_etc_arn+105, version_etc_arn+285, version_etc_arn+332, version_etc_arn+492, version_etc_arn+563, version_etc_arn+642, version_etc_arn+718, version_etc_arn+872
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c26:
0000000000001c26         push       0x3c
0000000000001c2b         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fflush_unlocked:        // fflush_unlocked
0000000000001c30         jmp        qword [fflush_unlocked@GOT]                 ; fflush_unlocked, fflush_unlocked@GOT, CODE XREF=main+1005
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c36:
0000000000001c36         push       0x3d
0000000000001c3b         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_mbsinit:        // mbsinit
0000000000001c40         jmp        qword [mbsinit@GOT]                         ; mbsinit, mbsinit@GOT, CODE XREF=sub_3a30+616, build_wcs_upper_buffer+557
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c46:
0000000000001c46         push       0x3e
0000000000001c4b         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_iswprint:        // iswprint
0000000000001c50         jmp        qword [iswprint@GOT]                        ; iswprint, iswprint@GOT, CODE XREF=sub_3a30+592
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c56:
0000000000001c56         push       0x3f
0000000000001c5b         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_tolower_loc:        // __ctype_tolower_loc
0000000000001c60         jmp        qword [__ctype_tolower_loc@GOT]             ; __ctype_tolower_loc, __ctype_tolower_loc@GOT, CODE XREF=re_compile_fastmap_iter.isra.30+287, re_compile_fastmap_iter.isra.30+729, re_compile_fastmap_iter.isra.30+976
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c66:
0000000000001c66         push       0x40
0000000000001c6b         jmp        0x1850
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_b_loc:        // __ctype_b_loc
0000000000001c70         jmp        qword [__ctype_b_loc@GOT]                   ; __ctype_b_loc, __ctype_b_loc@GOT, CODE XREF=sub_37d0+51, build_charclass.isra.29+168, build_charclass.isra.29+248, build_charclass.isra.29+480, build_charclass.isra.29+554, build_charclass.isra.29+686, build_charclass.isra.29+819, build_charclass.isra.29+973, build_charclass.isra.29+1126, build_charclass.isra.29+1232, build_charclass.isra.29+1489
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c76:
0000000000001c76         push       0x41
0000000000001c7b         jmp        0x1850
                        ; endp


        ; Section .plt.got
        ; Range: [0x1c80; 0x1c88[ (8 bytes)
        ; File offset : [7296; 7304[ (8 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_qword_218ff0:        // qword_218ff0
0000000000001c80         jmp        qword [qword_218ff0]                        ; qword, End of unwind block (FDE at 0x15d6c), Begin of unwind block (FDE at 0x15d94), qword_218ff0, CODE XREF=__do_global_dtors_aux+30
                        ; endp
0000000000001c86         align      8
0000000000001c88         db  0x00 ; '.'                                         ; End of unwind block (FDE at 0x15d94)
0000000000001c89         db  0x00 ; '.'
0000000000001c8a         db  0x00 ; '.'
0000000000001c8b         db  0x00 ; '.'
0000000000001c8c         db  0x00 ; '.'
0000000000001c8d         db  0x00 ; '.'
0000000000001c8e         db  0x00 ; '.'
0000000000001c8f         db  0x00 ; '.'


        ; Section .text
        ; Range: [0x1c90; 0x1412e[ (74910 bytes)
        ; File offset : [7312; 82222[ (74910 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_49: int8_t, -73
        ;    var_58: int64_t, -88


                     main:
0000000000001c90         push       r15                                         ; Begin of unwind block (FDE at 0x15ea0), DATA XREF=_start+29
0000000000001c92         push       r14
0000000000001c94         push       r13
0000000000001c96         push       r12
0000000000001c98         lea        r12, qword [longopts]                       ; longopts
0000000000001c9f         push       rbp
0000000000001ca0         push       rbx
0000000000001ca1         mov        ebp, edi
0000000000001ca3         mov        rbx, rsi
0000000000001ca6         sub        rsp, 0x28
0000000000001caa         mov        rdi, qword [rsi]
0000000000001cad         call       set_program_name                            ; set_program_name
0000000000001cb2         lea        rsi, qword [aWrittenBySSAnd+27]             ; argument "__locale" for method j_setlocale, 0x14c01
0000000000001cb9         mov        edi, 0x6                                    ; argument "__category" for method j_setlocale
0000000000001cbe         call       j_setlocale                                 ; setlocale
0000000000001cc3         lea        rsi, qword [aUsrlocalsharel]                ; argument "__dirname" for method j_bindtextdomain, "/usr/local/share/locale"
0000000000001cca         lea        rdi, qword [aCoreutils]                     ; argument "__domainname" for method j_bindtextdomain, "coreutils"
0000000000001cd1         call       j_bindtextdomain                            ; bindtextdomain
0000000000001cd6         lea        rdi, qword [aCoreutils]                     ; argument "__domainname" for method j_textdomain, "coreutils"
0000000000001cdd         call       j_textdomain                                ; textdomain
0000000000001ce2         lea        rdi, qword [close_stdout]                   ; argument "__func" for method atexit, close_stdout
0000000000001ce9         call       atexit                                      ; atexit
0000000000001cee         lea        rax, qword [aWrittenBySSAnd+26]             ; 0x14c00
0000000000001cf5         mov        qword [sentinel_length], 0x1                ; sentinel_length
0000000000001d00         mov        byte [separator_ends_record], 0x1           ; separator_ends_record
0000000000001d07         mov        qword [separator], rax                      ; separator

                     loc_1d0e:
0000000000001d0e         lea        rdx, qword [aJayLepreau+12]                 ; argument "__shortopts" for method j_getopt_long, 0x14254, CODE XREF=main+193, main+287, main+307
0000000000001d15         xor        r8d, r8d                                    ; argument "__longind" for method j_getopt_long
0000000000001d18         mov        rcx, r12                                    ; argument "__longopts" for method j_getopt_long
0000000000001d1b         mov        rsi, rbx                                    ; argument "___argv" for method j_getopt_long
0000000000001d1e         mov        edi, ebp                                    ; argument "___argc" for method j_getopt_long
0000000000001d20         call       j_getopt_long                               ; getopt_long
0000000000001d25         cmp        eax, 0xffffffff
0000000000001d28         je         loc_1dc8

0000000000001d2e         cmp        eax, 0x62
0000000000001d31         je         loc_1da8

0000000000001d33         jle        loc_1d58

0000000000001d35         cmp        eax, 0x72
0000000000001d38         je         loc_1db8

0000000000001d3a         cmp        eax, 0x73
0000000000001d3d         jne        loc_23cb

0000000000001d43         mov        rax, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5
0000000000001d4a         mov        qword [separator], rax                      ; separator
0000000000001d51         jmp        loc_1d0e
0000000000001d53         align      8

                     loc_1d58:
0000000000001d58         cmp        eax, 0xffffff7d                             ; CODE XREF=main+163
0000000000001d5d         jne        loc_23b1

0000000000001d63         sub        rsp, 0x8
0000000000001d67         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000001d6e         mov        rcx, qword [Version]                        ; Version
0000000000001d75         push       0x0
0000000000001d77         lea        r9, qword [aDavidMackenzie]                 ; "David MacKenzie"
0000000000001d7e         lea        r8, qword [aJayLepreau]                     ; "Jay Lepreau"
0000000000001d85         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0x141ee
0000000000001d8c         lea        rsi, qword [aRecordTooLarge+17]             ; 0x14174
0000000000001d93         xor        eax, eax
0000000000001d95         call       version_etc                                 ; version_etc
0000000000001d9a         xor        edi, edi                                    ; argument "__status" for method j_exit
0000000000001d9c         call       j_exit                                      ; exit
                        ; endp
0000000000001da1         align      8

                     loc_1da8:
0000000000001da8         mov        byte [separator_ends_record], 0x0           ; separator_ends_record, CODE XREF=main+161
0000000000001daf         jmp        loc_1d0e
0000000000001db4         align      8

                     loc_1db8:
0000000000001db8         mov        qword [sentinel_length], 0x0                ; sentinel_length, CODE XREF=main+168
0000000000001dc3         jmp        loc_1d0e

                     loc_1dc8:
0000000000001dc8         cmp        qword [sentinel_length], 0x0                ; sentinel_length, CODE XREF=main+152
0000000000001dd0         mov        r8, qword [separator]                       ; separator
0000000000001dd7         movzx      edx, byte [r8]
0000000000001ddb         jne        loc_1f05

0000000000001de1         test       dl, dl
0000000000001de3         je         loc_23d5

0000000000001de9         lea        rax, qword [compiled_separator_fastmap]     ; compiled_separator_fastmap
0000000000001df0         mov        rdi, r8
0000000000001df3         mov        qword [compiled_separator], 0x0             ; compiled_separator
0000000000001dfe         mov        qword [qword_21b228], 0x0                   ; qword_21b228
0000000000001e09         mov        qword [qword_21b248], 0x0                   ; qword_21b248
0000000000001e14         or         rcx, 0xffffffffffffffff
0000000000001e18         mov        qword [qword_21b240], rax                   ; qword_21b240
0000000000001e1f         xor        eax, eax
0000000000001e21         lea        rdx, qword [compiled_separator]             ; compiled_separator
0000000000001e28         repne scasb al, byte [rdi]
0000000000001e2a         mov        rdi, r8
0000000000001e2d         mov        rax, rcx
0000000000001e30         not        rax
0000000000001e33         lea        rsi, qword [rax-1]
0000000000001e37         call       rpl_re_compile_pattern                      ; rpl_re_compile_pattern
0000000000001e3c         test       rax, rax
0000000000001e3f         jne        loc_23f9

                     loc_1e45:
0000000000001e45         mov        rsi, qword [sentinel_length]                ; sentinel_length, CODE XREF=main+673
0000000000001e4c         mov        qword [read_size], 0x2000                   ; read_size
0000000000001e57         mov        edx, 0x32
0000000000001e5c         mov        eax, 0x2000
0000000000001e61         cmp        rsi, 0xfff
0000000000001e68         ja         loc_1e79

0000000000001e6a         jmp        loc_1e8e
0000000000001e6c         align      16

                     loc_1e70:
0000000000001e70         sub        edx, 0x1                                    ; CODE XREF=main+501
0000000000001e73         je         loc_23bf

                     loc_1e79:
0000000000001e79         add        rax, rax                                    ; CODE XREF=main+472
0000000000001e7c         mov        rcx, rax
0000000000001e7f         shr        rcx, 0x1
0000000000001e82         cmp        rcx, rsi
0000000000001e85         jbe        loc_1e70

0000000000001e87         mov        qword [read_size], rax                      ; read_size

                     loc_1e8e:
0000000000001e8e         lea        rdx, qword [rax+rsi+1]                      ; CODE XREF=main+474
0000000000001e93         lea        rdi, qword [rdx+rdx]
0000000000001e97         cmp        rdx, rax
0000000000001e9a         setbe      cl
0000000000001e9d         cmp        rdi, rdx
0000000000001ea0         mov        qword [G_buffer_size], rdi                  ; G_buffer_size
0000000000001ea7         setbe      al
0000000000001eaa         or         cl, al
0000000000001eac         jne        loc_23c6

0000000000001eb2         call       xmalloc                                     ; xmalloc
0000000000001eb7         mov        r12, qword [sentinel_length]                ; sentinel_length
0000000000001ebe         mov        rcx, rax
0000000000001ec1         mov        qword [G_buffer], rax                       ; G_buffer
0000000000001ec8         test       r12, r12
0000000000001ecb         jne        loc_22db

0000000000001ed1         add        rcx, 0x1
0000000000001ed5         mov        qword [G_buffer], rcx                       ; G_buffer

                     loc_1edc:
0000000000001edc         movsxd     rax, dword [optind@@GLIBC_2.2.5]            ; optind@@GLIBC_2.2.5, CODE XREF=main+1644
0000000000001ee3         cmp        eax, ebp
0000000000001ee5         jge        loc_1f36

0000000000001ee7         lea        r15, qword [rbx+rax*8]
0000000000001eeb         mov        r14, qword [r15]
0000000000001eee         test       r14, r14
0000000000001ef1         je         loc_22d1

0000000000001ef7         lea        rax, qword [aLibs+10]                       ; 0x146ca
0000000000001efe         mov        qword [rsp+0x58+var_48], rax
0000000000001f03         jmp        loc_1f4c

                     loc_1f05:
0000000000001f05         test       dl, dl                                      ; CODE XREF=main+331
0000000000001f07         mov        eax, 0x1
0000000000001f0c         je         loc_1f23

0000000000001f0e         xor        eax, eax
0000000000001f10         or         rcx, 0xffffffffffffffff
0000000000001f14         mov        rdi, r8
0000000000001f17         repne scasb al, byte [rdi]
0000000000001f19         mov        rax, rcx
0000000000001f1c         not        rax
0000000000001f1f         sub        rax, 0x1

                     loc_1f23:
0000000000001f23         mov        qword [sentinel_length], rax                ; sentinel_length, CODE XREF=main+636
0000000000001f2a         mov        qword [match_length], rax                   ; match_length
0000000000001f31         jmp        loc_1e45

                     loc_1f36:
0000000000001f36         lea        rax, qword [aLibs+10]                       ; 0x146ca, CODE XREF=main+597
0000000000001f3d         lea        r15, qword [default_file_list.7113]         ; default_file_list.7113
0000000000001f44         mov        qword [rsp+0x58+var_48], rax
0000000000001f49         mov        r14, rax

                     loc_1f4c:
0000000000001f4c         lea        rax, qword [r15+8]                          ; CODE XREF=main+627
0000000000001f50         mov        byte [rsp+0x58+var_49], 0x1
0000000000001f55         mov        qword [rsp+0x58+var_58], rax
0000000000001f59         nop        dword [rax]

                     loc_1f60:
0000000000001f60         mov        rdi, qword [rsp+0x58+var_48]                ; CODE XREF=main+1081
0000000000001f65         mov        ecx, 0x2
0000000000001f6a         mov        rsi, r14
0000000000001f6d         rep  cmpsb byte [rsi], byte [rdi]
0000000000001f6f         seta       r12b
0000000000001f73         sbb        r12b, 0x0
0000000000001f77         movsx      r12d, r12b
0000000000001f7b         test       r12d, r12d
0000000000001f7e         jne        loc_2146

0000000000001f84         lea        rsi, qword [aStandardInput]                 ; argument "msgid" for method j_dcgettext, "standard input"
0000000000001f8b         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000001f90         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000001f92         mov        byte [have_read_stdin], 0x1                 ; have_read_stdin
0000000000001f99         xor        ebp, ebp
0000000000001f9b         call       j_dcgettext                                 ; dcgettext
0000000000001fa0         mov        r14, rax

                     loc_1fa3:
0000000000001fa3         xor        esi, esi                                    ; argument "__offset" for method j_lseek, CODE XREF=main+1222
0000000000001fa5         mov        edx, 0x2                                    ; argument "__whence" for method j_lseek
0000000000001faa         mov        edi, ebp                                    ; argument "__fd" for method j_lseek
0000000000001fac         call       j_lseek                                     ; lseek
0000000000001fb1         test       rax, rax
0000000000001fb4         mov        rbx, rax
0000000000001fb7         js         loc_1fc8

0000000000001fb9         mov        edi, ebp                                    ; argument "__fd" for method j_isatty
0000000000001fbb         call       j_isatty                                    ; isatty
0000000000001fc0         test       eax, eax
0000000000001fc2         je         loc_228d

                     loc_1fc8:
0000000000001fc8         cmp        qword [tempfile.7065], 0x0                  ; tempfile.7065, CODE XREF=main+807
0000000000001fd0         je         loc_2216

0000000000001fd6         mov        rbx, qword [tmp_fp.7066]                    ; tmp_fp.7066
0000000000001fdd         mov        rdi, rbx                                    ; argument "__stream" for method j_clearerr_unlocked
0000000000001fe0         call       j_clearerr_unlocked                         ; clearerr_unlocked
0000000000001fe5         xor        edx, edx
0000000000001fe7         xor        esi, esi
0000000000001fe9         mov        rdi, rbx
0000000000001fec         call       rpl_fseeko                                  ; rpl_fseeko
0000000000001ff1         test       eax, eax
0000000000001ff3         js         loc_20ff

0000000000001ff9         mov        rdi, qword [tmp_fp.7066]                    ; argument "__stream" for method j_fileno, tmp_fp.7066
0000000000002000         call       j_fileno                                    ; fileno, DATA XREF=main+444, main+460, output+30, output+103, output+116, peek_token+864, peek_token+896, peek_token+1429, peek_token+1452
0000000000002005         xor        esi, esi                                    ; argument "__length" for method j_ftruncate
0000000000002007         mov        edi, eax                                    ; argument "__fd" for method j_ftruncate
0000000000002009         call       j_ftruncate                                 ; ftruncate
000000000000200e         test       eax, eax
0000000000002010         js         loc_20ff

                     loc_2016:
0000000000002016         mov        rax, qword [tempfile.7065]                  ; tempfile.7065, CODE XREF=main+1528
000000000000201d         mov        r13, qword [tmp_fp.7066]                    ; tmp_fp.7066
0000000000002024         xor        ebx, ebx
0000000000002026         mov        qword [rsp+0x58+var_40], rax
000000000000202b         jmp        loc_205d
000000000000202d         align      16

                     loc_2030:
0000000000002030         cmp        rax, 0xffffffffffffffff                     ; CODE XREF=main+1000
0000000000002034         je         loc_21ce

000000000000203a         mov        rdi, qword [G_buffer]                       ; argument "__ptr" for method j_fwrite_unlocked, G_buffer
0000000000002041         mov        rcx, r13                                    ; argument "__stream" for method j_fwrite_unlocked
0000000000002044         mov        rdx, rax                                    ; argument "__n" for method j_fwrite_unlocked
0000000000002047         mov        esi, 0x1                                    ; argument "__size" for method j_fwrite_unlocked
000000000000204c         call       j_fwrite_unlocked                           ; fwrite_unlocked
0000000000002051         cmp        r15, rax
0000000000002054         jne        loc_21f1

000000000000205a         add        rbx, r15

                     loc_205d:
000000000000205d         mov        rdx, qword [read_size]                      ; argument #3 for method safe_read, read_size, CODE XREF=main+923
0000000000002064         mov        rsi, qword [G_buffer]                       ; argument #2 for method safe_read, G_buffer
000000000000206b         mov        edi, ebp                                    ; argument #1 for method safe_read
000000000000206d         call       safe_read                                   ; safe_read
0000000000002072         test       rax, rax
0000000000002075         mov        r15, rax
0000000000002078         jne        loc_2030

000000000000207a         mov        rdi, r13                                    ; argument "__stream" for method j_fflush_unlocked
000000000000207d         call       j_fflush_unlocked                           ; fflush_unlocked
0000000000002082         test       eax, eax
0000000000002084         jne        loc_21f1

000000000000208a         test       rbx, rbx
000000000000208d         js         loc_213f

0000000000002093         mov        rdi, r13                                    ; argument "__stream" for method j_fileno
0000000000002096         call       j_fileno                                    ; fileno
000000000000209b         mov        rsi, qword [rsp+0x58+var_40]                ; argument #2 for method tac_seekable
00000000000020a0         mov        rdx, rbx                                    ; argument #3 for method tac_seekable
00000000000020a3         mov        edi, eax                                    ; argument #1 for method tac_seekable
00000000000020a5         call       tac_seekable                                ; tac_seekable
00000000000020aa         mov        ebx, eax

                     loc_20ac:
00000000000020ac         test       r12d, r12d                                  ; CODE XREF=main+1201, main+1548, main+1734
00000000000020af         jne        loc_219f

                     loc_20b5:
00000000000020b5         add        qword [rsp+0x58+var_58], 0x8                ; CODE XREF=main+1290, main+1304
00000000000020ba         and        byte [rsp+0x58+var_49], bl
00000000000020be         mov        rax, qword [rsp+0x58+var_58]
00000000000020c2         mov        r14, qword [rax-8]
00000000000020c6         test       r14, r14
00000000000020c9         jne        loc_1f60

                     loc_20cf:
00000000000020cf         xor        esi, esi                                    ; argument #2 for method output, CODE XREF=main+1606
00000000000020d1         xor        edi, edi                                    ; argument #1 for method output
00000000000020d3         call       output                                      ; output
00000000000020d8         cmp        byte [have_read_stdin], 0x0                 ; have_read_stdin
00000000000020df         jne        loc_22a1

                     loc_20e5:
00000000000020e5         movzx      eax, byte [rsp+0x58+var_49]                 ; CODE XREF=main+1562, main+1596
00000000000020ea         add        rsp, 0x28
00000000000020ee         pop        rbx
00000000000020ef         pop        rbp
00000000000020f0         pop        r12
00000000000020f2         xor        eax, 0x1
00000000000020f5         pop        r13
00000000000020f7         movzx      eax, al
00000000000020fa         pop        r14
00000000000020fc         pop        r15
00000000000020fe         ret
                        ; endp

                     loc_20ff:
00000000000020ff         mov        rsi, qword [tempfile.7065]                  ; tempfile.7065, CODE XREF=main+867, main+896
0000000000002106         mov        edi, 0x4
000000000000210b         call       quotearg_style                              ; quotearg_style
0000000000002110         lea        rsi, qword [aFailedToRewind]                ; "failed to rewind stream for %s"
0000000000002117         mov        rbx, rax
000000000000211a         mov        edx, 0x5

                     loc_211f:
000000000000211f         xor        edi, edi                                    ; argument "domain" for method j_dcgettext, CODE XREF=main+1372, main+1409
0000000000002121         call       j_dcgettext                                 ; dcgettext
0000000000002126         mov        r13, rax
0000000000002129         call       j___errno_location                          ; __errno_location
000000000000212e         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
0000000000002130         mov        rcx, rbx
0000000000002133         mov        rdx, r13                                    ; argument "__format" for method j_error
0000000000002136         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000002138         xor        eax, eax
000000000000213a         call       j_error                                     ; error

                     loc_213f:
000000000000213f         xor        ebx, ebx                                    ; CODE XREF=main+1021
0000000000002141         jmp        loc_20ac

                     loc_2146:
0000000000002146         xor        esi, esi                                    ; argument "__oflag" for method j_open, CODE XREF=main+750
0000000000002148         xor        eax, eax
000000000000214a         mov        rdi, r14                                    ; argument "__file" for method j_open
000000000000214d         call       j_open                                      ; open
0000000000002152         test       eax, eax
0000000000002154         mov        ebp, eax
0000000000002156         jns        loc_1fa3

000000000000215c         mov        rsi, r14
000000000000215f         mov        edi, 0x4
0000000000002164         call       quotearg_style                              ; quotearg_style
0000000000002169         lea        rsi, qword [aFailedToOpenSF_14282]          ; "failed to open %s for reading"
0000000000002170         mov        rbp, rax
0000000000002173         mov        edx, 0x5

                     loc_2178:
0000000000002178         xor        edi, edi                                    ; argument "domain" for method j_dcgettext, CODE XREF=main+1340
000000000000217a         call       j_dcgettext                                 ; dcgettext
000000000000217f         mov        rbx, rax
0000000000002182         call       j___errno_location                          ; __errno_location
0000000000002187         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
0000000000002189         mov        rdx, rbx                                    ; argument "__format" for method j_error
000000000000218c         mov        rcx, rbp
000000000000218f         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000002191         xor        eax, eax
0000000000002193         xor        ebx, ebx
0000000000002195         call       j_error                                     ; error
000000000000219a         jmp        loc_20b5

                     loc_219f:
000000000000219f         mov        edi, ebp                                    ; argument "__fd" for method j_close, CODE XREF=main+1055
00000000000021a1         call       j_close                                     ; close
00000000000021a6         test       eax, eax
00000000000021a8         je         loc_20b5

00000000000021ae         mov        rdx, r14                                    ; argument #3 for method quotearg_n_style_colon
00000000000021b1         mov        esi, 0x3                                    ; argument #2 for method quotearg_n_style_colon
00000000000021b6         xor        edi, edi                                    ; argument #1 for method quotearg_n_style_colon
00000000000021b8         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
00000000000021bd         mov        edx, 0x5
00000000000021c2         mov        rbp, rax
00000000000021c5         lea        rsi, qword [aSReadError]                    ; "%s: read error"
00000000000021cc         jmp        loc_2178

                     loc_21ce:
00000000000021ce         mov        rdx, r14                                    ; argument #3 for method quotearg_n_style_colon, CODE XREF=main+932
00000000000021d1         mov        esi, 0x3                                    ; argument #2 for method quotearg_n_style_colon
00000000000021d6         xor        edi, edi                                    ; argument #1 for method quotearg_n_style_colon
00000000000021d8         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
00000000000021dd         mov        edx, 0x5
00000000000021e2         mov        rbx, rax
00000000000021e5         lea        rsi, qword [aSReadError]                    ; "%s: read error"
00000000000021ec         jmp        loc_211f

                     loc_21f1:
00000000000021f1         mov        rdx, qword [rsp+0x58+var_40]                ; argument #3 for method quotearg_n_style_colon, CODE XREF=main+964, main+1012
00000000000021f6         mov        esi, 0x3                                    ; argument #2 for method quotearg_n_style_colon
00000000000021fb         xor        edi, edi                                    ; argument #1 for method quotearg_n_style_colon
00000000000021fd         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
0000000000002202         mov        edx, 0x5
0000000000002207         mov        rbx, rax
000000000000220a         lea        rsi, qword [aFailedToOpenSF+30]             ; 0x142c8
0000000000002211         jmp        loc_211f

                     loc_2216:
0000000000002216         lea        rdi, qword [aTmpdir]                        ; argument "__name" for method j_getenv, "TMPDIR", CODE XREF=main+832
000000000000221d         call       j_getenv                                    ; getenv
0000000000002222         test       rax, rax
0000000000002225         mov        rbx, rax
0000000000002228         lea        rax, qword [aFullDocumentat+27]             ; 0x1421b
000000000000222f         lea        rsi, qword [aTacxxxxxx]                     ; "tacXXXXXX"
0000000000002236         cmove      rbx, rax
000000000000223a         xor        edx, edx
000000000000223c         mov        rdi, rbx
000000000000223f         call       mfile_name_concat                           ; mfile_name_concat
0000000000002244         mov        rdi, rax
0000000000002247         mov        qword [tempfile.7065], rax                  ; tempfile.7065
000000000000224e         call       mkstemp_safer                               ; mkstemp_safer
0000000000002253         test       eax, eax
0000000000002255         mov        r13d, eax
0000000000002258         js         loc_2301

000000000000225e         lea        rsi, qword [aTmpdir+7]                      ; argument "__modes" for method j_fdopen, 0x142a7
0000000000002265         mov        edi, eax                                    ; argument "__fd" for method j_fdopen
0000000000002267         call       j_fdopen                                    ; fdopen
000000000000226c         test       rax, rax
000000000000226f         mov        qword [tmp_fp.7066], rax                    ; tmp_fp.7066
0000000000002276         mov        rdi, qword [tempfile.7065]                  ; tempfile.7065
000000000000227d         je         loc_235b

0000000000002283         call       j_unlink                                    ; unlink
0000000000002288         jmp        loc_2016

                     loc_228d:
000000000000228d         mov        rdx, rbx                                    ; argument #3 for method tac_seekable, CODE XREF=main+818
0000000000002290         mov        rsi, r14                                    ; argument #2 for method tac_seekable
0000000000002293         mov        edi, ebp                                    ; argument #1 for method tac_seekable
0000000000002295         call       tac_seekable                                ; tac_seekable
000000000000229a         mov        ebx, eax
000000000000229c         jmp        loc_20ac

                     loc_22a1:
00000000000022a1         xor        edi, edi                                    ; argument "__fd" for method j_close, CODE XREF=main+1103
00000000000022a3         call       j_close                                     ; close
00000000000022a8         test       eax, eax
00000000000022aa         jns        loc_20e5

00000000000022b0         call       j___errno_location                          ; __errno_location
00000000000022b5         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
00000000000022b7         lea        rdx, qword [aLibs+10]                       ; argument "__format" for method j_error, 0x146ca
00000000000022be         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000022c0         xor        eax, eax
00000000000022c2         call       j_error                                     ; error
00000000000022c7         mov        byte [rsp+0x58+var_49], 0x0
00000000000022cc         jmp        loc_20e5

                     loc_22d1:
00000000000022d1         mov        byte [rsp+0x58+var_49], 0x1                 ; CODE XREF=main+609
00000000000022d6         jmp        loc_20cf

                     loc_22db:
00000000000022db         mov        rsi, qword [separator]                      ; argument "__src" for method j_memcpy, separator, CODE XREF=main+571
00000000000022e2         lea        rdx, qword [r12+1]                          ; argument "__n" for method j_memcpy
00000000000022e7         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
00000000000022ea         call       j_memcpy                                    ; memcpy
00000000000022ef         mov        rcx, rax
00000000000022f2         add        rcx, r12
00000000000022f5         mov        qword [G_buffer], rcx                       ; G_buffer
00000000000022fc         jmp        loc_1edc

                     loc_2301:
0000000000002301         mov        rsi, rbx                                    ; CODE XREF=main+1480
0000000000002304         mov        edi, 0x4
0000000000002309         call       quotearg_style                              ; quotearg_style
000000000000230e         lea        rsi, qword [aFailedToCreate]                ; argument "msgid" for method j_dcgettext, "failed to create temporary file in %s"
0000000000002315         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000231a         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000231c         mov        rbx, rax
000000000000231f         call       j_dcgettext                                 ; dcgettext
0000000000002324         mov        r13, rax
0000000000002327         call       j___errno_location                          ; __errno_location
000000000000232c         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
000000000000232e         mov        rcx, rbx
0000000000002331         mov        rdx, r13                                    ; argument "__format" for method j_error
0000000000002334         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000002336         xor        eax, eax
0000000000002338         call       j_error                                     ; error

                     loc_233d:
000000000000233d         mov        rdi, qword [tempfile.7065]                  ; argument "__ptr" for method j_free, tempfile.7065, CODE XREF=main+1823
0000000000002344         xor        ebx, ebx
0000000000002346         call       j_free                                      ; free
000000000000234b         mov        qword [tempfile.7065], 0x0                  ; tempfile.7065
0000000000002356         jmp        loc_20ac

                     loc_235b:
000000000000235b         mov        rsi, rdi                                    ; CODE XREF=main+1517
000000000000235e         mov        edi, 0x4
0000000000002363         call       quotearg_style                              ; quotearg_style
0000000000002368         lea        rsi, qword [aFailedToOpenSF]                ; argument "msgid" for method j_dcgettext, "failed to open %s for writing"
000000000000236f         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002371         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002376         mov        rbx, rax
0000000000002379         call       j_dcgettext                                 ; dcgettext
000000000000237e         mov        qword [rsp+0x58+var_40], rax
0000000000002383         call       j___errno_location                          ; __errno_location
0000000000002388         mov        rdx, qword [rsp+0x58+var_40]                ; argument "__format" for method j_error
000000000000238d         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
000000000000238f         mov        rcx, rbx
0000000000002392         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000002394         xor        eax, eax
0000000000002396         call       j_error                                     ; error
000000000000239b         mov        edi, r13d                                   ; argument "__fd" for method j_close
000000000000239e         call       j_close                                     ; close
00000000000023a3         mov        rdi, qword [tempfile.7065]                  ; argument "__name" for method j_unlink, tempfile.7065
00000000000023aa         call       j_unlink                                    ; unlink
00000000000023af         jmp        loc_233d

                     loc_23b1:
00000000000023b1         cmp        eax, 0xffffff7e                             ; CODE XREF=main+205
00000000000023b6         jne        loc_23cb

00000000000023b8         xor        edi, edi                                    ; argument #1 for method usage
00000000000023ba         call       usage                                       ; usage

                     loc_23bf:
00000000000023bf         mov        qword [read_size], rax                      ; read_size, CODE XREF=main+483

                     loc_23c6:
00000000000023c6         call       xalloc_die                                  ; xalloc_die, CODE XREF=main+540
                        ; endp

                     loc_23cb:
00000000000023cb         mov        edi, 0x1                                    ; argument #1 for method usage, CODE XREF=main+173, main+1830
00000000000023d0         call       usage                                       ; usage

                     loc_23d5:
00000000000023d5         lea        rsi, qword [aSeparatorCanno]                ; argument "msgid" for method j_dcgettext, "separator cannot be empty", CODE XREF=main+339
00000000000023dc         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000023e1         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000023e3         call       j_dcgettext                                 ; dcgettext
00000000000023e8         xor        esi, esi                                    ; argument "__errnum" for method j_error
00000000000023ea         mov        rdx, rax                                    ; argument "__format" for method j_error
00000000000023ed         mov        edi, 0x1                                    ; argument "__status" for method j_error
00000000000023f2         xor        eax, eax
00000000000023f4         call       j_error                                     ; error

                     loc_23f9:
00000000000023f9         lea        rdx, qword [aSS+4]                          ; argument "__format" for method j_error, 0x14680, CODE XREF=main+431
0000000000002400         mov        rcx, rax
0000000000002403         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002405         mov        edi, 0x1                                    ; argument "__status" for method j_error
000000000000240a         xor        eax, eax
000000000000240c         call       j_error                                     ; error
0000000000002411         nop        word [cs:rax+rax]                           ; End of unwind block (FDE at 0x15ea0)
000000000000241b         nop        dword [rax+rax]
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _start:
0000000000002420         xor        ebp, ebp                                    ; Begin of unwind block (FDE at 0x15d3c)
0000000000002422         mov        r9, rdx
0000000000002425         pop        rsi
0000000000002426         mov        rdx, rsp
0000000000002429         and        rsp, 0xfffffffffffffff0
000000000000242d         push       rax
000000000000242e         push       rsp
000000000000242f         lea        r8, qword [__libc_csu_fini]                 ; __libc_csu_fini
0000000000002436         lea        rcx, qword [__libc_csu_init]                ; __libc_csu_init
000000000000243d         lea        rdi, qword [main]                           ; main
0000000000002444         call       qword [qword_218fd0+8]                      ; 0x218fd8
000000000000244a         hlt
                        ; endp
000000000000244b         align      16                                          ; End of unwind block (FDE at 0x15d3c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     deregister_tm_clones:
0000000000002450         lea        rdi, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5, CODE XREF=__do_global_dtors_aux+35
0000000000002457         push       rbp
0000000000002458         lea        rax, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5
000000000000245f         cmp        rax, rdi
0000000000002462         mov        rbp, rsp
0000000000002465         je         loc_2480

0000000000002467         mov        rax, qword [qword_218fd0]                   ; qword_218fd0
000000000000246e         test       rax, rax
0000000000002471         je         loc_2480

0000000000002473         pop        rbp
0000000000002474         jmp        rax
                        ; endp
0000000000002476         align      128

                     loc_2480:
0000000000002480         pop        rbp                                         ; CODE XREF=deregister_tm_clones+21, deregister_tm_clones+33
0000000000002481         ret
                        ; endp
0000000000002482         align      16

                     register_tm_clones:
0000000000002490         lea        rdi, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5, CODE XREF=frame_dummy+5
0000000000002497         lea        rsi, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5
000000000000249e         push       rbp
000000000000249f         sub        rsi, rdi
00000000000024a2         mov        rbp, rsp
00000000000024a5         sar        rsi, 0x3
00000000000024a9         mov        rax, rsi
00000000000024ac         shr        rax, 0x3f
00000000000024b0         add        rsi, rax
00000000000024b3         sar        rsi, 0x1
00000000000024b6         je         loc_24d0

00000000000024b8         mov        rax, qword [qword_218fe8]                   ; qword_218fe8
00000000000024bf         test       rax, rax
00000000000024c2         je         loc_24d0

00000000000024c4         pop        rbp
00000000000024c5         jmp        rax
                        ; endp
00000000000024c7         align      16

                     loc_24d0:
00000000000024d0         pop        rbp                                         ; CODE XREF=register_tm_clones+38, register_tm_clones+50
00000000000024d1         ret
                        ; endp
00000000000024d2         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __do_global_dtors_aux:
00000000000024e0         cmp        byte [completed.7697], 0x0                  ; completed.7697, DATA XREF=__do_global_dtors_aux_fini_array_entry
00000000000024e7         jne        loc_2518

00000000000024e9         cmp        qword [qword_218ff0], 0x0                   ; qword_218ff0
00000000000024f1         push       rbp
00000000000024f2         mov        rbp, rsp
00000000000024f5         je         loc_2503

00000000000024f7         mov        rdi, qword [__dso_handle]                   ; __dso_handle
00000000000024fe         call       j_qword_218ff0                              ; qword_218ff0

                     loc_2503:
0000000000002503         call       deregister_tm_clones                        ; deregister_tm_clones, CODE XREF=__do_global_dtors_aux+21
0000000000002508         mov        byte [completed.7697], 0x1                  ; completed.7697
000000000000250f         pop        rbp
0000000000002510         ret
                        ; endp
0000000000002511         align      8

                     loc_2518:
0000000000002518         ret                                                    ; CODE XREF=__do_global_dtors_aux+7
                        ; endp
000000000000251a         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     frame_dummy:
0000000000002520         push       rbp                                         ; DATA XREF=__frame_dummy_init_array_entry
0000000000002521         mov        rbp, rsp
0000000000002524         pop        rbp
0000000000002525         jmp        register_tm_clones                          ; register_tm_clones
000000000000252a         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     output:
0000000000002530         push       r15                                         ; Begin of unwind block (FDE at 0x15dac), CODE XREF=main+1091, tac_seekable+984, tac_seekable+1016, tac_seekable+1232
0000000000002532         push       r14
0000000000002534         push       r13
0000000000002536         push       r12
0000000000002538         push       rbp
0000000000002539         push       rbx
000000000000253a         sub        rsp, 0x8
000000000000253e         test       rdi, rdi
0000000000002541         mov        rbx, qword [bytes_in_buffer.7000]           ; bytes_in_buffer.7000
0000000000002548         je         loc_25f0

000000000000254e         mov        r15d, 0x2000
0000000000002554         sub        rsi, rdi
0000000000002557         lea        r13, qword [buffer.6999]                    ; buffer.6999
000000000000255e         sub        r15, rbx
0000000000002561         mov        r12, rdi
0000000000002564         mov        rbp, rsi
0000000000002567         cmp        rsi, r15
000000000000256a         mov        r14, r13
000000000000256d         jb         loc_2628

0000000000002573         nop        dword [rax+rax]

                     loc_2578:
0000000000002578         lea        rdi, qword [r13+rbx]                        ; argument "__dest" for method j_memcpy, CODE XREF=output+145
000000000000257d         mov        rdx, r15                                    ; argument "__n" for method j_memcpy
0000000000002580         mov        rsi, r12                                    ; argument "__src" for method j_memcpy
0000000000002583         sub        rbp, r15
0000000000002586         add        r12, r15
0000000000002589         xor        ebx, ebx
000000000000258b         call       j_memcpy                                    ; memcpy
0000000000002590         mov        rcx, qword [stdout@@GLIBC_2.2.5]            ; argument "__stream" for method j_fwrite_unlocked, stdout@@GLIBC_2.2.5
0000000000002597         mov        edx, 0x2000                                 ; argument "__n" for method j_fwrite_unlocked
000000000000259c         mov        esi, 0x1                                    ; argument "__size" for method j_fwrite_unlocked
00000000000025a1         mov        rdi, r14                                    ; argument "__ptr" for method j_fwrite_unlocked
00000000000025a4         mov        r15d, 0x2000
00000000000025aa         call       j_fwrite_unlocked                           ; fwrite_unlocked
00000000000025af         cmp        rbp, 0x1fff
00000000000025b6         mov        qword [bytes_in_buffer.7000], 0x0           ; bytes_in_buffer.7000
00000000000025c1         ja         loc_2578

00000000000025c3         lea        rdi, qword [buffer.6999]                    ; buffer.6999

                     loc_25ca:
00000000000025ca         add        rbx, rbp                                    ; CODE XREF=output+252
00000000000025cd         mov        rdx, rbp                                    ; argument "__n" for method j_memcpy
00000000000025d0         mov        rsi, r12                                    ; argument "__src" for method j_memcpy
00000000000025d3         call       j_memcpy                                    ; memcpy
00000000000025d8         mov        qword [bytes_in_buffer.7000], rbx           ; bytes_in_buffer.7000
00000000000025df         add        rsp, 0x8
00000000000025e3         pop        rbx
00000000000025e4         pop        rbp
00000000000025e5         pop        r12
00000000000025e7         pop        r13
00000000000025e9         pop        r14
00000000000025eb         pop        r15
00000000000025ed         ret
                        ; endp
00000000000025ee         align      16

                     loc_25f0:
00000000000025f0         mov        rcx, qword [stdout@@GLIBC_2.2.5]            ; argument "__stream" for method j_fwrite_unlocked, stdout@@GLIBC_2.2.5, CODE XREF=output+24
00000000000025f7         lea        rdi, qword [buffer.6999]                    ; argument "__ptr" for method j_fwrite_unlocked, buffer.6999
00000000000025fe         mov        rdx, rbx                                    ; argument "__n" for method j_fwrite_unlocked
0000000000002601         mov        esi, 0x1                                    ; argument "__size" for method j_fwrite_unlocked
0000000000002606         call       j_fwrite_unlocked                           ; fwrite_unlocked
000000000000260b         mov        qword [bytes_in_buffer.7000], 0x0           ; bytes_in_buffer.7000
0000000000002616         add        rsp, 0x8
000000000000261a         pop        rbx
000000000000261b         pop        rbp
000000000000261c         pop        r12
000000000000261e         pop        r13
0000000000002620         pop        r14
0000000000002622         pop        r15
0000000000002624         ret
                        ; endp
0000000000002625         align      8

                     loc_2628:
0000000000002628         lea        rdi, qword [rbx+r13]                        ; CODE XREF=output+61
000000000000262c         jmp        loc_25ca
000000000000262e         align      16                                          ; End of unwind block (FDE at 0x15dac)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_4C: int32_t, -76
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_98: int64_t, -152
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208
        ;    var_D8: int64_t, -216
        ;    var_E0: int64_t, -224
        ;    var_E8: int64_t, -232
        ;    var_F0: int64_t, -240
        ;    var_F8: int64_t, -248
        ;    var_100: int64_t, -256
        ;    var_108: int64_t, -264
        ;    var_110: int64_t, -272


                     tac_seekable:
0000000000002630         push       r15                                         ; Begin of unwind block (FDE at 0x15e10), CODE XREF=main+1045, main+1541
0000000000002632         push       r14
0000000000002634         mov        r14, rdx
0000000000002637         push       r13
0000000000002639         push       r12
000000000000263b         push       rbp
000000000000263c         push       rbx
000000000000263d         sub        rsp, 0x38
0000000000002641         mov        r15, qword [separator]                      ; separator
0000000000002648         mov        rbx, qword [read_size]                      ; read_size
000000000000264f         mov        dword [rsp+0x68+var_4C], edi
0000000000002653         mov        qword [rsp+0x68+var_40], rsi
0000000000002658         lea        rax, qword [r15+1]
000000000000265c         movzx      ebp, byte [r15]
0000000000002660         mov        qword [rsp+0x68+var_60], rax
0000000000002665         mov        rax, qword [match_length]                   ; match_length
000000000000266c         mov        qword [rsp+0x68+var_48], rax
0000000000002671         lea        r13, qword [rax-1]
0000000000002675         mov        rax, rdx
0000000000002678         xor        edx, edx
000000000000267a         div        rbx
000000000000267d         test       rdx, rdx
0000000000002680         jne        loc_2b19

                     loc_2686:
0000000000002686         lea        r12, qword [aSSeekFailed]                   ; "%s: seek failed", CODE XREF=tac_seekable+1273, tac_seekable+1350
000000000000268d         jmp        loc_2693
000000000000268f         align      16

                     loc_2690:
0000000000002690         sub        r14, rbx                                    ; CODE XREF=tac_seekable+165, tac_seekable+234

                     loc_2693:
0000000000002693         mov        rsi, qword [G_buffer]                       ; argument #2 for method safe_read, G_buffer, CODE XREF=tac_seekable+93
000000000000269a         mov        edi, dword [rsp+0x68+var_4C]                ; argument #1 for method safe_read
000000000000269e         mov        rdx, rbx                                    ; argument #3 for method safe_read
00000000000026a1         call       safe_read                                   ; safe_read
00000000000026a6         test       rax, rax
00000000000026a9         mov        rdx, rax
00000000000026ac         mov        rbx, qword [read_size]                      ; read_size
00000000000026b3         jne        loc_271f

00000000000026b5         test       r14, r14
00000000000026b8         je         loc_2ade

00000000000026be         mov        edi, dword [rsp+0x68+var_4C]                ; argument "__fd" for method j_lseek
00000000000026c2         mov        rsi, rbx
00000000000026c5         mov        edx, 0x1                                    ; argument "__whence" for method j_lseek
00000000000026ca         neg        rsi                                         ; argument "__offset" for method j_lseek
00000000000026cd         call       j_lseek                                     ; lseek
00000000000026d2         test       rax, rax
00000000000026d5         jns        loc_2690

00000000000026d7         mov        rdx, qword [rsp+0x68+var_40]                ; argument #3 for method quotearg_n_style_colon
00000000000026dc         mov        esi, 0x3                                    ; argument #2 for method quotearg_n_style_colon
00000000000026e1         xor        edi, edi                                    ; argument #1 for method quotearg_n_style_colon
00000000000026e3         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
00000000000026e8         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000026ed         mov        rsi, r12                                    ; argument "msgid" for method j_dcgettext
00000000000026f0         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000026f2         mov        rbx, rax
00000000000026f5         call       j_dcgettext                                 ; dcgettext
00000000000026fa         mov        r15, rax
00000000000026fd         call       j___errno_location                          ; __errno_location
0000000000002702         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
0000000000002704         mov        rcx, rbx
0000000000002707         mov        rdx, r15                                    ; argument "__format" for method j_error
000000000000270a         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000270c         xor        eax, eax
000000000000270e         call       j_error                                     ; error
0000000000002713         mov        rbx, qword [read_size]                      ; read_size
000000000000271a         jmp        loc_2690

                     loc_271f:
000000000000271f         cmp        rax, rbx                                    ; CODE XREF=tac_seekable+131
0000000000002722         je         loc_274c

0000000000002724         jmp        loc_2b7b
0000000000002729         align      16

                     loc_2730:
0000000000002730         cmp        rax, 0xffffffffffffffff                     ; CODE XREF=tac_seekable+303
0000000000002734         je         loc_2a8d

000000000000273a         mov        rdx, qword [read_size]                      ; read_size
0000000000002741         add        r14, rax
0000000000002744         mov        rbx, rax
0000000000002747         cmp        rdx, rax
000000000000274a         jne        loc_276b

                     loc_274c:
000000000000274c         mov        rsi, qword [G_buffer]                       ; argument #2 for method safe_read, G_buffer, CODE XREF=tac_seekable+242, tac_seekable+1204
0000000000002753         mov        edi, dword [rsp+0x68+var_4C]                ; argument #1 for method safe_read
0000000000002757         call       safe_read                                   ; safe_read
000000000000275c         test       rax, rax
000000000000275f         jne        loc_2730

                     loc_2761:
0000000000002761         cmp        rbx, 0xffffffffffffffff                     ; CODE XREF=tac_seekable+1358
0000000000002765         je         loc_2a8d

                     loc_276b:
000000000000276b         mov        r12, qword [G_buffer]                       ; G_buffer, CODE XREF=tac_seekable+282, tac_seekable+1212
0000000000002772         mov        rax, qword [sentinel_length]                ; sentinel_length
0000000000002779         lea        rcx, qword [r12+rbx]
000000000000277d         mov        rdx, rcx
0000000000002780         mov        qword [rsp+0x68+var_58], rcx
0000000000002785         sub        rcx, qword [rsp+0x68+var_48]
000000000000278a         mov        byte [rsp+0x68+var_48], 0x1
000000000000278f         add        rcx, 0x1
0000000000002793         test       rax, rax
0000000000002796         cmovne     rdx, rcx
000000000000279a         mov        r15, rdx
000000000000279d         nop        dword [rax]

                     loc_27a0:
00000000000027a0         test       rax, rax                                    ; CODE XREF=tac_seekable+922
00000000000027a3         jne        loc_2943

                     loc_27a9:
00000000000027a9         sub        r15, r12                                    ; CODE XREF=tac_seekable+766, tac_seekable+901
00000000000027ac         mov        r8d, 0x1
00000000000027b2         sub        r8, r15
00000000000027b5         cmp        r8, 0x1
00000000000027b9         jg         loc_2bac

00000000000027bf         je         loc_29d7

00000000000027c5         lea        rcx, qword [r15-1]
00000000000027c9         lea        r9, qword [regs]                            ; regs
00000000000027d0         lea        rdi, qword [compiled_separator]             ; compiled_separator
00000000000027d7         mov        rdx, r15
00000000000027da         mov        rsi, r12
00000000000027dd         call       rpl_re_search                               ; rpl_re_search
00000000000027e2         cmp        rax, 0xffffffffffffffff
00000000000027e6         je         loc_29d0

00000000000027ec         cmp        rax, 0xfffffffffffffffe
00000000000027f0         je         loc_2b88

00000000000027f6         mov        rax, qword [qword_21b108]                   ; qword_21b108
00000000000027fd         mov        r12, qword [G_buffer]                       ; G_buffer
0000000000002804         mov        rdx, qword [rax]
0000000000002807         mov        rax, qword [qword_21b110]                   ; qword_21b110
000000000000280e         mov        rax, qword [rax]
0000000000002811         lea        rbx, qword [r12+rdx]
0000000000002815         sub        rax, rdx
0000000000002818         mov        qword [match_length], rax                   ; match_length

                     loc_281f:
000000000000281f         cmp        rbx, r12                                    ; CODE XREF=tac_seekable+800, tac_seekable+940
0000000000002822         jae        loc_2978

                     loc_2828:
0000000000002828         test       r14, r14                                    ; CODE XREF=tac_seekable+829
000000000000282b         je         loc_2af8

0000000000002831         mov        rbx, qword [rsp+0x68+var_58]
0000000000002836         mov        rax, qword [read_size]                      ; read_size
000000000000283d         sub        rbx, r12
0000000000002840         cmp        rax, rbx
0000000000002843         jae        loc_289c

0000000000002845         mov        rdx, qword [sentinel_length]                ; sentinel_length
000000000000284c         lea        rsi, qword [rax+rax]
0000000000002850         mov        rdi, qword [G_buffer_size]                  ; G_buffer_size
0000000000002857         mov        r15d, 0x1
000000000000285d         mov        qword [read_size], rsi                      ; read_size
0000000000002864         lea        rsi, qword [rdx+rax*4+2]
0000000000002869         test       rdx, rdx
000000000000286c         cmovne     r15, rdx
0000000000002870         cmp        rsi, rdi
0000000000002873         mov        qword [G_buffer_size], rsi                  ; G_buffer_size
000000000000287a         jb         loc_2b83

0000000000002880         mov        rdi, r12
0000000000002883         sub        rdi, r15                                    ; argument #1 for method xrealloc
0000000000002886         call       xrealloc                                    ; xrealloc
000000000000288b         add        rax, r15
000000000000288e         mov        qword [G_buffer], rax                       ; G_buffer
0000000000002895         mov        rax, qword [read_size]                      ; read_size

                     loc_289c:
000000000000289c         cmp        r14, rax                                    ; CODE XREF=tac_seekable+531
000000000000289f         jb         loc_29e8

00000000000028a5         sub        r14, rax

                     loc_28a8:
00000000000028a8         mov        edi, dword [rsp+0x68+var_4C]                ; argument "__fd" for method j_lseek, CODE XREF=tac_seekable+962
00000000000028ac         xor        edx, edx                                    ; argument "__whence" for method j_lseek
00000000000028ae         mov        rsi, r14                                    ; argument "__offset" for method j_lseek
00000000000028b1         call       j_lseek                                     ; lseek
00000000000028b6         test       rax, rax
00000000000028b9         js         loc_2a48

                     loc_28bf:
00000000000028bf         mov        r12, qword [G_buffer]                       ; G_buffer, CODE XREF=tac_seekable+1112
00000000000028c6         mov        r8, qword [read_size]                       ; read_size
00000000000028cd         mov        rdx, rbx                                    ; argument "__n" for method j_memmove
00000000000028d0         lea        r15, qword [r12+r8]
00000000000028d4         mov        rsi, r12                                    ; argument "__src" for method j_memmove
00000000000028d7         mov        qword [rsp+0x68+var_58], r8
00000000000028dc         mov        rdi, r15                                    ; argument "__dest" for method j_memmove
00000000000028df         call       j_memmove                                   ; memmove
00000000000028e4         mov        r8, qword [rsp+0x68+var_58]
00000000000028e9         mov        edi, dword [rsp+0x68+var_4C]                ; argument #1 for method safe_read
00000000000028ed         mov        rsi, r12                                    ; argument #2 for method safe_read
00000000000028f0         add        rbx, r8
00000000000028f3         cmp        qword [sentinel_length], 0x0                ; sentinel_length
00000000000028fb         mov        rdx, r8                                     ; argument #3 for method safe_read
00000000000028fe         lea        rax, qword [r12+rbx]
0000000000002902         mov        qword [rsp+0x68+var_58], rax
0000000000002907         cmove      r15, rax
000000000000290b         call       safe_read                                   ; safe_read
0000000000002910         cmp        rax, qword [read_size]                      ; read_size
0000000000002917         jne        loc_2a8d

000000000000291d         mov        rax, qword [sentinel_length]                ; sentinel_length
0000000000002924         mov        r12, qword [G_buffer]                       ; G_buffer
000000000000292b         test       rax, rax
000000000000292e         je         loc_27a9

0000000000002934         cmp        byte [r15-1], bpl
0000000000002938         lea        rbx, qword [r15-1]
000000000000293c         je         loc_294d

000000000000293e         nop

                     loc_2940:
0000000000002940         mov        r15, rbx                                    ; CODE XREF=tac_seekable+795, tac_seekable+824

                     loc_2943:
0000000000002943         cmp        byte [r15-1], bpl                           ; CODE XREF=tac_seekable+371
0000000000002947         lea        rbx, qword [r15-1]
000000000000294b         jne        loc_2940

                     loc_294d:
000000000000294d         test       r13, r13                                    ; CODE XREF=tac_seekable+780
0000000000002950         je         loc_281f

0000000000002956         mov        rsi, qword [rsp+0x68+var_60]                ; argument "__s2" for method j_strncmp
000000000000295b         mov        rdx, r13                                    ; argument "__n" for method j_strncmp
000000000000295e         mov        rdi, r15                                    ; argument "__s1" for method j_strncmp
0000000000002961         call       j_strncmp                                   ; strncmp
0000000000002966         test       eax, eax
0000000000002968         jne        loc_2940

000000000000296a         cmp        rbx, r12
000000000000296d         jb         loc_2828

0000000000002973         nop        dword [rax+rax]

                     loc_2978:
0000000000002978         cmp        byte [separator_ends_record], 0x0           ; separator_ends_record, CODE XREF=tac_seekable+498
000000000000297f         je         loc_2a00

0000000000002981         movzx      ecx, byte [rsp+0x68+var_48]
0000000000002986         mov        r15, qword [match_length]                   ; match_length
000000000000298d         add        r15, rbx
0000000000002990         xor        ecx, 0x1
0000000000002993         cmp        qword [rsp+0x68+var_58], r15
0000000000002998         setne      dl
000000000000299b         or         cl, dl
000000000000299d         mov        byte [rsp+0x68+var_48], cl
00000000000029a1         jne        loc_2a20

00000000000029a3         mov        qword [rsp+0x68+var_58], r15

                     loc_29a8:
00000000000029a8         mov        rax, qword [sentinel_length]                ; sentinel_length, CODE XREF=tac_seekable+1001, tac_seekable+1038
00000000000029af         mov        r15, rbx
00000000000029b2         test       rax, rax
00000000000029b5         je         loc_27a9

00000000000029bb         mov        edx, 0x1
00000000000029c0         sub        rdx, qword [match_length]                   ; match_length
00000000000029c7         add        r15, rdx
00000000000029ca         jmp        loc_27a0
00000000000029cf         align      16

                     loc_29d0:
00000000000029d0         mov        r12, qword [G_buffer]                       ; G_buffer, CODE XREF=tac_seekable+438

                     loc_29d7:
00000000000029d7         lea        rbx, qword [r12-1]                          ; CODE XREF=tac_seekable+399
00000000000029dc         jmp        loc_281f
00000000000029e1         align      8

                     loc_29e8:
00000000000029e8         mov        qword [read_size], r14                      ; read_size, CODE XREF=tac_seekable+623
00000000000029ef         xor        r14d, r14d
00000000000029f2         jmp        loc_28a8
00000000000029f7         align      512

                     loc_2a00:
0000000000002a00         mov        rsi, qword [rsp+0x68+var_58]                ; argument #2 for method output, CODE XREF=tac_seekable+847
0000000000002a05         mov        rdi, rbx                                    ; argument #1 for method output
0000000000002a08         call       output                                      ; output
0000000000002a0d         mov        r12, qword [G_buffer]                       ; G_buffer
0000000000002a14         mov        qword [rsp+0x68+var_58], rbx
0000000000002a19         jmp        loc_29a8
0000000000002a1b         align      32

                     loc_2a20:
0000000000002a20         mov        rsi, qword [rsp+0x68+var_58]                ; argument #2 for method output, CODE XREF=tac_seekable+881
0000000000002a25         mov        rdi, r15                                    ; argument #1 for method output
0000000000002a28         call       output                                      ; output
0000000000002a2d         mov        r12, qword [G_buffer]                       ; G_buffer
0000000000002a34         mov        qword [rsp+0x68+var_58], r15
0000000000002a39         mov        byte [rsp+0x68+var_48], 0x0
0000000000002a3e         jmp        loc_29a8
0000000000002a43         align      8

                     loc_2a48:
0000000000002a48         mov        rdx, qword [rsp+0x68+var_40]                ; argument #3 for method quotearg_n_style_colon, CODE XREF=tac_seekable+649
0000000000002a4d         xor        edi, edi                                    ; argument #1 for method quotearg_n_style_colon
0000000000002a4f         mov        esi, 0x3                                    ; argument #2 for method quotearg_n_style_colon
0000000000002a54         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
0000000000002a59         lea        rsi, qword [aSSeekFailed]                   ; argument "msgid" for method j_dcgettext, "%s: seek failed"
0000000000002a60         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002a62         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002a67         mov        r12, rax
0000000000002a6a         call       j_dcgettext                                 ; dcgettext
0000000000002a6f         mov        r15, rax
0000000000002a72         call       j___errno_location                          ; __errno_location
0000000000002a77         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
0000000000002a79         mov        rcx, r12
0000000000002a7c         mov        rdx, r15                                    ; argument "__format" for method j_error
0000000000002a7f         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000002a81         xor        eax, eax
0000000000002a83         call       j_error                                     ; error
0000000000002a88         jmp        loc_28bf

                     loc_2a8d:
0000000000002a8d         mov        rdx, qword [rsp+0x68+var_40]                ; argument #3 for method quotearg_n_style_colon, CODE XREF=tac_seekable+260, tac_seekable+309, tac_seekable+743
0000000000002a92         mov        esi, 0x3                                    ; argument #2 for method quotearg_n_style_colon
0000000000002a97         xor        edi, edi                                    ; argument #1 for method quotearg_n_style_colon
0000000000002a99         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
0000000000002a9e         lea        rsi, qword [aSReadError]                    ; argument "msgid" for method j_dcgettext, "%s: read error"
0000000000002aa5         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002aaa         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002aac         mov        rbp, rax
0000000000002aaf         call       j_dcgettext                                 ; dcgettext
0000000000002ab4         mov        rbx, rax
0000000000002ab7         call       j___errno_location                          ; __errno_location
0000000000002abc         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
0000000000002abe         mov        rcx, rbp
0000000000002ac1         mov        rdx, rbx                                    ; argument "__format" for method j_error
0000000000002ac4         xor        eax, eax
0000000000002ac6         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000002ac8         call       j_error                                     ; error
0000000000002acd         add        rsp, 0x38
0000000000002ad1         xor        eax, eax
0000000000002ad3         pop        rbx
0000000000002ad4         pop        rbp
0000000000002ad5         pop        r12
0000000000002ad7         pop        r13
0000000000002ad9         pop        r14
0000000000002adb         pop        r15
0000000000002add         ret
                        ; endp

                     loc_2ade:
0000000000002ade         test       rbx, rbx                                    ; CODE XREF=tac_seekable+136
0000000000002ae1         mov        rdx, r14
0000000000002ae4         je         loc_274c

0000000000002aea         xor        ebx, ebx
0000000000002aec         jmp        loc_276b
0000000000002af1         align      8

                     loc_2af8:
0000000000002af8         mov        rsi, qword [rsp+0x68+var_58]                ; argument #2 for method output, CODE XREF=tac_seekable+507
0000000000002afd         mov        rdi, r12                                    ; argument #1 for method output
0000000000002b00         call       output                                      ; output
0000000000002b05         add        rsp, 0x38
0000000000002b09         mov        eax, 0x1
0000000000002b0e         pop        rbx
0000000000002b0f         pop        rbp
0000000000002b10         pop        r12
0000000000002b12         pop        r13
0000000000002b14         pop        r14
0000000000002b16         pop        r15
0000000000002b18         ret
                        ; endp

                     loc_2b19:
0000000000002b19         sub        r14, rdx                                    ; CODE XREF=tac_seekable+80
0000000000002b1c         xor        edx, edx                                    ; argument "__whence" for method j_lseek
0000000000002b1e         mov        rsi, r14                                    ; argument "__offset" for method j_lseek
0000000000002b21         call       j_lseek                                     ; lseek
0000000000002b26         test       rax, rax
0000000000002b29         jns        loc_2686

0000000000002b2f         mov        rdx, qword [rsp+0x68+var_40]                ; argument #3 for method quotearg_n_style_colon
0000000000002b34         mov        esi, 0x3                                    ; argument #2 for method quotearg_n_style_colon
0000000000002b39         xor        edi, edi                                    ; argument #1 for method quotearg_n_style_colon
0000000000002b3b         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
0000000000002b40         lea        rsi, qword [aSSeekFailed]                   ; argument "msgid" for method j_dcgettext, "%s: seek failed"
0000000000002b47         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002b4c         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002b4e         mov        rbx, rax
0000000000002b51         call       j_dcgettext                                 ; dcgettext
0000000000002b56         mov        r12, rax
0000000000002b59         call       j___errno_location                          ; __errno_location
0000000000002b5e         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
0000000000002b60         mov        rcx, rbx
0000000000002b63         mov        rdx, r12                                    ; argument "__format" for method j_error
0000000000002b66         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000002b68         xor        eax, eax
0000000000002b6a         call       j_error                                     ; error
0000000000002b6f         mov        rbx, qword [read_size]                      ; read_size
0000000000002b76         jmp        loc_2686

                     loc_2b7b:
0000000000002b7b         mov        rbx, rax                                    ; CODE XREF=tac_seekable+244
0000000000002b7e         jmp        loc_2761

                     loc_2b83:
0000000000002b83         call       xalloc_die                                  ; xalloc_die, CODE XREF=tac_seekable+586
                        ; endp

                     loc_2b88:
0000000000002b88         lea        rsi, qword [aErrorInRegular]                ; argument "msgid" for method j_dcgettext, "error in regular expression search", CODE XREF=tac_seekable+448
0000000000002b8f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002b94         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002b96         call       j_dcgettext                                 ; dcgettext
0000000000002b9b         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002b9d         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002ba0         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000002ba5         xor        eax, eax
0000000000002ba7         call       j_error                                     ; error

                     loc_2bac:
0000000000002bac         lea        rsi, qword [aRecordTooLarge]                ; argument "msgid" for method j_dcgettext, "record too large", CODE XREF=tac_seekable+393
0000000000002bb3         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002bb8         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002bba         call       j_dcgettext                                 ; dcgettext
0000000000002bbf         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002bc1         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002bc4         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000002bc9         xor        eax, eax
0000000000002bcb         call       j_error                                     ; error
                     usage:
0000000000002bd0         push       r13                                         ; End of unwind block (FDE at 0x15e10), Begin of unwind block (FDE at 0x15e74), CODE XREF=main+1834, main+1856
0000000000002bd2         push       r12
0000000000002bd4         mov        edx, 0x5
0000000000002bd9         push       rbp
0000000000002bda         push       rbx
0000000000002bdb         mov        ebp, edi
0000000000002bdd         sub        rsp, 0x88
0000000000002be4         mov        rbx, qword [program_name]                   ; program_name
0000000000002beb         mov        rax, qword [fs:0x28]
0000000000002bf4         mov        qword [rsp+0x110+var_98], rax
0000000000002bf9         xor        eax, eax
0000000000002bfb         test       edi, edi
0000000000002bfd         je         loc_2c2d

0000000000002bff         lea        rsi, qword [aTrySHelpForMor]                ; argument "msgid" for method j_dcgettext, "Try '%s --help' for more information.\\n"
0000000000002c06         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002c08         call       j_dcgettext                                 ; dcgettext
0000000000002c0d         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
0000000000002c14         mov        rdx, rax
0000000000002c17         mov        rcx, rbx
0000000000002c1a         mov        esi, 0x1
0000000000002c1f         xor        eax, eax
0000000000002c21         call       j___fprintf_chk                             ; __fprintf_chk

                     loc_2c26:
0000000000002c26         mov        edi, ebp                                    ; argument "__status" for method j_exit, CODE XREF=usage+750
0000000000002c28         call       j_exit                                      ; exit
                        ; endp

                     loc_2c2d:
0000000000002c2d         lea        rsi, qword [aUsageSOptionFi]                ; argument "msgid" for method j_dcgettext, "Usage: %s [OPTION]... [FILE]...\\n", CODE XREF=usage+45
0000000000002c34         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002c36         call       j_dcgettext                                 ; dcgettext
0000000000002c3b         mov        rdx, rbx
0000000000002c3e         mov        rsi, rax
0000000000002c41         mov        edi, 0x1
0000000000002c46         xor        eax, eax
0000000000002c48         call       j___printf_chk                              ; __printf_chk
0000000000002c4d         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002c54         lea        rsi, qword [aWriteEachFileT]                ; argument "msgid" for method j_dcgettext, "Write each FILE to standard output, last line first.\\n"
0000000000002c5b         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002c60         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002c62         call       j_dcgettext                                 ; dcgettext
0000000000002c67         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002c6a         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002c6d         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002c72         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002c79         lea        rsi, qword [aNwithNoFileOrW]                ; argument "msgid" for method j_dcgettext, "\\nWith no FILE, or when FILE is -, read standard input.\\n"
0000000000002c80         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002c85         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002c87         call       j_dcgettext                                 ; dcgettext
0000000000002c8c         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002c8f         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002c92         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002c97         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002c9e         lea        rsi, qword [aNmandatoryArgu]                ; argument "msgid" for method j_dcgettext, "\\nMandatory arguments to long options are mandatory for short options too.\\n"
0000000000002ca5         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002caa         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002cac         call       j_dcgettext                                 ; dcgettext
0000000000002cb1         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002cb4         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002cb7         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002cbc         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002cc3         lea        rsi, qword [aBBeforeAttachT]                ; argument "msgid" for method j_dcgettext, "  -b, --before             attach the separator before instead of after\\n  -r, --regex              interpret the separator as a regular expression\\n  -s, --separator=STRING   use STRING as the separator instead of newline\\n"
0000000000002cca         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002ccf         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002cd1         call       j_dcgettext                                 ; dcgettext
0000000000002cd6         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002cd9         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002cdc         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002ce1         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002ce8         lea        rsi, qword [aHelpDisplayThi]                ; argument "msgid" for method j_dcgettext, "      --help     display this help and exit\\n"
0000000000002cef         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002cf4         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002cf6         call       j_dcgettext                                 ; dcgettext
0000000000002cfb         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002cfe         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002d01         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002d06         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002d0d         lea        rsi, qword [aVersionOutputV]                ; argument "msgid" for method j_dcgettext, "      --version  output version information and exit\\n"
0000000000002d14         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002d19         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002d1b         call       j_dcgettext                                 ; dcgettext
0000000000002d20         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002d23         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002d26         lea        rbx, qword [aRecordTooLarge+17]             ; 0x14174
0000000000002d2d         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002d32         lea        rax, qword [aRecordTooLarge+21]             ; 0x14178
0000000000002d39         lea        rcx, qword [aSha256sum]                     ; "sha256sum"
0000000000002d40         mov        qword [rsp+0x110+var_B0], 0x0
0000000000002d49         mov        qword [rsp+0x110+var_A8], 0x0
0000000000002d52         mov        rdx, rsp
0000000000002d55         mov        qword [rsp+0x110+var_110], rax
0000000000002d59         lea        rax, qword [aTestInvocation]                ; "test invocation"
0000000000002d60         mov        qword [rsp+0x110+var_E0], rcx
0000000000002d65         lea        rcx, qword [aSha384sum]                     ; "sha384sum"
0000000000002d6c         mov        qword [rsp+0x110+var_108], rax
0000000000002d71         lea        rax, qword [aCoreutils]                     ; "coreutils"
0000000000002d78         mov        qword [rsp+0x110+var_D0], rcx
0000000000002d7d         lea        rcx, qword [aSha512sum]                     ; "sha512sum"
0000000000002d84         mov        qword [rsp+0x110+var_100], rax
0000000000002d89         lea        rax, qword [aMulticallInvoc]                ; "Multi-call invocation"
0000000000002d90         mov        qword [rsp+0x110+var_C0], rcx
0000000000002d95         mov        qword [rsp+0x110+var_F8], rax
0000000000002d9a         lea        rax, qword [aSha224sum]                     ; "sha224sum"
0000000000002da1         mov        qword [rsp+0x110+var_F0], rax
0000000000002da6         lea        rax, qword [aSha2Utilities]                 ; "sha2 utilities"
0000000000002dad         mov        qword [rsp+0x110+var_E8], rax
0000000000002db2         mov        qword [rsp+0x110+var_D8], rax
0000000000002db7         mov        qword [rsp+0x110+var_C8], rax
0000000000002dbc         mov        qword [rsp+0x110+var_B8], rax
0000000000002dc1         nop        dword [rax]

                     loc_2dc8:
0000000000002dc8         add        rdx, 0x10                                   ; CODE XREF=usage+533
0000000000002dcc         mov        rdi, qword [rdx]
0000000000002dcf         test       rdi, rdi
0000000000002dd2         je         loc_2de7

0000000000002dd4         mov        ecx, 0x4
0000000000002dd9         mov        rsi, rbx
0000000000002ddc         rep  cmpsb byte [rsi], byte [rdi]
0000000000002dde         seta       al
0000000000002de1         sbb        al, 0x0
0000000000002de3         test       al, al
0000000000002de5         jne        loc_2dc8

                     loc_2de7:
0000000000002de7         mov        r12, qword [rdx+8]                          ; CODE XREF=usage+514
0000000000002deb         xor        edi, edi
0000000000002ded         mov        edx, 0x5
0000000000002df2         lea        rsi, qword [aNsOnlineHelpSn]                ; "\\n%s online help: <%s>\\n"
0000000000002df9         test       r12, r12
0000000000002dfc         je         loc_2ec3

0000000000002e02         call       j_dcgettext                                 ; dcgettext
0000000000002e07         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000002e0e         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0x141ee
0000000000002e15         mov        rsi, rax
0000000000002e18         mov        edi, 0x1
0000000000002e1d         xor        eax, eax
0000000000002e1f         call       j___printf_chk                              ; __printf_chk
0000000000002e24         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
0000000000002e26         mov        edi, 0x5                                    ; argument "__category" for method j_setlocale
0000000000002e2b         call       j_setlocale                                 ; setlocale
0000000000002e30         test       rax, rax
0000000000002e33         je         loc_2e51

0000000000002e35         lea        rsi, qword [aCoreutils+10]                  ; argument "__s2" for method j_strncmp, 0x141fc
0000000000002e3c         mov        edx, 0x3                                    ; argument "__n" for method j_strncmp
0000000000002e41         mov        rdi, rax                                    ; argument "__s1" for method j_strncmp
0000000000002e44         call       j_strncmp                                   ; strncmp
0000000000002e49         test       eax, eax
0000000000002e4b         jne        loc_2f58

                     loc_2e51:
0000000000002e51         lea        rsi, qword [aFullDocumentat]                ; argument "msgid" for method j_dcgettext, "Full documentation <%s%s>\\n", CODE XREF=usage+611, usage+941
0000000000002e58         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002e5a         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002e5f         call       j_dcgettext                                 ; dcgettext
0000000000002e64         lea        rcx, qword [aRecordTooLarge+17]             ; 0x14174
0000000000002e6b         lea        rdx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000002e72         mov        rsi, rax
0000000000002e75         mov        edi, 0x1
0000000000002e7a         xor        eax, eax
0000000000002e7c         call       j___printf_chk                              ; __printf_chk
0000000000002e81         cmp        r12, rbx
0000000000002e84         lea        rcx, qword [aMulticallInvoc+10]             ; 0x14194
0000000000002e8b         lea        rbx, qword [aWrittenBySSAnd+27]             ; 0x14c01
0000000000002e92         cmove      rbx, rcx

                     loc_2e96:
0000000000002e96         lea        rsi, qword [aOrAvailableLoc]                ; argument "msgid" for method j_dcgettext, "or available locally via: info '(coreutils) %s%s'\\n", CODE XREF=usage+892
0000000000002e9d         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002e9f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002ea4         call       j_dcgettext                                 ; dcgettext
0000000000002ea9         mov        rcx, rbx
0000000000002eac         mov        rsi, rax
0000000000002eaf         mov        rdx, r12
0000000000002eb2         mov        edi, 0x1
0000000000002eb7         xor        eax, eax
0000000000002eb9         call       j___printf_chk                              ; __printf_chk
0000000000002ebe         jmp        loc_2c26

                     loc_2ec3:
0000000000002ec3         call       j_dcgettext                                 ; dcgettext, CODE XREF=usage+556
0000000000002ec8         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000002ecf         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0x141ee
0000000000002ed6         mov        rsi, rax
0000000000002ed9         mov        edi, 0x1
0000000000002ede         xor        eax, eax
0000000000002ee0         call       j___printf_chk                              ; __printf_chk
0000000000002ee5         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
0000000000002ee7         mov        edi, 0x5                                    ; argument "__category" for method j_setlocale
0000000000002eec         call       j_setlocale                                 ; setlocale
0000000000002ef1         test       rax, rax
0000000000002ef4         je         loc_2f0e

0000000000002ef6         lea        rsi, qword [aCoreutils+10]                  ; argument "__s2" for method j_strncmp, 0x141fc
0000000000002efd         mov        edx, 0x3                                    ; argument "__n" for method j_strncmp
0000000000002f02         mov        rdi, rax                                    ; argument "__s1" for method j_strncmp
0000000000002f05         call       j_strncmp                                   ; strncmp
0000000000002f0a         test       eax, eax
0000000000002f0c         jne        loc_2f51

                     loc_2f0e:
0000000000002f0e         lea        rsi, qword [aFullDocumentat]                ; argument "msgid" for method j_dcgettext, "Full documentation <%s%s>\\n", CODE XREF=usage+804
0000000000002f15         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002f1a         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002f1c         lea        r12, qword [aRecordTooLarge+17]             ; 0x14174
0000000000002f23         lea        rbx, qword [aMulticallInvoc+10]             ; 0x14194
0000000000002f2a         call       j_dcgettext                                 ; dcgettext
0000000000002f2f         lea        rcx, qword [aRecordTooLarge+17]             ; 0x14174
0000000000002f36         lea        rdx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000002f3d         mov        rsi, rax
0000000000002f40         mov        edi, 0x1
0000000000002f45         xor        eax, eax
0000000000002f47         call       j___printf_chk                              ; __printf_chk
0000000000002f4c         jmp        loc_2e96

                     loc_2f51:
0000000000002f51         lea        r12, qword [aRecordTooLarge+17]             ; 0x14174, CODE XREF=usage+828

                     loc_2f58:
0000000000002f58         mov        r13, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=usage+635
0000000000002f5f         lea        rsi, qword [aReportAnyTrans]                ; argument "msgid" for method j_dcgettext, "Report any translation bugs to <https://translationproject.org/team/>\\n"
0000000000002f66         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002f68         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002f6d         call       j_dcgettext                                 ; dcgettext
0000000000002f72         mov        rsi, r13                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002f75         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002f78         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002f7d         jmp        loc_2e51
0000000000002f82         align      16                                          ; End of unwind block (FDE at 0x15e74)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout_set_file_name:
0000000000002f90         mov        qword [file_name], rdi                      ; Begin of unwind block (FDE at 0x15efc), file_name
0000000000002f97         ret
                        ; endp
0000000000002f98         align      32                                          ; End of unwind block (FDE at 0x15efc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout_set_ignore_EPIPE:
0000000000002fa0         mov        byte [ignore_EPIPE], dil                    ; Begin of unwind block (FDE at 0x15f10), ignore_EPIPE
0000000000002fa7         ret
                        ; endp
0000000000002fa8         align      16                                          ; End of unwind block (FDE at 0x15f10)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout:
0000000000002fb0         push       rbp                                         ; Begin of unwind block (FDE at 0x15f24), DATA XREF=main+82
0000000000002fb1         push       rbx
0000000000002fb2         sub        rsp, 0x8
0000000000002fb6         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002fbd         call       close_stream                                ; close_stream
0000000000002fc2         test       eax, eax
0000000000002fc4         je         loc_2fdc

0000000000002fc6         call       j___errno_location                          ; __errno_location
0000000000002fcb         cmp        byte [ignore_EPIPE], 0x0                    ; ignore_EPIPE
0000000000002fd2         mov        rbx, rax
0000000000002fd5         je         loc_2ff3

0000000000002fd7         cmp        dword [rax], 0x20
0000000000002fda         jne        loc_2ff3

                     loc_2fdc:
0000000000002fdc         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5, CODE XREF=close_stdout+20
0000000000002fe3         call       close_stream                                ; close_stream
0000000000002fe8         test       eax, eax
0000000000002fea         jne        loc_3032

0000000000002fec         add        rsp, 0x8
0000000000002ff0         pop        rbx
0000000000002ff1         pop        rbp
0000000000002ff2         ret
                        ; endp

                     loc_2ff3:
0000000000002ff3         lea        rsi, qword [aWriteError]                    ; argument "msgid" for method j_dcgettext, "write error", CODE XREF=close_stdout+37, close_stdout+42
0000000000002ffa         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002ffc         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003001         call       j_dcgettext                                 ; dcgettext
0000000000003006         mov        rdi, qword [file_name]                      ; file_name
000000000000300d         mov        rbp, rax
0000000000003010         test       rdi, rdi
0000000000003013         je         loc_303d

0000000000003015         call       quotearg_colon                              ; quotearg_colon
000000000000301a         mov        esi, dword [rbx]                            ; argument "__errnum" for method j_error
000000000000301c         lea        rdx, qword [aSS]                            ; argument "__format" for method j_error, "%s: %s"
0000000000003023         mov        rcx, rax
0000000000003026         mov        r8, rbp
0000000000003029         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000302b         xor        eax, eax
000000000000302d         call       j_error                                     ; error

                     loc_3032:
0000000000003032         mov        edi, dword [exit_failure]                   ; argument "__status" for method j__exit, exit_failure, CODE XREF=close_stdout+58, close_stdout+162
0000000000003038         call       j__exit                                     ; _exit
                        ; endp

                     loc_303d:
000000000000303d         mov        esi, dword [rbx]                            ; argument "__errnum" for method j_error, CODE XREF=close_stdout+99
000000000000303f         lea        rdx, qword [aSS+4]                          ; argument "__format" for method j_error, 0x14680
0000000000003046         mov        rcx, rax
0000000000003049         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000304b         xor        eax, eax
000000000000304d         call       j_error                                     ; error
0000000000003052         jmp        loc_3032
0000000000003054         align      32                                          ; End of unwind block (FDE at 0x15f24)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_39: int8_t, -57
        ;    var_48: int64_t, -72


                     mfile_name_concat:
0000000000003060         push       r15                                         ; Begin of unwind block (FDE at 0x15f54), CODE XREF=main+1455
0000000000003062         push       r14
0000000000003064         mov        r15, rdx
0000000000003067         push       r13
0000000000003069         push       r12
000000000000306b         mov        r12, rdi
000000000000306e         push       rbp
000000000000306f         push       rbx
0000000000003070         mov        rbp, rsi
0000000000003073         sub        rsp, 0x18
0000000000003077         call       last_component                              ; last_component
000000000000307c         mov        rbx, rax
000000000000307f         mov        rdi, rax
0000000000003082         call       base_len                                    ; base_len
0000000000003087         sub        rbx, r12
000000000000308a         mov        r13, rax
000000000000308d         mov        rdi, rbp                                    ; argument "__s" for method j_strlen
0000000000003090         add        rbx, rax
0000000000003093         call       j_strlen                                    ; strlen
0000000000003098         test       r13, r13
000000000000309b         mov        r14, rax
000000000000309e         je         loc_30d0

00000000000030a0         cmp        byte [r12+rbx-1], 0x2f
00000000000030a6         je         loc_3150

00000000000030ac         xor        eax, eax
00000000000030ae         cmp        byte [rbp], 0x2f
00000000000030b2         mov        edx, 0x0
00000000000030b7         setne      al
00000000000030ba         mov        qword [rsp+0x48+var_48], rax
00000000000030be         mov        eax, 0x2f
00000000000030c3         cmove      eax, edx
00000000000030c6         mov        byte [rsp+0x48+var_39], al
00000000000030ca         jmp        loc_30ee
00000000000030cc         align      16

                     loc_30d0:
00000000000030d0         xor        eax, eax                                    ; CODE XREF=mfile_name_concat+62
00000000000030d2         cmp        byte [rbp], 0x2f
00000000000030d6         mov        edx, 0x0
00000000000030db         sete       al
00000000000030de         mov        qword [rsp+0x48+var_48], rax
00000000000030e2         mov        eax, 0x2e
00000000000030e7         cmovne     eax, edx
00000000000030ea         mov        byte [rsp+0x48+var_39], al

                     loc_30ee:
00000000000030ee         lea        rdi, qword [rbx+r14+1]                      ; CODE XREF=mfile_name_concat+106, mfile_name_concat+253
00000000000030f3         add        rdi, qword [rsp+0x48+var_48]                ; argument "__size" for method j_malloc
00000000000030f7         call       j_malloc                                    ; malloc
00000000000030fc         test       rax, rax
00000000000030ff         mov        r13, rax
0000000000003102         je         loc_3136

0000000000003104         mov        rdi, rax                                    ; argument "__dest" for method j_mempcpy
0000000000003107         mov        rdx, rbx                                    ; argument "__n" for method j_mempcpy
000000000000310a         mov        rsi, r12                                    ; argument "__src" for method j_mempcpy
000000000000310d         call       j_mempcpy                                   ; mempcpy
0000000000003112         movzx      ecx, byte [rsp+0x48+var_39]
0000000000003117         mov        rdi, qword [rsp+0x48+var_48]
000000000000311b         add        rdi, rax
000000000000311e         test       r15, r15
0000000000003121         mov        byte [rax], cl
0000000000003123         je         loc_3128

0000000000003125         mov        qword [r15], rdi

                     loc_3128:
0000000000003128         mov        rdx, r14                                    ; argument "__n" for method j_mempcpy, CODE XREF=mfile_name_concat+195
000000000000312b         mov        rsi, rbp                                    ; argument "__src" for method j_mempcpy
000000000000312e         call       j_mempcpy                                   ; mempcpy
0000000000003133         mov        byte [rax], 0x0

                     loc_3136:
0000000000003136         add        rsp, 0x18                                   ; CODE XREF=mfile_name_concat+162
000000000000313a         mov        rax, r13
000000000000313d         pop        rbx
000000000000313e         pop        rbp
000000000000313f         pop        r12
0000000000003141         pop        r13
0000000000003143         pop        r14
0000000000003145         pop        r15
0000000000003147         ret
                        ; endp
0000000000003148         align      16

                     loc_3150:
0000000000003150         mov        qword [rsp+0x48+var_48], 0x0                ; CODE XREF=mfile_name_concat+70
0000000000003158         mov        byte [rsp+0x48+var_39], 0x0
000000000000315d         jmp        loc_30ee
000000000000315f         align      32                                          ; End of unwind block (FDE at 0x15f54)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_program_name:
0000000000003160         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0x15fa4), CODE XREF=main+29
0000000000003163         push       rbx
0000000000003164         je         loc_31dd

0000000000003166         mov        esi, 0x2f                                   ; argument "__c" for method j_strrchr
000000000000316b         mov        rbx, rdi
000000000000316e         call       j_strrchr                                   ; strrchr
0000000000003173         test       rax, rax
0000000000003176         je         loc_31cd

0000000000003178         lea        r8, qword [rax+1]
000000000000317c         mov        rdx, r8
000000000000317f         sub        rdx, rbx
0000000000003182         cmp        rdx, 0x6
0000000000003186         jle        loc_31cd

0000000000003188         lea        rsi, qword [rax-6]
000000000000318c         lea        rdi, qword [aLibs]                          ; "/.libs/"
0000000000003193         mov        ecx, 0x7
0000000000003198         rep  cmpsb byte [rsi], byte [rdi]
000000000000319a         seta       dl
000000000000319d         sbb        dl, 0x0
00000000000031a0         test       dl, dl
00000000000031a2         jne        loc_31cd

00000000000031a4         lea        rdi, qword [aLibs+8]                        ; 0x146c8
00000000000031ab         mov        ecx, 0x3
00000000000031b0         mov        rsi, r8
00000000000031b3         mov        rbx, r8
00000000000031b6         rep  cmpsb byte [rsi], byte [rdi]
00000000000031b8         seta       dl
00000000000031bb         sbb        dl, 0x0
00000000000031be         test       dl, dl
00000000000031c0         jne        loc_31cd

00000000000031c2         lea        rbx, qword [rax+4]
00000000000031c6         mov        qword [program_invocation_short_name@@GLIBC_2.2.5], rbx ; program_invocation_short_name@@GLIBC_2.2.5

                     loc_31cd:
00000000000031cd         mov        qword [program_name], rbx                   ; program_name, CODE XREF=set_program_name+22, set_program_name+38, set_program_name+66, set_program_name+96
00000000000031d4         mov        qword [__progname_full@@GLIBC_2.2.5], rbx   ; __progname_full@@GLIBC_2.2.5
00000000000031db         pop        rbx
00000000000031dc         ret
                        ; endp

                     loc_31dd:
00000000000031dd         mov        rcx, qword [stderr@@GLIBC_2.2.5]            ; argument "__s" for method j_fwrite, stderr@@GLIBC_2.2.5, CODE XREF=set_program_name+4
00000000000031e4         lea        rdi, qword [aANullArgv0WasP]                ; argument "__ptr" for method j_fwrite, "A NULL argv[0] was passed through an exec system call.\\n"
00000000000031eb         mov        edx, 0x37                                   ; argument "__n" for method j_fwrite
00000000000031f0         mov        esi, 0x1                                    ; argument "__size" for method j_fwrite
00000000000031f5         call       j_fwrite                                    ; fwrite
00000000000031fa         call       j_abort                                     ; abort
                        ; endp
00000000000031ff         align      512                                         ; End of unwind block (FDE at 0x15fa4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     gettext_quote.part.1:
0000000000003200         push       rbp                                         ; Begin of unwind block (FDE at 0x15fc4), CODE XREF=sub_3f00+1365, sub_3f00+1387
0000000000003201         push       rbx
0000000000003202         mov        rbp, rdi
0000000000003205         mov        ebx, esi
0000000000003207         sub        rsp, 0x8
000000000000320b         call       locale_charset                              ; locale_charset
0000000000003210         movzx      edx, byte [rax]
0000000000003213         and        edx, 0xffffffdf
0000000000003216         cmp        dl, 0x55
0000000000003219         je         loc_3290

000000000000321b         cmp        dl, 0x47
000000000000321e         je         loc_3240

                     loc_3220:
0000000000003220         lea        rax, qword [aLibs+27]                       ; 0x146db, CODE XREF=gettext_quote.part.1+74, gettext_quote.part.1+80, gettext_quote.part.1+86, gettext_quote.part.1+92, gettext_quote.part.1+98, gettext_quote.part.1+104, gettext_quote.part.1+110, gettext_quote.part.1+154, gettext_quote.part.1+166, gettext_quote.part.1+176, gettext_quote.part.1+186
0000000000003227         lea        rdx, qword [aLibs+29]                       ; 0x146dd
000000000000322e         cmp        ebx, 0x9
0000000000003231         cmovne     rax, rdx
0000000000003235         add        rsp, 0x8
0000000000003239         pop        rbx
000000000000323a         pop        rbp
000000000000323b         ret
                        ; endp
000000000000323c         align      64

                     loc_3240:
0000000000003240         movzx      edx, byte [rax+1]                           ; CODE XREF=gettext_quote.part.1+30
0000000000003244         and        edx, 0xffffffdf
0000000000003247         cmp        dl, 0x42
000000000000324a         jne        loc_3220

000000000000324c         cmp        byte [rax+2], 0x31
0000000000003250         jne        loc_3220

0000000000003252         cmp        byte [rax+3], 0x38
0000000000003256         jne        loc_3220

0000000000003258         cmp        byte [rax+4], 0x30
000000000000325c         jne        loc_3220

000000000000325e         cmp        byte [rax+5], 0x33
0000000000003262         jne        loc_3220

0000000000003264         cmp        byte [rax+6], 0x30
0000000000003268         jne        loc_3220

000000000000326a         cmp        byte [rax+7], 0x0
000000000000326e         jne        loc_3220

0000000000003270         cmp        byte [rbp], 0x60
0000000000003274         lea        rax, qword [aLibs+20]                       ; 0x146d4
000000000000327b         lea        rdx, qword [aLibs+24]                       ; 0x146d8
0000000000003282         cmovne     rax, rdx
0000000000003286         add        rsp, 0x8
000000000000328a         pop        rbx
000000000000328b         pop        rbp
000000000000328c         ret
                        ; endp
000000000000328d         align      16

                     loc_3290:
0000000000003290         movzx      edx, byte [rax+1]                           ; CODE XREF=gettext_quote.part.1+25
0000000000003294         and        edx, 0xffffffdf
0000000000003297         cmp        dl, 0x54
000000000000329a         jne        loc_3220

000000000000329c         movzx      edx, byte [rax+2]
00000000000032a0         and        edx, 0xffffffdf
00000000000032a3         cmp        dl, 0x46
00000000000032a6         jne        loc_3220

00000000000032ac         cmp        byte [rax+3], 0x2d
00000000000032b0         jne        loc_3220

00000000000032b6         cmp        byte [rax+4], 0x38
00000000000032ba         jne        loc_3220

00000000000032c0         cmp        byte [rax+5], 0x0
00000000000032c4         jne        loc_3220

00000000000032ca         cmp        byte [rbp], 0x60
00000000000032ce         lea        rax, qword [aLibs+12]                       ; 0x146cc
00000000000032d5         lea        rdx, qword [aLibs+16]                       ; 0x146d0
00000000000032dc         cmovne     rax, rdx
00000000000032e0         add        rsp, 0x8
00000000000032e4         pop        rbx
00000000000032e5         pop        rbp
00000000000032e6         ret
                        ; endp
00000000000032e7         align      16                                          ; End of unwind block (FDE at 0x15fc4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_0: int, 8
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_4C: int32_t, -76
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_69: int8_t, -105
        ;    var_6A: int8_t, -106
        ;    var_6B: int8_t, -107
        ;    var_6C: int8_t, -108
        ;    var_70: int32_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208
        ;    var_D8: int64_t, -216
        ;    var_D9: int8_t, -217
        ;    var_DA: int8_t, -218
        ;    var_DB: int8_t, -219
        ;    var_E0: int32_t, -224


                     quotearg_buffer_restyled:
00000000000032f0         push       r15                                         ; Begin of unwind block (FDE at 0x16008), CODE XREF=sub_3a30+1165, sub_3f00+1467, quotearg_n_options+231, quotearg_n_options+344, quotearg_buffer+92, quotearg_alloc_mem+103, quotearg_alloc_mem+176
00000000000032f2         push       r14
00000000000032f4         mov        r15d, r8d
00000000000032f7         push       r13
00000000000032f9         push       r12
00000000000032fb         mov        r14, rdi
00000000000032fe         push       rbp
00000000000032ff         push       rbx
0000000000003300         mov        ebx, r9d
0000000000003303         mov        r13, rsi
0000000000003306         mov        rbp, rcx
0000000000003309         and        ebx, 0x2
000000000000330c         sub        rsp, 0xb8
0000000000003313         mov        rax, qword [rsp+0xe8+arg_0]
000000000000331b         mov        qword [rsp+0xe8+var_D8], rdx
0000000000003320         mov        dword [rsp+0xe8+var_E0], r8d
0000000000003325         mov        dword [rsp+0xe8+var_70], r9d
000000000000332a         mov        qword [rsp+0xe8+var_C8], rax
000000000000332f         mov        rax, qword [rsp+0xe8+arg_8]
0000000000003337         mov        qword [rsp+0xe8+var_80], rax
000000000000333c         mov        rax, qword [rsp+0xe8+arg_10]
0000000000003344         mov        qword [rsp+0xe8+var_88], rax
0000000000003349         mov        rax, qword [fs:0x28]
0000000000003352         mov        qword [rsp+0xe8+var_40], rax
000000000000335a         xor        eax, eax
000000000000335c         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max
0000000000003361         cmp        r15d, 0xa
0000000000003365         mov        qword [rsp+0xe8+var_90], rax
000000000000336a         ja         loc_451f

0000000000003370         lea        rcx, qword [switch_table_14740]             ; switch_table_14740
0000000000003377         mov        edx, r15d
000000000000337a         movsxd     rax, dword [rcx+rdx*4]
000000000000337e         add        rax, rcx
0000000000003381         jmp        rax                                         ; switch statement using table at 0x14740, with 11 cases, 0x3383,0x3f54,0x3fb0,0x4005,0x404a,0x4084,0x412a,0x4164,0x4358

                     loc_3383:
0000000000003383         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 1, CODE XREF=quotearg_buffer_restyled+145, sub_3f00+86
0000000000003388         mov        byte [rsp+0xe8+var_6C], 0x0
000000000000338d         xor        r12d, r12d
0000000000003390         mov        qword [rsp+0xe8+var_98], 0x0
0000000000003399         mov        byte [rsp+0xe8+var_D9], 0x1
000000000000339e         mov        byte [rsp+0xe8+var_DB], 0x0

                     loc_33a3:
00000000000033a3         lea        rax, qword [aLibs+29]                       ; 0x146dd, CODE XREF=sub_3f00+644
00000000000033aa         mov        qword [rsp+0xe8+var_D0], 0x1
00000000000033b3         xor        r15d, r15d
00000000000033b6         mov        dword [rsp+0xe8+var_E0], 0x2
00000000000033be         mov        qword [rsp+0xe8+var_A0], rax

                     loc_33c3:
00000000000033c3         xor        r11d, r11d                                  ; CODE XREF=sub_3a30+180, sub_3f00+168, sub_3f00+256, sub_3f00+325, sub_3f00+383, sub_3f00+549, sub_3f00+607, sub_3f00+1176, sub_3f00+1253
00000000000033c6         mov        rax, rbp
00000000000033c9         mov        r8d, r12d
00000000000033cc         mov        rbp, r11
00000000000033cf         mov        r11, rax
00000000000033d2         nop        word [rax+rax]

                     loc_33d8:
00000000000033d8         cmp        r11, rbp                                    ; CODE XREF=sub_34e0+194
00000000000033db         setne      r12b
00000000000033df         cmp        r11, 0xffffffffffffffff
00000000000033e3         jne        loc_33f2

00000000000033e5         mov        rax, qword [rsp+0xe8+var_D8]
00000000000033ea         cmp        byte [rax+rbp], 0x0
00000000000033ee         setne      r12b

                     loc_33f2:
00000000000033f2         test       r12b, r12b                                  ; CODE XREF=quotearg_buffer_restyled+243
00000000000033f5         je         loc_3a50

00000000000033fb         cmp        dword [rsp+0xe8+var_E0], 0x2
0000000000003400         mov        rdi, qword [rsp+0xe8+var_D8]
0000000000003405         lea        r9, qword [rdi+rbp]
0000000000003409         setne      al
000000000000340c         and        al, byte [rsp+0xe8+var_DB]
0000000000003410         mov        r10d, eax
0000000000003413         je         loc_34c0

0000000000003419         mov        rax, qword [rsp+0xe8+var_D0]
000000000000341e         test       rax, rax
0000000000003421         je         loc_3850

0000000000003427         cmp        r11, 0xffffffffffffffff
000000000000342b         lea        rbx, qword [rbp+rax]
0000000000003430         jne        loc_3460

0000000000003432         cmp        rax, 0x1
0000000000003436         jbe        loc_3460

0000000000003438         mov        byte [rsp+0xe8+var_B0], r8b
000000000000343d         mov        byte [rsp+0xe8+var_B8], r10b
0000000000003442         mov        qword [rsp+0xe8+var_C0], r9
0000000000003447         call       j_strlen                                    ; strlen
000000000000344c         movzx      r8d, byte [rsp+0xe8+var_B0]
0000000000003452         movzx      r10d, byte [rsp+0xe8+var_B8]
0000000000003458         mov        r11, rax
000000000000345b         mov        r9, qword [rsp+0xe8+var_C0]

                     loc_3460:
0000000000003460         cmp        rbx, r11                                    ; CODE XREF=quotearg_buffer_restyled+320, quotearg_buffer_restyled+326
0000000000003463         mov        byte [rsp+0xe8+var_C0], r10b
0000000000003468         ja         loc_3a20

000000000000346e         mov        rdx, qword [rsp+0xe8+var_D0]                ; argument "__n" for method j_memcmp
0000000000003473         mov        rsi, qword [rsp+0xe8+var_A0]                ; argument "__s2" for method j_memcmp
0000000000003478         mov        rdi, r9                                     ; argument "__s1" for method j_memcmp
000000000000347b         mov        qword [rsp+0xe8+var_A8], r11
0000000000003480         mov        byte [rsp+0xe8+var_B0], r8b
0000000000003485         mov        qword [rsp+0xe8+var_B8], r9
000000000000348a         call       j_memcmp                                    ; memcmp
000000000000348f         test       eax, eax
0000000000003491         mov        r9, qword [rsp+0xe8+var_B8]
0000000000003496         movzx      r8d, byte [rsp+0xe8+var_B0]
000000000000349c         mov        r11, qword [rsp+0xe8+var_A8]
00000000000034a1         jne        loc_3a20

00000000000034a7         cmp        byte [rsp+0xe8+var_D9], 0x0
00000000000034ac         movzx      r10d, byte [rsp+0xe8+var_C0]
00000000000034b2         jne        loc_4435

00000000000034b8         nop        dword [rax+rax]

                     loc_34c0:
00000000000034c0         movzx      ebx, byte [r9]                              ; CODE XREF=quotearg_buffer_restyled+291, sub_3a10+19
00000000000034c4         cmp        bl, 0x7e
00000000000034c7         ja         loc_37e8

00000000000034cd         lea        rcx, qword [switch_table_14740+44]          ; 0x1476c
00000000000034d4         movzx      edx, bl
00000000000034d7         movsxd     rax, dword [rcx+rdx*4]
00000000000034db         add        rax, rcx
00000000000034de         jmp        rax
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_34e0:
00000000000034e0         xor        r10d, r10d
00000000000034e3         cmp        r11, 0x1
00000000000034e7         setne      al
00000000000034ea         cmp        r11, 0xffffffffffffffff
00000000000034ee         jne        loc_34fc

00000000000034f0         mov        rax, qword [rsp+arg_8]
00000000000034f5         cmp        byte [rax+1], 0x0
00000000000034f9         setne      al

                     loc_34fc:
00000000000034fc         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_34e0+14
0000000000003501         sete       dl
0000000000003504         test       al, al
0000000000003506         je         loc_3758

                     loc_350c:
000000000000350c         xor        r12d, r12d                                  ; CODE XREF=sub_3750+11
000000000000350f         xor        eax, eax
0000000000003511         nop        dword [rax]
                        ; endp

                     loc_3518:
0000000000003518         cmp        byte [rsp+0xe8+var_DB], 0x1                 ; CODE XREF=sub_3700+50, sub_37d0+119
000000000000351d         jne        loc_3632

0000000000003523         test       dl, dl
0000000000003525         jne        loc_3632

                     loc_352b:
000000000000352b         mov        rsi, qword [rsp+0xe8+var_C8]                ; CODE XREF=sub_35e0+87
0000000000003530         test       rsi, rsi
0000000000003533         je         loc_3549

0000000000003535         mov        edx, ebx
0000000000003537         shr        dl, 0x5
000000000000353a         movzx      edx, dl
000000000000353d         mov        edx, dword [rsi+rdx*4]
0000000000003540         bt         edx, ebx
0000000000003543         jb         loc_3693

                     loc_3549:
0000000000003549         test       r10b, r10b                                  ; CODE XREF=sub_34e0+83, sub_35e0+93
000000000000354c         jne        loc_3693

0000000000003552         xor        eax, 0x1
0000000000003555         add        rbp, 0x1
0000000000003559         and        eax, r8d

                     loc_355c:
000000000000355c         test       al, al                                      ; CODE XREF=sub_3a30+936
000000000000355e         je         loc_3580

0000000000003560         cmp        r13, r15
0000000000003563         jbe        loc_356a

0000000000003565         mov        byte [r14+r15], 0x27

                     loc_356a:
000000000000356a         lea        rax, qword [r15+1]                          ; CODE XREF=sub_34e0+131
000000000000356e         cmp        r13, rax
0000000000003571         jbe        loc_3579

0000000000003573         mov        byte [r14+r15+1], 0x27

                     loc_3579:
0000000000003579         add        r15, 0x2                                    ; CODE XREF=sub_34e0+145
000000000000357d         xor        r8d, r8d

                     loc_3580:
0000000000003580         cmp        r15, r13                                    ; CODE XREF=sub_34e0+126, sub_35e0+275, sub_3a30+869
0000000000003583         jae        loc_3589

0000000000003585         mov        byte [r14+r15], bl

                     loc_3589:
0000000000003589         movzx      edi, byte [rsp+0xe8+var_DA]                 ; CODE XREF=sub_34e0+163
000000000000358e         add        r15, 0x1
0000000000003592         mov        eax, 0x0
0000000000003597         test       r12b, r12b
000000000000359a         cmove      edi, eax
000000000000359d         mov        byte [rsp+0xe8+var_DA], dil
00000000000035a2         jmp        loc_33d8
00000000000035a7         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_70: int8_t, 120
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_35b0:
00000000000035b0         xor        r10d, r10d
00000000000035b3         mov        eax, dword [rsp+arg_0]
00000000000035b7         cmp        eax, 0x2
00000000000035ba         je         loc_3b78

00000000000035c0         cmp        eax, 0x5
00000000000035c3         je         loc_3b38

00000000000035c9         cmp        eax, 0x2
00000000000035cc         mov        ebx, 0x3f
00000000000035d1         sete       dl
00000000000035d4         xor        r12d, r12d
00000000000035d7         xor        eax, eax
00000000000035d9         jmp        sub_34e0+56
                        ; endp
00000000000035de         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_74: int8_t, 124
        ;    arg_48: int, 80
        ;    arg_40: int, 72
        ;    arg_38: int, 64
        ;    arg_30: int, 56
        ;    arg_28: int, 48
        ;    arg_20: int, 40
        ;    arg_18: int, 32
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_35e0:
00000000000035e0         xor        r10d, r10d
00000000000035e3         cmp        dword [rsp+arg_0], 0x2
00000000000035e8         je         loc_3af0

00000000000035ee         mov        byte [rsp+arg_74], r12b
00000000000035f3         xor        edx, edx
00000000000035f5         xor        eax, eax
00000000000035f7         mov        ebx, 0x27
00000000000035fc         jmp        sub_34e0+56
                        ; endp
0000000000003601         nop        dword [rax]
0000000000003608         mov        edx, 0x9
000000000000360d         mov        ebx, 0x74

                     loc_3612:
0000000000003612         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_37a0+10, sub_3890+37, sub_39d0+53
0000000000003617         sete       al
000000000000361a         and        al, byte [rsp+arg_7]
000000000000361e         jne        sub_3750+30

0000000000003624         cmp        byte [rsp+arg_5], 0x0                       ; CODE XREF=sub_35e0+114
0000000000003629         jne        loc_3690

                     loc_362b:
000000000000362b         mov        ebx, edx                                    ; CODE XREF=sub_3700+18
000000000000362d         xor        r12d, r12d
0000000000003630         xor        eax, eax
                        ; endp

                     loc_3632:
0000000000003632         cmp        byte [rsp+0xe8+var_D9], 0x0                 ; CODE XREF=sub_34e0+61, sub_34e0+69
0000000000003637         jne        loc_352b

000000000000363d         jmp        loc_3549
0000000000003642         nop        word [rax+rax]
0000000000003648         mov        edx, 0x8
000000000000364d         mov        ebx, 0x62
0000000000003652         jmp        sub_35e0+68
0000000000003654         nop        dword [rax]
0000000000003658         cmp        dword [rsp+8], 0x2
000000000000365d         je         sub_3a30                                    ; sub_3a30
0000000000003663         cmp        byte [rsp+0xd], 0x0
0000000000003668         je         sub_3870+16

                     loc_366e:
000000000000366e         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_3870+8
0000000000003673         je         loc_3880

0000000000003679         cmp        qword [rsp+arg_10], 0x0
000000000000367f         jne        loc_3a3b

0000000000003685         mov        ebx, 0x5c
000000000000368a         nop        word [rax+rax]
                        ; endp

                     loc_3690:
0000000000003690         xor        r12d, r12d                                  ; CODE XREF=sub_35e0+73, sub_39d0+29
                        ; endp

                     loc_3693:
0000000000003693         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_34e0+99, sub_34e0+108
0000000000003698         sete       dl
000000000000369b         cmp        byte [rsp+0xe8+var_D9], 0x0
00000000000036a0         mov        eax, edx
00000000000036a2         jne        loc_3ef8

00000000000036a8         mov        eax, r8d
00000000000036ab         xor        eax, 0x1
00000000000036ae         and        al, dl
00000000000036b0         je         loc_36e1

00000000000036b2         cmp        r13, r15
00000000000036b5         jbe        loc_36bc

00000000000036b7         mov        byte [r14+r15], 0x27

                     loc_36bc:
00000000000036bc         lea        rdx, qword [r15+1]                          ; CODE XREF=sub_35e0+213
00000000000036c0         cmp        r13, rdx
00000000000036c3         jbe        loc_36cb

00000000000036c5         mov        byte [r14+r15+1], 0x24

                     loc_36cb:
00000000000036cb         lea        rdx, qword [r15+2]                          ; CODE XREF=sub_35e0+227
00000000000036cf         cmp        r13, rdx
00000000000036d2         jbe        loc_36da

00000000000036d4         mov        byte [r14+r15+2], 0x27

                     loc_36da:
00000000000036da         add        r15, 0x3                                    ; CODE XREF=sub_35e0+242
00000000000036de         mov        r8d, eax

                     loc_36e1:
00000000000036e1         cmp        r13, r15                                    ; CODE XREF=sub_35e0+208
00000000000036e4         jbe        loc_36eb

00000000000036e6         mov        byte [r14+r15], 0x5c

                     loc_36eb:
00000000000036eb         add        r15, 0x1                                    ; CODE XREF=sub_35e0+260
00000000000036ef         add        rbp, 0x1
00000000000036f3         jmp        loc_3580
00000000000036f8         align      256


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_70: int8_t, 120
        ;    arg_20: int, 40
        ;    arg_18: int, 32
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_3700:
0000000000003700         cmp        byte [rsp+arg_5], 0x0
0000000000003705         jne        loc_38d3

000000000000370b         xor        edx, edx
000000000000370d         test       byte [rsp+arg_70], 0x1
0000000000003712         je         loc_362b

0000000000003718         add        rbp, 0x1
000000000000371c         jmp        quotearg_buffer_restyled+232
                        ; endp
0000000000003721         nop        dword [rax]
0000000000003728         cmp        dword [rsp+8], 0x2
000000000000372d         sete       dl
0000000000003730         xor        eax, eax
0000000000003732         jmp        sub_34e0+56
0000000000003737         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_3740:
0000000000003740         mov        edx, 0x7
0000000000003745         mov        ebx, 0x61
000000000000374a         jmp        sub_35e0+68
                        ; endp
000000000000374f         nop


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_3750:
0000000000003750         cmp        dword [rsp+8], 0x2
0000000000003755         sete       dl
                        ; endp

                     loc_3758:
0000000000003758         test       rbp, rbp                                    ; CODE XREF=sub_34e0+38, sub_3970+35
000000000000375b         jne        loc_350c

0000000000003761         movzx      eax, byte [rsp+arg_7]                       ; CODE XREF=sub_39a0+43
0000000000003766         and        al, dl
0000000000003768         je         sub_34e0+56

000000000000376e         mov        rbp, r11
0000000000003771         mov        dword [rsp+arg_0], 0x2
0000000000003779         jmp        sub_3a30+1097
                        ; endp
000000000000377e         align      128


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_3780:
0000000000003780         cmp        dword [rsp+arg_0], 0x2
0000000000003785         sete       dl
0000000000003788         xor        r12d, r12d
000000000000378b         jmp        sub_3750+17
                        ; endp
000000000000378d         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_3790:
0000000000003790         cmp        dword [rsp+arg_0], 0x2
0000000000003795         mov        ebx, 0x20
000000000000379a         sete       dl
000000000000379d         jmp        sub_3750+17
                        ; endp
000000000000379f         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_37a0:
00000000000037a0         mov        edx, 0xd
00000000000037a5         mov        ebx, 0x72
00000000000037aa         jmp        loc_3612
00000000000037af         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_37b0:
00000000000037b0         mov        edx, 0xc
00000000000037b5         mov        ebx, 0x66
00000000000037ba         jmp        sub_35e0+68
                        ; endp
00000000000037bf         align      64


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_37c0:
00000000000037c0         mov        edx, 0xb
00000000000037c5         mov        ebx, 0x76
00000000000037ca         jmp        sub_35e0+68
                        ; endp
00000000000037cf         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_37d0:
00000000000037d0         mov        edx, 0xa
00000000000037d5         mov        ebx, 0x6e
00000000000037da         jmp        sub_35e0+50
                        ; endp
00000000000037df         align      32

                     loc_37e0:
00000000000037e0         xor        r10d, r10d                                  ; CODE XREF=sub_37d0+135
00000000000037e3         nop        dword [rax+rax]

                     loc_37e8:
00000000000037e8         cmp        qword [rsp+0xe8+var_90], 0x1                ; CODE XREF=quotearg_buffer_restyled+471
00000000000037ee         jne        loc_3b98

00000000000037f4         mov        qword [rsp+0xe8+var_B0], r11
00000000000037f9         mov        byte [rsp+0xe8+var_B8], r8b
00000000000037fe         mov        byte [rsp+0xe8+var_C0], r10b
0000000000003803         call       j___ctype_b_loc                             ; __ctype_b_loc
0000000000003808         mov        rcx, qword [rax]
000000000000380b         movzx      edx, bl
000000000000380e         movzx      r10d, byte [rsp+0xe8+var_C0]
0000000000003814         movzx      r8d, byte [rsp+0xe8+var_B8]
000000000000381a         mov        r11, qword [rsp+0xe8+var_B0]
000000000000381f         mov        edi, 0x1
0000000000003824         movzx      eax, word [rcx+rdx*2]
0000000000003828         and        ax, 0x4000
000000000000382c         setne      r12b
0000000000003830         sete       al
0000000000003833         and        al, byte [rsp+0xe8+var_DB]

                     loc_3837:
0000000000003837         test       al, al                                      ; CODE XREF=sub_3f00+989
0000000000003839         jne        loc_41d1

000000000000383f         cmp        dword [rsp+0xe8+var_E0], 0x2
0000000000003844         sete       dl
0000000000003847         jmp        loc_3518
000000000000384c         align      16

                     loc_3850:
0000000000003850         movzx      ebx, byte [r9]                              ; CODE XREF=quotearg_buffer_restyled+305
0000000000003854         cmp        bl, 0x7e
0000000000003857         ja         loc_37e0

0000000000003859         lea        rcx, qword [switch_table_14740+552]         ; 0x14968
0000000000003860         movzx      edx, bl
0000000000003863         movsxd     rax, dword [rcx+rdx*4]
0000000000003867         add        rax, rcx
000000000000386a         jmp        rax
                        ; endp
000000000000386c         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_3870:
0000000000003870         xor        r10d, r10d
0000000000003873         cmp        byte [rsp+arg_5], 0x0
0000000000003878         jne        loc_366e

000000000000387e         nop

                     loc_3880:
0000000000003880         mov        edx, 0x5c                                   ; CODE XREF=sub_35e0+136, sub_35e0+147
0000000000003885         mov        ebx, 0x5c
000000000000388a         jmp        sub_35e0+68
                        ; endp
000000000000388f         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_3890:
0000000000003890         mov        edx, 0xc
0000000000003895         xor        r10d, r10d
0000000000003898         mov        ebx, 0x66
000000000000389d         jmp        sub_35e0+68
                        ; endp
00000000000038a2         nop        word [rax+rax]
00000000000038a8         mov        edx, 0xa
00000000000038ad         xor        r10d, r10d
00000000000038b0         mov        ebx, 0x6e
00000000000038b5         jmp        sub_35e0+50
00000000000038ba         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_38c0:
00000000000038c0         mov        ebx, 0x61
00000000000038c5         jmp        sub_35e0+176
                        ; endp
00000000000038ca         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_38d0:
00000000000038d0         xor        r10d, r10d
                        ; endp

                     loc_38d3:
00000000000038d3         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_3700+5
00000000000038d8         sete       dl
00000000000038db         cmp        byte [rsp+arg_7], 0x0
00000000000038e0         jne        loc_447a

00000000000038e6         mov        eax, r8d
00000000000038e9         mov        rcx, r15
00000000000038ec         xor        eax, 0x1
00000000000038ef         and        al, dl
00000000000038f1         je         loc_3920

00000000000038f3         cmp        r13, r15
00000000000038f6         jbe        loc_38fd

00000000000038f8         mov        byte [r14+r15], 0x27

                     loc_38fd:
00000000000038fd         lea        rcx, qword [r15+1]                          ; CODE XREF=sub_38d0+38
0000000000003901         cmp        r13, rcx
0000000000003904         jbe        loc_390c

0000000000003906         mov        byte [r14+r15+1], 0x24

                     loc_390c:
000000000000390c         lea        rcx, qword [r15+2]                          ; CODE XREF=sub_38d0+52
0000000000003910         cmp        r13, rcx
0000000000003913         ja         loc_3f49

                     loc_3919:
0000000000003919         lea        rcx, qword [r15+3]                          ; CODE XREF=sub_3f00+79
000000000000391d         mov        r8d, eax

                     loc_3920:
0000000000003920         cmp        r13, rcx                                    ; CODE XREF=sub_38d0+33
0000000000003923         jbe        loc_392a

0000000000003925         mov        byte [r14+rcx], 0x5c

                     loc_392a:
000000000000392a         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_38d0+83
000000000000392f         lea        r15, qword [rcx+1]
0000000000003933         je         loc_3f39

0000000000003939         lea        rax, qword [rbp+1]
000000000000393d         cmp        rax, r11
0000000000003940         jae        loc_395b

0000000000003942         mov        rax, qword [rsp+arg_8]
0000000000003947         movzx      eax, byte [rax+rbp+1]
000000000000394c         mov        byte [rsp+arg_20], al
0000000000003950         sub        eax, 0x30
0000000000003953         cmp        al, 0x9
0000000000003955         jbe        loc_4189

                     loc_395b:
000000000000395b         mov        eax, r12d                                   ; CODE XREF=sub_38d0+112
000000000000395e         mov        ebx, 0x30
0000000000003963         xor        r12d, r12d
0000000000003966         jmp        sub_34e0+56
                        ; endp
000000000000396b         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_3970:
0000000000003970         cmp        dword [rsp+arg_0], 0x2
0000000000003975         mov        r12d, r10d
0000000000003978         sete       dl
000000000000397b         xor        r10d, r10d
000000000000397e         xor        eax, eax
0000000000003980         jmp        sub_34e0+56
                        ; endp
0000000000003985         nop        dword [rax]
0000000000003988         cmp        dword [rsp+8], 0x2
000000000000398d         sete       dl
0000000000003990         xor        r10d, r10d
0000000000003993         jmp        sub_3750+8
0000000000003998         nop        dword [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_39a0:
00000000000039a0         cmp        dword [rsp+8], 0x2
00000000000039a5         sete       dl
00000000000039a8         xor        r10d, r10d
00000000000039ab         xor        r12d, r12d
00000000000039ae         jmp        sub_3750+17
                        ; endp
00000000000039b3         nop        dword [rax+rax]
00000000000039b8         cmp        dword [rsp+8], 0x2
00000000000039bd         mov        r12d, r10d
00000000000039c0         mov        ebx, 0x20
00000000000039c5         sete       dl
00000000000039c8         xor        r10d, r10d
00000000000039cb         jmp        sub_3750+17


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_39d0:
00000000000039d0         mov        edx, 0xd
00000000000039d5         xor        r10d, r10d
00000000000039d8         mov        ebx, 0x72
00000000000039dd         jmp        sub_35e0+50
                        ; endp
00000000000039e2         nop        word [rax+rax]
00000000000039e8         mov        ebx, 0x76
00000000000039ed         jmp        sub_35e0+176
00000000000039f2         nop        word [rax+rax]
00000000000039f8         mov        edx, 0x9
00000000000039fd         xor        r10d, r10d
0000000000003a00         mov        ebx, 0x74
0000000000003a05         jmp        sub_35e0+50
0000000000003a0a         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_3a10:
0000000000003a10         mov        ebx, 0x62
0000000000003a15         jmp        sub_35e0+176
                        ; endp
0000000000003a1a         nop        word [rax+rax]

                     loc_3a20:
0000000000003a20         xor        r10d, r10d                                  ; CODE XREF=quotearg_buffer_restyled+376, quotearg_buffer_restyled+433
0000000000003a23         jmp        loc_34c0
0000000000003a28         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_7: int8_t, 15


                     sub_3a30:
0000000000003a30         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_35e0+125
0000000000003a35         jne        sub_3f00+1184
                        ; endp

                     loc_3a3b:
0000000000003a3b         add        rbp, 0x1                                    ; CODE XREF=sub_35e0+159
0000000000003a3f         mov        eax, r8d
0000000000003a42         xor        r12d, r12d
0000000000003a45         mov        ebx, 0x5c
0000000000003a4a         jmp        sub_34e0+124
                        ; endp
0000000000003a4f         align      16

                     loc_3a50:
0000000000003a50         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=quotearg_buffer_restyled+261
0000000000003a55         movzx      ebx, byte [rsp+0xe8+var_D9]
0000000000003a5a         mov        r12d, r8d
0000000000003a5d         mov        rbp, r11
0000000000003a60         sete       dl
0000000000003a63         mov        eax, ebx
0000000000003a65         test       r15, r15
0000000000003a68         sete       cl
0000000000003a6b         and        eax, edx
0000000000003a6d         and        al, cl
0000000000003a6f         jne        loc_44d6

0000000000003a75         mov        eax, ebx
0000000000003a77         xor        eax, 0x1
0000000000003a7a         and        dl, al
0000000000003a7c         je         loc_43ec

0000000000003a82         cmp        byte [rsp+0xe8+var_6C], 0x0
0000000000003a87         je         loc_43ea

0000000000003a8d         cmp        byte [rsp+0xe8+var_DA], 0x0
0000000000003a92         jne        loc_448d

0000000000003a98         test       r13, r13
0000000000003a9b         sete       al
0000000000003a9e         cmp        qword [rsp+0xe8+var_98], 0x0
0000000000003aa4         setne      dl
0000000000003aa7         and        al, dl
0000000000003aa9         je         loc_44cc

0000000000003aaf         mov        r13, qword [rsp+0xe8+var_98]

                     loc_3ab4:
0000000000003ab4         lea        rbx, qword [aLibs+29]                       ; 0x146dd, CODE XREF=sub_3f00+1549
0000000000003abb         mov        byte [r14], 0x27
0000000000003abf         mov        dword [rsp+0xe8+var_E0], 0x2
0000000000003ac7         mov        r15d, 0x1
0000000000003acd         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000003ad6         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000003adb         mov        qword [rsp+0xe8+var_A0], rbx
0000000000003ae0         mov        byte [rsp+0xe8+var_6C], al
0000000000003ae4         jmp        loc_33c3
0000000000003ae9         align      16

                     loc_3af0:
0000000000003af0         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_35e0+8
0000000000003af5         jne        sub_3f00+1184

0000000000003afb         test       r13, r13
0000000000003afe         je         sub_3f00                                    ; sub_3f00

0000000000003b04         xor        edx, edx
0000000000003b06         cmp        qword [rsp+arg_48], 0x0
0000000000003b0c         jne        sub_3f00                                    ; sub_3f00
                        ; endp

                     loc_3b12:
0000000000003b12         mov        qword [rsp+arg_48], r13                     ; CODE XREF=sub_3f00+52, sub_3f00+1562
0000000000003b17         add        r15, 0x3
0000000000003b1b         xor        eax, eax
0000000000003b1d         mov        byte [rsp+arg_74], r12b
0000000000003b22         xor        r8d, r8d
0000000000003b25         mov        r13, rdx
0000000000003b28         mov        ebx, 0x27
0000000000003b2d         jmp        sub_34e0+105
                        ; endp
0000000000003b32         align      8

                     loc_3b38:
0000000000003b38         test       byte [rsp+arg_70], 0x4                      ; CODE XREF=sub_35b0+19
0000000000003b3d         je         loc_3b60

0000000000003b3f         lea        rcx, qword [rbp+2]
0000000000003b43         cmp        rcx, r11
0000000000003b46         jae        loc_3b60

0000000000003b48         mov        rax, qword [rsp+arg_8]
0000000000003b4d         cmp        byte [rax+rbp+1], 0x3f
0000000000003b52         je         loc_42e2

0000000000003b58         nop        dword [rax+rax]

                     loc_3b60:
0000000000003b60         xor        edx, edx                                    ; CODE XREF=sub_3a30+269, sub_3a30+278, sub_3f00+1001, sub_3f00+1021
0000000000003b62         xor        r12d, r12d
0000000000003b65         xor        eax, eax
0000000000003b67         mov        ebx, 0x3f
0000000000003b6c         jmp        sub_34e0+56
                        ; endp
0000000000003b71         align      8

                     loc_3b78:
0000000000003b78         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_35b0+10
0000000000003b7d         jne        loc_43a0

0000000000003b83         xor        r12d, r12d
0000000000003b86         xor        eax, eax
0000000000003b88         mov        ebx, 0x3f
0000000000003b8d         jmp        sub_34e0+105
                        ; endp
0000000000003b92         align      8

                     loc_3b98:
0000000000003b98         lea        rax, qword [rsp+0xe8+var_48]                ; CODE XREF=sub_37d0+30
0000000000003ba0         cmp        r11, 0xffffffffffffffff
0000000000003ba4         mov        qword [rsp+0xe8+var_48], 0x0
0000000000003bb0         mov        qword [rsp+0xe8+var_C0], rax
0000000000003bb5         jne        loc_3be4

0000000000003bb7         mov        rdi, qword [rsp+0xe8+var_D8]                ; argument "__s" for method j_strlen
0000000000003bbc         mov        byte [rsp+0xe8+var_A8], r8b
0000000000003bc1         mov        byte [rsp+0xe8+var_B0], r10b
0000000000003bc6         mov        qword [rsp+0xe8+var_B8], r9
0000000000003bcb         call       j_strlen                                    ; strlen
0000000000003bd0         movzx      r8d, byte [rsp+0xe8+var_A8]
0000000000003bd6         movzx      r10d, byte [rsp+0xe8+var_B0]
0000000000003bdc         mov        r11, rax
0000000000003bdf         mov        r9, qword [rsp+0xe8+var_B8]

                     loc_3be4:
0000000000003be4         lea        rax, qword [rsp+0xe8+var_4C]                ; CODE XREF=sub_3a30+389
0000000000003bec         xor        ecx, ecx
0000000000003bee         mov        byte [rsp+0xe8+var_6A], bl
0000000000003bf2         mov        byte [rsp+0xe8+var_6B], r8b
0000000000003bf7         mov        rbx, rcx
0000000000003bfa         mov        qword [rsp+0xe8+var_60], r9
0000000000003c02         mov        qword [rsp+0xe8+var_B0], rax
0000000000003c07         mov        byte [rsp+0xe8+var_69], r10b
0000000000003c0c         mov        qword [rsp+0xe8+var_68], r15
0000000000003c14         mov        qword [rsp+0xe8+var_A8], r14
0000000000003c19         mov        qword [rsp+0xe8+var_78], r13
0000000000003c1e         mov        qword [rsp+0xe8+var_B8], r11

                     loc_3c23:
0000000000003c23         mov        rax, qword [rsp+0xe8+var_D8]                ; CODE XREF=sub_3a30+623
0000000000003c28         lea        r14, qword [rbp+rbx]
0000000000003c2d         mov        rdx, qword [rsp+0xe8+var_B8]
0000000000003c32         mov        rcx, qword [rsp+0xe8+var_C0]
0000000000003c37         mov        rdi, qword [rsp+0xe8+var_B0]
0000000000003c3c         lea        r13, qword [rax+r14]
0000000000003c40         sub        rdx, r14
0000000000003c43         mov        rsi, r13
0000000000003c46         call       rpl_mbrtowc                                 ; rpl_mbrtowc
0000000000003c4b         test       rax, rax
0000000000003c4e         mov        r15, rax
0000000000003c51         je         loc_3ca1

0000000000003c53         cmp        rax, 0xffffffffffffffff
0000000000003c57         je         loc_4275

0000000000003c5d         cmp        rax, 0xfffffffffffffffe
0000000000003c61         je         loc_4201

0000000000003c67         cmp        dword [rsp+0xe8+var_E0], 0x2
0000000000003c6c         sete       al
0000000000003c6f         and        al, byte [rsp+0xe8+var_D9]
0000000000003c73         jne        loc_3e10

                     loc_3c79:
0000000000003c79         mov        edi, dword [rsp+0xe8+var_4C]                ; argument "__wc" for method j_iswprint, CODE XREF=sub_3a30+996, sub_3a30+1031
0000000000003c80         call       j_iswprint                                  ; iswprint
0000000000003c85         mov        rdi, qword [rsp+0xe8+var_C0]                ; argument "__ps" for method j_mbsinit
0000000000003c8a         test       eax, eax
0000000000003c8c         mov        eax, 0x0
0000000000003c91         cmove      r12d, eax
0000000000003c95         add        rbx, r15
0000000000003c98         call       j_mbsinit                                   ; mbsinit
0000000000003c9d         test       eax, eax
0000000000003c9f         je         loc_3c23

                     loc_3ca1:
0000000000003ca1         mov        edx, r12d                                   ; CODE XREF=sub_3a30+545
0000000000003ca4         mov        rdi, rbx
0000000000003ca7         movzx      r8d, byte [rsp+0xe8+var_6B]
0000000000003cad         xor        edx, 0x1
0000000000003cb0         movzx      ebx, byte [rsp+0xe8+var_6A]
0000000000003cb5         movzx      r10d, byte [rsp+0xe8+var_69]
0000000000003cbb         and        dl, byte [rsp+0xe8+var_DB]
0000000000003cbf         mov        r15, qword [rsp+0xe8+var_68]
0000000000003cc7         mov        r14, qword [rsp+0xe8+var_A8]
0000000000003ccc         mov        r13, qword [rsp+0xe8+var_78]
0000000000003cd1         mov        r11, qword [rsp+0xe8+var_B8]

                     loc_3cd6:
0000000000003cd6         cmp        rdi, 0x1                                    ; CODE XREF=sub_3f00+880, sub_3f00+936
0000000000003cda         jbe        loc_42db

                     loc_3ce0:
0000000000003ce0         mov        rcx, rdi                                    ; CODE XREF=sub_3f00+729
0000000000003ce3         xor        esi, esi
0000000000003ce5         movzx      r9d, byte [rsp+0xe8+var_D9]
0000000000003ceb         add        rcx, rbp
0000000000003cee         mov        rdi, qword [rsp+0xe8+var_D8]
0000000000003cf3         jmp        loc_3dae
0000000000003cf8         align      256

                     loc_3d00:
0000000000003d00         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_3a30+896
0000000000003d05         sete       al
0000000000003d08         test       r9b, r9b
0000000000003d0b         jne        loc_41c0

0000000000003d11         mov        esi, r8d
0000000000003d14         xor        esi, 0x1
0000000000003d17         and        al, sil
0000000000003d1a         je         loc_3d4b

0000000000003d1c         cmp        r13, r15
0000000000003d1f         jbe        loc_3d26

0000000000003d21         mov        byte [r14+r15], 0x27

                     loc_3d26:
0000000000003d26         lea        rsi, qword [r15+1]                          ; CODE XREF=sub_3a30+751
0000000000003d2a         cmp        r13, rsi
0000000000003d2d         jbe        loc_3d35

0000000000003d2f         mov        byte [r14+r15+1], 0x24

                     loc_3d35:
0000000000003d35         lea        rsi, qword [r15+2]                          ; CODE XREF=sub_3a30+765
0000000000003d39         cmp        r13, rsi
0000000000003d3c         jbe        loc_3d44

0000000000003d3e         mov        byte [r14+r15+2], 0x27

                     loc_3d44:
0000000000003d44         add        r15, 0x3                                    ; CODE XREF=sub_3a30+780
0000000000003d48         mov        r8d, eax

                     loc_3d4b:
0000000000003d4b         cmp        r13, r15                                    ; CODE XREF=sub_3a30+746
0000000000003d4e         jbe        loc_3d55

0000000000003d50         mov        byte [r14+r15], 0x5c

                     loc_3d55:
0000000000003d55         lea        rax, qword [r15+1]                          ; CODE XREF=sub_3a30+798
0000000000003d59         cmp        r13, rax
0000000000003d5c         jbe        loc_3d6b

0000000000003d5e         mov        eax, ebx
0000000000003d60         shr        al, 0x6
0000000000003d63         add        eax, 0x30
0000000000003d66         mov        byte [r14+r15+1], al

                     loc_3d6b:
0000000000003d6b         lea        rax, qword [r15+2]                          ; CODE XREF=sub_3a30+812
0000000000003d6f         cmp        r13, rax
0000000000003d72         jbe        loc_3d84

0000000000003d74         mov        eax, ebx
0000000000003d76         shr        al, 0x3
0000000000003d79         and        eax, 0x7
0000000000003d7c         add        eax, 0x30
0000000000003d7f         mov        byte [r14+r15+2], al

                     loc_3d84:
0000000000003d84         and        ebx, 0x7                                    ; CODE XREF=sub_3a30+834
0000000000003d87         add        rbp, 0x1
0000000000003d8b         add        r15, 0x3
0000000000003d8f         add        ebx, 0x30
0000000000003d92         cmp        rbp, rcx
0000000000003d95         jae        loc_3580

0000000000003d9b         mov        esi, edx

                     loc_3d9d:
0000000000003d9d         cmp        r13, r15                                    ; CODE XREF=sub_3a30+985, sub_3f00+737
0000000000003da0         jbe        loc_3da6

0000000000003da2         mov        byte [r14+r15], bl

                     loc_3da6:
0000000000003da6         movzx      ebx, byte [rdi+rbp]                         ; CODE XREF=sub_3a30+880
0000000000003daa         add        r15, 0x1

                     loc_3dae:
0000000000003dae         test       dl, dl                                      ; CODE XREF=sub_3a30+707
0000000000003db0         jne        loc_3d00

0000000000003db6         mov        eax, esi
0000000000003db8         xor        eax, 0x1
0000000000003dbb         and        eax, r8d
0000000000003dbe         test       r10b, r10b
0000000000003dc1         je         loc_3dd1

0000000000003dc3         cmp        r13, r15
0000000000003dc6         jbe        loc_3dcd

0000000000003dc8         mov        byte [r14+r15], 0x5c

                     loc_3dcd:
0000000000003dcd         add        r15, 0x1                                    ; CODE XREF=sub_3a30+918

                     loc_3dd1:
0000000000003dd1         add        rbp, 0x1                                    ; CODE XREF=sub_3a30+913
0000000000003dd5         cmp        rbp, rcx
0000000000003dd8         jae        loc_355c

0000000000003dde         test       al, al
0000000000003de0         je         loc_41de

0000000000003de6         cmp        r13, r15
0000000000003de9         jbe        loc_3df0

0000000000003deb         mov        byte [r14+r15], 0x27

                     loc_3df0:
0000000000003df0         lea        rax, qword [r15+1]                          ; CODE XREF=sub_3a30+953
0000000000003df4         cmp        r13, rax
0000000000003df7         jbe        loc_3dff

0000000000003df9         mov        byte [r14+r15+1], 0x27

                     loc_3dff:
0000000000003dff         add        r15, 0x2                                    ; CODE XREF=sub_3a30+967
0000000000003e03         xor        r10d, r10d
0000000000003e06         xor        r8d, r8d
0000000000003e09         jmp        loc_3d9d
0000000000003e0b         align      16

                     loc_3e10:
0000000000003e10         cmp        r15, 0x1                                    ; CODE XREF=sub_3a30+579
0000000000003e14         je         loc_3c79

0000000000003e1a         mov        rdi, qword [rsp+0xe8+var_D8]
0000000000003e1f         lea        rcx, qword [rdi+r15]
0000000000003e23         lea        rdx, qword [rdi+r14+1]
0000000000003e28         lea        r8, qword [rcx+r14]
0000000000003e2c         jmp        loc_3e3d
0000000000003e2e         align      16

                     loc_3e30:
0000000000003e30         add        rdx, 0x1                                    ; CODE XREF=sub_3a30+1046, sub_3a30+1072
0000000000003e34         cmp        r8, rdx
0000000000003e37         je         loc_3c79

                     loc_3e3d:
0000000000003e3d         movzx      ecx, byte [rdx]                             ; CODE XREF=sub_3a30+1020
0000000000003e40         sub        ecx, 0x5b
0000000000003e43         cmp        cl, 0x21
0000000000003e46         ja         loc_3e30

0000000000003e48         mov        esi, 0x1
0000000000003e4d         shl        rsi, cl
0000000000003e50         mov        rcx, rsi
0000000000003e53         movabs     rsi, 0x20000002b
0000000000003e5d         test       rcx, rsi
0000000000003e60         je         loc_3e30

0000000000003e62         mov        r14, qword [rsp+0xe8+var_A8]
0000000000003e67         mov        r13, qword [rsp+0xe8+var_78]
0000000000003e6c         mov        rbp, qword [rsp+0xe8+var_B8]
0000000000003e71         mov        dword [rsp+0xe8+var_E0], 0x2

                     loc_3e79:
0000000000003e79         cmp        byte [rsp+0xe8+var_DB], 0x0                 ; CODE XREF=sub_3a30+1227, sub_3f00+716, sub_3f00+1353, sub_3f00+1502
0000000000003e7e         je         loc_3e90

0000000000003e80         test       al, al
0000000000003e82         mov        eax, 0x4
0000000000003e87         cmove      eax, dword [rsp+0xe8+var_E0]
0000000000003e8c         mov        dword [rsp+0xe8+var_E0], eax

                     loc_3e90:
0000000000003e90         sub        rsp, 0x8                                    ; CODE XREF=sub_3a30+1102
0000000000003e94         mov        rcx, rbp
0000000000003e97         mov        rsi, r13
0000000000003e9a         push       qword [rsp+0xf0+var_88]
0000000000003e9e         push       qword [rsp+0xf8+var_80]
0000000000003ea2         mov        rdi, r14
0000000000003ea5         push       0x0
0000000000003ea7         mov        r9d, dword [rsp+0x108+var_70]
0000000000003eaf         mov        r8d, dword [rsp+0x108+var_E0]
0000000000003eb4         mov        rdx, qword [rsp+0x108+var_D8]
0000000000003eb9         and        r9d, 0xfffffffd
0000000000003ebd         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000003ec2         add        rsp, 0x20
0000000000003ec6         mov        r15, rax

                     loc_3ec9:
0000000000003ec9         mov        rbx, qword [rsp+0xe8+var_40]                ; CODE XREF=sub_3f00+1317, sub_3f00+1328, sub_3f00+1479
0000000000003ed1         xor        rbx, qword [fs:0x28]
0000000000003eda         mov        rax, r15
0000000000003edd         jne        loc_44e3

0000000000003ee3         add        rsp, 0xb8
0000000000003eea         pop        rbx
0000000000003eeb         pop        rbp
0000000000003eec         pop        r12
0000000000003eee         pop        r13
0000000000003ef0         pop        r14
0000000000003ef2         pop        r15
0000000000003ef4         ret
                        ; endp
0000000000003ef5         align      8

                     loc_3ef8:
0000000000003ef8         mov        rbp, r11                                    ; CODE XREF=sub_35e0+194
0000000000003efb         jmp        loc_3e79


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_74: int8_t, 124
        ;    arg_48: int, 80
        ;    arg_40: int, 72
        ;    arg_38: int, 64
        ;    arg_30: int, 56
        ;    arg_28: int, 48
        ;    arg_20: int, 40
        ;    arg_18: int, 32
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_0: int, 8


                     sub_3f00:
0000000000003f00         cmp        r13, r15
0000000000003f03         jbe        loc_3f0a

0000000000003f05         mov        byte [r14+r15], 0x27

                     loc_3f0a:
0000000000003f0a         lea        rax, qword [r15+1]                          ; CODE XREF=sub_3f00+3
0000000000003f0e         cmp        r13, rax
0000000000003f11         jbe        loc_3f19

0000000000003f13         mov        byte [r14+r15+1], 0x5c

                     loc_3f19:
0000000000003f19         lea        rax, qword [r15+2]                          ; CODE XREF=sub_3f00+17
0000000000003f1d         cmp        r13, rax
0000000000003f20         jbe        loc_4512

0000000000003f26         mov        rdx, r13
0000000000003f29         mov        byte [r14+r15+2], 0x27
0000000000003f2f         mov        r13, qword [rsp+arg_48]
0000000000003f34         jmp        loc_3b12

                     loc_3f39:
0000000000003f39         mov        eax, r12d                                   ; CODE XREF=sub_38d0+99
0000000000003f3c         mov        ebx, 0x30
0000000000003f41         xor        r12d, r12d
0000000000003f44         jmp        sub_34e0+105
                        ; endp

                     loc_3f49:
0000000000003f49         mov        byte [r14+r15+2], 0x27                      ; CODE XREF=sub_38d0+67
0000000000003f4f         jmp        loc_3919

                     loc_3f54:
0000000000003f54         test       ebx, ebx                                    ; case 4, CODE XREF=quotearg_buffer_restyled+145
0000000000003f56         jne        loc_3383

0000000000003f5c         mov        byte [rsp+0xe8+var_DB], 0x1

                     loc_3f61:
0000000000003f61         test       r13, r13                                    ; CODE XREF=sub_3f00+1517
0000000000003f64         jne        loc_44fa

0000000000003f6a         lea        rax, qword [aLibs+29]                       ; 0x146dd
0000000000003f71         mov        qword [rsp+0xe8+var_98], 0x0
0000000000003f7a         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000003f7f         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000003f84         xor        r12d, r12d
0000000000003f87         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000003f8c         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000003f95         mov        qword [rsp+0xe8+var_A0], rax
0000000000003f9a         mov        r15d, 0x1
0000000000003fa0         mov        dword [rsp+0xe8+var_E0], 0x2
0000000000003fa8         jmp        loc_33c3
0000000000003fad         align      16

                     loc_3fb0:
0000000000003fb0         test       ebx, ebx                                    ; case 5, CODE XREF=quotearg_buffer_restyled+145
0000000000003fb2         jne        loc_43ad

0000000000003fb8         test       r13, r13
0000000000003fbb         je         loc_41e6

0000000000003fc1         mov        byte [r14], 0x22
0000000000003fc5         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000003fca         xor        r12d, r12d
0000000000003fcd         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000003fd2         mov        qword [rsp+0xe8+var_98], 0x0

                     loc_3fdb:
0000000000003fdb         lea        rax, qword [aLibs+27]                       ; 0x146db, CODE XREF=sub_3f00+764
0000000000003fe2         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000003fe7         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000003fec         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000003ff5         mov        r15d, 0x1
0000000000003ffb         mov        qword [rsp+0xe8+var_A0], rax
0000000000004000         jmp        loc_33c3                                    ; DATA XREF=sub_37d0+88, peek_token+1361

                     loc_4005:
0000000000004005         lea        rax, qword [aLibs+27]                       ; case 6, 0x146db, CODE XREF=quotearg_buffer_restyled+145
000000000000400c         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000004011         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000004016         xor        r12d, r12d
0000000000004019         mov        qword [rsp+0xe8+var_98], 0x0
0000000000004022         mov        byte [rsp+0xe8+var_D9], 0x1
0000000000004027         mov        byte [rsp+0xe8+var_DB], 0x1
000000000000402c         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000004035         xor        r15d, r15d
0000000000004038         mov        qword [rsp+0xe8+var_A0], rax
000000000000403d         mov        dword [rsp+0xe8+var_E0], 0x5
0000000000004045         jmp        loc_33c3

                     loc_404a:
000000000000404a         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 7, CODE XREF=quotearg_buffer_restyled+145
000000000000404f         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000004054         xor        r12d, r12d
0000000000004057         mov        qword [rsp+0xe8+var_98], 0x0
0000000000004060         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000004065         xor        r15d, r15d
0000000000004068         mov        byte [rsp+0xe8+var_DB], 0x1
000000000000406d         mov        qword [rsp+0xe8+var_D0], 0x0
0000000000004076         mov        qword [rsp+0xe8+var_A0], 0x0
000000000000407f         jmp        loc_33c3

                     loc_4084:
0000000000004084         cmp        dword [rsp+0xe8+var_E0], 0xa                ; case 10, CODE XREF=quotearg_buffer_restyled+145
0000000000004089         je         loc_40e1

000000000000408b         lea        rsi, qword [aLibs+31]                       ; argument "msgid" for method j_dcgettext, 0x146df
0000000000004092         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004094         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004099         call       j_dcgettext                                 ; dcgettext
000000000000409e         mov        rcx, rax
00000000000040a1         mov        qword [rsp+0xe8+var_80], rax
00000000000040a6         lea        rax, qword [aLibs+31]                       ; 0x146df
00000000000040ad         cmp        rcx, rax
00000000000040b0         je         loc_444e

                     loc_40b6:
00000000000040b6         lea        rsi, qword [aLibs+29]                       ; argument "msgid" for method j_dcgettext, 0x146dd, CODE XREF=sub_3f00+1375
00000000000040bd         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000040bf         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000040c4         call       j_dcgettext                                 ; dcgettext
00000000000040c9         mov        rcx, rax
00000000000040cc         mov        qword [rsp+0xe8+var_88], rax
00000000000040d1         lea        rax, qword [aLibs+29]                       ; 0x146dd
00000000000040d8         cmp        rcx, rax
00000000000040db         je         loc_4464

                     loc_40e1:
00000000000040e1         xor        r15d, r15d                                  ; CODE XREF=sub_3f00+393, sub_3f00+1397
00000000000040e4         test       ebx, ebx
00000000000040e6         je         loc_42ad

                     loc_40ec:
00000000000040ec         test       ebx, ebx                                    ; CODE XREF=sub_3f00+951, sub_3f00+982
00000000000040ee         mov        rbx, qword [rsp+0xe8+var_88]
00000000000040f3         setne      byte [rsp+0xe8+var_D9]
00000000000040f8         xor        r12d, r12d
00000000000040fb         mov        rdi, rbx                                    ; argument "__s" for method j_strlen
00000000000040fe         call       j_strlen                                    ; strlen
0000000000004103         mov        qword [rsp+0xe8+var_A0], rbx
0000000000004108         mov        qword [rsp+0xe8+var_D0], rax
000000000000410d         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000004112         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000004117         mov        qword [rsp+0xe8+var_98], 0x0
0000000000004120         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000004125         jmp        loc_33c3

                     loc_412a:
000000000000412a         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 0, CODE XREF=quotearg_buffer_restyled+145
000000000000412f         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000004134         xor        r12d, r12d
0000000000004137         mov        qword [rsp+0xe8+var_98], 0x0
0000000000004140         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000004145         xor        r15d, r15d
0000000000004148         mov        byte [rsp+0xe8+var_DB], 0x0
000000000000414d         mov        qword [rsp+0xe8+var_D0], 0x0
0000000000004156         mov        qword [rsp+0xe8+var_A0], 0x0
000000000000415f         jmp        loc_33c3

                     loc_4164:
0000000000004164         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 3, CODE XREF=quotearg_buffer_restyled+145
0000000000004169         mov        byte [rsp+0xe8+var_6C], 0x0
000000000000416e         xor        r12d, r12d
0000000000004171         mov        qword [rsp+0xe8+var_98], 0x0
000000000000417a         mov        byte [rsp+0xe8+var_D9], 0x1
000000000000417f         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000004184         jmp        loc_33a3

                     loc_4189:
0000000000004189         cmp        r13, r15                                    ; CODE XREF=sub_38d0+133
000000000000418c         jbe        loc_4193

000000000000418e         mov        byte [r14+r15], 0x30

                     loc_4193:
0000000000004193         lea        rax, qword [rcx+2]                          ; CODE XREF=sub_3f00+652
0000000000004197         cmp        r13, rax
000000000000419a         jbe        loc_41a2

000000000000419c         mov        byte [r14+rcx+2], 0x30

                     loc_41a2:
00000000000041a2         mov        eax, r12d                                   ; CODE XREF=sub_3f00+666
00000000000041a5         lea        r15, qword [rcx+3]
00000000000041a9         xor        r12d, r12d
00000000000041ac         mov        ebx, 0x30
00000000000041b1         jmp        sub_34e0+56
                        ; endp
00000000000041b6         align      64

                     loc_41c0:
00000000000041c0         movzx      ebx, byte [rsp+0xe8+var_D9]                 ; CODE XREF=sub_3a30+731
00000000000041c5         mov        rbp, r11
00000000000041c8         mov        byte [rsp+0xe8+var_DB], bl
00000000000041cc         jmp        loc_3e79

                     loc_41d1:
00000000000041d1         movzx      edx, byte [rsp+0xe8+var_DB]                 ; CODE XREF=sub_37d0+105
00000000000041d6         xor        r12d, r12d
00000000000041d9         jmp        loc_3ce0

                     loc_41de:
00000000000041de         xor        r10d, r10d                                  ; CODE XREF=sub_3a30+944
00000000000041e1         jmp        loc_3d9d

                     loc_41e6:
00000000000041e6         mov        qword [rsp+0xe8+var_98], 0x0                ; CODE XREF=sub_3f00+187
00000000000041ef         mov        byte [rsp+0xe8+var_DA], 0x1
00000000000041f4         xor        r12d, r12d
00000000000041f7         mov        byte [rsp+0xe8+var_6C], 0x0
00000000000041fc         jmp        loc_3fdb

                     loc_4201:
0000000000004201         mov        r11, qword [rsp+0xe8+var_B8]                ; CODE XREF=sub_3a30+561
0000000000004206         mov        rsi, r14
0000000000004209         mov        rcx, r13
000000000000420c         mov        rax, rbx
000000000000420f         mov        rdi, rbx
0000000000004212         movzx      r8d, byte [rsp+0xe8+var_6B]
0000000000004218         movzx      ebx, byte [rsp+0xe8+var_6A]
000000000000421d         mov        r9, qword [rsp+0xe8+var_60]
0000000000004225         cmp        rsi, r11
0000000000004228         movzx      r10d, byte [rsp+0xe8+var_69]
000000000000422e         mov        r15, qword [rsp+0xe8+var_68]
0000000000004236         mov        r14, qword [rsp+0xe8+var_A8]
000000000000423b         mov        r13, qword [rsp+0xe8+var_78]
0000000000004240         jae        loc_4268

0000000000004242         cmp        byte [rcx], 0x0
0000000000004245         jne        loc_4257

0000000000004247         jmp        loc_4268
0000000000004249         align      16

                     loc_4250:
0000000000004250         cmp        byte [r9+rax], 0x0                          ; CODE XREF=sub_3f00+867
0000000000004255         je         loc_4265

                     loc_4257:
0000000000004257         add        rax, 0x1                                    ; CODE XREF=sub_3f00+837
000000000000425b         lea        rdx, qword [rbp+rax]
0000000000004260         cmp        r11, rdx
0000000000004263         ja         loc_4250

                     loc_4265:
0000000000004265         mov        rdi, rax                                    ; CODE XREF=sub_3f00+853

                     loc_4268:
0000000000004268         movzx      edx, byte [rsp+0xe8+var_DB]                 ; CODE XREF=sub_3f00+832, sub_3f00+839
000000000000426d         xor        r12d, r12d
0000000000004270         jmp        loc_3cd6

                     loc_4275:
0000000000004275         mov        rdi, rbx                                    ; CODE XREF=sub_3a30+551
0000000000004278         movzx      r8d, byte [rsp+0xe8+var_6B]
000000000000427e         movzx      ebx, byte [rsp+0xe8+var_6A]
0000000000004283         movzx      r10d, byte [rsp+0xe8+var_69]
0000000000004289         mov        r15, qword [rsp+0xe8+var_68]
0000000000004291         xor        r12d, r12d
0000000000004294         mov        r14, qword [rsp+0xe8+var_A8]
0000000000004299         mov        r13, qword [rsp+0xe8+var_78]
000000000000429e         mov        r11, qword [rsp+0xe8+var_B8]
00000000000042a3         movzx      edx, byte [rsp+0xe8+var_DB]
00000000000042a8         jmp        loc_3cd6

                     loc_42ad:
00000000000042ad         mov        rdx, qword [rsp+0xe8+var_80]                ; CODE XREF=sub_3f00+486
00000000000042b2         movzx      eax, byte [rdx]
00000000000042b5         test       al, al
00000000000042b7         je         loc_40ec

00000000000042bd         nop        dword [rax]

                     loc_42c0:
00000000000042c0         cmp        r13, r15                                    ; CODE XREF=sub_3f00+980
00000000000042c3         jbe        loc_42c9

00000000000042c5         mov        byte [r14+r15], al

                     loc_42c9:
00000000000042c9         add        r15, 0x1                                    ; CODE XREF=sub_3f00+963
00000000000042cd         movzx      eax, byte [rdx+r15]
00000000000042d2         test       al, al
00000000000042d4         jne        loc_42c0

00000000000042d6         jmp        loc_40ec

                     loc_42db:
00000000000042db         mov        eax, edx                                    ; CODE XREF=sub_3a30+682
00000000000042dd         jmp        loc_3837

                     loc_42e2:
00000000000042e2         movzx      ebx, byte [rax+rcx]                         ; CODE XREF=sub_3a30+290
00000000000042e6         cmp        bl, 0x3e
00000000000042e9         ja         loc_3b60

00000000000042ef         movabs     rax, 0x7000a38200000000
00000000000042f9         bt         rax, rbx
00000000000042fd         jae        loc_3b60

0000000000004303         cmp        byte [rsp+arg_7], 0x0
0000000000004308         jne        loc_44f2

000000000000430e         cmp        r13, r15
0000000000004311         jbe        loc_4318

0000000000004313         mov        byte [r14+r15], 0x3f

                     loc_4318:
0000000000004318         lea        rax, qword [r15+1]                          ; CODE XREF=sub_3f00+1041
000000000000431c         cmp        r13, rax
000000000000431f         jbe        loc_4327

0000000000004321         mov        byte [r14+r15+1], 0x22

                     loc_4327:
0000000000004327         lea        rax, qword [r15+2]                          ; CODE XREF=sub_3f00+1055
000000000000432b         cmp        r13, rax
000000000000432e         jbe        loc_4336

0000000000004330         mov        byte [r14+r15+2], 0x22

                     loc_4336:
0000000000004336         lea        rax, qword [r15+3]                          ; CODE XREF=sub_3f00+1070
000000000000433a         cmp        r13, rax
000000000000433d         jbe        loc_4345

000000000000433f         mov        byte [r14+r15+3], 0x3f

                     loc_4345:
0000000000004345         add        r15, 0x4                                    ; CODE XREF=sub_3f00+1085
0000000000004349         xor        edx, edx
000000000000434b         xor        r12d, r12d
000000000000434e         xor        eax, eax
0000000000004350         mov        rbp, rcx
0000000000004353         jmp        sub_34e0+56
                        ; endp

                     loc_4358:
0000000000004358         test       ebx, ebx                                    ; case 2, CODE XREF=quotearg_buffer_restyled+145
000000000000435a         je         loc_44e8

0000000000004360         lea        rax, qword [aLibs+29]                       ; 0x146dd
0000000000004367         mov        byte [rsp+0xe8+var_DA], 0x1
000000000000436c         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000004371         xor        r12d, r12d
0000000000004374         mov        qword [rsp+0xe8+var_98], 0x0
000000000000437d         mov        byte [rsp+0xe8+var_D9], 0x1
0000000000004382         mov        byte [rsp+0xe8+var_DB], 0x0
0000000000004387         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000004390         xor        r15d, r15d
0000000000004393         mov        qword [rsp+0xe8+var_A0], rax
0000000000004398         jmp        loc_33c3
000000000000439d         align      32

                     loc_43a0:
00000000000043a0         mov        rbp, r11                                    ; CODE XREF=sub_3a30+333
00000000000043a3         movzx      eax, byte [rsp+arg_7]
00000000000043a8         jmp        sub_3a30+1097
                        ; endp

                     loc_43ad:
00000000000043ad         lea        rax, qword [aLibs+27]                       ; 0x146db, CODE XREF=sub_3f00+178
00000000000043b4         mov        byte [rsp+0xe8+var_DA], 0x1
00000000000043b9         mov        byte [rsp+0xe8+var_6C], 0x0
00000000000043be         xor        r12d, r12d
00000000000043c1         mov        qword [rsp+0xe8+var_98], 0x0
00000000000043ca         mov        byte [rsp+0xe8+var_D9], 0x1
00000000000043cf         mov        byte [rsp+0xe8+var_DB], 0x1
00000000000043d4         mov        qword [rsp+0xe8+var_D0], 0x1
00000000000043dd         xor        r15d, r15d
00000000000043e0         mov        qword [rsp+0xe8+var_A0], rax
00000000000043e5         jmp        loc_33c3

                     loc_43ea:
00000000000043ea         mov        eax, edx                                    ; CODE XREF=sub_3a30+87

                     loc_43ec:
00000000000043ec         mov        rbx, qword [rsp+0xe8+var_A0]                ; CODE XREF=sub_3a30+76, sub_3f00+1489
00000000000043f1         test       rbx, rbx
00000000000043f4         je         loc_4422

00000000000043f6         test       al, al
00000000000043f8         je         loc_4422

00000000000043fa         movzx      ecx, byte [rbx]
00000000000043fd         mov        rax, rbx
0000000000004400         test       cl, cl
0000000000004402         je         loc_4422

0000000000004404         mov        rdx, r15
0000000000004407         sub        rax, r15

                     loc_440a:
000000000000440a         cmp        r13, rdx                                    ; CODE XREF=sub_3f00+1309
000000000000440d         jbe        loc_4413

000000000000440f         mov        byte [r14+rdx], cl

                     loc_4413:
0000000000004413         add        rdx, 0x1                                    ; CODE XREF=sub_3f00+1293
0000000000004417         movzx      ecx, byte [rax+rdx]
000000000000441b         test       cl, cl
000000000000441d         jne        loc_440a

000000000000441f         mov        r15, rdx

                     loc_4422:
0000000000004422         cmp        r13, r15                                    ; CODE XREF=sub_3f00+1268, sub_3f00+1272, sub_3f00+1282
0000000000004425         jbe        loc_3ec9

000000000000442b         mov        byte [r14+r15], 0x0
0000000000004430         jmp        loc_3ec9

                     loc_4435:
0000000000004435         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=quotearg_buffer_restyled+450
000000000000443a         movzx      ebx, byte [rsp+0xe8+var_D9]
000000000000443f         mov        rbp, r11
0000000000004442         sete       al
0000000000004445         mov        byte [rsp+0xe8+var_DB], bl
0000000000004449         jmp        loc_3e79

                     loc_444e:
000000000000444e         mov        esi, dword [rsp+0xe8+var_E0]                ; CODE XREF=sub_3f00+432
0000000000004452         mov        rdi, rcx
0000000000004455         call       gettext_quote.part.1                        ; gettext_quote.part.1
000000000000445a         mov        qword [rsp+0xe8+var_80], rax
000000000000445f         jmp        loc_40b6

                     loc_4464:
0000000000004464         mov        esi, dword [rsp+0xe8+var_E0]                ; CODE XREF=sub_3f00+475
0000000000004468         mov        rdi, rcx
000000000000446b         call       gettext_quote.part.1                        ; gettext_quote.part.1
0000000000004470         mov        qword [rsp+0xe8+var_88], rax
0000000000004475         jmp        loc_40e1

                     loc_447a:
000000000000447a         movzx      ebx, byte [rsp+arg_7]                       ; CODE XREF=sub_38d0+16
000000000000447f         mov        rbp, r11
0000000000004482         mov        eax, edx
0000000000004484         mov        byte [rsp+arg_5], bl
0000000000004488         jmp        sub_3a30+1097
                        ; endp

                     loc_448d:
000000000000448d         sub        rsp, 0x8                                    ; CODE XREF=sub_3a30+98
0000000000004491         mov        r8d, 0x5
0000000000004497         mov        rcx, r11
000000000000449a         push       qword [rsp+0xf0+var_88]
000000000000449e         push       qword [rsp+0xf8+var_80]
00000000000044a2         mov        rdi, r14
00000000000044a5         push       qword [rsp+0x100+var_C8]
00000000000044a9         mov        r9d, dword [rsp+0x108+var_70]
00000000000044b1         mov        rdx, qword [rsp+0x108+var_D8]
00000000000044b6         mov        rsi, qword [rsp+0x108+var_98]
00000000000044bb         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
00000000000044c0         add        rsp, 0x20
00000000000044c4         mov        r15, rax
00000000000044c7         jmp        loc_3ec9

                     loc_44cc:
00000000000044cc         movzx      eax, byte [rsp+0xe8+var_6C]                 ; CODE XREF=sub_3a30+121
00000000000044d1         jmp        loc_43ec

                     loc_44d6:
00000000000044d6         mov        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_3a30+63
00000000000044de         jmp        loc_3e79

                     loc_44e3:
00000000000044e3         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=sub_3a30+1197
                        ; endp

                     loc_44e8:
00000000000044e8         mov        byte [rsp+0xe8+var_DB], 0x0                 ; CODE XREF=sub_3f00+1114
00000000000044ed         jmp        loc_3f61

                     loc_44f2:
00000000000044f2         mov        rbp, r11                                    ; CODE XREF=sub_3f00+1032
00000000000044f5         jmp        sub_3a30+1120
                        ; endp

                     loc_44fa:
00000000000044fa         mov        byte [rsp+0xe8+var_DA], 0x1                 ; CODE XREF=sub_3f00+100
00000000000044ff         xor        eax, eax
0000000000004501         xor        r12d, r12d
0000000000004504         mov        qword [rsp+0xe8+var_98], 0x0
000000000000450d         jmp        loc_3ab4

                     loc_4512:
0000000000004512         mov        rdx, r13                                    ; CODE XREF=sub_3f00+32
0000000000004515         mov        r13, qword [rsp+arg_48]
000000000000451a         jmp        loc_3b12

                     loc_451f:
000000000000451f         call       j_abort                                     ; abort, CODE XREF=quotearg_buffer_restyled+122
                        ; endp
0000000000004524         align      16                                          ; End of unwind block (FDE at 0x16008)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_3C: int32_t, -60
        ;    var_40: int32_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80


                     quotearg_n_options:
0000000000004530         push       r15                                         ; Begin of unwind block (FDE at 0x16080), CODE XREF=quotearg_n+14, quotearg_n_mem+7, quotearg+19, quotearg_mem+15, quotearg_n_style+106, quotearg_n_style_mem+102, quotearg_char_mem+121, quotearg_n_style_colon+106, quotearg_n_custom_mem+109, quote_n_mem+7, quote_mem+15
0000000000004532         push       r14
0000000000004534         movsxd     r15, edi
0000000000004537         push       r13
0000000000004539         push       r12
000000000000453b         mov        r14, rdx
000000000000453e         push       rbp
000000000000453f         push       rbx
0000000000004540         mov        rbp, rcx
0000000000004543         sub        rsp, 0x28
0000000000004547         mov        qword [rsp+0x58+var_50], rsi
000000000000454c         call       j___errno_location                          ; __errno_location
0000000000004551         mov        r13, rax
0000000000004554         mov        eax, dword [rax]
0000000000004556         test       r15d, r15d
0000000000004559         mov        rbx, qword [slotvec]                        ; slotvec
0000000000004560         mov        dword [rsp+0x58+var_40], eax
0000000000004564         js         loc_46d1

000000000000456a         cmp        dword [nslots], r15d                        ; nslots
0000000000004571         jg         loc_45d5

0000000000004573         cmp        r15d, 0x7fffffff
000000000000457a         je         loc_46d6

0000000000004580         lea        r12d, dword [r15+1]
0000000000004584         lea        rax, qword [slotvec0]                       ; slotvec0
000000000000458b         movsxd     rsi, r12d
000000000000458e         shl        rsi, 0x4
0000000000004592         cmp        rbx, rax
0000000000004595         je         loc_46b0

000000000000459b         mov        rdi, rbx                                    ; argument #1 for method xrealloc
000000000000459e         call       xrealloc                                    ; xrealloc
00000000000045a3         mov        rbx, rax
00000000000045a6         mov        qword [slotvec], rax                        ; slotvec

                     loc_45ad:
00000000000045ad         movsxd     rdi, dword [nslots]                         ; nslots, CODE XREF=quotearg_n_options+412
00000000000045b4         mov        edx, r12d
00000000000045b7         xor        esi, esi                                    ; argument "__c" for method j_memset
00000000000045b9         sub        edx, edi
00000000000045bb         shl        rdi, 0x4
00000000000045bf         movsxd     rdx, edx
00000000000045c2         add        rdi, rbx                                    ; argument "__s" for method j_memset
00000000000045c5         shl        rdx, 0x4                                    ; argument "__n" for method j_memset
00000000000045c9         call       j_memset                                    ; memset
00000000000045ce         mov        dword [nslots], r12d                        ; nslots

                     loc_45d5:
00000000000045d5         mov        eax, dword [rbp+4]                          ; CODE XREF=quotearg_n_options+65
00000000000045d8         shl        r15, 0x4
00000000000045dc         sub        rsp, 0x8
00000000000045e0         add        rbx, r15
00000000000045e3         lea        r15, qword [rbp+8]
00000000000045e7         mov        r8d, dword [rbp]                            ; argument #5 for method quotearg_buffer_restyled
00000000000045eb         mov        r11, qword [rbx]
00000000000045ee         mov        r12, qword [rbx+8]
00000000000045f2         mov        rcx, r14                                    ; argument #4 for method quotearg_buffer_restyled
00000000000045f5         or         eax, 0x1
00000000000045f8         mov        dword [rsp+0x60+var_3C], eax
00000000000045fc         push       qword [rbp+0x30]                            ; argument #9 for method quotearg_buffer_restyled
00000000000045ff         mov        r9d, eax                                    ; argument #6 for method quotearg_buffer_restyled
0000000000004602         push       qword [rbp+0x28]                            ; argument #8 for method quotearg_buffer_restyled
0000000000004605         push       r15                                         ; argument #7 for method quotearg_buffer_restyled
0000000000004607         mov        rsi, r11                                    ; argument #2 for method quotearg_buffer_restyled
000000000000460a         mov        rdx, qword [rsp+0x78+var_50]                ; argument #3 for method quotearg_buffer_restyled
000000000000460f         mov        rdi, r12                                    ; argument #1 for method quotearg_buffer_restyled
0000000000004612         mov        qword [rsp+0x78+var_48], r11
0000000000004617         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
000000000000461c         add        rsp, 0x20
0000000000004620         mov        r11, qword [rsp+0x58+var_48]
0000000000004625         cmp        r11, rax
0000000000004628         ja         loc_4691

000000000000462a         lea        rsi, qword [rax+1]
000000000000462e         lea        rax, qword [slot0]                          ; slot0
0000000000004635         cmp        r12, rax
0000000000004638         mov        qword [rbx], rsi
000000000000463b         je         loc_464f

000000000000463d         mov        rdi, r12                                    ; argument "__ptr" for method j_free
0000000000004640         mov        qword [rsp+0x58+var_48], rsi
0000000000004645         call       j_free                                      ; free
000000000000464a         mov        rsi, qword [rsp+0x58+var_48]

                     loc_464f:
000000000000464f         mov        rdi, rsi                                    ; argument #1 for method xmalloc, CODE XREF=quotearg_n_options+267
0000000000004652         mov        qword [rsp+0x58+var_48], rsi
0000000000004657         call       xmalloc                                     ; xmalloc
000000000000465c         sub        rsp, 0x8
0000000000004660         mov        qword [rbx+8], rax
0000000000004664         mov        r8d, dword [rbp]                            ; argument #5 for method quotearg_buffer_restyled
0000000000004668         push       qword [rbp+0x30]                            ; argument #9 for method quotearg_buffer_restyled
000000000000466b         push       qword [rbp+0x28]                            ; argument #8 for method quotearg_buffer_restyled
000000000000466e         mov        rcx, r14                                    ; argument #4 for method quotearg_buffer_restyled
0000000000004671         push       r15                                         ; argument #7 for method quotearg_buffer_restyled
0000000000004673         mov        r9d, dword [rsp+0x78+var_3C]                ; argument #6 for method quotearg_buffer_restyled
0000000000004678         mov        rdi, rax                                    ; argument #1 for method quotearg_buffer_restyled
000000000000467b         mov        rdx, qword [rsp+0x78+var_50]                ; argument #3 for method quotearg_buffer_restyled
0000000000004680         mov        rsi, qword [rsp+0x78+var_48]                ; argument #2 for method quotearg_buffer_restyled
0000000000004685         mov        r12, rax
0000000000004688         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
000000000000468d         add        rsp, 0x20

                     loc_4691:
0000000000004691         mov        eax, dword [rsp+0x58+var_40]                ; CODE XREF=quotearg_n_options+248
0000000000004695         mov        dword [r13], eax
0000000000004699         add        rsp, 0x28
000000000000469d         mov        rax, r12
00000000000046a0         pop        rbx
00000000000046a1         pop        rbp
00000000000046a2         pop        r12
00000000000046a4         pop        r13
00000000000046a6         pop        r14
00000000000046a8         pop        r15
00000000000046aa         ret
                        ; endp
00000000000046ab         align      16

                     loc_46b0:
00000000000046b0         xor        edi, edi                                    ; argument #1 for method xrealloc, CODE XREF=quotearg_n_options+101
00000000000046b2         call       xrealloc                                    ; xrealloc
00000000000046b7         movdqa     xmm0, xmmword [slotvec0]                    ; slotvec0
00000000000046bf         mov        rbx, rax
00000000000046c2         mov        qword [slotvec], rax                        ; slotvec
00000000000046c9         movups     xmmword [rax], xmm0
00000000000046cc         jmp        loc_45ad

                     loc_46d1:
00000000000046d1         call       j_abort                                     ; abort, CODE XREF=quotearg_n_options+52
                        ; endp

                     loc_46d6:
00000000000046d6         call       xalloc_die                                  ; xalloc_die, CODE XREF=quotearg_n_options+74
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_46db:
00000000000046db         nop        dword [rax+rax]                             ; End of unwind block (FDE at 0x16080)
                     clone_quoting_options:
00000000000046e0         push       r12                                         ; Begin of unwind block (FDE at 0x160ec)
00000000000046e2         push       rbp
00000000000046e3         push       rbx
00000000000046e4         mov        rbx, rdi
00000000000046e7         call       j___errno_location                          ; __errno_location
00000000000046ec         mov        r12d, dword [rax]
00000000000046ef         mov        rbp, rax
00000000000046f2         lea        rax, qword [default_quoting_options]        ; default_quoting_options
00000000000046f9         test       rbx, rbx
00000000000046fc         mov        esi, 0x38                                   ; argument #2 for method xmemdup
0000000000004701         cmove      rbx, rax
0000000000004705         mov        rdi, rbx                                    ; argument #1 for method xmemdup
0000000000004708         call       xmemdup                                     ; xmemdup
000000000000470d         mov        dword [rbp], r12d
0000000000004711         pop        rbx
0000000000004712         pop        rbp
0000000000004713         pop        r12
0000000000004715         ret
                        ; endp
0000000000004716         align      32                                          ; End of unwind block (FDE at 0x160ec)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     get_quoting_style:
0000000000004720         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x16118), default_quoting_options
0000000000004727         test       rdi, rdi
000000000000472a         cmove      rdi, rax
000000000000472e         mov        eax, dword [rdi]
0000000000004730         ret
                        ; endp
0000000000004731         align      64                                          ; End of unwind block (FDE at 0x16118)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_quoting_style:
0000000000004740         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x1612c), default_quoting_options
0000000000004747         test       rdi, rdi
000000000000474a         cmove      rdi, rax
000000000000474e         mov        dword [rdi], esi
0000000000004750         ret
                        ; endp
0000000000004751         align      32                                          ; End of unwind block (FDE at 0x1612c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_char_quoting:
0000000000004760         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x16140), default_quoting_options
0000000000004767         test       rdi, rdi
000000000000476a         mov        ecx, esi
000000000000476c         cmove      rdi, rax
0000000000004770         mov        eax, esi
0000000000004772         and        ecx, 0x1f
0000000000004775         shr        al, 0x5
0000000000004778         movzx      eax, al
000000000000477b         lea        rdi, qword [rdi+rax*4+8]
0000000000004780         mov        esi, dword [rdi]
0000000000004782         mov        eax, esi
0000000000004784         shr        eax, cl
0000000000004786         xor        edx, eax
0000000000004788         and        eax, 0x1
000000000000478b         and        edx, 0x1
000000000000478e         shl        edx, cl
0000000000004790         xor        edx, esi
0000000000004792         mov        dword [rdi], edx
0000000000004794         ret
                        ; endp
0000000000004795         align      32                                          ; End of unwind block (FDE at 0x16140)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_quoting_flags:
00000000000047a0         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x16154), default_quoting_options
00000000000047a7         test       rdi, rdi
00000000000047aa         cmove      rdi, rax
00000000000047ae         mov        eax, dword [rdi+4]
00000000000047b1         mov        dword [rdi+4], esi
00000000000047b4         ret
                        ; endp
00000000000047b5         align      64                                          ; End of unwind block (FDE at 0x16154)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_custom_quoting:
00000000000047c0         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x16168), default_quoting_options
00000000000047c7         test       rdi, rdi
00000000000047ca         cmove      rdi, rax
00000000000047ce         test       rsi, rsi
00000000000047d1         mov        dword [rdi], 0xa
00000000000047d7         je         loc_47e7

00000000000047d9         test       rdx, rdx
00000000000047dc         je         loc_47e7

00000000000047de         mov        qword [rdi+0x28], rsi
00000000000047e2         mov        qword [rdi+0x30], rdx
00000000000047e6         ret
                        ; endp

                     loc_47e7:
00000000000047e7         sub        rsp, 0x8                                    ; CODE XREF=set_custom_quoting+23, set_custom_quoting+28
00000000000047eb         call       j_abort                                     ; abort
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64


                     quotearg_buffer:
00000000000047f0         push       r15                                         ; End of unwind block (FDE at 0x16168), Begin of unwind block (FDE at 0x1617c)
00000000000047f2         push       r14
00000000000047f4         lea        rax, qword [default_quoting_options]        ; default_quoting_options
00000000000047fb         push       r13
00000000000047fd         push       r12
00000000000047ff         mov        r13, rdi
0000000000004802         push       rbp
0000000000004803         push       rbx
0000000000004804         mov        rbx, r8
0000000000004807         mov        r14, rsi
000000000000480a         mov        r15, rdx
000000000000480d         sub        rsp, 0x18
0000000000004811         test       r8, r8
0000000000004814         cmove      rbx, rax
0000000000004818         mov        qword [rsp+0x48+var_40], rcx
000000000000481d         call       j___errno_location                          ; __errno_location
0000000000004822         mov        r12d, dword [rax]
0000000000004825         mov        rbp, rax
0000000000004828         lea        rax, qword [rbx+8]
000000000000482c         sub        rsp, 0x8
0000000000004830         mov        r9d, dword [rbx+4]
0000000000004834         push       qword [rbx+0x30]
0000000000004837         mov        r8d, dword [rbx]
000000000000483a         push       qword [rbx+0x28]
000000000000483d         mov        rdx, r15
0000000000004840         push       rax
0000000000004841         mov        rcx, qword [rsp+0x68+var_40]
0000000000004846         mov        rsi, r14
0000000000004849         mov        rdi, r13
000000000000484c         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000004851         mov        dword [rbp], r12d
0000000000004855         add        rsp, 0x38
0000000000004859         pop        rbx
000000000000485a         pop        rbp
000000000000485b         pop        r12
000000000000485d         pop        r13
000000000000485f         pop        r14
0000000000004861         pop        r15
0000000000004863         ret
                        ; endp
0000000000004864         align      16                                          ; End of unwind block (FDE at 0x1617c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_5C: int32_t, -92


                     quotearg_alloc_mem:
0000000000004870         push       r15                                         ; Begin of unwind block (FDE at 0x161d0), CODE XREF=quotearg_alloc+5
0000000000004872         push       r14
0000000000004874         lea        rax, qword [default_quoting_options]        ; default_quoting_options
000000000000487b         push       r13
000000000000487d         push       r12
000000000000487f         mov        r12, rdx
0000000000004882         push       rbp
0000000000004883         push       rbx
0000000000004884         mov        rbx, rcx
0000000000004887         mov        r14, rdi
000000000000488a         mov        r15, rsi
000000000000488d         sub        rsp, 0x38
0000000000004891         test       rcx, rcx
0000000000004894         cmove      rbx, rax
0000000000004898         xor        ebp, ebp
000000000000489a         call       j___errno_location                          ; __errno_location
000000000000489f         test       r12, r12
00000000000048a2         mov        r13, rax
00000000000048a5         mov        eax, dword [rax]
00000000000048a7         sete       bpl
00000000000048ab         or         ebp, dword [rbx+4]
00000000000048ae         lea        r10, qword [rbx+8]
00000000000048b2         sub        rsp, 0x8
00000000000048b6         mov        r8d, dword [rbx]
00000000000048b9         mov        rcx, r15
00000000000048bc         mov        dword [rsp+0x70+var_5C], eax
00000000000048c0         push       qword [rbx+0x30]
00000000000048c3         mov        rdx, r14
00000000000048c6         push       qword [rbx+0x28]
00000000000048c9         push       r10
00000000000048cb         xor        esi, esi
00000000000048cd         mov        r9d, ebp
00000000000048d0         xor        edi, edi
00000000000048d2         mov        qword [rsp+0x88+var_48], r10
00000000000048d7         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
00000000000048dc         lea        rsi, qword [rax+1]
00000000000048e0         mov        qword [rsp+0x88+var_40], rax
00000000000048e5         add        rsp, 0x20
00000000000048e9         mov        rdi, rsi
00000000000048ec         mov        qword [rsp+0x68+var_50], rsi
00000000000048f1         call       xmalloc                                     ; xmalloc
00000000000048f6         mov        qword [rsp+0x68+var_58], rax
00000000000048fb         sub        rsp, 0x8
00000000000048ff         push       qword [rbx+0x30]
0000000000004902         push       qword [rbx+0x28]
0000000000004905         mov        r10, qword [rsp+0x80+var_48]
000000000000490a         mov        r9d, ebp
000000000000490d         mov        r8d, dword [rbx]
0000000000004910         mov        rcx, r15
0000000000004913         mov        rdx, r14
0000000000004916         mov        rdi, rax
0000000000004919         push       r10
000000000000491b         mov        rsi, qword [rsp+0x88+var_50]
0000000000004920         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000004925         mov        eax, dword [rsp+0x88+var_5C]
0000000000004929         add        rsp, 0x20
000000000000492d         test       r12, r12
0000000000004930         mov        dword [r13], eax
0000000000004934         je         loc_493f

0000000000004936         mov        r11, qword [rsp+0x68+var_40]
000000000000493b         mov        qword [r12], r11

                     loc_493f:
000000000000493f         mov        rax, qword [rsp+0x68+var_58]                ; CODE XREF=quotearg_alloc_mem+196
0000000000004944         add        rsp, 0x38
0000000000004948         pop        rbx
0000000000004949         pop        rbp
000000000000494a         pop        r12
000000000000494c         pop        r13
000000000000494e         pop        r14
0000000000004950         pop        r15
0000000000004952         ret
                        ; endp
0000000000004953         align      32                                          ; End of unwind block (FDE at 0x161d0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_alloc:
0000000000004960         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0x1623c)
0000000000004963         xor        edx, edx
0000000000004965         jmp        quotearg_alloc_mem                          ; quotearg_alloc_mem
                        ; endp
000000000000496a         align      16                                          ; End of unwind block (FDE at 0x1623c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_free:
0000000000004970         mov        eax, dword [nslots]                         ; Begin of unwind block (FDE at 0x16250), nslots
0000000000004976         push       r12
0000000000004978         mov        r12, qword [slotvec]                        ; slotvec
000000000000497f         push       rbp
0000000000004980         push       rbx
0000000000004981         cmp        eax, 0x1
0000000000004984         jle        loc_49b1

0000000000004986         sub        eax, 0x2
0000000000004989         lea        rbx, qword [r12+0x18]
000000000000498e         shl        rax, 0x4
0000000000004992         lea        rbp, qword [r12+rax+0x28]
0000000000004997         nop        word [rax+rax]

                     loc_49a0:
00000000000049a0         mov        rdi, qword [rbx]                            ; argument "__ptr" for method j_free, CODE XREF=quotearg_free+63
00000000000049a3         add        rbx, 0x10
00000000000049a7         call       j_free                                      ; free
00000000000049ac         cmp        rbx, rbp
00000000000049af         jne        loc_49a0

                     loc_49b1:
00000000000049b1         mov        rdi, qword [r12+8]                          ; CODE XREF=quotearg_free+20
00000000000049b6         lea        rbx, qword [slot0]                          ; slot0
00000000000049bd         cmp        rdi, rbx
00000000000049c0         je         loc_49d9

00000000000049c2         call       j_free                                      ; free
00000000000049c7         mov        qword [slotvec0], 0x100                     ; slotvec0
00000000000049d2         mov        qword [slotvec0+8], rbx                     ; 0x219078

                     loc_49d9:
00000000000049d9         lea        rbx, qword [slotvec0]                       ; slotvec0, CODE XREF=quotearg_free+80
00000000000049e0         cmp        r12, rbx
00000000000049e3         je         loc_49f4

00000000000049e5         mov        rdi, r12                                    ; argument "__ptr" for method j_free
00000000000049e8         call       j_free                                      ; free
00000000000049ed         mov        qword [slotvec], rbx                        ; slotvec

                     loc_49f4:
00000000000049f4         pop        rbx                                         ; CODE XREF=quotearg_free+115
00000000000049f5         mov        dword [nslots], 0x1                         ; nslots
00000000000049ff         pop        rbp
0000000000004a00         pop        r12
0000000000004a02         ret
                        ; endp
0000000000004a03         align      16                                          ; End of unwind block (FDE at 0x16250)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_n:
0000000000004a10         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x1627c), default_quoting_options
0000000000004a17         mov        rdx, 0xffffffffffffffff
0000000000004a1e         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000004a23         align      16                                          ; End of unwind block (FDE at 0x1627c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_n_mem:
0000000000004a30         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x16290), default_quoting_options
0000000000004a37         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000004a3c         align      64                                          ; End of unwind block (FDE at 0x16290)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg:
0000000000004a40         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x162a4), default_quoting_options
0000000000004a47         mov        rsi, rdi
0000000000004a4a         mov        rdx, 0xffffffffffffffff
0000000000004a51         xor        edi, edi
0000000000004a53         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000004a58         align      32                                          ; End of unwind block (FDE at 0x162a4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_mem:
0000000000004a60         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x162b8), default_quoting_options
0000000000004a67         mov        rdx, rsi
0000000000004a6a         mov        rsi, rdi
0000000000004a6d         xor        edi, edi
0000000000004a6f         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000004a74         align      128                                         ; End of unwind block (FDE at 0x162b8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_n_style:
0000000000004a80         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0x162cc)
0000000000004a84         mov        rax, rdx
0000000000004a87         mov        rdx, qword [fs:0x28]
0000000000004a90         mov        qword [rsp+0x48+var_10], rdx
0000000000004a95         xor        edx, edx
0000000000004a97         cmp        esi, 0xa
0000000000004a9a         je         loc_4b04

0000000000004a9c         mov        dword [rsp+0x48+var_48], esi
0000000000004a9f         mov        rcx, rsp
0000000000004aa2         mov        rdx, 0xffffffffffffffff
0000000000004aa9         mov        rsi, rax
0000000000004aac         mov        qword [rsp+0x48+var_44], 0x0
0000000000004ab5         mov        qword [rsp+0x48+var_3C], 0x0
0000000000004abe         mov        qword [rsp+0x48+var_34], 0x0
0000000000004ac7         mov        qword [rsp+0x48+var_2C], 0x0
0000000000004ad0         mov        qword [rsp+0x48+var_24], 0x0
0000000000004ad9         mov        qword [rsp+0x48+var_1C], 0x0
0000000000004ae2         mov        dword [rsp+0x48+var_14], 0x0
0000000000004aea         call       quotearg_n_options                          ; quotearg_n_options
0000000000004aef         mov        rcx, qword [rsp+0x48+var_10]
0000000000004af4         xor        rcx, qword [fs:0x28]
0000000000004afd         jne        loc_4b09

0000000000004aff         add        rsp, 0x48
0000000000004b03         ret
                        ; endp

                     loc_4b04:
0000000000004b04         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style+26
                        ; endp

                     loc_4b09:
0000000000004b09         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style+125
                        ; endp
0000000000004b0e         align      16                                          ; End of unwind block (FDE at 0x162cc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_n_style_mem:
0000000000004b10         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0x162e8), CODE XREF=quotearg_style_mem+10
0000000000004b14         mov        rax, rdx
0000000000004b17         mov        rdx, rcx
0000000000004b1a         mov        rcx, qword [fs:0x28]
0000000000004b23         mov        qword [rsp+0x48+var_10], rcx
0000000000004b28         xor        ecx, ecx
0000000000004b2a         cmp        esi, 0xa
0000000000004b2d         je         loc_4b90

0000000000004b2f         mov        dword [rsp+0x48+var_48], esi
0000000000004b32         mov        rcx, rsp
0000000000004b35         mov        rsi, rax
0000000000004b38         mov        qword [rsp+0x48+var_44], 0x0
0000000000004b41         mov        qword [rsp+0x48+var_3C], 0x0
0000000000004b4a         mov        qword [rsp+0x48+var_34], 0x0
0000000000004b53         mov        qword [rsp+0x48+var_2C], 0x0
0000000000004b5c         mov        qword [rsp+0x48+var_24], 0x0
0000000000004b65         mov        qword [rsp+0x48+var_1C], 0x0
0000000000004b6e         mov        dword [rsp+0x48+var_14], 0x0
0000000000004b76         call       quotearg_n_options                          ; quotearg_n_options
0000000000004b7b         mov        rdx, qword [rsp+0x48+var_10]
0000000000004b80         xor        rdx, qword [fs:0x28]
0000000000004b89         jne        loc_4b95

0000000000004b8b         add        rsp, 0x48
0000000000004b8f         ret
                        ; endp

                     loc_4b90:
0000000000004b90         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style_mem+29
                        ; endp

                     loc_4b95:
0000000000004b95         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style_mem+121
                        ; endp
0000000000004b9a         align      32                                          ; End of unwind block (FDE at 0x162e8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_style:
0000000000004ba0         mov        rdx, rsi                                    ; Begin of unwind block (FDE at 0x16304), CODE XREF=main+1147, main+1236, main+1657, main+1747
0000000000004ba3         mov        esi, edi
0000000000004ba5         xor        edi, edi
0000000000004ba7         jmp        quotearg_n_style                            ; quotearg_n_style
                        ; endp
0000000000004bac         align      16                                          ; End of unwind block (FDE at 0x16304)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_style_mem:
0000000000004bb0         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0x16318)
0000000000004bb3         mov        rdx, rsi
0000000000004bb6         mov        esi, edi
0000000000004bb8         xor        edi, edi
0000000000004bba         jmp        quotearg_n_style_mem                        ; quotearg_n_style_mem
                        ; endp
0000000000004bbf         align      64                                          ; End of unwind block (FDE at 0x16318)

                     quotearg_char_mem:
0000000000004bc0         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0x1632c), CODE XREF=quotearg_char+11
0000000000004bc4         mov        ecx, edx
0000000000004bc6         mov        rax, qword [fs:0x28]
0000000000004bcf         mov        qword [rsp+0x48+var_10], rax
0000000000004bd4         xor        eax, eax
0000000000004bd6         mov        rax, qword [qword_21b3f0]                   ; qword_21b3f0
0000000000004bdd         mov        r8, rsp
0000000000004be0         and        ecx, 0x1f
0000000000004be3         movdqa     xmm0, xmmword [default_quoting_options]     ; default_quoting_options
0000000000004beb         mov        qword [rsp+0x48+var_18], rax
0000000000004bf0         mov        eax, edx
0000000000004bf2         movaps     xmmword [rsp+0x48+var_48], xmm0
0000000000004bf6         shr        al, 0x5
0000000000004bf9         movzx      eax, al
0000000000004bfc         lea        r9, qword [r8+rax*4+8]
0000000000004c01         movdqa     xmm0, xmmword [default_quoting_options+16]  ; 0x21b3d0
0000000000004c09         movaps     xmmword [rsp+0x48+var_38], xmm0
0000000000004c0e         movdqa     xmm0, xmmword [default_quoting_options+32]  ; 0x21b3e0
0000000000004c16         movaps     xmmword [rsp+0x48+var_28], xmm0
0000000000004c1b         mov        edx, dword [r9]
0000000000004c1e         mov        eax, edx
0000000000004c20         shr        eax, cl
0000000000004c22         not        eax
0000000000004c24         and        eax, 0x1
0000000000004c27         shl        eax, cl
0000000000004c29         mov        rcx, r8
0000000000004c2c         xor        eax, edx
0000000000004c2e         mov        rdx, rsi
0000000000004c31         mov        rsi, rdi
0000000000004c34         mov        dword [r9], eax
0000000000004c37         xor        edi, edi
0000000000004c39         call       quotearg_n_options                          ; quotearg_n_options
0000000000004c3e         mov        rsi, qword [rsp+0x48+var_10]
0000000000004c43         xor        rsi, qword [fs:0x28]
0000000000004c4c         jne        loc_4c53

0000000000004c4e         add        rsp, 0x48
0000000000004c52         ret
                        ; endp

                     loc_4c53:
0000000000004c53         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_char_mem+140
                        ; endp
0000000000004c58         align      32                                          ; End of unwind block (FDE at 0x1632c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24
        ;    var_28: -40
        ;    var_38: -56
        ;    var_48: -72


                     quotearg_char:
0000000000004c60         movsx      edx, sil                                    ; Begin of unwind block (FDE at 0x16348)
0000000000004c64         mov        rsi, 0xffffffffffffffff
0000000000004c6b         jmp        quotearg_char_mem                           ; quotearg_char_mem


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_colon:
0000000000004c70         mov        edx, 0x3a                                   ; End of unwind block (FDE at 0x16348), Begin of unwind block (FDE at 0x1635c), CODE XREF=close_stdout+101
0000000000004c75         mov        rsi, 0xffffffffffffffff
0000000000004c7c         jmp        quotearg_char_mem                           ; quotearg_char_mem
                        ; endp
0000000000004c81         align      16                                          ; End of unwind block (FDE at 0x1635c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_colon_mem:
0000000000004c90         mov        edx, 0x3a                                   ; Begin of unwind block (FDE at 0x16370)
0000000000004c95         jmp        quotearg_char_mem                           ; quotearg_char_mem
                        ; endp
0000000000004c9a         align      32                                          ; End of unwind block (FDE at 0x16370)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_n_style_colon:
0000000000004ca0         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0x16384), CODE XREF=main+1320, main+1352, main+1389, tac_seekable+179, tac_seekable+1060, tac_seekable+1129, tac_seekable+1291
0000000000004ca4         mov        rax, rdx
0000000000004ca7         mov        rdx, qword [fs:0x28]
0000000000004cb0         mov        qword [rsp+0x48+var_10], rdx
0000000000004cb5         xor        edx, edx
0000000000004cb7         cmp        esi, 0xa
0000000000004cba         je         loc_4d24

0000000000004cbc         mov        dword [rsp+0x48+var_48], esi
0000000000004cbf         mov        rcx, rsp
0000000000004cc2         mov        rdx, 0xffffffffffffffff
0000000000004cc9         mov        rsi, rax
0000000000004ccc         mov        qword [rsp+0x48+var_44], 0x0
0000000000004cd5         mov        qword [rsp+0x48+var_3C], 0x4000000
0000000000004cde         mov        qword [rsp+0x48+var_34], 0x0
0000000000004ce7         mov        qword [rsp+0x48+var_2C], 0x0
0000000000004cf0         mov        qword [rsp+0x48+var_24], 0x0
0000000000004cf9         mov        qword [rsp+0x48+var_1C], 0x0
0000000000004d02         mov        dword [rsp+0x48+var_14], 0x0
0000000000004d0a         call       quotearg_n_options                          ; quotearg_n_options
0000000000004d0f         mov        rcx, qword [rsp+0x48+var_10]
0000000000004d14         xor        rcx, qword [fs:0x28]
0000000000004d1d         jne        loc_4d29

0000000000004d1f         add        rsp, 0x48
0000000000004d23         ret
                        ; endp

                     loc_4d24:
0000000000004d24         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style_colon+26
                        ; endp

                     loc_4d29:
0000000000004d29         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style_colon+125
                        ; endp
0000000000004d2e         align      16                                          ; End of unwind block (FDE at 0x16384)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24
        ;    var_20: int64_t, -32
        ;    var_28: -40
        ;    var_38: -56
        ;    var_48: int32_t, -72


                     quotearg_n_custom_mem:
0000000000004d30         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0x163a0), CODE XREF=quotearg_n_custom+7, quotearg_custom+18, quotearg_custom_mem+14
0000000000004d34         mov        r9, rcx
0000000000004d37         mov        rcx, qword [qword_21b3f0]                   ; qword_21b3f0
0000000000004d3e         movdqa     xmm0, xmmword [default_quoting_options]     ; default_quoting_options
0000000000004d46         mov        rax, qword [fs:0x28]
0000000000004d4f         mov        qword [rsp+0x48+var_10], rax
0000000000004d54         xor        eax, eax
0000000000004d56         movaps     xmmword [rsp+0x48+var_48], xmm0
0000000000004d5a         test       rsi, rsi
0000000000004d5d         mov        qword [rsp+0x48+var_18], rcx
0000000000004d62         mov        dword [rsp+0x48+var_48], 0xa
0000000000004d69         movdqa     xmm0, xmmword [default_quoting_options+16]  ; 0x21b3d0
0000000000004d71         movaps     xmmword [rsp+0x48+var_38], xmm0
0000000000004d76         movdqa     xmm0, xmmword [default_quoting_options+32]  ; 0x21b3e0
0000000000004d7e         movaps     xmmword [rsp+0x48+var_28], xmm0
0000000000004d83         je         loc_4db7

0000000000004d85         test       rdx, rdx
0000000000004d88         je         loc_4db7

0000000000004d8a         mov        qword [rsp+0x48+var_20], rsi
0000000000004d8f         mov        qword [rsp+0x48+var_18], rdx
0000000000004d94         mov        rcx, rsp
0000000000004d97         mov        rdx, r8
0000000000004d9a         mov        rsi, r9
0000000000004d9d         call       quotearg_n_options                          ; quotearg_n_options
0000000000004da2         mov        rdi, qword [rsp+0x48+var_10]
0000000000004da7         xor        rdi, qword [fs:0x28]
0000000000004db0         jne        loc_4dbc

0000000000004db2         add        rsp, 0x48
0000000000004db6         ret
                        ; endp

                     loc_4db7:
0000000000004db7         call       j_abort                                     ; abort, CODE XREF=quotearg_n_custom_mem+83, quotearg_n_custom_mem+88
                        ; endp

                     loc_4dbc:
0000000000004dbc         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_custom_mem+128
                        ; endp
0000000000004dc1         align      16                                          ; End of unwind block (FDE at 0x163a0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_n_custom:
0000000000004dd0         mov        r8, 0xffffffffffffffff                      ; Begin of unwind block (FDE at 0x163bc)
0000000000004dd7         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
                        ; endp
0000000000004ddc         align      32                                          ; End of unwind block (FDE at 0x163bc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_custom:
0000000000004de0         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0x163d0)
0000000000004de3         mov        r8, 0xffffffffffffffff
0000000000004dea         mov        rdx, rsi
0000000000004ded         mov        rsi, rdi
0000000000004df0         xor        edi, edi
0000000000004df2         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
                        ; endp
0000000000004df7         align      512                                         ; End of unwind block (FDE at 0x163d0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_custom_mem:
0000000000004e00         mov        r8, rcx                                     ; Begin of unwind block (FDE at 0x163e4)
0000000000004e03         mov        rcx, rdx
0000000000004e06         mov        rdx, rsi
0000000000004e09         mov        rsi, rdi
0000000000004e0c         xor        edi, edi
0000000000004e0e         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
                        ; endp
0000000000004e13         align      32                                          ; End of unwind block (FDE at 0x163e4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_n_mem:
0000000000004e20         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0x163f8), quote_quoting_options
0000000000004e27         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000004e2c         align      16                                          ; End of unwind block (FDE at 0x163f8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_mem:
0000000000004e30         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0x1640c), quote_quoting_options
0000000000004e37         mov        rdx, rsi
0000000000004e3a         mov        rsi, rdi
0000000000004e3d         xor        edi, edi
0000000000004e3f         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000004e44         align      16                                          ; End of unwind block (FDE at 0x1640c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_n:
0000000000004e50         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0x16420), quote_quoting_options
0000000000004e57         mov        rdx, 0xffffffffffffffff
0000000000004e5e         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000004e63         align      16                                          ; End of unwind block (FDE at 0x16420)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote:
0000000000004e70         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0x16434), quote_quoting_options
0000000000004e77         mov        rsi, rdi
0000000000004e7a         mov        rdx, 0xffffffffffffffff
0000000000004e81         xor        edi, edi
0000000000004e83         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000004e88         align      16                                          ; End of unwind block (FDE at 0x16434)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     safe_read:
0000000000004e90         push       r13                                         ; Begin of unwind block (FDE at 0x1644c), CODE XREF=main+989, tac_seekable+113, tac_seekable+295, tac_seekable+731
0000000000004e92         push       r12
0000000000004e94         mov        r13d, edi
0000000000004e97         push       rbp
0000000000004e98         push       rbx
0000000000004e99         mov        r12, rsi
0000000000004e9c         mov        rbx, rdx
0000000000004e9f         sub        rsp, 0x8
0000000000004ea3         nop        dword [rax+rax]

                     loc_4ea8:
0000000000004ea8         mov        rdx, rbx                                    ; argument "__nbytes" for method j_read, CODE XREF=safe_read+56, safe_read+77
0000000000004eab         mov        rsi, r12                                    ; argument "__buf" for method j_read
0000000000004eae         mov        edi, r13d                                   ; argument "__fd" for method j_read
0000000000004eb1         call       j_read                                      ; read
0000000000004eb6         test       rax, rax
0000000000004eb9         mov        rbp, rax
0000000000004ebc         jns        loc_4ee0

0000000000004ebe         call       j___errno_location                          ; __errno_location
0000000000004ec3         mov        eax, dword [rax]
0000000000004ec5         cmp        eax, 0x4
0000000000004ec8         je         loc_4ea8

0000000000004eca         cmp        rbx, 0x7ff00000
0000000000004ed1         jbe        loc_4ee0

0000000000004ed3         cmp        eax, 0x16
0000000000004ed6         jne        loc_4ee0

0000000000004ed8         mov        ebx, 0x7ff00000
0000000000004edd         jmp        loc_4ea8
0000000000004edf         align      32

                     loc_4ee0:
0000000000004ee0         add        rsp, 0x8                                    ; CODE XREF=safe_read+44, safe_read+65, safe_read+70
0000000000004ee4         mov        rax, rbp
0000000000004ee7         pop        rbx
0000000000004ee8         pop        rbp
0000000000004ee9         pop        r12
0000000000004eeb         pop        r13
0000000000004eed         ret
                        ; endp
0000000000004eee         align      16                                          ; End of unwind block (FDE at 0x1644c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     mkstemp_safer:
0000000000004ef0         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0x16484), CODE XREF=main+1470
0000000000004ef4         call       j_mkstemp                                   ; mkstemp
0000000000004ef9         add        rsp, 0x8
0000000000004efd         mov        edi, eax
0000000000004eff         jmp        fd_safer                                    ; fd_safer
0000000000004f04         align      16                                          ; End of unwind block (FDE at 0x16484)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     mkostemp_safer:
0000000000004f10         push       rbx                                         ; Begin of unwind block (FDE at 0x1649c)
0000000000004f11         mov        ebx, esi
0000000000004f13         call       j_mkostemp                                  ; mkostemp
0000000000004f18         mov        esi, ebx
0000000000004f1a         mov        edi, eax
0000000000004f1c         pop        rbx
0000000000004f1d         jmp        fd_safer_flag                               ; fd_safer_flag
                        ; endp
0000000000004f22         align      16                                          ; End of unwind block (FDE at 0x1649c)

                     fd_safer:
0000000000004f30         push       r13                                         ; Begin of unwind block (FDE at 0x164bc), CODE XREF=mkstemp_safer+15
0000000000004f32         push       r12
0000000000004f34         push       rbp
0000000000004f35         push       rbx
0000000000004f36         mov        ebx, edi
0000000000004f38         sub        rsp, 0x8
0000000000004f3c         cmp        edi, 0x2
0000000000004f3f         ja         loc_4f62

0000000000004f41         call       dup_safer                                   ; dup_safer
0000000000004f46         mov        r12d, eax
0000000000004f49         call       j___errno_location                          ; __errno_location
0000000000004f4e         mov        r13d, dword [rax]
0000000000004f51         mov        rbp, rax
0000000000004f54         mov        edi, ebx                                    ; argument "__fd" for method j_close
0000000000004f56         call       j_close                                     ; close
0000000000004f5b         mov        ebx, r12d
0000000000004f5e         mov        dword [rbp], r13d

                     loc_4f62:
0000000000004f62         add        rsp, 0x8                                    ; CODE XREF=fd_safer+15
0000000000004f66         mov        eax, ebx
0000000000004f68         pop        rbx
0000000000004f69         pop        rbp
0000000000004f6a         pop        r12
0000000000004f6c         pop        r13
0000000000004f6e         ret
                        ; endp
0000000000004f6f         align      16                                          ; End of unwind block (FDE at 0x164bc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88


                     version_etc_arn:
0000000000004f70         push       r15                                         ; Begin of unwind block (FDE at 0x164f4), CODE XREF=j_version_etc_arn, version_etc_va+75, version_etc+161
0000000000004f72         push       r14
0000000000004f74         push       r13
0000000000004f76         push       r12
0000000000004f78         mov        r12, r9
0000000000004f7b         push       rbp
0000000000004f7c         push       rbx
0000000000004f7d         mov        rbp, rdi
0000000000004f80         mov        rbx, r8
0000000000004f83         sub        rsp, 0x28
0000000000004f87         test       rsi, rsi
0000000000004f8a         je         loc_50a8

0000000000004f90         mov        r8, rdx
0000000000004f93         lea        rdx, qword [aSSSn]                          ; "%s (%s) %s\\n"
0000000000004f9a         mov        r9, rcx
0000000000004f9d         xor        eax, eax
0000000000004f9f         mov        rcx, rsi
0000000000004fa2         mov        esi, 0x1
0000000000004fa7         call       j___fprintf_chk                             ; __fprintf_chk

                     loc_4fac:
0000000000004fac         lea        rsi, qword [aSSn+7]                         ; argument "msgid" for method j_dcgettext, 0x14bbb, CODE XREF=version_etc_arn+337
0000000000004fb3         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004fb5         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004fba         call       j_dcgettext                                 ; dcgettext
0000000000004fbf         lea        rdx, qword [version_etc_copyright]          ; "Copyright %s %d Free Software Foundation, Inc."
0000000000004fc6         mov        rcx, rax
0000000000004fc9         mov        r8d, 0x7e3
0000000000004fcf         mov        esi, 0x1
0000000000004fd4         mov        rdi, rbp
0000000000004fd7         xor        eax, eax
0000000000004fd9         call       j___fprintf_chk                             ; __fprintf_chk
0000000000004fde         lea        rsi, qword [aNlicenseGplv3G]                ; argument "msgid" for method j_dcgettext, "\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n"
0000000000004fe5         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004fe7         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004fec         call       j_dcgettext                                 ; dcgettext
0000000000004ff1         mov        rsi, rbp                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004ff4         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004ff7         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004ffc         cmp        r12, 0x9
0000000000005000         ja         loc_5340

0000000000005006         lea        rdx, qword [switch_table_14ea4]             ; switch_table_14ea4
000000000000500d         movsxd     rax, dword [rdx+r12*4]
0000000000005011         add        rax, rdx
0000000000005014         jmp        rax                                         ; switch statement using table at 0x14ea4, with 10 cases, 0x5020,0x5096,0x50d0,0x5128,0x5168,0x51b0,0x5200,0x5258,0x5288,0x52f0
0000000000005016         align      32

                     loc_5020:
0000000000005020         mov        r9, qword [rbx+0x38]                        ; case 8, CODE XREF=version_etc_arn+164
0000000000005024         mov        rax, qword [rbx+0x10]
0000000000005028         lea        rsi, qword [aWrittenBySSSns_14db8]          ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n"
000000000000502f         mov        r8, qword [rbx+8]
0000000000005033         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005038         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000503a         mov        r13, qword [rbx+0x30]
000000000000503e         mov        r12, qword [rbx+0x28]
0000000000005042         mov        qword [rsp+0x58+var_48], r9
0000000000005047         mov        r15, qword [rbx+0x20]
000000000000504b         mov        r14, qword [rbx+0x18]
000000000000504f         mov        qword [rsp+0x58+var_58], rax
0000000000005053         mov        qword [rsp+0x58+var_50], r8
0000000000005058         mov        rbx, qword [rbx]
000000000000505b         call       j_dcgettext                                 ; dcgettext
0000000000005060         sub        rsp, 0x8

                     loc_5064:
0000000000005064         mov        r9, qword [rsp+0x60+var_48]                 ; CODE XREF=version_etc_arn+432
0000000000005069         mov        rdx, rax
000000000000506c         mov        rcx, rbx
000000000000506f         mov        esi, 0x1
0000000000005074         mov        rdi, rbp
0000000000005077         xor        eax, eax
0000000000005079         push       r9
000000000000507b         push       r13
000000000000507d         push       r12
000000000000507f         push       r15
0000000000005081         push       r14
0000000000005083         mov        r9, qword [rsp+0x88+var_58]
0000000000005088         mov        r8, qword [rsp+0x88+var_50]
000000000000508d         call       j___fprintf_chk                             ; __fprintf_chk
0000000000005092         add        rsp, 0x30

                     loc_5096:
0000000000005096         add        rsp, 0x28                                   ; case 0, CODE XREF=version_etc_arn+164
000000000000509a         pop        rbx
000000000000509b         pop        rbp
000000000000509c         pop        r12
000000000000509e         pop        r13
00000000000050a0         pop        r14
00000000000050a2         pop        r15
00000000000050a4         ret
                        ; endp
00000000000050a5         align      8

                     loc_50a8:
00000000000050a8         mov        r8, rcx                                     ; CODE XREF=version_etc_arn+26
00000000000050ab         mov        rcx, rdx
00000000000050ae         lea        rdx, qword [aSSn]                           ; "%s %s\\n"
00000000000050b5         mov        esi, 0x1
00000000000050ba         xor        eax, eax
00000000000050bc         call       j___fprintf_chk                             ; __fprintf_chk
00000000000050c1         jmp        loc_4fac
00000000000050c6         align      16

                     loc_50d0:
00000000000050d0         mov        r10, qword [rbx+0x40]                       ; case 9, CODE XREF=version_etc_arn+164
00000000000050d4         mov        r9, qword [rbx+0x38]
00000000000050d8         lea        rsi, qword [aWrittenBySSSns]                ; "Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n"
00000000000050df         mov        rax, qword [rbx+0x10]
00000000000050e3         mov        r8, qword [rbx+8]
00000000000050e7         mov        edx, 0x5
00000000000050ec         mov        r13, qword [rbx+0x30]
00000000000050f0         mov        r12, qword [rbx+0x28]
00000000000050f4         mov        r15, qword [rbx+0x20]
00000000000050f8         mov        r14, qword [rbx+0x18]
00000000000050fc         mov        rbx, qword [rbx]
00000000000050ff         mov        qword [rsp+0x58+var_40], r10
0000000000005104         mov        qword [rsp+0x58+var_48], r9
0000000000005109         mov        qword [rsp+0x58+var_58], rax
000000000000510d         mov        qword [rsp+0x58+var_50], r8

                     loc_5112:
0000000000005112         xor        edi, edi                                    ; argument "domain" for method j_dcgettext, CODE XREF=version_etc_arn+1042
0000000000005114         call       j_dcgettext                                 ; dcgettext
0000000000005119         mov        r10, qword [rsp+0x58+var_40]
000000000000511e         push       r10
0000000000005120         jmp        loc_5064
0000000000005125         align      8

                     loc_5128:
0000000000005128         mov        rbx, qword [rbx]                            ; case 1, CODE XREF=version_etc_arn+164
000000000000512b         lea        rsi, qword [aWrittenBySn]                   ; argument "msgid" for method j_dcgettext, "Written by %s.\\n"
0000000000005132         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005137         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005139         call       j_dcgettext                                 ; dcgettext
000000000000513e         add        rsp, 0x28
0000000000005142         mov        rcx, rbx
0000000000005145         mov        rdi, rbp
0000000000005148         pop        rbx
0000000000005149         pop        rbp
000000000000514a         pop        r12
000000000000514c         pop        r13
000000000000514e         pop        r14
0000000000005150         pop        r15
0000000000005152         mov        rdx, rax
0000000000005155         mov        esi, 0x1
000000000000515a         xor        eax, eax
000000000000515c         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
0000000000005161         align      8

                     loc_5168:
0000000000005168         mov        r12, qword [rbx+8]                          ; case 2, CODE XREF=version_etc_arn+164
000000000000516c         lea        rsi, qword [aWrittenBySAndS]                ; argument "msgid" for method j_dcgettext, "Written by %s and %s.\\n"
0000000000005173         mov        rbx, qword [rbx]
0000000000005176         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000517b         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000517d         call       j_dcgettext                                 ; dcgettext
0000000000005182         add        rsp, 0x28
0000000000005186         mov        r8, r12
0000000000005189         mov        rcx, rbx
000000000000518c         mov        rdi, rbp
000000000000518f         mov        rdx, rax
0000000000005192         mov        esi, 0x1
0000000000005197         pop        rbx
0000000000005198         pop        rbp
0000000000005199         pop        r12
000000000000519b         pop        r13
000000000000519d         pop        r14
000000000000519f         pop        r15
00000000000051a1         xor        eax, eax
00000000000051a3         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
00000000000051a8         align      16

                     loc_51b0:
00000000000051b0         mov        r13, qword [rbx+0x10]                       ; case 3, CODE XREF=version_etc_arn+164
00000000000051b4         mov        r12, qword [rbx+8]
00000000000051b8         lea        rsi, qword [aWrittenBySSAnd]                ; argument "msgid" for method j_dcgettext, "Written by %s, %s, and %s.\\n"
00000000000051bf         mov        rbx, qword [rbx]
00000000000051c2         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000051c7         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000051c9         call       j_dcgettext                                 ; dcgettext
00000000000051ce         add        rsp, 0x28
00000000000051d2         mov        r9, r13
00000000000051d5         mov        r8, r12
00000000000051d8         mov        rcx, rbx
00000000000051db         mov        rdi, rbp
00000000000051de         mov        rdx, rax
00000000000051e1         pop        rbx
00000000000051e2         pop        rbp
00000000000051e3         pop        r12
00000000000051e5         pop        r13
00000000000051e7         pop        r14
00000000000051e9         pop        r15
00000000000051eb         mov        esi, 0x1
00000000000051f0         xor        eax, eax
00000000000051f2         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
00000000000051f7         align      512

                     loc_5200:
0000000000005200         lea        rsi, qword [aWrittenBySSSna]                ; case 4, argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\nand %s.\\n", CODE XREF=version_etc_arn+164
0000000000005207         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000520c         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000520e         mov        r14, qword [rbx+0x18]
0000000000005212         mov        r13, qword [rbx+0x10]
0000000000005216         mov        r12, qword [rbx+8]
000000000000521a         mov        rbx, qword [rbx]
000000000000521d         call       j_dcgettext                                 ; dcgettext
0000000000005222         sub        rsp, 0x8

                     loc_5226:
0000000000005226         push       r14                                         ; CODE XREF=version_etc_arn+784
0000000000005228         mov        rdx, rax
000000000000522b         mov        r9, r13
000000000000522e         mov        r8, r12
0000000000005231         mov        rcx, rbx
0000000000005234         mov        rdi, rbp
0000000000005237         mov        esi, 0x1
000000000000523c         xor        eax, eax
000000000000523e         call       j___fprintf_chk                             ; __fprintf_chk
0000000000005243         pop        rax
0000000000005244         pop        rdx
0000000000005245         add        rsp, 0x28
0000000000005249         pop        rbx
000000000000524a         pop        rbp
000000000000524b         pop        r12
000000000000524d         pop        r13
000000000000524f         pop        r14
0000000000005251         pop        r15
0000000000005253         ret
                        ; endp
0000000000005254         align      8

                     loc_5258:
0000000000005258         mov        r15, qword [rbx+0x20]                       ; case 5, CODE XREF=version_etc_arn+164
000000000000525c         lea        rsi, qword [aWrittenBySSSns_14d38]          ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, and %s.\\n"
0000000000005263         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005268         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000526a         mov        r14, qword [rbx+0x18]
000000000000526e         mov        r13, qword [rbx+0x10]
0000000000005272         mov        r12, qword [rbx+8]
0000000000005276         mov        rbx, qword [rbx]
0000000000005279         call       j_dcgettext                                 ; dcgettext
000000000000527e         push       r15
0000000000005280         jmp        loc_5226
0000000000005282         align      8

                     loc_5288:
0000000000005288         mov        r8, qword [rbx+8]                           ; case 6, CODE XREF=version_etc_arn+164
000000000000528c         mov        r12, qword [rbx+0x28]
0000000000005290         lea        rsi, qword [aWrittenBySSSns_14d60]          ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, %s, and %s.\\n"
0000000000005297         mov        r15, qword [rbx+0x20]
000000000000529b         mov        r14, qword [rbx+0x18]
000000000000529f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000052a4         mov        r13, qword [rbx+0x10]
00000000000052a8         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000052aa         mov        rbx, qword [rbx]
00000000000052ad         mov        qword [rsp+0x58+var_58], r8
00000000000052b1         call       j_dcgettext                                 ; dcgettext
00000000000052b6         sub        rsp, 0x8
00000000000052ba         mov        r9, r13
00000000000052bd         push       r12
00000000000052bf         push       r15
00000000000052c1         push       r14

                     loc_52c3:
00000000000052c3         mov        r8, qword [rsp+0x78+var_58]                 ; CODE XREF=version_etc_arn+964
00000000000052c8         mov        rcx, rbx
00000000000052cb         mov        rdx, rax
00000000000052ce         mov        rdi, rbp
00000000000052d1         mov        esi, 0x1
00000000000052d6         xor        eax, eax
00000000000052d8         call       j___fprintf_chk                             ; __fprintf_chk
00000000000052dd         add        rsp, 0x20
00000000000052e1         add        rsp, 0x28
00000000000052e5         pop        rbx
00000000000052e6         pop        rbp
00000000000052e7         pop        r12
00000000000052e9         pop        r13
00000000000052eb         pop        r14
00000000000052ed         pop        r15
00000000000052ef         ret
                        ; endp

                     loc_52f0:
00000000000052f0         mov        r9, qword [rbx+0x10]                        ; case 7, CODE XREF=version_etc_arn+164
00000000000052f4         mov        r13, qword [rbx+0x30]
00000000000052f8         lea        rsi, qword [aWrittenBySSSns_14d88]          ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n"
00000000000052ff         mov        r12, qword [rbx+0x28]
0000000000005303         mov        r15, qword [rbx+0x20]
0000000000005307         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000530c         mov        r14, qword [rbx+0x18]
0000000000005310         mov        r8, qword [rbx+8]
0000000000005314         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005316         mov        qword [rsp+0x58+var_50], r9
000000000000531b         mov        rbx, qword [rbx]
000000000000531e         mov        qword [rsp+0x58+var_58], r8
0000000000005322         call       j_dcgettext                                 ; dcgettext
0000000000005327         push       r13
0000000000005329         push       r12
000000000000532b         push       r15
000000000000532d         push       r14
000000000000532f         mov        r9, qword [rsp+0x78+var_50]
0000000000005334         jmp        loc_52c3
0000000000005336         align      64

                     loc_5340:
0000000000005340         mov        r10, qword [rbx+0x40]                       ; CODE XREF=version_etc_arn+144
0000000000005344         mov        r9, qword [rbx+0x38]
0000000000005348         mov        edx, 0x5
000000000000534d         mov        rax, qword [rbx+0x10]
0000000000005351         mov        r8, qword [rbx+8]
0000000000005355         lea        rsi, qword [aWrittenBySSSns_14e20]          ; "Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n"
000000000000535c         mov        r13, qword [rbx+0x30]
0000000000005360         mov        r12, qword [rbx+0x28]
0000000000005364         mov        r15, qword [rbx+0x20]
0000000000005368         mov        r14, qword [rbx+0x18]
000000000000536c         mov        qword [rsp+0x58+var_40], r10
0000000000005371         mov        qword [rsp+0x58+var_48], r9
0000000000005376         mov        qword [rsp+0x58+var_58], rax
000000000000537a         mov        qword [rsp+0x58+var_50], r8
000000000000537f         mov        rbx, qword [rbx]
0000000000005382         jmp        loc_5112
0000000000005387         align      16                                          ; End of unwind block (FDE at 0x164f4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     version_etc_ar:
0000000000005390         xor        r9d, r9d                                    ; Begin of unwind block (FDE at 0x16608)
0000000000005393         cmp        qword [r8], 0x0
0000000000005397         je         j_version_etc_arn                           ; version_etc_arn

0000000000005399         nop        dword [rax]

                     loc_53a0:
00000000000053a0         add        r9, 0x1                                     ; CODE XREF=version_etc_ar+25
00000000000053a4         cmp        qword [r8+r9*8], 0x0
00000000000053a9         jne        loc_53a0

                     j_version_etc_arn:        // version_etc_arn
00000000000053ab         jmp        version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc_ar+7
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16


                     version_etc_va:
00000000000053b0         sub        rsp, 0x68                                   ; End of unwind block (FDE at 0x16608), Begin of unwind block (FDE at 0x1661c)
00000000000053b4         mov        r10, r8
00000000000053b7         xor        r9d, r9d
00000000000053ba         mov        rax, qword [fs:0x28]
00000000000053c3         mov        qword [rsp+0x68+var_10], rax
00000000000053c8         xor        eax, eax
00000000000053ca         mov        r8, rsp
00000000000053cd         nop        dword [rax]

                     loc_53d0:
00000000000053d0         mov        eax, dword [r10]                            ; CODE XREF=version_etc_va+73
00000000000053d3         cmp        eax, 0x2f
00000000000053d6         ja         loc_541a

00000000000053d8         mov        r11d, eax
00000000000053db         add        r11, qword [r10+0x10]
00000000000053df         add        eax, 0x8
00000000000053e2         mov        dword [r10], eax

                     loc_53e5:
00000000000053e5         mov        rax, qword [r11]                            ; CODE XREF=version_etc_va+118
00000000000053e8         test       rax, rax
00000000000053eb         mov        qword [r8+r9*8], rax
00000000000053ef         je         loc_53fb

00000000000053f1         add        r9, 0x1
00000000000053f5         cmp        r9, 0xa
00000000000053f9         jne        loc_53d0

                     loc_53fb:
00000000000053fb         call       version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc_va+63
0000000000005400         mov        rax, qword [rsp+0x68+var_10]
0000000000005405         xor        rax, qword [fs:0x28]
000000000000540e         jne        loc_5415

0000000000005410         add        rsp, 0x68
0000000000005414         ret
                        ; endp

                     loc_5415:
0000000000005415         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=version_etc_va+94
                        ; endp

                     loc_541a:
000000000000541a         mov        r11, qword [r10+8]                          ; CODE XREF=version_etc_va+38
000000000000541e         lea        rax, qword [r11+8]
0000000000005422         mov        qword [r10+8], rax
0000000000005426         jmp        loc_53e5
0000000000005428         align      16                                          ; End of unwind block (FDE at 0x1661c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40
        ;    var_48: int8_t, -72
        ;    var_50: int64_t, -80
        ;    var_A8: int8_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int32_t, -192


                     version_etc:
0000000000005430         push       rbp                                         ; Begin of unwind block (FDE at 0x16638), CODE XREF=main+261
0000000000005431         push       rbx
0000000000005432         mov        r10d, 0x20
0000000000005438         xor        r11d, r11d
000000000000543b         sub        rsp, 0xb8
0000000000005442         mov        rax, qword [fs:0x28]
000000000000544b         mov        qword [rsp+0xc8+var_50], rax
0000000000005450         xor        eax, eax
0000000000005452         lea        rax, qword [rsp+0xc8+arg_0]
000000000000545a         mov        qword [rsp+0xc8+var_28], r8
0000000000005462         lea        rbx, qword [rsp+0xc8+arg_0]
000000000000546a         lea        r8, qword [rsp+0xc8+var_A8]
000000000000546f         mov        qword [rsp+0xc8+var_20], r9
0000000000005477         mov        dword [rsp+0xc8+var_C0], 0x20
000000000000547f         mov        qword [rsp+0xc8+var_B8], rax
0000000000005484         lea        rax, qword [rsp+0xc8+var_48]
000000000000548c         xor        r9d, r9d
000000000000548f         mov        qword [rsp+0xc8+var_B0], rax
0000000000005494         mov        rbp, rax
0000000000005497         nop        word [rax+rax]

                     loc_54a0:
00000000000054a0         cmp        r10d, 0x2f                                  ; CODE XREF=version_etc+154
00000000000054a4         ja         loc_54fc

00000000000054a6         mov        eax, r10d
00000000000054a9         mov        r11d, 0x1
00000000000054af         add        r10d, 0x8
00000000000054b3         add        rax, rbp

                     loc_54b6:
00000000000054b6         mov        rax, qword [rax]                            ; CODE XREF=version_etc+211
00000000000054b9         test       rax, rax
00000000000054bc         mov        qword [r8+r9*8], rax
00000000000054c0         je         loc_54cc

00000000000054c2         add        r9, 0x1
00000000000054c6         cmp        r9, 0xa
00000000000054ca         jne        loc_54a0

                     loc_54cc:
00000000000054cc         test       r11b, r11b                                  ; CODE XREF=version_etc+144
00000000000054cf         jne        loc_54f5

                     loc_54d1:
00000000000054d1         call       version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc+202
00000000000054d6         mov        rax, qword [rsp+0xc8+var_50]
00000000000054db         xor        rax, qword [fs:0x28]
00000000000054e4         jne        loc_54f0

00000000000054e6         add        rsp, 0xb8
00000000000054ed         pop        rbx
00000000000054ee         pop        rbp
00000000000054ef         ret
                        ; endp

                     loc_54f0:
00000000000054f0         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=version_etc+180
                        ; endp

                     loc_54f5:
00000000000054f5         mov        dword [rsp+0xc8+var_C0], r10d               ; CODE XREF=version_etc+159
00000000000054fa         jmp        loc_54d1

                     loc_54fc:
00000000000054fc         mov        rax, rbx                                    ; CODE XREF=version_etc+116
00000000000054ff         add        rbx, 0x8
0000000000005503         jmp        loc_54b6
0000000000005505         align      16                                          ; End of unwind block (FDE at 0x16638)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     emit_bug_reporting_address:
0000000000005510         push       rbx                                         ; Begin of unwind block (FDE at 0x16664)
0000000000005511         lea        rsi, qword [aNreportBugsToS]                ; argument "msgid" for method j_dcgettext, "\\nReport bugs to: %s\\n"
0000000000005518         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000551d         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000551f         call       j_dcgettext                                 ; dcgettext
0000000000005524         lea        rdx, qword [aBugcoreutilsgn]                ; "bug-coreutils@gnu.org"
000000000000552b         mov        rsi, rax
000000000000552e         mov        edi, 0x1
0000000000005533         xor        eax, eax
0000000000005535         call       j___printf_chk                              ; __printf_chk
000000000000553a         lea        rsi, qword [aSHomePageSn]                   ; argument "msgid" for method j_dcgettext, "%s home page: <%s>\\n"
0000000000005541         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005546         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005548         call       j_dcgettext                                 ; dcgettext
000000000000554d         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000005554         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0x141ee
000000000000555b         mov        rsi, rax
000000000000555e         mov        edi, 0x1
0000000000005563         xor        eax, eax
0000000000005565         call       j___printf_chk                              ; __printf_chk
000000000000556a         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000005571         lea        rsi, qword [aGeneralHelpUsi]                ; argument "msgid" for method j_dcgettext, "General help using GNU software: <https://www.gnu.org/gethelp/>\\n"
0000000000005578         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000557a         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000557f         call       j_dcgettext                                 ; dcgettext
0000000000005584         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000005587         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
000000000000558a         pop        rbx
000000000000558b         jmp        j_fputs_unlocked                            ; fputs_unlocked
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xmalloc:
0000000000005590         push       rbx                                         ; End of unwind block (FDE at 0x16664), Begin of unwind block (FDE at 0x16684), CODE XREF=main+546, quotearg_n_options+295, quotearg_alloc_mem+129, xnmalloc+25, xcharalloc, xzalloc+4, xmemdup+15
0000000000005591         mov        rbx, rdi
0000000000005594         call       j_malloc                                    ; malloc
0000000000005599         test       rax, rax
000000000000559c         jne        loc_55a3

000000000000559e         test       rbx, rbx
00000000000055a1         jne        loc_55a5

                     loc_55a3:
00000000000055a3         pop        rbx                                         ; CODE XREF=xmalloc+12
00000000000055a4         ret
                        ; endp

                     loc_55a5:
00000000000055a5         call       xalloc_die                                  ; xalloc_die, CODE XREF=xmalloc+17
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_55aa:
00000000000055aa         nop        word [rax+rax]                              ; End of unwind block (FDE at 0x16684)
                     xnmalloc:
00000000000055b0         mov        rax, rdi                                    ; Begin of unwind block (FDE at 0x166a0)
00000000000055b3         mul        rsi
00000000000055b6         mov        rdi, rax
00000000000055b9         seto       al
00000000000055bc         test       rdi, rdi
00000000000055bf         js         loc_55cb

00000000000055c1         movzx      eax, al
00000000000055c4         test       rax, rax
00000000000055c7         jne        loc_55cb

00000000000055c9         jmp        xmalloc                                     ; xmalloc
                        ; endp

                     loc_55cb:
00000000000055cb         sub        rsp, 0x8                                    ; CODE XREF=xnmalloc+15, xnmalloc+23
00000000000055cf         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_55d4:
00000000000055d4         nop                                                    ; End of unwind block (FDE at 0x166a0)
00000000000055d6         nop        word [cs:rax+rax]
                     xcharalloc:
00000000000055e0         jmp        xmalloc                                     ; xmalloc, Begin of unwind block (FDE at 0x166b4)
                        ; endp
00000000000055e2         align      16                                          ; End of unwind block (FDE at 0x166b4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xrealloc:
00000000000055f0         test       rsi, rsi                                    ; Begin of unwind block (FDE at 0x166c8), CODE XREF=tac_seekable+598, quotearg_n_options+110, quotearg_n_options+386, xnrealloc+25, x2nrealloc+52, x2realloc+40
00000000000055f3         push       rbx
00000000000055f4         mov        rbx, rsi
00000000000055f7         jne        loc_55fe

00000000000055f9         test       rdi, rdi
00000000000055fc         jne        loc_5618

                     loc_55fe:
00000000000055fe         mov        rsi, rbx                                    ; argument "__size" for method j_realloc, CODE XREF=xrealloc+7
0000000000005601         call       j_realloc                                   ; realloc
0000000000005606         test       rax, rax
0000000000005609         jne        loc_5610

000000000000560b         test       rbx, rbx
000000000000560e         jne        loc_5621

                     loc_5610:
0000000000005610         pop        rbx                                         ; CODE XREF=xrealloc+25
0000000000005611         ret
                        ; endp
0000000000005612         align      8

                     loc_5618:
0000000000005618         call       j_free                                      ; free, CODE XREF=xrealloc+12
000000000000561d         xor        eax, eax
000000000000561f         pop        rbx
0000000000005620         ret
                        ; endp

                     loc_5621:
0000000000005621         call       xalloc_die                                  ; xalloc_die, CODE XREF=xrealloc+30
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_5626:
0000000000005626         nop        word [cs:rax+rax]                           ; End of unwind block (FDE at 0x166c8)
                     xnrealloc:
0000000000005630         mov        rax, rsi                                    ; Begin of unwind block (FDE at 0x166ec)
0000000000005633         mul        rdx
0000000000005636         mov        rsi, rax
0000000000005639         seto       al
000000000000563c         test       rsi, rsi
000000000000563f         js         loc_564b

0000000000005641         movzx      eax, al
0000000000005644         test       rax, rax
0000000000005647         jne        loc_564b

0000000000005649         jmp        xrealloc                                    ; xrealloc
                        ; endp

                     loc_564b:
000000000000564b         sub        rsp, 0x8                                    ; CODE XREF=xnrealloc+15, xnrealloc+23
000000000000564f         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_5654:
0000000000005654         nop                                                    ; End of unwind block (FDE at 0x166ec)
0000000000005656         nop        word [cs:rax+rax]
                     x2nrealloc:
0000000000005660         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0x16700)
0000000000005663         mov        r9, rdx
0000000000005666         mov        rcx, qword [rsi]
0000000000005669         je         loc_56a0

000000000000566b         xor        edx, edx
000000000000566d         movabs     rax, 0x5555555555555554
0000000000005677         div        r9
000000000000567a         cmp        rax, rcx
000000000000567d         jbe        loc_56bb

000000000000567f         mov        rax, rcx
0000000000005682         shr        rax, 0x1
0000000000005685         lea        rcx, qword [rax+rcx+1]

                     loc_568a:
000000000000568a         mov        qword [rsi], rcx                            ; CODE XREF=x2nrealloc+89
000000000000568d         imul       rcx, r9                                     ; argument #4 for method xrealloc
0000000000005691         mov        rsi, rcx                                    ; argument #2 for method xrealloc
0000000000005694         jmp        xrealloc                                    ; xrealloc
                        ; endp
0000000000005699         align      32

                     loc_56a0:
00000000000056a0         test       rcx, rcx                                    ; CODE XREF=x2nrealloc+9
00000000000056a3         je         loc_56c8

                     loc_56a5:
00000000000056a5         mov        rax, rcx                                    ; CODE XREF=sub_56c4+28
00000000000056a8         mul        r9
00000000000056ab         seto       dl
00000000000056ae         test       rax, rax
00000000000056b1         movzx      edx, dl
00000000000056b4         js         loc_56bb

00000000000056b6         test       rdx, rdx
00000000000056b9         je         loc_568a

                     loc_56bb:
00000000000056bb         sub        rsp, 0x8                                    ; CODE XREF=x2nrealloc+29, x2nrealloc+84
00000000000056bf         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_56c4:
00000000000056c4         nop        dword [rax]
                        ; endp

                     loc_56c8:
00000000000056c8         xor        edx, edx                                    ; CODE XREF=x2nrealloc+67
00000000000056ca         mov        eax, 0x80
00000000000056cf         xor        r8d, r8d
00000000000056d2         div        r9
00000000000056d5         test       rax, rax
00000000000056d8         sete       r8b
00000000000056dc         lea        rcx, qword [r8+rax]
00000000000056e0         jmp        loc_56a5
00000000000056e2         align      16                                          ; End of unwind block (FDE at 0x16700)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     x2realloc:
00000000000056f0         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0x16718)
00000000000056f3         mov        rax, qword [rsi]
00000000000056f6         je         loc_5720

00000000000056f8         movabs     rdx, 0x5555555555555553
0000000000005702         cmp        rax, rdx
0000000000005705         ja         loc_5731

0000000000005707         mov        rdx, rax
000000000000570a         shr        rdx, 0x1
000000000000570d         lea        rax, qword [rdx+rax+1]

                     loc_5712:
0000000000005712         mov        qword [rsi], rax                            ; CODE XREF=x2realloc+63
0000000000005715         mov        rsi, rax                                    ; argument #2 for method xrealloc
0000000000005718         jmp        xrealloc                                    ; xrealloc
                        ; endp
000000000000571d         align      32

                     loc_5720:
0000000000005720         test       rax, rax                                    ; CODE XREF=x2realloc+6
0000000000005723         mov        edx, 0x80
0000000000005728         cmove      rax, rdx
000000000000572c         test       rax, rax
000000000000572f         jns        loc_5712

                     loc_5731:
0000000000005731         sub        rsp, 0x8                                    ; CODE XREF=x2realloc+21
0000000000005735         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_573a:
000000000000573a         nop        word [rax+rax]                              ; End of unwind block (FDE at 0x16718)
                     xzalloc:
0000000000005740         push       rbx                                         ; Begin of unwind block (FDE at 0x16730)
0000000000005741         mov        rbx, rdi
0000000000005744         call       xmalloc                                     ; xmalloc
0000000000005749         mov        rdx, rbx                                    ; argument "__n" for method j_memset
000000000000574c         xor        esi, esi                                    ; argument "__c" for method j_memset
000000000000574e         mov        rdi, rax                                    ; argument "__s" for method j_memset
0000000000005751         pop        rbx
0000000000005752         jmp        j_memset                                    ; memset
                        ; endp
0000000000005757         align      32                                          ; End of unwind block (FDE at 0x16730)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xcalloc:
0000000000005760         mov        rax, rdi                                    ; Begin of unwind block (FDE at 0x1674c)
0000000000005763         sub        rsp, 0x8
0000000000005767         mul        rsi
000000000000576a         seto       dl
000000000000576d         test       rax, rax
0000000000005770         js         loc_5789

0000000000005772         movzx      edx, dl
0000000000005775         test       rdx, rdx
0000000000005778         jne        loc_5789

000000000000577a         call       j_calloc                                    ; calloc
000000000000577f         test       rax, rax
0000000000005782         je         loc_5789

0000000000005784         add        rsp, 0x8
0000000000005788         ret
                        ; endp

                     loc_5789:
0000000000005789         call       xalloc_die                                  ; xalloc_die, CODE XREF=xcalloc+16, xcalloc+24, xcalloc+34
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_578e:
000000000000578e         nop                                                    ; End of unwind block (FDE at 0x1674c)
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xmemdup:
0000000000005790         push       rbp                                         ; Begin of unwind block (FDE at 0x16768), CODE XREF=clone_quoting_options+40
0000000000005791         push       rbx
0000000000005792         mov        rbp, rdi
0000000000005795         mov        rdi, rsi
0000000000005798         mov        rbx, rsi
000000000000579b         sub        rsp, 0x8
000000000000579f         call       xmalloc                                     ; xmalloc
00000000000057a4         add        rsp, 0x8
00000000000057a8         mov        rdx, rbx                                    ; argument "__n" for method j_memcpy
00000000000057ab         mov        rsi, rbp                                    ; argument "__src" for method j_memcpy
00000000000057ae         pop        rbx
00000000000057af         pop        rbp
00000000000057b0         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
00000000000057b3         jmp        j_memcpy                                    ; memcpy
                        ; endp
00000000000057b8         align      64                                          ; End of unwind block (FDE at 0x16768)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xstrdup:
00000000000057c0         push       rbx                                         ; Begin of unwind block (FDE at 0x16790)
00000000000057c1         mov        rbx, rdi
00000000000057c4         call       j_strlen                                    ; strlen
00000000000057c9         mov        rdi, rbx
00000000000057cc         lea        rsi, qword [rax+1]
00000000000057d0         pop        rbx
00000000000057d1         jmp        xmemdup                                     ; xmemdup
                        ; endp
00000000000057d3         align      32                                          ; End of unwind block (FDE at 0x16790)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xalloc_die:
00000000000057e0         lea        rsi, qword [aMemoryExhauste]                ; Begin of unwind block (FDE at 0x167ac), argument "msgid" for method j_dcgettext, "memory exhausted", CODE XREF=main+1846, tac_seekable+1363, quotearg_n_options+422, xmalloc+21, xnmalloc+31, xrealloc+49, xnrealloc+31, x2nrealloc+95, x2realloc+69, xcalloc+41
00000000000057e7         sub        rsp, 0x8
00000000000057eb         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000057f0         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000057f2         call       j_dcgettext                                 ; dcgettext
00000000000057f7         mov        edi, dword [exit_failure]                   ; argument "__status" for method j_error, exit_failure
00000000000057fd         lea        rdx, qword [aSS+4]                          ; argument "__format" for method j_error, 0x14680
0000000000005804         mov        rcx, rax
0000000000005807         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000005809         xor        eax, eax
000000000000580b         call       j_error                                     ; error
0000000000005810         call       j_abort                                     ; abort
                        ; endp
0000000000005815         align      32                                          ; End of unwind block (FDE at 0x167ac)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fseeko:
0000000000005820         mov        rax, qword [rdi+8]                          ; Begin of unwind block (FDE at 0x167c4), CODE XREF=main+860, rpl_fflush+50
0000000000005824         cmp        qword [rdi+0x10], rax
0000000000005828         je         loc_5830

                     j_j_fseeko:        // fseeko
000000000000582a         jmp        j_fseeko                                    ; fseeko, CODE XREF=j_j_fseeko+14, j_j_fseeko+21
                        ; endp
000000000000582f         align      16

                     loc_5830:
0000000000005830         mov        rax, qword [rdi+0x20]                       ; CODE XREF=rpl_fseeko+8
0000000000005834         cmp        qword [rdi+0x28], rax
0000000000005838         jne        j_j_fseeko                                  ; fseeko

000000000000583a         cmp        qword [rdi+0x48], 0x0
000000000000583f         jne        j_j_fseeko                                  ; fseeko

0000000000005841         push       r12
0000000000005843         push       rbp
0000000000005844         mov        r12d, edx
0000000000005847         push       rbx
0000000000005848         mov        rbp, rsi
000000000000584b         mov        rbx, rdi
000000000000584e         call       j_fileno                                    ; fileno
0000000000005853         mov        edx, r12d                                   ; argument "__whence" for method j_lseek
0000000000005856         mov        rsi, rbp                                    ; argument "__offset" for method j_lseek
0000000000005859         mov        edi, eax                                    ; argument "__fd" for method j_lseek
000000000000585b         call       j_lseek                                     ; lseek
0000000000005860         cmp        rax, 0xffffffffffffffff
0000000000005864         je         loc_5872

0000000000005866         and        dword [rbx], 0xffffffef
0000000000005869         mov        qword [rbx+0x90], rax
0000000000005870         xor        eax, eax

                     loc_5872:
0000000000005872         pop        rbx                                         ; CODE XREF=j_j_fseeko+58
0000000000005873         pop        rbp
0000000000005874         pop        r12
0000000000005876         ret
                        ; endp
0000000000005877         align      128                                         ; End of unwind block (FDE at 0x167c4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_34: int8_t, -52


                     rpl_mbrtowc:
0000000000005880         push       r13                                         ; Begin of unwind block (FDE at 0x167f4), CODE XREF=sub_3a30+534, build_wcs_buffer+111, build_wcs_upper_buffer+231, build_wcs_upper_buffer+608, re_string_reconstruct+586, re_string_reconstruct+1343, re_compile_fastmap_iter.isra.30+499, re_compile_fastmap_iter.isra.30+885
0000000000005882         push       r12
0000000000005884         mov        r13, rsi
0000000000005887         push       rbp
0000000000005888         push       rbx
0000000000005889         mov        rbx, rdi
000000000000588c         mov        r12, rdx
000000000000588f         sub        rsp, 0x18
0000000000005893         mov        rax, qword [fs:0x28]
000000000000589c         mov        qword [rsp+0x38+var_30], rax
00000000000058a1         xor        eax, eax
00000000000058a3         lea        rax, qword [rsp+0x38+var_34]
00000000000058a8         test       rdi, rdi
00000000000058ab         cmove      rbx, rax
00000000000058af         mov        rdi, rbx                                    ; argument "__pwc" for method j_mbrtowc
00000000000058b2         call       j_mbrtowc                                   ; mbrtowc
00000000000058b7         cmp        rax, 0xfffffffffffffffd
00000000000058bb         mov        rbp, rax
00000000000058be         jbe        loc_58e0

00000000000058c0         test       r12, r12
00000000000058c3         je         loc_58e0

00000000000058c5         xor        edi, edi
00000000000058c7         call       hard_locale                                 ; hard_locale
00000000000058cc         test       al, al
00000000000058ce         jne        loc_58e0

00000000000058d0         movzx      eax, byte [r13]
00000000000058d5         mov        ebp, 0x1
00000000000058da         mov        dword [rbx], eax
00000000000058dc         nop        dword [rax]

                     loc_58e0:
00000000000058e0         mov        rdx, qword [rsp+0x38+var_30]                ; CODE XREF=rpl_mbrtowc+62, rpl_mbrtowc+67, rpl_mbrtowc+78
00000000000058e5         xor        rdx, qword [fs:0x28]
00000000000058ee         mov        rax, rbp
00000000000058f1         jne        loc_58fe

00000000000058f3         add        rsp, 0x18
00000000000058f7         pop        rbx
00000000000058f8         pop        rbp
00000000000058f9         pop        r12
00000000000058fb         pop        r13
00000000000058fd         ret
                        ; endp

                     loc_58fe:
00000000000058fe         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=rpl_mbrtowc+113
                        ; endp
0000000000005903         align      16                                          ; End of unwind block (FDE at 0x167f4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     peek_token_bracket:
0000000000005910         mov        rax, qword [rsi+0x48]                       ; Begin of unwind block (FDE at 0x16834), CODE XREF=parse_bracket_element.constprop.37+507, sub_10fe0+84, sub_10fe0+295, sub_10fe0+1382, sub_10fe0+1566, sub_10fe0+1659
0000000000005914         cmp        qword [rsi+0x68], rax
0000000000005918         jle        loc_5970

000000000000591a         mov        r8, qword [rsi+8]
000000000000591e         cmp        dword [rsi+0x90], 0x1
0000000000005925         movzx      ecx, byte [r8+rax]
000000000000592a         mov        byte [rdi], cl
000000000000592c         jle        loc_5943

000000000000592e         cmp        rax, qword [rsi+0x30]
0000000000005932         je         loc_5943

0000000000005934         mov        r9, qword [rsi+0x10]
0000000000005938         cmp        dword [r9+rax*4], 0xffffffff
000000000000593d         je         loc_59bf

                     loc_5943:
0000000000005943         cmp        cl, 0x5c                                    ; CODE XREF=peek_token_bracket+28, peek_token_bracket+34
0000000000005946         je         loc_59b0

0000000000005948         cmp        cl, 0x5b
000000000000594b         je         loc_5980

000000000000594d         cmp        cl, 0x5d
0000000000005950         je         loc_59f0

0000000000005956         cmp        cl, 0x5e
0000000000005959         je         loc_59e0

000000000000595f         cmp        cl, 0x2d
0000000000005962         jne        loc_59bf

0000000000005964         mov        byte [rdi+8], 0x16
0000000000005968         mov        eax, 0x1
000000000000596d         ret
                        ; endp
000000000000596e         align      16

                     loc_5970:
0000000000005970         mov        byte [rdi+8], 0x2                           ; CODE XREF=peek_token_bracket+8
0000000000005974         xor        eax, eax
0000000000005976         ret
                        ; endp
0000000000005977         align      128

                     loc_5980:
0000000000005980         lea        rcx, qword [rax+1]                          ; CODE XREF=peek_token_bracket+59
0000000000005984         cmp        rcx, qword [rsi+0x58]
0000000000005988         jge        loc_59d0

000000000000598a         movzx      eax, byte [r8+rax+1]
0000000000005990         cmp        al, 0x3a
0000000000005992         mov        byte [rdi], al
0000000000005994         je         loc_5a30

000000000000599a         cmp        al, 0x3d
000000000000599c         je         loc_5a20

00000000000059a2         cmp        al, 0x2e
00000000000059a4         jne        loc_59d0

00000000000059a6         mov        byte [rdi+8], 0x1a
00000000000059aa         mov        eax, 0x2
00000000000059af         ret
                        ; endp

                     loc_59b0:
00000000000059b0         and        edx, 0x1                                    ; CODE XREF=peek_token_bracket+54
00000000000059b3         je         loc_59bf

00000000000059b5         lea        rdx, qword [rax+1]
00000000000059b9         cmp        rdx, qword [rsi+0x58]
00000000000059bd         jl         loc_5a00

                     loc_59bf:
00000000000059bf         mov        byte [rdi+8], 0x1                           ; CODE XREF=peek_token_bracket+45, peek_token_bracket+82, peek_token_bracket+163
00000000000059c3         mov        eax, 0x1
00000000000059c8         ret
                        ; endp
00000000000059c9         align      16

                     loc_59d0:
00000000000059d0         mov        byte [rdi+8], 0x1                           ; CODE XREF=peek_token_bracket+120, peek_token_bracket+148, peek_token_bracket+291
00000000000059d4         mov        byte [rdi], 0x5b
00000000000059d7         mov        eax, 0x1
00000000000059dc         ret
                        ; endp
00000000000059dd         align      32

                     loc_59e0:
00000000000059e0         mov        byte [rdi+8], 0x19                          ; CODE XREF=peek_token_bracket+73
00000000000059e4         mov        eax, 0x1
00000000000059e9         ret
                        ; endp
00000000000059ea         align      16

                     loc_59f0:
00000000000059f0         mov        byte [rdi+8], 0x15                          ; CODE XREF=peek_token_bracket+64
00000000000059f4         mov        eax, 0x1
00000000000059f9         ret
                        ; endp
00000000000059fa         align      512

                     loc_5a00:
0000000000005a00         mov        qword [rsi+0x48], rdx                       ; CODE XREF=peek_token_bracket+173
0000000000005a04         movzx      eax, byte [r8+rax+1]
0000000000005a0a         mov        byte [rdi+8], 0x1
0000000000005a0e         mov        byte [rdi], al
0000000000005a10         mov        eax, 0x1
0000000000005a15         ret
                        ; endp
0000000000005a16         align      32

                     loc_5a20:
0000000000005a20         mov        byte [rdi+8], 0x1c                          ; CODE XREF=peek_token_bracket+140
0000000000005a24         mov        eax, 0x2
0000000000005a29         ret
                        ; endp
0000000000005a2a         align      16

                     loc_5a30:
0000000000005a30         and        edx, 0x4                                    ; CODE XREF=peek_token_bracket+132
0000000000005a33         je         loc_59d0

0000000000005a35         mov        byte [rdi+8], 0x1e
0000000000005a39         mov        eax, 0x2
0000000000005a3e         ret
                        ; endp
0000000000005a3f         align      64                                          ; End of unwind block (FDE at 0x16834)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     mark_opt_subexp:
0000000000005a40         cmp        byte [rsi+0x30], 0x11                       ; Begin of unwind block (FDE at 0x16848), DATA XREF=sub_10870+1284
0000000000005a44         je         loc_5a50

                     loc_5a46:
0000000000005a46         xor        eax, eax                                    ; CODE XREF=mark_opt_subexp+20
0000000000005a48         ret
                        ; endp
0000000000005a49         align      16

                     loc_5a50:
0000000000005a50         cmp        rdi, qword [rsi+0x28]                       ; CODE XREF=mark_opt_subexp+4
0000000000005a54         jne        loc_5a46

0000000000005a56         or         byte [rsi+0x32], 0x8
0000000000005a5a         xor        eax, eax
0000000000005a5c         ret
                        ; endp
0000000000005a5d         align      32                                          ; End of unwind block (FDE at 0x16848)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_52: int16_t, -82
        ;    var_58: int32_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_6C: int32_t, -108
        ;    var_70: int32_t, -112
        ;    var_78: int64_t, -120


                     check_dst_limits_calc_pos_1:
0000000000005a60         push       r15                                         ; Begin of unwind block (FDE at 0x1685c), CODE XREF=check_dst_limits_calc_pos_1+349, check_dst_limits_calc_pos+88
0000000000005a62         push       r14
0000000000005a64         mov        r9, rdx
0000000000005a67         push       r13
0000000000005a69         push       r12
0000000000005a6b         lea        rdx, qword [rcx+rcx*2]
0000000000005a6f         push       rbp
0000000000005a70         push       rbx
0000000000005a71         mov        r15d, esi
0000000000005a74         sub        rsp, 0x48
0000000000005a78         mov        r14, qword [rdi+0x98]
0000000000005a7f         mov        qword [rsp+0x78+var_78], rdi
0000000000005a83         mov        rax, qword [r14+0x30]
0000000000005a87         lea        r12, qword [rax+rdx*8]
0000000000005a8b         cmp        qword [r12+8], 0x0
0000000000005a91         jle        loc_5c25

0000000000005a97         lea        rax, qword [r8+r8*4]
0000000000005a9b         mov        r11, rcx
0000000000005a9e         mov        ecx, r9d
0000000000005aa1         mov        r10, r8
0000000000005aa4         xor        ebx, ebx
0000000000005aa6         mov        dword [rsp+0x78+var_58], esi
0000000000005aaa         shl        rax, 0x3
0000000000005aae         mov        r15, r9
0000000000005ab1         mov        qword [rsp+0x78+var_68], r11
0000000000005ab6         mov        qword [rsp+0x78+var_50], rax
0000000000005abb         mov        eax, 0x1
0000000000005ac0         shl        rax, cl
0000000000005ac3         mov        qword [rsp+0x78+var_60], rax
0000000000005ac8         not        eax
0000000000005aca         mov        word [rsp+0x78+var_52], ax
0000000000005acf         mov        eax, esi
0000000000005ad1         and        eax, 0x1
0000000000005ad4         mov        dword [rsp+0x78+var_6C], eax
0000000000005ad8         mov        eax, esi
0000000000005ada         and        eax, 0x2
0000000000005add         mov        dword [rsp+0x78+var_70], eax
0000000000005ae1         jmp        loc_5b05
0000000000005ae3         align      8

                     loc_5ae8:
0000000000005ae8         cmp        dl, 0x9                                     ; CODE XREF=check_dst_limits_calc_pos_1+191
0000000000005aeb         je         loc_5c40

0000000000005af1         cmp        dl, 0x4
0000000000005af4         je         loc_5b48

                     loc_5af6:
0000000000005af6         add        rbx, 0x1                                    ; CODE XREF=check_dst_limits_calc_pos_1+199, check_dst_limits_calc_pos_1+204, check_dst_limits_calc_pos_1+236, check_dst_limits_calc_pos_1+486, check_dst_limits_calc_pos_1+495
0000000000005afa         cmp        qword [r12+8], rbx
0000000000005aff         jle        loc_5c20

                     loc_5b05:
0000000000005b05         mov        rax, qword [r12+0x10]                       ; CODE XREF=check_dst_limits_calc_pos_1+129, check_dst_limits_calc_pos_1+436
0000000000005b0a         mov        rbp, qword [rax+rbx*8]
0000000000005b0e         mov        rax, rbp
0000000000005b11         shl        rax, 0x4
0000000000005b15         add        rax, qword [r14]
0000000000005b18         movzx      edx, byte [rax+8]
0000000000005b1c         cmp        dl, 0x8
0000000000005b1f         jne        loc_5ae8

0000000000005b21         mov        ecx, dword [rsp+0x78+var_6C]
0000000000005b25         test       ecx, ecx
0000000000005b27         je         loc_5af6

0000000000005b29         cmp        qword [rax], r15
0000000000005b2c         jne        loc_5af6

                     loc_5b2e:
0000000000005b2e         add        rsp, 0x48                                   ; CODE XREF=check_dst_limits_calc_pos_1+357
0000000000005b32         mov        eax, 0xffffffff
0000000000005b37         pop        rbx
0000000000005b38         pop        rbp
0000000000005b39         pop        r12
0000000000005b3b         pop        r13
0000000000005b3d         pop        r14
0000000000005b3f         pop        r15
0000000000005b41         ret
                        ; endp
0000000000005b42         align      8

                     loc_5b48:
0000000000005b48         cmp        r10, 0xffffffffffffffff                     ; CODE XREF=check_dst_limits_calc_pos_1+148
0000000000005b4c         je         loc_5af6

0000000000005b4e         mov        rax, qword [rsp+0x78+var_78]
0000000000005b52         mov        r13, qword [rsp+0x78+var_50]
0000000000005b57         mov        rdi, rbp
0000000000005b5a         mov        qword [rsp+0x78+var_48], r12
0000000000005b5f         mov        qword [rsp+0x78+var_40], rbx
0000000000005b64         mov        r12, r10
0000000000005b67         add        r13, qword [rax+0xd8]
0000000000005b6e         lea        rax, qword [rbp+rbp*2]
0000000000005b73         mov        rbp, r14
0000000000005b76         mov        r14, rdi
0000000000005b79         shl        rax, 0x3
0000000000005b7d         mov        rbx, rax

                     loc_5b80:
0000000000005b80         cmp        qword [r13], r14                            ; CODE XREF=check_dst_limits_calc_pos_1+409
0000000000005b84         jne        loc_5bf0

0000000000005b86         cmp        r15, 0x3f
0000000000005b8a         jg         loc_5b98

0000000000005b8c         movzx      eax, word [r13+0x22]
0000000000005b91         test       qword [rsp+0x78+var_60], rax
0000000000005b96         je         loc_5bf0

                     loc_5b98:
0000000000005b98         mov        rax, qword [rbp+0x28]                       ; CODE XREF=check_dst_limits_calc_pos_1+298
0000000000005b9c         mov        rax, qword [rax+rbx+0x10]
0000000000005ba1         mov        rcx, qword [rax]
0000000000005ba4         cmp        qword [rsp+0x78+var_68], rcx
0000000000005ba9         je         loc_5c70

0000000000005baf         mov        esi, dword [rsp+0x78+var_58]
0000000000005bb3         mov        rdi, qword [rsp+0x78+var_78]
0000000000005bb7         mov        r8, r12
0000000000005bba         mov        rdx, r15
0000000000005bbd         call       check_dst_limits_calc_pos_1                 ; check_dst_limits_calc_pos_1
0000000000005bc2         cmp        eax, 0xffffffff
0000000000005bc5         je         loc_5b2e

0000000000005bcb         test       eax, eax
0000000000005bcd         jne        loc_5bd7

0000000000005bcf         mov        esi, dword [rsp+0x78+var_70]
0000000000005bd3         test       esi, esi
0000000000005bd5         jne        loc_5c55

                     loc_5bd7:
0000000000005bd7         cmp        r15, 0x3f                                   ; CODE XREF=check_dst_limits_calc_pos_1+365
0000000000005bdb         jg         loc_5bf0

0000000000005bdd         movzx      eax, word [rsp+0x78+var_52]
0000000000005be2         and        word [r13+0x22], ax
0000000000005be7         nop        word [rax+rax]

                     loc_5bf0:
0000000000005bf0         add        r13, 0x28                                   ; CODE XREF=check_dst_limits_calc_pos_1+292, check_dst_limits_calc_pos_1+310, check_dst_limits_calc_pos_1+379
0000000000005bf4         cmp        byte [r13-8], 0x0
0000000000005bf9         jne        loc_5b80

0000000000005bfb         mov        rbx, qword [rsp+0x78+var_40]
0000000000005c00         mov        r10, r12
0000000000005c03         mov        r12, qword [rsp+0x78+var_48]
0000000000005c08         mov        r14, rbp
0000000000005c0b         add        rbx, 0x1
0000000000005c0f         cmp        qword [r12+8], rbx
0000000000005c14         jg         loc_5b05

0000000000005c1a         nop        word [rax+rax]

                     loc_5c20:
0000000000005c20         mov        r15d, dword [rsp+0x78+var_58]               ; CODE XREF=check_dst_limits_calc_pos_1+159

                     loc_5c25:
0000000000005c25         add        rsp, 0x48                                   ; CODE XREF=check_dst_limits_calc_pos_1+49
0000000000005c29         mov        eax, r15d
0000000000005c2c         pop        rbx
0000000000005c2d         sar        eax, 0x1
0000000000005c2f         pop        rbp
0000000000005c30         pop        r12
0000000000005c32         pop        r13
0000000000005c34         pop        r14
0000000000005c36         pop        r15
0000000000005c38         ret
                        ; endp
0000000000005c39         align      64

                     loc_5c40:
0000000000005c40         mov        edx, dword [rsp+0x78+var_70]                ; CODE XREF=check_dst_limits_calc_pos_1+139
0000000000005c44         test       edx, edx
0000000000005c46         je         loc_5af6

0000000000005c4c         cmp        qword [rax], r15
0000000000005c4f         jne        loc_5af6

                     loc_5c55:
0000000000005c55         add        rsp, 0x48                                   ; CODE XREF=check_dst_limits_calc_pos_1+373
0000000000005c59         xor        eax, eax
0000000000005c5b         pop        rbx
0000000000005c5c         pop        rbp
0000000000005c5d         pop        r12
0000000000005c5f         pop        r13
0000000000005c61         pop        r14
0000000000005c63         pop        r15
0000000000005c65         ret
                        ; endp
0000000000005c66         align      16

                     loc_5c70:
0000000000005c70         mov        r15d, dword [rsp+0x78+var_58]               ; CODE XREF=check_dst_limits_calc_pos_1+329
0000000000005c75         add        rsp, 0x48
0000000000005c79         pop        rbx
0000000000005c7a         pop        rbp
0000000000005c7b         mov        eax, r15d
0000000000005c7e         and        eax, 0x1
0000000000005c81         pop        r12
0000000000005c83         neg        eax
0000000000005c85         pop        r13
0000000000005c87         pop        r14
0000000000005c89         pop        r15
0000000000005c8b         ret
                        ; endp
0000000000005c8c         align      16                                          ; End of unwind block (FDE at 0x1685c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     check_dst_limits_calc_pos:
0000000000005c90         mov        rax, qword [rdi+0xd8]                       ; Begin of unwind block (FDE at 0x168f0), CODE XREF=check_dst_limits.isra.13+430, check_dst_limits.isra.13+464
0000000000005c97         lea        rsi, qword [rsi+rsi*4]
0000000000005c9b         lea        rax, qword [rax+rsi*8]
0000000000005c9f         mov        r10, qword [rax+0x10]
0000000000005ca3         cmp        r10, r8
0000000000005ca6         jg         loc_5cf0

0000000000005ca8         mov        rax, qword [rax+0x18]
0000000000005cac         cmp        rax, r8
0000000000005caf         jl         loc_5cd0

0000000000005cb1         xor        esi, esi
0000000000005cb3         cmp        r10, r8
0000000000005cb6         sete       sil
0000000000005cba         or         esi, 0x2
0000000000005cbd         cmp        rax, r8
0000000000005cc0         je         loc_5ce5

0000000000005cc2         xor        eax, eax
0000000000005cc4         cmp        r10, r8
0000000000005cc7         je         loc_5ce0

0000000000005cc9         ret
                        ; endp
0000000000005ccb         align      16

                     loc_5cd0:
0000000000005cd0         mov        eax, 0x1                                    ; CODE XREF=check_dst_limits_calc_pos+31
0000000000005cd5         ret
                        ; endp
0000000000005cd6         align      32

                     loc_5ce0:
0000000000005ce0         mov        esi, 0x1                                    ; CODE XREF=check_dst_limits_calc_pos+55

                     loc_5ce5:
0000000000005ce5         mov        r8, r9                                      ; CODE XREF=check_dst_limits_calc_pos+48
0000000000005ce8         jmp        check_dst_limits_calc_pos_1                 ; check_dst_limits_calc_pos_1
                        ; endp
0000000000005ced         align      16

                     loc_5cf0:
0000000000005cf0         mov        eax, 0xffffffff                             ; CODE XREF=check_dst_limits_calc_pos+22
0000000000005cf5         ret
                        ; endp
0000000000005cf6         align      256                                         ; End of unwind block (FDE at 0x168f0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     postorder:
0000000000005d00         push       r12                                         ; Begin of unwind block (FDE at 0x16904), CODE XREF=sub_10870+93, sub_10870+776, sub_10870+1033, sub_10870+1127, sub_10870+1294, parse_branch+325, parse_branch+348, parse_branch+368, parse_reg_exp+317, re_compile_internal+1645, re_compile_internal+1672
0000000000005d02         mov        r12, rsi
0000000000005d05         push       rbp
0000000000005d06         mov        rbp, rdx
0000000000005d09         push       rbx
0000000000005d0a         mov        rbx, rdi
0000000000005d0d         jmp        loc_5d13
0000000000005d0f         align      16

                     loc_5d10:
0000000000005d10         mov        rbx, rax                                    ; CODE XREF=postorder+26, postorder+35, postorder+87

                     loc_5d13:
0000000000005d13         mov        rax, qword [rbx+8]                          ; CODE XREF=postorder+13
0000000000005d17         test       rax, rax
0000000000005d1a         jne        loc_5d10

0000000000005d1c         mov        rax, qword [rbx+0x10]
0000000000005d20         test       rax, rax
0000000000005d23         jne        loc_5d10

0000000000005d25         mov        rsi, rbx
0000000000005d28         mov        rdi, rbp
0000000000005d2b         call       r12
0000000000005d2e         test       eax, eax
0000000000005d30         jne        loc_5d66

0000000000005d32         nop        word [rax+rax]

                     loc_5d38:
0000000000005d38         mov        rdx, qword [rbx]                            ; CODE XREF=postorder+100
0000000000005d3b         test       rdx, rdx
0000000000005d3e         je         loc_5d66

0000000000005d40         mov        rax, qword [rdx+0x10]
0000000000005d44         cmp        rax, rbx
0000000000005d47         mov        rbx, rdx
0000000000005d4a         sete       sil
0000000000005d4e         test       rax, rax
0000000000005d51         sete       cl
0000000000005d54         or         sil, cl
0000000000005d57         je         loc_5d10

0000000000005d59         mov        rsi, rbx
0000000000005d5c         mov        rdi, rbp
0000000000005d5f         call       r12
0000000000005d62         test       eax, eax
0000000000005d64         je         loc_5d38

                     loc_5d66:
0000000000005d66         pop        rbx                                         ; CODE XREF=postorder+48, postorder+62
0000000000005d67         pop        rbp
0000000000005d68         pop        r12
0000000000005d6a         ret
                        ; endp
0000000000005d6b         align      16                                          ; End of unwind block (FDE at 0x16904)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     preorder:
0000000000005d70         push       r12                                         ; Begin of unwind block (FDE at 0x16930), CODE XREF=re_compile_internal+1563, re_compile_internal+1699
0000000000005d72         mov        r12, rsi
0000000000005d75         push       rbp
0000000000005d76         mov        rbp, rdx
0000000000005d79         push       rbx
0000000000005d7a         mov        rbx, rdi
0000000000005d7d         jmp        loc_5d83
0000000000005d7f         align      128

                     loc_5d80:
0000000000005d80         mov        rbx, rdx                                    ; CODE XREF=preorder+41, preorder+63

                     loc_5d83:
0000000000005d83         mov        rsi, rbx                                    ; CODE XREF=preorder+13
0000000000005d86         mov        rdi, rbp
0000000000005d89         call       r12
0000000000005d8c         test       eax, eax
0000000000005d8e         jne        loc_5dbc

0000000000005d90         mov        rdx, qword [rbx+8]
0000000000005d94         xor        ecx, ecx
0000000000005d96         test       rdx, rdx
0000000000005d99         jne        loc_5d80

0000000000005d9b         jmp        loc_5da3
0000000000005d9d         align      32

                     loc_5da0:
0000000000005da0         mov        rbx, rdx                                    ; CODE XREF=preorder+74

                     loc_5da3:
0000000000005da3         mov        rdx, qword [rbx+0x10]                       ; CODE XREF=preorder+43
0000000000005da7         cmp        rdx, rcx
0000000000005daa         je         loc_5db1

0000000000005dac         test       rdx, rdx
0000000000005daf         jne        loc_5d80

                     loc_5db1:
0000000000005db1         mov        rdx, qword [rbx]                            ; CODE XREF=preorder+58
0000000000005db4         mov        rcx, rbx
0000000000005db7         test       rdx, rdx
0000000000005dba         jne        loc_5da0

                     loc_5dbc:
0000000000005dbc         pop        rbx                                         ; CODE XREF=preorder+30
0000000000005dbd         pop        rbp
0000000000005dbe         pop        r12
0000000000005dc0         ret
                        ; endp
0000000000005dc1         align      16                                          ; End of unwind block (FDE at 0x16930)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_string_realloc_buffers:
0000000000005dd0         push       rbp                                         ; Begin of unwind block (FDE at 0x1695c), CODE XREF=extend_buffers+56, re_search_internal+587, re_compile_internal+789, re_compile_internal+1757
0000000000005dd1         push       rbx
0000000000005dd2         mov        rbp, rsi
0000000000005dd5         mov        rbx, rdi
0000000000005dd8         sub        rsp, 0x8
0000000000005ddc         cmp        dword [rdi+0x90], 0x1
0000000000005de3         jle        loc_5e2d

0000000000005de5         movabs     rax, 0x1fffffffffffffff
0000000000005def         cmp        rsi, rax
0000000000005df2         ja         loc_5e60

0000000000005df4         mov        rdi, qword [rdi+0x10]                       ; argument "__ptr" for method j_realloc
0000000000005df8         lea        rsi, qword [rsi*4]                          ; argument "__size" for method j_realloc
0000000000005e00         call       j_realloc                                   ; realloc
0000000000005e05         test       rax, rax
0000000000005e08         je         loc_5e60

0000000000005e0a         mov        rdi, qword [rbx+0x18]
0000000000005e0e         mov        qword [rbx+0x10], rax
0000000000005e12         test       rdi, rdi
0000000000005e15         je         loc_5e2d

0000000000005e17         lea        rsi, qword [rbp*8]                          ; argument "__size" for method j_realloc
0000000000005e1f         call       j_realloc                                   ; realloc
0000000000005e24         test       rax, rax
0000000000005e27         je         loc_5e60

0000000000005e29         mov        qword [rbx+0x18], rax

                     loc_5e2d:
0000000000005e2d         cmp        byte [rbx+0x8b], 0x0                        ; CODE XREF=re_string_realloc_buffers+19, re_string_realloc_buffers+69
0000000000005e34         jne        loc_5e48

                     loc_5e36:
0000000000005e36         mov        qword [rbx+0x40], rbp                       ; CODE XREF=re_string_realloc_buffers+141
0000000000005e3a         add        rsp, 0x8
0000000000005e3e         xor        eax, eax
0000000000005e40         pop        rbx
0000000000005e41         pop        rbp
0000000000005e42         ret
                        ; endp
0000000000005e43         align      8

                     loc_5e48:
0000000000005e48         mov        rdi, qword [rbx+8]                          ; argument "__ptr" for method j_realloc, CODE XREF=re_string_realloc_buffers+100
0000000000005e4c         mov        rsi, rbp                                    ; argument "__size" for method j_realloc
0000000000005e4f         call       j_realloc                                   ; realloc
0000000000005e54         test       rax, rax
0000000000005e57         je         loc_5e60

0000000000005e59         mov        qword [rbx+8], rax
0000000000005e5d         jmp        loc_5e36
0000000000005e5f         align      32

                     loc_5e60:
0000000000005e60         add        rsp, 0x8                                    ; CODE XREF=re_string_realloc_buffers+34, re_string_realloc_buffers+56, re_string_realloc_buffers+87, re_string_realloc_buffers+135
0000000000005e64         mov        eax, 0xc
0000000000005e69         pop        rbx
0000000000005e6a         pop        rbp
0000000000005e6b         ret
                        ; endp
0000000000005e6c         align      16                                          ; End of unwind block (FDE at 0x1695c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_node_set_insert_last:
0000000000005e70         push       rbp                                         ; Begin of unwind block (FDE at 0x16990), CODE XREF=register_state+117, sub_12950+481
0000000000005e71         push       rbx
0000000000005e72         mov        rbp, rsi
0000000000005e75         mov        rbx, rdi
0000000000005e78         sub        rsp, 0x8
0000000000005e7c         mov        rsi, qword [rdi+8]
0000000000005e80         cmp        qword [rdi], rsi
0000000000005e83         mov        rax, qword [rdi+0x10]
0000000000005e87         je         loc_5ea8

                     loc_5e89:
0000000000005e89         lea        rdx, qword [rsi+1]                          ; CODE XREF=re_node_set_insert_last+92
0000000000005e8d         mov        qword [rbx+8], rdx
0000000000005e91         mov        qword [rax+rsi*8], rbp
0000000000005e95         mov        eax, 0x1

                     loc_5e9a:
0000000000005e9a         add        rsp, 0x8                                    ; CODE XREF=re_node_set_insert_last+98
0000000000005e9e         pop        rbx
0000000000005e9f         pop        rbp
0000000000005ea0         ret
                        ; endp
0000000000005ea1         align      8

                     loc_5ea8:
0000000000005ea8         add        rsi, 0x1                                    ; CODE XREF=re_node_set_insert_last+23
0000000000005eac         lea        rdx, qword [rsi+rsi]
0000000000005eb0         shl        rsi, 0x4                                    ; argument "__size" for method j_realloc
0000000000005eb4         mov        qword [rdi], rdx
0000000000005eb7         mov        rdi, rax                                    ; argument "__ptr" for method j_realloc
0000000000005eba         call       j_realloc                                   ; realloc
0000000000005ebf         test       rax, rax
0000000000005ec2         je         loc_5ed0

0000000000005ec4         mov        qword [rbx+0x10], rax
0000000000005ec8         mov        rsi, qword [rbx+8]
0000000000005ecc         jmp        loc_5e89
0000000000005ece         align      16

                     loc_5ed0:
0000000000005ed0         xor        eax, eax                                    ; CODE XREF=re_node_set_insert_last+82
0000000000005ed2         jmp        loc_5e9a
0000000000005ed4         align      32                                          ; End of unwind block (FDE at 0x16990)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_node_set_insert:
0000000000005ee0         push       rbp                                         ; Begin of unwind block (FDE at 0x169bc), CODE XREF=duplicate_node_closure+224, duplicate_node_closure+282, duplicate_node_closure+352, duplicate_node_closure+465, duplicate_node_closure+607, check_arrival_expand_ecl_sub+84, check_arrival_expand_ecl_sub+148, calc_eclosure_iter+360, calc_eclosure_iter+495, expand_bkref_cache+409, build_trtable+1657
0000000000005ee1         push       rbx
0000000000005ee2         mov        rbp, rsi
0000000000005ee5         mov        rbx, rdi
0000000000005ee8         sub        rsp, 0x8
0000000000005eec         mov        rdx, qword [rdi]
0000000000005eef         test       rdx, rdx
0000000000005ef2         je         loc_5f18

0000000000005ef4         mov        rsi, qword [rdi+8]
0000000000005ef8         mov        rax, qword [rdi+0x10]
0000000000005efc         test       rsi, rsi
0000000000005eff         jne        loc_5f50

0000000000005f01         mov        qword [rax], rbp
0000000000005f04         add        qword [rdi+8], 0x1
0000000000005f09         mov        eax, 0x1

                     loc_5f0e:
0000000000005f0e         add        rsp, 0x8                                    ; CODE XREF=re_node_set_insert+177, re_node_set_insert+247, re_node_set_insert+295
0000000000005f12         pop        rbx
0000000000005f13         pop        rbp
0000000000005f14         ret
                        ; endp
0000000000005f15         align      8

                     loc_5f18:
0000000000005f18         mov        qword [rdi], 0x1                            ; CODE XREF=re_node_set_insert+18
0000000000005f1f         mov        qword [rdi+8], 0x1
0000000000005f27         mov        edi, 0x8                                    ; argument "__size" for method j_malloc
0000000000005f2c         call       j_malloc                                    ; malloc
0000000000005f31         test       rax, rax
0000000000005f34         mov        qword [rbx+0x10], rax
0000000000005f38         je         loc_5fc8

0000000000005f3e         mov        qword [rax], rbp
0000000000005f41         add        rsp, 0x8
0000000000005f45         mov        eax, 0x1
0000000000005f4a         pop        rbx
0000000000005f4b         pop        rbp
0000000000005f4c         ret
                        ; endp
0000000000005f4d         align      16

                     loc_5f50:
0000000000005f50         cmp        rdx, rsi                                    ; CODE XREF=re_node_set_insert+31
0000000000005f53         je         loc_5fe0

                     loc_5f59:
0000000000005f59         cmp        qword [rax], rbp                            ; CODE XREF=re_node_set_insert+288
0000000000005f5c         lea        rdx, qword [rsi*8]
0000000000005f64         jle        loc_5fa0

0000000000005f66         test       rsi, rsi
0000000000005f69         jle        loc_5f83

0000000000005f6b         add        rdx, rax
0000000000005f6e         nop

                     loc_5f70:
0000000000005f70         mov        rcx, qword [rdx-8]                          ; CODE XREF=re_node_set_insert+159
0000000000005f74         sub        rdx, 0x8
0000000000005f78         mov        qword [rdx+8], rcx
0000000000005f7c         cmp        rax, rdx
0000000000005f7f         jne        loc_5f70

0000000000005f81         xor        edx, edx

                     loc_5f83:
0000000000005f83         mov        qword [rax+rdx], rbp                        ; CODE XREF=re_node_set_insert+137, re_node_set_insert+200, re_node_set_insert+226
0000000000005f87         mov        eax, 0x1
0000000000005f8c         add        qword [rbx+8], 0x1
0000000000005f91         jmp        loc_5f0e
0000000000005f96         align      32

                     loc_5fa0:
0000000000005fa0         mov        rcx, qword [rax+rdx-8]                      ; CODE XREF=re_node_set_insert+132
0000000000005fa5         cmp        rbp, rcx
0000000000005fa8         jge        loc_5f83

0000000000005faa         nop        word [rax+rax]

                     loc_5fb0:
0000000000005fb0         mov        qword [rax+rdx], rcx                        ; CODE XREF=re_node_set_insert+224
0000000000005fb4         sub        rdx, 0x8
0000000000005fb8         mov        rcx, qword [rax+rdx-8]
0000000000005fbd         cmp        rcx, rbp
0000000000005fc0         jg         loc_5fb0

0000000000005fc2         jmp        loc_5f83
0000000000005fc4         align      8

                     loc_5fc8:
0000000000005fc8         mov        qword [rbx+8], 0x0                          ; CODE XREF=re_node_set_insert+88
0000000000005fd0         mov        qword [rbx], 0x0
0000000000005fd7         jmp        loc_5f0e
0000000000005fdc         align      32

                     loc_5fe0:
0000000000005fe0         lea        rdx, qword [rsi+rsi]                        ; CODE XREF=re_node_set_insert+115
0000000000005fe4         shl        rsi, 0x4                                    ; argument "__size" for method j_realloc
0000000000005fe8         mov        qword [rdi], rdx
0000000000005feb         mov        rdi, rax                                    ; argument "__ptr" for method j_realloc
0000000000005fee         call       j_realloc                                   ; realloc
0000000000005ff3         test       rax, rax
0000000000005ff6         je         loc_6005

0000000000005ff8         mov        qword [rbx+0x10], rax
0000000000005ffc         mov        rsi, qword [rbx+8]
0000000000006000         jmp        loc_5f59

                     loc_6005:
0000000000006005         xor        eax, eax                                    ; CODE XREF=re_node_set_insert+278
0000000000006007         jmp        loc_5f0e
000000000000600c         align      16                                          ; End of unwind block (FDE at 0x169bc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     register_state:
0000000000006010         push       r14                                         ; Begin of unwind block (FDE at 0x169f4), CODE XREF=re_acquire_state_context+513, re_acquire_state+390
0000000000006012         push       r13
0000000000006014         mov        r14, rdi
0000000000006017         push       r12
0000000000006019         push       rbp
000000000000601a         mov        r12, rdx
000000000000601d         push       rbx
000000000000601e         mov        rbx, qword [rsi+0x10]
0000000000006022         mov        rbp, rsi
0000000000006025         mov        qword [rsi], rdx
0000000000006028         mov        qword [rsi+0x28], 0x0
0000000000006030         lea        r13, qword [rsi+0x20]
0000000000006034         lea        rdi, qword [rbx*8]                          ; argument "__size" for method j_malloc
000000000000603c         mov        qword [rsi+0x20], rbx
0000000000006040         call       j_malloc                                    ; malloc
0000000000006045         test       rax, rax
0000000000006048         mov        qword [rbp+0x30], rax
000000000000604c         je         loc_608e

000000000000604e         test       rbx, rbx
0000000000006051         jle        loc_60a0

0000000000006053         xor        ebx, ebx
0000000000006055         jmp        loc_606a
0000000000006057         align      32

                     loc_6060:
0000000000006060         add        rbx, 0x1                                    ; CODE XREF=register_state+112, register_state+124
0000000000006064         cmp        qword [rbp+0x10], rbx
0000000000006068         jle        loc_60a0

                     loc_606a:
000000000000606a         mov        rax, qword [rbp+0x18]                       ; CODE XREF=register_state+69
000000000000606e         mov        rsi, qword [rax+rbx*8]
0000000000006072         mov        rax, rsi
0000000000006075         shl        rax, 0x4
0000000000006079         add        rax, qword [r14]
000000000000607c         test       byte [rax+8], 0x8
0000000000006080         jne        loc_6060

0000000000006082         mov        rdi, r13
0000000000006085         call       re_node_set_insert_last                     ; re_node_set_insert_last
000000000000608a         test       al, al
000000000000608c         jne        loc_6060

                     loc_608e:
000000000000608e         pop        rbx                                         ; CODE XREF=register_state+60, register_state+217
000000000000608f         mov        eax, 0xc
0000000000006094         pop        rbp
0000000000006095         pop        r12
0000000000006097         pop        r13
0000000000006099         pop        r14
000000000000609b         ret
                        ; endp
000000000000609c         align      32

                     loc_60a0:
00000000000060a0         and        r12, qword [r14+0x88]                       ; CODE XREF=register_state+65, register_state+88
00000000000060a7         mov        rax, qword [r14+0x40]
00000000000060ab         lea        rdx, qword [r12+r12*2]
00000000000060af         lea        rbx, qword [rax+rdx*8]
00000000000060b3         mov        rdx, qword [rbx]
00000000000060b6         cmp        qword [rbx+8], rdx
00000000000060ba         mov        rax, qword [rbx+0x10]
00000000000060be         lea        rsi, qword [rdx+1]
00000000000060c2         jle        loc_60d6

                     loc_60c4:
00000000000060c4         mov        qword [rbx], rsi                            ; CODE XREF=register_state+234
00000000000060c7         mov        qword [rax+rdx*8], rbp
00000000000060cb         xor        eax, eax
00000000000060cd         pop        rbx
00000000000060ce         pop        rbp
00000000000060cf         pop        r12
00000000000060d1         pop        r13
00000000000060d3         pop        r14
00000000000060d5         ret
                        ; endp

                     loc_60d6:
00000000000060d6         lea        r12, qword [rsi+rsi]                        ; CODE XREF=register_state+178
00000000000060da         mov        rdi, rax                                    ; argument "__ptr" for method j_realloc
00000000000060dd         shl        rsi, 0x4                                    ; argument "__size" for method j_realloc
00000000000060e1         call       j_realloc                                   ; realloc
00000000000060e6         test       rax, rax
00000000000060e9         je         loc_608e

00000000000060eb         mov        rdx, qword [rbx]
00000000000060ee         mov        qword [rbx+0x10], rax
00000000000060f2         mov        qword [rbx+8], r12
00000000000060f6         lea        rsi, qword [rdx+1]
00000000000060fa         jmp        loc_60c4
00000000000060fc         align      256                                         ; End of unwind block (FDE at 0x169f4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     build_upper_buffer:
0000000000006100         push       r12                                         ; Begin of unwind block (FDE at 0x16a44), CODE XREF=extend_buffers+320, re_string_reconstruct+1651, sub_12950+1344
0000000000006102         mov        r12, qword [rdi+0x58]
0000000000006106         cmp        qword [rdi+0x40], r12
000000000000610a         push       rbp
000000000000610b         mov        rbp, rdi
000000000000610e         cmovle     r12, qword [rdi+0x40]
0000000000006113         push       rbx
0000000000006114         mov        rbx, qword [rdi+0x30]
0000000000006118         cmp        r12, rbx
000000000000611b         jle        loc_6155

000000000000611d         call       j___ctype_toupper_loc                       ; __ctype_toupper_loc
0000000000006122         nop        word [rax+rax]

                     loc_6128:
0000000000006128         mov        rdx, qword [rbp]                            ; CODE XREF=build_upper_buffer+83
000000000000612c         mov        rcx, qword [rbp+0x78]
0000000000006130         add        rdx, rbx
0000000000006133         add        rdx, qword [rbp+0x28]
0000000000006137         test       rcx, rcx
000000000000613a         movzx      edx, byte [rdx]
000000000000613d         jne        loc_6168

                     loc_613f:
000000000000613f         mov        rsi, qword [rax]                            ; CODE XREF=build_upper_buffer+108
0000000000006142         mov        rcx, qword [rbp+8]
0000000000006146         mov        edx, dword [rsi+rdx*4]
0000000000006149         mov        byte [rcx+rbx], dl
000000000000614c         add        rbx, 0x1
0000000000006150         cmp        r12, rbx
0000000000006153         jne        loc_6128

                     loc_6155:
0000000000006155         mov        qword [rbp+0x30], rbx                       ; CODE XREF=build_upper_buffer+27
0000000000006159         mov        qword [rbp+0x38], rbx
000000000000615d         pop        rbx
000000000000615e         pop        rbp
000000000000615f         pop        r12
0000000000006161         ret
                        ; endp
0000000000006162         align      8

                     loc_6168:
0000000000006168         movzx      edx, byte [rcx+rdx]                         ; CODE XREF=build_upper_buffer+61
000000000000616c         jmp        loc_613f
000000000000616e         align      16                                          ; End of unwind block (FDE at 0x16a44)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_88: int8_t, -136
        ;    var_8C: int32_t, -140


                     build_wcs_buffer:
0000000000006170         push       r15                                         ; Begin of unwind block (FDE at 0x16a74), CODE XREF=extend_buffers+275, re_string_reconstruct+424, sub_12950+1021
0000000000006172         push       r14
0000000000006174         push       r13
0000000000006176         push       r12
0000000000006178         push       rbp
0000000000006179         push       rbx
000000000000617a         mov        rbx, rdi
000000000000617d         sub        rsp, 0x68
0000000000006181         mov        r12, qword [rdi+0x58]
0000000000006185         mov        rbp, qword [rdi+0x30]
0000000000006189         mov        rax, qword [fs:0x28]
0000000000006192         mov        qword [rsp+0x98+var_40], rax
0000000000006197         xor        eax, eax
0000000000006199         cmp        qword [rdi+0x40], r12
000000000000619d         cmovle     r12, qword [rdi+0x40]
00000000000061a2         cmp        r12, rbp
00000000000061a5         jle        loc_6234

00000000000061ab         lea        r14, qword [rdi+0x20]
00000000000061af         lea        r13, qword [rsp+0x98+var_8C]
00000000000061b4         nop        dword [rax]

                     loc_61b8:
00000000000061b8         mov        rdi, qword [rbx+0x78]                       ; CODE XREF=build_wcs_buffer+194, build_wcs_buffer+246
00000000000061bc         mov        rdx, r12
00000000000061bf         mov        r15, qword [rbx+0x20]
00000000000061c3         sub        rdx, rbp
00000000000061c6         test       rdi, rdi
00000000000061c9         jne        loc_62b0

00000000000061cf         mov        rsi, qword [rbx+0x28]
00000000000061d3         add        rsi, rbp
00000000000061d6         add        rsi, qword [rbx]

                     loc_61d9:
00000000000061d9         mov        rcx, r14                                    ; CODE XREF=build_wcs_buffer+337, build_wcs_buffer+359, build_wcs_buffer+413
00000000000061dc         mov        rdi, r13
00000000000061df         call       rpl_mbrtowc                                 ; rpl_mbrtowc
00000000000061e4         lea        rdx, qword [rax-1]
00000000000061e8         cmp        rdx, 0xfffffffffffffffd
00000000000061ec         ja         loc_6280

00000000000061f2         cmp        rax, 0xfffffffffffffffe
00000000000061f6         mov        edx, dword [rsp+0x98+var_8C]
00000000000061fa         je         loc_6270

                     loc_61fc:
00000000000061fc         mov        rcx, qword [rbx+0x10]                       ; CODE XREF=build_wcs_buffer+311
0000000000006200         lea        rsi, qword [rbp+1]
0000000000006204         lea        rdi, qword [rbp*4]
000000000000620c         mov        dword [rcx+rbp*4], edx
000000000000620f         add        rbp, rax
0000000000006212         cmp        rsi, rbp
0000000000006215         jge        loc_6260

0000000000006217         lea        rdx, qword [rcx+rdi+4]
000000000000621c         lea        rax, qword [rcx+rbp*4]

                     loc_6220:
0000000000006220         mov        dword [rdx], 0xffffffff                     ; CODE XREF=build_wcs_buffer+189
0000000000006226         add        rdx, 0x4
000000000000622a         cmp        rax, rdx
000000000000622d         jne        loc_6220

000000000000622f         cmp        rbp, r12
0000000000006232         jl         loc_61b8

                     loc_6234:
0000000000006234         mov        rax, qword [rsp+0x98+var_40]                ; CODE XREF=build_wcs_buffer+53, build_wcs_buffer+252, build_wcs_buffer+428
0000000000006239         xor        rax, qword [fs:0x28]
0000000000006242         mov        qword [rbx+0x30], rbp
0000000000006246         mov        qword [rbx+0x38], rbp
000000000000624a         jne        loc_632e

0000000000006250         add        rsp, 0x68
0000000000006254         pop        rbx
0000000000006255         pop        rbp
0000000000006256         pop        r12
0000000000006258         pop        r13
000000000000625a         pop        r14
000000000000625c         pop        r15
000000000000625e         ret
                        ; endp
000000000000625f         align      32

                     loc_6260:
0000000000006260         mov        rbp, rsi                                    ; CODE XREF=build_wcs_buffer+165
0000000000006263         cmp        rbp, r12
0000000000006266         jl         loc_61b8

000000000000626c         jmp        loc_6234
000000000000626e         align      16

                     loc_6270:
0000000000006270         mov        rax, qword [rbx+0x58]                       ; CODE XREF=build_wcs_buffer+138
0000000000006274         cmp        qword [rbx+0x40], rax
0000000000006278         jl         loc_6318

000000000000627e         nop

                     loc_6280:
0000000000006280         mov        rax, qword [rbx]                            ; CODE XREF=build_wcs_buffer+124
0000000000006283         mov        rcx, qword [rbx+0x78]
0000000000006287         add        rax, rbp
000000000000628a         add        rax, qword [rbx+0x28]
000000000000628e         test       rcx, rcx
0000000000006291         movzx      edx, byte [rax]
0000000000006294         mov        dword [rsp+0x98+var_8C], edx
0000000000006298         jne        loc_6321

                     loc_629e:
000000000000629e         mov        qword [rbx+0x20], r15                       ; CODE XREF=build_wcs_buffer+441
00000000000062a2         mov        eax, 0x1
00000000000062a7         jmp        loc_61fc
00000000000062ac         align      16

                     loc_62b0:
00000000000062b0         mov        ecx, dword [rbx+0x90]                       ; CODE XREF=build_wcs_buffer+89
00000000000062b6         xor        eax, eax
00000000000062b8         lea        rsi, qword [rsp+0x98+var_88]
00000000000062bd         test       ecx, ecx
00000000000062bf         jg         loc_62e1

00000000000062c1         jmp        loc_61d9
00000000000062c6         align      16

                     loc_62d0:
00000000000062d0         add        rax, 0x1                                    ; CODE XREF=build_wcs_buffer+411
00000000000062d4         cmp        rdx, rax
00000000000062d7         je         loc_61d9

00000000000062dd         mov        rdi, qword [rbx+0x78]

                     loc_62e1:
00000000000062e1         mov        rcx, qword [rbx]                            ; CODE XREF=build_wcs_buffer+335
00000000000062e4         add        rcx, rbp
00000000000062e7         add        rcx, rax
00000000000062ea         add        rcx, qword [rbx+0x28]
00000000000062ee         movzx      ecx, byte [rcx]
00000000000062f1         movzx      ecx, byte [rdi+rcx]
00000000000062f5         mov        rdi, qword [rbx+8]
00000000000062f9         add        rdi, rbp
00000000000062fc         mov        byte [rdi+rax], cl
00000000000062ff         mov        byte [rsi+rax], cl
0000000000006302         lea        ecx, dword [rax+1]
0000000000006305         cmp        ecx, dword [rbx+0x90]
000000000000630b         jl         loc_62d0

000000000000630d         jmp        loc_61d9
0000000000006312         align      8

                     loc_6318:
0000000000006318         mov        qword [rbx+0x20], r15                       ; CODE XREF=build_wcs_buffer+264
000000000000631c         jmp        loc_6234

                     loc_6321:
0000000000006321         movzx      edx, byte [rcx+rdx]                         ; CODE XREF=build_wcs_buffer+296
0000000000006325         mov        dword [rsp+0x98+var_8C], edx
0000000000006329         jmp        loc_629e

                     loc_632e:
000000000000632e         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=build_wcs_buffer+218
                        ; endp
0000000000006333         align      64                                          ; End of unwind block (FDE at 0x16a74)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_88: int8_t, -136
        ;    var_90: int64_t, -144
        ;    var_94: int32_t, -148
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208


                     build_wcs_upper_buffer:
0000000000006340         push       r15                                         ; Begin of unwind block (FDE at 0x16ac0), CODE XREF=extend_buffers+149, re_string_reconstruct+298, re_compile_internal+724
0000000000006342         push       r14
0000000000006344         mov        r14, rdi
0000000000006347         push       r13
0000000000006349         push       r12
000000000000634b         push       rbp
000000000000634c         push       rbx
000000000000634d         sub        rsp, 0xa8
0000000000006354         mov        rbx, qword [rdi+0x58]
0000000000006358         mov        r15, qword [rdi+0x30]
000000000000635c         mov        rax, qword [fs:0x28]
0000000000006365         mov        qword [rsp+0xd8+var_40], rax
000000000000636d         xor        eax, eax
000000000000636f         cmp        qword [rdi+0x40], rbx
0000000000006373         cmovle     rbx, qword [rdi+0x40]
0000000000006378         cmp        byte [rdi+0x8a], 0x0
000000000000637f         jne        loc_638c

0000000000006381         cmp        qword [rdi+0x78], 0x0
0000000000006386         je         loc_6510

                     loc_638c:
000000000000638c         mov        r13, qword [r14+0x38]                       ; CODE XREF=build_wcs_upper_buffer+63, build_wcs_upper_buffer+471

                     loc_6390:
0000000000006390         cmp        r15, rbx                                    ; CODE XREF=build_wcs_upper_buffer+408, build_wcs_upper_buffer+450, build_wcs_upper_buffer+1169, build_wcs_upper_buffer+1184, build_wcs_upper_buffer+1459
0000000000006393         jl         loc_63d0

                     loc_6395:
0000000000006395         mov        qword [r14+0x30], r15                       ; CODE XREF=build_wcs_upper_buffer+1233
0000000000006399         mov        qword [r14+0x38], r13
000000000000639d         xor        eax, eax

                     loc_639f:
000000000000639f         mov        rcx, qword [rsp+0xd8+var_40]                ; CODE XREF=build_wcs_upper_buffer+898, build_wcs_upper_buffer+1515
00000000000063a7         xor        rcx, qword [fs:0x28]
00000000000063b0         jne        loc_693a

00000000000063b6         add        rsp, 0xa8
00000000000063bd         pop        rbx
00000000000063be         pop        rbp
00000000000063bf         pop        r12
00000000000063c1         pop        r13
00000000000063c3         pop        r14
00000000000063c5         pop        r15
00000000000063c7         ret
                        ; endp
00000000000063c8         align      16

                     loc_63d0:
00000000000063d0         lea        rax, qword [r14+0x20]                       ; CODE XREF=build_wcs_upper_buffer+83
00000000000063d4         mov        qword [rsp+0xd8+var_D0], rax
00000000000063d9         mov        rax, rbx
00000000000063dc         sub        rax, r15
00000000000063df         mov        qword [rsp+0xd8+var_C8], rax
00000000000063e4         lea        rax, qword [rsp+0xd8+var_94]
00000000000063e9         mov        qword [rsp+0xd8+var_B8], rax

                     loc_63ee:
00000000000063ee         mov        rdx, qword [r14+0x78]                       ; CODE XREF=build_wcs_upper_buffer+1051
00000000000063f2         mov        rax, qword [r14+0x20]
00000000000063f6         test       rdx, rdx
00000000000063f9         mov        qword [rsp+0xd8+var_90], rax
00000000000063fe         jne        loc_6709

0000000000006404         mov        rbp, qword [r14+0x28]
0000000000006408         add        rbp, r13
000000000000640b         add        rbp, qword [r14]
000000000000640e         mov        qword [rsp+0xd8+var_C0], rbp

                     loc_6413:
0000000000006413         mov        rcx, qword [rsp+0xd8+var_D0]                ; CODE XREF=build_wcs_upper_buffer+1040
0000000000006418         mov        rdx, qword [rsp+0xd8+var_C8]
000000000000641d         mov        rsi, qword [rsp+0xd8+var_C0]
0000000000006422         mov        rdi, qword [rsp+0xd8+var_B8]
0000000000006427         call       rpl_mbrtowc                                 ; rpl_mbrtowc
000000000000642c         mov        rbp, rax
000000000000642f         lea        rax, qword [rax-1]
0000000000006433         cmp        rax, 0xfffffffffffffffc
0000000000006437         mov        qword [rsp+0xd8+var_B8], rax
000000000000643c         ja         loc_6779

0000000000006442         mov        edx, dword [rsp+0xd8+var_94]
0000000000006446         mov        edi, edx                                    ; argument "__wc" for method j_towupper
0000000000006448         mov        dword [rsp+0xd8+var_C8], edx
000000000000644c         call       j_towupper                                  ; towupper
0000000000006451         mov        edx, dword [rsp+0xd8+var_C8]
0000000000006455         mov        r12d, eax
0000000000006458         mov        qword [rsp+0xd8+var_D0], r15
000000000000645d         cmp        edx, eax
000000000000645f         je         loc_6760

0000000000006465         lea        rcx, qword [rsp+0xd8+var_88]
000000000000646a         lea        rdx, qword [rsp+0xd8+var_90]                ; argument "__ps" for method j_wcrtomb
000000000000646f         mov        esi, eax                                    ; argument "__wc" for method j_wcrtomb
0000000000006471         mov        rdi, rcx                                    ; argument "__s" for method j_wcrtomb
0000000000006474         mov        qword [rsp+0xd8+var_C8], rcx
0000000000006479         call       j_wcrtomb                                   ; wcrtomb
000000000000647e         cmp        rbp, rax
0000000000006481         mov        r11, rax
0000000000006484         mov        rcx, qword [rsp+0xd8+var_C8]
0000000000006489         jne        loc_6816

000000000000648f         mov        rdi, qword [r14+8]
0000000000006493         mov        rdx, rbp                                    ; argument "__n" for method j_memcpy
0000000000006496         mov        rsi, rcx                                    ; argument "__src" for method j_memcpy
0000000000006499         add        rdi, r15                                    ; argument "__dest" for method j_memcpy
000000000000649c         call       j_memcpy                                    ; memcpy

                     loc_64a1:
00000000000064a1         cmp        byte [r14+0x8c], 0x0                        ; CODE XREF=build_wcs_upper_buffer+1076
00000000000064a9         lea        rax, qword [rbp+r13]
00000000000064ae         jne        loc_67e5

                     loc_64b4:
00000000000064b4         add        r15, 0x1                                    ; CODE XREF=build_wcs_upper_buffer+1219
00000000000064b8         mov        rsi, qword [rsp+0xd8+var_D0]
00000000000064bd         mov        rdx, qword [r14+0x10]
00000000000064c1         lea        rcx, qword [r15+rbp-1]
00000000000064c6         mov        r13, rax
00000000000064c9         cmp        r15, rcx
00000000000064cc         lea        rax, qword [rsi*4]
00000000000064d4         mov        dword [rdx+rsi*4], r12d
00000000000064d8         jge        loc_6390

00000000000064de         lea        rax, qword [rdx+rax+4]
00000000000064e3         lea        rdx, qword [rdx+rcx*4]
00000000000064e7         nop        word [rax+rax]

                     loc_64f0:
00000000000064f0         mov        dword [rax], 0xffffffff                     ; CODE XREF=build_wcs_upper_buffer+445
00000000000064f6         add        rax, 0x4
00000000000064fa         cmp        rdx, rax
00000000000064fd         jne        loc_64f0

00000000000064ff         mov        r15, rcx
0000000000006502         jmp        loc_6390
0000000000006507         align      16

                     loc_6510:
0000000000006510         cmp        byte [rdi+0x8c], 0x0                        ; CODE XREF=build_wcs_upper_buffer+70
0000000000006517         jne        loc_638c

000000000000651d         cmp        r15, rbx
0000000000006520         jge        loc_66b8

0000000000006526         lea        rax, qword [rdi+0x20]
000000000000652a         mov        qword [rsp+0xd8+var_D0], rax
000000000000652f         lea        rax, qword [rsp+0xd8+var_94]
0000000000006534         mov        qword [rsp+0xd8+var_A8], rax
0000000000006539         lea        rax, qword [rsp+0xd8+var_90]
000000000000653e         mov        qword [rsp+0xd8+var_A0], rax
0000000000006543         lea        rax, qword [rsp+0xd8+var_88]
0000000000006548         mov        qword [rsp+0xd8+var_B0], rax
000000000000654d         nop        dword [rax]

                     loc_6550:
0000000000006550         mov        rbp, qword [r14+0x28]                       ; CODE XREF=build_wcs_upper_buffer+765
0000000000006554         mov        r13, r15
0000000000006557         add        rbp, r15
000000000000655a         add        rbp, qword [r14]
000000000000655d         movzx      r12d, byte [rbp]
0000000000006562         test       r12b, 0x80
0000000000006566         jne        loc_657a

0000000000006568         mov        rdi, qword [rsp+0xd8+var_D0]                ; argument "__ps" for method j_mbsinit
000000000000656d         call       j_mbsinit                                   ; mbsinit
0000000000006572         test       eax, eax
0000000000006574         jne        loc_6668

                     loc_657a:
000000000000657a         mov        rax, qword [r14+0x20]                       ; CODE XREF=build_wcs_upper_buffer+550
000000000000657e         mov        rdi, qword [rsp+0xd8+var_A8]
0000000000006583         mov        rdx, rbx
0000000000006586         mov        rcx, qword [rsp+0xd8+var_D0]
000000000000658b         sub        rdx, r15
000000000000658e         mov        rsi, rbp
0000000000006591         mov        qword [rsp+0xd8+var_C8], rdx
0000000000006596         mov        qword [rsp+0xd8+var_90], rax
000000000000659b         mov        qword [rsp+0xd8+var_B8], rdi
00000000000065a0         call       rpl_mbrtowc                                 ; rpl_mbrtowc
00000000000065a5         mov        rbp, rax
00000000000065a8         lea        rax, qword [rax-1]
00000000000065ac         cmp        rax, 0xfffffffffffffffc
00000000000065b0         ja         loc_6698

00000000000065b6         mov        edx, dword [rsp+0xd8+var_94]
00000000000065ba         mov        edi, edx                                    ; argument "__wc" for method j_towupper
00000000000065bc         mov        dword [rsp+0xd8+var_C0], edx
00000000000065c0         call       j_towupper                                  ; towupper
00000000000065c5         mov        edx, dword [rsp+0xd8+var_C0]
00000000000065c9         mov        r12d, eax
00000000000065cc         cmp        edx, eax
00000000000065ce         je         loc_6648

00000000000065d0         mov        rdx, qword [rsp+0xd8+var_A0]                ; argument "__ps" for method j_wcrtomb
00000000000065d5         mov        rdi, qword [rsp+0xd8+var_B0]                ; argument "__s" for method j_wcrtomb
00000000000065da         mov        esi, eax                                    ; argument "__wc" for method j_wcrtomb
00000000000065dc         call       j_wcrtomb                                   ; wcrtomb
00000000000065e1         cmp        rbp, rax
00000000000065e4         jne        loc_6758

00000000000065ea         mov        rdi, qword [r14+8]
00000000000065ee         mov        rsi, qword [rsp+0xd8+var_B0]                ; argument "__src" for method j_memcpy
00000000000065f3         mov        rdx, rbp                                    ; argument "__n" for method j_memcpy
00000000000065f6         add        rdi, r15                                    ; argument "__dest" for method j_memcpy
00000000000065f9         call       j_memcpy                                    ; memcpy

                     loc_65fe:
00000000000065fe         add        r15, 0x1                                    ; CODE XREF=build_wcs_upper_buffer+801
0000000000006602         mov        rdx, qword [r14+0x10]
0000000000006606         lea        rax, qword [r13*4]
000000000000660e         lea        rcx, qword [r15+rbp-1]
0000000000006613         cmp        r15, rcx
0000000000006616         mov        dword [rdx+r13*4], r12d
000000000000661a         jge        loc_663a

000000000000661c         lea        rax, qword [rdx+rax+4]
0000000000006621         lea        rdx, qword [rdx+rcx*4]
0000000000006625         nop        dword [rax]

                     loc_6628:
0000000000006628         mov        dword [rax], 0xffffffff                     ; CODE XREF=build_wcs_upper_buffer+757
000000000000662e         add        rax, 0x4
0000000000006632         cmp        rdx, rax
0000000000006635         jne        loc_6628

0000000000006637         mov        r15, rcx

                     loc_663a:
000000000000663a         cmp        rbx, r15                                    ; CODE XREF=build_wcs_upper_buffer+730, build_wcs_upper_buffer+849, build_wcs_upper_buffer+949, build_wcs_upper_buffer+964
000000000000663d         jg         loc_6550

0000000000006643         jmp        loc_66b8
0000000000006645         align      8

                     loc_6648:
0000000000006648         mov        rsi, qword [r14+0x28]                       ; CODE XREF=build_wcs_upper_buffer+654
000000000000664c         mov        rdi, qword [r14+8]
0000000000006650         mov        rdx, rbp                                    ; argument "__n" for method j_memcpy
0000000000006653         add        rsi, r15
0000000000006656         add        rsi, qword [r14]                            ; argument "__src" for method j_memcpy
0000000000006659         add        rdi, r15                                    ; argument "__dest" for method j_memcpy
000000000000665c         call       j_memcpy                                    ; memcpy
0000000000006661         jmp        loc_65fe
0000000000006663         align      8

                     loc_6668:
0000000000006668         call       j___ctype_toupper_loc                       ; __ctype_toupper_loc, CODE XREF=build_wcs_upper_buffer+564
000000000000666d         mov        rax, qword [rax]
0000000000006670         mov        rdx, qword [r14+8]
0000000000006674         mov        eax, dword [rax+r12*4]
0000000000006678         mov        byte [rdx+r15], al
000000000000667c         mov        rdx, qword [r14+8]
0000000000006680         mov        rax, qword [r14+0x10]
0000000000006684         movzx      edx, byte [rdx+r15]
0000000000006689         mov        dword [rax+r15*4], edx
000000000000668d         add        r15, 0x1
0000000000006691         jmp        loc_663a
0000000000006693         align      8

                     loc_6698:
0000000000006698         cmp        rax, 0xfffffffffffffffd                     ; CODE XREF=build_wcs_upper_buffer+624
000000000000669c         jne        loc_66d0

000000000000669e         mov        rax, qword [r14+0x58]
00000000000066a2         cmp        qword [r14+0x40], rax
00000000000066a6         jge        loc_66d0

00000000000066a8         mov        rax, qword [rsp+0xd8+var_90]
00000000000066ad         mov        qword [r14+0x20], rax
00000000000066b1         nop        dword [rax]

                     loc_66b8:
00000000000066b8         mov        qword [r14+0x30], r15                       ; CODE XREF=build_wcs_upper_buffer+480, build_wcs_upper_buffer+771
00000000000066bc         mov        qword [r14+0x38], r15
00000000000066c0         xor        eax, eax
00000000000066c2         jmp        loc_639f
00000000000066c7         align      16

                     loc_66d0:
00000000000066d0         mov        rax, qword [r14]                            ; CODE XREF=build_wcs_upper_buffer+860, build_wcs_upper_buffer+870
00000000000066d3         mov        rdx, qword [r14+8]
00000000000066d7         add        rax, r15
00000000000066da         add        rax, qword [r14+0x28]
00000000000066de         movzx      eax, byte [rax]
00000000000066e1         mov        byte [rdx+r15], al
00000000000066e5         mov        rdx, qword [r14+0x10]
00000000000066e9         add        r15, 0x1
00000000000066ed         cmp        rbp, 0xffffffffffffffff
00000000000066f1         mov        dword [rdx+r13*4], eax
00000000000066f5         jne        loc_663a

00000000000066fb         mov        rax, qword [rsp+0xd8+var_90]
0000000000006700         mov        qword [r14+0x20], rax
0000000000006704         jmp        loc_663a

                     loc_6709:
0000000000006709         mov        eax, dword [r14+0x90]                       ; CODE XREF=build_wcs_upper_buffer+190
0000000000006710         test       eax, eax
0000000000006712         jle        loc_6930

0000000000006718         mov        rdi, qword [r14+0x28]
000000000000671c         lea        r11d, dword [rax-1]
0000000000006720         lea        rcx, qword [rsp+0xd8+var_88]
0000000000006725         xor        eax, eax
0000000000006727         add        rdi, r13
000000000000672a         add        rdi, qword [r14]
000000000000672d         jmp        loc_673a

                     loc_672f:
000000000000672f         add        rax, 0x1                                    ; CODE XREF=build_wcs_upper_buffer+1033
0000000000006733         cmp        qword [rsp+0xd8+var_C8], rax
0000000000006738         je         loc_674b

                     loc_673a:
000000000000673a         movzx      esi, byte [rdi+rax]                         ; CODE XREF=build_wcs_upper_buffer+1005
000000000000673e         cmp        r11, rax
0000000000006741         movzx      esi, byte [rdx+rsi]
0000000000006745         mov        byte [rcx+rax], sil
0000000000006749         jne        loc_672f

                     loc_674b:
000000000000674b         mov        qword [rsp+0xd8+var_C0], rcx                ; CODE XREF=build_wcs_upper_buffer+1016, build_wcs_upper_buffer+1525
0000000000006750         jmp        loc_6413
0000000000006755         align      8

                     loc_6758:
0000000000006758         mov        r13, r15                                    ; CODE XREF=build_wcs_upper_buffer+676
000000000000675b         jmp        loc_63ee

                     loc_6760:
0000000000006760         mov        rdi, qword [r14+8]                          ; CODE XREF=build_wcs_upper_buffer+287, build_wcs_upper_buffer+1242
0000000000006764         mov        rsi, qword [rsp+0xd8+var_C0]                ; argument "__src" for method j_memcpy
0000000000006769         mov        rdx, rbp                                    ; argument "__n" for method j_memcpy
000000000000676c         add        rdi, r15                                    ; argument "__dest" for method j_memcpy
000000000000676f         call       j_memcpy                                    ; memcpy
0000000000006774         jmp        loc_64a1

                     loc_6779:
0000000000006779         cmp        qword [rsp+0xd8+var_B8], 0xfffffffffffffffd ; CODE XREF=build_wcs_upper_buffer+252
000000000000677f         jne        loc_678b

0000000000006781         mov        rax, qword [r14+0x58]
0000000000006785         cmp        qword [r14+0x40], rax
0000000000006789         jl         loc_6808

                     loc_678b:
000000000000678b         mov        rax, qword [r14]                            ; CODE XREF=build_wcs_upper_buffer+1087
000000000000678e         mov        rdx, qword [r14+0x78]
0000000000006792         add        rax, r13
0000000000006795         add        rax, qword [r14+0x28]
0000000000006799         test       rdx, rdx
000000000000679c         movzx      eax, byte [rax]
000000000000679f         jne        loc_694c

                     loc_67a5:
00000000000067a5         mov        rdx, qword [r14+8]                          ; CODE XREF=build_wcs_upper_buffer+1552
00000000000067a9         mov        rcx, r15
00000000000067ac         mov        byte [rdx+r15], al
00000000000067b0         cmp        byte [r14+0x8c], 0x0
00000000000067b8         jne        loc_693f

                     loc_67be:
00000000000067be         mov        rdx, qword [r14+0x10]                       ; CODE XREF=build_wcs_upper_buffer+1543
00000000000067c2         add        r13, 0x1
00000000000067c6         add        r15, 0x1
00000000000067ca         cmp        rbp, 0xffffffffffffffff
00000000000067ce         mov        dword [rdx+rcx*4], eax
00000000000067d1         jne        loc_6390

00000000000067d7         mov        rax, qword [rsp+0xd8+var_90]
00000000000067dc         mov        qword [r14+0x20], rax
00000000000067e0         jmp        loc_6390

                     loc_67e5:
00000000000067e5         mov        rdx, qword [r14+0x18]                       ; CODE XREF=build_wcs_upper_buffer+366
00000000000067e9         mov        rcx, r15
00000000000067ec         mov        r10, r13
00000000000067ef         sub        rcx, r13
00000000000067f2         lea        rdx, qword [rdx+rcx*8]

                     loc_67f6:
00000000000067f6         mov        qword [rdx+r10*8], r10                      ; CODE XREF=build_wcs_upper_buffer+1217
00000000000067fa         add        r10, 0x1
00000000000067fe         cmp        rax, r10
0000000000006801         jne        loc_67f6

0000000000006803         jmp        loc_64b4

                     loc_6808:
0000000000006808         mov        rax, qword [rsp+0xd8+var_90]                ; CODE XREF=build_wcs_upper_buffer+1097, build_wcs_upper_buffer+1267
000000000000680d         mov        qword [r14+0x20], rax
0000000000006811         jmp        loc_6395

                     loc_6816:
0000000000006816         cmp        rax, 0xffffffffffffffff                     ; CODE XREF=build_wcs_upper_buffer+329
000000000000681a         je         loc_6760

0000000000006820         lea        rax, qword [rax+r15]
0000000000006824         mov        rsi, rax
0000000000006827         mov        qword [rsp+0xd8+var_D0], rax
000000000000682c         mov        rax, qword [r14+0x40]
0000000000006830         cmp        rsi, rax
0000000000006833         ja         loc_6808

0000000000006835         cmp        qword [r14+0x18], 0x0
000000000000683a         je         loc_68f8

                     loc_6840:
0000000000006840         cmp        byte [r14+0x8c], 0x0                        ; CODE XREF=build_wcs_upper_buffer+1504
0000000000006848         jne        loc_686a

000000000000684a         test       r15, r15
000000000000684d         je         loc_6862

000000000000684f         mov        rdx, qword [r14+0x18]
0000000000006853         xor        eax, eax

                     loc_6855:
0000000000006855         mov        qword [rdx+rax*8], rax                      ; CODE XREF=build_wcs_upper_buffer+1312
0000000000006859         add        rax, 0x1
000000000000685d         cmp        rax, r15
0000000000006860         jne        loc_6855

                     loc_6862:
0000000000006862         mov        byte [r14+0x8c], 0x1                        ; CODE XREF=build_wcs_upper_buffer+1293

                     loc_686a:
000000000000686a         mov        rdi, qword [r14+8]                          ; CODE XREF=build_wcs_upper_buffer+1288
000000000000686e         mov        rsi, rcx                                    ; argument "__src" for method j_memcpy
0000000000006871         mov        rdx, r11                                    ; argument "__n" for method j_memcpy
0000000000006874         mov        qword [rsp+0xd8+var_C8], r11
0000000000006879         add        rdi, r15                                    ; argument "__dest" for method j_memcpy
000000000000687c         call       j_memcpy                                    ; memcpy
0000000000006881         mov        rax, qword [r14+0x10]
0000000000006885         mov        r11, qword [rsp+0xd8+var_C8]
000000000000688a         lea        rcx, qword [rax+r15*4]
000000000000688e         mov        rax, qword [r14+0x18]
0000000000006892         cmp        r11, 0x1
0000000000006896         mov        dword [rcx], r12d
0000000000006899         lea        rsi, qword [rax+r15*8]
000000000000689d         mov        qword [rsi], r13
00000000000068a0         jbe        loc_68ca

00000000000068a2         mov        eax, 0x1

                     loc_68a7:
00000000000068a7         mov        rdx, qword [rsp+0xd8+var_B8]                ; CODE XREF=build_wcs_upper_buffer+1416
00000000000068ac         cmp        rax, rbp
00000000000068af         cmovb      rdx, rax
00000000000068b3         add        rdx, r13
00000000000068b6         mov        qword [rsi+rax*8], rdx
00000000000068ba         mov        dword [rcx+rax*4], 0xffffffff
00000000000068c1         add        rax, 0x1
00000000000068c5         cmp        rax, r11
00000000000068c8         jne        loc_68a7

                     loc_68ca:
00000000000068ca         mov        rbx, qword [r14+0x58]                       ; CODE XREF=build_wcs_upper_buffer+1376
00000000000068ce         sub        r11, rbp
00000000000068d1         add        rbx, r11
00000000000068d4         cmp        r13, qword [r14+0x60]
00000000000068d8         mov        qword [r14+0x58], rbx
00000000000068dc         jge        loc_68e2

00000000000068de         add        qword [r14+0x68], r11

                     loc_68e2:
00000000000068e2         cmp        qword [r14+0x40], rbx                       ; CODE XREF=build_wcs_upper_buffer+1436
00000000000068e6         mov        r15, qword [rsp+0xd8+var_D0]
00000000000068eb         cmovle     rbx, qword [r14+0x40]
00000000000068f0         add        r13, rbp
00000000000068f3         jmp        loc_6390

                     loc_68f8:
00000000000068f8         lea        rdi, qword [rax*8]                          ; argument "__size" for method j_malloc, CODE XREF=build_wcs_upper_buffer+1274
0000000000006900         mov        qword [rsp+0xd8+var_C0], rcx
0000000000006905         mov        qword [rsp+0xd8+var_C8], r11
000000000000690a         call       j_malloc                                    ; malloc
000000000000690f         test       rax, rax
0000000000006912         mov        qword [r14+0x18], rax
0000000000006916         mov        r11, qword [rsp+0xd8+var_C8]
000000000000691b         mov        rcx, qword [rsp+0xd8+var_C0]
0000000000006920         jne        loc_6840

0000000000006926         mov        eax, 0xc
000000000000692b         jmp        loc_639f

                     loc_6930:
0000000000006930         lea        rcx, qword [rsp+0xd8+var_88]                ; CODE XREF=build_wcs_upper_buffer+978
0000000000006935         jmp        loc_674b

                     loc_693a:
000000000000693a         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=build_wcs_upper_buffer+112
                        ; endp

                     loc_693f:
000000000000693f         mov        rdx, qword [r14+0x18]                       ; CODE XREF=build_wcs_upper_buffer+1144
0000000000006943         mov        qword [rdx+r15*8], r13
0000000000006947         jmp        loc_67be

                     loc_694c:
000000000000694c         movzx      eax, byte [rdx+rax]                         ; CODE XREF=build_wcs_upper_buffer+1119
0000000000006950         jmp        loc_67a5
0000000000006955         align      32                                          ; End of unwind block (FDE at 0x16ac0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     extend_buffers:
0000000000006960         push       rbp                                         ; Begin of unwind block (FDE at 0x16b0c), CODE XREF=clean_state_log_if_needed+38, clean_state_log_if_needed+85, transit_state_bkref.isra.34+2162, re_search_internal+3125
0000000000006961         push       rbx
0000000000006962         movabs     rdx, 0xffffffffffffffe
000000000000696c         sub        rsp, 0x8
0000000000006970         mov        rax, qword [rdi+0x40]
0000000000006974         cmp        rax, rdx
0000000000006977         ja         loc_6a88

000000000000697d         mov        rdx, qword [rdi+0x58]
0000000000006981         add        rax, rax
0000000000006984         movsxd     rsi, esi
0000000000006987         mov        rbx, rdi
000000000000698a         cmp        rax, rdx
000000000000698d         cmovg      rax, rdx
0000000000006991         cmp        rax, rsi
0000000000006994         cmovge     rsi, rax
0000000000006998         call       re_string_realloc_buffers                   ; re_string_realloc_buffers
000000000000699d         test       eax, eax
000000000000699f         mov        ebp, eax
00000000000069a1         jne        loc_6a5d

00000000000069a7         mov        rdi, qword [rbx+0xb8]
00000000000069ae         test       rdi, rdi
00000000000069b1         je         loc_69d4

00000000000069b3         mov        rax, qword [rbx+0x40]
00000000000069b7         lea        rsi, qword [0x8+rax*8]                      ; argument "__size" for method j_realloc
00000000000069bf         call       j_realloc                                   ; realloc
00000000000069c4         test       rax, rax
00000000000069c7         je         loc_6a88

00000000000069cd         mov        qword [rbx+0xb8], rax

                     loc_69d4:
00000000000069d4         cmp        byte [rbx+0x88], 0x0                        ; CODE XREF=extend_buffers+81
00000000000069db         mov        eax, dword [rbx+0x90]
00000000000069e1         je         loc_6a00

00000000000069e3         cmp        eax, 0x1
00000000000069e6         mov        rdi, rbx
00000000000069e9         jle        loc_6aa0

00000000000069ef         add        rsp, 0x8
00000000000069f3         pop        rbx
00000000000069f4         pop        rbp
00000000000069f5         jmp        build_wcs_upper_buffer                      ; build_wcs_upper_buffer
                        ; endp
00000000000069fa         align      512

                     loc_6a00:
0000000000006a00         cmp        eax, 0x1                                    ; CODE XREF=extend_buffers+129
0000000000006a03         jg         loc_6a70

0000000000006a05         mov        rcx, qword [rbx+0x78]
0000000000006a09         test       rcx, rcx
0000000000006a0c         je         loc_6a5d

0000000000006a0e         mov        rsi, qword [rbx+0x58]
0000000000006a12         cmp        qword [rbx+0x40], rsi
0000000000006a16         cmovle     rsi, qword [rbx+0x40]
0000000000006a1b         mov        rax, qword [rbx+0x30]
0000000000006a1f         cmp        rsi, rax
0000000000006a22         jg         loc_6a34

0000000000006a24         jmp        loc_6a55
0000000000006a26         align      16

                     loc_6a30:
0000000000006a30         mov        rcx, qword [rbx+0x78]                       ; CODE XREF=extend_buffers+243

                     loc_6a34:
0000000000006a34         mov        rdx, qword [rbx]                            ; CODE XREF=extend_buffers+194
0000000000006a37         add        rdx, rax
0000000000006a3a         add        rdx, qword [rbx+0x28]
0000000000006a3e         movzx      edx, byte [rdx]
0000000000006a41         movzx      ecx, byte [rcx+rdx]
0000000000006a45         mov        rdx, qword [rbx+8]
0000000000006a49         mov        byte [rdx+rax], cl
0000000000006a4c         add        rax, 0x1
0000000000006a50         cmp        rsi, rax
0000000000006a53         jne        loc_6a30

                     loc_6a55:
0000000000006a55         mov        qword [rbx+0x30], rax                       ; CODE XREF=extend_buffers+196
0000000000006a59         mov        qword [rbx+0x38], rax

                     loc_6a5d:
0000000000006a5d         add        rsp, 0x8                                    ; CODE XREF=extend_buffers+65, extend_buffers+172
0000000000006a61         mov        eax, ebp
0000000000006a63         pop        rbx
0000000000006a64         pop        rbp
0000000000006a65         ret
                        ; endp
0000000000006a66         align      16

                     loc_6a70:
0000000000006a70         mov        rdi, rbx                                    ; CODE XREF=extend_buffers+163
0000000000006a73         call       build_wcs_buffer                            ; build_wcs_buffer
0000000000006a78         add        rsp, 0x8
0000000000006a7c         mov        eax, ebp
0000000000006a7e         pop        rbx
0000000000006a7f         pop        rbp
0000000000006a80         ret
                        ; endp
0000000000006a81         align      8

                     loc_6a88:
0000000000006a88         mov        ebp, 0xc                                    ; CODE XREF=extend_buffers+23, extend_buffers+103
0000000000006a8d         add        rsp, 0x8
0000000000006a91         mov        eax, ebp
0000000000006a93         pop        rbx
0000000000006a94         pop        rbp
0000000000006a95         ret
                        ; endp
0000000000006a96         align      32

                     loc_6aa0:
0000000000006aa0         call       build_upper_buffer                          ; build_upper_buffer, CODE XREF=extend_buffers+137
0000000000006aa5         add        rsp, 0x8
0000000000006aa9         mov        eax, ebp
0000000000006aab         pop        rbx
0000000000006aac         pop        rbp
0000000000006aad         ret
                        ; endp
0000000000006aae         align      16                                          ; End of unwind block (FDE at 0x16b0c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     clean_state_log_if_needed:
0000000000006ab0         push       r12                                         ; Begin of unwind block (FDE at 0x16b68), CODE XREF=get_subexp_sub.isra.32+244, transit_state_bkref.isra.34+816, re_search_internal+3351
0000000000006ab2         push       rbp
0000000000006ab3         mov        rbp, rsi
0000000000006ab6         push       rbx
0000000000006ab7         mov        rax, qword [rdi+0x40]
0000000000006abb         mov        rbx, rdi
0000000000006abe         mov        r12, qword [rdi+0xc0]
0000000000006ac5         cmp        rax, rsi
0000000000006ac8         jg         loc_6af0

0000000000006aca         cmp        rax, qword [rdi+0x58]
0000000000006ace         jge        loc_6af0

0000000000006ad0         lea        esi, dword [rbp+1]
0000000000006ad3         mov        rdi, rbx
0000000000006ad6         call       extend_buffers                              ; extend_buffers
0000000000006adb         test       eax, eax
0000000000006add         jne        loc_6ae6

                     loc_6adf:
0000000000006adf         cmp        r12, rbp                                    ; CODE XREF=clean_state_log_if_needed+71, clean_state_log_if_needed+77, clean_state_log_if_needed+92
0000000000006ae2         jl         loc_6b10

                     loc_6ae4:
0000000000006ae4         xor        eax, eax                                    ; CODE XREF=clean_state_log_if_needed+132

                     loc_6ae6:
0000000000006ae6         pop        rbx                                         ; CODE XREF=clean_state_log_if_needed+45, clean_state_log_if_needed+94
0000000000006ae7         pop        rbp
0000000000006ae8         pop        r12
0000000000006aea         ret
                        ; endp
0000000000006aeb         align      16

                     loc_6af0:
0000000000006af0         mov        rax, qword [rbx+0x30]                       ; CODE XREF=clean_state_log_if_needed+24, clean_state_log_if_needed+30
0000000000006af4         cmp        rax, rbp
0000000000006af7         jg         loc_6adf

0000000000006af9         cmp        rax, qword [rbx+0x58]
0000000000006afd         jge        loc_6adf

0000000000006aff         lea        esi, dword [rbp+1]
0000000000006b02         mov        rdi, rbx
0000000000006b05         call       extend_buffers                              ; extend_buffers
0000000000006b0a         test       eax, eax
0000000000006b0c         je         loc_6adf

0000000000006b0e         jmp        loc_6ae6

                     loc_6b10:
0000000000006b10         mov        rax, qword [rbx+0xb8]                       ; CODE XREF=clean_state_log_if_needed+50
0000000000006b17         mov        rdx, rbp
0000000000006b1a         xor        esi, esi                                    ; argument "__c" for method j_memset
0000000000006b1c         sub        rdx, r12
0000000000006b1f         shl        rdx, 0x3                                    ; argument "__n" for method j_memset
0000000000006b23         lea        rdi, qword [rax+r12*8+8]                    ; argument "__s" for method j_memset
0000000000006b28         call       j_memset                                    ; memset
0000000000006b2d         mov        qword [rbx+0xc0], rbp
0000000000006b34         jmp        loc_6ae4
0000000000006b36         align      64                                          ; End of unwind block (FDE at 0x16b68)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     free_charset:
0000000000006b40         push       rbx                                         ; Begin of unwind block (FDE at 0x16b94), CODE XREF=free_token+35, build_charclass_op+499, build_charclass_op+523, build_charclass_op+593, sub_10fe0+1155, sub_10fe0+2271
0000000000006b41         mov        rbx, rdi
0000000000006b44         mov        rdi, qword [rdi]                            ; argument "__ptr" for method j_free
0000000000006b47         call       j_free                                      ; free
0000000000006b4c         mov        rdi, qword [rbx+8]                          ; argument "__ptr" for method j_free
0000000000006b50         call       j_free                                      ; free
0000000000006b55         mov        rdi, qword [rbx+0x10]                       ; argument "__ptr" for method j_free
0000000000006b59         call       j_free                                      ; free
0000000000006b5e         mov        rdi, qword [rbx+0x18]                       ; argument "__ptr" for method j_free
0000000000006b62         call       j_free                                      ; free
0000000000006b67         mov        rdi, rbx                                    ; argument "__ptr" for method j_free
0000000000006b6a         pop        rbx
0000000000006b6b         jmp        j_free                                      ; free
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     free_token:
0000000000006b70         mov        eax, dword [rdi+8]                          ; End of unwind block (FDE at 0x16b94), Begin of unwind block (FDE at 0x16bb0), CODE XREF=free_tree+8, free_dfa_content+50
0000000000006b73         and        eax, 0x400ff
0000000000006b78         cmp        eax, 0x6
0000000000006b7b         je         loc_6b90

0000000000006b7d         cmp        eax, 0x3
0000000000006b80         je         loc_6b88

0000000000006b82         ret
                        ; endp
0000000000006b84         align      8

                     loc_6b88:
0000000000006b88         mov        rdi, qword [rdi]                            ; argument "__ptr" for method j_free, CODE XREF=free_token+16
0000000000006b8b         jmp        j_free                                      ; free
                        ; endp

                     loc_6b90:
0000000000006b90         mov        rdi, qword [rdi]                            ; CODE XREF=free_token+11
0000000000006b93         jmp        free_charset                                ; free_charset
                        ; endp
0000000000006b95         align      32                                          ; End of unwind block (FDE at 0x16bb0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     free_tree:
0000000000006ba0         lea        rdi, qword [rsi+0x28]                       ; Begin of unwind block (FDE at 0x16bc4), DATA XREF=sub_10870+81, sub_10870+764, sub_10870+1024, sub_10870+1118, parse_branch+313, parse_branch+336, parse_branch+353, parse_reg_exp+305
0000000000006ba4         sub        rsp, 0x8
0000000000006ba8         call       free_token                                  ; free_token
0000000000006bad         xor        eax, eax
0000000000006baf         add        rsp, 0x8
0000000000006bb3         ret
                        ; endp
0000000000006bb4         align      64                                          ; End of unwind block (FDE at 0x16bc4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72


                     re_dfa_add_node:
0000000000006bc0         push       r15                                         ; Begin of unwind block (FDE at 0x16bdc), CODE XREF=duplicate_node+38, calc_first+30
0000000000006bc2         push       r14
0000000000006bc4         mov        r14, rsi
0000000000006bc7         push       r13
0000000000006bc9         push       r12
0000000000006bcb         push       rbp
0000000000006bcc         push       rbx
0000000000006bcd         mov        rbx, rdi
0000000000006bd0         sub        rsp, 0x18
0000000000006bd4         mov        rsi, qword [rdi+0x10]
0000000000006bd8         mov        rbp, qword [rdi+8]
0000000000006bdc         cmp        rsi, rbp
0000000000006bdf         jae        loc_6c90

0000000000006be5         mov        r12, qword [rdi+0x18]
0000000000006be9         mov        rbp, qword [rdi+0x28]

                     loc_6bed:
0000000000006bed         mov        rax, rsi                                    ; CODE XREF=re_dfa_add_node+391
0000000000006bf0         mov        ecx, edx
0000000000006bf2         shl        rax, 0x4
0000000000006bf6         add        rax, qword [rbx]
0000000000006bf9         and        ecx, 0xfffc00ff
0000000000006bff         mov        qword [rax+8], rdx
0000000000006c03         mov        dword [rax+8], ecx
0000000000006c06         xor        ecx, ecx
0000000000006c08         cmp        dl, 0x6
0000000000006c0b         mov        qword [rax], r14
0000000000006c0e         sete       cl
0000000000006c11         cmp        dl, 0x5
0000000000006c14         jne        loc_6c22

0000000000006c16         xor        ecx, ecx
0000000000006c18         cmp        dword [rbx+0xb4], 0x1
0000000000006c1f         setg       cl

                     loc_6c22:
0000000000006c22         movzx      edx, byte [rax+0xa]                         ; CODE XREF=re_dfa_add_node+84
0000000000006c26         shl        ecx, 0x4
0000000000006c29         pxor       xmm0, xmm0
0000000000006c2d         and        edx, 0xffffffef
0000000000006c30         or         edx, ecx
0000000000006c32         mov        byte [rax+0xa], dl
0000000000006c35         mov        qword [r12+rsi*8], 0xffffffffffffffff
0000000000006c3d         mov        rax, qword [rbx+0x10]
0000000000006c41         lea        rax, qword [rax+rax*2]
0000000000006c45         lea        rax, qword [rbp+rax*8]
0000000000006c4a         movups     xmmword [rax], xmm0
0000000000006c4d         mov        qword [rax+0x10], 0x0
0000000000006c55         mov        rax, qword [rbx+0x10]
0000000000006c59         lea        rdx, qword [rax+rax*2]
0000000000006c5d         mov        rax, qword [rbx+0x30]
0000000000006c61         lea        rax, qword [rax+rdx*8]
0000000000006c65         movups     xmmword [rax], xmm0
0000000000006c68         mov        qword [rax+0x10], 0x0
0000000000006c70         mov        rax, qword [rbx+0x10]
0000000000006c74         lea        rdx, qword [rax+1]
0000000000006c78         mov        qword [rbx+0x10], rdx

                     loc_6c7c:
0000000000006c7c         add        rsp, 0x18                                   ; CODE XREF=re_dfa_add_node+457
0000000000006c80         pop        rbx
0000000000006c81         pop        rbp
0000000000006c82         pop        r12
0000000000006c84         pop        r13
0000000000006c86         pop        r14
0000000000006c88         pop        r15
0000000000006c8a         ret
                        ; endp
0000000000006c8b         align      16

                     loc_6c90:
0000000000006c90         lea        r13, qword [rbp+rbp]                        ; CODE XREF=re_dfa_add_node+31
0000000000006c95         movabs     rax, 0xaaaaaaaaaaaaaaa
0000000000006c9f         cmp        r13, rax
0000000000006ca2         ja         loc_6d82

0000000000006ca8         mov        rdi, qword [rdi]                            ; argument "__ptr" for method j_realloc
0000000000006cab         mov        rsi, rbp
0000000000006cae         mov        qword [rsp+0x48+var_40], rdx
0000000000006cb3         shl        rsi, 0x5                                    ; argument "__size" for method j_realloc
0000000000006cb7         call       j_realloc                                   ; realloc
0000000000006cbc         test       rax, rax
0000000000006cbf         je         loc_6d82

0000000000006cc5         mov        r15, rbp
0000000000006cc8         mov        rdi, qword [rbx+0x18]                       ; argument "__ptr" for method j_realloc
0000000000006ccc         mov        qword [rbx], rax
0000000000006ccf         shl        r15, 0x4
0000000000006cd3         mov        rsi, r15                                    ; argument "__size" for method j_realloc
0000000000006cd6         call       j_realloc                                   ; realloc
0000000000006cdb         mov        rdi, qword [rbx+0x20]                       ; argument "__ptr" for method j_realloc
0000000000006cdf         mov        rsi, r15                                    ; argument "__size" for method j_realloc
0000000000006ce2         lea        r15, qword [r13+rbp*4]
0000000000006ce7         mov        r12, rax
0000000000006cea         shl        r15, 0x3
0000000000006cee         call       j_realloc                                   ; realloc
0000000000006cf3         mov        rdi, qword [rbx+0x28]                       ; argument "__ptr" for method j_realloc
0000000000006cf7         mov        rsi, r15                                    ; argument "__size" for method j_realloc
0000000000006cfa         mov        qword [rsp+0x48+var_48], rax
0000000000006cfe         call       j_realloc                                   ; realloc
0000000000006d03         mov        rdi, qword [rbx+0x30]                       ; argument "__ptr" for method j_realloc
0000000000006d07         mov        rsi, r15                                    ; argument "__size" for method j_realloc
0000000000006d0a         mov        rbp, rax
0000000000006d0d         call       j_realloc                                   ; realloc
0000000000006d12         test       r12, r12
0000000000006d15         mov        rcx, qword [rsp+0x48+var_48]
0000000000006d19         je         loc_6d50

0000000000006d1b         test       rcx, rcx
0000000000006d1e         je         loc_6d50

0000000000006d20         test       rbp, rbp
0000000000006d23         je         loc_6d50

0000000000006d25         test       rax, rax
0000000000006d28         mov        rdx, qword [rsp+0x48+var_40]
0000000000006d2d         je         loc_6d50

0000000000006d2f         mov        qword [rbx+0x18], r12
0000000000006d33         mov        qword [rbx+0x20], rcx
0000000000006d37         mov        qword [rbx+0x28], rbp
0000000000006d3b         mov        qword [rbx+0x30], rax
0000000000006d3f         mov        qword [rbx+8], r13
0000000000006d43         mov        rsi, qword [rbx+0x10]
0000000000006d47         jmp        loc_6bed
0000000000006d4c         align      16

                     loc_6d50:
0000000000006d50         mov        rdi, r12                                    ; argument "__ptr" for method j_free, CODE XREF=re_dfa_add_node+345, re_dfa_add_node+350, re_dfa_add_node+355, re_dfa_add_node+365
0000000000006d53         mov        qword [rsp+0x48+var_40], rax
0000000000006d58         mov        qword [rsp+0x48+var_48], rcx
0000000000006d5c         call       j_free                                      ; free
0000000000006d61         mov        rcx, qword [rsp+0x48+var_48]
0000000000006d65         mov        rdi, rcx                                    ; argument "__ptr" for method j_free
0000000000006d68         call       j_free                                      ; free
0000000000006d6d         mov        rdi, rbp                                    ; argument "__ptr" for method j_free
0000000000006d70         call       j_free                                      ; free
0000000000006d75         mov        rax, qword [rsp+0x48+var_40]
0000000000006d7a         mov        rdi, rax                                    ; argument "__ptr" for method j_free
0000000000006d7d         call       j_free                                      ; free

                     loc_6d82:
0000000000006d82         mov        rax, 0xffffffffffffffff                     ; CODE XREF=re_dfa_add_node+226, re_dfa_add_node+255
0000000000006d89         jmp        loc_6c7c
0000000000006d8e         align      16                                          ; End of unwind block (FDE at 0x16bdc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     duplicate_node:
0000000000006d90         push       r13                                         ; Begin of unwind block (FDE at 0x16c28), CODE XREF=duplicate_node_closure+258, duplicate_node_closure+328, duplicate_node_closure+437, duplicate_node_closure+542
0000000000006d92         push       r12
0000000000006d94         mov        r13, rsi
0000000000006d97         push       rbp
0000000000006d98         push       rbx
0000000000006d99         shl        r13, 0x4
0000000000006d9d         mov        rbp, rsi
0000000000006da0         mov        r12d, edx
0000000000006da3         mov        rbx, rdi
0000000000006da6         sub        rsp, 0x8
0000000000006daa         mov        rax, qword [rdi]
0000000000006dad         mov        rsi, qword [rax+r13]
0000000000006db1         mov        rdx, qword [rax+r13+8]
0000000000006db6         call       re_dfa_add_node                             ; re_dfa_add_node
0000000000006dbb         cmp        rax, 0xffffffffffffffff
0000000000006dbf         je         loc_6e24

0000000000006dc1         mov        edi, r12d
0000000000006dc4         mov        r8, qword [rbx]
0000000000006dc7         mov        rsi, rax
0000000000006dca         and        di, 0x3ff
0000000000006dcf         shl        rsi, 0x4
0000000000006dd3         mov        ecx, edi
0000000000006dd5         and        ecx, 0x3ff
0000000000006ddb         add        rsi, r8
0000000000006dde         shl        ecx, 0x8
0000000000006de1         mov        edx, ecx
0000000000006de3         mov        ecx, dword [rsi+8]
0000000000006de6         and        ecx, 0xfffc00ff
0000000000006dec         or         ecx, edx
0000000000006dee         mov        dword [rsi+8], ecx
0000000000006df1         mov        edx, dword [r8+r13+8]
0000000000006df6         and        ecx, 0xfffc00ff
0000000000006dfc         shr        edx, 0x8
0000000000006dff         or         edx, edi
0000000000006e01         and        edx, 0x3ff
0000000000006e07         shl        edx, 0x8
0000000000006e0a         or         edx, ecx
0000000000006e0c         mov        ecx, edx
0000000000006e0e         mov        dword [rsi+8], edx
0000000000006e11         shr        ecx, 0x10
0000000000006e14         mov        edx, ecx
0000000000006e16         or         edx, 0x4
0000000000006e19         mov        byte [rsi+0xa], dl
0000000000006e1c         mov        rdx, qword [rbx+0x20]
0000000000006e20         mov        qword [rdx+rax*8], rbp

                     loc_6e24:
0000000000006e24         add        rsp, 0x8                                    ; CODE XREF=duplicate_node+47
0000000000006e28         pop        rbx
0000000000006e29         pop        rbp
0000000000006e2a         pop        r12
0000000000006e2c         pop        r13
0000000000006e2e         ret
                        ; endp
0000000000006e2f         align      16                                          ; End of unwind block (FDE at 0x16c28)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72


                     duplicate_node_closure:
0000000000006e30         push       r15                                         ; Begin of unwind block (FDE at 0x16c60), CODE XREF=duplicate_node_closure+378, calc_eclosure_iter+618
0000000000006e32         push       r14
0000000000006e34         mov        r9, rsi
0000000000006e37         push       r13
0000000000006e39         push       r12
0000000000006e3b         mov        r14, rdi
0000000000006e3e         push       rbp
0000000000006e3f         push       rbx
0000000000006e40         mov        r13, rdx
0000000000006e43         mov        ebp, r8d
0000000000006e46         sub        rsp, 0x18
0000000000006e4a         mov        qword [rsp+0x48+var_40], rcx

                     loc_6e4f:
0000000000006e4f         mov        r8, qword [r14]                             ; CODE XREF=duplicate_node_closure+293, duplicate_node_closure+481
0000000000006e52         mov        rax, r9
0000000000006e55         mov        rdi, qword [r14+0x28]
0000000000006e59         shl        rax, 0x4
0000000000006e5d         mov        r12, r13
0000000000006e60         add        rax, r8
0000000000006e63         cmp        byte [rax+8], 0x4
0000000000006e67         je         loc_7020

0000000000006e6d         lea        r12, qword [r9+r9*2]
0000000000006e71         shl        r12, 0x3
0000000000006e75         lea        rsi, qword [rdi+r12]
0000000000006e79         mov        rcx, qword [rsi+8]
0000000000006e7d         test       rcx, rcx
0000000000006e80         je         loc_7079

0000000000006e86         lea        rbx, qword [r13+r13*2]
0000000000006e8b         mov        rsi, qword [rsi+0x10]
0000000000006e8f         shl        rbx, 0x3
0000000000006e93         add        rdi, rbx
0000000000006e96         cmp        rcx, 0x1
0000000000006e9a         mov        r15, qword [rsi]
0000000000006e9d         mov        qword [rdi+8], 0x0
0000000000006ea5         je         loc_6fc0

0000000000006eab         mov        rdx, qword [r14+0x10]
0000000000006eaf         lea        rsi, qword [rdx-1]
0000000000006eb3         mov        rax, rsi
0000000000006eb6         shl        rax, 0x4
0000000000006eba         add        rax, r8
0000000000006ebd         test       byte [rax+0xa], 0x4
0000000000006ec1         je         loc_6f70

0000000000006ec7         test       rsi, rsi
0000000000006eca         jle        loc_6f70

0000000000006ed0         shl        rdx, 0x4
0000000000006ed4         sub        r8, rax
0000000000006ed7         mov        rcx, qword [r14+0x20]
0000000000006edb         lea        r8, qword [r8+rdx-0x20]
0000000000006ee0         jmp        loc_6efa
0000000000006ee2         align      8

                     loc_6ee8:
0000000000006ee8         add        rax, r8                                     ; CODE XREF=duplicate_node_closure+206, duplicate_node_closure+222
0000000000006eeb         sub        rsi, 0x1
0000000000006eef         test       byte [rax+0xa], 0x4
0000000000006ef3         je         loc_6f70

0000000000006ef5         test       rsi, rsi
0000000000006ef8         jle        loc_6f70

                     loc_6efa:
0000000000006efa         cmp        qword [rcx+rsi*8], r15                      ; CODE XREF=duplicate_node_closure+176
0000000000006efe         jne        loc_6ee8

0000000000006f00         mov        edx, dword [rax+8]
0000000000006f03         shr        edx, 0x8
0000000000006f06         and        edx, 0x3ff
0000000000006f0c         cmp        ebp, edx
0000000000006f0e         jne        loc_6ee8

0000000000006f10         call       re_node_set_insert                          ; re_node_set_insert
0000000000006f15         test       al, al
0000000000006f17         je         loc_6f5b

                     loc_6f19:
0000000000006f19         mov        rax, qword [r14+0x28]                       ; CODE XREF=duplicate_node_closure+385
0000000000006f1d         mov        edx, ebp
0000000000006f1f         mov        rdi, r14
0000000000006f22         mov        rax, qword [rax+r12+0x10]
0000000000006f27         mov        r9, qword [rax+8]
0000000000006f2b         mov        rsi, r9
0000000000006f2e         mov        qword [rsp+0x48+var_48], r9
0000000000006f32         call       duplicate_node                              ; duplicate_node
0000000000006f37         cmp        rax, 0xffffffffffffffff
0000000000006f3b         mov        r13, rax
0000000000006f3e         je         loc_6f5b

                     loc_6f40:
0000000000006f40         add        rbx, qword [r14+0x28]                       ; CODE XREF=duplicate_node_closure+580
0000000000006f44         mov        rsi, r13
0000000000006f47         mov        rdi, rbx
0000000000006f4a         call       re_node_set_insert                          ; re_node_set_insert
0000000000006f4f         test       al, al
0000000000006f51         mov        r9, qword [rsp+0x48+var_48]
0000000000006f55         jne        loc_6e4f

                     loc_6f5b:
0000000000006f5b         mov        eax, 0xc                                    ; CODE XREF=duplicate_node_closure+231, duplicate_node_closure+270, duplicate_node_closure+340, duplicate_node_closure+359, duplicate_node_closure+449, duplicate_node_closure+472, duplicate_node_closure+558, duplicate_node_closure+624

                     loc_6f60:
0000000000006f60         add        rsp, 0x18                                   ; CODE XREF=duplicate_node_closure+391, duplicate_node_closure+599, duplicate_node_closure+618
0000000000006f64         pop        rbx
0000000000006f65         pop        rbp
0000000000006f66         pop        r12
0000000000006f68         pop        r13
0000000000006f6a         pop        r14
0000000000006f6c         pop        r15
0000000000006f6e         ret
                        ; endp
0000000000006f6f         align      16

                     loc_6f70:
0000000000006f70         mov        edx, ebp                                    ; CODE XREF=duplicate_node_closure+145, duplicate_node_closure+154, duplicate_node_closure+195, duplicate_node_closure+200
0000000000006f72         mov        rsi, r15
0000000000006f75         mov        rdi, r14
0000000000006f78         call       duplicate_node                              ; duplicate_node
0000000000006f7d         cmp        rax, 0xffffffffffffffff
0000000000006f81         mov        r13, rax
0000000000006f84         je         loc_6f5b

0000000000006f86         mov        rdi, qword [r14+0x28]
0000000000006f8a         mov        rsi, r13
0000000000006f8d         add        rdi, rbx
0000000000006f90         call       re_node_set_insert                          ; re_node_set_insert
0000000000006f95         test       al, al
0000000000006f97         je         loc_6f5b

0000000000006f99         mov        rcx, qword [rsp+0x48+var_40]
0000000000006f9e         mov        r8d, ebp
0000000000006fa1         mov        rdx, r13
0000000000006fa4         mov        rsi, r15
0000000000006fa7         mov        rdi, r14
0000000000006faa         call       duplicate_node_closure                      ; duplicate_node_closure
0000000000006faf         test       eax, eax
0000000000006fb1         je         loc_6f19

0000000000006fb7         jmp        loc_6f60
0000000000006fb9         align      64

                     loc_6fc0:
0000000000006fc0         cmp        r9, qword [rsp+0x48+var_40]                 ; CODE XREF=duplicate_node_closure+117
0000000000006fc5         jne        loc_6fd0

0000000000006fc7         cmp        r9, r13
0000000000006fca         jne        loc_708c

                     loc_6fd0:
0000000000006fd0         mov        eax, dword [rax+8]                          ; CODE XREF=duplicate_node_closure+405
0000000000006fd3         mov        rsi, r15
0000000000006fd6         mov        rdi, r14
0000000000006fd9         shr        eax, 0x8
0000000000006fdc         and        eax, 0x3ff
0000000000006fe1         or         ebp, eax
0000000000006fe3         mov        edx, ebp
0000000000006fe5         call       duplicate_node                              ; duplicate_node
0000000000006fea         cmp        rax, 0xffffffffffffffff
0000000000006fee         mov        r13, rax
0000000000006ff1         je         loc_6f5b

0000000000006ff7         add        rbx, qword [r14+0x28]
0000000000006ffb         mov        rsi, rax
0000000000006ffe         mov        rdi, rbx
0000000000007001         call       re_node_set_insert                          ; re_node_set_insert
0000000000007006         test       al, al
0000000000007008         je         loc_6f5b

000000000000700e         mov        r9, r15
0000000000007011         jmp        loc_6e4f
0000000000007016         align      32

                     loc_7020:
0000000000007020         mov        rax, qword [r14+0x18]                       ; CODE XREF=duplicate_node_closure+55
0000000000007024         lea        rbx, qword [r13+r13*2]
0000000000007029         lea        r15, qword [r9*8]
0000000000007031         mov        edx, ebp
0000000000007033         shl        rbx, 0x3
0000000000007037         mov        r9, qword [rax+r9*8]
000000000000703b         mov        qword [rdi+rbx+8], 0x0
0000000000007044         mov        rdi, r14
0000000000007047         mov        rsi, r9
000000000000704a         mov        qword [rsp+0x48+var_48], r9
000000000000704e         call       duplicate_node                              ; duplicate_node
0000000000007053         cmp        rax, 0xffffffffffffffff
0000000000007057         mov        r13, rax
000000000000705a         mov        r9, qword [rsp+0x48+var_48]
000000000000705e         je         loc_6f5b

0000000000007064         mov        rax, qword [r14+0x18]
0000000000007068         mov        qword [rsp+0x48+var_48], r9
000000000000706c         mov        rcx, qword [rax+r15]
0000000000007070         mov        qword [rax+r12*8], rcx
0000000000007074         jmp        loc_6f40

                     loc_7079:
0000000000007079         mov        rax, qword [r14+0x18]                       ; CODE XREF=duplicate_node_closure+80
000000000000707d         mov        rcx, qword [rax+r9*8]
0000000000007081         mov        qword [rax+r13*8], rcx
0000000000007085         xor        eax, eax
0000000000007087         jmp        loc_6f60

                     loc_708c:
000000000000708c         mov        rsi, r15                                    ; CODE XREF=duplicate_node_closure+410
000000000000708f         call       re_node_set_insert                          ; re_node_set_insert
0000000000007094         mov        edx, eax
0000000000007096         xor        eax, eax
0000000000007098         test       dl, dl
000000000000709a         jne        loc_6f60

00000000000070a0         jmp        loc_6f5b
00000000000070a5         align      16                                          ; End of unwind block (FDE at 0x16c60)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     free_state:
00000000000070b0         push       rbx                                         ; Begin of unwind block (FDE at 0x16cac), CODE XREF=free_dfa_content+252, re_acquire_state_context+529, re_acquire_state+487
00000000000070b1         mov        rbx, rdi
00000000000070b4         mov        rdi, qword [rdi+0x30]                       ; argument "__ptr" for method j_free
00000000000070b8         call       j_free                                      ; free
00000000000070bd         mov        rdi, qword [rbx+0x48]                       ; argument "__ptr" for method j_free
00000000000070c1         call       j_free                                      ; free
00000000000070c6         mov        rax, qword [rbx+0x50]
00000000000070ca         lea        rdx, qword [rbx+8]
00000000000070ce         cmp        rax, rdx
00000000000070d1         je         loc_70e5

00000000000070d3         mov        rdi, qword [rax+0x10]                       ; argument "__ptr" for method j_free
00000000000070d7         call       j_free                                      ; free
00000000000070dc         mov        rdi, qword [rbx+0x50]                       ; argument "__ptr" for method j_free
00000000000070e0         call       j_free                                      ; free

                     loc_70e5:
00000000000070e5         mov        rdi, qword [rbx+0x18]                       ; argument "__ptr" for method j_free, CODE XREF=free_state+33
00000000000070e9         call       j_free                                      ; free
00000000000070ee         mov        rdi, qword [rbx+0x60]                       ; argument "__ptr" for method j_free
00000000000070f2         call       j_free                                      ; free
00000000000070f7         mov        rdi, qword [rbx+0x58]                       ; argument "__ptr" for method j_free
00000000000070fb         call       j_free                                      ; free
0000000000007100         mov        rdi, rbx                                    ; argument "__ptr" for method j_free
0000000000007103         pop        rbx
0000000000007104         jmp        j_free                                      ; free
                        ; endp
0000000000007109         align      16                                          ; End of unwind block (FDE at 0x16cac)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_string_destruct:
0000000000007110         push       rbx                                         ; Begin of unwind block (FDE at 0x16cc8), CODE XREF=re_search_internal+2932, re_compile_internal+887, sub_12950+983
0000000000007111         mov        rbx, rdi
0000000000007114         mov        rdi, qword [rdi+0x10]                       ; argument "__ptr" for method j_free
0000000000007118         call       j_free                                      ; free
000000000000711d         mov        rdi, qword [rbx+0x18]                       ; argument "__ptr" for method j_free
0000000000007121         call       j_free                                      ; free
0000000000007126         cmp        byte [rbx+0x8b], 0x0
000000000000712d         jne        loc_7138

000000000000712f         pop        rbx
0000000000007130         ret
                        ; endp
0000000000007131         align      8

                     loc_7138:
0000000000007138         mov        rdi, qword [rbx+8]                          ; argument "__ptr" for method j_free, CODE XREF=re_string_destruct+29
000000000000713c         pop        rbx
000000000000713d         jmp        j_free                                      ; free
                        ; endp
0000000000007142         align      16                                          ; End of unwind block (FDE at 0x16cc8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     free_dfa_content:
0000000000007150         push       r14                                         ; Begin of unwind block (FDE at 0x16ce8), CODE XREF=re_compile_internal+895, rpl_regfree+12
0000000000007152         push       r13
0000000000007154         push       r12
0000000000007156         mov        r12, rdi
0000000000007159         push       rbp
000000000000715a         push       rbx
000000000000715b         mov        rdi, qword [rdi]
000000000000715e         test       rdi, rdi
0000000000007161         je         loc_718e

0000000000007163         cmp        qword [r12+0x10], 0x0
0000000000007169         je         loc_718e

000000000000716b         xor        ebx, ebx
000000000000716d         jmp        loc_7174
000000000000716f         align      16

                     loc_7170:
0000000000007170         mov        rdi, qword [r12]                            ; CODE XREF=free_dfa_content+60

                     loc_7174:
0000000000007174         mov        rax, rbx                                    ; CODE XREF=free_dfa_content+29
0000000000007177         add        rbx, 0x1
000000000000717b         shl        rax, 0x4
000000000000717f         add        rdi, rax
0000000000007182         call       free_token                                  ; free_token
0000000000007187         cmp        qword [r12+0x10], rbx
000000000000718c         ja         loc_7170

                     loc_718e:
000000000000718e         mov        rdi, qword [r12+0x18]                       ; argument "__ptr" for method j_free, CODE XREF=free_dfa_content+17, free_dfa_content+25
0000000000007193         call       j_free                                      ; free
0000000000007198         cmp        qword [r12+0x10], 0x0
000000000000719e         je         loc_71f3

00000000000071a0         xor        ebx, ebx
00000000000071a2         xor        ebp, ebp
00000000000071a4         nop        dword [rax]

                     loc_71a8:
00000000000071a8         mov        rax, qword [r12+0x30]                       ; CODE XREF=free_dfa_content+161
00000000000071ad         test       rax, rax
00000000000071b0         je         loc_71bc

00000000000071b2         mov        rdi, qword [rax+rbx+0x10]                   ; argument "__ptr" for method j_free
00000000000071b7         call       j_free                                      ; free

                     loc_71bc:
00000000000071bc         mov        rax, qword [r12+0x38]                       ; CODE XREF=free_dfa_content+96
00000000000071c1         test       rax, rax
00000000000071c4         je         loc_71d0

00000000000071c6         mov        rdi, qword [rax+rbx+0x10]                   ; argument "__ptr" for method j_free
00000000000071cb         call       j_free                                      ; free

                     loc_71d0:
00000000000071d0         mov        rax, qword [r12+0x28]                       ; CODE XREF=free_dfa_content+116
00000000000071d5         test       rax, rax
00000000000071d8         je         loc_71e4

00000000000071da         mov        rdi, qword [rax+rbx+0x10]                   ; argument "__ptr" for method j_free
00000000000071df         call       j_free                                      ; free

                     loc_71e4:
00000000000071e4         add        rbp, 0x1                                    ; CODE XREF=free_dfa_content+136
00000000000071e8         add        rbx, 0x18
00000000000071ec         cmp        qword [r12+0x10], rbp
00000000000071f1         ja         loc_71a8

                     loc_71f3:
00000000000071f3         mov        rdi, qword [r12+0x28]                       ; argument "__ptr" for method j_free, CODE XREF=free_dfa_content+78
00000000000071f8         call       j_free                                      ; free
00000000000071fd         mov        rdi, qword [r12+0x30]                       ; argument "__ptr" for method j_free
0000000000007202         call       j_free                                      ; free
0000000000007207         mov        rdi, qword [r12+0x38]                       ; argument "__ptr" for method j_free
000000000000720c         call       j_free                                      ; free
0000000000007211         mov        rdi, qword [r12]                            ; argument "__ptr" for method j_free
0000000000007215         call       j_free                                      ; free
000000000000721a         mov        rdi, qword [r12+0x40]
000000000000721f         test       rdi, rdi
0000000000007222         je         loc_7277

0000000000007224         xor        r14d, r14d
0000000000007227         xor        r13d, r13d
000000000000722a         nop        word [rax+rax]

                     loc_7230:
0000000000007230         lea        rbp, qword [rdi+r14]                        ; CODE XREF=free_dfa_content+293
0000000000007234         cmp        qword [rbp], 0x0
0000000000007239         jle        loc_7257

000000000000723b         xor        ebx, ebx
000000000000723d         nop        dword [rax]

                     loc_7240:
0000000000007240         mov        rax, qword [rbp+0x10]                       ; CODE XREF=free_dfa_content+261
0000000000007244         mov        rdi, qword [rax+rbx*8]
0000000000007248         add        rbx, 0x1
000000000000724c         call       free_state                                  ; free_state
0000000000007251         cmp        qword [rbp], rbx
0000000000007255         jg         loc_7240

                     loc_7257:
0000000000007257         mov        rdi, qword [rbp+0x10]                       ; argument "__ptr" for method j_free, CODE XREF=free_dfa_content+233
000000000000725b         add        r13, 0x1
000000000000725f         add        r14, 0x18
0000000000007263         call       j_free                                      ; free
0000000000007268         cmp        qword [r12+0x88], r13
0000000000007270         mov        rdi, qword [r12+0x40]
0000000000007275         jae        loc_7230

                     loc_7277:
0000000000007277         call       j_free                                      ; free, CODE XREF=free_dfa_content+210
000000000000727c         mov        rdi, qword [r12+0x78]
0000000000007281         lea        rax, qword [utf8_sb_map]                    ; utf8_sb_map
0000000000007288         cmp        rdi, rax
000000000000728b         je         loc_7292

000000000000728d         call       j_free                                      ; free

                     loc_7292:
0000000000007292         mov        rdi, qword [r12+0xe0]                       ; argument "__ptr" for method j_free, CODE XREF=free_dfa_content+315
000000000000729a         call       j_free                                      ; free
000000000000729f         pop        rbx
00000000000072a0         mov        rdi, r12                                    ; argument "__ptr" for method j_free
00000000000072a3         pop        rbp
00000000000072a4         pop        r12
00000000000072a6         pop        r13
00000000000072a8         pop        r14
00000000000072aa         jmp        j_free                                      ; free
                        ; endp
00000000000072af         align      16                                          ; End of unwind block (FDE at 0x16ce8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     match_ctx_clean:
00000000000072b0         push       r14                                         ; Begin of unwind block (FDE at 0x16d24), CODE XREF=re_search_internal+3892, re_search_internal+5268
00000000000072b2         push       r13
00000000000072b4         mov        r14, rdi
00000000000072b7         push       r12
00000000000072b9         push       rbp
00000000000072ba         push       rbx
00000000000072bb         cmp        qword [rdi+0xe8], 0x0
00000000000072c3         jle        loc_7349

00000000000072c9         xor        r13d, r13d
00000000000072cc         nop        dword [rax]

                     loc_72d0:
00000000000072d0         mov        rax, qword [r14+0xf8]                       ; CODE XREF=match_ctx_clean+151
00000000000072d7         mov        r12, qword [rax+r13*8]
00000000000072db         cmp        qword [r12+0x20], 0x0
00000000000072e1         jle        loc_730d

00000000000072e3         xor        ebx, ebx
00000000000072e5         nop        dword [rax]

                     loc_72e8:
00000000000072e8         mov        rax, qword [r12+0x28]                       ; CODE XREF=match_ctx_clean+91
00000000000072ed         mov        rbp, qword [rax+rbx*8]
00000000000072f1         add        rbx, 0x1
00000000000072f5         mov        rdi, qword [rbp+0x20]                       ; argument "__ptr" for method j_free
00000000000072f9         call       j_free                                      ; free
00000000000072fe         mov        rdi, rbp                                    ; argument "__ptr" for method j_free
0000000000007301         call       j_free                                      ; free
0000000000007306         cmp        qword [r12+0x20], rbx
000000000000730b         jg         loc_72e8

                     loc_730d:
000000000000730d         mov        rdi, qword [r12+0x28]                       ; argument "__ptr" for method j_free, CODE XREF=match_ctx_clean+49
0000000000007312         call       j_free                                      ; free
0000000000007317         mov        rax, qword [r12+0x10]
000000000000731c         test       rax, rax
000000000000731f         je         loc_7334

0000000000007321         mov        rdi, qword [rax+0x10]                       ; argument "__ptr" for method j_free
0000000000007325         call       j_free                                      ; free
000000000000732a         mov        rdi, qword [r12+0x10]                       ; argument "__ptr" for method j_free
000000000000732f         call       j_free                                      ; free

                     loc_7334:
0000000000007334         mov        rdi, r12                                    ; argument "__ptr" for method j_free, CODE XREF=match_ctx_clean+111
0000000000007337         add        r13, 0x1
000000000000733b         call       j_free                                      ; free
0000000000007340         cmp        qword [r14+0xe8], r13
0000000000007347         jg         loc_72d0

                     loc_7349:
0000000000007349         pop        rbx                                         ; CODE XREF=match_ctx_clean+19
000000000000734a         mov        qword [r14+0xe8], 0x0
0000000000007355         mov        qword [r14+0xc8], 0x0
0000000000007360         pop        rbp
0000000000007361         pop        r12
0000000000007363         pop        r13
0000000000007365         pop        r14
0000000000007367         ret
                        ; endp
0000000000007368         align      16                                          ; End of unwind block (FDE at 0x16d24)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_string_char_size_at.part.0:
0000000000007370         mov        rcx, qword [rdi+0x30]                       ; Begin of unwind block (FDE at 0x16d60), CODE XREF=check_node_accept_bytes.isra.31+58, parse_bracket_element.constprop.37+59, parse_bracket_element.constprop.37+463
0000000000007374         lea        rax, qword [rsi+1]
0000000000007378         cmp        rax, rcx
000000000000737b         jge        loc_73b8

000000000000737d         mov        rdx, qword [rdi+0x10]
0000000000007381         lea        rdi, qword [rax*4]
0000000000007389         cmp        dword [rdx+rax*4], 0xffffffff
000000000000738d         jne        loc_73b8

000000000000738f         sub        rcx, rsi
0000000000007392         lea        rsi, qword [rdx+rdi-4]
0000000000007397         mov        edx, 0x2
000000000000739c         jmp        loc_73ab
000000000000739e         align      32

                     loc_73a0:
00000000000073a0         add        rdx, 0x1                                    ; CODE XREF=re_string_char_size_at.part.0+64
00000000000073a4         cmp        dword [rsi+rdx*4-4], 0xffffffff
00000000000073a9         jne        loc_73bd

                     loc_73ab:
00000000000073ab         cmp        rdx, rcx                                    ; CODE XREF=re_string_char_size_at.part.0+44
00000000000073ae         mov        eax, edx
00000000000073b0         jne        loc_73a0

00000000000073b2         ret
                        ; endp
00000000000073b4         align      8

                     loc_73b8:
00000000000073b8         mov        eax, 0x1                                    ; CODE XREF=re_string_char_size_at.part.0+11, re_string_char_size_at.part.0+29

                     loc_73bd:
00000000000073bd         ret                                                    ; CODE XREF=re_string_char_size_at.part.0+57
                        ; endp
00000000000073bf         align      64                                          ; End of unwind block (FDE at 0x16d60)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_node_set_compare.part.2:
00000000000073c0         mov        rdx, qword [rdi+8]                          ; Begin of unwind block (FDE at 0x16d74), CODE XREF=re_acquire_state_context+163, re_acquire_state+128
00000000000073c4         xor        eax, eax
00000000000073c6         cmp        rdx, qword [rsi+8]
00000000000073ca         je         loc_73d0

00000000000073cc         ret
                        ; endp
00000000000073ce         align      16

                     loc_73d0:
00000000000073d0         lea        rax, qword [rdx-1]                          ; CODE XREF=re_node_set_compare.part.2+10
00000000000073d4         lea        rdx, qword [rax*8]
00000000000073dc         jmp        loc_73fd
00000000000073de         align      32

                     loc_73e0:
00000000000073e0         mov        rcx, qword [rdi+0x10]                       ; CODE XREF=re_node_set_compare.part.2+64
00000000000073e4         mov        r8, qword [rcx+rdx]
00000000000073e8         mov        rcx, qword [rsi+0x10]
00000000000073ec         mov        rcx, qword [rcx+rdx]
00000000000073f0         sub        rdx, 0x8
00000000000073f4         cmp        r8, rcx
00000000000073f7         jne        loc_7410

00000000000073f9         sub        rax, 0x1

                     loc_73fd:
00000000000073fd         test       rax, rax                                    ; CODE XREF=re_node_set_compare.part.2+28
0000000000007400         jns        loc_73e0

0000000000007402         mov        eax, 0x1
0000000000007407         ret
                        ; endp
0000000000007408         align      16

                     loc_7410:
0000000000007410         xor        eax, eax                                    ; CODE XREF=re_node_set_compare.part.2+55
0000000000007412         ret
                        ; endp
0000000000007413         align      32                                          ; End of unwind block (FDE at 0x16d74)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_node_set_contains.isra.3:
0000000000007420         xor        eax, eax                                    ; Begin of unwind block (FDE at 0x16d88), CODE XREF=check_arrival_expand_ecl_sub+43, expand_bkref_cache+371, expand_bkref_cache+537, expand_bkref_cache+599, sub_epsilon_src_nodes+124, sub_epsilon_src_nodes+264, sub_epsilon_src_nodes+305, sub_epsilon_src_nodes+350, sub_epsilon_src_nodes+372, sub_epsilon_src_nodes+435, sub_epsilon_src_nodes+456
0000000000007422         test       rdi, rdi
0000000000007425         jle        loc_7465

0000000000007427         mov        r8, qword [rsi]
000000000000742a         sub        rdi, 0x1
000000000000742e         xor        esi, esi

                     loc_7430:
0000000000007430         cmp        rsi, rdi                                    ; CODE XREF=re_node_set_contains.isra.3+103
0000000000007433         jae        loc_745d

0000000000007435         lea        rcx, qword [rsi+rdi]
0000000000007439         shr        rcx, 0x1
000000000000743c         cmp        rdx, qword [r8+rcx*8]
0000000000007440         jle        loc_7458

0000000000007442         jmp        loc_7470
0000000000007444         align      8

                     loc_7448:
0000000000007448         lea        rax, qword [rsi+rcx]                        ; CODE XREF=re_node_set_contains.isra.3+59
000000000000744c         shr        rax, 0x1
000000000000744f         cmp        qword [r8+rax*8], rdx
0000000000007453         jl         loc_7480

0000000000007455         mov        rcx, rax

                     loc_7458:
0000000000007458         cmp        rsi, rcx                                    ; CODE XREF=re_node_set_contains.isra.3+32
000000000000745b         jb         loc_7448

                     loc_745d:
000000000000745d         xor        eax, eax                                    ; CODE XREF=re_node_set_contains.isra.3+19
000000000000745f         cmp        rdx, qword [r8+rsi*8]
0000000000007463         je         loc_7490

                     loc_7465:
0000000000007465         ret                                                    ; CODE XREF=re_node_set_contains.isra.3+5
                        ; endp
0000000000007467         align      16

                     loc_7470:
0000000000007470         mov        rax, rcx                                    ; CODE XREF=re_node_set_contains.isra.3+34
0000000000007473         mov        rcx, rdi
0000000000007476         nop        word [cs:rax+rax]

                     loc_7480:
0000000000007480         lea        rsi, qword [rax+1]                          ; CODE XREF=re_node_set_contains.isra.3+51
0000000000007484         mov        rdi, rcx
0000000000007487         jmp        loc_7430
0000000000007489         align      16

                     loc_7490:
0000000000007490         lea        rax, qword [rsi+1]                          ; CODE XREF=re_node_set_contains.isra.3+67
0000000000007494         ret
                        ; endp
0000000000007495         align      32                                          ; End of unwind block (FDE at 0x16d88)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     check_arrival_expand_ecl_sub:
00000000000074a0         push       r15                                         ; Begin of unwind block (FDE at 0x16d9c), CODE XREF=check_arrival_expand_ecl_sub+224, check_arrival_expand_ecl+216
00000000000074a2         push       r14
00000000000074a4         lea        r14, qword [rsi+0x10]
00000000000074a8         push       r13
00000000000074aa         push       r12
00000000000074ac         mov        r15, rcx
00000000000074af         push       rbp
00000000000074b0         push       rbx
00000000000074b1         mov        r12, rdi
00000000000074b4         mov        rbp, rsi
00000000000074b7         mov        rbx, rdx
00000000000074ba         mov        r13d, r8d
00000000000074bd         sub        rsp, 0x8

                     loc_74c1:
00000000000074c1         mov        rdi, qword [rbp+8]                          ; CODE XREF=check_arrival_expand_ecl_sub+131
00000000000074c5         mov        rdx, rbx
00000000000074c8         mov        rsi, r14
00000000000074cb         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
00000000000074d0         test       rax, rax
00000000000074d3         jne        loc_7540

00000000000074d5         mov        rax, rbx
00000000000074d8         shl        rax, 0x4
00000000000074dc         add        rax, qword [r12]
00000000000074e0         movzx      edx, byte [rax+8]
00000000000074e4         cmp        edx, r13d
00000000000074e7         jne        loc_74ee

00000000000074e9         cmp        qword [rax], r15
00000000000074ec         je         loc_7528

                     loc_74ee:
00000000000074ee         mov        rsi, rbx                                    ; CODE XREF=check_arrival_expand_ecl_sub+71
00000000000074f1         mov        rdi, rbp
00000000000074f4         call       re_node_set_insert                          ; re_node_set_insert
00000000000074f9         test       al, al
00000000000074fb         je         loc_7558

00000000000074fd         lea        rbx, qword [rbx+rbx*2]
0000000000007501         mov        rdx, qword [r12+0x28]
0000000000007506         shl        rbx, 0x3
000000000000750a         add        rdx, rbx
000000000000750d         mov        rax, qword [rdx+8]
0000000000007511         test       rax, rax
0000000000007514         je         loc_7540

0000000000007516         cmp        rax, 0x2
000000000000751a         mov        rdx, qword [rdx+0x10]
000000000000751e         je         loc_7570

                     loc_7520:
0000000000007520         mov        rbx, qword [rdx]                            ; CODE XREF=check_arrival_expand_ecl_sub+243
0000000000007523         jmp        loc_74c1
0000000000007525         align      8

                     loc_7528:
0000000000007528         cmp        r13d, 0x9                                   ; CODE XREF=check_arrival_expand_ecl_sub+76
000000000000752c         jne        loc_7540

000000000000752e         mov        rsi, rbx
0000000000007531         mov        rdi, rbp
0000000000007534         call       re_node_set_insert                          ; re_node_set_insert
0000000000007539         test       al, al
000000000000753b         je         loc_7558

000000000000753d         nop        dword [rax]

                     loc_7540:
0000000000007540         xor        eax, eax                                    ; CODE XREF=check_arrival_expand_ecl_sub+51, check_arrival_expand_ecl_sub+116, check_arrival_expand_ecl_sub+140

                     loc_7542:
0000000000007542         add        rsp, 0x8                                    ; CODE XREF=check_arrival_expand_ecl_sub+231
0000000000007546         pop        rbx
0000000000007547         pop        rbp
0000000000007548         pop        r12
000000000000754a         pop        r13
000000000000754c         pop        r14
000000000000754e         pop        r15
0000000000007550         ret
                        ; endp
0000000000007551         align      8

                     loc_7558:
0000000000007558         add        rsp, 0x8                                    ; CODE XREF=check_arrival_expand_ecl_sub+91, check_arrival_expand_ecl_sub+155
000000000000755c         mov        eax, 0xc
0000000000007561         pop        rbx
0000000000007562         pop        rbp
0000000000007563         pop        r12
0000000000007565         pop        r13
0000000000007567         pop        r14
0000000000007569         pop        r15
000000000000756b         ret
                        ; endp
000000000000756c         align      16

                     loc_7570:
0000000000007570         mov        rdx, qword [rdx+8]                          ; CODE XREF=check_arrival_expand_ecl_sub+126
0000000000007574         mov        r8d, r13d
0000000000007577         mov        rcx, r15
000000000000757a         mov        rsi, rbp
000000000000757d         mov        rdi, r12
0000000000007580         call       check_arrival_expand_ecl_sub                ; check_arrival_expand_ecl_sub
0000000000007585         test       eax, eax
0000000000007587         jne        loc_7542

0000000000007589         mov        rax, qword [r12+0x28]
000000000000758e         mov        rdx, qword [rax+rbx+0x10]
0000000000007593         jmp        loc_7520
0000000000007595         align      32                                          ; End of unwind block (FDE at 0x16d9c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_node_set_remove_at.isra.4.part.5:
00000000000075a0         mov        rax, qword [rdi]                            ; Begin of unwind block (FDE at 0x16e00), CODE XREF=re_acquire_state_context+473, sub_epsilon_src_nodes+477, update_cur_sifted_state+1890
00000000000075a3         cmp        rax, rdx
00000000000075a6         jle        loc_75d2

00000000000075a8         sub        rax, 0x1
00000000000075ac         cmp        rdx, rax
00000000000075af         mov        qword [rdi], rax
00000000000075b2         jge        loc_75d2

00000000000075b4         mov        rax, qword [rsi]
00000000000075b7         nop        word [rax+rax]

                     loc_75c0:
00000000000075c0         mov        rcx, qword [rax+rdx*8+8]                    ; CODE XREF=re_node_set_remove_at.isra.4.part.5+48
00000000000075c5         mov        qword [rax+rdx*8], rcx
00000000000075c9         add        rdx, 0x1
00000000000075cd         cmp        rdx, qword [rdi]
00000000000075d0         jl         loc_75c0

                     loc_75d2:
00000000000075d2         ret                                                    ; CODE XREF=re_node_set_remove_at.isra.4.part.5+6, re_node_set_remove_at.isra.4.part.5+18
                        ; endp
00000000000075d4         align      32                                          ; End of unwind block (FDE at 0x16e00)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     optimize_subexps:
00000000000075e0         movzx      eax, byte [rsi+0x30]                        ; Begin of unwind block (FDE at 0x16e14), DATA XREF=re_compile_internal+1553
00000000000075e4         cmp        al, 0x4
00000000000075e6         je         loc_7640

00000000000075e8         cmp        al, 0x11
00000000000075ea         je         loc_75f0

                     loc_75ec:
00000000000075ec         xor        eax, eax                                    ; CODE XREF=optimize_subexps+23, optimize_subexps+29, optimize_subexps+74, optimize_subexps+93, optimize_subexps+106
00000000000075ee         ret
                        ; endp
00000000000075ef         align      16

                     loc_75f0:
00000000000075f0         mov        rax, qword [rsi+8]                          ; CODE XREF=optimize_subexps+10
00000000000075f4         test       rax, rax
00000000000075f7         je         loc_75ec

00000000000075f9         cmp        byte [rax+0x30], 0x11
00000000000075fd         jne        loc_75ec

00000000000075ff         mov        rcx, qword [rax+0x28]
0000000000007603         mov        rax, qword [rax+8]
0000000000007607         test       rax, rax
000000000000760a         mov        qword [rsi+8], rax
000000000000760e         je         loc_7613

0000000000007610         mov        qword [rax], rsi

                     loc_7613:
0000000000007613         mov        rax, qword [rdi+0xe0]                       ; CODE XREF=optimize_subexps+46
000000000000761a         mov        rdx, qword [rsi+0x28]
000000000000761e         cmp        rcx, 0x3f
0000000000007622         mov        rdx, qword [rax+rdx*8]
0000000000007626         mov        qword [rax+rcx*8], rdx
000000000000762a         jg         loc_75ec

000000000000762c         mov        rax, 0xfffffffffffffffe
0000000000007633         rol        rax, cl
0000000000007636         and        qword [rdi+0xa0], rax
000000000000763d         jmp        loc_75ec
000000000000763f         align      64

                     loc_7640:
0000000000007640         mov        rax, qword [rdi+0xe0]                       ; CODE XREF=optimize_subexps+6
0000000000007647         test       rax, rax
000000000000764a         je         loc_75ec

000000000000764c         movsxd     rdx, dword [rsi+0x28]
0000000000007650         mov        rcx, qword [rax+rdx*8]
0000000000007654         mov        eax, 0x1
0000000000007659         shl        eax, cl
000000000000765b         mov        qword [rsi+0x28], rcx
000000000000765f         cdqe
0000000000007661         or         qword [rdi+0xa0], rax
0000000000007668         xor        eax, eax
000000000000766a         ret
                        ; endp
000000000000766b         align      16                                          ; End of unwind block (FDE at 0x16e14)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     calc_next:
0000000000007670         movzx      eax, byte [rsi+0x30]                        ; Begin of unwind block (FDE at 0x16e28), DATA XREF=re_compile_internal+1689
0000000000007674         mov        rdx, qword [rsi+8]
0000000000007678         cmp        al, 0xb
000000000000767a         je         loc_76c0

000000000000767c         cmp        al, 0x10
000000000000767e         je         loc_76a8

0000000000007680         test       rdx, rdx
0000000000007683         je         loc_768d

0000000000007685         mov        rax, qword [rsi+0x20]
0000000000007689         mov        qword [rdx+0x20], rax

                     loc_768d:
000000000000768d         mov        rax, qword [rsi+0x10]                       ; CODE XREF=calc_next+19
0000000000007691         test       rax, rax
0000000000007694         je         loc_769e

0000000000007696         mov        rdx, qword [rsi+0x20]
000000000000769a         mov        qword [rax+0x20], rdx

                     loc_769e:
000000000000769e         xor        eax, eax                                    ; CODE XREF=calc_next+36
00000000000076a0         ret
                        ; endp
00000000000076a1         align      8

                     loc_76a8:
00000000000076a8         mov        rax, qword [rsi+0x10]                       ; CODE XREF=calc_next+14
00000000000076ac         mov        rcx, qword [rax+0x18]
00000000000076b0         mov        qword [rdx+0x20], rcx
00000000000076b4         mov        rdx, qword [rsi+0x20]
00000000000076b8         mov        qword [rax+0x20], rdx
00000000000076bc         xor        eax, eax
00000000000076be         ret
                        ; endp
00000000000076bf         align      64

                     loc_76c0:
00000000000076c0         mov        qword [rdx+0x20], rsi                       ; CODE XREF=calc_next+10
00000000000076c4         xor        eax, eax
00000000000076c6         ret
                        ; endp
00000000000076c7         align      16                                          ; End of unwind block (FDE at 0x16e28)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112


                     check_dst_limits.isra.13:
00000000000076d0         push       r15                                         ; Begin of unwind block (FDE at 0x16e3c), CODE XREF=sift_states_backward+396, update_cur_sifted_state+1699
00000000000076d2         push       r14
00000000000076d4         push       r13
00000000000076d6         push       r12
00000000000076d8         push       rbp
00000000000076d9         push       rbx
00000000000076da         xor        ebx, ebx
00000000000076dc         sub        rsp, 0x48
00000000000076e0         mov        rax, qword [rdi+0x98]
00000000000076e7         mov        r15, qword [rdi+0xc8]
00000000000076ee         mov        r12, qword [rsp+0x78+arg_0]
00000000000076f6         mov        qword [rsp+0x78+var_70], rax
00000000000076fb         mov        rbp, r15

                     loc_76fe:
00000000000076fe         cmp        rbx, rbp                                    ; CODE XREF=check_dst_limits.isra.13+519
0000000000007701         jge        loc_775b

0000000000007703         lea        rax, qword [rbx+rbp]
0000000000007707         mov        r13, qword [rdi+0xd8]
000000000000770e         mov        r10, rax
0000000000007711         shr        r10, 0x3f
0000000000007715         add        r10, rax
0000000000007718         sar        r10, 0x1
000000000000771b         lea        rax, qword [r10+r10*4]
000000000000771f         cmp        r8, qword [r13+rax*8+8]
0000000000007724         jle        loc_7756

0000000000007726         jmp        loc_78c0
000000000000772b         align      16

                     loc_7730:
0000000000007730         lea        r11, qword [rbx+r10]                        ; CODE XREF=check_dst_limits.isra.13+137
0000000000007734         mov        rax, r11
0000000000007737         shr        rax, 0x3f
000000000000773b         add        rax, r11
000000000000773e         sar        rax, 0x1
0000000000007741         lea        r11, qword [rax+rax*4]
0000000000007745         mov        r14, rax
0000000000007748         cmp        qword [r13+r11*8+8], r8
000000000000774d         jl         loc_78d0

0000000000007753         mov        r10, rax

                     loc_7756:
0000000000007756         cmp        rbx, r10                                    ; CODE XREF=check_dst_limits.isra.13+84
0000000000007759         jl         loc_7730

                     loc_775b:
000000000000775b         cmp        r15, rbx                                    ; CODE XREF=check_dst_limits.isra.13+49
000000000000775e         jle        loc_7900

0000000000007764         mov        r11, qword [rdi+0xd8]
000000000000776b         lea        rax, qword [rbx+rbx*4]
000000000000776f         lea        rax, qword [r11+rax*8]
0000000000007773         cmp        r8, qword [rax+8]
0000000000007777         mov        rax, 0xffffffffffffffff
000000000000777e         cmovne     rbx, rax

                     loc_7782:
0000000000007782         mov        rax, r15                                    ; CODE XREF=sub_78e0+39
0000000000007785         xor        ebp, ebp

                     loc_7787:
0000000000007787         cmp        rbp, rax                                    ; CODE XREF=sub_78e0+23
000000000000778a         jge        loc_77e4

000000000000778c         lea        r11, qword [rbp+rax]
0000000000007791         mov        r10, r11
0000000000007794         shr        r10, 0x3f
0000000000007798         add        r10, r11
000000000000779b         mov        r11, qword [rdi+0xd8]
00000000000077a2         sar        r10, 0x1
00000000000077a5         lea        r13, qword [r10+r10*4]
00000000000077a9         cmp        r12, qword [r11+r13*8+8]
00000000000077ae         jle        loc_77df

00000000000077b0         jmp        sub_78e0                                    ; sub_78e0
                        ; endp
00000000000077b5         align      8

                     loc_77b8:
00000000000077b8         lea        r13, qword [rbp+r10]                        ; CODE XREF=check_dst_limits.isra.13+274
00000000000077bd         mov        rax, r13
00000000000077c0         shr        rax, 0x3f
00000000000077c4         add        rax, r13
00000000000077c7         sar        rax, 0x1
00000000000077ca         lea        r13, qword [rax+rax*4]
00000000000077ce         mov        r14, rax
00000000000077d1         cmp        qword [r11+r13*8+8], r12
00000000000077d6         jl         loc_78f0

00000000000077dc         mov        r10, rax

                     loc_77df:
00000000000077df         cmp        rbp, r10                                    ; CODE XREF=check_dst_limits.isra.13+222
00000000000077e2         jl         loc_77b8

                     loc_77e4:
00000000000077e4         cmp        r15, rbp                                    ; CODE XREF=check_dst_limits.isra.13+186
00000000000077e7         jle        loc_7910

00000000000077ed         mov        r10, qword [rdi+0xd8]
00000000000077f4         lea        rax, qword [rbp+rbp*4]
00000000000077f9         lea        rax, qword [r10+rax*8]
00000000000077fd         cmp        r12, qword [rax+8]
0000000000007801         mov        rax, 0xffffffffffffffff
0000000000007808         cmovne     rbp, rax

                     loc_780c:
000000000000780c         cmp        qword [rsi], 0x0                            ; CODE XREF=sub_78e0+55
0000000000007810         jle        loc_7932

0000000000007816         mov        qword [rsp+0x78+var_48], rbp
000000000000781b         mov        qword [rsp+0x78+var_58], r9
0000000000007820         mov        r13, rdi
0000000000007823         mov        qword [rsp+0x78+var_60], r8
0000000000007828         mov        qword [rsp+0x78+var_68], rcx
000000000000782d         xor        r14d, r14d
0000000000007830         mov        qword [rsp+0x78+var_40], rsi
0000000000007835         mov        qword [rsp+0x78+var_50], rbx
000000000000783a         mov        rbp, rdx
000000000000783d         mov        r15, r12

                     loc_7840:
0000000000007840         mov        rax, qword [rbp]                            ; CODE XREF=sub_78e0+76
0000000000007844         mov        rdx, qword [r13+0xd8]
000000000000784b         mov        rdi, r13
000000000000784e         mov        r9, qword [rsp+0x78+var_50]
0000000000007853         mov        r8, qword [rsp+0x78+var_60]
0000000000007858         mov        rcx, qword [rsp+0x78+var_68]
000000000000785d         mov        rsi, qword [rax+r14*8]
0000000000007861         lea        rax, qword [rsi+rsi*4]
0000000000007865         lea        rax, qword [rdx+rax*8]
0000000000007869         mov        rdx, qword [rsp+0x78+var_70]
000000000000786e         mov        rax, qword [rax]
0000000000007871         shl        rax, 0x4
0000000000007875         add        rax, qword [rdx]
0000000000007878         mov        r12, qword [rax]
000000000000787b         mov        rdx, r12
000000000000787e         call       check_dst_limits_calc_pos                   ; check_dst_limits_calc_pos
0000000000007883         mov        ebx, eax
0000000000007885         mov        rax, qword [rbp]
0000000000007889         mov        r9, qword [rsp+0x78+var_48]
000000000000788e         mov        rcx, qword [rsp+0x78+var_58]
0000000000007893         mov        r8, r15
0000000000007896         mov        rdx, r12
0000000000007899         mov        rdi, r13
000000000000789c         mov        rsi, qword [rax+r14*8]
00000000000078a0         call       check_dst_limits_calc_pos                   ; check_dst_limits_calc_pos
00000000000078a5         cmp        ebx, eax
00000000000078a7         je         loc_7920

00000000000078a9         mov        eax, 0x1

                     loc_78ae:
00000000000078ae         add        rsp, 0x48                                   ; CODE XREF=sub_78e0+84
00000000000078b2         pop        rbx
00000000000078b3         pop        rbp
00000000000078b4         pop        r12
00000000000078b6         pop        r13
00000000000078b8         pop        r14
00000000000078ba         pop        r15
00000000000078bc         ret
                        ; endp
00000000000078bd         align      64

                     loc_78c0:
00000000000078c0         mov        r14, r10                                    ; CODE XREF=check_dst_limits.isra.13+86
00000000000078c3         mov        r10, rbp
00000000000078c6         nop        word [cs:rax+rax]

                     loc_78d0:
00000000000078d0         lea        rbx, qword [r14+1]                          ; CODE XREF=check_dst_limits.isra.13+125
00000000000078d4         mov        rbp, r10
00000000000078d7         jmp        loc_76fe
00000000000078dc         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_78e0:
00000000000078e0         mov        r14, r10                                    ; CODE XREF=check_dst_limits.isra.13+224
00000000000078e3         mov        r10, rax
00000000000078e6         nop        word [cs:rax+rax]
                        ; endp

                     loc_78f0:
00000000000078f0         lea        rbp, qword [r14+1]                          ; CODE XREF=check_dst_limits.isra.13+262
00000000000078f4         mov        rax, r10
00000000000078f7         jmp        loc_7787
00000000000078fc         align      256

                     loc_7900:
0000000000007900         mov        rbx, 0xffffffffffffffff                     ; CODE XREF=check_dst_limits.isra.13+142
0000000000007907         jmp        loc_7782
000000000000790c         align      16

                     loc_7910:
0000000000007910         mov        rbp, 0xffffffffffffffff                     ; CODE XREF=check_dst_limits.isra.13+279
0000000000007917         jmp        loc_780c
000000000000791c         align      32

                     loc_7920:
0000000000007920         mov        rax, qword [rsp+0x78+var_40]                ; CODE XREF=check_dst_limits.isra.13+471
0000000000007925         add        r14, 0x1
0000000000007929         cmp        r14, qword [rax]
000000000000792c         jl         loc_7840

                     loc_7932:
0000000000007932         xor        eax, eax                                    ; CODE XREF=check_dst_limits.isra.13+320
0000000000007934         jmp        loc_78ae
0000000000007939         align      64                                          ; End of unwind block (FDE at 0x16e3c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_node_set_merge:
0000000000007940         test       rsi, rsi                                    ; Begin of unwind block (FDE at 0x16e8c), CODE XREF=calc_eclosure_iter+306, check_arrival_expand_ecl+275, expand_bkref_cache+694, build_trtable+557, check_arrival+389, check_arrival+692, update_cur_sifted_state+870, sub_12950+791
0000000000007943         je         loc_7a38

0000000000007949         mov        rdx, qword [rsi+8]
000000000000794d         test       rdx, rdx
0000000000007950         je         loc_7a38

0000000000007956         push       r12
0000000000007958         push       rbp
0000000000007959         mov        r12, rsi
000000000000795c         push       rbx
000000000000795d         mov        rax, qword [rdi+8]
0000000000007961         mov        rbx, rdi
0000000000007964         mov        rsi, qword [rdi]
0000000000007967         lea        rcx, qword [rax+rdx*2]
000000000000796b         cmp        rsi, rcx
000000000000796e         jl         loc_7ab8

                     loc_7974:
0000000000007974         test       rax, rax                                    ; CODE XREF=re_node_set_merge+420
0000000000007977         je         loc_7af0

000000000000797d         lea        rbp, qword [rax+rdx*2]
0000000000007981         sub        rdx, 0x1
0000000000007985         sub        rax, 0x1
0000000000007989         mov        rdi, rdx
000000000000798c         not        rdi

                     loc_798f:
000000000000798f         test       rdi, rdi                                    ; CODE XREF=re_node_set_merge+270, re_node_set_merge+284
0000000000007992         jns        loc_79d0

                     loc_7994:
0000000000007994         test       rax, rax                                    ; CODE XREF=re_node_set_merge+139
0000000000007997         js         loc_79d0

0000000000007999         mov        rcx, qword [rbx+0x10]
000000000000799d         mov        rsi, qword [r12+0x10]
00000000000079a2         mov        rsi, qword [rsi+rdx*8]
00000000000079a6         cmp        qword [rcx+rax*8], rsi
00000000000079aa         je         loc_7a40

00000000000079b0         jge        loc_7a58

00000000000079b6         sub        rdx, 0x1
00000000000079ba         sub        rbp, 0x1
00000000000079be         mov        rdi, rdx
00000000000079c1         mov        qword [rcx+rbp*8], rsi
00000000000079c5         not        rdi
00000000000079c8         test       rdi, rdi
00000000000079cb         js         loc_7994

00000000000079cd         nop        dword [rax]

                     loc_79d0:
00000000000079d0         test       rdx, rdx                                    ; CODE XREF=re_node_set_merge+82, re_node_set_merge+87
00000000000079d3         jns        loc_7a68

                     loc_79d9:
00000000000079d9         mov        rcx, qword [rbx+8]                          ; CODE XREF=re_node_set_merge+325
00000000000079dd         mov        rax, qword [r12+8]
00000000000079e2         lea        r8, qword [rcx+rax*2-1]
00000000000079e7         mov        rdx, r8
00000000000079ea         sub        rdx, rbp
00000000000079ed         add        rdx, 0x1
00000000000079f1         je         loc_7a2a

00000000000079f3         mov        rdi, qword [rbx+0x10]
00000000000079f7         lea        rax, qword [rcx-1]
00000000000079fb         add        rcx, rdx
00000000000079fe         mov        qword [rbx+8], rcx
0000000000007a02         nop        word [rax+rax]

                     loc_7a08:
0000000000007a08         mov        rsi, qword [rdi+r8*8]                       ; CODE XREF=re_node_set_merge+232, re_node_set_merge+343
0000000000007a0c         mov        rcx, qword [rdi+rax*8]
0000000000007a10         lea        r9, qword [rax+rdx]
0000000000007a14         lea        r9, qword [rdi+r9*8]
0000000000007a18         cmp        rsi, rcx
0000000000007a1b         jle        loc_7a90

0000000000007a1d         sub        r8, 0x1
0000000000007a21         sub        rdx, 0x1
0000000000007a25         mov        qword [r9], rsi
0000000000007a28         jne        loc_7a08

                     loc_7a2a:
0000000000007a2a         xor        eax, eax                                    ; CODE XREF=re_node_set_merge+177, re_node_set_merge+463

                     loc_7a2c:
0000000000007a2c         pop        rbx                                         ; CODE XREF=re_node_set_merge+364, re_node_set_merge+473
0000000000007a2d         pop        rbp
0000000000007a2e         pop        r12
0000000000007a30         ret
                        ; endp
0000000000007a31         align      8

                     loc_7a38:
0000000000007a38         xor        eax, eax                                    ; CODE XREF=re_node_set_merge+3, re_node_set_merge+16
0000000000007a3a         ret
                        ; endp
0000000000007a3b         align      64

                     loc_7a40:
0000000000007a40         sub        rdx, 0x1                                    ; CODE XREF=re_node_set_merge+106
0000000000007a44         sub        rax, 0x1
0000000000007a48         mov        rdi, rdx
0000000000007a4b         not        rdi
0000000000007a4e         jmp        loc_798f
0000000000007a53         align      8

                     loc_7a58:
0000000000007a58         sub        rax, 0x1                                    ; CODE XREF=re_node_set_merge+112
0000000000007a5c         jmp        loc_798f
0000000000007a61         align      8

                     loc_7a68:
0000000000007a68         mov        rax, qword [rbx+0x10]                       ; CODE XREF=re_node_set_merge+147
0000000000007a6c         add        rdx, 0x1
0000000000007a70         mov        rsi, qword [r12+0x10]                       ; argument "__src" for method j_memcpy
0000000000007a75         sub        rbp, rdx
0000000000007a78         shl        rdx, 0x3                                    ; argument "__n" for method j_memcpy
0000000000007a7c         lea        rdi, qword [rax+rbp*8]                      ; argument "__dest" for method j_memcpy
0000000000007a80         call       j_memcpy                                    ; memcpy
0000000000007a85         jmp        loc_79d9
0000000000007a8a         align      16

                     loc_7a90:
0000000000007a90         sub        rax, 0x1                                    ; CODE XREF=re_node_set_merge+219
0000000000007a94         mov        qword [r9], rcx
0000000000007a97         jns        loc_7a08

0000000000007a9d         lea        rsi, qword [rdi+rbp*8]                      ; argument "__src" for method j_memcpy
0000000000007aa1         shl        rdx, 0x3                                    ; argument "__n" for method j_memcpy
0000000000007aa5         call       j_memcpy                                    ; memcpy
0000000000007aaa         xor        eax, eax
0000000000007aac         jmp        loc_7a2c
0000000000007ab1         align      8

                     loc_7ab8:
0000000000007ab8         add        rdx, rsi                                    ; CODE XREF=re_node_set_merge+46
0000000000007abb         mov        rdi, qword [rdi+0x10]                       ; argument "__ptr" for method j_realloc
0000000000007abf         lea        rbp, qword [rdx+rdx]
0000000000007ac3         shl        rdx, 0x4
0000000000007ac7         mov        rsi, rdx                                    ; argument "__size" for method j_realloc
0000000000007aca         call       j_realloc                                   ; realloc
0000000000007acf         test       rax, rax
0000000000007ad2         je         loc_7b14

0000000000007ad4         mov        qword [rbx+0x10], rax
0000000000007ad8         mov        qword [rbx], rbp
0000000000007adb         mov        rax, qword [rbx+8]
0000000000007adf         mov        rdx, qword [r12+8]
0000000000007ae4         jmp        loc_7974
0000000000007ae9         align      16

                     loc_7af0:
0000000000007af0         mov        qword [rbx+8], rdx                          ; CODE XREF=re_node_set_merge+55
0000000000007af4         mov        rax, qword [r12+8]
0000000000007af9         mov        rdi, qword [rbx+0x10]                       ; argument "__dest" for method j_memcpy
0000000000007afd         mov        rsi, qword [r12+0x10]                       ; argument "__src" for method j_memcpy
0000000000007b02         lea        rdx, qword [rax*8]                          ; argument "__n" for method j_memcpy
0000000000007b0a         call       j_memcpy                                    ; memcpy
0000000000007b0f         jmp        loc_7a2a

                     loc_7b14:
0000000000007b14         mov        eax, 0xc                                    ; CODE XREF=re_node_set_merge+402
0000000000007b19         jmp        loc_7a2c
0000000000007b1e         align      32                                          ; End of unwind block (FDE at 0x16e8c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_58: int8_t, -88
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_7C: int32_t, -124
        ;    var_7D: int8_t, -125
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144


                     calc_eclosure_iter:
0000000000007b20         push       r15                                         ; Begin of unwind block (FDE at 0x16ec4), CODE XREF=calc_eclosure_iter+654, sub_12950+170
0000000000007b22         push       r14
0000000000007b24         mov        r15, rsi
0000000000007b27         push       r13
0000000000007b29         push       r12
0000000000007b2b         push       rbp
0000000000007b2c         push       rbx
0000000000007b2d         lea        rbx, qword [rdx+rdx*2]
0000000000007b31         mov        rbp, rdx
0000000000007b34         sub        rsp, 0x68
0000000000007b38         mov        r12, qword [rsi+0x28]
0000000000007b3c         shl        rbx, 0x3
0000000000007b40         mov        rax, qword [fs:0x28]
0000000000007b49         mov        qword [rsp+0x98+var_40], rax
0000000000007b4e         xor        eax, eax
0000000000007b50         mov        qword [rsp+0x98+var_88], rdi
0000000000007b55         mov        dword [rsp+0x98+var_7C], ecx
0000000000007b59         add        r12, rbx
0000000000007b5c         mov        rax, qword [r12+8]
0000000000007b61         mov        qword [rsp+0x98+var_70], 0x0
0000000000007b6a         lea        rdi, qword [rax+1]
0000000000007b6e         mov        qword [rsp+0x98+var_78], rdi
0000000000007b73         shl        rdi, 0x3                                    ; argument "__size" for method j_malloc
0000000000007b77         call       j_malloc                                    ; malloc
0000000000007b7c         test       rax, rax
0000000000007b7f         mov        qword [rsp+0x98+var_68], rax
0000000000007b84         je         loc_7dc0

0000000000007b8a         mov        rax, qword [r15+0x30]
0000000000007b8e         mov        rdx, qword [r15]
0000000000007b91         mov        r13, rbp
0000000000007b94         shl        r13, 0x4
0000000000007b98         mov        qword [rax+rbx+8], 0xffffffffffffffff
0000000000007ba1         lea        rax, qword [rdx+r13]
0000000000007ba5         mov        r8d, dword [rax+8]
0000000000007ba9         test       r8d, 0x3ff00
0000000000007bb0         jne        loc_7d50

                     loc_7bb6:
0000000000007bb6         test       byte [rax+8], 0x8                           ; CODE XREF=calc_eclosure_iter+589, calc_eclosure_iter+637
0000000000007bba         je         loc_7c80

0000000000007bc0         mov        rsi, qword [r15+0x28]
0000000000007bc4         lea        rax, qword [rsi+rbx]
0000000000007bc8         cmp        qword [rax+8], 0x0
0000000000007bcd         jle        loc_7c80

0000000000007bd3         lea        rdx, qword [rsp+0x98+var_78]
0000000000007bd8         mov        byte [rsp+0x98+var_7D], 0x0
0000000000007bdd         xor        r14d, r14d
0000000000007be0         lea        r12, qword [rsp+0x98+var_58]
0000000000007be5         mov        qword [rsp+0x98+var_90], rdx
0000000000007bea         jmp        loc_7c06
0000000000007bec         align      16

                     loc_7bf0:
0000000000007bf0         mov        rsi, qword [r15+0x28]                       ; CODE XREF=calc_eclosure_iter+325, calc_eclosure_iter+342
0000000000007bf4         add        r14, 0x1
0000000000007bf8         lea        rax, qword [rsi+rbx]
0000000000007bfc         cmp        qword [rax+8], r14
0000000000007c00         jle        loc_7d07

                     loc_7c06:
0000000000007c06         mov        rax, qword [rax+0x10]                       ; CODE XREF=calc_eclosure_iter+202, calc_eclosure_iter+481
0000000000007c0a         mov        rdx, qword [rax+r14*8]
0000000000007c0e         mov        rax, qword [r15+0x30]
0000000000007c12         lea        r8, qword [rdx+rdx*2]
0000000000007c16         lea        r13, qword [r8*8]
0000000000007c1e         add        rax, r13
0000000000007c21         mov        rcx, qword [rax+8]
0000000000007c25         cmp        rcx, 0xffffffffffffffff
0000000000007c29         je         loc_7cf0

0000000000007c2f         test       rcx, rcx
0000000000007c32         je         loc_7da8

0000000000007c38         movdqu     xmm0, xmmword [rax]
0000000000007c3c         movaps     xmmword [rsp+0x98+var_58], xmm0
0000000000007c41         mov        rax, qword [rax+0x10]
0000000000007c45         mov        qword [rsp+0x98+var_48], rax

                     loc_7c4a:
0000000000007c4a         mov        rdi, qword [rsp+0x98+var_90]                ; CODE XREF=calc_eclosure_iter+661
0000000000007c4f         mov        rsi, r12
0000000000007c52         call       re_node_set_merge                           ; re_node_set_merge
0000000000007c57         test       eax, eax
0000000000007c59         jne        loc_7cc6

0000000000007c5b         mov        rax, qword [r15+0x30]
0000000000007c5f         cmp        qword [rax+r13+8], 0x0
0000000000007c65         jne        loc_7bf0

0000000000007c67         mov        rdi, qword [rsp+0x98+var_48]                ; argument "__ptr" for method j_free
0000000000007c6c         call       j_free                                      ; free
0000000000007c71         mov        byte [rsp+0x98+var_7D], 0x1
0000000000007c76         jmp        loc_7bf0
0000000000007c7b         align      128

                     loc_7c80:
0000000000007c80         lea        rdi, qword [rsp+0x98+var_78]                ; CODE XREF=calc_eclosure_iter+154, calc_eclosure_iter+173, calc_eclosure_iter+566
0000000000007c85         mov        rsi, rbp
0000000000007c88         call       re_node_set_insert                          ; re_node_set_insert
0000000000007c8d         test       al, al
0000000000007c8f         je         loc_7dc0

0000000000007c95         mov        rax, qword [r15+0x30]

                     loc_7c99:
0000000000007c99         movdqa     xmm0, xmmword [rsp+0x98+var_78]             ; CODE XREF=calc_eclosure_iter+521, calc_eclosure_iter+532
0000000000007c9f         movups     xmmword [rax+rbx], xmm0
0000000000007ca3         mov        rdx, qword [rsp+0x98+var_68]
0000000000007ca8         mov        qword [rax+rbx+0x10], rdx

                     loc_7cad:
0000000000007cad         mov        rbx, qword [rsp+0x98+var_88]                ; CODE XREF=calc_eclosure_iter+546
0000000000007cb2         mov        rax, qword [rsp+0x98+var_68]
0000000000007cb7         movdqa     xmm0, xmmword [rsp+0x98+var_78]
0000000000007cbd         movaps     xmmword [rbx], xmm0
0000000000007cc0         mov        qword [rbx+0x10], rax
0000000000007cc4         xor        eax, eax

                     loc_7cc6:
0000000000007cc6         mov        rsi, qword [rsp+0x98+var_40]                ; CODE XREF=calc_eclosure_iter+313, calc_eclosure_iter+625, calc_eclosure_iter+667, calc_eclosure_iter+677
0000000000007ccb         xor        rsi, qword [fs:0x28]
0000000000007cd4         jne        loc_7dca

0000000000007cda         add        rsp, 0x68
0000000000007cde         pop        rbx
0000000000007cdf         pop        rbp
0000000000007ce0         pop        r12
0000000000007ce2         pop        r13
0000000000007ce4         pop        r14
0000000000007ce6         pop        r15
0000000000007ce8         ret
                        ; endp
0000000000007ce9         align      16

                     loc_7cf0:
0000000000007cf0         lea        rax, qword [rsi+rbx]                        ; CODE XREF=calc_eclosure_iter+265
0000000000007cf4         add        r14, 0x1
0000000000007cf8         mov        byte [rsp+0x98+var_7D], 0x1
0000000000007cfd         cmp        qword [rax+8], r14
0000000000007d01         jg         loc_7c06

                     loc_7d07:
0000000000007d07         lea        rdi, qword [rsp+0x98+var_78]                ; CODE XREF=calc_eclosure_iter+224
0000000000007d0c         mov        rsi, rbp
0000000000007d0f         call       re_node_set_insert                          ; re_node_set_insert
0000000000007d14         test       al, al
0000000000007d16         je         loc_7dc0

0000000000007d1c         cmp        byte [rsp+0x98+var_7C], 0x1
0000000000007d21         mov        rax, qword [r15+0x30]
0000000000007d25         lea        rdx, qword [rax+rbx]
0000000000007d29         je         loc_7c99

0000000000007d2f         cmp        byte [rsp+0x98+var_7D], 0x0
0000000000007d34         je         loc_7c99

0000000000007d3a         mov        qword [rdx+8], 0x0
0000000000007d42         jmp        loc_7cad
0000000000007d47         align      16

                     loc_7d50:
0000000000007d50         cmp        qword [r12+8], 0x0                          ; CODE XREF=calc_eclosure_iter+144
0000000000007d56         je         loc_7c80

0000000000007d5c         mov        rcx, qword [r12+0x10]
0000000000007d61         mov        rcx, qword [rcx]
0000000000007d64         shl        rcx, 0x4
0000000000007d68         test       byte [rdx+rcx+0xa], 0x4
0000000000007d6d         jne        loc_7bb6

0000000000007d73         shr        r8d, 0x8
0000000000007d77         mov        rcx, rbp
0000000000007d7a         mov        rdx, rbp
0000000000007d7d         and        r8d, 0x3ff
0000000000007d84         mov        rsi, rbp
0000000000007d87         mov        rdi, r15
0000000000007d8a         call       duplicate_node_closure                      ; duplicate_node_closure
0000000000007d8f         test       eax, eax
0000000000007d91         jne        loc_7cc6

0000000000007d97         mov        rax, qword [r15]
0000000000007d9a         add        rax, r13
0000000000007d9d         jmp        loc_7bb6
0000000000007da2         align      8

                     loc_7da8:
0000000000007da8         mov        rsi, r15                                    ; CODE XREF=calc_eclosure_iter+274
0000000000007dab         mov        rdi, r12
0000000000007dae         call       calc_eclosure_iter                          ; calc_eclosure_iter
0000000000007db3         test       eax, eax
0000000000007db5         je         loc_7c4a

0000000000007dbb         jmp        loc_7cc6

                     loc_7dc0:
0000000000007dc0         mov        eax, 0xc                                    ; CODE XREF=calc_eclosure_iter+100, calc_eclosure_iter+367, calc_eclosure_iter+502
0000000000007dc5         jmp        loc_7cc6

                     loc_7dca:
0000000000007dca         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=calc_eclosure_iter+436
                        ; endp
0000000000007dcf         align      16                                          ; End of unwind block (FDE at 0x16ec4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_5C: int32_t, -92


                     check_arrival_expand_ecl:
0000000000007dd0         push       r15                                         ; Begin of unwind block (FDE at 0x16f14), CODE XREF=expand_bkref_cache+680, check_arrival+884, check_arrival+1283
0000000000007dd2         push       r14
0000000000007dd4         mov        r14, rdi
0000000000007dd7         push       r13
0000000000007dd9         push       r12
0000000000007ddb         mov        r15, rsi
0000000000007dde         push       rbp
0000000000007ddf         push       rbx
0000000000007de0         mov        rbp, rdx
0000000000007de3         mov        ebx, ecx
0000000000007de5         sub        rsp, 0x38
0000000000007de9         mov        r12, qword [rsi+8]
0000000000007ded         mov        rax, qword [fs:0x28]
0000000000007df6         mov        qword [rsp+0x68+var_40], rax
0000000000007dfb         xor        eax, eax
0000000000007dfd         mov        qword [rsp+0x68+var_50], 0x0
0000000000007e06         lea        rdi, qword [r12*8]                          ; argument "__size" for method j_malloc
0000000000007e0e         mov        qword [rsp+0x68+var_58], r12
0000000000007e13         call       j_malloc                                    ; malloc
0000000000007e18         test       rax, rax
0000000000007e1b         mov        qword [rsp+0x68+var_48], rax
0000000000007e20         je         loc_7f1d

0000000000007e26         test       r12, r12
0000000000007e29         jle        loc_7ebb

0000000000007e2f         lea        r12, qword [rsp+0x68+var_58]
0000000000007e34         xor        r13d, r13d
0000000000007e37         nop        word [rax+rax]

                     loc_7e40:
0000000000007e40         mov        rax, qword [r15+0x10]                       ; CODE XREF=check_arrival_expand_ecl+233
0000000000007e44         mov        rdx, qword [rax+r13*8]
0000000000007e48         mov        rax, qword [r14+0x30]
0000000000007e4c         lea        rcx, qword [rdx+rdx*2]
0000000000007e50         lea        rsi, qword [rax+rcx*8]
0000000000007e54         mov        r8, qword [rsi+8]
0000000000007e58         test       r8, r8
0000000000007e5b         jle        loc_7ee0

0000000000007e61         mov        r10, qword [rsi+0x10]
0000000000007e65         mov        r9, qword [r14]
0000000000007e68         xor        ecx, ecx
0000000000007e6a         jmp        loc_7e79
0000000000007e6c         align      16

                     loc_7e70:
0000000000007e70         add        rcx, 0x1                                    ; CODE XREF=check_arrival_expand_ecl+191, check_arrival_expand_ecl+196
0000000000007e74         cmp        r8, rcx
0000000000007e77         je         loc_7ee0

                     loc_7e79:
0000000000007e79         mov        rdi, qword [r10+rcx*8]                      ; CODE XREF=check_arrival_expand_ecl+154
0000000000007e7d         mov        rax, rdi
0000000000007e80         shl        rax, 0x4
0000000000007e84         add        rax, r9
0000000000007e87         movzx      r11d, byte [rax+8]
0000000000007e8c         cmp        ebx, r11d
0000000000007e8f         jne        loc_7e70

0000000000007e91         cmp        rbp, qword [rax]
0000000000007e94         jne        loc_7e70

0000000000007e96         cmp        rdi, 0xffffffffffffffff
0000000000007e9a         je         loc_7ee0

0000000000007e9c         mov        r8d, ebx
0000000000007e9f         mov        rcx, rbp
0000000000007ea2         mov        rsi, r12
0000000000007ea5         mov        rdi, r14
0000000000007ea8         call       check_arrival_expand_ecl_sub                ; check_arrival_expand_ecl_sub
0000000000007ead         test       eax, eax
0000000000007eaf         jne        loc_7eec

                     loc_7eb1:
0000000000007eb1         add        r13, 0x1                                    ; CODE XREF=check_arrival_expand_ecl+282
0000000000007eb5         cmp        qword [r15+8], r13
0000000000007eb9         jg         loc_7e40

                     loc_7ebb:
0000000000007ebb         mov        rdi, qword [r15+0x10]                       ; argument "__ptr" for method j_free, CODE XREF=check_arrival_expand_ecl+89
0000000000007ebf         call       j_free                                      ; free
0000000000007ec4         mov        rax, qword [rsp+0x68+var_48]
0000000000007ec9         movdqa     xmm0, xmmword [rsp+0x68+var_58]
0000000000007ecf         mov        qword [r15+0x10], rax
0000000000007ed3         xor        eax, eax
0000000000007ed5         movaps     xmmword [r15], xmm0
0000000000007ed9         jmp        loc_7efe
0000000000007edb         align      32

                     loc_7ee0:
0000000000007ee0         mov        rdi, r12                                    ; CODE XREF=check_arrival_expand_ecl+139, check_arrival_expand_ecl+167, check_arrival_expand_ecl+202
0000000000007ee3         call       re_node_set_merge                           ; re_node_set_merge
0000000000007ee8         test       eax, eax
0000000000007eea         je         loc_7eb1

                     loc_7eec:
0000000000007eec         mov        rdi, qword [rsp+0x68+var_48]                ; argument "__ptr" for method j_free, CODE XREF=check_arrival_expand_ecl+223
0000000000007ef1         mov        dword [rsp+0x68+var_5C], eax
0000000000007ef5         call       j_free                                      ; free
0000000000007efa         mov        eax, dword [rsp+0x68+var_5C]

                     loc_7efe:
0000000000007efe         mov        rdx, qword [rsp+0x68+var_40]                ; CODE XREF=check_arrival_expand_ecl+265, check_arrival_expand_ecl+338
0000000000007f03         xor        rdx, qword [fs:0x28]
0000000000007f0c         jne        loc_7f24

0000000000007f0e         add        rsp, 0x38
0000000000007f12         pop        rbx
0000000000007f13         pop        rbp
0000000000007f14         pop        r12
0000000000007f16         pop        r13
0000000000007f18         pop        r14
0000000000007f1a         pop        r15
0000000000007f1c         ret
                        ; endp

                     loc_7f1d:
0000000000007f1d         mov        eax, 0xc                                    ; CODE XREF=check_arrival_expand_ecl+80
0000000000007f22         jmp        loc_7efe

                     loc_7f24:
0000000000007f24         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=check_arrival_expand_ecl+316
                        ; endp
0000000000007f29         align      16                                          ; End of unwind block (FDE at 0x16f14)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_node_set_add_intersect:
0000000000007f30         mov        r9, qword [rsi+8]                           ; Begin of unwind block (FDE at 0x16f60), CODE XREF=sub_epsilon_src_nodes+156, update_cur_sifted_state+263
0000000000007f34         xor        eax, eax
0000000000007f36         test       r9, r9
0000000000007f39         je         loc_7ff8

0000000000007f3f         mov        r11, qword [rdx+8]
0000000000007f43         test       r11, r11
0000000000007f46         je         loc_7ff8

0000000000007f4c         push       r13
0000000000007f4e         push       r12
0000000000007f50         lea        rax, qword [r9+r11]
0000000000007f54         push       rbp
0000000000007f55         push       rbx
0000000000007f56         mov        r12, rdx
0000000000007f59         mov        rbx, rdi
0000000000007f5c         mov        rbp, rsi
0000000000007f5f         sub        rsp, 0x8
0000000000007f63         mov        rcx, qword [rdi+8]
0000000000007f67         mov        r13, qword [rdi]
0000000000007f6a         mov        rdi, qword [rdi+0x10]
0000000000007f6e         lea        rdx, qword [rax+rcx]
0000000000007f72         cmp        rdx, r13
0000000000007f75         jg         loc_80a0

                     loc_7f7b:
0000000000007f7b         lea        rsi, qword [rcx+r9]                         ; CODE XREF=re_node_set_add_intersect+412
0000000000007f7f         mov        r13, qword [rbp+0x10]
0000000000007f83         mov        rdx, qword [r12+0x10]
0000000000007f88         sub        r9, 0x1
0000000000007f8c         sub        rcx, 0x1
0000000000007f90         add        rsi, r11
0000000000007f93         sub        r11, 0x1
0000000000007f97         mov        rax, qword [r13+r9*8]
0000000000007f9c         mov        r8, qword [rdx+r11*8]

                     loc_7fa0:
0000000000007fa0         cmp        rax, r8                                     ; CODE XREF=re_node_set_add_intersect+219
0000000000007fa3         je         loc_7fb6

                     loc_7fa5:
0000000000007fa5         jge        loc_8000                                    ; CODE XREF=re_node_set_add_intersect+132

0000000000007fa7         sub        r11, 0x1
0000000000007fab         js         loc_8010

                     loc_7fad:
0000000000007fad         mov        r8, qword [rdx+r11*8]                       ; CODE XREF=re_node_set_add_intersect+193
0000000000007fb1         cmp        rax, r8
0000000000007fb4         jne        loc_7fa5

                     loc_7fb6:
0000000000007fb6         test       rcx, rcx                                    ; CODE XREF=re_node_set_add_intersect+115
0000000000007fb9         jns        loc_7fca

0000000000007fbb         jmp        loc_7fd8
0000000000007fbd         align      64

                     loc_7fc0:
0000000000007fc0         sub        rcx, 0x1                                    ; CODE XREF=re_node_set_add_intersect+161
0000000000007fc4         cmp        rcx, 0xffffffffffffffff
0000000000007fc8         je         loc_7fd8

                     loc_7fca:
0000000000007fca         mov        r10, qword [rdi+rcx*8]                      ; CODE XREF=re_node_set_add_intersect+137
0000000000007fce         cmp        r10, r8
0000000000007fd1         jg         loc_7fc0

0000000000007fd3         cmp        r10, r8
0000000000007fd6         je         loc_7fe0

                     loc_7fd8:
0000000000007fd8         sub        rsi, 0x1                                    ; CODE XREF=re_node_set_add_intersect+139, re_node_set_add_intersect+152
0000000000007fdc         mov        qword [rdi+rsi*8], r8

                     loc_7fe0:
0000000000007fe0         sub        r9, 0x1                                     ; CODE XREF=re_node_set_add_intersect+166
0000000000007fe4         js         loc_8010

0000000000007fe6         sub        r11, 0x1
0000000000007fea         js         loc_8010

0000000000007fec         mov        rax, qword [r13+r9*8]
0000000000007ff1         jmp        loc_7fad
0000000000007ff3         align      8

                     loc_7ff8:
0000000000007ff8         ret                                                    ; CODE XREF=re_node_set_add_intersect+9, re_node_set_add_intersect+22
                        ; endp
0000000000007ffa         align      32768

                     loc_8000:
0000000000008000         sub        r9, 0x1                                     ; CODE XREF=loc_7fa5, DATA XREF=peek_token+607
0000000000008004         js         loc_8010

0000000000008006         mov        rax, qword [r13+r9*8]
000000000000800b         jmp        loc_7fa0
000000000000800d         align      16

                     loc_8010:
0000000000008010         mov        rcx, qword [rbx+8]                          ; CODE XREF=re_node_set_add_intersect+123, re_node_set_add_intersect+180, re_node_set_add_intersect+186, re_node_set_add_intersect+212
0000000000008014         mov        rdx, qword [rbp+8]
0000000000008018         add        rdx, rcx
000000000000801b         add        rdx, qword [r12+8]
0000000000008020         lea        rax, qword [rcx-1]
0000000000008024         lea        r9, qword [rdx-1]
0000000000008028         sub        rdx, rsi
000000000000802b         add        rcx, rdx
000000000000802e         test       rdx, rdx
0000000000008031         mov        qword [rbx+8], rcx
0000000000008035         jle        loc_807d

0000000000008037         test       rax, rax
000000000000803a         js         loc_807d

000000000000803c         nop        dword [rax]

                     loc_8040:
0000000000008040         mov        r8, qword [rdi+r9*8]                        ; CODE XREF=re_node_set_add_intersect+304, re_node_set_add_intersect+331
0000000000008044         mov        rcx, qword [rdi+rax*8]
0000000000008048         lea        r10, qword [rax+rdx]
000000000000804c         lea        r10, qword [rdi+r10*8]
0000000000008050         cmp        r8, rcx
0000000000008053         jle        loc_8070

0000000000008055         sub        r9, 0x1
0000000000008059         sub        rdx, 0x1
000000000000805d         mov        qword [r10], r8
0000000000008060         jne        loc_8040

0000000000008062         xor        edx, edx
0000000000008064         jmp        loc_8081
0000000000008066         align      16

                     loc_8070:
0000000000008070         sub        rax, 0x1                                    ; CODE XREF=re_node_set_add_intersect+291
0000000000008074         mov        qword [r10], rcx
0000000000008077         cmp        rax, 0xffffffffffffffff
000000000000807b         jne        loc_8040

                     loc_807d:
000000000000807d         shl        rdx, 0x3                                    ; CODE XREF=re_node_set_add_intersect+261, re_node_set_add_intersect+266

                     loc_8081:
0000000000008081         lea        rsi, qword [rdi+rsi*8]                      ; argument "__src" for method j_memcpy, CODE XREF=re_node_set_add_intersect+308
0000000000008085         call       j_memcpy                                    ; memcpy
000000000000808a         xor        eax, eax

                     loc_808c:
000000000000808c         add        rsp, 0x8                                    ; CODE XREF=re_node_set_add_intersect+422
0000000000008090         pop        rbx
0000000000008091         pop        rbp
0000000000008092         pop        r12
0000000000008094         pop        r13
0000000000008096         ret
                        ; endp
0000000000008097         align      32

                     loc_80a0:
00000000000080a0         add        r13, rax                                    ; CODE XREF=re_node_set_add_intersect+69
00000000000080a3         lea        rsi, qword [r13*8]                          ; argument "__size" for method j_realloc
00000000000080ab         call       j_realloc                                   ; realloc
00000000000080b0         test       rax, rax
00000000000080b3         mov        rdi, rax
00000000000080b6         je         loc_80d1

00000000000080b8         mov        qword [rbx+0x10], rax
00000000000080bc         mov        qword [rbx], r13
00000000000080bf         mov        rcx, qword [rbx+8]
00000000000080c3         mov        r9, qword [rbp+8]
00000000000080c7         mov        r11, qword [r12+8]
00000000000080cc         jmp        loc_7f7b

                     loc_80d1:
00000000000080d1         mov        eax, 0xc                                    ; CODE XREF=re_node_set_add_intersect+390
00000000000080d6         jmp        loc_808c
00000000000080d8         align      32                                          ; End of unwind block (FDE at 0x16f60)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40


                     create_token_tree.isra.16:
00000000000080e0         push       rbx                                         ; Begin of unwind block (FDE at 0x16fb0), CODE XREF=duplicate_tree+62, lower_subexp+130, lower_subexp+156, lower_subexp+215, lower_subexp+241, lower_subexp+279, lower_subexp+463, lower_subexp+489, lower_subexp+531, build_charclass_op+350, build_charclass_op+410
00000000000080e1         mov        rbx, rdi
00000000000080e4         sub        rsp, 0x20
00000000000080e8         mov        eax, dword [rsi]
00000000000080ea         cmp        eax, 0xf
00000000000080ed         je         loc_8168

00000000000080ef         movsxd     r9, eax
00000000000080f2         lea        r10d, dword [rax+1]
00000000000080f6         mov        rdi, qword [rdi]
00000000000080f9         mov        rax, r9
00000000000080fc         shl        rax, 0x6
0000000000008100         add        rax, 0x8

                     loc_8104:
0000000000008104         shl        r9, 0x6                                     ; CODE XREF=create_token_tree.isra.16+215
0000000000008108         mov        dword [rsi], r10d
000000000000810b         add        rax, rdi
000000000000810e         lea        rsi, qword [rdi+r9]
0000000000008112         mov        qword [rsi+8], 0x0
000000000000811a         mov        qword [rsi+0x10], rdx
000000000000811e         lea        rdi, qword [rsi+0x20]
0000000000008122         mov        qword [rsi+0x18], rcx
0000000000008126         movdqu     xmm0, xmmword [r8]
000000000000812b         movups     xmmword [rsi+0x30], xmm0
000000000000812f         and        byte [rdi+0x1a], 0xf3
0000000000008133         test       rdx, rdx
0000000000008136         mov        qword [rsi+0x20], 0x0
000000000000813e         mov        qword [rsi+0x28], 0x0
0000000000008146         mov        qword [rsi+0x40], 0xffffffffffffffff
000000000000814e         je         loc_8153

0000000000008150         mov        qword [rdx], rax

                     loc_8153:
0000000000008153         test       rcx, rcx                                    ; CODE XREF=create_token_tree.isra.16+110
0000000000008156         je         loc_815b

0000000000008158         mov        qword [rcx], rax

                     loc_815b:
000000000000815b         add        rsp, 0x20                                   ; CODE XREF=create_token_tree.isra.16+118, create_token_tree.isra.16+222
000000000000815f         pop        rbx
0000000000008160         ret
                        ; endp
0000000000008161         align      8

                     loc_8168:
0000000000008168         mov        edi, 0x3c8                                  ; argument "__size" for method j_malloc, CODE XREF=create_token_tree.isra.16+13
000000000000816d         mov        qword [rsp+0x28+var_10], r8
0000000000008172         mov        qword [rsp+0x28+var_18], rcx
0000000000008177         mov        qword [rsp+0x28+var_20], rdx
000000000000817c         mov        qword [rsp+0x28+var_28], rsi
0000000000008180         call       j_malloc                                    ; malloc
0000000000008185         test       rax, rax
0000000000008188         mov        rdi, rax
000000000000818b         je         loc_81bc

000000000000818d         mov        rax, qword [rbx]
0000000000008190         mov        r10d, 0x1
0000000000008196         mov        qword [rbx], rdi
0000000000008199         xor        r9d, r9d
000000000000819c         mov        r8, qword [rsp+0x28+var_10]
00000000000081a1         mov        rcx, qword [rsp+0x28+var_18]
00000000000081a6         mov        rdx, qword [rsp+0x28+var_20]
00000000000081ab         mov        rsi, qword [rsp+0x28+var_28]
00000000000081af         mov        qword [rdi], rax
00000000000081b2         mov        eax, 0x8
00000000000081b7         jmp        loc_8104

                     loc_81bc:
00000000000081bc         xor        eax, eax                                    ; CODE XREF=create_token_tree.isra.16+171
00000000000081be         jmp        loc_815b


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_38: int64_t, -56


                     duplicate_tree:
00000000000081c0         push       r14                                         ; End of unwind block (FDE at 0x16fb0), Begin of unwind block (FDE at 0x16fd4), CODE XREF=sub_10870+540, sub_10870+888, sub_10870+982
00000000000081c2         push       r13
00000000000081c4         lea        r13, qword [rsi+0x70]
00000000000081c8         push       r12
00000000000081ca         push       rbp
00000000000081cb         lea        r12, qword [rsi+0x80]
00000000000081d2         push       rbx
00000000000081d3         mov        rbx, rdi
00000000000081d6         sub        rsp, 0x10
00000000000081da         mov        rbp, qword [rdi]
00000000000081dd         mov        rax, qword [fs:0x28]
00000000000081e6         mov        qword [rsp+0x38+var_30], rax
00000000000081eb         xor        eax, eax
00000000000081ed         mov        r14, rsp

                     loc_81f0:
00000000000081f0         lea        r8, qword [rbx+0x28]                        ; CODE XREF=duplicate_tree+101, duplicate_tree+199
00000000000081f4         xor        ecx, ecx
00000000000081f6         xor        edx, edx
00000000000081f8         mov        rsi, r12
00000000000081fb         mov        rdi, r13
00000000000081fe         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000008203         test       rax, rax
0000000000008206         mov        qword [r14], rax
0000000000008209         je         loc_825c

000000000000820b         mov        qword [rax], rbp
000000000000820e         mov        rbp, qword [r14]
0000000000008211         or         byte [rbp+0x32], 0x4
0000000000008215         mov        rax, qword [rbx+8]
0000000000008219         test       rax, rax
000000000000821c         je         loc_8230

000000000000821e         lea        r14, qword [rbp+8]
0000000000008222         mov        rbx, rax
0000000000008225         jmp        loc_81f0
0000000000008227         align      16

                     loc_8230:
0000000000008230         xor        edx, edx                                    ; CODE XREF=duplicate_tree+92
0000000000008232         jmp        loc_823b
0000000000008234         align      8

                     loc_8238:
0000000000008238         mov        rbx, rax                                    ; CODE XREF=duplicate_tree+150

                     loc_823b:
000000000000823b         mov        rax, qword [rbx+0x10]                       ; CODE XREF=duplicate_tree+114
000000000000823f         test       rax, rax
0000000000008242         je         loc_8249

0000000000008244         cmp        rax, rdx
0000000000008247         jne        loc_8280

                     loc_8249:
0000000000008249         mov        rax, qword [rbx]                            ; CODE XREF=duplicate_tree+130
000000000000824c         mov        rbp, qword [rbp]
0000000000008250         mov        rdx, rbx
0000000000008253         test       rax, rax
0000000000008256         jne        loc_8238

0000000000008258         mov        rax, qword [rsp+0x38+var_38]

                     loc_825c:
000000000000825c         mov        rcx, qword [rsp+0x38+var_30]                ; CODE XREF=duplicate_tree+73
0000000000008261         xor        rcx, qword [fs:0x28]
000000000000826a         jne        loc_828c

000000000000826c         add        rsp, 0x10
0000000000008270         pop        rbx
0000000000008271         pop        rbp
0000000000008272         pop        r12
0000000000008274         pop        r13
0000000000008276         pop        r14
0000000000008278         ret
                        ; endp
0000000000008279         align      128

                     loc_8280:
0000000000008280         lea        r14, qword [rbp+0x10]                       ; CODE XREF=duplicate_tree+135
0000000000008284         mov        rbx, rax
0000000000008287         jmp        loc_81f0

                     loc_828c:
000000000000828c         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=duplicate_tree+170
                        ; endp
0000000000008291         align      32                                          ; End of unwind block (FDE at 0x16fd4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_50: int8_t, -80
        ;    var_58: int8_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112


                     lower_subexp:
00000000000082a0         push       r15                                         ; Begin of unwind block (FDE at 0x17018), CODE XREF=lower_subexps+104, lower_subexps+136
00000000000082a2         push       r14
00000000000082a4         push       r13
00000000000082a6         push       r12
00000000000082a8         mov        r13, rdx
00000000000082ab         push       rbp
00000000000082ac         push       rbx
00000000000082ad         sub        rsp, 0x48
00000000000082b1         mov        rbx, qword [rsi]
00000000000082b4         mov        rbp, qword [rdx+8]
00000000000082b8         mov        rax, qword [fs:0x28]
00000000000082c1         mov        qword [rsp+0x78+var_40], rax
00000000000082c6         xor        eax, eax
00000000000082c8         test       byte [rsi+0x38], 0x10
00000000000082cc         mov        qword [rsp+0x78+var_60], rdi
00000000000082d1         je         loc_8448

00000000000082d7         test       rbp, rbp
00000000000082da         je         loc_8350

00000000000082dc         mov        rax, qword [rdx+0x28]
00000000000082e0         cmp        rax, 0x3f
00000000000082e4         jg         loc_841d

00000000000082ea         mov        rdx, qword [rbx+0xa0]
00000000000082f1         bt         rdx, rax
00000000000082f5         jae        loc_841d

00000000000082fb         lea        rax, qword [rbx+0x70]
00000000000082ff         lea        r14, qword [rsp+0x78+var_58]
0000000000008304         sub        rbx, 0xffffffffffffff80
0000000000008308         xor        ecx, ecx
000000000000830a         xor        edx, edx
000000000000830c         mov        rsi, rbx
000000000000830f         mov        r15, rax
0000000000008312         mov        r8, r14
0000000000008315         mov        rdi, rax
0000000000008318         mov        byte [rsp+0x78+var_50], 0x8
000000000000831d         mov        qword [rsp+0x78+var_70], rax
0000000000008322         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000008327         mov        rdi, r15
000000000000832a         mov        r8, r14
000000000000832d         xor        ecx, ecx
000000000000832f         xor        edx, edx
0000000000008331         mov        rsi, rbx
0000000000008334         mov        r12, rax
0000000000008337         mov        byte [rsp+0x78+var_50], 0x9
000000000000833c         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000008341         mov        r15, rax
0000000000008344         jmp        loc_849d
0000000000008349         align      16

                     loc_8350:
0000000000008350         lea        rax, qword [rbx+0x70]                       ; CODE XREF=lower_subexp+58
0000000000008354         lea        r14, qword [rsp+0x78+var_58]
0000000000008359         sub        rbx, 0xffffffffffffff80
000000000000835d         xor        ecx, ecx
000000000000835f         xor        edx, edx
0000000000008361         mov        rsi, rbx
0000000000008364         mov        r15, rax
0000000000008367         mov        r8, r14
000000000000836a         mov        rdi, rax
000000000000836d         mov        byte [rsp+0x78+var_50], 0x8
0000000000008372         mov        qword [rsp+0x78+var_70], rax
0000000000008377         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000000837c         mov        rdi, r15
000000000000837f         mov        r8, r14
0000000000008382         xor        ecx, ecx
0000000000008384         xor        edx, edx
0000000000008386         mov        rsi, rbx
0000000000008389         mov        r12, rax
000000000000838c         mov        byte [rsp+0x78+var_50], 0x9
0000000000008391         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000008396         mov        r11, rax
0000000000008399         mov        r15, rax

                     loc_839c:
000000000000839c         mov        rdi, qword [rsp+0x78+var_70]                ; CODE XREF=lower_subexp+503, lower_subexp+539
00000000000083a1         mov        r8, r14
00000000000083a4         mov        rcx, r11
00000000000083a7         mov        rdx, r12
00000000000083aa         mov        rsi, rbx
00000000000083ad         mov        byte [rsp+0x78+var_50], 0x10
00000000000083b2         mov        qword [rsp+0x78+var_68], r11
00000000000083b7         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
00000000000083bc         test       rax, rax
00000000000083bf         mov        rbp, rax
00000000000083c2         je         loc_84c0

00000000000083c8         mov        r11, qword [rsp+0x78+var_68]
00000000000083cd         test       r11, r11
00000000000083d0         je         loc_84c0

00000000000083d6         test       r12, r12
00000000000083d9         je         loc_84c0

00000000000083df         test       r15, r15
00000000000083e2         je         loc_84c0

00000000000083e8         mov        rax, qword [r13+0x28]
00000000000083ec         mov        qword [r15+0x28], rax
00000000000083f0         mov        qword [r12+0x28], rax
00000000000083f5         movzx      eax, byte [r13+0x32]
00000000000083fa         movzx      edx, byte [r15+0x32]
00000000000083ff         and        eax, 0x8
0000000000008402         and        edx, 0xfffffff7
0000000000008405         mov        ecx, eax
0000000000008407         or         edx, ecx
0000000000008409         mov        byte [r15+0x32], dl
000000000000840d         movzx      eax, byte [r12+0x32]
0000000000008413         and        eax, 0xfffffff7
0000000000008416         or         eax, ecx
0000000000008418         mov        byte [r12+0x32], al

                     loc_841d:
000000000000841d         mov        rdi, qword [rsp+0x78+var_40]                ; CODE XREF=lower_subexp+68, lower_subexp+85, lower_subexp+557
0000000000008422         xor        rdi, qword [fs:0x28]
000000000000842b         mov        rax, rbp
000000000000842e         jne        loc_84d2

0000000000008434         add        rsp, 0x48
0000000000008438         pop        rbx
0000000000008439         pop        rbp
000000000000843a         pop        r12
000000000000843c         pop        r13
000000000000843e         pop        r14
0000000000008440         pop        r15
0000000000008442         ret
                        ; endp
0000000000008443         align      8

                     loc_8448:
0000000000008448         lea        rax, qword [rbx+0x70]                       ; CODE XREF=lower_subexp+49
000000000000844c         lea        r14, qword [rsp+0x78+var_58]
0000000000008451         sub        rbx, 0xffffffffffffff80
0000000000008455         xor        ecx, ecx
0000000000008457         xor        edx, edx
0000000000008459         mov        rsi, rbx
000000000000845c         mov        r15, rax
000000000000845f         mov        r8, r14
0000000000008462         mov        rdi, rax
0000000000008465         mov        byte [rsp+0x78+var_50], 0x8
000000000000846a         mov        qword [rsp+0x78+var_70], rax
000000000000846f         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000008474         xor        ecx, ecx
0000000000008476         xor        edx, edx
0000000000008478         mov        rdi, r15
000000000000847b         mov        r8, r14
000000000000847e         mov        rsi, rbx
0000000000008481         mov        r12, rax
0000000000008484         mov        byte [rsp+0x78+var_50], 0x9
0000000000008489         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000000848e         test       rbp, rbp
0000000000008491         mov        r15, rax
0000000000008494         mov        r11, rax
0000000000008497         je         loc_839c

                     loc_849d:
000000000000849d         mov        rdi, qword [rsp+0x78+var_70]                ; CODE XREF=lower_subexp+164
00000000000084a2         mov        r8, r14
00000000000084a5         mov        rcx, r15
00000000000084a8         mov        rdx, rbp
00000000000084ab         mov        rsi, rbx
00000000000084ae         mov        byte [rsp+0x78+var_50], 0x10
00000000000084b3         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
00000000000084b8         mov        r11, rax
00000000000084bb         jmp        loc_839c

                     loc_84c0:
00000000000084c0         mov        rax, qword [rsp+0x78+var_60]                ; CODE XREF=lower_subexp+290, lower_subexp+304, lower_subexp+313, lower_subexp+322
00000000000084c5         xor        ebp, ebp
00000000000084c7         mov        dword [rax], 0xc
00000000000084cd         jmp        loc_841d

                     loc_84d2:
00000000000084d2         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=lower_subexp+398
                        ; endp
00000000000084d7         align      32                                          ; End of unwind block (FDE at 0x17018)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_20: int64_t, -32
        ;    var_24: int32_t, -36


                     lower_subexps:
00000000000084e0         push       rbp                                         ; Begin of unwind block (FDE at 0x17068), DATA XREF=re_compile_internal+1638
00000000000084e1         push       rbx
00000000000084e2         mov        rbp, rdi
00000000000084e5         mov        rbx, rsi
00000000000084e8         sub        rsp, 0x18
00000000000084ec         mov        rdx, qword [rsi+8]
00000000000084f0         mov        rax, qword [fs:0x28]
00000000000084f9         mov        qword [rsp+0x28+var_20], rax
00000000000084fe         xor        eax, eax
0000000000008500         mov        dword [rsp+0x28+var_24], 0x0
0000000000008508         test       rdx, rdx
000000000000850b         je         loc_8513

000000000000850d         cmp        byte [rdx+0x30], 0x11
0000000000008511         je         loc_8560

                     loc_8513:
0000000000008513         mov        rdx, qword [rbx+0x10]                       ; CODE XREF=lower_subexps+43, lower_subexps+148, lower_subexps+153
0000000000008517         test       rdx, rdx
000000000000851a         je         loc_8522

000000000000851c         cmp        byte [rdx+0x30], 0x11
0000000000008520         je         loc_8540

                     loc_8522:
0000000000008522         mov        rcx, qword [rsp+0x28+var_20]                ; CODE XREF=lower_subexps+58, lower_subexps+116, lower_subexps+121
0000000000008527         xor        rcx, qword [fs:0x28]
0000000000008530         mov        eax, dword [rsp+0x28+var_24]
0000000000008534         jne        loc_857b

0000000000008536         add        rsp, 0x18
000000000000853a         pop        rbx
000000000000853b         pop        rbp
000000000000853c         ret
                        ; endp
000000000000853d         align      64

                     loc_8540:
0000000000008540         lea        rdi, qword [rsp+0x28+var_24]                ; CODE XREF=lower_subexps+64
0000000000008545         mov        rsi, rbp
0000000000008548         call       lower_subexp                                ; lower_subexp
000000000000854d         test       rax, rax
0000000000008550         mov        qword [rbx+0x10], rax
0000000000008554         je         loc_8522

0000000000008556         mov        qword [rax], rbx
0000000000008559         jmp        loc_8522
000000000000855b         align      32

                     loc_8560:
0000000000008560         lea        rdi, qword [rsp+0x28+var_24]                ; CODE XREF=lower_subexps+49
0000000000008565         mov        rsi, rbp
0000000000008568         call       lower_subexp                                ; lower_subexp
000000000000856d         test       rax, rax
0000000000008570         mov        qword [rbx+8], rax
0000000000008574         je         loc_8513

0000000000008576         mov        qword [rax], rbx
0000000000008579         jmp        loc_8513

                     loc_857b:
000000000000857b         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=lower_subexps+84
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_node_set_init_copy:
0000000000008580         push       r12                                         ; End of unwind block (FDE at 0x17068), Begin of unwind block (FDE at 0x17094), CODE XREF=re_node_set_init_union+235, re_acquire_state_context+232, re_acquire_state_context+649, re_acquire_state+187, expand_bkref_cache+390, build_trtable+1614, check_arrival+1551, set_regs+1237, update_cur_sifted_state+2049, sub_12950+592
0000000000008582         push       rbp
0000000000008583         push       rbx
0000000000008584         mov        rax, qword [rsi+8]
0000000000008588         mov        qword [rdi+8], rax
000000000000858c         mov        r12, qword [rsi+8]
0000000000008590         test       r12, r12
0000000000008593         jle        loc_85d0

0000000000008595         mov        rbx, rdi
0000000000008598         mov        qword [rdi], rax
000000000000859b         lea        rdi, qword [rax*8]                          ; argument "__size" for method j_malloc
00000000000085a3         mov        rbp, rsi
00000000000085a6         call       j_malloc                                    ; malloc
00000000000085ab         test       rax, rax
00000000000085ae         mov        qword [rbx+0x10], rax
00000000000085b2         je         loc_85f0

00000000000085b4         mov        rsi, qword [rbp+0x10]                       ; argument "__src" for method j_memcpy
00000000000085b8         lea        rdx, qword [r12*8]                          ; argument "__n" for method j_memcpy
00000000000085c0         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
00000000000085c3         call       j_memcpy                                    ; memcpy
00000000000085c8         xor        eax, eax

                     loc_85ca:
00000000000085ca         pop        rbx                                         ; CODE XREF=re_node_set_init_copy+132
00000000000085cb         pop        rbp
00000000000085cc         pop        r12
00000000000085ce         ret
                        ; endp
00000000000085cf         align      16

                     loc_85d0:
00000000000085d0         pxor       xmm0, xmm0                                  ; CODE XREF=re_node_set_init_copy+19
00000000000085d4         mov        qword [rdi+0x10], 0x0
00000000000085dc         xor        eax, eax
00000000000085de         movups     xmmword [rdi], xmm0
00000000000085e1         pop        rbx
00000000000085e2         pop        rbp
00000000000085e3         pop        r12
00000000000085e5         ret
                        ; endp
00000000000085e6         align      16

                     loc_85f0:
00000000000085f0         mov        qword [rbx+8], 0x0                          ; CODE XREF=re_node_set_init_copy+50
00000000000085f8         mov        qword [rbx], 0x0
00000000000085ff         mov        eax, 0xc
0000000000008604         jmp        loc_85ca
0000000000008606         align      16                                          ; End of unwind block (FDE at 0x17094)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_node_set_init_union:
0000000000008610         test       rsi, rsi                                    ; Begin of unwind block (FDE at 0x170d0), CODE XREF=merge_state_array+96, transit_state_bkref.isra.34+1185, merge_state_with_log+188, re_search_internal+3431
0000000000008613         push       r14
0000000000008615         push       r13
0000000000008617         push       r12
0000000000008619         push       rbp
000000000000861a         push       rbx
000000000000861b         je         loc_86c5

0000000000008621         test       rdx, rdx
0000000000008624         mov        r13, qword [rsi+8]
0000000000008628         je         loc_86c0

000000000000862e         test       r13, r13
0000000000008631         jle        loc_86c0

0000000000008637         mov        r14, qword [rdx+8]
000000000000863b         test       r14, r14
000000000000863e         jle        loc_86f3

0000000000008644         mov        r12, rdi
0000000000008647         lea        rdi, qword [r13+r14]
000000000000864c         mov        rbx, rdx
000000000000864f         mov        rbp, rsi
0000000000008652         mov        qword [r12], rdi
0000000000008656         shl        rdi, 0x3                                    ; argument "__size" for method j_malloc
000000000000865a         call       j_malloc                                    ; malloc
000000000000865f         test       rax, rax
0000000000008662         mov        qword [r12+0x10], rax
0000000000008667         je         loc_8758

000000000000866d         mov        r9, qword [rbx+0x10]
0000000000008671         mov        r8, qword [rbp+0x10]
0000000000008675         xor        ebx, ebx
0000000000008677         xor        ecx, ecx
0000000000008679         xor        esi, esi
000000000000867b         jmp        loc_869e
000000000000867d         align      128

                     loc_8680:
0000000000008680         sete       dil                                         ; CODE XREF=re_node_set_init_union+157
0000000000008684         mov        qword [rax+rbx*8-8], rdx
0000000000008689         add        rsi, 0x1
000000000000868d         movzx      edi, dil
0000000000008691         add        rcx, rdi

                     loc_8694:
0000000000008694         cmp        r13, rsi                                    ; CODE XREF=re_node_set_init_union+168
0000000000008697         jle        loc_8700

0000000000008699         cmp        r14, rcx
000000000000869c         jle        loc_8718

                     loc_869e:
000000000000869e         mov        rdx, qword [r8+rsi*8]                       ; CODE XREF=re_node_set_init_union+107
00000000000086a2         mov        rdi, qword [r9+rcx*8]
00000000000086a6         add        rbx, 0x1
00000000000086aa         cmp        rdx, rdi
00000000000086ad         jle        loc_8680

00000000000086af         add        rcx, 0x1
00000000000086b3         mov        qword [rax+rbx*8-8], rdi
00000000000086b8         jmp        loc_8694
00000000000086ba         align      64

                     loc_86c0:
00000000000086c0         test       r13, r13                                    ; CODE XREF=re_node_set_init_union+24, re_node_set_init_union+33
00000000000086c3         jg         loc_86f3

                     loc_86c5:
00000000000086c5         test       rdx, rdx                                    ; CODE XREF=re_node_set_init_union+11
00000000000086c8         je         loc_86d1

00000000000086ca         cmp        qword [rdx+8], 0x0
00000000000086cf         jg         loc_86f0

                     loc_86d1:
00000000000086d1         pxor       xmm0, xmm0                                  ; CODE XREF=re_node_set_init_union+184
00000000000086d5         mov        qword [rdi+0x10], 0x0
00000000000086dd         xor        eax, eax
00000000000086df         movaps     xmmword [rdi], xmm0

                     loc_86e2:
00000000000086e2         pop        rbx                                         ; CODE XREF=re_node_set_init_union+333
00000000000086e3         pop        rbp
00000000000086e4         pop        r12
00000000000086e6         pop        r13
00000000000086e8         pop        r14
00000000000086ea         ret
                        ; endp
00000000000086eb         align      16

                     loc_86f0:
00000000000086f0         mov        rsi, rdx                                    ; CODE XREF=re_node_set_init_union+191

                     loc_86f3:
00000000000086f3         pop        rbx                                         ; CODE XREF=re_node_set_init_union+46, re_node_set_init_union+179
00000000000086f4         pop        rbp
00000000000086f5         pop        r12
00000000000086f7         pop        r13
00000000000086f9         pop        r14
00000000000086fb         jmp        re_node_set_init_copy                       ; re_node_set_init_copy
                        ; endp

                     loc_8700:
0000000000008700         cmp        r14, rcx                                    ; CODE XREF=re_node_set_init_union+135
0000000000008703         jg         loc_8738

                     loc_8705:
0000000000008705         mov        qword [r12+8], rbx                          ; CODE XREF=re_node_set_init_union+291, re_node_set_init_union+323
000000000000870a         xor        eax, eax
000000000000870c         pop        rbx
000000000000870d         pop        rbp
000000000000870e         pop        r12
0000000000008710         pop        r13
0000000000008712         pop        r14
0000000000008714         ret
                        ; endp
0000000000008715         align      8

                     loc_8718:
0000000000008718         sub        r13, rsi                                    ; CODE XREF=re_node_set_init_union+140
000000000000871b         lea        rdi, qword [rax+rbx*8]                      ; argument "__dest" for method j_memcpy
000000000000871f         lea        rsi, qword [r8+rsi*8]                       ; argument "__src" for method j_memcpy
0000000000008723         lea        rdx, qword [r13*8]                          ; argument "__n" for method j_memcpy
000000000000872b         add        rbx, r13
000000000000872e         call       j_memcpy                                    ; memcpy
0000000000008733         jmp        loc_8705
0000000000008735         align      8

                     loc_8738:
0000000000008738         sub        r14, rcx                                    ; CODE XREF=re_node_set_init_union+243
000000000000873b         lea        rdi, qword [rax+rbx*8]                      ; argument "__dest" for method j_memcpy
000000000000873f         lea        rsi, qword [r9+rcx*8]                       ; argument "__src" for method j_memcpy
0000000000008743         lea        rdx, qword [r14*8]                          ; argument "__n" for method j_memcpy
000000000000874b         add        rbx, r14
000000000000874e         call       j_memcpy                                    ; memcpy
0000000000008753         jmp        loc_8705
0000000000008755         align      8

                     loc_8758:
0000000000008758         mov        eax, 0xc                                    ; CODE XREF=re_node_set_init_union+87
000000000000875d         jmp        loc_86e2
0000000000008762         align      16                                          ; End of unwind block (FDE at 0x170d0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_54: int32_t, -84


                     re_acquire_state_context:
0000000000008770         push       r15                                         ; Begin of unwind block (FDE at 0x17134), CODE XREF=build_trtable+597, build_trtable+2464, build_trtable+2539, check_arrival+987, check_arrival+1653, transit_state_bkref.isra.34+1239, transit_state_bkref.isra.34+1970, merge_state_with_log+254, merge_state_with_log+354, re_search_internal+3497, re_search_internal+3734
0000000000008772         push       r14
0000000000008774         push       r13
0000000000008776         push       r12
0000000000008778         push       rbp
0000000000008779         push       rbx
000000000000877a         sub        rsp, 0x28
000000000000877e         mov        r10, qword [rdx+8]
0000000000008782         test       r10, r10
0000000000008785         je         loc_8a0f

000000000000878b         mov        r8d, ecx
000000000000878e         test       r10, r10
0000000000008791         lea        r12, qword [r8+r10]
0000000000008795         jle        loc_87ac

0000000000008797         mov        rax, qword [rdx+0x10]
000000000000879b         lea        r10, qword [rax+r10*8]
000000000000879f         nop

                     loc_87a0:
00000000000087a0         add        r12, qword [rax]                            ; CODE XREF=re_acquire_state_context+58
00000000000087a3         add        rax, 0x8
00000000000087a7         cmp        r10, rax
00000000000087aa         jne        loc_87a0

                     loc_87ac:
00000000000087ac         mov        rax, qword [rsi+0x88]                       ; CODE XREF=re_acquire_state_context+37
00000000000087b3         mov        rbp, rdx
00000000000087b6         mov        dword [rsp+0x58+var_54], ecx
00000000000087ba         mov        r13, rsi
00000000000087bd         mov        qword [rsp+0x58+var_40], rdi
00000000000087c2         and        rax, r12
00000000000087c5         lea        rdx, qword [rax+rax*2]
00000000000087c9         mov        rax, qword [rsi+0x40]
00000000000087cd         lea        rax, qword [rax+rdx*8]
00000000000087d1         mov        r11, qword [rax]
00000000000087d4         test       r11, r11
00000000000087d7         jle        loc_8830

00000000000087d9         mov        rbx, qword [rax+0x10]
00000000000087dd         xor        r10d, r10d
00000000000087e0         mov        r9d, ecx
00000000000087e3         jmp        loc_87f1
00000000000087e5         align      8

                     loc_87e8:
00000000000087e8         add        r10, 0x1                                    ; CODE XREF=re_acquire_state_context+136, re_acquire_state_context+149, re_acquire_state_context+158, re_acquire_state_context+170
00000000000087ec         cmp        r10, r11
00000000000087ef         je         loc_8830

                     loc_87f1:
00000000000087f1         mov        r14, qword [rbx+r10*8]                      ; CODE XREF=re_acquire_state_context+115
00000000000087f5         cmp        qword [r14], r12
00000000000087f8         jne        loc_87e8

00000000000087fa         movzx      eax, byte [r14+0x68]
00000000000087ff         and        eax, 0xf
0000000000008802         cmp        eax, r9d
0000000000008805         jne        loc_87e8

0000000000008807         mov        rdi, qword [r14+0x50]
000000000000880b         test       rdi, rdi
000000000000880e         je         loc_87e8

0000000000008810         mov        rsi, rbp
0000000000008813         call       re_node_set_compare.part.2                  ; re_node_set_compare.part.2
0000000000008818         test       al, al
000000000000881a         je         loc_87e8

                     loc_881c:
000000000000881c         add        rsp, 0x28                                   ; CODE XREF=re_acquire_state_context+520, re_acquire_state_context+548, re_acquire_state_context+680
0000000000008820         mov        rax, r14
0000000000008823         pop        rbx
0000000000008824         pop        rbp
0000000000008825         pop        r12
0000000000008827         pop        r13
0000000000008829         pop        r14
000000000000882b         pop        r15
000000000000882d         ret
                        ; endp
000000000000882e         align      16

                     loc_8830:
0000000000008830         mov        esi, 0x1                                    ; argument "__size" for method j_calloc, CODE XREF=re_acquire_state_context+103, re_acquire_state_context+127
0000000000008835         mov        edi, 0x70                                   ; argument "__nmemb" for method j_calloc
000000000000883a         call       j_calloc                                    ; calloc
000000000000883f         test       rax, rax
0000000000008842         mov        r14, rax
0000000000008845         je         loc_8986

000000000000884b         lea        rax, qword [rax+8]
000000000000884f         mov        rsi, rbp
0000000000008852         mov        rdi, rax
0000000000008855         mov        rbx, rax
0000000000008858         call       re_node_set_init_copy                       ; re_node_set_init_copy
000000000000885d         test       eax, eax
000000000000885f         jne        loc_8a1d

0000000000008865         movzx      eax, byte [r14+0x68]
000000000000886a         movzx      edx, byte [rsp+0x58+var_54]
000000000000886f         mov        qword [r14+0x50], rbx
0000000000008873         and        edx, 0xf
0000000000008876         and        eax, 0xfffffff0
0000000000008879         or         eax, edx
000000000000887b         cmp        qword [rbp+8], 0x0
0000000000008880         mov        byte [r14+0x68], al
0000000000008884         jle        loc_8968

000000000000888a         lea        rcx, qword [r14+0x18]
000000000000888e         xor        r15d, r15d
0000000000008891         mov        qword [rsp+0x58+var_48], r12
0000000000008896         xor        r10d, r10d
0000000000008899         mov        r12, r13
000000000000889c         mov        r13, r15
000000000000889f         mov        qword [rsp+0x58+var_50], rcx
00000000000088a4         mov        r15, rbx
00000000000088a7         nop        word [rax+rax]

                     loc_88b0:
00000000000088b0         mov        rax, qword [rbp+0x10]                       ; CODE XREF=re_acquire_state_context+490
00000000000088b4         mov        rax, qword [rax+r13*8]
00000000000088b8         shl        rax, 0x4
00000000000088bc         add        rax, qword [r12]
00000000000088c0         movzx      esi, byte [rax+8]
00000000000088c4         mov        ebx, dword [rax+8]
00000000000088c7         shr        ebx, 0x8
00000000000088ca         and        bx, 0x3ff
00000000000088cf         cmp        esi, 0x1
00000000000088d2         movzx      edi, bx
00000000000088d5         jne        loc_88db

00000000000088d7         test       edi, edi
00000000000088d9         je         loc_8952

                     loc_88db:
00000000000088db         movzx      edx, byte [r14+0x68]                        ; CODE XREF=re_acquire_state_context+357
00000000000088e0         movzx      eax, byte [rax+0xa]
00000000000088e4         mov        r9d, edx
00000000000088e7         shr        al, 0x4
00000000000088ea         and        edx, 0xffffffdf
00000000000088ed         shr        r9b, 0x5
00000000000088f1         or         eax, r9d
00000000000088f4         and        eax, 0x1
00000000000088f7         shl        eax, 0x5
00000000000088fa         or         eax, edx
00000000000088fc         cmp        esi, 0x2
00000000000088ff         mov        byte [r14+0x68], al
0000000000008903         je         loc_89d0

0000000000008909         cmp        esi, 0x4
000000000000890c         jne        loc_8915

000000000000890e         or         eax, 0x40
0000000000008911         mov        byte [r14+0x68], al

                     loc_8915:
0000000000008915         test       edi, edi                                    ; CODE XREF=re_acquire_state_context+412, re_acquire_state_context+615
0000000000008917         je         loc_8952

0000000000008919         cmp        r15, qword [r14+0x50]
000000000000891d         je         loc_89e0

                     loc_8923:
0000000000008923         test       bl, 0x1                                     ; CODE XREF=re_acquire_state_context+666
0000000000008926         je         loc_89a0

0000000000008928         test       byte [rsp+0x58+var_54], 0x1
000000000000892d         je         loc_8938

000000000000892f         test       bl, 0x2
0000000000008932         je         loc_89ac

0000000000008934         nop        dword [rax]

                     loc_8938:
0000000000008938         mov        rdx, r13                                    ; CODE XREF=re_acquire_state_context+445, re_acquire_state_context+570, re_acquire_state_context+582, re_acquire_state_context+596
000000000000893b         sub        rdx, r10
000000000000893e         js         loc_894e

0000000000008940         mov        rsi, qword [rsp+0x58+var_50]
0000000000008945         lea        rdi, qword [r14+0x10]
0000000000008949         call       re_node_set_remove_at.isra.4.part.5         ; re_node_set_remove_at.isra.4.part.5

                     loc_894e:
000000000000894e         add        r10, 0x1                                    ; CODE XREF=re_acquire_state_context+462

                     loc_8952:
0000000000008952         add        r13, 0x1                                    ; CODE XREF=re_acquire_state_context+361, re_acquire_state_context+423, re_acquire_state_context+587, re_acquire_state_context+594
0000000000008956         cmp        r13, qword [rbp+8]
000000000000895a         jl         loc_88b0

0000000000008960         mov        r13, r12
0000000000008963         mov        r12, qword [rsp+0x58+var_48]

                     loc_8968:
0000000000008968         mov        rdx, r12                                    ; CODE XREF=re_acquire_state_context+276
000000000000896b         mov        rsi, r14
000000000000896e         mov        rdi, r13
0000000000008971         call       register_state                              ; register_state
0000000000008976         test       eax, eax
0000000000008978         je         loc_881c

                     loc_897e:
000000000000897e         mov        rdi, r14                                    ; CODE XREF=re_acquire_state_context+641
0000000000008981         call       free_state                                  ; free_state

                     loc_8986:
0000000000008986         mov        rax, qword [rsp+0x58+var_40]                ; CODE XREF=re_acquire_state_context+213, re_acquire_state_context+656, re_acquire_state_context+693
000000000000898b         xor        r14d, r14d
000000000000898e         mov        dword [rax], 0xc
0000000000008994         jmp        loc_881c
0000000000008999         align      32

                     loc_89a0:
00000000000089a0         test       bl, 0x2                                     ; CODE XREF=re_acquire_state_context+438
00000000000089a3         je         loc_89ac

00000000000089a5         test       byte [rsp+0x58+var_54], 0x1
00000000000089aa         jne        loc_8938

                     loc_89ac:
00000000000089ac         test       bl, 0x10                                    ; CODE XREF=re_acquire_state_context+450, re_acquire_state_context+563
00000000000089af         je         loc_89b8

00000000000089b1         test       byte [rsp+0x58+var_54], 0x2
00000000000089b6         je         loc_8938

                     loc_89b8:
00000000000089b8         and        ebx, 0x40                                   ; CODE XREF=re_acquire_state_context+575
00000000000089bb         je         loc_8952

00000000000089bd         test       byte [rsp+0x58+var_54], 0x4
00000000000089c2         jne        loc_8952

00000000000089c4         jmp        loc_8938
00000000000089c9         align      16

                     loc_89d0:
00000000000089d0         or         eax, 0x10                                   ; CODE XREF=re_acquire_state_context+403
00000000000089d3         mov        byte [r14+0x68], al
00000000000089d7         jmp        loc_8915
00000000000089dc         align      32

                     loc_89e0:
00000000000089e0         mov        edi, 0x18                                   ; argument "__size" for method j_malloc, CODE XREF=re_acquire_state_context+429
00000000000089e5         call       j_malloc                                    ; malloc
00000000000089ea         test       rax, rax
00000000000089ed         mov        qword [r14+0x50], rax
00000000000089f1         je         loc_897e

00000000000089f3         mov        rsi, rbp
00000000000089f6         mov        rdi, rax
00000000000089f9         call       re_node_set_init_copy                       ; re_node_set_init_copy
00000000000089fe         test       eax, eax
0000000000008a00         jne        loc_8986

0000000000008a02         or         byte [r14+0x68], 0x80
0000000000008a07         xor        r10d, r10d
0000000000008a0a         jmp        loc_8923

                     loc_8a0f:
0000000000008a0f         mov        dword [rdi], 0x0                            ; CODE XREF=re_acquire_state_context+21
0000000000008a15         xor        r14d, r14d
0000000000008a18         jmp        loc_881c

                     loc_8a1d:
0000000000008a1d         mov        rdi, r14                                    ; argument "__ptr" for method j_free, CODE XREF=re_acquire_state_context+239
0000000000008a20         call       j_free                                      ; free
0000000000008a25         jmp        loc_8986
0000000000008a2a         align      16                                          ; End of unwind block (FDE at 0x17134)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_acquire_state:
0000000000008a30         push       r15                                         ; Begin of unwind block (FDE at 0x17180), CODE XREF=merge_state_array+120, expand_bkref_cache+464, check_arrival+754, update_cur_sifted_state+219, update_cur_sifted_state+307
0000000000008a32         push       r14
0000000000008a34         push       r13
0000000000008a36         push       r12
0000000000008a38         push       rbp
0000000000008a39         push       rbx
0000000000008a3a         sub        rsp, 0x8
0000000000008a3e         mov        rbp, qword [rdx+8]
0000000000008a42         test       rbp, rbp
0000000000008a45         je         loc_8c20

0000000000008a4b         test       rbp, rbp
0000000000008a4e         jle        loc_8a6c

0000000000008a50         mov        rax, qword [rdx+0x10]
0000000000008a54         lea        rcx, qword [rax+rbp*8]
0000000000008a58         nop        dword [rax+rax]

                     loc_8a60:
0000000000008a60         add        rbp, qword [rax]                            ; CODE XREF=re_acquire_state+58
0000000000008a63         add        rax, 0x8
0000000000008a67         cmp        rcx, rax
0000000000008a6a         jne        loc_8a60

                     loc_8a6c:
0000000000008a6c         mov        rax, qword [rsi+0x88]                       ; CODE XREF=re_acquire_state+30
0000000000008a73         mov        r14, rdx
0000000000008a76         mov        r12, rsi
0000000000008a79         mov        r13, rdi
0000000000008a7c         and        rax, rbp
0000000000008a7f         lea        rdx, qword [rax+rax*2]
0000000000008a83         mov        rax, qword [rsi+0x40]
0000000000008a87         lea        rax, qword [rax+rdx*8]
0000000000008a8b         mov        r10, qword [rax]
0000000000008a8e         test       r10, r10
0000000000008a91         jle        loc_8ac6

0000000000008a93         mov        r11, qword [rax+0x10]
0000000000008a97         xor        r9d, r9d
0000000000008a9a         nop        word [rax+rax]

                     loc_8aa0:
0000000000008aa0         mov        rbx, qword [r11+r9*8]                       ; CODE XREF=re_acquire_state+148
0000000000008aa4         cmp        qword [rbx], rbp
0000000000008aa7         jne        loc_8abd

0000000000008aa9         lea        rdi, qword [rbx+8]
0000000000008aad         mov        rsi, r14
0000000000008ab0         call       re_node_set_compare.part.2                  ; re_node_set_compare.part.2
0000000000008ab5         test       al, al
0000000000008ab7         jne        loc_8bbf

                     loc_8abd:
0000000000008abd         add        r9, 0x1                                     ; CODE XREF=re_acquire_state+119
0000000000008ac1         cmp        r10, r9
0000000000008ac4         jne        loc_8aa0

                     loc_8ac6:
0000000000008ac6         mov        esi, 0x1                                    ; argument "__size" for method j_calloc, CODE XREF=re_acquire_state+97
0000000000008acb         mov        edi, 0x70                                   ; argument "__nmemb" for method j_calloc
0000000000008ad0         call       j_calloc                                    ; calloc
0000000000008ad5         test       rax, rax
0000000000008ad8         mov        rbx, rax
0000000000008adb         je         loc_8c08

0000000000008ae1         lea        r15, qword [rax+8]
0000000000008ae5         mov        rsi, r14
0000000000008ae8         mov        rdi, r15
0000000000008aeb         call       re_node_set_init_copy                       ; re_node_set_init_copy
0000000000008af0         test       eax, eax
0000000000008af2         jne        loc_8c00

0000000000008af8         mov        rax, qword [r14+8]
0000000000008afc         mov        qword [rbx+0x50], r15
0000000000008b00         test       rax, rax
0000000000008b03         jle        loc_8bad

0000000000008b09         mov        rsi, qword [r14+0x10]
0000000000008b0d         mov        r8, qword [r12]
0000000000008b11         lea        r9, qword [rsi+rax*8]
0000000000008b15         jmp        loc_8b64
0000000000008b17         align      32

                     loc_8b20:
0000000000008b20         movzx      ecx, byte [rbx+0x68]                        ; CODE XREF=re_acquire_state+325
0000000000008b24         movzx      edx, byte [rax+0xa]
0000000000008b28         mov        r10d, ecx
0000000000008b2b         shr        dl, 0x4
0000000000008b2e         and        ecx, 0xffffffdf
0000000000008b31         shr        r10b, 0x5
0000000000008b35         or         edx, r10d
0000000000008b38         and        edx, 0x1
0000000000008b3b         shl        edx, 0x5
0000000000008b3e         or         edx, ecx
0000000000008b40         cmp        edi, 0x2
0000000000008b43         mov        byte [rbx+0x68], dl
0000000000008b46         je         loc_8bd8

0000000000008b4c         cmp        edi, 0x4
0000000000008b4f         jne        loc_8be8

0000000000008b55         or         edx, 0x40
0000000000008b58         mov        byte [rbx+0x68], dl

                     loc_8b5b:
0000000000008b5b         add        rsi, 0x8                                    ; CODE XREF=re_acquire_state+334, re_acquire_state+430, re_acquire_state+452
0000000000008b5f         cmp        r9, rsi
0000000000008b62         je         loc_8bad

                     loc_8b64:
0000000000008b64         mov        rax, qword [rsi]                            ; CODE XREF=re_acquire_state+229, re_acquire_state+379
0000000000008b67         shl        rax, 0x4
0000000000008b6b         add        rax, r8
0000000000008b6e         movzx      edi, byte [rax+8]
0000000000008b72         cmp        edi, 0x1
0000000000008b75         jne        loc_8b20

0000000000008b77         test       dword [rax+8], 0x3ff00
0000000000008b7e         je         loc_8b5b

0000000000008b80         movzx      edx, byte [rbx+0x68]
0000000000008b84         movzx      eax, byte [rax+0xa]
0000000000008b88         mov        ecx, edx
0000000000008b8a         shr        al, 0x4
0000000000008b8d         and        edx, 0xffffffdf
0000000000008b90         shr        cl, 0x5
0000000000008b93         or         eax, ecx
0000000000008b95         and        eax, 0x1
0000000000008b98         shl        eax, 0x5
0000000000008b9b         or         eax, edx
0000000000008b9d         mov        byte [rbx+0x68], al

                     loc_8ba0:
0000000000008ba0         add        rsi, 0x8                                    ; CODE XREF=re_acquire_state+443, re_acquire_state+458
0000000000008ba4         or         byte [rbx+0x68], 0x80
0000000000008ba8         cmp        r9, rsi
0000000000008bab         jne        loc_8b64

                     loc_8bad:
0000000000008bad         mov        rdx, rbp                                    ; CODE XREF=re_acquire_state+211, re_acquire_state+306
0000000000008bb0         mov        rsi, rbx
0000000000008bb3         mov        rdi, r12
0000000000008bb6         call       register_state                              ; register_state
0000000000008bbb         test       eax, eax
0000000000008bbd         jne        loc_8c14

                     loc_8bbf:
0000000000008bbf         add        rsp, 0x8                                    ; CODE XREF=re_acquire_state+135, re_acquire_state+482, re_acquire_state+504
0000000000008bc3         mov        rax, rbx
0000000000008bc6         pop        rbx
0000000000008bc7         pop        rbp
0000000000008bc8         pop        r12
0000000000008bca         pop        r13
0000000000008bcc         pop        r14
0000000000008bce         pop        r15
0000000000008bd0         ret
                        ; endp
0000000000008bd1         align      8

                     loc_8bd8:
0000000000008bd8         or         edx, 0x10                                   ; CODE XREF=re_acquire_state+278
0000000000008bdb         mov        byte [rbx+0x68], dl
0000000000008bde         jmp        loc_8b5b
0000000000008be3         align      8

                     loc_8be8:
0000000000008be8         cmp        edi, 0xc                                    ; CODE XREF=re_acquire_state+287
0000000000008beb         je         loc_8ba0

0000000000008bed         test       dword [rax+8], 0x3ff00
0000000000008bf4         je         loc_8b5b

0000000000008bfa         jmp        loc_8ba0
0000000000008bfc         align      1024

                     loc_8c00:
0000000000008c00         mov        rdi, rbx                                    ; argument "__ptr" for method j_free, CODE XREF=re_acquire_state+194
0000000000008c03         call       j_free                                      ; free

                     loc_8c08:
0000000000008c08         mov        dword [r13], 0xc                            ; CODE XREF=re_acquire_state+171, re_acquire_state+492
0000000000008c10         xor        ebx, ebx
0000000000008c12         jmp        loc_8bbf

                     loc_8c14:
0000000000008c14         mov        rdi, rbx                                    ; CODE XREF=re_acquire_state+397
0000000000008c17         call       free_state                                  ; free_state
0000000000008c1c         jmp        loc_8c08
0000000000008c1e         align      32

                     loc_8c20:
0000000000008c20         mov        dword [rdi], 0x0                            ; CODE XREF=re_acquire_state+21
0000000000008c26         xor        ebx, ebx
0000000000008c28         jmp        loc_8bbf
0000000000008c2a         align      16                                          ; End of unwind block (FDE at 0x17180)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_58: int8_t, -88
        ;    var_5C: int32_t, -92
        ;    var_70: int64_t, -112


                     merge_state_array:
0000000000008c30         push       r15                                         ; Begin of unwind block (FDE at 0x171cc), CODE XREF=re_search_internal+5755, update_cur_sifted_state+1819
0000000000008c32         push       r14
0000000000008c34         push       r13
0000000000008c36         push       r12
0000000000008c38         push       rbp
0000000000008c39         push       rbx
0000000000008c3a         sub        rsp, 0x48
0000000000008c3e         mov        rax, qword [fs:0x28]
0000000000008c47         mov        qword [rsp+0x78+var_40], rax
0000000000008c4c         xor        eax, eax
0000000000008c4e         test       rcx, rcx
0000000000008c51         jle        loc_8ce6

0000000000008c57         lea        rax, qword [rsp+0x78+var_5C]
0000000000008c5c         mov        r14, rdi
0000000000008c5f         mov        rbx, rsi
0000000000008c62         mov        r12, rdx
0000000000008c65         mov        rbp, rcx
0000000000008c68         xor        r15d, r15d
0000000000008c6b         lea        r13, qword [rsp+0x78+var_58]
0000000000008c70         mov        qword [rsp+0x78+var_70], rax
0000000000008c75         jmp        loc_8ccc
0000000000008c77         align      128

                     loc_8c80:
0000000000008c80         test       rdx, rdx                                    ; CODE XREF=merge_state_array+167
0000000000008c83         je         loc_8cc3

0000000000008c85         add        rdx, 0x8
0000000000008c89         add        rsi, 0x8
0000000000008c8d         mov        rdi, r13
0000000000008c90         call       re_node_set_init_union                      ; re_node_set_init_union
0000000000008c95         test       eax, eax
0000000000008c97         mov        dword [rsp+0x78+var_5C], eax
0000000000008c9b         jne        loc_8ce8

0000000000008c9d         mov        rdi, qword [rsp+0x78+var_70]
0000000000008ca2         mov        rdx, r13
0000000000008ca5         mov        rsi, r14
0000000000008ca8         call       re_acquire_state                            ; re_acquire_state
0000000000008cad         mov        rdi, qword [rsp+0x78+var_48]                ; argument "__ptr" for method j_free
0000000000008cb2         mov        qword [rbx+r15*8], rax
0000000000008cb6         call       j_free                                      ; free
0000000000008cbb         mov        eax, dword [rsp+0x78+var_5C]
0000000000008cbf         test       eax, eax
0000000000008cc1         jne        loc_8ce8

                     loc_8cc3:
0000000000008cc3         add        r15, 0x1                                    ; CODE XREF=merge_state_array+83
0000000000008cc7         cmp        rbp, r15
0000000000008cca         je         loc_8ce6

                     loc_8ccc:
0000000000008ccc         mov        rsi, qword [rbx+r15*8]                      ; CODE XREF=merge_state_array+69, merge_state_array+180
0000000000008cd0         mov        rdx, qword [r12+r15*8]
0000000000008cd4         test       rsi, rsi
0000000000008cd7         jne        loc_8c80

0000000000008cd9         mov        qword [rbx+r15*8], rdx
0000000000008cdd         add        r15, 0x1
0000000000008ce1         cmp        rbp, r15
0000000000008ce4         jne        loc_8ccc

                     loc_8ce6:
0000000000008ce6         xor        eax, eax                                    ; CODE XREF=merge_state_array+33, merge_state_array+154

                     loc_8ce8:
0000000000008ce8         mov        rcx, qword [rsp+0x78+var_40]                ; CODE XREF=merge_state_array+107, merge_state_array+145
0000000000008ced         xor        rcx, qword [fs:0x28]
0000000000008cf6         jne        loc_8d07

0000000000008cf8         add        rsp, 0x48
0000000000008cfc         pop        rbx
0000000000008cfd         pop        rbp
0000000000008cfe         pop        r12
0000000000008d00         pop        r13
0000000000008d02         pop        r14
0000000000008d04         pop        r15
0000000000008d06         ret
                        ; endp

                     loc_8d07:
0000000000008d07         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=merge_state_array+198
                        ; endp
0000000000008d0c         align      16                                          ; End of unwind block (FDE at 0x171cc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_5C: int32_t, -92
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_7C: int32_t, -124
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168


                     expand_bkref_cache:
0000000000008d10         push       r15                                         ; Begin of unwind block (FDE at 0x17218), CODE XREF=check_arrival+928, check_arrival+1614
0000000000008d12         push       r14
0000000000008d14         push       r13
0000000000008d16         push       r12
0000000000008d18         mov        r12, rdx
0000000000008d1b         push       rbp
0000000000008d1c         push       rbx
0000000000008d1d         mov        rbx, rdi
0000000000008d20         mov        rbp, rsi
0000000000008d23         xor        esi, esi
0000000000008d25         sub        rsp, 0x78
0000000000008d29         mov        rdi, qword [rdi+0xc8]
0000000000008d30         mov        rax, qword [fs:0x28]
0000000000008d39         mov        qword [rsp+0xa8+var_40], rax
0000000000008d3e         xor        eax, eax
0000000000008d40         mov        qword [rsp+0xa8+var_88], rcx
0000000000008d45         mov        dword [rsp+0xa8+var_7C], r8d
0000000000008d4a         mov        rdx, rdi

                     loc_8d4d:
0000000000008d4d         cmp        rsi, rdx                                    ; CODE XREF=expand_bkref_cache+247
0000000000008d50         jge        loc_8da7

0000000000008d52         lea        rax, qword [rsi+rdx]
0000000000008d56         mov        r8, qword [rbx+0xd8]
0000000000008d5d         mov        rcx, rax
0000000000008d60         shr        rcx, 0x3f
0000000000008d64         add        rcx, rax
0000000000008d67         sar        rcx, 0x1
0000000000008d6a         lea        rax, qword [rcx+rcx*4]
0000000000008d6e         cmp        r12, qword [r8+rax*8+8]
0000000000008d73         jle        loc_8da2

0000000000008d75         jmp        loc_8df8
0000000000008d7a         align      128

                     loc_8d80:
0000000000008d80         lea        rdx, qword [rsi+rcx]                        ; CODE XREF=expand_bkref_cache+149
0000000000008d84         mov        rax, rdx
0000000000008d87         shr        rax, 0x3f
0000000000008d8b         add        rax, rdx
0000000000008d8e         sar        rax, 0x1
0000000000008d91         lea        rdx, qword [rax+rax*4]
0000000000008d95         mov        r9, rax
0000000000008d98         cmp        r12, qword [r8+rdx*8+8]
0000000000008d9d         jg         loc_8e00

0000000000008d9f         mov        rcx, rax

                     loc_8da2:
0000000000008da2         cmp        rsi, rcx                                    ; CODE XREF=expand_bkref_cache+99
0000000000008da5         jl         loc_8d80

                     loc_8da7:
0000000000008da7         cmp        rdi, rsi                                    ; CODE XREF=expand_bkref_cache+64
0000000000008daa         jle        loc_8dcd

0000000000008dac         mov        rcx, qword [rbx+0xd8]
0000000000008db3         lea        rax, qword [rsi+rsi*4]
0000000000008db7         shl        rax, 0x3
0000000000008dbb         cmp        qword [rcx+rax+8], r12
0000000000008dc0         mov        qword [rsp+0xa8+var_78], rax
0000000000008dc5         jne        loc_8dcd

0000000000008dc7         cmp        rsi, 0xffffffffffffffff
0000000000008dcb         jne        loc_8e10

                     loc_8dcd:
0000000000008dcd         xor        eax, eax                                    ; CODE XREF=expand_bkref_cache+154, expand_bkref_cache+181, expand_bkref_cache+514

                     loc_8dcf:
0000000000008dcf         mov        rbx, qword [rsp+0xa8+var_40]                ; CODE XREF=expand_bkref_cache+833, expand_bkref_cache+854, expand_bkref_cache+865, expand_bkref_cache+872, expand_bkref_cache+888
0000000000008dd4         xor        rbx, qword [fs:0x28]
0000000000008ddd         jne        loc_90a9

0000000000008de3         add        rsp, 0x78
0000000000008de7         pop        rbx
0000000000008de8         pop        rbp
0000000000008de9         pop        r12
0000000000008deb         pop        r13
0000000000008ded         pop        r14
0000000000008def         pop        r15
0000000000008df1         ret
                        ; endp
0000000000008df2         align      8

                     loc_8df8:
0000000000008df8         mov        r9, rcx                                     ; CODE XREF=expand_bkref_cache+101
0000000000008dfb         mov        rcx, rdx
0000000000008dfe         nop

                     loc_8e00:
0000000000008e00         lea        rsi, qword [r9+1]                           ; CODE XREF=expand_bkref_cache+141
0000000000008e04         mov        rdx, rcx
0000000000008e07         jmp        loc_8d4d
0000000000008e0c         align      16

                     loc_8e10:
0000000000008e10         lea        rax, qword [rbp+0x10]                       ; CODE XREF=expand_bkref_cache+187
0000000000008e14         mov        r13, qword [rbx+0x98]
0000000000008e1b         mov        qword [rsp+0xa8+var_A8], rax
0000000000008e1f         lea        rax, qword [rsp+0xa8+var_5C]
0000000000008e24         mov        qword [rsp+0xa8+var_70], rax
0000000000008e29         lea        rax, qword [rsp+0xa8+var_58]
0000000000008e2e         mov        qword [rsp+0xa8+var_98], rax

                     loc_8e33:
0000000000008e33         mov        rax, qword [rsp+0xa8+var_78]                ; CODE XREF=expand_bkref_cache+737
0000000000008e38         lea        r15, qword [rcx+rax]
0000000000008e3c         jmp        loc_8f18
0000000000008e41         align      8

                     loc_8e48:
0000000000008e48         mov        rax, qword [r13+0x18]                       ; CODE XREF=expand_bkref_cache+564
0000000000008e4c         mov        rcx, qword [rax+r10*8]
0000000000008e50         mov        r10, qword [rbx+0xb8]
0000000000008e57         lea        rax, qword [r14*8]
0000000000008e5f         mov        qword [rsp+0xa8+var_90], rax
0000000000008e64         add        r10, rax
0000000000008e67         mov        qword [rsp+0xa8+var_A0], rcx
0000000000008e6c         mov        r9, qword [r10]
0000000000008e6f         test       r9, r9
0000000000008e72         je         loc_9000

0000000000008e78         mov        rdi, qword [r9+0x10]
0000000000008e7c         lea        rsi, qword [r9+0x18]
0000000000008e80         mov        rdx, rcx
0000000000008e83         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
0000000000008e88         test       rax, rax
0000000000008e8b         jne        loc_8f09

0000000000008e8d         mov        rdi, qword [rsp+0xa8+var_98]
0000000000008e92         lea        rsi, qword [r9+8]
0000000000008e96         call       re_node_set_init_copy                       ; re_node_set_init_copy
0000000000008e9b         mov        rsi, qword [rsp+0xa8+var_A0]
0000000000008ea0         mov        rdi, qword [rsp+0xa8+var_98]
0000000000008ea5         mov        dword [rsp+0xa8+var_5C], eax
0000000000008ea9         call       re_node_set_insert                          ; re_node_set_insert
0000000000008eae         mov        edx, dword [rsp+0xa8+var_5C]
0000000000008eb2         test       edx, edx
0000000000008eb4         jne        loc_9056

0000000000008eba         cmp        al, 0x1
0000000000008ebc         jne        loc_9056

0000000000008ec2         mov        r10, qword [rsp+0xa8+var_90]
0000000000008ec7         add        r10, qword [rbx+0xb8]

                     loc_8ece:
0000000000008ece         mov        rdx, qword [rsp+0xa8+var_98]                ; CODE XREF=expand_bkref_cache+816
0000000000008ed3         mov        rdi, qword [rsp+0xa8+var_70]
0000000000008ed8         mov        rsi, r13
0000000000008edb         mov        qword [rsp+0xa8+var_A0], r10
0000000000008ee0         call       re_acquire_state                            ; re_acquire_state
0000000000008ee5         mov        r10, qword [rsp+0xa8+var_A0]
0000000000008eea         mov        rdi, qword [rsp+0xa8+var_48]                ; argument "__ptr" for method j_free
0000000000008eef         mov        qword [r10], rax
0000000000008ef2         call       j_free                                      ; free
0000000000008ef7         mov        rax, qword [rbx+0xb8]
0000000000008efe         cmp        qword [rax+r14*8], 0x0
0000000000008f03         je         loc_9045

                     loc_8f09:
0000000000008f09         add        r15, 0x28                                   ; CODE XREF=expand_bkref_cache+379, expand_bkref_cache+545, expand_bkref_cache+607, expand_bkref_cache+827
0000000000008f0d         cmp        byte [r15-8], 0x0
0000000000008f12         je         loc_8dcd

                     loc_8f18:
0000000000008f18         mov        r10, qword [r15]                            ; CODE XREF=expand_bkref_cache+300
0000000000008f1b         mov        r9, qword [rbp+8]
0000000000008f1f         mov        rsi, qword [rsp+0xa8+var_A8]
0000000000008f23         mov        rdx, r10
0000000000008f26         mov        rdi, r9
0000000000008f29         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
0000000000008f2e         test       rax, rax
0000000000008f31         je         loc_8f09

0000000000008f33         mov        r8, qword [r15+0x18]
0000000000008f37         add        r8, r12
0000000000008f3a         mov        r14, r8
0000000000008f3d         sub        r14, qword [r15+0x10]
0000000000008f41         cmp        r12, r14
0000000000008f44         jne        loc_8e48

0000000000008f4a         mov        rcx, qword [r13+0x28]
0000000000008f4e         lea        rax, qword [r10+r10*2]
0000000000008f52         mov        rsi, qword [rsp+0xa8+var_A8]
0000000000008f56         mov        rdi, r9
0000000000008f59         lea        rax, qword [rcx+rax*8]
0000000000008f5d         mov        rax, qword [rax+0x10]
0000000000008f61         mov        r14, qword [rax]
0000000000008f64         mov        rdx, r14
0000000000008f67         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
0000000000008f6c         test       rax, rax
0000000000008f6f         jne        loc_8f09

0000000000008f71         mov        edi, 0x8                                    ; argument "__size" for method j_malloc
0000000000008f76         mov        qword [rsp+0xa8+var_58], 0x1
0000000000008f7f         mov        qword [rsp+0xa8+var_50], 0x1
0000000000008f88         call       j_malloc                                    ; malloc
0000000000008f8d         test       rax, rax
0000000000008f90         mov        qword [rsp+0xa8+var_48], rax
0000000000008f95         je         loc_908d

0000000000008f9b         mov        qword [rax], r14
0000000000008f9e         xor        eax, eax

                     loc_8fa0:
0000000000008fa0         mov        r15, qword [rsp+0xa8+var_98]                ; CODE XREF=expand_bkref_cache+916
0000000000008fa5         mov        rdx, qword [rsp+0xa8+var_88]
0000000000008faa         mov        rdi, r13
0000000000008fad         mov        ecx, dword [rsp+0xa8+var_7C]
0000000000008fb1         mov        dword [rsp+0xa8+var_5C], eax
0000000000008fb5         mov        rsi, r15
0000000000008fb8         call       check_arrival_expand_ecl                    ; check_arrival_expand_ecl
0000000000008fbd         mov        rsi, r15
0000000000008fc0         mov        rdi, rbp
0000000000008fc3         mov        r14d, eax
0000000000008fc6         call       re_node_set_merge                           ; re_node_set_merge
0000000000008fcb         mov        rdi, qword [rsp+0xa8+var_48]                ; argument "__ptr" for method j_free
0000000000008fd0         mov        r15d, eax
0000000000008fd3         call       j_free                                      ; free
0000000000008fd8         mov        eax, dword [rsp+0xa8+var_5C]
0000000000008fdc         mov        edx, r14d
0000000000008fdf         or         edx, r15d
0000000000008fe2         or         edx, eax
0000000000008fe4         jne        loc_9076

0000000000008fea         mov        rcx, qword [rbx+0xd8]
0000000000008ff1         jmp        loc_8e33
0000000000008ff6         align      4096

                     loc_9000:
0000000000009000         mov        edi, 0x8                                    ; argument "__size" for method j_malloc, CODE XREF=expand_bkref_cache+354
0000000000009005         mov        qword [rsp+0xa8+var_90], r10
000000000000900a         mov        qword [rsp+0xa8+var_58], 0x1
0000000000009013         mov        qword [rsp+0xa8+var_50], 0x1
000000000000901c         call       j_malloc                                    ; malloc
0000000000009021         test       rax, rax
0000000000009024         mov        qword [rsp+0xa8+var_48], rax
0000000000009029         je         loc_906c

000000000000902b         mov        rdi, qword [rsp+0xa8+var_A0]
0000000000009030         mov        dword [rsp+0xa8+var_5C], 0x0
0000000000009038         mov        r10, qword [rsp+0xa8+var_90]
000000000000903d         mov        qword [rax], rdi
0000000000009040         jmp        loc_8ece

                     loc_9045:
0000000000009045         mov        eax, dword [rsp+0xa8+var_5C]                ; CODE XREF=expand_bkref_cache+499
0000000000009049         test       eax, eax
000000000000904b         je         loc_8f09

0000000000009051         jmp        loc_8dcf

                     loc_9056:
0000000000009056         mov        rdi, qword [rsp+0xa8+var_48]                ; argument "__ptr" for method j_free, CODE XREF=expand_bkref_cache+420, expand_bkref_cache+428
000000000000905b         call       j_free                                      ; free
0000000000009060         mov        eax, dword [rsp+0xa8+var_5C]
0000000000009064         test       eax, eax
0000000000009066         jne        loc_8dcf

                     loc_906c:
000000000000906c         mov        eax, 0xc                                    ; CODE XREF=expand_bkref_cache+793
0000000000009071         jmp        loc_8dcf

                     loc_9076:
0000000000009076         test       eax, eax                                    ; CODE XREF=expand_bkref_cache+724
0000000000009078         jne        loc_8dcf

000000000000907e         test       r14d, r14d
0000000000009081         mov        eax, r14d
0000000000009084         cmove      eax, r15d
0000000000009088         jmp        loc_8dcf

                     loc_908d:
000000000000908d         mov        qword [rsp+0xa8+var_50], 0x0                ; CODE XREF=expand_bkref_cache+645
0000000000009096         mov        qword [rsp+0xa8+var_58], 0x0
000000000000909f         mov        eax, 0xc
00000000000090a4         jmp        loc_8fa0

                     loc_90a9:
00000000000090a9         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=expand_bkref_cache+205
                        ; endp
00000000000090ae         align      16                                          ; End of unwind block (FDE at 0x17218)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80


                     check_subexp_matching_top.isra.18:
00000000000090b0         push       r15                                         ; Begin of unwind block (FDE at 0x17264), CODE XREF=transit_state_bkref.isra.34+2056, merge_state_with_log+417, re_search_internal+5535
00000000000090b2         push       r14
00000000000090b4         push       r13
00000000000090b6         push       r12
00000000000090b8         push       rbp
00000000000090b9         push       rbx
00000000000090ba         sub        rsp, 0x28
00000000000090be         cmp        qword [rsi], 0x0
00000000000090c2         mov        r13, qword [rdi+0x98]
00000000000090c9         jle        loc_9190

00000000000090cf         mov        r14, rdx
00000000000090d2         mov        r12, rsi
00000000000090d5         mov        r15, rdi
00000000000090d8         xor        ebx, ebx
00000000000090da         jmp        loc_90ee
00000000000090dc         align      32

                     loc_90e0:
00000000000090e0         add        rbx, 0x1                                    ; CODE XREF=check_subexp_matching_top.isra.18+84, check_subexp_matching_top.isra.18+93, check_subexp_matching_top.isra.18+106
00000000000090e4         cmp        rbx, qword [r12]
00000000000090e8         jge        loc_9190

                     loc_90ee:
00000000000090ee         mov        rax, qword [r14]                            ; CODE XREF=check_subexp_matching_top.isra.18+42, check_subexp_matching_top.isra.18+211
00000000000090f1         mov        rbp, qword [rax+rbx*8]
00000000000090f5         mov        rax, rbp
00000000000090f8         shl        rax, 0x4
00000000000090fc         add        rax, qword [r13]
0000000000009100         cmp        byte [rax+8], 0x8
0000000000009104         jne        loc_90e0

0000000000009106         mov        rax, qword [rax]
0000000000009109         cmp        rax, 0x3f
000000000000910d         jg         loc_90e0

000000000000910f         mov        rsi, qword [r13+0xa0]
0000000000009116         bt         rsi, rax
000000000000911a         jae        loc_90e0

000000000000911c         mov        r8, qword [r15+0xe8]
0000000000009123         cmp        r8, qword [r15+0xf0]
000000000000912a         mov        r9, qword [r15+0xf8]
0000000000009131         je         loc_91a8

                     loc_9133:
0000000000009133         mov        esi, 0x30                                   ; argument "__size" for method j_calloc, CODE XREF=check_subexp_matching_top.isra.18+316
0000000000009138         mov        edi, 0x1                                    ; argument "__nmemb" for method j_calloc
000000000000913d         mov        qword [rsp+0x58+var_48], r9
0000000000009142         mov        qword [rsp+0x58+var_50], r8
0000000000009147         mov        qword [rsp+0x58+var_40], rcx
000000000000914c         call       j_calloc                                    ; calloc
0000000000009151         mov        r8, qword [rsp+0x58+var_50]
0000000000009156         mov        r9, qword [rsp+0x58+var_48]
000000000000915b         test       rax, rax
000000000000915e         mov        qword [r9+r8*8], rax
0000000000009162         je         loc_91a1

0000000000009164         add        r8, 0x1
0000000000009168         add        rbx, 0x1
000000000000916c         mov        rcx, qword [rsp+0x58+var_40]
0000000000009171         mov        qword [r15+0xe8], r8
0000000000009178         cmp        rbx, qword [r12]
000000000000917c         mov        qword [rax+8], rbp
0000000000009180         mov        qword [rax], rcx
0000000000009183         jl         loc_90ee

0000000000009189         nop        dword [rax]

                     loc_9190:
0000000000009190         xor        eax, eax                                    ; CODE XREF=check_subexp_matching_top.isra.18+25, check_subexp_matching_top.isra.18+56

                     loc_9192:
0000000000009192         add        rsp, 0x28                                   ; CODE XREF=check_subexp_matching_top.isra.18+246
0000000000009196         pop        rbx
0000000000009197         pop        rbp
0000000000009198         pop        r12
000000000000919a         pop        r13
000000000000919c         pop        r14
000000000000919e         pop        r15
00000000000091a0         ret
                        ; endp

                     loc_91a1:
00000000000091a1         mov        eax, 0xc                                    ; CODE XREF=check_subexp_matching_top.isra.18+178, check_subexp_matching_top.isra.18+288
00000000000091a6         jmp        loc_9192

                     loc_91a8:
00000000000091a8         lea        rax, qword [r8+r8]                          ; CODE XREF=check_subexp_matching_top.isra.18+129
00000000000091ac         mov        rsi, r8
00000000000091af         mov        rdi, r9                                     ; argument "__ptr" for method j_realloc
00000000000091b2         shl        rsi, 0x4                                    ; argument "__size" for method j_realloc
00000000000091b6         mov        qword [rsp+0x58+var_50], rcx
00000000000091bb         mov        qword [rsp+0x58+var_48], rax
00000000000091c0         call       j_realloc                                   ; realloc
00000000000091c5         test       rax, rax
00000000000091c8         mov        r9, rax
00000000000091cb         mov        rcx, qword [rsp+0x58+var_50]
00000000000091d0         je         loc_91a1

00000000000091d2         mov        qword [r15+0xf8], rax
00000000000091d9         mov        rax, qword [rsp+0x58+var_48]
00000000000091de         mov        r8, qword [r15+0xe8]
00000000000091e5         mov        qword [r15+0xf0], rax
00000000000091ec         jmp        loc_9133
00000000000091f1         align      512                                         ; End of unwind block (FDE at 0x17264)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_string_context_at:
0000000000009200         push       rbp                                         ; Begin of unwind block (FDE at 0x172b0), CODE XREF=check_node_accept+109, check_halt_state_context.isra.20+22, re_string_reconstruct+201, re_string_reconstruct+805, re_string_reconstruct+1635, check_arrival+192, check_arrival+962, check_arrival+1179, transit_state_bkref.isra.34+265, transit_state_bkref.isra.34+1092, merge_state_with_log+222
0000000000009201         push       rbx
0000000000009202         mov        rbp, rdi
0000000000009205         sub        rsp, 0x8
0000000000009209         test       rsi, rsi
000000000000920c         js         loc_9260

000000000000920e         cmp        qword [rdi+0x58], rsi
0000000000009212         je         loc_92b8

0000000000009218         cmp        dword [rdi+0x90], 0x1
000000000000921f         jle        loc_9270

0000000000009221         mov        rax, qword [rdi+0x10]
0000000000009225         jmp        loc_923a
0000000000009227         align      16

                     loc_9230:
0000000000009230         sub        rsi, 0x1                                    ; CODE XREF=re_string_context_at+64
0000000000009234         cmp        rsi, 0xffffffffffffffff
0000000000009238         je         loc_9260

                     loc_923a:
000000000000923a         mov        ebx, dword [rax+rsi*4]                      ; CODE XREF=re_string_context_at+37
000000000000923d         cmp        ebx, 0xffffffff
0000000000009240         je         loc_9230

0000000000009242         cmp        byte [rbp+0x8e], 0x0
0000000000009249         jne        loc_92c8

                     loc_924b:
000000000000924b         xor        eax, eax                                    ; CODE XREF=re_string_context_at+214
000000000000924d         cmp        ebx, 0xa
0000000000009250         je         loc_929c

                     loc_9252:
0000000000009252         add        rsp, 0x8                                    ; CODE XREF=re_string_context_at+147, re_string_context_at+154, re_string_context_at+198, re_string_context_at+225
0000000000009256         pop        rbx
0000000000009257         pop        rbp
0000000000009258         ret
                        ; endp
0000000000009259         align      32

                     loc_9260:
0000000000009260         mov        eax, dword [rbp+0x70]                       ; CODE XREF=re_string_context_at+12, re_string_context_at+56
0000000000009263         add        rsp, 0x8
0000000000009267         pop        rbx
0000000000009268         pop        rbp
0000000000009269         ret
                        ; endp
000000000000926a         align      16

                     loc_9270:
0000000000009270         mov        rax, qword [rdi+8]                          ; CODE XREF=re_string_context_at+31
0000000000009274         mov        rcx, qword [rdi+0x80]
000000000000927b         movzx      eax, byte [rax+rsi]
000000000000927f         mov        rdx, rax
0000000000009282         sar        rax, 0x6
0000000000009286         mov        rcx, qword [rcx+rax*8]
000000000000928a         mov        eax, 0x1
000000000000928f         bt         rcx, rdx
0000000000009293         jb         loc_9252

0000000000009295         xor        eax, eax
0000000000009297         cmp        dl, 0xa
000000000000929a         jne        loc_9252

                     loc_929c:
000000000000929c         xor        eax, eax                                    ; CODE XREF=re_string_context_at+80
000000000000929e         cmp        byte [rbp+0x8d], 0x0
00000000000092a5         setne      al
00000000000092a8         add        rsp, 0x8
00000000000092ac         add        eax, eax
00000000000092ae         pop        rbx
00000000000092af         pop        rbp
00000000000092b0         ret
                        ; endp
00000000000092b1         align      8

                     loc_92b8:
00000000000092b8         and        edx, 0x2                                    ; CODE XREF=re_string_context_at+18
00000000000092bb         cmp        edx, 0x1
00000000000092be         sbb        eax, eax
00000000000092c0         and        eax, 0x2
00000000000092c3         add        eax, 0x8
00000000000092c6         jmp        loc_9252

                     loc_92c8:
00000000000092c8         mov        edi, ebx                                    ; argument "__wc" for method j_iswalnum, CODE XREF=re_string_context_at+73
00000000000092ca         call       j_iswalnum                                  ; iswalnum
00000000000092cf         test       eax, eax
00000000000092d1         jne        loc_92dc

00000000000092d3         cmp        ebx, 0x5f
00000000000092d6         jne        loc_924b

                     loc_92dc:
00000000000092dc         mov        eax, 0x1                                    ; CODE XREF=re_string_context_at+209
00000000000092e1         jmp        loc_9252
00000000000092e6         align      16                                          ; End of unwind block (FDE at 0x172b0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     check_node_accept:
00000000000092f0         mov        rax, qword [rdi+8]                          ; Begin of unwind block (FDE at 0x172f4), CODE XREF=check_arrival+495, set_regs+378, sift_states_backward+295
00000000000092f4         movzx      ecx, byte [rax+rdx]
00000000000092f8         movzx      eax, byte [rsi+8]
00000000000092fc         cmp        al, 0x3
00000000000092fe         je         loc_93b8

0000000000009304         jbe        loc_93a0

000000000000930a         cmp        al, 0x5
000000000000930c         je         loc_9320

000000000000930e         cmp        al, 0x7
0000000000009310         jne        loc_93b0

0000000000009316         xor        eax, eax
0000000000009318         test       cl, cl
000000000000931a         js         loc_93aa

                     loc_9320:
0000000000009320         cmp        cl, 0xa                                     ; CODE XREF=check_node_accept+28
0000000000009323         je         loc_93e8

0000000000009329         test       cl, cl
000000000000932b         jne        loc_9340

000000000000932d         mov        rcx, qword [rdi+0x98]
0000000000009334         xor        eax, eax
0000000000009336         test       byte [rcx+0xd8], 0x80
000000000000933d         jne        loc_93aa

000000000000933f         nop

                     loc_9340:
0000000000009340         push       rbx                                         ; CODE XREF=check_node_accept+59, check_node_accept+184, check_node_accept+220, check_node_accept+264
0000000000009341         mov        ebx, dword [rsi+8]
0000000000009344         mov        eax, 0x1
0000000000009349         test       ebx, 0x3ff00
000000000000934f         je         loc_939c

0000000000009351         mov        rsi, rdx
0000000000009354         mov        edx, dword [rdi+0xa0]
000000000000935a         shr        ebx, 0x8
000000000000935d         call       re_string_context_at                        ; re_string_context_at
0000000000009362         mov        ecx, ebx
0000000000009364         mov        edx, eax
0000000000009366         and        cx, 0x3ff
000000000000936b         test       bl, 0x4
000000000000936e         je         loc_93d8

0000000000009370         xor        eax, eax
0000000000009372         test       dl, 0x1
0000000000009375         je         loc_939c

0000000000009377         and        ebx, 0x8
000000000000937a         jne        loc_939c

                     loc_937c:
000000000000937c         test       cl, 0x20                                    ; CODE XREF=check_node_accept+235, check_node_accept+239
000000000000937f         je         loc_9388

0000000000009381         xor        eax, eax
0000000000009383         test       dl, 0x2
0000000000009386         je         loc_939c

                     loc_9388:
0000000000009388         shr        edx, 0x3                                    ; CODE XREF=check_node_accept+143
000000000000938b         mov        eax, 0x1
0000000000009390         and        edx, 0x1
0000000000009393         and        ecx, 0x80
0000000000009399         cmovne     eax, edx

                     loc_939c:
000000000000939c         pop        rbx                                         ; CODE XREF=check_node_accept+95, check_node_accept+133, check_node_accept+138, check_node_accept+150
000000000000939d         ret
                        ; endp
000000000000939e         align      32

                     loc_93a0:
00000000000093a0         cmp        al, 0x1                                     ; CODE XREF=check_node_accept+20
00000000000093a2         jne        loc_93b0

00000000000093a4         xor        eax, eax
00000000000093a6         cmp        byte [rsi], cl
00000000000093a8         je         loc_9340

                     loc_93aa:
00000000000093aa         ret                                                    ; CODE XREF=check_node_accept+42, check_node_accept+77
                        ; endp
00000000000093ac         align      16

                     loc_93b0:
00000000000093b0         xor        eax, eax                                    ; CODE XREF=check_node_accept+32, check_node_accept+178
00000000000093b2         ret
                        ; endp
00000000000093b3         align      8

                     loc_93b8:
00000000000093b8         mov        r8, qword [rsi]                             ; CODE XREF=check_node_accept+14
00000000000093bb         movzx      eax, cl
00000000000093be         sar        rax, 0x6
00000000000093c2         mov        r8, qword [r8+rax*8]
00000000000093c6         xor        eax, eax
00000000000093c8         bt         r8, rcx
00000000000093cc         jb         loc_9340

00000000000093d2         ret
                        ; endp
00000000000093d4         align      8

                     loc_93d8:
00000000000093d8         and        ebx, 0x8                                    ; CODE XREF=check_node_accept+126
00000000000093db         je         loc_937c

00000000000093dd         test       al, 0x1
00000000000093df         je         loc_937c

00000000000093e1         xor        eax, eax
00000000000093e3         pop        rbx
00000000000093e4         ret
                        ; endp
00000000000093e5         align      8

                     loc_93e8:
00000000000093e8         mov        rcx, qword [rdi+0x98]                       ; CODE XREF=check_node_accept+51
00000000000093ef         xor        eax, eax
00000000000093f1         test       byte [rcx+0xd8], 0x40
00000000000093f8         jne        loc_9340

00000000000093fe         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     check_halt_state_context.isra.20:
0000000000009400         push       r12                                         ; End of unwind block (FDE at 0x172f4), Begin of unwind block (FDE at 0x1731c), CODE XREF=re_search_internal+2247, re_search_internal+2620, re_search_internal+3076, re_search_internal+4556, re_search_internal+5591
0000000000009402         mov        r12, rdx
0000000000009405         push       rbp
0000000000009406         push       rbx
0000000000009407         mov        edx, dword [rdi+0xa0]
000000000000940d         mov        rbx, rsi
0000000000009410         mov        rsi, rcx
0000000000009413         mov        rbp, rdi
0000000000009416         call       re_string_context_at                        ; re_string_context_at
000000000000941b         test       rbx, rbx
000000000000941e         jle        loc_94c8

0000000000009424         mov        rdx, qword [rbp+0x98]
000000000000942b         mov        r11d, eax
000000000000942e         mov        ebp, eax
0000000000009430         and        eax, 0x1
0000000000009433         mov        r9, qword [r12]
0000000000009437         xor        esi, esi
0000000000009439         and        ebp, 0x8
000000000000943c         and        r11d, 0x2
0000000000009440         mov        r10d, eax
0000000000009443         mov        r8, qword [rdx]
0000000000009446         jmp        loc_9459
0000000000009448         align      16

                     loc_9450:
0000000000009450         add        rsi, 0x1                                    ; CODE XREF=check_halt_state_context.isra.20+120, check_halt_state_context.isra.20+135, check_halt_state_context.isra.20+140, check_halt_state_context.isra.20+151, check_halt_state_context.isra.20+163, check_halt_state_context.isra.20+184
0000000000009454         cmp        rsi, rbx
0000000000009457         je         loc_94c8

                     loc_9459:
0000000000009459         mov        rax, qword [r9+rsi*8]                       ; CODE XREF=check_halt_state_context.isra.20+70
000000000000945d         mov        rdx, rax
0000000000009460         shl        rdx, 0x4
0000000000009464         add        rdx, r8
0000000000009467         mov        ecx, dword [rdx+8]
000000000000946a         shr        ecx, 0x8
000000000000946d         mov        edi, ecx
000000000000946f         and        di, 0x3ff
0000000000009474         cmp        byte [rdx+8], 0x2
0000000000009478         jne        loc_9450

000000000000947a         test       di, di
000000000000947d         je         loc_94a5

000000000000947f         test       cl, 0x4
0000000000009482         je         loc_94b0

0000000000009484         test       r10d, r10d
0000000000009487         je         loc_9450

0000000000009489         and        ecx, 0x8
000000000000948c         jne        loc_9450

                     loc_948e:
000000000000948e         test       dil, 0x20                                   ; CODE XREF=check_halt_state_context.isra.20+179
0000000000009492         je         loc_9499

                     loc_9494:
0000000000009494         test       r11d, r11d                                  ; CODE XREF=check_halt_state_context.isra.20+192
0000000000009497         je         loc_9450

                     loc_9499:
0000000000009499         and        edi, 0x80                                   ; CODE XREF=check_halt_state_context.isra.20+146, check_halt_state_context.isra.20+190
000000000000949f         je         loc_94a5

00000000000094a1         test       ebp, ebp
00000000000094a3         je         loc_9450

                     loc_94a5:
00000000000094a5         pop        rbx                                         ; CODE XREF=check_halt_state_context.isra.20+125, check_halt_state_context.isra.20+159
00000000000094a6         pop        rbp
00000000000094a7         pop        r12
00000000000094a9         ret
                        ; endp
00000000000094aa         align      16

                     loc_94b0:
00000000000094b0         and        ecx, 0x8                                    ; CODE XREF=check_halt_state_context.isra.20+130
00000000000094b3         je         loc_948e

00000000000094b5         test       r10d, r10d
00000000000094b8         jne        loc_9450

00000000000094ba         test       dil, 0x20
00000000000094be         je         loc_9499

00000000000094c0         jmp        loc_9494
00000000000094c2         align      8

                     loc_94c8:
00000000000094c8         pop        rbx                                         ; CODE XREF=check_halt_state_context.isra.20+30, check_halt_state_context.isra.20+87
00000000000094c9         xor        eax, eax
00000000000094cb         pop        rbp
00000000000094cc         pop        r12
00000000000094ce         ret
                        ; endp
00000000000094cf         align      16                                          ; End of unwind block (FDE at 0x1731c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_46: int8_t, -70
        ;    var_50: int64_t, -80
        ;    var_54: int32_t, -84
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_6C: int32_t, -108
        ;    var_78: int64_t, -120


                     re_string_reconstruct:
00000000000094d0         push       r15                                         ; Begin of unwind block (FDE at 0x17354), CODE XREF=re_search_internal+1510, re_search_internal+4443
00000000000094d2         push       r14
00000000000094d4         mov        r15, rsi
00000000000094d7         push       r13
00000000000094d9         push       r12
00000000000094db         mov        r10d, edx
00000000000094de         push       rbp
00000000000094df         push       rbx
00000000000094e0         mov        rbp, rsi
00000000000094e3         mov        rbx, rdi
00000000000094e6         sub        rsp, 0x48
00000000000094ea         mov        rax, qword [fs:0x28]
00000000000094f3         mov        qword [rsp+0x78+var_40], rax
00000000000094f8         xor        eax, eax
00000000000094fa         mov        rax, qword [rdi+0x28]
00000000000094fe         sub        rbp, rax
0000000000009501         cmp        rax, rsi
0000000000009504         jle        loc_9566

0000000000009506         cmp        dword [rdi+0x90], 0x1
000000000000950d         jg         loc_9640

                     loc_9513:
0000000000009513         mov        rax, qword [rbx+0x50]                       ; CODE XREF=re_string_reconstruct+376
0000000000009517         mov        qword [rbx+0x30], 0x0
000000000000951f         mov        rbp, r15
0000000000009522         mov        qword [rbx+0x28], 0x0
000000000000952a         mov        qword [rbx+0x38], 0x0
0000000000009532         mov        byte [rbx+0x8c], 0x0
0000000000009539         mov        qword [rbx+0x58], rax
000000000000953d         mov        rax, qword [rbx+0x60]
0000000000009541         mov        qword [rbx+0x68], rax
0000000000009545         mov        eax, r10d
0000000000009548         and        eax, 0x1
000000000000954b         cmp        eax, 0x1
000000000000954e         sbb        eax, eax
0000000000009550         and        eax, 0x2
0000000000009553         add        eax, 0x4
0000000000009556         cmp        byte [rbx+0x8b], 0x0
000000000000955d         mov        dword [rbx+0x70], eax
0000000000009560         je         loc_9630

                     loc_9566:
0000000000009566         test       rbp, rbp                                    ; CODE XREF=re_string_reconstruct+52, re_string_reconstruct+359
0000000000009569         je         loc_95ce

000000000000956b         mov        rax, qword [rbx+0x38]
000000000000956f         movzx      edx, byte [rbx+0x8c]
0000000000009576         mov        r8, qword [rbx+0x30]
000000000000957a         cmp        rax, rbp
000000000000957d         jle        loc_96a0

0000000000009583         test       dl, dl
0000000000009585         jne        loc_9798

000000000000958b         lea        rsi, qword [rbp-1]
000000000000958f         mov        edx, r10d
0000000000009592         mov        rdi, rbx
0000000000009595         mov        qword [rsp+0x78+var_78], r8
0000000000009599         call       re_string_context_at                        ; re_string_context_at
000000000000959e         mov        r8, qword [rsp+0x78+var_78]
00000000000095a2         mov        dword [rbx+0x70], eax
00000000000095a5         sub        r8, rbp
00000000000095a8         cmp        dword [rbx+0x90], 0x1
00000000000095af         jg         loc_9650

                     loc_95b5:
00000000000095b5         cmp        byte [rbx+0x8b], 0x0                        ; CODE XREF=re_string_reconstruct+412
00000000000095bc         jne        loc_9960

00000000000095c2         sub        qword [rbx+0x38], rbp
00000000000095c6         mov        qword [rbx+0x30], r8

                     loc_95ca:
00000000000095ca         add        qword [rbx+8], rbp                          ; CODE XREF=re_string_reconstruct+1150, re_string_reconstruct+1780

                     loc_95ce:
00000000000095ce         mov        rax, qword [rbx+0x58]                       ; CODE XREF=re_string_reconstruct+153, re_string_reconstruct+1156
00000000000095d2         sub        qword [rbx+0x68], rbp
00000000000095d6         mov        qword [rbx+0x28], r15
00000000000095da         sub        rax, rbp
00000000000095dd         cmp        dword [rbx+0x90], 0x1
00000000000095e4         mov        qword [rbx+0x58], rax
00000000000095e8         jle        loc_9688

00000000000095ee         cmp        byte [rbx+0x88], 0x0
00000000000095f5         mov        rdi, rbx
00000000000095f8         je         loc_9678

00000000000095fa         call       build_wcs_upper_buffer                      ; build_wcs_upper_buffer
00000000000095ff         test       eax, eax
0000000000009601         jne        loc_960d

                     loc_9603:
0000000000009603         mov        qword [rbx+0x48], 0x0                       ; CODE XREF=re_string_reconstruct+429, re_string_reconstruct+457, re_string_reconstruct+1412, re_string_reconstruct+1488, re_string_reconstruct+1656
000000000000960b         xor        eax, eax

                     loc_960d:
000000000000960d         mov        rcx, qword [rsp+0x78+var_40]                ; CODE XREF=re_string_reconstruct+305
0000000000009612         xor        rcx, qword [fs:0x28]
000000000000961b         jne        loc_9c6a

0000000000009621         add        rsp, 0x48
0000000000009625         pop        rbx
0000000000009626         pop        rbp
0000000000009627         pop        r12
0000000000009629         pop        r13
000000000000962b         pop        r14
000000000000962d         pop        r15
000000000000962f         ret
                        ; endp

                     loc_9630:
0000000000009630         mov        rax, qword [rbx]                            ; CODE XREF=re_string_reconstruct+144
0000000000009633         mov        qword [rbx+8], rax
0000000000009637         jmp        loc_9566
000000000000963c         align      64

                     loc_9640:
0000000000009640         mov        qword [rdi+0x20], 0x0                       ; CODE XREF=re_string_reconstruct+61
0000000000009648         jmp        loc_9513
000000000000964d         align      16

                     loc_9650:
0000000000009650         mov        rdi, qword [rbx+0x10]                       ; argument "__dest" for method j_memmove, CODE XREF=re_string_reconstruct+223
0000000000009654         lea        rdx, qword [r8*4]                           ; argument "__n" for method j_memmove
000000000000965c         lea        rsi, qword [rdi+rbp*4]                      ; argument "__src" for method j_memmove
0000000000009660         call       j_memmove                                   ; memmove
0000000000009665         mov        r8, qword [rbx+0x30]
0000000000009669         sub        r8, rbp
000000000000966c         jmp        loc_95b5
0000000000009671         align      8

                     loc_9678:
0000000000009678         call       build_wcs_buffer                            ; build_wcs_buffer, CODE XREF=re_string_reconstruct+296
000000000000967d         jmp        loc_9603
0000000000009682         align      8

                     loc_9688:
0000000000009688         cmp        byte [rbx+0x8b], 0x0                        ; CODE XREF=re_string_reconstruct+280
000000000000968f         jne        loc_9a40

0000000000009695         mov        qword [rbx+0x30], rax
0000000000009699         jmp        loc_9603
000000000000969e         align      32

                     loc_96a0:
00000000000096a0         test       dl, dl                                      ; CODE XREF=re_string_reconstruct+173
00000000000096a2         jne        loc_9b4d

                     loc_96a8:
00000000000096a8         movsxd     rdx, dword [rbx+0x90]                       ; CODE XREF=re_string_reconstruct+1696
00000000000096af         mov        qword [rbx+0x30], 0x0
00000000000096b7         mov        r11, qword [rbx+0x28]
00000000000096bb         cmp        edx, 0x1
00000000000096be         jle        loc_9aa8

00000000000096c4         cmp        byte [rbx+0x89], 0x0
00000000000096cb         jne        loc_9988

                     loc_96d1:
00000000000096d1         lea        r14, qword [r11+rax]                        ; CODE XREF=re_string_reconstruct+1244, re_string_reconstruct+1263, re_string_reconstruct+1380
00000000000096d5         cmp        r15, r14
00000000000096d8         jle        loc_9b1f

00000000000096de         lea        rax, qword [rbx+0x20]
00000000000096e2         lea        r13, qword [rsp+0x78+var_54]
00000000000096e7         mov        qword [rsp+0x78+var_68], rax
00000000000096ec         nop        dword [rax]

                     loc_96f0:
00000000000096f0         mov        r12, qword [rbx+0x50]                       ; CODE XREF=re_string_reconstruct+624
00000000000096f4         mov        rsi, qword [rbx]
00000000000096f7         mov        rdi, r13
00000000000096fa         mov        rax, qword [rbx+0x20]
00000000000096fe         mov        rcx, qword [rsp+0x78+var_68]
0000000000009703         mov        dword [rsp+0x78+var_6C], r10d
0000000000009708         mov        qword [rsp+0x78+var_78], r8
000000000000970c         sub        r12, r14
000000000000970f         add        rsi, r14
0000000000009712         mov        rdx, r12
0000000000009715         mov        qword [rsp+0x78+var_60], rax
000000000000971a         call       rpl_mbrtowc                                 ; rpl_mbrtowc
000000000000971f         lea        rcx, qword [rax-1]
0000000000009723         mov        edx, dword [rsp+0x78+var_54]
0000000000009727         mov        r8, qword [rsp+0x78+var_78]
000000000000972b         mov        r10d, dword [rsp+0x78+var_6C]
0000000000009730         cmp        rcx, 0xfffffffffffffffc
0000000000009734         ja         loc_9b75

                     loc_973a:
000000000000973a         add        r14, rax                                    ; CODE XREF=re_string_reconstruct+1733
000000000000973d         cmp        r15, r14
0000000000009740         jg         loc_96f0

0000000000009742         sub        r14, r15
0000000000009745         cmp        edx, 0xffffffff
0000000000009748         mov        r12, r14
000000000000974b         mov        qword [rbx+0x30], r14
000000000000974f         je         loc_9b29

                     loc_9755:
0000000000009755         cmp        byte [rbx+0x8e], 0x0                        ; CODE XREF=re_string_reconstruct+1850
000000000000975c         jne        loc_9bc9

                     loc_9762:
0000000000009762         xor        eax, eax                                    ; CODE XREF=re_string_reconstruct+1805
0000000000009764         cmp        edx, 0xa
0000000000009767         jne        loc_9777

0000000000009769         xor        eax, eax
000000000000976b         cmp        byte [rbx+0x8d], 0x0
0000000000009772         setne      al
0000000000009775         add        eax, eax

                     loc_9777:
0000000000009777         mov        dword [rbx+0x70], eax                       ; CODE XREF=re_string_reconstruct+663, re_string_reconstruct+1816

                     loc_977a:
000000000000977a         cmp        r12, 0x0                                    ; CODE XREF=re_string_reconstruct+1643
000000000000977e         jne        loc_9b9a

                     loc_9784:
0000000000009784         movzx      eax, byte [rbx+0x8b]                        ; CODE XREF=re_string_reconstruct+1885
000000000000978b         mov        qword [rbx+0x38], r12
000000000000978f         jmp        loc_994c
0000000000009794         align      8

                     loc_9798:
0000000000009798         mov        r14, qword [rbx+0x18]                       ; CODE XREF=re_string_reconstruct+181
000000000000979c         mov        rcx, r8
000000000000979f         xor        esi, esi
00000000000097a1         jmp        loc_97b3
00000000000097a3         align      8

                     loc_97a8:
00000000000097a8         jge        loc_97e3                                    ; CODE XREF=re_string_reconstruct+766

00000000000097aa         lea        rsi, qword [rax+1]

                     loc_97ae:
00000000000097ae         cmp        rsi, rcx                                    ; CODE XREF=re_string_reconstruct+771
00000000000097b1         jge        loc_97d8

                     loc_97b3:
00000000000097b3         lea        rdx, qword [rsi+rcx]                        ; CODE XREF=re_string_reconstruct+721
00000000000097b7         mov        rax, rdx
00000000000097ba         shr        rax, 0x3f
00000000000097be         add        rax, rdx
00000000000097c1         sar        rax, 0x1
00000000000097c4         mov        rdx, qword [r14+rax*8]
00000000000097c8         mov        r12, rax
00000000000097cb         cmp        rdx, rbp
00000000000097ce         jle        loc_97a8

00000000000097d0         mov        rcx, rax
00000000000097d3         jmp        loc_97ae
00000000000097d5         align      8

                     loc_97d8:
00000000000097d8         lea        r12, qword [rax+1]                          ; CODE XREF=re_string_reconstruct+737
00000000000097dc         cmp        rdx, rbp
00000000000097df         cmovge     r12, rax

                     loc_97e3:
00000000000097e3         lea        r13, qword [r12-1]                          ; CODE XREF=loc_97a8
00000000000097e8         mov        edx, r10d
00000000000097eb         mov        rdi, rbx
00000000000097ee         mov        qword [rsp+0x78+var_78], r8
00000000000097f2         mov        rsi, r13
00000000000097f5         call       re_string_context_at                        ; re_string_context_at
00000000000097fa         cmp        rbp, r12
00000000000097fd         mov        dword [rbx+0x70], eax
0000000000009800         mov        r8, qword [rsp+0x78+var_78]
0000000000009804         jne        loc_9888

000000000000980a         cmp        rbp, r8
000000000000980d         jge        loc_9888

000000000000980f         cmp        qword [r14+r12*8], rbp
0000000000009813         jne        loc_9888

0000000000009815         mov        rdi, qword [rbx+0x10]                       ; argument "__dest" for method j_memmove
0000000000009819         sub        r8, rbp
000000000000981c         lea        rdx, qword [r8*4]                           ; argument "__n" for method j_memmove
0000000000009824         lea        rsi, qword [rdi+rbp*4]                      ; argument "__src" for method j_memmove
0000000000009828         call       j_memmove                                   ; memmove
000000000000982d         mov        rdi, qword [rbx+8]                          ; argument "__dest" for method j_memmove
0000000000009831         mov        rdx, qword [rbx+0x30]
0000000000009835         lea        rsi, qword [rdi+rbp]                        ; argument "__src" for method j_memmove
0000000000009839         sub        rdx, rbp                                    ; argument "__n" for method j_memmove
000000000000983c         call       j_memmove                                   ; memmove
0000000000009841         mov        rax, qword [rbx+0x30]
0000000000009845         sub        qword [rbx+0x38], rbp
0000000000009849         sub        rax, rbp
000000000000984c         test       rax, rax
000000000000984f         mov        qword [rbx+0x30], rax
0000000000009853         jle        loc_9878

0000000000009855         mov        rcx, qword [rbx+0x18]
0000000000009859         xor        eax, eax
000000000000985b         lea        rsi, qword [rcx+rbp*8]
000000000000985f         nop

                     loc_9860:
0000000000009860         mov        rdx, qword [rsi+rax*8]                      ; CODE XREF=re_string_reconstruct+931
0000000000009864         sub        rdx, rbp
0000000000009867         mov        qword [rcx+rax*8], rdx
000000000000986b         add        rax, 0x1
000000000000986f         cmp        qword [rbx+0x30], rax
0000000000009873         jg         loc_9860

0000000000009875         nop        dword [rax]

                     loc_9878:
0000000000009878         movzx      eax, byte [rbx+0x8b]                        ; CODE XREF=re_string_reconstruct+899, re_string_reconstruct+1587
000000000000987f         jmp        loc_994c
0000000000009884         align      8

                     loc_9888:
0000000000009888         mov        rax, qword [rbx+0x50]                       ; CODE XREF=re_string_reconstruct+820, re_string_reconstruct+829, re_string_reconstruct+835
000000000000988c         mov        byte [rbx+0x8c], 0x0
0000000000009893         add        rax, rbp
0000000000009896         sub        rax, r15
0000000000009899         mov        qword [rbx+0x58], rax
000000000000989d         mov        rax, qword [rbx+0x60]
00000000000098a1         add        rax, rbp
00000000000098a4         sub        rax, r15
00000000000098a7         test       r12, r12
00000000000098aa         mov        qword [rbx+0x68], rax
00000000000098ae         jle        loc_98d3

00000000000098b0         cmp        qword [r14+r12*8-8], rbp
00000000000098b5         je         loc_98cb

00000000000098b7         jmp        loc_98d3
00000000000098b9         align      64

                     loc_98c0:
00000000000098c0         cmp        qword [r14+r13*8-8], rbp                    ; CODE XREF=re_string_reconstruct+1025
00000000000098c5         jne        loc_98d3

00000000000098c7         sub        r13, 0x1

                     loc_98cb:
00000000000098cb         test       r13, r13                                    ; CODE XREF=re_string_reconstruct+997
00000000000098ce         mov        r12, r13
00000000000098d1         jne        loc_98c0

                     loc_98d3:
00000000000098d3         cmp        r12, r8                                     ; CODE XREF=re_string_reconstruct+990, re_string_reconstruct+999, re_string_reconstruct+1013
00000000000098d6         jge        loc_9b08

00000000000098dc         mov        rax, qword [rbx+0x10]
00000000000098e0         jmp        loc_98f5
00000000000098e2         align      8

                     loc_98e8:
00000000000098e8         add        r12, 0x1                                    ; CODE XREF=re_string_reconstruct+1066
00000000000098ec         cmp        r12, r8
00000000000098ef         je         loc_9b10

                     loc_98f5:
00000000000098f5         cmp        dword [rax+r12*4], 0xffffffff               ; CODE XREF=re_string_reconstruct+1040
00000000000098fa         je         loc_98e8

                     loc_98fc:
00000000000098fc         mov        rdx, qword [r14+r12*8]                      ; CODE XREF=loc_9b08
0000000000009900         sub        rdx, rbp
0000000000009903         cmp        rdx, 0x0
0000000000009907         mov        qword [rbx+0x30], rdx
000000000000990b         je         loc_9941

000000000000990d         jle        loc_992f

000000000000990f         mov        rax, qword [rbx+0x10]
0000000000009913         lea        rcx, qword [rax+rdx*4]
0000000000009917         nop        word [rax+rax]

                     loc_9920:
0000000000009920         mov        dword [rax], 0xffffffff                     ; CODE XREF=re_string_reconstruct+1117
0000000000009926         add        rax, 0x4
000000000000992a         cmp        rcx, rax
000000000000992d         jne        loc_9920

                     loc_992f:
000000000000992f         mov        rdi, qword [rbx+8]                          ; argument "__s" for method j_memset, CODE XREF=re_string_reconstruct+1085
0000000000009933         mov        esi, 0xff                                   ; argument "__c" for method j_memset
0000000000009938         call       j_memset                                    ; memset
000000000000993d         mov        rdx, qword [rbx+0x30]

                     loc_9941:
0000000000009941         movzx      eax, byte [rbx+0x8b]                        ; CODE XREF=re_string_reconstruct+1083, re_string_reconstruct+1610
0000000000009948         mov        qword [rbx+0x38], rdx

                     loc_994c:
000000000000994c         test       al, al                                      ; CODE XREF=re_string_reconstruct+703, re_string_reconstruct+943, re_string_reconstruct+1199
000000000000994e         je         loc_95ca

0000000000009954         jmp        loc_95ce
0000000000009959         align      32

                     loc_9960:
0000000000009960         mov        rdi, qword [rbx+8]                          ; argument "__dest" for method j_memmove, CODE XREF=re_string_reconstruct+236
0000000000009964         mov        rdx, r8                                     ; argument "__n" for method j_memmove
0000000000009967         lea        rsi, qword [rdi+rbp]                        ; argument "__src" for method j_memmove
000000000000996b         call       j_memmove                                   ; memmove
0000000000009970         movzx      eax, byte [rbx+0x8b]
0000000000009977         sub        qword [rbx+0x30], rbp
000000000000997b         sub        qword [rbx+0x38], rbp
000000000000997f         jmp        loc_994c
0000000000009981         align      8

                     loc_9988:
0000000000009988         mov        rcx, qword [rbx]                            ; CODE XREF=re_string_reconstruct+507
000000000000998b         mov        rdi, rbp
000000000000998e         sub        rdi, rdx
0000000000009991         mov        rdx, rdi
0000000000009994         lea        r12, qword [rcx+r11]
0000000000009998         add        rdx, r12
000000000000999b         lea        rsi, qword [r12+rbp-1]
00000000000099a0         cmp        rcx, rdx
00000000000099a3         cmovb      rcx, rdx
00000000000099a7         cmp        rcx, rsi
00000000000099aa         jbe        loc_99c5

00000000000099ac         jmp        loc_96d1
00000000000099b1         align      8

                     loc_99b8:
00000000000099b8         sub        rsi, 0x1                                    ; CODE XREF=re_string_reconstruct+1278
00000000000099bc         cmp        rcx, rsi
00000000000099bf         ja         loc_96d1

                     loc_99c5:
00000000000099c5         movzx      edx, byte [rsi]                             ; CODE XREF=re_string_reconstruct+1242
00000000000099c8         and        edx, 0xffffffc0
00000000000099cb         cmp        dl, 0x80
00000000000099ce         je         loc_99b8

00000000000099d0         mov        rdx, qword [rbx+0x58]
00000000000099d4         mov        rcx, qword [rbx+0x78]
00000000000099d8         mov        r14, rsi
00000000000099db         add        rdx, r12
00000000000099de         sub        rdx, rsi
00000000000099e1         test       rcx, rcx
00000000000099e4         jne        loc_9c32

                     loc_99ea:
00000000000099ea         lea        r13, qword [rsp+0x78+var_54]                ; CODE XREF=re_string_reconstruct+1941
00000000000099ef         add        r12, rbp
00000000000099f2         lea        rcx, qword [rsp+0x78+var_50]
00000000000099f7         sub        r12, r14
00000000000099fa         mov        dword [rsp+0x78+var_6C], r10d
00000000000099ff         mov        qword [rsp+0x78+var_78], r8
0000000000009a03         mov        rdi, r13
0000000000009a06         mov        qword [rsp+0x78+var_50], 0x0
0000000000009a0f         call       rpl_mbrtowc                                 ; rpl_mbrtowc
0000000000009a14         cmp        r12, rax
0000000000009a17         mov        r8, qword [rsp+0x78+var_78]
0000000000009a1b         mov        r10d, dword [rsp+0x78+var_6C]
0000000000009a20         ja         loc_9a2c

0000000000009a22         cmp        rax, 0xfffffffffffffffd
0000000000009a26         jbe        loc_9bf1

                     loc_9a2c:
0000000000009a2c         mov        r11, qword [rbx+0x28]                       ; CODE XREF=re_string_reconstruct+1360, re_string_reconstruct+1856
0000000000009a30         mov        rax, qword [rbx+0x38]
0000000000009a34         jmp        loc_96d1
0000000000009a39         align      64

                     loc_9a40:
0000000000009a40         cmp        byte [rbx+0x88], 0x0                        ; CODE XREF=re_string_reconstruct+447
0000000000009a47         jne        loc_9b40

0000000000009a4d         mov        rcx, qword [rbx+0x78]
0000000000009a51         test       rcx, rcx
0000000000009a54         je         loc_9603

0000000000009a5a         cmp        qword [rbx+0x40], rax
0000000000009a5e         mov        rdx, qword [rbx+0x30]
0000000000009a62         cmovle     rax, qword [rbx+0x40]
0000000000009a67         cmp        rax, rdx
0000000000009a6a         jg         loc_9a78

0000000000009a6c         jmp        loc_9a98
0000000000009a6e         align      16

                     loc_9a70:
0000000000009a70         mov        r15, qword [rbx+0x28]                       ; CODE XREF=re_string_reconstruct+1478
0000000000009a74         mov        rcx, qword [rbx+0x78]

                     loc_9a78:
0000000000009a78         mov        rsi, qword [rbx]                            ; CODE XREF=re_string_reconstruct+1434
0000000000009a7b         add        rsi, rdx
0000000000009a7e         movzx      esi, byte [rsi+r15]
0000000000009a83         movzx      esi, byte [rcx+rsi]
0000000000009a87         mov        rcx, qword [rbx+8]
0000000000009a8b         mov        byte [rcx+rdx], sil
0000000000009a8f         add        rdx, 0x1
0000000000009a93         cmp        rax, rdx
0000000000009a96         jne        loc_9a70

                     loc_9a98:
0000000000009a98         mov        qword [rbx+0x30], rdx                       ; CODE XREF=re_string_reconstruct+1436
0000000000009a9c         mov        qword [rbx+0x38], rdx
0000000000009aa0         jmp        loc_9603
0000000000009aa5         align      8

                     loc_9aa8:
0000000000009aa8         mov        rax, qword [rbx]                            ; CODE XREF=re_string_reconstruct+494
0000000000009aab         mov        rdx, qword [rbx+0x78]
0000000000009aaf         add        rax, rbp
0000000000009ab2         test       rdx, rdx
0000000000009ab5         movzx      eax, byte [r11+rax-1]
0000000000009abb         mov        qword [rbx+0x38], 0x0
0000000000009ac3         je         loc_9ac9

0000000000009ac5         movzx      eax, byte [rdx+rax]

                     loc_9ac9:
0000000000009ac9         mov        rcx, qword [rbx+0x80]                       ; CODE XREF=re_string_reconstruct+1523
0000000000009ad0         movzx      edx, al
0000000000009ad3         sar        rdx, 0x6
0000000000009ad7         mov        rcx, qword [rcx+rdx*8]
0000000000009adb         mov        edx, 0x1
0000000000009ae0         bt         rcx, rax
0000000000009ae4         jb         loc_9b00

0000000000009ae6         xor        edx, edx
0000000000009ae8         cmp        al, 0xa
0000000000009aea         jne        loc_9b00

0000000000009aec         xor        edx, edx
0000000000009aee         cmp        byte [rbx+0x8d], 0x0
0000000000009af5         setne      dl
0000000000009af8         add        edx, edx
0000000000009afa         nop        word [rax+rax]

                     loc_9b00:
0000000000009b00         mov        dword [rbx+0x70], edx                       ; CODE XREF=re_string_reconstruct+1556, re_string_reconstruct+1562
0000000000009b03         jmp        loc_9878

                     loc_9b08:
0000000000009b08         jne        loc_98fc                                    ; CODE XREF=re_string_reconstruct+1030

0000000000009b0e         nop

                     loc_9b10:
0000000000009b10         mov        qword [rbx+0x30], 0x0                       ; CODE XREF=re_string_reconstruct+1055
0000000000009b18         xor        edx, edx
0000000000009b1a         jmp        loc_9941

                     loc_9b1f:
0000000000009b1f         sub        r14, r15                                    ; CODE XREF=re_string_reconstruct+520
0000000000009b22         mov        r12, r14
0000000000009b25         mov        qword [rbx+0x30], r14

                     loc_9b29:
0000000000009b29         lea        rsi, qword [r8-1]                           ; CODE XREF=re_string_reconstruct+639
0000000000009b2d         mov        edx, r10d
0000000000009b30         mov        rdi, rbx
0000000000009b33         call       re_string_context_at                        ; re_string_context_at
0000000000009b38         mov        dword [rbx+0x70], eax
0000000000009b3b         jmp        loc_977a

                     loc_9b40:
0000000000009b40         mov        rdi, rbx                                    ; CODE XREF=re_string_reconstruct+1399
0000000000009b43         call       build_upper_buffer                          ; build_upper_buffer
0000000000009b48         jmp        loc_9603

                     loc_9b4d:
0000000000009b4d         mov        rdx, qword [rbx+0x50]                       ; CODE XREF=re_string_reconstruct+466
0000000000009b51         mov        byte [rbx+0x8c], 0x0
0000000000009b58         add        rdx, rbp
0000000000009b5b         sub        rdx, r15
0000000000009b5e         mov        qword [rbx+0x58], rdx
0000000000009b62         mov        rdx, qword [rbx+0x60]
0000000000009b66         add        rdx, rbp
0000000000009b69         sub        rdx, r15
0000000000009b6c         mov        qword [rbx+0x68], rdx
0000000000009b70         jmp        loc_96a8

                     loc_9b75:
0000000000009b75         test       rax, rax                                    ; CODE XREF=re_string_reconstruct+612
0000000000009b78         je         loc_9bed

0000000000009b7a         test       r12, r12
0000000000009b7d         je         loc_9bed

0000000000009b7f         mov        rax, qword [rbx]
0000000000009b82         movzx      edx, byte [rax+r14]

                     loc_9b87:
0000000000009b87         mov        rax, qword [rsp+0x78+var_60]                ; CODE XREF=re_string_reconstruct+1823
0000000000009b8c         mov        qword [rbx+0x20], rax
0000000000009b90         mov        eax, 0x1
0000000000009b95         jmp        loc_973a

                     loc_9b9a:
0000000000009b9a         jle        loc_9bb7                                    ; CODE XREF=re_string_reconstruct+686

0000000000009b9c         mov        rax, qword [rbx+0x10]
0000000000009ba0         lea        rdx, qword [rax+r12*4]
0000000000009ba4         nop        dword [rax]

                     loc_9ba8:
0000000000009ba8         mov        dword [rax], 0xffffffff                     ; CODE XREF=re_string_reconstruct+1765
0000000000009bae         add        rax, 0x4
0000000000009bb2         cmp        rdx, rax
0000000000009bb5         jne        loc_9ba8

                     loc_9bb7:
0000000000009bb7         cmp        byte [rbx+0x8b], 0x0                        ; CODE XREF=loc_9b9a
0000000000009bbe         jne        loc_9c18

0000000000009bc0         mov        qword [rbx+0x38], r12
0000000000009bc4         jmp        loc_95ca

                     loc_9bc9:
0000000000009bc9         mov        edi, edx                                    ; argument "__wc" for method j_iswalnum, CODE XREF=re_string_reconstruct+652
0000000000009bcb         mov        dword [rsp+0x78+var_78], edx
0000000000009bce         call       j_iswalnum                                  ; iswalnum
0000000000009bd3         test       eax, eax
0000000000009bd5         jne        loc_9be3

0000000000009bd7         mov        edx, dword [rsp+0x78+var_78]
0000000000009bda         cmp        edx, 0x5f
0000000000009bdd         jne        loc_9762

                     loc_9be3:
0000000000009be3         mov        eax, 0x1                                    ; CODE XREF=re_string_reconstruct+1797
0000000000009be8         jmp        loc_9777

                     loc_9bed:
0000000000009bed         xor        edx, edx                                    ; CODE XREF=re_string_reconstruct+1704, re_string_reconstruct+1709
0000000000009bef         jmp        loc_9b87

                     loc_9bf1:
0000000000009bf1         mov        edx, dword [rsp+0x78+var_54]                ; CODE XREF=re_string_reconstruct+1366
0000000000009bf5         sub        rax, r12
0000000000009bf8         mov        qword [rbx+0x20], 0x0
0000000000009c00         mov        r12, rax
0000000000009c03         mov        qword [rbx+0x30], rax
0000000000009c07         cmp        edx, 0xffffffff
0000000000009c0a         jne        loc_9755

0000000000009c10         jmp        loc_9a2c
0000000000009c15         align      8

                     loc_9c18:
0000000000009c18         mov        rdi, qword [rbx+8]                          ; argument "__s" for method j_memset, CODE XREF=re_string_reconstruct+1774
0000000000009c1c         mov        rdx, r12                                    ; argument "__n" for method j_memset
0000000000009c1f         mov        esi, 0xff                                   ; argument "__c" for method j_memset
0000000000009c24         call       j_memset                                    ; memset
0000000000009c29         mov        r12, qword [rbx+0x30]
0000000000009c2d         jmp        loc_9784

                     loc_9c32:
0000000000009c32         cmp        rdx, 0x6                                    ; CODE XREF=re_string_reconstruct+1300
0000000000009c36         mov        edi, 0x6
0000000000009c3b         lea        r11, qword [rsp+0x78+var_46]
0000000000009c40         cmovle     rdi, rdx
0000000000009c44         sub        edi, 0x1
0000000000009c47         test       edi, edi
0000000000009c49         movsxd     rax, edi
0000000000009c4c         js         loc_9c62

                     loc_9c4e:
0000000000009c4e         movzx      edi, byte [rsi+rax]                         ; CODE XREF=re_string_reconstruct+1936
0000000000009c52         movzx      edi, byte [rcx+rdi]
0000000000009c56         mov        byte [r11+rax], dil
0000000000009c5a         sub        rax, 0x1
0000000000009c5e         test       eax, eax
0000000000009c60         jns        loc_9c4e

                     loc_9c62:
0000000000009c62         mov        rsi, r11                                    ; CODE XREF=re_string_reconstruct+1916
0000000000009c65         jmp        loc_99ea

                     loc_9c6a:
0000000000009c6a         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=re_string_reconstruct+331
                        ; endp
0000000000009c6f         align      16                                          ; End of unwind block (FDE at 0x17354)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int8_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120


                     sub_epsilon_src_nodes:
0000000000009c70         push       r15                                         ; Begin of unwind block (FDE at 0x173a4), CODE XREF=update_cur_sifted_state+1100, update_cur_sifted_state+1290, update_cur_sifted_state+1448
0000000000009c72         push       r14
0000000000009c74         mov        r14, rdx
0000000000009c77         push       r13
0000000000009c79         push       r12
0000000000009c7b         lea        rdx, qword [rsi+rsi*2]
0000000000009c7f         push       rbp
0000000000009c80         push       rbx
0000000000009c81         pxor       xmm0, xmm0
0000000000009c85         sub        rsp, 0x48
0000000000009c89         mov        rax, qword [fs:0x28]
0000000000009c92         mov        qword [rsp+0x78+var_40], rax
0000000000009c97         xor        eax, eax
0000000000009c99         mov        rax, qword [rdi+0x38]
0000000000009c9d         mov        qword [rsp+0x78+var_48], 0x0
0000000000009ca6         movaps     xmmword [rsp+0x78+var_58], xmm0
0000000000009cab         mov        qword [rsp+0x78+var_68], rcx
0000000000009cb0         lea        rbp, qword [rax+rdx*8]
0000000000009cb4         mov        r10, qword [rbp+8]
0000000000009cb8         test       r10, r10
0000000000009cbb         jle        loc_9ea2

0000000000009cc1         lea        rax, qword [rsp+0x78+var_58]
0000000000009cc6         mov        r12, rdi
0000000000009cc9         mov        r13, rsi
0000000000009ccc         xor        ebx, ebx
0000000000009cce         mov        qword [rsp+0x78+var_60], rax
0000000000009cd3         jmp        loc_9d2d
0000000000009cd5         align      8

                     loc_9cd8:
0000000000009cd8         test       rax, rax                                    ; CODE XREF=sub_epsilon_src_nodes+283
0000000000009cdb         jne        loc_9db8

0000000000009ce1         mov        rdi, qword [r14+8]
0000000000009ce5         lea        rsi, qword [r14+0x10]
0000000000009ce9         mov        rdx, r8
0000000000009cec         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
0000000000009cf1         test       rax, rax
0000000000009cf4         je         loc_9db8

                     loc_9cfa:
0000000000009cfa         mov        rdx, qword [r12+0x38]                       ; CODE XREF=sub_epsilon_src_nodes+313, sub_epsilon_src_nodes+386
0000000000009cff         mov        rsi, qword [rsp+0x78+var_68]
0000000000009d04         mov        rdi, qword [rsp+0x78+var_60]
0000000000009d09         add        rdx, r9
0000000000009d0c         call       re_node_set_add_intersect                   ; re_node_set_add_intersect
0000000000009d11         test       eax, eax
0000000000009d13         jne        loc_9e90

0000000000009d19         mov        r10, qword [rbp+8]
0000000000009d1d         nop        dword [rax]

                     loc_9d20:
0000000000009d20         add        rbx, 0x1                                    ; CODE XREF=sub_epsilon_src_nodes+200, sub_epsilon_src_nodes+217, sub_epsilon_src_nodes+292, sub_epsilon_src_nodes+319, sub_epsilon_src_nodes+335, sub_epsilon_src_nodes+358, sub_epsilon_src_nodes+380
0000000000009d24         cmp        r10, rbx
0000000000009d27         jle        loc_9e00

                     loc_9d2d:
0000000000009d2d         mov        rax, qword [rbp+0x10]                       ; CODE XREF=sub_epsilon_src_nodes+99
0000000000009d31         mov        rax, qword [rax+rbx*8]
0000000000009d35         cmp        r13, rax
0000000000009d38         je         loc_9d20

0000000000009d3a         mov        rdx, rax
0000000000009d3d         shl        rdx, 0x4
0000000000009d41         add        rdx, qword [r12]
0000000000009d45         test       byte [rdx+8], 0x8
0000000000009d49         je         loc_9d20

0000000000009d4b         lea        r9, qword [rax+rax*2]
0000000000009d4f         mov        rcx, qword [r12+0x28]
0000000000009d54         lea        r11, qword [rbp+0x10]
0000000000009d58         mov        rdi, r10
0000000000009d5b         shl        r9, 0x3
0000000000009d5f         mov        rsi, r11
0000000000009d62         add        rcx, r9
0000000000009d65         mov        r15, qword [rcx+0x10]
0000000000009d69         mov        qword [rsp+0x78+var_70], rcx
0000000000009d6e         mov        r8, qword [r15]
0000000000009d71         mov        rdx, r8
0000000000009d74         mov        qword [rsp+0x78+var_78], r8
0000000000009d78         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
0000000000009d7d         mov        rcx, qword [rsp+0x78+var_70]
0000000000009d82         mov        r8, qword [rsp+0x78+var_78]
0000000000009d86         cmp        qword [rcx+8], 0x1
0000000000009d8b         jg         loc_9cd8

0000000000009d91         test       rax, rax
0000000000009d94         jne        loc_9d20

0000000000009d96         mov        rdi, qword [r14+8]
0000000000009d9a         lea        rsi, qword [r14+0x10]
0000000000009d9e         mov        rdx, r8
0000000000009da1         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
0000000000009da6         test       rax, rax
0000000000009da9         jne        loc_9cfa

0000000000009daf         jmp        loc_9d20
0000000000009db4         align      8

                     loc_9db8:
0000000000009db8         mov        r15, qword [r15+8]                          ; CODE XREF=sub_epsilon_src_nodes+107, sub_epsilon_src_nodes+132
0000000000009dbc         test       r15, r15
0000000000009dbf         jle        loc_9d20

0000000000009dc5         mov        rdx, r15
0000000000009dc8         mov        rsi, r11
0000000000009dcb         mov        rdi, r10
0000000000009dce         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
0000000000009dd3         test       rax, rax
0000000000009dd6         jne        loc_9d20

0000000000009ddc         mov        rdi, qword [r14+8]
0000000000009de0         lea        rsi, qword [r14+0x10]
0000000000009de4         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
0000000000009de9         test       rax, rax
0000000000009dec         je         loc_9d20

0000000000009df2         jmp        loc_9cfa
0000000000009df7         align      512

                     loc_9e00:
0000000000009e00         xor        r9d, r9d                                    ; CODE XREF=sub_epsilon_src_nodes+183
0000000000009e03         test       r10, r10
0000000000009e06         lea        r11, qword [rsp+0x78+var_48]
0000000000009e0b         jle        loc_9e5c

0000000000009e0d         nop        dword [rax]

                     loc_9e10:
0000000000009e10         mov        rax, qword [rbp+0x10]                       ; CODE XREF=sub_epsilon_src_nodes+490
0000000000009e14         mov        rdi, qword [rsp+0x78+var_50]
0000000000009e19         mov        rsi, r11
0000000000009e1c         mov        r10, qword [rax+r9*8]
0000000000009e20         mov        rdx, r10
0000000000009e23         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
0000000000009e28         test       rax, rax
0000000000009e2b         jne        loc_9e52

0000000000009e2d         lea        rbx, qword [r14+0x10]
0000000000009e31         mov        rdi, qword [r14+8]
0000000000009e35         mov        rsi, rbx
0000000000009e38         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
0000000000009e3d         sub        rax, 0x1
0000000000009e41         mov        rdx, rax
0000000000009e44         js         loc_9e52

0000000000009e46         lea        rdi, qword [r14+8]
0000000000009e4a         mov        rsi, rbx
0000000000009e4d         call       re_node_set_remove_at.isra.4.part.5         ; re_node_set_remove_at.isra.4.part.5

                     loc_9e52:
0000000000009e52         add        r9, 0x1                                     ; CODE XREF=sub_epsilon_src_nodes+443, sub_epsilon_src_nodes+468
0000000000009e56         cmp        qword [rbp+8], r9
0000000000009e5a         jg         loc_9e10

                     loc_9e5c:
0000000000009e5c         mov        rdi, qword [rsp+0x78+var_48]                ; CODE XREF=sub_epsilon_src_nodes+411

                     loc_9e61:
0000000000009e61         call       j_free                                      ; free, CODE XREF=sub_epsilon_src_nodes+564
0000000000009e66         xor        eax, eax

                     loc_9e68:
0000000000009e68         mov        rsi, qword [rsp+0x78+var_40]                ; CODE XREF=sub_epsilon_src_nodes+560
0000000000009e6d         xor        rsi, qword [fs:0x28]
0000000000009e76         jne        loc_9ea6

0000000000009e78         add        rsp, 0x48
0000000000009e7c         pop        rbx
0000000000009e7d         pop        rbp
0000000000009e7e         pop        r12
0000000000009e80         pop        r13
0000000000009e82         pop        r14
0000000000009e84         pop        r15
0000000000009e86         ret
                        ; endp
0000000000009e87         align      16

                     loc_9e90:
0000000000009e90         mov        rdi, qword [rsp+0x78+var_48]                ; argument "__ptr" for method j_free, CODE XREF=sub_epsilon_src_nodes+163
0000000000009e95         mov        dword [rsp+0x78+var_78], eax
0000000000009e98         call       j_free                                      ; free
0000000000009e9d         mov        eax, dword [rsp+0x78+var_78]
0000000000009ea0         jmp        loc_9e68

                     loc_9ea2:
0000000000009ea2         xor        edi, edi                                    ; CODE XREF=sub_epsilon_src_nodes+75
0000000000009ea4         jmp        loc_9e61

                     loc_9ea6:
0000000000009ea6         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=sub_epsilon_src_nodes+518
                        ; endp
0000000000009eab         align      16                                          ; End of unwind block (FDE at 0x173a4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_58: -88
        ;    var_67: int8_t, -103
        ;    var_68: int8_t, -104
        ;    var_78: -120
        ;    var_88: int8_t, -136
        ;    var_98: -152
        ;    var_A8: int64_t, -168
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_CC: int32_t, -204
        ;    var_E0: int64_t, -224
        ;    var_E8: int64_t, -232
        ;    var_E9: int8_t, -233
        ;    var_F8: int64_t, -248
        ;    var_100: int64_t, -256
        ;    var_108: int64_t, -264
        ;    var_110: int64_t, -272
        ;    var_118: int64_t, -280
        ;    var_120: int64_t, -288
        ;    var_128: int64_t, -296
        ;    var_130: int64_t, -304


                     build_trtable:
0000000000009eb0         push       r15                                         ; Begin of unwind block (FDE at 0x173f4), CODE XREF=re_search_internal+4240
0000000000009eb2         push       r14
0000000000009eb4         mov        r15, rdi
0000000000009eb7         push       r13
0000000000009eb9         push       r12
0000000000009ebb         mov        edi, 0x3800                                 ; argument "__size" for method j_malloc
0000000000009ec0         push       rbp
0000000000009ec1         push       rbx
0000000000009ec2         sub        rsp, 0x108
0000000000009ec9         mov        rax, qword [fs:0x28]
0000000000009ed2         mov        qword [rsp+0x138+var_40], rax
0000000000009eda         xor        eax, eax
0000000000009edc         mov        qword [rsp+0x138+var_130], rsi
0000000000009ee1         call       j_malloc                                    ; malloc
0000000000009ee6         test       rax, rax
0000000000009ee9         mov        qword [rsp+0x138+var_120], rax
0000000000009eee         je         loc_a2c0

0000000000009ef4         mov        rax, qword [rsp+0x138+var_120]
0000000000009ef9         pxor       xmm0, xmm0
0000000000009efd         lea        rbx, qword [rax+0x1800]
0000000000009f04         mov        rax, qword [rsp+0x138+var_130]
0000000000009f09         movaps     xmmword [rsp+0x138+var_A8], xmm0
0000000000009f11         mov        qword [rsp+0x138+var_F8], rbx
0000000000009f16         movaps     xmmword [rsp+0x138+var_98], xmm0
0000000000009f1e         cmp        qword [rax+0x10], 0x0
0000000000009f23         mov        qword [rax+0x58], 0x0
0000000000009f2b         mov        qword [rax+0x60], 0x0
0000000000009f33         jle        loc_a9aa

0000000000009f39         mov        qword [rsp+0x138+var_108], r15
0000000000009f3e         xor        ebp, ebp
0000000000009f40         mov        qword [rsp+0x138+var_128], 0x0
0000000000009f49         mov        r15, rbx

                     loc_9f4c:
0000000000009f4c         mov        rbx, qword [rsp+0x138+var_128]              ; CODE XREF=build_trtable+275
0000000000009f51         lea        rax, qword [rbx*8]
0000000000009f59         mov        qword [rsp+0x138+var_118], rax
0000000000009f5e         mov        rax, qword [rsp+0x138+var_130]
0000000000009f63         mov        rax, qword [rax+0x18]
0000000000009f67         mov        r13, qword [rax+rbx*8]
0000000000009f6b         mov        rax, qword [rsp+0x138+var_108]
0000000000009f70         shl        r13, 0x4
0000000000009f74         add        r13, qword [rax]
0000000000009f77         movzx      r14d, byte [r13+8]
0000000000009f7c         mov        eax, dword [r13+8]
0000000000009f80         shr        eax, 0x8
0000000000009f83         and        ax, 0x3ff
0000000000009f87         cmp        r14d, 0x1
0000000000009f8b         je         loc_a2f0

0000000000009f91         cmp        r14d, 0x3
0000000000009f95         je         loc_a760

0000000000009f9b         cmp        r14d, 0x5
0000000000009f9f         je         loc_a620

0000000000009fa5         cmp        r14d, 0x7
0000000000009fa9         je         loc_a789

                     loc_9faf:
0000000000009faf         mov        rbx, qword [rsp+0x138+var_130]              ; CODE XREF=build_trtable+1231, build_trtable+1316, build_trtable+1694, build_trtable+1827, build_trtable+2042, build_trtable+2144, build_trtable+2337
0000000000009fb4         add        qword [rsp+0x138+var_128], 0x1
0000000000009fba         mov        rax, qword [rsp+0x138+var_128]
0000000000009fbf         cmp        rax, qword [rbx+0x10]
0000000000009fc3         jl         loc_9f4c

0000000000009fc5         test       rbp, rbp
0000000000009fc8         mov        r15, qword [rsp+0x138+var_108]
0000000000009fcd         jle        loc_aa29

0000000000009fd3         lea        rbx, qword [rbp+1]
0000000000009fd7         mov        qword [rsp+0x138+var_C0], 0x0
0000000000009fe0         mov        qword [rsp+0x138+var_C8], rbx
0000000000009fe5         shl        rbx, 0x3
0000000000009fe9         mov        rdi, rbx                                    ; argument "__size" for method j_malloc
0000000000009fec         call       j_malloc                                    ; malloc
0000000000009ff1         test       rax, rax
0000000000009ff4         mov        r12, rax
0000000000009ff7         mov        qword [rsp+0x138+var_B8], rax
0000000000009fff         je         loc_a7ff

000000000000a005         movabs     rax, 0xaaaaaaaaaaaa855
000000000000a00f         mov        dword [rsp+0x138+var_CC], 0x0
000000000000a017         cmp        rbp, rax
000000000000a01a         jg         loc_a7ff

000000000000a020         lea        rax, qword [rbp+rbp*2]
000000000000a025         shl        rax, 0x3
000000000000a029         mov        rdi, rax                                    ; argument "__size" for method j_malloc
000000000000a02c         mov        qword [rsp+0x138+var_E0], rax
000000000000a031         call       j_malloc                                    ; malloc
000000000000a036         test       rax, rax
000000000000a039         mov        qword [rsp+0x138+var_128], rax
000000000000a03e         je         loc_a7ff

000000000000a044         mov        rax, qword [rsp+0x138+var_128]
000000000000a049         sub        rbx, 0x8
000000000000a04d         mov        r12, qword [rsp+0x138+var_F8]
000000000000a052         pxor       xmm0, xmm0
000000000000a056         lea        r14, qword [rsp+0x138+var_C8]
000000000000a05b         mov        qword [rsp+0x138+var_118], rbp
000000000000a060         mov        byte [rsp+0x138+var_E9], 0x0
000000000000a065         mov        rbp, r15
000000000000a068         add        rax, rbx
000000000000a06b         mov        qword [rsp+0x138+var_E8], r12
000000000000a070         add        rbx, rax
000000000000a073         mov        qword [rsp+0x138+var_108], rax
000000000000a078         mov        rax, qword [rsp+0x138+var_120]
000000000000a07d         movaps     xmmword [rsp+0x138+var_68], xmm0
000000000000a085         mov        qword [rsp+0x138+var_100], rbx
000000000000a08a         xor        ebx, ebx
000000000000a08c         lea        r13, qword [rax+8]
000000000000a090         lea        rax, qword [rsp+0x138+var_CC]
000000000000a095         movaps     xmmword [rsp+0x138+var_58], xmm0
000000000000a09d         mov        qword [rsp+0x138+var_110], rax

                     loc_a0a2:
000000000000a0a2         mov        qword [rsp+0x138+var_C0], 0x0               ; CODE XREF=build_trtable+706
000000000000a0ab         cmp        qword [r13], 0x0
000000000000a0b0         jle        loc_a0f8

000000000000a0b2         xor        r15d, r15d
000000000000a0b5         nop        dword [rax]

                     loc_a0b8:
000000000000a0b8         mov        rax, qword [r13+8]                          ; CODE XREF=build_trtable+582
000000000000a0bc         mov        rdx, qword [rax+r15*8]
000000000000a0c0         mov        rax, qword [rbp+0x18]
000000000000a0c4         mov        rax, qword [rax+rdx*8]
000000000000a0c8         cmp        rax, 0xffffffffffffffff
000000000000a0cc         je         loc_a0ee

000000000000a0ce         lea        rdx, qword [rax+rax*2]
000000000000a0d2         mov        rax, qword [rbp+0x30]
000000000000a0d6         mov        rdi, r14
000000000000a0d9         lea        rsi, qword [rax+rdx*8]
000000000000a0dd         call       re_node_set_merge                           ; re_node_set_merge
000000000000a0e2         test       eax, eax
000000000000a0e4         mov        dword [rsp+0x138+var_CC], eax
000000000000a0e8         jne        loc_a7e8

                     loc_a0ee:
000000000000a0ee         add        r15, 0x1                                    ; CODE XREF=build_trtable+540
000000000000a0f2         cmp        qword [r13], r15
000000000000a0f6         jg         loc_a0b8

                     loc_a0f8:
000000000000a0f8         mov        rdi, qword [rsp+0x138+var_110]              ; CODE XREF=build_trtable+512
000000000000a0fd         xor        ecx, ecx
000000000000a0ff         mov        rsi, rbp
000000000000a102         mov        rdx, r14
000000000000a105         call       re_acquire_state_context                    ; re_acquire_state_context
000000000000a10a         mov        rsi, qword [rsp+0x138+var_128]
000000000000a10f         test       rax, rax
000000000000a112         mov        qword [rsi+rbx*8], rax
000000000000a116         je         loc_a8c8

                     loc_a11c:
000000000000a11c         cmp        byte [rax+0x68], 0x0                        ; CODE XREF=build_trtable+2590
000000000000a120         js         loc_a840

000000000000a126         mov        rdi, qword [rsp+0x138+var_108]
000000000000a12b         mov        rsi, qword [rsp+0x138+var_100]
000000000000a130         mov        qword [rdi+rbx*8], rax
000000000000a134         mov        rax, qword [rsp+0x138+var_128]
000000000000a139         mov        rax, qword [rax+rbx*8]
000000000000a13d         mov        qword [rsi+rbx*8], rax

                     loc_a141:
000000000000a141         lea        rdx, qword [rsp+0x138+var_68]               ; CODE XREF=build_trtable+2556, build_trtable+2568
000000000000a149         xor        eax, eax

                     loc_a14b:
000000000000a14b         mov        rcx, qword [rdx+rax]                        ; CODE XREF=build_trtable+687
000000000000a14f         or         rcx, qword [r12+rax]
000000000000a153         mov        qword [rdx+rax], rcx
000000000000a157         add        rax, 0x8
000000000000a15b         cmp        rax, 0x20
000000000000a15f         jne        loc_a14b

000000000000a161         add        rbx, 0x1
000000000000a165         add        r13, 0x18
000000000000a169         add        r12, 0x20
000000000000a16d         cmp        rbx, qword [rsp+0x138+var_118]
000000000000a172         jne        loc_a0a2

000000000000a178         cmp        byte [rsp+0x138+var_E9], 0x0
000000000000a17d         mov        r15, rbp
000000000000a180         mov        rbp, qword [rsp+0x138+var_118]
000000000000a185         mov        qword [rsp+0x138+var_118], rdx
000000000000a18a         jne        loc_a8d9

000000000000a190         mov        esi, 0x100                                  ; argument "__size" for method j_calloc
000000000000a195         mov        edi, 0x8                                    ; argument "__nmemb" for method j_calloc
000000000000a19a         call       j_calloc                                    ; calloc
000000000000a19f         mov        r11, rax
000000000000a1a2         mov        rax, qword [rsp+0x138+var_130]
000000000000a1a7         test       r11, r11
000000000000a1aa         mov        qword [rax+0x58], r11
000000000000a1ae         je         loc_a7ed

000000000000a1b4         mov        rbx, qword [rsp+0x138+var_F8]
000000000000a1b9         mov        r12, qword [rsp+0x138+var_128]
000000000000a1be         xor        r9d, r9d
000000000000a1c1         mov        r13, qword [rsp+0x138+var_108]
000000000000a1c6         mov        rdx, qword [rsp+0x138+var_118]
000000000000a1cb         add        rbx, 0x20

                     loc_a1cf:
000000000000a1cf         mov        rax, qword [rdx+r9]                         ; CODE XREF=build_trtable+860
000000000000a1d3         test       rax, rax
000000000000a1d6         je         loc_a204

000000000000a1d8         mov        rsi, r9
000000000000a1db         mov        ecx, 0x1
000000000000a1e0         shl        rsi, 0x6
000000000000a1e4         add        rsi, r11
000000000000a1e7         nop        word [rax+rax]

                     loc_a1f0:
000000000000a1f0         test       al, 0x1                                     ; CODE XREF=build_trtable+850
000000000000a1f2         jne        loc_a958

                     loc_a1f8:
000000000000a1f8         add        rcx, rcx                                    ; CODE XREF=build_trtable+2793, build_trtable+2805
000000000000a1fb         add        rsi, 0x8
000000000000a1ff         shr        rax, 0x1
000000000000a202         jne        loc_a1f0

                     loc_a204:
000000000000a204         add        r9, 0x8                                     ; CODE XREF=build_trtable+806
000000000000a208         cmp        r9, 0x20
000000000000a20c         jne        loc_a1cf

                     loc_a20e:
000000000000a20e         test       byte [rsp+0x138+var_67], 0x4                ; CODE XREF=build_trtable+2720
000000000000a216         je         loc_a252

000000000000a218         xor        eax, eax
000000000000a21a         mov        rdx, qword [rsp+0x138+var_E8]
000000000000a21f         jmp        loc_a22e

                     loc_a221:
000000000000a221         add        rax, 0x1                                    ; CODE XREF=build_trtable+901
000000000000a225         add        rdx, 0x20
000000000000a229         cmp        rax, rbp
000000000000a22c         je         loc_a252

                     loc_a22e:
000000000000a22e         test       qword [rdx], 0x400                          ; CODE XREF=build_trtable+879
000000000000a235         je         loc_a221

000000000000a237         mov        rbx, qword [rsp+0x138+var_100]
000000000000a23c         cmp        byte [rsp+0x138+var_E9], 0x0
000000000000a241         mov        rax, qword [rbx+rax*8]
000000000000a245         mov        qword [r11+0x50], rax
000000000000a249         je         loc_a252

000000000000a24b         mov        qword [r11+0x850], rax

                     loc_a252:
000000000000a252         mov        rdi, qword [rsp+0x138+var_128]              ; argument "__ptr" for method j_free, CODE XREF=build_trtable+870, build_trtable+892, build_trtable+921
000000000000a257         call       j_free                                      ; free
000000000000a25c         mov        rdi, qword [rsp+0x138+var_B8]               ; argument "__ptr" for method j_free
000000000000a264         call       j_free                                      ; free
000000000000a269         mov        rax, qword [rsp+0x138+var_120]
000000000000a26e         mov        rbx, qword [rsp+0x138+var_E0]
000000000000a273         lea        rbp, qword [rax+0x10]
000000000000a277         add        rbx, rbp

                     loc_a27a:
000000000000a27a         mov        rdi, qword [rbp]                            ; argument "__ptr" for method j_free, CODE XREF=build_trtable+986
000000000000a27e         add        rbp, 0x18
000000000000a282         call       j_free                                      ; free
000000000000a287         cmp        rbx, rbp
000000000000a28a         jne        loc_a27a

000000000000a28c         mov        rdi, qword [rsp+0x138+var_120]              ; argument "__ptr" for method j_free
000000000000a291         call       j_free                                      ; free
000000000000a296         mov        eax, 0x1
000000000000a29b         jmp        loc_a2c2

                     loc_a29d:
000000000000a29d         test       rbp, rbp                                    ; CODE XREF=build_trtable+1799
000000000000a2a0         mov        qword [rbx+8], 0x0
000000000000a2a8         mov        qword [rbx], 0x0
000000000000a2af         jne        loc_a5e0

000000000000a2b5         mov        rdi, qword [rsp+0x138+var_120]              ; argument "__ptr" for method j_free
000000000000a2ba         call       j_free                                      ; free
000000000000a2bf         nop

                     loc_a2c0:
000000000000a2c0         xor        eax, eax                                    ; CODE XREF=build_trtable+62, build_trtable+1891, build_trtable+2443, build_trtable+2950

                     loc_a2c2:
000000000000a2c2         mov        rbx, qword [rsp+0x138+var_40]               ; CODE XREF=build_trtable+1003, build_trtable+2850
000000000000a2ca         xor        rbx, qword [fs:0x28]
000000000000a2d3         jne        loc_aa24

000000000000a2d9         add        rsp, 0x108
000000000000a2e0         pop        rbx
000000000000a2e1         pop        rbp
000000000000a2e2         pop        r12
000000000000a2e4         pop        r13
000000000000a2e6         pop        r14
000000000000a2e8         pop        r15
000000000000a2ea         ret
                        ; endp
000000000000a2eb         align      16

                     loc_a2f0:
000000000000a2f0         movzx      ecx, byte [r13]                             ; CODE XREF=build_trtable+219
000000000000a2f5         lea        r12, qword [rsp+0x138+var_A8]
000000000000a2fd         mov        edi, 0x1
000000000000a302         mov        rdx, rcx
000000000000a305         and        ecx, 0x3f
000000000000a308         shr        rdx, 0x3
000000000000a30c         shl        rdi, cl
000000000000a30f         and        edx, 0x18
000000000000a312         or         qword [r12+rdx], rdi

                     loc_a316:
000000000000a316         test       ax, ax                                      ; CODE XREF=build_trtable+1993, build_trtable+2008, build_trtable+2260
000000000000a319         je         loc_a3e0

000000000000a31f         test       al, 0x20
000000000000a321         jne        loc_a690

                     loc_a327:
000000000000a327         test       al, 0x80                                    ; CODE XREF=build_trtable+2060
000000000000a329         jne        loc_a5c4

000000000000a32f         test       al, 0x4
000000000000a331         je         loc_a385

000000000000a333         cmp        r14d, 0x1
000000000000a337         je         loc_a715

000000000000a33d         mov        r8, qword [rsp+0x138+var_108]
000000000000a342         cmp        dword [r8+0xb4], 0x1
000000000000a34a         jle        loc_a7a2

                     loc_a350:
000000000000a350         mov        rdi, qword [r8+0x78]                        ; CODE XREF=build_trtable+2173
000000000000a354         xor        esi, esi
000000000000a356         xor        ecx, ecx

                     loc_a358:
000000000000a358         mov        rdx, qword [rdi+rcx*8]                      ; CODE XREF=build_trtable+1226
000000000000a35c         not        rdx
000000000000a35f         or         rdx, qword [r8+rcx*8+0xb8]
000000000000a367         and        rdx, qword [r12+rcx*8]
000000000000a36b         mov        qword [r12+rcx*8], rdx
000000000000a36f         add        rcx, 0x1
000000000000a373         or         rsi, rdx
000000000000a376         cmp        rcx, 0x4
000000000000a37a         jne        loc_a358

000000000000a37c         test       rsi, rsi
000000000000a37f         je         loc_9faf

                     loc_a385:
000000000000a385         test       al, 0x8                                     ; CODE XREF=build_trtable+1153, build_trtable+2331
000000000000a387         je         loc_a3e0

000000000000a389         cmp        r14d, 0x1
000000000000a38d         je         loc_a6c1

000000000000a393         mov        rdi, qword [rsp+0x138+var_108]
000000000000a398         cmp        dword [rdi+0xb4], 0x1
000000000000a39f         jle        loc_a6de

                     loc_a3a5:
000000000000a3a5         mov        rsi, qword [rdi+0x78]                       ; CODE XREF=build_trtable+2088
000000000000a3a9         xor        ecx, ecx
000000000000a3ab         xor        edx, edx

                     loc_a3ad:
000000000000a3ad         mov        rax, qword [rdi+rdx*8+0xb8]                 ; CODE XREF=build_trtable+1311
000000000000a3b5         and        rax, qword [rsi+rdx*8]
000000000000a3b9         not        rax
000000000000a3bc         and        rax, qword [r12+rdx*8]
000000000000a3c0         mov        qword [r12+rdx*8], rax
000000000000a3c4         add        rdx, 0x1
000000000000a3c8         or         rcx, rax
000000000000a3cb         cmp        rdx, 0x4
000000000000a3cf         jne        loc_a3ad

000000000000a3d1         test       rcx, rcx
000000000000a3d4         je         loc_9faf

000000000000a3da         nop        word [rax+rax]

                     loc_a3e0:
000000000000a3e0         xor        ebx, ebx                                    ; CODE XREF=build_trtable+1129, build_trtable+1239, build_trtable+2138
000000000000a3e2         test       rbp, rbp
000000000000a3e5         jle        loc_a54b

000000000000a3eb         mov        qword [rsp+0x138+var_110], r13
000000000000a3f0         mov        r13, r15
000000000000a3f3         nop        dword [rax+rax]

                     loc_a3f8:
000000000000a3f8         mov        r10, rbx                                    ; CODE XREF=build_trtable+1682
000000000000a3fb         shl        r10, 0x5
000000000000a3ff         cmp        r14d, 0x1
000000000000a403         jne        loc_a428

000000000000a405         mov        rax, qword [rsp+0x138+var_110]
000000000000a40a         movzx      edx, byte [rax]
000000000000a40d         mov        rax, rdx
000000000000a410         shr        rax, 0x3
000000000000a414         and        eax, 0x18
000000000000a417         add        rax, r13
000000000000a41a         mov        rax, qword [rax+r10]
000000000000a41e         bt         rax, rdx
000000000000a422         jae        loc_a53b

                     loc_a428:
000000000000a428         lea        rdi, qword [r13+r10]                        ; CODE XREF=build_trtable+1363
000000000000a42d         lea        rsi, qword [rsp+0x138+var_88]
000000000000a435         xor        ecx, ecx
000000000000a437         xor        eax, eax

                     loc_a439:
000000000000a439         mov        rdx, qword [r12+rax*8]                      ; CODE XREF=build_trtable+1440
000000000000a43d         and        rdx, qword [rdi+rax*8]
000000000000a441         mov        qword [rsi+rax*8], rdx
000000000000a445         add        rax, 0x1
000000000000a449         or         rcx, rdx
000000000000a44c         cmp        rax, 0x4
000000000000a450         jne        loc_a439

000000000000a452         test       rcx, rcx
000000000000a455         je         loc_a53b

000000000000a45b         lea        r11, qword [rsp+0x138+var_68]
000000000000a463         xor        r15d, r15d
000000000000a466         xor        r9d, r9d
000000000000a469         xor        ecx, ecx

                     loc_a46b:
000000000000a46b         mov        rsi, qword [r12+rcx*8]                      ; CODE XREF=build_trtable+1512
000000000000a46f         mov        rax, qword [rdi+rcx*8]
000000000000a473         mov        rdx, rsi
000000000000a476         not        rdx
000000000000a479         and        rdx, rax
000000000000a47c         not        rax
000000000000a47f         and        rax, rsi
000000000000a482         mov        qword [r11+rcx*8], rdx
000000000000a486         or         r9, rdx
000000000000a489         mov        qword [r12+rcx*8], rax
000000000000a48d         add        rcx, 0x1
000000000000a491         or         r15, rax
000000000000a494         cmp        rcx, 0x4
000000000000a498         jne        loc_a46b

000000000000a49a         mov        rdi, qword [rsp+0x138+var_120]
000000000000a49f         lea        rax, qword [rbx+rbx*2]
000000000000a4a3         test       r9, r9
000000000000a4a6         lea        rdx, qword [rdi+rax*8]
000000000000a4aa         je         loc_a514

000000000000a4ac         mov        rax, rbp
000000000000a4af         movdqa     xmm0, xmmword [rsp+0x138+var_68]
000000000000a4b8         shl        rax, 0x5
000000000000a4bc         mov        rsi, rdx
000000000000a4bf         mov        qword [rsp+0x138+var_100], rdx
000000000000a4c4         add        rax, r13
000000000000a4c7         movups     xmmword [rax], xmm0
000000000000a4ca         movdqa     xmm0, xmmword [rsp+0x138+var_58]
000000000000a4d3         movups     xmmword [rax+0x10], xmm0
000000000000a4d7         lea        rax, qword [rbp+rbp*2]
000000000000a4dc         lea        rdi, qword [rdi+rax*8]
000000000000a4e0         movdqa     xmm0, xmmword [rsp+0x138+var_88]
000000000000a4e9         movups     xmmword [r13+r10], xmm0
000000000000a4ef         movdqa     xmm0, xmmword [rsp+0x138+var_78]
000000000000a4f8         movups     xmmword [r13+r10+0x10], xmm0
000000000000a4fe         call       re_node_set_init_copy                       ; re_node_set_init_copy
000000000000a503         test       eax, eax
000000000000a505         jne        loc_a5e0

000000000000a50b         mov        rdx, qword [rsp+0x138+var_100]
000000000000a510         add        rbp, 0x1

                     loc_a514:
000000000000a514         mov        rax, qword [rsp+0x138+var_130]              ; CODE XREF=build_trtable+1530
000000000000a519         mov        rsi, qword [rsp+0x138+var_118]
000000000000a51e         mov        rdi, rdx
000000000000a521         mov        rax, qword [rax+0x18]
000000000000a525         mov        rsi, qword [rax+rsi]
000000000000a529         call       re_node_set_insert                          ; re_node_set_insert
000000000000a52e         test       al, al
000000000000a530         je         loc_a5e0

000000000000a536         test       r15, r15
000000000000a539         je         loc_a548

                     loc_a53b:
000000000000a53b         add        rbx, 0x1                                    ; CODE XREF=build_trtable+1394, build_trtable+1445
000000000000a53f         cmp        rbx, rbp
000000000000a542         jl         loc_a3f8

                     loc_a548:
000000000000a548         mov        r15, r13                                    ; CODE XREF=build_trtable+1673

                     loc_a54b:
000000000000a54b         cmp        rbp, rbx                                    ; CODE XREF=build_trtable+1333
000000000000a54e         jne        loc_9faf

000000000000a554         mov        rax, rbp
000000000000a557         movdqa     xmm0, xmmword [rsp+0x138+var_A8]
000000000000a560         shl        rax, 0x5
000000000000a564         mov        rbx, qword [rsp+0x138+var_118]
000000000000a569         mov        edi, 0x8                                    ; argument "__size" for method j_malloc
000000000000a56e         add        rax, r15
000000000000a571         movups     xmmword [rax], xmm0
000000000000a574         movdqa     xmm0, xmmword [rsp+0x138+var_98]
000000000000a57d         movups     xmmword [rax+0x10], xmm0
000000000000a581         mov        rax, qword [rsp+0x138+var_130]
000000000000a586         mov        rax, qword [rax+0x18]
000000000000a58a         mov        r13, qword [rax+rbx]
000000000000a58e         mov        rbx, qword [rsp+0x138+var_120]
000000000000a593         lea        rax, qword [rbp+rbp*2]
000000000000a598         lea        rbx, qword [rbx+rax*8]
000000000000a59c         mov        qword [rbx], 0x1
000000000000a5a3         mov        qword [rbx+8], 0x1
000000000000a5ab         call       j_malloc                                    ; malloc
000000000000a5b0         test       rax, rax
000000000000a5b3         mov        qword [rbx+0x10], rax
000000000000a5b7         je         loc_a29d

000000000000a5bd         mov        qword [rax], r13
000000000000a5c0         add        rbp, 0x1

                     loc_a5c4:
000000000000a5c4         pxor       xmm0, xmm0                                  ; CODE XREF=build_trtable+1145, build_trtable+2070, build_trtable+2154
000000000000a5c8         movaps     xmmword [r12], xmm0
000000000000a5cd         movaps     xmmword [r12+0x10], xmm0
000000000000a5d3         jmp        loc_9faf
000000000000a5d8         align      32

                     loc_a5e0:
000000000000a5e0         mov        rax, qword [rsp+0x138+var_120]              ; CODE XREF=build_trtable+1023, build_trtable+1621, build_trtable+1664
000000000000a5e5         lea        rbx, qword [rax+0x10]
000000000000a5e9         lea        rax, qword [rbp+rbp*2]
000000000000a5ee         lea        rbp, qword [rbx+rax*8]
000000000000a5f2         nop        word [rax+rax]

                     loc_a5f8:
000000000000a5f8         mov        rdi, qword [rbx]                            ; argument "__ptr" for method j_free, CODE XREF=build_trtable+1879
000000000000a5fb         add        rbx, 0x18
000000000000a5ff         call       j_free                                      ; free
000000000000a604         cmp        rbp, rbx
000000000000a607         jne        loc_a5f8

000000000000a609         mov        rdi, qword [rsp+0x138+var_120]              ; argument "__ptr" for method j_free
000000000000a60e         call       j_free                                      ; free
000000000000a613         jmp        loc_a2c0
000000000000a618         align      32

                     loc_a620:
000000000000a620         mov        rsi, qword [rsp+0x138+var_108]              ; CODE XREF=build_trtable+239
000000000000a625         cmp        dword [rsi+0xb4], 0x1
000000000000a62c         jle        loc_a735

000000000000a632         mov        rsi, qword [rsi+0x78]
000000000000a636         lea        r12, qword [rsp+0x138+var_A8]
000000000000a63e         xor        edx, edx

                     loc_a640:
000000000000a640         mov        rcx, qword [r12+rdx]                        ; CODE XREF=build_trtable+1956
000000000000a644         or         rcx, qword [rsi+rdx]
000000000000a648         mov        qword [r12+rdx], rcx
000000000000a64c         add        rdx, 0x8
000000000000a650         cmp        rdx, 0x20
000000000000a654         jne        loc_a640

                     loc_a656:
000000000000a656         mov        rbx, qword [rsp+0x138+var_108]              ; CODE XREF=build_trtable+2209, build_trtable+2285
000000000000a65b         mov        rdx, qword [rbx+0xd8]
000000000000a662         test       dl, 0x40
000000000000a665         jne        loc_a673

000000000000a667         and        qword [rsp+0x138+var_A8], 0xfffffffffffffbff

                     loc_a673:
000000000000a673         and        edx, 0x80                                   ; CODE XREF=build_trtable+1973
000000000000a679         je         loc_a316

000000000000a67f         and        qword [rsp+0x138+var_A8], 0xfffffffffffffffe
000000000000a688         jmp        loc_a316
000000000000a68d         align      16

                     loc_a690:
000000000000a690         mov        rdx, qword [rsp+0x138+var_A8]               ; CODE XREF=build_trtable+1137
000000000000a698         pxor       xmm0, xmm0
000000000000a69c         and        dh, 0x4
000000000000a69f         movaps     xmmword [r12], xmm0
000000000000a6a4         movaps     xmmword [r12+0x10], xmm0
000000000000a6aa         je         loc_9faf

000000000000a6b0         mov        qword [rsp+0x138+var_A8], 0x400
000000000000a6bc         jmp        loc_a327

                     loc_a6c1:
000000000000a6c1         test       byte [r13+0xa], 0x40                        ; CODE XREF=build_trtable+1245
000000000000a6c6         jne        loc_a5c4

000000000000a6cc         mov        rdi, qword [rsp+0x138+var_108]
000000000000a6d1         cmp        dword [rdi+0xb4], 0x1
000000000000a6d8         jg         loc_a3a5

                     loc_a6de:
000000000000a6de         mov        rsi, qword [rsp+0x138+var_108]              ; CODE XREF=build_trtable+1263
000000000000a6e3         xor        ecx, ecx
000000000000a6e5         xor        edx, edx

                     loc_a6e7:
000000000000a6e7         mov        rax, qword [rsi+rdx*8+0xb8]                 ; CODE XREF=build_trtable+2133
000000000000a6ef         not        rax
000000000000a6f2         and        rax, qword [r12+rdx*8]
000000000000a6f6         mov        qword [r12+rdx*8], rax
000000000000a6fa         add        rdx, 0x1
000000000000a6fe         or         rcx, rax
000000000000a701         cmp        rdx, 0x4
000000000000a705         jne        loc_a6e7

000000000000a707         test       rcx, rcx
000000000000a70a         jne        loc_a3e0

000000000000a710         jmp        loc_9faf

                     loc_a715:
000000000000a715         test       byte [r13+0xa], 0x40                        ; CODE XREF=build_trtable+1159
000000000000a71a         je         loc_a5c4

000000000000a720         mov        r8, qword [rsp+0x138+var_108]
000000000000a725         cmp        dword [r8+0xb4], 0x1
000000000000a72d         jg         loc_a350

000000000000a733         jmp        loc_a7a2

                     loc_a735:
000000000000a735         pcmpeqd    xmm0, xmm0                                  ; CODE XREF=build_trtable+1916
000000000000a739         lea        r12, qword [rsp+0x138+var_A8]
000000000000a741         movaps     xmmword [rsp+0x138+var_A8], xmm0
000000000000a749         movaps     xmmword [rsp+0x138+var_98], xmm0
000000000000a751         jmp        loc_a656
000000000000a756         align      32

                     loc_a760:
000000000000a760         mov        rsi, qword [r13]                            ; CODE XREF=build_trtable+229
000000000000a764         lea        r12, qword [rsp+0x138+var_A8]
000000000000a76c         xor        edx, edx

                     loc_a76e:
000000000000a76e         mov        rcx, qword [r12+rdx]                        ; CODE XREF=build_trtable+2258
000000000000a772         or         rcx, qword [rsi+rdx]
000000000000a776         mov        qword [r12+rdx], rcx
000000000000a77a         add        rdx, 0x8
000000000000a77e         cmp        rdx, 0x20
000000000000a782         jne        loc_a76e

000000000000a784         jmp        loc_a316

                     loc_a789:
000000000000a789         pcmpeqd    xmm0, xmm0                                  ; CODE XREF=build_trtable+249
000000000000a78d         lea        r12, qword [rsp+0x138+var_A8]
000000000000a795         movaps     xmmword [rsp+0x138+var_A8], xmm0
000000000000a79d         jmp        loc_a656

                     loc_a7a2:
000000000000a7a2         mov        rdi, qword [rsp+0x138+var_108]              ; CODE XREF=build_trtable+1178, build_trtable+2179
000000000000a7a7         xor        esi, esi
000000000000a7a9         xor        edx, edx

                     loc_a7ab:
000000000000a7ab         mov        rcx, qword [r12+rdx*8]                      ; CODE XREF=build_trtable+2326
000000000000a7af         and        rcx, qword [rdi+rdx*8+0xb8]
000000000000a7b7         mov        qword [r12+rdx*8], rcx
000000000000a7bb         add        rdx, 0x1
000000000000a7bf         or         rsi, rcx
000000000000a7c2         cmp        rdx, 0x4
000000000000a7c6         jne        loc_a7ab

000000000000a7c8         test       rsi, rsi
000000000000a7cb         jne        loc_a385

000000000000a7d1         jmp        loc_9faf

                     loc_a7d6:
000000000000a7d6         mov        edx, dword [rsp+0x138+var_CC]               ; CODE XREF=build_trtable+2481
000000000000a7da         test       edx, edx
000000000000a7dc         je         loc_a867

000000000000a7e2         nop        word [rax+rax]

                     loc_a7e8:
000000000000a7e8         mov        rbp, qword [rsp+0x138+var_118]              ; CODE XREF=build_trtable+568, build_trtable+2574, build_trtable+2596

                     loc_a7ed:
000000000000a7ed         mov        rdi, qword [rsp+0x138+var_128]              ; argument "__ptr" for method j_free, CODE XREF=build_trtable+766, build_trtable+2631
000000000000a7f2         call       j_free                                      ; free
000000000000a7f7         mov        r12, qword [rsp+0x138+var_B8]

                     loc_a7ff:
000000000000a7ff         mov        rdi, r12                                    ; argument "__ptr" for method j_free, CODE XREF=build_trtable+335, build_trtable+362, build_trtable+398
000000000000a802         call       j_free                                      ; free
000000000000a807         mov        rax, qword [rsp+0x138+var_120]
000000000000a80c         lea        rbx, qword [rax+0x10]
000000000000a810         lea        rax, qword [rbp+rbp*2]
000000000000a815         lea        rbp, qword [rbx+rax*8]
000000000000a819         nop        dword [rax]

                     loc_a820:
000000000000a820         mov        rdi, qword [rbx]                            ; argument "__ptr" for method j_free, CODE XREF=build_trtable+2431
000000000000a823         add        rbx, 0x18
000000000000a827         call       j_free                                      ; free
000000000000a82c         cmp        rbp, rbx
000000000000a82f         jne        loc_a820

000000000000a831         mov        rdi, qword [rsp+0x138+var_120]              ; argument "__ptr" for method j_free
000000000000a836         call       j_free                                      ; free
000000000000a83b         jmp        loc_a2c0

                     loc_a840:
000000000000a840         mov        rdi, qword [rsp+0x138+var_110]              ; CODE XREF=build_trtable+624
000000000000a845         mov        ecx, 0x1
000000000000a84a         mov        rdx, r14
000000000000a84d         mov        rsi, rbp
000000000000a850         call       re_acquire_state_context                    ; re_acquire_state_context
000000000000a855         mov        rdi, qword [rsp+0x138+var_108]
000000000000a85a         test       rax, rax
000000000000a85d         mov        qword [rdi+rbx*8], rax
000000000000a861         je         loc_a7d6

                     loc_a867:
000000000000a867         mov        rdi, qword [rsp+0x138+var_128]              ; CODE XREF=build_trtable+2348
000000000000a86c         cmp        rax, qword [rdi+rbx*8]
000000000000a870         je         loc_a88b

000000000000a872         movzx      edi, byte [rsp+0x138+var_E9]
000000000000a877         cmp        dword [rbp+0xb4], 0x2
000000000000a87e         mov        eax, 0x1
000000000000a883         cmovge     edi, eax
000000000000a886         mov        byte [rsp+0x138+var_E9], dil

                     loc_a88b:
000000000000a88b         mov        rdi, qword [rsp+0x138+var_110]              ; CODE XREF=build_trtable+2496
000000000000a890         mov        rsi, rbp
000000000000a893         mov        ecx, 0x2
000000000000a898         mov        rdx, r14
000000000000a89b         call       re_acquire_state_context                    ; re_acquire_state_context
000000000000a8a0         mov        rsi, qword [rsp+0x138+var_100]
000000000000a8a5         test       rax, rax
000000000000a8a8         mov        qword [rsi+rbx*8], rax
000000000000a8ac         jne        loc_a141

000000000000a8b2         mov        eax, dword [rsp+0x138+var_CC]
000000000000a8b6         test       eax, eax
000000000000a8b8         je         loc_a141

000000000000a8be         jmp        loc_a7e8
000000000000a8c3         align      8

                     loc_a8c8:
000000000000a8c8         mov        ecx, dword [rsp+0x138+var_CC]               ; CODE XREF=build_trtable+614
000000000000a8cc         test       ecx, ecx
000000000000a8ce         je         loc_a11c

000000000000a8d4         jmp        loc_a7e8

                     loc_a8d9:
000000000000a8d9         mov        esi, 0x200                                  ; argument "__size" for method j_calloc, CODE XREF=build_trtable+730
000000000000a8de         mov        edi, 0x8                                    ; argument "__nmemb" for method j_calloc
000000000000a8e3         call       j_calloc                                    ; calloc
000000000000a8e8         mov        r11, rax
000000000000a8eb         mov        rax, qword [rsp+0x138+var_130]
000000000000a8f0         test       r11, r11
000000000000a8f3         mov        qword [rax+0x60], r11
000000000000a8f7         je         loc_a7ed

000000000000a8fd         mov        r13, qword [rsp+0x138+var_F8]
000000000000a902         mov        r10, qword [rsp+0x138+var_128]
000000000000a907         mov        r12, r11
000000000000a90a         mov        r14, qword [rsp+0x138+var_108]
000000000000a90f         mov        rdx, qword [rsp+0x138+var_118]
000000000000a914         xor        ebx, ebx
000000000000a916         add        r13, 0x20

                     loc_a91a:
000000000000a91a         mov        rax, qword [rdx+rbx]                        ; CODE XREF=build_trtable+2718
000000000000a91e         test       rax, rax
000000000000a921         je         loc_a93f

000000000000a923         mov        rsi, r12
000000000000a926         mov        ecx, 0x1

                     loc_a92b:
000000000000a92b         test       al, 0x1                                     ; CODE XREF=build_trtable+2701
000000000000a92d         jne        loc_a9dc

                     loc_a933:
000000000000a933         add        rcx, rcx                                    ; CODE XREF=build_trtable+2923
000000000000a936         add        rsi, 0x8
000000000000a93a         shr        rax, 0x1
000000000000a93d         jne        loc_a92b

                     loc_a93f:
000000000000a93f         add        rbx, 0x8                                    ; CODE XREF=build_trtable+2673
000000000000a943         add        r12, 0x200
000000000000a94a         cmp        rbx, 0x20
000000000000a94e         jne        loc_a91a

000000000000a950         jmp        loc_a20e
000000000000a955         align      8

                     loc_a958:
000000000000a958         mov        rdi, qword [rsp+0x138+var_120]              ; CODE XREF=build_trtable+834
000000000000a95d         test       qword [rdi+r9+0x1800], rcx
000000000000a965         jne        loc_a9d7

000000000000a967         lea        rdi, qword [rbx+r9]
000000000000a96b         xor        r8d, r8d
000000000000a96e         nop

                     loc_a970:
000000000000a970         mov        r10, qword [rdi]                            ; CODE XREF=build_trtable+2769
000000000000a973         add        r8, 0x1
000000000000a977         add        rdi, 0x20
000000000000a97b         and        r10, rcx
000000000000a97e         test       r10, r10
000000000000a981         je         loc_a970

000000000000a983         shl        r8, 0x3

                     loc_a987:
000000000000a987         test       qword [r15+r9+0xb8], rcx                    ; CODE XREF=build_trtable+2858
000000000000a98f         je         loc_a99e

000000000000a991         mov        rdi, qword [r13+r8]
000000000000a996         mov        qword [rsi], rdi
000000000000a999         jmp        loc_a1f8

                     loc_a99e:
000000000000a99e         mov        rdi, qword [r12+r8]                         ; CODE XREF=build_trtable+2783
000000000000a9a2         mov        qword [rsi], rdi
000000000000a9a5         jmp        loc_a1f8

                     loc_a9aa:
000000000000a9aa         mov        rdi, qword [rsp+0x138+var_120]              ; argument "__ptr" for method j_free, CODE XREF=build_trtable+131
000000000000a9af         call       j_free                                      ; free

                     loc_a9b4:
000000000000a9b4         mov        esi, 0x100                                  ; argument "__size" for method j_calloc, CODE XREF=build_trtable+2956
000000000000a9b9         mov        edi, 0x8                                    ; argument "__nmemb" for method j_calloc
000000000000a9be         call       j_calloc                                    ; calloc
000000000000a9c3         mov        rbx, qword [rsp+0x138+var_130]
000000000000a9c8         test       rax, rax
000000000000a9cb         mov        qword [rbx+0x58], rax
000000000000a9cf         setne      al
000000000000a9d2         jmp        loc_a2c2

                     loc_a9d7:
000000000000a9d7         xor        r8d, r8d                                    ; CODE XREF=build_trtable+2741
000000000000a9da         jmp        loc_a987

                     loc_a9dc:
000000000000a9dc         mov        rdi, qword [rsp+0x138+var_120]              ; CODE XREF=build_trtable+2685
000000000000a9e1         test       qword [rdi+rbx+0x1800], rcx
000000000000a9e9         jne        loc_aa20

000000000000a9eb         lea        r9, qword [r13+rbx]
000000000000a9f0         xor        r8d, r8d

                     loc_a9f3:
000000000000a9f3         mov        r15, qword [r9]                             ; CODE XREF=build_trtable+2903
000000000000a9f6         add        r8, 0x1
000000000000a9fa         add        r9, 0x20
000000000000a9fe         mov        rdi, r8
000000000000aa01         and        r15, rcx
000000000000aa04         test       r15, r15
000000000000aa07         je         loc_a9f3

                     loc_aa09:
000000000000aa09         mov        r8, qword [r10+rdi*8]                       ; CODE XREF=build_trtable+2930
000000000000aa0d         mov        qword [rsi], r8
000000000000aa10         mov        rdi, qword [r14+rdi*8]
000000000000aa14         mov        qword [rsi+0x800], rdi
000000000000aa1b         jmp        loc_a933

                     loc_aa20:
000000000000aa20         xor        edi, edi                                    ; CODE XREF=build_trtable+2873
000000000000aa22         jmp        loc_aa09

                     loc_aa24:
000000000000aa24         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=build_trtable+1059
                        ; endp

                     loc_aa29:
000000000000aa29         mov        rdi, qword [rsp+0x138+var_120]              ; argument "__ptr" for method j_free, CODE XREF=build_trtable+285
000000000000aa2e         call       j_free                                      ; free
000000000000aa33         test       rbp, rbp
000000000000aa36         jne        loc_a2c0

000000000000aa3c         jmp        loc_a9b4
000000000000aa41         align      16                                          ; End of unwind block (FDE at 0x173f4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     calc_first:
000000000000aa50         cmp        byte [rsi+0x30], 0x10                       ; Begin of unwind block (FDE at 0x17444), DATA XREF=re_compile_internal+1662
000000000000aa54         je         loc_aab8

000000000000aa56         push       rbp
000000000000aa57         push       rbx
000000000000aa58         mov        rbx, rsi
000000000000aa5b         mov        rbp, rdi
000000000000aa5e         sub        rsp, 0x8
000000000000aa62         mov        qword [rbx+0x18], rsi
000000000000aa66         mov        rdx, qword [rbx+0x30]
000000000000aa6a         mov        rsi, qword [rsi+0x28]
000000000000aa6e         call       re_dfa_add_node                             ; re_dfa_add_node
000000000000aa73         cmp        rax, 0xffffffffffffffff
000000000000aa77         mov        rdx, rax
000000000000aa7a         mov        qword [rbx+0x38], rax
000000000000aa7e         je         loc_aad0

000000000000aa80         xor        eax, eax
000000000000aa82         cmp        byte [rbx+0x30], 0xc
000000000000aa86         jne        loc_aaac

000000000000aa88         mov        ecx, dword [rbx+0x28]
000000000000aa8b         shl        rdx, 0x4
000000000000aa8f         add        rdx, qword [rbp]
000000000000aa93         and        ecx, 0x3ff
000000000000aa99         shl        ecx, 0x8
000000000000aa9c         mov        esi, ecx
000000000000aa9e         mov        ecx, dword [rdx+8]
000000000000aaa1         and        ecx, 0xfffc00ff
000000000000aaa7         or         ecx, esi
000000000000aaa9         mov        dword [rdx+8], ecx

                     loc_aaac:
000000000000aaac         add        rsp, 0x8                                    ; CODE XREF=calc_first+54, calc_first+133
000000000000aab0         pop        rbx
000000000000aab1         pop        rbp
000000000000aab2         ret
                        ; endp
000000000000aab3         align      8

                     loc_aab8:
000000000000aab8         mov        rax, qword [rsi+8]                          ; CODE XREF=calc_first+4
000000000000aabc         mov        rdx, qword [rax+0x18]
000000000000aac0         mov        rax, qword [rax+0x38]
000000000000aac4         mov        qword [rsi+0x18], rdx
000000000000aac8         mov        qword [rsi+0x38], rax
000000000000aacc         xor        eax, eax
000000000000aace         ret
                        ; endp
000000000000aacf         align      16

                     loc_aad0:
000000000000aad0         mov        eax, 0xc                                    ; CODE XREF=calc_first+46
000000000000aad5         jmp        loc_aaac
000000000000aad7         align      32                                          ; End of unwind block (FDE at 0x17444)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     free_fail_stack_return.part.24:
000000000000aae0         push       r12                                         ; Begin of unwind block (FDE at 0x17478), CODE XREF=set_regs+1279, set_regs+1383, set_regs+1810, set_regs+2005
000000000000aae2         push       rbp
000000000000aae3         mov        rbp, rdi
000000000000aae6         push       rbx
000000000000aae7         cmp        qword [rdi], 0x0
000000000000aaeb         jle        loc_ab22

000000000000aaed         xor        ebx, ebx
000000000000aaef         xor        r12d, r12d
000000000000aaf2         nop        word [rax+rax]

                     loc_aaf8:
000000000000aaf8         mov        rax, qword [rbp+0x10]                       ; CODE XREF=free_fail_stack_return.part.24+64
000000000000aafc         add        r12, 0x1
000000000000ab00         mov        rdi, qword [rax+rbx+0x28]                   ; argument "__ptr" for method j_free
000000000000ab05         call       j_free                                      ; free
000000000000ab0a         mov        rax, qword [rbp+0x10]
000000000000ab0e         mov        rdi, qword [rax+rbx+0x10]                   ; argument "__ptr" for method j_free
000000000000ab13         add        rbx, 0x30
000000000000ab17         call       j_free                                      ; free
000000000000ab1c         cmp        r12, qword [rbp]
000000000000ab20         jl         loc_aaf8

                     loc_ab22:
000000000000ab22         pop        rbx                                         ; CODE XREF=free_fail_stack_return.part.24+11
000000000000ab23         mov        rdi, qword [rbp+0x10]                       ; argument "__ptr" for method j_free
000000000000ab27         pop        rbp
000000000000ab28         pop        r12
000000000000ab2a         jmp        j_free                                      ; free
                        ; endp
000000000000ab2f         align      16                                          ; End of unwind block (FDE at 0x17478)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     pop_fail_stack.isra.25:
000000000000ab30         push       r12                                         ; Begin of unwind block (FDE at 0x174a4), CODE XREF=set_regs+1459, set_regs+1542
000000000000ab32         push       rbp
000000000000ab33         push       rbx
000000000000ab34         mov        rax, qword [rdi]
000000000000ab37         sub        rax, 0x1
000000000000ab3b         test       rax, rax
000000000000ab3e         mov        qword [rdi], rax
000000000000ab41         js         loc_aba5

000000000000ab43         lea        rbx, qword [rax+rax*2]
000000000000ab47         mov        rax, qword [rsi]
000000000000ab4a         mov        r12, rsi
000000000000ab4d         shl        rcx, 0x4
000000000000ab51         mov        rbp, r9
000000000000ab54         mov        rdi, r8                                     ; argument "__dest" for method j_memcpy
000000000000ab57         shl        rbx, 0x4
000000000000ab5b         add        rax, rbx
000000000000ab5e         mov        rsi, qword [rax]
000000000000ab61         mov        qword [rdx], rsi
000000000000ab64         mov        rsi, qword [rax+0x10]                       ; argument "__src" for method j_memcpy
000000000000ab68         mov        rdx, rcx                                    ; argument "__n" for method j_memcpy
000000000000ab6b         call       j_memcpy                                    ; memcpy
000000000000ab70         mov        rdi, qword [rbp+0x10]                       ; argument "__ptr" for method j_free
000000000000ab74         call       j_free                                      ; free
000000000000ab79         mov        rax, qword [r12]
000000000000ab7d         mov        rdi, qword [rax+rbx+0x10]                   ; argument "__ptr" for method j_free
000000000000ab82         call       j_free                                      ; free
000000000000ab87         add        rbx, qword [r12]
000000000000ab8b         movdqu     xmm0, xmmword [rbx+0x18]
000000000000ab90         movaps     xmmword [rbp], xmm0
000000000000ab94         mov        rax, qword [rbx+0x28]
000000000000ab98         mov        qword [rbp+0x10], rax
000000000000ab9c         mov        rax, qword [rbx+8]
000000000000aba0         pop        rbx
000000000000aba1         pop        rbp
000000000000aba2         pop        r12
000000000000aba4         ret
                        ; endp

                     loc_aba5:
000000000000aba5         lea        rcx, qword [__PRETTY_FUNCTION__.8040]       ; argument "__function" for method j___assert_fail, "pop_fail_stack", CODE XREF=pop_fail_stack.isra.25+17
000000000000abac         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/regexec.c"
000000000000abb3         lea        rdi, qword [aNum0]                          ; argument "__assertion" for method j___assert_fail, "num >= 0"
000000000000abba         mov        edx, 0x555                                  ; argument "__line" for method j___assert_fail
000000000000abbf         call       j___assert_fail                             ; __assert_fail
                        ; endp
000000000000abc4         align      16                                          ; End of unwind block (FDE at 0x174a4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     build_collating_symbol.isra.28:
000000000000abd0         push       rbp                                         ; Begin of unwind block (FDE at 0x174d4), CODE XREF=sub_10fe0+1072, sub_10fe0+1128
000000000000abd1         push       rbx
000000000000abd2         mov        rbp, rdi
000000000000abd5         mov        rdi, rsi                                    ; argument "__s" for method j_strlen
000000000000abd8         mov        rbx, rsi
000000000000abdb         sub        rsp, 0x8
000000000000abdf         call       j_strlen                                    ; strlen
000000000000abe4         cmp        rax, 0x1
000000000000abe8         jne        loc_ac10

000000000000abea         movzx      ecx, byte [rbx]
000000000000abed         mov        rdx, rcx
000000000000abf0         and        ecx, 0x3f
000000000000abf3         shr        rdx, 0x3
000000000000abf7         shl        rax, cl
000000000000abfa         and        edx, 0x18
000000000000abfd         or         qword [rbp+rdx], rax
000000000000ac02         add        rsp, 0x8
000000000000ac06         xor        eax, eax
000000000000ac08         pop        rbx
000000000000ac09         pop        rbp
000000000000ac0a         ret
                        ; endp
000000000000ac0b         align      16

                     loc_ac10:
000000000000ac10         add        rsp, 0x8                                    ; CODE XREF=build_collating_symbol.isra.28+24
000000000000ac14         mov        eax, 0x3
000000000000ac19         pop        rbx
000000000000ac1a         pop        rbp
000000000000ac1b         ret
                        ; endp
000000000000ac1c         align      32                                          ; End of unwind block (FDE at 0x174d4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_30: int64_t, -48
        ;    var_38: int64_t, -56


                     build_charclass.isra.29:
000000000000ac20         push       r14                                         ; Begin of unwind block (FDE at 0x17508), CODE XREF=build_charclass_op+163, sub_10fe0+1309
000000000000ac22         push       r13
000000000000ac24         mov        r13, rcx
000000000000ac27         push       r12
000000000000ac29         push       rbp
000000000000ac2a         mov        r12, r9
000000000000ac2d         push       rbx
000000000000ac2e         mov        rbp, rdi
000000000000ac31         mov        rbx, rsi
000000000000ac34         sub        rsp, 0x10
000000000000ac38         test       qword [rsp+0x38+arg_0], 0x400000
000000000000ac41         je         loc_ac68

000000000000ac43         lea        rdi, qword [aUpper]                         ; "upper"
000000000000ac4a         mov        ecx, 0x6
000000000000ac4f         mov        rsi, r9
000000000000ac52         rep  cmpsb byte [rsi], byte [rdi]
000000000000ac54         seta       al
000000000000ac57         sbb        al, 0x0
000000000000ac59         test       al, al
000000000000ac5b         jne        loc_ad56

000000000000ac61         lea        r12, qword [aAlpha]                         ; "alpha"

                     loc_ac68:
000000000000ac68         mov        rcx, qword [r13]                            ; CODE XREF=build_charclass.isra.29+33
000000000000ac6c         cmp        qword [r8], rcx
000000000000ac6f         mov        rax, qword [rdx]
000000000000ac72         je         loc_ad89

                     loc_ac78:
000000000000ac78         lea        rdx, qword [rcx+1]                          ; CODE XREF=build_charclass.isra.29+355, build_charclass.isra.29+419
000000000000ac7c         mov        rdi, r12                                    ; argument "__property" for method j_wctype
000000000000ac7f         mov        qword [r13], rdx
000000000000ac83         lea        r13, qword [rax+rcx*8]
000000000000ac87         call       j_wctype                                    ; wctype
000000000000ac8c         lea        rdi, qword [aAlnum]                         ; "alnum"
000000000000ac93         mov        qword [r13], rax
000000000000ac97         mov        ecx, 0x6
000000000000ac9c         mov        rsi, r12
000000000000ac9f         rep  cmpsb byte [rsi], byte [rdi]
000000000000aca1         seta       al
000000000000aca4         sbb        al, 0x0
000000000000aca6         test       al, al
000000000000aca8         je         loc_ad18

000000000000acaa         lea        rdi, qword [aCntrl]                         ; "cntrl"
000000000000acb1         mov        ecx, 0x6
000000000000acb6         mov        rsi, r12
000000000000acb9         rep  cmpsb byte [rsi], byte [rdi]
000000000000acbb         seta       al
000000000000acbe         sbb        al, 0x0
000000000000acc0         test       al, al
000000000000acc2         jne        loc_adc8

000000000000acc8         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000accd         xor        ecx, ecx
000000000000accf         test       rbp, rbp
000000000000acd2         mov        rdx, qword [rax]
000000000000acd5         mov        edi, 0x1
000000000000acda         jne        loc_af9a

                     loc_ace0:
000000000000ace0         test       byte [rdx+rcx*2], 0x2                       ; CODE XREF=build_charclass.isra.29+226
000000000000ace4         je         loc_acf7

000000000000ace6         mov        rax, rcx
000000000000ace9         mov        rsi, rdi
000000000000acec         sar        rax, 0x6
000000000000acf0         shl        rsi, cl
000000000000acf3         or         qword [rbx+rax*8], rsi

                     loc_acf7:
000000000000acf7         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+196
000000000000acfb         cmp        rcx, 0x100
000000000000ad02         jne        loc_ace0

                     loc_ad04:
000000000000ad04         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+308, build_charclass.isra.29+549, build_charclass.isra.29+621, build_charclass.isra.29+757, build_charclass.isra.29+814, build_charclass.isra.29+885, build_charclass.isra.29+942, build_charclass.isra.29+1037, build_charclass.isra.29+1095, build_charclass.isra.29+1187, build_charclass.isra.29+1292

                     loc_ad06:
000000000000ad06         add        rsp, 0x10                                   ; CODE XREF=build_charclass.isra.29+1197, build_charclass.isra.29+1893
000000000000ad0a         pop        rbx
000000000000ad0b         pop        rbp
000000000000ad0c         pop        r12
000000000000ad0e         pop        r13
000000000000ad10         pop        r14
000000000000ad12         ret
                        ; endp
000000000000ad13         align      8

                     loc_ad18:
000000000000ad18         call       j___ctype_b_loc                             ; __ctype_b_loc, CODE XREF=build_charclass.isra.29+136
000000000000ad1d         xor        ecx, ecx
000000000000ad1f         test       rbp, rbp
000000000000ad22         mov        rdx, qword [rax]
000000000000ad25         mov        edi, 0x1
000000000000ad2a         jne        loc_af1a

                     loc_ad30:
000000000000ad30         test       byte [rdx+rcx*2], 0x8                       ; CODE XREF=build_charclass.isra.29+306
000000000000ad34         je         loc_ad47

000000000000ad36         mov        rax, rcx
000000000000ad39         mov        rsi, rdi
000000000000ad3c         sar        rax, 0x6
000000000000ad40         shl        rsi, cl
000000000000ad43         or         qword [rbx+rax*8], rsi

                     loc_ad47:
000000000000ad47         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+276
000000000000ad4b         cmp        rcx, 0x100
000000000000ad52         jne        loc_ad30

000000000000ad54         jmp        loc_ad04

                     loc_ad56:
000000000000ad56         lea        rdi, qword [aLower]                         ; "lower", CODE XREF=build_charclass.isra.29+59
000000000000ad5d         mov        ecx, 0x6
000000000000ad62         mov        rsi, r9
000000000000ad65         rep  cmpsb byte [rsi], byte [rdi]
000000000000ad67         mov        rcx, qword [r13]
000000000000ad6b         seta       al
000000000000ad6e         sbb        al, 0x0
000000000000ad70         test       al, al
000000000000ad72         lea        rax, qword [aAlpha]                         ; "alpha"
000000000000ad79         cmove      r12, rax
000000000000ad7d         cmp        qword [r8], rcx
000000000000ad80         mov        rax, qword [rdx]
000000000000ad83         jne        loc_ac78

                     loc_ad89:
000000000000ad89         lea        r14, qword [rcx+rcx+1]                      ; CODE XREF=build_charclass.isra.29+82
000000000000ad8e         mov        rdi, rax                                    ; argument "__ptr" for method j_realloc
000000000000ad91         mov        qword [rsp+0x38+var_30], r8
000000000000ad96         mov        qword [rsp+0x38+var_38], rdx
000000000000ad9a         lea        rsi, qword [r14*8]                          ; argument "__size" for method j_realloc
000000000000ada2         call       j_realloc                                   ; realloc
000000000000ada7         test       rax, rax
000000000000adaa         je         loc_b0c8

000000000000adb0         mov        rdx, qword [rsp+0x38+var_38]
000000000000adb4         mov        r8, qword [rsp+0x38+var_30]
000000000000adb9         mov        qword [rdx], rax
000000000000adbc         mov        qword [r8], r14
000000000000adbf         mov        rcx, qword [r13]
000000000000adc3         jmp        loc_ac78

                     loc_adc8:
000000000000adc8         lea        rdi, qword [aLower]                         ; "lower", CODE XREF=build_charclass.isra.29+162
000000000000adcf         mov        ecx, 0x6
000000000000add4         mov        rsi, r12
000000000000add7         rep  cmpsb byte [rsi], byte [rdi]
000000000000add9         seta       al
000000000000addc         sbb        al, 0x0
000000000000adde         test       al, al
000000000000ade0         je         loc_ae4a

000000000000ade2         lea        rdi, qword [aSpace]                         ; "space"
000000000000ade9         mov        ecx, 0x6
000000000000adee         mov        rsi, r12
000000000000adf1         rep  cmpsb byte [rsi], byte [rdi]
000000000000adf3         seta       al
000000000000adf6         sbb        al, 0x0
000000000000adf8         test       al, al
000000000000adfa         jne        loc_ae92

000000000000ae00         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000ae05         xor        ecx, ecx
000000000000ae07         test       rbp, rbp
000000000000ae0a         mov        rdx, qword [rax]
000000000000ae0d         mov        edi, 0x1
000000000000ae12         jne        loc_b16e

000000000000ae18         nop        dword [rax+rax]

                     loc_ae20:
000000000000ae20         test       byte [rdx+rcx*2+1], 0x20                    ; CODE XREF=build_charclass.isra.29+547
000000000000ae25         je         loc_ae38

000000000000ae27         mov        rax, rcx
000000000000ae2a         mov        rsi, rdi
000000000000ae2d         sar        rax, 0x6
000000000000ae31         shl        rsi, cl
000000000000ae34         or         qword [rbx+rax*8], rsi

                     loc_ae38:
000000000000ae38         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+517
000000000000ae3c         cmp        rcx, 0x100
000000000000ae43         jne        loc_ae20

000000000000ae45         jmp        loc_ad04

                     loc_ae4a:
000000000000ae4a         call       j___ctype_b_loc                             ; __ctype_b_loc, CODE XREF=build_charclass.isra.29+448
000000000000ae4f         xor        ecx, ecx
000000000000ae51         test       rbp, rbp
000000000000ae54         mov        rdx, qword [rax]
000000000000ae57         mov        edi, 0x1
000000000000ae5c         jne        loc_b032

000000000000ae62         nop        word [rax+rax]

                     loc_ae68:
000000000000ae68         test       byte [rdx+rcx*2+1], 0x2                     ; CODE XREF=build_charclass.isra.29+619
000000000000ae6d         je         loc_ae80

000000000000ae6f         mov        rax, rcx
000000000000ae72         mov        rsi, rdi
000000000000ae75         sar        rax, 0x6
000000000000ae79         shl        rsi, cl
000000000000ae7c         or         qword [rbx+rax*8], rsi

                     loc_ae80:
000000000000ae80         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+589
000000000000ae84         cmp        rcx, 0x100
000000000000ae8b         jne        loc_ae68

000000000000ae8d         jmp        loc_ad04

                     loc_ae92:
000000000000ae92         lea        rdi, qword [aAlpha]                         ; "alpha", CODE XREF=build_charclass.isra.29+474
000000000000ae99         mov        ecx, 0x6
000000000000ae9e         mov        rsi, r12
000000000000aea1         rep  cmpsb byte [rsi], byte [rdi]
000000000000aea3         seta       al
000000000000aea6         sbb        al, 0x0
000000000000aea8         test       al, al
000000000000aeaa         je         loc_af53

000000000000aeb0         lea        rdi, qword [aDigit]                         ; "digit"
000000000000aeb7         mov        ecx, 0x6
000000000000aebc         mov        rsi, r12
000000000000aebf         rep  cmpsb byte [rsi], byte [rdi]
000000000000aec1         seta       al
000000000000aec4         sbb        al, 0x0
000000000000aec6         test       al, al
000000000000aec8         jne        loc_afd3

000000000000aece         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000aed3         xor        ecx, ecx
000000000000aed5         test       rbp, rbp
000000000000aed8         mov        rdx, qword [rax]
000000000000aedb         mov        edi, 0x1
000000000000aee0         jne        loc_b38a

000000000000aee6         nop        word [cs:rax+rax]

                     loc_aef0:
000000000000aef0         test       byte [rdx+rcx*2+1], 0x8                     ; CODE XREF=build_charclass.isra.29+755
000000000000aef5         je         loc_af08

000000000000aef7         mov        rax, rcx
000000000000aefa         mov        rsi, rdi
000000000000aefd         sar        rax, 0x6
000000000000af01         shl        rsi, cl
000000000000af04         or         qword [rbx+rax*8], rsi

                     loc_af08:
000000000000af08         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+725
000000000000af0c         cmp        rcx, 0x100
000000000000af13         jne        loc_aef0

000000000000af15         jmp        loc_ad04

                     loc_af1a:
000000000000af1a         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+266
000000000000af1c         nop        dword [rax]

                     loc_af20:
000000000000af20         test       byte [rdx+rax*2], 0x8                       ; CODE XREF=build_charclass.isra.29+812
000000000000af24         je         loc_af42

000000000000af26         movzx      ecx, byte [rbp+rax]
000000000000af2b         mov        r10, rdi
000000000000af2e         mov        rsi, rcx
000000000000af31         and        ecx, 0x3f
000000000000af34         shr        rsi, 0x3
000000000000af38         shl        r10, cl
000000000000af3b         and        esi, 0x18
000000000000af3e         or         qword [rbx+rsi], r10

                     loc_af42:
000000000000af42         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+772
000000000000af46         cmp        rax, 0x100
000000000000af4c         jne        loc_af20

000000000000af4e         jmp        loc_ad04

                     loc_af53:
000000000000af53         call       j___ctype_b_loc                             ; __ctype_b_loc, CODE XREF=build_charclass.isra.29+650
000000000000af58         xor        ecx, ecx
000000000000af5a         test       rbp, rbp
000000000000af5d         mov        rdx, qword [rax]
000000000000af60         mov        edi, 0x1
000000000000af65         jne        loc_b138

000000000000af6b         nop        dword [rax+rax]

                     loc_af70:
000000000000af70         test       byte [rdx+rcx*2+1], 0x4                     ; CODE XREF=build_charclass.isra.29+883
000000000000af75         je         loc_af88

000000000000af77         mov        rax, rcx
000000000000af7a         mov        rsi, rdi
000000000000af7d         sar        rax, 0x6
000000000000af81         shl        rsi, cl
000000000000af84         or         qword [rbx+rax*8], rsi

                     loc_af88:
000000000000af88         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+853
000000000000af8c         cmp        rcx, 0x100
000000000000af93         jne        loc_af70

000000000000af95         jmp        loc_ad04

                     loc_af9a:
000000000000af9a         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+186
000000000000af9c         nop        dword [rax]

                     loc_afa0:
000000000000afa0         test       byte [rdx+rax*2], 0x2                       ; CODE XREF=build_charclass.isra.29+940
000000000000afa4         je         loc_afc2

000000000000afa6         movzx      ecx, byte [rbp+rax]
000000000000afab         mov        r11, rdi
000000000000afae         mov        rsi, rcx
000000000000afb1         and        ecx, 0x3f
000000000000afb4         shr        rsi, 0x3
000000000000afb8         shl        r11, cl
000000000000afbb         and        esi, 0x18
000000000000afbe         or         qword [rbx+rsi], r11

                     loc_afc2:
000000000000afc2         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+900
000000000000afc6         cmp        rax, 0x100
000000000000afcc         jne        loc_afa0

000000000000afce         jmp        loc_ad04

                     loc_afd3:
000000000000afd3         lea        rdi, qword [aPrint]                         ; "print", CODE XREF=build_charclass.isra.29+680
000000000000afda         mov        ecx, 0x6
000000000000afdf         mov        rsi, r12
000000000000afe2         rep  cmpsb byte [rsi], byte [rdi]
000000000000afe4         seta       al
000000000000afe7         sbb        al, 0x0
000000000000afe9         test       al, al
000000000000afeb         jne        loc_b06c

000000000000afed         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000aff2         xor        ecx, ecx
000000000000aff4         test       rbp, rbp
000000000000aff7         mov        rdx, qword [rax]
000000000000affa         mov        edi, 0x1
000000000000afff         jne        loc_b3f7

000000000000b005         nop        dword [rax]

                     loc_b008:
000000000000b008         test       byte [rdx+rcx*2+1], 0x40                    ; CODE XREF=build_charclass.isra.29+1035
000000000000b00d         je         loc_b020

000000000000b00f         mov        rax, rcx
000000000000b012         mov        rsi, rdi
000000000000b015         sar        rax, 0x6
000000000000b019         shl        rsi, cl
000000000000b01c         or         qword [rbx+rax*8], rsi

                     loc_b020:
000000000000b020         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+1005
000000000000b024         cmp        rcx, 0x100
000000000000b02b         jne        loc_b008

000000000000b02d         jmp        loc_ad04

                     loc_b032:
000000000000b032         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+572
000000000000b034         nop        dword [rax]

                     loc_b038:
000000000000b038         test       byte [rdx+rax*2+1], 0x2                     ; CODE XREF=build_charclass.isra.29+1093
000000000000b03d         je         loc_b05b

000000000000b03f         movzx      ecx, byte [rbp+rax]
000000000000b044         mov        r14, rdi
000000000000b047         mov        rsi, rcx
000000000000b04a         and        ecx, 0x3f
000000000000b04d         shr        rsi, 0x3
000000000000b051         shl        r14, cl
000000000000b054         and        esi, 0x18
000000000000b057         or         qword [rbx+rsi], r14

                     loc_b05b:
000000000000b05b         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+1053
000000000000b05f         cmp        rax, 0x100
000000000000b065         jne        loc_b038

000000000000b067         jmp        loc_ad04

                     loc_b06c:
000000000000b06c         lea        rdi, qword [aUpper]                         ; "upper", CODE XREF=build_charclass.isra.29+971
000000000000b073         mov        ecx, 0x6
000000000000b078         mov        rsi, r12
000000000000b07b         rep  cmpsb byte [rsi], byte [rdi]
000000000000b07d         seta       al
000000000000b080         sbb        al, 0x0
000000000000b082         test       al, al
000000000000b084         jne        loc_b0d2

000000000000b086         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000b08b         xor        ecx, ecx
000000000000b08d         test       rbp, rbp
000000000000b090         mov        rax, qword [rax]
000000000000b093         mov        edi, 0x1
000000000000b098         jne        loc_b3c0

                     loc_b09e:
000000000000b09e         test       byte [rax+rcx*2+1], 0x1                     ; CODE XREF=build_charclass.isra.29+1185
000000000000b0a3         je         loc_b0b6

000000000000b0a5         mov        rdx, rcx
000000000000b0a8         mov        rsi, rdi
000000000000b0ab         sar        rdx, 0x6
000000000000b0af         shl        rsi, cl
000000000000b0b2         or         qword [rbx+rdx*8], rsi

                     loc_b0b6:
000000000000b0b6         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+1155
000000000000b0ba         cmp        rcx, 0x100
000000000000b0c1         jne        loc_b09e

000000000000b0c3         jmp        loc_ad04

                     loc_b0c8:
000000000000b0c8         mov        eax, 0xc                                    ; CODE XREF=build_charclass.isra.29+394
000000000000b0cd         jmp        loc_ad06

                     loc_b0d2:
000000000000b0d2         lea        rdi, qword [aBlank]                         ; "blank", CODE XREF=build_charclass.isra.29+1124
000000000000b0d9         mov        ecx, 0x6
000000000000b0de         mov        rsi, r12
000000000000b0e1         rep  cmpsb byte [rsi], byte [rdi]
000000000000b0e3         seta       al
000000000000b0e6         sbb        al, 0x0
000000000000b0e8         test       al, al
000000000000b0ea         jne        loc_b1de

000000000000b0f0         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000b0f5         xor        ecx, ecx
000000000000b0f7         test       rbp, rbp
000000000000b0fa         mov        rdx, qword [rax]
000000000000b0fd         mov        esi, 0x1
000000000000b102         jne        loc_b1a4

                     loc_b108:
000000000000b108         test       byte [rdx+rcx*2], 0x1                       ; CODE XREF=build_charclass.isra.29+1290
000000000000b10c         je         loc_b11f

000000000000b10e         mov        rax, rcx
000000000000b111         mov        rdi, rsi
000000000000b114         sar        rax, 0x6
000000000000b118         shl        rdi, cl
000000000000b11b         or         qword [rbx+rax*8], rdi

                     loc_b11f:
000000000000b11f         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+1260
000000000000b123         cmp        rcx, 0x100
000000000000b12a         jne        loc_b108

000000000000b12c         jmp        loc_ad04
000000000000b131         align      8

                     loc_b138:
000000000000b138         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+837

                     loc_b13a:
000000000000b13a         test       byte [rdx+rax*2+1], 0x4                     ; CODE XREF=build_charclass.isra.29+1351
000000000000b13f         je         loc_b15d

000000000000b141         movzx      ecx, byte [rbp+rax]
000000000000b146         mov        r9, rdi
000000000000b149         mov        rsi, rcx
000000000000b14c         and        ecx, 0x3f
000000000000b14f         shr        rsi, 0x3
000000000000b153         shl        r9, cl
000000000000b156         and        esi, 0x18
000000000000b159         or         qword [rbx+rsi], r9

                     loc_b15d:
000000000000b15d         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+1311
000000000000b161         cmp        rax, 0x100
000000000000b167         jne        loc_b13a

000000000000b169         jmp        loc_ad04

                     loc_b16e:
000000000000b16e         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+498

                     loc_b170:
000000000000b170         test       byte [rdx+rax*2+1], 0x20                    ; CODE XREF=build_charclass.isra.29+1405
000000000000b175         je         loc_b193

000000000000b177         movzx      ecx, byte [rbp+rax]
000000000000b17c         mov        r9, rdi
000000000000b17f         mov        rsi, rcx
000000000000b182         and        ecx, 0x3f
000000000000b185         shr        rsi, 0x3
000000000000b189         shl        r9, cl
000000000000b18c         and        esi, 0x18
000000000000b18f         or         qword [rbx+rsi], r9

                     loc_b193:
000000000000b193         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+1365
000000000000b197         cmp        rax, 0x100
000000000000b19d         jne        loc_b170

000000000000b19f         jmp        loc_ad04

                     loc_b1a4:
000000000000b1a4         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+1250
000000000000b1a6         mov        edi, 0x1

                     loc_b1ab:
000000000000b1ab         test       byte [rdx+rax*2], 0x1                       ; CODE XREF=build_charclass.isra.29+1463
000000000000b1af         je         loc_b1cd

000000000000b1b1         movzx      ecx, byte [rbp+rax]
000000000000b1b6         mov        r14, rdi
000000000000b1b9         mov        rsi, rcx
000000000000b1bc         and        ecx, 0x3f
000000000000b1bf         shr        rsi, 0x3
000000000000b1c3         shl        r14, cl
000000000000b1c6         and        esi, 0x18
000000000000b1c9         or         qword [rbx+rsi], r14

                     loc_b1cd:
000000000000b1cd         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+1423
000000000000b1d1         cmp        rax, 0x100
000000000000b1d7         jne        loc_b1ab

000000000000b1d9         jmp        loc_ad04

                     loc_b1de:
000000000000b1de         lea        rsi, qword [aGraph]                         ; argument "__s2" for method j_strcmp, "graph", CODE XREF=build_charclass.isra.29+1226
000000000000b1e5         mov        rdi, r12                                    ; argument "__s1" for method j_strcmp
000000000000b1e8         call       j_strcmp                                    ; strcmp
000000000000b1ed         test       eax, eax
000000000000b1ef         jne        loc_b26a

000000000000b1f1         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000b1f6         xor        ecx, ecx
000000000000b1f8         test       rbp, rbp
000000000000b1fb         mov        rsi, qword [rax]
000000000000b1fe         mov        edx, 0x1
000000000000b203         jne        loc_b22f

                     loc_b205:
000000000000b205         cmp        word [rsi+rcx*2], 0x0                       ; CODE XREF=build_charclass.isra.29+1544
000000000000b20a         jns        loc_b21d

000000000000b20c         mov        rax, rcx
000000000000b20f         mov        rdi, rdx
000000000000b212         sar        rax, 0x6
000000000000b216         shl        rdi, cl
000000000000b219         or         qword [rbx+rax*8], rdi

                     loc_b21d:
000000000000b21d         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+1514
000000000000b221         cmp        rcx, 0x100
000000000000b228         jne        loc_b205

000000000000b22a         jmp        loc_ad04

                     loc_b22f:
000000000000b22f         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+1507
000000000000b231         mov        edi, 0x1

                     loc_b236:
000000000000b236         cmp        word [rsi+rax*2], 0x0                       ; CODE XREF=build_charclass.isra.29+1603
000000000000b23b         jns        loc_b259

000000000000b23d         movzx      ecx, byte [rbp+rax]
000000000000b242         mov        r9, rdi
000000000000b245         mov        rdx, rcx
000000000000b248         and        ecx, 0x3f
000000000000b24b         shr        rdx, 0x3
000000000000b24f         shl        r9, cl
000000000000b252         and        edx, 0x18
000000000000b255         or         qword [rbx+rdx], r9

                     loc_b259:
000000000000b259         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+1563
000000000000b25d         cmp        rax, 0x100
000000000000b263         jne        loc_b236

000000000000b265         jmp        loc_ad04

                     loc_b26a:
000000000000b26a         lea        rsi, qword [aPunct]                         ; argument "__s2" for method j_strcmp, "punct", CODE XREF=build_charclass.isra.29+1487
000000000000b271         mov        rdi, r12                                    ; argument "__s1" for method j_strcmp
000000000000b274         call       j_strcmp                                    ; strcmp
000000000000b279         test       eax, eax
000000000000b27b         jne        loc_b2f4

000000000000b27d         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000b282         xor        ecx, ecx
000000000000b284         test       rbp, rbp
000000000000b287         mov        rsi, qword [rax]
000000000000b28a         mov        edx, 0x1
000000000000b28f         jne        loc_b2ba

                     loc_b291:
000000000000b291         test       byte [rsi+rcx*2], 0x4                       ; CODE XREF=build_charclass.isra.29+1683
000000000000b295         je         loc_b2a8

000000000000b297         mov        rax, rcx
000000000000b29a         mov        rdi, rdx
000000000000b29d         sar        rax, 0x6
000000000000b2a1         shl        rdi, cl
000000000000b2a4         or         qword [rbx+rax*8], rdi

                     loc_b2a8:
000000000000b2a8         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+1653
000000000000b2ac         cmp        rcx, 0x100
000000000000b2b3         jne        loc_b291

000000000000b2b5         jmp        loc_ad04

                     loc_b2ba:
000000000000b2ba         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+1647
000000000000b2bc         mov        edi, 0x1

                     loc_b2c1:
000000000000b2c1         test       byte [rsi+rax*2], 0x4                       ; CODE XREF=build_charclass.isra.29+1741
000000000000b2c5         je         loc_b2e3

000000000000b2c7         movzx      ecx, byte [rbp+rax]
000000000000b2cc         mov        r14, rdi
000000000000b2cf         mov        rdx, rcx
000000000000b2d2         and        ecx, 0x3f
000000000000b2d5         shr        rdx, 0x3
000000000000b2d9         shl        r14, cl
000000000000b2dc         and        edx, 0x18
000000000000b2df         or         qword [rbx+rdx], r14

                     loc_b2e3:
000000000000b2e3         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+1701
000000000000b2e7         cmp        rax, 0x100
000000000000b2ed         jne        loc_b2c1

000000000000b2ef         jmp        loc_ad04

                     loc_b2f4:
000000000000b2f4         lea        rsi, qword [aPunct+6]                       ; argument "__s2" for method j_strcmp, 0x14fcd, CODE XREF=build_charclass.isra.29+1627
000000000000b2fb         mov        rdi, r12                                    ; argument "__s1" for method j_strcmp
000000000000b2fe         call       j_strcmp                                    ; strcmp
000000000000b303         test       eax, eax
000000000000b305         jne        loc_b380

000000000000b307         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000b30c         xor        ecx, ecx
000000000000b30e         test       rbp, rbp
000000000000b311         mov        rsi, qword [rax]
000000000000b314         mov        edx, 0x1
000000000000b319         jne        loc_b345

                     loc_b31b:
000000000000b31b         test       byte [rsi+rcx*2+1], 0x10                    ; CODE XREF=build_charclass.isra.29+1822
000000000000b320         je         loc_b333

000000000000b322         mov        rax, rcx
000000000000b325         mov        rdi, rdx
000000000000b328         sar        rax, 0x6
000000000000b32c         shl        rdi, cl
000000000000b32f         or         qword [rbx+rax*8], rdi

                     loc_b333:
000000000000b333         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+1792
000000000000b337         cmp        rcx, 0x100
000000000000b33e         jne        loc_b31b

000000000000b340         jmp        loc_ad04

                     loc_b345:
000000000000b345         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+1785
000000000000b347         mov        edi, 0x1

                     loc_b34c:
000000000000b34c         test       byte [rsi+rax*2+1], 0x10                    ; CODE XREF=build_charclass.isra.29+1881
000000000000b351         je         loc_b36f

000000000000b353         movzx      ecx, byte [rbp+rax]
000000000000b358         mov        r9, rdi
000000000000b35b         mov        rdx, rcx
000000000000b35e         and        ecx, 0x3f
000000000000b361         shr        rdx, 0x3
000000000000b365         shl        r9, cl
000000000000b368         and        edx, 0x18
000000000000b36b         or         qword [rbx+rdx], r9

                     loc_b36f:
000000000000b36f         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+1841
000000000000b373         cmp        rax, 0x100
000000000000b379         jne        loc_b34c

000000000000b37b         jmp        loc_ad04

                     loc_b380:
000000000000b380         mov        eax, 0x4                                    ; CODE XREF=build_charclass.isra.29+1765
000000000000b385         jmp        loc_ad06

                     loc_b38a:
000000000000b38a         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+704

                     loc_b38c:
000000000000b38c         test       byte [rdx+rax*2+1], 0x8                     ; CODE XREF=build_charclass.isra.29+1945
000000000000b391         je         loc_b3af

000000000000b393         movzx      ecx, byte [rbp+rax]
000000000000b398         mov        r14, rdi
000000000000b39b         mov        rsi, rcx
000000000000b39e         and        ecx, 0x3f
000000000000b3a1         shr        rsi, 0x3
000000000000b3a5         shl        r14, cl
000000000000b3a8         and        esi, 0x18
000000000000b3ab         or         qword [rbx+rsi], r14

                     loc_b3af:
000000000000b3af         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+1905
000000000000b3b3         cmp        rax, 0x100
000000000000b3b9         jne        loc_b38c

000000000000b3bb         jmp        loc_ad04

                     loc_b3c0:
000000000000b3c0         xor        edx, edx                                    ; CODE XREF=build_charclass.isra.29+1144

                     loc_b3c2:
000000000000b3c2         test       byte [rax+rdx*2+1], 0x1                     ; CODE XREF=build_charclass.isra.29+2000
000000000000b3c7         je         loc_b3e5

000000000000b3c9         movzx      ecx, byte [rbp+rdx]
000000000000b3ce         mov        r9, rdi
000000000000b3d1         mov        rsi, rcx
000000000000b3d4         and        ecx, 0x3f
000000000000b3d7         shr        rsi, 0x3
000000000000b3db         shl        r9, cl
000000000000b3de         and        esi, 0x18
000000000000b3e1         or         qword [rbx+rsi], r9

                     loc_b3e5:
000000000000b3e5         add        rdx, 0x1                                    ; CODE XREF=build_charclass.isra.29+1959
000000000000b3e9         cmp        rdx, 0x100
000000000000b3f0         jne        loc_b3c2

000000000000b3f2         jmp        loc_ad04

                     loc_b3f7:
000000000000b3f7         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+991

                     loc_b3f9:
000000000000b3f9         test       byte [rdx+rax*2+1], 0x40                    ; CODE XREF=build_charclass.isra.29+2054
000000000000b3fe         je         loc_b41c

000000000000b400         movzx      ecx, byte [rbp+rax]
000000000000b405         mov        r14, rdi
000000000000b408         mov        rsi, rcx
000000000000b40b         and        ecx, 0x3f
000000000000b40e         shr        rsi, 0x3
000000000000b412         shl        r14, cl
000000000000b415         and        esi, 0x18
000000000000b418         or         qword [rbx+rsi], r14

                     loc_b41c:
000000000000b41c         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+2014
000000000000b420         cmp        rax, 0x100
000000000000b426         jne        loc_b3f9

000000000000b428         jmp        loc_ad04
000000000000b42d         align      16                                          ; End of unwind block (FDE at 0x17508)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_50: int8_t, -80
        ;    var_58: int8_t, -88
        ;    var_60: int8_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136


                     build_charclass_op:
000000000000b430         push       r15                                         ; Begin of unwind block (FDE at 0x1754c), CODE XREF=sub_10fe0+402
000000000000b432         push       r14
000000000000b434         mov        r14, rdx
000000000000b437         push       r13
000000000000b439         push       r12
000000000000b43b         mov        r13, rcx
000000000000b43e         push       rbp
000000000000b43f         push       rbx
000000000000b440         mov        rbp, rdi
000000000000b443         mov        edi, 0x20                                   ; argument "__nmemb" for method j_calloc
000000000000b448         mov        r12d, r8d
000000000000b44b         sub        rsp, 0x58
000000000000b44f         mov        qword [rsp+0x88+var_88], rsi
000000000000b453         mov        esi, 0x1                                    ; argument "__size" for method j_calloc
000000000000b458         mov        qword [rsp+0x88+var_80], r9
000000000000b45d         mov        rax, qword [fs:0x28]
000000000000b466         mov        qword [rsp+0x88+var_40], rax
000000000000b46b         xor        eax, eax
000000000000b46d         mov        qword [rsp+0x88+var_70], 0x0
000000000000b476         call       j_calloc                                    ; calloc
000000000000b47b         test       rax, rax
000000000000b47e         je         loc_b640

000000000000b484         mov        esi, 0x1                                    ; argument "__size" for method j_calloc
000000000000b489         mov        edi, 0x50                                   ; argument "__nmemb" for method j_calloc
000000000000b48e         mov        rbx, rax
000000000000b491         call       j_calloc                                    ; calloc
000000000000b496         test       rax, rax
000000000000b499         mov        r15, rax
000000000000b49c         je         loc_b650

000000000000b4a2         movzx      eax, byte [rax+0x20]
000000000000b4a6         sub        rsp, 0x8
000000000000b4aa         mov        edx, r12d
000000000000b4ad         push       0x0
000000000000b4af         and        edx, 0x1
000000000000b4b2         mov        rdi, qword [rsp+0x98+var_88]
000000000000b4b7         lea        rcx, qword [r15+0x48]
000000000000b4bb         mov        r9, r14
000000000000b4be         mov        rsi, rbx
000000000000b4c1         lea        r8, qword [rsp+0x98+var_70]
000000000000b4c6         and        eax, 0xfffffffe
000000000000b4c9         or         eax, edx
000000000000b4cb         lea        rdx, qword [r15+0x18]
000000000000b4cf         mov        byte [r15+0x20], al
000000000000b4d3         call       build_charclass.isra.29                     ; build_charclass.isra.29
000000000000b4d8         test       eax, eax
000000000000b4da         pop        rdx
000000000000b4db         pop        rcx
000000000000b4dc         jne        loc_b670

000000000000b4e2         movsx      rcx, byte [r13]
000000000000b4e7         mov        esi, 0x1
000000000000b4ec         test       cl, cl
000000000000b4ee         je         loc_b52a

                     loc_b4f0:
000000000000b4f0         lea        rax, qword [rcx+0x3f]                       ; CODE XREF=build_charclass_op+248
000000000000b4f4         test       rcx, rcx
000000000000b4f7         mov        rdx, rcx
000000000000b4fa         cmovns     rax, rcx
000000000000b4fe         sar        rdx, 0x3f
000000000000b502         add        r13, 0x1
000000000000b506         shr        rdx, 0x3a
000000000000b50a         sar        rax, 0x6
000000000000b50e         add        rcx, rdx
000000000000b511         and        ecx, 0x3f
000000000000b514         sub        rcx, rdx
000000000000b517         mov        rdx, rsi
000000000000b51a         shl        rdx, cl
000000000000b51d         movsx      rcx, byte [r13]
000000000000b522         or         qword [rbx+rax*8], rdx
000000000000b526         test       cl, cl
000000000000b528         jne        loc_b4f0

                     loc_b52a:
000000000000b52a         test       r12b, r12b                                  ; CODE XREF=build_charclass_op+190
000000000000b52d         je         loc_b542

000000000000b52f         lea        rdx, qword [rbx+0x20]
000000000000b533         mov        rax, rbx

                     loc_b536:
000000000000b536         not        qword [rax]                                 ; CODE XREF=build_charclass_op+272
000000000000b539         add        rax, 0x8
000000000000b53d         cmp        rdx, rax
000000000000b540         jne        loc_b536

                     loc_b542:
000000000000b542         cmp        dword [rbp+0xb4], 0x1                       ; CODE XREF=build_charclass_op+253
000000000000b549         jle        loc_b563

000000000000b54b         mov        rcx, qword [rbp+0x78]
000000000000b54f         xor        eax, eax

                     loc_b551:
000000000000b551         mov        rdx, qword [rcx+rax]                        ; CODE XREF=build_charclass_op+305
000000000000b555         and        qword [rbx+rax], rdx
000000000000b559         add        rax, 0x8
000000000000b55d         cmp        rax, 0x20
000000000000b561         jne        loc_b551

                     loc_b563:
000000000000b563         lea        r9, qword [rsp+0x88+var_68]                 ; CODE XREF=build_charclass_op+281
000000000000b568         lea        r12, qword [rbp+0x70]
000000000000b56c         lea        r13, qword [rbp+0x80]
000000000000b573         xor        ecx, ecx
000000000000b575         xor        edx, edx
000000000000b577         mov        byte [rsp+0x88+var_60], 0x3
000000000000b57c         mov        r8, r9
000000000000b57f         mov        rsi, r13
000000000000b582         mov        rdi, r12
000000000000b585         mov        qword [rsp+0x88+var_68], rbx
000000000000b58a         mov        qword [rsp+0x88+var_88], r9
000000000000b58e         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000000b593         test       rax, rax
000000000000b596         mov        r14, rax
000000000000b599         je         loc_b630

000000000000b59f         cmp        dword [rbp+0xb4], 0x1
000000000000b5a6         jle        loc_b620

000000000000b5a8         or         byte [rbp+0xb0], 0x2
000000000000b5af         mov        r9, qword [rsp+0x88+var_88]
000000000000b5b3         xor        ecx, ecx
000000000000b5b5         xor        edx, edx
000000000000b5b7         mov        rsi, r13
000000000000b5ba         mov        rdi, r12
000000000000b5bd         mov        byte [rsp+0x88+var_60], 0x6
000000000000b5c2         mov        qword [rsp+0x88+var_68], r15
000000000000b5c7         mov        r8, r9
000000000000b5ca         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000000b5cf         test       rax, rax
000000000000b5d2         je         loc_b630

000000000000b5d4         lea        r8, qword [rsp+0x88+var_58]
000000000000b5d9         mov        rdx, r14
000000000000b5dc         mov        rcx, rax
000000000000b5df         mov        rsi, r13
000000000000b5e2         mov        rdi, r12
000000000000b5e5         mov        byte [rsp+0x88+var_50], 0xa
000000000000b5ea         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000000b5ef         mov        r14, rax

                     loc_b5f2:
000000000000b5f2         mov        rdi, qword [rsp+0x88+var_40]                ; CODE XREF=build_charclass_op+504, build_charclass_op+542, build_charclass_op+566, build_charclass_op+608
000000000000b5f7         xor        rdi, qword [fs:0x28]
000000000000b600         mov        rax, r14
000000000000b603         jne        loc_b695

000000000000b609         add        rsp, 0x58
000000000000b60d         pop        rbx
000000000000b60e         pop        rbp
000000000000b60f         pop        r12
000000000000b611         pop        r13
000000000000b613         pop        r14
000000000000b615         pop        r15
000000000000b617         ret
                        ; endp
000000000000b618         align      32

                     loc_b620:
000000000000b620         mov        rdi, r15                                    ; CODE XREF=build_charclass_op+374
000000000000b623         call       free_charset                                ; free_charset
000000000000b628         jmp        loc_b5f2
000000000000b62a         align      16

                     loc_b630:
000000000000b630         mov        rdi, rbx                                    ; argument "__ptr" for method j_free, CODE XREF=build_charclass_op+361, build_charclass_op+418
000000000000b633         call       j_free                                      ; free
000000000000b638         mov        rdi, r15
000000000000b63b         call       free_charset                                ; free_charset

                     loc_b640:
000000000000b640         mov        rax, qword [rsp+0x88+var_80]                ; CODE XREF=build_charclass_op+78
000000000000b645         xor        r14d, r14d
000000000000b648         mov        dword [rax], 0xc
000000000000b64e         jmp        loc_b5f2

                     loc_b650:
000000000000b650         mov        rdi, rbx                                    ; argument "__ptr" for method j_free, CODE XREF=build_charclass_op+108
000000000000b653         xor        r14d, r14d
000000000000b656         call       j_free                                      ; free
000000000000b65b         mov        rax, qword [rsp+0x88+var_80]
000000000000b660         mov        dword [rax], 0xc
000000000000b666         jmp        loc_b5f2
000000000000b668         align      16

                     loc_b670:
000000000000b670         mov        rdi, rbx                                    ; argument "__ptr" for method j_free, CODE XREF=build_charclass_op+172
000000000000b673         mov        dword [rsp+0x88+var_88], eax
000000000000b676         xor        r14d, r14d
000000000000b679         call       j_free                                      ; free
000000000000b67e         mov        rdi, r15
000000000000b681         call       free_charset                                ; free_charset
000000000000b686         mov        rdi, qword [rsp+0x88+var_80]
000000000000b68b         mov        eax, dword [rsp+0x88+var_88]
000000000000b68e         mov        dword [rdi], eax
000000000000b690         jmp        loc_b5f2

                     loc_b695:
000000000000b695         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=build_charclass_op+467
                        ; endp
000000000000b69a         align      32                                          ; End of unwind block (FDE at 0x1754c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_148: int8_t, -328
        ;    var_150: int8_t, -336
        ;    var_154: int32_t, -340
        ;    var_160: int64_t, -352
        ;    var_168: int64_t, -360
        ;    var_170: int64_t, -368
        ;    var_178: int64_t, -376
        ;    var_180: int64_t, -384
        ;    var_188: int64_t, -392
        ;    var_190: int64_t, -400
        ;    var_198: int64_t, -408
        ;    var_1A0: int64_t, -416
        ;    var_1A8: int64_t, -424


                     re_compile_fastmap_iter.isra.30:
000000000000b6a0         push       r15                                         ; Begin of unwind block (FDE at 0x175ac), CODE XREF=rpl_re_compile_fastmap+80, rpl_re_compile_fastmap+111, rpl_re_compile_fastmap+145, rpl_re_compile_fastmap+179
000000000000b6a2         push       r14
000000000000b6a4         mov        rax, rdi
000000000000b6a7         push       r13
000000000000b6a9         push       r12
000000000000b6ab         push       rbp
000000000000b6ac         push       rbx
000000000000b6ad         xor        ebx, ebx
000000000000b6af         mov        rbp, rcx
000000000000b6b2         sub        rsp, 0x178
000000000000b6b9         mov        rax, qword [rax]
000000000000b6bc         mov        qword [rsp+0x1a8+var_178], rdi
000000000000b6c1         mov        qword [rsp+0x1a8+var_188], rsi
000000000000b6c6         mov        rdi, qword [fs:0x28]
000000000000b6cf         mov        qword [rsp+0x1a8+var_40], rdi
000000000000b6d7         xor        edi, edi
000000000000b6d9         cmp        dword [rax+0xb4], 0x1
000000000000b6e0         mov        qword [rsp+0x1a8+var_180], rdx
000000000000b6e5         mov        qword [rsp+0x1a8+var_1A0], rax
000000000000b6ea         jne        loc_b703

000000000000b6ec         mov        rax, qword [rsp+0x1a8+var_178]
000000000000b6f1         mov        rax, qword [rax+0x18]
000000000000b6f5         mov        rbx, rax
000000000000b6f8         mov        qword [rsp+0x1a8+var_1A8], rax
000000000000b6fc         shr        rbx, 0x16
000000000000b700         and        ebx, 0x1

                     loc_b703:
000000000000b703         mov        rax, qword [rsp+0x1a8+var_188]              ; CODE XREF=re_compile_fastmap_iter.isra.30+74
000000000000b708         cmp        qword [rax], 0x0
000000000000b70c         jle        loc_bb1d

000000000000b712         lea        rax, qword [rsp+0x1a8+var_150]
000000000000b717         mov        qword [rsp+0x1a8+var_1A8], 0x0
000000000000b71f         mov        qword [rsp+0x1a8+var_168], rax
000000000000b724         lea        rax, qword [rsp+0x1a8+var_154]
000000000000b729         mov        qword [rsp+0x1a8+var_160], rax
000000000000b72e         lea        rax, qword [rsp+0x1a8+var_148]
000000000000b733         mov        qword [rsp+0x1a8+var_170], rax
000000000000b738         jmp        loc_b77e
000000000000b73a         align      64

                     loc_b740:
000000000000b740         cmp        eax, 0x3                                    ; CODE XREF=re_compile_fastmap_iter.isra.30+271
000000000000b743         je         loc_ba36

000000000000b749         cmp        eax, 0x6
000000000000b74c         je         loc_b8d8

000000000000b752         and        edx, 0xfffffffd
000000000000b755         cmp        dl, 0x5
000000000000b758         je         loc_bb54

000000000000b75e         cmp        eax, 0x2
000000000000b761         je         loc_bab4

                     loc_b767:
000000000000b767         mov        rdi, qword [rsp+0x1a8+var_188]              ; CODE XREF=re_compile_fastmap_iter.isra.30+313, re_compile_fastmap_iter.isra.30+327, re_compile_fastmap_iter.isra.30+507, re_compile_fastmap_iter.isra.30+543, re_compile_fastmap_iter.isra.30+559, re_compile_fastmap_iter.isra.30+630, re_compile_fastmap_iter.isra.30+842, re_compile_fastmap_iter.isra.30+913, re_compile_fastmap_iter.isra.30+1028
000000000000b76c         add        qword [rsp+0x1a8+var_1A8], 0x1
000000000000b771         mov        rax, qword [rsp+0x1a8+var_1A8]
000000000000b775         cmp        rax, qword [rdi]
000000000000b778         jge        loc_bb1d

                     loc_b77e:
000000000000b77e         mov        rax, qword [rsp+0x1a8+var_180]              ; CODE XREF=re_compile_fastmap_iter.isra.30+152
000000000000b783         mov        rdi, qword [rsp+0x1a8+var_1A8]
000000000000b787         mov        rax, qword [rax]
000000000000b78a         mov        r12, qword [rax+rdi*8]
000000000000b78e         mov        rax, qword [rsp+0x1a8+var_1A0]
000000000000b793         mov        rcx, qword [rax]
000000000000b796         mov        rax, r12
000000000000b799         shl        rax, 0x4
000000000000b79d         mov        qword [rsp+0x1a8+var_198], rax
000000000000b7a2         lea        rsi, qword [rcx+rax]
000000000000b7a6         movzx      eax, byte [rsi+8]
000000000000b7aa         cmp        eax, 0x1
000000000000b7ad         mov        edx, eax
000000000000b7af         jne        loc_b740

000000000000b7b1         movzx      r13d, byte [rsi]
000000000000b7b5         test       ebx, ebx
000000000000b7b7         mov        byte [rbp+r13], 0x1
000000000000b7bd         je         loc_b7d0

000000000000b7bf         call       j___ctype_tolower_loc                       ; __ctype_tolower_loc
000000000000b7c4         mov        rax, qword [rax]
000000000000b7c7         movsxd     rax, dword [rax+r13*4]
000000000000b7cb         mov        byte [rbp+rax], 0x1

                     loc_b7d0:
000000000000b7d0         mov        rax, qword [rsp+0x1a8+var_178]              ; CODE XREF=re_compile_fastmap_iter.isra.30+285
000000000000b7d5         test       byte [rax+0x1a], 0x40
000000000000b7d9         je         loc_b767

000000000000b7db         mov        rsi, qword [rsp+0x1a8+var_1A0]
000000000000b7e0         cmp        dword [rsi+0xb4], 0x1
000000000000b7e7         jle        loc_b767

000000000000b7ed         mov        rax, qword [rsi]
000000000000b7f0         mov        rdi, qword [rsp+0x1a8+var_198]
000000000000b7f5         movzx      edx, byte [rax+rdi]
000000000000b7f9         mov        byte [rsp+0x1a8+var_148], dl
000000000000b7fd         lea        rdx, qword [r12+1]
000000000000b802         cmp        qword [rsi+0x10], rdx
000000000000b806         jbe        loc_bb46

000000000000b80c         lea        rcx, qword [rax+rdi+0x10]
000000000000b811         mov        eax, dword [rcx+8]
000000000000b814         and        eax, 0x2000ff
000000000000b819         cmp        eax, 0x200001
000000000000b81e         jne        loc_bb46

000000000000b824         add        rdi, 0x20
000000000000b828         mov        r13, rdi
000000000000b82b         mov        rdi, qword [rsp+0x1a8+var_170]
000000000000b830         lea        rax, qword [rdi+1]
000000000000b834         jmp        loc_b85b
000000000000b836         align      64

                     loc_b840:
000000000000b840         mov        rcx, qword [rsi]                            ; CODE XREF=re_compile_fastmap_iter.isra.30+466
000000000000b843         add        rcx, r13
000000000000b846         add        r13, 0x10
000000000000b84a         mov        edx, dword [rcx+8]
000000000000b84d         and        edx, 0x2000ff
000000000000b853         cmp        edx, 0x200001
000000000000b859         jne        loc_b874

                     loc_b85b:
000000000000b85b         movzx      edx, byte [rcx]                             ; CODE XREF=re_compile_fastmap_iter.isra.30+404
000000000000b85e         add        rax, 0x1
000000000000b862         mov        byte [rax-1], dl
000000000000b865         mov        rdx, rax
000000000000b868         sub        rdx, rdi
000000000000b86b         add        rdx, r12
000000000000b86e         cmp        qword [rsi+0x10], rdx
000000000000b872         ja         loc_b840

                     loc_b874:
000000000000b874         mov        rsi, qword [rsp+0x1a8+var_170]              ; CODE XREF=re_compile_fastmap_iter.isra.30+441, re_compile_fastmap_iter.isra.30+1199
000000000000b879         mov        rcx, qword [rsp+0x1a8+var_168]
000000000000b87e         mov        rdi, qword [rsp+0x1a8+var_160]
000000000000b883         sub        rax, rsi
000000000000b886         mov        qword [rcx], 0x0
000000000000b88d         mov        r12, rax
000000000000b890         mov        rdx, rax
000000000000b893         call       rpl_mbrtowc                                 ; rpl_mbrtowc
000000000000b898         cmp        r12, rax
000000000000b89b         jne        loc_b767

000000000000b8a1         mov        edi, dword [rsp+0x1a8+var_154]              ; argument "__wc" for method j_towlower
000000000000b8a5         call       j_towlower                                  ; towlower
000000000000b8aa         mov        rdx, qword [rsp+0x1a8+var_168]              ; argument "__ps" for method j_wcrtomb
000000000000b8af         mov        rdi, qword [rsp+0x1a8+var_170]              ; argument "__s" for method j_wcrtomb
000000000000b8b4         mov        esi, eax                                    ; argument "__wc" for method j_wcrtomb
000000000000b8b6         call       j_wcrtomb                                   ; wcrtomb
000000000000b8bb         cmp        rax, 0xffffffffffffffff
000000000000b8bf         je         loc_b767

000000000000b8c5         movzx      eax, byte [rsp+0x1a8+var_148]
000000000000b8ca         mov        byte [rbp+rax], 0x1
000000000000b8cf         jmp        loc_b767
000000000000b8d4         align      8

                     loc_b8d8:
000000000000b8d8         mov        rax, qword [rsp+0x1a8+var_1A0]              ; CODE XREF=re_compile_fastmap_iter.isra.30+172
000000000000b8dd         mov        r12, qword [rsi]
000000000000b8e0         cmp        dword [rax+0xb4], 0x1
000000000000b8e7         jle        loc_b90d

000000000000b8e9         cmp        qword [r12+0x48], 0x0
000000000000b8ef         jne        loc_b9ef

000000000000b8f5         test       byte [r12+0x20], 0x1
000000000000b8fb         jne        loc_b9ef

000000000000b901         cmp        qword [r12+0x40], 0x0
000000000000b907         jne        loc_b9ef

                     loc_b90d:
000000000000b90d         xor        r13d, r13d                                  ; CODE XREF=re_compile_fastmap_iter.isra.30+583
000000000000b910         cmp        qword [r12+0x28], 0x0
000000000000b916         jle        loc_b767

000000000000b91c         mov        r15, r12
000000000000b91f         mov        r14, qword [rsp+0x1a8+var_168]
000000000000b924         mov        r12, rbp
000000000000b927         mov        rbp, r13
000000000000b92a         mov        r13d, ebx
000000000000b92d         jmp        loc_b93d

                     loc_b92f:
000000000000b92f         add        rbp, 0x1                                    ; CODE XREF=re_compile_fastmap_iter.isra.30+760, re_compile_fastmap_iter.isra.30+774, re_compile_fastmap_iter.isra.30+806
000000000000b933         cmp        rbp, qword [r15+0x28]
000000000000b937         jge        loc_b9e4

                     loc_b93d:
000000000000b93d         mov        qword [r14], 0x0                            ; CODE XREF=re_compile_fastmap_iter.isra.30+653, re_compile_fastmap_iter.isra.30+830
000000000000b944         mov        rax, qword [r15]
000000000000b947         mov        rdx, r14                                    ; argument "__ps" for method j_wcrtomb
000000000000b94a         mov        rdi, qword [rsp+0x1a8+var_170]              ; argument "__s" for method j_wcrtomb
000000000000b94f         lea        rbx, qword [rbp*4]
000000000000b957         mov        esi, dword [rax+rbp*4]                      ; argument "__wc" for method j_wcrtomb
000000000000b95a         call       j_wcrtomb                                   ; wcrtomb
000000000000b95f         cmp        rax, 0xffffffffffffffff
000000000000b963         je         loc_b98f

000000000000b965         movzx      edx, byte [rsp+0x1a8+var_148]
000000000000b96a         test       r13d, r13d
000000000000b96d         mov        byte [r12+rdx], 0x1
000000000000b972         mov        qword [rsp+0x1a8+var_198], rdx
000000000000b977         je         loc_b98f

000000000000b979         call       j___ctype_tolower_loc                       ; __ctype_tolower_loc
000000000000b97e         mov        rdx, qword [rsp+0x1a8+var_198]
000000000000b983         mov        rax, qword [rax]
000000000000b986         movsxd     rax, dword [rax+rdx*4]
000000000000b98a         mov        byte [r12+rax], 0x1

                     loc_b98f:
000000000000b98f         mov        rax, qword [rsp+0x1a8+var_178]              ; CODE XREF=re_compile_fastmap_iter.isra.30+707, re_compile_fastmap_iter.isra.30+727
000000000000b994         test       byte [rax+0x1a], 0x40
000000000000b998         je         loc_b92f

000000000000b99a         mov        rax, qword [rsp+0x1a8+var_1A0]
000000000000b99f         cmp        dword [rax+0xb4], 0x1
000000000000b9a6         jle        loc_b92f

000000000000b9a8         mov        rax, qword [r15]
000000000000b9ab         mov        edi, dword [rax+rbx]                        ; argument "__wc" for method j_towlower
000000000000b9ae         call       j_towlower                                  ; towlower
000000000000b9b3         mov        rdi, qword [rsp+0x1a8+var_170]              ; argument "__s" for method j_wcrtomb
000000000000b9b8         mov        rdx, r14                                    ; argument "__ps" for method j_wcrtomb
000000000000b9bb         mov        esi, eax                                    ; argument "__wc" for method j_wcrtomb
000000000000b9bd         call       j_wcrtomb                                   ; wcrtomb
000000000000b9c2         cmp        rax, 0xffffffffffffffff
000000000000b9c6         je         loc_b92f

000000000000b9cc         movzx      eax, byte [rsp+0x1a8+var_148]
000000000000b9d1         add        rbp, 0x1
000000000000b9d5         mov        byte [r12+rax], 0x1
000000000000b9da         cmp        rbp, qword [r15+0x28]
000000000000b9de         jl         loc_b93d

                     loc_b9e4:
000000000000b9e4         mov        ebx, r13d                                   ; CODE XREF=re_compile_fastmap_iter.isra.30+663
000000000000b9e7         mov        rbp, r12
000000000000b9ea         jmp        loc_b767

                     loc_b9ef:
000000000000b9ef         mov        r12, qword [rsp+0x1a8+var_168]              ; CODE XREF=re_compile_fastmap_iter.isra.30+591, re_compile_fastmap_iter.isra.30+603, re_compile_fastmap_iter.isra.30+615
000000000000b9f4         mov        r13, qword [rsp+0x1a8+var_160]
000000000000b9f9         mov        byte [rsp+0x1a8+var_154], 0x0
000000000000b9fe         nop

                     loc_ba00:
000000000000ba00         xor        edi, edi                                    ; CODE XREF=re_compile_fastmap_iter.isra.30+911
000000000000ba02         mov        qword [r12], 0x0
000000000000ba0a         mov        rcx, r12
000000000000ba0d         mov        edx, 0x1
000000000000ba12         mov        rsi, r13
000000000000ba15         call       rpl_mbrtowc                                 ; rpl_mbrtowc
000000000000ba1a         cmp        rax, 0xfffffffffffffffe
000000000000ba1e         jne        loc_ba2a

000000000000ba20         movzx      eax, byte [rsp+0x1a8+var_154]
000000000000ba25         mov        byte [rbp+rax], 0x1

                     loc_ba2a:
000000000000ba2a         add        byte [rsp+0x1a8+var_154], 0x1               ; CODE XREF=re_compile_fastmap_iter.isra.30+894
000000000000ba2f         jne        loc_ba00

000000000000ba31         jmp        loc_b767

                     loc_ba36:
000000000000ba36         mov        r13, rbp                                    ; CODE XREF=re_compile_fastmap_iter.isra.30+163
000000000000ba39         xor        r12d, r12d
000000000000ba3c         mov        qword [rsp+0x1a8+var_190], 0x0

                     loc_ba45:
000000000000ba45         mov        rax, qword [rsp+0x1a8+var_198]              ; CODE XREF=re_compile_fastmap_iter.isra.30+1042
000000000000ba4a         mov        rsi, qword [rsp+0x1a8+var_190]
000000000000ba4f         xor        r14d, r14d
000000000000ba52         mov        rax, qword [rcx+rax]
000000000000ba56         mov        r15, qword [rax+rsi]
000000000000ba5a         nop        word [rax+rax]

                     loc_ba60:
000000000000ba60         bt         r15, r14                                    ; CODE XREF=re_compile_fastmap_iter.isra.30+1005
000000000000ba64         jae        loc_ba85

000000000000ba66         test       ebx, ebx
000000000000ba68         mov        byte [r13+r14], 0x1
000000000000ba6e         je         loc_ba85

000000000000ba70         call       j___ctype_tolower_loc                       ; __ctype_tolower_loc
000000000000ba75         mov        rax, qword [rax]
000000000000ba78         lea        rdx, qword [r12+r14]
000000000000ba7c         movsxd     rax, dword [rax+rdx*4]
000000000000ba80         mov        byte [rbp+rax], 0x1

                     loc_ba85:
000000000000ba85         add        r14, 0x1                                    ; CODE XREF=re_compile_fastmap_iter.isra.30+964, re_compile_fastmap_iter.isra.30+974
000000000000ba89         cmp        r14, 0x40
000000000000ba8d         jne        loc_ba60

000000000000ba8f         add        r12, 0x40
000000000000ba93         add        qword [rsp+0x1a8+var_190], 0x8
000000000000ba99         add        r13, 0x40
000000000000ba9d         cmp        r12, 0x100
000000000000baa4         je         loc_b767

000000000000baaa         mov        rax, qword [rsp+0x1a8+var_1A0]
000000000000baaf         mov        rcx, qword [rax]
000000000000bab2         jmp        loc_ba45

                     loc_bab4:
000000000000bab4         movdqa     xmm0, xmmword [__re_error_msgid+384]        ; 0x15780, CODE XREF=re_compile_fastmap_iter.isra.30+193
000000000000babc         movups     xmmword [rbp], xmm0
000000000000bac0         movups     xmmword [rbp+0x10], xmm0
000000000000bac4         movups     xmmword [rbp+0x20], xmm0
000000000000bac8         movups     xmmword [rbp+0x30], xmm0
000000000000bacc         movups     xmmword [rbp+0x40], xmm0
000000000000bad0         movups     xmmword [rbp+0x50], xmm0
000000000000bad4         movups     xmmword [rbp+0x60], xmm0
000000000000bad8         movups     xmmword [rbp+0x70], xmm0
000000000000badc         movups     xmmword [rbp+0x80], xmm0
000000000000bae3         movups     xmmword [rbp+0x90], xmm0
000000000000baea         movups     xmmword [rbp+0xa0], xmm0
000000000000baf1         movups     xmmword [rbp+0xb0], xmm0
000000000000baf8         movups     xmmword [rbp+0xc0], xmm0
000000000000baff         movups     xmmword [rbp+0xd0], xmm0
000000000000bb06         movups     xmmword [rbp+0xe0], xmm0
000000000000bb0d         movups     xmmword [rbp+0xf0], xmm0

                     loc_bb14:
000000000000bb14         mov        rax, qword [rsp+0x1a8+var_178]              ; CODE XREF=re_compile_fastmap_iter.isra.30+1309
000000000000bb19         or         byte [rax+0x38], 0x1

                     loc_bb1d:
000000000000bb1d         mov        rax, qword [rsp+0x1a8+var_40]               ; CODE XREF=re_compile_fastmap_iter.isra.30+108, re_compile_fastmap_iter.isra.30+216, re_compile_fastmap_iter.isra.30+1303
000000000000bb25         xor        rax, qword [fs:0x28]
000000000000bb2e         jne        loc_bbc2

000000000000bb34         add        rsp, 0x178
000000000000bb3b         pop        rbx
000000000000bb3c         pop        rbp
000000000000bb3d         pop        r12
000000000000bb3f         pop        r13
000000000000bb41         pop        r14
000000000000bb43         pop        r15
000000000000bb45         ret
                        ; endp

                     loc_bb46:
000000000000bb46         mov        rax, qword [rsp+0x1a8+var_170]              ; CODE XREF=re_compile_fastmap_iter.isra.30+358, re_compile_fastmap_iter.isra.30+382
000000000000bb4b         add        rax, 0x1
000000000000bb4f         jmp        loc_b874

                     loc_bb54:
000000000000bb54         movdqa     xmm0, xmmword [__re_error_msgid+384]        ; 0x15780, CODE XREF=re_compile_fastmap_iter.isra.30+184
000000000000bb5c         cmp        eax, 0x2
000000000000bb5f         movups     xmmword [rbp], xmm0
000000000000bb63         movups     xmmword [rbp+0x10], xmm0
000000000000bb67         movups     xmmword [rbp+0x20], xmm0
000000000000bb6b         movups     xmmword [rbp+0x30], xmm0
000000000000bb6f         movups     xmmword [rbp+0x40], xmm0
000000000000bb73         movups     xmmword [rbp+0x50], xmm0
000000000000bb77         movups     xmmword [rbp+0x60], xmm0
000000000000bb7b         movups     xmmword [rbp+0x70], xmm0
000000000000bb7f         movups     xmmword [rbp+0x80], xmm0
000000000000bb86         movups     xmmword [rbp+0x90], xmm0
000000000000bb8d         movups     xmmword [rbp+0xa0], xmm0
000000000000bb94         movups     xmmword [rbp+0xb0], xmm0
000000000000bb9b         movups     xmmword [rbp+0xc0], xmm0
000000000000bba2         movups     xmmword [rbp+0xd0], xmm0
000000000000bba9         movups     xmmword [rbp+0xe0], xmm0
000000000000bbb0         movups     xmmword [rbp+0xf0], xmm0
000000000000bbb7         jne        loc_bb1d

000000000000bbbd         jmp        loc_bb14

                     loc_bbc2:
000000000000bbc2         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=re_compile_fastmap_iter.isra.30+1166
                        ; endp
000000000000bbc7         align      16                                          ; End of unwind block (FDE at 0x175ac)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     check_node_accept_bytes.isra.31:
000000000000bbd0         shl        rdx, 0x4                                    ; Begin of unwind block (FDE at 0x175fc), CODE XREF=check_arrival+597, set_regs+888, sift_states_backward+521, re_search_internal+3298
000000000000bbd4         push       r13
000000000000bbd6         push       r12
000000000000bbd8         lea        r9, qword [rdi+rdx]
000000000000bbdc         push       rbp
000000000000bbdd         push       rbx
000000000000bbde         sub        rsp, 0x8
000000000000bbe2         movzx      r11d, byte [r9+8]
000000000000bbe7         cmp        r11b, 0x7
000000000000bbeb         je         loc_bd00

000000000000bbf1         cmp        dword [rcx+0x90], 0x1
000000000000bbf8         je         loc_bcc0

000000000000bbfe         mov        rbx, rsi
000000000000bc01         mov        rdi, rcx
000000000000bc04         mov        rsi, r8
000000000000bc07         mov        r10, rcx
000000000000bc0a         call       re_string_char_size_at.part.0               ; re_string_char_size_at.part.0
000000000000bc0f         cmp        r11b, 0x5
000000000000bc13         mov        ebp, eax
000000000000bc15         je         loc_bcd0

000000000000bc1b         cmp        r11b, 0x6
000000000000bc1f         jne        loc_bcc0

000000000000bc25         cmp        eax, 0x1
000000000000bc28         jle        loc_bcc0

000000000000bc2e         mov        r13, qword [r9]
000000000000bc31         mov        rsi, qword [r13+0x40]
000000000000bc35         mov        rdx, qword [r13+0x28]
000000000000bc39         test       rsi, rsi
000000000000bc3c         jne        loc_bc49

000000000000bc3e         cmp        qword [r13+0x48], 0x0
000000000000bc43         je         loc_bd38

                     loc_bc49:
000000000000bc49         mov        rax, qword [r10+0x10]                       ; CODE XREF=check_node_accept_bytes.isra.31+108, check_node_accept_bytes.isra.31+363
000000000000bc4d         test       rdx, rdx
000000000000bc50         mov        r12d, dword [rax+r8*4]
000000000000bc54         jle        loc_bc77

000000000000bc56         mov        rcx, qword [r13]
000000000000bc5a         cmp        r12d, dword [rcx]
000000000000bc5d         je         loc_bcb2

000000000000bc5f         xor        eax, eax
000000000000bc61         jmp        loc_bc6e
000000000000bc63         align      8

                     loc_bc68:
000000000000bc68         cmp        r12d, dword [rcx+rax*4]                     ; CODE XREF=check_node_accept_bytes.isra.31+165
000000000000bc6c         je         loc_bcb2

                     loc_bc6e:
000000000000bc6e         add        rax, 0x1                                    ; CODE XREF=check_node_accept_bytes.isra.31+145
000000000000bc72         cmp        rax, rdx
000000000000bc75         jne        loc_bc68

                     loc_bc77:
000000000000bc77         mov        rax, qword [r13+0x48]                       ; CODE XREF=check_node_accept_bytes.isra.31+132
000000000000bc7b         test       rax, rax
000000000000bc7e         jle        loc_bd5c

000000000000bc84         xor        ebx, ebx
000000000000bc86         jmp        loc_bc9e
000000000000bc88         align      16

                     loc_bc90:
000000000000bc90         add        rbx, 0x1                                    ; CODE XREF=check_node_accept_bytes.isra.31+224
000000000000bc94         cmp        rbx, qword [r13+0x48]
000000000000bc98         jge        loc_bd58

                     loc_bc9e:
000000000000bc9e         mov        rax, qword [r13+0x18]                       ; CODE XREF=check_node_accept_bytes.isra.31+182
000000000000bca2         mov        edi, r12d                                   ; argument "__wc" for method j_iswctype
000000000000bca5         mov        rsi, qword [rax+rbx*8]                      ; argument "__desc" for method j_iswctype
000000000000bca9         call       j_iswctype                                  ; iswctype
000000000000bcae         test       eax, eax
000000000000bcb0         je         loc_bc90

                     loc_bcb2:
000000000000bcb2         test       byte [r13+0x20], 0x1                        ; CODE XREF=check_node_accept_bytes.isra.31+141, check_node_accept_bytes.isra.31+156, check_node_accept_bytes.isra.31+441
000000000000bcb7         je         loc_bcc2

000000000000bcb9         nop        dword [rax]

                     loc_bcc0:
000000000000bcc0         xor        ebp, ebp                                    ; CODE XREF=check_node_accept_bytes.isra.31+40, check_node_accept_bytes.isra.31+79, check_node_accept_bytes.isra.31+88, check_node_accept_bytes.isra.31+259, check_node_accept_bytes.isra.31+281, check_node_accept_bytes.isra.31+299, check_node_accept_bytes.isra.31+317, check_node_accept_bytes.isra.31+330, check_node_accept_bytes.isra.31+353, check_node_accept_bytes.isra.31+380, check_node_accept_bytes.isra.31+457

                     loc_bcc2:
000000000000bcc2         add        rsp, 0x8                                    ; CODE XREF=check_node_accept_bytes.isra.31+231, check_node_accept_bytes.isra.31+270, check_node_accept_bytes.isra.31+283, check_node_accept_bytes.isra.31+355, check_node_accept_bytes.isra.31+374, check_node_accept_bytes.isra.31+497
000000000000bcc6         mov        eax, ebp
000000000000bcc8         pop        rbx
000000000000bcc9         pop        rbp
000000000000bcca         pop        r12
000000000000bccc         pop        r13
000000000000bcce         ret
                        ; endp
000000000000bccf         align      16

                     loc_bcd0:
000000000000bcd0         cmp        eax, 0x1                                    ; CODE XREF=check_node_accept_bytes.isra.31+69
000000000000bcd3         jle        loc_bcc0

000000000000bcd5         mov        rax, qword [rbx]
000000000000bcd8         test       al, 0x40
000000000000bcda         je         loc_bcf0

                     loc_bcdc:
000000000000bcdc         test       al, 0x80                                    ; CODE XREF=check_node_accept_bytes.isra.31+297
000000000000bcde         je         loc_bcc2

000000000000bce0         mov        rax, qword [r10+8]
000000000000bce4         cmp        byte [rax+r8], 0x0
000000000000bce9         je         loc_bcc0

000000000000bceb         jmp        loc_bcc2
000000000000bced         align      16

                     loc_bcf0:
000000000000bcf0         mov        rdx, qword [r10+8]                          ; CODE XREF=check_node_accept_bytes.isra.31+266
000000000000bcf4         cmp        byte [rdx+r8], 0xa
000000000000bcf9         jne        loc_bcdc

000000000000bcfb         jmp        loc_bcc0
000000000000bcfd         align      256

                     loc_bd00:
000000000000bd00         mov        rdx, qword [rcx+8]                          ; CODE XREF=check_node_accept_bytes.isra.31+27
000000000000bd04         lea        rsi, qword [rdx+r8]
000000000000bd08         movzx      eax, byte [rsi]
000000000000bd0b         cmp        al, 0xc1
000000000000bd0d         jbe        loc_bcc0

000000000000bd0f         mov        rcx, qword [rcx+0x58]
000000000000bd13         lea        rdi, qword [r8+1]
000000000000bd17         cmp        rdi, rcx
000000000000bd1a         jge        loc_bcc0

000000000000bd1c         cmp        al, 0xdf
000000000000bd1e         movzx      edx, byte [rdx+r8+1]
000000000000bd24         ja         loc_bd8e

000000000000bd26         add        edx, 0xffffff80
000000000000bd29         mov        ebp, 0x2
000000000000bd2e         cmp        dl, 0x3f
000000000000bd31         ja         loc_bcc0

000000000000bd33         jmp        loc_bcc2
000000000000bd35         align      8

                     loc_bd38:
000000000000bd38         test       rdx, rdx                                    ; CODE XREF=check_node_accept_bytes.isra.31+115
000000000000bd3b         jne        loc_bc49

                     loc_bd41:
000000000000bd41         test       byte [r13+0x20], 0x1                        ; CODE XREF=check_node_accept_bytes.isra.31+399, check_node_accept_bytes.isra.31+423
000000000000bd46         jne        loc_bcc2

000000000000bd4c         jmp        loc_bcc0
000000000000bd51         align      8

                     loc_bd58:
000000000000bd58         mov        rsi, qword [r13+0x40]                       ; CODE XREF=check_node_accept_bytes.isra.31+200

                     loc_bd5c:
000000000000bd5c         test       rsi, rsi                                    ; CODE XREF=check_node_accept_bytes.isra.31+174
000000000000bd5f         jle        loc_bd41

000000000000bd61         mov        rdx, qword [r13+8]
000000000000bd65         xor        eax, eax
000000000000bd67         jmp        loc_bd79
000000000000bd69         align      16

                     loc_bd70:
000000000000bd70         add        rax, 0x1                                    ; CODE XREF=check_node_accept_bytes.isra.31+429, check_node_accept_bytes.isra.31+439
000000000000bd74         cmp        rax, rsi
000000000000bd77         je         loc_bd41

                     loc_bd79:
000000000000bd79         cmp        r12d, dword [rdx+rax*4]                     ; CODE XREF=check_node_accept_bytes.isra.31+407
000000000000bd7d         jl         loc_bd70

000000000000bd7f         mov        rcx, qword [r13+0x10]
000000000000bd83         cmp        r12d, dword [rcx+rax*4]
000000000000bd87         jg         loc_bd70

000000000000bd89         jmp        loc_bcb2

                     loc_bd8e:
000000000000bd8e         cmp        al, 0xef                                    ; CODE XREF=check_node_accept_bytes.isra.31+340
000000000000bd90         ja         loc_bdd8

000000000000bd92         cmp        al, 0xe0
000000000000bd94         jne        loc_bd9f

000000000000bd96         cmp        dl, 0x9f
000000000000bd99         jbe        loc_bcc0

                     loc_bd9f:
000000000000bd9f         mov        ebp, 0x3                                    ; CODE XREF=check_node_accept_bytes.isra.31+452

                     loc_bda4:
000000000000bda4         movsxd     rdi, ebp                                    ; CODE XREF=check_node_accept_bytes.isra.31+542, check_node_accept_bytes.isra.31+566, check_node_accept_bytes.isra.31+594
000000000000bda7         add        r8, rdi
000000000000bdaa         cmp        rcx, r8
000000000000bdad         jl         loc_bcc0

000000000000bdb3         mov        eax, 0x1
000000000000bdb8         jmp        loc_bdc7

                     loc_bdba:
000000000000bdba         add        rax, 0x1                                    ; CODE XREF=check_node_accept_bytes.isra.31+513
000000000000bdbe         cmp        rdi, rax
000000000000bdc1         jle        loc_bcc2

                     loc_bdc7:
000000000000bdc7         movzx      ebx, byte [rsi+rax]                         ; CODE XREF=check_node_accept_bytes.isra.31+488
000000000000bdcb         lea        edx, dword [rbx-0x80]
000000000000bdce         cmp        dl, 0x3f
000000000000bdd1         jbe        loc_bdba

000000000000bdd3         jmp        loc_bcc0

                     loc_bdd8:
000000000000bdd8         cmp        al, 0xf7                                    ; CODE XREF=check_node_accept_bytes.isra.31+448
000000000000bdda         ja         loc_bdf0

000000000000bddc         cmp        al, 0xf0
000000000000bdde         jne        loc_bde9

000000000000bde0         cmp        dl, 0x8f
000000000000bde3         jbe        loc_bcc0

                     loc_bde9:
000000000000bde9         mov        ebp, 0x4                                    ; CODE XREF=check_node_accept_bytes.isra.31+526
000000000000bdee         jmp        loc_bda4

                     loc_bdf0:
000000000000bdf0         cmp        al, 0xfb                                    ; CODE XREF=check_node_accept_bytes.isra.31+522
000000000000bdf2         ja         loc_be08

000000000000bdf4         cmp        al, 0xf8
000000000000bdf6         jne        loc_be01

000000000000bdf8         cmp        dl, 0x87
000000000000bdfb         jbe        loc_bcc0

                     loc_be01:
000000000000be01         mov        ebp, 0x5                                    ; CODE XREF=check_node_accept_bytes.isra.31+550
000000000000be06         jmp        loc_bda4

                     loc_be08:
000000000000be08         cmp        al, 0xfd                                    ; CODE XREF=check_node_accept_bytes.isra.31+546
000000000000be0a         ja         loc_bcc0

000000000000be10         cmp        al, 0xfc
000000000000be12         jne        loc_be1d

000000000000be14         cmp        dl, 0x83
000000000000be17         jbe        loc_bcc0

                     loc_be1d:
000000000000be1d         mov        ebp, 0x6                                    ; CODE XREF=check_node_accept_bytes.isra.31+578
000000000000be22         jmp        loc_bda4
000000000000be24         align      16                                          ; End of unwind block (FDE at 0x175fc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int8_t, -88
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_7C: int32_t, -124
        ;    var_80: int32_t, -128
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208
        ;    var_D8: int64_t, -216
        ;    var_E0: int64_t, -224
        ;    var_E8: int64_t, -232
        ;    var_F0: int64_t, -240
        ;    var_F8: int64_t, -248
        ;    var_100: int64_t, -256
        ;    var_108: int64_t, -264


                     check_arrival:
000000000000be30         push       r15                                         ; Begin of unwind block (FDE at 0x17638), CODE XREF=get_subexp_sub.isra.32+48, transit_state_bkref.isra.34+1675
000000000000be32         push       r14
000000000000be34         mov        r15, rdi
000000000000be37         push       r13
000000000000be39         push       r12
000000000000be3b         push       rbp
000000000000be3c         push       rbx
000000000000be3d         mov        rbp, rcx
000000000000be40         mov        rbx, rdx
000000000000be43         sub        rsp, 0xd8
000000000000be4a         mov        rcx, qword [rdi+0x98]
000000000000be51         mov        r13, qword [rsi+8]
000000000000be55         mov        rax, qword [fs:0x28]
000000000000be5e         mov        qword [rsp+0x108+var_40], rax
000000000000be66         xor        eax, eax
000000000000be68         mov        rax, rdx
000000000000be6b         mov        qword [rsp+0x108+var_A8], rsi
000000000000be70         mov        qword [rsp+0x108+var_90], r8
000000000000be75         shl        rax, 0x4
000000000000be79         add        rax, qword [rcx]
000000000000be7c         mov        qword [rsp+0x108+var_C8], r9
000000000000be81         mov        qword [rsp+0x108+var_D8], rcx
000000000000be86         mov        dword [rsp+0x108+var_80], 0x0
000000000000be91         mov        rax, qword [rax]
000000000000be94         mov        qword [rsp+0x108+var_C0], rax
000000000000be99         movsxd     rax, dword [rdi+0xe0]
000000000000bea0         add        rax, r9
000000000000bea3         cmp        rax, r13
000000000000bea6         jge        loc_c4c6

                     loc_beac:
000000000000beac         mov        rax, qword [rsp+0x108+var_A8]               ; CODE XREF=check_arrival+1787
000000000000beb1         mov        rdx, qword [r15+0xb8]
000000000000beb8         mov        rcx, qword [r15+0x48]
000000000000bebc         mov        r12, qword [rax]
000000000000bebf         mov        r14, qword [rax+0x10]
000000000000bec3         mov        qword [rsp+0x108+var_A0], rdx
000000000000bec8         mov        qword [rsp+0x108+var_98], rcx
000000000000becd         mov        edx, dword [r15+0xa0]
000000000000bed4         test       r12, r12
000000000000bed7         mov        qword [r15+0xb8], r14
000000000000bede         je         loc_c2c0

000000000000bee4         lea        rsi, qword [r12-1]
000000000000bee9         mov        qword [r15+0x48], r12
000000000000beed         mov        rdi, r15
000000000000bef0         call       re_string_context_at                        ; re_string_context_at
000000000000bef5         cmp        r12, rbp
000000000000bef8         mov        r13d, eax
000000000000befb         je         loc_c2d3

000000000000bf01         mov        rbp, qword [r14+r12*8]
000000000000bf05         test       rbp, rbp
000000000000bf08         je         loc_bf14

000000000000bf0a         test       byte [rbp+0x68], 0x40
000000000000bf0e         jne        loc_c430

                     loc_bf14:
000000000000bf14         pxor       xmm0, xmm0                                  ; CODE XREF=check_arrival+216
000000000000bf18         mov        qword [rsp+0x108+var_68], 0x0
000000000000bf24         movaps     xmmword [rsp+0x108+var_78], xmm0

                     loc_bf2c:
000000000000bf2c         cmp        r12, qword [rsp+0x108+var_C8]               ; CODE XREF=check_arrival+1575, check_arrival+1681
000000000000bf31         jge        loc_c258

000000000000bf37         mov        ecx, dword [r15+0xe0]
000000000000bf3e         test       ecx, ecx
000000000000bf40         js         loc_c258

000000000000bf46         lea        rbx, qword [rsp+0x108+var_78]
000000000000bf4e         lea        rax, qword [0x8+r12*8]
000000000000bf56         mov        qword [rsp+0x108+var_108], r12
000000000000bf5a         mov        qword [rsp+0x108+var_E8], 0x0
000000000000bf63         mov        qword [rsp+0x108+var_100], rbx
000000000000bf68         lea        rbx, qword [rsp+0x108+var_58]
000000000000bf70         mov        qword [rsp+0x108+var_F8], rax
000000000000bf75         mov        rax, qword [r15+0xb8]
000000000000bf7c         mov        qword [rsp+0x108+var_F0], rbx
000000000000bf81         lea        rbx, qword [rsp+0x108+var_7C]
000000000000bf89         mov        qword [rsp+0x108+var_B0], rbx

                     loc_bf8e:
000000000000bf8e         mov        rcx, qword [rsp+0x108+var_F8]               ; CODE XREF=check_arrival+1058
000000000000bf93         mov        qword [rsp+0x108+var_70], 0x0
000000000000bf9f         mov        rsi, qword [rax+rcx]
000000000000bfa3         test       rsi, rsi
000000000000bfa6         je         loc_c368

000000000000bfac         mov        rdi, qword [rsp+0x108+var_100]
000000000000bfb1         add        rsi, 0x8
000000000000bfb5         call       re_node_set_merge                           ; re_node_set_merge
000000000000bfba         test       eax, eax
000000000000bfbc         mov        dword [rsp+0x108+var_80], eax
000000000000bfc3         jne        loc_c3a0

000000000000bfc9         test       rbp, rbp
000000000000bfcc         je         loc_c178

                     loc_bfd2:
000000000000bfd2         cmp        qword [rbp+0x28], 0x0                       ; CODE XREF=check_arrival+1339
000000000000bfd7         mov        rax, qword [rsp+0x108+var_F0]
000000000000bfdc         pxor       xmm0, xmm0
000000000000bfe0         mov        r12, qword [r15+0x98]
000000000000bfe7         mov        dword [rsp+0x108+var_7C], 0x0
000000000000bff2         mov        qword [rax+0x10], 0x0
000000000000bffa         movaps     xmmword [rax], xmm0
000000000000bffd         jle        loc_c530

000000000000c003         lea        rax, qword [r12+0xd8]
000000000000c00b         xor        ebx, ebx
000000000000c00d         mov        qword [rsp+0x108+var_E0], rax
000000000000c012         jmp        loc_c059
000000000000c014         align      8

                     loc_c018:
000000000000c018         mov        rdx, qword [rsp+0x108+var_108]              ; CODE XREF=check_arrival+580, check_arrival+1327
000000000000c01c         mov        rdi, r15
000000000000c01f         call       check_node_accept                           ; check_node_accept
000000000000c024         test       al, al
000000000000c026         je         loc_c04b

                     loc_c028:
000000000000c028         lea        r13, qword [r14*8]                          ; CODE XREF=check_arrival+1314

                     loc_c030:
000000000000c030         mov        rax, qword [r12+0x18]                       ; CODE XREF=check_arrival+779, check_arrival+794
000000000000c035         mov        rdi, qword [rsp+0x108+var_100]
000000000000c03a         mov        rsi, qword [rax+r13]
000000000000c03e         call       re_node_set_insert                          ; re_node_set_insert
000000000000c043         test       al, al
000000000000c045         je         loc_c388

                     loc_c04b:
000000000000c04b         add        rbx, 0x1                                    ; CODE XREF=check_arrival+502
000000000000c04f         cmp        rbx, qword [rbp+0x28]
000000000000c053         jge        loc_c3e0

                     loc_c059:
000000000000c059         mov        rax, qword [rbp+0x30]                       ; CODE XREF=check_arrival+482
000000000000c05d         mov        rdi, qword [r12]
000000000000c061         mov        r14, qword [rax+rbx*8]
000000000000c065         mov        r13, r14
000000000000c068         shl        r13, 0x4
000000000000c06c         lea        rsi, qword [rdi+r13]
000000000000c070         test       byte [rsi+0xa], 0x10
000000000000c074         je         loc_c018

000000000000c076         mov        r8, qword [rsp+0x108+var_108]
000000000000c07a         mov        rsi, qword [rsp+0x108+var_E0]
000000000000c07f         mov        rcx, r15
000000000000c082         mov        rdx, r14
000000000000c085         call       check_node_accept_bytes.isra.31             ; check_node_accept_bytes.isra.31
000000000000c08a         cmp        eax, 0x1
000000000000c08d         jle        loc_c350

000000000000c093         cdqe
000000000000c095         add        rax, qword [rsp+0x108+var_108]
000000000000c099         mov        rdx, qword [r12+0x18]
000000000000c09e         lea        r13, qword [r14*8]
000000000000c0a6         mov        rdx, qword [rdx+r14*8]
000000000000c0aa         mov        rcx, rax
000000000000c0ad         mov        qword [rsp+0x108+var_D0], rax
000000000000c0b2         lea        r14, qword [rax*8]
000000000000c0ba         mov        rax, qword [r15+0xb8]
000000000000c0c1         mov        rsi, qword [rax+rcx*8]
000000000000c0c5         mov        qword [rsp+0x108+var_50], 0x0
000000000000c0d1         test       rsi, rsi
000000000000c0d4         je         loc_c0f9

000000000000c0d6         mov        rdi, qword [rsp+0x108+var_F0]
000000000000c0db         add        rsi, 0x8
000000000000c0df         mov        qword [rsp+0x108+var_B8], rdx
000000000000c0e4         call       re_node_set_merge                           ; re_node_set_merge
000000000000c0e9         test       eax, eax
000000000000c0eb         mov        dword [rsp+0x108+var_7C], eax
000000000000c0f2         mov        rdx, qword [rsp+0x108+var_B8]
000000000000c0f7         jne        loc_c150

                     loc_c0f9:
000000000000c0f9         mov        rdi, qword [rsp+0x108+var_F0]               ; CODE XREF=check_arrival+676
000000000000c0fe         mov        rsi, rdx
000000000000c101         call       re_node_set_insert                          ; re_node_set_insert
000000000000c106         test       al, al
000000000000c108         je         loc_c388

000000000000c10e         add        r14, qword [r15+0xb8]
000000000000c115         mov        rdx, qword [rsp+0x108+var_F0]
000000000000c11a         mov        rsi, r12
000000000000c11d         mov        rdi, qword [rsp+0x108+var_B0]
000000000000c122         call       re_acquire_state                            ; re_acquire_state
000000000000c127         mov        rdx, qword [rsp+0x108+var_D0]
000000000000c12c         mov        qword [r14], rax
000000000000c12f         mov        rax, qword [r15+0xb8]
000000000000c136         cmp        qword [rax+rdx*8], 0x0
000000000000c13b         jne        loc_c030

000000000000c141         mov        edx, dword [rsp+0x108+var_7C]
000000000000c148         test       edx, edx
000000000000c14a         je         loc_c030

                     loc_c150:
000000000000c150         mov        rdi, qword [rsp+0x108+var_48]               ; argument "__ptr" for method j_free, CODE XREF=check_arrival+711
000000000000c158         call       j_free                                      ; free
000000000000c15d         mov        eax, dword [rsp+0x108+var_7C]
000000000000c164         test       eax, eax
000000000000c166         mov        dword [rsp+0x108+var_80], eax
000000000000c16d         jne        loc_c3a0

000000000000c173         nop        dword [rax+rax]

                     loc_c178:
000000000000c178         mov        rax, qword [rsp+0x108+var_108]              ; CODE XREF=check_arrival+412, check_arrival+1480
000000000000c17c         cmp        qword [rsp+0x108+var_70], 0x0
000000000000c185         lea        rbx, qword [rax+1]
000000000000c189         mov        r12, rbx
000000000000c18c         je         loc_c1e4

000000000000c18e         mov        ecx, dword [rsp+0x108+arg_0]
000000000000c195         mov        rdx, qword [rsp+0x108+var_C0]
000000000000c19a         mov        rsi, qword [rsp+0x108+var_100]
000000000000c19f         mov        rdi, qword [rsp+0x108+var_D8]
000000000000c1a4         call       check_arrival_expand_ecl                    ; check_arrival_expand_ecl
000000000000c1a9         test       eax, eax
000000000000c1ab         mov        dword [rsp+0x108+var_80], eax
000000000000c1b2         jne        loc_c3a0

000000000000c1b8         mov        r8d, dword [rsp+0x108+arg_0]
000000000000c1c0         mov        rcx, qword [rsp+0x108+var_C0]
000000000000c1c5         mov        rdx, rbx
000000000000c1c8         mov        rsi, qword [rsp+0x108+var_100]
000000000000c1cd         mov        rdi, r15
000000000000c1d0         call       expand_bkref_cache                          ; expand_bkref_cache
000000000000c1d5         test       eax, eax
000000000000c1d7         mov        dword [rsp+0x108+var_80], eax
000000000000c1de         jne        loc_c3a0

                     loc_c1e4:
000000000000c1e4         mov        edx, dword [r15+0xa0]                       ; CODE XREF=check_arrival+860, check_arrival+1356
000000000000c1eb         mov        rsi, qword [rsp+0x108+var_108]
000000000000c1ef         mov        rdi, r15
000000000000c1f2         call       re_string_context_at                        ; re_string_context_at
000000000000c1f7         mov        rdx, qword [rsp+0x108+var_100]
000000000000c1fc         mov        rsi, qword [rsp+0x108+var_D8]
000000000000c201         lea        rdi, qword [rsp+0x108+var_80]
000000000000c209         mov        ecx, eax
000000000000c20b         call       re_acquire_state_context                    ; re_acquire_state_context
000000000000c210         test       rax, rax
000000000000c213         mov        rbp, rax
000000000000c216         je         loc_c400

000000000000c21c         mov        rax, qword [r15+0xb8]
000000000000c223         mov        rdx, qword [rsp+0x108+var_F8]
000000000000c228         mov        qword [rsp+0x108+var_E8], 0x0
000000000000c231         mov        qword [rax+rdx], rbp

                     loc_c235:
000000000000c235         cmp        qword [rsp+0x108+var_C8], rbx               ; CODE XREF=check_arrival+1525
000000000000c23a         jle        loc_c258

000000000000c23c         movsxd     rdx, dword [r15+0xe0]
000000000000c243         add        qword [rsp+0x108+var_F8], 0x8
000000000000c249         cmp        rdx, qword [rsp+0x108+var_E8]
000000000000c24e         mov        qword [rsp+0x108+var_108], rbx
000000000000c252         jge        loc_bf8e

                     loc_c258:
000000000000c258         mov        rdi, qword [rsp+0x108+var_68]               ; argument "__ptr" for method j_free, CODE XREF=check_arrival+257, check_arrival+272, check_arrival+1034
000000000000c260         call       j_free                                      ; free
000000000000c265         mov        rax, qword [r15+0xb8]
000000000000c26c         mov        rbx, qword [rsp+0x108+var_C8]
000000000000c271         mov        rax, qword [rax+rbx*8]
000000000000c275         test       rax, rax
000000000000c278         je         loc_c555

000000000000c27e         mov        rbx, qword [rsp+0x108+var_A8]
000000000000c283         mov        rdx, qword [rsp+0x108+var_90]
000000000000c288         lea        rsi, qword [rax+0x18]
000000000000c28c         mov        qword [rbx], r12
000000000000c28f         mov        rbx, qword [rsp+0x108+var_A0]
000000000000c294         mov        qword [r15+0xb8], rbx
000000000000c29b         mov        rbx, qword [rsp+0x108+var_98]
000000000000c2a0         mov        qword [r15+0x48], rbx
000000000000c2a4         mov        rdi, qword [rax+0x10]
000000000000c2a8         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000c2ad         test       rax, rax
000000000000c2b0         sete       al
000000000000c2b3         movzx      eax, al
000000000000c2b6         jmp        loc_c3b4
000000000000c2bb         align      64

                     loc_c2c0:
000000000000c2c0         lea        rsi, qword [rbp-1]                          ; CODE XREF=check_arrival+174
000000000000c2c4         mov        qword [r15+0x48], rbp
000000000000c2c8         mov        rdi, r15
000000000000c2cb         call       re_string_context_at                        ; re_string_context_at
000000000000c2d0         mov        r13d, eax

                     loc_c2d3:
000000000000c2d3         mov        edi, 0x8                                    ; argument "__size" for method j_malloc, CODE XREF=check_arrival+203
000000000000c2d8         mov        qword [rsp+0x108+var_78], 0x1
000000000000c2e4         mov        qword [rsp+0x108+var_70], 0x1
000000000000c2f0         call       j_malloc                                    ; malloc
000000000000c2f5         test       rax, rax
000000000000c2f8         mov        qword [rsp+0x108+var_68], rax
000000000000c300         je         loc_c54b

000000000000c306         mov        qword [rax], rbx
000000000000c309         mov        ecx, dword [rsp+0x108+arg_0]
000000000000c310         lea        rbx, qword [rsp+0x108+var_78]
000000000000c318         mov        rdx, qword [rsp+0x108+var_C0]
000000000000c31d         mov        rdi, qword [rsp+0x108+var_D8]
000000000000c322         mov        r12, rbp
000000000000c325         mov        rsi, rbx
000000000000c328         mov        dword [rsp+0x108+var_80], 0x0
000000000000c333         call       check_arrival_expand_ecl                    ; check_arrival_expand_ecl
000000000000c338         test       eax, eax
000000000000c33a         mov        dword [rsp+0x108+var_80], eax
000000000000c341         je         loc_c45d

000000000000c347         jmp        loc_c3a0
000000000000c349         align      16

                     loc_c350:
000000000000c350         test       eax, eax                                    ; CODE XREF=check_arrival+605
000000000000c352         jne        loc_c028

000000000000c358         mov        rsi, qword [r12]
000000000000c35c         add        rsi, r13
000000000000c35f         jmp        loc_c018
000000000000c364         align      8

                     loc_c368:
000000000000c368         test       rbp, rbp                                    ; CODE XREF=check_arrival+374
000000000000c36b         jne        loc_bfd2

000000000000c371         mov        rax, qword [rsp+0x108+var_108]
000000000000c375         lea        rbx, qword [rax+1]
000000000000c379         mov        r12, rbx
000000000000c37c         jmp        loc_c1e4
000000000000c381         align      8

                     loc_c388:
000000000000c388         mov        rdi, qword [rsp+0x108+var_48]               ; argument "__ptr" for method j_free, CODE XREF=check_arrival+533, check_arrival+728
000000000000c390         call       j_free                                      ; free
000000000000c395         mov        dword [rsp+0x108+var_80], 0xc

                     loc_c3a0:
000000000000c3a0         mov        rdi, qword [rsp+0x108+var_68]               ; argument "__ptr" for method j_free, CODE XREF=check_arrival+403, check_arrival+829, check_arrival+898, check_arrival+942, check_arrival+1303, check_arrival+1497, check_arrival+1628, check_arrival+1814
000000000000c3a8         call       j_free                                      ; free
000000000000c3ad         mov        eax, dword [rsp+0x108+var_80]

                     loc_c3b4:
000000000000c3b4         mov        rbx, qword [rsp+0x108+var_40]               ; CODE XREF=check_arrival+1158, check_arrival+1565, check_arrival+1824, check_arrival+1863
000000000000c3bc         xor        rbx, qword [fs:0x28]
000000000000c3c5         jne        loc_c57c

000000000000c3cb         add        rsp, 0xd8
000000000000c3d2         pop        rbx
000000000000c3d3         pop        rbp
000000000000c3d4         pop        r12
000000000000c3d6         pop        r13
000000000000c3d8         pop        r14
000000000000c3da         pop        r15
000000000000c3dc         ret
                        ; endp
000000000000c3dd         align      32

                     loc_c3e0:
000000000000c3e0         mov        rdi, qword [rsp+0x108+var_48]               ; CODE XREF=check_arrival+547

                     loc_c3e8:
000000000000c3e8         call       j_free                                      ; free, CODE XREF=check_arrival+1794
000000000000c3ed         mov        dword [rsp+0x108+var_80], 0x0
000000000000c3f8         jmp        loc_c178
000000000000c3fd         align      1024

                     loc_c400:
000000000000c400         mov        eax, dword [rsp+0x108+var_80]               ; CODE XREF=check_arrival+998
000000000000c407         test       eax, eax
000000000000c409         jne        loc_c3a0

000000000000c40b         mov        rax, qword [r15+0xb8]
000000000000c412         mov        rdx, qword [rsp+0x108+var_F8]
000000000000c417         add        qword [rsp+0x108+var_E8], 0x1
000000000000c41d         mov        qword [rax+rdx], 0x0
000000000000c425         jmp        loc_c235
000000000000c42a         align      16

                     loc_c430:
000000000000c430         lea        rbx, qword [rsp+0x108+var_78]               ; CODE XREF=check_arrival+222
000000000000c438         lea        rsi, qword [rbp+8]
000000000000c43c         mov        rdi, rbx
000000000000c43f         call       re_node_set_init_copy                       ; re_node_set_init_copy
000000000000c444         test       eax, eax
000000000000c446         mov        dword [rsp+0x108+var_80], eax
000000000000c44d         jne        loc_c3b4

000000000000c453         test       byte [rbp+0x68], 0x40
000000000000c457         je         loc_bf2c

                     loc_c45d:
000000000000c45d         cmp        qword [rsp+0x108+var_70], 0x0               ; CODE XREF=check_arrival+1297
000000000000c466         je         loc_c492

000000000000c468         mov        r8d, dword [rsp+0x108+arg_0]
000000000000c470         mov        rcx, qword [rsp+0x108+var_C0]
000000000000c475         mov        rdx, r12
000000000000c478         mov        rsi, rbx
000000000000c47b         mov        rdi, r15
000000000000c47e         call       expand_bkref_cache                          ; expand_bkref_cache
000000000000c483         test       eax, eax
000000000000c485         mov        dword [rsp+0x108+var_80], eax
000000000000c48c         jne        loc_c3a0

                     loc_c492:
000000000000c492         mov        rsi, qword [rsp+0x108+var_D8]               ; CODE XREF=check_arrival+1590
000000000000c497         lea        rdi, qword [rsp+0x108+var_80]
000000000000c49f         mov        ecx, r13d
000000000000c4a2         mov        rdx, rbx
000000000000c4a5         call       re_acquire_state_context                    ; re_acquire_state_context
000000000000c4aa         test       rax, rax
000000000000c4ad         mov        rbp, rax
000000000000c4b0         je         loc_c537

                     loc_c4b6:
000000000000c4b6         mov        rax, qword [r15+0xb8]                       ; CODE XREF=check_arrival+1808
000000000000c4bd         mov        qword [rax+r12*8], rbp
000000000000c4c1         jmp        loc_bf2c

                     loc_c4c6:
000000000000c4c6         lea        r12, qword [rax+1]                          ; CODE XREF=check_arrival+118
000000000000c4ca         movabs     rax, 0x7fffffffffffffff
000000000000c4d4         sub        rax, r13
000000000000c4d7         cmp        rax, r12
000000000000c4da         jl         loc_c54b

000000000000c4dc         lea        r14, qword [r13+r12]
000000000000c4e1         movabs     rax, 0x1fffffffffffffff
000000000000c4eb         cmp        r14, rax
000000000000c4ee         ja         loc_c54b

000000000000c4f0         mov        rax, qword [rsp+0x108+var_A8]
000000000000c4f5         lea        rsi, qword [r14*8]                          ; argument "__size" for method j_realloc
000000000000c4fd         mov        rdi, qword [rax+0x10]                       ; argument "__ptr" for method j_realloc
000000000000c501         call       j_realloc                                   ; realloc
000000000000c506         test       rax, rax
000000000000c509         je         loc_c54b

000000000000c50b         mov        rcx, qword [rsp+0x108+var_A8]
000000000000c510         lea        rdx, qword [r12*8]                          ; argument "__n" for method j_memset
000000000000c518         lea        rdi, qword [rax+r13*8]                      ; argument "__s" for method j_memset
000000000000c51c         xor        esi, esi                                    ; argument "__c" for method j_memset
000000000000c51e         mov        qword [rcx+0x10], rax
000000000000c522         mov        qword [rcx+8], r14
000000000000c526         call       j_memset                                    ; memset
000000000000c52b         jmp        loc_beac

                     loc_c530:
000000000000c530         xor        edi, edi                                    ; CODE XREF=check_arrival+461
000000000000c532         jmp        loc_c3e8

                     loc_c537:
000000000000c537         mov        esi, dword [rsp+0x108+var_80]               ; CODE XREF=check_arrival+1664
000000000000c53e         test       esi, esi
000000000000c540         je         loc_c4b6

000000000000c546         jmp        loc_c3a0

                     loc_c54b:
000000000000c54b         mov        eax, 0xc                                    ; CODE XREF=check_arrival+1232, check_arrival+1706, check_arrival+1726, check_arrival+1753
000000000000c550         jmp        loc_c3b4

                     loc_c555:
000000000000c555         mov        rax, qword [rsp+0x108+var_A8]               ; CODE XREF=check_arrival+1096
000000000000c55a         mov        qword [rax], r12
000000000000c55d         mov        rax, qword [rsp+0x108+var_A0]
000000000000c562         mov        qword [r15+0xb8], rax
000000000000c569         mov        rax, qword [rsp+0x108+var_98]
000000000000c56e         mov        qword [r15+0x48], rax
000000000000c572         mov        eax, 0x1
000000000000c577         jmp        loc_c3b4

                     loc_c57c:
000000000000c57c         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=check_arrival+1429
                        ; endp
000000000000c581         align      16                                          ; End of unwind block (FDE at 0x17638)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_28: int8_t, -40
        ;    var_38: int64_t, -56
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int8_t, -112
        ;    var_78: int64_t, -120
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_C9: int8_t, -201
        ;    var_D1: int8_t, -209
        ;    var_D8: int64_t, -216


                     set_regs:
000000000000c590         push       rbp                                         ; Begin of unwind block (FDE at 0x17688), CODE XREF=re_search_internal+4945
000000000000c591         mov        rbp, rsp
000000000000c594         push       r15
000000000000c596         push       r14
000000000000c598         push       r13
000000000000c59a         push       r12
000000000000c59c         mov        r13, rcx
000000000000c59f         push       rbx
000000000000c5a0         mov        r12, rsi
000000000000c5a3         sub        rsp, 0xb8
000000000000c5aa         mov        qword [rbp+var_98], rdx
000000000000c5b1         mov        qword [rbp+var_50], 0x0
000000000000c5b9         mov        rax, qword [fs:0x28]
000000000000c5c2         mov        qword [rbp+var_38], rax
000000000000c5c6         xor        eax, eax
000000000000c5c8         mov        rax, qword [rdi]
000000000000c5cb         test       r8b, r8b
000000000000c5ce         mov        qword [rbp+var_48], 0x2
000000000000c5d6         mov        qword [rbp+var_40], 0x0
000000000000c5de         mov        qword [rbp+var_90], rax
000000000000c5e5         je         loc_cd8d

000000000000c5eb         mov        edi, 0x60                                   ; argument "__size" for method j_malloc
000000000000c5f0         call       j_malloc                                    ; malloc
000000000000c5f5         lea        rcx, qword [rbp+var_50]
000000000000c5f9         test       rax, rax
000000000000c5fc         mov        qword [rbp+var_40], rax
000000000000c600         mov        qword [rbp+var_88], rcx
000000000000c607         je         loc_cd2c

                     loc_c60d:
000000000000c60d         mov        rax, qword [rbp+var_90]                     ; CODE XREF=set_regs+2056
000000000000c614         pxor       xmm0, xmm0
000000000000c618         mov        qword [rbp+var_60], 0x0
000000000000c620         mov        rbx, qword [rax+0x90]
000000000000c627         mov        rax, qword [rbp+var_98]
000000000000c62e         movaps     xmmword [rbp+var_70], xmm0
000000000000c632         shl        rax, 0x4
000000000000c636         cmp        rax, 0xfbf
000000000000c63c         mov        qword [rbp+var_B8], rax
000000000000c643         ja         loc_cd36

000000000000c649         add        rax, 0x10
000000000000c64d         mov        byte [rbp+var_C9], 0x0
000000000000c654         sub        rsp, rax
000000000000c657         lea        rax, qword [rsp+0xe0+var_D1]
000000000000c65c         and        rax, 0xfffffffffffffff0
000000000000c660         mov        qword [rbp+var_C0], rax

                     loc_c667:
000000000000c667         mov        rdx, qword [rbp+var_B8]                     ; argument "__n" for method j_memcpy, CODE XREF=set_regs+1987
000000000000c66e         mov        rdi, qword [rbp+var_C0]                     ; argument "__dest" for method j_memcpy
000000000000c675         mov        rsi, r13                                    ; argument "__src" for method j_memcpy
000000000000c678         call       j_memcpy                                    ; memcpy
000000000000c67d         lea        rax, qword [rbp+var_70]
000000000000c681         mov        rcx, qword [r13]
000000000000c685         mov        qword [rbp+var_A8], rax
000000000000c68c         add        rax, 0x10
000000000000c690         mov        qword [rbp+var_78], rcx
000000000000c694         mov        qword [rbp+var_C8], rax

                     loc_c69b:
000000000000c69b         lea        rax, qword [rbp+var_78]                     ; CODE XREF=set_regs+1554
000000000000c69f         mov        qword [rbp+var_B0], rax
000000000000c6a6         jmp        loc_c789
000000000000c6ab         align      16

                     loc_c6b0:
000000000000c6b0         cmp        esi, 0x9                                    ; CODE XREF=set_regs+548
000000000000c6b3         je         loc_c8a0

                     loc_c6b9:
000000000000c6b9         cmp        rax, rcx                                    ; CODE XREF=set_regs+568, set_regs+596, set_regs+798, set_regs+854, set_regs+1770, set_regs+1901
000000000000c6bc         jne        loc_c6cc

000000000000c6be         cmp        qword [r12+0xb0], rbx
000000000000c6c6         je         loc_caa0

                     loc_c6cc:
000000000000c6cc         mov        r14, qword [r12+0x98]                       ; CODE XREF=set_regs+300, set_regs+1477
000000000000c6d4         mov        rdi, qword [r14]
000000000000c6d7         lea        rsi, qword [rdi+r9]
000000000000c6db         movzx      eax, byte [rsi+8]
000000000000c6df         test       al, 0x8
000000000000c6e1         jne        loc_c7f0

000000000000c6e7         test       byte [rsi+0xa], 0x10
000000000000c6eb         jne        loc_c8f0

000000000000c6f1         cmp        al, 0x4
000000000000c6f3         je         loc_c930

000000000000c6f9         mov        rcx, qword [rbp+var_78]

                     loc_c6fd:
000000000000c6fd         mov        rdx, rcx                                    ; CODE XREF=set_regs+922, set_regs+1701
000000000000c700         mov        rdi, r12
000000000000c703         mov        qword [rbp+var_A0], rcx
000000000000c70a         call       check_node_accept                           ; check_node_accept
000000000000c70f         test       al, al
000000000000c711         mov        rcx, qword [rbp+var_A0]
000000000000c718         je         loc_cb68

000000000000c71e         mov        rax, qword [r14+0x18]
000000000000c722         lea        rdx, qword [rcx+1]
000000000000c726         mov        rbx, qword [rax+r15*8]

                     loc_c72a:
000000000000c72a         cmp        qword [rbp+var_88], 0x0                     ; CODE XREF=set_regs+1073
000000000000c732         mov        qword [rbp+var_78], rdx
000000000000c736         je         loc_c774

000000000000c738         cmp        rdx, qword [r12+0xa8]
000000000000c740         jg         loc_cb76

000000000000c746         mov        rax, qword [r12+0xb8]
000000000000c74e         mov        rax, qword [rax+rdx*8]
000000000000c752         test       rax, rax
000000000000c755         je         loc_cb76

000000000000c75b         mov        rdi, qword [rax+0x10]
000000000000c75f         lea        rsi, qword [rax+0x18]
000000000000c763         mov        rdx, rbx
000000000000c766         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000c76b         test       rax, rax
000000000000c76e         je         loc_cb76

                     loc_c774:
000000000000c774         mov        qword [rbp+var_68], 0x0                     ; CODE XREF=set_regs+422

                     loc_c77c:
000000000000c77c         test       rbx, rbx                                    ; CODE XREF=set_regs+772, set_regs+1136, set_regs+1244, set_regs+1571, set_regs+1675
000000000000c77f         js         loc_cb5a

000000000000c785         mov        rcx, qword [rbp+var_78]

                     loc_c789:
000000000000c789         mov        rax, qword [r13+8]                          ; CODE XREF=set_regs+278
000000000000c78d         cmp        rax, rcx
000000000000c790         jl         loc_cc80

000000000000c796         mov        rdi, qword [rbp+var_90]
000000000000c79d         mov        r9, rbx
000000000000c7a0         mov        r15, rbx
000000000000c7a3         shl        r9, 0x4
000000000000c7a7         mov        rdx, qword [rdi]
000000000000c7aa         add        rdx, r9
000000000000c7ad         movzx      esi, byte [rdx+8]
000000000000c7b1         cmp        esi, 0x8
000000000000c7b4         jne        loc_c6b0

000000000000c7ba         mov        rdx, qword [rdx]
000000000000c7bd         add        rdx, 0x1
000000000000c7c1         cmp        qword [rbp+var_98], rdx
000000000000c7c8         jle        loc_c6b9

000000000000c7ce         shl        rdx, 0x4
000000000000c7d2         add        rdx, r13
000000000000c7d5         mov        qword [rdx+8], 0xffffffffffffffff
000000000000c7dd         mov        qword [rdx], rcx
000000000000c7e0         mov        rax, qword [r13+8]
000000000000c7e4         jmp        loc_c6b9
000000000000c7e9         align      16

                     loc_c7f0:
000000000000c7f0         mov        rax, qword [r12+0xb8]                       ; CODE XREF=set_regs+337
000000000000c7f8         mov        rdx, qword [rbp+var_78]
000000000000c7fc         mov        rsi, rbx
000000000000c7ff         mov        rdi, qword [rbp+var_A8]
000000000000c806         mov        r9, qword [rax+rdx*8]
000000000000c80a         mov        rax, qword [r14+0x28]
000000000000c80e         lea        rdx, qword [rbx+rbx*2]
000000000000c812         mov        qword [rbp+var_A0], r9
000000000000c819         lea        r15, qword [rax+rdx*8]
000000000000c81d         call       re_node_set_insert                          ; re_node_set_insert
000000000000c822         test       al, al
000000000000c824         mov        r9, qword [rbp+var_A0]
000000000000c82b         je         loc_cd08

000000000000c831         mov        r10, qword [r15+8]
000000000000c835         test       r10, r10
000000000000c838         jle        loc_cb68

000000000000c83e         mov        r15, qword [r15+0x10]
000000000000c842         mov        r11, qword [r9+0x10]
000000000000c846         lea        r14, qword [r9+0x18]
000000000000c84a         mov        rbx, 0xffffffffffffffff
000000000000c851         xor        r9d, r9d
000000000000c854         mov        qword [rbp+var_A0], r12
000000000000c85b         nop        dword [rax+rax]

                     loc_c860:
000000000000c860         mov        r12, qword [r15+r9*8]                       ; CODE XREF=set_regs+763
000000000000c864         mov        rsi, r14
000000000000c867         mov        rdi, r11
000000000000c86a         mov        rdx, r12
000000000000c86d         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000c872         test       rax, rax
000000000000c875         je         loc_c884

000000000000c877         cmp        rbx, 0xffffffffffffffff
000000000000c87b         jne        loc_c9d0

000000000000c881         mov        rbx, r12

                     loc_c884:
000000000000c884         add        r9, 0x1                                     ; CODE XREF=set_regs+741
000000000000c888         cmp        r10, r9
000000000000c88b         jne        loc_c860

000000000000c88d         mov        r12, qword [rbp+var_A0]
000000000000c894         jmp        loc_c77c
000000000000c899         align      32

                     loc_c8a0:
000000000000c8a0         mov        rdi, qword [rdx]                            ; CODE XREF=set_regs+291
000000000000c8a3         lea        rsi, qword [rdi+1]
000000000000c8a7         cmp        qword [rbp+var_98], rsi
000000000000c8ae         jle        loc_c6b9

000000000000c8b4         shl        rsi, 0x4
000000000000c8b8         lea        rax, qword [r13+rsi]
000000000000c8bd         cmp        qword [rax], rcx
000000000000c8c0         jl         loc_cc40

000000000000c8c6         test       byte [rdx+0xa], 0x8
000000000000c8ca         je         loc_c8de

000000000000c8cc         mov        rdi, qword [rbp+var_C0]
000000000000c8d3         cmp        qword [rdi+rsi], 0xffffffffffffffff
000000000000c8d8         jne        loc_cccb

                     loc_c8de:
000000000000c8de         mov        qword [rax+8], rcx                          ; CODE XREF=set_regs+826
000000000000c8e2         mov        rax, qword [r13+8]
000000000000c8e6         jmp        loc_c6b9
000000000000c8eb         align      16

                     loc_c8f0:
000000000000c8f0         mov        r8, qword [rbp+var_78]                      ; CODE XREF=set_regs+347
000000000000c8f4         lea        rsi, qword [r14+0xd8]
000000000000c8fb         mov        rcx, r12
000000000000c8fe         mov        rdx, rbx
000000000000c901         mov        qword [rbp+var_A0], r9
000000000000c908         call       check_node_accept_bytes.isra.31             ; check_node_accept_bytes.isra.31
000000000000c90d         movsxd     rcx, eax
000000000000c910         test       rcx, rcx
000000000000c913         jne        loc_cb11

000000000000c919         mov        r9, qword [rbp+var_A0]
000000000000c920         mov        rsi, qword [r14]
000000000000c923         mov        rcx, qword [rbp+var_78]
000000000000c927         add        rsi, r9
000000000000c92a         jmp        loc_c6fd
000000000000c92f         align      16

                     loc_c930:
000000000000c930         mov        rax, qword [rsi]                            ; CODE XREF=set_regs+355
000000000000c933         add        rax, 0x1
000000000000c937         shl        rax, 0x4
000000000000c93b         add        rax, r13
000000000000c93e         mov        rdx, qword [rax+8]
000000000000c942         mov        rdi, qword [rax]
000000000000c945         mov        rcx, rdx
000000000000c948         sub        rcx, rdi
000000000000c94b         cmp        qword [rbp+var_88], 0x0
000000000000c953         je         loc_cb08

000000000000c959         cmp        rdi, 0xffffffffffffffff
000000000000c95d         je         loc_cb76

000000000000c963         cmp        rdx, 0xffffffffffffffff
000000000000c967         je         loc_cb76

000000000000c96d         test       rcx, rcx
000000000000c970         je         loc_cbc0

000000000000c976         mov        r15, qword [rbp+var_78]
000000000000c97a         mov        rdx, qword [r12+0x30]
000000000000c97f         mov        rax, qword [r12+8]
000000000000c984         sub        rdx, r15
000000000000c987         cmp        rcx, rdx
000000000000c98a         jg         loc_cb76

000000000000c990         lea        rsi, qword [rax+r15]                        ; argument "__s2" for method j_memcmp
000000000000c994         add        rdi, rax                                    ; argument "__s1" for method j_memcmp
000000000000c997         mov        rdx, rcx                                    ; argument "__n" for method j_memcmp
000000000000c99a         mov        qword [rbp+var_A0], rcx
000000000000c9a1         call       j_memcmp                                    ; memcmp
000000000000c9a6         test       eax, eax
000000000000c9a8         mov        rcx, qword [rbp+var_A0]
000000000000c9af         jne        loc_cb76

                     loc_c9b5:
000000000000c9b5         mov        rax, qword [r14+0x18]                       ; CODE XREF=set_regs+1413
000000000000c9b9         lea        rdx, qword [r15+rcx]
000000000000c9bd         mov        rbx, qword [rax+rbx*8]
000000000000c9c1         jmp        loc_c72a
000000000000c9c6         align      16

                     loc_c9d0:
000000000000c9d0         mov        rsi, qword [rbp+var_C8]                     ; CODE XREF=set_regs+747
000000000000c9d7         mov        rdi, qword [rbp+var_68]
000000000000c9db         mov        rdx, rbx
000000000000c9de         mov        r14, r12
000000000000c9e1         mov        r12, qword [rbp+var_A0]
000000000000c9e8         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000c9ed         test       rax, rax
000000000000c9f0         jne        loc_cbb0

000000000000c9f6         mov        rcx, qword [rbp+var_88]
000000000000c9fd         test       rcx, rcx
000000000000ca00         je         loc_c77c

000000000000ca06         mov        r15, qword [rcx]
000000000000ca09         mov        rdx, qword [rbp+var_78]
000000000000ca0d         lea        rax, qword [r15+1]
000000000000ca11         cmp        rax, qword [rcx+8]
000000000000ca15         mov        qword [rcx], rax
000000000000ca18         je         loc_cd9d

000000000000ca1e         mov        rax, qword [rcx+0x10]

                     loc_ca22:
000000000000ca22         lea        r15, qword [r15+r15*2]                      ; CODE XREF=set_regs+2119
000000000000ca26         shl        r15, 0x4
000000000000ca2a         add        r15, rax
000000000000ca2d         mov        qword [r15+8], r14
000000000000ca31         mov        r14, qword [rbp+var_B8]
000000000000ca38         mov        qword [r15], rdx
000000000000ca3b         mov        rdi, r14                                    ; argument "__size" for method j_malloc
000000000000ca3e         call       j_malloc                                    ; malloc
000000000000ca43         test       rax, rax
000000000000ca46         mov        qword [r15+0x10], rax
000000000000ca4a         je         loc_ca72

000000000000ca4c         mov        rdx, r14                                    ; argument "__n" for method j_memcpy
000000000000ca4f         mov        rsi, r13                                    ; argument "__src" for method j_memcpy
000000000000ca52         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
000000000000ca55         call       j_memcpy                                    ; memcpy
000000000000ca5a         mov        rsi, qword [rbp+var_A8]
000000000000ca61         lea        rdi, qword [r15+0x18]
000000000000ca65         call       re_node_set_init_copy                       ; re_node_set_init_copy
000000000000ca6a         test       eax, eax
000000000000ca6c         je         loc_c77c

                     loc_ca72:
000000000000ca72         mov        rdi, qword [rbp+var_60]                     ; argument "__ptr" for method j_free, CODE XREF=set_regs+1210
000000000000ca76         call       j_free                                      ; free
000000000000ca7b         cmp        byte [rbp+var_C9], 0x0
000000000000ca82         jne        loc_ce1b

                     loc_ca88:
000000000000ca88         mov        rdi, qword [rbp+var_88]                     ; CODE XREF=set_regs+1942, set_regs+2181
000000000000ca8f         call       free_fail_stack_return.part.24              ; free_fail_stack_return.part.24
000000000000ca94         mov        eax, 0xc
000000000000ca99         jmp        loc_cca9
000000000000ca9e         align      32

                     loc_caa0:
000000000000caa0         cmp        qword [rbp+var_88], 0x0                     ; CODE XREF=set_regs+310
000000000000caa8         je         loc_cddc

000000000000caae         mov        rcx, qword [rbp+var_98]
000000000000cab5         test       rcx, rcx
000000000000cab8         je         loc_cada

000000000000caba         mov        rax, r13
000000000000cabd         xor        edx, edx
000000000000cabf         nop

                     loc_cac0:
000000000000cac0         cmp        qword [rax], 0x0                            ; CODE XREF=set_regs+1352
000000000000cac4         js         loc_cacd

000000000000cac6         cmp        qword [rax+8], 0xffffffffffffffff
000000000000cacb         je         loc_cb20

                     loc_cacd:
000000000000cacd         add        rdx, 0x1                                    ; CODE XREF=set_regs+1332
000000000000cad1         add        rax, 0x10
000000000000cad5         cmp        rcx, rdx
000000000000cad8         jne        loc_cac0

                     loc_cada:
000000000000cada         mov        rdi, qword [rbp+var_60]                     ; argument "__ptr" for method j_free, CODE XREF=set_regs+1320
000000000000cade         call       j_free                                      ; free
000000000000cae3         cmp        byte [rbp+var_C9], 0x0
000000000000caea         jne        loc_ce64

                     loc_caf0:
000000000000caf0         mov        rdi, qword [rbp+var_88]                     ; CODE XREF=set_regs+2272
000000000000caf7         call       free_fail_stack_return.part.24              ; free_fail_stack_return.part.24
000000000000cafc         xor        eax, eax
000000000000cafe         jmp        loc_cca9
000000000000cb03         align      8

                     loc_cb08:
000000000000cb08         test       rcx, rcx                                    ; CODE XREF=set_regs+963
000000000000cb0b         je         loc_cbc0

                     loc_cb11:
000000000000cb11         mov        r15, qword [rbp+var_78]                     ; CODE XREF=set_regs+899
000000000000cb15         jmp        loc_c9b5
000000000000cb1a         align      32

                     loc_cb20:
000000000000cb20         mov        rdi, qword [rbp+var_88]                     ; CODE XREF=set_regs+1339
000000000000cb27         mov        r9, qword [rbp+var_A8]
000000000000cb2e         mov        r8, r13
000000000000cb31         mov        rcx, qword [rbp+var_98]
000000000000cb38         mov        rdx, qword [rbp+var_B0]
000000000000cb3f         lea        rsi, qword [rdi+0x10]
000000000000cb43         call       pop_fail_stack.isra.25                      ; pop_fail_stack.isra.25
000000000000cb48         mov        r9, rax
000000000000cb4b         mov        rbx, rax
000000000000cb4e         mov        r15, rax
000000000000cb51         shl        r9, 0x4
000000000000cb55         jmp        loc_c6cc

                     loc_cb5a:
000000000000cb5a         cmp        rbx, 0xfffffffffffffffe                     ; CODE XREF=set_regs+495
000000000000cb5e         je         loc_cd08

000000000000cb64         nop        dword [rax]

                     loc_cb68:
000000000000cb68         cmp        qword [rbp+var_88], 0x0                     ; CODE XREF=set_regs+392, set_regs+680
000000000000cb70         je         loc_ce2c

                     loc_cb76:
000000000000cb76         mov        rdi, qword [rbp+var_88]                     ; CODE XREF=set_regs+432, set_regs+453, set_regs+478, set_regs+973, set_regs+983, set_regs+1018, set_regs+1055
000000000000cb7d         mov        rcx, qword [rbp+var_98]
000000000000cb84         lea        rdx, qword [rbp+var_78]
000000000000cb88         mov        r9, qword [rbp+var_A8]
000000000000cb8f         mov        r8, r13
000000000000cb92         lea        rsi, qword [rdi+0x10]
000000000000cb96         call       pop_fail_stack.isra.25                      ; pop_fail_stack.isra.25
000000000000cb9b         mov        rcx, qword [rbp+var_78]
000000000000cb9f         mov        rbx, rax
000000000000cba2         jmp        loc_c69b
000000000000cba7         align      16

                     loc_cbb0:
000000000000cbb0         mov        rbx, r14                                    ; CODE XREF=set_regs+1120
000000000000cbb3         jmp        loc_c77c
000000000000cbb8         align      64

                     loc_cbc0:
000000000000cbc0         mov        rdi, qword [rbp+var_A8]                     ; CODE XREF=set_regs+992, set_regs+1403
000000000000cbc7         mov        rsi, rbx
000000000000cbca         mov        qword [rbp+var_A0], r9
000000000000cbd1         call       re_node_set_insert                          ; re_node_set_insert
000000000000cbd6         test       al, al
000000000000cbd8         je         loc_cd08

000000000000cbde         mov        rdx, qword [r14+0x28]
000000000000cbe2         lea        rax, qword [rbx+rbx*2]
000000000000cbe6         mov        rcx, qword [rbp+var_78]
000000000000cbea         lea        rax, qword [rdx+rax*8]
000000000000cbee         mov        qword [rbp+var_D8], rcx
000000000000cbf5         mov        rax, qword [rax+0x10]
000000000000cbf9         mov        rbx, qword [rax]
000000000000cbfc         mov        rax, qword [r12+0xb8]
000000000000cc04         mov        rax, qword [rax+rcx*8]
000000000000cc08         mov        rdx, rbx
000000000000cc0b         mov        rdi, qword [rax+0x10]
000000000000cc0f         lea        rsi, qword [rax+0x18]
000000000000cc13         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000cc18         test       rax, rax
000000000000cc1b         jne        loc_c77c

000000000000cc21         mov        r9, qword [rbp+var_A0]
000000000000cc28         mov        rsi, qword [r14]
000000000000cc2b         mov        rcx, qword [rbp+var_D8]
000000000000cc32         add        rsi, r9
000000000000cc35         jmp        loc_c6fd
000000000000cc3a         align      64

                     loc_cc40:
000000000000cc40         mov        rdx, qword [rbp+var_B8]                     ; argument "__n" for method j_memcpy, CODE XREF=set_regs+816
000000000000cc47         mov        rdi, qword [rbp+var_C0]                     ; argument "__dest" for method j_memcpy
000000000000cc4e         mov        rsi, r13                                    ; argument "__src" for method j_memcpy
000000000000cc51         mov        qword [rax+8], rcx
000000000000cc55         mov        qword [rbp+var_D8], r9
000000000000cc5c         mov        qword [rbp+var_A0], rcx
000000000000cc63         call       j_memcpy                                    ; memcpy
000000000000cc68         mov        rax, qword [r13+8]
000000000000cc6c         mov        rcx, qword [rbp+var_A0]
000000000000cc73         mov        r9, qword [rbp+var_D8]
000000000000cc7a         jmp        loc_c6b9
000000000000cc7f         align      128

                     loc_cc80:
000000000000cc80         mov        rdi, qword [rbp+var_60]                     ; argument "__ptr" for method j_free, CODE XREF=set_regs+512
000000000000cc84         call       j_free                                      ; free
000000000000cc89         cmp        byte [rbp+var_C9], 0x0
000000000000cc90         jne        loc_cd6c

000000000000cc96         mov        rdi, qword [rbp+var_88]
000000000000cc9d         test       rdi, rdi
000000000000cca0         je         loc_cca7

                     loc_cca2:
000000000000cca2         call       free_fail_stack_return.part.24              ; free_fail_stack_return.part.24, CODE XREF=set_regs+2034

                     loc_cca7:
000000000000cca7         xor        eax, eax                                    ; CODE XREF=set_regs+1808, set_regs+2040, set_regs+2140

                     loc_cca9:
000000000000cca9         mov        rbx, qword [rbp+var_38]                     ; CODE XREF=set_regs+1289, set_regs+1390, set_regs+1953, set_regs+2160, set_regs+2225, set_regs+2255
000000000000ccad         xor        rbx, qword [fs:0x28]
000000000000ccb6         jne        loc_ce75

000000000000ccbc         lea        rsp, qword [rbp+var_28]
000000000000ccc0         pop        rbx
000000000000ccc1         pop        r12
000000000000ccc3         pop        r13
000000000000ccc5         pop        r14
000000000000ccc7         pop        r15
000000000000ccc9         pop        rbp
000000000000ccca         ret
                        ; endp

                     loc_cccb:
000000000000cccb         mov        rdx, qword [rbp+var_B8]                     ; argument "__n" for method j_memcpy, CODE XREF=set_regs+840
000000000000ccd2         mov        rsi, rdi                                    ; argument "__src" for method j_memcpy
000000000000ccd5         mov        rdi, r13                                    ; argument "__dest" for method j_memcpy
000000000000ccd8         mov        qword [rbp+var_D8], rcx
000000000000ccdf         mov        qword [rbp+var_A0], r9
000000000000cce6         call       j_memcpy                                    ; memcpy
000000000000cceb         mov        rax, qword [r13+8]
000000000000ccef         mov        r9, qword [rbp+var_A0]
000000000000ccf6         mov        rcx, qword [rbp+var_D8]
000000000000ccfd         jmp        loc_c6b9
000000000000cd02         align      8

                     loc_cd08:
000000000000cd08         mov        rdi, qword [rbp+var_60]                     ; argument "__ptr" for method j_free, CODE XREF=set_regs+667, set_regs+1486, set_regs+1608
000000000000cd0c         call       j_free                                      ; free
000000000000cd11         cmp        byte [rbp+var_C9], 0x0
000000000000cd18         jne        loc_ce1b

                     loc_cd1e:
000000000000cd1e         cmp        qword [rbp+var_88], 0x0                     ; CODE XREF=set_regs+2199
000000000000cd26         jne        loc_ca88

                     loc_cd2c:
000000000000cd2c         mov        eax, 0xc                                    ; CODE XREF=set_regs+119, set_regs+2003, set_regs+2010
000000000000cd31         jmp        loc_cca9

                     loc_cd36:
000000000000cd36         mov        rdi, qword [rbp+var_B8]                     ; argument "__size" for method j_malloc, CODE XREF=set_regs+179
000000000000cd3d         call       j_malloc                                    ; malloc
000000000000cd42         test       rax, rax
000000000000cd45         mov        qword [rbp+var_C0], rax
000000000000cd4c         mov        byte [rbp+var_C9], 0x1
000000000000cd53         jne        loc_c667

000000000000cd59         mov        rdi, qword [rbp+var_88]
000000000000cd60         test       rdi, rdi
000000000000cd63         je         loc_cd2c

000000000000cd65         call       free_fail_stack_return.part.24              ; free_fail_stack_return.part.24
000000000000cd6a         jmp        loc_cd2c

                     loc_cd6c:
000000000000cd6c         mov        rdi, qword [rbp+var_C0]                     ; argument "__ptr" for method j_free, CODE XREF=set_regs+1792
000000000000cd73         call       j_free                                      ; free
000000000000cd78         mov        rdi, qword [rbp+var_88]
000000000000cd7f         test       rdi, rdi
000000000000cd82         jne        loc_cca2

000000000000cd88         jmp        loc_cca7

                     loc_cd8d:
000000000000cd8d         mov        qword [rbp+var_88], 0x0                     ; CODE XREF=set_regs+85
000000000000cd98         jmp        loc_c60d

                     loc_cd9d:
000000000000cd9d         lea        rsi, qword [rax+rax*2]                      ; CODE XREF=set_regs+1160
000000000000cda1         mov        rax, qword [rbp+var_88]
000000000000cda8         mov        qword [rbp+var_A0], rdx
000000000000cdaf         shl        rsi, 0x5                                    ; argument "__size" for method j_realloc
000000000000cdb3         mov        rdi, qword [rax+0x10]                       ; argument "__ptr" for method j_realloc
000000000000cdb7         call       j_realloc                                   ; realloc
000000000000cdbc         test       rax, rax
000000000000cdbf         je         loc_ce05

000000000000cdc1         mov        rcx, qword [rbp+var_88]
000000000000cdc8         mov        rdx, qword [rbp+var_A0]
000000000000cdcf         shl        qword [rcx+8], 0x1
000000000000cdd3         mov        qword [rcx+0x10], rax
000000000000cdd7         jmp        loc_ca22

                     loc_cddc:
000000000000cddc         mov        rdi, qword [rbp+var_60]                     ; argument "__ptr" for method j_free, CODE XREF=set_regs+1304
000000000000cde0         call       j_free                                      ; free
000000000000cde5         cmp        byte [rbp+var_C9], 0x0
000000000000cdec         je         loc_cca7

000000000000cdf2         mov        rdi, qword [rbp+var_C0]                     ; argument "__ptr" for method j_free
000000000000cdf9         call       j_free                                      ; free
000000000000cdfe         xor        eax, eax
000000000000ce00         jmp        loc_cca9

                     loc_ce05:
000000000000ce05         mov        rdi, qword [rbp+var_60]                     ; argument "__ptr" for method j_free, CODE XREF=set_regs+2095
000000000000ce09         call       j_free                                      ; free
000000000000ce0e         cmp        byte [rbp+var_C9], 0x0
000000000000ce15         je         loc_ca88

                     loc_ce1b:
000000000000ce1b         mov        rdi, qword [rbp+var_C0]                     ; argument "__ptr" for method j_free, CODE XREF=set_regs+1266, set_regs+1928
000000000000ce22         call       j_free                                      ; free
000000000000ce27         jmp        loc_cd1e

                     loc_ce2c:
000000000000ce2c         mov        rdi, qword [rbp+var_60]                     ; argument "__ptr" for method j_free, CODE XREF=set_regs+1504
000000000000ce30         call       j_free                                      ; free
000000000000ce35         cmp        byte [rbp+var_C9], 0x0
000000000000ce3c         mov        eax, 0x1
000000000000ce41         je         loc_cca9

000000000000ce47         mov        rdi, qword [rbp+var_C0]                     ; argument "__ptr" for method j_free
000000000000ce4e         mov        dword [rbp+var_88], eax
000000000000ce54         call       j_free                                      ; free
000000000000ce59         mov        eax, dword [rbp+var_88]
000000000000ce5f         jmp        loc_cca9

                     loc_ce64:
000000000000ce64         mov        rdi, qword [rbp+var_C0]                     ; argument "__ptr" for method j_free, CODE XREF=set_regs+1370
000000000000ce6b         call       j_free                                      ; free
000000000000ce70         jmp        loc_caf0

                     loc_ce75:
000000000000ce75         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=set_regs+1830
                        ; endp
000000000000ce7a         align      128                                         ; End of unwind block (FDE at 0x17688)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64


                     get_subexp_sub.isra.32:
000000000000ce80         push       r15                                         ; Begin of unwind block (FDE at 0x176b8), CODE XREF=transit_state_bkref.isra.34+710, transit_state_bkref.isra.34+1789
000000000000ce82         push       r14
000000000000ce84         mov        r14, rcx
000000000000ce87         push       r13
000000000000ce89         push       r12
000000000000ce8b         mov        r13, rsi
000000000000ce8e         push       rbp
000000000000ce8f         push       rbx
000000000000ce90         lea        rsi, qword [rdx+0x10]
000000000000ce94         mov        rbp, rdx
000000000000ce97         mov        r9, r8
000000000000ce9a         mov        r12, r8
000000000000ce9d         sub        rsp, 0x20
000000000000cea1         mov        rcx, qword [rdx+8]
000000000000cea5         mov        r8, r14
000000000000cea8         push       0x8
000000000000ceaa         mov        rdx, qword [rdx]
000000000000cead         mov        rbx, rdi
000000000000ceb0         call       check_arrival                               ; check_arrival
000000000000ceb5         test       eax, eax
000000000000ceb7         pop        rdx
000000000000ceb8         pop        rcx
000000000000ceb9         je         loc_ced0

                     loc_cebb:
000000000000cebb         add        rsp, 0x18                                   ; CODE XREF=get_subexp_sub.isra.32+401
000000000000cebf         pop        rbx
000000000000cec0         pop        rbp
000000000000cec1         pop        r12
000000000000cec3         pop        r13
000000000000cec5         pop        r14
000000000000cec7         pop        r15
000000000000cec9         ret
                        ; endp
000000000000ceca         align      16

                     loc_ced0:
000000000000ced0         mov        rax, qword [rbx+0xc8]                       ; CODE XREF=get_subexp_sub.isra.32+57
000000000000ced7         mov        rdx, qword [rbx+0xd0]
000000000000cede         mov        r15, qword [rbp+8]
000000000000cee2         mov        rcx, qword [r13]
000000000000cee6         mov        rdi, qword [rbx+0xd8]
000000000000ceed         cmp        rax, rdx
000000000000cef0         mov        rsi, r15
000000000000cef3         jge        loc_cf90

                     loc_cef9:
000000000000cef9         lea        rdx, qword [rax+rax*4]                      ; CODE XREF=get_subexp_sub.isra.32+379
000000000000cefd         shl        rdx, 0x3
000000000000cf01         test       rax, rax
000000000000cf04         jle        loc_cf11

000000000000cf06         lea        r8, qword [rdi+rdx-0x28]
000000000000cf0b         cmp        r12, qword [r8+8]
000000000000cf0f         je         loc_cf80

                     loc_cf11:
000000000000cf11         add        rdi, rdx                                    ; CODE XREF=get_subexp_sub.isra.32+132, get_subexp_sub.isra.32+261
000000000000cf14         xor        edx, edx
000000000000cf16         cmp        r15, rcx
000000000000cf19         sete       dl
000000000000cf1c         add        rax, 0x1
000000000000cf20         mov        qword [rdi], r14
000000000000cf23         neg        edx
000000000000cf25         mov        qword [rdi+8], r12
000000000000cf29         mov        qword [rdi+0x10], rcx
000000000000cf2d         mov        word [rdi+0x22], dx
000000000000cf31         mov        qword [rdi+0x18], r15
000000000000cf35         mov        qword [rbx+0xc8], rax
000000000000cf3c         mov        byte [rdi+0x20], 0x0
000000000000cf40         mov        rax, r15
000000000000cf43         movsxd     rdx, dword [rbx+0xe0]
000000000000cf4a         sub        rax, rcx
000000000000cf4d         cmp        rdx, rax
000000000000cf50         jge        loc_cf5c

000000000000cf52         sub        r15d, ecx
000000000000cf55         mov        dword [rbx+0xe0], r15d

                     loc_cf5c:
000000000000cf5c         add        rsi, r12                                    ; CODE XREF=get_subexp_sub.isra.32+208
000000000000cf5f         sub        rsi, qword [r13]
000000000000cf63         add        rsp, 0x18
000000000000cf67         mov        rdi, rbx
000000000000cf6a         pop        rbx
000000000000cf6b         pop        rbp
000000000000cf6c         pop        r12
000000000000cf6e         pop        r13
000000000000cf70         pop        r14
000000000000cf72         pop        r15
000000000000cf74         jmp        clean_state_log_if_needed                   ; clean_state_log_if_needed
                        ; endp
000000000000cf79         align      128

                     loc_cf80:
000000000000cf80         mov        byte [r8+0x20], 0x1                         ; CODE XREF=get_subexp_sub.isra.32+143
000000000000cf85         jmp        loc_cf11
000000000000cf87         align      16

                     loc_cf90:
000000000000cf90         lea        rsi, qword [rdx+rdx*4]                      ; CODE XREF=get_subexp_sub.isra.32+115
000000000000cf94         mov        qword [rsp+0x48+var_40], rcx
000000000000cf99         shl        rsi, 0x4                                    ; argument "__size" for method j_realloc
000000000000cf9d         call       j_realloc                                   ; realloc
000000000000cfa2         test       rax, rax
000000000000cfa5         mov        rcx, qword [rsp+0x48+var_40]
000000000000cfaa         je         loc_d000

000000000000cfac         mov        rsi, qword [rbx+0xc8]
000000000000cfb3         mov        rdx, qword [rbx+0xd0]
000000000000cfba         mov        qword [rbx+0xd8], rax
000000000000cfc1         mov        qword [rsp+0x48+var_40], rcx
000000000000cfc6         lea        rsi, qword [rsi+rsi*4]
000000000000cfca         lea        rdx, qword [rdx+rdx*4]
000000000000cfce         lea        rdi, qword [rax+rsi*8]                      ; argument "__s" for method j_memset
000000000000cfd2         shl        rdx, 0x3                                    ; argument "__n" for method j_memset
000000000000cfd6         xor        esi, esi                                    ; argument "__c" for method j_memset
000000000000cfd8         call       j_memset                                    ; memset
000000000000cfdd         shl        qword [rbx+0xd0], 0x1
000000000000cfe4         mov        rax, qword [rbx+0xc8]
000000000000cfeb         mov        rdi, qword [rbx+0xd8]
000000000000cff2         mov        rsi, qword [rbp+8]
000000000000cff6         mov        rcx, qword [rsp+0x48+var_40]
000000000000cffb         jmp        loc_cef9

                     loc_d000:
000000000000d000         mov        rdi, qword [rbx+0xd8]                       ; argument "__ptr" for method j_free, CODE XREF=get_subexp_sub.isra.32+298
000000000000d007         call       j_free                                      ; free
000000000000d00c         mov        eax, 0xc
000000000000d011         jmp        loc_cebb
000000000000d016         align      32                                          ; End of unwind block (FDE at 0x176b8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_58: int8_t, -88
        ;    var_5C: int32_t, -92
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208
        ;    var_D8: int64_t, -216
        ;    var_E0: int64_t, -224
        ;    var_E8: int64_t, -232


                     transit_state_bkref.isra.34:
000000000000d020         push       r15                                         ; Begin of unwind block (FDE at 0x17724), CODE XREF=transit_state_bkref.isra.34+2090, merge_state_with_log+449, re_search_internal+5802
000000000000d022         push       r14
000000000000d024         push       r13
000000000000d026         push       r12
000000000000d028         push       rbp
000000000000d029         push       rbx
000000000000d02a         sub        rsp, 0xb8
000000000000d031         mov        r15, qword [rdi+0x48]
000000000000d035         mov        rax, qword [fs:0x28]
000000000000d03e         mov        qword [rsp+0xe8+var_40], rax
000000000000d046         xor        eax, eax
000000000000d048         cmp        qword [rsi], 0x0
000000000000d04c         mov        rax, qword [rdi+0x98]
000000000000d053         mov        qword [rsp+0xe8+var_A0], rsi
000000000000d058         mov        qword [rsp+0xe8+var_A8], rdx
000000000000d05d         mov        qword [rsp+0xe8+var_B0], rax
000000000000d062         jle        loc_d390

000000000000d068         lea        rax, qword [r15*8]
000000000000d070         mov        r14, rdi
000000000000d073         mov        qword [rsp+0xe8+var_E8], 0x0
000000000000d07b         mov        qword [rsp+0xe8+var_E0], r15
000000000000d080         mov        qword [rsp+0xe8+var_88], rax
000000000000d085         lea        rax, qword [rsp+0xe8+var_58]
000000000000d08d         mov        qword [rsp+0xe8+var_80], rax
000000000000d092         lea        rax, qword [rsp+0xe8+var_5C]
000000000000d09a         mov        qword [rsp+0xe8+var_70], rax
000000000000d09f         jmp        loc_d0e7
000000000000d0a1         align      8

                     loc_d0a8:
000000000000d0a8         test       al, 0x1                                     ; CODE XREF=transit_state_bkref.isra.34+285
000000000000d0aa         je         loc_d0d0

000000000000d0ac         and        edx, 0x8
000000000000d0af         jne        loc_d0d0

                     loc_d0b1:
000000000000d0b1         test       cl, 0x20                                    ; CODE XREF=transit_state_bkref.isra.34+294, transit_state_bkref.isra.34+302
000000000000d0b4         je         loc_d0ba

000000000000d0b6         test       al, 0x2
000000000000d0b8         je         loc_d0d0

                     loc_d0ba:
000000000000d0ba         and        ecx, 0x80                                   ; CODE XREF=transit_state_bkref.isra.34+148
000000000000d0c0         je         loc_d160

000000000000d0c6         test       al, 0x8
000000000000d0c8         jne        loc_d160

000000000000d0ce         nop

                     loc_d0d0:
000000000000d0d0         mov        rdi, qword [rsp+0xe8+var_A0]                ; CODE XREF=transit_state_bkref.isra.34+138, transit_state_bkref.isra.34+143, transit_state_bkref.isra.34+152, transit_state_bkref.isra.34+237, transit_state_bkref.isra.34+308, transit_state_bkref.isra.34+976, transit_state_bkref.isra.34+1335
000000000000d0d5         add        qword [rsp+0xe8+var_E8], 0x1
000000000000d0da         mov        rax, qword [rsp+0xe8+var_E8]
000000000000d0de         cmp        rax, qword [rdi]
000000000000d0e1         jge        loc_d390

                     loc_d0e7:
000000000000d0e7         mov        rax, qword [rsp+0xe8+var_A8]                ; CODE XREF=transit_state_bkref.isra.34+127
000000000000d0ec         mov        rdi, qword [rsp+0xe8+var_E8]
000000000000d0f0         mov        rax, qword [rax]
000000000000d0f3         mov        r13, qword [rax+rdi*8]
000000000000d0f7         mov        rdi, qword [rsp+0xe8+var_B0]
000000000000d0fc         mov        rax, qword [rdi]
000000000000d0ff         mov        rbx, r13
000000000000d102         shl        rbx, 0x4
000000000000d106         add        rax, rbx
000000000000d109         cmp        byte [rax+8], 0x4
000000000000d10d         jne        loc_d0d0

000000000000d10f         mov        ebp, dword [rax+8]
000000000000d112         test       ebp, 0x3ff00
000000000000d118         je         loc_d160

000000000000d11a         mov        edx, dword [r14+0xa0]
000000000000d121         mov        rsi, qword [rsp+0xe8+var_E0]
000000000000d126         mov        rdi, r14
000000000000d129         call       re_string_context_at                        ; re_string_context_at
000000000000d12e         mov        edx, ebp
000000000000d130         shr        edx, 0x8
000000000000d133         mov        ecx, edx
000000000000d135         and        cx, 0x3ff
000000000000d13a         test       dl, 0x4
000000000000d13d         jne        loc_d0a8

000000000000d143         and        edx, 0x8
000000000000d146         je         loc_d0b1

000000000000d14c         test       al, 0x1
000000000000d14e         je         loc_d0b1

000000000000d154         jmp        loc_d0d0
000000000000d159         align      32

                     loc_d160:
000000000000d160         mov        rdi, qword [r14+0xc8]                       ; CODE XREF=transit_state_bkref.isra.34+160, transit_state_bkref.isra.34+168, transit_state_bkref.isra.34+248
000000000000d167         mov        rax, qword [r14+0x98]
000000000000d16e         xor        ecx, ecx
000000000000d170         mov        r10, qword [r14+8]
000000000000d174         mov        r9, qword [rsp+0xe8+var_E0]
000000000000d179         mov        qword [rsp+0xe8+var_78], rdi
000000000000d17e         mov        qword [rsp+0xe8+var_98], rax

                     loc_d183:
000000000000d183         cmp        rcx, rdi                                    ; CODE XREF=transit_state_bkref.isra.34+871
000000000000d186         jge        loc_d1db

000000000000d188         lea        rax, qword [rcx+rdi]
000000000000d18c         mov        r11, qword [r14+0xd8]
000000000000d193         mov        rsi, rax
000000000000d196         shr        rsi, 0x3f
000000000000d19a         add        rsi, rax
000000000000d19d         sar        rsi, 0x1
000000000000d1a0         lea        rax, qword [rsi+rsi*4]
000000000000d1a4         cmp        r9, qword [r11+rax*8+8]
000000000000d1a9         jle        loc_d1d6

000000000000d1ab         jmp        loc_d378

                     loc_d1b0:
000000000000d1b0         lea        rdx, qword [rsi+rcx]                        ; CODE XREF=transit_state_bkref.isra.34+441
000000000000d1b4         mov        rax, rdx
000000000000d1b7         shr        rax, 0x3f
000000000000d1bb         add        rax, rdx
000000000000d1be         sar        rax, 0x1
000000000000d1c1         lea        rdx, qword [rax+rax*4]
000000000000d1c5         mov        r8, rax
000000000000d1c8         cmp        r9, qword [r11+rdx*8+8]
000000000000d1cd         jg         loc_d380

000000000000d1d3         mov        rsi, rax

                     loc_d1d6:
000000000000d1d6         cmp        rsi, rcx                                    ; CODE XREF=transit_state_bkref.isra.34+393
000000000000d1d9         jg         loc_d1b0

                     loc_d1db:
000000000000d1db         cmp        qword [rsp+0xe8+var_78], rcx                ; CODE XREF=transit_state_bkref.isra.34+358
000000000000d1e0         jle        loc_d206

000000000000d1e2         mov        rdx, qword [r14+0xd8]
000000000000d1e9         lea        rax, qword [rcx+rcx*4]
000000000000d1ed         mov        rdi, qword [rsp+0xe8+var_E0]
000000000000d1f2         lea        rax, qword [rdx+rax*8]
000000000000d1f6         cmp        qword [rax+8], rdi
000000000000d1fa         jne        loc_d206

000000000000d1fc         cmp        rcx, 0xffffffffffffffff
000000000000d200         jne        loc_d3d6

                     loc_d206:
000000000000d206         mov        rax, qword [rsp+0xe8+var_98]                ; CODE XREF=transit_state_bkref.isra.34+448, transit_state_bkref.isra.34+474, transit_state_bkref.isra.34+944
000000000000d20b         cmp        qword [r14+0xe8], 0x0
000000000000d213         mov        rdx, qword [rax]
000000000000d216         mov        rax, qword [rdx+rbx]
000000000000d21a         mov        qword [rsp+0xe8+var_90], rax
000000000000d21f         jle        loc_d3db

000000000000d225         mov        qword [rsp+0xe8+var_B8], r13
000000000000d22a         mov        qword [rsp+0xe8+var_C0], 0x0
000000000000d233         mov        r13, r10

                     loc_d236:
000000000000d236         mov        rax, qword [r14+0xf8]                       ; CODE XREF=transit_state_bkref.isra.34+601
000000000000d23d         mov        rbx, qword [rsp+0xe8+var_C0]
000000000000d242         mov        rdi, qword [rsp+0xe8+var_90]
000000000000d247         mov        rbx, qword [rax+rbx*8]
000000000000d24b         mov        rax, qword [rbx+8]
000000000000d24f         shl        rax, 0x4
000000000000d253         cmp        rdi, qword [rdx+rax]
000000000000d257         je         loc_d280

                     loc_d259:
000000000000d259         add        qword [rsp+0xe8+var_C0], 0x1                ; CODE XREF=transit_state_bkref.isra.34+1447, transit_state_bkref.isra.34+1829, transit_state_bkref.isra.34+1925
000000000000d25f         mov        rax, qword [rsp+0xe8+var_C0]
000000000000d264         cmp        rax, qword [r14+0xe8]
000000000000d26b         jge        loc_d8e1

000000000000d271         mov        rax, qword [rsp+0xe8+var_98]
000000000000d276         mov        rdx, qword [rax]
000000000000d279         jmp        loc_d236
000000000000d27b         align      128

                     loc_d280:
000000000000d280         cmp        qword [rbx+0x20], 0x0                       ; CODE XREF=transit_state_bkref.isra.34+567
000000000000d285         mov        r11, qword [rbx]
000000000000d288         jle        loc_d8f2

000000000000d28e         mov        rcx, qword [rsp+0xe8+var_E0]
000000000000d293         mov        r8, r13
000000000000d296         xor        ebp, ebp
000000000000d298         mov        r13, rbx
000000000000d29b         mov        rbx, rcx
000000000000d29e         jmp        loc_d30c

                     loc_d2a0:
000000000000d2a0         lea        rsi, qword [r8+r11]                         ; argument "__s2" for method j_memcmp, CODE XREF=transit_state_bkref.isra.34+779, transit_state_bkref.isra.34+844
000000000000d2a4         lea        rdi, qword [r8+rbx]                         ; argument "__s1" for method j_memcmp
000000000000d2a8         mov        qword [rsp+0xe8+var_C8], r9
000000000000d2ad         mov        qword [rsp+0xe8+var_D0], r11
000000000000d2b2         mov        qword [rsp+0xe8+var_D8], r8
000000000000d2b7         call       j_memcmp                                    ; memcmp
000000000000d2bc         test       eax, eax
000000000000d2be         mov        r8, qword [rsp+0xe8+var_D8]
000000000000d2c3         mov        r11, qword [rsp+0xe8+var_D0]
000000000000d2c8         mov        r9, qword [rsp+0xe8+var_C8]
000000000000d2cd         jne        loc_d798

                     loc_d2d3:
000000000000d2d3         mov        r8, qword [rsp+0xe8+var_E0]                 ; CODE XREF=transit_state_bkref.isra.34+773
000000000000d2d8         mov        rcx, qword [rsp+0xe8+var_B8]
000000000000d2dd         mov        rdx, r9
000000000000d2e0         mov        rsi, r13
000000000000d2e3         mov        rdi, r14
000000000000d2e6         call       get_subexp_sub.isra.32                      ; get_subexp_sub.isra.32
000000000000d2eb         cmp        eax, 0x1
000000000000d2ee         mov        r8, qword [r14+8]
000000000000d2f2         ja         loc_d398

000000000000d2f8         add        rbp, 0x1
000000000000d2fc         cmp        rbp, qword [r13+0x20]
000000000000d300         mov        r11, r15
000000000000d303         mov        rbx, r12
000000000000d306         jge        loc_d5b8

                     loc_d30c:
000000000000d30c         mov        rax, qword [r13+0x28]                       ; CODE XREF=transit_state_bkref.isra.34+638
000000000000d310         mov        r9, qword [rax+rbp*8]
000000000000d314         mov        r15, qword [r9+8]
000000000000d318         mov        rdx, r15
000000000000d31b         sub        rdx, r11
000000000000d31e         test       rdx, rdx
000000000000d321         lea        r12, qword [rdx+rbx]
000000000000d325         jle        loc_d2d3

000000000000d327         cmp        qword [r14+0x30], r12
000000000000d32b         jge        loc_d2a0

000000000000d331         cmp        qword [r14+0x58], r12
000000000000d335         mov        qword [rsp+0xe8+var_D0], rdx
000000000000d33a         mov        qword [rsp+0xe8+var_D8], r9
000000000000d33f         jl         loc_d798

000000000000d345         mov        rsi, r12
000000000000d348         mov        rdi, r14
000000000000d34b         mov        qword [rsp+0xe8+var_C8], r11
000000000000d350         call       clean_state_log_if_needed                   ; clean_state_log_if_needed
000000000000d355         test       eax, eax
000000000000d357         jne        loc_d398

000000000000d359         mov        r8, qword [r14+8]
000000000000d35d         mov        rdx, qword [rsp+0xe8+var_D0]
000000000000d362         mov        r9, qword [rsp+0xe8+var_D8]
000000000000d367         mov        r11, qword [rsp+0xe8+var_C8]
000000000000d36c         jmp        loc_d2a0
000000000000d371         align      8

                     loc_d378:
000000000000d378         mov        r8, rsi                                     ; CODE XREF=transit_state_bkref.isra.34+395
000000000000d37b         mov        rsi, rdi
000000000000d37e         nop

                     loc_d380:
000000000000d380         lea        rcx, qword [r8+1]                           ; CODE XREF=transit_state_bkref.isra.34+429
000000000000d384         mov        rdi, rsi
000000000000d387         jmp        loc_d183
000000000000d38c         align      16

                     loc_d390:
000000000000d390         xor        eax, eax                                    ; CODE XREF=transit_state_bkref.isra.34+66, transit_state_bkref.isra.34+193
000000000000d392         nop        word [rax+rax]

                     loc_d398:
000000000000d398         mov        rbx, qword [rsp+0xe8+var_40]                ; CODE XREF=transit_state_bkref.isra.34+722, transit_state_bkref.isra.34+823, transit_state_bkref.isra.34+1694, transit_state_bkref.isra.34+1801, transit_state_bkref.isra.34+1902, transit_state_bkref.isra.34+2016, transit_state_bkref.isra.34+2070, transit_state_bkref.isra.34+2110, transit_state_bkref.isra.34+2140, transit_state_bkref.isra.34+2169
000000000000d3a0         xor        rbx, qword [fs:0x28]
000000000000d3a9         jne        loc_d8fc

000000000000d3af         add        rsp, 0xb8
000000000000d3b6         pop        rbx
000000000000d3b7         pop        rbp
000000000000d3b8         pop        r12
000000000000d3ba         pop        r13
000000000000d3bc         pop        r14
000000000000d3be         pop        r15
000000000000d3c0         ret
                        ; endp
000000000000d3c1         align      8

                     loc_d3c8:
000000000000d3c8         add        rax, 0x28                                   ; CODE XREF=transit_state_bkref.isra.34+953
000000000000d3cc         cmp        byte [rax-8], 0x0
000000000000d3d0         je         loc_d206

                     loc_d3d6:
000000000000d3d6         cmp        r13, qword [rax]                            ; CODE XREF=transit_state_bkref.isra.34+480
000000000000d3d9         jne        loc_d3c8

                     loc_d3db:
000000000000d3db         mov        rax, qword [rsp+0xe8+var_78]                ; CODE XREF=transit_state_bkref.isra.34+511

                     loc_d3e0:
000000000000d3e0         cmp        qword [rsp+0xe8+var_78], rax                ; CODE XREF=transit_state_bkref.isra.34+2253
000000000000d3e5         mov        dword [rsp+0xe8+var_5C], 0x0
000000000000d3f0         jge        loc_d0d0

000000000000d3f6         lea        rax, qword [r13*8]
000000000000d3fe         mov        r12, qword [rsp+0xe8+var_78]
000000000000d403         mov        rbp, qword [rsp+0xe8+var_B0]
000000000000d408         mov        qword [rsp+0xe8+var_98], rax
000000000000d40d         lea        rax, qword [r13+r13*2]
000000000000d412         lea        r8, qword [r12+r12*4]
000000000000d416         shl        rax, 0x3
000000000000d41a         mov        qword [rsp+0xe8+var_90], rax
000000000000d41f         lea        r15, qword [r8*8]
000000000000d427         jmp        loc_d55d
000000000000d42c         align      16

                     loc_d430:
000000000000d430         mov        rcx, qword [rbp+0x28]                       ; CODE XREF=transit_state_bkref.isra.34+1390
000000000000d434         mov        rdi, qword [rsp+0xe8+var_90]
000000000000d439         mov        rcx, qword [rcx+rdi+0x10]
000000000000d43e         mov        rcx, qword [rcx]
000000000000d441         lea        rcx, qword [rcx+rcx*2]
000000000000d445         lea        rcx, qword [rdx+rcx*8]
000000000000d449         mov        qword [rsp+0xe8+var_D0], rcx

                     loc_d44e:
000000000000d44e         add        rbx, qword [rsp+0xe8+var_E0]                ; CODE XREF=transit_state_bkref.isra.34+1422
000000000000d453         mov        edx, dword [r14+0xa0]
000000000000d45a         mov        rdi, r14
000000000000d45d         sub        rbx, rax
000000000000d460         lea        rsi, qword [rbx-1]
000000000000d464         call       re_string_context_at                        ; re_string_context_at
000000000000d469         mov        rsi, qword [rsp+0xe8+var_88]
000000000000d46e         mov        ecx, eax
000000000000d470         mov        rax, qword [r14+0xb8]
000000000000d477         lea        r10, qword [rbx*8]
000000000000d47f         mov        qword [rsp+0xe8+var_D8], 0x0
000000000000d488         lea        r11, qword [rax+r10]
000000000000d48c         mov        rax, qword [rax+rsi]
000000000000d490         mov        rdx, qword [r11]
000000000000d493         test       rax, rax
000000000000d496         je         loc_d4a1

000000000000d498         mov        rax, qword [rax+0x10]
000000000000d49c         mov        qword [rsp+0xe8+var_D8], rax

                     loc_d4a1:
000000000000d4a1         test       rdx, rdx                                    ; CODE XREF=transit_state_bkref.isra.34+1142
000000000000d4a4         je         loc_d7c0

000000000000d4aa         mov        rsi, qword [rdx+0x50]
000000000000d4ae         mov        rdi, qword [rsp+0xe8+var_80]
000000000000d4b3         mov        rdx, qword [rsp+0xe8+var_D0]
000000000000d4b8         mov        qword [rsp+0xe8+var_B8], r10
000000000000d4bd         mov        dword [rsp+0xe8+var_C0], ecx
000000000000d4c1         call       re_node_set_init_union                      ; re_node_set_init_union
000000000000d4c6         test       eax, eax
000000000000d4c8         mov        dword [rsp+0xe8+var_5C], eax
000000000000d4cf         mov        ecx, dword [rsp+0xe8+var_C0]
000000000000d4d3         mov        r10, qword [rsp+0xe8+var_B8]
000000000000d4d8         jne        loc_d868

000000000000d4de         add        r10, qword [r14+0xb8]
000000000000d4e5         mov        rdx, qword [rsp+0xe8+var_80]
000000000000d4ea         mov        rsi, rbp
000000000000d4ed         mov        rdi, qword [rsp+0xe8+var_70]
000000000000d4f2         mov        qword [rsp+0xe8+var_C0], r10
000000000000d4f7         call       re_acquire_state_context                    ; re_acquire_state_context
000000000000d4fc         mov        r10, qword [rsp+0xe8+var_C0]
000000000000d501         mov        rdi, qword [rsp+0xe8+var_48]                ; argument "__ptr" for method j_free
000000000000d509         mov        qword [r10], rax
000000000000d50c         call       j_free                                      ; free
000000000000d511         mov        rdx, qword [r14+0xb8]
000000000000d518         cmp        qword [rdx+rbx*8], 0x0
000000000000d51d         je         loc_d7f1

                     loc_d523:
000000000000d523         cmp        qword [rsp+0xe8+var_C8], 0x0                ; CODE XREF=transit_state_bkref.isra.34+1995, transit_state_bkref.isra.34+2010
000000000000d529         jne        loc_d548

000000000000d52b         mov        rax, qword [rsp+0xe8+var_88]
000000000000d530         mov        rbx, qword [rsp+0xe8+var_D8]
000000000000d535         mov        rax, qword [rdx+rax]
000000000000d539         cmp        qword [rax+0x10], rbx
000000000000d53d         jg         loc_d808

000000000000d543         nop        dword [rax+rax]

                     loc_d548:
000000000000d548         add        r12, 0x1                                    ; CODE XREF=transit_state_bkref.isra.34+1289, transit_state_bkref.isra.34+1354, transit_state_bkref.isra.34+1365, transit_state_bkref.isra.34+2104
000000000000d54c         add        r15, 0x28
000000000000d550         cmp        r12, qword [r14+0xc8]
000000000000d557         jge        loc_d0d0

                     loc_d55d:
000000000000d55d         mov        rax, qword [r14+0xd8]                       ; CODE XREF=transit_state_bkref.isra.34+1031
000000000000d564         add        rax, r15
000000000000d567         cmp        r13, qword [rax]
000000000000d56a         jne        loc_d548

000000000000d56c         mov        rdi, qword [rsp+0xe8+var_E0]
000000000000d571         cmp        rdi, qword [rax+8]
000000000000d575         jne        loc_d548

000000000000d577         mov        rbx, qword [rax+0x18]
000000000000d57b         mov        rax, qword [rax+0x10]
000000000000d57f         mov        rdx, qword [rbp+0x30]
000000000000d583         mov        rcx, rbx
000000000000d586         sub        rcx, rax
000000000000d589         mov        qword [rsp+0xe8+var_C8], rcx
000000000000d58e         je         loc_d430

000000000000d594         mov        rcx, qword [rbp+0x18]
000000000000d598         mov        rdi, qword [rsp+0xe8+var_98]
000000000000d59d         mov        rcx, qword [rcx+rdi]
000000000000d5a1         lea        rcx, qword [rcx+rcx*2]
000000000000d5a5         lea        rcx, qword [rdx+rcx*8]
000000000000d5a9         mov        qword [rsp+0xe8+var_D0], rcx
000000000000d5ae         jmp        loc_d44e
000000000000d5b3         align      8

                     loc_d5b8:
000000000000d5b8         mov        rbx, r13                                    ; CODE XREF=transit_state_bkref.isra.34+742
000000000000d5bb         mov        r13, r8

                     loc_d5be:
000000000000d5be         lea        r11, qword [r15+1]                          ; CODE XREF=transit_state_bkref.isra.34+1946

                     loc_d5c2:
000000000000d5c2         cmp        qword [rsp+0xe8+var_E0], r11                ; CODE XREF=transit_state_bkref.isra.34+1937, transit_state_bkref.isra.34+2263
000000000000d5c7         jl         loc_d259

000000000000d5cd         mov        rax, r12
000000000000d5d0         lea        r15, qword [r11*8]
000000000000d5d8         mov        r12, rbx
000000000000d5db         mov        rbx, r11
000000000000d5de         mov        r11, r13
000000000000d5e1         mov        r13, rax
000000000000d5e4         nop        dword [rax]

                     loc_d5e8:
000000000000d5e8         mov        rax, rbx                                    ; CODE XREF=transit_state_bkref.isra.34+1820
000000000000d5eb         sub        rax, qword [r12]
000000000000d5ef         test       rax, rax
000000000000d5f2         jle        loc_d615

000000000000d5f4         cmp        qword [r14+0x30], r13
000000000000d5f8         jle        loc_d881

                     loc_d5fe:
000000000000d5fe         movzx      ecx, byte [r11+rbx-1]                       ; CODE XREF=transit_state_bkref.isra.34+2179
000000000000d604         lea        rax, qword [r13+1]
000000000000d608         cmp        byte [r11+r13], cl
000000000000d60c         jne        loc_d742

000000000000d612         mov        r13, rax

                     loc_d615:
000000000000d615         mov        rax, qword [r14+0xb8]                       ; CODE XREF=transit_state_bkref.isra.34+1490
000000000000d61c         mov        rax, qword [rax+r15]
000000000000d620         test       rax, rax
000000000000d623         je         loc_d72f

000000000000d629         mov        rcx, qword [rax+0x10]
000000000000d62d         test       rcx, rcx
000000000000d630         jle        loc_d72f

000000000000d636         mov        rdi, qword [rax+0x18]
000000000000d63a         mov        rax, qword [rsp+0xe8+var_98]
000000000000d63f         xor        edx, edx
000000000000d641         mov        r8, qword [rsp+0xe8+var_90]
000000000000d646         mov        rsi, qword [rax]
000000000000d649         jmp        loc_d65d
000000000000d64b         align      16

                     loc_d650:
000000000000d650         add        rdx, 0x1                                    ; CODE XREF=transit_state_bkref.isra.34+1615, transit_state_bkref.isra.34+1620
000000000000d654         cmp        rcx, rdx
000000000000d657         je         loc_d72f

                     loc_d65d:
000000000000d65d         mov        rbp, qword [rdi+rdx*8]                      ; CODE XREF=transit_state_bkref.isra.34+1577
000000000000d661         mov        rax, rbp
000000000000d664         shl        rax, 0x4
000000000000d668         add        rax, rsi
000000000000d66b         cmp        byte [rax+8], 0x9
000000000000d66f         jne        loc_d650

000000000000d671         cmp        r8, qword [rax]
000000000000d674         jne        loc_d650

000000000000d676         cmp        rbp, 0xffffffffffffffff
000000000000d67a         je         loc_d72f

000000000000d680         mov        rsi, qword [r12+0x10]
000000000000d685         mov        rcx, qword [r12]
000000000000d689         test       rsi, rsi
000000000000d68c         je         loc_d750

                     loc_d692:
000000000000d692         mov        qword [rsp+0xe8+var_D8], r11                ; CODE XREF=transit_state_bkref.isra.34+1891
000000000000d697         mov        rdx, qword [r12+8]
000000000000d69c         sub        rsp, 0x8
000000000000d6a0         push       0x9
000000000000d6a2         mov        r9, rbx
000000000000d6a5         mov        r8, rbp
000000000000d6a8         mov        rdi, r14
000000000000d6ab         call       check_arrival                               ; check_arrival
000000000000d6b0         pop        rdx
000000000000d6b1         cmp        eax, 0x1
000000000000d6b4         pop        rcx
000000000000d6b5         mov        r11, qword [rsp+0xe8+var_D8]
000000000000d6ba         je         loc_d72f

000000000000d6bc         test       eax, eax
000000000000d6be         jne        loc_d398

000000000000d6c4         mov        rax, qword [r12+0x20]
000000000000d6c9         cmp        rax, qword [r12+0x18]
000000000000d6ce         je         loc_d8a8

                     loc_d6d4:
000000000000d6d4         mov        esi, 0x28                                   ; argument "__size" for method j_calloc, CODE XREF=transit_state_bkref.isra.34+2236
000000000000d6d9         mov        edi, 0x1                                    ; argument "__nmemb" for method j_calloc
000000000000d6de         call       j_calloc                                    ; calloc
000000000000d6e3         test       rax, rax
000000000000d6e6         je         loc_d789

000000000000d6ec         mov        rdx, qword [r12+0x20]
000000000000d6f1         mov        rcx, qword [r12+0x28]
000000000000d6f6         mov        rsi, r12
000000000000d6f9         mov        r8, qword [rsp+0xe8+var_E0]
000000000000d6fe         mov        rdi, r14
000000000000d701         mov        qword [rcx+rdx*8], rax
000000000000d705         mov        rcx, qword [rsp+0xe8+var_B8]
000000000000d70a         add        rdx, 0x1
000000000000d70e         mov        qword [rax], rbp
000000000000d711         mov        qword [rax+8], rbx
000000000000d715         mov        qword [r12+0x20], rdx
000000000000d71a         mov        rdx, rax
000000000000d71d         call       get_subexp_sub.isra.32                      ; get_subexp_sub.isra.32
000000000000d722         cmp        eax, 0x1
000000000000d725         mov        r11, qword [r14+8]
000000000000d729         ja         loc_d398

                     loc_d72f:
000000000000d72f         add        rbx, 0x1                                    ; CODE XREF=transit_state_bkref.isra.34+1539, transit_state_bkref.isra.34+1552, transit_state_bkref.isra.34+1591, transit_state_bkref.isra.34+1626, transit_state_bkref.isra.34+1690
000000000000d733         add        r15, 0x8
000000000000d737         cmp        qword [rsp+0xe8+var_E0], rbx
000000000000d73c         jge        loc_d5e8

                     loc_d742:
000000000000d742         mov        r13, r11                                    ; CODE XREF=transit_state_bkref.isra.34+1516, transit_state_bkref.isra.34+2149
000000000000d745         jmp        loc_d259
000000000000d74a         align      16

                     loc_d750:
000000000000d750         mov        rsi, rbx                                    ; CODE XREF=transit_state_bkref.isra.34+1644
000000000000d753         mov        edi, 0x18                                   ; argument "__nmemb" for method j_calloc
000000000000d758         mov        qword [rsp+0xe8+var_D0], r11
000000000000d75d         sub        rsi, rcx
000000000000d760         mov        qword [rsp+0xe8+var_D8], rcx
000000000000d765         add        rsi, 0x1                                    ; argument "__size" for method j_calloc
000000000000d769         call       j_calloc                                    ; calloc
000000000000d76e         test       rax, rax
000000000000d771         mov        rsi, rax
000000000000d774         mov        qword [r12+0x10], rax
000000000000d779         mov        rcx, qword [rsp+0xe8+var_D8]
000000000000d77e         mov        r11, qword [rsp+0xe8+var_D0]
000000000000d783         jne        loc_d692

                     loc_d789:
000000000000d789         mov        eax, 0xc                                    ; CODE XREF=transit_state_bkref.isra.34+1734, transit_state_bkref.isra.34+2215
000000000000d78e         jmp        loc_d398
000000000000d793         align      8

                     loc_d798:
000000000000d798         mov        rcx, rbx                                    ; CODE XREF=transit_state_bkref.isra.34+685, transit_state_bkref.isra.34+799
000000000000d79b         mov        rbx, r13
000000000000d79e         mov        r13, r8
000000000000d7a1         cmp        qword [rbx+0x20], rbp
000000000000d7a5         jg         loc_d259

000000000000d7ab         test       rbp, rbp
000000000000d7ae         mov        r12, rcx
000000000000d7b1         je         loc_d5c2

000000000000d7b7         mov        r15, r11
000000000000d7ba         jmp        loc_d5be
000000000000d7bf         align      64

                     loc_d7c0:
000000000000d7c0         mov        rdx, qword [rsp+0xe8+var_D0]                ; CODE XREF=transit_state_bkref.isra.34+1156
000000000000d7c5         mov        rdi, qword [rsp+0xe8+var_70]
000000000000d7ca         mov        rsi, rbp
000000000000d7cd         mov        qword [rsp+0xe8+var_C0], r11
000000000000d7d2         call       re_acquire_state_context                    ; re_acquire_state_context
000000000000d7d7         mov        r11, qword [rsp+0xe8+var_C0]
000000000000d7dc         mov        rdx, qword [r14+0xb8]
000000000000d7e3         mov        qword [r11], rax
000000000000d7e6         cmp        qword [rdx+rbx*8], 0x0
000000000000d7eb         jne        loc_d523

                     loc_d7f1:
000000000000d7f1         mov        eax, dword [rsp+0xe8+var_5C]                ; CODE XREF=transit_state_bkref.isra.34+1277
000000000000d7f8         test       eax, eax
000000000000d7fa         je         loc_d523

000000000000d800         jmp        loc_d398
000000000000d805         align      8

                     loc_d808:
000000000000d808         mov        rax, qword [rsp+0xe8+var_D0]                ; CODE XREF=transit_state_bkref.isra.34+1309
000000000000d80d         mov        rcx, qword [rsp+0xe8+var_E0]
000000000000d812         mov        rdi, r14
000000000000d815         lea        r8, qword [rax+0x10]
000000000000d819         lea        rbx, qword [rax+8]
000000000000d81d         mov        rdx, r8
000000000000d820         mov        rsi, rbx
000000000000d823         mov        qword [rsp+0xe8+var_D8], r8
000000000000d828         call       check_subexp_matching_top.isra.18           ; check_subexp_matching_top.isra.18
000000000000d82d         test       eax, eax
000000000000d82f         mov        dword [rsp+0xe8+var_5C], eax
000000000000d836         jne        loc_d398

000000000000d83c         mov        r8, qword [rsp+0xe8+var_D8]
000000000000d841         mov        rsi, rbx
000000000000d844         mov        rdi, r14
000000000000d847         mov        rdx, r8
000000000000d84a         call       transit_state_bkref.isra.34                 ; transit_state_bkref.isra.34
000000000000d84f         test       eax, eax
000000000000d851         mov        dword [rsp+0xe8+var_5C], eax
000000000000d858         je         loc_d548

000000000000d85e         jmp        loc_d398
000000000000d863         align      8

                     loc_d868:
000000000000d868         mov        rdi, qword [rsp+0xe8+var_48]                ; argument "__ptr" for method j_free, CODE XREF=transit_state_bkref.isra.34+1208
000000000000d870         call       j_free                                      ; free
000000000000d875         mov        eax, dword [rsp+0xe8+var_5C]
000000000000d87c         jmp        loc_d398

                     loc_d881:
000000000000d881         cmp        qword [r14+0x58], r13                       ; CODE XREF=transit_state_bkref.isra.34+1496
000000000000d885         jle        loc_d742

000000000000d88b         lea        esi, dword [r13+1]
000000000000d88f         mov        rdi, r14
000000000000d892         call       extend_buffers                              ; extend_buffers
000000000000d897         test       eax, eax
000000000000d899         jne        loc_d398

000000000000d89f         mov        r11, qword [r14+8]
000000000000d8a3         jmp        loc_d5fe

                     loc_d8a8:
000000000000d8a8         lea        rdx, qword [rax+rax+1]                      ; CODE XREF=transit_state_bkref.isra.34+1710
000000000000d8ad         mov        rdi, qword [r12+0x28]                       ; argument "__ptr" for method j_realloc
000000000000d8b2         lea        rsi, qword [rdx*8]                          ; argument "__size" for method j_realloc
000000000000d8ba         mov        qword [rsp+0xe8+var_D8], rdx
000000000000d8bf         call       j_realloc                                   ; realloc
000000000000d8c4         test       rax, rax
000000000000d8c7         je         loc_d789

000000000000d8cd         mov        rdx, qword [rsp+0xe8+var_D8]
000000000000d8d2         mov        qword [r12+0x28], rax
000000000000d8d7         mov        qword [r12+0x18], rdx
000000000000d8dc         jmp        loc_d6d4

                     loc_d8e1:
000000000000d8e1         mov        r13, qword [rsp+0xe8+var_B8]                ; CODE XREF=transit_state_bkref.isra.34+587
000000000000d8e6         mov        rax, qword [r14+0xc8]
000000000000d8ed         jmp        loc_d3e0

                     loc_d8f2:
000000000000d8f2         mov        r12, qword [rsp+0xe8+var_E0]                ; CODE XREF=transit_state_bkref.isra.34+616
000000000000d8f7         jmp        loc_d5c2

                     loc_d8fc:
000000000000d8fc         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=transit_state_bkref.isra.34+905
                        ; endp
000000000000d901         align      16                                          ; End of unwind block (FDE at 0x17724)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_58: int8_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104


                     merge_state_with_log:
000000000000d910         push       r15                                         ; Begin of unwind block (FDE at 0x17784), CODE XREF=re_search_internal+2012, re_search_internal+3011
000000000000d912         push       r14
000000000000d914         push       r13
000000000000d916         push       r12
000000000000d918         mov        r13, rdi
000000000000d91b         push       rbp
000000000000d91c         push       rbx
000000000000d91d         mov        rbx, rsi
000000000000d920         sub        rsp, 0x38
000000000000d924         mov        r12, qword [rsi+0x48]
000000000000d928         mov        r14, qword [rsi+0xb8]
000000000000d92f         mov        rax, qword [fs:0x28]
000000000000d938         mov        qword [rsp+0x68+var_40], rax
000000000000d93d         xor        eax, eax
000000000000d93f         mov        r15, qword [rsi+0x98]
000000000000d946         lea        rbp, qword [r12*8]
000000000000d94e         add        r14, rbp
000000000000d951         cmp        qword [rsi+0xc0], r12
000000000000d958         jge        loc_d9a0

000000000000d95a         mov        qword [r14], rdx
000000000000d95d         mov        rbp, rdx
000000000000d960         mov        qword [rsi+0xc0], r12

                     loc_d967:
000000000000d967         cmp        qword [r15+0x98], 0x0                       ; CODE XREF=merge_state_with_log+273, merge_state_with_log+289, merge_state_with_log+365, merge_state_with_log+382
000000000000d96f         jne        loc_da98

                     loc_d975:
000000000000d975         mov        rcx, qword [rsp+0x68+var_40]                ; CODE XREF=merge_state_with_log+434, merge_state_with_log+473, merge_state_with_log+482
000000000000d97a         xor        rcx, qword [fs:0x28]
000000000000d983         mov        rax, rbp
000000000000d986         jne        loc_daf7

000000000000d98c         add        rsp, 0x38
000000000000d990         pop        rbx
000000000000d991         pop        rbp
000000000000d992         pop        r12
000000000000d994         pop        r13
000000000000d996         pop        r14
000000000000d998         pop        r15
000000000000d99a         ret
                        ; endp
000000000000d99b         align      32

                     loc_d9a0:
000000000000d9a0         mov        rax, qword [r14]                            ; CODE XREF=merge_state_with_log+72
000000000000d9a3         test       rax, rax
000000000000d9a6         je         loc_da88

000000000000d9ac         test       rdx, rdx
000000000000d9af         mov        rax, qword [rax+0x50]
000000000000d9b3         je         loc_da40

000000000000d9b9         mov        r14, qword [rdx+0x50]
000000000000d9bd         lea        rdi, qword [rsp+0x68+var_58]
000000000000d9c2         mov        rdx, rax
000000000000d9c5         mov        qword [rsp+0x68+var_68], rdi
000000000000d9c9         mov        rsi, r14
000000000000d9cc         call       re_node_set_init_union                      ; re_node_set_init_union
000000000000d9d1         test       eax, eax
000000000000d9d3         mov        dword [r13], eax
000000000000d9d7         jne        loc_daf0

000000000000d9dd         mov        rax, qword [rbx+0x48]
000000000000d9e1         mov        edx, dword [rbx+0xa0]
000000000000d9e7         mov        rdi, rbx
000000000000d9ea         lea        rsi, qword [rax-1]
000000000000d9ee         call       re_string_context_at                        ; re_string_context_at
000000000000d9f3         mov        r8, qword [rbx+0xb8]
000000000000d9fa         mov        rdx, qword [rsp+0x68+var_68]
000000000000d9fe         mov        ecx, eax
000000000000da00         mov        rsi, r15
000000000000da03         mov        rdi, r13
000000000000da06         add        r8, rbp
000000000000da09         mov        qword [rsp+0x68+var_60], r8
000000000000da0e         call       re_acquire_state_context                    ; re_acquire_state_context
000000000000da13         mov        r8, qword [rsp+0x68+var_60]
000000000000da18         test       r14, r14
000000000000da1b         mov        rbp, rax
000000000000da1e         mov        qword [r8], rax
000000000000da21         je         loc_d967

000000000000da27         mov        rdi, qword [rsp+0x68+var_48]                ; argument "__ptr" for method j_free
000000000000da2c         call       j_free                                      ; free
000000000000da31         jmp        loc_d967
000000000000da36         align      64

                     loc_da40:
000000000000da40         movdqu     xmm0, xmmword [rax]                         ; CODE XREF=merge_state_with_log+163
000000000000da44         mov        rdi, rbx
000000000000da47         mov        edx, dword [rsi+0xa0]
000000000000da4d         lea        rsi, qword [r12-1]
000000000000da52         movaps     xmmword [rsp+0x68+var_58], xmm0
000000000000da57         mov        rax, qword [rax+0x10]
000000000000da5b         mov        qword [rsp+0x68+var_48], rax
000000000000da60         call       re_string_context_at                        ; re_string_context_at
000000000000da65         lea        rdx, qword [rsp+0x68+var_58]
000000000000da6a         mov        ecx, eax
000000000000da6c         mov        rsi, r15
000000000000da6f         mov        rdi, r13
000000000000da72         call       re_acquire_state_context                    ; re_acquire_state_context
000000000000da77         mov        rbp, rax
000000000000da7a         mov        qword [r14], rax
000000000000da7d         jmp        loc_d967
000000000000da82         align      8

                     loc_da88:
000000000000da88         mov        qword [r14], rdx                            ; CODE XREF=merge_state_with_log+150
000000000000da8b         mov        rbp, rdx
000000000000da8e         jmp        loc_d967
000000000000da93         align      8

                     loc_da98:
000000000000da98         test       rbp, rbp                                    ; CODE XREF=merge_state_with_log+95
000000000000da9b         je         loc_daf0

000000000000da9d         lea        r14, qword [rbp+0x10]
000000000000daa1         lea        r15, qword [rbp+0x18]
000000000000daa5         mov        rcx, r12
000000000000daa8         mov        rdi, rbx
000000000000daab         mov        rdx, r15
000000000000daae         mov        rsi, r14
000000000000dab1         call       check_subexp_matching_top.isra.18           ; check_subexp_matching_top.isra.18
000000000000dab6         test       eax, eax
000000000000dab8         mov        dword [r13], eax
000000000000dabc         jne        loc_daf0

000000000000dabe         test       byte [rbp+0x68], 0x40
000000000000dac2         je         loc_d975

000000000000dac8         mov        rdx, r15
000000000000dacb         mov        rsi, r14
000000000000dace         mov        rdi, rbx
000000000000dad1         call       transit_state_bkref.isra.34                 ; transit_state_bkref.isra.34
000000000000dad6         test       eax, eax
000000000000dad8         mov        dword [r13], eax
000000000000dadc         jne        loc_daf0

000000000000dade         mov        rax, qword [rbx+0xb8]
000000000000dae5         mov        rbp, qword [rax+r12*8]
000000000000dae9         jmp        loc_d975
000000000000daee         align      16

                     loc_daf0:
000000000000daf0         xor        ebp, ebp                                    ; CODE XREF=merge_state_with_log+199, merge_state_with_log+395, merge_state_with_log+428, merge_state_with_log+460
000000000000daf2         jmp        loc_d975

                     loc_daf7:
000000000000daf7         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=merge_state_with_log+118
                        ; endp
000000000000dafc         align      256                                         ; End of unwind block (FDE at 0x17784)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_6C: int32_t, -108
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152


                     sift_states_backward:
000000000000db00         push       r15                                         ; Begin of unwind block (FDE at 0x177d0), CODE XREF=re_search_internal+2510, re_search_internal+4661, update_cur_sifted_state+1785
000000000000db02         push       r14
000000000000db04         mov        r14, rdi
000000000000db07         push       r13
000000000000db09         push       r12
000000000000db0b         mov        r13, rsi
000000000000db0e         push       rbp
000000000000db0f         push       rbx
000000000000db10         sub        rsp, 0x68
000000000000db14         mov        r15, qword [rsi+0x18]
000000000000db18         mov        rbx, qword [rsi+0x10]
000000000000db1c         mov        qword [rsp+0x98+var_98], rdi
000000000000db20         mov        edi, 0x8                                    ; argument "__size" for method j_malloc
000000000000db25         mov        qword [rsp+0x98+var_58], 0x1
000000000000db2e         mov        rax, qword [fs:0x28]
000000000000db37         mov        qword [rsp+0x98+var_40], rax
000000000000db3c         xor        eax, eax
000000000000db3e         mov        qword [rsp+0x98+var_50], 0x1
000000000000db47         call       j_malloc                                    ; malloc
000000000000db4c         test       rax, rax
000000000000db4f         mov        qword [rsp+0x98+var_48], rax
000000000000db54         je         loc_de34

000000000000db5a         lea        rcx, qword [rsp+0x98+var_58]
000000000000db5f         mov        qword [rax], rbx
000000000000db62         mov        rdx, r15
000000000000db65         mov        rsi, r13
000000000000db68         mov        rdi, r14
000000000000db6b         mov        qword [rsp+0x98+var_88], rcx
000000000000db70         call       update_cur_sifted_state                     ; update_cur_sifted_state
000000000000db75         test       eax, eax
000000000000db77         jne        loc_de05

000000000000db7d         lea        rax, qword [r15*8]
000000000000db85         test       r15, r15
000000000000db88         mov        dword [rsp+0x98+var_6C], 0x0
000000000000db90         mov        qword [rsp+0x98+var_90], rax
000000000000db95         lea        rax, qword [r13+0x30]
000000000000db99         mov        qword [rsp+0x98+var_60], rax
000000000000db9e         jle        loc_dda7

                     loc_dba4:
000000000000dba4         mov        rdi, qword [r13]                            ; CODE XREF=sift_states_backward+673
000000000000dba8         mov        rax, qword [rsp+0x98+var_90]
000000000000dbad         cmp        qword [rdi+rax], 0x0
000000000000dbb2         je         loc_ddc8

000000000000dbb8         mov        rax, qword [rsp+0x98+var_98]
000000000000dbbc         mov        dword [rsp+0x98+var_6C], 0x0
000000000000dbc4         mov        ecx, dword [rsp+0x98+var_6C]
000000000000dbc8         cmp        dword [rax+0xe0], ecx
000000000000dbce         jl         loc_dde1

                     loc_dbd4:
000000000000dbd4         mov        rbx, qword [rsp+0x98+var_98]                ; CODE XREF=sift_states_backward+731
000000000000dbd8         mov        rdi, qword [rsp+0x98+var_90]
000000000000dbdd         sub        r15, 0x1
000000000000dbe1         mov        qword [rsp+0x98+var_50], 0x0
000000000000dbea         mov        rax, qword [rbx+0xb8]
000000000000dbf1         mov        r12, qword [rax+rdi-8]
000000000000dbf6         test       r12, r12
000000000000dbf9         je         loc_dd80

000000000000dbff         cmp        qword [r12+0x28], 0x0
000000000000dc05         mov        r14, qword [rbx+0x98]
000000000000dc0c         jle        loc_dd80

000000000000dc12         xor        ebx, ebx
000000000000dc14         jmp        loc_dcbb
000000000000dc19         align      32

                     loc_dc20:
000000000000dc20         mov        rdi, qword [rsp+0x98+var_98]                ; CODE XREF=sift_states_backward+469, sift_states_backward+625, sift_states_backward+700
000000000000dc24         mov        rdx, r15
000000000000dc27         call       check_node_accept                           ; check_node_accept
000000000000dc2c         test       al, al
000000000000dc2e         je         loc_dcac

000000000000dc30         mov        rax, qword [r13]
000000000000dc34         mov        rcx, qword [rsp+0x98+var_90]
000000000000dc39         mov        rax, qword [rax+rcx]
000000000000dc3d         test       rax, rax
000000000000dc40         je         loc_dcac

000000000000dc42         mov        rdx, qword [r14+0x18]
000000000000dc46         mov        rdi, qword [rax+0x10]
000000000000dc4a         lea        rsi, qword [rax+0x18]
000000000000dc4e         mov        rdx, qword [rdx+rbp*8]
000000000000dc52         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000dc57         test       rax, rax
000000000000dc5a         je         loc_dcac

000000000000dc5c         mov        r10d, 0x1

                     loc_dc62:
000000000000dc62         cmp        qword [r13+0x28], 0x0                       ; CODE XREF=sift_states_backward+555, sift_states_backward+608, loc_ddb0
000000000000dc67         je         loc_dc97

000000000000dc69         mov        rax, qword [r14+0x18]
000000000000dc6d         sub        rsp, 0x8
000000000000dc71         lea        rsi, qword [r13+0x28]
000000000000dc75         lea        r8, qword [r10+r15]
000000000000dc79         mov        r9, rbp
000000000000dc7c         mov        rcx, qword [rax+rbp*8]
000000000000dc80         push       r15
000000000000dc82         mov        rdx, qword [rsp+0xa8+var_60]
000000000000dc87         mov        rdi, qword [rsp+0xa8+var_98]
000000000000dc8c         call       check_dst_limits.isra.13                    ; check_dst_limits.isra.13
000000000000dc91         test       al, al
000000000000dc93         pop        rdx
000000000000dc94         pop        rcx
000000000000dc95         jne        loc_dcac

                     loc_dc97:
000000000000dc97         mov        rdi, qword [rsp+0x98+var_88]                ; CODE XREF=sift_states_backward+359
000000000000dc9c         mov        rsi, rbp
000000000000dc9f         call       re_node_set_insert                          ; re_node_set_insert
000000000000dca4         test       al, al
000000000000dca6         je         loc_de00

                     loc_dcac:
000000000000dcac         add        rbx, 0x1                                    ; CODE XREF=sift_states_backward+302, sift_states_backward+320, sift_states_backward+346, sift_states_backward+405
000000000000dcb0         cmp        rbx, qword [r12+0x28]
000000000000dcb5         jge        loc_dd80

                     loc_dcbb:
000000000000dcbb         mov        rax, qword [r12+0x30]                       ; CODE XREF=sift_states_backward+276
000000000000dcc0         mov        rsi, qword [r14]
000000000000dcc3         mov        rbp, qword [rax+rbx*8]
000000000000dcc7         mov        r9, rbp
000000000000dcca         shl        r9, 0x4
000000000000dcce         add        rsi, r9
000000000000dcd1         test       byte [rsi+0xa], 0x10
000000000000dcd5         je         loc_dc20

000000000000dcdb         mov        rcx, qword [rsp+0x98+var_98]
000000000000dcdf         mov        rax, qword [r13+0x18]
000000000000dce3         mov        r8, r15
000000000000dce6         mov        rdx, rbp
000000000000dce9         mov        qword [rsp+0x98+var_80], r9
000000000000dcee         mov        r11, qword [rcx+0x98]
000000000000dcf5         mov        qword [rsp+0x98+var_78], rax
000000000000dcfa         mov        rdi, qword [r11]
000000000000dcfd         lea        rsi, qword [r11+0xd8]
000000000000dd04         mov        qword [rsp+0x98+var_68], r11
000000000000dd09         call       check_node_accept_bytes.isra.31             ; check_node_accept_bytes.isra.31
000000000000dd0e         movsxd     r10, eax
000000000000dd11         mov        r9, qword [rsp+0x98+var_80]
000000000000dd16         cmp        r10d, 0x0
000000000000dd1a         jle        loc_ddb0

000000000000dd20         movsxd     rax, r10d
000000000000dd23         add        rax, r15
000000000000dd26         cmp        qword [rsp+0x98+var_78], rax
000000000000dd2b         jl         loc_dc62

000000000000dd31         mov        rdx, qword [r13]
000000000000dd35         mov        r11, qword [rsp+0x98+var_68]
000000000000dd3a         mov        rax, qword [rdx+rax*8]
000000000000dd3e         test       rax, rax
000000000000dd41         je         loc_ddb6

000000000000dd43         mov        rdx, qword [r11+0x18]
000000000000dd47         mov        rdi, qword [rax+0x10]
000000000000dd4b         lea        rsi, qword [rax+0x18]
000000000000dd4f         mov        qword [rsp+0x98+var_80], r9
000000000000dd54         mov        rdx, qword [rdx+rbp*8]
000000000000dd58         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000dd5d         test       rax, rax
000000000000dd60         jne        loc_dc62

000000000000dd66         mov        r9, qword [rsp+0x98+var_80]
000000000000dd6b         mov        rsi, qword [r14]
000000000000dd6e         add        rsi, r9
000000000000dd71         jmp        loc_dc20
000000000000dd76         align      128

                     loc_dd80:
000000000000dd80         mov        rcx, qword [rsp+0x98+var_88]                ; CODE XREF=sift_states_backward+249, sift_states_backward+268, sift_states_backward+437
000000000000dd85         mov        rdi, qword [rsp+0x98+var_98]
000000000000dd89         mov        rdx, r15
000000000000dd8c         mov        rsi, r13
000000000000dd8f         call       update_cur_sifted_state                     ; update_cur_sifted_state
000000000000dd94         test       eax, eax
000000000000dd96         jne        loc_de05

000000000000dd98         sub        qword [rsp+0x98+var_90], 0x8
000000000000dd9e         test       r15, r15
000000000000dda1         jne        loc_dba4

                     loc_dda7:
000000000000dda7         xor        eax, eax                                    ; CODE XREF=sift_states_backward+158
000000000000dda9         jmp        loc_de05
000000000000ddab         align      16

                     loc_ddb0:
000000000000ddb0         jne        loc_dc62                                    ; CODE XREF=sift_states_backward+538

                     loc_ddb6:
000000000000ddb6         mov        rsi, qword [r14]                            ; CODE XREF=sift_states_backward+577
000000000000ddb9         add        rsi, r9
000000000000ddbc         jmp        loc_dc20
000000000000ddc1         align      8

                     loc_ddc8:
000000000000ddc8         mov        rax, qword [rsp+0x98+var_98]                ; CODE XREF=sift_states_backward+178
000000000000ddcc         add        dword [rsp+0x98+var_6C], 0x1
000000000000ddd1         mov        ecx, dword [rsp+0x98+var_6C]
000000000000ddd5         cmp        dword [rax+0xe0], ecx
000000000000dddb         jge        loc_dbd4

                     loc_dde1:
000000000000dde1         mov        rdx, qword [rsp+0x98+var_90]                ; argument "__n" for method j_memset, CODE XREF=sift_states_backward+206
000000000000dde6         xor        esi, esi                                    ; argument "__c" for method j_memset
000000000000dde8         call       j_memset                                    ; memset
000000000000dded         mov        rdi, qword [rsp+0x98+var_48]                ; argument "__ptr" for method j_free
000000000000ddf2         call       j_free                                      ; free
000000000000ddf7         xor        eax, eax
000000000000ddf9         jmp        loc_de15
000000000000ddfb         align      512

                     loc_de00:
000000000000de00         mov        eax, 0xc                                    ; CODE XREF=sift_states_backward+422

                     loc_de05:
000000000000de05         mov        rdi, qword [rsp+0x98+var_48]                ; argument "__ptr" for method j_free, CODE XREF=sift_states_backward+119, sift_states_backward+662, sift_states_backward+681
000000000000de0a         mov        dword [rsp+0x98+var_98], eax
000000000000de0d         call       j_free                                      ; free
000000000000de12         mov        eax, dword [rsp+0x98+var_98]

                     loc_de15:
000000000000de15         mov        rdx, qword [rsp+0x98+var_40]                ; CODE XREF=sift_states_backward+761, sift_states_backward+825
000000000000de1a         xor        rdx, qword [fs:0x28]
000000000000de23         jne        loc_de3b

000000000000de25         add        rsp, 0x68
000000000000de29         pop        rbx
000000000000de2a         pop        rbp
000000000000de2b         pop        r12
000000000000de2d         pop        r13
000000000000de2f         pop        r14
000000000000de31         pop        r15
000000000000de33         ret
                        ; endp

                     loc_de34:
000000000000de34         mov        eax, 0xc                                    ; CODE XREF=sift_states_backward+84
000000000000de39         jmp        loc_de15

                     loc_de3b:
000000000000de3b         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=sift_states_backward+803
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_0: int, 8
        ;    var_40: int64_t, -64
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_68: int32_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int32_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int32_t, -184
        ;    var_BA: int8_t, -186
        ;    var_BB: int8_t, -187
        ;    var_BC: int8_t, -188
        ;    var_BD: int8_t, -189
        ;    var_BE: int8_t, -190
        ;    var_BF: int8_t, -191
        ;    var_C0: int8_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208
        ;    var_D8: int32_t, -216
        ;    var_E0: int64_t, -224
        ;    var_E8: int64_t, -232
        ;    var_F0: int64_t, -240
        ;    var_F8: int64_t, -248
        ;    var_100: int64_t, -256
        ;    var_108: int64_t, -264
        ;    var_110: int64_t, -272
        ;    var_118: int64_t, -280
        ;    var_120: int64_t, -288
        ;    var_130: int64_t, -304
        ;    var_138: int64_t, -312
        ;    var_140: int64_t, -320
        ;    var_148: int64_t, -328
        ;    var_158: int64_t, -344
        ;    var_168: -360
        ;    var_170: int64_t, -368
        ;    var_178: int64_t, -376
        ;    var_180: int64_t, -384
        ;    var_188: int64_t, -392
        ;    var_190: int64_t, -400
        ;    var_194: int32_t, -404
        ;    var_198: int32_t, -408
        ;    var_199: int8_t, -409
        ;    var_19A: int8_t, -410
        ;    var_1A0: int32_t, -416
        ;    var_1A8: int64_t, -424
        ;    var_1B0: int64_t, -432
        ;    var_1B8: int64_t, -440
        ;    var_1BC: int32_t, -444
        ;    var_1C0: int32_t, -448
        ;    var_1C8: int64_t, -456
        ;    var_1D0: int64_t, -464
        ;    var_1D8: int64_t, -472
        ;    var_1E0: int64_t, -480
        ;    var_1E8: int64_t, -488
        ;    var_1F0: int64_t, -496
        ;    var_1F8: int64_t, -504
        ;    var_200: int64_t, -512
        ;    var_208: int64_t, -520
        ;    var_20C: int32_t, -524
        ;    var_210: int32_t, -528
        ;    var_218: int64_t, -536
        ;    var_220: int64_t, -544
        ;    var_228: int64_t, -552
        ;    var_230: int64_t, -560
        ;    var_238: int64_t, -568
        ;    var_240: int64_t, -576
        ;    var_248: int64_t, -584
        ;    var_250: int64_t, -592
        ;    var_258: int64_t, -600
        ;    var_260: int64_t, -608
        ;    var_268: int64_t, -616


                     re_search_internal:
000000000000de40         push       r15                                         ; End of unwind block (FDE at 0x177d0), Begin of unwind block (FDE at 0x17830), CODE XREF=re_search_stub+266, rpl_regexec+88
000000000000de42         push       r14
000000000000de44         push       r13
000000000000de46         push       r12
000000000000de48         mov        r13, r9
000000000000de4b         push       rbp
000000000000de4c         push       rbx
000000000000de4d         mov        rbp, rcx
000000000000de50         mov        ecx, 0x20
000000000000de55         mov        r12, r8
000000000000de58         sub        rsp, aLib64ldlinuxx8                        ; "/lib64/ld-linux-x86-64.so.2"
000000000000de5f         mov        rbx, qword [rdi]
000000000000de62         mov        rax, qword [rsp+0x268+arg_8]
000000000000de6a         mov        qword [rsp+0x268+var_220], rdi
000000000000de6f         mov        qword [rsp+0x268+var_1F0], rsi
000000000000de74         mov        rsi, rdi
000000000000de77         lea        rdi, qword [rsp+0x268+var_148]
000000000000de7f         mov        qword [rsp+0x268+var_1E0], rdx
000000000000de87         mov        qword [rsp+0x268+var_230], rbx
000000000000de8c         mov        qword [rsp+0x268+var_1B0], rax
000000000000de94         mov        qword [rsp+0x268+var_268], rdi
000000000000de98         mov        rax, qword [fs:0x28]
000000000000dea1         mov        qword [rsp+0x268+var_40], rax
000000000000dea9         xor        eax, eax
000000000000deab         rep stosq  qword [rdi], rax
000000000000deae         mov        rdi, qword [rsi+0x20]
000000000000deb2         mov        qword [rsp+0x268+var_B0], rbx
000000000000deba         test       rdi, rdi
000000000000debd         mov        qword [rsp+0x268+var_200], rdi
000000000000dec2         je         loc_dee6

000000000000dec4         movzx      edx, byte [rsi+0x38]
000000000000dec8         test       dl, 0x8
000000000000decb         je         loc_e360

000000000000ded1         cmp        rbp, r8
000000000000ded4         je         loc_e360

000000000000deda         and        edx, 0x1
000000000000dedd         cmove      rax, rdi
000000000000dee1         mov        qword [rsp+0x268+var_200], rax

                     loc_dee6:
000000000000dee6         mov        rax, qword [rsp+0x268+var_220]              ; CODE XREF=re_search_internal+130, re_search_internal+1321
000000000000deeb         mov        qword [rsp+0x268+var_1D0], 0x0
000000000000def7         mov        rax, qword [rax+0x30]
000000000000defb         cmp        rax, qword [rsp+0x268+arg_0]
000000000000df03         jae        loc_df24

000000000000df05         mov        rcx, qword [rsp+0x268+arg_0]
000000000000df0d         lea        rdx, qword [rcx-1]
000000000000df11         sub        rdx, rax
000000000000df14         sub        qword [rsp+0x268+arg_0], rdx
000000000000df1c         mov        qword [rsp+0x268+var_1D0], rdx

                     loc_df24:
000000000000df24         mov        rsi, qword [rsp+0x268+var_220]              ; CODE XREF=re_search_internal+195
000000000000df29         cmp        qword [rsi+0x10], 0x0
000000000000df2e         je         loc_edc0

000000000000df34         mov        rdi, qword [rsp+0x268+var_230]
000000000000df39         mov        rax, qword [rdi+0x48]
000000000000df3d         test       rax, rax
000000000000df40         je         loc_edc0

000000000000df46         mov        rdx, qword [rdi+0x50]
000000000000df4a         test       rdx, rdx
000000000000df4d         je         loc_edc0

000000000000df53         mov        rcx, qword [rdi+0x58]
000000000000df57         test       rcx, rcx
000000000000df5a         je         loc_edc0

000000000000df60         cmp        qword [rdi+0x60], 0x0
000000000000df65         je         loc_edc0

000000000000df6b         cmp        qword [rax+0x10], 0x0
000000000000df70         jne        loc_dfa8

000000000000df72         cmp        qword [rdx+0x10], 0x0
000000000000df77         jne        loc_dfa8

000000000000df79         cmp        qword [rcx+0x10], 0x0
000000000000df7e         je         loc_df86

000000000000df80         cmp        byte [rsi+0x38], 0x0
000000000000df84         js         loc_dfa8

                     loc_df86:
000000000000df86         test       rbp, rbp                                    ; CODE XREF=re_search_internal+318
000000000000df89         je         loc_df9c

000000000000df8b         test       r12, r12
000000000000df8e         mov        dword [rsp+0x268+var_20C], 0x1
000000000000df96         jne        loc_e9b9

                     loc_df9c:
000000000000df9c         xor        r12d, r12d                                  ; CODE XREF=re_search_internal+329
000000000000df9f         xor        ebp, ebp
000000000000dfa1         nop        dword [rax]

                     loc_dfa8:
000000000000dfa8         cmp        qword [rsp+0x268+arg_0], 0x0                ; CODE XREF=re_search_internal+304, re_search_internal+311, re_search_internal+324
000000000000dfb1         mov        dword [rsp+0x268+var_210], 0x1
000000000000dfb9         je         loc_e340

                     loc_dfbf:
000000000000dfbf         mov        r11, qword [rsp+0x268+var_230]              ; CODE XREF=re_search_internal+1303
000000000000dfc4         mov        rax, qword [rsp+0x268+var_220]
000000000000dfc9         mov        rdi, qword [rsp+0x268+var_1E0]
000000000000dfd1         mov        rsi, qword [r11+0x10]
000000000000dfd5         mov        rbx, qword [rax+0x28]
000000000000dfd9         mov        edx, dword [r11+0xb4]
000000000000dfe0         mov        rax, qword [rax+0x18]
000000000000dfe4         mov        qword [rsp+0x268+var_F0], rdi
000000000000dfec         mov        qword [rsp+0x268+var_F8], rdi
000000000000dff4         mov        qword [rsp+0x268+var_260], rsi
000000000000dff9         lea        rsi, qword [rsi+1]
000000000000dffd         mov        qword [rsp+0x268+var_1B8], rbx
000000000000e005         movsxd     rcx, edx
000000000000e008         shr        rax, 0x16
000000000000e00c         mov        qword [rsp+0x268+var_D0], rbx
000000000000e014         and        eax, 0x1
000000000000e017         cmp        rsi, rcx
000000000000e01a         mov        dword [rsp+0x268+var_B8], edx
000000000000e021         cmovl      rsi, rcx
000000000000e025         lea        rcx, qword [rdi+1]
000000000000e029         mov        byte [rsp+0x268+var_C0], al
000000000000e030         mov        qword [rsp+0x268+var_E0], rdi
000000000000e038         mov        qword [rsp+0x268+var_E8], rdi
000000000000e040         cmp        rsi, rcx
000000000000e043         mov        rdi, qword [rsp+0x268+var_268]
000000000000e047         cmovg      rsi, rcx
000000000000e04b         test       rbx, rbx
000000000000e04e         mov        rcx, qword [rsp+0x268+var_1F0]
000000000000e053         setne      bl
000000000000e056         or         eax, ebx
000000000000e058         mov        byte [rsp+0x268+var_BD], al
000000000000e05f         movzx      eax, byte [r11+0xb0]
000000000000e067         mov        qword [rsp+0x268+var_148], rcx
000000000000e06f         mov        edx, eax
000000000000e071         shr        al, 0x3
000000000000e074         shr        dl, 0x2
000000000000e077         and        eax, 0x1
000000000000e07a         and        edx, 0x1
000000000000e07d         mov        byte [rsp+0x268+var_BE], al
000000000000e084         mov        byte [rsp+0x268+var_BF], dl
000000000000e08b         call       re_string_realloc_buffers                   ; re_string_realloc_buffers
000000000000e090         test       eax, eax
000000000000e092         mov        dword [rsp+0x268+var_20C], eax
000000000000e096         jne        loc_e990

000000000000e09c         mov        rdi, qword [rsp+0x268+var_230]
000000000000e0a1         lea        rax, qword [rdi+0xb8]
000000000000e0a8         mov        qword [rsp+0x268+var_C8], rax
000000000000e0b0         movzx      eax, byte [rdi+0xb0]
000000000000e0b7         mov        byte [rsp+0x268+var_260], al
000000000000e0bb         shr        al, 0x4
000000000000e0be         and        eax, 0x1
000000000000e0c1         cmp        byte [rsp+0x268+var_BD], 0x0
000000000000e0c9         mov        byte [rsp+0x268+var_BA], al
000000000000e0d0         jne        loc_e0f5

000000000000e0d2         mov        rsi, qword [rsp+0x268+var_230]
000000000000e0d7         mov        rax, qword [rsp+0x268+var_1F0]
000000000000e0dc         cmp        dword [rsi+0xb4], 0x1
000000000000e0e3         mov        qword [rsp+0x268+var_140], rax
000000000000e0eb         mov        rax, qword [rsp+0x268+var_1E0]
000000000000e0f3         jle        loc_e0f7

                     loc_e0f5:
000000000000e0f5         xor        eax, eax                                    ; CODE XREF=re_search_internal+656

                     loc_e0f7:
000000000000e0f7         mov        qword [rsp+0x268+var_118], rax              ; CODE XREF=re_search_internal+691
000000000000e0ff         mov        qword [rsp+0x268+var_110], rax
000000000000e107         mov        rax, qword [rsp+0x268+var_220]
000000000000e10c         mov        qword [rsp+0x268+var_E0], r13
000000000000e114         mov        qword [rsp+0x268+var_E8], r13
000000000000e11c         movzx      eax, byte [rax+0x38]
000000000000e120         mov        byte [rsp+0x268+var_260], al
000000000000e124         shr        al, 0x7
000000000000e127         mov        byte [rsp+0x268+var_BB], al
000000000000e12e         mov        rax, qword [rsp+0x268+var_230]
000000000000e133         mov        r14, qword [rax+0x98]
000000000000e13a         mov        eax, dword [rsp+0x268+arg_10]
000000000000e141         mov        qword [rsp+0x268+var_A0], 0xffffffffffffffff
000000000000e14d         lea        r13, qword [r14+r14]
000000000000e151         mov        dword [rsp+0x268+var_A8], eax
000000000000e158         test       r13, r13
000000000000e15b         jle        loc_e1af

000000000000e15d         movabs     rax, 0x666666666666666
000000000000e167         cmp        r13, rax
000000000000e16a         jg         loc_eeb0

000000000000e170         lea        rdi, qword [r13+r14*8]
000000000000e175         shl        rdi, 0x3                                    ; argument "__size" for method j_malloc
000000000000e179         call       j_malloc                                    ; malloc
000000000000e17e         mov        rdi, r14
000000000000e181         mov        r15, rax
000000000000e184         mov        qword [rsp+0x268+var_70], rax
000000000000e18c         shl        rdi, 0x4                                    ; argument "__size" for method j_malloc
000000000000e190         call       j_malloc                                    ; malloc
000000000000e195         test       rax, rax
000000000000e198         mov        qword [rsp+0x268+var_50], rax
000000000000e1a0         je         loc_eeb0

000000000000e1a6         test       r15, r15
000000000000e1a9         je         loc_eeb0

                     loc_e1af:
000000000000e1af         cmp        qword [rsp+0x268+arg_0], 0x1                ; CODE XREF=re_search_internal+795
000000000000e1b8         mov        qword [rsp+0x268+var_78], r13
000000000000e1c0         mov        dword [rsp+0x268+var_68], 0x1
000000000000e1cb         mov        qword [rsp+0x268+var_58], r13
000000000000e1d3         jbe        loc_f2f8

                     loc_e1d9:
000000000000e1d9         mov        rax, qword [rsp+0x268+var_108]              ; CODE XREF=re_search_internal+5316
000000000000e1e1         movabs     rdx, 0x1ffffffffffffffe
000000000000e1eb         cmp        rax, rdx
000000000000e1ee         ja         loc_eeb0

000000000000e1f4         lea        rdi, qword [0x8+rax*8]                      ; argument "__size" for method j_malloc
000000000000e1fc         call       j_malloc                                    ; malloc
000000000000e201         test       rax, rax
000000000000e204         mov        rdi, rax
000000000000e207         mov        qword [rsp+0x268+var_90], rax
000000000000e20f         je         loc_ef00

                     loc_e215:
000000000000e215         mov        eax, dword [rsp+0x268+arg_10]               ; CODE XREF=re_search_internal+5334
000000000000e21c         mov        qword [rsp+0x268+var_190], rbp
000000000000e224         and        eax, 0x1
000000000000e227         cmp        eax, 0x1
000000000000e22a         sbb        eax, eax
000000000000e22c         and        eax, 0x2
000000000000e22f         add        eax, 0x4
000000000000e232         mov        dword [rsp+0x268+var_D8], eax
000000000000e239         xor        eax, eax
000000000000e23b         cmp        rbp, r12
000000000000e23e         setle      al
000000000000e241         lea        eax, dword [rax+rax-1]
000000000000e245         mov        dword [rsp+0x268+var_1BC], eax
000000000000e24c         mov        rax, r12
000000000000e24f         cmovle     rax, rbp
000000000000e253         mov        qword [rsp+0x268+var_1D8], rax
000000000000e25b         mov        rax, r12
000000000000e25e         cmovge     rax, rbp
000000000000e262         cmp        qword [rsp+0x268+var_200], 0x0
000000000000e268         mov        qword [rsp+0x268+var_1F8], rax
000000000000e26d         mov        rax, qword [rsp+0x268+var_230]
000000000000e272         mov        esi, dword [rax+0xb4]
000000000000e278         mov        eax, 0x8
000000000000e27d         mov        dword [rsp+0x268+var_1A0], esi
000000000000e284         je         loc_e2bf

000000000000e286         cmp        esi, 0x1
000000000000e289         mov        ecx, 0x4
000000000000e28e         je         loc_e2ae

000000000000e290         mov        rax, qword [rsp+0x268+var_220]
000000000000e295         test       byte [rax+0x1a], 0x40
000000000000e299         jne        loc_f01e

000000000000e29f         cmp        qword [rsp+0x268+var_1B8], 0x0
000000000000e2a8         jne        loc_f01e

                     loc_e2ae:
000000000000e2ae         xor        edx, edx                                    ; CODE XREF=re_search_internal+1102, re_search_internal+4576
000000000000e2b0         cmp        rbp, r12
000000000000e2b3         movzx      eax, bl
000000000000e2b6         setle      dl
000000000000e2b9         or         eax, ecx
000000000000e2bb         add        edx, edx
000000000000e2bd         or         eax, edx

                     loc_e2bf:
000000000000e2bf         cmp        rbp, qword [rsp+0x268+var_1F8]              ; CODE XREF=re_search_internal+1092
000000000000e2c4         setg       cl
000000000000e2c7         cmp        rbp, qword [rsp+0x268+var_1D8]
000000000000e2cf         setl       dl
000000000000e2d2         or         cl, dl
000000000000e2d4         jne        loc_eda9

000000000000e2da         lea        rcx, qword [rsp+0x268+var_190]
000000000000e2e2         cmp        rbp, r12
000000000000e2e5         mov        edx, 0x0
000000000000e2ea         cmovle     rdx, rcx
000000000000e2ee         test       rdx, rdx
000000000000e2f1         mov        qword [rsp+0x268+var_1A8], rdx
000000000000e2f9         setne      byte [rsp+0x268+var_199]
000000000000e301         sub        eax, 0x4
000000000000e304         mov        dword [rsp+0x268+var_1C0], eax
000000000000e30b         lea        rax, qword [rsp+0x268+var_198]
000000000000e313         mov        qword [rsp+0x268+var_240], rax

                     loc_e318:
000000000000e318         mov        eax, dword [rsp+0x268+var_1C0]              ; CODE XREF=re_search_internal+3939
000000000000e31f         cmp        eax, 0x4
000000000000e322         ja         loc_ef0d

000000000000e328         lea        rcx, qword [switch_table_15060]             ; switch_table_15060
000000000000e32f         movsxd     rax, dword [rcx+rax*4]
000000000000e333         add        rax, rcx
000000000000e336         jmp        rax                                         ; switch statement using table at 0x15060, with 5 cases, 0xe36e,0xe418,0xe892,0xe904
000000000000e338         align      64

                     loc_e340:
000000000000e340         mov        rax, qword [rsp+0x268+var_230]              ; CODE XREF=re_search_internal+377
000000000000e345         cmp        qword [rax+0x98], 0x0
000000000000e34d         setne      al
000000000000e350         movzx      eax, al
000000000000e353         mov        dword [rsp+0x268+var_210], eax
000000000000e357         jmp        loc_dfbf
000000000000e35c         align      32

                     loc_e360:
000000000000e360         mov        qword [rsp+0x268+var_200], 0x0              ; CODE XREF=re_search_internal+139, re_search_internal+148
000000000000e369         jmp        loc_dee6

                     loc_e36e:
000000000000e36e         cmp        qword [rsp+0x268+var_1F8], rbp              ; case 2, CODE XREF=re_search_internal+1270
000000000000e373         jle        loc_e3cf

000000000000e375         mov        rax, qword [rsp+0x268+var_1F0]
000000000000e37a         mov        rdi, qword [rsp+0x268+var_200]
000000000000e37f         movzx      edx, byte [rax+rbp]
000000000000e383         lea        rax, qword [rbp+1]
000000000000e387         cmp        byte [rdi+rdx], 0x0
000000000000e38b         jne        loc_e418

000000000000e391         mov        rsi, qword [rsp+0x268+var_200]
000000000000e396         mov        rcx, qword [rsp+0x268+var_1F8]
000000000000e39b         mov        rdi, qword [rsp+0x268+var_1F0]
000000000000e3a0         jmp        loc_e3ba
000000000000e3a2         align      8

                     loc_e3a8:
000000000000e3a8         movzx      edx, byte [rdi+rax]                         ; CODE XREF=re_search_internal+1408
000000000000e3ac         lea        rax, qword [rax+1]
000000000000e3b0         cmp        byte [rsi+rdx], 0x0
000000000000e3b4         jne        loc_f551

                     loc_e3ba:
000000000000e3ba         cmp        rcx, rax                                    ; CODE XREF=re_search_internal+1376
000000000000e3bd         mov        rbp, rax
000000000000e3c0         jne        loc_e3a8

                     loc_e3c2:
000000000000e3c2         mov        rax, qword [rsp+0x268+var_1F8]              ; CODE XREF=re_search_internal+2751
000000000000e3c7         mov        qword [rsp+0x268+var_190], rax

                     loc_e3cf:
000000000000e3cf         cmp        qword [rsp+0x268+var_1F8], rbp              ; CODE XREF=re_search_internal+1331, re_search_internal+2647
000000000000e3d4         jne        loc_e418

000000000000e3d6         xor        eax, eax
000000000000e3d8         mov        rsi, qword [rsp+0x268+var_1F8]
000000000000e3dd         cmp        qword [rsp+0x268+var_1E0], rsi
000000000000e3e5         jle        loc_e3f0

000000000000e3e7         mov        rax, qword [rsp+0x268+var_1F0]
000000000000e3ec         movzx      eax, byte [rax+rsi]

                     loc_e3f0:
000000000000e3f0         mov        rsi, qword [rsp+0x268+var_1B8]              ; CODE XREF=re_search_internal+1445
000000000000e3f8         test       rsi, rsi
000000000000e3fb         je         loc_e401

000000000000e3fd         movzx      eax, byte [rsi+rax]

                     loc_e401:
000000000000e401         mov        rdi, qword [rsp+0x268+var_200]              ; CODE XREF=re_search_internal+1467
000000000000e406         cmp        byte [rdi+rax], 0x0
000000000000e40a         je         loc_eda9

000000000000e410         mov        rbp, qword [rsp+0x268+var_1F8]
000000000000e415         nop        dword [rax]

                     loc_e418:
000000000000e418         mov        edx, dword [rsp+0x268+arg_10]               ; case 4, CODE XREF=re_search_internal+1270, re_search_internal+1355, re_search_internal+1428, re_search_internal+2687, re_search_internal+2863, re_search_internal+2880, re_search_internal+4370, re_search_internal+5913
000000000000e41f         mov        rdi, qword [rsp+0x268+var_268]
000000000000e423         mov        rsi, rbp
000000000000e426         call       re_string_reconstruct                       ; re_string_reconstruct
000000000000e42b         test       eax, eax
000000000000e42d         mov        dword [rsp+0x268+var_20C], eax
000000000000e431         jne        loc_e990

000000000000e437         cmp        dword [rsp+0x268+var_1A0], 0x1
000000000000e43f         je         loc_e45d

000000000000e441         cmp        qword [rsp+0x268+var_118], 0x0
000000000000e44a         je         loc_e45d

000000000000e44c         mov        rax, qword [rsp+0x268+var_138]
000000000000e454         cmp        dword [rax], 0xffffffff
000000000000e457         je         loc_ed81

                     loc_e45d:
000000000000e45d         mov        rbx, qword [rsp+0x268+var_B0]               ; CODE XREF=re_search_internal+1535, re_search_internal+1546
000000000000e465         movzx      eax, byte [rsp+0x268+var_210]
000000000000e46a         mov        dword [rsp+0x268+var_68], 0x0
000000000000e475         mov        qword [rsp+0x268+var_80], 0x0
000000000000e481         mov        qword [rsp+0x268+var_88], 0x0
000000000000e48d         mov        dword [rsp+0x268+var_198], 0x0
000000000000e498         mov        r14, qword [rbx+0x48]
000000000000e49c         and        eax, 0x1
000000000000e49f         mov        byte [rsp+0x268+var_19A], al
000000000000e4a6         mov        rax, qword [rsp+0x268+var_100]
000000000000e4ae         cmp        byte [r14+0x68], 0x0
000000000000e4b3         mov        qword [rsp+0x268+var_260], rax
000000000000e4b8         js         loc_ee30

                     loc_e4be:
000000000000e4be         mov        rax, qword [rsp+0x268+var_90]               ; CODE XREF=re_search_internal+4115, re_search_internal+4471, re_search_internal+5698
000000000000e4c6         test       rax, rax
000000000000e4c9         je         loc_e4e2

000000000000e4cb         cmp        qword [rbx+0x98], 0x0
000000000000e4d3         mov        rdi, qword [rsp+0x268+var_260]
000000000000e4d8         mov        qword [rax+rdi*8], r14
000000000000e4dc         jne        loc_f3cb

                     loc_e4e2:
000000000000e4e2         movzx      eax, byte [rsp+0x268+var_199]               ; CODE XREF=re_search_internal+1673
000000000000e4ea         mov        byte [rsp+0x268+var_250], al
000000000000e4ee         movzx      eax, byte [r14+0x68]

                     loc_e4f3:
000000000000e4f3         test       al, 0x10                                    ; CODE XREF=re_search_internal+5569
000000000000e4f5         mov        qword [rsp+0x268+var_248], 0xffffffffffffffff
000000000000e4fe         mov        qword [rsp+0x268+var_238], 0x0
000000000000e507         jne        loc_f390

                     loc_e50d:
000000000000e50d         mov        rax, qword [rsp+0x268+var_1A8]              ; CODE XREF=re_search_internal+5494, re_search_internal+5604
000000000000e515         mov        r8, qword [rsp+0x268+var_100]
000000000000e51d         mov        qword [rsp+0x268+var_218], rax
000000000000e522         lea        rax, qword [rsp+0x268+var_188]
000000000000e52a         mov        qword [rsp+0x268+var_208], rax
000000000000e52f         lea        rax, qword [rsp+0x268+var_194]
000000000000e537         mov        qword [rsp+0x268+var_1E8], rax
000000000000e53f         jmp        loc_e59c
000000000000e541         align      8

                     loc_e548:
000000000000e548         cmp        r14, r13                                    ; CODE XREF=re_search_internal+2023, re_search_internal+5395, re_search_internal+5411
000000000000e54b         mov        r8, qword [rsp+0x268+var_100]
000000000000e553         sete       al
000000000000e556         and        byte [rsp+0x268+var_250], al
000000000000e55a         movzx      eax, byte [r13+0x68]
000000000000e55f         cmove      rbx, qword [rsp+0x268+var_260]
000000000000e565         test       al, 0x10
000000000000e567         mov        qword [rsp+0x268+var_260], rbx
000000000000e56c         je         loc_e599

000000000000e56e         test       al, al
000000000000e570         js         loc_ea30

                     loc_e576:
000000000000e576         mov        eax, dword [rsp+0x268+var_210]              ; CODE XREF=re_search_internal+3095
000000000000e57a         mov        qword [rsp+0x268+var_248], r8
000000000000e57f         test       eax, eax
000000000000e581         je         loc_e6a6

000000000000e587         mov        qword [rsp+0x268+var_238], 0x1
000000000000e590         mov        qword [rsp+0x268+var_218], 0x0

                     loc_e599:
000000000000e599         mov        r14, r13                                    ; CODE XREF=re_search_internal+1836, re_search_internal+3089

                     loc_e59c:
000000000000e59c         cmp        qword [rsp+0x268+var_E0], r8                ; CODE XREF=re_search_internal+1791
000000000000e5a4         jle        loc_e694

000000000000e5aa         mov        rax, qword [rsp+0x268+var_108]
000000000000e5b2         lea        rbx, qword [r8+1]
000000000000e5b6         cmp        rbx, rax
000000000000e5b9         jge        loc_ea60

                     loc_e5bf:
000000000000e5bf         mov        rax, qword [rsp+0x268+var_118]              ; CODE XREF=re_search_internal+3112
000000000000e5c7         cmp        rbx, rax
000000000000e5ca         jge        loc_ed50

                     loc_e5d0:
000000000000e5d0         test       byte [r14+0x68], 0x20                       ; CODE XREF=re_search_internal+3864
000000000000e5d5         jne        loc_eaa0

                     loc_e5db:
000000000000e5db         lea        rax, qword [r8+1]                           ; CODE XREF=re_search_internal+3158, re_search_internal+4006
000000000000e5df         mov        qword [rsp+0x268+var_100], rax
000000000000e5e7         mov        rax, qword [rsp+0x268+var_140]
000000000000e5ef         movzx      r13d, byte [rax+r8]

                     loc_e5f4:
000000000000e5f4         mov        rax, qword [r14+0x58]                       ; CODE XREF=re_search_internal+4247
000000000000e5f8         test       rax, rax
000000000000e5fb         je         loc_ed10

000000000000e601         mov        r13, qword [rax+r13*8]

                     loc_e605:
000000000000e605         cmp        qword [rsp+0x268+var_90], 0x0               ; CODE XREF=re_search_internal+3849, re_search_internal+4021
000000000000e60e         je         loc_e624

                     loc_e610:
000000000000e610         mov        rsi, qword [rsp+0x268+var_268]              ; CODE XREF=re_search_internal+4067
000000000000e614         mov        rdi, qword [rsp+0x268+var_240]
000000000000e619         mov        rdx, r13
000000000000e61c         call       merge_state_with_log                        ; merge_state_with_log
000000000000e621         mov        r13, rax

                     loc_e624:
000000000000e624         test       r13, r13                                    ; CODE XREF=re_search_internal+1998
000000000000e627         jne        loc_e548

000000000000e62d         mov        ecx, dword [rsp+0x268+var_198]
000000000000e634         mov        rdi, qword [rsp+0x268+var_90]
000000000000e63c         test       ecx, ecx
000000000000e63e         jne        loc_ef00

000000000000e644         test       rdi, rdi
000000000000e647         je         loc_e694

000000000000e649         movzx      eax, byte [rsp+0x268+var_19A]
000000000000e651         xor        eax, 0x1
000000000000e654         test       byte [rsp+0x268+var_238], al
000000000000e658         jne        loc_e694

                     loc_e65a:
000000000000e65a         mov        rsi, qword [rsp+0x268+var_88]               ; CODE XREF=re_search_internal+3048
000000000000e662         mov        rax, qword [rsp+0x268+var_100]
000000000000e66a         xor        ecx, ecx
000000000000e66c         jmp        loc_e683
000000000000e66e         align      16

                     loc_e670:
000000000000e670         cmp        qword [rdi+rdx*8], 0x0                      ; CODE XREF=re_search_internal+2122
000000000000e675         mov        rax, rdx
000000000000e678         mov        ecx, 0x1
000000000000e67d         jne        loc_e9f0

                     loc_e683:
000000000000e683         lea        rdx, qword [rax+1]                          ; CODE XREF=re_search_internal+2092
000000000000e687         cmp        rsi, rdx
000000000000e68a         jge        loc_e670

000000000000e68c         test       cl, cl
000000000000e68e         jne        loc_f55e

                     loc_e694:
000000000000e694         mov        rax, qword [rsp+0x268+var_218]              ; CODE XREF=re_search_internal+1892, re_search_internal+2055, re_search_internal+2072, re_search_internal+5401, re_search_internal+5926
000000000000e699         test       rax, rax
000000000000e69c         je         loc_e6a6

000000000000e69e         mov        rdi, qword [rsp+0x268+var_260]
000000000000e6a3         add        qword [rax], rdi

                     loc_e6a6:
000000000000e6a6         mov        rax, qword [rsp+0x268+var_248]              ; CODE XREF=re_search_internal+1857, re_search_internal+2140, re_search_internal+5479, re_search_internal+5631
000000000000e6ab         cmp        rax, 0xffffffffffffffff
000000000000e6af         je         loc_ed70

000000000000e6b5         cmp        rax, 0xfffffffffffffffe
000000000000e6b9         je         loc_eeb0

000000000000e6bf         mov        rax, qword [rsp+0x268+var_248]
000000000000e6c4         mov        qword [rsp+0x268+var_A0], rax
000000000000e6cc         mov        rax, qword [rsp+0x268+var_220]
000000000000e6d1         test       byte [rax+0x38], 0x10
000000000000e6d5         jne        loc_ee90

000000000000e6db         cmp        qword [rsp+0x268+arg_0], 0x1
000000000000e6e4         jbe        loc_efdc

000000000000e6ea         mov        rcx, qword [rsp+0x268+var_248]
000000000000e6ef         mov        rbx, qword [rsp+0x268+var_90]
000000000000e6f7         mov        rdi, qword [rsp+0x268+var_268]
000000000000e6fb         mov        rax, qword [rbx+rcx*8]
000000000000e6ff         mov        rsi, qword [rax+0x10]
000000000000e703         lea        rdx, qword [rax+0x18]
000000000000e707         call       check_halt_state_context.isra.20            ; check_halt_state_context.isra.20
000000000000e70c         mov        r13, rax
000000000000e70f         mov        qword [rsp+0x268+var_98], rax
000000000000e717         mov        rax, qword [rsp+0x268+var_230]
000000000000e71c         test       byte [rax+0xb0], 0x1
000000000000e723         jne        loc_e740

000000000000e725         mov        rax, qword [rsp+0x268+var_230]
000000000000e72a         cmp        qword [rax+0x98], 0x0
000000000000e732         je         loc_f0cc

                     loc_e738:
000000000000e738         mov        r13, qword [rsp+0x268+var_98]               ; CODE XREF=re_search_internal+4569

                     loc_e740:
000000000000e740         movabs     rsi, 0x1ffffffffffffffe                     ; CODE XREF=re_search_internal+2275
000000000000e74a         cmp        qword [rsp+0x268+var_248], rsi
000000000000e74f         mov        r15, qword [rsp+0x268+var_B0]
000000000000e757         ja         loc_f3bb

000000000000e75d         mov        rax, qword [rsp+0x268+var_248]
000000000000e762         add        rax, 0x1
000000000000e766         lea        rbx, qword [rax*8]
000000000000e76e         mov        qword [rsp+0x268+var_260], rax
000000000000e773         mov        rdi, rbx                                    ; argument "__size" for method j_malloc
000000000000e776         call       j_malloc                                    ; malloc
000000000000e77b         test       rax, rax
000000000000e77e         mov        r12, rax
000000000000e781         je         loc_eeb0

000000000000e787         cmp        qword [r15+0x98], 0x0
000000000000e78f         je         loc_f025

000000000000e795         mov        rdi, rbx                                    ; argument "__size" for method j_malloc
000000000000e798         call       j_malloc                                    ; malloc
000000000000e79d         test       rax, rax
000000000000e7a0         mov        rbp, rax
000000000000e7a3         je         loc_eea8

000000000000e7a9         mov        r14, qword [rsp+0x268+var_248]
000000000000e7ae         lea        rbx, qword [rsp+0x268+var_188]
000000000000e7b6         mov        qword [rsp+0x268+var_258], r15
000000000000e7bb         mov        qword [rsp+0x268+var_250], rax

                     loc_e7c0:
000000000000e7c0         mov        rax, qword [rsp+0x268+var_260]              ; CODE XREF=re_search_internal+2637
000000000000e7c5         xor        esi, esi                                    ; argument "__c" for method j_memset
000000000000e7c7         mov        rdi, rbp                                    ; argument "__s" for method j_memset
000000000000e7ca         lea        rdx, qword [rax*8]                          ; argument "__n" for method j_memset
000000000000e7d2         call       j_memset                                    ; memset
000000000000e7d7         pxor       xmm0, xmm0
000000000000e7db         mov        qword [rsp+0x268+var_188], r12
000000000000e7e3         mov        qword [rsp+0x268+var_180], rbp
000000000000e7eb         mov        qword [rsp+0x268+var_178], r13
000000000000e7f3         mov        rsi, rbx
000000000000e7f6         mov        qword [rsp+0x268+var_170], r14
000000000000e7fe         mov        rdi, qword [rsp+0x268+var_268]
000000000000e802         movaps     xmmword [rbx+0x20], xmm0
000000000000e806         mov        qword [rbx+0x30], 0x0
000000000000e80e         call       sift_states_backward                        ; sift_states_backward
000000000000e813         mov        rdi, qword [rsp+0x268+var_158]              ; argument "__ptr" for method j_free
000000000000e81b         mov        r15d, eax
000000000000e81e         call       j_free                                      ; free
000000000000e823         test       r15d, r15d
000000000000e826         jne        loc_f444

000000000000e82c         cmp        qword [r12], 0x0
000000000000e831         jne        loc_f4a3

000000000000e837         cmp        qword [rbp], 0x0
000000000000e83c         jne        loc_f4a3

000000000000e842         mov        rdx, qword [rsp+0x268+var_90]
000000000000e84a         nop        word [rax+rax]

                     loc_e850:
000000000000e850         sub        r14, 0x1                                    ; CODE XREF=re_search_internal+2597, re_search_internal+2603
000000000000e854         cmp        r14, 0xffffffffffffffff
000000000000e858         je         loc_f31b

000000000000e85e         mov        rax, qword [rdx+r14*8]
000000000000e862         test       rax, rax
000000000000e865         je         loc_e850

000000000000e867         test       byte [rax+0x68], 0x10
000000000000e86b         je         loc_e850

000000000000e86d         mov        rsi, qword [rax+0x10]
000000000000e871         mov        rdi, qword [rsp+0x268+var_268]
000000000000e875         lea        rdx, qword [rax+0x18]
000000000000e879         mov        rcx, r14
000000000000e87c         call       check_halt_state_context.isra.20            ; check_halt_state_context.isra.20
000000000000e881         mov        r13, rax
000000000000e884         lea        rax, qword [r14+1]
000000000000e888         mov        qword [rsp+0x268+var_260], rax
000000000000e88d         jmp        loc_e7c0

                     loc_e892:
000000000000e892         cmp        qword [rsp+0x268+var_1F8], rbp              ; case 3, CODE XREF=re_search_internal+1270
000000000000e897         jle        loc_e3cf

000000000000e89d         mov        rax, qword [rsp+0x268+var_1F0]
000000000000e8a2         mov        rdi, qword [rsp+0x268+var_1B8]
000000000000e8aa         mov        rsi, qword [rsp+0x268+var_200]
000000000000e8af         movzx      eax, byte [rax+rbp]
000000000000e8b3         movzx      edx, byte [rdi+rax]
000000000000e8b7         lea        rax, qword [rbp+1]
000000000000e8bb         cmp        byte [rsi+rdx], 0x0
000000000000e8bf         jne        loc_e418

000000000000e8c5         mov        rsi, qword [rsp+0x268+var_200]
000000000000e8ca         mov        rdi, qword [rsp+0x268+var_1B8]
000000000000e8d2         mov        rcx, qword [rsp+0x268+var_1F8]
000000000000e8d7         mov        r8, qword [rsp+0x268+var_1F0]
000000000000e8dc         jmp        loc_e8f7
000000000000e8de         align      32

                     loc_e8e0:
000000000000e8e0         movzx      eax, byte [r8+rax]                          ; CODE XREF=re_search_internal+2749
000000000000e8e5         movzx      edx, byte [rdi+rax]
000000000000e8e9         lea        rax, qword [rbp+1]
000000000000e8ed         cmp        byte [rsi+rdx], 0x0
000000000000e8f1         jne        loc_f551

                     loc_e8f7:
000000000000e8f7         cmp        rcx, rax                                    ; CODE XREF=re_search_internal+2716
000000000000e8fa         mov        rbp, rax
000000000000e8fd         jne        loc_e8e0

000000000000e8ff         jmp        loc_e3c2

                     loc_e904:
000000000000e904         cmp        qword [rsp+0x268+var_1D8], rbp              ; case 1, CODE XREF=re_search_internal+1270
000000000000e90c         jg         loc_eda9

000000000000e912         xor        ecx, ecx
000000000000e914         mov        rax, rbp
000000000000e917         mov        rdi, qword [rsp+0x268+var_200]
000000000000e91c         mov        rsi, qword [rsp+0x268+var_1B8]
000000000000e924         mov        r9, qword [rsp+0x268+var_1D8]
000000000000e92c         mov        r10, qword [rsp+0x268+var_1F0]
000000000000e931         mov        r8, qword [rsp+0x268+var_1E0]
000000000000e939         jmp        loc_e952
000000000000e93b         align      64

                     loc_e940:
000000000000e940         sub        rax, 0x1                                    ; CODE XREF=re_search_internal+2859
000000000000e944         mov        ecx, 0x1
000000000000e949         cmp        rax, r9
000000000000e94c         jl         loc_f330

                     loc_e952:
000000000000e952         xor        edx, edx                                    ; CODE XREF=re_search_internal+2809
000000000000e954         cmp        r8, rax
000000000000e957         jle        loc_e95e

000000000000e959         movzx      edx, byte [r10+rax]

                     loc_e95e:
000000000000e95e         test       rsi, rsi                                    ; CODE XREF=re_search_internal+2839
000000000000e961         je         loc_e967

000000000000e963         movzx      edx, byte [rsi+rdx]

                     loc_e967:
000000000000e967         cmp        byte [rdi+rdx], 0x0                         ; CODE XREF=re_search_internal+2849
000000000000e96b         je         loc_e940

000000000000e96d         test       cl, cl
000000000000e96f         je         loc_e418

000000000000e975         mov        qword [rsp+0x268+var_190], rax
000000000000e97d         mov        rbp, rax
000000000000e980         jmp        loc_e418
000000000000e985         align      8

                     loc_e988:
000000000000e988         mov        dword [rsp+0x268+var_20C], eax              ; CODE XREF=re_search_internal+4450
000000000000e98c         nop        dword [rax]

                     loc_e990:
000000000000e990         mov        rdi, qword [rsp+0x268+var_90]               ; CODE XREF=re_search_internal+598, re_search_internal+1521, re_search_internal+4135, re_search_internal+4757

                     loc_e998:
000000000000e998         call       j_free                                      ; free, CODE XREF=re_search_internal+3961, re_search_internal+4224, re_search_internal+4296, re_search_internal+5164, re_search_internal+5250, re_search_internal+5384, re_search_internal+5510, re_search_internal+5689
000000000000e99d         mov        rax, qword [rsp+0x268+var_230]
000000000000e9a2         cmp        qword [rax+0x98], 0x0
000000000000e9aa         jne        loc_f2d0

                     loc_e9b0:
000000000000e9b0         mov        rdi, qword [rsp+0x268+var_268]              ; CODE XREF=re_search_internal+5299
000000000000e9b4         call       re_string_destruct                          ; re_string_destruct

                     loc_e9b9:
000000000000e9b9         mov        rsi, qword [rsp+0x268+var_40]               ; CODE XREF=re_search_internal+342, re_search_internal+3976
000000000000e9c1         xor        rsi, qword [fs:0x28]
000000000000e9ca         mov        eax, dword [rsp+0x268+var_20C]
000000000000e9ce         jne        loc_f56b

000000000000e9d4         add        rsp, aLib64ldlinuxx8                        ; "/lib64/ld-linux-x86-64.so.2"
000000000000e9db         pop        rbx
000000000000e9dc         pop        rbp
000000000000e9dd         pop        r12
000000000000e9df         pop        r13
000000000000e9e1         pop        r14
000000000000e9e3         pop        r15
000000000000e9e5         ret
                        ; endp
000000000000e9e6         align      16

                     loc_e9f0:
000000000000e9f0         mov        rsi, qword [rsp+0x268+var_268]              ; CODE XREF=re_search_internal+2109
000000000000e9f4         mov        rdi, qword [rsp+0x268+var_240]
000000000000e9f9         mov        qword [rsp+0x268+var_100], rdx
000000000000ea01         xor        edx, edx
000000000000ea03         call       merge_state_with_log                        ; merge_state_with_log
000000000000ea08         mov        edx, dword [rsp+0x268+var_198]
000000000000ea0f         test       edx, edx
000000000000ea11         jne        loc_f34d

000000000000ea17         test       rax, rax
000000000000ea1a         jne        loc_f360

000000000000ea20         mov        rdi, qword [rsp+0x268+var_90]
000000000000ea28         jmp        loc_e65a
000000000000ea2d         align      16

                     loc_ea30:
000000000000ea30         mov        rsi, qword [r13+0x10]                       ; CODE XREF=re_search_internal+1840
000000000000ea34         mov        rdi, qword [rsp+0x268+var_268]
000000000000ea38         lea        rdx, qword [r13+0x18]
000000000000ea3c         mov        rcx, r8
000000000000ea3f         mov        qword [rsp+0x268+var_258], r8
000000000000ea44         call       check_halt_state_context.isra.20            ; check_halt_state_context.isra.20
000000000000ea49         test       rax, rax
000000000000ea4c         mov        r8, qword [rsp+0x268+var_258]
000000000000ea51         je         loc_e599

000000000000ea57         jmp        loc_e576
000000000000ea5c         align      32

                     loc_ea60:
000000000000ea60         cmp        rax, qword [rsp+0x268+var_F0]               ; CODE XREF=re_search_internal+1913
000000000000ea68         jge        loc_e5bf

                     loc_ea6e:
000000000000ea6e         mov        rdi, qword [rsp+0x268+var_268]              ; CODE XREF=re_search_internal+3870
000000000000ea72         lea        esi, dword [rbx+1]
000000000000ea75         call       extend_buffers                              ; extend_buffers
000000000000ea7a         test       eax, eax
000000000000ea7c         mov        dword [rsp+0x268+var_198], eax
000000000000ea83         jne        loc_f368

000000000000ea89         test       byte [r14+0x68], 0x20
000000000000ea8e         mov        r8, qword [rsp+0x268+var_100]
000000000000ea96         je         loc_e5db

000000000000ea9c         nop        dword [rax]

                     loc_eaa0:
000000000000eaa0         cmp        qword [r14+0x10], 0x0                       ; CODE XREF=re_search_internal+1941
000000000000eaa5         mov        r13, qword [rsp+0x268+var_B0]
000000000000eaad         jle        loc_eddb

000000000000eab3         lea        rax, qword [r13+0xd8]
000000000000eaba         xor        r12d, r12d
000000000000eabd         mov        qword [rsp+0x268+var_1C8], rbx
000000000000eac5         mov        rbx, r12
000000000000eac8         mov        r12, r8
000000000000eacb         mov        qword [rsp+0x268+var_228], rax
000000000000ead0         jmp        loc_ec28
000000000000ead5         align      8

                     loc_ead8:
000000000000ead8         test       al, 0x1                                     ; CODE XREF=re_search_internal+3643
000000000000eada         je         loc_ec1a

000000000000eae0         and        ecx, 0x8
000000000000eae3         jne        loc_ec1a

                     loc_eae9:
000000000000eae9         test       dl, 0x20                                    ; CODE XREF=re_search_internal+3652, re_search_internal+3660
000000000000eaec         je         loc_eaf6

000000000000eaee         test       al, 0x2
000000000000eaf0         je         loc_ec1a

                     loc_eaf6:
000000000000eaf6         and        edx, 0x80                                   ; CODE XREF=re_search_internal+3244
000000000000eafc         je         loc_eb10

000000000000eafe         test       al, 0x8
000000000000eb00         je         loc_ec1a

000000000000eb06         nop        word [cs:rax+rax]

                     loc_eb10:
000000000000eb10         mov        rcx, qword [rsp+0x268+var_268]              ; CODE XREF=re_search_internal+3260, re_search_internal+3601
000000000000eb14         mov        rsi, qword [rsp+0x268+var_228]
000000000000eb19         mov        r8, r12
000000000000eb1c         mov        rdx, r15
000000000000eb1f         mov        rdi, rbp
000000000000eb22         call       check_node_accept_bytes.isra.31             ; check_node_accept_bytes.isra.31
000000000000eb27         test       eax, eax
000000000000eb29         je         loc_ec12

000000000000eb2f         movsxd     rbp, eax
000000000000eb32         add        rbp, qword [rsp+0x268+var_100]
000000000000eb3a         cmp        dword [rsp+0x268+var_68], eax
000000000000eb41         cmovge     eax, dword [rsp+0x268+var_68]
000000000000eb49         mov        rdi, qword [rsp+0x268+var_268]
000000000000eb4d         mov        rsi, rbp
000000000000eb50         mov        dword [rsp+0x268+var_68], eax
000000000000eb57         call       clean_state_log_if_needed                   ; clean_state_log_if_needed
000000000000eb5c         test       eax, eax
000000000000eb5e         mov        dword [rsp+0x268+var_194], eax
000000000000eb65         jne        loc_ee00

000000000000eb6b         mov        rax, qword [r13+0x18]
000000000000eb6f         lea        r12, qword [rbp*8]
000000000000eb77         mov        rax, qword [rax+r15*8]
000000000000eb7b         mov        r15, qword [rsp+0x268+var_90]
000000000000eb83         lea        rdx, qword [rax+rax*2]
000000000000eb87         mov        rax, qword [r13+0x30]
000000000000eb8b         add        r15, r12
000000000000eb8e         lea        rdx, qword [rax+rdx*8]
000000000000eb92         mov        rax, qword [r15]
000000000000eb95         test       rax, rax
000000000000eb98         je         loc_ec98

000000000000eb9e         mov        rsi, qword [rax+0x50]
000000000000eba2         mov        rdi, qword [rsp+0x268+var_208]
000000000000eba7         call       re_node_set_init_union                      ; re_node_set_init_union
000000000000ebac         test       eax, eax
000000000000ebae         mov        dword [rsp+0x268+var_194], eax
000000000000ebb5         jne        loc_ee00

000000000000ebbb         mov        edx, dword [rsp+0x268+var_A8]
000000000000ebc2         mov        rdi, qword [rsp+0x268+var_268]
000000000000ebc6         lea        rsi, qword [rbp-1]
000000000000ebca         call       re_string_context_at                        ; re_string_context_at
000000000000ebcf         mov        rdx, qword [rsp+0x268+var_208]
000000000000ebd4         mov        rdi, qword [rsp+0x268+var_1E8]
000000000000ebdc         mov        ecx, eax
000000000000ebde         add        r12, qword [rsp+0x268+var_90]
000000000000ebe6         mov        rsi, r13
000000000000ebe9         call       re_acquire_state_context                    ; re_acquire_state_context
000000000000ebee         mov        rdi, qword [rsp+0x268+var_178]              ; argument "__ptr" for method j_free
000000000000ebf6         mov        qword [r12], rax
000000000000ebfa         call       j_free                                      ; free
000000000000ebff         mov        rdi, qword [rsp+0x268+var_90]
000000000000ec07         cmp        qword [rdi+rbp*8], 0x0
000000000000ec0c         je         loc_ecf1

                     loc_ec12:
000000000000ec12         mov        r12, qword [rsp+0x268+var_100]              ; CODE XREF=re_search_internal+3305, re_search_internal+3755, re_search_internal+3770

                     loc_ec1a:
000000000000ec1a         add        rbx, 0x1                                    ; CODE XREF=re_search_internal+3226, re_search_internal+3235, re_search_internal+3248, re_search_internal+3264, re_search_internal+3586, re_search_internal+3666
000000000000ec1e         cmp        rbx, qword [r14+0x10]
000000000000ec22         jge        loc_edd0

                     loc_ec28:
000000000000ec28         mov        rax, qword [r14+0x18]                       ; CODE XREF=re_search_internal+3216
000000000000ec2c         mov        rbp, qword [r13]
000000000000ec30         mov        r15, qword [rax+rbx*8]
000000000000ec34         mov        rax, r15
000000000000ec37         shl        rax, 0x4
000000000000ec3b         add        rax, rbp
000000000000ec3e         test       byte [rax+0xa], 0x10
000000000000ec42         je         loc_ec1a

000000000000ec44         mov        ecx, dword [rax+8]
000000000000ec47         test       ecx, 0x3ff00
000000000000ec4d         mov        dword [rsp+0x268+var_258], ecx
000000000000ec51         je         loc_eb10

000000000000ec57         mov        edx, dword [rsp+0x268+var_A8]
000000000000ec5e         mov        rdi, qword [rsp+0x268+var_268]
000000000000ec62         mov        rsi, r12
000000000000ec65         call       re_string_context_at                        ; re_string_context_at
000000000000ec6a         mov        ecx, dword [rsp+0x268+var_258]
000000000000ec6e         shr        ecx, 0x8
000000000000ec71         mov        edx, ecx
000000000000ec73         and        dx, 0x3ff
000000000000ec78         test       cl, 0x4
000000000000ec7b         jne        loc_ead8

000000000000ec81         and        ecx, 0x8
000000000000ec84         je         loc_eae9

000000000000ec8a         test       al, 0x1
000000000000ec8c         je         loc_eae9

000000000000ec92         jmp        loc_ec1a
000000000000ec94         align      8

                     loc_ec98:
000000000000ec98         movdqu     xmm0, xmmword [rdx]                         ; CODE XREF=re_search_internal+3416
000000000000ec9c         lea        rsi, qword [rbp-1]
000000000000eca0         mov        rdi, qword [rsp+0x268+var_268]
000000000000eca4         movaps     xmmword [rsp+0x268+var_188], xmm0
000000000000ecac         mov        rax, qword [rdx+0x10]
000000000000ecb0         mov        edx, dword [rsp+0x268+var_A8]
000000000000ecb7         mov        qword [rsp+0x268+var_178], rax
000000000000ecbf         call       re_string_context_at                        ; re_string_context_at
000000000000ecc4         mov        rdi, qword [rsp+0x268+var_1E8]
000000000000eccc         mov        rdx, qword [rsp+0x268+var_208]
000000000000ecd1         mov        ecx, eax
000000000000ecd3         mov        rsi, r13
000000000000ecd6         call       re_acquire_state_context                    ; re_acquire_state_context
000000000000ecdb         mov        rdi, qword [rsp+0x268+var_90]
000000000000ece3         mov        qword [r15], rax
000000000000ece6         cmp        qword [rdi+rbp*8], 0x0
000000000000eceb         jne        loc_ec12

                     loc_ecf1:
000000000000ecf1         mov        eax, dword [rsp+0x268+var_194]              ; CODE XREF=re_search_internal+3532
000000000000ecf8         test       eax, eax
000000000000ecfa         je         loc_ec12

000000000000ed00         mov        rbx, qword [rsp+0x268+var_1C8]
000000000000ed08         jmp        loc_ee10
000000000000ed0d         align      16

                     loc_ed10:
000000000000ed10         mov        rbp, qword [r14+0x60]                       ; CODE XREF=re_search_internal+1979
000000000000ed14         test       rbp, rbp
000000000000ed17         je         loc_eec5

000000000000ed1d         mov        rax, qword [rsp+0x268+var_100]
000000000000ed25         mov        edx, dword [rsp+0x268+var_A8]
000000000000ed2c         mov        rdi, qword [rsp+0x268+var_268]
000000000000ed30         lea        rsi, qword [rax-1]
000000000000ed34         call       re_string_context_at                        ; re_string_context_at
000000000000ed39         test       al, 0x1
000000000000ed3b         je         loc_edf0

000000000000ed41         mov        r13, qword [rbp+r13*8+0x800]
000000000000ed49         jmp        loc_e605
000000000000ed4e         align      16

                     loc_ed50:
000000000000ed50         cmp        rax, qword [rsp+0x268+var_F0]               ; CODE XREF=re_search_internal+1930
000000000000ed58         jge        loc_e5d0

000000000000ed5e         jmp        loc_ea6e

                     loc_ed63:
000000000000ed63         mov        rdi, r12                                    ; argument "__ptr" for method j_free, CODE XREF=re_search_internal+4700
000000000000ed66         call       j_free                                      ; free
000000000000ed6b         nop        dword [rax+rax]

                     loc_ed70:
000000000000ed70         mov        rdi, qword [rsp+0x268+var_268]              ; CODE XREF=re_search_internal+2159, re_search_internal+5355, re_search_internal+5671
000000000000ed74         call       match_ctx_clean                             ; match_ctx_clean
000000000000ed79         mov        rbp, qword [rsp+0x268+var_190]

                     loc_ed81:
000000000000ed81         movsxd     rax, dword [rsp+0x268+var_1BC]              ; CODE XREF=re_search_internal+1559
000000000000ed89         add        rbp, rax
000000000000ed8c         cmp        rbp, qword [rsp+0x268+var_1D8]
000000000000ed94         mov        qword [rsp+0x268+var_190], rbp
000000000000ed9c         jl         loc_eda9

000000000000ed9e         cmp        rbp, qword [rsp+0x268+var_1F8]
000000000000eda3         jle        loc_e318

                     loc_eda9:
000000000000eda9         mov        rdi, qword [rsp+0x268+var_90]               ; CODE XREF=re_search_internal+1172, re_search_internal+1482, re_search_internal+2764, re_search_internal+3932, re_search_internal+4393, re_search_internal+4402
000000000000edb1         mov        dword [rsp+0x268+var_20C], 0x1
000000000000edb9         jmp        loc_e998
000000000000edbe         align      64

                     loc_edc0:
000000000000edc0         mov        dword [rsp+0x268+var_20C], 0x1              ; CODE XREF=re_search_internal+238, re_search_internal+256, re_search_internal+269, re_search_internal+282, re_search_internal+293
000000000000edc8         jmp        loc_e9b9
000000000000edcd         align      16

                     loc_edd0:
000000000000edd0         mov        rbx, qword [rsp+0x268+var_1C8]              ; CODE XREF=re_search_internal+3554
000000000000edd8         mov        r8, r12

                     loc_eddb:
000000000000eddb         mov        dword [rsp+0x268+var_198], 0x0              ; CODE XREF=re_search_internal+3181
000000000000ede6         jmp        loc_e5db
000000000000edeb         align      16

                     loc_edf0:
000000000000edf0         mov        r13, qword [rbp+r13*8]                      ; CODE XREF=re_search_internal+3835
000000000000edf5         jmp        loc_e605
000000000000edfa         align      512

                     loc_ee00:
000000000000ee00         mov        rbx, qword [rsp+0x268+var_1C8]              ; CODE XREF=re_search_internal+3365, re_search_internal+3445
000000000000ee08         mov        rdi, qword [rsp+0x268+var_90]

                     loc_ee10:
000000000000ee10         test       rdi, rdi                                    ; CODE XREF=re_search_internal+3784
000000000000ee13         mov        dword [rsp+0x268+var_198], eax
000000000000ee1a         je         loc_ef00

                     loc_ee20:
000000000000ee20         xor        r13d, r13d                                  ; CODE XREF=re_search_internal+4275
000000000000ee23         jmp        loc_e610
000000000000ee28         align      16

                     loc_ee30:
000000000000ee30         mov        edx, dword [rsp+0x268+var_A8]               ; CODE XREF=re_search_internal+1656
000000000000ee37         mov        rdi, qword [rsp+0x268+var_268]
000000000000ee3b         lea        rsi, qword [rax-1]
000000000000ee3f         call       re_string_context_at                        ; re_string_context_at
000000000000ee44         test       al, 0x1
000000000000ee46         je         loc_efb5

000000000000ee4c         mov        r14, qword [rbx+0x50]

                     loc_ee50:
000000000000ee50         test       r14, r14                                    ; CODE XREF=re_search_internal+4503, re_search_internal+5619, re_search_internal+5726
000000000000ee53         jne        loc_e4be

000000000000ee59         mov        eax, dword [rsp+0x268+var_198]
000000000000ee60         cmp        eax, 0xc
000000000000ee63         mov        dword [rsp+0x268+var_20C], eax
000000000000ee67         je         loc_e990

000000000000ee6d         lea        rcx, qword [__PRETTY_FUNCTION__.7972]       ; argument "__function" for method j___assert_fail, "check_matching"
000000000000ee74         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/regexec.c"
000000000000ee7b         lea        rdi, qword [aErrRegespace]                  ; argument "__assertion" for method j___assert_fail, "err == REG_ESPACE"
000000000000ee82         mov        edx, 0x435                                  ; argument "__line" for method j___assert_fail
000000000000ee87         call       j___assert_fail                             ; __assert_fail
                        ; endp
000000000000ee8c         align      16

                     loc_ee90:
000000000000ee90         mov        rax, qword [rsp+0x268+var_230]              ; CODE XREF=re_search_internal+2197
000000000000ee95         cmp        qword [rax+0x98], 0x0
000000000000ee9d         je         loc_f0cc

000000000000eea3         jmp        loc_efef

                     loc_eea8:
000000000000eea8         mov        rdi, r12                                    ; argument "__ptr" for method j_free, CODE XREF=re_search_internal+2403
000000000000eeab         call       j_free                                      ; free

                     loc_eeb0:
000000000000eeb0         mov        rdi, qword [rsp+0x268+var_90]               ; CODE XREF=re_search_internal+810, re_search_internal+864, re_search_internal+873, re_search_internal+942, re_search_internal+2169, re_search_internal+2369, re_search_internal+5419
000000000000eeb8         mov        dword [rsp+0x268+var_20C], 0xc
000000000000eec0         jmp        loc_e998

                     loc_eec5:
000000000000eec5         mov        rdi, qword [rsp+0x268+var_B0]               ; CODE XREF=re_search_internal+3799
000000000000eecd         mov        rsi, r14
000000000000eed0         call       build_trtable                               ; build_trtable
000000000000eed5         test       al, al
000000000000eed7         jne        loc_e5f4

000000000000eedd         mov        rdi, qword [rsp+0x268+var_90]
000000000000eee5         mov        dword [rsp+0x268+var_198], 0xc
000000000000eef0         test       rdi, rdi
000000000000eef3         jne        loc_ee20

000000000000eef9         nop        dword [rax]

                     loc_ef00:
000000000000ef00         mov        dword [rsp+0x268+var_20C], 0xc              ; CODE XREF=re_search_internal+975, re_search_internal+2046, re_search_internal+4058
000000000000ef08         jmp        loc_e998

                     loc_ef0d:
000000000000ef0d         mov        rbx, qword [rsp+0x268+var_200]              ; CODE XREF=re_search_internal+1250
000000000000ef12         mov        r13d, dword [rsp+0x268+var_1BC]
000000000000ef1a         mov        r14, qword [rsp+0x268+var_1D8]
000000000000ef22         mov        r15, qword [rsp+0x268+var_1F8]
000000000000ef27         mov        r12, qword [rsp+0x268+var_1E0]
000000000000ef2f         jmp        loc_ef78
000000000000ef31         align      8

                     loc_ef38:
000000000000ef38         cmp        r12, rbp                                    ; CODE XREF=re_search_internal+4427, re_search_internal+4467
000000000000ef3b         mov        rax, rbx
000000000000ef3e         jle        loc_ef4f

000000000000ef40         mov        rax, qword [rsp+0x268+var_140]
000000000000ef48         movzx      eax, byte [rax+rdx]
000000000000ef4c         add        rax, rbx

                     loc_ef4f:
000000000000ef4f         cmp        byte [rax], 0x0                             ; CODE XREF=re_search_internal+4350
000000000000ef52         jne        loc_e418

000000000000ef58         movsxd     rax, r13d
000000000000ef5b         add        rbp, rax
000000000000ef5e         cmp        rbp, r14
000000000000ef61         mov        qword [rsp+0x268+var_190], rbp
000000000000ef69         jl         loc_eda9

000000000000ef6f         cmp        rbp, r15
000000000000ef72         jg         loc_eda9

                     loc_ef78:
000000000000ef78         mov        rdx, rbp                                    ; CODE XREF=re_search_internal+4335
000000000000ef7b         sub        rdx, qword [rsp+0x268+var_120]
000000000000ef83         cmp        qword [rsp+0x268+var_110], rdx
000000000000ef8b         ja         loc_ef38

000000000000ef8d         mov        edx, dword [rsp+0x268+arg_10]
000000000000ef94         mov        rdi, qword [rsp+0x268+var_268]
000000000000ef98         mov        rsi, rbp
000000000000ef9b         call       re_string_reconstruct                       ; re_string_reconstruct
000000000000efa0         test       eax, eax
000000000000efa2         jne        loc_e988

000000000000efa8         mov        rdx, rbp
000000000000efab         sub        rdx, qword [rsp+0x268+var_120]
000000000000efb3         jmp        loc_ef38

                     loc_efb5:
000000000000efb5         test       eax, eax                                    ; CODE XREF=re_search_internal+4102
000000000000efb7         je         loc_e4be

000000000000efbd         mov        edx, eax
000000000000efbf         and        edx, 0x6
000000000000efc2         cmp        edx, 0x6
000000000000efc5         je         loc_f42f

000000000000efcb         test       al, 0x2
000000000000efcd         je         loc_f480

000000000000efd3         mov        r14, qword [rbx+0x58]
000000000000efd7         jmp        loc_ee50

                     loc_efdc:
000000000000efdc         mov        rax, qword [rsp+0x268+var_230]              ; CODE XREF=re_search_internal+2212
000000000000efe1         cmp        qword [rax+0x98], 0x0
000000000000efe9         je         loc_f0cc

                     loc_efef:
000000000000efef         mov        rcx, qword [rsp+0x268+var_248]              ; CODE XREF=re_search_internal+4195
000000000000eff4         mov        rbx, qword [rsp+0x268+var_90]
000000000000effc         mov        rdi, qword [rsp+0x268+var_268]
000000000000f000         mov        rax, qword [rbx+rcx*8]
000000000000f004         mov        rsi, qword [rax+0x10]
000000000000f008         lea        rdx, qword [rax+0x18]
000000000000f00c         call       check_halt_state_context.isra.20            ; check_halt_state_context.isra.20
000000000000f011         mov        qword [rsp+0x268+var_98], rax
000000000000f019         jmp        loc_e738

                     loc_f01e:
000000000000f01e         xor        ecx, ecx                                    ; CODE XREF=re_search_internal+1113, re_search_internal+1128
000000000000f020         jmp        loc_e2ae

                     loc_f025:
000000000000f025         pxor       xmm0, xmm0                                  ; CODE XREF=re_search_internal+2383
000000000000f029         mov        qword [rsp+0x268+var_188], rax
000000000000f031         mov        rdi, qword [rsp+0x268+var_268]
000000000000f035         mov        rax, qword [rsp+0x268+var_248]
000000000000f03a         lea        rbx, qword [rsp+0x268+var_188]
000000000000f042         mov        qword [rsp+0x268+var_180], 0x0
000000000000f04e         mov        qword [rsp+0x268+var_178], r13
000000000000f056         mov        rsi, rbx
000000000000f059         mov        qword [rsp+0x268+var_158], 0x0
000000000000f065         movaps     xmmword [rsp+0x268+var_168], xmm0
000000000000f06d         mov        qword [rsp+0x268+var_170], rax
000000000000f075         call       sift_states_backward                        ; sift_states_backward
000000000000f07a         mov        rdi, qword [rsp+0x268+var_158]              ; argument "__ptr" for method j_free
000000000000f082         mov        dword [rsp+0x268+var_260], eax
000000000000f086         call       j_free                                      ; free
000000000000f08b         mov        eax, dword [rsp+0x268+var_260]
000000000000f08f         test       eax, eax
000000000000f091         jne        loc_f4d8

000000000000f097         cmp        qword [r12], 0x0
000000000000f09c         je         loc_ed63

                     loc_f0a2:
000000000000f0a2         mov        rdi, qword [rsp+0x268+var_90]               ; argument "__ptr" for method j_free, CODE XREF=re_search_internal+5778
000000000000f0aa         call       j_free                                      ; free
000000000000f0af         mov        rax, qword [rsp+0x268+var_248]
000000000000f0b4         mov        qword [rsp+0x268+var_90], r12
000000000000f0bc         mov        qword [rsp+0x268+var_98], r13
000000000000f0c4         mov        qword [rsp+0x268+var_A0], rax

                     loc_f0cc:
000000000000f0cc         cmp        qword [rsp+0x268+arg_0], 0x0                ; CODE XREF=re_search_internal+2290, re_search_internal+4189, re_search_internal+4521
000000000000f0d5         je         loc_e990

000000000000f0db         cmp        qword [rsp+0x268+arg_0], 0x1
000000000000f0e4         je         loc_f508

000000000000f0ea         mov        rsi, qword [rsp+0x268+var_1B0]
000000000000f0f2         mov        rcx, qword [rsp+0x268+arg_0]
000000000000f0fa         mov        rdx, 0xffffffffffffffff
000000000000f101         shl        rcx, 0x4
000000000000f105         lea        rax, qword [rsi+0x10]
000000000000f109         add        rcx, rsi

                     loc_f10c:
000000000000f10c         mov        qword [rax+8], rdx                          ; CODE XREF=re_search_internal+4826
000000000000f110         mov        qword [rax], rdx
000000000000f113         add        rax, 0x10
000000000000f117         cmp        rcx, rax
000000000000f11a         jne        loc_f10c

000000000000f11c         mov        rdi, qword [rsp+0x268+var_1B0]
000000000000f124         mov        rax, qword [rsp+0x268+var_A0]
000000000000f12c         mov        qword [rdi+8], rax
000000000000f130         mov        rax, qword [rsp+0x268+var_220]
000000000000f135         mov        qword [rdi], 0x0
000000000000f13c         test       byte [rax+0x38], 0x10
000000000000f140         jne        loc_f523

000000000000f146         cmp        qword [rsp+0x268+arg_0], 0x1
000000000000f14f         je         loc_f523

000000000000f155         mov        rax, qword [rsp+0x268+var_230]
000000000000f15a         xor        r8d, r8d
000000000000f15d         test       byte [rax+0xb0], 0x1
000000000000f164         je         loc_f175

000000000000f166         xor        r8d, r8d
000000000000f169         cmp        qword [rax+0x98], 0x0
000000000000f171         setg       r8b

                     loc_f175:
000000000000f175         mov        rbx, qword [rsp+0x268+var_1B0]              ; CODE XREF=re_search_internal+4900
000000000000f17d         mov        rdx, qword [rsp+0x268+arg_0]
000000000000f185         mov        rsi, qword [rsp+0x268+var_268]
000000000000f189         mov        rdi, qword [rsp+0x268+var_220]
000000000000f18e         mov        rcx, rbx
000000000000f191         call       set_regs                                    ; set_regs
000000000000f196         test       eax, eax
000000000000f198         jne        loc_f46d

000000000000f19e         mov        rax, qword [rbx]

                     loc_f1a1:
000000000000f1a1         movzx      r11d, byte [rsp+0x268+var_BC]               ; CODE XREF=re_search_internal+5861
000000000000f1aa         mov        r10, qword [rsp+0x268+var_118]
000000000000f1b2         xor        ecx, ecx
000000000000f1b4         mov        r9, qword [rsp+0x268+var_130]
000000000000f1bc         mov        r8, qword [rsp+0x268+var_110]
000000000000f1c4         mov        rdi, qword [rsp+0x268+var_190]
000000000000f1cc         mov        rdx, qword [rsp+0x268+var_1B0]
000000000000f1d4         jmp        loc_f1d9

                     loc_f1d6:
000000000000f1d6         mov        rax, qword [rdx]                            ; CODE XREF=re_search_internal+5065

                     loc_f1d9:
000000000000f1d9         cmp        rax, 0xffffffffffffffff                     ; CODE XREF=re_search_internal+5012
000000000000f1dd         je         loc_f1f9

000000000000f1df         test       r11b, r11b
000000000000f1e2         mov        rsi, qword [rdx+8]
000000000000f1e6         jne        loc_f52a

                     loc_f1ec:
000000000000f1ec         add        rax, rdi                                    ; CODE XREF=re_search_internal+5887, re_search_internal+5895
000000000000f1ef         add        rsi, rdi
000000000000f1f2         mov        qword [rdx], rax
000000000000f1f5         mov        qword [rdx+8], rsi

                     loc_f1f9:
000000000000f1f9         add        rcx, 0x1                                    ; CODE XREF=re_search_internal+5021
000000000000f1fd         add        rdx, 0x10
000000000000f201         cmp        rcx, qword [rsp+0x268+arg_0]
000000000000f209         jne        loc_f1d6

000000000000f20b         cmp        qword [rsp+0x268+var_1D0], 0x0
000000000000f214         jle        loc_f255

000000000000f216         mov        rdx, qword [rsp+0x268+var_1D0]
000000000000f21e         mov        rdi, qword [rsp+0x268+var_1B0]
000000000000f226         mov        rax, rcx
000000000000f229         shl        rax, 0x4
000000000000f22d         add        rdx, rcx
000000000000f230         lea        rax, qword [rdi+rax+8]
000000000000f235         shl        rdx, 0x4
000000000000f239         lea        rsi, qword [rdi+rdx+8]
000000000000f23e         mov        rdx, 0xffffffffffffffff

                     loc_f245:
000000000000f245         mov        qword [rax-8], rdx                          ; CODE XREF=re_search_internal+5139
000000000000f249         mov        qword [rax], rdx
000000000000f24c         add        rax, 0x10
000000000000f250         cmp        rsi, rax
000000000000f253         jne        loc_f245

                     loc_f255:
000000000000f255         mov        rax, qword [rsp+0x268+var_230]              ; CODE XREF=re_search_internal+5076
000000000000f25a         mov        rdi, qword [rsp+0x268+var_90]
000000000000f262         mov        r9, qword [rax+0xe0]
000000000000f269         test       r9, r9
000000000000f26c         je         loc_e998

000000000000f272         mov        r10, qword [rsp+0x268+var_1B0]
000000000000f27a         xor        r8d, r8d
000000000000f27d         lea        rdx, qword [r10+0x10]
000000000000f281         jmp        loc_f2b9

                     loc_f283:
000000000000f283         mov        rax, qword [r9+rsi*8-8]                     ; CODE XREF=re_search_internal+5248
000000000000f288         cmp        rax, r8
000000000000f28b         je         loc_f2b2

000000000000f28d         add        rax, 0x1
000000000000f291         shl        rax, 0x4
000000000000f295         mov        rax, qword [r10+rax]
000000000000f299         mov        qword [rdx], rax
000000000000f29c         mov        rax, qword [r9+rsi*8-8]
000000000000f2a1         add        rax, 0x1
000000000000f2a5         shl        rax, 0x4
000000000000f2a9         mov        rax, qword [r10+rax+8]
000000000000f2ae         mov        qword [rdx+8], rax

                     loc_f2b2:
000000000000f2b2         add        rdx, 0x10                                   ; CODE XREF=re_search_internal+5195
000000000000f2b6         mov        r8, rsi

                     loc_f2b9:
000000000000f2b9         lea        rsi, qword [r8+1]                           ; CODE XREF=re_search_internal+5185
000000000000f2bd         cmp        rsi, rcx
000000000000f2c0         jne        loc_f283

000000000000f2c2         jmp        loc_e998
000000000000f2c7         align      16

                     loc_f2d0:
000000000000f2d0         mov        rdi, qword [rsp+0x268+var_268]              ; CODE XREF=re_search_internal+2922
000000000000f2d4         call       match_ctx_clean                             ; match_ctx_clean
000000000000f2d9         mov        rdi, qword [rsp+0x268+var_50]               ; argument "__ptr" for method j_free
000000000000f2e1         call       j_free                                      ; free
000000000000f2e6         mov        rdi, qword [rsp+0x268+var_70]               ; argument "__ptr" for method j_free
000000000000f2ee         call       j_free                                      ; free
000000000000f2f3         jmp        loc_e9b0

                     loc_f2f8:
000000000000f2f8         mov        rax, qword [rsp+0x268+var_230]              ; CODE XREF=re_search_internal+915
000000000000f2fd         test       byte [rax+0xb0], 0x2
000000000000f304         jne        loc_e1d9

000000000000f30a         mov        qword [rsp+0x268+var_90], 0x0
000000000000f316         jmp        loc_e215

                     loc_f31b:
000000000000f31b         mov        rdi, r12                                    ; argument "__ptr" for method j_free, CODE XREF=re_search_internal+2584
000000000000f31e         call       j_free                                      ; free
000000000000f323         mov        rdi, rbp                                    ; argument "__ptr" for method j_free
000000000000f326         call       j_free                                      ; free
000000000000f32b         jmp        loc_ed70

                     loc_f330:
000000000000f330         mov        qword [rsp+0x268+var_190], rax              ; CODE XREF=re_search_internal+2828
000000000000f338         mov        rdi, qword [rsp+0x268+var_90]
000000000000f340         mov        dword [rsp+0x268+var_20C], 0x1
000000000000f348         jmp        loc_e998

                     loc_f34d:
000000000000f34d         test       rax, rax                                    ; CODE XREF=re_search_internal+3025
000000000000f350         mov        r13, rax
000000000000f353         jne        loc_e548

000000000000f359         jmp        loc_e694
000000000000f35e         align      32

                     loc_f360:
000000000000f360         mov        r13, rax                                    ; CODE XREF=re_search_internal+3034
000000000000f363         jmp        loc_e548

                     loc_f368:
000000000000f368         cmp        eax, 0xc                                    ; CODE XREF=re_search_internal+3139
000000000000f36b         je         loc_eeb0

000000000000f371         lea        rcx, qword [__PRETTY_FUNCTION__.7972]       ; argument "__function" for method j___assert_fail, "check_matching"
000000000000f378         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/regexec.c"
000000000000f37f         lea        rdi, qword [aErrRegespace]                  ; argument "__assertion" for method j___assert_fail, "err == REG_ESPACE"
000000000000f386         mov        edx, 0x46c                                  ; argument "__line" for method j___assert_fail
000000000000f38b         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_f390:
000000000000f390         cmp        byte [r14+0x68], 0x0                        ; CODE XREF=re_search_internal+1735
000000000000f395         js         loc_f406

                     loc_f397:
000000000000f397         mov        esi, dword [rsp+0x268+var_210]              ; CODE XREF=re_search_internal+5610
000000000000f39b         mov        rax, qword [rsp+0x268+var_260]
000000000000f3a0         test       esi, esi
000000000000f3a2         mov        qword [rsp+0x268+var_248], rax
000000000000f3a7         je         loc_e6a6

000000000000f3ad         mov        qword [rsp+0x268+var_238], 0x1
000000000000f3b6         jmp        loc_e50d

                     loc_f3bb:
000000000000f3bb         mov        rdi, rbx                                    ; CODE XREF=re_search_internal+2327
000000000000f3be         mov        dword [rsp+0x268+var_20C], 0xc
000000000000f3c6         jmp        loc_e998

                     loc_f3cb:
000000000000f3cb         lea        rbx, qword [r14+0x10]                       ; CODE XREF=re_search_internal+1692
000000000000f3cf         lea        rbp, qword [r14+0x18]
000000000000f3d3         mov        rdi, qword [rsp+0x268+var_268]
000000000000f3d7         xor        ecx, ecx
000000000000f3d9         mov        rdx, rbp
000000000000f3dc         mov        rsi, rbx
000000000000f3df         call       check_subexp_matching_top.isra.18           ; check_subexp_matching_top.isra.18
000000000000f3e4         test       eax, eax
000000000000f3e6         mov        dword [rsp+0x268+var_198], eax
000000000000f3ed         jne        loc_f438

000000000000f3ef         movzx      eax, byte [r14+0x68]
000000000000f3f4         test       al, 0x40
000000000000f3f6         jne        loc_f4e0

                     loc_f3fc:
000000000000f3fc         mov        byte [rsp+0x268+var_250], 0x0               ; CODE XREF=re_search_internal+5827
000000000000f401         jmp        loc_e4f3

                     loc_f406:
000000000000f406         mov        rsi, qword [r14+0x10]                       ; CODE XREF=re_search_internal+5461
000000000000f40a         mov        rcx, qword [rsp+0x268+var_260]
000000000000f40f         lea        rdx, qword [r14+0x18]
000000000000f413         mov        rdi, qword [rsp+0x268+var_268]
000000000000f417         call       check_halt_state_context.isra.20            ; check_halt_state_context.isra.20
000000000000f41c         test       rax, rax
000000000000f41f         mov        qword [rsp+0x268+var_238], rax
000000000000f424         je         loc_e50d

000000000000f42a         jmp        loc_f397

                     loc_f42f:
000000000000f42f         mov        r14, qword [rbx+0x60]                       ; CODE XREF=re_search_internal+4485
000000000000f433         jmp        loc_ee50

                     loc_f438:
000000000000f438         cdqe                                                   ; CODE XREF=re_search_internal+5549, re_search_internal+5816
000000000000f43a         mov        qword [rsp+0x268+var_248], rax
000000000000f43f         jmp        loc_e6a6

                     loc_f444:
000000000000f444         mov        r14, qword [rsp+0x268+var_250]              ; CODE XREF=re_search_internal+2534
000000000000f449         mov        eax, r15d

                     loc_f44c:
000000000000f44c         mov        rdi, r12                                    ; argument "__ptr" for method j_free, CODE XREF=re_search_internal+5787
000000000000f44f         mov        dword [rsp+0x268+var_260], eax
000000000000f453         call       j_free                                      ; free
000000000000f458         mov        rdi, r14                                    ; argument "__ptr" for method j_free
000000000000f45b         call       j_free                                      ; free
000000000000f460         mov        eax, dword [rsp+0x268+var_260]
000000000000f464         cmp        eax, 0x1
000000000000f467         je         loc_ed70

                     loc_f46d:
000000000000f46d         mov        rdi, qword [rsp+0x268+var_90]               ; CODE XREF=re_search_internal+4952
000000000000f475         mov        dword [rsp+0x268+var_20C], eax
000000000000f479         jmp        loc_e998
000000000000f47e         align      128

                     loc_f480:
000000000000f480         test       al, 0x4                                     ; CODE XREF=re_search_internal+4493
000000000000f482         je         loc_e4be

000000000000f488         mov        rdx, qword [r14+0x50]
000000000000f48c         mov        rdi, qword [rsp+0x268+var_240]
000000000000f491         mov        ecx, eax
000000000000f493         mov        rsi, rbx
000000000000f496         call       re_acquire_state_context                    ; re_acquire_state_context
000000000000f49b         mov        r14, rax
000000000000f49e         jmp        loc_ee50

                     loc_f4a3:
000000000000f4a3         mov        r15, qword [rsp+0x268+var_258]              ; CODE XREF=re_search_internal+2545, re_search_internal+2556
000000000000f4a8         mov        rcx, qword [rsp+0x268+var_260]
000000000000f4ad         mov        rdx, rbp
000000000000f4b0         mov        rsi, r12
000000000000f4b3         mov        qword [rsp+0x268+var_248], r14
000000000000f4b8         mov        rdi, r15
000000000000f4bb         call       merge_state_array                           ; merge_state_array
000000000000f4c0         mov        rdi, rbp                                    ; argument "__ptr" for method j_free
000000000000f4c3         mov        dword [rsp+0x268+var_260], eax
000000000000f4c7         call       j_free                                      ; free
000000000000f4cc         mov        eax, dword [rsp+0x268+var_260]
000000000000f4d0         test       eax, eax
000000000000f4d2         je         loc_f0a2

                     loc_f4d8:
000000000000f4d8         xor        r14d, r14d                                  ; CODE XREF=re_search_internal+4689
000000000000f4db         jmp        loc_f44c

                     loc_f4e0:
000000000000f4e0         mov        rdi, qword [rsp+0x268+var_268]              ; CODE XREF=re_search_internal+5558
000000000000f4e4         mov        rdx, rbp
000000000000f4e7         mov        rsi, rbx
000000000000f4ea         call       transit_state_bkref.isra.34                 ; transit_state_bkref.isra.34
000000000000f4ef         test       eax, eax
000000000000f4f1         mov        dword [rsp+0x268+var_198], eax
000000000000f4f8         jne        loc_f438

000000000000f4fe         movzx      eax, byte [r14+0x68]
000000000000f503         jmp        loc_f3fc

                     loc_f508:
000000000000f508         mov        rsi, qword [rsp+0x268+var_1B0]              ; CODE XREF=re_search_internal+4772
000000000000f510         mov        rax, qword [rsp+0x268+var_A0]
000000000000f518         mov        qword [rsi], 0x0
000000000000f51f         mov        qword [rsi+8], rax

                     loc_f523:
000000000000f523         xor        eax, eax                                    ; CODE XREF=re_search_internal+4864, re_search_internal+4879
000000000000f525         jmp        loc_f1a1

                     loc_f52a:
000000000000f52a         cmp        r10, rax                                    ; CODE XREF=re_search_internal+5030
000000000000f52d         je         loc_f54c

000000000000f52f         mov        rax, qword [r9+rax*8]

                     loc_f533:
000000000000f533         cmp        r10, rsi                                    ; CODE XREF=re_search_internal+5903
000000000000f536         mov        qword [rdx], rax
000000000000f539         je         loc_f544

000000000000f53b         mov        rsi, qword [r9+rsi*8]
000000000000f53f         jmp        loc_f1ec

                     loc_f544:
000000000000f544         mov        rsi, r8                                     ; CODE XREF=re_search_internal+5881
000000000000f547         jmp        loc_f1ec

                     loc_f54c:
000000000000f54c         mov        rax, r8                                     ; CODE XREF=re_search_internal+5869
000000000000f54f         jmp        loc_f533

                     loc_f551:
000000000000f551         mov        qword [rsp+0x268+var_190], rbp              ; CODE XREF=re_search_internal+1396, re_search_internal+2737
000000000000f559         jmp        loc_e418

                     loc_f55e:
000000000000f55e         mov        qword [rsp+0x268+var_100], rax              ; CODE XREF=re_search_internal+2126
000000000000f566         jmp        loc_e694

                     loc_f56b:
000000000000f56b         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=re_search_internal+2958
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_78: int64_t, -120
        ;    var_7C: int32_t, -124
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208


                     update_cur_sifted_state:
000000000000f570         push       r15                                         ; End of unwind block (FDE at 0x17830), Begin of unwind block (FDE at 0x17880), CODE XREF=sift_states_backward+112, sift_states_backward+655
000000000000f572         push       r14
000000000000f574         mov        rax, rdi
000000000000f577         push       r13
000000000000f579         push       r12
000000000000f57b         mov        r13, rsi
000000000000f57e         push       rbp
000000000000f57f         push       rbx
000000000000f580         mov        rbp, rdx
000000000000f583         mov        rbx, rcx
000000000000f586         lea        rcx, qword [rdx*8]
000000000000f58e         sub        rsp, 0xa8
000000000000f595         mov        r12, qword [rax+0x98]
000000000000f59c         mov        rax, qword [rax+0xb8]
000000000000f5a3         mov        qword [rsp+0xd8+var_D0], rdi
000000000000f5a8         mov        qword [rsp+0xd8+var_C0], rcx
000000000000f5ad         mov        rdi, qword [fs:0x28]
000000000000f5b6         mov        qword [rsp+0xd8+var_40], rdi
000000000000f5be         xor        edi, edi
000000000000f5c0         mov        rdx, qword [rax+rdx*8]
000000000000f5c4         mov        dword [rsp+0xd8+var_7C], 0x0
000000000000f5cc         mov        rcx, qword [rbx+8]
000000000000f5d0         test       rdx, rdx
000000000000f5d3         je         loc_f828

000000000000f5d9         lea        rdi, qword [rdx+8]
000000000000f5dd         test       rcx, rcx
000000000000f5e0         mov        qword [rsp+0xd8+var_C8], rdi
000000000000f5e5         jne        loc_f638

000000000000f5e7         mov        rdx, qword [rsi]
000000000000f5ea         mov        qword [rdx+rbp*8], 0x0
000000000000f5f2         mov        rdx, qword [rax+rbp*8]
000000000000f5f6         xor        eax, eax
000000000000f5f8         test       byte [rdx+0x68], 0x40
000000000000f5fc         jne        loc_f6df

000000000000f602         nop        word [rax+rax]

                     loc_f608:
000000000000f608         mov        rdi, qword [rsp+0xd8+var_40]                ; CODE XREF=update_cur_sifted_state+233, update_cur_sifted_state+274, update_cur_sifted_state+321, update_cur_sifted_state+333, update_cur_sifted_state+361, update_cur_sifted_state+725, update_cur_sifted_state+738, update_cur_sifted_state+888, update_cur_sifted_state+1107, update_cur_sifted_state+1297, update_cur_sifted_state+1455
000000000000f610         xor        rdi, qword [fs:0x28]
000000000000f619         jne        loc_fdbb

000000000000f61f         add        rsp, 0xa8
000000000000f626         pop        rbx
000000000000f627         pop        rbp
000000000000f628         pop        r12
000000000000f62a         pop        r13
000000000000f62c         pop        r14
000000000000f62e         pop        r15
000000000000f630         ret
                        ; endp
000000000000f631         align      8

                     loc_f638:
000000000000f638         lea        rdi, qword [rsp+0xd8+var_78]                ; CODE XREF=update_cur_sifted_state+117
000000000000f63d         mov        rdx, rbx
000000000000f640         mov        rsi, r12
000000000000f643         mov        dword [rsp+0xd8+var_78], 0x0
000000000000f64b         call       re_acquire_state                            ; re_acquire_state
000000000000f650         mov        rdx, rax
000000000000f653         mov        eax, dword [rsp+0xd8+var_78]
000000000000f657         test       eax, eax
000000000000f659         jne        loc_f608

000000000000f65b         mov        r15, qword [rdx+0x38]
000000000000f65f         lea        r14, qword [rdx+0x38]
000000000000f663         test       r15, r15
000000000000f666         je         loc_f870

                     loc_f66c:
000000000000f66c         mov        rsi, qword [rsp+0xd8+var_C8]                ; CODE XREF=update_cur_sifted_state+827, update_cur_sifted_state+840
000000000000f671         mov        rdx, r14
000000000000f674         mov        rdi, rbx
000000000000f677         call       re_node_set_add_intersect                   ; re_node_set_add_intersect
000000000000f67c         test       eax, eax
000000000000f67e         mov        dword [rsp+0xd8+var_7C], eax
000000000000f682         jne        loc_f608

000000000000f684         cmp        qword [r13+0x28], 0x0
000000000000f689         jne        loc_f900

                     loc_f68f:
000000000000f68f         mov        r14, qword [rsp+0xd8+var_C0]                ; CODE XREF=update_cur_sifted_state+1155
000000000000f694         add        r14, qword [r13]

                     loc_f698:
000000000000f698         lea        rdi, qword [rsp+0xd8+var_7C]                ; CODE XREF=update_cur_sifted_state+905
000000000000f69d         mov        rdx, rbx
000000000000f6a0         mov        rsi, r12
000000000000f6a3         call       re_acquire_state                            ; re_acquire_state
000000000000f6a8         mov        qword [r14], rax
000000000000f6ab         mov        eax, dword [rsp+0xd8+var_7C]
000000000000f6af         test       eax, eax
000000000000f6b1         jne        loc_f608

000000000000f6b7         cmp        qword [rsp+0xd8+var_C8], 0x0
000000000000f6bd         je         loc_f608

000000000000f6c3         mov        rax, qword [rsp+0xd8+var_D0]
000000000000f6c8         mov        rax, qword [rax+0xb8]
000000000000f6cf         mov        rdx, qword [rax+rbp*8]
000000000000f6d3         xor        eax, eax
000000000000f6d5         test       byte [rdx+0x68], 0x40
000000000000f6d9         je         loc_f608

                     loc_f6df:
000000000000f6df         mov        rax, qword [rsp+0xd8+var_D0]                ; CODE XREF=update_cur_sifted_state+140
000000000000f6e4         xor        ebx, ebx
000000000000f6e6         mov        rsi, qword [rax+0xc8]
000000000000f6ed         mov        rdx, rsi

                     loc_f6f0:
000000000000f6f0         cmp        rbx, rdx                                    ; CODE XREF=update_cur_sifted_state+759
000000000000f6f3         jge        loc_f753

000000000000f6f5         lea        rax, qword [rbx+rdx]
000000000000f6f9         mov        rcx, rax
000000000000f6fc         shr        rcx, 0x3f
000000000000f700         add        rcx, rax
000000000000f703         mov        rax, qword [rsp+0xd8+var_D0]
000000000000f708         sar        rcx, 0x1
000000000000f70b         mov        rdi, qword [rax+0xd8]
000000000000f712         lea        rax, qword [rcx+rcx*4]
000000000000f716         cmp        rbp, qword [rdi+rax*8+8]
000000000000f71b         jle        loc_f74e

000000000000f71d         jmp        loc_f857
000000000000f722         align      8

                     loc_f728:
000000000000f728         lea        rdx, qword [rbx+rcx]                        ; CODE XREF=update_cur_sifted_state+481
000000000000f72c         mov        rax, rdx
000000000000f72f         shr        rax, 0x3f
000000000000f733         add        rax, rdx
000000000000f736         sar        rax, 0x1
000000000000f739         lea        rdx, qword [rax+rax*4]
000000000000f73d         mov        r8, rax
000000000000f740         cmp        rbp, qword [rdi+rdx*8+8]
000000000000f745         jg         loc_f860

000000000000f74b         mov        rcx, rax

                     loc_f74e:
000000000000f74e         cmp        rbx, rcx                                    ; CODE XREF=update_cur_sifted_state+427
000000000000f751         jl         loc_f728

                     loc_f753:
000000000000f753         cmp        rsi, rbx                                    ; CODE XREF=update_cur_sifted_state+387
000000000000f756         jle        loc_f850

000000000000f75c         lea        rax, qword [rbx+rbx*4]
000000000000f760         lea        rsi, qword [rax*8]
000000000000f768         mov        rax, qword [rsp+0xd8+var_D0]
000000000000f76d         mov        qword [rsp+0xd8+var_98], rsi
000000000000f772         mov        rax, qword [rax+0xd8]
000000000000f779         cmp        rbp, qword [rax+rsi+8]
000000000000f77e         jne        loc_f850

000000000000f784         cmp        rbx, 0xffffffffffffffff
000000000000f788         je         loc_f850

000000000000f78e         mov        rax, qword [rsp+0xd8+var_D0]
000000000000f793         mov        qword [rsp+0xd8+var_78], 0x0
000000000000f79c         mov        r12, qword [rax+0x98]
000000000000f7a3         mov        rax, qword [rsp+0xd8+var_C8]
000000000000f7a8         cmp        qword [rax+8], 0x0
000000000000f7ad         jle        loc_f850

000000000000f7b3         lea        rax, qword [rsp+0xd8+var_78]
000000000000f7b8         mov        qword [rsp+0xd8+var_B8], 0x0
000000000000f7c1         mov        qword [rsp+0xd8+var_90], rbx
000000000000f7c6         mov        r15, r13
000000000000f7c9         mov        qword [rsp+0xd8+var_A0], rax
000000000000f7ce         jmp        loc_f7f2

                     loc_f7d0:
000000000000f7d0         cmp        al, 0x4                                     ; CODE XREF=update_cur_sifted_state+679, update_cur_sifted_state+685
000000000000f7d2         je         loc_fb58

                     loc_f7d8:
000000000000f7d8         mov        rcx, qword [rsp+0xd8+var_C8]                ; CODE XREF=update_cur_sifted_state+687, update_cur_sifted_state+1987
000000000000f7dd         add        qword [rsp+0xd8+var_B8], 0x1
000000000000f7e3         mov        rax, qword [rsp+0xd8+var_B8]
000000000000f7e8         cmp        rax, qword [rcx+8]
000000000000f7ec         jge        loc_fdab

                     loc_f7f2:
000000000000f7f2         mov        rax, qword [rsp+0xd8+var_C8]                ; CODE XREF=update_cur_sifted_state+606
000000000000f7f7         mov        rdi, qword [rsp+0xd8+var_B8]
000000000000f7fc         mov        rax, qword [rax+0x10]
000000000000f800         mov        r14, qword [rax+rdi*8]
000000000000f804         mov        rax, r14
000000000000f807         shl        rax, 0x4
000000000000f80b         add        rax, qword [r12]
000000000000f80f         cmp        r14, qword [r15+0x10]
000000000000f813         movzx      eax, byte [rax+8]
000000000000f817         jne        loc_f7d0

000000000000f819         cmp        rbp, qword [r15+0x18]
000000000000f81d         jne        loc_f7d0

000000000000f81f         jmp        loc_f7d8
000000000000f821         align      8

                     loc_f828:
000000000000f828         lea        r14, qword [rbp*8]                          ; CODE XREF=update_cur_sifted_state+99
000000000000f830         add        r14, qword [rsi]
000000000000f833         test       rcx, rcx
000000000000f836         jne        loc_f8f0

000000000000f83c         mov        qword [r14], 0x0
000000000000f843         xor        eax, eax
000000000000f845         jmp        loc_f608
000000000000f84a         align      16

                     loc_f850:
000000000000f850         xor        eax, eax                                    ; CODE XREF=update_cur_sifted_state+486, update_cur_sifted_state+526, update_cur_sifted_state+536, update_cur_sifted_state+573, update_cur_sifted_state+2113
000000000000f852         jmp        loc_f608

                     loc_f857:
000000000000f857         mov        r8, rcx                                     ; CODE XREF=update_cur_sifted_state+429
000000000000f85a         mov        rcx, rdx
000000000000f85d         nop        dword [rax]

                     loc_f860:
000000000000f860         lea        rbx, qword [r8+1]                           ; CODE XREF=update_cur_sifted_state+469
000000000000f864         mov        rdx, rcx
000000000000f867         jmp        loc_f6f0
000000000000f86c         align      16

                     loc_f870:
000000000000f870         mov        rdi, qword [rbx+8]                          ; CODE XREF=update_cur_sifted_state+246
000000000000f874         mov        qword [rdx+0x40], 0x0
000000000000f87c         mov        qword [rsp+0xd8+var_B8], rdx
000000000000f881         mov        qword [rdx+0x38], rdi
000000000000f885         shl        rdi, 0x3                                    ; argument "__size" for method j_malloc
000000000000f889         call       j_malloc                                    ; malloc
000000000000f88e         mov        rdx, qword [rsp+0xd8+var_B8]
000000000000f893         test       rax, rax
000000000000f896         mov        qword [rdx+0x48], rax
000000000000f89a         je         loc_f8e3

000000000000f89c         cmp        qword [rbx+8], 0x0
000000000000f8a1         mov        dword [rsp+0xd8+var_78], 0x0
000000000000f8a9         jg         loc_f8be

000000000000f8ab         jmp        loc_f66c

                     loc_f8b0:
000000000000f8b0         add        r15, 0x1                                    ; CODE XREF=update_cur_sifted_state+881
000000000000f8b4         cmp        r15, qword [rbx+8]
000000000000f8b8         jge        loc_f66c

                     loc_f8be:
000000000000f8be         mov        rax, qword [rbx+0x10]                       ; CODE XREF=update_cur_sifted_state+825
000000000000f8c2         mov        rdi, r14
000000000000f8c5         mov        rax, qword [rax+r15*8]
000000000000f8c9         lea        rdx, qword [rax+rax*2]
000000000000f8cd         mov        rax, qword [r12+0x38]
000000000000f8d2         lea        rsi, qword [rax+rdx*8]
000000000000f8d6         call       re_node_set_merge                           ; re_node_set_merge
000000000000f8db         test       eax, eax
000000000000f8dd         mov        dword [rsp+0xd8+var_78], eax
000000000000f8e1         je         loc_f8b0

                     loc_f8e3:
000000000000f8e3         mov        eax, 0xc                                    ; CODE XREF=update_cur_sifted_state+810
000000000000f8e8         jmp        loc_f608
000000000000f8ed         align      16

                     loc_f8f0:
000000000000f8f0         mov        qword [rsp+0xd8+var_C8], 0x0                ; CODE XREF=update_cur_sifted_state+710
000000000000f8f9         jmp        loc_f698
000000000000f8fe         align      256

                     loc_f900:
000000000000f900         mov        rax, qword [rsp+0xd8+var_D0]                ; CODE XREF=update_cur_sifted_state+281
000000000000f905         mov        rax, qword [rax+0xd8]
000000000000f90c         mov        qword [rsp+0xd8+var_B8], rax
000000000000f911         jle        loc_f9eb

000000000000f917         xor        r15d, r15d
000000000000f91a         nop        word [rax+rax]

                     loc_f920:
000000000000f920         mov        rax, qword [r13+0x30]                       ; CODE XREF=update_cur_sifted_state+1141
000000000000f924         mov        rdi, qword [rsp+0xd8+var_B8]
000000000000f929         mov        rax, qword [rax+r15*8]
000000000000f92d         lea        rax, qword [rax+rax*4]
000000000000f931         lea        rdx, qword [rdi+rax*8]
000000000000f935         cmp        rbp, qword [rdx+0x10]
000000000000f939         jle        loc_f9dd

000000000000f93f         cmp        rbp, qword [rdx+8]
000000000000f943         jg         loc_f9dd

000000000000f949         mov        rcx, qword [rdx]
000000000000f94c         mov        rax, qword [r12]
000000000000f950         mov        rsi, qword [rbx+8]
000000000000f954         shl        rcx, 0x4
000000000000f958         cmp        rbp, qword [rdx+0x18]
000000000000f95c         mov        r8, qword [rax+rcx]
000000000000f960         je         loc_fa00

000000000000f966         xor        r14d, r14d
000000000000f969         test       rsi, rsi
000000000000f96c         jle        loc_f9dd

000000000000f96e         mov        qword [rsp+0xd8+var_B0], rbp
000000000000f973         mov        rbp, r8
000000000000f976         jmp        loc_f98e
000000000000f978         align      128

                     loc_f980:
000000000000f980         add        r14, 0x1                                    ; CODE XREF=update_cur_sifted_state+1082, update_cur_sifted_state+1087
000000000000f984         cmp        r14, qword [rbx+8]
000000000000f988         jge        loc_f9d8

                     loc_f98a:
000000000000f98a         mov        rax, qword [r12]                            ; CODE XREF=update_cur_sifted_state+1121

                     loc_f98e:
000000000000f98e         mov        rdx, qword [rbx+0x10]                       ; CODE XREF=update_cur_sifted_state+1030
000000000000f992         mov        rsi, qword [rdx+r14*8]
000000000000f996         mov        rdx, rsi
000000000000f999         shl        rdx, 0x4
000000000000f99d         add        rax, rdx
000000000000f9a0         movzx      edx, byte [rax+8]
000000000000f9a4         sub        edx, 0x8
000000000000f9a7         cmp        edx, 0x1
000000000000f9aa         ja         loc_f980

000000000000f9ac         cmp        rbp, qword [rax]
000000000000f9af         jne        loc_f980

000000000000f9b1         mov        rcx, qword [rsp+0xd8+var_C8]
000000000000f9b6         mov        rdx, rbx
000000000000f9b9         mov        rdi, r12
000000000000f9bc         call       sub_epsilon_src_nodes                       ; sub_epsilon_src_nodes
000000000000f9c1         test       eax, eax
000000000000f9c3         jne        loc_f608

000000000000f9c9         add        r14, 0x1
000000000000f9cd         cmp        r14, qword [rbx+8]
000000000000f9d1         jl         loc_f98a

000000000000f9d3         nop        dword [rax+rax]

                     loc_f9d8:
000000000000f9d8         mov        rbp, qword [rsp+0xd8+var_B0]                ; CODE XREF=update_cur_sifted_state+1048

                     loc_f9dd:
000000000000f9dd         add        r15, 0x1                                    ; CODE XREF=update_cur_sifted_state+969, update_cur_sifted_state+979, update_cur_sifted_state+1020, update_cur_sifted_state+1171, update_cur_sifted_state+1306, update_cur_sifted_state+1317, update_cur_sifted_state+1484, update_cur_sifted_state+1501
000000000000f9e1         cmp        r15, qword [r13+0x28]
000000000000f9e5         jl         loc_f920

                     loc_f9eb:
000000000000f9eb         mov        dword [rsp+0xd8+var_7C], 0x0                ; CODE XREF=update_cur_sifted_state+929
000000000000f9f3         jmp        loc_f68f
000000000000f9f8         align      512

                     loc_fa00:
000000000000fa00         test       rsi, rsi                                    ; CODE XREF=update_cur_sifted_state+1008
000000000000fa03         jle        loc_f9dd

000000000000fa05         mov        r10, qword [rbx+0x10]
000000000000fa09         mov        r9, 0xffffffffffffffff
000000000000fa10         lea        r11, qword [r10+rsi*8]
000000000000fa14         mov        rcx, r10
000000000000fa17         mov        rsi, r9
000000000000fa1a         jmp        loc_fa36
000000000000fa1c         align      32

                     loc_fa20:
000000000000fa20         cmp        r14d, 0x9                                   ; CODE XREF=update_cur_sifted_state+1244
000000000000fa24         jne        loc_fa2d

000000000000fa26         cmp        r8, qword [rdx]
000000000000fa29         cmove      r9, rdi

                     loc_fa2d:
000000000000fa2d         add        rcx, 0x8                                    ; CODE XREF=update_cur_sifted_state+1204
000000000000fa31         cmp        r11, rcx
000000000000fa34         je         loc_fa5e

                     loc_fa36:
000000000000fa36         mov        rdi, qword [rcx]                            ; CODE XREF=update_cur_sifted_state+1194, update_cur_sifted_state+1260
000000000000fa39         mov        rdx, rdi
000000000000fa3c         shl        rdx, 0x4
000000000000fa40         add        rdx, rax
000000000000fa43         movzx      r14d, byte [rdx+8]
000000000000fa48         cmp        r14d, 0x8
000000000000fa4c         jne        loc_fa20

000000000000fa4e         cmp        r8, qword [rdx]
000000000000fa51         cmove      rsi, rdi
000000000000fa55         add        rcx, 0x8
000000000000fa59         cmp        r11, rcx
000000000000fa5c         jne        loc_fa36

                     loc_fa5e:
000000000000fa5e         test       rsi, rsi                                    ; CODE XREF=update_cur_sifted_state+1220
000000000000fa61         mov        r14, r9
000000000000fa64         mov        qword [rsp+0xd8+var_B0], r9
000000000000fa69         js         loc_fb30

000000000000fa6f         mov        rcx, qword [rsp+0xd8+var_C8]
000000000000fa74         mov        rdx, rbx
000000000000fa77         mov        rdi, r12
000000000000fa7a         call       sub_epsilon_src_nodes                       ; sub_epsilon_src_nodes
000000000000fa7f         test       eax, eax
000000000000fa81         jne        loc_f608

000000000000fa87         test       r14, r14
000000000000fa8a         js         loc_f9dd

000000000000fa90         cmp        qword [rbx+8], 0x0
000000000000fa95         jle        loc_f9dd

000000000000fa9b         mov        r10, qword [rbx+0x10]

                     loc_fa9f:
000000000000fa9f         xor        r14d, r14d                                  ; CODE XREF=update_cur_sifted_state+1478
000000000000faa2         mov        qword [rsp+0xd8+var_A8], rbp
000000000000faa7         mov        rbp, r14
000000000000faaa         mov        r14, qword [rsp+0xd8+var_B0]
000000000000faaf         jmp        loc_faca
000000000000fab1         align      8

                     loc_fab8:
000000000000fab8         add        rbp, 0x1                                    ; CODE XREF=update_cur_sifted_state+1409, update_cur_sifted_state+1432, update_cur_sifted_state+1465
000000000000fabc         cmp        rbp, qword [rbx+8]
000000000000fac0         jge        loc_fb48

000000000000fac6         mov        r10, qword [rbx+0x10]

                     loc_faca:
000000000000faca         mov        r10, qword [r10+rbp*8]                      ; CODE XREF=update_cur_sifted_state+1343
000000000000face         mov        rax, qword [r12+0x38]
000000000000fad3         mov        rdx, r14
000000000000fad6         lea        r9, qword [r10+r10*2]
000000000000fada         shl        r9, 0x3
000000000000fade         add        rax, r9
000000000000fae1         mov        rdi, qword [rax+8]
000000000000fae5         lea        rsi, qword [rax+0x10]
000000000000fae9         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000faee         test       rax, rax
000000000000faf1         jne        loc_fab8

000000000000faf3         add        r9, qword [r12+0x30]
000000000000faf8         mov        rdi, qword [r9+8]
000000000000fafc         lea        rsi, qword [r9+0x10]
000000000000fb00         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000fb05         test       rax, rax
000000000000fb08         jne        loc_fab8

000000000000fb0a         mov        rcx, qword [rsp+0xd8+var_C8]
000000000000fb0f         mov        rdx, rbx
000000000000fb12         mov        rsi, r10
000000000000fb15         mov        rdi, r12
000000000000fb18         call       sub_epsilon_src_nodes                       ; sub_epsilon_src_nodes
000000000000fb1d         test       eax, eax
000000000000fb1f         jne        loc_f608

000000000000fb25         sub        rbp, 0x1
000000000000fb29         jmp        loc_fab8
000000000000fb2b         align      16

                     loc_fb30:
000000000000fb30         cmp        qword [rsp+0xd8+var_B0], 0x0                ; CODE XREF=update_cur_sifted_state+1273
000000000000fb36         jns        loc_fa9f

000000000000fb3c         jmp        loc_f9dd
000000000000fb41         align      8

                     loc_fb48:
000000000000fb48         mov        rbp, qword [rsp+0xd8+var_A8]                ; CODE XREF=update_cur_sifted_state+1360
000000000000fb4d         jmp        loc_f9dd
000000000000fb52         align      8

                     loc_fb58:
000000000000fb58         mov        rax, qword [rsp+0xd8+var_D0]                ; CODE XREF=update_cur_sifted_state+610
000000000000fb5d         mov        r13, qword [rsp+0xd8+var_98]
000000000000fb62         mov        rbx, qword [rsp+0xd8+var_90]
000000000000fb67         add        r13, qword [rax+0xd8]
000000000000fb6e         lea        rax, qword [r14+r14*2]
000000000000fb72         shl        rax, 0x3
000000000000fb76         mov        qword [rsp+0xd8+var_A8], rax
000000000000fb7b         lea        rax, qword [r14*8]
000000000000fb83         mov        qword [rsp+0xd8+var_B0], rax
000000000000fb88         mov        rax, r15
000000000000fb8b         mov        r15, r13
000000000000fb8e         mov        r13, rbx
000000000000fb91         mov        rbx, rax
000000000000fb94         jmp        loc_fcfe
000000000000fb99         align      32

                     loc_fba0:
000000000000fba0         mov        rax, qword [r15+0x18]                       ; CODE XREF=update_cur_sifted_state+1937
000000000000fba4         sub        rax, qword [r15+0x10]
000000000000fba8         test       rax, rax
000000000000fbab         lea        r9, qword [rbp+rax]
000000000000fbb0         je         loc_fd10

000000000000fbb6         mov        rax, qword [r12+0x18]
000000000000fbbb         mov        rsi, qword [rsp+0xd8+var_B0]
000000000000fbc0         mov        r10, qword [rax+rsi]

                     loc_fbc4:
000000000000fbc4         cmp        r9, qword [rbx+0x18]                        ; CODE XREF=update_cur_sifted_state+1970
000000000000fbc8         jg         loc_fd07

000000000000fbce         mov        rax, qword [rbx]
000000000000fbd1         mov        rax, qword [rax+r9*8]
000000000000fbd5         test       rax, rax
000000000000fbd8         je         loc_fd07

000000000000fbde         mov        rdi, qword [rax+0x10]
000000000000fbe2         lea        rsi, qword [rax+0x18]
000000000000fbe6         mov        rdx, r10
000000000000fbe9         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000fbee         test       rax, rax
000000000000fbf1         je         loc_fd07

000000000000fbf7         sub        rsp, 0x8
000000000000fbfb         lea        rdx, qword [rbx+0x30]
000000000000fbff         lea        rsi, qword [rbx+0x28]
000000000000fc03         push       r9
000000000000fc05         mov        rdi, qword [rsp+0xe8+var_D0]
000000000000fc0a         mov        rcx, r14
000000000000fc0d         mov        r9, r10
000000000000fc10         mov        r8, rbp
000000000000fc13         call       check_dst_limits.isra.13                    ; check_dst_limits.isra.13
000000000000fc18         test       al, al
000000000000fc1a         pop        rdx
000000000000fc1b         pop        rcx
000000000000fc1c         jne        loc_fd07

000000000000fc22         cmp        qword [rsp+0xd8+var_78], 0x0
000000000000fc28         je         loc_fd38

                     loc_fc2e:
000000000000fc2e         mov        rax, qword [rsp+0xd8+var_A0]                ; CODE XREF=update_cur_sifted_state+2056
000000000000fc33         mov        rsi, r13
000000000000fc36         mov        qword [rsp+0xd8+var_68], r14
000000000000fc3b         mov        qword [rsp+0xd8+var_60], rbp
000000000000fc40         lea        rdi, qword [rax+0x20]
000000000000fc44         call       re_node_set_insert                          ; re_node_set_insert
000000000000fc49         test       al, al
000000000000fc4b         je         loc_fda4

000000000000fc51         mov        rdi, qword [rsp+0xd8+var_C0]
000000000000fc56         mov        rax, qword [rsp+0xd8+var_78]
000000000000fc5b         mov        rsi, qword [rsp+0xd8+var_A0]
000000000000fc60         mov        r15, qword [rax+rdi]
000000000000fc64         mov        rdi, qword [rsp+0xd8+var_D0]
000000000000fc69         call       sift_states_backward                        ; sift_states_backward
000000000000fc6e         test       eax, eax
000000000000fc70         jne        loc_fd7e

000000000000fc76         mov        rsi, qword [rbx+8]
000000000000fc7a         mov        rdx, qword [rsp+0xd8+var_78]
000000000000fc7f         test       rsi, rsi
000000000000fc82         je         loc_fc9d

000000000000fc84         lea        rcx, qword [rbp+1]
000000000000fc88         mov        rdi, r12
000000000000fc8b         call       merge_state_array                           ; merge_state_array
000000000000fc90         test       eax, eax
000000000000fc92         jne        loc_fd7e

000000000000fc98         mov        rdx, qword [rsp+0xd8+var_78]

                     loc_fc9d:
000000000000fc9d         mov        r11, qword [rsp+0xd8+var_A0]                ; CODE XREF=update_cur_sifted_state+1810
000000000000fca2         mov        rax, qword [rsp+0xd8+var_C0]
000000000000fca7         mov        rdi, qword [rsp+0xd8+var_50]
000000000000fcaf         lea        r9, qword [r11+0x30]
000000000000fcb3         mov        qword [rdx+rax], r15
000000000000fcb7         mov        rdx, r13
000000000000fcba         mov        rsi, r9
000000000000fcbd         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000fcc2         sub        rax, 0x1
000000000000fcc6         mov        rdx, rax
000000000000fcc9         js         loc_fcd7

000000000000fccb         lea        rdi, qword [r11+0x28]
000000000000fccf         mov        rsi, r9
000000000000fcd2         call       re_node_set_remove_at.isra.4.part.5         ; re_node_set_remove_at.isra.4.part.5

                     loc_fcd7:
000000000000fcd7         mov        rcx, qword [rsp+0xd8+var_D0]                ; CODE XREF=update_cur_sifted_state+1881
000000000000fcdc         lea        rax, qword [r13+r13*4]
000000000000fce1         mov        rdx, qword [rcx+0xd8]
000000000000fce8         lea        rax, qword [rdx+rax*8]
000000000000fcec         nop        dword [rax]

                     loc_fcf0:
000000000000fcf0         add        r13, 0x1                                    ; CODE XREF=update_cur_sifted_state+1946
000000000000fcf4         cmp        byte [rax+0x20], 0x0
000000000000fcf8         lea        r15, qword [rax+0x28]
000000000000fcfc         je         loc_fd30

                     loc_fcfe:
000000000000fcfe         cmp        r14, qword [r15]                            ; CODE XREF=update_cur_sifted_state+1572
000000000000fd01         je         loc_fba0

                     loc_fd07:
000000000000fd07         mov        rax, r15                                    ; CODE XREF=update_cur_sifted_state+1624, update_cur_sifted_state+1640, update_cur_sifted_state+1665, update_cur_sifted_state+1708
000000000000fd0a         jmp        loc_fcf0
000000000000fd0c         align      16

                     loc_fd10:
000000000000fd10         mov        rax, qword [r12+0x28]                       ; CODE XREF=update_cur_sifted_state+1600
000000000000fd15         mov        rdi, qword [rsp+0xd8+var_A8]
000000000000fd1a         mov        rax, qword [rax+rdi+0x10]
000000000000fd1f         mov        r10, qword [rax]
000000000000fd22         jmp        loc_fbc4
000000000000fd27         align      16

                     loc_fd30:
000000000000fd30         mov        r15, rbx                                    ; CODE XREF=update_cur_sifted_state+1932
000000000000fd33         jmp        loc_f7d8

                     loc_fd38:
000000000000fd38         mov        rax, qword [rbx+0x30]                       ; CODE XREF=update_cur_sifted_state+1720
000000000000fd3c         lea        rsi, qword [rbx+0x20]
000000000000fd40         movdqa     xmm0, xmmword [rbx]
000000000000fd44         mov        qword [rsp+0xd8+var_48], rax
000000000000fd4c         mov        rax, qword [rsp+0xd8+var_A0]
000000000000fd51         movaps     xmmword [rsp+0xd8+var_78], xmm0
000000000000fd56         lea        rdi, qword [rax+0x20]
000000000000fd5a         movdqa     xmm0, xmmword [rbx+0x10]
000000000000fd5f         movaps     xmmword [rsp+0xd8+var_68], xmm0
000000000000fd64         movdqa     xmm0, xmmword [rbx+0x20]
000000000000fd69         movaps     xmmword [rsp+0xd8+var_58], xmm0
000000000000fd71         call       re_node_set_init_copy                       ; re_node_set_init_copy
000000000000fd76         test       eax, eax
000000000000fd78         je         loc_fc2e

                     loc_fd7e:
000000000000fd7e         cmp        qword [rsp+0xd8+var_78], 0x0                ; CODE XREF=update_cur_sifted_state+1792, update_cur_sifted_state+1826, update_cur_sifted_state+2105
000000000000fd84         je         loc_f608

                     loc_fd8a:
000000000000fd8a         mov        rdi, qword [rsp+0xd8+var_48]                ; argument "__ptr" for method j_free, CODE XREF=update_cur_sifted_state+2121
000000000000fd92         mov        dword [rsp+0xd8+var_D0], eax
000000000000fd96         call       j_free                                      ; free
000000000000fd9b         mov        eax, dword [rsp+0xd8+var_D0]
000000000000fd9f         jmp        loc_f608

                     loc_fda4:
000000000000fda4         mov        eax, 0xc                                    ; CODE XREF=update_cur_sifted_state+1755
000000000000fda9         jmp        loc_fd7e

                     loc_fdab:
000000000000fdab         cmp        qword [rsp+0xd8+var_78], 0x0                ; CODE XREF=update_cur_sifted_state+636
000000000000fdb1         je         loc_f850

000000000000fdb7         xor        eax, eax
000000000000fdb9         jmp        loc_fd8a

                     loc_fdbb:
000000000000fdbb         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=update_cur_sifted_state+169
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_40: int8_t, -64


                     parse_bracket_element.constprop.37:
000000000000fdc0         push       r14                                         ; End of unwind block (FDE at 0x17880), Begin of unwind block (FDE at 0x178e0), CODE XREF=sub_10fe0+271, sub_10fe0+1639
000000000000fdc2         push       r13
000000000000fdc4         mov        r10, rsi
000000000000fdc7         push       r12
000000000000fdc9         push       rbp
000000000000fdca         movsxd     r11, ecx
000000000000fdcd         push       rbx
000000000000fdce         mov        rbp, rdx
000000000000fdd1         mov        rbx, rdi
000000000000fdd4         sub        rsp, 0x20
000000000000fdd8         mov        r12, qword [rsi+0x48]
000000000000fddc         mov        rax, qword [fs:0x28]
000000000000fde5         mov        qword [rsp+0x48+var_30], rax
000000000000fdea         xor        eax, eax
000000000000fdec         cmp        dword [rsi+0x90], 0x1
000000000000fdf3         je         loc_fe48

000000000000fdf5         mov        rsi, r12
000000000000fdf8         mov        rdi, r10
000000000000fdfb         call       re_string_char_size_at.part.0               ; re_string_char_size_at.part.0
000000000000fe00         cmp        eax, 0x1
000000000000fe03         jle        loc_fe48

000000000000fe05         mov        rdx, qword [r10+0x10]
000000000000fe09         cdqe
000000000000fe0b         mov        dword [rbx], 0x1
000000000000fe11         add        rax, r12
000000000000fe14         mov        edx, dword [rdx+r12*4]
000000000000fe18         mov        dword [rbx+8], edx
000000000000fe1b         mov        qword [r10+0x48], rax
000000000000fe1f         xor        eax, eax

                     loc_fe21:
000000000000fe21         mov        rcx, qword [rsp+0x48+var_30]                ; CODE XREF=parse_bracket_element.constprop.37+189, parse_bracket_element.constprop.37+353, parse_bracket_element.constprop.37+493, parse_bracket_element.constprop.37+528, parse_bracket_element.constprop.37+569, parse_bracket_element.constprop.37+582, parse_bracket_element.constprop.37+595
000000000000fe26         xor        rcx, qword [fs:0x28]
000000000000fe2f         jne        loc_10018

000000000000fe35         add        rsp, 0x20
000000000000fe39         pop        rbx
000000000000fe3a         pop        rbp
000000000000fe3b         pop        r12
000000000000fe3d         pop        r13
000000000000fe3f         pop        r14
000000000000fe41         ret
                        ; endp
000000000000fe42         align      8

                     loc_fe48:
000000000000fe48         movzx      eax, byte [rbp+8]                           ; CODE XREF=parse_bracket_element.constprop.37+51, parse_bracket_element.constprop.37+67
000000000000fe4c         add        r11, r12
000000000000fe4f         mov        qword [r10+0x48], r11
000000000000fe53         mov        edx, eax
000000000000fe55         and        edx, 0xfffffffb
000000000000fe58         cmp        dl, 0x1a
000000000000fe5b         je         loc_fe80

000000000000fe5d         cmp        al, 0x1c
000000000000fe5f         je         loc_fe80

000000000000fe61         cmp        al, 0x16
000000000000fe63         jne        loc_fe6e

000000000000fe65         test       r9b, r9b
000000000000fe68         je         loc_ffb2

                     loc_fe6e:
000000000000fe6e         movzx      eax, byte [rbp]                             ; CODE XREF=parse_bracket_element.constprop.37+163, parse_bracket_element.constprop.37+522
000000000000fe72         mov        dword [rbx], 0x0
000000000000fe78         mov        byte [rbx+8], al
000000000000fe7b         xor        eax, eax
000000000000fe7d         jmp        loc_fe21
000000000000fe7f         align      128

                     loc_fe80:
000000000000fe80         mov        r12, qword [r10+0x68]                       ; CODE XREF=parse_bracket_element.constprop.37+155, parse_bracket_element.constprop.37+159
000000000000fe84         cmp        r11, r12
000000000000fe87         jge        loc_ffa8

000000000000fe8d         movzx      r13d, byte [rbp]
000000000000fe92         xor        r8d, r8d
000000000000fe95         jmp        loc_fec2
000000000000fe97         align      32

                     loc_fea0:
000000000000fea0         mov        rax, qword [rbx+8]                          ; CODE XREF=parse_bracket_element.constprop.37+294, parse_bracket_element.constprop.37+304
000000000000fea4         mov        byte [rax+r8], r9b
000000000000fea8         add        r8, 0x1
000000000000feac         cmp        r8, 0x20
000000000000feb0         je         loc_ffa8

000000000000feb6         movzx      eax, byte [rbp+8]
000000000000feba         mov        r11, qword [r10+0x48]
000000000000febe         mov        r12, qword [r10+0x68]

                     loc_fec2:
000000000000fec2         cmp        al, 0x1e                                    ; CODE XREF=parse_bracket_element.constprop.37+213
000000000000fec4         movsxd     r14, r8d
000000000000fec7         je         loc_ff30

                     loc_fec9:
000000000000fec9         mov        rdx, qword [r10+8]                          ; CODE XREF=parse_bracket_element.constprop.37+376, parse_bracket_element.constprop.37+407, parse_bracket_element.constprop.37+436
000000000000fecd         lea        rax, qword [r11+1]
000000000000fed1         mov        qword [r10+0x48], rax
000000000000fed5         movzx      r9d, byte [rdx+r11]

                     loc_feda:
000000000000feda         cmp        rax, r12                                    ; CODE XREF=parse_bracket_element.constprop.37+477, parse_bracket_element.constprop.37+556
000000000000fedd         jge        loc_ffa8

000000000000fee3         cmp        r13b, r9b
000000000000fee6         jne        loc_fea0

000000000000fee8         mov        rdx, qword [r10+8]
000000000000feec         cmp        byte [rdx+rax], 0x5d
000000000000fef0         jne        loc_fea0

000000000000fef2         add        rax, 0x1
000000000000fef6         mov        qword [r10+0x48], rax
000000000000fefa         mov        rax, qword [rbx+8]
000000000000fefe         mov        byte [rax+r14], 0x0
000000000000ff03         movzx      eax, byte [rbp+8]
000000000000ff07         cmp        al, 0x1c
000000000000ff09         je         loc_1000b

000000000000ff0f         cmp        al, 0x1e
000000000000ff11         je         loc_fffe

000000000000ff17         cmp        al, 0x1a
000000000000ff19         je         loc_fff1

000000000000ff1f         xor        eax, eax
000000000000ff21         jmp        loc_fe21
000000000000ff26         align      16

                     loc_ff30:
000000000000ff30         cmp        byte [r10+0x8b], 0x0                        ; CODE XREF=parse_bracket_element.constprop.37+263
000000000000ff38         je         loc_fec9

000000000000ff3a         cmp        byte [r10+0x8c], 0x0
000000000000ff42         je         loc_ffd8

000000000000ff48         cmp        r11, qword [r10+0x30]
000000000000ff4c         je         loc_ff5d

000000000000ff4e         mov        rax, qword [r10+0x10]
000000000000ff52         cmp        dword [rax+r11*4], 0xffffffff
000000000000ff57         je         loc_fec9

                     loc_ff5d:
000000000000ff5d         mov        rax, qword [r10+0x18]                       ; CODE XREF=parse_bracket_element.constprop.37+396
000000000000ff61         mov        rax, qword [rax+r11*8]
000000000000ff65         add        rax, qword [r10]
000000000000ff68         add        rax, qword [r10+0x28]
000000000000ff6c         movzx      r9d, byte [rax]
000000000000ff70         test       r9b, 0x80
000000000000ff74         jne        loc_fec9

000000000000ff7a         cmp        dword [r10+0x90], 0x1
000000000000ff82         mov        eax, 0x1
000000000000ff87         je         loc_ff96

000000000000ff89         mov        rsi, r11
000000000000ff8c         mov        rdi, r10
000000000000ff8f         call       re_string_char_size_at.part.0               ; re_string_char_size_at.part.0
000000000000ff94         cdqe

                     loc_ff96:
000000000000ff96         add        rax, r11                                    ; CODE XREF=parse_bracket_element.constprop.37+455
000000000000ff99         mov        qword [r10+0x48], rax
000000000000ff9d         jmp        loc_feda
000000000000ffa2         align      8

                     loc_ffa8:
000000000000ffa8         mov        eax, 0x7                                    ; CODE XREF=parse_bracket_element.constprop.37+199, parse_bracket_element.constprop.37+240, parse_bracket_element.constprop.37+285
000000000000ffad         jmp        loc_fe21

                     loc_ffb2:
000000000000ffb2         mov        rdi, rsp                                    ; CODE XREF=parse_bracket_element.constprop.37+168
000000000000ffb5         mov        rdx, r8
000000000000ffb8         mov        rsi, r10
000000000000ffbb         call       peek_token_bracket                          ; peek_token_bracket
000000000000ffc0         cmp        byte [rsp+0x48+var_40], 0x15
000000000000ffc5         mov        eax, 0xb
000000000000ffca         je         loc_fe6e

000000000000ffd0         jmp        loc_fe21
000000000000ffd5         align      8

                     loc_ffd8:
000000000000ffd8         lea        rax, qword [r11+1]                          ; CODE XREF=parse_bracket_element.constprop.37+386
000000000000ffdc         add        r11, qword [r10]
000000000000ffdf         mov        rdx, qword [r10+0x28]
000000000000ffe3         mov        qword [r10+0x48], rax
000000000000ffe7         movzx      r9d, byte [r11+rdx]
000000000000ffec         jmp        loc_feda

                     loc_fff1:
000000000000fff1         mov        dword [rbx], 0x3                            ; CODE XREF=parse_bracket_element.constprop.37+345
000000000000fff7         xor        eax, eax
000000000000fff9         jmp        loc_fe21

                     loc_fffe:
000000000000fffe         mov        dword [rbx], 0x4                            ; CODE XREF=parse_bracket_element.constprop.37+337
0000000000010004         xor        eax, eax
0000000000010006         jmp        loc_fe21

                     loc_1000b:
000000000001000b         mov        dword [rbx], 0x2                            ; CODE XREF=parse_bracket_element.constprop.37+329
0000000000010011         xor        eax, eax
0000000000010013         jmp        loc_fe21

                     loc_10018:
0000000000010018         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=parse_bracket_element.constprop.37+111
                        ; endp
000000000001001d         align      32                                          ; End of unwind block (FDE at 0x178e0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_50: int8_t, -80
        ;    var_58: int8_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104


                     peek_token:
0000000000010020         push       r15                                         ; Begin of unwind block (FDE at 0x17924), CODE XREF=peek_token+1722, fetch_number+41, parse_expression+139, sub_10870+292, sub_10870+385, sub_10870+1077, sub_10ea0+304, sub_10fe0+789, sub_10fe0+2010, parse_reg_exp+266, re_compile_internal+1168
0000000000010022         push       r14
0000000000010024         push       r13
0000000000010026         push       r12
0000000000010028         push       rbp
0000000000010029         push       rbx
000000000001002a         mov        rbp, rdi
000000000001002d         sub        rsp, 0x38
0000000000010031         mov        r14, qword [rsi+0x48]
0000000000010035         mov        rax, qword [fs:0x28]
000000000001003e         mov        qword [rsp+0x68+var_40], rax
0000000000010043         xor        eax, eax
0000000000010045         cmp        qword [rsi+0x68], r14
0000000000010049         jle        loc_100e0

000000000001004f         movzx      r13d, byte [rdi+0xa]
0000000000010054         mov        r15, rdx
0000000000010057         mov        rdx, qword [rsi+8]
000000000001005b         mov        rbx, rsi
000000000001005e         movzx      r12d, byte [rdx+r14]
0000000000010063         and        r13d, 0xffffff9f
0000000000010067         mov        byte [rdi+0xa], r13b
000000000001006b         mov        eax, dword [rsi+0x90]
0000000000010071         mov        byte [rdi], r12b
0000000000010074         cmp        eax, 0x1
0000000000010077         jle        loc_10110

000000000001007d         cmp        r14, qword [rsi+0x30]
0000000000010081         je         loc_10220

0000000000010087         mov        rcx, qword [rsi+0x10]
000000000001008b         mov        ecx, dword [rcx+r14*4]
000000000001008f         cmp        ecx, 0xffffffff
0000000000010092         je         loc_10170

0000000000010098         cmp        r12b, 0x5c
000000000001009c         je         loc_10190

00000000000100a2         mov        byte [rdi+8], 0x1

                     loc_100a6:
00000000000100a6         mov        edi, ecx                                    ; argument "__wc" for method j_iswalnum, CODE XREF=peek_token+534
00000000000100a8         mov        qword [rsp+0x68+var_60], rdx
00000000000100ad         mov        dword [rsp+0x68+var_68], ecx
00000000000100b0         call       j_iswalnum                                  ; iswalnum
00000000000100b5         mov        ecx, dword [rsp+0x68+var_68]
00000000000100b8         test       eax, eax
00000000000100ba         setne      al
00000000000100bd         cmp        ecx, 0x5f
00000000000100c0         sete       cl
00000000000100c3         or         eax, ecx
00000000000100c5         shl        eax, 0x6
00000000000100c8         or         r13d, eax
00000000000100cb         mov        byte [rbp+0xa], r13b
00000000000100cf         mov        rdx, qword [rsp+0x68+var_60]
00000000000100d4         jmp        loc_1014c
00000000000100d6         align      32

                     loc_100e0:
00000000000100e0         mov        byte [rdi+8], 0x2                           ; CODE XREF=peek_token+41

                     loc_100e4:
00000000000100e4         mov        rdi, qword [rsp+0x68+var_40]                ; CODE XREF=peek_token+353, peek_token+553, peek_token+579, peek_token+589, peek_token+625, peek_token+659, peek_token+669, peek_token+714, peek_token+729, peek_token+748, peek_token+758
00000000000100e9         xor        rdi, qword [fs:0x28]
00000000000100f2         jne        loc_10718

00000000000100f8         add        rsp, 0x38
00000000000100fc         pop        rbx
00000000000100fd         pop        rbp
00000000000100fe         pop        r12
0000000000010100         pop        r13
0000000000010102         pop        r14
0000000000010104         pop        r15
0000000000010106         ret
                        ; endp
0000000000010107         align      16

                     loc_10110:
0000000000010110         cmp        r12b, 0x5c                                  ; CODE XREF=peek_token+87
0000000000010114         je         loc_10190

0000000000010116         mov        byte [rbp+8], 0x1
000000000001011a         mov        qword [rsp+0x68+var_68], rdx
000000000001011e         call       j___ctype_b_loc                             ; __ctype_b_loc
0000000000010123         mov        rsi, qword [rax]
0000000000010126         movzx      ecx, r12b
000000000001012a         movzx      eax, word [rsi+rcx*2]
000000000001012e         shr        ax, 0x3
0000000000010132         and        eax, 0x1
0000000000010135         cmp        r12b, 0x5f
0000000000010139         sete       cl
000000000001013c         or         eax, ecx
000000000001013e         shl        eax, 0x6
0000000000010141         or         r13d, eax
0000000000010144         mov        byte [rbp+0xa], r13b
0000000000010148         mov        rdx, qword [rsp+0x68+var_68]

                     loc_1014c:
000000000001014c         sub        r12d, 0xa                                   ; CODE XREF=peek_token+180
0000000000010150         cmp        r12b, 0x73
0000000000010154         ja         loc_1028c

000000000001015a         lea        rcx, qword [switch_table_15074]             ; switch_table_15074
0000000000010161         movzx      r12d, r12b
0000000000010165         movsxd     rax, dword [rcx+r12*4]
0000000000010169         add        rax, rcx
000000000001016c         jmp        rax                                         ; switch statement using table at 0x15074, with 116 cases, 0x10250,0x10278,0x1028c,0x102a0,0x102c8,0x102f0,0x10300,0x10320,0x10330,0x10350,0x10370,0x10380,0x103a0,0x103c0
000000000001016e         align      16

                     loc_10170:
0000000000010170         or         r13d, 0x20                                  ; CODE XREF=peek_token+114
0000000000010174         mov        byte [rdi+8], 0x1
0000000000010178         mov        eax, 0x1
000000000001017d         mov        byte [rdi+0xa], r13b
0000000000010181         jmp        loc_100e4
0000000000010186         align      16

                     loc_10190:
0000000000010190         lea        rsi, qword [r14+1]                          ; CODE XREF=peek_token+124, peek_token+244, peek_token+516
0000000000010194         cmp        rsi, qword [rbx+0x58]
0000000000010198         jge        loc_10240

000000000001019e         cmp        byte [rbx+0x8b], 0x0
00000000000101a5         jne        loc_10630

                     loc_101ab:
00000000000101ab         movzx      edi, byte [rdx+r14+1]                       ; CODE XREF=peek_token+1647
00000000000101b1         mov        r12d, edi
00000000000101b4         mov        dword [rsp+0x68+var_60], edi

                     loc_101b8:
00000000000101b8         cmp        eax, 0x1                                    ; CODE XREF=peek_token+1653, peek_token+1702
00000000000101bb         mov        byte [rbp], r12b
00000000000101bf         mov        byte [rbp+8], 0x1
00000000000101c3         jle        loc_10610

00000000000101c9         mov        rax, qword [rbx+0x10]
00000000000101cd         mov        r8d, dword [rax+rsi*4]

                     loc_101d1:
00000000000101d1         mov        edi, r8d                                    ; argument "__wc" for method j_iswalnum, CODE XREF=peek_token+1779
00000000000101d4         mov        dword [rsp+0x68+var_68], r8d
00000000000101d8         call       j_iswalnum                                  ; iswalnum
00000000000101dd         mov        r8d, dword [rsp+0x68+var_68]
00000000000101e1         test       eax, eax
00000000000101e3         setne      al
00000000000101e6         cmp        r8d, 0x5f

                     loc_101ea:
00000000000101ea         sete       dl                                          ; CODE XREF=peek_token+1547
00000000000101ed         lea        ecx, dword [r12-0x27]
00000000000101f2         or         eax, edx
00000000000101f4         shl        eax, 0x6
00000000000101f7         or         r13d, eax
00000000000101fa         cmp        cl, 0x56
00000000000101fd         mov        byte [rbp+0xa], r13b
0000000000010201         ja         loc_10605

0000000000010207         lea        rdx, qword [switch_table_15244]             ; switch_table_15244
000000000001020e         movzx      ecx, cl
0000000000010211         movsxd     rax, dword [rdx+rcx*4]
0000000000010215         add        rax, rdx
0000000000010218         jmp        rax                                         ; switch statement using table at 0x15244, with 87 cases, 0x103e9,0x10404,0x10422,0x1043d,0x10458,0x10476,0x10498,0x104ba,0x104d5,0x104f0,0x10512,0x1052d,0x1054f,0x10571,0x1059a,0x105b5,0x105cc,0x105e3,0x10605
000000000001021a         align      32

                     loc_10220:
0000000000010220         cmp        r12b, 0x5c                                  ; CODE XREF=peek_token+97
0000000000010224         je         loc_10190

000000000001022a         mov        rax, qword [rbx+0x10]
000000000001022e         mov        byte [rbp+8], 0x1
0000000000010232         mov        ecx, dword [rax+r14*4]
0000000000010236         jmp        loc_100a6
000000000001023b         align      64

                     loc_10240:
0000000000010240         mov        byte [rbp+8], 0x24                          ; CODE XREF=peek_token+376
0000000000010244         mov        eax, 0x1
0000000000010249         jmp        loc_100e4
000000000001024e         align      16

                     loc_10250:
0000000000010250         and        r15d, 0x1200                                ; case 115, CODE XREF=peek_token+332
0000000000010257         mov        eax, 0x1
000000000001025c         cmp        r15, 0x1200
0000000000010263         jne        loc_100e4

                     loc_10269:
0000000000010269         mov        byte [rbp+8], 0x18                          ; CODE XREF=peek_token+1105
000000000001026d         jmp        loc_100e4
0000000000010272         align      8

                     loc_10278:
0000000000010278         and        r15d, 0x8400                                ; case 114, CODE XREF=peek_token+332
000000000001027f         cmp        r15, 0x8000
0000000000010286         je         loc_10362

                     loc_1028c:
000000000001028c         mov        eax, 0x1                                    ; case 112, CODE XREF=peek_token+308, peek_token+332, peek_token+1664, peek_token+1677
0000000000010291         jmp        loc_100e4
0000000000010296         align      32

                     loc_102a0:
00000000000102a0         and        r15d, 0x1200                                ; case 113, CODE XREF=peek_token+332
00000000000102a7         mov        eax, 0x1
00000000000102ac         cmp        r15, 0x1200
00000000000102b3         jne        loc_100e4

                     loc_102b9:
00000000000102b9         mov        byte [rbp+8], 0x17                          ; CODE XREF=peek_token+1021
00000000000102bd         jmp        loc_100e4
00000000000102c2         align      8

                     loc_102c8:
00000000000102c8         test       r15d, 0x800008                              ; case 84, CODE XREF=peek_token+332
00000000000102cf         jne        loc_102da

00000000000102d1         test       r14, r14
00000000000102d4         jne        loc_1069a

                     loc_102da:
00000000000102da         mov        byte [rbp+8], 0xc                           ; CODE XREF=peek_token+687, peek_token+1683
00000000000102de         mov        dword [rbp], 0x10
00000000000102e5         mov        eax, 0x1
00000000000102ea         jmp        loc_100e4
00000000000102ef         align      16

                     loc_102f0:
00000000000102f0         mov        byte [rbp+8], 0x14                          ; case 81, CODE XREF=peek_token+332
00000000000102f4         mov        eax, 0x1
00000000000102f9         jmp        loc_100e4
00000000000102fe         align      256

                     loc_10300:
0000000000010300         test       r15d, 0x402                                 ; case 53, CODE XREF=peek_token+332
0000000000010307         mov        eax, 0x1
000000000001030c         jne        loc_100e4

                     loc_10312:
0000000000010312         mov        byte [rbp+8], 0x13                          ; CODE XREF=peek_token+1288
0000000000010316         jmp        loc_100e4
000000000001031b         align      32

                     loc_10320:
0000000000010320         mov        byte [rbp+8], 0x5                           ; case 36, CODE XREF=peek_token+332
0000000000010324         mov        eax, 0x1
0000000000010329         jmp        loc_100e4
000000000001032e         align      16

                     loc_10330:
0000000000010330         test       r15d, 0x402                                 ; case 33, CODE XREF=peek_token+332
0000000000010337         mov        eax, 0x1
000000000001033c         jne        loc_100e4

                     loc_10342:
0000000000010342         mov        byte [rbp+8], 0x12                          ; CODE XREF=peek_token+1424
0000000000010346         jmp        loc_100e4
000000000001034b         align      16

                     loc_10350:
0000000000010350         test       r15d, 0x800                                 ; case 0, CODE XREF=peek_token+332
0000000000010357         mov        eax, 0x1
000000000001035c         je         loc_100e4

                     loc_10362:
0000000000010362         mov        byte [rbp+8], 0xa                           ; CODE XREF=peek_token+614
0000000000010366         mov        eax, 0x1
000000000001036b         jmp        loc_100e4

                     loc_10370:
0000000000010370         mov        byte [rbp+8], 0xb                           ; case 32, CODE XREF=peek_token+332
0000000000010374         mov        eax, 0x1
0000000000010379         jmp        loc_100e4
000000000001037e         align      128

                     loc_10380:
0000000000010380         test       r15d, 0x2000                                ; case 31, CODE XREF=peek_token+332
0000000000010387         mov        eax, 0x1
000000000001038c         je         loc_100e4

                     loc_10392:
0000000000010392         mov        byte [rbp+8], 0x9                           ; CODE XREF=peek_token+1447
0000000000010396         jmp        loc_100e4
000000000001039b         align      32

                     loc_103a0:
00000000000103a0         test       r15d, 0x2000                                ; case 30, CODE XREF=peek_token+332
00000000000103a7         mov        eax, 0x1
00000000000103ac         je         loc_100e4

                     loc_103b2:
00000000000103b2         mov        byte [rbp+8], 0x8                           ; CODE XREF=peek_token+1470
00000000000103b6         jmp        loc_100e4
00000000000103bb         align      64

                     loc_103c0:
00000000000103c0         test       r15b, 0x8                                   ; case 26, CODE XREF=peek_token+332
00000000000103c4         jne        loc_103d4

00000000000103c6         add        r14, 0x1
00000000000103ca         cmp        r14, qword [rbx+0x58]
00000000000103ce         jne        loc_106cb

                     loc_103d4:
00000000000103d4         mov        byte [rbp+8], 0xc                           ; CODE XREF=peek_token+932, peek_token+1754
00000000000103d8         mov        dword [rbp], 0x20
00000000000103df         mov        eax, 0x1
00000000000103e4         jmp        loc_100e4

                     loc_103e9:
00000000000103e9         test       r15d, 0x8400                                ; case 85, CODE XREF=peek_token+504
00000000000103f0         mov        eax, 0x2
00000000000103f5         jne        loc_100e4

00000000000103fb         mov        byte [rbp+8], 0xa
00000000000103ff         jmp        loc_100e4

                     loc_10404:
0000000000010404         and        r15d, 0x1200                                ; case 84, CODE XREF=peek_token+504
000000000001040b         mov        eax, 0x2
0000000000010410         cmp        r15, 0x200
0000000000010417         jne        loc_100e4

000000000001041d         jmp        loc_102b9

                     loc_10422:
0000000000010422         test       r15d, 0x80000                               ; case 80, CODE XREF=peek_token+504
0000000000010429         mov        eax, 0x2
000000000001042e         jne        loc_100e4

0000000000010434         mov        byte [rbp+8], 0x20
0000000000010438         jmp        loc_100e4

                     loc_1043d:
000000000001043d         test       r15d, 0x80000                               ; case 76, CODE XREF=peek_token+504
0000000000010444         mov        eax, 0x2
0000000000010449         jne        loc_100e4

000000000001044f         mov        byte [rbp+8], 0x22
0000000000010453         jmp        loc_100e4

                     loc_10458:
0000000000010458         and        r15d, 0x1200                                ; case 86, CODE XREF=peek_token+504
000000000001045f         mov        eax, 0x2
0000000000010464         cmp        r15, 0x200
000000000001046b         jne        loc_100e4

0000000000010471         jmp        loc_10269

                     loc_10476:
0000000000010476         test       r15d, 0x80000                               ; case 59, CODE XREF=peek_token+504
000000000001047d         mov        eax, 0x2
0000000000010482         jne        loc_100e4

0000000000010488         mov        byte [rbp+8], 0xc
000000000001048c         mov        dword [rbp], 0x100
0000000000010493         jmp        loc_100e4

                     loc_10498:
0000000000010498         test       r15d, 0x80000                               ; case 57, CODE XREF=peek_token+504
000000000001049f         mov        eax, 0x2
00000000000104a4         jne        loc_100e4

00000000000104aa         mov        byte [rbp+8], 0xc
00000000000104ae         mov        dword [rbp], 0x40
00000000000104b5         jmp        loc_100e4

                     loc_104ba:
00000000000104ba         test       r15d, 0x80000                               ; case 48, CODE XREF=peek_token+504
00000000000104c1         mov        eax, 0x2
00000000000104c6         jne        loc_100e4

00000000000104cc         mov        byte [rbp+8], 0x21
00000000000104d0         jmp        loc_100e4

                     loc_104d5:
00000000000104d5         test       r15d, 0x80000                               ; case 44, CODE XREF=peek_token+504
00000000000104dc         mov        eax, 0x2
00000000000104e1         jne        loc_100e4

00000000000104e7         mov        byte [rbp+8], 0x23
00000000000104eb         jmp        loc_100e4

                     loc_104f0:
00000000000104f0         test       r15d, 0x80000                               ; case 27, CODE XREF=peek_token+504
00000000000104f7         mov        eax, 0x2
00000000000104fc         jne        loc_100e4

0000000000010502         mov        byte [rbp+8], 0xc
0000000000010506         mov        dword [rbp], 0x200
000000000001050d         jmp        loc_100e4

                     loc_10512:
0000000000010512         and        r15d, 0x402                                 ; case 24, CODE XREF=peek_token+504
0000000000010519         mov        eax, 0x2
000000000001051e         cmp        r15, 0x2
0000000000010522         jne        loc_100e4

0000000000010528         jmp        loc_10312

                     loc_1052d:
000000000001052d         test       r15d, 0x80000                               ; case 23, CODE XREF=peek_token+504
0000000000010534         mov        eax, 0x2
0000000000010539         jne        loc_100e4

000000000001053f         mov        byte [rbp+8], 0xc
0000000000010543         mov        dword [rbp], 0x9
000000000001054a         jmp        loc_100e4

                     loc_1054f:
000000000001054f         test       r15d, 0x80000                               ; case 21, CODE XREF=peek_token+504
0000000000010556         mov        eax, 0x2
000000000001055b         jne        loc_100e4

0000000000010561         mov        byte [rbp+8], 0xc
0000000000010565         mov        dword [rbp], 0x6
000000000001056c         jmp        loc_100e4

                     loc_10571:
0000000000010571         test       r15d, 0x4000                                ; case 18, CODE XREF=peek_token+504
0000000000010578         mov        eax, 0x2
000000000001057d         jne        loc_100e4

0000000000010583         mov        edx, dword [rsp+0x68+var_60]
0000000000010587         mov        byte [rbp+8], 0x4
000000000001058b         sub        edx, 0x31
000000000001058e         movsxd     rdx, edx
0000000000010591         mov        qword [rbp], rdx
0000000000010595         jmp        loc_100e4

                     loc_1059a:
000000000001059a         and        r15d, 0x402                                 ; case 4, CODE XREF=peek_token+504
00000000000105a1         mov        eax, 0x2
00000000000105a6         cmp        r15, 0x2
00000000000105aa         jne        loc_100e4

00000000000105b0         jmp        loc_10342

                     loc_105b5:
00000000000105b5         test       r15d, 0x2000                                ; case 2, CODE XREF=peek_token+504
00000000000105bc         mov        eax, 0x2
00000000000105c1         jne        loc_100e4

00000000000105c7         jmp        loc_10392

                     loc_105cc:
00000000000105cc         test       r15d, 0x2000                                ; case 1, CODE XREF=peek_token+504
00000000000105d3         mov        eax, 0x2
00000000000105d8         jne        loc_100e4

00000000000105de         jmp        loc_103b2

                     loc_105e3:
00000000000105e3         test       r15d, 0x80000                               ; case 0, CODE XREF=peek_token+504
00000000000105ea         mov        eax, 0x2
00000000000105ef         jne        loc_100e4

00000000000105f5         mov        byte [rbp+8], 0xc
00000000000105f9         mov        dword [rbp], 0x80
0000000000010600         jmp        loc_100e4

                     loc_10605:
0000000000010605         mov        eax, 0x2                                    ; case 83, CODE XREF=peek_token+481, peek_token+504
000000000001060a         jmp        loc_100e4
000000000001060f         align      16

                     loc_10610:
0000000000010610         call       j___ctype_b_loc                             ; __ctype_b_loc, CODE XREF=peek_token+419
0000000000010615         mov        rsi, qword [rax]
0000000000010618         movzx      edx, r12b
000000000001061c         movzx      eax, word [rsi+rdx*2]
0000000000010620         shr        ax, 0x3
0000000000010624         and        eax, 0x1
0000000000010627         cmp        r12b, 0x5f
000000000001062b         jmp        loc_101ea

                     loc_10630:
0000000000010630         cmp        eax, 0x1                                    ; CODE XREF=peek_token+389
0000000000010633         jle        loc_10664

0000000000010635         mov        rcx, qword [rbx+0x10]
0000000000010639         lea        rdi, qword [rsi*4]
0000000000010641         mov        r8d, dword [rcx+rsi*4]
0000000000010645         cmp        r8d, 0xffffffff
0000000000010649         je         loc_106ff

000000000001064f         lea        r9, qword [r14+2]
0000000000010653         cmp        qword [rbx+0x30], r9
0000000000010657         je         loc_10664

0000000000010659         cmp        dword [rcx+rdi+4], 0xffffffff
000000000001065e         je         loc_106ff

                     loc_10664:
0000000000010664         cmp        byte [rbx+0x8c], 0x0                        ; CODE XREF=peek_token+1555, peek_token+1591
000000000001066b         mov        rcx, qword [rbx]
000000000001066e         mov        rdi, qword [rbx+0x28]
0000000000010672         je         loc_106b8

0000000000010674         mov        r8, qword [rbx+0x18]
0000000000010678         add        rcx, rdi
000000000001067b         add        rcx, qword [r8+rsi*8]
000000000001067f         movzx      edi, byte [rcx]
0000000000010682         mov        r12d, edi
0000000000010685         mov        dword [rsp+0x68+var_60], edi
0000000000010689         and        edi, 0x80
000000000001068f         jne        loc_101ab

0000000000010695         jmp        loc_101b8

                     loc_1069a:
000000000001069a         cmp        byte [rdx+r14-1], 0xa                       ; CODE XREF=peek_token+692
00000000000106a0         jne        loc_1028c

00000000000106a6         test       r15d, 0x800
00000000000106ad         je         loc_1028c

00000000000106b3         jmp        loc_102da

                     loc_106b8:
00000000000106b8         add        rcx, rsi                                    ; CODE XREF=peek_token+1618
00000000000106bb         movzx      edi, byte [rcx+rdi]
00000000000106bf         mov        r12d, edi
00000000000106c2         mov        dword [rsp+0x68+var_60], edi
00000000000106c6         jmp        loc_101b8

                     loc_106cb:
00000000000106cb         lea        rdi, qword [rsp+0x68+var_58]                ; CODE XREF=peek_token+942
00000000000106d0         mov        rdx, r15
00000000000106d3         mov        qword [rbx+0x48], r14
00000000000106d7         mov        rsi, rbx
00000000000106da         call       peek_token                                  ; peek_token
00000000000106df         movzx      eax, byte [rsp+0x68+var_50]
00000000000106e4         sub        qword [rbx+0x48], 0x1
00000000000106e9         lea        edx, dword [rax-9]
00000000000106ec         mov        eax, 0x1
00000000000106f1         cmp        dl, 0x1
00000000000106f4         ja         loc_100e4

00000000000106fa         jmp        loc_103d4

                     loc_106ff:
00000000000106ff         movzx      eax, byte [rdx+r14+1]                       ; CODE XREF=peek_token+1577, peek_token+1598
0000000000010705         mov        byte [rbp+8], 0x1
0000000000010709         mov        r12d, eax
000000000001070c         mov        byte [rbp], al
000000000001070f         mov        dword [rsp+0x68+var_60], eax
0000000000010713         jmp        loc_101d1

                     loc_10718:
0000000000010718         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=peek_token+210
                        ; endp
000000000001071d         align      32                                          ; End of unwind block (FDE at 0x17924)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fetch_number:
0000000000010720         push       r14                                         ; Begin of unwind block (FDE at 0x17970), CODE XREF=sub_10870+1175, sub_10870+1409
0000000000010722         mov        r14, rdi
0000000000010725         push       r13
0000000000010727         mov        r13, rsi
000000000001072a         push       r12
000000000001072c         mov        r12, 0xfffffffffffffffe
0000000000010733         push       rbp
0000000000010734         mov        rbp, rdx
0000000000010737         push       rbx
0000000000010738         mov        rbx, 0xffffffffffffffff
000000000001073f         nop

                     loc_10740:
0000000000010740         mov        rdx, rbp                                    ; CODE XREF=fetch_number+82, fetch_number+135, fetch_number+177
0000000000010743         mov        rsi, r14
0000000000010746         mov        rdi, r13
0000000000010749         call       peek_token                                  ; peek_token
000000000001074e         cdqe
0000000000010750         add        qword [r14+0x48], rax
0000000000010754         movzx      eax, byte [r13+8]
0000000000010759         movzx      edx, byte [r13]
000000000001075e         cmp        al, 0x2
0000000000010760         je         loc_107b0

0000000000010762         cmp        al, 0x18
0000000000010764         je         loc_107b7

0000000000010766         cmp        dl, 0x2c
0000000000010769         je         loc_107b7

000000000001076b         cmp        al, 0x1
000000000001076d         je         loc_10778

                     loc_1076f:
000000000001076f         mov        rbx, r12                                    ; CODE XREF=fetch_number+93, fetch_number+99
0000000000010772         jmp        loc_10740
0000000000010774         align      8

                     loc_10778:
0000000000010778         lea        eax, dword [rdx-0x30]                       ; CODE XREF=fetch_number+77
000000000001077b         cmp        al, 0x9
000000000001077d         ja         loc_1076f

000000000001077f         cmp        rbx, 0xfffffffffffffffe
0000000000010783         je         loc_1076f

0000000000010785         cmp        rbx, 0xffffffffffffffff
0000000000010789         je         loc_107c8

000000000001078b         lea        rax, qword [rbx+rbx*4]
000000000001078f         lea        rbx, qword [rdx+rax*2]
0000000000010793         mov        eax, 0x8030
0000000000010798         cmp        rbx, 0x8030
000000000001079f         cmovg      rbx, rax
00000000000107a3         sub        rbx, 0x30
00000000000107a7         jmp        loc_10740
00000000000107a9         align      16

                     loc_107b0:
00000000000107b0         mov        rbx, 0xfffffffffffffffe                     ; CODE XREF=fetch_number+64

                     loc_107b7:
00000000000107b7         mov        rax, rbx                                    ; CODE XREF=fetch_number+68, fetch_number+73
00000000000107ba         pop        rbx
00000000000107bb         pop        rbp
00000000000107bc         pop        r12
00000000000107be         pop        r13
00000000000107c0         pop        r14
00000000000107c2         ret
                        ; endp
00000000000107c3         align      8

                     loc_107c8:
00000000000107c8         movzx      ebx, dl                                     ; CODE XREF=fetch_number+105
00000000000107cb         sub        ebx, 0x30
00000000000107ce         movsxd     rbx, ebx
00000000000107d1         jmp        loc_10740
00000000000107d6         align      32                                          ; End of unwind block (FDE at 0x17970)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_118: int64_t, -280
        ;    var_130: int64_t, -304
        ;    var_138: int64_t, -312
        ;    var_140: int64_t, -320
        ;    var_148: int64_t, -328


                     parse_expression:
00000000000107e0         push       r15                                         ; Begin of unwind block (FDE at 0x179b0), CODE XREF=sub_10fe0+2042, parse_branch+57, parse_branch+146
00000000000107e2         push       r14
00000000000107e4         push       r13
00000000000107e6         push       r12
00000000000107e8         push       rbp
00000000000107e9         push       rbx
00000000000107ea         sub        rsp, 0x128
00000000000107f1         mov        qword [rsp+0x158+var_138], rcx
00000000000107f6         movzx      ecx, byte [rdx+8]
00000000000107fa         mov        rax, qword [fs:0x28]
0000000000010803         mov        qword [rsp+0x158+var_40], rax
000000000001080b         xor        eax, eax
000000000001080d         mov        rax, qword [rsi]
0000000000010810         mov        qword [rsp+0x158+var_140], rdx
0000000000010815         mov        qword [rsp+0x158+var_118], r9
000000000001081a         cmp        cl, 0x24
000000000001081d         mov        qword [rsp+0x158+var_148], rax
0000000000010822         ja         loc_108e0

0000000000010828         mov        rbp, rsi
000000000001082b         lea        rsi, qword [switch_table_15244+348]         ; 0x153a0
0000000000010832         movzx      edx, cl
0000000000010835         mov        r14, rdi
0000000000010838         movsxd     rax, dword [rsi+rdx*4]
000000000001083c         add        rax, rsi
000000000001083f         jmp        rax
                        ; endp
0000000000010841         mov        rbx, qword [rbp+0x30]
0000000000010845         mov        r15, qword [rsp+0x20]
000000000001084a         mov        rsi, rdi
000000000001084d         mov        r13, qword [rsp+0x18]
0000000000010852         mov        qword [rsp], r8
0000000000010856         lea        rax, qword [rbx+1]
000000000001085a         mov        rdx, r15
000000000001085d         or         rdx, 0x800000
0000000000010864         mov        rdi, r13
0000000000010867         mov        qword [rbp+0x30], rax
000000000001086b         call       peek_token                                  ; peek_token


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_10870:
0000000000010870         cdqe
0000000000010872         add        qword [r14+0x48], rax
0000000000010876         xor        eax, eax
0000000000010878         cmp        byte [r13+8], 0x9
000000000001087d         mov        rdx, r13
0000000000010880         je         loc_11380

0000000000010886         mov        r13, qword [rsp+64]
000000000001088b         mov        r8, qword [rsp+0]
000000000001088f         mov        rcx, r15                                    ; argument #4 for method parse_reg_exp
0000000000010892         mov        rsi, rbp                                    ; argument #2 for method parse_reg_exp
0000000000010895         mov        rdi, r14                                    ; argument #1 for method parse_reg_exp
0000000000010898         add        r8, 0x1                                     ; argument #5 for method parse_reg_exp
000000000001089c         mov        r9, r13                                     ; argument #6 for method parse_reg_exp
000000000001089f         call       parse_reg_exp                               ; parse_reg_exp
00000000000108a4         mov        r11d, dword [r13]
00000000000108a8         test       r11d, r11d
00000000000108ab         jne        sub_10870+112

00000000000108ad         mov        rdx, qword [rsp+24]
00000000000108b2         cmp        byte [rdx+8], 0x9
00000000000108b6         je         loc_11380

00000000000108bc         test       rax, rax
00000000000108bf         je         loc_108d2

00000000000108c1         lea        rsi, qword [free_tree]                      ; argument #2 for method postorder, free_tree
00000000000108c8         xor        edx, edx                                    ; argument #3 for method postorder
00000000000108ca         mov        rdi, rax                                    ; argument #1 for method postorder
00000000000108cd         call       postorder                                   ; postorder

                     loc_108d2:
00000000000108d2         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_10870+79
00000000000108d7         mov        dword [rax], 0x8
00000000000108dd         nop        dword [rax]
                        ; endp

                     loc_108e0:
00000000000108e0         mov        qword [rsp+0x158+var_130], 0x0              ; CODE XREF=parse_expression+66, sub_10fe0+431
00000000000108e9         nop        dword [rax]
00000000000108f0         mov        rdi, qword [rsp+0x158+var_40]               ; CODE XREF=sub_10fe0+923, sub_10fe0+1015, sub_10fe0+2052, sub_10fe0+2114
00000000000108f8         xor        rdi, qword [fs:0x28]
0000000000010901         mov        rax, qword [rsp+0x158+var_130]
0000000000010906         jne        loc_11c7e

000000000001090c         add        rsp, 0x128
0000000000010913         pop        rbx
0000000000010914         pop        rbp
0000000000010915         pop        r12
0000000000010917         pop        r13
0000000000010919         pop        r14
000000000001091b         pop        r15
000000000001091d         ret
                        ; endp
000000000001091e         test       qword [rsp+0x20], 0x1000000
0000000000010927         jne        sub_10870+781
000000000001092d         mov        rax, qword [rsp+0x20]
0000000000010932         test       al, 0x20
0000000000010934         jne        sub_10870+781
000000000001093a         test       al, 0x10
000000000001093c         jne        sub_10fe0+1989
0000000000010942         cmp        cl, 0x9
0000000000010945         je         sub_10fe0+888
000000000001094b         mov        rax, qword [rsp+0x10]                       ; CODE XREF=sub_10fe0+897
0000000000010950         mov        r8, qword [rsp+0x18]
0000000000010955         xor        ecx, ecx
0000000000010957         xor        edx, edx
0000000000010959         lea        rsi, qword [rax+0x80]
0000000000010960         lea        rdi, qword [rax+0x70]
0000000000010964         mov        byte [r8+8], 0x1
0000000000010969         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000001096e         test       rax, rax
0000000000010971         mov        qword [rsp+0x28], rax
0000000000010976         je         sub_10fe0+872

                     loc_1097c:
000000000001097c         mov        rbx, qword [rsp+24]                         ; CODE XREF=sub_10fe0+416, sub_10fe0+425, sub_10fe0+580, sub_10fe0+636, sub_10fe0+649, sub_10fe0+729, sub_10fe0+990, sub_10fe0+1526
0000000000010981         mov        rdx, qword [rsp+32]                         ; argument #3 for method peek_token
0000000000010986         mov        rsi, r14                                    ; argument #2 for method peek_token
0000000000010989         lea        r15, qword [rsp+192]
0000000000010991         mov        rdi, rbx                                    ; argument #1 for method peek_token
0000000000010994         call       peek_token                                  ; peek_token
0000000000010999         cdqe
000000000001099b         add        qword [r14+0x48], rax
000000000001099f         movzx      eax, byte [rbx+8]
00000000000109a3         nop        dword [rax+rax]

                     loc_109a8:
00000000000109a8         cmp        al, 0x17                                    ; CODE XREF=sub_10870+736, sub_10870+748
00000000000109aa         ja         sub_10870+128

00000000000109b0         cmp        al, 0x12
00000000000109b2         mov        ecx, 0x8c0800
00000000000109b7         sete       bl
00000000000109ba         bt         rcx, rax
00000000000109be         jae        sub_10870+128

00000000000109c4         mov        rcx, qword [rsp+24]
00000000000109c9         cmp        al, 0x17
00000000000109cb         mov        rbp, qword [r14+0x48]
00000000000109cf         movdqa     xmm0, xmmword [rcx]
00000000000109d3         je         loc_10cf8

00000000000109d9         cmp        al, 0x13
00000000000109db         movzx      ebx, bl
00000000000109de         je         loc_10c90

00000000000109e4         mov        rdx, qword [rsp+32]                         ; argument #3 for method peek_token
00000000000109e9         mov        rdi, qword [rsp+24]                         ; argument #1 for method peek_token
00000000000109ee         mov        rsi, r14                                    ; argument #2 for method peek_token
00000000000109f1         call       peek_token                                  ; peek_token
00000000000109f6         cdqe
00000000000109f8         add        qword [r14+0x48], rax
00000000000109fc         cmp        qword [rsp+40], 0x0
0000000000010a02         je         loc_10d90

0000000000010a08         mov        qword [rsp+0], 0xffffffffffffffff

                     loc_10a10:
0000000000010a10         test       rbx, rbx                                    ; CODE XREF=sub_10870+1107
0000000000010a13         mov        rbp, qword [rsp+40]
0000000000010a18         mov        qword [rsp+48], 0x0
0000000000010a21         jg         loc_10ba0

                     loc_10a27:
0000000000010a27         cmp        byte [rbp+0x30], 0x11                       ; CODE XREF=sub_10870+993
0000000000010a2b         je         loc_10d70

                     loc_10a31:
0000000000010a31         cmp        qword [rsp+0], 0xffffffffffffffff           ; CODE XREF=sub_10870+1299
0000000000010a36         mov        rdx, rbp                                    ; argument #3 for method create_token_tree.isra.16
0000000000010a39         mov        r8, r15                                     ; argument #5 for method create_token_tree.isra.16
0000000000010a3c         sete       al
0000000000010a3f         xor        ecx, ecx                                    ; argument #4 for method create_token_tree.isra.16
0000000000010a41         add        eax, 0xa
0000000000010a44         mov        byte [rsp+200], al
0000000000010a4b         mov        rax, qword [rsp+16]
0000000000010a50         lea        r12, qword [rax+0x70]
0000000000010a54         lea        r13, qword [rax+0x80]
0000000000010a5b         mov        rdi, r12                                    ; argument #1 for method create_token_tree.isra.16
0000000000010a5e         mov        rsi, r13                                    ; argument #2 for method create_token_tree.isra.16
0000000000010a61         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000010a66         test       rax, rax
0000000000010a69         mov        rdx, rax
0000000000010a6c         je         loc_10c60

0000000000010a72         add        rbx, 0x2
0000000000010a76         cmp        rbx, qword [rsp+0]
0000000000010a7a         jg         loc_10afb

0000000000010a7c         mov        qword [rsp+72], r14
0000000000010a81         mov        r14, rax

                     loc_10a84:
0000000000010a84         mov        rsi, qword [rsp+16]                         ; argument #2 for method duplicate_tree, CODE XREF=sub_10870+641
0000000000010a89         mov        rdi, rbp                                    ; argument #1 for method duplicate_tree
0000000000010a8c         call       duplicate_tree                              ; duplicate_tree
0000000000010a91         mov        r8, r15                                     ; argument #5 for method create_token_tree.isra.16
0000000000010a94         mov        rbp, rax
0000000000010a97         mov        rcx, rax                                    ; argument #4 for method create_token_tree.isra.16
0000000000010a9a         mov        rdx, r14                                    ; argument #3 for method create_token_tree.isra.16
0000000000010a9d         mov        rsi, r13                                    ; argument #2 for method create_token_tree.isra.16
0000000000010aa0         mov        rdi, r12                                    ; argument #1 for method create_token_tree.isra.16
0000000000010aa3         mov        byte [rsp+200], 0x10
0000000000010aab         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000010ab0         test       rbp, rbp
0000000000010ab3         je         loc_10c60

0000000000010ab9         test       rax, rax
0000000000010abc         je         loc_10c60

0000000000010ac2         xor        ecx, ecx                                    ; argument #4 for method create_token_tree.isra.16
0000000000010ac4         mov        r8, r15                                     ; argument #5 for method create_token_tree.isra.16
0000000000010ac7         mov        rdx, rax                                    ; argument #3 for method create_token_tree.isra.16
0000000000010aca         mov        rsi, r13                                    ; argument #2 for method create_token_tree.isra.16
0000000000010acd         mov        rdi, r12                                    ; argument #1 for method create_token_tree.isra.16
0000000000010ad0         mov        byte [rsp+200], 0xa
0000000000010ad8         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000010add         test       rax, rax
0000000000010ae0         mov        r14, rax
0000000000010ae3         je         loc_10c60

0000000000010ae9         add        rbx, 0x1
0000000000010aed         cmp        rbx, qword [rsp+0]
0000000000010af1         jle        loc_10a84

0000000000010af3         mov        r14, qword [rsp+72]
0000000000010af8         mov        rdx, rax

                     loc_10afb:
0000000000010afb         mov        rax, qword [rsp+48]                         ; CODE XREF=sub_10870+522
0000000000010b00         test       rax, rax
0000000000010b03         je         loc_10db0

0000000000010b09         mov        rcx, rdx                                    ; argument #4 for method create_token_tree.isra.16
0000000000010b0c         mov        r8, r15                                     ; argument #5 for method create_token_tree.isra.16
0000000000010b0f         mov        rdx, rax                                    ; argument #3 for method create_token_tree.isra.16
0000000000010b12         mov        rsi, r13                                    ; argument #2 for method create_token_tree.isra.16
0000000000010b15         mov        rdi, r12                                    ; argument #1 for method create_token_tree.isra.16
0000000000010b18         mov        byte [rsp+200], 0x10
0000000000010b20         call       create_token_tree.isra.16                   ; create_token_tree.isra.16

                     loc_10b25:
0000000000010b25         mov        rdi, qword [rsp+64]                         ; CODE XREF=sub_10870+1265
0000000000010b2a         mov        edx, dword [rdi]
0000000000010b2c         test       edx, edx
0000000000010b2e         je         loc_10b39

0000000000010b30         test       rax, rax
0000000000010b33         je         loc_10e8b

                     loc_10b39:
0000000000010b39         mov        qword [rsp+40], rax                         ; CODE XREF=sub_10870+702

                     loc_10b3e:
0000000000010b3e         test       qword [rsp+32], 0x1000000                   ; CODE XREF=sub_10870+1152, sub_10870+1349
0000000000010b47         mov        rax, qword [rsp+24]
0000000000010b4c         movzx      eax, byte [rax+8]
0000000000010b50         je         loc_109a8

0000000000010b56         cmp        al, 0xb
0000000000010b58         je         loc_10b62

0000000000010b5a         cmp        al, 0x17
0000000000010b5c         jne        loc_109a8

                     loc_10b62:
0000000000010b62         mov        rax, qword [rsp+40]                         ; CODE XREF=sub_10870+744
0000000000010b67         test       rax, rax
0000000000010b6a         je         loc_10b7d

0000000000010b6c         lea        rsi, qword [free_tree]                      ; argument #2 for method postorder, free_tree
0000000000010b73         xor        edx, edx                                    ; argument #3 for method postorder
0000000000010b75         mov        rdi, rax                                    ; argument #1 for method postorder
0000000000010b78         call       postorder                                   ; postorder

                     loc_10b7d:
0000000000010b7d         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_10870+183, sub_10870+196, sub_10870+762
0000000000010b82         mov        qword [rsp+40], 0x0
0000000000010b8b         mov        dword [rax], 0xd
0000000000010b91         jmp        sub_10870+128
                        ; endp
0000000000010b96         nop        word [cs:rax+rax]

                     loc_10ba0:
0000000000010ba0         cmp        rbx, 0x1                                    ; CODE XREF=sub_10870+433
0000000000010ba4         je         loc_113dc

0000000000010baa         mov        rax, qword [rsp+16]
0000000000010baf         mov        r13, rbp
0000000000010bb2         mov        qword [rsp+72], r14
0000000000010bb7         lea        r12, qword [rax+0x80]
0000000000010bbe         lea        rdi, qword [rax+0x70]
0000000000010bc2         mov        rax, rbp
0000000000010bc5         mov        r14, rax
0000000000010bc8         mov        ebp, 0x2
0000000000010bcd         mov        rsi, r12
0000000000010bd0         mov        qword [rsp+48], rdi
0000000000010bd5         mov        r12, r13
0000000000010bd8         mov        r13, rbx
0000000000010bdb         mov        rbx, rsi
0000000000010bde         nop

                     loc_10be0:
0000000000010be0         mov        rsi, qword [rsp+16]                         ; argument #2 for method duplicate_tree, CODE XREF=sub_10870+946
0000000000010be5         mov        rdi, r12                                    ; argument #1 for method duplicate_tree
0000000000010be8         call       duplicate_tree                              ; duplicate_tree
0000000000010bed         mov        rdi, qword [rsp+48]                         ; argument #1 for method create_token_tree.isra.16
0000000000010bf2         mov        r12, rax
0000000000010bf5         mov        rdx, r14                                    ; argument #3 for method create_token_tree.isra.16
0000000000010bf8         mov        r8, r15                                     ; argument #5 for method create_token_tree.isra.16
0000000000010bfb         mov        rcx, rax                                    ; argument #4 for method create_token_tree.isra.16
0000000000010bfe         mov        rsi, rbx                                    ; argument #2 for method create_token_tree.isra.16
0000000000010c01         mov        byte [rsp+200], 0x10
0000000000010c09         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000010c0e         test       r12, r12
0000000000010c11         mov        r14, rax
0000000000010c14         je         loc_10c60

0000000000010c16         test       rax, rax
0000000000010c19         je         loc_10c60

0000000000010c1b         add        rbp, 0x1
0000000000010c1f         cmp        rbp, r13
0000000000010c22         jle        loc_10be0

0000000000010c24         mov        r14, qword [rsp+72]
0000000000010c29         mov        rbx, r13
0000000000010c2c         mov        qword [rsp+48], rax
0000000000010c31         mov        r13, r12

                     loc_10c34:
0000000000010c34         cmp        qword [rsp+0], rbx                          ; CODE XREF=sub_10fe0+1030
0000000000010c38         je         loc_10da4

0000000000010c3e         mov        rsi, qword [rsp+16]                         ; argument #2 for method duplicate_tree
0000000000010c43         mov        rdi, r13                                    ; argument #1 for method duplicate_tree
0000000000010c46         call       duplicate_tree                              ; duplicate_tree
0000000000010c4b         test       rax, rax
0000000000010c4e         mov        rbp, rax
0000000000010c51         jne        loc_10a27

0000000000010c57         nop        word [rax+rax]

                     loc_10c60:
0000000000010c60         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_10870+508, sub_10870+579, sub_10870+588, sub_10870+627, sub_10870+932, sub_10870+937
0000000000010c65         mov        dword [rax], 0xc

                     loc_10c6b:
0000000000010c6b         mov        rdi, qword [rsp+40]                         ; argument #1 for method postorder, CODE XREF=sub_10870+1141, sub_10870+1569
0000000000010c70         lea        rsi, qword [free_tree]                      ; argument #2 for method postorder, free_tree
0000000000010c77         xor        edx, edx                                    ; argument #3 for method postorder
0000000000010c79         call       postorder                                   ; postorder
0000000000010c7e         mov        qword [rsp+40], 0x0
0000000000010c87         jmp        sub_10870+128
                        ; endp
0000000000010c8c         nop        dword [rax]

                     loc_10c90:
0000000000010c90         mov        qword [rsp+0], 0x1                          ; CODE XREF=sub_10870+366

                     loc_10c98:
0000000000010c98         mov        rdx, qword [rsp+32]                         ; argument #3 for method peek_token, CODE XREF=sub_10870+1482
0000000000010c9d         mov        rdi, qword [rsp+24]                         ; argument #1 for method peek_token
0000000000010ca2         mov        rsi, r14                                    ; argument #2 for method peek_token
0000000000010ca5         call       peek_token                                  ; peek_token
0000000000010caa         cdqe
0000000000010cac         add        qword [r14+0x48], rax
0000000000010cb0         cmp        qword [rsp+40], 0x0
0000000000010cb6         je         loc_10d90

0000000000010cbc         mov        rax, qword [rsp+0]
0000000000010cc0         or         rax, rbx
0000000000010cc3         jne        loc_10a10

0000000000010cc9         mov        rdi, qword [rsp+40]                         ; argument #1 for method postorder
0000000000010cce         lea        rsi, qword [free_tree]                      ; argument #2 for method postorder, free_tree
0000000000010cd5         xor        edx, edx                                    ; argument #3 for method postorder
0000000000010cd7         call       postorder                                   ; postorder
0000000000010cdc         mov        rax, qword [rsp+64]
0000000000010ce1         mov        esi, dword [rax]
0000000000010ce3         test       esi, esi
0000000000010ce5         jne        loc_10c6b

                     loc_10ce7:
0000000000010ce7         mov        qword [rsp+40], 0x0                         ; CODE XREF=sub_10870+1321
0000000000010cf0         jmp        loc_10b3e
0000000000010cf5         nop        dword [rax]

                     loc_10cf8:
0000000000010cf8         mov        rdx, qword [rsp+32]                         ; argument #3 for method fetch_number, CODE XREF=sub_10870+355
0000000000010cfd         mov        rsi, rcx                                    ; argument #2 for method fetch_number
0000000000010d00         mov        rdi, r14                                    ; argument #1 for method fetch_number
0000000000010d03         movaps     xmmword [rsp+0], xmm0
0000000000010d07         call       fetch_number                                ; fetch_number
0000000000010d0c         cmp        rax, 0xffffffffffffffff
0000000000010d10         mov        rbx, rax
0000000000010d13         movdqa     xmm0, xmmword [rsp+0]
0000000000010d18         je         loc_10dc0

0000000000010d1e         cmp        rax, 0xfffffffffffffffe
0000000000010d22         je         loc_10d3d

0000000000010d24         mov        rax, qword [rsp+24]
0000000000010d29         movzx      eax, byte [rax+8]
0000000000010d2d         cmp        al, 0x18
0000000000010d2f         je         loc_10e50

0000000000010d35         cmp        al, 0x1
0000000000010d37         je         loc_10e63

                     loc_10d3d:
0000000000010d3d         test       qword [rsp+32], 0x200000                    ; CODE XREF=sub_10870+1202, sub_10870+1428
0000000000010d46         je         loc_11c83

                     loc_10d4c:
0000000000010d4c         mov        rax, qword [rsp+24]                         ; CODE XREF=sub_10870+1546
0000000000010d51         mov        qword [r14+0x48], rbp
0000000000010d55         movaps     xmmword [rax], xmm0
0000000000010d58         mov        byte [rax+8], 0x1
0000000000010d5c         mov        rax, qword [rsp+40]
0000000000010d61         jmp        loc_10b25
0000000000010d66         nop        word [cs:rax+rax]

                     loc_10d70:
0000000000010d70         mov        rdx, qword [rbp+0x28]                       ; argument #3 for method postorder, CODE XREF=sub_10870+443
0000000000010d74         lea        rsi, qword [mark_opt_subexp]                ; argument #2 for method postorder, mark_opt_subexp
0000000000010d7b         mov        rdi, rbp                                    ; argument #1 for method postorder
0000000000010d7e         call       postorder                                   ; postorder
0000000000010d83         jmp        loc_10a31
0000000000010d88         nop        dword [rax+rax]

                     loc_10d90:
0000000000010d90         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_10870+402, sub_10870+1094
0000000000010d95         mov        ecx, dword [rax]
0000000000010d97         test       ecx, ecx
0000000000010d99         je         loc_10ce7

0000000000010d9f         jmp        sub_10870+112
                        ; endp

                     loc_10da4:
0000000000010da4         mov        rdx, qword [rsp+48]                         ; CODE XREF=sub_10870+968
0000000000010da9         nop        dword [rax]

                     loc_10db0:
0000000000010db0         mov        qword [rsp+40], rdx                         ; CODE XREF=sub_10870+659
0000000000010db5         jmp        loc_10b3e
0000000000010dba         nop        word [rax+rax]

                     loc_10dc0:
0000000000010dc0         mov        rax, qword [rsp+24]                         ; CODE XREF=sub_10870+1192
0000000000010dc5         cmp        byte [rax+8], 0x1
0000000000010dc9         jne        loc_10e80

0000000000010dcf         mov        rax, qword [rsp+24]
0000000000010dd4         cmp        byte [rax], 0x2c
0000000000010dd7         jne        loc_10e80

0000000000010ddd         xor        ebx, ebx

                     loc_10ddf:
0000000000010ddf         mov        rdx, qword [rsp+32]                         ; argument #3 for method fetch_number, CODE XREF=sub_10870+1531
0000000000010de4         mov        rsi, qword [rsp+24]                         ; argument #2 for method fetch_number
0000000000010de9         mov        rdi, r14                                    ; argument #1 for method fetch_number
0000000000010dec         movaps     xmmword [rsp+48], xmm0
0000000000010df1         call       fetch_number                                ; fetch_number
0000000000010df6         cmp        rax, 0xfffffffffffffffe
0000000000010dfa         mov        qword [rsp+0], rax
0000000000010dfe         movdqa     xmm0, xmmword [rsp+48]
0000000000010e04         je         loc_10d3d

0000000000010e0a         mov        rax, qword [rsp+0]
0000000000010e0e         cmp        rax, 0xffffffffffffffff
0000000000010e12         je         loc_10e19

0000000000010e14         cmp        rax, rbx
0000000000010e17         jl         loc_10e80

                     loc_10e19:
0000000000010e19         mov        rax, qword [rsp+24]                         ; CODE XREF=sub_10870+1442
0000000000010e1e         cmp        byte [rax+8], 0x18
0000000000010e22         jne        loc_10e80

0000000000010e24         cmp        qword [rsp+0], 0xffffffffffffffff
0000000000010e29         jne        loc_10e54

0000000000010e2b         xor        eax, eax
0000000000010e2d         cmp        rbx, 0x7fff
0000000000010e34         setg       al

                     loc_10e37:
0000000000010e37         test       rax, rax                                    ; CODE XREF=sub_10870+1521
0000000000010e3a         je         loc_10c98

0000000000010e40         mov        rax, qword [rsp+64]
0000000000010e45         mov        dword [rax], 0xf
0000000000010e4b         jmp        loc_10e8b
0000000000010e4d         nop        dword [rax]

                     loc_10e50:
0000000000010e50         mov        qword [rsp+0], rbx                          ; CODE XREF=sub_10870+1215

                     loc_10e54:
0000000000010e54         xor        eax, eax                                    ; CODE XREF=sub_10870+1465
0000000000010e56         cmp        qword [rsp+0], 0x7fff
0000000000010e5e         setg       al
0000000000010e61         jmp        loc_10e37

                     loc_10e63:
0000000000010e63         mov        rax, qword [rsp+24]                         ; CODE XREF=sub_10870+1223
0000000000010e68         cmp        byte [rax], 0x2c
0000000000010e6b         je         loc_10ddf

0000000000010e71         test       qword [rsp+32], 0x200000
0000000000010e7a         jne        loc_10d4c

                     loc_10e80:
0000000000010e80         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_10870+1369, sub_10870+1383, sub_10870+1447, sub_10870+1458, sub_10fe0+3244
0000000000010e85         mov        dword [rax], 0xa

                     loc_10e8b:
0000000000010e8b         cmp        qword [rsp+40], 0x0                         ; CODE XREF=sub_10870+707, sub_10870+1499, sub_10fe0+3261
0000000000010e91         jne        loc_10c6b

0000000000010e97         jmp        sub_10870+112
                        ; endp
0000000000010e9c         nop        dword [rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_10ea0:
0000000000010ea0         mov        rax, qword [rsp+24]
0000000000010ea5         mov        ebp, dword [rax]
0000000000010ea7         test       ebp, 0x30f
0000000000010ead         je         loc_10f11

0000000000010eaf         mov        rax, qword [rsp+16]
0000000000010eb4         movzx      eax, byte [rax+0xb0]
0000000000010ebb         test       al, 0x10
0000000000010ebd         jne        loc_10f11

0000000000010ebf         mov        rdi, qword [rsp+16]
0000000000010ec4         or         eax, 0x10
0000000000010ec7         test       al, 0x8
0000000000010ec9         mov        byte [rdi+0xb0], al
0000000000010ecf         jne        loc_11ad3

0000000000010ed5         movabs     rdx, 0x3ff000000000000
0000000000010edf         test       al, 0x4
0000000000010ee1         mov        qword [rdi+0xb8], rdx
0000000000010ee8         movabs     rdx, 0x7fffffe87fffffe
0000000000010ef2         mov        qword [rdi+0xc0], rdx
0000000000010ef9         je         loc_11a58

0000000000010eff         pxor       xmm0, xmm0
0000000000010f03         mov        rax, qword [rsp+24]
0000000000010f08         movups     xmmword [rdi+0xc8], xmm0
0000000000010f0f         mov        ebp, dword [rax]

                     loc_10f11:
0000000000010f11         mov        rax, qword [rsp+16]                         ; CODE XREF=sub_10ea0+13, sub_10ea0+29, sub_10fe0+2798
0000000000010f16         lea        rbx, qword [rax+0x70]
0000000000010f1a         lea        r12, qword [rax+0x80]
0000000000010f21         lea        eax, dword [rbp-0x100]
0000000000010f27         test       eax, 0xfffffeff
0000000000010f2c         jne        loc_1159a

0000000000010f32         cmp        ebp, 0x100
0000000000010f38         mov        r15, qword [rsp+24]
0000000000010f3d         je         loc_11572

0000000000010f43         mov        dword [r15], 0x5
0000000000010f4a         mov        r8, r15                                     ; argument #5 for method create_token_tree.isra.16
0000000000010f4d         xor        ecx, ecx                                    ; argument #4 for method create_token_tree.isra.16
0000000000010f4f         xor        edx, edx                                    ; argument #3 for method create_token_tree.isra.16
0000000000010f51         mov        rsi, r12                                    ; argument #2 for method create_token_tree.isra.16
0000000000010f54         mov        rdi, rbx                                    ; argument #1 for method create_token_tree.isra.16
0000000000010f57         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000010f5c         mov        dword [r15], 0xa
0000000000010f63         mov        rbp, rax

                     loc_10f66:
0000000000010f66         mov        r8, qword [rsp+24]                          ; argument #5 for method create_token_tree.isra.16, CODE XREF=sub_10fe0+1461
0000000000010f6b         xor        ecx, ecx                                    ; argument #4 for method create_token_tree.isra.16
0000000000010f6d         xor        edx, edx                                    ; argument #3 for method create_token_tree.isra.16
0000000000010f6f         mov        rsi, r12                                    ; argument #2 for method create_token_tree.isra.16
0000000000010f72         mov        rdi, rbx                                    ; argument #1 for method create_token_tree.isra.16
0000000000010f75         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000010f7a         lea        r8, qword [rsp+192]                         ; argument #5 for method create_token_tree.isra.16
0000000000010f82         mov        rdx, rbp                                    ; argument #3 for method create_token_tree.isra.16
0000000000010f85         mov        rdi, rbx                                    ; argument #1 for method create_token_tree.isra.16
0000000000010f88         mov        rcx, rax                                    ; argument #4 for method create_token_tree.isra.16
0000000000010f8b         mov        rsi, r12                                    ; argument #2 for method create_token_tree.isra.16
0000000000010f8e         mov        r13, rax
0000000000010f91         mov        byte [rsp+200], 0xa
0000000000010f99         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000010f9e         test       rbp, rbp
0000000000010fa1         mov        rdi, rax
0000000000010fa4         mov        qword [rsp+40], rax
0000000000010fa9         sete       dl
0000000000010fac         test       r13, r13
0000000000010faf         sete       al
0000000000010fb2         or         dl, al
0000000000010fb4         jne        sub_10fe0+872

0000000000010fba         test       rdi, rdi
0000000000010fbd         je         sub_10fe0+872

                     loc_10fc3:
0000000000010fc3         mov        rdx, qword [rsp+32]                         ; argument #3 for method peek_token, CODE XREF=sub_10fe0+1494
0000000000010fc8         mov        rdi, qword [rsp+24]                         ; argument #1 for method peek_token
0000000000010fcd         mov        rsi, r14                                    ; argument #2 for method peek_token
0000000000010fd0         call       peek_token                                  ; peek_token
0000000000010fd5         cdqe
0000000000010fd7         add        qword [r14+0x48], rax
0000000000010fdb         jmp        sub_10870+128
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_10fe0:
0000000000010fe0         mov        esi, 0x1                                    ; argument "__size" for method j_calloc
0000000000010fe5         mov        edi, 0x20                                   ; argument "__nmemb" for method j_calloc
0000000000010fea         mov        qword [rsp+152], 0x0
0000000000010ff6         call       j_calloc                                    ; calloc
0000000000010ffb         mov        esi, 0x1                                    ; argument "__size" for method j_calloc
0000000000011000         mov        r12, rax
0000000000011003         mov        edi, 0x50                                   ; argument "__nmemb" for method j_calloc
0000000000011008         call       j_calloc                                    ; calloc
000000000001100d         test       r12, r12
0000000000011010         mov        r13, rax
0000000000011013         sete       dl
0000000000011016         test       rax, rax
0000000000011019         sete       al
000000000001101c         or         dl, al
000000000001101e         jne        loc_117f9

0000000000011024         mov        r10, qword [rsp+24]
0000000000011029         mov        rdx, qword [rsp+32]                         ; argument #3 for method peek_token_bracket
000000000001102e         mov        rsi, r14                                    ; argument #2 for method peek_token_bracket
0000000000011031         mov        rdi, r10                                    ; argument #1 for method peek_token_bracket
0000000000011034         call       peek_token_bracket                          ; peek_token_bracket
0000000000011039         movsxd     rbx, eax
000000000001103c         movzx      eax, byte [r10+8]
0000000000011041         cmp        al, 0x2
0000000000011043         je         loc_117e9

0000000000011049         cmp        al, 0x19
000000000001104b         mov        byte [rsp+87], 0x0
0000000000011050         je         loc_1151a

                     loc_11056:
0000000000011056         cmp        al, 0x15                                    ; CODE XREF=sub_10fe0+1407
0000000000011058         je         loc_11564

                     loc_1105e:
000000000001105e         lea        rax, qword [rsp+208]                        ; CODE XREF=sub_10fe0+1421
0000000000011066         mov        r15, qword [rsp+24]
000000000001106b         lea        rbp, qword [switch_table_15434]             ; switch_table_15434
0000000000011072         mov        qword [rsp+72], 0x0
000000000001107b         mov        r9d, 0x1
0000000000011081         mov        qword [rsp+48], 0x0
000000000001108a         mov        qword [rsp+40], rax
000000000001108f         lea        rax, qword [rsp+160]
0000000000011097         mov        qword [rsp+0], rax
000000000001109b         lea        rax, qword [rsp+152]
00000000000110a3         mov        qword [rsp+88], rax
00000000000110a8         lea        rax, qword [rsp+192]
00000000000110b0         mov        qword [rsp+96], rax
00000000000110b5         lea        rax, qword [rsp+240]
00000000000110bd         mov        qword [rsp+104], rax

                     loc_110c2:
00000000000110c2         mov        rax, qword [rsp+40]                         ; CODE XREF=sub_10fe0+1112
00000000000110c7         mov        r8, qword [rsp+32]                          ; argument #5 for method parse_bracket_element.constprop.37
00000000000110cc         and        r9d, 0x1                                    ; argument #6 for method parse_bracket_element.constprop.37
00000000000110d0         mov        rdi, qword [rsp+0]                          ; argument #1 for method parse_bracket_element.constprop.37
00000000000110d4         mov        ecx, ebx                                    ; argument #4 for method parse_bracket_element.constprop.37
00000000000110d6         mov        rdx, r15                                    ; argument #3 for method parse_bracket_element.constprop.37
00000000000110d9         mov        rsi, r14                                    ; argument #2 for method parse_bracket_element.constprop.37
00000000000110dc         mov        dword [rsp+160], 0x3
00000000000110e7         mov        qword [rsp+168], rax
00000000000110ef         call       parse_bracket_element.constprop.37          ; parse_bracket_element.constprop.37
00000000000110f4         test       eax, eax
00000000000110f6         jne        loc_115db

00000000000110fc         mov        rdx, qword [rsp+32]                         ; argument #3 for method peek_token_bracket
0000000000011101         mov        rsi, r14                                    ; argument #2 for method peek_token_bracket
0000000000011104         mov        rdi, r15                                    ; argument #1 for method peek_token_bracket
0000000000011107         call       peek_token_bracket                          ; peek_token_bracket
000000000001110c         movsxd     rbx, eax
000000000001110f         mov        eax, dword [rsp+160]
0000000000011116         lea        edx, dword [rax-2]
0000000000011119         and        edx, 0xfffffffd
000000000001111c         je         loc_11135

000000000001111e         movzx      edx, byte [r15+8]
0000000000011123         cmp        dl, 0x2
0000000000011126         je         loc_115c1

000000000001112c         cmp        dl, 0x16
000000000001112f         je         loc_115e7

                     loc_11135:
0000000000011135         cmp        eax, 0x4                                    ; CODE XREF=sub_10fe0+316, sub_10fe0+2141
0000000000011138         ja         loc_11ada

000000000001113e         movsxd     rax, dword [rbp+rax*4]
0000000000011143         add        rax, rbp
0000000000011146         jmp        rax                                         ; switch statement using table at 0x15434, with 5 cases, 0x11405,0x1143d,0x11487,0x114b1,0x114d9
0000000000011148         mov        rbx, qword [rsp+0x40]
000000000001114d         cmp        cl, 0x23
0000000000011150         mov        rsi, qword [rdi+0x78]
0000000000011154         sete       r8b
0000000000011158         lea        rcx, qword [aWrittenBySSAnd+27]             ; 0x14c01
000000000001115f         lea        rdx, qword [aSpace]                         ; "space"
0000000000011166         movzx      r8d, r8b
000000000001116a         mov        r9, rbx
000000000001116d         mov        rdi, qword [rsp+0x10]                       ; CODE XREF=sub_10fe0+477
0000000000011172         call       build_charclass_op                          ; build_charclass_op
0000000000011177         mov        edi, dword [rbx]
0000000000011179         mov        qword [rsp+0x28], rax
000000000001117e         test       edi, edi
0000000000011180         je         sub_10870+268
0000000000011186         test       rax, rax
0000000000011189         jne        sub_10870+268
000000000001118f         jmp        sub_10870+112
0000000000011194         nop        dword [rax]
0000000000011198         mov        rbx, qword [rsp+0x40]
000000000001119d         cmp        cl, 0x21
00000000000111a0         mov        rsi, qword [rdi+0x78]
00000000000111a4         sete       r8b
00000000000111a8         lea        rcx, qword [aCoreutils+12]                  ; 0x141fe
00000000000111af         lea        rdx, qword [aAlnum]                         ; "alnum"
00000000000111b6         movzx      r8d, r8b
00000000000111ba         mov        r9, rbx
00000000000111bd         jmp        sub_10fe0+397
00000000000111bf         mov        rax, qword [rsp+0x18]
00000000000111c4         mov        rdi, qword [rsp+0x10]
00000000000111c9         mov        rcx, qword [rax]
00000000000111cc         mov        eax, 0x1
00000000000111d1         shl        eax, cl
00000000000111d3         cdqe
00000000000111d5         test       qword [rdi+0xa8], rax
00000000000111dc         je         sub_10fe0+2094
00000000000111e2         mov        rbx, qword [rsp+0x10]
00000000000111e7         mov        r8, qword [rsp+0x18]
00000000000111ec         xor        ecx, ecx
00000000000111ee         xor        edx, edx
00000000000111f0         or         qword [rbx+0xa0], rax
00000000000111f7         lea        rsi, qword [rbx+0x80]
00000000000111fe         lea        rdi, qword [rbx+0x70]
0000000000011202         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000011207         test       rax, rax
000000000001120a         mov        qword [rsp+0x28], rax
000000000001120f         je         sub_10fe0+872
0000000000011215         add        qword [rbx+0x98], 0x1
000000000001121d         or         byte [rbx+0xb0], 0x2
0000000000011224         jmp        sub_10870+268
0000000000011229         mov        rbx, qword [rsp+0x10]
000000000001122e         mov        r8, qword [rsp+0x18]
0000000000011233         xor        ecx, ecx
0000000000011235         xor        edx, edx
0000000000011237         lea        rsi, qword [rbx+0x80]
000000000001123e         lea        rdi, qword [rbx+0x70]
0000000000011242         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000011247         test       rax, rax
000000000001124a         mov        qword [rsp+0x28], rax
000000000001124f         je         sub_10fe0+872
0000000000011255         cmp        dword [rbx+0xb4], 0x1
000000000001125c         jle        sub_10870+268
0000000000011262         or         byte [rbx+0xb0], 0x2
0000000000011269         jmp        sub_10870+268
000000000001126e         mov        rax, qword [rsp+0x10]
0000000000011273         mov        r8, qword [rsp+0x18]
0000000000011278         xor        ecx, ecx
000000000001127a         xor        edx, edx
000000000001127c         lea        rbx, qword [rax+0x70]
0000000000011280         lea        rbp, qword [rax+0x80]
0000000000011287         mov        rdi, rbx
000000000001128a         mov        rsi, rbp
000000000001128d         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000011292         test       rax, rax
0000000000011295         mov        qword [rsp+0x28], rax
000000000001129a         je         sub_10fe0+872
00000000000112a0         mov        rax, qword [rsp+0x10]
00000000000112a5         lea        r12, qword [rsp+0xc0]
00000000000112ad         mov        r15, qword [rsp+0x28]
00000000000112b2         cmp        dword [rax+0xb4], 0x1
00000000000112b9         jle        sub_10870+268
00000000000112bf         mov        rax, qword [r14+0x48]                       ; CODE XREF=sub_10fe0+866
00000000000112c3         cmp        qword [r14+0x68], rax
00000000000112c7         jle        sub_10fe0+1521
00000000000112cd         cmp        rax, qword [r14+0x30]
00000000000112d1         je         sub_10fe0+1521
00000000000112d7         mov        rdx, qword [r14+0x10]
00000000000112db         cmp        dword [rdx+rax*4], 0xffffffff
00000000000112df         jne        sub_10fe0+1521
00000000000112e5         mov        r13, qword [rsp+0x18]
00000000000112ea         mov        rdx, qword [rsp+0x20]
00000000000112ef         mov        rsi, r14
00000000000112f2         mov        rdi, r13
00000000000112f5         call       peek_token                                  ; peek_token
00000000000112fa         cdqe
00000000000112fc         add        qword [r14+0x48], rax
0000000000011300         mov        r8, r13
0000000000011303         xor        ecx, ecx
0000000000011305         xor        edx, edx
0000000000011307         mov        rsi, rbp
000000000001130a         mov        rdi, rbx
000000000001130d         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000011312         mov        rdx, r15
0000000000011315         mov        r13, rax
0000000000011318         mov        r8, r12
000000000001131b         mov        rcx, rax
000000000001131e         mov        rsi, rbp
0000000000011321         mov        rdi, rbx
0000000000011324         mov        byte [rsp+0xc8], 0x10
000000000001132c         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000011331         test       r13, r13
0000000000011334         mov        r15, rax
0000000000011337         sete       dl
000000000001133a         test       rax, rax
000000000001133d         sete       al
0000000000011340         or         dl, al
0000000000011342         je         sub_10fe0+735

                     loc_11348:
0000000000011348         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_10870+262, sub_10fe0+559, sub_10fe0+623, sub_10fe0+698, sub_10fe0+984
000000000001134d         mov        dword [rax], 0xc
0000000000011353         jmp        sub_10870+112
                        ; endp
0000000000011358         test       qword [rsp+0x20], 0x20000                   ; CODE XREF=sub_10870+213
0000000000011361         jne        sub_10870+219
0000000000011367         mov        rax, qword [rsp+0x40]
000000000001136c         mov        qword [rsp+0x28], 0x0
0000000000011375         mov        dword [rax], 0x10
000000000001137b         jmp        sub_10870+128

                     loc_11380:
0000000000011380         cmp        rbx, 0x8                                    ; CODE XREF=sub_10870+16, sub_10870+70
0000000000011384         jbe        loc_113eb

                     loc_11386:
0000000000011386         mov        rdi, qword [rsp+16]                         ; CODE XREF=sub_10fe0+1059
000000000001138b         lea        r8, qword [rsp+192]                         ; argument #5 for method create_token_tree.isra.16
0000000000011393         xor        ecx, ecx                                    ; argument #4 for method create_token_tree.isra.16
0000000000011395         mov        rdx, rax                                    ; argument #3 for method create_token_tree.isra.16
0000000000011398         mov        byte [rsp+200], 0x11
00000000000113a0         lea        rsi, qword [rdi+0x80]                       ; argument #2 for method create_token_tree.isra.16
00000000000113a7         add        rdi, 0x70                                   ; argument #1 for method create_token_tree.isra.16
00000000000113ab         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
00000000000113b0         test       rax, rax
00000000000113b3         mov        qword [rsp+40], rax
00000000000113b8         je         loc_11348

00000000000113ba         mov        qword [rax+0x28], rbx
00000000000113be         jmp        loc_1097c
00000000000113c3         mov        rax, qword [rsp+0x40]
00000000000113c8         mov        qword [rsp+0x28], 0x0
00000000000113d1         mov        dword [rax], 0x5
00000000000113d7         jmp        sub_10870+128

                     loc_113dc:
00000000000113dc         mov        r13, qword [rsp+40]                         ; CODE XREF=sub_10870+820
00000000000113e1         mov        qword [rsp+48], r13
00000000000113e6         jmp        loc_10c34

                     loc_113eb:
00000000000113eb         mov        rsi, qword [rsp+16]                         ; CODE XREF=sub_10fe0+932
00000000000113f0         mov        edx, 0x1
00000000000113f5         mov        ecx, ebx
00000000000113f7         shl        edx, cl
00000000000113f9         movsxd     rdx, edx
00000000000113fc         or         qword [rsi+0xa8], rdx
0000000000011403         jmp        loc_11386

                     loc_11405:
0000000000011405         mov        rsi, qword [rsp+168]                        ; case 3, argument #2 for method build_collating_symbol.isra.28, CODE XREF=sub_10fe0+358
000000000001140d         mov        rdi, r12                                    ; argument #1 for method build_collating_symbol.isra.28
0000000000011410         call       build_collating_symbol.isra.28              ; build_collating_symbol.isra.28
0000000000011415         mov        rdx, qword [rsp+64]
000000000001141a         test       eax, eax
000000000001141c         mov        dword [rdx], eax
000000000001141e         jne        loc_11458

                     loc_11420:
0000000000011420         movzx      eax, byte [r15+8]                           ; CODE XREF=sub_10fe0+1142, sub_10fe0+1228, sub_10fe0+1268, sub_10fe0+1327, sub_10fe0+1984
0000000000011425         cmp        al, 0x2
0000000000011427         je         loc_115c1

000000000001142d         cmp        al, 0x15
000000000001142f         je         loc_11842

0000000000011435         xor        r9d, r9d
0000000000011438         jmp        loc_110c2

                     loc_1143d:
000000000001143d         mov        rsi, qword [rsp+168]                        ; case 2, argument #2 for method build_collating_symbol.isra.28, CODE XREF=sub_10fe0+358
0000000000011445         mov        rdi, r12                                    ; argument #1 for method build_collating_symbol.isra.28
0000000000011448         call       build_collating_symbol.isra.28              ; build_collating_symbol.isra.28
000000000001144d         mov        rdx, qword [rsp+64]
0000000000011452         test       eax, eax
0000000000011454         mov        dword [rdx], eax
0000000000011456         je         loc_11420

                     loc_11458:
0000000000011458         mov        rdi, r12                                    ; argument "__ptr" for method j_free, CODE XREF=sub_10fe0+1086, sub_10fe0+1333, sub_10fe0+1516, sub_10fe0+1538, sub_10fe0+2068, sub_10fe0+2350, sub_10fe0+2852, sub_10fe0+2904, sub_10fe0+3128
000000000001145b         call       j_free                                      ; free
0000000000011460         mov        rdi, r13                                    ; argument #1 for method free_charset
0000000000011463         call       free_charset                                ; free_charset
0000000000011468         mov        rax, qword [rsp+64]
000000000001146d         mov        r8d, dword [rax]
0000000000011470         test       r8d, r8d
0000000000011473         jne        sub_10870+112

0000000000011479         mov        qword [rsp+40], 0x0
0000000000011482         jmp        sub_10870+268
                        ; endp

                     loc_11487:
0000000000011487         mov        rdx, qword [r13+0x28]                       ; case 1, CODE XREF=sub_10fe0+358
000000000001148b         cmp        rdx, qword [rsp+48]
0000000000011490         mov        rax, qword [r13]
0000000000011494         je         loc_1198e

                     loc_1149a:
000000000001149a         lea        rcx, qword [rdx+1]                          ; CODE XREF=sub_10fe0+2526
000000000001149e         mov        qword [r13+0x28], rcx
00000000000114a2         mov        ecx, dword [rsp+168]
00000000000114a9         mov        dword [rax+rdx*4], ecx
00000000000114ac         jmp        loc_11420

                     loc_114b1:
00000000000114b1         movzx      edx, byte [rsp+168]                         ; case 0, CODE XREF=sub_10fe0+358
00000000000114b9         mov        esi, 0x1
00000000000114be         mov        rax, rdx
00000000000114c1         and        edx, 0x3f
00000000000114c4         shr        rax, 0x3
00000000000114c8         mov        ecx, edx
00000000000114ca         and        eax, 0x18
00000000000114cd         shl        rsi, cl
00000000000114d0         or         qword [r12+rax], rsi
00000000000114d4         jmp        loc_11420

                     loc_114d9:
00000000000114d9         sub        rsp, 0x8                                    ; case 4, CODE XREF=sub_10fe0+358
00000000000114dd         mov        rdi, qword [r14+0x78]                       ; argument #1 for method build_charclass.isra.29
00000000000114e1         lea        rdx, qword [r13+0x18]                       ; argument #3 for method build_charclass.isra.29
00000000000114e5         push       qword [rsp+40]                              ; argument #7 for method build_charclass.isra.29
00000000000114e9         mov        r9, qword [rsp+184]                         ; argument #6 for method build_charclass.isra.29
00000000000114f1         lea        rcx, qword [r13+0x48]                       ; argument #4 for method build_charclass.isra.29
00000000000114f5         mov        r8, qword [rsp+104]                         ; argument #5 for method build_charclass.isra.29
00000000000114fa         mov        rsi, r12                                    ; argument #2 for method build_charclass.isra.29
00000000000114fd         call       build_charclass.isra.29                     ; build_charclass.isra.29
0000000000011502         mov        rdx, qword [rsp+80]
0000000000011507         test       eax, eax
0000000000011509         mov        dword [rdx], eax
000000000001150b         pop        r9
000000000001150d         pop        r10
000000000001150f         je         loc_11420

0000000000011515         jmp        loc_11458

                     loc_1151a:
000000000001151a         or         byte [r13+0x20], 0x1                        ; CODE XREF=sub_10fe0+112
000000000001151f         test       qword [rsp+32], 0x100
0000000000011528         je         loc_11532

000000000001152a         or         qword [r12], 0x400

                     loc_11532:
0000000000011532         add        qword [r14+0x48], rbx                       ; CODE XREF=sub_10fe0+1352
0000000000011536         mov        r11, qword [rsp+24]
000000000001153b         mov        rsi, r14                                    ; argument #2 for method peek_token_bracket
000000000001153e         mov        rdx, qword [rsp+32]                         ; argument #3 for method peek_token_bracket
0000000000011543         mov        rdi, r11                                    ; argument #1 for method peek_token_bracket
0000000000011546         call       peek_token_bracket                          ; peek_token_bracket
000000000001154b         mov        ebx, eax
000000000001154d         movzx      eax, byte [r11+8]
0000000000011552         cmp        al, 0x2
0000000000011554         je         loc_117e9

000000000001155a         mov        byte [rsp+87], 0x1
000000000001155f         jmp        loc_11056

                     loc_11564:
0000000000011564         mov        rax, qword [rsp+24]                         ; CODE XREF=sub_10fe0+120
0000000000011569         mov        byte [rax+8], 0x1
000000000001156d         jmp        loc_1105e

                     loc_11572:
0000000000011572         mov        dword [r15], 0x6                            ; CODE XREF=sub_10ea0+157
0000000000011579         mov        r8, r15                                     ; argument #5 for method create_token_tree.isra.16
000000000001157c         xor        ecx, ecx                                    ; argument #4 for method create_token_tree.isra.16
000000000001157e         xor        edx, edx                                    ; argument #3 for method create_token_tree.isra.16
0000000000011580         mov        rsi, r12                                    ; argument #2 for method create_token_tree.isra.16
0000000000011583         mov        rdi, rbx                                    ; argument #1 for method create_token_tree.isra.16
0000000000011586         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000001158b         mov        dword [r15], 0x9
0000000000011592         mov        rbp, rax
0000000000011595         jmp        loc_10f66

                     loc_1159a:
000000000001159a         mov        r8, qword [rsp+24]                          ; argument #5 for method create_token_tree.isra.16, CODE XREF=sub_10ea0+140
000000000001159f         xor        ecx, ecx                                    ; argument #4 for method create_token_tree.isra.16
00000000000115a1         xor        edx, edx                                    ; argument #3 for method create_token_tree.isra.16
00000000000115a3         mov        rsi, r12                                    ; argument #2 for method create_token_tree.isra.16
00000000000115a6         mov        rdi, rbx                                    ; argument #1 for method create_token_tree.isra.16
00000000000115a9         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
00000000000115ae         test       rax, rax
00000000000115b1         mov        qword [rsp+40], rax
00000000000115b6         jne        loc_10fc3

00000000000115bc         jmp        sub_10fe0+872
                        ; endp

                     loc_115c1:
00000000000115c1         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_10fe0+326, sub_10fe0+1095, sub_10fe0+1582
00000000000115c6         mov        dword [rax], 0x7
00000000000115cc         jmp        loc_11458
00000000000115d1         mov        qword [rsp+0x28], r15                       ; CODE XREF=sub_10fe0+743, sub_10fe0+753, sub_10fe0+767
00000000000115d6         jmp        sub_10870+268

                     loc_115db:
00000000000115db         mov        rdx, qword [rsp+64]                         ; CODE XREF=sub_10fe0+278, sub_10fe0+1646
00000000000115e0         mov        dword [rdx], eax
00000000000115e2         jmp        loc_11458

                     loc_115e7:
00000000000115e7         movsxd     rax, ebx                                    ; CODE XREF=sub_10fe0+335
00000000000115ea         mov        r11, qword [rsp+32]
00000000000115ef         add        qword [r14+0x48], rax
00000000000115f3         mov        r10, qword [rsp+96]
00000000000115f8         mov        rdx, r11                                    ; argument #3 for method peek_token_bracket
00000000000115fb         mov        rdi, r10                                    ; argument #1 for method peek_token_bracket
00000000000115fe         call       peek_token_bracket                          ; peek_token_bracket
0000000000011603         movzx      edx, byte [rsp+200]
000000000001160b         cmp        dl, 0x2
000000000001160e         je         loc_115c1

0000000000011610         cmp        dl, 0x15
0000000000011613         je         loc_11827

0000000000011619         mov        rdx, qword [rsp+104]
000000000001161e         lea        rdi, qword [rsp+176]                        ; argument #1 for method parse_bracket_element.constprop.37
0000000000011626         mov        r9d, 0x1                                    ; argument #6 for method parse_bracket_element.constprop.37
000000000001162c         mov        r8, r11                                     ; argument #5 for method parse_bracket_element.constprop.37
000000000001162f         mov        ecx, eax                                    ; argument #4 for method parse_bracket_element.constprop.37
0000000000011631         mov        dword [rsp+176], 0x3
000000000001163c         mov        qword [rsp+184], rdx
0000000000011644         mov        rdx, r10                                    ; argument #3 for method parse_bracket_element.constprop.37
0000000000011647         call       parse_bracket_element.constprop.37          ; parse_bracket_element.constprop.37
000000000001164c         test       eax, eax
000000000001164e         jne        loc_115db

0000000000011650         mov        rdx, qword [rsp+32]                         ; argument #3 for method peek_token_bracket
0000000000011655         mov        rsi, r14                                    ; argument #2 for method peek_token_bracket
0000000000011658         mov        rdi, r15                                    ; argument #1 for method peek_token_bracket
000000000001165b         call       peek_token_bracket                          ; peek_token_bracket
0000000000011660         movsxd     rbx, eax
0000000000011663         mov        rax, qword [rsp+16]
0000000000011668         mov        esi, dword [rsp+160]
000000000001166f         mov        r9d, 0x0
0000000000011675         cmp        dword [rax+0xb4], 0x1
000000000001167c         lea        eax, dword [rsi-2]
000000000001167f         cmovg      r9, r13
0000000000011683         and        eax, 0xfffffffd
0000000000011686         je         loc_11af9

000000000001168c         mov        r10d, dword [rsp+176]
0000000000011694         lea        eax, dword [r10-2]
0000000000011698         and        eax, 0xfffffffd
000000000001169b         je         loc_11af9

00000000000116a1         cmp        esi, 0x3
00000000000116a4         sete       r11b
00000000000116a8         je         loc_11b3d

                     loc_116ae:
00000000000116ae         cmp        r10d, 0x3                                   ; CODE XREF=sub_10fe0+2939
00000000000116b2         je         loc_11b09

                     loc_116b8:
00000000000116b8         test       esi, esi                                    ; CODE XREF=sub_10fe0+2887
00000000000116ba         jne        loc_11a29

00000000000116c0         movzx      edx, byte [rsp+168]

                     loc_116c8:
00000000000116c8         test       r10d, r10d                                  ; CODE XREF=sub_10fe0+2638, sub_10fe0+2655
00000000000116cb         jne        loc_11a0d

00000000000116d1         movzx      r8d, byte [rsp+184]

                     loc_116da:
00000000000116da         test       esi, esi                                    ; CODE XREF=sub_10fe0+3278
00000000000116dc         je         loc_119c6

00000000000116e2         test       r11b, r11b
00000000000116e5         jne        loc_119c6

00000000000116eb         test       r9, r9
00000000000116ee         mov        edx, dword [rsp+168]
00000000000116f5         je         loc_11714

                     loc_116f7:
00000000000116f7         mov        edi, r8d                                    ; argument "__c" for method j_btowc, CODE XREF=sub_10fe0+2578, sub_10fe0+2586
00000000000116fa         mov        dword [rsp+120], edx
00000000000116fe         mov        qword [rsp+112], r9
0000000000011703         call       j_btowc                                     ; btowc
0000000000011708         mov        r9, qword [rsp+112]
000000000001170d         mov        edx, dword [rsp+120]
0000000000011711         mov        r8d, eax

                     loc_11714:
0000000000011714         cmp        edx, 0xffffffff                             ; CODE XREF=sub_10fe0+1813, sub_10fe0+2600
0000000000011717         je         loc_11b2d

000000000001171d         cmp        r8d, 0xffffffff
0000000000011721         je         loc_11b2d

                     loc_11727:
0000000000011727         test       qword [rsp+32], 0x10000                     ; CODE XREF=sub_10fe0+2663, sub_10fe0+2675
0000000000011730         je         loc_1173b

0000000000011732         cmp        r8d, edx
0000000000011735         jb         loc_11af9

                     loc_1173b:
000000000001173b         test       r9, r9                                      ; CODE XREF=sub_10fe0+1872
000000000001173e         je         loc_11766

0000000000011740         mov        rax, qword [r9+0x40]
0000000000011744         cmp        rax, qword [rsp+72]
0000000000011749         mov        rcx, qword [r9+8]
000000000001174d         je         loc_11b63

                     loc_11753:
0000000000011753         mov        dword [rcx+rax*4], edx                      ; CODE XREF=sub_10fe0+3088
0000000000011756         mov        rcx, qword [r9+0x10]
000000000001175a         lea        rsi, qword [rax+1]
000000000001175e         mov        qword [r9+0x40], rsi
0000000000011762         mov        dword [rcx+rax*4], r8d

                     loc_11766:
0000000000011766         xor        eax, eax                                    ; CODE XREF=sub_10fe0+1886
0000000000011768         mov        edi, 0x1

                     loc_1176d:
000000000001176d         cmp        edx, eax                                    ; CODE XREF=sub_10fe0+1971
000000000001176f         mov        ecx, eax
0000000000011771         ja         loc_11789

0000000000011773         cmp        r8d, eax
0000000000011776         jb         loc_11789

0000000000011778         mov        rsi, rax
000000000001177b         mov        r11, rdi
000000000001177e         sar        rsi, 0x6
0000000000011782         shl        r11, cl
0000000000011785         or         qword [r12+rsi*8], r11

                     loc_11789:
0000000000011789         add        rax, 0x1                                    ; CODE XREF=sub_10fe0+1937, sub_10fe0+1942
000000000001178d         cmp        rax, 0x100
0000000000011793         jne        loc_1176d

0000000000011795         mov        rax, qword [rsp+64]
000000000001179a         mov        dword [rax], 0x0
00000000000117a0         jmp        loc_11420
00000000000117a5         mov        rbx, qword [rsp+0x18]                       ; CODE XREF=sub_10870+204
00000000000117aa         mov        rdx, rax
00000000000117ad         mov        rsi, r14
00000000000117b0         mov        qword [rsp], r8
00000000000117b4         mov        r15, rax
00000000000117b7         mov        rdi, rbx
00000000000117ba         call       peek_token                                  ; peek_token
00000000000117bf         cdqe
00000000000117c1         add        qword [r14+0x48], rax
00000000000117c5         mov        r9, qword [rsp+0x40]
00000000000117ca         mov        r8, qword [rsp]
00000000000117ce         mov        rcx, r15
00000000000117d1         mov        rdx, rbx
00000000000117d4         mov        rsi, rbp
00000000000117d7         mov        rdi, r14
00000000000117da         call       parse_expression                            ; parse_expression
00000000000117df         mov        qword [rsp+0x28], rax
00000000000117e4         jmp        sub_10870+128

                     loc_117e9:
00000000000117e9         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_10fe0+99, sub_10fe0+1396
00000000000117ee         mov        dword [rax], 0x2
00000000000117f4         jmp        loc_11458

                     loc_117f9:
00000000000117f9         mov        rdi, r12                                    ; argument "__ptr" for method j_free, CODE XREF=sub_10fe0+62
00000000000117fc         call       j_free                                      ; free
0000000000011801         mov        rdi, r13                                    ; argument "__ptr" for method j_free
0000000000011804         call       j_free                                      ; free
0000000000011809         jmp        sub_10fe0+872
                        ; endp
000000000001180e         mov        rax, qword [rsp+0x40]                       ; CODE XREF=sub_10fe0+508
0000000000011813         mov        qword [rsp+0x28], 0x0
000000000001181c         mov        dword [rax], 0x6
0000000000011822         jmp        sub_10870+128

                     loc_11827:
0000000000011827         mov        eax, ebx                                    ; CODE XREF=sub_10fe0+1587
0000000000011829         neg        eax
000000000001182b         cdqe
000000000001182d         add        qword [r14+0x48], rax
0000000000011831         mov        byte [r15+8], 0x1
0000000000011836         mov        eax, dword [rsp+160]
000000000001183d         jmp        loc_11135

                     loc_11842:
0000000000011842         add        qword [r14+0x48], rbx                       ; CODE XREF=sub_10fe0+1103
0000000000011846         cmp        byte [rsp+87], 0x0
000000000001184b         je         loc_11861

000000000001184d         lea        rdx, qword [r12+0x20]
0000000000011852         mov        rax, r12

                     loc_11855:
0000000000011855         not        qword [rax]                                 ; CODE XREF=sub_10fe0+2175
0000000000011858         add        rax, 0x8
000000000001185c         cmp        rdx, rax
000000000001185f         jne        loc_11855

                     loc_11861:
0000000000011861         mov        rax, qword [rsp+16]                         ; CODE XREF=sub_10fe0+2155
0000000000011866         mov        edx, dword [rax+0xb4]
000000000001186c         cmp        edx, 0x1
000000000001186f         jle        loc_11889

0000000000011871         mov        rcx, qword [rax+0x78]
0000000000011875         xor        eax, eax

                     loc_11877:
0000000000011877         mov        rsi, qword [rcx+rax]                        ; CODE XREF=sub_10fe0+2215
000000000001187b         and        qword [r12+rax], rsi
000000000001187f         add        rax, 0x8
0000000000011883         cmp        rax, 0x20
0000000000011887         jne        loc_11877

                     loc_11889:
0000000000011889         cmp        qword [r13+0x28], 0x0                       ; CODE XREF=sub_10fe0+2191
000000000001188e         jne        loc_11918

0000000000011894         cmp        qword [r13+0x30], 0x0
0000000000011899         jne        loc_11918

000000000001189b         cmp        qword [r13+0x38], 0x0
00000000000118a0         jne        loc_11918

00000000000118a2         cmp        qword [r13+0x40], 0x0
00000000000118a7         jne        loc_11918

00000000000118a9         sub        edx, 0x1
00000000000118ac         jle        loc_118bc

00000000000118ae         cmp        qword [r13+0x48], 0x0
00000000000118b3         jne        loc_11918

00000000000118b5         test       byte [r13+0x20], 0x1
00000000000118ba         jne        loc_11918

                     loc_118bc:
00000000000118bc         mov        rdi, r13                                    ; argument #1 for method free_charset, CODE XREF=sub_10fe0+2252
00000000000118bf         call       free_charset                                ; free_charset
00000000000118c4         mov        rax, qword [rsp+16]
00000000000118c9         lea        r8, qword [rsp+176]                         ; argument #5 for method create_token_tree.isra.16
00000000000118d1         xor        ecx, ecx                                    ; argument #4 for method create_token_tree.isra.16
00000000000118d3         xor        edx, edx                                    ; argument #3 for method create_token_tree.isra.16
00000000000118d5         mov        byte [rsp+184], 0x3
00000000000118dd         mov        qword [rsp+176], r12
00000000000118e5         lea        rsi, qword [rax+0x80]                       ; argument #2 for method create_token_tree.isra.16
00000000000118ec         lea        rdi, qword [rax+0x70]                       ; argument #1 for method create_token_tree.isra.16
00000000000118f0         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
00000000000118f5         test       rax, rax
00000000000118f8         mov        qword [rsp+40], rax
00000000000118fd         jne        sub_10870+268

                     loc_11903:
0000000000011903         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_10fe0+2444, sub_10fe0+2512, sub_10fe0+3170, sub_10fe0+3225
0000000000011908         mov        dword [rax], 0xc
000000000001190e         jmp        loc_11458
0000000000011913         nop        dword [rax+rax]

                     loc_11918:
0000000000011918         mov        rax, qword [rsp+16]                         ; CODE XREF=sub_10fe0+2222, sub_10fe0+2233, sub_10fe0+2240, sub_10fe0+2247, sub_10fe0+2259, sub_10fe0+2266
000000000001191d         lea        r15, qword [rsp+176]
0000000000011925         xor        edx, edx                                    ; argument #3 for method create_token_tree.isra.16
0000000000011927         xor        ecx, ecx                                    ; argument #4 for method create_token_tree.isra.16
0000000000011929         mov        r8, r15                                     ; argument #5 for method create_token_tree.isra.16
000000000001192c         or         byte [rax+0xb0], 0x2
0000000000011933         lea        rbx, qword [rax+0x70]
0000000000011937         lea        rbp, qword [rax+0x80]
000000000001193e         mov        byte [rsp+184], 0x6
0000000000011946         mov        qword [rsp+176], r13
000000000001194e         mov        rdi, rbx                                    ; argument #1 for method create_token_tree.isra.16
0000000000011951         mov        rsi, rbp                                    ; argument #2 for method create_token_tree.isra.16
0000000000011954         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000011959         mov        rdi, rax
000000000001195c         mov        qword [rsp+40], rax
0000000000011961         lea        rdx, qword [r12+0x20]
0000000000011966         test       rdi, rdi
0000000000011969         mov        rax, r12
000000000001196c         je         loc_11903

                     loc_1196e:
000000000001196e         cmp        qword [rax], 0x0                            ; CODE XREF=sub_10fe0+2463
0000000000011972         jne        loc_11c1d

0000000000011978         add        rax, 0x8
000000000001197c         cmp        rdx, rax
000000000001197f         jne        loc_1196e

0000000000011981         mov        rdi, r12                                    ; argument "__ptr" for method j_free
0000000000011984         call       j_free                                      ; free
0000000000011989         jmp        sub_10870+268
                        ; endp

                     loc_1198e:
000000000001198e         mov        rdx, qword [rsp+48]                         ; CODE XREF=sub_10fe0+1204
0000000000011993         lea        rdi, qword [rdx+rdx+1]
0000000000011998         lea        rsi, qword [rdi*4]                          ; argument "__size" for method j_realloc
00000000000119a0         mov        qword [rsp+48], rdi
00000000000119a5         mov        rdi, rax                                    ; argument "__ptr" for method j_realloc
00000000000119a8         call       j_realloc                                   ; realloc
00000000000119ad         test       rax, rax
00000000000119b0         je         loc_11903

00000000000119b6         mov        qword [r13], rax
00000000000119ba         mov        rdx, qword [r13+0x28]
00000000000119be         jmp        loc_1149a

                     loc_119c3:
00000000000119c3         xor        r8d, r8d                                    ; CODE XREF=sub_10fe0+2617, sub_10fe0+2622

                     loc_119c6:
00000000000119c6         test       r9, r9                                      ; CODE XREF=sub_10fe0+1788, sub_10fe0+1797
00000000000119c9         je         loc_11a44

00000000000119cb         mov        edi, edx                                    ; argument "__c" for method j_btowc
00000000000119cd         mov        dword [rsp+120], r8d
00000000000119d2         mov        qword [rsp+112], r9
00000000000119d7         call       j_btowc                                     ; btowc
00000000000119dc         mov        edx, eax
00000000000119de         mov        eax, dword [rsp+176]
00000000000119e5         mov        r9, qword [rsp+112]
00000000000119ea         mov        r8d, dword [rsp+120]
00000000000119ef         cmp        eax, 0x3
00000000000119f2         je         loc_116f7

00000000000119f8         test       eax, eax
00000000000119fa         je         loc_116f7

                     loc_11a00:
0000000000011a00         mov        r8d, dword [rsp+184]                        ; CODE XREF=sub_10fe0+2631, sub_10fe0+2673
0000000000011a08         jmp        loc_11714

                     loc_11a0d:
0000000000011a0d         cmp        r10d, 0x3                                   ; CODE XREF=sub_10fe0+1771
0000000000011a11         je         loc_11ca2

0000000000011a17         test       esi, esi
0000000000011a19         je         loc_119c3

0000000000011a1b         test       r11b, r11b
0000000000011a1e         jne        loc_119c3

0000000000011a20         mov        edx, dword [rsp+168]
0000000000011a27         jmp        loc_11a00

                     loc_11a29:
0000000000011a29         xor        edx, edx                                    ; CODE XREF=sub_10fe0+1754
0000000000011a2b         cmp        esi, 0x3
0000000000011a2e         jne        loc_116c8

0000000000011a34         mov        rax, qword [rsp+168]
0000000000011a3c         movzx      edx, byte [rax]
0000000000011a3f         jmp        loc_116c8

                     loc_11a44:
0000000000011a44         test       r10d, r10d                                  ; CODE XREF=sub_10fe0+2537
0000000000011a47         je         loc_11727

0000000000011a4d         cmp        r10d, 0x3
0000000000011a51         jne        loc_11a00

0000000000011a53         jmp        loc_11727

                     loc_11a58:
0000000000011a58         mov        ebx, 0x80                                   ; CODE XREF=sub_10ea0+89
0000000000011a5d         mov        r12d, 0x2

                     loc_11a63:
0000000000011a63         call       j___ctype_b_loc                             ; __ctype_b_loc, CODE XREF=sub_10fe0+2808
0000000000011a68         movsxd     rdx, ebx
0000000000011a6b         movsxd     r9, r12d
0000000000011a6e         mov        r8d, 0x1
0000000000011a74         add        rdx, rdx
0000000000011a77         add        rdx, qword [rax]
0000000000011a7a         mov        rax, qword [rsp+16]
0000000000011a7f         lea        rdi, qword [rax+r9*8]

                     loc_11a83:
0000000000011a83         xor        eax, eax                                    ; CODE XREF=sub_10fe0+2796
0000000000011a85         jmp        loc_11aa2
0000000000011a87         nop        word [rax+rax]

                     loc_11a90:
0000000000011a90         lea        esi, dword [rbx+rax]                        ; CODE XREF=sub_10fe0+2760
0000000000011a93         cmp        esi, 0x5f
0000000000011a96         je         loc_11aaa

                     loc_11a98:
0000000000011a98         add        rax, 0x1                                    ; CODE XREF=sub_10fe0+2775
0000000000011a9c         cmp        rax, 0x40
0000000000011aa0         je         loc_11ab9

                     loc_11aa2:
0000000000011aa2         test       byte [rdx+rax*2], 0x8                       ; CODE XREF=sub_10fe0+2725
0000000000011aa6         mov        ecx, eax
0000000000011aa8         je         loc_11a90

                     loc_11aaa:
0000000000011aaa         mov        rsi, r8                                     ; CODE XREF=sub_10fe0+2742
0000000000011aad         shl        rsi, cl
0000000000011ab0         or         qword [rdi+0xb8], rsi
0000000000011ab7         jmp        loc_11a98

                     loc_11ab9:
0000000000011ab9         add        r9, 0x1                                     ; CODE XREF=sub_10fe0+2752
0000000000011abd         add        ebx, 0x40
0000000000011ac0         sub        rdx, 0xffffffffffffff80
0000000000011ac4         add        rdi, 0x8
0000000000011ac8         cmp        r9d, 0x3
0000000000011acc         jle        loc_11a83

0000000000011ace         jmp        loc_10f11

                     loc_11ad3:
0000000000011ad3         xor        ebx, ebx                                    ; CODE XREF=sub_10ea0+47
0000000000011ad5         xor        r12d, r12d
0000000000011ad8         jmp        loc_11a63

                     loc_11ada:
0000000000011ada         lea        rcx, qword [__PRETTY_FUNCTION__.7327]       ; argument "__function" for method j___assert_fail, "parse_bracket_exp", CODE XREF=sub_10fe0+344
0000000000011ae1         lea        rsi, qword [aCoreutils831li_14f40]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/regcomp.c"
0000000000011ae8         lea        rdi, qword [aNum0+7]                        ; argument "__assertion" for method j___assert_fail, 0x14f8f
0000000000011aef         mov        edx, aIteunlocked                           ; argument "__line" for method j___assert_fail, "ite_unlocked"
0000000000011af4         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_11af9:
0000000000011af9         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_10fe0+1702, sub_10fe0+1723, sub_10fe0+1877
0000000000011afe         mov        dword [rax], 0xb
0000000000011b04         jmp        loc_11458

                     loc_11b09:
0000000000011b09         mov        rdi, qword [rsp+184]                        ; CODE XREF=sub_10fe0+1746
0000000000011b11         xor        eax, eax
0000000000011b13         or         rcx, 0xffffffffffffffff
0000000000011b17         repne scasb al, byte [rdi]
0000000000011b19         mov        rax, rcx
0000000000011b1c         not        rax
0000000000011b1f         sub        rax, 0x1
0000000000011b23         cmp        rax, 0x1
0000000000011b27         jbe        loc_116b8

                     loc_11b2d:
0000000000011b2d         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_10fe0+1847, sub_10fe0+1857, sub_10fe0+2945
0000000000011b32         mov        dword [rax], 0x3
0000000000011b38         jmp        loc_11458

                     loc_11b3d:
0000000000011b3d         mov        rdi, qword [rsp+168]                        ; CODE XREF=sub_10fe0+1736
0000000000011b45         xor        eax, eax
0000000000011b47         or         rcx, 0xffffffffffffffff
0000000000011b4b         repne scasb al, byte [rdi]
0000000000011b4d         mov        rax, rcx
0000000000011b50         not        rax
0000000000011b53         sub        rax, 0x1
0000000000011b57         cmp        rax, 0x1
0000000000011b5b         jbe        loc_116ae

0000000000011b61         jmp        loc_11b2d

                     loc_11b63:
0000000000011b63         mov        rax, qword [rsp+72]                         ; CODE XREF=sub_10fe0+1901
0000000000011b68         mov        rdi, rcx                                    ; argument "__ptr" for method j_realloc
0000000000011b6b         mov        dword [rsp+140], r8d
0000000000011b73         mov        dword [rsp+136], edx
0000000000011b7a         mov        qword [rsp+112], r9
0000000000011b7f         add        rax, rax
0000000000011b82         add        rax, 0x1
0000000000011b86         lea        r10, qword [rax*4]
0000000000011b8e         mov        qword [rsp+72], rax
0000000000011b93         mov        rsi, r10                                    ; argument "__size" for method j_realloc
0000000000011b96         mov        qword [rsp+128], r10
0000000000011b9e         call       j_realloc                                   ; realloc
0000000000011ba3         mov        r9, qword [rsp+112]
0000000000011ba8         mov        r10, qword [rsp+128]
0000000000011bb0         mov        qword [rsp+120], rax
0000000000011bb5         mov        rdi, qword [r9+0x10]                        ; argument "__ptr" for method j_realloc
0000000000011bb9         mov        rsi, r10                                    ; argument "__size" for method j_realloc
0000000000011bbc         call       j_realloc                                   ; realloc
0000000000011bc1         mov        rcx, qword [rsp+120]
0000000000011bc6         test       rcx, rcx
0000000000011bc9         je         loc_11bf5

0000000000011bcb         test       rax, rax
0000000000011bce         mov        r9, qword [rsp+112]
0000000000011bd3         mov        edx, dword [rsp+136]
0000000000011bda         mov        r8d, dword [rsp+140]
0000000000011be2         je         loc_11bf5

0000000000011be4         mov        qword [r9+0x10], rax
0000000000011be8         mov        qword [r9+8], rcx
0000000000011bec         mov        rax, qword [r9+0x40]
0000000000011bf0         jmp        loc_11753

                     loc_11bf5:
0000000000011bf5         mov        rdi, rcx                                    ; argument "__ptr" for method j_free, CODE XREF=sub_10fe0+3049, sub_10fe0+3074
0000000000011bf8         mov        qword [rsp+0], rax
0000000000011bfc         call       j_free                                      ; free
0000000000011c01         mov        rax, qword [rsp+0]
0000000000011c05         mov        rdi, rax                                    ; argument "__ptr" for method j_free
0000000000011c08         call       j_free                                      ; free
0000000000011c0d         mov        rax, qword [rsp+64]
0000000000011c12         mov        dword [rax], 0xc
0000000000011c18         jmp        loc_11458

                     loc_11c1d:
0000000000011c1d         xor        ecx, ecx                                    ; argument #4 for method create_token_tree.isra.16, CODE XREF=sub_10fe0+2450
0000000000011c1f         xor        edx, edx                                    ; argument #3 for method create_token_tree.isra.16
0000000000011c21         mov        r8, r15                                     ; argument #5 for method create_token_tree.isra.16
0000000000011c24         mov        rsi, rbp                                    ; argument #2 for method create_token_tree.isra.16
0000000000011c27         mov        rdi, rbx                                    ; argument #1 for method create_token_tree.isra.16
0000000000011c2a         mov        byte [rsp+184], 0x3
0000000000011c32         mov        qword [rsp+176], r12
0000000000011c3a         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000011c3f         test       rax, rax
0000000000011c42         je         loc_11903

0000000000011c48         mov        rcx, qword [rsp+40]                         ; argument #4 for method create_token_tree.isra.16
0000000000011c4d         lea        r8, qword [rsp+192]                         ; argument #5 for method create_token_tree.isra.16
0000000000011c55         mov        rdx, rax                                    ; argument #3 for method create_token_tree.isra.16
0000000000011c58         mov        rsi, rbp                                    ; argument #2 for method create_token_tree.isra.16
0000000000011c5b         mov        rdi, rbx                                    ; argument #1 for method create_token_tree.isra.16
0000000000011c5e         mov        byte [rsp+200], 0xa
0000000000011c66         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000011c6b         test       rax, rax
0000000000011c6e         mov        qword [rsp+40], rax
0000000000011c73         jne        sub_10870+268

0000000000011c79         jmp        loc_11903

                     loc_11c7e:
0000000000011c7e         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=sub_10870+150
                        ; endp

                     loc_11c83:
0000000000011c83         mov        rax, qword [rsp+24]                         ; CODE XREF=sub_10870+1238
0000000000011c88         cmp        byte [rax+8], 0x2
0000000000011c8c         jne        loc_10e80

0000000000011c92         mov        rax, qword [rsp+64]
0000000000011c97         mov        dword [rax], 0x9
0000000000011c9d         jmp        loc_10e8b

                     loc_11ca2:
0000000000011ca2         mov        rax, qword [rsp+184]                        ; CODE XREF=sub_10fe0+2609
0000000000011caa         movzx      r8d, byte [rax]
0000000000011cae         jmp        loc_116da


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_11cb3:
0000000000011cb3         nop        dword [rax]                                 ; End of unwind block (FDE at 0x179b0)
0000000000011cb6         nop        word [cs:rax+rax]
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_50: int8_t, -80
        ;    var_58: int8_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120


                     parse_branch:
0000000000011cc0         push       r15                                         ; Begin of unwind block (FDE at 0x17a10), CODE XREF=parse_reg_exp+67, parse_reg_exp+174
0000000000011cc2         push       r14
0000000000011cc4         mov        r15, rcx
0000000000011cc7         push       r13
0000000000011cc9         push       r12
0000000000011ccb         mov        r13, rsi
0000000000011cce         push       rbp
0000000000011ccf         push       rbx
0000000000011cd0         mov        rbx, r9
0000000000011cd3         mov        rbp, rdx
0000000000011cd6         mov        r12, r8
0000000000011cd9         sub        rsp, 0x48
0000000000011cdd         mov        rax, qword [fs:0x28]
0000000000011ce6         mov        qword [rsp+0x78+var_40], rax
0000000000011ceb         xor        eax, eax
0000000000011ced         mov        rax, qword [rsi]
0000000000011cf0         mov        qword [rsp+0x78+var_78], rdi
0000000000011cf4         mov        qword [rsp+0x78+var_68], rax
0000000000011cf9         call       parse_expression                            ; parse_expression
0000000000011cfe         mov        edx, dword [rbx]
0000000000011d00         mov        r14, rax
0000000000011d03         test       edx, edx
0000000000011d05         je         loc_11d10

0000000000011d07         test       rax, rax
0000000000011d0a         je         loc_11e0a

                     loc_11d10:
0000000000011d10         lea        rax, qword [rsp+0x78+var_58]                ; CODE XREF=parse_branch+69
0000000000011d15         mov        qword [rsp+0x78+var_60], rax
0000000000011d1a         nop        word [rax+rax]

                     loc_11d20:
0000000000011d20         movzx      eax, byte [rbp+8]                           ; CODE XREF=parse_branch+303
0000000000011d24         mov        edx, eax
0000000000011d26         and        edx, 0xfffffff7
0000000000011d29         cmp        dl, 0x2
0000000000011d2c         je         loc_11dc0

                     loc_11d32:
0000000000011d32         cmp        al, 0x9                                     ; CODE XREF=parse_branch+246
0000000000011d34         jne        loc_11d3f

0000000000011d36         test       r12, r12
0000000000011d39         jne        loc_11dc0

                     loc_11d3f:
0000000000011d3f         mov        rdi, qword [rsp+0x78+var_78]                ; CODE XREF=parse_branch+116
0000000000011d43         mov        r9, rbx
0000000000011d46         mov        r8, r12
0000000000011d49         mov        rcx, r15
0000000000011d4c         mov        rdx, rbp
0000000000011d4f         mov        rsi, r13
0000000000011d52         call       parse_expression                            ; parse_expression
0000000000011d57         mov        r9, rax
0000000000011d5a         mov        eax, dword [rbx]
0000000000011d5c         test       eax, eax
0000000000011d5e         je         loc_11d69

0000000000011d60         test       r9, r9
0000000000011d63         je         loc_11df4

                     loc_11d69:
0000000000011d69         test       r14, r14                                    ; CODE XREF=parse_branch+158
0000000000011d6c         je         loc_11de8

0000000000011d6e         test       r9, r9
0000000000011d71         je         loc_11de8

0000000000011d73         mov        rax, qword [rsp+0x78+var_68]
0000000000011d78         mov        r8, qword [rsp+0x78+var_60]
0000000000011d7d         mov        rcx, r9
0000000000011d80         mov        rdx, r14
0000000000011d83         mov        qword [rsp+0x78+var_70], r9
0000000000011d88         mov        byte [rsp+0x78+var_50], 0x10
0000000000011d8d         lea        rsi, qword [rax+0x80]
0000000000011d94         lea        rdi, qword [rax+0x70]
0000000000011d98         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000011d9d         test       rax, rax
0000000000011da0         mov        r9, qword [rsp+0x78+var_70]
0000000000011da5         je         loc_11e10

0000000000011da7         mov        r14, rax
0000000000011daa         movzx      eax, byte [rbp+8]
0000000000011dae         mov        edx, eax
0000000000011db0         and        edx, 0xfffffff7
0000000000011db3         cmp        dl, 0x2
0000000000011db6         jne        loc_11d32

0000000000011dbc         nop        dword [rax]

                     loc_11dc0:
0000000000011dc0         mov        rcx, qword [rsp+0x78+var_40]                ; CODE XREF=parse_branch+108, parse_branch+121, parse_branch+333, parse_branch+379
0000000000011dc5         xor        rcx, qword [fs:0x28]
0000000000011dce         mov        rax, r14
0000000000011dd1         jne        loc_11e3d

0000000000011dd3         add        rsp, 0x48
0000000000011dd7         pop        rbx
0000000000011dd8         pop        rbp
0000000000011dd9         pop        r12
0000000000011ddb         pop        r13
0000000000011ddd         pop        r14
0000000000011ddf         pop        r15
0000000000011de1         ret
                        ; endp
0000000000011de2         align      8

                     loc_11de8:
0000000000011de8         test       r14, r14                                    ; CODE XREF=parse_branch+172, parse_branch+177
0000000000011deb         cmove      r14, r9
0000000000011def         jmp        loc_11d20

                     loc_11df4:
0000000000011df4         test       r14, r14                                    ; CODE XREF=parse_branch+163
0000000000011df7         je         loc_11e0a

0000000000011df9         lea        rsi, qword [free_tree]                      ; free_tree
0000000000011e00         xor        edx, edx
0000000000011e02         mov        rdi, r14
0000000000011e05         call       postorder                                   ; postorder

                     loc_11e0a:
0000000000011e0a         xor        r14d, r14d                                  ; CODE XREF=parse_branch+74, parse_branch+311
0000000000011e0d         jmp        loc_11dc0
0000000000011e0f         align      16

                     loc_11e10:
0000000000011e10         lea        rsi, qword [free_tree]                      ; free_tree, CODE XREF=parse_branch+229
0000000000011e17         mov        rdi, r9
0000000000011e1a         xor        edx, edx
0000000000011e1c         call       postorder                                   ; postorder
0000000000011e21         lea        rsi, qword [free_tree]                      ; free_tree
0000000000011e28         mov        rdi, r14
0000000000011e2b         xor        edx, edx
0000000000011e2d         xor        r14d, r14d
0000000000011e30         call       postorder                                   ; postorder
0000000000011e35         mov        dword [rbx], 0xc
0000000000011e3b         jmp        loc_11dc0

                     loc_11e3d:
0000000000011e3d         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=parse_branch+273
                        ; endp
0000000000011e42         align      16                                          ; End of unwind block (FDE at 0x17a10)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_50: int8_t, -80
        ;    var_58: int8_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128


                     parse_reg_exp:
0000000000011e50         push       r15                                         ; Begin of unwind block (FDE at 0x17a5c), CODE XREF=sub_10870+47, re_compile_internal+1203
0000000000011e52         push       r14
0000000000011e54         mov        r14, rcx
0000000000011e57         push       r13
0000000000011e59         push       r12
0000000000011e5b         mov        r13, r9
0000000000011e5e         push       rbp
0000000000011e5f         push       rbx
0000000000011e60         mov        rbp, rdx
0000000000011e63         mov        r12, rdi
0000000000011e66         sub        rsp, 0x58
0000000000011e6a         mov        rbx, qword [rsi]
0000000000011e6d         mov        rax, qword [fs:0x28]
0000000000011e76         mov        qword [rsp+0x88+var_40], rax
0000000000011e7b         xor        eax, eax
0000000000011e7d         mov        qword [rsp+0x88+var_60], rsi
0000000000011e82         mov        qword [rsp+0x88+var_78], r8
0000000000011e87         mov        rax, qword [rbx+0xa8]
0000000000011e8e         mov        qword [rsp+0x88+var_68], rax
0000000000011e93         call       parse_branch                                ; parse_branch
0000000000011e98         mov        edx, dword [r13]
0000000000011e9c         mov        r15, rax
0000000000011e9f         test       edx, edx
0000000000011ea1         je         loc_11eac

0000000000011ea3         test       rax, rax
0000000000011ea6         je         loc_11f92

                     loc_11eac:
0000000000011eac         lea        rax, qword [rsp+0x88+var_58]                ; CODE XREF=parse_reg_exp+81
0000000000011eb1         mov        qword [rsp+0x88+var_80], rax
0000000000011eb6         jmp        loc_11f44
0000000000011ebb         align      64

                     loc_11ec0:
0000000000011ec0         cmp        al, 0x9                                     ; CODE XREF=parse_reg_exp+290
0000000000011ec2         jne        loc_11ed0

0000000000011ec4         cmp        qword [rsp+0x88+var_78], 0x0
0000000000011eca         jne        loc_11f78

                     loc_11ed0:
0000000000011ed0         mov        rax, qword [rbx+0xa8]                       ; CODE XREF=parse_reg_exp+114
0000000000011ed7         mov        r8, qword [rsp+0x88+var_78]
0000000000011edc         mov        rcx, r14
0000000000011edf         mov        rsi, qword [rsp+0x88+var_60]
0000000000011ee4         mov        r9, r13
0000000000011ee7         mov        rdx, rbp
0000000000011eea         mov        rdi, r12
0000000000011eed         mov        qword [rsp+0x88+var_70], rax
0000000000011ef2         mov        rax, qword [rsp+0x88+var_68]
0000000000011ef7         mov        qword [rbx+0xa8], rax
0000000000011efe         call       parse_branch                                ; parse_branch
0000000000011f03         mov        rcx, rax
0000000000011f06         mov        eax, dword [r13]
0000000000011f0a         test       eax, eax
0000000000011f0c         je         loc_11f13

0000000000011f0e         test       rcx, rcx
0000000000011f11         je         loc_11f7c

                     loc_11f13:
0000000000011f13         mov        rax, qword [rsp+0x88+var_70]                ; CODE XREF=parse_reg_exp+188
0000000000011f18         or         qword [rbx+0xa8], rax

                     loc_11f1f:
0000000000011f1f         mov        r8, qword [rsp+0x88+var_80]                 ; CODE XREF=parse_reg_exp+298
0000000000011f24         lea        rsi, qword [rbx+0x80]
0000000000011f2b         lea        rdi, qword [rbx+0x70]
0000000000011f2f         mov        rdx, r15
0000000000011f32         mov        byte [rsp+0x88+var_50], 0xa
0000000000011f37         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000011f3c         test       rax, rax
0000000000011f3f         mov        r15, rax
0000000000011f42         je         loc_11fc0

                     loc_11f44:
0000000000011f44         cmp        byte [rbp+8], 0xa                           ; CODE XREF=parse_reg_exp+102
0000000000011f48         jne        loc_11f98

0000000000011f4a         mov        rdx, r14
0000000000011f4d         mov        rsi, r12
0000000000011f50         mov        rdi, rbp
0000000000011f53         or         rdx, 0x800000
0000000000011f5a         call       peek_token                                  ; peek_token
0000000000011f5f         cdqe
0000000000011f61         add        qword [r12+0x48], rax
0000000000011f66         movzx      eax, byte [rbp+8]
0000000000011f6a         mov        edx, eax
0000000000011f6c         and        edx, 0xfffffff7
0000000000011f6f         cmp        dl, 0x2
0000000000011f72         jne        loc_11ec0

                     loc_11f78:
0000000000011f78         xor        ecx, ecx                                    ; CODE XREF=parse_reg_exp+122
0000000000011f7a         jmp        loc_11f1f

                     loc_11f7c:
0000000000011f7c         test       r15, r15                                    ; CODE XREF=parse_reg_exp+193
0000000000011f7f         je         loc_11f92

0000000000011f81         lea        rsi, qword [free_tree]                      ; free_tree
0000000000011f88         xor        edx, edx
0000000000011f8a         mov        rdi, r15
0000000000011f8d         call       postorder                                   ; postorder

                     loc_11f92:
0000000000011f92         xor        r15d, r15d                                  ; CODE XREF=parse_reg_exp+86, parse_reg_exp+303
0000000000011f95         nop        dword [rax]

                     loc_11f98:
0000000000011f98         mov        rcx, qword [rsp+0x88+var_40]                ; CODE XREF=parse_reg_exp+248, parse_reg_exp+376
0000000000011f9d         xor        rcx, qword [fs:0x28]
0000000000011fa6         mov        rax, r15
0000000000011fa9         jne        loc_11fca

0000000000011fab         add        rsp, 0x58
0000000000011faf         pop        rbx
0000000000011fb0         pop        rbp
0000000000011fb1         pop        r12
0000000000011fb3         pop        r13
0000000000011fb5         pop        r14
0000000000011fb7         pop        r15
0000000000011fb9         ret
                        ; endp
0000000000011fba         align      64

                     loc_11fc0:
0000000000011fc0         mov        dword [r13], 0xc                            ; CODE XREF=parse_reg_exp+242
0000000000011fc8         jmp        loc_11f98

                     loc_11fca:
0000000000011fca         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=parse_reg_exp+345
                        ; endp
0000000000011fcf         align      16                                          ; End of unwind block (FDE at 0x17a5c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int32_t, -72
        ;    var_4D: int8_t, -77
        ;    var_4E: int8_t, -78
        ;    var_4F: int8_t, -79
        ;    var_50: int8_t, -80
        ;    var_60: int64_t, -96
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_D0: int64_t, -208
        ;    var_D8: int64_t, -216
        ;    var_E8: int64_t, -232
        ;    var_F0: int64_t, -240
        ;    var_F8: int8_t, -248
        ;    var_108: int32_t, -264
        ;    var_10C: int32_t, -268
        ;    var_130: int64_t, -304
        ;    var_138: int64_t, -312
        ;    var_140: int64_t, -320
        ;    var_148: int64_t, -328
        ;    var_150: int64_t, -336
        ;    var_158: int64_t, -344


                     re_compile_internal:
0000000000011fd0         push       r15                                         ; Begin of unwind block (FDE at 0x17aac), CODE XREF=rpl_re_compile_pattern+53, rpl_regcomp+164
0000000000011fd2         push       r14
0000000000011fd4         push       r13
0000000000011fd6         push       r12
0000000000011fd8         push       rbp
0000000000011fd9         push       rbx
0000000000011fda         sub        rsp, 0x128
0000000000011fe1         mov        qword [rdi+0x18], rcx
0000000000011fe5         mov        qword [rdi+0x10], 0x0
0000000000011fed         mov        rax, qword [fs:0x28]
0000000000011ff6         mov        qword [rsp+0x158+var_40], rax
0000000000011ffe         xor        eax, eax
0000000000012000         movzx      eax, byte [rdi+0x38]
0000000000012004         mov        qword [rsp+0x158+var_150], rdi
0000000000012009         mov        qword [rsp+0x158+var_148], rsi
000000000001200e         mov        qword [rsp+0x158+var_158], rdx
0000000000012012         mov        qword [rsp+0x158+var_140], rcx
0000000000012017         mov        dword [rsp+0x158+var_10C], 0x0
000000000001201f         mov        qword [rdi+0x30], 0x0
0000000000012027         mov        rbx, qword [rdi]
000000000001202a         mov        byte [rsp+0x158+var_138], al
000000000001202e         and        eax, 0xffffff90
0000000000012031         cmp        qword [rdi+8], 0xe7
0000000000012039         mov        byte [rdi+0x38], al
000000000001203c         jbe        loc_12e36

                     loc_12042:
0000000000012042         lea        rdi, qword [rbx+8]                          ; CODE XREF=sub_12950+1295
0000000000012046         mov        rax, qword [rsp+0x158+var_150]
000000000001204b         mov        rcx, rbx
000000000001204e         and        rdi, 0xfffffffffffffff8
0000000000012052         sub        rcx, rdi
0000000000012055         mov        qword [rax+0x10], 0xe8
000000000001205d         xor        eax, eax
000000000001205f         add        ecx, 0xe8
0000000000012065         mov        qword [rbx], 0x0
000000000001206c         mov        qword [rbx+0xe0], 0x0
0000000000012077         shr        ecx, 0x3
000000000001207a         rep stosq  qword [rdi], rax
000000000001207d         movabs     rax, 0x555555555555554
0000000000012087         mov        dword [rbx+0x80], 0xf
0000000000012091         cmp        qword [rsp+0x158+var_158], rax
0000000000012095         ja         loc_126d6

000000000001209b         mov        r14, qword [rsp+0x158+var_158]
000000000001209f         lea        rax, qword [r14+1]
00000000000120a3         mov        rdi, rax
00000000000120a6         mov        qword [rbx+8], rax
00000000000120aa         mov        qword [rsp+0x158+var_130], rax
00000000000120af         shl        rdi, 0x4                                    ; argument "__size" for method j_malloc
00000000000120b3         call       j_malloc                                    ; malloc
00000000000120b8         test       r14, r14
00000000000120bb         mov        qword [rbx], rax
00000000000120be         je         loc_12da5

00000000000120c4         mov        esi, 0x1
00000000000120c9         nop        dword [rax]

                     loc_120d0:
00000000000120d0         add        rsi, rsi                                    ; CODE XREF=re_compile_internal+263
00000000000120d3         cmp        qword [rsp+0x158+var_158], rsi
00000000000120d7         jae        loc_120d0

00000000000120d9         lea        rbp, qword [rsi-1]

                     loc_120dd:
00000000000120dd         mov        edi, 0x18                                   ; argument "__nmemb" for method j_calloc, CODE XREF=sub_12950+1116
00000000000120e2         call       j_calloc                                    ; calloc
00000000000120e7         mov        qword [rbx+0x88], rbp
00000000000120ee         mov        qword [rbx+0x40], rax
00000000000120f2         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max
00000000000120f7         mov        edi, 0xe                                    ; argument "__item" for method j_nl_langinfo
00000000000120fc         mov        dword [rbx+0xb4], eax
0000000000012102         call       j_nl_langinfo                               ; nl_langinfo
0000000000012107         movzx      edx, byte [rax]
000000000001210a         and        edx, 0xffffffdf
000000000001210d         cmp        dl, 0x55
0000000000012110         jne        loc_12160

0000000000012112         movzx      edx, byte [rax+1]
0000000000012116         and        edx, 0xffffffdf
0000000000012119         cmp        dl, 0x54
000000000001211c         jne        loc_12160

000000000001211e         movzx      edx, byte [rax+2]
0000000000012122         and        edx, 0xffffffdf
0000000000012125         cmp        dl, 0x46
0000000000012128         jne        loc_12160

000000000001212a         xor        edx, edx
000000000001212c         cmp        byte [rax+3], 0x2d
0000000000012130         lea        rdi, qword [aErrRegespace+18]               ; 0x14fe6
0000000000012137         mov        ecx, 0x2
000000000001213c         sete       dl
000000000001213f         lea        rsi, qword [rax+rdx+3]
0000000000012144         rep  cmpsb byte [rsi], byte [rdi]
0000000000012146         seta       al
0000000000012149         sbb        al, 0x0
000000000001214b         test       al, al
000000000001214d         jne        loc_12160

000000000001214f         or         byte [rbx+0xb0], 0x4
0000000000012156         nop        word [cs:rax+rax]

                     loc_12160:
0000000000012160         movzx      eax, byte [rbx+0xb0]                        ; CODE XREF=re_compile_internal+320, re_compile_internal+332, re_compile_internal+344, re_compile_internal+381
0000000000012167         mov        edx, eax
0000000000012169         and        edx, 0xfffffff7
000000000001216c         cmp        dword [rbx+0xb4], 0x1
0000000000012173         mov        byte [rbx+0xb0], dl
0000000000012179         jle        loc_1218e

000000000001217b         test       al, 0x4
000000000001217d         je         loc_126e3

0000000000012183         lea        rax, qword [utf8_sb_map]                    ; utf8_sb_map
000000000001218a         mov        qword [rbx+0x78], rax

                     loc_1218e:
000000000001218e         cmp        qword [rbx], 0x0                            ; CODE XREF=re_compile_internal+425, re_compile_internal+1939
0000000000012192         je         loc_126d6

0000000000012198         cmp        qword [rbx+0x40], 0x0
000000000001219d         je         loc_126d6

00000000000121a3         mov        rax, qword [rsp+0x158+var_140]
00000000000121a8         lea        rbp, qword [rsp+0x158+var_D8]
00000000000121b0         mov        ecx, 0x12
00000000000121b5         mov        dword [rsp+0x158+var_10C], 0x0
00000000000121bd         lea        r8, qword [rbp+8]
00000000000121c1         and        eax, 0x400000
00000000000121c6         mov        qword [rsp+0x158+var_138], rax
00000000000121cb         mov        rax, qword [rsp+0x158+var_150]
00000000000121d0         setne      dl
00000000000121d3         mov        rdi, r8
00000000000121d6         mov        rsi, qword [rax+0x28]
00000000000121da         xor        eax, eax
00000000000121dc         rep stosq  qword [rdi], rax
00000000000121df         mov        rax, qword [rsp+0x158+var_148]
00000000000121e4         mov        rdi, qword [rsp+0x158+var_158]
00000000000121e8         test       rsi, rsi
00000000000121eb         mov        byte [rsp+0x158+var_50], dl
00000000000121f2         mov        ecx, dword [rbx+0xb4]
00000000000121f8         setne      r12b
00000000000121fc         mov        qword [rsp+0x158+var_60], rsi
0000000000012204         mov        qword [rsp+0x158+var_D8], rax
000000000001220c         movzx      eax, byte [rbx+0xb0]
0000000000012213         or         r12d, edx
0000000000012216         mov        qword [rsp+0x158+var_80], rdi
000000000001221e         mov        qword [rsp+0x158+var_88], rdi
0000000000012226         mov        esi, r12d
0000000000012229         mov        byte [rsp+0x158+var_4D], r12b
0000000000012231         mov        dword [rsp+0x158+var_48], ecx
0000000000012238         mov        qword [rsp+0x158+var_70], rdi
0000000000012240         mov        qword [rsp+0x158+var_78], rdi
0000000000012248         mov        edx, eax
000000000001224a         shr        al, 0x3
000000000001224d         shr        dl, 0x2
0000000000012250         and        eax, 0x1
0000000000012253         and        edx, 0x1
0000000000012256         test       rdi, rdi
0000000000012259         mov        byte [rsp+0x158+var_4E], al
0000000000012260         mov        byte [rsp+0x158+var_4F], dl
0000000000012267         jne        loc_126a5

000000000001226d         test       sil, sil
0000000000012270         je         loc_1227f

                     loc_12272:
0000000000012272         mov        rax, qword [rsp+0x158+var_D0]               ; CODE XREF=re_compile_internal+1793
000000000001227a         mov        qword [rsp+0x158+var_148], rax

                     loc_1227f:
000000000001227f         cmp        qword [rsp+0x158+var_138], 0x0              ; CODE XREF=re_compile_internal+672, re_compile_internal+1787
0000000000012285         mov        rax, qword [rsp+0x158+var_148]
000000000001228a         mov        qword [rsp+0x158+var_D0], rax
0000000000012292         je         loc_12395

0000000000012298         cmp        ecx, 0x1
000000000001229b         jle        loc_12e8d

                     loc_122a1:
00000000000122a1         mov        rdi, rbp                                    ; CODE XREF=re_compile_internal+796
00000000000122a4         call       build_wcs_upper_buffer                      ; build_wcs_upper_buffer
00000000000122a9         test       eax, eax
00000000000122ab         jne        loc_122f0

00000000000122ad         mov        rax, qword [rsp+0x158+var_158]
00000000000122b1         cmp        rax, qword [rsp+0x158+var_A0]
00000000000122b9         jle        loc_12e70

00000000000122bf         movsxd     rax, dword [rbx+0xb4]
00000000000122c6         mov        rsi, qword [rsp+0x158+var_98]
00000000000122ce         add        rax, qword [rsp+0x158+var_A8]
00000000000122d6         cmp        rsi, rax
00000000000122d9         jg         loc_12e70

00000000000122df         add        rsi, rsi
00000000000122e2         mov        rdi, rbp
00000000000122e5         call       re_string_realloc_buffers                   ; re_string_realloc_buffers
00000000000122ea         test       eax, eax
00000000000122ec         je         loc_122a1

00000000000122ee         nop

                     loc_122f0:
00000000000122f0         mov        dword [rsp+0x158+var_10C], eax              ; CODE XREF=re_compile_internal+731, re_compile_internal+1652, re_compile_internal+1679, re_compile_internal+1764, sub_12950+177, sub_12950+495
00000000000122f4         mov        rax, qword [rsp+0x158+var_150]
00000000000122f9         mov        r13, qword [rax]

                     loc_122fc:
00000000000122fc         mov        rdi, qword [r13+0x70]                       ; CODE XREF=sub_12950+1013, sub_12950+1378, sub_12f60+124, sub_12f60+155
0000000000012300         test       rdi, rdi
0000000000012303         je         loc_12318

0000000000012305         nop        dword [rax]

                     loc_12308:
0000000000012308         mov        r12, qword [rdi]                            ; CODE XREF=re_compile_internal+838
000000000001230b         call       j_free                                      ; free
0000000000012310         test       r12, r12
0000000000012313         mov        rdi, r12
0000000000012316         jne        loc_12308

                     loc_12318:
0000000000012318         mov        rdi, qword [r13+0x20]                       ; argument "__ptr" for method j_free, CODE XREF=re_compile_internal+819
000000000001231c         mov        qword [r13+0x70], 0x0
0000000000012324         mov        dword [r13+0x80], 0xf
000000000001232f         mov        qword [r13+0x68], 0x0
0000000000012337         call       j_free                                      ; free
000000000001233c         mov        qword [r13+0x20], 0x0
0000000000012344         mov        rdi, rbp
0000000000012347         call       re_string_destruct                          ; re_string_destruct

                     loc_1234c:
000000000001234c         mov        rdi, rbx                                    ; CODE XREF=re_compile_internal+1806, sub_12950+1000
000000000001234f         call       free_dfa_content                            ; free_dfa_content
0000000000012354         mov        rax, qword [rsp+0x158+var_150]
0000000000012359         mov        qword [rax], 0x0
0000000000012360         mov        qword [rax+8], 0x0
0000000000012368         mov        eax, dword [rsp+0x158+var_10C]

                     loc_1236c:
000000000001236c         mov        rbx, qword [rsp+0x158+var_40]               ; CODE XREF=sub_12950+994, sub_12f60+134
0000000000012374         xor        rbx, qword [fs:0x28]
000000000001237d         jne        loc_130c0

0000000000012383         add        rsp, 0x128
000000000001238a         pop        rbx
000000000001238b         pop        rbp
000000000001238c         pop        r12
000000000001238e         pop        r13
0000000000012390         pop        r14
0000000000012392         pop        r15
0000000000012394         ret
                        ; endp

                     loc_12395:
0000000000012395         cmp        ecx, 0x1                                    ; CODE XREF=re_compile_internal+706
0000000000012398         jg         loc_12d4a

000000000001239e         test       r12b, r12b
00000000000123a1         mov        rsi, qword [rsp+0x158+var_98]
00000000000123a9         je         loc_129c4

00000000000123af         cmp        qword [rsp+0x158+var_80], rsi
00000000000123b7         mov        rax, qword [rsp+0x158+var_A8]
00000000000123bf         cmovle     rsi, qword [rsp+0x158+var_80]
00000000000123c8         cmp        rsi, rax
00000000000123cb         jg         loc_123dd

00000000000123cd         jmp        loc_12410
00000000000123cf         align      16

                     loc_123d0:
00000000000123d0         mov        rdx, qword [rsp+0x158+var_D0]               ; CODE XREF=re_compile_internal+1086
00000000000123d8         mov        qword [rsp+0x158+var_148], rdx

                     loc_123dd:
00000000000123dd         mov        rdx, qword [rsp+0x158+var_D8]               ; CODE XREF=re_compile_internal+1019
00000000000123e5         mov        rcx, qword [rsp+0x158+var_60]
00000000000123ed         add        rdx, rax
00000000000123f0         add        rdx, qword [rsp+0x158+var_B0]
00000000000123f8         movzx      edx, byte [rdx]
00000000000123fb         movzx      edx, byte [rcx+rdx]
00000000000123ff         mov        rcx, qword [rsp+0x158+var_148]
0000000000012404         mov        byte [rcx+rax], dl
0000000000012407         add        rax, 0x1
000000000001240b         cmp        rsi, rax
000000000001240e         jne        loc_123d0

                     loc_12410:
0000000000012410         mov        qword [rsp+0x158+var_A8], rax               ; CODE XREF=re_compile_internal+1021
0000000000012418         mov        qword [rsp+0x158+var_A0], rax
0000000000012420         mov        dword [rsp+0x158+var_10C], 0x0

                     loc_12428:
0000000000012428         mov        r12, qword [rsp+0x158+var_150]              ; CODE XREF=sub_12950+140, sub_12950+1034, sub_12950+1320, sub_12950+1357
000000000001242d         mov        r14, qword [rsp+0x158+var_140]
0000000000012432         lea        r13, qword [rsp+0x158+var_108]
0000000000012437         mov        rsi, rbp
000000000001243a         mov        rdi, r13
000000000001243d         mov        qword [rsp+0x158+var_130], r13
0000000000012442         mov        r15, qword [r12]
0000000000012446         mov        rdx, r14
0000000000012449         mov        qword [r12+0x30], 0x0
0000000000012452         or         rdx, 0x800000
0000000000012459         mov        qword [r15+0xd8], r14
0000000000012460         call       peek_token                                  ; peek_token
0000000000012465         lea        r9, qword [rsp+0x158+var_10C]
000000000001246a         xor        r8d, r8d
000000000001246d         mov        rcx, r14
0000000000012470         mov        rdx, r13
0000000000012473         mov        rsi, r12
0000000000012476         mov        rdi, rbp
0000000000012479         cdqe
000000000001247b         add        qword [rsp+0x158+var_90], rax
0000000000012483         call       parse_reg_exp                               ; parse_reg_exp
0000000000012488         mov        ecx, dword [rsp+0x158+var_10C]
000000000001248c         test       ecx, ecx
000000000001248e         jne        loc_12eb7

0000000000012494         lea        r13, qword [r15+0x70]
0000000000012498         lea        r12, qword [rsp+0x158+var_F8]
000000000001249d         sub        r15, 0xffffffffffffff80
00000000000124a1         xor        edx, edx
00000000000124a3         xor        ecx, ecx
00000000000124a5         mov        rsi, r15
00000000000124a8         mov        r8, r12
00000000000124ab         mov        rdi, r13
00000000000124ae         mov        qword [rsp+0x158+var_158], rax
00000000000124b2         mov        byte [rsp+0x158+var_F0], 0x2
00000000000124b7         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
00000000000124bc         mov        r9, qword [rsp+0x158+var_158]
00000000000124c0         mov        r11, rax
00000000000124c3         mov        rdx, rax
00000000000124c6         test       r9, r9
00000000000124c9         je         loc_124f2

                     loc_124cb:
00000000000124cb         mov        rcx, r11                                    ; CODE XREF=sub_12950+1439
00000000000124ce         mov        rdx, r9
00000000000124d1         mov        r8, r12
00000000000124d4         mov        rsi, r15
00000000000124d7         mov        rdi, r13
00000000000124da         mov        qword [rsp+0x158+var_158], r11
00000000000124de         mov        byte [rsp+0x158+var_F0], 0x10
00000000000124e3         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
00000000000124e8         mov        r11, qword [rsp+0x158+var_158]
00000000000124ec         mov        rdx, r11
00000000000124ef         mov        r11, rax

                     loc_124f2:
00000000000124f2         test       rdx, rdx                                    ; CODE XREF=re_compile_internal+1273
00000000000124f5         mov        rcx, qword [rsp+0x158+var_150]
00000000000124fa         sete       dl
00000000000124fd         test       r11, r11
0000000000012500         sete       al
0000000000012503         or         dl, al
0000000000012505         mov        r13, qword [rcx]
0000000000012508         jne        loc_12ea2

000000000001250e         mov        r15, qword [r13+8]
0000000000012512         mov        qword [rbx+0x68], r11
0000000000012516         lea        rcx, qword [r15*8]
000000000001251e         lea        r15, qword [r15+r15*2]
0000000000012522         mov        rdi, rcx                                    ; argument "__size" for method j_malloc
0000000000012525         mov        qword [rsp+0x158+var_158], rcx
0000000000012529         shl        r15, 0x3
000000000001252d         call       j_malloc                                    ; malloc
0000000000012532         mov        rcx, qword [rsp+0x158+var_158]
0000000000012536         mov        qword [r13+0x18], rax
000000000001253a         mov        qword [rsp+0x158+var_140], rax
000000000001253f         mov        rdi, rcx                                    ; argument "__size" for method j_malloc
0000000000012542         call       j_malloc                                    ; malloc
0000000000012547         mov        rdi, r15                                    ; argument "__size" for method j_malloc
000000000001254a         mov        qword [r13+0x20], rax
000000000001254e         mov        qword [rsp+0x158+var_148], rax
0000000000012553         call       j_malloc                                    ; malloc
0000000000012558         mov        rdi, r15                                    ; argument "__size" for method j_malloc
000000000001255b         mov        qword [r13+0x28], rax
000000000001255f         mov        qword [rsp+0x158+var_158], rax
0000000000012563         call       j_malloc                                    ; malloc
0000000000012568         mov        rdx, qword [rsp+0x158+var_140]
000000000001256d         mov        qword [r13+0x30], rax
0000000000012571         mov        rsi, qword [rsp+0x158+var_158]
0000000000012575         mov        rcx, qword [rsp+0x158+var_148]
000000000001257a         test       rdx, rdx
000000000001257d         je         loc_12d3d

0000000000012583         test       rcx, rcx
0000000000012586         je         loc_12d3d

000000000001258c         test       rsi, rsi
000000000001258f         je         loc_12d3d

0000000000012595         test       rax, rax
0000000000012598         je         loc_12d3d

000000000001259e         mov        rax, qword [rsp+0x158+var_150]
00000000000125a3         mov        r15, qword [rax+0x30]
00000000000125a7         lea        rdi, qword [r15*8]                          ; argument "__size" for method j_malloc
00000000000125af         call       j_malloc                                    ; malloc
00000000000125b4         test       rax, rax
00000000000125b7         mov        qword [r13+0xe0], rax
00000000000125be         je         loc_1262d

00000000000125c0         test       r15, r15
00000000000125c3         je         loc_125dd

00000000000125c5         xor        edx, edx
00000000000125c7         nop        word [rax+rax]

                     loc_125d0:
00000000000125d0         mov        qword [rax+rdx*8], rdx                      ; CODE XREF=re_compile_internal+1547
00000000000125d4         add        rdx, 0x1
00000000000125d8         cmp        rdx, r15
00000000000125db         jne        loc_125d0

                     loc_125dd:
00000000000125dd         mov        rdi, qword [r13+0x68]                       ; CODE XREF=re_compile_internal+1523
00000000000125e1         lea        rsi, qword [optimize_subexps]               ; optimize_subexps
00000000000125e8         mov        rdx, r13
00000000000125eb         call       preorder                                    ; preorder
00000000000125f0         mov        rax, qword [rsp+0x158+var_150]
00000000000125f5         mov        rdi, qword [r13+0xe0]
00000000000125fc         mov        rdx, qword [rax+0x30]
0000000000012600         test       rdx, rdx
0000000000012603         je         loc_12ef4

0000000000012609         mov        rax, qword [rdi]
000000000001260c         test       rax, rax
000000000001260f         je         loc_1261e

0000000000012611         jmp        loc_1262d
0000000000012613         align      8

                     loc_12618:
0000000000012618         cmp        qword [rdi+rax*8], rax                      ; CODE XREF=re_compile_internal+1621
000000000001261c         jne        loc_1262d

                     loc_1261e:
000000000001261e         add        rax, 0x1                                    ; CODE XREF=re_compile_internal+1599
0000000000012622         cmp        rdx, rax
0000000000012625         ja         loc_12618

0000000000012627         je         loc_12ef4

                     loc_1262d:
000000000001262d         mov        rdi, qword [r13+0x68]                       ; CODE XREF=re_compile_internal+1518, re_compile_internal+1601, re_compile_internal+1612, sub_12950+1460
0000000000012631         mov        rdx, qword [rsp+0x158+var_150]
0000000000012636         lea        rsi, qword [lower_subexps]                  ; lower_subexps
000000000001263d         call       postorder                                   ; postorder
0000000000012642         test       eax, eax
0000000000012644         jne        loc_122f0

000000000001264a         mov        rdi, qword [r13+0x68]
000000000001264e         lea        rsi, qword [calc_first]                     ; calc_first
0000000000012655         mov        rdx, r13
0000000000012658         call       postorder                                   ; postorder
000000000001265d         test       eax, eax
000000000001265f         jne        loc_122f0

0000000000012665         mov        rdi, qword [r13+0x68]
0000000000012669         lea        rsi, qword [calc_next]                      ; calc_next
0000000000012670         mov        rdx, r13
0000000000012673         call       preorder                                    ; preorder
0000000000012678         mov        rdx, qword [r13+0x68]
000000000001267c         lea        rsi, qword [switch_table_15434+20]          ; 0x15448
0000000000012683         nop        dword [rax+rax]

                     loc_12688:
0000000000012688         movzx      ecx, byte [rdx+0x30]                        ; CODE XREF=re_compile_internal+1983
000000000001268c         mov        rdi, qword [rdx+0x38]
0000000000012690         cmp        cl, 0x10
0000000000012693         ja         loc_12768

0000000000012699         movzx      eax, cl
000000000001269c         movsxd     rax, dword [rsi+rax*4]
00000000000126a0         add        rax, rsi
00000000000126a3         jmp        rax
                        ; endp

                     loc_126a5:
00000000000126a5         mov        rsi, qword [rsp+0x158+var_130]              ; CODE XREF=re_compile_internal+663
00000000000126aa         mov        rdi, rbp
00000000000126ad         call       re_string_realloc_buffers                   ; re_string_realloc_buffers
00000000000126b2         test       eax, eax
00000000000126b4         jne        loc_122f0

00000000000126ba         movzx      esi, byte [rsp+0x158+var_4D]
00000000000126c2         mov        ecx, dword [rbx+0xb4]
00000000000126c8         test       sil, sil
00000000000126cb         je         loc_1227f

00000000000126d1         jmp        loc_12272

                     loc_126d6:
00000000000126d6         mov        dword [rsp+0x158+var_10C], 0xc              ; CODE XREF=re_compile_internal+197, re_compile_internal+450, re_compile_internal+461, re_compile_internal+1833
00000000000126de         jmp        loc_1234c

                     loc_126e3:
00000000000126e3         mov        esi, 0x1                                    ; argument "__size" for method j_calloc, CODE XREF=re_compile_internal+429
00000000000126e8         mov        edi, 0x20                                   ; argument "__nmemb" for method j_calloc
00000000000126ed         call       j_calloc                                    ; calloc
00000000000126f2         test       rax, rax
00000000000126f5         mov        qword [rbx+0x78], rax
00000000000126f9         je         loc_126d6

00000000000126fb         xor        r12d, r12d
00000000000126fe         xor        ebp, ebp
0000000000012700         mov        r13d, 0x1

                     loc_12706:
0000000000012706         xor        r15d, r15d                                  ; CODE XREF=re_compile_internal+1937
0000000000012709         nop        dword [rax]

                     loc_12710:
0000000000012710         lea        r14d, dword [rbp+r15]                       ; CODE XREF=re_compile_internal+1922
0000000000012715         mov        edi, r14d                                   ; argument "__c" for method j_btowc
0000000000012718         call       j_btowc                                     ; btowc
000000000001271d         cmp        eax, 0xffffffff
0000000000012720         je         loc_12735

0000000000012722         mov        rsi, qword [rbx+0x78]
0000000000012726         mov        rdi, r13
0000000000012729         mov        ecx, r15d
000000000001272c         shl        rdi, cl
000000000001272f         add        rsi, r12
0000000000012732         or         qword [rsi], rdi

                     loc_12735:
0000000000012735         test       r14d, 0xffffff80                            ; CODE XREF=re_compile_internal+1872
000000000001273c         jne        loc_1274a

000000000001273e         cmp        eax, r14d
0000000000012741         je         loc_1274a

0000000000012743         or         byte [rbx+0xb0], 0x8

                     loc_1274a:
000000000001274a         add        r15, 0x1                                    ; CODE XREF=re_compile_internal+1900, re_compile_internal+1905
000000000001274e         cmp        r15, 0x40
0000000000012752         jne        loc_12710

0000000000012754         add        ebp, 0x40
0000000000012757         add        r12, 0x8
000000000001275b         cmp        ebp, 0x100
0000000000012761         jne        loc_12706

0000000000012763         jmp        loc_1218e

                     loc_12768:
0000000000012768         and        ecx, 0x8                                    ; CODE XREF=re_compile_internal+1731
000000000001276b         jne        loc_13082

0000000000012771         mov        rax, qword [rdx+0x20]
0000000000012775         mov        rcx, qword [rax+0x38]
0000000000012779         mov        rax, qword [r13+0x18]
000000000001277d         mov        qword [rax+rdi*8], rcx
0000000000012781         mov        r15, qword [rdx+8]
0000000000012785         xor        edi, edi                                    ; CODE XREF=sub_12880+155
0000000000012787         test       r15, r15
000000000001278a         je         loc_1279b

                     loc_1278c:
000000000001278c         mov        rdx, r15                                    ; CODE XREF=re_compile_internal+2017
000000000001278f         jmp        loc_12688
0000000000012794         align      8

                     loc_12798:
0000000000012798         mov        rdx, rax                                    ; CODE XREF=re_compile_internal+2028

                     loc_1279b:
000000000001279b         mov        r15, qword [rdx+0x10]                       ; CODE XREF=re_compile_internal+1978
000000000001279f         test       r15, r15
00000000000127a2         sete       cl
00000000000127a5         cmp        r15, rdi
00000000000127a8         sete       al
00000000000127ab         or         cl, al
00000000000127ad         mov        byte [rsp+0x158+var_148], cl
00000000000127b1         je         loc_1278c

00000000000127b3         mov        rax, qword [rdx]
00000000000127b6         mov        rdi, rdx
00000000000127b9         test       rax, rax
00000000000127bc         jne        loc_12798

00000000000127be         xor        r14d, r14d
00000000000127c1         xor        r15d, r15d
00000000000127c4         nop        dword [rax]

                     loc_127c8:
00000000000127c8         mov        rdx, qword [r13+0x10]                       ; CODE XREF=sub_12950+201
00000000000127cc         cmp        rdx, r15
00000000000127cf         je         loc_127f6

                     loc_127d1:
00000000000127d1         lea        r10, qword [r15+r15*2]                      ; CODE XREF=re_compile_internal+2084, re_compile_internal+2101, sub_12950+233
00000000000127d5         mov        rax, qword [r13+0x30]
00000000000127d9         shl        r10, 0x3
00000000000127dd         cmp        qword [rax+r10+8], 0x0
00000000000127e3         je         loc_129e8

00000000000127e9         mov        rdx, qword [r13+0x10]
00000000000127ed         add        r15, 0x1
00000000000127f1         cmp        rdx, r15
00000000000127f4         jne        loc_127d1

                     loc_127f6:
00000000000127f6         test       r14b, r14b                                  ; CODE XREF=re_compile_internal+2047
00000000000127f9         je         loc_12a3e

                     loc_127ff:
00000000000127ff         xor        r14d, r14d                                  ; CODE XREF=sub_12950+221
0000000000012802         xor        r15d, r15d
0000000000012805         jmp        loc_127d1
0000000000012807         or         byte [r13+0xb0], 0x1
000000000001280f         mov        r15, qword [rdx+8]
0000000000012813         test       r15, r15
0000000000012816         je         sub_12950+1241
000000000001281c         mov        rax, qword [r15+0x18]
0000000000012820         mov        rcx, qword [rax+0x38]
0000000000012824         mov        rax, qword [rdx+0x10]                       ; CODE XREF=sub_12950+1249
0000000000012828         test       rax, rax
000000000001282b         je         sub_12950+1228
0000000000012831         mov        rax, qword [rax+0x18]
0000000000012835         mov        r9, qword [rax+0x38]
0000000000012839         test       rcx, rcx                                    ; CODE XREF=sub_12950+1236
000000000001283c         js         sub_13000+161
0000000000012842         test       r9, r9
0000000000012845         js         sub_13000+99
000000000001284b         mov        rax, qword [r13+0x28]
000000000001284f         lea        rdi, qword [rdi+rdi*2]
0000000000012853         mov        qword [rsp+0x38], rsi
0000000000012858         mov        qword [rsp+0x30], r9
000000000001285d         mov        qword [rsp+0x18], rcx
0000000000012862         mov        qword [rsp+0x10], rdx
0000000000012867         lea        r10, qword [rax+rdi*8]
000000000001286b         mov        edi, 0x10
0000000000012870         mov        qword [r10], 0x2
0000000000012877         mov        qword [rsp], r10
000000000001287b         call       j_malloc                                    ; malloc


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_12880:
0000000000012880         mov        r10, qword [rsp+0]
0000000000012884         test       rax, rax
0000000000012887         mov        rdx, qword [rsp+16]
000000000001288c         mov        rcx, qword [rsp+24]
0000000000012891         mov        r9, qword [rsp+48]
0000000000012896         mov        rsi, qword [rsp+56]
000000000001289b         mov        qword [r10+0x10], rax
000000000001289f         je         sub_12950+490

00000000000128a5         cmp        rcx, r9
00000000000128a8         je         loc_12e7d

00000000000128ae         mov        qword [r10+8], 0x2
00000000000128b6         jl         loc_12e64

00000000000128bc         mov        qword [rax], r9
00000000000128bf         mov        qword [rax+8], rcx
00000000000128c3         jmp        re_compile_internal+1973
                        ; endp
00000000000128c8         mov        rax, qword [rdx+0x20]
00000000000128cc         lea        rcx, qword [rdi+rdi*2]
00000000000128d0         mov        edi, 0x8
00000000000128d5         mov        qword [rsp+0x10], rsi
00000000000128da         mov        qword [rsp], rdx
00000000000128de         mov        r14, qword [rax+0x38]
00000000000128e2         mov        rax, qword [r13+0x28]
00000000000128e6         lea        r15, qword [rax+rcx*8]
00000000000128ea         mov        qword [r15], 0x1
00000000000128f1         mov        qword [r15+8], 0x1
00000000000128f9         call       j_malloc                                    ; malloc
00000000000128fe         test       rax, rax
0000000000012901         mov        qword [r15+0x10], rax
0000000000012905         mov        rdx, qword [rsp]
0000000000012909         mov        rsi, qword [rsp+0x10]
000000000001290e         je         sub_12f60+88
0000000000012914         mov        qword [rax], r14
0000000000012917         mov        r15, qword [rdx+8]
000000000001291b         jmp        re_compile_internal+1973


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_12920:
0000000000012920         cmp        qword [rdx+0x20], 0x0
0000000000012925         je         re_compile_internal+1969

000000000001292b         lea        rcx, qword [__PRETTY_FUNCTION__.6981]       ; argument "__function" for method j___assert_fail, "link_nfa_nodes"
0000000000012932         lea        rsi, qword [aCoreutils831li_14f40]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/regcomp.c"
0000000000012939         lea        rdi, qword [aNodenextNull]                  ; argument "__assertion" for method j___assert_fail, "node->next == NULL"
0000000000012940         mov        edx, 0x59f                                  ; argument "__line" for method j___assert_fail
0000000000012945         call       j___assert_fail                             ; __assert_fail
                        ; endp
000000000001294a         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_12950:
0000000000012950         mov        rax, qword [rdx+0x20]
0000000000012954         mov        r15, qword [rax+0x38]
0000000000012958         mov        rax, qword [r13+0x18]
000000000001295c         mov        qword [rax+rdi*8], r15
0000000000012960         cmp        byte [rdx+0x30], 0x4
0000000000012964         jne        re_compile_internal+1969

000000000001296a         mov        rax, qword [r13+0x28]
000000000001296e         lea        rcx, qword [rdi+rdi*2]
0000000000012972         mov        edi, 0x8                                    ; argument "__size" for method j_malloc
0000000000012977         mov        qword [rsp+24], rsi
000000000001297c         mov        qword [rsp+16], rdx
0000000000012981         lea        rcx, qword [rax+rcx*8]
0000000000012985         mov        qword [rcx], 0x1
000000000001298c         mov        qword [rcx+8], 0x1
0000000000012994         mov        qword [rsp+0], rcx
0000000000012998         call       j_malloc                                    ; malloc
000000000001299d         mov        rcx, qword [rsp+0]
00000000000129a1         test       rax, rax
00000000000129a4         mov        rdx, qword [rsp+16]
00000000000129a9         mov        rsi, qword [rsp+24]
00000000000129ae         mov        qword [rcx+0x10], rax
00000000000129b2         je         sub_13000                                   ; sub_13000

00000000000129b8         mov        qword [rax], r15
00000000000129bb         mov        r15, qword [rdx+8]
00000000000129bf         jmp        re_compile_internal+1973
                        ; endp

                     loc_129c4:
00000000000129c4         mov        qword [rsp+0x158+var_A8], rsi               ; CODE XREF=re_compile_internal+985
00000000000129cc         mov        qword [rsp+0x158+var_A0], rsi
00000000000129d4         mov        dword [rsp+0x158+var_10C], 0x0
00000000000129dc         jmp        loc_12428
00000000000129e1         align      8

                     loc_129e8:
00000000000129e8         mov        ecx, 0x1                                    ; CODE XREF=re_compile_internal+2067
00000000000129ed         mov        rdx, r15
00000000000129f0         mov        rsi, r13
00000000000129f3         mov        rdi, r12
00000000000129f6         mov        qword [rsp+0x158+var_158], r10
00000000000129fa         call       calc_eclosure_iter                          ; calc_eclosure_iter
00000000000129ff         test       eax, eax
0000000000012a01         jne        loc_122f0

0000000000012a07         mov        rax, qword [r13+0x30]
0000000000012a0b         mov        r10, qword [rsp+0x158+var_158]
0000000000012a0f         add        r15, 0x1
0000000000012a13         cmp        qword [rax+r10+8], 0x0
0000000000012a19         jne        loc_127c8

0000000000012a1f         mov        rdi, qword [rsp+0x158+var_E8]               ; argument "__ptr" for method j_free
0000000000012a24         call       j_free                                      ; free
0000000000012a29         cmp        qword [r13+0x10], r15
0000000000012a2d         je         loc_127ff

0000000000012a33         movzx      r14d, byte [rsp+0x158+var_148]
0000000000012a39         jmp        loc_127d1

                     loc_12a3e:
0000000000012a3e         mov        rax, qword [rsp+0x158+var_150]              ; CODE XREF=re_compile_internal+2089
0000000000012a43         test       byte [rax+0x38], 0x10
0000000000012a47         jne        loc_12a5a

0000000000012a49         cmp        qword [rax+0x30], 0x0
0000000000012a4e         je         loc_12a5a

0000000000012a50         test       byte [r13+0xb0], 0x1
0000000000012a58         jne        loc_12a68

                     loc_12a5a:
0000000000012a5a         cmp        qword [r13+0x98], 0x0                       ; CODE XREF=sub_12950+247, sub_12950+254
0000000000012a62         je         loc_12b5b

                     loc_12a68:
0000000000012a68         lea        rdi, qword [rdx+rdx*2]                      ; CODE XREF=sub_12950+264
0000000000012a6c         mov        qword [rsp+0x158+var_158], rdx
0000000000012a70         shl        rdi, 0x3                                    ; argument "__size" for method j_malloc
0000000000012a74         call       j_malloc                                    ; malloc
0000000000012a79         test       rax, rax
0000000000012a7c         mov        qword [r13+0x38], rax
0000000000012a80         je         loc_12fcc

0000000000012a86         mov        rdx, qword [rsp+0x158+var_158]
0000000000012a8a         xor        esi, esi
0000000000012a8c         xor        ecx, ecx
0000000000012a8e         test       rdx, rdx
0000000000012a91         jne        loc_12aa4

0000000000012a93         jmp        loc_12b5b
0000000000012a98         align      32

                     loc_12aa0:
0000000000012aa0         mov        rax, qword [r13+0x38]                       ; CODE XREF=sub_12950+373

                     loc_12aa4:
0000000000012aa4         pxor       xmm0, xmm0                                  ; CODE XREF=sub_12950+321
0000000000012aa8         add        rax, rsi
0000000000012aab         add        rcx, 0x1
0000000000012aaf         mov        qword [rax+0x10], 0x0
0000000000012ab7         add        rsi, 0x18
0000000000012abb         movups     xmmword [rax], xmm0
0000000000012abe         mov        rax, qword [r13+0x10]
0000000000012ac2         cmp        rcx, rax
0000000000012ac5         jb         loc_12aa0

0000000000012ac7         test       rax, rax
0000000000012aca         je         loc_12b5b

0000000000012ad0         mov        rax, qword [r13+0x30]
0000000000012ad4         mov        qword [rsp+0x158+var_140], 0x0
0000000000012add         mov        qword [rsp+0x158+var_148], 0x0

                     loc_12ae6:
0000000000012ae6         mov        rcx, qword [rsp+0x158+var_140]              ; CODE XREF=sub_12950+521
0000000000012aeb         lea        rdx, qword [rax+rcx]
0000000000012aef         cmp        qword [rdx+8], 0x0
0000000000012af4         mov        rcx, qword [rdx+0x10]
0000000000012af8         jle        loc_12b44

0000000000012afa         xor        r15d, r15d
0000000000012afd         jmp        loc_12b18
0000000000012aff         align      256

                     loc_12b00:
0000000000012b00         mov        rax, qword [r13+0x30]                       ; CODE XREF=sub_12950+488
0000000000012b04         mov        rdx, qword [rsp+0x158+var_140]
0000000000012b09         add        r15, 0x1
0000000000012b0d         mov        rcx, qword [rsp+0x158+var_158]
0000000000012b11         cmp        r15, qword [rax+rdx+8]
0000000000012b16         jge        loc_12b44

                     loc_12b18:
0000000000012b18         mov        rax, qword [rcx+r15*8]                      ; CODE XREF=sub_12950+429
0000000000012b1c         mov        qword [rsp+0x158+var_158], rcx
0000000000012b20         lea        rsi, qword [rax+rax*2]
0000000000012b24         mov        rax, qword [r13+0x38]
0000000000012b28         lea        rdi, qword [rax+rsi*8]
0000000000012b2c         mov        rsi, qword [rsp+0x158+var_148]
0000000000012b31         call       re_node_set_insert_last                     ; re_node_set_insert_last
0000000000012b36         test       al, al
0000000000012b38         jne        loc_12b00

0000000000012b3a         mov        eax, 0xc                                    ; CODE XREF=sub_12f60+103
0000000000012b3f         jmp        loc_122f0

                     loc_12b44:
0000000000012b44         add        qword [rsp+0x158+var_148], 0x1              ; CODE XREF=sub_12950+424, sub_12950+454
0000000000012b4a         add        qword [rsp+0x158+var_140], 0x18
0000000000012b50         mov        rdx, qword [rsp+0x158+var_148]
0000000000012b55         cmp        rdx, qword [r13+0x10]
0000000000012b59         jb         loc_12ae6

                     loc_12b5b:
0000000000012b5b         movzx      eax, byte [rbx+0xb0]                        ; CODE XREF=sub_12950+274, sub_12950+323, sub_12950+378
0000000000012b62         mov        dword [rsp+0x158+var_10C], 0x0
0000000000012b6a         shr        al, 0x2
0000000000012b6d         cmp        qword [rsp+0x158+var_138], 0x0
0000000000012b73         sete       dl
0000000000012b76         and        al, dl
0000000000012b78         jne        loc_12d5f

                     loc_12b7e:
0000000000012b7e         mov        rax, qword [rbx+0x68]                       ; CODE XREF=sub_12950+1049, sub_12f60+32, sub_12f60+48, sub_12f60+65, sub_13000+34, sub_13000+89
0000000000012b82         mov        rdi, r12
0000000000012b85         mov        rax, qword [rax+0x18]
0000000000012b89         mov        rax, qword [rax+0x38]
0000000000012b8d         lea        rdx, qword [rax+rax*2]
0000000000012b91         mov        qword [rbx+0x90], rax
0000000000012b98         mov        rax, qword [rbx+0x30]
0000000000012b9c         lea        rsi, qword [rax+rdx*8]
0000000000012ba0         call       re_node_set_init_copy                       ; re_node_set_init_copy
0000000000012ba5         test       eax, eax
0000000000012ba7         mov        r15d, eax
0000000000012baa         mov        dword [rsp+0x158+var_108], eax
0000000000012bae         jne        loc_12ccf

0000000000012bb4         cmp        qword [rbx+0x98], 0x0
0000000000012bbc         jle        loc_12c90

0000000000012bc2         mov        r9, qword [rsp+0x158+var_F0]
0000000000012bc7         test       r9, r9
0000000000012bca         jle        loc_12c90

0000000000012bd0         xor        r10d, r10d
0000000000012bd3         lea        r13, qword [r12+0x10]
0000000000012bd8         jmp        loc_12bed
0000000000012bda         align      32

                     loc_12be0:
0000000000012be0         add        r10, 0x1                                    ; CODE XREF=sub_12950+695, sub_12950+711, sub_12950+774
0000000000012be4         cmp        r9, r10
0000000000012be7         jle        loc_12c90

                     loc_12bed:
0000000000012bed         mov        rcx, qword [rsp+0x158+var_E8]               ; CODE XREF=sub_12950+648, sub_12950+818
0000000000012bf2         mov        rsi, qword [rbx]
0000000000012bf5         mov        r8, qword [rcx+r10*8]
0000000000012bf9         mov        rdi, r8
0000000000012bfc         shl        rdi, 0x4
0000000000012c00         add        rdi, rsi
0000000000012c03         cmp        byte [rdi+8], 0x4
0000000000012c07         jne        loc_12be0

0000000000012c09         xor        edx, edx
0000000000012c0b         jmp        loc_12c19
0000000000012c0d         align      16

                     loc_12c10:
0000000000012c10         add        rdx, 0x1                                    ; CODE XREF=sub_12950+728, sub_12950+736
0000000000012c14         cmp        r9, rdx
0000000000012c17         je         loc_12be0

                     loc_12c19:
0000000000012c19         mov        rax, qword [rcx+rdx*8]                      ; CODE XREF=sub_12950+699
0000000000012c1d         shl        rax, 0x4
0000000000012c21         add        rax, rsi
0000000000012c24         cmp        byte [rax+8], 0x9
0000000000012c28         jne        loc_12c10

0000000000012c2a         mov        r11, qword [rdi]
0000000000012c2d         cmp        qword [rax], r11
0000000000012c30         jne        loc_12c10

0000000000012c32         mov        rdx, qword [rbx+0x28]
0000000000012c36         lea        rax, qword [r8+r8*2]
0000000000012c3a         mov        rsi, r13
0000000000012c3d         mov        rdi, r9
0000000000012c40         lea        rax, qword [rdx+rax*8]
0000000000012c44         mov        rax, qword [rax+0x10]
0000000000012c48         mov        r11, qword [rax]
0000000000012c4b         mov        rdx, r11
0000000000012c4e         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
0000000000012c53         test       rax, rax
0000000000012c56         jne        loc_12be0

0000000000012c58         mov        rax, qword [rbx+0x30]
0000000000012c5c         lea        rdx, qword [r11+r11*2]
0000000000012c60         mov        rdi, r12
0000000000012c63         lea        rsi, qword [rax+rdx*8]
0000000000012c67         call       re_node_set_merge                           ; re_node_set_merge
0000000000012c6c         test       eax, eax
0000000000012c6e         jne        loc_12fb0

0000000000012c74         mov        r9, qword [rsp+0x158+var_F0]
0000000000012c79         mov        r10d, 0x1
0000000000012c7f         cmp        r9, r10
0000000000012c82         jg         loc_12bed

0000000000012c88         nop        dword [rax+rax]

                     loc_12c90:
0000000000012c90         mov        rdi, qword [rsp+0x158+var_130]              ; CODE XREF=sub_12950+620, sub_12950+634, sub_12950+663
0000000000012c95         xor        ecx, ecx
0000000000012c97         mov        rdx, r12
0000000000012c9a         mov        rsi, rbx
0000000000012c9d         call       re_acquire_state_context                    ; re_acquire_state_context
0000000000012ca2         test       rax, rax
0000000000012ca5         mov        qword [rbx+0x48], rax
0000000000012ca9         je         loc_12e12

0000000000012caf         cmp        byte [rax+0x68], 0x0
0000000000012cb3         js         loc_12db1

0000000000012cb9         mov        qword [rbx+0x60], rax
0000000000012cbd         mov        qword [rbx+0x58], rax
0000000000012cc1         mov        qword [rbx+0x50], rax

                     loc_12cc5:
0000000000012cc5         mov        rdi, qword [rsp+0x158+var_E8]               ; argument "__ptr" for method j_free, CODE XREF=sub_12950+1212
0000000000012cca         call       j_free                                      ; free

                     loc_12ccf:
0000000000012ccf         mov        rax, qword [rsp+0x158+var_150]              ; CODE XREF=sub_12950+606, sub_12950+1223, sub_12f60+83
0000000000012cd4         mov        dword [rsp+0x158+var_10C], r15d
0000000000012cd9         mov        r13, qword [rax]
0000000000012cdc         mov        rdi, qword [r13+0x70]
0000000000012ce0         test       rdi, rdi
0000000000012ce3         je         loc_12cf8

0000000000012ce5         nop        dword [rax]

                     loc_12ce8:
0000000000012ce8         mov        r12, qword [rdi]                            ; CODE XREF=sub_12950+934
0000000000012ceb         call       j_free                                      ; free
0000000000012cf0         test       r12, r12
0000000000012cf3         mov        rdi, r12
0000000000012cf6         jne        loc_12ce8

                     loc_12cf8:
0000000000012cf8         mov        rdi, qword [r13+0x20]                       ; argument "__ptr" for method j_free, CODE XREF=sub_12950+915
0000000000012cfc         mov        qword [r13+0x70], 0x0
0000000000012d04         mov        dword [r13+0x80], 0xf
0000000000012d0f         mov        qword [r13+0x68], 0x0
0000000000012d17         call       j_free                                      ; free
0000000000012d1c         mov        qword [r13+0x20], 0x0
0000000000012d24         mov        rdi, rbp
0000000000012d27         call       re_string_destruct                          ; re_string_destruct
0000000000012d2c         mov        eax, dword [rsp+0x158+var_10C]
0000000000012d30         test       eax, eax
0000000000012d32         je         loc_1236c

0000000000012d38         jmp        loc_1234c

                     loc_12d3d:
0000000000012d3d         mov        dword [rsp+0x158+var_10C], 0xc              ; CODE XREF=re_compile_internal+1453, re_compile_internal+1462, re_compile_internal+1471, re_compile_internal+1480
0000000000012d45         jmp        loc_122fc

                     loc_12d4a:
0000000000012d4a         mov        rdi, rbp                                    ; CODE XREF=re_compile_internal+968
0000000000012d4d         call       build_wcs_buffer                            ; build_wcs_buffer
0000000000012d52         mov        dword [rsp+0x158+var_10C], 0x0
0000000000012d5a         jmp        loc_12428

                     loc_12d5f:
0000000000012d5f         mov        rcx, qword [rsp+0x158+var_150]              ; CODE XREF=sub_12950+552
0000000000012d64         cmp        qword [rcx+0x28], 0x0
0000000000012d69         jne        loc_12b7e

0000000000012d6f         mov        r10, qword [rbx+0x10]
0000000000012d73         test       r10, r10
0000000000012d76         je         loc_1302a

0000000000012d7c         mov        rsi, qword [rbx]
0000000000012d7f         lea        r9, qword [switch_table_15434+88]           ; 0x1548c
0000000000012d86         xor        r8d, r8d
0000000000012d89         xor        edx, edx
0000000000012d8b         mov        rcx, rsi
0000000000012d8e         cmp        byte [rcx+8], 0xc
0000000000012d92         ja         loc_1305e

0000000000012d98         movzx      edi, byte [rcx+8]
0000000000012d9c         movsxd     rdi, dword [r9+rdi*4]
0000000000012da0         add        rdi, r9
0000000000012da3         jmp        rdi
                        ; endp

                     loc_12da5:
0000000000012da5         xor        ebp, ebp                                    ; CODE XREF=re_compile_internal+238
0000000000012da7         mov        esi, 0x1
0000000000012dac         jmp        loc_120dd

                     loc_12db1:
0000000000012db1         mov        r14, qword [rsp+0x158+var_130]              ; CODE XREF=sub_12950+867
0000000000012db6         mov        ecx, 0x1
0000000000012dbb         mov        rdx, r12
0000000000012dbe         mov        rsi, rbx
0000000000012dc1         mov        rdi, r14
0000000000012dc4         call       re_acquire_state_context                    ; re_acquire_state_context
0000000000012dc9         mov        ecx, 0x2
0000000000012dce         mov        rdx, r12
0000000000012dd1         mov        rsi, rbx
0000000000012dd4         mov        rdi, r14
0000000000012dd7         mov        qword [rbx+0x50], rax
0000000000012ddb         call       re_acquire_state_context                    ; re_acquire_state_context
0000000000012de0         mov        ecx, 0x6
0000000000012de5         mov        qword [rbx+0x58], rax
0000000000012de9         mov        rdx, r12
0000000000012dec         mov        rsi, rbx
0000000000012def         mov        rdi, r14
0000000000012df2         call       re_acquire_state_context                    ; re_acquire_state_context
0000000000012df7         cmp        qword [rbx+0x50], 0x0
0000000000012dfc         mov        qword [rbx+0x60], rax
0000000000012e00         je         loc_12e12

0000000000012e02         cmp        qword [rbx+0x58], 0x0
0000000000012e07         je         loc_12e12

0000000000012e09         test       rax, rax
0000000000012e0c         jne        loc_12cc5

                     loc_12e12:
0000000000012e12         mov        r15d, dword [rsp+0x158+var_108]             ; CODE XREF=sub_12950+857, sub_12950+1200, sub_12950+1207
0000000000012e17         jmp        loc_12ccf
0000000000012e1c         mov        rax, qword [rdx+0x20]                       ; CODE XREF=re_compile_internal+2139
0000000000012e20         mov        r9, qword [rax+0x38]
0000000000012e24         jmp        re_compile_internal+2153
0000000000012e29         mov        rax, qword [rdx+0x20]                       ; CODE XREF=re_compile_internal+2118
0000000000012e2d         mov        rcx, qword [rax+0x38]
0000000000012e31         jmp        re_compile_internal+2132

                     loc_12e36:
0000000000012e36         mov        rdi, rbx                                    ; argument "__ptr" for method j_realloc, CODE XREF=re_compile_internal+108
0000000000012e39         mov        esi, 0xe8                                   ; argument "__size" for method j_realloc
0000000000012e3e         call       j_realloc                                   ; realloc
0000000000012e43         test       rax, rax
0000000000012e46         mov        rbx, rax
0000000000012e49         je         loc_12fe1

0000000000012e4f         mov        rax, qword [rsp+0x158+var_150]
0000000000012e54         mov        qword [rax+8], 0xe8
0000000000012e5c         mov        qword [rax], rbx
0000000000012e5f         jmp        loc_12042

                     loc_12e64:
0000000000012e64         mov        qword [rax], rcx                            ; CODE XREF=sub_12880+54
0000000000012e67         mov        qword [rax+8], r9
0000000000012e6b         jmp        re_compile_internal+1973
                        ; endp

                     loc_12e70:
0000000000012e70         mov        dword [rsp+0x158+var_10C], 0x0              ; CODE XREF=re_compile_internal+745, re_compile_internal+777
0000000000012e78         jmp        loc_12428

                     loc_12e7d:
0000000000012e7d         mov        qword [r10+8], 0x1                          ; CODE XREF=sub_12880+40
0000000000012e85         mov        qword [rax], rcx
0000000000012e88         jmp        re_compile_internal+1973
                        ; endp

                     loc_12e8d:
0000000000012e8d         mov        rdi, rbp                                    ; CODE XREF=re_compile_internal+715
0000000000012e90         call       build_upper_buffer                          ; build_upper_buffer
0000000000012e95         mov        dword [rsp+0x158+var_10C], 0x0
0000000000012e9d         jmp        loc_12428

                     loc_12ea2:
0000000000012ea2         mov        dword [rsp+0x158+var_10C], 0xc              ; CODE XREF=re_compile_internal+1336
0000000000012eaa         mov        qword [rbx+0x68], 0x0
0000000000012eb2         jmp        loc_122fc

                     loc_12eb7:
0000000000012eb7         test       rax, rax                                    ; CODE XREF=re_compile_internal+1214
0000000000012eba         je         loc_12feb

0000000000012ec0         lea        r13, qword [r15+0x70]
0000000000012ec4         lea        r12, qword [rsp+0x158+var_F8]
0000000000012ec9         sub        r15, 0xffffffffffffff80
0000000000012ecd         xor        ecx, ecx
0000000000012ecf         xor        edx, edx
0000000000012ed1         mov        rsi, r15
0000000000012ed4         mov        r8, r12
0000000000012ed7         mov        rdi, r13
0000000000012eda         mov        qword [rsp+0x158+var_158], rax
0000000000012ede         mov        byte [rsp+0x158+var_F0], 0x2
0000000000012ee3         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000012ee8         mov        r9, qword [rsp+0x158+var_158]
0000000000012eec         mov        r11, rax
0000000000012eef         jmp        loc_124cb

                     loc_12ef4:
0000000000012ef4         call       j_free                                      ; free, CODE XREF=re_compile_internal+1587, re_compile_internal+1623
0000000000012ef9         mov        qword [r13+0xe0], 0x0
0000000000012f04         jmp        loc_1262d
0000000000012f09         mov        r8d, eax

                     loc_12f0c:
0000000000012f0c         add        rdx, 0x1                                    ; CODE XREF=sub_12f60+7, sub_12f60+14, sub_12f60+25, sub_12f60+30, sub_12f60+59, sub_13000+28
0000000000012f10         add        rcx, 0x10
0000000000012f14         cmp        rdx, r10
0000000000012f17         jne        sub_12950+1086

0000000000012f1d         or         r14b, r8b
0000000000012f20         je         sub_13000+42

0000000000012f26         mov        rax, rdx
0000000000012f29         shl        rax, 0x4
0000000000012f2d         add        rax, rsi
0000000000012f30         jmp        loc_12f48

                     loc_12f32:
0000000000012f32         cmp        dl, 0x5                                     ; CODE XREF=sub_12950+1535
0000000000012f35         jne        loc_12f3b

0000000000012f37         mov        byte [rsi+8], 0x7

                     loc_12f3b:
0000000000012f3b         add        rsi, 0x10                                   ; CODE XREF=sub_12950+1509, sub_12950+1540, sub_12950+1546
0000000000012f3f         cmp        rax, rsi
0000000000012f42         je         loc_13027

                     loc_12f48:
0000000000012f48         movzx      edx, byte [rsi+8]                           ; CODE XREF=sub_12950+1504
0000000000012f4c         cmp        dl, 0x1
0000000000012f4f         jne        loc_12f32

0000000000012f51         cmp        byte [rsi], 0x0
0000000000012f54         jns        loc_12f3b

0000000000012f56         and        byte [rsi+0xa], 0xdf
0000000000012f5a         jmp        loc_12f3b
0000000000012f5c         nop        dword [rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_12f60:
0000000000012f60         cmp        byte [rcx], 0x0
0000000000012f63         cmovs      r14d, eax
0000000000012f67         jmp        loc_12f0c
0000000000012f69         mov        edi, dword [rcx]
0000000000012f6b         cmp        edi, 0x20
0000000000012f6e         je         sub_12950+1468
0000000000012f70         jbe        sub_13000+25
0000000000012f76         cmp        edi, 0x40
0000000000012f79         je         sub_12950+1468
0000000000012f7b         add        edi, 0xffffff80
0000000000012f7e         je         sub_12950+1468
0000000000012f80         jmp        sub_12950+558
0000000000012f85         nop        dword [rax]
0000000000012f88         mov        rdi, qword [rcx]
0000000000012f8b         cmp        qword [rdi+0x10], 0x0
0000000000012f90         jne        sub_12950+558
0000000000012f96         cmp        qword [rdi+0x18], 0x0
0000000000012f9b         je         sub_12950+1468
0000000000012fa1         jmp        sub_12950+558
0000000000012fa6         nop        word [cs:rax+rax]

                     loc_12fb0:
0000000000012fb0         mov        r15d, eax                                   ; CODE XREF=sub_12950+798
0000000000012fb3         jmp        loc_12ccf
0000000000012fb8         mov        qword [r15+8], 0x0                          ; CODE XREF=sub_12880+142
0000000000012fc0         mov        qword [r15], 0x0
0000000000012fc7         jmp        sub_12950+490

                     loc_12fcc:
0000000000012fcc         mov        rax, qword [rsp+0x158+var_150]              ; CODE XREF=sub_12950+304
0000000000012fd1         mov        dword [rsp+0x158+var_10C], 0xc
0000000000012fd9         mov        r13, qword [rax]
0000000000012fdc         jmp        loc_122fc

                     loc_12fe1:
0000000000012fe1         mov        eax, 0xc                                    ; CODE XREF=sub_12950+1273
0000000000012fe6         jmp        loc_1236c

                     loc_12feb:
0000000000012feb         mov        rax, qword [rsp+0x158+var_150]              ; CODE XREF=sub_12950+1386
0000000000012ff0         mov        qword [rbx+0x68], 0x0
0000000000012ff8         mov        r13, qword [rax]
0000000000012ffb         jmp        loc_122fc


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_13000:
0000000000013000         mov        qword [rcx+8], 0x0
0000000000013008         mov        qword [rcx], 0x0
000000000001300f         mov        eax, 0xc
0000000000013014         jmp        re_compile_internal+800
                        ; endp
0000000000013019         cmp        edi, 0x10                                   ; CODE XREF=sub_12f60+16
000000000001301c         je         sub_12950+1468
0000000000013022         jmp        sub_12950+558

                     loc_13027:
0000000000013027         mov        r14d, r8d                                   ; CODE XREF=sub_12950+1522
                        ; endp

                     loc_1302a:
000000000001302a         cmp        qword [rbx+0x98], 0x0                       ; CODE XREF=sub_12950+1062
0000000000013032         movzx      edx, byte [rbx+0xb0]
0000000000013039         mov        dword [rbx+0xb4], 0x1
0000000000013043         setg       al
0000000000013046         and        edx, 0xfffffff9
0000000000013049         or         eax, r14d
000000000001304c         and        eax, 0x1
000000000001304f         add        eax, eax
0000000000013051         or         eax, edx
0000000000013053         mov        byte [rbx+0xb0], al
0000000000013059         jmp        loc_12b7e

                     loc_1305e:
000000000001305e         call       j_abort                                     ; abort, CODE XREF=sub_12950+1090
                        ; endp
0000000000013063         lea        rcx, qword [__PRETTY_FUNCTION__.6981]       ; "link_nfa_nodes", CODE XREF=re_compile_internal+2165
000000000001306a         lea        rsi, qword [aCoreutils831li_14f40]          ; "../coreutils-8.31/lib/regcomp.c"
0000000000013071         lea        rdi, qword [aRight1]                        ; "right > -1"
0000000000013078         mov        edx, 0x5b0
000000000001307d         call       j___assert_fail                             ; __assert_fail

                     loc_13082:
0000000000013082         lea        rcx, qword [__PRETTY_FUNCTION__.6981]       ; argument "__function" for method j___assert_fail, "link_nfa_nodes", CODE XREF=re_compile_internal+1947
0000000000013089         lea        rsi, qword [aCoreutils831li_14f40]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/regcomp.c"
0000000000013090         lea        rdi, qword [aIsepsilonnodeN]                ; argument "__assertion" for method j___assert_fail, "!IS_EPSILON_NODE (node->token.type)"
0000000000013097         mov        edx, 0x5c2                                  ; argument "__line" for method j___assert_fail
000000000001309c         call       j___assert_fail                             ; __assert_fail
                        ; endp
00000000000130a1         lea        rcx, qword [__PRETTY_FUNCTION__.6981]       ; "link_nfa_nodes", CODE XREF=re_compile_internal+2156
00000000000130a8         lea        rsi, qword [aCoreutils831li_14f40]          ; "../coreutils-8.31/lib/regcomp.c"
00000000000130af         lea        rdi, qword [aLeft1]                         ; "left > -1"
00000000000130b6         mov        edx, 0x5af
00000000000130bb         call       j___assert_fail                             ; __assert_fail

                     loc_130c0:
00000000000130c0         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=re_compile_internal+941
                        ; endp
00000000000130c5         align      16                                          ; End of unwind block (FDE at 0x17aac)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_re_compile_pattern:
00000000000130d0         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0x17afc), CODE XREF=main+423
00000000000130d4         mov        rcx, qword [rpl_re_syntax_options]          ; rpl_re_syntax_options
00000000000130db         mov        r8, rdi
00000000000130de         mov        rdi, rdx
00000000000130e1         mov        rax, rcx
00000000000130e4         shr        rax, 0x19
00000000000130e8         and        eax, 0x1
00000000000130eb         shl        eax, 0x4
00000000000130ee         mov        edx, eax
00000000000130f0         movzx      eax, byte [rdi+0x38]
00000000000130f4         and        eax, 0xffffffef
00000000000130f7         or         eax, edx
00000000000130f9         mov        rdx, rsi
00000000000130fc         mov        rsi, r8
00000000000130ff         or         eax, 0xffffff80
0000000000013102         mov        byte [rdi+0x38], al
0000000000013105         call       re_compile_internal                         ; re_compile_internal
000000000001310a         test       eax, eax
000000000001310c         je         loc_13138

000000000001310e         lea        rdx, qword [__re_error_msgid_idx]           ; __re_error_msgid_idx
0000000000013115         cdqe
0000000000013117         lea        rsi, qword [__re_error_msgid]               ; "Success"
000000000001311e         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000013120         add        rsi, qword [rdx+rax*8]                      ; argument "msgid" for method j_dcgettext
0000000000013124         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000013129         add        rsp, 0x8
000000000001312d         jmp        j_dcgettext                                 ; dcgettext
                        ; endp
0000000000013132         align      8

                     loc_13138:
0000000000013138         xor        eax, eax                                    ; CODE XREF=rpl_re_compile_pattern+60
000000000001313a         add        rsp, 0x8
000000000001313e         ret
                        ; endp
000000000001313f         align      64                                          ; End of unwind block (FDE at 0x17afc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_re_set_syntax:
0000000000013140         mov        rax, qword [rpl_re_syntax_options]          ; Begin of unwind block (FDE at 0x17b1c), rpl_re_syntax_options
0000000000013147         mov        qword [rpl_re_syntax_options], rdi          ; rpl_re_syntax_options
000000000001314e         ret
                        ; endp
000000000001314f         align      16                                          ; End of unwind block (FDE at 0x17b1c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_re_compile_fastmap:
0000000000013150         push       r12                                         ; Begin of unwind block (FDE at 0x17b30), CODE XREF=re_search_stub+663, rpl_regcomp+183
0000000000013152         push       rbp
0000000000013153         xor        eax, eax
0000000000013155         push       rbx
0000000000013156         mov        rbp, qword [rdi+0x20]
000000000001315a         mov        rbx, rdi
000000000001315d         mov        r12, qword [rdi]
0000000000013160         lea        rdi, qword [rbp+8]
0000000000013164         mov        rcx, rbp
0000000000013167         mov        qword [rbp], 0x0
000000000001316f         mov        qword [rbp+0xf8], 0x0
000000000001317a         and        rdi, 0xfffffffffffffff8
000000000001317e         sub        rcx, rdi
0000000000013181         add        ecx, 0x100
0000000000013187         shr        ecx, 0x3
000000000001318a         rep stosq  qword [rdi], rax
000000000001318d         mov        rcx, rbp
0000000000013190         mov        rdi, rbx
0000000000013193         mov        rsi, qword [r12+0x48]
0000000000013198         lea        rdx, qword [rsi+0x18]
000000000001319c         add        rsi, 0x10
00000000000131a0         call       re_compile_fastmap_iter.isra.30             ; re_compile_fastmap_iter.isra.30
00000000000131a5         mov        rax, qword [r12+0x50]
00000000000131aa         cmp        qword [r12+0x48], rax
00000000000131af         je         loc_131c9

00000000000131b1         lea        rdx, qword [rax+0x18]
00000000000131b5         lea        rsi, qword [rax+0x10]
00000000000131b9         mov        rcx, rbp
00000000000131bc         mov        rdi, rbx
00000000000131bf         call       re_compile_fastmap_iter.isra.30             ; re_compile_fastmap_iter.isra.30
00000000000131c4         mov        rax, qword [r12+0x48]

                     loc_131c9:
00000000000131c9         mov        rsi, qword [r12+0x58]                       ; CODE XREF=rpl_re_compile_fastmap+95
00000000000131ce         cmp        rsi, rax
00000000000131d1         je         loc_131eb

00000000000131d3         lea        rdx, qword [rsi+0x18]
00000000000131d7         mov        rcx, rbp
00000000000131da         add        rsi, 0x10
00000000000131de         mov        rdi, rbx
00000000000131e1         call       re_compile_fastmap_iter.isra.30             ; re_compile_fastmap_iter.isra.30
00000000000131e6         mov        rax, qword [r12+0x48]

                     loc_131eb:
00000000000131eb         mov        rsi, qword [r12+0x60]                       ; CODE XREF=rpl_re_compile_fastmap+129
00000000000131f0         cmp        rsi, rax
00000000000131f3         je         loc_13208

00000000000131f5         lea        rdx, qword [rsi+0x18]
00000000000131f9         mov        rcx, rbp
00000000000131fc         add        rsi, 0x10
0000000000013200         mov        rdi, rbx
0000000000013203         call       re_compile_fastmap_iter.isra.30             ; re_compile_fastmap_iter.isra.30

                     loc_13208:
0000000000013208         or         byte [rbx+0x38], 0x8                        ; CODE XREF=rpl_re_compile_fastmap+163
000000000001320c         xor        eax, eax
000000000001320e         pop        rbx
000000000001320f         pop        rbp
0000000000013210         pop        r12
0000000000013212         ret
                        ; endp
0000000000013213         align      32                                          ; End of unwind block (FDE at 0x17b30)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_8: int, 16
        ;    arg_0: int, 8
        ;    var_3C: int32_t, -60
        ;    var_40: int32_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96


                     re_search_stub:
0000000000013220         push       r15                                         ; Begin of unwind block (FDE at 0x17b5c), CODE XREF=re_search_2_stub+136, rpl_re_match+14, rpl_re_search+11
0000000000013222         push       r14
0000000000013224         mov        rax, r8
0000000000013227         push       r13
0000000000013229         push       r12
000000000001322b         add        r8, rcx
000000000001322e         push       rbp
000000000001322f         push       rbx
0000000000013230         sub        rsp, 0x38
0000000000013234         test       rcx, rcx
0000000000013237         mov        ebx, dword [rsp+0x68+arg_8]
000000000001323b         mov        r12, qword [rsp+0x68+arg_0]
0000000000013240         mov        dword [rsp+0x68+var_40], ebx
0000000000013244         js         loc_13580

000000000001324a         cmp        rcx, rdx
000000000001324d         jg         loc_13580

0000000000013253         cmp        r8, rdx
0000000000013256         mov        rbx, rcx
0000000000013259         mov        r15, rdi
000000000001325c         jg         loc_134e0

0000000000013262         test       rax, rax
0000000000013265         js         loc_13270

0000000000013267         cmp        rcx, r8
000000000001326a         jg         loc_134e0

                     loc_13270:
0000000000013270         test       r8, r8                                      ; CODE XREF=re_search_stub+69
0000000000013273         js         loc_13558

0000000000013279         test       rax, rax
000000000001327c         jns        loc_13287

000000000001327e         cmp        rbx, r8
0000000000013281         jle        loc_13558

                     loc_13287:
0000000000013287         movzx      eax, byte [r15+0x38]                        ; CODE XREF=re_search_stub+92, re_search_stub+707
000000000001328c         mov        r13d, eax
000000000001328f         shr        r13b, 0x5
0000000000013293         mov        edi, r13d
0000000000013296         and        edi, 0x3
0000000000013299         cmp        r8, rbx
000000000001329c         mov        dword [rsp+0x68+var_3C], edi
00000000000132a0         jle        loc_132b1

00000000000132a2         cmp        qword [r15+0x20], 0x0
00000000000132a7         je         loc_132b1

00000000000132a9         test       al, 0x8
00000000000132ab         je         loc_134a0

                     loc_132b1:
00000000000132b1         test       al, 0x10                                    ; CODE XREF=re_search_stub+128, re_search_stub+135, re_search_stub+693, re_search_stub+849
00000000000132b3         jne        loc_13480

00000000000132b9         test       r12, r12
00000000000132bc         je         loc_13480

00000000000132c2         and        eax, 0x6
00000000000132c5         mov        rcx, qword [r15+0x30]
00000000000132c9         cmp        al, 0x4
00000000000132cb         je         loc_13460

                     loc_132d1:
00000000000132d1         lea        r14, qword [rcx+1]                          ; CODE XREF=re_search_stub+583
00000000000132d5         mov        r13, r14

                     loc_132d8:
00000000000132d8         mov        rdi, r14                                    ; CODE XREF=re_search_stub+595
00000000000132db         shl        rdi, 0x4

                     loc_132df:
00000000000132df         mov        qword [rsp+0x68+var_48], r9                 ; CODE XREF=re_search_stub+628
00000000000132e4         mov        qword [rsp+0x68+var_50], rdx
00000000000132e9         mov        qword [rsp+0x68+var_58], rsi
00000000000132ee         mov        qword [rsp+0x68+var_60], r8
00000000000132f3         call       j_malloc                                    ; malloc
00000000000132f8         test       rax, rax
00000000000132fb         mov        rbp, rax
00000000000132fe         je         loc_13590

0000000000013304         sub        rsp, 0x8
0000000000013308         mov        rcx, rbx
000000000001330b         mov        rdi, r15
000000000001330e         mov        eax, dword [rsp+0x70+var_3C]
0000000000013312         push       rax
0000000000013313         push       rbp
0000000000013314         push       r14
0000000000013316         mov        r9, qword [rsp+0x88+var_48]
000000000001331b         mov        r8, qword [rsp+0x88+var_60]
0000000000013320         mov        rdx, qword [rsp+0x88+var_50]
0000000000013325         mov        rsi, qword [rsp+0x88+var_58]
000000000001332a         call       re_search_internal                          ; re_search_internal
000000000001332f         add        rsp, 0x20
0000000000013333         test       eax, eax
0000000000013335         je         loc_13368

0000000000013337         cmp        eax, 0x1
000000000001333a         mov        r12, 0xffffffffffffffff
0000000000013341         je         loc_1334a

                     loc_13343:
0000000000013343         mov        r12, 0xfffffffffffffffe                     ; CODE XREF=re_search_stub+530

                     loc_1334a:
000000000001334a         mov        rdi, rbp                                    ; argument "__ptr" for method j_free, CODE XREF=re_search_stub+289, re_search_stub+545, re_search_stub+567
000000000001334d         call       j_free                                      ; free

                     loc_13352:
0000000000013352         add        rsp, 0x38                                   ; CODE XREF=re_search_stub+871, re_search_stub+887
0000000000013356         mov        rax, r12
0000000000013359         pop        rbx
000000000001335a         pop        rbp
000000000001335b         pop        r12
000000000001335d         pop        r13
000000000001335f         pop        r14
0000000000013361         pop        r15
0000000000013363         ret
                        ; endp
0000000000013364         align      8

                     loc_13368:
0000000000013368         test       r12, r12                                    ; CODE XREF=re_search_stub+277
000000000001336b         je         loc_13438

0000000000013371         movzx      eax, byte [r15+0x38]
0000000000013376         lea        rdx, qword [r13+1]
000000000001337a         shr        al, 0x1
000000000001337c         and        eax, 0x3
000000000001337f         je         loc_134f0

0000000000013385         cmp        eax, 0x1
0000000000013388         je         loc_135a0

000000000001338e         cmp        eax, 0x2
0000000000013391         jne        loc_13680

0000000000013397         cmp        r14, qword [r12]
000000000001339b         ja         loc_13661

00000000000133a1         mov        r9d, 0x2

                     loc_133a7:
00000000000133a7         test       r13, r13                                    ; CODE XREF=re_search_stub+812, re_search_stub+906, re_search_stub+1004
00000000000133aa         jle        loc_13618

00000000000133b0         mov        r8, qword [r12+8]
00000000000133b5         mov        rdi, qword [r12+0x10]
00000000000133ba         lea        rsi, qword [r13*8]
00000000000133c2         mov        rdx, r13
00000000000133c5         xor        eax, eax
00000000000133c7         nop        word [rax+rax]

                     loc_133d0:
00000000000133d0         mov        rcx, qword [rbp+rax*2]                      ; CODE XREF=re_search_stub+457
00000000000133d5         mov        qword [r8+rax], rcx
00000000000133d9         mov        rcx, qword [rbp+rax*2+8]
00000000000133de         mov        qword [rdi+rax], rcx
00000000000133e2         add        rax, 0x8
00000000000133e6         cmp        rsi, rax
00000000000133e9         jne        loc_133d0

                     loc_133eb:
00000000000133eb         cmp        qword [r12], rdx                            ; CODE XREF=re_search_stub+1021
00000000000133ef         jbe        loc_1341d

00000000000133f1         mov        rsi, qword [r12+0x10]
00000000000133f6         mov        rcx, qword [r12+8]
00000000000133fb         mov        rax, 0xffffffffffffffff
0000000000013402         nop        word [rax+rax]

                     loc_13408:
0000000000013408         mov        qword [rsi+rdx*8], rax                      ; CODE XREF=re_search_stub+507
000000000001340c         add        r13, 0x1
0000000000013410         mov        qword [rcx+rdx*8], rax
0000000000013414         cmp        r13, qword [r12]
0000000000013418         mov        rdx, r13
000000000001341b         jb         loc_13408

                     loc_1341d:
000000000001341d         movzx      eax, byte [r15+0x38]                        ; CODE XREF=re_search_stub+463, re_search_stub+1037, re_search_stub+1053
0000000000013422         lea        r13d, dword [r9+r9]
0000000000013426         and        eax, 0xfffffff9
0000000000013429         or         eax, r13d
000000000001342c         test       al, 0x6
000000000001342e         mov        byte [r15+0x38], al
0000000000013432         je         loc_13343

                     loc_13438:
0000000000013438         cmp        byte [rsp+0x68+var_40], 0x0                 ; CODE XREF=re_search_stub+331
000000000001343d         mov        r12, qword [rbp]
0000000000013441         je         loc_1334a

0000000000013447         cmp        r12, rbx
000000000001344a         jne        loc_13642

0000000000013450         mov        r12, qword [rbp+8]
0000000000013454         sub        r12, rbx
0000000000013457         jmp        loc_1334a
000000000001345c         align      32

                     loc_13460:
0000000000013460         mov        r14, qword [r12]                            ; CODE XREF=re_search_stub+171
0000000000013464         cmp        r14, rcx
0000000000013467         ja         loc_132d1

000000000001346d         test       r14, r14
0000000000013470         mov        r13, r14
0000000000013473         jg         loc_132d8

0000000000013479         nop        dword [rax]

                     loc_13480:
0000000000013480         mov        edi, 0x10                                   ; CODE XREF=re_search_stub+147, re_search_stub+156
0000000000013485         mov        r14d, 0x1
000000000001348b         mov        r13d, 0x1
0000000000013491         xor        r12d, r12d
0000000000013494         jmp        loc_132df
0000000000013499         align      32

                     loc_134a0:
00000000000134a0         mov        rdi, r15                                    ; CODE XREF=re_search_stub+139
00000000000134a3         mov        qword [rsp+0x68+var_48], r9
00000000000134a8         mov        qword [rsp+0x68+var_50], rdx
00000000000134ad         mov        qword [rsp+0x68+var_58], rsi
00000000000134b2         mov        qword [rsp+0x68+var_60], r8
00000000000134b7         call       rpl_re_compile_fastmap                      ; rpl_re_compile_fastmap
00000000000134bc         movzx      eax, byte [r15+0x38]
00000000000134c1         mov        r9, qword [rsp+0x68+var_48]
00000000000134c6         mov        rdx, qword [rsp+0x68+var_50]
00000000000134cb         mov        rsi, qword [rsp+0x68+var_58]
00000000000134d0         mov        r8, qword [rsp+0x68+var_60]
00000000000134d5         jmp        loc_132b1
00000000000134da         align      32

                     loc_134e0:
00000000000134e0         mov        r8, rdx                                     ; CODE XREF=re_search_stub+60, re_search_stub+74
00000000000134e3         jmp        loc_13287
00000000000134e8         align      16

                     loc_134f0:
00000000000134f0         lea        r14, qword [rdx*8]                          ; CODE XREF=re_search_stub+351
00000000000134f8         mov        qword [rsp+0x68+var_60], rdx
00000000000134fd         mov        rdi, r14                                    ; argument "__size" for method j_malloc
0000000000013500         call       j_malloc                                    ; malloc
0000000000013505         test       rax, rax
0000000000013508         mov        qword [r12+8], rax
000000000001350d         mov        rdx, qword [rsp+0x68+var_60]
0000000000013512         je         loc_1362a

0000000000013518         mov        rdi, r14                                    ; argument "__size" for method j_malloc
000000000001351b         mov        qword [rsp+0x68+var_60], rdx
0000000000013520         mov        qword [rsp+0x68+var_58], rax
0000000000013525         call       j_malloc                                    ; malloc
000000000001352a         test       rax, rax
000000000001352d         mov        qword [r12+0x10], rax
0000000000013532         mov        rdx, qword [rsp+0x68+var_60]
0000000000013537         mov        rcx, qword [rsp+0x68+var_58]
000000000001353c         je         loc_13622

0000000000013542         mov        qword [r12], rdx
0000000000013546         mov        r9d, 0x1
000000000001354c         jmp        loc_133a7
0000000000013551         align      8

                     loc_13558:
0000000000013558         movzx      eax, byte [r15+0x38]                        ; CODE XREF=re_search_stub+83, re_search_stub+97
000000000001355d         xor        r8d, r8d
0000000000013560         mov        r13d, eax
0000000000013563         shr        r13b, 0x5
0000000000013567         mov        edi, r13d
000000000001356a         and        edi, 0x3
000000000001356d         mov        dword [rsp+0x68+var_3C], edi
0000000000013571         jmp        loc_132b1
0000000000013576         align      128

                     loc_13580:
0000000000013580         mov        r12, 0xffffffffffffffff                     ; CODE XREF=re_search_stub+36, re_search_stub+45
0000000000013587         jmp        loc_13352
000000000001358c         align      16

                     loc_13590:
0000000000013590         mov        r12, 0xfffffffffffffffe                     ; CODE XREF=re_search_stub+222
0000000000013597         jmp        loc_13352
000000000001359c         align      32

                     loc_135a0:
00000000000135a0         cmp        qword [r12], rdx                            ; CODE XREF=re_search_stub+360
00000000000135a4         mov        r9d, 0x1
00000000000135aa         jae        loc_133a7

00000000000135b0         lea        rcx, qword [rdx*8]
00000000000135b8         mov        rdi, qword [r12+8]                          ; argument "__ptr" for method j_realloc
00000000000135bd         mov        byte [rsp+0x68+var_50], r9b
00000000000135c2         mov        qword [rsp+0x68+var_58], rdx
00000000000135c7         mov        rsi, rcx                                    ; argument "__size" for method j_realloc
00000000000135ca         mov        qword [rsp+0x68+var_60], rcx
00000000000135cf         call       j_realloc                                   ; realloc
00000000000135d4         test       rax, rax
00000000000135d7         mov        r14, rax
00000000000135da         je         loc_1362a

00000000000135dc         mov        rcx, qword [rsp+0x68+var_60]
00000000000135e1         mov        rdi, qword [r12+0x10]                       ; argument "__ptr" for method j_realloc
00000000000135e6         mov        rsi, rcx                                    ; argument "__size" for method j_realloc
00000000000135e9         call       j_realloc                                   ; realloc
00000000000135ee         test       rax, rax
00000000000135f1         mov        rdx, qword [rsp+0x68+var_58]
00000000000135f6         movzx      r9d, byte [rsp+0x68+var_50]
00000000000135fc         je         loc_13632

00000000000135fe         mov        qword [r12+8], r14
0000000000013603         mov        qword [r12+0x10], rax
0000000000013608         mov        qword [r12], rdx
000000000001360c         jmp        loc_133a7
0000000000013611         align      8

                     loc_13618:
0000000000013618         xor        edx, edx                                    ; CODE XREF=re_search_stub+394
000000000001361a         xor        r13d, r13d
000000000001361d         jmp        loc_133eb

                     loc_13622:
0000000000013622         mov        rdi, rcx                                    ; argument "__ptr" for method j_free, CODE XREF=re_search_stub+796
0000000000013625         call       j_free                                      ; free

                     loc_1362a:
000000000001362a         xor        r9d, r9d                                    ; CODE XREF=re_search_stub+754, re_search_stub+954
000000000001362d         jmp        loc_1341d

                     loc_13632:
0000000000013632         mov        rdi, r14                                    ; argument "__ptr" for method j_free, CODE XREF=re_search_stub+988
0000000000013635         call       j_free                                      ; free
000000000001363a         xor        r9d, r9d
000000000001363d         jmp        loc_1341d

                     loc_13642:
0000000000013642         lea        rcx, qword [__PRETTY_FUNCTION__.7847]       ; argument "__function" for method j___assert_fail, "re_search_stub", CODE XREF=re_search_stub+554
0000000000013649         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/regexec.c"
0000000000013650         lea        rdi, qword [aPmatch0rmsoSta]                ; argument "__assertion" for method j___assert_fail, "pmatch[0].rm_so == start"
0000000000013657         mov        edx, 0x1be                                  ; argument "__line" for method j___assert_fail
000000000001365c         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_13661:
0000000000013661         lea        rcx, qword [__PRETTY_FUNCTION__.7859]       ; argument "__function" for method j___assert_fail, "re_copy_regs", CODE XREF=re_search_stub+379
0000000000013668         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/regexec.c"
000000000001366f         lea        rdi, qword [aRegsnumregsNre]                ; argument "__assertion" for method j___assert_fail, "regs->num_regs >= nregs"
0000000000013676         mov        edx, 0x1fb                                  ; argument "__line" for method j___assert_fail
000000000001367b         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_13680:
0000000000013680         lea        rcx, qword [__PRETTY_FUNCTION__.7859]       ; argument "__function" for method j___assert_fail, "re_copy_regs", CODE XREF=re_search_stub+369
0000000000013687         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/regexec.c"
000000000001368e         lea        rdi, qword [aRegsallocatedR]                ; argument "__assertion" for method j___assert_fail, "regs_allocated == REGS_FIXED"
0000000000013695         mov        edx, 0x1f9                                  ; argument "__line" for method j___assert_fail
000000000001369a         call       j___assert_fail                             ; __assert_fail
                        ; endp
000000000001369f         align      32                                          ; End of unwind block (FDE at 0x17b5c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_18: int, 32
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_0: int, 8
        ;    var_3C: int32_t, -60
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80


                     re_search_2_stub:
00000000000136a0         push       r15                                         ; Begin of unwind block (FDE at 0x17bbc), CODE XREF=rpl_re_match_2+16, rpl_re_search_2+18
00000000000136a2         push       r14
00000000000136a4         push       r13
00000000000136a6         push       r12
00000000000136a8         mov        r12, rdi
00000000000136ab         push       rbp
00000000000136ac         push       rbx
00000000000136ad         mov        rbp, r8
00000000000136b0         mov        rbx, rdx
00000000000136b3         mov        rdx, rbp
00000000000136b6         sub        rsp, 0x28
00000000000136ba         shr        rdx, 0x3f
00000000000136be         mov        rax, qword [rsp+0x58+arg_10]
00000000000136c3         mov        edi, edx
00000000000136c5         mov        r8d, dword [rsp+0x58+arg_18]
00000000000136ca         shr        rax, 0x3f
00000000000136ce         or         dil, al
00000000000136d1         jne        loc_137a0

00000000000136d7         test       rbx, rbx
00000000000136da         js         loc_137a0

00000000000136e0         mov        r15, rbx
00000000000136e3         add        r15, rbp
00000000000136e6         jo         loc_137a0

00000000000136ec         test       rbp, rbp
00000000000136ef         mov        r14, rcx
00000000000136f2         mov        rcx, r9
00000000000136f5         je         loc_137b0

00000000000136fb         xor        r13d, r13d
00000000000136fe         test       rbx, rbx
0000000000013701         mov        qword [rsp+0x58+var_50], rsi
0000000000013706         jne        loc_13750

                     loc_13708:
0000000000013708         movzx      r8d, r8b                                    ; CODE XREF=re_search_2_stub+247, re_search_2_stub+278
000000000001370c         mov        rdx, r15
000000000001370f         mov        rsi, r14
0000000000013712         push       r8
0000000000013714         push       qword [rsp+0x60+arg_8]
0000000000013718         mov        rdi, r12
000000000001371b         mov        r9, qword [rsp+0x68+arg_10]
0000000000013723         mov        r8, qword [rsp+0x68+arg_0]
0000000000013728         call       re_search_stub                              ; re_search_stub
000000000001372d         mov        rdi, r13                                    ; argument "__ptr" for method j_free
0000000000013730         mov        rbx, rax
0000000000013733         call       j_free                                      ; free
0000000000013738         pop        rax
0000000000013739         pop        rdx

                     loc_1373a:
000000000001373a         add        rsp, 0x28                                   ; CODE XREF=re_search_2_stub+263
000000000001373e         mov        rax, rbx
0000000000013741         pop        rbx
0000000000013742         pop        rbp
0000000000013743         pop        r12
0000000000013745         pop        r13
0000000000013747         pop        r14
0000000000013749         pop        r15
000000000001374b         ret
                        ; endp
000000000001374c         align      16

                     loc_13750:
0000000000013750         mov        rdi, r15                                    ; argument "__size" for method j_malloc, CODE XREF=re_search_2_stub+102
0000000000013753         mov        dword [rsp+0x58+var_3C], r8d
0000000000013758         mov        qword [rsp+0x58+var_48], r9
000000000001375d         call       j_malloc                                    ; malloc
0000000000013762         test       rax, rax
0000000000013765         mov        r13, rax
0000000000013768         je         loc_137a0

000000000001376a         mov        rsi, qword [rsp+0x58+var_50]                ; argument "__src" for method j_memcpy
000000000001376f         mov        rdx, rbx                                    ; argument "__n" for method j_memcpy
0000000000013772         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
0000000000013775         call       j_memcpy                                    ; memcpy
000000000001377a         lea        rdi, qword [r13+rbx]                        ; argument "__dest" for method j_memcpy
000000000001377f         mov        rsi, r14                                    ; argument "__src" for method j_memcpy
0000000000013782         mov        rdx, rbp                                    ; argument "__n" for method j_memcpy
0000000000013785         mov        r14, r13
0000000000013788         call       j_memcpy                                    ; memcpy
000000000001378d         mov        rcx, qword [rsp+0x58+var_48]
0000000000013792         mov        r8d, dword [rsp+0x58+var_3C]
0000000000013797         jmp        loc_13708
000000000001379c         align      32

                     loc_137a0:
00000000000137a0         mov        rbx, 0xfffffffffffffffe                     ; CODE XREF=re_search_2_stub+49, re_search_2_stub+58, re_search_2_stub+70, re_search_2_stub+200
00000000000137a7         jmp        loc_1373a
00000000000137a9         align      16

                     loc_137b0:
00000000000137b0         mov        r14, rsi                                    ; CODE XREF=re_search_2_stub+85
00000000000137b3         xor        r13d, r13d
00000000000137b6         jmp        loc_13708
00000000000137bb         align      64                                          ; End of unwind block (FDE at 0x17bbc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_regcomp:
00000000000137c0         mov        eax, edx                                    ; Begin of unwind block (FDE at 0x17c14)
00000000000137c2         push       r14
00000000000137c4         push       r13
00000000000137c6         and        eax, 0x1
00000000000137c9         push       r12
00000000000137cb         push       rbp
00000000000137cc         cmp        eax, 0x1
00000000000137cf         push       rbx
00000000000137d0         mov        rbx, rdi
00000000000137d3         sbb        r14, r14
00000000000137d6         mov        qword [rdi], 0x0
00000000000137dd         mov        qword [rdi+8], 0x0
00000000000137e5         and        r14d, 0xfd4fca
00000000000137ec         mov        qword [rdi+0x10], 0x0
00000000000137f4         mov        edi, 0x100                                  ; argument "__size" for method j_malloc
00000000000137f9         mov        r12, rsi
00000000000137fc         mov        ebp, edx
00000000000137fe         add        r14, 0x3b2fc
0000000000013805         call       j_malloc                                    ; malloc
000000000001380a         test       rax, rax
000000000001380d         mov        qword [rbx+0x20], rax
0000000000013811         je         loc_138c0

0000000000013817         mov        r13, rbp
000000000001381a         shl        r13, 0x15
000000000001381e         and        r13d, 0x400000
0000000000013825         or         r13, r14
0000000000013828         test       bpl, 0x4
000000000001382c         jne        loc_13890

000000000001382e         and        byte [rbx+0x38], 0x7f

                     loc_13832:
0000000000013832         movzx      edx, byte [rbx+0x38]                        ; CODE XREF=rpl_regcomp+223
0000000000013836         shr        ebp, 0x3
0000000000013839         mov        rdi, r12                                    ; argument "__s" for method j_strlen
000000000001383c         and        ebp, 0x1
000000000001383f         mov        qword [rbx+0x28], 0x0
0000000000013847         shl        ebp, 0x4
000000000001384a         and        edx, 0xffffffef
000000000001384d         or         ebp, edx
000000000001384f         mov        byte [rbx+0x38], bpl
0000000000013853         call       j_strlen                                    ; strlen
0000000000013858         mov        rcx, r13
000000000001385b         mov        rdx, rax
000000000001385e         mov        rsi, r12
0000000000013861         mov        rdi, rbx
0000000000013864         call       re_compile_internal                         ; re_compile_internal
0000000000013869         cmp        eax, 0x10
000000000001386c         mov        ebp, eax
000000000001386e         je         loc_138a8

0000000000013870         test       eax, eax
0000000000013872         jne        loc_138ad

0000000000013874         mov        rdi, rbx
0000000000013877         call       rpl_re_compile_fastmap                      ; rpl_re_compile_fastmap

                     loc_1387c:
000000000001387c         pop        rbx                                         ; CODE XREF=rpl_regcomp+254
000000000001387d         mov        eax, ebp
000000000001387f         pop        rbp
0000000000013880         pop        r12
0000000000013882         pop        r13
0000000000013884         pop        r14
0000000000013886         ret
                        ; endp
0000000000013887         align      16

                     loc_13890:
0000000000013890         and        r13, 0xffffffffffffffbf                     ; CODE XREF=rpl_regcomp+108
0000000000013894         or         byte [rbx+0x38], 0x80
0000000000013898         or         r13, 0x100
000000000001389f         jmp        loc_13832
00000000000138a1         align      8

                     loc_138a8:
00000000000138a8         mov        ebp, 0x8                                    ; CODE XREF=rpl_regcomp+174

                     loc_138ad:
00000000000138ad         mov        rdi, qword [rbx+0x20]                       ; argument "__ptr" for method j_free, CODE XREF=rpl_regcomp+178
00000000000138b1         call       j_free                                      ; free
00000000000138b6         mov        qword [rbx+0x20], 0x0
00000000000138be         jmp        loc_1387c

                     loc_138c0:
00000000000138c0         mov        ebp, 0xc                                    ; CODE XREF=rpl_regcomp+81
00000000000138c5         pop        rbx
00000000000138c6         mov        eax, ebp
00000000000138c8         pop        rbp
00000000000138c9         pop        r12
00000000000138cb         pop        r13
00000000000138cd         pop        r14
00000000000138cf         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_regerror:
00000000000138d0         push       r13                                         ; End of unwind block (FDE at 0x17c14), Begin of unwind block (FDE at 0x17c60)
00000000000138d2         push       r12
00000000000138d4         push       rbp
00000000000138d5         push       rbx
00000000000138d6         sub        rsp, 0x8
00000000000138da         cmp        edi, 0x10
00000000000138dd         ja         loc_13940

00000000000138df         lea        rax, qword [__re_error_msgid_idx]           ; __re_error_msgid_idx
00000000000138e6         movsxd     rdi, edi
00000000000138e9         lea        rsi, qword [__re_error_msgid]               ; "Success"
00000000000138f0         mov        rbp, rdx
00000000000138f3         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000138f8         mov        r12, rcx
00000000000138fb         add        rsi, qword [rax+rdi*8]                      ; argument "msgid" for method j_dcgettext
00000000000138ff         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000013901         call       j_dcgettext                                 ; dcgettext
0000000000013906         mov        rdi, rax                                    ; argument "__s" for method j_strlen
0000000000013909         mov        r13, rax
000000000001390c         call       j_strlen                                    ; strlen
0000000000013911         test       r12, r12
0000000000013914         lea        rbx, qword [rax+1]
0000000000013918         je         loc_1392d

000000000001391a         cmp        rbx, r12
000000000001391d         mov        rdx, rbx
0000000000013920         ja         loc_13948

                     loc_13922:
0000000000013922         mov        rsi, r13                                    ; argument "__src" for method j_memcpy, CODE XREF=rpl_regerror+131
0000000000013925         mov        rdi, rbp                                    ; argument "__dest" for method j_memcpy
0000000000013928         call       j_memcpy                                    ; memcpy

                     loc_1392d:
000000000001392d         add        rsp, 0x8                                    ; CODE XREF=rpl_regerror+72
0000000000013931         mov        rax, rbx
0000000000013934         pop        rbx
0000000000013935         pop        rbp
0000000000013936         pop        r12
0000000000013938         pop        r13
000000000001393a         ret
                        ; endp
000000000001393b         align      64

                     loc_13940:
0000000000013940         call       j_abort                                     ; abort, CODE XREF=rpl_regerror+13
                        ; endp
0000000000013945         align      8

                     loc_13948:
0000000000013948         lea        rdx, qword [r12-1]                          ; CODE XREF=rpl_regerror+80
000000000001394d         mov        byte [rbp+r12-1], 0x0
0000000000013953         jmp        loc_13922
0000000000013955         align      32                                          ; End of unwind block (FDE at 0x17c60)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_regfree:
0000000000013960         push       rbx                                         ; Begin of unwind block (FDE at 0x17c9c)
0000000000013961         mov        rbx, rdi
0000000000013964         mov        rdi, qword [rdi]
0000000000013967         test       rdi, rdi
000000000001396a         je         loc_13971

000000000001396c         call       free_dfa_content                            ; free_dfa_content

                     loc_13971:
0000000000013971         mov        rdi, qword [rbx+0x20]                       ; argument "__ptr" for method j_free, CODE XREF=rpl_regfree+10
0000000000013975         mov        qword [rbx], 0x0
000000000001397c         mov        qword [rbx+8], 0x0
0000000000013984         call       j_free                                      ; free
0000000000013989         mov        rdi, qword [rbx+0x28]                       ; argument "__ptr" for method j_free
000000000001398d         mov        qword [rbx+0x20], 0x0
0000000000013995         call       j_free                                      ; free
000000000001399a         mov        qword [rbx+0x28], 0x0
00000000000139a2         pop        rbx
00000000000139a3         ret
                        ; endp
00000000000139a4         align      16                                          ; End of unwind block (FDE at 0x17c9c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48


                     rpl_regexec:
00000000000139b0         test       r8d, 0xfffffff8                             ; Begin of unwind block (FDE at 0x17cb8)
00000000000139b7         jne        loc_13a48

00000000000139bd         push       r13
00000000000139bf         push       r12
00000000000139c1         mov        r13, rdx
00000000000139c4         push       rbp
00000000000139c5         push       rbx
00000000000139c6         mov        r12, rcx
00000000000139c9         mov        ebx, r8d
00000000000139cc         mov        rbp, rdi
00000000000139cf         sub        rsp, 0x18
00000000000139d3         test       r8b, 0x4
00000000000139d7         jne        loc_13a28

00000000000139d9         mov        rdi, rsi                                    ; argument "__s" for method j_strlen
00000000000139dc         mov        qword [rsp+0x38+var_30], rsi
00000000000139e1         call       j_strlen                                    ; strlen
00000000000139e6         xor        ecx, ecx
00000000000139e8         test       byte [rbp+0x38], 0x10
00000000000139ec         mov        rdx, rax
00000000000139ef         mov        rsi, qword [rsp+0x38+var_30]
00000000000139f4         je         loc_13a36

                     loc_139f6:
00000000000139f6         sub        rsp, 0x8                                    ; CODE XREF=rpl_regexec+132
00000000000139fa         push       rbx
00000000000139fb         push       0x0
00000000000139fd         push       0x0

                     loc_139ff:
00000000000139ff         mov        rdi, rbp                                    ; CODE XREF=rpl_regexec+143
0000000000013a02         mov        r9, rdx
0000000000013a05         mov        r8, rdx
0000000000013a08         call       re_search_internal                          ; re_search_internal
0000000000013a0d         add        rsp, 0x20
0000000000013a11         test       eax, eax
0000000000013a13         setne      al
0000000000013a16         add        rsp, 0x18
0000000000013a1a         pop        rbx
0000000000013a1b         movzx      eax, al
0000000000013a1e         pop        rbp
0000000000013a1f         pop        r12
0000000000013a21         pop        r13
0000000000013a23         ret
                        ; endp
0000000000013a24         align      8

                     loc_13a28:
0000000000013a28         test       byte [rbp+0x38], 0x10                       ; CODE XREF=rpl_regexec+39
0000000000013a2c         mov        rcx, qword [rcx]
0000000000013a2f         mov        rdx, qword [r12+8]
0000000000013a34         jne        loc_139f6

                     loc_13a36:
0000000000013a36         sub        rsp, 0x8                                    ; CODE XREF=rpl_regexec+68
0000000000013a3a         push       rbx
0000000000013a3b         push       r12
0000000000013a3d         push       r13
0000000000013a3f         jmp        loc_139ff
0000000000013a41         align      8

                     loc_13a48:
0000000000013a48         mov        eax, 0x2                                    ; CODE XREF=rpl_regexec+7
0000000000013a4d         ret
                        ; endp
0000000000013a4e         align      16                                          ; End of unwind block (FDE at 0x17cb8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_re_match:
0000000000013a50         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0x17d14)
0000000000013a54         mov        r9, rdx
0000000000013a57         push       0x1
0000000000013a59         push       r8
0000000000013a5b         xor        r8d, r8d
0000000000013a5e         call       re_search_stub                              ; re_search_stub
0000000000013a63         add        rsp, 0x18
0000000000013a67         ret
                        ; endp
0000000000013a68         align      16                                          ; End of unwind block (FDE at 0x17d14)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_re_search:
0000000000013a70         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0x17d34), CODE XREF=tac_seekable+429
0000000000013a74         push       0x0
0000000000013a76         push       r9
0000000000013a78         mov        r9, rdx
0000000000013a7b         call       re_search_stub                              ; re_search_stub
0000000000013a80         add        rsp, 0x18
0000000000013a84         ret
                        ; endp
0000000000013a85         align      16                                          ; End of unwind block (FDE at 0x17d34)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_8: int, 16
        ;    arg_0: int, 8


                     rpl_re_match_2:
0000000000013a90         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0x17d54)
0000000000013a94         push       0x1
0000000000013a96         push       qword [rsp+0x10+arg_8]
0000000000013a9a         push       qword [rsp+0x18+arg_0]
0000000000013a9e         push       0x0
0000000000013aa0         call       re_search_2_stub                            ; re_search_2_stub
0000000000013aa5         add        rsp, 0x28
0000000000013aa9         ret
                        ; endp
0000000000013aaa         align      16                                          ; End of unwind block (FDE at 0x17d54)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_0: int, 8


                     rpl_re_search_2:
0000000000013ab0         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0x17d78)
0000000000013ab4         push       0x0
0000000000013ab6         push       qword [rsp+0x10+arg_10]
0000000000013aba         push       qword [rsp+0x18+arg_8]
0000000000013abe         push       qword [rsp+0x20+arg_0]
0000000000013ac2         call       re_search_2_stub                            ; re_search_2_stub
0000000000013ac7         add        rsp, 0x28
0000000000013acb         ret
                        ; endp
0000000000013acc         align      16                                          ; End of unwind block (FDE at 0x17d78)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_re_set_registers:
0000000000013ad0         test       rdx, rdx                                    ; Begin of unwind block (FDE at 0x17d9c)
0000000000013ad3         jne        loc_13af8

0000000000013ad5         and        byte [rdi+0x38], 0xf9
0000000000013ad9         mov        qword [rsi], 0x0
0000000000013ae0         mov        qword [rsi+0x10], 0x0
0000000000013ae8         mov        qword [rsi+8], 0x0
0000000000013af0         ret
                        ; endp
0000000000013af1         align      8

                     loc_13af8:
0000000000013af8         movzx      eax, byte [rdi+0x38]                        ; CODE XREF=rpl_re_set_registers+3
0000000000013afc         and        eax, 0xfffffff9
0000000000013aff         or         eax, 0x2
0000000000013b02         mov        byte [rdi+0x38], al
0000000000013b05         mov        qword [rsi], rdx
0000000000013b08         mov        qword [rsi+8], rcx
0000000000013b0c         mov        qword [rsi+0x10], r8
0000000000013b10         ret
                        ; endp
0000000000013b11         align      32                                          ; End of unwind block (FDE at 0x17d9c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stream:
0000000000013b20         push       r12                                         ; Begin of unwind block (FDE at 0x17db4), CODE XREF=close_stdout+13, close_stdout+51
0000000000013b22         push       rbp
0000000000013b23         mov        rbp, rdi
0000000000013b26         push       rbx
0000000000013b27         call       j___fpending                                ; __fpending
0000000000013b2c         mov        ebx, dword [rbp]
0000000000013b2f         mov        rdi, rbp
0000000000013b32         mov        r12, rax
0000000000013b35         call       rpl_fclose                                  ; rpl_fclose
0000000000013b3a         and        ebx, 0x20
0000000000013b3d         test       ebx, ebx
0000000000013b3f         jne        loc_13b58

0000000000013b41         test       eax, eax
0000000000013b43         je         loc_13b4f

0000000000013b45         test       r12, r12
0000000000013b48         mov        eax, 0xffffffff
0000000000013b4d         je         loc_13b88

                     loc_13b4f:
0000000000013b4f         pop        rbx                                         ; CODE XREF=close_stream+35
0000000000013b50         pop        rbp
0000000000013b51         pop        r12
0000000000013b53         ret
                        ; endp
0000000000013b54         align      8

                     loc_13b58:
0000000000013b58         test       eax, eax                                    ; CODE XREF=close_stream+31
0000000000013b5a         jne        loc_13b78

0000000000013b5c         call       j___errno_location                          ; __errno_location
0000000000013b61         mov        dword [rax], 0x0
0000000000013b67         mov        eax, 0xffffffff
0000000000013b6c         pop        rbx
0000000000013b6d         pop        rbp
0000000000013b6e         pop        r12
0000000000013b70         ret
                        ; endp
0000000000013b71         align      8

                     loc_13b78:
0000000000013b78         pop        rbx                                         ; CODE XREF=close_stream+58
0000000000013b79         mov        eax, 0xffffffff
0000000000013b7e         pop        rbp
0000000000013b7f         pop        r12
0000000000013b81         ret
                        ; endp
0000000000013b82         align      8

                     loc_13b88:
0000000000013b88         call       j___errno_location                          ; __errno_location, CODE XREF=close_stream+45
0000000000013b8d         cmp        dword [rax], 0x9
0000000000013b90         pop        rbx
0000000000013b91         pop        rbp
0000000000013b92         pop        r12
0000000000013b94         setne      al
0000000000013b97         movzx      eax, al
0000000000013b9a         neg        eax
0000000000013b9c         ret
                        ; endp
0000000000013b9d         align      32                                          ; End of unwind block (FDE at 0x17db4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     last_component:
0000000000013ba0         movzx      edx, byte [rdi]                             ; Begin of unwind block (FDE at 0x17e04), CODE XREF=mfile_name_concat+23
0000000000013ba3         mov        rax, rdi
0000000000013ba6         cmp        dl, 0x2f
0000000000013ba9         jne        loc_13bbc

0000000000013bab         nop        dword [rax+rax]

                     loc_13bb0:
0000000000013bb0         add        rax, 0x1                                    ; CODE XREF=last_component+26
0000000000013bb4         movzx      edx, byte [rax]
0000000000013bb7         cmp        dl, 0x2f
0000000000013bba         je         loc_13bb0

                     loc_13bbc:
0000000000013bbc         test       dl, dl                                      ; CODE XREF=last_component+9
0000000000013bbe         je         loc_13bfa

0000000000013bc0         mov        rcx, rax
0000000000013bc3         xor        esi, esi
0000000000013bc5         jmp        loc_13be5
0000000000013bc7         align      16

                     loc_13bd0:
0000000000013bd0         test       sil, sil                                    ; CODE XREF=last_component+72
0000000000013bd3         je         loc_13bda

0000000000013bd5         mov        rax, rcx
0000000000013bd8         xor        esi, esi

                     loc_13bda:
0000000000013bda         add        rcx, 0x1                                    ; CODE XREF=last_component+51
0000000000013bde         movzx      edx, byte [rcx]
0000000000013be1         test       dl, dl
0000000000013be3         je         loc_13bfa

                     loc_13be5:
0000000000013be5         cmp        dl, 0x2f                                    ; CODE XREF=last_component+37, last_component+88
0000000000013be8         jne        loc_13bd0

0000000000013bea         add        rcx, 0x1
0000000000013bee         movzx      edx, byte [rcx]
0000000000013bf1         mov        esi, 0x1
0000000000013bf6         test       dl, dl
0000000000013bf8         jne        loc_13be5

                     loc_13bfa:
0000000000013bfa         ret                                                    ; CODE XREF=last_component+30, last_component+67
                        ; endp
0000000000013bfc         align      1024                                        ; End of unwind block (FDE at 0x17e04)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     base_len:
0000000000013c00         push       rbx                                         ; Begin of unwind block (FDE at 0x17e18), CODE XREF=mfile_name_concat+34
0000000000013c01         mov        rbx, rdi
0000000000013c04         call       j_strlen                                    ; strlen
0000000000013c09         cmp        rax, 0x1
0000000000013c0d         jbe        loc_13c1a

0000000000013c0f         cmp        byte [rbx+rax-1], 0x2f
0000000000013c14         lea        rdx, qword [rax-1]
0000000000013c18         je         loc_13c28

                     loc_13c1a:
0000000000013c1a         pop        rbx                                         ; CODE XREF=base_len+13
0000000000013c1b         ret
                        ; endp
0000000000013c1c         align      32

                     loc_13c20:
0000000000013c20         mov        rdx, rax                                    ; CODE XREF=base_len+55
0000000000013c23         nop        dword [rax+rax]

                     loc_13c28:
0000000000013c28         cmp        rdx, 0x1                                    ; CODE XREF=base_len+24
0000000000013c2c         je         loc_13c40

0000000000013c2e         cmp        byte [rbx+rdx-1], 0x2f
0000000000013c33         lea        rax, qword [rdx-1]
0000000000013c37         je         loc_13c20

0000000000013c39         mov        rax, rdx
0000000000013c3c         pop        rbx
0000000000013c3d         ret
                        ; endp
0000000000013c3e         align      64

                     loc_13c40:
0000000000013c40         mov        eax, 0x1                                    ; CODE XREF=base_len+44
0000000000013c45         pop        rbx
0000000000013c46         ret
                        ; endp
0000000000013c47         align      16                                          ; End of unwind block (FDE at 0x17e18)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fd_safer_flag:
0000000000013c50         push       r13                                         ; Begin of unwind block (FDE at 0x17e44), CODE XREF=mkostemp_safer+13
0000000000013c52         push       r12
0000000000013c54         push       rbp
0000000000013c55         push       rbx
0000000000013c56         mov        ebx, edi
0000000000013c58         sub        rsp, 0x8
0000000000013c5c         cmp        edi, 0x2
0000000000013c5f         ja         loc_13c82

0000000000013c61         call       dup_safer_flag                              ; dup_safer_flag
0000000000013c66         mov        r12d, eax
0000000000013c69         call       j___errno_location                          ; __errno_location
0000000000013c6e         mov        r13d, dword [rax]
0000000000013c71         mov        rbp, rax
0000000000013c74         mov        edi, ebx                                    ; argument "__fd" for method j_close
0000000000013c76         call       j_close                                     ; close
0000000000013c7b         mov        ebx, r12d
0000000000013c7e         mov        dword [rbp], r13d

                     loc_13c82:
0000000000013c82         add        rsp, 0x8                                    ; CODE XREF=fd_safer_flag+15
0000000000013c86         mov        eax, ebx
0000000000013c88         pop        rbx
0000000000013c89         pop        rbp
0000000000013c8a         pop        r12
0000000000013c8c         pop        r13
0000000000013c8e         ret
                        ; endp
0000000000013c8f         align      16                                          ; End of unwind block (FDE at 0x17e44)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40
        ;    var_30: int64_t, -48
        ;    var_38: int64_t, -56
        ;    var_48: int8_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int32_t, -104


                     dup_safer_flag:
0000000000013c90         and        esi, 0x80000                                ; Begin of unwind block (FDE at 0x17e7c), CODE XREF=fd_safer_flag+17
0000000000013c96         mov        eax, 0x406
0000000000013c9b         mov        edx, 0x3
0000000000013ca0         cmovne     esi, eax
0000000000013ca3         xor        eax, eax
0000000000013ca5         jmp        rpl_fcntl                                   ; rpl_fcntl
0000000000013caa         align      16                                          ; End of unwind block (FDE at 0x17e7c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hard_locale:
0000000000013cb0         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0x17e94), CODE XREF=rpl_mbrtowc+71
0000000000013cb4         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
0000000000013cb6         call       j_setlocale                                 ; setlocale
0000000000013cbb         mov        rdx, rax
0000000000013cbe         mov        eax, 0x1
0000000000013cc3         test       rdx, rdx
0000000000013cc6         je         loc_13ce5

0000000000013cc8         lea        rdi, qword [__re_error_msgid+400]           ; 0x15790
0000000000013ccf         mov        ecx, 0x2
0000000000013cd4         mov        rsi, rdx
0000000000013cd7         rep  cmpsb byte [rsi], byte [rdi]
0000000000013cd9         seta       cl
0000000000013cdc         sbb        cl, 0x0
0000000000013cdf         xor        eax, eax
0000000000013ce1         test       cl, cl
0000000000013ce3         jne        loc_13cf0

                     loc_13ce5:
0000000000013ce5         add        rsp, 0x8                                    ; CODE XREF=hard_locale+22
0000000000013ce9         ret
                        ; endp
0000000000013cea         align      16

                     loc_13cf0:
0000000000013cf0         lea        rdi, qword [aPosix]                         ; "POSIX", CODE XREF=hard_locale+51
0000000000013cf7         mov        ecx, 0x6
0000000000013cfc         mov        rsi, rdx
0000000000013cff         rep  cmpsb byte [rsi], byte [rdi]
0000000000013d01         seta       al
0000000000013d04         sbb        al, 0x0
0000000000013d06         test       al, al
0000000000013d08         setne      al
0000000000013d0b         add        rsp, 0x8
0000000000013d0f         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     locale_charset:
0000000000013d10         sub        rsp, 0x8                                    ; End of unwind block (FDE at 0x17e94), Begin of unwind block (FDE at 0x17eb4), CODE XREF=gettext_quote.part.1+11
0000000000013d14         mov        edi, 0xe                                    ; argument "__item" for method j_nl_langinfo
0000000000013d19         call       j_nl_langinfo                               ; nl_langinfo
0000000000013d1e         test       rax, rax
0000000000013d21         je         loc_13d40

0000000000013d23         cmp        byte [rax], 0x0
0000000000013d26         lea        rdx, qword [aAscii]                         ; "ASCII"
0000000000013d2d         cmove      rax, rdx
0000000000013d31         add        rsp, 0x8
0000000000013d35         ret
                        ; endp
0000000000013d36         align      64

                     loc_13d40:
0000000000013d40         lea        rax, qword [aAscii]                         ; "ASCII", CODE XREF=locale_charset+17
0000000000013d47         add        rsp, 0x8
0000000000013d4b         ret
                        ; endp
0000000000013d4c         align      16                                          ; End of unwind block (FDE at 0x17eb4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     dup_safer:
0000000000013d50         mov        edx, 0x3                                    ; Begin of unwind block (FDE at 0x17ed4), CODE XREF=fd_safer+17
0000000000013d55         xor        esi, esi
0000000000013d57         xor        eax, eax
0000000000013d59         jmp        rpl_fcntl                                   ; rpl_fcntl
                        ; endp
0000000000013d5e         align      32                                          ; End of unwind block (FDE at 0x17ed4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fclose:
0000000000013d60         push       r12                                         ; Begin of unwind block (FDE at 0x17eec), CODE XREF=close_stream+21
0000000000013d62         push       rbp
0000000000013d63         push       rbx
0000000000013d64         mov        rbx, rdi
0000000000013d67         call       j_fileno                                    ; fileno
0000000000013d6c         test       eax, eax
0000000000013d6e         mov        rdi, rbx
0000000000013d71         js         loc_13dc7

0000000000013d73         call       j___freading                                ; __freading
0000000000013d78         test       eax, eax
0000000000013d7a         jne        loc_13da8

                     loc_13d7c:
0000000000013d7c         mov        rdi, rbx                                    ; CODE XREF=rpl_fclose+98
0000000000013d7f         call       rpl_fflush                                  ; rpl_fflush
0000000000013d84         test       eax, eax
0000000000013d86         je         loc_13dc4

0000000000013d88         call       j___errno_location                          ; __errno_location
0000000000013d8d         mov        r12d, dword [rax]
0000000000013d90         mov        rdi, rbx                                    ; argument "__stream" for method j_fclose
0000000000013d93         mov        rbp, rax
0000000000013d96         call       j_fclose                                    ; fclose
0000000000013d9b         test       r12d, r12d
0000000000013d9e         jne        loc_13dd0

                     loc_13da0:
0000000000013da0         pop        rbx                                         ; CODE XREF=rpl_fclose+121
0000000000013da1         pop        rbp
0000000000013da2         pop        r12
0000000000013da4         ret
                        ; endp
0000000000013da5         align      8

                     loc_13da8:
0000000000013da8         mov        rdi, rbx                                    ; argument "__stream" for method j_fileno, CODE XREF=rpl_fclose+26
0000000000013dab         call       j_fileno                                    ; fileno
0000000000013db0         xor        esi, esi                                    ; argument "__offset" for method j_lseek
0000000000013db2         mov        edx, 0x1                                    ; argument "__whence" for method j_lseek
0000000000013db7         mov        edi, eax                                    ; argument "__fd" for method j_lseek
0000000000013db9         call       j_lseek                                     ; lseek
0000000000013dbe         cmp        rax, 0xffffffffffffffff
0000000000013dc2         jne        loc_13d7c

                     loc_13dc4:
0000000000013dc4         mov        rdi, rbx                                    ; CODE XREF=rpl_fclose+38

                     loc_13dc7:
0000000000013dc7         pop        rbx                                         ; CODE XREF=rpl_fclose+17
0000000000013dc8         pop        rbp
0000000000013dc9         pop        r12
0000000000013dcb         jmp        j_fclose                                    ; fclose
                        ; endp

                     loc_13dd0:
0000000000013dd0         mov        dword [rbp], r12d                           ; CODE XREF=rpl_fclose+62
0000000000013dd4         mov        eax, 0xffffffff
0000000000013dd9         jmp        loc_13da0
0000000000013ddb         align      32                                          ; End of unwind block (FDE at 0x17eec)

                     rpl_fcntl:
0000000000013de0         push       r12                                         ; Begin of unwind block (FDE at 0x17f24), CODE XREF=dup_safer_flag+21, dup_safer+9
0000000000013de2         push       rbp
0000000000013de3         mov        ebp, edi
0000000000013de5         push       rbx
0000000000013de6         sub        rsp, 0x50
0000000000013dea         mov        rax, qword [fs:0x28]
0000000000013df3         mov        qword [rsp+0x68+var_50], rax
0000000000013df8         xor        eax, eax
0000000000013dfa         lea        rax, qword [rsp+0x68+arg_0]
0000000000013dff         test       esi, esi
0000000000013e01         mov        qword [rsp+0x68+var_38], rdx
0000000000013e06         mov        qword [rsp+0x68+var_30], rcx
0000000000013e0b         mov        qword [rsp+0x68+var_28], r8
0000000000013e10         mov        qword [rsp+0x68+var_60], rax
0000000000013e15         lea        rax, qword [rsp+0x68+var_48]
0000000000013e1a         mov        qword [rsp+0x68+var_20], r9
0000000000013e1f         mov        dword [rsp+0x68+var_68], 0x10
0000000000013e26         mov        qword [rsp+0x68+var_58], rax
0000000000013e2b         je         loc_14032

0000000000013e31         cmp        esi, 0x406
0000000000013e37         jne        loc_13e80

0000000000013e39         mov        rax, qword [rsp+0x68+var_58]
0000000000013e3e         cmp        dword [have_dupfd_cloexec.3326], 0x0        ; have_dupfd_cloexec.3326
0000000000013e45         mov        dword [rsp+0x68+var_68], 0x18
0000000000013e4c         mov        r12d, dword [rax+0x10]
0000000000013e50         mov        edx, r12d
0000000000013e53         js         loc_13f83

0000000000013e59         xor        eax, eax
0000000000013e5b         mov        esi, 0x406                                  ; argument "__cmd" for method j_fcntl
0000000000013e60         call       j_fcntl                                     ; fcntl
0000000000013e65         test       eax, eax
0000000000013e67         mov        ebx, eax
0000000000013e69         js         loc_13ff8

                     loc_13e6f:
0000000000013e6f         mov        dword [have_dupfd_cloexec.3326], 0x1        ; have_dupfd_cloexec.3326, CODE XREF=rpl_fcntl+544
0000000000013e79         jmp        loc_13ec0
0000000000013e7b         align      128

                     loc_13e80:
0000000000013e80         cmp        esi, 0xb                                    ; CODE XREF=rpl_fcntl+87
0000000000013e83         je         loc_13eb0

0000000000013e85         jg         loc_13ee0

0000000000013e87         cmp        esi, 0x4
0000000000013e8a         je         loc_13f60

0000000000013e90         jg         loc_13f50

0000000000013e96         cmp        esi, 0x2
0000000000013e99         je         loc_13f60

0000000000013e9f         jg         loc_13eb0

0000000000013ea1         cmp        esi, 0x1
0000000000013ea4         jne        loc_13f08

0000000000013ea6         nop        word [cs:rax+rax]

                     loc_13eb0:
0000000000013eb0         mov        edi, ebp                                    ; argument "__fd" for method j_fcntl, CODE XREF=rpl_fcntl+163, rpl_fcntl+191, rpl_fcntl+278, rpl_fcntl+344, rpl_fcntl+358, rpl_fcntl+371
0000000000013eb2         xor        eax, eax
0000000000013eb4         call       j_fcntl                                     ; fcntl
0000000000013eb9         mov        ebx, eax
0000000000013ebb         nop        dword [rax+rax]

                     loc_13ec0:
0000000000013ec0         mov        rcx, qword [rsp+0x68+var_50]                ; CODE XREF=rpl_fcntl+153, rpl_fcntl+327, rpl_fcntl+414, rpl_fcntl+432, rpl_fcntl+445, rpl_fcntl+491, rpl_fcntl+524, rpl_fcntl+568, rpl_fcntl+613
0000000000013ec5         xor        rcx, qword [fs:0x28]
0000000000013ece         mov        eax, ebx
0000000000013ed0         jne        loc_1402d

0000000000013ed6         add        rsp, 0x50
0000000000013eda         pop        rbx
0000000000013edb         pop        rbp
0000000000013edc         pop        r12
0000000000013ede         ret
                        ; endp
0000000000013edf         align      32

                     loc_13ee0:
0000000000013ee0         cmp        esi, 0x407                                  ; CODE XREF=rpl_fcntl+165
0000000000013ee6         jg         loc_13f30

0000000000013ee8         cmp        esi, 0x406
0000000000013eee         jge        loc_13f60

0000000000013ef0         cmp        esi, 0x401
0000000000013ef6         je         loc_13eb0

0000000000013ef8         cmp        esi, 0x402
0000000000013efe         je         loc_13f60

0000000000013f00         cmp        esi, 0x400
0000000000013f06         je         loc_13f60

                     loc_13f08:
0000000000013f08         mov        eax, dword [rsp+0x68+var_68]                ; CODE XREF=rpl_fcntl+196, rpl_fcntl+356, rpl_fcntl+382
0000000000013f0b         cmp        eax, 0x2f
0000000000013f0e         ja         loc_1404a

0000000000013f14         add        rax, qword [rsp+0x68+var_58]

                     loc_13f19:
0000000000013f19         mov        rdx, qword [rax]                            ; CODE XREF=rpl_fcntl+623
0000000000013f1c         mov        edi, ebp                                    ; argument "__fd" for method j_fcntl
0000000000013f1e         xor        eax, eax
0000000000013f20         call       j_fcntl                                     ; fcntl
0000000000013f25         mov        ebx, eax
0000000000013f27         jmp        loc_13ec0
0000000000013f29         align      16

                     loc_13f30:
0000000000013f30         cmp        esi, 0x409                                  ; CODE XREF=rpl_fcntl+262
0000000000013f36         je         loc_13f60

0000000000013f38         jl         loc_13eb0

0000000000013f3e         cmp        esi, 0x40a
0000000000013f44         jne        loc_13f08

0000000000013f46         jmp        loc_13eb0
0000000000013f4b         align      16

                     loc_13f50:
0000000000013f50         cmp        esi, 0x9                                    ; CODE XREF=rpl_fcntl+176
0000000000013f53         je         loc_13eb0

0000000000013f59         jg         loc_13f60

0000000000013f5b         cmp        esi, 0x8
0000000000013f5e         jne        loc_13f08

                     loc_13f60:
0000000000013f60         mov        eax, dword [rsp+0x68+var_68]                ; CODE XREF=rpl_fcntl+170, rpl_fcntl+185, rpl_fcntl+270, rpl_fcntl+286, rpl_fcntl+294, rpl_fcntl+342, rpl_fcntl+377
0000000000013f63         cmp        eax, 0x2f
0000000000013f66         ja         loc_14054

0000000000013f6c         add        rax, qword [rsp+0x68+var_58]

                     loc_13f71:
0000000000013f71         mov        edx, dword [rax]                            ; CODE XREF=rpl_fcntl+633
0000000000013f73         mov        edi, ebp                                    ; argument "__fd" for method j_fcntl
0000000000013f75         xor        eax, eax
0000000000013f77         call       j_fcntl                                     ; fcntl
0000000000013f7c         mov        ebx, eax
0000000000013f7e         jmp        loc_13ec0

                     loc_13f83:
0000000000013f83         xor        esi, esi                                    ; argument "__cmd" for method j_fcntl, CODE XREF=rpl_fcntl+115
0000000000013f85         xor        eax, eax
0000000000013f87         call       j_fcntl                                     ; fcntl
0000000000013f8c         test       eax, eax
0000000000013f8e         mov        ebx, eax
0000000000013f90         js         loc_13ec0

0000000000013f96         cmp        dword [have_dupfd_cloexec.3326], 0xffffffff ; have_dupfd_cloexec.3326
0000000000013f9d         jne        loc_13ec0

                     loc_13fa3:
0000000000013fa3         xor        eax, eax                                    ; CODE XREF=rpl_fcntl+584
0000000000013fa5         mov        esi, 0x1                                    ; argument "__cmd" for method j_fcntl
0000000000013faa         mov        edi, ebx                                    ; argument "__fd" for method j_fcntl
0000000000013fac         call       j_fcntl                                     ; fcntl
0000000000013fb1         test       eax, eax
0000000000013fb3         js         loc_13fd1

0000000000013fb5         or         eax, 0x1
0000000000013fb8         mov        esi, 0x2                                    ; argument "__cmd" for method j_fcntl
0000000000013fbd         mov        edi, ebx                                    ; argument "__fd" for method j_fcntl
0000000000013fbf         mov        edx, eax
0000000000013fc1         xor        eax, eax
0000000000013fc3         call       j_fcntl                                     ; fcntl
0000000000013fc8         cmp        eax, 0xffffffff
0000000000013fcb         jne        loc_13ec0

                     loc_13fd1:
0000000000013fd1         call       j___errno_location                          ; __errno_location, CODE XREF=rpl_fcntl+467
0000000000013fd6         mov        r12d, dword [rax]
0000000000013fd9         mov        rbp, rax
0000000000013fdc         mov        edi, ebx                                    ; argument "__fd" for method j_close
0000000000013fde         call       j_close                                     ; close
0000000000013fe3         mov        ebx, 0xffffffff
0000000000013fe8         mov        dword [rbp], r12d
0000000000013fec         jmp        loc_13ec0
0000000000013ff1         align      8

                     loc_13ff8:
0000000000013ff8         call       j___errno_location                          ; __errno_location, CODE XREF=rpl_fcntl+137
0000000000013ffd         cmp        dword [rax], 0x16
0000000000014000         jne        loc_13e6f

0000000000014006         xor        esi, esi                                    ; argument "__cmd" for method j_fcntl
0000000000014008         xor        eax, eax
000000000001400a         mov        edx, r12d
000000000001400d         mov        edi, ebp                                    ; argument "__fd" for method j_fcntl
000000000001400f         call       j_fcntl                                     ; fcntl
0000000000014014         test       eax, eax
0000000000014016         mov        ebx, eax
0000000000014018         js         loc_13ec0

000000000001401e         mov        dword [have_dupfd_cloexec.3326], 0xffffffff ; have_dupfd_cloexec.3326
0000000000014028         jmp        loc_13fa3

                     loc_1402d:
000000000001402d         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=rpl_fcntl+240
                        ; endp

                     loc_14032:
0000000000014032         mov        rax, qword [rsp+0x68+var_58]                ; CODE XREF=rpl_fcntl+75
0000000000014037         xor        esi, esi                                    ; argument "__cmd" for method j_fcntl
0000000000014039         mov        edx, dword [rax+0x10]
000000000001403c         xor        eax, eax
000000000001403e         call       j_fcntl                                     ; fcntl
0000000000014043         mov        ebx, eax
0000000000014045         jmp        loc_13ec0

                     loc_1404a:
000000000001404a         mov        rax, qword [rsp+0x68+var_60]                ; CODE XREF=rpl_fcntl+302
000000000001404f         jmp        loc_13f19

                     loc_14054:
0000000000014054         mov        rax, qword [rsp+0x68+var_60]                ; CODE XREF=rpl_fcntl+390
0000000000014059         jmp        loc_13f71
000000000001405e         align      32                                          ; End of unwind block (FDE at 0x17f24)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fflush:
0000000000014060         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0x17f5c), CODE XREF=rpl_fclose+31
0000000000014063         push       rbx
0000000000014064         mov        rbx, rdi
0000000000014067         je         loc_1407a

0000000000014069         call       j___freading                                ; __freading
000000000001406e         test       eax, eax
0000000000014070         je         loc_1407a

0000000000014072         test       dword [rbx], 0x100
0000000000014078         jne        loc_14088

                     loc_1407a:
000000000001407a         mov        rdi, rbx                                    ; argument "__stream" for method j_fflush, CODE XREF=rpl_fflush+7, rpl_fflush+16
000000000001407d         pop        rbx
000000000001407e         jmp        j_fflush                                    ; fflush
                        ; endp
0000000000014083         align      8

                     loc_14088:
0000000000014088         mov        rdi, rbx                                    ; CODE XREF=rpl_fflush+24
000000000001408b         mov        edx, 0x1
0000000000014090         xor        esi, esi
0000000000014092         call       rpl_fseeko                                  ; rpl_fseeko
0000000000014097         mov        rdi, rbx                                    ; argument "__stream" for method j_fflush
000000000001409a         pop        rbx
000000000001409b         jmp        j_fflush                                    ; fflush
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __libc_csu_init:
00000000000140a0         push       r15                                         ; End of unwind block (FDE at 0x17f5c), Begin of unwind block (FDE at 0x17f7c), DATA XREF=_start+22
00000000000140a2         push       r14
00000000000140a4         mov        r15, rdx
00000000000140a7         push       r13
00000000000140a9         push       r12
00000000000140ab         lea        r12, qword [__frame_dummy_init_array_entry] ; __frame_dummy_init_array_entry
00000000000140b2         push       rbp
00000000000140b3         lea        rbp, qword [__do_global_dtors_aux_fini_array_entry] ; __do_global_dtors_aux_fini_array_entry
00000000000140ba         push       rbx
00000000000140bb         mov        r13d, edi
00000000000140be         mov        r14, rsi
00000000000140c1         sub        rbp, r12
00000000000140c4         sub        rsp, 0x8
00000000000140c8         sar        rbp, 0x3
00000000000140cc         call       _init                                       ; _init
00000000000140d1         test       rbp, rbp
00000000000140d4         je         loc_140f6

00000000000140d6         xor        ebx, ebx
00000000000140d8         nop        dword [rax+rax]

                     loc_140e0:
00000000000140e0         mov        rdx, r15                                    ; CODE XREF=__libc_csu_init+84
00000000000140e3         mov        rsi, r14
00000000000140e6         mov        edi, r13d
00000000000140e9         call       qword [r12+rbx*8]
00000000000140ed         add        rbx, 0x1
00000000000140f1         cmp        rbp, rbx
00000000000140f4         jne        loc_140e0

                     loc_140f6:
00000000000140f6         add        rsp, 0x8                                    ; CODE XREF=__libc_csu_init+52
00000000000140fa         pop        rbx
00000000000140fb         pop        rbp
00000000000140fc         pop        r12
00000000000140fe         pop        r13
0000000000014100         pop        r14
0000000000014102         pop        r15
0000000000014104         ret
                        ; endp
0000000000014105         align      16                                          ; End of unwind block (FDE at 0x17f7c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __libc_csu_fini:
0000000000014110         ret                                                    ; Begin of unwind block (FDE at 0x17fc4), DATA XREF=_start+15
                        ; endp
0000000000014112         align      32                                          ; End of unwind block (FDE at 0x17fc4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     atexit:
0000000000014120         mov        rdx, qword [__dso_handle]                   ; Begin of unwind block (FDE at 0x17fdc), __dso_handle, CODE XREF=main+89
0000000000014127         xor        esi, esi
0000000000014129         jmp        j___cxa_atexit                              ; __cxa_atexit
                        ; endp
000000000001412e         db  0x00 ; '.'                                         ; End of unwind block (FDE at 0x17fdc)
000000000001412f         db  0x00 ; '.'


        ; Section .fini
        ; Range: [0x14130; 0x14139[ (9 bytes)
        ; File offset : [82224; 82233[ (9 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _fini:
0000000000014130         sub        rsp, 0x8
0000000000014134         add        rsp, 0x8
0000000000014138         ret
                        ; endp
0000000000014139         db  0x00 ; '.'
000000000001413a         db  0x00 ; '.'
000000000001413b         db  0x00 ; '.'
000000000001413c         db  0x00 ; '.'
000000000001413d         db  0x00 ; '.'
000000000001413e         db  0x00 ; '.'
000000000001413f         db  0x00 ; '.'


        ; Section .rodata
        ; Range: [0x14140; 0x1579e[ (5726 bytes)
        ; File offset : [82240; 87966[ (5726 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

                     _IO_stdin_used:
0000000000014140         db  0x01 ; '.'
0000000000014141         db  0x00 ; '.'
0000000000014142         db  0x02 ; '.'
0000000000014143         db  0x00 ; '.'
                     aSSeekFailed:
0000000000014144         db         "%s: seek failed", 0                        ; DATA XREF=tac_seekable+86, tac_seekable+1065, tac_seekable+1296
                     aSReadError:
0000000000014154         db         "%s: read error", 0                         ; DATA XREF=main+1333, main+1365, tac_seekable+1134
                     aRecordTooLarge:
0000000000014163         db         "record too large", 0                       ; DATA XREF=tac_seekable+1404
0000000000014174         db  0x74 ; 't'                                         ; DATA XREF=main+252, usage+342, usage+660, usage+844, usage+863, usage+897
0000000000014175         db  0x61 ; 'a'
0000000000014176         db  0x63 ; 'c'
0000000000014177         db  0x00 ; '.'
0000000000014178         db  0x5b ; '['                                         ; DATA XREF=usage+354
0000000000014179         db  0x00 ; '.'
                     aTestInvocation:
000000000001417a         db         "test invocation", 0                        ; DATA XREF=usage+393
                     aMulticallInvoc:
000000000001418a         db         "Multi-call invocation", 0                  ; DATA XREF=usage+441
                     aSha224sum:
00000000000141a0         db         "sha224sum", 0                              ; DATA XREF=usage+458
                     aSha2Utilities:
00000000000141aa         db         "sha2 utilities", 0                         ; DATA XREF=usage+470
                     aSha256sum:
00000000000141b9         db         "sha256sum", 0                              ; DATA XREF=usage+361
                     aSha384sum:
00000000000141c3         db         "sha384sum", 0                              ; DATA XREF=usage+405
                     aSha512sum:
00000000000141cd         db         "sha512sum", 0                              ; DATA XREF=usage+429
                     aNsOnlineHelpSn:
00000000000141d7         db         "\n%s online help: <%s>\n", 0               ; DATA XREF=usage+546
00000000000141ee         db  0x47 ; 'G'                                         ; DATA XREF=main+245, usage+574, usage+767, emit_bug_reporting_address+68
00000000000141ef         db  0x4e ; 'N'
00000000000141f0         db  0x55 ; 'U'
00000000000141f1         db  0x20 ; ' '
                     aCoreutils:
00000000000141f2         db         "coreutils", 0                              ; DATA XREF=main+58, main+70, usage+417
00000000000141fc         db  0x65 ; 'e'                                         ; DATA XREF=usage+613, usage+806
00000000000141fd         db  0x6e ; 'n'
00000000000141fe         db  0x5f ; '_'                                         ; DATA XREF=sub_10fe0+456
00000000000141ff         db  0x00 ; '.'
                     aFullDocumentat:
0000000000014200         db         "Full documentation <%s%s>\n", 0            ; DATA XREF=usage+641, usage+830
000000000001421b         db  0x2f ; '/'                                         ; DATA XREF=main+1432
000000000001421c         db  0x74 ; 't'
000000000001421d         db  0x6d ; 'm'
000000000001421e         db  0x70 ; 'p'
000000000001421f         db  0x00 ; '.'
                     aUsrlocalsharel:
0000000000014220         db         "/usr/local/share/locale", 0                ; DATA XREF=main+51
                     aDavidMackenzie:
0000000000014238         db         "David MacKenzie", 0                        ; DATA XREF=main+231
                     aJayLepreau:
0000000000014248         db         "Jay Lepreau", 0                            ; DATA XREF=main+238
0000000000014254         db  0x62 ; 'b'                                         ; DATA XREF=main+126
0000000000014255         db  0x72 ; 'r'
0000000000014256         db  0x73 ; 's'
0000000000014257         db  0x3a ; ':'
0000000000014258         db  0x00 ; '.'
                     aSeparatorCanno:
0000000000014259         db         "separator cannot be empty", 0              ; DATA XREF=main+1861
                     aStandardInput:
0000000000014273         db         "standard input", 0                         ; DATA XREF=main+756
                     aFailedToOpenSF_14282:        // aFailedToOpenSF
0000000000014282         db         "failed to open %s for reading", 0          ; DATA XREF=main+1241
                     aTmpdir:
00000000000142a0         db         "TMPDIR", 0                                 ; DATA XREF=main+1414
00000000000142a7         db  0x77 ; 'w'                                         ; DATA XREF=main+1486
00000000000142a8         db  0x2b ; '+'
00000000000142a9         db  0x00 ; '.'
                     aFailedToOpenSF:
00000000000142aa         db         "failed to open %s for writing", 0          ; DATA XREF=main+1752
00000000000142c8         db  0x25 ; '%'                                         ; DATA XREF=main+1402
00000000000142c9         db  0x73 ; 's'
00000000000142ca         db  0x3a ; ':'
00000000000142cb         db  0x20 ; ' '
                     aWriteError:
00000000000142cc         db         "write error", 0                            ; DATA XREF=close_stdout+67
                     aTacxxxxxx:
00000000000142d8         db         "tacXXXXXX", 0                              ; DATA XREF=main+1439
                     aBefore:
00000000000142e2         db         "before", 0
                     aRegex:
00000000000142e9         db         "regex", 0
                     aSeparator:
00000000000142ef         db         "separator", 0
                     aHelp:
00000000000142f9         db         "help", 0
                     aVersion:
00000000000142fe         db         "version", 0
0000000000014306         align      8
                     aErrorInRegular:
0000000000014308         db         "error in regular expression search", 0     ; DATA XREF=tac_seekable+1368
000000000001432b         align      16
                     aTrySHelpForMor:
0000000000014330         db         "Try '%s --help' for more information.\n", 0 ; DATA XREF=usage+47
0000000000014357         align      8
                     aUsageSOptionFi:
0000000000014358         db         "Usage: %s [OPTION]... [FILE]...\n", 0      ; DATA XREF=usage+93
0000000000014379         align      128
                     aWriteEachFileT:
0000000000014380         db         "Write each FILE to standard output, last line first.\n", 0 ; DATA XREF=usage+132
00000000000143b6         align      8
                     aNwithNoFileOrW:
00000000000143b8         db         "\nWith no FILE, or when FILE is -, read standard input.\n", 0 ; DATA XREF=usage+169
                     aNmandatoryArgu:
00000000000143f0         db         "\nMandatory arguments to long options are mandatory for short options too.\n", 0 ; DATA XREF=usage+206
000000000001443b         align      64
                     aBBeforeAttachT:
0000000000014440         db         "  -b, --before             attach the separator before instead of after\n  -r, --regex              interpret the separator as a regular expression\n  -s, --separator=STRING   use STRING as the separator instead of newline\n", 0 ; DATA XREF=usage+243
000000000001451e         align      32
                     aHelpDisplayThi:
0000000000014520         db         "      --help     display this help and exit\n", 0 ; DATA XREF=usage+280
000000000001454d         align      16
                     aVersionOutputV:
0000000000014550         db         "      --version  output version information and exit\n", 0 ; DATA XREF=usage+317
0000000000014586         align      8
                     aHttpswwwgnuorg:
0000000000014588         db         "https://www.gnu.org/software/coreutils/", 0 ; DATA XREF=usage+567, usage+667, usage+760, usage+870, emit_bug_reporting_address+61
                     aReportAnyTrans:
00000000000145b0         db         "Report any translation bugs to <https://translationproject.org/team/>\n", 0 ; DATA XREF=usage+911
00000000000145f7         align      8
                     aOrAvailableLoc:
00000000000145f8         db         "or available locally via: info '(coreutils) %s%s'\n", 0 ; DATA XREF=usage+710
000000000001462b         align      16
                     aFailedToCreate:
0000000000014630         db         "failed to create temporary file in %s", 0  ; DATA XREF=main+1662
0000000000014656         align      8
                     aFailedToRewind:
0000000000014658         db         "failed to rewind stream for %s", 0         ; DATA XREF=main+1152
                     a831:
0000000000014677         db         "8.31", 0                                   ; DATA XREF=Version
                     aSS:
000000000001467c         db         "%s: %s", 0                                 ; DATA XREF=close_stdout+108
0000000000014683         align      8
                     aANullArgv0WasP:
0000000000014688         db         "A NULL argv[0] was passed through an exec system call.\n", 0 ; DATA XREF=set_program_name+132
                     aLibs:
00000000000146c0         db         "/.libs/", 0                                ; DATA XREF=set_program_name+44
00000000000146c8         db  0x6c ; 'l'                                         ; DATA XREF=set_program_name+68
00000000000146c9         db  0x74 ; 't'
00000000000146ca         db  0x2d ; '-'                                         ; DATA XREF=main+615, main+678, main+1575
00000000000146cb         db  0x00 ; '.'
00000000000146cc         db  0xe2 ; '.'                                         ; DATA XREF=gettext_quote.part.1+206
00000000000146cd         db  0x80 ; '.'
00000000000146ce         db  0x98 ; '.'
00000000000146cf         db  0x00 ; '.'
00000000000146d0         db  0xe2 ; '.'                                         ; DATA XREF=gettext_quote.part.1+213
00000000000146d1         db  0x80 ; '.'
00000000000146d2         db  0x99 ; '.'
00000000000146d3         db  0x00 ; '.'
00000000000146d4         db  0xa1 ; '.'                                         ; DATA XREF=gettext_quote.part.1+116
00000000000146d5         db  0x07 ; '.'
00000000000146d6         db  0x65 ; 'e'
00000000000146d7         db  0x00 ; '.'
00000000000146d8         db  0xa1 ; '.'                                         ; DATA XREF=gettext_quote.part.1+123
00000000000146d9         db  0xaf ; '.'
00000000000146da         db  0x00 ; '.'
00000000000146db         db  0x22 ; '"'                                         ; DATA XREF=gettext_quote.part.1+32, sub_3f00+219, sub_3f00+261, sub_3f00+1197
00000000000146dc         db  0x00 ; '.'
00000000000146dd         db  0x27 ; '''                                         ; DATA XREF=gettext_quote.part.1+39, quotearg_buffer_restyled+179, sub_3a30+132, sub_3f00+106, sub_3f00+438, sub_3f00+465, sub_3f00+1120
00000000000146de         db  0x00 ; '.'
00000000000146df         db  0x60 ; '`'                                         ; DATA XREF=sub_3f00+395, sub_3f00+422
00000000000146e0         db  0x00 ; '.'
                     aLiteral:
00000000000146e1         db         "literal", 0
                     aShell:
00000000000146e9         db         "shell", 0
                     aShellalways:
00000000000146ef         db         "shell-always", 0
00000000000146fc         db  0x73 ; 's'
00000000000146fd         db  0x68 ; 'h'
00000000000146fe         db  0x65 ; 'e'
00000000000146ff         db  0x6c ; 'l'
0000000000014700         db  0x6c ; 'l'
0000000000014701         db  0x2d ; '-'
                     aEscape:
0000000000014702         db         "escape", 0
                     aShellescapealw:
0000000000014709         db         "shell-escape-always", 0
                     aCmaybe:
000000000001471d         db         "c-maybe", 0
                     aClocale:
0000000000014725         db         "clocale", 0
000000000001472d         align      64
                     switch_table_14740:        // switch_table
0000000000014740         dd         quotearg_buffer_restyled.loc_412a-switch_table_14740, quotearg_buffer_restyled.loc_3383-switch_table_14740, quotearg_buffer_restyled.loc_4358-switch_table_14740, quotearg_buffer_restyled.loc_4164-switch_table_14740 ; switch table used at 0x3381 containing 11 entries, DATA XREF=quotearg_buffer_restyled+128
0000000000014750         dd         quotearg_buffer_restyled.loc_3f54-switch_table_14740, quotearg_buffer_restyled.loc_3fb0-switch_table_14740, quotearg_buffer_restyled.loc_4005-switch_table_14740, quotearg_buffer_restyled.loc_404a-switch_table_14740
0000000000014760         dd         3 dup (quotearg_buffer_restyled.loc_4084-switch_table_14740)
000000000001476c         db  0x94 ; '.'                                         ; DATA XREF=quotearg_buffer_restyled+477
000000000001476d         db  0xef ; '.'
000000000001476e         db  0xfe ; '.'
000000000001476f         db  0xff ; '.'
0000000000014770         db  0x7c ; '|'
0000000000014771         db  0xf0 ; '.'
0000000000014772         db  0xfe ; '.'
0000000000014773         db  0xff ; '.'
0000000000014774         db  0x7c ; '|'
0000000000014775         db  0xf0 ; '.'
0000000000014776         db  0xfe ; '.'
0000000000014777         db  0xff ; '.'
0000000000014778         db  0x7c ; '|'
0000000000014779         db  0xf0 ; '.'
000000000001477a         db  0xfe ; '.'
000000000001477b         db  0xff ; '.'
000000000001477c         db  0x7c ; '|'
000000000001477d         db  0xf0 ; '.'
000000000001477e         db  0xfe ; '.'
000000000001477f         db  0xff ; '.'
0000000000014780         db  0x7c ; '|'
0000000000014781         db  0xf0 ; '.'
0000000000014782         db  0xfe ; '.'
0000000000014783         db  0xff ; '.'
0000000000014784         db  0x7c ; '|'
0000000000014785         db  0xf0 ; '.'
0000000000014786         db  0xfe ; '.'
0000000000014787         db  0xff ; '.'
0000000000014788         db  0xd4 ; '.'
0000000000014789         db  0xef ; '.'
000000000001478a         db  0xfe ; '.'
000000000001478b         db  0xff ; '.'
000000000001478c         db  0xdc ; '.'
000000000001478d         db  0xee ; '.'
000000000001478e         db  0xfe ; '.'
000000000001478f         db  0xff ; '.'
0000000000014790         db  0x9c ; '.'
0000000000014791         db  0xee ; '.'
0000000000014792         db  0xfe ; '.'
0000000000014793         db  0xff ; '.'
0000000000014794         db  0x64 ; 'd'
0000000000014795         db  0xf0 ; '.'
0000000000014796         db  0xfe ; '.'
0000000000014797         db  0xff ; '.'
0000000000014798         db  0x54 ; 'T'
0000000000014799         db  0xf0 ; '.'
000000000001479a         db  0xfe ; '.'
000000000001479b         db  0xff ; '.'
000000000001479c         db  0x44 ; 'D'
000000000001479d         db  0xf0 ; '.'
000000000001479e         db  0xfe ; '.'
000000000001479f         db  0xff ; '.'
00000000000147a0         db  0x34 ; '4'
00000000000147a1         db  0xf0 ; '.'
00000000000147a2         db  0xfe ; '.'
00000000000147a3         db  0xff ; '.'
00000000000147a4         db  0x7c ; '|'
00000000000147a5         db  0xf0 ; '.'
00000000000147a6         db  0xfe ; '.'
00000000000147a7         db  0xff ; '.'
00000000000147a8         db  0x7c ; '|'
00000000000147a9         db  0xf0 ; '.'
00000000000147aa         db  0xfe ; '.'
00000000000147ab         db  0xff ; '.'
00000000000147ac         db  0x7c ; '|'
00000000000147ad         db  0xf0 ; '.'
00000000000147ae         db  0xfe ; '.'
00000000000147af         db  0xff ; '.'
00000000000147b0         db  0x7c ; '|'
00000000000147b1         db  0xf0 ; '.'
00000000000147b2         db  0xfe ; '.'
00000000000147b3         db  0xff ; '.'
00000000000147b4         db  0x7c ; '|'
00000000000147b5         db  0xf0 ; '.'
00000000000147b6         db  0xfe ; '.'
00000000000147b7         db  0xff ; '.'
00000000000147b8         db  0x7c ; '|'
00000000000147b9         db  0xf0 ; '.'
00000000000147ba         db  0xfe ; '.'
00000000000147bb         db  0xff ; '.'
00000000000147bc         db  0x7c ; '|'
00000000000147bd         db  0xf0 ; '.'
00000000000147be         db  0xfe ; '.'
00000000000147bf         db  0xff ; '.'
00000000000147c0         db  0x7c ; '|'
00000000000147c1         db  0xf0 ; '.'
00000000000147c2         db  0xfe ; '.'
00000000000147c3         db  0xff ; '.'
00000000000147c4         db  0x7c ; '|'
00000000000147c5         db  0xf0 ; '.'
00000000000147c6         db  0xfe ; '.'
00000000000147c7         db  0xff ; '.'
00000000000147c8         db  0x7c ; '|'
00000000000147c9         db  0xf0 ; '.'
00000000000147ca         db  0xfe ; '.'
00000000000147cb         db  0xff ; '.'
00000000000147cc         db  0x7c ; '|'
00000000000147cd         db  0xf0 ; '.'
00000000000147ce         db  0xfe ; '.'
00000000000147cf         db  0xff ; '.'
00000000000147d0         db  0x7c ; '|'
00000000000147d1         db  0xf0 ; '.'
00000000000147d2         db  0xfe ; '.'
00000000000147d3         db  0xff ; '.'
00000000000147d4         db  0x7c ; '|'
00000000000147d5         db  0xf0 ; '.'
00000000000147d6         db  0xfe ; '.'
00000000000147d7         db  0xff ; '.'
00000000000147d8         db  0x7c ; '|'
00000000000147d9         db  0xf0 ; '.'
00000000000147da         db  0xfe ; '.'
00000000000147db         db  0xff ; '.'
00000000000147dc         db  0x7c ; '|'
00000000000147dd         db  0xf0 ; '.'
00000000000147de         db  0xfe ; '.'
00000000000147df         db  0xff ; '.'
00000000000147e0         db  0x7c ; '|'
00000000000147e1         db  0xf0 ; '.'
00000000000147e2         db  0xfe ; '.'
00000000000147e3         db  0xff ; '.'
00000000000147e4         db  0x7c ; '|'
00000000000147e5         db  0xf0 ; '.'
00000000000147e6         db  0xfe ; '.'
00000000000147e7         db  0xff ; '.'
00000000000147e8         db  0x7c ; '|'
00000000000147e9         db  0xf0 ; '.'
00000000000147ea         db  0xfe ; '.'
00000000000147eb         db  0xff ; '.'
00000000000147ec         db  0x24 ; '$'
00000000000147ed         db  0xf0 ; '.'
00000000000147ee         db  0xfe ; '.'
00000000000147ef         db  0xff ; '.'
00000000000147f0         db  0x14 ; '.'
00000000000147f1         db  0xf0 ; '.'
00000000000147f2         db  0xfe ; '.'
00000000000147f3         db  0xff ; '.'
00000000000147f4         db  0x14 ; '.'
00000000000147f5         db  0xf0 ; '.'
00000000000147f6         db  0xfe ; '.'
00000000000147f7         db  0xff ; '.'
00000000000147f8         db  0xe4 ; '.'
00000000000147f9         db  0xef ; '.'
00000000000147fa         db  0xfe ; '.'
00000000000147fb         db  0xff ; '.'
00000000000147fc         db  0x14 ; '.'
00000000000147fd         db  0xf0 ; '.'
00000000000147fe         db  0xfe ; '.'
00000000000147ff         db  0xff ; '.'
0000000000014800         db  0xbc ; '.'
0000000000014801         db  0xef ; '.'
0000000000014802         db  0xfe ; '.'
0000000000014803         db  0xff ; '.'
0000000000014804         db  0x14 ; '.'
0000000000014805         db  0xf0 ; '.'
0000000000014806         db  0xfe ; '.'
0000000000014807         db  0xff ; '.'
0000000000014808         db  0x77 ; 'w'
0000000000014809         db  0xee ; '.'
000000000001480a         db  0xfe ; '.'
000000000001480b         db  0xff ; '.'
000000000001480c         db  0x14 ; '.'
000000000001480d         db  0xf0 ; '.'
000000000001480e         db  0xfe ; '.'
000000000001480f         db  0xff ; '.'
0000000000014810         db  0x14 ; '.'
0000000000014811         db  0xf0 ; '.'
0000000000014812         db  0xfe ; '.'
0000000000014813         db  0xff ; '.'
0000000000014814         db  0x14 ; '.'
0000000000014815         db  0xf0 ; '.'
0000000000014816         db  0xfe ; '.'
0000000000014817         db  0xff ; '.'
0000000000014818         db  0xbc ; '.'
0000000000014819         db  0xef ; '.'
000000000001481a         db  0xfe ; '.'
000000000001481b         db  0xff ; '.'
000000000001481c         db  0xbc ; '.'
000000000001481d         db  0xef ; '.'
000000000001481e         db  0xfe ; '.'
000000000001481f         db  0xff ; '.'
0000000000014820         db  0xbc ; '.'
0000000000014821         db  0xef ; '.'
0000000000014822         db  0xfe ; '.'
0000000000014823         db  0xff ; '.'
0000000000014824         db  0xbc ; '.'
0000000000014825         db  0xef ; '.'
0000000000014826         db  0xfe ; '.'
0000000000014827         db  0xff ; '.'
0000000000014828         db  0xbc ; '.'
0000000000014829         db  0xef ; '.'
000000000001482a         db  0xfe ; '.'
000000000001482b         db  0xff ; '.'
000000000001482c         db  0xbc ; '.'
000000000001482d         db  0xef ; '.'
000000000001482e         db  0xfe ; '.'
000000000001482f         db  0xff ; '.'
0000000000014830         db  0xbc ; '.'
0000000000014831         db  0xef ; '.'
0000000000014832         db  0xfe ; '.'
0000000000014833         db  0xff ; '.'
0000000000014834         db  0xbc ; '.'
0000000000014835         db  0xef ; '.'
0000000000014836         db  0xfe ; '.'
0000000000014837         db  0xff ; '.'
0000000000014838         db  0xbc ; '.'
0000000000014839         db  0xef ; '.'
000000000001483a         db  0xfe ; '.'
000000000001483b         db  0xff ; '.'
000000000001483c         db  0xbc ; '.'
000000000001483d         db  0xef ; '.'
000000000001483e         db  0xfe ; '.'
000000000001483f         db  0xff ; '.'
0000000000014840         db  0xbc ; '.'
0000000000014841         db  0xef ; '.'
0000000000014842         db  0xfe ; '.'
0000000000014843         db  0xff ; '.'
0000000000014844         db  0xbc ; '.'
0000000000014845         db  0xef ; '.'
0000000000014846         db  0xfe ; '.'
0000000000014847         db  0xff ; '.'
0000000000014848         db  0xbc ; '.'
0000000000014849         db  0xef ; '.'
000000000001484a         db  0xfe ; '.'
000000000001484b         db  0xff ; '.'
000000000001484c         db  0xbc ; '.'
000000000001484d         db  0xef ; '.'
000000000001484e         db  0xfe ; '.'
000000000001484f         db  0xff ; '.'
0000000000014850         db  0xbc ; '.'
0000000000014851         db  0xef ; '.'
0000000000014852         db  0xfe ; '.'
0000000000014853         db  0xff ; '.'
0000000000014854         db  0xbc ; '.'
0000000000014855         db  0xef ; '.'
0000000000014856         db  0xfe ; '.'
0000000000014857         db  0xff ; '.'
0000000000014858         db  0x14 ; '.'
0000000000014859         db  0xf0 ; '.'
000000000001485a         db  0xfe ; '.'
000000000001485b         db  0xff ; '.'
000000000001485c         db  0x14 ; '.'
000000000001485d         db  0xf0 ; '.'
000000000001485e         db  0xfe ; '.'
000000000001485f         db  0xff ; '.'
0000000000014860         db  0x14 ; '.'
0000000000014861         db  0xf0 ; '.'
0000000000014862         db  0xfe ; '.'
0000000000014863         db  0xff ; '.'
0000000000014864         db  0x14 ; '.'
0000000000014865         db  0xf0 ; '.'
0000000000014866         db  0xfe ; '.'
0000000000014867         db  0xff ; '.'
0000000000014868         db  0x47 ; 'G'
0000000000014869         db  0xee ; '.'
000000000001486a         db  0xfe ; '.'
000000000001486b         db  0xff ; '.'
000000000001486c         db  0x7c ; '|'
000000000001486d         db  0xf0 ; '.'
000000000001486e         db  0xfe ; '.'
000000000001486f         db  0xff ; '.'
0000000000014870         db  0xbc ; '.'
0000000000014871         db  0xef ; '.'
0000000000014872         db  0xfe ; '.'
0000000000014873         db  0xff ; '.'
0000000000014874         db  0xbc ; '.'
0000000000014875         db  0xef ; '.'
0000000000014876         db  0xfe ; '.'
0000000000014877         db  0xff ; '.'
0000000000014878         db  0xbc ; '.'
0000000000014879         db  0xef ; '.'
000000000001487a         db  0xfe ; '.'
000000000001487b         db  0xff ; '.'
000000000001487c         db  0xbc ; '.'
000000000001487d         db  0xef ; '.'
000000000001487e         db  0xfe ; '.'
000000000001487f         db  0xff ; '.'
0000000000014880         db  0xbc ; '.'
0000000000014881         db  0xef ; '.'
0000000000014882         db  0xfe ; '.'
0000000000014883         db  0xff ; '.'
0000000000014884         db  0xbc ; '.'
0000000000014885         db  0xef ; '.'
0000000000014886         db  0xfe ; '.'
0000000000014887         db  0xff ; '.'
0000000000014888         db  0xbc ; '.'
0000000000014889         db  0xef ; '.'
000000000001488a         db  0xfe ; '.'
000000000001488b         db  0xff ; '.'
000000000001488c         db  0xbc ; '.'
000000000001488d         db  0xef ; '.'
000000000001488e         db  0xfe ; '.'
000000000001488f         db  0xff ; '.'
0000000000014890         db  0xbc ; '.'
0000000000014891         db  0xef ; '.'
0000000000014892         db  0xfe ; '.'
0000000000014893         db  0xff ; '.'
0000000000014894         db  0xbc ; '.'
0000000000014895         db  0xef ; '.'
0000000000014896         db  0xfe ; '.'
0000000000014897         db  0xff ; '.'
0000000000014898         db  0xbc ; '.'
0000000000014899         db  0xef ; '.'
000000000001489a         db  0xfe ; '.'
000000000001489b         db  0xff ; '.'
000000000001489c         db  0xbc ; '.'
000000000001489d         db  0xef ; '.'
000000000001489e         db  0xfe ; '.'
000000000001489f         db  0xff ; '.'
00000000000148a0         db  0xbc ; '.'
00000000000148a1         db  0xef ; '.'
00000000000148a2         db  0xfe ; '.'
00000000000148a3         db  0xff ; '.'
00000000000148a4         db  0xbc ; '.'
00000000000148a5         db  0xef ; '.'
00000000000148a6         db  0xfe ; '.'
00000000000148a7         db  0xff ; '.'
00000000000148a8         db  0xbc ; '.'
00000000000148a9         db  0xef ; '.'
00000000000148aa         db  0xfe ; '.'
00000000000148ab         db  0xff ; '.'
00000000000148ac         db  0xbc ; '.'
00000000000148ad         db  0xef ; '.'
00000000000148ae         db  0xfe ; '.'
00000000000148af         db  0xff ; '.'
00000000000148b0         db  0xbc ; '.'
00000000000148b1         db  0xef ; '.'
00000000000148b2         db  0xfe ; '.'
00000000000148b3         db  0xff ; '.'
00000000000148b4         db  0xbc ; '.'
00000000000148b5         db  0xef ; '.'
00000000000148b6         db  0xfe ; '.'
00000000000148b7         db  0xff ; '.'
00000000000148b8         db  0xbc ; '.'
00000000000148b9         db  0xef ; '.'
00000000000148ba         db  0xfe ; '.'
00000000000148bb         db  0xff ; '.'
00000000000148bc         db  0xbc ; '.'
00000000000148bd         db  0xef ; '.'
00000000000148be         db  0xfe ; '.'
00000000000148bf         db  0xff ; '.'
00000000000148c0         db  0xbc ; '.'
00000000000148c1         db  0xef ; '.'
00000000000148c2         db  0xfe ; '.'
00000000000148c3         db  0xff ; '.'
00000000000148c4         db  0xbc ; '.'
00000000000148c5         db  0xef ; '.'
00000000000148c6         db  0xfe ; '.'
00000000000148c7         db  0xff ; '.'
00000000000148c8         db  0xbc ; '.'
00000000000148c9         db  0xef ; '.'
00000000000148ca         db  0xfe ; '.'
00000000000148cb         db  0xff ; '.'
00000000000148cc         db  0xbc ; '.'
00000000000148cd         db  0xef ; '.'
00000000000148ce         db  0xfe ; '.'
00000000000148cf         db  0xff ; '.'
00000000000148d0         db  0xbc ; '.'
00000000000148d1         db  0xef ; '.'
00000000000148d2         db  0xfe ; '.'
00000000000148d3         db  0xff ; '.'
00000000000148d4         db  0xbc ; '.'
00000000000148d5         db  0xef ; '.'
00000000000148d6         db  0xfe ; '.'
00000000000148d7         db  0xff ; '.'
00000000000148d8         db  0x14 ; '.'
00000000000148d9         db  0xf0 ; '.'
00000000000148da         db  0xfe ; '.'
00000000000148db         db  0xff ; '.'
00000000000148dc         db  0xec ; '.'
00000000000148dd         db  0xee ; '.'
00000000000148de         db  0xfe ; '.'
00000000000148df         db  0xff ; '.'
00000000000148e0         db  0xbc ; '.'
00000000000148e1         db  0xef ; '.'
00000000000148e2         db  0xfe ; '.'
00000000000148e3         db  0xff ; '.'
00000000000148e4         db  0x14 ; '.'
00000000000148e5         db  0xf0 ; '.'
00000000000148e6         db  0xfe ; '.'
00000000000148e7         db  0xff ; '.'
00000000000148e8         db  0xbc ; '.'
00000000000148e9         db  0xef ; '.'
00000000000148ea         db  0xfe ; '.'
00000000000148eb         db  0xff ; '.'
00000000000148ec         db  0x14 ; '.'
00000000000148ed         db  0xf0 ; '.'
00000000000148ee         db  0xfe ; '.'
00000000000148ef         db  0xff ; '.'
00000000000148f0         db  0xbc ; '.'
00000000000148f1         db  0xef ; '.'
00000000000148f2         db  0xfe ; '.'
00000000000148f3         db  0xff ; '.'
00000000000148f4         db  0xbc ; '.'
00000000000148f5         db  0xef ; '.'
00000000000148f6         db  0xfe ; '.'
00000000000148f7         db  0xff ; '.'
00000000000148f8         db  0xbc ; '.'
00000000000148f9         db  0xef ; '.'
00000000000148fa         db  0xfe ; '.'
00000000000148fb         db  0xff ; '.'
00000000000148fc         db  0xbc ; '.'
00000000000148fd         db  0xef ; '.'
00000000000148fe         db  0xfe ; '.'
00000000000148ff         db  0xff ; '.'
0000000000014900         db  0xbc ; '.'
0000000000014901         db  0xef ; '.'
0000000000014902         db  0xfe ; '.'
0000000000014903         db  0xff ; '.'
0000000000014904         db  0xbc ; '.'
0000000000014905         db  0xef ; '.'
0000000000014906         db  0xfe ; '.'
0000000000014907         db  0xff ; '.'
0000000000014908         db  0xbc ; '.'
0000000000014909         db  0xef ; '.'
000000000001490a         db  0xfe ; '.'
000000000001490b         db  0xff ; '.'
000000000001490c         db  0xbc ; '.'
000000000001490d         db  0xef ; '.'
000000000001490e         db  0xfe ; '.'
000000000001490f         db  0xff ; '.'
0000000000014910         db  0xbc ; '.'
0000000000014911         db  0xef ; '.'
0000000000014912         db  0xfe ; '.'
0000000000014913         db  0xff ; '.'
0000000000014914         db  0xbc ; '.'
0000000000014915         db  0xef ; '.'
0000000000014916         db  0xfe ; '.'
0000000000014917         db  0xff ; '.'
0000000000014918         db  0xbc ; '.'
0000000000014919         db  0xef ; '.'
000000000001491a         db  0xfe ; '.'
000000000001491b         db  0xff ; '.'
000000000001491c         db  0xbc ; '.'
000000000001491d         db  0xef ; '.'
000000000001491e         db  0xfe ; '.'
000000000001491f         db  0xff ; '.'
0000000000014920         db  0xbc ; '.'
0000000000014921         db  0xef ; '.'
0000000000014922         db  0xfe ; '.'
0000000000014923         db  0xff ; '.'
0000000000014924         db  0xbc ; '.'
0000000000014925         db  0xef ; '.'
0000000000014926         db  0xfe ; '.'
0000000000014927         db  0xff ; '.'
0000000000014928         db  0xbc ; '.'
0000000000014929         db  0xef ; '.'
000000000001492a         db  0xfe ; '.'
000000000001492b         db  0xff ; '.'
000000000001492c         db  0xbc ; '.'
000000000001492d         db  0xef ; '.'
000000000001492e         db  0xfe ; '.'
000000000001492f         db  0xff ; '.'
0000000000014930         db  0xbc ; '.'
0000000000014931         db  0xef ; '.'
0000000000014932         db  0xfe ; '.'
0000000000014933         db  0xff ; '.'
0000000000014934         db  0xbc ; '.'
0000000000014935         db  0xef ; '.'
0000000000014936         db  0xfe ; '.'
0000000000014937         db  0xff ; '.'
0000000000014938         db  0xbc ; '.'
0000000000014939         db  0xef ; '.'
000000000001493a         db  0xfe ; '.'
000000000001493b         db  0xff ; '.'
000000000001493c         db  0xbc ; '.'
000000000001493d         db  0xef ; '.'
000000000001493e         db  0xfe ; '.'
000000000001493f         db  0xff ; '.'
0000000000014940         db  0xbc ; '.'
0000000000014941         db  0xef ; '.'
0000000000014942         db  0xfe ; '.'
0000000000014943         db  0xff ; '.'
0000000000014944         db  0xbc ; '.'
0000000000014945         db  0xef ; '.'
0000000000014946         db  0xfe ; '.'
0000000000014947         db  0xff ; '.'
0000000000014948         db  0xbc ; '.'
0000000000014949         db  0xef ; '.'
000000000001494a         db  0xfe ; '.'
000000000001494b         db  0xff ; '.'
000000000001494c         db  0xbc ; '.'
000000000001494d         db  0xef ; '.'
000000000001494e         db  0xfe ; '.'
000000000001494f         db  0xff ; '.'
0000000000014950         db  0xbc ; '.'
0000000000014951         db  0xef ; '.'
0000000000014952         db  0xfe ; '.'
0000000000014953         db  0xff ; '.'
0000000000014954         db  0xbc ; '.'
0000000000014955         db  0xef ; '.'
0000000000014956         db  0xfe ; '.'
0000000000014957         db  0xff ; '.'
0000000000014958         db  0x77 ; 'w'
0000000000014959         db  0xed ; '.'
000000000001495a         db  0xfe ; '.'
000000000001495b         db  0xff ; '.'
000000000001495c         db  0x14 ; '.'
000000000001495d         db  0xf0 ; '.'
000000000001495e         db  0xfe ; '.'
000000000001495f         db  0xff ; '.'
0000000000014960         db  0x77 ; 'w'
0000000000014961         db  0xed ; '.'
0000000000014962         db  0xfe ; '.'
0000000000014963         db  0xff ; '.'
0000000000014964         db  0xe4 ; '.'
0000000000014965         db  0xef ; '.'
0000000000014966         db  0xfe ; '.'
0000000000014967         db  0xff ; '.'
0000000000014968         db  0x68 ; 'h'                                         ; DATA XREF=sub_37d0+137
0000000000014969         db  0xef ; '.'
000000000001496a         db  0xfe ; '.'
000000000001496b         db  0xff ; '.'
000000000001496c         db  0x78 ; 'x'
000000000001496d         db  0xee ; '.'
000000000001496e         db  0xfe ; '.'
000000000001496f         db  0xff ; '.'
0000000000014970         db  0x78 ; 'x'
0000000000014971         db  0xee ; '.'
0000000000014972         db  0xfe ; '.'
0000000000014973         db  0xff ; '.'
0000000000014974         db  0x78 ; 'x'
0000000000014975         db  0xee ; '.'
0000000000014976         db  0xfe ; '.'
0000000000014977         db  0xff ; '.'
0000000000014978         db  0x78 ; 'x'
0000000000014979         db  0xee ; '.'
000000000001497a         db  0xfe ; '.'
000000000001497b         db  0xff ; '.'
000000000001497c         db  0x78 ; 'x'
000000000001497d         db  0xee ; '.'
000000000001497e         db  0xfe ; '.'
000000000001497f         db  0xff ; '.'
0000000000014980         db  0x78 ; 'x'
0000000000014981         db  0xee ; '.'
0000000000014982         db  0xfe ; '.'
0000000000014983         db  0xff ; '.'
0000000000014984         db  0x58 ; 'X'
0000000000014985         db  0xef ; '.'
0000000000014986         db  0xfe ; '.'
0000000000014987         db  0xff ; '.'
0000000000014988         db  0xa8 ; '.'
0000000000014989         db  0xf0 ; '.'
000000000001498a         db  0xfe ; '.'
000000000001498b         db  0xff ; '.'
000000000001498c         db  0x90 ; '.'
000000000001498d         db  0xf0 ; '.'
000000000001498e         db  0xfe ; '.'
000000000001498f         db  0xff ; '.'
0000000000014990         db  0x40 ; '@'
0000000000014991         db  0xef ; '.'
0000000000014992         db  0xfe ; '.'
0000000000014993         db  0xff ; '.'
0000000000014994         db  0x80 ; '.'
0000000000014995         db  0xf0 ; '.'
0000000000014996         db  0xfe ; '.'
0000000000014997         db  0xff ; '.'
0000000000014998         db  0x28 ; '('
0000000000014999         db  0xef ; '.'
000000000001499a         db  0xfe ; '.'
000000000001499b         db  0xff ; '.'
000000000001499c         db  0x68 ; 'h'
000000000001499d         db  0xf0 ; '.'
000000000001499e         db  0xfe ; '.'
000000000001499f         db  0xff ; '.'
00000000000149a0         db  0x78 ; 'x'
00000000000149a1         db  0xee ; '.'
00000000000149a2         db  0xfe ; '.'
00000000000149a3         db  0xff ; '.'
00000000000149a4         db  0x78 ; 'x'
00000000000149a5         db  0xee ; '.'
00000000000149a6         db  0xfe ; '.'
00000000000149a7         db  0xff ; '.'
00000000000149a8         db  0x78 ; 'x'
00000000000149a9         db  0xee ; '.'
00000000000149aa         db  0xfe ; '.'
00000000000149ab         db  0xff ; '.'
00000000000149ac         db  0x78 ; 'x'
00000000000149ad         db  0xee ; '.'
00000000000149ae         db  0xfe ; '.'
00000000000149af         db  0xff ; '.'
00000000000149b0         db  0x78 ; 'x'
00000000000149b1         db  0xee ; '.'
00000000000149b2         db  0xfe ; '.'
00000000000149b3         db  0xff ; '.'
00000000000149b4         db  0x78 ; 'x'
00000000000149b5         db  0xee ; '.'
00000000000149b6         db  0xfe ; '.'
00000000000149b7         db  0xff ; '.'
00000000000149b8         db  0x78 ; 'x'
00000000000149b9         db  0xee ; '.'
00000000000149ba         db  0xfe ; '.'
00000000000149bb         db  0xff ; '.'
00000000000149bc         db  0x78 ; 'x'
00000000000149bd         db  0xee ; '.'
00000000000149be         db  0xfe ; '.'
00000000000149bf         db  0xff ; '.'
00000000000149c0         db  0x78 ; 'x'
00000000000149c1         db  0xee ; '.'
00000000000149c2         db  0xfe ; '.'
00000000000149c3         db  0xff ; '.'
00000000000149c4         db  0x78 ; 'x'
00000000000149c5         db  0xee ; '.'
00000000000149c6         db  0xfe ; '.'
00000000000149c7         db  0xff ; '.'
00000000000149c8         db  0x78 ; 'x'
00000000000149c9         db  0xee ; '.'
00000000000149ca         db  0xfe ; '.'
00000000000149cb         db  0xff ; '.'
00000000000149cc         db  0x78 ; 'x'
00000000000149cd         db  0xee ; '.'
00000000000149ce         db  0xfe ; '.'
00000000000149cf         db  0xff ; '.'
00000000000149d0         db  0x78 ; 'x'
00000000000149d1         db  0xee ; '.'
00000000000149d2         db  0xfe ; '.'
00000000000149d3         db  0xff ; '.'
00000000000149d4         db  0x78 ; 'x'
00000000000149d5         db  0xee ; '.'
00000000000149d6         db  0xfe ; '.'
00000000000149d7         db  0xff ; '.'
00000000000149d8         db  0x78 ; 'x'
00000000000149d9         db  0xee ; '.'
00000000000149da         db  0xfe ; '.'
00000000000149db         db  0xff ; '.'
00000000000149dc         db  0x78 ; 'x'
00000000000149dd         db  0xee ; '.'
00000000000149de         db  0xfe ; '.'
00000000000149df         db  0xff ; '.'
00000000000149e0         db  0x78 ; 'x'
00000000000149e1         db  0xee ; '.'
00000000000149e2         db  0xfe ; '.'
00000000000149e3         db  0xff ; '.'
00000000000149e4         db  0x78 ; 'x'
00000000000149e5         db  0xee ; '.'
00000000000149e6         db  0xfe ; '.'
00000000000149e7         db  0xff ; '.'
00000000000149e8         db  0x50 ; 'P'
00000000000149e9         db  0xf0 ; '.'
00000000000149ea         db  0xfe ; '.'
00000000000149eb         db  0xff ; '.'
00000000000149ec         db  0x38 ; '8'
00000000000149ed         db  0xf0 ; '.'
00000000000149ee         db  0xfe ; '.'
00000000000149ef         db  0xff ; '.'
00000000000149f0         db  0x38 ; '8'
00000000000149f1         db  0xf0 ; '.'
00000000000149f2         db  0xfe ; '.'
00000000000149f3         db  0xff ; '.'
00000000000149f4         db  0x20 ; ' '
00000000000149f5         db  0xf0 ; '.'
00000000000149f6         db  0xfe ; '.'
00000000000149f7         db  0xff ; '.'
00000000000149f8         db  0x38 ; '8'
00000000000149f9         db  0xf0 ; '.'
00000000000149fa         db  0xfe ; '.'
00000000000149fb         db  0xff ; '.'
00000000000149fc         db  0x08 ; '.'
00000000000149fd         db  0xf0 ; '.'
00000000000149fe         db  0xfe ; '.'
00000000000149ff         db  0xff ; '.'
0000000000014a00         db  0x38 ; '8'
0000000000014a01         db  0xf0 ; '.'
0000000000014a02         db  0xfe ; '.'
0000000000014a03         db  0xff ; '.'
0000000000014a04         db  0x78 ; 'x'
0000000000014a05         db  0xec ; '.'
0000000000014a06         db  0xfe ; '.'
0000000000014a07         db  0xff ; '.'
0000000000014a08         db  0x38 ; '8'
0000000000014a09         db  0xf0 ; '.'
0000000000014a0a         db  0xfe ; '.'
0000000000014a0b         db  0xff ; '.'
0000000000014a0c         db  0x38 ; '8'
0000000000014a0d         db  0xf0 ; '.'
0000000000014a0e         db  0xfe ; '.'
0000000000014a0f         db  0xff ; '.'
0000000000014a10         db  0x38 ; '8'
0000000000014a11         db  0xf0 ; '.'
0000000000014a12         db  0xfe ; '.'
0000000000014a13         db  0xff ; '.'
0000000000014a14         db  0x08 ; '.'
0000000000014a15         db  0xf0 ; '.'
0000000000014a16         db  0xfe ; '.'
0000000000014a17         db  0xff ; '.'
0000000000014a18         db  0x08 ; '.'
0000000000014a19         db  0xf0 ; '.'
0000000000014a1a         db  0xfe ; '.'
0000000000014a1b         db  0xff ; '.'
0000000000014a1c         db  0x08 ; '.'
0000000000014a1d         db  0xf0 ; '.'
0000000000014a1e         db  0xfe ; '.'
0000000000014a1f         db  0xff ; '.'
0000000000014a20         db  0x08 ; '.'
0000000000014a21         db  0xf0 ; '.'
0000000000014a22         db  0xfe ; '.'
0000000000014a23         db  0xff ; '.'
0000000000014a24         db  0x08 ; '.'
0000000000014a25         db  0xf0 ; '.'
0000000000014a26         db  0xfe ; '.'
0000000000014a27         db  0xff ; '.'
0000000000014a28         db  0x08 ; '.'
0000000000014a29         db  0xf0 ; '.'
0000000000014a2a         db  0xfe ; '.'
0000000000014a2b         db  0xff ; '.'
0000000000014a2c         db  0x08 ; '.'
0000000000014a2d         db  0xf0 ; '.'
0000000000014a2e         db  0xfe ; '.'
0000000000014a2f         db  0xff ; '.'
0000000000014a30         db  0x08 ; '.'
0000000000014a31         db  0xf0 ; '.'
0000000000014a32         db  0xfe ; '.'
0000000000014a33         db  0xff ; '.'
0000000000014a34         db  0x08 ; '.'
0000000000014a35         db  0xf0 ; '.'
0000000000014a36         db  0xfe ; '.'
0000000000014a37         db  0xff ; '.'
0000000000014a38         db  0x08 ; '.'
0000000000014a39         db  0xf0 ; '.'
0000000000014a3a         db  0xfe ; '.'
0000000000014a3b         db  0xff ; '.'
0000000000014a3c         db  0x08 ; '.'
0000000000014a3d         db  0xf0 ; '.'
0000000000014a3e         db  0xfe ; '.'
0000000000014a3f         db  0xff ; '.'
0000000000014a40         db  0x08 ; '.'
0000000000014a41         db  0xf0 ; '.'
0000000000014a42         db  0xfe ; '.'
0000000000014a43         db  0xff ; '.'
0000000000014a44         db  0x08 ; '.'
0000000000014a45         db  0xf0 ; '.'
0000000000014a46         db  0xfe ; '.'
0000000000014a47         db  0xff ; '.'
0000000000014a48         db  0x08 ; '.'
0000000000014a49         db  0xf0 ; '.'
0000000000014a4a         db  0xfe ; '.'
0000000000014a4b         db  0xff ; '.'
0000000000014a4c         db  0x08 ; '.'
0000000000014a4d         db  0xf0 ; '.'
0000000000014a4e         db  0xfe ; '.'
0000000000014a4f         db  0xff ; '.'
0000000000014a50         db  0x08 ; '.'
0000000000014a51         db  0xf0 ; '.'
0000000000014a52         db  0xfe ; '.'
0000000000014a53         db  0xff ; '.'
0000000000014a54         db  0x38 ; '8'
0000000000014a55         db  0xf0 ; '.'
0000000000014a56         db  0xfe ; '.'
0000000000014a57         db  0xff ; '.'
0000000000014a58         db  0x38 ; '8'
0000000000014a59         db  0xf0 ; '.'
0000000000014a5a         db  0xfe ; '.'
0000000000014a5b         db  0xff ; '.'
0000000000014a5c         db  0x38 ; '8'
0000000000014a5d         db  0xf0 ; '.'
0000000000014a5e         db  0xfe ; '.'
0000000000014a5f         db  0xff ; '.'
0000000000014a60         db  0x38 ; '8'
0000000000014a61         db  0xf0 ; '.'
0000000000014a62         db  0xfe ; '.'
0000000000014a63         db  0xff ; '.'
0000000000014a64         db  0x48 ; 'H'
0000000000014a65         db  0xec ; '.'
0000000000014a66         db  0xfe ; '.'
0000000000014a67         db  0xff ; '.'
0000000000014a68         db  0x78 ; 'x'
0000000000014a69         db  0xee ; '.'
0000000000014a6a         db  0xfe ; '.'
0000000000014a6b         db  0xff ; '.'
0000000000014a6c         db  0x08 ; '.'
0000000000014a6d         db  0xf0 ; '.'
0000000000014a6e         db  0xfe ; '.'
0000000000014a6f         db  0xff ; '.'
0000000000014a70         db  0x08 ; '.'
0000000000014a71         db  0xf0 ; '.'
0000000000014a72         db  0xfe ; '.'
0000000000014a73         db  0xff ; '.'
0000000000014a74         db  0x08 ; '.'
0000000000014a75         db  0xf0 ; '.'
0000000000014a76         db  0xfe ; '.'
0000000000014a77         db  0xff ; '.'
0000000000014a78         db  0x08 ; '.'
0000000000014a79         db  0xf0 ; '.'
0000000000014a7a         db  0xfe ; '.'
0000000000014a7b         db  0xff ; '.'
0000000000014a7c         db  0x08 ; '.'
0000000000014a7d         db  0xf0 ; '.'
0000000000014a7e         db  0xfe ; '.'
0000000000014a7f         db  0xff ; '.'
0000000000014a80         db  0x08 ; '.'
0000000000014a81         db  0xf0 ; '.'
0000000000014a82         db  0xfe ; '.'
0000000000014a83         db  0xff ; '.'
0000000000014a84         db  0x08 ; '.'
0000000000014a85         db  0xf0 ; '.'
0000000000014a86         db  0xfe ; '.'
0000000000014a87         db  0xff ; '.'
0000000000014a88         db  0x08 ; '.'
0000000000014a89         db  0xf0 ; '.'
0000000000014a8a         db  0xfe ; '.'
0000000000014a8b         db  0xff ; '.'
0000000000014a8c         db  0x08 ; '.'
0000000000014a8d         db  0xf0 ; '.'
0000000000014a8e         db  0xfe ; '.'
0000000000014a8f         db  0xff ; '.'
0000000000014a90         db  0x08 ; '.'
0000000000014a91         db  0xf0 ; '.'
0000000000014a92         db  0xfe ; '.'
0000000000014a93         db  0xff ; '.'
0000000000014a94         db  0x08 ; '.'
0000000000014a95         db  0xf0 ; '.'
0000000000014a96         db  0xfe ; '.'
0000000000014a97         db  0xff ; '.'
0000000000014a98         db  0x08 ; '.'
0000000000014a99         db  0xf0 ; '.'
0000000000014a9a         db  0xfe ; '.'
0000000000014a9b         db  0xff ; '.'
0000000000014a9c         db  0x08 ; '.'
0000000000014a9d         db  0xf0 ; '.'
0000000000014a9e         db  0xfe ; '.'
0000000000014a9f         db  0xff ; '.'
0000000000014aa0         db  0x08 ; '.'
0000000000014aa1         db  0xf0 ; '.'
0000000000014aa2         db  0xfe ; '.'
0000000000014aa3         db  0xff ; '.'
0000000000014aa4         db  0x08 ; '.'
0000000000014aa5         db  0xf0 ; '.'
0000000000014aa6         db  0xfe ; '.'
0000000000014aa7         db  0xff ; '.'
0000000000014aa8         db  0x08 ; '.'
0000000000014aa9         db  0xf0 ; '.'
0000000000014aaa         db  0xfe ; '.'
0000000000014aab         db  0xff ; '.'
0000000000014aac         db  0x08 ; '.'
0000000000014aad         db  0xf0 ; '.'
0000000000014aae         db  0xfe ; '.'
0000000000014aaf         db  0xff ; '.'
0000000000014ab0         db  0x08 ; '.'
0000000000014ab1         db  0xf0 ; '.'
0000000000014ab2         db  0xfe ; '.'
0000000000014ab3         db  0xff ; '.'
0000000000014ab4         db  0x08 ; '.'
0000000000014ab5         db  0xf0 ; '.'
0000000000014ab6         db  0xfe ; '.'
0000000000014ab7         db  0xff ; '.'
0000000000014ab8         db  0x08 ; '.'
0000000000014ab9         db  0xf0 ; '.'
0000000000014aba         db  0xfe ; '.'
0000000000014abb         db  0xff ; '.'
0000000000014abc         db  0x08 ; '.'
0000000000014abd         db  0xf0 ; '.'
0000000000014abe         db  0xfe ; '.'
0000000000014abf         db  0xff ; '.'
0000000000014ac0         db  0x08 ; '.'
0000000000014ac1         db  0xf0 ; '.'
0000000000014ac2         db  0xfe ; '.'
0000000000014ac3         db  0xff ; '.'
0000000000014ac4         db  0x08 ; '.'
0000000000014ac5         db  0xf0 ; '.'
0000000000014ac6         db  0xfe ; '.'
0000000000014ac7         db  0xff ; '.'
0000000000014ac8         db  0x08 ; '.'
0000000000014ac9         db  0xf0 ; '.'
0000000000014aca         db  0xfe ; '.'
0000000000014acb         db  0xff ; '.'
0000000000014acc         db  0x08 ; '.'
0000000000014acd         db  0xf0 ; '.'
0000000000014ace         db  0xfe ; '.'
0000000000014acf         db  0xff ; '.'
0000000000014ad0         db  0x08 ; '.'
0000000000014ad1         db  0xf0 ; '.'
0000000000014ad2         db  0xfe ; '.'
0000000000014ad3         db  0xff ; '.'
0000000000014ad4         db  0x38 ; '8'
0000000000014ad5         db  0xf0 ; '.'
0000000000014ad6         db  0xfe ; '.'
0000000000014ad7         db  0xff ; '.'
0000000000014ad8         db  0x08 ; '.'
0000000000014ad9         db  0xef ; '.'
0000000000014ada         db  0xfe ; '.'
0000000000014adb         db  0xff ; '.'
0000000000014adc         db  0x08 ; '.'
0000000000014add         db  0xf0 ; '.'
0000000000014ade         db  0xfe ; '.'
0000000000014adf         db  0xff ; '.'
0000000000014ae0         db  0x38 ; '8'
0000000000014ae1         db  0xf0 ; '.'
0000000000014ae2         db  0xfe ; '.'
0000000000014ae3         db  0xff ; '.'
0000000000014ae4         db  0x08 ; '.'
0000000000014ae5         db  0xf0 ; '.'
0000000000014ae6         db  0xfe ; '.'
0000000000014ae7         db  0xff ; '.'
0000000000014ae8         db  0x38 ; '8'
0000000000014ae9         db  0xf0 ; '.'
0000000000014aea         db  0xfe ; '.'
0000000000014aeb         db  0xff ; '.'
0000000000014aec         db  0x08 ; '.'
0000000000014aed         db  0xf0 ; '.'
0000000000014aee         db  0xfe ; '.'
0000000000014aef         db  0xff ; '.'
0000000000014af0         db  0x08 ; '.'
0000000000014af1         db  0xf0 ; '.'
0000000000014af2         db  0xfe ; '.'
0000000000014af3         db  0xff ; '.'
0000000000014af4         db  0x08 ; '.'
0000000000014af5         db  0xf0 ; '.'
0000000000014af6         db  0xfe ; '.'
0000000000014af7         db  0xff ; '.'
0000000000014af8         db  0x08 ; '.'
0000000000014af9         db  0xf0 ; '.'
0000000000014afa         db  0xfe ; '.'
0000000000014afb         db  0xff ; '.'
0000000000014afc         db  0x08 ; '.'
0000000000014afd         db  0xf0 ; '.'
0000000000014afe         db  0xfe ; '.'
0000000000014aff         db  0xff ; '.'
0000000000014b00         db  0x08 ; '.'
0000000000014b01         db  0xf0 ; '.'
0000000000014b02         db  0xfe ; '.'
0000000000014b03         db  0xff ; '.'
0000000000014b04         db  0x08 ; '.'
0000000000014b05         db  0xf0 ; '.'
0000000000014b06         db  0xfe ; '.'
0000000000014b07         db  0xff ; '.'
0000000000014b08         db  0x08 ; '.'
0000000000014b09         db  0xf0 ; '.'
0000000000014b0a         db  0xfe ; '.'
0000000000014b0b         db  0xff ; '.'
0000000000014b0c         db  0x08 ; '.'
0000000000014b0d         db  0xf0 ; '.'
0000000000014b0e         db  0xfe ; '.'
0000000000014b0f         db  0xff ; '.'
0000000000014b10         db  0x08 ; '.'
0000000000014b11         db  0xf0 ; '.'
0000000000014b12         db  0xfe ; '.'
0000000000014b13         db  0xff ; '.'
0000000000014b14         db  0x08 ; '.'
0000000000014b15         db  0xf0 ; '.'
0000000000014b16         db  0xfe ; '.'
0000000000014b17         db  0xff ; '.'
0000000000014b18         db  0x08 ; '.'
0000000000014b19         db  0xf0 ; '.'
0000000000014b1a         db  0xfe ; '.'
0000000000014b1b         db  0xff ; '.'
0000000000014b1c         db  0x08 ; '.'
0000000000014b1d         db  0xf0 ; '.'
0000000000014b1e         db  0xfe ; '.'
0000000000014b1f         db  0xff ; '.'
0000000000014b20         db  0x08 ; '.'
0000000000014b21         db  0xf0 ; '.'
0000000000014b22         db  0xfe ; '.'
0000000000014b23         db  0xff ; '.'
0000000000014b24         db  0x08 ; '.'
0000000000014b25         db  0xf0 ; '.'
0000000000014b26         db  0xfe ; '.'
0000000000014b27         db  0xff ; '.'
0000000000014b28         db  0x08 ; '.'
0000000000014b29         db  0xf0 ; '.'
0000000000014b2a         db  0xfe ; '.'
0000000000014b2b         db  0xff ; '.'
0000000000014b2c         db  0x08 ; '.'
0000000000014b2d         db  0xf0 ; '.'
0000000000014b2e         db  0xfe ; '.'
0000000000014b2f         db  0xff ; '.'
0000000000014b30         db  0x08 ; '.'
0000000000014b31         db  0xf0 ; '.'
0000000000014b32         db  0xfe ; '.'
0000000000014b33         db  0xff ; '.'
0000000000014b34         db  0x08 ; '.'
0000000000014b35         db  0xf0 ; '.'
0000000000014b36         db  0xfe ; '.'
0000000000014b37         db  0xff ; '.'
0000000000014b38         db  0x08 ; '.'
0000000000014b39         db  0xf0 ; '.'
0000000000014b3a         db  0xfe ; '.'
0000000000014b3b         db  0xff ; '.'
0000000000014b3c         db  0x08 ; '.'
0000000000014b3d         db  0xf0 ; '.'
0000000000014b3e         db  0xfe ; '.'
0000000000014b3f         db  0xff ; '.'
0000000000014b40         db  0x08 ; '.'
0000000000014b41         db  0xf0 ; '.'
0000000000014b42         db  0xfe ; '.'
0000000000014b43         db  0xff ; '.'
0000000000014b44         db  0x08 ; '.'
0000000000014b45         db  0xf0 ; '.'
0000000000014b46         db  0xfe ; '.'
0000000000014b47         db  0xff ; '.'
0000000000014b48         db  0x08 ; '.'
0000000000014b49         db  0xf0 ; '.'
0000000000014b4a         db  0xfe ; '.'
0000000000014b4b         db  0xff ; '.'
0000000000014b4c         db  0x08 ; '.'
0000000000014b4d         db  0xf0 ; '.'
0000000000014b4e         db  0xfe ; '.'
0000000000014b4f         db  0xff ; '.'
0000000000014b50         db  0x08 ; '.'
0000000000014b51         db  0xf0 ; '.'
0000000000014b52         db  0xfe ; '.'
0000000000014b53         db  0xff ; '.'
0000000000014b54         db  0x78 ; 'x'
0000000000014b55         db  0xeb ; '.'
0000000000014b56         db  0xfe ; '.'
0000000000014b57         db  0xff ; '.'
0000000000014b58         db  0x38 ; '8'
0000000000014b59         db  0xf0 ; '.'
0000000000014b5a         db  0xfe ; '.'
0000000000014b5b         db  0xff ; '.'
0000000000014b5c         db  0x78 ; 'x'
0000000000014b5d         db  0xeb ; '.'
0000000000014b5e         db  0xfe ; '.'
0000000000014b5f         db  0xff ; '.'
0000000000014b60         db  0x20 ; ' '
0000000000014b61         db  0xf0 ; '.'
0000000000014b62         db  0xfe ; '.'
0000000000014b63         db  0xff ; '.'
0000000000014b64         db  0x00 ; '.'
0000000000014b65         db  0x00 ; '.'
0000000000014b66         db  0x00 ; '.'
0000000000014b67         db  0x00 ; '.'
0000000000014b68         db  0x00 ; '.'
0000000000014b69         db  0x00 ; '.'
0000000000014b6a         db  0x00 ; '.'
0000000000014b6b         db  0x00 ; '.'
0000000000014b6c         db  0x00 ; '.'
0000000000014b6d         db  0x00 ; '.'
0000000000014b6e         db  0x00 ; '.'
0000000000014b6f         db  0x00 ; '.'
0000000000014b70         db  0x00 ; '.'
0000000000014b71         db  0x00 ; '.'
0000000000014b72         db  0x00 ; '.'
0000000000014b73         db  0x00 ; '.'
0000000000014b74         db  0x00 ; '.'
0000000000014b75         db  0x00 ; '.'
0000000000014b76         db  0x00 ; '.'
0000000000014b77         db  0x00 ; '.'
0000000000014b78         db  0x00 ; '.'
0000000000014b79         db  0x00 ; '.'
0000000000014b7a         db  0x00 ; '.'
0000000000014b7b         db  0x00 ; '.'
0000000000014b7c         db  0x00 ; '.'
0000000000014b7d         db  0x00 ; '.'
0000000000014b7e         db  0x00 ; '.'
0000000000014b7f         db  0x00 ; '.'
                     quoting_style_vals:
0000000000014b80         db  0x00 ; '.'
0000000000014b81         db  0x00 ; '.'
0000000000014b82         db  0x00 ; '.'
0000000000014b83         db  0x00 ; '.'
0000000000014b84         db  0x01 ; '.'
0000000000014b85         db  0x00 ; '.'
0000000000014b86         db  0x00 ; '.'
0000000000014b87         db  0x00 ; '.'
0000000000014b88         db  0x02 ; '.'
0000000000014b89         db  0x00 ; '.'
0000000000014b8a         db  0x00 ; '.'
0000000000014b8b         db  0x00 ; '.'
0000000000014b8c         db  0x03 ; '.'
0000000000014b8d         db  0x00 ; '.'
0000000000014b8e         db  0x00 ; '.'
0000000000014b8f         db  0x00 ; '.'
0000000000014b90         db  0x04 ; '.'
0000000000014b91         db  0x00 ; '.'
0000000000014b92         db  0x00 ; '.'
0000000000014b93         db  0x00 ; '.'
0000000000014b94         db  0x05 ; '.'
0000000000014b95         db  0x00 ; '.'
0000000000014b96         db  0x00 ; '.'
0000000000014b97         db  0x00 ; '.'
0000000000014b98         db  0x06 ; '.'
0000000000014b99         db  0x00 ; '.'
0000000000014b9a         db  0x00 ; '.'
0000000000014b9b         db  0x00 ; '.'
0000000000014b9c         db  0x07 ; '.'
0000000000014b9d         db  0x00 ; '.'
0000000000014b9e         db  0x00 ; '.'
0000000000014b9f         db  0x00 ; '.'
0000000000014ba0         db  0x08 ; '.'
0000000000014ba1         db  0x00 ; '.'
0000000000014ba2         db  0x00 ; '.'
0000000000014ba3         db  0x00 ; '.'
0000000000014ba4         db  0x09 ; '.'
0000000000014ba5         db  0x00 ; '.'
0000000000014ba6         db  0x00 ; '.'
0000000000014ba7         db  0x00 ; '.'
                     aSSSn:
0000000000014ba8         db         "%s (%s) %s\n", 0                           ; DATA XREF=version_etc_arn+35
                     aSSn:
0000000000014bb4         db         "%s %s\n", 0                                ; DATA XREF=version_etc_arn+318
0000000000014bbb         db  0x28 ; '('                                         ; DATA XREF=version_etc_arn+60
0000000000014bbc         db  0x43 ; 'C'
0000000000014bbd         db  0x29 ; ')'
0000000000014bbe         db  0x00 ; '.'
                     aWrittenBySn:
0000000000014bbf         db         "Written by %s.\n", 0                       ; DATA XREF=version_etc_arn+443
                     aWrittenBySAndS:
0000000000014bcf         db         "Written by %s and %s.\n", 0                ; DATA XREF=version_etc_arn+508
                     aWrittenBySSAnd:
0000000000014be6         db         "Written by %s, %s, and %s.\n", 0           ; DATA XREF=version_etc_arn+584
                     aNreportBugsToS:
0000000000014c02         db         "\nReport bugs to: %s\n", 0                 ; DATA XREF=emit_bug_reporting_address+1
                     aBugcoreutilsgn:
0000000000014c17         db         "bug-coreutils@gnu.org", 0                  ; DATA XREF=emit_bug_reporting_address+20
                     aSHomePageSn:
0000000000014c2d         db         "%s home page: <%s>\n", 0                   ; DATA XREF=emit_bug_reporting_address+42
0000000000014c41         align      8
                     aNlicenseGplv3G:
0000000000014c48         db         "\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\n", 0 ; DATA XREF=version_etc_arn+110
0000000000014d14         align      8
                     aWrittenBySSSna:
0000000000014d18         db         "Written by %s, %s, %s,\nand %s.\n", 0      ; DATA XREF=version_etc_arn+656
                     aWrittenBySSSns_14d38:        // aWrittenBySSSns
0000000000014d38         db         "Written by %s, %s, %s,\n%s, and %s.\n", 0  ; DATA XREF=version_etc_arn+748
0000000000014d5c         align      32
                     aWrittenBySSSns_14d60:        // aWrittenBySSSns
0000000000014d60         db         "Written by %s, %s, %s,\n%s, %s, and %s.\n", 0 ; DATA XREF=version_etc_arn+800
                     aWrittenBySSSns_14d88:        // aWrittenBySSSns
0000000000014d88         db         "Written by %s, %s, %s,\n%s, %s, %s, and %s.\n", 0 ; DATA XREF=version_etc_arn+904
0000000000014db4         align      8
                     aWrittenBySSSns_14db8:        // aWrittenBySSSns
0000000000014db8         db         "Written by %s, %s, %s,\n%s, %s, %s, %s,\nand %s.\n", 0 ; DATA XREF=version_etc_arn+184
                     aWrittenBySSSns:
0000000000014de8         db         "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, and %s.\n", 0 ; DATA XREF=version_etc_arn+360
0000000000014e1c         align      32
                     aWrittenBySSSns_14e20:        // aWrittenBySSSns
0000000000014e20         db         "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n", 0 ; DATA XREF=version_etc_arn+997
0000000000014e5c         align      32
                     aGeneralHelpUsi:
0000000000014e60         db         "General help using GNU software: <https://www.gnu.org/gethelp/>\n", 0 ; DATA XREF=emit_bug_reporting_address+97
0000000000014ea1         align      4
                     switch_table_14ea4:        // switch_table
0000000000014ea4         dd         version_etc_arn.loc_5096-switch_table_14ea4, version_etc_arn.loc_5128-switch_table_14ea4, version_etc_arn.loc_5168-switch_table_14ea4, version_etc_arn.loc_51b0-switch_table_14ea4 ; switch table used at 0x5014 containing 10 entries, DATA XREF=version_etc_arn+150
0000000000014eb4         dd         version_etc_arn.loc_5200-switch_table_14ea4, version_etc_arn.loc_5258-switch_table_14ea4, version_etc_arn.loc_5288-switch_table_14ea4, version_etc_arn.loc_52f0-switch_table_14ea4
0000000000014ec4         dd         version_etc_arn.loc_5020-switch_table_14ea4, version_etc_arn.loc_50d0-switch_table_14ea4
0000000000014ecc         align      32
                     version_etc_copyright:
0000000000014ee0         db         "Copyright %s %d Free Software Foundation, Inc.", 0 ; DATA XREF=version_etc_arn+79
                     aMemoryExhauste:
0000000000014f0f         db         "memory exhausted", 0                       ; DATA XREF=xalloc_die
                     aCoreutils831li:
0000000000014f20         db         "../coreutils-8.31/lib/regexec.c", 0        ; DATA XREF=pop_fail_stack.isra.25+124, re_search_internal+4148, re_search_internal+5432, re_search_stub+1065, re_search_stub+1096, re_search_stub+1127
                     aCoreutils831li_14f40:        // aCoreutils831li
0000000000014f40         db         "../coreutils-8.31/lib/regcomp.c", 0        ; DATA XREF=sub_10fe0+2817, sub_12920+18, sub_13000+106, sub_13000+137, sub_13000+168
                     aIsepsilonnodeN:
0000000000014f60         db         "!IS_EPSILON_NODE (node->token.type)", 0    ; DATA XREF=sub_13000+144
0000000000014f84         align      8
                     aNum0:
0000000000014f88         db         "num >= 0", 0                               ; DATA XREF=pop_fail_stack.isra.25+131
                     aAlpha:
0000000000014f91         db         "alpha", 0                                  ; DATA XREF=build_charclass.isra.29+65, build_charclass.isra.29+338, build_charclass.isra.29+626
                     aUpper:
0000000000014f97         db         "upper", 0                                  ; DATA XREF=build_charclass.isra.29+35, build_charclass.isra.29+1100
                     aLower:
0000000000014f9d         db         "lower", 0                                  ; DATA XREF=build_charclass.isra.29+310, build_charclass.isra.29+424
                     aAlnum:
0000000000014fa3         db         "alnum", 0                                  ; DATA XREF=build_charclass.isra.29+108, sub_10fe0+463
                     aCntrl:
0000000000014fa9         db         "cntrl", 0                                  ; DATA XREF=build_charclass.isra.29+138
                     aSpace:
0000000000014faf         db         "space", 0                                  ; DATA XREF=build_charclass.isra.29+450, sub_10fe0+383
                     aPrint:
0000000000014fb5         db         "print", 0                                  ; DATA XREF=build_charclass.isra.29+947
                     aBlank:
0000000000014fbb         db         "blank", 0                                  ; DATA XREF=build_charclass.isra.29+1202
                     aGraph:
0000000000014fc1         db         "graph", 0                                  ; DATA XREF=build_charclass.isra.29+1470
                     aPunct:
0000000000014fc7         db         "punct", 0                                  ; DATA XREF=build_charclass.isra.29+1610
0000000000014fcd         db  0x78 ; 'x'                                         ; DATA XREF=build_charclass.isra.29+1748
                     aDigit:
0000000000014fce         db         "digit", 0                                  ; DATA XREF=build_charclass.isra.29+656
                     aErrRegespace:
0000000000014fd4         db         "err == REG_ESPACE", 0                      ; DATA XREF=re_search_internal+4155, re_search_internal+5439
0000000000014fe6         db  0x38 ; '8'                                         ; DATA XREF=re_compile_internal+352
0000000000014fe7         db  0x00 ; '.'
                     aNodenextNull:
0000000000014fe8         db         "node->next == NULL", 0                     ; DATA XREF=sub_12920+25
                     aLeft1:
0000000000014ffb         db         "left > -1", 0                              ; DATA XREF=sub_13000+175
                     aRight1:
0000000000015005         db         "right > -1", 0                             ; DATA XREF=sub_13000+113
                     aRegsallocatedR:
0000000000015010         db         "regs_allocated == REGS_FIXED", 0           ; DATA XREF=re_search_stub+1134
                     aRegsnumregsNre:
000000000001502d         db         "regs->num_regs >= nregs", 0                ; DATA XREF=re_search_stub+1103
                     aPmatch0rmsoSta:
0000000000015045         db         "pmatch[0].rm_so == start", 0               ; DATA XREF=re_search_stub+1072
000000000001505e         align      32
                     switch_table_15060:        // switch_table
0000000000015060         dd         2 dup (re_search_internal.loc_e904-switch_table_15060), re_search_internal.loc_e36e-switch_table_15060, re_search_internal.loc_e892-switch_table_15060, re_search_internal.loc_e418-switch_table_15060 ; switch table used at 0xe336 containing 5 entries, DATA XREF=re_search_internal+1256
                     switch_table_15074:        // switch_table
0000000000015074         dd         peek_token.loc_10350-switch_table_15074, 25 dup (peek_token.loc_1028c-switch_table_15074), peek_token.loc_103c0-switch_table_15074, 3 dup (peek_token.loc_1028c-switch_table_15074) ; switch table used at 0x1016c containing 116 entries, DATA XREF=peek_token+314
00000000000150ec         dd         peek_token.loc_103a0-switch_table_15074, peek_token.loc_10380-switch_table_15074, peek_token.loc_10370-switch_table_15074, peek_token.loc_10330-switch_table_15074
00000000000150fc         dd         2 dup (peek_token.loc_1028c-switch_table_15074), peek_token.loc_10320-switch_table_15074, 16 dup (peek_token.loc_1028c-switch_table_15074), peek_token.loc_10300-switch_table_15074
000000000001514c         dd         27 dup (peek_token.loc_1028c-switch_table_15074), peek_token.loc_102f0-switch_table_15074, 2 dup (peek_token.loc_1028c-switch_table_15074), peek_token.loc_102c8-switch_table_15074
00000000000151c8         dd         28 dup (peek_token.loc_1028c-switch_table_15074), peek_token.loc_102a0-switch_table_15074, peek_token.loc_10278-switch_table_15074, peek_token.loc_10250-switch_table_15074
                     switch_table_15244:        // switch_table
0000000000015244         dd         peek_token.loc_105e3-switch_table_15244, peek_token.loc_105cc-switch_table_15244, peek_token.loc_105b5-switch_table_15244, peek_token.loc_10605-switch_table_15244 ; switch table used at 0x10218 containing 87 entries, DATA XREF=peek_token+487
0000000000015254         dd         peek_token.loc_1059a-switch_table_15244, 5 dup (peek_token.loc_10605-switch_table_15244), 9 dup (peek_token.loc_10571-switch_table_15244), 2 dup (peek_token.loc_10605-switch_table_15244)
0000000000015298         dd         peek_token.loc_1054f-switch_table_15244, peek_token.loc_10605-switch_table_15244, peek_token.loc_1052d-switch_table_15244, peek_token.loc_10512-switch_table_15244
00000000000152a8         dd         2 dup (peek_token.loc_10605-switch_table_15244), peek_token.loc_104f0-switch_table_15244, 16 dup (peek_token.loc_10605-switch_table_15244), peek_token.loc_104d5-switch_table_15244
00000000000152f8         dd         3 dup (peek_token.loc_10605-switch_table_15244), peek_token.loc_104ba-switch_table_15244, 8 dup (peek_token.loc_10605-switch_table_15244), peek_token.loc_10498-switch_table_15244
000000000001532c         dd         peek_token.loc_10605-switch_table_15244, peek_token.loc_10476-switch_table_15244, 16 dup (peek_token.loc_10605-switch_table_15244), peek_token.loc_1043d-switch_table_15244
0000000000015378         dd         3 dup (peek_token.loc_10605-switch_table_15244), peek_token.loc_10422-switch_table_15244, 3 dup (peek_token.loc_10605-switch_table_15244), peek_token.loc_10404-switch_table_15244
0000000000015398         dd         peek_token.loc_103e9-switch_table_15244, peek_token.loc_10458-switch_table_15244
00000000000153a0         db  0x40 ; '@'                                         ; DATA XREF=parse_expression+75
00000000000153a1         db  0xb5 ; '.'
00000000000153a2         db  0xff ; '.'
00000000000153a3         db  0xff ; '.'
00000000000153a4         db  0xce ; '.'
00000000000153a5         db  0xbe ; '.'
00000000000153a6         db  0xff ; '.'
00000000000153a7         db  0xff ; '.'
00000000000153a8         db  0x40 ; '@'
00000000000153a9         db  0xb5 ; '.'
00000000000153aa         db  0xff ; '.'
00000000000153ab         db  0xff ; '.'
00000000000153ac         db  0x40 ; '@'
00000000000153ad         db  0xb5 ; '.'
00000000000153ae         db  0xff ; '.'
00000000000153af         db  0xff ; '.'
00000000000153b0         db  0x1f ; '.'
00000000000153b1         db  0xbe ; '.'
00000000000153b2         db  0xff ; '.'
00000000000153b3         db  0xff ; '.'
00000000000153b4         db  0x89 ; '.'
00000000000153b5         db  0xbe ; '.'
00000000000153b6         db  0xff ; '.'
00000000000153b7         db  0xff ; '.'
00000000000153b8         db  0x40 ; '@'
00000000000153b9         db  0xb5 ; '.'
00000000000153ba         db  0xff ; '.'
00000000000153bb         db  0xff ; '.'
00000000000153bc         db  0x40 ; '@'
00000000000153bd         db  0xb5 ; '.'
00000000000153be         db  0xff ; '.'
00000000000153bf         db  0xff ; '.'
00000000000153c0         db  0xa1 ; '.'
00000000000153c1         db  0xb4 ; '.'
00000000000153c2         db  0xff ; '.'
00000000000153c3         db  0xff ; '.'
00000000000153c4         db  0xb8 ; '.'
00000000000153c5         db  0xbf ; '.'
00000000000153c6         db  0xff ; '.'
00000000000153c7         db  0xff ; '.'
00000000000153c8         db  0x40 ; '@'
00000000000153c9         db  0xb5 ; '.'
00000000000153ca         db  0xff ; '.'
00000000000153cb         db  0xff ; '.'
00000000000153cc         db  0x8d ; '.'
00000000000153cd         db  0xb5 ; '.'
00000000000153ce         db  0xff ; '.'
00000000000153cf         db  0xff ; '.'
00000000000153d0         db  0x00 ; '.'
00000000000153d1         db  0xbb ; '.'
00000000000153d2         db  0xff ; '.'
00000000000153d3         db  0xff ; '.'
00000000000153d4         db  0x40 ; '@'
00000000000153d5         db  0xb5 ; '.'
00000000000153d6         db  0xff ; '.'
00000000000153d7         db  0xff ; '.'
00000000000153d8         db  0x40 ; '@'
00000000000153d9         db  0xb5 ; '.'
00000000000153da         db  0xff ; '.'
00000000000153db         db  0xff ; '.'
00000000000153dc         db  0x40 ; '@'
00000000000153dd         db  0xb5 ; '.'
00000000000153de         db  0xff ; '.'
00000000000153df         db  0xff ; '.'
00000000000153e0         db  0x40 ; '@'
00000000000153e1         db  0xb5 ; '.'
00000000000153e2         db  0xff ; '.'
00000000000153e3         db  0xff ; '.'
00000000000153e4         db  0x40 ; '@'
00000000000153e5         db  0xb5 ; '.'
00000000000153e6         db  0xff ; '.'
00000000000153e7         db  0xff ; '.'
00000000000153e8         db  0x8d ; '.'
00000000000153e9         db  0xb5 ; '.'
00000000000153ea         db  0xff ; '.'
00000000000153eb         db  0xff ; '.'
00000000000153ec         db  0x8d ; '.'
00000000000153ed         db  0xb5 ; '.'
00000000000153ee         db  0xff ; '.'
00000000000153ef         db  0xff ; '.'
00000000000153f0         db  0x40 ; '@'
00000000000153f1         db  0xbc ; '.'
00000000000153f2         db  0xff ; '.'
00000000000153f3         db  0xff ; '.'
00000000000153f4         db  0x40 ; '@'
00000000000153f5         db  0xb5 ; '.'
00000000000153f6         db  0xff ; '.'
00000000000153f7         db  0xff ; '.'
00000000000153f8         db  0x40 ; '@'
00000000000153f9         db  0xb5 ; '.'
00000000000153fa         db  0xff ; '.'
00000000000153fb         db  0xff ; '.'
00000000000153fc         db  0x7e ; '~'
00000000000153fd         db  0xb5 ; '.'
00000000000153fe         db  0xff ; '.'
00000000000153ff         db  0xff ; '.'
0000000000015400         db  0xab ; '.'
0000000000015401         db  0xb5 ; '.'
0000000000015402         db  0xff ; '.'
0000000000015403         db  0xff ; '.'
0000000000015404         db  0x40 ; '@'
0000000000015405         db  0xb5 ; '.'
0000000000015406         db  0xff ; '.'
0000000000015407         db  0xff ; '.'
0000000000015408         db  0x40 ; '@'
0000000000015409         db  0xb5 ; '.'
000000000001540a         db  0xff ; '.'
000000000001540b         db  0xff ; '.'
000000000001540c         db  0x40 ; '@'
000000000001540d         db  0xb5 ; '.'
000000000001540e         db  0xff ; '.'
000000000001540f         db  0xff ; '.'
0000000000015410         db  0x40 ; '@'
0000000000015411         db  0xb5 ; '.'
0000000000015412         db  0xff ; '.'
0000000000015413         db  0xff ; '.'
0000000000015414         db  0x40 ; '@'
0000000000015415         db  0xb5 ; '.'
0000000000015416         db  0xff ; '.'
0000000000015417         db  0xff ; '.'
0000000000015418         db  0x40 ; '@'
0000000000015419         db  0xb5 ; '.'
000000000001541a         db  0xff ; '.'
000000000001541b         db  0xff ; '.'
000000000001541c         db  0x40 ; '@'
000000000001541d         db  0xb5 ; '.'
000000000001541e         db  0xff ; '.'
000000000001541f         db  0xff ; '.'
0000000000015420         db  0xf8 ; '.'
0000000000015421         db  0xbd ; '.'
0000000000015422         db  0xff ; '.'
0000000000015423         db  0xff ; '.'
0000000000015424         db  0xf8 ; '.'
0000000000015425         db  0xbd ; '.'
0000000000015426         db  0xff ; '.'
0000000000015427         db  0xff ; '.'
0000000000015428         db  0xa8 ; '.'
0000000000015429         db  0xbd ; '.'
000000000001542a         db  0xff ; '.'
000000000001542b         db  0xff ; '.'
000000000001542c         db  0xa8 ; '.'
000000000001542d         db  0xbd ; '.'
000000000001542e         db  0xff ; '.'
000000000001542f         db  0xff ; '.'
0000000000015430         db  0x23 ; '#'
0000000000015431         db  0xc0 ; '.'
0000000000015432         db  0xff ; '.'
0000000000015433         db  0xff ; '.'
                     switch_table_15434:        // switch_table
0000000000015434         dd         sub_10fe0.loc_114b1-switch_table_15434, sub_10fe0.loc_11487-switch_table_15434, sub_10fe0.loc_1143d-switch_table_15434, sub_10fe0.loc_11405-switch_table_15434 ; switch table used at 0x11146 containing 5 entries, DATA XREF=sub_10fe0+139
0000000000015444         dd         sub_10fe0.loc_114d9-switch_table_15434
0000000000015448         db  0x20 ; ' '                                         ; DATA XREF=re_compile_internal+1708
0000000000015449         db  0xd3 ; '.'
000000000001544a         db  0xff ; '.'
000000000001544b         db  0xff ; '.'
000000000001544c         db  0x20 ; ' '
000000000001544d         db  0xd3 ; '.'
000000000001544e         db  0xff ; '.'
000000000001544f         db  0xff ; '.'
0000000000015450         db  0xd8 ; '.'
0000000000015451         db  0xd4 ; '.'
0000000000015452         db  0xff ; '.'
0000000000015453         db  0xff ; '.'
0000000000015454         db  0x20 ; ' '
0000000000015455         db  0xd3 ; '.'
0000000000015456         db  0xff ; '.'
0000000000015457         db  0xff ; '.'
0000000000015458         db  0x08 ; '.'
0000000000015459         db  0xd5 ; '.'
000000000001545a         db  0xff ; '.'
000000000001545b         db  0xff ; '.'
000000000001545c         db  0x20 ; ' '
000000000001545d         db  0xd3 ; '.'
000000000001545e         db  0xff ; '.'
000000000001545f         db  0xff ; '.'
0000000000015460         db  0x20 ; ' '
0000000000015461         db  0xd3 ; '.'
0000000000015462         db  0xff ; '.'
0000000000015463         db  0xff ; '.'
0000000000015464         db  0x20 ; ' '
0000000000015465         db  0xd3 ; '.'
0000000000015466         db  0xff ; '.'
0000000000015467         db  0xff ; '.'
0000000000015468         db  0x80 ; '.'
0000000000015469         db  0xd4 ; '.'
000000000001546a         db  0xff ; '.'
000000000001546b         db  0xff ; '.'
000000000001546c         db  0x80 ; '.'
000000000001546d         db  0xd4 ; '.'
000000000001546e         db  0xff ; '.'
000000000001546f         db  0xff ; '.'
0000000000015470         db  0xbf ; '.'
0000000000015471         db  0xd3 ; '.'
0000000000015472         db  0xff ; '.'
0000000000015473         db  0xff ; '.'
0000000000015474         db  0xbf ; '.'
0000000000015475         db  0xd3 ; '.'
0000000000015476         db  0xff ; '.'
0000000000015477         db  0xff ; '.'
0000000000015478         db  0x80 ; '.'
0000000000015479         db  0xd4 ; '.'
000000000001547a         db  0xff ; '.'
000000000001547b         db  0xff ; '.'
000000000001547c         db  0x20 ; ' '
000000000001547d         db  0xd3 ; '.'
000000000001547e         db  0xff ; '.'
000000000001547f         db  0xff ; '.'
0000000000015480         db  0x20 ; ' '
0000000000015481         db  0xd3 ; '.'
0000000000015482         db  0xff ; '.'
0000000000015483         db  0xff ; '.'
0000000000015484         db  0x20 ; ' '
0000000000015485         db  0xd3 ; '.'
0000000000015486         db  0xff ; '.'
0000000000015487         db  0xff ; '.'
0000000000015488         db  0x39 ; '9'
0000000000015489         db  0xd3 ; '.'
000000000001548a         db  0xff ; '.'
000000000001548b         db  0xff ; '.'
000000000001548c         db  0xd2 ; '.'                                         ; DATA XREF=sub_12950+1071
000000000001548d         db  0xdb ; '.'
000000000001548e         db  0xff ; '.'
000000000001548f         db  0xff ; '.'
0000000000015490         db  0xd4 ; '.'
0000000000015491         db  0xda ; '.'
0000000000015492         db  0xff ; '.'
0000000000015493         db  0xff ; '.'
0000000000015494         db  0x80 ; '.'
0000000000015495         db  0xda ; '.'
0000000000015496         db  0xff ; '.'
0000000000015497         db  0xff ; '.'
0000000000015498         db  0xfc ; '.'
0000000000015499         db  0xda ; '.'
000000000001549a         db  0xff ; '.'
000000000001549b         db  0xff ; '.'
000000000001549c         db  0x80 ; '.'
000000000001549d         db  0xda ; '.'
000000000001549e         db  0xff ; '.'
000000000001549f         db  0xff ; '.'
00000000000154a0         db  0x7d ; '}'
00000000000154a1         db  0xda ; '.'
00000000000154a2         db  0xff ; '.'
00000000000154a3         db  0xff ; '.'
00000000000154a4         db  0xf2 ; '.'
00000000000154a5         db  0xd6 ; '.'
00000000000154a6         db  0xff ; '.'
00000000000154a7         db  0xff ; '.'
00000000000154a8         db  0xd2 ; '.'
00000000000154a9         db  0xdb ; '.'
00000000000154aa         db  0xff ; '.'
00000000000154ab         db  0xff ; '.'
00000000000154ac         db  0x80 ; '.'
00000000000154ad         db  0xda ; '.'
00000000000154ae         db  0xff ; '.'
00000000000154af         db  0xff ; '.'
00000000000154b0         db  0x80 ; '.'
00000000000154b1         db  0xda ; '.'
00000000000154b2         db  0xff ; '.'
00000000000154b3         db  0xff ; '.'
00000000000154b4         db  0x80 ; '.'
00000000000154b5         db  0xda ; '.'
00000000000154b6         db  0xff ; '.'
00000000000154b7         db  0xff ; '.'
00000000000154b8         db  0x80 ; '.'
00000000000154b9         db  0xda ; '.'
00000000000154ba         db  0xff ; '.'
00000000000154bb         db  0xff ; '.'
00000000000154bc         db  0xdd ; '.'
00000000000154bd         db  0xda ; '.'
00000000000154be         db  0xff ; '.'
00000000000154bf         db  0xff ; '.'
                     __PRETTY_FUNCTION__.7859:
00000000000154c0         db         "re_copy_regs", 0                           ; DATA XREF=re_search_stub+1089, re_search_stub+1120
00000000000154cd         align      16
                     __PRETTY_FUNCTION__.7847:
00000000000154d0         db         "re_search_stub", 0                         ; DATA XREF=re_search_stub+1058
00000000000154df         align      32
                     __PRETTY_FUNCTION__.8040:
00000000000154e0         db         "pop_fail_stack", 0                         ; DATA XREF=pop_fail_stack.isra.25+117
00000000000154ef         align      16
                     __PRETTY_FUNCTION__.7972:
00000000000154f0         db         "check_matching", 0                         ; DATA XREF=re_search_internal+4141, re_search_internal+5425
00000000000154ff         align      256
                     __PRETTY_FUNCTION__.6981:
0000000000015500         db         "link_nfa_nodes", 0                         ; DATA XREF=sub_12920+11, sub_13000+99, sub_13000+130, sub_13000+161
000000000001550f         db  0x00 ; '.'
                     __PRETTY_FUNCTION__.7327:
0000000000015510         db         "parse_bracket_exp", 0                      ; DATA XREF=sub_10fe0+2810
0000000000015522         db  0x00 ; '.'
0000000000015523         db  0x00 ; '.'
0000000000015524         db  0x00 ; '.'
0000000000015525         db  0x00 ; '.'
0000000000015526         db  0x00 ; '.'
0000000000015527         db  0x00 ; '.'
0000000000015528         db  0x00 ; '.'
0000000000015529         db  0x00 ; '.'
000000000001552a         db  0x00 ; '.'
000000000001552b         db  0x00 ; '.'
000000000001552c         db  0x00 ; '.'
000000000001552d         db  0x00 ; '.'
000000000001552e         db  0x00 ; '.'
000000000001552f         db  0x00 ; '.'
0000000000015530         db  0x00 ; '.'
0000000000015531         db  0x00 ; '.'
0000000000015532         db  0x00 ; '.'
0000000000015533         db  0x00 ; '.'
0000000000015534         db  0x00 ; '.'
0000000000015535         db  0x00 ; '.'
0000000000015536         db  0x00 ; '.'
0000000000015537         db  0x00 ; '.'
0000000000015538         db  0x00 ; '.'
0000000000015539         db  0x00 ; '.'
000000000001553a         db  0x00 ; '.'
000000000001553b         db  0x00 ; '.'
000000000001553c         db  0x00 ; '.'
000000000001553d         db  0x00 ; '.'
000000000001553e         db  0x00 ; '.'
000000000001553f         db  0x00 ; '.'
                     utf8_sb_map:
0000000000015540         db  0xff ; '.'                                         ; DATA XREF=free_dfa_content+305, re_compile_internal+435
0000000000015541         db  0xff ; '.'
0000000000015542         db  0xff ; '.'
0000000000015543         db  0xff ; '.'
0000000000015544         db  0xff ; '.'
0000000000015545         db  0xff ; '.'
0000000000015546         db  0xff ; '.'
0000000000015547         db  0xff ; '.'
0000000000015548         db  0xff ; '.'
0000000000015549         db  0xff ; '.'
000000000001554a         db  0xff ; '.'
000000000001554b         db  0xff ; '.'
000000000001554c         db  0xff ; '.'
000000000001554d         db  0xff ; '.'
000000000001554e         db  0xff ; '.'
000000000001554f         db  0xff ; '.'
0000000000015550         db  0x00 ; '.'
0000000000015551         db  0x00 ; '.'
0000000000015552         db  0x00 ; '.'
0000000000015553         db  0x00 ; '.'
0000000000015554         db  0x00 ; '.'
0000000000015555         db  0x00 ; '.'
0000000000015556         db  0x00 ; '.'
0000000000015557         db  0x00 ; '.'
0000000000015558         db  0x00 ; '.'
0000000000015559         db  0x00 ; '.'
000000000001555a         db  0x00 ; '.'
000000000001555b         db  0x00 ; '.'
000000000001555c         db  0x00 ; '.'
000000000001555d         db  0x00 ; '.'
000000000001555e         db  0x00 ; '.'
000000000001555f         db  0x00 ; '.'
                     __re_error_msgid_idx:
0000000000015560         db  0x00 ; '.'                                         ; DATA XREF=rpl_re_compile_pattern+62, rpl_regerror+15
0000000000015561         db  0x00 ; '.'
0000000000015562         db  0x00 ; '.'
0000000000015563         db  0x00 ; '.'
0000000000015564         db  0x00 ; '.'
0000000000015565         db  0x00 ; '.'
0000000000015566         db  0x00 ; '.'
0000000000015567         db  0x00 ; '.'
0000000000015568         db  0x08 ; '.'
0000000000015569         db  0x00 ; '.'
000000000001556a         db  0x00 ; '.'
000000000001556b         db  0x00 ; '.'
000000000001556c         db  0x00 ; '.'
000000000001556d         db  0x00 ; '.'
000000000001556e         db  0x00 ; '.'
000000000001556f         db  0x00 ; '.'
0000000000015570         db  0x11 ; '.'
0000000000015571         db  0x00 ; '.'
0000000000015572         db  0x00 ; '.'
0000000000015573         db  0x00 ; '.'
0000000000015574         db  0x00 ; '.'
0000000000015575         db  0x00 ; '.'
0000000000015576         db  0x00 ; '.'
0000000000015577         db  0x00 ; '.'
0000000000015578         db  0x2c ; ','
0000000000015579         db  0x00 ; '.'
000000000001557a         db  0x00 ; '.'
000000000001557b         db  0x00 ; '.'
000000000001557c         db  0x00 ; '.'
000000000001557d         db  0x00 ; '.'
000000000001557e         db  0x00 ; '.'
000000000001557f         db  0x00 ; '.'
0000000000015580         db  0x48 ; 'H'
0000000000015581         db  0x00 ; '.'
0000000000015582         db  0x00 ; '.'
0000000000015583         db  0x00 ; '.'
0000000000015584         db  0x00 ; '.'
0000000000015585         db  0x00 ; '.'
0000000000015586         db  0x00 ; '.'
0000000000015587         db  0x00 ; '.'
0000000000015588         db  0x65 ; 'e'
0000000000015589         db  0x00 ; '.'
000000000001558a         db  0x00 ; '.'
000000000001558b         db  0x00 ; '.'
000000000001558c         db  0x00 ; '.'
000000000001558d         db  0x00 ; '.'
000000000001558e         db  0x00 ; '.'
000000000001558f         db  0x00 ; '.'
0000000000015590         db  0x78 ; 'x'
0000000000015591         db  0x00 ; '.'
0000000000015592         db  0x00 ; '.'
0000000000015593         db  0x00 ; '.'
0000000000015594         db  0x00 ; '.'
0000000000015595         db  0x00 ; '.'
0000000000015596         db  0x00 ; '.'
0000000000015597         db  0x00 ; '.'
0000000000015598         db  0x8f ; '.'
0000000000015599         db  0x00 ; '.'
000000000001559a         db  0x00 ; '.'
000000000001559b         db  0x00 ; '.'
000000000001559c         db  0x00 ; '.'
000000000001559d         db  0x00 ; '.'
000000000001559e         db  0x00 ; '.'
000000000001559f         db  0x00 ; '.'
00000000000155a0         db  0xae ; '.'
00000000000155a1         db  0x00 ; '.'
00000000000155a2         db  0x00 ; '.'
00000000000155a3         db  0x00 ; '.'
00000000000155a4         db  0x00 ; '.'
00000000000155a5         db  0x00 ; '.'
00000000000155a6         db  0x00 ; '.'
00000000000155a7         db  0x00 ; '.'
00000000000155a8         db  0xc0 ; '.'
00000000000155a9         db  0x00 ; '.'
00000000000155aa         db  0x00 ; '.'
00000000000155ab         db  0x00 ; '.'
00000000000155ac         db  0x00 ; '.'
00000000000155ad         db  0x00 ; '.'
00000000000155ae         db  0x00 ; '.'
00000000000155af         db  0x00 ; '.'
00000000000155b0         db  0xcd ; '.'
00000000000155b1         db  0x00 ; '.'
00000000000155b2         db  0x00 ; '.'
00000000000155b3         db  0x00 ; '.'
00000000000155b4         db  0x00 ; '.'
00000000000155b5         db  0x00 ; '.'
00000000000155b6         db  0x00 ; '.'
00000000000155b7         db  0x00 ; '.'
00000000000155b8         db  0xe5 ; '.'
00000000000155b9         db  0x00 ; '.'
00000000000155ba         db  0x00 ; '.'
00000000000155bb         db  0x00 ; '.'
00000000000155bc         db  0x00 ; '.'
00000000000155bd         db  0x00 ; '.'
00000000000155be         db  0x00 ; '.'
00000000000155bf         db  0x00 ; '.'
00000000000155c0         db  0xf7 ; '.'
00000000000155c1         db  0x00 ; '.'
00000000000155c2         db  0x00 ; '.'
00000000000155c3         db  0x00 ; '.'
00000000000155c4         db  0x00 ; '.'
00000000000155c5         db  0x00 ; '.'
00000000000155c6         db  0x00 ; '.'
00000000000155c7         db  0x00 ; '.'
00000000000155c8         db  0x08 ; '.'
00000000000155c9         db  0x01 ; '.'
00000000000155ca         db  0x00 ; '.'
00000000000155cb         db  0x00 ; '.'
00000000000155cc         db  0x00 ; '.'
00000000000155cd         db  0x00 ; '.'
00000000000155ce         db  0x00 ; '.'
00000000000155cf         db  0x00 ; '.'
00000000000155d0         db  0x2d ; '-'
00000000000155d1         db  0x01 ; '.'
00000000000155d2         db  0x00 ; '.'
00000000000155d3         db  0x00 ; '.'
00000000000155d4         db  0x00 ; '.'
00000000000155d5         db  0x00 ; '.'
00000000000155d6         db  0x00 ; '.'
00000000000155d7         db  0x00 ; '.'
00000000000155d8         db  0x51 ; 'Q'
00000000000155d9         db  0x01 ; '.'
00000000000155da         db  0x00 ; '.'
00000000000155db         db  0x00 ; '.'
00000000000155dc         db  0x00 ; '.'
00000000000155dd         db  0x00 ; '.'
00000000000155de         db  0x00 ; '.'
00000000000155df         db  0x00 ; '.'
00000000000155e0         db  0x6c ; 'l'
00000000000155e1         db  0x01 ; '.'
00000000000155e2         db  0x00 ; '.'
00000000000155e3         db  0x00 ; '.'
00000000000155e4         db  0x00 ; '.'
00000000000155e5         db  0x00 ; '.'
00000000000155e6         db  0x00 ; '.'
00000000000155e7         db  0x00 ; '.'
00000000000155e8         db  0x00 ; '.'
00000000000155e9         db  0x00 ; '.'
00000000000155ea         db  0x00 ; '.'
00000000000155eb         db  0x00 ; '.'
00000000000155ec         db  0x00 ; '.'
00000000000155ed         db  0x00 ; '.'
00000000000155ee         db  0x00 ; '.'
00000000000155ef         db  0x00 ; '.'
00000000000155f0         db  0x00 ; '.'
00000000000155f1         db  0x00 ; '.'
00000000000155f2         db  0x00 ; '.'
00000000000155f3         db  0x00 ; '.'
00000000000155f4         db  0x00 ; '.'
00000000000155f5         db  0x00 ; '.'
00000000000155f6         db  0x00 ; '.'
00000000000155f7         db  0x00 ; '.'
00000000000155f8         db  0x00 ; '.'
00000000000155f9         db  0x00 ; '.'
00000000000155fa         db  0x00 ; '.'
00000000000155fb         db  0x00 ; '.'
00000000000155fc         db  0x00 ; '.'
00000000000155fd         db  0x00 ; '.'
00000000000155fe         db  0x00 ; '.'
00000000000155ff         db  0x00 ; '.'
                     __re_error_msgid:
0000000000015600         db         "Success", 0                                ; DATA XREF=rpl_re_compile_pattern+71, rpl_regerror+25
0000000000015608         db  0x4e ; 'N'
0000000000015609         db  0x6f ; 'o'
000000000001560a         db  0x20 ; ' '
000000000001560b         db  0x6d ; 'm'
000000000001560c         db  0x61 ; 'a'
000000000001560d         db  0x74 ; 't'
000000000001560e         db  0x63 ; 'c'
000000000001560f         db  0x68 ; 'h'
0000000000015610         db  0x00 ; '.'
0000000000015611         db  0x49 ; 'I'
0000000000015612         db  0x6e ; 'n'
0000000000015613         db  0x76 ; 'v'
0000000000015614         db  0x61 ; 'a'
0000000000015615         db  0x6c ; 'l'
0000000000015616         db  0x69 ; 'i'
0000000000015617         db  0x64 ; 'd'
0000000000015618         db  0x20 ; ' '
0000000000015619         db  0x72 ; 'r'
000000000001561a         db  0x65 ; 'e'
000000000001561b         db  0x67 ; 'g'
000000000001561c         db  0x75 ; 'u'
000000000001561d         db  0x6c ; 'l'
000000000001561e         db  0x61 ; 'a'
000000000001561f         db  0x72 ; 'r'
0000000000015620         db  0x20 ; ' '
0000000000015621         db  0x65 ; 'e'
0000000000015622         db  0x78 ; 'x'
0000000000015623         db  0x70 ; 'p'
0000000000015624         db  0x72 ; 'r'
0000000000015625         db  0x65 ; 'e'
0000000000015626         db  0x73 ; 's'
0000000000015627         db  0x73 ; 's'
0000000000015628         db  0x69 ; 'i'
0000000000015629         db  0x6f ; 'o'
000000000001562a         db  0x6e ; 'n'
000000000001562b         db  0x00 ; '.'
000000000001562c         db  0x49 ; 'I'
000000000001562d         db  0x6e ; 'n'
000000000001562e         db  0x76 ; 'v'
000000000001562f         db  0x61 ; 'a'
0000000000015630         db  0x6c ; 'l'
0000000000015631         db  0x69 ; 'i'
0000000000015632         db  0x64 ; 'd'
0000000000015633         db  0x20 ; ' '
0000000000015634         db  0x63 ; 'c'
0000000000015635         db  0x6f ; 'o'
0000000000015636         db  0x6c ; 'l'
0000000000015637         db  0x6c ; 'l'
0000000000015638         db  0x61 ; 'a'
0000000000015639         db  0x74 ; 't'
000000000001563a         db  0x69 ; 'i'
000000000001563b         db  0x6f ; 'o'
000000000001563c         db  0x6e ; 'n'
000000000001563d         db  0x20 ; ' '
000000000001563e         db  0x63 ; 'c'
000000000001563f         db  0x68 ; 'h'
0000000000015640         db  0x61 ; 'a'
0000000000015641         db  0x72 ; 'r'
0000000000015642         db  0x61 ; 'a'
0000000000015643         db  0x63 ; 'c'
0000000000015644         db  0x74 ; 't'
0000000000015645         db  0x65 ; 'e'
0000000000015646         db  0x72 ; 'r'
0000000000015647         db  0x00 ; '.'
0000000000015648         db  0x49 ; 'I'
0000000000015649         db  0x6e ; 'n'
000000000001564a         db  0x76 ; 'v'
000000000001564b         db  0x61 ; 'a'
000000000001564c         db  0x6c ; 'l'
000000000001564d         db  0x69 ; 'i'
000000000001564e         db  0x64 ; 'd'
000000000001564f         db  0x20 ; ' '
0000000000015650         db  0x63 ; 'c'
0000000000015651         db  0x68 ; 'h'
0000000000015652         db  0x61 ; 'a'
0000000000015653         db  0x72 ; 'r'
0000000000015654         db  0x61 ; 'a'
0000000000015655         db  0x63 ; 'c'
0000000000015656         db  0x74 ; 't'
0000000000015657         db  0x65 ; 'e'
0000000000015658         db  0x72 ; 'r'
0000000000015659         db  0x20 ; ' '
000000000001565a         db  0x63 ; 'c'
000000000001565b         db  0x6c ; 'l'
000000000001565c         db  0x61 ; 'a'
000000000001565d         db  0x73 ; 's'
000000000001565e         db  0x73 ; 's'
000000000001565f         db  0x20 ; ' '
0000000000015660         db  0x6e ; 'n'
0000000000015661         db  0x61 ; 'a'
0000000000015662         db  0x6d ; 'm'
0000000000015663         db  0x65 ; 'e'
0000000000015664         db  0x00 ; '.'
0000000000015665         db  0x54 ; 'T'
0000000000015666         db  0x72 ; 'r'
0000000000015667         db  0x61 ; 'a'
0000000000015668         db  0x69 ; 'i'
0000000000015669         db  0x6c ; 'l'
000000000001566a         db  0x69 ; 'i'
000000000001566b         db  0x6e ; 'n'
000000000001566c         db  0x67 ; 'g'
000000000001566d         db  0x20 ; ' '
000000000001566e         db  0x62 ; 'b'
000000000001566f         db  0x61 ; 'a'
0000000000015670         db  0x63 ; 'c'
0000000000015671         db  0x6b ; 'k'
0000000000015672         db  0x73 ; 's'
0000000000015673         db  0x6c ; 'l'
0000000000015674         db  0x61 ; 'a'
0000000000015675         db  0x73 ; 's'
0000000000015676         db  0x68 ; 'h'
0000000000015677         db  0x00 ; '.'
0000000000015678         db  0x49 ; 'I'
0000000000015679         db  0x6e ; 'n'
000000000001567a         db  0x76 ; 'v'
000000000001567b         db  0x61 ; 'a'
000000000001567c         db  0x6c ; 'l'
000000000001567d         db  0x69 ; 'i'
000000000001567e         db  0x64 ; 'd'
000000000001567f         db  0x20 ; ' '
0000000000015680         db  0x62 ; 'b'
0000000000015681         db  0x61 ; 'a'
0000000000015682         db  0x63 ; 'c'
0000000000015683         db  0x6b ; 'k'
0000000000015684         db  0x20 ; ' '
0000000000015685         db  0x72 ; 'r'
0000000000015686         db  0x65 ; 'e'
0000000000015687         db  0x66 ; 'f'
0000000000015688         db  0x65 ; 'e'
0000000000015689         db  0x72 ; 'r'
000000000001568a         db  0x65 ; 'e'
000000000001568b         db  0x6e ; 'n'
000000000001568c         db  0x63 ; 'c'
000000000001568d         db  0x65 ; 'e'
000000000001568e         db  0x00 ; '.'
000000000001568f         db  0x55 ; 'U'
0000000000015690         db  0x6e ; 'n'
0000000000015691         db  0x6d ; 'm'
0000000000015692         db  0x61 ; 'a'
0000000000015693         db  0x74 ; 't'
0000000000015694         db  0x63 ; 'c'
0000000000015695         db  0x68 ; 'h'
0000000000015696         db  0x65 ; 'e'
0000000000015697         db  0x64 ; 'd'
0000000000015698         db  0x20 ; ' '
0000000000015699         db  0x5b ; '['
000000000001569a         db  0x2c ; ','
000000000001569b         db  0x20 ; ' '
000000000001569c         db  0x5b ; '['
000000000001569d         db  0x5e ; '^'
000000000001569e         db  0x2c ; ','
000000000001569f         db  0x20 ; ' '
00000000000156a0         db  0x5b ; '['
00000000000156a1         db  0x3a ; ':'
00000000000156a2         db  0x2c ; ','
00000000000156a3         db  0x20 ; ' '
00000000000156a4         db  0x5b ; '['
00000000000156a5         db  0x2e ; '.'
00000000000156a6         db  0x2c ; ','
00000000000156a7         db  0x20 ; ' '
00000000000156a8         db  0x6f ; 'o'
00000000000156a9         db  0x72 ; 'r'
00000000000156aa         db  0x20 ; ' '
00000000000156ab         db  0x5b ; '['
00000000000156ac         db  0x3d ; '='
00000000000156ad         db  0x00 ; '.'
00000000000156ae         db  0x55 ; 'U'
00000000000156af         db  0x6e ; 'n'
00000000000156b0         db  0x6d ; 'm'
00000000000156b1         db  0x61 ; 'a'
00000000000156b2         db  0x74 ; 't'
00000000000156b3         db  0x63 ; 'c'
00000000000156b4         db  0x68 ; 'h'
00000000000156b5         db  0x65 ; 'e'
00000000000156b6         db  0x64 ; 'd'
00000000000156b7         db  0x20 ; ' '
00000000000156b8         db  0x28 ; '('
00000000000156b9         db  0x20 ; ' '
00000000000156ba         db  0x6f ; 'o'
00000000000156bb         db  0x72 ; 'r'
00000000000156bc         db  0x20 ; ' '
00000000000156bd         db  0x5c ; '\'
00000000000156be         db  0x28 ; '('
00000000000156bf         db  0x00 ; '.'
00000000000156c0         db  0x55 ; 'U'
00000000000156c1         db  0x6e ; 'n'
00000000000156c2         db  0x6d ; 'm'
00000000000156c3         db  0x61 ; 'a'
00000000000156c4         db  0x74 ; 't'
00000000000156c5         db  0x63 ; 'c'
00000000000156c6         db  0x68 ; 'h'
00000000000156c7         db  0x65 ; 'e'
00000000000156c8         db  0x64 ; 'd'
00000000000156c9         db  0x20 ; ' '
00000000000156ca         db  0x5c ; '\'
00000000000156cb         db  0x7b ; '{'
00000000000156cc         db  0x00 ; '.'
00000000000156cd         db  0x49 ; 'I'
00000000000156ce         db  0x6e ; 'n'
00000000000156cf         db  0x76 ; 'v'
00000000000156d0         db  0x61 ; 'a'
00000000000156d1         db  0x6c ; 'l'
00000000000156d2         db  0x69 ; 'i'
00000000000156d3         db  0x64 ; 'd'
00000000000156d4         db  0x20 ; ' '
00000000000156d5         db  0x63 ; 'c'
00000000000156d6         db  0x6f ; 'o'
00000000000156d7         db  0x6e ; 'n'
00000000000156d8         db  0x74 ; 't'
00000000000156d9         db  0x65 ; 'e'
00000000000156da         db  0x6e ; 'n'
00000000000156db         db  0x74 ; 't'
00000000000156dc         db  0x20 ; ' '
00000000000156dd         db  0x6f ; 'o'
00000000000156de         db  0x66 ; 'f'
00000000000156df         db  0x20 ; ' '
00000000000156e0         db  0x5c ; '\'
00000000000156e1         db  0x7b ; '{'
00000000000156e2         db  0x5c ; '\'
00000000000156e3         db  0x7d ; '}'
00000000000156e4         db  0x00 ; '.'
00000000000156e5         db  0x49 ; 'I'
00000000000156e6         db  0x6e ; 'n'
00000000000156e7         db  0x76 ; 'v'
00000000000156e8         db  0x61 ; 'a'
00000000000156e9         db  0x6c ; 'l'
00000000000156ea         db  0x69 ; 'i'
00000000000156eb         db  0x64 ; 'd'
00000000000156ec         db  0x20 ; ' '
00000000000156ed         db  0x72 ; 'r'
00000000000156ee         db  0x61 ; 'a'
00000000000156ef         db  0x6e ; 'n'
00000000000156f0         db  0x67 ; 'g'
00000000000156f1         db  0x65 ; 'e'
00000000000156f2         db  0x20 ; ' '
00000000000156f3         db  0x65 ; 'e'
00000000000156f4         db  0x6e ; 'n'
00000000000156f5         db  0x64 ; 'd'
00000000000156f6         db  0x00 ; '.'
00000000000156f7         db  0x4d ; 'M'
00000000000156f8         db  0x65 ; 'e'
00000000000156f9         db  0x6d ; 'm'
00000000000156fa         db  0x6f ; 'o'
00000000000156fb         db  0x72 ; 'r'
00000000000156fc         db  0x79 ; 'y'
00000000000156fd         db  0x20 ; ' '
00000000000156fe         db  0x65 ; 'e'
00000000000156ff         db  0x78 ; 'x'
0000000000015700         db  0x68 ; 'h'
0000000000015701         db  0x61 ; 'a'
0000000000015702         db  0x75 ; 'u'
0000000000015703         db  0x73 ; 's'
0000000000015704         db  0x74 ; 't'
0000000000015705         db  0x65 ; 'e'
0000000000015706         db  0x64 ; 'd'
0000000000015707         db  0x00 ; '.'
0000000000015708         db  0x49 ; 'I'
0000000000015709         db  0x6e ; 'n'
000000000001570a         db  0x76 ; 'v'
000000000001570b         db  0x61 ; 'a'
000000000001570c         db  0x6c ; 'l'
000000000001570d         db  0x69 ; 'i'
000000000001570e         db  0x64 ; 'd'
000000000001570f         db  0x20 ; ' '
0000000000015710         db  0x70 ; 'p'
0000000000015711         db  0x72 ; 'r'
0000000000015712         db  0x65 ; 'e'
0000000000015713         db  0x63 ; 'c'
0000000000015714         db  0x65 ; 'e'
0000000000015715         db  0x64 ; 'd'
0000000000015716         db  0x69 ; 'i'
0000000000015717         db  0x6e ; 'n'
0000000000015718         db  0x67 ; 'g'
0000000000015719         db  0x20 ; ' '
000000000001571a         db  0x72 ; 'r'
000000000001571b         db  0x65 ; 'e'
000000000001571c         db  0x67 ; 'g'
000000000001571d         db  0x75 ; 'u'
000000000001571e         db  0x6c ; 'l'
000000000001571f         db  0x61 ; 'a'
0000000000015720         db  0x72 ; 'r'
0000000000015721         db  0x20 ; ' '
0000000000015722         db  0x65 ; 'e'
0000000000015723         db  0x78 ; 'x'
0000000000015724         db  0x70 ; 'p'
0000000000015725         db  0x72 ; 'r'
0000000000015726         db  0x65 ; 'e'
0000000000015727         db  0x73 ; 's'
0000000000015728         db  0x73 ; 's'
0000000000015729         db  0x69 ; 'i'
000000000001572a         db  0x6f ; 'o'
000000000001572b         db  0x6e ; 'n'
000000000001572c         db  0x00 ; '.'
000000000001572d         db  0x50 ; 'P'
000000000001572e         db  0x72 ; 'r'
000000000001572f         db  0x65 ; 'e'
0000000000015730         db  0x6d ; 'm'
0000000000015731         db  0x61 ; 'a'
0000000000015732         db  0x74 ; 't'
0000000000015733         db  0x75 ; 'u'
0000000000015734         db  0x72 ; 'r'
0000000000015735         db  0x65 ; 'e'
0000000000015736         db  0x20 ; ' '
0000000000015737         db  0x65 ; 'e'
0000000000015738         db  0x6e ; 'n'
0000000000015739         db  0x64 ; 'd'
000000000001573a         db  0x20 ; ' '
000000000001573b         db  0x6f ; 'o'
000000000001573c         db  0x66 ; 'f'
000000000001573d         db  0x20 ; ' '
000000000001573e         db  0x72 ; 'r'
000000000001573f         db  0x65 ; 'e'
0000000000015740         db  0x67 ; 'g'
0000000000015741         db  0x75 ; 'u'
0000000000015742         db  0x6c ; 'l'
0000000000015743         db  0x61 ; 'a'
0000000000015744         db  0x72 ; 'r'
0000000000015745         db  0x20 ; ' '
0000000000015746         db  0x65 ; 'e'
0000000000015747         db  0x78 ; 'x'
0000000000015748         db  0x70 ; 'p'
0000000000015749         db  0x72 ; 'r'
000000000001574a         db  0x65 ; 'e'
000000000001574b         db  0x73 ; 's'
000000000001574c         db  0x73 ; 's'
000000000001574d         db  0x69 ; 'i'
000000000001574e         db  0x6f ; 'o'
000000000001574f         db  0x6e ; 'n'
0000000000015750         db  0x00 ; '.'
0000000000015751         db  0x52 ; 'R'
0000000000015752         db  0x65 ; 'e'
0000000000015753         db  0x67 ; 'g'
0000000000015754         db  0x75 ; 'u'
0000000000015755         db  0x6c ; 'l'
0000000000015756         db  0x61 ; 'a'
0000000000015757         db  0x72 ; 'r'
0000000000015758         db  0x20 ; ' '
0000000000015759         db  0x65 ; 'e'
000000000001575a         db  0x78 ; 'x'
000000000001575b         db  0x70 ; 'p'
000000000001575c         db  0x72 ; 'r'
000000000001575d         db  0x65 ; 'e'
000000000001575e         db  0x73 ; 's'
000000000001575f         db  0x73 ; 's'
0000000000015760         db  0x69 ; 'i'
0000000000015761         db  0x6f ; 'o'
0000000000015762         db  0x6e ; 'n'
0000000000015763         db  0x20 ; ' '
0000000000015764         db  0x74 ; 't'
0000000000015765         db  0x6f ; 'o'
0000000000015766         db  0x6f ; 'o'
0000000000015767         db  0x20 ; ' '
0000000000015768         db  0x62 ; 'b'
0000000000015769         db  0x69 ; 'i'
000000000001576a         db  0x67 ; 'g'
000000000001576b         db  0x00 ; '.'
000000000001576c         db  0x55 ; 'U'
000000000001576d         db  0x6e ; 'n'
000000000001576e         db  0x6d ; 'm'
000000000001576f         db  0x61 ; 'a'
0000000000015770         db  0x74 ; 't'
0000000000015771         db  0x63 ; 'c'
0000000000015772         db  0x68 ; 'h'
0000000000015773         db  0x65 ; 'e'
0000000000015774         db  0x64 ; 'd'
0000000000015775         db  0x20 ; ' '
0000000000015776         db  0x29 ; ')'
0000000000015777         db  0x20 ; ' '
0000000000015778         db  0x6f ; 'o'
0000000000015779         db  0x72 ; 'r'
000000000001577a         db  0x20 ; ' '
000000000001577b         db  0x5c ; '\'
000000000001577c         db  0x29 ; ')'
000000000001577d         db  0x00 ; '.'
000000000001577e         db  0x00 ; '.'
000000000001577f         db  0x00 ; '.'
0000000000015780         dq         2 dup (7.7486e-304)                         ; DATA XREF=re_compile_fastmap_iter.isra.30+1044, re_compile_fastmap_iter.isra.30+1204
0000000000015790         db  0x43 ; 'C'                                         ; DATA XREF=hard_locale+24
0000000000015791         db  0x00 ; '.'
                     aPosix:
0000000000015792         db         "POSIX", 0                                  ; DATA XREF=hard_locale+64
                     aAscii:
0000000000015798         db         "ASCII", 0                                  ; DATA XREF=locale_charset+22, locale_charset+48
000000000001579e         db  0x00 ; '.'
000000000001579f         db  0x00 ; '.'


        ; Section .eh_frame_hdr
        ; Range: [0x157a0; 0x15d1c[ (1404 bytes)
        ; File offset : [87968; 89372[ (1404 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

00000000000157a0         db  0x01 ; '.'
00000000000157a1         db  0x1b ; '.'
00000000000157a2         db  0x03 ; '.'
00000000000157a3         db  0x3b ; ';'
00000000000157a4         db  0x7c ; '|'
00000000000157a5         db  0x05 ; '.'
00000000000157a6         db  0x00 ; '.'
00000000000157a7         db  0x00 ; '.'
00000000000157a8         db  0xae ; '.'
00000000000157a9         db  0x00 ; '.'
00000000000157aa         db  0x00 ; '.'
00000000000157ab         db  0x00 ; '.'
00000000000157ac         db  0xb0 ; '.'
00000000000157ad         db  0xc0 ; '.'
00000000000157ae         db  0xfe ; '.'
00000000000157af         db  0xff ; '.'
00000000000157b0         db  0xc8 ; '.'
00000000000157b1         db  0x05 ; '.'
00000000000157b2         db  0x00 ; '.'
00000000000157b3         db  0x00 ; '.'
00000000000157b4         db  0xe0 ; '.'
00000000000157b5         db  0xc4 ; '.'
00000000000157b6         db  0xfe ; '.'
00000000000157b7         db  0xff ; '.'
00000000000157b8         db  0xf0 ; '.'
00000000000157b9         db  0x05 ; '.'
00000000000157ba         db  0x00 ; '.'
00000000000157bb         db  0x00 ; '.'
00000000000157bc         db  0xf0 ; '.'
00000000000157bd         db  0xc4 ; '.'
00000000000157be         db  0xfe ; '.'
00000000000157bf         db  0xff ; '.'
00000000000157c0         db  0xfc ; '.'
00000000000157c1         db  0x06 ; '.'
00000000000157c2         db  0x00 ; '.'
00000000000157c3         db  0x00 ; '.'
00000000000157c4         db  0x80 ; '.'
00000000000157c5         db  0xcc ; '.'
00000000000157c6         db  0xfe ; '.'
00000000000157c7         db  0xff ; '.'
00000000000157c8         db  0x98 ; '.'
00000000000157c9         db  0x05 ; '.'
00000000000157ca         db  0x00 ; '.'
00000000000157cb         db  0x00 ; '.'
00000000000157cc         db  0x90 ; '.'
00000000000157cd         db  0xcd ; '.'
00000000000157ce         db  0xfe ; '.'
00000000000157cf         db  0xff ; '.'
00000000000157d0         db  0x08 ; '.'
00000000000157d1         db  0x06 ; '.'
00000000000157d2         db  0x00 ; '.'
00000000000157d3         db  0x00 ; '.'
00000000000157d4         db  0x90 ; '.'
00000000000157d5         db  0xce ; '.'
00000000000157d6         db  0xfe ; '.'
00000000000157d7         db  0xff ; '.'
00000000000157d8         db  0x6c ; 'l'
00000000000157d9         db  0x06 ; '.'
00000000000157da         db  0x00 ; '.'
00000000000157db         db  0x00 ; '.'
00000000000157dc         db  0x30 ; '0'
00000000000157dd         db  0xd4 ; '.'
00000000000157de         db  0xfe ; '.'
00000000000157df         db  0xff ; '.'
00000000000157e0         db  0xd0 ; '.'
00000000000157e1         db  0x06 ; '.'
00000000000157e2         db  0x00 ; '.'
00000000000157e3         db  0x00 ; '.'
00000000000157e4         db  0xf0 ; '.'
00000000000157e5         db  0xd7 ; '.'
00000000000157e6         db  0xfe ; '.'
00000000000157e7         db  0xff ; '.'
00000000000157e8         db  0x58 ; 'X'
00000000000157e9         db  0x07 ; '.'
00000000000157ea         db  0x00 ; '.'
00000000000157eb         db  0x00 ; '.'
00000000000157ec         db  0x00 ; '.'
00000000000157ed         db  0xd8 ; '.'
00000000000157ee         db  0xfe ; '.'
00000000000157ef         db  0xff ; '.'
00000000000157f0         db  0x6c ; 'l'
00000000000157f1         db  0x07 ; '.'
00000000000157f2         db  0x00 ; '.'
00000000000157f3         db  0x00 ; '.'
00000000000157f4         db  0x10 ; '.'
00000000000157f5         db  0xd8 ; '.'
00000000000157f6         db  0xfe ; '.'
00000000000157f7         db  0xff ; '.'
00000000000157f8         db  0x80 ; '.'
00000000000157f9         db  0x07 ; '.'
00000000000157fa         db  0x00 ; '.'
00000000000157fb         db  0x00 ; '.'
00000000000157fc         db  0xc0 ; '.'
00000000000157fd         db  0xd8 ; '.'
00000000000157fe         db  0xfe ; '.'
00000000000157ff         db  0xff ; '.'
0000000000015800         db  0xb0 ; '.'
0000000000015801         db  0x07 ; '.'
0000000000015802         db  0x00 ; '.'
0000000000015803         db  0x00 ; '.'
0000000000015804         db  0xc0 ; '.'
0000000000015805         db  0xd9 ; '.'
0000000000015806         db  0xfe ; '.'
0000000000015807         db  0xff ; '.'
0000000000015808         db  0x00 ; '.'
0000000000015809         db  0x08 ; '.'
000000000001580a         db  0x00 ; '.'
000000000001580b         db  0x00 ; '.'
000000000001580c         db  0x60 ; '`'
000000000001580d         db  0xda ; '.'
000000000001580e         db  0xfe ; '.'
000000000001580f         db  0xff ; '.'
0000000000015810         db  0x20 ; ' '
0000000000015811         db  0x08 ; '.'
0000000000015812         db  0x00 ; '.'
0000000000015813         db  0x00 ; '.'
0000000000015814         db  0x50 ; 'P'
0000000000015815         db  0xdb ; '.'
0000000000015816         db  0xfe ; '.'
0000000000015817         db  0xff ; '.'
0000000000015818         db  0x64 ; 'd'
0000000000015819         db  0x08 ; '.'
000000000001581a         db  0x00 ; '.'
000000000001581b         db  0x00 ; '.'
000000000001581c         db  0x90 ; '.'
000000000001581d         db  0xed ; '.'
000000000001581e         db  0xfe ; '.'
000000000001581f         db  0xff ; '.'
0000000000015820         db  0xdc ; '.'
0000000000015821         db  0x08 ; '.'
0000000000015822         db  0x00 ; '.'
0000000000015823         db  0x00 ; '.'
0000000000015824         db  0x40 ; '@'
0000000000015825         db  0xef ; '.'
0000000000015826         db  0xfe ; '.'
0000000000015827         db  0xff ; '.'
0000000000015828         db  0x48 ; 'H'
0000000000015829         db  0x09 ; '.'
000000000001582a         db  0x00 ; '.'
000000000001582b         db  0x00 ; '.'
000000000001582c         db  0x80 ; '.'
000000000001582d         db  0xef ; '.'
000000000001582e         db  0xfe ; '.'
000000000001582f         db  0xff ; '.'
0000000000015830         db  0x74 ; 't'
0000000000015831         db  0x09 ; '.'
0000000000015832         db  0x00 ; '.'
0000000000015833         db  0x00 ; '.'
0000000000015834         db  0xa0 ; '.'
0000000000015835         db  0xef ; '.'
0000000000015836         db  0xfe ; '.'
0000000000015837         db  0xff ; '.'
0000000000015838         db  0x88 ; '.'
0000000000015839         db  0x09 ; '.'
000000000001583a         db  0x00 ; '.'
000000000001583b         db  0x00 ; '.'
000000000001583c         db  0xc0 ; '.'
000000000001583d         db  0xef ; '.'
000000000001583e         db  0xfe ; '.'
000000000001583f         db  0xff ; '.'
0000000000015840         db  0x9c ; '.'
0000000000015841         db  0x09 ; '.'
0000000000015842         db  0x00 ; '.'
0000000000015843         db  0x00 ; '.'
0000000000015844         db  0x00 ; '.'
0000000000015845         db  0xf0 ; '.'
0000000000015846         db  0xfe ; '.'
0000000000015847         db  0xff ; '.'
0000000000015848         db  0xb0 ; '.'
0000000000015849         db  0x09 ; '.'
000000000001584a         db  0x00 ; '.'
000000000001584b         db  0x00 ; '.'
000000000001584c         db  0x20 ; ' '
000000000001584d         db  0xf0 ; '.'
000000000001584e         db  0xfe ; '.'
000000000001584f         db  0xff ; '.'
0000000000015850         db  0xc4 ; '.'
0000000000015851         db  0x09 ; '.'
0000000000015852         db  0x00 ; '.'
0000000000015853         db  0x00 ; '.'
0000000000015854         db  0x50 ; 'P'
0000000000015855         db  0xf0 ; '.'
0000000000015856         db  0xfe ; '.'
0000000000015857         db  0xff ; '.'
0000000000015858         db  0xd8 ; '.'
0000000000015859         db  0x09 ; '.'
000000000001585a         db  0x00 ; '.'
000000000001585b         db  0x00 ; '.'
000000000001585c         db  0xd0 ; '.'
000000000001585d         db  0xf0 ; '.'
000000000001585e         db  0xfe ; '.'
000000000001585f         db  0xff ; '.'
0000000000015860         db  0x2c ; ','
0000000000015861         db  0x0a ; '.'
0000000000015862         db  0x00 ; '.'
0000000000015863         db  0x00 ; '.'
0000000000015864         db  0xc0 ; '.'
0000000000015865         db  0xf1 ; '.'
0000000000015866         db  0xfe ; '.'
0000000000015867         db  0xff ; '.'
0000000000015868         db  0x98 ; '.'
0000000000015869         db  0x0a ; '.'
000000000001586a         db  0x00 ; '.'
000000000001586b         db  0x00 ; '.'
000000000001586c         db  0xd0 ; '.'
000000000001586d         db  0xf1 ; '.'
000000000001586e         db  0xfe ; '.'
000000000001586f         db  0xff ; '.'
0000000000015870         db  0xac ; '.'
0000000000015871         db  0x0a ; '.'
0000000000015872         db  0x00 ; '.'
0000000000015873         db  0x00 ; '.'
0000000000015874         db  0x70 ; 'p'
0000000000015875         db  0xf2 ; '.'
0000000000015876         db  0xfe ; '.'
0000000000015877         db  0xff ; '.'
0000000000015878         db  0xd8 ; '.'
0000000000015879         db  0x0a ; '.'
000000000001587a         db  0x00 ; '.'
000000000001587b         db  0x00 ; '.'
000000000001587c         db  0x90 ; '.'
000000000001587d         db  0xf2 ; '.'
000000000001587e         db  0xfe ; '.'
000000000001587f         db  0xff ; '.'
0000000000015880         db  0xec ; '.'
0000000000015881         db  0x0a ; '.'
0000000000015882         db  0x00 ; '.'
0000000000015883         db  0x00 ; '.'
0000000000015884         db  0xa0 ; '.'
0000000000015885         db  0xf2 ; '.'
0000000000015886         db  0xfe ; '.'
0000000000015887         db  0xff ; '.'
0000000000015888         db  0x00 ; '.'
0000000000015889         db  0x0b ; '.'
000000000001588a         db  0x00 ; '.'
000000000001588b         db  0x00 ; '.'
000000000001588c         db  0xc0 ; '.'
000000000001588d         db  0xf2 ; '.'
000000000001588e         db  0xfe ; '.'
000000000001588f         db  0xff ; '.'
0000000000015890         db  0x14 ; '.'
0000000000015891         db  0x0b ; '.'
0000000000015892         db  0x00 ; '.'
0000000000015893         db  0x00 ; '.'
0000000000015894         db  0xe0 ; '.'
0000000000015895         db  0xf2 ; '.'
0000000000015896         db  0xfe ; '.'
0000000000015897         db  0xff ; '.'
0000000000015898         db  0x28 ; '('
0000000000015899         db  0x0b ; '.'
000000000001589a         db  0x00 ; '.'
000000000001589b         db  0x00 ; '.'
000000000001589c         db  0x70 ; 'p'
000000000001589d         db  0xf3 ; '.'
000000000001589e         db  0xfe ; '.'
000000000001589f         db  0xff ; '.'
00000000000158a0         db  0x44 ; 'D'
00000000000158a1         db  0x0b ; '.'
00000000000158a2         db  0x00 ; '.'
00000000000158a3         db  0x00 ; '.'
00000000000158a4         db  0x00 ; '.'
00000000000158a5         db  0xf4 ; '.'
00000000000158a6         db  0xfe ; '.'
00000000000158a7         db  0xff ; '.'
00000000000158a8         db  0x60 ; '`'
00000000000158a9         db  0x0b ; '.'
00000000000158aa         db  0x00 ; '.'
00000000000158ab         db  0x00 ; '.'
00000000000158ac         db  0x10 ; '.'
00000000000158ad         db  0xf4 ; '.'
00000000000158ae         db  0xfe ; '.'
00000000000158af         db  0xff ; '.'
00000000000158b0         db  0x74 ; 't'
00000000000158b1         db  0x0b ; '.'
00000000000158b2         db  0x00 ; '.'
00000000000158b3         db  0x00 ; '.'
00000000000158b4         db  0x20 ; ' '
00000000000158b5         db  0xf4 ; '.'
00000000000158b6         db  0xfe ; '.'
00000000000158b7         db  0xff ; '.'
00000000000158b8         db  0x88 ; '.'
00000000000158b9         db  0x0b ; '.'
00000000000158ba         db  0x00 ; '.'
00000000000158bb         db  0x00 ; '.'
00000000000158bc         db  0xc0 ; '.'
00000000000158bd         db  0xf4 ; '.'
00000000000158be         db  0xfe ; '.'
00000000000158bf         db  0xff ; '.'
00000000000158c0         db  0xa4 ; '.'
00000000000158c1         db  0x0b ; '.'
00000000000158c2         db  0x00 ; '.'
00000000000158c3         db  0x00 ; '.'
00000000000158c4         db  0xd0 ; '.'
00000000000158c5         db  0xf4 ; '.'
00000000000158c6         db  0xfe ; '.'
00000000000158c7         db  0xff ; '.'
00000000000158c8         db  0xb8 ; '.'
00000000000158c9         db  0x0b ; '.'
00000000000158ca         db  0x00 ; '.'
00000000000158cb         db  0x00 ; '.'
00000000000158cc         db  0xf0 ; '.'
00000000000158cd         db  0xf4 ; '.'
00000000000158ce         db  0xfe ; '.'
00000000000158cf         db  0xff ; '.'
00000000000158d0         db  0xcc ; '.'
00000000000158d1         db  0x0b ; '.'
00000000000158d2         db  0x00 ; '.'
00000000000158d3         db  0x00 ; '.'
00000000000158d4         db  0x00 ; '.'
00000000000158d5         db  0xf5 ; '.'
00000000000158d6         db  0xfe ; '.'
00000000000158d7         db  0xff ; '.'
00000000000158d8         db  0xe0 ; '.'
00000000000158d9         db  0x0b ; '.'
00000000000158da         db  0x00 ; '.'
00000000000158db         db  0x00 ; '.'
00000000000158dc         db  0x90 ; '.'
00000000000158dd         db  0xf5 ; '.'
00000000000158de         db  0xfe ; '.'
00000000000158df         db  0xff ; '.'
00000000000158e0         db  0xfc ; '.'
00000000000158e1         db  0x0b ; '.'
00000000000158e2         db  0x00 ; '.'
00000000000158e3         db  0x00 ; '.'
00000000000158e4         db  0x30 ; '0'
00000000000158e5         db  0xf6 ; '.'
00000000000158e6         db  0xfe ; '.'
00000000000158e7         db  0xff ; '.'
00000000000158e8         db  0x18 ; '.'
00000000000158e9         db  0x0c ; '.'
00000000000158ea         db  0x00 ; '.'
00000000000158eb         db  0x00 ; '.'
00000000000158ec         db  0x40 ; '@'
00000000000158ed         db  0xf6 ; '.'
00000000000158ee         db  0xfe ; '.'
00000000000158ef         db  0xff ; '.'
00000000000158f0         db  0x2c ; ','
00000000000158f1         db  0x0c ; '.'
00000000000158f2         db  0x00 ; '.'
00000000000158f3         db  0x00 ; '.'
00000000000158f4         db  0x60 ; '`'
00000000000158f5         db  0xf6 ; '.'
00000000000158f6         db  0xfe ; '.'
00000000000158f7         db  0xff ; '.'
00000000000158f8         db  0x40 ; '@'
00000000000158f9         db  0x0c ; '.'
00000000000158fa         db  0x00 ; '.'
00000000000158fb         db  0x00 ; '.'
00000000000158fc         db  0x80 ; '.'
00000000000158fd         db  0xf6 ; '.'
00000000000158fe         db  0xfe ; '.'
00000000000158ff         db  0xff ; '.'
0000000000015900         db  0x54 ; 'T'
0000000000015901         db  0x0c ; '.'
0000000000015902         db  0x00 ; '.'
0000000000015903         db  0x00 ; '.'
0000000000015904         db  0x90 ; '.'
0000000000015905         db  0xf6 ; '.'
0000000000015906         db  0xfe ; '.'
0000000000015907         db  0xff ; '.'
0000000000015908         db  0x68 ; 'h'
0000000000015909         db  0x0c ; '.'
000000000001590a         db  0x00 ; '.'
000000000001590b         db  0x00 ; '.'
000000000001590c         db  0xb0 ; '.'
000000000001590d         db  0xf6 ; '.'
000000000001590e         db  0xfe ; '.'
000000000001590f         db  0xff ; '.'
0000000000015910         db  0x7c ; '|'
0000000000015911         db  0x0c ; '.'
0000000000015912         db  0x00 ; '.'
0000000000015913         db  0x00 ; '.'
0000000000015914         db  0xd0 ; '.'
0000000000015915         db  0xf6 ; '.'
0000000000015916         db  0xfe ; '.'
0000000000015917         db  0xff ; '.'
0000000000015918         db  0x90 ; '.'
0000000000015919         db  0x0c ; '.'
000000000001591a         db  0x00 ; '.'
000000000001591b         db  0x00 ; '.'
000000000001591c         db  0xf0 ; '.'
000000000001591d         db  0xf6 ; '.'
000000000001591e         db  0xfe ; '.'
000000000001591f         db  0xff ; '.'
0000000000015920         db  0xa8 ; '.'
0000000000015921         db  0x0c ; '.'
0000000000015922         db  0x00 ; '.'
0000000000015923         db  0x00 ; '.'
0000000000015924         db  0x50 ; 'P'
0000000000015925         db  0xf7 ; '.'
0000000000015926         db  0xfe ; '.'
0000000000015927         db  0xff ; '.'
0000000000015928         db  0xe0 ; '.'
0000000000015929         db  0x0c ; '.'
000000000001592a         db  0x00 ; '.'
000000000001592b         db  0x00 ; '.'
000000000001592c         db  0x70 ; 'p'
000000000001592d         db  0xf7 ; '.'
000000000001592e         db  0xfe ; '.'
000000000001592f         db  0xff ; '.'
0000000000015930         db  0xf8 ; '.'
0000000000015931         db  0x0c ; '.'
0000000000015932         db  0x00 ; '.'
0000000000015933         db  0x00 ; '.'
0000000000015934         db  0x90 ; '.'
0000000000015935         db  0xf7 ; '.'
0000000000015936         db  0xfe ; '.'
0000000000015937         db  0xff ; '.'
0000000000015938         db  0x18 ; '.'
0000000000015939         db  0x0d ; '.'
000000000001593a         db  0x00 ; '.'
000000000001593b         db  0x00 ; '.'
000000000001593c         db  0xd0 ; '.'
000000000001593d         db  0xf7 ; '.'
000000000001593e         db  0xfe ; '.'
000000000001593f         db  0xff ; '.'
0000000000015940         db  0x50 ; 'P'
0000000000015941         db  0x0d ; '.'
0000000000015942         db  0x00 ; '.'
0000000000015943         db  0x00 ; '.'
0000000000015944         db  0xf0 ; '.'
0000000000015945         db  0xfb ; '.'
0000000000015946         db  0xfe ; '.'
0000000000015947         db  0xff ; '.'
0000000000015948         db  0x64 ; 'd'
0000000000015949         db  0x0e ; '.'
000000000001594a         db  0x00 ; '.'
000000000001594b         db  0x00 ; '.'
000000000001594c         db  0x10 ; '.'
000000000001594d         db  0xfc ; '.'
000000000001594e         db  0xfe ; '.'
000000000001594f         db  0xff ; '.'
0000000000015950         db  0x78 ; 'x'
0000000000015951         db  0x0e ; '.'
0000000000015952         db  0x00 ; '.'
0000000000015953         db  0x00 ; '.'
0000000000015954         db  0x90 ; '.'
0000000000015955         db  0xfc ; '.'
0000000000015956         db  0xfe ; '.'
0000000000015957         db  0xff ; '.'
0000000000015958         db  0x94 ; '.'
0000000000015959         db  0x0e ; '.'
000000000001595a         db  0x00 ; '.'
000000000001595b         db  0x00 ; '.'
000000000001595c         db  0x70 ; 'p'
000000000001595d         db  0xfd ; '.'
000000000001595e         db  0xfe ; '.'
000000000001595f         db  0xff ; '.'
0000000000015960         db  0xc0 ; '.'
0000000000015961         db  0x0e ; '.'
0000000000015962         db  0x00 ; '.'
0000000000015963         db  0x00 ; '.'
0000000000015964         db  0xf0 ; '.'
0000000000015965         db  0xfd ; '.'
0000000000015966         db  0xfe ; '.'
0000000000015967         db  0xff ; '.'
0000000000015968         db  0xe0 ; '.'
0000000000015969         db  0x0e ; '.'
000000000001596a         db  0x00 ; '.'
000000000001596b         db  0x00 ; '.'
000000000001596c         db  0x10 ; '.'
000000000001596d         db  0xfe ; '.'
000000000001596e         db  0xfe ; '.'
000000000001596f         db  0xff ; '.'
0000000000015970         db  0xfc ; '.'
0000000000015971         db  0x0e ; '.'
0000000000015972         db  0x00 ; '.'
0000000000015973         db  0x00 ; '.'
0000000000015974         db  0x40 ; '@'
0000000000015975         db  0xfe ; '.'
0000000000015976         db  0xfe ; '.'
0000000000015977         db  0xff ; '.'
0000000000015978         db  0x10 ; '.'
0000000000015979         db  0x0f ; '.'
000000000001597a         db  0x00 ; '.'
000000000001597b         db  0x00 ; '.'
000000000001597c         db  0x50 ; 'P'
000000000001597d         db  0xfe ; '.'
000000000001597e         db  0xfe ; '.'
000000000001597f         db  0xff ; '.'
0000000000015980         db  0x24 ; '$'
0000000000015981         db  0x0f ; '.'
0000000000015982         db  0x00 ; '.'
0000000000015983         db  0x00 ; '.'
0000000000015984         db  0x90 ; '.'
0000000000015985         db  0xfe ; '.'
0000000000015986         db  0xfe ; '.'
0000000000015987         db  0xff ; '.'
0000000000015988         db  0x48 ; 'H'
0000000000015989         db  0x0f ; '.'
000000000001598a         db  0x00 ; '.'
000000000001598b         db  0x00 ; '.'
000000000001598c         db  0xc0 ; '.'
000000000001598d         db  0xfe ; '.'
000000000001598e         db  0xfe ; '.'
000000000001598f         db  0xff ; '.'
0000000000015990         db  0x5c ; '\'
0000000000015991         db  0x0f ; '.'
0000000000015992         db  0x00 ; '.'
0000000000015993         db  0x00 ; '.'
0000000000015994         db  0x50 ; 'P'
0000000000015995         db  0xff ; '.'
0000000000015996         db  0xfe ; '.'
0000000000015997         db  0xff ; '.'
0000000000015998         db  0x74 ; 't'
0000000000015999         db  0x0f ; '.'
000000000001599a         db  0x00 ; '.'
000000000001599b         db  0x00 ; '.'
000000000001599c         db  0xa0 ; '.'
000000000001599d         db  0xff ; '.'
000000000001599e         db  0xfe ; '.'
000000000001599f         db  0xff ; '.'
00000000000159a0         db  0x8c ; '.'
00000000000159a1         db  0x0f ; '.'
00000000000159a2         db  0x00 ; '.'
00000000000159a3         db  0x00 ; '.'
00000000000159a4         db  0xc0 ; '.'
00000000000159a5         db  0xff ; '.'
00000000000159a6         db  0xfe ; '.'
00000000000159a7         db  0xff ; '.'
00000000000159a8         db  0xa8 ; '.'
00000000000159a9         db  0x0f ; '.'
00000000000159aa         db  0x00 ; '.'
00000000000159ab         db  0x00 ; '.'
00000000000159ac         db  0xf0 ; '.'
00000000000159ad         db  0xff ; '.'
00000000000159ae         db  0xfe ; '.'
00000000000159af         db  0xff ; '.'
00000000000159b0         db  0xc4 ; '.'
00000000000159b1         db  0x0f ; '.'
00000000000159b2         db  0x00 ; '.'
00000000000159b3         db  0x00 ; '.'
00000000000159b4         db  0x20 ; ' '
00000000000159b5         db  0x00 ; '.'
00000000000159b6         db  0xff ; '.'
00000000000159b7         db  0xff ; '.'
00000000000159b8         db  0xec ; '.'
00000000000159b9         db  0x0f ; '.'
00000000000159ba         db  0x00 ; '.'
00000000000159bb         db  0x00 ; '.'
00000000000159bc         db  0x40 ; '@'
00000000000159bd         db  0x00 ; '.'
00000000000159be         db  0xff ; '.'
00000000000159bf         db  0xff ; '.'
00000000000159c0         db  0x08 ; '.'
00000000000159c1         db  0x10 ; '.'
00000000000159c2         db  0x00 ; '.'
00000000000159c3         db  0x00 ; '.'
00000000000159c4         db  0x80 ; '.'
00000000000159c5         db  0x00 ; '.'
00000000000159c6         db  0xff ; '.'
00000000000159c7         db  0xff ; '.'
00000000000159c8         db  0x20 ; ' '
00000000000159c9         db  0x10 ; '.'
00000000000159ca         db  0x00 ; '.'
00000000000159cb         db  0x00 ; '.'
00000000000159cc         db  0xe0 ; '.'
00000000000159cd         db  0x00 ; '.'
00000000000159ce         db  0xff ; '.'
00000000000159cf         db  0xff ; '.'
00000000000159d0         db  0x50 ; 'P'
00000000000159d1         db  0x10 ; '.'
00000000000159d2         db  0x00 ; '.'
00000000000159d3         db  0x00 ; '.'
00000000000159d4         db  0x70 ; 'p'
00000000000159d5         db  0x01 ; '.'
00000000000159d6         db  0xff ; '.'
00000000000159d7         db  0xff ; '.'
00000000000159d8         db  0x90 ; '.'
00000000000159d9         db  0x10 ; '.'
00000000000159da         db  0x00 ; '.'
00000000000159db         db  0x00 ; '.'
00000000000159dc         db  0xa0 ; '.'
00000000000159dd         db  0x02 ; '.'
00000000000159de         db  0xff ; '.'
00000000000159df         db  0xff ; '.'
00000000000159e0         db  0xa4 ; '.'
00000000000159e1         db  0x10 ; '.'
00000000000159e2         db  0x00 ; '.'
00000000000159e3         db  0x00 ; '.'
00000000000159e4         db  0xc0 ; '.'
00000000000159e5         db  0x02 ; '.'
00000000000159e6         db  0xff ; '.'
00000000000159e7         db  0xff ; '.'
00000000000159e8         db  0xb8 ; '.'
00000000000159e9         db  0x10 ; '.'
00000000000159ea         db  0x00 ; '.'
00000000000159eb         db  0x00 ; '.'
00000000000159ec         db  0xf0 ; '.'
00000000000159ed         db  0x04 ; '.'
00000000000159ee         db  0xff ; '.'
00000000000159ef         db  0xff ; '.'
00000000000159f0         db  0x4c ; 'L'
00000000000159f1         db  0x11 ; '.'
00000000000159f2         db  0x00 ; '.'
00000000000159f3         db  0x00 ; '.'
00000000000159f4         db  0x60 ; '`'
00000000000159f5         db  0x05 ; '.'
00000000000159f6         db  0xff ; '.'
00000000000159f7         db  0xff ; '.'
00000000000159f8         db  0x60 ; '`'
00000000000159f9         db  0x11 ; '.'
00000000000159fa         db  0x00 ; '.'
00000000000159fb         db  0x00 ; '.'
00000000000159fc         db  0xd0 ; '.'
00000000000159fd         db  0x05 ; '.'
00000000000159fe         db  0xff ; '.'
00000000000159ff         db  0xff ; '.'
0000000000015a00         db  0x8c ; '.'
0000000000015a01         db  0x11 ; '.'
0000000000015a02         db  0x00 ; '.'
0000000000015a03         db  0x00 ; '.'
0000000000015a04         db  0x30 ; '0'
0000000000015a05         db  0x06 ; '.'
0000000000015a06         db  0xff ; '.'
0000000000015a07         db  0xff ; '.'
0000000000015a08         db  0xb8 ; '.'
0000000000015a09         db  0x11 ; '.'
0000000000015a0a         db  0x00 ; '.'
0000000000015a0b         db  0x00 ; '.'
0000000000015a0c         db  0xd0 ; '.'
0000000000015a0d         db  0x06 ; '.'
0000000000015a0e         db  0xff ; '.'
0000000000015a0f         db  0xff ; '.'
0000000000015a10         db  0xec ; '.'
0000000000015a11         db  0x11 ; '.'
0000000000015a12         db  0x00 ; '.'
0000000000015a13         db  0x00 ; '.'
0000000000015a14         db  0x40 ; '@'
0000000000015a15         db  0x07 ; '.'
0000000000015a16         db  0xff ; '.'
0000000000015a17         db  0xff ; '.'
0000000000015a18         db  0x18 ; '.'
0000000000015a19         db  0x12 ; '.'
0000000000015a1a         db  0x00 ; '.'
0000000000015a1b         db  0x00 ; '.'
0000000000015a1c         db  0x70 ; 'p'
0000000000015a1d         db  0x08 ; '.'
0000000000015a1e         db  0xff ; '.'
0000000000015a1f         db  0xff ; '.'
0000000000015a20         db  0x50 ; 'P'
0000000000015a21         db  0x12 ; '.'
0000000000015a22         db  0x00 ; '.'
0000000000015a23         db  0x00 ; '.'
0000000000015a24         db  0x60 ; '`'
0000000000015a25         db  0x09 ; '.'
0000000000015a26         db  0xff ; '.'
0000000000015a27         db  0xff ; '.'
0000000000015a28         db  0xa0 ; '.'
0000000000015a29         db  0x12 ; '.'
0000000000015a2a         db  0x00 ; '.'
0000000000015a2b         db  0x00 ; '.'
0000000000015a2c         db  0xd0 ; '.'
0000000000015a2d         db  0x09 ; '.'
0000000000015a2e         db  0xff ; '.'
0000000000015a2f         db  0xff ; '.'
0000000000015a30         db  0xd0 ; '.'
0000000000015a31         db  0x12 ; '.'
0000000000015a32         db  0x00 ; '.'
0000000000015a33         db  0x00 ; '.'
0000000000015a34         db  0xa0 ; '.'
0000000000015a35         db  0x0b ; '.'
0000000000015a36         db  0xff ; '.'
0000000000015a37         db  0xff ; '.'
0000000000015a38         db  0x1c ; '.'
0000000000015a39         db  0x13 ; '.'
0000000000015a3a         db  0x00 ; '.'
0000000000015a3b         db  0x00 ; '.'
0000000000015a3c         db  0xc0 ; '.'
0000000000015a3d         db  0x11 ; '.'
0000000000015a3e         db  0xff ; '.'
0000000000015a3f         db  0xff ; '.'
0000000000015a40         db  0x68 ; 'h'
0000000000015a41         db  0x13 ; '.'
0000000000015a42         db  0x00 ; '.'
0000000000015a43         db  0x00 ; '.'
0000000000015a44         db  0x10 ; '.'
0000000000015a45         db  0x13 ; '.'
0000000000015a46         db  0xff ; '.'
0000000000015a47         db  0xff ; '.'
0000000000015a48         db  0xc4 ; '.'
0000000000015a49         db  0x13 ; '.'
0000000000015a4a         db  0x00 ; '.'
0000000000015a4b         db  0x00 ; '.'
0000000000015a4c         db  0xa0 ; '.'
0000000000015a4d         db  0x13 ; '.'
0000000000015a4e         db  0xff ; '.'
0000000000015a4f         db  0xff ; '.'
0000000000015a50         db  0xf0 ; '.'
0000000000015a51         db  0x13 ; '.'
0000000000015a52         db  0x00 ; '.'
0000000000015a53         db  0x00 ; '.'
0000000000015a54         db  0xd0 ; '.'
0000000000015a55         db  0x13 ; '.'
0000000000015a56         db  0xff ; '.'
0000000000015a57         db  0xff ; '.'
0000000000015a58         db  0x0c ; '.'
0000000000015a59         db  0x14 ; '.'
0000000000015a5a         db  0x00 ; '.'
0000000000015a5b         db  0x00 ; '.'
0000000000015a5c         db  0x00 ; '.'
0000000000015a5d         db  0x14 ; '.'
0000000000015a5e         db  0xff ; '.'
0000000000015a5f         db  0xff ; '.'
0000000000015a60         db  0x20 ; ' '
0000000000015a61         db  0x14 ; '.'
0000000000015a62         db  0x00 ; '.'
0000000000015a63         db  0x00 ; '.'
0000000000015a64         db  0x20 ; ' '
0000000000015a65         db  0x14 ; '.'
0000000000015a66         db  0xff ; '.'
0000000000015a67         db  0xff ; '.'
0000000000015a68         db  0x38 ; '8'
0000000000015a69         db  0x14 ; '.'
0000000000015a6a         db  0x00 ; '.'
0000000000015a6b         db  0x00 ; '.'
0000000000015a6c         db  0xf0 ; '.'
0000000000015a6d         db  0x15 ; '.'
0000000000015a6e         db  0xff ; '.'
0000000000015a6f         db  0xff ; '.'
0000000000015a70         db  0x84 ; '.'
0000000000015a71         db  0x14 ; '.'
0000000000015a72         db  0x00 ; '.'
0000000000015a73         db  0x00 ; '.'
0000000000015a74         db  0x90 ; '.'
0000000000015a75         db  0x16 ; '.'
0000000000015a76         db  0xff ; '.'
0000000000015a77         db  0xff ; '.'
0000000000015a78         db  0xbc ; '.'
0000000000015a79         db  0x14 ; '.'
0000000000015a7a         db  0x00 ; '.'
0000000000015a7b         db  0x00 ; '.'
0000000000015a7c         db  0x10 ; '.'
0000000000015a7d         db  0x19 ; '.'
0000000000015a7e         db  0xff ; '.'
0000000000015a7f         db  0xff ; '.'
0000000000015a80         db  0x08 ; '.'
0000000000015a81         db  0x15 ; '.'
0000000000015a82         db  0x00 ; '.'
0000000000015a83         db  0x00 ; '.'
0000000000015a84         db  0x70 ; 'p'
0000000000015a85         db  0x19 ; '.'
0000000000015a86         db  0xff ; '.'
0000000000015a87         db  0xff ; '.'
0000000000015a88         db  0x24 ; '$'
0000000000015a89         db  0x15 ; '.'
0000000000015a8a         db  0x00 ; '.'
0000000000015a8b         db  0x00 ; '.'
0000000000015a8c         db  0xb0 ; '.'
0000000000015a8d         db  0x19 ; '.'
0000000000015a8e         db  0xff ; '.'
0000000000015a8f         db  0xff ; '.'
0000000000015a90         db  0x44 ; 'D'
0000000000015a91         db  0x15 ; '.'
0000000000015a92         db  0x00 ; '.'
0000000000015a93         db  0x00 ; '.'
0000000000015a94         db  0x10 ; '.'
0000000000015a95         db  0x1b ; '.'
0000000000015a96         db  0xff ; '.'
0000000000015a97         db  0xff ; '.'
0000000000015a98         db  0x80 ; '.'
0000000000015a99         db  0x15 ; '.'
0000000000015a9a         db  0x00 ; '.'
0000000000015a9b         db  0x00 ; '.'
0000000000015a9c         db  0xd0 ; '.'
0000000000015a9d         db  0x1b ; '.'
0000000000015a9e         db  0xff ; '.'
0000000000015a9f         db  0xff ; '.'
0000000000015aa0         db  0xbc ; '.'
0000000000015aa1         db  0x15 ; '.'
0000000000015aa2         db  0x00 ; '.'
0000000000015aa3         db  0x00 ; '.'
0000000000015aa4         db  0x20 ; ' '
0000000000015aa5         db  0x1c ; '.'
0000000000015aa6         db  0xff ; '.'
0000000000015aa7         db  0xff ; '.'
0000000000015aa8         db  0xd0 ; '.'
0000000000015aa9         db  0x15 ; '.'
0000000000015aaa         db  0x00 ; '.'
0000000000015aab         db  0x00 ; '.'
0000000000015aac         db  0x80 ; '.'
0000000000015aad         db  0x1c ; '.'
0000000000015aae         db  0xff ; '.'
0000000000015aaf         db  0xff ; '.'
0000000000015ab0         db  0xe4 ; '.'
0000000000015ab1         db  0x15 ; '.'
0000000000015ab2         db  0x00 ; '.'
0000000000015ab3         db  0x00 ; '.'
0000000000015ab4         db  0x00 ; '.'
0000000000015ab5         db  0x1d ; '.'
0000000000015ab6         db  0xff ; '.'
0000000000015ab7         db  0xff ; '.'
0000000000015ab8         db  0xf8 ; '.'
0000000000015ab9         db  0x15 ; '.'
0000000000015aba         db  0x00 ; '.'
0000000000015abb         db  0x00 ; '.'
0000000000015abc         db  0x00 ; '.'
0000000000015abd         db  0x1e ; '.'
0000000000015abe         db  0xff ; '.'
0000000000015abf         db  0xff ; '.'
0000000000015ac0         db  0x5c ; '\'
0000000000015ac1         db  0x16 ; '.'
0000000000015ac2         db  0x00 ; '.'
0000000000015ac3         db  0x00 ; '.'
0000000000015ac4         db  0x40 ; '@'
0000000000015ac5         db  0x1e ; '.'
0000000000015ac6         db  0xff ; '.'
0000000000015ac7         db  0xff ; '.'
0000000000015ac8         db  0x70 ; 'p'
0000000000015ac9         db  0x16 ; '.'
0000000000015aca         db  0x00 ; '.'
0000000000015acb         db  0x00 ; '.'
0000000000015acc         db  0xd0 ; '.'
0000000000015acd         db  0x1e ; '.'
0000000000015ace         db  0xff ; '.'
0000000000015acf         db  0xff ; '.'
0000000000015ad0         db  0x84 ; '.'
0000000000015ad1         db  0x16 ; '.'
0000000000015ad2         db  0x00 ; '.'
0000000000015ad3         db  0x00 ; '.'
0000000000015ad4         db  0x30 ; '0'
0000000000015ad5         db  0x1f ; '.'
0000000000015ad6         db  0xff ; '.'
0000000000015ad7         db  0xff ; '.'
0000000000015ad8         db  0x98 ; '.'
0000000000015ad9         db  0x16 ; '.'
0000000000015ada         db  0x00 ; '.'
0000000000015adb         db  0x00 ; '.'
0000000000015adc         db  0xa0 ; '.'
0000000000015add         db  0x21 ; '!'
0000000000015ade         db  0xff ; '.'
0000000000015adf         db  0xff ; '.'
0000000000015ae0         db  0xe8 ; '.'
0000000000015ae1         db  0x16 ; '.'
0000000000015ae2         db  0x00 ; '.'
0000000000015ae3         db  0x00 ; '.'
0000000000015ae4         db  0x80 ; '.'
0000000000015ae5         db  0x23 ; '#'
0000000000015ae6         db  0xff ; '.'
0000000000015ae7         db  0xff ; '.'
0000000000015ae8         db  0x20 ; ' '
0000000000015ae9         db  0x17 ; '.'
0000000000015aea         db  0x00 ; '.'
0000000000015aeb         db  0x00 ; '.'
0000000000015aec         db  0x30 ; '0'
0000000000015aed         db  0x26 ; '&'
0000000000015aee         db  0xff ; '.'
0000000000015aef         db  0xff ; '.'
0000000000015af0         db  0x70 ; 'p'
0000000000015af1         db  0x17 ; '.'
0000000000015af2         db  0x00 ; '.'
0000000000015af3         db  0x00 ; '.'
0000000000015af4         db  0x90 ; '.'
0000000000015af5         db  0x27 ; '''
0000000000015af6         db  0xff ; '.'
0000000000015af7         db  0xff ; '.'
0000000000015af8         db  0xbc ; '.'
0000000000015af9         db  0x17 ; '.'
0000000000015afa         db  0x00 ; '.'
0000000000015afb         db  0x00 ; '.'
0000000000015afc         db  0x40 ; '@'
0000000000015afd         db  0x29 ; ')'
0000000000015afe         db  0xff ; '.'
0000000000015aff         db  0xff ; '.'
0000000000015b00         db  0x0c ; '.'
0000000000015b01         db  0x18 ; '.'
0000000000015b02         db  0x00 ; '.'
0000000000015b03         db  0x00 ; '.'
0000000000015b04         db  0x20 ; ' '
0000000000015b05         db  0x2a ; '*'
0000000000015b06         db  0xff ; '.'
0000000000015b07         db  0xff ; '.'
0000000000015b08         db  0x30 ; '0'
0000000000015b09         db  0x18 ; '.'
0000000000015b0a         db  0x00 ; '.'
0000000000015b0b         db  0x00 ; '.'
0000000000015b0c         db  0x00 ; '.'
0000000000015b0d         db  0x2b ; '+'
0000000000015b0e         db  0xff ; '.'
0000000000015b0f         db  0xff ; '.'
0000000000015b10         db  0x74 ; 't'
0000000000015b11         db  0x18 ; '.'
0000000000015b12         db  0x00 ; '.'
0000000000015b13         db  0x00 ; '.'
0000000000015b14         db  0x40 ; '@'
0000000000015b15         db  0x2d ; '-'
0000000000015b16         db  0xff ; '.'
0000000000015b17         db  0xff ; '.'
0000000000015b18         db  0xc4 ; '.'
0000000000015b19         db  0x18 ; '.'
0000000000015b1a         db  0x00 ; '.'
0000000000015b1b         db  0x00 ; '.'
0000000000015b1c         db  0xe0 ; '.'
0000000000015b1d         db  0x2d ; '-'
0000000000015b1e         db  0xff ; '.'
0000000000015b1f         db  0xff ; '.'
0000000000015b20         db  0xf0 ; '.'
0000000000015b21         db  0x18 ; '.'
0000000000015b22         db  0x00 ; '.'
0000000000015b23         db  0x00 ; '.'
0000000000015b24         db  0x70 ; 'p'
0000000000015b25         db  0x2e ; '.'
0000000000015b26         db  0xff ; '.'
0000000000015b27         db  0xff ; '.'
0000000000015b28         db  0x2c ; ','
0000000000015b29         db  0x19 ; '.'
0000000000015b2a         db  0x00 ; '.'
0000000000015b2b         db  0x00 ; '.'
0000000000015b2c         db  0xd0 ; '.'
0000000000015b2d         db  0x2f ; '/'
0000000000015b2e         db  0xff ; '.'
0000000000015b2f         db  0xff ; '.'
0000000000015b30         db  0x90 ; '.'
0000000000015b31         db  0x19 ; '.'
0000000000015b32         db  0x00 ; '.'
0000000000015b33         db  0x00 ; '.'
0000000000015b34         db  0x90 ; '.'
0000000000015b35         db  0x32 ; '2'
0000000000015b36         db  0xff ; '.'
0000000000015b37         db  0xff ; '.'
0000000000015b38         db  0xdc ; '.'
0000000000015b39         db  0x19 ; '.'
0000000000015b3a         db  0x00 ; '.'
0000000000015b3b         db  0x00 ; '.'
0000000000015b3c         db  0x90 ; '.'
0000000000015b3d         db  0x34 ; '4'
0000000000015b3e         db  0xff ; '.'
0000000000015b3f         db  0xff ; '.'
0000000000015b40         db  0x28 ; '('
0000000000015b41         db  0x1a ; '.'
0000000000015b42         db  0x00 ; '.'
0000000000015b43         db  0x00 ; '.'
0000000000015b44         db  0x70 ; 'p'
0000000000015b45         db  0x35 ; '5'
0000000000015b46         db  0xff ; '.'
0000000000015b47         db  0xff ; '.'
0000000000015b48         db  0x74 ; 't'
0000000000015b49         db  0x1a ; '.'
0000000000015b4a         db  0x00 ; '.'
0000000000015b4b         db  0x00 ; '.'
0000000000015b4c         db  0x10 ; '.'
0000000000015b4d         db  0x39 ; '9'
0000000000015b4e         db  0xff ; '.'
0000000000015b4f         db  0xff ; '.'
0000000000015b50         db  0xc0 ; '.'
0000000000015b51         db  0x1a ; '.'
0000000000015b52         db  0x00 ; '.'
0000000000015b53         db  0x00 ; '.'
0000000000015b54         db  0x60 ; '`'
0000000000015b55         db  0x3a ; ':'
0000000000015b56         db  0xff ; '.'
0000000000015b57         db  0xff ; '.'
0000000000015b58         db  0x0c ; '.'
0000000000015b59         db  0x1b ; '.'
0000000000015b5a         db  0x00 ; '.'
0000000000015b5b         db  0x00 ; '.'
0000000000015b5c         db  0x50 ; 'P'
0000000000015b5d         db  0x3b ; ';'
0000000000015b5e         db  0xff ; '.'
0000000000015b5f         db  0xff ; '.'
0000000000015b60         db  0x50 ; 'P'
0000000000015b61         db  0x1b ; '.'
0000000000015b62         db  0x00 ; '.'
0000000000015b63         db  0x00 ; '.'
0000000000015b64         db  0x60 ; '`'
0000000000015b65         db  0x3c ; '<'
0000000000015b66         db  0xff ; '.'
0000000000015b67         db  0xff ; '.'
0000000000015b68         db  0x78 ; 'x'
0000000000015b69         db  0x1b ; '.'
0000000000015b6a         db  0x00 ; '.'
0000000000015b6b         db  0x00 ; '.'
0000000000015b6c         db  0x30 ; '0'
0000000000015b6d         db  0x3d ; '='
0000000000015b6e         db  0xff ; '.'
0000000000015b6f         db  0xff ; '.'
0000000000015b70         db  0xb0 ; '.'
0000000000015b71         db  0x1b ; '.'
0000000000015b72         db  0x00 ; '.'
0000000000015b73         db  0x00 ; '.'
0000000000015b74         db  0xd0 ; '.'
0000000000015b75         db  0x44 ; 'D'
0000000000015b76         db  0xff ; '.'
0000000000015b77         db  0xff ; '.'
0000000000015b78         db  0x00 ; '.'
0000000000015b79         db  0x1c ; '.'
0000000000015b7a         db  0x00 ; '.'
0000000000015b7b         db  0x00 ; '.'
0000000000015b7c         db  0x10 ; '.'
0000000000015b7d         db  0x47 ; 'G'
0000000000015b7e         db  0xff ; '.'
0000000000015b7f         db  0xff ; '.'
0000000000015b80         db  0x50 ; 'P'
0000000000015b81         db  0x1c ; '.'
0000000000015b82         db  0x00 ; '.'
0000000000015b83         db  0x00 ; '.'
0000000000015b84         db  0xb0 ; '.'
0000000000015b85         db  0x52 ; 'R'
0000000000015b86         db  0xff ; '.'
0000000000015b87         db  0xff ; '.'
0000000000015b88         db  0xa0 ; '.'
0000000000015b89         db  0x1c ; '.'
0000000000015b8a         db  0x00 ; '.'
0000000000015b8b         db  0x00 ; '.'
0000000000015b8c         db  0x40 ; '@'
0000000000015b8d         db  0x53 ; 'S'
0000000000015b8e         db  0xff ; '.'
0000000000015b8f         db  0xff ; '.'
0000000000015b90         db  0xd4 ; '.'
0000000000015b91         db  0x1c ; '.'
0000000000015b92         db  0x00 ; '.'
0000000000015b93         db  0x00 ; '.'
0000000000015b94         db  0x90 ; '.'
0000000000015b95         db  0x53 ; 'S'
0000000000015b96         db  0xff ; '.'
0000000000015b97         db  0xff ; '.'
0000000000015b98         db  0x00 ; '.'
0000000000015b99         db  0x1d ; '.'
0000000000015b9a         db  0x00 ; '.'
0000000000015b9b         db  0x00 ; '.'
0000000000015b9c         db  0x30 ; '0'
0000000000015b9d         db  0x54 ; 'T'
0000000000015b9e         db  0xff ; '.'
0000000000015b9f         db  0xff ; '.'
0000000000015ba0         db  0x30 ; '0'
0000000000015ba1         db  0x1d ; '.'
0000000000015ba2         db  0x00 ; '.'
0000000000015ba3         db  0x00 ; '.'
0000000000015ba4         db  0x80 ; '.'
0000000000015ba5         db  0x54 ; 'T'
0000000000015ba6         db  0xff ; '.'
0000000000015ba7         db  0xff ; '.'
0000000000015ba8         db  0x64 ; 'd'
0000000000015ba9         db  0x1d ; '.'
0000000000015baa         db  0x00 ; '.'
0000000000015bab         db  0x00 ; '.'
0000000000015bac         db  0x90 ; '.'
0000000000015bad         db  0x5c ; '\'
0000000000015bae         db  0xff ; '.'
0000000000015baf         db  0xff ; '.'
0000000000015bb0         db  0xa8 ; '.'
0000000000015bb1         db  0x1d ; '.'
0000000000015bb2         db  0x00 ; '.'
0000000000015bb3         db  0x00 ; '.'
0000000000015bb4         db  0x00 ; '.'
0000000000015bb5         db  0x5f ; '_'
0000000000015bb6         db  0xff ; '.'
0000000000015bb7         db  0xff ; '.'
0000000000015bb8         db  0x08 ; '.'
0000000000015bb9         db  0x1e ; '.'
0000000000015bba         db  0x00 ; '.'
0000000000015bbb         db  0x00 ; '.'
0000000000015bbc         db  0x30 ; '0'
0000000000015bbd         db  0x64 ; 'd'
0000000000015bbe         db  0xff ; '.'
0000000000015bbf         db  0xff ; '.'
0000000000015bc0         db  0x58 ; 'X'
0000000000015bc1         db  0x1e ; '.'
0000000000015bc2         db  0x00 ; '.'
0000000000015bc3         db  0x00 ; '.'
0000000000015bc4         db  0x90 ; '.'
0000000000015bc5         db  0x66 ; 'f'
0000000000015bc6         db  0xff ; '.'
0000000000015bc7         db  0xff ; '.'
0000000000015bc8         db  0x94 ; '.'
0000000000015bc9         db  0x1e ; '.'
0000000000015bca         db  0x00 ; '.'
0000000000015bcb         db  0x00 ; '.'
0000000000015bcc         db  0xf0 ; '.'
0000000000015bcd         db  0x6d ; 'm'
0000000000015bce         db  0xff ; '.'
0000000000015bcf         db  0xff ; '.'
0000000000015bd0         db  0xe4 ; '.'
0000000000015bd1         db  0x1e ; '.'
0000000000015bd2         db  0x00 ; '.'
0000000000015bd3         db  0x00 ; '.'
0000000000015bd4         db  0xe0 ; '.'
0000000000015bd5         db  0x76 ; 'v'
0000000000015bd6         db  0xff ; '.'
0000000000015bd7         db  0xff ; '.'
0000000000015bd8         db  0x14 ; '.'
0000000000015bd9         db  0x1f ; '.'
0000000000015bda         db  0x00 ; '.'
0000000000015bdb         db  0x00 ; '.'
0000000000015bdc         db  0x80 ; '.'
0000000000015bdd         db  0x78 ; 'x'
0000000000015bde         db  0xff ; '.'
0000000000015bdf         db  0xff ; '.'
0000000000015be0         db  0x80 ; '.'
0000000000015be1         db  0x1f ; '.'
0000000000015be2         db  0x00 ; '.'
0000000000015be3         db  0x00 ; '.'
0000000000015be4         db  0x70 ; 'p'
0000000000015be5         db  0x81 ; '.'
0000000000015be6         db  0xff ; '.'
0000000000015be7         db  0xff ; '.'
0000000000015be8         db  0xe0 ; '.'
0000000000015be9         db  0x1f ; '.'
0000000000015bea         db  0x00 ; '.'
0000000000015beb         db  0x00 ; '.'
0000000000015bec         db  0x60 ; '`'
0000000000015bed         db  0x83 ; '.'
0000000000015bee         db  0xff ; '.'
0000000000015bef         db  0xff ; '.'
0000000000015bf0         db  0x2c ; ','
0000000000015bf1         db  0x20 ; ' '
0000000000015bf2         db  0x00 ; '.'
0000000000015bf3         db  0x00 ; '.'
0000000000015bf4         db  0xa0 ; '.'
0000000000015bf5         db  0x86 ; '.'
0000000000015bf6         db  0xff ; '.'
0000000000015bf7         db  0xff ; '.'
0000000000015bf8         db  0x8c ; '.'
0000000000015bf9         db  0x20 ; ' '
0000000000015bfa         db  0x00 ; '.'
0000000000015bfb         db  0x00 ; '.'
0000000000015bfc         db  0xd0 ; '.'
0000000000015bfd         db  0x9d ; '.'
0000000000015bfe         db  0xff ; '.'
0000000000015bff         db  0xff ; '.'
0000000000015c00         db  0xdc ; '.'
0000000000015c01         db  0x20 ; ' '
0000000000015c02         db  0x00 ; '.'
0000000000015c03         db  0x00 ; '.'
0000000000015c04         db  0x20 ; ' '
0000000000015c05         db  0xa6 ; '.'
0000000000015c06         db  0xff ; '.'
0000000000015c07         db  0xff ; '.'
0000000000015c08         db  0x3c ; '<'
0000000000015c09         db  0x21 ; '!'
0000000000015c0a         db  0x00 ; '.'
0000000000015c0b         db  0x00 ; '.'
0000000000015c0c         db  0x80 ; '.'
0000000000015c0d         db  0xa8 ; '.'
0000000000015c0e         db  0xff ; '.'
0000000000015c0f         db  0xff ; '.'
0000000000015c10         db  0x80 ; '.'
0000000000015c11         db  0x21 ; '!'
0000000000015c12         db  0x00 ; '.'
0000000000015c13         db  0x00 ; '.'
0000000000015c14         db  0x80 ; '.'
0000000000015c15         db  0xaf ; '.'
0000000000015c16         db  0xff ; '.'
0000000000015c17         db  0xff ; '.'
0000000000015c18         db  0xcc ; '.'
0000000000015c19         db  0x21 ; '!'
0000000000015c1a         db  0x00 ; '.'
0000000000015c1b         db  0x00 ; '.'
0000000000015c1c         db  0x40 ; '@'
0000000000015c1d         db  0xb0 ; '.'
0000000000015c1e         db  0xff ; '.'
0000000000015c1f         db  0xff ; '.'
0000000000015c20         db  0x0c ; '.'
0000000000015c21         db  0x22 ; '"'
0000000000015c22         db  0x00 ; '.'
0000000000015c23         db  0x00 ; '.'
0000000000015c24         db  0x20 ; ' '
0000000000015c25         db  0xc5 ; '.'
0000000000015c26         db  0xff ; '.'
0000000000015c27         db  0xff ; '.'
0000000000015c28         db  0x6c ; 'l'
0000000000015c29         db  0x22 ; '"'
0000000000015c2a         db  0x00 ; '.'
0000000000015c2b         db  0x00 ; '.'
0000000000015c2c         db  0xb0 ; '.'
0000000000015c2d         db  0xc6 ; '.'
0000000000015c2e         db  0xff ; '.'
0000000000015c2f         db  0xff ; '.'
0000000000015c30         db  0xb8 ; '.'
0000000000015c31         db  0x22 ; '"'
0000000000015c32         db  0x00 ; '.'
0000000000015c33         db  0x00 ; '.'
0000000000015c34         db  0x30 ; '0'
0000000000015c35         db  0xc8 ; '.'
0000000000015c36         db  0xff ; '.'
0000000000015c37         db  0xff ; '.'
0000000000015c38         db  0x08 ; '.'
0000000000015c39         db  0x23 ; '#'
0000000000015c3a         db  0x00 ; '.'
0000000000015c3b         db  0x00 ; '.'
0000000000015c3c         db  0x30 ; '0'
0000000000015c3d         db  0xd9 ; '.'
0000000000015c3e         db  0xff ; '.'
0000000000015c3f         db  0xff ; '.'
0000000000015c40         db  0x58 ; 'X'
0000000000015c41         db  0x23 ; '#'
0000000000015c42         db  0x00 ; '.'
0000000000015c43         db  0x00 ; '.'
0000000000015c44         db  0xa0 ; '.'
0000000000015c45         db  0xd9 ; '.'
0000000000015c46         db  0xff ; '.'
0000000000015c47         db  0xff ; '.'
0000000000015c48         db  0x78 ; 'x'
0000000000015c49         db  0x23 ; '#'
0000000000015c4a         db  0x00 ; '.'
0000000000015c4b         db  0x00 ; '.'
0000000000015c4c         db  0xb0 ; '.'
0000000000015c4d         db  0xd9 ; '.'
0000000000015c4e         db  0xff ; '.'
0000000000015c4f         db  0xff ; '.'
0000000000015c50         db  0x8c ; '.'
0000000000015c51         db  0x23 ; '#'
0000000000015c52         db  0x00 ; '.'
0000000000015c53         db  0x00 ; '.'
0000000000015c54         db  0x80 ; '.'
0000000000015c55         db  0xda ; '.'
0000000000015c56         db  0xff ; '.'
0000000000015c57         db  0xff ; '.'
0000000000015c58         db  0xb8 ; '.'
0000000000015c59         db  0x23 ; '#'
0000000000015c5a         db  0x00 ; '.'
0000000000015c5b         db  0x00 ; '.'
0000000000015c5c         db  0x00 ; '.'
0000000000015c5d         db  0xdf ; '.'
0000000000015c5e         db  0xff ; '.'
0000000000015c5f         db  0xff ; '.'
0000000000015c60         db  0x18 ; '.'
0000000000015c61         db  0x24 ; '$'
0000000000015c62         db  0x00 ; '.'
0000000000015c63         db  0x00 ; '.'
0000000000015c64         db  0x20 ; ' '
0000000000015c65         db  0xe0 ; '.'
0000000000015c66         db  0xff ; '.'
0000000000015c67         db  0xff ; '.'
0000000000015c68         db  0x70 ; 'p'
0000000000015c69         db  0x24 ; '$'
0000000000015c6a         db  0x00 ; '.'
0000000000015c6b         db  0x00 ; '.'
0000000000015c6c         db  0x30 ; '0'
0000000000015c6d         db  0xe1 ; '.'
0000000000015c6e         db  0xff ; '.'
0000000000015c6f         db  0xff ; '.'
0000000000015c70         db  0xbc ; '.'
0000000000015c71         db  0x24 ; '$'
0000000000015c72         db  0x00 ; '.'
0000000000015c73         db  0x00 ; '.'
0000000000015c74         db  0xc0 ; '.'
0000000000015c75         db  0xe1 ; '.'
0000000000015c76         db  0xff ; '.'
0000000000015c77         db  0xff ; '.'
0000000000015c78         db  0xf8 ; '.'
0000000000015c79         db  0x24 ; '$'
0000000000015c7a         db  0x00 ; '.'
0000000000015c7b         db  0x00 ; '.'
0000000000015c7c         db  0x10 ; '.'
0000000000015c7d         db  0xe2 ; '.'
0000000000015c7e         db  0xff ; '.'
0000000000015c7f         db  0xff ; '.'
0000000000015c80         db  0x14 ; '.'
0000000000015c81         db  0x25 ; '%'
0000000000015c82         db  0x00 ; '.'
0000000000015c83         db  0x00 ; '.'
0000000000015c84         db  0xb0 ; '.'
0000000000015c85         db  0xe2 ; '.'
0000000000015c86         db  0xff ; '.'
0000000000015c87         db  0xff ; '.'
0000000000015c88         db  0x70 ; 'p'
0000000000015c89         db  0x25 ; '%'
0000000000015c8a         db  0x00 ; '.'
0000000000015c8b         db  0x00 ; '.'
0000000000015c8c         db  0xd0 ; '.'
0000000000015c8d         db  0xe2 ; '.'
0000000000015c8e         db  0xff ; '.'
0000000000015c8f         db  0xff ; '.'
0000000000015c90         db  0x90 ; '.'
0000000000015c91         db  0x25 ; '%'
0000000000015c92         db  0x00 ; '.'
0000000000015c93         db  0x00 ; '.'
0000000000015c94         db  0xf0 ; '.'
0000000000015c95         db  0xe2 ; '.'
0000000000015c96         db  0xff ; '.'
0000000000015c97         db  0xff ; '.'
0000000000015c98         db  0xb0 ; '.'
0000000000015c99         db  0x25 ; '%'
0000000000015c9a         db  0x00 ; '.'
0000000000015c9b         db  0x00 ; '.'
0000000000015c9c         db  0x10 ; '.'
0000000000015c9d         db  0xe3 ; '.'
0000000000015c9e         db  0xff ; '.'
0000000000015c9f         db  0xff ; '.'
0000000000015ca0         db  0xd4 ; '.'
0000000000015ca1         db  0x25 ; '%'
0000000000015ca2         db  0x00 ; '.'
0000000000015ca3         db  0x00 ; '.'
0000000000015ca4         db  0x30 ; '0'
0000000000015ca5         db  0xe3 ; '.'
0000000000015ca6         db  0xff ; '.'
0000000000015ca7         db  0xff ; '.'
0000000000015ca8         db  0xf8 ; '.'
0000000000015ca9         db  0x25 ; '%'
0000000000015caa         db  0x00 ; '.'
0000000000015cab         db  0x00 ; '.'
0000000000015cac         db  0x80 ; '.'
0000000000015cad         db  0xe3 ; '.'
0000000000015cae         db  0xff ; '.'
0000000000015caf         db  0xff ; '.'
0000000000015cb0         db  0x10 ; '.'
0000000000015cb1         db  0x26 ; '&'
0000000000015cb2         db  0x00 ; '.'
0000000000015cb3         db  0x00 ; '.'
0000000000015cb4         db  0x00 ; '.'
0000000000015cb5         db  0xe4 ; '.'
0000000000015cb6         db  0xff ; '.'
0000000000015cb7         db  0xff ; '.'
0000000000015cb8         db  0x60 ; '`'
0000000000015cb9         db  0x26 ; '&'
0000000000015cba         db  0x00 ; '.'
0000000000015cbb         db  0x00 ; '.'
0000000000015cbc         db  0x60 ; '`'
0000000000015cbd         db  0xe4 ; '.'
0000000000015cbe         db  0xff ; '.'
0000000000015cbf         db  0xff ; '.'
0000000000015cc0         db  0x74 ; 't'
0000000000015cc1         db  0x26 ; '&'
0000000000015cc2         db  0x00 ; '.'
0000000000015cc3         db  0x00 ; '.'
0000000000015cc4         db  0xb0 ; '.'
0000000000015cc5         db  0xe4 ; '.'
0000000000015cc6         db  0xff ; '.'
0000000000015cc7         db  0xff ; '.'
0000000000015cc8         db  0xa0 ; '.'
0000000000015cc9         db  0x26 ; '&'
0000000000015cca         db  0x00 ; '.'
0000000000015ccb         db  0x00 ; '.'
0000000000015ccc         db  0xf0 ; '.'
0000000000015ccd         db  0xe4 ; '.'
0000000000015cce         db  0xff ; '.'
0000000000015ccf         db  0xff ; '.'
0000000000015cd0         db  0xd8 ; '.'
0000000000015cd1         db  0x26 ; '&'
0000000000015cd2         db  0x00 ; '.'
0000000000015cd3         db  0x00 ; '.'
0000000000015cd4         db  0x10 ; '.'
0000000000015cd5         db  0xe5 ; '.'
0000000000015cd6         db  0xff ; '.'
0000000000015cd7         db  0xff ; '.'
0000000000015cd8         db  0xf0 ; '.'
0000000000015cd9         db  0x26 ; '&'
0000000000015cda         db  0x00 ; '.'
0000000000015cdb         db  0x00 ; '.'
0000000000015cdc         db  0x70 ; 'p'
0000000000015cdd         db  0xe5 ; '.'
0000000000015cde         db  0xff ; '.'
0000000000015cdf         db  0xff ; '.'
0000000000015ce0         db  0x10 ; '.'
0000000000015ce1         db  0x27 ; '''
0000000000015ce2         db  0x00 ; '.'
0000000000015ce3         db  0x00 ; '.'
0000000000015ce4         db  0xb0 ; '.'
0000000000015ce5         db  0xe5 ; '.'
0000000000015ce6         db  0xff ; '.'
0000000000015ce7         db  0xff ; '.'
0000000000015ce8         db  0x30 ; '0'
0000000000015ce9         db  0x27 ; '''
0000000000015cea         db  0x00 ; '.'
0000000000015ceb         db  0x00 ; '.'
0000000000015cec         db  0xc0 ; '.'
0000000000015ced         db  0xe5 ; '.'
0000000000015cee         db  0xff ; '.'
0000000000015cef         db  0xff ; '.'
0000000000015cf0         db  0x48 ; 'H'
0000000000015cf1         db  0x27 ; '''
0000000000015cf2         db  0x00 ; '.'
0000000000015cf3         db  0x00 ; '.'
0000000000015cf4         db  0x40 ; '@'
0000000000015cf5         db  0xe6 ; '.'
0000000000015cf6         db  0xff ; '.'
0000000000015cf7         db  0xff ; '.'
0000000000015cf8         db  0x80 ; '.'
0000000000015cf9         db  0x27 ; '''
0000000000015cfa         db  0x00 ; '.'
0000000000015cfb         db  0x00 ; '.'
0000000000015cfc         db  0xc0 ; '.'
0000000000015cfd         db  0xe8 ; '.'
0000000000015cfe         db  0xff ; '.'
0000000000015cff         db  0xff ; '.'
0000000000015d00         db  0xb8 ; '.'
0000000000015d01         db  0x27 ; '''
0000000000015d02         db  0x00 ; '.'
0000000000015d03         db  0x00 ; '.'
0000000000015d04         db  0x00 ; '.'
0000000000015d05         db  0xe9 ; '.'
0000000000015d06         db  0xff ; '.'
0000000000015d07         db  0xff ; '.'
0000000000015d08         db  0xd8 ; '.'
0000000000015d09         db  0x27 ; '''
0000000000015d0a         db  0x00 ; '.'
0000000000015d0b         db  0x00 ; '.'
0000000000015d0c         db  0x70 ; 'p'
0000000000015d0d         db  0xe9 ; '.'
0000000000015d0e         db  0xff ; '.'
0000000000015d0f         db  0xff ; '.'
0000000000015d10         db  0x20 ; ' '
0000000000015d11         db  0x28 ; '('
0000000000015d12         db  0x00 ; '.'
0000000000015d13         db  0x00 ; '.'
0000000000015d14         db  0x80 ; '.'
0000000000015d15         db  0xe9 ; '.'
0000000000015d16         db  0xff ; '.'
0000000000015d17         db  0xff ; '.'
0000000000015d18         db  0x38 ; '8'
0000000000015d19         db  0x28 ; '('
0000000000015d1a         db  0x00 ; '.'
0000000000015d1b         db  0x00 ; '.'
0000000000015d1c         db  0x00 ; '.'
0000000000015d1d         db  0x00 ; '.'
0000000000015d1e         db  0x00 ; '.'
0000000000015d1f         db  0x00 ; '.'


        ; Section .eh_frame
        ; Range: [0x15d20; 0x17ff0[ (8912 bytes)
        ; File offset : [89376; 98288[ (8912 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

0000000000015d20         dd         0x00000014                                  ; Length of the record
0000000000015d24         dd         0x00000000                                  ; CIE ID
0000000000015d28         db         0x01                                        ; Version
0000000000015d29         db         "zR", 0                                     ; Augmentation String
0000000000015d2c         db         0x01                                        ; Code Alignment Factor (unsigned LEB128=1)
0000000000015d2d         db         0x78                                        ; Data Alignment Factor (signed LEB128=-8)
0000000000015d2e         db         0x10                                        ; Return address register
0000000000015d2f         db         0x01                                        ; Augmentation data length
0000000000015d30         db         0x1b                                        ; FDE encoding
0000000000015d31         db  0x0c ; '.'
0000000000015d32         db  0x07 ; '.'
0000000000015d33         db  0x08 ; '.'
0000000000015d34         db  0x90 ; '.'
0000000000015d35         db  0x01 ; '.'
0000000000015d36         db  0x07 ; '.'
0000000000015d37         db  0x10 ; '.'
0000000000015d38         dd         0x00000014                                  ; Length of the record
0000000000015d3c         dd         0x0000001c                                  ; FDE: parent CIE at 0x15d20 (FDE encoding = 0x1B)
0000000000015d40         db         0xe0, 0xc6, 0xfe, 0xff                      ; begin 0x2420
0000000000015d44         db         0x2b, 3 dup (0x00)                          ; length 0x2b (end at 0x244b)
0000000000015d48         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000015d49         align      16
0000000000015d50         dd         0x00000014                                  ; Length of the record
0000000000015d54         dd         0x00000000                                  ; CIE ID
0000000000015d58         db         0x01                                        ; Version
0000000000015d59         db         "zR", 0                                     ; Augmentation String
0000000000015d5c         db         0x01                                        ; Code Alignment Factor (unsigned LEB128=1)
0000000000015d5d         db         0x78                                        ; Data Alignment Factor (signed LEB128=-8)
0000000000015d5e         db         0x10                                        ; Return address register
0000000000015d5f         db         0x01                                        ; Augmentation data length
0000000000015d60         db         0x1b                                        ; FDE encoding
0000000000015d61         db  0x0c ; '.'
0000000000015d62         db  0x07 ; '.'
0000000000015d63         db  0x08 ; '.'
0000000000015d64         db  0x90 ; '.'
0000000000015d65         db  0x01 ; '.'
0000000000015d66         db  0x00 ; '.'
0000000000015d67         db  0x00 ; '.'
0000000000015d68         dd         0x00000024                                  ; Length of the record
0000000000015d6c         dd         0x0000001c                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000015d70         db         0xe0, 0xba, 0xfe, 0xff                      ; begin 0x1850
0000000000015d74         db         0x30, 0x04, 2 dup (0x00)                    ; length 0x430 (end at 0x1c80)
0000000000015d78         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000015d79         db  0x0e ; '.'
0000000000015d7a         db  0x10 ; '.'
0000000000015d7b         db  0x46 ; 'F'
0000000000015d7c         db  0x0e ; '.'
0000000000015d7d         db  0x18 ; '.'
0000000000015d7e         db  0x4a ; 'J'
0000000000015d7f         db  0x0f ; '.'
0000000000015d80         db  0x0b ; '.'
0000000000015d81         db  0x77 ; 'w'
0000000000015d82         db  0x08 ; '.'
0000000000015d83         db  0x80 ; '.'
0000000000015d84         db  0x00 ; '.'
0000000000015d85         db  0x3f ; '?'
0000000000015d86         db  0x1a ; '.'
0000000000015d87         db  0x3b ; ';'
0000000000015d88         db  0x2a ; '*'
0000000000015d89         db  0x33 ; '3'
0000000000015d8a         db  0x24 ; '$'
0000000000015d8b         db  0x22 ; '"'
0000000000015d8c         db  0x00 ; '.'
0000000000015d8d         db  0x00 ; '.'
0000000000015d8e         db  0x00 ; '.'
0000000000015d8f         db  0x00 ; '.'
0000000000015d90         dd         0x00000014                                  ; Length of the record
0000000000015d94         dd         0x00000044                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000015d98         db         0xe8, 0xbe, 0xfe, 0xff                      ; begin 0x1c80
0000000000015d9c         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0x1c88)
0000000000015da0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000015da1         align      8
0000000000015da8         dd         0x00000060                                  ; Length of the record
0000000000015dac         dd         0x0000005c                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000015db0         db         0x80, 0xc7, 0xfe, 0xff                      ; begin 0x2530
0000000000015db4         db         0xfe, 3 dup (0x00)                          ; length 0xfe (end at 0x262e)
0000000000015db8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000015db9         db  0x42 ; 'B'
0000000000015dba         db  0x0e ; '.'
0000000000015dbb         db  0x10 ; '.'
0000000000015dbc         db  0x8f ; '.'
0000000000015dbd         db  0x02 ; '.'
0000000000015dbe         db  0x42 ; 'B'
0000000000015dbf         db  0x0e ; '.'
0000000000015dc0         db  0x18 ; '.'
0000000000015dc1         db  0x8e ; '.'
0000000000015dc2         db  0x03 ; '.'
0000000000015dc3         db  0x42 ; 'B'
0000000000015dc4         db  0x0e ; '.'
0000000000015dc5         db  0x20 ; ' '
0000000000015dc6         db  0x8d ; '.'
0000000000015dc7         db  0x04 ; '.'
0000000000015dc8         db  0x42 ; 'B'
0000000000015dc9         db  0x0e ; '.'
0000000000015dca         db  0x28 ; '('
0000000000015dcb         db  0x8c ; '.'
0000000000015dcc         db  0x05 ; '.'
0000000000015dcd         db  0x41 ; 'A'
0000000000015dce         db  0x0e ; '.'
0000000000015dcf         db  0x30 ; '0'
0000000000015dd0         db  0x86 ; '.'
0000000000015dd1         db  0x06 ; '.'
0000000000015dd2         db  0x41 ; 'A'
0000000000015dd3         db  0x0e ; '.'
0000000000015dd4         db  0x38 ; '8'
0000000000015dd5         db  0x83 ; '.'
0000000000015dd6         db  0x07 ; '.'
0000000000015dd7         db  0x44 ; 'D'
0000000000015dd8         db  0x0e ; '.'
0000000000015dd9         db  0x40 ; '@'
0000000000015dda         db  0x02 ; '.'
0000000000015ddb         db  0xa5 ; '.'
0000000000015ddc         db  0x0a ; '.'
0000000000015ddd         db  0x0e ; '.'
0000000000015dde         db  0x38 ; '8'
0000000000015ddf         db  0x41 ; 'A'
0000000000015de0         db  0x0e ; '.'
0000000000015de1         db  0x30 ; '0'
0000000000015de2         db  0x41 ; 'A'
0000000000015de3         db  0x0e ; '.'
0000000000015de4         db  0x28 ; '('
0000000000015de5         db  0x42 ; 'B'
0000000000015de6         db  0x0e ; '.'
0000000000015de7         db  0x20 ; ' '
0000000000015de8         db  0x42 ; 'B'
0000000000015de9         db  0x0e ; '.'
0000000000015dea         db  0x18 ; '.'
0000000000015deb         db  0x42 ; 'B'
0000000000015dec         db  0x0e ; '.'
0000000000015ded         db  0x10 ; '.'
0000000000015dee         db  0x42 ; 'B'
0000000000015def         db  0x0e ; '.'
0000000000015df0         db  0x08 ; '.'
0000000000015df1         db  0x43 ; 'C'
0000000000015df2         db  0x0b ; '.'
0000000000015df3         db  0x6a ; 'j'
0000000000015df4         db  0x0a ; '.'
0000000000015df5         db  0x0e ; '.'
0000000000015df6         db  0x38 ; '8'
0000000000015df7         db  0x41 ; 'A'
0000000000015df8         db  0x0e ; '.'
0000000000015df9         db  0x30 ; '0'
0000000000015dfa         db  0x41 ; 'A'
0000000000015dfb         db  0x0e ; '.'
0000000000015dfc         db  0x28 ; '('
0000000000015dfd         db  0x42 ; 'B'
0000000000015dfe         db  0x0e ; '.'
0000000000015dff         db  0x20 ; ' '
0000000000015e00         db  0x42 ; 'B'
0000000000015e01         db  0x0e ; '.'
0000000000015e02         db  0x18 ; '.'
0000000000015e03         db  0x42 ; 'B'
0000000000015e04         db  0x0e ; '.'
0000000000015e05         db  0x10 ; '.'
0000000000015e06         db  0x42 ; 'B'
0000000000015e07         db  0x0e ; '.'
0000000000015e08         db  0x08 ; '.'
0000000000015e09         db  0x44 ; 'D'
0000000000015e0a         db  0x0b ; '.'
0000000000015e0b         db  0x00 ; '.'
0000000000015e0c         dd         0x00000060                                  ; Length of the record
0000000000015e10         dd         0x000000c0                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000015e14         db         0x1c, 0xc8, 0xfe, 0xff                      ; begin 0x2630
0000000000015e18         db         0xa0, 0x05, 2 dup (0x00)                    ; length 0x5a0 (end at 0x2bd0)
0000000000015e1c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000015e1d         db  0x42 ; 'B'
0000000000015e1e         db  0x0e ; '.'
0000000000015e1f         db  0x10 ; '.'
0000000000015e20         db  0x8f ; '.'
0000000000015e21         db  0x02 ; '.'
0000000000015e22         db  0x42 ; 'B'
0000000000015e23         db  0x0e ; '.'
0000000000015e24         db  0x18 ; '.'
0000000000015e25         db  0x8e ; '.'
0000000000015e26         db  0x03 ; '.'
0000000000015e27         db  0x45 ; 'E'
0000000000015e28         db  0x0e ; '.'
0000000000015e29         db  0x20 ; ' '
0000000000015e2a         db  0x8d ; '.'
0000000000015e2b         db  0x04 ; '.'
0000000000015e2c         db  0x42 ; 'B'
0000000000015e2d         db  0x0e ; '.'
0000000000015e2e         db  0x28 ; '('
0000000000015e2f         db  0x8c ; '.'
0000000000015e30         db  0x05 ; '.'
0000000000015e31         db  0x41 ; 'A'
0000000000015e32         db  0x0e ; '.'
0000000000015e33         db  0x30 ; '0'
0000000000015e34         db  0x86 ; '.'
0000000000015e35         db  0x06 ; '.'
0000000000015e36         db  0x41 ; 'A'
0000000000015e37         db  0x0e ; '.'
0000000000015e38         db  0x38 ; '8'
0000000000015e39         db  0x83 ; '.'
0000000000015e3a         db  0x07 ; '.'
0000000000015e3b         db  0x44 ; 'D'
0000000000015e3c         db  0x0e ; '.'
0000000000015e3d         db  0x70 ; 'p'
0000000000015e3e         db  0x03 ; '.'
0000000000015e3f         db  0x90 ; '.'
0000000000015e40         db  0x04 ; '.'
0000000000015e41         db  0x0a ; '.'
0000000000015e42         db  0x0e ; '.'
0000000000015e43         db  0x38 ; '8'
0000000000015e44         db  0x43 ; 'C'
0000000000015e45         db  0x0e ; '.'
0000000000015e46         db  0x30 ; '0'
0000000000015e47         db  0x41 ; 'A'
0000000000015e48         db  0x0e ; '.'
0000000000015e49         db  0x28 ; '('
0000000000015e4a         db  0x42 ; 'B'
0000000000015e4b         db  0x0e ; '.'
0000000000015e4c         db  0x20 ; ' '
0000000000015e4d         db  0x42 ; 'B'
0000000000015e4e         db  0x0e ; '.'
0000000000015e4f         db  0x18 ; '.'
0000000000015e50         db  0x42 ; 'B'
0000000000015e51         db  0x0e ; '.'
0000000000015e52         db  0x10 ; '.'
0000000000015e53         db  0x42 ; 'B'
0000000000015e54         db  0x0e ; '.'
0000000000015e55         db  0x08 ; '.'
0000000000015e56         db  0x41 ; 'A'
0000000000015e57         db  0x0b ; '.'
0000000000015e58         db  0x6b ; 'k'
0000000000015e59         db  0x0a ; '.'
0000000000015e5a         db  0x0e ; '.'
0000000000015e5b         db  0x38 ; '8'
0000000000015e5c         db  0x46 ; 'F'
0000000000015e5d         db  0x0e ; '.'
0000000000015e5e         db  0x30 ; '0'
0000000000015e5f         db  0x41 ; 'A'
0000000000015e60         db  0x0e ; '.'
0000000000015e61         db  0x28 ; '('
0000000000015e62         db  0x42 ; 'B'
0000000000015e63         db  0x0e ; '.'
0000000000015e64         db  0x20 ; ' '
0000000000015e65         db  0x42 ; 'B'
0000000000015e66         db  0x0e ; '.'
0000000000015e67         db  0x18 ; '.'
0000000000015e68         db  0x42 ; 'B'
0000000000015e69         db  0x0e ; '.'
0000000000015e6a         db  0x10 ; '.'
0000000000015e6b         db  0x42 ; 'B'
0000000000015e6c         db  0x0e ; '.'
0000000000015e6d         db  0x08 ; '.'
0000000000015e6e         db  0x41 ; 'A'
0000000000015e6f         db  0x0b ; '.'
0000000000015e70         dd         0x00000028                                  ; Length of the record
0000000000015e74         dd         0x00000124                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000015e78         db         0x58, 0xcd, 0xfe, 0xff                      ; begin 0x2bd0
0000000000015e7c         db         0xb2, 0x03, 2 dup (0x00)                    ; length 0x3b2 (end at 0x2f82)
0000000000015e80         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000015e81         db  0x42 ; 'B'
0000000000015e82         db  0x0e ; '.'
0000000000015e83         db  0x10 ; '.'
0000000000015e84         db  0x8d ; '.'
0000000000015e85         db  0x02 ; '.'
0000000000015e86         db  0x42 ; 'B'
0000000000015e87         db  0x0e ; '.'
0000000000015e88         db  0x18 ; '.'
0000000000015e89         db  0x8c ; '.'
0000000000015e8a         db  0x03 ; '.'
0000000000015e8b         db  0x46 ; 'F'
0000000000015e8c         db  0x0e ; '.'
0000000000015e8d         db  0x20 ; ' '
0000000000015e8e         db  0x86 ; '.'
0000000000015e8f         db  0x04 ; '.'
0000000000015e90         db  0x41 ; 'A'
0000000000015e91         db  0x0e ; '.'
0000000000015e92         db  0x28 ; '('
0000000000015e93         db  0x83 ; '.'
0000000000015e94         db  0x05 ; '.'
0000000000015e95         db  0x49 ; 'I'
0000000000015e96         db  0x0e ; '.'
0000000000015e97         db  0xb0 ; '.'
0000000000015e98         db  0x01 ; '.'
0000000000015e99         db  0x00 ; '.'
0000000000015e9a         db  0x00 ; '.'
0000000000015e9b         db  0x00 ; '.'
0000000000015e9c         dd         0x00000058                                  ; Length of the record
0000000000015ea0         dd         0x00000150                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000015ea4         db         0xec, 0xbd, 0xfe, 0xff                      ; begin 0x1c90
0000000000015ea8         db         0x81, 0x07, 2 dup (0x00)                    ; length 0x781 (end at 0x2411)
0000000000015eac         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000015ead         db  0x42 ; 'B'
0000000000015eae         db  0x0e ; '.'
0000000000015eaf         db  0x10 ; '.'
0000000000015eb0         db  0x8f ; '.'
0000000000015eb1         db  0x02 ; '.'
0000000000015eb2         db  0x42 ; 'B'
0000000000015eb3         db  0x0e ; '.'
0000000000015eb4         db  0x18 ; '.'
0000000000015eb5         db  0x8e ; '.'
0000000000015eb6         db  0x03 ; '.'
0000000000015eb7         db  0x42 ; 'B'
0000000000015eb8         db  0x0e ; '.'
0000000000015eb9         db  0x20 ; ' '
0000000000015eba         db  0x8d ; '.'
0000000000015ebb         db  0x04 ; '.'
0000000000015ebc         db  0x42 ; 'B'
0000000000015ebd         db  0x0e ; '.'
0000000000015ebe         db  0x28 ; '('
0000000000015ebf         db  0x8c ; '.'
0000000000015ec0         db  0x05 ; '.'
0000000000015ec1         db  0x48 ; 'H'
0000000000015ec2         db  0x0e ; '.'
0000000000015ec3         db  0x30 ; '0'
0000000000015ec4         db  0x86 ; '.'
0000000000015ec5         db  0x06 ; '.'
0000000000015ec6         db  0x41 ; 'A'
0000000000015ec7         db  0x0e ; '.'
0000000000015ec8         db  0x38 ; '8'
0000000000015ec9         db  0x83 ; '.'
0000000000015eca         db  0x07 ; '.'
0000000000015ecb         db  0x49 ; 'I'
0000000000015ecc         db  0x0e ; '.'
0000000000015ecd         db  0x60 ; '`'
0000000000015ece         db  0x02 ; '.'
0000000000015ecf         db  0xbd ; '.'
0000000000015ed0         db  0x0a ; '.'
0000000000015ed1         db  0x0e ; '.'
0000000000015ed2         db  0x68 ; 'h'
0000000000015ed3         db  0x50 ; 'P'
0000000000015ed4         db  0x0e ; '.'
0000000000015ed5         db  0x70 ; 'p'
0000000000015ed6         db  0x71 ; 'q'
0000000000015ed7         db  0x0b ; '.'
0000000000015ed8         db  0x03 ; '.'
0000000000015ed9         db  0x46 ; 'F'
0000000000015eda         db  0x03 ; '.'
0000000000015edb         db  0x0a ; '.'
0000000000015edc         db  0x0e ; '.'
0000000000015edd         db  0x38 ; '8'
0000000000015ede         db  0x41 ; 'A'
0000000000015edf         db  0x0e ; '.'
0000000000015ee0         db  0x30 ; '0'
0000000000015ee1         db  0x41 ; 'A'
0000000000015ee2         db  0x0e ; '.'
0000000000015ee3         db  0x28 ; '('
0000000000015ee4         db  0x42 ; 'B'
0000000000015ee5         db  0x0e ; '.'
0000000000015ee6         db  0x20 ; ' '
0000000000015ee7         db  0x45 ; 'E'
0000000000015ee8         db  0x0e ; '.'
0000000000015ee9         db  0x18 ; '.'
0000000000015eea         db  0x45 ; 'E'
0000000000015eeb         db  0x0e ; '.'
0000000000015eec         db  0x10 ; '.'
0000000000015eed         db  0x42 ; 'B'
0000000000015eee         db  0x0e ; '.'
0000000000015eef         db  0x08 ; '.'
0000000000015ef0         db  0x41 ; 'A'
0000000000015ef1         db  0x0b ; '.'
0000000000015ef2         db  0x00 ; '.'
0000000000015ef3         db  0x00 ; '.'
0000000000015ef4         db  0x00 ; '.'
0000000000015ef5         db  0x00 ; '.'
0000000000015ef6         db  0x00 ; '.'
0000000000015ef7         db  0x00 ; '.'
0000000000015ef8         dd         0x00000010                                  ; Length of the record
0000000000015efc         dd         0x000001ac                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000015f00         db         0x90, 0xd0, 0xfe, 0xff                      ; begin 0x2f90
0000000000015f04         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0x2f98)
0000000000015f08         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000015f09         align      4
0000000000015f0c         dd         0x00000010                                  ; Length of the record
0000000000015f10         dd         0x000001c0                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000015f14         db         0x8c, 0xd0, 0xfe, 0xff                      ; begin 0x2fa0
0000000000015f18         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0x2fa8)
0000000000015f1c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000015f1d         align      32
0000000000015f20         dd         0x0000002c                                  ; Length of the record
0000000000015f24         dd         0x000001d4                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000015f28         db         0x88, 0xd0, 0xfe, 0xff                      ; begin 0x2fb0
0000000000015f2c         db         0xa4, 3 dup (0x00)                          ; length 0xa4 (end at 0x3054)
0000000000015f30         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000015f31         db  0x41 ; 'A'
0000000000015f32         db  0x0e ; '.'
0000000000015f33         db  0x10 ; '.'
0000000000015f34         db  0x86 ; '.'
0000000000015f35         db  0x02 ; '.'
0000000000015f36         db  0x41 ; 'A'
0000000000015f37         db  0x0e ; '.'
0000000000015f38         db  0x18 ; '.'
0000000000015f39         db  0x83 ; '.'
0000000000015f3a         db  0x03 ; '.'
0000000000015f3b         db  0x44 ; 'D'
0000000000015f3c         db  0x0e ; '.'
0000000000015f3d         db  0x20 ; ' '
0000000000015f3e         db  0x7a ; 'z'
0000000000015f3f         db  0x0a ; '.'
0000000000015f40         db  0x0e ; '.'
0000000000015f41         db  0x18 ; '.'
0000000000015f42         db  0x41 ; 'A'
0000000000015f43         db  0x0e ; '.'
0000000000015f44         db  0x10 ; '.'
0000000000015f45         db  0x41 ; 'A'
0000000000015f46         db  0x0e ; '.'
0000000000015f47         db  0x08 ; '.'
0000000000015f48         db  0x41 ; 'A'
0000000000015f49         db  0x0b ; '.'
0000000000015f4a         db  0x00 ; '.'
0000000000015f4b         db  0x00 ; '.'
0000000000015f4c         db  0x00 ; '.'
0000000000015f4d         db  0x00 ; '.'
0000000000015f4e         db  0x00 ; '.'
0000000000015f4f         db  0x00 ; '.'
0000000000015f50         dd         0x0000004c                                  ; Length of the record
0000000000015f54         dd         0x00000204                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000015f58         db         0x08, 0xd1, 0xfe, 0xff                      ; begin 0x3060
0000000000015f5c         db         0xff, 3 dup (0x00)                          ; length 0xff (end at 0x315f)
0000000000015f60         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000015f61         db  0x42 ; 'B'
0000000000015f62         db  0x0e ; '.'
0000000000015f63         db  0x10 ; '.'
0000000000015f64         db  0x8f ; '.'
0000000000015f65         db  0x02 ; '.'
0000000000015f66         db  0x42 ; 'B'
0000000000015f67         db  0x0e ; '.'
0000000000015f68         db  0x18 ; '.'
0000000000015f69         db  0x8e ; '.'
0000000000015f6a         db  0x03 ; '.'
0000000000015f6b         db  0x45 ; 'E'
0000000000015f6c         db  0x0e ; '.'
0000000000015f6d         db  0x20 ; ' '
0000000000015f6e         db  0x8d ; '.'
0000000000015f6f         db  0x04 ; '.'
0000000000015f70         db  0x42 ; 'B'
0000000000015f71         db  0x0e ; '.'
0000000000015f72         db  0x28 ; '('
0000000000015f73         db  0x8c ; '.'
0000000000015f74         db  0x05 ; '.'
0000000000015f75         db  0x44 ; 'D'
0000000000015f76         db  0x0e ; '.'
0000000000015f77         db  0x30 ; '0'
0000000000015f78         db  0x86 ; '.'
0000000000015f79         db  0x06 ; '.'
0000000000015f7a         db  0x41 ; 'A'
0000000000015f7b         db  0x0e ; '.'
0000000000015f7c         db  0x38 ; '8'
0000000000015f7d         db  0x83 ; '.'
0000000000015f7e         db  0x07 ; '.'
0000000000015f7f         db  0x47 ; 'G'
0000000000015f80         db  0x0e ; '.'
0000000000015f81         db  0x50 ; 'P'
0000000000015f82         db  0x02 ; '.'
0000000000015f83         db  0xc3 ; '.'
0000000000015f84         db  0x0a ; '.'
0000000000015f85         db  0x0e ; '.'
0000000000015f86         db  0x38 ; '8'
0000000000015f87         db  0x44 ; 'D'
0000000000015f88         db  0x0e ; '.'
0000000000015f89         db  0x30 ; '0'
0000000000015f8a         db  0x41 ; 'A'
0000000000015f8b         db  0x0e ; '.'
0000000000015f8c         db  0x28 ; '('
0000000000015f8d         db  0x42 ; 'B'
0000000000015f8e         db  0x0e ; '.'
0000000000015f8f         db  0x20 ; ' '
0000000000015f90         db  0x42 ; 'B'
0000000000015f91         db  0x0e ; '.'
0000000000015f92         db  0x18 ; '.'
0000000000015f93         db  0x42 ; 'B'
0000000000015f94         db  0x0e ; '.'
0000000000015f95         db  0x10 ; '.'
0000000000015f96         db  0x42 ; 'B'
0000000000015f97         db  0x0e ; '.'
0000000000015f98         db  0x08 ; '.'
0000000000015f99         db  0x49 ; 'I'
0000000000015f9a         db  0x0b ; '.'
0000000000015f9b         db  0x00 ; '.'
0000000000015f9c         db  0x00 ; '.'
0000000000015f9d         db  0x00 ; '.'
0000000000015f9e         db  0x00 ; '.'
0000000000015f9f         db  0x00 ; '.'
0000000000015fa0         dd         0x0000001c                                  ; Length of the record
0000000000015fa4         dd         0x00000254                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000015fa8         db         0xb8, 0xd1, 0xfe, 0xff                      ; begin 0x3160
0000000000015fac         db         0x9f, 3 dup (0x00)                          ; length 0x9f (end at 0x31ff)
0000000000015fb0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000015fb1         db  0x44 ; 'D'
0000000000015fb2         db  0x0e ; '.'
0000000000015fb3         db  0x10 ; '.'
0000000000015fb4         db  0x83 ; '.'
0000000000015fb5         db  0x02 ; '.'
0000000000015fb6         db  0x02 ; '.'
0000000000015fb7         db  0x78 ; 'x'
0000000000015fb8         db  0x0a ; '.'
0000000000015fb9         db  0x0e ; '.'
0000000000015fba         db  0x08 ; '.'
0000000000015fbb         db  0x41 ; 'A'
0000000000015fbc         db  0x0b ; '.'
0000000000015fbd         db  0x00 ; '.'
0000000000015fbe         db  0x00 ; '.'
0000000000015fbf         db  0x00 ; '.'
0000000000015fc0         dd         0x00000040                                  ; Length of the record
0000000000015fc4         dd         0x00000274                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000015fc8         db         0x38, 0xd2, 0xfe, 0xff                      ; begin 0x3200
0000000000015fcc         db         0xe7, 3 dup (0x00)                          ; length 0xe7 (end at 0x32e7)
0000000000015fd0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000015fd1         db  0x41 ; 'A'
0000000000015fd2         db  0x0e ; '.'
0000000000015fd3         db  0x10 ; '.'
0000000000015fd4         db  0x86 ; '.'
0000000000015fd5         db  0x02 ; '.'
0000000000015fd6         db  0x41 ; 'A'
0000000000015fd7         db  0x0e ; '.'
0000000000015fd8         db  0x18 ; '.'
0000000000015fd9         db  0x83 ; '.'
0000000000015fda         db  0x03 ; '.'
0000000000015fdb         db  0x49 ; 'I'
0000000000015fdc         db  0x0e ; '.'
0000000000015fdd         db  0x20 ; ' '
0000000000015fde         db  0x6e ; 'n'
0000000000015fdf         db  0x0a ; '.'
0000000000015fe0         db  0x0e ; '.'
0000000000015fe1         db  0x18 ; '.'
0000000000015fe2         db  0x41 ; 'A'
0000000000015fe3         db  0x0e ; '.'
0000000000015fe4         db  0x10 ; '.'
0000000000015fe5         db  0x41 ; 'A'
0000000000015fe6         db  0x0e ; '.'
0000000000015fe7         db  0x08 ; '.'
0000000000015fe8         db  0x45 ; 'E'
0000000000015fe9         db  0x0b ; '.'
0000000000015fea         db  0x02 ; '.'
0000000000015feb         db  0x4a ; 'J'
0000000000015fec         db  0x0a ; '.'
0000000000015fed         db  0x0e ; '.'
0000000000015fee         db  0x18 ; '.'
0000000000015fef         db  0x41 ; 'A'
0000000000015ff0         db  0x0e ; '.'
0000000000015ff1         db  0x10 ; '.'
0000000000015ff2         db  0x41 ; 'A'
0000000000015ff3         db  0x0e ; '.'
0000000000015ff4         db  0x08 ; '.'
0000000000015ff5         db  0x44 ; 'D'
0000000000015ff6         db  0x0b ; '.'
0000000000015ff7         db  0x02 ; '.'
0000000000015ff8         db  0x54 ; 'T'
0000000000015ff9         db  0x0e ; '.'
0000000000015ffa         db  0x18 ; '.'
0000000000015ffb         db  0x41 ; 'A'
0000000000015ffc         db  0x0e ; '.'
0000000000015ffd         db  0x10 ; '.'
0000000000015ffe         db  0x41 ; 'A'
0000000000015fff         db  0x0e ; '.'
0000000000016000         db  0x08 ; '.'
0000000000016001         db  0x00 ; '.'
0000000000016002         db  0x00 ; '.'
0000000000016003         db  0x00 ; '.'
0000000000016004         dd         0x00000074                                  ; Length of the record
0000000000016008         dd         0x000002b8                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
000000000001600c         db         0xe4, 0xd2, 0xfe, 0xff                      ; begin 0x32f0
0000000000016010         db         0x34, 0x12, 2 dup (0x00)                    ; length 0x1234 (end at 0x4524)
0000000000016014         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016015         db  0x42 ; 'B'
0000000000016016         db  0x0e ; '.'
0000000000016017         db  0x10 ; '.'
0000000000016018         db  0x8f ; '.'
0000000000016019         db  0x02 ; '.'
000000000001601a         db  0x42 ; 'B'
000000000001601b         db  0x0e ; '.'
000000000001601c         db  0x18 ; '.'
000000000001601d         db  0x8e ; '.'
000000000001601e         db  0x03 ; '.'
000000000001601f         db  0x45 ; 'E'
0000000000016020         db  0x0e ; '.'
0000000000016021         db  0x20 ; ' '
0000000000016022         db  0x8d ; '.'
0000000000016023         db  0x04 ; '.'
0000000000016024         db  0x42 ; 'B'
0000000000016025         db  0x0e ; '.'
0000000000016026         db  0x28 ; '('
0000000000016027         db  0x8c ; '.'
0000000000016028         db  0x05 ; '.'
0000000000016029         db  0x44 ; 'D'
000000000001602a         db  0x0e ; '.'
000000000001602b         db  0x30 ; '0'
000000000001602c         db  0x86 ; '.'
000000000001602d         db  0x06 ; '.'
000000000001602e         db  0x41 ; 'A'
000000000001602f         db  0x0e ; '.'
0000000000016030         db  0x38 ; '8'
0000000000016031         db  0x83 ; '.'
0000000000016032         db  0x07 ; '.'
0000000000016033         db  0x53 ; 'S'
0000000000016034         db  0x0e ; '.'
0000000000016035         db  0xf0 ; '.'
0000000000016036         db  0x01 ; '.'
0000000000016037         db  0x03 ; '.'
0000000000016038         db  0x81 ; '.'
0000000000016039         db  0x0b ; '.'
000000000001603a         db  0x0e ; '.'
000000000001603b         db  0xf8 ; '.'
000000000001603c         db  0x01 ; '.'
000000000001603d         db  0x4a ; 'J'
000000000001603e         db  0x0e ; '.'
000000000001603f         db  0x80 ; '.'
0000000000016040         db  0x02 ; '.'
0000000000016041         db  0x44 ; 'D'
0000000000016042         db  0x0e ; '.'
0000000000016043         db  0x88 ; '.'
0000000000016044         db  0x02 ; '.'
0000000000016045         db  0x45 ; 'E'
0000000000016046         db  0x0e ; '.'
0000000000016047         db  0x90 ; '.'
0000000000016048         db  0x02 ; '.'
0000000000016049         db  0x5f ; '_'
000000000001604a         db  0x0e ; '.'
000000000001604b         db  0xf0 ; '.'
000000000001604c         db  0x01 ; '.'
000000000001604d         db  0x64 ; 'd'
000000000001604e         db  0x0a ; '.'
000000000001604f         db  0x0e ; '.'
0000000000016050         db  0x38 ; '8'
0000000000016051         db  0x41 ; 'A'
0000000000016052         db  0x0e ; '.'
0000000000016053         db  0x30 ; '0'
0000000000016054         db  0x41 ; 'A'
0000000000016055         db  0x0e ; '.'
0000000000016056         db  0x28 ; '('
0000000000016057         db  0x42 ; 'B'
0000000000016058         db  0x0e ; '.'
0000000000016059         db  0x20 ; ' '
000000000001605a         db  0x42 ; 'B'
000000000001605b         db  0x0e ; '.'
000000000001605c         db  0x18 ; '.'
000000000001605d         db  0x42 ; 'B'
000000000001605e         db  0x0e ; '.'
000000000001605f         db  0x10 ; '.'
0000000000016060         db  0x42 ; 'B'
0000000000016061         db  0x0e ; '.'
0000000000016062         db  0x08 ; '.'
0000000000016063         db  0x44 ; 'D'
0000000000016064         db  0x0b ; '.'
0000000000016065         db  0x03 ; '.'
0000000000016066         db  0x99 ; '.'
0000000000016067         db  0x05 ; '.'
0000000000016068         db  0x0e ; '.'
0000000000016069         db  0xf8 ; '.'
000000000001606a         db  0x01 ; '.'
000000000001606b         db  0x4d ; 'M'
000000000001606c         db  0x0e ; '.'
000000000001606d         db  0x80 ; '.'
000000000001606e         db  0x02 ; '.'
000000000001606f         db  0x44 ; 'D'
0000000000016070         db  0x0e ; '.'
0000000000016071         db  0x88 ; '.'
0000000000016072         db  0x02 ; '.'
0000000000016073         db  0x47 ; 'G'
0000000000016074         db  0x0e ; '.'
0000000000016075         db  0x90 ; '.'
0000000000016076         db  0x02 ; '.'
0000000000016077         db  0x5b ; '['
0000000000016078         db  0x0e ; '.'
0000000000016079         db  0xf0 ; '.'
000000000001607a         db  0x01 ; '.'
000000000001607b         db  0x00 ; '.'
000000000001607c         dd         0x00000068                                  ; Length of the record
0000000000016080         dd         0x00000330                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000016084         db         0xac, 0xe4, 0xfe, 0xff                      ; begin 0x4530
0000000000016088         db         0xab, 0x01, 2 dup (0x00)                    ; length 0x1ab (end at 0x46db)
000000000001608c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001608d         db  0x42 ; 'B'
000000000001608e         db  0x0e ; '.'
000000000001608f         db  0x10 ; '.'
0000000000016090         db  0x8f ; '.'
0000000000016091         db  0x02 ; '.'
0000000000016092         db  0x42 ; 'B'
0000000000016093         db  0x0e ; '.'
0000000000016094         db  0x18 ; '.'
0000000000016095         db  0x8e ; '.'
0000000000016096         db  0x03 ; '.'
0000000000016097         db  0x45 ; 'E'
0000000000016098         db  0x0e ; '.'
0000000000016099         db  0x20 ; ' '
000000000001609a         db  0x8d ; '.'
000000000001609b         db  0x04 ; '.'
000000000001609c         db  0x42 ; 'B'
000000000001609d         db  0x0e ; '.'
000000000001609e         db  0x28 ; '('
000000000001609f         db  0x8c ; '.'
00000000000160a0         db  0x05 ; '.'
00000000000160a1         db  0x44 ; 'D'
00000000000160a2         db  0x0e ; '.'
00000000000160a3         db  0x30 ; '0'
00000000000160a4         db  0x86 ; '.'
00000000000160a5         db  0x06 ; '.'
00000000000160a6         db  0x41 ; 'A'
00000000000160a7         db  0x0e ; '.'
00000000000160a8         db  0x38 ; '8'
00000000000160a9         db  0x83 ; '.'
00000000000160aa         db  0x07 ; '.'
00000000000160ab         db  0x47 ; 'G'
00000000000160ac         db  0x0e ; '.'
00000000000160ad         db  0x60 ; '`'
00000000000160ae         db  0x02 ; '.'
00000000000160af         db  0x99 ; '.'
00000000000160b0         db  0x0e ; '.'
00000000000160b1         db  0x68 ; 'h'
00000000000160b2         db  0x5f ; '_'
00000000000160b3         db  0x0e ; '.'
00000000000160b4         db  0x70 ; 'p'
00000000000160b5         db  0x46 ; 'F'
00000000000160b6         db  0x0e ; '.'
00000000000160b7         db  0x78 ; 'x'
00000000000160b8         db  0x42 ; 'B'
00000000000160b9         db  0x0e ; '.'
00000000000160ba         db  0x80 ; '.'
00000000000160bb         db  0x01 ; '.'
00000000000160bc         db  0x59 ; 'Y'
00000000000160bd         db  0x0e ; '.'
00000000000160be         db  0x60 ; '`'
00000000000160bf         db  0x02 ; '.'
00000000000160c0         db  0x40 ; '@'
00000000000160c1         db  0x0e ; '.'
00000000000160c2         db  0x68 ; 'h'
00000000000160c3         db  0x4b ; 'K'
00000000000160c4         db  0x0e ; '.'
00000000000160c5         db  0x70 ; 'p'
00000000000160c6         db  0x43 ; 'C'
00000000000160c7         db  0x0e ; '.'
00000000000160c8         db  0x78 ; 'x'
00000000000160c9         db  0x45 ; 'E'
00000000000160ca         db  0x0e ; '.'
00000000000160cb         db  0x80 ; '.'
00000000000160cc         db  0x01 ; '.'
00000000000160cd         db  0x5e ; '^'
00000000000160ce         db  0x0e ; '.'
00000000000160cf         db  0x60 ; '`'
00000000000160d0         db  0x4c ; 'L'
00000000000160d1         db  0x0a ; '.'
00000000000160d2         db  0x0e ; '.'
00000000000160d3         db  0x38 ; '8'
00000000000160d4         db  0x44 ; 'D'
00000000000160d5         db  0x0e ; '.'
00000000000160d6         db  0x30 ; '0'
00000000000160d7         db  0x41 ; 'A'
00000000000160d8         db  0x0e ; '.'
00000000000160d9         db  0x28 ; '('
00000000000160da         db  0x42 ; 'B'
00000000000160db         db  0x0e ; '.'
00000000000160dc         db  0x20 ; ' '
00000000000160dd         db  0x42 ; 'B'
00000000000160de         db  0x0e ; '.'
00000000000160df         db  0x18 ; '.'
00000000000160e0         db  0x42 ; 'B'
00000000000160e1         db  0x0e ; '.'
00000000000160e2         db  0x10 ; '.'
00000000000160e3         db  0x42 ; 'B'
00000000000160e4         db  0x0e ; '.'
00000000000160e5         db  0x08 ; '.'
00000000000160e6         db  0x46 ; 'F'
00000000000160e7         db  0x0b ; '.'
00000000000160e8         dd         0x00000028                                  ; Length of the record
00000000000160ec         dd         0x0000039c                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
00000000000160f0         db         0xf0, 0xe5, 0xfe, 0xff                      ; begin 0x46e0
00000000000160f4         db         0x36, 3 dup (0x00)                          ; length 0x36 (end at 0x4716)
00000000000160f8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000160f9         db  0x42 ; 'B'
00000000000160fa         db  0x0e ; '.'
00000000000160fb         db  0x10 ; '.'
00000000000160fc         db  0x8c ; '.'
00000000000160fd         db  0x02 ; '.'
00000000000160fe         db  0x41 ; 'A'
00000000000160ff         db  0x0e ; '.'
0000000000016100         db  0x18 ; '.'
0000000000016101         db  0x86 ; '.'
0000000000016102         db  0x03 ; '.'
0000000000016103         db  0x41 ; 'A'
0000000000016104         db  0x0e ; '.'
0000000000016105         db  0x20 ; ' '
0000000000016106         db  0x83 ; '.'
0000000000016107         db  0x04 ; '.'
0000000000016108         db  0x6e ; 'n'
0000000000016109         db  0x0e ; '.'
000000000001610a         db  0x18 ; '.'
000000000001610b         db  0x41 ; 'A'
000000000001610c         db  0x0e ; '.'
000000000001610d         db  0x10 ; '.'
000000000001610e         db  0x42 ; 'B'
000000000001610f         db  0x0e ; '.'
0000000000016110         db  0x08 ; '.'
0000000000016111         db  0x00 ; '.'
0000000000016112         db  0x00 ; '.'
0000000000016113         db  0x00 ; '.'
0000000000016114         dd         0x00000010                                  ; Length of the record
0000000000016118         dd         0x000003c8                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
000000000001611c         db         0x04, 0xe6, 0xfe, 0xff                      ; begin 0x4720
0000000000016120         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0x4731)
0000000000016124         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016125         align      8
0000000000016128         dd         0x00000010                                  ; Length of the record
000000000001612c         dd         0x000003dc                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000016130         db         0x10, 0xe6, 0xfe, 0xff                      ; begin 0x4740
0000000000016134         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0x4751)
0000000000016138         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016139         align      4
000000000001613c         dd         0x00000010                                  ; Length of the record
0000000000016140         dd         0x000003f0                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000016144         db         0x1c, 0xe6, 0xfe, 0xff                      ; begin 0x4760
0000000000016148         db         0x35, 3 dup (0x00)                          ; length 0x35 (end at 0x4795)
000000000001614c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001614d         align      16
0000000000016150         dd         0x00000010                                  ; Length of the record
0000000000016154         dd         0x00000404                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000016158         db         0x48, 0xe6, 0xfe, 0xff                      ; begin 0x47a0
000000000001615c         db         0x15, 3 dup (0x00)                          ; length 0x15 (end at 0x47b5)
0000000000016160         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016161         align      4
0000000000016164         dd         0x00000010                                  ; Length of the record
0000000000016168         dd         0x00000418                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
000000000001616c         db         0x54, 0xe6, 0xfe, 0xff                      ; begin 0x47c0
0000000000016170         db         0x30, 3 dup (0x00)                          ; length 0x30 (end at 0x47f0)
0000000000016174         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016175         db  0x6b ; 'k'
0000000000016176         db  0x0e ; '.'
0000000000016177         db  0x10 ; '.'
0000000000016178         dd         0x00000050                                  ; Length of the record
000000000001617c         dd         0x0000042c                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000016180         db         0x70, 0xe6, 0xfe, 0xff                      ; begin 0x47f0
0000000000016184         db         0x74, 3 dup (0x00)                          ; length 0x74 (end at 0x4864)
0000000000016188         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016189         db  0x42 ; 'B'
000000000001618a         db  0x0e ; '.'
000000000001618b         db  0x10 ; '.'
000000000001618c         db  0x8f ; '.'
000000000001618d         db  0x02 ; '.'
000000000001618e         db  0x42 ; 'B'
000000000001618f         db  0x0e ; '.'
0000000000016190         db  0x18 ; '.'
0000000000016191         db  0x8e ; '.'
0000000000016192         db  0x03 ; '.'
0000000000016193         db  0x49 ; 'I'
0000000000016194         db  0x0e ; '.'
0000000000016195         db  0x20 ; ' '
0000000000016196         db  0x8d ; '.'
0000000000016197         db  0x04 ; '.'
0000000000016198         db  0x42 ; 'B'
0000000000016199         db  0x0e ; '.'
000000000001619a         db  0x28 ; '('
000000000001619b         db  0x8c ; '.'
000000000001619c         db  0x05 ; '.'
000000000001619d         db  0x44 ; 'D'
000000000001619e         db  0x0e ; '.'
000000000001619f         db  0x30 ; '0'
00000000000161a0         db  0x86 ; '.'
00000000000161a1         db  0x06 ; '.'
00000000000161a2         db  0x41 ; 'A'
00000000000161a3         db  0x0e ; '.'
00000000000161a4         db  0x38 ; '8'
00000000000161a5         db  0x83 ; '.'
00000000000161a6         db  0x07 ; '.'
00000000000161a7         db  0x4d ; 'M'
00000000000161a8         db  0x0e ; '.'
00000000000161a9         db  0x50 ; 'P'
00000000000161aa         db  0x5f ; '_'
00000000000161ab         db  0x0e ; '.'
00000000000161ac         db  0x58 ; 'X'
00000000000161ad         db  0x47 ; 'G'
00000000000161ae         db  0x0e ; '.'
00000000000161af         db  0x60 ; '`'
00000000000161b0         db  0x46 ; 'F'
00000000000161b1         db  0x0e ; '.'
00000000000161b2         db  0x68 ; 'h'
00000000000161b3         db  0x44 ; 'D'
00000000000161b4         db  0x0e ; '.'
00000000000161b5         db  0x70 ; 'p'
00000000000161b6         db  0x58 ; 'X'
00000000000161b7         db  0x0e ; '.'
00000000000161b8         db  0x38 ; '8'
00000000000161b9         db  0x41 ; 'A'
00000000000161ba         db  0x0e ; '.'
00000000000161bb         db  0x30 ; '0'
00000000000161bc         db  0x41 ; 'A'
00000000000161bd         db  0x0e ; '.'
00000000000161be         db  0x28 ; '('
00000000000161bf         db  0x42 ; 'B'
00000000000161c0         db  0x0e ; '.'
00000000000161c1         db  0x20 ; ' '
00000000000161c2         db  0x42 ; 'B'
00000000000161c3         db  0x0e ; '.'
00000000000161c4         db  0x18 ; '.'
00000000000161c5         db  0x42 ; 'B'
00000000000161c6         db  0x0e ; '.'
00000000000161c7         db  0x10 ; '.'
00000000000161c8         db  0x42 ; 'B'
00000000000161c9         db  0x0e ; '.'
00000000000161ca         db  0x08 ; '.'
00000000000161cb         db  0x00 ; '.'
00000000000161cc         dd         0x00000068                                  ; Length of the record
00000000000161d0         dd         0x00000480                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
00000000000161d4         db         0x9c, 0xe6, 0xfe, 0xff                      ; begin 0x4870
00000000000161d8         db         0xe3, 3 dup (0x00)                          ; length 0xe3 (end at 0x4953)
00000000000161dc         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000161dd         db  0x42 ; 'B'
00000000000161de         db  0x0e ; '.'
00000000000161df         db  0x10 ; '.'
00000000000161e0         db  0x8f ; '.'
00000000000161e1         db  0x02 ; '.'
00000000000161e2         db  0x42 ; 'B'
00000000000161e3         db  0x0e ; '.'
00000000000161e4         db  0x18 ; '.'
00000000000161e5         db  0x8e ; '.'
00000000000161e6         db  0x03 ; '.'
00000000000161e7         db  0x49 ; 'I'
00000000000161e8         db  0x0e ; '.'
00000000000161e9         db  0x20 ; ' '
00000000000161ea         db  0x8d ; '.'
00000000000161eb         db  0x04 ; '.'
00000000000161ec         db  0x42 ; 'B'
00000000000161ed         db  0x0e ; '.'
00000000000161ee         db  0x28 ; '('
00000000000161ef         db  0x8c ; '.'
00000000000161f0         db  0x05 ; '.'
00000000000161f1         db  0x44 ; 'D'
00000000000161f2         db  0x0e ; '.'
00000000000161f3         db  0x30 ; '0'
00000000000161f4         db  0x86 ; '.'
00000000000161f5         db  0x06 ; '.'
00000000000161f6         db  0x41 ; 'A'
00000000000161f7         db  0x0e ; '.'
00000000000161f8         db  0x38 ; '8'
00000000000161f9         db  0x83 ; '.'
00000000000161fa         db  0x07 ; '.'
00000000000161fb         db  0x4d ; 'M'
00000000000161fc         db  0x0e ; '.'
00000000000161fd         db  0x70 ; 'p'
00000000000161fe         db  0x65 ; 'e'
00000000000161ff         db  0x0e ; '.'
0000000000016200         db  0x78 ; 'x'
0000000000016201         db  0x4d ; 'M'
0000000000016202         db  0x0e ; '.'
0000000000016203         db  0x80 ; '.'
0000000000016204         db  0x01 ; '.'
0000000000016205         db  0x46 ; 'F'
0000000000016206         db  0x0e ; '.'
0000000000016207         db  0x88 ; '.'
0000000000016208         db  0x01 ; '.'
0000000000016209         db  0x42 ; 'B'
000000000001620a         db  0x0e ; '.'
000000000001620b         db  0x90 ; '.'
000000000001620c         db  0x01 ; '.'
000000000001620d         db  0x5e ; '^'
000000000001620e         db  0x0e ; '.'
000000000001620f         db  0x70 ; 'p'
0000000000016210         db  0x56 ; 'V'
0000000000016211         db  0x0e ; '.'
0000000000016212         db  0x78 ; 'x'
0000000000016213         db  0x43 ; 'C'
0000000000016214         db  0x0e ; '.'
0000000000016215         db  0x80 ; '.'
0000000000016216         db  0x01 ; '.'
0000000000016217         db  0x43 ; 'C'
0000000000016218         db  0x0e ; '.'
0000000000016219         db  0x88 ; '.'
000000000001621a         db  0x01 ; '.'
000000000001621b         db  0x56 ; 'V'
000000000001621c         db  0x0e ; '.'
000000000001621d         db  0x90 ; '.'
000000000001621e         db  0x01 ; '.'
000000000001621f         db  0x52 ; 'R'
0000000000016220         db  0x0e ; '.'
0000000000016221         db  0x70 ; 'p'
0000000000016222         db  0x5b ; '['
0000000000016223         db  0x0e ; '.'
0000000000016224         db  0x38 ; '8'
0000000000016225         db  0x41 ; 'A'
0000000000016226         db  0x0e ; '.'
0000000000016227         db  0x30 ; '0'
0000000000016228         db  0x41 ; 'A'
0000000000016229         db  0x0e ; '.'
000000000001622a         db  0x28 ; '('
000000000001622b         db  0x42 ; 'B'
000000000001622c         db  0x0e ; '.'
000000000001622d         db  0x20 ; ' '
000000000001622e         db  0x42 ; 'B'
000000000001622f         db  0x0e ; '.'
0000000000016230         db  0x18 ; '.'
0000000000016231         db  0x42 ; 'B'
0000000000016232         db  0x0e ; '.'
0000000000016233         db  0x10 ; '.'
0000000000016234         db  0x42 ; 'B'
0000000000016235         db  0x0e ; '.'
0000000000016236         db  0x08 ; '.'
0000000000016237         db  0x00 ; '.'
0000000000016238         dd         0x00000010                                  ; Length of the record
000000000001623c         dd         0x000004ec                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000016240         db         0x20, 0xe7, 0xfe, 0xff                      ; begin 0x4960
0000000000016244         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0x496a)
0000000000016248         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016249         align      4
000000000001624c         dd         0x00000028                                  ; Length of the record
0000000000016250         dd         0x00000500                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000016254         db         0x1c, 0xe7, 0xfe, 0xff                      ; begin 0x4970
0000000000016258         db         0x93, 3 dup (0x00)                          ; length 0x93 (end at 0x4a03)
000000000001625c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001625d         db  0x48 ; 'H'
000000000001625e         db  0x0e ; '.'
000000000001625f         db  0x10 ; '.'
0000000000016260         db  0x8c ; '.'
0000000000016261         db  0x02 ; '.'
0000000000016262         db  0x48 ; 'H'
0000000000016263         db  0x0e ; '.'
0000000000016264         db  0x18 ; '.'
0000000000016265         db  0x86 ; '.'
0000000000016266         db  0x03 ; '.'
0000000000016267         db  0x41 ; 'A'
0000000000016268         db  0x0e ; '.'
0000000000016269         db  0x20 ; ' '
000000000001626a         db  0x83 ; '.'
000000000001626b         db  0x04 ; '.'
000000000001626c         db  0x02 ; '.'
000000000001626d         db  0x74 ; 't'
000000000001626e         db  0x0e ; '.'
000000000001626f         db  0x18 ; '.'
0000000000016270         db  0x4b ; 'K'
0000000000016271         db  0x0e ; '.'
0000000000016272         db  0x10 ; '.'
0000000000016273         db  0x42 ; 'B'
0000000000016274         db  0x0e ; '.'
0000000000016275         db  0x08 ; '.'
0000000000016276         db  0x00 ; '.'
0000000000016277         db  0x00 ; '.'
0000000000016278         dd         0x00000010                                  ; Length of the record
000000000001627c         dd         0x0000052c                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000016280         db         0x90, 0xe7, 0xfe, 0xff                      ; begin 0x4a10
0000000000016284         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x4a23)
0000000000016288         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016289         align      4
000000000001628c         dd         0x00000010                                  ; Length of the record
0000000000016290         dd         0x00000540                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000016294         db         0x9c, 0xe7, 0xfe, 0xff                      ; begin 0x4a30
0000000000016298         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x4a3c)
000000000001629c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001629d         align      32
00000000000162a0         dd         0x00000010                                  ; Length of the record
00000000000162a4         dd         0x00000554                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
00000000000162a8         db         0x98, 0xe7, 0xfe, 0xff                      ; begin 0x4a40
00000000000162ac         db         0x18, 3 dup (0x00)                          ; length 0x18 (end at 0x4a58)
00000000000162b0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000162b1         align      4
00000000000162b4         dd         0x00000010                                  ; Length of the record
00000000000162b8         dd         0x00000568                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
00000000000162bc         db         0xa4, 0xe7, 0xfe, 0xff                      ; begin 0x4a60
00000000000162c0         db         0x14, 3 dup (0x00)                          ; length 0x14 (end at 0x4a74)
00000000000162c4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000162c5         align      8
00000000000162c8         dd         0x00000018                                  ; Length of the record
00000000000162cc         dd         0x0000057c                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
00000000000162d0         db         0xb0, 0xe7, 0xfe, 0xff                      ; begin 0x4a80
00000000000162d4         db         0x8e, 3 dup (0x00)                          ; length 0x8e (end at 0x4b0e)
00000000000162d8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000162d9         db  0x44 ; 'D'
00000000000162da         db  0x0e ; '.'
00000000000162db         db  0x50 ; 'P'
00000000000162dc         db  0x02 ; '.'
00000000000162dd         db  0x7f ; '.'
00000000000162de         db  0x0a ; '.'
00000000000162df         db  0x0e ; '.'
00000000000162e0         db  0x08 ; '.'
00000000000162e1         db  0x41 ; 'A'
00000000000162e2         db  0x0b ; '.'
00000000000162e3         db  0x00 ; '.'
00000000000162e4         dd         0x00000018                                  ; Length of the record
00000000000162e8         dd         0x00000598                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
00000000000162ec         db         0x24, 0xe8, 0xfe, 0xff                      ; begin 0x4b10
00000000000162f0         db         0x8a, 3 dup (0x00)                          ; length 0x8a (end at 0x4b9a)
00000000000162f4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000162f5         db  0x44 ; 'D'
00000000000162f6         db  0x0e ; '.'
00000000000162f7         db  0x50 ; 'P'
00000000000162f8         db  0x02 ; '.'
00000000000162f9         db  0x7b ; '{'
00000000000162fa         db  0x0a ; '.'
00000000000162fb         db  0x0e ; '.'
00000000000162fc         db  0x08 ; '.'
00000000000162fd         db  0x41 ; 'A'
00000000000162fe         db  0x0b ; '.'
00000000000162ff         db  0x00 ; '.'
0000000000016300         dd         0x00000010                                  ; Length of the record
0000000000016304         dd         0x000005b4                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000016308         db         0x98, 0xe8, 0xfe, 0xff                      ; begin 0x4ba0
000000000001630c         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x4bac)
0000000000016310         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016311         align      4
0000000000016314         dd         0x00000010                                  ; Length of the record
0000000000016318         dd         0x000005c8                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
000000000001631c         db         0x94, 0xe8, 0xfe, 0xff                      ; begin 0x4bb0
0000000000016320         db         0x0f, 3 dup (0x00)                          ; length 0xf (end at 0x4bbf)
0000000000016324         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016325         align      8
0000000000016328         dd         0x00000018                                  ; Length of the record
000000000001632c         dd         0x000005dc                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000016330         db         0x90, 0xe8, 0xfe, 0xff                      ; begin 0x4bc0
0000000000016334         db         0x98, 3 dup (0x00)                          ; length 0x98 (end at 0x4c58)
0000000000016338         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016339         db  0x44 ; 'D'
000000000001633a         db  0x0e ; '.'
000000000001633b         db  0x50 ; 'P'
000000000001633c         db  0x02 ; '.'
000000000001633d         db  0x8e ; '.'
000000000001633e         db  0x0a ; '.'
000000000001633f         db  0x0e ; '.'
0000000000016340         db  0x08 ; '.'
0000000000016341         db  0x41 ; 'A'
0000000000016342         db  0x0b ; '.'
0000000000016343         db  0x00 ; '.'
0000000000016344         dd         0x00000010                                  ; Length of the record
0000000000016348         dd         0x000005f8                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
000000000001634c         db         0x14, 0xe9, 0xfe, 0xff                      ; begin 0x4c60
0000000000016350         db         0x10, 3 dup (0x00)                          ; length 0x10 (end at 0x4c70)
0000000000016354         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016355         align      8
0000000000016358         dd         0x00000010                                  ; Length of the record
000000000001635c         dd         0x0000060c                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000016360         db         0x10, 0xe9, 0xfe, 0xff                      ; begin 0x4c70
0000000000016364         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0x4c81)
0000000000016368         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016369         align      4
000000000001636c         dd         0x00000010                                  ; Length of the record
0000000000016370         dd         0x00000620                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000016374         db         0x1c, 0xe9, 0xfe, 0xff                      ; begin 0x4c90
0000000000016378         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0x4c9a)
000000000001637c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001637d         align      128
0000000000016380         dd         0x00000018                                  ; Length of the record
0000000000016384         dd         0x00000634                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000016388         db         0x18, 0xe9, 0xfe, 0xff                      ; begin 0x4ca0
000000000001638c         db         0x8e, 3 dup (0x00)                          ; length 0x8e (end at 0x4d2e)
0000000000016390         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016391         db  0x44 ; 'D'
0000000000016392         db  0x0e ; '.'
0000000000016393         db  0x50 ; 'P'
0000000000016394         db  0x02 ; '.'
0000000000016395         db  0x7f ; '.'
0000000000016396         db  0x0a ; '.'
0000000000016397         db  0x0e ; '.'
0000000000016398         db  0x08 ; '.'
0000000000016399         db  0x41 ; 'A'
000000000001639a         db  0x0b ; '.'
000000000001639b         db  0x00 ; '.'
000000000001639c         dd         0x00000018                                  ; Length of the record
00000000000163a0         dd         0x00000650                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
00000000000163a4         db         0x8c, 0xe9, 0xfe, 0xff                      ; begin 0x4d30
00000000000163a8         db         0x91, 3 dup (0x00)                          ; length 0x91 (end at 0x4dc1)
00000000000163ac         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000163ad         db  0x44 ; 'D'
00000000000163ae         db  0x0e ; '.'
00000000000163af         db  0x50 ; 'P'
00000000000163b0         db  0x02 ; '.'
00000000000163b1         db  0x82 ; '.'
00000000000163b2         db  0x0a ; '.'
00000000000163b3         db  0x0e ; '.'
00000000000163b4         db  0x08 ; '.'
00000000000163b5         db  0x41 ; 'A'
00000000000163b6         db  0x0b ; '.'
00000000000163b7         db  0x00 ; '.'
00000000000163b8         dd         0x00000010                                  ; Length of the record
00000000000163bc         dd         0x0000066c                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
00000000000163c0         db         0x10, 0xea, 0xfe, 0xff                      ; begin 0x4dd0
00000000000163c4         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x4ddc)
00000000000163c8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000163c9         align      4
00000000000163cc         dd         0x00000010                                  ; Length of the record
00000000000163d0         dd         0x00000680                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
00000000000163d4         db         0x0c, 0xea, 0xfe, 0xff                      ; begin 0x4de0
00000000000163d8         db         0x17, 3 dup (0x00)                          ; length 0x17 (end at 0x4df7)
00000000000163dc         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000163dd         align      32
00000000000163e0         dd         0x00000010                                  ; Length of the record
00000000000163e4         dd         0x00000694                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
00000000000163e8         db         0x18, 0xea, 0xfe, 0xff                      ; begin 0x4e00
00000000000163ec         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x4e13)
00000000000163f0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000163f1         align      4
00000000000163f4         dd         0x00000010                                  ; Length of the record
00000000000163f8         dd         0x000006a8                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
00000000000163fc         db         0x24, 0xea, 0xfe, 0xff                      ; begin 0x4e20
0000000000016400         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x4e2c)
0000000000016404         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016405         align      8
0000000000016408         dd         0x00000010                                  ; Length of the record
000000000001640c         dd         0x000006bc                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000016410         db         0x20, 0xea, 0xfe, 0xff                      ; begin 0x4e30
0000000000016414         db         0x14, 3 dup (0x00)                          ; length 0x14 (end at 0x4e44)
0000000000016418         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016419         align      4
000000000001641c         dd         0x00000010                                  ; Length of the record
0000000000016420         dd         0x000006d0                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000016424         db         0x2c, 0xea, 0xfe, 0xff                      ; begin 0x4e50
0000000000016428         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x4e63)
000000000001642c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001642d         align      16
0000000000016430         dd         0x00000014                                  ; Length of the record
0000000000016434         dd         0x000006e4                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000016438         db         0x38, 0xea, 0xfe, 0xff                      ; begin 0x4e70
000000000001643c         db         0x18, 3 dup (0x00)                          ; length 0x18 (end at 0x4e88)
0000000000016440         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016441         align      8
0000000000016448         dd         0x00000034                                  ; Length of the record
000000000001644c         dd         0x000006fc                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000016450         db         0x40, 0xea, 0xfe, 0xff                      ; begin 0x4e90
0000000000016454         db         0x5e, 3 dup (0x00)                          ; length 0x5e (end at 0x4eee)
0000000000016458         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016459         db  0x42 ; 'B'
000000000001645a         db  0x0e ; '.'
000000000001645b         db  0x10 ; '.'
000000000001645c         db  0x8d ; '.'
000000000001645d         db  0x02 ; '.'
000000000001645e         db  0x42 ; 'B'
000000000001645f         db  0x0e ; '.'
0000000000016460         db  0x18 ; '.'
0000000000016461         db  0x8c ; '.'
0000000000016462         db  0x03 ; '.'
0000000000016463         db  0x44 ; 'D'
0000000000016464         db  0x0e ; '.'
0000000000016465         db  0x20 ; ' '
0000000000016466         db  0x86 ; '.'
0000000000016467         db  0x04 ; '.'
0000000000016468         db  0x41 ; 'A'
0000000000016469         db  0x0e ; '.'
000000000001646a         db  0x28 ; '('
000000000001646b         db  0x83 ; '.'
000000000001646c         db  0x05 ; '.'
000000000001646d         db  0x4a ; 'J'
000000000001646e         db  0x0e ; '.'
000000000001646f         db  0x30 ; '0'
0000000000016470         db  0x02 ; '.'
0000000000016471         db  0x41 ; 'A'
0000000000016472         db  0x0e ; '.'
0000000000016473         db  0x28 ; '('
0000000000016474         db  0x44 ; 'D'
0000000000016475         db  0x0e ; '.'
0000000000016476         db  0x20 ; ' '
0000000000016477         db  0x41 ; 'A'
0000000000016478         db  0x0e ; '.'
0000000000016479         db  0x18 ; '.'
000000000001647a         db  0x42 ; 'B'
000000000001647b         db  0x0e ; '.'
000000000001647c         db  0x10 ; '.'
000000000001647d         db  0x42 ; 'B'
000000000001647e         db  0x0e ; '.'
000000000001647f         db  0x08 ; '.'
0000000000016480         dd         0x00000014                                  ; Length of the record
0000000000016484         dd         0x00000734                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000016488         db         0x68, 0xea, 0xfe, 0xff                      ; begin 0x4ef0
000000000001648c         db         0x14, 3 dup (0x00)                          ; length 0x14 (end at 0x4f04)
0000000000016490         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016491         db  0x44 ; 'D'
0000000000016492         db  0x0e ; '.'
0000000000016493         db  0x10 ; '.'
0000000000016494         db  0x49 ; 'I'
0000000000016495         db  0x0e ; '.'
0000000000016496         db  0x08 ; '.'
0000000000016497         db  0x00 ; '.'
0000000000016498         dd         0x0000001c                                  ; Length of the record
000000000001649c         dd         0x0000074c                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
00000000000164a0         db         0x70, 0xea, 0xfe, 0xff                      ; begin 0x4f10
00000000000164a4         db         0x12, 3 dup (0x00)                          ; length 0x12 (end at 0x4f22)
00000000000164a8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000164a9         db  0x41 ; 'A'
00000000000164aa         db  0x0e ; '.'
00000000000164ab         db  0x10 ; '.'
00000000000164ac         db  0x83 ; '.'
00000000000164ad         db  0x02 ; '.'
00000000000164ae         db  0x4c ; 'L'
00000000000164af         db  0x0e ; '.'
00000000000164b0         db  0x08 ; '.'
00000000000164b1         db  0x00 ; '.'
00000000000164b2         db  0x00 ; '.'
00000000000164b3         db  0x00 ; '.'
00000000000164b4         db  0x00 ; '.'
00000000000164b5         db  0x00 ; '.'
00000000000164b6         db  0x00 ; '.'
00000000000164b7         db  0x00 ; '.'
00000000000164b8         dd         0x00000034                                  ; Length of the record
00000000000164bc         dd         0x0000076c                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
00000000000164c0         db         0x70, 0xea, 0xfe, 0xff                      ; begin 0x4f30
00000000000164c4         db         0x3f, 3 dup (0x00)                          ; length 0x3f (end at 0x4f6f)
00000000000164c8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000164c9         db  0x42 ; 'B'
00000000000164ca         db  0x0e ; '.'
00000000000164cb         db  0x10 ; '.'
00000000000164cc         db  0x8d ; '.'
00000000000164cd         db  0x02 ; '.'
00000000000164ce         db  0x42 ; 'B'
00000000000164cf         db  0x0e ; '.'
00000000000164d0         db  0x18 ; '.'
00000000000164d1         db  0x8c ; '.'
00000000000164d2         db  0x03 ; '.'
00000000000164d3         db  0x41 ; 'A'
00000000000164d4         db  0x0e ; '.'
00000000000164d5         db  0x20 ; ' '
00000000000164d6         db  0x86 ; '.'
00000000000164d7         db  0x04 ; '.'
00000000000164d8         db  0x41 ; 'A'
00000000000164d9         db  0x0e ; '.'
00000000000164da         db  0x28 ; '('
00000000000164db         db  0x83 ; '.'
00000000000164dc         db  0x05 ; '.'
00000000000164dd         db  0x46 ; 'F'
00000000000164de         db  0x0e ; '.'
00000000000164df         db  0x30 ; '0'
00000000000164e0         db  0x6a ; 'j'
00000000000164e1         db  0x0e ; '.'
00000000000164e2         db  0x28 ; '('
00000000000164e3         db  0x43 ; 'C'
00000000000164e4         db  0x0e ; '.'
00000000000164e5         db  0x20 ; ' '
00000000000164e6         db  0x41 ; 'A'
00000000000164e7         db  0x0e ; '.'
00000000000164e8         db  0x18 ; '.'
00000000000164e9         db  0x42 ; 'B'
00000000000164ea         db  0x0e ; '.'
00000000000164eb         db  0x10 ; '.'
00000000000164ec         db  0x42 ; 'B'
00000000000164ed         db  0x0e ; '.'
00000000000164ee         db  0x08 ; '.'
00000000000164ef         db  0x00 ; '.'
00000000000164f0         dd         0x00000110                                  ; Length of the record
00000000000164f4         dd         0x000007a4                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
00000000000164f8         db         0x78, 0xea, 0xfe, 0xff                      ; begin 0x4f70
00000000000164fc         db         0x17, 0x04, 2 dup (0x00)                    ; length 0x417 (end at 0x5387)
0000000000016500         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016501         db  0x42 ; 'B'
0000000000016502         db  0x0e ; '.'
0000000000016503         db  0x10 ; '.'
0000000000016504         db  0x8f ; '.'
0000000000016505         db  0x02 ; '.'
0000000000016506         db  0x42 ; 'B'
0000000000016507         db  0x0e ; '.'
0000000000016508         db  0x18 ; '.'
0000000000016509         db  0x8e ; '.'
000000000001650a         db  0x03 ; '.'
000000000001650b         db  0x42 ; 'B'
000000000001650c         db  0x0e ; '.'
000000000001650d         db  0x20 ; ' '
000000000001650e         db  0x8d ; '.'
000000000001650f         db  0x04 ; '.'
0000000000016510         db  0x42 ; 'B'
0000000000016511         db  0x0e ; '.'
0000000000016512         db  0x28 ; '('
0000000000016513         db  0x8c ; '.'
0000000000016514         db  0x05 ; '.'
0000000000016515         db  0x44 ; 'D'
0000000000016516         db  0x0e ; '.'
0000000000016517         db  0x30 ; '0'
0000000000016518         db  0x86 ; '.'
0000000000016519         db  0x06 ; '.'
000000000001651a         db  0x41 ; 'A'
000000000001651b         db  0x0e ; '.'
000000000001651c         db  0x38 ; '8'
000000000001651d         db  0x83 ; '.'
000000000001651e         db  0x07 ; '.'
000000000001651f         db  0x4a ; 'J'
0000000000016520         db  0x0e ; '.'
0000000000016521         db  0x60 ; '`'
0000000000016522         db  0x02 ; '.'
0000000000016523         db  0xdd ; '.'
0000000000016524         db  0x0e ; '.'
0000000000016525         db  0x68 ; 'h'
0000000000016526         db  0x57 ; 'W'
0000000000016527         db  0x0e ; '.'
0000000000016528         db  0x70 ; 'p'
0000000000016529         db  0x42 ; 'B'
000000000001652a         db  0x0e ; '.'
000000000001652b         db  0x78 ; 'x'
000000000001652c         db  0x42 ; 'B'
000000000001652d         db  0x0e ; '.'
000000000001652e         db  0x80 ; '.'
000000000001652f         db  0x01 ; '.'
0000000000016530         db  0x42 ; 'B'
0000000000016531         db  0x0e ; '.'
0000000000016532         db  0x88 ; '.'
0000000000016533         db  0x01 ; '.'
0000000000016534         db  0x42 ; 'B'
0000000000016535         db  0x0e ; '.'
0000000000016536         db  0x90 ; '.'
0000000000016537         db  0x01 ; '.'
0000000000016538         db  0x53 ; 'S'
0000000000016539         db  0x0e ; '.'
000000000001653a         db  0x60 ; '`'
000000000001653b         db  0x44 ; 'D'
000000000001653c         db  0x0a ; '.'
000000000001653d         db  0x0e ; '.'
000000000001653e         db  0x38 ; '8'
000000000001653f         db  0x41 ; 'A'
0000000000016540         db  0x0e ; '.'
0000000000016541         db  0x30 ; '0'
0000000000016542         db  0x41 ; 'A'
0000000000016543         db  0x0e ; '.'
0000000000016544         db  0x28 ; '('
0000000000016545         db  0x42 ; 'B'
0000000000016546         db  0x0e ; '.'
0000000000016547         db  0x20 ; ' '
0000000000016548         db  0x42 ; 'B'
0000000000016549         db  0x0e ; '.'
000000000001654a         db  0x18 ; '.'
000000000001654b         db  0x42 ; 'B'
000000000001654c         db  0x0e ; '.'
000000000001654d         db  0x10 ; '.'
000000000001654e         db  0x42 ; 'B'
000000000001654f         db  0x0e ; '.'
0000000000016550         db  0x08 ; '.'
0000000000016551         db  0x44 ; 'D'
0000000000016552         db  0x0b ; '.'
0000000000016553         db  0x02 ; '.'
0000000000016554         db  0x78 ; 'x'
0000000000016555         db  0x0a ; '.'
0000000000016556         db  0x0e ; '.'
0000000000016557         db  0x68 ; 'h'
0000000000016558         db  0x48 ; 'H'
0000000000016559         db  0x0b ; '.'
000000000001655a         db  0x5a ; 'Z'
000000000001655b         db  0x0a ; '.'
000000000001655c         db  0x0e ; '.'
000000000001655d         db  0x38 ; '8'
000000000001655e         db  0x47 ; 'G'
000000000001655f         db  0x0e ; '.'
0000000000016560         db  0x30 ; '0'
0000000000016561         db  0x41 ; 'A'
0000000000016562         db  0x0e ; '.'
0000000000016563         db  0x28 ; '('
0000000000016564         db  0x42 ; 'B'
0000000000016565         db  0x0e ; '.'
0000000000016566         db  0x20 ; ' '
0000000000016567         db  0x42 ; 'B'
0000000000016568         db  0x0e ; '.'
0000000000016569         db  0x18 ; '.'
000000000001656a         db  0x42 ; 'B'
000000000001656b         db  0x0e ; '.'
000000000001656c         db  0x10 ; '.'
000000000001656d         db  0x42 ; 'B'
000000000001656e         db  0x0e ; '.'
000000000001656f         db  0x08 ; '.'
0000000000016570         db  0x56 ; 'V'
0000000000016571         db  0x0b ; '.'
0000000000016572         db  0x5e ; '^'
0000000000016573         db  0x0a ; '.'
0000000000016574         db  0x0e ; '.'
0000000000016575         db  0x38 ; '8'
0000000000016576         db  0x52 ; 'R'
0000000000016577         db  0x0e ; '.'
0000000000016578         db  0x30 ; '0'
0000000000016579         db  0x41 ; 'A'
000000000001657a         db  0x0e ; '.'
000000000001657b         db  0x28 ; '('
000000000001657c         db  0x42 ; 'B'
000000000001657d         db  0x0e ; '.'
000000000001657e         db  0x20 ; ' '
000000000001657f         db  0x42 ; 'B'
0000000000016580         db  0x0e ; '.'
0000000000016581         db  0x18 ; '.'
0000000000016582         db  0x42 ; 'B'
0000000000016583         db  0x0e ; '.'
0000000000016584         db  0x10 ; '.'
0000000000016585         db  0x42 ; 'B'
0000000000016586         db  0x0e ; '.'
0000000000016587         db  0x08 ; '.'
0000000000016588         db  0x4f ; 'O'
0000000000016589         db  0x0b ; '.'
000000000001658a         db  0x62 ; 'b'
000000000001658b         db  0x0a ; '.'
000000000001658c         db  0x0e ; '.'
000000000001658d         db  0x38 ; '8'
000000000001658e         db  0x50 ; 'P'
000000000001658f         db  0x0e ; '.'
0000000000016590         db  0x30 ; '0'
0000000000016591         db  0x41 ; 'A'
0000000000016592         db  0x0e ; '.'
0000000000016593         db  0x28 ; '('
0000000000016594         db  0x42 ; 'B'
0000000000016595         db  0x0e ; '.'
0000000000016596         db  0x20 ; ' '
0000000000016597         db  0x42 ; 'B'
0000000000016598         db  0x0e ; '.'
0000000000016599         db  0x18 ; '.'
000000000001659a         db  0x42 ; 'B'
000000000001659b         db  0x0e ; '.'
000000000001659c         db  0x10 ; '.'
000000000001659d         db  0x42 ; 'B'
000000000001659e         db  0x0e ; '.'
000000000001659f         db  0x08 ; '.'
00000000000165a0         db  0x55 ; 'U'
00000000000165a1         db  0x0b ; '.'
00000000000165a2         db  0x66 ; 'f'
00000000000165a3         db  0x0e ; '.'
00000000000165a4         db  0x68 ; 'h'
00000000000165a5         db  0x42 ; 'B'
00000000000165a6         db  0x0e ; '.'
00000000000165a7         db  0x70 ; 'p'
00000000000165a8         db  0x5c ; '\'
00000000000165a9         db  0x0e ; '.'
00000000000165aa         db  0x68 ; 'h'
00000000000165ab         db  0x41 ; 'A'
00000000000165ac         db  0x0e ; '.'
00000000000165ad         db  0x60 ; '`'
00000000000165ae         db  0x44 ; 'D'
00000000000165af         db  0x0a ; '.'
00000000000165b0         db  0x0e ; '.'
00000000000165b1         db  0x38 ; '8'
00000000000165b2         db  0x41 ; 'A'
00000000000165b3         db  0x0e ; '.'
00000000000165b4         db  0x30 ; '0'
00000000000165b5         db  0x41 ; 'A'
00000000000165b6         db  0x0e ; '.'
00000000000165b7         db  0x28 ; '('
00000000000165b8         db  0x42 ; 'B'
00000000000165b9         db  0x0e ; '.'
00000000000165ba         db  0x20 ; ' '
00000000000165bb         db  0x42 ; 'B'
00000000000165bc         db  0x0e ; '.'
00000000000165bd         db  0x18 ; '.'
00000000000165be         db  0x42 ; 'B'
00000000000165bf         db  0x0e ; '.'
00000000000165c0         db  0x10 ; '.'
00000000000165c1         db  0x42 ; 'B'
00000000000165c2         db  0x0e ; '.'
00000000000165c3         db  0x08 ; '.'
00000000000165c4         db  0x45 ; 'E'
00000000000165c5         db  0x0b ; '.'
00000000000165c6         db  0x68 ; 'h'
00000000000165c7         db  0x0a ; '.'
00000000000165c8         db  0x0e ; '.'
00000000000165c9         db  0x68 ; 'h'
00000000000165ca         db  0x48 ; 'H'
00000000000165cb         db  0x0b ; '.'
00000000000165cc         db  0x72 ; 'r'
00000000000165cd         db  0x0e ; '.'
00000000000165ce         db  0x68 ; 'h'
00000000000165cf         db  0x45 ; 'E'
00000000000165d0         db  0x0e ; '.'
00000000000165d1         db  0x70 ; 'p'
00000000000165d2         db  0x42 ; 'B'
00000000000165d3         db  0x0e ; '.'
00000000000165d4         db  0x78 ; 'x'
00000000000165d5         db  0x42 ; 'B'
00000000000165d6         db  0x0e ; '.'
00000000000165d7         db  0x80 ; '.'
00000000000165d8         db  0x01 ; '.'
00000000000165d9         db  0x5e ; '^'
00000000000165da         db  0x0e ; '.'
00000000000165db         db  0x60 ; '`'
00000000000165dc         db  0x44 ; 'D'
00000000000165dd         db  0x0a ; '.'
00000000000165de         db  0x0e ; '.'
00000000000165df         db  0x38 ; '8'
00000000000165e0         db  0x41 ; 'A'
00000000000165e1         db  0x0e ; '.'
00000000000165e2         db  0x30 ; '0'
00000000000165e3         db  0x41 ; 'A'
00000000000165e4         db  0x0e ; '.'
00000000000165e5         db  0x28 ; '('
00000000000165e6         db  0x42 ; 'B'
00000000000165e7         db  0x0e ; '.'
00000000000165e8         db  0x20 ; ' '
00000000000165e9         db  0x42 ; 'B'
00000000000165ea         db  0x0e ; '.'
00000000000165eb         db  0x18 ; '.'
00000000000165ec         db  0x42 ; 'B'
00000000000165ed         db  0x0e ; '.'
00000000000165ee         db  0x10 ; '.'
00000000000165ef         db  0x42 ; 'B'
00000000000165f0         db  0x0e ; '.'
00000000000165f1         db  0x08 ; '.'
00000000000165f2         db  0x41 ; 'A'
00000000000165f3         db  0x0b ; '.'
00000000000165f4         db  0x79 ; 'y'
00000000000165f5         db  0x0a ; '.'
00000000000165f6         db  0x0e ; '.'
00000000000165f7         db  0x68 ; 'h'
00000000000165f8         db  0x42 ; 'B'
00000000000165f9         db  0x0e ; '.'
00000000000165fa         db  0x70 ; 'p'
00000000000165fb         db  0x42 ; 'B'
00000000000165fc         db  0x0e ; '.'
00000000000165fd         db  0x78 ; 'x'
00000000000165fe         db  0x42 ; 'B'
00000000000165ff         db  0x0e ; '.'
0000000000016600         db  0x80 ; '.'
0000000000016601         db  0x01 ; '.'
0000000000016602         db  0x51 ; 'Q'
0000000000016603         db  0x0b ; '.'
0000000000016604         dd         0x00000010                                  ; Length of the record
0000000000016608         dd         0x000008b8                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
000000000001660c         db         0x84, 0xed, 0xfe, 0xff                      ; begin 0x5390
0000000000016610         db         0x20, 3 dup (0x00)                          ; length 0x20 (end at 0x53b0)
0000000000016614         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016615         align      8
0000000000016618         dd         0x00000018                                  ; Length of the record
000000000001661c         dd         0x000008cc                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000016620         db         0x90, 0xed, 0xfe, 0xff                      ; begin 0x53b0
0000000000016624         db         0x78, 3 dup (0x00)                          ; length 0x78 (end at 0x5428)
0000000000016628         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016629         db  0x44 ; 'D'
000000000001662a         db  0x0e ; '.'
000000000001662b         db  0x70 ; 'p'
000000000001662c         db  0x02 ; '.'
000000000001662d         db  0x60 ; '`'
000000000001662e         db  0x0a ; '.'
000000000001662f         db  0x0e ; '.'
0000000000016630         db  0x08 ; '.'
0000000000016631         db  0x41 ; 'A'
0000000000016632         db  0x0b ; '.'
0000000000016633         db  0x00 ; '.'
0000000000016634         dd         0x00000028                                  ; Length of the record
0000000000016638         dd         0x000008e8                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
000000000001663c         db         0xf4, 0xed, 0xfe, 0xff                      ; begin 0x5430
0000000000016640         db         0xd5, 3 dup (0x00)                          ; length 0xd5 (end at 0x5505)
0000000000016644         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016645         db  0x41 ; 'A'
0000000000016646         db  0x0e ; '.'
0000000000016647         db  0x10 ; '.'
0000000000016648         db  0x86 ; '.'
0000000000016649         db  0x02 ; '.'
000000000001664a         db  0x41 ; 'A'
000000000001664b         db  0x0e ; '.'
000000000001664c         db  0x18 ; '.'
000000000001664d         db  0x83 ; '.'
000000000001664e         db  0x03 ; '.'
000000000001664f         db  0x50 ; 'P'
0000000000016650         db  0x0e ; '.'
0000000000016651         db  0xd0 ; '.'
0000000000016652         db  0x01 ; '.'
0000000000016653         db  0x02 ; '.'
0000000000016654         db  0xab ; '.'
0000000000016655         db  0x0a ; '.'
0000000000016656         db  0x0e ; '.'
0000000000016657         db  0x18 ; '.'
0000000000016658         db  0x41 ; 'A'
0000000000016659         db  0x0e ; '.'
000000000001665a         db  0x10 ; '.'
000000000001665b         db  0x41 ; 'A'
000000000001665c         db  0x0e ; '.'
000000000001665d         db  0x08 ; '.'
000000000001665e         db  0x41 ; 'A'
000000000001665f         db  0x0b ; '.'
0000000000016660         dd         0x0000001c                                  ; Length of the record
0000000000016664         dd         0x00000914                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000016668         db         0xa8, 0xee, 0xfe, 0xff                      ; begin 0x5510
000000000001666c         db         0x80, 3 dup (0x00)                          ; length 0x80 (end at 0x5590)
0000000000016670         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016671         db  0x41 ; 'A'
0000000000016672         db  0x0e ; '.'
0000000000016673         db  0x10 ; '.'
0000000000016674         db  0x83 ; '.'
0000000000016675         db  0x02 ; '.'
0000000000016676         db  0x02 ; '.'
0000000000016677         db  0x7a ; 'z'
0000000000016678         db  0x0e ; '.'
0000000000016679         db  0x08 ; '.'
000000000001667a         db  0x00 ; '.'
000000000001667b         db  0x00 ; '.'
000000000001667c         db  0x00 ; '.'
000000000001667d         db  0x00 ; '.'
000000000001667e         db  0x00 ; '.'
000000000001667f         db  0x00 ; '.'
0000000000016680         dd         0x00000018                                  ; Length of the record
0000000000016684         dd         0x00000934                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000016688         db         0x08, 0xef, 0xfe, 0xff                      ; begin 0x5590
000000000001668c         db         0x1a, 3 dup (0x00)                          ; length 0x1a (end at 0x55aa)
0000000000016690         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016691         db  0x41 ; 'A'
0000000000016692         db  0x0e ; '.'
0000000000016693         db  0x10 ; '.'
0000000000016694         db  0x83 ; '.'
0000000000016695         db  0x02 ; '.'
0000000000016696         db  0x53 ; 'S'
0000000000016697         db  0x0a ; '.'
0000000000016698         db  0x0e ; '.'
0000000000016699         db  0x08 ; '.'
000000000001669a         db  0x41 ; 'A'
000000000001669b         db  0x0b ; '.'
000000000001669c         dd         0x00000010                                  ; Length of the record
00000000000166a0         dd         0x00000950                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
00000000000166a4         db         0x0c, 0xef, 0xfe, 0xff                      ; begin 0x55b0
00000000000166a8         db         0x24, 3 dup (0x00)                          ; length 0x24 (end at 0x55d4)
00000000000166ac         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000166ad         db  0x5f ; '_'
00000000000166ae         db  0x0e ; '.'
00000000000166af         db  0x10 ; '.'
00000000000166b0         dd         0x00000010                                  ; Length of the record
00000000000166b4         dd         0x00000964                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
00000000000166b8         db         0x28, 0xef, 0xfe, 0xff                      ; begin 0x55e0
00000000000166bc         db         0x02, 3 dup (0x00)                          ; length 0x2 (end at 0x55e2)
00000000000166c0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000166c1         align      4
00000000000166c4         dd         0x00000020                                  ; Length of the record
00000000000166c8         dd         0x00000978                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
00000000000166cc         db         0x24, 0xef, 0xfe, 0xff                      ; begin 0x55f0
00000000000166d0         db         0x36, 3 dup (0x00)                          ; length 0x36 (end at 0x5626)
00000000000166d4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000166d5         db  0x44 ; 'D'
00000000000166d6         db  0x0e ; '.'
00000000000166d7         db  0x10 ; '.'
00000000000166d8         db  0x83 ; '.'
00000000000166d9         db  0x02 ; '.'
00000000000166da         db  0x5d ; ']'
00000000000166db         db  0x0a ; '.'
00000000000166dc         db  0x0e ; '.'
00000000000166dd         db  0x08 ; '.'
00000000000166de         db  0x47 ; 'G'
00000000000166df         db  0x0b ; '.'
00000000000166e0         db  0x48 ; 'H'
00000000000166e1         db  0x0a ; '.'
00000000000166e2         db  0x0e ; '.'
00000000000166e3         db  0x08 ; '.'
00000000000166e4         db  0x41 ; 'A'
00000000000166e5         db  0x0b ; '.'
00000000000166e6         db  0x00 ; '.'
00000000000166e7         db  0x00 ; '.'
00000000000166e8         dd         0x00000010                                  ; Length of the record
00000000000166ec         dd         0x0000099c                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
00000000000166f0         db         0x40, 0xef, 0xfe, 0xff                      ; begin 0x5630
00000000000166f4         db         0x24, 3 dup (0x00)                          ; length 0x24 (end at 0x5654)
00000000000166f8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000166f9         db  0x5f ; '_'
00000000000166fa         db  0x0e ; '.'
00000000000166fb         db  0x10 ; '.'
00000000000166fc         dd         0x00000014                                  ; Length of the record
0000000000016700         dd         0x000009b0                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000016704         db         0x5c, 0xef, 0xfe, 0xff                      ; begin 0x5660
0000000000016708         db         0x82, 3 dup (0x00)                          ; length 0x82 (end at 0x56e2)
000000000001670c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001670d         db  0x02 ; '.'
000000000001670e         db  0x5f ; '_'
000000000001670f         db  0x0e ; '.'
0000000000016710         db  0x10 ; '.'
0000000000016711         db  0x49 ; 'I'
0000000000016712         db  0x0e ; '.'
0000000000016713         db  0x08 ; '.'
0000000000016714         dd         0x00000014                                  ; Length of the record
0000000000016718         dd         0x000009c8                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
000000000001671c         db         0xd4, 0xef, 0xfe, 0xff                      ; begin 0x56f0
0000000000016720         db         0x4a, 3 dup (0x00)                          ; length 0x4a (end at 0x573a)
0000000000016724         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016725         db  0x02 ; '.'
0000000000016726         db  0x45 ; 'E'
0000000000016727         db  0x0e ; '.'
0000000000016728         db  0x10 ; '.'
0000000000016729         db  0x00 ; '.'
000000000001672a         db  0x00 ; '.'
000000000001672b         db  0x00 ; '.'
000000000001672c         dd         0x00000018                                  ; Length of the record
0000000000016730         dd         0x000009e0                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000016734         db         0x0c, 0xf0, 0xfe, 0xff                      ; begin 0x5740
0000000000016738         db         0x17, 3 dup (0x00)                          ; length 0x17 (end at 0x5757)
000000000001673c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001673d         db  0x41 ; 'A'
000000000001673e         db  0x0e ; '.'
000000000001673f         db  0x10 ; '.'
0000000000016740         db  0x83 ; '.'
0000000000016741         db  0x02 ; '.'
0000000000016742         db  0x51 ; 'Q'
0000000000016743         db  0x0e ; '.'
0000000000016744         db  0x08 ; '.'
0000000000016745         db  0x00 ; '.'
0000000000016746         db  0x00 ; '.'
0000000000016747         db  0x00 ; '.'
0000000000016748         dd         0x00000018                                  ; Length of the record
000000000001674c         dd         0x000009fc                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000016750         db         0x10, 0xf0, 0xfe, 0xff                      ; begin 0x5760
0000000000016754         db         0x2e, 3 dup (0x00)                          ; length 0x2e (end at 0x578e)
0000000000016758         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016759         db  0x47 ; 'G'
000000000001675a         db  0x0e ; '.'
000000000001675b         db  0x10 ; '.'
000000000001675c         db  0x61 ; 'a'
000000000001675d         db  0x0a ; '.'
000000000001675e         db  0x0e ; '.'
000000000001675f         db  0x08 ; '.'
0000000000016760         db  0x41 ; 'A'
0000000000016761         db  0x0b ; '.'
0000000000016762         db  0x00 ; '.'
0000000000016763         db  0x00 ; '.'
0000000000016764         dd         0x00000024                                  ; Length of the record
0000000000016768         dd         0x00000a18                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
000000000001676c         db         0x24, 0xf0, 0xfe, 0xff                      ; begin 0x5790
0000000000016770         db         0x28, 3 dup (0x00)                          ; length 0x28 (end at 0x57b8)
0000000000016774         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016775         db  0x41 ; 'A'
0000000000016776         db  0x0e ; '.'
0000000000016777         db  0x10 ; '.'
0000000000016778         db  0x86 ; '.'
0000000000016779         db  0x02 ; '.'
000000000001677a         db  0x41 ; 'A'
000000000001677b         db  0x0e ; '.'
000000000001677c         db  0x18 ; '.'
000000000001677d         db  0x83 ; '.'
000000000001677e         db  0x03 ; '.'
000000000001677f         db  0x4d ; 'M'
0000000000016780         db  0x0e ; '.'
0000000000016781         db  0x20 ; ' '
0000000000016782         db  0x49 ; 'I'
0000000000016783         db  0x0e ; '.'
0000000000016784         db  0x18 ; '.'
0000000000016785         db  0x47 ; 'G'
0000000000016786         db  0x0e ; '.'
0000000000016787         db  0x10 ; '.'
0000000000016788         db  0x41 ; 'A'
0000000000016789         db  0x0e ; '.'
000000000001678a         db  0x08 ; '.'
000000000001678b         db  0x00 ; '.'
000000000001678c         dd         0x00000018                                  ; Length of the record
0000000000016790         dd         0x00000a40                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000016794         db         0x2c, 0xf0, 0xfe, 0xff                      ; begin 0x57c0
0000000000016798         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x57d3)
000000000001679c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001679d         db  0x41 ; 'A'
000000000001679e         db  0x0e ; '.'
000000000001679f         db  0x10 ; '.'
00000000000167a0         db  0x83 ; '.'
00000000000167a1         db  0x02 ; '.'
00000000000167a2         db  0x50 ; 'P'
00000000000167a3         db  0x0e ; '.'
00000000000167a4         db  0x08 ; '.'
00000000000167a5         db  0x00 ; '.'
00000000000167a6         db  0x00 ; '.'
00000000000167a7         db  0x00 ; '.'
00000000000167a8         dd         0x00000014                                  ; Length of the record
00000000000167ac         dd         0x00000a5c                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
00000000000167b0         db         0x30, 0xf0, 0xfe, 0xff                      ; begin 0x57e0
00000000000167b4         db         0x35, 3 dup (0x00)                          ; length 0x35 (end at 0x5815)
00000000000167b8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000167b9         db  0x4b ; 'K'
00000000000167ba         db  0x0e ; '.'
00000000000167bb         db  0x10 ; '.'
00000000000167bc         db  0x00 ; '.'
00000000000167bd         db  0x00 ; '.'
00000000000167be         db  0x00 ; '.'
00000000000167bf         db  0x00 ; '.'
00000000000167c0         dd         0x0000002c                                  ; Length of the record
00000000000167c4         dd         0x00000a74                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
00000000000167c8         db         0x58, 0xf0, 0xfe, 0xff                      ; begin 0x5820
00000000000167cc         db         0x57, 3 dup (0x00)                          ; length 0x57 (end at 0x5877)
00000000000167d0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000167d1         db  0x63 ; 'c'
00000000000167d2         db  0x0e ; '.'
00000000000167d3         db  0x10 ; '.'
00000000000167d4         db  0x8c ; '.'
00000000000167d5         db  0x02 ; '.'
00000000000167d6         db  0x41 ; 'A'
00000000000167d7         db  0x0e ; '.'
00000000000167d8         db  0x18 ; '.'
00000000000167d9         db  0x86 ; '.'
00000000000167da         db  0x03 ; '.'
00000000000167db         db  0x44 ; 'D'
00000000000167dc         db  0x0e ; '.'
00000000000167dd         db  0x20 ; ' '
00000000000167de         db  0x83 ; '.'
00000000000167df         db  0x04 ; '.'
00000000000167e0         db  0x6b ; 'k'
00000000000167e1         db  0x0e ; '.'
00000000000167e2         db  0x18 ; '.'
00000000000167e3         db  0x41 ; 'A'
00000000000167e4         db  0x0e ; '.'
00000000000167e5         db  0x10 ; '.'
00000000000167e6         db  0x42 ; 'B'
00000000000167e7         db  0x0e ; '.'
00000000000167e8         db  0x08 ; '.'
00000000000167e9         db  0x00 ; '.'
00000000000167ea         db  0x00 ; '.'
00000000000167eb         db  0x00 ; '.'
00000000000167ec         db  0x00 ; '.'
00000000000167ed         db  0x00 ; '.'
00000000000167ee         db  0x00 ; '.'
00000000000167ef         db  0x00 ; '.'
00000000000167f0         dd         0x0000003c                                  ; Length of the record
00000000000167f4         dd         0x00000aa4                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
00000000000167f8         db         0x88, 0xf0, 0xfe, 0xff                      ; begin 0x5880
00000000000167fc         db         0x83, 3 dup (0x00)                          ; length 0x83 (end at 0x5903)
0000000000016800         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016801         db  0x42 ; 'B'
0000000000016802         db  0x0e ; '.'
0000000000016803         db  0x10 ; '.'
0000000000016804         db  0x8d ; '.'
0000000000016805         db  0x02 ; '.'
0000000000016806         db  0x42 ; 'B'
0000000000016807         db  0x0e ; '.'
0000000000016808         db  0x18 ; '.'
0000000000016809         db  0x8c ; '.'
000000000001680a         db  0x03 ; '.'
000000000001680b         db  0x44 ; 'D'
000000000001680c         db  0x0e ; '.'
000000000001680d         db  0x20 ; ' '
000000000001680e         db  0x86 ; '.'
000000000001680f         db  0x04 ; '.'
0000000000016810         db  0x41 ; 'A'
0000000000016811         db  0x0e ; '.'
0000000000016812         db  0x28 ; '('
0000000000016813         db  0x83 ; '.'
0000000000016814         db  0x05 ; '.'
0000000000016815         db  0x4a ; 'J'
0000000000016816         db  0x0e ; '.'
0000000000016817         db  0x40 ; '@'
0000000000016818         db  0x02 ; '.'
0000000000016819         db  0x64 ; 'd'
000000000001681a         db  0x0a ; '.'
000000000001681b         db  0x0e ; '.'
000000000001681c         db  0x28 ; '('
000000000001681d         db  0x41 ; 'A'
000000000001681e         db  0x0e ; '.'
000000000001681f         db  0x20 ; ' '
0000000000016820         db  0x41 ; 'A'
0000000000016821         db  0x0e ; '.'
0000000000016822         db  0x18 ; '.'
0000000000016823         db  0x42 ; 'B'
0000000000016824         db  0x0e ; '.'
0000000000016825         db  0x10 ; '.'
0000000000016826         db  0x42 ; 'B'
0000000000016827         db  0x0e ; '.'
0000000000016828         db  0x08 ; '.'
0000000000016829         db  0x41 ; 'A'
000000000001682a         db  0x0b ; '.'
000000000001682b         db  0x00 ; '.'
000000000001682c         db  0x00 ; '.'
000000000001682d         db  0x00 ; '.'
000000000001682e         db  0x00 ; '.'
000000000001682f         db  0x00 ; '.'
0000000000016830         dd         0x00000010                                  ; Length of the record
0000000000016834         dd         0x00000ae4                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000016838         db         0xd8, 0xf0, 0xfe, 0xff                      ; begin 0x5910
000000000001683c         db         0x2f, 0x01, 2 dup (0x00)                    ; length 0x12f (end at 0x5a3f)
0000000000016840         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016841         align      4
0000000000016844         dd         0x00000010                                  ; Length of the record
0000000000016848         dd         0x00000af8                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
000000000001684c         db         0xf4, 0xf1, 0xfe, 0xff                      ; begin 0x5a40
0000000000016850         db         0x1d, 3 dup (0x00)                          ; length 0x1d (end at 0x5a5d)
0000000000016854         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016855         align      4
000000000001685c         dd         0x00000b0c                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000016860         db         0x00, 0xf2, 0xfe, 0xff                      ; begin 0x5a60
0000000000016864         db         0x2c, 0x02, 2 dup (0x00)                    ; length 0x22c (end at 0x5c8c)
0000000000016868         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016869         db  0x42 ; 'B'
000000000001686a         db  0x0e ; '.'
000000000001686b         db  0x10 ; '.'
000000000001686c         db  0x8f ; '.'
000000000001686d         db  0x02 ; '.'
000000000001686e         db  0x42 ; 'B'
000000000001686f         db  0x0e ; '.'
0000000000016870         db  0x18 ; '.'
0000000000016871         db  0x8e ; '.'
0000000000016872         db  0x03 ; '.'
0000000000016873         db  0x45 ; 'E'
0000000000016874         db  0x0e ; '.'
0000000000016875         db  0x20 ; ' '
0000000000016876         db  0x8d ; '.'
0000000000016877         db  0x04 ; '.'
0000000000016878         db  0x42 ; 'B'
0000000000016879         db  0x0e ; '.'
000000000001687a         db  0x28 ; '('
000000000001687b         db  0x8c ; '.'
000000000001687c         db  0x05 ; '.'
000000000001687d         db  0x45 ; 'E'
000000000001687e         db  0x0e ; '.'
000000000001687f         db  0x30 ; '0'
0000000000016880         db  0x86 ; '.'
0000000000016881         db  0x06 ; '.'
0000000000016882         db  0x41 ; 'A'
0000000000016883         db  0x0e ; '.'
0000000000016884         db  0x38 ; '8'
0000000000016885         db  0x83 ; '.'
0000000000016886         db  0x07 ; '.'
0000000000016887         db  0x47 ; 'G'
0000000000016888         db  0x0e ; '.'
0000000000016889         db  0x80 ; '.'
000000000001688a         db  0x01 ; '.'
000000000001688b         db  0x02 ; '.'
000000000001688c         db  0xba ; '.'
000000000001688d         db  0x0a ; '.'
000000000001688e         db  0x0e ; '.'
000000000001688f         db  0x38 ; '8'
0000000000016890         db  0x46 ; 'F'
0000000000016891         db  0x0e ; '.'
0000000000016892         db  0x30 ; '0'
0000000000016893         db  0x41 ; 'A'
0000000000016894         db  0x0e ; '.'
0000000000016895         db  0x28 ; '('
0000000000016896         db  0x42 ; 'B'
0000000000016897         db  0x0e ; '.'
0000000000016898         db  0x20 ; ' '
0000000000016899         db  0x42 ; 'B'
000000000001689a         db  0x0e ; '.'
000000000001689b         db  0x18 ; '.'
000000000001689c         db  0x42 ; 'B'
000000000001689d         db  0x0e ; '.'
000000000001689e         db  0x10 ; '.'
000000000001689f         db  0x42 ; 'B'
00000000000168a0         db  0x0e ; '.'
00000000000168a1         db  0x08 ; '.'
00000000000168a2         db  0x47 ; 'G'
00000000000168a3         db  0x0b ; '.'
00000000000168a4         db  0x02 ; '.'
00000000000168a5         db  0xe1 ; '.'
00000000000168a6         db  0x0a ; '.'
00000000000168a7         db  0x0e ; '.'
00000000000168a8         db  0x38 ; '8'
00000000000168a9         db  0x44 ; 'D'
00000000000168aa         db  0x0e ; '.'
00000000000168ab         db  0x30 ; '0'
00000000000168ac         db  0x43 ; 'C'
00000000000168ad         db  0x0e ; '.'
00000000000168ae         db  0x28 ; '('
00000000000168af         db  0x42 ; 'B'
00000000000168b0         db  0x0e ; '.'
00000000000168b1         db  0x20 ; ' '
00000000000168b2         db  0x42 ; 'B'
00000000000168b3         db  0x0e ; '.'
00000000000168b4         db  0x18 ; '.'
00000000000168b5         db  0x42 ; 'B'
00000000000168b6         db  0x0e ; '.'
00000000000168b7         db  0x10 ; '.'
00000000000168b8         db  0x42 ; 'B'
00000000000168b9         db  0x0e ; '.'
00000000000168ba         db  0x08 ; '.'
00000000000168bb         db  0x48 ; 'H'
00000000000168bc         db  0x0b ; '.'
00000000000168bd         db  0x59 ; 'Y'
00000000000168be         db  0x0a ; '.'
00000000000168bf         db  0x0e ; '.'
00000000000168c0         db  0x38 ; '8'
00000000000168c1         db  0x43 ; 'C'
00000000000168c2         db  0x0e ; '.'
00000000000168c3         db  0x30 ; '0'
00000000000168c4         db  0x41 ; 'A'
00000000000168c5         db  0x0e ; '.'
00000000000168c6         db  0x28 ; '('
00000000000168c7         db  0x42 ; 'B'
00000000000168c8         db  0x0e ; '.'
00000000000168c9         db  0x20 ; ' '
00000000000168ca         db  0x42 ; 'B'
00000000000168cb         db  0x0e ; '.'
00000000000168cc         db  0x18 ; '.'
00000000000168cd         db  0x42 ; 'B'
00000000000168ce         db  0x0e ; '.'
00000000000168cf         db  0x10 ; '.'
00000000000168d0         db  0x42 ; 'B'
00000000000168d1         db  0x0e ; '.'
00000000000168d2         db  0x08 ; '.'
00000000000168d3         db  0x4b ; 'K'
00000000000168d4         db  0x0b ; '.'
00000000000168d5         db  0x49 ; 'I'
00000000000168d6         db  0x0e ; '.'
00000000000168d7         db  0x38 ; '8'
00000000000168d8         db  0x41 ; 'A'
00000000000168d9         db  0x0e ; '.'
00000000000168da         db  0x30 ; '0'
00000000000168db         db  0x41 ; 'A'
00000000000168dc         db  0x0e ; '.'
00000000000168dd         db  0x28 ; '('
00000000000168de         db  0x48 ; 'H'
00000000000168df         db  0x0e ; '.'
00000000000168e0         db  0x20 ; ' '
00000000000168e1         db  0x44 ; 'D'
00000000000168e2         db  0x0e ; '.'
00000000000168e3         db  0x18 ; '.'
00000000000168e4         db  0x42 ; 'B'
00000000000168e5         db  0x0e ; '.'
00000000000168e6         db  0x10 ; '.'
00000000000168e7         db  0x42 ; 'B'
00000000000168e8         db  0x0e ; '.'
00000000000168e9         db  0x08 ; '.'
00000000000168ea         db  0x00 ; '.'
00000000000168eb         db  0x00 ; '.'
00000000000168ec         dd         0x00000010                                  ; Length of the record
00000000000168f0         dd         0x00000ba0                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
00000000000168f4         db         0x9c, 0xf3, 0xfe, 0xff                      ; begin 0x5c90
00000000000168f8         db         0x66, 3 dup (0x00)                          ; length 0x66 (end at 0x5cf6)
00000000000168fc         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000168fd         align      256
0000000000016900         dd         0x00000028                                  ; Length of the record
0000000000016904         dd         0x00000bb4                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000016908         db         0xf8, 0xf3, 0xfe, 0xff                      ; begin 0x5d00
000000000001690c         db         0x6b, 3 dup (0x00)                          ; length 0x6b (end at 0x5d6b)
0000000000016910         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016911         db  0x42 ; 'B'
0000000000016912         db  0x0e ; '.'
0000000000016913         db  0x10 ; '.'
0000000000016914         db  0x8c ; '.'
0000000000016915         db  0x02 ; '.'
0000000000016916         db  0x44 ; 'D'
0000000000016917         db  0x0e ; '.'
0000000000016918         db  0x18 ; '.'
0000000000016919         db  0x86 ; '.'
000000000001691a         db  0x03 ; '.'
000000000001691b         db  0x44 ; 'D'
000000000001691c         db  0x0e ; '.'
000000000001691d         db  0x20 ; ' '
000000000001691e         db  0x83 ; '.'
000000000001691f         db  0x04 ; '.'
0000000000016920         db  0x02 ; '.'
0000000000016921         db  0x5d ; ']'
0000000000016922         db  0x0e ; '.'
0000000000016923         db  0x18 ; '.'
0000000000016924         db  0x41 ; 'A'
0000000000016925         db  0x0e ; '.'
0000000000016926         db  0x10 ; '.'
0000000000016927         db  0x42 ; 'B'
0000000000016928         db  0x0e ; '.'
0000000000016929         db  0x08 ; '.'
000000000001692a         db  0x00 ; '.'
000000000001692b         db  0x00 ; '.'
000000000001692c         dd         0x00000028                                  ; Length of the record
0000000000016930         dd         0x00000be0                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000016934         db         0x3c, 0xf4, 0xfe, 0xff                      ; begin 0x5d70
0000000000016938         db         0x51, 3 dup (0x00)                          ; length 0x51 (end at 0x5dc1)
000000000001693c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001693d         db  0x42 ; 'B'
000000000001693e         db  0x0e ; '.'
000000000001693f         db  0x10 ; '.'
0000000000016940         db  0x8c ; '.'
0000000000016941         db  0x02 ; '.'
0000000000016942         db  0x44 ; 'D'
0000000000016943         db  0x0e ; '.'
0000000000016944         db  0x18 ; '.'
0000000000016945         db  0x86 ; '.'
0000000000016946         db  0x03 ; '.'
0000000000016947         db  0x44 ; 'D'
0000000000016948         db  0x0e ; '.'
0000000000016949         db  0x20 ; ' '
000000000001694a         db  0x83 ; '.'
000000000001694b         db  0x04 ; '.'
000000000001694c         db  0x02 ; '.'
000000000001694d         db  0x43 ; 'C'
000000000001694e         db  0x0e ; '.'
000000000001694f         db  0x18 ; '.'
0000000000016950         db  0x41 ; 'A'
0000000000016951         db  0x0e ; '.'
0000000000016952         db  0x10 ; '.'
0000000000016953         db  0x42 ; 'B'
0000000000016954         db  0x0e ; '.'
0000000000016955         db  0x08 ; '.'
0000000000016956         db  0x00 ; '.'
0000000000016957         db  0x00 ; '.'
0000000000016958         dd         0x00000030                                  ; Length of the record
000000000001695c         dd         0x00000c0c                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000016960         db         0x70, 0xf4, 0xfe, 0xff                      ; begin 0x5dd0
0000000000016964         db         0x9c, 3 dup (0x00)                          ; length 0x9c (end at 0x5e6c)
0000000000016968         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016969         db  0x41 ; 'A'
000000000001696a         db  0x0e ; '.'
000000000001696b         db  0x10 ; '.'
000000000001696c         db  0x86 ; '.'
000000000001696d         db  0x02 ; '.'
000000000001696e         db  0x41 ; 'A'
000000000001696f         db  0x0e ; '.'
0000000000016970         db  0x18 ; '.'
0000000000016971         db  0x83 ; '.'
0000000000016972         db  0x03 ; '.'
0000000000016973         db  0x4a ; 'J'
0000000000016974         db  0x0e ; '.'
0000000000016975         db  0x20 ; ' '
0000000000016976         db  0x02 ; '.'
0000000000016977         db  0x62 ; 'b'
0000000000016978         db  0x0a ; '.'
0000000000016979         db  0x0e ; '.'
000000000001697a         db  0x18 ; '.'
000000000001697b         db  0x43 ; 'C'
000000000001697c         db  0x0e ; '.'
000000000001697d         db  0x10 ; '.'
000000000001697e         db  0x41 ; 'A'
000000000001697f         db  0x0e ; '.'
0000000000016980         db  0x08 ; '.'
0000000000016981         db  0x46 ; 'F'
0000000000016982         db  0x0b ; '.'
0000000000016983         db  0x5c ; '\'
0000000000016984         db  0x0e ; '.'
0000000000016985         db  0x18 ; '.'
0000000000016986         db  0x46 ; 'F'
0000000000016987         db  0x0e ; '.'
0000000000016988         db  0x10 ; '.'
0000000000016989         db  0x41 ; 'A'
000000000001698a         db  0x0e ; '.'
000000000001698b         db  0x08 ; '.'
000000000001698c         dd         0x00000028                                  ; Length of the record
0000000000016990         dd         0x00000c40                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000016994         db         0xdc, 0xf4, 0xfe, 0xff                      ; begin 0x5e70
0000000000016998         db         0x64, 3 dup (0x00)                          ; length 0x64 (end at 0x5ed4)
000000000001699c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001699d         db  0x41 ; 'A'
000000000001699e         db  0x0e ; '.'
000000000001699f         db  0x10 ; '.'
00000000000169a0         db  0x86 ; '.'
00000000000169a1         db  0x02 ; '.'
00000000000169a2         db  0x41 ; 'A'
00000000000169a3         db  0x0e ; '.'
00000000000169a4         db  0x18 ; '.'
00000000000169a5         db  0x83 ; '.'
00000000000169a6         db  0x03 ; '.'
00000000000169a7         db  0x4a ; 'J'
00000000000169a8         db  0x0e ; '.'
00000000000169a9         db  0x20 ; ' '
00000000000169aa         db  0x62 ; 'b'
00000000000169ab         db  0x0a ; '.'
00000000000169ac         db  0x0e ; '.'
00000000000169ad         db  0x18 ; '.'
00000000000169ae         db  0x41 ; 'A'
00000000000169af         db  0x0e ; '.'
00000000000169b0         db  0x10 ; '.'
00000000000169b1         db  0x41 ; 'A'
00000000000169b2         db  0x0e ; '.'
00000000000169b3         db  0x08 ; '.'
00000000000169b4         db  0x48 ; 'H'
00000000000169b5         db  0x0b ; '.'
00000000000169b6         db  0x00 ; '.'
00000000000169b7         db  0x00 ; '.'
00000000000169b8         dd         0x00000034                                  ; Length of the record
00000000000169bc         dd         0x00000c6c                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
00000000000169c0         db         0x20, 0xf5, 0xfe, 0xff                      ; begin 0x5ee0
00000000000169c4         db         0x2c, 0x01, 2 dup (0x00)                    ; length 0x12c (end at 0x600c)
00000000000169c8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000169c9         db  0x41 ; 'A'
00000000000169ca         db  0x0e ; '.'
00000000000169cb         db  0x10 ; '.'
00000000000169cc         db  0x86 ; '.'
00000000000169cd         db  0x02 ; '.'
00000000000169ce         db  0x41 ; 'A'
00000000000169cf         db  0x0e ; '.'
00000000000169d0         db  0x18 ; '.'
00000000000169d1         db  0x83 ; '.'
00000000000169d2         db  0x03 ; '.'
00000000000169d3         db  0x4a ; 'J'
00000000000169d4         db  0x0e ; '.'
00000000000169d5         db  0x20 ; ' '
00000000000169d6         db  0x66 ; 'f'
00000000000169d7         db  0x0a ; '.'
00000000000169d8         db  0x0e ; '.'
00000000000169d9         db  0x18 ; '.'
00000000000169da         db  0x41 ; 'A'
00000000000169db         db  0x0e ; '.'
00000000000169dc         db  0x10 ; '.'
00000000000169dd         db  0x41 ; 'A'
00000000000169de         db  0x0e ; '.'
00000000000169df         db  0x08 ; '.'
00000000000169e0         db  0x44 ; 'D'
00000000000169e1         db  0x0b ; '.'
00000000000169e2         db  0x6d ; 'm'
00000000000169e3         db  0x0a ; '.'
00000000000169e4         db  0x0e ; '.'
00000000000169e5         db  0x18 ; '.'
00000000000169e6         db  0x46 ; 'F'
00000000000169e7         db  0x0e ; '.'
00000000000169e8         db  0x10 ; '.'
00000000000169e9         db  0x41 ; 'A'
00000000000169ea         db  0x0e ; '.'
00000000000169eb         db  0x08 ; '.'
00000000000169ec         db  0x44 ; 'D'
00000000000169ed         db  0x0b ; '.'
00000000000169ee         db  0x00 ; '.'
00000000000169ef         db  0x00 ; '.'
00000000000169f0         dd         0x0000004c                                  ; Length of the record
00000000000169f4         dd         0x00000ca4                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
00000000000169f8         db         0x18, 0xf6, 0xfe, 0xff                      ; begin 0x6010
00000000000169fc         db         0xec, 3 dup (0x00)                          ; length 0xec (end at 0x60fc)
0000000000016a00         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016a01         db  0x42 ; 'B'
0000000000016a02         db  0x0e ; '.'
0000000000016a03         db  0x10 ; '.'
0000000000016a04         db  0x8e ; '.'
0000000000016a05         db  0x02 ; '.'
0000000000016a06         db  0x42 ; 'B'
0000000000016a07         db  0x0e ; '.'
0000000000016a08         db  0x18 ; '.'
0000000000016a09         db  0x8d ; '.'
0000000000016a0a         db  0x03 ; '.'
0000000000016a0b         db  0x45 ; 'E'
0000000000016a0c         db  0x0e ; '.'
0000000000016a0d         db  0x20 ; ' '
0000000000016a0e         db  0x8c ; '.'
0000000000016a0f         db  0x04 ; '.'
0000000000016a10         db  0x41 ; 'A'
0000000000016a11         db  0x0e ; '.'
0000000000016a12         db  0x28 ; '('
0000000000016a13         db  0x86 ; '.'
0000000000016a14         db  0x05 ; '.'
0000000000016a15         db  0x44 ; 'D'
0000000000016a16         db  0x0e ; '.'
0000000000016a17         db  0x30 ; '0'
0000000000016a18         db  0x83 ; '.'
0000000000016a19         db  0x06 ; '.'
0000000000016a1a         db  0x02 ; '.'
0000000000016a1b         db  0x71 ; 'q'
0000000000016a1c         db  0x0a ; '.'
0000000000016a1d         db  0x0e ; '.'
0000000000016a1e         db  0x28 ; '('
0000000000016a1f         db  0x46 ; 'F'
0000000000016a20         db  0x0e ; '.'
0000000000016a21         db  0x20 ; ' '
0000000000016a22         db  0x42 ; 'B'
0000000000016a23         db  0x0e ; '.'
0000000000016a24         db  0x18 ; '.'
0000000000016a25         db  0x42 ; 'B'
0000000000016a26         db  0x0e ; '.'
0000000000016a27         db  0x10 ; '.'
0000000000016a28         db  0x42 ; 'B'
0000000000016a29         db  0x0e ; '.'
0000000000016a2a         db  0x08 ; '.'
0000000000016a2b         db  0x45 ; 'E'
0000000000016a2c         db  0x0b ; '.'
0000000000016a2d         db  0x6e ; 'n'
0000000000016a2e         db  0x0a ; '.'
0000000000016a2f         db  0x0e ; '.'
0000000000016a30         db  0x28 ; '('
0000000000016a31         db  0x41 ; 'A'
0000000000016a32         db  0x0e ; '.'
0000000000016a33         db  0x20 ; ' '
0000000000016a34         db  0x42 ; 'B'
0000000000016a35         db  0x0e ; '.'
0000000000016a36         db  0x18 ; '.'
0000000000016a37         db  0x42 ; 'B'
0000000000016a38         db  0x0e ; '.'
0000000000016a39         db  0x10 ; '.'
0000000000016a3a         db  0x42 ; 'B'
0000000000016a3b         db  0x0e ; '.'
0000000000016a3c         db  0x08 ; '.'
0000000000016a3d         db  0x41 ; 'A'
0000000000016a3e         db  0x0b ; '.'
0000000000016a3f         db  0x00 ; '.'
0000000000016a40         dd         0x0000002c                                  ; Length of the record
0000000000016a44         dd         0x00000cf4                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000016a48         db         0xb8, 0xf6, 0xfe, 0xff                      ; begin 0x6100
0000000000016a4c         db         0x6e, 3 dup (0x00)                          ; length 0x6e (end at 0x616e)
0000000000016a50         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016a51         db  0x42 ; 'B'
0000000000016a52         db  0x0e ; '.'
0000000000016a53         db  0x10 ; '.'
0000000000016a54         db  0x8c ; '.'
0000000000016a55         db  0x02 ; '.'
0000000000016a56         db  0x49 ; 'I'
0000000000016a57         db  0x0e ; '.'
0000000000016a58         db  0x18 ; '.'
0000000000016a59         db  0x86 ; '.'
0000000000016a5a         db  0x03 ; '.'
0000000000016a5b         db  0x49 ; 'I'
0000000000016a5c         db  0x0e ; '.'
0000000000016a5d         db  0x20 ; ' '
0000000000016a5e         db  0x83 ; '.'
0000000000016a5f         db  0x04 ; '.'
0000000000016a60         db  0x02 ; '.'
0000000000016a61         db  0x4a ; 'J'
0000000000016a62         db  0x0a ; '.'
0000000000016a63         db  0x0e ; '.'
0000000000016a64         db  0x18 ; '.'
0000000000016a65         db  0x41 ; 'A'
0000000000016a66         db  0x0e ; '.'
0000000000016a67         db  0x10 ; '.'
0000000000016a68         db  0x42 ; 'B'
0000000000016a69         db  0x0e ; '.'
0000000000016a6a         db  0x08 ; '.'
0000000000016a6b         db  0x47 ; 'G'
0000000000016a6c         db  0x0b ; '.'
0000000000016a6d         db  0x00 ; '.'
0000000000016a6e         db  0x00 ; '.'
0000000000016a6f         db  0x00 ; '.'
0000000000016a70         dd         0x00000048                                  ; Length of the record
0000000000016a74         dd         0x00000d24                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000016a78         db         0xf8, 0xf6, 0xfe, 0xff                      ; begin 0x6170
0000000000016a7c         db         0xc3, 0x01, 2 dup (0x00)                    ; length 0x1c3 (end at 0x6333)
0000000000016a80         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016a81         db  0x42 ; 'B'
0000000000016a82         db  0x0e ; '.'
0000000000016a83         db  0x10 ; '.'
0000000000016a84         db  0x8f ; '.'
0000000000016a85         db  0x02 ; '.'
0000000000016a86         db  0x42 ; 'B'
0000000000016a87         db  0x0e ; '.'
0000000000016a88         db  0x18 ; '.'
0000000000016a89         db  0x8e ; '.'
0000000000016a8a         db  0x03 ; '.'
0000000000016a8b         db  0x42 ; 'B'
0000000000016a8c         db  0x0e ; '.'
0000000000016a8d         db  0x20 ; ' '
0000000000016a8e         db  0x8d ; '.'
0000000000016a8f         db  0x04 ; '.'
0000000000016a90         db  0x42 ; 'B'
0000000000016a91         db  0x0e ; '.'
0000000000016a92         db  0x28 ; '('
0000000000016a93         db  0x8c ; '.'
0000000000016a94         db  0x05 ; '.'
0000000000016a95         db  0x41 ; 'A'
0000000000016a96         db  0x0e ; '.'
0000000000016a97         db  0x30 ; '0'
0000000000016a98         db  0x86 ; '.'
0000000000016a99         db  0x06 ; '.'
0000000000016a9a         db  0x41 ; 'A'
0000000000016a9b         db  0x0e ; '.'
0000000000016a9c         db  0x38 ; '8'
0000000000016a9d         db  0x83 ; '.'
0000000000016a9e         db  0x07 ; '.'
0000000000016a9f         db  0x47 ; 'G'
0000000000016aa0         db  0x0e ; '.'
0000000000016aa1         db  0xa0 ; '.'
0000000000016aa2         db  0x01 ; '.'
0000000000016aa3         db  0x02 ; '.'
0000000000016aa4         db  0xd3 ; '.'
0000000000016aa5         db  0x0a ; '.'
0000000000016aa6         db  0x0e ; '.'
0000000000016aa7         db  0x38 ; '8'
0000000000016aa8         db  0x41 ; 'A'
0000000000016aa9         db  0x0e ; '.'
0000000000016aaa         db  0x30 ; '0'
0000000000016aab         db  0x41 ; 'A'
0000000000016aac         db  0x0e ; '.'
0000000000016aad         db  0x28 ; '('
0000000000016aae         db  0x42 ; 'B'
0000000000016aaf         db  0x0e ; '.'
0000000000016ab0         db  0x20 ; ' '
0000000000016ab1         db  0x42 ; 'B'
0000000000016ab2         db  0x0e ; '.'
0000000000016ab3         db  0x18 ; '.'
0000000000016ab4         db  0x42 ; 'B'
0000000000016ab5         db  0x0e ; '.'
0000000000016ab6         db  0x10 ; '.'
0000000000016ab7         db  0x42 ; 'B'
0000000000016ab8         db  0x0e ; '.'
0000000000016ab9         db  0x08 ; '.'
0000000000016aba         db  0x42 ; 'B'
0000000000016abb         db  0x0b ; '.'
0000000000016abc         dd         0x00000048                                  ; Length of the record
0000000000016ac0         dd         0x00000d70                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000016ac4         db         0x7c, 0xf8, 0xfe, 0xff                      ; begin 0x6340
0000000000016ac8         db         0x15, 0x06, 2 dup (0x00)                    ; length 0x615 (end at 0x6955)
0000000000016acc         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016acd         db  0x42 ; 'B'
0000000000016ace         db  0x0e ; '.'
0000000000016acf         db  0x10 ; '.'
0000000000016ad0         db  0x8f ; '.'
0000000000016ad1         db  0x02 ; '.'
0000000000016ad2         db  0x42 ; 'B'
0000000000016ad3         db  0x0e ; '.'
0000000000016ad4         db  0x18 ; '.'
0000000000016ad5         db  0x8e ; '.'
0000000000016ad6         db  0x03 ; '.'
0000000000016ad7         db  0x45 ; 'E'
0000000000016ad8         db  0x0e ; '.'
0000000000016ad9         db  0x20 ; ' '
0000000000016ada         db  0x8d ; '.'
0000000000016adb         db  0x04 ; '.'
0000000000016adc         db  0x42 ; 'B'
0000000000016add         db  0x0e ; '.'
0000000000016ade         db  0x28 ; '('
0000000000016adf         db  0x8c ; '.'
0000000000016ae0         db  0x05 ; '.'
0000000000016ae1         db  0x41 ; 'A'
0000000000016ae2         db  0x0e ; '.'
0000000000016ae3         db  0x30 ; '0'
0000000000016ae4         db  0x86 ; '.'
0000000000016ae5         db  0x06 ; '.'
0000000000016ae6         db  0x41 ; 'A'
0000000000016ae7         db  0x0e ; '.'
0000000000016ae8         db  0x38 ; '8'
0000000000016ae9         db  0x83 ; '.'
0000000000016aea         db  0x07 ; '.'
0000000000016aeb         db  0x47 ; 'G'
0000000000016aec         db  0x0e ; '.'
0000000000016aed         db  0xe0 ; '.'
0000000000016aee         db  0x01 ; '.'
0000000000016aef         db  0x02 ; '.'
0000000000016af0         db  0x69 ; 'i'
0000000000016af1         db  0x0a ; '.'
0000000000016af2         db  0x0e ; '.'
0000000000016af3         db  0x38 ; '8'
0000000000016af4         db  0x41 ; 'A'
0000000000016af5         db  0x0e ; '.'
0000000000016af6         db  0x30 ; '0'
0000000000016af7         db  0x41 ; 'A'
0000000000016af8         db  0x0e ; '.'
0000000000016af9         db  0x28 ; '('
0000000000016afa         db  0x42 ; 'B'
0000000000016afb         db  0x0e ; '.'
0000000000016afc         db  0x20 ; ' '
0000000000016afd         db  0x42 ; 'B'
0000000000016afe         db  0x0e ; '.'
0000000000016aff         db  0x18 ; '.'
0000000000016b00         db  0x42 ; 'B'
0000000000016b01         db  0x0e ; '.'
0000000000016b02         db  0x10 ; '.'
0000000000016b03         db  0x42 ; 'B'
0000000000016b04         db  0x0e ; '.'
0000000000016b05         db  0x08 ; '.'
0000000000016b06         db  0x49 ; 'I'
0000000000016b07         db  0x0b ; '.'
0000000000016b08         dd         0x00000058                                  ; Length of the record
0000000000016b0c         dd         0x00000dbc                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000016b10         db         0x50, 2 dup (0xfe), 0xff                    ; begin 0x6960
0000000000016b14         db         0x4e, 0x01, 2 dup (0x00)                    ; length 0x14e (end at 0x6aae)
0000000000016b18         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016b19         db  0x41 ; 'A'
0000000000016b1a         db  0x0e ; '.'
0000000000016b1b         db  0x10 ; '.'
0000000000016b1c         db  0x86 ; '.'
0000000000016b1d         db  0x02 ; '.'
0000000000016b1e         db  0x41 ; 'A'
0000000000016b1f         db  0x0e ; '.'
0000000000016b20         db  0x18 ; '.'
0000000000016b21         db  0x83 ; '.'
0000000000016b22         db  0x03 ; '.'
0000000000016b23         db  0x4e ; 'N'
0000000000016b24         db  0x0e ; '.'
0000000000016b25         db  0x20 ; ' '
0000000000016b26         db  0x02 ; '.'
0000000000016b27         db  0x83 ; '.'
0000000000016b28         db  0x0a ; '.'
0000000000016b29         db  0x0e ; '.'
0000000000016b2a         db  0x18 ; '.'
0000000000016b2b         db  0x41 ; 'A'
0000000000016b2c         db  0x0e ; '.'
0000000000016b2d         db  0x10 ; '.'
0000000000016b2e         db  0x41 ; 'A'
0000000000016b2f         db  0x0e ; '.'
0000000000016b30         db  0x08 ; '.'
0000000000016b31         db  0x4b ; 'K'
0000000000016b32         db  0x0b ; '.'
0000000000016b33         db  0x02 ; '.'
0000000000016b34         db  0x61 ; 'a'
0000000000016b35         db  0x0a ; '.'
0000000000016b36         db  0x0e ; '.'
0000000000016b37         db  0x18 ; '.'
0000000000016b38         db  0x43 ; 'C'
0000000000016b39         db  0x0e ; '.'
0000000000016b3a         db  0x10 ; '.'
0000000000016b3b         db  0x41 ; 'A'
0000000000016b3c         db  0x0e ; '.'
0000000000016b3d         db  0x08 ; '.'
0000000000016b3e         db  0x4b ; 'K'
0000000000016b3f         db  0x0b ; '.'
0000000000016b40         db  0x4c ; 'L'
0000000000016b41         db  0x0a ; '.'
0000000000016b42         db  0x0e ; '.'
0000000000016b43         db  0x18 ; '.'
0000000000016b44         db  0x43 ; 'C'
0000000000016b45         db  0x0e ; '.'
0000000000016b46         db  0x10 ; '.'
0000000000016b47         db  0x41 ; 'A'
0000000000016b48         db  0x0e ; '.'
0000000000016b49         db  0x08 ; '.'
0000000000016b4a         db  0x48 ; 'H'
0000000000016b4b         db  0x0b ; '.'
0000000000016b4c         db  0x49 ; 'I'
0000000000016b4d         db  0x0a ; '.'
0000000000016b4e         db  0x0e ; '.'
0000000000016b4f         db  0x18 ; '.'
0000000000016b50         db  0x43 ; 'C'
0000000000016b51         db  0x0e ; '.'
0000000000016b52         db  0x10 ; '.'
0000000000016b53         db  0x41 ; 'A'
0000000000016b54         db  0x0e ; '.'
0000000000016b55         db  0x08 ; '.'
0000000000016b56         db  0x4b ; 'K'
0000000000016b57         db  0x0b ; '.'
0000000000016b58         db  0x49 ; 'I'
0000000000016b59         db  0x0e ; '.'
0000000000016b5a         db  0x18 ; '.'
0000000000016b5b         db  0x43 ; 'C'
0000000000016b5c         db  0x0e ; '.'
0000000000016b5d         db  0x10 ; '.'
0000000000016b5e         db  0x41 ; 'A'
0000000000016b5f         db  0x0e ; '.'
0000000000016b60         db  0x08 ; '.'
0000000000016b61         db  0x00 ; '.'
0000000000016b62         db  0x00 ; '.'
0000000000016b63         db  0x00 ; '.'
0000000000016b64         dd         0x00000028                                  ; Length of the record
0000000000016b68         dd         0x00000e18                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000016b6c         db         0x44, 0xff, 0xfe, 0xff                      ; begin 0x6ab0
0000000000016b70         db         0x86, 3 dup (0x00)                          ; length 0x86 (end at 0x6b36)
0000000000016b74         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016b75         db  0x42 ; 'B'
0000000000016b76         db  0x0e ; '.'
0000000000016b77         db  0x10 ; '.'
0000000000016b78         db  0x8c ; '.'
0000000000016b79         db  0x02 ; '.'
0000000000016b7a         db  0x41 ; 'A'
0000000000016b7b         db  0x0e ; '.'
0000000000016b7c         db  0x18 ; '.'
0000000000016b7d         db  0x86 ; '.'
0000000000016b7e         db  0x03 ; '.'
0000000000016b7f         db  0x44 ; 'D'
0000000000016b80         db  0x0e ; '.'
0000000000016b81         db  0x20 ; ' '
0000000000016b82         db  0x83 ; '.'
0000000000016b83         db  0x04 ; '.'
0000000000016b84         db  0x70 ; 'p'
0000000000016b85         db  0x0a ; '.'
0000000000016b86         db  0x0e ; '.'
0000000000016b87         db  0x18 ; '.'
0000000000016b88         db  0x41 ; 'A'
0000000000016b89         db  0x0e ; '.'
0000000000016b8a         db  0x10 ; '.'
0000000000016b8b         db  0x42 ; 'B'
0000000000016b8c         db  0x0e ; '.'
0000000000016b8d         db  0x08 ; '.'
0000000000016b8e         db  0x46 ; 'F'
0000000000016b8f         db  0x0b ; '.'
0000000000016b90         dd         0x00000018                                  ; Length of the record
0000000000016b94         dd         0x00000e44                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000016b98         db         0xa8, 0xff, 0xfe, 0xff                      ; begin 0x6b40
0000000000016b9c         db         0x30, 3 dup (0x00)                          ; length 0x30 (end at 0x6b70)
0000000000016ba0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016ba1         db  0x41 ; 'A'
0000000000016ba2         db  0x0e ; '.'
0000000000016ba3         db  0x10 ; '.'
0000000000016ba4         db  0x83 ; '.'
0000000000016ba5         db  0x02 ; '.'
0000000000016ba6         db  0x6a ; 'j'
0000000000016ba7         db  0x0e ; '.'
0000000000016ba8         db  0x08 ; '.'
0000000000016ba9         db  0x00 ; '.'
0000000000016baa         db  0x00 ; '.'
0000000000016bab         db  0x00 ; '.'
0000000000016bac         dd         0x00000010                                  ; Length of the record
0000000000016bb0         dd         0x00000e60                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000016bb4         db         0xbc, 0xff, 0xfe, 0xff                      ; begin 0x6b70
0000000000016bb8         db         0x25, 3 dup (0x00)                          ; length 0x25 (end at 0x6b95)
0000000000016bbc         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016bbd         align      64
0000000000016bc0         dd         0x00000014                                  ; Length of the record
0000000000016bc4         dd         0x00000e74                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000016bc8         db         0xd8, 0xff, 0xfe, 0xff                      ; begin 0x6ba0
0000000000016bcc         db         0x14, 3 dup (0x00)                          ; length 0x14 (end at 0x6bb4)
0000000000016bd0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016bd1         db  0x48 ; 'H'
0000000000016bd2         db  0x0e ; '.'
0000000000016bd3         db  0x10 ; '.'
0000000000016bd4         db  0x4b ; 'K'
0000000000016bd5         db  0x0e ; '.'
0000000000016bd6         db  0x08 ; '.'
0000000000016bd7         db  0x00 ; '.'
0000000000016bd8         dd         0x00000048                                  ; Length of the record
0000000000016bdc         dd         0x00000e8c                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000016be0         db         0xe0, 0xff, 0xfe, 0xff                      ; begin 0x6bc0
0000000000016be4         db         0xce, 0x01, 2 dup (0x00)                    ; length 0x1ce (end at 0x6d8e)
0000000000016be8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016be9         db  0x42 ; 'B'
0000000000016bea         db  0x0e ; '.'
0000000000016beb         db  0x10 ; '.'
0000000000016bec         db  0x8f ; '.'
0000000000016bed         db  0x02 ; '.'
0000000000016bee         db  0x42 ; 'B'
0000000000016bef         db  0x0e ; '.'
0000000000016bf0         db  0x18 ; '.'
0000000000016bf1         db  0x8e ; '.'
0000000000016bf2         db  0x03 ; '.'
0000000000016bf3         db  0x45 ; 'E'
0000000000016bf4         db  0x0e ; '.'
0000000000016bf5         db  0x20 ; ' '
0000000000016bf6         db  0x8d ; '.'
0000000000016bf7         db  0x04 ; '.'
0000000000016bf8         db  0x42 ; 'B'
0000000000016bf9         db  0x0e ; '.'
0000000000016bfa         db  0x28 ; '('
0000000000016bfb         db  0x8c ; '.'
0000000000016bfc         db  0x05 ; '.'
0000000000016bfd         db  0x41 ; 'A'
0000000000016bfe         db  0x0e ; '.'
0000000000016bff         db  0x30 ; '0'
0000000000016c00         db  0x86 ; '.'
0000000000016c01         db  0x06 ; '.'
0000000000016c02         db  0x41 ; 'A'
0000000000016c03         db  0x0e ; '.'
0000000000016c04         db  0x38 ; '8'
0000000000016c05         db  0x83 ; '.'
0000000000016c06         db  0x07 ; '.'
0000000000016c07         db  0x47 ; 'G'
0000000000016c08         db  0x0e ; '.'
0000000000016c09         db  0x50 ; 'P'
0000000000016c0a         db  0x02 ; '.'
0000000000016c0b         db  0xac ; '.'
0000000000016c0c         db  0x0a ; '.'
0000000000016c0d         db  0x0e ; '.'
0000000000016c0e         db  0x38 ; '8'
0000000000016c0f         db  0x41 ; 'A'
0000000000016c10         db  0x0e ; '.'
0000000000016c11         db  0x30 ; '0'
0000000000016c12         db  0x41 ; 'A'
0000000000016c13         db  0x0e ; '.'
0000000000016c14         db  0x28 ; '('
0000000000016c15         db  0x42 ; 'B'
0000000000016c16         db  0x0e ; '.'
0000000000016c17         db  0x20 ; ' '
0000000000016c18         db  0x42 ; 'B'
0000000000016c19         db  0x0e ; '.'
0000000000016c1a         db  0x18 ; '.'
0000000000016c1b         db  0x42 ; 'B'
0000000000016c1c         db  0x0e ; '.'
0000000000016c1d         db  0x10 ; '.'
0000000000016c1e         db  0x42 ; 'B'
0000000000016c1f         db  0x0e ; '.'
0000000000016c20         db  0x08 ; '.'
0000000000016c21         db  0x46 ; 'F'
0000000000016c22         db  0x0b ; '.'
0000000000016c23         db  0x00 ; '.'
0000000000016c24         dd         0x00000034                                  ; Length of the record
0000000000016c28         dd         0x00000ed8                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000016c2c         db         0x64, 0x01, 2 dup (0xff)                    ; begin 0x6d90
0000000000016c30         db         0x9f, 3 dup (0x00)                          ; length 0x9f (end at 0x6e2f)
0000000000016c34         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016c35         db  0x42 ; 'B'
0000000000016c36         db  0x0e ; '.'
0000000000016c37         db  0x10 ; '.'
0000000000016c38         db  0x8d ; '.'
0000000000016c39         db  0x02 ; '.'
0000000000016c3a         db  0x42 ; 'B'
0000000000016c3b         db  0x0e ; '.'
0000000000016c3c         db  0x18 ; '.'
0000000000016c3d         db  0x8c ; '.'
0000000000016c3e         db  0x03 ; '.'
0000000000016c3f         db  0x44 ; 'D'
0000000000016c40         db  0x0e ; '.'
0000000000016c41         db  0x20 ; ' '
0000000000016c42         db  0x86 ; '.'
0000000000016c43         db  0x04 ; '.'
0000000000016c44         db  0x41 ; 'A'
0000000000016c45         db  0x0e ; '.'
0000000000016c46         db  0x28 ; '('
0000000000016c47         db  0x83 ; '.'
0000000000016c48         db  0x05 ; '.'
0000000000016c49         db  0x51 ; 'Q'
0000000000016c4a         db  0x0e ; '.'
0000000000016c4b         db  0x30 ; '0'
0000000000016c4c         db  0x02 ; '.'
0000000000016c4d         db  0x7e ; '~'
0000000000016c4e         db  0x0e ; '.'
0000000000016c4f         db  0x28 ; '('
0000000000016c50         db  0x41 ; 'A'
0000000000016c51         db  0x0e ; '.'
0000000000016c52         db  0x20 ; ' '
0000000000016c53         db  0x41 ; 'A'
0000000000016c54         db  0x0e ; '.'
0000000000016c55         db  0x18 ; '.'
0000000000016c56         db  0x42 ; 'B'
0000000000016c57         db  0x0e ; '.'
0000000000016c58         db  0x10 ; '.'
0000000000016c59         db  0x42 ; 'B'
0000000000016c5a         db  0x0e ; '.'
0000000000016c5b         db  0x08 ; '.'
0000000000016c5c         dd         0x00000048                                  ; Length of the record
0000000000016c60         dd         0x00000f10                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000016c64         db         0xcc, 0x01, 2 dup (0xff)                    ; begin 0x6e30
0000000000016c68         db         0x75, 0x02, 2 dup (0x00)                    ; length 0x275 (end at 0x70a5)
0000000000016c6c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016c6d         db  0x42 ; 'B'
0000000000016c6e         db  0x0e ; '.'
0000000000016c6f         db  0x10 ; '.'
0000000000016c70         db  0x8f ; '.'
0000000000016c71         db  0x02 ; '.'
0000000000016c72         db  0x42 ; 'B'
0000000000016c73         db  0x0e ; '.'
0000000000016c74         db  0x18 ; '.'
0000000000016c75         db  0x8e ; '.'
0000000000016c76         db  0x03 ; '.'
0000000000016c77         db  0x45 ; 'E'
0000000000016c78         db  0x0e ; '.'
0000000000016c79         db  0x20 ; ' '
0000000000016c7a         db  0x8d ; '.'
0000000000016c7b         db  0x04 ; '.'
0000000000016c7c         db  0x42 ; 'B'
0000000000016c7d         db  0x0e ; '.'
0000000000016c7e         db  0x28 ; '('
0000000000016c7f         db  0x8c ; '.'
0000000000016c80         db  0x05 ; '.'
0000000000016c81         db  0x44 ; 'D'
0000000000016c82         db  0x0e ; '.'
0000000000016c83         db  0x30 ; '0'
0000000000016c84         db  0x86 ; '.'
0000000000016c85         db  0x06 ; '.'
0000000000016c86         db  0x41 ; 'A'
0000000000016c87         db  0x0e ; '.'
0000000000016c88         db  0x38 ; '8'
0000000000016c89         db  0x83 ; '.'
0000000000016c8a         db  0x07 ; '.'
0000000000016c8b         db  0x4a ; 'J'
0000000000016c8c         db  0x0e ; '.'
0000000000016c8d         db  0x50 ; 'P'
0000000000016c8e         db  0x03 ; '.'
0000000000016c8f         db  0x1a ; '.'
0000000000016c90         db  0x01 ; '.'
0000000000016c91         db  0x0a ; '.'
0000000000016c92         db  0x0e ; '.'
0000000000016c93         db  0x38 ; '8'
0000000000016c94         db  0x41 ; 'A'
0000000000016c95         db  0x0e ; '.'
0000000000016c96         db  0x30 ; '0'
0000000000016c97         db  0x41 ; 'A'
0000000000016c98         db  0x0e ; '.'
0000000000016c99         db  0x28 ; '('
0000000000016c9a         db  0x42 ; 'B'
0000000000016c9b         db  0x0e ; '.'
0000000000016c9c         db  0x20 ; ' '
0000000000016c9d         db  0x42 ; 'B'
0000000000016c9e         db  0x0e ; '.'
0000000000016c9f         db  0x18 ; '.'
0000000000016ca0         db  0x42 ; 'B'
0000000000016ca1         db  0x0e ; '.'
0000000000016ca2         db  0x10 ; '.'
0000000000016ca3         db  0x42 ; 'B'
0000000000016ca4         db  0x0e ; '.'
0000000000016ca5         db  0x08 ; '.'
0000000000016ca6         db  0x42 ; 'B'
0000000000016ca7         db  0x0b ; '.'
0000000000016ca8         dd         0x00000018                                  ; Length of the record
0000000000016cac         dd         0x00000f5c                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000016cb0         db         0x00, 0x04, 2 dup (0xff)                    ; begin 0x70b0
0000000000016cb4         db         0x59, 3 dup (0x00)                          ; length 0x59 (end at 0x7109)
0000000000016cb8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016cb9         db  0x41 ; 'A'
0000000000016cba         db  0x0e ; '.'
0000000000016cbb         db  0x10 ; '.'
0000000000016cbc         db  0x83 ; '.'
0000000000016cbd         db  0x02 ; '.'
0000000000016cbe         db  0x02 ; '.'
0000000000016cbf         db  0x53 ; 'S'
0000000000016cc0         db  0x0e ; '.'
0000000000016cc1         db  0x08 ; '.'
0000000000016cc2         db  0x00 ; '.'
0000000000016cc3         db  0x00 ; '.'
0000000000016cc4         dd         0x0000001c                                  ; Length of the record
0000000000016cc8         dd         0x00000f78                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000016ccc         db         0x44, 0x04, 2 dup (0xff)                    ; begin 0x7110
0000000000016cd0         db         0x32, 3 dup (0x00)                          ; length 0x32 (end at 0x7142)
0000000000016cd4         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016cd5         db  0x41 ; 'A'
0000000000016cd6         db  0x0e ; '.'
0000000000016cd7         db  0x10 ; '.'
0000000000016cd8         db  0x83 ; '.'
0000000000016cd9         db  0x02 ; '.'
0000000000016cda         db  0x5f ; '_'
0000000000016cdb         db  0x0a ; '.'
0000000000016cdc         db  0x0e ; '.'
0000000000016cdd         db  0x08 ; '.'
0000000000016cde         db  0x48 ; 'H'
0000000000016cdf         db  0x0b ; '.'
0000000000016ce0         db  0x45 ; 'E'
0000000000016ce1         db  0x0e ; '.'
0000000000016ce2         db  0x08 ; '.'
0000000000016ce3         db  0x00 ; '.'
0000000000016ce4         dd         0x00000038                                  ; Length of the record
0000000000016ce8         dd         0x00000f98                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000016cec         db         0x64, 0x04, 2 dup (0xff)                    ; begin 0x7150
0000000000016cf0         db         0x5f, 0x01, 2 dup (0x00)                    ; length 0x15f (end at 0x72af)
0000000000016cf4         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016cf5         db  0x42 ; 'B'
0000000000016cf6         db  0x0e ; '.'
0000000000016cf7         db  0x10 ; '.'
0000000000016cf8         db  0x8e ; '.'
0000000000016cf9         db  0x02 ; '.'
0000000000016cfa         db  0x42 ; 'B'
0000000000016cfb         db  0x0e ; '.'
0000000000016cfc         db  0x18 ; '.'
0000000000016cfd         db  0x8d ; '.'
0000000000016cfe         db  0x03 ; '.'
0000000000016cff         db  0x42 ; 'B'
0000000000016d00         db  0x0e ; '.'
0000000000016d01         db  0x20 ; ' '
0000000000016d02         db  0x8c ; '.'
0000000000016d03         db  0x04 ; '.'
0000000000016d04         db  0x44 ; 'D'
0000000000016d05         db  0x0e ; '.'
0000000000016d06         db  0x28 ; '('
0000000000016d07         db  0x86 ; '.'
0000000000016d08         db  0x05 ; '.'
0000000000016d09         db  0x41 ; 'A'
0000000000016d0a         db  0x0e ; '.'
0000000000016d0b         db  0x30 ; '0'
0000000000016d0c         db  0x83 ; '.'
0000000000016d0d         db  0x06 ; '.'
0000000000016d0e         db  0x03 ; '.'
0000000000016d0f         db  0x45 ; 'E'
0000000000016d10         db  0x01 ; '.'
0000000000016d11         db  0x0e ; '.'
0000000000016d12         db  0x28 ; '('
0000000000016d13         db  0x44 ; 'D'
0000000000016d14         db  0x0e ; '.'
0000000000016d15         db  0x20 ; ' '
0000000000016d16         db  0x42 ; 'B'
0000000000016d17         db  0x0e ; '.'
0000000000016d18         db  0x18 ; '.'
0000000000016d19         db  0x42 ; 'B'
0000000000016d1a         db  0x0e ; '.'
0000000000016d1b         db  0x10 ; '.'
0000000000016d1c         db  0x42 ; 'B'
0000000000016d1d         db  0x0e ; '.'
0000000000016d1e         db  0x08 ; '.'
0000000000016d1f         db  0x00 ; '.'
0000000000016d20         dd         0x00000038                                  ; Length of the record
0000000000016d24         dd         0x00000fd4                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000016d28         db         0x88, 0x05, 2 dup (0xff)                    ; begin 0x72b0
0000000000016d2c         db         0xb8, 3 dup (0x00)                          ; length 0xb8 (end at 0x7368)
0000000000016d30         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016d31         db  0x42 ; 'B'
0000000000016d32         db  0x0e ; '.'
0000000000016d33         db  0x10 ; '.'
0000000000016d34         db  0x8e ; '.'
0000000000016d35         db  0x02 ; '.'
0000000000016d36         db  0x42 ; 'B'
0000000000016d37         db  0x0e ; '.'
0000000000016d38         db  0x18 ; '.'
0000000000016d39         db  0x8d ; '.'
0000000000016d3a         db  0x03 ; '.'
0000000000016d3b         db  0x45 ; 'E'
0000000000016d3c         db  0x0e ; '.'
0000000000016d3d         db  0x20 ; ' '
0000000000016d3e         db  0x8c ; '.'
0000000000016d3f         db  0x04 ; '.'
0000000000016d40         db  0x41 ; 'A'
0000000000016d41         db  0x0e ; '.'
0000000000016d42         db  0x28 ; '('
0000000000016d43         db  0x86 ; '.'
0000000000016d44         db  0x05 ; '.'
0000000000016d45         db  0x41 ; 'A'
0000000000016d46         db  0x0e ; '.'
0000000000016d47         db  0x30 ; '0'
0000000000016d48         db  0x83 ; '.'
0000000000016d49         db  0x06 ; '.'
0000000000016d4a         db  0x02 ; '.'
0000000000016d4b         db  0x8f ; '.'
0000000000016d4c         db  0x0e ; '.'
0000000000016d4d         db  0x28 ; '('
0000000000016d4e         db  0x57 ; 'W'
0000000000016d4f         db  0x0e ; '.'
0000000000016d50         db  0x20 ; ' '
0000000000016d51         db  0x42 ; 'B'
0000000000016d52         db  0x0e ; '.'
0000000000016d53         db  0x18 ; '.'
0000000000016d54         db  0x42 ; 'B'
0000000000016d55         db  0x0e ; '.'
0000000000016d56         db  0x10 ; '.'
0000000000016d57         db  0x42 ; 'B'
0000000000016d58         db  0x0e ; '.'
0000000000016d59         db  0x08 ; '.'
0000000000016d5a         db  0x00 ; '.'
0000000000016d5b         db  0x00 ; '.'
0000000000016d5c         dd         0x00000010                                  ; Length of the record
0000000000016d60         dd         0x00001010                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000016d64         db         0x0c, 0x06, 2 dup (0xff)                    ; begin 0x7370
0000000000016d68         db         0x4f, 3 dup (0x00)                          ; length 0x4f (end at 0x73bf)
0000000000016d6c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016d6d         align      16
0000000000016d70         dd         0x00000010                                  ; Length of the record
0000000000016d74         dd         0x00001024                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000016d78         db         0x48, 0x06, 2 dup (0xff)                    ; begin 0x73c0
0000000000016d7c         db         0x53, 3 dup (0x00)                          ; length 0x53 (end at 0x7413)
0000000000016d80         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016d81         align      4
0000000000016d84         dd         0x00000010                                  ; Length of the record
0000000000016d88         dd         0x00001038                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000016d8c         db         0x94, 0x06, 2 dup (0xff)                    ; begin 0x7420
0000000000016d90         db         0x75, 3 dup (0x00)                          ; length 0x75 (end at 0x7495)
0000000000016d94         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016d95         align      8
0000000000016d98         dd         0x00000060                                  ; Length of the record
0000000000016d9c         dd         0x0000104c                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000016da0         db         0x00, 0x07, 2 dup (0xff)                    ; begin 0x74a0
0000000000016da4         db         0xf5, 3 dup (0x00)                          ; length 0xf5 (end at 0x7595)
0000000000016da8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016da9         db  0x42 ; 'B'
0000000000016daa         db  0x0e ; '.'
0000000000016dab         db  0x10 ; '.'
0000000000016dac         db  0x8f ; '.'
0000000000016dad         db  0x02 ; '.'
0000000000016dae         db  0x42 ; 'B'
0000000000016daf         db  0x0e ; '.'
0000000000016db0         db  0x18 ; '.'
0000000000016db1         db  0x8e ; '.'
0000000000016db2         db  0x03 ; '.'
0000000000016db3         db  0x46 ; 'F'
0000000000016db4         db  0x0e ; '.'
0000000000016db5         db  0x20 ; ' '
0000000000016db6         db  0x8d ; '.'
0000000000016db7         db  0x04 ; '.'
0000000000016db8         db  0x42 ; 'B'
0000000000016db9         db  0x0e ; '.'
0000000000016dba         db  0x28 ; '('
0000000000016dbb         db  0x8c ; '.'
0000000000016dbc         db  0x05 ; '.'
0000000000016dbd         db  0x44 ; 'D'
0000000000016dbe         db  0x0e ; '.'
0000000000016dbf         db  0x30 ; '0'
0000000000016dc0         db  0x86 ; '.'
0000000000016dc1         db  0x06 ; '.'
0000000000016dc2         db  0x41 ; 'A'
0000000000016dc3         db  0x0e ; '.'
0000000000016dc4         db  0x38 ; '8'
0000000000016dc5         db  0x83 ; '.'
0000000000016dc6         db  0x07 ; '.'
0000000000016dc7         db  0x50 ; 'P'
0000000000016dc8         db  0x0e ; '.'
0000000000016dc9         db  0x40 ; '@'
0000000000016dca         db  0x02 ; '.'
0000000000016dcb         db  0x85 ; '.'
0000000000016dcc         db  0x0a ; '.'
0000000000016dcd         db  0x0e ; '.'
0000000000016dce         db  0x38 ; '8'
0000000000016dcf         db  0x41 ; 'A'
0000000000016dd0         db  0x0e ; '.'
0000000000016dd1         db  0x30 ; '0'
0000000000016dd2         db  0x41 ; 'A'
0000000000016dd3         db  0x0e ; '.'
0000000000016dd4         db  0x28 ; '('
0000000000016dd5         db  0x42 ; 'B'
0000000000016dd6         db  0x0e ; '.'
0000000000016dd7         db  0x20 ; ' '
0000000000016dd8         db  0x42 ; 'B'
0000000000016dd9         db  0x0e ; '.'
0000000000016dda         db  0x18 ; '.'
0000000000016ddb         db  0x42 ; 'B'
0000000000016ddc         db  0x0e ; '.'
0000000000016ddd         db  0x10 ; '.'
0000000000016dde         db  0x42 ; 'B'
0000000000016ddf         db  0x0e ; '.'
0000000000016de0         db  0x08 ; '.'
0000000000016de1         db  0x48 ; 'H'
0000000000016de2         db  0x0b ; '.'
0000000000016de3         db  0x44 ; 'D'
0000000000016de4         db  0x0a ; '.'
0000000000016de5         db  0x0e ; '.'
0000000000016de6         db  0x38 ; '8'
0000000000016de7         db  0x46 ; 'F'
0000000000016de8         db  0x0e ; '.'
0000000000016de9         db  0x30 ; '0'
0000000000016dea         db  0x41 ; 'A'
0000000000016deb         db  0x0e ; '.'
0000000000016dec         db  0x28 ; '('
0000000000016ded         db  0x42 ; 'B'
0000000000016dee         db  0x0e ; '.'
0000000000016def         db  0x20 ; ' '
0000000000016df0         db  0x42 ; 'B'
0000000000016df1         db  0x0e ; '.'
0000000000016df2         db  0x18 ; '.'
0000000000016df3         db  0x42 ; 'B'
0000000000016df4         db  0x0e ; '.'
0000000000016df5         db  0x10 ; '.'
0000000000016df6         db  0x42 ; 'B'
0000000000016df7         db  0x0e ; '.'
0000000000016df8         db  0x08 ; '.'
0000000000016df9         db  0x45 ; 'E'
0000000000016dfa         db  0x0b ; '.'
0000000000016dfb         db  0x00 ; '.'
0000000000016dfc         dd         0x00000010                                  ; Length of the record
0000000000016e00         dd         0x000010b0                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000016e04         db         0x9c, 0x07, 2 dup (0xff)                    ; begin 0x75a0
0000000000016e08         db         0x34, 3 dup (0x00)                          ; length 0x34 (end at 0x75d4)
0000000000016e0c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016e0d         align      16
0000000000016e10         dd         0x00000010                                  ; Length of the record
0000000000016e14         dd         0x000010c4                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000016e18         db         0xc8, 0x07, 2 dup (0xff)                    ; begin 0x75e0
0000000000016e1c         db         0x8b, 3 dup (0x00)                          ; length 0x8b (end at 0x766b)
0000000000016e20         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016e21         align      4
0000000000016e24         dd         0x00000010                                  ; Length of the record
0000000000016e28         dd         0x000010d8                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000016e2c         db         0x44, 0x08, 2 dup (0xff)                    ; begin 0x7670
0000000000016e30         db         0x57, 3 dup (0x00)                          ; length 0x57 (end at 0x76c7)
0000000000016e34         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016e35         align      8
0000000000016e38         dd         0x0000004c                                  ; Length of the record
0000000000016e3c         dd         0x000010ec                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000016e40         db         0x90, 0x08, 2 dup (0xff)                    ; begin 0x76d0
0000000000016e44         db         0x69, 0x02, 2 dup (0x00)                    ; length 0x269 (end at 0x7939)
0000000000016e48         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016e49         db  0x42 ; 'B'
0000000000016e4a         db  0x0e ; '.'
0000000000016e4b         db  0x10 ; '.'
0000000000016e4c         db  0x8f ; '.'
0000000000016e4d         db  0x02 ; '.'
0000000000016e4e         db  0x42 ; 'B'
0000000000016e4f         db  0x0e ; '.'
0000000000016e50         db  0x18 ; '.'
0000000000016e51         db  0x8e ; '.'
0000000000016e52         db  0x03 ; '.'
0000000000016e53         db  0x42 ; 'B'
0000000000016e54         db  0x0e ; '.'
0000000000016e55         db  0x20 ; ' '
0000000000016e56         db  0x8d ; '.'
0000000000016e57         db  0x04 ; '.'
0000000000016e58         db  0x42 ; 'B'
0000000000016e59         db  0x0e ; '.'
0000000000016e5a         db  0x28 ; '('
0000000000016e5b         db  0x8c ; '.'
0000000000016e5c         db  0x05 ; '.'
0000000000016e5d         db  0x41 ; 'A'
0000000000016e5e         db  0x0e ; '.'
0000000000016e5f         db  0x30 ; '0'
0000000000016e60         db  0x86 ; '.'
0000000000016e61         db  0x06 ; '.'
0000000000016e62         db  0x41 ; 'A'
0000000000016e63         db  0x0e ; '.'
0000000000016e64         db  0x38 ; '8'
0000000000016e65         db  0x83 ; '.'
0000000000016e66         db  0x07 ; '.'
0000000000016e67         db  0x46 ; 'F'
0000000000016e68         db  0x0e ; '.'
0000000000016e69         db  0x80 ; '.'
0000000000016e6a         db  0x01 ; '.'
0000000000016e6b         db  0x03 ; '.'
0000000000016e6c         db  0xd2 ; '.'
0000000000016e6d         db  0x01 ; '.'
0000000000016e6e         db  0x0a ; '.'
0000000000016e6f         db  0x0e ; '.'
0000000000016e70         db  0x38 ; '8'
0000000000016e71         db  0x41 ; 'A'
0000000000016e72         db  0x0e ; '.'
0000000000016e73         db  0x30 ; '0'
0000000000016e74         db  0x41 ; 'A'
0000000000016e75         db  0x0e ; '.'
0000000000016e76         db  0x28 ; '('
0000000000016e77         db  0x42 ; 'B'
0000000000016e78         db  0x0e ; '.'
0000000000016e79         db  0x20 ; ' '
0000000000016e7a         db  0x42 ; 'B'
0000000000016e7b         db  0x0e ; '.'
0000000000016e7c         db  0x18 ; '.'
0000000000016e7d         db  0x42 ; 'B'
0000000000016e7e         db  0x0e ; '.'
0000000000016e7f         db  0x10 ; '.'
0000000000016e80         db  0x42 ; 'B'
0000000000016e81         db  0x0e ; '.'
0000000000016e82         db  0x08 ; '.'
0000000000016e83         db  0x44 ; 'D'
0000000000016e84         db  0x0b ; '.'
0000000000016e85         db  0x00 ; '.'
0000000000016e86         db  0x00 ; '.'
0000000000016e87         db  0x00 ; '.'
0000000000016e88         dd         0x00000034                                  ; Length of the record
0000000000016e8c         dd         0x0000113c                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000016e90         db         0xb0, 0x0a, 2 dup (0xff)                    ; begin 0x7940
0000000000016e94         db         0xde, 0x01, 2 dup (0x00)                    ; length 0x1de (end at 0x7b1e)
0000000000016e98         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016e99         db  0x58 ; 'X'
0000000000016e9a         db  0x0e ; '.'
0000000000016e9b         db  0x10 ; '.'
0000000000016e9c         db  0x8c ; '.'
0000000000016e9d         db  0x02 ; '.'
0000000000016e9e         db  0x41 ; 'A'
0000000000016e9f         db  0x0e ; '.'
0000000000016ea0         db  0x18 ; '.'
0000000000016ea1         db  0x86 ; '.'
0000000000016ea2         db  0x03 ; '.'
0000000000016ea3         db  0x44 ; 'D'
0000000000016ea4         db  0x0e ; '.'
0000000000016ea5         db  0x20 ; ' '
0000000000016ea6         db  0x83 ; '.'
0000000000016ea7         db  0x04 ; '.'
0000000000016ea8         db  0x02 ; '.'
0000000000016ea9         db  0xd0 ; '.'
0000000000016eaa         db  0x0e ; '.'
0000000000016eab         db  0x18 ; '.'
0000000000016eac         db  0x41 ; 'A'
0000000000016ead         db  0x0e ; '.'
0000000000016eae         db  0x10 ; '.'
0000000000016eaf         db  0x42 ; 'B'
0000000000016eb0         db  0x0e ; '.'
0000000000016eb1         db  0x08 ; '.'
0000000000016eb2         db  0x48 ; 'H'
0000000000016eb3         db  0xc3 ; '.'
0000000000016eb4         db  0xc6 ; '.'
0000000000016eb5         db  0xcc ; '.'
0000000000016eb6         db  0x48 ; 'H'
0000000000016eb7         db  0x0e ; '.'
0000000000016eb8         db  0x20 ; ' '
0000000000016eb9         db  0x83 ; '.'
0000000000016eba         db  0x04 ; '.'
0000000000016ebb         db  0x86 ; '.'
0000000000016ebc         db  0x03 ; '.'
0000000000016ebd         db  0x8c ; '.'
0000000000016ebe         db  0x02 ; '.'
0000000000016ebf         db  0x00 ; '.'
0000000000016ec0         dd         0x0000004c                                  ; Length of the record
0000000000016ec4         dd         0x00001174                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000016ec8         db         0x58, 0x0c, 2 dup (0xff)                    ; begin 0x7b20
0000000000016ecc         db         0xaf, 0x02, 2 dup (0x00)                    ; length 0x2af (end at 0x7dcf)
0000000000016ed0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016ed1         db  0x42 ; 'B'
0000000000016ed2         db  0x0e ; '.'
0000000000016ed3         db  0x10 ; '.'
0000000000016ed4         db  0x8f ; '.'
0000000000016ed5         db  0x02 ; '.'
0000000000016ed6         db  0x42 ; 'B'
0000000000016ed7         db  0x0e ; '.'
0000000000016ed8         db  0x18 ; '.'
0000000000016ed9         db  0x8e ; '.'
0000000000016eda         db  0x03 ; '.'
0000000000016edb         db  0x45 ; 'E'
0000000000016edc         db  0x0e ; '.'
0000000000016edd         db  0x20 ; ' '
0000000000016ede         db  0x8d ; '.'
0000000000016edf         db  0x04 ; '.'
0000000000016ee0         db  0x42 ; 'B'
0000000000016ee1         db  0x0e ; '.'
0000000000016ee2         db  0x28 ; '('
0000000000016ee3         db  0x8c ; '.'
0000000000016ee4         db  0x05 ; '.'
0000000000016ee5         db  0x41 ; 'A'
0000000000016ee6         db  0x0e ; '.'
0000000000016ee7         db  0x30 ; '0'
0000000000016ee8         db  0x86 ; '.'
0000000000016ee9         db  0x06 ; '.'
0000000000016eea         db  0x41 ; 'A'
0000000000016eeb         db  0x0e ; '.'
0000000000016eec         db  0x38 ; '8'
0000000000016eed         db  0x83 ; '.'
0000000000016eee         db  0x07 ; '.'
0000000000016eef         db  0x4b ; 'K'
0000000000016ef0         db  0x0e ; '.'
0000000000016ef1         db  0xa0 ; '.'
0000000000016ef2         db  0x01 ; '.'
0000000000016ef3         db  0x03 ; '.'
0000000000016ef4         db  0xa6 ; '.'
0000000000016ef5         db  0x01 ; '.'
0000000000016ef6         db  0x0a ; '.'
0000000000016ef7         db  0x0e ; '.'
0000000000016ef8         db  0x38 ; '8'
0000000000016ef9         db  0x41 ; 'A'
0000000000016efa         db  0x0e ; '.'
0000000000016efb         db  0x30 ; '0'
0000000000016efc         db  0x41 ; 'A'
0000000000016efd         db  0x0e ; '.'
0000000000016efe         db  0x28 ; '('
0000000000016eff         db  0x42 ; 'B'
0000000000016f00         db  0x0e ; '.'
0000000000016f01         db  0x20 ; ' '
0000000000016f02         db  0x42 ; 'B'
0000000000016f03         db  0x0e ; '.'
0000000000016f04         db  0x18 ; '.'
0000000000016f05         db  0x42 ; 'B'
0000000000016f06         db  0x0e ; '.'
0000000000016f07         db  0x10 ; '.'
0000000000016f08         db  0x42 ; 'B'
0000000000016f09         db  0x0e ; '.'
0000000000016f0a         db  0x08 ; '.'
0000000000016f0b         db  0x48 ; 'H'
0000000000016f0c         db  0x0b ; '.'
0000000000016f0d         db  0x00 ; '.'
0000000000016f0e         db  0x00 ; '.'
0000000000016f0f         db  0x00 ; '.'
0000000000016f10         dd         0x00000048                                  ; Length of the record
0000000000016f14         dd         0x000011c4                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000016f18         db         0xb8, 0x0e, 2 dup (0xff)                    ; begin 0x7dd0
0000000000016f1c         db         0x59, 0x01, 2 dup (0x00)                    ; length 0x159 (end at 0x7f29)
0000000000016f20         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016f21         db  0x42 ; 'B'
0000000000016f22         db  0x0e ; '.'
0000000000016f23         db  0x10 ; '.'
0000000000016f24         db  0x8f ; '.'
0000000000016f25         db  0x02 ; '.'
0000000000016f26         db  0x42 ; 'B'
0000000000016f27         db  0x0e ; '.'
0000000000016f28         db  0x18 ; '.'
0000000000016f29         db  0x8e ; '.'
0000000000016f2a         db  0x03 ; '.'
0000000000016f2b         db  0x45 ; 'E'
0000000000016f2c         db  0x0e ; '.'
0000000000016f2d         db  0x20 ; ' '
0000000000016f2e         db  0x8d ; '.'
0000000000016f2f         db  0x04 ; '.'
0000000000016f30         db  0x42 ; 'B'
0000000000016f31         db  0x0e ; '.'
0000000000016f32         db  0x28 ; '('
0000000000016f33         db  0x8c ; '.'
0000000000016f34         db  0x05 ; '.'
0000000000016f35         db  0x44 ; 'D'
0000000000016f36         db  0x0e ; '.'
0000000000016f37         db  0x30 ; '0'
0000000000016f38         db  0x86 ; '.'
0000000000016f39         db  0x06 ; '.'
0000000000016f3a         db  0x41 ; 'A'
0000000000016f3b         db  0x0e ; '.'
0000000000016f3c         db  0x38 ; '8'
0000000000016f3d         db  0x83 ; '.'
0000000000016f3e         db  0x07 ; '.'
0000000000016f3f         db  0x49 ; 'I'
0000000000016f40         db  0x0e ; '.'
0000000000016f41         db  0x70 ; 'p'
0000000000016f42         db  0x03 ; '.'
0000000000016f43         db  0x29 ; ')'
0000000000016f44         db  0x01 ; '.'
0000000000016f45         db  0x0a ; '.'
0000000000016f46         db  0x0e ; '.'
0000000000016f47         db  0x38 ; '8'
0000000000016f48         db  0x41 ; 'A'
0000000000016f49         db  0x0e ; '.'
0000000000016f4a         db  0x30 ; '0'
0000000000016f4b         db  0x41 ; 'A'
0000000000016f4c         db  0x0e ; '.'
0000000000016f4d         db  0x28 ; '('
0000000000016f4e         db  0x42 ; 'B'
0000000000016f4f         db  0x0e ; '.'
0000000000016f50         db  0x20 ; ' '
0000000000016f51         db  0x42 ; 'B'
0000000000016f52         db  0x0e ; '.'
0000000000016f53         db  0x18 ; '.'
0000000000016f54         db  0x42 ; 'B'
0000000000016f55         db  0x0e ; '.'
0000000000016f56         db  0x10 ; '.'
0000000000016f57         db  0x42 ; 'B'
0000000000016f58         db  0x0e ; '.'
0000000000016f59         db  0x08 ; '.'
0000000000016f5a         db  0x41 ; 'A'
0000000000016f5b         db  0x0b ; '.'
0000000000016f5c         dd         0x0000004c                                  ; Length of the record
0000000000016f60         dd         0x00001210                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000016f64         db         0xcc, 0x0f, 2 dup (0xff)                    ; begin 0x7f30
0000000000016f68         db         0xa8, 0x01, 2 dup (0x00)                    ; length 0x1a8 (end at 0x80d8)
0000000000016f6c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016f6d         db  0x5e ; '^'
0000000000016f6e         db  0x0e ; '.'
0000000000016f6f         db  0x10 ; '.'
0000000000016f70         db  0x8d ; '.'
0000000000016f71         db  0x02 ; '.'
0000000000016f72         db  0x42 ; 'B'
0000000000016f73         db  0x0e ; '.'
0000000000016f74         db  0x18 ; '.'
0000000000016f75         db  0x8c ; '.'
0000000000016f76         db  0x03 ; '.'
0000000000016f77         db  0x45 ; 'E'
0000000000016f78         db  0x0e ; '.'
0000000000016f79         db  0x20 ; ' '
0000000000016f7a         db  0x86 ; '.'
0000000000016f7b         db  0x04 ; '.'
0000000000016f7c         db  0x41 ; 'A'
0000000000016f7d         db  0x0e ; '.'
0000000000016f7e         db  0x28 ; '('
0000000000016f7f         db  0x83 ; '.'
0000000000016f80         db  0x05 ; '.'
0000000000016f81         db  0x4d ; 'M'
0000000000016f82         db  0x0e ; '.'
0000000000016f83         db  0x30 ; '0'
0000000000016f84         db  0x02 ; '.'
0000000000016f85         db  0x95 ; '.'
0000000000016f86         db  0x0e ; '.'
0000000000016f87         db  0x08 ; '.'
0000000000016f88         db  0xc3 ; '.'
0000000000016f89         db  0xc6 ; '.'
0000000000016f8a         db  0xcc ; '.'
0000000000016f8b         db  0xcd ; '.'
0000000000016f8c         db  0x48 ; 'H'
0000000000016f8d         db  0x0e ; '.'
0000000000016f8e         db  0x30 ; '0'
0000000000016f8f         db  0x83 ; '.'
0000000000016f90         db  0x05 ; '.'
0000000000016f91         db  0x86 ; '.'
0000000000016f92         db  0x04 ; '.'
0000000000016f93         db  0x8c ; '.'
0000000000016f94         db  0x03 ; '.'
0000000000016f95         db  0x8d ; '.'
0000000000016f96         db  0x02 ; '.'
0000000000016f97         db  0x02 ; '.'
0000000000016f98         db  0x90 ; '.'
0000000000016f99         db  0x0a ; '.'
0000000000016f9a         db  0x0e ; '.'
0000000000016f9b         db  0x28 ; '('
0000000000016f9c         db  0x41 ; 'A'
0000000000016f9d         db  0x0e ; '.'
0000000000016f9e         db  0x20 ; ' '
0000000000016f9f         db  0x41 ; 'A'
0000000000016fa0         db  0x0e ; '.'
0000000000016fa1         db  0x18 ; '.'
0000000000016fa2         db  0x42 ; 'B'
0000000000016fa3         db  0x0e ; '.'
0000000000016fa4         db  0x10 ; '.'
0000000000016fa5         db  0x42 ; 'B'
0000000000016fa6         db  0x0e ; '.'
0000000000016fa7         db  0x08 ; '.'
0000000000016fa8         db  0x4a ; 'J'
0000000000016fa9         db  0x0b ; '.'
0000000000016faa         db  0x00 ; '.'
0000000000016fab         db  0x00 ; '.'
0000000000016fac         dd         0x00000020                                  ; Length of the record
0000000000016fb0         dd         0x00001260                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000016fb4         db         0x2c, 0x11, 2 dup (0xff)                    ; begin 0x80e0
0000000000016fb8         db         0xe0, 3 dup (0x00)                          ; length 0xe0 (end at 0x81c0)
0000000000016fbc         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016fbd         db  0x41 ; 'A'
0000000000016fbe         db  0x0e ; '.'
0000000000016fbf         db  0x10 ; '.'
0000000000016fc0         db  0x83 ; '.'
0000000000016fc1         db  0x02 ; '.'
0000000000016fc2         db  0x47 ; 'G'
0000000000016fc3         db  0x0e ; '.'
0000000000016fc4         db  0x30 ; '0'
0000000000016fc5         db  0x02 ; '.'
0000000000016fc6         db  0x77 ; 'w'
0000000000016fc7         db  0x0a ; '.'
0000000000016fc8         db  0x0e ; '.'
0000000000016fc9         db  0x10 ; '.'
0000000000016fca         db  0x41 ; 'A'
0000000000016fcb         db  0x0e ; '.'
0000000000016fcc         db  0x08 ; '.'
0000000000016fcd         db  0x48 ; 'H'
0000000000016fce         db  0x0b ; '.'
0000000000016fcf         db  0x00 ; '.'
0000000000016fd0         dd         0x00000040                                  ; Length of the record
0000000000016fd4         dd         0x00001284                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000016fd8         db         0xe8, 0x11, 2 dup (0xff)                    ; begin 0x81c0
0000000000016fdc         db         0xd1, 3 dup (0x00)                          ; length 0xd1 (end at 0x8291)
0000000000016fe0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000016fe1         db  0x42 ; 'B'
0000000000016fe2         db  0x0e ; '.'
0000000000016fe3         db  0x10 ; '.'
0000000000016fe4         db  0x8e ; '.'
0000000000016fe5         db  0x02 ; '.'
0000000000016fe6         db  0x42 ; 'B'
0000000000016fe7         db  0x0e ; '.'
0000000000016fe8         db  0x18 ; '.'
0000000000016fe9         db  0x8d ; '.'
0000000000016fea         db  0x03 ; '.'
0000000000016feb         db  0x46 ; 'F'
0000000000016fec         db  0x0e ; '.'
0000000000016fed         db  0x20 ; ' '
0000000000016fee         db  0x8c ; '.'
0000000000016fef         db  0x04 ; '.'
0000000000016ff0         db  0x41 ; 'A'
0000000000016ff1         db  0x0e ; '.'
0000000000016ff2         db  0x28 ; '('
0000000000016ff3         db  0x86 ; '.'
0000000000016ff4         db  0x05 ; '.'
0000000000016ff5         db  0x48 ; 'H'
0000000000016ff6         db  0x0e ; '.'
0000000000016ff7         db  0x30 ; '0'
0000000000016ff8         db  0x83 ; '.'
0000000000016ff9         db  0x06 ; '.'
0000000000016ffa         db  0x47 ; 'G'
0000000000016ffb         db  0x0e ; '.'
0000000000016ffc         db  0x40 ; '@'
0000000000016ffd         db  0x02 ; '.'
0000000000016ffe         db  0x96 ; '.'
0000000000016fff         db  0x0a ; '.'
0000000000017000         db  0x0e ; '.'
0000000000017001         db  0x30 ; '0'
0000000000017002         db  0x41 ; 'A'
0000000000017003         db  0x0e ; '.'
0000000000017004         db  0x28 ; '('
0000000000017005         db  0x41 ; 'A'
0000000000017006         db  0x0e ; '.'
0000000000017007         db  0x20 ; ' '
0000000000017008         db  0x42 ; 'B'
0000000000017009         db  0x0e ; '.'
000000000001700a         db  0x18 ; '.'
000000000001700b         db  0x42 ; 'B'
000000000001700c         db  0x0e ; '.'
000000000001700d         db  0x10 ; '.'
000000000001700e         db  0x42 ; 'B'
000000000001700f         db  0x0e ; '.'
0000000000017010         db  0x08 ; '.'
0000000000017011         db  0x48 ; 'H'
0000000000017012         db  0x0b ; '.'
0000000000017013         db  0x00 ; '.'
0000000000017014         dd         0x0000004c                                  ; Length of the record
0000000000017018         dd         0x000012c8                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
000000000001701c         db         0x84, 0x12, 2 dup (0xff)                    ; begin 0x82a0
0000000000017020         db         0x37, 0x02, 2 dup (0x00)                    ; length 0x237 (end at 0x84d7)
0000000000017024         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017025         db  0x42 ; 'B'
0000000000017026         db  0x0e ; '.'
0000000000017027         db  0x10 ; '.'
0000000000017028         db  0x8f ; '.'
0000000000017029         db  0x02 ; '.'
000000000001702a         db  0x42 ; 'B'
000000000001702b         db  0x0e ; '.'
000000000001702c         db  0x18 ; '.'
000000000001702d         db  0x8e ; '.'
000000000001702e         db  0x03 ; '.'
000000000001702f         db  0x42 ; 'B'
0000000000017030         db  0x0e ; '.'
0000000000017031         db  0x20 ; ' '
0000000000017032         db  0x8d ; '.'
0000000000017033         db  0x04 ; '.'
0000000000017034         db  0x42 ; 'B'
0000000000017035         db  0x0e ; '.'
0000000000017036         db  0x28 ; '('
0000000000017037         db  0x8c ; '.'
0000000000017038         db  0x05 ; '.'
0000000000017039         db  0x44 ; 'D'
000000000001703a         db  0x0e ; '.'
000000000001703b         db  0x30 ; '0'
000000000001703c         db  0x86 ; '.'
000000000001703d         db  0x06 ; '.'
000000000001703e         db  0x41 ; 'A'
000000000001703f         db  0x0e ; '.'
0000000000017040         db  0x38 ; '8'
0000000000017041         db  0x83 ; '.'
0000000000017042         db  0x07 ; '.'
0000000000017043         db  0x44 ; 'D'
0000000000017044         db  0x0e ; '.'
0000000000017045         db  0x80 ; '.'
0000000000017046         db  0x01 ; '.'
0000000000017047         db  0x03 ; '.'
0000000000017048         db  0x87 ; '.'
0000000000017049         db  0x01 ; '.'
000000000001704a         db  0x0a ; '.'
000000000001704b         db  0x0e ; '.'
000000000001704c         db  0x38 ; '8'
000000000001704d         db  0x41 ; 'A'
000000000001704e         db  0x0e ; '.'
000000000001704f         db  0x30 ; '0'
0000000000017050         db  0x41 ; 'A'
0000000000017051         db  0x0e ; '.'
0000000000017052         db  0x28 ; '('
0000000000017053         db  0x42 ; 'B'
0000000000017054         db  0x0e ; '.'
0000000000017055         db  0x20 ; ' '
0000000000017056         db  0x42 ; 'B'
0000000000017057         db  0x0e ; '.'
0000000000017058         db  0x18 ; '.'
0000000000017059         db  0x42 ; 'B'
000000000001705a         db  0x0e ; '.'
000000000001705b         db  0x10 ; '.'
000000000001705c         db  0x42 ; 'B'
000000000001705d         db  0x0e ; '.'
000000000001705e         db  0x08 ; '.'
000000000001705f         db  0x46 ; 'F'
0000000000017060         db  0x0b ; '.'
0000000000017061         db  0x00 ; '.'
0000000000017062         db  0x00 ; '.'
0000000000017063         db  0x00 ; '.'
0000000000017064         dd         0x00000028                                  ; Length of the record
0000000000017068         dd         0x00001318                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
000000000001706c         db         0x74, 0x14, 2 dup (0xff)                    ; begin 0x84e0
0000000000017070         db         0xa0, 3 dup (0x00)                          ; length 0xa0 (end at 0x8580)
0000000000017074         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017075         db  0x41 ; 'A'
0000000000017076         db  0x0e ; '.'
0000000000017077         db  0x10 ; '.'
0000000000017078         db  0x86 ; '.'
0000000000017079         db  0x02 ; '.'
000000000001707a         db  0x41 ; 'A'
000000000001707b         db  0x0e ; '.'
000000000001707c         db  0x18 ; '.'
000000000001707d         db  0x83 ; '.'
000000000001707e         db  0x03 ; '.'
000000000001707f         db  0x4a ; 'J'
0000000000017080         db  0x0e ; '.'
0000000000017081         db  0x30 ; '0'
0000000000017082         db  0x02 ; '.'
0000000000017083         db  0x4e ; 'N'
0000000000017084         db  0x0a ; '.'
0000000000017085         db  0x0e ; '.'
0000000000017086         db  0x18 ; '.'
0000000000017087         db  0x41 ; 'A'
0000000000017088         db  0x0e ; '.'
0000000000017089         db  0x10 ; '.'
000000000001708a         db  0x41 ; 'A'
000000000001708b         db  0x0e ; '.'
000000000001708c         db  0x08 ; '.'
000000000001708d         db  0x44 ; 'D'
000000000001708e         db  0x0b ; '.'
000000000001708f         db  0x00 ; '.'
0000000000017090         dd         0x00000038                                  ; Length of the record
0000000000017094         dd         0x00001344                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000017098         db         0xe8, 0x14, 2 dup (0xff)                    ; begin 0x8580
000000000001709c         db         0x86, 3 dup (0x00)                          ; length 0x86 (end at 0x8606)
00000000000170a0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000170a1         db  0x42 ; 'B'
00000000000170a2         db  0x0e ; '.'
00000000000170a3         db  0x10 ; '.'
00000000000170a4         db  0x8c ; '.'
00000000000170a5         db  0x02 ; '.'
00000000000170a6         db  0x41 ; 'A'
00000000000170a7         db  0x0e ; '.'
00000000000170a8         db  0x18 ; '.'
00000000000170a9         db  0x86 ; '.'
00000000000170aa         db  0x03 ; '.'
00000000000170ab         db  0x41 ; 'A'
00000000000170ac         db  0x0e ; '.'
00000000000170ad         db  0x20 ; ' '
00000000000170ae         db  0x83 ; '.'
00000000000170af         db  0x04 ; '.'
00000000000170b0         db  0x02 ; '.'
00000000000170b1         db  0x47 ; 'G'
00000000000170b2         db  0x0a ; '.'
00000000000170b3         db  0x0e ; '.'
00000000000170b4         db  0x18 ; '.'
00000000000170b5         db  0x41 ; 'A'
00000000000170b6         db  0x0e ; '.'
00000000000170b7         db  0x10 ; '.'
00000000000170b8         db  0x42 ; 'B'
00000000000170b9         db  0x0e ; '.'
00000000000170ba         db  0x08 ; '.'
00000000000170bb         db  0x42 ; 'B'
00000000000170bc         db  0x0b ; '.'
00000000000170bd         db  0x52 ; 'R'
00000000000170be         db  0x0a ; '.'
00000000000170bf         db  0x0e ; '.'
00000000000170c0         db  0x18 ; '.'
00000000000170c1         db  0x41 ; 'A'
00000000000170c2         db  0x0e ; '.'
00000000000170c3         db  0x10 ; '.'
00000000000170c4         db  0x42 ; 'B'
00000000000170c5         db  0x0e ; '.'
00000000000170c6         db  0x08 ; '.'
00000000000170c7         db  0x4b ; 'K'
00000000000170c8         db  0x0b ; '.'
00000000000170c9         db  0x00 ; '.'
00000000000170ca         db  0x00 ; '.'
00000000000170cb         db  0x00 ; '.'
00000000000170cc         dd         0x00000060                                  ; Length of the record
00000000000170d0         dd         0x00001380                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
00000000000170d4         db         0x3c, 0x15, 2 dup (0xff)                    ; begin 0x8610
00000000000170d8         db         0x52, 0x01, 2 dup (0x00)                    ; length 0x152 (end at 0x8762)
00000000000170dc         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000170dd         db  0x45 ; 'E'
00000000000170de         db  0x0e ; '.'
00000000000170df         db  0x10 ; '.'
00000000000170e0         db  0x8e ; '.'
00000000000170e1         db  0x02 ; '.'
00000000000170e2         db  0x42 ; 'B'
00000000000170e3         db  0x0e ; '.'
00000000000170e4         db  0x18 ; '.'
00000000000170e5         db  0x8d ; '.'
00000000000170e6         db  0x03 ; '.'
00000000000170e7         db  0x42 ; 'B'
00000000000170e8         db  0x0e ; '.'
00000000000170e9         db  0x20 ; ' '
00000000000170ea         db  0x8c ; '.'
00000000000170eb         db  0x04 ; '.'
00000000000170ec         db  0x41 ; 'A'
00000000000170ed         db  0x0e ; '.'
00000000000170ee         db  0x28 ; '('
00000000000170ef         db  0x86 ; '.'
00000000000170f0         db  0x05 ; '.'
00000000000170f1         db  0x41 ; 'A'
00000000000170f2         db  0x0e ; '.'
00000000000170f3         db  0x30 ; '0'
00000000000170f4         db  0x83 ; '.'
00000000000170f5         db  0x06 ; '.'
00000000000170f6         db  0x02 ; '.'
00000000000170f7         db  0xc8 ; '.'
00000000000170f8         db  0x0a ; '.'
00000000000170f9         db  0x0e ; '.'
00000000000170fa         db  0x28 ; '('
00000000000170fb         db  0x41 ; 'A'
00000000000170fc         db  0x0e ; '.'
00000000000170fd         db  0x20 ; ' '
00000000000170fe         db  0x42 ; 'B'
00000000000170ff         db  0x0e ; '.'
0000000000017100         db  0x18 ; '.'
0000000000017101         db  0x42 ; 'B'
0000000000017102         db  0x0e ; '.'
0000000000017103         db  0x10 ; '.'
0000000000017104         db  0x42 ; 'B'
0000000000017105         db  0x0e ; '.'
0000000000017106         db  0x08 ; '.'
0000000000017107         db  0x46 ; 'F'
0000000000017108         db  0x0b ; '.'
0000000000017109         db  0x44 ; 'D'
000000000001710a         db  0x0a ; '.'
000000000001710b         db  0x0e ; '.'
000000000001710c         db  0x28 ; '('
000000000001710d         db  0x41 ; 'A'
000000000001710e         db  0x0e ; '.'
000000000001710f         db  0x20 ; ' '
0000000000017110         db  0x42 ; 'B'
0000000000017111         db  0x0e ; '.'
0000000000017112         db  0x18 ; '.'
0000000000017113         db  0x42 ; 'B'
0000000000017114         db  0x0e ; '.'
0000000000017115         db  0x10 ; '.'
0000000000017116         db  0x42 ; 'B'
0000000000017117         db  0x0e ; '.'
0000000000017118         db  0x08 ; '.'
0000000000017119         db  0x45 ; 'E'
000000000001711a         db  0x0b ; '.'
000000000001711b         db  0x4d ; 'M'
000000000001711c         db  0x0a ; '.'
000000000001711d         db  0x0e ; '.'
000000000001711e         db  0x28 ; '('
000000000001711f         db  0x41 ; 'A'
0000000000017120         db  0x0e ; '.'
0000000000017121         db  0x20 ; ' '
0000000000017122         db  0x42 ; 'B'
0000000000017123         db  0x0e ; '.'
0000000000017124         db  0x18 ; '.'
0000000000017125         db  0x42 ; 'B'
0000000000017126         db  0x0e ; '.'
0000000000017127         db  0x10 ; '.'
0000000000017128         db  0x42 ; 'B'
0000000000017129         db  0x0e ; '.'
000000000001712a         db  0x08 ; '.'
000000000001712b         db  0x44 ; 'D'
000000000001712c         db  0x0b ; '.'
000000000001712d         db  0x00 ; '.'
000000000001712e         db  0x00 ; '.'
000000000001712f         db  0x00 ; '.'
0000000000017130         dd         0x00000048                                  ; Length of the record
0000000000017134         dd         0x000013e4                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000017138         db         0x38, 0x16, 2 dup (0xff)                    ; begin 0x8770
000000000001713c         db         0xba, 0x02, 2 dup (0x00)                    ; length 0x2ba (end at 0x8a2a)
0000000000017140         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017141         db  0x42 ; 'B'
0000000000017142         db  0x0e ; '.'
0000000000017143         db  0x10 ; '.'
0000000000017144         db  0x8f ; '.'
0000000000017145         db  0x02 ; '.'
0000000000017146         db  0x42 ; 'B'
0000000000017147         db  0x0e ; '.'
0000000000017148         db  0x18 ; '.'
0000000000017149         db  0x8e ; '.'
000000000001714a         db  0x03 ; '.'
000000000001714b         db  0x42 ; 'B'
000000000001714c         db  0x0e ; '.'
000000000001714d         db  0x20 ; ' '
000000000001714e         db  0x8d ; '.'
000000000001714f         db  0x04 ; '.'
0000000000017150         db  0x42 ; 'B'
0000000000017151         db  0x0e ; '.'
0000000000017152         db  0x28 ; '('
0000000000017153         db  0x8c ; '.'
0000000000017154         db  0x05 ; '.'
0000000000017155         db  0x41 ; 'A'
0000000000017156         db  0x0e ; '.'
0000000000017157         db  0x30 ; '0'
0000000000017158         db  0x86 ; '.'
0000000000017159         db  0x06 ; '.'
000000000001715a         db  0x41 ; 'A'
000000000001715b         db  0x0e ; '.'
000000000001715c         db  0x38 ; '8'
000000000001715d         db  0x83 ; '.'
000000000001715e         db  0x07 ; '.'
000000000001715f         db  0x44 ; 'D'
0000000000017160         db  0x0e ; '.'
0000000000017161         db  0x60 ; '`'
0000000000017162         db  0x02 ; '.'
0000000000017163         db  0xa2 ; '.'
0000000000017164         db  0x0a ; '.'
0000000000017165         db  0x0e ; '.'
0000000000017166         db  0x38 ; '8'
0000000000017167         db  0x44 ; 'D'
0000000000017168         db  0x0e ; '.'
0000000000017169         db  0x30 ; '0'
000000000001716a         db  0x41 ; 'A'
000000000001716b         db  0x0e ; '.'
000000000001716c         db  0x28 ; '('
000000000001716d         db  0x42 ; 'B'
000000000001716e         db  0x0e ; '.'
000000000001716f         db  0x20 ; ' '
0000000000017170         db  0x42 ; 'B'
0000000000017171         db  0x0e ; '.'
0000000000017172         db  0x18 ; '.'
0000000000017173         db  0x42 ; 'B'
0000000000017174         db  0x0e ; '.'
0000000000017175         db  0x10 ; '.'
0000000000017176         db  0x42 ; 'B'
0000000000017177         db  0x0e ; '.'
0000000000017178         db  0x08 ; '.'
0000000000017179         db  0x43 ; 'C'
000000000001717a         db  0x0b ; '.'
000000000001717b         db  0x00 ; '.'
000000000001717c         dd         0x00000048                                  ; Length of the record
0000000000017180         dd         0x00001430                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000017184         db         0xac, 0x18, 2 dup (0xff)                    ; begin 0x8a30
0000000000017188         db         0xfa, 0x01, 2 dup (0x00)                    ; length 0x1fa (end at 0x8c2a)
000000000001718c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001718d         db  0x42 ; 'B'
000000000001718e         db  0x0e ; '.'
000000000001718f         db  0x10 ; '.'
0000000000017190         db  0x8f ; '.'
0000000000017191         db  0x02 ; '.'
0000000000017192         db  0x42 ; 'B'
0000000000017193         db  0x0e ; '.'
0000000000017194         db  0x18 ; '.'
0000000000017195         db  0x8e ; '.'
0000000000017196         db  0x03 ; '.'
0000000000017197         db  0x42 ; 'B'
0000000000017198         db  0x0e ; '.'
0000000000017199         db  0x20 ; ' '
000000000001719a         db  0x8d ; '.'
000000000001719b         db  0x04 ; '.'
000000000001719c         db  0x42 ; 'B'
000000000001719d         db  0x0e ; '.'
000000000001719e         db  0x28 ; '('
000000000001719f         db  0x8c ; '.'
00000000000171a0         db  0x05 ; '.'
00000000000171a1         db  0x41 ; 'A'
00000000000171a2         db  0x0e ; '.'
00000000000171a3         db  0x30 ; '0'
00000000000171a4         db  0x86 ; '.'
00000000000171a5         db  0x06 ; '.'
00000000000171a6         db  0x41 ; 'A'
00000000000171a7         db  0x0e ; '.'
00000000000171a8         db  0x38 ; '8'
00000000000171a9         db  0x83 ; '.'
00000000000171aa         db  0x07 ; '.'
00000000000171ab         db  0x44 ; 'D'
00000000000171ac         db  0x0e ; '.'
00000000000171ad         db  0x40 ; '@'
00000000000171ae         db  0x03 ; '.'
00000000000171af         db  0x85 ; '.'
00000000000171b0         db  0x01 ; '.'
00000000000171b1         db  0x0a ; '.'
00000000000171b2         db  0x0e ; '.'
00000000000171b3         db  0x38 ; '8'
00000000000171b4         db  0x44 ; 'D'
00000000000171b5         db  0x0e ; '.'
00000000000171b6         db  0x30 ; '0'
00000000000171b7         db  0x41 ; 'A'
00000000000171b8         db  0x0e ; '.'
00000000000171b9         db  0x28 ; '('
00000000000171ba         db  0x42 ; 'B'
00000000000171bb         db  0x0e ; '.'
00000000000171bc         db  0x20 ; ' '
00000000000171bd         db  0x42 ; 'B'
00000000000171be         db  0x0e ; '.'
00000000000171bf         db  0x18 ; '.'
00000000000171c0         db  0x42 ; 'B'
00000000000171c1         db  0x0e ; '.'
00000000000171c2         db  0x10 ; '.'
00000000000171c3         db  0x42 ; 'B'
00000000000171c4         db  0x0e ; '.'
00000000000171c5         db  0x08 ; '.'
00000000000171c6         db  0x48 ; 'H'
00000000000171c7         db  0x0b ; '.'
00000000000171c8         dd         0x00000048                                  ; Length of the record
00000000000171cc         dd         0x0000147c                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
00000000000171d0         db         0x60, 0x1a, 2 dup (0xff)                    ; begin 0x8c30
00000000000171d4         db         0xdc, 3 dup (0x00)                          ; length 0xdc (end at 0x8d0c)
00000000000171d8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000171d9         db  0x42 ; 'B'
00000000000171da         db  0x0e ; '.'
00000000000171db         db  0x10 ; '.'
00000000000171dc         db  0x8f ; '.'
00000000000171dd         db  0x02 ; '.'
00000000000171de         db  0x42 ; 'B'
00000000000171df         db  0x0e ; '.'
00000000000171e0         db  0x18 ; '.'
00000000000171e1         db  0x8e ; '.'
00000000000171e2         db  0x03 ; '.'
00000000000171e3         db  0x42 ; 'B'
00000000000171e4         db  0x0e ; '.'
00000000000171e5         db  0x20 ; ' '
00000000000171e6         db  0x8d ; '.'
00000000000171e7         db  0x04 ; '.'
00000000000171e8         db  0x42 ; 'B'
00000000000171e9         db  0x0e ; '.'
00000000000171ea         db  0x28 ; '('
00000000000171eb         db  0x8c ; '.'
00000000000171ec         db  0x05 ; '.'
00000000000171ed         db  0x41 ; 'A'
00000000000171ee         db  0x0e ; '.'
00000000000171ef         db  0x30 ; '0'
00000000000171f0         db  0x86 ; '.'
00000000000171f1         db  0x06 ; '.'
00000000000171f2         db  0x41 ; 'A'
00000000000171f3         db  0x0e ; '.'
00000000000171f4         db  0x38 ; '8'
00000000000171f5         db  0x83 ; '.'
00000000000171f6         db  0x07 ; '.'
00000000000171f7         db  0x44 ; 'D'
00000000000171f8         db  0x0e ; '.'
00000000000171f9         db  0x80 ; '.'
00000000000171fa         db  0x01 ; '.'
00000000000171fb         db  0x02 ; '.'
00000000000171fc         db  0xbe ; '.'
00000000000171fd         db  0x0a ; '.'
00000000000171fe         db  0x0e ; '.'
00000000000171ff         db  0x38 ; '8'
0000000000017200         db  0x41 ; 'A'
0000000000017201         db  0x0e ; '.'
0000000000017202         db  0x30 ; '0'
0000000000017203         db  0x41 ; 'A'
0000000000017204         db  0x0e ; '.'
0000000000017205         db  0x28 ; '('
0000000000017206         db  0x42 ; 'B'
0000000000017207         db  0x0e ; '.'
0000000000017208         db  0x20 ; ' '
0000000000017209         db  0x42 ; 'B'
000000000001720a         db  0x0e ; '.'
000000000001720b         db  0x18 ; '.'
000000000001720c         db  0x42 ; 'B'
000000000001720d         db  0x0e ; '.'
000000000001720e         db  0x10 ; '.'
000000000001720f         db  0x42 ; 'B'
0000000000017210         db  0x0e ; '.'
0000000000017211         db  0x08 ; '.'
0000000000017212         db  0x41 ; 'A'
0000000000017213         db  0x0b ; '.'
0000000000017214         dd         0x00000048                                  ; Length of the record
0000000000017218         dd         0x000014c8                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
000000000001721c         db         0xf4, 0x1a, 2 dup (0xff)                    ; begin 0x8d10
0000000000017220         db         0x9e, 0x03, 2 dup (0x00)                    ; length 0x39e (end at 0x90ae)
0000000000017224         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017225         db  0x42 ; 'B'
0000000000017226         db  0x0e ; '.'
0000000000017227         db  0x10 ; '.'
0000000000017228         db  0x8f ; '.'
0000000000017229         db  0x02 ; '.'
000000000001722a         db  0x42 ; 'B'
000000000001722b         db  0x0e ; '.'
000000000001722c         db  0x18 ; '.'
000000000001722d         db  0x8e ; '.'
000000000001722e         db  0x03 ; '.'
000000000001722f         db  0x42 ; 'B'
0000000000017230         db  0x0e ; '.'
0000000000017231         db  0x20 ; ' '
0000000000017232         db  0x8d ; '.'
0000000000017233         db  0x04 ; '.'
0000000000017234         db  0x42 ; 'B'
0000000000017235         db  0x0e ; '.'
0000000000017236         db  0x28 ; '('
0000000000017237         db  0x8c ; '.'
0000000000017238         db  0x05 ; '.'
0000000000017239         db  0x44 ; 'D'
000000000001723a         db  0x0e ; '.'
000000000001723b         db  0x30 ; '0'
000000000001723c         db  0x86 ; '.'
000000000001723d         db  0x06 ; '.'
000000000001723e         db  0x41 ; 'A'
000000000001723f         db  0x0e ; '.'
0000000000017240         db  0x38 ; '8'
0000000000017241         db  0x83 ; '.'
0000000000017242         db  0x07 ; '.'
0000000000017243         db  0x4c ; 'L'
0000000000017244         db  0x0e ; '.'
0000000000017245         db  0xb0 ; '.'
0000000000017246         db  0x01 ; '.'
0000000000017247         db  0x02 ; '.'
0000000000017248         db  0xbe ; '.'
0000000000017249         db  0x0a ; '.'
000000000001724a         db  0x0e ; '.'
000000000001724b         db  0x38 ; '8'
000000000001724c         db  0x41 ; 'A'
000000000001724d         db  0x0e ; '.'
000000000001724e         db  0x30 ; '0'
000000000001724f         db  0x41 ; 'A'
0000000000017250         db  0x0e ; '.'
0000000000017251         db  0x28 ; '('
0000000000017252         db  0x42 ; 'B'
0000000000017253         db  0x0e ; '.'
0000000000017254         db  0x20 ; ' '
0000000000017255         db  0x42 ; 'B'
0000000000017256         db  0x0e ; '.'
0000000000017257         db  0x18 ; '.'
0000000000017258         db  0x42 ; 'B'
0000000000017259         db  0x0e ; '.'
000000000001725a         db  0x10 ; '.'
000000000001725b         db  0x42 ; 'B'
000000000001725c         db  0x0e ; '.'
000000000001725d         db  0x08 ; '.'
000000000001725e         db  0x47 ; 'G'
000000000001725f         db  0x0b ; '.'
0000000000017260         dd         0x00000048                                  ; Length of the record
0000000000017264         dd         0x00001514                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000017268         db         0x48, 0x1e, 2 dup (0xff)                    ; begin 0x90b0
000000000001726c         db         0x41, 0x01, 2 dup (0x00)                    ; length 0x141 (end at 0x91f1)
0000000000017270         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017271         db  0x42 ; 'B'
0000000000017272         db  0x0e ; '.'
0000000000017273         db  0x10 ; '.'
0000000000017274         db  0x8f ; '.'
0000000000017275         db  0x02 ; '.'
0000000000017276         db  0x42 ; 'B'
0000000000017277         db  0x0e ; '.'
0000000000017278         db  0x18 ; '.'
0000000000017279         db  0x8e ; '.'
000000000001727a         db  0x03 ; '.'
000000000001727b         db  0x42 ; 'B'
000000000001727c         db  0x0e ; '.'
000000000001727d         db  0x20 ; ' '
000000000001727e         db  0x8d ; '.'
000000000001727f         db  0x04 ; '.'
0000000000017280         db  0x42 ; 'B'
0000000000017281         db  0x0e ; '.'
0000000000017282         db  0x28 ; '('
0000000000017283         db  0x8c ; '.'
0000000000017284         db  0x05 ; '.'
0000000000017285         db  0x41 ; 'A'
0000000000017286         db  0x0e ; '.'
0000000000017287         db  0x30 ; '0'
0000000000017288         db  0x86 ; '.'
0000000000017289         db  0x06 ; '.'
000000000001728a         db  0x41 ; 'A'
000000000001728b         db  0x0e ; '.'
000000000001728c         db  0x38 ; '8'
000000000001728d         db  0x83 ; '.'
000000000001728e         db  0x07 ; '.'
000000000001728f         db  0x44 ; 'D'
0000000000017290         db  0x0e ; '.'
0000000000017291         db  0x60 ; '`'
0000000000017292         db  0x02 ; '.'
0000000000017293         db  0xd8 ; '.'
0000000000017294         db  0x0a ; '.'
0000000000017295         db  0x0e ; '.'
0000000000017296         db  0x38 ; '8'
0000000000017297         db  0x41 ; 'A'
0000000000017298         db  0x0e ; '.'
0000000000017299         db  0x30 ; '0'
000000000001729a         db  0x41 ; 'A'
000000000001729b         db  0x0e ; '.'
000000000001729c         db  0x28 ; '('
000000000001729d         db  0x42 ; 'B'
000000000001729e         db  0x0e ; '.'
000000000001729f         db  0x20 ; ' '
00000000000172a0         db  0x42 ; 'B'
00000000000172a1         db  0x0e ; '.'
00000000000172a2         db  0x18 ; '.'
00000000000172a3         db  0x42 ; 'B'
00000000000172a4         db  0x0e ; '.'
00000000000172a5         db  0x10 ; '.'
00000000000172a6         db  0x42 ; 'B'
00000000000172a7         db  0x0e ; '.'
00000000000172a8         db  0x08 ; '.'
00000000000172a9         db  0x41 ; 'A'
00000000000172aa         db  0x0b ; '.'
00000000000172ab         db  0x00 ; '.'
00000000000172ac         dd         0x00000040                                  ; Length of the record
00000000000172b0         dd         0x00001560                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
00000000000172b4         db         0x4c, 0x1f, 2 dup (0xff)                    ; begin 0x9200
00000000000172b8         db         0xe6, 3 dup (0x00)                          ; length 0xe6 (end at 0x92e6)
00000000000172bc         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000172bd         db  0x41 ; 'A'
00000000000172be         db  0x0e ; '.'
00000000000172bf         db  0x10 ; '.'
00000000000172c0         db  0x86 ; '.'
00000000000172c1         db  0x02 ; '.'
00000000000172c2         db  0x41 ; 'A'
00000000000172c3         db  0x0e ; '.'
00000000000172c4         db  0x18 ; '.'
00000000000172c5         db  0x83 ; '.'
00000000000172c6         db  0x03 ; '.'
00000000000172c7         db  0x47 ; 'G'
00000000000172c8         db  0x0e ; '.'
00000000000172c9         db  0x20 ; ' '
00000000000172ca         db  0x02 ; '.'
00000000000172cb         db  0x4d ; 'M'
00000000000172cc         db  0x0a ; '.'
00000000000172cd         db  0x0e ; '.'
00000000000172ce         db  0x18 ; '.'
00000000000172cf         db  0x41 ; 'A'
00000000000172d0         db  0x0e ; '.'
00000000000172d1         db  0x10 ; '.'
00000000000172d2         db  0x41 ; 'A'
00000000000172d3         db  0x0e ; '.'
00000000000172d4         db  0x08 ; '.'
00000000000172d5         db  0x48 ; 'H'
00000000000172d6         db  0x0b ; '.'
00000000000172d7         db  0x47 ; 'G'
00000000000172d8         db  0x0a ; '.'
00000000000172d9         db  0x0e ; '.'
00000000000172da         db  0x18 ; '.'
00000000000172db         db  0x41 ; 'A'
00000000000172dc         db  0x0e ; '.'
00000000000172dd         db  0x10 ; '.'
00000000000172de         db  0x41 ; 'A'
00000000000172df         db  0x0e ; '.'
00000000000172e0         db  0x08 ; '.'
00000000000172e1         db  0x47 ; 'G'
00000000000172e2         db  0x0b ; '.'
00000000000172e3         db  0x7c ; '|'
00000000000172e4         db  0x0a ; '.'
00000000000172e5         db  0x0e ; '.'
00000000000172e6         db  0x18 ; '.'
00000000000172e7         db  0x43 ; 'C'
00000000000172e8         db  0x0e ; '.'
00000000000172e9         db  0x10 ; '.'
00000000000172ea         db  0x41 ; 'A'
00000000000172eb         db  0x0e ; '.'
00000000000172ec         db  0x08 ; '.'
00000000000172ed         db  0x48 ; 'H'
00000000000172ee         db  0x0b ; '.'
00000000000172ef         db  0x00 ; '.'
00000000000172f0         dd         0x00000024                                  ; Length of the record
00000000000172f4         dd         0x000015a4                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
00000000000172f8         db         0xf8, 0x1f, 2 dup (0xff)                    ; begin 0x92f0
00000000000172fc         db         0x10, 0x01, 2 dup (0x00)                    ; length 0x110 (end at 0x9400)
0000000000017300         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017301         db  0x02 ; '.'
0000000000017302         db  0x51 ; 'Q'
0000000000017303         db  0x0e ; '.'
0000000000017304         db  0x10 ; '.'
0000000000017305         db  0x83 ; '.'
0000000000017306         db  0x02 ; '.'
0000000000017307         db  0x02 ; '.'
0000000000017308         db  0x5c ; '\'
0000000000017309         db  0x0e ; '.'
000000000001730a         db  0x08 ; '.'
000000000001730b         db  0x43 ; 'C'
000000000001730c         db  0xc3 ; '.'
000000000001730d         db  0x78 ; 'x'
000000000001730e         db  0x0e ; '.'
000000000001730f         db  0x10 ; '.'
0000000000017310         db  0x83 ; '.'
0000000000017311         db  0x02 ; '.'
0000000000017312         db  0x4c ; 'L'
0000000000017313         db  0x0e ; '.'
0000000000017314         db  0x08 ; '.'
0000000000017315         db  0x44 ; 'D'
0000000000017316         db  0xc3 ; '.'
0000000000017317         db  0x00 ; '.'
0000000000017318         dd         0x00000034                                  ; Length of the record
000000000001731c         dd         0x000015cc                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000017320         db         0xe0, 0x20, 2 dup (0xff)                    ; begin 0x9400
0000000000017324         db         0xcf, 3 dup (0x00)                          ; length 0xcf (end at 0x94cf)
0000000000017328         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017329         db  0x42 ; 'B'
000000000001732a         db  0x0e ; '.'
000000000001732b         db  0x10 ; '.'
000000000001732c         db  0x8c ; '.'
000000000001732d         db  0x02 ; '.'
000000000001732e         db  0x44 ; 'D'
000000000001732f         db  0x0e ; '.'
0000000000017330         db  0x18 ; '.'
0000000000017331         db  0x86 ; '.'
0000000000017332         db  0x03 ; '.'
0000000000017333         db  0x41 ; 'A'
0000000000017334         db  0x0e ; '.'
0000000000017335         db  0x20 ; ' '
0000000000017336         db  0x83 ; '.'
0000000000017337         db  0x04 ; '.'
0000000000017338         db  0x02 ; '.'
0000000000017339         db  0x9f ; '.'
000000000001733a         db  0x0a ; '.'
000000000001733b         db  0x0e ; '.'
000000000001733c         db  0x18 ; '.'
000000000001733d         db  0x41 ; 'A'
000000000001733e         db  0x0e ; '.'
000000000001733f         db  0x10 ; '.'
0000000000017340         db  0x42 ; 'B'
0000000000017341         db  0x0e ; '.'
0000000000017342         db  0x08 ; '.'
0000000000017343         db  0x47 ; 'G'
0000000000017344         db  0x0b ; '.'
0000000000017345         db  0x59 ; 'Y'
0000000000017346         db  0x0e ; '.'
0000000000017347         db  0x18 ; '.'
0000000000017348         db  0x43 ; 'C'
0000000000017349         db  0x0e ; '.'
000000000001734a         db  0x10 ; '.'
000000000001734b         db  0x42 ; 'B'
000000000001734c         db  0x0e ; '.'
000000000001734d         db  0x08 ; '.'
000000000001734e         db  0x00 ; '.'
000000000001734f         db  0x00 ; '.'
0000000000017350         dd         0x0000004c                                  ; Length of the record
0000000000017354         dd         0x00001604                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000017358         db         0x78, 0x21, 2 dup (0xff)                    ; begin 0x94d0
000000000001735c         db         0x9f, 0x07, 2 dup (0x00)                    ; length 0x79f (end at 0x9c6f)
0000000000017360         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017361         db  0x42 ; 'B'
0000000000017362         db  0x0e ; '.'
0000000000017363         db  0x10 ; '.'
0000000000017364         db  0x8f ; '.'
0000000000017365         db  0x02 ; '.'
0000000000017366         db  0x42 ; 'B'
0000000000017367         db  0x0e ; '.'
0000000000017368         db  0x18 ; '.'
0000000000017369         db  0x8e ; '.'
000000000001736a         db  0x03 ; '.'
000000000001736b         db  0x45 ; 'E'
000000000001736c         db  0x0e ; '.'
000000000001736d         db  0x20 ; ' '
000000000001736e         db  0x8d ; '.'
000000000001736f         db  0x04 ; '.'
0000000000017370         db  0x42 ; 'B'
0000000000017371         db  0x0e ; '.'
0000000000017372         db  0x28 ; '('
0000000000017373         db  0x8c ; '.'
0000000000017374         db  0x05 ; '.'
0000000000017375         db  0x44 ; 'D'
0000000000017376         db  0x0e ; '.'
0000000000017377         db  0x30 ; '0'
0000000000017378         db  0x86 ; '.'
0000000000017379         db  0x06 ; '.'
000000000001737a         db  0x41 ; 'A'
000000000001737b         db  0x0e ; '.'
000000000001737c         db  0x38 ; '8'
000000000001737d         db  0x83 ; '.'
000000000001737e         db  0x07 ; '.'
000000000001737f         db  0x4a ; 'J'
0000000000017380         db  0x0e ; '.'
0000000000017381         db  0x80 ; '.'
0000000000017382         db  0x01 ; '.'
0000000000017383         db  0x03 ; '.'
0000000000017384         db  0x3b ; ';'
0000000000017385         db  0x01 ; '.'
0000000000017386         db  0x0a ; '.'
0000000000017387         db  0x0e ; '.'
0000000000017388         db  0x38 ; '8'
0000000000017389         db  0x41 ; 'A'
000000000001738a         db  0x0e ; '.'
000000000001738b         db  0x30 ; '0'
000000000001738c         db  0x41 ; 'A'
000000000001738d         db  0x0e ; '.'
000000000001738e         db  0x28 ; '('
000000000001738f         db  0x42 ; 'B'
0000000000017390         db  0x0e ; '.'
0000000000017391         db  0x20 ; ' '
0000000000017392         db  0x42 ; 'B'
0000000000017393         db  0x0e ; '.'
0000000000017394         db  0x18 ; '.'
0000000000017395         db  0x42 ; 'B'
0000000000017396         db  0x0e ; '.'
0000000000017397         db  0x10 ; '.'
0000000000017398         db  0x42 ; 'B'
0000000000017399         db  0x0e ; '.'
000000000001739a         db  0x08 ; '.'
000000000001739b         db  0x41 ; 'A'
000000000001739c         db  0x0b ; '.'
000000000001739d         db  0x00 ; '.'
000000000001739e         db  0x00 ; '.'
000000000001739f         db  0x00 ; '.'
00000000000173a0         dd         0x0000004c                                  ; Length of the record
00000000000173a4         dd         0x00001654                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
00000000000173a8         db         0xc8, 0x28, 2 dup (0xff)                    ; begin 0x9c70
00000000000173ac         db         0x3b, 0x02, 2 dup (0x00)                    ; length 0x23b (end at 0x9eab)
00000000000173b0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000173b1         db  0x42 ; 'B'
00000000000173b2         db  0x0e ; '.'
00000000000173b3         db  0x10 ; '.'
00000000000173b4         db  0x8f ; '.'
00000000000173b5         db  0x02 ; '.'
00000000000173b6         db  0x42 ; 'B'
00000000000173b7         db  0x0e ; '.'
00000000000173b8         db  0x18 ; '.'
00000000000173b9         db  0x8e ; '.'
00000000000173ba         db  0x03 ; '.'
00000000000173bb         db  0x45 ; 'E'
00000000000173bc         db  0x0e ; '.'
00000000000173bd         db  0x20 ; ' '
00000000000173be         db  0x8d ; '.'
00000000000173bf         db  0x04 ; '.'
00000000000173c0         db  0x42 ; 'B'
00000000000173c1         db  0x0e ; '.'
00000000000173c2         db  0x28 ; '('
00000000000173c3         db  0x8c ; '.'
00000000000173c4         db  0x05 ; '.'
00000000000173c5         db  0x45 ; 'E'
00000000000173c6         db  0x0e ; '.'
00000000000173c7         db  0x30 ; '0'
00000000000173c8         db  0x86 ; '.'
00000000000173c9         db  0x06 ; '.'
00000000000173ca         db  0x41 ; 'A'
00000000000173cb         db  0x0e ; '.'
00000000000173cc         db  0x38 ; '8'
00000000000173cd         db  0x83 ; '.'
00000000000173ce         db  0x07 ; '.'
00000000000173cf         db  0x48 ; 'H'
00000000000173d0         db  0x0e ; '.'
00000000000173d1         db  0x80 ; '.'
00000000000173d2         db  0x01 ; '.'
00000000000173d3         db  0x03 ; '.'
00000000000173d4         db  0xf3 ; '.'
00000000000173d5         db  0x01 ; '.'
00000000000173d6         db  0x0a ; '.'
00000000000173d7         db  0x0e ; '.'
00000000000173d8         db  0x38 ; '8'
00000000000173d9         db  0x41 ; 'A'
00000000000173da         db  0x0e ; '.'
00000000000173db         db  0x30 ; '0'
00000000000173dc         db  0x41 ; 'A'
00000000000173dd         db  0x0e ; '.'
00000000000173de         db  0x28 ; '('
00000000000173df         db  0x42 ; 'B'
00000000000173e0         db  0x0e ; '.'
00000000000173e1         db  0x20 ; ' '
00000000000173e2         db  0x42 ; 'B'
00000000000173e3         db  0x0e ; '.'
00000000000173e4         db  0x18 ; '.'
00000000000173e5         db  0x42 ; 'B'
00000000000173e6         db  0x0e ; '.'
00000000000173e7         db  0x10 ; '.'
00000000000173e8         db  0x42 ; 'B'
00000000000173e9         db  0x0e ; '.'
00000000000173ea         db  0x08 ; '.'
00000000000173eb         db  0x4a ; 'J'
00000000000173ec         db  0x0b ; '.'
00000000000173ed         db  0x00 ; '.'
00000000000173ee         db  0x00 ; '.'
00000000000173ef         db  0x00 ; '.'
00000000000173f0         dd         0x0000004c                                  ; Length of the record
00000000000173f4         dd         0x000016a4                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
00000000000173f8         db         0xb8, 0x2a, 2 dup (0xff)                    ; begin 0x9eb0
00000000000173fc         db         0x91, 0x0b, 2 dup (0x00)                    ; length 0xb91 (end at 0xaa41)
0000000000017400         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017401         db  0x42 ; 'B'
0000000000017402         db  0x0e ; '.'
0000000000017403         db  0x10 ; '.'
0000000000017404         db  0x8f ; '.'
0000000000017405         db  0x02 ; '.'
0000000000017406         db  0x42 ; 'B'
0000000000017407         db  0x0e ; '.'
0000000000017408         db  0x18 ; '.'
0000000000017409         db  0x8e ; '.'
000000000001740a         db  0x03 ; '.'
000000000001740b         db  0x45 ; 'E'
000000000001740c         db  0x0e ; '.'
000000000001740d         db  0x20 ; ' '
000000000001740e         db  0x8d ; '.'
000000000001740f         db  0x04 ; '.'
0000000000017410         db  0x42 ; 'B'
0000000000017411         db  0x0e ; '.'
0000000000017412         db  0x28 ; '('
0000000000017413         db  0x8c ; '.'
0000000000017414         db  0x05 ; '.'
0000000000017415         db  0x46 ; 'F'
0000000000017416         db  0x0e ; '.'
0000000000017417         db  0x30 ; '0'
0000000000017418         db  0x86 ; '.'
0000000000017419         db  0x06 ; '.'
000000000001741a         db  0x41 ; 'A'
000000000001741b         db  0x0e ; '.'
000000000001741c         db  0x38 ; '8'
000000000001741d         db  0x83 ; '.'
000000000001741e         db  0x07 ; '.'
000000000001741f         db  0x47 ; 'G'
0000000000017420         db  0x0e ; '.'
0000000000017421         db  0xc0 ; '.'
0000000000017422         db  0x02 ; '.'
0000000000017423         db  0x03 ; '.'
0000000000017424         db  0x17 ; '.'
0000000000017425         db  0x04 ; '.'
0000000000017426         db  0x0a ; '.'
0000000000017427         db  0x0e ; '.'
0000000000017428         db  0x38 ; '8'
0000000000017429         db  0x41 ; 'A'
000000000001742a         db  0x0e ; '.'
000000000001742b         db  0x30 ; '0'
000000000001742c         db  0x41 ; 'A'
000000000001742d         db  0x0e ; '.'
000000000001742e         db  0x28 ; '('
000000000001742f         db  0x42 ; 'B'
0000000000017430         db  0x0e ; '.'
0000000000017431         db  0x20 ; ' '
0000000000017432         db  0x42 ; 'B'
0000000000017433         db  0x0e ; '.'
0000000000017434         db  0x18 ; '.'
0000000000017435         db  0x42 ; 'B'
0000000000017436         db  0x0e ; '.'
0000000000017437         db  0x10 ; '.'
0000000000017438         db  0x42 ; 'B'
0000000000017439         db  0x0e ; '.'
000000000001743a         db  0x08 ; '.'
000000000001743b         db  0x46 ; 'F'
000000000001743c         db  0x0b ; '.'
000000000001743d         db  0x00 ; '.'
000000000001743e         db  0x00 ; '.'
000000000001743f         db  0x00 ; '.'
0000000000017440         dd         0x00000030                                  ; Length of the record
0000000000017444         dd         0x000016f4                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000017448         db         0x08, 0x36, 2 dup (0xff)                    ; begin 0xaa50
000000000001744c         db         0x87, 3 dup (0x00)                          ; length 0x87 (end at 0xaad7)
0000000000017450         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017451         db  0x47 ; 'G'
0000000000017452         db  0x0e ; '.'
0000000000017453         db  0x10 ; '.'
0000000000017454         db  0x86 ; '.'
0000000000017455         db  0x02 ; '.'
0000000000017456         db  0x41 ; 'A'
0000000000017457         db  0x0e ; '.'
0000000000017458         db  0x18 ; '.'
0000000000017459         db  0x83 ; '.'
000000000001745a         db  0x03 ; '.'
000000000001745b         db  0x4a ; 'J'
000000000001745c         db  0x0e ; '.'
000000000001745d         db  0x20 ; ' '
000000000001745e         db  0x02 ; '.'
000000000001745f         db  0x4e ; 'N'
0000000000017460         db  0x0e ; '.'
0000000000017461         db  0x18 ; '.'
0000000000017462         db  0x41 ; 'A'
0000000000017463         db  0x0e ; '.'
0000000000017464         db  0x10 ; '.'
0000000000017465         db  0x41 ; 'A'
0000000000017466         db  0x0e ; '.'
0000000000017467         db  0x08 ; '.'
0000000000017468         db  0x46 ; 'F'
0000000000017469         db  0xc3 ; '.'
000000000001746a         db  0xc6 ; '.'
000000000001746b         db  0x58 ; 'X'
000000000001746c         db  0x0e ; '.'
000000000001746d         db  0x20 ; ' '
000000000001746e         db  0x83 ; '.'
000000000001746f         db  0x03 ; '.'
0000000000017470         db  0x86 ; '.'
0000000000017471         db  0x02 ; '.'
0000000000017472         db  0x00 ; '.'
0000000000017473         db  0x00 ; '.'
0000000000017474         dd         0x00000028                                  ; Length of the record
0000000000017478         dd         0x00001728                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
000000000001747c         db         0x64, 0x36, 2 dup (0xff)                    ; begin 0xaae0
0000000000017480         db         0x4f, 3 dup (0x00)                          ; length 0x4f (end at 0xab2f)
0000000000017484         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017485         db  0x42 ; 'B'
0000000000017486         db  0x0e ; '.'
0000000000017487         db  0x10 ; '.'
0000000000017488         db  0x8c ; '.'
0000000000017489         db  0x02 ; '.'
000000000001748a         db  0x41 ; 'A'
000000000001748b         db  0x0e ; '.'
000000000001748c         db  0x18 ; '.'
000000000001748d         db  0x86 ; '.'
000000000001748e         db  0x03 ; '.'
000000000001748f         db  0x44 ; 'D'
0000000000017490         db  0x0e ; '.'
0000000000017491         db  0x20 ; ' '
0000000000017492         db  0x83 ; '.'
0000000000017493         db  0x04 ; '.'
0000000000017494         db  0x7c ; '|'
0000000000017495         db  0x0e ; '.'
0000000000017496         db  0x18 ; '.'
0000000000017497         db  0x45 ; 'E'
0000000000017498         db  0x0e ; '.'
0000000000017499         db  0x10 ; '.'
000000000001749a         db  0x42 ; 'B'
000000000001749b         db  0x0e ; '.'
000000000001749c         db  0x08 ; '.'
000000000001749d         db  0x00 ; '.'
000000000001749e         db  0x00 ; '.'
000000000001749f         db  0x00 ; '.'
00000000000174a0         dd         0x0000002c                                  ; Length of the record
00000000000174a4         dd         0x00001754                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
00000000000174a8         db         0x88, 0x36, 2 dup (0xff)                    ; begin 0xab30
00000000000174ac         db         0x94, 3 dup (0x00)                          ; length 0x94 (end at 0xabc4)
00000000000174b0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000174b1         db  0x42 ; 'B'
00000000000174b2         db  0x0e ; '.'
00000000000174b3         db  0x10 ; '.'
00000000000174b4         db  0x8c ; '.'
00000000000174b5         db  0x02 ; '.'
00000000000174b6         db  0x41 ; 'A'
00000000000174b7         db  0x0e ; '.'
00000000000174b8         db  0x18 ; '.'
00000000000174b9         db  0x86 ; '.'
00000000000174ba         db  0x03 ; '.'
00000000000174bb         db  0x41 ; 'A'
00000000000174bc         db  0x0e ; '.'
00000000000174bd         db  0x20 ; ' '
00000000000174be         db  0x83 ; '.'
00000000000174bf         db  0x04 ; '.'
00000000000174c0         db  0x02 ; '.'
00000000000174c1         db  0x6d ; 'm'
00000000000174c2         db  0x0a ; '.'
00000000000174c3         db  0x0e ; '.'
00000000000174c4         db  0x18 ; '.'
00000000000174c5         db  0x41 ; 'A'
00000000000174c6         db  0x0e ; '.'
00000000000174c7         db  0x10 ; '.'
00000000000174c8         db  0x42 ; 'B'
00000000000174c9         db  0x0e ; '.'
00000000000174ca         db  0x08 ; '.'
00000000000174cb         db  0x41 ; 'A'
00000000000174cc         db  0x0b ; '.'
00000000000174cd         db  0x00 ; '.'
00000000000174ce         db  0x00 ; '.'
00000000000174cf         db  0x00 ; '.'
00000000000174d0         dd         0x00000030                                  ; Length of the record
00000000000174d4         dd         0x00001784                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
00000000000174d8         db         0xf8, 0x36, 2 dup (0xff)                    ; begin 0xabd0
00000000000174dc         db         0x4c, 3 dup (0x00)                          ; length 0x4c (end at 0xac1c)
00000000000174e0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000174e1         db  0x41 ; 'A'
00000000000174e2         db  0x0e ; '.'
00000000000174e3         db  0x10 ; '.'
00000000000174e4         db  0x86 ; '.'
00000000000174e5         db  0x02 ; '.'
00000000000174e6         db  0x41 ; 'A'
00000000000174e7         db  0x0e ; '.'
00000000000174e8         db  0x18 ; '.'
00000000000174e9         db  0x83 ; '.'
00000000000174ea         db  0x03 ; '.'
00000000000174eb         db  0x4d ; 'M'
00000000000174ec         db  0x0e ; '.'
00000000000174ed         db  0x20 ; ' '
00000000000174ee         db  0x67 ; 'g'
00000000000174ef         db  0x0a ; '.'
00000000000174f0         db  0x0e ; '.'
00000000000174f1         db  0x18 ; '.'
00000000000174f2         db  0x43 ; 'C'
00000000000174f3         db  0x0e ; '.'
00000000000174f4         db  0x10 ; '.'
00000000000174f5         db  0x41 ; 'A'
00000000000174f6         db  0x0e ; '.'
00000000000174f7         db  0x08 ; '.'
00000000000174f8         db  0x46 ; 'F'
00000000000174f9         db  0x0b ; '.'
00000000000174fa         db  0x44 ; 'D'
00000000000174fb         db  0x0e ; '.'
00000000000174fc         db  0x18 ; '.'
00000000000174fd         db  0x46 ; 'F'
00000000000174fe         db  0x0e ; '.'
00000000000174ff         db  0x10 ; '.'
0000000000017500         db  0x41 ; 'A'
0000000000017501         db  0x0e ; '.'
0000000000017502         db  0x08 ; '.'
0000000000017503         db  0x00 ; '.'
0000000000017504         dd         0x00000040                                  ; Length of the record
0000000000017508         dd         0x000017b8                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
000000000001750c         db         0x14, 0x37, 2 dup (0xff)                    ; begin 0xac20
0000000000017510         db         0x0d, 0x08, 2 dup (0x00)                    ; length 0x80d (end at 0xb42d)
0000000000017514         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017515         db  0x42 ; 'B'
0000000000017516         db  0x0e ; '.'
0000000000017517         db  0x10 ; '.'
0000000000017518         db  0x8e ; '.'
0000000000017519         db  0x02 ; '.'
000000000001751a         db  0x42 ; 'B'
000000000001751b         db  0x0e ; '.'
000000000001751c         db  0x18 ; '.'
000000000001751d         db  0x8d ; '.'
000000000001751e         db  0x03 ; '.'
000000000001751f         db  0x45 ; 'E'
0000000000017520         db  0x0e ; '.'
0000000000017521         db  0x20 ; ' '
0000000000017522         db  0x8c ; '.'
0000000000017523         db  0x04 ; '.'
0000000000017524         db  0x41 ; 'A'
0000000000017525         db  0x0e ; '.'
0000000000017526         db  0x28 ; '('
0000000000017527         db  0x86 ; '.'
0000000000017528         db  0x05 ; '.'
0000000000017529         db  0x44 ; 'D'
000000000001752a         db  0x0e ; '.'
000000000001752b         db  0x30 ; '0'
000000000001752c         db  0x83 ; '.'
000000000001752d         db  0x06 ; '.'
000000000001752e         db  0x4a ; 'J'
000000000001752f         db  0x0e ; '.'
0000000000017530         db  0x40 ; '@'
0000000000017531         db  0x02 ; '.'
0000000000017532         db  0xd2 ; '.'
0000000000017533         db  0x0a ; '.'
0000000000017534         db  0x0e ; '.'
0000000000017535         db  0x30 ; '0'
0000000000017536         db  0x41 ; 'A'
0000000000017537         db  0x0e ; '.'
0000000000017538         db  0x28 ; '('
0000000000017539         db  0x41 ; 'A'
000000000001753a         db  0x0e ; '.'
000000000001753b         db  0x20 ; ' '
000000000001753c         db  0x42 ; 'B'
000000000001753d         db  0x0e ; '.'
000000000001753e         db  0x18 ; '.'
000000000001753f         db  0x42 ; 'B'
0000000000017540         db  0x0e ; '.'
0000000000017541         db  0x10 ; '.'
0000000000017542         db  0x42 ; 'B'
0000000000017543         db  0x0e ; '.'
0000000000017544         db  0x08 ; '.'
0000000000017545         db  0x46 ; 'F'
0000000000017546         db  0x0b ; '.'
0000000000017547         db  0x00 ; '.'
0000000000017548         dd         0x0000005c                                  ; Length of the record
000000000001754c         dd         0x000017fc                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000017550         db         0xe0, 0x3e, 2 dup (0xff)                    ; begin 0xb430
0000000000017554         db         0x6a, 0x02, 2 dup (0x00)                    ; length 0x26a (end at 0xb69a)
0000000000017558         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017559         db  0x42 ; 'B'
000000000001755a         db  0x0e ; '.'
000000000001755b         db  0x10 ; '.'
000000000001755c         db  0x8f ; '.'
000000000001755d         db  0x02 ; '.'
000000000001755e         db  0x42 ; 'B'
000000000001755f         db  0x0e ; '.'
0000000000017560         db  0x18 ; '.'
0000000000017561         db  0x8e ; '.'
0000000000017562         db  0x03 ; '.'
0000000000017563         db  0x45 ; 'E'
0000000000017564         db  0x0e ; '.'
0000000000017565         db  0x20 ; ' '
0000000000017566         db  0x8d ; '.'
0000000000017567         db  0x04 ; '.'
0000000000017568         db  0x42 ; 'B'
0000000000017569         db  0x0e ; '.'
000000000001756a         db  0x28 ; '('
000000000001756b         db  0x8c ; '.'
000000000001756c         db  0x05 ; '.'
000000000001756d         db  0x44 ; 'D'
000000000001756e         db  0x0e ; '.'
000000000001756f         db  0x30 ; '0'
0000000000017570         db  0x86 ; '.'
0000000000017571         db  0x06 ; '.'
0000000000017572         db  0x41 ; 'A'
0000000000017573         db  0x0e ; '.'
0000000000017574         db  0x38 ; '8'
0000000000017575         db  0x83 ; '.'
0000000000017576         db  0x07 ; '.'
0000000000017577         db  0x4f ; 'O'
0000000000017578         db  0x0e ; '.'
0000000000017579         db  0x90 ; '.'
000000000001757a         db  0x01 ; '.'
000000000001757b         db  0x02 ; '.'
000000000001757c         db  0x5b ; '['
000000000001757d         db  0x0e ; '.'
000000000001757e         db  0x98 ; '.'
000000000001757f         db  0x01 ; '.'
0000000000017580         db  0x45 ; 'E'
0000000000017581         db  0x0e ; '.'
0000000000017582         db  0xa0 ; '.'
0000000000017583         db  0x01 ; '.'
0000000000017584         db  0x6c ; 'l'
0000000000017585         db  0x0e ; '.'
0000000000017586         db  0x98 ; '.'
0000000000017587         db  0x01 ; '.'
0000000000017588         db  0x41 ; 'A'
0000000000017589         db  0x0e ; '.'
000000000001758a         db  0x90 ; '.'
000000000001758b         db  0x01 ; '.'
000000000001758c         db  0x03 ; '.'
000000000001758d         db  0x31 ; '1'
000000000001758e         db  0x01 ; '.'
000000000001758f         db  0x0a ; '.'
0000000000017590         db  0x0e ; '.'
0000000000017591         db  0x38 ; '8'
0000000000017592         db  0x41 ; 'A'
0000000000017593         db  0x0e ; '.'
0000000000017594         db  0x30 ; '0'
0000000000017595         db  0x41 ; 'A'
0000000000017596         db  0x0e ; '.'
0000000000017597         db  0x28 ; '('
0000000000017598         db  0x42 ; 'B'
0000000000017599         db  0x0e ; '.'
000000000001759a         db  0x20 ; ' '
000000000001759b         db  0x42 ; 'B'
000000000001759c         db  0x0e ; '.'
000000000001759d         db  0x18 ; '.'
000000000001759e         db  0x42 ; 'B'
000000000001759f         db  0x0e ; '.'
00000000000175a0         db  0x10 ; '.'
00000000000175a1         db  0x42 ; 'B'
00000000000175a2         db  0x0e ; '.'
00000000000175a3         db  0x08 ; '.'
00000000000175a4         db  0x49 ; 'I'
00000000000175a5         db  0x0b ; '.'
00000000000175a6         db  0x00 ; '.'
00000000000175a7         db  0x00 ; '.'
00000000000175a8         dd         0x0000004c                                  ; Length of the record
00000000000175ac         dd         0x0000185c                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
00000000000175b0         db         0xf0, 0x40, 2 dup (0xff)                    ; begin 0xb6a0
00000000000175b4         db         0x27, 0x05, 2 dup (0x00)                    ; length 0x527 (end at 0xbbc7)
00000000000175b8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000175b9         db  0x42 ; 'B'
00000000000175ba         db  0x0e ; '.'
00000000000175bb         db  0x10 ; '.'
00000000000175bc         db  0x8f ; '.'
00000000000175bd         db  0x02 ; '.'
00000000000175be         db  0x42 ; 'B'
00000000000175bf         db  0x0e ; '.'
00000000000175c0         db  0x18 ; '.'
00000000000175c1         db  0x8e ; '.'
00000000000175c2         db  0x03 ; '.'
00000000000175c3         db  0x45 ; 'E'
00000000000175c4         db  0x0e ; '.'
00000000000175c5         db  0x20 ; ' '
00000000000175c6         db  0x8d ; '.'
00000000000175c7         db  0x04 ; '.'
00000000000175c8         db  0x42 ; 'B'
00000000000175c9         db  0x0e ; '.'
00000000000175ca         db  0x28 ; '('
00000000000175cb         db  0x8c ; '.'
00000000000175cc         db  0x05 ; '.'
00000000000175cd         db  0x41 ; 'A'
00000000000175ce         db  0x0e ; '.'
00000000000175cf         db  0x30 ; '0'
00000000000175d0         db  0x86 ; '.'
00000000000175d1         db  0x06 ; '.'
00000000000175d2         db  0x41 ; 'A'
00000000000175d3         db  0x0e ; '.'
00000000000175d4         db  0x38 ; '8'
00000000000175d5         db  0x83 ; '.'
00000000000175d6         db  0x07 ; '.'
00000000000175d7         db  0x4c ; 'L'
00000000000175d8         db  0x0e ; '.'
00000000000175d9         db  0xb0 ; '.'
00000000000175da         db  0x03 ; '.'
00000000000175db         db  0x03 ; '.'
00000000000175dc         db  0x82 ; '.'
00000000000175dd         db  0x04 ; '.'
00000000000175de         db  0x0a ; '.'
00000000000175df         db  0x0e ; '.'
00000000000175e0         db  0x38 ; '8'
00000000000175e1         db  0x41 ; 'A'
00000000000175e2         db  0x0e ; '.'
00000000000175e3         db  0x30 ; '0'
00000000000175e4         db  0x41 ; 'A'
00000000000175e5         db  0x0e ; '.'
00000000000175e6         db  0x28 ; '('
00000000000175e7         db  0x42 ; 'B'
00000000000175e8         db  0x0e ; '.'
00000000000175e9         db  0x20 ; ' '
00000000000175ea         db  0x42 ; 'B'
00000000000175eb         db  0x0e ; '.'
00000000000175ec         db  0x18 ; '.'
00000000000175ed         db  0x42 ; 'B'
00000000000175ee         db  0x0e ; '.'
00000000000175ef         db  0x10 ; '.'
00000000000175f0         db  0x42 ; 'B'
00000000000175f1         db  0x0e ; '.'
00000000000175f2         db  0x08 ; '.'
00000000000175f3         db  0x41 ; 'A'
00000000000175f4         db  0x0b ; '.'
00000000000175f5         db  0x00 ; '.'
00000000000175f6         db  0x00 ; '.'
00000000000175f7         db  0x00 ; '.'
00000000000175f8         dd         0x00000038                                  ; Length of the record
00000000000175fc         dd         0x000018ac                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000017600         db         0xd0, 0x45, 2 dup (0xff)                    ; begin 0xbbd0
0000000000017604         db         0x54, 0x02, 2 dup (0x00)                    ; length 0x254 (end at 0xbe24)
0000000000017608         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017609         db  0x46 ; 'F'
000000000001760a         db  0x0e ; '.'
000000000001760b         db  0x10 ; '.'
000000000001760c         db  0x8d ; '.'
000000000001760d         db  0x02 ; '.'
000000000001760e         db  0x42 ; 'B'
000000000001760f         db  0x0e ; '.'
0000000000017610         db  0x18 ; '.'
0000000000017611         db  0x8c ; '.'
0000000000017612         db  0x03 ; '.'
0000000000017613         db  0x45 ; 'E'
0000000000017614         db  0x0e ; '.'
0000000000017615         db  0x20 ; ' '
0000000000017616         db  0x86 ; '.'
0000000000017617         db  0x04 ; '.'
0000000000017618         db  0x41 ; 'A'
0000000000017619         db  0x0e ; '.'
000000000001761a         db  0x28 ; '('
000000000001761b         db  0x83 ; '.'
000000000001761c         db  0x05 ; '.'
000000000001761d         db  0x44 ; 'D'
000000000001761e         db  0x0e ; '.'
000000000001761f         db  0x30 ; '0'
0000000000017620         db  0x02 ; '.'
0000000000017621         db  0xe4 ; '.'
0000000000017622         db  0x0a ; '.'
0000000000017623         db  0x0e ; '.'
0000000000017624         db  0x28 ; '('
0000000000017625         db  0x43 ; 'C'
0000000000017626         db  0x0e ; '.'
0000000000017627         db  0x20 ; ' '
0000000000017628         db  0x41 ; 'A'
0000000000017629         db  0x0e ; '.'
000000000001762a         db  0x18 ; '.'
000000000001762b         db  0x42 ; 'B'
000000000001762c         db  0x0e ; '.'
000000000001762d         db  0x10 ; '.'
000000000001762e         db  0x42 ; 'B'
000000000001762f         db  0x0e ; '.'
0000000000017630         db  0x08 ; '.'
0000000000017631         db  0x42 ; 'B'
0000000000017632         db  0x0b ; '.'
0000000000017633         db  0x00 ; '.'
0000000000017634         dd         0x0000004c                                  ; Length of the record
0000000000017638         dd         0x000018e8                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
000000000001763c         db         0xf4, 0x47, 2 dup (0xff)                    ; begin 0xbe30
0000000000017640         db         0x51, 0x07, 2 dup (0x00)                    ; length 0x751 (end at 0xc581)
0000000000017644         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017645         db  0x42 ; 'B'
0000000000017646         db  0x0e ; '.'
0000000000017647         db  0x10 ; '.'
0000000000017648         db  0x8f ; '.'
0000000000017649         db  0x02 ; '.'
000000000001764a         db  0x42 ; 'B'
000000000001764b         db  0x0e ; '.'
000000000001764c         db  0x18 ; '.'
000000000001764d         db  0x8e ; '.'
000000000001764e         db  0x03 ; '.'
000000000001764f         db  0x45 ; 'E'
0000000000017650         db  0x0e ; '.'
0000000000017651         db  0x20 ; ' '
0000000000017652         db  0x8d ; '.'
0000000000017653         db  0x04 ; '.'
0000000000017654         db  0x42 ; 'B'
0000000000017655         db  0x0e ; '.'
0000000000017656         db  0x28 ; '('
0000000000017657         db  0x8c ; '.'
0000000000017658         db  0x05 ; '.'
0000000000017659         db  0x41 ; 'A'
000000000001765a         db  0x0e ; '.'
000000000001765b         db  0x30 ; '0'
000000000001765c         db  0x86 ; '.'
000000000001765d         db  0x06 ; '.'
000000000001765e         db  0x41 ; 'A'
000000000001765f         db  0x0e ; '.'
0000000000017660         db  0x38 ; '8'
0000000000017661         db  0x83 ; '.'
0000000000017662         db  0x07 ; '.'
0000000000017663         db  0x4d ; 'M'
0000000000017664         db  0x0e ; '.'
0000000000017665         db  0x90 ; '.'
0000000000017666         db  0x02 ; '.'
0000000000017667         db  0x03 ; '.'
0000000000017668         db  0x88 ; '.'
0000000000017669         db  0x05 ; '.'
000000000001766a         db  0x0a ; '.'
000000000001766b         db  0x0e ; '.'
000000000001766c         db  0x38 ; '8'
000000000001766d         db  0x41 ; 'A'
000000000001766e         db  0x0e ; '.'
000000000001766f         db  0x30 ; '0'
0000000000017670         db  0x41 ; 'A'
0000000000017671         db  0x0e ; '.'
0000000000017672         db  0x28 ; '('
0000000000017673         db  0x42 ; 'B'
0000000000017674         db  0x0e ; '.'
0000000000017675         db  0x20 ; ' '
0000000000017676         db  0x42 ; 'B'
0000000000017677         db  0x0e ; '.'
0000000000017678         db  0x18 ; '.'
0000000000017679         db  0x42 ; 'B'
000000000001767a         db  0x0e ; '.'
000000000001767b         db  0x10 ; '.'
000000000001767c         db  0x42 ; 'B'
000000000001767d         db  0x0e ; '.'
000000000001767e         db  0x08 ; '.'
000000000001767f         db  0x44 ; 'D'
0000000000017680         db  0x0b ; '.'
0000000000017681         db  0x00 ; '.'
0000000000017682         db  0x00 ; '.'
0000000000017683         db  0x00 ; '.'
0000000000017684         dd         0x0000002c                                  ; Length of the record
0000000000017688         dd         0x00001938                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
000000000001768c         db         0x04, 0x4f, 2 dup (0xff)                    ; begin 0xc590
0000000000017690         db         0xea, 0x08, 2 dup (0x00)                    ; length 0x8ea (end at 0xce7a)
0000000000017694         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017695         db  0x41 ; 'A'
0000000000017696         db  0x0e ; '.'
0000000000017697         db  0x10 ; '.'
0000000000017698         db  0x86 ; '.'
0000000000017699         db  0x02 ; '.'
000000000001769a         db  0x43 ; 'C'
000000000001769b         db  0x0d ; '.'
000000000001769c         db  0x06 ; '.'
000000000001769d         db  0x48 ; 'H'
000000000001769e         db  0x8f ; '.'
000000000001769f         db  0x03 ; '.'
00000000000176a0         db  0x8e ; '.'
00000000000176a1         db  0x04 ; '.'
00000000000176a2         db  0x8d ; '.'
00000000000176a3         db  0x05 ; '.'
00000000000176a4         db  0x8c ; '.'
00000000000176a5         db  0x06 ; '.'
00000000000176a6         db  0x4e ; 'N'
00000000000176a7         db  0x83 ; '.'
00000000000176a8         db  0x07 ; '.'
00000000000176a9         db  0x03 ; '.'
00000000000176aa         db  0x20 ; ' '
00000000000176ab         db  0x07 ; '.'
00000000000176ac         db  0x0a ; '.'
00000000000176ad         db  0x0c ; '.'
00000000000176ae         db  0x07 ; '.'
00000000000176af         db  0x08 ; '.'
00000000000176b0         db  0x41 ; 'A'
00000000000176b1         db  0x0b ; '.'
00000000000176b2         db  0x00 ; '.'
00000000000176b3         db  0x00 ; '.'
00000000000176b4         dd         0x00000068                                  ; Length of the record
00000000000176b8         dd         0x00001968                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
00000000000176bc         db         0xc4, 0x57, 2 dup (0xff)                    ; begin 0xce80
00000000000176c0         db         0x96, 0x01, 2 dup (0x00)                    ; length 0x196 (end at 0xd016)
00000000000176c4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000176c5         db  0x42 ; 'B'
00000000000176c6         db  0x0e ; '.'
00000000000176c7         db  0x10 ; '.'
00000000000176c8         db  0x8f ; '.'
00000000000176c9         db  0x02 ; '.'
00000000000176ca         db  0x42 ; 'B'
00000000000176cb         db  0x0e ; '.'
00000000000176cc         db  0x18 ; '.'
00000000000176cd         db  0x8e ; '.'
00000000000176ce         db  0x03 ; '.'
00000000000176cf         db  0x45 ; 'E'
00000000000176d0         db  0x0e ; '.'
00000000000176d1         db  0x20 ; ' '
00000000000176d2         db  0x8d ; '.'
00000000000176d3         db  0x04 ; '.'
00000000000176d4         db  0x42 ; 'B'
00000000000176d5         db  0x0e ; '.'
00000000000176d6         db  0x28 ; '('
00000000000176d7         db  0x8c ; '.'
00000000000176d8         db  0x05 ; '.'
00000000000176d9         db  0x44 ; 'D'
00000000000176da         db  0x0e ; '.'
00000000000176db         db  0x30 ; '0'
00000000000176dc         db  0x86 ; '.'
00000000000176dd         db  0x06 ; '.'
00000000000176de         db  0x41 ; 'A'
00000000000176df         db  0x0e ; '.'
00000000000176e0         db  0x38 ; '8'
00000000000176e1         db  0x83 ; '.'
00000000000176e2         db  0x07 ; '.'
00000000000176e3         db  0x51 ; 'Q'
00000000000176e4         db  0x0e ; '.'
00000000000176e5         db  0x58 ; 'X'
00000000000176e6         db  0x49 ; 'I'
00000000000176e7         db  0x0e ; '.'
00000000000176e8         db  0x60 ; '`'
00000000000176e9         db  0x4e ; 'N'
00000000000176ea         db  0x0e ; '.'
00000000000176eb         db  0x58 ; 'X'
00000000000176ec         db  0x41 ; 'A'
00000000000176ed         db  0x0e ; '.'
00000000000176ee         db  0x50 ; 'P'
00000000000176ef         db  0x46 ; 'F'
00000000000176f0         db  0x0a ; '.'
00000000000176f1         db  0x0e ; '.'
00000000000176f2         db  0x38 ; '8'
00000000000176f3         db  0x41 ; 'A'
00000000000176f4         db  0x0e ; '.'
00000000000176f5         db  0x30 ; '0'
00000000000176f6         db  0x41 ; 'A'
00000000000176f7         db  0x0e ; '.'
00000000000176f8         db  0x28 ; '('
00000000000176f9         db  0x42 ; 'B'
00000000000176fa         db  0x0e ; '.'
00000000000176fb         db  0x20 ; ' '
00000000000176fc         db  0x42 ; 'B'
00000000000176fd         db  0x0e ; '.'
00000000000176fe         db  0x18 ; '.'
00000000000176ff         db  0x42 ; 'B'
0000000000017700         db  0x0e ; '.'
0000000000017701         db  0x10 ; '.'
0000000000017702         db  0x42 ; 'B'
0000000000017703         db  0x0e ; '.'
0000000000017704         db  0x08 ; '.'
0000000000017705         db  0x47 ; 'G'
0000000000017706         db  0x0b ; '.'
0000000000017707         db  0x02 ; '.'
0000000000017708         db  0x97 ; '.'
0000000000017709         db  0x0a ; '.'
000000000001770a         db  0x0e ; '.'
000000000001770b         db  0x38 ; '8'
000000000001770c         db  0x44 ; 'D'
000000000001770d         db  0x0e ; '.'
000000000001770e         db  0x30 ; '0'
000000000001770f         db  0x41 ; 'A'
0000000000017710         db  0x0e ; '.'
0000000000017711         db  0x28 ; '('
0000000000017712         db  0x42 ; 'B'
0000000000017713         db  0x0e ; '.'
0000000000017714         db  0x20 ; ' '
0000000000017715         db  0x42 ; 'B'
0000000000017716         db  0x0e ; '.'
0000000000017717         db  0x18 ; '.'
0000000000017718         db  0x42 ; 'B'
0000000000017719         db  0x0e ; '.'
000000000001771a         db  0x10 ; '.'
000000000001771b         db  0x42 ; 'B'
000000000001771c         db  0x0e ; '.'
000000000001771d         db  0x08 ; '.'
000000000001771e         db  0x4c ; 'L'
000000000001771f         db  0x0b ; '.'
0000000000017720         dd         0x0000005c                                  ; Length of the record
0000000000017724         dd         0x000019d4                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000017728         db         0xf8, 0x58, 2 dup (0xff)                    ; begin 0xd020
000000000001772c         db         0xe1, 0x08, 2 dup (0x00)                    ; length 0x8e1 (end at 0xd901)
0000000000017730         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017731         db  0x42 ; 'B'
0000000000017732         db  0x0e ; '.'
0000000000017733         db  0x10 ; '.'
0000000000017734         db  0x8f ; '.'
0000000000017735         db  0x02 ; '.'
0000000000017736         db  0x42 ; 'B'
0000000000017737         db  0x0e ; '.'
0000000000017738         db  0x18 ; '.'
0000000000017739         db  0x8e ; '.'
000000000001773a         db  0x03 ; '.'
000000000001773b         db  0x42 ; 'B'
000000000001773c         db  0x0e ; '.'
000000000001773d         db  0x20 ; ' '
000000000001773e         db  0x8d ; '.'
000000000001773f         db  0x04 ; '.'
0000000000017740         db  0x42 ; 'B'
0000000000017741         db  0x0e ; '.'
0000000000017742         db  0x28 ; '('
0000000000017743         db  0x8c ; '.'
0000000000017744         db  0x05 ; '.'
0000000000017745         db  0x41 ; 'A'
0000000000017746         db  0x0e ; '.'
0000000000017747         db  0x30 ; '0'
0000000000017748         db  0x86 ; '.'
0000000000017749         db  0x06 ; '.'
000000000001774a         db  0x41 ; 'A'
000000000001774b         db  0x0e ; '.'
000000000001774c         db  0x38 ; '8'
000000000001774d         db  0x83 ; '.'
000000000001774e         db  0x07 ; '.'
000000000001774f         db  0x47 ; 'G'
0000000000017750         db  0x0e ; '.'
0000000000017751         db  0xf0 ; '.'
0000000000017752         db  0x01 ; '.'
0000000000017753         db  0x03 ; '.'
0000000000017754         db  0x85 ; '.'
0000000000017755         db  0x03 ; '.'
0000000000017756         db  0x0a ; '.'
0000000000017757         db  0x0e ; '.'
0000000000017758         db  0x38 ; '8'
0000000000017759         db  0x41 ; 'A'
000000000001775a         db  0x0e ; '.'
000000000001775b         db  0x30 ; '0'
000000000001775c         db  0x41 ; 'A'
000000000001775d         db  0x0e ; '.'
000000000001775e         db  0x28 ; '('
000000000001775f         db  0x42 ; 'B'
0000000000017760         db  0x0e ; '.'
0000000000017761         db  0x20 ; ' '
0000000000017762         db  0x42 ; 'B'
0000000000017763         db  0x0e ; '.'
0000000000017764         db  0x18 ; '.'
0000000000017765         db  0x42 ; 'B'
0000000000017766         db  0x0e ; '.'
0000000000017767         db  0x10 ; '.'
0000000000017768         db  0x42 ; 'B'
0000000000017769         db  0x0e ; '.'
000000000001776a         db  0x08 ; '.'
000000000001776b         db  0x48 ; 'H'
000000000001776c         db  0x0b ; '.'
000000000001776d         db  0x03 ; '.'
000000000001776e         db  0xd8 ; '.'
000000000001776f         db  0x02 ; '.'
0000000000017770         db  0x0e ; '.'
0000000000017771         db  0xf8 ; '.'
0000000000017772         db  0x01 ; '.'
0000000000017773         db  0x42 ; 'B'
0000000000017774         db  0x0e ; '.'
0000000000017775         db  0x80 ; '.'
0000000000017776         db  0x02 ; '.'
0000000000017777         db  0x4f ; 'O'
0000000000017778         db  0x0e ; '.'
0000000000017779         db  0xf8 ; '.'
000000000001777a         db  0x01 ; '.'
000000000001777b         db  0x44 ; 'D'
000000000001777c         db  0x0e ; '.'
000000000001777d         db  0xf0 ; '.'
000000000001777e         db  0x01 ; '.'
000000000001777f         db  0x00 ; '.'
0000000000017780         dd         0x00000048                                  ; Length of the record
0000000000017784         dd         0x00001a34                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000017788         db         0x88, 0x61, 2 dup (0xff)                    ; begin 0xd910
000000000001778c         db         0xec, 0x01, 2 dup (0x00)                    ; length 0x1ec (end at 0xdafc)
0000000000017790         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017791         db  0x42 ; 'B'
0000000000017792         db  0x0e ; '.'
0000000000017793         db  0x10 ; '.'
0000000000017794         db  0x8f ; '.'
0000000000017795         db  0x02 ; '.'
0000000000017796         db  0x42 ; 'B'
0000000000017797         db  0x0e ; '.'
0000000000017798         db  0x18 ; '.'
0000000000017799         db  0x8e ; '.'
000000000001779a         db  0x03 ; '.'
000000000001779b         db  0x42 ; 'B'
000000000001779c         db  0x0e ; '.'
000000000001779d         db  0x20 ; ' '
000000000001779e         db  0x8d ; '.'
000000000001779f         db  0x04 ; '.'
00000000000177a0         db  0x42 ; 'B'
00000000000177a1         db  0x0e ; '.'
00000000000177a2         db  0x28 ; '('
00000000000177a3         db  0x8c ; '.'
00000000000177a4         db  0x05 ; '.'
00000000000177a5         db  0x44 ; 'D'
00000000000177a6         db  0x0e ; '.'
00000000000177a7         db  0x30 ; '0'
00000000000177a8         db  0x86 ; '.'
00000000000177a9         db  0x06 ; '.'
00000000000177aa         db  0x41 ; 'A'
00000000000177ab         db  0x0e ; '.'
00000000000177ac         db  0x38 ; '8'
00000000000177ad         db  0x83 ; '.'
00000000000177ae         db  0x07 ; '.'
00000000000177af         db  0x47 ; 'G'
00000000000177b0         db  0x0e ; '.'
00000000000177b1         db  0x70 ; 'p'
00000000000177b2         db  0x02 ; '.'
00000000000177b3         db  0x6c ; 'l'
00000000000177b4         db  0x0a ; '.'
00000000000177b5         db  0x0e ; '.'
00000000000177b6         db  0x38 ; '8'
00000000000177b7         db  0x41 ; 'A'
00000000000177b8         db  0x0e ; '.'
00000000000177b9         db  0x30 ; '0'
00000000000177ba         db  0x41 ; 'A'
00000000000177bb         db  0x0e ; '.'
00000000000177bc         db  0x28 ; '('
00000000000177bd         db  0x42 ; 'B'
00000000000177be         db  0x0e ; '.'
00000000000177bf         db  0x20 ; ' '
00000000000177c0         db  0x42 ; 'B'
00000000000177c1         db  0x0e ; '.'
00000000000177c2         db  0x18 ; '.'
00000000000177c3         db  0x42 ; 'B'
00000000000177c4         db  0x0e ; '.'
00000000000177c5         db  0x10 ; '.'
00000000000177c6         db  0x42 ; 'B'
00000000000177c7         db  0x0e ; '.'
00000000000177c8         db  0x08 ; '.'
00000000000177c9         db  0x46 ; 'F'
00000000000177ca         db  0x0b ; '.'
00000000000177cb         db  0x00 ; '.'
00000000000177cc         dd         0x0000005c                                  ; Length of the record
00000000000177d0         dd         0x00001a80                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
00000000000177d4         db         0x2c, 0x63, 2 dup (0xff)                    ; begin 0xdb00
00000000000177d8         db         0x40, 0x03, 2 dup (0x00)                    ; length 0x340 (end at 0xde40)
00000000000177dc         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000177dd         db  0x42 ; 'B'
00000000000177de         db  0x0e ; '.'
00000000000177df         db  0x10 ; '.'
00000000000177e0         db  0x8f ; '.'
00000000000177e1         db  0x02 ; '.'
00000000000177e2         db  0x42 ; 'B'
00000000000177e3         db  0x0e ; '.'
00000000000177e4         db  0x18 ; '.'
00000000000177e5         db  0x8e ; '.'
00000000000177e6         db  0x03 ; '.'
00000000000177e7         db  0x45 ; 'E'
00000000000177e8         db  0x0e ; '.'
00000000000177e9         db  0x20 ; ' '
00000000000177ea         db  0x8d ; '.'
00000000000177eb         db  0x04 ; '.'
00000000000177ec         db  0x42 ; 'B'
00000000000177ed         db  0x0e ; '.'
00000000000177ee         db  0x28 ; '('
00000000000177ef         db  0x8c ; '.'
00000000000177f0         db  0x05 ; '.'
00000000000177f1         db  0x44 ; 'D'
00000000000177f2         db  0x0e ; '.'
00000000000177f3         db  0x30 ; '0'
00000000000177f4         db  0x86 ; '.'
00000000000177f5         db  0x06 ; '.'
00000000000177f6         db  0x41 ; 'A'
00000000000177f7         db  0x0e ; '.'
00000000000177f8         db  0x38 ; '8'
00000000000177f9         db  0x83 ; '.'
00000000000177fa         db  0x07 ; '.'
00000000000177fb         db  0x44 ; 'D'
00000000000177fc         db  0x0e ; '.'
00000000000177fd         db  0xa0 ; '.'
00000000000177fe         db  0x01 ; '.'
00000000000177ff         db  0x03 ; '.'
0000000000017800         db  0x5d ; ']'
0000000000017801         db  0x01 ; '.'
0000000000017802         db  0x0e ; '.'
0000000000017803         db  0xa8 ; '.'
0000000000017804         db  0x01 ; '.'
0000000000017805         db  0x51 ; 'Q'
0000000000017806         db  0x0e ; '.'
0000000000017807         db  0xb0 ; '.'
0000000000017808         db  0x01 ; '.'
0000000000017809         db  0x52 ; 'R'
000000000001780a         db  0x0e ; '.'
000000000001780b         db  0xa8 ; '.'
000000000001780c         db  0x01 ; '.'
000000000001780d         db  0x41 ; 'A'
000000000001780e         db  0x0e ; '.'
000000000001780f         db  0xa0 ; '.'
0000000000017810         db  0x01 ; '.'
0000000000017811         db  0x03 ; '.'
0000000000017812         db  0x94 ; '.'
0000000000017813         db  0x01 ; '.'
0000000000017814         db  0x0a ; '.'
0000000000017815         db  0x0e ; '.'
0000000000017816         db  0x38 ; '8'
0000000000017817         db  0x41 ; 'A'
0000000000017818         db  0x0e ; '.'
0000000000017819         db  0x30 ; '0'
000000000001781a         db  0x41 ; 'A'
000000000001781b         db  0x0e ; '.'
000000000001781c         db  0x28 ; '('
000000000001781d         db  0x42 ; 'B'
000000000001781e         db  0x0e ; '.'
000000000001781f         db  0x20 ; ' '
0000000000017820         db  0x42 ; 'B'
0000000000017821         db  0x0e ; '.'
0000000000017822         db  0x18 ; '.'
0000000000017823         db  0x42 ; 'B'
0000000000017824         db  0x0e ; '.'
0000000000017825         db  0x10 ; '.'
0000000000017826         db  0x42 ; 'B'
0000000000017827         db  0x0e ; '.'
0000000000017828         db  0x08 ; '.'
0000000000017829         db  0x41 ; 'A'
000000000001782a         db  0x0b ; '.'
000000000001782b         db  0x00 ; '.'
000000000001782c         dd         0x0000004c                                  ; Length of the record
0000000000017830         dd         0x00001ae0                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000017834         db         0x0c, 0x66, 2 dup (0xff)                    ; begin 0xde40
0000000000017838         db         0x30, 0x17, 2 dup (0x00)                    ; length 0x1730 (end at 0xf570)
000000000001783c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001783d         db  0x42 ; 'B'
000000000001783e         db  0x0e ; '.'
000000000001783f         db  0x10 ; '.'
0000000000017840         db  0x8f ; '.'
0000000000017841         db  0x02 ; '.'
0000000000017842         db  0x42 ; 'B'
0000000000017843         db  0x0e ; '.'
0000000000017844         db  0x18 ; '.'
0000000000017845         db  0x8e ; '.'
0000000000017846         db  0x03 ; '.'
0000000000017847         db  0x42 ; 'B'
0000000000017848         db  0x0e ; '.'
0000000000017849         db  0x20 ; ' '
000000000001784a         db  0x8d ; '.'
000000000001784b         db  0x04 ; '.'
000000000001784c         db  0x42 ; 'B'
000000000001784d         db  0x0e ; '.'
000000000001784e         db  0x28 ; '('
000000000001784f         db  0x8c ; '.'
0000000000017850         db  0x05 ; '.'
0000000000017851         db  0x44 ; 'D'
0000000000017852         db  0x0e ; '.'
0000000000017853         db  0x30 ; '0'
0000000000017854         db  0x86 ; '.'
0000000000017855         db  0x06 ; '.'
0000000000017856         db  0x41 ; 'A'
0000000000017857         db  0x0e ; '.'
0000000000017858         db  0x38 ; '8'
0000000000017859         db  0x83 ; '.'
000000000001785a         db  0x07 ; '.'
000000000001785b         db  0x52 ; 'R'
000000000001785c         db  0x0e ; '.'
000000000001785d         db  0xf0 ; '.'
000000000001785e         db  0x04 ; '.'
000000000001785f         db  0x03 ; '.'
0000000000017860         db  0x7c ; '|'
0000000000017861         db  0x0b ; '.'
0000000000017862         db  0x0a ; '.'
0000000000017863         db  0x0e ; '.'
0000000000017864         db  0x38 ; '8'
0000000000017865         db  0x41 ; 'A'
0000000000017866         db  0x0e ; '.'
0000000000017867         db  0x30 ; '0'
0000000000017868         db  0x41 ; 'A'
0000000000017869         db  0x0e ; '.'
000000000001786a         db  0x28 ; '('
000000000001786b         db  0x42 ; 'B'
000000000001786c         db  0x0e ; '.'
000000000001786d         db  0x20 ; ' '
000000000001786e         db  0x42 ; 'B'
000000000001786f         db  0x0e ; '.'
0000000000017870         db  0x18 ; '.'
0000000000017871         db  0x42 ; 'B'
0000000000017872         db  0x0e ; '.'
0000000000017873         db  0x10 ; '.'
0000000000017874         db  0x42 ; 'B'
0000000000017875         db  0x0e ; '.'
0000000000017876         db  0x08 ; '.'
0000000000017877         db  0x4b ; 'K'
0000000000017878         db  0x0b ; '.'
0000000000017879         db  0x00 ; '.'
000000000001787a         db  0x00 ; '.'
000000000001787b         db  0x00 ; '.'
000000000001787c         dd         0x0000005c                                  ; Length of the record
0000000000017880         dd         0x00001b30                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000017884         db         0xec, 0x7c, 2 dup (0xff)                    ; begin 0xf570
0000000000017888         db         0x50, 0x08, 2 dup (0x00)                    ; length 0x850 (end at 0xfdc0)
000000000001788c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001788d         db  0x42 ; 'B'
000000000001788e         db  0x0e ; '.'
000000000001788f         db  0x10 ; '.'
0000000000017890         db  0x8f ; '.'
0000000000017891         db  0x02 ; '.'
0000000000017892         db  0x42 ; 'B'
0000000000017893         db  0x0e ; '.'
0000000000017894         db  0x18 ; '.'
0000000000017895         db  0x8e ; '.'
0000000000017896         db  0x03 ; '.'
0000000000017897         db  0x45 ; 'E'
0000000000017898         db  0x0e ; '.'
0000000000017899         db  0x20 ; ' '
000000000001789a         db  0x8d ; '.'
000000000001789b         db  0x04 ; '.'
000000000001789c         db  0x42 ; 'B'
000000000001789d         db  0x0e ; '.'
000000000001789e         db  0x28 ; '('
000000000001789f         db  0x8c ; '.'
00000000000178a0         db  0x05 ; '.'
00000000000178a1         db  0x44 ; 'D'
00000000000178a2         db  0x0e ; '.'
00000000000178a3         db  0x30 ; '0'
00000000000178a4         db  0x86 ; '.'
00000000000178a5         db  0x06 ; '.'
00000000000178a6         db  0x41 ; 'A'
00000000000178a7         db  0x0e ; '.'
00000000000178a8         db  0x38 ; '8'
00000000000178a9         db  0x83 ; '.'
00000000000178aa         db  0x07 ; '.'
00000000000178ab         db  0x55 ; 'U'
00000000000178ac         db  0x0e ; '.'
00000000000178ad         db  0xe0 ; '.'
00000000000178ae         db  0x01 ; '.'
00000000000178af         db  0x02 ; '.'
00000000000178b0         db  0x91 ; '.'
00000000000178b1         db  0x0a ; '.'
00000000000178b2         db  0x0e ; '.'
00000000000178b3         db  0x38 ; '8'
00000000000178b4         db  0x41 ; 'A'
00000000000178b5         db  0x0e ; '.'
00000000000178b6         db  0x30 ; '0'
00000000000178b7         db  0x41 ; 'A'
00000000000178b8         db  0x0e ; '.'
00000000000178b9         db  0x28 ; '('
00000000000178ba         db  0x42 ; 'B'
00000000000178bb         db  0x0e ; '.'
00000000000178bc         db  0x20 ; ' '
00000000000178bd         db  0x42 ; 'B'
00000000000178be         db  0x0e ; '.'
00000000000178bf         db  0x18 ; '.'
00000000000178c0         db  0x42 ; 'B'
00000000000178c1         db  0x0e ; '.'
00000000000178c2         db  0x10 ; '.'
00000000000178c3         db  0x42 ; 'B'
00000000000178c4         db  0x0e ; '.'
00000000000178c5         db  0x08 ; '.'
00000000000178c6         db  0x48 ; 'H'
00000000000178c7         db  0x0b ; '.'
00000000000178c8         db  0x03 ; '.'
00000000000178c9         db  0xc3 ; '.'
00000000000178ca         db  0x05 ; '.'
00000000000178cb         db  0x0e ; '.'
00000000000178cc         db  0xe8 ; '.'
00000000000178cd         db  0x01 ; '.'
00000000000178ce         db  0x4a ; 'J'
00000000000178cf         db  0x0e ; '.'
00000000000178d0         db  0xf0 ; '.'
00000000000178d1         db  0x01 ; '.'
00000000000178d2         db  0x56 ; 'V'
00000000000178d3         db  0x0e ; '.'
00000000000178d4         db  0xe8 ; '.'
00000000000178d5         db  0x01 ; '.'
00000000000178d6         db  0x41 ; 'A'
00000000000178d7         db  0x0e ; '.'
00000000000178d8         db  0xe0 ; '.'
00000000000178d9         db  0x01 ; '.'
00000000000178da         db  0x00 ; '.'
00000000000178db         db  0x00 ; '.'
00000000000178dc         dd         0x00000040                                  ; Length of the record
00000000000178e0         dd         0x00001b90                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
00000000000178e4         db         0xdc, 0x84, 2 dup (0xff)                    ; begin 0xfdc0
00000000000178e8         db         0x5d, 0x02, 2 dup (0x00)                    ; length 0x25d (end at 0x1001d)
00000000000178ec         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000178ed         db  0x42 ; 'B'
00000000000178ee         db  0x0e ; '.'
00000000000178ef         db  0x10 ; '.'
00000000000178f0         db  0x8e ; '.'
00000000000178f1         db  0x02 ; '.'
00000000000178f2         db  0x42 ; 'B'
00000000000178f3         db  0x0e ; '.'
00000000000178f4         db  0x18 ; '.'
00000000000178f5         db  0x8d ; '.'
00000000000178f6         db  0x03 ; '.'
00000000000178f7         db  0x45 ; 'E'
00000000000178f8         db  0x0e ; '.'
00000000000178f9         db  0x20 ; ' '
00000000000178fa         db  0x8c ; '.'
00000000000178fb         db  0x04 ; '.'
00000000000178fc         db  0x41 ; 'A'
00000000000178fd         db  0x0e ; '.'
00000000000178fe         db  0x28 ; '('
00000000000178ff         db  0x86 ; '.'
0000000000017900         db  0x05 ; '.'
0000000000017901         db  0x44 ; 'D'
0000000000017902         db  0x0e ; '.'
0000000000017903         db  0x30 ; '0'
0000000000017904         db  0x83 ; '.'
0000000000017905         db  0x06 ; '.'
0000000000017906         db  0x4a ; 'J'
0000000000017907         db  0x0e ; '.'
0000000000017908         db  0x50 ; 'P'
0000000000017909         db  0x02 ; '.'
000000000001790a         db  0x61 ; 'a'
000000000001790b         db  0x0a ; '.'
000000000001790c         db  0x0e ; '.'
000000000001790d         db  0x30 ; '0'
000000000001790e         db  0x41 ; 'A'
000000000001790f         db  0x0e ; '.'
0000000000017910         db  0x28 ; '('
0000000000017911         db  0x41 ; 'A'
0000000000017912         db  0x0e ; '.'
0000000000017913         db  0x20 ; ' '
0000000000017914         db  0x42 ; 'B'
0000000000017915         db  0x0e ; '.'
0000000000017916         db  0x18 ; '.'
0000000000017917         db  0x42 ; 'B'
0000000000017918         db  0x0e ; '.'
0000000000017919         db  0x10 ; '.'
000000000001791a         db  0x42 ; 'B'
000000000001791b         db  0x0e ; '.'
000000000001791c         db  0x08 ; '.'
000000000001791d         db  0x47 ; 'G'
000000000001791e         db  0x0b ; '.'
000000000001791f         db  0x00 ; '.'
0000000000017920         dd         0x00000048                                  ; Length of the record
0000000000017924         dd         0x00001bd4                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000017928         db         0xf8, 0x86, 2 dup (0xff)                    ; begin 0x10020
000000000001792c         db         0xfd, 0x06, 2 dup (0x00)                    ; length 0x6fd (end at 0x1071d)
0000000000017930         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017931         db  0x42 ; 'B'
0000000000017932         db  0x0e ; '.'
0000000000017933         db  0x10 ; '.'
0000000000017934         db  0x8f ; '.'
0000000000017935         db  0x02 ; '.'
0000000000017936         db  0x42 ; 'B'
0000000000017937         db  0x0e ; '.'
0000000000017938         db  0x18 ; '.'
0000000000017939         db  0x8e ; '.'
000000000001793a         db  0x03 ; '.'
000000000001793b         db  0x42 ; 'B'
000000000001793c         db  0x0e ; '.'
000000000001793d         db  0x20 ; ' '
000000000001793e         db  0x8d ; '.'
000000000001793f         db  0x04 ; '.'
0000000000017940         db  0x42 ; 'B'
0000000000017941         db  0x0e ; '.'
0000000000017942         db  0x28 ; '('
0000000000017943         db  0x8c ; '.'
0000000000017944         db  0x05 ; '.'
0000000000017945         db  0x41 ; 'A'
0000000000017946         db  0x0e ; '.'
0000000000017947         db  0x30 ; '0'
0000000000017948         db  0x86 ; '.'
0000000000017949         db  0x06 ; '.'
000000000001794a         db  0x41 ; 'A'
000000000001794b         db  0x0e ; '.'
000000000001794c         db  0x38 ; '8'
000000000001794d         db  0x83 ; '.'
000000000001794e         db  0x07 ; '.'
000000000001794f         db  0x47 ; 'G'
0000000000017950         db  0x0e ; '.'
0000000000017951         db  0x70 ; 'p'
0000000000017952         db  0x02 ; '.'
0000000000017953         db  0xcb ; '.'
0000000000017954         db  0x0a ; '.'
0000000000017955         db  0x0e ; '.'
0000000000017956         db  0x38 ; '8'
0000000000017957         db  0x41 ; 'A'
0000000000017958         db  0x0e ; '.'
0000000000017959         db  0x30 ; '0'
000000000001795a         db  0x41 ; 'A'
000000000001795b         db  0x0e ; '.'
000000000001795c         db  0x28 ; '('
000000000001795d         db  0x42 ; 'B'
000000000001795e         db  0x0e ; '.'
000000000001795f         db  0x20 ; ' '
0000000000017960         db  0x42 ; 'B'
0000000000017961         db  0x0e ; '.'
0000000000017962         db  0x18 ; '.'
0000000000017963         db  0x42 ; 'B'
0000000000017964         db  0x0e ; '.'
0000000000017965         db  0x10 ; '.'
0000000000017966         db  0x42 ; 'B'
0000000000017967         db  0x0e ; '.'
0000000000017968         db  0x08 ; '.'
0000000000017969         db  0x4a ; 'J'
000000000001796a         db  0x0b ; '.'
000000000001796b         db  0x00 ; '.'
000000000001796c         dd         0x0000003c                                  ; Length of the record
0000000000017970         dd         0x00001c20                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000017974         db         0xac, 0x8d, 2 dup (0xff)                    ; begin 0x10720
0000000000017978         db         0xb6, 3 dup (0x00)                          ; length 0xb6 (end at 0x107d6)
000000000001797c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001797d         db  0x42 ; 'B'
000000000001797e         db  0x0e ; '.'
000000000001797f         db  0x10 ; '.'
0000000000017980         db  0x8e ; '.'
0000000000017981         db  0x02 ; '.'
0000000000017982         db  0x45 ; 'E'
0000000000017983         db  0x0e ; '.'
0000000000017984         db  0x18 ; '.'
0000000000017985         db  0x8d ; '.'
0000000000017986         db  0x03 ; '.'
0000000000017987         db  0x45 ; 'E'
0000000000017988         db  0x0e ; '.'
0000000000017989         db  0x20 ; ' '
000000000001798a         db  0x8c ; '.'
000000000001798b         db  0x04 ; '.'
000000000001798c         db  0x48 ; 'H'
000000000001798d         db  0x0e ; '.'
000000000001798e         db  0x28 ; '('
000000000001798f         db  0x86 ; '.'
0000000000017990         db  0x05 ; '.'
0000000000017991         db  0x44 ; 'D'
0000000000017992         db  0x0e ; '.'
0000000000017993         db  0x30 ; '0'
0000000000017994         db  0x83 ; '.'
0000000000017995         db  0x06 ; '.'
0000000000017996         db  0x02 ; '.'
0000000000017997         db  0x83 ; '.'
0000000000017998         db  0x0a ; '.'
0000000000017999         db  0x0e ; '.'
000000000001799a         db  0x28 ; '('
000000000001799b         db  0x41 ; 'A'
000000000001799c         db  0x0e ; '.'
000000000001799d         db  0x20 ; ' '
000000000001799e         db  0x42 ; 'B'
000000000001799f         db  0x0e ; '.'
00000000000179a0         db  0x18 ; '.'
00000000000179a1         db  0x42 ; 'B'
00000000000179a2         db  0x0e ; '.'
00000000000179a3         db  0x10 ; '.'
00000000000179a4         db  0x42 ; 'B'
00000000000179a5         db  0x0e ; '.'
00000000000179a6         db  0x08 ; '.'
00000000000179a7         db  0x46 ; 'F'
00000000000179a8         db  0x0b ; '.'
00000000000179a9         db  0x00 ; '.'
00000000000179aa         db  0x00 ; '.'
00000000000179ab         db  0x00 ; '.'
00000000000179ac         dd         0x0000005c                                  ; Length of the record
00000000000179b0         dd         0x00001c60                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
00000000000179b4         db         0x2c, 0x8e, 2 dup (0xff)                    ; begin 0x107e0
00000000000179b8         db         0xd3, 0x14, 2 dup (0x00)                    ; length 0x14d3 (end at 0x11cb3)
00000000000179bc         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000179bd         db  0x42 ; 'B'
00000000000179be         db  0x0e ; '.'
00000000000179bf         db  0x10 ; '.'
00000000000179c0         db  0x8f ; '.'
00000000000179c1         db  0x02 ; '.'
00000000000179c2         db  0x42 ; 'B'
00000000000179c3         db  0x0e ; '.'
00000000000179c4         db  0x18 ; '.'
00000000000179c5         db  0x8e ; '.'
00000000000179c6         db  0x03 ; '.'
00000000000179c7         db  0x42 ; 'B'
00000000000179c8         db  0x0e ; '.'
00000000000179c9         db  0x20 ; ' '
00000000000179ca         db  0x8d ; '.'
00000000000179cb         db  0x04 ; '.'
00000000000179cc         db  0x42 ; 'B'
00000000000179cd         db  0x0e ; '.'
00000000000179ce         db  0x28 ; '('
00000000000179cf         db  0x8c ; '.'
00000000000179d0         db  0x05 ; '.'
00000000000179d1         db  0x41 ; 'A'
00000000000179d2         db  0x0e ; '.'
00000000000179d3         db  0x30 ; '0'
00000000000179d4         db  0x86 ; '.'
00000000000179d5         db  0x06 ; '.'
00000000000179d6         db  0x41 ; 'A'
00000000000179d7         db  0x0e ; '.'
00000000000179d8         db  0x38 ; '8'
00000000000179d9         db  0x83 ; '.'
00000000000179da         db  0x07 ; '.'
00000000000179db         db  0x47 ; 'G'
00000000000179dc         db  0x0e ; '.'
00000000000179dd         db  0xe0 ; '.'
00000000000179de         db  0x02 ; '.'
00000000000179df         db  0x03 ; '.'
00000000000179e0         db  0x22 ; '"'
00000000000179e1         db  0x01 ; '.'
00000000000179e2         db  0x0a ; '.'
00000000000179e3         db  0x0e ; '.'
00000000000179e4         db  0x38 ; '8'
00000000000179e5         db  0x41 ; 'A'
00000000000179e6         db  0x0e ; '.'
00000000000179e7         db  0x30 ; '0'
00000000000179e8         db  0x41 ; 'A'
00000000000179e9         db  0x0e ; '.'
00000000000179ea         db  0x28 ; '('
00000000000179eb         db  0x42 ; 'B'
00000000000179ec         db  0x0e ; '.'
00000000000179ed         db  0x20 ; ' '
00000000000179ee         db  0x42 ; 'B'
00000000000179ef         db  0x0e ; '.'
00000000000179f0         db  0x18 ; '.'
00000000000179f1         db  0x42 ; 'B'
00000000000179f2         db  0x0e ; '.'
00000000000179f3         db  0x10 ; '.'
00000000000179f4         db  0x42 ; 'B'
00000000000179f5         db  0x0e ; '.'
00000000000179f6         db  0x08 ; '.'
00000000000179f7         db  0x41 ; 'A'
00000000000179f8         db  0x0b ; '.'
00000000000179f9         db  0x03 ; '.'
00000000000179fa         db  0xbf ; '.'
00000000000179fb         db  0x0b ; '.'
00000000000179fc         db  0x0e ; '.'
00000000000179fd         db  0xe8 ; '.'
00000000000179fe         db  0x02 ; '.'
00000000000179ff         db  0x4c ; 'L'
0000000000017a00         db  0x0e ; '.'
0000000000017a01         db  0xf0 ; '.'
0000000000017a02         db  0x02 ; '.'
0000000000017a03         db  0x64 ; 'd'
0000000000017a04         db  0x0e ; '.'
0000000000017a05         db  0xe8 ; '.'
0000000000017a06         db  0x02 ; '.'
0000000000017a07         db  0x42 ; 'B'
0000000000017a08         db  0x0e ; '.'
0000000000017a09         db  0xe0 ; '.'
0000000000017a0a         db  0x02 ; '.'
0000000000017a0b         db  0x00 ; '.'
0000000000017a0c         dd         0x00000048                                  ; Length of the record
0000000000017a10         dd         0x00001cc0                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000017a14         db         0xac, 0xa2, 2 dup (0xff)                    ; begin 0x11cc0
0000000000017a18         db         0x82, 0x01, 2 dup (0x00)                    ; length 0x182 (end at 0x11e42)
0000000000017a1c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017a1d         db  0x42 ; 'B'
0000000000017a1e         db  0x0e ; '.'
0000000000017a1f         db  0x10 ; '.'
0000000000017a20         db  0x8f ; '.'
0000000000017a21         db  0x02 ; '.'
0000000000017a22         db  0x42 ; 'B'
0000000000017a23         db  0x0e ; '.'
0000000000017a24         db  0x18 ; '.'
0000000000017a25         db  0x8e ; '.'
0000000000017a26         db  0x03 ; '.'
0000000000017a27         db  0x45 ; 'E'
0000000000017a28         db  0x0e ; '.'
0000000000017a29         db  0x20 ; ' '
0000000000017a2a         db  0x8d ; '.'
0000000000017a2b         db  0x04 ; '.'
0000000000017a2c         db  0x42 ; 'B'
0000000000017a2d         db  0x0e ; '.'
0000000000017a2e         db  0x28 ; '('
0000000000017a2f         db  0x8c ; '.'
0000000000017a30         db  0x05 ; '.'
0000000000017a31         db  0x44 ; 'D'
0000000000017a32         db  0x0e ; '.'
0000000000017a33         db  0x30 ; '0'
0000000000017a34         db  0x86 ; '.'
0000000000017a35         db  0x06 ; '.'
0000000000017a36         db  0x41 ; 'A'
0000000000017a37         db  0x0e ; '.'
0000000000017a38         db  0x38 ; '8'
0000000000017a39         db  0x83 ; '.'
0000000000017a3a         db  0x07 ; '.'
0000000000017a3b         db  0x4d ; 'M'
0000000000017a3c         db  0x0e ; '.'
0000000000017a3d         db  0x80 ; '.'
0000000000017a3e         db  0x01 ; '.'
0000000000017a3f         db  0x02 ; '.'
0000000000017a40         db  0xfa ; '.'
0000000000017a41         db  0x0a ; '.'
0000000000017a42         db  0x0e ; '.'
0000000000017a43         db  0x38 ; '8'
0000000000017a44         db  0x41 ; 'A'
0000000000017a45         db  0x0e ; '.'
0000000000017a46         db  0x30 ; '0'
0000000000017a47         db  0x41 ; 'A'
0000000000017a48         db  0x0e ; '.'
0000000000017a49         db  0x28 ; '('
0000000000017a4a         db  0x42 ; 'B'
0000000000017a4b         db  0x0e ; '.'
0000000000017a4c         db  0x20 ; ' '
0000000000017a4d         db  0x42 ; 'B'
0000000000017a4e         db  0x0e ; '.'
0000000000017a4f         db  0x18 ; '.'
0000000000017a50         db  0x42 ; 'B'
0000000000017a51         db  0x0e ; '.'
0000000000017a52         db  0x10 ; '.'
0000000000017a53         db  0x42 ; 'B'
0000000000017a54         db  0x0e ; '.'
0000000000017a55         db  0x08 ; '.'
0000000000017a56         db  0x47 ; 'G'
0000000000017a57         db  0x0b ; '.'
0000000000017a58         dd         0x0000004c                                  ; Length of the record
0000000000017a5c         dd         0x00001d0c                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000017a60         db         0xf0, 0xa3, 2 dup (0xff)                    ; begin 0x11e50
0000000000017a64         db         0x7f, 0x01, 2 dup (0x00)                    ; length 0x17f (end at 0x11fcf)
0000000000017a68         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017a69         db  0x42 ; 'B'
0000000000017a6a         db  0x0e ; '.'
0000000000017a6b         db  0x10 ; '.'
0000000000017a6c         db  0x8f ; '.'
0000000000017a6d         db  0x02 ; '.'
0000000000017a6e         db  0x42 ; 'B'
0000000000017a6f         db  0x0e ; '.'
0000000000017a70         db  0x18 ; '.'
0000000000017a71         db  0x8e ; '.'
0000000000017a72         db  0x03 ; '.'
0000000000017a73         db  0x45 ; 'E'
0000000000017a74         db  0x0e ; '.'
0000000000017a75         db  0x20 ; ' '
0000000000017a76         db  0x8d ; '.'
0000000000017a77         db  0x04 ; '.'
0000000000017a78         db  0x42 ; 'B'
0000000000017a79         db  0x0e ; '.'
0000000000017a7a         db  0x28 ; '('
0000000000017a7b         db  0x8c ; '.'
0000000000017a7c         db  0x05 ; '.'
0000000000017a7d         db  0x44 ; 'D'
0000000000017a7e         db  0x0e ; '.'
0000000000017a7f         db  0x30 ; '0'
0000000000017a80         db  0x86 ; '.'
0000000000017a81         db  0x06 ; '.'
0000000000017a82         db  0x41 ; 'A'
0000000000017a83         db  0x0e ; '.'
0000000000017a84         db  0x38 ; '8'
0000000000017a85         db  0x83 ; '.'
0000000000017a86         db  0x07 ; '.'
0000000000017a87         db  0x4a ; 'J'
0000000000017a88         db  0x0e ; '.'
0000000000017a89         db  0x90 ; '.'
0000000000017a8a         db  0x01 ; '.'
0000000000017a8b         db  0x03 ; '.'
0000000000017a8c         db  0x45 ; 'E'
0000000000017a8d         db  0x01 ; '.'
0000000000017a8e         db  0x0a ; '.'
0000000000017a8f         db  0x0e ; '.'
0000000000017a90         db  0x38 ; '8'
0000000000017a91         db  0x41 ; 'A'
0000000000017a92         db  0x0e ; '.'
0000000000017a93         db  0x30 ; '0'
0000000000017a94         db  0x41 ; 'A'
0000000000017a95         db  0x0e ; '.'
0000000000017a96         db  0x28 ; '('
0000000000017a97         db  0x42 ; 'B'
0000000000017a98         db  0x0e ; '.'
0000000000017a99         db  0x20 ; ' '
0000000000017a9a         db  0x42 ; 'B'
0000000000017a9b         db  0x0e ; '.'
0000000000017a9c         db  0x18 ; '.'
0000000000017a9d         db  0x42 ; 'B'
0000000000017a9e         db  0x0e ; '.'
0000000000017a9f         db  0x10 ; '.'
0000000000017aa0         db  0x42 ; 'B'
0000000000017aa1         db  0x0e ; '.'
0000000000017aa2         db  0x08 ; '.'
0000000000017aa3         db  0x47 ; 'G'
0000000000017aa4         db  0x0b ; '.'
0000000000017aa5         db  0x00 ; '.'
0000000000017aa6         db  0x00 ; '.'
0000000000017aa7         db  0x00 ; '.'
0000000000017aa8         dd         0x0000004c                                  ; Length of the record
0000000000017aac         dd         0x00001d5c                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000017ab0         db         0x20, 0xa5, 2 dup (0xff)                    ; begin 0x11fd0
0000000000017ab4         db         0xf5, 0x10, 2 dup (0x00)                    ; length 0x10f5 (end at 0x130c5)
0000000000017ab8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017ab9         db  0x42 ; 'B'
0000000000017aba         db  0x0e ; '.'
0000000000017abb         db  0x10 ; '.'
0000000000017abc         db  0x8f ; '.'
0000000000017abd         db  0x02 ; '.'
0000000000017abe         db  0x42 ; 'B'
0000000000017abf         db  0x0e ; '.'
0000000000017ac0         db  0x18 ; '.'
0000000000017ac1         db  0x8e ; '.'
0000000000017ac2         db  0x03 ; '.'
0000000000017ac3         db  0x42 ; 'B'
0000000000017ac4         db  0x0e ; '.'
0000000000017ac5         db  0x20 ; ' '
0000000000017ac6         db  0x8d ; '.'
0000000000017ac7         db  0x04 ; '.'
0000000000017ac8         db  0x42 ; 'B'
0000000000017ac9         db  0x0e ; '.'
0000000000017aca         db  0x28 ; '('
0000000000017acb         db  0x8c ; '.'
0000000000017acc         db  0x05 ; '.'
0000000000017acd         db  0x41 ; 'A'
0000000000017ace         db  0x0e ; '.'
0000000000017acf         db  0x30 ; '0'
0000000000017ad0         db  0x86 ; '.'
0000000000017ad1         db  0x06 ; '.'
0000000000017ad2         db  0x41 ; 'A'
0000000000017ad3         db  0x0e ; '.'
0000000000017ad4         db  0x38 ; '8'
0000000000017ad5         db  0x83 ; '.'
0000000000017ad6         db  0x07 ; '.'
0000000000017ad7         db  0x47 ; 'G'
0000000000017ad8         db  0x0e ; '.'
0000000000017ad9         db  0xe0 ; '.'
0000000000017ada         db  0x02 ; '.'
0000000000017adb         db  0x03 ; '.'
0000000000017adc         db  0xa9 ; '.'
0000000000017add         db  0x03 ; '.'
0000000000017ade         db  0x0a ; '.'
0000000000017adf         db  0x0e ; '.'
0000000000017ae0         db  0x38 ; '8'
0000000000017ae1         db  0x41 ; 'A'
0000000000017ae2         db  0x0e ; '.'
0000000000017ae3         db  0x30 ; '0'
0000000000017ae4         db  0x41 ; 'A'
0000000000017ae5         db  0x0e ; '.'
0000000000017ae6         db  0x28 ; '('
0000000000017ae7         db  0x42 ; 'B'
0000000000017ae8         db  0x0e ; '.'
0000000000017ae9         db  0x20 ; ' '
0000000000017aea         db  0x42 ; 'B'
0000000000017aeb         db  0x0e ; '.'
0000000000017aec         db  0x18 ; '.'
0000000000017aed         db  0x42 ; 'B'
0000000000017aee         db  0x0e ; '.'
0000000000017aef         db  0x10 ; '.'
0000000000017af0         db  0x42 ; 'B'
0000000000017af1         db  0x0e ; '.'
0000000000017af2         db  0x08 ; '.'
0000000000017af3         db  0x41 ; 'A'
0000000000017af4         db  0x0b ; '.'
0000000000017af5         db  0x00 ; '.'
0000000000017af6         db  0x00 ; '.'
0000000000017af7         db  0x00 ; '.'
0000000000017af8         dd         0x0000001c                                  ; Length of the record
0000000000017afc         dd         0x00001dac                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000017b00         db         0xd0, 0xb5, 2 dup (0xff)                    ; begin 0x130d0
0000000000017b04         db         0x6f, 3 dup (0x00)                          ; length 0x6f (end at 0x1313f)
0000000000017b08         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017b09         db  0x44 ; 'D'
0000000000017b0a         db  0x0e ; '.'
0000000000017b0b         db  0x10 ; '.'
0000000000017b0c         db  0x02 ; '.'
0000000000017b0d         db  0x59 ; 'Y'
0000000000017b0e         db  0x0a ; '.'
0000000000017b0f         db  0x0e ; '.'
0000000000017b10         db  0x08 ; '.'
0000000000017b11         db  0x4b ; 'K'
0000000000017b12         db  0x0b ; '.'
0000000000017b13         db  0x46 ; 'F'
0000000000017b14         db  0x0e ; '.'
0000000000017b15         db  0x08 ; '.'
0000000000017b16         db  0x00 ; '.'
0000000000017b17         db  0x00 ; '.'
0000000000017b18         dd         0x00000010                                  ; Length of the record
0000000000017b1c         dd         0x00001dcc                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000017b20         db         0x20, 0xb6, 2 dup (0xff)                    ; begin 0x13140
0000000000017b24         db         0x0f, 3 dup (0x00)                          ; length 0xf (end at 0x1314f)
0000000000017b28         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017b29         align      4
0000000000017b2c         dd         0x00000028                                  ; Length of the record
0000000000017b30         dd         0x00001de0                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000017b34         db         0x1c, 0xb6, 2 dup (0xff)                    ; begin 0x13150
0000000000017b38         db         0xc3, 3 dup (0x00)                          ; length 0xc3 (end at 0x13213)
0000000000017b3c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017b3d         db  0x42 ; 'B'
0000000000017b3e         db  0x0e ; '.'
0000000000017b3f         db  0x10 ; '.'
0000000000017b40         db  0x8c ; '.'
0000000000017b41         db  0x02 ; '.'
0000000000017b42         db  0x41 ; 'A'
0000000000017b43         db  0x0e ; '.'
0000000000017b44         db  0x18 ; '.'
0000000000017b45         db  0x86 ; '.'
0000000000017b46         db  0x03 ; '.'
0000000000017b47         db  0x43 ; 'C'
0000000000017b48         db  0x0e ; '.'
0000000000017b49         db  0x20 ; ' '
0000000000017b4a         db  0x83 ; '.'
0000000000017b4b         db  0x04 ; '.'
0000000000017b4c         db  0x02 ; '.'
0000000000017b4d         db  0xb9 ; '.'
0000000000017b4e         db  0x0e ; '.'
0000000000017b4f         db  0x18 ; '.'
0000000000017b50         db  0x41 ; 'A'
0000000000017b51         db  0x0e ; '.'
0000000000017b52         db  0x10 ; '.'
0000000000017b53         db  0x42 ; 'B'
0000000000017b54         db  0x0e ; '.'
0000000000017b55         db  0x08 ; '.'
0000000000017b56         db  0x00 ; '.'
0000000000017b57         db  0x00 ; '.'
0000000000017b58         dd         0x0000005c                                  ; Length of the record
0000000000017b5c         dd         0x00001e0c                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000017b60         db         0xc0, 0xb6, 2 dup (0xff)                    ; begin 0x13220
0000000000017b64         db         0x7f, 0x04, 2 dup (0x00)                    ; length 0x47f (end at 0x1369f)
0000000000017b68         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017b69         db  0x42 ; 'B'
0000000000017b6a         db  0x0e ; '.'
0000000000017b6b         db  0x10 ; '.'
0000000000017b6c         db  0x8f ; '.'
0000000000017b6d         db  0x02 ; '.'
0000000000017b6e         db  0x42 ; 'B'
0000000000017b6f         db  0x0e ; '.'
0000000000017b70         db  0x18 ; '.'
0000000000017b71         db  0x8e ; '.'
0000000000017b72         db  0x03 ; '.'
0000000000017b73         db  0x45 ; 'E'
0000000000017b74         db  0x0e ; '.'
0000000000017b75         db  0x20 ; ' '
0000000000017b76         db  0x8d ; '.'
0000000000017b77         db  0x04 ; '.'
0000000000017b78         db  0x42 ; 'B'
0000000000017b79         db  0x0e ; '.'
0000000000017b7a         db  0x28 ; '('
0000000000017b7b         db  0x8c ; '.'
0000000000017b7c         db  0x05 ; '.'
0000000000017b7d         db  0x44 ; 'D'
0000000000017b7e         db  0x0e ; '.'
0000000000017b7f         db  0x30 ; '0'
0000000000017b80         db  0x86 ; '.'
0000000000017b81         db  0x06 ; '.'
0000000000017b82         db  0x41 ; 'A'
0000000000017b83         db  0x0e ; '.'
0000000000017b84         db  0x38 ; '8'
0000000000017b85         db  0x83 ; '.'
0000000000017b86         db  0x07 ; '.'
0000000000017b87         db  0x44 ; 'D'
0000000000017b88         db  0x0e ; '.'
0000000000017b89         db  0x70 ; 'p'
0000000000017b8a         db  0x02 ; '.'
0000000000017b8b         db  0xd4 ; '.'
0000000000017b8c         db  0x0e ; '.'
0000000000017b8d         db  0x78 ; 'x'
0000000000017b8e         db  0x4b ; 'K'
0000000000017b8f         db  0x0e ; '.'
0000000000017b90         db  0x80 ; '.'
0000000000017b91         db  0x01 ; '.'
0000000000017b92         db  0x41 ; 'A'
0000000000017b93         db  0x0e ; '.'
0000000000017b94         db  0x88 ; '.'
0000000000017b95         db  0x01 ; '.'
0000000000017b96         db  0x42 ; 'B'
0000000000017b97         db  0x0e ; '.'
0000000000017b98         db  0x90 ; '.'
0000000000017b99         db  0x01 ; '.'
0000000000017b9a         db  0x5d ; ']'
0000000000017b9b         db  0x0e ; '.'
0000000000017b9c         db  0x70 ; 'p'
0000000000017b9d         db  0x63 ; 'c'
0000000000017b9e         db  0x0a ; '.'
0000000000017b9f         db  0x0e ; '.'
0000000000017ba0         db  0x38 ; '8'
0000000000017ba1         db  0x44 ; 'D'
0000000000017ba2         db  0x0e ; '.'
0000000000017ba3         db  0x30 ; '0'
0000000000017ba4         db  0x41 ; 'A'
0000000000017ba5         db  0x0e ; '.'
0000000000017ba6         db  0x28 ; '('
0000000000017ba7         db  0x42 ; 'B'
0000000000017ba8         db  0x0e ; '.'
0000000000017ba9         db  0x20 ; ' '
0000000000017baa         db  0x42 ; 'B'
0000000000017bab         db  0x0e ; '.'
0000000000017bac         db  0x18 ; '.'
0000000000017bad         db  0x42 ; 'B'
0000000000017bae         db  0x0e ; '.'
0000000000017baf         db  0x10 ; '.'
0000000000017bb0         db  0x42 ; 'B'
0000000000017bb1         db  0x0e ; '.'
0000000000017bb2         db  0x08 ; '.'
0000000000017bb3         db  0x45 ; 'E'
0000000000017bb4         db  0x0b ; '.'
0000000000017bb5         db  0x00 ; '.'
0000000000017bb6         db  0x00 ; '.'
0000000000017bb7         db  0x00 ; '.'
0000000000017bb8         dd         0x00000054                                  ; Length of the record
0000000000017bbc         dd         0x00001e6c                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000017bc0         db         0xe0, 0xba, 2 dup (0xff)                    ; begin 0x136a0
0000000000017bc4         db         0x1b, 0x01, 2 dup (0x00)                    ; length 0x11b (end at 0x137bb)
0000000000017bc8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017bc9         db  0x42 ; 'B'
0000000000017bca         db  0x0e ; '.'
0000000000017bcb         db  0x10 ; '.'
0000000000017bcc         db  0x8f ; '.'
0000000000017bcd         db  0x02 ; '.'
0000000000017bce         db  0x42 ; 'B'
0000000000017bcf         db  0x0e ; '.'
0000000000017bd0         db  0x18 ; '.'
0000000000017bd1         db  0x8e ; '.'
0000000000017bd2         db  0x03 ; '.'
0000000000017bd3         db  0x42 ; 'B'
0000000000017bd4         db  0x0e ; '.'
0000000000017bd5         db  0x20 ; ' '
0000000000017bd6         db  0x8d ; '.'
0000000000017bd7         db  0x04 ; '.'
0000000000017bd8         db  0x42 ; 'B'
0000000000017bd9         db  0x0e ; '.'
0000000000017bda         db  0x28 ; '('
0000000000017bdb         db  0x8c ; '.'
0000000000017bdc         db  0x05 ; '.'
0000000000017bdd         db  0x44 ; 'D'
0000000000017bde         db  0x0e ; '.'
0000000000017bdf         db  0x30 ; '0'
0000000000017be0         db  0x86 ; '.'
0000000000017be1         db  0x06 ; '.'
0000000000017be2         db  0x41 ; 'A'
0000000000017be3         db  0x0e ; '.'
0000000000017be4         db  0x38 ; '8'
0000000000017be5         db  0x83 ; '.'
0000000000017be6         db  0x07 ; '.'
0000000000017be7         db  0x4d ; 'M'
0000000000017be8         db  0x0e ; '.'
0000000000017be9         db  0x60 ; '`'
0000000000017bea         db  0x02 ; '.'
0000000000017beb         db  0x5a ; 'Z'
0000000000017bec         db  0x0e ; '.'
0000000000017bed         db  0x68 ; 'h'
0000000000017bee         db  0x44 ; 'D'
0000000000017bef         db  0x0e ; '.'
0000000000017bf0         db  0x70 ; 'p'
0000000000017bf1         db  0x61 ; 'a'
0000000000017bf2         db  0x0e ; '.'
0000000000017bf3         db  0x68 ; 'h'
0000000000017bf4         db  0x41 ; 'A'
0000000000017bf5         db  0x0e ; '.'
0000000000017bf6         db  0x60 ; '`'
0000000000017bf7         db  0x44 ; 'D'
0000000000017bf8         db  0x0a ; '.'
0000000000017bf9         db  0x0e ; '.'
0000000000017bfa         db  0x38 ; '8'
0000000000017bfb         db  0x44 ; 'D'
0000000000017bfc         db  0x0e ; '.'
0000000000017bfd         db  0x30 ; '0'
0000000000017bfe         db  0x41 ; 'A'
0000000000017bff         db  0x0e ; '.'
0000000000017c00         db  0x28 ; '('
0000000000017c01         db  0x42 ; 'B'
0000000000017c02         db  0x0e ; '.'
0000000000017c03         db  0x20 ; ' '
0000000000017c04         db  0x42 ; 'B'
0000000000017c05         db  0x0e ; '.'
0000000000017c06         db  0x18 ; '.'
0000000000017c07         db  0x42 ; 'B'
0000000000017c08         db  0x0e ; '.'
0000000000017c09         db  0x10 ; '.'
0000000000017c0a         db  0x42 ; 'B'
0000000000017c0b         db  0x0e ; '.'
0000000000017c0c         db  0x08 ; '.'
0000000000017c0d         db  0x45 ; 'E'
0000000000017c0e         db  0x0b ; '.'
0000000000017c0f         db  0x00 ; '.'
0000000000017c10         dd         0x00000048                                  ; Length of the record
0000000000017c14         dd         0x00001ec4                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000017c18         db         0xa8, 0xbb, 2 dup (0xff)                    ; begin 0x137c0
0000000000017c1c         db         0x10, 0x01, 2 dup (0x00)                    ; length 0x110 (end at 0x138d0)
0000000000017c20         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017c21         db  0x44 ; 'D'
0000000000017c22         db  0x0e ; '.'
0000000000017c23         db  0x10 ; '.'
0000000000017c24         db  0x8e ; '.'
0000000000017c25         db  0x02 ; '.'
0000000000017c26         db  0x42 ; 'B'
0000000000017c27         db  0x0e ; '.'
0000000000017c28         db  0x18 ; '.'
0000000000017c29         db  0x8d ; '.'
0000000000017c2a         db  0x03 ; '.'
0000000000017c2b         db  0x45 ; 'E'
0000000000017c2c         db  0x0e ; '.'
0000000000017c2d         db  0x20 ; ' '
0000000000017c2e         db  0x8c ; '.'
0000000000017c2f         db  0x04 ; '.'
0000000000017c30         db  0x41 ; 'A'
0000000000017c31         db  0x0e ; '.'
0000000000017c32         db  0x28 ; '('
0000000000017c33         db  0x86 ; '.'
0000000000017c34         db  0x05 ; '.'
0000000000017c35         db  0x44 ; 'D'
0000000000017c36         db  0x0e ; '.'
0000000000017c37         db  0x30 ; '0'
0000000000017c38         db  0x83 ; '.'
0000000000017c39         db  0x06 ; '.'
0000000000017c3a         db  0x02 ; '.'
0000000000017c3b         db  0xad ; '.'
0000000000017c3c         db  0x0a ; '.'
0000000000017c3d         db  0x0e ; '.'
0000000000017c3e         db  0x28 ; '('
0000000000017c3f         db  0x43 ; 'C'
0000000000017c40         db  0x0e ; '.'
0000000000017c41         db  0x20 ; ' '
0000000000017c42         db  0x42 ; 'B'
0000000000017c43         db  0x0e ; '.'
0000000000017c44         db  0x18 ; '.'
0000000000017c45         db  0x42 ; 'B'
0000000000017c46         db  0x0e ; '.'
0000000000017c47         db  0x10 ; '.'
0000000000017c48         db  0x42 ; 'B'
0000000000017c49         db  0x0e ; '.'
0000000000017c4a         db  0x08 ; '.'
0000000000017c4b         db  0x4a ; 'J'
0000000000017c4c         db  0x0b ; '.'
0000000000017c4d         db  0x76 ; 'v'
0000000000017c4e         db  0x0e ; '.'
0000000000017c4f         db  0x28 ; '('
0000000000017c50         db  0x43 ; 'C'
0000000000017c51         db  0x0e ; '.'
0000000000017c52         db  0x20 ; ' '
0000000000017c53         db  0x42 ; 'B'
0000000000017c54         db  0x0e ; '.'
0000000000017c55         db  0x18 ; '.'
0000000000017c56         db  0x42 ; 'B'
0000000000017c57         db  0x0e ; '.'
0000000000017c58         db  0x10 ; '.'
0000000000017c59         db  0x42 ; 'B'
0000000000017c5a         db  0x0e ; '.'
0000000000017c5b         db  0x08 ; '.'
0000000000017c5c         dd         0x00000038                                  ; Length of the record
0000000000017c60         dd         0x00001f10                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000017c64         db         0x6c, 0xbc, 2 dup (0xff)                    ; begin 0x138d0
0000000000017c68         db         0x85, 3 dup (0x00)                          ; length 0x85 (end at 0x13955)
0000000000017c6c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017c6d         db  0x42 ; 'B'
0000000000017c6e         db  0x0e ; '.'
0000000000017c6f         db  0x10 ; '.'
0000000000017c70         db  0x8d ; '.'
0000000000017c71         db  0x02 ; '.'
0000000000017c72         db  0x42 ; 'B'
0000000000017c73         db  0x0e ; '.'
0000000000017c74         db  0x18 ; '.'
0000000000017c75         db  0x8c ; '.'
0000000000017c76         db  0x03 ; '.'
0000000000017c77         db  0x41 ; 'A'
0000000000017c78         db  0x0e ; '.'
0000000000017c79         db  0x20 ; ' '
0000000000017c7a         db  0x86 ; '.'
0000000000017c7b         db  0x04 ; '.'
0000000000017c7c         db  0x41 ; 'A'
0000000000017c7d         db  0x0e ; '.'
0000000000017c7e         db  0x28 ; '('
0000000000017c7f         db  0x83 ; '.'
0000000000017c80         db  0x05 ; '.'
0000000000017c81         db  0x44 ; 'D'
0000000000017c82         db  0x0e ; '.'
0000000000017c83         db  0x30 ; '0'
0000000000017c84         db  0x02 ; '.'
0000000000017c85         db  0x57 ; 'W'
0000000000017c86         db  0x0a ; '.'
0000000000017c87         db  0x0e ; '.'
0000000000017c88         db  0x28 ; '('
0000000000017c89         db  0x44 ; 'D'
0000000000017c8a         db  0x0e ; '.'
0000000000017c8b         db  0x20 ; ' '
0000000000017c8c         db  0x41 ; 'A'
0000000000017c8d         db  0x0e ; '.'
0000000000017c8e         db  0x18 ; '.'
0000000000017c8f         db  0x42 ; 'B'
0000000000017c90         db  0x0e ; '.'
0000000000017c91         db  0x10 ; '.'
0000000000017c92         db  0x42 ; 'B'
0000000000017c93         db  0x0e ; '.'
0000000000017c94         db  0x08 ; '.'
0000000000017c95         db  0x46 ; 'F'
0000000000017c96         db  0x0b ; '.'
0000000000017c97         db  0x00 ; '.'
0000000000017c98         dd         0x00000018                                  ; Length of the record
0000000000017c9c         dd         0x00001f4c                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000017ca0         db         0xc0, 0xbc, 2 dup (0xff)                    ; begin 0x13960
0000000000017ca4         db         0x44, 3 dup (0x00)                          ; length 0x44 (end at 0x139a4)
0000000000017ca8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017ca9         db  0x41 ; 'A'
0000000000017caa         db  0x0e ; '.'
0000000000017cab         db  0x10 ; '.'
0000000000017cac         db  0x83 ; '.'
0000000000017cad         db  0x02 ; '.'
0000000000017cae         db  0x02 ; '.'
0000000000017caf         db  0x42 ; 'B'
0000000000017cb0         db  0x0e ; '.'
0000000000017cb1         db  0x08 ; '.'
0000000000017cb2         db  0x00 ; '.'
0000000000017cb3         db  0x00 ; '.'
0000000000017cb4         dd         0x00000058                                  ; Length of the record
0000000000017cb8         dd         0x00001f68                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000017cbc         db         0xf4, 0xbc, 2 dup (0xff)                    ; begin 0x139b0
0000000000017cc0         db         0x9e, 3 dup (0x00)                          ; length 0x9e (end at 0x13a4e)
0000000000017cc4         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017cc5         db  0x4f ; 'O'
0000000000017cc6         db  0x0e ; '.'
0000000000017cc7         db  0x10 ; '.'
0000000000017cc8         db  0x8d ; '.'
0000000000017cc9         db  0x02 ; '.'
0000000000017cca         db  0x42 ; 'B'
0000000000017ccb         db  0x0e ; '.'
0000000000017ccc         db  0x18 ; '.'
0000000000017ccd         db  0x8c ; '.'
0000000000017cce         db  0x03 ; '.'
0000000000017ccf         db  0x44 ; 'D'
0000000000017cd0         db  0x0e ; '.'
0000000000017cd1         db  0x20 ; ' '
0000000000017cd2         db  0x86 ; '.'
0000000000017cd3         db  0x04 ; '.'
0000000000017cd4         db  0x41 ; 'A'
0000000000017cd5         db  0x0e ; '.'
0000000000017cd6         db  0x28 ; '('
0000000000017cd7         db  0x83 ; '.'
0000000000017cd8         db  0x05 ; '.'
0000000000017cd9         db  0x4d ; 'M'
0000000000017cda         db  0x0e ; '.'
0000000000017cdb         db  0x40 ; '@'
0000000000017cdc         db  0x67 ; 'g'
0000000000017cdd         db  0x0e ; '.'
0000000000017cde         db  0x48 ; 'H'
0000000000017cdf         db  0x41 ; 'A'
0000000000017ce0         db  0x0e ; '.'
0000000000017ce1         db  0x50 ; 'P'
0000000000017ce2         db  0x42 ; 'B'
0000000000017ce3         db  0x0e ; '.'
0000000000017ce4         db  0x58 ; 'X'
0000000000017ce5         db  0x42 ; 'B'
0000000000017ce6         db  0x0e ; '.'
0000000000017ce7         db  0x60 ; '`'
0000000000017ce8         db  0x52 ; 'R'
0000000000017ce9         db  0x0e ; '.'
0000000000017cea         db  0x40 ; '@'
0000000000017ceb         db  0x49 ; 'I'
0000000000017cec         db  0x0a ; '.'
0000000000017ced         db  0x0e ; '.'
0000000000017cee         db  0x28 ; '('
0000000000017cef         db  0x41 ; 'A'
0000000000017cf0         db  0x0e ; '.'
0000000000017cf1         db  0x20 ; ' '
0000000000017cf2         db  0x44 ; 'D'
0000000000017cf3         db  0x0e ; '.'
0000000000017cf4         db  0x18 ; '.'
0000000000017cf5         db  0x42 ; 'B'
0000000000017cf6         db  0x0e ; '.'
0000000000017cf7         db  0x10 ; '.'
0000000000017cf8         db  0x42 ; 'B'
0000000000017cf9         db  0x0e ; '.'
0000000000017cfa         db  0x08 ; '.'
0000000000017cfb         db  0x45 ; 'E'
0000000000017cfc         db  0x0b ; '.'
0000000000017cfd         db  0x52 ; 'R'
0000000000017cfe         db  0x0e ; '.'
0000000000017cff         db  0x48 ; 'H'
0000000000017d00         db  0x41 ; 'A'
0000000000017d01         db  0x0e ; '.'
0000000000017d02         db  0x50 ; 'P'
0000000000017d03         db  0x42 ; 'B'
0000000000017d04         db  0x0e ; '.'
0000000000017d05         db  0x58 ; 'X'
0000000000017d06         db  0x42 ; 'B'
0000000000017d07         db  0x0e ; '.'
0000000000017d08         db  0x60 ; '`'
0000000000017d09         db  0x49 ; 'I'
0000000000017d0a         db  0x0e ; '.'
0000000000017d0b         db  0x08 ; '.'
0000000000017d0c         db  0xc3 ; '.'
0000000000017d0d         db  0xc6 ; '.'
0000000000017d0e         db  0xcc ; '.'
0000000000017d0f         db  0xcd ; '.'
0000000000017d10         dd         0x0000001c                                  ; Length of the record
0000000000017d14         dd         0x00001fc4                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000017d18         db         0x38, 0xbd, 2 dup (0xff)                    ; begin 0x13a50
0000000000017d1c         db         0x18, 3 dup (0x00)                          ; length 0x18 (end at 0x13a68)
0000000000017d20         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017d21         db  0x44 ; 'D'
0000000000017d22         db  0x0e ; '.'
0000000000017d23         db  0x10 ; '.'
0000000000017d24         db  0x45 ; 'E'
0000000000017d25         db  0x0e ; '.'
0000000000017d26         db  0x18 ; '.'
0000000000017d27         db  0x42 ; 'B'
0000000000017d28         db  0x0e ; '.'
0000000000017d29         db  0x20 ; ' '
0000000000017d2a         db  0x4c ; 'L'
0000000000017d2b         db  0x0e ; '.'
0000000000017d2c         db  0x08 ; '.'
0000000000017d2d         db  0x00 ; '.'
0000000000017d2e         db  0x00 ; '.'
0000000000017d2f         db  0x00 ; '.'
0000000000017d30         dd         0x0000001c                                  ; Length of the record
0000000000017d34         dd         0x00001fe4                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000017d38         db         0x38, 0xbd, 2 dup (0xff)                    ; begin 0x13a70
0000000000017d3c         db         0x15, 3 dup (0x00)                          ; length 0x15 (end at 0x13a85)
0000000000017d40         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017d41         db  0x44 ; 'D'
0000000000017d42         db  0x0e ; '.'
0000000000017d43         db  0x10 ; '.'
0000000000017d44         db  0x42 ; 'B'
0000000000017d45         db  0x0e ; '.'
0000000000017d46         db  0x18 ; '.'
0000000000017d47         db  0x42 ; 'B'
0000000000017d48         db  0x0e ; '.'
0000000000017d49         db  0x20 ; ' '
0000000000017d4a         db  0x4c ; 'L'
0000000000017d4b         db  0x0e ; '.'
0000000000017d4c         db  0x08 ; '.'
0000000000017d4d         db  0x00 ; '.'
0000000000017d4e         db  0x00 ; '.'
0000000000017d4f         db  0x00 ; '.'
0000000000017d50         dd         0x00000020                                  ; Length of the record
0000000000017d54         dd         0x00002004                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000017d58         db         0x38, 0xbd, 2 dup (0xff)                    ; begin 0x13a90
0000000000017d5c         db         0x1a, 3 dup (0x00)                          ; length 0x1a (end at 0x13aaa)
0000000000017d60         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017d61         db  0x44 ; 'D'
0000000000017d62         db  0x0e ; '.'
0000000000017d63         db  0x10 ; '.'
0000000000017d64         db  0x42 ; 'B'
0000000000017d65         db  0x0e ; '.'
0000000000017d66         db  0x18 ; '.'
0000000000017d67         db  0x44 ; 'D'
0000000000017d68         db  0x0e ; '.'
0000000000017d69         db  0x20 ; ' '
0000000000017d6a         db  0x44 ; 'D'
0000000000017d6b         db  0x0e ; '.'
0000000000017d6c         db  0x28 ; '('
0000000000017d6d         db  0x42 ; 'B'
0000000000017d6e         db  0x0e ; '.'
0000000000017d6f         db  0x30 ; '0'
0000000000017d70         db  0x49 ; 'I'
0000000000017d71         db  0x0e ; '.'
0000000000017d72         db  0x08 ; '.'
0000000000017d73         db  0x00 ; '.'
0000000000017d74         dd         0x00000020                                  ; Length of the record
0000000000017d78         dd         0x00002028                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000017d7c         db         0x34, 0xbd, 2 dup (0xff)                    ; begin 0x13ab0
0000000000017d80         db         0x1c, 3 dup (0x00)                          ; length 0x1c (end at 0x13acc)
0000000000017d84         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017d85         db  0x44 ; 'D'
0000000000017d86         db  0x0e ; '.'
0000000000017d87         db  0x10 ; '.'
0000000000017d88         db  0x42 ; 'B'
0000000000017d89         db  0x0e ; '.'
0000000000017d8a         db  0x18 ; '.'
0000000000017d8b         db  0x44 ; 'D'
0000000000017d8c         db  0x0e ; '.'
0000000000017d8d         db  0x20 ; ' '
0000000000017d8e         db  0x44 ; 'D'
0000000000017d8f         db  0x0e ; '.'
0000000000017d90         db  0x28 ; '('
0000000000017d91         db  0x44 ; 'D'
0000000000017d92         db  0x0e ; '.'
0000000000017d93         db  0x30 ; '0'
0000000000017d94         db  0x49 ; 'I'
0000000000017d95         db  0x0e ; '.'
0000000000017d96         db  0x08 ; '.'
0000000000017d97         db  0x00 ; '.'
0000000000017d98         dd         0x00000014                                  ; Length of the record
0000000000017d9c         dd         0x0000204c                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000017da0         db         0x30, 0xbd, 2 dup (0xff)                    ; begin 0x13ad0
0000000000017da4         db         0x41, 3 dup (0x00)                          ; length 0x41 (end at 0x13b11)
0000000000017da8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017da9         align      16
0000000000017db0         dd         0x0000004c                                  ; Length of the record
0000000000017db4         dd         0x00002064                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000017db8         db         0x68, 0xbd, 2 dup (0xff)                    ; begin 0x13b20
0000000000017dbc         db         0x7d, 3 dup (0x00)                          ; length 0x7d (end at 0x13b9d)
0000000000017dc0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017dc1         db  0x42 ; 'B'
0000000000017dc2         db  0x0e ; '.'
0000000000017dc3         db  0x10 ; '.'
0000000000017dc4         db  0x8c ; '.'
0000000000017dc5         db  0x02 ; '.'
0000000000017dc6         db  0x41 ; 'A'
0000000000017dc7         db  0x0e ; '.'
0000000000017dc8         db  0x18 ; '.'
0000000000017dc9         db  0x86 ; '.'
0000000000017dca         db  0x03 ; '.'
0000000000017dcb         db  0x44 ; 'D'
0000000000017dcc         db  0x0e ; '.'
0000000000017dcd         db  0x20 ; ' '
0000000000017dce         db  0x83 ; '.'
0000000000017dcf         db  0x04 ; '.'
0000000000017dd0         db  0x69 ; 'i'
0000000000017dd1         db  0x0a ; '.'
0000000000017dd2         db  0x0e ; '.'
0000000000017dd3         db  0x18 ; '.'
0000000000017dd4         db  0x41 ; 'A'
0000000000017dd5         db  0x0e ; '.'
0000000000017dd6         db  0x10 ; '.'
0000000000017dd7         db  0x42 ; 'B'
0000000000017dd8         db  0x0e ; '.'
0000000000017dd9         db  0x08 ; '.'
0000000000017dda         db  0x45 ; 'E'
0000000000017ddb         db  0x0b ; '.'
0000000000017ddc         db  0x55 ; 'U'
0000000000017ddd         db  0x0a ; '.'
0000000000017dde         db  0x0e ; '.'
0000000000017ddf         db  0x18 ; '.'
0000000000017de0         db  0x41 ; 'A'
0000000000017de1         db  0x0e ; '.'
0000000000017de2         db  0x10 ; '.'
0000000000017de3         db  0x42 ; 'B'
0000000000017de4         db  0x0e ; '.'
0000000000017de5         db  0x08 ; '.'
0000000000017de6         db  0x48 ; 'H'
0000000000017de7         db  0x0b ; '.'
0000000000017de8         db  0x41 ; 'A'
0000000000017de9         db  0x0a ; '.'
0000000000017dea         db  0x0e ; '.'
0000000000017deb         db  0x18 ; '.'
0000000000017dec         db  0x46 ; 'F'
0000000000017ded         db  0x0e ; '.'
0000000000017dee         db  0x10 ; '.'
0000000000017def         db  0x42 ; 'B'
0000000000017df0         db  0x0e ; '.'
0000000000017df1         db  0x08 ; '.'
0000000000017df2         db  0x47 ; 'G'
0000000000017df3         db  0x0b ; '.'
0000000000017df4         db  0x49 ; 'I'
0000000000017df5         db  0x0e ; '.'
0000000000017df6         db  0x18 ; '.'
0000000000017df7         db  0x41 ; 'A'
0000000000017df8         db  0x0e ; '.'
0000000000017df9         db  0x10 ; '.'
0000000000017dfa         db  0x42 ; 'B'
0000000000017dfb         db  0x0e ; '.'
0000000000017dfc         db  0x08 ; '.'
0000000000017dfd         db  0x00 ; '.'
0000000000017dfe         db  0x00 ; '.'
0000000000017dff         db  0x00 ; '.'
0000000000017e00         dd         0x00000010                                  ; Length of the record
0000000000017e04         dd         0x000020b4                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000017e08         db         0x98, 0xbd, 2 dup (0xff)                    ; begin 0x13ba0
0000000000017e0c         db         0x5c, 3 dup (0x00)                          ; length 0x5c (end at 0x13bfc)
0000000000017e10         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017e11         align      4
0000000000017e14         dd         0x00000028                                  ; Length of the record
0000000000017e18         dd         0x000020c8                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000017e1c         db         0xe4, 0xbd, 2 dup (0xff)                    ; begin 0x13c00
0000000000017e20         db         0x47, 3 dup (0x00)                          ; length 0x47 (end at 0x13c47)
0000000000017e24         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017e25         db  0x41 ; 'A'
0000000000017e26         db  0x0e ; '.'
0000000000017e27         db  0x10 ; '.'
0000000000017e28         db  0x83 ; '.'
0000000000017e29         db  0x02 ; '.'
0000000000017e2a         db  0x5a ; 'Z'
0000000000017e2b         db  0x0a ; '.'
0000000000017e2c         db  0x0e ; '.'
0000000000017e2d         db  0x08 ; '.'
0000000000017e2e         db  0x45 ; 'E'
0000000000017e2f         db  0x0b ; '.'
0000000000017e30         db  0x5d ; ']'
0000000000017e31         db  0x0a ; '.'
0000000000017e32         db  0x0e ; '.'
0000000000017e33         db  0x08 ; '.'
0000000000017e34         db  0x43 ; 'C'
0000000000017e35         db  0x0b ; '.'
0000000000017e36         db  0x46 ; 'F'
0000000000017e37         db  0x0e ; '.'
0000000000017e38         db  0x08 ; '.'
0000000000017e39         db  0x00 ; '.'
0000000000017e3a         db  0x00 ; '.'
0000000000017e3b         db  0x00 ; '.'
0000000000017e3c         db  0x00 ; '.'
0000000000017e3d         db  0x00 ; '.'
0000000000017e3e         db  0x00 ; '.'
0000000000017e3f         db  0x00 ; '.'
0000000000017e40         dd         0x00000034                                  ; Length of the record
0000000000017e44         dd         0x000020f4                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000017e48         db         0x08, 0xbe, 2 dup (0xff)                    ; begin 0x13c50
0000000000017e4c         db         0x3f, 3 dup (0x00)                          ; length 0x3f (end at 0x13c8f)
0000000000017e50         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017e51         db  0x42 ; 'B'
0000000000017e52         db  0x0e ; '.'
0000000000017e53         db  0x10 ; '.'
0000000000017e54         db  0x8d ; '.'
0000000000017e55         db  0x02 ; '.'
0000000000017e56         db  0x42 ; 'B'
0000000000017e57         db  0x0e ; '.'
0000000000017e58         db  0x18 ; '.'
0000000000017e59         db  0x8c ; '.'
0000000000017e5a         db  0x03 ; '.'
0000000000017e5b         db  0x41 ; 'A'
0000000000017e5c         db  0x0e ; '.'
0000000000017e5d         db  0x20 ; ' '
0000000000017e5e         db  0x86 ; '.'
0000000000017e5f         db  0x04 ; '.'
0000000000017e60         db  0x41 ; 'A'
0000000000017e61         db  0x0e ; '.'
0000000000017e62         db  0x28 ; '('
0000000000017e63         db  0x83 ; '.'
0000000000017e64         db  0x05 ; '.'
0000000000017e65         db  0x46 ; 'F'
0000000000017e66         db  0x0e ; '.'
0000000000017e67         db  0x30 ; '0'
0000000000017e68         db  0x6a ; 'j'
0000000000017e69         db  0x0e ; '.'
0000000000017e6a         db  0x28 ; '('
0000000000017e6b         db  0x43 ; 'C'
0000000000017e6c         db  0x0e ; '.'
0000000000017e6d         db  0x20 ; ' '
0000000000017e6e         db  0x41 ; 'A'
0000000000017e6f         db  0x0e ; '.'
0000000000017e70         db  0x18 ; '.'
0000000000017e71         db  0x42 ; 'B'
0000000000017e72         db  0x0e ; '.'
0000000000017e73         db  0x10 ; '.'
0000000000017e74         db  0x42 ; 'B'
0000000000017e75         db  0x0e ; '.'
0000000000017e76         db  0x08 ; '.'
0000000000017e77         db  0x00 ; '.'
0000000000017e78         dd         0x00000014                                  ; Length of the record
0000000000017e7c         dd         0x0000212c                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000017e80         db         0x10, 0xbe, 2 dup (0xff)                    ; begin 0x13c90
0000000000017e84         db         0x1a, 3 dup (0x00)                          ; length 0x1a (end at 0x13caa)
0000000000017e88         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017e89         align      16
0000000000017e90         dd         0x0000001c                                  ; Length of the record
0000000000017e94         dd         0x00002144                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000017e98         db         0x18, 0xbe, 2 dup (0xff)                    ; begin 0x13cb0
0000000000017e9c         db         0x60, 3 dup (0x00)                          ; length 0x60 (end at 0x13d10)
0000000000017ea0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017ea1         db  0x44 ; 'D'
0000000000017ea2         db  0x0e ; '.'
0000000000017ea3         db  0x10 ; '.'
0000000000017ea4         db  0x75 ; 'u'
0000000000017ea5         db  0x0a ; '.'
0000000000017ea6         db  0x0e ; '.'
0000000000017ea7         db  0x08 ; '.'
0000000000017ea8         db  0x47 ; 'G'
0000000000017ea9         db  0x0b ; '.'
0000000000017eaa         db  0x5f ; '_'
0000000000017eab         db  0x0e ; '.'
0000000000017eac         db  0x08 ; '.'
0000000000017ead         db  0x00 ; '.'
0000000000017eae         db  0x00 ; '.'
0000000000017eaf         db  0x00 ; '.'
0000000000017eb0         dd         0x0000001c                                  ; Length of the record
0000000000017eb4         dd         0x00002164                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000017eb8         db         0x58, 0xbe, 2 dup (0xff)                    ; begin 0x13d10
0000000000017ebc         db         0x3c, 3 dup (0x00)                          ; length 0x3c (end at 0x13d4c)
0000000000017ec0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017ec1         db  0x44 ; 'D'
0000000000017ec2         db  0x0e ; '.'
0000000000017ec3         db  0x10 ; '.'
0000000000017ec4         db  0x61 ; 'a'
0000000000017ec5         db  0x0a ; '.'
0000000000017ec6         db  0x0e ; '.'
0000000000017ec7         db  0x08 ; '.'
0000000000017ec8         db  0x4b ; 'K'
0000000000017ec9         db  0x0b ; '.'
0000000000017eca         db  0x4b ; 'K'
0000000000017ecb         db  0x0e ; '.'
0000000000017ecc         db  0x08 ; '.'
0000000000017ecd         db  0x00 ; '.'
0000000000017ece         db  0x00 ; '.'
0000000000017ecf         db  0x00 ; '.'
0000000000017ed0         dd         0x00000014                                  ; Length of the record
0000000000017ed4         dd         0x00002184                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000017ed8         db         0x78, 0xbe, 2 dup (0xff)                    ; begin 0x13d50
0000000000017edc         db         0x0e, 3 dup (0x00)                          ; length 0xe (end at 0x13d5e)
0000000000017ee0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017ee1         align      8
0000000000017ee8         dd         0x00000034                                  ; Length of the record
0000000000017eec         dd         0x0000219c                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000017ef0         db         0x70, 0xbe, 2 dup (0xff)                    ; begin 0x13d60
0000000000017ef4         db         0x7b, 3 dup (0x00)                          ; length 0x7b (end at 0x13ddb)
0000000000017ef8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017ef9         db  0x42 ; 'B'
0000000000017efa         db  0x0e ; '.'
0000000000017efb         db  0x10 ; '.'
0000000000017efc         db  0x8c ; '.'
0000000000017efd         db  0x02 ; '.'
0000000000017efe         db  0x41 ; 'A'
0000000000017eff         db  0x0e ; '.'
0000000000017f00         db  0x18 ; '.'
0000000000017f01         db  0x86 ; '.'
0000000000017f02         db  0x03 ; '.'
0000000000017f03         db  0x41 ; 'A'
0000000000017f04         db  0x0e ; '.'
0000000000017f05         db  0x20 ; ' '
0000000000017f06         db  0x83 ; '.'
0000000000017f07         db  0x04 ; '.'
0000000000017f08         db  0x7d ; '}'
0000000000017f09         db  0x0a ; '.'
0000000000017f0a         db  0x0e ; '.'
0000000000017f0b         db  0x18 ; '.'
0000000000017f0c         db  0x41 ; 'A'
0000000000017f0d         db  0x0e ; '.'
0000000000017f0e         db  0x10 ; '.'
0000000000017f0f         db  0x42 ; 'B'
0000000000017f10         db  0x0e ; '.'
0000000000017f11         db  0x08 ; '.'
0000000000017f12         db  0x44 ; 'D'
0000000000017f13         db  0x0b ; '.'
0000000000017f14         db  0x60 ; '`'
0000000000017f15         db  0x0a ; '.'
0000000000017f16         db  0x0e ; '.'
0000000000017f17         db  0x18 ; '.'
0000000000017f18         db  0x41 ; 'A'
0000000000017f19         db  0x0e ; '.'
0000000000017f1a         db  0x10 ; '.'
0000000000017f1b         db  0x42 ; 'B'
0000000000017f1c         db  0x0e ; '.'
0000000000017f1d         db  0x08 ; '.'
0000000000017f1e         db  0x45 ; 'E'
0000000000017f1f         db  0x0b ; '.'
0000000000017f20         dd         0x00000034                                  ; Length of the record
0000000000017f24         dd         0x000021d4                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000017f28         db         0xb8, 0xbe, 2 dup (0xff)                    ; begin 0x13de0
0000000000017f2c         db         0x7e, 0x02, 2 dup (0x00)                    ; length 0x27e (end at 0x1405e)
0000000000017f30         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017f31         db  0x42 ; 'B'
0000000000017f32         db  0x0e ; '.'
0000000000017f33         db  0x10 ; '.'
0000000000017f34         db  0x8c ; '.'
0000000000017f35         db  0x02 ; '.'
0000000000017f36         db  0x41 ; 'A'
0000000000017f37         db  0x0e ; '.'
0000000000017f38         db  0x18 ; '.'
0000000000017f39         db  0x86 ; '.'
0000000000017f3a         db  0x03 ; '.'
0000000000017f3b         db  0x43 ; 'C'
0000000000017f3c         db  0x0e ; '.'
0000000000017f3d         db  0x20 ; ' '
0000000000017f3e         db  0x83 ; '.'
0000000000017f3f         db  0x04 ; '.'
0000000000017f40         db  0x44 ; 'D'
0000000000017f41         db  0x0e ; '.'
0000000000017f42         db  0x70 ; 'p'
0000000000017f43         db  0x02 ; '.'
0000000000017f44         db  0xf0 ; '.'
0000000000017f45         db  0x0a ; '.'
0000000000017f46         db  0x0e ; '.'
0000000000017f47         db  0x20 ; ' '
0000000000017f48         db  0x41 ; 'A'
0000000000017f49         db  0x0e ; '.'
0000000000017f4a         db  0x18 ; '.'
0000000000017f4b         db  0x41 ; 'A'
0000000000017f4c         db  0x0e ; '.'
0000000000017f4d         db  0x10 ; '.'
0000000000017f4e         db  0x42 ; 'B'
0000000000017f4f         db  0x0e ; '.'
0000000000017f50         db  0x08 ; '.'
0000000000017f51         db  0x42 ; 'B'
0000000000017f52         db  0x0b ; '.'
0000000000017f53         db  0x00 ; '.'
0000000000017f54         db  0x00 ; '.'
0000000000017f55         db  0x00 ; '.'
0000000000017f56         db  0x00 ; '.'
0000000000017f57         db  0x00 ; '.'
0000000000017f58         dd         0x0000001c                                  ; Length of the record
0000000000017f5c         dd         0x0000220c                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000017f60         db         0x00, 0xc1, 2 dup (0xff)                    ; begin 0x14060
0000000000017f64         db         0x40, 3 dup (0x00)                          ; length 0x40 (end at 0x140a0)
0000000000017f68         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017f69         db  0x44 ; 'D'
0000000000017f6a         db  0x0e ; '.'
0000000000017f6b         db  0x10 ; '.'
0000000000017f6c         db  0x83 ; '.'
0000000000017f6d         db  0x02 ; '.'
0000000000017f6e         db  0x5a ; 'Z'
0000000000017f6f         db  0x0a ; '.'
0000000000017f70         db  0x0e ; '.'
0000000000017f71         db  0x08 ; '.'
0000000000017f72         db  0x4a ; 'J'
0000000000017f73         db  0x0b ; '.'
0000000000017f74         db  0x53 ; 'S'
0000000000017f75         db  0x0e ; '.'
0000000000017f76         db  0x08 ; '.'
0000000000017f77         db  0x00 ; '.'
0000000000017f78         dd         0x00000044                                  ; Length of the record
0000000000017f7c         dd         0x0000222c                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000017f80         db         0x20, 0xc1, 2 dup (0xff)                    ; begin 0x140a0
0000000000017f84         db         0x65, 3 dup (0x00)                          ; length 0x65 (end at 0x14105)
0000000000017f88         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017f89         db  0x42 ; 'B'
0000000000017f8a         db  0x0e ; '.'
0000000000017f8b         db  0x10 ; '.'
0000000000017f8c         db  0x8f ; '.'
0000000000017f8d         db  0x02 ; '.'
0000000000017f8e         db  0x42 ; 'B'
0000000000017f8f         db  0x0e ; '.'
0000000000017f90         db  0x18 ; '.'
0000000000017f91         db  0x8e ; '.'
0000000000017f92         db  0x03 ; '.'
0000000000017f93         db  0x45 ; 'E'
0000000000017f94         db  0x0e ; '.'
0000000000017f95         db  0x20 ; ' '
0000000000017f96         db  0x8d ; '.'
0000000000017f97         db  0x04 ; '.'
0000000000017f98         db  0x42 ; 'B'
0000000000017f99         db  0x0e ; '.'
0000000000017f9a         db  0x28 ; '('
0000000000017f9b         db  0x8c ; '.'
0000000000017f9c         db  0x05 ; '.'
0000000000017f9d         db  0x48 ; 'H'
0000000000017f9e         db  0x0e ; '.'
0000000000017f9f         db  0x30 ; '0'
0000000000017fa0         db  0x86 ; '.'
0000000000017fa1         db  0x06 ; '.'
0000000000017fa2         db  0x48 ; 'H'
0000000000017fa3         db  0x0e ; '.'
0000000000017fa4         db  0x38 ; '8'
0000000000017fa5         db  0x83 ; '.'
0000000000017fa6         db  0x07 ; '.'
0000000000017fa7         db  0x4d ; 'M'
0000000000017fa8         db  0x0e ; '.'
0000000000017fa9         db  0x40 ; '@'
0000000000017faa         db  0x72 ; 'r'
0000000000017fab         db  0x0e ; '.'
0000000000017fac         db  0x38 ; '8'
0000000000017fad         db  0x41 ; 'A'
0000000000017fae         db  0x0e ; '.'
0000000000017faf         db  0x30 ; '0'
0000000000017fb0         db  0x41 ; 'A'
0000000000017fb1         db  0x0e ; '.'
0000000000017fb2         db  0x28 ; '('
0000000000017fb3         db  0x42 ; 'B'
0000000000017fb4         db  0x0e ; '.'
0000000000017fb5         db  0x20 ; ' '
0000000000017fb6         db  0x42 ; 'B'
0000000000017fb7         db  0x0e ; '.'
0000000000017fb8         db  0x18 ; '.'
0000000000017fb9         db  0x42 ; 'B'
0000000000017fba         db  0x0e ; '.'
0000000000017fbb         db  0x10 ; '.'
0000000000017fbc         db  0x42 ; 'B'
0000000000017fbd         db  0x0e ; '.'
0000000000017fbe         db  0x08 ; '.'
0000000000017fbf         db  0x00 ; '.'
0000000000017fc0         dd         0x00000014                                  ; Length of the record
0000000000017fc4         dd         0x00002274                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000017fc8         db         0x48, 0xc1, 2 dup (0xff)                    ; begin 0x14110
0000000000017fcc         db         0x02, 3 dup (0x00)                          ; length 0x2 (end at 0x14112)
0000000000017fd0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017fd1         align      8
0000000000017fd8         dd         0x00000010                                  ; Length of the record
0000000000017fdc         dd         0x0000228c                                  ; FDE: parent CIE at 0x15d50 (FDE encoding = 0x1B)
0000000000017fe0         db         0x40, 0xc1, 2 dup (0xff)                    ; begin 0x14120
0000000000017fe4         db         0x0e, 3 dup (0x00)                          ; length 0xe (end at 0x1412e)
0000000000017fe8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017fe9         align      16


        ; Segment Segment 3
        ; Range: [0x218a70; 0x21b408[ (10648 bytes)
        ; File offset : [100976; 102528[ (1552 bytes)
        ; Permissions: readable / writable
        ; Flags: 0x6



        ; Section .init_array
        ; Range: [0x218a70; 0x218a78[ (8 bytes)
        ; File offset : [100976; 100984[ (8 bytes)
        ; Flags: 0x3
        ;   SHT_FINI_ARRAY
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     __frame_dummy_init_array_entry:
0000000000218a70         dq         frame_dummy                                 ; DATA XREF=__libc_csu_init+11


        ; Section .fini_array
        ; Range: [0x218a78; 0x218a80[ (8 bytes)
        ; File offset : [100984; 100992[ (8 bytes)
        ; Flags: 0x3
        ;   SHT_PREINIT_ARRAY
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     __do_global_dtors_aux_fini_array_entry:
0000000000218a78         dq         __do_global_dtors_aux                       ; DATA XREF=__libc_csu_init+19


        ; Section .data.rel.ro
        ; Range: [0x218a80; 0x218bb8[ (312 bytes)
        ; File offset : [100992; 101304[ (312 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     default_file_list.7113:
0000000000218a80         db  0xca ; '.'                                         ; DATA XREF=main+685
0000000000218a81         db  0x46 ; 'F'
0000000000218a82         db  0x01 ; '.'
0000000000218a83         db  0x00 ; '.'
0000000000218a84         db  0x00 ; '.'
0000000000218a85         db  0x00 ; '.'
0000000000218a86         db  0x00 ; '.'
0000000000218a87         db  0x00 ; '.'
0000000000218a88         db  0x00 ; '.'
0000000000218a89         db  0x00 ; '.'
0000000000218a8a         db  0x00 ; '.'
0000000000218a8b         db  0x00 ; '.'
0000000000218a8c         db  0x00 ; '.'
0000000000218a8d         db  0x00 ; '.'
0000000000218a8e         db  0x00 ; '.'
0000000000218a8f         db  0x00 ; '.'
0000000000218a90         db  0x00 ; '.'
0000000000218a91         db  0x00 ; '.'
0000000000218a92         db  0x00 ; '.'
0000000000218a93         db  0x00 ; '.'
0000000000218a94         db  0x00 ; '.'
0000000000218a95         db  0x00 ; '.'
0000000000218a96         db  0x00 ; '.'
0000000000218a97         db  0x00 ; '.'
0000000000218a98         db  0x00 ; '.'
0000000000218a99         db  0x00 ; '.'
0000000000218a9a         db  0x00 ; '.'
0000000000218a9b         db  0x00 ; '.'
0000000000218a9c         db  0x00 ; '.'
0000000000218a9d         db  0x00 ; '.'
0000000000218a9e         db  0x00 ; '.'
0000000000218a9f         db  0x00 ; '.'
                     longopts:
0000000000218aa0         db  0xe2 ; '.'                                         ; DATA XREF=main+8
0000000000218aa1         db  0x42 ; 'B'
0000000000218aa2         db  0x01 ; '.'
0000000000218aa3         db  0x00 ; '.'
0000000000218aa4         db  0x00 ; '.'
0000000000218aa5         db  0x00 ; '.'
0000000000218aa6         db  0x00 ; '.'
0000000000218aa7         db  0x00 ; '.'
0000000000218aa8         db  0x00 ; '.'
0000000000218aa9         db  0x00 ; '.'
0000000000218aaa         db  0x00 ; '.'
0000000000218aab         db  0x00 ; '.'
0000000000218aac         db  0x00 ; '.'
0000000000218aad         db  0x00 ; '.'
0000000000218aae         db  0x00 ; '.'
0000000000218aaf         db  0x00 ; '.'
0000000000218ab0         db  0x00 ; '.'
0000000000218ab1         db  0x00 ; '.'
0000000000218ab2         db  0x00 ; '.'
0000000000218ab3         db  0x00 ; '.'
0000000000218ab4         db  0x00 ; '.'
0000000000218ab5         db  0x00 ; '.'
0000000000218ab6         db  0x00 ; '.'
0000000000218ab7         db  0x00 ; '.'
0000000000218ab8         db  0x62 ; 'b'
0000000000218ab9         db  0x00 ; '.'
0000000000218aba         db  0x00 ; '.'
0000000000218abb         db  0x00 ; '.'
0000000000218abc         db  0x00 ; '.'
0000000000218abd         db  0x00 ; '.'
0000000000218abe         db  0x00 ; '.'
0000000000218abf         db  0x00 ; '.'
0000000000218ac0         db  0xe9 ; '.'
0000000000218ac1         db  0x42 ; 'B'
0000000000218ac2         db  0x01 ; '.'
0000000000218ac3         db  0x00 ; '.'
0000000000218ac4         db  0x00 ; '.'
0000000000218ac5         db  0x00 ; '.'
0000000000218ac6         db  0x00 ; '.'
0000000000218ac7         db  0x00 ; '.'
0000000000218ac8         db  0x00 ; '.'
0000000000218ac9         db  0x00 ; '.'
0000000000218aca         db  0x00 ; '.'
0000000000218acb         db  0x00 ; '.'
0000000000218acc         db  0x00 ; '.'
0000000000218acd         db  0x00 ; '.'
0000000000218ace         db  0x00 ; '.'
0000000000218acf         db  0x00 ; '.'
0000000000218ad0         db  0x00 ; '.'
0000000000218ad1         db  0x00 ; '.'
0000000000218ad2         db  0x00 ; '.'
0000000000218ad3         db  0x00 ; '.'
0000000000218ad4         db  0x00 ; '.'
0000000000218ad5         db  0x00 ; '.'
0000000000218ad6         db  0x00 ; '.'
0000000000218ad7         db  0x00 ; '.'
0000000000218ad8         db  0x72 ; 'r'
0000000000218ad9         db  0x00 ; '.'
0000000000218ada         db  0x00 ; '.'
0000000000218adb         db  0x00 ; '.'
0000000000218adc         db  0x00 ; '.'
0000000000218add         db  0x00 ; '.'
0000000000218ade         db  0x00 ; '.'
0000000000218adf         db  0x00 ; '.'
0000000000218ae0         db  0xef ; '.'
0000000000218ae1         db  0x42 ; 'B'
0000000000218ae2         db  0x01 ; '.'
0000000000218ae3         db  0x00 ; '.'
0000000000218ae4         db  0x00 ; '.'
0000000000218ae5         db  0x00 ; '.'
0000000000218ae6         db  0x00 ; '.'
0000000000218ae7         db  0x00 ; '.'
0000000000218ae8         db  0x01 ; '.'
0000000000218ae9         db  0x00 ; '.'
0000000000218aea         db  0x00 ; '.'
0000000000218aeb         db  0x00 ; '.'
0000000000218aec         db  0x00 ; '.'
0000000000218aed         db  0x00 ; '.'
0000000000218aee         db  0x00 ; '.'
0000000000218aef         db  0x00 ; '.'
0000000000218af0         db  0x00 ; '.'
0000000000218af1         db  0x00 ; '.'
0000000000218af2         db  0x00 ; '.'
0000000000218af3         db  0x00 ; '.'
0000000000218af4         db  0x00 ; '.'
0000000000218af5         db  0x00 ; '.'
0000000000218af6         db  0x00 ; '.'
0000000000218af7         db  0x00 ; '.'
0000000000218af8         db  0x73 ; 's'
0000000000218af9         db  0x00 ; '.'
0000000000218afa         db  0x00 ; '.'
0000000000218afb         db  0x00 ; '.'
0000000000218afc         db  0x00 ; '.'
0000000000218afd         db  0x00 ; '.'
0000000000218afe         db  0x00 ; '.'
0000000000218aff         db  0x00 ; '.'
0000000000218b00         db  0xf9 ; '.'
0000000000218b01         db  0x42 ; 'B'
0000000000218b02         db  0x01 ; '.'
0000000000218b03         db  0x00 ; '.'
0000000000218b04         db  0x00 ; '.'
0000000000218b05         db  0x00 ; '.'
0000000000218b06         db  0x00 ; '.'
0000000000218b07         db  0x00 ; '.'
0000000000218b08         db  0x00 ; '.'
0000000000218b09         db  0x00 ; '.'
0000000000218b0a         db  0x00 ; '.'
0000000000218b0b         db  0x00 ; '.'
0000000000218b0c         db  0x00 ; '.'
0000000000218b0d         db  0x00 ; '.'
0000000000218b0e         db  0x00 ; '.'
0000000000218b0f         db  0x00 ; '.'
0000000000218b10         db  0x00 ; '.'
0000000000218b11         db  0x00 ; '.'
0000000000218b12         db  0x00 ; '.'
0000000000218b13         db  0x00 ; '.'
0000000000218b14         db  0x00 ; '.'
0000000000218b15         db  0x00 ; '.'
0000000000218b16         db  0x00 ; '.'
0000000000218b17         db  0x00 ; '.'
0000000000218b18         db  0x7e ; '~'
0000000000218b19         db  0xff ; '.'
0000000000218b1a         db  0xff ; '.'
0000000000218b1b         db  0xff ; '.'
0000000000218b1c         db  0x00 ; '.'
0000000000218b1d         db  0x00 ; '.'
0000000000218b1e         db  0x00 ; '.'
0000000000218b1f         db  0x00 ; '.'
0000000000218b20         db  0xfe ; '.'
0000000000218b21         db  0x42 ; 'B'
0000000000218b22         db  0x01 ; '.'
0000000000218b23         db  0x00 ; '.'
0000000000218b24         db  0x00 ; '.'
0000000000218b25         db  0x00 ; '.'
0000000000218b26         db  0x00 ; '.'
0000000000218b27         db  0x00 ; '.'
0000000000218b28         db  0x00 ; '.'
0000000000218b29         db  0x00 ; '.'
0000000000218b2a         db  0x00 ; '.'
0000000000218b2b         db  0x00 ; '.'
0000000000218b2c         db  0x00 ; '.'
0000000000218b2d         db  0x00 ; '.'
0000000000218b2e         db  0x00 ; '.'
0000000000218b2f         db  0x00 ; '.'
0000000000218b30         db  0x00 ; '.'
0000000000218b31         db  0x00 ; '.'
0000000000218b32         db  0x00 ; '.'
0000000000218b33         db  0x00 ; '.'
0000000000218b34         db  0x00 ; '.'
0000000000218b35         db  0x00 ; '.'
0000000000218b36         db  0x00 ; '.'
0000000000218b37         db  0x00 ; '.'
0000000000218b38         db  0x7d ; '}'
0000000000218b39         db  0xff ; '.'
0000000000218b3a         db  0xff ; '.'
0000000000218b3b         db  0xff ; '.'
0000000000218b3c         db  0x00 ; '.'
0000000000218b3d         db  0x00 ; '.'
0000000000218b3e         db  0x00 ; '.'
0000000000218b3f         db  0x00 ; '.'
0000000000218b40         db  0x00 ; '.'
0000000000218b41         db  0x00 ; '.'
0000000000218b42         db  0x00 ; '.'
0000000000218b43         db  0x00 ; '.'
0000000000218b44         db  0x00 ; '.'
0000000000218b45         db  0x00 ; '.'
0000000000218b46         db  0x00 ; '.'
0000000000218b47         db  0x00 ; '.'
0000000000218b48         db  0x00 ; '.'
0000000000218b49         db  0x00 ; '.'
0000000000218b4a         db  0x00 ; '.'
0000000000218b4b         db  0x00 ; '.'
0000000000218b4c         db  0x00 ; '.'
0000000000218b4d         db  0x00 ; '.'
0000000000218b4e         db  0x00 ; '.'
0000000000218b4f         db  0x00 ; '.'
0000000000218b50         db  0x00 ; '.'
0000000000218b51         db  0x00 ; '.'
0000000000218b52         db  0x00 ; '.'
0000000000218b53         db  0x00 ; '.'
0000000000218b54         db  0x00 ; '.'
0000000000218b55         db  0x00 ; '.'
0000000000218b56         db  0x00 ; '.'
0000000000218b57         db  0x00 ; '.'
0000000000218b58         db  0x00 ; '.'
0000000000218b59         db  0x00 ; '.'
0000000000218b5a         db  0x00 ; '.'
0000000000218b5b         db  0x00 ; '.'
0000000000218b5c         db  0x00 ; '.'
0000000000218b5d         db  0x00 ; '.'
0000000000218b5e         db  0x00 ; '.'
0000000000218b5f         db  0x00 ; '.'
                     quoting_style_args:
0000000000218b60         db  0xe1 ; '.'
0000000000218b61         db  0x46 ; 'F'
0000000000218b62         db  0x01 ; '.'
0000000000218b63         db  0x00 ; '.'
0000000000218b64         db  0x00 ; '.'
0000000000218b65         db  0x00 ; '.'
0000000000218b66         db  0x00 ; '.'
0000000000218b67         db  0x00 ; '.'
0000000000218b68         db  0xe9 ; '.'
0000000000218b69         db  0x46 ; 'F'
0000000000218b6a         db  0x01 ; '.'
0000000000218b6b         db  0x00 ; '.'
0000000000218b6c         db  0x00 ; '.'
0000000000218b6d         db  0x00 ; '.'
0000000000218b6e         db  0x00 ; '.'
0000000000218b6f         db  0x00 ; '.'
0000000000218b70         db  0xef ; '.'
0000000000218b71         db  0x46 ; 'F'
0000000000218b72         db  0x01 ; '.'
0000000000218b73         db  0x00 ; '.'
0000000000218b74         db  0x00 ; '.'
0000000000218b75         db  0x00 ; '.'
0000000000218b76         db  0x00 ; '.'
0000000000218b77         db  0x00 ; '.'
0000000000218b78         db  0xfc ; '.'
0000000000218b79         db  0x46 ; 'F'
0000000000218b7a         db  0x01 ; '.'
0000000000218b7b         db  0x00 ; '.'
0000000000218b7c         db  0x00 ; '.'
0000000000218b7d         db  0x00 ; '.'
0000000000218b7e         db  0x00 ; '.'
0000000000218b7f         db  0x00 ; '.'
0000000000218b80         db  0x09 ; '.'
0000000000218b81         db  0x47 ; 'G'
0000000000218b82         db  0x01 ; '.'
0000000000218b83         db  0x00 ; '.'
0000000000218b84         db  0x00 ; '.'
0000000000218b85         db  0x00 ; '.'
0000000000218b86         db  0x00 ; '.'
0000000000218b87         db  0x00 ; '.'
0000000000218b88         db  0x76 ; 'v'
0000000000218b89         db  0x41 ; 'A'
0000000000218b8a         db  0x01 ; '.'
0000000000218b8b         db  0x00 ; '.'
0000000000218b8c         db  0x00 ; '.'
0000000000218b8d         db  0x00 ; '.'
0000000000218b8e         db  0x00 ; '.'
0000000000218b8f         db  0x00 ; '.'
0000000000218b90         db  0x1d ; '.'
0000000000218b91         db  0x47 ; 'G'
0000000000218b92         db  0x01 ; '.'
0000000000218b93         db  0x00 ; '.'
0000000000218b94         db  0x00 ; '.'
0000000000218b95         db  0x00 ; '.'
0000000000218b96         db  0x00 ; '.'
0000000000218b97         db  0x00 ; '.'
0000000000218b98         db  0x02 ; '.'
0000000000218b99         db  0x47 ; 'G'
0000000000218b9a         db  0x01 ; '.'
0000000000218b9b         db  0x00 ; '.'
0000000000218b9c         db  0x00 ; '.'
0000000000218b9d         db  0x00 ; '.'
0000000000218b9e         db  0x00 ; '.'
0000000000218b9f         db  0x00 ; '.'
0000000000218ba0         db  0x31 ; '1'
0000000000218ba1         db  0x42 ; 'B'
0000000000218ba2         db  0x01 ; '.'
0000000000218ba3         db  0x00 ; '.'
0000000000218ba4         db  0x00 ; '.'
0000000000218ba5         db  0x00 ; '.'
0000000000218ba6         db  0x00 ; '.'
0000000000218ba7         db  0x00 ; '.'
0000000000218ba8         db  0x25 ; '%'
0000000000218ba9         db  0x47 ; 'G'
0000000000218baa         db  0x01 ; '.'
0000000000218bab         db  0x00 ; '.'
0000000000218bac         db  0x00 ; '.'
0000000000218bad         db  0x00 ; '.'
0000000000218bae         db  0x00 ; '.'
0000000000218baf         db  0x00 ; '.'
0000000000218bb0         db  0x00 ; '.'
0000000000218bb1         db  0x00 ; '.'
0000000000218bb2         db  0x00 ; '.'
0000000000218bb3         db  0x00 ; '.'
0000000000218bb4         db  0x00 ; '.'
0000000000218bb5         db  0x00 ; '.'
0000000000218bb6         db  0x00 ; '.'
0000000000218bb7         db  0x00 ; '.'


        ; Section .dynamic
        ; Range: [0x218bb8; 0x218da8[ (496 bytes)
        ; File offset : [101304; 101800[ (496 bytes)
        ; Flags: 0x3
        ;   SHT_DYNAMIC
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     _DYNAMIC:
0000000000218bb8         db  0x01 ; '.'
0000000000218bb9         db  0x00 ; '.'
0000000000218bba         db  0x00 ; '.'
0000000000218bbb         db  0x00 ; '.'
0000000000218bbc         db  0x00 ; '.'
0000000000218bbd         db  0x00 ; '.'
0000000000218bbe         db  0x00 ; '.'
0000000000218bbf         db  0x00 ; '.'
0000000000218bc0         db  0x01 ; '.'
0000000000218bc1         db  0x00 ; '.'
0000000000218bc2         db  0x00 ; '.'
0000000000218bc3         db  0x00 ; '.'
0000000000218bc4         db  0x00 ; '.'
0000000000218bc5         db  0x00 ; '.'
0000000000218bc6         db  0x00 ; '.'
0000000000218bc7         db  0x00 ; '.'
0000000000218bc8         db  0x0c ; '.'
0000000000218bc9         db  0x00 ; '.'
0000000000218bca         db  0x00 ; '.'
0000000000218bcb         db  0x00 ; '.'
0000000000218bcc         db  0x00 ; '.'
0000000000218bcd         db  0x00 ; '.'
0000000000218bce         db  0x00 ; '.'
0000000000218bcf         db  0x00 ; '.'
0000000000218bd0         db  0x38 ; '8'
0000000000218bd1         db  0x18 ; '.'
0000000000218bd2         db  0x00 ; '.'
0000000000218bd3         db  0x00 ; '.'
0000000000218bd4         db  0x00 ; '.'
0000000000218bd5         db  0x00 ; '.'
0000000000218bd6         db  0x00 ; '.'
0000000000218bd7         db  0x00 ; '.'
0000000000218bd8         db  0x0d ; '.'
0000000000218bd9         db  0x00 ; '.'
0000000000218bda         db  0x00 ; '.'
0000000000218bdb         db  0x00 ; '.'
0000000000218bdc         db  0x00 ; '.'
0000000000218bdd         db  0x00 ; '.'
0000000000218bde         db  0x00 ; '.'
0000000000218bdf         db  0x00 ; '.'
0000000000218be0         db  0x30 ; '0'
0000000000218be1         db  0x41 ; 'A'
0000000000218be2         db  0x01 ; '.'
0000000000218be3         db  0x00 ; '.'
0000000000218be4         db  0x00 ; '.'
0000000000218be5         db  0x00 ; '.'
0000000000218be6         db  0x00 ; '.'
0000000000218be7         db  0x00 ; '.'
0000000000218be8         db  0x19 ; '.'
0000000000218be9         db  0x00 ; '.'
0000000000218bea         db  0x00 ; '.'
0000000000218beb         db  0x00 ; '.'
0000000000218bec         db  0x00 ; '.'
0000000000218bed         db  0x00 ; '.'
0000000000218bee         db  0x00 ; '.'
0000000000218bef         db  0x00 ; '.'
0000000000218bf0         db  0x70 ; 'p'
0000000000218bf1         db  0x8a ; '.'
0000000000218bf2         db  0x21 ; '!'
0000000000218bf3         db  0x00 ; '.'
0000000000218bf4         db  0x00 ; '.'
0000000000218bf5         db  0x00 ; '.'
0000000000218bf6         db  0x00 ; '.'
0000000000218bf7         db  0x00 ; '.'
0000000000218bf8         db  0x1b ; '.'
0000000000218bf9         db  0x00 ; '.'
0000000000218bfa         db  0x00 ; '.'
0000000000218bfb         db  0x00 ; '.'
0000000000218bfc         db  0x00 ; '.'
0000000000218bfd         db  0x00 ; '.'
0000000000218bfe         db  0x00 ; '.'
0000000000218bff         db  0x00 ; '.'
0000000000218c00         db  0x08 ; '.'
0000000000218c01         db  0x00 ; '.'
0000000000218c02         db  0x00 ; '.'
0000000000218c03         db  0x00 ; '.'
0000000000218c04         db  0x00 ; '.'
0000000000218c05         db  0x00 ; '.'
0000000000218c06         db  0x00 ; '.'
0000000000218c07         db  0x00 ; '.'
0000000000218c08         db  0x1a ; '.'
0000000000218c09         db  0x00 ; '.'
0000000000218c0a         db  0x00 ; '.'
0000000000218c0b         db  0x00 ; '.'
0000000000218c0c         db  0x00 ; '.'
0000000000218c0d         db  0x00 ; '.'
0000000000218c0e         db  0x00 ; '.'
0000000000218c0f         db  0x00 ; '.'
0000000000218c10         db  0x78 ; 'x'
0000000000218c11         db  0x8a ; '.'
0000000000218c12         db  0x21 ; '!'
0000000000218c13         db  0x00 ; '.'
0000000000218c14         db  0x00 ; '.'
0000000000218c15         db  0x00 ; '.'
0000000000218c16         db  0x00 ; '.'
0000000000218c17         db  0x00 ; '.'
0000000000218c18         db  0x1c ; '.'
0000000000218c19         db  0x00 ; '.'
0000000000218c1a         db  0x00 ; '.'
0000000000218c1b         db  0x00 ; '.'
0000000000218c1c         db  0x00 ; '.'
0000000000218c1d         db  0x00 ; '.'
0000000000218c1e         db  0x00 ; '.'
0000000000218c1f         db  0x00 ; '.'
0000000000218c20         db  0x08 ; '.'
0000000000218c21         db  0x00 ; '.'
0000000000218c22         db  0x00 ; '.'
0000000000218c23         db  0x00 ; '.'
0000000000218c24         db  0x00 ; '.'
0000000000218c25         db  0x00 ; '.'
0000000000218c26         db  0x00 ; '.'
0000000000218c27         db  0x00 ; '.'
0000000000218c28         db  0xf5 ; '.'
0000000000218c29         db  0xfe ; '.'
0000000000218c2a         db  0xff ; '.'
0000000000218c2b         db  0x6f ; 'o'
0000000000218c2c         db  0x00 ; '.'
0000000000218c2d         db  0x00 ; '.'
0000000000218c2e         db  0x00 ; '.'
0000000000218c2f         db  0x00 ; '.'
0000000000218c30         db  0x98 ; '.'
0000000000218c31         db  0x02 ; '.'
0000000000218c32         db  0x00 ; '.'
0000000000218c33         db  0x00 ; '.'
0000000000218c34         db  0x00 ; '.'
0000000000218c35         db  0x00 ; '.'
0000000000218c36         db  0x00 ; '.'
0000000000218c37         db  0x00 ; '.'
0000000000218c38         db  0x05 ; '.'
0000000000218c39         db  0x00 ; '.'
0000000000218c3a         db  0x00 ; '.'
0000000000218c3b         db  0x00 ; '.'
0000000000218c3c         db  0x00 ; '.'
0000000000218c3d         db  0x00 ; '.'
0000000000218c3e         db  0x00 ; '.'
0000000000218c3f         db  0x00 ; '.'
0000000000218c40         db  0x60 ; '`'
0000000000218c41         db  0x0a ; '.'
0000000000218c42         db  0x00 ; '.'
0000000000218c43         db  0x00 ; '.'
0000000000218c44         db  0x00 ; '.'
0000000000218c45         db  0x00 ; '.'
0000000000218c46         db  0x00 ; '.'
0000000000218c47         db  0x00 ; '.'
0000000000218c48         db  0x06 ; '.'
0000000000218c49         db  0x00 ; '.'
0000000000218c4a         db  0x00 ; '.'
0000000000218c4b         db  0x00 ; '.'
0000000000218c4c         db  0x00 ; '.'
0000000000218c4d         db  0x00 ; '.'
0000000000218c4e         db  0x00 ; '.'
0000000000218c4f         db  0x00 ; '.'
0000000000218c50         db  0xe0 ; '.'
0000000000218c51         db  0x02 ; '.'
0000000000218c52         db  0x00 ; '.'
0000000000218c53         db  0x00 ; '.'
0000000000218c54         db  0x00 ; '.'
0000000000218c55         db  0x00 ; '.'
0000000000218c56         db  0x00 ; '.'
0000000000218c57         db  0x00 ; '.'
0000000000218c58         db  0x0a ; '.'
0000000000218c59         db  0x00 ; '.'
0000000000218c5a         db  0x00 ; '.'
0000000000218c5b         db  0x00 ; '.'
0000000000218c5c         db  0x00 ; '.'
0000000000218c5d         db  0x00 ; '.'
0000000000218c5e         db  0x00 ; '.'
0000000000218c5f         db  0x00 ; '.'
0000000000218c60         db  0x7c ; '|'
0000000000218c61         db  0x03 ; '.'
0000000000218c62         db  0x00 ; '.'
0000000000218c63         db  0x00 ; '.'
0000000000218c64         db  0x00 ; '.'
0000000000218c65         db  0x00 ; '.'
0000000000218c66         db  0x00 ; '.'
0000000000218c67         db  0x00 ; '.'
0000000000218c68         db  0x0b ; '.'
0000000000218c69         db  0x00 ; '.'
0000000000218c6a         db  0x00 ; '.'
0000000000218c6b         db  0x00 ; '.'
0000000000218c6c         db  0x00 ; '.'
0000000000218c6d         db  0x00 ; '.'
0000000000218c6e         db  0x00 ; '.'
0000000000218c6f         db  0x00 ; '.'
0000000000218c70         db  0x18 ; '.'
0000000000218c71         db  0x00 ; '.'
0000000000218c72         db  0x00 ; '.'
0000000000218c73         db  0x00 ; '.'
0000000000218c74         db  0x00 ; '.'
0000000000218c75         db  0x00 ; '.'
0000000000218c76         db  0x00 ; '.'
0000000000218c77         db  0x00 ; '.'
0000000000218c78         db  0x15 ; '.'
0000000000218c79         db  0x00 ; '.'
0000000000218c7a         db  0x00 ; '.'
0000000000218c7b         db  0x00 ; '.'
0000000000218c7c         db  0x00 ; '.'
0000000000218c7d         db  0x00 ; '.'
0000000000218c7e         db  0x00 ; '.'
0000000000218c7f         db  0x00 ; '.'
0000000000218c80         db  0x00 ; '.'
0000000000218c81         db  0x00 ; '.'
0000000000218c82         db  0x00 ; '.'
0000000000218c83         db  0x00 ; '.'
0000000000218c84         db  0x00 ; '.'
0000000000218c85         db  0x00 ; '.'
0000000000218c86         db  0x00 ; '.'
0000000000218c87         db  0x00 ; '.'
0000000000218c88         db  0x03 ; '.'
0000000000218c89         db  0x00 ; '.'
0000000000218c8a         db  0x00 ; '.'
0000000000218c8b         db  0x00 ; '.'
0000000000218c8c         db  0x00 ; '.'
0000000000218c8d         db  0x00 ; '.'
0000000000218c8e         db  0x00 ; '.'
0000000000218c8f         db  0x00 ; '.'
0000000000218c90         db  0xa8 ; '.'
0000000000218c91         db  0x8d ; '.'
0000000000218c92         db  0x21 ; '!'
0000000000218c93         db  0x00 ; '.'
0000000000218c94         db  0x00 ; '.'
0000000000218c95         db  0x00 ; '.'
0000000000218c96         db  0x00 ; '.'
0000000000218c97         db  0x00 ; '.'
0000000000218c98         db  0x02 ; '.'
0000000000218c99         db  0x00 ; '.'
0000000000218c9a         db  0x00 ; '.'
0000000000218c9b         db  0x00 ; '.'
0000000000218c9c         db  0x00 ; '.'
0000000000218c9d         db  0x00 ; '.'
0000000000218c9e         db  0x00 ; '.'
0000000000218c9f         db  0x00 ; '.'
0000000000218ca0         db  0x30 ; '0'
0000000000218ca1         db  0x06 ; '.'
0000000000218ca2         db  0x00 ; '.'
0000000000218ca3         db  0x00 ; '.'
0000000000218ca4         db  0x00 ; '.'
0000000000218ca5         db  0x00 ; '.'
0000000000218ca6         db  0x00 ; '.'
0000000000218ca7         db  0x00 ; '.'
0000000000218ca8         db  0x14 ; '.'
0000000000218ca9         db  0x00 ; '.'
0000000000218caa         db  0x00 ; '.'
0000000000218cab         db  0x00 ; '.'
0000000000218cac         db  0x00 ; '.'
0000000000218cad         db  0x00 ; '.'
0000000000218cae         db  0x00 ; '.'
0000000000218caf         db  0x00 ; '.'
0000000000218cb0         db  0x07 ; '.'
0000000000218cb1         db  0x00 ; '.'
0000000000218cb2         db  0x00 ; '.'
0000000000218cb3         db  0x00 ; '.'
0000000000218cb4         db  0x00 ; '.'
0000000000218cb5         db  0x00 ; '.'
0000000000218cb6         db  0x00 ; '.'
0000000000218cb7         db  0x00 ; '.'
0000000000218cb8         db  0x17 ; '.'
0000000000218cb9         db  0x00 ; '.'
0000000000218cba         db  0x00 ; '.'
0000000000218cbb         db  0x00 ; '.'
0000000000218cbc         db  0x00 ; '.'
0000000000218cbd         db  0x00 ; '.'
0000000000218cbe         db  0x00 ; '.'
0000000000218cbf         db  0x00 ; '.'
0000000000218cc0         db  0x08 ; '.'
0000000000218cc1         db  0x12 ; '.'
0000000000218cc2         db  0x00 ; '.'
0000000000218cc3         db  0x00 ; '.'
0000000000218cc4         db  0x00 ; '.'
0000000000218cc5         db  0x00 ; '.'
0000000000218cc6         db  0x00 ; '.'
0000000000218cc7         db  0x00 ; '.'
0000000000218cc8         db  0x07 ; '.'
0000000000218cc9         db  0x00 ; '.'
0000000000218cca         db  0x00 ; '.'
0000000000218ccb         db  0x00 ; '.'
0000000000218ccc         db  0x00 ; '.'
0000000000218ccd         db  0x00 ; '.'
0000000000218cce         db  0x00 ; '.'
0000000000218ccf         db  0x00 ; '.'
0000000000218cd0         db  0xf0 ; '.'
0000000000218cd1         db  0x0e ; '.'
0000000000218cd2         db  0x00 ; '.'
0000000000218cd3         db  0x00 ; '.'
0000000000218cd4         db  0x00 ; '.'
0000000000218cd5         db  0x00 ; '.'
0000000000218cd6         db  0x00 ; '.'
0000000000218cd7         db  0x00 ; '.'
0000000000218cd8         db  0x08 ; '.'
0000000000218cd9         db  0x00 ; '.'
0000000000218cda         db  0x00 ; '.'
0000000000218cdb         db  0x00 ; '.'
0000000000218cdc         db  0x00 ; '.'
0000000000218cdd         db  0x00 ; '.'
0000000000218cde         db  0x00 ; '.'
0000000000218cdf         db  0x00 ; '.'
0000000000218ce0         db  0x18 ; '.'
0000000000218ce1         db  0x03 ; '.'
0000000000218ce2         db  0x00 ; '.'
0000000000218ce3         db  0x00 ; '.'
0000000000218ce4         db  0x00 ; '.'
0000000000218ce5         db  0x00 ; '.'
0000000000218ce6         db  0x00 ; '.'
0000000000218ce7         db  0x00 ; '.'
0000000000218ce8         db  0x09 ; '.'
0000000000218ce9         db  0x00 ; '.'
0000000000218cea         db  0x00 ; '.'
0000000000218ceb         db  0x00 ; '.'
0000000000218cec         db  0x00 ; '.'
0000000000218ced         db  0x00 ; '.'
0000000000218cee         db  0x00 ; '.'
0000000000218cef         db  0x00 ; '.'
0000000000218cf0         db  0x18 ; '.'
0000000000218cf1         db  0x00 ; '.'
0000000000218cf2         db  0x00 ; '.'
0000000000218cf3         db  0x00 ; '.'
0000000000218cf4         db  0x00 ; '.'
0000000000218cf5         db  0x00 ; '.'
0000000000218cf6         db  0x00 ; '.'
0000000000218cf7         db  0x00 ; '.'
0000000000218cf8         db  0x1e ; '.'
0000000000218cf9         db  0x00 ; '.'
0000000000218cfa         db  0x00 ; '.'
0000000000218cfb         db  0x00 ; '.'
0000000000218cfc         db  0x00 ; '.'
0000000000218cfd         db  0x00 ; '.'
0000000000218cfe         db  0x00 ; '.'
0000000000218cff         db  0x00 ; '.'
0000000000218d00         db  0x08 ; '.'
0000000000218d01         db  0x00 ; '.'
0000000000218d02         db  0x00 ; '.'
0000000000218d03         db  0x00 ; '.'
0000000000218d04         db  0x00 ; '.'
0000000000218d05         db  0x00 ; '.'
0000000000218d06         db  0x00 ; '.'
0000000000218d07         db  0x00 ; '.'
0000000000218d08         db  0xfb ; '.'
0000000000218d09         db  0xff ; '.'
0000000000218d0a         db  0xff ; '.'
0000000000218d0b         db  0x6f ; 'o'
0000000000218d0c         db  0x00 ; '.'
0000000000218d0d         db  0x00 ; '.'
0000000000218d0e         db  0x00 ; '.'
0000000000218d0f         db  0x00 ; '.'
0000000000218d10         db  0x01 ; '.'
0000000000218d11         db  0x00 ; '.'
0000000000218d12         db  0x00 ; '.'
0000000000218d13         db  0x08 ; '.'
0000000000218d14         db  0x00 ; '.'
0000000000218d15         db  0x00 ; '.'
0000000000218d16         db  0x00 ; '.'
0000000000218d17         db  0x00 ; '.'
0000000000218d18         db  0xfe ; '.'
0000000000218d19         db  0xff ; '.'
0000000000218d1a         db  0xff ; '.'
0000000000218d1b         db  0x6f ; 'o'
0000000000218d1c         db  0x00 ; '.'
0000000000218d1d         db  0x00 ; '.'
0000000000218d1e         db  0x00 ; '.'
0000000000218d1f         db  0x00 ; '.'
0000000000218d20         db  0x80 ; '.'
0000000000218d21         db  0x0e ; '.'
0000000000218d22         db  0x00 ; '.'
0000000000218d23         db  0x00 ; '.'
0000000000218d24         db  0x00 ; '.'
0000000000218d25         db  0x00 ; '.'
0000000000218d26         db  0x00 ; '.'
0000000000218d27         db  0x00 ; '.'
0000000000218d28         db  0xff ; '.'
0000000000218d29         db  0xff ; '.'
0000000000218d2a         db  0xff ; '.'
0000000000218d2b         db  0x6f ; 'o'
0000000000218d2c         db  0x00 ; '.'
0000000000218d2d         db  0x00 ; '.'
0000000000218d2e         db  0x00 ; '.'
0000000000218d2f         db  0x00 ; '.'
0000000000218d30         db  0x01 ; '.'
0000000000218d31         db  0x00 ; '.'
0000000000218d32         db  0x00 ; '.'
0000000000218d33         db  0x00 ; '.'
0000000000218d34         db  0x00 ; '.'
0000000000218d35         db  0x00 ; '.'
0000000000218d36         db  0x00 ; '.'
0000000000218d37         db  0x00 ; '.'
0000000000218d38         db  0xf0 ; '.'
0000000000218d39         db  0xff ; '.'
0000000000218d3a         db  0xff ; '.'
0000000000218d3b         db  0x6f ; 'o'
0000000000218d3c         db  0x00 ; '.'
0000000000218d3d         db  0x00 ; '.'
0000000000218d3e         db  0x00 ; '.'
0000000000218d3f         db  0x00 ; '.'
0000000000218d40         db  0xdc ; '.'
0000000000218d41         db  0x0d ; '.'
0000000000218d42         db  0x00 ; '.'
0000000000218d43         db  0x00 ; '.'
0000000000218d44         db  0x00 ; '.'
0000000000218d45         db  0x00 ; '.'
0000000000218d46         db  0x00 ; '.'
0000000000218d47         db  0x00 ; '.'
0000000000218d48         db  0xf9 ; '.'
0000000000218d49         db  0xff ; '.'
0000000000218d4a         db  0xff ; '.'
0000000000218d4b         db  0x6f ; 'o'
0000000000218d4c         db  0x00 ; '.'
0000000000218d4d         db  0x00 ; '.'
0000000000218d4e         db  0x00 ; '.'
0000000000218d4f         db  0x00 ; '.'
0000000000218d50         db  0x16 ; '.'
0000000000218d51         db  0x00 ; '.'
0000000000218d52         db  0x00 ; '.'
0000000000218d53         db  0x00 ; '.'
0000000000218d54         db  0x00 ; '.'
0000000000218d55         db  0x00 ; '.'
0000000000218d56         db  0x00 ; '.'
0000000000218d57         db  0x00 ; '.'
0000000000218d58         db  0x00 ; '.'
0000000000218d59         db  0x00 ; '.'
0000000000218d5a         db  0x00 ; '.'
0000000000218d5b         db  0x00 ; '.'
0000000000218d5c         db  0x00 ; '.'
0000000000218d5d         db  0x00 ; '.'
0000000000218d5e         db  0x00 ; '.'
0000000000218d5f         db  0x00 ; '.'
0000000000218d60         db  0x00 ; '.'
0000000000218d61         db  0x00 ; '.'
0000000000218d62         db  0x00 ; '.'
0000000000218d63         db  0x00 ; '.'
0000000000218d64         db  0x00 ; '.'
0000000000218d65         db  0x00 ; '.'
0000000000218d66         db  0x00 ; '.'
0000000000218d67         db  0x00 ; '.'
0000000000218d68         db  0x00 ; '.'
0000000000218d69         db  0x00 ; '.'
0000000000218d6a         db  0x00 ; '.'
0000000000218d6b         db  0x00 ; '.'
0000000000218d6c         db  0x00 ; '.'
0000000000218d6d         db  0x00 ; '.'
0000000000218d6e         db  0x00 ; '.'
0000000000218d6f         db  0x00 ; '.'
0000000000218d70         db  0x00 ; '.'
0000000000218d71         db  0x00 ; '.'
0000000000218d72         db  0x00 ; '.'
0000000000218d73         db  0x00 ; '.'
0000000000218d74         db  0x00 ; '.'
0000000000218d75         db  0x00 ; '.'
0000000000218d76         db  0x00 ; '.'
0000000000218d77         db  0x00 ; '.'
0000000000218d78         db  0x00 ; '.'
0000000000218d79         db  0x00 ; '.'
0000000000218d7a         db  0x00 ; '.'
0000000000218d7b         db  0x00 ; '.'
0000000000218d7c         db  0x00 ; '.'
0000000000218d7d         db  0x00 ; '.'
0000000000218d7e         db  0x00 ; '.'
0000000000218d7f         db  0x00 ; '.'
0000000000218d80         db  0x00 ; '.'
0000000000218d81         db  0x00 ; '.'
0000000000218d82         db  0x00 ; '.'
0000000000218d83         db  0x00 ; '.'
0000000000218d84         db  0x00 ; '.'
0000000000218d85         db  0x00 ; '.'
0000000000218d86         db  0x00 ; '.'
0000000000218d87         db  0x00 ; '.'
0000000000218d88         db  0x00 ; '.'
0000000000218d89         db  0x00 ; '.'
0000000000218d8a         db  0x00 ; '.'
0000000000218d8b         db  0x00 ; '.'
0000000000218d8c         db  0x00 ; '.'
0000000000218d8d         db  0x00 ; '.'
0000000000218d8e         db  0x00 ; '.'
0000000000218d8f         db  0x00 ; '.'
0000000000218d90         db  0x00 ; '.'
0000000000218d91         db  0x00 ; '.'
0000000000218d92         db  0x00 ; '.'
0000000000218d93         db  0x00 ; '.'
0000000000218d94         db  0x00 ; '.'
0000000000218d95         db  0x00 ; '.'
0000000000218d96         db  0x00 ; '.'
0000000000218d97         db  0x00 ; '.'
0000000000218d98         db  0x00 ; '.'
0000000000218d99         db  0x00 ; '.'
0000000000218d9a         db  0x00 ; '.'
0000000000218d9b         db  0x00 ; '.'
0000000000218d9c         db  0x00 ; '.'
0000000000218d9d         db  0x00 ; '.'
0000000000218d9e         db  0x00 ; '.'
0000000000218d9f         db  0x00 ; '.'
0000000000218da0         db  0x00 ; '.'
0000000000218da1         db  0x00 ; '.'
0000000000218da2         db  0x00 ; '.'
0000000000218da3         db  0x00 ; '.'
0000000000218da4         db  0x00 ; '.'
0000000000218da5         db  0x00 ; '.'
0000000000218da6         db  0x00 ; '.'
0000000000218da7         db  0x00 ; '.'


        ; Section .got
        ; Range: [0x218da8; 0x218ff8[ (592 bytes)
        ; File offset : [101800; 102392[ (592 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     _GLOBAL_OFFSET_TABLE_:
0000000000218da8         db  0xb8 ; '.'
0000000000218da9         db  0x8b ; '.'
0000000000218daa         db  0x21 ; '!'
0000000000218dab         db  0x00 ; '.'
0000000000218dac         db  0x00 ; '.'
0000000000218dad         db  0x00 ; '.'
0000000000218dae         db  0x00 ; '.'
0000000000218daf         db  0x00 ; '.'
                     qword_218db0:
0000000000218db0         dq         0x0000000000000000                          ; DATA XREF=0x1850
0000000000218db8         db  0x00 ; '.'                                         ; DATA XREF=0x1856
0000000000218db9         db  0x00 ; '.'
0000000000218dba         db  0x00 ; '.'
0000000000218dbb         db  0x00 ; '.'
0000000000218dbc         db  0x00 ; '.'
0000000000218dbd         db  0x00 ; '.'
0000000000218dbe         db  0x00 ; '.'
0000000000218dbf         db  0x00 ; '.'
                     __ctype_toupper_loc@GOT:        // __ctype_toupper_loc
0000000000218dc0         dq         0x000000000021b410                          ; DATA XREF=j___ctype_toupper_loc
                     getenv@GOT:        // getenv
0000000000218dc8         dq         0x000000000021b418                          ; DATA XREF=j_getenv
                     free@GOT:        // free
0000000000218dd0         dq         0x000000000021b420                          ; DATA XREF=j_free
                     abort@GOT:        // abort
0000000000218dd8         dq         0x000000000021b428                          ; DATA XREF=j_abort
                     __errno_location@GOT:        // __errno_location
0000000000218de0         dq         0x000000000021b430                          ; DATA XREF=j___errno_location
                     unlink@GOT:        // unlink
0000000000218de8         dq         0x000000000021b438                          ; DATA XREF=j_unlink
                     strncmp@GOT:        // strncmp
0000000000218df0         dq         0x000000000021b440                          ; DATA XREF=j_strncmp
                     _exit@GOT:        // _exit
0000000000218df8         dq         0x000000000021b450                          ; DATA XREF=j__exit
                     __fpending@GOT:        // __fpending
0000000000218e00         dq         0x000000000021b458                          ; DATA XREF=j___fpending
                     isatty@GOT:        // isatty
0000000000218e08         dq         0x000000000021b460                          ; DATA XREF=j_isatty
                     fcntl@GOT:        // fcntl
0000000000218e10         dq         0x000000000021b468                          ; DATA XREF=j_fcntl
                     clearerr_unlocked@GOT:        // clearerr_unlocked
0000000000218e18         dq         0x000000000021b470                          ; DATA XREF=j_clearerr_unlocked
                     textdomain@GOT:        // textdomain
0000000000218e20         dq         0x000000000021b478                          ; DATA XREF=j_textdomain
                     iswctype@GOT:        // iswctype
0000000000218e28         dq         0x000000000021b480                          ; DATA XREF=j_iswctype
                     fclose@GOT:        // fclose
0000000000218e30         dq         0x000000000021b488                          ; DATA XREF=j_fclose
                     bindtextdomain@GOT:        // bindtextdomain
0000000000218e38         dq         0x000000000021b490                          ; DATA XREF=j_bindtextdomain
                     dcgettext@GOT:        // dcgettext
0000000000218e40         dq         0x000000000021b498                          ; DATA XREF=j_dcgettext
                     __ctype_get_mb_cur_max@GOT:        // __ctype_get_mb_cur_max
0000000000218e48         dq         0x000000000021b4a0                          ; DATA XREF=j___ctype_get_mb_cur_max
                     strlen@GOT:        // strlen
0000000000218e50         dq         0x000000000021b4a8                          ; DATA XREF=j_strlen
                     __stack_chk_fail@GOT:        // __stack_chk_fail
0000000000218e58         dq         0x000000000021b4b0                          ; DATA XREF=j___stack_chk_fail
                     getopt_long@GOT:        // getopt_long
0000000000218e60         dq         0x000000000021b4b8                          ; DATA XREF=j_getopt_long
                     mbrtowc@GOT:        // mbrtowc
0000000000218e68         dq         0x000000000021b4c0                          ; DATA XREF=j_mbrtowc
                     strrchr@GOT:        // strrchr
0000000000218e70         dq         0x000000000021b4c8                          ; DATA XREF=j_strrchr
                     ftruncate@GOT:        // ftruncate
0000000000218e78         dq         0x000000000021b4d0                          ; DATA XREF=j_ftruncate
                     mkostemp@GOT:        // mkostemp
0000000000218e80         dq         0x000000000021b4d8                          ; DATA XREF=j_mkostemp
                     lseek@GOT:        // lseek
0000000000218e88         dq         0x000000000021b4e0                          ; DATA XREF=j_lseek
                     __assert_fail@GOT:        // __assert_fail
0000000000218e90         dq         0x000000000021b4e8                          ; DATA XREF=j___assert_fail
                     memset@GOT:        // memset
0000000000218e98         dq         0x000000000021b4f0                          ; DATA XREF=j_memset
                     close@GOT:        // close
0000000000218ea0         dq         0x000000000021b4f8                          ; DATA XREF=j_close
                     read@GOT:        // read
0000000000218ea8         dq         0x000000000021b500                          ; DATA XREF=j_read
                     memcmp@GOT:        // memcmp
0000000000218eb0         dq         0x000000000021b510                          ; DATA XREF=j_memcmp
                     wctype@GOT:        // wctype
0000000000218eb8         dq         0x000000000021b518                          ; DATA XREF=j_wctype
                     fputs_unlocked@GOT:        // fputs_unlocked
0000000000218ec0         dq         0x000000000021b520                          ; DATA XREF=j_fputs_unlocked
                     calloc@GOT:        // calloc
0000000000218ec8         dq         0x000000000021b528                          ; DATA XREF=j_calloc
                     strcmp@GOT:        // strcmp
0000000000218ed0         dq         0x000000000021b530                          ; DATA XREF=j_strcmp
                     memcpy@GOT:        // memcpy
0000000000218ed8         dq         0x000000000021b540                          ; DATA XREF=j_memcpy
                     fileno@GOT:        // fileno
0000000000218ee0         dq         0x000000000021b548                          ; DATA XREF=j_fileno
                     iswalnum@GOT:        // iswalnum
0000000000218ee8         dq         0x000000000021b550                          ; DATA XREF=j_iswalnum
                     malloc@GOT:        // malloc
0000000000218ef0         dq         0x000000000021b558                          ; DATA XREF=j_malloc
                     wcrtomb@GOT:        // wcrtomb
0000000000218ef8         dq         0x000000000021b560                          ; DATA XREF=j_wcrtomb
                     fflush@GOT:        // fflush
0000000000218f00         dq         0x000000000021b568                          ; DATA XREF=j_fflush
                     nl_langinfo@GOT:        // nl_langinfo
0000000000218f08         dq         0x000000000021b570                          ; DATA XREF=j_nl_langinfo
                     mkstemp@GOT:        // mkstemp
0000000000218f10         dq         0x000000000021b578                          ; DATA XREF=j_mkstemp
                     __freading@GOT:        // __freading
0000000000218f18         dq         0x000000000021b580                          ; DATA XREF=j___freading
                     fwrite_unlocked@GOT:        // fwrite_unlocked
0000000000218f20         dq         0x000000000021b588                          ; DATA XREF=j_fwrite_unlocked
                     realloc@GOT:        // realloc
0000000000218f28         dq         0x000000000021b590                          ; DATA XREF=j_realloc
                     fdopen@GOT:        // fdopen
0000000000218f30         dq         0x000000000021b598                          ; DATA XREF=j_fdopen
                     setlocale@GOT:        // setlocale
0000000000218f38         dq         0x000000000021b5a0                          ; DATA XREF=j_setlocale
                     __printf_chk@GOT:        // __printf_chk
0000000000218f40         dq         0x000000000021b5a8                          ; DATA XREF=j___printf_chk
                     btowc@GOT:        // btowc
0000000000218f48         dq         0x000000000021b5b0                          ; DATA XREF=j_btowc
                     mempcpy@GOT:        // mempcpy
0000000000218f50         dq         0x000000000021b5b8                          ; DATA XREF=j_mempcpy
                     memmove@GOT:        // memmove
0000000000218f58         dq         0x000000000021b5c0                          ; DATA XREF=j_memmove
                     error@GOT:        // error
0000000000218f60         dq         0x000000000021b5c8                          ; DATA XREF=j_error
                     open@GOT:        // open
0000000000218f68         dq         0x000000000021b5d0                          ; DATA XREF=j_open
                     fseeko@GOT:        // fseeko
0000000000218f70         dq         0x000000000021b5d8                          ; DATA XREF=j_fseeko
                     towlower@GOT:        // towlower
0000000000218f78         dq         0x000000000021b5e0                          ; DATA XREF=j_towlower
                     towupper@GOT:        // towupper
0000000000218f80         dq         0x000000000021b5e8                          ; DATA XREF=j_towupper
                     __cxa_atexit@GOT:        // __cxa_atexit
0000000000218f88         dq         0x000000000021b5f0                          ; DATA XREF=j___cxa_atexit
                     exit@GOT:        // exit
0000000000218f90         dq         0x000000000021b5f8                          ; DATA XREF=j_exit
                     fwrite@GOT:        // fwrite
0000000000218f98         dq         0x000000000021b600                          ; DATA XREF=j_fwrite
                     __fprintf_chk@GOT:        // __fprintf_chk
0000000000218fa0         dq         0x000000000021b608                          ; DATA XREF=j___fprintf_chk
                     fflush_unlocked@GOT:        // fflush_unlocked
0000000000218fa8         dq         0x000000000021b618                          ; DATA XREF=j_fflush_unlocked
                     mbsinit@GOT:        // mbsinit
0000000000218fb0         dq         0x000000000021b620                          ; DATA XREF=j_mbsinit
                     iswprint@GOT:        // iswprint
0000000000218fb8         dq         0x000000000021b628                          ; DATA XREF=j_iswprint
                     __ctype_tolower_loc@GOT:        // __ctype_tolower_loc
0000000000218fc0         dq         0x000000000021b638                          ; DATA XREF=j___ctype_tolower_loc
                     __ctype_b_loc@GOT:        // __ctype_b_loc
0000000000218fc8         dq         0x000000000021b640                          ; DATA XREF=j___ctype_b_loc
                     qword_218fd0:
0000000000218fd0         dq         0x0000000000000000                          ; DATA XREF=deregister_tm_clones+23
0000000000218fd8         db  0x00 ; '.'                                         ; DATA XREF=_start+36
0000000000218fd9         db  0x00 ; '.'
0000000000218fda         db  0x00 ; '.'
0000000000218fdb         db  0x00 ; '.'
0000000000218fdc         db  0x00 ; '.'
0000000000218fdd         db  0x00 ; '.'
0000000000218fde         db  0x00 ; '.'
0000000000218fdf         db  0x00 ; '.'
                     qword_218fe0:
0000000000218fe0         dq         0x0000000000000000                          ; DATA XREF=_init+4
                     qword_218fe8:
0000000000218fe8         dq         0x0000000000000000                          ; DATA XREF=register_tm_clones+40
                     qword_218ff0:
0000000000218ff0         dq         0x0000000000000000                          ; DATA XREF=j_qword_218ff0, __do_global_dtors_aux+9
0000000000218ff8         db  0x00 ; '.'
0000000000218ff9         db  0x00 ; '.'
0000000000218ffa         db  0x00 ; '.'
0000000000218ffb         db  0x00 ; '.'
0000000000218ffc         db  0x00 ; '.'
0000000000218ffd         db  0x00 ; '.'
0000000000218ffe         db  0x00 ; '.'
0000000000218fff         db  0x00 ; '.'


        ; Section .data
        ; Range: [0x219000; 0x219080[ (128 bytes)
        ; File offset : [102400; 102528[ (128 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

0000000000219000         db  0x00 ; '.'
0000000000219001         db  0x00 ; '.'
0000000000219002         db  0x00 ; '.'
0000000000219003         db  0x00 ; '.'
0000000000219004         db  0x00 ; '.'
0000000000219005         db  0x00 ; '.'
0000000000219006         db  0x00 ; '.'
0000000000219007         db  0x00 ; '.'
                     __dso_handle:
0000000000219008         dq         0x0000000000219008                          ; DATA XREF=__do_global_dtors_aux+23, atexit, __dso_handle
                     Version:
0000000000219010         dq         0x0000000000014677                          ; "8.31", DATA XREF=main+222
                     exit_failure:
0000000000219018         dd         0x00000001                                  ; DATA XREF=close_stdout+130, xalloc_die+23
000000000021901c         db  0x00 ; '.'
000000000021901d         db  0x00 ; '.'
000000000021901e         db  0x00 ; '.'
000000000021901f         db  0x00 ; '.'
                     quote_quoting_options:
0000000000219020         db  0x08 ; '.'                                         ; DATA XREF=quote_n_mem, quote_mem, quote_n, quote
0000000000219021         db  0x00 ; '.'
0000000000219022         db  0x00 ; '.'
0000000000219023         db  0x00 ; '.'
0000000000219024         db  0x00 ; '.'
0000000000219025         db  0x00 ; '.'
0000000000219026         db  0x00 ; '.'
0000000000219027         db  0x00 ; '.'
0000000000219028         db  0x00 ; '.'
0000000000219029         db  0x00 ; '.'
000000000021902a         db  0x00 ; '.'
000000000021902b         db  0x00 ; '.'
000000000021902c         db  0x00 ; '.'
000000000021902d         db  0x00 ; '.'
000000000021902e         db  0x00 ; '.'
000000000021902f         db  0x00 ; '.'
0000000000219030         db  0x00 ; '.'
0000000000219031         db  0x00 ; '.'
0000000000219032         db  0x00 ; '.'
0000000000219033         db  0x00 ; '.'
0000000000219034         db  0x00 ; '.'
0000000000219035         db  0x00 ; '.'
0000000000219036         db  0x00 ; '.'
0000000000219037         db  0x00 ; '.'
0000000000219038         db  0x00 ; '.'
0000000000219039         db  0x00 ; '.'
000000000021903a         db  0x00 ; '.'
000000000021903b         db  0x00 ; '.'
000000000021903c         db  0x00 ; '.'
000000000021903d         db  0x00 ; '.'
000000000021903e         db  0x00 ; '.'
000000000021903f         db  0x00 ; '.'
0000000000219040         db  0x00 ; '.'
0000000000219041         db  0x00 ; '.'
0000000000219042         db  0x00 ; '.'
0000000000219043         db  0x00 ; '.'
0000000000219044         db  0x00 ; '.'
0000000000219045         db  0x00 ; '.'
0000000000219046         db  0x00 ; '.'
0000000000219047         db  0x00 ; '.'
0000000000219048         db  0x00 ; '.'
0000000000219049         db  0x00 ; '.'
000000000021904a         db  0x00 ; '.'
000000000021904b         db  0x00 ; '.'
000000000021904c         db  0x00 ; '.'
000000000021904d         db  0x00 ; '.'
000000000021904e         db  0x00 ; '.'
000000000021904f         db  0x00 ; '.'
0000000000219050         db  0x00 ; '.'
0000000000219051         db  0x00 ; '.'
0000000000219052         db  0x00 ; '.'
0000000000219053         db  0x00 ; '.'
0000000000219054         db  0x00 ; '.'
0000000000219055         db  0x00 ; '.'
0000000000219056         db  0x00 ; '.'
0000000000219057         db  0x00 ; '.'
                     nslots:
0000000000219058         dd         0x00000001                                  ; DATA XREF=quotearg_n_options+58, quotearg_n_options+125, quotearg_n_options+158, quotearg_free, quotearg_free+133
000000000021905c         align      32
                     slotvec:
0000000000219060         dq         0x0000000000219070                          ; DATA XREF=quotearg_n_options+41, quotearg_n_options+118, quotearg_n_options+402, quotearg_free+8, quotearg_free+125
0000000000219068         db  0x00 ; '.'
0000000000219069         db  0x00 ; '.'
000000000021906a         db  0x00 ; '.'
000000000021906b         db  0x00 ; '.'
000000000021906c         db  0x00 ; '.'
000000000021906d         db  0x00 ; '.'
000000000021906e         db  0x00 ; '.'
000000000021906f         db  0x00 ; '.'
                     slotvec0:
0000000000219070         dq         1.26481e-321, 1.09112e-317                  ; DATA XREF=quotearg_n_options+84, quotearg_n_options+391, quotearg_free+87, quotearg_free+105, slotvec


        ; Section .bss
        ; Range: [0x219080; 0x21b408[ (9096 bytes)
        ; No data on disk
        ; Flags: 0x3
        ;   SHT_NOBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     program_invocation_short_name@@GLIBC_2.2.5:
0000000000219080         db  0x00 ; '.'                                         ; DATA XREF=deregister_tm_clones, deregister_tm_clones+8, register_tm_clones, register_tm_clones+7, set_program_name+102
0000000000219081         db  0x00 ; '.'
0000000000219082         db  0x00 ; '.'
0000000000219083         db  0x00 ; '.'
0000000000219084         db  0x00 ; '.'
0000000000219085         db  0x00 ; '.'
0000000000219086         db  0x00 ; '.'
0000000000219087         db  0x00 ; '.'
                     stdout@@GLIBC_2.2.5:
0000000000219088         db  0x00 ; '.'                                         ; DATA XREF=main+215, output+96, output+192, usage+125, usage+162, usage+199, usage+236, usage+273, usage+310, usage+904, close_stdout+6
0000000000219089         db  0x00 ; '.'
000000000021908a         db  0x00 ; '.'
000000000021908b         db  0x00 ; '.'
000000000021908c         db  0x00 ; '.'
000000000021908d         db  0x00 ; '.'
000000000021908e         db  0x00 ; '.'
000000000021908f         db  0x00 ; '.'
                     optind@@GLIBC_2.2.5:
0000000000219090         db  0x00 ; '.'                                         ; DATA XREF=main+588
0000000000219091         db  0x00 ; '.'
0000000000219092         db  0x00 ; '.'
0000000000219093         db  0x00 ; '.'
0000000000219094         db  0x00 ; '.'
0000000000219095         db  0x00 ; '.'
0000000000219096         db  0x00 ; '.'
0000000000219097         db  0x00 ; '.'
                     optarg@@GLIBC_2.2.5:
0000000000219098         db  0x00 ; '.'                                         ; DATA XREF=main+179
0000000000219099         db  0x00 ; '.'
000000000021909a         db  0x00 ; '.'
000000000021909b         db  0x00 ; '.'
000000000021909c         db  0x00 ; '.'
000000000021909d         db  0x00 ; '.'
000000000021909e         db  0x00 ; '.'
000000000021909f         db  0x00 ; '.'
                     __progname_full@@GLIBC_2.2.5:
00000000002190a0         db  0x00 ; '.'                                         ; DATA XREF=set_program_name+116
00000000002190a1         db  0x00 ; '.'
00000000002190a2         db  0x00 ; '.'
00000000002190a3         db  0x00 ; '.'
00000000002190a4         db  0x00 ; '.'
00000000002190a5         db  0x00 ; '.'
00000000002190a6         db  0x00 ; '.'
00000000002190a7         db  0x00 ; '.'
00000000002190a8         db  0x00 ; '.'
00000000002190a9         db  0x00 ; '.'
00000000002190aa         db  0x00 ; '.'
00000000002190ab         db  0x00 ; '.'
00000000002190ac         db  0x00 ; '.'
00000000002190ad         db  0x00 ; '.'
00000000002190ae         db  0x00 ; '.'
00000000002190af         db  0x00 ; '.'
00000000002190b0         db  0x00 ; '.'
00000000002190b1         db  0x00 ; '.'
00000000002190b2         db  0x00 ; '.'
00000000002190b3         db  0x00 ; '.'
00000000002190b4         db  0x00 ; '.'
00000000002190b5         db  0x00 ; '.'
00000000002190b6         db  0x00 ; '.'
00000000002190b7         db  0x00 ; '.'
00000000002190b8         db  0x00 ; '.'
00000000002190b9         db  0x00 ; '.'
00000000002190ba         db  0x00 ; '.'
00000000002190bb         db  0x00 ; '.'
00000000002190bc         db  0x00 ; '.'
00000000002190bd         db  0x00 ; '.'
00000000002190be         db  0x00 ; '.'
00000000002190bf         db  0x00 ; '.'
                     stderr@@GLIBC_2.2.5:
00000000002190c0         db  0x00 ; '.'                                         ; DATA XREF=usage+61, close_stdout+44, set_program_name+125
00000000002190c1         db  0x00 ; '.'
00000000002190c2         db  0x00 ; '.'
00000000002190c3         db  0x00 ; '.'
00000000002190c4         db  0x00 ; '.'
00000000002190c5         db  0x00 ; '.'
00000000002190c6         db  0x00 ; '.'
00000000002190c7         db  0x00 ; '.'
                     completed.7697:
00000000002190c8         db  0x00 ; '.'                                         ; DATA XREF=__do_global_dtors_aux, __do_global_dtors_aux+40
00000000002190c9         db  0x00 ; '.'
00000000002190ca         db  0x00 ; '.'
00000000002190cb         db  0x00 ; '.'
00000000002190cc         db  0x00 ; '.'
00000000002190cd         db  0x00 ; '.'
00000000002190ce         db  0x00 ; '.'
00000000002190cf         db  0x00 ; '.'
00000000002190d0         db  0x00 ; '.'
00000000002190d1         db  0x00 ; '.'
00000000002190d2         db  0x00 ; '.'
00000000002190d3         db  0x00 ; '.'
00000000002190d4         db  0x00 ; '.'
00000000002190d5         db  0x00 ; '.'
00000000002190d6         db  0x00 ; '.'
00000000002190d7         db  0x00 ; '.'
00000000002190d8         db  0x00 ; '.'
00000000002190d9         db  0x00 ; '.'
00000000002190da         db  0x00 ; '.'
00000000002190db         db  0x00 ; '.'
00000000002190dc         db  0x00 ; '.'
00000000002190dd         db  0x00 ; '.'
00000000002190de         db  0x00 ; '.'
00000000002190df         db  0x00 ; '.'
                     buffer.6999:
00000000002190e0         db  0x00 ; '.'                                         ; DATA XREF=output+39, output+147, output+199
00000000002190e1         db  0x00 ; '.'
00000000002190e2         db  0x00 ; '.'
00000000002190e3         db  0x00 ; '.'
00000000002190e4         db  0x00 ; '.'
00000000002190e5         db  0x00 ; '.'
00000000002190e6         db  0x00 ; '.'
00000000002190e7         db  0x00 ; '.'
00000000002190e8         db  0x00 ; '.'
00000000002190e9         db  0x00 ; '.'
00000000002190ea         db  0x00 ; '.'
00000000002190eb         db  0x00 ; '.'
00000000002190ec         db  0x00 ; '.'
00000000002190ed         db  0x00 ; '.'
00000000002190ee         db  0x00 ; '.'
00000000002190ef         db  0x00 ; '.'
00000000002190f0         db  0x00 ; '.'
00000000002190f1         db  0x00 ; '.'
00000000002190f2         db  0x00 ; '.'
00000000002190f3         db  0x00 ; '.'
00000000002190f4         db  0x00 ; '.'
00000000002190f5         db  0x00 ; '.'
00000000002190f6         db  0x00 ; '.'
00000000002190f7         db  0x00 ; '.'
00000000002190f8         db  0x00 ; '.'
00000000002190f9         db  0x00 ; '.'
00000000002190fa         db  0x00 ; '.'
00000000002190fb         db  0x00 ; '.'
00000000002190fc         db  0x00 ; '.'
00000000002190fd         db  0x00 ; '.'
00000000002190fe         db  0x00 ; '.'
00000000002190ff         db  0x00 ; '.'
0000000000219100         db  0x00 ; '.'
0000000000219101         db  0x00 ; '.'
0000000000219102         db  0x00 ; '.'
0000000000219103         db  0x00 ; '.'
0000000000219104         db  0x00 ; '.'
0000000000219105         db  0x00 ; '.'
0000000000219106         db  0x00 ; '.'
0000000000219107         db  0x00 ; '.'
0000000000219108         db  0x00 ; '.'
0000000000219109         db  0x00 ; '.'
000000000021910a         db  0x00 ; '.'
000000000021910b         db  0x00 ; '.'
000000000021910c         db  0x00 ; '.'
000000000021910d         db  0x00 ; '.'
000000000021910e         db  0x00 ; '.'
000000000021910f         db  0x00 ; '.'
0000000000219110         db  0x00 ; '.'
0000000000219111         db  0x00 ; '.'
0000000000219112         db  0x00 ; '.'
0000000000219113         db  0x00 ; '.'
0000000000219114         db  0x00 ; '.'
0000000000219115         db  0x00 ; '.'
0000000000219116         db  0x00 ; '.'
0000000000219117         db  0x00 ; '.'
0000000000219118         db  0x00 ; '.'
0000000000219119         db  0x00 ; '.'
000000000021911a         db  0x00 ; '.'
000000000021911b         db  0x00 ; '.'
000000000021911c         db  0x00 ; '.'
000000000021911d         db  0x00 ; '.'
000000000021911e         db  0x00 ; '.'
000000000021911f         db  0x00 ; '.'
0000000000219120         db  0x00 ; '.'
0000000000219121         db  0x00 ; '.'
0000000000219122         db  0x00 ; '.'
0000000000219123         db  0x00 ; '.'
0000000000219124         db  0x00 ; '.'
0000000000219125         db  0x00 ; '.'
0000000000219126         db  0x00 ; '.'
0000000000219127         db  0x00 ; '.'
0000000000219128         db  0x00 ; '.'
0000000000219129         db  0x00 ; '.'
000000000021912a         db  0x00 ; '.'
000000000021912b         db  0x00 ; '.'
000000000021912c         db  0x00 ; '.'
000000000021912d         db  0x00 ; '.'
000000000021912e         db  0x00 ; '.'
000000000021912f         db  0x00 ; '.'
0000000000219130         db  0x00 ; '.'
0000000000219131         db  0x00 ; '.'
0000000000219132         db  0x00 ; '.'
0000000000219133         db  0x00 ; '.'
0000000000219134         db  0x00 ; '.'
0000000000219135         db  0x00 ; '.'
0000000000219136         db  0x00 ; '.'
0000000000219137         db  0x00 ; '.'
0000000000219138         db  0x00 ; '.'
0000000000219139         db  0x00 ; '.'
000000000021913a         db  0x00 ; '.'
000000000021913b         db  0x00 ; '.'
000000000021913c         db  0x00 ; '.'
000000000021913d         db  0x00 ; '.'
000000000021913e         db  0x00 ; '.'
000000000021913f         db  0x00 ; '.'
0000000000219140         db  0x00 ; '.'
0000000000219141         db  0x00 ; '.'
0000000000219142         db  0x00 ; '.'
0000000000219143         db  0x00 ; '.'
0000000000219144         db  0x00 ; '.'
0000000000219145         db  0x00 ; '.'
0000000000219146         db  0x00 ; '.'
0000000000219147         db  0x00 ; '.'
0000000000219148         db  0x00 ; '.'
0000000000219149         db  0x00 ; '.'
000000000021914a         db  0x00 ; '.'
000000000021914b         db  0x00 ; '.'
000000000021914c         db  0x00 ; '.'
000000000021914d         db  0x00 ; '.'
000000000021914e         db  0x00 ; '.'
000000000021914f         db  0x00 ; '.'
0000000000219150         db  0x00 ; '.'
0000000000219151         db  0x00 ; '.'
0000000000219152         db  0x00 ; '.'
0000000000219153         db  0x00 ; '.'
0000000000219154         db  0x00 ; '.'
0000000000219155         db  0x00 ; '.'
0000000000219156         db  0x00 ; '.'
0000000000219157         db  0x00 ; '.'
0000000000219158         db  0x00 ; '.'
0000000000219159         db  0x00 ; '.'
000000000021915a         db  0x00 ; '.'
000000000021915b         db  0x00 ; '.'
000000000021915c         db  0x00 ; '.'
000000000021915d         db  0x00 ; '.'
000000000021915e         db  0x00 ; '.'
000000000021915f         db  0x00 ; '.'
0000000000219160         db  0x00 ; '.'
0000000000219161         db  0x00 ; '.'
0000000000219162         db  0x00 ; '.'
0000000000219163         db  0x00 ; '.'
0000000000219164         db  0x00 ; '.'
0000000000219165         db  0x00 ; '.'
0000000000219166         db  0x00 ; '.'
0000000000219167         db  0x00 ; '.'
0000000000219168         db  0x00 ; '.'
0000000000219169         db  0x00 ; '.'
000000000021916a         db  0x00 ; '.'
000000000021916b         db  0x00 ; '.'
000000000021916c         db  0x00 ; '.'
000000000021916d         db  0x00 ; '.'
000000000021916e         db  0x00 ; '.'
000000000021916f         db  0x00 ; '.'
0000000000219170         db  0x00 ; '.'
0000000000219171         db  0x00 ; '.'
0000000000219172         db  0x00 ; '.'
0000000000219173         db  0x00 ; '.'
0000000000219174         db  0x00 ; '.'
0000000000219175         db  0x00 ; '.'
0000000000219176         db  0x00 ; '.'
0000000000219177         db  0x00 ; '.'
0000000000219178         db  0x00 ; '.'
0000000000219179         db  0x00 ; '.'
000000000021917a         db  0x00 ; '.'
000000000021917b         db  0x00 ; '.'
000000000021917c         db  0x00 ; '.'
000000000021917d         db  0x00 ; '.'
000000000021917e         db  0x00 ; '.'
000000000021917f         db  0x00 ; '.'
0000000000219180         db  0x00 ; '.'
0000000000219181         db  0x00 ; '.'
0000000000219182         db  0x00 ; '.'
0000000000219183         db  0x00 ; '.'
0000000000219184         db  0x00 ; '.'
0000000000219185         db  0x00 ; '.'
0000000000219186         db  0x00 ; '.'
0000000000219187         db  0x00 ; '.'
0000000000219188         db  0x00 ; '.'
0000000000219189         db  0x00 ; '.'
000000000021918a         db  0x00 ; '.'
000000000021918b         db  0x00 ; '.'
000000000021918c         db  0x00 ; '.'
000000000021918d         db  0x00 ; '.'
000000000021918e         db  0x00 ; '.'
000000000021918f         db  0x00 ; '.'
0000000000219190         db  0x00 ; '.'
0000000000219191         db  0x00 ; '.'
0000000000219192         db  0x00 ; '.'
0000000000219193         db  0x00 ; '.'
0000000000219194         db  0x00 ; '.'
0000000000219195         db  0x00 ; '.'
0000000000219196         db  0x00 ; '.'
0000000000219197         db  0x00 ; '.'
0000000000219198         db  0x00 ; '.'
0000000000219199         db  0x00 ; '.'
000000000021919a         db  0x00 ; '.'
000000000021919b         db  0x00 ; '.'
000000000021919c         db  0x00 ; '.'
000000000021919d         db  0x00 ; '.'
000000000021919e         db  0x00 ; '.'
000000000021919f         db  0x00 ; '.'
00000000002191a0         db  0x00 ; '.'
00000000002191a1         db  0x00 ; '.'
00000000002191a2         db  0x00 ; '.'
00000000002191a3         db  0x00 ; '.'
00000000002191a4         db  0x00 ; '.'
00000000002191a5         db  0x00 ; '.'
00000000002191a6         db  0x00 ; '.'
00000000002191a7         db  0x00 ; '.'
00000000002191a8         db  0x00 ; '.'
00000000002191a9         db  0x00 ; '.'
00000000002191aa         db  0x00 ; '.'
00000000002191ab         db  0x00 ; '.'
00000000002191ac         db  0x00 ; '.'
00000000002191ad         db  0x00 ; '.'
00000000002191ae         db  0x00 ; '.'
00000000002191af         db  0x00 ; '.'
00000000002191b0         db  0x00 ; '.'
00000000002191b1         db  0x00 ; '.'
00000000002191b2         db  0x00 ; '.'
00000000002191b3         db  0x00 ; '.'
00000000002191b4         db  0x00 ; '.'
00000000002191b5         db  0x00 ; '.'
00000000002191b6         db  0x00 ; '.'
00000000002191b7         db  0x00 ; '.'
00000000002191b8         db  0x00 ; '.'
00000000002191b9         db  0x00 ; '.'
00000000002191ba         db  0x00 ; '.'
00000000002191bb         db  0x00 ; '.'
00000000002191bc         db  0x00 ; '.'
00000000002191bd         db  0x00 ; '.'
00000000002191be         db  0x00 ; '.'
00000000002191bf         db  0x00 ; '.'
00000000002191c0         db  0x00 ; '.'
00000000002191c1         db  0x00 ; '.'
00000000002191c2         db  0x00 ; '.'
00000000002191c3         db  0x00 ; '.'
00000000002191c4         db  0x00 ; '.'
00000000002191c5         db  0x00 ; '.'
00000000002191c6         db  0x00 ; '.'
00000000002191c7         db  0x00 ; '.'
00000000002191c8         db  0x00 ; '.'
00000000002191c9         db  0x00 ; '.'
00000000002191ca         db  0x00 ; '.'
00000000002191cb         db  0x00 ; '.'
00000000002191cc         db  0x00 ; '.'
00000000002191cd         db  0x00 ; '.'
00000000002191ce         db  0x00 ; '.'
00000000002191cf         db  0x00 ; '.'
00000000002191d0         db  0x00 ; '.'
00000000002191d1         db  0x00 ; '.'
00000000002191d2         db  0x00 ; '.'
00000000002191d3         db  0x00 ; '.'
00000000002191d4         db  0x00 ; '.'
00000000002191d5         db  0x00 ; '.'
00000000002191d6         db  0x00 ; '.'
00000000002191d7         db  0x00 ; '.'
00000000002191d8         db  0x00 ; '.'
00000000002191d9         db  0x00 ; '.'
00000000002191da         db  0x00 ; '.'
00000000002191db         db  0x00 ; '.'
00000000002191dc         db  0x00 ; '.'
00000000002191dd         db  0x00 ; '.'
00000000002191de         db  0x00 ; '.'
00000000002191df         db  0x00 ; '.'
00000000002191e0         db  0x00 ; '.'
00000000002191e1         db  0x00 ; '.'
00000000002191e2         db  0x00 ; '.'
00000000002191e3         db  0x00 ; '.'
00000000002191e4         db  0x00 ; '.'
00000000002191e5         db  0x00 ; '.'
00000000002191e6         db  0x00 ; '.'
00000000002191e7         db  0x00 ; '.'
00000000002191e8         db  0x00 ; '.'
00000000002191e9         db  0x00 ; '.'
00000000002191ea         db  0x00 ; '.'
00000000002191eb         db  0x00 ; '.'
00000000002191ec         db  0x00 ; '.'
00000000002191ed         db  0x00 ; '.'
00000000002191ee         db  0x00 ; '.'
00000000002191ef         db  0x00 ; '.'
00000000002191f0         db  0x00 ; '.'
00000000002191f1         db  0x00 ; '.'
00000000002191f2         db  0x00 ; '.'
00000000002191f3         db  0x00 ; '.'
00000000002191f4         db  0x00 ; '.'
00000000002191f5         db  0x00 ; '.'
00000000002191f6         db  0x00 ; '.'
00000000002191f7         db  0x00 ; '.'
00000000002191f8         db  0x00 ; '.'
00000000002191f9         db  0x00 ; '.'
00000000002191fa         db  0x00 ; '.'
00000000002191fb         db  0x00 ; '.'
00000000002191fc         db  0x00 ; '.'
00000000002191fd         db  0x00 ; '.'
00000000002191fe         db  0x00 ; '.'
00000000002191ff         db  0x00 ; '.'
0000000000219200         db  0x00 ; '.'
0000000000219201         db  0x00 ; '.'
0000000000219202         db  0x00 ; '.'
0000000000219203         db  0x00 ; '.'
0000000000219204         db  0x00 ; '.'
0000000000219205         db  0x00 ; '.'
0000000000219206         db  0x00 ; '.'
0000000000219207         db  0x00 ; '.'
0000000000219208         db  0x00 ; '.'
0000000000219209         db  0x00 ; '.'
000000000021920a         db  0x00 ; '.'
000000000021920b         db  0x00 ; '.'
000000000021920c         db  0x00 ; '.'
000000000021920d         db  0x00 ; '.'
000000000021920e         db  0x00 ; '.'
000000000021920f         db  0x00 ; '.'
0000000000219210         db  0x00 ; '.'
0000000000219211         db  0x00 ; '.'
0000000000219212         db  0x00 ; '.'
0000000000219213         db  0x00 ; '.'
0000000000219214         db  0x00 ; '.'
0000000000219215         db  0x00 ; '.'
0000000000219216         db  0x00 ; '.'
0000000000219217         db  0x00 ; '.'
0000000000219218         db  0x00 ; '.'
0000000000219219         db  0x00 ; '.'
000000000021921a         db  0x00 ; '.'
000000000021921b         db  0x00 ; '.'
000000000021921c         db  0x00 ; '.'
000000000021921d         db  0x00 ; '.'
000000000021921e         db  0x00 ; '.'
000000000021921f         db  0x00 ; '.'
0000000000219220         db  0x00 ; '.'
0000000000219221         db  0x00 ; '.'
0000000000219222         db  0x00 ; '.'
0000000000219223         db  0x00 ; '.'
0000000000219224         db  0x00 ; '.'
0000000000219225         db  0x00 ; '.'
0000000000219226         db  0x00 ; '.'
0000000000219227         db  0x00 ; '.'
0000000000219228         db  0x00 ; '.'
0000000000219229         db  0x00 ; '.'
000000000021922a         db  0x00 ; '.'
000000000021922b         db  0x00 ; '.'
000000000021922c         db  0x00 ; '.'
000000000021922d         db  0x00 ; '.'
000000000021922e         db  0x00 ; '.'
000000000021922f         db  0x00 ; '.'
0000000000219230         db  0x00 ; '.'
0000000000219231         db  0x00 ; '.'
0000000000219232         db  0x00 ; '.'
0000000000219233         db  0x00 ; '.'
0000000000219234         db  0x00 ; '.'
0000000000219235         db  0x00 ; '.'
0000000000219236         db  0x00 ; '.'
0000000000219237         db  0x00 ; '.'
0000000000219238         db  0x00 ; '.'
0000000000219239         db  0x00 ; '.'
000000000021923a         db  0x00 ; '.'
000000000021923b         db  0x00 ; '.'
000000000021923c         db  0x00 ; '.'
000000000021923d         db  0x00 ; '.'
000000000021923e         db  0x00 ; '.'
000000000021923f         db  0x00 ; '.'
0000000000219240         db  0x00 ; '.'
0000000000219241         db  0x00 ; '.'
0000000000219242         db  0x00 ; '.'
0000000000219243         db  0x00 ; '.'
0000000000219244         db  0x00 ; '.'
0000000000219245         db  0x00 ; '.'
0000000000219246         db  0x00 ; '.'
0000000000219247         db  0x00 ; '.'
0000000000219248         db  0x00 ; '.'
0000000000219249         db  0x00 ; '.'
000000000021924a         db  0x00 ; '.'
000000000021924b         db  0x00 ; '.'
000000000021924c         db  0x00 ; '.'
000000000021924d         db  0x00 ; '.'
000000000021924e         db  0x00 ; '.'
000000000021924f         db  0x00 ; '.'
0000000000219250         db  0x00 ; '.'
0000000000219251         db  0x00 ; '.'
0000000000219252         db  0x00 ; '.'
0000000000219253         db  0x00 ; '.'
0000000000219254         db  0x00 ; '.'
0000000000219255         db  0x00 ; '.'
0000000000219256         db  0x00 ; '.'
0000000000219257         db  0x00 ; '.'
0000000000219258         db  0x00 ; '.'
0000000000219259         db  0x00 ; '.'
000000000021925a         db  0x00 ; '.'
000000000021925b         db  0x00 ; '.'
000000000021925c         db  0x00 ; '.'
000000000021925d         db  0x00 ; '.'
000000000021925e         db  0x00 ; '.'
000000000021925f         db  0x00 ; '.'
0000000000219260         db  0x00 ; '.'
0000000000219261         db  0x00 ; '.'
0000000000219262         db  0x00 ; '.'
0000000000219263         db  0x00 ; '.'
0000000000219264         db  0x00 ; '.'
0000000000219265         db  0x00 ; '.'
0000000000219266         db  0x00 ; '.'
0000000000219267         db  0x00 ; '.'
0000000000219268         db  0x00 ; '.'
0000000000219269         db  0x00 ; '.'
000000000021926a         db  0x00 ; '.'
000000000021926b         db  0x00 ; '.'
000000000021926c         db  0x00 ; '.'
000000000021926d         db  0x00 ; '.'
000000000021926e         db  0x00 ; '.'
000000000021926f         db  0x00 ; '.'
0000000000219270         db  0x00 ; '.'
0000000000219271         db  0x00 ; '.'
0000000000219272         db  0x00 ; '.'
0000000000219273         db  0x00 ; '.'
0000000000219274         db  0x00 ; '.'
0000000000219275         db  0x00 ; '.'
0000000000219276         db  0x00 ; '.'
0000000000219277         db  0x00 ; '.'
0000000000219278         db  0x00 ; '.'
0000000000219279         db  0x00 ; '.'
000000000021927a         db  0x00 ; '.'
000000000021927b         db  0x00 ; '.'
000000000021927c         db  0x00 ; '.'
000000000021927d         db  0x00 ; '.'
000000000021927e         db  0x00 ; '.'
000000000021927f         db  0x00 ; '.'
0000000000219280         db  0x00 ; '.'
0000000000219281         db  0x00 ; '.'
0000000000219282         db  0x00 ; '.'
0000000000219283         db  0x00 ; '.'
0000000000219284         db  0x00 ; '.'
0000000000219285         db  0x00 ; '.'
0000000000219286         db  0x00 ; '.'
0000000000219287         db  0x00 ; '.'
0000000000219288         db  0x00 ; '.'
0000000000219289         db  0x00 ; '.'
000000000021928a         db  0x00 ; '.'
000000000021928b         db  0x00 ; '.'
000000000021928c         db  0x00 ; '.'
000000000021928d         db  0x00 ; '.'
000000000021928e         db  0x00 ; '.'
000000000021928f         db  0x00 ; '.'
0000000000219290         db  0x00 ; '.'
0000000000219291         db  0x00 ; '.'
0000000000219292         db  0x00 ; '.'
0000000000219293         db  0x00 ; '.'
0000000000219294         db  0x00 ; '.'
0000000000219295         db  0x00 ; '.'
0000000000219296         db  0x00 ; '.'
0000000000219297         db  0x00 ; '.'
0000000000219298         db  0x00 ; '.'
0000000000219299         db  0x00 ; '.'
000000000021929a         db  0x00 ; '.'
000000000021929b         db  0x00 ; '.'
000000000021929c         db  0x00 ; '.'
000000000021929d         db  0x00 ; '.'
000000000021929e         db  0x00 ; '.'
000000000021929f         db  0x00 ; '.'
00000000002192a0         db  0x00 ; '.'
00000000002192a1         db  0x00 ; '.'
00000000002192a2         db  0x00 ; '.'
00000000002192a3         db  0x00 ; '.'
00000000002192a4         db  0x00 ; '.'
00000000002192a5         db  0x00 ; '.'
00000000002192a6         db  0x00 ; '.'
00000000002192a7         db  0x00 ; '.'
00000000002192a8         db  0x00 ; '.'
00000000002192a9         db  0x00 ; '.'
00000000002192aa         db  0x00 ; '.'
00000000002192ab         db  0x00 ; '.'
00000000002192ac         db  0x00 ; '.'
00000000002192ad         db  0x00 ; '.'
00000000002192ae         db  0x00 ; '.'
00000000002192af         db  0x00 ; '.'
00000000002192b0         db  0x00 ; '.'
00000000002192b1         db  0x00 ; '.'
00000000002192b2         db  0x00 ; '.'
00000000002192b3         db  0x00 ; '.'
00000000002192b4         db  0x00 ; '.'
00000000002192b5         db  0x00 ; '.'
00000000002192b6         db  0x00 ; '.'
00000000002192b7         db  0x00 ; '.'
00000000002192b8         db  0x00 ; '.'
00000000002192b9         db  0x00 ; '.'
00000000002192ba         db  0x00 ; '.'
00000000002192bb         db  0x00 ; '.'
00000000002192bc         db  0x00 ; '.'
00000000002192bd         db  0x00 ; '.'
00000000002192be         db  0x00 ; '.'
00000000002192bf         db  0x00 ; '.'
00000000002192c0         db  0x00 ; '.'
00000000002192c1         db  0x00 ; '.'
00000000002192c2         db  0x00 ; '.'
00000000002192c3         db  0x00 ; '.'
00000000002192c4         db  0x00 ; '.'
00000000002192c5         db  0x00 ; '.'
00000000002192c6         db  0x00 ; '.'
00000000002192c7         db  0x00 ; '.'
00000000002192c8         db  0x00 ; '.'
00000000002192c9         db  0x00 ; '.'
00000000002192ca         db  0x00 ; '.'
00000000002192cb         db  0x00 ; '.'
00000000002192cc         db  0x00 ; '.'
00000000002192cd         db  0x00 ; '.'
00000000002192ce         db  0x00 ; '.'
00000000002192cf         db  0x00 ; '.'
00000000002192d0         db  0x00 ; '.'
00000000002192d1         db  0x00 ; '.'
00000000002192d2         db  0x00 ; '.'
00000000002192d3         db  0x00 ; '.'
00000000002192d4         db  0x00 ; '.'
00000000002192d5         db  0x00 ; '.'
00000000002192d6         db  0x00 ; '.'
00000000002192d7         db  0x00 ; '.'
00000000002192d8         db  0x00 ; '.'
00000000002192d9         db  0x00 ; '.'
00000000002192da         db  0x00 ; '.'
00000000002192db         db  0x00 ; '.'
00000000002192dc         db  0x00 ; '.'
00000000002192dd         db  0x00 ; '.'
00000000002192de         db  0x00 ; '.'
00000000002192df         db  0x00 ; '.'
00000000002192e0         db  0x00 ; '.'
00000000002192e1         db  0x00 ; '.'
00000000002192e2         db  0x00 ; '.'
00000000002192e3         db  0x00 ; '.'
00000000002192e4         db  0x00 ; '.'
00000000002192e5         db  0x00 ; '.'
00000000002192e6         db  0x00 ; '.'
00000000002192e7         db  0x00 ; '.'
00000000002192e8         db  0x00 ; '.'
00000000002192e9         db  0x00 ; '.'
00000000002192ea         db  0x00 ; '.'
00000000002192eb         db  0x00 ; '.'
00000000002192ec         db  0x00 ; '.'
00000000002192ed         db  0x00 ; '.'
00000000002192ee         db  0x00 ; '.'
00000000002192ef         db  0x00 ; '.'
00000000002192f0         db  0x00 ; '.'
00000000002192f1         db  0x00 ; '.'
00000000002192f2         db  0x00 ; '.'
00000000002192f3         db  0x00 ; '.'
00000000002192f4         db  0x00 ; '.'
00000000002192f5         db  0x00 ; '.'
00000000002192f6         db  0x00 ; '.'
00000000002192f7         db  0x00 ; '.'
00000000002192f8         db  0x00 ; '.'
00000000002192f9         db  0x00 ; '.'
00000000002192fa         db  0x00 ; '.'
00000000002192fb         db  0x00 ; '.'
00000000002192fc         db  0x00 ; '.'
00000000002192fd         db  0x00 ; '.'
00000000002192fe         db  0x00 ; '.'
00000000002192ff         db  0x00 ; '.'
0000000000219300         db  0x00 ; '.'
0000000000219301         db  0x00 ; '.'
0000000000219302         db  0x00 ; '.'
0000000000219303         db  0x00 ; '.'
0000000000219304         db  0x00 ; '.'
0000000000219305         db  0x00 ; '.'
0000000000219306         db  0x00 ; '.'
0000000000219307         db  0x00 ; '.'
0000000000219308         db  0x00 ; '.'
0000000000219309         db  0x00 ; '.'
000000000021930a         db  0x00 ; '.'
000000000021930b         db  0x00 ; '.'
000000000021930c         db  0x00 ; '.'
000000000021930d         db  0x00 ; '.'
000000000021930e         db  0x00 ; '.'
000000000021930f         db  0x00 ; '.'
0000000000219310         db  0x00 ; '.'
0000000000219311         db  0x00 ; '.'
0000000000219312         db  0x00 ; '.'
0000000000219313         db  0x00 ; '.'
0000000000219314         db  0x00 ; '.'
0000000000219315         db  0x00 ; '.'
0000000000219316         db  0x00 ; '.'
0000000000219317         db  0x00 ; '.'
0000000000219318         db  0x00 ; '.'
0000000000219319         db  0x00 ; '.'
000000000021931a         db  0x00 ; '.'
000000000021931b         db  0x00 ; '.'
000000000021931c         db  0x00 ; '.'
000000000021931d         db  0x00 ; '.'
000000000021931e         db  0x00 ; '.'
000000000021931f         db  0x00 ; '.'
0000000000219320         db  0x00 ; '.'
0000000000219321         db  0x00 ; '.'
0000000000219322         db  0x00 ; '.'
0000000000219323         db  0x00 ; '.'
0000000000219324         db  0x00 ; '.'
0000000000219325         db  0x00 ; '.'
0000000000219326         db  0x00 ; '.'
0000000000219327         db  0x00 ; '.'
0000000000219328         db  0x00 ; '.'
0000000000219329         db  0x00 ; '.'
000000000021932a         db  0x00 ; '.'
000000000021932b         db  0x00 ; '.'
000000000021932c         db  0x00 ; '.'
000000000021932d         db  0x00 ; '.'
000000000021932e         db  0x00 ; '.'
000000000021932f         db  0x00 ; '.'
0000000000219330         db  0x00 ; '.'
0000000000219331         db  0x00 ; '.'
0000000000219332         db  0x00 ; '.'
0000000000219333         db  0x00 ; '.'
0000000000219334         db  0x00 ; '.'
0000000000219335         db  0x00 ; '.'
0000000000219336         db  0x00 ; '.'
0000000000219337         db  0x00 ; '.'
0000000000219338         db  0x00 ; '.'
0000000000219339         db  0x00 ; '.'
000000000021933a         db  0x00 ; '.'
000000000021933b         db  0x00 ; '.'
000000000021933c         db  0x00 ; '.'
000000000021933d         db  0x00 ; '.'
000000000021933e         db  0x00 ; '.'
000000000021933f         db  0x00 ; '.'
0000000000219340         db  0x00 ; '.'
0000000000219341         db  0x00 ; '.'
0000000000219342         db  0x00 ; '.'
0000000000219343         db  0x00 ; '.'
0000000000219344         db  0x00 ; '.'
0000000000219345         db  0x00 ; '.'
0000000000219346         db  0x00 ; '.'
0000000000219347         db  0x00 ; '.'
0000000000219348         db  0x00 ; '.'
0000000000219349         db  0x00 ; '.'
000000000021934a         db  0x00 ; '.'
000000000021934b         db  0x00 ; '.'
000000000021934c         db  0x00 ; '.'
000000000021934d         db  0x00 ; '.'
000000000021934e         db  0x00 ; '.'
000000000021934f         db  0x00 ; '.'
0000000000219350         db  0x00 ; '.'
0000000000219351         db  0x00 ; '.'
0000000000219352         db  0x00 ; '.'
0000000000219353         db  0x00 ; '.'
0000000000219354         db  0x00 ; '.'
0000000000219355         db  0x00 ; '.'
0000000000219356         db  0x00 ; '.'
0000000000219357         db  0x00 ; '.'
0000000000219358         db  0x00 ; '.'
0000000000219359         db  0x00 ; '.'
000000000021935a         db  0x00 ; '.'
000000000021935b         db  0x00 ; '.'
000000000021935c         db  0x00 ; '.'
000000000021935d         db  0x00 ; '.'
000000000021935e         db  0x00 ; '.'
000000000021935f         db  0x00 ; '.'
0000000000219360         db  0x00 ; '.'
0000000000219361         db  0x00 ; '.'
0000000000219362         db  0x00 ; '.'
0000000000219363         db  0x00 ; '.'
0000000000219364         db  0x00 ; '.'
0000000000219365         db  0x00 ; '.'
0000000000219366         db  0x00 ; '.'
0000000000219367         db  0x00 ; '.'
0000000000219368         db  0x00 ; '.'
0000000000219369         db  0x00 ; '.'
000000000021936a         db  0x00 ; '.'
000000000021936b         db  0x00 ; '.'
000000000021936c         db  0x00 ; '.'
000000000021936d         db  0x00 ; '.'
000000000021936e         db  0x00 ; '.'
000000000021936f         db  0x00 ; '.'
0000000000219370         db  0x00 ; '.'
0000000000219371         db  0x00 ; '.'
0000000000219372         db  0x00 ; '.'
0000000000219373         db  0x00 ; '.'
0000000000219374         db  0x00 ; '.'
0000000000219375         db  0x00 ; '.'
0000000000219376         db  0x00 ; '.'
0000000000219377         db  0x00 ; '.'
0000000000219378         db  0x00 ; '.'
0000000000219379         db  0x00 ; '.'
000000000021937a         db  0x00 ; '.'
000000000021937b         db  0x00 ; '.'
000000000021937c         db  0x00 ; '.'
000000000021937d         db  0x00 ; '.'
000000000021937e         db  0x00 ; '.'
000000000021937f         db  0x00 ; '.'
0000000000219380         db  0x00 ; '.'
0000000000219381         db  0x00 ; '.'
0000000000219382         db  0x00 ; '.'
0000000000219383         db  0x00 ; '.'
0000000000219384         db  0x00 ; '.'
0000000000219385         db  0x00 ; '.'
0000000000219386         db  0x00 ; '.'
0000000000219387         db  0x00 ; '.'
0000000000219388         db  0x00 ; '.'
0000000000219389         db  0x00 ; '.'
000000000021938a         db  0x00 ; '.'
000000000021938b         db  0x00 ; '.'
000000000021938c         db  0x00 ; '.'
000000000021938d         db  0x00 ; '.'
000000000021938e         db  0x00 ; '.'
000000000021938f         db  0x00 ; '.'
0000000000219390         db  0x00 ; '.'
0000000000219391         db  0x00 ; '.'
0000000000219392         db  0x00 ; '.'
0000000000219393         db  0x00 ; '.'
0000000000219394         db  0x00 ; '.'
0000000000219395         db  0x00 ; '.'
0000000000219396         db  0x00 ; '.'
0000000000219397         db  0x00 ; '.'
0000000000219398         db  0x00 ; '.'
0000000000219399         db  0x00 ; '.'
000000000021939a         db  0x00 ; '.'
000000000021939b         db  0x00 ; '.'
000000000021939c         db  0x00 ; '.'
000000000021939d         db  0x00 ; '.'
000000000021939e         db  0x00 ; '.'
000000000021939f         db  0x00 ; '.'
00000000002193a0         db  0x00 ; '.'
00000000002193a1         db  0x00 ; '.'
00000000002193a2         db  0x00 ; '.'
00000000002193a3         db  0x00 ; '.'
00000000002193a4         db  0x00 ; '.'
00000000002193a5         db  0x00 ; '.'
00000000002193a6         db  0x00 ; '.'
00000000002193a7         db  0x00 ; '.'
00000000002193a8         db  0x00 ; '.'
00000000002193a9         db  0x00 ; '.'
00000000002193aa         db  0x00 ; '.'
00000000002193ab         db  0x00 ; '.'
00000000002193ac         db  0x00 ; '.'
00000000002193ad         db  0x00 ; '.'
00000000002193ae         db  0x00 ; '.'
00000000002193af         db  0x00 ; '.'
00000000002193b0         db  0x00 ; '.'
00000000002193b1         db  0x00 ; '.'
00000000002193b2         db  0x00 ; '.'
00000000002193b3         db  0x00 ; '.'
00000000002193b4         db  0x00 ; '.'
00000000002193b5         db  0x00 ; '.'
00000000002193b6         db  0x00 ; '.'
00000000002193b7         db  0x00 ; '.'
00000000002193b8         db  0x00 ; '.'
00000000002193b9         db  0x00 ; '.'
00000000002193ba         db  0x00 ; '.'
00000000002193bb         db  0x00 ; '.'
00000000002193bc         db  0x00 ; '.'
00000000002193bd         db  0x00 ; '.'
00000000002193be         db  0x00 ; '.'
00000000002193bf         db  0x00 ; '.'
00000000002193c0         db  0x00 ; '.'
00000000002193c1         db  0x00 ; '.'
00000000002193c2         db  0x00 ; '.'
00000000002193c3         db  0x00 ; '.'
00000000002193c4         db  0x00 ; '.'
00000000002193c5         db  0x00 ; '.'
00000000002193c6         db  0x00 ; '.'
00000000002193c7         db  0x00 ; '.'
00000000002193c8         db  0x00 ; '.'
00000000002193c9         db  0x00 ; '.'
00000000002193ca         db  0x00 ; '.'
00000000002193cb         db  0x00 ; '.'
00000000002193cc         db  0x00 ; '.'
00000000002193cd         db  0x00 ; '.'
00000000002193ce         db  0x00 ; '.'
00000000002193cf         db  0x00 ; '.'
00000000002193d0         db  0x00 ; '.'
00000000002193d1         db  0x00 ; '.'
00000000002193d2         db  0x00 ; '.'
00000000002193d3         db  0x00 ; '.'
00000000002193d4         db  0x00 ; '.'
00000000002193d5         db  0x00 ; '.'
00000000002193d6         db  0x00 ; '.'
00000000002193d7         db  0x00 ; '.'
00000000002193d8         db  0x00 ; '.'
00000000002193d9         db  0x00 ; '.'
00000000002193da         db  0x00 ; '.'
00000000002193db         db  0x00 ; '.'
00000000002193dc         db  0x00 ; '.'
00000000002193dd         db  0x00 ; '.'
00000000002193de         db  0x00 ; '.'
00000000002193df         db  0x00 ; '.'
00000000002193e0         db  0x00 ; '.'
00000000002193e1         db  0x00 ; '.'
00000000002193e2         db  0x00 ; '.'
00000000002193e3         db  0x00 ; '.'
00000000002193e4         db  0x00 ; '.'
00000000002193e5         db  0x00 ; '.'
00000000002193e6         db  0x00 ; '.'
00000000002193e7         db  0x00 ; '.'
00000000002193e8         db  0x00 ; '.'
00000000002193e9         db  0x00 ; '.'
00000000002193ea         db  0x00 ; '.'
00000000002193eb         db  0x00 ; '.'
00000000002193ec         db  0x00 ; '.'
00000000002193ed         db  0x00 ; '.'
00000000002193ee         db  0x00 ; '.'
00000000002193ef         db  0x00 ; '.'
00000000002193f0         db  0x00 ; '.'
00000000002193f1         db  0x00 ; '.'
00000000002193f2         db  0x00 ; '.'
00000000002193f3         db  0x00 ; '.'
00000000002193f4         db  0x00 ; '.'
00000000002193f5         db  0x00 ; '.'
00000000002193f6         db  0x00 ; '.'
00000000002193f7         db  0x00 ; '.'
00000000002193f8         db  0x00 ; '.'
00000000002193f9         db  0x00 ; '.'
00000000002193fa         db  0x00 ; '.'
00000000002193fb         db  0x00 ; '.'
00000000002193fc         db  0x00 ; '.'
00000000002193fd         db  0x00 ; '.'
00000000002193fe         db  0x00 ; '.'
00000000002193ff         db  0x00 ; '.'
0000000000219400         db  0x00 ; '.'
0000000000219401         db  0x00 ; '.'
0000000000219402         db  0x00 ; '.'
0000000000219403         db  0x00 ; '.'
0000000000219404         db  0x00 ; '.'
0000000000219405         db  0x00 ; '.'
0000000000219406         db  0x00 ; '.'
0000000000219407         db  0x00 ; '.'
0000000000219408         db  0x00 ; '.'
0000000000219409         db  0x00 ; '.'
000000000021940a         db  0x00 ; '.'
000000000021940b         db  0x00 ; '.'
000000000021940c         db  0x00 ; '.'
000000000021940d         db  0x00 ; '.'
000000000021940e         db  0x00 ; '.'
000000000021940f         db  0x00 ; '.'
0000000000219410         db  0x00 ; '.'
0000000000219411         db  0x00 ; '.'
0000000000219412         db  0x00 ; '.'
0000000000219413         db  0x00 ; '.'
0000000000219414         db  0x00 ; '.'
0000000000219415         db  0x00 ; '.'
0000000000219416         db  0x00 ; '.'
0000000000219417         db  0x00 ; '.'
0000000000219418         db  0x00 ; '.'
0000000000219419         db  0x00 ; '.'
000000000021941a         db  0x00 ; '.'
000000000021941b         db  0x00 ; '.'
000000000021941c         db  0x00 ; '.'
000000000021941d         db  0x00 ; '.'
000000000021941e         db  0x00 ; '.'
000000000021941f         db  0x00 ; '.'
0000000000219420         db  0x00 ; '.'
0000000000219421         db  0x00 ; '.'
0000000000219422         db  0x00 ; '.'
0000000000219423         db  0x00 ; '.'
0000000000219424         db  0x00 ; '.'
0000000000219425         db  0x00 ; '.'
0000000000219426         db  0x00 ; '.'
0000000000219427         db  0x00 ; '.'
0000000000219428         db  0x00 ; '.'
0000000000219429         db  0x00 ; '.'
000000000021942a         db  0x00 ; '.'
000000000021942b         db  0x00 ; '.'
000000000021942c         db  0x00 ; '.'
000000000021942d         db  0x00 ; '.'
000000000021942e         db  0x00 ; '.'
000000000021942f         db  0x00 ; '.'
0000000000219430         db  0x00 ; '.'
0000000000219431         db  0x00 ; '.'
0000000000219432         db  0x00 ; '.'
0000000000219433         db  0x00 ; '.'
0000000000219434         db  0x00 ; '.'
0000000000219435         db  0x00 ; '.'
0000000000219436         db  0x00 ; '.'
0000000000219437         db  0x00 ; '.'
0000000000219438         db  0x00 ; '.'
0000000000219439         db  0x00 ; '.'
000000000021943a         db  0x00 ; '.'
000000000021943b         db  0x00 ; '.'
000000000021943c         db  0x00 ; '.'
000000000021943d         db  0x00 ; '.'
000000000021943e         db  0x00 ; '.'
000000000021943f         db  0x00 ; '.'
0000000000219440         db  0x00 ; '.'
0000000000219441         db  0x00 ; '.'
0000000000219442         db  0x00 ; '.'
0000000000219443         db  0x00 ; '.'
0000000000219444         db  0x00 ; '.'
0000000000219445         db  0x00 ; '.'
0000000000219446         db  0x00 ; '.'
0000000000219447         db  0x00 ; '.'
0000000000219448         db  0x00 ; '.'
0000000000219449         db  0x00 ; '.'
000000000021944a         db  0x00 ; '.'
000000000021944b         db  0x00 ; '.'
000000000021944c         db  0x00 ; '.'
000000000021944d         db  0x00 ; '.'
000000000021944e         db  0x00 ; '.'
000000000021944f         db  0x00 ; '.'
0000000000219450         db  0x00 ; '.'
0000000000219451         db  0x00 ; '.'
0000000000219452         db  0x00 ; '.'
0000000000219453         db  0x00 ; '.'
0000000000219454         db  0x00 ; '.'
0000000000219455         db  0x00 ; '.'
0000000000219456         db  0x00 ; '.'
0000000000219457         db  0x00 ; '.'
0000000000219458         db  0x00 ; '.'
0000000000219459         db  0x00 ; '.'
000000000021945a         db  0x00 ; '.'
000000000021945b         db  0x00 ; '.'
000000000021945c         db  0x00 ; '.'
000000000021945d         db  0x00 ; '.'
000000000021945e         db  0x00 ; '.'
000000000021945f         db  0x00 ; '.'
0000000000219460         db  0x00 ; '.'
0000000000219461         db  0x00 ; '.'
0000000000219462         db  0x00 ; '.'
0000000000219463         db  0x00 ; '.'
0000000000219464         db  0x00 ; '.'
0000000000219465         db  0x00 ; '.'
0000000000219466         db  0x00 ; '.'
0000000000219467         db  0x00 ; '.'
0000000000219468         db  0x00 ; '.'
0000000000219469         db  0x00 ; '.'
000000000021946a         db  0x00 ; '.'
000000000021946b         db  0x00 ; '.'
000000000021946c         db  0x00 ; '.'
000000000021946d         db  0x00 ; '.'
000000000021946e         db  0x00 ; '.'
000000000021946f         db  0x00 ; '.'
0000000000219470         db  0x00 ; '.'
0000000000219471         db  0x00 ; '.'
0000000000219472         db  0x00 ; '.'
0000000000219473         db  0x00 ; '.'
0000000000219474         db  0x00 ; '.'
0000000000219475         db  0x00 ; '.'
0000000000219476         db  0x00 ; '.'
0000000000219477         db  0x00 ; '.'
0000000000219478         db  0x00 ; '.'
0000000000219479         db  0x00 ; '.'
000000000021947a         db  0x00 ; '.'
000000000021947b         db  0x00 ; '.'
000000000021947c         db  0x00 ; '.'
000000000021947d         db  0x00 ; '.'
000000000021947e         db  0x00 ; '.'
000000000021947f         db  0x00 ; '.'
0000000000219480         db  0x00 ; '.'
0000000000219481         db  0x00 ; '.'
0000000000219482         db  0x00 ; '.'
0000000000219483         db  0x00 ; '.'
0000000000219484         db  0x00 ; '.'
0000000000219485         db  0x00 ; '.'
0000000000219486         db  0x00 ; '.'
0000000000219487         db  0x00 ; '.'
0000000000219488         db  0x00 ; '.'
0000000000219489         db  0x00 ; '.'
000000000021948a         db  0x00 ; '.'
000000000021948b         db  0x00 ; '.'
000000000021948c         db  0x00 ; '.'
000000000021948d         db  0x00 ; '.'
000000000021948e         db  0x00 ; '.'
000000000021948f         db  0x00 ; '.'
0000000000219490         db  0x00 ; '.'
0000000000219491         db  0x00 ; '.'
0000000000219492         db  0x00 ; '.'
0000000000219493         db  0x00 ; '.'
0000000000219494         db  0x00 ; '.'
0000000000219495         db  0x00 ; '.'
0000000000219496         db  0x00 ; '.'
0000000000219497         db  0x00 ; '.'
0000000000219498         db  0x00 ; '.'
0000000000219499         db  0x00 ; '.'
000000000021949a         db  0x00 ; '.'
000000000021949b         db  0x00 ; '.'
000000000021949c         db  0x00 ; '.'
000000000021949d         db  0x00 ; '.'
000000000021949e         db  0x00 ; '.'
000000000021949f         db  0x00 ; '.'
00000000002194a0         db  0x00 ; '.'
00000000002194a1         db  0x00 ; '.'
00000000002194a2         db  0x00 ; '.'
00000000002194a3         db  0x00 ; '.'
00000000002194a4         db  0x00 ; '.'
00000000002194a5         db  0x00 ; '.'
00000000002194a6         db  0x00 ; '.'
00000000002194a7         db  0x00 ; '.'
00000000002194a8         db  0x00 ; '.'
00000000002194a9         db  0x00 ; '.'
00000000002194aa         db  0x00 ; '.'
00000000002194ab         db  0x00 ; '.'
00000000002194ac         db  0x00 ; '.'
00000000002194ad         db  0x00 ; '.'
00000000002194ae         db  0x00 ; '.'
00000000002194af         db  0x00 ; '.'
00000000002194b0         db  0x00 ; '.'
00000000002194b1         db  0x00 ; '.'
00000000002194b2         db  0x00 ; '.'
00000000002194b3         db  0x00 ; '.'
00000000002194b4         db  0x00 ; '.'
00000000002194b5         db  0x00 ; '.'
00000000002194b6         db  0x00 ; '.'
00000000002194b7         db  0x00 ; '.'
00000000002194b8         db  0x00 ; '.'
00000000002194b9         db  0x00 ; '.'
00000000002194ba         db  0x00 ; '.'
00000000002194bb         db  0x00 ; '.'
00000000002194bc         db  0x00 ; '.'
00000000002194bd         db  0x00 ; '.'
00000000002194be         db  0x00 ; '.'
00000000002194bf         db  0x00 ; '.'
00000000002194c0         db  0x00 ; '.'
00000000002194c1         db  0x00 ; '.'
00000000002194c2         db  0x00 ; '.'
00000000002194c3         db  0x00 ; '.'
00000000002194c4         db  0x00 ; '.'
00000000002194c5         db  0x00 ; '.'
00000000002194c6         db  0x00 ; '.'
00000000002194c7         db  0x00 ; '.'
00000000002194c8         db  0x00 ; '.'
00000000002194c9         db  0x00 ; '.'
00000000002194ca         db  0x00 ; '.'
00000000002194cb         db  0x00 ; '.'
00000000002194cc         db  0x00 ; '.'
00000000002194cd         db  0x00 ; '.'
00000000002194ce         db  0x00 ; '.'
00000000002194cf         db  0x00 ; '.'
00000000002194d0         db  0x00 ; '.'
00000000002194d1         db  0x00 ; '.'
00000000002194d2         db  0x00 ; '.'
00000000002194d3         db  0x00 ; '.'
00000000002194d4         db  0x00 ; '.'
00000000002194d5         db  0x00 ; '.'
00000000002194d6         db  0x00 ; '.'
00000000002194d7         db  0x00 ; '.'
00000000002194d8         db  0x00 ; '.'
00000000002194d9         db  0x00 ; '.'
00000000002194da         db  0x00 ; '.'
00000000002194db         db  0x00 ; '.'
00000000002194dc         db  0x00 ; '.'
00000000002194dd         db  0x00 ; '.'
00000000002194de         db  0x00 ; '.'
00000000002194df         db  0x00 ; '.'
00000000002194e0         db  0x00 ; '.'
00000000002194e1         db  0x00 ; '.'
00000000002194e2         db  0x00 ; '.'
00000000002194e3         db  0x00 ; '.'
00000000002194e4         db  0x00 ; '.'
00000000002194e5         db  0x00 ; '.'
00000000002194e6         db  0x00 ; '.'
00000000002194e7         db  0x00 ; '.'
00000000002194e8         db  0x00 ; '.'
00000000002194e9         db  0x00 ; '.'
00000000002194ea         db  0x00 ; '.'
00000000002194eb         db  0x00 ; '.'
00000000002194ec         db  0x00 ; '.'
00000000002194ed         db  0x00 ; '.'
00000000002194ee         db  0x00 ; '.'
00000000002194ef         db  0x00 ; '.'
00000000002194f0         db  0x00 ; '.'
00000000002194f1         db  0x00 ; '.'
00000000002194f2         db  0x00 ; '.'
00000000002194f3         db  0x00 ; '.'
00000000002194f4         db  0x00 ; '.'
00000000002194f5         db  0x00 ; '.'
00000000002194f6         db  0x00 ; '.'
00000000002194f7         db  0x00 ; '.'
00000000002194f8         db  0x00 ; '.'
00000000002194f9         db  0x00 ; '.'
00000000002194fa         db  0x00 ; '.'
00000000002194fb         db  0x00 ; '.'
00000000002194fc         db  0x00 ; '.'
00000000002194fd         db  0x00 ; '.'
00000000002194fe         db  0x00 ; '.'
00000000002194ff         db  0x00 ; '.'
0000000000219500         db  0x00 ; '.'
0000000000219501         db  0x00 ; '.'
0000000000219502         db  0x00 ; '.'
0000000000219503         db  0x00 ; '.'
0000000000219504         db  0x00 ; '.'
0000000000219505         db  0x00 ; '.'
0000000000219506         db  0x00 ; '.'
0000000000219507         db  0x00 ; '.'
0000000000219508         db  0x00 ; '.'
0000000000219509         db  0x00 ; '.'
000000000021950a         db  0x00 ; '.'
000000000021950b         db  0x00 ; '.'
000000000021950c         db  0x00 ; '.'
000000000021950d         db  0x00 ; '.'
000000000021950e         db  0x00 ; '.'
000000000021950f         db  0x00 ; '.'
0000000000219510         db  0x00 ; '.'
0000000000219511         db  0x00 ; '.'
0000000000219512         db  0x00 ; '.'
0000000000219513         db  0x00 ; '.'
0000000000219514         db  0x00 ; '.'
0000000000219515         db  0x00 ; '.'
0000000000219516         db  0x00 ; '.'
0000000000219517         db  0x00 ; '.'
0000000000219518         db  0x00 ; '.'
0000000000219519         db  0x00 ; '.'
000000000021951a         db  0x00 ; '.'
000000000021951b         db  0x00 ; '.'
000000000021951c         db  0x00 ; '.'
000000000021951d         db  0x00 ; '.'
000000000021951e         db  0x00 ; '.'
000000000021951f         db  0x00 ; '.'
0000000000219520         db  0x00 ; '.'
0000000000219521         db  0x00 ; '.'
0000000000219522         db  0x00 ; '.'
0000000000219523         db  0x00 ; '.'
0000000000219524         db  0x00 ; '.'
0000000000219525         db  0x00 ; '.'
0000000000219526         db  0x00 ; '.'
0000000000219527         db  0x00 ; '.'
0000000000219528         db  0x00 ; '.'
0000000000219529         db  0x00 ; '.'
000000000021952a         db  0x00 ; '.'
000000000021952b         db  0x00 ; '.'
000000000021952c         db  0x00 ; '.'
000000000021952d         db  0x00 ; '.'
000000000021952e         db  0x00 ; '.'
000000000021952f         db  0x00 ; '.'
0000000000219530         db  0x00 ; '.'
0000000000219531         db  0x00 ; '.'
0000000000219532         db  0x00 ; '.'
0000000000219533         db  0x00 ; '.'
0000000000219534         db  0x00 ; '.'
0000000000219535         db  0x00 ; '.'
0000000000219536         db  0x00 ; '.'
0000000000219537         db  0x00 ; '.'
0000000000219538         db  0x00 ; '.'
0000000000219539         db  0x00 ; '.'
000000000021953a         db  0x00 ; '.'
000000000021953b         db  0x00 ; '.'
000000000021953c         db  0x00 ; '.'
000000000021953d         db  0x00 ; '.'
000000000021953e         db  0x00 ; '.'
000000000021953f         db  0x00 ; '.'
0000000000219540         db  0x00 ; '.'
0000000000219541         db  0x00 ; '.'
0000000000219542         db  0x00 ; '.'
0000000000219543         db  0x00 ; '.'
0000000000219544         db  0x00 ; '.'
0000000000219545         db  0x00 ; '.'
0000000000219546         db  0x00 ; '.'
0000000000219547         db  0x00 ; '.'
0000000000219548         db  0x00 ; '.'
0000000000219549         db  0x00 ; '.'
000000000021954a         db  0x00 ; '.'
000000000021954b         db  0x00 ; '.'
000000000021954c         db  0x00 ; '.'
000000000021954d         db  0x00 ; '.'
000000000021954e         db  0x00 ; '.'
000000000021954f         db  0x00 ; '.'
0000000000219550         db  0x00 ; '.'
0000000000219551         db  0x00 ; '.'
0000000000219552         db  0x00 ; '.'
0000000000219553         db  0x00 ; '.'
0000000000219554         db  0x00 ; '.'
0000000000219555         db  0x00 ; '.'
0000000000219556         db  0x00 ; '.'
0000000000219557         db  0x00 ; '.'
0000000000219558         db  0x00 ; '.'
0000000000219559         db  0x00 ; '.'
000000000021955a         db  0x00 ; '.'
000000000021955b         db  0x00 ; '.'
000000000021955c         db  0x00 ; '.'
000000000021955d         db  0x00 ; '.'
000000000021955e         db  0x00 ; '.'
000000000021955f         db  0x00 ; '.'
0000000000219560         db  0x00 ; '.'
0000000000219561         db  0x00 ; '.'
0000000000219562         db  0x00 ; '.'
0000000000219563         db  0x00 ; '.'
0000000000219564         db  0x00 ; '.'
0000000000219565         db  0x00 ; '.'
0000000000219566         db  0x00 ; '.'
0000000000219567         db  0x00 ; '.'
0000000000219568         db  0x00 ; '.'
0000000000219569         db  0x00 ; '.'
000000000021956a         db  0x00 ; '.'
000000000021956b         db  0x00 ; '.'
000000000021956c         db  0x00 ; '.'
000000000021956d         db  0x00 ; '.'
000000000021956e         db  0x00 ; '.'
000000000021956f         db  0x00 ; '.'
0000000000219570         db  0x00 ; '.'
0000000000219571         db  0x00 ; '.'
0000000000219572         db  0x00 ; '.'
0000000000219573         db  0x00 ; '.'
0000000000219574         db  0x00 ; '.'
0000000000219575         db  0x00 ; '.'
0000000000219576         db  0x00 ; '.'
0000000000219577         db  0x00 ; '.'
0000000000219578         db  0x00 ; '.'
0000000000219579         db  0x00 ; '.'
000000000021957a         db  0x00 ; '.'
000000000021957b         db  0x00 ; '.'
000000000021957c         db  0x00 ; '.'
000000000021957d         db  0x00 ; '.'
000000000021957e         db  0x00 ; '.'
000000000021957f         db  0x00 ; '.'
0000000000219580         db  0x00 ; '.'
0000000000219581         db  0x00 ; '.'
0000000000219582         db  0x00 ; '.'
0000000000219583         db  0x00 ; '.'
0000000000219584         db  0x00 ; '.'
0000000000219585         db  0x00 ; '.'
0000000000219586         db  0x00 ; '.'
0000000000219587         db  0x00 ; '.'
0000000000219588         db  0x00 ; '.'
0000000000219589         db  0x00 ; '.'
000000000021958a         db  0x00 ; '.'
000000000021958b         db  0x00 ; '.'
000000000021958c         db  0x00 ; '.'
000000000021958d         db  0x00 ; '.'
000000000021958e         db  0x00 ; '.'
000000000021958f         db  0x00 ; '.'
0000000000219590         db  0x00 ; '.'
0000000000219591         db  0x00 ; '.'
0000000000219592         db  0x00 ; '.'
0000000000219593         db  0x00 ; '.'
0000000000219594         db  0x00 ; '.'
0000000000219595         db  0x00 ; '.'
0000000000219596         db  0x00 ; '.'
0000000000219597         db  0x00 ; '.'
0000000000219598         db  0x00 ; '.'
0000000000219599         db  0x00 ; '.'
000000000021959a         db  0x00 ; '.'
000000000021959b         db  0x00 ; '.'
000000000021959c         db  0x00 ; '.'
000000000021959d         db  0x00 ; '.'
000000000021959e         db  0x00 ; '.'
000000000021959f         db  0x00 ; '.'
00000000002195a0         db  0x00 ; '.'
00000000002195a1         db  0x00 ; '.'
00000000002195a2         db  0x00 ; '.'
00000000002195a3         db  0x00 ; '.'
00000000002195a4         db  0x00 ; '.'
00000000002195a5         db  0x00 ; '.'
00000000002195a6         db  0x00 ; '.'
00000000002195a7         db  0x00 ; '.'
00000000002195a8         db  0x00 ; '.'
00000000002195a9         db  0x00 ; '.'
00000000002195aa         db  0x00 ; '.'
00000000002195ab         db  0x00 ; '.'
00000000002195ac         db  0x00 ; '.'
00000000002195ad         db  0x00 ; '.'
00000000002195ae         db  0x00 ; '.'
00000000002195af         db  0x00 ; '.'
00000000002195b0         db  0x00 ; '.'
00000000002195b1         db  0x00 ; '.'
00000000002195b2         db  0x00 ; '.'
00000000002195b3         db  0x00 ; '.'
00000000002195b4         db  0x00 ; '.'
00000000002195b5         db  0x00 ; '.'
00000000002195b6         db  0x00 ; '.'
00000000002195b7         db  0x00 ; '.'
00000000002195b8         db  0x00 ; '.'
00000000002195b9         db  0x00 ; '.'
00000000002195ba         db  0x00 ; '.'
00000000002195bb         db  0x00 ; '.'
00000000002195bc         db  0x00 ; '.'
00000000002195bd         db  0x00 ; '.'
00000000002195be         db  0x00 ; '.'
00000000002195bf         db  0x00 ; '.'
00000000002195c0         db  0x00 ; '.'
00000000002195c1         db  0x00 ; '.'
00000000002195c2         db  0x00 ; '.'
00000000002195c3         db  0x00 ; '.'
00000000002195c4         db  0x00 ; '.'
00000000002195c5         db  0x00 ; '.'
00000000002195c6         db  0x00 ; '.'
00000000002195c7         db  0x00 ; '.'
00000000002195c8         db  0x00 ; '.'
00000000002195c9         db  0x00 ; '.'
00000000002195ca         db  0x00 ; '.'
00000000002195cb         db  0x00 ; '.'
00000000002195cc         db  0x00 ; '.'
00000000002195cd         db  0x00 ; '.'
00000000002195ce         db  0x00 ; '.'
00000000002195cf         db  0x00 ; '.'
00000000002195d0         db  0x00 ; '.'
00000000002195d1         db  0x00 ; '.'
00000000002195d2         db  0x00 ; '.'
00000000002195d3         db  0x00 ; '.'
00000000002195d4         db  0x00 ; '.'
00000000002195d5         db  0x00 ; '.'
00000000002195d6         db  0x00 ; '.'
00000000002195d7         db  0x00 ; '.'
00000000002195d8         db  0x00 ; '.'
00000000002195d9         db  0x00 ; '.'
00000000002195da         db  0x00 ; '.'
00000000002195db         db  0x00 ; '.'
00000000002195dc         db  0x00 ; '.'
00000000002195dd         db  0x00 ; '.'
00000000002195de         db  0x00 ; '.'
00000000002195df         db  0x00 ; '.'
00000000002195e0         db  0x00 ; '.'
00000000002195e1         db  0x00 ; '.'
00000000002195e2         db  0x00 ; '.'
00000000002195e3         db  0x00 ; '.'
00000000002195e4         db  0x00 ; '.'
00000000002195e5         db  0x00 ; '.'
00000000002195e6         db  0x00 ; '.'
00000000002195e7         db  0x00 ; '.'
00000000002195e8         db  0x00 ; '.'
00000000002195e9         db  0x00 ; '.'
00000000002195ea         db  0x00 ; '.'
00000000002195eb         db  0x00 ; '.'
00000000002195ec         db  0x00 ; '.'
00000000002195ed         db  0x00 ; '.'
00000000002195ee         db  0x00 ; '.'
00000000002195ef         db  0x00 ; '.'
00000000002195f0         db  0x00 ; '.'
00000000002195f1         db  0x00 ; '.'
00000000002195f2         db  0x00 ; '.'
00000000002195f3         db  0x00 ; '.'
00000000002195f4         db  0x00 ; '.'
00000000002195f5         db  0x00 ; '.'
00000000002195f6         db  0x00 ; '.'
00000000002195f7         db  0x00 ; '.'
00000000002195f8         db  0x00 ; '.'
00000000002195f9         db  0x00 ; '.'
00000000002195fa         db  0x00 ; '.'
00000000002195fb         db  0x00 ; '.'
00000000002195fc         db  0x00 ; '.'
00000000002195fd         db  0x00 ; '.'
00000000002195fe         db  0x00 ; '.'
00000000002195ff         db  0x00 ; '.'
0000000000219600         db  0x00 ; '.'
0000000000219601         db  0x00 ; '.'
0000000000219602         db  0x00 ; '.'
0000000000219603         db  0x00 ; '.'
0000000000219604         db  0x00 ; '.'
0000000000219605         db  0x00 ; '.'
0000000000219606         db  0x00 ; '.'
0000000000219607         db  0x00 ; '.'
0000000000219608         db  0x00 ; '.'
0000000000219609         db  0x00 ; '.'
000000000021960a         db  0x00 ; '.'
000000000021960b         db  0x00 ; '.'
000000000021960c         db  0x00 ; '.'
000000000021960d         db  0x00 ; '.'
000000000021960e         db  0x00 ; '.'
000000000021960f         db  0x00 ; '.'
0000000000219610         db  0x00 ; '.'
0000000000219611         db  0x00 ; '.'
0000000000219612         db  0x00 ; '.'
0000000000219613         db  0x00 ; '.'
0000000000219614         db  0x00 ; '.'
0000000000219615         db  0x00 ; '.'
0000000000219616         db  0x00 ; '.'
0000000000219617         db  0x00 ; '.'
0000000000219618         db  0x00 ; '.'
0000000000219619         db  0x00 ; '.'
000000000021961a         db  0x00 ; '.'
000000000021961b         db  0x00 ; '.'
000000000021961c         db  0x00 ; '.'
000000000021961d         db  0x00 ; '.'
000000000021961e         db  0x00 ; '.'
000000000021961f         db  0x00 ; '.'
0000000000219620         db  0x00 ; '.'
0000000000219621         db  0x00 ; '.'
0000000000219622         db  0x00 ; '.'
0000000000219623         db  0x00 ; '.'
0000000000219624         db  0x00 ; '.'
0000000000219625         db  0x00 ; '.'
0000000000219626         db  0x00 ; '.'
0000000000219627         db  0x00 ; '.'
0000000000219628         db  0x00 ; '.'
0000000000219629         db  0x00 ; '.'
000000000021962a         db  0x00 ; '.'
000000000021962b         db  0x00 ; '.'
000000000021962c         db  0x00 ; '.'
000000000021962d         db  0x00 ; '.'
000000000021962e         db  0x00 ; '.'
000000000021962f         db  0x00 ; '.'
0000000000219630         db  0x00 ; '.'
0000000000219631         db  0x00 ; '.'
0000000000219632         db  0x00 ; '.'
0000000000219633         db  0x00 ; '.'
0000000000219634         db  0x00 ; '.'
0000000000219635         db  0x00 ; '.'
0000000000219636         db  0x00 ; '.'
0000000000219637         db  0x00 ; '.'
0000000000219638         db  0x00 ; '.'
0000000000219639         db  0x00 ; '.'
000000000021963a         db  0x00 ; '.'
000000000021963b         db  0x00 ; '.'
000000000021963c         db  0x00 ; '.'
000000000021963d         db  0x00 ; '.'
000000000021963e         db  0x00 ; '.'
000000000021963f         db  0x00 ; '.'
0000000000219640         db  0x00 ; '.'
0000000000219641         db  0x00 ; '.'
0000000000219642         db  0x00 ; '.'
0000000000219643         db  0x00 ; '.'
0000000000219644         db  0x00 ; '.'
0000000000219645         db  0x00 ; '.'
0000000000219646         db  0x00 ; '.'
0000000000219647         db  0x00 ; '.'
0000000000219648         db  0x00 ; '.'
0000000000219649         db  0x00 ; '.'
000000000021964a         db  0x00 ; '.'
000000000021964b         db  0x00 ; '.'
000000000021964c         db  0x00 ; '.'
000000000021964d         db  0x00 ; '.'
000000000021964e         db  0x00 ; '.'
000000000021964f         db  0x00 ; '.'
0000000000219650         db  0x00 ; '.'
0000000000219651         db  0x00 ; '.'
0000000000219652         db  0x00 ; '.'
0000000000219653         db  0x00 ; '.'
0000000000219654         db  0x00 ; '.'
0000000000219655         db  0x00 ; '.'
0000000000219656         db  0x00 ; '.'
0000000000219657         db  0x00 ; '.'
0000000000219658         db  0x00 ; '.'
0000000000219659         db  0x00 ; '.'
000000000021965a         db  0x00 ; '.'
000000000021965b         db  0x00 ; '.'
000000000021965c         db  0x00 ; '.'
000000000021965d         db  0x00 ; '.'
000000000021965e         db  0x00 ; '.'
000000000021965f         db  0x00 ; '.'
0000000000219660         db  0x00 ; '.'
0000000000219661         db  0x00 ; '.'
0000000000219662         db  0x00 ; '.'
0000000000219663         db  0x00 ; '.'
0000000000219664         db  0x00 ; '.'
0000000000219665         db  0x00 ; '.'
0000000000219666         db  0x00 ; '.'
0000000000219667         db  0x00 ; '.'
0000000000219668         db  0x00 ; '.'
0000000000219669         db  0x00 ; '.'
000000000021966a         db  0x00 ; '.'
000000000021966b         db  0x00 ; '.'
000000000021966c         db  0x00 ; '.'
000000000021966d         db  0x00 ; '.'
000000000021966e         db  0x00 ; '.'
000000000021966f         db  0x00 ; '.'
0000000000219670         db  0x00 ; '.'
0000000000219671         db  0x00 ; '.'
0000000000219672         db  0x00 ; '.'
0000000000219673         db  0x00 ; '.'
0000000000219674         db  0x00 ; '.'
0000000000219675         db  0x00 ; '.'
0000000000219676         db  0x00 ; '.'
0000000000219677         db  0x00 ; '.'
0000000000219678         db  0x00 ; '.'
0000000000219679         db  0x00 ; '.'
000000000021967a         db  0x00 ; '.'
000000000021967b         db  0x00 ; '.'
000000000021967c         db  0x00 ; '.'
000000000021967d         db  0x00 ; '.'
000000000021967e         db  0x00 ; '.'
000000000021967f         db  0x00 ; '.'
0000000000219680         db  0x00 ; '.'
0000000000219681         db  0x00 ; '.'
0000000000219682         db  0x00 ; '.'
0000000000219683         db  0x00 ; '.'
0000000000219684         db  0x00 ; '.'
0000000000219685         db  0x00 ; '.'
0000000000219686         db  0x00 ; '.'
0000000000219687         db  0x00 ; '.'
0000000000219688         db  0x00 ; '.'
0000000000219689         db  0x00 ; '.'
000000000021968a         db  0x00 ; '.'
000000000021968b         db  0x00 ; '.'
000000000021968c         db  0x00 ; '.'
000000000021968d         db  0x00 ; '.'
000000000021968e         db  0x00 ; '.'
000000000021968f         db  0x00 ; '.'
0000000000219690         db  0x00 ; '.'
0000000000219691         db  0x00 ; '.'
0000000000219692         db  0x00 ; '.'
0000000000219693         db  0x00 ; '.'
0000000000219694         db  0x00 ; '.'
0000000000219695         db  0x00 ; '.'
0000000000219696         db  0x00 ; '.'
0000000000219697         db  0x00 ; '.'
0000000000219698         db  0x00 ; '.'
0000000000219699         db  0x00 ; '.'
000000000021969a         db  0x00 ; '.'
000000000021969b         db  0x00 ; '.'
000000000021969c         db  0x00 ; '.'
000000000021969d         db  0x00 ; '.'
000000000021969e         db  0x00 ; '.'
000000000021969f         db  0x00 ; '.'
00000000002196a0         db  0x00 ; '.'
00000000002196a1         db  0x00 ; '.'
00000000002196a2         db  0x00 ; '.'
00000000002196a3         db  0x00 ; '.'
00000000002196a4         db  0x00 ; '.'
00000000002196a5         db  0x00 ; '.'
00000000002196a6         db  0x00 ; '.'
00000000002196a7         db  0x00 ; '.'
00000000002196a8         db  0x00 ; '.'
00000000002196a9         db  0x00 ; '.'
00000000002196aa         db  0x00 ; '.'
00000000002196ab         db  0x00 ; '.'
00000000002196ac         db  0x00 ; '.'
00000000002196ad         db  0x00 ; '.'
00000000002196ae         db  0x00 ; '.'
00000000002196af         db  0x00 ; '.'
00000000002196b0         db  0x00 ; '.'
00000000002196b1         db  0x00 ; '.'
00000000002196b2         db  0x00 ; '.'
00000000002196b3         db  0x00 ; '.'
00000000002196b4         db  0x00 ; '.'
00000000002196b5         db  0x00 ; '.'
00000000002196b6         db  0x00 ; '.'
00000000002196b7         db  0x00 ; '.'
00000000002196b8         db  0x00 ; '.'
00000000002196b9         db  0x00 ; '.'
00000000002196ba         db  0x00 ; '.'
00000000002196bb         db  0x00 ; '.'
00000000002196bc         db  0x00 ; '.'
00000000002196bd         db  0x00 ; '.'
00000000002196be         db  0x00 ; '.'
00000000002196bf         db  0x00 ; '.'
00000000002196c0         db  0x00 ; '.'
00000000002196c1         db  0x00 ; '.'
00000000002196c2         db  0x00 ; '.'
00000000002196c3         db  0x00 ; '.'
00000000002196c4         db  0x00 ; '.'
00000000002196c5         db  0x00 ; '.'
00000000002196c6         db  0x00 ; '.'
00000000002196c7         db  0x00 ; '.'
00000000002196c8         db  0x00 ; '.'
00000000002196c9         db  0x00 ; '.'
00000000002196ca         db  0x00 ; '.'
00000000002196cb         db  0x00 ; '.'
00000000002196cc         db  0x00 ; '.'
00000000002196cd         db  0x00 ; '.'
00000000002196ce         db  0x00 ; '.'
00000000002196cf         db  0x00 ; '.'
00000000002196d0         db  0x00 ; '.'
00000000002196d1         db  0x00 ; '.'
00000000002196d2         db  0x00 ; '.'
00000000002196d3         db  0x00 ; '.'
00000000002196d4         db  0x00 ; '.'
00000000002196d5         db  0x00 ; '.'
00000000002196d6         db  0x00 ; '.'
00000000002196d7         db  0x00 ; '.'
00000000002196d8         db  0x00 ; '.'
00000000002196d9         db  0x00 ; '.'
00000000002196da         db  0x00 ; '.'
00000000002196db         db  0x00 ; '.'
00000000002196dc         db  0x00 ; '.'
00000000002196dd         db  0x00 ; '.'
00000000002196de         db  0x00 ; '.'
00000000002196df         db  0x00 ; '.'
00000000002196e0         db  0x00 ; '.'
00000000002196e1         db  0x00 ; '.'
00000000002196e2         db  0x00 ; '.'
00000000002196e3         db  0x00 ; '.'
00000000002196e4         db  0x00 ; '.'
00000000002196e5         db  0x00 ; '.'
00000000002196e6         db  0x00 ; '.'
00000000002196e7         db  0x00 ; '.'
00000000002196e8         db  0x00 ; '.'
00000000002196e9         db  0x00 ; '.'
00000000002196ea         db  0x00 ; '.'
00000000002196eb         db  0x00 ; '.'
00000000002196ec         db  0x00 ; '.'
00000000002196ed         db  0x00 ; '.'
00000000002196ee         db  0x00 ; '.'
00000000002196ef         db  0x00 ; '.'
00000000002196f0         db  0x00 ; '.'
00000000002196f1         db  0x00 ; '.'
00000000002196f2         db  0x00 ; '.'
00000000002196f3         db  0x00 ; '.'
00000000002196f4         db  0x00 ; '.'
00000000002196f5         db  0x00 ; '.'
00000000002196f6         db  0x00 ; '.'
00000000002196f7         db  0x00 ; '.'
00000000002196f8         db  0x00 ; '.'
00000000002196f9         db  0x00 ; '.'
00000000002196fa         db  0x00 ; '.'
00000000002196fb         db  0x00 ; '.'
00000000002196fc         db  0x00 ; '.'
00000000002196fd         db  0x00 ; '.'
00000000002196fe         db  0x00 ; '.'
00000000002196ff         db  0x00 ; '.'
0000000000219700         db  0x00 ; '.'
0000000000219701         db  0x00 ; '.'
0000000000219702         db  0x00 ; '.'
0000000000219703         db  0x00 ; '.'
0000000000219704         db  0x00 ; '.'
0000000000219705         db  0x00 ; '.'
0000000000219706         db  0x00 ; '.'
0000000000219707         db  0x00 ; '.'
0000000000219708         db  0x00 ; '.'
0000000000219709         db  0x00 ; '.'
000000000021970a         db  0x00 ; '.'
000000000021970b         db  0x00 ; '.'
000000000021970c         db  0x00 ; '.'
000000000021970d         db  0x00 ; '.'
000000000021970e         db  0x00 ; '.'
000000000021970f         db  0x00 ; '.'
0000000000219710         db  0x00 ; '.'
0000000000219711         db  0x00 ; '.'
0000000000219712         db  0x00 ; '.'
0000000000219713         db  0x00 ; '.'
0000000000219714         db  0x00 ; '.'
0000000000219715         db  0x00 ; '.'
0000000000219716         db  0x00 ; '.'
0000000000219717         db  0x00 ; '.'
0000000000219718         db  0x00 ; '.'
0000000000219719         db  0x00 ; '.'
000000000021971a         db  0x00 ; '.'
000000000021971b         db  0x00 ; '.'
000000000021971c         db  0x00 ; '.'
000000000021971d         db  0x00 ; '.'
000000000021971e         db  0x00 ; '.'
000000000021971f         db  0x00 ; '.'
0000000000219720         db  0x00 ; '.'
0000000000219721         db  0x00 ; '.'
0000000000219722         db  0x00 ; '.'
0000000000219723         db  0x00 ; '.'
0000000000219724         db  0x00 ; '.'
0000000000219725         db  0x00 ; '.'
0000000000219726         db  0x00 ; '.'
0000000000219727         db  0x00 ; '.'
0000000000219728         db  0x00 ; '.'
0000000000219729         db  0x00 ; '.'
000000000021972a         db  0x00 ; '.'
000000000021972b         db  0x00 ; '.'
000000000021972c         db  0x00 ; '.'
000000000021972d         db  0x00 ; '.'
000000000021972e         db  0x00 ; '.'
000000000021972f         db  0x00 ; '.'
0000000000219730         db  0x00 ; '.'
0000000000219731         db  0x00 ; '.'
0000000000219732         db  0x00 ; '.'
0000000000219733         db  0x00 ; '.'
0000000000219734         db  0x00 ; '.'
0000000000219735         db  0x00 ; '.'
0000000000219736         db  0x00 ; '.'
0000000000219737         db  0x00 ; '.'
0000000000219738         db  0x00 ; '.'
0000000000219739         db  0x00 ; '.'
000000000021973a         db  0x00 ; '.'
000000000021973b         db  0x00 ; '.'
000000000021973c         db  0x00 ; '.'
000000000021973d         db  0x00 ; '.'
000000000021973e         db  0x00 ; '.'
000000000021973f         db  0x00 ; '.'
0000000000219740         db  0x00 ; '.'
0000000000219741         db  0x00 ; '.'
0000000000219742         db  0x00 ; '.'
0000000000219743         db  0x00 ; '.'
0000000000219744         db  0x00 ; '.'
0000000000219745         db  0x00 ; '.'
0000000000219746         db  0x00 ; '.'
0000000000219747         db  0x00 ; '.'
0000000000219748         db  0x00 ; '.'
0000000000219749         db  0x00 ; '.'
000000000021974a         db  0x00 ; '.'
000000000021974b         db  0x00 ; '.'
000000000021974c         db  0x00 ; '.'
000000000021974d         db  0x00 ; '.'
000000000021974e         db  0x00 ; '.'
000000000021974f         db  0x00 ; '.'
0000000000219750         db  0x00 ; '.'
0000000000219751         db  0x00 ; '.'
0000000000219752         db  0x00 ; '.'
0000000000219753         db  0x00 ; '.'
0000000000219754         db  0x00 ; '.'
0000000000219755         db  0x00 ; '.'
0000000000219756         db  0x00 ; '.'
0000000000219757         db  0x00 ; '.'
0000000000219758         db  0x00 ; '.'
0000000000219759         db  0x00 ; '.'
000000000021975a         db  0x00 ; '.'
000000000021975b         db  0x00 ; '.'
000000000021975c         db  0x00 ; '.'
000000000021975d         db  0x00 ; '.'
000000000021975e         db  0x00 ; '.'
000000000021975f         db  0x00 ; '.'
0000000000219760         db  0x00 ; '.'
0000000000219761         db  0x00 ; '.'
0000000000219762         db  0x00 ; '.'
0000000000219763         db  0x00 ; '.'
0000000000219764         db  0x00 ; '.'
0000000000219765         db  0x00 ; '.'
0000000000219766         db  0x00 ; '.'
0000000000219767         db  0x00 ; '.'
0000000000219768         db  0x00 ; '.'
0000000000219769         db  0x00 ; '.'
000000000021976a         db  0x00 ; '.'
000000000021976b         db  0x00 ; '.'
000000000021976c         db  0x00 ; '.'
000000000021976d         db  0x00 ; '.'
000000000021976e         db  0x00 ; '.'
000000000021976f         db  0x00 ; '.'
0000000000219770         db  0x00 ; '.'
0000000000219771         db  0x00 ; '.'
0000000000219772         db  0x00 ; '.'
0000000000219773         db  0x00 ; '.'
0000000000219774         db  0x00 ; '.'
0000000000219775         db  0x00 ; '.'
0000000000219776         db  0x00 ; '.'
0000000000219777         db  0x00 ; '.'
0000000000219778         db  0x00 ; '.'
0000000000219779         db  0x00 ; '.'
000000000021977a         db  0x00 ; '.'
000000000021977b         db  0x00 ; '.'
000000000021977c         db  0x00 ; '.'
000000000021977d         db  0x00 ; '.'
000000000021977e         db  0x00 ; '.'
000000000021977f         db  0x00 ; '.'
0000000000219780         db  0x00 ; '.'
0000000000219781         db  0x00 ; '.'
0000000000219782         db  0x00 ; '.'
0000000000219783         db  0x00 ; '.'
0000000000219784         db  0x00 ; '.'
0000000000219785         db  0x00 ; '.'
0000000000219786         db  0x00 ; '.'
0000000000219787         db  0x00 ; '.'
0000000000219788         db  0x00 ; '.'
0000000000219789         db  0x00 ; '.'
000000000021978a         db  0x00 ; '.'
000000000021978b         db  0x00 ; '.'
000000000021978c         db  0x00 ; '.'
000000000021978d         db  0x00 ; '.'
000000000021978e         db  0x00 ; '.'
000000000021978f         db  0x00 ; '.'
0000000000219790         db  0x00 ; '.'
0000000000219791         db  0x00 ; '.'
0000000000219792         db  0x00 ; '.'
0000000000219793         db  0x00 ; '.'
0000000000219794         db  0x00 ; '.'
0000000000219795         db  0x00 ; '.'
0000000000219796         db  0x00 ; '.'
0000000000219797         db  0x00 ; '.'
0000000000219798         db  0x00 ; '.'
0000000000219799         db  0x00 ; '.'
000000000021979a         db  0x00 ; '.'
000000000021979b         db  0x00 ; '.'
000000000021979c         db  0x00 ; '.'
000000000021979d         db  0x00 ; '.'
000000000021979e         db  0x00 ; '.'
000000000021979f         db  0x00 ; '.'
00000000002197a0         db  0x00 ; '.'
00000000002197a1         db  0x00 ; '.'
00000000002197a2         db  0x00 ; '.'
00000000002197a3         db  0x00 ; '.'
00000000002197a4         db  0x00 ; '.'
00000000002197a5         db  0x00 ; '.'
00000000002197a6         db  0x00 ; '.'
00000000002197a7         db  0x00 ; '.'
00000000002197a8         db  0x00 ; '.'
00000000002197a9         db  0x00 ; '.'
00000000002197aa         db  0x00 ; '.'
00000000002197ab         db  0x00 ; '.'
00000000002197ac         db  0x00 ; '.'
00000000002197ad         db  0x00 ; '.'
00000000002197ae         db  0x00 ; '.'
00000000002197af         db  0x00 ; '.'
00000000002197b0         db  0x00 ; '.'
00000000002197b1         db  0x00 ; '.'
00000000002197b2         db  0x00 ; '.'
00000000002197b3         db  0x00 ; '.'
00000000002197b4         db  0x00 ; '.'
00000000002197b5         db  0x00 ; '.'
00000000002197b6         db  0x00 ; '.'
00000000002197b7         db  0x00 ; '.'
00000000002197b8         db  0x00 ; '.'
00000000002197b9         db  0x00 ; '.'
00000000002197ba         db  0x00 ; '.'
00000000002197bb         db  0x00 ; '.'
00000000002197bc         db  0x00 ; '.'
00000000002197bd         db  0x00 ; '.'
00000000002197be         db  0x00 ; '.'
00000000002197bf         db  0x00 ; '.'
00000000002197c0         db  0x00 ; '.'
00000000002197c1         db  0x00 ; '.'
00000000002197c2         db  0x00 ; '.'
00000000002197c3         db  0x00 ; '.'
00000000002197c4         db  0x00 ; '.'
00000000002197c5         db  0x00 ; '.'
00000000002197c6         db  0x00 ; '.'
00000000002197c7         db  0x00 ; '.'
00000000002197c8         db  0x00 ; '.'
00000000002197c9         db  0x00 ; '.'
00000000002197ca         db  0x00 ; '.'
00000000002197cb         db  0x00 ; '.'
00000000002197cc         db  0x00 ; '.'
00000000002197cd         db  0x00 ; '.'
00000000002197ce         db  0x00 ; '.'
00000000002197cf         db  0x00 ; '.'
00000000002197d0         db  0x00 ; '.'
00000000002197d1         db  0x00 ; '.'
00000000002197d2         db  0x00 ; '.'
00000000002197d3         db  0x00 ; '.'
00000000002197d4         db  0x00 ; '.'
00000000002197d5         db  0x00 ; '.'
00000000002197d6         db  0x00 ; '.'
00000000002197d7         db  0x00 ; '.'
00000000002197d8         db  0x00 ; '.'
00000000002197d9         db  0x00 ; '.'
00000000002197da         db  0x00 ; '.'
00000000002197db         db  0x00 ; '.'
00000000002197dc         db  0x00 ; '.'
00000000002197dd         db  0x00 ; '.'
00000000002197de         db  0x00 ; '.'
00000000002197df         db  0x00 ; '.'
00000000002197e0         db  0x00 ; '.'
00000000002197e1         db  0x00 ; '.'
00000000002197e2         db  0x00 ; '.'
00000000002197e3         db  0x00 ; '.'
00000000002197e4         db  0x00 ; '.'
00000000002197e5         db  0x00 ; '.'
00000000002197e6         db  0x00 ; '.'
00000000002197e7         db  0x00 ; '.'
00000000002197e8         db  0x00 ; '.'
00000000002197e9         db  0x00 ; '.'
00000000002197ea         db  0x00 ; '.'
00000000002197eb         db  0x00 ; '.'
00000000002197ec         db  0x00 ; '.'
00000000002197ed         db  0x00 ; '.'
00000000002197ee         db  0x00 ; '.'
00000000002197ef         db  0x00 ; '.'
00000000002197f0         db  0x00 ; '.'
00000000002197f1         db  0x00 ; '.'
00000000002197f2         db  0x00 ; '.'
00000000002197f3         db  0x00 ; '.'
00000000002197f4         db  0x00 ; '.'
00000000002197f5         db  0x00 ; '.'
00000000002197f6         db  0x00 ; '.'
00000000002197f7         db  0x00 ; '.'
00000000002197f8         db  0x00 ; '.'
00000000002197f9         db  0x00 ; '.'
00000000002197fa         db  0x00 ; '.'
00000000002197fb         db  0x00 ; '.'
00000000002197fc         db  0x00 ; '.'
00000000002197fd         db  0x00 ; '.'
00000000002197fe         db  0x00 ; '.'
00000000002197ff         db  0x00 ; '.'
0000000000219800         db  0x00 ; '.'
0000000000219801         db  0x00 ; '.'
0000000000219802         db  0x00 ; '.'
0000000000219803         db  0x00 ; '.'
0000000000219804         db  0x00 ; '.'
0000000000219805         db  0x00 ; '.'
0000000000219806         db  0x00 ; '.'
0000000000219807         db  0x00 ; '.'
0000000000219808         db  0x00 ; '.'
0000000000219809         db  0x00 ; '.'
000000000021980a         db  0x00 ; '.'
000000000021980b         db  0x00 ; '.'
000000000021980c         db  0x00 ; '.'
000000000021980d         db  0x00 ; '.'
000000000021980e         db  0x00 ; '.'
000000000021980f         db  0x00 ; '.'
0000000000219810         db  0x00 ; '.'
0000000000219811         db  0x00 ; '.'
0000000000219812         db  0x00 ; '.'
0000000000219813         db  0x00 ; '.'
0000000000219814         db  0x00 ; '.'
0000000000219815         db  0x00 ; '.'
0000000000219816         db  0x00 ; '.'
0000000000219817         db  0x00 ; '.'
0000000000219818         db  0x00 ; '.'
0000000000219819         db  0x00 ; '.'
000000000021981a         db  0x00 ; '.'
000000000021981b         db  0x00 ; '.'
000000000021981c         db  0x00 ; '.'
000000000021981d         db  0x00 ; '.'
000000000021981e         db  0x00 ; '.'
000000000021981f         db  0x00 ; '.'
0000000000219820         db  0x00 ; '.'
0000000000219821         db  0x00 ; '.'
0000000000219822         db  0x00 ; '.'
0000000000219823         db  0x00 ; '.'
0000000000219824         db  0x00 ; '.'
0000000000219825         db  0x00 ; '.'
0000000000219826         db  0x00 ; '.'
0000000000219827         db  0x00 ; '.'
0000000000219828         db  0x00 ; '.'
0000000000219829         db  0x00 ; '.'
000000000021982a         db  0x00 ; '.'
000000000021982b         db  0x00 ; '.'
000000000021982c         db  0x00 ; '.'
000000000021982d         db  0x00 ; '.'
000000000021982e         db  0x00 ; '.'
000000000021982f         db  0x00 ; '.'
0000000000219830         db  0x00 ; '.'
0000000000219831         db  0x00 ; '.'
0000000000219832         db  0x00 ; '.'
0000000000219833         db  0x00 ; '.'
0000000000219834         db  0x00 ; '.'
0000000000219835         db  0x00 ; '.'
0000000000219836         db  0x00 ; '.'
0000000000219837         db  0x00 ; '.'
0000000000219838         db  0x00 ; '.'
0000000000219839         db  0x00 ; '.'
000000000021983a         db  0x00 ; '.'
000000000021983b         db  0x00 ; '.'
000000000021983c         db  0x00 ; '.'
000000000021983d         db  0x00 ; '.'
000000000021983e         db  0x00 ; '.'
000000000021983f         db  0x00 ; '.'
0000000000219840         db  0x00 ; '.'
0000000000219841         db  0x00 ; '.'
0000000000219842         db  0x00 ; '.'
0000000000219843         db  0x00 ; '.'
0000000000219844         db  0x00 ; '.'
0000000000219845         db  0x00 ; '.'
0000000000219846         db  0x00 ; '.'
0000000000219847         db  0x00 ; '.'
0000000000219848         db  0x00 ; '.'
0000000000219849         db  0x00 ; '.'
000000000021984a         db  0x00 ; '.'
000000000021984b         db  0x00 ; '.'
000000000021984c         db  0x00 ; '.'
000000000021984d         db  0x00 ; '.'
000000000021984e         db  0x00 ; '.'
000000000021984f         db  0x00 ; '.'
0000000000219850         db  0x00 ; '.'
0000000000219851         db  0x00 ; '.'
0000000000219852         db  0x00 ; '.'
0000000000219853         db  0x00 ; '.'
0000000000219854         db  0x00 ; '.'
0000000000219855         db  0x00 ; '.'
0000000000219856         db  0x00 ; '.'
0000000000219857         db  0x00 ; '.'
0000000000219858         db  0x00 ; '.'
0000000000219859         db  0x00 ; '.'
000000000021985a         db  0x00 ; '.'
000000000021985b         db  0x00 ; '.'
000000000021985c         db  0x00 ; '.'
000000000021985d         db  0x00 ; '.'
000000000021985e         db  0x00 ; '.'
000000000021985f         db  0x00 ; '.'
0000000000219860         db  0x00 ; '.'
0000000000219861         db  0x00 ; '.'
0000000000219862         db  0x00 ; '.'
0000000000219863         db  0x00 ; '.'
0000000000219864         db  0x00 ; '.'
0000000000219865         db  0x00 ; '.'
0000000000219866         db  0x00 ; '.'
0000000000219867         db  0x00 ; '.'
0000000000219868         db  0x00 ; '.'
0000000000219869         db  0x00 ; '.'
000000000021986a         db  0x00 ; '.'
000000000021986b         db  0x00 ; '.'
000000000021986c         db  0x00 ; '.'
000000000021986d         db  0x00 ; '.'
000000000021986e         db  0x00 ; '.'
000000000021986f         db  0x00 ; '.'
0000000000219870         db  0x00 ; '.'
0000000000219871         db  0x00 ; '.'
0000000000219872         db  0x00 ; '.'
0000000000219873         db  0x00 ; '.'
0000000000219874         db  0x00 ; '.'
0000000000219875         db  0x00 ; '.'
0000000000219876         db  0x00 ; '.'
0000000000219877         db  0x00 ; '.'
0000000000219878         db  0x00 ; '.'
0000000000219879         db  0x00 ; '.'
000000000021987a         db  0x00 ; '.'
000000000021987b         db  0x00 ; '.'
000000000021987c         db  0x00 ; '.'
000000000021987d         db  0x00 ; '.'
000000000021987e         db  0x00 ; '.'
000000000021987f         db  0x00 ; '.'
0000000000219880         db  0x00 ; '.'
0000000000219881         db  0x00 ; '.'
0000000000219882         db  0x00 ; '.'
0000000000219883         db  0x00 ; '.'
0000000000219884         db  0x00 ; '.'
0000000000219885         db  0x00 ; '.'
0000000000219886         db  0x00 ; '.'
0000000000219887         db  0x00 ; '.'
0000000000219888         db  0x00 ; '.'
0000000000219889         db  0x00 ; '.'
000000000021988a         db  0x00 ; '.'
000000000021988b         db  0x00 ; '.'
000000000021988c         db  0x00 ; '.'
000000000021988d         db  0x00 ; '.'
000000000021988e         db  0x00 ; '.'
000000000021988f         db  0x00 ; '.'
0000000000219890         db  0x00 ; '.'
0000000000219891         db  0x00 ; '.'
0000000000219892         db  0x00 ; '.'
0000000000219893         db  0x00 ; '.'
0000000000219894         db  0x00 ; '.'
0000000000219895         db  0x00 ; '.'
0000000000219896         db  0x00 ; '.'
0000000000219897         db  0x00 ; '.'
0000000000219898         db  0x00 ; '.'
0000000000219899         db  0x00 ; '.'
000000000021989a         db  0x00 ; '.'
000000000021989b         db  0x00 ; '.'
000000000021989c         db  0x00 ; '.'
000000000021989d         db  0x00 ; '.'
000000000021989e         db  0x00 ; '.'
000000000021989f         db  0x00 ; '.'
00000000002198a0         db  0x00 ; '.'
00000000002198a1         db  0x00 ; '.'
00000000002198a2         db  0x00 ; '.'
00000000002198a3         db  0x00 ; '.'
00000000002198a4         db  0x00 ; '.'
00000000002198a5         db  0x00 ; '.'
00000000002198a6         db  0x00 ; '.'
00000000002198a7         db  0x00 ; '.'
00000000002198a8         db  0x00 ; '.'
00000000002198a9         db  0x00 ; '.'
00000000002198aa         db  0x00 ; '.'
00000000002198ab         db  0x00 ; '.'
00000000002198ac         db  0x00 ; '.'
00000000002198ad         db  0x00 ; '.'
00000000002198ae         db  0x00 ; '.'
00000000002198af         db  0x00 ; '.'
00000000002198b0         db  0x00 ; '.'
00000000002198b1         db  0x00 ; '.'
00000000002198b2         db  0x00 ; '.'
00000000002198b3         db  0x00 ; '.'
00000000002198b4         db  0x00 ; '.'
00000000002198b5         db  0x00 ; '.'
00000000002198b6         db  0x00 ; '.'
00000000002198b7         db  0x00 ; '.'
00000000002198b8         db  0x00 ; '.'
00000000002198b9         db  0x00 ; '.'
00000000002198ba         db  0x00 ; '.'
00000000002198bb         db  0x00 ; '.'
00000000002198bc         db  0x00 ; '.'
00000000002198bd         db  0x00 ; '.'
00000000002198be         db  0x00 ; '.'
00000000002198bf         db  0x00 ; '.'
00000000002198c0         db  0x00 ; '.'
00000000002198c1         db  0x00 ; '.'
00000000002198c2         db  0x00 ; '.'
00000000002198c3         db  0x00 ; '.'
00000000002198c4         db  0x00 ; '.'
00000000002198c5         db  0x00 ; '.'
00000000002198c6         db  0x00 ; '.'
00000000002198c7         db  0x00 ; '.'
00000000002198c8         db  0x00 ; '.'
00000000002198c9         db  0x00 ; '.'
00000000002198ca         db  0x00 ; '.'
00000000002198cb         db  0x00 ; '.'
00000000002198cc         db  0x00 ; '.'
00000000002198cd         db  0x00 ; '.'
00000000002198ce         db  0x00 ; '.'
00000000002198cf         db  0x00 ; '.'
00000000002198d0         db  0x00 ; '.'
00000000002198d1         db  0x00 ; '.'
00000000002198d2         db  0x00 ; '.'
00000000002198d3         db  0x00 ; '.'
00000000002198d4         db  0x00 ; '.'
00000000002198d5         db  0x00 ; '.'
00000000002198d6         db  0x00 ; '.'
00000000002198d7         db  0x00 ; '.'
00000000002198d8         db  0x00 ; '.'
00000000002198d9         db  0x00 ; '.'
00000000002198da         db  0x00 ; '.'
00000000002198db         db  0x00 ; '.'
00000000002198dc         db  0x00 ; '.'
00000000002198dd         db  0x00 ; '.'
00000000002198de         db  0x00 ; '.'
00000000002198df         db  0x00 ; '.'
00000000002198e0         db  0x00 ; '.'
00000000002198e1         db  0x00 ; '.'
00000000002198e2         db  0x00 ; '.'
00000000002198e3         db  0x00 ; '.'
00000000002198e4         db  0x00 ; '.'
00000000002198e5         db  0x00 ; '.'
00000000002198e6         db  0x00 ; '.'
00000000002198e7         db  0x00 ; '.'
00000000002198e8         db  0x00 ; '.'
00000000002198e9         db  0x00 ; '.'
00000000002198ea         db  0x00 ; '.'
00000000002198eb         db  0x00 ; '.'
00000000002198ec         db  0x00 ; '.'
00000000002198ed         db  0x00 ; '.'
00000000002198ee         db  0x00 ; '.'
00000000002198ef         db  0x00 ; '.'
00000000002198f0         db  0x00 ; '.'
00000000002198f1         db  0x00 ; '.'
00000000002198f2         db  0x00 ; '.'
00000000002198f3         db  0x00 ; '.'
00000000002198f4         db  0x00 ; '.'
00000000002198f5         db  0x00 ; '.'
00000000002198f6         db  0x00 ; '.'
00000000002198f7         db  0x00 ; '.'
00000000002198f8         db  0x00 ; '.'
00000000002198f9         db  0x00 ; '.'
00000000002198fa         db  0x00 ; '.'
00000000002198fb         db  0x00 ; '.'
00000000002198fc         db  0x00 ; '.'
00000000002198fd         db  0x00 ; '.'
00000000002198fe         db  0x00 ; '.'
00000000002198ff         db  0x00 ; '.'
0000000000219900         db  0x00 ; '.'
0000000000219901         db  0x00 ; '.'
0000000000219902         db  0x00 ; '.'
0000000000219903         db  0x00 ; '.'
0000000000219904         db  0x00 ; '.'
0000000000219905         db  0x00 ; '.'
0000000000219906         db  0x00 ; '.'
0000000000219907         db  0x00 ; '.'
0000000000219908         db  0x00 ; '.'
0000000000219909         db  0x00 ; '.'
000000000021990a         db  0x00 ; '.'
000000000021990b         db  0x00 ; '.'
000000000021990c         db  0x00 ; '.'
000000000021990d         db  0x00 ; '.'
000000000021990e         db  0x00 ; '.'
000000000021990f         db  0x00 ; '.'
0000000000219910         db  0x00 ; '.'
0000000000219911         db  0x00 ; '.'
0000000000219912         db  0x00 ; '.'
0000000000219913         db  0x00 ; '.'
0000000000219914         db  0x00 ; '.'
0000000000219915         db  0x00 ; '.'
0000000000219916         db  0x00 ; '.'
0000000000219917         db  0x00 ; '.'
0000000000219918         db  0x00 ; '.'
0000000000219919         db  0x00 ; '.'
000000000021991a         db  0x00 ; '.'
000000000021991b         db  0x00 ; '.'
000000000021991c         db  0x00 ; '.'
000000000021991d         db  0x00 ; '.'
000000000021991e         db  0x00 ; '.'
000000000021991f         db  0x00 ; '.'
0000000000219920         db  0x00 ; '.'
0000000000219921         db  0x00 ; '.'
0000000000219922         db  0x00 ; '.'
0000000000219923         db  0x00 ; '.'
0000000000219924         db  0x00 ; '.'
0000000000219925         db  0x00 ; '.'
0000000000219926         db  0x00 ; '.'
0000000000219927         db  0x00 ; '.'
0000000000219928         db  0x00 ; '.'
0000000000219929         db  0x00 ; '.'
000000000021992a         db  0x00 ; '.'
000000000021992b         db  0x00 ; '.'
000000000021992c         db  0x00 ; '.'
000000000021992d         db  0x00 ; '.'
000000000021992e         db  0x00 ; '.'
000000000021992f         db  0x00 ; '.'
0000000000219930         db  0x00 ; '.'
0000000000219931         db  0x00 ; '.'
0000000000219932         db  0x00 ; '.'
0000000000219933         db  0x00 ; '.'
0000000000219934         db  0x00 ; '.'
0000000000219935         db  0x00 ; '.'
0000000000219936         db  0x00 ; '.'
0000000000219937         db  0x00 ; '.'
0000000000219938         db  0x00 ; '.'
0000000000219939         db  0x00 ; '.'
000000000021993a         db  0x00 ; '.'
000000000021993b         db  0x00 ; '.'
000000000021993c         db  0x00 ; '.'
000000000021993d         db  0x00 ; '.'
000000000021993e         db  0x00 ; '.'
000000000021993f         db  0x00 ; '.'
0000000000219940         db  0x00 ; '.'
0000000000219941         db  0x00 ; '.'
0000000000219942         db  0x00 ; '.'
0000000000219943         db  0x00 ; '.'
0000000000219944         db  0x00 ; '.'
0000000000219945         db  0x00 ; '.'
0000000000219946         db  0x00 ; '.'
0000000000219947         db  0x00 ; '.'
0000000000219948         db  0x00 ; '.'
0000000000219949         db  0x00 ; '.'
000000000021994a         db  0x00 ; '.'
000000000021994b         db  0x00 ; '.'
000000000021994c         db  0x00 ; '.'
000000000021994d         db  0x00 ; '.'
000000000021994e         db  0x00 ; '.'
000000000021994f         db  0x00 ; '.'
0000000000219950         db  0x00 ; '.'
0000000000219951         db  0x00 ; '.'
0000000000219952         db  0x00 ; '.'
0000000000219953         db  0x00 ; '.'
0000000000219954         db  0x00 ; '.'
0000000000219955         db  0x00 ; '.'
0000000000219956         db  0x00 ; '.'
0000000000219957         db  0x00 ; '.'
0000000000219958         db  0x00 ; '.'
0000000000219959         db  0x00 ; '.'
000000000021995a         db  0x00 ; '.'
000000000021995b         db  0x00 ; '.'
000000000021995c         db  0x00 ; '.'
000000000021995d         db  0x00 ; '.'
000000000021995e         db  0x00 ; '.'
000000000021995f         db  0x00 ; '.'
0000000000219960         db  0x00 ; '.'
0000000000219961         db  0x00 ; '.'
0000000000219962         db  0x00 ; '.'
0000000000219963         db  0x00 ; '.'
0000000000219964         db  0x00 ; '.'
0000000000219965         db  0x00 ; '.'
0000000000219966         db  0x00 ; '.'
0000000000219967         db  0x00 ; '.'
0000000000219968         db  0x00 ; '.'
0000000000219969         db  0x00 ; '.'
000000000021996a         db  0x00 ; '.'
000000000021996b         db  0x00 ; '.'
000000000021996c         db  0x00 ; '.'
000000000021996d         db  0x00 ; '.'
000000000021996e         db  0x00 ; '.'
000000000021996f         db  0x00 ; '.'
0000000000219970         db  0x00 ; '.'
0000000000219971         db  0x00 ; '.'
0000000000219972         db  0x00 ; '.'
0000000000219973         db  0x00 ; '.'
0000000000219974         db  0x00 ; '.'
0000000000219975         db  0x00 ; '.'
0000000000219976         db  0x00 ; '.'
0000000000219977         db  0x00 ; '.'
0000000000219978         db  0x00 ; '.'
0000000000219979         db  0x00 ; '.'
000000000021997a         db  0x00 ; '.'
000000000021997b         db  0x00 ; '.'
000000000021997c         db  0x00 ; '.'
000000000021997d         db  0x00 ; '.'
000000000021997e         db  0x00 ; '.'
000000000021997f         db  0x00 ; '.'
0000000000219980         db  0x00 ; '.'
0000000000219981         db  0x00 ; '.'
0000000000219982         db  0x00 ; '.'
0000000000219983         db  0x00 ; '.'
0000000000219984         db  0x00 ; '.'
0000000000219985         db  0x00 ; '.'
0000000000219986         db  0x00 ; '.'
0000000000219987         db  0x00 ; '.'
0000000000219988         db  0x00 ; '.'
0000000000219989         db  0x00 ; '.'
000000000021998a         db  0x00 ; '.'
000000000021998b         db  0x00 ; '.'
000000000021998c         db  0x00 ; '.'
000000000021998d         db  0x00 ; '.'
000000000021998e         db  0x00 ; '.'
000000000021998f         db  0x00 ; '.'
0000000000219990         db  0x00 ; '.'
0000000000219991         db  0x00 ; '.'
0000000000219992         db  0x00 ; '.'
0000000000219993         db  0x00 ; '.'
0000000000219994         db  0x00 ; '.'
0000000000219995         db  0x00 ; '.'
0000000000219996         db  0x00 ; '.'
0000000000219997         db  0x00 ; '.'
0000000000219998         db  0x00 ; '.'
0000000000219999         db  0x00 ; '.'
000000000021999a         db  0x00 ; '.'
000000000021999b         db  0x00 ; '.'
000000000021999c         db  0x00 ; '.'
000000000021999d         db  0x00 ; '.'
000000000021999e         db  0x00 ; '.'
000000000021999f         db  0x00 ; '.'
00000000002199a0         db  0x00 ; '.'
00000000002199a1         db  0x00 ; '.'
00000000002199a2         db  0x00 ; '.'
00000000002199a3         db  0x00 ; '.'
00000000002199a4         db  0x00 ; '.'
00000000002199a5         db  0x00 ; '.'
00000000002199a6         db  0x00 ; '.'
00000000002199a7         db  0x00 ; '.'
00000000002199a8         db  0x00 ; '.'
00000000002199a9         db  0x00 ; '.'
00000000002199aa         db  0x00 ; '.'
00000000002199ab         db  0x00 ; '.'
00000000002199ac         db  0x00 ; '.'
00000000002199ad         db  0x00 ; '.'
00000000002199ae         db  0x00 ; '.'
00000000002199af         db  0x00 ; '.'
00000000002199b0         db  0x00 ; '.'
00000000002199b1         db  0x00 ; '.'
00000000002199b2         db  0x00 ; '.'
00000000002199b3         db  0x00 ; '.'
00000000002199b4         db  0x00 ; '.'
00000000002199b5         db  0x00 ; '.'
00000000002199b6         db  0x00 ; '.'
00000000002199b7         db  0x00 ; '.'
00000000002199b8         db  0x00 ; '.'
00000000002199b9         db  0x00 ; '.'
00000000002199ba         db  0x00 ; '.'
00000000002199bb         db  0x00 ; '.'
00000000002199bc         db  0x00 ; '.'
00000000002199bd         db  0x00 ; '.'
00000000002199be         db  0x00 ; '.'
00000000002199bf         db  0x00 ; '.'
00000000002199c0         db  0x00 ; '.'
00000000002199c1         db  0x00 ; '.'
00000000002199c2         db  0x00 ; '.'
00000000002199c3         db  0x00 ; '.'
00000000002199c4         db  0x00 ; '.'
00000000002199c5         db  0x00 ; '.'
00000000002199c6         db  0x00 ; '.'
00000000002199c7         db  0x00 ; '.'
00000000002199c8         db  0x00 ; '.'
00000000002199c9         db  0x00 ; '.'
00000000002199ca         db  0x00 ; '.'
00000000002199cb         db  0x00 ; '.'
00000000002199cc         db  0x00 ; '.'
00000000002199cd         db  0x00 ; '.'
00000000002199ce         db  0x00 ; '.'
00000000002199cf         db  0x00 ; '.'
00000000002199d0         db  0x00 ; '.'
00000000002199d1         db  0x00 ; '.'
00000000002199d2         db  0x00 ; '.'
00000000002199d3         db  0x00 ; '.'
00000000002199d4         db  0x00 ; '.'
00000000002199d5         db  0x00 ; '.'
00000000002199d6         db  0x00 ; '.'
00000000002199d7         db  0x00 ; '.'
00000000002199d8         db  0x00 ; '.'
00000000002199d9         db  0x00 ; '.'
00000000002199da         db  0x00 ; '.'
00000000002199db         db  0x00 ; '.'
00000000002199dc         db  0x00 ; '.'
00000000002199dd         db  0x00 ; '.'
00000000002199de         db  0x00 ; '.'
00000000002199df         db  0x00 ; '.'
00000000002199e0         db  0x00 ; '.'
00000000002199e1         db  0x00 ; '.'
00000000002199e2         db  0x00 ; '.'
00000000002199e3         db  0x00 ; '.'
00000000002199e4         db  0x00 ; '.'
00000000002199e5         db  0x00 ; '.'
00000000002199e6         db  0x00 ; '.'
00000000002199e7         db  0x00 ; '.'
00000000002199e8         db  0x00 ; '.'
00000000002199e9         db  0x00 ; '.'
00000000002199ea         db  0x00 ; '.'
00000000002199eb         db  0x00 ; '.'
00000000002199ec         db  0x00 ; '.'
00000000002199ed         db  0x00 ; '.'
00000000002199ee         db  0x00 ; '.'
00000000002199ef         db  0x00 ; '.'
00000000002199f0         db  0x00 ; '.'
00000000002199f1         db  0x00 ; '.'
00000000002199f2         db  0x00 ; '.'
00000000002199f3         db  0x00 ; '.'
00000000002199f4         db  0x00 ; '.'
00000000002199f5         db  0x00 ; '.'
00000000002199f6         db  0x00 ; '.'
00000000002199f7         db  0x00 ; '.'
00000000002199f8         db  0x00 ; '.'
00000000002199f9         db  0x00 ; '.'
00000000002199fa         db  0x00 ; '.'
00000000002199fb         db  0x00 ; '.'
00000000002199fc         db  0x00 ; '.'
00000000002199fd         db  0x00 ; '.'
00000000002199fe         db  0x00 ; '.'
00000000002199ff         db  0x00 ; '.'
0000000000219a00         db  0x00 ; '.'
0000000000219a01         db  0x00 ; '.'
0000000000219a02         db  0x00 ; '.'
0000000000219a03         db  0x00 ; '.'
0000000000219a04         db  0x00 ; '.'
0000000000219a05         db  0x00 ; '.'
0000000000219a06         db  0x00 ; '.'
0000000000219a07         db  0x00 ; '.'
0000000000219a08         db  0x00 ; '.'
0000000000219a09         db  0x00 ; '.'
0000000000219a0a         db  0x00 ; '.'
0000000000219a0b         db  0x00 ; '.'
0000000000219a0c         db  0x00 ; '.'
0000000000219a0d         db  0x00 ; '.'
0000000000219a0e         db  0x00 ; '.'
0000000000219a0f         db  0x00 ; '.'
0000000000219a10         db  0x00 ; '.'
0000000000219a11         db  0x00 ; '.'
0000000000219a12         db  0x00 ; '.'
0000000000219a13         db  0x00 ; '.'
0000000000219a14         db  0x00 ; '.'
0000000000219a15         db  0x00 ; '.'
0000000000219a16         db  0x00 ; '.'
0000000000219a17         db  0x00 ; '.'
0000000000219a18         db  0x00 ; '.'
0000000000219a19         db  0x00 ; '.'
0000000000219a1a         db  0x00 ; '.'
0000000000219a1b         db  0x00 ; '.'
0000000000219a1c         db  0x00 ; '.'
0000000000219a1d         db  0x00 ; '.'
0000000000219a1e         db  0x00 ; '.'
0000000000219a1f         db  0x00 ; '.'
0000000000219a20         db  0x00 ; '.'
0000000000219a21         db  0x00 ; '.'
0000000000219a22         db  0x00 ; '.'
0000000000219a23         db  0x00 ; '.'
0000000000219a24         db  0x00 ; '.'
0000000000219a25         db  0x00 ; '.'
0000000000219a26         db  0x00 ; '.'
0000000000219a27         db  0x00 ; '.'
0000000000219a28         db  0x00 ; '.'
0000000000219a29         db  0x00 ; '.'
0000000000219a2a         db  0x00 ; '.'
0000000000219a2b         db  0x00 ; '.'
0000000000219a2c         db  0x00 ; '.'
0000000000219a2d         db  0x00 ; '.'
0000000000219a2e         db  0x00 ; '.'
0000000000219a2f         db  0x00 ; '.'
0000000000219a30         db  0x00 ; '.'
0000000000219a31         db  0x00 ; '.'
0000000000219a32         db  0x00 ; '.'
0000000000219a33         db  0x00 ; '.'
0000000000219a34         db  0x00 ; '.'
0000000000219a35         db  0x00 ; '.'
0000000000219a36         db  0x00 ; '.'
0000000000219a37         db  0x00 ; '.'
0000000000219a38         db  0x00 ; '.'
0000000000219a39         db  0x00 ; '.'
0000000000219a3a         db  0x00 ; '.'
0000000000219a3b         db  0x00 ; '.'
0000000000219a3c         db  0x00 ; '.'
0000000000219a3d         db  0x00 ; '.'
0000000000219a3e         db  0x00 ; '.'
0000000000219a3f         db  0x00 ; '.'
0000000000219a40         db  0x00 ; '.'
0000000000219a41         db  0x00 ; '.'
0000000000219a42         db  0x00 ; '.'
0000000000219a43         db  0x00 ; '.'
0000000000219a44         db  0x00 ; '.'
0000000000219a45         db  0x00 ; '.'
0000000000219a46         db  0x00 ; '.'
0000000000219a47         db  0x00 ; '.'
0000000000219a48         db  0x00 ; '.'
0000000000219a49         db  0x00 ; '.'
0000000000219a4a         db  0x00 ; '.'
0000000000219a4b         db  0x00 ; '.'
0000000000219a4c         db  0x00 ; '.'
0000000000219a4d         db  0x00 ; '.'
0000000000219a4e         db  0x00 ; '.'
0000000000219a4f         db  0x00 ; '.'
0000000000219a50         db  0x00 ; '.'
0000000000219a51         db  0x00 ; '.'
0000000000219a52         db  0x00 ; '.'
0000000000219a53         db  0x00 ; '.'
0000000000219a54         db  0x00 ; '.'
0000000000219a55         db  0x00 ; '.'
0000000000219a56         db  0x00 ; '.'
0000000000219a57         db  0x00 ; '.'
0000000000219a58         db  0x00 ; '.'
0000000000219a59         db  0x00 ; '.'
0000000000219a5a         db  0x00 ; '.'
0000000000219a5b         db  0x00 ; '.'
0000000000219a5c         db  0x00 ; '.'
0000000000219a5d         db  0x00 ; '.'
0000000000219a5e         db  0x00 ; '.'
0000000000219a5f         db  0x00 ; '.'
0000000000219a60         db  0x00 ; '.'
0000000000219a61         db  0x00 ; '.'
0000000000219a62         db  0x00 ; '.'
0000000000219a63         db  0x00 ; '.'
0000000000219a64         db  0x00 ; '.'
0000000000219a65         db  0x00 ; '.'
0000000000219a66         db  0x00 ; '.'
0000000000219a67         db  0x00 ; '.'
0000000000219a68         db  0x00 ; '.'
0000000000219a69         db  0x00 ; '.'
0000000000219a6a         db  0x00 ; '.'
0000000000219a6b         db  0x00 ; '.'
0000000000219a6c         db  0x00 ; '.'
0000000000219a6d         db  0x00 ; '.'
0000000000219a6e         db  0x00 ; '.'
0000000000219a6f         db  0x00 ; '.'
0000000000219a70         db  0x00 ; '.'
0000000000219a71         db  0x00 ; '.'
0000000000219a72         db  0x00 ; '.'
0000000000219a73         db  0x00 ; '.'
0000000000219a74         db  0x00 ; '.'
0000000000219a75         db  0x00 ; '.'
0000000000219a76         db  0x00 ; '.'
0000000000219a77         db  0x00 ; '.'
0000000000219a78         db  0x00 ; '.'
0000000000219a79         db  0x00 ; '.'
0000000000219a7a         db  0x00 ; '.'
0000000000219a7b         db  0x00 ; '.'
0000000000219a7c         db  0x00 ; '.'
0000000000219a7d         db  0x00 ; '.'
0000000000219a7e         db  0x00 ; '.'
0000000000219a7f         db  0x00 ; '.'
0000000000219a80         db  0x00 ; '.'
0000000000219a81         db  0x00 ; '.'
0000000000219a82         db  0x00 ; '.'
0000000000219a83         db  0x00 ; '.'
0000000000219a84         db  0x00 ; '.'
0000000000219a85         db  0x00 ; '.'
0000000000219a86         db  0x00 ; '.'
0000000000219a87         db  0x00 ; '.'
0000000000219a88         db  0x00 ; '.'
0000000000219a89         db  0x00 ; '.'
0000000000219a8a         db  0x00 ; '.'
0000000000219a8b         db  0x00 ; '.'
0000000000219a8c         db  0x00 ; '.'
0000000000219a8d         db  0x00 ; '.'
0000000000219a8e         db  0x00 ; '.'
0000000000219a8f         db  0x00 ; '.'
0000000000219a90         db  0x00 ; '.'
0000000000219a91         db  0x00 ; '.'
0000000000219a92         db  0x00 ; '.'
0000000000219a93         db  0x00 ; '.'
0000000000219a94         db  0x00 ; '.'
0000000000219a95         db  0x00 ; '.'
0000000000219a96         db  0x00 ; '.'
0000000000219a97         db  0x00 ; '.'
0000000000219a98         db  0x00 ; '.'
0000000000219a99         db  0x00 ; '.'
0000000000219a9a         db  0x00 ; '.'
0000000000219a9b         db  0x00 ; '.'
0000000000219a9c         db  0x00 ; '.'
0000000000219a9d         db  0x00 ; '.'
0000000000219a9e         db  0x00 ; '.'
0000000000219a9f         db  0x00 ; '.'
0000000000219aa0         db  0x00 ; '.'
0000000000219aa1         db  0x00 ; '.'
0000000000219aa2         db  0x00 ; '.'
0000000000219aa3         db  0x00 ; '.'
0000000000219aa4         db  0x00 ; '.'
0000000000219aa5         db  0x00 ; '.'
0000000000219aa6         db  0x00 ; '.'
0000000000219aa7         db  0x00 ; '.'
0000000000219aa8         db  0x00 ; '.'
0000000000219aa9         db  0x00 ; '.'
0000000000219aaa         db  0x00 ; '.'
0000000000219aab         db  0x00 ; '.'
0000000000219aac         db  0x00 ; '.'
0000000000219aad         db  0x00 ; '.'
0000000000219aae         db  0x00 ; '.'
0000000000219aaf         db  0x00 ; '.'
0000000000219ab0         db  0x00 ; '.'
0000000000219ab1         db  0x00 ; '.'
0000000000219ab2         db  0x00 ; '.'
0000000000219ab3         db  0x00 ; '.'
0000000000219ab4         db  0x00 ; '.'
0000000000219ab5         db  0x00 ; '.'
0000000000219ab6         db  0x00 ; '.'
0000000000219ab7         db  0x00 ; '.'
0000000000219ab8         db  0x00 ; '.'
0000000000219ab9         db  0x00 ; '.'
0000000000219aba         db  0x00 ; '.'
0000000000219abb         db  0x00 ; '.'
0000000000219abc         db  0x00 ; '.'
0000000000219abd         db  0x00 ; '.'
0000000000219abe         db  0x00 ; '.'
0000000000219abf         db  0x00 ; '.'
0000000000219ac0         db  0x00 ; '.'
0000000000219ac1         db  0x00 ; '.'
0000000000219ac2         db  0x00 ; '.'
0000000000219ac3         db  0x00 ; '.'
0000000000219ac4         db  0x00 ; '.'
0000000000219ac5         db  0x00 ; '.'
0000000000219ac6         db  0x00 ; '.'
0000000000219ac7         db  0x00 ; '.'
0000000000219ac8         db  0x00 ; '.'
0000000000219ac9         db  0x00 ; '.'
0000000000219aca         db  0x00 ; '.'
0000000000219acb         db  0x00 ; '.'
0000000000219acc         db  0x00 ; '.'
0000000000219acd         db  0x00 ; '.'
0000000000219ace         db  0x00 ; '.'
0000000000219acf         db  0x00 ; '.'
0000000000219ad0         db  0x00 ; '.'
0000000000219ad1         db  0x00 ; '.'
0000000000219ad2         db  0x00 ; '.'
0000000000219ad3         db  0x00 ; '.'
0000000000219ad4         db  0x00 ; '.'
0000000000219ad5         db  0x00 ; '.'
0000000000219ad6         db  0x00 ; '.'
0000000000219ad7         db  0x00 ; '.'
0000000000219ad8         db  0x00 ; '.'
0000000000219ad9         db  0x00 ; '.'
0000000000219ada         db  0x00 ; '.'
0000000000219adb         db  0x00 ; '.'
0000000000219adc         db  0x00 ; '.'
0000000000219add         db  0x00 ; '.'
0000000000219ade         db  0x00 ; '.'
0000000000219adf         db  0x00 ; '.'
0000000000219ae0         db  0x00 ; '.'
0000000000219ae1         db  0x00 ; '.'
0000000000219ae2         db  0x00 ; '.'
0000000000219ae3         db  0x00 ; '.'
0000000000219ae4         db  0x00 ; '.'
0000000000219ae5         db  0x00 ; '.'
0000000000219ae6         db  0x00 ; '.'
0000000000219ae7         db  0x00 ; '.'
0000000000219ae8         db  0x00 ; '.'
0000000000219ae9         db  0x00 ; '.'
0000000000219aea         db  0x00 ; '.'
0000000000219aeb         db  0x00 ; '.'
0000000000219aec         db  0x00 ; '.'
0000000000219aed         db  0x00 ; '.'
0000000000219aee         db  0x00 ; '.'
0000000000219aef         db  0x00 ; '.'
0000000000219af0         db  0x00 ; '.'
0000000000219af1         db  0x00 ; '.'
0000000000219af2         db  0x00 ; '.'
0000000000219af3         db  0x00 ; '.'
0000000000219af4         db  0x00 ; '.'
0000000000219af5         db  0x00 ; '.'
0000000000219af6         db  0x00 ; '.'
0000000000219af7         db  0x00 ; '.'
0000000000219af8         db  0x00 ; '.'
0000000000219af9         db  0x00 ; '.'
0000000000219afa         db  0x00 ; '.'
0000000000219afb         db  0x00 ; '.'
0000000000219afc         db  0x00 ; '.'
0000000000219afd         db  0x00 ; '.'
0000000000219afe         db  0x00 ; '.'
0000000000219aff         db  0x00 ; '.'
0000000000219b00         db  0x00 ; '.'
0000000000219b01         db  0x00 ; '.'
0000000000219b02         db  0x00 ; '.'
0000000000219b03         db  0x00 ; '.'
0000000000219b04         db  0x00 ; '.'
0000000000219b05         db  0x00 ; '.'
0000000000219b06         db  0x00 ; '.'
0000000000219b07         db  0x00 ; '.'
0000000000219b08         db  0x00 ; '.'
0000000000219b09         db  0x00 ; '.'
0000000000219b0a         db  0x00 ; '.'
0000000000219b0b         db  0x00 ; '.'
0000000000219b0c         db  0x00 ; '.'
0000000000219b0d         db  0x00 ; '.'
0000000000219b0e         db  0x00 ; '.'
0000000000219b0f         db  0x00 ; '.'
0000000000219b10         db  0x00 ; '.'
0000000000219b11         db  0x00 ; '.'
0000000000219b12         db  0x00 ; '.'
0000000000219b13         db  0x00 ; '.'
0000000000219b14         db  0x00 ; '.'
0000000000219b15         db  0x00 ; '.'
0000000000219b16         db  0x00 ; '.'
0000000000219b17         db  0x00 ; '.'
0000000000219b18         db  0x00 ; '.'
0000000000219b19         db  0x00 ; '.'
0000000000219b1a         db  0x00 ; '.'
0000000000219b1b         db  0x00 ; '.'
0000000000219b1c         db  0x00 ; '.'
0000000000219b1d         db  0x00 ; '.'
0000000000219b1e         db  0x00 ; '.'
0000000000219b1f         db  0x00 ; '.'
0000000000219b20         db  0x00 ; '.'
0000000000219b21         db  0x00 ; '.'
0000000000219b22         db  0x00 ; '.'
0000000000219b23         db  0x00 ; '.'
0000000000219b24         db  0x00 ; '.'
0000000000219b25         db  0x00 ; '.'
0000000000219b26         db  0x00 ; '.'
0000000000219b27         db  0x00 ; '.'
0000000000219b28         db  0x00 ; '.'
0000000000219b29         db  0x00 ; '.'
0000000000219b2a         db  0x00 ; '.'
0000000000219b2b         db  0x00 ; '.'
0000000000219b2c         db  0x00 ; '.'
0000000000219b2d         db  0x00 ; '.'
0000000000219b2e         db  0x00 ; '.'
0000000000219b2f         db  0x00 ; '.'
0000000000219b30         db  0x00 ; '.'
0000000000219b31         db  0x00 ; '.'
0000000000219b32         db  0x00 ; '.'
0000000000219b33         db  0x00 ; '.'
0000000000219b34         db  0x00 ; '.'
0000000000219b35         db  0x00 ; '.'
0000000000219b36         db  0x00 ; '.'
0000000000219b37         db  0x00 ; '.'
0000000000219b38         db  0x00 ; '.'
0000000000219b39         db  0x00 ; '.'
0000000000219b3a         db  0x00 ; '.'
0000000000219b3b         db  0x00 ; '.'
0000000000219b3c         db  0x00 ; '.'
0000000000219b3d         db  0x00 ; '.'
0000000000219b3e         db  0x00 ; '.'
0000000000219b3f         db  0x00 ; '.'
0000000000219b40         db  0x00 ; '.'
0000000000219b41         db  0x00 ; '.'
0000000000219b42         db  0x00 ; '.'
0000000000219b43         db  0x00 ; '.'
0000000000219b44         db  0x00 ; '.'
0000000000219b45         db  0x00 ; '.'
0000000000219b46         db  0x00 ; '.'
0000000000219b47         db  0x00 ; '.'
0000000000219b48         db  0x00 ; '.'
0000000000219b49         db  0x00 ; '.'
0000000000219b4a         db  0x00 ; '.'
0000000000219b4b         db  0x00 ; '.'
0000000000219b4c         db  0x00 ; '.'
0000000000219b4d         db  0x00 ; '.'
0000000000219b4e         db  0x00 ; '.'
0000000000219b4f         db  0x00 ; '.'
0000000000219b50         db  0x00 ; '.'
0000000000219b51         db  0x00 ; '.'
0000000000219b52         db  0x00 ; '.'
0000000000219b53         db  0x00 ; '.'
0000000000219b54         db  0x00 ; '.'
0000000000219b55         db  0x00 ; '.'
0000000000219b56         db  0x00 ; '.'
0000000000219b57         db  0x00 ; '.'
0000000000219b58         db  0x00 ; '.'
0000000000219b59         db  0x00 ; '.'
0000000000219b5a         db  0x00 ; '.'
0000000000219b5b         db  0x00 ; '.'
0000000000219b5c         db  0x00 ; '.'
0000000000219b5d         db  0x00 ; '.'
0000000000219b5e         db  0x00 ; '.'
0000000000219b5f         db  0x00 ; '.'
0000000000219b60         db  0x00 ; '.'
0000000000219b61         db  0x00 ; '.'
0000000000219b62         db  0x00 ; '.'
0000000000219b63         db  0x00 ; '.'
0000000000219b64         db  0x00 ; '.'
0000000000219b65         db  0x00 ; '.'
0000000000219b66         db  0x00 ; '.'
0000000000219b67         db  0x00 ; '.'
0000000000219b68         db  0x00 ; '.'
0000000000219b69         db  0x00 ; '.'
0000000000219b6a         db  0x00 ; '.'
0000000000219b6b         db  0x00 ; '.'
0000000000219b6c         db  0x00 ; '.'
0000000000219b6d         db  0x00 ; '.'
0000000000219b6e         db  0x00 ; '.'
0000000000219b6f         db  0x00 ; '.'
0000000000219b70         db  0x00 ; '.'
0000000000219b71         db  0x00 ; '.'
0000000000219b72         db  0x00 ; '.'
0000000000219b73         db  0x00 ; '.'
0000000000219b74         db  0x00 ; '.'
0000000000219b75         db  0x00 ; '.'
0000000000219b76         db  0x00 ; '.'
0000000000219b77         db  0x00 ; '.'
0000000000219b78         db  0x00 ; '.'
0000000000219b79         db  0x00 ; '.'
0000000000219b7a         db  0x00 ; '.'
0000000000219b7b         db  0x00 ; '.'
0000000000219b7c         db  0x00 ; '.'
0000000000219b7d         db  0x00 ; '.'
0000000000219b7e         db  0x00 ; '.'
0000000000219b7f         db  0x00 ; '.'
0000000000219b80         db  0x00 ; '.'
0000000000219b81         db  0x00 ; '.'
0000000000219b82         db  0x00 ; '.'
0000000000219b83         db  0x00 ; '.'
0000000000219b84         db  0x00 ; '.'
0000000000219b85         db  0x00 ; '.'
0000000000219b86         db  0x00 ; '.'
0000000000219b87         db  0x00 ; '.'
0000000000219b88         db  0x00 ; '.'
0000000000219b89         db  0x00 ; '.'
0000000000219b8a         db  0x00 ; '.'
0000000000219b8b         db  0x00 ; '.'
0000000000219b8c         db  0x00 ; '.'
0000000000219b8d         db  0x00 ; '.'
0000000000219b8e         db  0x00 ; '.'
0000000000219b8f         db  0x00 ; '.'
0000000000219b90         db  0x00 ; '.'
0000000000219b91         db  0x00 ; '.'
0000000000219b92         db  0x00 ; '.'
0000000000219b93         db  0x00 ; '.'
0000000000219b94         db  0x00 ; '.'
0000000000219b95         db  0x00 ; '.'
0000000000219b96         db  0x00 ; '.'
0000000000219b97         db  0x00 ; '.'
0000000000219b98         db  0x00 ; '.'
0000000000219b99         db  0x00 ; '.'
0000000000219b9a         db  0x00 ; '.'
0000000000219b9b         db  0x00 ; '.'
0000000000219b9c         db  0x00 ; '.'
0000000000219b9d         db  0x00 ; '.'
0000000000219b9e         db  0x00 ; '.'
0000000000219b9f         db  0x00 ; '.'
0000000000219ba0         db  0x00 ; '.'
0000000000219ba1         db  0x00 ; '.'
0000000000219ba2         db  0x00 ; '.'
0000000000219ba3         db  0x00 ; '.'
0000000000219ba4         db  0x00 ; '.'
0000000000219ba5         db  0x00 ; '.'
0000000000219ba6         db  0x00 ; '.'
0000000000219ba7         db  0x00 ; '.'
0000000000219ba8         db  0x00 ; '.'
0000000000219ba9         db  0x00 ; '.'
0000000000219baa         db  0x00 ; '.'
0000000000219bab         db  0x00 ; '.'
0000000000219bac         db  0x00 ; '.'
0000000000219bad         db  0x00 ; '.'
0000000000219bae         db  0x00 ; '.'
0000000000219baf         db  0x00 ; '.'
0000000000219bb0         db  0x00 ; '.'
0000000000219bb1         db  0x00 ; '.'
0000000000219bb2         db  0x00 ; '.'
0000000000219bb3         db  0x00 ; '.'
0000000000219bb4         db  0x00 ; '.'
0000000000219bb5         db  0x00 ; '.'
0000000000219bb6         db  0x00 ; '.'
0000000000219bb7         db  0x00 ; '.'
0000000000219bb8         db  0x00 ; '.'
0000000000219bb9         db  0x00 ; '.'
0000000000219bba         db  0x00 ; '.'
0000000000219bbb         db  0x00 ; '.'
0000000000219bbc         db  0x00 ; '.'
0000000000219bbd         db  0x00 ; '.'
0000000000219bbe         db  0x00 ; '.'
0000000000219bbf         db  0x00 ; '.'
0000000000219bc0         db  0x00 ; '.'
0000000000219bc1         db  0x00 ; '.'
0000000000219bc2         db  0x00 ; '.'
0000000000219bc3         db  0x00 ; '.'
0000000000219bc4         db  0x00 ; '.'
0000000000219bc5         db  0x00 ; '.'
0000000000219bc6         db  0x00 ; '.'
0000000000219bc7         db  0x00 ; '.'
0000000000219bc8         db  0x00 ; '.'
0000000000219bc9         db  0x00 ; '.'
0000000000219bca         db  0x00 ; '.'
0000000000219bcb         db  0x00 ; '.'
0000000000219bcc         db  0x00 ; '.'
0000000000219bcd         db  0x00 ; '.'
0000000000219bce         db  0x00 ; '.'
0000000000219bcf         db  0x00 ; '.'
0000000000219bd0         db  0x00 ; '.'
0000000000219bd1         db  0x00 ; '.'
0000000000219bd2         db  0x00 ; '.'
0000000000219bd3         db  0x00 ; '.'
0000000000219bd4         db  0x00 ; '.'
0000000000219bd5         db  0x00 ; '.'
0000000000219bd6         db  0x00 ; '.'
0000000000219bd7         db  0x00 ; '.'
0000000000219bd8         db  0x00 ; '.'
0000000000219bd9         db  0x00 ; '.'
0000000000219bda         db  0x00 ; '.'
0000000000219bdb         db  0x00 ; '.'
0000000000219bdc         db  0x00 ; '.'
0000000000219bdd         db  0x00 ; '.'
0000000000219bde         db  0x00 ; '.'
0000000000219bdf         db  0x00 ; '.'
0000000000219be0         db  0x00 ; '.'
0000000000219be1         db  0x00 ; '.'
0000000000219be2         db  0x00 ; '.'
0000000000219be3         db  0x00 ; '.'
0000000000219be4         db  0x00 ; '.'
0000000000219be5         db  0x00 ; '.'
0000000000219be6         db  0x00 ; '.'
0000000000219be7         db  0x00 ; '.'
0000000000219be8         db  0x00 ; '.'
0000000000219be9         db  0x00 ; '.'
0000000000219bea         db  0x00 ; '.'
0000000000219beb         db  0x00 ; '.'
0000000000219bec         db  0x00 ; '.'
0000000000219bed         db  0x00 ; '.'
0000000000219bee         db  0x00 ; '.'
0000000000219bef         db  0x00 ; '.'
0000000000219bf0         db  0x00 ; '.'
0000000000219bf1         db  0x00 ; '.'
0000000000219bf2         db  0x00 ; '.'
0000000000219bf3         db  0x00 ; '.'
0000000000219bf4         db  0x00 ; '.'
0000000000219bf5         db  0x00 ; '.'
0000000000219bf6         db  0x00 ; '.'
0000000000219bf7         db  0x00 ; '.'
0000000000219bf8         db  0x00 ; '.'
0000000000219bf9         db  0x00 ; '.'
0000000000219bfa         db  0x00 ; '.'
0000000000219bfb         db  0x00 ; '.'
0000000000219bfc         db  0x00 ; '.'
0000000000219bfd         db  0x00 ; '.'
0000000000219bfe         db  0x00 ; '.'
0000000000219bff         db  0x00 ; '.'
0000000000219c00         db  0x00 ; '.'
0000000000219c01         db  0x00 ; '.'
0000000000219c02         db  0x00 ; '.'
0000000000219c03         db  0x00 ; '.'
0000000000219c04         db  0x00 ; '.'
0000000000219c05         db  0x00 ; '.'
0000000000219c06         db  0x00 ; '.'
0000000000219c07         db  0x00 ; '.'
0000000000219c08         db  0x00 ; '.'
0000000000219c09         db  0x00 ; '.'
0000000000219c0a         db  0x00 ; '.'
0000000000219c0b         db  0x00 ; '.'
0000000000219c0c         db  0x00 ; '.'
0000000000219c0d         db  0x00 ; '.'
0000000000219c0e         db  0x00 ; '.'
0000000000219c0f         db  0x00 ; '.'
0000000000219c10         db  0x00 ; '.'
0000000000219c11         db  0x00 ; '.'
0000000000219c12         db  0x00 ; '.'
0000000000219c13         db  0x00 ; '.'
0000000000219c14         db  0x00 ; '.'
0000000000219c15         db  0x00 ; '.'
0000000000219c16         db  0x00 ; '.'
0000000000219c17         db  0x00 ; '.'
0000000000219c18         db  0x00 ; '.'
0000000000219c19         db  0x00 ; '.'
0000000000219c1a         db  0x00 ; '.'
0000000000219c1b         db  0x00 ; '.'
0000000000219c1c         db  0x00 ; '.'
0000000000219c1d         db  0x00 ; '.'
0000000000219c1e         db  0x00 ; '.'
0000000000219c1f         db  0x00 ; '.'
0000000000219c20         db  0x00 ; '.'
0000000000219c21         db  0x00 ; '.'
0000000000219c22         db  0x00 ; '.'
0000000000219c23         db  0x00 ; '.'
0000000000219c24         db  0x00 ; '.'
0000000000219c25         db  0x00 ; '.'
0000000000219c26         db  0x00 ; '.'
0000000000219c27         db  0x00 ; '.'
0000000000219c28         db  0x00 ; '.'
0000000000219c29         db  0x00 ; '.'
0000000000219c2a         db  0x00 ; '.'
0000000000219c2b         db  0x00 ; '.'
0000000000219c2c         db  0x00 ; '.'
0000000000219c2d         db  0x00 ; '.'
0000000000219c2e         db  0x00 ; '.'
0000000000219c2f         db  0x00 ; '.'
0000000000219c30         db  0x00 ; '.'
0000000000219c31         db  0x00 ; '.'
0000000000219c32         db  0x00 ; '.'
0000000000219c33         db  0x00 ; '.'
0000000000219c34         db  0x00 ; '.'
0000000000219c35         db  0x00 ; '.'
0000000000219c36         db  0x00 ; '.'
0000000000219c37         db  0x00 ; '.'
0000000000219c38         db  0x00 ; '.'
0000000000219c39         db  0x00 ; '.'
0000000000219c3a         db  0x00 ; '.'
0000000000219c3b         db  0x00 ; '.'
0000000000219c3c         db  0x00 ; '.'
0000000000219c3d         db  0x00 ; '.'
0000000000219c3e         db  0x00 ; '.'
0000000000219c3f         db  0x00 ; '.'
0000000000219c40         db  0x00 ; '.'
0000000000219c41         db  0x00 ; '.'
0000000000219c42         db  0x00 ; '.'
0000000000219c43         db  0x00 ; '.'
0000000000219c44         db  0x00 ; '.'
0000000000219c45         db  0x00 ; '.'
0000000000219c46         db  0x00 ; '.'
0000000000219c47         db  0x00 ; '.'
0000000000219c48         db  0x00 ; '.'
0000000000219c49         db  0x00 ; '.'
0000000000219c4a         db  0x00 ; '.'
0000000000219c4b         db  0x00 ; '.'
0000000000219c4c         db  0x00 ; '.'
0000000000219c4d         db  0x00 ; '.'
0000000000219c4e         db  0x00 ; '.'
0000000000219c4f         db  0x00 ; '.'
0000000000219c50         db  0x00 ; '.'
0000000000219c51         db  0x00 ; '.'
0000000000219c52         db  0x00 ; '.'
0000000000219c53         db  0x00 ; '.'
0000000000219c54         db  0x00 ; '.'
0000000000219c55         db  0x00 ; '.'
0000000000219c56         db  0x00 ; '.'
0000000000219c57         db  0x00 ; '.'
0000000000219c58         db  0x00 ; '.'
0000000000219c59         db  0x00 ; '.'
0000000000219c5a         db  0x00 ; '.'
0000000000219c5b         db  0x00 ; '.'
0000000000219c5c         db  0x00 ; '.'
0000000000219c5d         db  0x00 ; '.'
0000000000219c5e         db  0x00 ; '.'
0000000000219c5f         db  0x00 ; '.'
0000000000219c60         db  0x00 ; '.'
0000000000219c61         db  0x00 ; '.'
0000000000219c62         db  0x00 ; '.'
0000000000219c63         db  0x00 ; '.'
0000000000219c64         db  0x00 ; '.'
0000000000219c65         db  0x00 ; '.'
0000000000219c66         db  0x00 ; '.'
0000000000219c67         db  0x00 ; '.'
0000000000219c68         db  0x00 ; '.'
0000000000219c69         db  0x00 ; '.'
0000000000219c6a         db  0x00 ; '.'
0000000000219c6b         db  0x00 ; '.'
0000000000219c6c         db  0x00 ; '.'
0000000000219c6d         db  0x00 ; '.'
0000000000219c6e         db  0x00 ; '.'
0000000000219c6f         db  0x00 ; '.'
0000000000219c70         db  0x00 ; '.'
0000000000219c71         db  0x00 ; '.'
0000000000219c72         db  0x00 ; '.'
0000000000219c73         db  0x00 ; '.'
0000000000219c74         db  0x00 ; '.'
0000000000219c75         db  0x00 ; '.'
0000000000219c76         db  0x00 ; '.'
0000000000219c77         db  0x00 ; '.'
0000000000219c78         db  0x00 ; '.'
0000000000219c79         db  0x00 ; '.'
0000000000219c7a         db  0x00 ; '.'
0000000000219c7b         db  0x00 ; '.'
0000000000219c7c         db  0x00 ; '.'
0000000000219c7d         db  0x00 ; '.'
0000000000219c7e         db  0x00 ; '.'
0000000000219c7f         db  0x00 ; '.'
0000000000219c80         db  0x00 ; '.'
0000000000219c81         db  0x00 ; '.'
0000000000219c82         db  0x00 ; '.'
0000000000219c83         db  0x00 ; '.'
0000000000219c84         db  0x00 ; '.'
0000000000219c85         db  0x00 ; '.'
0000000000219c86         db  0x00 ; '.'
0000000000219c87         db  0x00 ; '.'
0000000000219c88         db  0x00 ; '.'
0000000000219c89         db  0x00 ; '.'
0000000000219c8a         db  0x00 ; '.'
0000000000219c8b         db  0x00 ; '.'
0000000000219c8c         db  0x00 ; '.'
0000000000219c8d         db  0x00 ; '.'
0000000000219c8e         db  0x00 ; '.'
0000000000219c8f         db  0x00 ; '.'
0000000000219c90         db  0x00 ; '.'
0000000000219c91         db  0x00 ; '.'
0000000000219c92         db  0x00 ; '.'
0000000000219c93         db  0x00 ; '.'
0000000000219c94         db  0x00 ; '.'
0000000000219c95         db  0x00 ; '.'
0000000000219c96         db  0x00 ; '.'
0000000000219c97         db  0x00 ; '.'
0000000000219c98         db  0x00 ; '.'
0000000000219c99         db  0x00 ; '.'
0000000000219c9a         db  0x00 ; '.'
0000000000219c9b         db  0x00 ; '.'
0000000000219c9c         db  0x00 ; '.'
0000000000219c9d         db  0x00 ; '.'
0000000000219c9e         db  0x00 ; '.'
0000000000219c9f         db  0x00 ; '.'
0000000000219ca0         db  0x00 ; '.'
0000000000219ca1         db  0x00 ; '.'
0000000000219ca2         db  0x00 ; '.'
0000000000219ca3         db  0x00 ; '.'
0000000000219ca4         db  0x00 ; '.'
0000000000219ca5         db  0x00 ; '.'
0000000000219ca6         db  0x00 ; '.'
0000000000219ca7         db  0x00 ; '.'
0000000000219ca8         db  0x00 ; '.'
0000000000219ca9         db  0x00 ; '.'
0000000000219caa         db  0x00 ; '.'
0000000000219cab         db  0x00 ; '.'
0000000000219cac         db  0x00 ; '.'
0000000000219cad         db  0x00 ; '.'
0000000000219cae         db  0x00 ; '.'
0000000000219caf         db  0x00 ; '.'
0000000000219cb0         db  0x00 ; '.'
0000000000219cb1         db  0x00 ; '.'
0000000000219cb2         db  0x00 ; '.'
0000000000219cb3         db  0x00 ; '.'
0000000000219cb4         db  0x00 ; '.'
0000000000219cb5         db  0x00 ; '.'
0000000000219cb6         db  0x00 ; '.'
0000000000219cb7         db  0x00 ; '.'
0000000000219cb8         db  0x00 ; '.'
0000000000219cb9         db  0x00 ; '.'
0000000000219cba         db  0x00 ; '.'
0000000000219cbb         db  0x00 ; '.'
0000000000219cbc         db  0x00 ; '.'
0000000000219cbd         db  0x00 ; '.'
0000000000219cbe         db  0x00 ; '.'
0000000000219cbf         db  0x00 ; '.'
0000000000219cc0         db  0x00 ; '.'
0000000000219cc1         db  0x00 ; '.'
0000000000219cc2         db  0x00 ; '.'
0000000000219cc3         db  0x00 ; '.'
0000000000219cc4         db  0x00 ; '.'
0000000000219cc5         db  0x00 ; '.'
0000000000219cc6         db  0x00 ; '.'
0000000000219cc7         db  0x00 ; '.'
0000000000219cc8         db  0x00 ; '.'
0000000000219cc9         db  0x00 ; '.'
0000000000219cca         db  0x00 ; '.'
0000000000219ccb         db  0x00 ; '.'
0000000000219ccc         db  0x00 ; '.'
0000000000219ccd         db  0x00 ; '.'
0000000000219cce         db  0x00 ; '.'
0000000000219ccf         db  0x00 ; '.'
0000000000219cd0         db  0x00 ; '.'
0000000000219cd1         db  0x00 ; '.'
0000000000219cd2         db  0x00 ; '.'
0000000000219cd3         db  0x00 ; '.'
0000000000219cd4         db  0x00 ; '.'
0000000000219cd5         db  0x00 ; '.'
0000000000219cd6         db  0x00 ; '.'
0000000000219cd7         db  0x00 ; '.'
0000000000219cd8         db  0x00 ; '.'
0000000000219cd9         db  0x00 ; '.'
0000000000219cda         db  0x00 ; '.'
0000000000219cdb         db  0x00 ; '.'
0000000000219cdc         db  0x00 ; '.'
0000000000219cdd         db  0x00 ; '.'
0000000000219cde         db  0x00 ; '.'
0000000000219cdf         db  0x00 ; '.'
0000000000219ce0         db  0x00 ; '.'
0000000000219ce1         db  0x00 ; '.'
0000000000219ce2         db  0x00 ; '.'
0000000000219ce3         db  0x00 ; '.'
0000000000219ce4         db  0x00 ; '.'
0000000000219ce5         db  0x00 ; '.'
0000000000219ce6         db  0x00 ; '.'
0000000000219ce7         db  0x00 ; '.'
0000000000219ce8         db  0x00 ; '.'
0000000000219ce9         db  0x00 ; '.'
0000000000219cea         db  0x00 ; '.'
0000000000219ceb         db  0x00 ; '.'
0000000000219cec         db  0x00 ; '.'
0000000000219ced         db  0x00 ; '.'
0000000000219cee         db  0x00 ; '.'
0000000000219cef         db  0x00 ; '.'
0000000000219cf0         db  0x00 ; '.'
0000000000219cf1         db  0x00 ; '.'
0000000000219cf2         db  0x00 ; '.'
0000000000219cf3         db  0x00 ; '.'
0000000000219cf4         db  0x00 ; '.'
0000000000219cf5         db  0x00 ; '.'
0000000000219cf6         db  0x00 ; '.'
0000000000219cf7         db  0x00 ; '.'
0000000000219cf8         db  0x00 ; '.'
0000000000219cf9         db  0x00 ; '.'
0000000000219cfa         db  0x00 ; '.'
0000000000219cfb         db  0x00 ; '.'
0000000000219cfc         db  0x00 ; '.'
0000000000219cfd         db  0x00 ; '.'
0000000000219cfe         db  0x00 ; '.'
0000000000219cff         db  0x00 ; '.'
0000000000219d00         db  0x00 ; '.'
0000000000219d01         db  0x00 ; '.'
0000000000219d02         db  0x00 ; '.'
0000000000219d03         db  0x00 ; '.'
0000000000219d04         db  0x00 ; '.'
0000000000219d05         db  0x00 ; '.'
0000000000219d06         db  0x00 ; '.'
0000000000219d07         db  0x00 ; '.'
0000000000219d08         db  0x00 ; '.'
0000000000219d09         db  0x00 ; '.'
0000000000219d0a         db  0x00 ; '.'
0000000000219d0b         db  0x00 ; '.'
0000000000219d0c         db  0x00 ; '.'
0000000000219d0d         db  0x00 ; '.'
0000000000219d0e         db  0x00 ; '.'
0000000000219d0f         db  0x00 ; '.'
0000000000219d10         db  0x00 ; '.'
0000000000219d11         db  0x00 ; '.'
0000000000219d12         db  0x00 ; '.'
0000000000219d13         db  0x00 ; '.'
0000000000219d14         db  0x00 ; '.'
0000000000219d15         db  0x00 ; '.'
0000000000219d16         db  0x00 ; '.'
0000000000219d17         db  0x00 ; '.'
0000000000219d18         db  0x00 ; '.'
0000000000219d19         db  0x00 ; '.'
0000000000219d1a         db  0x00 ; '.'
0000000000219d1b         db  0x00 ; '.'
0000000000219d1c         db  0x00 ; '.'
0000000000219d1d         db  0x00 ; '.'
0000000000219d1e         db  0x00 ; '.'
0000000000219d1f         db  0x00 ; '.'
0000000000219d20         db  0x00 ; '.'
0000000000219d21         db  0x00 ; '.'
0000000000219d22         db  0x00 ; '.'
0000000000219d23         db  0x00 ; '.'
0000000000219d24         db  0x00 ; '.'
0000000000219d25         db  0x00 ; '.'
0000000000219d26         db  0x00 ; '.'
0000000000219d27         db  0x00 ; '.'
0000000000219d28         db  0x00 ; '.'
0000000000219d29         db  0x00 ; '.'
0000000000219d2a         db  0x00 ; '.'
0000000000219d2b         db  0x00 ; '.'
0000000000219d2c         db  0x00 ; '.'
0000000000219d2d         db  0x00 ; '.'
0000000000219d2e         db  0x00 ; '.'
0000000000219d2f         db  0x00 ; '.'
0000000000219d30         db  0x00 ; '.'
0000000000219d31         db  0x00 ; '.'
0000000000219d32         db  0x00 ; '.'
0000000000219d33         db  0x00 ; '.'
0000000000219d34         db  0x00 ; '.'
0000000000219d35         db  0x00 ; '.'
0000000000219d36         db  0x00 ; '.'
0000000000219d37         db  0x00 ; '.'
0000000000219d38         db  0x00 ; '.'
0000000000219d39         db  0x00 ; '.'
0000000000219d3a         db  0x00 ; '.'
0000000000219d3b         db  0x00 ; '.'
0000000000219d3c         db  0x00 ; '.'
0000000000219d3d         db  0x00 ; '.'
0000000000219d3e         db  0x00 ; '.'
0000000000219d3f         db  0x00 ; '.'
0000000000219d40         db  0x00 ; '.'
0000000000219d41         db  0x00 ; '.'
0000000000219d42         db  0x00 ; '.'
0000000000219d43         db  0x00 ; '.'
0000000000219d44         db  0x00 ; '.'
0000000000219d45         db  0x00 ; '.'
0000000000219d46         db  0x00 ; '.'
0000000000219d47         db  0x00 ; '.'
0000000000219d48         db  0x00 ; '.'
0000000000219d49         db  0x00 ; '.'
0000000000219d4a         db  0x00 ; '.'
0000000000219d4b         db  0x00 ; '.'
0000000000219d4c         db  0x00 ; '.'
0000000000219d4d         db  0x00 ; '.'
0000000000219d4e         db  0x00 ; '.'
0000000000219d4f         db  0x00 ; '.'
0000000000219d50         db  0x00 ; '.'
0000000000219d51         db  0x00 ; '.'
0000000000219d52         db  0x00 ; '.'
0000000000219d53         db  0x00 ; '.'
0000000000219d54         db  0x00 ; '.'
0000000000219d55         db  0x00 ; '.'
0000000000219d56         db  0x00 ; '.'
0000000000219d57         db  0x00 ; '.'
0000000000219d58         db  0x00 ; '.'
0000000000219d59         db  0x00 ; '.'
0000000000219d5a         db  0x00 ; '.'
0000000000219d5b         db  0x00 ; '.'
0000000000219d5c         db  0x00 ; '.'
0000000000219d5d         db  0x00 ; '.'
0000000000219d5e         db  0x00 ; '.'
0000000000219d5f         db  0x00 ; '.'
0000000000219d60         db  0x00 ; '.'
0000000000219d61         db  0x00 ; '.'
0000000000219d62         db  0x00 ; '.'
0000000000219d63         db  0x00 ; '.'
0000000000219d64         db  0x00 ; '.'
0000000000219d65         db  0x00 ; '.'
0000000000219d66         db  0x00 ; '.'
0000000000219d67         db  0x00 ; '.'
0000000000219d68         db  0x00 ; '.'
0000000000219d69         db  0x00 ; '.'
0000000000219d6a         db  0x00 ; '.'
0000000000219d6b         db  0x00 ; '.'
0000000000219d6c         db  0x00 ; '.'
0000000000219d6d         db  0x00 ; '.'
0000000000219d6e         db  0x00 ; '.'
0000000000219d6f         db  0x00 ; '.'
0000000000219d70         db  0x00 ; '.'
0000000000219d71         db  0x00 ; '.'
0000000000219d72         db  0x00 ; '.'
0000000000219d73         db  0x00 ; '.'
0000000000219d74         db  0x00 ; '.'
0000000000219d75         db  0x00 ; '.'
0000000000219d76         db  0x00 ; '.'
0000000000219d77         db  0x00 ; '.'
0000000000219d78         db  0x00 ; '.'
0000000000219d79         db  0x00 ; '.'
0000000000219d7a         db  0x00 ; '.'
0000000000219d7b         db  0x00 ; '.'
0000000000219d7c         db  0x00 ; '.'
0000000000219d7d         db  0x00 ; '.'
0000000000219d7e         db  0x00 ; '.'
0000000000219d7f         db  0x00 ; '.'
0000000000219d80         db  0x00 ; '.'
0000000000219d81         db  0x00 ; '.'
0000000000219d82         db  0x00 ; '.'
0000000000219d83         db  0x00 ; '.'
0000000000219d84         db  0x00 ; '.'
0000000000219d85         db  0x00 ; '.'
0000000000219d86         db  0x00 ; '.'
0000000000219d87         db  0x00 ; '.'
0000000000219d88         db  0x00 ; '.'
0000000000219d89         db  0x00 ; '.'
0000000000219d8a         db  0x00 ; '.'
0000000000219d8b         db  0x00 ; '.'
0000000000219d8c         db  0x00 ; '.'
0000000000219d8d         db  0x00 ; '.'
0000000000219d8e         db  0x00 ; '.'
0000000000219d8f         db  0x00 ; '.'
0000000000219d90         db  0x00 ; '.'
0000000000219d91         db  0x00 ; '.'
0000000000219d92         db  0x00 ; '.'
0000000000219d93         db  0x00 ; '.'
0000000000219d94         db  0x00 ; '.'
0000000000219d95         db  0x00 ; '.'
0000000000219d96         db  0x00 ; '.'
0000000000219d97         db  0x00 ; '.'
0000000000219d98         db  0x00 ; '.'
0000000000219d99         db  0x00 ; '.'
0000000000219d9a         db  0x00 ; '.'
0000000000219d9b         db  0x00 ; '.'
0000000000219d9c         db  0x00 ; '.'
0000000000219d9d         db  0x00 ; '.'
0000000000219d9e         db  0x00 ; '.'
0000000000219d9f         db  0x00 ; '.'
0000000000219da0         db  0x00 ; '.'
0000000000219da1         db  0x00 ; '.'
0000000000219da2         db  0x00 ; '.'
0000000000219da3         db  0x00 ; '.'
0000000000219da4         db  0x00 ; '.'
0000000000219da5         db  0x00 ; '.'
0000000000219da6         db  0x00 ; '.'
0000000000219da7         db  0x00 ; '.'
0000000000219da8         db  0x00 ; '.'
0000000000219da9         db  0x00 ; '.'
0000000000219daa         db  0x00 ; '.'
0000000000219dab         db  0x00 ; '.'
0000000000219dac         db  0x00 ; '.'
0000000000219dad         db  0x00 ; '.'
0000000000219dae         db  0x00 ; '.'
0000000000219daf         db  0x00 ; '.'
0000000000219db0         db  0x00 ; '.'
0000000000219db1         db  0x00 ; '.'
0000000000219db2         db  0x00 ; '.'
0000000000219db3         db  0x00 ; '.'
0000000000219db4         db  0x00 ; '.'
0000000000219db5         db  0x00 ; '.'
0000000000219db6         db  0x00 ; '.'
0000000000219db7         db  0x00 ; '.'
0000000000219db8         db  0x00 ; '.'
0000000000219db9         db  0x00 ; '.'
0000000000219dba         db  0x00 ; '.'
0000000000219dbb         db  0x00 ; '.'
0000000000219dbc         db  0x00 ; '.'
0000000000219dbd         db  0x00 ; '.'
0000000000219dbe         db  0x00 ; '.'
0000000000219dbf         db  0x00 ; '.'
0000000000219dc0         db  0x00 ; '.'
0000000000219dc1         db  0x00 ; '.'
0000000000219dc2         db  0x00 ; '.'
0000000000219dc3         db  0x00 ; '.'
0000000000219dc4         db  0x00 ; '.'
0000000000219dc5         db  0x00 ; '.'
0000000000219dc6         db  0x00 ; '.'
0000000000219dc7         db  0x00 ; '.'
0000000000219dc8         db  0x00 ; '.'
0000000000219dc9         db  0x00 ; '.'
0000000000219dca         db  0x00 ; '.'
0000000000219dcb         db  0x00 ; '.'
0000000000219dcc         db  0x00 ; '.'
0000000000219dcd         db  0x00 ; '.'
0000000000219dce         db  0x00 ; '.'
0000000000219dcf         db  0x00 ; '.'
0000000000219dd0         db  0x00 ; '.'
0000000000219dd1         db  0x00 ; '.'
0000000000219dd2         db  0x00 ; '.'
0000000000219dd3         db  0x00 ; '.'
0000000000219dd4         db  0x00 ; '.'
0000000000219dd5         db  0x00 ; '.'
0000000000219dd6         db  0x00 ; '.'
0000000000219dd7         db  0x00 ; '.'
0000000000219dd8         db  0x00 ; '.'
0000000000219dd9         db  0x00 ; '.'
0000000000219dda         db  0x00 ; '.'
0000000000219ddb         db  0x00 ; '.'
0000000000219ddc         db  0x00 ; '.'
0000000000219ddd         db  0x00 ; '.'
0000000000219dde         db  0x00 ; '.'
0000000000219ddf         db  0x00 ; '.'
0000000000219de0         db  0x00 ; '.'
0000000000219de1         db  0x00 ; '.'
0000000000219de2         db  0x00 ; '.'
0000000000219de3         db  0x00 ; '.'
0000000000219de4         db  0x00 ; '.'
0000000000219de5         db  0x00 ; '.'
0000000000219de6         db  0x00 ; '.'
0000000000219de7         db  0x00 ; '.'
0000000000219de8         db  0x00 ; '.'
0000000000219de9         db  0x00 ; '.'
0000000000219dea         db  0x00 ; '.'
0000000000219deb         db  0x00 ; '.'
0000000000219dec         db  0x00 ; '.'
0000000000219ded         db  0x00 ; '.'
0000000000219dee         db  0x00 ; '.'
0000000000219def         db  0x00 ; '.'
0000000000219df0         db  0x00 ; '.'
0000000000219df1         db  0x00 ; '.'
0000000000219df2         db  0x00 ; '.'
0000000000219df3         db  0x00 ; '.'
0000000000219df4         db  0x00 ; '.'
0000000000219df5         db  0x00 ; '.'
0000000000219df6         db  0x00 ; '.'
0000000000219df7         db  0x00 ; '.'
0000000000219df8         db  0x00 ; '.'
0000000000219df9         db  0x00 ; '.'
0000000000219dfa         db  0x00 ; '.'
0000000000219dfb         db  0x00 ; '.'
0000000000219dfc         db  0x00 ; '.'
0000000000219dfd         db  0x00 ; '.'
0000000000219dfe         db  0x00 ; '.'
0000000000219dff         db  0x00 ; '.'
0000000000219e00         db  0x00 ; '.'
0000000000219e01         db  0x00 ; '.'
0000000000219e02         db  0x00 ; '.'
0000000000219e03         db  0x00 ; '.'
0000000000219e04         db  0x00 ; '.'
0000000000219e05         db  0x00 ; '.'
0000000000219e06         db  0x00 ; '.'
0000000000219e07         db  0x00 ; '.'
0000000000219e08         db  0x00 ; '.'
0000000000219e09         db  0x00 ; '.'
0000000000219e0a         db  0x00 ; '.'
0000000000219e0b         db  0x00 ; '.'
0000000000219e0c         db  0x00 ; '.'
0000000000219e0d         db  0x00 ; '.'
0000000000219e0e         db  0x00 ; '.'
0000000000219e0f         db  0x00 ; '.'
0000000000219e10         db  0x00 ; '.'
0000000000219e11         db  0x00 ; '.'
0000000000219e12         db  0x00 ; '.'
0000000000219e13         db  0x00 ; '.'
0000000000219e14         db  0x00 ; '.'
0000000000219e15         db  0x00 ; '.'
0000000000219e16         db  0x00 ; '.'
0000000000219e17         db  0x00 ; '.'
0000000000219e18         db  0x00 ; '.'
0000000000219e19         db  0x00 ; '.'
0000000000219e1a         db  0x00 ; '.'
0000000000219e1b         db  0x00 ; '.'
0000000000219e1c         db  0x00 ; '.'
0000000000219e1d         db  0x00 ; '.'
0000000000219e1e         db  0x00 ; '.'
0000000000219e1f         db  0x00 ; '.'
0000000000219e20         db  0x00 ; '.'
0000000000219e21         db  0x00 ; '.'
0000000000219e22         db  0x00 ; '.'
0000000000219e23         db  0x00 ; '.'
0000000000219e24         db  0x00 ; '.'
0000000000219e25         db  0x00 ; '.'
0000000000219e26         db  0x00 ; '.'
0000000000219e27         db  0x00 ; '.'
0000000000219e28         db  0x00 ; '.'
0000000000219e29         db  0x00 ; '.'
0000000000219e2a         db  0x00 ; '.'
0000000000219e2b         db  0x00 ; '.'
0000000000219e2c         db  0x00 ; '.'
0000000000219e2d         db  0x00 ; '.'
0000000000219e2e         db  0x00 ; '.'
0000000000219e2f         db  0x00 ; '.'
0000000000219e30         db  0x00 ; '.'
0000000000219e31         db  0x00 ; '.'
0000000000219e32         db  0x00 ; '.'
0000000000219e33         db  0x00 ; '.'
0000000000219e34         db  0x00 ; '.'
0000000000219e35         db  0x00 ; '.'
0000000000219e36         db  0x00 ; '.'
0000000000219e37         db  0x00 ; '.'
0000000000219e38         db  0x00 ; '.'
0000000000219e39         db  0x00 ; '.'
0000000000219e3a         db  0x00 ; '.'
0000000000219e3b         db  0x00 ; '.'
0000000000219e3c         db  0x00 ; '.'
0000000000219e3d         db  0x00 ; '.'
0000000000219e3e         db  0x00 ; '.'
0000000000219e3f         db  0x00 ; '.'
0000000000219e40         db  0x00 ; '.'
0000000000219e41         db  0x00 ; '.'
0000000000219e42         db  0x00 ; '.'
0000000000219e43         db  0x00 ; '.'
0000000000219e44         db  0x00 ; '.'
0000000000219e45         db  0x00 ; '.'
0000000000219e46         db  0x00 ; '.'
0000000000219e47         db  0x00 ; '.'
0000000000219e48         db  0x00 ; '.'
0000000000219e49         db  0x00 ; '.'
0000000000219e4a         db  0x00 ; '.'
0000000000219e4b         db  0x00 ; '.'
0000000000219e4c         db  0x00 ; '.'
0000000000219e4d         db  0x00 ; '.'
0000000000219e4e         db  0x00 ; '.'
0000000000219e4f         db  0x00 ; '.'
0000000000219e50         db  0x00 ; '.'
0000000000219e51         db  0x00 ; '.'
0000000000219e52         db  0x00 ; '.'
0000000000219e53         db  0x00 ; '.'
0000000000219e54         db  0x00 ; '.'
0000000000219e55         db  0x00 ; '.'
0000000000219e56         db  0x00 ; '.'
0000000000219e57         db  0x00 ; '.'
0000000000219e58         db  0x00 ; '.'
0000000000219e59         db  0x00 ; '.'
0000000000219e5a         db  0x00 ; '.'
0000000000219e5b         db  0x00 ; '.'
0000000000219e5c         db  0x00 ; '.'
0000000000219e5d         db  0x00 ; '.'
0000000000219e5e         db  0x00 ; '.'
0000000000219e5f         db  0x00 ; '.'
0000000000219e60         db  0x00 ; '.'
0000000000219e61         db  0x00 ; '.'
0000000000219e62         db  0x00 ; '.'
0000000000219e63         db  0x00 ; '.'
0000000000219e64         db  0x00 ; '.'
0000000000219e65         db  0x00 ; '.'
0000000000219e66         db  0x00 ; '.'
0000000000219e67         db  0x00 ; '.'
0000000000219e68         db  0x00 ; '.'
0000000000219e69         db  0x00 ; '.'
0000000000219e6a         db  0x00 ; '.'
0000000000219e6b         db  0x00 ; '.'
0000000000219e6c         db  0x00 ; '.'
0000000000219e6d         db  0x00 ; '.'
0000000000219e6e         db  0x00 ; '.'
0000000000219e6f         db  0x00 ; '.'
0000000000219e70         db  0x00 ; '.'
0000000000219e71         db  0x00 ; '.'
0000000000219e72         db  0x00 ; '.'
0000000000219e73         db  0x00 ; '.'
0000000000219e74         db  0x00 ; '.'
0000000000219e75         db  0x00 ; '.'
0000000000219e76         db  0x00 ; '.'
0000000000219e77         db  0x00 ; '.'
0000000000219e78         db  0x00 ; '.'
0000000000219e79         db  0x00 ; '.'
0000000000219e7a         db  0x00 ; '.'
0000000000219e7b         db  0x00 ; '.'
0000000000219e7c         db  0x00 ; '.'
0000000000219e7d         db  0x00 ; '.'
0000000000219e7e         db  0x00 ; '.'
0000000000219e7f         db  0x00 ; '.'
0000000000219e80         db  0x00 ; '.'
0000000000219e81         db  0x00 ; '.'
0000000000219e82         db  0x00 ; '.'
0000000000219e83         db  0x00 ; '.'
0000000000219e84         db  0x00 ; '.'
0000000000219e85         db  0x00 ; '.'
0000000000219e86         db  0x00 ; '.'
0000000000219e87         db  0x00 ; '.'
0000000000219e88         db  0x00 ; '.'
0000000000219e89         db  0x00 ; '.'
0000000000219e8a         db  0x00 ; '.'
0000000000219e8b         db  0x00 ; '.'
0000000000219e8c         db  0x00 ; '.'
0000000000219e8d         db  0x00 ; '.'
0000000000219e8e         db  0x00 ; '.'
0000000000219e8f         db  0x00 ; '.'
0000000000219e90         db  0x00 ; '.'
0000000000219e91         db  0x00 ; '.'
0000000000219e92         db  0x00 ; '.'
0000000000219e93         db  0x00 ; '.'
0000000000219e94         db  0x00 ; '.'
0000000000219e95         db  0x00 ; '.'
0000000000219e96         db  0x00 ; '.'
0000000000219e97         db  0x00 ; '.'
0000000000219e98         db  0x00 ; '.'
0000000000219e99         db  0x00 ; '.'
0000000000219e9a         db  0x00 ; '.'
0000000000219e9b         db  0x00 ; '.'
0000000000219e9c         db  0x00 ; '.'
0000000000219e9d         db  0x00 ; '.'
0000000000219e9e         db  0x00 ; '.'
0000000000219e9f         db  0x00 ; '.'
0000000000219ea0         db  0x00 ; '.'
0000000000219ea1         db  0x00 ; '.'
0000000000219ea2         db  0x00 ; '.'
0000000000219ea3         db  0x00 ; '.'
0000000000219ea4         db  0x00 ; '.'
0000000000219ea5         db  0x00 ; '.'
0000000000219ea6         db  0x00 ; '.'
0000000000219ea7         db  0x00 ; '.'
0000000000219ea8         db  0x00 ; '.'
0000000000219ea9         db  0x00 ; '.'
0000000000219eaa         db  0x00 ; '.'
0000000000219eab         db  0x00 ; '.'
0000000000219eac         db  0x00 ; '.'
0000000000219ead         db  0x00 ; '.'
0000000000219eae         db  0x00 ; '.'
0000000000219eaf         db  0x00 ; '.'
0000000000219eb0         db  0x00 ; '.'
0000000000219eb1         db  0x00 ; '.'
0000000000219eb2         db  0x00 ; '.'
0000000000219eb3         db  0x00 ; '.'
0000000000219eb4         db  0x00 ; '.'
0000000000219eb5         db  0x00 ; '.'
0000000000219eb6         db  0x00 ; '.'
0000000000219eb7         db  0x00 ; '.'
0000000000219eb8         db  0x00 ; '.'
0000000000219eb9         db  0x00 ; '.'
0000000000219eba         db  0x00 ; '.'
0000000000219ebb         db  0x00 ; '.'
0000000000219ebc         db  0x00 ; '.'
0000000000219ebd         db  0x00 ; '.'
0000000000219ebe         db  0x00 ; '.'
0000000000219ebf         db  0x00 ; '.'
0000000000219ec0         db  0x00 ; '.'
0000000000219ec1         db  0x00 ; '.'
0000000000219ec2         db  0x00 ; '.'
0000000000219ec3         db  0x00 ; '.'
0000000000219ec4         db  0x00 ; '.'
0000000000219ec5         db  0x00 ; '.'
0000000000219ec6         db  0x00 ; '.'
0000000000219ec7         db  0x00 ; '.'
0000000000219ec8         db  0x00 ; '.'
0000000000219ec9         db  0x00 ; '.'
0000000000219eca         db  0x00 ; '.'
0000000000219ecb         db  0x00 ; '.'
0000000000219ecc         db  0x00 ; '.'
0000000000219ecd         db  0x00 ; '.'
0000000000219ece         db  0x00 ; '.'
0000000000219ecf         db  0x00 ; '.'
0000000000219ed0         db  0x00 ; '.'
0000000000219ed1         db  0x00 ; '.'
0000000000219ed2         db  0x00 ; '.'
0000000000219ed3         db  0x00 ; '.'
0000000000219ed4         db  0x00 ; '.'
0000000000219ed5         db  0x00 ; '.'
0000000000219ed6         db  0x00 ; '.'
0000000000219ed7         db  0x00 ; '.'
0000000000219ed8         db  0x00 ; '.'
0000000000219ed9         db  0x00 ; '.'
0000000000219eda         db  0x00 ; '.'
0000000000219edb         db  0x00 ; '.'
0000000000219edc         db  0x00 ; '.'
0000000000219edd         db  0x00 ; '.'
0000000000219ede         db  0x00 ; '.'
0000000000219edf         db  0x00 ; '.'
0000000000219ee0         db  0x00 ; '.'
0000000000219ee1         db  0x00 ; '.'
0000000000219ee2         db  0x00 ; '.'
0000000000219ee3         db  0x00 ; '.'
0000000000219ee4         db  0x00 ; '.'
0000000000219ee5         db  0x00 ; '.'
0000000000219ee6         db  0x00 ; '.'
0000000000219ee7         db  0x00 ; '.'
0000000000219ee8         db  0x00 ; '.'
0000000000219ee9         db  0x00 ; '.'
0000000000219eea         db  0x00 ; '.'
0000000000219eeb         db  0x00 ; '.'
0000000000219eec         db  0x00 ; '.'
0000000000219eed         db  0x00 ; '.'
0000000000219eee         db  0x00 ; '.'
0000000000219eef         db  0x00 ; '.'
0000000000219ef0         db  0x00 ; '.'
0000000000219ef1         db  0x00 ; '.'
0000000000219ef2         db  0x00 ; '.'
0000000000219ef3         db  0x00 ; '.'
0000000000219ef4         db  0x00 ; '.'
0000000000219ef5         db  0x00 ; '.'
0000000000219ef6         db  0x00 ; '.'
0000000000219ef7         db  0x00 ; '.'
0000000000219ef8         db  0x00 ; '.'
0000000000219ef9         db  0x00 ; '.'
0000000000219efa         db  0x00 ; '.'
0000000000219efb         db  0x00 ; '.'
0000000000219efc         db  0x00 ; '.'
0000000000219efd         db  0x00 ; '.'
0000000000219efe         db  0x00 ; '.'
0000000000219eff         db  0x00 ; '.'
0000000000219f00         db  0x00 ; '.'
0000000000219f01         db  0x00 ; '.'
0000000000219f02         db  0x00 ; '.'
0000000000219f03         db  0x00 ; '.'
0000000000219f04         db  0x00 ; '.'
0000000000219f05         db  0x00 ; '.'
0000000000219f06         db  0x00 ; '.'
0000000000219f07         db  0x00 ; '.'
0000000000219f08         db  0x00 ; '.'
0000000000219f09         db  0x00 ; '.'
0000000000219f0a         db  0x00 ; '.'
0000000000219f0b         db  0x00 ; '.'
0000000000219f0c         db  0x00 ; '.'
0000000000219f0d         db  0x00 ; '.'
0000000000219f0e         db  0x00 ; '.'
0000000000219f0f         db  0x00 ; '.'
0000000000219f10         db  0x00 ; '.'
0000000000219f11         db  0x00 ; '.'
0000000000219f12         db  0x00 ; '.'
0000000000219f13         db  0x00 ; '.'
0000000000219f14         db  0x00 ; '.'
0000000000219f15         db  0x00 ; '.'
0000000000219f16         db  0x00 ; '.'
0000000000219f17         db  0x00 ; '.'
0000000000219f18         db  0x00 ; '.'
0000000000219f19         db  0x00 ; '.'
0000000000219f1a         db  0x00 ; '.'
0000000000219f1b         db  0x00 ; '.'
0000000000219f1c         db  0x00 ; '.'
0000000000219f1d         db  0x00 ; '.'
0000000000219f1e         db  0x00 ; '.'
0000000000219f1f         db  0x00 ; '.'
0000000000219f20         db  0x00 ; '.'
0000000000219f21         db  0x00 ; '.'
0000000000219f22         db  0x00 ; '.'
0000000000219f23         db  0x00 ; '.'
0000000000219f24         db  0x00 ; '.'
0000000000219f25         db  0x00 ; '.'
0000000000219f26         db  0x00 ; '.'
0000000000219f27         db  0x00 ; '.'
0000000000219f28         db  0x00 ; '.'
0000000000219f29         db  0x00 ; '.'
0000000000219f2a         db  0x00 ; '.'
0000000000219f2b         db  0x00 ; '.'
0000000000219f2c         db  0x00 ; '.'
0000000000219f2d         db  0x00 ; '.'
0000000000219f2e         db  0x00 ; '.'
0000000000219f2f         db  0x00 ; '.'
0000000000219f30         db  0x00 ; '.'
0000000000219f31         db  0x00 ; '.'
0000000000219f32         db  0x00 ; '.'
0000000000219f33         db  0x00 ; '.'
0000000000219f34         db  0x00 ; '.'
0000000000219f35         db  0x00 ; '.'
0000000000219f36         db  0x00 ; '.'
0000000000219f37         db  0x00 ; '.'
0000000000219f38         db  0x00 ; '.'
0000000000219f39         db  0x00 ; '.'
0000000000219f3a         db  0x00 ; '.'
0000000000219f3b         db  0x00 ; '.'
0000000000219f3c         db  0x00 ; '.'
0000000000219f3d         db  0x00 ; '.'
0000000000219f3e         db  0x00 ; '.'
0000000000219f3f         db  0x00 ; '.'
0000000000219f40         db  0x00 ; '.'
0000000000219f41         db  0x00 ; '.'
0000000000219f42         db  0x00 ; '.'
0000000000219f43         db  0x00 ; '.'
0000000000219f44         db  0x00 ; '.'
0000000000219f45         db  0x00 ; '.'
0000000000219f46         db  0x00 ; '.'
0000000000219f47         db  0x00 ; '.'
0000000000219f48         db  0x00 ; '.'
0000000000219f49         db  0x00 ; '.'
0000000000219f4a         db  0x00 ; '.'
0000000000219f4b         db  0x00 ; '.'
0000000000219f4c         db  0x00 ; '.'
0000000000219f4d         db  0x00 ; '.'
0000000000219f4e         db  0x00 ; '.'
0000000000219f4f         db  0x00 ; '.'
0000000000219f50         db  0x00 ; '.'
0000000000219f51         db  0x00 ; '.'
0000000000219f52         db  0x00 ; '.'
0000000000219f53         db  0x00 ; '.'
0000000000219f54         db  0x00 ; '.'
0000000000219f55         db  0x00 ; '.'
0000000000219f56         db  0x00 ; '.'
0000000000219f57         db  0x00 ; '.'
0000000000219f58         db  0x00 ; '.'
0000000000219f59         db  0x00 ; '.'
0000000000219f5a         db  0x00 ; '.'
0000000000219f5b         db  0x00 ; '.'
0000000000219f5c         db  0x00 ; '.'
0000000000219f5d         db  0x00 ; '.'
0000000000219f5e         db  0x00 ; '.'
0000000000219f5f         db  0x00 ; '.'
0000000000219f60         db  0x00 ; '.'
0000000000219f61         db  0x00 ; '.'
0000000000219f62         db  0x00 ; '.'
0000000000219f63         db  0x00 ; '.'
0000000000219f64         db  0x00 ; '.'
0000000000219f65         db  0x00 ; '.'
0000000000219f66         db  0x00 ; '.'
0000000000219f67         db  0x00 ; '.'
0000000000219f68         db  0x00 ; '.'
0000000000219f69         db  0x00 ; '.'
0000000000219f6a         db  0x00 ; '.'
0000000000219f6b         db  0x00 ; '.'
0000000000219f6c         db  0x00 ; '.'
0000000000219f6d         db  0x00 ; '.'
0000000000219f6e         db  0x00 ; '.'
0000000000219f6f         db  0x00 ; '.'
0000000000219f70         db  0x00 ; '.'
0000000000219f71         db  0x00 ; '.'
0000000000219f72         db  0x00 ; '.'
0000000000219f73         db  0x00 ; '.'
0000000000219f74         db  0x00 ; '.'
0000000000219f75         db  0x00 ; '.'
0000000000219f76         db  0x00 ; '.'
0000000000219f77         db  0x00 ; '.'
0000000000219f78         db  0x00 ; '.'
0000000000219f79         db  0x00 ; '.'
0000000000219f7a         db  0x00 ; '.'
0000000000219f7b         db  0x00 ; '.'
0000000000219f7c         db  0x00 ; '.'
0000000000219f7d         db  0x00 ; '.'
0000000000219f7e         db  0x00 ; '.'
0000000000219f7f         db  0x00 ; '.'
0000000000219f80         db  0x00 ; '.'
0000000000219f81         db  0x00 ; '.'
0000000000219f82         db  0x00 ; '.'
0000000000219f83         db  0x00 ; '.'
0000000000219f84         db  0x00 ; '.'
0000000000219f85         db  0x00 ; '.'
0000000000219f86         db  0x00 ; '.'
0000000000219f87         db  0x00 ; '.'
0000000000219f88         db  0x00 ; '.'
0000000000219f89         db  0x00 ; '.'
0000000000219f8a         db  0x00 ; '.'
0000000000219f8b         db  0x00 ; '.'
0000000000219f8c         db  0x00 ; '.'
0000000000219f8d         db  0x00 ; '.'
0000000000219f8e         db  0x00 ; '.'
0000000000219f8f         db  0x00 ; '.'
0000000000219f90         db  0x00 ; '.'
0000000000219f91         db  0x00 ; '.'
0000000000219f92         db  0x00 ; '.'
0000000000219f93         db  0x00 ; '.'
0000000000219f94         db  0x00 ; '.'
0000000000219f95         db  0x00 ; '.'
0000000000219f96         db  0x00 ; '.'
0000000000219f97         db  0x00 ; '.'
0000000000219f98         db  0x00 ; '.'
0000000000219f99         db  0x00 ; '.'
0000000000219f9a         db  0x00 ; '.'
0000000000219f9b         db  0x00 ; '.'
0000000000219f9c         db  0x00 ; '.'
0000000000219f9d         db  0x00 ; '.'
0000000000219f9e         db  0x00 ; '.'
0000000000219f9f         db  0x00 ; '.'
0000000000219fa0         db  0x00 ; '.'
0000000000219fa1         db  0x00 ; '.'
0000000000219fa2         db  0x00 ; '.'
0000000000219fa3         db  0x00 ; '.'
0000000000219fa4         db  0x00 ; '.'
0000000000219fa5         db  0x00 ; '.'
0000000000219fa6         db  0x00 ; '.'
0000000000219fa7         db  0x00 ; '.'
0000000000219fa8         db  0x00 ; '.'
0000000000219fa9         db  0x00 ; '.'
0000000000219faa         db  0x00 ; '.'
0000000000219fab         db  0x00 ; '.'
0000000000219fac         db  0x00 ; '.'
0000000000219fad         db  0x00 ; '.'
0000000000219fae         db  0x00 ; '.'
0000000000219faf         db  0x00 ; '.'
0000000000219fb0         db  0x00 ; '.'
0000000000219fb1         db  0x00 ; '.'
0000000000219fb2         db  0x00 ; '.'
0000000000219fb3         db  0x00 ; '.'
0000000000219fb4         db  0x00 ; '.'
0000000000219fb5         db  0x00 ; '.'
0000000000219fb6         db  0x00 ; '.'
0000000000219fb7         db  0x00 ; '.'
0000000000219fb8         db  0x00 ; '.'
0000000000219fb9         db  0x00 ; '.'
0000000000219fba         db  0x00 ; '.'
0000000000219fbb         db  0x00 ; '.'
0000000000219fbc         db  0x00 ; '.'
0000000000219fbd         db  0x00 ; '.'
0000000000219fbe         db  0x00 ; '.'
0000000000219fbf         db  0x00 ; '.'
0000000000219fc0         db  0x00 ; '.'
0000000000219fc1         db  0x00 ; '.'
0000000000219fc2         db  0x00 ; '.'
0000000000219fc3         db  0x00 ; '.'
0000000000219fc4         db  0x00 ; '.'
0000000000219fc5         db  0x00 ; '.'
0000000000219fc6         db  0x00 ; '.'
0000000000219fc7         db  0x00 ; '.'
0000000000219fc8         db  0x00 ; '.'
0000000000219fc9         db  0x00 ; '.'
0000000000219fca         db  0x00 ; '.'
0000000000219fcb         db  0x00 ; '.'
0000000000219fcc         db  0x00 ; '.'
0000000000219fcd         db  0x00 ; '.'
0000000000219fce         db  0x00 ; '.'
0000000000219fcf         db  0x00 ; '.'
0000000000219fd0         db  0x00 ; '.'
0000000000219fd1         db  0x00 ; '.'
0000000000219fd2         db  0x00 ; '.'
0000000000219fd3         db  0x00 ; '.'
0000000000219fd4         db  0x00 ; '.'
0000000000219fd5         db  0x00 ; '.'
0000000000219fd6         db  0x00 ; '.'
0000000000219fd7         db  0x00 ; '.'
0000000000219fd8         db  0x00 ; '.'
0000000000219fd9         db  0x00 ; '.'
0000000000219fda         db  0x00 ; '.'
0000000000219fdb         db  0x00 ; '.'
0000000000219fdc         db  0x00 ; '.'
0000000000219fdd         db  0x00 ; '.'
0000000000219fde         db  0x00 ; '.'
0000000000219fdf         db  0x00 ; '.'
0000000000219fe0         db  0x00 ; '.'
0000000000219fe1         db  0x00 ; '.'
0000000000219fe2         db  0x00 ; '.'
0000000000219fe3         db  0x00 ; '.'
0000000000219fe4         db  0x00 ; '.'
0000000000219fe5         db  0x00 ; '.'
0000000000219fe6         db  0x00 ; '.'
0000000000219fe7         db  0x00 ; '.'
0000000000219fe8         db  0x00 ; '.'
0000000000219fe9         db  0x00 ; '.'
0000000000219fea         db  0x00 ; '.'
0000000000219feb         db  0x00 ; '.'
0000000000219fec         db  0x00 ; '.'
0000000000219fed         db  0x00 ; '.'
0000000000219fee         db  0x00 ; '.'
0000000000219fef         db  0x00 ; '.'
0000000000219ff0         db  0x00 ; '.'
0000000000219ff1         db  0x00 ; '.'
0000000000219ff2         db  0x00 ; '.'
0000000000219ff3         db  0x00 ; '.'
0000000000219ff4         db  0x00 ; '.'
0000000000219ff5         db  0x00 ; '.'
0000000000219ff6         db  0x00 ; '.'
0000000000219ff7         db  0x00 ; '.'
0000000000219ff8         db  0x00 ; '.'
0000000000219ff9         db  0x00 ; '.'
0000000000219ffa         db  0x00 ; '.'
0000000000219ffb         db  0x00 ; '.'
0000000000219ffc         db  0x00 ; '.'
0000000000219ffd         db  0x00 ; '.'
0000000000219ffe         db  0x00 ; '.'
0000000000219fff         db  0x00 ; '.'
000000000021a000         db  0x00 ; '.'
000000000021a001         db  0x00 ; '.'
000000000021a002         db  0x00 ; '.'
000000000021a003         db  0x00 ; '.'
000000000021a004         db  0x00 ; '.'
000000000021a005         db  0x00 ; '.'
000000000021a006         db  0x00 ; '.'
000000000021a007         db  0x00 ; '.'
000000000021a008         db  0x00 ; '.'
000000000021a009         db  0x00 ; '.'
000000000021a00a         db  0x00 ; '.'
000000000021a00b         db  0x00 ; '.'
000000000021a00c         db  0x00 ; '.'
000000000021a00d         db  0x00 ; '.'
000000000021a00e         db  0x00 ; '.'
000000000021a00f         db  0x00 ; '.'
000000000021a010         db  0x00 ; '.'
000000000021a011         db  0x00 ; '.'
000000000021a012         db  0x00 ; '.'
000000000021a013         db  0x00 ; '.'
000000000021a014         db  0x00 ; '.'
000000000021a015         db  0x00 ; '.'
000000000021a016         db  0x00 ; '.'
000000000021a017         db  0x00 ; '.'
000000000021a018         db  0x00 ; '.'
000000000021a019         db  0x00 ; '.'
000000000021a01a         db  0x00 ; '.'
000000000021a01b         db  0x00 ; '.'
000000000021a01c         db  0x00 ; '.'
000000000021a01d         db  0x00 ; '.'
000000000021a01e         db  0x00 ; '.'
000000000021a01f         db  0x00 ; '.'
000000000021a020         db  0x00 ; '.'
000000000021a021         db  0x00 ; '.'
000000000021a022         db  0x00 ; '.'
000000000021a023         db  0x00 ; '.'
000000000021a024         db  0x00 ; '.'
000000000021a025         db  0x00 ; '.'
000000000021a026         db  0x00 ; '.'
000000000021a027         db  0x00 ; '.'
000000000021a028         db  0x00 ; '.'
000000000021a029         db  0x00 ; '.'
000000000021a02a         db  0x00 ; '.'
000000000021a02b         db  0x00 ; '.'
000000000021a02c         db  0x00 ; '.'
000000000021a02d         db  0x00 ; '.'
000000000021a02e         db  0x00 ; '.'
000000000021a02f         db  0x00 ; '.'
000000000021a030         db  0x00 ; '.'
000000000021a031         db  0x00 ; '.'
000000000021a032         db  0x00 ; '.'
000000000021a033         db  0x00 ; '.'
000000000021a034         db  0x00 ; '.'
000000000021a035         db  0x00 ; '.'
000000000021a036         db  0x00 ; '.'
000000000021a037         db  0x00 ; '.'
000000000021a038         db  0x00 ; '.'
000000000021a039         db  0x00 ; '.'
000000000021a03a         db  0x00 ; '.'
000000000021a03b         db  0x00 ; '.'
000000000021a03c         db  0x00 ; '.'
000000000021a03d         db  0x00 ; '.'
000000000021a03e         db  0x00 ; '.'
000000000021a03f         db  0x00 ; '.'
000000000021a040         db  0x00 ; '.'
000000000021a041         db  0x00 ; '.'
000000000021a042         db  0x00 ; '.'
000000000021a043         db  0x00 ; '.'
000000000021a044         db  0x00 ; '.'
000000000021a045         db  0x00 ; '.'
000000000021a046         db  0x00 ; '.'
000000000021a047         db  0x00 ; '.'
000000000021a048         db  0x00 ; '.'
000000000021a049         db  0x00 ; '.'
000000000021a04a         db  0x00 ; '.'
000000000021a04b         db  0x00 ; '.'
000000000021a04c         db  0x00 ; '.'
000000000021a04d         db  0x00 ; '.'
000000000021a04e         db  0x00 ; '.'
000000000021a04f         db  0x00 ; '.'
000000000021a050         db  0x00 ; '.'
000000000021a051         db  0x00 ; '.'
000000000021a052         db  0x00 ; '.'
000000000021a053         db  0x00 ; '.'
000000000021a054         db  0x00 ; '.'
000000000021a055         db  0x00 ; '.'
000000000021a056         db  0x00 ; '.'
000000000021a057         db  0x00 ; '.'
000000000021a058         db  0x00 ; '.'
000000000021a059         db  0x00 ; '.'
000000000021a05a         db  0x00 ; '.'
000000000021a05b         db  0x00 ; '.'
000000000021a05c         db  0x00 ; '.'
000000000021a05d         db  0x00 ; '.'
000000000021a05e         db  0x00 ; '.'
000000000021a05f         db  0x00 ; '.'
000000000021a060         db  0x00 ; '.'
000000000021a061         db  0x00 ; '.'
000000000021a062         db  0x00 ; '.'
000000000021a063         db  0x00 ; '.'
000000000021a064         db  0x00 ; '.'
000000000021a065         db  0x00 ; '.'
000000000021a066         db  0x00 ; '.'
000000000021a067         db  0x00 ; '.'
000000000021a068         db  0x00 ; '.'
000000000021a069         db  0x00 ; '.'
000000000021a06a         db  0x00 ; '.'
000000000021a06b         db  0x00 ; '.'
000000000021a06c         db  0x00 ; '.'
000000000021a06d         db  0x00 ; '.'
000000000021a06e         db  0x00 ; '.'
000000000021a06f         db  0x00 ; '.'
000000000021a070         db  0x00 ; '.'
000000000021a071         db  0x00 ; '.'
000000000021a072         db  0x00 ; '.'
000000000021a073         db  0x00 ; '.'
000000000021a074         db  0x00 ; '.'
000000000021a075         db  0x00 ; '.'
000000000021a076         db  0x00 ; '.'
000000000021a077         db  0x00 ; '.'
000000000021a078         db  0x00 ; '.'
000000000021a079         db  0x00 ; '.'
000000000021a07a         db  0x00 ; '.'
000000000021a07b         db  0x00 ; '.'
000000000021a07c         db  0x00 ; '.'
000000000021a07d         db  0x00 ; '.'
000000000021a07e         db  0x00 ; '.'
000000000021a07f         db  0x00 ; '.'
000000000021a080         db  0x00 ; '.'
000000000021a081         db  0x00 ; '.'
000000000021a082         db  0x00 ; '.'
000000000021a083         db  0x00 ; '.'
000000000021a084         db  0x00 ; '.'
000000000021a085         db  0x00 ; '.'
000000000021a086         db  0x00 ; '.'
000000000021a087         db  0x00 ; '.'
000000000021a088         db  0x00 ; '.'
000000000021a089         db  0x00 ; '.'
000000000021a08a         db  0x00 ; '.'
000000000021a08b         db  0x00 ; '.'
000000000021a08c         db  0x00 ; '.'
000000000021a08d         db  0x00 ; '.'
000000000021a08e         db  0x00 ; '.'
000000000021a08f         db  0x00 ; '.'
000000000021a090         db  0x00 ; '.'
000000000021a091         db  0x00 ; '.'
000000000021a092         db  0x00 ; '.'
000000000021a093         db  0x00 ; '.'
000000000021a094         db  0x00 ; '.'
000000000021a095         db  0x00 ; '.'
000000000021a096         db  0x00 ; '.'
000000000021a097         db  0x00 ; '.'
000000000021a098         db  0x00 ; '.'
000000000021a099         db  0x00 ; '.'
000000000021a09a         db  0x00 ; '.'
000000000021a09b         db  0x00 ; '.'
000000000021a09c         db  0x00 ; '.'
000000000021a09d         db  0x00 ; '.'
000000000021a09e         db  0x00 ; '.'
000000000021a09f         db  0x00 ; '.'
000000000021a0a0         db  0x00 ; '.'
000000000021a0a1         db  0x00 ; '.'
000000000021a0a2         db  0x00 ; '.'
000000000021a0a3         db  0x00 ; '.'
000000000021a0a4         db  0x00 ; '.'
000000000021a0a5         db  0x00 ; '.'
000000000021a0a6         db  0x00 ; '.'
000000000021a0a7         db  0x00 ; '.'
000000000021a0a8         db  0x00 ; '.'
000000000021a0a9         db  0x00 ; '.'
000000000021a0aa         db  0x00 ; '.'
000000000021a0ab         db  0x00 ; '.'
000000000021a0ac         db  0x00 ; '.'
000000000021a0ad         db  0x00 ; '.'
000000000021a0ae         db  0x00 ; '.'
000000000021a0af         db  0x00 ; '.'
000000000021a0b0         db  0x00 ; '.'
000000000021a0b1         db  0x00 ; '.'
000000000021a0b2         db  0x00 ; '.'
000000000021a0b3         db  0x00 ; '.'
000000000021a0b4         db  0x00 ; '.'
000000000021a0b5         db  0x00 ; '.'
000000000021a0b6         db  0x00 ; '.'
000000000021a0b7         db  0x00 ; '.'
000000000021a0b8         db  0x00 ; '.'
000000000021a0b9         db  0x00 ; '.'
000000000021a0ba         db  0x00 ; '.'
000000000021a0bb         db  0x00 ; '.'
000000000021a0bc         db  0x00 ; '.'
000000000021a0bd         db  0x00 ; '.'
000000000021a0be         db  0x00 ; '.'
000000000021a0bf         db  0x00 ; '.'
000000000021a0c0         db  0x00 ; '.'
000000000021a0c1         db  0x00 ; '.'
000000000021a0c2         db  0x00 ; '.'
000000000021a0c3         db  0x00 ; '.'
000000000021a0c4         db  0x00 ; '.'
000000000021a0c5         db  0x00 ; '.'
000000000021a0c6         db  0x00 ; '.'
000000000021a0c7         db  0x00 ; '.'
000000000021a0c8         db  0x00 ; '.'
000000000021a0c9         db  0x00 ; '.'
000000000021a0ca         db  0x00 ; '.'
000000000021a0cb         db  0x00 ; '.'
000000000021a0cc         db  0x00 ; '.'
000000000021a0cd         db  0x00 ; '.'
000000000021a0ce         db  0x00 ; '.'
000000000021a0cf         db  0x00 ; '.'
000000000021a0d0         db  0x00 ; '.'
000000000021a0d1         db  0x00 ; '.'
000000000021a0d2         db  0x00 ; '.'
000000000021a0d3         db  0x00 ; '.'
000000000021a0d4         db  0x00 ; '.'
000000000021a0d5         db  0x00 ; '.'
000000000021a0d6         db  0x00 ; '.'
000000000021a0d7         db  0x00 ; '.'
000000000021a0d8         db  0x00 ; '.'
000000000021a0d9         db  0x00 ; '.'
000000000021a0da         db  0x00 ; '.'
000000000021a0db         db  0x00 ; '.'
000000000021a0dc         db  0x00 ; '.'
000000000021a0dd         db  0x00 ; '.'
000000000021a0de         db  0x00 ; '.'
000000000021a0df         db  0x00 ; '.'
000000000021a0e0         db  0x00 ; '.'
000000000021a0e1         db  0x00 ; '.'
000000000021a0e2         db  0x00 ; '.'
000000000021a0e3         db  0x00 ; '.'
000000000021a0e4         db  0x00 ; '.'
000000000021a0e5         db  0x00 ; '.'
000000000021a0e6         db  0x00 ; '.'
000000000021a0e7         db  0x00 ; '.'
000000000021a0e8         db  0x00 ; '.'
000000000021a0e9         db  0x00 ; '.'
000000000021a0ea         db  0x00 ; '.'
000000000021a0eb         db  0x00 ; '.'
000000000021a0ec         db  0x00 ; '.'
000000000021a0ed         db  0x00 ; '.'
000000000021a0ee         db  0x00 ; '.'
000000000021a0ef         db  0x00 ; '.'
000000000021a0f0         db  0x00 ; '.'
000000000021a0f1         db  0x00 ; '.'
000000000021a0f2         db  0x00 ; '.'
000000000021a0f3         db  0x00 ; '.'
000000000021a0f4         db  0x00 ; '.'
000000000021a0f5         db  0x00 ; '.'
000000000021a0f6         db  0x00 ; '.'
000000000021a0f7         db  0x00 ; '.'
000000000021a0f8         db  0x00 ; '.'
000000000021a0f9         db  0x00 ; '.'
000000000021a0fa         db  0x00 ; '.'
000000000021a0fb         db  0x00 ; '.'
000000000021a0fc         db  0x00 ; '.'
000000000021a0fd         db  0x00 ; '.'
000000000021a0fe         db  0x00 ; '.'
000000000021a0ff         db  0x00 ; '.'
000000000021a100         db  0x00 ; '.'
000000000021a101         db  0x00 ; '.'
000000000021a102         db  0x00 ; '.'
000000000021a103         db  0x00 ; '.'
000000000021a104         db  0x00 ; '.'
000000000021a105         db  0x00 ; '.'
000000000021a106         db  0x00 ; '.'
000000000021a107         db  0x00 ; '.'
000000000021a108         db  0x00 ; '.'
000000000021a109         db  0x00 ; '.'
000000000021a10a         db  0x00 ; '.'
000000000021a10b         db  0x00 ; '.'
000000000021a10c         db  0x00 ; '.'
000000000021a10d         db  0x00 ; '.'
000000000021a10e         db  0x00 ; '.'
000000000021a10f         db  0x00 ; '.'
000000000021a110         db  0x00 ; '.'
000000000021a111         db  0x00 ; '.'
000000000021a112         db  0x00 ; '.'
000000000021a113         db  0x00 ; '.'
000000000021a114         db  0x00 ; '.'
000000000021a115         db  0x00 ; '.'
000000000021a116         db  0x00 ; '.'
000000000021a117         db  0x00 ; '.'
000000000021a118         db  0x00 ; '.'
000000000021a119         db  0x00 ; '.'
000000000021a11a         db  0x00 ; '.'
000000000021a11b         db  0x00 ; '.'
000000000021a11c         db  0x00 ; '.'
000000000021a11d         db  0x00 ; '.'
000000000021a11e         db  0x00 ; '.'
000000000021a11f         db  0x00 ; '.'
000000000021a120         db  0x00 ; '.'
000000000021a121         db  0x00 ; '.'
000000000021a122         db  0x00 ; '.'
000000000021a123         db  0x00 ; '.'
000000000021a124         db  0x00 ; '.'
000000000021a125         db  0x00 ; '.'
000000000021a126         db  0x00 ; '.'
000000000021a127         db  0x00 ; '.'
000000000021a128         db  0x00 ; '.'
000000000021a129         db  0x00 ; '.'
000000000021a12a         db  0x00 ; '.'
000000000021a12b         db  0x00 ; '.'
000000000021a12c         db  0x00 ; '.'
000000000021a12d         db  0x00 ; '.'
000000000021a12e         db  0x00 ; '.'
000000000021a12f         db  0x00 ; '.'
000000000021a130         db  0x00 ; '.'
000000000021a131         db  0x00 ; '.'
000000000021a132         db  0x00 ; '.'
000000000021a133         db  0x00 ; '.'
000000000021a134         db  0x00 ; '.'
000000000021a135         db  0x00 ; '.'
000000000021a136         db  0x00 ; '.'
000000000021a137         db  0x00 ; '.'
000000000021a138         db  0x00 ; '.'
000000000021a139         db  0x00 ; '.'
000000000021a13a         db  0x00 ; '.'
000000000021a13b         db  0x00 ; '.'
000000000021a13c         db  0x00 ; '.'
000000000021a13d         db  0x00 ; '.'
000000000021a13e         db  0x00 ; '.'
000000000021a13f         db  0x00 ; '.'
000000000021a140         db  0x00 ; '.'
000000000021a141         db  0x00 ; '.'
000000000021a142         db  0x00 ; '.'
000000000021a143         db  0x00 ; '.'
000000000021a144         db  0x00 ; '.'
000000000021a145         db  0x00 ; '.'
000000000021a146         db  0x00 ; '.'
000000000021a147         db  0x00 ; '.'
000000000021a148         db  0x00 ; '.'
000000000021a149         db  0x00 ; '.'
000000000021a14a         db  0x00 ; '.'
000000000021a14b         db  0x00 ; '.'
000000000021a14c         db  0x00 ; '.'
000000000021a14d         db  0x00 ; '.'
000000000021a14e         db  0x00 ; '.'
000000000021a14f         db  0x00 ; '.'
000000000021a150         db  0x00 ; '.'
000000000021a151         db  0x00 ; '.'
000000000021a152         db  0x00 ; '.'
000000000021a153         db  0x00 ; '.'
000000000021a154         db  0x00 ; '.'
000000000021a155         db  0x00 ; '.'
000000000021a156         db  0x00 ; '.'
000000000021a157         db  0x00 ; '.'
000000000021a158         db  0x00 ; '.'
000000000021a159         db  0x00 ; '.'
000000000021a15a         db  0x00 ; '.'
000000000021a15b         db  0x00 ; '.'
000000000021a15c         db  0x00 ; '.'
000000000021a15d         db  0x00 ; '.'
000000000021a15e         db  0x00 ; '.'
000000000021a15f         db  0x00 ; '.'
000000000021a160         db  0x00 ; '.'
000000000021a161         db  0x00 ; '.'
000000000021a162         db  0x00 ; '.'
000000000021a163         db  0x00 ; '.'
000000000021a164         db  0x00 ; '.'
000000000021a165         db  0x00 ; '.'
000000000021a166         db  0x00 ; '.'
000000000021a167         db  0x00 ; '.'
000000000021a168         db  0x00 ; '.'
000000000021a169         db  0x00 ; '.'
000000000021a16a         db  0x00 ; '.'
000000000021a16b         db  0x00 ; '.'
000000000021a16c         db  0x00 ; '.'
000000000021a16d         db  0x00 ; '.'
000000000021a16e         db  0x00 ; '.'
000000000021a16f         db  0x00 ; '.'
000000000021a170         db  0x00 ; '.'
000000000021a171         db  0x00 ; '.'
000000000021a172         db  0x00 ; '.'
000000000021a173         db  0x00 ; '.'
000000000021a174         db  0x00 ; '.'
000000000021a175         db  0x00 ; '.'
000000000021a176         db  0x00 ; '.'
000000000021a177         db  0x00 ; '.'
000000000021a178         db  0x00 ; '.'
000000000021a179         db  0x00 ; '.'
000000000021a17a         db  0x00 ; '.'
000000000021a17b         db  0x00 ; '.'
000000000021a17c         db  0x00 ; '.'
000000000021a17d         db  0x00 ; '.'
000000000021a17e         db  0x00 ; '.'
000000000021a17f         db  0x00 ; '.'
000000000021a180         db  0x00 ; '.'
000000000021a181         db  0x00 ; '.'
000000000021a182         db  0x00 ; '.'
000000000021a183         db  0x00 ; '.'
000000000021a184         db  0x00 ; '.'
000000000021a185         db  0x00 ; '.'
000000000021a186         db  0x00 ; '.'
000000000021a187         db  0x00 ; '.'
000000000021a188         db  0x00 ; '.'
000000000021a189         db  0x00 ; '.'
000000000021a18a         db  0x00 ; '.'
000000000021a18b         db  0x00 ; '.'
000000000021a18c         db  0x00 ; '.'
000000000021a18d         db  0x00 ; '.'
000000000021a18e         db  0x00 ; '.'
000000000021a18f         db  0x00 ; '.'
000000000021a190         db  0x00 ; '.'
000000000021a191         db  0x00 ; '.'
000000000021a192         db  0x00 ; '.'
000000000021a193         db  0x00 ; '.'
000000000021a194         db  0x00 ; '.'
000000000021a195         db  0x00 ; '.'
000000000021a196         db  0x00 ; '.'
000000000021a197         db  0x00 ; '.'
000000000021a198         db  0x00 ; '.'
000000000021a199         db  0x00 ; '.'
000000000021a19a         db  0x00 ; '.'
000000000021a19b         db  0x00 ; '.'
000000000021a19c         db  0x00 ; '.'
000000000021a19d         db  0x00 ; '.'
000000000021a19e         db  0x00 ; '.'
000000000021a19f         db  0x00 ; '.'
000000000021a1a0         db  0x00 ; '.'
000000000021a1a1         db  0x00 ; '.'
000000000021a1a2         db  0x00 ; '.'
000000000021a1a3         db  0x00 ; '.'
000000000021a1a4         db  0x00 ; '.'
000000000021a1a5         db  0x00 ; '.'
000000000021a1a6         db  0x00 ; '.'
000000000021a1a7         db  0x00 ; '.'
000000000021a1a8         db  0x00 ; '.'
000000000021a1a9         db  0x00 ; '.'
000000000021a1aa         db  0x00 ; '.'
000000000021a1ab         db  0x00 ; '.'
000000000021a1ac         db  0x00 ; '.'
000000000021a1ad         db  0x00 ; '.'
000000000021a1ae         db  0x00 ; '.'
000000000021a1af         db  0x00 ; '.'
000000000021a1b0         db  0x00 ; '.'
000000000021a1b1         db  0x00 ; '.'
000000000021a1b2         db  0x00 ; '.'
000000000021a1b3         db  0x00 ; '.'
000000000021a1b4         db  0x00 ; '.'
000000000021a1b5         db  0x00 ; '.'
000000000021a1b6         db  0x00 ; '.'
000000000021a1b7         db  0x00 ; '.'
000000000021a1b8         db  0x00 ; '.'
000000000021a1b9         db  0x00 ; '.'
000000000021a1ba         db  0x00 ; '.'
000000000021a1bb         db  0x00 ; '.'
000000000021a1bc         db  0x00 ; '.'
000000000021a1bd         db  0x00 ; '.'
000000000021a1be         db  0x00 ; '.'
000000000021a1bf         db  0x00 ; '.'
000000000021a1c0         db  0x00 ; '.'
000000000021a1c1         db  0x00 ; '.'
000000000021a1c2         db  0x00 ; '.'
000000000021a1c3         db  0x00 ; '.'
000000000021a1c4         db  0x00 ; '.'
000000000021a1c5         db  0x00 ; '.'
000000000021a1c6         db  0x00 ; '.'
000000000021a1c7         db  0x00 ; '.'
000000000021a1c8         db  0x00 ; '.'
000000000021a1c9         db  0x00 ; '.'
000000000021a1ca         db  0x00 ; '.'
000000000021a1cb         db  0x00 ; '.'
000000000021a1cc         db  0x00 ; '.'
000000000021a1cd         db  0x00 ; '.'
000000000021a1ce         db  0x00 ; '.'
000000000021a1cf         db  0x00 ; '.'
000000000021a1d0         db  0x00 ; '.'
000000000021a1d1         db  0x00 ; '.'
000000000021a1d2         db  0x00 ; '.'
000000000021a1d3         db  0x00 ; '.'
000000000021a1d4         db  0x00 ; '.'
000000000021a1d5         db  0x00 ; '.'
000000000021a1d6         db  0x00 ; '.'
000000000021a1d7         db  0x00 ; '.'
000000000021a1d8         db  0x00 ; '.'
000000000021a1d9         db  0x00 ; '.'
000000000021a1da         db  0x00 ; '.'
000000000021a1db         db  0x00 ; '.'
000000000021a1dc         db  0x00 ; '.'
000000000021a1dd         db  0x00 ; '.'
000000000021a1de         db  0x00 ; '.'
000000000021a1df         db  0x00 ; '.'
000000000021a1e0         db  0x00 ; '.'
000000000021a1e1         db  0x00 ; '.'
000000000021a1e2         db  0x00 ; '.'
000000000021a1e3         db  0x00 ; '.'
000000000021a1e4         db  0x00 ; '.'
000000000021a1e5         db  0x00 ; '.'
000000000021a1e6         db  0x00 ; '.'
000000000021a1e7         db  0x00 ; '.'
000000000021a1e8         db  0x00 ; '.'
000000000021a1e9         db  0x00 ; '.'
000000000021a1ea         db  0x00 ; '.'
000000000021a1eb         db  0x00 ; '.'
000000000021a1ec         db  0x00 ; '.'
000000000021a1ed         db  0x00 ; '.'
000000000021a1ee         db  0x00 ; '.'
000000000021a1ef         db  0x00 ; '.'
000000000021a1f0         db  0x00 ; '.'
000000000021a1f1         db  0x00 ; '.'
000000000021a1f2         db  0x00 ; '.'
000000000021a1f3         db  0x00 ; '.'
000000000021a1f4         db  0x00 ; '.'
000000000021a1f5         db  0x00 ; '.'
000000000021a1f6         db  0x00 ; '.'
000000000021a1f7         db  0x00 ; '.'
000000000021a1f8         db  0x00 ; '.'
000000000021a1f9         db  0x00 ; '.'
000000000021a1fa         db  0x00 ; '.'
000000000021a1fb         db  0x00 ; '.'
000000000021a1fc         db  0x00 ; '.'
000000000021a1fd         db  0x00 ; '.'
000000000021a1fe         db  0x00 ; '.'
000000000021a1ff         db  0x00 ; '.'
000000000021a200         db  0x00 ; '.'
000000000021a201         db  0x00 ; '.'
000000000021a202         db  0x00 ; '.'
000000000021a203         db  0x00 ; '.'
000000000021a204         db  0x00 ; '.'
000000000021a205         db  0x00 ; '.'
000000000021a206         db  0x00 ; '.'
000000000021a207         db  0x00 ; '.'
000000000021a208         db  0x00 ; '.'
000000000021a209         db  0x00 ; '.'
000000000021a20a         db  0x00 ; '.'
000000000021a20b         db  0x00 ; '.'
000000000021a20c         db  0x00 ; '.'
000000000021a20d         db  0x00 ; '.'
000000000021a20e         db  0x00 ; '.'
000000000021a20f         db  0x00 ; '.'
000000000021a210         db  0x00 ; '.'
000000000021a211         db  0x00 ; '.'
000000000021a212         db  0x00 ; '.'
000000000021a213         db  0x00 ; '.'
000000000021a214         db  0x00 ; '.'
000000000021a215         db  0x00 ; '.'
000000000021a216         db  0x00 ; '.'
000000000021a217         db  0x00 ; '.'
000000000021a218         db  0x00 ; '.'
000000000021a219         db  0x00 ; '.'
000000000021a21a         db  0x00 ; '.'
000000000021a21b         db  0x00 ; '.'
000000000021a21c         db  0x00 ; '.'
000000000021a21d         db  0x00 ; '.'
000000000021a21e         db  0x00 ; '.'
000000000021a21f         db  0x00 ; '.'
000000000021a220         db  0x00 ; '.'
000000000021a221         db  0x00 ; '.'
000000000021a222         db  0x00 ; '.'
000000000021a223         db  0x00 ; '.'
000000000021a224         db  0x00 ; '.'
000000000021a225         db  0x00 ; '.'
000000000021a226         db  0x00 ; '.'
000000000021a227         db  0x00 ; '.'
000000000021a228         db  0x00 ; '.'
000000000021a229         db  0x00 ; '.'
000000000021a22a         db  0x00 ; '.'
000000000021a22b         db  0x00 ; '.'
000000000021a22c         db  0x00 ; '.'
000000000021a22d         db  0x00 ; '.'
000000000021a22e         db  0x00 ; '.'
000000000021a22f         db  0x00 ; '.'
000000000021a230         db  0x00 ; '.'
000000000021a231         db  0x00 ; '.'
000000000021a232         db  0x00 ; '.'
000000000021a233         db  0x00 ; '.'
000000000021a234         db  0x00 ; '.'
000000000021a235         db  0x00 ; '.'
000000000021a236         db  0x00 ; '.'
000000000021a237         db  0x00 ; '.'
000000000021a238         db  0x00 ; '.'
000000000021a239         db  0x00 ; '.'
000000000021a23a         db  0x00 ; '.'
000000000021a23b         db  0x00 ; '.'
000000000021a23c         db  0x00 ; '.'
000000000021a23d         db  0x00 ; '.'
000000000021a23e         db  0x00 ; '.'
000000000021a23f         db  0x00 ; '.'
000000000021a240         db  0x00 ; '.'
000000000021a241         db  0x00 ; '.'
000000000021a242         db  0x00 ; '.'
000000000021a243         db  0x00 ; '.'
000000000021a244         db  0x00 ; '.'
000000000021a245         db  0x00 ; '.'
000000000021a246         db  0x00 ; '.'
000000000021a247         db  0x00 ; '.'
000000000021a248         db  0x00 ; '.'
000000000021a249         db  0x00 ; '.'
000000000021a24a         db  0x00 ; '.'
000000000021a24b         db  0x00 ; '.'
000000000021a24c         db  0x00 ; '.'
000000000021a24d         db  0x00 ; '.'
000000000021a24e         db  0x00 ; '.'
000000000021a24f         db  0x00 ; '.'
000000000021a250         db  0x00 ; '.'
000000000021a251         db  0x00 ; '.'
000000000021a252         db  0x00 ; '.'
000000000021a253         db  0x00 ; '.'
000000000021a254         db  0x00 ; '.'
000000000021a255         db  0x00 ; '.'
000000000021a256         db  0x00 ; '.'
000000000021a257         db  0x00 ; '.'
000000000021a258         db  0x00 ; '.'
000000000021a259         db  0x00 ; '.'
000000000021a25a         db  0x00 ; '.'
000000000021a25b         db  0x00 ; '.'
000000000021a25c         db  0x00 ; '.'
000000000021a25d         db  0x00 ; '.'
000000000021a25e         db  0x00 ; '.'
000000000021a25f         db  0x00 ; '.'
000000000021a260         db  0x00 ; '.'
000000000021a261         db  0x00 ; '.'
000000000021a262         db  0x00 ; '.'
000000000021a263         db  0x00 ; '.'
000000000021a264         db  0x00 ; '.'
000000000021a265         db  0x00 ; '.'
000000000021a266         db  0x00 ; '.'
000000000021a267         db  0x00 ; '.'
000000000021a268         db  0x00 ; '.'
000000000021a269         db  0x00 ; '.'
000000000021a26a         db  0x00 ; '.'
000000000021a26b         db  0x00 ; '.'
000000000021a26c         db  0x00 ; '.'
000000000021a26d         db  0x00 ; '.'
000000000021a26e         db  0x00 ; '.'
000000000021a26f         db  0x00 ; '.'
000000000021a270         db  0x00 ; '.'
000000000021a271         db  0x00 ; '.'
000000000021a272         db  0x00 ; '.'
000000000021a273         db  0x00 ; '.'
000000000021a274         db  0x00 ; '.'
000000000021a275         db  0x00 ; '.'
000000000021a276         db  0x00 ; '.'
000000000021a277         db  0x00 ; '.'
000000000021a278         db  0x00 ; '.'
000000000021a279         db  0x00 ; '.'
000000000021a27a         db  0x00 ; '.'
000000000021a27b         db  0x00 ; '.'
000000000021a27c         db  0x00 ; '.'
000000000021a27d         db  0x00 ; '.'
000000000021a27e         db  0x00 ; '.'
000000000021a27f         db  0x00 ; '.'
000000000021a280         db  0x00 ; '.'
000000000021a281         db  0x00 ; '.'
000000000021a282         db  0x00 ; '.'
000000000021a283         db  0x00 ; '.'
000000000021a284         db  0x00 ; '.'
000000000021a285         db  0x00 ; '.'
000000000021a286         db  0x00 ; '.'
000000000021a287         db  0x00 ; '.'
000000000021a288         db  0x00 ; '.'
000000000021a289         db  0x00 ; '.'
000000000021a28a         db  0x00 ; '.'
000000000021a28b         db  0x00 ; '.'
000000000021a28c         db  0x00 ; '.'
000000000021a28d         db  0x00 ; '.'
000000000021a28e         db  0x00 ; '.'
000000000021a28f         db  0x00 ; '.'
000000000021a290         db  0x00 ; '.'
000000000021a291         db  0x00 ; '.'
000000000021a292         db  0x00 ; '.'
000000000021a293         db  0x00 ; '.'
000000000021a294         db  0x00 ; '.'
000000000021a295         db  0x00 ; '.'
000000000021a296         db  0x00 ; '.'
000000000021a297         db  0x00 ; '.'
000000000021a298         db  0x00 ; '.'
000000000021a299         db  0x00 ; '.'
000000000021a29a         db  0x00 ; '.'
000000000021a29b         db  0x00 ; '.'
000000000021a29c         db  0x00 ; '.'
000000000021a29d         db  0x00 ; '.'
000000000021a29e         db  0x00 ; '.'
000000000021a29f         db  0x00 ; '.'
000000000021a2a0         db  0x00 ; '.'
000000000021a2a1         db  0x00 ; '.'
000000000021a2a2         db  0x00 ; '.'
000000000021a2a3         db  0x00 ; '.'
000000000021a2a4         db  0x00 ; '.'
000000000021a2a5         db  0x00 ; '.'
000000000021a2a6         db  0x00 ; '.'
000000000021a2a7         db  0x00 ; '.'
000000000021a2a8         db  0x00 ; '.'
000000000021a2a9         db  0x00 ; '.'
000000000021a2aa         db  0x00 ; '.'
000000000021a2ab         db  0x00 ; '.'
000000000021a2ac         db  0x00 ; '.'
000000000021a2ad         db  0x00 ; '.'
000000000021a2ae         db  0x00 ; '.'
000000000021a2af         db  0x00 ; '.'
000000000021a2b0         db  0x00 ; '.'
000000000021a2b1         db  0x00 ; '.'
000000000021a2b2         db  0x00 ; '.'
000000000021a2b3         db  0x00 ; '.'
000000000021a2b4         db  0x00 ; '.'
000000000021a2b5         db  0x00 ; '.'
000000000021a2b6         db  0x00 ; '.'
000000000021a2b7         db  0x00 ; '.'
000000000021a2b8         db  0x00 ; '.'
000000000021a2b9         db  0x00 ; '.'
000000000021a2ba         db  0x00 ; '.'
000000000021a2bb         db  0x00 ; '.'
000000000021a2bc         db  0x00 ; '.'
000000000021a2bd         db  0x00 ; '.'
000000000021a2be         db  0x00 ; '.'
000000000021a2bf         db  0x00 ; '.'
000000000021a2c0         db  0x00 ; '.'
000000000021a2c1         db  0x00 ; '.'
000000000021a2c2         db  0x00 ; '.'
000000000021a2c3         db  0x00 ; '.'
000000000021a2c4         db  0x00 ; '.'
000000000021a2c5         db  0x00 ; '.'
000000000021a2c6         db  0x00 ; '.'
000000000021a2c7         db  0x00 ; '.'
000000000021a2c8         db  0x00 ; '.'
000000000021a2c9         db  0x00 ; '.'
000000000021a2ca         db  0x00 ; '.'
000000000021a2cb         db  0x00 ; '.'
000000000021a2cc         db  0x00 ; '.'
000000000021a2cd         db  0x00 ; '.'
000000000021a2ce         db  0x00 ; '.'
000000000021a2cf         db  0x00 ; '.'
000000000021a2d0         db  0x00 ; '.'
000000000021a2d1         db  0x00 ; '.'
000000000021a2d2         db  0x00 ; '.'
000000000021a2d3         db  0x00 ; '.'
000000000021a2d4         db  0x00 ; '.'
000000000021a2d5         db  0x00 ; '.'
000000000021a2d6         db  0x00 ; '.'
000000000021a2d7         db  0x00 ; '.'
000000000021a2d8         db  0x00 ; '.'
000000000021a2d9         db  0x00 ; '.'
000000000021a2da         db  0x00 ; '.'
000000000021a2db         db  0x00 ; '.'
000000000021a2dc         db  0x00 ; '.'
000000000021a2dd         db  0x00 ; '.'
000000000021a2de         db  0x00 ; '.'
000000000021a2df         db  0x00 ; '.'
000000000021a2e0         db  0x00 ; '.'
000000000021a2e1         db  0x00 ; '.'
000000000021a2e2         db  0x00 ; '.'
000000000021a2e3         db  0x00 ; '.'
000000000021a2e4         db  0x00 ; '.'
000000000021a2e5         db  0x00 ; '.'
000000000021a2e6         db  0x00 ; '.'
000000000021a2e7         db  0x00 ; '.'
000000000021a2e8         db  0x00 ; '.'
000000000021a2e9         db  0x00 ; '.'
000000000021a2ea         db  0x00 ; '.'
000000000021a2eb         db  0x00 ; '.'
000000000021a2ec         db  0x00 ; '.'
000000000021a2ed         db  0x00 ; '.'
000000000021a2ee         db  0x00 ; '.'
000000000021a2ef         db  0x00 ; '.'
000000000021a2f0         db  0x00 ; '.'
000000000021a2f1         db  0x00 ; '.'
000000000021a2f2         db  0x00 ; '.'
000000000021a2f3         db  0x00 ; '.'
000000000021a2f4         db  0x00 ; '.'
000000000021a2f5         db  0x00 ; '.'
000000000021a2f6         db  0x00 ; '.'
000000000021a2f7         db  0x00 ; '.'
000000000021a2f8         db  0x00 ; '.'
000000000021a2f9         db  0x00 ; '.'
000000000021a2fa         db  0x00 ; '.'
000000000021a2fb         db  0x00 ; '.'
000000000021a2fc         db  0x00 ; '.'
000000000021a2fd         db  0x00 ; '.'
000000000021a2fe         db  0x00 ; '.'
000000000021a2ff         db  0x00 ; '.'
000000000021a300         db  0x00 ; '.'
000000000021a301         db  0x00 ; '.'
000000000021a302         db  0x00 ; '.'
000000000021a303         db  0x00 ; '.'
000000000021a304         db  0x00 ; '.'
000000000021a305         db  0x00 ; '.'
000000000021a306         db  0x00 ; '.'
000000000021a307         db  0x00 ; '.'
000000000021a308         db  0x00 ; '.'
000000000021a309         db  0x00 ; '.'
000000000021a30a         db  0x00 ; '.'
000000000021a30b         db  0x00 ; '.'
000000000021a30c         db  0x00 ; '.'
000000000021a30d         db  0x00 ; '.'
000000000021a30e         db  0x00 ; '.'
000000000021a30f         db  0x00 ; '.'
000000000021a310         db  0x00 ; '.'
000000000021a311         db  0x00 ; '.'
000000000021a312         db  0x00 ; '.'
000000000021a313         db  0x00 ; '.'
000000000021a314         db  0x00 ; '.'
000000000021a315         db  0x00 ; '.'
000000000021a316         db  0x00 ; '.'
000000000021a317         db  0x00 ; '.'
000000000021a318         db  0x00 ; '.'
000000000021a319         db  0x00 ; '.'
000000000021a31a         db  0x00 ; '.'
000000000021a31b         db  0x00 ; '.'
000000000021a31c         db  0x00 ; '.'
000000000021a31d         db  0x00 ; '.'
000000000021a31e         db  0x00 ; '.'
000000000021a31f         db  0x00 ; '.'
000000000021a320         db  0x00 ; '.'
000000000021a321         db  0x00 ; '.'
000000000021a322         db  0x00 ; '.'
000000000021a323         db  0x00 ; '.'
000000000021a324         db  0x00 ; '.'
000000000021a325         db  0x00 ; '.'
000000000021a326         db  0x00 ; '.'
000000000021a327         db  0x00 ; '.'
000000000021a328         db  0x00 ; '.'
000000000021a329         db  0x00 ; '.'
000000000021a32a         db  0x00 ; '.'
000000000021a32b         db  0x00 ; '.'
000000000021a32c         db  0x00 ; '.'
000000000021a32d         db  0x00 ; '.'
000000000021a32e         db  0x00 ; '.'
000000000021a32f         db  0x00 ; '.'
000000000021a330         db  0x00 ; '.'
000000000021a331         db  0x00 ; '.'
000000000021a332         db  0x00 ; '.'
000000000021a333         db  0x00 ; '.'
000000000021a334         db  0x00 ; '.'
000000000021a335         db  0x00 ; '.'
000000000021a336         db  0x00 ; '.'
000000000021a337         db  0x00 ; '.'
000000000021a338         db  0x00 ; '.'
000000000021a339         db  0x00 ; '.'
000000000021a33a         db  0x00 ; '.'
000000000021a33b         db  0x00 ; '.'
000000000021a33c         db  0x00 ; '.'
000000000021a33d         db  0x00 ; '.'
000000000021a33e         db  0x00 ; '.'
000000000021a33f         db  0x00 ; '.'
000000000021a340         db  0x00 ; '.'
000000000021a341         db  0x00 ; '.'
000000000021a342         db  0x00 ; '.'
000000000021a343         db  0x00 ; '.'
000000000021a344         db  0x00 ; '.'
000000000021a345         db  0x00 ; '.'
000000000021a346         db  0x00 ; '.'
000000000021a347         db  0x00 ; '.'
000000000021a348         db  0x00 ; '.'
000000000021a349         db  0x00 ; '.'
000000000021a34a         db  0x00 ; '.'
000000000021a34b         db  0x00 ; '.'
000000000021a34c         db  0x00 ; '.'
000000000021a34d         db  0x00 ; '.'
000000000021a34e         db  0x00 ; '.'
000000000021a34f         db  0x00 ; '.'
000000000021a350         db  0x00 ; '.'
000000000021a351         db  0x00 ; '.'
000000000021a352         db  0x00 ; '.'
000000000021a353         db  0x00 ; '.'
000000000021a354         db  0x00 ; '.'
000000000021a355         db  0x00 ; '.'
000000000021a356         db  0x00 ; '.'
000000000021a357         db  0x00 ; '.'
000000000021a358         db  0x00 ; '.'
000000000021a359         db  0x00 ; '.'
000000000021a35a         db  0x00 ; '.'
000000000021a35b         db  0x00 ; '.'
000000000021a35c         db  0x00 ; '.'
000000000021a35d         db  0x00 ; '.'
000000000021a35e         db  0x00 ; '.'
000000000021a35f         db  0x00 ; '.'
000000000021a360         db  0x00 ; '.'
000000000021a361         db  0x00 ; '.'
000000000021a362         db  0x00 ; '.'
000000000021a363         db  0x00 ; '.'
000000000021a364         db  0x00 ; '.'
000000000021a365         db  0x00 ; '.'
000000000021a366         db  0x00 ; '.'
000000000021a367         db  0x00 ; '.'
000000000021a368         db  0x00 ; '.'
000000000021a369         db  0x00 ; '.'
000000000021a36a         db  0x00 ; '.'
000000000021a36b         db  0x00 ; '.'
000000000021a36c         db  0x00 ; '.'
000000000021a36d         db  0x00 ; '.'
000000000021a36e         db  0x00 ; '.'
000000000021a36f         db  0x00 ; '.'
000000000021a370         db  0x00 ; '.'
000000000021a371         db  0x00 ; '.'
000000000021a372         db  0x00 ; '.'
000000000021a373         db  0x00 ; '.'
000000000021a374         db  0x00 ; '.'
000000000021a375         db  0x00 ; '.'
000000000021a376         db  0x00 ; '.'
000000000021a377         db  0x00 ; '.'
000000000021a378         db  0x00 ; '.'
000000000021a379         db  0x00 ; '.'
000000000021a37a         db  0x00 ; '.'
000000000021a37b         db  0x00 ; '.'
000000000021a37c         db  0x00 ; '.'
000000000021a37d         db  0x00 ; '.'
000000000021a37e         db  0x00 ; '.'
000000000021a37f         db  0x00 ; '.'
000000000021a380         db  0x00 ; '.'
000000000021a381         db  0x00 ; '.'
000000000021a382         db  0x00 ; '.'
000000000021a383         db  0x00 ; '.'
000000000021a384         db  0x00 ; '.'
000000000021a385         db  0x00 ; '.'
000000000021a386         db  0x00 ; '.'
000000000021a387         db  0x00 ; '.'
000000000021a388         db  0x00 ; '.'
000000000021a389         db  0x00 ; '.'
000000000021a38a         db  0x00 ; '.'
000000000021a38b         db  0x00 ; '.'
000000000021a38c         db  0x00 ; '.'
000000000021a38d         db  0x00 ; '.'
000000000021a38e         db  0x00 ; '.'
000000000021a38f         db  0x00 ; '.'
000000000021a390         db  0x00 ; '.'
000000000021a391         db  0x00 ; '.'
000000000021a392         db  0x00 ; '.'
000000000021a393         db  0x00 ; '.'
000000000021a394         db  0x00 ; '.'
000000000021a395         db  0x00 ; '.'
000000000021a396         db  0x00 ; '.'
000000000021a397         db  0x00 ; '.'
000000000021a398         db  0x00 ; '.'
000000000021a399         db  0x00 ; '.'
000000000021a39a         db  0x00 ; '.'
000000000021a39b         db  0x00 ; '.'
000000000021a39c         db  0x00 ; '.'
000000000021a39d         db  0x00 ; '.'
000000000021a39e         db  0x00 ; '.'
000000000021a39f         db  0x00 ; '.'
000000000021a3a0         db  0x00 ; '.'
000000000021a3a1         db  0x00 ; '.'
000000000021a3a2         db  0x00 ; '.'
000000000021a3a3         db  0x00 ; '.'
000000000021a3a4         db  0x00 ; '.'
000000000021a3a5         db  0x00 ; '.'
000000000021a3a6         db  0x00 ; '.'
000000000021a3a7         db  0x00 ; '.'
000000000021a3a8         db  0x00 ; '.'
000000000021a3a9         db  0x00 ; '.'
000000000021a3aa         db  0x00 ; '.'
000000000021a3ab         db  0x00 ; '.'
000000000021a3ac         db  0x00 ; '.'
000000000021a3ad         db  0x00 ; '.'
000000000021a3ae         db  0x00 ; '.'
000000000021a3af         db  0x00 ; '.'
000000000021a3b0         db  0x00 ; '.'
000000000021a3b1         db  0x00 ; '.'
000000000021a3b2         db  0x00 ; '.'
000000000021a3b3         db  0x00 ; '.'
000000000021a3b4         db  0x00 ; '.'
000000000021a3b5         db  0x00 ; '.'
000000000021a3b6         db  0x00 ; '.'
000000000021a3b7         db  0x00 ; '.'
000000000021a3b8         db  0x00 ; '.'
000000000021a3b9         db  0x00 ; '.'
000000000021a3ba         db  0x00 ; '.'
000000000021a3bb         db  0x00 ; '.'
000000000021a3bc         db  0x00 ; '.'
000000000021a3bd         db  0x00 ; '.'
000000000021a3be         db  0x00 ; '.'
000000000021a3bf         db  0x00 ; '.'
000000000021a3c0         db  0x00 ; '.'
000000000021a3c1         db  0x00 ; '.'
000000000021a3c2         db  0x00 ; '.'
000000000021a3c3         db  0x00 ; '.'
000000000021a3c4         db  0x00 ; '.'
000000000021a3c5         db  0x00 ; '.'
000000000021a3c6         db  0x00 ; '.'
000000000021a3c7         db  0x00 ; '.'
000000000021a3c8         db  0x00 ; '.'
000000000021a3c9         db  0x00 ; '.'
000000000021a3ca         db  0x00 ; '.'
000000000021a3cb         db  0x00 ; '.'
000000000021a3cc         db  0x00 ; '.'
000000000021a3cd         db  0x00 ; '.'
000000000021a3ce         db  0x00 ; '.'
000000000021a3cf         db  0x00 ; '.'
000000000021a3d0         db  0x00 ; '.'
000000000021a3d1         db  0x00 ; '.'
000000000021a3d2         db  0x00 ; '.'
000000000021a3d3         db  0x00 ; '.'
000000000021a3d4         db  0x00 ; '.'
000000000021a3d5         db  0x00 ; '.'
000000000021a3d6         db  0x00 ; '.'
000000000021a3d7         db  0x00 ; '.'
000000000021a3d8         db  0x00 ; '.'
000000000021a3d9         db  0x00 ; '.'
000000000021a3da         db  0x00 ; '.'
000000000021a3db         db  0x00 ; '.'
000000000021a3dc         db  0x00 ; '.'
000000000021a3dd         db  0x00 ; '.'
000000000021a3de         db  0x00 ; '.'
000000000021a3df         db  0x00 ; '.'
000000000021a3e0         db  0x00 ; '.'
000000000021a3e1         db  0x00 ; '.'
000000000021a3e2         db  0x00 ; '.'
000000000021a3e3         db  0x00 ; '.'
000000000021a3e4         db  0x00 ; '.'
000000000021a3e5         db  0x00 ; '.'
000000000021a3e6         db  0x00 ; '.'
000000000021a3e7         db  0x00 ; '.'
000000000021a3e8         db  0x00 ; '.'
000000000021a3e9         db  0x00 ; '.'
000000000021a3ea         db  0x00 ; '.'
000000000021a3eb         db  0x00 ; '.'
000000000021a3ec         db  0x00 ; '.'
000000000021a3ed         db  0x00 ; '.'
000000000021a3ee         db  0x00 ; '.'
000000000021a3ef         db  0x00 ; '.'
000000000021a3f0         db  0x00 ; '.'
000000000021a3f1         db  0x00 ; '.'
000000000021a3f2         db  0x00 ; '.'
000000000021a3f3         db  0x00 ; '.'
000000000021a3f4         db  0x00 ; '.'
000000000021a3f5         db  0x00 ; '.'
000000000021a3f6         db  0x00 ; '.'
000000000021a3f7         db  0x00 ; '.'
000000000021a3f8         db  0x00 ; '.'
000000000021a3f9         db  0x00 ; '.'
000000000021a3fa         db  0x00 ; '.'
000000000021a3fb         db  0x00 ; '.'
000000000021a3fc         db  0x00 ; '.'
000000000021a3fd         db  0x00 ; '.'
000000000021a3fe         db  0x00 ; '.'
000000000021a3ff         db  0x00 ; '.'
000000000021a400         db  0x00 ; '.'
000000000021a401         db  0x00 ; '.'
000000000021a402         db  0x00 ; '.'
000000000021a403         db  0x00 ; '.'
000000000021a404         db  0x00 ; '.'
000000000021a405         db  0x00 ; '.'
000000000021a406         db  0x00 ; '.'
000000000021a407         db  0x00 ; '.'
000000000021a408         db  0x00 ; '.'
000000000021a409         db  0x00 ; '.'
000000000021a40a         db  0x00 ; '.'
000000000021a40b         db  0x00 ; '.'
000000000021a40c         db  0x00 ; '.'
000000000021a40d         db  0x00 ; '.'
000000000021a40e         db  0x00 ; '.'
000000000021a40f         db  0x00 ; '.'
000000000021a410         db  0x00 ; '.'
000000000021a411         db  0x00 ; '.'
000000000021a412         db  0x00 ; '.'
000000000021a413         db  0x00 ; '.'
000000000021a414         db  0x00 ; '.'
000000000021a415         db  0x00 ; '.'
000000000021a416         db  0x00 ; '.'
000000000021a417         db  0x00 ; '.'
000000000021a418         db  0x00 ; '.'
000000000021a419         db  0x00 ; '.'
000000000021a41a         db  0x00 ; '.'
000000000021a41b         db  0x00 ; '.'
000000000021a41c         db  0x00 ; '.'
000000000021a41d         db  0x00 ; '.'
000000000021a41e         db  0x00 ; '.'
000000000021a41f         db  0x00 ; '.'
000000000021a420         db  0x00 ; '.'
000000000021a421         db  0x00 ; '.'
000000000021a422         db  0x00 ; '.'
000000000021a423         db  0x00 ; '.'
000000000021a424         db  0x00 ; '.'
000000000021a425         db  0x00 ; '.'
000000000021a426         db  0x00 ; '.'
000000000021a427         db  0x00 ; '.'
000000000021a428         db  0x00 ; '.'
000000000021a429         db  0x00 ; '.'
000000000021a42a         db  0x00 ; '.'
000000000021a42b         db  0x00 ; '.'
000000000021a42c         db  0x00 ; '.'
000000000021a42d         db  0x00 ; '.'
000000000021a42e         db  0x00 ; '.'
000000000021a42f         db  0x00 ; '.'
000000000021a430         db  0x00 ; '.'
000000000021a431         db  0x00 ; '.'
000000000021a432         db  0x00 ; '.'
000000000021a433         db  0x00 ; '.'
000000000021a434         db  0x00 ; '.'
000000000021a435         db  0x00 ; '.'
000000000021a436         db  0x00 ; '.'
000000000021a437         db  0x00 ; '.'
000000000021a438         db  0x00 ; '.'
000000000021a439         db  0x00 ; '.'
000000000021a43a         db  0x00 ; '.'
000000000021a43b         db  0x00 ; '.'
000000000021a43c         db  0x00 ; '.'
000000000021a43d         db  0x00 ; '.'
000000000021a43e         db  0x00 ; '.'
000000000021a43f         db  0x00 ; '.'
000000000021a440         db  0x00 ; '.'
000000000021a441         db  0x00 ; '.'
000000000021a442         db  0x00 ; '.'
000000000021a443         db  0x00 ; '.'
000000000021a444         db  0x00 ; '.'
000000000021a445         db  0x00 ; '.'
000000000021a446         db  0x00 ; '.'
000000000021a447         db  0x00 ; '.'
000000000021a448         db  0x00 ; '.'
000000000021a449         db  0x00 ; '.'
000000000021a44a         db  0x00 ; '.'
000000000021a44b         db  0x00 ; '.'
000000000021a44c         db  0x00 ; '.'
000000000021a44d         db  0x00 ; '.'
000000000021a44e         db  0x00 ; '.'
000000000021a44f         db  0x00 ; '.'
000000000021a450         db  0x00 ; '.'
000000000021a451         db  0x00 ; '.'
000000000021a452         db  0x00 ; '.'
000000000021a453         db  0x00 ; '.'
000000000021a454         db  0x00 ; '.'
000000000021a455         db  0x00 ; '.'
000000000021a456         db  0x00 ; '.'
000000000021a457         db  0x00 ; '.'
000000000021a458         db  0x00 ; '.'
000000000021a459         db  0x00 ; '.'
000000000021a45a         db  0x00 ; '.'
000000000021a45b         db  0x00 ; '.'
000000000021a45c         db  0x00 ; '.'
000000000021a45d         db  0x00 ; '.'
000000000021a45e         db  0x00 ; '.'
000000000021a45f         db  0x00 ; '.'
000000000021a460         db  0x00 ; '.'
000000000021a461         db  0x00 ; '.'
000000000021a462         db  0x00 ; '.'
000000000021a463         db  0x00 ; '.'
000000000021a464         db  0x00 ; '.'
000000000021a465         db  0x00 ; '.'
000000000021a466         db  0x00 ; '.'
000000000021a467         db  0x00 ; '.'
000000000021a468         db  0x00 ; '.'
000000000021a469         db  0x00 ; '.'
000000000021a46a         db  0x00 ; '.'
000000000021a46b         db  0x00 ; '.'
000000000021a46c         db  0x00 ; '.'
000000000021a46d         db  0x00 ; '.'
000000000021a46e         db  0x00 ; '.'
000000000021a46f         db  0x00 ; '.'
000000000021a470         db  0x00 ; '.'
000000000021a471         db  0x00 ; '.'
000000000021a472         db  0x00 ; '.'
000000000021a473         db  0x00 ; '.'
000000000021a474         db  0x00 ; '.'
000000000021a475         db  0x00 ; '.'
000000000021a476         db  0x00 ; '.'
000000000021a477         db  0x00 ; '.'
000000000021a478         db  0x00 ; '.'
000000000021a479         db  0x00 ; '.'
000000000021a47a         db  0x00 ; '.'
000000000021a47b         db  0x00 ; '.'
000000000021a47c         db  0x00 ; '.'
000000000021a47d         db  0x00 ; '.'
000000000021a47e         db  0x00 ; '.'
000000000021a47f         db  0x00 ; '.'
000000000021a480         db  0x00 ; '.'
000000000021a481         db  0x00 ; '.'
000000000021a482         db  0x00 ; '.'
000000000021a483         db  0x00 ; '.'
000000000021a484         db  0x00 ; '.'
000000000021a485         db  0x00 ; '.'
000000000021a486         db  0x00 ; '.'
000000000021a487         db  0x00 ; '.'
000000000021a488         db  0x00 ; '.'
000000000021a489         db  0x00 ; '.'
000000000021a48a         db  0x00 ; '.'
000000000021a48b         db  0x00 ; '.'
000000000021a48c         db  0x00 ; '.'
000000000021a48d         db  0x00 ; '.'
000000000021a48e         db  0x00 ; '.'
000000000021a48f         db  0x00 ; '.'
000000000021a490         db  0x00 ; '.'
000000000021a491         db  0x00 ; '.'
000000000021a492         db  0x00 ; '.'
000000000021a493         db  0x00 ; '.'
000000000021a494         db  0x00 ; '.'
000000000021a495         db  0x00 ; '.'
000000000021a496         db  0x00 ; '.'
000000000021a497         db  0x00 ; '.'
000000000021a498         db  0x00 ; '.'
000000000021a499         db  0x00 ; '.'
000000000021a49a         db  0x00 ; '.'
000000000021a49b         db  0x00 ; '.'
000000000021a49c         db  0x00 ; '.'
000000000021a49d         db  0x00 ; '.'
000000000021a49e         db  0x00 ; '.'
000000000021a49f         db  0x00 ; '.'
000000000021a4a0         db  0x00 ; '.'
000000000021a4a1         db  0x00 ; '.'
000000000021a4a2         db  0x00 ; '.'
000000000021a4a3         db  0x00 ; '.'
000000000021a4a4         db  0x00 ; '.'
000000000021a4a5         db  0x00 ; '.'
000000000021a4a6         db  0x00 ; '.'
000000000021a4a7         db  0x00 ; '.'
000000000021a4a8         db  0x00 ; '.'
000000000021a4a9         db  0x00 ; '.'
000000000021a4aa         db  0x00 ; '.'
000000000021a4ab         db  0x00 ; '.'
000000000021a4ac         db  0x00 ; '.'
000000000021a4ad         db  0x00 ; '.'
000000000021a4ae         db  0x00 ; '.'
000000000021a4af         db  0x00 ; '.'
000000000021a4b0         db  0x00 ; '.'
000000000021a4b1         db  0x00 ; '.'
000000000021a4b2         db  0x00 ; '.'
000000000021a4b3         db  0x00 ; '.'
000000000021a4b4         db  0x00 ; '.'
000000000021a4b5         db  0x00 ; '.'
000000000021a4b6         db  0x00 ; '.'
000000000021a4b7         db  0x00 ; '.'
000000000021a4b8         db  0x00 ; '.'
000000000021a4b9         db  0x00 ; '.'
000000000021a4ba         db  0x00 ; '.'
000000000021a4bb         db  0x00 ; '.'
000000000021a4bc         db  0x00 ; '.'
000000000021a4bd         db  0x00 ; '.'
000000000021a4be         db  0x00 ; '.'
000000000021a4bf         db  0x00 ; '.'
000000000021a4c0         db  0x00 ; '.'
000000000021a4c1         db  0x00 ; '.'
000000000021a4c2         db  0x00 ; '.'
000000000021a4c3         db  0x00 ; '.'
000000000021a4c4         db  0x00 ; '.'
000000000021a4c5         db  0x00 ; '.'
000000000021a4c6         db  0x00 ; '.'
000000000021a4c7         db  0x00 ; '.'
000000000021a4c8         db  0x00 ; '.'
000000000021a4c9         db  0x00 ; '.'
000000000021a4ca         db  0x00 ; '.'
000000000021a4cb         db  0x00 ; '.'
000000000021a4cc         db  0x00 ; '.'
000000000021a4cd         db  0x00 ; '.'
000000000021a4ce         db  0x00 ; '.'
000000000021a4cf         db  0x00 ; '.'
000000000021a4d0         db  0x00 ; '.'
000000000021a4d1         db  0x00 ; '.'
000000000021a4d2         db  0x00 ; '.'
000000000021a4d3         db  0x00 ; '.'
000000000021a4d4         db  0x00 ; '.'
000000000021a4d5         db  0x00 ; '.'
000000000021a4d6         db  0x00 ; '.'
000000000021a4d7         db  0x00 ; '.'
000000000021a4d8         db  0x00 ; '.'
000000000021a4d9         db  0x00 ; '.'
000000000021a4da         db  0x00 ; '.'
000000000021a4db         db  0x00 ; '.'
000000000021a4dc         db  0x00 ; '.'
000000000021a4dd         db  0x00 ; '.'
000000000021a4de         db  0x00 ; '.'
000000000021a4df         db  0x00 ; '.'
000000000021a4e0         db  0x00 ; '.'
000000000021a4e1         db  0x00 ; '.'
000000000021a4e2         db  0x00 ; '.'
000000000021a4e3         db  0x00 ; '.'
000000000021a4e4         db  0x00 ; '.'
000000000021a4e5         db  0x00 ; '.'
000000000021a4e6         db  0x00 ; '.'
000000000021a4e7         db  0x00 ; '.'
000000000021a4e8         db  0x00 ; '.'
000000000021a4e9         db  0x00 ; '.'
000000000021a4ea         db  0x00 ; '.'
000000000021a4eb         db  0x00 ; '.'
000000000021a4ec         db  0x00 ; '.'
000000000021a4ed         db  0x00 ; '.'
000000000021a4ee         db  0x00 ; '.'
000000000021a4ef         db  0x00 ; '.'
000000000021a4f0         db  0x00 ; '.'
000000000021a4f1         db  0x00 ; '.'
000000000021a4f2         db  0x00 ; '.'
000000000021a4f3         db  0x00 ; '.'
000000000021a4f4         db  0x00 ; '.'
000000000021a4f5         db  0x00 ; '.'
000000000021a4f6         db  0x00 ; '.'
000000000021a4f7         db  0x00 ; '.'
000000000021a4f8         db  0x00 ; '.'
000000000021a4f9         db  0x00 ; '.'
000000000021a4fa         db  0x00 ; '.'
000000000021a4fb         db  0x00 ; '.'
000000000021a4fc         db  0x00 ; '.'
000000000021a4fd         db  0x00 ; '.'
000000000021a4fe         db  0x00 ; '.'
000000000021a4ff         db  0x00 ; '.'
000000000021a500         db  0x00 ; '.'
000000000021a501         db  0x00 ; '.'
000000000021a502         db  0x00 ; '.'
000000000021a503         db  0x00 ; '.'
000000000021a504         db  0x00 ; '.'
000000000021a505         db  0x00 ; '.'
000000000021a506         db  0x00 ; '.'
000000000021a507         db  0x00 ; '.'
000000000021a508         db  0x00 ; '.'
000000000021a509         db  0x00 ; '.'
000000000021a50a         db  0x00 ; '.'
000000000021a50b         db  0x00 ; '.'
000000000021a50c         db  0x00 ; '.'
000000000021a50d         db  0x00 ; '.'
000000000021a50e         db  0x00 ; '.'
000000000021a50f         db  0x00 ; '.'
000000000021a510         db  0x00 ; '.'
000000000021a511         db  0x00 ; '.'
000000000021a512         db  0x00 ; '.'
000000000021a513         db  0x00 ; '.'
000000000021a514         db  0x00 ; '.'
000000000021a515         db  0x00 ; '.'
000000000021a516         db  0x00 ; '.'
000000000021a517         db  0x00 ; '.'
000000000021a518         db  0x00 ; '.'
000000000021a519         db  0x00 ; '.'
000000000021a51a         db  0x00 ; '.'
000000000021a51b         db  0x00 ; '.'
000000000021a51c         db  0x00 ; '.'
000000000021a51d         db  0x00 ; '.'
000000000021a51e         db  0x00 ; '.'
000000000021a51f         db  0x00 ; '.'
000000000021a520         db  0x00 ; '.'
000000000021a521         db  0x00 ; '.'
000000000021a522         db  0x00 ; '.'
000000000021a523         db  0x00 ; '.'
000000000021a524         db  0x00 ; '.'
000000000021a525         db  0x00 ; '.'
000000000021a526         db  0x00 ; '.'
000000000021a527         db  0x00 ; '.'
000000000021a528         db  0x00 ; '.'
000000000021a529         db  0x00 ; '.'
000000000021a52a         db  0x00 ; '.'
000000000021a52b         db  0x00 ; '.'
000000000021a52c         db  0x00 ; '.'
000000000021a52d         db  0x00 ; '.'
000000000021a52e         db  0x00 ; '.'
000000000021a52f         db  0x00 ; '.'
000000000021a530         db  0x00 ; '.'
000000000021a531         db  0x00 ; '.'
000000000021a532         db  0x00 ; '.'
000000000021a533         db  0x00 ; '.'
000000000021a534         db  0x00 ; '.'
000000000021a535         db  0x00 ; '.'
000000000021a536         db  0x00 ; '.'
000000000021a537         db  0x00 ; '.'
000000000021a538         db  0x00 ; '.'
000000000021a539         db  0x00 ; '.'
000000000021a53a         db  0x00 ; '.'
000000000021a53b         db  0x00 ; '.'
000000000021a53c         db  0x00 ; '.'
000000000021a53d         db  0x00 ; '.'
000000000021a53e         db  0x00 ; '.'
000000000021a53f         db  0x00 ; '.'
000000000021a540         db  0x00 ; '.'
000000000021a541         db  0x00 ; '.'
000000000021a542         db  0x00 ; '.'
000000000021a543         db  0x00 ; '.'
000000000021a544         db  0x00 ; '.'
000000000021a545         db  0x00 ; '.'
000000000021a546         db  0x00 ; '.'
000000000021a547         db  0x00 ; '.'
000000000021a548         db  0x00 ; '.'
000000000021a549         db  0x00 ; '.'
000000000021a54a         db  0x00 ; '.'
000000000021a54b         db  0x00 ; '.'
000000000021a54c         db  0x00 ; '.'
000000000021a54d         db  0x00 ; '.'
000000000021a54e         db  0x00 ; '.'
000000000021a54f         db  0x00 ; '.'
000000000021a550         db  0x00 ; '.'
000000000021a551         db  0x00 ; '.'
000000000021a552         db  0x00 ; '.'
000000000021a553         db  0x00 ; '.'
000000000021a554         db  0x00 ; '.'
000000000021a555         db  0x00 ; '.'
000000000021a556         db  0x00 ; '.'
000000000021a557         db  0x00 ; '.'
000000000021a558         db  0x00 ; '.'
000000000021a559         db  0x00 ; '.'
000000000021a55a         db  0x00 ; '.'
000000000021a55b         db  0x00 ; '.'
000000000021a55c         db  0x00 ; '.'
000000000021a55d         db  0x00 ; '.'
000000000021a55e         db  0x00 ; '.'
000000000021a55f         db  0x00 ; '.'
000000000021a560         db  0x00 ; '.'
000000000021a561         db  0x00 ; '.'
000000000021a562         db  0x00 ; '.'
000000000021a563         db  0x00 ; '.'
000000000021a564         db  0x00 ; '.'
000000000021a565         db  0x00 ; '.'
000000000021a566         db  0x00 ; '.'
000000000021a567         db  0x00 ; '.'
000000000021a568         db  0x00 ; '.'
000000000021a569         db  0x00 ; '.'
000000000021a56a         db  0x00 ; '.'
000000000021a56b         db  0x00 ; '.'
000000000021a56c         db  0x00 ; '.'
000000000021a56d         db  0x00 ; '.'
000000000021a56e         db  0x00 ; '.'
000000000021a56f         db  0x00 ; '.'
000000000021a570         db  0x00 ; '.'
000000000021a571         db  0x00 ; '.'
000000000021a572         db  0x00 ; '.'
000000000021a573         db  0x00 ; '.'
000000000021a574         db  0x00 ; '.'
000000000021a575         db  0x00 ; '.'
000000000021a576         db  0x00 ; '.'
000000000021a577         db  0x00 ; '.'
000000000021a578         db  0x00 ; '.'
000000000021a579         db  0x00 ; '.'
000000000021a57a         db  0x00 ; '.'
000000000021a57b         db  0x00 ; '.'
000000000021a57c         db  0x00 ; '.'
000000000021a57d         db  0x00 ; '.'
000000000021a57e         db  0x00 ; '.'
000000000021a57f         db  0x00 ; '.'
000000000021a580         db  0x00 ; '.'
000000000021a581         db  0x00 ; '.'
000000000021a582         db  0x00 ; '.'
000000000021a583         db  0x00 ; '.'
000000000021a584         db  0x00 ; '.'
000000000021a585         db  0x00 ; '.'
000000000021a586         db  0x00 ; '.'
000000000021a587         db  0x00 ; '.'
000000000021a588         db  0x00 ; '.'
000000000021a589         db  0x00 ; '.'
000000000021a58a         db  0x00 ; '.'
000000000021a58b         db  0x00 ; '.'
000000000021a58c         db  0x00 ; '.'
000000000021a58d         db  0x00 ; '.'
000000000021a58e         db  0x00 ; '.'
000000000021a58f         db  0x00 ; '.'
000000000021a590         db  0x00 ; '.'
000000000021a591         db  0x00 ; '.'
000000000021a592         db  0x00 ; '.'
000000000021a593         db  0x00 ; '.'
000000000021a594         db  0x00 ; '.'
000000000021a595         db  0x00 ; '.'
000000000021a596         db  0x00 ; '.'
000000000021a597         db  0x00 ; '.'
000000000021a598         db  0x00 ; '.'
000000000021a599         db  0x00 ; '.'
000000000021a59a         db  0x00 ; '.'
000000000021a59b         db  0x00 ; '.'
000000000021a59c         db  0x00 ; '.'
000000000021a59d         db  0x00 ; '.'
000000000021a59e         db  0x00 ; '.'
000000000021a59f         db  0x00 ; '.'
000000000021a5a0         db  0x00 ; '.'
000000000021a5a1         db  0x00 ; '.'
000000000021a5a2         db  0x00 ; '.'
000000000021a5a3         db  0x00 ; '.'
000000000021a5a4         db  0x00 ; '.'
000000000021a5a5         db  0x00 ; '.'
000000000021a5a6         db  0x00 ; '.'
000000000021a5a7         db  0x00 ; '.'
000000000021a5a8         db  0x00 ; '.'
000000000021a5a9         db  0x00 ; '.'
000000000021a5aa         db  0x00 ; '.'
000000000021a5ab         db  0x00 ; '.'
000000000021a5ac         db  0x00 ; '.'
000000000021a5ad         db  0x00 ; '.'
000000000021a5ae         db  0x00 ; '.'
000000000021a5af         db  0x00 ; '.'
000000000021a5b0         db  0x00 ; '.'
000000000021a5b1         db  0x00 ; '.'
000000000021a5b2         db  0x00 ; '.'
000000000021a5b3         db  0x00 ; '.'
000000000021a5b4         db  0x00 ; '.'
000000000021a5b5         db  0x00 ; '.'
000000000021a5b6         db  0x00 ; '.'
000000000021a5b7         db  0x00 ; '.'
000000000021a5b8         db  0x00 ; '.'
000000000021a5b9         db  0x00 ; '.'
000000000021a5ba         db  0x00 ; '.'
000000000021a5bb         db  0x00 ; '.'
000000000021a5bc         db  0x00 ; '.'
000000000021a5bd         db  0x00 ; '.'
000000000021a5be         db  0x00 ; '.'
000000000021a5bf         db  0x00 ; '.'
000000000021a5c0         db  0x00 ; '.'
000000000021a5c1         db  0x00 ; '.'
000000000021a5c2         db  0x00 ; '.'
000000000021a5c3         db  0x00 ; '.'
000000000021a5c4         db  0x00 ; '.'
000000000021a5c5         db  0x00 ; '.'
000000000021a5c6         db  0x00 ; '.'
000000000021a5c7         db  0x00 ; '.'
000000000021a5c8         db  0x00 ; '.'
000000000021a5c9         db  0x00 ; '.'
000000000021a5ca         db  0x00 ; '.'
000000000021a5cb         db  0x00 ; '.'
000000000021a5cc         db  0x00 ; '.'
000000000021a5cd         db  0x00 ; '.'
000000000021a5ce         db  0x00 ; '.'
000000000021a5cf         db  0x00 ; '.'
000000000021a5d0         db  0x00 ; '.'
000000000021a5d1         db  0x00 ; '.'
000000000021a5d2         db  0x00 ; '.'
000000000021a5d3         db  0x00 ; '.'
000000000021a5d4         db  0x00 ; '.'
000000000021a5d5         db  0x00 ; '.'
000000000021a5d6         db  0x00 ; '.'
000000000021a5d7         db  0x00 ; '.'
000000000021a5d8         db  0x00 ; '.'
000000000021a5d9         db  0x00 ; '.'
000000000021a5da         db  0x00 ; '.'
000000000021a5db         db  0x00 ; '.'
000000000021a5dc         db  0x00 ; '.'
000000000021a5dd         db  0x00 ; '.'
000000000021a5de         db  0x00 ; '.'
000000000021a5df         db  0x00 ; '.'
000000000021a5e0         db  0x00 ; '.'
000000000021a5e1         db  0x00 ; '.'
000000000021a5e2         db  0x00 ; '.'
000000000021a5e3         db  0x00 ; '.'
000000000021a5e4         db  0x00 ; '.'
000000000021a5e5         db  0x00 ; '.'
000000000021a5e6         db  0x00 ; '.'
000000000021a5e7         db  0x00 ; '.'
000000000021a5e8         db  0x00 ; '.'
000000000021a5e9         db  0x00 ; '.'
000000000021a5ea         db  0x00 ; '.'
000000000021a5eb         db  0x00 ; '.'
000000000021a5ec         db  0x00 ; '.'
000000000021a5ed         db  0x00 ; '.'
000000000021a5ee         db  0x00 ; '.'
000000000021a5ef         db  0x00 ; '.'
000000000021a5f0         db  0x00 ; '.'
000000000021a5f1         db  0x00 ; '.'
000000000021a5f2         db  0x00 ; '.'
000000000021a5f3         db  0x00 ; '.'
000000000021a5f4         db  0x00 ; '.'
000000000021a5f5         db  0x00 ; '.'
000000000021a5f6         db  0x00 ; '.'
000000000021a5f7         db  0x00 ; '.'
000000000021a5f8         db  0x00 ; '.'
000000000021a5f9         db  0x00 ; '.'
000000000021a5fa         db  0x00 ; '.'
000000000021a5fb         db  0x00 ; '.'
000000000021a5fc         db  0x00 ; '.'
000000000021a5fd         db  0x00 ; '.'
000000000021a5fe         db  0x00 ; '.'
000000000021a5ff         db  0x00 ; '.'
000000000021a600         db  0x00 ; '.'
000000000021a601         db  0x00 ; '.'
000000000021a602         db  0x00 ; '.'
000000000021a603         db  0x00 ; '.'
000000000021a604         db  0x00 ; '.'
000000000021a605         db  0x00 ; '.'
000000000021a606         db  0x00 ; '.'
000000000021a607         db  0x00 ; '.'
000000000021a608         db  0x00 ; '.'
000000000021a609         db  0x00 ; '.'
000000000021a60a         db  0x00 ; '.'
000000000021a60b         db  0x00 ; '.'
000000000021a60c         db  0x00 ; '.'
000000000021a60d         db  0x00 ; '.'
000000000021a60e         db  0x00 ; '.'
000000000021a60f         db  0x00 ; '.'
000000000021a610         db  0x00 ; '.'
000000000021a611         db  0x00 ; '.'
000000000021a612         db  0x00 ; '.'
000000000021a613         db  0x00 ; '.'
000000000021a614         db  0x00 ; '.'
000000000021a615         db  0x00 ; '.'
000000000021a616         db  0x00 ; '.'
000000000021a617         db  0x00 ; '.'
000000000021a618         db  0x00 ; '.'
000000000021a619         db  0x00 ; '.'
000000000021a61a         db  0x00 ; '.'
000000000021a61b         db  0x00 ; '.'
000000000021a61c         db  0x00 ; '.'
000000000021a61d         db  0x00 ; '.'
000000000021a61e         db  0x00 ; '.'
000000000021a61f         db  0x00 ; '.'
000000000021a620         db  0x00 ; '.'
000000000021a621         db  0x00 ; '.'
000000000021a622         db  0x00 ; '.'
000000000021a623         db  0x00 ; '.'
000000000021a624         db  0x00 ; '.'
000000000021a625         db  0x00 ; '.'
000000000021a626         db  0x00 ; '.'
000000000021a627         db  0x00 ; '.'
000000000021a628         db  0x00 ; '.'
000000000021a629         db  0x00 ; '.'
000000000021a62a         db  0x00 ; '.'
000000000021a62b         db  0x00 ; '.'
000000000021a62c         db  0x00 ; '.'
000000000021a62d         db  0x00 ; '.'
000000000021a62e         db  0x00 ; '.'
000000000021a62f         db  0x00 ; '.'
000000000021a630         db  0x00 ; '.'
000000000021a631         db  0x00 ; '.'
000000000021a632         db  0x00 ; '.'
000000000021a633         db  0x00 ; '.'
000000000021a634         db  0x00 ; '.'
000000000021a635         db  0x00 ; '.'
000000000021a636         db  0x00 ; '.'
000000000021a637         db  0x00 ; '.'
000000000021a638         db  0x00 ; '.'
000000000021a639         db  0x00 ; '.'
000000000021a63a         db  0x00 ; '.'
000000000021a63b         db  0x00 ; '.'
000000000021a63c         db  0x00 ; '.'
000000000021a63d         db  0x00 ; '.'
000000000021a63e         db  0x00 ; '.'
000000000021a63f         db  0x00 ; '.'
000000000021a640         db  0x00 ; '.'
000000000021a641         db  0x00 ; '.'
000000000021a642         db  0x00 ; '.'
000000000021a643         db  0x00 ; '.'
000000000021a644         db  0x00 ; '.'
000000000021a645         db  0x00 ; '.'
000000000021a646         db  0x00 ; '.'
000000000021a647         db  0x00 ; '.'
000000000021a648         db  0x00 ; '.'
000000000021a649         db  0x00 ; '.'
000000000021a64a         db  0x00 ; '.'
000000000021a64b         db  0x00 ; '.'
000000000021a64c         db  0x00 ; '.'
000000000021a64d         db  0x00 ; '.'
000000000021a64e         db  0x00 ; '.'
000000000021a64f         db  0x00 ; '.'
000000000021a650         db  0x00 ; '.'
000000000021a651         db  0x00 ; '.'
000000000021a652         db  0x00 ; '.'
000000000021a653         db  0x00 ; '.'
000000000021a654         db  0x00 ; '.'
000000000021a655         db  0x00 ; '.'
000000000021a656         db  0x00 ; '.'
000000000021a657         db  0x00 ; '.'
000000000021a658         db  0x00 ; '.'
000000000021a659         db  0x00 ; '.'
000000000021a65a         db  0x00 ; '.'
000000000021a65b         db  0x00 ; '.'
000000000021a65c         db  0x00 ; '.'
000000000021a65d         db  0x00 ; '.'
000000000021a65e         db  0x00 ; '.'
000000000021a65f         db  0x00 ; '.'
000000000021a660         db  0x00 ; '.'
000000000021a661         db  0x00 ; '.'
000000000021a662         db  0x00 ; '.'
000000000021a663         db  0x00 ; '.'
000000000021a664         db  0x00 ; '.'
000000000021a665         db  0x00 ; '.'
000000000021a666         db  0x00 ; '.'
000000000021a667         db  0x00 ; '.'
000000000021a668         db  0x00 ; '.'
000000000021a669         db  0x00 ; '.'
000000000021a66a         db  0x00 ; '.'
000000000021a66b         db  0x00 ; '.'
000000000021a66c         db  0x00 ; '.'
000000000021a66d         db  0x00 ; '.'
000000000021a66e         db  0x00 ; '.'
000000000021a66f         db  0x00 ; '.'
000000000021a670         db  0x00 ; '.'
000000000021a671         db  0x00 ; '.'
000000000021a672         db  0x00 ; '.'
000000000021a673         db  0x00 ; '.'
000000000021a674         db  0x00 ; '.'
000000000021a675         db  0x00 ; '.'
000000000021a676         db  0x00 ; '.'
000000000021a677         db  0x00 ; '.'
000000000021a678         db  0x00 ; '.'
000000000021a679         db  0x00 ; '.'
000000000021a67a         db  0x00 ; '.'
000000000021a67b         db  0x00 ; '.'
000000000021a67c         db  0x00 ; '.'
000000000021a67d         db  0x00 ; '.'
000000000021a67e         db  0x00 ; '.'
000000000021a67f         db  0x00 ; '.'
000000000021a680         db  0x00 ; '.'
000000000021a681         db  0x00 ; '.'
000000000021a682         db  0x00 ; '.'
000000000021a683         db  0x00 ; '.'
000000000021a684         db  0x00 ; '.'
000000000021a685         db  0x00 ; '.'
000000000021a686         db  0x00 ; '.'
000000000021a687         db  0x00 ; '.'
000000000021a688         db  0x00 ; '.'
000000000021a689         db  0x00 ; '.'
000000000021a68a         db  0x00 ; '.'
000000000021a68b         db  0x00 ; '.'
000000000021a68c         db  0x00 ; '.'
000000000021a68d         db  0x00 ; '.'
000000000021a68e         db  0x00 ; '.'
000000000021a68f         db  0x00 ; '.'
000000000021a690         db  0x00 ; '.'
000000000021a691         db  0x00 ; '.'
000000000021a692         db  0x00 ; '.'
000000000021a693         db  0x00 ; '.'
000000000021a694         db  0x00 ; '.'
000000000021a695         db  0x00 ; '.'
000000000021a696         db  0x00 ; '.'
000000000021a697         db  0x00 ; '.'
000000000021a698         db  0x00 ; '.'
000000000021a699         db  0x00 ; '.'
000000000021a69a         db  0x00 ; '.'
000000000021a69b         db  0x00 ; '.'
000000000021a69c         db  0x00 ; '.'
000000000021a69d         db  0x00 ; '.'
000000000021a69e         db  0x00 ; '.'
000000000021a69f         db  0x00 ; '.'
000000000021a6a0         db  0x00 ; '.'
000000000021a6a1         db  0x00 ; '.'
000000000021a6a2         db  0x00 ; '.'
000000000021a6a3         db  0x00 ; '.'
000000000021a6a4         db  0x00 ; '.'
000000000021a6a5         db  0x00 ; '.'
000000000021a6a6         db  0x00 ; '.'
000000000021a6a7         db  0x00 ; '.'
000000000021a6a8         db  0x00 ; '.'
000000000021a6a9         db  0x00 ; '.'
000000000021a6aa         db  0x00 ; '.'
000000000021a6ab         db  0x00 ; '.'
000000000021a6ac         db  0x00 ; '.'
000000000021a6ad         db  0x00 ; '.'
000000000021a6ae         db  0x00 ; '.'
000000000021a6af         db  0x00 ; '.'
000000000021a6b0         db  0x00 ; '.'
000000000021a6b1         db  0x00 ; '.'
000000000021a6b2         db  0x00 ; '.'
000000000021a6b3         db  0x00 ; '.'
000000000021a6b4         db  0x00 ; '.'
000000000021a6b5         db  0x00 ; '.'
000000000021a6b6         db  0x00 ; '.'
000000000021a6b7         db  0x00 ; '.'
000000000021a6b8         db  0x00 ; '.'
000000000021a6b9         db  0x00 ; '.'
000000000021a6ba         db  0x00 ; '.'
000000000021a6bb         db  0x00 ; '.'
000000000021a6bc         db  0x00 ; '.'
000000000021a6bd         db  0x00 ; '.'
000000000021a6be         db  0x00 ; '.'
000000000021a6bf         db  0x00 ; '.'
000000000021a6c0         db  0x00 ; '.'
000000000021a6c1         db  0x00 ; '.'
000000000021a6c2         db  0x00 ; '.'
000000000021a6c3         db  0x00 ; '.'
000000000021a6c4         db  0x00 ; '.'
000000000021a6c5         db  0x00 ; '.'
000000000021a6c6         db  0x00 ; '.'
000000000021a6c7         db  0x00 ; '.'
000000000021a6c8         db  0x00 ; '.'
000000000021a6c9         db  0x00 ; '.'
000000000021a6ca         db  0x00 ; '.'
000000000021a6cb         db  0x00 ; '.'
000000000021a6cc         db  0x00 ; '.'
000000000021a6cd         db  0x00 ; '.'
000000000021a6ce         db  0x00 ; '.'
000000000021a6cf         db  0x00 ; '.'
000000000021a6d0         db  0x00 ; '.'
000000000021a6d1         db  0x00 ; '.'
000000000021a6d2         db  0x00 ; '.'
000000000021a6d3         db  0x00 ; '.'
000000000021a6d4         db  0x00 ; '.'
000000000021a6d5         db  0x00 ; '.'
000000000021a6d6         db  0x00 ; '.'
000000000021a6d7         db  0x00 ; '.'
000000000021a6d8         db  0x00 ; '.'
000000000021a6d9         db  0x00 ; '.'
000000000021a6da         db  0x00 ; '.'
000000000021a6db         db  0x00 ; '.'
000000000021a6dc         db  0x00 ; '.'
000000000021a6dd         db  0x00 ; '.'
000000000021a6de         db  0x00 ; '.'
000000000021a6df         db  0x00 ; '.'
000000000021a6e0         db  0x00 ; '.'
000000000021a6e1         db  0x00 ; '.'
000000000021a6e2         db  0x00 ; '.'
000000000021a6e3         db  0x00 ; '.'
000000000021a6e4         db  0x00 ; '.'
000000000021a6e5         db  0x00 ; '.'
000000000021a6e6         db  0x00 ; '.'
000000000021a6e7         db  0x00 ; '.'
000000000021a6e8         db  0x00 ; '.'
000000000021a6e9         db  0x00 ; '.'
000000000021a6ea         db  0x00 ; '.'
000000000021a6eb         db  0x00 ; '.'
000000000021a6ec         db  0x00 ; '.'
000000000021a6ed         db  0x00 ; '.'
000000000021a6ee         db  0x00 ; '.'
000000000021a6ef         db  0x00 ; '.'
000000000021a6f0         db  0x00 ; '.'
000000000021a6f1         db  0x00 ; '.'
000000000021a6f2         db  0x00 ; '.'
000000000021a6f3         db  0x00 ; '.'
000000000021a6f4         db  0x00 ; '.'
000000000021a6f5         db  0x00 ; '.'
000000000021a6f6         db  0x00 ; '.'
000000000021a6f7         db  0x00 ; '.'
000000000021a6f8         db  0x00 ; '.'
000000000021a6f9         db  0x00 ; '.'
000000000021a6fa         db  0x00 ; '.'
000000000021a6fb         db  0x00 ; '.'
000000000021a6fc         db  0x00 ; '.'
000000000021a6fd         db  0x00 ; '.'
000000000021a6fe         db  0x00 ; '.'
000000000021a6ff         db  0x00 ; '.'
000000000021a700         db  0x00 ; '.'
000000000021a701         db  0x00 ; '.'
000000000021a702         db  0x00 ; '.'
000000000021a703         db  0x00 ; '.'
000000000021a704         db  0x00 ; '.'
000000000021a705         db  0x00 ; '.'
000000000021a706         db  0x00 ; '.'
000000000021a707         db  0x00 ; '.'
000000000021a708         db  0x00 ; '.'
000000000021a709         db  0x00 ; '.'
000000000021a70a         db  0x00 ; '.'
000000000021a70b         db  0x00 ; '.'
000000000021a70c         db  0x00 ; '.'
000000000021a70d         db  0x00 ; '.'
000000000021a70e         db  0x00 ; '.'
000000000021a70f         db  0x00 ; '.'
000000000021a710         db  0x00 ; '.'
000000000021a711         db  0x00 ; '.'
000000000021a712         db  0x00 ; '.'
000000000021a713         db  0x00 ; '.'
000000000021a714         db  0x00 ; '.'
000000000021a715         db  0x00 ; '.'
000000000021a716         db  0x00 ; '.'
000000000021a717         db  0x00 ; '.'
000000000021a718         db  0x00 ; '.'
000000000021a719         db  0x00 ; '.'
000000000021a71a         db  0x00 ; '.'
000000000021a71b         db  0x00 ; '.'
000000000021a71c         db  0x00 ; '.'
000000000021a71d         db  0x00 ; '.'
000000000021a71e         db  0x00 ; '.'
000000000021a71f         db  0x00 ; '.'
000000000021a720         db  0x00 ; '.'
000000000021a721         db  0x00 ; '.'
000000000021a722         db  0x00 ; '.'
000000000021a723         db  0x00 ; '.'
000000000021a724         db  0x00 ; '.'
000000000021a725         db  0x00 ; '.'
000000000021a726         db  0x00 ; '.'
000000000021a727         db  0x00 ; '.'
000000000021a728         db  0x00 ; '.'
000000000021a729         db  0x00 ; '.'
000000000021a72a         db  0x00 ; '.'
000000000021a72b         db  0x00 ; '.'
000000000021a72c         db  0x00 ; '.'
000000000021a72d         db  0x00 ; '.'
000000000021a72e         db  0x00 ; '.'
000000000021a72f         db  0x00 ; '.'
000000000021a730         db  0x00 ; '.'
000000000021a731         db  0x00 ; '.'
000000000021a732         db  0x00 ; '.'
000000000021a733         db  0x00 ; '.'
000000000021a734         db  0x00 ; '.'
000000000021a735         db  0x00 ; '.'
000000000021a736         db  0x00 ; '.'
000000000021a737         db  0x00 ; '.'
000000000021a738         db  0x00 ; '.'
000000000021a739         db  0x00 ; '.'
000000000021a73a         db  0x00 ; '.'
000000000021a73b         db  0x00 ; '.'
000000000021a73c         db  0x00 ; '.'
000000000021a73d         db  0x00 ; '.'
000000000021a73e         db  0x00 ; '.'
000000000021a73f         db  0x00 ; '.'
000000000021a740         db  0x00 ; '.'
000000000021a741         db  0x00 ; '.'
000000000021a742         db  0x00 ; '.'
000000000021a743         db  0x00 ; '.'
000000000021a744         db  0x00 ; '.'
000000000021a745         db  0x00 ; '.'
000000000021a746         db  0x00 ; '.'
000000000021a747         db  0x00 ; '.'
000000000021a748         db  0x00 ; '.'
000000000021a749         db  0x00 ; '.'
000000000021a74a         db  0x00 ; '.'
000000000021a74b         db  0x00 ; '.'
000000000021a74c         db  0x00 ; '.'
000000000021a74d         db  0x00 ; '.'
000000000021a74e         db  0x00 ; '.'
000000000021a74f         db  0x00 ; '.'
000000000021a750         db  0x00 ; '.'
000000000021a751         db  0x00 ; '.'
000000000021a752         db  0x00 ; '.'
000000000021a753         db  0x00 ; '.'
000000000021a754         db  0x00 ; '.'
000000000021a755         db  0x00 ; '.'
000000000021a756         db  0x00 ; '.'
000000000021a757         db  0x00 ; '.'
000000000021a758         db  0x00 ; '.'
000000000021a759         db  0x00 ; '.'
000000000021a75a         db  0x00 ; '.'
000000000021a75b         db  0x00 ; '.'
000000000021a75c         db  0x00 ; '.'
000000000021a75d         db  0x00 ; '.'
000000000021a75e         db  0x00 ; '.'
000000000021a75f         db  0x00 ; '.'
000000000021a760         db  0x00 ; '.'
000000000021a761         db  0x00 ; '.'
000000000021a762         db  0x00 ; '.'
000000000021a763         db  0x00 ; '.'
000000000021a764         db  0x00 ; '.'
000000000021a765         db  0x00 ; '.'
000000000021a766         db  0x00 ; '.'
000000000021a767         db  0x00 ; '.'
000000000021a768         db  0x00 ; '.'
000000000021a769         db  0x00 ; '.'
000000000021a76a         db  0x00 ; '.'
000000000021a76b         db  0x00 ; '.'
000000000021a76c         db  0x00 ; '.'
000000000021a76d         db  0x00 ; '.'
000000000021a76e         db  0x00 ; '.'
000000000021a76f         db  0x00 ; '.'
000000000021a770         db  0x00 ; '.'
000000000021a771         db  0x00 ; '.'
000000000021a772         db  0x00 ; '.'
000000000021a773         db  0x00 ; '.'
000000000021a774         db  0x00 ; '.'
000000000021a775         db  0x00 ; '.'
000000000021a776         db  0x00 ; '.'
000000000021a777         db  0x00 ; '.'
000000000021a778         db  0x00 ; '.'
000000000021a779         db  0x00 ; '.'
000000000021a77a         db  0x00 ; '.'
000000000021a77b         db  0x00 ; '.'
000000000021a77c         db  0x00 ; '.'
000000000021a77d         db  0x00 ; '.'
000000000021a77e         db  0x00 ; '.'
000000000021a77f         db  0x00 ; '.'
000000000021a780         db  0x00 ; '.'
000000000021a781         db  0x00 ; '.'
000000000021a782         db  0x00 ; '.'
000000000021a783         db  0x00 ; '.'
000000000021a784         db  0x00 ; '.'
000000000021a785         db  0x00 ; '.'
000000000021a786         db  0x00 ; '.'
000000000021a787         db  0x00 ; '.'
000000000021a788         db  0x00 ; '.'
000000000021a789         db  0x00 ; '.'
000000000021a78a         db  0x00 ; '.'
000000000021a78b         db  0x00 ; '.'
000000000021a78c         db  0x00 ; '.'
000000000021a78d         db  0x00 ; '.'
000000000021a78e         db  0x00 ; '.'
000000000021a78f         db  0x00 ; '.'
000000000021a790         db  0x00 ; '.'
000000000021a791         db  0x00 ; '.'
000000000021a792         db  0x00 ; '.'
000000000021a793         db  0x00 ; '.'
000000000021a794         db  0x00 ; '.'
000000000021a795         db  0x00 ; '.'
000000000021a796         db  0x00 ; '.'
000000000021a797         db  0x00 ; '.'
000000000021a798         db  0x00 ; '.'
000000000021a799         db  0x00 ; '.'
000000000021a79a         db  0x00 ; '.'
000000000021a79b         db  0x00 ; '.'
000000000021a79c         db  0x00 ; '.'
000000000021a79d         db  0x00 ; '.'
000000000021a79e         db  0x00 ; '.'
000000000021a79f         db  0x00 ; '.'
000000000021a7a0         db  0x00 ; '.'
000000000021a7a1         db  0x00 ; '.'
000000000021a7a2         db  0x00 ; '.'
000000000021a7a3         db  0x00 ; '.'
000000000021a7a4         db  0x00 ; '.'
000000000021a7a5         db  0x00 ; '.'
000000000021a7a6         db  0x00 ; '.'
000000000021a7a7         db  0x00 ; '.'
000000000021a7a8         db  0x00 ; '.'
000000000021a7a9         db  0x00 ; '.'
000000000021a7aa         db  0x00 ; '.'
000000000021a7ab         db  0x00 ; '.'
000000000021a7ac         db  0x00 ; '.'
000000000021a7ad         db  0x00 ; '.'
000000000021a7ae         db  0x00 ; '.'
000000000021a7af         db  0x00 ; '.'
000000000021a7b0         db  0x00 ; '.'
000000000021a7b1         db  0x00 ; '.'
000000000021a7b2         db  0x00 ; '.'
000000000021a7b3         db  0x00 ; '.'
000000000021a7b4         db  0x00 ; '.'
000000000021a7b5         db  0x00 ; '.'
000000000021a7b6         db  0x00 ; '.'
000000000021a7b7         db  0x00 ; '.'
000000000021a7b8         db  0x00 ; '.'
000000000021a7b9         db  0x00 ; '.'
000000000021a7ba         db  0x00 ; '.'
000000000021a7bb         db  0x00 ; '.'
000000000021a7bc         db  0x00 ; '.'
000000000021a7bd         db  0x00 ; '.'
000000000021a7be         db  0x00 ; '.'
000000000021a7bf         db  0x00 ; '.'
000000000021a7c0         db  0x00 ; '.'
000000000021a7c1         db  0x00 ; '.'
000000000021a7c2         db  0x00 ; '.'
000000000021a7c3         db  0x00 ; '.'
000000000021a7c4         db  0x00 ; '.'
000000000021a7c5         db  0x00 ; '.'
000000000021a7c6         db  0x00 ; '.'
000000000021a7c7         db  0x00 ; '.'
000000000021a7c8         db  0x00 ; '.'
000000000021a7c9         db  0x00 ; '.'
000000000021a7ca         db  0x00 ; '.'
000000000021a7cb         db  0x00 ; '.'
000000000021a7cc         db  0x00 ; '.'
000000000021a7cd         db  0x00 ; '.'
000000000021a7ce         db  0x00 ; '.'
000000000021a7cf         db  0x00 ; '.'
000000000021a7d0         db  0x00 ; '.'
000000000021a7d1         db  0x00 ; '.'
000000000021a7d2         db  0x00 ; '.'
000000000021a7d3         db  0x00 ; '.'
000000000021a7d4         db  0x00 ; '.'
000000000021a7d5         db  0x00 ; '.'
000000000021a7d6         db  0x00 ; '.'
000000000021a7d7         db  0x00 ; '.'
000000000021a7d8         db  0x00 ; '.'
000000000021a7d9         db  0x00 ; '.'
000000000021a7da         db  0x00 ; '.'
000000000021a7db         db  0x00 ; '.'
000000000021a7dc         db  0x00 ; '.'
000000000021a7dd         db  0x00 ; '.'
000000000021a7de         db  0x00 ; '.'
000000000021a7df         db  0x00 ; '.'
000000000021a7e0         db  0x00 ; '.'
000000000021a7e1         db  0x00 ; '.'
000000000021a7e2         db  0x00 ; '.'
000000000021a7e3         db  0x00 ; '.'
000000000021a7e4         db  0x00 ; '.'
000000000021a7e5         db  0x00 ; '.'
000000000021a7e6         db  0x00 ; '.'
000000000021a7e7         db  0x00 ; '.'
000000000021a7e8         db  0x00 ; '.'
000000000021a7e9         db  0x00 ; '.'
000000000021a7ea         db  0x00 ; '.'
000000000021a7eb         db  0x00 ; '.'
000000000021a7ec         db  0x00 ; '.'
000000000021a7ed         db  0x00 ; '.'
000000000021a7ee         db  0x00 ; '.'
000000000021a7ef         db  0x00 ; '.'
000000000021a7f0         db  0x00 ; '.'
000000000021a7f1         db  0x00 ; '.'
000000000021a7f2         db  0x00 ; '.'
000000000021a7f3         db  0x00 ; '.'
000000000021a7f4         db  0x00 ; '.'
000000000021a7f5         db  0x00 ; '.'
000000000021a7f6         db  0x00 ; '.'
000000000021a7f7         db  0x00 ; '.'
000000000021a7f8         db  0x00 ; '.'
000000000021a7f9         db  0x00 ; '.'
000000000021a7fa         db  0x00 ; '.'
000000000021a7fb         db  0x00 ; '.'
000000000021a7fc         db  0x00 ; '.'
000000000021a7fd         db  0x00 ; '.'
000000000021a7fe         db  0x00 ; '.'
000000000021a7ff         db  0x00 ; '.'
000000000021a800         db  0x00 ; '.'
000000000021a801         db  0x00 ; '.'
000000000021a802         db  0x00 ; '.'
000000000021a803         db  0x00 ; '.'
000000000021a804         db  0x00 ; '.'
000000000021a805         db  0x00 ; '.'
000000000021a806         db  0x00 ; '.'
000000000021a807         db  0x00 ; '.'
000000000021a808         db  0x00 ; '.'
000000000021a809         db  0x00 ; '.'
000000000021a80a         db  0x00 ; '.'
000000000021a80b         db  0x00 ; '.'
000000000021a80c         db  0x00 ; '.'
000000000021a80d         db  0x00 ; '.'
000000000021a80e         db  0x00 ; '.'
000000000021a80f         db  0x00 ; '.'
000000000021a810         db  0x00 ; '.'
000000000021a811         db  0x00 ; '.'
000000000021a812         db  0x00 ; '.'
000000000021a813         db  0x00 ; '.'
000000000021a814         db  0x00 ; '.'
000000000021a815         db  0x00 ; '.'
000000000021a816         db  0x00 ; '.'
000000000021a817         db  0x00 ; '.'
000000000021a818         db  0x00 ; '.'
000000000021a819         db  0x00 ; '.'
000000000021a81a         db  0x00 ; '.'
000000000021a81b         db  0x00 ; '.'
000000000021a81c         db  0x00 ; '.'
000000000021a81d         db  0x00 ; '.'
000000000021a81e         db  0x00 ; '.'
000000000021a81f         db  0x00 ; '.'
000000000021a820         db  0x00 ; '.'
000000000021a821         db  0x00 ; '.'
000000000021a822         db  0x00 ; '.'
000000000021a823         db  0x00 ; '.'
000000000021a824         db  0x00 ; '.'
000000000021a825         db  0x00 ; '.'
000000000021a826         db  0x00 ; '.'
000000000021a827         db  0x00 ; '.'
000000000021a828         db  0x00 ; '.'
000000000021a829         db  0x00 ; '.'
000000000021a82a         db  0x00 ; '.'
000000000021a82b         db  0x00 ; '.'
000000000021a82c         db  0x00 ; '.'
000000000021a82d         db  0x00 ; '.'
000000000021a82e         db  0x00 ; '.'
000000000021a82f         db  0x00 ; '.'
000000000021a830         db  0x00 ; '.'
000000000021a831         db  0x00 ; '.'
000000000021a832         db  0x00 ; '.'
000000000021a833         db  0x00 ; '.'
000000000021a834         db  0x00 ; '.'
000000000021a835         db  0x00 ; '.'
000000000021a836         db  0x00 ; '.'
000000000021a837         db  0x00 ; '.'
000000000021a838         db  0x00 ; '.'
000000000021a839         db  0x00 ; '.'
000000000021a83a         db  0x00 ; '.'
000000000021a83b         db  0x00 ; '.'
000000000021a83c         db  0x00 ; '.'
000000000021a83d         db  0x00 ; '.'
000000000021a83e         db  0x00 ; '.'
000000000021a83f         db  0x00 ; '.'
000000000021a840         db  0x00 ; '.'
000000000021a841         db  0x00 ; '.'
000000000021a842         db  0x00 ; '.'
000000000021a843         db  0x00 ; '.'
000000000021a844         db  0x00 ; '.'
000000000021a845         db  0x00 ; '.'
000000000021a846         db  0x00 ; '.'
000000000021a847         db  0x00 ; '.'
000000000021a848         db  0x00 ; '.'
000000000021a849         db  0x00 ; '.'
000000000021a84a         db  0x00 ; '.'
000000000021a84b         db  0x00 ; '.'
000000000021a84c         db  0x00 ; '.'
000000000021a84d         db  0x00 ; '.'
000000000021a84e         db  0x00 ; '.'
000000000021a84f         db  0x00 ; '.'
000000000021a850         db  0x00 ; '.'
000000000021a851         db  0x00 ; '.'
000000000021a852         db  0x00 ; '.'
000000000021a853         db  0x00 ; '.'
000000000021a854         db  0x00 ; '.'
000000000021a855         db  0x00 ; '.'
000000000021a856         db  0x00 ; '.'
000000000021a857         db  0x00 ; '.'
000000000021a858         db  0x00 ; '.'
000000000021a859         db  0x00 ; '.'
000000000021a85a         db  0x00 ; '.'
000000000021a85b         db  0x00 ; '.'
000000000021a85c         db  0x00 ; '.'
000000000021a85d         db  0x00 ; '.'
000000000021a85e         db  0x00 ; '.'
000000000021a85f         db  0x00 ; '.'
000000000021a860         db  0x00 ; '.'
000000000021a861         db  0x00 ; '.'
000000000021a862         db  0x00 ; '.'
000000000021a863         db  0x00 ; '.'
000000000021a864         db  0x00 ; '.'
000000000021a865         db  0x00 ; '.'
000000000021a866         db  0x00 ; '.'
000000000021a867         db  0x00 ; '.'
000000000021a868         db  0x00 ; '.'
000000000021a869         db  0x00 ; '.'
000000000021a86a         db  0x00 ; '.'
000000000021a86b         db  0x00 ; '.'
000000000021a86c         db  0x00 ; '.'
000000000021a86d         db  0x00 ; '.'
000000000021a86e         db  0x00 ; '.'
000000000021a86f         db  0x00 ; '.'
000000000021a870         db  0x00 ; '.'
000000000021a871         db  0x00 ; '.'
000000000021a872         db  0x00 ; '.'
000000000021a873         db  0x00 ; '.'
000000000021a874         db  0x00 ; '.'
000000000021a875         db  0x00 ; '.'
000000000021a876         db  0x00 ; '.'
000000000021a877         db  0x00 ; '.'
000000000021a878         db  0x00 ; '.'
000000000021a879         db  0x00 ; '.'
000000000021a87a         db  0x00 ; '.'
000000000021a87b         db  0x00 ; '.'
000000000021a87c         db  0x00 ; '.'
000000000021a87d         db  0x00 ; '.'
000000000021a87e         db  0x00 ; '.'
000000000021a87f         db  0x00 ; '.'
000000000021a880         db  0x00 ; '.'
000000000021a881         db  0x00 ; '.'
000000000021a882         db  0x00 ; '.'
000000000021a883         db  0x00 ; '.'
000000000021a884         db  0x00 ; '.'
000000000021a885         db  0x00 ; '.'
000000000021a886         db  0x00 ; '.'
000000000021a887         db  0x00 ; '.'
000000000021a888         db  0x00 ; '.'
000000000021a889         db  0x00 ; '.'
000000000021a88a         db  0x00 ; '.'
000000000021a88b         db  0x00 ; '.'
000000000021a88c         db  0x00 ; '.'
000000000021a88d         db  0x00 ; '.'
000000000021a88e         db  0x00 ; '.'
000000000021a88f         db  0x00 ; '.'
000000000021a890         db  0x00 ; '.'
000000000021a891         db  0x00 ; '.'
000000000021a892         db  0x00 ; '.'
000000000021a893         db  0x00 ; '.'
000000000021a894         db  0x00 ; '.'
000000000021a895         db  0x00 ; '.'
000000000021a896         db  0x00 ; '.'
000000000021a897         db  0x00 ; '.'
000000000021a898         db  0x00 ; '.'
000000000021a899         db  0x00 ; '.'
000000000021a89a         db  0x00 ; '.'
000000000021a89b         db  0x00 ; '.'
000000000021a89c         db  0x00 ; '.'
000000000021a89d         db  0x00 ; '.'
000000000021a89e         db  0x00 ; '.'
000000000021a89f         db  0x00 ; '.'
000000000021a8a0         db  0x00 ; '.'
000000000021a8a1         db  0x00 ; '.'
000000000021a8a2         db  0x00 ; '.'
000000000021a8a3         db  0x00 ; '.'
000000000021a8a4         db  0x00 ; '.'
000000000021a8a5         db  0x00 ; '.'
000000000021a8a6         db  0x00 ; '.'
000000000021a8a7         db  0x00 ; '.'
000000000021a8a8         db  0x00 ; '.'
000000000021a8a9         db  0x00 ; '.'
000000000021a8aa         db  0x00 ; '.'
000000000021a8ab         db  0x00 ; '.'
000000000021a8ac         db  0x00 ; '.'
000000000021a8ad         db  0x00 ; '.'
000000000021a8ae         db  0x00 ; '.'
000000000021a8af         db  0x00 ; '.'
000000000021a8b0         db  0x00 ; '.'
000000000021a8b1         db  0x00 ; '.'
000000000021a8b2         db  0x00 ; '.'
000000000021a8b3         db  0x00 ; '.'
000000000021a8b4         db  0x00 ; '.'
000000000021a8b5         db  0x00 ; '.'
000000000021a8b6         db  0x00 ; '.'
000000000021a8b7         db  0x00 ; '.'
000000000021a8b8         db  0x00 ; '.'
000000000021a8b9         db  0x00 ; '.'
000000000021a8ba         db  0x00 ; '.'
000000000021a8bb         db  0x00 ; '.'
000000000021a8bc         db  0x00 ; '.'
000000000021a8bd         db  0x00 ; '.'
000000000021a8be         db  0x00 ; '.'
000000000021a8bf         db  0x00 ; '.'
000000000021a8c0         db  0x00 ; '.'
000000000021a8c1         db  0x00 ; '.'
000000000021a8c2         db  0x00 ; '.'
000000000021a8c3         db  0x00 ; '.'
000000000021a8c4         db  0x00 ; '.'
000000000021a8c5         db  0x00 ; '.'
000000000021a8c6         db  0x00 ; '.'
000000000021a8c7         db  0x00 ; '.'
000000000021a8c8         db  0x00 ; '.'
000000000021a8c9         db  0x00 ; '.'
000000000021a8ca         db  0x00 ; '.'
000000000021a8cb         db  0x00 ; '.'
000000000021a8cc         db  0x00 ; '.'
000000000021a8cd         db  0x00 ; '.'
000000000021a8ce         db  0x00 ; '.'
000000000021a8cf         db  0x00 ; '.'
000000000021a8d0         db  0x00 ; '.'
000000000021a8d1         db  0x00 ; '.'
000000000021a8d2         db  0x00 ; '.'
000000000021a8d3         db  0x00 ; '.'
000000000021a8d4         db  0x00 ; '.'
000000000021a8d5         db  0x00 ; '.'
000000000021a8d6         db  0x00 ; '.'
000000000021a8d7         db  0x00 ; '.'
000000000021a8d8         db  0x00 ; '.'
000000000021a8d9         db  0x00 ; '.'
000000000021a8da         db  0x00 ; '.'
000000000021a8db         db  0x00 ; '.'
000000000021a8dc         db  0x00 ; '.'
000000000021a8dd         db  0x00 ; '.'
000000000021a8de         db  0x00 ; '.'
000000000021a8df         db  0x00 ; '.'
000000000021a8e0         db  0x00 ; '.'
000000000021a8e1         db  0x00 ; '.'
000000000021a8e2         db  0x00 ; '.'
000000000021a8e3         db  0x00 ; '.'
000000000021a8e4         db  0x00 ; '.'
000000000021a8e5         db  0x00 ; '.'
000000000021a8e6         db  0x00 ; '.'
000000000021a8e7         db  0x00 ; '.'
000000000021a8e8         db  0x00 ; '.'
000000000021a8e9         db  0x00 ; '.'
000000000021a8ea         db  0x00 ; '.'
000000000021a8eb         db  0x00 ; '.'
000000000021a8ec         db  0x00 ; '.'
000000000021a8ed         db  0x00 ; '.'
000000000021a8ee         db  0x00 ; '.'
000000000021a8ef         db  0x00 ; '.'
000000000021a8f0         db  0x00 ; '.'
000000000021a8f1         db  0x00 ; '.'
000000000021a8f2         db  0x00 ; '.'
000000000021a8f3         db  0x00 ; '.'
000000000021a8f4         db  0x00 ; '.'
000000000021a8f5         db  0x00 ; '.'
000000000021a8f6         db  0x00 ; '.'
000000000021a8f7         db  0x00 ; '.'
000000000021a8f8         db  0x00 ; '.'
000000000021a8f9         db  0x00 ; '.'
000000000021a8fa         db  0x00 ; '.'
000000000021a8fb         db  0x00 ; '.'
000000000021a8fc         db  0x00 ; '.'
000000000021a8fd         db  0x00 ; '.'
000000000021a8fe         db  0x00 ; '.'
000000000021a8ff         db  0x00 ; '.'
000000000021a900         db  0x00 ; '.'
000000000021a901         db  0x00 ; '.'
000000000021a902         db  0x00 ; '.'
000000000021a903         db  0x00 ; '.'
000000000021a904         db  0x00 ; '.'
000000000021a905         db  0x00 ; '.'
000000000021a906         db  0x00 ; '.'
000000000021a907         db  0x00 ; '.'
000000000021a908         db  0x00 ; '.'
000000000021a909         db  0x00 ; '.'
000000000021a90a         db  0x00 ; '.'
000000000021a90b         db  0x00 ; '.'
000000000021a90c         db  0x00 ; '.'
000000000021a90d         db  0x00 ; '.'
000000000021a90e         db  0x00 ; '.'
000000000021a90f         db  0x00 ; '.'
000000000021a910         db  0x00 ; '.'
000000000021a911         db  0x00 ; '.'
000000000021a912         db  0x00 ; '.'
000000000021a913         db  0x00 ; '.'
000000000021a914         db  0x00 ; '.'
000000000021a915         db  0x00 ; '.'
000000000021a916         db  0x00 ; '.'
000000000021a917         db  0x00 ; '.'
000000000021a918         db  0x00 ; '.'
000000000021a919         db  0x00 ; '.'
000000000021a91a         db  0x00 ; '.'
000000000021a91b         db  0x00 ; '.'
000000000021a91c         db  0x00 ; '.'
000000000021a91d         db  0x00 ; '.'
000000000021a91e         db  0x00 ; '.'
000000000021a91f         db  0x00 ; '.'
000000000021a920         db  0x00 ; '.'
000000000021a921         db  0x00 ; '.'
000000000021a922         db  0x00 ; '.'
000000000021a923         db  0x00 ; '.'
000000000021a924         db  0x00 ; '.'
000000000021a925         db  0x00 ; '.'
000000000021a926         db  0x00 ; '.'
000000000021a927         db  0x00 ; '.'
000000000021a928         db  0x00 ; '.'
000000000021a929         db  0x00 ; '.'
000000000021a92a         db  0x00 ; '.'
000000000021a92b         db  0x00 ; '.'
000000000021a92c         db  0x00 ; '.'
000000000021a92d         db  0x00 ; '.'
000000000021a92e         db  0x00 ; '.'
000000000021a92f         db  0x00 ; '.'
000000000021a930         db  0x00 ; '.'
000000000021a931         db  0x00 ; '.'
000000000021a932         db  0x00 ; '.'
000000000021a933         db  0x00 ; '.'
000000000021a934         db  0x00 ; '.'
000000000021a935         db  0x00 ; '.'
000000000021a936         db  0x00 ; '.'
000000000021a937         db  0x00 ; '.'
000000000021a938         db  0x00 ; '.'
000000000021a939         db  0x00 ; '.'
000000000021a93a         db  0x00 ; '.'
000000000021a93b         db  0x00 ; '.'
000000000021a93c         db  0x00 ; '.'
000000000021a93d         db  0x00 ; '.'
000000000021a93e         db  0x00 ; '.'
000000000021a93f         db  0x00 ; '.'
000000000021a940         db  0x00 ; '.'
000000000021a941         db  0x00 ; '.'
000000000021a942         db  0x00 ; '.'
000000000021a943         db  0x00 ; '.'
000000000021a944         db  0x00 ; '.'
000000000021a945         db  0x00 ; '.'
000000000021a946         db  0x00 ; '.'
000000000021a947         db  0x00 ; '.'
000000000021a948         db  0x00 ; '.'
000000000021a949         db  0x00 ; '.'
000000000021a94a         db  0x00 ; '.'
000000000021a94b         db  0x00 ; '.'
000000000021a94c         db  0x00 ; '.'
000000000021a94d         db  0x00 ; '.'
000000000021a94e         db  0x00 ; '.'
000000000021a94f         db  0x00 ; '.'
000000000021a950         db  0x00 ; '.'
000000000021a951         db  0x00 ; '.'
000000000021a952         db  0x00 ; '.'
000000000021a953         db  0x00 ; '.'
000000000021a954         db  0x00 ; '.'
000000000021a955         db  0x00 ; '.'
000000000021a956         db  0x00 ; '.'
000000000021a957         db  0x00 ; '.'
000000000021a958         db  0x00 ; '.'
000000000021a959         db  0x00 ; '.'
000000000021a95a         db  0x00 ; '.'
000000000021a95b         db  0x00 ; '.'
000000000021a95c         db  0x00 ; '.'
000000000021a95d         db  0x00 ; '.'
000000000021a95e         db  0x00 ; '.'
000000000021a95f         db  0x00 ; '.'
000000000021a960         db  0x00 ; '.'
000000000021a961         db  0x00 ; '.'
000000000021a962         db  0x00 ; '.'
000000000021a963         db  0x00 ; '.'
000000000021a964         db  0x00 ; '.'
000000000021a965         db  0x00 ; '.'
000000000021a966         db  0x00 ; '.'
000000000021a967         db  0x00 ; '.'
000000000021a968         db  0x00 ; '.'
000000000021a969         db  0x00 ; '.'
000000000021a96a         db  0x00 ; '.'
000000000021a96b         db  0x00 ; '.'
000000000021a96c         db  0x00 ; '.'
000000000021a96d         db  0x00 ; '.'
000000000021a96e         db  0x00 ; '.'
000000000021a96f         db  0x00 ; '.'
000000000021a970         db  0x00 ; '.'
000000000021a971         db  0x00 ; '.'
000000000021a972         db  0x00 ; '.'
000000000021a973         db  0x00 ; '.'
000000000021a974         db  0x00 ; '.'
000000000021a975         db  0x00 ; '.'
000000000021a976         db  0x00 ; '.'
000000000021a977         db  0x00 ; '.'
000000000021a978         db  0x00 ; '.'
000000000021a979         db  0x00 ; '.'
000000000021a97a         db  0x00 ; '.'
000000000021a97b         db  0x00 ; '.'
000000000021a97c         db  0x00 ; '.'
000000000021a97d         db  0x00 ; '.'
000000000021a97e         db  0x00 ; '.'
000000000021a97f         db  0x00 ; '.'
000000000021a980         db  0x00 ; '.'
000000000021a981         db  0x00 ; '.'
000000000021a982         db  0x00 ; '.'
000000000021a983         db  0x00 ; '.'
000000000021a984         db  0x00 ; '.'
000000000021a985         db  0x00 ; '.'
000000000021a986         db  0x00 ; '.'
000000000021a987         db  0x00 ; '.'
000000000021a988         db  0x00 ; '.'
000000000021a989         db  0x00 ; '.'
000000000021a98a         db  0x00 ; '.'
000000000021a98b         db  0x00 ; '.'
000000000021a98c         db  0x00 ; '.'
000000000021a98d         db  0x00 ; '.'
000000000021a98e         db  0x00 ; '.'
000000000021a98f         db  0x00 ; '.'
000000000021a990         db  0x00 ; '.'
000000000021a991         db  0x00 ; '.'
000000000021a992         db  0x00 ; '.'
000000000021a993         db  0x00 ; '.'
000000000021a994         db  0x00 ; '.'
000000000021a995         db  0x00 ; '.'
000000000021a996         db  0x00 ; '.'
000000000021a997         db  0x00 ; '.'
000000000021a998         db  0x00 ; '.'
000000000021a999         db  0x00 ; '.'
000000000021a99a         db  0x00 ; '.'
000000000021a99b         db  0x00 ; '.'
000000000021a99c         db  0x00 ; '.'
000000000021a99d         db  0x00 ; '.'
000000000021a99e         db  0x00 ; '.'
000000000021a99f         db  0x00 ; '.'
000000000021a9a0         db  0x00 ; '.'
000000000021a9a1         db  0x00 ; '.'
000000000021a9a2         db  0x00 ; '.'
000000000021a9a3         db  0x00 ; '.'
000000000021a9a4         db  0x00 ; '.'
000000000021a9a5         db  0x00 ; '.'
000000000021a9a6         db  0x00 ; '.'
000000000021a9a7         db  0x00 ; '.'
000000000021a9a8         db  0x00 ; '.'
000000000021a9a9         db  0x00 ; '.'
000000000021a9aa         db  0x00 ; '.'
000000000021a9ab         db  0x00 ; '.'
000000000021a9ac         db  0x00 ; '.'
000000000021a9ad         db  0x00 ; '.'
000000000021a9ae         db  0x00 ; '.'
000000000021a9af         db  0x00 ; '.'
000000000021a9b0         db  0x00 ; '.'
000000000021a9b1         db  0x00 ; '.'
000000000021a9b2         db  0x00 ; '.'
000000000021a9b3         db  0x00 ; '.'
000000000021a9b4         db  0x00 ; '.'
000000000021a9b5         db  0x00 ; '.'
000000000021a9b6         db  0x00 ; '.'
000000000021a9b7         db  0x00 ; '.'
000000000021a9b8         db  0x00 ; '.'
000000000021a9b9         db  0x00 ; '.'
000000000021a9ba         db  0x00 ; '.'
000000000021a9bb         db  0x00 ; '.'
000000000021a9bc         db  0x00 ; '.'
000000000021a9bd         db  0x00 ; '.'
000000000021a9be         db  0x00 ; '.'
000000000021a9bf         db  0x00 ; '.'
000000000021a9c0         db  0x00 ; '.'
000000000021a9c1         db  0x00 ; '.'
000000000021a9c2         db  0x00 ; '.'
000000000021a9c3         db  0x00 ; '.'
000000000021a9c4         db  0x00 ; '.'
000000000021a9c5         db  0x00 ; '.'
000000000021a9c6         db  0x00 ; '.'
000000000021a9c7         db  0x00 ; '.'
000000000021a9c8         db  0x00 ; '.'
000000000021a9c9         db  0x00 ; '.'
000000000021a9ca         db  0x00 ; '.'
000000000021a9cb         db  0x00 ; '.'
000000000021a9cc         db  0x00 ; '.'
000000000021a9cd         db  0x00 ; '.'
000000000021a9ce         db  0x00 ; '.'
000000000021a9cf         db  0x00 ; '.'
000000000021a9d0         db  0x00 ; '.'
000000000021a9d1         db  0x00 ; '.'
000000000021a9d2         db  0x00 ; '.'
000000000021a9d3         db  0x00 ; '.'
000000000021a9d4         db  0x00 ; '.'
000000000021a9d5         db  0x00 ; '.'
000000000021a9d6         db  0x00 ; '.'
000000000021a9d7         db  0x00 ; '.'
000000000021a9d8         db  0x00 ; '.'
000000000021a9d9         db  0x00 ; '.'
000000000021a9da         db  0x00 ; '.'
000000000021a9db         db  0x00 ; '.'
000000000021a9dc         db  0x00 ; '.'
000000000021a9dd         db  0x00 ; '.'
000000000021a9de         db  0x00 ; '.'
000000000021a9df         db  0x00 ; '.'
000000000021a9e0         db  0x00 ; '.'
000000000021a9e1         db  0x00 ; '.'
000000000021a9e2         db  0x00 ; '.'
000000000021a9e3         db  0x00 ; '.'
000000000021a9e4         db  0x00 ; '.'
000000000021a9e5         db  0x00 ; '.'
000000000021a9e6         db  0x00 ; '.'
000000000021a9e7         db  0x00 ; '.'
000000000021a9e8         db  0x00 ; '.'
000000000021a9e9         db  0x00 ; '.'
000000000021a9ea         db  0x00 ; '.'
000000000021a9eb         db  0x00 ; '.'
000000000021a9ec         db  0x00 ; '.'
000000000021a9ed         db  0x00 ; '.'
000000000021a9ee         db  0x00 ; '.'
000000000021a9ef         db  0x00 ; '.'
000000000021a9f0         db  0x00 ; '.'
000000000021a9f1         db  0x00 ; '.'
000000000021a9f2         db  0x00 ; '.'
000000000021a9f3         db  0x00 ; '.'
000000000021a9f4         db  0x00 ; '.'
000000000021a9f5         db  0x00 ; '.'
000000000021a9f6         db  0x00 ; '.'
000000000021a9f7         db  0x00 ; '.'
000000000021a9f8         db  0x00 ; '.'
000000000021a9f9         db  0x00 ; '.'
000000000021a9fa         db  0x00 ; '.'
000000000021a9fb         db  0x00 ; '.'
000000000021a9fc         db  0x00 ; '.'
000000000021a9fd         db  0x00 ; '.'
000000000021a9fe         db  0x00 ; '.'
000000000021a9ff         db  0x00 ; '.'
000000000021aa00         db  0x00 ; '.'
000000000021aa01         db  0x00 ; '.'
000000000021aa02         db  0x00 ; '.'
000000000021aa03         db  0x00 ; '.'
000000000021aa04         db  0x00 ; '.'
000000000021aa05         db  0x00 ; '.'
000000000021aa06         db  0x00 ; '.'
000000000021aa07         db  0x00 ; '.'
000000000021aa08         db  0x00 ; '.'
000000000021aa09         db  0x00 ; '.'
000000000021aa0a         db  0x00 ; '.'
000000000021aa0b         db  0x00 ; '.'
000000000021aa0c         db  0x00 ; '.'
000000000021aa0d         db  0x00 ; '.'
000000000021aa0e         db  0x00 ; '.'
000000000021aa0f         db  0x00 ; '.'
000000000021aa10         db  0x00 ; '.'
000000000021aa11         db  0x00 ; '.'
000000000021aa12         db  0x00 ; '.'
000000000021aa13         db  0x00 ; '.'
000000000021aa14         db  0x00 ; '.'
000000000021aa15         db  0x00 ; '.'
000000000021aa16         db  0x00 ; '.'
000000000021aa17         db  0x00 ; '.'
000000000021aa18         db  0x00 ; '.'
000000000021aa19         db  0x00 ; '.'
000000000021aa1a         db  0x00 ; '.'
000000000021aa1b         db  0x00 ; '.'
000000000021aa1c         db  0x00 ; '.'
000000000021aa1d         db  0x00 ; '.'
000000000021aa1e         db  0x00 ; '.'
000000000021aa1f         db  0x00 ; '.'
000000000021aa20         db  0x00 ; '.'
000000000021aa21         db  0x00 ; '.'
000000000021aa22         db  0x00 ; '.'
000000000021aa23         db  0x00 ; '.'
000000000021aa24         db  0x00 ; '.'
000000000021aa25         db  0x00 ; '.'
000000000021aa26         db  0x00 ; '.'
000000000021aa27         db  0x00 ; '.'
000000000021aa28         db  0x00 ; '.'
000000000021aa29         db  0x00 ; '.'
000000000021aa2a         db  0x00 ; '.'
000000000021aa2b         db  0x00 ; '.'
000000000021aa2c         db  0x00 ; '.'
000000000021aa2d         db  0x00 ; '.'
000000000021aa2e         db  0x00 ; '.'
000000000021aa2f         db  0x00 ; '.'
000000000021aa30         db  0x00 ; '.'
000000000021aa31         db  0x00 ; '.'
000000000021aa32         db  0x00 ; '.'
000000000021aa33         db  0x00 ; '.'
000000000021aa34         db  0x00 ; '.'
000000000021aa35         db  0x00 ; '.'
000000000021aa36         db  0x00 ; '.'
000000000021aa37         db  0x00 ; '.'
000000000021aa38         db  0x00 ; '.'
000000000021aa39         db  0x00 ; '.'
000000000021aa3a         db  0x00 ; '.'
000000000021aa3b         db  0x00 ; '.'
000000000021aa3c         db  0x00 ; '.'
000000000021aa3d         db  0x00 ; '.'
000000000021aa3e         db  0x00 ; '.'
000000000021aa3f         db  0x00 ; '.'
000000000021aa40         db  0x00 ; '.'
000000000021aa41         db  0x00 ; '.'
000000000021aa42         db  0x00 ; '.'
000000000021aa43         db  0x00 ; '.'
000000000021aa44         db  0x00 ; '.'
000000000021aa45         db  0x00 ; '.'
000000000021aa46         db  0x00 ; '.'
000000000021aa47         db  0x00 ; '.'
000000000021aa48         db  0x00 ; '.'
000000000021aa49         db  0x00 ; '.'
000000000021aa4a         db  0x00 ; '.'
000000000021aa4b         db  0x00 ; '.'
000000000021aa4c         db  0x00 ; '.'
000000000021aa4d         db  0x00 ; '.'
000000000021aa4e         db  0x00 ; '.'
000000000021aa4f         db  0x00 ; '.'
000000000021aa50         db  0x00 ; '.'
000000000021aa51         db  0x00 ; '.'
000000000021aa52         db  0x00 ; '.'
000000000021aa53         db  0x00 ; '.'
000000000021aa54         db  0x00 ; '.'
000000000021aa55         db  0x00 ; '.'
000000000021aa56         db  0x00 ; '.'
000000000021aa57         db  0x00 ; '.'
000000000021aa58         db  0x00 ; '.'
000000000021aa59         db  0x00 ; '.'
000000000021aa5a         db  0x00 ; '.'
000000000021aa5b         db  0x00 ; '.'
000000000021aa5c         db  0x00 ; '.'
000000000021aa5d         db  0x00 ; '.'
000000000021aa5e         db  0x00 ; '.'
000000000021aa5f         db  0x00 ; '.'
000000000021aa60         db  0x00 ; '.'
000000000021aa61         db  0x00 ; '.'
000000000021aa62         db  0x00 ; '.'
000000000021aa63         db  0x00 ; '.'
000000000021aa64         db  0x00 ; '.'
000000000021aa65         db  0x00 ; '.'
000000000021aa66         db  0x00 ; '.'
000000000021aa67         db  0x00 ; '.'
000000000021aa68         db  0x00 ; '.'
000000000021aa69         db  0x00 ; '.'
000000000021aa6a         db  0x00 ; '.'
000000000021aa6b         db  0x00 ; '.'
000000000021aa6c         db  0x00 ; '.'
000000000021aa6d         db  0x00 ; '.'
000000000021aa6e         db  0x00 ; '.'
000000000021aa6f         db  0x00 ; '.'
000000000021aa70         db  0x00 ; '.'
000000000021aa71         db  0x00 ; '.'
000000000021aa72         db  0x00 ; '.'
000000000021aa73         db  0x00 ; '.'
000000000021aa74         db  0x00 ; '.'
000000000021aa75         db  0x00 ; '.'
000000000021aa76         db  0x00 ; '.'
000000000021aa77         db  0x00 ; '.'
000000000021aa78         db  0x00 ; '.'
000000000021aa79         db  0x00 ; '.'
000000000021aa7a         db  0x00 ; '.'
000000000021aa7b         db  0x00 ; '.'
000000000021aa7c         db  0x00 ; '.'
000000000021aa7d         db  0x00 ; '.'
000000000021aa7e         db  0x00 ; '.'
000000000021aa7f         db  0x00 ; '.'
000000000021aa80         db  0x00 ; '.'
000000000021aa81         db  0x00 ; '.'
000000000021aa82         db  0x00 ; '.'
000000000021aa83         db  0x00 ; '.'
000000000021aa84         db  0x00 ; '.'
000000000021aa85         db  0x00 ; '.'
000000000021aa86         db  0x00 ; '.'
000000000021aa87         db  0x00 ; '.'
000000000021aa88         db  0x00 ; '.'
000000000021aa89         db  0x00 ; '.'
000000000021aa8a         db  0x00 ; '.'
000000000021aa8b         db  0x00 ; '.'
000000000021aa8c         db  0x00 ; '.'
000000000021aa8d         db  0x00 ; '.'
000000000021aa8e         db  0x00 ; '.'
000000000021aa8f         db  0x00 ; '.'
000000000021aa90         db  0x00 ; '.'
000000000021aa91         db  0x00 ; '.'
000000000021aa92         db  0x00 ; '.'
000000000021aa93         db  0x00 ; '.'
000000000021aa94         db  0x00 ; '.'
000000000021aa95         db  0x00 ; '.'
000000000021aa96         db  0x00 ; '.'
000000000021aa97         db  0x00 ; '.'
000000000021aa98         db  0x00 ; '.'
000000000021aa99         db  0x00 ; '.'
000000000021aa9a         db  0x00 ; '.'
000000000021aa9b         db  0x00 ; '.'
000000000021aa9c         db  0x00 ; '.'
000000000021aa9d         db  0x00 ; '.'
000000000021aa9e         db  0x00 ; '.'
000000000021aa9f         db  0x00 ; '.'
000000000021aaa0         db  0x00 ; '.'
000000000021aaa1         db  0x00 ; '.'
000000000021aaa2         db  0x00 ; '.'
000000000021aaa3         db  0x00 ; '.'
000000000021aaa4         db  0x00 ; '.'
000000000021aaa5         db  0x00 ; '.'
000000000021aaa6         db  0x00 ; '.'
000000000021aaa7         db  0x00 ; '.'
000000000021aaa8         db  0x00 ; '.'
000000000021aaa9         db  0x00 ; '.'
000000000021aaaa         db  0x00 ; '.'
000000000021aaab         db  0x00 ; '.'
000000000021aaac         db  0x00 ; '.'
000000000021aaad         db  0x00 ; '.'
000000000021aaae         db  0x00 ; '.'
000000000021aaaf         db  0x00 ; '.'
000000000021aab0         db  0x00 ; '.'
000000000021aab1         db  0x00 ; '.'
000000000021aab2         db  0x00 ; '.'
000000000021aab3         db  0x00 ; '.'
000000000021aab4         db  0x00 ; '.'
000000000021aab5         db  0x00 ; '.'
000000000021aab6         db  0x00 ; '.'
000000000021aab7         db  0x00 ; '.'
000000000021aab8         db  0x00 ; '.'
000000000021aab9         db  0x00 ; '.'
000000000021aaba         db  0x00 ; '.'
000000000021aabb         db  0x00 ; '.'
000000000021aabc         db  0x00 ; '.'
000000000021aabd         db  0x00 ; '.'
000000000021aabe         db  0x00 ; '.'
000000000021aabf         db  0x00 ; '.'
000000000021aac0         db  0x00 ; '.'
000000000021aac1         db  0x00 ; '.'
000000000021aac2         db  0x00 ; '.'
000000000021aac3         db  0x00 ; '.'
000000000021aac4         db  0x00 ; '.'
000000000021aac5         db  0x00 ; '.'
000000000021aac6         db  0x00 ; '.'
000000000021aac7         db  0x00 ; '.'
000000000021aac8         db  0x00 ; '.'
000000000021aac9         db  0x00 ; '.'
000000000021aaca         db  0x00 ; '.'
000000000021aacb         db  0x00 ; '.'
000000000021aacc         db  0x00 ; '.'
000000000021aacd         db  0x00 ; '.'
000000000021aace         db  0x00 ; '.'
000000000021aacf         db  0x00 ; '.'
000000000021aad0         db  0x00 ; '.'
000000000021aad1         db  0x00 ; '.'
000000000021aad2         db  0x00 ; '.'
000000000021aad3         db  0x00 ; '.'
000000000021aad4         db  0x00 ; '.'
000000000021aad5         db  0x00 ; '.'
000000000021aad6         db  0x00 ; '.'
000000000021aad7         db  0x00 ; '.'
000000000021aad8         db  0x00 ; '.'
000000000021aad9         db  0x00 ; '.'
000000000021aada         db  0x00 ; '.'
000000000021aadb         db  0x00 ; '.'
000000000021aadc         db  0x00 ; '.'
000000000021aadd         db  0x00 ; '.'
000000000021aade         db  0x00 ; '.'
000000000021aadf         db  0x00 ; '.'
000000000021aae0         db  0x00 ; '.'
000000000021aae1         db  0x00 ; '.'
000000000021aae2         db  0x00 ; '.'
000000000021aae3         db  0x00 ; '.'
000000000021aae4         db  0x00 ; '.'
000000000021aae5         db  0x00 ; '.'
000000000021aae6         db  0x00 ; '.'
000000000021aae7         db  0x00 ; '.'
000000000021aae8         db  0x00 ; '.'
000000000021aae9         db  0x00 ; '.'
000000000021aaea         db  0x00 ; '.'
000000000021aaeb         db  0x00 ; '.'
000000000021aaec         db  0x00 ; '.'
000000000021aaed         db  0x00 ; '.'
000000000021aaee         db  0x00 ; '.'
000000000021aaef         db  0x00 ; '.'
000000000021aaf0         db  0x00 ; '.'
000000000021aaf1         db  0x00 ; '.'
000000000021aaf2         db  0x00 ; '.'
000000000021aaf3         db  0x00 ; '.'
000000000021aaf4         db  0x00 ; '.'
000000000021aaf5         db  0x00 ; '.'
000000000021aaf6         db  0x00 ; '.'
000000000021aaf7         db  0x00 ; '.'
000000000021aaf8         db  0x00 ; '.'
000000000021aaf9         db  0x00 ; '.'
000000000021aafa         db  0x00 ; '.'
000000000021aafb         db  0x00 ; '.'
000000000021aafc         db  0x00 ; '.'
000000000021aafd         db  0x00 ; '.'
000000000021aafe         db  0x00 ; '.'
000000000021aaff         db  0x00 ; '.'
000000000021ab00         db  0x00 ; '.'
000000000021ab01         db  0x00 ; '.'
000000000021ab02         db  0x00 ; '.'
000000000021ab03         db  0x00 ; '.'
000000000021ab04         db  0x00 ; '.'
000000000021ab05         db  0x00 ; '.'
000000000021ab06         db  0x00 ; '.'
000000000021ab07         db  0x00 ; '.'
000000000021ab08         db  0x00 ; '.'
000000000021ab09         db  0x00 ; '.'
000000000021ab0a         db  0x00 ; '.'
000000000021ab0b         db  0x00 ; '.'
000000000021ab0c         db  0x00 ; '.'
000000000021ab0d         db  0x00 ; '.'
000000000021ab0e         db  0x00 ; '.'
000000000021ab0f         db  0x00 ; '.'
000000000021ab10         db  0x00 ; '.'
000000000021ab11         db  0x00 ; '.'
000000000021ab12         db  0x00 ; '.'
000000000021ab13         db  0x00 ; '.'
000000000021ab14         db  0x00 ; '.'
000000000021ab15         db  0x00 ; '.'
000000000021ab16         db  0x00 ; '.'
000000000021ab17         db  0x00 ; '.'
000000000021ab18         db  0x00 ; '.'
000000000021ab19         db  0x00 ; '.'
000000000021ab1a         db  0x00 ; '.'
000000000021ab1b         db  0x00 ; '.'
000000000021ab1c         db  0x00 ; '.'
000000000021ab1d         db  0x00 ; '.'
000000000021ab1e         db  0x00 ; '.'
000000000021ab1f         db  0x00 ; '.'
000000000021ab20         db  0x00 ; '.'
000000000021ab21         db  0x00 ; '.'
000000000021ab22         db  0x00 ; '.'
000000000021ab23         db  0x00 ; '.'
000000000021ab24         db  0x00 ; '.'
000000000021ab25         db  0x00 ; '.'
000000000021ab26         db  0x00 ; '.'
000000000021ab27         db  0x00 ; '.'
000000000021ab28         db  0x00 ; '.'
000000000021ab29         db  0x00 ; '.'
000000000021ab2a         db  0x00 ; '.'
000000000021ab2b         db  0x00 ; '.'
000000000021ab2c         db  0x00 ; '.'
000000000021ab2d         db  0x00 ; '.'
000000000021ab2e         db  0x00 ; '.'
000000000021ab2f         db  0x00 ; '.'
000000000021ab30         db  0x00 ; '.'
000000000021ab31         db  0x00 ; '.'
000000000021ab32         db  0x00 ; '.'
000000000021ab33         db  0x00 ; '.'
000000000021ab34         db  0x00 ; '.'
000000000021ab35         db  0x00 ; '.'
000000000021ab36         db  0x00 ; '.'
000000000021ab37         db  0x00 ; '.'
000000000021ab38         db  0x00 ; '.'
000000000021ab39         db  0x00 ; '.'
000000000021ab3a         db  0x00 ; '.'
000000000021ab3b         db  0x00 ; '.'
000000000021ab3c         db  0x00 ; '.'
000000000021ab3d         db  0x00 ; '.'
000000000021ab3e         db  0x00 ; '.'
000000000021ab3f         db  0x00 ; '.'
000000000021ab40         db  0x00 ; '.'
000000000021ab41         db  0x00 ; '.'
000000000021ab42         db  0x00 ; '.'
000000000021ab43         db  0x00 ; '.'
000000000021ab44         db  0x00 ; '.'
000000000021ab45         db  0x00 ; '.'
000000000021ab46         db  0x00 ; '.'
000000000021ab47         db  0x00 ; '.'
000000000021ab48         db  0x00 ; '.'
000000000021ab49         db  0x00 ; '.'
000000000021ab4a         db  0x00 ; '.'
000000000021ab4b         db  0x00 ; '.'
000000000021ab4c         db  0x00 ; '.'
000000000021ab4d         db  0x00 ; '.'
000000000021ab4e         db  0x00 ; '.'
000000000021ab4f         db  0x00 ; '.'
000000000021ab50         db  0x00 ; '.'
000000000021ab51         db  0x00 ; '.'
000000000021ab52         db  0x00 ; '.'
000000000021ab53         db  0x00 ; '.'
000000000021ab54         db  0x00 ; '.'
000000000021ab55         db  0x00 ; '.'
000000000021ab56         db  0x00 ; '.'
000000000021ab57         db  0x00 ; '.'
000000000021ab58         db  0x00 ; '.'
000000000021ab59         db  0x00 ; '.'
000000000021ab5a         db  0x00 ; '.'
000000000021ab5b         db  0x00 ; '.'
000000000021ab5c         db  0x00 ; '.'
000000000021ab5d         db  0x00 ; '.'
000000000021ab5e         db  0x00 ; '.'
000000000021ab5f         db  0x00 ; '.'
000000000021ab60         db  0x00 ; '.'
000000000021ab61         db  0x00 ; '.'
000000000021ab62         db  0x00 ; '.'
000000000021ab63         db  0x00 ; '.'
000000000021ab64         db  0x00 ; '.'
000000000021ab65         db  0x00 ; '.'
000000000021ab66         db  0x00 ; '.'
000000000021ab67         db  0x00 ; '.'
000000000021ab68         db  0x00 ; '.'
000000000021ab69         db  0x00 ; '.'
000000000021ab6a         db  0x00 ; '.'
000000000021ab6b         db  0x00 ; '.'
000000000021ab6c         db  0x00 ; '.'
000000000021ab6d         db  0x00 ; '.'
000000000021ab6e         db  0x00 ; '.'
000000000021ab6f         db  0x00 ; '.'
000000000021ab70         db  0x00 ; '.'
000000000021ab71         db  0x00 ; '.'
000000000021ab72         db  0x00 ; '.'
000000000021ab73         db  0x00 ; '.'
000000000021ab74         db  0x00 ; '.'
000000000021ab75         db  0x00 ; '.'
000000000021ab76         db  0x00 ; '.'
000000000021ab77         db  0x00 ; '.'
000000000021ab78         db  0x00 ; '.'
000000000021ab79         db  0x00 ; '.'
000000000021ab7a         db  0x00 ; '.'
000000000021ab7b         db  0x00 ; '.'
000000000021ab7c         db  0x00 ; '.'
000000000021ab7d         db  0x00 ; '.'
000000000021ab7e         db  0x00 ; '.'
000000000021ab7f         db  0x00 ; '.'
000000000021ab80         db  0x00 ; '.'
000000000021ab81         db  0x00 ; '.'
000000000021ab82         db  0x00 ; '.'
000000000021ab83         db  0x00 ; '.'
000000000021ab84         db  0x00 ; '.'
000000000021ab85         db  0x00 ; '.'
000000000021ab86         db  0x00 ; '.'
000000000021ab87         db  0x00 ; '.'
000000000021ab88         db  0x00 ; '.'
000000000021ab89         db  0x00 ; '.'
000000000021ab8a         db  0x00 ; '.'
000000000021ab8b         db  0x00 ; '.'
000000000021ab8c         db  0x00 ; '.'
000000000021ab8d         db  0x00 ; '.'
000000000021ab8e         db  0x00 ; '.'
000000000021ab8f         db  0x00 ; '.'
000000000021ab90         db  0x00 ; '.'
000000000021ab91         db  0x00 ; '.'
000000000021ab92         db  0x00 ; '.'
000000000021ab93         db  0x00 ; '.'
000000000021ab94         db  0x00 ; '.'
000000000021ab95         db  0x00 ; '.'
000000000021ab96         db  0x00 ; '.'
000000000021ab97         db  0x00 ; '.'
000000000021ab98         db  0x00 ; '.'
000000000021ab99         db  0x00 ; '.'
000000000021ab9a         db  0x00 ; '.'
000000000021ab9b         db  0x00 ; '.'
000000000021ab9c         db  0x00 ; '.'
000000000021ab9d         db  0x00 ; '.'
000000000021ab9e         db  0x00 ; '.'
000000000021ab9f         db  0x00 ; '.'
000000000021aba0         db  0x00 ; '.'
000000000021aba1         db  0x00 ; '.'
000000000021aba2         db  0x00 ; '.'
000000000021aba3         db  0x00 ; '.'
000000000021aba4         db  0x00 ; '.'
000000000021aba5         db  0x00 ; '.'
000000000021aba6         db  0x00 ; '.'
000000000021aba7         db  0x00 ; '.'
000000000021aba8         db  0x00 ; '.'
000000000021aba9         db  0x00 ; '.'
000000000021abaa         db  0x00 ; '.'
000000000021abab         db  0x00 ; '.'
000000000021abac         db  0x00 ; '.'
000000000021abad         db  0x00 ; '.'
000000000021abae         db  0x00 ; '.'
000000000021abaf         db  0x00 ; '.'
000000000021abb0         db  0x00 ; '.'
000000000021abb1         db  0x00 ; '.'
000000000021abb2         db  0x00 ; '.'
000000000021abb3         db  0x00 ; '.'
000000000021abb4         db  0x00 ; '.'
000000000021abb5         db  0x00 ; '.'
000000000021abb6         db  0x00 ; '.'
000000000021abb7         db  0x00 ; '.'
000000000021abb8         db  0x00 ; '.'
000000000021abb9         db  0x00 ; '.'
000000000021abba         db  0x00 ; '.'
000000000021abbb         db  0x00 ; '.'
000000000021abbc         db  0x00 ; '.'
000000000021abbd         db  0x00 ; '.'
000000000021abbe         db  0x00 ; '.'
000000000021abbf         db  0x00 ; '.'
000000000021abc0         db  0x00 ; '.'
000000000021abc1         db  0x00 ; '.'
000000000021abc2         db  0x00 ; '.'
000000000021abc3         db  0x00 ; '.'
000000000021abc4         db  0x00 ; '.'
000000000021abc5         db  0x00 ; '.'
000000000021abc6         db  0x00 ; '.'
000000000021abc7         db  0x00 ; '.'
000000000021abc8         db  0x00 ; '.'
000000000021abc9         db  0x00 ; '.'
000000000021abca         db  0x00 ; '.'
000000000021abcb         db  0x00 ; '.'
000000000021abcc         db  0x00 ; '.'
000000000021abcd         db  0x00 ; '.'
000000000021abce         db  0x00 ; '.'
000000000021abcf         db  0x00 ; '.'
000000000021abd0         db  0x00 ; '.'
000000000021abd1         db  0x00 ; '.'
000000000021abd2         db  0x00 ; '.'
000000000021abd3         db  0x00 ; '.'
000000000021abd4         db  0x00 ; '.'
000000000021abd5         db  0x00 ; '.'
000000000021abd6         db  0x00 ; '.'
000000000021abd7         db  0x00 ; '.'
000000000021abd8         db  0x00 ; '.'
000000000021abd9         db  0x00 ; '.'
000000000021abda         db  0x00 ; '.'
000000000021abdb         db  0x00 ; '.'
000000000021abdc         db  0x00 ; '.'
000000000021abdd         db  0x00 ; '.'
000000000021abde         db  0x00 ; '.'
000000000021abdf         db  0x00 ; '.'
000000000021abe0         db  0x00 ; '.'
000000000021abe1         db  0x00 ; '.'
000000000021abe2         db  0x00 ; '.'
000000000021abe3         db  0x00 ; '.'
000000000021abe4         db  0x00 ; '.'
000000000021abe5         db  0x00 ; '.'
000000000021abe6         db  0x00 ; '.'
000000000021abe7         db  0x00 ; '.'
000000000021abe8         db  0x00 ; '.'
000000000021abe9         db  0x00 ; '.'
000000000021abea         db  0x00 ; '.'
000000000021abeb         db  0x00 ; '.'
000000000021abec         db  0x00 ; '.'
000000000021abed         db  0x00 ; '.'
000000000021abee         db  0x00 ; '.'
000000000021abef         db  0x00 ; '.'
000000000021abf0         db  0x00 ; '.'
000000000021abf1         db  0x00 ; '.'
000000000021abf2         db  0x00 ; '.'
000000000021abf3         db  0x00 ; '.'
000000000021abf4         db  0x00 ; '.'
000000000021abf5         db  0x00 ; '.'
000000000021abf6         db  0x00 ; '.'
000000000021abf7         db  0x00 ; '.'
000000000021abf8         db  0x00 ; '.'
000000000021abf9         db  0x00 ; '.'
000000000021abfa         db  0x00 ; '.'
000000000021abfb         db  0x00 ; '.'
000000000021abfc         db  0x00 ; '.'
000000000021abfd         db  0x00 ; '.'
000000000021abfe         db  0x00 ; '.'
000000000021abff         db  0x00 ; '.'
000000000021ac00         db  0x00 ; '.'
000000000021ac01         db  0x00 ; '.'
000000000021ac02         db  0x00 ; '.'
000000000021ac03         db  0x00 ; '.'
000000000021ac04         db  0x00 ; '.'
000000000021ac05         db  0x00 ; '.'
000000000021ac06         db  0x00 ; '.'
000000000021ac07         db  0x00 ; '.'
000000000021ac08         db  0x00 ; '.'
000000000021ac09         db  0x00 ; '.'
000000000021ac0a         db  0x00 ; '.'
000000000021ac0b         db  0x00 ; '.'
000000000021ac0c         db  0x00 ; '.'
000000000021ac0d         db  0x00 ; '.'
000000000021ac0e         db  0x00 ; '.'
000000000021ac0f         db  0x00 ; '.'
000000000021ac10         db  0x00 ; '.'
000000000021ac11         db  0x00 ; '.'
000000000021ac12         db  0x00 ; '.'
000000000021ac13         db  0x00 ; '.'
000000000021ac14         db  0x00 ; '.'
000000000021ac15         db  0x00 ; '.'
000000000021ac16         db  0x00 ; '.'
000000000021ac17         db  0x00 ; '.'
000000000021ac18         db  0x00 ; '.'
000000000021ac19         db  0x00 ; '.'
000000000021ac1a         db  0x00 ; '.'
000000000021ac1b         db  0x00 ; '.'
000000000021ac1c         db  0x00 ; '.'
000000000021ac1d         db  0x00 ; '.'
000000000021ac1e         db  0x00 ; '.'
000000000021ac1f         db  0x00 ; '.'
000000000021ac20         db  0x00 ; '.'
000000000021ac21         db  0x00 ; '.'
000000000021ac22         db  0x00 ; '.'
000000000021ac23         db  0x00 ; '.'
000000000021ac24         db  0x00 ; '.'
000000000021ac25         db  0x00 ; '.'
000000000021ac26         db  0x00 ; '.'
000000000021ac27         db  0x00 ; '.'
000000000021ac28         db  0x00 ; '.'
000000000021ac29         db  0x00 ; '.'
000000000021ac2a         db  0x00 ; '.'
000000000021ac2b         db  0x00 ; '.'
000000000021ac2c         db  0x00 ; '.'
000000000021ac2d         db  0x00 ; '.'
000000000021ac2e         db  0x00 ; '.'
000000000021ac2f         db  0x00 ; '.'
000000000021ac30         db  0x00 ; '.'
000000000021ac31         db  0x00 ; '.'
000000000021ac32         db  0x00 ; '.'
000000000021ac33         db  0x00 ; '.'
000000000021ac34         db  0x00 ; '.'
000000000021ac35         db  0x00 ; '.'
000000000021ac36         db  0x00 ; '.'
000000000021ac37         db  0x00 ; '.'
000000000021ac38         db  0x00 ; '.'
000000000021ac39         db  0x00 ; '.'
000000000021ac3a         db  0x00 ; '.'
000000000021ac3b         db  0x00 ; '.'
000000000021ac3c         db  0x00 ; '.'
000000000021ac3d         db  0x00 ; '.'
000000000021ac3e         db  0x00 ; '.'
000000000021ac3f         db  0x00 ; '.'
000000000021ac40         db  0x00 ; '.'
000000000021ac41         db  0x00 ; '.'
000000000021ac42         db  0x00 ; '.'
000000000021ac43         db  0x00 ; '.'
000000000021ac44         db  0x00 ; '.'
000000000021ac45         db  0x00 ; '.'
000000000021ac46         db  0x00 ; '.'
000000000021ac47         db  0x00 ; '.'
000000000021ac48         db  0x00 ; '.'
000000000021ac49         db  0x00 ; '.'
000000000021ac4a         db  0x00 ; '.'
000000000021ac4b         db  0x00 ; '.'
000000000021ac4c         db  0x00 ; '.'
000000000021ac4d         db  0x00 ; '.'
000000000021ac4e         db  0x00 ; '.'
000000000021ac4f         db  0x00 ; '.'
000000000021ac50         db  0x00 ; '.'
000000000021ac51         db  0x00 ; '.'
000000000021ac52         db  0x00 ; '.'
000000000021ac53         db  0x00 ; '.'
000000000021ac54         db  0x00 ; '.'
000000000021ac55         db  0x00 ; '.'
000000000021ac56         db  0x00 ; '.'
000000000021ac57         db  0x00 ; '.'
000000000021ac58         db  0x00 ; '.'
000000000021ac59         db  0x00 ; '.'
000000000021ac5a         db  0x00 ; '.'
000000000021ac5b         db  0x00 ; '.'
000000000021ac5c         db  0x00 ; '.'
000000000021ac5d         db  0x00 ; '.'
000000000021ac5e         db  0x00 ; '.'
000000000021ac5f         db  0x00 ; '.'
000000000021ac60         db  0x00 ; '.'
000000000021ac61         db  0x00 ; '.'
000000000021ac62         db  0x00 ; '.'
000000000021ac63         db  0x00 ; '.'
000000000021ac64         db  0x00 ; '.'
000000000021ac65         db  0x00 ; '.'
000000000021ac66         db  0x00 ; '.'
000000000021ac67         db  0x00 ; '.'
000000000021ac68         db  0x00 ; '.'
000000000021ac69         db  0x00 ; '.'
000000000021ac6a         db  0x00 ; '.'
000000000021ac6b         db  0x00 ; '.'
000000000021ac6c         db  0x00 ; '.'
000000000021ac6d         db  0x00 ; '.'
000000000021ac6e         db  0x00 ; '.'
000000000021ac6f         db  0x00 ; '.'
000000000021ac70         db  0x00 ; '.'
000000000021ac71         db  0x00 ; '.'
000000000021ac72         db  0x00 ; '.'
000000000021ac73         db  0x00 ; '.'
000000000021ac74         db  0x00 ; '.'
000000000021ac75         db  0x00 ; '.'
000000000021ac76         db  0x00 ; '.'
000000000021ac77         db  0x00 ; '.'
000000000021ac78         db  0x00 ; '.'
000000000021ac79         db  0x00 ; '.'
000000000021ac7a         db  0x00 ; '.'
000000000021ac7b         db  0x00 ; '.'
000000000021ac7c         db  0x00 ; '.'
000000000021ac7d         db  0x00 ; '.'
000000000021ac7e         db  0x00 ; '.'
000000000021ac7f         db  0x00 ; '.'
000000000021ac80         db  0x00 ; '.'
000000000021ac81         db  0x00 ; '.'
000000000021ac82         db  0x00 ; '.'
000000000021ac83         db  0x00 ; '.'
000000000021ac84         db  0x00 ; '.'
000000000021ac85         db  0x00 ; '.'
000000000021ac86         db  0x00 ; '.'
000000000021ac87         db  0x00 ; '.'
000000000021ac88         db  0x00 ; '.'
000000000021ac89         db  0x00 ; '.'
000000000021ac8a         db  0x00 ; '.'
000000000021ac8b         db  0x00 ; '.'
000000000021ac8c         db  0x00 ; '.'
000000000021ac8d         db  0x00 ; '.'
000000000021ac8e         db  0x00 ; '.'
000000000021ac8f         db  0x00 ; '.'
000000000021ac90         db  0x00 ; '.'
000000000021ac91         db  0x00 ; '.'
000000000021ac92         db  0x00 ; '.'
000000000021ac93         db  0x00 ; '.'
000000000021ac94         db  0x00 ; '.'
000000000021ac95         db  0x00 ; '.'
000000000021ac96         db  0x00 ; '.'
000000000021ac97         db  0x00 ; '.'
000000000021ac98         db  0x00 ; '.'
000000000021ac99         db  0x00 ; '.'
000000000021ac9a         db  0x00 ; '.'
000000000021ac9b         db  0x00 ; '.'
000000000021ac9c         db  0x00 ; '.'
000000000021ac9d         db  0x00 ; '.'
000000000021ac9e         db  0x00 ; '.'
000000000021ac9f         db  0x00 ; '.'
000000000021aca0         db  0x00 ; '.'
000000000021aca1         db  0x00 ; '.'
000000000021aca2         db  0x00 ; '.'
000000000021aca3         db  0x00 ; '.'
000000000021aca4         db  0x00 ; '.'
000000000021aca5         db  0x00 ; '.'
000000000021aca6         db  0x00 ; '.'
000000000021aca7         db  0x00 ; '.'
000000000021aca8         db  0x00 ; '.'
000000000021aca9         db  0x00 ; '.'
000000000021acaa         db  0x00 ; '.'
000000000021acab         db  0x00 ; '.'
000000000021acac         db  0x00 ; '.'
000000000021acad         db  0x00 ; '.'
000000000021acae         db  0x00 ; '.'
000000000021acaf         db  0x00 ; '.'
000000000021acb0         db  0x00 ; '.'
000000000021acb1         db  0x00 ; '.'
000000000021acb2         db  0x00 ; '.'
000000000021acb3         db  0x00 ; '.'
000000000021acb4         db  0x00 ; '.'
000000000021acb5         db  0x00 ; '.'
000000000021acb6         db  0x00 ; '.'
000000000021acb7         db  0x00 ; '.'
000000000021acb8         db  0x00 ; '.'
000000000021acb9         db  0x00 ; '.'
000000000021acba         db  0x00 ; '.'
000000000021acbb         db  0x00 ; '.'
000000000021acbc         db  0x00 ; '.'
000000000021acbd         db  0x00 ; '.'
000000000021acbe         db  0x00 ; '.'
000000000021acbf         db  0x00 ; '.'
000000000021acc0         db  0x00 ; '.'
000000000021acc1         db  0x00 ; '.'
000000000021acc2         db  0x00 ; '.'
000000000021acc3         db  0x00 ; '.'
000000000021acc4         db  0x00 ; '.'
000000000021acc5         db  0x00 ; '.'
000000000021acc6         db  0x00 ; '.'
000000000021acc7         db  0x00 ; '.'
000000000021acc8         db  0x00 ; '.'
000000000021acc9         db  0x00 ; '.'
000000000021acca         db  0x00 ; '.'
000000000021accb         db  0x00 ; '.'
000000000021accc         db  0x00 ; '.'
000000000021accd         db  0x00 ; '.'
000000000021acce         db  0x00 ; '.'
000000000021accf         db  0x00 ; '.'
000000000021acd0         db  0x00 ; '.'
000000000021acd1         db  0x00 ; '.'
000000000021acd2         db  0x00 ; '.'
000000000021acd3         db  0x00 ; '.'
000000000021acd4         db  0x00 ; '.'
000000000021acd5         db  0x00 ; '.'
000000000021acd6         db  0x00 ; '.'
000000000021acd7         db  0x00 ; '.'
000000000021acd8         db  0x00 ; '.'
000000000021acd9         db  0x00 ; '.'
000000000021acda         db  0x00 ; '.'
000000000021acdb         db  0x00 ; '.'
000000000021acdc         db  0x00 ; '.'
000000000021acdd         db  0x00 ; '.'
000000000021acde         db  0x00 ; '.'
000000000021acdf         db  0x00 ; '.'
000000000021ace0         db  0x00 ; '.'
000000000021ace1         db  0x00 ; '.'
000000000021ace2         db  0x00 ; '.'
000000000021ace3         db  0x00 ; '.'
000000000021ace4         db  0x00 ; '.'
000000000021ace5         db  0x00 ; '.'
000000000021ace6         db  0x00 ; '.'
000000000021ace7         db  0x00 ; '.'
000000000021ace8         db  0x00 ; '.'
000000000021ace9         db  0x00 ; '.'
000000000021acea         db  0x00 ; '.'
000000000021aceb         db  0x00 ; '.'
000000000021acec         db  0x00 ; '.'
000000000021aced         db  0x00 ; '.'
000000000021acee         db  0x00 ; '.'
000000000021acef         db  0x00 ; '.'
000000000021acf0         db  0x00 ; '.'
000000000021acf1         db  0x00 ; '.'
000000000021acf2         db  0x00 ; '.'
000000000021acf3         db  0x00 ; '.'
000000000021acf4         db  0x00 ; '.'
000000000021acf5         db  0x00 ; '.'
000000000021acf6         db  0x00 ; '.'
000000000021acf7         db  0x00 ; '.'
000000000021acf8         db  0x00 ; '.'
000000000021acf9         db  0x00 ; '.'
000000000021acfa         db  0x00 ; '.'
000000000021acfb         db  0x00 ; '.'
000000000021acfc         db  0x00 ; '.'
000000000021acfd         db  0x00 ; '.'
000000000021acfe         db  0x00 ; '.'
000000000021acff         db  0x00 ; '.'
000000000021ad00         db  0x00 ; '.'
000000000021ad01         db  0x00 ; '.'
000000000021ad02         db  0x00 ; '.'
000000000021ad03         db  0x00 ; '.'
000000000021ad04         db  0x00 ; '.'
000000000021ad05         db  0x00 ; '.'
000000000021ad06         db  0x00 ; '.'
000000000021ad07         db  0x00 ; '.'
000000000021ad08         db  0x00 ; '.'
000000000021ad09         db  0x00 ; '.'
000000000021ad0a         db  0x00 ; '.'
000000000021ad0b         db  0x00 ; '.'
000000000021ad0c         db  0x00 ; '.'
000000000021ad0d         db  0x00 ; '.'
000000000021ad0e         db  0x00 ; '.'
000000000021ad0f         db  0x00 ; '.'
000000000021ad10         db  0x00 ; '.'
000000000021ad11         db  0x00 ; '.'
000000000021ad12         db  0x00 ; '.'
000000000021ad13         db  0x00 ; '.'
000000000021ad14         db  0x00 ; '.'
000000000021ad15         db  0x00 ; '.'
000000000021ad16         db  0x00 ; '.'
000000000021ad17         db  0x00 ; '.'
000000000021ad18         db  0x00 ; '.'
000000000021ad19         db  0x00 ; '.'
000000000021ad1a         db  0x00 ; '.'
000000000021ad1b         db  0x00 ; '.'
000000000021ad1c         db  0x00 ; '.'
000000000021ad1d         db  0x00 ; '.'
000000000021ad1e         db  0x00 ; '.'
000000000021ad1f         db  0x00 ; '.'
000000000021ad20         db  0x00 ; '.'
000000000021ad21         db  0x00 ; '.'
000000000021ad22         db  0x00 ; '.'
000000000021ad23         db  0x00 ; '.'
000000000021ad24         db  0x00 ; '.'
000000000021ad25         db  0x00 ; '.'
000000000021ad26         db  0x00 ; '.'
000000000021ad27         db  0x00 ; '.'
000000000021ad28         db  0x00 ; '.'
000000000021ad29         db  0x00 ; '.'
000000000021ad2a         db  0x00 ; '.'
000000000021ad2b         db  0x00 ; '.'
000000000021ad2c         db  0x00 ; '.'
000000000021ad2d         db  0x00 ; '.'
000000000021ad2e         db  0x00 ; '.'
000000000021ad2f         db  0x00 ; '.'
000000000021ad30         db  0x00 ; '.'
000000000021ad31         db  0x00 ; '.'
000000000021ad32         db  0x00 ; '.'
000000000021ad33         db  0x00 ; '.'
000000000021ad34         db  0x00 ; '.'
000000000021ad35         db  0x00 ; '.'
000000000021ad36         db  0x00 ; '.'
000000000021ad37         db  0x00 ; '.'
000000000021ad38         db  0x00 ; '.'
000000000021ad39         db  0x00 ; '.'
000000000021ad3a         db  0x00 ; '.'
000000000021ad3b         db  0x00 ; '.'
000000000021ad3c         db  0x00 ; '.'
000000000021ad3d         db  0x00 ; '.'
000000000021ad3e         db  0x00 ; '.'
000000000021ad3f         db  0x00 ; '.'
000000000021ad40         db  0x00 ; '.'
000000000021ad41         db  0x00 ; '.'
000000000021ad42         db  0x00 ; '.'
000000000021ad43         db  0x00 ; '.'
000000000021ad44         db  0x00 ; '.'
000000000021ad45         db  0x00 ; '.'
000000000021ad46         db  0x00 ; '.'
000000000021ad47         db  0x00 ; '.'
000000000021ad48         db  0x00 ; '.'
000000000021ad49         db  0x00 ; '.'
000000000021ad4a         db  0x00 ; '.'
000000000021ad4b         db  0x00 ; '.'
000000000021ad4c         db  0x00 ; '.'
000000000021ad4d         db  0x00 ; '.'
000000000021ad4e         db  0x00 ; '.'
000000000021ad4f         db  0x00 ; '.'
000000000021ad50         db  0x00 ; '.'
000000000021ad51         db  0x00 ; '.'
000000000021ad52         db  0x00 ; '.'
000000000021ad53         db  0x00 ; '.'
000000000021ad54         db  0x00 ; '.'
000000000021ad55         db  0x00 ; '.'
000000000021ad56         db  0x00 ; '.'
000000000021ad57         db  0x00 ; '.'
000000000021ad58         db  0x00 ; '.'
000000000021ad59         db  0x00 ; '.'
000000000021ad5a         db  0x00 ; '.'
000000000021ad5b         db  0x00 ; '.'
000000000021ad5c         db  0x00 ; '.'
000000000021ad5d         db  0x00 ; '.'
000000000021ad5e         db  0x00 ; '.'
000000000021ad5f         db  0x00 ; '.'
000000000021ad60         db  0x00 ; '.'
000000000021ad61         db  0x00 ; '.'
000000000021ad62         db  0x00 ; '.'
000000000021ad63         db  0x00 ; '.'
000000000021ad64         db  0x00 ; '.'
000000000021ad65         db  0x00 ; '.'
000000000021ad66         db  0x00 ; '.'
000000000021ad67         db  0x00 ; '.'
000000000021ad68         db  0x00 ; '.'
000000000021ad69         db  0x00 ; '.'
000000000021ad6a         db  0x00 ; '.'
000000000021ad6b         db  0x00 ; '.'
000000000021ad6c         db  0x00 ; '.'
000000000021ad6d         db  0x00 ; '.'
000000000021ad6e         db  0x00 ; '.'
000000000021ad6f         db  0x00 ; '.'
000000000021ad70         db  0x00 ; '.'
000000000021ad71         db  0x00 ; '.'
000000000021ad72         db  0x00 ; '.'
000000000021ad73         db  0x00 ; '.'
000000000021ad74         db  0x00 ; '.'
000000000021ad75         db  0x00 ; '.'
000000000021ad76         db  0x00 ; '.'
000000000021ad77         db  0x00 ; '.'
000000000021ad78         db  0x00 ; '.'
000000000021ad79         db  0x00 ; '.'
000000000021ad7a         db  0x00 ; '.'
000000000021ad7b         db  0x00 ; '.'
000000000021ad7c         db  0x00 ; '.'
000000000021ad7d         db  0x00 ; '.'
000000000021ad7e         db  0x00 ; '.'
000000000021ad7f         db  0x00 ; '.'
000000000021ad80         db  0x00 ; '.'
000000000021ad81         db  0x00 ; '.'
000000000021ad82         db  0x00 ; '.'
000000000021ad83         db  0x00 ; '.'
000000000021ad84         db  0x00 ; '.'
000000000021ad85         db  0x00 ; '.'
000000000021ad86         db  0x00 ; '.'
000000000021ad87         db  0x00 ; '.'
000000000021ad88         db  0x00 ; '.'
000000000021ad89         db  0x00 ; '.'
000000000021ad8a         db  0x00 ; '.'
000000000021ad8b         db  0x00 ; '.'
000000000021ad8c         db  0x00 ; '.'
000000000021ad8d         db  0x00 ; '.'
000000000021ad8e         db  0x00 ; '.'
000000000021ad8f         db  0x00 ; '.'
000000000021ad90         db  0x00 ; '.'
000000000021ad91         db  0x00 ; '.'
000000000021ad92         db  0x00 ; '.'
000000000021ad93         db  0x00 ; '.'
000000000021ad94         db  0x00 ; '.'
000000000021ad95         db  0x00 ; '.'
000000000021ad96         db  0x00 ; '.'
000000000021ad97         db  0x00 ; '.'
000000000021ad98         db  0x00 ; '.'
000000000021ad99         db  0x00 ; '.'
000000000021ad9a         db  0x00 ; '.'
000000000021ad9b         db  0x00 ; '.'
000000000021ad9c         db  0x00 ; '.'
000000000021ad9d         db  0x00 ; '.'
000000000021ad9e         db  0x00 ; '.'
000000000021ad9f         db  0x00 ; '.'
000000000021ada0         db  0x00 ; '.'
000000000021ada1         db  0x00 ; '.'
000000000021ada2         db  0x00 ; '.'
000000000021ada3         db  0x00 ; '.'
000000000021ada4         db  0x00 ; '.'
000000000021ada5         db  0x00 ; '.'
000000000021ada6         db  0x00 ; '.'
000000000021ada7         db  0x00 ; '.'
000000000021ada8         db  0x00 ; '.'
000000000021ada9         db  0x00 ; '.'
000000000021adaa         db  0x00 ; '.'
000000000021adab         db  0x00 ; '.'
000000000021adac         db  0x00 ; '.'
000000000021adad         db  0x00 ; '.'
000000000021adae         db  0x00 ; '.'
000000000021adaf         db  0x00 ; '.'
000000000021adb0         db  0x00 ; '.'
000000000021adb1         db  0x00 ; '.'
000000000021adb2         db  0x00 ; '.'
000000000021adb3         db  0x00 ; '.'
000000000021adb4         db  0x00 ; '.'
000000000021adb5         db  0x00 ; '.'
000000000021adb6         db  0x00 ; '.'
000000000021adb7         db  0x00 ; '.'
000000000021adb8         db  0x00 ; '.'
000000000021adb9         db  0x00 ; '.'
000000000021adba         db  0x00 ; '.'
000000000021adbb         db  0x00 ; '.'
000000000021adbc         db  0x00 ; '.'
000000000021adbd         db  0x00 ; '.'
000000000021adbe         db  0x00 ; '.'
000000000021adbf         db  0x00 ; '.'
000000000021adc0         db  0x00 ; '.'
000000000021adc1         db  0x00 ; '.'
000000000021adc2         db  0x00 ; '.'
000000000021adc3         db  0x00 ; '.'
000000000021adc4         db  0x00 ; '.'
000000000021adc5         db  0x00 ; '.'
000000000021adc6         db  0x00 ; '.'
000000000021adc7         db  0x00 ; '.'
000000000021adc8         db  0x00 ; '.'
000000000021adc9         db  0x00 ; '.'
000000000021adca         db  0x00 ; '.'
000000000021adcb         db  0x00 ; '.'
000000000021adcc         db  0x00 ; '.'
000000000021adcd         db  0x00 ; '.'
000000000021adce         db  0x00 ; '.'
000000000021adcf         db  0x00 ; '.'
000000000021add0         db  0x00 ; '.'
000000000021add1         db  0x00 ; '.'
000000000021add2         db  0x00 ; '.'
000000000021add3         db  0x00 ; '.'
000000000021add4         db  0x00 ; '.'
000000000021add5         db  0x00 ; '.'
000000000021add6         db  0x00 ; '.'
000000000021add7         db  0x00 ; '.'
000000000021add8         db  0x00 ; '.'
000000000021add9         db  0x00 ; '.'
000000000021adda         db  0x00 ; '.'
000000000021addb         db  0x00 ; '.'
000000000021addc         db  0x00 ; '.'
000000000021addd         db  0x00 ; '.'
000000000021adde         db  0x00 ; '.'
000000000021addf         db  0x00 ; '.'
000000000021ade0         db  0x00 ; '.'
000000000021ade1         db  0x00 ; '.'
000000000021ade2         db  0x00 ; '.'
000000000021ade3         db  0x00 ; '.'
000000000021ade4         db  0x00 ; '.'
000000000021ade5         db  0x00 ; '.'
000000000021ade6         db  0x00 ; '.'
000000000021ade7         db  0x00 ; '.'
000000000021ade8         db  0x00 ; '.'
000000000021ade9         db  0x00 ; '.'
000000000021adea         db  0x00 ; '.'
000000000021adeb         db  0x00 ; '.'
000000000021adec         db  0x00 ; '.'
000000000021aded         db  0x00 ; '.'
000000000021adee         db  0x00 ; '.'
000000000021adef         db  0x00 ; '.'
000000000021adf0         db  0x00 ; '.'
000000000021adf1         db  0x00 ; '.'
000000000021adf2         db  0x00 ; '.'
000000000021adf3         db  0x00 ; '.'
000000000021adf4         db  0x00 ; '.'
000000000021adf5         db  0x00 ; '.'
000000000021adf6         db  0x00 ; '.'
000000000021adf7         db  0x00 ; '.'
000000000021adf8         db  0x00 ; '.'
000000000021adf9         db  0x00 ; '.'
000000000021adfa         db  0x00 ; '.'
000000000021adfb         db  0x00 ; '.'
000000000021adfc         db  0x00 ; '.'
000000000021adfd         db  0x00 ; '.'
000000000021adfe         db  0x00 ; '.'
000000000021adff         db  0x00 ; '.'
000000000021ae00         db  0x00 ; '.'
000000000021ae01         db  0x00 ; '.'
000000000021ae02         db  0x00 ; '.'
000000000021ae03         db  0x00 ; '.'
000000000021ae04         db  0x00 ; '.'
000000000021ae05         db  0x00 ; '.'
000000000021ae06         db  0x00 ; '.'
000000000021ae07         db  0x00 ; '.'
000000000021ae08         db  0x00 ; '.'
000000000021ae09         db  0x00 ; '.'
000000000021ae0a         db  0x00 ; '.'
000000000021ae0b         db  0x00 ; '.'
000000000021ae0c         db  0x00 ; '.'
000000000021ae0d         db  0x00 ; '.'
000000000021ae0e         db  0x00 ; '.'
000000000021ae0f         db  0x00 ; '.'
000000000021ae10         db  0x00 ; '.'
000000000021ae11         db  0x00 ; '.'
000000000021ae12         db  0x00 ; '.'
000000000021ae13         db  0x00 ; '.'
000000000021ae14         db  0x00 ; '.'
000000000021ae15         db  0x00 ; '.'
000000000021ae16         db  0x00 ; '.'
000000000021ae17         db  0x00 ; '.'
000000000021ae18         db  0x00 ; '.'
000000000021ae19         db  0x00 ; '.'
000000000021ae1a         db  0x00 ; '.'
000000000021ae1b         db  0x00 ; '.'
000000000021ae1c         db  0x00 ; '.'
000000000021ae1d         db  0x00 ; '.'
000000000021ae1e         db  0x00 ; '.'
000000000021ae1f         db  0x00 ; '.'
000000000021ae20         db  0x00 ; '.'
000000000021ae21         db  0x00 ; '.'
000000000021ae22         db  0x00 ; '.'
000000000021ae23         db  0x00 ; '.'
000000000021ae24         db  0x00 ; '.'
000000000021ae25         db  0x00 ; '.'
000000000021ae26         db  0x00 ; '.'
000000000021ae27         db  0x00 ; '.'
000000000021ae28         db  0x00 ; '.'
000000000021ae29         db  0x00 ; '.'
000000000021ae2a         db  0x00 ; '.'
000000000021ae2b         db  0x00 ; '.'
000000000021ae2c         db  0x00 ; '.'
000000000021ae2d         db  0x00 ; '.'
000000000021ae2e         db  0x00 ; '.'
000000000021ae2f         db  0x00 ; '.'
000000000021ae30         db  0x00 ; '.'
000000000021ae31         db  0x00 ; '.'
000000000021ae32         db  0x00 ; '.'
000000000021ae33         db  0x00 ; '.'
000000000021ae34         db  0x00 ; '.'
000000000021ae35         db  0x00 ; '.'
000000000021ae36         db  0x00 ; '.'
000000000021ae37         db  0x00 ; '.'
000000000021ae38         db  0x00 ; '.'
000000000021ae39         db  0x00 ; '.'
000000000021ae3a         db  0x00 ; '.'
000000000021ae3b         db  0x00 ; '.'
000000000021ae3c         db  0x00 ; '.'
000000000021ae3d         db  0x00 ; '.'
000000000021ae3e         db  0x00 ; '.'
000000000021ae3f         db  0x00 ; '.'
000000000021ae40         db  0x00 ; '.'
000000000021ae41         db  0x00 ; '.'
000000000021ae42         db  0x00 ; '.'
000000000021ae43         db  0x00 ; '.'
000000000021ae44         db  0x00 ; '.'
000000000021ae45         db  0x00 ; '.'
000000000021ae46         db  0x00 ; '.'
000000000021ae47         db  0x00 ; '.'
000000000021ae48         db  0x00 ; '.'
000000000021ae49         db  0x00 ; '.'
000000000021ae4a         db  0x00 ; '.'
000000000021ae4b         db  0x00 ; '.'
000000000021ae4c         db  0x00 ; '.'
000000000021ae4d         db  0x00 ; '.'
000000000021ae4e         db  0x00 ; '.'
000000000021ae4f         db  0x00 ; '.'
000000000021ae50         db  0x00 ; '.'
000000000021ae51         db  0x00 ; '.'
000000000021ae52         db  0x00 ; '.'
000000000021ae53         db  0x00 ; '.'
000000000021ae54         db  0x00 ; '.'
000000000021ae55         db  0x00 ; '.'
000000000021ae56         db  0x00 ; '.'
000000000021ae57         db  0x00 ; '.'
000000000021ae58         db  0x00 ; '.'
000000000021ae59         db  0x00 ; '.'
000000000021ae5a         db  0x00 ; '.'
000000000021ae5b         db  0x00 ; '.'
000000000021ae5c         db  0x00 ; '.'
000000000021ae5d         db  0x00 ; '.'
000000000021ae5e         db  0x00 ; '.'
000000000021ae5f         db  0x00 ; '.'
000000000021ae60         db  0x00 ; '.'
000000000021ae61         db  0x00 ; '.'
000000000021ae62         db  0x00 ; '.'
000000000021ae63         db  0x00 ; '.'
000000000021ae64         db  0x00 ; '.'
000000000021ae65         db  0x00 ; '.'
000000000021ae66         db  0x00 ; '.'
000000000021ae67         db  0x00 ; '.'
000000000021ae68         db  0x00 ; '.'
000000000021ae69         db  0x00 ; '.'
000000000021ae6a         db  0x00 ; '.'
000000000021ae6b         db  0x00 ; '.'
000000000021ae6c         db  0x00 ; '.'
000000000021ae6d         db  0x00 ; '.'
000000000021ae6e         db  0x00 ; '.'
000000000021ae6f         db  0x00 ; '.'
000000000021ae70         db  0x00 ; '.'
000000000021ae71         db  0x00 ; '.'
000000000021ae72         db  0x00 ; '.'
000000000021ae73         db  0x00 ; '.'
000000000021ae74         db  0x00 ; '.'
000000000021ae75         db  0x00 ; '.'
000000000021ae76         db  0x00 ; '.'
000000000021ae77         db  0x00 ; '.'
000000000021ae78         db  0x00 ; '.'
000000000021ae79         db  0x00 ; '.'
000000000021ae7a         db  0x00 ; '.'
000000000021ae7b         db  0x00 ; '.'
000000000021ae7c         db  0x00 ; '.'
000000000021ae7d         db  0x00 ; '.'
000000000021ae7e         db  0x00 ; '.'
000000000021ae7f         db  0x00 ; '.'
000000000021ae80         db  0x00 ; '.'
000000000021ae81         db  0x00 ; '.'
000000000021ae82         db  0x00 ; '.'
000000000021ae83         db  0x00 ; '.'
000000000021ae84         db  0x00 ; '.'
000000000021ae85         db  0x00 ; '.'
000000000021ae86         db  0x00 ; '.'
000000000021ae87         db  0x00 ; '.'
000000000021ae88         db  0x00 ; '.'
000000000021ae89         db  0x00 ; '.'
000000000021ae8a         db  0x00 ; '.'
000000000021ae8b         db  0x00 ; '.'
000000000021ae8c         db  0x00 ; '.'
000000000021ae8d         db  0x00 ; '.'
000000000021ae8e         db  0x00 ; '.'
000000000021ae8f         db  0x00 ; '.'
000000000021ae90         db  0x00 ; '.'
000000000021ae91         db  0x00 ; '.'
000000000021ae92         db  0x00 ; '.'
000000000021ae93         db  0x00 ; '.'
000000000021ae94         db  0x00 ; '.'
000000000021ae95         db  0x00 ; '.'
000000000021ae96         db  0x00 ; '.'
000000000021ae97         db  0x00 ; '.'
000000000021ae98         db  0x00 ; '.'
000000000021ae99         db  0x00 ; '.'
000000000021ae9a         db  0x00 ; '.'
000000000021ae9b         db  0x00 ; '.'
000000000021ae9c         db  0x00 ; '.'
000000000021ae9d         db  0x00 ; '.'
000000000021ae9e         db  0x00 ; '.'
000000000021ae9f         db  0x00 ; '.'
000000000021aea0         db  0x00 ; '.'
000000000021aea1         db  0x00 ; '.'
000000000021aea2         db  0x00 ; '.'
000000000021aea3         db  0x00 ; '.'
000000000021aea4         db  0x00 ; '.'
000000000021aea5         db  0x00 ; '.'
000000000021aea6         db  0x00 ; '.'
000000000021aea7         db  0x00 ; '.'
000000000021aea8         db  0x00 ; '.'
000000000021aea9         db  0x00 ; '.'
000000000021aeaa         db  0x00 ; '.'
000000000021aeab         db  0x00 ; '.'
000000000021aeac         db  0x00 ; '.'
000000000021aead         db  0x00 ; '.'
000000000021aeae         db  0x00 ; '.'
000000000021aeaf         db  0x00 ; '.'
000000000021aeb0         db  0x00 ; '.'
000000000021aeb1         db  0x00 ; '.'
000000000021aeb2         db  0x00 ; '.'
000000000021aeb3         db  0x00 ; '.'
000000000021aeb4         db  0x00 ; '.'
000000000021aeb5         db  0x00 ; '.'
000000000021aeb6         db  0x00 ; '.'
000000000021aeb7         db  0x00 ; '.'
000000000021aeb8         db  0x00 ; '.'
000000000021aeb9         db  0x00 ; '.'
000000000021aeba         db  0x00 ; '.'
000000000021aebb         db  0x00 ; '.'
000000000021aebc         db  0x00 ; '.'
000000000021aebd         db  0x00 ; '.'
000000000021aebe         db  0x00 ; '.'
000000000021aebf         db  0x00 ; '.'
000000000021aec0         db  0x00 ; '.'
000000000021aec1         db  0x00 ; '.'
000000000021aec2         db  0x00 ; '.'
000000000021aec3         db  0x00 ; '.'
000000000021aec4         db  0x00 ; '.'
000000000021aec5         db  0x00 ; '.'
000000000021aec6         db  0x00 ; '.'
000000000021aec7         db  0x00 ; '.'
000000000021aec8         db  0x00 ; '.'
000000000021aec9         db  0x00 ; '.'
000000000021aeca         db  0x00 ; '.'
000000000021aecb         db  0x00 ; '.'
000000000021aecc         db  0x00 ; '.'
000000000021aecd         db  0x00 ; '.'
000000000021aece         db  0x00 ; '.'
000000000021aecf         db  0x00 ; '.'
000000000021aed0         db  0x00 ; '.'
000000000021aed1         db  0x00 ; '.'
000000000021aed2         db  0x00 ; '.'
000000000021aed3         db  0x00 ; '.'
000000000021aed4         db  0x00 ; '.'
000000000021aed5         db  0x00 ; '.'
000000000021aed6         db  0x00 ; '.'
000000000021aed7         db  0x00 ; '.'
000000000021aed8         db  0x00 ; '.'
000000000021aed9         db  0x00 ; '.'
000000000021aeda         db  0x00 ; '.'
000000000021aedb         db  0x00 ; '.'
000000000021aedc         db  0x00 ; '.'
000000000021aedd         db  0x00 ; '.'
000000000021aede         db  0x00 ; '.'
000000000021aedf         db  0x00 ; '.'
000000000021aee0         db  0x00 ; '.'
000000000021aee1         db  0x00 ; '.'
000000000021aee2         db  0x00 ; '.'
000000000021aee3         db  0x00 ; '.'
000000000021aee4         db  0x00 ; '.'
000000000021aee5         db  0x00 ; '.'
000000000021aee6         db  0x00 ; '.'
000000000021aee7         db  0x00 ; '.'
000000000021aee8         db  0x00 ; '.'
000000000021aee9         db  0x00 ; '.'
000000000021aeea         db  0x00 ; '.'
000000000021aeeb         db  0x00 ; '.'
000000000021aeec         db  0x00 ; '.'
000000000021aeed         db  0x00 ; '.'
000000000021aeee         db  0x00 ; '.'
000000000021aeef         db  0x00 ; '.'
000000000021aef0         db  0x00 ; '.'
000000000021aef1         db  0x00 ; '.'
000000000021aef2         db  0x00 ; '.'
000000000021aef3         db  0x00 ; '.'
000000000021aef4         db  0x00 ; '.'
000000000021aef5         db  0x00 ; '.'
000000000021aef6         db  0x00 ; '.'
000000000021aef7         db  0x00 ; '.'
000000000021aef8         db  0x00 ; '.'
000000000021aef9         db  0x00 ; '.'
000000000021aefa         db  0x00 ; '.'
000000000021aefb         db  0x00 ; '.'
000000000021aefc         db  0x00 ; '.'
000000000021aefd         db  0x00 ; '.'
000000000021aefe         db  0x00 ; '.'
000000000021aeff         db  0x00 ; '.'
000000000021af00         db  0x00 ; '.'
000000000021af01         db  0x00 ; '.'
000000000021af02         db  0x00 ; '.'
000000000021af03         db  0x00 ; '.'
000000000021af04         db  0x00 ; '.'
000000000021af05         db  0x00 ; '.'
000000000021af06         db  0x00 ; '.'
000000000021af07         db  0x00 ; '.'
000000000021af08         db  0x00 ; '.'
000000000021af09         db  0x00 ; '.'
000000000021af0a         db  0x00 ; '.'
000000000021af0b         db  0x00 ; '.'
000000000021af0c         db  0x00 ; '.'
000000000021af0d         db  0x00 ; '.'
000000000021af0e         db  0x00 ; '.'
000000000021af0f         db  0x00 ; '.'
000000000021af10         db  0x00 ; '.'
000000000021af11         db  0x00 ; '.'
000000000021af12         db  0x00 ; '.'
000000000021af13         db  0x00 ; '.'
000000000021af14         db  0x00 ; '.'
000000000021af15         db  0x00 ; '.'
000000000021af16         db  0x00 ; '.'
000000000021af17         db  0x00 ; '.'
000000000021af18         db  0x00 ; '.'
000000000021af19         db  0x00 ; '.'
000000000021af1a         db  0x00 ; '.'
000000000021af1b         db  0x00 ; '.'
000000000021af1c         db  0x00 ; '.'
000000000021af1d         db  0x00 ; '.'
000000000021af1e         db  0x00 ; '.'
000000000021af1f         db  0x00 ; '.'
000000000021af20         db  0x00 ; '.'
000000000021af21         db  0x00 ; '.'
000000000021af22         db  0x00 ; '.'
000000000021af23         db  0x00 ; '.'
000000000021af24         db  0x00 ; '.'
000000000021af25         db  0x00 ; '.'
000000000021af26         db  0x00 ; '.'
000000000021af27         db  0x00 ; '.'
000000000021af28         db  0x00 ; '.'
000000000021af29         db  0x00 ; '.'
000000000021af2a         db  0x00 ; '.'
000000000021af2b         db  0x00 ; '.'
000000000021af2c         db  0x00 ; '.'
000000000021af2d         db  0x00 ; '.'
000000000021af2e         db  0x00 ; '.'
000000000021af2f         db  0x00 ; '.'
000000000021af30         db  0x00 ; '.'
000000000021af31         db  0x00 ; '.'
000000000021af32         db  0x00 ; '.'
000000000021af33         db  0x00 ; '.'
000000000021af34         db  0x00 ; '.'
000000000021af35         db  0x00 ; '.'
000000000021af36         db  0x00 ; '.'
000000000021af37         db  0x00 ; '.'
000000000021af38         db  0x00 ; '.'
000000000021af39         db  0x00 ; '.'
000000000021af3a         db  0x00 ; '.'
000000000021af3b         db  0x00 ; '.'
000000000021af3c         db  0x00 ; '.'
000000000021af3d         db  0x00 ; '.'
000000000021af3e         db  0x00 ; '.'
000000000021af3f         db  0x00 ; '.'
000000000021af40         db  0x00 ; '.'
000000000021af41         db  0x00 ; '.'
000000000021af42         db  0x00 ; '.'
000000000021af43         db  0x00 ; '.'
000000000021af44         db  0x00 ; '.'
000000000021af45         db  0x00 ; '.'
000000000021af46         db  0x00 ; '.'
000000000021af47         db  0x00 ; '.'
000000000021af48         db  0x00 ; '.'
000000000021af49         db  0x00 ; '.'
000000000021af4a         db  0x00 ; '.'
000000000021af4b         db  0x00 ; '.'
000000000021af4c         db  0x00 ; '.'
000000000021af4d         db  0x00 ; '.'
000000000021af4e         db  0x00 ; '.'
000000000021af4f         db  0x00 ; '.'
000000000021af50         db  0x00 ; '.'
000000000021af51         db  0x00 ; '.'
000000000021af52         db  0x00 ; '.'
000000000021af53         db  0x00 ; '.'
000000000021af54         db  0x00 ; '.'
000000000021af55         db  0x00 ; '.'
000000000021af56         db  0x00 ; '.'
000000000021af57         db  0x00 ; '.'
000000000021af58         db  0x00 ; '.'
000000000021af59         db  0x00 ; '.'
000000000021af5a         db  0x00 ; '.'
000000000021af5b         db  0x00 ; '.'
000000000021af5c         db  0x00 ; '.'
000000000021af5d         db  0x00 ; '.'
000000000021af5e         db  0x00 ; '.'
000000000021af5f         db  0x00 ; '.'
000000000021af60         db  0x00 ; '.'
000000000021af61         db  0x00 ; '.'
000000000021af62         db  0x00 ; '.'
000000000021af63         db  0x00 ; '.'
000000000021af64         db  0x00 ; '.'
000000000021af65         db  0x00 ; '.'
000000000021af66         db  0x00 ; '.'
000000000021af67         db  0x00 ; '.'
000000000021af68         db  0x00 ; '.'
000000000021af69         db  0x00 ; '.'
000000000021af6a         db  0x00 ; '.'
000000000021af6b         db  0x00 ; '.'
000000000021af6c         db  0x00 ; '.'
000000000021af6d         db  0x00 ; '.'
000000000021af6e         db  0x00 ; '.'
000000000021af6f         db  0x00 ; '.'
000000000021af70         db  0x00 ; '.'
000000000021af71         db  0x00 ; '.'
000000000021af72         db  0x00 ; '.'
000000000021af73         db  0x00 ; '.'
000000000021af74         db  0x00 ; '.'
000000000021af75         db  0x00 ; '.'
000000000021af76         db  0x00 ; '.'
000000000021af77         db  0x00 ; '.'
000000000021af78         db  0x00 ; '.'
000000000021af79         db  0x00 ; '.'
000000000021af7a         db  0x00 ; '.'
000000000021af7b         db  0x00 ; '.'
000000000021af7c         db  0x00 ; '.'
000000000021af7d         db  0x00 ; '.'
000000000021af7e         db  0x00 ; '.'
000000000021af7f         db  0x00 ; '.'
000000000021af80         db  0x00 ; '.'
000000000021af81         db  0x00 ; '.'
000000000021af82         db  0x00 ; '.'
000000000021af83         db  0x00 ; '.'
000000000021af84         db  0x00 ; '.'
000000000021af85         db  0x00 ; '.'
000000000021af86         db  0x00 ; '.'
000000000021af87         db  0x00 ; '.'
000000000021af88         db  0x00 ; '.'
000000000021af89         db  0x00 ; '.'
000000000021af8a         db  0x00 ; '.'
000000000021af8b         db  0x00 ; '.'
000000000021af8c         db  0x00 ; '.'
000000000021af8d         db  0x00 ; '.'
000000000021af8e         db  0x00 ; '.'
000000000021af8f         db  0x00 ; '.'
000000000021af90         db  0x00 ; '.'
000000000021af91         db  0x00 ; '.'
000000000021af92         db  0x00 ; '.'
000000000021af93         db  0x00 ; '.'
000000000021af94         db  0x00 ; '.'
000000000021af95         db  0x00 ; '.'
000000000021af96         db  0x00 ; '.'
000000000021af97         db  0x00 ; '.'
000000000021af98         db  0x00 ; '.'
000000000021af99         db  0x00 ; '.'
000000000021af9a         db  0x00 ; '.'
000000000021af9b         db  0x00 ; '.'
000000000021af9c         db  0x00 ; '.'
000000000021af9d         db  0x00 ; '.'
000000000021af9e         db  0x00 ; '.'
000000000021af9f         db  0x00 ; '.'
000000000021afa0         db  0x00 ; '.'
000000000021afa1         db  0x00 ; '.'
000000000021afa2         db  0x00 ; '.'
000000000021afa3         db  0x00 ; '.'
000000000021afa4         db  0x00 ; '.'
000000000021afa5         db  0x00 ; '.'
000000000021afa6         db  0x00 ; '.'
000000000021afa7         db  0x00 ; '.'
000000000021afa8         db  0x00 ; '.'
000000000021afa9         db  0x00 ; '.'
000000000021afaa         db  0x00 ; '.'
000000000021afab         db  0x00 ; '.'
000000000021afac         db  0x00 ; '.'
000000000021afad         db  0x00 ; '.'
000000000021afae         db  0x00 ; '.'
000000000021afaf         db  0x00 ; '.'
000000000021afb0         db  0x00 ; '.'
000000000021afb1         db  0x00 ; '.'
000000000021afb2         db  0x00 ; '.'
000000000021afb3         db  0x00 ; '.'
000000000021afb4         db  0x00 ; '.'
000000000021afb5         db  0x00 ; '.'
000000000021afb6         db  0x00 ; '.'
000000000021afb7         db  0x00 ; '.'
000000000021afb8         db  0x00 ; '.'
000000000021afb9         db  0x00 ; '.'
000000000021afba         db  0x00 ; '.'
000000000021afbb         db  0x00 ; '.'
000000000021afbc         db  0x00 ; '.'
000000000021afbd         db  0x00 ; '.'
000000000021afbe         db  0x00 ; '.'
000000000021afbf         db  0x00 ; '.'
000000000021afc0         db  0x00 ; '.'
000000000021afc1         db  0x00 ; '.'
000000000021afc2         db  0x00 ; '.'
000000000021afc3         db  0x00 ; '.'
000000000021afc4         db  0x00 ; '.'
000000000021afc5         db  0x00 ; '.'
000000000021afc6         db  0x00 ; '.'
000000000021afc7         db  0x00 ; '.'
000000000021afc8         db  0x00 ; '.'
000000000021afc9         db  0x00 ; '.'
000000000021afca         db  0x00 ; '.'
000000000021afcb         db  0x00 ; '.'
000000000021afcc         db  0x00 ; '.'
000000000021afcd         db  0x00 ; '.'
000000000021afce         db  0x00 ; '.'
000000000021afcf         db  0x00 ; '.'
000000000021afd0         db  0x00 ; '.'
000000000021afd1         db  0x00 ; '.'
000000000021afd2         db  0x00 ; '.'
000000000021afd3         db  0x00 ; '.'
000000000021afd4         db  0x00 ; '.'
000000000021afd5         db  0x00 ; '.'
000000000021afd6         db  0x00 ; '.'
000000000021afd7         db  0x00 ; '.'
000000000021afd8         db  0x00 ; '.'
000000000021afd9         db  0x00 ; '.'
000000000021afda         db  0x00 ; '.'
000000000021afdb         db  0x00 ; '.'
000000000021afdc         db  0x00 ; '.'
000000000021afdd         db  0x00 ; '.'
000000000021afde         db  0x00 ; '.'
000000000021afdf         db  0x00 ; '.'
000000000021afe0         db  0x00 ; '.'
000000000021afe1         db  0x00 ; '.'
000000000021afe2         db  0x00 ; '.'
000000000021afe3         db  0x00 ; '.'
000000000021afe4         db  0x00 ; '.'
000000000021afe5         db  0x00 ; '.'
000000000021afe6         db  0x00 ; '.'
000000000021afe7         db  0x00 ; '.'
000000000021afe8         db  0x00 ; '.'
000000000021afe9         db  0x00 ; '.'
000000000021afea         db  0x00 ; '.'
000000000021afeb         db  0x00 ; '.'
000000000021afec         db  0x00 ; '.'
000000000021afed         db  0x00 ; '.'
000000000021afee         db  0x00 ; '.'
000000000021afef         db  0x00 ; '.'
000000000021aff0         db  0x00 ; '.'
000000000021aff1         db  0x00 ; '.'
000000000021aff2         db  0x00 ; '.'
000000000021aff3         db  0x00 ; '.'
000000000021aff4         db  0x00 ; '.'
000000000021aff5         db  0x00 ; '.'
000000000021aff6         db  0x00 ; '.'
000000000021aff7         db  0x00 ; '.'
000000000021aff8         db  0x00 ; '.'
000000000021aff9         db  0x00 ; '.'
000000000021affa         db  0x00 ; '.'
000000000021affb         db  0x00 ; '.'
000000000021affc         db  0x00 ; '.'
000000000021affd         db  0x00 ; '.'
000000000021affe         db  0x00 ; '.'
000000000021afff         db  0x00 ; '.'
000000000021b000         db  0x00 ; '.'
000000000021b001         db  0x00 ; '.'
000000000021b002         db  0x00 ; '.'
000000000021b003         db  0x00 ; '.'
000000000021b004         db  0x00 ; '.'
000000000021b005         db  0x00 ; '.'
000000000021b006         db  0x00 ; '.'
000000000021b007         db  0x00 ; '.'
000000000021b008         db  0x00 ; '.'
000000000021b009         db  0x00 ; '.'
000000000021b00a         db  0x00 ; '.'
000000000021b00b         db  0x00 ; '.'
000000000021b00c         db  0x00 ; '.'
000000000021b00d         db  0x00 ; '.'
000000000021b00e         db  0x00 ; '.'
000000000021b00f         db  0x00 ; '.'
000000000021b010         db  0x00 ; '.'
000000000021b011         db  0x00 ; '.'
000000000021b012         db  0x00 ; '.'
000000000021b013         db  0x00 ; '.'
000000000021b014         db  0x00 ; '.'
000000000021b015         db  0x00 ; '.'
000000000021b016         db  0x00 ; '.'
000000000021b017         db  0x00 ; '.'
000000000021b018         db  0x00 ; '.'
000000000021b019         db  0x00 ; '.'
000000000021b01a         db  0x00 ; '.'
000000000021b01b         db  0x00 ; '.'
000000000021b01c         db  0x00 ; '.'
000000000021b01d         db  0x00 ; '.'
000000000021b01e         db  0x00 ; '.'
000000000021b01f         db  0x00 ; '.'
000000000021b020         db  0x00 ; '.'
000000000021b021         db  0x00 ; '.'
000000000021b022         db  0x00 ; '.'
000000000021b023         db  0x00 ; '.'
000000000021b024         db  0x00 ; '.'
000000000021b025         db  0x00 ; '.'
000000000021b026         db  0x00 ; '.'
000000000021b027         db  0x00 ; '.'
000000000021b028         db  0x00 ; '.'
000000000021b029         db  0x00 ; '.'
000000000021b02a         db  0x00 ; '.'
000000000021b02b         db  0x00 ; '.'
000000000021b02c         db  0x00 ; '.'
000000000021b02d         db  0x00 ; '.'
000000000021b02e         db  0x00 ; '.'
000000000021b02f         db  0x00 ; '.'
000000000021b030         db  0x00 ; '.'
000000000021b031         db  0x00 ; '.'
000000000021b032         db  0x00 ; '.'
000000000021b033         db  0x00 ; '.'
000000000021b034         db  0x00 ; '.'
000000000021b035         db  0x00 ; '.'
000000000021b036         db  0x00 ; '.'
000000000021b037         db  0x00 ; '.'
000000000021b038         db  0x00 ; '.'
000000000021b039         db  0x00 ; '.'
000000000021b03a         db  0x00 ; '.'
000000000021b03b         db  0x00 ; '.'
000000000021b03c         db  0x00 ; '.'
000000000021b03d         db  0x00 ; '.'
000000000021b03e         db  0x00 ; '.'
000000000021b03f         db  0x00 ; '.'
000000000021b040         db  0x00 ; '.'
000000000021b041         db  0x00 ; '.'
000000000021b042         db  0x00 ; '.'
000000000021b043         db  0x00 ; '.'
000000000021b044         db  0x00 ; '.'
000000000021b045         db  0x00 ; '.'
000000000021b046         db  0x00 ; '.'
000000000021b047         db  0x00 ; '.'
000000000021b048         db  0x00 ; '.'
000000000021b049         db  0x00 ; '.'
000000000021b04a         db  0x00 ; '.'
000000000021b04b         db  0x00 ; '.'
000000000021b04c         db  0x00 ; '.'
000000000021b04d         db  0x00 ; '.'
000000000021b04e         db  0x00 ; '.'
000000000021b04f         db  0x00 ; '.'
000000000021b050         db  0x00 ; '.'
000000000021b051         db  0x00 ; '.'
000000000021b052         db  0x00 ; '.'
000000000021b053         db  0x00 ; '.'
000000000021b054         db  0x00 ; '.'
000000000021b055         db  0x00 ; '.'
000000000021b056         db  0x00 ; '.'
000000000021b057         db  0x00 ; '.'
000000000021b058         db  0x00 ; '.'
000000000021b059         db  0x00 ; '.'
000000000021b05a         db  0x00 ; '.'
000000000021b05b         db  0x00 ; '.'
000000000021b05c         db  0x00 ; '.'
000000000021b05d         db  0x00 ; '.'
000000000021b05e         db  0x00 ; '.'
000000000021b05f         db  0x00 ; '.'
000000000021b060         db  0x00 ; '.'
000000000021b061         db  0x00 ; '.'
000000000021b062         db  0x00 ; '.'
000000000021b063         db  0x00 ; '.'
000000000021b064         db  0x00 ; '.'
000000000021b065         db  0x00 ; '.'
000000000021b066         db  0x00 ; '.'
000000000021b067         db  0x00 ; '.'
000000000021b068         db  0x00 ; '.'
000000000021b069         db  0x00 ; '.'
000000000021b06a         db  0x00 ; '.'
000000000021b06b         db  0x00 ; '.'
000000000021b06c         db  0x00 ; '.'
000000000021b06d         db  0x00 ; '.'
000000000021b06e         db  0x00 ; '.'
000000000021b06f         db  0x00 ; '.'
000000000021b070         db  0x00 ; '.'
000000000021b071         db  0x00 ; '.'
000000000021b072         db  0x00 ; '.'
000000000021b073         db  0x00 ; '.'
000000000021b074         db  0x00 ; '.'
000000000021b075         db  0x00 ; '.'
000000000021b076         db  0x00 ; '.'
000000000021b077         db  0x00 ; '.'
000000000021b078         db  0x00 ; '.'
000000000021b079         db  0x00 ; '.'
000000000021b07a         db  0x00 ; '.'
000000000021b07b         db  0x00 ; '.'
000000000021b07c         db  0x00 ; '.'
000000000021b07d         db  0x00 ; '.'
000000000021b07e         db  0x00 ; '.'
000000000021b07f         db  0x00 ; '.'
000000000021b080         db  0x00 ; '.'
000000000021b081         db  0x00 ; '.'
000000000021b082         db  0x00 ; '.'
000000000021b083         db  0x00 ; '.'
000000000021b084         db  0x00 ; '.'
000000000021b085         db  0x00 ; '.'
000000000021b086         db  0x00 ; '.'
000000000021b087         db  0x00 ; '.'
000000000021b088         db  0x00 ; '.'
000000000021b089         db  0x00 ; '.'
000000000021b08a         db  0x00 ; '.'
000000000021b08b         db  0x00 ; '.'
000000000021b08c         db  0x00 ; '.'
000000000021b08d         db  0x00 ; '.'
000000000021b08e         db  0x00 ; '.'
000000000021b08f         db  0x00 ; '.'
000000000021b090         db  0x00 ; '.'
000000000021b091         db  0x00 ; '.'
000000000021b092         db  0x00 ; '.'
000000000021b093         db  0x00 ; '.'
000000000021b094         db  0x00 ; '.'
000000000021b095         db  0x00 ; '.'
000000000021b096         db  0x00 ; '.'
000000000021b097         db  0x00 ; '.'
000000000021b098         db  0x00 ; '.'
000000000021b099         db  0x00 ; '.'
000000000021b09a         db  0x00 ; '.'
000000000021b09b         db  0x00 ; '.'
000000000021b09c         db  0x00 ; '.'
000000000021b09d         db  0x00 ; '.'
000000000021b09e         db  0x00 ; '.'
000000000021b09f         db  0x00 ; '.'
000000000021b0a0         db  0x00 ; '.'
000000000021b0a1         db  0x00 ; '.'
000000000021b0a2         db  0x00 ; '.'
000000000021b0a3         db  0x00 ; '.'
000000000021b0a4         db  0x00 ; '.'
000000000021b0a5         db  0x00 ; '.'
000000000021b0a6         db  0x00 ; '.'
000000000021b0a7         db  0x00 ; '.'
000000000021b0a8         db  0x00 ; '.'
000000000021b0a9         db  0x00 ; '.'
000000000021b0aa         db  0x00 ; '.'
000000000021b0ab         db  0x00 ; '.'
000000000021b0ac         db  0x00 ; '.'
000000000021b0ad         db  0x00 ; '.'
000000000021b0ae         db  0x00 ; '.'
000000000021b0af         db  0x00 ; '.'
000000000021b0b0         db  0x00 ; '.'
000000000021b0b1         db  0x00 ; '.'
000000000021b0b2         db  0x00 ; '.'
000000000021b0b3         db  0x00 ; '.'
000000000021b0b4         db  0x00 ; '.'
000000000021b0b5         db  0x00 ; '.'
000000000021b0b6         db  0x00 ; '.'
000000000021b0b7         db  0x00 ; '.'
000000000021b0b8         db  0x00 ; '.'
000000000021b0b9         db  0x00 ; '.'
000000000021b0ba         db  0x00 ; '.'
000000000021b0bb         db  0x00 ; '.'
000000000021b0bc         db  0x00 ; '.'
000000000021b0bd         db  0x00 ; '.'
000000000021b0be         db  0x00 ; '.'
000000000021b0bf         db  0x00 ; '.'
000000000021b0c0         db  0x00 ; '.'
000000000021b0c1         db  0x00 ; '.'
000000000021b0c2         db  0x00 ; '.'
000000000021b0c3         db  0x00 ; '.'
000000000021b0c4         db  0x00 ; '.'
000000000021b0c5         db  0x00 ; '.'
000000000021b0c6         db  0x00 ; '.'
000000000021b0c7         db  0x00 ; '.'
000000000021b0c8         db  0x00 ; '.'
000000000021b0c9         db  0x00 ; '.'
000000000021b0ca         db  0x00 ; '.'
000000000021b0cb         db  0x00 ; '.'
000000000021b0cc         db  0x00 ; '.'
000000000021b0cd         db  0x00 ; '.'
000000000021b0ce         db  0x00 ; '.'
000000000021b0cf         db  0x00 ; '.'
000000000021b0d0         db  0x00 ; '.'
000000000021b0d1         db  0x00 ; '.'
000000000021b0d2         db  0x00 ; '.'
000000000021b0d3         db  0x00 ; '.'
000000000021b0d4         db  0x00 ; '.'
000000000021b0d5         db  0x00 ; '.'
000000000021b0d6         db  0x00 ; '.'
000000000021b0d7         db  0x00 ; '.'
000000000021b0d8         db  0x00 ; '.'
000000000021b0d9         db  0x00 ; '.'
000000000021b0da         db  0x00 ; '.'
000000000021b0db         db  0x00 ; '.'
000000000021b0dc         db  0x00 ; '.'
000000000021b0dd         db  0x00 ; '.'
000000000021b0de         db  0x00 ; '.'
000000000021b0df         db  0x00 ; '.'
                     bytes_in_buffer.7000:
000000000021b0e0         db  0x00 ; '.'                                         ; DATA XREF=output+17, output+134, output+168, output+219
000000000021b0e1         db  0x00 ; '.'
000000000021b0e2         db  0x00 ; '.'
000000000021b0e3         db  0x00 ; '.'
000000000021b0e4         db  0x00 ; '.'
000000000021b0e5         db  0x00 ; '.'
000000000021b0e6         db  0x00 ; '.'
000000000021b0e7         db  0x00 ; '.'
                     tmp_fp.7066:
000000000021b0e8         db  0x00 ; '.'                                         ; DATA XREF=main+838, main+873, main+909, main+1503
000000000021b0e9         db  0x00 ; '.'
000000000021b0ea         db  0x00 ; '.'
000000000021b0eb         db  0x00 ; '.'
000000000021b0ec         db  0x00 ; '.'
000000000021b0ed         db  0x00 ; '.'
000000000021b0ee         db  0x00 ; '.'
000000000021b0ef         db  0x00 ; '.'
                     tempfile.7065:
000000000021b0f0         db  0x00 ; '.'                                         ; DATA XREF=main+824, main+902, main+1135, main+1463, main+1510, main+1709, main+1723, main+1811
000000000021b0f1         db  0x00 ; '.'
000000000021b0f2         db  0x00 ; '.'
000000000021b0f3         db  0x00 ; '.'
000000000021b0f4         db  0x00 ; '.'
000000000021b0f5         db  0x00 ; '.'
000000000021b0f6         db  0x00 ; '.'
000000000021b0f7         db  0x00 ; '.'
000000000021b0f8         db  0x00 ; '.'
000000000021b0f9         db  0x00 ; '.'
000000000021b0fa         db  0x00 ; '.'
000000000021b0fb         db  0x00 ; '.'
000000000021b0fc         db  0x00 ; '.'
000000000021b0fd         db  0x00 ; '.'
000000000021b0fe         db  0x00 ; '.'
000000000021b0ff         db  0x00 ; '.'
                     regs:
000000000021b100         db  0x00 ; '.'                                         ; DATA XREF=tac_seekable+409
000000000021b101         db  0x00 ; '.'
000000000021b102         db  0x00 ; '.'
000000000021b103         db  0x00 ; '.'
000000000021b104         db  0x00 ; '.'
000000000021b105         db  0x00 ; '.'
000000000021b106         db  0x00 ; '.'
000000000021b107         db  0x00 ; '.'
                     qword_21b108:
000000000021b108         db  0x00 ; '.'                                         ; DATA XREF=tac_seekable+454
000000000021b109         db  0x00 ; '.'
000000000021b10a         db  0x00 ; '.'
000000000021b10b         db  0x00 ; '.'
000000000021b10c         db  0x00 ; '.'
000000000021b10d         db  0x00 ; '.'
000000000021b10e         db  0x00 ; '.'
000000000021b10f         db  0x00 ; '.'
                     qword_21b110:
000000000021b110         db  0x00 ; '.'                                         ; DATA XREF=tac_seekable+471
000000000021b111         db  0x00 ; '.'
000000000021b112         db  0x00 ; '.'
000000000021b113         db  0x00 ; '.'
000000000021b114         db  0x00 ; '.'
000000000021b115         db  0x00 ; '.'
000000000021b116         db  0x00 ; '.'
000000000021b117         db  0x00 ; '.'
000000000021b118         db  0x00 ; '.'
000000000021b119         db  0x00 ; '.'
000000000021b11a         db  0x00 ; '.'
000000000021b11b         db  0x00 ; '.'
000000000021b11c         db  0x00 ; '.'
000000000021b11d         db  0x00 ; '.'
000000000021b11e         db  0x00 ; '.'
000000000021b11f         db  0x00 ; '.'
                     compiled_separator_fastmap:
000000000021b120         db  0x00 ; '.'                                         ; DATA XREF=main+345
000000000021b121         db  0x00 ; '.'
000000000021b122         db  0x00 ; '.'
000000000021b123         db  0x00 ; '.'
000000000021b124         db  0x00 ; '.'
000000000021b125         db  0x00 ; '.'
000000000021b126         db  0x00 ; '.'
000000000021b127         db  0x00 ; '.'
000000000021b128         db  0x00 ; '.'
000000000021b129         db  0x00 ; '.'
000000000021b12a         db  0x00 ; '.'
000000000021b12b         db  0x00 ; '.'
000000000021b12c         db  0x00 ; '.'
000000000021b12d         db  0x00 ; '.'
000000000021b12e         db  0x00 ; '.'
000000000021b12f         db  0x00 ; '.'
000000000021b130         db  0x00 ; '.'
000000000021b131         db  0x00 ; '.'
000000000021b132         db  0x00 ; '.'
000000000021b133         db  0x00 ; '.'
000000000021b134         db  0x00 ; '.'
000000000021b135         db  0x00 ; '.'
000000000021b136         db  0x00 ; '.'
000000000021b137         db  0x00 ; '.'
000000000021b138         db  0x00 ; '.'
000000000021b139         db  0x00 ; '.'
000000000021b13a         db  0x00 ; '.'
000000000021b13b         db  0x00 ; '.'
000000000021b13c         db  0x00 ; '.'
000000000021b13d         db  0x00 ; '.'
000000000021b13e         db  0x00 ; '.'
000000000021b13f         db  0x00 ; '.'
000000000021b140         db  0x00 ; '.'
000000000021b141         db  0x00 ; '.'
000000000021b142         db  0x00 ; '.'
000000000021b143         db  0x00 ; '.'
000000000021b144         db  0x00 ; '.'
000000000021b145         db  0x00 ; '.'
000000000021b146         db  0x00 ; '.'
000000000021b147         db  0x00 ; '.'
000000000021b148         db  0x00 ; '.'
000000000021b149         db  0x00 ; '.'
000000000021b14a         db  0x00 ; '.'
000000000021b14b         db  0x00 ; '.'
000000000021b14c         db  0x00 ; '.'
000000000021b14d         db  0x00 ; '.'
000000000021b14e         db  0x00 ; '.'
000000000021b14f         db  0x00 ; '.'
000000000021b150         db  0x00 ; '.'
000000000021b151         db  0x00 ; '.'
000000000021b152         db  0x00 ; '.'
000000000021b153         db  0x00 ; '.'
000000000021b154         db  0x00 ; '.'
000000000021b155         db  0x00 ; '.'
000000000021b156         db  0x00 ; '.'
000000000021b157         db  0x00 ; '.'
000000000021b158         db  0x00 ; '.'
000000000021b159         db  0x00 ; '.'
000000000021b15a         db  0x00 ; '.'
000000000021b15b         db  0x00 ; '.'
000000000021b15c         db  0x00 ; '.'
000000000021b15d         db  0x00 ; '.'
000000000021b15e         db  0x00 ; '.'
000000000021b15f         db  0x00 ; '.'
000000000021b160         db  0x00 ; '.'
000000000021b161         db  0x00 ; '.'
000000000021b162         db  0x00 ; '.'
000000000021b163         db  0x00 ; '.'
000000000021b164         db  0x00 ; '.'
000000000021b165         db  0x00 ; '.'
000000000021b166         db  0x00 ; '.'
000000000021b167         db  0x00 ; '.'
000000000021b168         db  0x00 ; '.'
000000000021b169         db  0x00 ; '.'
000000000021b16a         db  0x00 ; '.'
000000000021b16b         db  0x00 ; '.'
000000000021b16c         db  0x00 ; '.'
000000000021b16d         db  0x00 ; '.'
000000000021b16e         db  0x00 ; '.'
000000000021b16f         db  0x00 ; '.'
000000000021b170         db  0x00 ; '.'
000000000021b171         db  0x00 ; '.'
000000000021b172         db  0x00 ; '.'
000000000021b173         db  0x00 ; '.'
000000000021b174         db  0x00 ; '.'
000000000021b175         db  0x00 ; '.'
000000000021b176         db  0x00 ; '.'
000000000021b177         db  0x00 ; '.'
000000000021b178         db  0x00 ; '.'
000000000021b179         db  0x00 ; '.'
000000000021b17a         db  0x00 ; '.'
000000000021b17b         db  0x00 ; '.'
000000000021b17c         db  0x00 ; '.'
000000000021b17d         db  0x00 ; '.'
000000000021b17e         db  0x00 ; '.'
000000000021b17f         db  0x00 ; '.'
000000000021b180         db  0x00 ; '.'
000000000021b181         db  0x00 ; '.'
000000000021b182         db  0x00 ; '.'
000000000021b183         db  0x00 ; '.'
000000000021b184         db  0x00 ; '.'
000000000021b185         db  0x00 ; '.'
000000000021b186         db  0x00 ; '.'
000000000021b187         db  0x00 ; '.'
000000000021b188         db  0x00 ; '.'
000000000021b189         db  0x00 ; '.'
000000000021b18a         db  0x00 ; '.'
000000000021b18b         db  0x00 ; '.'
000000000021b18c         db  0x00 ; '.'
000000000021b18d         db  0x00 ; '.'
000000000021b18e         db  0x00 ; '.'
000000000021b18f         db  0x00 ; '.'
000000000021b190         db  0x00 ; '.'
000000000021b191         db  0x00 ; '.'
000000000021b192         db  0x00 ; '.'
000000000021b193         db  0x00 ; '.'
000000000021b194         db  0x00 ; '.'
000000000021b195         db  0x00 ; '.'
000000000021b196         db  0x00 ; '.'
000000000021b197         db  0x00 ; '.'
000000000021b198         db  0x00 ; '.'
000000000021b199         db  0x00 ; '.'
000000000021b19a         db  0x00 ; '.'
000000000021b19b         db  0x00 ; '.'
000000000021b19c         db  0x00 ; '.'
000000000021b19d         db  0x00 ; '.'
000000000021b19e         db  0x00 ; '.'
000000000021b19f         db  0x00 ; '.'
000000000021b1a0         db  0x00 ; '.'
000000000021b1a1         db  0x00 ; '.'
000000000021b1a2         db  0x00 ; '.'
000000000021b1a3         db  0x00 ; '.'
000000000021b1a4         db  0x00 ; '.'
000000000021b1a5         db  0x00 ; '.'
000000000021b1a6         db  0x00 ; '.'
000000000021b1a7         db  0x00 ; '.'
000000000021b1a8         db  0x00 ; '.'
000000000021b1a9         db  0x00 ; '.'
000000000021b1aa         db  0x00 ; '.'
000000000021b1ab         db  0x00 ; '.'
000000000021b1ac         db  0x00 ; '.'
000000000021b1ad         db  0x00 ; '.'
000000000021b1ae         db  0x00 ; '.'
000000000021b1af         db  0x00 ; '.'
000000000021b1b0         db  0x00 ; '.'
000000000021b1b1         db  0x00 ; '.'
000000000021b1b2         db  0x00 ; '.'
000000000021b1b3         db  0x00 ; '.'
000000000021b1b4         db  0x00 ; '.'
000000000021b1b5         db  0x00 ; '.'
000000000021b1b6         db  0x00 ; '.'
000000000021b1b7         db  0x00 ; '.'
000000000021b1b8         db  0x00 ; '.'
000000000021b1b9         db  0x00 ; '.'
000000000021b1ba         db  0x00 ; '.'
000000000021b1bb         db  0x00 ; '.'
000000000021b1bc         db  0x00 ; '.'
000000000021b1bd         db  0x00 ; '.'
000000000021b1be         db  0x00 ; '.'
000000000021b1bf         db  0x00 ; '.'
000000000021b1c0         db  0x00 ; '.'
000000000021b1c1         db  0x00 ; '.'
000000000021b1c2         db  0x00 ; '.'
000000000021b1c3         db  0x00 ; '.'
000000000021b1c4         db  0x00 ; '.'
000000000021b1c5         db  0x00 ; '.'
000000000021b1c6         db  0x00 ; '.'
000000000021b1c7         db  0x00 ; '.'
000000000021b1c8         db  0x00 ; '.'
000000000021b1c9         db  0x00 ; '.'
000000000021b1ca         db  0x00 ; '.'
000000000021b1cb         db  0x00 ; '.'
000000000021b1cc         db  0x00 ; '.'
000000000021b1cd         db  0x00 ; '.'
000000000021b1ce         db  0x00 ; '.'
000000000021b1cf         db  0x00 ; '.'
000000000021b1d0         db  0x00 ; '.'
000000000021b1d1         db  0x00 ; '.'
000000000021b1d2         db  0x00 ; '.'
000000000021b1d3         db  0x00 ; '.'
000000000021b1d4         db  0x00 ; '.'
000000000021b1d5         db  0x00 ; '.'
000000000021b1d6         db  0x00 ; '.'
000000000021b1d7         db  0x00 ; '.'
000000000021b1d8         db  0x00 ; '.'
000000000021b1d9         db  0x00 ; '.'
000000000021b1da         db  0x00 ; '.'
000000000021b1db         db  0x00 ; '.'
000000000021b1dc         db  0x00 ; '.'
000000000021b1dd         db  0x00 ; '.'
000000000021b1de         db  0x00 ; '.'
000000000021b1df         db  0x00 ; '.'
000000000021b1e0         db  0x00 ; '.'
000000000021b1e1         db  0x00 ; '.'
000000000021b1e2         db  0x00 ; '.'
000000000021b1e3         db  0x00 ; '.'
000000000021b1e4         db  0x00 ; '.'
000000000021b1e5         db  0x00 ; '.'
000000000021b1e6         db  0x00 ; '.'
000000000021b1e7         db  0x00 ; '.'
000000000021b1e8         db  0x00 ; '.'
000000000021b1e9         db  0x00 ; '.'
000000000021b1ea         db  0x00 ; '.'
000000000021b1eb         db  0x00 ; '.'
000000000021b1ec         db  0x00 ; '.'
000000000021b1ed         db  0x00 ; '.'
000000000021b1ee         db  0x00 ; '.'
000000000021b1ef         db  0x00 ; '.'
000000000021b1f0         db  0x00 ; '.'
000000000021b1f1         db  0x00 ; '.'
000000000021b1f2         db  0x00 ; '.'
000000000021b1f3         db  0x00 ; '.'
000000000021b1f4         db  0x00 ; '.'
000000000021b1f5         db  0x00 ; '.'
000000000021b1f6         db  0x00 ; '.'
000000000021b1f7         db  0x00 ; '.'
000000000021b1f8         db  0x00 ; '.'
000000000021b1f9         db  0x00 ; '.'
000000000021b1fa         db  0x00 ; '.'
000000000021b1fb         db  0x00 ; '.'
000000000021b1fc         db  0x00 ; '.'
000000000021b1fd         db  0x00 ; '.'
000000000021b1fe         db  0x00 ; '.'
000000000021b1ff         db  0x00 ; '.'
000000000021b200         db  0x00 ; '.'
000000000021b201         db  0x00 ; '.'
000000000021b202         db  0x00 ; '.'
000000000021b203         db  0x00 ; '.'
000000000021b204         db  0x00 ; '.'
000000000021b205         db  0x00 ; '.'
000000000021b206         db  0x00 ; '.'
000000000021b207         db  0x00 ; '.'
000000000021b208         db  0x00 ; '.'
000000000021b209         db  0x00 ; '.'
000000000021b20a         db  0x00 ; '.'
000000000021b20b         db  0x00 ; '.'
000000000021b20c         db  0x00 ; '.'
000000000021b20d         db  0x00 ; '.'
000000000021b20e         db  0x00 ; '.'
000000000021b20f         db  0x00 ; '.'
000000000021b210         db  0x00 ; '.'
000000000021b211         db  0x00 ; '.'
000000000021b212         db  0x00 ; '.'
000000000021b213         db  0x00 ; '.'
000000000021b214         db  0x00 ; '.'
000000000021b215         db  0x00 ; '.'
000000000021b216         db  0x00 ; '.'
000000000021b217         db  0x00 ; '.'
000000000021b218         db  0x00 ; '.'
000000000021b219         db  0x00 ; '.'
000000000021b21a         db  0x00 ; '.'
000000000021b21b         db  0x00 ; '.'
000000000021b21c         db  0x00 ; '.'
000000000021b21d         db  0x00 ; '.'
000000000021b21e         db  0x00 ; '.'
000000000021b21f         db  0x00 ; '.'
                     compiled_separator:
000000000021b220         db  0x00 ; '.'                                         ; DATA XREF=main+355, main+401, tac_seekable+416
000000000021b221         db  0x00 ; '.'
000000000021b222         db  0x00 ; '.'
000000000021b223         db  0x00 ; '.'
000000000021b224         db  0x00 ; '.'
000000000021b225         db  0x00 ; '.'
000000000021b226         db  0x00 ; '.'
000000000021b227         db  0x00 ; '.'
                     qword_21b228:
000000000021b228         db  0x00 ; '.'                                         ; DATA XREF=main+366
000000000021b229         db  0x00 ; '.'
000000000021b22a         db  0x00 ; '.'
000000000021b22b         db  0x00 ; '.'
000000000021b22c         db  0x00 ; '.'
000000000021b22d         db  0x00 ; '.'
000000000021b22e         db  0x00 ; '.'
000000000021b22f         db  0x00 ; '.'
000000000021b230         db  0x00 ; '.'
000000000021b231         db  0x00 ; '.'
000000000021b232         db  0x00 ; '.'
000000000021b233         db  0x00 ; '.'
000000000021b234         db  0x00 ; '.'
000000000021b235         db  0x00 ; '.'
000000000021b236         db  0x00 ; '.'
000000000021b237         db  0x00 ; '.'
000000000021b238         db  0x00 ; '.'
000000000021b239         db  0x00 ; '.'
000000000021b23a         db  0x00 ; '.'
000000000021b23b         db  0x00 ; '.'
000000000021b23c         db  0x00 ; '.'
000000000021b23d         db  0x00 ; '.'
000000000021b23e         db  0x00 ; '.'
000000000021b23f         db  0x00 ; '.'
                     qword_21b240:
000000000021b240         db  0x00 ; '.'                                         ; DATA XREF=main+392
000000000021b241         db  0x00 ; '.'
000000000021b242         db  0x00 ; '.'
000000000021b243         db  0x00 ; '.'
000000000021b244         db  0x00 ; '.'
000000000021b245         db  0x00 ; '.'
000000000021b246         db  0x00 ; '.'
000000000021b247         db  0x00 ; '.'
                     qword_21b248:
000000000021b248         db  0x00 ; '.'                                         ; DATA XREF=main+377
000000000021b249         db  0x00 ; '.'
000000000021b24a         db  0x00 ; '.'
000000000021b24b         db  0x00 ; '.'
000000000021b24c         db  0x00 ; '.'
000000000021b24d         db  0x00 ; '.'
000000000021b24e         db  0x00 ; '.'
000000000021b24f         db  0x00 ; '.'
000000000021b250         db  0x00 ; '.'
000000000021b251         db  0x00 ; '.'
000000000021b252         db  0x00 ; '.'
000000000021b253         db  0x00 ; '.'
000000000021b254         db  0x00 ; '.'
000000000021b255         db  0x00 ; '.'
000000000021b256         db  0x00 ; '.'
000000000021b257         db  0x00 ; '.'
000000000021b258         db  0x00 ; '.'
000000000021b259         db  0x00 ; '.'
000000000021b25a         db  0x00 ; '.'
000000000021b25b         db  0x00 ; '.'
000000000021b25c         db  0x00 ; '.'
000000000021b25d         db  0x00 ; '.'
000000000021b25e         db  0x00 ; '.'
000000000021b25f         db  0x00 ; '.'
                     G_buffer_size:
000000000021b260         db  0x00 ; '.'                                         ; DATA XREF=main+528, tac_seekable+544, tac_seekable+579
000000000021b261         db  0x00 ; '.'
000000000021b262         db  0x00 ; '.'
000000000021b263         db  0x00 ; '.'
000000000021b264         db  0x00 ; '.'
000000000021b265         db  0x00 ; '.'
000000000021b266         db  0x00 ; '.'
000000000021b267         db  0x00 ; '.'
                     read_size:
000000000021b268         db  0x00 ; '.'                                         ; DATA XREF=main+444, main+503, main+973, main+1839, tac_seekable+24, tac_seekable+124, tac_seekable+227, tac_seekable+266, tac_seekable+518, tac_seekable+557, tac_seekable+613
000000000021b269         db  0x00 ; '.'
000000000021b26a         db  0x00 ; '.'
000000000021b26b         db  0x00 ; '.'
000000000021b26c         db  0x00 ; '.'
000000000021b26d         db  0x00 ; '.'
000000000021b26e         db  0x00 ; '.'
000000000021b26f         db  0x00 ; '.'
                     G_buffer:
000000000021b270         db  0x00 ; '.'                                         ; DATA XREF=main+561, main+581, main+938, main+980, main+1637, tac_seekable+99, tac_seekable+284, tac_seekable+315, tac_seekable+461, tac_seekable+606, tac_seekable+655
000000000021b271         db  0x00 ; '.'
000000000021b272         db  0x00 ; '.'
000000000021b273         db  0x00 ; '.'
000000000021b274         db  0x00 ; '.'
000000000021b275         db  0x00 ; '.'
000000000021b276         db  0x00 ; '.'
000000000021b277         db  0x00 ; '.'
                     match_length:
000000000021b278         db  0x00 ; '.'                                         ; DATA XREF=main+666, tac_seekable+53, tac_seekable+488, tac_seekable+854, tac_seekable+912
000000000021b279         db  0x00 ; '.'
000000000021b27a         db  0x00 ; '.'
000000000021b27b         db  0x00 ; '.'
000000000021b27c         db  0x00 ; '.'
000000000021b27d         db  0x00 ; '.'
000000000021b27e         db  0x00 ; '.'
000000000021b27f         db  0x00 ; '.'
                     sentinel_length:
000000000021b280         db  0x00 ; '.'                                         ; DATA XREF=main+101, main+296, main+312, main+437, main+551, main+659, tac_seekable+322, tac_seekable+533, tac_seekable+707, tac_seekable+749, tac_seekable+888
000000000021b281         db  0x00 ; '.'
000000000021b282         db  0x00 ; '.'
000000000021b283         db  0x00 ; '.'
000000000021b284         db  0x00 ; '.'
000000000021b285         db  0x00 ; '.'
000000000021b286         db  0x00 ; '.'
000000000021b287         db  0x00 ; '.'
                     separator_ends_record:
000000000021b288         db  0x00 ; '.'                                         ; DATA XREF=main+112, main+280, tac_seekable+840
                     have_read_stdin:
000000000021b289         db  0x00 ; '.'                                         ; DATA XREF=main+770, main+1096
000000000021b28a         db  0x00 ; '.'
000000000021b28b         db  0x00 ; '.'
000000000021b28c         db  0x00 ; '.'
000000000021b28d         db  0x00 ; '.'
000000000021b28e         db  0x00 ; '.'
000000000021b28f         db  0x00 ; '.'
                     separator:
000000000021b290         db  0x00 ; '.'                                         ; DATA XREF=main+119, main+186, main+320, main+1611, tac_seekable+17
000000000021b291         db  0x00 ; '.'
000000000021b292         db  0x00 ; '.'
000000000021b293         db  0x00 ; '.'
000000000021b294         db  0x00 ; '.'
000000000021b295         db  0x00 ; '.'
000000000021b296         db  0x00 ; '.'
000000000021b297         db  0x00 ; '.'
                     ignore_EPIPE:
000000000021b298         db  0x00 ; '.'                                         ; DATA XREF=close_stdout_set_ignore_EPIPE, close_stdout+27
000000000021b299         db  0x00 ; '.'
000000000021b29a         db  0x00 ; '.'
000000000021b29b         db  0x00 ; '.'
000000000021b29c         db  0x00 ; '.'
000000000021b29d         db  0x00 ; '.'
000000000021b29e         db  0x00 ; '.'
000000000021b29f         db  0x00 ; '.'
                     file_name:
000000000021b2a0         db  0x00 ; '.'                                         ; DATA XREF=close_stdout_set_file_name, close_stdout+86
000000000021b2a1         db  0x00 ; '.'
000000000021b2a2         db  0x00 ; '.'
000000000021b2a3         db  0x00 ; '.'
000000000021b2a4         db  0x00 ; '.'
000000000021b2a5         db  0x00 ; '.'
000000000021b2a6         db  0x00 ; '.'
000000000021b2a7         db  0x00 ; '.'
                     program_name:
000000000021b2a8         db  0x00 ; '.'                                         ; DATA XREF=usage+20, set_program_name+109
000000000021b2a9         db  0x00 ; '.'
000000000021b2aa         db  0x00 ; '.'
000000000021b2ab         db  0x00 ; '.'
000000000021b2ac         db  0x00 ; '.'
000000000021b2ad         db  0x00 ; '.'
000000000021b2ae         db  0x00 ; '.'
000000000021b2af         db  0x00 ; '.'
000000000021b2b0         db  0x00 ; '.'
000000000021b2b1         db  0x00 ; '.'
000000000021b2b2         db  0x00 ; '.'
000000000021b2b3         db  0x00 ; '.'
000000000021b2b4         db  0x00 ; '.'
000000000021b2b5         db  0x00 ; '.'
000000000021b2b6         db  0x00 ; '.'
000000000021b2b7         db  0x00 ; '.'
000000000021b2b8         db  0x00 ; '.'
000000000021b2b9         db  0x00 ; '.'
000000000021b2ba         db  0x00 ; '.'
000000000021b2bb         db  0x00 ; '.'
000000000021b2bc         db  0x00 ; '.'
000000000021b2bd         db  0x00 ; '.'
000000000021b2be         db  0x00 ; '.'
000000000021b2bf         db  0x00 ; '.'
                     slot0:
000000000021b2c0         db  0x00 ; '.'                                         ; DATA XREF=quotearg_n_options+254, quotearg_free+70, slotvec0
000000000021b2c1         db  0x00 ; '.'
000000000021b2c2         db  0x00 ; '.'
000000000021b2c3         db  0x00 ; '.'
000000000021b2c4         db  0x00 ; '.'
000000000021b2c5         db  0x00 ; '.'
000000000021b2c6         db  0x00 ; '.'
000000000021b2c7         db  0x00 ; '.'
000000000021b2c8         db  0x00 ; '.'
000000000021b2c9         db  0x00 ; '.'
000000000021b2ca         db  0x00 ; '.'
000000000021b2cb         db  0x00 ; '.'
000000000021b2cc         db  0x00 ; '.'
000000000021b2cd         db  0x00 ; '.'
000000000021b2ce         db  0x00 ; '.'
000000000021b2cf         db  0x00 ; '.'
000000000021b2d0         db  0x00 ; '.'
000000000021b2d1         db  0x00 ; '.'
000000000021b2d2         db  0x00 ; '.'
000000000021b2d3         db  0x00 ; '.'
000000000021b2d4         db  0x00 ; '.'
000000000021b2d5         db  0x00 ; '.'
000000000021b2d6         db  0x00 ; '.'
000000000021b2d7         db  0x00 ; '.'
000000000021b2d8         db  0x00 ; '.'
000000000021b2d9         db  0x00 ; '.'
000000000021b2da         db  0x00 ; '.'
000000000021b2db         db  0x00 ; '.'
000000000021b2dc         db  0x00 ; '.'
000000000021b2dd         db  0x00 ; '.'
000000000021b2de         db  0x00 ; '.'
000000000021b2df         db  0x00 ; '.'
000000000021b2e0         db  0x00 ; '.'
000000000021b2e1         db  0x00 ; '.'
000000000021b2e2         db  0x00 ; '.'
000000000021b2e3         db  0x00 ; '.'
000000000021b2e4         db  0x00 ; '.'
000000000021b2e5         db  0x00 ; '.'
000000000021b2e6         db  0x00 ; '.'
000000000021b2e7         db  0x00 ; '.'
000000000021b2e8         db  0x00 ; '.'
000000000021b2e9         db  0x00 ; '.'
000000000021b2ea         db  0x00 ; '.'
000000000021b2eb         db  0x00 ; '.'
000000000021b2ec         db  0x00 ; '.'
000000000021b2ed         db  0x00 ; '.'
000000000021b2ee         db  0x00 ; '.'
000000000021b2ef         db  0x00 ; '.'
000000000021b2f0         db  0x00 ; '.'
000000000021b2f1         db  0x00 ; '.'
000000000021b2f2         db  0x00 ; '.'
000000000021b2f3         db  0x00 ; '.'
000000000021b2f4         db  0x00 ; '.'
000000000021b2f5         db  0x00 ; '.'
000000000021b2f6         db  0x00 ; '.'
000000000021b2f7         db  0x00 ; '.'
000000000021b2f8         db  0x00 ; '.'
000000000021b2f9         db  0x00 ; '.'
000000000021b2fa         db  0x00 ; '.'
000000000021b2fb         db  0x00 ; '.'
000000000021b2fc         db  0x00 ; '.'
000000000021b2fd         db  0x00 ; '.'
000000000021b2fe         db  0x00 ; '.'
000000000021b2ff         db  0x00 ; '.'
000000000021b300         db  0x00 ; '.'
000000000021b301         db  0x00 ; '.'
000000000021b302         db  0x00 ; '.'
000000000021b303         db  0x00 ; '.'
000000000021b304         db  0x00 ; '.'
000000000021b305         db  0x00 ; '.'
000000000021b306         db  0x00 ; '.'
000000000021b307         db  0x00 ; '.'
000000000021b308         db  0x00 ; '.'
000000000021b309         db  0x00 ; '.'
000000000021b30a         db  0x00 ; '.'
000000000021b30b         db  0x00 ; '.'
000000000021b30c         db  0x00 ; '.'
000000000021b30d         db  0x00 ; '.'
000000000021b30e         db  0x00 ; '.'
000000000021b30f         db  0x00 ; '.'
000000000021b310         db  0x00 ; '.'
000000000021b311         db  0x00 ; '.'
000000000021b312         db  0x00 ; '.'
000000000021b313         db  0x00 ; '.'
000000000021b314         db  0x00 ; '.'
000000000021b315         db  0x00 ; '.'
000000000021b316         db  0x00 ; '.'
000000000021b317         db  0x00 ; '.'
000000000021b318         db  0x00 ; '.'
000000000021b319         db  0x00 ; '.'
000000000021b31a         db  0x00 ; '.'
000000000021b31b         db  0x00 ; '.'
000000000021b31c         db  0x00 ; '.'
000000000021b31d         db  0x00 ; '.'
000000000021b31e         db  0x00 ; '.'
000000000021b31f         db  0x00 ; '.'
000000000021b320         db  0x00 ; '.'
000000000021b321         db  0x00 ; '.'
000000000021b322         db  0x00 ; '.'
000000000021b323         db  0x00 ; '.'
000000000021b324         db  0x00 ; '.'
000000000021b325         db  0x00 ; '.'
000000000021b326         db  0x00 ; '.'
000000000021b327         db  0x00 ; '.'
000000000021b328         db  0x00 ; '.'
000000000021b329         db  0x00 ; '.'
000000000021b32a         db  0x00 ; '.'
000000000021b32b         db  0x00 ; '.'
000000000021b32c         db  0x00 ; '.'
000000000021b32d         db  0x00 ; '.'
000000000021b32e         db  0x00 ; '.'
000000000021b32f         db  0x00 ; '.'
000000000021b330         db  0x00 ; '.'
000000000021b331         db  0x00 ; '.'
000000000021b332         db  0x00 ; '.'
000000000021b333         db  0x00 ; '.'
000000000021b334         db  0x00 ; '.'
000000000021b335         db  0x00 ; '.'
000000000021b336         db  0x00 ; '.'
000000000021b337         db  0x00 ; '.'
000000000021b338         db  0x00 ; '.'
000000000021b339         db  0x00 ; '.'
000000000021b33a         db  0x00 ; '.'
000000000021b33b         db  0x00 ; '.'
000000000021b33c         db  0x00 ; '.'
000000000021b33d         db  0x00 ; '.'
000000000021b33e         db  0x00 ; '.'
000000000021b33f         db  0x00 ; '.'
000000000021b340         db  0x00 ; '.'
000000000021b341         db  0x00 ; '.'
000000000021b342         db  0x00 ; '.'
000000000021b343         db  0x00 ; '.'
000000000021b344         db  0x00 ; '.'
000000000021b345         db  0x00 ; '.'
000000000021b346         db  0x00 ; '.'
000000000021b347         db  0x00 ; '.'
000000000021b348         db  0x00 ; '.'
000000000021b349         db  0x00 ; '.'
000000000021b34a         db  0x00 ; '.'
000000000021b34b         db  0x00 ; '.'
000000000021b34c         db  0x00 ; '.'
000000000021b34d         db  0x00 ; '.'
000000000021b34e         db  0x00 ; '.'
000000000021b34f         db  0x00 ; '.'
000000000021b350         db  0x00 ; '.'
000000000021b351         db  0x00 ; '.'
000000000021b352         db  0x00 ; '.'
000000000021b353         db  0x00 ; '.'
000000000021b354         db  0x00 ; '.'
000000000021b355         db  0x00 ; '.'
000000000021b356         db  0x00 ; '.'
000000000021b357         db  0x00 ; '.'
000000000021b358         db  0x00 ; '.'
000000000021b359         db  0x00 ; '.'
000000000021b35a         db  0x00 ; '.'
000000000021b35b         db  0x00 ; '.'
000000000021b35c         db  0x00 ; '.'
000000000021b35d         db  0x00 ; '.'
000000000021b35e         db  0x00 ; '.'
000000000021b35f         db  0x00 ; '.'
000000000021b360         db  0x00 ; '.'
000000000021b361         db  0x00 ; '.'
000000000021b362         db  0x00 ; '.'
000000000021b363         db  0x00 ; '.'
000000000021b364         db  0x00 ; '.'
000000000021b365         db  0x00 ; '.'
000000000021b366         db  0x00 ; '.'
000000000021b367         db  0x00 ; '.'
000000000021b368         db  0x00 ; '.'
000000000021b369         db  0x00 ; '.'
000000000021b36a         db  0x00 ; '.'
000000000021b36b         db  0x00 ; '.'
000000000021b36c         db  0x00 ; '.'
000000000021b36d         db  0x00 ; '.'
000000000021b36e         db  0x00 ; '.'
000000000021b36f         db  0x00 ; '.'
000000000021b370         db  0x00 ; '.'
000000000021b371         db  0x00 ; '.'
000000000021b372         db  0x00 ; '.'
000000000021b373         db  0x00 ; '.'
000000000021b374         db  0x00 ; '.'
000000000021b375         db  0x00 ; '.'
000000000021b376         db  0x00 ; '.'
000000000021b377         db  0x00 ; '.'
000000000021b378         db  0x00 ; '.'
000000000021b379         db  0x00 ; '.'
000000000021b37a         db  0x00 ; '.'
000000000021b37b         db  0x00 ; '.'
000000000021b37c         db  0x00 ; '.'
000000000021b37d         db  0x00 ; '.'
000000000021b37e         db  0x00 ; '.'
000000000021b37f         db  0x00 ; '.'
000000000021b380         db  0x00 ; '.'
000000000021b381         db  0x00 ; '.'
000000000021b382         db  0x00 ; '.'
000000000021b383         db  0x00 ; '.'
000000000021b384         db  0x00 ; '.'
000000000021b385         db  0x00 ; '.'
000000000021b386         db  0x00 ; '.'
000000000021b387         db  0x00 ; '.'
000000000021b388         db  0x00 ; '.'
000000000021b389         db  0x00 ; '.'
000000000021b38a         db  0x00 ; '.'
000000000021b38b         db  0x00 ; '.'
000000000021b38c         db  0x00 ; '.'
000000000021b38d         db  0x00 ; '.'
000000000021b38e         db  0x00 ; '.'
000000000021b38f         db  0x00 ; '.'
000000000021b390         db  0x00 ; '.'
000000000021b391         db  0x00 ; '.'
000000000021b392         db  0x00 ; '.'
000000000021b393         db  0x00 ; '.'
000000000021b394         db  0x00 ; '.'
000000000021b395         db  0x00 ; '.'
000000000021b396         db  0x00 ; '.'
000000000021b397         db  0x00 ; '.'
000000000021b398         db  0x00 ; '.'
000000000021b399         db  0x00 ; '.'
000000000021b39a         db  0x00 ; '.'
000000000021b39b         db  0x00 ; '.'
000000000021b39c         db  0x00 ; '.'
000000000021b39d         db  0x00 ; '.'
000000000021b39e         db  0x00 ; '.'
000000000021b39f         db  0x00 ; '.'
000000000021b3a0         db  0x00 ; '.'
000000000021b3a1         db  0x00 ; '.'
000000000021b3a2         db  0x00 ; '.'
000000000021b3a3         db  0x00 ; '.'
000000000021b3a4         db  0x00 ; '.'
000000000021b3a5         db  0x00 ; '.'
000000000021b3a6         db  0x00 ; '.'
000000000021b3a7         db  0x00 ; '.'
000000000021b3a8         db  0x00 ; '.'
000000000021b3a9         db  0x00 ; '.'
000000000021b3aa         db  0x00 ; '.'
000000000021b3ab         db  0x00 ; '.'
000000000021b3ac         db  0x00 ; '.'
000000000021b3ad         db  0x00 ; '.'
000000000021b3ae         db  0x00 ; '.'
000000000021b3af         db  0x00 ; '.'
000000000021b3b0         db  0x00 ; '.'
000000000021b3b1         db  0x00 ; '.'
000000000021b3b2         db  0x00 ; '.'
000000000021b3b3         db  0x00 ; '.'
000000000021b3b4         db  0x00 ; '.'
000000000021b3b5         db  0x00 ; '.'
000000000021b3b6         db  0x00 ; '.'
000000000021b3b7         db  0x00 ; '.'
000000000021b3b8         db  0x00 ; '.'
000000000021b3b9         db  0x00 ; '.'
000000000021b3ba         db  0x00 ; '.'
000000000021b3bb         db  0x00 ; '.'
000000000021b3bc         db  0x00 ; '.'
000000000021b3bd         db  0x00 ; '.'
000000000021b3be         db  0x00 ; '.'
000000000021b3bf         db  0x00 ; '.'
                     default_quoting_options:
000000000021b3c0         db  0x00 ; '.'                                         ; DATA XREF=clone_quoting_options+18, get_quoting_style, set_quoting_style, set_char_quoting, set_quoting_flags, set_custom_quoting, quotearg_buffer+4, quotearg_alloc_mem+4, quotearg_n, quotearg_n_mem, quotearg
000000000021b3c1         db  0x00 ; '.'
000000000021b3c2         db  0x00 ; '.'
000000000021b3c3         db  0x00 ; '.'
000000000021b3c4         db  0x00 ; '.'
000000000021b3c5         db  0x00 ; '.'
000000000021b3c6         db  0x00 ; '.'
000000000021b3c7         db  0x00 ; '.'
000000000021b3c8         db  0x00 ; '.'
000000000021b3c9         db  0x00 ; '.'
000000000021b3ca         db  0x00 ; '.'
000000000021b3cb         db  0x00 ; '.'
000000000021b3cc         db  0x00 ; '.'
000000000021b3cd         db  0x00 ; '.'
000000000021b3ce         db  0x00 ; '.'
000000000021b3cf         db  0x00 ; '.'
000000000021b3d0         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+65, quotearg_n_custom_mem+57
000000000021b3d1         db  0x00 ; '.'
000000000021b3d2         db  0x00 ; '.'
000000000021b3d3         db  0x00 ; '.'
000000000021b3d4         db  0x00 ; '.'
000000000021b3d5         db  0x00 ; '.'
000000000021b3d6         db  0x00 ; '.'
000000000021b3d7         db  0x00 ; '.'
000000000021b3d8         db  0x00 ; '.'
000000000021b3d9         db  0x00 ; '.'
000000000021b3da         db  0x00 ; '.'
000000000021b3db         db  0x00 ; '.'
000000000021b3dc         db  0x00 ; '.'
000000000021b3dd         db  0x00 ; '.'
000000000021b3de         db  0x00 ; '.'
000000000021b3df         db  0x00 ; '.'
000000000021b3e0         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+78, quotearg_n_custom_mem+70
000000000021b3e1         db  0x00 ; '.'
000000000021b3e2         db  0x00 ; '.'
000000000021b3e3         db  0x00 ; '.'
000000000021b3e4         db  0x00 ; '.'
000000000021b3e5         db  0x00 ; '.'
000000000021b3e6         db  0x00 ; '.'
000000000021b3e7         db  0x00 ; '.'
000000000021b3e8         db  0x00 ; '.'
000000000021b3e9         db  0x00 ; '.'
000000000021b3ea         db  0x00 ; '.'
000000000021b3eb         db  0x00 ; '.'
000000000021b3ec         db  0x00 ; '.'
000000000021b3ed         db  0x00 ; '.'
000000000021b3ee         db  0x00 ; '.'
000000000021b3ef         db  0x00 ; '.'
                     qword_21b3f0:
000000000021b3f0         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+22, quotearg_n_custom_mem+7
000000000021b3f1         db  0x00 ; '.'
000000000021b3f2         db  0x00 ; '.'
000000000021b3f3         db  0x00 ; '.'
000000000021b3f4         db  0x00 ; '.'
000000000021b3f5         db  0x00 ; '.'
000000000021b3f6         db  0x00 ; '.'
000000000021b3f7         db  0x00 ; '.'
                     have_dupfd_cloexec.3326:
000000000021b3f8         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+94, rpl_fcntl+143, rpl_fcntl+438, rpl_fcntl+574
000000000021b3f9         db  0x00 ; '.'
000000000021b3fa         db  0x00 ; '.'
000000000021b3fb         db  0x00 ; '.'
000000000021b3fc         db  0x00 ; '.'
000000000021b3fd         db  0x00 ; '.'
000000000021b3fe         db  0x00 ; '.'
000000000021b3ff         db  0x00 ; '.'
                     rpl_re_syntax_options:
000000000021b400         db  0x00 ; '.'                                         ; DATA XREF=rpl_re_compile_pattern+4, rpl_re_set_syntax, rpl_re_set_syntax+7
000000000021b401         db  0x00 ; '.'
000000000021b402         db  0x00 ; '.'
000000000021b403         db  0x00 ; '.'
000000000021b404         db  0x00 ; '.'
000000000021b405         db  0x00 ; '.'
000000000021b406         db  0x00 ; '.'
000000000021b407         db  0x00 ; '.'


        ; Segment External Symbols
        ; Range: [0x21b410; 0x21b880[ (1136 bytes)
        ; No data on disk
        ; Permissions:  - 



        ; Section External Symbols Section
        ; Range: [0x21b410; 0x436c90[ (2209920 bytes)
        ; No data on disk

                             ; External Symbols Segment
                     __ctype_toupper_loc:
000000000021b410         extern function code                                   ; DATA XREF=__ctype_toupper_loc@GOT
                     getenv:
000000000021b418         extern function code                                   ; DATA XREF=getenv@GOT
                     free:
000000000021b420         extern function code                                   ; DATA XREF=free@GOT
                     abort:
000000000021b428         extern function code                                   ; DATA XREF=abort@GOT
                     __errno_location:
000000000021b430         extern function code                                   ; DATA XREF=__errno_location@GOT
                     unlink:
000000000021b438         extern function code                                   ; DATA XREF=unlink@GOT
                     strncmp:
000000000021b440         extern function code                                   ; DATA XREF=strncmp@GOT
                     _ITM_deregisterTMCloneTable:
000000000021b448         extern function code
                     _exit:
000000000021b450         extern function code                                   ; DATA XREF=_exit@GOT
                     __fpending:
000000000021b458         extern function code                                   ; DATA XREF=__fpending@GOT
                     isatty:
000000000021b460         extern function code                                   ; DATA XREF=isatty@GOT
                     fcntl:
000000000021b468         extern function code                                   ; DATA XREF=fcntl@GOT
                     clearerr_unlocked:
000000000021b470         extern function code                                   ; DATA XREF=clearerr_unlocked@GOT
                     textdomain:
000000000021b478         extern function code                                   ; DATA XREF=textdomain@GOT
                     iswctype:
000000000021b480         extern function code                                   ; DATA XREF=iswctype@GOT
                     fclose:
000000000021b488         extern function code                                   ; DATA XREF=fclose@GOT
                     bindtextdomain:
000000000021b490         extern function code                                   ; DATA XREF=bindtextdomain@GOT
                     dcgettext:
000000000021b498         extern function code                                   ; DATA XREF=dcgettext@GOT
                     __ctype_get_mb_cur_max:
000000000021b4a0         extern function code                                   ; DATA XREF=__ctype_get_mb_cur_max@GOT
                     strlen:
000000000021b4a8         extern function code                                   ; DATA XREF=strlen@GOT
                     __stack_chk_fail:
000000000021b4b0         extern function code                                   ; DATA XREF=__stack_chk_fail@GOT
                     getopt_long:
000000000021b4b8         extern function code                                   ; DATA XREF=getopt_long@GOT
                     mbrtowc:
000000000021b4c0         extern function code                                   ; DATA XREF=mbrtowc@GOT
                     strrchr:
000000000021b4c8         extern function code                                   ; DATA XREF=strrchr@GOT
                     ftruncate:
000000000021b4d0         extern function code                                   ; DATA XREF=ftruncate@GOT
                     mkostemp:
000000000021b4d8         extern function code                                   ; DATA XREF=mkostemp@GOT
                     lseek:
000000000021b4e0         extern function code                                   ; DATA XREF=lseek@GOT
                     __assert_fail:
000000000021b4e8         extern function code                                   ; DATA XREF=__assert_fail@GOT
                     memset:
000000000021b4f0         extern function code                                   ; DATA XREF=memset@GOT
                     close:
000000000021b4f8         extern function code                                   ; DATA XREF=close@GOT
                     read:
000000000021b500         extern function code                                   ; DATA XREF=read@GOT
                     __libc_start_main:
000000000021b508         extern function code
                     memcmp:
000000000021b510         extern function code                                   ; DATA XREF=memcmp@GOT
                     wctype:
000000000021b518         extern function code                                   ; DATA XREF=wctype@GOT
                     fputs_unlocked:
000000000021b520         extern function code                                   ; DATA XREF=fputs_unlocked@GOT
                     calloc:
000000000021b528         extern function code                                   ; DATA XREF=calloc@GOT
                     strcmp:
000000000021b530         extern function code                                   ; DATA XREF=strcmp@GOT
                     __gmon_start__:
000000000021b538         extern function code
                     memcpy:
000000000021b540         extern function code                                   ; DATA XREF=memcpy@GOT
                     fileno:
000000000021b548         extern function code                                   ; DATA XREF=fileno@GOT
                     iswalnum:
000000000021b550         extern function code                                   ; DATA XREF=iswalnum@GOT
                     malloc:
000000000021b558         extern function code                                   ; DATA XREF=malloc@GOT
                     wcrtomb:
000000000021b560         extern function code                                   ; DATA XREF=wcrtomb@GOT
                     fflush:
000000000021b568         extern function code                                   ; DATA XREF=fflush@GOT
                     nl_langinfo:
000000000021b570         extern function code                                   ; DATA XREF=nl_langinfo@GOT
                     mkstemp:
000000000021b578         extern function code                                   ; DATA XREF=mkstemp@GOT
                     __freading:
000000000021b580         extern function code                                   ; DATA XREF=__freading@GOT
                     fwrite_unlocked:
000000000021b588         extern function code                                   ; DATA XREF=fwrite_unlocked@GOT
                     realloc:
000000000021b590         extern function code                                   ; DATA XREF=realloc@GOT
                     fdopen:
000000000021b598         extern function code                                   ; DATA XREF=fdopen@GOT
                     setlocale:
000000000021b5a0         extern function code                                   ; DATA XREF=setlocale@GOT
                     __printf_chk:
000000000021b5a8         extern function code                                   ; DATA XREF=__printf_chk@GOT
                     btowc:
000000000021b5b0         extern function code                                   ; DATA XREF=btowc@GOT
                     mempcpy:
000000000021b5b8         extern function code                                   ; DATA XREF=mempcpy@GOT
                     memmove:
000000000021b5c0         extern function code                                   ; DATA XREF=memmove@GOT
                     error:
000000000021b5c8         extern function code                                   ; DATA XREF=error@GOT
                     open:
000000000021b5d0         extern function code                                   ; DATA XREF=open@GOT
                     fseeko:
000000000021b5d8         extern function code                                   ; DATA XREF=fseeko@GOT
                     towlower:
000000000021b5e0         extern function code                                   ; DATA XREF=towlower@GOT
                     towupper:
000000000021b5e8         extern function code                                   ; DATA XREF=towupper@GOT
                     __cxa_atexit:
000000000021b5f0         extern function code                                   ; DATA XREF=__cxa_atexit@GOT
                     exit:
000000000021b5f8         extern function code                                   ; DATA XREF=exit@GOT
                     fwrite:
000000000021b600         extern function code                                   ; DATA XREF=fwrite@GOT
                     __fprintf_chk:
000000000021b608         extern function code                                   ; DATA XREF=__fprintf_chk@GOT
                     _ITM_registerTMCloneTable:
000000000021b610         extern function code
                     fflush_unlocked:
000000000021b618         extern function code                                   ; DATA XREF=fflush_unlocked@GOT
                     mbsinit:
000000000021b620         extern function code                                   ; DATA XREF=mbsinit@GOT
                     iswprint:
000000000021b628         extern function code                                   ; DATA XREF=iswprint@GOT
                     __cxa_finalize:
000000000021b630         extern function code
                     __ctype_tolower_loc:
000000000021b638         extern function code                                   ; DATA XREF=__ctype_tolower_loc@GOT
                     __ctype_b_loc:
000000000021b640         extern function code                                   ; DATA XREF=__ctype_b_loc@GOT
                     __ctype_toupper_loc@@GLIBC_2.3:
000000000021b648         extern function code
                     getenv@@GLIBC_2.2.5:
000000000021b650         extern function code
                     free@@GLIBC_2.2.5:
000000000021b658         extern function code
                     abort@@GLIBC_2.2.5:
000000000021b660         extern function code
                     __errno_location@@GLIBC_2.2.5:
000000000021b668         extern function code
                     unlink@@GLIBC_2.2.5:
000000000021b670         extern function code
                     strncmp@@GLIBC_2.2.5:
000000000021b678         extern function code
                     _ITM_deregisterTMCloneTable_21b680:        // _ITM_deregisterTMCloneTable
000000000021b680         extern function code
                     _exit@@GLIBC_2.2.5:
000000000021b688         extern function code
                     __fpending@@GLIBC_2.2.5:
000000000021b690         extern function code
                     isatty@@GLIBC_2.2.5:
000000000021b698         extern function code
                     fcntl@@GLIBC_2.2.5:
000000000021b6a0         extern function code
                     clearerr_unlocked@@GLIBC_2.2.5:
000000000021b6a8         extern function code
                     textdomain@@GLIBC_2.2.5:
000000000021b6b0         extern function code
                     iswctype@@GLIBC_2.2.5:
000000000021b6b8         extern function code
                     fclose@@GLIBC_2.2.5:
000000000021b6c0         extern function code
                     bindtextdomain@@GLIBC_2.2.5:
000000000021b6c8         extern function code
                     dcgettext@@GLIBC_2.2.5:
000000000021b6d0         extern function code
                     __ctype_get_mb_cur_max@@GLIBC_2.2.5:
000000000021b6d8         extern function code
                     strlen@@GLIBC_2.2.5:
000000000021b6e0         extern function code
                     __stack_chk_fail@@GLIBC_2.4:
000000000021b6e8         extern function code
                     getopt_long@@GLIBC_2.2.5:
000000000021b6f0         extern function code
                     mbrtowc@@GLIBC_2.2.5:
000000000021b6f8         extern function code
                     strrchr@@GLIBC_2.2.5:
000000000021b700         extern function code
                     ftruncate@@GLIBC_2.2.5:
000000000021b708         extern function code
                     mkostemp@@GLIBC_2.7:
000000000021b710         extern function code
                     lseek@@GLIBC_2.2.5:
000000000021b718         extern function code
                     __assert_fail@@GLIBC_2.2.5:
000000000021b720         extern function code
                     memset@@GLIBC_2.2.5:
000000000021b728         extern function code
                     close@@GLIBC_2.2.5:
000000000021b730         extern function code
                     read@@GLIBC_2.2.5:
000000000021b738         extern function code
                     __libc_start_main@@GLIBC_2.2.5:
000000000021b740         extern function code
                     memcmp@@GLIBC_2.2.5:
000000000021b748         extern function code
                     wctype@@GLIBC_2.2.5:
000000000021b750         extern function code
                     fputs_unlocked@@GLIBC_2.2.5:
000000000021b758         extern function code
                     calloc@@GLIBC_2.2.5:
000000000021b760         extern function code
                     strcmp@@GLIBC_2.2.5:
000000000021b768         extern function code
                     __gmon_start___21b770:        // __gmon_start__
000000000021b770         extern function code
                     memcpy@@GLIBC_2.14:
000000000021b778         extern function code
                     fileno@@GLIBC_2.2.5:
000000000021b780         extern function code
                     iswalnum@@GLIBC_2.2.5:
000000000021b788         extern function code
                     malloc@@GLIBC_2.2.5:
000000000021b790         extern function code
                     wcrtomb@@GLIBC_2.2.5:
000000000021b798         extern function code
                     fflush@@GLIBC_2.2.5:
000000000021b7a0         extern function code
                     nl_langinfo@@GLIBC_2.2.5:
000000000021b7a8         extern function code
                     mkstemp@@GLIBC_2.2.5:
000000000021b7b0         extern function code
                     __freading@@GLIBC_2.2.5:
000000000021b7b8         extern function code
                     fwrite_unlocked@@GLIBC_2.2.5:
000000000021b7c0         extern function code
                     realloc@@GLIBC_2.2.5:
000000000021b7c8         extern function code
                     fdopen@@GLIBC_2.2.5:
000000000021b7d0         extern function code
                     setlocale@@GLIBC_2.2.5:
000000000021b7d8         extern function code
                     __printf_chk@@GLIBC_2.3.4:
000000000021b7e0         extern function code
                     btowc@@GLIBC_2.2.5:
000000000021b7e8         extern function code
                     mempcpy@@GLIBC_2.2.5:
000000000021b7f0         extern function code
                     memmove@@GLIBC_2.2.5:
000000000021b7f8         extern function code
                     error@@GLIBC_2.2.5:
000000000021b800         extern function code
                     open@@GLIBC_2.2.5:
000000000021b808         extern function code
                     fseeko@@GLIBC_2.2.5:
000000000021b810         extern function code
                     towlower@@GLIBC_2.2.5:
000000000021b818         extern function code
                     towupper@@GLIBC_2.2.5:
000000000021b820         extern function code
                     __cxa_atexit@@GLIBC_2.2.5:
000000000021b828         extern function code
                     exit@@GLIBC_2.2.5:
000000000021b830         extern function code
                     fwrite@@GLIBC_2.2.5:
000000000021b838         extern function code
                     __fprintf_chk@@GLIBC_2.3.4:
000000000021b840         extern function code
                     _ITM_registerTMCloneTable_21b848:        // _ITM_registerTMCloneTable
000000000021b848         extern function code
                     fflush_unlocked@@GLIBC_2.2.5:
000000000021b850         extern function code
                     mbsinit@@GLIBC_2.2.5:
000000000021b858         extern function code
                     iswprint@@GLIBC_2.2.5:
000000000021b860         extern function code
                     __cxa_finalize@@GLIBC_2.2.5:
000000000021b868         extern function code
                     __ctype_tolower_loc@@GLIBC_2.3:
000000000021b870         extern function code
                     __ctype_b_loc@@GLIBC_2.3:
000000000021b878         extern function code
