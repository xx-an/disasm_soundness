
/*
--------------------------------------------------------------------------------

        File: /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/chown
        UUID: 8AF1136B-282B-ED45-847E-34E8841553F3
        Analysis version 58
        ELF file
        CPU: intel/x86_64
        64 bits addresses (Little Endian)

--------------------------------------------------------------------------------
*/



        ; Segment Segment 2
        ; Range: [0x0; 0xe358[ (58200 bytes)
        ; File offset : [0; 58200[ (58200 bytes)
        ; Permissions: readable / executable
        ; Flags: 0x5

0000000000000000         db  0x7f ; '.'
0000000000000001         db  0x45 ; 'E'
0000000000000002         db  0x4c ; 'L'
0000000000000003         db  0x46 ; 'F'
0000000000000004         db  0x02 ; '.'
0000000000000005         db  0x01 ; '.'
0000000000000006         db  0x01 ; '.'
0000000000000007         db  0x00 ; '.'
0000000000000008         db  0x00 ; '.'
0000000000000009         db  0x00 ; '.'
000000000000000a         db  0x00 ; '.'
000000000000000b         db  0x00 ; '.'
000000000000000c         db  0x00 ; '.'
000000000000000d         db  0x00 ; '.'
000000000000000e         db  0x00 ; '.'
000000000000000f         db  0x00 ; '.'
0000000000000010         db  0x03 ; '.'
0000000000000011         db  0x00 ; '.'
0000000000000012         db  0x3e ; '>'
0000000000000013         db  0x00 ; '.'
0000000000000014         db  0x01 ; '.'
0000000000000015         db  0x00 ; '.'
0000000000000016         db  0x00 ; '.'
0000000000000017         db  0x00 ; '.'
0000000000000018         db  0x80 ; '.'
0000000000000019         db  0x23 ; '#'
000000000000001a         db  0x00 ; '.'
000000000000001b         db  0x00 ; '.'
000000000000001c         db  0x00 ; '.'
000000000000001d         db  0x00 ; '.'
000000000000001e         db  0x00 ; '.'
000000000000001f         db  0x00 ; '.'
0000000000000020         db  0x40 ; '@'
0000000000000021         db  0x00 ; '.'
0000000000000022         db  0x00 ; '.'
0000000000000023         db  0x00 ; '.'
0000000000000024         db  0x00 ; '.'
0000000000000025         db  0x00 ; '.'
0000000000000026         db  0x00 ; '.'
0000000000000027         db  0x00 ; '.'
0000000000000028         db  0xd8 ; '.'
0000000000000029         db  0x9f ; '.'
000000000000002a         db  0x04 ; '.'
000000000000002b         db  0x00 ; '.'
000000000000002c         db  0x00 ; '.'
000000000000002d         db  0x00 ; '.'
000000000000002e         db  0x00 ; '.'
000000000000002f         db  0x00 ; '.'
0000000000000030         db  0x00 ; '.'
0000000000000031         db  0x00 ; '.'
0000000000000032         db  0x00 ; '.'
0000000000000033         db  0x00 ; '.'
0000000000000034         db  0x40 ; '@'
0000000000000035         db  0x00 ; '.'
0000000000000036         db  0x38 ; '8'
0000000000000037         db  0x00 ; '.'
0000000000000038         db  0x09 ; '.'
0000000000000039         db  0x00 ; '.'
000000000000003a         db  0x40 ; '@'
000000000000003b         db  0x00 ; '.'
000000000000003c         db  0x25 ; '%'
000000000000003d         db  0x00 ; '.'
000000000000003e         db  0x24 ; '$'
000000000000003f         db  0x00 ; '.'
0000000000000040         db  0x06 ; '.'
0000000000000041         db  0x00 ; '.'
0000000000000042         db  0x00 ; '.'
0000000000000043         db  0x00 ; '.'
0000000000000044         db  0x04 ; '.'
0000000000000045         db  0x00 ; '.'
0000000000000046         db  0x00 ; '.'
0000000000000047         db  0x00 ; '.'
0000000000000048         db  0x40 ; '@'
0000000000000049         db  0x00 ; '.'
000000000000004a         db  0x00 ; '.'
000000000000004b         db  0x00 ; '.'
000000000000004c         db  0x00 ; '.'
000000000000004d         db  0x00 ; '.'
000000000000004e         db  0x00 ; '.'
000000000000004f         db  0x00 ; '.'
0000000000000050         db  0x40 ; '@'
0000000000000051         db  0x00 ; '.'
0000000000000052         db  0x00 ; '.'
0000000000000053         db  0x00 ; '.'
0000000000000054         db  0x00 ; '.'
0000000000000055         db  0x00 ; '.'
0000000000000056         db  0x00 ; '.'
0000000000000057         db  0x00 ; '.'
0000000000000058         db  0x40 ; '@'
0000000000000059         db  0x00 ; '.'
000000000000005a         db  0x00 ; '.'
000000000000005b         db  0x00 ; '.'
000000000000005c         db  0x00 ; '.'
000000000000005d         db  0x00 ; '.'
000000000000005e         db  0x00 ; '.'
000000000000005f         db  0x00 ; '.'
0000000000000060         db  0xf8 ; '.'
0000000000000061         db  0x01 ; '.'
0000000000000062         db  0x00 ; '.'
0000000000000063         db  0x00 ; '.'
0000000000000064         db  0x00 ; '.'
0000000000000065         db  0x00 ; '.'
0000000000000066         db  0x00 ; '.'
0000000000000067         db  0x00 ; '.'
0000000000000068         db  0xf8 ; '.'
0000000000000069         db  0x01 ; '.'
000000000000006a         db  0x00 ; '.'
000000000000006b         db  0x00 ; '.'
000000000000006c         db  0x00 ; '.'
000000000000006d         db  0x00 ; '.'
000000000000006e         db  0x00 ; '.'
000000000000006f         db  0x00 ; '.'
0000000000000070         db  0x08 ; '.'
0000000000000071         db  0x00 ; '.'
0000000000000072         db  0x00 ; '.'
0000000000000073         db  0x00 ; '.'
0000000000000074         db  0x00 ; '.'
0000000000000075         db  0x00 ; '.'
0000000000000076         db  0x00 ; '.'
0000000000000077         db  0x00 ; '.'
0000000000000078         db  0x03 ; '.'
0000000000000079         db  0x00 ; '.'
000000000000007a         db  0x00 ; '.'
000000000000007b         db  0x00 ; '.'
000000000000007c         db  0x04 ; '.'
000000000000007d         db  0x00 ; '.'
000000000000007e         db  0x00 ; '.'
000000000000007f         db  0x00 ; '.'
0000000000000080         db  0x38 ; '8'
0000000000000081         db  0x02 ; '.'
0000000000000082         db  0x00 ; '.'
0000000000000083         db  0x00 ; '.'
0000000000000084         db  0x00 ; '.'
0000000000000085         db  0x00 ; '.'
0000000000000086         db  0x00 ; '.'
0000000000000087         db  0x00 ; '.'
0000000000000088         db  0x38 ; '8'
0000000000000089         db  0x02 ; '.'
000000000000008a         db  0x00 ; '.'
000000000000008b         db  0x00 ; '.'
000000000000008c         db  0x00 ; '.'
000000000000008d         db  0x00 ; '.'
000000000000008e         db  0x00 ; '.'
000000000000008f         db  0x00 ; '.'
0000000000000090         db  0x38 ; '8'
0000000000000091         db  0x02 ; '.'
0000000000000092         db  0x00 ; '.'
0000000000000093         db  0x00 ; '.'
0000000000000094         db  0x00 ; '.'
0000000000000095         db  0x00 ; '.'
0000000000000096         db  0x00 ; '.'
0000000000000097         db  0x00 ; '.'
0000000000000098         db  0x1c ; '.'
0000000000000099         db  0x00 ; '.'
000000000000009a         db  0x00 ; '.'
000000000000009b         db  0x00 ; '.'
000000000000009c         db  0x00 ; '.'
000000000000009d         db  0x00 ; '.'
000000000000009e         db  0x00 ; '.'
000000000000009f         db  0x00 ; '.'
00000000000000a0         db  0x1c ; '.'
00000000000000a1         db  0x00 ; '.'
00000000000000a2         db  0x00 ; '.'
00000000000000a3         db  0x00 ; '.'
00000000000000a4         db  0x00 ; '.'
00000000000000a5         db  0x00 ; '.'
00000000000000a6         db  0x00 ; '.'
00000000000000a7         db  0x00 ; '.'
00000000000000a8         db  0x01 ; '.'
00000000000000a9         db  0x00 ; '.'
00000000000000aa         db  0x00 ; '.'
00000000000000ab         db  0x00 ; '.'
00000000000000ac         db  0x00 ; '.'
00000000000000ad         db  0x00 ; '.'
00000000000000ae         db  0x00 ; '.'
00000000000000af         db  0x00 ; '.'
00000000000000b0         db  0x01 ; '.'
00000000000000b1         db  0x00 ; '.'
00000000000000b2         db  0x00 ; '.'
00000000000000b3         db  0x00 ; '.'
00000000000000b4         db  0x05 ; '.'
00000000000000b5         db  0x00 ; '.'
00000000000000b6         db  0x00 ; '.'
00000000000000b7         db  0x00 ; '.'
00000000000000b8         db  0x00 ; '.'
00000000000000b9         db  0x00 ; '.'
00000000000000ba         db  0x00 ; '.'
00000000000000bb         db  0x00 ; '.'
00000000000000bc         db  0x00 ; '.'
00000000000000bd         db  0x00 ; '.'
00000000000000be         db  0x00 ; '.'
00000000000000bf         db  0x00 ; '.'
00000000000000c0         db  0x00 ; '.'
00000000000000c1         db  0x00 ; '.'
00000000000000c2         db  0x00 ; '.'
00000000000000c3         db  0x00 ; '.'
00000000000000c4         db  0x00 ; '.'
00000000000000c5         db  0x00 ; '.'
00000000000000c6         db  0x00 ; '.'
00000000000000c7         db  0x00 ; '.'
00000000000000c8         db  0x00 ; '.'
00000000000000c9         db  0x00 ; '.'
00000000000000ca         db  0x00 ; '.'
00000000000000cb         db  0x00 ; '.'
00000000000000cc         db  0x00 ; '.'
00000000000000cd         db  0x00 ; '.'
00000000000000ce         db  0x00 ; '.'
00000000000000cf         db  0x00 ; '.'
00000000000000d0         db  0x58 ; 'X'
00000000000000d1         db  0xe3 ; '.'
00000000000000d2         db  0x00 ; '.'
00000000000000d3         db  0x00 ; '.'
00000000000000d4         db  0x00 ; '.'
00000000000000d5         db  0x00 ; '.'
00000000000000d6         db  0x00 ; '.'
00000000000000d7         db  0x00 ; '.'
00000000000000d8         db  0x58 ; 'X'
00000000000000d9         db  0xe3 ; '.'
00000000000000da         db  0x00 ; '.'
00000000000000db         db  0x00 ; '.'
00000000000000dc         db  0x00 ; '.'
00000000000000dd         db  0x00 ; '.'
00000000000000de         db  0x00 ; '.'
00000000000000df         db  0x00 ; '.'
00000000000000e0         db  0x00 ; '.'
00000000000000e1         db  0x00 ; '.'
00000000000000e2         db  0x20 ; ' '
00000000000000e3         db  0x00 ; '.'
00000000000000e4         db  0x00 ; '.'
00000000000000e5         db  0x00 ; '.'
00000000000000e6         db  0x00 ; '.'
00000000000000e7         db  0x00 ; '.'
00000000000000e8         db  0x01 ; '.'
00000000000000e9         db  0x00 ; '.'
00000000000000ea         db  0x00 ; '.'
00000000000000eb         db  0x00 ; '.'
00000000000000ec         db  0x06 ; '.'
00000000000000ed         db  0x00 ; '.'
00000000000000ee         db  0x00 ; '.'
00000000000000ef         db  0x00 ; '.'
00000000000000f0         db  0x70 ; 'p'
00000000000000f1         db  0xe9 ; '.'
00000000000000f2         db  0x00 ; '.'
00000000000000f3         db  0x00 ; '.'
00000000000000f4         db  0x00 ; '.'
00000000000000f5         db  0x00 ; '.'
00000000000000f6         db  0x00 ; '.'
00000000000000f7         db  0x00 ; '.'
00000000000000f8         db  0x70 ; 'p'
00000000000000f9         db  0xe9 ; '.'
00000000000000fa         db  0x20 ; ' '
00000000000000fb         db  0x00 ; '.'
00000000000000fc         db  0x00 ; '.'
00000000000000fd         db  0x00 ; '.'
00000000000000fe         db  0x00 ; '.'
00000000000000ff         db  0x00 ; '.'
0000000000000100         db  0x70 ; 'p'                                         ; DATA XREF=sub_2b60+207, quotearg_free+87, fts_stat+144, fts_build+1222, rpl_fflush+18, slotvec0
0000000000000101         db  0xe9 ; '.'
0000000000000102         db  0x20 ; ' '                                         ; DATA XREF=setup_dir.isra.4, enter_dir.isra.10, leave_dir.isra.12+23, rpl_fts_close+159, rpl_fts_read+688
0000000000000103         db  0x00 ; '.'
0000000000000104         db  0x00 ; '.'
0000000000000105         db  0x00 ; '.'
0000000000000106         db  0x00 ; '.'
0000000000000107         db  0x00 ; '.'
0000000000000108         db  0x10 ; '.'
0000000000000109         db  0x07 ; '.'
000000000000010a         db  0x00 ; '.'
000000000000010b         db  0x00 ; '.'
000000000000010c         db  0x00 ; '.'
000000000000010d         db  0x00 ; '.'
000000000000010e         db  0x00 ; '.'
000000000000010f         db  0x00 ; '.'
0000000000000110         db  0xd0 ; '.'
0000000000000111         db  0x08 ; '.'
0000000000000112         db  0x00 ; '.'
0000000000000113         db  0x00 ; '.'
0000000000000114         db  0x00 ; '.'
0000000000000115         db  0x00 ; '.'
0000000000000116         db  0x00 ; '.'
0000000000000117         db  0x00 ; '.'
0000000000000118         db  0x00 ; '.'
0000000000000119         db  0x00 ; '.'
000000000000011a         db  0x20 ; ' '
000000000000011b         db  0x00 ; '.'
000000000000011c         db  0x00 ; '.'
000000000000011d         db  0x00 ; '.'
000000000000011e         db  0x00 ; '.'
000000000000011f         db  0x00 ; '.'
0000000000000120         db  0x02 ; '.'
0000000000000121         db  0x00 ; '.'
0000000000000122         db  0x00 ; '.'
0000000000000123         db  0x00 ; '.'
0000000000000124         db  0x06 ; '.'
0000000000000125         db  0x00 ; '.'
0000000000000126         db  0x00 ; '.'
0000000000000127         db  0x00 ; '.'
0000000000000128         db  0x98 ; '.'
0000000000000129         db  0xeb ; '.'
000000000000012a         db  0x00 ; '.'
000000000000012b         db  0x00 ; '.'
000000000000012c         db  0x00 ; '.'
000000000000012d         db  0x00 ; '.'
000000000000012e         db  0x00 ; '.'
000000000000012f         db  0x00 ; '.'
0000000000000130         db  0x98 ; '.'
0000000000000131         db  0xeb ; '.'
0000000000000132         db  0x20 ; ' '
0000000000000133         db  0x00 ; '.'
0000000000000134         db  0x00 ; '.'
0000000000000135         db  0x00 ; '.'
0000000000000136         db  0x00 ; '.'
0000000000000137         db  0x00 ; '.'
0000000000000138         db  0x98 ; '.'
0000000000000139         db  0xeb ; '.'
000000000000013a         db  0x20 ; ' '
000000000000013b         db  0x00 ; '.'
000000000000013c         db  0x00 ; '.'
000000000000013d         db  0x00 ; '.'
000000000000013e         db  0x00 ; '.'
000000000000013f         db  0x00 ; '.'
0000000000000140         db  0xf0 ; '.'
0000000000000141         db  0x01 ; '.'
0000000000000142         db  0x00 ; '.'
0000000000000143         db  0x00 ; '.'
0000000000000144         db  0x00 ; '.'
0000000000000145         db  0x00 ; '.'
0000000000000146         db  0x00 ; '.'
0000000000000147         db  0x00 ; '.'
0000000000000148         db  0xf0 ; '.'
0000000000000149         db  0x01 ; '.'
000000000000014a         db  0x00 ; '.'
000000000000014b         db  0x00 ; '.'
000000000000014c         db  0x00 ; '.'
000000000000014d         db  0x00 ; '.'
000000000000014e         db  0x00 ; '.'
000000000000014f         db  0x00 ; '.'
0000000000000150         db  0x08 ; '.'
0000000000000151         db  0x00 ; '.'
0000000000000152         db  0x00 ; '.'
0000000000000153         db  0x00 ; '.'
0000000000000154         db  0x00 ; '.'
0000000000000155         db  0x00 ; '.'
0000000000000156         db  0x00 ; '.'
0000000000000157         db  0x00 ; '.'
0000000000000158         db  0x04 ; '.'
0000000000000159         db  0x00 ; '.'
000000000000015a         db  0x00 ; '.'
000000000000015b         db  0x00 ; '.'
000000000000015c         db  0x04 ; '.'
000000000000015d         db  0x00 ; '.'
000000000000015e         db  0x00 ; '.'
000000000000015f         db  0x00 ; '.'
0000000000000160         db  0x54 ; 'T'
0000000000000161         db  0x02 ; '.'
0000000000000162         db  0x00 ; '.'
0000000000000163         db  0x00 ; '.'
0000000000000164         db  0x00 ; '.'
0000000000000165         db  0x00 ; '.'
0000000000000166         db  0x00 ; '.'
0000000000000167         db  0x00 ; '.'
0000000000000168         db  0x54 ; 'T'
0000000000000169         db  0x02 ; '.'
000000000000016a         db  0x00 ; '.'
000000000000016b         db  0x00 ; '.'
000000000000016c         db  0x00 ; '.'
000000000000016d         db  0x00 ; '.'
000000000000016e         db  0x00 ; '.'
000000000000016f         db  0x00 ; '.'
0000000000000170         db  0x54 ; 'T'
0000000000000171         db  0x02 ; '.'
0000000000000172         db  0x00 ; '.'
0000000000000173         db  0x00 ; '.'
0000000000000174         db  0x00 ; '.'
0000000000000175         db  0x00 ; '.'
0000000000000176         db  0x00 ; '.'
0000000000000177         db  0x00 ; '.'
0000000000000178         db  0x44 ; 'D'                                         ; DATA XREF=change_file_owner+16, sub_2fd0+42
0000000000000179         db  0x00 ; '.'
000000000000017a         db  0x00 ; '.'
000000000000017b         db  0x00 ; '.'
000000000000017c         db  0x00 ; '.'
000000000000017d         db  0x00 ; '.'
000000000000017e         db  0x00 ; '.'
000000000000017f         db  0x00 ; '.'
0000000000000180         db  0x44 ; 'D'
0000000000000181         db  0x00 ; '.'
0000000000000182         db  0x00 ; '.'
0000000000000183         db  0x00 ; '.'
0000000000000184         db  0x00 ; '.'
0000000000000185         db  0x00 ; '.'
0000000000000186         db  0x00 ; '.'
0000000000000187         db  0x00 ; '.'
0000000000000188         db  0x04 ; '.'
0000000000000189         db  0x00 ; '.'
000000000000018a         db  0x00 ; '.'
000000000000018b         db  0x00 ; '.'
000000000000018c         db  0x00 ; '.'
000000000000018d         db  0x00 ; '.'
000000000000018e         db  0x00 ; '.'
000000000000018f         db  0x00 ; '.'
0000000000000190         db  0x50 ; 'P'
0000000000000191         db  0xe5 ; '.'
0000000000000192         db  0x74 ; 't'
0000000000000193         db  0x64 ; 'd'
0000000000000194         db  0x04 ; '.'
0000000000000195         db  0x00 ; '.'
0000000000000196         db  0x00 ; '.'
0000000000000197         db  0x00 ; '.'
0000000000000198         db  0x28 ; '('
0000000000000199         db  0xc6 ; '.'
000000000000019a         db  0x00 ; '.'
000000000000019b         db  0x00 ; '.'
000000000000019c         db  0x00 ; '.'
000000000000019d         db  0x00 ; '.'
000000000000019e         db  0x00 ; '.'
000000000000019f         db  0x00 ; '.'
00000000000001a0         db  0x28 ; '('
00000000000001a1         db  0xc6 ; '.'
00000000000001a2         db  0x00 ; '.'
00000000000001a3         db  0x00 ; '.'
00000000000001a4         db  0x00 ; '.'
00000000000001a5         db  0x00 ; '.'
00000000000001a6         db  0x00 ; '.'
00000000000001a7         db  0x00 ; '.'
00000000000001a8         db  0x28 ; '('
00000000000001a9         db  0xc6 ; '.'
00000000000001aa         db  0x00 ; '.'
00000000000001ab         db  0x00 ; '.'
00000000000001ac         db  0x00 ; '.'
00000000000001ad         db  0x00 ; '.'
00000000000001ae         db  0x00 ; '.'
00000000000001af         db  0x00 ; '.'
00000000000001b0         db  0xb4 ; '.'
00000000000001b1         db  0x04 ; '.'
00000000000001b2         db  0x00 ; '.'
00000000000001b3         db  0x00 ; '.'
00000000000001b4         db  0x00 ; '.'
00000000000001b5         db  0x00 ; '.'
00000000000001b6         db  0x00 ; '.'
00000000000001b7         db  0x00 ; '.'
00000000000001b8         db  0xb4 ; '.'
00000000000001b9         db  0x04 ; '.'
00000000000001ba         db  0x00 ; '.'
00000000000001bb         db  0x00 ; '.'
00000000000001bc         db  0x00 ; '.'
00000000000001bd         db  0x00 ; '.'
00000000000001be         db  0x00 ; '.'
00000000000001bf         db  0x00 ; '.'
00000000000001c0         db  0x04 ; '.'
00000000000001c1         db  0x00 ; '.'
00000000000001c2         db  0x00 ; '.'
00000000000001c3         db  0x00 ; '.'
00000000000001c4         db  0x00 ; '.'
00000000000001c5         db  0x00 ; '.'
00000000000001c6         db  0x00 ; '.'
00000000000001c7         db  0x00 ; '.'
00000000000001c8         db  0x51 ; 'Q'
00000000000001c9         db  0xe5 ; '.'
00000000000001ca         db  0x74 ; 't'
00000000000001cb         db  0x64 ; 'd'
00000000000001cc         db  0x06 ; '.'
00000000000001cd         db  0x00 ; '.'
00000000000001ce         db  0x00 ; '.'
00000000000001cf         db  0x00 ; '.'
00000000000001d0         db  0x00 ; '.'
00000000000001d1         db  0x00 ; '.'
00000000000001d2         db  0x00 ; '.'
00000000000001d3         db  0x00 ; '.'
00000000000001d4         db  0x00 ; '.'
00000000000001d5         db  0x00 ; '.'
00000000000001d6         db  0x00 ; '.'
00000000000001d7         db  0x00 ; '.'
00000000000001d8         db  0x00 ; '.'
00000000000001d9         db  0x00 ; '.'
00000000000001da         db  0x00 ; '.'
00000000000001db         db  0x00 ; '.'
00000000000001dc         db  0x00 ; '.'
00000000000001dd         db  0x00 ; '.'
00000000000001de         db  0x00 ; '.'
00000000000001df         db  0x00 ; '.'
00000000000001e0         db  0x00 ; '.'
00000000000001e1         db  0x00 ; '.'
00000000000001e2         db  0x00 ; '.'
00000000000001e3         db  0x00 ; '.'
00000000000001e4         db  0x00 ; '.'
00000000000001e5         db  0x00 ; '.'
00000000000001e6         db  0x00 ; '.'
00000000000001e7         db  0x00 ; '.'
00000000000001e8         db  0x00 ; '.'
00000000000001e9         db  0x00 ; '.'
00000000000001ea         db  0x00 ; '.'
00000000000001eb         db  0x00 ; '.'
00000000000001ec         db  0x00 ; '.'
00000000000001ed         db  0x00 ; '.'
00000000000001ee         db  0x00 ; '.'
00000000000001ef         db  0x00 ; '.'
00000000000001f0         db  0x00 ; '.'
00000000000001f1         db  0x00 ; '.'
00000000000001f2         db  0x00 ; '.'
00000000000001f3         db  0x00 ; '.'
00000000000001f4         db  0x00 ; '.'
00000000000001f5         db  0x00 ; '.'
00000000000001f6         db  0x00 ; '.'
00000000000001f7         db  0x00 ; '.'
00000000000001f8         db  0x10 ; '.'
00000000000001f9         db  0x00 ; '.'
00000000000001fa         db  0x00 ; '.'
00000000000001fb         db  0x00 ; '.'
00000000000001fc         db  0x00 ; '.'
00000000000001fd         db  0x00 ; '.'
00000000000001fe         db  0x00 ; '.'
00000000000001ff         db  0x00 ; '.'
0000000000000200         db  0x52 ; 'R'                                         ; DATA XREF=xfts_open+4, xstrtoul+573, diropen.isra.6+20, fts_build+1173, fts_build+1365
0000000000000201         db  0xe5 ; '.'
0000000000000202         db  0x74 ; 't'
0000000000000203         db  0x64 ; 'd'
0000000000000204         db  0x04 ; '.'                                         ; DATA XREF=fts_build+1159, rpl_fts_open+30, rpl_fts_open+35, rpl_fts_open+629
0000000000000205         db  0x00 ; '.'
0000000000000206         db  0x00 ; '.'
0000000000000207         db  0x00 ; '.'
0000000000000208         db  0x70 ; 'p'
0000000000000209         db  0xe9 ; '.'
000000000000020a         db  0x00 ; '.'
000000000000020b         db  0x00 ; '.'
000000000000020c         db  0x00 ; '.'
000000000000020d         db  0x00 ; '.'
000000000000020e         db  0x00 ; '.'
000000000000020f         db  0x00 ; '.'
0000000000000210         db  0x70 ; 'p'
0000000000000211         db  0xe9 ; '.'
0000000000000212         db  0x20 ; ' '
0000000000000213         db  0x00 ; '.'
0000000000000214         db  0x00 ; '.'
0000000000000215         db  0x00 ; '.'
0000000000000216         db  0x00 ; '.'
0000000000000217         db  0x00 ; '.'
0000000000000218         db  0x70 ; 'p'
0000000000000219         db  0xe9 ; '.'
000000000000021a         db  0x20 ; ' '
000000000000021b         db  0x00 ; '.'
000000000000021c         db  0x00 ; '.'
000000000000021d         db  0x00 ; '.'
000000000000021e         db  0x00 ; '.'
000000000000021f         db  0x00 ; '.'
0000000000000220         db  0x90 ; '.'
0000000000000221         db  0x06 ; '.'
0000000000000222         db  0x00 ; '.'
0000000000000223         db  0x00 ; '.'
0000000000000224         db  0x00 ; '.'
0000000000000225         db  0x00 ; '.'
0000000000000226         db  0x00 ; '.'
0000000000000227         db  0x00 ; '.'
0000000000000228         db  0x90 ; '.'
0000000000000229         db  0x06 ; '.'
000000000000022a         db  0x00 ; '.'
000000000000022b         db  0x00 ; '.'
000000000000022c         db  0x00 ; '.'
000000000000022d         db  0x00 ; '.'
000000000000022e         db  0x00 ; '.'
000000000000022f         db  0x00 ; '.'
0000000000000230         db  0x01 ; '.'
0000000000000231         db  0x00 ; '.'
0000000000000232         db  0x00 ; '.'
0000000000000233         db  0x00 ; '.'
0000000000000234         db  0x00 ; '.'
0000000000000235         db  0x00 ; '.'
0000000000000236         db  0x00 ; '.'
0000000000000237         db  0x00 ; '.'


        ; Section .interp
        ; Range: [0x238; 0x254[ (28 bytes)
        ; File offset : [568; 596[ (28 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

                     aLib64ldlinuxx8:
0000000000000238         db         "/lib64/ld-linux-x86-64.so.2", 0


        ; Section .note.ABI-tag
        ; Range: [0x254; 0x274[ (32 bytes)
        ; File offset : [596; 628[ (32 bytes)
        ; Flags: 0x2
        ;   SHT_NOTE
        ;   SHF_ALLOC

0000000000000254         db  0x04 ; '.'
0000000000000255         db  0x00 ; '.'
0000000000000256         db  0x00 ; '.'
0000000000000257         db  0x00 ; '.'
0000000000000258         db  0x10 ; '.'
0000000000000259         db  0x00 ; '.'
000000000000025a         db  0x00 ; '.'
000000000000025b         db  0x00 ; '.'
000000000000025c         db  0x01 ; '.'
000000000000025d         db  0x00 ; '.'
000000000000025e         db  0x00 ; '.'
000000000000025f         db  0x00 ; '.'
0000000000000260         db  0x47 ; 'G'
0000000000000261         db  0x4e ; 'N'
0000000000000262         db  0x55 ; 'U'
0000000000000263         db  0x00 ; '.'
0000000000000264         db  0x00 ; '.'
0000000000000265         db  0x00 ; '.'
0000000000000266         db  0x00 ; '.'
0000000000000267         db  0x00 ; '.'
0000000000000268         db  0x03 ; '.'
0000000000000269         db  0x00 ; '.'
000000000000026a         db  0x00 ; '.'
000000000000026b         db  0x00 ; '.'
000000000000026c         db  0x02 ; '.'
000000000000026d         db  0x00 ; '.'
000000000000026e         db  0x00 ; '.'
000000000000026f         db  0x00 ; '.'
0000000000000270         db  0x00 ; '.'
0000000000000271         db  0x00 ; '.'
0000000000000272         db  0x00 ; '.'
0000000000000273         db  0x00 ; '.'


        ; Section .note.gnu.build-id
        ; Range: [0x274; 0x298[ (36 bytes)
        ; File offset : [628; 664[ (36 bytes)
        ; Flags: 0x2
        ;   SHT_NOTE
        ;   SHF_ALLOC

0000000000000274         db  0x04 ; '.'
0000000000000275         db  0x00 ; '.'
0000000000000276         db  0x00 ; '.'
0000000000000277         db  0x00 ; '.'
0000000000000278         db  0x14 ; '.'
0000000000000279         db  0x00 ; '.'
000000000000027a         db  0x00 ; '.'
000000000000027b         db  0x00 ; '.'
000000000000027c         db  0x03 ; '.'
000000000000027d         db  0x00 ; '.'
000000000000027e         db  0x00 ; '.'
000000000000027f         db  0x00 ; '.'
0000000000000280         db  0x47 ; 'G'
0000000000000281         db  0x4e ; 'N'
0000000000000282         db  0x55 ; 'U'
0000000000000283         db  0x00 ; '.'
0000000000000284         db  0x8a ; '.'
0000000000000285         db  0xf1 ; '.'
0000000000000286         db  0x13 ; '.'
0000000000000287         db  0x6b ; 'k'
0000000000000288         db  0x28 ; '('
0000000000000289         db  0x2b ; '+'
000000000000028a         db  0xed ; '.'
000000000000028b         db  0x45 ; 'E'
000000000000028c         db  0x84 ; '.'
000000000000028d         db  0x7e ; '~'
000000000000028e         db  0x34 ; '4'
000000000000028f         db  0xe8 ; '.'
0000000000000290         db  0x84 ; '.'
0000000000000291         db  0x15 ; '.'
0000000000000292         db  0x53 ; 'S'
0000000000000293         db  0xf3 ; '.'
0000000000000294         db  0xb8 ; '.'
0000000000000295         db  0x53 ; 'S'
0000000000000296         db  0xb4 ; '.'
0000000000000297         db  0xf4 ; '.'


        ; Section .gnu.hash
        ; Range: [0x298; 0x2dc[ (68 bytes)
        ; File offset : [664; 732[ (68 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000000298         db  0x03 ; '.'
0000000000000299         db  0x00 ; '.'
000000000000029a         db  0x00 ; '.'
000000000000029b         db  0x00 ; '.'
000000000000029c         db  0x4b ; 'K'
000000000000029d         db  0x00 ; '.'
000000000000029e         db  0x00 ; '.'
000000000000029f         db  0x00 ; '.'
00000000000002a0         db  0x01 ; '.'
00000000000002a1         db  0x00 ; '.'
00000000000002a2         db  0x00 ; '.'
00000000000002a3         db  0x00 ; '.'
00000000000002a4         db  0x06 ; '.'
00000000000002a5         db  0x00 ; '.'
00000000000002a6         db  0x00 ; '.'
00000000000002a7         db  0x00 ; '.'
00000000000002a8         db  0x04 ; '.'
00000000000002a9         db  0x4d ; 'M'
00000000000002aa         db  0x41 ; 'A'
00000000000002ab         db  0x00 ; '.'
00000000000002ac         db  0x20 ; ' '
00000000000002ad         db  0x01 ; '.'
00000000000002ae         db  0x1c ; '.'
00000000000002af         db  0x12 ; '.'
00000000000002b0         db  0x4b ; 'K'
00000000000002b1         db  0x00 ; '.'
00000000000002b2         db  0x00 ; '.'
00000000000002b3         db  0x00 ; '.'
00000000000002b4         db  0x4c ; 'L'
00000000000002b5         db  0x00 ; '.'
00000000000002b6         db  0x00 ; '.'
00000000000002b7         db  0x00 ; '.'
00000000000002b8         db  0x51 ; 'Q'
00000000000002b9         db  0x00 ; '.'
00000000000002ba         db  0x00 ; '.'
00000000000002bb         db  0x00 ; '.'
00000000000002bc         db  0x29 ; ')'
00000000000002bd         db  0x1d ; '.'
00000000000002be         db  0x8c ; '.'
00000000000002bf         db  0x1c ; '.'
00000000000002c0         db  0xbc ; '.'
00000000000002c1         db  0x50 ; 'P'
00000000000002c2         db  0x76 ; 'v'
00000000000002c3         db  0x9e ; '.'
00000000000002c4         db  0x96 ; '.'
00000000000002c5         db  0xa0 ; '.'
00000000000002c6         db  0x89 ; '.'
00000000000002c7         db  0x97 ; '.'
00000000000002c8         db  0xce ; '.'
00000000000002c9         db  0x2c ; ','
00000000000002ca         db  0x63 ; 'c'
00000000000002cb         db  0x72 ; 'r'
00000000000002cc         db  0xe4 ; '.'
00000000000002cd         db  0x62 ; 'b'
00000000000002ce         db  0x41 ; 'A'
00000000000002cf         db  0xf5 ; '.'
00000000000002d0         db  0x39 ; '9'
00000000000002d1         db  0xf2 ; '.'
00000000000002d2         db  0x8b ; '.'
00000000000002d3         db  0x1c ; '.'
00000000000002d4         db  0x32 ; '2'
00000000000002d5         db  0xc4 ; '.'
00000000000002d6         db  0xf7 ; '.'
00000000000002d7         db  0x12 ; '.'
00000000000002d8         db  0xb3 ; '.'
00000000000002d9         db  0xa2 ; '.'
00000000000002da         db  0xf7 ; '.'
00000000000002db         db  0x12 ; '.'
00000000000002dc         db  0x00 ; '.'
00000000000002dd         db  0x00 ; '.'
00000000000002de         db  0x00 ; '.'
00000000000002df         db  0x00 ; '.'


        ; Section .dynsym
        ; Range: [0x2e0; 0xaa8[ (1992 bytes)
        ; File offset : [736; 2728[ (1992 bytes)
        ; Flags: 0x2
        ;   SHT_DYNSYM
        ;   SHF_ALLOC

00000000000002e0         db  0x00 ; '.'
00000000000002e1         db  0x00 ; '.'
00000000000002e2         db  0x00 ; '.'
00000000000002e3         db  0x00 ; '.'
00000000000002e4         db  0x00 ; '.'
00000000000002e5         db  0x00 ; '.'
00000000000002e6         db  0x00 ; '.'
00000000000002e7         db  0x00 ; '.'
00000000000002e8         db  0x00 ; '.'
00000000000002e9         db  0x00 ; '.'
00000000000002ea         db  0x00 ; '.'
00000000000002eb         db  0x00 ; '.'
00000000000002ec         db  0x00 ; '.'
00000000000002ed         db  0x00 ; '.'
00000000000002ee         db  0x00 ; '.'
00000000000002ef         db  0x00 ; '.'
00000000000002f0         db  0x00 ; '.'
00000000000002f1         db  0x00 ; '.'
00000000000002f2         db  0x00 ; '.'
00000000000002f3         db  0x00 ; '.'
00000000000002f4         db  0x00 ; '.'
00000000000002f5         db  0x00 ; '.'
00000000000002f6         db  0x00 ; '.'
00000000000002f7         db  0x00 ; '.'
00000000000002f8         db  0x44 ; 'D'
00000000000002f9         db  0x01 ; '.'
00000000000002fa         db  0x00 ; '.'
00000000000002fb         db  0x00 ; '.'
00000000000002fc         db  0x12 ; '.'
00000000000002fd         db  0x00 ; '.'
00000000000002fe         db  0x00 ; '.'
00000000000002ff         db  0x00 ; '.'
0000000000000300         db  0x00 ; '.'
0000000000000301         db  0x00 ; '.'
0000000000000302         db  0x00 ; '.'
0000000000000303         db  0x00 ; '.'
0000000000000304         db  0x00 ; '.'
0000000000000305         db  0x00 ; '.'
0000000000000306         db  0x00 ; '.'
0000000000000307         db  0x00 ; '.'
0000000000000308         db  0x00 ; '.'
0000000000000309         db  0x00 ; '.'
000000000000030a         db  0x00 ; '.'
000000000000030b         db  0x00 ; '.'
000000000000030c         db  0x00 ; '.'
000000000000030d         db  0x00 ; '.'
000000000000030e         db  0x00 ; '.'
000000000000030f         db  0x00 ; '.'
0000000000000310         db  0xc7 ; '.'
0000000000000311         db  0x02 ; '.'
0000000000000312         db  0x00 ; '.'
0000000000000313         db  0x00 ; '.'
0000000000000314         db  0x12 ; '.'
0000000000000315         db  0x00 ; '.'
0000000000000316         db  0x00 ; '.'
0000000000000317         db  0x00 ; '.'
0000000000000318         db  0x00 ; '.'
0000000000000319         db  0x00 ; '.'
000000000000031a         db  0x00 ; '.'
000000000000031b         db  0x00 ; '.'
000000000000031c         db  0x00 ; '.'
000000000000031d         db  0x00 ; '.'
000000000000031e         db  0x00 ; '.'
000000000000031f         db  0x00 ; '.'
0000000000000320         db  0x00 ; '.'
0000000000000321         db  0x00 ; '.'
0000000000000322         db  0x00 ; '.'
0000000000000323         db  0x00 ; '.'
0000000000000324         db  0x00 ; '.'
0000000000000325         db  0x00 ; '.'
0000000000000326         db  0x00 ; '.'
0000000000000327         db  0x00 ; '.'
0000000000000328         db  0xbc ; '.'
0000000000000329         db  0x00 ; '.'
000000000000032a         db  0x00 ; '.'
000000000000032b         db  0x00 ; '.'
000000000000032c         db  0x12 ; '.'
000000000000032d         db  0x00 ; '.'
000000000000032e         db  0x00 ; '.'
000000000000032f         db  0x00 ; '.'
0000000000000330         db  0x00 ; '.'
0000000000000331         db  0x00 ; '.'
0000000000000332         db  0x00 ; '.'
0000000000000333         db  0x00 ; '.'
0000000000000334         db  0x00 ; '.'
0000000000000335         db  0x00 ; '.'
0000000000000336         db  0x00 ; '.'
0000000000000337         db  0x00 ; '.'
0000000000000338         db  0x00 ; '.'
0000000000000339         db  0x00 ; '.'
000000000000033a         db  0x00 ; '.'
000000000000033b         db  0x00 ; '.'
000000000000033c         db  0x00 ; '.'
000000000000033d         db  0x00 ; '.'
000000000000033e         db  0x00 ; '.'
000000000000033f         db  0x00 ; '.'
0000000000000340         db  0x2c ; ','
0000000000000341         db  0x01 ; '.'
0000000000000342         db  0x00 ; '.'
0000000000000343         db  0x00 ; '.'
0000000000000344         db  0x12 ; '.'
0000000000000345         db  0x00 ; '.'
0000000000000346         db  0x00 ; '.'
0000000000000347         db  0x00 ; '.'
0000000000000348         db  0x00 ; '.'
0000000000000349         db  0x00 ; '.'
000000000000034a         db  0x00 ; '.'
000000000000034b         db  0x00 ; '.'
000000000000034c         db  0x00 ; '.'
000000000000034d         db  0x00 ; '.'
000000000000034e         db  0x00 ; '.'
000000000000034f         db  0x00 ; '.'
0000000000000350         db  0x00 ; '.'
0000000000000351         db  0x00 ; '.'
0000000000000352         db  0x00 ; '.'
0000000000000353         db  0x00 ; '.'
0000000000000354         db  0x00 ; '.'
0000000000000355         db  0x00 ; '.'
0000000000000356         db  0x00 ; '.'
0000000000000357         db  0x00 ; '.'
0000000000000358         db  0x40 ; '@'
0000000000000359         db  0x00 ; '.'
000000000000035a         db  0x00 ; '.'
000000000000035b         db  0x00 ; '.'
000000000000035c         db  0x12 ; '.'
000000000000035d         db  0x00 ; '.'
000000000000035e         db  0x00 ; '.'
000000000000035f         db  0x00 ; '.'
0000000000000360         db  0x00 ; '.'
0000000000000361         db  0x00 ; '.'
0000000000000362         db  0x00 ; '.'
0000000000000363         db  0x00 ; '.'
0000000000000364         db  0x00 ; '.'
0000000000000365         db  0x00 ; '.'
0000000000000366         db  0x00 ; '.'
0000000000000367         db  0x00 ; '.'
0000000000000368         db  0x00 ; '.'
0000000000000369         db  0x00 ; '.'
000000000000036a         db  0x00 ; '.'
000000000000036b         db  0x00 ; '.'
000000000000036c         db  0x00 ; '.'
000000000000036d         db  0x00 ; '.'
000000000000036e         db  0x00 ; '.'
000000000000036f         db  0x00 ; '.'
0000000000000370         db  0x35 ; '5'
0000000000000371         db  0x03 ; '.'
0000000000000372         db  0x00 ; '.'
0000000000000373         db  0x00 ; '.'
0000000000000374         db  0x20 ; ' '
0000000000000375         db  0x00 ; '.'
0000000000000376         db  0x00 ; '.'
0000000000000377         db  0x00 ; '.'
0000000000000378         db  0x00 ; '.'
0000000000000379         db  0x00 ; '.'
000000000000037a         db  0x00 ; '.'
000000000000037b         db  0x00 ; '.'
000000000000037c         db  0x00 ; '.'
000000000000037d         db  0x00 ; '.'
000000000000037e         db  0x00 ; '.'
000000000000037f         db  0x00 ; '.'
0000000000000380         db  0x00 ; '.'
0000000000000381         db  0x00 ; '.'
0000000000000382         db  0x00 ; '.'
0000000000000383         db  0x00 ; '.'
0000000000000384         db  0x00 ; '.'
0000000000000385         db  0x00 ; '.'
0000000000000386         db  0x00 ; '.'
0000000000000387         db  0x00 ; '.'
0000000000000388         db  0xc2 ; '.'
0000000000000389         db  0x00 ; '.'
000000000000038a         db  0x00 ; '.'
000000000000038b         db  0x00 ; '.'
000000000000038c         db  0x12 ; '.'
000000000000038d         db  0x00 ; '.'
000000000000038e         db  0x00 ; '.'
000000000000038f         db  0x00 ; '.'
0000000000000390         db  0x00 ; '.'
0000000000000391         db  0x00 ; '.'
0000000000000392         db  0x00 ; '.'
0000000000000393         db  0x00 ; '.'
0000000000000394         db  0x00 ; '.'
0000000000000395         db  0x00 ; '.'
0000000000000396         db  0x00 ; '.'
0000000000000397         db  0x00 ; '.'
0000000000000398         db  0x00 ; '.'
0000000000000399         db  0x00 ; '.'
000000000000039a         db  0x00 ; '.'
000000000000039b         db  0x00 ; '.'
000000000000039c         db  0x00 ; '.'
000000000000039d         db  0x00 ; '.'
000000000000039e         db  0x00 ; '.'
000000000000039f         db  0x00 ; '.'
00000000000003a0         db  0x12 ; '.'
00000000000003a1         db  0x00 ; '.'
00000000000003a2         db  0x00 ; '.'
00000000000003a3         db  0x00 ; '.'
00000000000003a4         db  0x12 ; '.'
00000000000003a5         db  0x00 ; '.'
00000000000003a6         db  0x00 ; '.'
00000000000003a7         db  0x00 ; '.'
00000000000003a8         db  0x00 ; '.'
00000000000003a9         db  0x00 ; '.'
00000000000003aa         db  0x00 ; '.'
00000000000003ab         db  0x00 ; '.'
00000000000003ac         db  0x00 ; '.'
00000000000003ad         db  0x00 ; '.'
00000000000003ae         db  0x00 ; '.'
00000000000003af         db  0x00 ; '.'
00000000000003b0         db  0x00 ; '.'
00000000000003b1         db  0x00 ; '.'
00000000000003b2         db  0x00 ; '.'
00000000000003b3         db  0x00 ; '.'
00000000000003b4         db  0x00 ; '.'
00000000000003b5         db  0x00 ; '.'
00000000000003b6         db  0x00 ; '.'
00000000000003b7         db  0x00 ; '.'
00000000000003b8         db  0x11 ; '.'
00000000000003b9         db  0x02 ; '.'
00000000000003ba         db  0x00 ; '.'
00000000000003bb         db  0x00 ; '.'
00000000000003bc         db  0x12 ; '.'
00000000000003bd         db  0x00 ; '.'
00000000000003be         db  0x00 ; '.'
00000000000003bf         db  0x00 ; '.'
00000000000003c0         db  0x00 ; '.'
00000000000003c1         db  0x00 ; '.'
00000000000003c2         db  0x00 ; '.'
00000000000003c3         db  0x00 ; '.'
00000000000003c4         db  0x00 ; '.'
00000000000003c5         db  0x00 ; '.'
00000000000003c6         db  0x00 ; '.'
00000000000003c7         db  0x00 ; '.'
00000000000003c8         db  0x00 ; '.'
00000000000003c9         db  0x00 ; '.'
00000000000003ca         db  0x00 ; '.'
00000000000003cb         db  0x00 ; '.'
00000000000003cc         db  0x00 ; '.'
00000000000003cd         db  0x00 ; '.'
00000000000003ce         db  0x00 ; '.'
00000000000003cf         db  0x00 ; '.'
00000000000003d0         db  0x46 ; 'F'
00000000000003d1         db  0x02 ; '.'
00000000000003d2         db  0x00 ; '.'
00000000000003d3         db  0x00 ; '.'
00000000000003d4         db  0x12 ; '.'
00000000000003d5         db  0x00 ; '.'
00000000000003d6         db  0x00 ; '.'
00000000000003d7         db  0x00 ; '.'
00000000000003d8         db  0x00 ; '.'
00000000000003d9         db  0x00 ; '.'
00000000000003da         db  0x00 ; '.'
00000000000003db         db  0x00 ; '.'
00000000000003dc         db  0x00 ; '.'
00000000000003dd         db  0x00 ; '.'
00000000000003de         db  0x00 ; '.'
00000000000003df         db  0x00 ; '.'
00000000000003e0         db  0x00 ; '.'
00000000000003e1         db  0x00 ; '.'
00000000000003e2         db  0x00 ; '.'
00000000000003e3         db  0x00 ; '.'
00000000000003e4         db  0x00 ; '.'
00000000000003e5         db  0x00 ; '.'
00000000000003e6         db  0x00 ; '.'
00000000000003e7         db  0x00 ; '.'
00000000000003e8         db  0x5b ; '['                                         ; DATA XREF=xstrtoul+420
00000000000003e9         db  0x02 ; '.'
00000000000003ea         db  0x00 ; '.'
00000000000003eb         db  0x00 ; '.'
00000000000003ec         db  0x12 ; '.'
00000000000003ed         db  0x00 ; '.'
00000000000003ee         db  0x00 ; '.'
00000000000003ef         db  0x00 ; '.'
00000000000003f0         db  0x00 ; '.'
00000000000003f1         db  0x00 ; '.'
00000000000003f2         db  0x00 ; '.'
00000000000003f3         db  0x00 ; '.'
00000000000003f4         db  0x00 ; '.'
00000000000003f5         db  0x00 ; '.'
00000000000003f6         db  0x00 ; '.'
00000000000003f7         db  0x00 ; '.'
00000000000003f8         db  0x00 ; '.'
00000000000003f9         db  0x00 ; '.'
00000000000003fa         db  0x00 ; '.'
00000000000003fb         db  0x00 ; '.'
00000000000003fc         db  0x00 ; '.'
00000000000003fd         db  0x00 ; '.'
00000000000003fe         db  0x00 ; '.'
00000000000003ff         db  0x00 ; '.'
0000000000000400         db  0x7c ; '|'                                         ; DATA XREF=main+878, xstrtoul+437, xstrtoul+806, xstrtoul+878, rpl_fcntl+288
0000000000000401         db  0x02 ; '.'                                         ; DATA XREF=rpl_fcntl+272
0000000000000402         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+280
0000000000000403         db  0x00 ; '.'
0000000000000404         db  0x12 ; '.'
0000000000000405         db  0x00 ; '.'
0000000000000406         db  0x00 ; '.'                                         ; DATA XREF=fts_build+2307, rpl_fcntl+81, rpl_fcntl+123, rpl_fcntl+264
0000000000000407         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+256
0000000000000408         db  0x00 ; '.'
0000000000000409         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+336
000000000000040a         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+350
000000000000040b         db  0x00 ; '.'
000000000000040c         db  0x00 ; '.'
000000000000040d         db  0x00 ; '.'
000000000000040e         db  0x00 ; '.'
000000000000040f         db  0x00 ; '.'
0000000000000410         db  0x00 ; '.'
0000000000000411         db  0x00 ; '.'
0000000000000412         db  0x00 ; '.'
0000000000000413         db  0x00 ; '.'
0000000000000414         db  0x00 ; '.'
0000000000000415         db  0x00 ; '.'
0000000000000416         db  0x00 ; '.'
0000000000000417         db  0x00 ; '.'
0000000000000418         db  0x7f ; '.'
0000000000000419         db  0x01 ; '.'
000000000000041a         db  0x00 ; '.'
000000000000041b         db  0x00 ; '.'
000000000000041c         db  0x12 ; '.'
000000000000041d         db  0x00 ; '.'
000000000000041e         db  0x00 ; '.'
000000000000041f         db  0x00 ; '.'
0000000000000420         db  0x00 ; '.'
0000000000000421         db  0x00 ; '.'
0000000000000422         db  0x00 ; '.'
0000000000000423         db  0x00 ; '.'
0000000000000424         db  0x00 ; '.'
0000000000000425         db  0x00 ; '.'
0000000000000426         db  0x00 ; '.'
0000000000000427         db  0x00 ; '.'
0000000000000428         db  0x00 ; '.'
0000000000000429         db  0x00 ; '.'
000000000000042a         db  0x00 ; '.'
000000000000042b         db  0x00 ; '.'
000000000000042c         db  0x00 ; '.'
000000000000042d         db  0x00 ; '.'
000000000000042e         db  0x00 ; '.'
000000000000042f         db  0x00 ; '.'
0000000000000430         db  0x61 ; 'a'
0000000000000431         db  0x00 ; '.'
0000000000000432         db  0x00 ; '.'
0000000000000433         db  0x00 ; '.'
0000000000000434         db  0x12 ; '.'
0000000000000435         db  0x00 ; '.'
0000000000000436         db  0x00 ; '.'
0000000000000437         db  0x00 ; '.'
0000000000000438         db  0x00 ; '.'
0000000000000439         db  0x00 ; '.'
000000000000043a         db  0x00 ; '.'
000000000000043b         db  0x00 ; '.'
000000000000043c         db  0x00 ; '.'
000000000000043d         db  0x00 ; '.'
000000000000043e         db  0x00 ; '.'
000000000000043f         db  0x00 ; '.'
0000000000000440         db  0x00 ; '.'
0000000000000441         db  0x00 ; '.'
0000000000000442         db  0x00 ; '.'
0000000000000443         db  0x00 ; '.'
0000000000000444         db  0x00 ; '.'
0000000000000445         db  0x00 ; '.'
0000000000000446         db  0x00 ; '.'
0000000000000447         db  0x00 ; '.'
0000000000000448         db  0x78 ; 'x'
0000000000000449         db  0x02 ; '.'
000000000000044a         db  0x00 ; '.'
000000000000044b         db  0x00 ; '.'
000000000000044c         db  0x12 ; '.'
000000000000044d         db  0x00 ; '.'
000000000000044e         db  0x00 ; '.'
000000000000044f         db  0x00 ; '.'
0000000000000450         db  0x00 ; '.'
0000000000000451         db  0x00 ; '.'
0000000000000452         db  0x00 ; '.'
0000000000000453         db  0x00 ; '.'
0000000000000454         db  0x00 ; '.'
0000000000000455         db  0x00 ; '.'
0000000000000456         db  0x00 ; '.'
0000000000000457         db  0x00 ; '.'
0000000000000458         db  0x00 ; '.'
0000000000000459         db  0x00 ; '.'
000000000000045a         db  0x00 ; '.'
000000000000045b         db  0x00 ; '.'
000000000000045c         db  0x00 ; '.'
000000000000045d         db  0x00 ; '.'
000000000000045e         db  0x00 ; '.'
000000000000045f         db  0x00 ; '.'
0000000000000460         db  0xaa ; '.'
0000000000000461         db  0x02 ; '.'
0000000000000462         db  0x00 ; '.'
0000000000000463         db  0x00 ; '.'
0000000000000464         db  0x12 ; '.'
0000000000000465         db  0x00 ; '.'
0000000000000466         db  0x00 ; '.'
0000000000000467         db  0x00 ; '.'
0000000000000468         db  0x00 ; '.'
0000000000000469         db  0x00 ; '.'
000000000000046a         db  0x00 ; '.'
000000000000046b         db  0x00 ; '.'
000000000000046c         db  0x00 ; '.'
000000000000046d         db  0x00 ; '.'
000000000000046e         db  0x00 ; '.'
000000000000046f         db  0x00 ; '.'
0000000000000470         db  0x00 ; '.'
0000000000000471         db  0x00 ; '.'
0000000000000472         db  0x00 ; '.'
0000000000000473         db  0x00 ; '.'
0000000000000474         db  0x00 ; '.'
0000000000000475         db  0x00 ; '.'
0000000000000476         db  0x00 ; '.'
0000000000000477         db  0x00 ; '.'
0000000000000478         db  0x57 ; 'W'
0000000000000479         db  0x00 ; '.'
000000000000047a         db  0x00 ; '.'
000000000000047b         db  0x00 ; '.'
000000000000047c         db  0x12 ; '.'
000000000000047d         db  0x00 ; '.'
000000000000047e         db  0x00 ; '.'
000000000000047f         db  0x00 ; '.'
0000000000000480         db  0x00 ; '.'
0000000000000481         db  0x00 ; '.'
0000000000000482         db  0x00 ; '.'
0000000000000483         db  0x00 ; '.'
0000000000000484         db  0x00 ; '.'
0000000000000485         db  0x00 ; '.'
0000000000000486         db  0x00 ; '.'
0000000000000487         db  0x00 ; '.'
0000000000000488         db  0x00 ; '.'
0000000000000489         db  0x00 ; '.'
000000000000048a         db  0x00 ; '.'
000000000000048b         db  0x00 ; '.'
000000000000048c         db  0x00 ; '.'
000000000000048d         db  0x00 ; '.'
000000000000048e         db  0x00 ; '.'
000000000000048f         db  0x00 ; '.'
0000000000000490         db  0xee ; '.'
0000000000000491         db  0x00 ; '.'
0000000000000492         db  0x00 ; '.'
0000000000000493         db  0x00 ; '.'
0000000000000494         db  0x12 ; '.'
0000000000000495         db  0x00 ; '.'
0000000000000496         db  0x00 ; '.'
0000000000000497         db  0x00 ; '.'
0000000000000498         db  0x00 ; '.'
0000000000000499         db  0x00 ; '.'
000000000000049a         db  0x00 ; '.'
000000000000049b         db  0x00 ; '.'
000000000000049c         db  0x00 ; '.'
000000000000049d         db  0x00 ; '.'
000000000000049e         db  0x00 ; '.'
000000000000049f         db  0x00 ; '.'
00000000000004a0         db  0x00 ; '.'
00000000000004a1         db  0x00 ; '.'
00000000000004a2         db  0x00 ; '.'
00000000000004a3         db  0x00 ; '.'
00000000000004a4         db  0x00 ; '.'
00000000000004a5         db  0x00 ; '.'
00000000000004a6         db  0x00 ; '.'
00000000000004a7         db  0x00 ; '.'
00000000000004a8         db  0x1e ; '.'
00000000000004a9         db  0x01 ; '.'
00000000000004aa         db  0x00 ; '.'
00000000000004ab         db  0x00 ; '.'
00000000000004ac         db  0x12 ; '.'
00000000000004ad         db  0x00 ; '.'
00000000000004ae         db  0x00 ; '.'
00000000000004af         db  0x00 ; '.'
00000000000004b0         db  0x00 ; '.'
00000000000004b1         db  0x00 ; '.'
00000000000004b2         db  0x00 ; '.'
00000000000004b3         db  0x00 ; '.'
00000000000004b4         db  0x00 ; '.'
00000000000004b5         db  0x00 ; '.'
00000000000004b6         db  0x00 ; '.'
00000000000004b7         db  0x00 ; '.'
00000000000004b8         db  0x00 ; '.'
00000000000004b9         db  0x00 ; '.'
00000000000004ba         db  0x00 ; '.'
00000000000004bb         db  0x00 ; '.'
00000000000004bc         db  0x00 ; '.'
00000000000004bd         db  0x00 ; '.'
00000000000004be         db  0x00 ; '.'
00000000000004bf         db  0x00 ; '.'
00000000000004c0         db  0x9a ; '.'
00000000000004c1         db  0x00 ; '.'
00000000000004c2         db  0x00 ; '.'
00000000000004c3         db  0x00 ; '.'
00000000000004c4         db  0x12 ; '.'
00000000000004c5         db  0x00 ; '.'
00000000000004c6         db  0x00 ; '.'
00000000000004c7         db  0x00 ; '.'
00000000000004c8         db  0x00 ; '.'
00000000000004c9         db  0x00 ; '.'
00000000000004ca         db  0x00 ; '.'
00000000000004cb         db  0x00 ; '.'
00000000000004cc         db  0x00 ; '.'
00000000000004cd         db  0x00 ; '.'
00000000000004ce         db  0x00 ; '.'
00000000000004cf         db  0x00 ; '.'
00000000000004d0         db  0x00 ; '.'
00000000000004d1         db  0x00 ; '.'
00000000000004d2         db  0x00 ; '.'
00000000000004d3         db  0x00 ; '.'
00000000000004d4         db  0x00 ; '.'
00000000000004d5         db  0x00 ; '.'
00000000000004d6         db  0x00 ; '.'
00000000000004d7         db  0x00 ; '.'
00000000000004d8         db  0x61 ; 'a'
00000000000004d9         db  0x02 ; '.'
00000000000004da         db  0x00 ; '.'
00000000000004db         db  0x00 ; '.'
00000000000004dc         db  0x12 ; '.'
00000000000004dd         db  0x00 ; '.'
00000000000004de         db  0x00 ; '.'
00000000000004df         db  0x00 ; '.'
00000000000004e0         db  0x00 ; '.'
00000000000004e1         db  0x00 ; '.'
00000000000004e2         db  0x00 ; '.'
00000000000004e3         db  0x00 ; '.'
00000000000004e4         db  0x00 ; '.'
00000000000004e5         db  0x00 ; '.'
00000000000004e6         db  0x00 ; '.'
00000000000004e7         db  0x00 ; '.'
00000000000004e8         db  0x00 ; '.'
00000000000004e9         db  0x00 ; '.'
00000000000004ea         db  0x00 ; '.'
00000000000004eb         db  0x00 ; '.'
00000000000004ec         db  0x00 ; '.'
00000000000004ed         db  0x00 ; '.'
00000000000004ee         db  0x00 ; '.'
00000000000004ef         db  0x00 ; '.'
00000000000004f0         db  0x89 ; '.'
00000000000004f1         db  0x00 ; '.'
00000000000004f2         db  0x00 ; '.'
00000000000004f3         db  0x00 ; '.'
00000000000004f4         db  0x12 ; '.'
00000000000004f5         db  0x00 ; '.'
00000000000004f6         db  0x00 ; '.'
00000000000004f7         db  0x00 ; '.'
00000000000004f8         db  0x00 ; '.'
00000000000004f9         db  0x00 ; '.'
00000000000004fa         db  0x00 ; '.'
00000000000004fb         db  0x00 ; '.'
00000000000004fc         db  0x00 ; '.'
00000000000004fd         db  0x00 ; '.'
00000000000004fe         db  0x00 ; '.'
00000000000004ff         db  0x00 ; '.'
0000000000000500         db  0x00 ; '.'
0000000000000501         db  0x00 ; '.'
0000000000000502         db  0x00 ; '.'
0000000000000503         db  0x00 ; '.'
0000000000000504         db  0x00 ; '.'
0000000000000505         db  0x00 ; '.'
0000000000000506         db  0x00 ; '.'
0000000000000507         db  0x00 ; '.'
0000000000000508         db  0xee ; '.'
0000000000000509         db  0x01 ; '.'
000000000000050a         db  0x00 ; '.'
000000000000050b         db  0x00 ; '.'
000000000000050c         db  0x12 ; '.'
000000000000050d         db  0x00 ; '.'
000000000000050e         db  0x00 ; '.'
000000000000050f         db  0x00 ; '.'
0000000000000510         db  0x00 ; '.'
0000000000000511         db  0x00 ; '.'
0000000000000512         db  0x00 ; '.'
0000000000000513         db  0x00 ; '.'
0000000000000514         db  0x00 ; '.'
0000000000000515         db  0x00 ; '.'
0000000000000516         db  0x00 ; '.'
0000000000000517         db  0x00 ; '.'
0000000000000518         db  0x00 ; '.'
0000000000000519         db  0x00 ; '.'
000000000000051a         db  0x00 ; '.'
000000000000051b         db  0x00 ; '.'
000000000000051c         db  0x00 ; '.'
000000000000051d         db  0x00 ; '.'
000000000000051e         db  0x00 ; '.'
000000000000051f         db  0x00 ; '.'
0000000000000520         db  0x38 ; '8'
0000000000000521         db  0x00 ; '.'
0000000000000522         db  0x00 ; '.'
0000000000000523         db  0x00 ; '.'
0000000000000524         db  0x12 ; '.'
0000000000000525         db  0x00 ; '.'
0000000000000526         db  0x00 ; '.'
0000000000000527         db  0x00 ; '.'
0000000000000528         db  0x00 ; '.'
0000000000000529         db  0x00 ; '.'
000000000000052a         db  0x00 ; '.'
000000000000052b         db  0x00 ; '.'
000000000000052c         db  0x00 ; '.'
000000000000052d         db  0x00 ; '.'
000000000000052e         db  0x00 ; '.'
000000000000052f         db  0x00 ; '.'
0000000000000530         db  0x00 ; '.'
0000000000000531         db  0x00 ; '.'
0000000000000532         db  0x00 ; '.'
0000000000000533         db  0x00 ; '.'
0000000000000534         db  0x00 ; '.'
0000000000000535         db  0x00 ; '.'
0000000000000536         db  0x00 ; '.'
0000000000000537         db  0x00 ; '.'
0000000000000538         db  0x21 ; '!'
0000000000000539         db  0x02 ; '.'
000000000000053a         db  0x00 ; '.'
000000000000053b         db  0x00 ; '.'
000000000000053c         db  0x12 ; '.'
000000000000053d         db  0x00 ; '.'
000000000000053e         db  0x00 ; '.'
000000000000053f         db  0x00 ; '.'
0000000000000540         db  0x00 ; '.'
0000000000000541         db  0x00 ; '.'
0000000000000542         db  0x00 ; '.'
0000000000000543         db  0x00 ; '.'
0000000000000544         db  0x00 ; '.'
0000000000000545         db  0x00 ; '.'
0000000000000546         db  0x00 ; '.'
0000000000000547         db  0x00 ; '.'
0000000000000548         db  0x00 ; '.'
0000000000000549         db  0x00 ; '.'
000000000000054a         db  0x00 ; '.'
000000000000054b         db  0x00 ; '.'
000000000000054c         db  0x00 ; '.'
000000000000054d         db  0x00 ; '.'
000000000000054e         db  0x00 ; '.'
000000000000054f         db  0x00 ; '.'
0000000000000550         db  0x7a ; 'z'
0000000000000551         db  0x00 ; '.'
0000000000000552         db  0x00 ; '.'
0000000000000553         db  0x00 ; '.'
0000000000000554         db  0x12 ; '.'
0000000000000555         db  0x00 ; '.'
0000000000000556         db  0x00 ; '.'
0000000000000557         db  0x00 ; '.'
0000000000000558         db  0x00 ; '.'
0000000000000559         db  0x00 ; '.'
000000000000055a         db  0x00 ; '.'
000000000000055b         db  0x00 ; '.'
000000000000055c         db  0x00 ; '.'
000000000000055d         db  0x00 ; '.'
000000000000055e         db  0x00 ; '.'
000000000000055f         db  0x00 ; '.'
0000000000000560         db  0x00 ; '.'
0000000000000561         db  0x00 ; '.'
0000000000000562         db  0x00 ; '.'
0000000000000563         db  0x00 ; '.'
0000000000000564         db  0x00 ; '.'
0000000000000565         db  0x00 ; '.'
0000000000000566         db  0x00 ; '.'
0000000000000567         db  0x00 ; '.'
0000000000000568         db  0x87 ; '.'
0000000000000569         db  0x02 ; '.'
000000000000056a         db  0x00 ; '.'
000000000000056b         db  0x00 ; '.'
000000000000056c         db  0x12 ; '.'
000000000000056d         db  0x00 ; '.'
000000000000056e         db  0x00 ; '.'
000000000000056f         db  0x00 ; '.'
0000000000000570         db  0x00 ; '.'
0000000000000571         db  0x00 ; '.'
0000000000000572         db  0x00 ; '.'
0000000000000573         db  0x00 ; '.'
0000000000000574         db  0x00 ; '.'
0000000000000575         db  0x00 ; '.'
0000000000000576         db  0x00 ; '.'
0000000000000577         db  0x00 ; '.'
0000000000000578         db  0x00 ; '.'
0000000000000579         db  0x00 ; '.'
000000000000057a         db  0x00 ; '.'
000000000000057b         db  0x00 ; '.'
000000000000057c         db  0x00 ; '.'
000000000000057d         db  0x00 ; '.'
000000000000057e         db  0x00 ; '.'
000000000000057f         db  0x00 ; '.'
0000000000000580         db  0x4f ; 'O'
0000000000000581         db  0x00 ; '.'
0000000000000582         db  0x00 ; '.'
0000000000000583         db  0x00 ; '.'
0000000000000584         db  0x12 ; '.'
0000000000000585         db  0x00 ; '.'
0000000000000586         db  0x00 ; '.'
0000000000000587         db  0x00 ; '.'
0000000000000588         db  0x00 ; '.'
0000000000000589         db  0x00 ; '.'
000000000000058a         db  0x00 ; '.'
000000000000058b         db  0x00 ; '.'
000000000000058c         db  0x00 ; '.'
000000000000058d         db  0x00 ; '.'
000000000000058e         db  0x00 ; '.'
000000000000058f         db  0x00 ; '.'
0000000000000590         db  0x00 ; '.'
0000000000000591         db  0x00 ; '.'
0000000000000592         db  0x00 ; '.'
0000000000000593         db  0x00 ; '.'
0000000000000594         db  0x00 ; '.'
0000000000000595         db  0x00 ; '.'
0000000000000596         db  0x00 ; '.'
0000000000000597         db  0x00 ; '.'
0000000000000598         db  0x72 ; 'r'
0000000000000599         db  0x01 ; '.'
000000000000059a         db  0x00 ; '.'
000000000000059b         db  0x00 ; '.'
000000000000059c         db  0x12 ; '.'
000000000000059d         db  0x00 ; '.'
000000000000059e         db  0x00 ; '.'
000000000000059f         db  0x00 ; '.'
00000000000005a0         db  0x00 ; '.'
00000000000005a1         db  0x00 ; '.'
00000000000005a2         db  0x00 ; '.'
00000000000005a3         db  0x00 ; '.'
00000000000005a4         db  0x00 ; '.'
00000000000005a5         db  0x00 ; '.'
00000000000005a6         db  0x00 ; '.'
00000000000005a7         db  0x00 ; '.'
00000000000005a8         db  0x00 ; '.'
00000000000005a9         db  0x00 ; '.'
00000000000005aa         db  0x00 ; '.'
00000000000005ab         db  0x00 ; '.'
00000000000005ac         db  0x00 ; '.'
00000000000005ad         db  0x00 ; '.'
00000000000005ae         db  0x00 ; '.'
00000000000005af         db  0x00 ; '.'
00000000000005b0         db  0xe0 ; '.'
00000000000005b1         db  0x00 ; '.'
00000000000005b2         db  0x00 ; '.'
00000000000005b3         db  0x00 ; '.'
00000000000005b4         db  0x12 ; '.'
00000000000005b5         db  0x00 ; '.'
00000000000005b6         db  0x00 ; '.'
00000000000005b7         db  0x00 ; '.'
00000000000005b8         db  0x00 ; '.'
00000000000005b9         db  0x00 ; '.'
00000000000005ba         db  0x00 ; '.'
00000000000005bb         db  0x00 ; '.'
00000000000005bc         db  0x00 ; '.'
00000000000005bd         db  0x00 ; '.'
00000000000005be         db  0x00 ; '.'
00000000000005bf         db  0x00 ; '.'
00000000000005c0         db  0x00 ; '.'
00000000000005c1         db  0x00 ; '.'
00000000000005c2         db  0x00 ; '.'
00000000000005c3         db  0x00 ; '.'
00000000000005c4         db  0x00 ; '.'
00000000000005c5         db  0x00 ; '.'
00000000000005c6         db  0x00 ; '.'
00000000000005c7         db  0x00 ; '.'
00000000000005c8         db  0x25 ; '%'
00000000000005c9         db  0x01 ; '.'
00000000000005ca         db  0x00 ; '.'
00000000000005cb         db  0x00 ; '.'
00000000000005cc         db  0x12 ; '.'
00000000000005cd         db  0x00 ; '.'
00000000000005ce         db  0x00 ; '.'
00000000000005cf         db  0x00 ; '.'
00000000000005d0         db  0x00 ; '.'
00000000000005d1         db  0x00 ; '.'
00000000000005d2         db  0x00 ; '.'
00000000000005d3         db  0x00 ; '.'
00000000000005d4         db  0x00 ; '.'
00000000000005d5         db  0x00 ; '.'
00000000000005d6         db  0x00 ; '.'
00000000000005d7         db  0x00 ; '.'
00000000000005d8         db  0x00 ; '.'
00000000000005d9         db  0x00 ; '.'
00000000000005da         db  0x00 ; '.'
00000000000005db         db  0x00 ; '.'
00000000000005dc         db  0x00 ; '.'
00000000000005dd         db  0x00 ; '.'
00000000000005de         db  0x00 ; '.'
00000000000005df         db  0x00 ; '.'
00000000000005e0         db  0x80 ; '.'
00000000000005e1         db  0x01 ; '.'
00000000000005e2         db  0x00 ; '.'
00000000000005e3         db  0x00 ; '.'
00000000000005e4         db  0x12 ; '.'
00000000000005e5         db  0x00 ; '.'
00000000000005e6         db  0x00 ; '.'
00000000000005e7         db  0x00 ; '.'
00000000000005e8         db  0x00 ; '.'
00000000000005e9         db  0x00 ; '.'
00000000000005ea         db  0x00 ; '.'
00000000000005eb         db  0x00 ; '.'
00000000000005ec         db  0x00 ; '.'
00000000000005ed         db  0x00 ; '.'
00000000000005ee         db  0x00 ; '.'
00000000000005ef         db  0x00 ; '.'
00000000000005f0         db  0x00 ; '.'
00000000000005f1         db  0x00 ; '.'
00000000000005f2         db  0x00 ; '.'
00000000000005f3         db  0x00 ; '.'
00000000000005f4         db  0x00 ; '.'
00000000000005f5         db  0x00 ; '.'
00000000000005f6         db  0x00 ; '.'
00000000000005f7         db  0x00 ; '.'
00000000000005f8         db  0x9f ; '.'
00000000000005f9         db  0x01 ; '.'
00000000000005fa         db  0x00 ; '.'
00000000000005fb         db  0x00 ; '.'
00000000000005fc         db  0x12 ; '.'
00000000000005fd         db  0x00 ; '.'
00000000000005fe         db  0x00 ; '.'
00000000000005ff         db  0x00 ; '.'
0000000000000600         db  0x00 ; '.'
0000000000000601         db  0x00 ; '.'
0000000000000602         db  0x00 ; '.'
0000000000000603         db  0x00 ; '.'
0000000000000604         db  0x00 ; '.'
0000000000000605         db  0x00 ; '.'
0000000000000606         db  0x00 ; '.'
0000000000000607         db  0x00 ; '.'
0000000000000608         db  0x00 ; '.'
0000000000000609         db  0x00 ; '.'
000000000000060a         db  0x00 ; '.'
000000000000060b         db  0x00 ; '.'
000000000000060c         db  0x00 ; '.'
000000000000060d         db  0x00 ; '.'
000000000000060e         db  0x00 ; '.'
000000000000060f         db  0x00 ; '.'
0000000000000610         db  0x6a ; 'j'
0000000000000611         db  0x00 ; '.'
0000000000000612         db  0x00 ; '.'
0000000000000613         db  0x00 ; '.'
0000000000000614         db  0x12 ; '.'
0000000000000615         db  0x00 ; '.'
0000000000000616         db  0x00 ; '.'
0000000000000617         db  0x00 ; '.'
0000000000000618         db  0x00 ; '.'
0000000000000619         db  0x00 ; '.'
000000000000061a         db  0x00 ; '.'
000000000000061b         db  0x00 ; '.'
000000000000061c         db  0x00 ; '.'
000000000000061d         db  0x00 ; '.'
000000000000061e         db  0x00 ; '.'
000000000000061f         db  0x00 ; '.'
0000000000000620         db  0x00 ; '.'
0000000000000621         db  0x00 ; '.'
0000000000000622         db  0x00 ; '.'
0000000000000623         db  0x00 ; '.'
0000000000000624         db  0x00 ; '.'
0000000000000625         db  0x00 ; '.'
0000000000000626         db  0x00 ; '.'
0000000000000627         db  0x00 ; '.'
0000000000000628         db  0x92 ; '.'
0000000000000629         db  0x02 ; '.'
000000000000062a         db  0x00 ; '.'
000000000000062b         db  0x00 ; '.'
000000000000062c         db  0x12 ; '.'
000000000000062d         db  0x00 ; '.'
000000000000062e         db  0x00 ; '.'
000000000000062f         db  0x00 ; '.'
0000000000000630         db  0x00 ; '.'
0000000000000631         db  0x00 ; '.'
0000000000000632         db  0x00 ; '.'
0000000000000633         db  0x00 ; '.'
0000000000000634         db  0x00 ; '.'
0000000000000635         db  0x00 ; '.'
0000000000000636         db  0x00 ; '.'
0000000000000637         db  0x00 ; '.'
0000000000000638         db  0x00 ; '.'
0000000000000639         db  0x00 ; '.'
000000000000063a         db  0x00 ; '.'
000000000000063b         db  0x00 ; '.'
000000000000063c         db  0x00 ; '.'
000000000000063d         db  0x00 ; '.'
000000000000063e         db  0x00 ; '.'
000000000000063f         db  0x00 ; '.'
0000000000000640         db  0x3d ; '='
0000000000000641         db  0x01 ; '.'
0000000000000642         db  0x00 ; '.'
0000000000000643         db  0x00 ; '.'
0000000000000644         db  0x12 ; '.'
0000000000000645         db  0x00 ; '.'
0000000000000646         db  0x00 ; '.'
0000000000000647         db  0x00 ; '.'
0000000000000648         db  0x00 ; '.'
0000000000000649         db  0x00 ; '.'
000000000000064a         db  0x00 ; '.'
000000000000064b         db  0x00 ; '.'
000000000000064c         db  0x00 ; '.'
000000000000064d         db  0x00 ; '.'
000000000000064e         db  0x00 ; '.'
000000000000064f         db  0x00 ; '.'
0000000000000650         db  0x00 ; '.'
0000000000000651         db  0x00 ; '.'
0000000000000652         db  0x00 ; '.'
0000000000000653         db  0x00 ; '.'
0000000000000654         db  0x00 ; '.'
0000000000000655         db  0x00 ; '.'
0000000000000656         db  0x00 ; '.'
0000000000000657         db  0x00 ; '.'
0000000000000658         db  0xb8 ; '.'
0000000000000659         db  0x02 ; '.'
000000000000065a         db  0x00 ; '.'
000000000000065b         db  0x00 ; '.'
000000000000065c         db  0x12 ; '.'
000000000000065d         db  0x00 ; '.'
000000000000065e         db  0x00 ; '.'
000000000000065f         db  0x00 ; '.'
0000000000000660         db  0x00 ; '.'
0000000000000661         db  0x00 ; '.'
0000000000000662         db  0x00 ; '.'
0000000000000663         db  0x00 ; '.'
0000000000000664         db  0x00 ; '.'
0000000000000665         db  0x00 ; '.'
0000000000000666         db  0x00 ; '.'
0000000000000667         db  0x00 ; '.'
0000000000000668         db  0x00 ; '.'
0000000000000669         db  0x00 ; '.'
000000000000066a         db  0x00 ; '.'
000000000000066b         db  0x00 ; '.'
000000000000066c         db  0x00 ; '.'
000000000000066d         db  0x00 ; '.'
000000000000066e         db  0x00 ; '.'
000000000000066f         db  0x00 ; '.'
0000000000000670         db  0x17 ; '.'
0000000000000671         db  0x01 ; '.'
0000000000000672         db  0x00 ; '.'
0000000000000673         db  0x00 ; '.'
0000000000000674         db  0x12 ; '.'
0000000000000675         db  0x00 ; '.'
0000000000000676         db  0x00 ; '.'
0000000000000677         db  0x00 ; '.'
0000000000000678         db  0x00 ; '.'
0000000000000679         db  0x00 ; '.'
000000000000067a         db  0x00 ; '.'
000000000000067b         db  0x00 ; '.'
000000000000067c         db  0x00 ; '.'
000000000000067d         db  0x00 ; '.'
000000000000067e         db  0x00 ; '.'
000000000000067f         db  0x00 ; '.'
0000000000000680         db  0x00 ; '.'
0000000000000681         db  0x00 ; '.'
0000000000000682         db  0x00 ; '.'
0000000000000683         db  0x00 ; '.'
0000000000000684         db  0x00 ; '.'
0000000000000685         db  0x00 ; '.'
0000000000000686         db  0x00 ; '.'
0000000000000687         db  0x00 ; '.'
0000000000000688         db  0xa4 ; '.'
0000000000000689         db  0x02 ; '.'
000000000000068a         db  0x00 ; '.'
000000000000068b         db  0x00 ; '.'
000000000000068c         db  0x12 ; '.'
000000000000068d         db  0x00 ; '.'
000000000000068e         db  0x00 ; '.'
000000000000068f         db  0x00 ; '.'
0000000000000690         db  0x00 ; '.'
0000000000000691         db  0x00 ; '.'
0000000000000692         db  0x00 ; '.'
0000000000000693         db  0x00 ; '.'
0000000000000694         db  0x00 ; '.'
0000000000000695         db  0x00 ; '.'
0000000000000696         db  0x00 ; '.'
0000000000000697         db  0x00 ; '.'
0000000000000698         db  0x00 ; '.'
0000000000000699         db  0x00 ; '.'
000000000000069a         db  0x00 ; '.'
000000000000069b         db  0x00 ; '.'
000000000000069c         db  0x00 ; '.'
000000000000069d         db  0x00 ; '.'
000000000000069e         db  0x00 ; '.'
000000000000069f         db  0x00 ; '.'
00000000000006a0         db  0x0e ; '.'
00000000000006a1         db  0x01 ; '.'
00000000000006a2         db  0x00 ; '.'
00000000000006a3         db  0x00 ; '.'
00000000000006a4         db  0x12 ; '.'
00000000000006a5         db  0x00 ; '.'
00000000000006a6         db  0x00 ; '.'
00000000000006a7         db  0x00 ; '.'
00000000000006a8         db  0x00 ; '.'
00000000000006a9         db  0x00 ; '.'
00000000000006aa         db  0x00 ; '.'
00000000000006ab         db  0x00 ; '.'
00000000000006ac         db  0x00 ; '.'
00000000000006ad         db  0x00 ; '.'
00000000000006ae         db  0x00 ; '.'
00000000000006af         db  0x00 ; '.'
00000000000006b0         db  0x00 ; '.'
00000000000006b1         db  0x00 ; '.'
00000000000006b2         db  0x00 ; '.'
00000000000006b3         db  0x00 ; '.'
00000000000006b4         db  0x00 ; '.'
00000000000006b5         db  0x00 ; '.'
00000000000006b6         db  0x00 ; '.'
00000000000006b7         db  0x00 ; '.'
00000000000006b8         db  0x51 ; 'Q'
00000000000006b9         db  0x03 ; '.'
00000000000006ba         db  0x00 ; '.'
00000000000006bb         db  0x00 ; '.'
00000000000006bc         db  0x20 ; ' '
00000000000006bd         db  0x00 ; '.'
00000000000006be         db  0x00 ; '.'
00000000000006bf         db  0x00 ; '.'
00000000000006c0         db  0x00 ; '.'
00000000000006c1         db  0x00 ; '.'
00000000000006c2         db  0x00 ; '.'
00000000000006c3         db  0x00 ; '.'
00000000000006c4         db  0x00 ; '.'
00000000000006c5         db  0x00 ; '.'
00000000000006c6         db  0x00 ; '.'
00000000000006c7         db  0x00 ; '.'
00000000000006c8         db  0x00 ; '.'
00000000000006c9         db  0x00 ; '.'
00000000000006ca         db  0x00 ; '.'
00000000000006cb         db  0x00 ; '.'
00000000000006cc         db  0x00 ; '.'
00000000000006cd         db  0x00 ; '.'
00000000000006ce         db  0x00 ; '.'
00000000000006cf         db  0x00 ; '.'
00000000000006d0         db  0x78 ; 'x'
00000000000006d1         db  0x01 ; '.'
00000000000006d2         db  0x00 ; '.'
00000000000006d3         db  0x00 ; '.'
00000000000006d4         db  0x12 ; '.'
00000000000006d5         db  0x00 ; '.'
00000000000006d6         db  0x00 ; '.'
00000000000006d7         db  0x00 ; '.'
00000000000006d8         db  0x00 ; '.'
00000000000006d9         db  0x00 ; '.'
00000000000006da         db  0x00 ; '.'
00000000000006db         db  0x00 ; '.'
00000000000006dc         db  0x00 ; '.'
00000000000006dd         db  0x00 ; '.'
00000000000006de         db  0x00 ; '.'
00000000000006df         db  0x00 ; '.'
00000000000006e0         db  0x00 ; '.'
00000000000006e1         db  0x00 ; '.'
00000000000006e2         db  0x00 ; '.'
00000000000006e3         db  0x00 ; '.'
00000000000006e4         db  0x00 ; '.'
00000000000006e5         db  0x00 ; '.'
00000000000006e6         db  0x00 ; '.'
00000000000006e7         db  0x00 ; '.'
00000000000006e8         db  0x5b ; '['
00000000000006e9         db  0x01 ; '.'
00000000000006ea         db  0x00 ; '.'
00000000000006eb         db  0x00 ; '.'
00000000000006ec         db  0x12 ; '.'
00000000000006ed         db  0x00 ; '.'
00000000000006ee         db  0x00 ; '.'
00000000000006ef         db  0x00 ; '.'
00000000000006f0         db  0x00 ; '.'
00000000000006f1         db  0x00 ; '.'
00000000000006f2         db  0x00 ; '.'
00000000000006f3         db  0x00 ; '.'
00000000000006f4         db  0x00 ; '.'
00000000000006f5         db  0x00 ; '.'
00000000000006f6         db  0x00 ; '.'
00000000000006f7         db  0x00 ; '.'
00000000000006f8         db  0x00 ; '.'
00000000000006f9         db  0x00 ; '.'
00000000000006fa         db  0x00 ; '.'
00000000000006fb         db  0x00 ; '.'
00000000000006fc         db  0x00 ; '.'
00000000000006fd         db  0x00 ; '.'
00000000000006fe         db  0x00 ; '.'
00000000000006ff         db  0x00 ; '.'
0000000000000700         db  0x03 ; '.'
0000000000000701         db  0x02 ; '.'
0000000000000702         db  0x00 ; '.'
0000000000000703         db  0x00 ; '.'
0000000000000704         db  0x12 ; '.'
0000000000000705         db  0x00 ; '.'
0000000000000706         db  0x00 ; '.'
0000000000000707         db  0x00 ; '.'
0000000000000708         db  0x00 ; '.'
0000000000000709         db  0x00 ; '.'
000000000000070a         db  0x00 ; '.'
000000000000070b         db  0x00 ; '.'
000000000000070c         db  0x00 ; '.'
000000000000070d         db  0x00 ; '.'
000000000000070e         db  0x00 ; '.'
000000000000070f         db  0x00 ; '.'
0000000000000710         db  0x00 ; '.'
0000000000000711         db  0x00 ; '.'
0000000000000712         db  0x00 ; '.'
0000000000000713         db  0x00 ; '.'
0000000000000714         db  0x00 ; '.'
0000000000000715         db  0x00 ; '.'
0000000000000716         db  0x00 ; '.'
0000000000000717         db  0x00 ; '.'
0000000000000718         db  0x68 ; 'h'
0000000000000719         db  0x02 ; '.'
000000000000071a         db  0x00 ; '.'
000000000000071b         db  0x00 ; '.'
000000000000071c         db  0x12 ; '.'
000000000000071d         db  0x00 ; '.'
000000000000071e         db  0x00 ; '.'
000000000000071f         db  0x00 ; '.'
0000000000000720         db  0x00 ; '.'
0000000000000721         db  0x00 ; '.'
0000000000000722         db  0x00 ; '.'
0000000000000723         db  0x00 ; '.'
0000000000000724         db  0x00 ; '.'
0000000000000725         db  0x00 ; '.'
0000000000000726         db  0x00 ; '.'
0000000000000727         db  0x00 ; '.'
0000000000000728         db  0x00 ; '.'
0000000000000729         db  0x00 ; '.'
000000000000072a         db  0x00 ; '.'
000000000000072b         db  0x00 ; '.'
000000000000072c         db  0x00 ; '.'
000000000000072d         db  0x00 ; '.'
000000000000072e         db  0x00 ; '.'
000000000000072f         db  0x00 ; '.'
0000000000000730         db  0x26 ; '&'
0000000000000731         db  0x00 ; '.'
0000000000000732         db  0x00 ; '.'
0000000000000733         db  0x00 ; '.'
0000000000000734         db  0x12 ; '.'
0000000000000735         db  0x00 ; '.'
0000000000000736         db  0x00 ; '.'
0000000000000737         db  0x00 ; '.'
0000000000000738         db  0x00 ; '.'
0000000000000739         db  0x00 ; '.'
000000000000073a         db  0x00 ; '.'
000000000000073b         db  0x00 ; '.'
000000000000073c         db  0x00 ; '.'
000000000000073d         db  0x00 ; '.'
000000000000073e         db  0x00 ; '.'
000000000000073f         db  0x00 ; '.'
0000000000000740         db  0x00 ; '.'
0000000000000741         db  0x00 ; '.'
0000000000000742         db  0x00 ; '.'
0000000000000743         db  0x00 ; '.'
0000000000000744         db  0x00 ; '.'
0000000000000745         db  0x00 ; '.'
0000000000000746         db  0x00 ; '.'
0000000000000747         db  0x00 ; '.'
0000000000000748         db  0x8e ; '.'
0000000000000749         db  0x01 ; '.'
000000000000074a         db  0x00 ; '.'
000000000000074b         db  0x00 ; '.'
000000000000074c         db  0x12 ; '.'
000000000000074d         db  0x00 ; '.'
000000000000074e         db  0x00 ; '.'
000000000000074f         db  0x00 ; '.'
0000000000000750         db  0x00 ; '.'
0000000000000751         db  0x00 ; '.'
0000000000000752         db  0x00 ; '.'
0000000000000753         db  0x00 ; '.'
0000000000000754         db  0x00 ; '.'
0000000000000755         db  0x00 ; '.'
0000000000000756         db  0x00 ; '.'
0000000000000757         db  0x00 ; '.'
0000000000000758         db  0x00 ; '.'
0000000000000759         db  0x00 ; '.'
000000000000075a         db  0x00 ; '.'
000000000000075b         db  0x00 ; '.'
000000000000075c         db  0x00 ; '.'
000000000000075d         db  0x00 ; '.'
000000000000075e         db  0x00 ; '.'
000000000000075f         db  0x00 ; '.'
0000000000000760         db  0x0b ; '.'
0000000000000761         db  0x00 ; '.'
0000000000000762         db  0x00 ; '.'
0000000000000763         db  0x00 ; '.'
0000000000000764         db  0x12 ; '.'
0000000000000765         db  0x00 ; '.'
0000000000000766         db  0x00 ; '.'
0000000000000767         db  0x00 ; '.'
0000000000000768         db  0x00 ; '.'
0000000000000769         db  0x00 ; '.'
000000000000076a         db  0x00 ; '.'
000000000000076b         db  0x00 ; '.'
000000000000076c         db  0x00 ; '.'
000000000000076d         db  0x00 ; '.'
000000000000076e         db  0x00 ; '.'
000000000000076f         db  0x00 ; '.'
0000000000000770         db  0x00 ; '.'
0000000000000771         db  0x00 ; '.'
0000000000000772         db  0x00 ; '.'
0000000000000773         db  0x00 ; '.'
0000000000000774         db  0x00 ; '.'
0000000000000775         db  0x00 ; '.'
0000000000000776         db  0x00 ; '.'
0000000000000777         db  0x00 ; '.'
0000000000000778         db  0xb2 ; '.'
0000000000000779         db  0x01 ; '.'
000000000000077a         db  0x00 ; '.'
000000000000077b         db  0x00 ; '.'
000000000000077c         db  0x12 ; '.'
000000000000077d         db  0x00 ; '.'
000000000000077e         db  0x00 ; '.'
000000000000077f         db  0x00 ; '.'
0000000000000780         db  0x00 ; '.'
0000000000000781         db  0x00 ; '.'
0000000000000782         db  0x00 ; '.'
0000000000000783         db  0x00 ; '.'
0000000000000784         db  0x00 ; '.'
0000000000000785         db  0x00 ; '.'
0000000000000786         db  0x00 ; '.'
0000000000000787         db  0x00 ; '.'
0000000000000788         db  0x00 ; '.'
0000000000000789         db  0x00 ; '.'
000000000000078a         db  0x00 ; '.'
000000000000078b         db  0x00 ; '.'
000000000000078c         db  0x00 ; '.'
000000000000078d         db  0x00 ; '.'
000000000000078e         db  0x00 ; '.'
000000000000078f         db  0x00 ; '.'
0000000000000790         db  0xfa ; '.'
0000000000000791         db  0x01 ; '.'
0000000000000792         db  0x00 ; '.'
0000000000000793         db  0x00 ; '.'
0000000000000794         db  0x12 ; '.'
0000000000000795         db  0x00 ; '.'
0000000000000796         db  0x00 ; '.'
0000000000000797         db  0x00 ; '.'
0000000000000798         db  0x00 ; '.'
0000000000000799         db  0x00 ; '.'
000000000000079a         db  0x00 ; '.'
000000000000079b         db  0x00 ; '.'
000000000000079c         db  0x00 ; '.'
000000000000079d         db  0x00 ; '.'
000000000000079e         db  0x00 ; '.'
000000000000079f         db  0x00 ; '.'
00000000000007a0         db  0x00 ; '.'
00000000000007a1         db  0x00 ; '.'
00000000000007a2         db  0x00 ; '.'
00000000000007a3         db  0x00 ; '.'
00000000000007a4         db  0x00 ; '.'
00000000000007a5         db  0x00 ; '.'
00000000000007a6         db  0x00 ; '.'
00000000000007a7         db  0x00 ; '.'
00000000000007a8         db  0x05 ; '.'
00000000000007a9         db  0x01 ; '.'
00000000000007aa         db  0x00 ; '.'
00000000000007ab         db  0x00 ; '.'
00000000000007ac         db  0x12 ; '.'
00000000000007ad         db  0x00 ; '.'
00000000000007ae         db  0x00 ; '.'
00000000000007af         db  0x00 ; '.'
00000000000007b0         db  0x00 ; '.'
00000000000007b1         db  0x00 ; '.'
00000000000007b2         db  0x00 ; '.'
00000000000007b3         db  0x00 ; '.'
00000000000007b4         db  0x00 ; '.'
00000000000007b5         db  0x00 ; '.'
00000000000007b6         db  0x00 ; '.'
00000000000007b7         db  0x00 ; '.'
00000000000007b8         db  0x00 ; '.'
00000000000007b9         db  0x00 ; '.'
00000000000007ba         db  0x00 ; '.'
00000000000007bb         db  0x00 ; '.'
00000000000007bc         db  0x00 ; '.'
00000000000007bd         db  0x00 ; '.'
00000000000007be         db  0x00 ; '.'
00000000000007bf         db  0x00 ; '.'
00000000000007c0         db  0xd3 ; '.'
00000000000007c1         db  0x01 ; '.'
00000000000007c2         db  0x00 ; '.'
00000000000007c3         db  0x00 ; '.'
00000000000007c4         db  0x12 ; '.'
00000000000007c5         db  0x00 ; '.'
00000000000007c6         db  0x00 ; '.'
00000000000007c7         db  0x00 ; '.'
00000000000007c8         db  0x00 ; '.'
00000000000007c9         db  0x00 ; '.'
00000000000007ca         db  0x00 ; '.'
00000000000007cb         db  0x00 ; '.'
00000000000007cc         db  0x00 ; '.'
00000000000007cd         db  0x00 ; '.'
00000000000007ce         db  0x00 ; '.'
00000000000007cf         db  0x00 ; '.'
00000000000007d0         db  0x00 ; '.'
00000000000007d1         db  0x00 ; '.'
00000000000007d2         db  0x00 ; '.'
00000000000007d3         db  0x00 ; '.'
00000000000007d4         db  0x00 ; '.'
00000000000007d5         db  0x00 ; '.'
00000000000007d6         db  0x00 ; '.'
00000000000007d7         db  0x00 ; '.'
00000000000007d8         db  0x73 ; 's'
00000000000007d9         db  0x00 ; '.'
00000000000007da         db  0x00 ; '.'
00000000000007db         db  0x00 ; '.'
00000000000007dc         db  0x12 ; '.'
00000000000007dd         db  0x00 ; '.'
00000000000007de         db  0x00 ; '.'
00000000000007df         db  0x00 ; '.'
00000000000007e0         db  0x00 ; '.'
00000000000007e1         db  0x00 ; '.'
00000000000007e2         db  0x00 ; '.'
00000000000007e3         db  0x00 ; '.'                                         ; DATA XREF=version_etc_arn+89
00000000000007e4         db  0x00 ; '.'
00000000000007e5         db  0x00 ; '.'
00000000000007e6         db  0x00 ; '.'
00000000000007e7         db  0x00 ; '.'
00000000000007e8         db  0x00 ; '.'
00000000000007e9         db  0x00 ; '.'
00000000000007ea         db  0x00 ; '.'
00000000000007eb         db  0x00 ; '.'
00000000000007ec         db  0x00 ; '.'
00000000000007ed         db  0x00 ; '.'
00000000000007ee         db  0x00 ; '.'
00000000000007ef         db  0x00 ; '.'
00000000000007f0         db  0xac ; '.'
00000000000007f1         db  0x00 ; '.'
00000000000007f2         db  0x00 ; '.'
00000000000007f3         db  0x00 ; '.'
00000000000007f4         db  0x12 ; '.'
00000000000007f5         db  0x00 ; '.'
00000000000007f6         db  0x00 ; '.'
00000000000007f7         db  0x00 ; '.'
00000000000007f8         db  0x00 ; '.'
00000000000007f9         db  0x00 ; '.'
00000000000007fa         db  0x00 ; '.'
00000000000007fb         db  0x00 ; '.'
00000000000007fc         db  0x00 ; '.'
00000000000007fd         db  0x00 ; '.'
00000000000007fe         db  0x00 ; '.'
00000000000007ff         db  0x00 ; '.'
0000000000000800         db  0x00 ; '.'
0000000000000801         db  0x00 ; '.'
0000000000000802         db  0x00 ; '.'
0000000000000803         db  0x00 ; '.'
0000000000000804         db  0x00 ; '.'
0000000000000805         db  0x00 ; '.'
0000000000000806         db  0x00 ; '.'
0000000000000807         db  0x00 ; '.'
0000000000000808         db  0x2e ; '.'
0000000000000809         db  0x00 ; '.'
000000000000080a         db  0x00 ; '.'
000000000000080b         db  0x00 ; '.'
000000000000080c         db  0x12 ; '.'
000000000000080d         db  0x00 ; '.'
000000000000080e         db  0x00 ; '.'
000000000000080f         db  0x00 ; '.'
0000000000000810         db  0x00 ; '.'
0000000000000811         db  0x00 ; '.'
0000000000000812         db  0x00 ; '.'
0000000000000813         db  0x00 ; '.'
0000000000000814         db  0x00 ; '.'
0000000000000815         db  0x00 ; '.'
0000000000000816         db  0x00 ; '.'
0000000000000817         db  0x00 ; '.'
0000000000000818         db  0x00 ; '.'
0000000000000819         db  0x00 ; '.'
000000000000081a         db  0x00 ; '.'
000000000000081b         db  0x00 ; '.'
000000000000081c         db  0x00 ; '.'
000000000000081d         db  0x00 ; '.'
000000000000081e         db  0x00 ; '.'
000000000000081f         db  0x00 ; '.'
0000000000000820         db  0x19 ; '.'
0000000000000821         db  0x00 ; '.'
0000000000000822         db  0x00 ; '.'
0000000000000823         db  0x00 ; '.'
0000000000000824         db  0x12 ; '.'
0000000000000825         db  0x00 ; '.'
0000000000000826         db  0x00 ; '.'
0000000000000827         db  0x00 ; '.'
0000000000000828         db  0x00 ; '.'
0000000000000829         db  0x00 ; '.'
000000000000082a         db  0x00 ; '.'
000000000000082b         db  0x00 ; '.'
000000000000082c         db  0x00 ; '.'
000000000000082d         db  0x00 ; '.'
000000000000082e         db  0x00 ; '.'
000000000000082f         db  0x00 ; '.'
0000000000000830         db  0x00 ; '.'
0000000000000831         db  0x00 ; '.'
0000000000000832         db  0x00 ; '.'
0000000000000833         db  0x00 ; '.'
0000000000000834         db  0x00 ; '.'
0000000000000835         db  0x00 ; '.'
0000000000000836         db  0x00 ; '.'
0000000000000837         db  0x00 ; '.'
0000000000000838         db  0x70 ; 'p'
0000000000000839         db  0x02 ; '.'
000000000000083a         db  0x00 ; '.'
000000000000083b         db  0x00 ; '.'
000000000000083c         db  0x12 ; '.'
000000000000083d         db  0x00 ; '.'
000000000000083e         db  0x00 ; '.'
000000000000083f         db  0x00 ; '.'
0000000000000840         db  0x00 ; '.'
0000000000000841         db  0x00 ; '.'
0000000000000842         db  0x00 ; '.'
0000000000000843         db  0x00 ; '.'
0000000000000844         db  0x00 ; '.'
0000000000000845         db  0x00 ; '.'
0000000000000846         db  0x00 ; '.'
0000000000000847         db  0x00 ; '.'
0000000000000848         db  0x00 ; '.'
0000000000000849         db  0x00 ; '.'
000000000000084a         db  0x00 ; '.'
000000000000084b         db  0x00 ; '.'
000000000000084c         db  0x00 ; '.'
000000000000084d         db  0x00 ; '.'
000000000000084e         db  0x00 ; '.'
000000000000084f         db  0x00 ; '.'
0000000000000850         db  0x83 ; '.'
0000000000000851         db  0x00 ; '.'
0000000000000852         db  0x00 ; '.'
0000000000000853         db  0x00 ; '.'
0000000000000854         db  0x12 ; '.'
0000000000000855         db  0x00 ; '.'
0000000000000856         db  0x00 ; '.'
0000000000000857         db  0x00 ; '.'
0000000000000858         db  0x00 ; '.'
0000000000000859         db  0x00 ; '.'
000000000000085a         db  0x00 ; '.'
000000000000085b         db  0x00 ; '.'
000000000000085c         db  0x00 ; '.'
000000000000085d         db  0x00 ; '.'
000000000000085e         db  0x00 ; '.'
000000000000085f         db  0x00 ; '.'
0000000000000860         db  0x00 ; '.'
0000000000000861         db  0x00 ; '.'
0000000000000862         db  0x00 ; '.'
0000000000000863         db  0x00 ; '.'
0000000000000864         db  0x00 ; '.'
0000000000000865         db  0x00 ; '.'
0000000000000866         db  0x00 ; '.'
0000000000000867         db  0x00 ; '.'
0000000000000868         db  0x1c ; '.'
0000000000000869         db  0x02 ; '.'
000000000000086a         db  0x00 ; '.'
000000000000086b         db  0x00 ; '.'
000000000000086c         db  0x12 ; '.'
000000000000086d         db  0x00 ; '.'
000000000000086e         db  0x00 ; '.'
000000000000086f         db  0x00 ; '.'
0000000000000870         db  0x00 ; '.'
0000000000000871         db  0x00 ; '.'
0000000000000872         db  0x00 ; '.'
0000000000000873         db  0x00 ; '.'
0000000000000874         db  0x00 ; '.'
0000000000000875         db  0x00 ; '.'
0000000000000876         db  0x00 ; '.'
0000000000000877         db  0x00 ; '.'
0000000000000878         db  0x00 ; '.'
0000000000000879         db  0x00 ; '.'
000000000000087a         db  0x00 ; '.'
000000000000087b         db  0x00 ; '.'
000000000000087c         db  0x00 ; '.'
000000000000087d         db  0x00 ; '.'
000000000000087e         db  0x00 ; '.'
000000000000087f         db  0x00 ; '.'
0000000000000880         db  0xb1 ; '.'
0000000000000881         db  0x02 ; '.'
0000000000000882         db  0x00 ; '.'
0000000000000883         db  0x00 ; '.'
0000000000000884         db  0x12 ; '.'
0000000000000885         db  0x00 ; '.'
0000000000000886         db  0x00 ; '.'
0000000000000887         db  0x00 ; '.'
0000000000000888         db  0x00 ; '.'
0000000000000889         db  0x00 ; '.'
000000000000088a         db  0x00 ; '.'
000000000000088b         db  0x00 ; '.'
000000000000088c         db  0x00 ; '.'
000000000000088d         db  0x00 ; '.'
000000000000088e         db  0x00 ; '.'
000000000000088f         db  0x00 ; '.'
0000000000000890         db  0x00 ; '.'
0000000000000891         db  0x00 ; '.'
0000000000000892         db  0x00 ; '.'
0000000000000893         db  0x00 ; '.'
0000000000000894         db  0x00 ; '.'
0000000000000895         db  0x00 ; '.'
0000000000000896         db  0x00 ; '.'
0000000000000897         db  0x00 ; '.'
0000000000000898         db  0x64 ; 'd'
0000000000000899         db  0x01 ; '.'
000000000000089a         db  0x00 ; '.'
000000000000089b         db  0x00 ; '.'
000000000000089c         db  0x12 ; '.'
000000000000089d         db  0x00 ; '.'
000000000000089e         db  0x00 ; '.'
000000000000089f         db  0x00 ; '.'
00000000000008a0         db  0x00 ; '.'
00000000000008a1         db  0x00 ; '.'
00000000000008a2         db  0x00 ; '.'
00000000000008a3         db  0x00 ; '.'
00000000000008a4         db  0x00 ; '.'
00000000000008a5         db  0x00 ; '.'
00000000000008a6         db  0x00 ; '.'
00000000000008a7         db  0x00 ; '.'
00000000000008a8         db  0x00 ; '.'
00000000000008a9         db  0x00 ; '.'
00000000000008aa         db  0x00 ; '.'
00000000000008ab         db  0x00 ; '.'
00000000000008ac         db  0x00 ; '.'
00000000000008ad         db  0x00 ; '.'
00000000000008ae         db  0x00 ; '.'
00000000000008af         db  0x00 ; '.'
00000000000008b0         db  0x95 ; '.'
00000000000008b1         db  0x01 ; '.'
00000000000008b2         db  0x00 ; '.'
00000000000008b3         db  0x00 ; '.'
00000000000008b4         db  0x12 ; '.'
00000000000008b5         db  0x00 ; '.'
00000000000008b6         db  0x00 ; '.'
00000000000008b7         db  0x00 ; '.'
00000000000008b8         db  0x00 ; '.'
00000000000008b9         db  0x00 ; '.'
00000000000008ba         db  0x00 ; '.'
00000000000008bb         db  0x00 ; '.'
00000000000008bc         db  0x00 ; '.'
00000000000008bd         db  0x00 ; '.'
00000000000008be         db  0x00 ; '.'
00000000000008bf         db  0x00 ; '.'
00000000000008c0         db  0x00 ; '.'
00000000000008c1         db  0x00 ; '.'
00000000000008c2         db  0x00 ; '.'
00000000000008c3         db  0x00 ; '.'
00000000000008c4         db  0x00 ; '.'
00000000000008c5         db  0x00 ; '.'
00000000000008c6         db  0x00 ; '.'
00000000000008c7         db  0x00 ; '.'
00000000000008c8         db  0x86 ; '.'
00000000000008c9         db  0x01 ; '.'
00000000000008ca         db  0x00 ; '.'
00000000000008cb         db  0x00 ; '.'
00000000000008cc         db  0x12 ; '.'
00000000000008cd         db  0x00 ; '.'
00000000000008ce         db  0x00 ; '.'
00000000000008cf         db  0x00 ; '.'
00000000000008d0         db  0x00 ; '.'
00000000000008d1         db  0x00 ; '.'
00000000000008d2         db  0x00 ; '.'
00000000000008d3         db  0x00 ; '.'
00000000000008d4         db  0x00 ; '.'
00000000000008d5         db  0x00 ; '.'
00000000000008d6         db  0x00 ; '.'
00000000000008d7         db  0x00 ; '.'
00000000000008d8         db  0x00 ; '.'
00000000000008d9         db  0x00 ; '.'
00000000000008da         db  0x00 ; '.'
00000000000008db         db  0x00 ; '.'
00000000000008dc         db  0x00 ; '.'
00000000000008dd         db  0x00 ; '.'
00000000000008de         db  0x00 ; '.'
00000000000008df         db  0x00 ; '.'
00000000000008e0         db  0xb4 ; '.'
00000000000008e1         db  0x00 ; '.'
00000000000008e2         db  0x00 ; '.'
00000000000008e3         db  0x00 ; '.'
00000000000008e4         db  0x12 ; '.'
00000000000008e5         db  0x00 ; '.'
00000000000008e6         db  0x00 ; '.'
00000000000008e7         db  0x00 ; '.'
00000000000008e8         db  0x00 ; '.'
00000000000008e9         db  0x00 ; '.'
00000000000008ea         db  0x00 ; '.'
00000000000008eb         db  0x00 ; '.'
00000000000008ec         db  0x00 ; '.'
00000000000008ed         db  0x00 ; '.'
00000000000008ee         db  0x00 ; '.'
00000000000008ef         db  0x00 ; '.'
00000000000008f0         db  0x00 ; '.'
00000000000008f1         db  0x00 ; '.'
00000000000008f2         db  0x00 ; '.'
00000000000008f3         db  0x00 ; '.'
00000000000008f4         db  0x00 ; '.'
00000000000008f5         db  0x00 ; '.'
00000000000008f6         db  0x00 ; '.'
00000000000008f7         db  0x00 ; '.'
00000000000008f8         db  0xe7 ; '.'
00000000000008f9         db  0x02 ; '.'
00000000000008fa         db  0x00 ; '.'
00000000000008fb         db  0x00 ; '.'
00000000000008fc         db  0x12 ; '.'
00000000000008fd         db  0x00 ; '.'
00000000000008fe         db  0x00 ; '.'
00000000000008ff         db  0x00 ; '.'
0000000000000900         db  0x00 ; '.'                                         ; DATA XREF=sub_3470+40
0000000000000901         db  0x00 ; '.'
0000000000000902         db  0x00 ; '.'
0000000000000903         db  0x00 ; '.'
0000000000000904         db  0x00 ; '.'
0000000000000905         db  0x00 ; '.'
0000000000000906         db  0x00 ; '.'
0000000000000907         db  0x00 ; '.'
0000000000000908         db  0x00 ; '.'
0000000000000909         db  0x00 ; '.'
000000000000090a         db  0x00 ; '.'
000000000000090b         db  0x00 ; '.'
000000000000090c         db  0x00 ; '.'
000000000000090d         db  0x00 ; '.'
000000000000090e         db  0x00 ; '.'
000000000000090f         db  0x00 ; '.'
0000000000000910         db  0xe5 ; '.'
0000000000000911         db  0x01 ; '.'
0000000000000912         db  0x00 ; '.'
0000000000000913         db  0x00 ; '.'
0000000000000914         db  0x12 ; '.'
0000000000000915         db  0x00 ; '.'
0000000000000916         db  0x00 ; '.'
0000000000000917         db  0x00 ; '.'
0000000000000918         db  0x00 ; '.'
0000000000000919         db  0x00 ; '.'
000000000000091a         db  0x00 ; '.'
000000000000091b         db  0x00 ; '.'
000000000000091c         db  0x00 ; '.'
000000000000091d         db  0x00 ; '.'
000000000000091e         db  0x00 ; '.'
000000000000091f         db  0x00 ; '.'
0000000000000920         db  0x00 ; '.'
0000000000000921         db  0x00 ; '.'
0000000000000922         db  0x00 ; '.'
0000000000000923         db  0x00 ; '.'
0000000000000924         db  0x00 ; '.'
0000000000000925         db  0x00 ; '.'
0000000000000926         db  0x00 ; '.'
0000000000000927         db  0x00 ; '.'
0000000000000928         db  0xc3 ; '.'
0000000000000929         db  0x00 ; '.'
000000000000092a         db  0x00 ; '.'
000000000000092b         db  0x00 ; '.'
000000000000092c         db  0x12 ; '.'
000000000000092d         db  0x00 ; '.'
000000000000092e         db  0x00 ; '.'
000000000000092f         db  0x00 ; '.'
0000000000000930         db  0x00 ; '.'
0000000000000931         db  0x00 ; '.'
0000000000000932         db  0x00 ; '.'
0000000000000933         db  0x00 ; '.'
0000000000000934         db  0x00 ; '.'
0000000000000935         db  0x00 ; '.'
0000000000000936         db  0x00 ; '.'
0000000000000937         db  0x00 ; '.'
0000000000000938         db  0x00 ; '.'
0000000000000939         db  0x00 ; '.'
000000000000093a         db  0x00 ; '.'
000000000000093b         db  0x00 ; '.'
000000000000093c         db  0x00 ; '.'
000000000000093d         db  0x00 ; '.'
000000000000093e         db  0x00 ; '.'
000000000000093f         db  0x00 ; '.'
0000000000000940         db  0x0a ; '.'
0000000000000941         db  0x02 ; '.'
0000000000000942         db  0x00 ; '.'
0000000000000943         db  0x00 ; '.'
0000000000000944         db  0x12 ; '.'
0000000000000945         db  0x00 ; '.'
0000000000000946         db  0x00 ; '.'
0000000000000947         db  0x00 ; '.'
0000000000000948         db  0x00 ; '.'
0000000000000949         db  0x00 ; '.'
000000000000094a         db  0x00 ; '.'
000000000000094b         db  0x00 ; '.'
000000000000094c         db  0x00 ; '.'
000000000000094d         db  0x00 ; '.'
000000000000094e         db  0x00 ; '.'
000000000000094f         db  0x00 ; '.'
0000000000000950         db  0x00 ; '.'
0000000000000951         db  0x00 ; '.'
0000000000000952         db  0x00 ; '.'
0000000000000953         db  0x00 ; '.'
0000000000000954         db  0x00 ; '.'
0000000000000955         db  0x00 ; '.'
0000000000000956         db  0x00 ; '.'
0000000000000957         db  0x00 ; '.'
0000000000000958         db  0x4d ; 'M'
0000000000000959         db  0x01 ; '.'
000000000000095a         db  0x00 ; '.'
000000000000095b         db  0x00 ; '.'
000000000000095c         db  0x12 ; '.'
000000000000095d         db  0x00 ; '.'
000000000000095e         db  0x00 ; '.'
000000000000095f         db  0x00 ; '.'
0000000000000960         db  0x00 ; '.'
0000000000000961         db  0x00 ; '.'
0000000000000962         db  0x00 ; '.'
0000000000000963         db  0x00 ; '.'
0000000000000964         db  0x00 ; '.'
0000000000000965         db  0x00 ; '.'
0000000000000966         db  0x00 ; '.'
0000000000000967         db  0x00 ; '.'
0000000000000968         db  0x00 ; '.'
0000000000000969         db  0x00 ; '.'
000000000000096a         db  0x00 ; '.'
000000000000096b         db  0x00 ; '.'
000000000000096c         db  0x00 ; '.'
000000000000096d         db  0x00 ; '.'
000000000000096e         db  0x00 ; '.'
000000000000096f         db  0x00 ; '.'
0000000000000970         db  0x60 ; '`'
0000000000000971         db  0x03 ; '.'
0000000000000972         db  0x00 ; '.'
0000000000000973         db  0x00 ; '.'
0000000000000974         db  0x20 ; ' '
0000000000000975         db  0x00 ; '.'
0000000000000976         db  0x00 ; '.'
0000000000000977         db  0x00 ; '.'
0000000000000978         db  0x00 ; '.'
0000000000000979         db  0x00 ; '.'
000000000000097a         db  0x00 ; '.'
000000000000097b         db  0x00 ; '.'
000000000000097c         db  0x00 ; '.'
000000000000097d         db  0x00 ; '.'
000000000000097e         db  0x00 ; '.'
000000000000097f         db  0x00 ; '.'
0000000000000980         db  0x00 ; '.'
0000000000000981         db  0x00 ; '.'
0000000000000982         db  0x00 ; '.'
0000000000000983         db  0x00 ; '.'
0000000000000984         db  0x00 ; '.'
0000000000000985         db  0x00 ; '.'
0000000000000986         db  0x00 ; '.'
0000000000000987         db  0x00 ; '.'
0000000000000988         db  0xaa ; '.'
0000000000000989         db  0x01 ; '.'
000000000000098a         db  0x00 ; '.'
000000000000098b         db  0x00 ; '.'
000000000000098c         db  0x12 ; '.'
000000000000098d         db  0x00 ; '.'
000000000000098e         db  0x00 ; '.'
000000000000098f         db  0x00 ; '.'
0000000000000990         db  0x00 ; '.'
0000000000000991         db  0x00 ; '.'
0000000000000992         db  0x00 ; '.'
0000000000000993         db  0x00 ; '.'
0000000000000994         db  0x00 ; '.'
0000000000000995         db  0x00 ; '.'
0000000000000996         db  0x00 ; '.'
0000000000000997         db  0x00 ; '.'
0000000000000998         db  0x00 ; '.'
0000000000000999         db  0x00 ; '.'
000000000000099a         db  0x00 ; '.'
000000000000099b         db  0x00 ; '.'
000000000000099c         db  0x00 ; '.'
000000000000099d         db  0x00 ; '.'
000000000000099e         db  0x00 ; '.'
000000000000099f         db  0x00 ; '.'
00000000000009a0         db  0xa3 ; '.'
00000000000009a1         db  0x00 ; '.'
00000000000009a2         db  0x00 ; '.'
00000000000009a3         db  0x00 ; '.'
00000000000009a4         db  0x12 ; '.'
00000000000009a5         db  0x00 ; '.'
00000000000009a6         db  0x00 ; '.'
00000000000009a7         db  0x00 ; '.'
00000000000009a8         db  0x00 ; '.'
00000000000009a9         db  0x00 ; '.'
00000000000009aa         db  0x00 ; '.'
00000000000009ab         db  0x00 ; '.'
00000000000009ac         db  0x00 ; '.'
00000000000009ad         db  0x00 ; '.'
00000000000009ae         db  0x00 ; '.'
00000000000009af         db  0x00 ; '.'
00000000000009b0         db  0x00 ; '.'
00000000000009b1         db  0x00 ; '.'
00000000000009b2         db  0x00 ; '.'
00000000000009b3         db  0x00 ; '.'
00000000000009b4         db  0x00 ; '.'
00000000000009b5         db  0x00 ; '.'
00000000000009b6         db  0x00 ; '.'
00000000000009b7         db  0x00 ; '.'
00000000000009b8         db  0x4c ; 'L'
00000000000009b9         db  0x02 ; '.'
00000000000009ba         db  0x00 ; '.'
00000000000009bb         db  0x00 ; '.'
00000000000009bc         db  0x22 ; '"'
00000000000009bd         db  0x00 ; '.'
00000000000009be         db  0x00 ; '.'
00000000000009bf         db  0x00 ; '.'
00000000000009c0         db  0x00 ; '.'
00000000000009c1         db  0x00 ; '.'
00000000000009c2         db  0x00 ; '.'
00000000000009c3         db  0x00 ; '.'
00000000000009c4         db  0x00 ; '.'
00000000000009c5         db  0x00 ; '.'
00000000000009c6         db  0x00 ; '.'
00000000000009c7         db  0x00 ; '.'
00000000000009c8         db  0x00 ; '.'
00000000000009c9         db  0x00 ; '.'
00000000000009ca         db  0x00 ; '.'
00000000000009cb         db  0x00 ; '.'
00000000000009cc         db  0x00 ; '.'
00000000000009cd         db  0x00 ; '.'
00000000000009ce         db  0x00 ; '.'
00000000000009cf         db  0x00 ; '.'
00000000000009d0         db  0xbe ; '.'
00000000000009d1         db  0x01 ; '.'
00000000000009d2         db  0x00 ; '.'
00000000000009d3         db  0x00 ; '.'
00000000000009d4         db  0x12 ; '.'
00000000000009d5         db  0x00 ; '.'
00000000000009d6         db  0x00 ; '.'
00000000000009d7         db  0x00 ; '.'
00000000000009d8         db  0x00 ; '.'
00000000000009d9         db  0x00 ; '.'
00000000000009da         db  0x00 ; '.'
00000000000009db         db  0x00 ; '.'
00000000000009dc         db  0x00 ; '.'
00000000000009dd         db  0x00 ; '.'
00000000000009de         db  0x00 ; '.'
00000000000009df         db  0x00 ; '.'
00000000000009e0         db  0x00 ; '.'
00000000000009e1         db  0x00 ; '.'
00000000000009e2         db  0x00 ; '.'
00000000000009e3         db  0x00 ; '.'
00000000000009e4         db  0x00 ; '.'
00000000000009e5         db  0x00 ; '.'
00000000000009e6         db  0x00 ; '.'
00000000000009e7         db  0x00 ; '.'
00000000000009e8         db  0x6b ; 'k'
00000000000009e9         db  0x01 ; '.'
00000000000009ea         db  0x00 ; '.'
00000000000009eb         db  0x00 ; '.'
00000000000009ec         db  0x11 ; '.'
00000000000009ed         db  0x00 ; '.'
00000000000009ee         db  0x19 ; '.'
00000000000009ef         db  0x00 ; '.'
00000000000009f0         db  0x88 ; '.'
00000000000009f1         db  0xf0 ; '.'
00000000000009f2         db  0x20 ; ' '
00000000000009f3         db  0x00 ; '.'
00000000000009f4         db  0x00 ; '.'
00000000000009f5         db  0x00 ; '.'
00000000000009f6         db  0x00 ; '.'
00000000000009f7         db  0x00 ; '.'
00000000000009f8         db  0x08 ; '.'
00000000000009f9         db  0x00 ; '.'
00000000000009fa         db  0x00 ; '.'
00000000000009fb         db  0x00 ; '.'
00000000000009fc         db  0x00 ; '.'
00000000000009fd         db  0x00 ; '.'
00000000000009fe         db  0x00 ; '.'
00000000000009ff         db  0x00 ; '.'
0000000000000a00         db  0xcc ; '.'
0000000000000a01         db  0x02 ; '.'
0000000000000a02         db  0x00 ; '.'
0000000000000a03         db  0x00 ; '.'
0000000000000a04         db  0x11 ; '.'
0000000000000a05         db  0x00 ; '.'
0000000000000a06         db  0x19 ; '.'
0000000000000a07         db  0x00 ; '.'
0000000000000a08         db  0x80 ; '.'
0000000000000a09         db  0xf0 ; '.'
0000000000000a0a         db  0x20 ; ' '
0000000000000a0b         db  0x00 ; '.'
0000000000000a0c         db  0x00 ; '.'
0000000000000a0d         db  0x00 ; '.'
0000000000000a0e         db  0x00 ; '.'
0000000000000a0f         db  0x00 ; '.'
0000000000000a10         db  0x08 ; '.'
0000000000000a11         db  0x00 ; '.'
0000000000000a12         db  0x00 ; '.'
0000000000000a13         db  0x00 ; '.'
0000000000000a14         db  0x00 ; '.'
0000000000000a15         db  0x00 ; '.'
0000000000000a16         db  0x00 ; '.'
0000000000000a17         db  0x00 ; '.'
0000000000000a18         db  0xc8 ; '.'
0000000000000a19         db  0x00 ; '.'
0000000000000a1a         db  0x00 ; '.'
0000000000000a1b         db  0x00 ; '.'
0000000000000a1c         db  0x21 ; '!'
0000000000000a1d         db  0x00 ; '.'
0000000000000a1e         db  0x19 ; '.'
0000000000000a1f         db  0x00 ; '.'
0000000000000a20         db  0xa0 ; '.'
0000000000000a21         db  0xf0 ; '.'
0000000000000a22         db  0x20 ; ' '
0000000000000a23         db  0x00 ; '.'
0000000000000a24         db  0x00 ; '.'
0000000000000a25         db  0x00 ; '.'
0000000000000a26         db  0x00 ; '.'
0000000000000a27         db  0x00 ; '.'
0000000000000a28         db  0x08 ; '.'
0000000000000a29         db  0x00 ; '.'
0000000000000a2a         db  0x00 ; '.'
0000000000000a2b         db  0x00 ; '.'
0000000000000a2c         db  0x00 ; '.'
0000000000000a2d         db  0x00 ; '.'
0000000000000a2e         db  0x00 ; '.'
0000000000000a2f         db  0x00 ; '.'
0000000000000a30         db  0xd7 ; '.'
0000000000000a31         db  0x02 ; '.'
0000000000000a32         db  0x00 ; '.'
0000000000000a33         db  0x00 ; '.'
0000000000000a34         db  0x11 ; '.'
0000000000000a35         db  0x00 ; '.'
0000000000000a36         db  0x19 ; '.'
0000000000000a37         db  0x00 ; '.'
0000000000000a38         db  0xa0 ; '.'
0000000000000a39         db  0xf0 ; '.'
0000000000000a3a         db  0x20 ; ' '
0000000000000a3b         db  0x00 ; '.'
0000000000000a3c         db  0x00 ; '.'
0000000000000a3d         db  0x00 ; '.'
0000000000000a3e         db  0x00 ; '.'
0000000000000a3f         db  0x00 ; '.'
0000000000000a40         db  0x08 ; '.'
0000000000000a41         db  0x00 ; '.'
0000000000000a42         db  0x00 ; '.'
0000000000000a43         db  0x00 ; '.'
0000000000000a44         db  0x00 ; '.'
0000000000000a45         db  0x00 ; '.'
0000000000000a46         db  0x00 ; '.'
0000000000000a47         db  0x00 ; '.'
0000000000000a48         db  0x28 ; '('
0000000000000a49         db  0x02 ; '.'
0000000000000a4a         db  0x00 ; '.'
0000000000000a4b         db  0x00 ; '.'
0000000000000a4c         db  0x21 ; '!'
0000000000000a4d         db  0x00 ; '.'
0000000000000a4e         db  0x19 ; '.'
0000000000000a4f         db  0x00 ; '.'
0000000000000a50         db  0x80 ; '.'
0000000000000a51         db  0xf0 ; '.'
0000000000000a52         db  0x20 ; ' '
0000000000000a53         db  0x00 ; '.'
0000000000000a54         db  0x00 ; '.'
0000000000000a55         db  0x00 ; '.'
0000000000000a56         db  0x00 ; '.'
0000000000000a57         db  0x00 ; '.'
0000000000000a58         db  0x08 ; '.'
0000000000000a59         db  0x00 ; '.'
0000000000000a5a         db  0x00 ; '.'
0000000000000a5b         db  0x00 ; '.'
0000000000000a5c         db  0x00 ; '.'
0000000000000a5d         db  0x00 ; '.'
0000000000000a5e         db  0x00 ; '.'
0000000000000a5f         db  0x00 ; '.'
0000000000000a60         db  0xde ; '.'
0000000000000a61         db  0x01 ; '.'
0000000000000a62         db  0x00 ; '.'
0000000000000a63         db  0x00 ; '.'
0000000000000a64         db  0x11 ; '.'
0000000000000a65         db  0x00 ; '.'
0000000000000a66         db  0x19 ; '.'
0000000000000a67         db  0x00 ; '.'
0000000000000a68         db  0xc0 ; '.'
0000000000000a69         db  0xf0 ; '.'
0000000000000a6a         db  0x20 ; ' '
0000000000000a6b         db  0x00 ; '.'
0000000000000a6c         db  0x00 ; '.'
0000000000000a6d         db  0x00 ; '.'
0000000000000a6e         db  0x00 ; '.'
0000000000000a6f         db  0x00 ; '.'
0000000000000a70         db  0x08 ; '.'
0000000000000a71         db  0x00 ; '.'
0000000000000a72         db  0x00 ; '.'
0000000000000a73         db  0x00 ; '.'
0000000000000a74         db  0x00 ; '.'
0000000000000a75         db  0x00 ; '.'
0000000000000a76         db  0x00 ; '.'
0000000000000a77         db  0x00 ; '.'
0000000000000a78         db  0x48 ; 'H'
0000000000000a79         db  0x00 ; '.'
0000000000000a7a         db  0x00 ; '.'
0000000000000a7b         db  0x00 ; '.'
0000000000000a7c         db  0x11 ; '.'
0000000000000a7d         db  0x00 ; '.'
0000000000000a7e         db  0x19 ; '.'
0000000000000a7f         db  0x00 ; '.'
0000000000000a80         db  0x90 ; '.'
0000000000000a81         db  0xf0 ; '.'
0000000000000a82         db  0x20 ; ' '
0000000000000a83         db  0x00 ; '.'
0000000000000a84         db  0x00 ; '.'
0000000000000a85         db  0x00 ; '.'
0000000000000a86         db  0x00 ; '.'
0000000000000a87         db  0x00 ; '.'
0000000000000a88         db  0x04 ; '.'
0000000000000a89         db  0x00 ; '.'
0000000000000a8a         db  0x00 ; '.'
0000000000000a8b         db  0x00 ; '.'
0000000000000a8c         db  0x00 ; '.'
0000000000000a8d         db  0x00 ; '.'
0000000000000a8e         db  0x00 ; '.'
0000000000000a8f         db  0x00 ; '.'
0000000000000a90         db  0xcc ; '.'
0000000000000a91         db  0x01 ; '.'
0000000000000a92         db  0x00 ; '.'
0000000000000a93         db  0x00 ; '.'
0000000000000a94         db  0x11 ; '.'
0000000000000a95         db  0x00 ; '.'
0000000000000a96         db  0x19 ; '.'
0000000000000a97         db  0x00 ; '.'
0000000000000a98         db  0x98 ; '.'
0000000000000a99         db  0xf0 ; '.'
0000000000000a9a         db  0x20 ; ' '
0000000000000a9b         db  0x00 ; '.'
0000000000000a9c         db  0x00 ; '.'
0000000000000a9d         db  0x00 ; '.'
0000000000000a9e         db  0x00 ; '.'
0000000000000a9f         db  0x00 ; '.'
0000000000000aa0         db  0x08 ; '.'
0000000000000aa1         db  0x00 ; '.'
0000000000000aa2         db  0x00 ; '.'
0000000000000aa3         db  0x00 ; '.'
0000000000000aa4         db  0x00 ; '.'
0000000000000aa5         db  0x00 ; '.'
0000000000000aa6         db  0x00 ; '.'
0000000000000aa7         db  0x00 ; '.'


        ; Section .dynstr
        ; Range: [0xaa8; 0xe22[ (890 bytes)
        ; File offset : [2728; 3618[ (890 bytes)
        ; Flags: 0x2
        ;   SHT_STRTAB
        ;   SHF_ALLOC

0000000000000aa8         db  0x00 ; '.'
0000000000000aa9         db  0x6c ; 'l'
0000000000000aaa         db  0x69 ; 'i'
0000000000000aab         db  0x62 ; 'b'
0000000000000aac         db  0x63 ; 'c'
0000000000000aad         db  0x2e ; '.'
0000000000000aae         db  0x73 ; 's'
0000000000000aaf         db  0x6f ; 'o'
0000000000000ab0         db  0x2e ; '.'
0000000000000ab1         db  0x36 ; '6'
0000000000000ab2         db  0x00 ; '.'
0000000000000ab3         db  0x66 ; 'f'
0000000000000ab4         db  0x66 ; 'f'
0000000000000ab5         db  0x6c ; 'l'
0000000000000ab6         db  0x75 ; 'u'
0000000000000ab7         db  0x73 ; 's'
0000000000000ab8         db  0x68 ; 'h'
0000000000000ab9         db  0x00 ; '.'
0000000000000aba         db  0x73 ; 's'
0000000000000abb         db  0x74 ; 't'
0000000000000abc         db  0x72 ; 'r'
0000000000000abd         db  0x63 ; 'c'
0000000000000abe         db  0x70 ; 'p'
0000000000000abf         db  0x79 ; 'y'
0000000000000ac0         db  0x00 ; '.'
0000000000000ac1         db  0x5f ; '_'
0000000000000ac2         db  0x5f ; '_'
0000000000000ac3         db  0x70 ; 'p'
0000000000000ac4         db  0x72 ; 'r'
0000000000000ac5         db  0x69 ; 'i'
0000000000000ac6         db  0x6e ; 'n'
0000000000000ac7         db  0x74 ; 't'
0000000000000ac8         db  0x66 ; 'f'
0000000000000ac9         db  0x5f ; '_'
0000000000000aca         db  0x63 ; 'c'
0000000000000acb         db  0x68 ; 'h'
0000000000000acc         db  0x6b ; 'k'
0000000000000acd         db  0x00 ; '.'
0000000000000ace         db  0x72 ; 'r'
0000000000000acf         db  0x65 ; 'e'
0000000000000ad0         db  0x61 ; 'a'
0000000000000ad1         db  0x64 ; 'd'
0000000000000ad2         db  0x64 ; 'd'
0000000000000ad3         db  0x69 ; 'i'
0000000000000ad4         db  0x72 ; 'r'
0000000000000ad5         db  0x00 ; '.'
0000000000000ad6         db  0x73 ; 's'
0000000000000ad7         db  0x65 ; 'e'
0000000000000ad8         db  0x74 ; 't'
0000000000000ad9         db  0x6c ; 'l'
0000000000000ada         db  0x6f ; 'o'
0000000000000adb         db  0x63 ; 'c'
0000000000000adc         db  0x61 ; 'a'
0000000000000add         db  0x6c ; 'l'
0000000000000ade         db  0x65 ; 'e'
0000000000000adf         db  0x00 ; '.'
0000000000000ae0         db  0x6d ; 'm'
0000000000000ae1         db  0x62 ; 'b'
0000000000000ae2         db  0x72 ; 'r'
0000000000000ae3         db  0x74 ; 't'
0000000000000ae4         db  0x6f ; 'o'
0000000000000ae5         db  0x77 ; 'w'
0000000000000ae6         db  0x63 ; 'c'
0000000000000ae7         db  0x00 ; '.'
0000000000000ae8         db  0x73 ; 's'
0000000000000ae9         db  0x74 ; 't'
0000000000000aea         db  0x72 ; 'r'
0000000000000aeb         db  0x6e ; 'n'
0000000000000aec         db  0x63 ; 'c'
0000000000000aed         db  0x6d ; 'm'
0000000000000aee         db  0x70 ; 'p'
0000000000000aef         db  0x00 ; '.'
0000000000000af0         db  0x6f ; 'o'
0000000000000af1         db  0x70 ; 'p'
0000000000000af2         db  0x74 ; 't'
0000000000000af3         db  0x69 ; 'i'
0000000000000af4         db  0x6e ; 'n'
0000000000000af5         db  0x64 ; 'd'
0000000000000af6         db  0x00 ; '.'
0000000000000af7         db  0x73 ; 's'
0000000000000af8         db  0x74 ; 't'
0000000000000af9         db  0x72 ; 'r'
0000000000000afa         db  0x72 ; 'r'
0000000000000afb         db  0x63 ; 'c'
0000000000000afc         db  0x68 ; 'h'
0000000000000afd         db  0x72 ; 'r'
0000000000000afe         db  0x00 ; '.'
0000000000000aff         db  0x64 ; 'd'
                     aCgettext:
0000000000000b00         db         "cgettext", 0
0000000000000b09         db  0x67 ; 'g'
0000000000000b0a         db  0x65 ; 'e'
0000000000000b0b         db  0x74 ; 't'
0000000000000b0c         db  0x70 ; 'p'
0000000000000b0d         db  0x77 ; 'w'
0000000000000b0e         db  0x75 ; 'u'
0000000000000b0f         db  0x69 ; 'i'
0000000000000b10         db  0x64 ; 'd'
0000000000000b11         db  0x00 ; '.'
0000000000000b12         db  0x63 ; 'c'
0000000000000b13         db  0x6c ; 'l'
0000000000000b14         db  0x6f ; 'o'
0000000000000b15         db  0x73 ; 's'
0000000000000b16         db  0x65 ; 'e'
0000000000000b17         db  0x64 ; 'd'
0000000000000b18         db  0x69 ; 'i'
0000000000000b19         db  0x72 ; 'r'
0000000000000b1a         db  0x00 ; '.'
0000000000000b1b         db  0x66 ; 'f'
0000000000000b1c         db  0x63 ; 'c'
0000000000000b1d         db  0x68 ; 'h'
0000000000000b1e         db  0x64 ; 'd'
0000000000000b1f         db  0x69 ; 'i'
0000000000000b20         db  0x72 ; 'r'
0000000000000b21         db  0x00 ; '.'
0000000000000b22         db  0x67 ; 'g'
0000000000000b23         db  0x65 ; 'e'
0000000000000b24         db  0x74 ; 't'
0000000000000b25         db  0x67 ; 'g'
0000000000000b26         db  0x72 ; 'r'
0000000000000b27         db  0x67 ; 'g'
0000000000000b28         db  0x69 ; 'i'
0000000000000b29         db  0x64 ; 'd'
0000000000000b2a         db  0x00 ; '.'
0000000000000b2b         db  0x65 ; 'e'
0000000000000b2c         db  0x72 ; 'r'
0000000000000b2d         db  0x72 ; 'r'
0000000000000b2e         db  0x6f ; 'o'
0000000000000b2f         db  0x72 ; 'r'
0000000000000b30         db  0x00 ; '.'
0000000000000b31         db  0x5f ; '_'
0000000000000b32         db  0x5f ; '_'
0000000000000b33         db  0x73 ; 's'
0000000000000b34         db  0x74 ; 't'
0000000000000b35         db  0x61 ; 'a'
0000000000000b36         db  0x63 ; 'c'
0000000000000b37         db  0x6b ; 'k'
0000000000000b38         db  0x5f ; '_'
0000000000000b39         db  0x63 ; 'c'
0000000000000b3a         db  0x68 ; 'h'
0000000000000b3b         db  0x6b ; 'k'
0000000000000b3c         db  0x5f ; '_'
0000000000000b3d         db  0x66 ; 'f'
0000000000000b3e         db  0x61 ; 'a'
0000000000000b3f         db  0x69 ; 'i'
0000000000000b40         db  0x6c ; 'l'
0000000000000b41         db  0x00 ; '.'
0000000000000b42         db  0x5f ; '_'
0000000000000b43         db  0x5f ; '_'
0000000000000b44         db  0x6c ; 'l'
0000000000000b45         db  0x78 ; 'x'
                     aStat:
0000000000000b46         db         "stat", 0
0000000000000b4b         db  0x69 ; 'i'
0000000000000b4c         db  0x73 ; 's'
0000000000000b4d         db  0x77 ; 'w'
0000000000000b4e         db  0x70 ; 'p'
0000000000000b4f         db  0x72 ; 'r'
0000000000000b50         db  0x69 ; 'i'
0000000000000b51         db  0x6e ; 'n'
0000000000000b52         db  0x74 ; 't'
0000000000000b53         db  0x00 ; '.'
0000000000000b54         db  0x72 ; 'r'
0000000000000b55         db  0x65 ; 'e'
0000000000000b56         db  0x61 ; 'a'
0000000000000b57         db  0x6c ; 'l'
0000000000000b58         db  0x6c ; 'l'
0000000000000b59         db  0x6f ; 'o'
0000000000000b5a         db  0x63 ; 'c'
0000000000000b5b         db  0x00 ; '.'
0000000000000b5c         db  0x66 ; 'f'
0000000000000b5d         db  0x73 ; 's'
0000000000000b5e         db  0x74 ; 't'
0000000000000b5f         db  0x61 ; 'a'
0000000000000b60         db  0x74 ; 't'
0000000000000b61         db  0x66 ; 'f'
0000000000000b62         db  0x73 ; 's'
0000000000000b63         db  0x00 ; '.'
0000000000000b64         db  0x61 ; 'a'
0000000000000b65         db  0x62 ; 'b'
0000000000000b66         db  0x6f ; 'o'
0000000000000b67         db  0x72 ; 'r'
0000000000000b68         db  0x74 ; 't'
0000000000000b69         db  0x00 ; '.'
0000000000000b6a         db  0x5f ; '_'
0000000000000b6b         db  0x65 ; 'e'
0000000000000b6c         db  0x78 ; 'x'
0000000000000b6d         db  0x69 ; 'i'
0000000000000b6e         db  0x74 ; 't'
0000000000000b6f         db  0x00 ; '.'
0000000000000b70         db  0x70 ; 'p'
0000000000000b71         db  0x72 ; 'r'
0000000000000b72         db  0x6f ; 'o'
0000000000000b73         db  0x67 ; 'g'
0000000000000b74         db  0x72 ; 'r'
0000000000000b75         db  0x61 ; 'a'
0000000000000b76         db  0x6d ; 'm'
0000000000000b77         db  0x5f ; '_'
0000000000000b78         db  0x69 ; 'i'
0000000000000b79         db  0x6e ; 'n'
0000000000000b7a         db  0x76 ; 'v'
0000000000000b7b         db  0x6f ; 'o'
0000000000000b7c         db  0x63 ; 'c'
0000000000000b7d         db  0x61 ; 'a'
0000000000000b7e         db  0x74 ; 't'
0000000000000b7f         db  0x69 ; 'i'
0000000000000b80         db  0x6f ; 'o'
0000000000000b81         db  0x6e ; 'n'
0000000000000b82         db  0x5f ; '_'
0000000000000b83         db  0x6e ; 'n'
0000000000000b84         db  0x61 ; 'a'
0000000000000b85         db  0x6d ; 'm'
0000000000000b86         db  0x65 ; 'e'
0000000000000b87         db  0x00 ; '.'
0000000000000b88         db  0x5f ; '_'
0000000000000b89         db  0x5f ; '_'
0000000000000b8a         db  0x61 ; 'a'
0000000000000b8b         db  0x73 ; 's'
0000000000000b8c         db  0x73 ; 's'
0000000000000b8d         db  0x65 ; 'e'
0000000000000b8e         db  0x72 ; 'r'
0000000000000b8f         db  0x74 ; 't'
0000000000000b90         db  0x5f ; '_'
0000000000000b91         db  0x66 ; 'f'
0000000000000b92         db  0x61 ; 'a'
0000000000000b93         db  0x69 ; 'i'
0000000000000b94         db  0x6c ; 'l'
0000000000000b95         db  0x00 ; '.'
0000000000000b96         db  0x5f ; '_'
0000000000000b97         db  0x5f ; '_'
0000000000000b98         db  0x63 ; 'c'
0000000000000b99         db  0x74 ; 't'
0000000000000b9a         db  0x79 ; 'y'
0000000000000b9b         db  0x70 ; 'p'
0000000000000b9c         db  0x65 ; 'e'
0000000000000b9d         db  0x5f ; '_'
0000000000000b9e         db  0x67 ; 'g'
0000000000000b9f         db  0x65 ; 'e'
0000000000000ba0         db  0x74 ; 't'
0000000000000ba1         db  0x5f ; '_'
0000000000000ba2         db  0x6d ; 'm'
0000000000000ba3         db  0x62 ; 'b'
0000000000000ba4         db  0x5f ; '_'
0000000000000ba5         db  0x63 ; 'c'
0000000000000ba6         db  0x75 ; 'u'
0000000000000ba7         db  0x72 ; 'r'
0000000000000ba8         db  0x5f ; '_'
0000000000000ba9         db  0x6d ; 'm'
0000000000000baa         db  0x61 ; 'a'
0000000000000bab         db  0x78 ; 'x'
0000000000000bac         db  0x00 ; '.'
0000000000000bad         db  0x65 ; 'e'
0000000000000bae         db  0x6e ; 'n'
0000000000000baf         db  0x64 ; 'd'
0000000000000bb0         db  0x70 ; 'p'
0000000000000bb1         db  0x77 ; 'w'
0000000000000bb2         db  0x65 ; 'e'
0000000000000bb3         db  0x6e ; 'n'
0000000000000bb4         db  0x74 ; 't'
0000000000000bb5         db  0x00 ; '.'
0000000000000bb6         db  0x67 ; 'g'
0000000000000bb7         db  0x65 ; 'e'
0000000000000bb8         db  0x74 ; 't'
0000000000000bb9         db  0x70 ; 'p'
0000000000000bba         db  0x77 ; 'w'
0000000000000bbb         db  0x6e ; 'n'
0000000000000bbc         db  0x61 ; 'a'
0000000000000bbd         db  0x6d ; 'm'
0000000000000bbe         db  0x00 ; '.'
0000000000000bbf         db  0x63 ; 'c'
0000000000000bc0         db  0x61 ; 'a'
0000000000000bc1         db  0x6c ; 'l'
0000000000000bc2         db  0x6c ; 'l'
0000000000000bc3         db  0x6f ; 'o'
0000000000000bc4         db  0x63 ; 'c'
0000000000000bc5         db  0x00 ; '.'
0000000000000bc6         db  0x73 ; 's'
0000000000000bc7         db  0x74 ; 't'
0000000000000bc8         db  0x72 ; 'r'
0000000000000bc9         db  0x6c ; 'l'
0000000000000bca         db  0x65 ; 'e'
0000000000000bcb         db  0x6e ; 'n'
0000000000000bcc         db  0x00 ; '.'
0000000000000bcd         db  0x6d ; 'm'
0000000000000bce         db  0x65 ; 'e'
0000000000000bcf         db  0x6d ; 'm'
0000000000000bd0         db  0x73 ; 's'
0000000000000bd1         db  0x65 ; 'e'
0000000000000bd2         db  0x74 ; 't'
0000000000000bd3         db  0x00 ; '.'
0000000000000bd4         db  0x5f ; '_'
0000000000000bd5         db  0x5f ; '_'
0000000000000bd6         db  0x65 ; 'e'
0000000000000bd7         db  0x72 ; 'r'
0000000000000bd8         db  0x72 ; 'r'
0000000000000bd9         db  0x6e ; 'n'
0000000000000bda         db  0x6f ; 'o'
0000000000000bdb         db  0x5f ; '_'
0000000000000bdc         db  0x6c ; 'l'
0000000000000bdd         db  0x6f ; 'o'
0000000000000bde         db  0x63 ; 'c'
0000000000000bdf         db  0x61 ; 'a'
0000000000000be0         db  0x74 ; 't'
0000000000000be1         db  0x69 ; 'i'
0000000000000be2         db  0x6f ; 'o'
0000000000000be3         db  0x6e ; 'n'
0000000000000be4         db  0x00 ; '.'
0000000000000be5         db  0x6d ; 'm'
0000000000000be6         db  0x65 ; 'e'
0000000000000be7         db  0x6d ; 'm'
0000000000000be8         db  0x63 ; 'c'
0000000000000be9         db  0x6d ; 'm'
0000000000000bea         db  0x70 ; 'p'
0000000000000beb         db  0x00 ; '.'
0000000000000bec         db  0x65 ; 'e'
0000000000000bed         db  0x6e ; 'n'
0000000000000bee         db  0x64 ; 'd'
0000000000000bef         db  0x67 ; 'g'
0000000000000bf0         db  0x72 ; 'r'
0000000000000bf1         db  0x65 ; 'e'
0000000000000bf2         db  0x6e ; 'n'
0000000000000bf3         db  0x74 ; 't'
0000000000000bf4         db  0x00 ; '.'
0000000000000bf5         db  0x5f ; '_'
0000000000000bf6         db  0x5f ; '_'
0000000000000bf7         db  0x66 ; 'f'
0000000000000bf8         db  0x70 ; 'p'
0000000000000bf9         db  0x72 ; 'r'
0000000000000bfa         db  0x69 ; 'i'
0000000000000bfb         db  0x6e ; 'n'
0000000000000bfc         db  0x74 ; 't'
0000000000000bfd         db  0x66 ; 'f'
0000000000000bfe         db  0x5f ; '_'
0000000000000bff         db  0x63 ; 'c'
0000000000000c00         db  0x68 ; 'h'
0000000000000c01         db  0x6b ; 'k'
0000000000000c02         db  0x00 ; '.'
0000000000000c03         db  0x67 ; 'g'
0000000000000c04         db  0x65 ; 'e'
0000000000000c05         db  0x74 ; 't'
0000000000000c06         db  0x67 ; 'g'
0000000000000c07         db  0x72 ; 'r'
0000000000000c08         db  0x6e ; 'n'
0000000000000c09         db  0x61 ; 'a'
0000000000000c0a         db  0x6d ; 'm'
0000000000000c0b         db  0x00 ; '.'
0000000000000c0c         db  0x66 ; 'f'
0000000000000c0d         db  0x63 ; 'c'
0000000000000c0e         db  0x68 ; 'h'
0000000000000c0f         db  0x6f ; 'o'
0000000000000c10         db  0x77 ; 'w'
0000000000000c11         db  0x6e ; 'n'
0000000000000c12         db  0x00 ; '.'
0000000000000c13         db  0x73 ; 's'
0000000000000c14         db  0x74 ; 't'
0000000000000c15         db  0x64 ; 'd'
0000000000000c16         db  0x6f ; 'o'
0000000000000c17         db  0x75 ; 'u'
0000000000000c18         db  0x74 ; 't'
0000000000000c19         db  0x00 ; '.'
0000000000000c1a         db  0x6c ; 'l'
0000000000000c1b         db  0x73 ; 's'
0000000000000c1c         db  0x65 ; 'e'
0000000000000c1d         db  0x65 ; 'e'
0000000000000c1e         db  0x6b ; 'k'
0000000000000c1f         db  0x00 ; '.'
0000000000000c20         db  0x6d ; 'm'
0000000000000c21         db  0x65 ; 'e'
0000000000000c22         db  0x6d ; 'm'
0000000000000c23         db  0x63 ; 'c'
0000000000000c24         db  0x70 ; 'p'
0000000000000c25         db  0x79 ; 'y'
0000000000000c26         db  0x00 ; '.'
0000000000000c27         db  0x66 ; 'f'
0000000000000c28         db  0x63 ; 'c'
0000000000000c29         db  0x6c ; 'l'
0000000000000c2a         db  0x6f ; 'o'
0000000000000c2b         db  0x73 ; 's'
0000000000000c2c         db  0x65 ; 'e'
0000000000000c2d         db  0x00 ; '.'
0000000000000c2e         db  0x73 ; 's'
0000000000000c2f         db  0x74 ; 't'
0000000000000c30         db  0x72 ; 'r'
0000000000000c31         db  0x74 ; 't'
0000000000000c32         db  0x6f ; 'o'
0000000000000c33         db  0x75 ; 'u'
0000000000000c34         db  0x6c ; 'l'
0000000000000c35         db  0x00 ; '.'
0000000000000c36         db  0x6d ; 'm'
0000000000000c37         db  0x61 ; 'a'
0000000000000c38         db  0x6c ; 'l'
0000000000000c39         db  0x6c ; 'l'
0000000000000c3a         db  0x6f ; 'o'
0000000000000c3b         db  0x63 ; 'c'
0000000000000c3c         db  0x00 ; '.'
0000000000000c3d         db  0x66 ; 'f'
0000000000000c3e         db  0x64 ; 'd'
0000000000000c3f         db  0x6f ; 'o'
0000000000000c40         db  0x70 ; 'p'
0000000000000c41         db  0x65 ; 'e'
0000000000000c42         db  0x6e ; 'n'
0000000000000c43         db  0x64 ; 'd'
0000000000000c44         db  0x69 ; 'i'
0000000000000c45         db  0x72 ; 'r'
0000000000000c46         db  0x00 ; '.'
0000000000000c47         db  0x5f ; '_'
0000000000000c48         db  0x5f ; '_'
0000000000000c49         db  0x6f ; 'o'
0000000000000c4a         db  0x70 ; 'p'
0000000000000c4b         db  0x65 ; 'e'
0000000000000c4c         db  0x6e ; 'n'
0000000000000c4d         db  0x61 ; 'a'
0000000000000c4e         db  0x74 ; 't'
0000000000000c4f         db  0x5f ; '_'
0000000000000c50         db  0x32 ; '2'
0000000000000c51         db  0x00 ; '.'
0000000000000c52         db  0x6d ; 'm'
0000000000000c53         db  0x62 ; 'b'
0000000000000c54         db  0x73 ; 's'
0000000000000c55         db  0x69 ; 'i'
0000000000000c56         db  0x6e ; 'n'
0000000000000c57         db  0x69 ; 'i'
0000000000000c58         db  0x74 ; 't'
0000000000000c59         db  0x00 ; '.'
0000000000000c5a         db  0x6e ; 'n'
0000000000000c5b         db  0x6c ; 'l'
0000000000000c5c         db  0x5f ; '_'
0000000000000c5d         db  0x6c ; 'l'
0000000000000c5e         db  0x61 ; 'a'
0000000000000c5f         db  0x6e ; 'n'
0000000000000c60         db  0x67 ; 'g'
0000000000000c61         db  0x69 ; 'i'
0000000000000c62         db  0x6e ; 'n'
0000000000000c63         db  0x66 ; 'f'
0000000000000c64         db  0x6f ; 'o'
0000000000000c65         db  0x00 ; '.'
0000000000000c66         db  0x5f ; '_'
0000000000000c67         db  0x5f ; '_'
0000000000000c68         db  0x63 ; 'c'
0000000000000c69         db  0x74 ; 't'
0000000000000c6a         db  0x79 ; 'y'
0000000000000c6b         db  0x70 ; 'p'
0000000000000c6c         db  0x65 ; 'e'
0000000000000c6d         db  0x5f ; '_'
0000000000000c6e         db  0x62 ; 'b'
0000000000000c6f         db  0x5f ; '_'
0000000000000c70         db  0x6c ; 'l'
0000000000000c71         db  0x6f ; 'o'
0000000000000c72         db  0x63 ; 'c'
0000000000000c73         db  0x00 ; '.'
0000000000000c74         db  0x6f ; 'o'
0000000000000c75         db  0x70 ; 'p'
0000000000000c76         db  0x74 ; 't'
0000000000000c77         db  0x61 ; 'a'
0000000000000c78         db  0x72 ; 'r'
0000000000000c79         db  0x67 ; 'g'
0000000000000c7a         db  0x00 ; '.'
0000000000000c7b         db  0x5f ; '_'
0000000000000c7c         db  0x5f ; '_'
0000000000000c7d         db  0x66 ; 'f'
0000000000000c7e         db  0x72 ; 'r'
0000000000000c7f         db  0x65 ; 'e'
0000000000000c80         db  0x61 ; 'a'
0000000000000c81         db  0x64 ; 'd'
0000000000000c82         db  0x69 ; 'i'
0000000000000c83         db  0x6e ; 'n'
0000000000000c84         db  0x67 ; 'g'
0000000000000c85         db  0x00 ; '.'
0000000000000c86         db  0x73 ; 's'
0000000000000c87         db  0x74 ; 't'
0000000000000c88         db  0x64 ; 'd'
0000000000000c89         db  0x65 ; 'e'
0000000000000c8a         db  0x72 ; 'r'
0000000000000c8b         db  0x72 ; 'r'
0000000000000c8c         db  0x00 ; '.'
0000000000000c8d         db  0x66 ; 'f'
0000000000000c8e         db  0x63 ; 'c'
0000000000000c8f         db  0x68 ; 'h'
0000000000000c90         db  0x6f ; 'o'
0000000000000c91         db  0x77 ; 'w'
0000000000000c92         db  0x6e ; 'n'
0000000000000c93         db  0x61 ; 'a'
0000000000000c94         db  0x74 ; 't'
0000000000000c95         db  0x00 ; '.'
0000000000000c96         db  0x67 ; 'g'
0000000000000c97         db  0x65 ; 'e'
0000000000000c98         db  0x74 ; 't'
0000000000000c99         db  0x6f ; 'o'
0000000000000c9a         db  0x70 ; 'p'
0000000000000c9b         db  0x74 ; 't'
0000000000000c9c         db  0x5f ; '_'
0000000000000c9d         db  0x6c ; 'l'
0000000000000c9e         db  0x6f ; 'o'
0000000000000c9f         db  0x6e ; 'n'
0000000000000ca0         db  0x67 ; 'g'
0000000000000ca1         db  0x00 ; '.'
0000000000000ca2         db  0x5f ; '_'
0000000000000ca3         db  0x5f ; '_'
0000000000000ca4         db  0x66 ; 'f'
0000000000000ca5         db  0x78 ; 'x'
0000000000000ca6         db  0x73 ; 's'
0000000000000ca7         db  0x74 ; 't'
0000000000000ca8         db  0x61 ; 'a'
0000000000000ca9         db  0x74 ; 't'
0000000000000caa         db  0x00 ; '.'
0000000000000cab         db  0x66 ; 'f'
0000000000000cac         db  0x69 ; 'i'
0000000000000cad         db  0x6c ; 'l'
0000000000000cae         db  0x65 ; 'e'
0000000000000caf         db  0x6e ; 'n'
0000000000000cb0         db  0x6f ; 'o'
0000000000000cb1         db  0x00 ; '.'
0000000000000cb2         db  0x66 ; 'f'
0000000000000cb3         db  0x77 ; 'w'
0000000000000cb4         db  0x72 ; 'r'
0000000000000cb5         db  0x69 ; 'i'
0000000000000cb6         db  0x74 ; 't'
0000000000000cb7         db  0x65 ; 'e'
0000000000000cb8         db  0x00 ; '.'
0000000000000cb9         db  0x5f ; '_'
0000000000000cba         db  0x5f ; '_'
0000000000000cbb         db  0x66 ; 'f'
0000000000000cbc         db  0x70 ; 'p'
0000000000000cbd         db  0x65 ; 'e'
0000000000000cbe         db  0x6e ; 'n'
0000000000000cbf         db  0x64 ; 'd'
0000000000000cc0         db  0x69 ; 'i'
0000000000000cc1         db  0x6e ; 'n'
0000000000000cc2         db  0x67 ; 'g'
0000000000000cc3         db  0x00 ; '.'
0000000000000cc4         db  0x6f ; 'o'
0000000000000cc5         db  0x70 ; 'p'
0000000000000cc6         db  0x65 ; 'e'
0000000000000cc7         db  0x6e ; 'n'
0000000000000cc8         db  0x00 ; '.'
0000000000000cc9         db  0x73 ; 's'
0000000000000cca         db  0x74 ; 't'
0000000000000ccb         db  0x72 ; 'r'
0000000000000ccc         db  0x63 ; 'c'
0000000000000ccd         db  0x68 ; 'h'
0000000000000cce         db  0x72 ; 'r'
0000000000000ccf         db  0x00 ; '.'
0000000000000cd0         db  0x70 ; 'p'
0000000000000cd1         db  0x72 ; 'r'
0000000000000cd2         db  0x6f ; 'o'
0000000000000cd3         db  0x67 ; 'g'
0000000000000cd4         db  0x72 ; 'r'
0000000000000cd5         db  0x61 ; 'a'
0000000000000cd6         db  0x6d ; 'm'
0000000000000cd7         db  0x5f ; '_'
0000000000000cd8         db  0x69 ; 'i'
0000000000000cd9         db  0x6e ; 'n'
0000000000000cda         db  0x76 ; 'v'
0000000000000cdb         db  0x6f ; 'o'
0000000000000cdc         db  0x63 ; 'c'
0000000000000cdd         db  0x61 ; 'a'
0000000000000cde         db  0x74 ; 't'
0000000000000cdf         db  0x69 ; 'i'
0000000000000ce0         db  0x6f ; 'o'
0000000000000ce1         db  0x6e ; 'n'
0000000000000ce2         db  0x5f ; '_'
0000000000000ce3         db  0x73 ; 's'
0000000000000ce4         db  0x68 ; 'h'
0000000000000ce5         db  0x6f ; 'o'
0000000000000ce6         db  0x72 ; 'r'
0000000000000ce7         db  0x74 ; 't'
0000000000000ce8         db  0x5f ; '_'
0000000000000ce9         db  0x6e ; 'n'
0000000000000cea         db  0x61 ; 'a'
0000000000000ceb         db  0x6d ; 'm'
0000000000000cec         db  0x65 ; 'e'
0000000000000ced         db  0x00 ; '.'
0000000000000cee         db  0x71 ; 'q'
0000000000000cef         db  0x73 ; 's'
0000000000000cf0         db  0x6f ; 'o'
0000000000000cf1         db  0x72 ; 'r'
0000000000000cf2         db  0x74 ; 't'
0000000000000cf3         db  0x00 ; '.'
0000000000000cf4         db  0x5f ; '_'
0000000000000cf5         db  0x5f ; '_'
0000000000000cf6         db  0x63 ; 'c'
0000000000000cf7         db  0x78 ; 'x'
0000000000000cf8         db  0x61 ; 'a'
0000000000000cf9         db  0x5f ; '_'
0000000000000cfa         db  0x66 ; 'f'
0000000000000cfb         db  0x69 ; 'i'
0000000000000cfc         db  0x6e ; 'n'
0000000000000cfd         db  0x61 ; 'a'
0000000000000cfe         db  0x6c ; 'l'
0000000000000cff         db  0x69 ; 'i'
0000000000000d00         db  0x7a ; 'z'
0000000000000d01         db  0x65 ; 'e'
0000000000000d02         db  0x00 ; '.'
0000000000000d03         db  0x66 ; 'f'
0000000000000d04         db  0x63 ; 'c'
0000000000000d05         db  0x6e ; 'n'
0000000000000d06         db  0x74 ; 't'
0000000000000d07         db  0x6c ; 'l'
0000000000000d08         db  0x00 ; '.'
0000000000000d09         db  0x6f ; 'o'
0000000000000d0a         db  0x70 ; 'p'
0000000000000d0b         db  0x65 ; 'e'
0000000000000d0c         db  0x6e ; 'n'
0000000000000d0d         db  0x61 ; 'a'
0000000000000d0e         db  0x74 ; 't'
0000000000000d0f         db  0x00 ; '.'
0000000000000d10         db  0x5f ; '_'
0000000000000d11         db  0x5f ; '_'
0000000000000d12         db  0x78 ; 'x'
0000000000000d13         db  0x73 ; 's'
0000000000000d14         db  0x74 ; 't'
0000000000000d15         db  0x61 ; 'a'
0000000000000d16         db  0x74 ; 't'
0000000000000d17         db  0x00 ; '.'
0000000000000d18         db  0x6d ; 'm'
0000000000000d19         db  0x65 ; 'e'
0000000000000d1a         db  0x6d ; 'm'
0000000000000d1b         db  0x6d ; 'm'
0000000000000d1c         db  0x6f ; 'o'
0000000000000d1d         db  0x76 ; 'v'
0000000000000d1e         db  0x65 ; 'e'
0000000000000d1f         db  0x00 ; '.'
0000000000000d20         db  0x62 ; 'b'
0000000000000d21         db  0x69 ; 'i'
0000000000000d22         db  0x6e ; 'n'
0000000000000d23         db  0x64 ; 'd'
0000000000000d24         db  0x74 ; 't'
0000000000000d25         db  0x65 ; 'e'
0000000000000d26         db  0x78 ; 'x'
0000000000000d27         db  0x74 ; 't'
0000000000000d28         db  0x64 ; 'd'
0000000000000d29         db  0x6f ; 'o'
0000000000000d2a         db  0x6d ; 'm'
0000000000000d2b         db  0x61 ; 'a'
0000000000000d2c         db  0x69 ; 'i'
0000000000000d2d         db  0x6e ; 'n'
0000000000000d2e         db  0x00 ; '.'
0000000000000d2f         db  0x5f ; '_'
0000000000000d30         db  0x5f ; '_'
0000000000000d31         db  0x66 ; 'f'
0000000000000d32         db  0x78 ; 'x'
0000000000000d33         db  0x73 ; 's'
0000000000000d34         db  0x74 ; 't'
0000000000000d35         db  0x61 ; 'a'
0000000000000d36         db  0x74 ; 't'
0000000000000d37         db  0x61 ; 'a'
0000000000000d38         db  0x74 ; 't'
0000000000000d39         db  0x00 ; '.'
0000000000000d3a         db  0x5f ; '_'
0000000000000d3b         db  0x5f ; '_'
0000000000000d3c         db  0x6c ; 'l'
0000000000000d3d         db  0x69 ; 'i'
0000000000000d3e         db  0x62 ; 'b'
0000000000000d3f         db  0x63 ; 'c'
0000000000000d40         db  0x5f ; '_'
0000000000000d41         db  0x73 ; 's'
0000000000000d42         db  0x74 ; 't'
0000000000000d43         db  0x61 ; 'a'
0000000000000d44         db  0x72 ; 'r'
0000000000000d45         db  0x74 ; 't'
0000000000000d46         db  0x5f ; '_'
0000000000000d47         db  0x6d ; 'm'
0000000000000d48         db  0x61 ; 'a'
0000000000000d49         db  0x69 ; 'i'
0000000000000d4a         db  0x6e ; 'n'
0000000000000d4b         db  0x00 ; '.'
0000000000000d4c         db  0x64 ; 'd'
0000000000000d4d         db  0x69 ; 'i'
0000000000000d4e         db  0x72 ; 'r'
0000000000000d4f         db  0x66 ; 'f'
0000000000000d50         db  0x64 ; 'd'
0000000000000d51         db  0x00 ; '.'
0000000000000d52         db  0x73 ; 's'
0000000000000d53         db  0x74 ; 't'
0000000000000d54         db  0x70 ; 'p'
0000000000000d55         db  0x63 ; 'c'
0000000000000d56         db  0x70 ; 'p'
0000000000000d57         db  0x79 ; 'y'
0000000000000d58         db  0x00 ; '.'
0000000000000d59         db  0x66 ; 'f'
0000000000000d5a         db  0x73 ; 's'
0000000000000d5b         db  0x65 ; 'e'
0000000000000d5c         db  0x65 ; 'e'
0000000000000d5d         db  0x6b ; 'k'
0000000000000d5e         db  0x6f ; 'o'
0000000000000d5f         db  0x00 ; '.'
0000000000000d60         db  0x66 ; 'f'
0000000000000d61         db  0x70 ; 'p'
0000000000000d62         db  0x75 ; 'u'
0000000000000d63         db  0x74 ; 't'
0000000000000d64         db  0x73 ; 's'
0000000000000d65         db  0x5f ; '_'
0000000000000d66         db  0x75 ; 'u'
0000000000000d67         db  0x6e ; 'n'
0000000000000d68         db  0x6c ; 'l'
0000000000000d69         db  0x6f ; 'o'
0000000000000d6a         db  0x63 ; 'c'
0000000000000d6b         db  0x6b ; 'k'
0000000000000d6c         db  0x65 ; 'e'
0000000000000d6d         db  0x64 ; 'd'
0000000000000d6e         db  0x00 ; '.'
0000000000000d6f         db  0x66 ; 'f'
0000000000000d70         db  0x72 ; 'r'
0000000000000d71         db  0x65 ; 'e'
0000000000000d72         db  0x65 ; 'e'
0000000000000d73         db  0x00 ; '.'
0000000000000d74         db  0x5f ; '_'
0000000000000d75         db  0x5f ; '_'
0000000000000d76         db  0x70 ; 'p'
0000000000000d77         db  0x72 ; 'r'
0000000000000d78         db  0x6f ; 'o'
0000000000000d79         db  0x67 ; 'g'
0000000000000d7a         db  0x6e ; 'n'
0000000000000d7b         db  0x61 ; 'a'
0000000000000d7c         db  0x6d ; 'm'
0000000000000d7d         db  0x65 ; 'e'
0000000000000d7e         db  0x00 ; '.'
0000000000000d7f         db  0x5f ; '_'
0000000000000d80         db  0x5f ; '_'
0000000000000d81         db  0x70 ; 'p'
0000000000000d82         db  0x72 ; 'r'
0000000000000d83         db  0x6f ; 'o'
0000000000000d84         db  0x67 ; 'g'
0000000000000d85         db  0x6e ; 'n'
0000000000000d86         db  0x61 ; 'a'
0000000000000d87         db  0x6d ; 'm'
0000000000000d88         db  0x65 ; 'e'
0000000000000d89         db  0x5f ; '_'
0000000000000d8a         db  0x66 ; 'f'
0000000000000d8b         db  0x75 ; 'u'
0000000000000d8c         db  0x6c ; 'l'
0000000000000d8d         db  0x6c ; 'l'
0000000000000d8e         db  0x00 ; '.'
0000000000000d8f         db  0x5f ; '_'
0000000000000d90         db  0x5f ; '_'
0000000000000d91         db  0x63 ; 'c'
0000000000000d92         db  0x78 ; 'x'
0000000000000d93         db  0x61 ; 'a'
0000000000000d94         db  0x5f ; '_'
0000000000000d95         db  0x61 ; 'a'
0000000000000d96         db  0x74 ; 't'
0000000000000d97         db  0x65 ; 'e'
0000000000000d98         db  0x78 ; 'x'
0000000000000d99         db  0x69 ; 'i'
0000000000000d9a         db  0x74 ; 't'
0000000000000d9b         db  0x00 ; '.'
0000000000000d9c         db  0x47 ; 'G'
0000000000000d9d         db  0x4c ; 'L'
0000000000000d9e         db  0x49 ; 'I'
0000000000000d9f         db  0x42 ; 'B'
0000000000000da0         db  0x43 ; 'C'
0000000000000da1         db  0x5f ; '_'
0000000000000da2         db  0x32 ; '2'
0000000000000da3         db  0x2e ; '.'
0000000000000da4         db  0x33 ; '3'
0000000000000da5         db  0x00 ; '.'
0000000000000da6         db  0x47 ; 'G'
0000000000000da7         db  0x4c ; 'L'
0000000000000da8         db  0x49 ; 'I'
0000000000000da9         db  0x42 ; 'B'
0000000000000daa         db  0x43 ; 'C'
0000000000000dab         db  0x5f ; '_'
0000000000000dac         db  0x32 ; '2'
0000000000000dad         db  0x2e ; '.'
0000000000000dae         db  0x33 ; '3'
0000000000000daf         db  0x2e ; '.'
0000000000000db0         db  0x34 ; '4'
0000000000000db1         db  0x00 ; '.'
0000000000000db2         db  0x47 ; 'G'
0000000000000db3         db  0x4c ; 'L'
0000000000000db4         db  0x49 ; 'I'
0000000000000db5         db  0x42 ; 'B'
0000000000000db6         db  0x43 ; 'C'
0000000000000db7         db  0x5f ; '_'
0000000000000db8         db  0x32 ; '2'
0000000000000db9         db  0x2e ; '.'
0000000000000dba         db  0x31 ; '1'
0000000000000dbb         db  0x34 ; '4'
0000000000000dbc         db  0x00 ; '.'
0000000000000dbd         db  0x47 ; 'G'
0000000000000dbe         db  0x4c ; 'L'
0000000000000dbf         db  0x49 ; 'I'
0000000000000dc0         db  0x42 ; 'B'
0000000000000dc1         db  0x43 ; 'C'
0000000000000dc2         db  0x5f ; '_'
0000000000000dc3         db  0x32 ; '2'
0000000000000dc4         db  0x2e ; '.'
0000000000000dc5         db  0x37 ; '7'
0000000000000dc6         db  0x00 ; '.'
0000000000000dc7         db  0x47 ; 'G'
0000000000000dc8         db  0x4c ; 'L'
0000000000000dc9         db  0x49 ; 'I'
0000000000000dca         db  0x42 ; 'B'
0000000000000dcb         db  0x43 ; 'C'
0000000000000dcc         db  0x5f ; '_'
0000000000000dcd         db  0x32 ; '2'
0000000000000dce         db  0x2e ; '.'
0000000000000dcf         db  0x34 ; '4'
0000000000000dd0         db  0x00 ; '.'
0000000000000dd1         db  0x47 ; 'G'
0000000000000dd2         db  0x4c ; 'L'
0000000000000dd3         db  0x49 ; 'I'
0000000000000dd4         db  0x42 ; 'B'
0000000000000dd5         db  0x43 ; 'C'
0000000000000dd6         db  0x5f ; '_'
0000000000000dd7         db  0x32 ; '2'
0000000000000dd8         db  0x2e ; '.'
0000000000000dd9         db  0x32 ; '2'
0000000000000dda         db  0x2e ; '.'
0000000000000ddb         db  0x35 ; '5'
0000000000000ddc         db  0x00 ; '.'
0000000000000ddd         db  0x5f ; '_'
0000000000000dde         db  0x49 ; 'I'
0000000000000ddf         db  0x54 ; 'T'
0000000000000de0         db  0x4d ; 'M'
0000000000000de1         db  0x5f ; '_'
0000000000000de2         db  0x64 ; 'd'
0000000000000de3         db  0x65 ; 'e'
0000000000000de4         db  0x72 ; 'r'
0000000000000de5         db  0x65 ; 'e'
0000000000000de6         db  0x67 ; 'g'
0000000000000de7         db  0x69 ; 'i'
0000000000000de8         db  0x73 ; 's'
0000000000000de9         db  0x74 ; 't'
0000000000000dea         db  0x65 ; 'e'
0000000000000deb         db  0x72 ; 'r'
0000000000000dec         db  0x54 ; 'T'
0000000000000ded         db  0x4d ; 'M'
0000000000000dee         db  0x43 ; 'C'
0000000000000def         db  0x6c ; 'l'
0000000000000df0         db  0x6f ; 'o'
0000000000000df1         db  0x6e ; 'n'
0000000000000df2         db  0x65 ; 'e'
0000000000000df3         db  0x54 ; 'T'
0000000000000df4         db  0x61 ; 'a'
0000000000000df5         db  0x62 ; 'b'
0000000000000df6         db  0x6c ; 'l'
0000000000000df7         db  0x65 ; 'e'
0000000000000df8         db  0x00 ; '.'
0000000000000df9         db  0x5f ; '_'
0000000000000dfa         db  0x5f ; '_'
0000000000000dfb         db  0x67 ; 'g'
0000000000000dfc         db  0x6d ; 'm'
0000000000000dfd         db  0x6f ; 'o'
0000000000000dfe         db  0x6e ; 'n'
0000000000000dff         db  0x5f ; '_'
                     aStart:
0000000000000e00         db         "start__", 0
0000000000000e08         db  0x5f ; '_'
0000000000000e09         db  0x49 ; 'I'
0000000000000e0a         db  0x54 ; 'T'
0000000000000e0b         db  0x4d ; 'M'
0000000000000e0c         db  0x5f ; '_'
0000000000000e0d         db  0x72 ; 'r'
0000000000000e0e         db  0x65 ; 'e'
0000000000000e0f         db  0x67 ; 'g'
0000000000000e10         db  0x69 ; 'i'
0000000000000e11         db  0x73 ; 's'
0000000000000e12         db  0x74 ; 't'
0000000000000e13         db  0x65 ; 'e'
0000000000000e14         db  0x72 ; 'r'
0000000000000e15         db  0x54 ; 'T'
0000000000000e16         db  0x4d ; 'M'
0000000000000e17         db  0x43 ; 'C'
0000000000000e18         db  0x6c ; 'l'
0000000000000e19         db  0x6f ; 'o'
0000000000000e1a         db  0x6e ; 'n'
0000000000000e1b         db  0x65 ; 'e'
0000000000000e1c         db  0x54 ; 'T'
0000000000000e1d         db  0x61 ; 'a'
0000000000000e1e         db  0x62 ; 'b'
0000000000000e1f         db  0x6c ; 'l'
0000000000000e20         db  0x65 ; 'e'
0000000000000e21         db  0x00 ; '.'


        ; Section .gnu.version
        ; Range: [0xe22; 0xec8[ (166 bytes)
        ; File offset : [3618; 3784[ (166 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000000e22         db  0x00 ; '.'
0000000000000e23         db  0x00 ; '.'
0000000000000e24         db  0x02 ; '.'
0000000000000e25         db  0x00 ; '.'
0000000000000e26         db  0x02 ; '.'
0000000000000e27         db  0x00 ; '.'
0000000000000e28         db  0x02 ; '.'
0000000000000e29         db  0x00 ; '.'
0000000000000e2a         db  0x02 ; '.'
0000000000000e2b         db  0x00 ; '.'
0000000000000e2c         db  0x02 ; '.'
0000000000000e2d         db  0x00 ; '.'
0000000000000e2e         db  0x00 ; '.'
0000000000000e2f         db  0x00 ; '.'
0000000000000e30         db  0x02 ; '.'
0000000000000e31         db  0x00 ; '.'
0000000000000e32         db  0x02 ; '.'
0000000000000e33         db  0x00 ; '.'
0000000000000e34         db  0x02 ; '.'
0000000000000e35         db  0x00 ; '.'
0000000000000e36         db  0x02 ; '.'
0000000000000e37         db  0x00 ; '.'
0000000000000e38         db  0x02 ; '.'
0000000000000e39         db  0x00 ; '.'
0000000000000e3a         db  0x02 ; '.'
0000000000000e3b         db  0x00 ; '.'
0000000000000e3c         db  0x02 ; '.'
0000000000000e3d         db  0x00 ; '.'
0000000000000e3e         db  0x02 ; '.'
0000000000000e3f         db  0x00 ; '.'
0000000000000e40         db  0x02 ; '.'
0000000000000e41         db  0x00 ; '.'
0000000000000e42         db  0x02 ; '.'
0000000000000e43         db  0x00 ; '.'
0000000000000e44         db  0x02 ; '.'
0000000000000e45         db  0x00 ; '.'
0000000000000e46         db  0x02 ; '.'
0000000000000e47         db  0x00 ; '.'
0000000000000e48         db  0x02 ; '.'
0000000000000e49         db  0x00 ; '.'
0000000000000e4a         db  0x02 ; '.'
0000000000000e4b         db  0x00 ; '.'
0000000000000e4c         db  0x03 ; '.'
0000000000000e4d         db  0x00 ; '.'
0000000000000e4e         db  0x03 ; '.'
0000000000000e4f         db  0x00 ; '.'
0000000000000e50         db  0x02 ; '.'
0000000000000e51         db  0x00 ; '.'
0000000000000e52         db  0x02 ; '.'
0000000000000e53         db  0x00 ; '.'
0000000000000e54         db  0x02 ; '.'
0000000000000e55         db  0x00 ; '.'
0000000000000e56         db  0x02 ; '.'
0000000000000e57         db  0x00 ; '.'
0000000000000e58         db  0x03 ; '.'
0000000000000e59         db  0x00 ; '.'
0000000000000e5a         db  0x02 ; '.'
0000000000000e5b         db  0x00 ; '.'
0000000000000e5c         db  0x02 ; '.'
0000000000000e5d         db  0x00 ; '.'
0000000000000e5e         db  0x02 ; '.'
0000000000000e5f         db  0x00 ; '.'
0000000000000e60         db  0x02 ; '.'
0000000000000e61         db  0x00 ; '.'
0000000000000e62         db  0x02 ; '.'
0000000000000e63         db  0x00 ; '.'
0000000000000e64         db  0x04 ; '.'
0000000000000e65         db  0x00 ; '.'
0000000000000e66         db  0x02 ; '.'
0000000000000e67         db  0x00 ; '.'
0000000000000e68         db  0x02 ; '.'
0000000000000e69         db  0x00 ; '.'
0000000000000e6a         db  0x02 ; '.'
0000000000000e6b         db  0x00 ; '.'
0000000000000e6c         db  0x02 ; '.'
0000000000000e6d         db  0x00 ; '.'
0000000000000e6e         db  0x02 ; '.'
0000000000000e6f         db  0x00 ; '.'
0000000000000e70         db  0x02 ; '.'
0000000000000e71         db  0x00 ; '.'
0000000000000e72         db  0x02 ; '.'
0000000000000e73         db  0x00 ; '.'
0000000000000e74         db  0x00 ; '.'
0000000000000e75         db  0x00 ; '.'
0000000000000e76         db  0x05 ; '.'
0000000000000e77         db  0x00 ; '.'
0000000000000e78         db  0x02 ; '.'
0000000000000e79         db  0x00 ; '.'
0000000000000e7a         db  0x02 ; '.'
0000000000000e7b         db  0x00 ; '.'
0000000000000e7c         db  0x02 ; '.'
0000000000000e7d         db  0x00 ; '.'
0000000000000e7e         db  0x02 ; '.'
0000000000000e7f         db  0x00 ; '.'
0000000000000e80         db  0x02 ; '.'
0000000000000e81         db  0x00 ; '.'
0000000000000e82         db  0x02 ; '.'
0000000000000e83         db  0x00 ; '.'
0000000000000e84         db  0x02 ; '.'
0000000000000e85         db  0x00 ; '.'
0000000000000e86         db  0x02 ; '.'
0000000000000e87         db  0x00 ; '.'
0000000000000e88         db  0x02 ; '.'
0000000000000e89         db  0x00 ; '.'
0000000000000e8a         db  0x02 ; '.'
0000000000000e8b         db  0x00 ; '.'
0000000000000e8c         db  0x02 ; '.'
0000000000000e8d         db  0x00 ; '.'
0000000000000e8e         db  0x02 ; '.'
0000000000000e8f         db  0x00 ; '.'
0000000000000e90         db  0x02 ; '.'
0000000000000e91         db  0x00 ; '.'
0000000000000e92         db  0x06 ; '.'
0000000000000e93         db  0x00 ; '.'
0000000000000e94         db  0x02 ; '.'
0000000000000e95         db  0x00 ; '.'
0000000000000e96         db  0x02 ; '.'
0000000000000e97         db  0x00 ; '.'
0000000000000e98         db  0x02 ; '.'
0000000000000e99         db  0x00 ; '.'
0000000000000e9a         db  0x02 ; '.'
0000000000000e9b         db  0x00 ; '.'
0000000000000e9c         db  0x02 ; '.'
0000000000000e9d         db  0x00 ; '.'
0000000000000e9e         db  0x03 ; '.'
0000000000000e9f         db  0x00 ; '.'
0000000000000ea0         db  0x02 ; '.'
0000000000000ea1         db  0x00 ; '.'
0000000000000ea2         db  0x02 ; '.'
0000000000000ea3         db  0x00 ; '.'
0000000000000ea4         db  0x02 ; '.'
0000000000000ea5         db  0x00 ; '.'
0000000000000ea6         db  0x03 ; '.'
0000000000000ea7         db  0x00 ; '.'
0000000000000ea8         db  0x02 ; '.'
0000000000000ea9         db  0x00 ; '.'
0000000000000eaa         db  0x02 ; '.'
0000000000000eab         db  0x00 ; '.'
0000000000000eac         db  0x06 ; '.'
0000000000000ead         db  0x00 ; '.'
0000000000000eae         db  0x00 ; '.'
0000000000000eaf         db  0x00 ; '.'
0000000000000eb0         db  0x02 ; '.'
0000000000000eb1         db  0x00 ; '.'
0000000000000eb2         db  0x02 ; '.'
0000000000000eb3         db  0x00 ; '.'
0000000000000eb4         db  0x02 ; '.'
0000000000000eb5         db  0x00 ; '.'
0000000000000eb6         db  0x07 ; '.'
0000000000000eb7         db  0x00 ; '.'
0000000000000eb8         db  0x02 ; '.'
0000000000000eb9         db  0x00 ; '.'
0000000000000eba         db  0x02 ; '.'
0000000000000ebb         db  0x00 ; '.'
0000000000000ebc         db  0x02 ; '.'
0000000000000ebd         db  0x00 ; '.'
0000000000000ebe         db  0x02 ; '.'
0000000000000ebf         db  0x00 ; '.'
0000000000000ec0         db  0x02 ; '.'
0000000000000ec1         db  0x00 ; '.'
0000000000000ec2         db  0x02 ; '.'
0000000000000ec3         db  0x00 ; '.'
0000000000000ec4         db  0x02 ; '.'
0000000000000ec5         db  0x00 ; '.'
0000000000000ec6         db  0x02 ; '.'
0000000000000ec7         db  0x00 ; '.'


        ; Section .gnu.version_r
        ; Range: [0xec8; 0xf38[ (112 bytes)
        ; File offset : [3784; 3896[ (112 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000000ec8         db  0x01 ; '.'
0000000000000ec9         db  0x00 ; '.'
0000000000000eca         db  0x06 ; '.'
0000000000000ecb         db  0x00 ; '.'
0000000000000ecc         db  0x01 ; '.'
0000000000000ecd         db  0x00 ; '.'
0000000000000ece         db  0x00 ; '.'
0000000000000ecf         db  0x00 ; '.'
0000000000000ed0         db  0x10 ; '.'
0000000000000ed1         db  0x00 ; '.'
0000000000000ed2         db  0x00 ; '.'
0000000000000ed3         db  0x00 ; '.'
0000000000000ed4         db  0x00 ; '.'
0000000000000ed5         db  0x00 ; '.'
0000000000000ed6         db  0x00 ; '.'
0000000000000ed7         db  0x00 ; '.'
0000000000000ed8         db  0x13 ; '.'
0000000000000ed9         db  0x69 ; 'i'
0000000000000eda         db  0x69 ; 'i'
0000000000000edb         db  0x0d ; '.'
0000000000000edc         db  0x00 ; '.'
0000000000000edd         db  0x00 ; '.'
0000000000000ede         db  0x07 ; '.'
0000000000000edf         db  0x00 ; '.'
0000000000000ee0         db  0xf4 ; '.'
0000000000000ee1         db  0x02 ; '.'
0000000000000ee2         db  0x00 ; '.'
0000000000000ee3         db  0x00 ; '.'
0000000000000ee4         db  0x10 ; '.'
0000000000000ee5         db  0x00 ; '.'
0000000000000ee6         db  0x00 ; '.'
0000000000000ee7         db  0x00 ; '.'
0000000000000ee8         db  0x74 ; 't'
0000000000000ee9         db  0x19 ; '.'
0000000000000eea         db  0x69 ; 'i'
0000000000000eeb         db  0x09 ; '.'
0000000000000eec         db  0x00 ; '.'
0000000000000eed         db  0x00 ; '.'
0000000000000eee         db  0x06 ; '.'
0000000000000eef         db  0x00 ; '.'
0000000000000ef0         db  0xfe ; '.'
0000000000000ef1         db  0x02 ; '.'
0000000000000ef2         db  0x00 ; '.'
0000000000000ef3         db  0x00 ; '.'
0000000000000ef4         db  0x10 ; '.'
0000000000000ef5         db  0x00 ; '.'
0000000000000ef6         db  0x00 ; '.'
0000000000000ef7         db  0x00 ; '.'
0000000000000ef8         db  0x94 ; '.'
0000000000000ef9         db  0x91 ; '.'
0000000000000efa         db  0x96 ; '.'
0000000000000efb         db  0x06 ; '.'
0000000000000efc         db  0x00 ; '.'
0000000000000efd         db  0x00 ; '.'
0000000000000efe         db  0x05 ; '.'
0000000000000eff         db  0x00 ; '.'
0000000000000f00         db  0x0a ; '.'
0000000000000f01         db  0x03 ; '.'
0000000000000f02         db  0x00 ; '.'
0000000000000f03         db  0x00 ; '.'
0000000000000f04         db  0x10 ; '.'
0000000000000f05         db  0x00 ; '.'
0000000000000f06         db  0x00 ; '.'
0000000000000f07         db  0x00 ; '.'
0000000000000f08         db  0x17 ; '.'
0000000000000f09         db  0x69 ; 'i'
0000000000000f0a         db  0x69 ; 'i'
0000000000000f0b         db  0x0d ; '.'
0000000000000f0c         db  0x00 ; '.'
0000000000000f0d         db  0x00 ; '.'
0000000000000f0e         db  0x04 ; '.'
0000000000000f0f         db  0x00 ; '.'
0000000000000f10         db  0x15 ; '.'
0000000000000f11         db  0x03 ; '.'
0000000000000f12         db  0x00 ; '.'
0000000000000f13         db  0x00 ; '.'
0000000000000f14         db  0x10 ; '.'
0000000000000f15         db  0x00 ; '.'
0000000000000f16         db  0x00 ; '.'
0000000000000f17         db  0x00 ; '.'
0000000000000f18         db  0x14 ; '.'
0000000000000f19         db  0x69 ; 'i'
0000000000000f1a         db  0x69 ; 'i'
0000000000000f1b         db  0x0d ; '.'
0000000000000f1c         db  0x00 ; '.'
0000000000000f1d         db  0x00 ; '.'
0000000000000f1e         db  0x03 ; '.'
0000000000000f1f         db  0x00 ; '.'
0000000000000f20         db  0x1f ; '.'
0000000000000f21         db  0x03 ; '.'
0000000000000f22         db  0x00 ; '.'
0000000000000f23         db  0x00 ; '.'
0000000000000f24         db  0x10 ; '.'
0000000000000f25         db  0x00 ; '.'
0000000000000f26         db  0x00 ; '.'
0000000000000f27         db  0x00 ; '.'
0000000000000f28         db  0x75 ; 'u'
0000000000000f29         db  0x1a ; '.'
0000000000000f2a         db  0x69 ; 'i'
0000000000000f2b         db  0x09 ; '.'
0000000000000f2c         db  0x00 ; '.'
0000000000000f2d         db  0x00 ; '.'
0000000000000f2e         db  0x02 ; '.'
0000000000000f2f         db  0x00 ; '.'
0000000000000f30         db  0x29 ; ')'
0000000000000f31         db  0x03 ; '.'
0000000000000f32         db  0x00 ; '.'
0000000000000f33         db  0x00 ; '.'
0000000000000f34         db  0x00 ; '.'
0000000000000f35         db  0x00 ; '.'
0000000000000f36         db  0x00 ; '.'
0000000000000f37         db  0x00 ; '.'


        ; Section .rela.dyn
        ; Range: [0xf38; 0x1310[ (984 bytes)
        ; File offset : [3896; 4880[ (984 bytes)
        ; Flags: 0x2
        ;   SHT_RELA
        ;   SHF_ALLOC

0000000000000f38         db  0x70 ; 'p'
0000000000000f39         db  0xe9 ; '.'
0000000000000f3a         db  0x20 ; ' '
0000000000000f3b         db  0x00 ; '.'
0000000000000f3c         db  0x00 ; '.'
0000000000000f3d         db  0x00 ; '.'
0000000000000f3e         db  0x00 ; '.'
0000000000000f3f         db  0x00 ; '.'
0000000000000f40         db  0x08 ; '.'
0000000000000f41         db  0x00 ; '.'
0000000000000f42         db  0x00 ; '.'
0000000000000f43         db  0x00 ; '.'
0000000000000f44         db  0x00 ; '.'
0000000000000f45         db  0x00 ; '.'
0000000000000f46         db  0x00 ; '.'
0000000000000f47         db  0x00 ; '.'
0000000000000f48         db  0x80 ; '.'
0000000000000f49         db  0x24 ; '$'
0000000000000f4a         db  0x00 ; '.'
0000000000000f4b         db  0x00 ; '.'
0000000000000f4c         db  0x00 ; '.'
0000000000000f4d         db  0x00 ; '.'
0000000000000f4e         db  0x00 ; '.'
0000000000000f4f         db  0x00 ; '.'
0000000000000f50         db  0x78 ; 'x'
0000000000000f51         db  0xe9 ; '.'
0000000000000f52         db  0x20 ; ' '
0000000000000f53         db  0x00 ; '.'
0000000000000f54         db  0x00 ; '.'
0000000000000f55         db  0x00 ; '.'
0000000000000f56         db  0x00 ; '.'
0000000000000f57         db  0x00 ; '.'
0000000000000f58         db  0x08 ; '.'
0000000000000f59         db  0x00 ; '.'
0000000000000f5a         db  0x00 ; '.'
0000000000000f5b         db  0x00 ; '.'
0000000000000f5c         db  0x00 ; '.'
0000000000000f5d         db  0x00 ; '.'
0000000000000f5e         db  0x00 ; '.'
0000000000000f5f         db  0x00 ; '.'
0000000000000f60         db  0x40 ; '@'
0000000000000f61         db  0x24 ; '$'
0000000000000f62         db  0x00 ; '.'
0000000000000f63         db  0x00 ; '.'
0000000000000f64         db  0x00 ; '.'
0000000000000f65         db  0x00 ; '.'
0000000000000f66         db  0x00 ; '.'
0000000000000f67         db  0x00 ; '.'
0000000000000f68         db  0x80 ; '.'
0000000000000f69         db  0xe9 ; '.'
0000000000000f6a         db  0x20 ; ' '
0000000000000f6b         db  0x00 ; '.'
0000000000000f6c         db  0x00 ; '.'
0000000000000f6d         db  0x00 ; '.'
0000000000000f6e         db  0x00 ; '.'
0000000000000f6f         db  0x00 ; '.'
0000000000000f70         db  0x08 ; '.'
0000000000000f71         db  0x00 ; '.'
0000000000000f72         db  0x00 ; '.'
0000000000000f73         db  0x00 ; '.'
0000000000000f74         db  0x00 ; '.'
0000000000000f75         db  0x00 ; '.'
0000000000000f76         db  0x00 ; '.'
0000000000000f77         db  0x00 ; '.'
0000000000000f78         db  0x7b ; '{'
0000000000000f79         db  0xab ; '.'
0000000000000f7a         db  0x00 ; '.'
0000000000000f7b         db  0x00 ; '.'
0000000000000f7c         db  0x00 ; '.'
0000000000000f7d         db  0x00 ; '.'
0000000000000f7e         db  0x00 ; '.'
0000000000000f7f         db  0x00 ; '.'
0000000000000f80         db  0xa0 ; '.'
0000000000000f81         db  0xe9 ; '.'
0000000000000f82         db  0x20 ; ' '
0000000000000f83         db  0x00 ; '.'
0000000000000f84         db  0x00 ; '.'
0000000000000f85         db  0x00 ; '.'
0000000000000f86         db  0x00 ; '.'
0000000000000f87         db  0x00 ; '.'
0000000000000f88         db  0x08 ; '.'
0000000000000f89         db  0x00 ; '.'
0000000000000f8a         db  0x00 ; '.'
0000000000000f8b         db  0x00 ; '.'
0000000000000f8c         db  0x00 ; '.'
0000000000000f8d         db  0x00 ; '.'
0000000000000f8e         db  0x00 ; '.'
0000000000000f8f         db  0x00 ; '.'
0000000000000f90         db  0x85 ; '.'
0000000000000f91         db  0xab ; '.'
0000000000000f92         db  0x00 ; '.'
0000000000000f93         db  0x00 ; '.'
0000000000000f94         db  0x00 ; '.'
0000000000000f95         db  0x00 ; '.'
0000000000000f96         db  0x00 ; '.'
0000000000000f97         db  0x00 ; '.'
0000000000000f98         db  0xc0 ; '.'
0000000000000f99         db  0xe9 ; '.'
0000000000000f9a         db  0x20 ; ' '
0000000000000f9b         db  0x00 ; '.'
0000000000000f9c         db  0x00 ; '.'
0000000000000f9d         db  0x00 ; '.'
0000000000000f9e         db  0x00 ; '.'
0000000000000f9f         db  0x00 ; '.'
0000000000000fa0         db  0x08 ; '.'
0000000000000fa1         db  0x00 ; '.'
0000000000000fa2         db  0x00 ; '.'
0000000000000fa3         db  0x00 ; '.'
0000000000000fa4         db  0x00 ; '.'
0000000000000fa5         db  0x00 ; '.'
0000000000000fa6         db  0x00 ; '.'
0000000000000fa7         db  0x00 ; '.'
0000000000000fa8         db  0x95 ; '.'
0000000000000fa9         db  0xab ; '.'
0000000000000faa         db  0x00 ; '.'
0000000000000fab         db  0x00 ; '.'
0000000000000fac         db  0x00 ; '.'
0000000000000fad         db  0x00 ; '.'
0000000000000fae         db  0x00 ; '.'
0000000000000faf         db  0x00 ; '.'
0000000000000fb0         db  0xe0 ; '.'
0000000000000fb1         db  0xe9 ; '.'
0000000000000fb2         db  0x20 ; ' '
0000000000000fb3         db  0x00 ; '.'
0000000000000fb4         db  0x00 ; '.'
0000000000000fb5         db  0x00 ; '.'
0000000000000fb6         db  0x00 ; '.'
0000000000000fb7         db  0x00 ; '.'
0000000000000fb8         db  0x08 ; '.'
0000000000000fb9         db  0x00 ; '.'
0000000000000fba         db  0x00 ; '.'
0000000000000fbb         db  0x00 ; '.'
0000000000000fbc         db  0x00 ; '.'
0000000000000fbd         db  0x00 ; '.'
0000000000000fbe         db  0x00 ; '.'
0000000000000fbf         db  0x00 ; '.'
0000000000000fc0         db  0x8d ; '.'
0000000000000fc1         db  0xab ; '.'
0000000000000fc2         db  0x00 ; '.'
0000000000000fc3         db  0x00 ; '.'
0000000000000fc4         db  0x00 ; '.'
0000000000000fc5         db  0x00 ; '.'
0000000000000fc6         db  0x00 ; '.'
0000000000000fc7         db  0x00 ; '.'
0000000000000fc8         db  0x00 ; '.'
0000000000000fc9         db  0xea ; '.'
0000000000000fca         db  0x20 ; ' '
0000000000000fcb         db  0x00 ; '.'
0000000000000fcc         db  0x00 ; '.'
0000000000000fcd         db  0x00 ; '.'
0000000000000fce         db  0x00 ; '.'
0000000000000fcf         db  0x00 ; '.'
0000000000000fd0         db  0x08 ; '.'
0000000000000fd1         db  0x00 ; '.'
0000000000000fd2         db  0x00 ; '.'
0000000000000fd3         db  0x00 ; '.'
0000000000000fd4         db  0x00 ; '.'
0000000000000fd5         db  0x00 ; '.'
0000000000000fd6         db  0x00 ; '.'
0000000000000fd7         db  0x00 ; '.'
0000000000000fd8         db  0x92 ; '.'
0000000000000fd9         db  0xab ; '.'
0000000000000fda         db  0x00 ; '.'
0000000000000fdb         db  0x00 ; '.'
0000000000000fdc         db  0x00 ; '.'
0000000000000fdd         db  0x00 ; '.'
0000000000000fde         db  0x00 ; '.'
0000000000000fdf         db  0x00 ; '.'
0000000000000fe0         db  0x20 ; ' '
0000000000000fe1         db  0xea ; '.'
0000000000000fe2         db  0x20 ; ' '
0000000000000fe3         db  0x00 ; '.'
0000000000000fe4         db  0x00 ; '.'
0000000000000fe5         db  0x00 ; '.'
0000000000000fe6         db  0x00 ; '.'
0000000000000fe7         db  0x00 ; '.'
0000000000000fe8         db  0x08 ; '.'
0000000000000fe9         db  0x00 ; '.'
0000000000000fea         db  0x00 ; '.'
0000000000000feb         db  0x00 ; '.'
0000000000000fec         db  0x00 ; '.'
0000000000000fed         db  0x00 ; '.'
0000000000000fee         db  0x00 ; '.'
0000000000000fef         db  0x00 ; '.'
0000000000000ff0         db  0xa1 ; '.'
0000000000000ff1         db  0xab ; '.'
0000000000000ff2         db  0x00 ; '.'
0000000000000ff3         db  0x00 ; '.'
0000000000000ff4         db  0x00 ; '.'
0000000000000ff5         db  0x00 ; '.'
0000000000000ff6         db  0x00 ; '.'
0000000000000ff7         db  0x00 ; '.'
0000000000000ff8         db  0x40 ; '@'
0000000000000ff9         db  0xea ; '.'
0000000000000ffa         db  0x20 ; ' '
0000000000000ffb         db  0x00 ; '.'
0000000000000ffc         db  0x00 ; '.'
0000000000000ffd         db  0x00 ; '.'
0000000000000ffe         db  0x00 ; '.'
0000000000000fff         db  0x00 ; '.'
0000000000001000         db  0x08 ; '.'                                         ; DATA XREF=rpl_fts_open+165, rpl_fts_open+170, rpl_fts_open+735, rpl_fts_children+80, rpl_fts_children+95
0000000000001001         db  0x00 ; '.'
0000000000001002         db  0x00 ; '.'
0000000000001003         db  0x00 ; '.'
0000000000001004         db  0x00 ; '.'
0000000000001005         db  0x00 ; '.'
0000000000001006         db  0x00 ; '.'
0000000000001007         db  0x00 ; '.'
0000000000001008         db  0xa4 ; '.'
0000000000001009         db  0xab ; '.'
000000000000100a         db  0x00 ; '.'
000000000000100b         db  0x00 ; '.'
000000000000100c         db  0x00 ; '.'
000000000000100d         db  0x00 ; '.'
000000000000100e         db  0x00 ; '.'
000000000000100f         db  0x00 ; '.'
0000000000001010         db  0x60 ; '`'
0000000000001011         db  0xea ; '.'
0000000000001012         db  0x20 ; ' '
0000000000001013         db  0x00 ; '.'
0000000000001014         db  0x00 ; '.'
0000000000001015         db  0x00 ; '.'
0000000000001016         db  0x00 ; '.'
0000000000001017         db  0x00 ; '.'
0000000000001018         db  0x08 ; '.'
0000000000001019         db  0x00 ; '.'
000000000000101a         db  0x00 ; '.'
000000000000101b         db  0x00 ; '.'
000000000000101c         db  0x00 ; '.'
000000000000101d         db  0x00 ; '.'
000000000000101e         db  0x00 ; '.'
000000000000101f         db  0x00 ; '.'
0000000000001020         db  0xb2 ; '.'
0000000000001021         db  0xab ; '.'
0000000000001022         db  0x00 ; '.'
0000000000001023         db  0x00 ; '.'
0000000000001024         db  0x00 ; '.'
0000000000001025         db  0x00 ; '.'
0000000000001026         db  0x00 ; '.'
0000000000001027         db  0x00 ; '.'
0000000000001028         db  0x80 ; '.'
0000000000001029         db  0xea ; '.'
000000000000102a         db  0x20 ; ' '
000000000000102b         db  0x00 ; '.'
000000000000102c         db  0x00 ; '.'
000000000000102d         db  0x00 ; '.'
000000000000102e         db  0x00 ; '.'
000000000000102f         db  0x00 ; '.'
0000000000001030         db  0x08 ; '.'
0000000000001031         db  0x00 ; '.'
0000000000001032         db  0x00 ; '.'
0000000000001033         db  0x00 ; '.'
0000000000001034         db  0x00 ; '.'
0000000000001035         db  0x00 ; '.'
0000000000001036         db  0x00 ; '.'
0000000000001037         db  0x00 ; '.'
0000000000001038         db  0xb8 ; '.'
0000000000001039         db  0xab ; '.'
000000000000103a         db  0x00 ; '.'
000000000000103b         db  0x00 ; '.'
000000000000103c         db  0x00 ; '.'
000000000000103d         db  0x00 ; '.'
000000000000103e         db  0x00 ; '.'
000000000000103f         db  0x00 ; '.'
0000000000001040         db  0xa0 ; '.'
0000000000001041         db  0xea ; '.'
0000000000001042         db  0x20 ; ' '
0000000000001043         db  0x00 ; '.'
0000000000001044         db  0x00 ; '.'
0000000000001045         db  0x00 ; '.'
0000000000001046         db  0x00 ; '.'
0000000000001047         db  0x00 ; '.'
0000000000001048         db  0x08 ; '.'
0000000000001049         db  0x00 ; '.'
000000000000104a         db  0x00 ; '.'
000000000000104b         db  0x00 ; '.'
000000000000104c         db  0x00 ; '.'
000000000000104d         db  0x00 ; '.'
000000000000104e         db  0x00 ; '.'
000000000000104f         db  0x00 ; '.'
0000000000001050         db  0x97 ; '.'
0000000000001051         db  0xab ; '.'
0000000000001052         db  0x00 ; '.'
0000000000001053         db  0x00 ; '.'
0000000000001054         db  0x00 ; '.'
0000000000001055         db  0x00 ; '.'
0000000000001056         db  0x00 ; '.'
0000000000001057         db  0x00 ; '.'
0000000000001058         db  0xc0 ; '.'
0000000000001059         db  0xea ; '.'
000000000000105a         db  0x20 ; ' '
000000000000105b         db  0x00 ; '.'
000000000000105c         db  0x00 ; '.'
000000000000105d         db  0x00 ; '.'
000000000000105e         db  0x00 ; '.'
000000000000105f         db  0x00 ; '.'
0000000000001060         db  0x08 ; '.'
0000000000001061         db  0x00 ; '.'
0000000000001062         db  0x00 ; '.'
0000000000001063         db  0x00 ; '.'
0000000000001064         db  0x00 ; '.'
0000000000001065         db  0x00 ; '.'
0000000000001066         db  0x00 ; '.'
0000000000001067         db  0x00 ; '.'
0000000000001068         db  0xbf ; '.'
0000000000001069         db  0xab ; '.'
000000000000106a         db  0x00 ; '.'
000000000000106b         db  0x00 ; '.'
000000000000106c         db  0x00 ; '.'
000000000000106d         db  0x00 ; '.'
000000000000106e         db  0x00 ; '.'
000000000000106f         db  0x00 ; '.'
0000000000001070         db  0xe0 ; '.'
0000000000001071         db  0xea ; '.'
0000000000001072         db  0x20 ; ' '
0000000000001073         db  0x00 ; '.'
0000000000001074         db  0x00 ; '.'
0000000000001075         db  0x00 ; '.'
0000000000001076         db  0x00 ; '.'
0000000000001077         db  0x00 ; '.'
0000000000001078         db  0x08 ; '.'
0000000000001079         db  0x00 ; '.'
000000000000107a         db  0x00 ; '.'
000000000000107b         db  0x00 ; '.'
000000000000107c         db  0x00 ; '.'
000000000000107d         db  0x00 ; '.'
000000000000107e         db  0x00 ; '.'
000000000000107f         db  0x00 ; '.'
0000000000001080         db  0xc7 ; '.'
0000000000001081         db  0xab ; '.'
0000000000001082         db  0x00 ; '.'
0000000000001083         db  0x00 ; '.'
0000000000001084         db  0x00 ; '.'
0000000000001085         db  0x00 ; '.'
0000000000001086         db  0x00 ; '.'
0000000000001087         db  0x00 ; '.'
0000000000001088         db  0x00 ; '.'
0000000000001089         db  0xeb ; '.'
000000000000108a         db  0x20 ; ' '
000000000000108b         db  0x00 ; '.'
000000000000108c         db  0x00 ; '.'
000000000000108d         db  0x00 ; '.'
000000000000108e         db  0x00 ; '.'
000000000000108f         db  0x00 ; '.'
0000000000001090         db  0x08 ; '.'
0000000000001091         db  0x00 ; '.'
0000000000001092         db  0x00 ; '.'
0000000000001093         db  0x00 ; '.'
0000000000001094         db  0x00 ; '.'
0000000000001095         db  0x00 ; '.'
0000000000001096         db  0x00 ; '.'
0000000000001097         db  0x00 ; '.'
0000000000001098         db  0xcc ; '.'
0000000000001099         db  0xab ; '.'
000000000000109a         db  0x00 ; '.'
000000000000109b         db  0x00 ; '.'
000000000000109c         db  0x00 ; '.'
000000000000109d         db  0x00 ; '.'
000000000000109e         db  0x00 ; '.'
000000000000109f         db  0x00 ; '.'
00000000000010a0         db  0x40 ; '@'
00000000000010a1         db  0xeb ; '.'
00000000000010a2         db  0x20 ; ' '
00000000000010a3         db  0x00 ; '.'
00000000000010a4         db  0x00 ; '.'
00000000000010a5         db  0x00 ; '.'
00000000000010a6         db  0x00 ; '.'
00000000000010a7         db  0x00 ; '.'
00000000000010a8         db  0x08 ; '.'
00000000000010a9         db  0x00 ; '.'
00000000000010aa         db  0x00 ; '.'
00000000000010ab         db  0x00 ; '.'
00000000000010ac         db  0x00 ; '.'
00000000000010ad         db  0x00 ; '.'
00000000000010ae         db  0x00 ; '.'
00000000000010af         db  0x00 ; '.'
00000000000010b0         db  0x01 ; '.'
00000000000010b1         db  0xbb ; '.'
00000000000010b2         db  0x00 ; '.'
00000000000010b3         db  0x00 ; '.'
00000000000010b4         db  0x00 ; '.'
00000000000010b5         db  0x00 ; '.'
00000000000010b6         db  0x00 ; '.'
00000000000010b7         db  0x00 ; '.'
00000000000010b8         db  0x48 ; 'H'
00000000000010b9         db  0xeb ; '.'
00000000000010ba         db  0x20 ; ' '
00000000000010bb         db  0x00 ; '.'
00000000000010bc         db  0x00 ; '.'
00000000000010bd         db  0x00 ; '.'
00000000000010be         db  0x00 ; '.'
00000000000010bf         db  0x00 ; '.'
00000000000010c0         db  0x08 ; '.'
00000000000010c1         db  0x00 ; '.'
00000000000010c2         db  0x00 ; '.'
00000000000010c3         db  0x00 ; '.'
00000000000010c4         db  0x00 ; '.'
00000000000010c5         db  0x00 ; '.'
00000000000010c6         db  0x00 ; '.'
00000000000010c7         db  0x00 ; '.'
00000000000010c8         db  0x09 ; '.'
00000000000010c9         db  0xbb ; '.'
00000000000010ca         db  0x00 ; '.'
00000000000010cb         db  0x00 ; '.'
00000000000010cc         db  0x00 ; '.'
00000000000010cd         db  0x00 ; '.'
00000000000010ce         db  0x00 ; '.'
00000000000010cf         db  0x00 ; '.'
00000000000010d0         db  0x50 ; 'P'
00000000000010d1         db  0xeb ; '.'
00000000000010d2         db  0x20 ; ' '
00000000000010d3         db  0x00 ; '.'
00000000000010d4         db  0x00 ; '.'
00000000000010d5         db  0x00 ; '.'
00000000000010d6         db  0x00 ; '.'
00000000000010d7         db  0x00 ; '.'
00000000000010d8         db  0x08 ; '.'
00000000000010d9         db  0x00 ; '.'
00000000000010da         db  0x00 ; '.'
00000000000010db         db  0x00 ; '.'
00000000000010dc         db  0x00 ; '.'
00000000000010dd         db  0x00 ; '.'
00000000000010de         db  0x00 ; '.'
00000000000010df         db  0x00 ; '.'
00000000000010e0         db  0x0f ; '.'
00000000000010e1         db  0xbb ; '.'
00000000000010e2         db  0x00 ; '.'
00000000000010e3         db  0x00 ; '.'
00000000000010e4         db  0x00 ; '.'
00000000000010e5         db  0x00 ; '.'
00000000000010e6         db  0x00 ; '.'
00000000000010e7         db  0x00 ; '.'
00000000000010e8         db  0x58 ; 'X'
00000000000010e9         db  0xeb ; '.'
00000000000010ea         db  0x20 ; ' '
00000000000010eb         db  0x00 ; '.'
00000000000010ec         db  0x00 ; '.'
00000000000010ed         db  0x00 ; '.'
00000000000010ee         db  0x00 ; '.'
00000000000010ef         db  0x00 ; '.'
00000000000010f0         db  0x08 ; '.'
00000000000010f1         db  0x00 ; '.'
00000000000010f2         db  0x00 ; '.'
00000000000010f3         db  0x00 ; '.'
00000000000010f4         db  0x00 ; '.'
00000000000010f5         db  0x00 ; '.'
00000000000010f6         db  0x00 ; '.'
00000000000010f7         db  0x00 ; '.'
00000000000010f8         db  0x1c ; '.'
00000000000010f9         db  0xbb ; '.'
00000000000010fa         db  0x00 ; '.'
00000000000010fb         db  0x00 ; '.'
00000000000010fc         db  0x00 ; '.'
00000000000010fd         db  0x00 ; '.'
00000000000010fe         db  0x00 ; '.'
00000000000010ff         db  0x00 ; '.'
0000000000001100         db  0x60 ; '`'
0000000000001101         db  0xeb ; '.'
0000000000001102         db  0x20 ; ' '
0000000000001103         db  0x00 ; '.'
0000000000001104         db  0x00 ; '.'
0000000000001105         db  0x00 ; '.'
0000000000001106         db  0x00 ; '.'
0000000000001107         db  0x00 ; '.'
0000000000001108         db  0x08 ; '.'
0000000000001109         db  0x00 ; '.'
000000000000110a         db  0x00 ; '.'
000000000000110b         db  0x00 ; '.'
000000000000110c         db  0x00 ; '.'
000000000000110d         db  0x00 ; '.'
000000000000110e         db  0x00 ; '.'
000000000000110f         db  0x00 ; '.'
0000000000001110         db  0x29 ; ')'
0000000000001111         db  0xbb ; '.'
0000000000001112         db  0x00 ; '.'
0000000000001113         db  0x00 ; '.'
0000000000001114         db  0x00 ; '.'
0000000000001115         db  0x00 ; '.'
0000000000001116         db  0x00 ; '.'
0000000000001117         db  0x00 ; '.'
0000000000001118         db  0x68 ; 'h'
0000000000001119         db  0xeb ; '.'
000000000000111a         db  0x20 ; ' '
000000000000111b         db  0x00 ; '.'
000000000000111c         db  0x00 ; '.'
000000000000111d         db  0x00 ; '.'
000000000000111e         db  0x00 ; '.'
000000000000111f         db  0x00 ; '.'
0000000000001120         db  0x08 ; '.'
0000000000001121         db  0x00 ; '.'
0000000000001122         db  0x00 ; '.'
0000000000001123         db  0x00 ; '.'
0000000000001124         db  0x00 ; '.'
0000000000001125         db  0x00 ; '.'
0000000000001126         db  0x00 ; '.'
0000000000001127         db  0x00 ; '.'
0000000000001128         db  0x7b ; '{'
0000000000001129         db  0xc3 ; '.'
000000000000112a         db  0x00 ; '.'
000000000000112b         db  0x00 ; '.'
000000000000112c         db  0x00 ; '.'
000000000000112d         db  0x00 ; '.'
000000000000112e         db  0x00 ; '.'
000000000000112f         db  0x00 ; '.'
0000000000001130         db  0x70 ; 'p'
0000000000001131         db  0xeb ; '.'
0000000000001132         db  0x20 ; ' '
0000000000001133         db  0x00 ; '.'
0000000000001134         db  0x00 ; '.'
0000000000001135         db  0x00 ; '.'
0000000000001136         db  0x00 ; '.'
0000000000001137         db  0x00 ; '.'
0000000000001138         db  0x08 ; '.'
0000000000001139         db  0x00 ; '.'
000000000000113a         db  0x00 ; '.'
000000000000113b         db  0x00 ; '.'
000000000000113c         db  0x00 ; '.'
000000000000113d         db  0x00 ; '.'
000000000000113e         db  0x00 ; '.'
000000000000113f         db  0x00 ; '.'
0000000000001140         db  0x3d ; '='
0000000000001141         db  0xbb ; '.'
0000000000001142         db  0x00 ; '.'
0000000000001143         db  0x00 ; '.'
0000000000001144         db  0x00 ; '.'
0000000000001145         db  0x00 ; '.'
0000000000001146         db  0x00 ; '.'
0000000000001147         db  0x00 ; '.'
0000000000001148         db  0x78 ; 'x'
0000000000001149         db  0xeb ; '.'
000000000000114a         db  0x20 ; ' '
000000000000114b         db  0x00 ; '.'
000000000000114c         db  0x00 ; '.'
000000000000114d         db  0x00 ; '.'
000000000000114e         db  0x00 ; '.'
000000000000114f         db  0x00 ; '.'
0000000000001150         db  0x08 ; '.'
0000000000001151         db  0x00 ; '.'
0000000000001152         db  0x00 ; '.'
0000000000001153         db  0x00 ; '.'
0000000000001154         db  0x00 ; '.'
0000000000001155         db  0x00 ; '.'
0000000000001156         db  0x00 ; '.'
0000000000001157         db  0x00 ; '.'
0000000000001158         db  0x22 ; '"'
0000000000001159         db  0xbb ; '.'
000000000000115a         db  0x00 ; '.'
000000000000115b         db  0x00 ; '.'
000000000000115c         db  0x00 ; '.'
000000000000115d         db  0x00 ; '.'
000000000000115e         db  0x00 ; '.'
000000000000115f         db  0x00 ; '.'
0000000000001160         db  0x80 ; '.'
0000000000001161         db  0xeb ; '.'
0000000000001162         db  0x20 ; ' '
0000000000001163         db  0x00 ; '.'
0000000000001164         db  0x00 ; '.'
0000000000001165         db  0x00 ; '.'
0000000000001166         db  0x00 ; '.'
0000000000001167         db  0x00 ; '.'
0000000000001168         db  0x08 ; '.'
0000000000001169         db  0x00 ; '.'
000000000000116a         db  0x00 ; '.'
000000000000116b         db  0x00 ; '.'
000000000000116c         db  0x00 ; '.'
000000000000116d         db  0x00 ; '.'
000000000000116e         db  0x00 ; '.'
000000000000116f         db  0x00 ; '.'
0000000000001170         db  0x1e ; '.'
0000000000001171         db  0xab ; '.'
0000000000001172         db  0x00 ; '.'
0000000000001173         db  0x00 ; '.'
0000000000001174         db  0x00 ; '.'
0000000000001175         db  0x00 ; '.'
0000000000001176         db  0x00 ; '.'
0000000000001177         db  0x00 ; '.'
0000000000001178         db  0x88 ; '.'
0000000000001179         db  0xeb ; '.'
000000000000117a         db  0x20 ; ' '
000000000000117b         db  0x00 ; '.'
000000000000117c         db  0x00 ; '.'
000000000000117d         db  0x00 ; '.'
000000000000117e         db  0x00 ; '.'
000000000000117f         db  0x00 ; '.'
0000000000001180         db  0x08 ; '.'
0000000000001181         db  0x00 ; '.'
0000000000001182         db  0x00 ; '.'
0000000000001183         db  0x00 ; '.'
0000000000001184         db  0x00 ; '.'
0000000000001185         db  0x00 ; '.'
0000000000001186         db  0x00 ; '.'
0000000000001187         db  0x00 ; '.'
0000000000001188         db  0x45 ; 'E'
0000000000001189         db  0xbb ; '.'
000000000000118a         db  0x00 ; '.'
000000000000118b         db  0x00 ; '.'
000000000000118c         db  0x00 ; '.'
000000000000118d         db  0x00 ; '.'
000000000000118e         db  0x00 ; '.'
000000000000118f         db  0x00 ; '.'
0000000000001190         db  0x08 ; '.'
0000000000001191         db  0xf0 ; '.'
0000000000001192         db  0x20 ; ' '
0000000000001193         db  0x00 ; '.'
0000000000001194         db  0x00 ; '.'
0000000000001195         db  0x00 ; '.'
0000000000001196         db  0x00 ; '.'
0000000000001197         db  0x00 ; '.'
0000000000001198         db  0x08 ; '.'
0000000000001199         db  0x00 ; '.'
000000000000119a         db  0x00 ; '.'
000000000000119b         db  0x00 ; '.'
000000000000119c         db  0x00 ; '.'
000000000000119d         db  0x00 ; '.'
000000000000119e         db  0x00 ; '.'
000000000000119f         db  0x00 ; '.'
00000000000011a0         db  0x08 ; '.'
00000000000011a1         db  0xf0 ; '.'
00000000000011a2         db  0x20 ; ' '
00000000000011a3         db  0x00 ; '.'
00000000000011a4         db  0x00 ; '.'
00000000000011a5         db  0x00 ; '.'
00000000000011a6         db  0x00 ; '.'
00000000000011a7         db  0x00 ; '.'
00000000000011a8         db  0x10 ; '.'
00000000000011a9         db  0xf0 ; '.'
00000000000011aa         db  0x20 ; ' '
00000000000011ab         db  0x00 ; '.'
00000000000011ac         db  0x00 ; '.'
00000000000011ad         db  0x00 ; '.'
00000000000011ae         db  0x00 ; '.'
00000000000011af         db  0x00 ; '.'
00000000000011b0         db  0x08 ; '.'
00000000000011b1         db  0x00 ; '.'
00000000000011b2         db  0x00 ; '.'
00000000000011b3         db  0x00 ; '.'
00000000000011b4         db  0x00 ; '.'
00000000000011b5         db  0x00 ; '.'
00000000000011b6         db  0x00 ; '.'
00000000000011b7         db  0x00 ; '.'
00000000000011b8         db  0x94 ; '.'
00000000000011b9         db  0xba ; '.'
00000000000011ba         db  0x00 ; '.'
00000000000011bb         db  0x00 ; '.'
00000000000011bc         db  0x00 ; '.'
00000000000011bd         db  0x00 ; '.'
00000000000011be         db  0x00 ; '.'
00000000000011bf         db  0x00 ; '.'
00000000000011c0         db  0x60 ; '`'
00000000000011c1         db  0xf0 ; '.'
00000000000011c2         db  0x20 ; ' '
00000000000011c3         db  0x00 ; '.'
00000000000011c4         db  0x00 ; '.'
00000000000011c5         db  0x00 ; '.'
00000000000011c6         db  0x00 ; '.'
00000000000011c7         db  0x00 ; '.'
00000000000011c8         db  0x08 ; '.'
00000000000011c9         db  0x00 ; '.'
00000000000011ca         db  0x00 ; '.'
00000000000011cb         db  0x00 ; '.'
00000000000011cc         db  0x00 ; '.'
00000000000011cd         db  0x00 ; '.'
00000000000011ce         db  0x00 ; '.'
00000000000011cf         db  0x00 ; '.'
00000000000011d0         db  0x70 ; 'p'
00000000000011d1         db  0xf0 ; '.'
00000000000011d2         db  0x20 ; ' '
00000000000011d3         db  0x00 ; '.'
00000000000011d4         db  0x00 ; '.'
00000000000011d5         db  0x00 ; '.'
00000000000011d6         db  0x00 ; '.'
00000000000011d7         db  0x00 ; '.'
00000000000011d8         db  0x78 ; 'x'
00000000000011d9         db  0xf0 ; '.'
00000000000011da         db  0x20 ; ' '
00000000000011db         db  0x00 ; '.'
00000000000011dc         db  0x00 ; '.'
00000000000011dd         db  0x00 ; '.'
00000000000011de         db  0x00 ; '.'
00000000000011df         db  0x00 ; '.'
00000000000011e0         db  0x08 ; '.'
00000000000011e1         db  0x00 ; '.'
00000000000011e2         db  0x00 ; '.'
00000000000011e3         db  0x00 ; '.'
00000000000011e4         db  0x00 ; '.'
00000000000011e5         db  0x00 ; '.'
00000000000011e6         db  0x00 ; '.'
00000000000011e7         db  0x00 ; '.'
00000000000011e8         db  0x00 ; '.'
00000000000011e9         db  0xf1 ; '.'
00000000000011ea         db  0x20 ; ' '
00000000000011eb         db  0x00 ; '.'
00000000000011ec         db  0x00 ; '.'
00000000000011ed         db  0x00 ; '.'
00000000000011ee         db  0x00 ; '.'
00000000000011ef         db  0x00 ; '.'
00000000000011f0         db  0xc0 ; '.'
00000000000011f1         db  0xef ; '.'
00000000000011f2         db  0x20 ; ' '
00000000000011f3         db  0x00 ; '.'
00000000000011f4         db  0x00 ; '.'
00000000000011f5         db  0x00 ; '.'
00000000000011f6         db  0x00 ; '.'
00000000000011f7         db  0x00 ; '.'
00000000000011f8         db  0x06 ; '.'
00000000000011f9         db  0x00 ; '.'
00000000000011fa         db  0x00 ; '.'
00000000000011fb         db  0x00 ; '.'
00000000000011fc         db  0x02 ; '.'
00000000000011fd         db  0x00 ; '.'
00000000000011fe         db  0x00 ; '.'
00000000000011ff         db  0x00 ; '.'
0000000000001200         db  0x00 ; '.'
0000000000001201         db  0x00 ; '.'
0000000000001202         db  0x00 ; '.'
0000000000001203         db  0x00 ; '.'
0000000000001204         db  0x00 ; '.'
0000000000001205         db  0x00 ; '.'
0000000000001206         db  0x00 ; '.'
0000000000001207         db  0x00 ; '.'
0000000000001208         db  0xc8 ; '.'
0000000000001209         db  0xef ; '.'
000000000000120a         db  0x20 ; ' '
000000000000120b         db  0x00 ; '.'
000000000000120c         db  0x00 ; '.'
000000000000120d         db  0x00 ; '.'
000000000000120e         db  0x00 ; '.'
000000000000120f         db  0x00 ; '.'
0000000000001210         db  0x06 ; '.'
0000000000001211         db  0x00 ; '.'
0000000000001212         db  0x00 ; '.'
0000000000001213         db  0x00 ; '.'
0000000000001214         db  0x06 ; '.'
0000000000001215         db  0x00 ; '.'
0000000000001216         db  0x00 ; '.'
0000000000001217         db  0x00 ; '.'
0000000000001218         db  0x00 ; '.'
0000000000001219         db  0x00 ; '.'
000000000000121a         db  0x00 ; '.'
000000000000121b         db  0x00 ; '.'
000000000000121c         db  0x00 ; '.'
000000000000121d         db  0x00 ; '.'
000000000000121e         db  0x00 ; '.'
000000000000121f         db  0x00 ; '.'
0000000000001220         db  0xd0 ; '.'
0000000000001221         db  0xef ; '.'
0000000000001222         db  0x20 ; ' '
0000000000001223         db  0x00 ; '.'
0000000000001224         db  0x00 ; '.'
0000000000001225         db  0x00 ; '.'
0000000000001226         db  0x00 ; '.'
0000000000001227         db  0x00 ; '.'
0000000000001228         db  0x06 ; '.'
0000000000001229         db  0x00 ; '.'
000000000000122a         db  0x00 ; '.'
000000000000122b         db  0x00 ; '.'
000000000000122c         db  0x23 ; '#'
000000000000122d         db  0x00 ; '.'
000000000000122e         db  0x00 ; '.'
000000000000122f         db  0x00 ; '.'
0000000000001230         db  0x00 ; '.'
0000000000001231         db  0x00 ; '.'
0000000000001232         db  0x00 ; '.'
0000000000001233         db  0x00 ; '.'
0000000000001234         db  0x00 ; '.'
0000000000001235         db  0x00 ; '.'
0000000000001236         db  0x00 ; '.'
0000000000001237         db  0x00 ; '.'
0000000000001238         db  0xd8 ; '.'
0000000000001239         db  0xef ; '.'
000000000000123a         db  0x20 ; ' '
000000000000123b         db  0x00 ; '.'
000000000000123c         db  0x00 ; '.'
000000000000123d         db  0x00 ; '.'
000000000000123e         db  0x00 ; '.'
000000000000123f         db  0x00 ; '.'
0000000000001240         db  0x06 ; '.'
0000000000001241         db  0x00 ; '.'
0000000000001242         db  0x00 ; '.'
0000000000001243         db  0x00 ; '.'
0000000000001244         db  0x29 ; ')'
0000000000001245         db  0x00 ; '.'
0000000000001246         db  0x00 ; '.'
0000000000001247         db  0x00 ; '.'
0000000000001248         db  0x00 ; '.'
0000000000001249         db  0x00 ; '.'
000000000000124a         db  0x00 ; '.'
000000000000124b         db  0x00 ; '.'
000000000000124c         db  0x00 ; '.'
000000000000124d         db  0x00 ; '.'
000000000000124e         db  0x00 ; '.'
000000000000124f         db  0x00 ; '.'
0000000000001250         db  0xe0 ; '.'
0000000000001251         db  0xef ; '.'
0000000000001252         db  0x20 ; ' '
0000000000001253         db  0x00 ; '.'
0000000000001254         db  0x00 ; '.'
0000000000001255         db  0x00 ; '.'
0000000000001256         db  0x00 ; '.'
0000000000001257         db  0x00 ; '.'
0000000000001258         db  0x06 ; '.'
0000000000001259         db  0x00 ; '.'
000000000000125a         db  0x00 ; '.'
000000000000125b         db  0x00 ; '.'
000000000000125c         db  0x46 ; 'F'
000000000000125d         db  0x00 ; '.'
000000000000125e         db  0x00 ; '.'
000000000000125f         db  0x00 ; '.'
0000000000001260         db  0x00 ; '.'
0000000000001261         db  0x00 ; '.'
0000000000001262         db  0x00 ; '.'
0000000000001263         db  0x00 ; '.'
0000000000001264         db  0x00 ; '.'
0000000000001265         db  0x00 ; '.'
0000000000001266         db  0x00 ; '.'
0000000000001267         db  0x00 ; '.'
0000000000001268         db  0xe8 ; '.'
0000000000001269         db  0xef ; '.'
000000000000126a         db  0x20 ; ' '
000000000000126b         db  0x00 ; '.'
000000000000126c         db  0x00 ; '.'
000000000000126d         db  0x00 ; '.'
000000000000126e         db  0x00 ; '.'
000000000000126f         db  0x00 ; '.'
0000000000001270         db  0x06 ; '.'
0000000000001271         db  0x00 ; '.'
0000000000001272         db  0x00 ; '.'
0000000000001273         db  0x00 ; '.'
0000000000001274         db  0x49 ; 'I'
0000000000001275         db  0x00 ; '.'
0000000000001276         db  0x00 ; '.'
0000000000001277         db  0x00 ; '.'
0000000000001278         db  0x00 ; '.'
0000000000001279         db  0x00 ; '.'
000000000000127a         db  0x00 ; '.'
000000000000127b         db  0x00 ; '.'
000000000000127c         db  0x00 ; '.'
000000000000127d         db  0x00 ; '.'
000000000000127e         db  0x00 ; '.'
000000000000127f         db  0x00 ; '.'
0000000000001280         db  0x80 ; '.'
0000000000001281         db  0xf0 ; '.'
0000000000001282         db  0x20 ; ' '
0000000000001283         db  0x00 ; '.'
0000000000001284         db  0x00 ; '.'
0000000000001285         db  0x00 ; '.'
0000000000001286         db  0x00 ; '.'
0000000000001287         db  0x00 ; '.'
0000000000001288         db  0x05 ; '.'
0000000000001289         db  0x00 ; '.'
000000000000128a         db  0x00 ; '.'
000000000000128b         db  0x00 ; '.'
000000000000128c         db  0x4c ; 'L'
000000000000128d         db  0x00 ; '.'
000000000000128e         db  0x00 ; '.'
000000000000128f         db  0x00 ; '.'
0000000000001290         db  0x00 ; '.'
0000000000001291         db  0x00 ; '.'
0000000000001292         db  0x00 ; '.'
0000000000001293         db  0x00 ; '.'
0000000000001294         db  0x00 ; '.'
0000000000001295         db  0x00 ; '.'
0000000000001296         db  0x00 ; '.'
0000000000001297         db  0x00 ; '.'
0000000000001298         db  0x88 ; '.'
0000000000001299         db  0xf0 ; '.'
000000000000129a         db  0x20 ; ' '
000000000000129b         db  0x00 ; '.'
000000000000129c         db  0x00 ; '.'
000000000000129d         db  0x00 ; '.'
000000000000129e         db  0x00 ; '.'
000000000000129f         db  0x00 ; '.'
00000000000012a0         db  0x05 ; '.'
00000000000012a1         db  0x00 ; '.'
00000000000012a2         db  0x00 ; '.'
00000000000012a3         db  0x00 ; '.'
00000000000012a4         db  0x4b ; 'K'
00000000000012a5         db  0x00 ; '.'
00000000000012a6         db  0x00 ; '.'
00000000000012a7         db  0x00 ; '.'
00000000000012a8         db  0x00 ; '.'
00000000000012a9         db  0x00 ; '.'
00000000000012aa         db  0x00 ; '.'
00000000000012ab         db  0x00 ; '.'
00000000000012ac         db  0x00 ; '.'
00000000000012ad         db  0x00 ; '.'
00000000000012ae         db  0x00 ; '.'
00000000000012af         db  0x00 ; '.'
00000000000012b0         db  0x90 ; '.'
00000000000012b1         db  0xf0 ; '.'
00000000000012b2         db  0x20 ; ' '
00000000000012b3         db  0x00 ; '.'
00000000000012b4         db  0x00 ; '.'
00000000000012b5         db  0x00 ; '.'
00000000000012b6         db  0x00 ; '.'
00000000000012b7         db  0x00 ; '.'
00000000000012b8         db  0x05 ; '.'
00000000000012b9         db  0x00 ; '.'
00000000000012ba         db  0x00 ; '.'
00000000000012bb         db  0x00 ; '.'
00000000000012bc         db  0x51 ; 'Q'
00000000000012bd         db  0x00 ; '.'
00000000000012be         db  0x00 ; '.'
00000000000012bf         db  0x00 ; '.'
00000000000012c0         db  0x00 ; '.'
00000000000012c1         db  0x00 ; '.'
00000000000012c2         db  0x00 ; '.'
00000000000012c3         db  0x00 ; '.'
00000000000012c4         db  0x00 ; '.'
00000000000012c5         db  0x00 ; '.'
00000000000012c6         db  0x00 ; '.'
00000000000012c7         db  0x00 ; '.'
00000000000012c8         db  0x98 ; '.'
00000000000012c9         db  0xf0 ; '.'
00000000000012ca         db  0x20 ; ' '
00000000000012cb         db  0x00 ; '.'
00000000000012cc         db  0x00 ; '.'
00000000000012cd         db  0x00 ; '.'
00000000000012ce         db  0x00 ; '.'
00000000000012cf         db  0x00 ; '.'
00000000000012d0         db  0x05 ; '.'
00000000000012d1         db  0x00 ; '.'
00000000000012d2         db  0x00 ; '.'
00000000000012d3         db  0x00 ; '.'
00000000000012d4         db  0x52 ; 'R'
00000000000012d5         db  0x00 ; '.'
00000000000012d6         db  0x00 ; '.'
00000000000012d7         db  0x00 ; '.'
00000000000012d8         db  0x00 ; '.'
00000000000012d9         db  0x00 ; '.'
00000000000012da         db  0x00 ; '.'
00000000000012db         db  0x00 ; '.'
00000000000012dc         db  0x00 ; '.'
00000000000012dd         db  0x00 ; '.'
00000000000012de         db  0x00 ; '.'
00000000000012df         db  0x00 ; '.'
00000000000012e0         db  0xa0 ; '.'
00000000000012e1         db  0xf0 ; '.'
00000000000012e2         db  0x20 ; ' '
00000000000012e3         db  0x00 ; '.'
00000000000012e4         db  0x00 ; '.'
00000000000012e5         db  0x00 ; '.'
00000000000012e6         db  0x00 ; '.'
00000000000012e7         db  0x00 ; '.'
00000000000012e8         db  0x05 ; '.'
00000000000012e9         db  0x00 ; '.'
00000000000012ea         db  0x00 ; '.'
00000000000012eb         db  0x00 ; '.'
00000000000012ec         db  0x4e ; 'N'
00000000000012ed         db  0x00 ; '.'
00000000000012ee         db  0x00 ; '.'
00000000000012ef         db  0x00 ; '.'
00000000000012f0         db  0x00 ; '.'
00000000000012f1         db  0x00 ; '.'
00000000000012f2         db  0x00 ; '.'
00000000000012f3         db  0x00 ; '.'
00000000000012f4         db  0x00 ; '.'
00000000000012f5         db  0x00 ; '.'
00000000000012f6         db  0x00 ; '.'
00000000000012f7         db  0x00 ; '.'
00000000000012f8         db  0xc0 ; '.'
00000000000012f9         db  0xf0 ; '.'
00000000000012fa         db  0x20 ; ' '
00000000000012fb         db  0x00 ; '.'
00000000000012fc         db  0x00 ; '.'
00000000000012fd         db  0x00 ; '.'
00000000000012fe         db  0x00 ; '.'
00000000000012ff         db  0x00 ; '.'
0000000000001300         db  0x05 ; '.'
0000000000001301         db  0x00 ; '.'
0000000000001302         db  0x00 ; '.'
0000000000001303         db  0x00 ; '.'
0000000000001304         db  0x50 ; 'P'
0000000000001305         db  0x00 ; '.'
0000000000001306         db  0x00 ; '.'
0000000000001307         db  0x00 ; '.'
0000000000001308         db  0x00 ; '.'
0000000000001309         db  0x00 ; '.'
000000000000130a         db  0x00 ; '.'
000000000000130b         db  0x00 ; '.'
000000000000130c         db  0x00 ; '.'
000000000000130d         db  0x00 ; '.'
000000000000130e         db  0x00 ; '.'
000000000000130f         db  0x00 ; '.'


        ; Section .rela.plt
        ; Range: [0x1310; 0x1970[ (1632 bytes)
        ; File offset : [4880; 6512[ (1632 bytes)
        ; Flags: 0x42
        ;   SHT_RELA
        ;   SHF_ALLOC

0000000000001310         db  0xa0 ; '.'
0000000000001311         db  0xed ; '.'
0000000000001312         db  0x20 ; ' '
0000000000001313         db  0x00 ; '.'
0000000000001314         db  0x00 ; '.'
0000000000001315         db  0x00 ; '.'
0000000000001316         db  0x00 ; '.'
0000000000001317         db  0x00 ; '.'
0000000000001318         db  0x07 ; '.'
0000000000001319         db  0x00 ; '.'
000000000000131a         db  0x00 ; '.'
000000000000131b         db  0x00 ; '.'
000000000000131c         db  0x01 ; '.'
000000000000131d         db  0x00 ; '.'
000000000000131e         db  0x00 ; '.'
000000000000131f         db  0x00 ; '.'
0000000000001320         db  0x00 ; '.'
0000000000001321         db  0x00 ; '.'
0000000000001322         db  0x00 ; '.'
0000000000001323         db  0x00 ; '.'
0000000000001324         db  0x00 ; '.'
0000000000001325         db  0x00 ; '.'
0000000000001326         db  0x00 ; '.'
0000000000001327         db  0x00 ; '.'
0000000000001328         db  0xa8 ; '.'
0000000000001329         db  0xed ; '.'
000000000000132a         db  0x20 ; ' '
000000000000132b         db  0x00 ; '.'
000000000000132c         db  0x00 ; '.'
000000000000132d         db  0x00 ; '.'
000000000000132e         db  0x00 ; '.'
000000000000132f         db  0x00 ; '.'
0000000000001330         db  0x07 ; '.'
0000000000001331         db  0x00 ; '.'
0000000000001332         db  0x00 ; '.'
0000000000001333         db  0x00 ; '.'
0000000000001334         db  0x03 ; '.'
0000000000001335         db  0x00 ; '.'
0000000000001336         db  0x00 ; '.'
0000000000001337         db  0x00 ; '.'
0000000000001338         db  0x00 ; '.'
0000000000001339         db  0x00 ; '.'
000000000000133a         db  0x00 ; '.'
000000000000133b         db  0x00 ; '.'
000000000000133c         db  0x00 ; '.'
000000000000133d         db  0x00 ; '.'
000000000000133e         db  0x00 ; '.'
000000000000133f         db  0x00 ; '.'
0000000000001340         db  0xb0 ; '.'
0000000000001341         db  0xed ; '.'
0000000000001342         db  0x20 ; ' '
0000000000001343         db  0x00 ; '.'
0000000000001344         db  0x00 ; '.'
0000000000001345         db  0x00 ; '.'
0000000000001346         db  0x00 ; '.'
0000000000001347         db  0x00 ; '.'
0000000000001348         db  0x07 ; '.'
0000000000001349         db  0x00 ; '.'
000000000000134a         db  0x00 ; '.'
000000000000134b         db  0x00 ; '.'
000000000000134c         db  0x04 ; '.'
000000000000134d         db  0x00 ; '.'
000000000000134e         db  0x00 ; '.'
000000000000134f         db  0x00 ; '.'
0000000000001350         db  0x00 ; '.'
0000000000001351         db  0x00 ; '.'
0000000000001352         db  0x00 ; '.'
0000000000001353         db  0x00 ; '.'
0000000000001354         db  0x00 ; '.'
0000000000001355         db  0x00 ; '.'
0000000000001356         db  0x00 ; '.'
0000000000001357         db  0x00 ; '.'
0000000000001358         db  0xb8 ; '.'
0000000000001359         db  0xed ; '.'
000000000000135a         db  0x20 ; ' '
000000000000135b         db  0x00 ; '.'
000000000000135c         db  0x00 ; '.'
000000000000135d         db  0x00 ; '.'
000000000000135e         db  0x00 ; '.'
000000000000135f         db  0x00 ; '.'
0000000000001360         db  0x07 ; '.'
0000000000001361         db  0x00 ; '.'
0000000000001362         db  0x00 ; '.'
0000000000001363         db  0x00 ; '.'
0000000000001364         db  0x05 ; '.'
0000000000001365         db  0x00 ; '.'
0000000000001366         db  0x00 ; '.'
0000000000001367         db  0x00 ; '.'
0000000000001368         db  0x00 ; '.'
0000000000001369         db  0x00 ; '.'
000000000000136a         db  0x00 ; '.'
000000000000136b         db  0x00 ; '.'
000000000000136c         db  0x00 ; '.'
000000000000136d         db  0x00 ; '.'
000000000000136e         db  0x00 ; '.'
000000000000136f         db  0x00 ; '.'
0000000000001370         db  0xc0 ; '.'
0000000000001371         db  0xed ; '.'
0000000000001372         db  0x20 ; ' '
0000000000001373         db  0x00 ; '.'
0000000000001374         db  0x00 ; '.'
0000000000001375         db  0x00 ; '.'
0000000000001376         db  0x00 ; '.'
0000000000001377         db  0x00 ; '.'
0000000000001378         db  0x07 ; '.'
0000000000001379         db  0x00 ; '.'
000000000000137a         db  0x00 ; '.'
000000000000137b         db  0x00 ; '.'
000000000000137c         db  0x07 ; '.'
000000000000137d         db  0x00 ; '.'
000000000000137e         db  0x00 ; '.'
000000000000137f         db  0x00 ; '.'
0000000000001380         db  0x00 ; '.'
0000000000001381         db  0x00 ; '.'
0000000000001382         db  0x00 ; '.'
0000000000001383         db  0x00 ; '.'
0000000000001384         db  0x00 ; '.'
0000000000001385         db  0x00 ; '.'
0000000000001386         db  0x00 ; '.'
0000000000001387         db  0x00 ; '.'
0000000000001388         db  0xc8 ; '.'
0000000000001389         db  0xed ; '.'
000000000000138a         db  0x20 ; ' '
000000000000138b         db  0x00 ; '.'
000000000000138c         db  0x00 ; '.'
000000000000138d         db  0x00 ; '.'
000000000000138e         db  0x00 ; '.'
000000000000138f         db  0x00 ; '.'
0000000000001390         db  0x07 ; '.'
0000000000001391         db  0x00 ; '.'
0000000000001392         db  0x00 ; '.'
0000000000001393         db  0x00 ; '.'
0000000000001394         db  0x08 ; '.'
0000000000001395         db  0x00 ; '.'
0000000000001396         db  0x00 ; '.'
0000000000001397         db  0x00 ; '.'
0000000000001398         db  0x00 ; '.'
0000000000001399         db  0x00 ; '.'
000000000000139a         db  0x00 ; '.'
000000000000139b         db  0x00 ; '.'
000000000000139c         db  0x00 ; '.'
000000000000139d         db  0x00 ; '.'
000000000000139e         db  0x00 ; '.'
000000000000139f         db  0x00 ; '.'
00000000000013a0         db  0xd0 ; '.'
00000000000013a1         db  0xed ; '.'
00000000000013a2         db  0x20 ; ' '
00000000000013a3         db  0x00 ; '.'
00000000000013a4         db  0x00 ; '.'
00000000000013a5         db  0x00 ; '.'
00000000000013a6         db  0x00 ; '.'
00000000000013a7         db  0x00 ; '.'
00000000000013a8         db  0x07 ; '.'
00000000000013a9         db  0x00 ; '.'
00000000000013aa         db  0x00 ; '.'
00000000000013ab         db  0x00 ; '.'
00000000000013ac         db  0x09 ; '.'
00000000000013ad         db  0x00 ; '.'
00000000000013ae         db  0x00 ; '.'
00000000000013af         db  0x00 ; '.'
00000000000013b0         db  0x00 ; '.'
00000000000013b1         db  0x00 ; '.'
00000000000013b2         db  0x00 ; '.'
00000000000013b3         db  0x00 ; '.'
00000000000013b4         db  0x00 ; '.'
00000000000013b5         db  0x00 ; '.'
00000000000013b6         db  0x00 ; '.'
00000000000013b7         db  0x00 ; '.'
00000000000013b8         db  0xd8 ; '.'
00000000000013b9         db  0xed ; '.'
00000000000013ba         db  0x20 ; ' '
00000000000013bb         db  0x00 ; '.'
00000000000013bc         db  0x00 ; '.'
00000000000013bd         db  0x00 ; '.'
00000000000013be         db  0x00 ; '.'
00000000000013bf         db  0x00 ; '.'
00000000000013c0         db  0x07 ; '.'
00000000000013c1         db  0x00 ; '.'
00000000000013c2         db  0x00 ; '.'
00000000000013c3         db  0x00 ; '.'
00000000000013c4         db  0x0a ; '.'
00000000000013c5         db  0x00 ; '.'
00000000000013c6         db  0x00 ; '.'
00000000000013c7         db  0x00 ; '.'
00000000000013c8         db  0x00 ; '.'
00000000000013c9         db  0x00 ; '.'
00000000000013ca         db  0x00 ; '.'
00000000000013cb         db  0x00 ; '.'
00000000000013cc         db  0x00 ; '.'
00000000000013cd         db  0x00 ; '.'
00000000000013ce         db  0x00 ; '.'
00000000000013cf         db  0x00 ; '.'
00000000000013d0         db  0xe0 ; '.'
00000000000013d1         db  0xed ; '.'
00000000000013d2         db  0x20 ; ' '
00000000000013d3         db  0x00 ; '.'
00000000000013d4         db  0x00 ; '.'
00000000000013d5         db  0x00 ; '.'
00000000000013d6         db  0x00 ; '.'
00000000000013d7         db  0x00 ; '.'
00000000000013d8         db  0x07 ; '.'
00000000000013d9         db  0x00 ; '.'
00000000000013da         db  0x00 ; '.'
00000000000013db         db  0x00 ; '.'
00000000000013dc         db  0x0b ; '.'
00000000000013dd         db  0x00 ; '.'
00000000000013de         db  0x00 ; '.'
00000000000013df         db  0x00 ; '.'
00000000000013e0         db  0x00 ; '.'
00000000000013e1         db  0x00 ; '.'
00000000000013e2         db  0x00 ; '.'
00000000000013e3         db  0x00 ; '.'
00000000000013e4         db  0x00 ; '.'
00000000000013e5         db  0x00 ; '.'
00000000000013e6         db  0x00 ; '.'
00000000000013e7         db  0x00 ; '.'
00000000000013e8         db  0xe8 ; '.'
00000000000013e9         db  0xed ; '.'
00000000000013ea         db  0x20 ; ' '
00000000000013eb         db  0x00 ; '.'
00000000000013ec         db  0x00 ; '.'
00000000000013ed         db  0x00 ; '.'
00000000000013ee         db  0x00 ; '.'
00000000000013ef         db  0x00 ; '.'
00000000000013f0         db  0x07 ; '.'
00000000000013f1         db  0x00 ; '.'
00000000000013f2         db  0x00 ; '.'
00000000000013f3         db  0x00 ; '.'
00000000000013f4         db  0x0c ; '.'
00000000000013f5         db  0x00 ; '.'
00000000000013f6         db  0x00 ; '.'
00000000000013f7         db  0x00 ; '.'
00000000000013f8         db  0x00 ; '.'
00000000000013f9         db  0x00 ; '.'
00000000000013fa         db  0x00 ; '.'
00000000000013fb         db  0x00 ; '.'
00000000000013fc         db  0x00 ; '.'
00000000000013fd         db  0x00 ; '.'
00000000000013fe         db  0x00 ; '.'
00000000000013ff         db  0x00 ; '.'
0000000000001400         db  0xf0 ; '.'
0000000000001401         db  0xed ; '.'
0000000000001402         db  0x20 ; ' '
0000000000001403         db  0x00 ; '.'
0000000000001404         db  0x00 ; '.'
0000000000001405         db  0x00 ; '.'
0000000000001406         db  0x00 ; '.'
0000000000001407         db  0x00 ; '.'
0000000000001408         db  0x07 ; '.'
0000000000001409         db  0x00 ; '.'
000000000000140a         db  0x00 ; '.'
000000000000140b         db  0x00 ; '.'
000000000000140c         db  0x0d ; '.'
000000000000140d         db  0x00 ; '.'
000000000000140e         db  0x00 ; '.'
000000000000140f         db  0x00 ; '.'
0000000000001410         db  0x00 ; '.'
0000000000001411         db  0x00 ; '.'
0000000000001412         db  0x00 ; '.'
0000000000001413         db  0x00 ; '.'
0000000000001414         db  0x00 ; '.'
0000000000001415         db  0x00 ; '.'
0000000000001416         db  0x00 ; '.'
0000000000001417         db  0x00 ; '.'
0000000000001418         db  0xf8 ; '.'
0000000000001419         db  0xed ; '.'
000000000000141a         db  0x20 ; ' '
000000000000141b         db  0x00 ; '.'
000000000000141c         db  0x00 ; '.'
000000000000141d         db  0x00 ; '.'
000000000000141e         db  0x00 ; '.'
000000000000141f         db  0x00 ; '.'
0000000000001420         db  0x07 ; '.'
0000000000001421         db  0x00 ; '.'
0000000000001422         db  0x00 ; '.'
0000000000001423         db  0x00 ; '.'
0000000000001424         db  0x0e ; '.'
0000000000001425         db  0x00 ; '.'
0000000000001426         db  0x00 ; '.'
0000000000001427         db  0x00 ; '.'
0000000000001428         db  0x00 ; '.'
0000000000001429         db  0x00 ; '.'
000000000000142a         db  0x00 ; '.'
000000000000142b         db  0x00 ; '.'
000000000000142c         db  0x00 ; '.'
000000000000142d         db  0x00 ; '.'
000000000000142e         db  0x00 ; '.'
000000000000142f         db  0x00 ; '.'
0000000000001430         db  0x00 ; '.'
0000000000001431         db  0xee ; '.'
0000000000001432         db  0x20 ; ' '
0000000000001433         db  0x00 ; '.'
0000000000001434         db  0x00 ; '.'
0000000000001435         db  0x00 ; '.'
0000000000001436         db  0x00 ; '.'
0000000000001437         db  0x00 ; '.'
0000000000001438         db  0x07 ; '.'
0000000000001439         db  0x00 ; '.'
000000000000143a         db  0x00 ; '.'
000000000000143b         db  0x00 ; '.'
000000000000143c         db  0x0f ; '.'
000000000000143d         db  0x00 ; '.'
000000000000143e         db  0x00 ; '.'
000000000000143f         db  0x00 ; '.'
0000000000001440         db  0x00 ; '.'
0000000000001441         db  0x00 ; '.'
0000000000001442         db  0x00 ; '.'
0000000000001443         db  0x00 ; '.'
0000000000001444         db  0x00 ; '.'
0000000000001445         db  0x00 ; '.'
0000000000001446         db  0x00 ; '.'
0000000000001447         db  0x00 ; '.'
0000000000001448         db  0x08 ; '.'
0000000000001449         db  0xee ; '.'
000000000000144a         db  0x20 ; ' '
000000000000144b         db  0x00 ; '.'
000000000000144c         db  0x00 ; '.'
000000000000144d         db  0x00 ; '.'
000000000000144e         db  0x00 ; '.'
000000000000144f         db  0x00 ; '.'
0000000000001450         db  0x07 ; '.'
0000000000001451         db  0x00 ; '.'
0000000000001452         db  0x00 ; '.'
0000000000001453         db  0x00 ; '.'
0000000000001454         db  0x10 ; '.'
0000000000001455         db  0x00 ; '.'
0000000000001456         db  0x00 ; '.'
0000000000001457         db  0x00 ; '.'
0000000000001458         db  0x00 ; '.'
0000000000001459         db  0x00 ; '.'
000000000000145a         db  0x00 ; '.'
000000000000145b         db  0x00 ; '.'
000000000000145c         db  0x00 ; '.'
000000000000145d         db  0x00 ; '.'
000000000000145e         db  0x00 ; '.'
000000000000145f         db  0x00 ; '.'
0000000000001460         db  0x10 ; '.'
0000000000001461         db  0xee ; '.'
0000000000001462         db  0x20 ; ' '
0000000000001463         db  0x00 ; '.'
0000000000001464         db  0x00 ; '.'
0000000000001465         db  0x00 ; '.'
0000000000001466         db  0x00 ; '.'
0000000000001467         db  0x00 ; '.'
0000000000001468         db  0x07 ; '.'
0000000000001469         db  0x00 ; '.'
000000000000146a         db  0x00 ; '.'
000000000000146b         db  0x00 ; '.'
000000000000146c         db  0x11 ; '.'
000000000000146d         db  0x00 ; '.'
000000000000146e         db  0x00 ; '.'
000000000000146f         db  0x00 ; '.'
0000000000001470         db  0x00 ; '.'
0000000000001471         db  0x00 ; '.'
0000000000001472         db  0x00 ; '.'
0000000000001473         db  0x00 ; '.'
0000000000001474         db  0x00 ; '.'
0000000000001475         db  0x00 ; '.'
0000000000001476         db  0x00 ; '.'
0000000000001477         db  0x00 ; '.'
0000000000001478         db  0x18 ; '.'
0000000000001479         db  0xee ; '.'
000000000000147a         db  0x20 ; ' '
000000000000147b         db  0x00 ; '.'
000000000000147c         db  0x00 ; '.'
000000000000147d         db  0x00 ; '.'
000000000000147e         db  0x00 ; '.'
000000000000147f         db  0x00 ; '.'
0000000000001480         db  0x07 ; '.'
0000000000001481         db  0x00 ; '.'
0000000000001482         db  0x00 ; '.'
0000000000001483         db  0x00 ; '.'
0000000000001484         db  0x12 ; '.'
0000000000001485         db  0x00 ; '.'
0000000000001486         db  0x00 ; '.'
0000000000001487         db  0x00 ; '.'
0000000000001488         db  0x00 ; '.'
0000000000001489         db  0x00 ; '.'
000000000000148a         db  0x00 ; '.'
000000000000148b         db  0x00 ; '.'
000000000000148c         db  0x00 ; '.'
000000000000148d         db  0x00 ; '.'
000000000000148e         db  0x00 ; '.'
000000000000148f         db  0x00 ; '.'
0000000000001490         db  0x20 ; ' '
0000000000001491         db  0xee ; '.'
0000000000001492         db  0x20 ; ' '
0000000000001493         db  0x00 ; '.'
0000000000001494         db  0x00 ; '.'
0000000000001495         db  0x00 ; '.'
0000000000001496         db  0x00 ; '.'
0000000000001497         db  0x00 ; '.'
0000000000001498         db  0x07 ; '.'
0000000000001499         db  0x00 ; '.'
000000000000149a         db  0x00 ; '.'
000000000000149b         db  0x00 ; '.'
000000000000149c         db  0x13 ; '.'
000000000000149d         db  0x00 ; '.'
000000000000149e         db  0x00 ; '.'
000000000000149f         db  0x00 ; '.'
00000000000014a0         db  0x00 ; '.'
00000000000014a1         db  0x00 ; '.'
00000000000014a2         db  0x00 ; '.'
00000000000014a3         db  0x00 ; '.'
00000000000014a4         db  0x00 ; '.'
00000000000014a5         db  0x00 ; '.'
00000000000014a6         db  0x00 ; '.'
00000000000014a7         db  0x00 ; '.'
00000000000014a8         db  0x28 ; '('
00000000000014a9         db  0xee ; '.'
00000000000014aa         db  0x20 ; ' '
00000000000014ab         db  0x00 ; '.'
00000000000014ac         db  0x00 ; '.'
00000000000014ad         db  0x00 ; '.'
00000000000014ae         db  0x00 ; '.'
00000000000014af         db  0x00 ; '.'
00000000000014b0         db  0x07 ; '.'
00000000000014b1         db  0x00 ; '.'
00000000000014b2         db  0x00 ; '.'
00000000000014b3         db  0x00 ; '.'
00000000000014b4         db  0x14 ; '.'
00000000000014b5         db  0x00 ; '.'
00000000000014b6         db  0x00 ; '.'
00000000000014b7         db  0x00 ; '.'
00000000000014b8         db  0x00 ; '.'
00000000000014b9         db  0x00 ; '.'
00000000000014ba         db  0x00 ; '.'
00000000000014bb         db  0x00 ; '.'
00000000000014bc         db  0x00 ; '.'
00000000000014bd         db  0x00 ; '.'
00000000000014be         db  0x00 ; '.'
00000000000014bf         db  0x00 ; '.'
00000000000014c0         db  0x30 ; '0'
00000000000014c1         db  0xee ; '.'
00000000000014c2         db  0x20 ; ' '
00000000000014c3         db  0x00 ; '.'
00000000000014c4         db  0x00 ; '.'
00000000000014c5         db  0x00 ; '.'
00000000000014c6         db  0x00 ; '.'
00000000000014c7         db  0x00 ; '.'
00000000000014c8         db  0x07 ; '.'
00000000000014c9         db  0x00 ; '.'
00000000000014ca         db  0x00 ; '.'
00000000000014cb         db  0x00 ; '.'
00000000000014cc         db  0x15 ; '.'
00000000000014cd         db  0x00 ; '.'
00000000000014ce         db  0x00 ; '.'
00000000000014cf         db  0x00 ; '.'
00000000000014d0         db  0x00 ; '.'
00000000000014d1         db  0x00 ; '.'
00000000000014d2         db  0x00 ; '.'
00000000000014d3         db  0x00 ; '.'
00000000000014d4         db  0x00 ; '.'
00000000000014d5         db  0x00 ; '.'
00000000000014d6         db  0x00 ; '.'
00000000000014d7         db  0x00 ; '.'
00000000000014d8         db  0x38 ; '8'
00000000000014d9         db  0xee ; '.'
00000000000014da         db  0x20 ; ' '
00000000000014db         db  0x00 ; '.'
00000000000014dc         db  0x00 ; '.'
00000000000014dd         db  0x00 ; '.'
00000000000014de         db  0x00 ; '.'
00000000000014df         db  0x00 ; '.'
00000000000014e0         db  0x07 ; '.'
00000000000014e1         db  0x00 ; '.'
00000000000014e2         db  0x00 ; '.'
00000000000014e3         db  0x00 ; '.'
00000000000014e4         db  0x16 ; '.'
00000000000014e5         db  0x00 ; '.'
00000000000014e6         db  0x00 ; '.'
00000000000014e7         db  0x00 ; '.'
00000000000014e8         db  0x00 ; '.'
00000000000014e9         db  0x00 ; '.'
00000000000014ea         db  0x00 ; '.'
00000000000014eb         db  0x00 ; '.'
00000000000014ec         db  0x00 ; '.'
00000000000014ed         db  0x00 ; '.'
00000000000014ee         db  0x00 ; '.'
00000000000014ef         db  0x00 ; '.'
00000000000014f0         db  0x40 ; '@'
00000000000014f1         db  0xee ; '.'
00000000000014f2         db  0x20 ; ' '
00000000000014f3         db  0x00 ; '.'
00000000000014f4         db  0x00 ; '.'
00000000000014f5         db  0x00 ; '.'
00000000000014f6         db  0x00 ; '.'
00000000000014f7         db  0x00 ; '.'
00000000000014f8         db  0x07 ; '.'
00000000000014f9         db  0x00 ; '.'
00000000000014fa         db  0x00 ; '.'
00000000000014fb         db  0x00 ; '.'
00000000000014fc         db  0x17 ; '.'
00000000000014fd         db  0x00 ; '.'
00000000000014fe         db  0x00 ; '.'
00000000000014ff         db  0x00 ; '.'
0000000000001500         db  0x00 ; '.'
0000000000001501         db  0x00 ; '.'
0000000000001502         db  0x00 ; '.'
0000000000001503         db  0x00 ; '.'
0000000000001504         db  0x00 ; '.'
0000000000001505         db  0x00 ; '.'
0000000000001506         db  0x00 ; '.'
0000000000001507         db  0x00 ; '.'
0000000000001508         db  0x48 ; 'H'
0000000000001509         db  0xee ; '.'
000000000000150a         db  0x20 ; ' '
000000000000150b         db  0x00 ; '.'
000000000000150c         db  0x00 ; '.'
000000000000150d         db  0x00 ; '.'
000000000000150e         db  0x00 ; '.'
000000000000150f         db  0x00 ; '.'
0000000000001510         db  0x07 ; '.'
0000000000001511         db  0x00 ; '.'
0000000000001512         db  0x00 ; '.'
0000000000001513         db  0x00 ; '.'
0000000000001514         db  0x18 ; '.'
0000000000001515         db  0x00 ; '.'
0000000000001516         db  0x00 ; '.'
0000000000001517         db  0x00 ; '.'
0000000000001518         db  0x00 ; '.'
0000000000001519         db  0x00 ; '.'
000000000000151a         db  0x00 ; '.'
000000000000151b         db  0x00 ; '.'
000000000000151c         db  0x00 ; '.'
000000000000151d         db  0x00 ; '.'
000000000000151e         db  0x00 ; '.'
000000000000151f         db  0x00 ; '.'
0000000000001520         db  0x50 ; 'P'
0000000000001521         db  0xee ; '.'
0000000000001522         db  0x20 ; ' '
0000000000001523         db  0x00 ; '.'
0000000000001524         db  0x00 ; '.'
0000000000001525         db  0x00 ; '.'
0000000000001526         db  0x00 ; '.'
0000000000001527         db  0x00 ; '.'
0000000000001528         db  0x07 ; '.'
0000000000001529         db  0x00 ; '.'
000000000000152a         db  0x00 ; '.'
000000000000152b         db  0x00 ; '.'
000000000000152c         db  0x19 ; '.'
000000000000152d         db  0x00 ; '.'
000000000000152e         db  0x00 ; '.'
000000000000152f         db  0x00 ; '.'
0000000000001530         db  0x00 ; '.'
0000000000001531         db  0x00 ; '.'
0000000000001532         db  0x00 ; '.'
0000000000001533         db  0x00 ; '.'
0000000000001534         db  0x00 ; '.'
0000000000001535         db  0x00 ; '.'
0000000000001536         db  0x00 ; '.'
0000000000001537         db  0x00 ; '.'
0000000000001538         db  0x58 ; 'X'
0000000000001539         db  0xee ; '.'
000000000000153a         db  0x20 ; ' '
000000000000153b         db  0x00 ; '.'
000000000000153c         db  0x00 ; '.'
000000000000153d         db  0x00 ; '.'
000000000000153e         db  0x00 ; '.'
000000000000153f         db  0x00 ; '.'
0000000000001540         db  0x07 ; '.'
0000000000001541         db  0x00 ; '.'
0000000000001542         db  0x00 ; '.'
0000000000001543         db  0x00 ; '.'
0000000000001544         db  0x1a ; '.'
0000000000001545         db  0x00 ; '.'
0000000000001546         db  0x00 ; '.'
0000000000001547         db  0x00 ; '.'
0000000000001548         db  0x00 ; '.'
0000000000001549         db  0x00 ; '.'
000000000000154a         db  0x00 ; '.'
000000000000154b         db  0x00 ; '.'
000000000000154c         db  0x00 ; '.'
000000000000154d         db  0x00 ; '.'
000000000000154e         db  0x00 ; '.'
000000000000154f         db  0x00 ; '.'
0000000000001550         db  0x60 ; '`'
0000000000001551         db  0xee ; '.'
0000000000001552         db  0x20 ; ' '
0000000000001553         db  0x00 ; '.'
0000000000001554         db  0x00 ; '.'
0000000000001555         db  0x00 ; '.'
0000000000001556         db  0x00 ; '.'
0000000000001557         db  0x00 ; '.'
0000000000001558         db  0x07 ; '.'
0000000000001559         db  0x00 ; '.'
000000000000155a         db  0x00 ; '.'
000000000000155b         db  0x00 ; '.'
000000000000155c         db  0x1b ; '.'
000000000000155d         db  0x00 ; '.'
000000000000155e         db  0x00 ; '.'
000000000000155f         db  0x00 ; '.'
0000000000001560         db  0x00 ; '.'
0000000000001561         db  0x00 ; '.'
0000000000001562         db  0x00 ; '.'
0000000000001563         db  0x00 ; '.'
0000000000001564         db  0x00 ; '.'
0000000000001565         db  0x00 ; '.'
0000000000001566         db  0x00 ; '.'
0000000000001567         db  0x00 ; '.'
0000000000001568         db  0x68 ; 'h'
0000000000001569         db  0xee ; '.'
000000000000156a         db  0x20 ; ' '
000000000000156b         db  0x00 ; '.'
000000000000156c         db  0x00 ; '.'
000000000000156d         db  0x00 ; '.'
000000000000156e         db  0x00 ; '.'
000000000000156f         db  0x00 ; '.'
0000000000001570         db  0x07 ; '.'
0000000000001571         db  0x00 ; '.'
0000000000001572         db  0x00 ; '.'
0000000000001573         db  0x00 ; '.'
0000000000001574         db  0x1c ; '.'
0000000000001575         db  0x00 ; '.'
0000000000001576         db  0x00 ; '.'
0000000000001577         db  0x00 ; '.'
0000000000001578         db  0x00 ; '.'
0000000000001579         db  0x00 ; '.'
000000000000157a         db  0x00 ; '.'
000000000000157b         db  0x00 ; '.'
000000000000157c         db  0x00 ; '.'
000000000000157d         db  0x00 ; '.'
000000000000157e         db  0x00 ; '.'
000000000000157f         db  0x00 ; '.'
0000000000001580         db  0x70 ; 'p'
0000000000001581         db  0xee ; '.'
0000000000001582         db  0x20 ; ' '
0000000000001583         db  0x00 ; '.'
0000000000001584         db  0x00 ; '.'
0000000000001585         db  0x00 ; '.'
0000000000001586         db  0x00 ; '.'
0000000000001587         db  0x00 ; '.'
0000000000001588         db  0x07 ; '.'
0000000000001589         db  0x00 ; '.'
000000000000158a         db  0x00 ; '.'
000000000000158b         db  0x00 ; '.'
000000000000158c         db  0x1d ; '.'
000000000000158d         db  0x00 ; '.'
000000000000158e         db  0x00 ; '.'
000000000000158f         db  0x00 ; '.'
0000000000001590         db  0x00 ; '.'
0000000000001591         db  0x00 ; '.'
0000000000001592         db  0x00 ; '.'
0000000000001593         db  0x00 ; '.'
0000000000001594         db  0x00 ; '.'
0000000000001595         db  0x00 ; '.'
0000000000001596         db  0x00 ; '.'
0000000000001597         db  0x00 ; '.'
0000000000001598         db  0x78 ; 'x'
0000000000001599         db  0xee ; '.'
000000000000159a         db  0x20 ; ' '
000000000000159b         db  0x00 ; '.'
000000000000159c         db  0x00 ; '.'
000000000000159d         db  0x00 ; '.'
000000000000159e         db  0x00 ; '.'
000000000000159f         db  0x00 ; '.'
00000000000015a0         db  0x07 ; '.'
00000000000015a1         db  0x00 ; '.'
00000000000015a2         db  0x00 ; '.'
00000000000015a3         db  0x00 ; '.'
00000000000015a4         db  0x1e ; '.'
00000000000015a5         db  0x00 ; '.'
00000000000015a6         db  0x00 ; '.'
00000000000015a7         db  0x00 ; '.'
00000000000015a8         db  0x00 ; '.'
00000000000015a9         db  0x00 ; '.'
00000000000015aa         db  0x00 ; '.'
00000000000015ab         db  0x00 ; '.'
00000000000015ac         db  0x00 ; '.'
00000000000015ad         db  0x00 ; '.'
00000000000015ae         db  0x00 ; '.'
00000000000015af         db  0x00 ; '.'
00000000000015b0         db  0x80 ; '.'
00000000000015b1         db  0xee ; '.'
00000000000015b2         db  0x20 ; ' '
00000000000015b3         db  0x00 ; '.'
00000000000015b4         db  0x00 ; '.'
00000000000015b5         db  0x00 ; '.'
00000000000015b6         db  0x00 ; '.'
00000000000015b7         db  0x00 ; '.'
00000000000015b8         db  0x07 ; '.'
00000000000015b9         db  0x00 ; '.'
00000000000015ba         db  0x00 ; '.'
00000000000015bb         db  0x00 ; '.'
00000000000015bc         db  0x1f ; '.'
00000000000015bd         db  0x00 ; '.'
00000000000015be         db  0x00 ; '.'
00000000000015bf         db  0x00 ; '.'
00000000000015c0         db  0x00 ; '.'
00000000000015c1         db  0x00 ; '.'
00000000000015c2         db  0x00 ; '.'
00000000000015c3         db  0x00 ; '.'
00000000000015c4         db  0x00 ; '.'
00000000000015c5         db  0x00 ; '.'
00000000000015c6         db  0x00 ; '.'
00000000000015c7         db  0x00 ; '.'
00000000000015c8         db  0x88 ; '.'
00000000000015c9         db  0xee ; '.'
00000000000015ca         db  0x20 ; ' '
00000000000015cb         db  0x00 ; '.'
00000000000015cc         db  0x00 ; '.'
00000000000015cd         db  0x00 ; '.'
00000000000015ce         db  0x00 ; '.'
00000000000015cf         db  0x00 ; '.'
00000000000015d0         db  0x07 ; '.'
00000000000015d1         db  0x00 ; '.'
00000000000015d2         db  0x00 ; '.'
00000000000015d3         db  0x00 ; '.'
00000000000015d4         db  0x20 ; ' '
00000000000015d5         db  0x00 ; '.'
00000000000015d6         db  0x00 ; '.'
00000000000015d7         db  0x00 ; '.'
00000000000015d8         db  0x00 ; '.'
00000000000015d9         db  0x00 ; '.'
00000000000015da         db  0x00 ; '.'
00000000000015db         db  0x00 ; '.'
00000000000015dc         db  0x00 ; '.'
00000000000015dd         db  0x00 ; '.'
00000000000015de         db  0x00 ; '.'
00000000000015df         db  0x00 ; '.'
00000000000015e0         db  0x90 ; '.'
00000000000015e1         db  0xee ; '.'
00000000000015e2         db  0x20 ; ' '
00000000000015e3         db  0x00 ; '.'
00000000000015e4         db  0x00 ; '.'
00000000000015e5         db  0x00 ; '.'
00000000000015e6         db  0x00 ; '.'
00000000000015e7         db  0x00 ; '.'
00000000000015e8         db  0x07 ; '.'
00000000000015e9         db  0x00 ; '.'
00000000000015ea         db  0x00 ; '.'
00000000000015eb         db  0x00 ; '.'
00000000000015ec         db  0x21 ; '!'
00000000000015ed         db  0x00 ; '.'
00000000000015ee         db  0x00 ; '.'
00000000000015ef         db  0x00 ; '.'
00000000000015f0         db  0x00 ; '.'
00000000000015f1         db  0x00 ; '.'
00000000000015f2         db  0x00 ; '.'
00000000000015f3         db  0x00 ; '.'
00000000000015f4         db  0x00 ; '.'
00000000000015f5         db  0x00 ; '.'
00000000000015f6         db  0x00 ; '.'
00000000000015f7         db  0x00 ; '.'
00000000000015f8         db  0x98 ; '.'
00000000000015f9         db  0xee ; '.'
00000000000015fa         db  0x20 ; ' '
00000000000015fb         db  0x00 ; '.'
00000000000015fc         db  0x00 ; '.'
00000000000015fd         db  0x00 ; '.'
00000000000015fe         db  0x00 ; '.'
00000000000015ff         db  0x00 ; '.'
0000000000001600         db  0x07 ; '.'
0000000000001601         db  0x00 ; '.'
0000000000001602         db  0x00 ; '.'
0000000000001603         db  0x00 ; '.'
0000000000001604         db  0x22 ; '"'
0000000000001605         db  0x00 ; '.'
0000000000001606         db  0x00 ; '.'
0000000000001607         db  0x00 ; '.'
0000000000001608         db  0x00 ; '.'
0000000000001609         db  0x00 ; '.'
000000000000160a         db  0x00 ; '.'
000000000000160b         db  0x00 ; '.'
000000000000160c         db  0x00 ; '.'
000000000000160d         db  0x00 ; '.'
000000000000160e         db  0x00 ; '.'
000000000000160f         db  0x00 ; '.'
0000000000001610         db  0xa0 ; '.'
0000000000001611         db  0xee ; '.'
0000000000001612         db  0x20 ; ' '
0000000000001613         db  0x00 ; '.'
0000000000001614         db  0x00 ; '.'
0000000000001615         db  0x00 ; '.'
0000000000001616         db  0x00 ; '.'
0000000000001617         db  0x00 ; '.'
0000000000001618         db  0x07 ; '.'
0000000000001619         db  0x00 ; '.'
000000000000161a         db  0x00 ; '.'
000000000000161b         db  0x00 ; '.'
000000000000161c         db  0x24 ; '$'
000000000000161d         db  0x00 ; '.'
000000000000161e         db  0x00 ; '.'
000000000000161f         db  0x00 ; '.'
0000000000001620         db  0x00 ; '.'
0000000000001621         db  0x00 ; '.'
0000000000001622         db  0x00 ; '.'
0000000000001623         db  0x00 ; '.'
0000000000001624         db  0x00 ; '.'
0000000000001625         db  0x00 ; '.'
0000000000001626         db  0x00 ; '.'
0000000000001627         db  0x00 ; '.'
0000000000001628         db  0xa8 ; '.'
0000000000001629         db  0xee ; '.'
000000000000162a         db  0x20 ; ' '
000000000000162b         db  0x00 ; '.'
000000000000162c         db  0x00 ; '.'
000000000000162d         db  0x00 ; '.'
000000000000162e         db  0x00 ; '.'
000000000000162f         db  0x00 ; '.'
0000000000001630         db  0x07 ; '.'
0000000000001631         db  0x00 ; '.'
0000000000001632         db  0x00 ; '.'
0000000000001633         db  0x00 ; '.'
0000000000001634         db  0x25 ; '%'
0000000000001635         db  0x00 ; '.'
0000000000001636         db  0x00 ; '.'
0000000000001637         db  0x00 ; '.'
0000000000001638         db  0x00 ; '.'
0000000000001639         db  0x00 ; '.'
000000000000163a         db  0x00 ; '.'
000000000000163b         db  0x00 ; '.'
000000000000163c         db  0x00 ; '.'
000000000000163d         db  0x00 ; '.'
000000000000163e         db  0x00 ; '.'
000000000000163f         db  0x00 ; '.'
0000000000001640         db  0xb0 ; '.'
0000000000001641         db  0xee ; '.'
0000000000001642         db  0x20 ; ' '
0000000000001643         db  0x00 ; '.'
0000000000001644         db  0x00 ; '.'
0000000000001645         db  0x00 ; '.'
0000000000001646         db  0x00 ; '.'
0000000000001647         db  0x00 ; '.'
0000000000001648         db  0x07 ; '.'
0000000000001649         db  0x00 ; '.'
000000000000164a         db  0x00 ; '.'
000000000000164b         db  0x00 ; '.'
000000000000164c         db  0x26 ; '&'
000000000000164d         db  0x00 ; '.'
000000000000164e         db  0x00 ; '.'
000000000000164f         db  0x00 ; '.'
0000000000001650         db  0x00 ; '.'
0000000000001651         db  0x00 ; '.'
0000000000001652         db  0x00 ; '.'
0000000000001653         db  0x00 ; '.'
0000000000001654         db  0x00 ; '.'
0000000000001655         db  0x00 ; '.'
0000000000001656         db  0x00 ; '.'
0000000000001657         db  0x00 ; '.'
0000000000001658         db  0xb8 ; '.'
0000000000001659         db  0xee ; '.'
000000000000165a         db  0x20 ; ' '
000000000000165b         db  0x00 ; '.'
000000000000165c         db  0x00 ; '.'
000000000000165d         db  0x00 ; '.'
000000000000165e         db  0x00 ; '.'
000000000000165f         db  0x00 ; '.'
0000000000001660         db  0x07 ; '.'
0000000000001661         db  0x00 ; '.'
0000000000001662         db  0x00 ; '.'
0000000000001663         db  0x00 ; '.'
0000000000001664         db  0x27 ; '''
0000000000001665         db  0x00 ; '.'
0000000000001666         db  0x00 ; '.'
0000000000001667         db  0x00 ; '.'
0000000000001668         db  0x00 ; '.'
0000000000001669         db  0x00 ; '.'
000000000000166a         db  0x00 ; '.'
000000000000166b         db  0x00 ; '.'
000000000000166c         db  0x00 ; '.'
000000000000166d         db  0x00 ; '.'
000000000000166e         db  0x00 ; '.'
000000000000166f         db  0x00 ; '.'
0000000000001670         db  0xc0 ; '.'
0000000000001671         db  0xee ; '.'
0000000000001672         db  0x20 ; ' '
0000000000001673         db  0x00 ; '.'
0000000000001674         db  0x00 ; '.'
0000000000001675         db  0x00 ; '.'
0000000000001676         db  0x00 ; '.'
0000000000001677         db  0x00 ; '.'
0000000000001678         db  0x07 ; '.'
0000000000001679         db  0x00 ; '.'
000000000000167a         db  0x00 ; '.'
000000000000167b         db  0x00 ; '.'
000000000000167c         db  0x28 ; '('
000000000000167d         db  0x00 ; '.'
000000000000167e         db  0x00 ; '.'
000000000000167f         db  0x00 ; '.'
0000000000001680         db  0x00 ; '.'
0000000000001681         db  0x00 ; '.'
0000000000001682         db  0x00 ; '.'
0000000000001683         db  0x00 ; '.'
0000000000001684         db  0x00 ; '.'
0000000000001685         db  0x00 ; '.'
0000000000001686         db  0x00 ; '.'
0000000000001687         db  0x00 ; '.'
0000000000001688         db  0xc8 ; '.'
0000000000001689         db  0xee ; '.'
000000000000168a         db  0x20 ; ' '
000000000000168b         db  0x00 ; '.'
000000000000168c         db  0x00 ; '.'
000000000000168d         db  0x00 ; '.'
000000000000168e         db  0x00 ; '.'
000000000000168f         db  0x00 ; '.'
0000000000001690         db  0x07 ; '.'
0000000000001691         db  0x00 ; '.'
0000000000001692         db  0x00 ; '.'
0000000000001693         db  0x00 ; '.'
0000000000001694         db  0x2a ; '*'
0000000000001695         db  0x00 ; '.'
0000000000001696         db  0x00 ; '.'
0000000000001697         db  0x00 ; '.'
0000000000001698         db  0x00 ; '.'
0000000000001699         db  0x00 ; '.'
000000000000169a         db  0x00 ; '.'
000000000000169b         db  0x00 ; '.'
000000000000169c         db  0x00 ; '.'
000000000000169d         db  0x00 ; '.'
000000000000169e         db  0x00 ; '.'
000000000000169f         db  0x00 ; '.'
00000000000016a0         db  0xd0 ; '.'
00000000000016a1         db  0xee ; '.'
00000000000016a2         db  0x20 ; ' '
00000000000016a3         db  0x00 ; '.'
00000000000016a4         db  0x00 ; '.'
00000000000016a5         db  0x00 ; '.'
00000000000016a6         db  0x00 ; '.'
00000000000016a7         db  0x00 ; '.'
00000000000016a8         db  0x07 ; '.'
00000000000016a9         db  0x00 ; '.'
00000000000016aa         db  0x00 ; '.'
00000000000016ab         db  0x00 ; '.'
00000000000016ac         db  0x2b ; '+'
00000000000016ad         db  0x00 ; '.'
00000000000016ae         db  0x00 ; '.'
00000000000016af         db  0x00 ; '.'
00000000000016b0         db  0x00 ; '.'
00000000000016b1         db  0x00 ; '.'
00000000000016b2         db  0x00 ; '.'
00000000000016b3         db  0x00 ; '.'
00000000000016b4         db  0x00 ; '.'
00000000000016b5         db  0x00 ; '.'
00000000000016b6         db  0x00 ; '.'
00000000000016b7         db  0x00 ; '.'
00000000000016b8         db  0xd8 ; '.'
00000000000016b9         db  0xee ; '.'
00000000000016ba         db  0x20 ; ' '
00000000000016bb         db  0x00 ; '.'
00000000000016bc         db  0x00 ; '.'
00000000000016bd         db  0x00 ; '.'
00000000000016be         db  0x00 ; '.'
00000000000016bf         db  0x00 ; '.'
00000000000016c0         db  0x07 ; '.'
00000000000016c1         db  0x00 ; '.'
00000000000016c2         db  0x00 ; '.'
00000000000016c3         db  0x00 ; '.'
00000000000016c4         db  0x2c ; ','
00000000000016c5         db  0x00 ; '.'
00000000000016c6         db  0x00 ; '.'
00000000000016c7         db  0x00 ; '.'
00000000000016c8         db  0x00 ; '.'
00000000000016c9         db  0x00 ; '.'
00000000000016ca         db  0x00 ; '.'
00000000000016cb         db  0x00 ; '.'
00000000000016cc         db  0x00 ; '.'
00000000000016cd         db  0x00 ; '.'
00000000000016ce         db  0x00 ; '.'
00000000000016cf         db  0x00 ; '.'
00000000000016d0         db  0xe0 ; '.'
00000000000016d1         db  0xee ; '.'
00000000000016d2         db  0x20 ; ' '
00000000000016d3         db  0x00 ; '.'
00000000000016d4         db  0x00 ; '.'
00000000000016d5         db  0x00 ; '.'
00000000000016d6         db  0x00 ; '.'
00000000000016d7         db  0x00 ; '.'
00000000000016d8         db  0x07 ; '.'
00000000000016d9         db  0x00 ; '.'
00000000000016da         db  0x00 ; '.'
00000000000016db         db  0x00 ; '.'
00000000000016dc         db  0x2d ; '-'
00000000000016dd         db  0x00 ; '.'
00000000000016de         db  0x00 ; '.'
00000000000016df         db  0x00 ; '.'
00000000000016e0         db  0x00 ; '.'
00000000000016e1         db  0x00 ; '.'
00000000000016e2         db  0x00 ; '.'
00000000000016e3         db  0x00 ; '.'
00000000000016e4         db  0x00 ; '.'
00000000000016e5         db  0x00 ; '.'
00000000000016e6         db  0x00 ; '.'
00000000000016e7         db  0x00 ; '.'
00000000000016e8         db  0xe8 ; '.'
00000000000016e9         db  0xee ; '.'
00000000000016ea         db  0x20 ; ' '
00000000000016eb         db  0x00 ; '.'
00000000000016ec         db  0x00 ; '.'
00000000000016ed         db  0x00 ; '.'
00000000000016ee         db  0x00 ; '.'
00000000000016ef         db  0x00 ; '.'
00000000000016f0         db  0x07 ; '.'
00000000000016f1         db  0x00 ; '.'
00000000000016f2         db  0x00 ; '.'
00000000000016f3         db  0x00 ; '.'
00000000000016f4         db  0x2e ; '.'
00000000000016f5         db  0x00 ; '.'
00000000000016f6         db  0x00 ; '.'
00000000000016f7         db  0x00 ; '.'
00000000000016f8         db  0x00 ; '.'
00000000000016f9         db  0x00 ; '.'
00000000000016fa         db  0x00 ; '.'
00000000000016fb         db  0x00 ; '.'
00000000000016fc         db  0x00 ; '.'
00000000000016fd         db  0x00 ; '.'
00000000000016fe         db  0x00 ; '.'
00000000000016ff         db  0x00 ; '.'
0000000000001700         db  0xf0 ; '.'
0000000000001701         db  0xee ; '.'
0000000000001702         db  0x20 ; ' '
0000000000001703         db  0x00 ; '.'
0000000000001704         db  0x00 ; '.'
0000000000001705         db  0x00 ; '.'
0000000000001706         db  0x00 ; '.'
0000000000001707         db  0x00 ; '.'
0000000000001708         db  0x07 ; '.'
0000000000001709         db  0x00 ; '.'
000000000000170a         db  0x00 ; '.'
000000000000170b         db  0x00 ; '.'
000000000000170c         db  0x2f ; '/'
000000000000170d         db  0x00 ; '.'
000000000000170e         db  0x00 ; '.'
000000000000170f         db  0x00 ; '.'
0000000000001710         db  0x00 ; '.'
0000000000001711         db  0x00 ; '.'
0000000000001712         db  0x00 ; '.'
0000000000001713         db  0x00 ; '.'
0000000000001714         db  0x00 ; '.'
0000000000001715         db  0x00 ; '.'
0000000000001716         db  0x00 ; '.'
0000000000001717         db  0x00 ; '.'
0000000000001718         db  0xf8 ; '.'
0000000000001719         db  0xee ; '.'
000000000000171a         db  0x20 ; ' '
000000000000171b         db  0x00 ; '.'
000000000000171c         db  0x00 ; '.'
000000000000171d         db  0x00 ; '.'
000000000000171e         db  0x00 ; '.'
000000000000171f         db  0x00 ; '.'
0000000000001720         db  0x07 ; '.'
0000000000001721         db  0x00 ; '.'
0000000000001722         db  0x00 ; '.'
0000000000001723         db  0x00 ; '.'
0000000000001724         db  0x30 ; '0'
0000000000001725         db  0x00 ; '.'
0000000000001726         db  0x00 ; '.'
0000000000001727         db  0x00 ; '.'
0000000000001728         db  0x00 ; '.'
0000000000001729         db  0x00 ; '.'
000000000000172a         db  0x00 ; '.'
000000000000172b         db  0x00 ; '.'
000000000000172c         db  0x00 ; '.'
000000000000172d         db  0x00 ; '.'
000000000000172e         db  0x00 ; '.'
000000000000172f         db  0x00 ; '.'
0000000000001730         db  0x00 ; '.'
0000000000001731         db  0xef ; '.'
0000000000001732         db  0x20 ; ' '
0000000000001733         db  0x00 ; '.'
0000000000001734         db  0x00 ; '.'
0000000000001735         db  0x00 ; '.'
0000000000001736         db  0x00 ; '.'
0000000000001737         db  0x00 ; '.'
0000000000001738         db  0x07 ; '.'
0000000000001739         db  0x00 ; '.'
000000000000173a         db  0x00 ; '.'
000000000000173b         db  0x00 ; '.'
000000000000173c         db  0x31 ; '1'
000000000000173d         db  0x00 ; '.'
000000000000173e         db  0x00 ; '.'
000000000000173f         db  0x00 ; '.'
0000000000001740         db  0x00 ; '.'
0000000000001741         db  0x00 ; '.'
0000000000001742         db  0x00 ; '.'
0000000000001743         db  0x00 ; '.'
0000000000001744         db  0x00 ; '.'
0000000000001745         db  0x00 ; '.'
0000000000001746         db  0x00 ; '.'
0000000000001747         db  0x00 ; '.'
0000000000001748         db  0x08 ; '.'
0000000000001749         db  0xef ; '.'
000000000000174a         db  0x20 ; ' '
000000000000174b         db  0x00 ; '.'
000000000000174c         db  0x00 ; '.'
000000000000174d         db  0x00 ; '.'
000000000000174e         db  0x00 ; '.'
000000000000174f         db  0x00 ; '.'
0000000000001750         db  0x07 ; '.'
0000000000001751         db  0x00 ; '.'
0000000000001752         db  0x00 ; '.'
0000000000001753         db  0x00 ; '.'
0000000000001754         db  0x32 ; '2'
0000000000001755         db  0x00 ; '.'
0000000000001756         db  0x00 ; '.'
0000000000001757         db  0x00 ; '.'
0000000000001758         db  0x00 ; '.'
0000000000001759         db  0x00 ; '.'
000000000000175a         db  0x00 ; '.'
000000000000175b         db  0x00 ; '.'
000000000000175c         db  0x00 ; '.'
000000000000175d         db  0x00 ; '.'
000000000000175e         db  0x00 ; '.'
000000000000175f         db  0x00 ; '.'
0000000000001760         db  0x10 ; '.'
0000000000001761         db  0xef ; '.'
0000000000001762         db  0x20 ; ' '
0000000000001763         db  0x00 ; '.'
0000000000001764         db  0x00 ; '.'
0000000000001765         db  0x00 ; '.'
0000000000001766         db  0x00 ; '.'
0000000000001767         db  0x00 ; '.'
0000000000001768         db  0x07 ; '.'
0000000000001769         db  0x00 ; '.'
000000000000176a         db  0x00 ; '.'
000000000000176b         db  0x00 ; '.'
000000000000176c         db  0x33 ; '3'
000000000000176d         db  0x00 ; '.'
000000000000176e         db  0x00 ; '.'
000000000000176f         db  0x00 ; '.'
0000000000001770         db  0x00 ; '.'
0000000000001771         db  0x00 ; '.'
0000000000001772         db  0x00 ; '.'
0000000000001773         db  0x00 ; '.'
0000000000001774         db  0x00 ; '.'
0000000000001775         db  0x00 ; '.'
0000000000001776         db  0x00 ; '.'
0000000000001777         db  0x00 ; '.'
0000000000001778         db  0x18 ; '.'
0000000000001779         db  0xef ; '.'
000000000000177a         db  0x20 ; ' '
000000000000177b         db  0x00 ; '.'
000000000000177c         db  0x00 ; '.'
000000000000177d         db  0x00 ; '.'
000000000000177e         db  0x00 ; '.'
000000000000177f         db  0x00 ; '.'
0000000000001780         db  0x07 ; '.'
0000000000001781         db  0x00 ; '.'
0000000000001782         db  0x00 ; '.'
0000000000001783         db  0x00 ; '.'
0000000000001784         db  0x34 ; '4'
0000000000001785         db  0x00 ; '.'
0000000000001786         db  0x00 ; '.'
0000000000001787         db  0x00 ; '.'
0000000000001788         db  0x00 ; '.'
0000000000001789         db  0x00 ; '.'
000000000000178a         db  0x00 ; '.'
000000000000178b         db  0x00 ; '.'
000000000000178c         db  0x00 ; '.'
000000000000178d         db  0x00 ; '.'
000000000000178e         db  0x00 ; '.'
000000000000178f         db  0x00 ; '.'
0000000000001790         db  0x20 ; ' '
0000000000001791         db  0xef ; '.'
0000000000001792         db  0x20 ; ' '
0000000000001793         db  0x00 ; '.'
0000000000001794         db  0x00 ; '.'
0000000000001795         db  0x00 ; '.'
0000000000001796         db  0x00 ; '.'
0000000000001797         db  0x00 ; '.'
0000000000001798         db  0x07 ; '.'
0000000000001799         db  0x00 ; '.'
000000000000179a         db  0x00 ; '.'
000000000000179b         db  0x00 ; '.'
000000000000179c         db  0x35 ; '5'
000000000000179d         db  0x00 ; '.'
000000000000179e         db  0x00 ; '.'
000000000000179f         db  0x00 ; '.'
00000000000017a0         db  0x00 ; '.'
00000000000017a1         db  0x00 ; '.'
00000000000017a2         db  0x00 ; '.'
00000000000017a3         db  0x00 ; '.'
00000000000017a4         db  0x00 ; '.'
00000000000017a5         db  0x00 ; '.'
00000000000017a6         db  0x00 ; '.'
00000000000017a7         db  0x00 ; '.'
00000000000017a8         db  0x28 ; '('
00000000000017a9         db  0xef ; '.'
00000000000017aa         db  0x20 ; ' '
00000000000017ab         db  0x00 ; '.'
00000000000017ac         db  0x00 ; '.'
00000000000017ad         db  0x00 ; '.'
00000000000017ae         db  0x00 ; '.'
00000000000017af         db  0x00 ; '.'
00000000000017b0         db  0x07 ; '.'
00000000000017b1         db  0x00 ; '.'
00000000000017b2         db  0x00 ; '.'
00000000000017b3         db  0x00 ; '.'
00000000000017b4         db  0x36 ; '6'
00000000000017b5         db  0x00 ; '.'
00000000000017b6         db  0x00 ; '.'
00000000000017b7         db  0x00 ; '.'
00000000000017b8         db  0x00 ; '.'
00000000000017b9         db  0x00 ; '.'
00000000000017ba         db  0x00 ; '.'
00000000000017bb         db  0x00 ; '.'
00000000000017bc         db  0x00 ; '.'
00000000000017bd         db  0x00 ; '.'
00000000000017be         db  0x00 ; '.'
00000000000017bf         db  0x00 ; '.'
00000000000017c0         db  0x30 ; '0'
00000000000017c1         db  0xef ; '.'
00000000000017c2         db  0x20 ; ' '
00000000000017c3         db  0x00 ; '.'
00000000000017c4         db  0x00 ; '.'
00000000000017c5         db  0x00 ; '.'
00000000000017c6         db  0x00 ; '.'
00000000000017c7         db  0x00 ; '.'
00000000000017c8         db  0x07 ; '.'
00000000000017c9         db  0x00 ; '.'
00000000000017ca         db  0x00 ; '.'
00000000000017cb         db  0x00 ; '.'
00000000000017cc         db  0x37 ; '7'
00000000000017cd         db  0x00 ; '.'
00000000000017ce         db  0x00 ; '.'
00000000000017cf         db  0x00 ; '.'
00000000000017d0         db  0x00 ; '.'
00000000000017d1         db  0x00 ; '.'
00000000000017d2         db  0x00 ; '.'
00000000000017d3         db  0x00 ; '.'
00000000000017d4         db  0x00 ; '.'
00000000000017d5         db  0x00 ; '.'
00000000000017d6         db  0x00 ; '.'
00000000000017d7         db  0x00 ; '.'
00000000000017d8         db  0x38 ; '8'
00000000000017d9         db  0xef ; '.'
00000000000017da         db  0x20 ; ' '
00000000000017db         db  0x00 ; '.'
00000000000017dc         db  0x00 ; '.'
00000000000017dd         db  0x00 ; '.'
00000000000017de         db  0x00 ; '.'
00000000000017df         db  0x00 ; '.'
00000000000017e0         db  0x07 ; '.'
00000000000017e1         db  0x00 ; '.'
00000000000017e2         db  0x00 ; '.'
00000000000017e3         db  0x00 ; '.'
00000000000017e4         db  0x38 ; '8'
00000000000017e5         db  0x00 ; '.'
00000000000017e6         db  0x00 ; '.'
00000000000017e7         db  0x00 ; '.'
00000000000017e8         db  0x00 ; '.'
00000000000017e9         db  0x00 ; '.'
00000000000017ea         db  0x00 ; '.'
00000000000017eb         db  0x00 ; '.'
00000000000017ec         db  0x00 ; '.'
00000000000017ed         db  0x00 ; '.'
00000000000017ee         db  0x00 ; '.'
00000000000017ef         db  0x00 ; '.'
00000000000017f0         db  0x40 ; '@'
00000000000017f1         db  0xef ; '.'
00000000000017f2         db  0x20 ; ' '
00000000000017f3         db  0x00 ; '.'
00000000000017f4         db  0x00 ; '.'
00000000000017f5         db  0x00 ; '.'
00000000000017f6         db  0x00 ; '.'
00000000000017f7         db  0x00 ; '.'
00000000000017f8         db  0x07 ; '.'
00000000000017f9         db  0x00 ; '.'
00000000000017fa         db  0x00 ; '.'
00000000000017fb         db  0x00 ; '.'
00000000000017fc         db  0x39 ; '9'
00000000000017fd         db  0x00 ; '.'
00000000000017fe         db  0x00 ; '.'
00000000000017ff         db  0x00 ; '.'
0000000000001800         db  0x00 ; '.'
0000000000001801         db  0x00 ; '.'
0000000000001802         db  0x00 ; '.'
0000000000001803         db  0x00 ; '.'
0000000000001804         db  0x00 ; '.'
0000000000001805         db  0x00 ; '.'
0000000000001806         db  0x00 ; '.'
0000000000001807         db  0x00 ; '.'
0000000000001808         db  0x48 ; 'H'
0000000000001809         db  0xef ; '.'
000000000000180a         db  0x20 ; ' '
000000000000180b         db  0x00 ; '.'
000000000000180c         db  0x00 ; '.'
000000000000180d         db  0x00 ; '.'
000000000000180e         db  0x00 ; '.'
000000000000180f         db  0x00 ; '.'
0000000000001810         db  0x07 ; '.'
0000000000001811         db  0x00 ; '.'
0000000000001812         db  0x00 ; '.'
0000000000001813         db  0x00 ; '.'
0000000000001814         db  0x3a ; ':'
0000000000001815         db  0x00 ; '.'
0000000000001816         db  0x00 ; '.'
0000000000001817         db  0x00 ; '.'
0000000000001818         db  0x00 ; '.'
0000000000001819         db  0x00 ; '.'
000000000000181a         db  0x00 ; '.'
000000000000181b         db  0x00 ; '.'
000000000000181c         db  0x00 ; '.'
000000000000181d         db  0x00 ; '.'
000000000000181e         db  0x00 ; '.'
000000000000181f         db  0x00 ; '.'
0000000000001820         db  0x50 ; 'P'
0000000000001821         db  0xef ; '.'
0000000000001822         db  0x20 ; ' '
0000000000001823         db  0x00 ; '.'
0000000000001824         db  0x00 ; '.'
0000000000001825         db  0x00 ; '.'
0000000000001826         db  0x00 ; '.'
0000000000001827         db  0x00 ; '.'
0000000000001828         db  0x07 ; '.'
0000000000001829         db  0x00 ; '.'
000000000000182a         db  0x00 ; '.'
000000000000182b         db  0x00 ; '.'
000000000000182c         db  0x3b ; ';'
000000000000182d         db  0x00 ; '.'
000000000000182e         db  0x00 ; '.'
000000000000182f         db  0x00 ; '.'
0000000000001830         db  0x00 ; '.'
0000000000001831         db  0x00 ; '.'
0000000000001832         db  0x00 ; '.'
0000000000001833         db  0x00 ; '.'
0000000000001834         db  0x00 ; '.'
0000000000001835         db  0x00 ; '.'
0000000000001836         db  0x00 ; '.'
0000000000001837         db  0x00 ; '.'
0000000000001838         db  0x58 ; 'X'
0000000000001839         db  0xef ; '.'
000000000000183a         db  0x20 ; ' '
000000000000183b         db  0x00 ; '.'
000000000000183c         db  0x00 ; '.'
000000000000183d         db  0x00 ; '.'
000000000000183e         db  0x00 ; '.'
000000000000183f         db  0x00 ; '.'
0000000000001840         db  0x07 ; '.'
0000000000001841         db  0x00 ; '.'
0000000000001842         db  0x00 ; '.'
0000000000001843         db  0x00 ; '.'
0000000000001844         db  0x3c ; '<'
0000000000001845         db  0x00 ; '.'
0000000000001846         db  0x00 ; '.'
0000000000001847         db  0x00 ; '.'
0000000000001848         db  0x00 ; '.'
0000000000001849         db  0x00 ; '.'
000000000000184a         db  0x00 ; '.'
000000000000184b         db  0x00 ; '.'
000000000000184c         db  0x00 ; '.'
000000000000184d         db  0x00 ; '.'
000000000000184e         db  0x00 ; '.'
000000000000184f         db  0x00 ; '.'
0000000000001850         db  0x60 ; '`'
0000000000001851         db  0xef ; '.'
0000000000001852         db  0x20 ; ' '
0000000000001853         db  0x00 ; '.'
0000000000001854         db  0x00 ; '.'
0000000000001855         db  0x00 ; '.'
0000000000001856         db  0x00 ; '.'
0000000000001857         db  0x00 ; '.'
0000000000001858         db  0x07 ; '.'
0000000000001859         db  0x00 ; '.'
000000000000185a         db  0x00 ; '.'
000000000000185b         db  0x00 ; '.'
000000000000185c         db  0x3d ; '='
000000000000185d         db  0x00 ; '.'
000000000000185e         db  0x00 ; '.'
000000000000185f         db  0x00 ; '.'
0000000000001860         db  0x00 ; '.'
0000000000001861         db  0x00 ; '.'
0000000000001862         db  0x00 ; '.'
0000000000001863         db  0x00 ; '.'
0000000000001864         db  0x00 ; '.'
0000000000001865         db  0x00 ; '.'
0000000000001866         db  0x00 ; '.'
0000000000001867         db  0x00 ; '.'
0000000000001868         db  0x68 ; 'h'
0000000000001869         db  0xef ; '.'
000000000000186a         db  0x20 ; ' '
000000000000186b         db  0x00 ; '.'
000000000000186c         db  0x00 ; '.'
000000000000186d         db  0x00 ; '.'
000000000000186e         db  0x00 ; '.'
000000000000186f         db  0x00 ; '.'
0000000000001870         db  0x07 ; '.'
0000000000001871         db  0x00 ; '.'
0000000000001872         db  0x00 ; '.'
0000000000001873         db  0x00 ; '.'
0000000000001874         db  0x3e ; '>'
0000000000001875         db  0x00 ; '.'
0000000000001876         db  0x00 ; '.'
0000000000001877         db  0x00 ; '.'
0000000000001878         db  0x00 ; '.'
0000000000001879         db  0x00 ; '.'
000000000000187a         db  0x00 ; '.'
000000000000187b         db  0x00 ; '.'
000000000000187c         db  0x00 ; '.'
000000000000187d         db  0x00 ; '.'
000000000000187e         db  0x00 ; '.'
000000000000187f         db  0x00 ; '.'
0000000000001880         db  0x70 ; 'p'
0000000000001881         db  0xef ; '.'
0000000000001882         db  0x20 ; ' '
0000000000001883         db  0x00 ; '.'
0000000000001884         db  0x00 ; '.'
0000000000001885         db  0x00 ; '.'
0000000000001886         db  0x00 ; '.'
0000000000001887         db  0x00 ; '.'
0000000000001888         db  0x07 ; '.'
0000000000001889         db  0x00 ; '.'
000000000000188a         db  0x00 ; '.'
000000000000188b         db  0x00 ; '.'
000000000000188c         db  0x3f ; '?'
000000000000188d         db  0x00 ; '.'
000000000000188e         db  0x00 ; '.'
000000000000188f         db  0x00 ; '.'
0000000000001890         db  0x00 ; '.'
0000000000001891         db  0x00 ; '.'
0000000000001892         db  0x00 ; '.'
0000000000001893         db  0x00 ; '.'
0000000000001894         db  0x00 ; '.'
0000000000001895         db  0x00 ; '.'
0000000000001896         db  0x00 ; '.'
0000000000001897         db  0x00 ; '.'
0000000000001898         db  0x78 ; 'x'
0000000000001899         db  0xef ; '.'
000000000000189a         db  0x20 ; ' '
000000000000189b         db  0x00 ; '.'
000000000000189c         db  0x00 ; '.'
000000000000189d         db  0x00 ; '.'
000000000000189e         db  0x00 ; '.'
000000000000189f         db  0x00 ; '.'
00000000000018a0         db  0x07 ; '.'
00000000000018a1         db  0x00 ; '.'
00000000000018a2         db  0x00 ; '.'
00000000000018a3         db  0x00 ; '.'
00000000000018a4         db  0x40 ; '@'
00000000000018a5         db  0x00 ; '.'
00000000000018a6         db  0x00 ; '.'
00000000000018a7         db  0x00 ; '.'
00000000000018a8         db  0x00 ; '.'
00000000000018a9         db  0x00 ; '.'
00000000000018aa         db  0x00 ; '.'
00000000000018ab         db  0x00 ; '.'
00000000000018ac         db  0x00 ; '.'
00000000000018ad         db  0x00 ; '.'
00000000000018ae         db  0x00 ; '.'
00000000000018af         db  0x00 ; '.'
00000000000018b0         db  0x80 ; '.'
00000000000018b1         db  0xef ; '.'
00000000000018b2         db  0x20 ; ' '
00000000000018b3         db  0x00 ; '.'
00000000000018b4         db  0x00 ; '.'
00000000000018b5         db  0x00 ; '.'
00000000000018b6         db  0x00 ; '.'
00000000000018b7         db  0x00 ; '.'
00000000000018b8         db  0x07 ; '.'
00000000000018b9         db  0x00 ; '.'
00000000000018ba         db  0x00 ; '.'
00000000000018bb         db  0x00 ; '.'
00000000000018bc         db  0x41 ; 'A'
00000000000018bd         db  0x00 ; '.'
00000000000018be         db  0x00 ; '.'
00000000000018bf         db  0x00 ; '.'
00000000000018c0         db  0x00 ; '.'
00000000000018c1         db  0x00 ; '.'
00000000000018c2         db  0x00 ; '.'
00000000000018c3         db  0x00 ; '.'
00000000000018c4         db  0x00 ; '.'
00000000000018c5         db  0x00 ; '.'
00000000000018c6         db  0x00 ; '.'
00000000000018c7         db  0x00 ; '.'
00000000000018c8         db  0x88 ; '.'
00000000000018c9         db  0xef ; '.'
00000000000018ca         db  0x20 ; ' '
00000000000018cb         db  0x00 ; '.'
00000000000018cc         db  0x00 ; '.'
00000000000018cd         db  0x00 ; '.'
00000000000018ce         db  0x00 ; '.'
00000000000018cf         db  0x00 ; '.'
00000000000018d0         db  0x07 ; '.'
00000000000018d1         db  0x00 ; '.'
00000000000018d2         db  0x00 ; '.'
00000000000018d3         db  0x00 ; '.'
00000000000018d4         db  0x42 ; 'B'
00000000000018d5         db  0x00 ; '.'
00000000000018d6         db  0x00 ; '.'
00000000000018d7         db  0x00 ; '.'
00000000000018d8         db  0x00 ; '.'
00000000000018d9         db  0x00 ; '.'
00000000000018da         db  0x00 ; '.'
00000000000018db         db  0x00 ; '.'
00000000000018dc         db  0x00 ; '.'
00000000000018dd         db  0x00 ; '.'
00000000000018de         db  0x00 ; '.'
00000000000018df         db  0x00 ; '.'
00000000000018e0         db  0x90 ; '.'
00000000000018e1         db  0xef ; '.'
00000000000018e2         db  0x20 ; ' '
00000000000018e3         db  0x00 ; '.'
00000000000018e4         db  0x00 ; '.'
00000000000018e5         db  0x00 ; '.'
00000000000018e6         db  0x00 ; '.'
00000000000018e7         db  0x00 ; '.'
00000000000018e8         db  0x07 ; '.'
00000000000018e9         db  0x00 ; '.'
00000000000018ea         db  0x00 ; '.'
00000000000018eb         db  0x00 ; '.'
00000000000018ec         db  0x43 ; 'C'
00000000000018ed         db  0x00 ; '.'
00000000000018ee         db  0x00 ; '.'
00000000000018ef         db  0x00 ; '.'
00000000000018f0         db  0x00 ; '.'
00000000000018f1         db  0x00 ; '.'
00000000000018f2         db  0x00 ; '.'
00000000000018f3         db  0x00 ; '.'
00000000000018f4         db  0x00 ; '.'
00000000000018f5         db  0x00 ; '.'
00000000000018f6         db  0x00 ; '.'
00000000000018f7         db  0x00 ; '.'
00000000000018f8         db  0x98 ; '.'
00000000000018f9         db  0xef ; '.'
00000000000018fa         db  0x20 ; ' '
00000000000018fb         db  0x00 ; '.'
00000000000018fc         db  0x00 ; '.'
00000000000018fd         db  0x00 ; '.'
00000000000018fe         db  0x00 ; '.'
00000000000018ff         db  0x00 ; '.'
0000000000001900         db  0x07 ; '.'
0000000000001901         db  0x00 ; '.'
0000000000001902         db  0x00 ; '.'
0000000000001903         db  0x00 ; '.'
0000000000001904         db  0x44 ; 'D'
0000000000001905         db  0x00 ; '.'
0000000000001906         db  0x00 ; '.'
0000000000001907         db  0x00 ; '.'
0000000000001908         db  0x00 ; '.'
0000000000001909         db  0x00 ; '.'
000000000000190a         db  0x00 ; '.'
000000000000190b         db  0x00 ; '.'
000000000000190c         db  0x00 ; '.'
000000000000190d         db  0x00 ; '.'
000000000000190e         db  0x00 ; '.'
000000000000190f         db  0x00 ; '.'
0000000000001910         db  0xa0 ; '.'
0000000000001911         db  0xef ; '.'
0000000000001912         db  0x20 ; ' '
0000000000001913         db  0x00 ; '.'
0000000000001914         db  0x00 ; '.'
0000000000001915         db  0x00 ; '.'
0000000000001916         db  0x00 ; '.'
0000000000001917         db  0x00 ; '.'
0000000000001918         db  0x07 ; '.'
0000000000001919         db  0x00 ; '.'
000000000000191a         db  0x00 ; '.'
000000000000191b         db  0x00 ; '.'
000000000000191c         db  0x45 ; 'E'
000000000000191d         db  0x00 ; '.'
000000000000191e         db  0x00 ; '.'
000000000000191f         db  0x00 ; '.'
0000000000001920         db  0x00 ; '.'
0000000000001921         db  0x00 ; '.'
0000000000001922         db  0x00 ; '.'
0000000000001923         db  0x00 ; '.'
0000000000001924         db  0x00 ; '.'
0000000000001925         db  0x00 ; '.'
0000000000001926         db  0x00 ; '.'
0000000000001927         db  0x00 ; '.'
0000000000001928         db  0xa8 ; '.'
0000000000001929         db  0xef ; '.'
000000000000192a         db  0x20 ; ' '
000000000000192b         db  0x00 ; '.'
000000000000192c         db  0x00 ; '.'
000000000000192d         db  0x00 ; '.'
000000000000192e         db  0x00 ; '.'
000000000000192f         db  0x00 ; '.'
0000000000001930         db  0x07 ; '.'
0000000000001931         db  0x00 ; '.'
0000000000001932         db  0x00 ; '.'
0000000000001933         db  0x00 ; '.'
0000000000001934         db  0x47 ; 'G'
0000000000001935         db  0x00 ; '.'
0000000000001936         db  0x00 ; '.'
0000000000001937         db  0x00 ; '.'
0000000000001938         db  0x00 ; '.'
0000000000001939         db  0x00 ; '.'
000000000000193a         db  0x00 ; '.'
000000000000193b         db  0x00 ; '.'
000000000000193c         db  0x00 ; '.'
000000000000193d         db  0x00 ; '.'
000000000000193e         db  0x00 ; '.'
000000000000193f         db  0x00 ; '.'
0000000000001940         db  0xb0 ; '.'
0000000000001941         db  0xef ; '.'
0000000000001942         db  0x20 ; ' '
0000000000001943         db  0x00 ; '.'
0000000000001944         db  0x00 ; '.'
0000000000001945         db  0x00 ; '.'
0000000000001946         db  0x00 ; '.'
0000000000001947         db  0x00 ; '.'
0000000000001948         db  0x07 ; '.'
0000000000001949         db  0x00 ; '.'
000000000000194a         db  0x00 ; '.'
000000000000194b         db  0x00 ; '.'
000000000000194c         db  0x48 ; 'H'
000000000000194d         db  0x00 ; '.'
000000000000194e         db  0x00 ; '.'
000000000000194f         db  0x00 ; '.'
0000000000001950         db  0x00 ; '.'
0000000000001951         db  0x00 ; '.'
0000000000001952         db  0x00 ; '.'
0000000000001953         db  0x00 ; '.'
0000000000001954         db  0x00 ; '.'
0000000000001955         db  0x00 ; '.'
0000000000001956         db  0x00 ; '.'
0000000000001957         db  0x00 ; '.'
0000000000001958         db  0xb8 ; '.'
0000000000001959         db  0xef ; '.'
000000000000195a         db  0x20 ; ' '
000000000000195b         db  0x00 ; '.'
000000000000195c         db  0x00 ; '.'
000000000000195d         db  0x00 ; '.'
000000000000195e         db  0x00 ; '.'
000000000000195f         db  0x00 ; '.'
0000000000001960         db  0x07 ; '.'
0000000000001961         db  0x00 ; '.'
0000000000001962         db  0x00 ; '.'
0000000000001963         db  0x00 ; '.'
0000000000001964         db  0x4a ; 'J'
0000000000001965         db  0x00 ; '.'
0000000000001966         db  0x00 ; '.'
0000000000001967         db  0x00 ; '.'
0000000000001968         db  0x00 ; '.'
0000000000001969         db  0x00 ; '.'
000000000000196a         db  0x00 ; '.'
000000000000196b         db  0x00 ; '.'
000000000000196c         db  0x00 ; '.'
000000000000196d         db  0x00 ; '.'
000000000000196e         db  0x00 ; '.'
000000000000196f         db  0x00 ; '.'


        ; Section .init
        ; Range: [0x1970; 0x1987[ (23 bytes)
        ; File offset : [6512; 6535[ (23 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _init:
0000000000001970         sub        rsp, 0x8                                    ; CODE XREF=__libc_csu_init+44
0000000000001974         mov        rax, qword [qword_20efd8]                   ; qword_20efd8
000000000000197b         test       rax, rax
000000000000197e         je         loc_1982

0000000000001980         call       rax

                     loc_1982:
0000000000001982         add        rsp, 0x8                                    ; CODE XREF=_init+14
0000000000001986         ret
                        ; endp
0000000000001987         db  0x00 ; '.'
0000000000001988         db  0x00 ; '.'
0000000000001989         db  0x00 ; '.'
000000000000198a         db  0x00 ; '.'
000000000000198b         db  0x00 ; '.'
000000000000198c         db  0x00 ; '.'
000000000000198d         db  0x00 ; '.'
000000000000198e         db  0x00 ; '.'
000000000000198f         db  0x00 ; '.'


        ; Section .plt
        ; Range: [0x1990; 0x1de0[ (1104 bytes)
        ; File offset : [6544; 7648[ (1104 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR


                     loc_1990:
0000000000001990         push       qword [qword_20ed90]                        ; Begin of unwind block (FDE at 0xcb2c), qword_20ed90, CODE XREF=sub_19a6+5
0000000000001996         jmp        qword [qword_20ed90+8]                      ; 0x20ed98
                        ; endp
000000000000199c         nop        dword [rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_endgrent:        // endgrent
00000000000019a0         jmp        qword [endgrent@GOT]                        ; endgrent, endgrent@GOT, CODE XREF=parse_with_separator+199, parse_with_separator+577, parse_with_separator+760
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_19a6:
00000000000019a6         push       0x0
00000000000019ab         jmp        loc_1990


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_abort:        // abort
00000000000019b0         jmp        qword [abort@GOT]                           ; abort, abort@GOT, CODE XREF=set_program_name+154, sub_4390+2799, quotearg_n_options+417, set_custom_quoting+43, quotearg_n_style+132, quotearg_n_style_mem+128, quotearg_n_style_colon+132, quotearg_n_custom_mem+135, xalloc_die+48, filesystem_type+295, cwd_advance_fd+97
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_19b6:
00000000000019b6         push       0x1
00000000000019bb         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___errno_location:        // __errno_location
00000000000019c0         jmp        qword [__errno_location@GOT]                ; __errno_location, __errno_location@GOT, CODE XREF=main+1119, main+1303, sub_2b60+232, sub_2fd0+350, sub_2fd0+731, sub_2fd0+857, sub_3470+325, sub_3470+611, chown_files+127, close_stdout+22, quotearg_n_options+28
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_19c6:
00000000000019c6         push       0x2
00000000000019cb         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strncmp:        // strncmp
00000000000019d0         jmp        qword [strncmp@GOT]                         ; strncmp, strncmp@GOT, CODE XREF=usage+900, usage+1093
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_19d6:
00000000000019d6         push       0x3
00000000000019db         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j__exit:        // _exit
00000000000019e0         jmp        qword [_exit@GOT]                           ; _exit, _exit@GOT, CODE XREF=close_stdout+136
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_19e6:
00000000000019e6         push       0x4
00000000000019eb         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strcpy:        // strcpy
00000000000019f0         jmp        qword [strcpy@GOT]                          ; strcpy, strcpy@GOT, CODE XREF=user_group_str+70
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_19f6:
00000000000019f6         push       0x5
00000000000019fb         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___fpending:        // __fpending
0000000000001a00         jmp        qword [__fpending@GOT]                      ; __fpending, __fpending@GOT, CODE XREF=close_stream+7
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a06:
0000000000001a06         push       0x6
0000000000001a0b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_qsort:        // qsort
0000000000001a10         jmp        qword [qsort@GOT]                           ; qsort, qsort@GOT, CODE XREF=fts_sort+124
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a16:
0000000000001a16         push       0x7
0000000000001a1b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fcntl:        // fcntl
0000000000001a20         jmp        qword [fcntl@GOT]                           ; fcntl, fcntl@GOT, CODE XREF=rpl_fcntl+128, rpl_fcntl+212, rpl_fcntl+320, rpl_fcntl+407, rpl_fcntl+423, rpl_fcntl+460, rpl_fcntl+483, rpl_fcntl+559, rpl_fcntl+606
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a26:
0000000000001a26         push       0x8
0000000000001a2b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_textdomain:        // textdomain
0000000000001a30         jmp        qword [textdomain@GOT]                      ; textdomain, textdomain@GOT, CODE XREF=main+145
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a36:
0000000000001a36         push       0x9
0000000000001a3b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fclose:        // fclose
0000000000001a40         jmp        qword [fclose@GOT]                          ; fclose, fclose@GOT, CODE XREF=rpl_fclose+54, rpl_fclose+107
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a46:
0000000000001a46         push       0xa
0000000000001a4b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_getpwuid:        // getpwuid
0000000000001a50         jmp        qword [getpwuid@GOT]                        ; getpwuid, getpwuid@GOT, CODE XREF=uid_to_name+23
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a56:
0000000000001a56         push       0xb
0000000000001a5b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_bindtextdomain:        // bindtextdomain
0000000000001a60         jmp        qword [bindtextdomain@GOT]                  ; bindtextdomain, bindtextdomain@GOT, CODE XREF=main+133
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a66:
0000000000001a66         push       0xc
0000000000001a6b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_stpcpy:        // stpcpy
0000000000001a70         jmp        qword [stpcpy@GOT]                          ; stpcpy, stpcpy@GOT, CODE XREF=user_group_str+55
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a76:
0000000000001a76         push       0xd
0000000000001a7b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_dcgettext:        // dcgettext
0000000000001a80         jmp        qword [dcgettext@GOT]                       ; dcgettext, dcgettext@GOT, CODE XREF=main+1111, main+1238, main+1295, main+1346, main+1397, usage+56, usage+102, usage+149, usage+186, usage+223, usage+260
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a86:
0000000000001a86         push       0xe
0000000000001a8b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_get_mb_cur_max:        // __ctype_get_mb_cur_max
0000000000001a90         jmp        qword [__ctype_get_mb_cur_max@GOT]          ; __ctype_get_mb_cur_max, __ctype_get_mb_cur_max@GOT, CODE XREF=quotearg_buffer_restyled+108
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a96:
0000000000001a96         push       0xf
0000000000001a9b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strlen:        // strlen
0000000000001aa0         jmp        qword [strlen@GOT]                          ; strlen, strlen@GOT, CODE XREF=user_group_str+20, user_group_str+31, quotearg_buffer_restyled+343, sub_4390+411, sub_4390+1742, xstrdup+4, fts_build+539, rpl_fts_open+136, rpl_fts_open+452, rpl_fts_read+784
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1aa6:
0000000000001aa6         push       0x10
0000000000001aab         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___lxstat:        // __lxstat
0000000000001ab0         jmp        qword [__lxstat@GOT]                        ; __lxstat, __lxstat@GOT, CODE XREF=get_root_dev_ino+45, fts_stat+348
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ab6:
0000000000001ab6         push       0x11
0000000000001abb         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_openat:        // openat
0000000000001ac0         jmp        qword [openat@GOT]                          ; openat, openat@GOT, CODE XREF=openat_safer+34
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ac6:
0000000000001ac6         push       0x12
0000000000001acb         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___stack_chk_fail:        // __stack_chk_fail
0000000000001ad0         jmp        qword [__stack_chk_fail@GOT]                ; __stack_chk_fail, __stack_chk_fail@GOT, CODE XREF=main+1260, gid_to_name+79, uid_to_name+79, sub_3780+170, sub_4390+2739, quotearg_n_style+137, quotearg_n_style_mem+133, quotearg_char_mem+147, quotearg_n_style_colon+137, quotearg_n_custom_mem+140, get_root_dev_ino+108
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ad6:
0000000000001ad6         push       0x13
0000000000001adb         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_getopt_long:        // getopt_long
0000000000001ae0         jmp        qword [getopt_long@GOT]                     ; getopt_long, getopt_long@GOT, CODE XREF=main+214
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ae6:
0000000000001ae6         push       0x14
0000000000001aeb         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_mbrtowc:        // mbrtowc
0000000000001af0         jmp        qword [mbrtowc@GOT]                         ; mbrtowc, mbrtowc@GOT, CODE XREF=rpl_mbrtowc+50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1af6:
0000000000001af6         push       0x15
0000000000001afb         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strchr:        // strchr
0000000000001b00         jmp        qword [strchr@GOT]                          ; strchr, strchr@GOT, CODE XREF=parse_user_spec+43, parse_user_spec+100, xstrtoul+291, xstrtoul+323, xstrtoul+380
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b06:
0000000000001b06         push       0x16
0000000000001b0b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_getgrgid:        // getgrgid
0000000000001b10         jmp        qword [getgrgid@GOT]                        ; getgrgid, getgrgid@GOT, CODE XREF=gid_to_name+23, parse_with_separator+735
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b16:
0000000000001b16         push       0x17
0000000000001b1b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___fxstatat:        // __fxstatat
0000000000001b20         jmp        qword [__fxstatat@GOT]                      ; __fxstatat, __fxstatat@GOT, CODE XREF=sub_2b60+658, fts_stat+158
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b26:
0000000000001b26         push       0x18
0000000000001b2b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strrchr:        // strrchr
0000000000001b30         jmp        qword [strrchr@GOT]                         ; strrchr, strrchr@GOT, CODE XREF=set_program_name+14, rpl_fts_read+758
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b36:
0000000000001b36         push       0x19
0000000000001b3b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_lseek:        // lseek
0000000000001b40         jmp        qword [lseek@GOT]                           ; lseek, lseek@GOT, CODE XREF=rpl_fclose+89, j_j_fseeko+49
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b46:
0000000000001b46         push       0x1a
0000000000001b4b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___assert_fail:        // __assert_fail
0000000000001b50         jmp        qword [__assert_fail@GOT]                   ; __assert_fail, __assert_fail@GOT, CODE XREF=sub_65ef+27, xstrtoul+927, cycle_check+133
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b56:
0000000000001b56         push       0x1b
0000000000001b5b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memset:        // memset
0000000000001b60         jmp        qword [memset@GOT]                          ; memset, memset@GOT, CODE XREF=quotearg_n_options+153, xzalloc+18
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b66:
0000000000001b66         push       0x1c
0000000000001b6b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_close:        // close
0000000000001b70         jmp        qword [close@GOT]                           ; close, close@GOT, CODE XREF=sub_2fd0+876, sub_3470+344, sub_3470+630, sub_3780+152, fd_ring_clear+50, cwd_advance_fd+63, cwd_advance_fd+82, fts_safe_changedir+226, fts_safe_changedir+437, fts_build+1383, rpl_fts_close+243
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b76:
0000000000001b76         push       0x1d
0000000000001b7b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___openat_2:        // __openat_2
0000000000001b80         jmp        qword [__openat_2@GOT]                      ; __openat_2, __openat_2@GOT, CODE XREF=sub_2fd0+324, sub_3470+726
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b86:
0000000000001b86         push       0x1e
0000000000001b8b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_closedir:        // closedir
0000000000001b90         jmp        qword [closedir@GOT]                        ; closedir, closedir@GOT, CODE XREF=fts_lfree+29, fts_build+1348, fts_build+1444, fts_build+1647, fts_build+1979, fts_build+2427
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b96:
0000000000001b96         push       0x1f
0000000000001b9b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memcmp:        // memcmp
0000000000001ba0         jmp        qword [memcmp@GOT]                          ; memcmp, memcmp@GOT, CODE XREF=quotearg_buffer_restyled+410
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ba6:
0000000000001ba6         push       0x20
0000000000001bab         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fputs_unlocked:        // fputs_unlocked
0000000000001bb0         jmp        qword [fputs_unlocked@GOT]                  ; fputs_unlocked, fputs_unlocked@GOT, CODE XREF=usage+160, usage+197, usage+234, usage+271, usage+308, usage+345, usage+382, usage+419, usage+456, usage+493, usage+530
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1bb6:
0000000000001bb6         push       0x21
0000000000001bbb         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_calloc:        // calloc
0000000000001bc0         jmp        qword [calloc@GOT]                          ; calloc, calloc@GOT, CODE XREF=xcalloc+26, rpl_fts_open+72, hash_initialize+177, hash_rehash+198
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1bc6:
0000000000001bc6         push       0x22
0000000000001bcb         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_dirfd:        // dirfd
0000000000001bd0         jmp        qword [dirfd@GOT]                           ; dirfd, dirfd@GOT, CODE XREF=fts_build+61
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1bd6:
0000000000001bd6         push       0x23
0000000000001bdb         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_getpwnam:        // getpwnam
0000000000001be0         jmp        qword [getpwnam@GOT]                        ; getpwnam, getpwnam@GOT, CODE XREF=parse_with_separator+406
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1be6:
0000000000001be6         push       0x24
0000000000001beb         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memcpy:        // memcpy
0000000000001bf0         jmp        qword [memcpy@GOT]                          ; memcpy, memcpy@GOT, CODE XREF=xmemdup+35, fts_alloc+56
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1bf6:
0000000000001bf6         push       0x25
0000000000001bfb         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_getgrnam:        // getgrnam
0000000000001c00         jmp        qword [getgrnam@GOT]                        ; getgrnam, getgrnam@GOT, CODE XREF=parse_with_separator+181
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c06:
0000000000001c06         push       0x26
0000000000001c0b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fileno:        // fileno
0000000000001c10         jmp        qword [fileno@GOT]                          ; fileno, fileno@GOT, CODE XREF=rpl_fclose+7, rpl_fclose+75, j_j_fseeko+36
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c16:
0000000000001c16         push       0x27
0000000000001c1b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___xstat:        // __xstat
0000000000001c20         jmp        qword [__xstat@GOT]                         ; __xstat, __xstat@GOT, CODE XREF=main+788, fts_stat+40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c26:
0000000000001c26         push       0x28
0000000000001c2b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_readdir:        // readdir
0000000000001c30         jmp        qword [readdir@GOT]                         ; readdir, readdir@GOT, CODE XREF=fts_build+498
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c36:
0000000000001c36         push       0x29
0000000000001c3b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_malloc:        // malloc
0000000000001c40         jmp        qword [malloc@GOT]                          ; malloc, malloc@GOT, CODE XREF=xmalloc+4, fts_alloc+30, filesystem_type+224, setup_dir.isra.4+69, enter_dir.isra.10+23, transfer_entries+293, hash_initialize+62, hash_insert_if_absent+517
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c46:
0000000000001c46         push       0x2a
0000000000001c4b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fflush:        // fflush
0000000000001c50         jmp        qword [fflush@GOT]                          ; fflush, fflush@GOT, CODE XREF=rpl_fflush+30, rpl_fflush+59
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c56:
0000000000001c56         push       0x2b
0000000000001c5b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_nl_langinfo:        // nl_langinfo
0000000000001c60         jmp        qword [nl_langinfo@GOT]                     ; nl_langinfo, nl_langinfo@GOT, CODE XREF=locale_charset+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c66:
0000000000001c66         push       0x2c
0000000000001c6b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___fxstat:        // __fxstat
0000000000001c70         jmp        qword [__fxstat@GOT]                        ; __fxstat, __fxstat@GOT, CODE XREF=sub_2fd0+806, fts_safe_changedir+189
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c76:
0000000000001c76         push       0x2d
0000000000001c7b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_endpwent:        // endpwent
0000000000001c80         jmp        qword [endpwent@GOT]                        ; endpwent, endpwent@GOT, CODE XREF=parse_with_separator+447, parse_with_separator+491, parse_with_separator+893
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c86:
0000000000001c86         push       0x2e
0000000000001c8b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___freading:        // __freading
0000000000001c90         jmp        qword [__freading@GOT]                      ; __freading, __freading@GOT, CODE XREF=rpl_fclose+19, rpl_fflush+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c96:
0000000000001c96         push       0x2f
0000000000001c9b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fchdir:        // fchdir
0000000000001ca0         jmp        qword [fchdir@GOT]                          ; fchdir, fchdir@GOT, CODE XREF=restore_initial_cwd+29, fts_safe_changedir+380, rpl_fts_close+231, rpl_fts_read+1677, rpl_fts_children+236
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ca6:
0000000000001ca6         push       0x30
0000000000001cab         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_realloc:        // realloc
0000000000001cb0         jmp        qword [realloc@GOT]                         ; realloc, realloc@GOT, CODE XREF=xrealloc+17, fts_sort+64, fts_palloc.isra.2+29
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1cb6:
0000000000001cb6         push       0x31
0000000000001cbb         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_setlocale:        // setlocale
0000000000001cc0         jmp        qword [setlocale@GOT]                       ; setlocale, setlocale@GOT, CODE XREF=main+114, usage+875, usage+1068, hard_locale+6
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1cc6:
0000000000001cc6         push       0x32
0000000000001ccb         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___printf_chk:        // __printf_chk
0000000000001cd0         jmp        qword [__printf_chk@GOT]                    ; __printf_chk, __printf_chk@GOT, CODE XREF=usage+123, usage+617, usage+863, usage+956, usage+1017, usage+1056, usage+1159, sub_2b60+473, sub_3470+157, emit_bug_reporting_address+37, emit_bug_reporting_address+85
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1cd6:
0000000000001cd6         push       0x33
0000000000001cdb         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memmove:        // memmove
0000000000001ce0         jmp        qword [memmove@GOT]                         ; memmove, memmove@GOT, CODE XREF=fts_build+949, rpl_fts_read+745, rpl_fts_read+802, rpl_fts_read+998
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ce6:
0000000000001ce6         push       0x34
0000000000001ceb         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_error:        // error
0000000000001cf0         jmp        qword [error@GOT]                           ; error, error@GOT, CODE XREF=main+610, main+1139, main+1219, main+1255, main+1323, main+1360, main+1414, sub_2b60+837, sub_2b60+873, sub_2f40+44, sub_2fd0+202
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1cf6:
0000000000001cf6         push       0x35
0000000000001cfb         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_open:        // open
0000000000001d00         jmp        qword [open@GOT]                            ; open, open@GOT, CODE XREF=open_safer+35
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d06:
0000000000001d06         push       0x36
0000000000001d0b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fseeko:        // fseeko
0000000000001d10         jmp        qword [fseeko@GOT]                          ; fseeko, fseeko@GOT, CODE XREF=j_j_fseeko
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d16:
0000000000001d16         push       0x37
0000000000001d1b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fchown:        // fchown
0000000000001d20         jmp        qword [fchown@GOT]                          ; fchown, fchown@GOT, CODE XREF=sub_3780+122
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d26:
0000000000001d26         push       0x38
0000000000001d2b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fdopendir:        // fdopendir
0000000000001d30         jmp        qword [fdopendir@GOT]                       ; fdopendir, fdopendir@GOT, CODE XREF=opendirat+34
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d36:
0000000000001d36         push       0x39
0000000000001d3b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strtoul:        // strtoul
0000000000001d40         jmp        qword [strtoul@GOT]                         ; strtoul, strtoul@GOT, CODE XREF=xstrtoul+140
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d46:
0000000000001d46         push       0x3a
0000000000001d4b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fstatfs:        // fstatfs
0000000000001d50         jmp        qword [fstatfs@GOT]                         ; fstatfs, fstatfs@GOT, CODE XREF=filesystem_type+200
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d56:
0000000000001d56         push       0x3b
0000000000001d5b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___cxa_atexit:        // __cxa_atexit
0000000000001d60         jmp        qword [__cxa_atexit@GOT]                    ; __cxa_atexit, __cxa_atexit@GOT, CODE XREF=atexit+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d66:
0000000000001d66         push       0x3c
0000000000001d6b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fchownat:        // fchownat
0000000000001d70         jmp        qword [fchownat@GOT]                        ; fchownat, fchownat@GOT, CODE XREF=sub_2b60+219, sub_2fd0+433
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d76:
0000000000001d76         push       0x3d
0000000000001d7b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_exit:        // exit
0000000000001d80         jmp        qword [exit@GOT]                            ; exit, exit@GOT, CODE XREF=main+476, usage+88
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d86:
0000000000001d86         push       0x3e
0000000000001d8b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fwrite:        // fwrite
0000000000001d90         jmp        qword [fwrite@GOT]                          ; fwrite, fwrite@GOT, CODE XREF=set_program_name+149
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d96:
0000000000001d96         push       0x3f
0000000000001d9b         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___fprintf_chk:        // __fprintf_chk
0000000000001da0         jmp        qword [__fprintf_chk@GOT]                   ; __fprintf_chk, __fprintf_chk@GOT, CODE XREF=usage+81, version_etc_arn+55, version_etc_arn+105, version_etc_arn+285, version_etc_arn+332, version_etc_arn+492, version_etc_arn+563, version_etc_arn+642, version_etc_arn+718, version_etc_arn+872, hash_print_statistics+118
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1da6:
0000000000001da6         push       0x40
0000000000001dab         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_mbsinit:        // mbsinit
0000000000001db0         jmp        qword [mbsinit@GOT]                         ; mbsinit, mbsinit@GOT, CODE XREF=sub_4390+616
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1db6:
0000000000001db6         push       0x41
0000000000001dbb         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_iswprint:        // iswprint
0000000000001dc0         jmp        qword [iswprint@GOT]                        ; iswprint, iswprint@GOT, CODE XREF=sub_4390+592
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1dc6:
0000000000001dc6         push       0x42
0000000000001dcb         jmp        0x1990
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_b_loc:        // __ctype_b_loc
0000000000001dd0         jmp        qword [__ctype_b_loc@GOT]                   ; __ctype_b_loc, __ctype_b_loc@GOT, CODE XREF=sub_4130+51, xstrtoul+85
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1dd6:
0000000000001dd6         push       0x43
0000000000001ddb         jmp        0x1990
                        ; endp


        ; Section .plt.got
        ; Range: [0x1de0; 0x1df0[ (16 bytes)
        ; File offset : [7648; 7664[ (16 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1de0:
0000000000001de0         jmp        qword [qword_20efc0]                        ; qword, End of unwind block (FDE at 0xcb2c), Begin of unwind block (FDE at 0xcb54), qword_20efc0, CODE XREF=chopt_free+8, chopt_free+18, sub_2b60+481, sub_2b60+491, sub_2b60+501, sub_2b60+509, quotearg_n_options+277, quotearg_free+55, quotearg_free+82, quotearg_free+120, parse_with_separator+265
                        ; endp
0000000000001de6         align      8


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_qword_20efe8:        // qword_20efe8
0000000000001de8         jmp        qword [qword_20efe8]                        ; qword, qword_20efe8, CODE XREF=__do_global_dtors_aux+30
                        ; endp
0000000000001dee         align      16


        ; Section .text
        ; Range: [0x1df0; 0xaa3e[ (35918 bytes)
        ; File offset : [7664; 43582[ (35918 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_B8: int32_t, -184
        ;    var_BC: int32_t, -188
        ;    var_D8: int8_t, -216
        ;    var_E8: int64_t, -232
        ;    var_F0: int64_t, -240
        ;    var_F7: int8_t, -247
        ;    var_F8: int8_t, -248
        ;    var_100: int64_t, -256
        ;    var_104: int8_t, -260
        ;    var_108: int32_t, -264
        ;    var_10C: int32_t, -268
        ;    var_110: int32_t, -272
        ;    var_114: int32_t, -276
        ;    var_118: int32_t, -280
        ;    var_120: int64_t, -288
        ;    var_128: int64_t, -296


                     main:
0000000000001df0         push       r15                                         ; End of unwind block (FDE at 0xcb54), Begin of unwind block (FDE at 0xcb98), DATA XREF=_start+29
0000000000001df2         push       r14
0000000000001df4         xor        r14d, r14d
0000000000001df7         push       r13
0000000000001df9         push       r12
0000000000001dfb         mov        r13d, 0xffffffff
0000000000001e01         push       rbp
0000000000001e02         push       rbx
0000000000001e03         movsxd     rbp, edi
0000000000001e06         mov        rbx, rsi
0000000000001e09         mov        r12d, 0x10
0000000000001e0f         sub        rsp, 0xf8
0000000000001e16         mov        rdi, qword [rsi]
0000000000001e19         mov        rax, qword [fs:0x28]
0000000000001e22         mov        qword [rsp+0x128+var_40], rax
0000000000001e2a         xor        eax, eax
0000000000001e2c         mov        dword [rsp+0x128+var_118], 0xffffffff
0000000000001e34         mov        dword [rsp+0x128+var_114], 0xffffffff
0000000000001e3c         lea        r15, qword [rsp+0x128+var_108]
0000000000001e41         mov        dword [rsp+0x128+var_110], 0xffffffff
0000000000001e49         mov        dword [rsp+0x128+var_10C], 0xffffffff
0000000000001e51         call       set_program_name                            ; set_program_name
0000000000001e56         lea        rsi, qword [aWrittenBySSAnd+27]             ; argument "__locale" for method j_setlocale, 0xc049
0000000000001e5d         mov        edi, 0x6                                    ; argument "__category" for method j_setlocale
0000000000001e62         call       j_setlocale                                 ; setlocale
0000000000001e67         lea        rsi, qword [aUsrlocalsharel]                ; argument "__dirname" for method j_bindtextdomain, "/usr/local/share/locale"
0000000000001e6e         lea        rdi, qword [aCoreutils]                     ; argument "__domainname" for method j_bindtextdomain, "coreutils"
0000000000001e75         call       j_bindtextdomain                            ; bindtextdomain
0000000000001e7a         lea        rdi, qword [aCoreutils]                     ; argument "__domainname" for method j_textdomain, "coreutils"
0000000000001e81         call       j_textdomain                                ; textdomain
0000000000001e86         lea        rdi, qword [close_stdout]                   ; argument "__func" for method atexit, close_stdout
0000000000001e8d         call       atexit                                      ; atexit
0000000000001e92         mov        rdi, r15
0000000000001e95         call       chopt_init                                  ; chopt_init
0000000000001e9a         lea        rax, qword [rsp+0x128+var_10C]
0000000000001e9f         mov        qword [rsp+0x128+var_128], rax
0000000000001ea3         lea        rax, qword [rsp+0x128+var_110]
0000000000001ea8         mov        qword [rsp+0x128+var_120], rax
0000000000001ead         nop        dword [rax]

                     loc_1eb0:
0000000000001eb0         lea        rcx, qword [long_options]                   ; argument "__longopts" for method j_getopt_long, long_options, CODE XREF=main+291, main+336, main+382, main+494, main+509, main+528, main+565, main+630, main+648, main+662, main+677
0000000000001eb7         lea        rdx, qword [aHlprcfhv]                      ; argument "__shortopts" for method j_getopt_long, "HLPRcfhv"
0000000000001ebe         xor        r8d, r8d                                    ; argument "__longind" for method j_getopt_long
0000000000001ec1         mov        rsi, rbx                                    ; argument "___argv" for method j_getopt_long
0000000000001ec4         mov        edi, ebp                                    ; argument "___argc" for method j_getopt_long
0000000000001ec6         call       j_getopt_long                               ; getopt_long
0000000000001ecb         cmp        eax, 0xffffffff
0000000000001ece         je         loc_20bb

0000000000001ed4         cmp        eax, 0x66
0000000000001ed7         je         loc_2090

0000000000001edd         jle        loc_1f18

0000000000001edf         cmp        eax, 0x81
0000000000001ee4         je         loc_2008

0000000000001eea         jg         loc_1f48

0000000000001eec         cmp        eax, 0x76
0000000000001eef         je         loc_2070

0000000000001ef5         cmp        eax, 0x80
0000000000001efa         je         loc_2060

0000000000001f00         cmp        eax, 0x68
0000000000001f03         je         loc_1f10

                     loc_1f05:
0000000000001f05         mov        edi, 0x1                                    ; argument #1 for method usage, CODE XREF=main+328, main+366, main+413, main+1365, main+1419
0000000000001f0a         call       usage                                       ; usage
0000000000001f0f         nop

                     loc_1f10:
0000000000001f10         xor        r13d, r13d                                  ; CODE XREF=main+275
0000000000001f13         jmp        loc_1eb0
0000000000001f15         align      8

                     loc_1f18:
0000000000001f18         cmp        eax, 0x4c                                   ; CODE XREF=main+237
0000000000001f1b         je         loc_2080

0000000000001f21         jle        loc_1f78

0000000000001f23         cmp        eax, 0x52
0000000000001f26         je         loc_1fe8

0000000000001f2c         cmp        eax, 0x63
0000000000001f2f         je         loc_1ff8

0000000000001f35         cmp        eax, 0x50
0000000000001f38         jne        loc_1f05

0000000000001f3a         mov        r12d, 0x10
0000000000001f40         jmp        loc_1eb0
0000000000001f45         align      8

                     loc_1f48:
0000000000001f48         cmp        eax, 0x83                                   ; CODE XREF=main+250
0000000000001f4d         je         loc_20b0

0000000000001f53         jl         loc_20a0

0000000000001f59         cmp        eax, 0x84
0000000000001f5e         jne        loc_1f05

0000000000001f60         mov        rax, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5
0000000000001f67         mov        qword [reference_file], rax                 ; reference_file
0000000000001f6e         jmp        loc_1eb0
0000000000001f73         align      8

                     loc_1f78:
0000000000001f78         cmp        eax, 0xffffff7e                             ; CODE XREF=main+305
0000000000001f7d         je         loc_2286

0000000000001f83         cmp        eax, 0x48
0000000000001f86         je         loc_1fd8

0000000000001f88         cmp        eax, 0xffffff7d
0000000000001f8d         jne        loc_1f05

0000000000001f93         sub        rsp, 0x8
0000000000001f97         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000001f9e         mov        rcx, qword [Version]                        ; Version
0000000000001fa5         push       0x0
0000000000001fa7         lea        r9, qword [aJimMeyering]                    ; "Jim Meyering"
0000000000001fae         lea        r8, qword [aDavidMackenzie]                 ; "David MacKenzie"
0000000000001fb5         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0xaae0
0000000000001fbc         lea        rsi, qword [aChown]                         ; "chown"
0000000000001fc3         xor        eax, eax
0000000000001fc5         call       version_etc                                 ; version_etc
0000000000001fca         xor        edi, edi                                    ; argument "__status" for method j_exit
0000000000001fcc         call       j_exit                                      ; exit
                        ; endp
0000000000001fd1         align      8

                     loc_1fd8:
0000000000001fd8         mov        r12d, 0x11                                  ; CODE XREF=main+406
0000000000001fde         jmp        loc_1eb0
0000000000001fe3         align      8

                     loc_1fe8:
0000000000001fe8         mov        byte [rsp+0x128+var_104], 0x1               ; CODE XREF=main+310
0000000000001fed         jmp        loc_1eb0
0000000000001ff2         align      8

                     loc_1ff8:
0000000000001ff8         mov        dword [rsp+0x128+var_108], 0x1              ; CODE XREF=main+319
0000000000002000         jmp        loc_1eb0                                    ; DATA XREF=fts_build+1680, fts_build+2268, fts_build+2460, rpl_fts_read+275, rpl_fts_read+1148, rpl_fts_read+1321, rpl_fts_read+1696, rpl_fts_read+1713
0000000000002005         align      8

                     loc_2008:
0000000000002008         mov        rdx, qword [rsp+0x128+var_128]              ; CODE XREF=main+244
000000000000200c         mov        rsi, qword [rsp+0x128+var_120]
0000000000002011         xor        r8d, r8d
0000000000002014         mov        rdi, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5
000000000000201b         xor        ecx, ecx
000000000000201d         call       parse_user_spec                             ; parse_user_spec
0000000000002022         test       rax, rax
0000000000002025         je         loc_1eb0

000000000000202b         mov        rdi, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5
0000000000002032         mov        qword [rsp+0x128+var_128], rax
0000000000002036         call       quote                                       ; quote
000000000000203b         mov        rcx, qword [rsp+0x128+var_128]
000000000000203f         lea        rdx, qword [aSS]                            ; argument "__format" for method j_error, "%s: %s"
0000000000002046         mov        r8, rax
0000000000002049         xor        esi, esi                                    ; argument "__errnum" for method j_error
000000000000204b         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000002050         xor        eax, eax
0000000000002052         call       j_error                                     ; error
0000000000002057         nop        word [rax+rax]

                     loc_2060:
0000000000002060         mov        r13d, 0x1                                   ; CODE XREF=main+266
0000000000002066         jmp        loc_1eb0
000000000000206b         align      16

                     loc_2070:
0000000000002070         mov        dword [rsp+0x128+var_108], 0x0              ; CODE XREF=main+255
0000000000002078         jmp        loc_1eb0
000000000000207d         align      128

                     loc_2080:
0000000000002080         mov        r12d, 0x2                                   ; CODE XREF=main+299
0000000000002086         jmp        loc_1eb0
000000000000208b         align      16

                     loc_2090:
0000000000002090         mov        byte [rsp+0x128+var_F7], 0x1                ; CODE XREF=main+231
0000000000002095         jmp        loc_1eb0
000000000000209a         align      32

                     loc_20a0:
00000000000020a0         xor        r14d, r14d                                  ; CODE XREF=main+355
00000000000020a3         jmp        loc_1eb0
00000000000020a8         align      16

                     loc_20b0:
00000000000020b0         mov        r14d, 0x1                                   ; CODE XREF=main+349
00000000000020b6         jmp        loc_1eb0

                     loc_20bb:
00000000000020bb         cmp        byte [rsp+0x128+var_104], 0x0               ; CODE XREF=main+222
00000000000020c0         jne        loc_21ab

00000000000020c6         mov        r12d, 0x10

                     loc_20cc:
00000000000020cc         movsxd     rax, dword [optind@@GLIBC_2.2.5]            ; optind@@GLIBC_2.2.5, CODE XREF=main+959, main+978
00000000000020d3         test       r13d, r13d
00000000000020d6         mov        r13, qword [reference_file]                 ; reference_file
00000000000020dd         mov        edx, ebp
00000000000020df         setne      byte [rsp+0x128+var_F8]
00000000000020e4         sub        edx, eax
00000000000020e6         test       r13, r13
00000000000020e9         je         loc_21c7

00000000000020ef         test       edx, edx
00000000000020f1         jle        loc_2320

00000000000020f7         lea        rdx, qword [rsp+0x128+var_D8]               ; argument "__stat_buf" for method j___xstat
00000000000020fc         mov        rsi, r13                                    ; argument "__filename" for method j___xstat
00000000000020ff         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
0000000000002104         call       j___xstat                                   ; __xstat
0000000000002109         test       eax, eax
000000000000210b         jne        loc_22e1

0000000000002111         mov        edi, dword [rsp+0x128+var_BC]
0000000000002115         mov        eax, dword [rsp+0x128+var_B8]
0000000000002119         mov        dword [rsp+0x128+var_118], edi
000000000000211d         mov        dword [rsp+0x128+var_114], eax
0000000000002121         call       uid_to_name                                 ; uid_to_name
0000000000002126         mov        edi, dword [rsp+0x128+var_B8]
000000000000212a         mov        qword [rsp+0x128+var_F0], rax
000000000000212f         call       gid_to_name                                 ; gid_to_name
0000000000002134         mov        qword [rsp+0x128+var_E8], rax

                     loc_2139:
0000000000002139         cmp        byte [rsp+0x128+var_104], 0x0               ; CODE XREF=main+1046
000000000000213e         je         loc_2149

0000000000002140         test       r14b, r14b
0000000000002143         jne        loc_220b

                     loc_2149:
0000000000002149         movsxd     rax, dword [optind@@GLIBC_2.2.5]            ; optind@@GLIBC_2.2.5, CODE XREF=main+846, main+1071
0000000000002150         sub        rsp, 0x8
0000000000002154         mov        esi, r12d
0000000000002157         push       r15
0000000000002159         mov        r9d, dword [rsp+0x138+var_10C]
000000000000215e         or         esi, 0x400
0000000000002164         mov        r8d, dword [rsp+0x138+var_110]
0000000000002169         mov        ecx, dword [rsp+0x138+var_114]
000000000000216d         mov        edx, dword [rsp+0x138+var_118]
0000000000002171         lea        rdi, qword [rbx+rax*8]
0000000000002175         call       chown_files                                 ; chown_files
000000000000217a         pop        rdx
000000000000217b         pop        rcx
000000000000217c         xor        eax, 0x1
000000000000217f         movzx      eax, al
0000000000002182         mov        rbx, qword [rsp+0x128+var_40]
000000000000218a         xor        rbx, qword [fs:0x28]
0000000000002193         jne        loc_22dc

0000000000002199         add        rsp, 0xf8
00000000000021a0         pop        rbx
00000000000021a1         pop        rbp
00000000000021a2         pop        r12
00000000000021a4         pop        r13
00000000000021a6         pop        r14
00000000000021a8         pop        r15
00000000000021aa         ret
                        ; endp

                     loc_21ab:
00000000000021ab         cmp        r12d, 0x10                                  ; CODE XREF=main+720
00000000000021af         jne        loc_20cc

00000000000021b5         sub        r13d, 0x1
00000000000021b9         je         loc_22b8

00000000000021bf         xor        r13d, r13d
00000000000021c2         jmp        loc_20cc

                     loc_21c7:
00000000000021c7         sub        edx, 0x1                                    ; CODE XREF=main+761
00000000000021ca         jle        loc_2320

00000000000021d0         mov        rdi, qword [rbx+rax*8]
00000000000021d4         lea        rcx, qword [r15+0x18]
00000000000021d8         lea        rdx, qword [rsp+0x128+var_114]
00000000000021dd         lea        rsi, qword [rsp+0x128+var_118]
00000000000021e2         lea        r8, qword [r15+0x20]
00000000000021e6         call       parse_user_spec                             ; parse_user_spec
00000000000021eb         test       rax, rax
00000000000021ee         mov        rbp, rax
00000000000021f1         jne        loc_228d

00000000000021f7         cmp        qword [rsp+0x128+var_F0], 0x0
00000000000021fd         je         loc_2268

                     loc_21ff:
00000000000021ff         add        dword [optind@@GLIBC_2.2.5], 0x1            ; optind@@GLIBC_2.2.5, CODE XREF=main+1150, main+1169
0000000000002206         jmp        loc_2139

                     loc_220b:
000000000000220b         lea        rdi, qword [dev_ino_buf.7022]               ; dev_ino_buf.7022, CODE XREF=main+851
0000000000002212         call       get_root_dev_ino                            ; get_root_dev_ino
0000000000002217         test       rax, rax
000000000000221a         mov        qword [rsp+0x128+var_100], rax
000000000000221f         jne        loc_2149

0000000000002225         lea        rsi, qword [aLibs+6]                        ; 0xbae6
000000000000222c         mov        edi, 0x4
0000000000002231         call       quotearg_style                              ; quotearg_style
0000000000002236         lea        rsi, qword [aFailedToGetAtt]                ; argument "msgid" for method j_dcgettext, "failed to get attributes of %s"
000000000000223d         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002242         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002244         mov        rbp, rax
0000000000002247         call       j_dcgettext                                 ; dcgettext
000000000000224c         mov        rbx, rax
000000000000224f         call       j___errno_location                          ; __errno_location
0000000000002254         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
0000000000002256         mov        rcx, rbp
0000000000002259         mov        rdx, rbx                                    ; argument "__format" for method j_error
000000000000225c         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000002261         xor        eax, eax
0000000000002263         call       j_error                                     ; error

                     loc_2268:
0000000000002268         cmp        qword [rsp+0x128+var_E8], 0x0               ; CODE XREF=main+1037
000000000000226e         je         loc_21ff

0000000000002270         lea        rdi, qword [aWrittenBySSAnd+27]             ; 0xc049
0000000000002277         call       xstrdup                                     ; xstrdup
000000000000227c         mov        qword [rsp+0x128+var_F0], rax
0000000000002281         jmp        loc_21ff

                     loc_2286:
0000000000002286         xor        edi, edi                                    ; argument #1 for method usage, CODE XREF=main+397
0000000000002288         call       usage                                       ; usage

                     loc_228d:
000000000000228d         movsxd     rax, dword [optind@@GLIBC_2.2.5]            ; optind@@GLIBC_2.2.5, CODE XREF=main+1025
0000000000002294         mov        rdi, qword [rbx+rax*8]
0000000000002298         call       quote                                       ; quote
000000000000229d         lea        rdx, qword [aSS]                            ; argument "__format" for method j_error, "%s: %s"
00000000000022a4         mov        r8, rax
00000000000022a7         mov        rcx, rbp
00000000000022aa         xor        esi, esi                                    ; argument "__errnum" for method j_error
00000000000022ac         mov        edi, 0x1                                    ; argument "__status" for method j_error
00000000000022b1         xor        eax, eax
00000000000022b3         call       j_error                                     ; error

                     loc_22b8:
00000000000022b8         lea        rsi, qword [aRDereferenceRe]                ; argument "msgid" for method j_dcgettext, "-R --dereference requires either -H or -L", CODE XREF=main+969
00000000000022bf         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000022c4         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000022c6         call       j_dcgettext                                 ; dcgettext
00000000000022cb         xor        esi, esi                                    ; argument "__errnum" for method j_error
00000000000022cd         mov        rdx, rax                                    ; argument "__format" for method j_error
00000000000022d0         mov        edi, 0x1                                    ; argument "__status" for method j_error
00000000000022d5         xor        eax, eax
00000000000022d7         call       j_error                                     ; error

                     loc_22dc:
00000000000022dc         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=main+931
                        ; endp

                     loc_22e1:
00000000000022e1         mov        rsi, r13                                    ; CODE XREF=main+795
00000000000022e4         mov        edi, 0x4
00000000000022e9         call       quotearg_style                              ; quotearg_style
00000000000022ee         lea        rsi, qword [aFailedToGetAtt]                ; argument "msgid" for method j_dcgettext, "failed to get attributes of %s"
00000000000022f5         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000022fa         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000022fc         mov        rbp, rax
00000000000022ff         call       j_dcgettext                                 ; dcgettext
0000000000002304         mov        rbx, rax
0000000000002307         call       j___errno_location                          ; __errno_location
000000000000230c         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
000000000000230e         mov        rcx, rbp
0000000000002311         mov        rdx, rbx                                    ; argument "__format" for method j_error
0000000000002314         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000002319         xor        eax, eax
000000000000231b         call       j_error                                     ; error

                     loc_2320:
0000000000002320         cmp        eax, ebp                                    ; CODE XREF=main+769, main+986
0000000000002322         jl         loc_234a

0000000000002324         lea        rsi, qword [aMissingOperand]                ; argument "msgid" for method j_dcgettext, "missing operand"
000000000000232b         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000232d         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002332         call       j_dcgettext                                 ; dcgettext
0000000000002337         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002339         mov        rdx, rax                                    ; argument "__format" for method j_error
000000000000233c         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000233e         xor        eax, eax
0000000000002340         call       j_error                                     ; error
0000000000002345         jmp        loc_1f05

                     loc_234a:
000000000000234a         mov        rdi, qword [rbx+rbp*8-8]                    ; CODE XREF=main+1330
000000000000234f         call       quote                                       ; quote
0000000000002354         lea        rsi, qword [aMissingOperand_ab62]           ; argument "msgid" for method j_dcgettext, "missing operand after %s"
000000000000235b         mov        rbx, rax
000000000000235e         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002360         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002365         call       j_dcgettext                                 ; dcgettext
000000000000236a         mov        rcx, rbx
000000000000236d         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002370         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002372         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000002374         xor        eax, eax
0000000000002376         call       j_error                                     ; error
000000000000237b         jmp        loc_1f05


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _start:
0000000000002380         xor        ebp, ebp                                    ; Begin of unwind block (FDE at 0xcafc), End of unwind block (FDE at 0xcb98)
0000000000002382         mov        r9, rdx
0000000000002385         pop        rsi
0000000000002386         mov        rdx, rsp
0000000000002389         and        rsp, 0xfffffffffffffff0
000000000000238d         push       rax
000000000000238e         push       rsp
000000000000238f         lea        r8, qword [__libc_csu_fini]                 ; __libc_csu_fini
0000000000002396         lea        rcx, qword [__libc_csu_init]                ; __libc_csu_init
000000000000239d         lea        rdi, qword [main]                           ; main
00000000000023a4         call       qword [qword_20efc8+8]                      ; 0x20efd0
00000000000023aa         hlt
                        ; endp
00000000000023ab         align      16                                          ; End of unwind block (FDE at 0xcafc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     deregister_tm_clones:
00000000000023b0         lea        rdi, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5, CODE XREF=__do_global_dtors_aux+35
00000000000023b7         push       rbp
00000000000023b8         lea        rax, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5
00000000000023bf         cmp        rax, rdi
00000000000023c2         mov        rbp, rsp
00000000000023c5         je         loc_23e0

00000000000023c7         mov        rax, qword [qword_20efc8]                   ; qword_20efc8
00000000000023ce         test       rax, rax
00000000000023d1         je         loc_23e0

00000000000023d3         pop        rbp
00000000000023d4         jmp        rax
                        ; endp
00000000000023d6         align      32

                     loc_23e0:
00000000000023e0         pop        rbp                                         ; CODE XREF=deregister_tm_clones+21, deregister_tm_clones+33
00000000000023e1         ret
                        ; endp
00000000000023e2         align      16

                     register_tm_clones:
00000000000023f0         lea        rdi, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5, CODE XREF=frame_dummy+5
00000000000023f7         lea        rsi, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5
00000000000023fe         push       rbp
00000000000023ff         sub        rsi, rdi
0000000000002402         mov        rbp, rsp
0000000000002405         sar        rsi, 0x3
0000000000002409         mov        rax, rsi
000000000000240c         shr        rax, 0x3f
0000000000002410         add        rsi, rax
0000000000002413         sar        rsi, 0x1
0000000000002416         je         loc_2430

0000000000002418         mov        rax, qword [qword_20efe0]                   ; qword_20efe0
000000000000241f         test       rax, rax
0000000000002422         je         loc_2430

0000000000002424         pop        rbp
0000000000002425         jmp        rax
                        ; endp
0000000000002427         align      16

                     loc_2430:
0000000000002430         pop        rbp                                         ; CODE XREF=register_tm_clones+38, register_tm_clones+50
0000000000002431         ret
                        ; endp
0000000000002432         align      64


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __do_global_dtors_aux:
0000000000002440         cmp        byte [completed.7697], 0x0                  ; completed.7697, DATA XREF=__do_global_dtors_aux_fini_array_entry
0000000000002447         jne        loc_2478

0000000000002449         cmp        qword [qword_20efe8], 0x0                   ; qword_20efe8
0000000000002451         push       rbp
0000000000002452         mov        rbp, rsp
0000000000002455         je         loc_2463

0000000000002457         mov        rdi, qword [__dso_handle]                   ; __dso_handle
000000000000245e         call       j_qword_20efe8                              ; qword_20efe8

                     loc_2463:
0000000000002463         call       deregister_tm_clones                        ; deregister_tm_clones, CODE XREF=__do_global_dtors_aux+21
0000000000002468         mov        byte [completed.7697], 0x1                  ; completed.7697
000000000000246f         pop        rbp
0000000000002470         ret
                        ; endp
0000000000002471         align      8

                     loc_2478:
0000000000002478         ret                                                    ; CODE XREF=__do_global_dtors_aux+7
                        ; endp
000000000000247a         align      128


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     frame_dummy:
0000000000002480         push       rbp                                         ; DATA XREF=__frame_dummy_init_array_entry
0000000000002481         mov        rbp, rsp
0000000000002484         pop        rbp
0000000000002485         jmp        register_tm_clones                          ; register_tm_clones
000000000000248a         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168


                     usage:
0000000000002490         push       r13                                         ; Begin of unwind block (FDE at 0xcb6c), CODE XREF=main+282, main+1176
0000000000002492         push       r12
0000000000002494         mov        edx, 0x5
0000000000002499         push       rbp
000000000000249a         push       rbx
000000000000249b         mov        ebp, edi
000000000000249d         sub        rsp, 0x88
00000000000024a4         mov        rbx, qword [program_name]                   ; program_name
00000000000024ab         mov        rax, qword [fs:0x28]
00000000000024b4         mov        qword [rsp+0xa8+var_30], rax
00000000000024b9         xor        eax, eax
00000000000024bb         test       edi, edi
00000000000024bd         je         loc_24ed

00000000000024bf         lea        rsi, qword [aTrySHelpForMor]                ; argument "msgid" for method j_dcgettext, "Try '%s --help' for more information.\\n"
00000000000024c6         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000024c8         call       j_dcgettext                                 ; dcgettext
00000000000024cd         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
00000000000024d4         mov        rdx, rax
00000000000024d7         mov        rcx, rbx
00000000000024da         mov        esi, 0x1
00000000000024df         xor        eax, eax
00000000000024e1         call       j___fprintf_chk                             ; __fprintf_chk

                     loc_24e6:
00000000000024e6         mov        edi, ebp                                    ; argument "__status" for method j_exit, CODE XREF=usage+1022
00000000000024e8         call       j_exit                                      ; exit
                        ; endp

                     loc_24ed:
00000000000024ed         lea        rsi, qword [aUsageSOptionOw]                ; argument "msgid" for method j_dcgettext, "Usage: %s [OPTION]... [OWNER][:[GROUP]] FILE...\\n  or:  %s [OPTION]... --reference=RFILE FILE...\\n", CODE XREF=usage+45
00000000000024f4         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000024f6         call       j_dcgettext                                 ; dcgettext
00000000000024fb         mov        rcx, rbx
00000000000024fe         mov        rdx, rbx
0000000000002501         mov        rsi, rax
0000000000002504         mov        edi, 0x1
0000000000002509         xor        eax, eax
000000000000250b         call       j___printf_chk                              ; __printf_chk
0000000000002510         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002517         lea        rsi, qword [aChangeTheOwner]                ; argument "msgid" for method j_dcgettext, "Change the owner and/or group of each FILE to OWNER and/or GROUP.\\nWith --reference, change the owner and group of each FILE to those of RFILE.\\n\\n"
000000000000251e         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002523         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002525         call       j_dcgettext                                 ; dcgettext
000000000000252a         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
000000000000252d         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002530         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002535         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
000000000000253c         lea        rsi, qword [aCChangesLikeVe]                ; argument "msgid" for method j_dcgettext, "  -c, --changes          like verbose but report only when a change is made\\n  -f, --silent, --quiet  suppress most error messages\\n  -v, --verbose          output a diagnostic for every file processed\\n"
0000000000002543         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002548         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000254a         call       j_dcgettext                                 ; dcgettext
000000000000254f         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002552         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002555         call       j_fputs_unlocked                            ; fputs_unlocked
000000000000255a         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002561         lea        rsi, qword [aDereferenceAff]                ; argument "msgid" for method j_dcgettext, "      --dereference      affect the referent of each symbolic link (this is\\n                         the default), rather than the symbolic link itself\\n  -h, --no-dereference   affect symbolic links instead of any referenced file\\n"
0000000000002568         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000256d         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000256f         call       j_dcgettext                                 ; dcgettext
0000000000002574         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002577         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
000000000000257a         call       j_fputs_unlocked                            ; fputs_unlocked
000000000000257f         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002586         lea        rsi, qword [aUsefulOnlyOnSy]                ; argument "msgid" for method j_dcgettext, "                         (useful only on systems that can change the\\n                         ownership of a symlink)\\n"
000000000000258d         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002592         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002594         call       j_dcgettext                                 ; dcgettext
0000000000002599         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
000000000000259c         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
000000000000259f         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000025a4         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000025ab         lea        rsi, qword [aFromcurrentown]                ; argument "msgid" for method j_dcgettext, "      --from=CURRENT_OWNER:CURRENT_GROUP\\n                         change the owner and/or group of each file only if\\n                         its current owner and/or group match those specified\\n                         here.  Either may be omitted, in whi…"
00000000000025b2         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000025b7         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000025b9         call       j_dcgettext                                 ; dcgettext
00000000000025be         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
00000000000025c1         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000025c4         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000025c9         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000025d0         lea        rsi, qword [aNopreserveroot]                ; argument "msgid" for method j_dcgettext, "      --no-preserve-root  do not treat '/' specially (the default)\\n      --preserve-root    fail to operate recursively on '/'\\n"
00000000000025d7         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000025dc         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000025de         call       j_dcgettext                                 ; dcgettext
00000000000025e3         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
00000000000025e6         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000025e9         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000025ee         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000025f5         lea        rsi, qword [aReferencerfile]                ; argument "msgid" for method j_dcgettext, "      --reference=RFILE  use RFILE's owner and group rather than\\n                         specifying OWNER:GROUP values\\n"
00000000000025fc         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002601         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002603         call       j_dcgettext                                 ; dcgettext
0000000000002608         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
000000000000260b         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
000000000000260e         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002613         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
000000000000261a         lea        rsi, qword [aRRecursiveOper]                ; argument "msgid" for method j_dcgettext, "  -R, --recursive        operate on files and directories recursively\\n"
0000000000002621         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002626         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002628         call       j_dcgettext                                 ; dcgettext
000000000000262d         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002630         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002633         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002638         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
000000000000263f         lea        rsi, qword [aNtheFollowingO]                ; argument "msgid" for method j_dcgettext, "\\nThe following options modify how a hierarchy is traversed when the -R\\noption is also specified.  If more than one is specified, only the final\\none takes effect.\\n\\n  -H                     if a command line argument is a symbolic link\\n                      …"
0000000000002646         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000264b         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000264d         call       j_dcgettext                                 ; dcgettext
0000000000002652         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002655         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002658         call       j_fputs_unlocked                            ; fputs_unlocked
000000000000265d         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002664         lea        rsi, qword [aHelpDisplayThi]                ; argument "msgid" for method j_dcgettext, "      --help     display this help and exit\\n"
000000000000266b         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002670         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002672         call       j_dcgettext                                 ; dcgettext
0000000000002677         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
000000000000267a         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
000000000000267d         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002682         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002689         lea        rsi, qword [aVersionOutputV]                ; argument "msgid" for method j_dcgettext, "      --version  output version information and exit\\n"
0000000000002690         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002695         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002697         call       j_dcgettext                                 ; dcgettext
000000000000269c         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
000000000000269f         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000026a2         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000026a7         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000026ae         lea        rsi, qword [aNownerIsUnchan]                ; argument "msgid" for method j_dcgettext, "\\nOwner is unchanged if missing.  Group is unchanged if missing, but changed\\nto login group if implied by a ':' following a symbolic OWNER.\\nOWNER and GROUP may be numeric as well as symbolic.\\n"
00000000000026b5         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000026ba         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000026bc         call       j_dcgettext                                 ; dcgettext
00000000000026c1         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
00000000000026c4         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000026c7         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000026cc         mov        rbx, qword [program_name]                   ; program_name
00000000000026d3         lea        rsi, qword [aNexamplesnSRoo]                ; argument "msgid" for method j_dcgettext, "\\nExamples:\\n  %s root /u        Change the owner of /u to \\\"root\\\".\\n  %s root:staff /u  Likewise, but also change its group to \\\"staff\\\".\\n  %s -hR root /u    Change the owner of /u and subfiles to \\\"root\\\".\\n"
00000000000026da         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000026df         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000026e1         call       j_dcgettext                                 ; dcgettext
00000000000026e6         mov        rcx, rbx
00000000000026e9         mov        rdx, rbx
00000000000026ec         mov        r8, rbx
00000000000026ef         mov        rsi, rax
00000000000026f2         mov        edi, 0x1
00000000000026f7         xor        eax, eax
00000000000026f9         call       j___printf_chk                              ; __printf_chk
00000000000026fe         lea        rax, qword [aChown+6]                       ; 0xaa6a
0000000000002705         lea        rcx, qword [aSha256sum]                     ; "sha256sum"
000000000000270c         lea        rbx, qword [aChown]                         ; "chown"
0000000000002713         mov        qword [rsp+0xa8+var_48], 0x0
000000000000271c         mov        qword [rsp+0xa8+var_40], 0x0
0000000000002725         mov        rdx, rsp
0000000000002728         mov        qword [rsp+0xa8+var_A8], rax
000000000000272c         lea        rax, qword [aTestInvocation]                ; "test invocation"
0000000000002733         mov        qword [rsp+0xa8+var_78], rcx
0000000000002738         lea        rcx, qword [aSha384sum]                     ; "sha384sum"
000000000000273f         mov        qword [rsp+0xa8+var_A0], rax
0000000000002744         lea        rax, qword [aCoreutils]                     ; "coreutils"
000000000000274b         mov        qword [rsp+0xa8+var_68], rcx
0000000000002750         lea        rcx, qword [aSha512sum]                     ; "sha512sum"
0000000000002757         mov        qword [rsp+0xa8+var_98], rax
000000000000275c         lea        rax, qword [aMulticallInvoc]                ; "Multi-call invocation"
0000000000002763         mov        qword [rsp+0xa8+var_58], rcx
0000000000002768         mov        qword [rsp+0xa8+var_90], rax
000000000000276d         lea        rax, qword [aSha224sum]                     ; "sha224sum"
0000000000002774         mov        qword [rsp+0xa8+var_88], rax
0000000000002779         lea        rax, qword [aSha2Utilities]                 ; "sha2 utilities"
0000000000002780         mov        qword [rsp+0xa8+var_80], rax
0000000000002785         mov        qword [rsp+0xa8+var_70], rax
000000000000278a         mov        qword [rsp+0xa8+var_60], rax
000000000000278f         mov        qword [rsp+0xa8+var_50], rax
0000000000002794         nop        dword [rax]

                     loc_2798:
0000000000002798         add        rdx, 0x10                                   ; CODE XREF=usage+805
000000000000279c         mov        rdi, qword [rdx]
000000000000279f         test       rdi, rdi
00000000000027a2         je         loc_27b7

00000000000027a4         mov        ecx, 0x6
00000000000027a9         mov        rsi, rbx
00000000000027ac         rep  cmpsb byte [rsi], byte [rdi]
00000000000027ae         seta       al
00000000000027b1         sbb        al, 0x0
00000000000027b3         test       al, al
00000000000027b5         jne        loc_2798

                     loc_27b7:
00000000000027b7         mov        r12, qword [rdx+8]                          ; CODE XREF=usage+786
00000000000027bb         xor        edi, edi
00000000000027bd         mov        edx, 0x5
00000000000027c2         lea        rsi, qword [aNsOnlineHelpSn]                ; "\\n%s online help: <%s>\\n"
00000000000027c9         test       r12, r12
00000000000027cc         je         loc_2893

00000000000027d2         call       j_dcgettext                                 ; dcgettext
00000000000027d7         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
00000000000027de         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0xaae0
00000000000027e5         mov        rsi, rax
00000000000027e8         mov        edi, 0x1
00000000000027ed         xor        eax, eax
00000000000027ef         call       j___printf_chk                              ; __printf_chk
00000000000027f4         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
00000000000027f6         mov        edi, 0x5                                    ; argument "__category" for method j_setlocale
00000000000027fb         call       j_setlocale                                 ; setlocale
0000000000002800         test       rax, rax
0000000000002803         je         loc_2821

0000000000002805         lea        rsi, qword [aCoreutils+10]                  ; argument "__s2" for method j_strncmp, 0xaaee
000000000000280c         mov        edx, 0x3                                    ; argument "__n" for method j_strncmp
0000000000002811         mov        rdi, rax                                    ; argument "__s1" for method j_strncmp
0000000000002814         call       j_strncmp                                   ; strncmp
0000000000002819         test       eax, eax
000000000000281b         jne        loc_2928

                     loc_2821:
0000000000002821         lea        rsi, qword [aFullDocumentat]                ; argument "msgid" for method j_dcgettext, "Full documentation <%s%s>\\n", CODE XREF=usage+883, usage+1213
0000000000002828         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000282a         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000282f         call       j_dcgettext                                 ; dcgettext
0000000000002834         lea        rcx, qword [aChown]                         ; "chown"
000000000000283b         lea        rdx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000002842         mov        rsi, rax
0000000000002845         mov        edi, 0x1
000000000000284a         xor        eax, eax
000000000000284c         call       j___printf_chk                              ; __printf_chk
0000000000002851         cmp        r12, rbx
0000000000002854         lea        rcx, qword [aMulticallInvoc+10]             ; 0xaa86
000000000000285b         lea        rbx, qword [aWrittenBySSAnd+27]             ; 0xc049
0000000000002862         cmove      rbx, rcx

                     loc_2866:
0000000000002866         lea        rsi, qword [aOrAvailableLoc]                ; argument "msgid" for method j_dcgettext, "or available locally via: info '(coreutils) %s%s'\\n", CODE XREF=usage+1164
000000000000286d         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000286f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002874         call       j_dcgettext                                 ; dcgettext
0000000000002879         mov        rcx, rbx
000000000000287c         mov        rsi, rax
000000000000287f         mov        rdx, r12
0000000000002882         mov        edi, 0x1
0000000000002887         xor        eax, eax
0000000000002889         call       j___printf_chk                              ; __printf_chk
000000000000288e         jmp        loc_24e6

                     loc_2893:
0000000000002893         call       j_dcgettext                                 ; dcgettext, CODE XREF=usage+828
0000000000002898         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
000000000000289f         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0xaae0
00000000000028a6         mov        rsi, rax
00000000000028a9         mov        edi, 0x1
00000000000028ae         xor        eax, eax
00000000000028b0         call       j___printf_chk                              ; __printf_chk
00000000000028b5         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
00000000000028b7         mov        edi, 0x5                                    ; argument "__category" for method j_setlocale
00000000000028bc         call       j_setlocale                                 ; setlocale
00000000000028c1         test       rax, rax
00000000000028c4         je         loc_28de

00000000000028c6         lea        rsi, qword [aCoreutils+10]                  ; argument "__s2" for method j_strncmp, 0xaaee
00000000000028cd         mov        edx, 0x3                                    ; argument "__n" for method j_strncmp
00000000000028d2         mov        rdi, rax                                    ; argument "__s1" for method j_strncmp
00000000000028d5         call       j_strncmp                                   ; strncmp
00000000000028da         test       eax, eax
00000000000028dc         jne        loc_2921

                     loc_28de:
00000000000028de         lea        rsi, qword [aFullDocumentat]                ; argument "msgid" for method j_dcgettext, "Full documentation <%s%s>\\n", CODE XREF=usage+1076
00000000000028e5         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000028ea         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000028ec         lea        r12, qword [aChown]                         ; "chown"
00000000000028f3         lea        rbx, qword [aMulticallInvoc+10]             ; 0xaa86
00000000000028fa         call       j_dcgettext                                 ; dcgettext
00000000000028ff         lea        rcx, qword [aChown]                         ; "chown"
0000000000002906         lea        rdx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
000000000000290d         mov        rsi, rax
0000000000002910         mov        edi, 0x1
0000000000002915         xor        eax, eax
0000000000002917         call       j___printf_chk                              ; __printf_chk
000000000000291c         jmp        loc_2866

                     loc_2921:
0000000000002921         lea        r12, qword [aChown]                         ; "chown", CODE XREF=usage+1100

                     loc_2928:
0000000000002928         mov        r13, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=usage+907
000000000000292f         lea        rsi, qword [aReportAnyTrans]                ; argument "msgid" for method j_dcgettext, "Report any translation bugs to <https://translationproject.org/team/>\\n"
0000000000002936         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002938         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000293d         call       j_dcgettext                                 ; dcgettext
0000000000002942         mov        rsi, r13                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002945         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002948         call       j_fputs_unlocked                            ; fputs_unlocked
000000000000294d         jmp        loc_2821
0000000000002952         align      32                                          ; End of unwind block (FDE at 0xcb6c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     user_group_str:
0000000000002960         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0xcc04), CODE XREF=sub_2b60+339, sub_2b60+375, sub_2fd0+610
0000000000002963         push       r12
0000000000002965         push       rbp
0000000000002966         push       rbx
0000000000002967         je         loc_29b8

0000000000002969         test       rsi, rsi
000000000000296c         je         loc_29c0

000000000000296e         mov        rbx, rsi
0000000000002971         mov        rbp, rdi
0000000000002974         call       j_strlen                                    ; strlen
0000000000002979         mov        rdi, rbx                                    ; argument "__s" for method j_strlen
000000000000297c         mov        r12, rax
000000000000297f         call       j_strlen                                    ; strlen
0000000000002984         lea        rdi, qword [r12+rax+2]
0000000000002989         call       xmalloc                                     ; xmalloc
000000000000298e         mov        rsi, rbp                                    ; argument "__src" for method j_stpcpy
0000000000002991         mov        rdi, rax                                    ; argument "__dest" for method j_stpcpy
0000000000002994         mov        r12, rax
0000000000002997         call       j_stpcpy                                    ; stpcpy
000000000000299c         lea        rdi, qword [rax+1]                          ; argument "__dest" for method j_strcpy
00000000000029a0         mov        byte [rax], 0x3a
00000000000029a3         mov        rsi, rbx                                    ; argument "__src" for method j_strcpy
00000000000029a6         call       j_strcpy                                    ; strcpy

                     loc_29ab:
00000000000029ab         mov        rax, r12                                    ; CODE XREF=user_group_str+115
00000000000029ae         pop        rbx
00000000000029af         pop        rbp
00000000000029b0         pop        r12
00000000000029b2         ret
                        ; endp
00000000000029b3         align      8

                     loc_29b8:
00000000000029b8         test       rsi, rsi                                    ; CODE XREF=user_group_str+7
00000000000029bb         je         loc_29d0

00000000000029bd         mov        rdi, rsi

                     loc_29c0:
00000000000029c0         pop        rbx                                         ; CODE XREF=user_group_str+12
00000000000029c1         pop        rbp
00000000000029c2         pop        r12
00000000000029c4         jmp        xstrdup                                     ; xstrdup
00000000000029c9         align      16

                     loc_29d0:
00000000000029d0         xor        r12d, r12d                                  ; CODE XREF=user_group_str+91
00000000000029d3         jmp        loc_29ab
00000000000029d5         align      32                                          ; End of unwind block (FDE at 0xcc04)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     chopt_init:
00000000000029e0         mov        dword [rdi], 0x2                            ; Begin of unwind block (FDE at 0xcc40), CODE XREF=main+165
00000000000029e6         mov        qword [rdi+8], 0x0
00000000000029ee         mov        byte [rdi+0x10], 0x1
00000000000029f2         mov        byte [rdi+4], 0x0
00000000000029f6         mov        byte [rdi+0x11], 0x0
00000000000029fa         mov        qword [rdi+0x18], 0x0
0000000000002a02         mov        qword [rdi+0x20], 0x0
0000000000002a0a         ret
                        ; endp
0000000000002a0b         align      16                                          ; End of unwind block (FDE at 0xcc40)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     chopt_free:
0000000000002a10         push       rbx                                         ; Begin of unwind block (FDE at 0xcc54)
0000000000002a11         mov        rbx, rdi
0000000000002a14         mov        rdi, qword [rdi+0x18]
0000000000002a18         call       sub_1de0                                    ; sub_1de0
0000000000002a1d         mov        rdi, qword [rbx+0x20]
0000000000002a21         pop        rbx
0000000000002a22         jmp        sub_1de0                                    ; sub_1de0
                        ; endp
0000000000002a27         align      16                                          ; End of unwind block (FDE at 0xcc54)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16


                     gid_to_name:
0000000000002a30         push       rbx                                         ; Begin of unwind block (FDE at 0xcc70), CODE XREF=main+831, sub_2b60+317, sub_3470+99
0000000000002a31         mov        ebx, edi
0000000000002a33         sub        rsp, 0x20
0000000000002a37         mov        rax, qword [fs:0x28]
0000000000002a40         mov        qword [rsp+0x28+var_10], rax
0000000000002a45         xor        eax, eax
0000000000002a47         call       j_getgrgid                                  ; getgrgid
0000000000002a4c         test       rax, rax
0000000000002a4f         je         loc_2a70

0000000000002a51         mov        rdi, qword [rax]

                     loc_2a54:
0000000000002a54         call       xstrdup                                     ; xstrdup, CODE XREF=gid_to_name+77
0000000000002a59         mov        rdx, qword [rsp+0x28+var_10]
0000000000002a5e         xor        rdx, qword [fs:0x28]
0000000000002a67         jne        loc_2a7f

0000000000002a69         add        rsp, 0x20
0000000000002a6d         pop        rbx
0000000000002a6e         ret
                        ; endp
0000000000002a6f         align      16

                     loc_2a70:
0000000000002a70         mov        edi, ebx                                    ; CODE XREF=gid_to_name+31
0000000000002a72         mov        rsi, rsp
0000000000002a75         call       umaxtostr                                   ; umaxtostr
0000000000002a7a         mov        rdi, rax
0000000000002a7d         jmp        loc_2a54

                     loc_2a7f:
0000000000002a7f         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=gid_to_name+55
                        ; endp
0000000000002a84         align      16                                          ; End of unwind block (FDE at 0xcc70)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16


                     uid_to_name:
0000000000002a90         push       rbx                                         ; Begin of unwind block (FDE at 0xcc94), CODE XREF=main+817, sub_2b60+303, sub_3470+85
0000000000002a91         mov        ebx, edi
0000000000002a93         sub        rsp, 0x20
0000000000002a97         mov        rax, qword [fs:0x28]
0000000000002aa0         mov        qword [rsp+0x28+var_10], rax
0000000000002aa5         xor        eax, eax
0000000000002aa7         call       j_getpwuid                                  ; getpwuid
0000000000002aac         test       rax, rax
0000000000002aaf         je         loc_2ad0

0000000000002ab1         mov        rdi, qword [rax]

                     loc_2ab4:
0000000000002ab4         call       xstrdup                                     ; xstrdup, CODE XREF=uid_to_name+77
0000000000002ab9         mov        rdx, qword [rsp+0x28+var_10]
0000000000002abe         xor        rdx, qword [fs:0x28]
0000000000002ac7         jne        loc_2adf

0000000000002ac9         add        rsp, 0x20
0000000000002acd         pop        rbx
0000000000002ace         ret
                        ; endp
0000000000002acf         align      16

                     loc_2ad0:
0000000000002ad0         mov        edi, ebx                                    ; CODE XREF=uid_to_name+31
0000000000002ad2         mov        rsi, rsp
0000000000002ad5         call       umaxtostr                                   ; umaxtostr
0000000000002ada         mov        rdi, rax
0000000000002add         jmp        loc_2ab4

                     loc_2adf:
0000000000002adf         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=uid_to_name+55
                        ; endp
0000000000002ae4         align      16                                          ; End of unwind block (FDE at 0xcc94)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_40: int64_t, -64
        ;    var_B8: int32_t, -184
        ;    var_BC: int32_t, -188
        ;    var_D0: int64_t, -208
        ;    var_D8: int64_t, -216
        ;    var_168: int8_t, -360
        ;    var_170: int64_t, -368
        ;    var_178: int64_t, -376
        ;    var_17C: int32_t, -380
        ;    var_188: int64_t, -392
        ;    var_190: int64_t, -400
        ;    var_198: int64_t, -408
        ;    var_1A0: int64_t, -416
        ;    var_1A8: int64_t, -424


                     change_file_owner:
0000000000002af0         push       r15                                         ; Begin of unwind block (FDE at 0xccb8), CODE XREF=chown_files+105
0000000000002af2         push       r14
0000000000002af4         push       r13
0000000000002af6         push       r12
0000000000002af8         mov        r12d, r8d
0000000000002afb         push       rbp
0000000000002afc         push       rbx
0000000000002afd         mov        rbp, rsi
0000000000002b00         sub        rsp, 0x178
0000000000002b07         movzx      r14d, word [rsi+0x70]
0000000000002b0c         mov        rax, qword [fs:0x28]
0000000000002b15         mov        qword [rsp+0x1a8+var_40], rax
0000000000002b1d         xor        eax, eax
0000000000002b1f         mov        rax, qword [rsi+0x38]
0000000000002b23         mov        qword [rsp+0x1a8+var_1A8], rdi
0000000000002b27         mov        dword [rsp+0x1a8+var_198], edx
0000000000002b2b         mov        dword [rsp+0x1a8+var_190], ecx
0000000000002b2f         cmp        r14w, 0xa
0000000000002b34         mov        rbx, qword [rsp+0x1a8+arg_0]
0000000000002b3c         mov        qword [rsp+0x1a8+var_1A0], rax
0000000000002b41         ja         loc_2b7b

0000000000002b43         lea        rcx, qword [aNeitherSymboli+56]             ; 0xba68
0000000000002b4a         movzx      edx, r14w
0000000000002b4e         movsxd     rax, dword [rcx+rdx*4]
0000000000002b52         add        rax, rcx
0000000000002b55         jmp        rax
                        ; endp
0000000000002b57         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_18: int, 32
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_0: int, 8
        ;    ret_addr: int64_t, 0


                     sub_2b60:
0000000000002b60         mov        rdi, qword [rsp+ret_addr]
0000000000002b64         mov        dword [rsp+arg_18], r9d
0000000000002b69         call       cycle_warning_required                      ; cycle_warning_required
0000000000002b6e         test       al, al
0000000000002b70         mov        r9d, dword [rsp+arg_18]
0000000000002b75         jne        loc_3358

                     loc_2b7b:
0000000000002b7b         cmp        r12d, 0xffffffff                            ; CODE XREF=change_file_owner+81, sub_2b60+704
0000000000002b7f         mov        r11, qword [rbp+0x30]
0000000000002b83         movzx      ecx, byte [rbx+0x10]
0000000000002b87         sete       dl
0000000000002b8a         cmp        r9d, 0xffffffff
0000000000002b8e         lea        r13, qword [rbp+0x78]
0000000000002b92         sete       al
0000000000002b95         and        dl, al
0000000000002b97         mov        r15d, edx
0000000000002b9a         je         loc_2bb0

0000000000002b9c         cmp        dword [rbx], 0x2
0000000000002b9f         jne        loc_2bb0

0000000000002ba1         cmp        qword [rbx+8], 0x0
0000000000002ba6         je         loc_3420

0000000000002bac         nop        dword [rax]

                     loc_2bb0:
0000000000002bb0         test       cl, cl                                      ; CODE XREF=sub_2b60+58, sub_2b60+63
0000000000002bb2         jne        loc_2db8

                     loc_2bb8:
0000000000002bb8         mov        eax, r14d                                   ; CODE XREF=sub_2b60+616, sub_2b60+686
0000000000002bbb         and        eax, 0xfffffffd
0000000000002bbe         cmp        ax, 0x4
0000000000002bc2         sete       al
0000000000002bc5         sub        r14d, 0x1
0000000000002bc9         cmp        r14w, 0x1
0000000000002bce         setbe      dl
0000000000002bd1         or         eax, edx
0000000000002bd3         cmp        r12d, 0xffffffff
0000000000002bd7         je         loc_2d88

0000000000002bdd         cmp        dword [r13+0x1c], r12d
0000000000002be1         je         loc_2d88

0000000000002be7         test       al, al
0000000000002be9         je         loc_3626

0000000000002bef         mov        rdx, qword [rbx+8]
0000000000002bf3         test       rdx, rdx
0000000000002bf6         je         loc_382f

0000000000002bfc         xor        ecx, ecx

                     loc_2bfe:
0000000000002bfe         mov        rax, qword [rdx]                            ; CODE XREF=sub_2b60+590
0000000000002c01         cmp        qword [r13+8], rax
0000000000002c05         je         loc_3038

                     loc_2c0b:
0000000000002c0b         test       cl, cl                                      ; CODE XREF=sub_2b60+571, sub_2b60+584, sub_2fd0+112
0000000000002c0d         je         loc_382f

                     loc_2c13:
0000000000002c13         movzx      ecx, byte [rbx+0x10]                        ; CODE XREF=sub_2fd0+66, sub_2fd0+79, sub_2fd0+92

                     loc_2c17:
0000000000002c17         mov        rax, qword [rsp+0x1a8+var_1A8]              ; CODE XREF=sub_2fd0+1133
0000000000002c1b         test       cl, cl
0000000000002c1d         mov        r14d, dword [rax+0x2c]
0000000000002c21         jne        loc_30d0

                     loc_2c27:
0000000000002c27         mov        ecx, dword [rsp+0x1a8+var_190]              ; argument "__group" for method j_fchownat, CODE XREF=sub_2fd0+1147
0000000000002c2b         mov        edx, dword [rsp+0x1a8+var_198]              ; argument "__owner" for method j_fchownat
0000000000002c2f         mov        r8d, 0x100                                  ; argument "__flag" for method j_fchownat
0000000000002c35         mov        rsi, r11                                    ; argument "__file" for method j_fchownat
0000000000002c38         mov        edi, r14d                                   ; argument "__fd" for method j_fchownat
0000000000002c3b         call       j_fchownat                                  ; fchownat
0000000000002c40         test       eax, eax
0000000000002c42         sete       r15b
0000000000002c46         je         loc_2c56

0000000000002c48         call       j___errno_location                          ; __errno_location
0000000000002c4d         cmp        dword [rax], 0x5f
0000000000002c50         je         loc_34a8

                     loc_2c56:
0000000000002c56         test       r15b, r15b                                  ; CODE XREF=sub_2b60+230, sub_2fd0+444
0000000000002c59         jne        loc_3198

                     loc_2c5f:
0000000000002c5f         movzx      r15d, byte [rbx+0x11]                       ; CODE XREF=sub_2fd0+376, sub_3470+352, sub_3470+772, sub_3780+159
0000000000002c64         test       r15b, r15b
0000000000002c67         je         loc_3278

                     loc_2c6d:
0000000000002c6d         mov        eax, dword [rbx]                            ; CODE XREF=sub_3470+272
0000000000002c6f         xor        r15d, r15d
0000000000002c72         cmp        eax, 0x2
0000000000002c75         je         loc_2d62

                     loc_2c7b:
0000000000002c7b         test       eax, eax                                    ; CODE XREF=sub_2fd0+758, sub_2fd0+890
0000000000002c7d         jne        loc_2d62

0000000000002c83         mov        dword [rsp+0x1a8+var_17C], 0x3

                     loc_2c8b:
0000000000002c8b         mov        edi, dword [r13+0x1c]                       ; CODE XREF=sub_2fd0+494, sub_2fd0+531, sub_2fd0+553, sub_3780+238
0000000000002c8f         call       uid_to_name                                 ; uid_to_name
0000000000002c94         mov        edi, dword [r13+0x20]
0000000000002c98         mov        qword [rsp+0x1a8+var_198], rax
0000000000002c9d         call       gid_to_name                                 ; gid_to_name
0000000000002ca2         mov        r12, qword [rbx+0x20]
0000000000002ca6         mov        r14, qword [rbx+0x18]
0000000000002caa         mov        r13, rax

                     loc_2cad:
0000000000002cad         mov        rsi, r12                                    ; CODE XREF=sub_2ef0+67
0000000000002cb0         mov        rdi, r14
0000000000002cb3         call       user_group_str                              ; user_group_str
0000000000002cb8         test       r12, r12
0000000000002cbb         mov        esi, 0x0
0000000000002cc0         mov        qword [rsp+0x1a8+var_190], rax
0000000000002cc5         cmovne     rsi, r13
0000000000002cc9         test       r14, r14
0000000000002ccc         je         loc_3230

0000000000002cd2         mov        rdi, qword [rsp+0x1a8+var_198]
0000000000002cd7         call       user_group_str                              ; user_group_str
0000000000002cdc         mov        qword [rsp+0x1a8+var_188], rax
0000000000002ce1         mov        eax, dword [rsp+0x1a8+var_17C]
0000000000002ce5         cmp        eax, 0x3
0000000000002ce8         je         loc_3200

0000000000002cee         cmp        eax, 0x4
0000000000002cf1         jne        loc_3450

0000000000002cf7         lea        rsi, qword [aOwnershipOfSRe]                ; argument "msgid" for method j_dcgettext, "ownership of %s retained as %s\\n"
0000000000002cfe         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002d03         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002d05         call       j_dcgettext                                 ; dcgettext
0000000000002d0a         mov        r12, rax
0000000000002d0d         nop        dword [rax]

                     loc_2d10:
0000000000002d10         mov        rsi, qword [rsp+0x1a8+var_1A0]              ; CODE XREF=sub_2fd0+603, sub_2fd0+669, sub_2fd0+1007, sub_2fd0+1042, sub_2fd0+1174, sub_3470+221, sub_3470+377, sub_3470+433, sub_3470+689
0000000000002d15         mov        edi, 0x4
0000000000002d1a         call       quotearg_style                              ; quotearg_style
0000000000002d1f         mov        r14, qword [rsp+0x1a8+var_188]
0000000000002d24         mov        r8, qword [rsp+0x1a8+var_190]
0000000000002d29         mov        rdx, rax
0000000000002d2c         mov        rsi, r12
0000000000002d2f         mov        edi, 0x1
0000000000002d34         xor        eax, eax
0000000000002d36         mov        rcx, r14
0000000000002d39         call       j___printf_chk                              ; __printf_chk
0000000000002d3e         mov        rdi, r14
0000000000002d41         call       sub_1de0                                    ; sub_1de0
0000000000002d46         mov        rdi, qword [rsp+0x1a8+var_190]
0000000000002d4b         call       sub_1de0                                    ; sub_1de0

                     loc_2d50:
0000000000002d50         mov        rdi, qword [rsp+0x1a8+var_198]              ; CODE XREF=sub_3470+162
0000000000002d55         call       sub_1de0                                    ; sub_1de0
0000000000002d5a         mov        rdi, r13
0000000000002d5d         call       sub_1de0                                    ; sub_1de0

                     loc_2d62:
0000000000002d62         cmp        byte [rbx+4], 0x0                           ; CODE XREF=sub_2b60+277, sub_2b60+285, sub_2fd0+461, sub_2fd0+539, sub_2fd0+764, sub_2fd0+896, sub_3470+67, sub_3470+75, sub_3470+462, sub_3470+658, sub_3780+186
0000000000002d66         jne        loc_2fe0

0000000000002d6c         mov        rdi, qword [rsp+0x1a8+var_1A8]
0000000000002d70         mov        edx, 0x4
0000000000002d75         mov        rsi, rbp
0000000000002d78         call       rpl_fts_set                                 ; rpl_fts_set
0000000000002d7d         jmp        loc_2fe0
0000000000002d82         align      8

                     loc_2d88:
0000000000002d88         cmp        r9d, 0xffffffff                             ; CODE XREF=sub_2b60+119, sub_2b60+129
0000000000002d8c         je         loc_3010

0000000000002d92         cmp        dword [r13+0x20], r9d
0000000000002d96         sete       cl
0000000000002d99         test       al, al
0000000000002d9b         je         loc_2c0b

0000000000002da1         mov        rdx, qword [rbx+8]
0000000000002da5         test       rdx, rdx
0000000000002da8         je         loc_2c0b

0000000000002dae         jmp        loc_2bfe
0000000000002db3         align      8

                     loc_2db8:
0000000000002db8         mov        eax, dword [rbp+0x90]                       ; CODE XREF=sub_2b60+82, sub_2fd0+1106
0000000000002dbe         and        eax, 0xf000
0000000000002dc3         cmp        eax, 0xa000
0000000000002dc8         jne        loc_2bb8

0000000000002dce         mov        rax, qword [rsp+0x1a8+var_1A8]
0000000000002dd2         lea        r13, qword [rsp+0x1a8+var_168]
0000000000002dd7         xor        r8d, r8d                                    ; argument "__flag" for method j___fxstatat
0000000000002dda         mov        rdx, r11                                    ; argument "__filename" for method j___fxstatat
0000000000002ddd         mov        edi, 0x1                                    ; argument "__ver" for method j___fxstatat
0000000000002de2         mov        dword [rsp+0x1a8+var_17C], r9d
0000000000002de7         mov        rcx, r13                                    ; argument "__stat_buf" for method j___fxstatat
0000000000002dea         mov        qword [rsp+0x1a8+var_188], r11
0000000000002def         mov        esi, dword [rax+0x2c]                       ; argument "__fildes" for method j___fxstatat
0000000000002df2         call       j___fxstatat                                ; __fxstatat
0000000000002df7         test       eax, eax
0000000000002df9         jne        loc_3578

0000000000002dff         movzx      r14d, word [rbp+0x70]
0000000000002e04         mov        r11, qword [rsp+0x1a8+var_188]
0000000000002e09         mov        r9d, dword [rsp+0x1a8+var_17C]
0000000000002e0e         jmp        loc_2bb8
0000000000002e13         nop        dword [rax+rax]
0000000000002e18         movzx      r15d, byte [rbx+4]
0000000000002e1d         test       r15b, r15b
0000000000002e20         je         sub_2b60+27
0000000000002e26         mov        rax, qword [rbx+8]
0000000000002e2a         test       rax, rax
0000000000002e2d         je         sub_2fd0+16
0000000000002e33         mov        rbx, qword [rax]
0000000000002e36         cmp        qword [rsi+0x80], rbx
0000000000002e3d         jne        sub_2fd0+16
0000000000002e43         mov        rax, qword [rax+8]
0000000000002e47         cmp        qword [rsi+0x78], rax
0000000000002e4b         jne        sub_2fd0+16
0000000000002e51         lea        rdx, qword [aLibs+6]                        ; 0xbae6
0000000000002e58         mov        rsi, qword [rsp+8]
0000000000002e5d         mov        ecx, 0x2
0000000000002e62         mov        rdi, rdx
0000000000002e65         rep  cmpsb byte [rsi], byte [rdi]
0000000000002e67         seta       al
0000000000002e6a         sbb        al, 0x0
0000000000002e6c         test       al, al
0000000000002e6e         jne        sub_3780                                    ; sub_3780
0000000000002e74         mov        rsi, qword [rsp+8]
0000000000002e79         mov        edi, 0x4
0000000000002e7e         call       quotearg_style                              ; quotearg_style
0000000000002e83         lea        rsi, qword [aItIsDangerousT]                ; "it is dangerous to operate recursively on %s"
0000000000002e8a         mov        rbx, rax
0000000000002e8d         mov        edx, 0x5
0000000000002e92         xor        edi, edi
0000000000002e94         call       j_dcgettext                                 ; dcgettext
0000000000002e99         mov        rcx, rbx
0000000000002e9c         mov        rdx, rax
0000000000002e9f         xor        esi, esi
0000000000002ea1         xor        edi, edi
0000000000002ea3         xor        eax, eax
0000000000002ea5         call       j_error                                     ; error

                     loc_2eaa:
0000000000002eaa         lea        rsi, qword [aUseNopreserver]                ; argument "msgid" for method j_dcgettext, "use --no-preserve-root to override this failsafe", CODE XREF=sub_3780+77
0000000000002eb1         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002eb6         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002eb8         xor        r15d, r15d
0000000000002ebb         call       j_dcgettext                                 ; dcgettext
0000000000002ec0         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002ec2         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002ec5         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000002ec7         xor        eax, eax
0000000000002ec9         call       j_error                                     ; error
0000000000002ece         mov        rbx, qword [rsp+ret_addr]
0000000000002ed2         mov        edx, 0x4
0000000000002ed7         mov        rsi, rbp
0000000000002eda         mov        rdi, rbx
0000000000002edd         call       rpl_fts_set                                 ; rpl_fts_set
0000000000002ee2         mov        rdi, rbx
0000000000002ee5         call       rpl_fts_read                                ; rpl_fts_read
0000000000002eea         jmp        sub_2fd0+16
                        ; endp
0000000000002eef         nop


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2ef0:
0000000000002ef0         movzx      r15d, byte [rbx+0x11]
0000000000002ef5         test       r15b, r15b
0000000000002ef8         je         sub_3470                                    ; sub_3470
                        ; endp

                     loc_2efe:
0000000000002efe         mov        eax, dword [rbx]                            ; CODE XREF=sub_2f40+8
0000000000002f00         xor        r15d, r15d
0000000000002f03         cmp        eax, 0x2
0000000000002f06         je         sub_2b60+514

                     loc_2f0c:
0000000000002f0c         test       eax, eax                                    ; CODE XREF=sub_2f40+54
0000000000002f0e         jne        sub_2b60+514

0000000000002f14         xor        r15d, r15d
0000000000002f17         mov        dword [rsp+arg_24], 0x3
                        ; endp

                     loc_2f1f:
0000000000002f1f         mov        r12, qword [rbx+0x20]                       ; CODE XREF=sub_3780+219
0000000000002f23         mov        r14, qword [rbx+0x18]
0000000000002f27         xor        r13d, r13d
0000000000002f2a         mov        qword [rsp+0x1a8+var_198], 0x0
0000000000002f33         jmp        loc_2cad
0000000000002f38         align      64


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_24: int32_t, 44
        ;    arg_0: int, 8


                     sub_2f40:
0000000000002f40         movzx      r15d, byte [rbx+0x11]
0000000000002f45         test       r15b, r15b
0000000000002f48         jne        loc_2efe

0000000000002f4a         mov        rdx, qword [rsp+arg_0]
0000000000002f4f         mov        esi, 0x3
0000000000002f54         xor        edi, edi
0000000000002f56         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
0000000000002f5b         mov        esi, dword [rbp+0x40]                       ; argument "__errnum" for method j_error
0000000000002f5e         lea        rdx, qword [aSS+4]                          ; argument "__format" for method j_error, 0xab29
0000000000002f65         mov        rcx, rax
0000000000002f68         xor        eax, eax
0000000000002f6a         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000002f6c         call       j_error                                     ; error
0000000000002f71         mov        eax, dword [rbx]
0000000000002f73         cmp        eax, 0x2
0000000000002f76         jne        loc_2f0c

0000000000002f78         jmp        sub_2b60+514
                        ; endp
0000000000002f7d         align      128


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    ret_addr: int64_t, 0


                     sub_2f80:
0000000000002f80         cmp        qword [rsi+0x58], 0x0
0000000000002f85         jne        loc_2f92

0000000000002f87         cmp        qword [rsi+0x20], 0x0
0000000000002f8c         je         loc_3558

                     loc_2f92:
0000000000002f92         movzx      r15d, byte [rbx+0x11]                       ; CODE XREF=sub_2f80+5
0000000000002f97         test       r15b, r15b
0000000000002f9a         jne        sub_2ef0+14

0000000000002fa0         mov        rsi, qword [rsp+arg_0]
0000000000002fa5         mov        edi, 0x4
0000000000002faa         call       quotearg_style                              ; quotearg_style
0000000000002faf         lea        rsi, qword [aCannotAccessS]                 ; argument "msgid" for method j_dcgettext, "cannot access %s"
0000000000002fb6         mov        r12, rax
0000000000002fb9         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002fbe         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002fc0         call       j_dcgettext                                 ; dcgettext
0000000000002fc5         mov        esi, dword [rbp+0x40]
0000000000002fc8         mov        rcx, r12
0000000000002fcb         mov        rdx, rax
0000000000002fce         jmp        sub_2f40+40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2fd0:
0000000000002fd0         cmp        byte [rbx+4], 0x0
0000000000002fd4         jne        sub_2b60+27
                        ; endp

                     loc_2fda:
0000000000002fda         mov        r15d, 0x1                                   ; CODE XREF=sub_3470+254
                        ; endp

                     loc_2fe0:
0000000000002fe0         mov        rbx, qword [rsp+0x1a8+var_40]               ; CODE XREF=sub_2b60+518, sub_2b60+541, sub_2b60+717, sub_2b60+733, sub_2b60+747, sub_2fd0+243
0000000000002fe8         xor        rbx, qword [fs:0x28]
0000000000002ff1         mov        eax, r15d
0000000000002ff4         jne        loc_382a

0000000000002ffa         add        rsp, 0x178
0000000000003001         pop        rbx
0000000000003002         pop        rbp
0000000000003003         pop        r12
0000000000003005         pop        r13
0000000000003007         pop        r14
0000000000003009         pop        r15
000000000000300b         ret
                        ; endp
000000000000300c         align      16

                     loc_3010:
0000000000003010         test       al, al                                      ; CODE XREF=sub_2b60+556
0000000000003012         je         loc_2c13

0000000000003018         mov        rdx, qword [rbx+8]
000000000000301c         test       rdx, rdx
000000000000301f         je         loc_2c13

0000000000003025         mov        rdi, qword [rdx]
0000000000003028         cmp        qword [r13+8], rdi
000000000000302c         jne        loc_2c13

0000000000003032         mov        ecx, eax
0000000000003034         nop        dword [rax]

                     loc_3038:
0000000000003038         mov        rax, qword [rdx+8]                          ; CODE XREF=sub_2b60+165
000000000000303c         cmp        qword [r13], rax
0000000000003040         jne        loc_2c0b

0000000000003046         lea        rdx, qword [aLibs+6]                        ; 0xbae6
000000000000304d         mov        rsi, qword [rsp+0x1a8+var_1A0]
0000000000003052         mov        ecx, 0x2
0000000000003057         mov        rdi, rdx
000000000000305a         rep  cmpsb byte [rsi], byte [rdi]
000000000000305c         seta       al
000000000000305f         sbb        al, 0x0
0000000000003061         test       al, al
0000000000003063         jne        loc_3648

0000000000003069         mov        rsi, qword [rsp+0x1a8+var_1A0]
000000000000306e         mov        edi, 0x4
0000000000003073         call       quotearg_style                              ; quotearg_style
0000000000003078         lea        rsi, qword [aItIsDangerousT]                ; argument "msgid" for method j_dcgettext, "it is dangerous to operate recursively on %s"
000000000000307f         mov        rbx, rax
0000000000003082         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003087         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003089         call       j_dcgettext                                 ; dcgettext
000000000000308e         mov        rcx, rbx
0000000000003091         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000003094         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000003096         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000003098         xor        eax, eax
000000000000309a         call       j_error                                     ; error

                     loc_309f:
000000000000309f         lea        rsi, qword [aUseNopreserver]                ; argument "msgid" for method j_dcgettext, "use --no-preserve-root to override this failsafe", CODE XREF=sub_3470+549
00000000000030a6         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000030ab         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000030ad         xor        r15d, r15d
00000000000030b0         call       j_dcgettext                                 ; dcgettext
00000000000030b5         xor        esi, esi                                    ; argument "__errnum" for method j_error
00000000000030b7         mov        rdx, rax                                    ; argument "__format" for method j_error
00000000000030ba         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000030bc         xor        eax, eax
00000000000030be         call       j_error                                     ; error
00000000000030c3         jmp        loc_2fe0
00000000000030c8         align      16

                     loc_30d0:
00000000000030d0         test       r15b, r15b                                  ; CODE XREF=sub_2b60+193
00000000000030d3         jne        loc_3170

00000000000030d9         mov        eax, dword [r13+0x18]
00000000000030dd         and        eax, 0xf000
00000000000030e2         cmp        eax, 0x8000
00000000000030e7         je         loc_3498

00000000000030ed         cmp        eax, 0x4000
00000000000030f2         mov        dword [rsp+0x1a8+var_188], 0x10900
00000000000030fa         jne        loc_3170

                     loc_30fc:
00000000000030fc         mov        edx, dword [rsp+0x1a8+var_188]              ; CODE XREF=sub_3470+48
0000000000003100         mov        rsi, r11
0000000000003103         mov        edi, r14d
0000000000003106         mov        dword [rsp+0x1a8+var_178], r9d
000000000000310b         mov        byte [rsp+0x1a8+var_17C], cl
000000000000310f         mov        qword [rsp+0x1a8+var_170], r11
0000000000003114         call       j___openat_2                                ; __openat_2
0000000000003119         test       eax, eax
000000000000311b         mov        r8d, eax
000000000000311e         movzx      ecx, byte [rsp+0x1a8+var_17C]
0000000000003123         mov        r9d, dword [rsp+0x1a8+var_178]
0000000000003128         jns        loc_32d8

000000000000312e         call       j___errno_location                          ; __errno_location
0000000000003133         cmp        dword [rax], 0xd
0000000000003136         mov        r10, rax
0000000000003139         movzx      ecx, byte [rsp+0x1a8+var_17C]
000000000000313e         mov        r9d, dword [rsp+0x1a8+var_178]
0000000000003143         mov        r11, qword [rsp+0x1a8+var_170]
0000000000003148         jne        loc_2c5f

000000000000314e         mov        eax, dword [r13+0x18]
0000000000003152         and        eax, 0xf000
0000000000003157         cmp        eax, 0x8000
000000000000315c         je         loc_3726

                     loc_3162:
0000000000003162         mov        rax, qword [rsp+0x1a8+var_1A8]              ; CODE XREF=sub_3470+766
0000000000003166         mov        r14d, dword [rax+0x2c]
000000000000316a         nop        word [rax+rax]

                     loc_3170:
0000000000003170         mov        ecx, dword [rsp+0x1a8+var_190]              ; argument "__group" for method j_fchownat, CODE XREF=sub_2fd0+259, sub_2fd0+298
0000000000003174         mov        edx, dword [rsp+0x1a8+var_198]              ; argument "__owner" for method j_fchownat
0000000000003178         xor        r8d, r8d                                    ; argument "__flag" for method j_fchownat
000000000000317b         mov        rsi, r11                                    ; argument "__file" for method j_fchownat
000000000000317e         mov        edi, r14d                                   ; argument "__fd" for method j_fchownat
0000000000003181         call       j_fchownat                                  ; fchownat
0000000000003186         test       eax, eax
0000000000003188         sete       r15b
000000000000318c         jmp        loc_2c56
0000000000003191         align      8

                     loc_3198:
0000000000003198         mov        eax, dword [rbx]                            ; CODE XREF=sub_2b60+249
000000000000319a         cmp        eax, 0x2
000000000000319d         je         loc_2d62

                     loc_31a3:
00000000000031a3         mov        esi, dword [rsp+0x1a8+var_198]              ; CODE XREF=sub_3470+649
00000000000031a7         cmp        esi, 0xffffffff
00000000000031aa         je         loc_31c4

00000000000031ac         cmp        dword [r13+0x1c], esi
00000000000031b0         mov        r15d, 0x1
00000000000031b6         mov        dword [rsp+0x1a8+var_17C], 0x2
00000000000031be         jne        loc_2c8b

                     loc_31c4:
00000000000031c4         mov        esi, dword [rsp+0x1a8+var_190]              ; CODE XREF=sub_2fd0+474
00000000000031c8         cmp        esi, 0xffffffff
00000000000031cb         je         loc_33f0

00000000000031d1         cmp        dword [r13+0x20], esi
00000000000031d5         mov        r15d, 0x1
00000000000031db         mov        dword [rsp+0x1a8+var_17C], 0x2
00000000000031e3         jne        loc_2c8b

00000000000031e9         test       eax, eax
00000000000031eb         jne        loc_2d62

                     loc_31f1:
00000000000031f1         mov        dword [rsp+0x1a8+var_17C], 0x4              ; CODE XREF=sub_2fd0+1070
00000000000031f9         jmp        loc_2c8b
00000000000031fe         align      512

                     loc_3200:
0000000000003200         cmp        qword [rsp+0x1a8+var_188], 0x0              ; CODE XREF=sub_2b60+392, sub_2fd0+627
0000000000003206         mov        edx, 0x5
000000000000320b         je         loc_3520

0000000000003211         test       r14, r14
0000000000003214         je         loc_33c8

000000000000321a         lea        rsi, qword [aFailedToChange]                ; argument "msgid" for method j_dcgettext, "failed to change ownership of %s from %s to %s\\n"
0000000000003221         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003223         call       j_dcgettext                                 ; dcgettext
0000000000003228         mov        r12, rax
000000000000322b         jmp        loc_2d10

                     loc_3230:
0000000000003230         xor        edi, edi                                    ; CODE XREF=sub_2b60+364
0000000000003232         call       user_group_str                              ; user_group_str
0000000000003237         mov        qword [rsp+0x1a8+var_188], rax
000000000000323c         mov        eax, dword [rsp+0x1a8+var_17C]
0000000000003240         cmp        eax, 0x3
0000000000003243         je         loc_3200

0000000000003245         cmp        eax, 0x4
0000000000003248         jne        loc_33a0

000000000000324e         test       r12, r12
0000000000003251         mov        edx, 0x5
0000000000003256         je         loc_35d8

000000000000325c         lea        rsi, qword [aGroupOfSRetain]                ; argument "msgid" for method j_dcgettext, "group of %s retained as %s\\n"
0000000000003263         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003265         call       j_dcgettext                                 ; dcgettext
000000000000326a         mov        r12, rax
000000000000326d         jmp        loc_2d10
0000000000003272         align      8

                     loc_3278:
0000000000003278         mov        rsi, qword [rsp+0x1a8+var_1A0]              ; CODE XREF=sub_2b60+263
000000000000327d         mov        edi, 0x4
0000000000003282         call       quotearg_style                              ; quotearg_style
0000000000003287         cmp        dword [rsp+0x1a8+var_198], 0xffffffff
000000000000328c         mov        r14, rax
000000000000328f         mov        edx, 0x5
0000000000003294         je         loc_3408

000000000000329a         lea        rsi, qword [aChangingOwners]                ; argument "msgid" for method j_dcgettext, "changing ownership of %s"
00000000000032a1         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000032a3         call       j_dcgettext                                 ; dcgettext
00000000000032a8         mov        r12, rax

                     loc_32ab:
00000000000032ab         call       j___errno_location                          ; __errno_location, CODE XREF=sub_2fd0+1097
00000000000032b0         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
00000000000032b2         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000032b4         xor        eax, eax
00000000000032b6         mov        rcx, r14
00000000000032b9         mov        rdx, r12                                    ; argument "__format" for method j_error
00000000000032bc         call       j_error                                     ; error
00000000000032c1         mov        eax, dword [rbx]
00000000000032c3         cmp        eax, 0x2
00000000000032c6         jne        loc_2c7b

00000000000032cc         jmp        loc_2d62
00000000000032d1         align      8

                     loc_32d8:
00000000000032d8         lea        rdx, qword [rsp+0x1a8+var_D8]               ; argument "__stat_buf" for method j___fxstat, CODE XREF=sub_2fd0+344, sub_3470+756
00000000000032e0         mov        esi, r8d                                    ; argument "__fildes" for method j___fxstat
00000000000032e3         mov        edi, 0x1                                    ; argument "__ver" for method j___fxstat
00000000000032e8         mov        dword [rsp+0x1a8+var_188], r8d
00000000000032ed         mov        dword [rsp+0x1a8+var_178], r9d
00000000000032f2         mov        byte [rsp+0x1a8+var_17C], cl
00000000000032f6         call       j___fxstat                                  ; __fxstat
00000000000032fb         test       eax, eax
00000000000032fd         mov        r8d, dword [rsp+0x1a8+var_188]
0000000000003302         jne        loc_35b0

0000000000003308         mov        rax, qword [rsp+0x1a8+var_D0]
0000000000003310         cmp        qword [r13+8], rax
0000000000003314         movzx      ecx, byte [rsp+0x1a8+var_17C]
0000000000003319         mov        r9d, dword [rsp+0x1a8+var_178]
000000000000331e         je         loc_36a0

                     loc_3324:
0000000000003324         mov        dword [rsp+0x1a8+var_198], r8d              ; CODE XREF=sub_3470+572
0000000000003329         call       j___errno_location                          ; __errno_location
000000000000332e         mov        r8d, dword [rsp+0x1a8+var_198]
0000000000003333         mov        r12, rax
0000000000003336         mov        r14d, dword [rax]
0000000000003339         mov        edi, r8d                                    ; argument "__fd" for method j_close
000000000000333c         call       j_close                                     ; close
0000000000003341         mov        eax, dword [rbx]
0000000000003343         mov        dword [r12], r14d
0000000000003347         cmp        eax, 0x2
000000000000334a         jne        loc_2c7b

0000000000003350         jmp        loc_2d62
0000000000003355         align      8

                     loc_3358:
0000000000003358         mov        rdx, qword [rsp+arg_0]                      ; CODE XREF=sub_2b60+21
000000000000335d         mov        esi, 0x3
0000000000003362         xor        edi, edi
0000000000003364         xor        r15d, r15d
0000000000003367         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
000000000000336c         lea        rsi, qword [aWarningCircula]                ; argument "msgid" for method j_dcgettext, "WARNING: Circular directory structure.\\nThis almost certainly means that you have a corrupted file system.\\nNOTIFY YOUR SYSTEM MANAGER.\\nThe following directory is part of the cycle:\\n  %s\\n"
0000000000003373         mov        rbx, rax
0000000000003376         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000337b         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000337d         call       j_dcgettext                                 ; dcgettext
0000000000003382         mov        rcx, rbx
0000000000003385         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000003388         xor        esi, esi                                    ; argument "__errnum" for method j_error
000000000000338a         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000338c         xor        eax, eax
000000000000338e         call       j_error                                     ; error
0000000000003393         jmp        sub_2fd0+16
                        ; endp
0000000000003398         align      32

                     loc_33a0:
00000000000033a0         test       r12, r12                                    ; CODE XREF=sub_2fd0+632
00000000000033a3         mov        edx, 0x5
00000000000033a8         je         loc_3610

00000000000033ae         lea        rsi, qword [aChangedGroupOf]                ; argument "msgid" for method j_dcgettext, "changed group of %s from %s to %s\\n"
00000000000033b5         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000033b7         call       j_dcgettext                                 ; dcgettext
00000000000033bc         mov        r12, rax
00000000000033bf         jmp        loc_2d10
00000000000033c4         align      8

                     loc_33c8:
00000000000033c8         test       r12, r12                                    ; CODE XREF=sub_2fd0+580
00000000000033cb         je         loc_3710

00000000000033d1         lea        rsi, qword [aFailedToChange_b968]           ; argument "msgid" for method j_dcgettext, "failed to change group of %s from %s to %s\\n"
00000000000033d8         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000033da         call       j_dcgettext                                 ; dcgettext
00000000000033df         mov        r12, rax
00000000000033e2         jmp        loc_2d10
00000000000033e7         align      16

                     loc_33f0:
00000000000033f0         test       eax, eax                                    ; CODE XREF=sub_2fd0+507
00000000000033f2         jne        loc_3638

00000000000033f8         mov        r15d, 0x1
00000000000033fe         jmp        loc_31f1
0000000000003403         align      8

                     loc_3408:
0000000000003408         lea        rsi, qword [aChangingGroupO]                ; "changing group of %s", CODE XREF=sub_2fd0+708

                     loc_340f:
000000000000340f         xor        edi, edi                                    ; argument "domain" for method j_dcgettext, CODE XREF=sub_3470+308
0000000000003411         call       j_dcgettext                                 ; dcgettext
0000000000003416         mov        r12, rax
0000000000003419         jmp        loc_32ab
000000000000341e         align      32

                     loc_3420:
0000000000003420         test       cl, cl                                      ; CODE XREF=sub_2b60+70
0000000000003422         jne        loc_2db8

0000000000003428         mov        eax, r14d
000000000000342b         and        eax, 0xfffffffd
000000000000342e         cmp        ax, 0x4
0000000000003432         je         loc_3443

0000000000003434         sub        r14d, 0x1
0000000000003438         cmp        r14w, 0x1
000000000000343d         ja         loc_2c17

                     loc_3443:
0000000000003443         mov        rax, qword [rsp+0x1a8+var_1A8]              ; CODE XREF=sub_2fd0+1122
0000000000003447         mov        r14d, dword [rax+0x2c]
000000000000344b         jmp        loc_2c27

                     loc_3450:
0000000000003450         lea        rsi, qword [aChangedOwnersh]                ; argument "msgid" for method j_dcgettext, "changed ownership of %s from %s to %s\\n", CODE XREF=sub_2b60+401
0000000000003457         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000345c         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000345e         call       j_dcgettext                                 ; dcgettext
0000000000003463         mov        r12, rax
0000000000003466         jmp        loc_2d10
000000000000346b         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_3470:
0000000000003470         mov        rsi, qword [rsp+arg_0]
0000000000003475         mov        edi, 0x4
000000000000347a         call       quotearg_style                              ; quotearg_style
000000000000347f         mov        edx, 0x5
0000000000003484         mov        r12, rax
0000000000003487         lea        rsi, qword [aCannotReadDire]                ; "cannot read directory %s"
000000000000348e         jmp        sub_2f80+62
                        ; endp
0000000000003493         align      8

                     loc_3498:
0000000000003498         mov        dword [rsp+0x1a8+var_188], 0x900            ; CODE XREF=sub_2fd0+279
00000000000034a0         jmp        loc_30fc
00000000000034a5         align      8

                     loc_34a8:
00000000000034a8         mov        eax, dword [rbx]                            ; CODE XREF=sub_2b60+240
00000000000034aa         mov        r15d, 0x1
00000000000034b0         cmp        eax, 0x2
00000000000034b3         je         loc_2d62

00000000000034b9         test       eax, eax
00000000000034bb         jne        loc_2d62

00000000000034c1         mov        edi, dword [r13+0x1c]
00000000000034c5         call       uid_to_name                                 ; uid_to_name
00000000000034ca         mov        edi, dword [r13+0x20]
00000000000034ce         mov        qword [rsp+0x1a8+var_198], rax
00000000000034d3         call       gid_to_name                                 ; gid_to_name
00000000000034d8         mov        rsi, qword [rsp+0x1a8+var_1A0]
00000000000034dd         mov        edi, 0x4
00000000000034e2         mov        r13, rax
00000000000034e5         call       quotearg_style                              ; quotearg_style
00000000000034ea         lea        rsi, qword [aNeitherSymboli]                ; argument "msgid" for method j_dcgettext, "neither symbolic link %s nor referent has been changed\\n"
00000000000034f1         mov        r12, rax
00000000000034f4         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000034f6         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000034fb         call       j_dcgettext                                 ; dcgettext
0000000000003500         mov        rdx, r12
0000000000003503         mov        rsi, rax
0000000000003506         mov        edi, 0x1
000000000000350b         xor        eax, eax
000000000000350d         call       j___printf_chk                              ; __printf_chk
0000000000003512         jmp        loc_2d50
0000000000003517         align      32

                     loc_3520:
0000000000003520         test       r14, r14                                    ; CODE XREF=sub_2fd0+571
0000000000003523         lea        rsi, qword [aFailedToChange_b9c0]           ; "failed to change ownership of %s to %s\\n"
000000000000352a         je         loc_35f0

                     loc_3530:
0000000000003530         xor        edi, edi                                    ; argument "domain" for method j_dcgettext, CODE XREF=sub_3470+394, sub_3470+407
0000000000003532         call       j_dcgettext                                 ; dcgettext
0000000000003537         mov        r12, rax
000000000000353a         mov        rax, qword [rsp+0x1a8+var_190]
000000000000353f         mov        qword [rsp+0x1a8+var_190], 0x0
0000000000003548         mov        qword [rsp+0x1a8+var_188], rax
000000000000354d         jmp        loc_2d10
0000000000003552         align      8

                     loc_3558:
0000000000003558         mov        rdi, qword [rsp+ret_addr]                   ; CODE XREF=sub_2f80+12
000000000000355c         mov        qword [rsi+0x20], 0x1
0000000000003564         mov        edx, 0x1
0000000000003569         call       rpl_fts_set                                 ; rpl_fts_set
000000000000356e         jmp        loc_2fda
0000000000003573         align      8

                     loc_3578:
0000000000003578         movzx      r15d, byte [rbx+0x11]                       ; CODE XREF=sub_2b60+665
000000000000357d         test       r15b, r15b
0000000000003580         jne        loc_2c6d

0000000000003586         mov        rsi, qword [rsp+0x1a8+var_1A0]
000000000000358b         mov        edi, 0x4
0000000000003590         call       quotearg_style                              ; quotearg_style
0000000000003595         mov        edx, 0x5
000000000000359a         mov        r14, rax
000000000000359d         lea        rsi, qword [aCannotDerefere]                ; "cannot dereference %s"
00000000000035a4         jmp        loc_340f
00000000000035a9         align      16

                     loc_35b0:
00000000000035b0         mov        dword [rsp+0x1a8+var_190], r8d              ; CODE XREF=sub_2fd0+818, sub_3780+139
00000000000035b5         call       j___errno_location                          ; __errno_location
00000000000035ba         mov        r8d, dword [rsp+0x1a8+var_190]
00000000000035bf         mov        r12d, dword [rax]
00000000000035c2         mov        r14, rax
00000000000035c5         mov        edi, r8d                                    ; argument "__fd" for method j_close
00000000000035c8         call       j_close                                     ; close
00000000000035cd         mov        dword [r14], r12d
00000000000035d0         jmp        loc_2c5f
00000000000035d5         align      8

                     loc_35d8:
00000000000035d8         lea        rsi, qword [aOwnershipOfSRe_b73f]           ; argument "msgid" for method j_dcgettext, "ownership of %s retained\\n", CODE XREF=sub_2fd0+646
00000000000035df         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000035e1         call       j_dcgettext                                 ; dcgettext
00000000000035e6         mov        r12, rax
00000000000035e9         jmp        loc_2d10
00000000000035ee         align      16

                     loc_35f0:
00000000000035f0         test       r12, r12                                    ; CODE XREF=sub_3470+186
00000000000035f3         lea        rsi, qword [aFailedToChange_b9e8]           ; "failed to change group of %s to %s\\n"
00000000000035fa         jne        loc_3530

0000000000003600         lea        rsi, qword [aFailedToChange_b998]           ; "failed to change ownership of %s\\n"
0000000000003607         jmp        loc_3530
000000000000360c         align      16

                     loc_3610:
0000000000003610         lea        rsi, qword [aNoChangeToOwne]                ; argument "msgid" for method j_dcgettext, "no change to ownership of %s\\n", CODE XREF=sub_2fd0+984
0000000000003617         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003619         call       j_dcgettext                                 ; dcgettext
000000000000361e         mov        r12, rax
0000000000003621         jmp        loc_2d10

                     loc_3626:
0000000000003626         mov        eax, dword [rbx]                            ; CODE XREF=sub_2b60+137
0000000000003628         cmp        eax, 0x2
000000000000362b         je         loc_3638

000000000000362d         test       eax, eax
000000000000362f         je         loc_3848

0000000000003635         nop        dword [rax]

                     loc_3638:
0000000000003638         mov        r15d, 0x1                                   ; CODE XREF=sub_2fd0+1058, sub_3470+443
000000000000363e         jmp        loc_2d62
0000000000003643         align      8

                     loc_3648:
0000000000003648         mov        esi, 0x4                                    ; CODE XREF=sub_2fd0+147
000000000000364d         mov        edi, 0x1
0000000000003652         call       quotearg_n_style                            ; quotearg_n_style
0000000000003657         mov        rdx, qword [rsp+0x1a8+var_1A0]
000000000000365c         xor        edi, edi
000000000000365e         mov        esi, 0x4
0000000000003663         mov        rbp, rax
0000000000003666         call       quotearg_n_style                            ; quotearg_n_style
000000000000366b         lea        rsi, qword [aItIsDangerousT_b7b0]           ; argument "msgid" for method j_dcgettext, "it is dangerous to operate recursively on %s (same as %s)"
0000000000003672         mov        rbx, rax
0000000000003675         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003677         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000367c         call       j_dcgettext                                 ; dcgettext
0000000000003681         mov        r8, rbp
0000000000003684         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000003687         mov        rcx, rbx
000000000000368a         xor        esi, esi                                    ; argument "__errnum" for method j_error
000000000000368c         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000368e         xor        eax, eax
0000000000003690         call       j_error                                     ; error
0000000000003695         jmp        loc_309f
000000000000369a         align      32

                     loc_36a0:
00000000000036a0         mov        rax, qword [rsp+0x1a8+var_D8]               ; CODE XREF=sub_2fd0+846
00000000000036a8         cmp        qword [r13], rax
00000000000036ac         jne        loc_3324

00000000000036b2         cmp        r12d, 0xffffffff
00000000000036b6         je         loc_37d8

00000000000036bc         cmp        r12d, dword [rsp+0x1a8+var_BC]
00000000000036c4         je         loc_37d2

                     loc_36ca:
00000000000036ca         mov        dword [rsp+0x1a8+var_17C], r8d              ; CODE XREF=sub_3780+96
00000000000036cf         mov        byte [rsp+0x1a8+var_188], cl
00000000000036d3         call       j___errno_location                          ; __errno_location
00000000000036d8         mov        r8d, dword [rsp+0x1a8+var_17C]
00000000000036dd         mov        r14d, dword [rax]
00000000000036e0         mov        r12, rax
00000000000036e3         mov        edi, r8d                                    ; argument "__fd" for method j_close
00000000000036e6         call       j_close                                     ; close
00000000000036eb         mov        dword [r12], r14d

                     loc_36ef:
00000000000036ef         mov        eax, dword [rbx]                            ; CODE XREF=sub_3780+165
00000000000036f1         movzx      ecx, byte [rsp+0x1a8+var_188]
00000000000036f6         cmp        eax, 0x2
00000000000036f9         jne        loc_31a3

00000000000036ff         mov        r15d, ecx
0000000000003702         jmp        loc_2d62
0000000000003707         align      16

                     loc_3710:
0000000000003710         lea        rsi, qword [aFailedToChange_b998]           ; argument "msgid" for method j_dcgettext, "failed to change ownership of %s\\n", CODE XREF=sub_2fd0+1019
0000000000003717         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003719         call       j_dcgettext                                 ; dcgettext
000000000000371e         mov        r12, rax
0000000000003721         jmp        loc_2d10

                     loc_3726:
0000000000003726         mov        edx, dword [rsp+0x1a8+var_188]              ; CODE XREF=sub_2fd0+396
000000000000372a         mov        rsi, r11
000000000000372d         mov        edi, r14d
0000000000003730         mov        dword [rsp+0x1a8+var_170], r9d
0000000000003735         mov        qword [rsp+0x1a8+var_178], r10
000000000000373a         mov        byte [rsp+0x1a8+var_17C], cl
000000000000373e         mov        qword [rsp+0x1a8+var_188], r11
0000000000003743         or         edx, 0x1
0000000000003746         call       j___openat_2                                ; __openat_2
000000000000374b         test       eax, eax
000000000000374d         mov        r8d, eax
0000000000003750         mov        r11, qword [rsp+0x1a8+var_188]
0000000000003755         movzx      ecx, byte [rsp+0x1a8+var_17C]
000000000000375a         mov        r10, qword [rsp+0x1a8+var_178]
000000000000375f         mov        r9d, dword [rsp+0x1a8+var_170]
0000000000003764         jns        loc_32d8

000000000000376a         cmp        dword [r10], 0xd
000000000000376e         je         loc_3162

0000000000003774         jmp        loc_2c5f
0000000000003779         align      128


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    ret_addr: int64_t, 0


                     sub_3780:
0000000000003780         mov        esi, 0x4                                    ; CODE XREF=sub_2b60+782
0000000000003785         mov        edi, 0x1
000000000000378a         call       quotearg_n_style                            ; quotearg_n_style
000000000000378f         mov        rdx, qword [rsp+arg_0]
0000000000003794         xor        edi, edi
0000000000003796         mov        esi, 0x4
000000000000379b         mov        r12, rax
000000000000379e         call       quotearg_n_style                            ; quotearg_n_style
00000000000037a3         lea        rsi, qword [aItIsDangerousT_b7b0]           ; argument "msgid" for method j_dcgettext, "it is dangerous to operate recursively on %s (same as %s)"
00000000000037aa         mov        rbx, rax
00000000000037ad         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000037af         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000037b4         call       j_dcgettext                                 ; dcgettext
00000000000037b9         mov        r8, r12
00000000000037bc         mov        rdx, rax                                    ; argument "__format" for method j_error
00000000000037bf         mov        rcx, rbx
00000000000037c2         xor        esi, esi                                    ; argument "__errnum" for method j_error
00000000000037c4         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000037c6         xor        eax, eax
00000000000037c8         call       j_error                                     ; error
00000000000037cd         jmp        loc_2eaa

                     loc_37d2:
00000000000037d2         cmp        r9d, 0xffffffff                             ; CODE XREF=sub_3470+596
00000000000037d6         je         loc_37e6

                     loc_37d8:
00000000000037d8         cmp        r9d, dword [rsp+0x1a8+var_B8]               ; CODE XREF=sub_3470+582
00000000000037e0         jne        loc_36ca

                     loc_37e6:
00000000000037e6         mov        edx, dword [rsp+0x1a8+var_190]              ; argument "__group" for method j_fchown, CODE XREF=sub_3780+86
00000000000037ea         mov        esi, dword [rsp+0x1a8+var_198]              ; argument "__owner" for method j_fchown
00000000000037ee         mov        edi, r8d                                    ; argument "__fd" for method j_fchown
00000000000037f1         mov        byte [rsp+0x1a8+var_17C], cl
00000000000037f5         mov        dword [rsp+0x1a8+var_188], r8d
00000000000037fa         call       j_fchown                                    ; fchown
00000000000037ff         test       eax, eax
0000000000003801         mov        r8d, dword [rsp+0x1a8+var_188]
0000000000003806         movzx      ecx, byte [rsp+0x1a8+var_17C]
000000000000380b         jne        loc_35b0

0000000000003811         mov        edi, r8d                                    ; argument "__fd" for method j_close
0000000000003814         mov        byte [rsp+0x1a8+var_188], cl
0000000000003818         call       j_close                                     ; close
000000000000381d         test       eax, eax
000000000000381f         jne        loc_2c5f

0000000000003825         jmp        loc_36ef

                     loc_382a:
000000000000382a         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=sub_2fd0+36
                        ; endp

                     loc_382f:
000000000000382f         mov        eax, dword [rbx]                            ; CODE XREF=sub_2b60+150, sub_2b60+173
0000000000003831         mov        r15d, 0x1
0000000000003837         cmp        eax, 0x2
000000000000383a         je         loc_2d62

0000000000003840         test       eax, eax
0000000000003842         jne        loc_2d62

                     loc_3848:
0000000000003848         test       r13, r13                                    ; CODE XREF=sub_3470+447
000000000000384b         jne        loc_3860

000000000000384d         mov        r15d, 0x1
0000000000003853         mov        dword [rsp+0x1a8+var_17C], 0x4
000000000000385b         jmp        loc_2f1f

                     loc_3860:
0000000000003860         mov        dword [rsp+0x1a8+var_17C], 0x4              ; CODE XREF=sub_3780+203
0000000000003868         mov        r15d, 0x1
000000000000386e         jmp        loc_2c8b
0000000000003873         align      128                                         ; End of unwind block (FDE at 0xccb8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_3C: int32_t, -60


                     chown_files:
0000000000003880         push       r15                                         ; Begin of unwind block (FDE at 0xcd08), CODE XREF=main+901
0000000000003882         push       r14
0000000000003884         mov        r15d, ecx
0000000000003887         push       r13
0000000000003889         push       r12
000000000000388b         mov        r13d, r8d
000000000000388e         push       rbp
000000000000388f         push       rbx
0000000000003890         mov        r14d, r9d
0000000000003893         sub        rsp, 0x18
0000000000003897         cmp        r8d, 0xffffffff
000000000000389b         mov        dword [rsp+0x48+var_3C], edx
000000000000389f         mov        r12, qword [rsp+0x48+arg_0]
00000000000038a4         jne        loc_38b8

00000000000038a6         cmp        r9d, 0xffffffff
00000000000038aa         jne        loc_38b8

00000000000038ac         cmp        byte [r12+0x10], 0x0
00000000000038b2         je         loc_3960

                     loc_38b8:
00000000000038b8         xor        edx, edx                                    ; CODE XREF=chown_files+36, chown_files+42, chown_files+237
00000000000038ba         mov        ebx, 0x1
00000000000038bf         call       xfts_open                                   ; xfts_open
00000000000038c4         mov        rbp, rax
00000000000038c7         jmp        loc_38f2
00000000000038c9         align      16

                     loc_38d0:
00000000000038d0         sub        rsp, 0x8                                    ; CODE XREF=chown_files+125
00000000000038d4         mov        r9d, r14d
00000000000038d7         mov        r8d, r13d
00000000000038da         push       r12
00000000000038dc         mov        edx, dword [rsp+0x58+var_3C]
00000000000038e0         mov        ecx, r15d
00000000000038e3         mov        rsi, rax
00000000000038e6         mov        rdi, rbp
00000000000038e9         call       change_file_owner                           ; change_file_owner
00000000000038ee         and        ebx, eax
00000000000038f0         pop        rax
00000000000038f1         pop        rdx

                     loc_38f2:
00000000000038f2         mov        rdi, rbp                                    ; CODE XREF=chown_files+71
00000000000038f5         call       rpl_fts_read                                ; rpl_fts_read
00000000000038fa         test       rax, rax
00000000000038fd         jne        loc_38d0

00000000000038ff         call       j___errno_location                          ; __errno_location
0000000000003904         mov        ecx, dword [rax]
0000000000003906         mov        r13, rax
0000000000003909         test       ecx, ecx
000000000000390b         je         loc_3919

000000000000390d         movzx      ebx, byte [r12+0x11]
0000000000003913         test       bl, bl
0000000000003915         je         loc_3978

0000000000003917         xor        ebx, ebx

                     loc_3919:
0000000000003919         mov        rdi, rbp                                    ; CODE XREF=chown_files+139, chown_files+283
000000000000391c         call       rpl_fts_close                               ; rpl_fts_close
0000000000003921         test       eax, eax
0000000000003923         je         loc_394a

0000000000003925         lea        rsi, qword [aFtscloseFailed]                ; argument "msgid" for method j_dcgettext, "fts_close failed"
000000000000392c         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003931         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003933         xor        ebx, ebx
0000000000003935         call       j_dcgettext                                 ; dcgettext
000000000000393a         mov        esi, dword [r13]                            ; argument "__errnum" for method j_error
000000000000393e         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000003941         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000003943         xor        eax, eax
0000000000003945         call       j_error                                     ; error

                     loc_394a:
000000000000394a         add        rsp, 0x18                                   ; CODE XREF=chown_files+163
000000000000394e         mov        eax, ebx
0000000000003950         pop        rbx
0000000000003951         pop        rbp
0000000000003952         pop        r12
0000000000003954         pop        r13
0000000000003956         pop        r14
0000000000003958         pop        r15
000000000000395a         ret
                        ; endp
000000000000395b         align      32

                     loc_3960:
0000000000003960         mov        eax, esi                                    ; CODE XREF=chown_files+50
0000000000003962         or         eax, 0x8
0000000000003965         cmp        dword [r12], 0x2
000000000000396a         cmove      esi, eax
000000000000396d         jmp        loc_38b8
0000000000003972         align      8

                     loc_3978:
0000000000003978         lea        rsi, qword [aFtsreadFailed]                 ; argument "msgid" for method j_dcgettext, "fts_read failed", CODE XREF=chown_files+149
000000000000397f         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003981         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003986         call       j_dcgettext                                 ; dcgettext
000000000000398b         mov        esi, dword [r13]                            ; argument "__errnum" for method j_error
000000000000398f         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000003992         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000003994         xor        eax, eax
0000000000003996         call       j_error                                     ; error
000000000000399b         jmp        loc_3919


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout_set_file_name:
00000000000039a0         mov        qword [file_name], rdi                      ; End of unwind block (FDE at 0xcd08), Begin of unwind block (FDE at 0xcd64), file_name
00000000000039a7         ret
                        ; endp
00000000000039a8         align      16                                          ; End of unwind block (FDE at 0xcd64)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout_set_ignore_EPIPE:
00000000000039b0         mov        byte [ignore_EPIPE], dil                    ; Begin of unwind block (FDE at 0xcd78), ignore_EPIPE
00000000000039b7         ret
                        ; endp
00000000000039b8         align      64                                          ; End of unwind block (FDE at 0xcd78)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout:
00000000000039c0         push       rbp                                         ; Begin of unwind block (FDE at 0xcd8c), DATA XREF=main+150
00000000000039c1         push       rbx
00000000000039c2         sub        rsp, 0x8
00000000000039c6         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000039cd         call       close_stream                                ; close_stream
00000000000039d2         test       eax, eax
00000000000039d4         je         loc_39ec

00000000000039d6         call       j___errno_location                          ; __errno_location
00000000000039db         cmp        byte [ignore_EPIPE], 0x0                    ; ignore_EPIPE
00000000000039e2         mov        rbx, rax
00000000000039e5         je         loc_3a03

00000000000039e7         cmp        dword [rax], 0x20
00000000000039ea         jne        loc_3a03

                     loc_39ec:
00000000000039ec         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5, CODE XREF=close_stdout+20
00000000000039f3         call       close_stream                                ; close_stream
00000000000039f8         test       eax, eax
00000000000039fa         jne        loc_3a42

00000000000039fc         add        rsp, 0x8
0000000000003a00         pop        rbx
0000000000003a01         pop        rbp
0000000000003a02         ret
                        ; endp

                     loc_3a03:
0000000000003a03         lea        rsi, qword [aWriteError]                    ; argument "msgid" for method j_dcgettext, "write error", CODE XREF=close_stdout+37, close_stdout+42
0000000000003a0a         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003a0c         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003a11         call       j_dcgettext                                 ; dcgettext
0000000000003a16         mov        rdi, qword [file_name]                      ; file_name
0000000000003a1d         mov        rbp, rax
0000000000003a20         test       rdi, rdi
0000000000003a23         je         loc_3a4d

0000000000003a25         call       quotearg_colon                              ; quotearg_colon
0000000000003a2a         mov        esi, dword [rbx]                            ; argument "__errnum" for method j_error
0000000000003a2c         lea        rdx, qword [aSS]                            ; argument "__format" for method j_error, "%s: %s"
0000000000003a33         mov        rcx, rax
0000000000003a36         mov        r8, rbp
0000000000003a39         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000003a3b         xor        eax, eax
0000000000003a3d         call       j_error                                     ; error

                     loc_3a42:
0000000000003a42         mov        edi, dword [exit_failure]                   ; argument "__status" for method j__exit, exit_failure, CODE XREF=close_stdout+58, close_stdout+162
0000000000003a48         call       j__exit                                     ; _exit
                        ; endp

                     loc_3a4d:
0000000000003a4d         mov        esi, dword [rbx]                            ; argument "__errnum" for method j_error, CODE XREF=close_stdout+99
0000000000003a4f         lea        rdx, qword [aSS+4]                          ; argument "__format" for method j_error, 0xab29
0000000000003a56         mov        rcx, rax
0000000000003a59         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000003a5b         xor        eax, eax
0000000000003a5d         call       j_error                                     ; error
0000000000003a62         jmp        loc_3a42
0000000000003a64         align      16                                          ; End of unwind block (FDE at 0xcd8c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     umaxtostr:
0000000000003a70         lea        rcx, qword [rsi+0x14]                       ; Begin of unwind block (FDE at 0xcdbc), CODE XREF=gid_to_name+69, uid_to_name+69, parse_with_separator+936
0000000000003a74         mov        byte [rsi+0x14], 0x0
0000000000003a78         movabs     rsi, 0xcccccccccccccccd
0000000000003a82         nop        word [rax+rax]

                     loc_3a88:
0000000000003a88         mov        rax, rdi                                    ; CODE XREF=umaxtostr+60
0000000000003a8b         sub        rcx, 0x1
0000000000003a8f         mul        rsi
0000000000003a92         shr        rdx, 0x3
0000000000003a96         lea        rax, qword [rdx+rdx*4]
0000000000003a9a         add        rax, rax
0000000000003a9d         sub        rdi, rax
0000000000003aa0         add        edi, 0x30
0000000000003aa3         test       rdx, rdx
0000000000003aa6         mov        byte [rcx], dil
0000000000003aa9         mov        rdi, rdx
0000000000003aac         jne        loc_3a88

0000000000003aae         mov        rax, rcx
0000000000003ab1         ret
                        ; endp
0000000000003ab2         align      64                                          ; End of unwind block (FDE at 0xcdbc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_program_name:
0000000000003ac0         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0xcdd4), CODE XREF=main+97
0000000000003ac3         push       rbx
0000000000003ac4         je         loc_3b3d

0000000000003ac6         mov        esi, 0x2f                                   ; argument "__c" for method j_strrchr
0000000000003acb         mov        rbx, rdi
0000000000003ace         call       j_strrchr                                   ; strrchr
0000000000003ad3         test       rax, rax
0000000000003ad6         je         loc_3b2d

0000000000003ad8         lea        r8, qword [rax+1]
0000000000003adc         mov        rdx, r8
0000000000003adf         sub        rdx, rbx
0000000000003ae2         cmp        rdx, 0x6
0000000000003ae6         jle        loc_3b2d

0000000000003ae8         lea        rsi, qword [rax-6]
0000000000003aec         lea        rdi, qword [aLibs]                          ; "/.libs/"
0000000000003af3         mov        ecx, 0x7
0000000000003af8         rep  cmpsb byte [rsi], byte [rdi]
0000000000003afa         seta       dl
0000000000003afd         sbb        dl, 0x0
0000000000003b00         test       dl, dl
0000000000003b02         jne        loc_3b2d

0000000000003b04         lea        rdi, qword [aLibs+8]                        ; 0xbae8
0000000000003b0b         mov        ecx, 0x3
0000000000003b10         mov        rsi, r8
0000000000003b13         mov        rbx, r8
0000000000003b16         rep  cmpsb byte [rsi], byte [rdi]
0000000000003b18         seta       dl
0000000000003b1b         sbb        dl, 0x0
0000000000003b1e         test       dl, dl
0000000000003b20         jne        loc_3b2d

0000000000003b22         lea        rbx, qword [rax+4]
0000000000003b26         mov        qword [program_invocation_short_name@@GLIBC_2.2.5], rbx ; program_invocation_short_name@@GLIBC_2.2.5

                     loc_3b2d:
0000000000003b2d         mov        qword [program_name], rbx                   ; program_name, CODE XREF=set_program_name+22, set_program_name+38, set_program_name+66, set_program_name+96
0000000000003b34         mov        qword [__progname_full@@GLIBC_2.2.5], rbx   ; __progname_full@@GLIBC_2.2.5
0000000000003b3b         pop        rbx
0000000000003b3c         ret
                        ; endp

                     loc_3b3d:
0000000000003b3d         mov        rcx, qword [stderr@@GLIBC_2.2.5]            ; argument "__s" for method j_fwrite, stderr@@GLIBC_2.2.5, CODE XREF=set_program_name+4
0000000000003b44         lea        rdi, qword [aANullArgv0WasP]                ; argument "__ptr" for method j_fwrite, "A NULL argv[0] was passed through an exec system call.\\n"
0000000000003b4b         mov        edx, 0x37                                   ; argument "__n" for method j_fwrite
0000000000003b50         mov        esi, 0x1                                    ; argument "__size" for method j_fwrite
0000000000003b55         call       j_fwrite                                    ; fwrite
0000000000003b5a         call       j_abort                                     ; abort
                        ; endp
0000000000003b5f         align      32                                          ; End of unwind block (FDE at 0xcdd4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     gettext_quote.part.1:
0000000000003b60         push       rbp                                         ; Begin of unwind block (FDE at 0xcdf4), CODE XREF=sub_4390+2597, sub_4390+2619
0000000000003b61         push       rbx
0000000000003b62         mov        rbp, rdi
0000000000003b65         mov        ebx, esi
0000000000003b67         sub        rsp, 0x8
0000000000003b6b         call       locale_charset                              ; locale_charset
0000000000003b70         movzx      edx, byte [rax]
0000000000003b73         and        edx, 0xffffffdf
0000000000003b76         cmp        dl, 0x55
0000000000003b79         je         loc_3bf0

0000000000003b7b         cmp        dl, 0x47
0000000000003b7e         je         loc_3ba0

                     loc_3b80:
0000000000003b80         lea        rax, qword [aLibs+27]                       ; 0xbafb, CODE XREF=gettext_quote.part.1+74, gettext_quote.part.1+80, gettext_quote.part.1+86, gettext_quote.part.1+92, gettext_quote.part.1+98, gettext_quote.part.1+104, gettext_quote.part.1+110, gettext_quote.part.1+154, gettext_quote.part.1+166, gettext_quote.part.1+176, gettext_quote.part.1+186
0000000000003b87         lea        rdx, qword [aLibs+29]                       ; 0xbafd
0000000000003b8e         cmp        ebx, 0x9
0000000000003b91         cmovne     rax, rdx
0000000000003b95         add        rsp, 0x8
0000000000003b99         pop        rbx
0000000000003b9a         pop        rbp
0000000000003b9b         ret
                        ; endp
0000000000003b9c         align      32

                     loc_3ba0:
0000000000003ba0         movzx      edx, byte [rax+1]                           ; CODE XREF=gettext_quote.part.1+30
0000000000003ba4         and        edx, 0xffffffdf
0000000000003ba7         cmp        dl, 0x42
0000000000003baa         jne        loc_3b80

0000000000003bac         cmp        byte [rax+2], 0x31
0000000000003bb0         jne        loc_3b80

0000000000003bb2         cmp        byte [rax+3], 0x38
0000000000003bb6         jne        loc_3b80

0000000000003bb8         cmp        byte [rax+4], 0x30
0000000000003bbc         jne        loc_3b80

0000000000003bbe         cmp        byte [rax+5], 0x33
0000000000003bc2         jne        loc_3b80

0000000000003bc4         cmp        byte [rax+6], 0x30
0000000000003bc8         jne        loc_3b80

0000000000003bca         cmp        byte [rax+7], 0x0
0000000000003bce         jne        loc_3b80

0000000000003bd0         cmp        byte [rbp], 0x60
0000000000003bd4         lea        rax, qword [aLibs+20]                       ; 0xbaf4
0000000000003bdb         lea        rdx, qword [aLibs+24]                       ; 0xbaf8
0000000000003be2         cmovne     rax, rdx
0000000000003be6         add        rsp, 0x8
0000000000003bea         pop        rbx
0000000000003beb         pop        rbp
0000000000003bec         ret
                        ; endp
0000000000003bed         align      16

                     loc_3bf0:
0000000000003bf0         movzx      edx, byte [rax+1]                           ; CODE XREF=gettext_quote.part.1+25
0000000000003bf4         and        edx, 0xffffffdf
0000000000003bf7         cmp        dl, 0x54
0000000000003bfa         jne        loc_3b80

0000000000003bfc         movzx      edx, byte [rax+2]
0000000000003c00         and        edx, 0xffffffdf
0000000000003c03         cmp        dl, 0x46
0000000000003c06         jne        loc_3b80

0000000000003c0c         cmp        byte [rax+3], 0x2d
0000000000003c10         jne        loc_3b80

0000000000003c16         cmp        byte [rax+4], 0x38
0000000000003c1a         jne        loc_3b80

0000000000003c20         cmp        byte [rax+5], 0x0
0000000000003c24         jne        loc_3b80

0000000000003c2a         cmp        byte [rbp], 0x60
0000000000003c2e         lea        rax, qword [aLibs+12]                       ; 0xbaec
0000000000003c35         lea        rdx, qword [aLibs+16]                       ; 0xbaf0
0000000000003c3c         cmovne     rax, rdx
0000000000003c40         add        rsp, 0x8
0000000000003c44         pop        rbx
0000000000003c45         pop        rbp
0000000000003c46         ret
                        ; endp
0000000000003c47         align      16                                          ; End of unwind block (FDE at 0xcdf4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_0: int, 8
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_4C: int32_t, -76
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_69: int8_t, -105
        ;    var_6A: int8_t, -106
        ;    var_6B: int8_t, -107
        ;    var_6C: int8_t, -108
        ;    var_70: int32_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208
        ;    var_D8: int64_t, -216
        ;    var_D9: int8_t, -217
        ;    var_DA: int8_t, -218
        ;    var_DB: int8_t, -219
        ;    var_E0: int32_t, -224


                     quotearg_buffer_restyled:
0000000000003c50         push       r15                                         ; Begin of unwind block (FDE at 0xce38), CODE XREF=sub_4390+1165, sub_4390+2699, quotearg_n_options+231, quotearg_n_options+344, quotearg_buffer+92, quotearg_alloc_mem+103, quotearg_alloc_mem+176
0000000000003c52         push       r14
0000000000003c54         mov        r15d, r8d
0000000000003c57         push       r13
0000000000003c59         push       r12
0000000000003c5b         mov        r14, rdi
0000000000003c5e         push       rbp
0000000000003c5f         push       rbx
0000000000003c60         mov        ebx, r9d
0000000000003c63         mov        r13, rsi
0000000000003c66         mov        rbp, rcx
0000000000003c69         and        ebx, 0x2
0000000000003c6c         sub        rsp, 0xb8
0000000000003c73         mov        rax, qword [rsp+0xe8+arg_0]
0000000000003c7b         mov        qword [rsp+0xe8+var_D8], rdx
0000000000003c80         mov        dword [rsp+0xe8+var_E0], r8d
0000000000003c85         mov        dword [rsp+0xe8+var_70], r9d
0000000000003c8a         mov        qword [rsp+0xe8+var_C8], rax
0000000000003c8f         mov        rax, qword [rsp+0xe8+arg_8]
0000000000003c97         mov        qword [rsp+0xe8+var_80], rax
0000000000003c9c         mov        rax, qword [rsp+0xe8+arg_10]
0000000000003ca4         mov        qword [rsp+0xe8+var_88], rax
0000000000003ca9         mov        rax, qword [fs:0x28]
0000000000003cb2         mov        qword [rsp+0xe8+var_40], rax
0000000000003cba         xor        eax, eax
0000000000003cbc         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max
0000000000003cc1         cmp        r15d, 0xa
0000000000003cc5         mov        qword [rsp+0xe8+var_90], rax
0000000000003cca         ja         loc_4e7f

0000000000003cd0         lea        rcx, qword [switch_table_bb60]              ; switch_table_bb60
0000000000003cd7         mov        edx, r15d
0000000000003cda         movsxd     rax, dword [rcx+rdx*4]
0000000000003cde         add        rax, rcx
0000000000003ce1         jmp        rax                                         ; switch statement using table at 0xbb60, with 11 cases, 0x3ce3,0x48b4,0x4910,0x4965,0x49aa,0x49e4,0x4a8a,0x4ac4,0x4cb8

                     loc_3ce3:
0000000000003ce3         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 1, CODE XREF=quotearg_buffer_restyled+145, sub_4390+1318
0000000000003ce8         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000003ced         xor        r12d, r12d
0000000000003cf0         mov        qword [rsp+0xe8+var_98], 0x0
0000000000003cf9         mov        byte [rsp+0xe8+var_D9], 0x1
0000000000003cfe         mov        byte [rsp+0xe8+var_DB], 0x0

                     loc_3d03:
0000000000003d03         lea        rax, qword [aLibs+29]                       ; 0xbafd, CODE XREF=sub_4390+1876
0000000000003d0a         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000003d13         xor        r15d, r15d
0000000000003d16         mov        dword [rsp+0xe8+var_E0], 0x2
0000000000003d1e         mov        qword [rsp+0xe8+var_A0], rax

                     loc_3d23:
0000000000003d23         xor        r11d, r11d                                  ; CODE XREF=sub_4390+180, sub_4390+1400, sub_4390+1488, sub_4390+1557, sub_4390+1615, sub_4390+1781, sub_4390+1839, sub_4390+2408, sub_4390+2485
0000000000003d26         mov        rax, rbp
0000000000003d29         mov        r8d, r12d
0000000000003d2c         mov        rbp, r11
0000000000003d2f         mov        r11, rax
0000000000003d32         nop        word [rax+rax]

                     loc_3d38:
0000000000003d38         cmp        r11, rbp                                    ; CODE XREF=sub_3e40+194
0000000000003d3b         setne      r12b
0000000000003d3f         cmp        r11, 0xffffffffffffffff
0000000000003d43         jne        loc_3d52

0000000000003d45         mov        rax, qword [rsp+0xe8+var_D8]
0000000000003d4a         cmp        byte [rax+rbp], 0x0
0000000000003d4e         setne      r12b

                     loc_3d52:
0000000000003d52         test       r12b, r12b                                  ; CODE XREF=quotearg_buffer_restyled+243
0000000000003d55         je         loc_43b0

0000000000003d5b         cmp        dword [rsp+0xe8+var_E0], 0x2
0000000000003d60         mov        rdi, qword [rsp+0xe8+var_D8]
0000000000003d65         lea        r9, qword [rdi+rbp]
0000000000003d69         setne      al
0000000000003d6c         and        al, byte [rsp+0xe8+var_DB]
0000000000003d70         mov        r10d, eax
0000000000003d73         je         loc_3e20

0000000000003d79         mov        rax, qword [rsp+0xe8+var_D0]
0000000000003d7e         test       rax, rax
0000000000003d81         je         loc_41b0

0000000000003d87         cmp        r11, 0xffffffffffffffff
0000000000003d8b         lea        rbx, qword [rbp+rax]
0000000000003d90         jne        loc_3dc0

0000000000003d92         cmp        rax, 0x1
0000000000003d96         jbe        loc_3dc0

0000000000003d98         mov        byte [rsp+0xe8+var_B0], r8b
0000000000003d9d         mov        byte [rsp+0xe8+var_B8], r10b
0000000000003da2         mov        qword [rsp+0xe8+var_C0], r9
0000000000003da7         call       j_strlen                                    ; strlen
0000000000003dac         movzx      r8d, byte [rsp+0xe8+var_B0]
0000000000003db2         movzx      r10d, byte [rsp+0xe8+var_B8]
0000000000003db8         mov        r11, rax
0000000000003dbb         mov        r9, qword [rsp+0xe8+var_C0]

                     loc_3dc0:
0000000000003dc0         cmp        rbx, r11                                    ; CODE XREF=quotearg_buffer_restyled+320, quotearg_buffer_restyled+326
0000000000003dc3         mov        byte [rsp+0xe8+var_C0], r10b
0000000000003dc8         ja         loc_4380

0000000000003dce         mov        rdx, qword [rsp+0xe8+var_D0]                ; argument "__n" for method j_memcmp
0000000000003dd3         mov        rsi, qword [rsp+0xe8+var_A0]                ; argument "__s2" for method j_memcmp
0000000000003dd8         mov        rdi, r9                                     ; argument "__s1" for method j_memcmp
0000000000003ddb         mov        qword [rsp+0xe8+var_A8], r11
0000000000003de0         mov        byte [rsp+0xe8+var_B0], r8b
0000000000003de5         mov        qword [rsp+0xe8+var_B8], r9
0000000000003dea         call       j_memcmp                                    ; memcmp
0000000000003def         test       eax, eax
0000000000003df1         mov        r9, qword [rsp+0xe8+var_B8]
0000000000003df6         movzx      r8d, byte [rsp+0xe8+var_B0]
0000000000003dfc         mov        r11, qword [rsp+0xe8+var_A8]
0000000000003e01         jne        loc_4380

0000000000003e07         cmp        byte [rsp+0xe8+var_D9], 0x0
0000000000003e0c         movzx      r10d, byte [rsp+0xe8+var_C0]
0000000000003e12         jne        loc_4d95

0000000000003e18         nop        dword [rax+rax]

                     loc_3e20:
0000000000003e20         movzx      ebx, byte [r9]                              ; CODE XREF=quotearg_buffer_restyled+291, sub_4370+19
0000000000003e24         cmp        bl, 0x7e
0000000000003e27         ja         loc_4148

0000000000003e2d         lea        rcx, qword [switch_table_bb60+44]           ; 0xbb8c
0000000000003e34         movzx      edx, bl
0000000000003e37         movsxd     rax, dword [rcx+rdx*4]
0000000000003e3b         add        rax, rcx
0000000000003e3e         jmp        rax
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_3e40:
0000000000003e40         xor        r10d, r10d
0000000000003e43         cmp        r11, 0x1
0000000000003e47         setne      al
0000000000003e4a         cmp        r11, 0xffffffffffffffff
0000000000003e4e         jne        loc_3e5c

0000000000003e50         mov        rax, qword [rsp+arg_8]
0000000000003e55         cmp        byte [rax+1], 0x0
0000000000003e59         setne      al

                     loc_3e5c:
0000000000003e5c         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_3e40+14
0000000000003e61         sete       dl
0000000000003e64         test       al, al
0000000000003e66         je         loc_40b8

                     loc_3e6c:
0000000000003e6c         xor        r12d, r12d                                  ; CODE XREF=sub_40b0+11
0000000000003e6f         xor        eax, eax
0000000000003e71         nop        dword [rax]
                        ; endp

                     loc_3e78:
0000000000003e78         cmp        byte [rsp+0xe8+var_DB], 0x1                 ; CODE XREF=sub_4060+50, sub_4130+119
0000000000003e7d         jne        loc_3f92

0000000000003e83         test       dl, dl
0000000000003e85         jne        loc_3f92

                     loc_3e8b:
0000000000003e8b         mov        rsi, qword [rsp+0xe8+var_C8]                ; CODE XREF=sub_3f40+87
0000000000003e90         test       rsi, rsi
0000000000003e93         je         loc_3ea9

0000000000003e95         mov        edx, ebx
0000000000003e97         shr        dl, 0x5
0000000000003e9a         movzx      edx, dl
0000000000003e9d         mov        edx, dword [rsi+rdx*4]
0000000000003ea0         bt         edx, ebx
0000000000003ea3         jb         loc_3ff3

                     loc_3ea9:
0000000000003ea9         test       r10b, r10b                                  ; CODE XREF=sub_3e40+83, sub_3f40+93
0000000000003eac         jne        loc_3ff3

0000000000003eb2         xor        eax, 0x1
0000000000003eb5         add        rbp, 0x1
0000000000003eb9         and        eax, r8d

                     loc_3ebc:
0000000000003ebc         test       al, al                                      ; CODE XREF=sub_4390+936
0000000000003ebe         je         loc_3ee0

0000000000003ec0         cmp        r13, r15
0000000000003ec3         jbe        loc_3eca

0000000000003ec5         mov        byte [r14+r15], 0x27

                     loc_3eca:
0000000000003eca         lea        rax, qword [r15+1]                          ; CODE XREF=sub_3e40+131
0000000000003ece         cmp        r13, rax
0000000000003ed1         jbe        loc_3ed9

0000000000003ed3         mov        byte [r14+r15+1], 0x27

                     loc_3ed9:
0000000000003ed9         add        r15, 0x2                                    ; CODE XREF=sub_3e40+145
0000000000003edd         xor        r8d, r8d

                     loc_3ee0:
0000000000003ee0         cmp        r15, r13                                    ; CODE XREF=sub_3e40+126, sub_3f40+275, sub_4390+869
0000000000003ee3         jae        loc_3ee9

0000000000003ee5         mov        byte [r14+r15], bl

                     loc_3ee9:
0000000000003ee9         movzx      edi, byte [rsp+0xe8+var_DA]                 ; CODE XREF=sub_3e40+163
0000000000003eee         add        r15, 0x1
0000000000003ef2         mov        eax, 0x0
0000000000003ef7         test       r12b, r12b
0000000000003efa         cmove      edi, eax
0000000000003efd         mov        byte [rsp+0xe8+var_DA], dil
0000000000003f02         jmp        loc_3d38
0000000000003f07         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_70: int8_t, 120
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_3f10:
0000000000003f10         xor        r10d, r10d
0000000000003f13         mov        eax, dword [rsp+arg_0]
0000000000003f17         cmp        eax, 0x2
0000000000003f1a         je         loc_44d8

0000000000003f20         cmp        eax, 0x5
0000000000003f23         je         loc_4498

0000000000003f29         cmp        eax, 0x2
0000000000003f2c         mov        ebx, 0x3f
0000000000003f31         sete       dl
0000000000003f34         xor        r12d, r12d
0000000000003f37         xor        eax, eax
0000000000003f39         jmp        sub_3e40+56
                        ; endp
0000000000003f3e         align      64


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_74: int8_t, 124
        ;    arg_48: int, 80
        ;    arg_40: int, 72
        ;    arg_38: int, 64
        ;    arg_30: int, 56
        ;    arg_28: int, 48
        ;    arg_20: int, 40
        ;    arg_18: int, 32
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_3f40:
0000000000003f40         xor        r10d, r10d
0000000000003f43         cmp        dword [rsp+arg_0], 0x2
0000000000003f48         je         loc_4450

0000000000003f4e         mov        byte [rsp+arg_74], r12b
0000000000003f53         xor        edx, edx
0000000000003f55         xor        eax, eax
0000000000003f57         mov        ebx, 0x27
0000000000003f5c         jmp        sub_3e40+56
                        ; endp
0000000000003f61         nop        dword [rax]
0000000000003f68         mov        edx, 0x9
0000000000003f6d         mov        ebx, 0x74

                     loc_3f72:
0000000000003f72         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_4100+10, sub_41f0+37, sub_4330+53
0000000000003f77         sete       al
0000000000003f7a         and        al, byte [rsp+arg_7]
0000000000003f7e         jne        sub_40b0+30

0000000000003f84         cmp        byte [rsp+arg_5], 0x0                       ; CODE XREF=sub_3f40+114
0000000000003f89         jne        loc_3ff0

                     loc_3f8b:
0000000000003f8b         mov        ebx, edx                                    ; CODE XREF=sub_4060+18
0000000000003f8d         xor        r12d, r12d
0000000000003f90         xor        eax, eax
                        ; endp

                     loc_3f92:
0000000000003f92         cmp        byte [rsp+0xe8+var_D9], 0x0                 ; CODE XREF=sub_3e40+61, sub_3e40+69
0000000000003f97         jne        loc_3e8b

0000000000003f9d         jmp        loc_3ea9
0000000000003fa2         nop        word [rax+rax]
0000000000003fa8         mov        edx, 0x8
0000000000003fad         mov        ebx, 0x62
0000000000003fb2         jmp        sub_3f40+68
0000000000003fb4         nop        dword [rax]
0000000000003fb8         cmp        dword [rsp+8], 0x2
0000000000003fbd         je         sub_4390                                    ; sub_4390
0000000000003fc3         cmp        byte [rsp+0xd], 0x0
0000000000003fc8         je         sub_41d0+16

                     loc_3fce:
0000000000003fce         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_41d0+8
0000000000003fd3         je         loc_41e0

0000000000003fd9         cmp        qword [rsp+arg_10], 0x0
0000000000003fdf         jne        loc_439b

0000000000003fe5         mov        ebx, 0x5c
0000000000003fea         nop        word [rax+rax]
                        ; endp

                     loc_3ff0:
0000000000003ff0         xor        r12d, r12d                                  ; CODE XREF=sub_3f40+73, sub_4330+29
                        ; endp

                     loc_3ff3:
0000000000003ff3         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_3e40+99, sub_3e40+108
0000000000003ff8         sete       dl
0000000000003ffb         cmp        byte [rsp+0xe8+var_D9], 0x0
0000000000004000         mov        eax, edx                                    ; DATA XREF=sub_2fd0+285, sub_4130+88, fts_stat+182, rpl_fts_read+1473
0000000000004002         jne        loc_4858

0000000000004008         mov        eax, r8d
000000000000400b         xor        eax, 0x1
000000000000400e         and        al, dl
0000000000004010         je         loc_4041

0000000000004012         cmp        r13, r15
0000000000004015         jbe        loc_401c

0000000000004017         mov        byte [r14+r15], 0x27

                     loc_401c:
000000000000401c         lea        rdx, qword [r15+1]                          ; CODE XREF=sub_3f40+213
0000000000004020         cmp        r13, rdx
0000000000004023         jbe        loc_402b

0000000000004025         mov        byte [r14+r15+1], 0x24

                     loc_402b:
000000000000402b         lea        rdx, qword [r15+2]                          ; CODE XREF=sub_3f40+227
000000000000402f         cmp        r13, rdx
0000000000004032         jbe        loc_403a

0000000000004034         mov        byte [r14+r15+2], 0x27

                     loc_403a:
000000000000403a         add        r15, 0x3                                    ; CODE XREF=sub_3f40+242
000000000000403e         mov        r8d, eax

                     loc_4041:
0000000000004041         cmp        r13, r15                                    ; CODE XREF=sub_3f40+208
0000000000004044         jbe        loc_404b

0000000000004046         mov        byte [r14+r15], 0x5c

                     loc_404b:
000000000000404b         add        r15, 0x1                                    ; CODE XREF=sub_3f40+260
000000000000404f         add        rbp, 0x1
0000000000004053         jmp        loc_3ee0
0000000000004058         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_70: int8_t, 120
        ;    arg_20: int, 40
        ;    arg_18: int, 32
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_4060:
0000000000004060         cmp        byte [rsp+arg_5], 0x0
0000000000004065         jne        loc_4233

000000000000406b         xor        edx, edx
000000000000406d         test       byte [rsp+arg_70], 0x1
0000000000004072         je         loc_3f8b

0000000000004078         add        rbp, 0x1
000000000000407c         jmp        quotearg_buffer_restyled+232
                        ; endp
0000000000004081         nop        dword [rax]
0000000000004088         cmp        dword [rsp+8], 0x2
000000000000408d         sete       dl
0000000000004090         xor        eax, eax
0000000000004092         jmp        sub_3e40+56
0000000000004097         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_40a0:
00000000000040a0         mov        edx, 0x7
00000000000040a5         mov        ebx, 0x61
00000000000040aa         jmp        sub_3f40+68
                        ; endp
00000000000040af         nop


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_40b0:
00000000000040b0         cmp        dword [rsp+8], 0x2
00000000000040b5         sete       dl
                        ; endp

                     loc_40b8:
00000000000040b8         test       rbp, rbp                                    ; CODE XREF=sub_3e40+38, sub_42d0+35
00000000000040bb         jne        loc_3e6c

00000000000040c1         movzx      eax, byte [rsp+arg_7]                       ; CODE XREF=sub_4300+43
00000000000040c6         and        al, dl
00000000000040c8         je         sub_3e40+56

00000000000040ce         mov        rbp, r11
00000000000040d1         mov        dword [rsp+arg_0], 0x2
00000000000040d9         jmp        sub_4390+1097
                        ; endp
00000000000040de         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_40e0:
00000000000040e0         cmp        dword [rsp+arg_0], 0x2
00000000000040e5         sete       dl
00000000000040e8         xor        r12d, r12d
00000000000040eb         jmp        sub_40b0+17
                        ; endp
00000000000040ed         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_40f0:
00000000000040f0         cmp        dword [rsp+arg_0], 0x2
00000000000040f5         mov        ebx, 0x20
00000000000040fa         sete       dl
00000000000040fd         jmp        sub_40b0+17
                        ; endp
00000000000040ff         align      256


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_4100:
0000000000004100         mov        edx, 0xd
0000000000004105         mov        ebx, 0x72
000000000000410a         jmp        loc_3f72
000000000000410f         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_4110:
0000000000004110         mov        edx, 0xc
0000000000004115         mov        ebx, 0x66
000000000000411a         jmp        sub_3f40+68
                        ; endp
000000000000411f         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_4120:
0000000000004120         mov        edx, 0xb
0000000000004125         mov        ebx, 0x76
000000000000412a         jmp        sub_3f40+68
                        ; endp
000000000000412f         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_4130:
0000000000004130         mov        edx, 0xa
0000000000004135         mov        ebx, 0x6e
000000000000413a         jmp        sub_3f40+50
                        ; endp
000000000000413f         align      64

                     loc_4140:
0000000000004140         xor        r10d, r10d                                  ; CODE XREF=sub_4130+135
0000000000004143         nop        dword [rax+rax]

                     loc_4148:
0000000000004148         cmp        qword [rsp+0xe8+var_90], 0x1                ; CODE XREF=quotearg_buffer_restyled+471
000000000000414e         jne        loc_44f8

0000000000004154         mov        qword [rsp+0xe8+var_B0], r11
0000000000004159         mov        byte [rsp+0xe8+var_B8], r8b
000000000000415e         mov        byte [rsp+0xe8+var_C0], r10b
0000000000004163         call       j___ctype_b_loc                             ; __ctype_b_loc
0000000000004168         mov        rcx, qword [rax]
000000000000416b         movzx      edx, bl
000000000000416e         movzx      r10d, byte [rsp+0xe8+var_C0]
0000000000004174         movzx      r8d, byte [rsp+0xe8+var_B8]
000000000000417a         mov        r11, qword [rsp+0xe8+var_B0]
000000000000417f         mov        edi, 0x1
0000000000004184         movzx      eax, word [rcx+rdx*2]
0000000000004188         and        ax, 0x4000
000000000000418c         setne      r12b
0000000000004190         sete       al
0000000000004193         and        al, byte [rsp+0xe8+var_DB]

                     loc_4197:
0000000000004197         test       al, al                                      ; CODE XREF=sub_4390+2221
0000000000004199         jne        loc_4b31

000000000000419f         cmp        dword [rsp+0xe8+var_E0], 0x2
00000000000041a4         sete       dl
00000000000041a7         jmp        loc_3e78
00000000000041ac         align      16

                     loc_41b0:
00000000000041b0         movzx      ebx, byte [r9]                              ; CODE XREF=quotearg_buffer_restyled+305
00000000000041b4         cmp        bl, 0x7e
00000000000041b7         ja         loc_4140

00000000000041b9         lea        rcx, qword [switch_table_bb60+552]          ; 0xbd88
00000000000041c0         movzx      edx, bl
00000000000041c3         movsxd     rax, dword [rcx+rdx*4]
00000000000041c7         add        rax, rcx
00000000000041ca         jmp        rax
                        ; endp
00000000000041cc         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_41d0:
00000000000041d0         xor        r10d, r10d
00000000000041d3         cmp        byte [rsp+arg_5], 0x0
00000000000041d8         jne        loc_3fce

00000000000041de         nop

                     loc_41e0:
00000000000041e0         mov        edx, 0x5c                                   ; CODE XREF=sub_3f40+136, sub_3f40+147
00000000000041e5         mov        ebx, 0x5c
00000000000041ea         jmp        sub_3f40+68
                        ; endp
00000000000041ef         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_41f0:
00000000000041f0         mov        edx, 0xc
00000000000041f5         xor        r10d, r10d
00000000000041f8         mov        ebx, 0x66
00000000000041fd         jmp        sub_3f40+68
                        ; endp
0000000000004202         nop        word [rax+rax]
0000000000004208         mov        edx, 0xa
000000000000420d         xor        r10d, r10d
0000000000004210         mov        ebx, 0x6e
0000000000004215         jmp        sub_3f40+50
000000000000421a         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_4220:
0000000000004220         mov        ebx, 0x61
0000000000004225         jmp        sub_3f40+176
                        ; endp
000000000000422a         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_4230:
0000000000004230         xor        r10d, r10d
                        ; endp

                     loc_4233:
0000000000004233         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_4060+5
0000000000004238         sete       dl
000000000000423b         cmp        byte [rsp+arg_7], 0x0
0000000000004240         jne        loc_4dda

0000000000004246         mov        eax, r8d
0000000000004249         mov        rcx, r15
000000000000424c         xor        eax, 0x1
000000000000424f         and        al, dl
0000000000004251         je         loc_4280

0000000000004253         cmp        r13, r15
0000000000004256         jbe        loc_425d

0000000000004258         mov        byte [r14+r15], 0x27

                     loc_425d:
000000000000425d         lea        rcx, qword [r15+1]                          ; CODE XREF=sub_4230+38
0000000000004261         cmp        r13, rcx
0000000000004264         jbe        loc_426c

0000000000004266         mov        byte [r14+r15+1], 0x24

                     loc_426c:
000000000000426c         lea        rcx, qword [r15+2]                          ; CODE XREF=sub_4230+52
0000000000004270         cmp        r13, rcx
0000000000004273         ja         loc_48a9

                     loc_4279:
0000000000004279         lea        rcx, qword [r15+3]                          ; CODE XREF=sub_4390+1311
000000000000427d         mov        r8d, eax

                     loc_4280:
0000000000004280         cmp        r13, rcx                                    ; CODE XREF=sub_4230+33
0000000000004283         jbe        loc_428a

0000000000004285         mov        byte [r14+rcx], 0x5c

                     loc_428a:
000000000000428a         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_4230+83
000000000000428f         lea        r15, qword [rcx+1]
0000000000004293         je         loc_4899

0000000000004299         lea        rax, qword [rbp+1]
000000000000429d         cmp        rax, r11
00000000000042a0         jae        loc_42bb

00000000000042a2         mov        rax, qword [rsp+arg_8]
00000000000042a7         movzx      eax, byte [rax+rbp+1]
00000000000042ac         mov        byte [rsp+arg_20], al
00000000000042b0         sub        eax, 0x30
00000000000042b3         cmp        al, 0x9
00000000000042b5         jbe        loc_4ae9

                     loc_42bb:
00000000000042bb         mov        eax, r12d                                   ; CODE XREF=sub_4230+112
00000000000042be         mov        ebx, 0x30
00000000000042c3         xor        r12d, r12d
00000000000042c6         jmp        sub_3e40+56
                        ; endp
00000000000042cb         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_42d0:
00000000000042d0         cmp        dword [rsp+arg_0], 0x2
00000000000042d5         mov        r12d, r10d
00000000000042d8         sete       dl
00000000000042db         xor        r10d, r10d
00000000000042de         xor        eax, eax
00000000000042e0         jmp        sub_3e40+56
                        ; endp
00000000000042e5         nop        dword [rax]
00000000000042e8         cmp        dword [rsp+8], 0x2
00000000000042ed         sete       dl
00000000000042f0         xor        r10d, r10d
00000000000042f3         jmp        sub_40b0+8
00000000000042f8         nop        dword [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_4300:
0000000000004300         cmp        dword [rsp+8], 0x2
0000000000004305         sete       dl
0000000000004308         xor        r10d, r10d
000000000000430b         xor        r12d, r12d
000000000000430e         jmp        sub_40b0+17
                        ; endp
0000000000004313         nop        dword [rax+rax]
0000000000004318         cmp        dword [rsp+8], 0x2
000000000000431d         mov        r12d, r10d
0000000000004320         mov        ebx, 0x20
0000000000004325         sete       dl
0000000000004328         xor        r10d, r10d
000000000000432b         jmp        sub_40b0+17


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_4330:
0000000000004330         mov        edx, 0xd
0000000000004335         xor        r10d, r10d
0000000000004338         mov        ebx, 0x72
000000000000433d         jmp        sub_3f40+50
                        ; endp
0000000000004342         nop        word [rax+rax]
0000000000004348         mov        ebx, 0x76
000000000000434d         jmp        sub_3f40+176
0000000000004352         nop        word [rax+rax]
0000000000004358         mov        edx, 0x9
000000000000435d         xor        r10d, r10d
0000000000004360         mov        ebx, 0x74
0000000000004365         jmp        sub_3f40+50
000000000000436a         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_4370:
0000000000004370         mov        ebx, 0x62
0000000000004375         jmp        sub_3f40+176
                        ; endp
000000000000437a         nop        word [rax+rax]

                     loc_4380:
0000000000004380         xor        r10d, r10d                                  ; CODE XREF=quotearg_buffer_restyled+376, quotearg_buffer_restyled+433
0000000000004383         jmp        loc_3e20
0000000000004388         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_7: int8_t, 15


                     sub_4390:
0000000000004390         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_3f40+125
0000000000004395         jne        sub_4390+2416
                        ; endp

                     loc_439b:
000000000000439b         add        rbp, 0x1                                    ; CODE XREF=sub_3f40+159
000000000000439f         mov        eax, r8d
00000000000043a2         xor        r12d, r12d
00000000000043a5         mov        ebx, 0x5c
00000000000043aa         jmp        sub_3e40+124
                        ; endp
00000000000043af         align      16

                     loc_43b0:
00000000000043b0         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=quotearg_buffer_restyled+261
00000000000043b5         movzx      ebx, byte [rsp+0xe8+var_D9]
00000000000043ba         mov        r12d, r8d
00000000000043bd         mov        rbp, r11
00000000000043c0         sete       dl
00000000000043c3         mov        eax, ebx
00000000000043c5         test       r15, r15
00000000000043c8         sete       cl
00000000000043cb         and        eax, edx
00000000000043cd         and        al, cl
00000000000043cf         jne        loc_4e36

00000000000043d5         mov        eax, ebx
00000000000043d7         xor        eax, 0x1
00000000000043da         and        dl, al
00000000000043dc         je         loc_4d4c

00000000000043e2         cmp        byte [rsp+0xe8+var_6C], 0x0
00000000000043e7         je         loc_4d4a

00000000000043ed         cmp        byte [rsp+0xe8+var_DA], 0x0
00000000000043f2         jne        loc_4ded

00000000000043f8         test       r13, r13
00000000000043fb         sete       al
00000000000043fe         cmp        qword [rsp+0xe8+var_98], 0x0
0000000000004404         setne      dl
0000000000004407         and        al, dl
0000000000004409         je         loc_4e2c

000000000000440f         mov        r13, qword [rsp+0xe8+var_98]

                     loc_4414:
0000000000004414         lea        rbx, qword [aLibs+29]                       ; 0xbafd, CODE XREF=sub_4390+2781
000000000000441b         mov        byte [r14], 0x27
000000000000441f         mov        dword [rsp+0xe8+var_E0], 0x2
0000000000004427         mov        r15d, 0x1
000000000000442d         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000004436         mov        byte [rsp+0xe8+var_D9], 0x0
000000000000443b         mov        qword [rsp+0xe8+var_A0], rbx
0000000000004440         mov        byte [rsp+0xe8+var_6C], al
0000000000004444         jmp        loc_3d23
0000000000004449         align      16

                     loc_4450:
0000000000004450         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_3f40+8
0000000000004455         jne        sub_4390+2416

000000000000445b         test       r13, r13
000000000000445e         je         loc_4860

0000000000004464         xor        edx, edx
0000000000004466         cmp        qword [rsp+arg_48], 0x0
000000000000446c         jne        loc_4860

                     loc_4472:
0000000000004472         mov        qword [rsp+arg_48], r13                     ; CODE XREF=sub_4390+1284, sub_4390+2794
0000000000004477         add        r15, 0x3
000000000000447b         xor        eax, eax
000000000000447d         mov        byte [rsp+arg_74], r12b
0000000000004482         xor        r8d, r8d
0000000000004485         mov        r13, rdx
0000000000004488         mov        ebx, 0x27
000000000000448d         jmp        sub_3e40+105
                        ; endp
0000000000004492         align      8

                     loc_4498:
0000000000004498         test       byte [rsp+arg_70], 0x4                      ; CODE XREF=sub_3f10+19
000000000000449d         je         loc_44c0

000000000000449f         lea        rcx, qword [rbp+2]
00000000000044a3         cmp        rcx, r11
00000000000044a6         jae        loc_44c0

00000000000044a8         mov        rax, qword [rsp+arg_8]
00000000000044ad         cmp        byte [rax+rbp+1], 0x3f
00000000000044b2         je         loc_4c42

00000000000044b8         nop        dword [rax+rax]

                     loc_44c0:
00000000000044c0         xor        edx, edx                                    ; CODE XREF=sub_4390+269, sub_4390+278, sub_4390+2233, sub_4390+2253
00000000000044c2         xor        r12d, r12d
00000000000044c5         xor        eax, eax
00000000000044c7         mov        ebx, 0x3f
00000000000044cc         jmp        sub_3e40+56
                        ; endp
00000000000044d1         align      8

                     loc_44d8:
00000000000044d8         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_3f10+10
00000000000044dd         jne        loc_4d00

00000000000044e3         xor        r12d, r12d
00000000000044e6         xor        eax, eax
00000000000044e8         mov        ebx, 0x3f
00000000000044ed         jmp        sub_3e40+105
                        ; endp
00000000000044f2         align      8

                     loc_44f8:
00000000000044f8         lea        rax, qword [rsp+0xe8+var_48]                ; CODE XREF=sub_4130+30
0000000000004500         cmp        r11, 0xffffffffffffffff
0000000000004504         mov        qword [rsp+0xe8+var_48], 0x0
0000000000004510         mov        qword [rsp+0xe8+var_C0], rax
0000000000004515         jne        loc_4544

0000000000004517         mov        rdi, qword [rsp+0xe8+var_D8]                ; argument "__s" for method j_strlen
000000000000451c         mov        byte [rsp+0xe8+var_A8], r8b
0000000000004521         mov        byte [rsp+0xe8+var_B0], r10b
0000000000004526         mov        qword [rsp+0xe8+var_B8], r9
000000000000452b         call       j_strlen                                    ; strlen
0000000000004530         movzx      r8d, byte [rsp+0xe8+var_A8]
0000000000004536         movzx      r10d, byte [rsp+0xe8+var_B0]
000000000000453c         mov        r11, rax
000000000000453f         mov        r9, qword [rsp+0xe8+var_B8]

                     loc_4544:
0000000000004544         lea        rax, qword [rsp+0xe8+var_4C]                ; CODE XREF=sub_4390+389
000000000000454c         xor        ecx, ecx
000000000000454e         mov        byte [rsp+0xe8+var_6A], bl
0000000000004552         mov        byte [rsp+0xe8+var_6B], r8b
0000000000004557         mov        rbx, rcx
000000000000455a         mov        qword [rsp+0xe8+var_60], r9
0000000000004562         mov        qword [rsp+0xe8+var_B0], rax
0000000000004567         mov        byte [rsp+0xe8+var_69], r10b
000000000000456c         mov        qword [rsp+0xe8+var_68], r15
0000000000004574         mov        qword [rsp+0xe8+var_A8], r14
0000000000004579         mov        qword [rsp+0xe8+var_78], r13
000000000000457e         mov        qword [rsp+0xe8+var_B8], r11

                     loc_4583:
0000000000004583         mov        rax, qword [rsp+0xe8+var_D8]                ; CODE XREF=sub_4390+623
0000000000004588         lea        r14, qword [rbp+rbx]
000000000000458d         mov        rdx, qword [rsp+0xe8+var_B8]
0000000000004592         mov        rcx, qword [rsp+0xe8+var_C0]
0000000000004597         mov        rdi, qword [rsp+0xe8+var_B0]
000000000000459c         lea        r13, qword [rax+r14]
00000000000045a0         sub        rdx, r14
00000000000045a3         mov        rsi, r13
00000000000045a6         call       rpl_mbrtowc                                 ; rpl_mbrtowc
00000000000045ab         test       rax, rax
00000000000045ae         mov        r15, rax
00000000000045b1         je         loc_4601

00000000000045b3         cmp        rax, 0xffffffffffffffff
00000000000045b7         je         loc_4bd5

00000000000045bd         cmp        rax, 0xfffffffffffffffe
00000000000045c1         je         loc_4b61

00000000000045c7         cmp        dword [rsp+0xe8+var_E0], 0x2
00000000000045cc         sete       al
00000000000045cf         and        al, byte [rsp+0xe8+var_D9]
00000000000045d3         jne        loc_4770

                     loc_45d9:
00000000000045d9         mov        edi, dword [rsp+0xe8+var_4C]                ; argument "__wc" for method j_iswprint, CODE XREF=sub_4390+996, sub_4390+1031
00000000000045e0         call       j_iswprint                                  ; iswprint
00000000000045e5         mov        rdi, qword [rsp+0xe8+var_C0]                ; argument "__ps" for method j_mbsinit
00000000000045ea         test       eax, eax
00000000000045ec         mov        eax, 0x0
00000000000045f1         cmove      r12d, eax
00000000000045f5         add        rbx, r15
00000000000045f8         call       j_mbsinit                                   ; mbsinit
00000000000045fd         test       eax, eax
00000000000045ff         je         loc_4583

                     loc_4601:
0000000000004601         mov        edx, r12d                                   ; CODE XREF=sub_4390+545
0000000000004604         mov        rdi, rbx
0000000000004607         movzx      r8d, byte [rsp+0xe8+var_6B]
000000000000460d         xor        edx, 0x1
0000000000004610         movzx      ebx, byte [rsp+0xe8+var_6A]
0000000000004615         movzx      r10d, byte [rsp+0xe8+var_69]
000000000000461b         and        dl, byte [rsp+0xe8+var_DB]
000000000000461f         mov        r15, qword [rsp+0xe8+var_68]
0000000000004627         mov        r14, qword [rsp+0xe8+var_A8]
000000000000462c         mov        r13, qword [rsp+0xe8+var_78]
0000000000004631         mov        r11, qword [rsp+0xe8+var_B8]

                     loc_4636:
0000000000004636         cmp        rdi, 0x1                                    ; CODE XREF=sub_4390+2112, sub_4390+2168
000000000000463a         jbe        loc_4c3b

                     loc_4640:
0000000000004640         mov        rcx, rdi                                    ; CODE XREF=sub_4390+1961
0000000000004643         xor        esi, esi
0000000000004645         movzx      r9d, byte [rsp+0xe8+var_D9]
000000000000464b         add        rcx, rbp
000000000000464e         mov        rdi, qword [rsp+0xe8+var_D8]
0000000000004653         jmp        loc_470e
0000000000004658         align      32

                     loc_4660:
0000000000004660         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_4390+896
0000000000004665         sete       al
0000000000004668         test       r9b, r9b
000000000000466b         jne        loc_4b20

0000000000004671         mov        esi, r8d
0000000000004674         xor        esi, 0x1
0000000000004677         and        al, sil
000000000000467a         je         loc_46ab

000000000000467c         cmp        r13, r15
000000000000467f         jbe        loc_4686

0000000000004681         mov        byte [r14+r15], 0x27

                     loc_4686:
0000000000004686         lea        rsi, qword [r15+1]                          ; CODE XREF=sub_4390+751
000000000000468a         cmp        r13, rsi
000000000000468d         jbe        loc_4695

000000000000468f         mov        byte [r14+r15+1], 0x24

                     loc_4695:
0000000000004695         lea        rsi, qword [r15+2]                          ; CODE XREF=sub_4390+765
0000000000004699         cmp        r13, rsi
000000000000469c         jbe        loc_46a4

000000000000469e         mov        byte [r14+r15+2], 0x27

                     loc_46a4:
00000000000046a4         add        r15, 0x3                                    ; CODE XREF=sub_4390+780
00000000000046a8         mov        r8d, eax

                     loc_46ab:
00000000000046ab         cmp        r13, r15                                    ; CODE XREF=sub_4390+746
00000000000046ae         jbe        loc_46b5

00000000000046b0         mov        byte [r14+r15], 0x5c

                     loc_46b5:
00000000000046b5         lea        rax, qword [r15+1]                          ; CODE XREF=sub_4390+798
00000000000046b9         cmp        r13, rax
00000000000046bc         jbe        loc_46cb

00000000000046be         mov        eax, ebx
00000000000046c0         shr        al, 0x6
00000000000046c3         add        eax, 0x30
00000000000046c6         mov        byte [r14+r15+1], al

                     loc_46cb:
00000000000046cb         lea        rax, qword [r15+2]                          ; CODE XREF=sub_4390+812
00000000000046cf         cmp        r13, rax
00000000000046d2         jbe        loc_46e4

00000000000046d4         mov        eax, ebx
00000000000046d6         shr        al, 0x3
00000000000046d9         and        eax, 0x7
00000000000046dc         add        eax, 0x30
00000000000046df         mov        byte [r14+r15+2], al

                     loc_46e4:
00000000000046e4         and        ebx, 0x7                                    ; CODE XREF=sub_4390+834
00000000000046e7         add        rbp, 0x1
00000000000046eb         add        r15, 0x3
00000000000046ef         add        ebx, 0x30
00000000000046f2         cmp        rbp, rcx
00000000000046f5         jae        loc_3ee0

00000000000046fb         mov        esi, edx

                     loc_46fd:
00000000000046fd         cmp        r13, r15                                    ; CODE XREF=sub_4390+985, sub_4390+1969
0000000000004700         jbe        loc_4706

0000000000004702         mov        byte [r14+r15], bl

                     loc_4706:
0000000000004706         movzx      ebx, byte [rdi+rbp]                         ; CODE XREF=sub_4390+880
000000000000470a         add        r15, 0x1

                     loc_470e:
000000000000470e         test       dl, dl                                      ; CODE XREF=sub_4390+707
0000000000004710         jne        loc_4660

0000000000004716         mov        eax, esi
0000000000004718         xor        eax, 0x1
000000000000471b         and        eax, r8d
000000000000471e         test       r10b, r10b
0000000000004721         je         loc_4731

0000000000004723         cmp        r13, r15
0000000000004726         jbe        loc_472d

0000000000004728         mov        byte [r14+r15], 0x5c

                     loc_472d:
000000000000472d         add        r15, 0x1                                    ; CODE XREF=sub_4390+918

                     loc_4731:
0000000000004731         add        rbp, 0x1                                    ; CODE XREF=sub_4390+913
0000000000004735         cmp        rbp, rcx
0000000000004738         jae        loc_3ebc

000000000000473e         test       al, al
0000000000004740         je         loc_4b3e

0000000000004746         cmp        r13, r15
0000000000004749         jbe        loc_4750

000000000000474b         mov        byte [r14+r15], 0x27

                     loc_4750:
0000000000004750         lea        rax, qword [r15+1]                          ; CODE XREF=sub_4390+953
0000000000004754         cmp        r13, rax
0000000000004757         jbe        loc_475f

0000000000004759         mov        byte [r14+r15+1], 0x27

                     loc_475f:
000000000000475f         add        r15, 0x2                                    ; CODE XREF=sub_4390+967
0000000000004763         xor        r10d, r10d
0000000000004766         xor        r8d, r8d
0000000000004769         jmp        loc_46fd
000000000000476b         align      16

                     loc_4770:
0000000000004770         cmp        r15, 0x1                                    ; CODE XREF=sub_4390+579
0000000000004774         je         loc_45d9

000000000000477a         mov        rdi, qword [rsp+0xe8+var_D8]
000000000000477f         lea        rcx, qword [rdi+r15]
0000000000004783         lea        rdx, qword [rdi+r14+1]
0000000000004788         lea        r8, qword [rcx+r14]
000000000000478c         jmp        loc_479d
000000000000478e         align      16

                     loc_4790:
0000000000004790         add        rdx, 0x1                                    ; CODE XREF=sub_4390+1046, sub_4390+1072
0000000000004794         cmp        r8, rdx
0000000000004797         je         loc_45d9

                     loc_479d:
000000000000479d         movzx      ecx, byte [rdx]                             ; CODE XREF=sub_4390+1020
00000000000047a0         sub        ecx, 0x5b
00000000000047a3         cmp        cl, 0x21
00000000000047a6         ja         loc_4790

00000000000047a8         mov        esi, 0x1
00000000000047ad         shl        rsi, cl
00000000000047b0         mov        rcx, rsi
00000000000047b3         movabs     rsi, 0x20000002b
00000000000047bd         test       rcx, rsi
00000000000047c0         je         loc_4790

00000000000047c2         mov        r14, qword [rsp+0xe8+var_A8]
00000000000047c7         mov        r13, qword [rsp+0xe8+var_78]
00000000000047cc         mov        rbp, qword [rsp+0xe8+var_B8]
00000000000047d1         mov        dword [rsp+0xe8+var_E0], 0x2

                     loc_47d9:
00000000000047d9         cmp        byte [rsp+0xe8+var_DB], 0x0                 ; CODE XREF=sub_4390+1227, sub_4390+1948, sub_4390+2585, sub_4390+2734
00000000000047de         je         loc_47f0

00000000000047e0         test       al, al
00000000000047e2         mov        eax, 0x4
00000000000047e7         cmove      eax, dword [rsp+0xe8+var_E0]
00000000000047ec         mov        dword [rsp+0xe8+var_E0], eax

                     loc_47f0:
00000000000047f0         sub        rsp, 0x8                                    ; CODE XREF=sub_4390+1102
00000000000047f4         mov        rcx, rbp
00000000000047f7         mov        rsi, r13
00000000000047fa         push       qword [rsp+0xf0+var_88]
00000000000047fe         push       qword [rsp+0xf8+var_80]
0000000000004802         mov        rdi, r14
0000000000004805         push       0x0
0000000000004807         mov        r9d, dword [rsp+0x108+var_70]
000000000000480f         mov        r8d, dword [rsp+0x108+var_E0]
0000000000004814         mov        rdx, qword [rsp+0x108+var_D8]
0000000000004819         and        r9d, 0xfffffffd
000000000000481d         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000004822         add        rsp, 0x20
0000000000004826         mov        r15, rax

                     loc_4829:
0000000000004829         mov        rbx, qword [rsp+0xe8+var_40]                ; CODE XREF=sub_4390+2549, sub_4390+2560, sub_4390+2711
0000000000004831         xor        rbx, qword [fs:0x28]
000000000000483a         mov        rax, r15
000000000000483d         jne        loc_4e43

0000000000004843         add        rsp, 0xb8
000000000000484a         pop        rbx
000000000000484b         pop        rbp
000000000000484c         pop        r12
000000000000484e         pop        r13
0000000000004850         pop        r14
0000000000004852         pop        r15
0000000000004854         ret
                        ; endp
0000000000004855         align      8

                     loc_4858:
0000000000004858         mov        rbp, r11                                    ; CODE XREF=sub_3f40+194
000000000000485b         jmp        loc_47d9

                     loc_4860:
0000000000004860         cmp        r13, r15                                    ; CODE XREF=sub_4390+206, sub_4390+220
0000000000004863         jbe        loc_486a

0000000000004865         mov        byte [r14+r15], 0x27

                     loc_486a:
000000000000486a         lea        rax, qword [r15+1]                          ; CODE XREF=sub_4390+1235
000000000000486e         cmp        r13, rax
0000000000004871         jbe        loc_4879

0000000000004873         mov        byte [r14+r15+1], 0x5c

                     loc_4879:
0000000000004879         lea        rax, qword [r15+2]                          ; CODE XREF=sub_4390+1249
000000000000487d         cmp        r13, rax
0000000000004880         jbe        loc_4e72

0000000000004886         mov        rdx, r13
0000000000004889         mov        byte [r14+r15+2], 0x27
000000000000488f         mov        r13, qword [rsp+arg_48]
0000000000004894         jmp        loc_4472

                     loc_4899:
0000000000004899         mov        eax, r12d                                   ; CODE XREF=sub_4230+99
000000000000489c         mov        ebx, 0x30
00000000000048a1         xor        r12d, r12d
00000000000048a4         jmp        sub_3e40+105
                        ; endp

                     loc_48a9:
00000000000048a9         mov        byte [r14+r15+2], 0x27                      ; CODE XREF=sub_4230+67
00000000000048af         jmp        loc_4279

                     loc_48b4:
00000000000048b4         test       ebx, ebx                                    ; case 4, CODE XREF=quotearg_buffer_restyled+145
00000000000048b6         jne        loc_3ce3

00000000000048bc         mov        byte [rsp+0xe8+var_DB], 0x1

                     loc_48c1:
00000000000048c1         test       r13, r13                                    ; CODE XREF=sub_4390+2749
00000000000048c4         jne        loc_4e5a

00000000000048ca         lea        rax, qword [aLibs+29]                       ; 0xbafd
00000000000048d1         mov        qword [rsp+0xe8+var_98], 0x0
00000000000048da         mov        byte [rsp+0xe8+var_DA], 0x1
00000000000048df         mov        byte [rsp+0xe8+var_6C], 0x0
00000000000048e4         xor        r12d, r12d
00000000000048e7         mov        byte [rsp+0xe8+var_D9], 0x0
00000000000048ec         mov        qword [rsp+0xe8+var_D0], 0x1
00000000000048f5         mov        qword [rsp+0xe8+var_A0], rax
00000000000048fa         mov        r15d, 0x1
0000000000004900         mov        dword [rsp+0xe8+var_E0], 0x2
0000000000004908         jmp        loc_3d23
000000000000490d         align      16

                     loc_4910:
0000000000004910         test       ebx, ebx                                    ; case 5, CODE XREF=quotearg_buffer_restyled+145
0000000000004912         jne        loc_4d0d

0000000000004918         test       r13, r13
000000000000491b         je         loc_4b46

0000000000004921         mov        byte [r14], 0x22
0000000000004925         mov        byte [rsp+0xe8+var_DA], 0x1
000000000000492a         xor        r12d, r12d
000000000000492d         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000004932         mov        qword [rsp+0xe8+var_98], 0x0

                     loc_493b:
000000000000493b         lea        rax, qword [aLibs+27]                       ; 0xbafb, CODE XREF=sub_4390+1996
0000000000004942         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000004947         mov        byte [rsp+0xe8+var_DB], 0x1
000000000000494c         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000004955         mov        r15d, 0x1
000000000000495b         mov        qword [rsp+0xe8+var_A0], rax
0000000000004960         jmp        loc_3d23

                     loc_4965:
0000000000004965         lea        rax, qword [aLibs+27]                       ; case 6, 0xbafb, CODE XREF=quotearg_buffer_restyled+145
000000000000496c         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000004971         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000004976         xor        r12d, r12d
0000000000004979         mov        qword [rsp+0xe8+var_98], 0x0
0000000000004982         mov        byte [rsp+0xe8+var_D9], 0x1
0000000000004987         mov        byte [rsp+0xe8+var_DB], 0x1
000000000000498c         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000004995         xor        r15d, r15d
0000000000004998         mov        qword [rsp+0xe8+var_A0], rax
000000000000499d         mov        dword [rsp+0xe8+var_E0], 0x5
00000000000049a5         jmp        loc_3d23

                     loc_49aa:
00000000000049aa         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 7, CODE XREF=quotearg_buffer_restyled+145
00000000000049af         mov        byte [rsp+0xe8+var_6C], 0x0
00000000000049b4         xor        r12d, r12d
00000000000049b7         mov        qword [rsp+0xe8+var_98], 0x0
00000000000049c0         mov        byte [rsp+0xe8+var_D9], 0x0
00000000000049c5         xor        r15d, r15d
00000000000049c8         mov        byte [rsp+0xe8+var_DB], 0x1
00000000000049cd         mov        qword [rsp+0xe8+var_D0], 0x0
00000000000049d6         mov        qword [rsp+0xe8+var_A0], 0x0
00000000000049df         jmp        loc_3d23

                     loc_49e4:
00000000000049e4         cmp        dword [rsp+0xe8+var_E0], 0xa                ; case 10, CODE XREF=quotearg_buffer_restyled+145
00000000000049e9         je         loc_4a41

00000000000049eb         lea        rsi, qword [aLibs+31]                       ; argument "msgid" for method j_dcgettext, 0xbaff
00000000000049f2         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000049f4         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000049f9         call       j_dcgettext                                 ; dcgettext
00000000000049fe         mov        rcx, rax
0000000000004a01         mov        qword [rsp+0xe8+var_80], rax
0000000000004a06         lea        rax, qword [aLibs+31]                       ; 0xbaff
0000000000004a0d         cmp        rcx, rax
0000000000004a10         je         loc_4dae

                     loc_4a16:
0000000000004a16         lea        rsi, qword [aLibs+29]                       ; argument "msgid" for method j_dcgettext, 0xbafd, CODE XREF=sub_4390+2607
0000000000004a1d         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004a1f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004a24         call       j_dcgettext                                 ; dcgettext
0000000000004a29         mov        rcx, rax
0000000000004a2c         mov        qword [rsp+0xe8+var_88], rax
0000000000004a31         lea        rax, qword [aLibs+29]                       ; 0xbafd
0000000000004a38         cmp        rcx, rax
0000000000004a3b         je         loc_4dc4

                     loc_4a41:
0000000000004a41         xor        r15d, r15d                                  ; CODE XREF=sub_4390+1625, sub_4390+2629
0000000000004a44         test       ebx, ebx
0000000000004a46         je         loc_4c0d

                     loc_4a4c:
0000000000004a4c         test       ebx, ebx                                    ; CODE XREF=sub_4390+2183, sub_4390+2214
0000000000004a4e         mov        rbx, qword [rsp+0xe8+var_88]
0000000000004a53         setne      byte [rsp+0xe8+var_D9]
0000000000004a58         xor        r12d, r12d
0000000000004a5b         mov        rdi, rbx                                    ; argument "__s" for method j_strlen
0000000000004a5e         call       j_strlen                                    ; strlen
0000000000004a63         mov        qword [rsp+0xe8+var_A0], rbx
0000000000004a68         mov        qword [rsp+0xe8+var_D0], rax
0000000000004a6d         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000004a72         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000004a77         mov        qword [rsp+0xe8+var_98], 0x0
0000000000004a80         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000004a85         jmp        loc_3d23

                     loc_4a8a:
0000000000004a8a         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 0, CODE XREF=quotearg_buffer_restyled+145
0000000000004a8f         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000004a94         xor        r12d, r12d
0000000000004a97         mov        qword [rsp+0xe8+var_98], 0x0
0000000000004aa0         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000004aa5         xor        r15d, r15d
0000000000004aa8         mov        byte [rsp+0xe8+var_DB], 0x0
0000000000004aad         mov        qword [rsp+0xe8+var_D0], 0x0
0000000000004ab6         mov        qword [rsp+0xe8+var_A0], 0x0
0000000000004abf         jmp        loc_3d23

                     loc_4ac4:
0000000000004ac4         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 3, CODE XREF=quotearg_buffer_restyled+145
0000000000004ac9         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000004ace         xor        r12d, r12d
0000000000004ad1         mov        qword [rsp+0xe8+var_98], 0x0
0000000000004ada         mov        byte [rsp+0xe8+var_D9], 0x1
0000000000004adf         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000004ae4         jmp        loc_3d03

                     loc_4ae9:
0000000000004ae9         cmp        r13, r15                                    ; CODE XREF=sub_4230+133
0000000000004aec         jbe        loc_4af3

0000000000004aee         mov        byte [r14+r15], 0x30

                     loc_4af3:
0000000000004af3         lea        rax, qword [rcx+2]                          ; CODE XREF=sub_4390+1884
0000000000004af7         cmp        r13, rax
0000000000004afa         jbe        loc_4b02

0000000000004afc         mov        byte [r14+rcx+2], 0x30

                     loc_4b02:
0000000000004b02         mov        eax, r12d                                   ; CODE XREF=sub_4390+1898
0000000000004b05         lea        r15, qword [rcx+3]
0000000000004b09         xor        r12d, r12d
0000000000004b0c         mov        ebx, 0x30
0000000000004b11         jmp        sub_3e40+56
                        ; endp
0000000000004b16         align      32

                     loc_4b20:
0000000000004b20         movzx      ebx, byte [rsp+0xe8+var_D9]                 ; CODE XREF=sub_4390+731
0000000000004b25         mov        rbp, r11
0000000000004b28         mov        byte [rsp+0xe8+var_DB], bl
0000000000004b2c         jmp        loc_47d9

                     loc_4b31:
0000000000004b31         movzx      edx, byte [rsp+0xe8+var_DB]                 ; CODE XREF=sub_4130+105
0000000000004b36         xor        r12d, r12d
0000000000004b39         jmp        loc_4640

                     loc_4b3e:
0000000000004b3e         xor        r10d, r10d                                  ; CODE XREF=sub_4390+944
0000000000004b41         jmp        loc_46fd

                     loc_4b46:
0000000000004b46         mov        qword [rsp+0xe8+var_98], 0x0                ; CODE XREF=sub_4390+1419
0000000000004b4f         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000004b54         xor        r12d, r12d
0000000000004b57         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000004b5c         jmp        loc_493b

                     loc_4b61:
0000000000004b61         mov        r11, qword [rsp+0xe8+var_B8]                ; CODE XREF=sub_4390+561
0000000000004b66         mov        rsi, r14
0000000000004b69         mov        rcx, r13
0000000000004b6c         mov        rax, rbx
0000000000004b6f         mov        rdi, rbx
0000000000004b72         movzx      r8d, byte [rsp+0xe8+var_6B]
0000000000004b78         movzx      ebx, byte [rsp+0xe8+var_6A]
0000000000004b7d         mov        r9, qword [rsp+0xe8+var_60]
0000000000004b85         cmp        rsi, r11
0000000000004b88         movzx      r10d, byte [rsp+0xe8+var_69]
0000000000004b8e         mov        r15, qword [rsp+0xe8+var_68]
0000000000004b96         mov        r14, qword [rsp+0xe8+var_A8]
0000000000004b9b         mov        r13, qword [rsp+0xe8+var_78]
0000000000004ba0         jae        loc_4bc8

0000000000004ba2         cmp        byte [rcx], 0x0
0000000000004ba5         jne        loc_4bb7

0000000000004ba7         jmp        loc_4bc8
0000000000004ba9         align      16

                     loc_4bb0:
0000000000004bb0         cmp        byte [r9+rax], 0x0                          ; CODE XREF=sub_4390+2099
0000000000004bb5         je         loc_4bc5

                     loc_4bb7:
0000000000004bb7         add        rax, 0x1                                    ; CODE XREF=sub_4390+2069
0000000000004bbb         lea        rdx, qword [rbp+rax]
0000000000004bc0         cmp        r11, rdx
0000000000004bc3         ja         loc_4bb0

                     loc_4bc5:
0000000000004bc5         mov        rdi, rax                                    ; CODE XREF=sub_4390+2085

                     loc_4bc8:
0000000000004bc8         movzx      edx, byte [rsp+0xe8+var_DB]                 ; CODE XREF=sub_4390+2064, sub_4390+2071
0000000000004bcd         xor        r12d, r12d
0000000000004bd0         jmp        loc_4636

                     loc_4bd5:
0000000000004bd5         mov        rdi, rbx                                    ; CODE XREF=sub_4390+551
0000000000004bd8         movzx      r8d, byte [rsp+0xe8+var_6B]
0000000000004bde         movzx      ebx, byte [rsp+0xe8+var_6A]
0000000000004be3         movzx      r10d, byte [rsp+0xe8+var_69]
0000000000004be9         mov        r15, qword [rsp+0xe8+var_68]
0000000000004bf1         xor        r12d, r12d
0000000000004bf4         mov        r14, qword [rsp+0xe8+var_A8]
0000000000004bf9         mov        r13, qword [rsp+0xe8+var_78]
0000000000004bfe         mov        r11, qword [rsp+0xe8+var_B8]
0000000000004c03         movzx      edx, byte [rsp+0xe8+var_DB]
0000000000004c08         jmp        loc_4636

                     loc_4c0d:
0000000000004c0d         mov        rdx, qword [rsp+0xe8+var_80]                ; CODE XREF=sub_4390+1718
0000000000004c12         movzx      eax, byte [rdx]
0000000000004c15         test       al, al
0000000000004c17         je         loc_4a4c

0000000000004c1d         nop        dword [rax]

                     loc_4c20:
0000000000004c20         cmp        r13, r15                                    ; CODE XREF=sub_4390+2212
0000000000004c23         jbe        loc_4c29

0000000000004c25         mov        byte [r14+r15], al

                     loc_4c29:
0000000000004c29         add        r15, 0x1                                    ; CODE XREF=sub_4390+2195
0000000000004c2d         movzx      eax, byte [rdx+r15]
0000000000004c32         test       al, al
0000000000004c34         jne        loc_4c20

0000000000004c36         jmp        loc_4a4c

                     loc_4c3b:
0000000000004c3b         mov        eax, edx                                    ; CODE XREF=sub_4390+682
0000000000004c3d         jmp        loc_4197

                     loc_4c42:
0000000000004c42         movzx      ebx, byte [rax+rcx]                         ; CODE XREF=sub_4390+290
0000000000004c46         cmp        bl, 0x3e
0000000000004c49         ja         loc_44c0

0000000000004c4f         movabs     rax, 0x7000a38200000000
0000000000004c59         bt         rax, rbx
0000000000004c5d         jae        loc_44c0

0000000000004c63         cmp        byte [rsp+arg_7], 0x0
0000000000004c68         jne        loc_4e52

0000000000004c6e         cmp        r13, r15
0000000000004c71         jbe        loc_4c78

0000000000004c73         mov        byte [r14+r15], 0x3f

                     loc_4c78:
0000000000004c78         lea        rax, qword [r15+1]                          ; CODE XREF=sub_4390+2273
0000000000004c7c         cmp        r13, rax
0000000000004c7f         jbe        loc_4c87

0000000000004c81         mov        byte [r14+r15+1], 0x22

                     loc_4c87:
0000000000004c87         lea        rax, qword [r15+2]                          ; CODE XREF=sub_4390+2287
0000000000004c8b         cmp        r13, rax
0000000000004c8e         jbe        loc_4c96

0000000000004c90         mov        byte [r14+r15+2], 0x22

                     loc_4c96:
0000000000004c96         lea        rax, qword [r15+3]                          ; CODE XREF=sub_4390+2302
0000000000004c9a         cmp        r13, rax
0000000000004c9d         jbe        loc_4ca5

0000000000004c9f         mov        byte [r14+r15+3], 0x3f

                     loc_4ca5:
0000000000004ca5         add        r15, 0x4                                    ; CODE XREF=sub_4390+2317
0000000000004ca9         xor        edx, edx
0000000000004cab         xor        r12d, r12d
0000000000004cae         xor        eax, eax
0000000000004cb0         mov        rbp, rcx
0000000000004cb3         jmp        sub_3e40+56
                        ; endp

                     loc_4cb8:
0000000000004cb8         test       ebx, ebx                                    ; case 2, CODE XREF=quotearg_buffer_restyled+145
0000000000004cba         je         loc_4e48

0000000000004cc0         lea        rax, qword [aLibs+29]                       ; 0xbafd
0000000000004cc7         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000004ccc         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000004cd1         xor        r12d, r12d
0000000000004cd4         mov        qword [rsp+0xe8+var_98], 0x0
0000000000004cdd         mov        byte [rsp+0xe8+var_D9], 0x1
0000000000004ce2         mov        byte [rsp+0xe8+var_DB], 0x0
0000000000004ce7         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000004cf0         xor        r15d, r15d
0000000000004cf3         mov        qword [rsp+0xe8+var_A0], rax
0000000000004cf8         jmp        loc_3d23
0000000000004cfd         align      256

                     loc_4d00:
0000000000004d00         mov        rbp, r11                                    ; CODE XREF=sub_4390+333
0000000000004d03         movzx      eax, byte [rsp+arg_7]
0000000000004d08         jmp        sub_4390+1097
                        ; endp

                     loc_4d0d:
0000000000004d0d         lea        rax, qword [aLibs+27]                       ; 0xbafb, CODE XREF=sub_4390+1410
0000000000004d14         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000004d19         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000004d1e         xor        r12d, r12d
0000000000004d21         mov        qword [rsp+0xe8+var_98], 0x0
0000000000004d2a         mov        byte [rsp+0xe8+var_D9], 0x1
0000000000004d2f         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000004d34         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000004d3d         xor        r15d, r15d
0000000000004d40         mov        qword [rsp+0xe8+var_A0], rax
0000000000004d45         jmp        loc_3d23

                     loc_4d4a:
0000000000004d4a         mov        eax, edx                                    ; CODE XREF=sub_4390+87

                     loc_4d4c:
0000000000004d4c         mov        rbx, qword [rsp+0xe8+var_A0]                ; CODE XREF=sub_4390+76, sub_4390+2721
0000000000004d51         test       rbx, rbx
0000000000004d54         je         loc_4d82

0000000000004d56         test       al, al
0000000000004d58         je         loc_4d82

0000000000004d5a         movzx      ecx, byte [rbx]
0000000000004d5d         mov        rax, rbx
0000000000004d60         test       cl, cl
0000000000004d62         je         loc_4d82

0000000000004d64         mov        rdx, r15
0000000000004d67         sub        rax, r15

                     loc_4d6a:
0000000000004d6a         cmp        r13, rdx                                    ; CODE XREF=sub_4390+2541
0000000000004d6d         jbe        loc_4d73

0000000000004d6f         mov        byte [r14+rdx], cl

                     loc_4d73:
0000000000004d73         add        rdx, 0x1                                    ; CODE XREF=sub_4390+2525
0000000000004d77         movzx      ecx, byte [rax+rdx]
0000000000004d7b         test       cl, cl
0000000000004d7d         jne        loc_4d6a

0000000000004d7f         mov        r15, rdx

                     loc_4d82:
0000000000004d82         cmp        r13, r15                                    ; CODE XREF=sub_4390+2500, sub_4390+2504, sub_4390+2514
0000000000004d85         jbe        loc_4829

0000000000004d8b         mov        byte [r14+r15], 0x0
0000000000004d90         jmp        loc_4829

                     loc_4d95:
0000000000004d95         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=quotearg_buffer_restyled+450
0000000000004d9a         movzx      ebx, byte [rsp+0xe8+var_D9]
0000000000004d9f         mov        rbp, r11
0000000000004da2         sete       al
0000000000004da5         mov        byte [rsp+0xe8+var_DB], bl
0000000000004da9         jmp        loc_47d9

                     loc_4dae:
0000000000004dae         mov        esi, dword [rsp+0xe8+var_E0]                ; CODE XREF=sub_4390+1664
0000000000004db2         mov        rdi, rcx
0000000000004db5         call       gettext_quote.part.1                        ; gettext_quote.part.1
0000000000004dba         mov        qword [rsp+0xe8+var_80], rax
0000000000004dbf         jmp        loc_4a16

                     loc_4dc4:
0000000000004dc4         mov        esi, dword [rsp+0xe8+var_E0]                ; CODE XREF=sub_4390+1707
0000000000004dc8         mov        rdi, rcx
0000000000004dcb         call       gettext_quote.part.1                        ; gettext_quote.part.1
0000000000004dd0         mov        qword [rsp+0xe8+var_88], rax
0000000000004dd5         jmp        loc_4a41

                     loc_4dda:
0000000000004dda         movzx      ebx, byte [rsp+arg_7]                       ; CODE XREF=sub_4230+16
0000000000004ddf         mov        rbp, r11
0000000000004de2         mov        eax, edx
0000000000004de4         mov        byte [rsp+arg_5], bl
0000000000004de8         jmp        sub_4390+1097
                        ; endp

                     loc_4ded:
0000000000004ded         sub        rsp, 0x8                                    ; CODE XREF=sub_4390+98
0000000000004df1         mov        r8d, 0x5
0000000000004df7         mov        rcx, r11
0000000000004dfa         push       qword [rsp+0xf0+var_88]
0000000000004dfe         push       qword [rsp+0xf8+var_80]
0000000000004e02         mov        rdi, r14
0000000000004e05         push       qword [rsp+0x100+var_C8]
0000000000004e09         mov        r9d, dword [rsp+0x108+var_70]
0000000000004e11         mov        rdx, qword [rsp+0x108+var_D8]
0000000000004e16         mov        rsi, qword [rsp+0x108+var_98]
0000000000004e1b         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000004e20         add        rsp, 0x20
0000000000004e24         mov        r15, rax
0000000000004e27         jmp        loc_4829

                     loc_4e2c:
0000000000004e2c         movzx      eax, byte [rsp+0xe8+var_6C]                 ; CODE XREF=sub_4390+121
0000000000004e31         jmp        loc_4d4c

                     loc_4e36:
0000000000004e36         mov        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_4390+63
0000000000004e3e         jmp        loc_47d9

                     loc_4e43:
0000000000004e43         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=sub_4390+1197
                        ; endp

                     loc_4e48:
0000000000004e48         mov        byte [rsp+0xe8+var_DB], 0x0                 ; CODE XREF=sub_4390+2346
0000000000004e4d         jmp        loc_48c1

                     loc_4e52:
0000000000004e52         mov        rbp, r11                                    ; CODE XREF=sub_4390+2264
0000000000004e55         jmp        sub_4390+1120
                        ; endp

                     loc_4e5a:
0000000000004e5a         mov        byte [rsp+0xe8+var_DA], 0x1                 ; CODE XREF=sub_4390+1332
0000000000004e5f         xor        eax, eax
0000000000004e61         xor        r12d, r12d
0000000000004e64         mov        qword [rsp+0xe8+var_98], 0x0
0000000000004e6d         jmp        loc_4414

                     loc_4e72:
0000000000004e72         mov        rdx, r13                                    ; CODE XREF=sub_4390+1264
0000000000004e75         mov        r13, qword [rsp+arg_48]
0000000000004e7a         jmp        loc_4472

                     loc_4e7f:
0000000000004e7f         call       j_abort                                     ; abort, CODE XREF=quotearg_buffer_restyled+122
                        ; endp
0000000000004e84         align      16                                          ; End of unwind block (FDE at 0xce38)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_3C: int32_t, -60
        ;    var_40: int32_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80


                     quotearg_n_options:
0000000000004e90         push       r15                                         ; Begin of unwind block (FDE at 0xceb0), CODE XREF=quotearg_n+14, quotearg_n_mem+7, quotearg+19, quotearg_mem+15, quotearg_n_style+106, quotearg_n_style_mem+102, quotearg_char_mem+121, quotearg_n_style_colon+106, quotearg_n_custom_mem+109, quote_n_mem+7, quote_mem+15
0000000000004e92         push       r14
0000000000004e94         movsxd     r15, edi
0000000000004e97         push       r13
0000000000004e99         push       r12
0000000000004e9b         mov        r14, rdx
0000000000004e9e         push       rbp
0000000000004e9f         push       rbx
0000000000004ea0         mov        rbp, rcx
0000000000004ea3         sub        rsp, 0x28
0000000000004ea7         mov        qword [rsp+0x58+var_50], rsi
0000000000004eac         call       j___errno_location                          ; __errno_location
0000000000004eb1         mov        r13, rax
0000000000004eb4         mov        eax, dword [rax]
0000000000004eb6         test       r15d, r15d
0000000000004eb9         mov        rbx, qword [slotvec]                        ; slotvec
0000000000004ec0         mov        dword [rsp+0x58+var_40], eax
0000000000004ec4         js         loc_5031

0000000000004eca         cmp        dword [nslots], r15d                        ; nslots
0000000000004ed1         jg         loc_4f35

0000000000004ed3         cmp        r15d, 0x7fffffff
0000000000004eda         je         loc_5036

0000000000004ee0         lea        r12d, dword [r15+1]
0000000000004ee4         lea        rax, qword [slotvec0]                       ; slotvec0
0000000000004eeb         movsxd     rsi, r12d
0000000000004eee         shl        rsi, 0x4
0000000000004ef2         cmp        rbx, rax
0000000000004ef5         je         loc_5010

0000000000004efb         mov        rdi, rbx                                    ; argument #1 for method xrealloc
0000000000004efe         call       xrealloc                                    ; xrealloc
0000000000004f03         mov        rbx, rax
0000000000004f06         mov        qword [slotvec], rax                        ; slotvec

                     loc_4f0d:
0000000000004f0d         movsxd     rdi, dword [nslots]                         ; nslots, CODE XREF=quotearg_n_options+412
0000000000004f14         mov        edx, r12d
0000000000004f17         xor        esi, esi                                    ; argument "__c" for method j_memset
0000000000004f19         sub        edx, edi
0000000000004f1b         shl        rdi, 0x4
0000000000004f1f         movsxd     rdx, edx
0000000000004f22         add        rdi, rbx                                    ; argument "__s" for method j_memset
0000000000004f25         shl        rdx, 0x4                                    ; argument "__n" for method j_memset
0000000000004f29         call       j_memset                                    ; memset
0000000000004f2e         mov        dword [nslots], r12d                        ; nslots

                     loc_4f35:
0000000000004f35         mov        eax, dword [rbp+4]                          ; CODE XREF=quotearg_n_options+65
0000000000004f38         shl        r15, 0x4
0000000000004f3c         sub        rsp, 0x8
0000000000004f40         add        rbx, r15
0000000000004f43         lea        r15, qword [rbp+8]
0000000000004f47         mov        r8d, dword [rbp]                            ; argument #5 for method quotearg_buffer_restyled
0000000000004f4b         mov        r11, qword [rbx]
0000000000004f4e         mov        r12, qword [rbx+8]
0000000000004f52         mov        rcx, r14                                    ; argument #4 for method quotearg_buffer_restyled
0000000000004f55         or         eax, 0x1
0000000000004f58         mov        dword [rsp+0x60+var_3C], eax
0000000000004f5c         push       qword [rbp+0x30]                            ; argument #9 for method quotearg_buffer_restyled
0000000000004f5f         mov        r9d, eax                                    ; argument #6 for method quotearg_buffer_restyled
0000000000004f62         push       qword [rbp+0x28]                            ; argument #8 for method quotearg_buffer_restyled
0000000000004f65         push       r15                                         ; argument #7 for method quotearg_buffer_restyled
0000000000004f67         mov        rsi, r11                                    ; argument #2 for method quotearg_buffer_restyled
0000000000004f6a         mov        rdx, qword [rsp+0x78+var_50]                ; argument #3 for method quotearg_buffer_restyled
0000000000004f6f         mov        rdi, r12                                    ; argument #1 for method quotearg_buffer_restyled
0000000000004f72         mov        qword [rsp+0x78+var_48], r11
0000000000004f77         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000004f7c         add        rsp, 0x20
0000000000004f80         mov        r11, qword [rsp+0x58+var_48]
0000000000004f85         cmp        r11, rax
0000000000004f88         ja         loc_4ff1

0000000000004f8a         lea        rsi, qword [rax+1]
0000000000004f8e         lea        rax, qword [slot0]                          ; slot0
0000000000004f95         cmp        r12, rax
0000000000004f98         mov        qword [rbx], rsi
0000000000004f9b         je         loc_4faf

0000000000004f9d         mov        rdi, r12
0000000000004fa0         mov        qword [rsp+0x58+var_48], rsi
0000000000004fa5         call       sub_1de0                                    ; sub_1de0
0000000000004faa         mov        rsi, qword [rsp+0x58+var_48]

                     loc_4faf:
0000000000004faf         mov        rdi, rsi                                    ; argument #1 for method xmalloc, CODE XREF=quotearg_n_options+267
0000000000004fb2         mov        qword [rsp+0x58+var_48], rsi
0000000000004fb7         call       xmalloc                                     ; xmalloc
0000000000004fbc         sub        rsp, 0x8
0000000000004fc0         mov        qword [rbx+8], rax
0000000000004fc4         mov        r8d, dword [rbp]                            ; argument #5 for method quotearg_buffer_restyled
0000000000004fc8         push       qword [rbp+0x30]                            ; argument #9 for method quotearg_buffer_restyled
0000000000004fcb         push       qword [rbp+0x28]                            ; argument #8 for method quotearg_buffer_restyled
0000000000004fce         mov        rcx, r14                                    ; argument #4 for method quotearg_buffer_restyled
0000000000004fd1         push       r15                                         ; argument #7 for method quotearg_buffer_restyled
0000000000004fd3         mov        r9d, dword [rsp+0x78+var_3C]                ; argument #6 for method quotearg_buffer_restyled
0000000000004fd8         mov        rdi, rax                                    ; argument #1 for method quotearg_buffer_restyled
0000000000004fdb         mov        rdx, qword [rsp+0x78+var_50]                ; argument #3 for method quotearg_buffer_restyled
0000000000004fe0         mov        rsi, qword [rsp+0x78+var_48]                ; argument #2 for method quotearg_buffer_restyled
0000000000004fe5         mov        r12, rax
0000000000004fe8         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000004fed         add        rsp, 0x20

                     loc_4ff1:
0000000000004ff1         mov        eax, dword [rsp+0x58+var_40]                ; CODE XREF=quotearg_n_options+248
0000000000004ff5         mov        dword [r13], eax
0000000000004ff9         add        rsp, 0x28
0000000000004ffd         mov        rax, r12
0000000000005000         pop        rbx
0000000000005001         pop        rbp
0000000000005002         pop        r12
0000000000005004         pop        r13
0000000000005006         pop        r14
0000000000005008         pop        r15
000000000000500a         ret
                        ; endp
000000000000500b         align      16

                     loc_5010:
0000000000005010         xor        edi, edi                                    ; argument #1 for method xrealloc, CODE XREF=quotearg_n_options+101
0000000000005012         call       xrealloc                                    ; xrealloc
0000000000005017         movdqa     xmm0, xmmword [slotvec0]                    ; slotvec0
000000000000501f         mov        rbx, rax
0000000000005022         mov        qword [slotvec], rax                        ; slotvec
0000000000005029         movups     xmmword [rax], xmm0
000000000000502c         jmp        loc_4f0d

                     loc_5031:
0000000000005031         call       j_abort                                     ; abort, CODE XREF=quotearg_n_options+52
                        ; endp

                     loc_5036:
0000000000005036         call       xalloc_die                                  ; xalloc_die, CODE XREF=quotearg_n_options+74
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_503b:
000000000000503b         nop        dword [rax+rax]                             ; End of unwind block (FDE at 0xceb0)
                     clone_quoting_options:
0000000000005040         push       r12                                         ; Begin of unwind block (FDE at 0xcf1c)
0000000000005042         push       rbp
0000000000005043         push       rbx
0000000000005044         mov        rbx, rdi
0000000000005047         call       j___errno_location                          ; __errno_location
000000000000504c         mov        r12d, dword [rax]
000000000000504f         mov        rbp, rax
0000000000005052         lea        rax, qword [default_quoting_options]        ; default_quoting_options
0000000000005059         test       rbx, rbx
000000000000505c         mov        esi, 0x38                                   ; argument #2 for method xmemdup
0000000000005061         cmove      rbx, rax
0000000000005065         mov        rdi, rbx                                    ; argument #1 for method xmemdup
0000000000005068         call       xmemdup                                     ; xmemdup
000000000000506d         mov        dword [rbp], r12d
0000000000005071         pop        rbx
0000000000005072         pop        rbp
0000000000005073         pop        r12
0000000000005075         ret
                        ; endp
0000000000005076         align      128                                         ; End of unwind block (FDE at 0xcf1c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     get_quoting_style:
0000000000005080         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xcf48), default_quoting_options
0000000000005087         test       rdi, rdi
000000000000508a         cmove      rdi, rax
000000000000508e         mov        eax, dword [rdi]
0000000000005090         ret
                        ; endp
0000000000005091         align      32                                          ; End of unwind block (FDE at 0xcf48)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_quoting_style:
00000000000050a0         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xcf5c), default_quoting_options
00000000000050a7         test       rdi, rdi
00000000000050aa         cmove      rdi, rax
00000000000050ae         mov        dword [rdi], esi
00000000000050b0         ret
                        ; endp
00000000000050b1         align      64                                          ; End of unwind block (FDE at 0xcf5c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_char_quoting:
00000000000050c0         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xcf70), default_quoting_options
00000000000050c7         test       rdi, rdi
00000000000050ca         mov        ecx, esi
00000000000050cc         cmove      rdi, rax
00000000000050d0         mov        eax, esi
00000000000050d2         and        ecx, 0x1f
00000000000050d5         shr        al, 0x5
00000000000050d8         movzx      eax, al
00000000000050db         lea        rdi, qword [rdi+rax*4+8]
00000000000050e0         mov        esi, dword [rdi]
00000000000050e2         mov        eax, esi
00000000000050e4         shr        eax, cl
00000000000050e6         xor        edx, eax
00000000000050e8         and        eax, 0x1
00000000000050eb         and        edx, 0x1
00000000000050ee         shl        edx, cl
00000000000050f0         xor        edx, esi
00000000000050f2         mov        dword [rdi], edx
00000000000050f4         ret
                        ; endp
00000000000050f5         align      256                                         ; End of unwind block (FDE at 0xcf70)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_quoting_flags:
0000000000005100         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xcf84), default_quoting_options
0000000000005107         test       rdi, rdi
000000000000510a         cmove      rdi, rax
000000000000510e         mov        eax, dword [rdi+4]
0000000000005111         mov        dword [rdi+4], esi
0000000000005114         ret
                        ; endp
0000000000005115         align      32                                          ; End of unwind block (FDE at 0xcf84)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_custom_quoting:
0000000000005120         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xcf98), default_quoting_options
0000000000005127         test       rdi, rdi
000000000000512a         cmove      rdi, rax
000000000000512e         test       rsi, rsi
0000000000005131         mov        dword [rdi], 0xa
0000000000005137         je         loc_5147

0000000000005139         test       rdx, rdx
000000000000513c         je         loc_5147

000000000000513e         mov        qword [rdi+0x28], rsi
0000000000005142         mov        qword [rdi+0x30], rdx
0000000000005146         ret
                        ; endp

                     loc_5147:
0000000000005147         sub        rsp, 0x8                                    ; CODE XREF=set_custom_quoting+23, set_custom_quoting+28
000000000000514b         call       j_abort                                     ; abort
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64


                     quotearg_buffer:
0000000000005150         push       r15                                         ; End of unwind block (FDE at 0xcf98), Begin of unwind block (FDE at 0xcfac)
0000000000005152         push       r14
0000000000005154         lea        rax, qword [default_quoting_options]        ; default_quoting_options
000000000000515b         push       r13
000000000000515d         push       r12
000000000000515f         mov        r13, rdi
0000000000005162         push       rbp
0000000000005163         push       rbx
0000000000005164         mov        rbx, r8
0000000000005167         mov        r14, rsi
000000000000516a         mov        r15, rdx
000000000000516d         sub        rsp, 0x18
0000000000005171         test       r8, r8
0000000000005174         cmove      rbx, rax
0000000000005178         mov        qword [rsp+0x48+var_40], rcx
000000000000517d         call       j___errno_location                          ; __errno_location
0000000000005182         mov        r12d, dword [rax]
0000000000005185         mov        rbp, rax
0000000000005188         lea        rax, qword [rbx+8]
000000000000518c         sub        rsp, 0x8
0000000000005190         mov        r9d, dword [rbx+4]
0000000000005194         push       qword [rbx+0x30]
0000000000005197         mov        r8d, dword [rbx]
000000000000519a         push       qword [rbx+0x28]
000000000000519d         mov        rdx, r15
00000000000051a0         push       rax
00000000000051a1         mov        rcx, qword [rsp+0x68+var_40]
00000000000051a6         mov        rsi, r14
00000000000051a9         mov        rdi, r13
00000000000051ac         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
00000000000051b1         mov        dword [rbp], r12d
00000000000051b5         add        rsp, 0x38
00000000000051b9         pop        rbx
00000000000051ba         pop        rbp
00000000000051bb         pop        r12
00000000000051bd         pop        r13
00000000000051bf         pop        r14
00000000000051c1         pop        r15
00000000000051c3         ret
                        ; endp
00000000000051c4         align      16                                          ; End of unwind block (FDE at 0xcfac)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_5C: int32_t, -92


                     quotearg_alloc_mem:
00000000000051d0         push       r15                                         ; Begin of unwind block (FDE at 0xd000), CODE XREF=quotearg_alloc+5
00000000000051d2         push       r14
00000000000051d4         lea        rax, qword [default_quoting_options]        ; default_quoting_options
00000000000051db         push       r13
00000000000051dd         push       r12
00000000000051df         mov        r12, rdx
00000000000051e2         push       rbp
00000000000051e3         push       rbx
00000000000051e4         mov        rbx, rcx
00000000000051e7         mov        r14, rdi
00000000000051ea         mov        r15, rsi
00000000000051ed         sub        rsp, 0x38
00000000000051f1         test       rcx, rcx
00000000000051f4         cmove      rbx, rax
00000000000051f8         xor        ebp, ebp
00000000000051fa         call       j___errno_location                          ; __errno_location
00000000000051ff         test       r12, r12
0000000000005202         mov        r13, rax
0000000000005205         mov        eax, dword [rax]
0000000000005207         sete       bpl
000000000000520b         or         ebp, dword [rbx+4]
000000000000520e         lea        r10, qword [rbx+8]
0000000000005212         sub        rsp, 0x8
0000000000005216         mov        r8d, dword [rbx]
0000000000005219         mov        rcx, r15
000000000000521c         mov        dword [rsp+0x70+var_5C], eax
0000000000005220         push       qword [rbx+0x30]
0000000000005223         mov        rdx, r14
0000000000005226         push       qword [rbx+0x28]
0000000000005229         push       r10
000000000000522b         xor        esi, esi
000000000000522d         mov        r9d, ebp
0000000000005230         xor        edi, edi
0000000000005232         mov        qword [rsp+0x88+var_48], r10
0000000000005237         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
000000000000523c         lea        rsi, qword [rax+1]
0000000000005240         mov        qword [rsp+0x88+var_40], rax
0000000000005245         add        rsp, 0x20
0000000000005249         mov        rdi, rsi
000000000000524c         mov        qword [rsp+0x68+var_50], rsi
0000000000005251         call       xmalloc                                     ; xmalloc
0000000000005256         mov        qword [rsp+0x68+var_58], rax
000000000000525b         sub        rsp, 0x8
000000000000525f         push       qword [rbx+0x30]
0000000000005262         push       qword [rbx+0x28]
0000000000005265         mov        r10, qword [rsp+0x80+var_48]
000000000000526a         mov        r9d, ebp
000000000000526d         mov        r8d, dword [rbx]
0000000000005270         mov        rcx, r15
0000000000005273         mov        rdx, r14
0000000000005276         mov        rdi, rax
0000000000005279         push       r10
000000000000527b         mov        rsi, qword [rsp+0x88+var_50]
0000000000005280         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000005285         mov        eax, dword [rsp+0x88+var_5C]
0000000000005289         add        rsp, 0x20
000000000000528d         test       r12, r12
0000000000005290         mov        dword [r13], eax
0000000000005294         je         loc_529f

0000000000005296         mov        r11, qword [rsp+0x68+var_40]
000000000000529b         mov        qword [r12], r11

                     loc_529f:
000000000000529f         mov        rax, qword [rsp+0x68+var_58]                ; CODE XREF=quotearg_alloc_mem+196
00000000000052a4         add        rsp, 0x38
00000000000052a8         pop        rbx
00000000000052a9         pop        rbp
00000000000052aa         pop        r12
00000000000052ac         pop        r13
00000000000052ae         pop        r14
00000000000052b0         pop        r15
00000000000052b2         ret
                        ; endp
00000000000052b3         align      64                                          ; End of unwind block (FDE at 0xd000)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_alloc:
00000000000052c0         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0xd06c)
00000000000052c3         xor        edx, edx
00000000000052c5         jmp        quotearg_alloc_mem                          ; quotearg_alloc_mem
                        ; endp
00000000000052ca         align      16                                          ; End of unwind block (FDE at 0xd06c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_free:
00000000000052d0         mov        eax, dword [nslots]                         ; Begin of unwind block (FDE at 0xd080), nslots
00000000000052d6         push       r12
00000000000052d8         mov        r12, qword [slotvec]                        ; slotvec
00000000000052df         push       rbp
00000000000052e0         push       rbx
00000000000052e1         cmp        eax, 0x1
00000000000052e4         jle        loc_5311

00000000000052e6         sub        eax, 0x2
00000000000052e9         lea        rbx, qword [r12+0x18]
00000000000052ee         shl        rax, 0x4
00000000000052f2         lea        rbp, qword [r12+rax+0x28]
00000000000052f7         nop        word [rax+rax]

                     loc_5300:
0000000000005300         mov        rdi, qword [rbx]                            ; CODE XREF=quotearg_free+63
0000000000005303         add        rbx, 0x10
0000000000005307         call       sub_1de0                                    ; sub_1de0
000000000000530c         cmp        rbx, rbp
000000000000530f         jne        loc_5300

                     loc_5311:
0000000000005311         mov        rdi, qword [r12+8]                          ; CODE XREF=quotearg_free+20
0000000000005316         lea        rbx, qword [slot0]                          ; slot0
000000000000531d         cmp        rdi, rbx
0000000000005320         je         loc_5339

0000000000005322         call       sub_1de0                                    ; sub_1de0
0000000000005327         mov        qword [slotvec0], 0x100                     ; slotvec0
0000000000005332         mov        qword [slotvec0+8], rbx                     ; 0x20f078

                     loc_5339:
0000000000005339         lea        rbx, qword [slotvec0]                       ; slotvec0, CODE XREF=quotearg_free+80
0000000000005340         cmp        r12, rbx
0000000000005343         je         loc_5354

0000000000005345         mov        rdi, r12
0000000000005348         call       sub_1de0                                    ; sub_1de0
000000000000534d         mov        qword [slotvec], rbx                        ; slotvec

                     loc_5354:
0000000000005354         pop        rbx                                         ; CODE XREF=quotearg_free+115
0000000000005355         mov        dword [nslots], 0x1                         ; nslots
000000000000535f         pop        rbp
0000000000005360         pop        r12
0000000000005362         ret
                        ; endp
0000000000005363         align      16                                          ; End of unwind block (FDE at 0xd080)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_n:
0000000000005370         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xd0ac), default_quoting_options
0000000000005377         mov        rdx, 0xffffffffffffffff
000000000000537e         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000005383         align      16                                          ; End of unwind block (FDE at 0xd0ac)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_n_mem:
0000000000005390         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xd0c0), default_quoting_options
0000000000005397         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
000000000000539c         align      32                                          ; End of unwind block (FDE at 0xd0c0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg:
00000000000053a0         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xd0d4), default_quoting_options
00000000000053a7         mov        rsi, rdi
00000000000053aa         mov        rdx, 0xffffffffffffffff
00000000000053b1         xor        edi, edi
00000000000053b3         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
00000000000053b8         align      64                                          ; End of unwind block (FDE at 0xd0d4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_mem:
00000000000053c0         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xd0e8), default_quoting_options
00000000000053c7         mov        rdx, rsi
00000000000053ca         mov        rsi, rdi
00000000000053cd         xor        edi, edi
00000000000053cf         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
00000000000053d4         align      32                                          ; End of unwind block (FDE at 0xd0e8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_n_style:
00000000000053e0         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0xd0fc), CODE XREF=sub_3470+482, sub_3470+502, sub_3780+10, sub_3780+30
00000000000053e4         mov        rax, rdx
00000000000053e7         mov        rdx, qword [fs:0x28]
00000000000053f0         mov        qword [rsp+0x48+var_10], rdx
00000000000053f5         xor        edx, edx
00000000000053f7         cmp        esi, 0xa
00000000000053fa         je         loc_5464

00000000000053fc         mov        dword [rsp+0x48+var_48], esi
00000000000053ff         mov        rcx, rsp
0000000000005402         mov        rdx, 0xffffffffffffffff
0000000000005409         mov        rsi, rax
000000000000540c         mov        qword [rsp+0x48+var_44], 0x0
0000000000005415         mov        qword [rsp+0x48+var_3C], 0x0
000000000000541e         mov        qword [rsp+0x48+var_34], 0x0
0000000000005427         mov        qword [rsp+0x48+var_2C], 0x0
0000000000005430         mov        qword [rsp+0x48+var_24], 0x0
0000000000005439         mov        qword [rsp+0x48+var_1C], 0x0
0000000000005442         mov        dword [rsp+0x48+var_14], 0x0
000000000000544a         call       quotearg_n_options                          ; quotearg_n_options
000000000000544f         mov        rcx, qword [rsp+0x48+var_10]
0000000000005454         xor        rcx, qword [fs:0x28]
000000000000545d         jne        loc_5469

000000000000545f         add        rsp, 0x48
0000000000005463         ret
                        ; endp

                     loc_5464:
0000000000005464         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style+26
                        ; endp

                     loc_5469:
0000000000005469         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style+125
                        ; endp
000000000000546e         align      16                                          ; End of unwind block (FDE at 0xd0fc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_n_style_mem:
0000000000005470         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0xd118), CODE XREF=quotearg_style_mem+10
0000000000005474         mov        rax, rdx
0000000000005477         mov        rdx, rcx
000000000000547a         mov        rcx, qword [fs:0x28]
0000000000005483         mov        qword [rsp+0x48+var_10], rcx
0000000000005488         xor        ecx, ecx
000000000000548a         cmp        esi, 0xa
000000000000548d         je         loc_54f0

000000000000548f         mov        dword [rsp+0x48+var_48], esi
0000000000005492         mov        rcx, rsp
0000000000005495         mov        rsi, rax
0000000000005498         mov        qword [rsp+0x48+var_44], 0x0
00000000000054a1         mov        qword [rsp+0x48+var_3C], 0x0
00000000000054aa         mov        qword [rsp+0x48+var_34], 0x0
00000000000054b3         mov        qword [rsp+0x48+var_2C], 0x0
00000000000054bc         mov        qword [rsp+0x48+var_24], 0x0
00000000000054c5         mov        qword [rsp+0x48+var_1C], 0x0
00000000000054ce         mov        dword [rsp+0x48+var_14], 0x0
00000000000054d6         call       quotearg_n_options                          ; quotearg_n_options
00000000000054db         mov        rdx, qword [rsp+0x48+var_10]
00000000000054e0         xor        rdx, qword [fs:0x28]
00000000000054e9         jne        loc_54f5

00000000000054eb         add        rsp, 0x48
00000000000054ef         ret
                        ; endp

                     loc_54f0:
00000000000054f0         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style_mem+29
                        ; endp

                     loc_54f5:
00000000000054f5         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style_mem+121
                        ; endp
00000000000054fa         align      256                                         ; End of unwind block (FDE at 0xd118)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_style:
0000000000005500         mov        rdx, rsi                                    ; Begin of unwind block (FDE at 0xd134), CODE XREF=main+1089, main+1273, sub_2b60+442, sub_2b60+798, sub_2f80+42, sub_2fd0+163, sub_2fd0+690, sub_3470+10, sub_3470+117, sub_3470+288
0000000000005503         mov        esi, edi
0000000000005505         xor        edi, edi
0000000000005507         jmp        quotearg_n_style                            ; quotearg_n_style
                        ; endp
000000000000550c         align      16                                          ; End of unwind block (FDE at 0xd134)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_style_mem:
0000000000005510         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0xd148)
0000000000005513         mov        rdx, rsi
0000000000005516         mov        esi, edi
0000000000005518         xor        edi, edi
000000000000551a         jmp        quotearg_n_style_mem                        ; quotearg_n_style_mem
                        ; endp
000000000000551f         align      32                                          ; End of unwind block (FDE at 0xd148)

                     quotearg_char_mem:
0000000000005520         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0xd15c), CODE XREF=quotearg_char+11
0000000000005524         mov        ecx, edx
0000000000005526         mov        rax, qword [fs:0x28]
000000000000552f         mov        qword [rsp+0x48+var_10], rax
0000000000005534         xor        eax, eax
0000000000005536         mov        rax, qword [qword_20f230]                   ; qword_20f230
000000000000553d         mov        r8, rsp
0000000000005540         and        ecx, 0x1f
0000000000005543         movdqa     xmm0, xmmword [default_quoting_options]     ; default_quoting_options
000000000000554b         mov        qword [rsp+0x48+var_18], rax
0000000000005550         mov        eax, edx
0000000000005552         movaps     xmmword [rsp+0x48+var_48], xmm0
0000000000005556         shr        al, 0x5
0000000000005559         movzx      eax, al
000000000000555c         lea        r9, qword [r8+rax*4+8]
0000000000005561         movdqa     xmm0, xmmword [default_quoting_options+16]  ; 0x20f210
0000000000005569         movaps     xmmword [rsp+0x48+var_38], xmm0
000000000000556e         movdqa     xmm0, xmmword [default_quoting_options+32]  ; 0x20f220
0000000000005576         movaps     xmmword [rsp+0x48+var_28], xmm0
000000000000557b         mov        edx, dword [r9]
000000000000557e         mov        eax, edx
0000000000005580         shr        eax, cl
0000000000005582         not        eax
0000000000005584         and        eax, 0x1
0000000000005587         shl        eax, cl
0000000000005589         mov        rcx, r8
000000000000558c         xor        eax, edx
000000000000558e         mov        rdx, rsi
0000000000005591         mov        rsi, rdi
0000000000005594         mov        dword [r9], eax
0000000000005597         xor        edi, edi
0000000000005599         call       quotearg_n_options                          ; quotearg_n_options
000000000000559e         mov        rsi, qword [rsp+0x48+var_10]
00000000000055a3         xor        rsi, qword [fs:0x28]
00000000000055ac         jne        loc_55b3

00000000000055ae         add        rsp, 0x48
00000000000055b2         ret
                        ; endp

                     loc_55b3:
00000000000055b3         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_char_mem+140
                        ; endp
00000000000055b8         align      64                                          ; End of unwind block (FDE at 0xd15c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24
        ;    var_28: -40
        ;    var_38: -56
        ;    var_48: -72


                     quotearg_char:
00000000000055c0         movsx      edx, sil                                    ; Begin of unwind block (FDE at 0xd178)
00000000000055c4         mov        rsi, 0xffffffffffffffff
00000000000055cb         jmp        quotearg_char_mem                           ; quotearg_char_mem


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_colon:
00000000000055d0         mov        edx, 0x3a                                   ; End of unwind block (FDE at 0xd178), Begin of unwind block (FDE at 0xd18c), CODE XREF=close_stdout+101
00000000000055d5         mov        rsi, 0xffffffffffffffff
00000000000055dc         jmp        quotearg_char_mem                           ; quotearg_char_mem
                        ; endp
00000000000055e1         align      16                                          ; End of unwind block (FDE at 0xd18c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_colon_mem:
00000000000055f0         mov        edx, 0x3a                                   ; Begin of unwind block (FDE at 0xd1a0)
00000000000055f5         jmp        quotearg_char_mem                           ; quotearg_char_mem
                        ; endp
00000000000055fa         align      512                                         ; End of unwind block (FDE at 0xd1a0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_n_style_colon:
0000000000005600         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0xd1b4), CODE XREF=sub_2f40+22, sub_2fd0+919
0000000000005604         mov        rax, rdx
0000000000005607         mov        rdx, qword [fs:0x28]
0000000000005610         mov        qword [rsp+0x48+var_10], rdx
0000000000005615         xor        edx, edx
0000000000005617         cmp        esi, 0xa
000000000000561a         je         loc_5684

000000000000561c         mov        dword [rsp+0x48+var_48], esi
000000000000561f         mov        rcx, rsp
0000000000005622         mov        rdx, 0xffffffffffffffff
0000000000005629         mov        rsi, rax
000000000000562c         mov        qword [rsp+0x48+var_44], 0x0
0000000000005635         mov        qword [rsp+0x48+var_3C], 0x4000000
000000000000563e         mov        qword [rsp+0x48+var_34], 0x0
0000000000005647         mov        qword [rsp+0x48+var_2C], 0x0
0000000000005650         mov        qword [rsp+0x48+var_24], 0x0
0000000000005659         mov        qword [rsp+0x48+var_1C], 0x0
0000000000005662         mov        dword [rsp+0x48+var_14], 0x0
000000000000566a         call       quotearg_n_options                          ; quotearg_n_options
000000000000566f         mov        rcx, qword [rsp+0x48+var_10]
0000000000005674         xor        rcx, qword [fs:0x28]
000000000000567d         jne        loc_5689

000000000000567f         add        rsp, 0x48
0000000000005683         ret
                        ; endp

                     loc_5684:
0000000000005684         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style_colon+26
                        ; endp

                     loc_5689:
0000000000005689         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style_colon+125
                        ; endp
000000000000568e         align      16                                          ; End of unwind block (FDE at 0xd1b4)

                     quotearg_n_custom_mem:
0000000000005690         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0xd1d0), CODE XREF=quotearg_n_custom+7, quotearg_custom+18, quotearg_custom_mem+14
0000000000005694         mov        r9, rcx
0000000000005697         mov        rcx, qword [qword_20f230]                   ; qword_20f230
000000000000569e         movdqa     xmm0, xmmword [default_quoting_options]     ; default_quoting_options
00000000000056a6         mov        rax, qword [fs:0x28]
00000000000056af         mov        qword [rsp+0x48+var_10], rax
00000000000056b4         xor        eax, eax
00000000000056b6         movaps     xmmword [rsp+0x48+var_48], xmm0
00000000000056ba         test       rsi, rsi
00000000000056bd         mov        qword [rsp+0x48+var_18], rcx
00000000000056c2         mov        dword [rsp+0x48+var_48], 0xa
00000000000056c9         movdqa     xmm0, xmmword [default_quoting_options+16]  ; 0x20f210
00000000000056d1         movaps     xmmword [rsp+0x48+var_38], xmm0
00000000000056d6         movdqa     xmm0, xmmword [default_quoting_options+32]  ; 0x20f220
00000000000056de         movaps     xmmword [rsp+0x48+var_28], xmm0
00000000000056e3         je         loc_5717

00000000000056e5         test       rdx, rdx
00000000000056e8         je         loc_5717

00000000000056ea         mov        qword [rsp+0x48+var_20], rsi
00000000000056ef         mov        qword [rsp+0x48+var_18], rdx
00000000000056f4         mov        rcx, rsp
00000000000056f7         mov        rdx, r8
00000000000056fa         mov        rsi, r9
00000000000056fd         call       quotearg_n_options                          ; quotearg_n_options
0000000000005702         mov        rdi, qword [rsp+0x48+var_10]
0000000000005707         xor        rdi, qword [fs:0x28]
0000000000005710         jne        loc_571c

0000000000005712         add        rsp, 0x48
0000000000005716         ret
                        ; endp

                     loc_5717:
0000000000005717         call       j_abort                                     ; abort, CODE XREF=quotearg_n_custom_mem+83, quotearg_n_custom_mem+88
                        ; endp

                     loc_571c:
000000000000571c         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_custom_mem+128
                        ; endp
0000000000005721         align      16                                          ; End of unwind block (FDE at 0xd1d0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24
        ;    var_20: int64_t, -32
        ;    var_28: -40
        ;    var_38: -56
        ;    var_48: int32_t, -72


                     quotearg_n_custom:
0000000000005730         mov        r8, 0xffffffffffffffff                      ; Begin of unwind block (FDE at 0xd1ec)
0000000000005737         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
000000000000573c         align      64                                          ; End of unwind block (FDE at 0xd1ec)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_custom:
0000000000005740         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0xd200)
0000000000005743         mov        r8, 0xffffffffffffffff
000000000000574a         mov        rdx, rsi
000000000000574d         mov        rsi, rdi
0000000000005750         xor        edi, edi
0000000000005752         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
                        ; endp
0000000000005757         align      32                                          ; End of unwind block (FDE at 0xd200)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_custom_mem:
0000000000005760         mov        r8, rcx                                     ; Begin of unwind block (FDE at 0xd214)
0000000000005763         mov        rcx, rdx
0000000000005766         mov        rdx, rsi
0000000000005769         mov        rsi, rdi
000000000000576c         xor        edi, edi
000000000000576e         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
                        ; endp
0000000000005773         align      128                                         ; End of unwind block (FDE at 0xd214)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_n_mem:
0000000000005780         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0xd228), quote_quoting_options
0000000000005787         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
000000000000578c         align      16                                          ; End of unwind block (FDE at 0xd228)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_mem:
0000000000005790         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0xd23c), quote_quoting_options
0000000000005797         mov        rdx, rsi
000000000000579a         mov        rsi, rdi
000000000000579d         xor        edi, edi
000000000000579f         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
00000000000057a4         align      16                                          ; End of unwind block (FDE at 0xd23c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_n:
00000000000057b0         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0xd250), quote_quoting_options
00000000000057b7         mov        rdx, 0xffffffffffffffff
00000000000057be         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
00000000000057c3         align      16                                          ; End of unwind block (FDE at 0xd250)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote:
00000000000057d0         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0xd264), quote_quoting_options, CODE XREF=main+582, main+1192, main+1375
00000000000057d7         mov        rsi, rdi
00000000000057da         mov        rdx, 0xffffffffffffffff
00000000000057e1         xor        edi, edi
00000000000057e3         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
00000000000057e8         align      16                                          ; End of unwind block (FDE at 0xd264)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168


                     get_root_dev_ino:
00000000000057f0         push       rbx                                         ; Begin of unwind block (FDE at 0xd27c), CODE XREF=main+1058
00000000000057f1         lea        rsi, qword [aLibs+6]                        ; argument "__filename" for method j___lxstat, 0xbae6
00000000000057f8         mov        rbx, rdi
00000000000057fb         mov        edi, 0x1                                    ; argument "__ver" for method j___lxstat
0000000000005800         sub        rsp, 0xa0
0000000000005807         mov        rdx, rsp                                    ; argument "__stat_buf" for method j___lxstat
000000000000580a         mov        rax, qword [fs:0x28]
0000000000005813         mov        qword [rsp+0xa8+var_10], rax
000000000000581b         xor        eax, eax
000000000000581d         call       j___lxstat                                  ; __lxstat
0000000000005822         test       eax, eax
0000000000005824         jne        loc_5858

0000000000005826         mov        rax, qword [rsp+0xa8+var_A0]
000000000000582b         mov        qword [rbx], rax
000000000000582e         mov        rax, qword [rsp+0xa8+var_A8]
0000000000005832         mov        qword [rbx+8], rax
0000000000005836         mov        rax, rbx

                     loc_5839:
0000000000005839         mov        rcx, qword [rsp+0xa8+var_10]                ; CODE XREF=get_root_dev_ino+106
0000000000005841         xor        rcx, qword [fs:0x28]
000000000000584a         jne        loc_585c

000000000000584c         add        rsp, 0xa0
0000000000005853         pop        rbx
0000000000005854         ret
                        ; endp
0000000000005855         align      8

                     loc_5858:
0000000000005858         xor        eax, eax                                    ; CODE XREF=get_root_dev_ino+52
000000000000585a         jmp        loc_5839

                     loc_585c:
000000000000585c         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=get_root_dev_ino+90
                        ; endp
0000000000005861         align      16                                          ; End of unwind block (FDE at 0xd27c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_58: int8_t, -88
        ;    var_60: int64_t, -96
        ;    var_69: int8_t, -105
        ;    var_6A: int8_t, -106
        ;    var_70: int32_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136


                     parse_with_separator:
0000000000005870         push       r15                                         ; Begin of unwind block (FDE at 0xd2a4), CODE XREF=parse_user_spec+69, parse_user_spec+133
0000000000005872         push       r14
0000000000005874         mov        r10, rsi
0000000000005877         push       r13
0000000000005879         push       r12
000000000000587b         mov        r12, rcx
000000000000587e         push       rbp
000000000000587f         push       rbx
0000000000005880         mov        r13, r8
0000000000005883         mov        r14, r9
0000000000005886         mov        r15d, 0xffffffff
000000000000588c         sub        rsp, 0x58
0000000000005890         mov        eax, dword [rdx]
0000000000005892         mov        rcx, qword [fs:0x28]
000000000000589b         mov        qword [rsp+0x88+var_40], rcx
00000000000058a0         xor        ecx, ecx
00000000000058a2         test       r12, r12
00000000000058a5         mov        qword [rsp+0x88+var_78], rdx
00000000000058aa         mov        dword [rsp+0x88+var_70], eax
00000000000058ae         je         loc_58b4

00000000000058b0         mov        r15d, dword [r12]

                     loc_58b4:
00000000000058b4         test       r13, r13                                    ; CODE XREF=parse_with_separator+62
00000000000058b7         je         loc_58c1

00000000000058b9         mov        qword [r13], 0x0

                     loc_58c1:
00000000000058c1         test       r14, r14                                    ; CODE XREF=parse_with_separator+71
00000000000058c4         je         loc_58cd

00000000000058c6         mov        qword [r14], 0x0

                     loc_58cd:
00000000000058cd         test       r10, r10                                    ; CODE XREF=parse_with_separator+84
00000000000058d0         je         loc_5a68

00000000000058d6         mov        rbx, r10
00000000000058d9         sub        rbx, rdi
00000000000058dc         jne        loc_59b0

00000000000058e2         cmp        byte [r10+1], 0x0
00000000000058e7         je         loc_5af8

00000000000058ed         add        r10, 0x1
00000000000058f1         mov        qword [rsp+0x88+var_88], 0x0
00000000000058f9         setne      byte [rsp+0x88+var_6A]
00000000000058fe         mov        qword [rsp+0x88+var_80], r10
0000000000005903         xor        ebp, ebp
0000000000005905         xor        ebx, ebx

                     loc_5907:
0000000000005907         cmp        byte [rsp+0x88+var_6A], 0x0                 ; CODE XREF=parse_with_separator+452, parse_with_separator+496, parse_with_separator+898, parse_with_separator+964
000000000000590c         je         loc_5c00

0000000000005912         mov        rax, qword [rsp+0x88+var_80]
0000000000005917         cmp        byte [rax], 0x2b
000000000000591a         je         loc_5a90

0000000000005920         mov        rdi, qword [rsp+0x88+var_80]                ; argument "__name" for method j_getgrnam
0000000000005925         call       j_getgrnam                                  ; getgrnam
000000000000592a         test       rax, rax
000000000000592d         je         loc_5a90

0000000000005933         mov        r15d, dword [rax+0x10]

                     loc_5937:
0000000000005937         call       j_endgrent                                  ; endgrent, CODE XREF=parse_with_separator+680
000000000000593c         mov        rdi, qword [rsp+0x88+var_80]
0000000000005941         call       xstrdup                                     ; xstrdup
0000000000005946         mov        rbx, rax

                     loc_5949:
0000000000005949         mov        r10, rbp                                    ; CODE XREF=parse_with_separator+923

                     loc_594c:
000000000000594c         mov        rax, qword [rsp+0x88+var_78]                ; CODE XREF=parse_with_separator+509, parse_with_separator+653
0000000000005951         mov        esi, dword [rsp+0x88+var_70]
0000000000005955         test       r12, r12
0000000000005958         mov        dword [rax], esi
000000000000595a         je         loc_5960

000000000000595c         mov        dword [r12], r15d

                     loc_5960:
0000000000005960         test       r13, r13                                    ; CODE XREF=parse_with_separator+234
0000000000005963         je         loc_596c

0000000000005965         mov        qword [r13], r10
0000000000005969         xor        r10d, r10d

                     loc_596c:
000000000000596c         test       r14, r14                                    ; CODE XREF=parse_with_separator+243
000000000000596f         je         loc_5976

0000000000005971         mov        qword [r14], rbx
0000000000005974         xor        ebx, ebx

                     loc_5976:
0000000000005976         mov        rdi, r10                                    ; CODE XREF=parse_with_separator+255
0000000000005979         call       sub_1de0                                    ; sub_1de0
000000000000597e         mov        rdi, rbx
0000000000005981         call       sub_1de0                                    ; sub_1de0
0000000000005986         xor        eax, eax

                     loc_5988:
0000000000005988         mov        rdx, qword [rsp+0x88+var_40]                ; CODE XREF=parse_with_separator+638
000000000000598d         xor        rdx, qword [fs:0x28]
0000000000005996         jne        loc_5c25

000000000000599c         add        rsp, 0x58
00000000000059a0         pop        rbx
00000000000059a1         pop        rbp
00000000000059a2         pop        r12
00000000000059a4         pop        r13
00000000000059a6         pop        r14
00000000000059a8         pop        r15
00000000000059aa         ret
                        ; endp
00000000000059ab         align      16

                     loc_59b0:
00000000000059b0         lea        rsi, qword [rbx+1]                          ; CODE XREF=parse_with_separator+108
00000000000059b4         mov        qword [rsp+0x88+var_88], r10
00000000000059b8         call       xmemdup                                     ; xmemdup
00000000000059bd         mov        r10, qword [rsp+0x88+var_88]
00000000000059c1         mov        byte [rax+rbx], 0x0
00000000000059c5         mov        rbp, rax
00000000000059c8         cmp        byte [r10+1], 0x0
00000000000059cd         jne        loc_5b20

                     loc_59d3:
00000000000059d3         test       rbp, rbp                                    ; CODE XREF=parse_with_separator+531
00000000000059d6         je         loc_5af8

00000000000059dc         mov        byte [rsp+0x88+var_6A], 0x0
00000000000059e1         mov        eax, 0x1
00000000000059e6         mov        qword [rsp+0x88+var_80], 0x0

                     loc_59ef:
00000000000059ef         test       r10, r10                                    ; CODE XREF=parse_with_separator+720
00000000000059f2         setne      r9b
00000000000059f6         and        r9d, eax
00000000000059f9         cmp        byte [rbp], 0x2b
00000000000059fd         je         loc_5a40

00000000000059ff         mov        rdi, rbp                                    ; argument "__name" for method j_getpwnam
0000000000005a02         mov        byte [rsp+0x88+var_88], r9b
0000000000005a06         call       j_getpwnam                                  ; getpwnam
0000000000005a0b         test       rax, rax
0000000000005a0e         movzx      r9d, byte [rsp+0x88+var_88]
0000000000005a13         je         loc_5a40

0000000000005a15         mov        ecx, dword [rax+0x10]
0000000000005a18         xor        ebx, ebx
0000000000005a1a         test       r9b, r9b
0000000000005a1d         mov        qword [rsp+0x88+var_88], 0x0
0000000000005a25         mov        dword [rsp+0x88+var_70], ecx
0000000000005a29         jne        loc_5b48

                     loc_5a2f:
0000000000005a2f         call       j_endpwent                                  ; endpwent, CODE XREF=parse_with_separator+773
0000000000005a34         jmp        loc_5907
0000000000005a39         align      64

                     loc_5a40:
0000000000005a40         test       r9b, r9b                                    ; CODE XREF=parse_with_separator+397, parse_with_separator+419
0000000000005a43         je         loc_5b80

0000000000005a49         lea        rax, qword [aInvalidSpec]                   ; "invalid spec"
0000000000005a50         mov        byte [rsp+0x88+var_6A], 0x0
0000000000005a55         xor        ebx, ebx
0000000000005a57         mov        qword [rsp+0x88+var_88], rax
0000000000005a5b         call       j_endpwent                                  ; endpwent
0000000000005a60         jmp        loc_5907
0000000000005a65         align      8

                     loc_5a68:
0000000000005a68         xor        ebx, ebx                                    ; CODE XREF=parse_with_separator+96
0000000000005a6a         cmp        byte [rdi], 0x0
0000000000005a6d         je         loc_594c

0000000000005a73         mov        qword [rsp+0x88+var_88], r10
0000000000005a77         call       xstrdup                                     ; xstrdup
0000000000005a7c         mov        r10, qword [rsp+0x88+var_88]
0000000000005a80         mov        rbp, rax
0000000000005a83         jmp        loc_59d3
0000000000005a88         align      16

                     loc_5a90:
0000000000005a90         mov        rdi, qword [rsp+0x88+var_80]                ; CODE XREF=parse_with_separator+170, parse_with_separator+189
0000000000005a95         lea        rcx, qword [rsp+0x88+var_60]
0000000000005a9a         lea        r8, qword [aWrittenBySSAnd+27]              ; 0xc049
0000000000005aa1         xor        esi, esi
0000000000005aa3         mov        edx, 0xa
0000000000005aa8         call       xstrtoul                                    ; xstrtoul
0000000000005aad         test       eax, eax
0000000000005aaf         je         loc_5b08

                     loc_5ab1:
0000000000005ab1         call       j_endgrent                                  ; endgrent, CODE XREF=parse_with_separator+686
0000000000005ab6         mov        rdi, qword [rsp+0x88+var_80]
0000000000005abb         call       xstrdup                                     ; xstrdup
0000000000005ac0         mov        rbx, rax
0000000000005ac3         lea        rax, qword [aInvalidGroup]                  ; "invalid group"
0000000000005aca         mov        qword [rsp+0x88+var_88], rax

                     loc_5ace:
0000000000005ace         mov        rdi, rbp                                    ; CODE XREF=parse_with_separator+917
0000000000005ad1         call       sub_1de0                                    ; sub_1de0
0000000000005ad6         mov        rdi, rbx
0000000000005ad9         call       sub_1de0                                    ; sub_1de0
0000000000005ade         mov        rsi, qword [rsp+0x88+var_88]                ; argument "msgid" for method j_dcgettext
0000000000005ae2         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005ae7         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005ae9         call       j_dcgettext                                 ; dcgettext
0000000000005aee         jmp        loc_5988
0000000000005af3         align      8

                     loc_5af8:
0000000000005af8         xor        r10d, r10d                                  ; CODE XREF=parse_with_separator+119, parse_with_separator+358
0000000000005afb         xor        ebx, ebx
0000000000005afd         jmp        loc_594c
0000000000005b02         align      8

                     loc_5b08:
0000000000005b08         mov        rax, qword [rsp+0x88+var_60]                ; CODE XREF=parse_with_separator+575
0000000000005b0d         mov        edx, 0xfffffffe
0000000000005b12         cmp        rax, rdx
0000000000005b15         mov        r15d, eax
0000000000005b18         jbe        loc_5937

0000000000005b1e         jmp        loc_5ab1

                     loc_5b20:
0000000000005b20         mov        rax, r10                                    ; CODE XREF=parse_with_separator+349
0000000000005b23         add        rax, 0x1
0000000000005b27         setne      byte [rsp+0x88+var_6A]
0000000000005b2c         test       rbp, rbp
0000000000005b2f         mov        qword [rsp+0x88+var_80], rax
0000000000005b34         je         loc_5c2a

0000000000005b3a         test       rax, rax
0000000000005b3d         sete       al
0000000000005b40         jmp        loc_59ef
0000000000005b45         align      8

                     loc_5b48:
0000000000005b48         mov        r15d, dword [rax+0x14]                      ; CODE XREF=parse_with_separator+441
0000000000005b4c         mov        edi, r15d                                   ; argument "__gid" for method j_getgrgid
0000000000005b4f         call       j_getgrgid                                  ; getgrgid
0000000000005b54         test       rax, rax
0000000000005b57         je         loc_5c10

0000000000005b5d         mov        rdi, qword [rax]

                     loc_5b60:
0000000000005b60         call       xstrdup                                     ; xstrdup, CODE XREF=parse_with_separator+944
0000000000005b65         mov        rbx, rax
0000000000005b68         call       j_endgrent                                  ; endgrent
0000000000005b6d         mov        qword [rsp+0x88+var_88], 0x0
0000000000005b75         jmp        loc_5a2f
0000000000005b7a         align      128

                     loc_5b80:
0000000000005b80         lea        rcx, qword [rsp+0x88+var_60]                ; CODE XREF=parse_with_separator+467
0000000000005b85         lea        r8, qword [aWrittenBySSAnd+27]              ; 0xc049
0000000000005b8c         xor        esi, esi
0000000000005b8e         mov        edx, 0xa
0000000000005b93         mov        rdi, rbp
0000000000005b96         mov        byte [rsp+0x88+var_69], r9b
0000000000005b9b         call       xstrtoul                                    ; xstrtoul
0000000000005ba0         lea        rsi, qword [aInvalidUser]                   ; "invalid user"
0000000000005ba7         test       eax, eax
0000000000005ba9         movzx      r9d, byte [rsp+0x88+var_69]
0000000000005baf         mov        qword [rsp+0x88+var_88], rsi
0000000000005bb3         jne        loc_5be6

0000000000005bb5         mov        rax, qword [rsp+0x88+var_60]
0000000000005bba         movzx      ecx, byte [rsp+0x88+var_6A]
0000000000005bbf         mov        edx, 0xfffffffe
0000000000005bc4         cmp        rax, rdx
0000000000005bc7         cmova      ecx, r9d
0000000000005bcb         mov        r9d, ecx
0000000000005bce         mov        ecx, dword [rsp+0x88+var_70]
0000000000005bd2         cmovbe     ecx, eax
0000000000005bd5         mov        eax, 0x0
0000000000005bda         cmova      rax, rsi
0000000000005bde         mov        dword [rsp+0x88+var_70], ecx
0000000000005be2         mov        qword [rsp+0x88+var_88], rax

                     loc_5be6:
0000000000005be6         mov        byte [rsp+0x88+var_6A], r9b                 ; CODE XREF=parse_with_separator+835
0000000000005beb         xor        ebx, ebx
0000000000005bed         call       j_endpwent                                  ; endpwent
0000000000005bf2         jmp        loc_5907
0000000000005bf7         align      1024

                     loc_5c00:
0000000000005c00         cmp        qword [rsp+0x88+var_88], 0x0                ; CODE XREF=parse_with_separator+156
0000000000005c05         jne        loc_5ace

0000000000005c0b         jmp        loc_5949

                     loc_5c10:
0000000000005c10         lea        rsi, qword [rsp+0x88+var_58]                ; CODE XREF=parse_with_separator+743
0000000000005c15         mov        edi, r15d
0000000000005c18         call       umaxtostr                                   ; umaxtostr
0000000000005c1d         mov        rdi, rax
0000000000005c20         jmp        loc_5b60

                     loc_5c25:
0000000000005c25         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=parse_with_separator+294
                        ; endp

                     loc_5c2a:
0000000000005c2a         xor        ebx, ebx                                    ; CODE XREF=parse_with_separator+708
0000000000005c2c         mov        qword [rsp+0x88+var_88], 0x0
0000000000005c34         jmp        loc_5907
0000000000005c39         align      64                                          ; End of unwind block (FDE at 0xd2a4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64


                     parse_user_spec:
0000000000005c40         test       rdx, rdx                                    ; Begin of unwind block (FDE at 0xd2f4), CODE XREF=main+557, main+1014
0000000000005c43         je         loc_5cf0

0000000000005c49         push       r15
0000000000005c4b         push       r14
0000000000005c4d         mov        r14, rsi
0000000000005c50         push       r13
0000000000005c52         push       r12
0000000000005c54         mov        r13, r8
0000000000005c57         push       rbp
0000000000005c58         push       rbx
0000000000005c59         mov        r12, rcx
0000000000005c5c         mov        rbp, rdx
0000000000005c5f         mov        rbx, rdi
0000000000005c62         mov        esi, 0x3a                                   ; argument "__c" for method j_strchr
0000000000005c67         sub        rsp, 0x18
0000000000005c6b         call       j_strchr                                    ; strchr
0000000000005c70         mov        r9, r13
0000000000005c73         mov        r15, rax
0000000000005c76         mov        r8, r12
0000000000005c79         mov        rcx, rbp
0000000000005c7c         mov        rdx, r14
0000000000005c7f         mov        rsi, rax
0000000000005c82         mov        rdi, rbx
0000000000005c85         call       parse_with_separator                        ; parse_with_separator
0000000000005c8a         test       r15, r15
0000000000005c8d         mov        r10, rax
0000000000005c90         jne        loc_5cd4

0000000000005c92         test       rax, rax
0000000000005c95         mov        qword [rsp+0x48+var_40], rax
0000000000005c9a         je         loc_5d08

0000000000005c9c         mov        esi, 0x2e                                   ; argument "__c" for method j_strchr
0000000000005ca1         mov        rdi, rbx                                    ; argument "__s" for method j_strchr
0000000000005ca4         call       j_strchr                                    ; strchr
0000000000005ca9         test       rax, rax
0000000000005cac         mov        r10, qword [rsp+0x48+var_40]
0000000000005cb1         je         loc_5cd4

0000000000005cb3         mov        r9, r13
0000000000005cb6         mov        r8, r12
0000000000005cb9         mov        rcx, rbp
0000000000005cbc         mov        rdx, r14
0000000000005cbf         mov        rsi, rax
0000000000005cc2         mov        rdi, rbx
0000000000005cc5         call       parse_with_separator                        ; parse_with_separator
0000000000005cca         test       rax, rax
0000000000005ccd         mov        r10, qword [rsp+0x48+var_40]
0000000000005cd2         je         loc_5d08

                     loc_5cd4:
0000000000005cd4         add        rsp, 0x18                                   ; CODE XREF=parse_user_spec+80, parse_user_spec+113, parse_user_spec+203
0000000000005cd8         mov        rax, r10
0000000000005cdb         pop        rbx
0000000000005cdc         pop        rbp
0000000000005cdd         pop        r12
0000000000005cdf         pop        r13
0000000000005ce1         pop        r14
0000000000005ce3         pop        r15
0000000000005ce5         ret
                        ; endp
0000000000005ce6         align      16

                     loc_5cf0:
0000000000005cf0         mov        r9, r8                                      ; CODE XREF=parse_user_spec+3
0000000000005cf3         mov        rdx, rsi
0000000000005cf6         mov        r8, rcx
0000000000005cf9         xor        esi, esi
0000000000005cfb         xor        ecx, ecx
0000000000005cfd         jmp        parse_with_separator                        ; parse_with_separator
                        ; endp
0000000000005d02         align      8

                     loc_5d08:
0000000000005d08         xor        r10d, r10d                                  ; CODE XREF=parse_user_spec+90, parse_user_spec+146
0000000000005d0b         jmp        loc_5cd4
0000000000005d0d         align      16                                          ; End of unwind block (FDE at 0xd2f4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88


                     version_etc_arn:
0000000000005d10         push       r15                                         ; Begin of unwind block (FDE at 0xd354), CODE XREF=version_etc_va+75, version_etc+161
0000000000005d12         push       r14
0000000000005d14         push       r13
0000000000005d16         push       r12
0000000000005d18         mov        r12, r9
0000000000005d1b         push       rbp
0000000000005d1c         push       rbx
0000000000005d1d         mov        rbp, rdi
0000000000005d20         mov        rbx, r8
0000000000005d23         sub        rsp, 0x28
0000000000005d27         test       rsi, rsi
0000000000005d2a         je         loc_5e48

0000000000005d30         mov        r8, rdx
0000000000005d33         lea        rdx, qword [aSSSn]                          ; "%s (%s) %s\\n"
0000000000005d3a         mov        r9, rcx
0000000000005d3d         xor        eax, eax
0000000000005d3f         mov        rcx, rsi
0000000000005d42         mov        esi, 0x1
0000000000005d47         call       j___fprintf_chk                             ; __fprintf_chk

                     loc_5d4c:
0000000000005d4c         lea        rsi, qword [aSSn+7]                         ; argument "msgid" for method j_dcgettext, 0xc003, CODE XREF=version_etc_arn+337
0000000000005d53         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005d55         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005d5a         call       j_dcgettext                                 ; dcgettext
0000000000005d5f         lea        rdx, qword [version_etc_copyright]          ; "Copyright %s %d Free Software Foundation, Inc."
0000000000005d66         mov        rcx, rax
0000000000005d69         mov        r8d, 0x7e3
0000000000005d6f         mov        esi, 0x1
0000000000005d74         mov        rdi, rbp
0000000000005d77         xor        eax, eax
0000000000005d79         call       j___fprintf_chk                             ; __fprintf_chk
0000000000005d7e         lea        rsi, qword [aNlicenseGplv3G]                ; argument "msgid" for method j_dcgettext, "\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n"
0000000000005d85         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005d87         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005d8c         call       j_dcgettext                                 ; dcgettext
0000000000005d91         mov        rsi, rbp                                    ; argument "__stream" for method j_fputs_unlocked
0000000000005d94         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000005d97         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000005d9c         cmp        r12, 0x9
0000000000005da0         ja         loc_60e0

0000000000005da6         lea        rdx, qword [switch_table_c2ec]              ; switch_table_c2ec
0000000000005dad         movsxd     rax, dword [rdx+r12*4]
0000000000005db1         add        rax, rdx
0000000000005db4         jmp        rax                                         ; switch statement using table at 0xc2ec, with 10 cases, 0x5dc0,0x5e36,0x5e70,0x5ec8,0x5f08,0x5f50,0x5fa0,0x5ff8,0x6028,0x6090
0000000000005db6         align      64

                     loc_5dc0:
0000000000005dc0         mov        r9, qword [rbx+0x38]                        ; case 8, CODE XREF=version_etc_arn+164
0000000000005dc4         mov        rax, qword [rbx+0x10]
0000000000005dc8         lea        rsi, qword [aWrittenBySSSns_c200]           ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n"
0000000000005dcf         mov        r8, qword [rbx+8]
0000000000005dd3         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005dd8         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005dda         mov        r13, qword [rbx+0x30]
0000000000005dde         mov        r12, qword [rbx+0x28]
0000000000005de2         mov        qword [rsp+0x58+var_48], r9
0000000000005de7         mov        r15, qword [rbx+0x20]
0000000000005deb         mov        r14, qword [rbx+0x18]
0000000000005def         mov        qword [rsp+0x58+var_58], rax
0000000000005df3         mov        qword [rsp+0x58+var_50], r8
0000000000005df8         mov        rbx, qword [rbx]
0000000000005dfb         call       j_dcgettext                                 ; dcgettext
0000000000005e00         sub        rsp, 0x8

                     loc_5e04:
0000000000005e04         mov        r9, qword [rsp+0x60+var_48]                 ; CODE XREF=version_etc_arn+432
0000000000005e09         mov        rdx, rax
0000000000005e0c         mov        rcx, rbx
0000000000005e0f         mov        esi, 0x1
0000000000005e14         mov        rdi, rbp
0000000000005e17         xor        eax, eax
0000000000005e19         push       r9
0000000000005e1b         push       r13
0000000000005e1d         push       r12
0000000000005e1f         push       r15
0000000000005e21         push       r14
0000000000005e23         mov        r9, qword [rsp+0x88+var_58]
0000000000005e28         mov        r8, qword [rsp+0x88+var_50]
0000000000005e2d         call       j___fprintf_chk                             ; __fprintf_chk
0000000000005e32         add        rsp, 0x30

                     loc_5e36:
0000000000005e36         add        rsp, 0x28                                   ; case 0, CODE XREF=version_etc_arn+164
0000000000005e3a         pop        rbx
0000000000005e3b         pop        rbp
0000000000005e3c         pop        r12
0000000000005e3e         pop        r13
0000000000005e40         pop        r14
0000000000005e42         pop        r15
0000000000005e44         ret
                        ; endp
0000000000005e45         align      8

                     loc_5e48:
0000000000005e48         mov        r8, rcx                                     ; CODE XREF=version_etc_arn+26
0000000000005e4b         mov        rcx, rdx
0000000000005e4e         lea        rdx, qword [aSSn]                           ; "%s %s\\n"
0000000000005e55         mov        esi, 0x1
0000000000005e5a         xor        eax, eax
0000000000005e5c         call       j___fprintf_chk                             ; __fprintf_chk
0000000000005e61         jmp        loc_5d4c
0000000000005e66         align      16

                     loc_5e70:
0000000000005e70         mov        r10, qword [rbx+0x40]                       ; case 9, CODE XREF=version_etc_arn+164
0000000000005e74         mov        r9, qword [rbx+0x38]
0000000000005e78         lea        rsi, qword [aWrittenBySSSns]                ; "Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n"
0000000000005e7f         mov        rax, qword [rbx+0x10]
0000000000005e83         mov        r8, qword [rbx+8]
0000000000005e87         mov        edx, 0x5
0000000000005e8c         mov        r13, qword [rbx+0x30]
0000000000005e90         mov        r12, qword [rbx+0x28]
0000000000005e94         mov        r15, qword [rbx+0x20]
0000000000005e98         mov        r14, qword [rbx+0x18]
0000000000005e9c         mov        rbx, qword [rbx]
0000000000005e9f         mov        qword [rsp+0x58+var_40], r10
0000000000005ea4         mov        qword [rsp+0x58+var_48], r9
0000000000005ea9         mov        qword [rsp+0x58+var_58], rax
0000000000005ead         mov        qword [rsp+0x58+var_50], r8

                     loc_5eb2:
0000000000005eb2         xor        edi, edi                                    ; argument "domain" for method j_dcgettext, CODE XREF=version_etc_arn+1042
0000000000005eb4         call       j_dcgettext                                 ; dcgettext
0000000000005eb9         mov        r10, qword [rsp+0x58+var_40]
0000000000005ebe         push       r10
0000000000005ec0         jmp        loc_5e04
0000000000005ec5         align      8

                     loc_5ec8:
0000000000005ec8         mov        rbx, qword [rbx]                            ; case 1, CODE XREF=version_etc_arn+164
0000000000005ecb         lea        rsi, qword [aWrittenBySn]                   ; argument "msgid" for method j_dcgettext, "Written by %s.\\n"
0000000000005ed2         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005ed7         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005ed9         call       j_dcgettext                                 ; dcgettext
0000000000005ede         add        rsp, 0x28
0000000000005ee2         mov        rcx, rbx
0000000000005ee5         mov        rdi, rbp
0000000000005ee8         pop        rbx
0000000000005ee9         pop        rbp
0000000000005eea         pop        r12
0000000000005eec         pop        r13
0000000000005eee         pop        r14
0000000000005ef0         pop        r15
0000000000005ef2         mov        rdx, rax
0000000000005ef5         mov        esi, 0x1
0000000000005efa         xor        eax, eax
0000000000005efc         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
0000000000005f01         align      8

                     loc_5f08:
0000000000005f08         mov        r12, qword [rbx+8]                          ; case 2, CODE XREF=version_etc_arn+164
0000000000005f0c         lea        rsi, qword [aWrittenBySAndS]                ; argument "msgid" for method j_dcgettext, "Written by %s and %s.\\n"
0000000000005f13         mov        rbx, qword [rbx]
0000000000005f16         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005f1b         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005f1d         call       j_dcgettext                                 ; dcgettext
0000000000005f22         add        rsp, 0x28
0000000000005f26         mov        r8, r12
0000000000005f29         mov        rcx, rbx
0000000000005f2c         mov        rdi, rbp
0000000000005f2f         mov        rdx, rax
0000000000005f32         mov        esi, 0x1
0000000000005f37         pop        rbx
0000000000005f38         pop        rbp
0000000000005f39         pop        r12
0000000000005f3b         pop        r13
0000000000005f3d         pop        r14
0000000000005f3f         pop        r15
0000000000005f41         xor        eax, eax
0000000000005f43         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
0000000000005f48         align      16

                     loc_5f50:
0000000000005f50         mov        r13, qword [rbx+0x10]                       ; case 3, CODE XREF=version_etc_arn+164
0000000000005f54         mov        r12, qword [rbx+8]
0000000000005f58         lea        rsi, qword [aWrittenBySSAnd]                ; argument "msgid" for method j_dcgettext, "Written by %s, %s, and %s.\\n"
0000000000005f5f         mov        rbx, qword [rbx]
0000000000005f62         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005f67         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005f69         call       j_dcgettext                                 ; dcgettext
0000000000005f6e         add        rsp, 0x28
0000000000005f72         mov        r9, r13
0000000000005f75         mov        r8, r12
0000000000005f78         mov        rcx, rbx
0000000000005f7b         mov        rdi, rbp
0000000000005f7e         mov        rdx, rax
0000000000005f81         pop        rbx
0000000000005f82         pop        rbp
0000000000005f83         pop        r12
0000000000005f85         pop        r13
0000000000005f87         pop        r14
0000000000005f89         pop        r15
0000000000005f8b         mov        esi, 0x1
0000000000005f90         xor        eax, eax
0000000000005f92         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
0000000000005f97         align      32

                     loc_5fa0:
0000000000005fa0         lea        rsi, qword [aWrittenBySSSna]                ; case 4, argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\nand %s.\\n", CODE XREF=version_etc_arn+164
0000000000005fa7         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005fac         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005fae         mov        r14, qword [rbx+0x18]
0000000000005fb2         mov        r13, qword [rbx+0x10]
0000000000005fb6         mov        r12, qword [rbx+8]
0000000000005fba         mov        rbx, qword [rbx]
0000000000005fbd         call       j_dcgettext                                 ; dcgettext
0000000000005fc2         sub        rsp, 0x8

                     loc_5fc6:
0000000000005fc6         push       r14                                         ; CODE XREF=version_etc_arn+784
0000000000005fc8         mov        rdx, rax
0000000000005fcb         mov        r9, r13
0000000000005fce         mov        r8, r12
0000000000005fd1         mov        rcx, rbx
0000000000005fd4         mov        rdi, rbp
0000000000005fd7         mov        esi, 0x1
0000000000005fdc         xor        eax, eax
0000000000005fde         call       j___fprintf_chk                             ; __fprintf_chk
0000000000005fe3         pop        rax
0000000000005fe4         pop        rdx
0000000000005fe5         add        rsp, 0x28
0000000000005fe9         pop        rbx
0000000000005fea         pop        rbp
0000000000005feb         pop        r12
0000000000005fed         pop        r13
0000000000005fef         pop        r14
0000000000005ff1         pop        r15
0000000000005ff3         ret
                        ; endp
0000000000005ff4         align      8

                     loc_5ff8:
0000000000005ff8         mov        r15, qword [rbx+0x20]                       ; case 5, CODE XREF=version_etc_arn+164
0000000000005ffc         lea        rsi, qword [aWrittenBySSSns_c180]           ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, and %s.\\n"
0000000000006003         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000006008         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000600a         mov        r14, qword [rbx+0x18]
000000000000600e         mov        r13, qword [rbx+0x10]
0000000000006012         mov        r12, qword [rbx+8]
0000000000006016         mov        rbx, qword [rbx]
0000000000006019         call       j_dcgettext                                 ; dcgettext
000000000000601e         push       r15
0000000000006020         jmp        loc_5fc6
0000000000006022         align      8

                     loc_6028:
0000000000006028         mov        r8, qword [rbx+8]                           ; case 6, CODE XREF=version_etc_arn+164
000000000000602c         mov        r12, qword [rbx+0x28]
0000000000006030         lea        rsi, qword [aWrittenBySSSns_c1a8]           ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, %s, and %s.\\n"
0000000000006037         mov        r15, qword [rbx+0x20]
000000000000603b         mov        r14, qword [rbx+0x18]
000000000000603f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000006044         mov        r13, qword [rbx+0x10]
0000000000006048         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000604a         mov        rbx, qword [rbx]
000000000000604d         mov        qword [rsp+0x58+var_58], r8
0000000000006051         call       j_dcgettext                                 ; dcgettext
0000000000006056         sub        rsp, 0x8
000000000000605a         mov        r9, r13
000000000000605d         push       r12
000000000000605f         push       r15
0000000000006061         push       r14

                     loc_6063:
0000000000006063         mov        r8, qword [rsp+0x78+var_58]                 ; CODE XREF=version_etc_arn+964
0000000000006068         mov        rcx, rbx
000000000000606b         mov        rdx, rax
000000000000606e         mov        rdi, rbp
0000000000006071         mov        esi, 0x1
0000000000006076         xor        eax, eax
0000000000006078         call       j___fprintf_chk                             ; __fprintf_chk
000000000000607d         add        rsp, 0x20
0000000000006081         add        rsp, 0x28
0000000000006085         pop        rbx
0000000000006086         pop        rbp
0000000000006087         pop        r12
0000000000006089         pop        r13
000000000000608b         pop        r14
000000000000608d         pop        r15
000000000000608f         ret
                        ; endp

                     loc_6090:
0000000000006090         mov        r9, qword [rbx+0x10]                        ; case 7, CODE XREF=version_etc_arn+164
0000000000006094         mov        r13, qword [rbx+0x30]
0000000000006098         lea        rsi, qword [aWrittenBySSSns_c1d0]           ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n"
000000000000609f         mov        r12, qword [rbx+0x28]
00000000000060a3         mov        r15, qword [rbx+0x20]
00000000000060a7         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000060ac         mov        r14, qword [rbx+0x18]
00000000000060b0         mov        r8, qword [rbx+8]
00000000000060b4         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000060b6         mov        qword [rsp+0x58+var_50], r9
00000000000060bb         mov        rbx, qword [rbx]
00000000000060be         mov        qword [rsp+0x58+var_58], r8
00000000000060c2         call       j_dcgettext                                 ; dcgettext
00000000000060c7         push       r13
00000000000060c9         push       r12
00000000000060cb         push       r15
00000000000060cd         push       r14
00000000000060cf         mov        r9, qword [rsp+0x78+var_50]
00000000000060d4         jmp        loc_6063
00000000000060d6         align      32

                     loc_60e0:
00000000000060e0         mov        r10, qword [rbx+0x40]                       ; CODE XREF=version_etc_arn+144
00000000000060e4         mov        r9, qword [rbx+0x38]
00000000000060e8         mov        edx, 0x5
00000000000060ed         mov        rax, qword [rbx+0x10]
00000000000060f1         mov        r8, qword [rbx+8]
00000000000060f5         lea        rsi, qword [aWrittenBySSSns_c268]           ; "Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n"
00000000000060fc         mov        r13, qword [rbx+0x30]
0000000000006100         mov        r12, qword [rbx+0x28]
0000000000006104         mov        r15, qword [rbx+0x20]
0000000000006108         mov        r14, qword [rbx+0x18]
000000000000610c         mov        qword [rsp+0x58+var_40], r10
0000000000006111         mov        qword [rsp+0x58+var_48], r9
0000000000006116         mov        qword [rsp+0x58+var_58], rax
000000000000611a         mov        qword [rsp+0x58+var_50], r8
000000000000611f         mov        rbx, qword [rbx]
0000000000006122         jmp        loc_5eb2
0000000000006127         align      16                                          ; End of unwind block (FDE at 0xd354)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     version_etc_ar:
0000000000006130         xor        r9d, r9d                                    ; Begin of unwind block (FDE at 0xd468)
0000000000006133         cmp        qword [r8], 0x0
0000000000006137         je         j_version_etc_arn                           ; version_etc_arn

0000000000006139         nop        dword [rax]

                     loc_6140:
0000000000006140         add        r9, 0x1                                     ; CODE XREF=version_etc_ar+25
0000000000006144         cmp        qword [r8+r9*8], 0x0
0000000000006149         jne        loc_6140

                     j_version_etc_arn:        // version_etc_arn
000000000000614b         jmp        version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc_ar+7
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16


                     version_etc_va:
0000000000006150         sub        rsp, 0x68                                   ; End of unwind block (FDE at 0xd468), Begin of unwind block (FDE at 0xd47c)
0000000000006154         mov        r10, r8
0000000000006157         xor        r9d, r9d
000000000000615a         mov        rax, qword [fs:0x28]
0000000000006163         mov        qword [rsp+0x68+var_10], rax
0000000000006168         xor        eax, eax
000000000000616a         mov        r8, rsp
000000000000616d         nop        dword [rax]

                     loc_6170:
0000000000006170         mov        eax, dword [r10]                            ; CODE XREF=version_etc_va+73
0000000000006173         cmp        eax, 0x2f
0000000000006176         ja         loc_61ba

0000000000006178         mov        r11d, eax
000000000000617b         add        r11, qword [r10+0x10]
000000000000617f         add        eax, 0x8
0000000000006182         mov        dword [r10], eax

                     loc_6185:
0000000000006185         mov        rax, qword [r11]                            ; CODE XREF=version_etc_va+118
0000000000006188         test       rax, rax
000000000000618b         mov        qword [r8+r9*8], rax
000000000000618f         je         loc_619b

0000000000006191         add        r9, 0x1
0000000000006195         cmp        r9, 0xa
0000000000006199         jne        loc_6170

                     loc_619b:
000000000000619b         call       version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc_va+63
00000000000061a0         mov        rax, qword [rsp+0x68+var_10]
00000000000061a5         xor        rax, qword [fs:0x28]
00000000000061ae         jne        loc_61b5

00000000000061b0         add        rsp, 0x68
00000000000061b4         ret
                        ; endp

                     loc_61b5:
00000000000061b5         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=version_etc_va+94
                        ; endp

                     loc_61ba:
00000000000061ba         mov        r11, qword [r10+8]                          ; CODE XREF=version_etc_va+38
00000000000061be         lea        rax, qword [r11+8]
00000000000061c2         mov        qword [r10+8], rax
00000000000061c6         jmp        loc_6185
00000000000061c8         align      16                                          ; End of unwind block (FDE at 0xd47c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40
        ;    var_48: int8_t, -72
        ;    var_50: int64_t, -80
        ;    var_A8: int8_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int32_t, -192


                     version_etc:
00000000000061d0         push       rbp                                         ; Begin of unwind block (FDE at 0xd498), CODE XREF=main+469
00000000000061d1         push       rbx
00000000000061d2         mov        r10d, 0x20
00000000000061d8         xor        r11d, r11d
00000000000061db         sub        rsp, 0xb8
00000000000061e2         mov        rax, qword [fs:0x28]
00000000000061eb         mov        qword [rsp+0xc8+var_50], rax
00000000000061f0         xor        eax, eax
00000000000061f2         lea        rax, qword [rsp+0xc8+arg_0]
00000000000061fa         mov        qword [rsp+0xc8+var_28], r8
0000000000006202         lea        rbx, qword [rsp+0xc8+arg_0]
000000000000620a         lea        r8, qword [rsp+0xc8+var_A8]
000000000000620f         mov        qword [rsp+0xc8+var_20], r9
0000000000006217         mov        dword [rsp+0xc8+var_C0], 0x20
000000000000621f         mov        qword [rsp+0xc8+var_B8], rax
0000000000006224         lea        rax, qword [rsp+0xc8+var_48]
000000000000622c         xor        r9d, r9d
000000000000622f         mov        qword [rsp+0xc8+var_B0], rax
0000000000006234         mov        rbp, rax
0000000000006237         nop        word [rax+rax]

                     loc_6240:
0000000000006240         cmp        r10d, 0x2f                                  ; CODE XREF=version_etc+154
0000000000006244         ja         loc_629c

0000000000006246         mov        eax, r10d
0000000000006249         mov        r11d, 0x1
000000000000624f         add        r10d, 0x8
0000000000006253         add        rax, rbp

                     loc_6256:
0000000000006256         mov        rax, qword [rax]                            ; CODE XREF=version_etc+211
0000000000006259         test       rax, rax
000000000000625c         mov        qword [r8+r9*8], rax
0000000000006260         je         loc_626c

0000000000006262         add        r9, 0x1
0000000000006266         cmp        r9, 0xa
000000000000626a         jne        loc_6240

                     loc_626c:
000000000000626c         test       r11b, r11b                                  ; CODE XREF=version_etc+144
000000000000626f         jne        loc_6295

                     loc_6271:
0000000000006271         call       version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc+202
0000000000006276         mov        rax, qword [rsp+0xc8+var_50]
000000000000627b         xor        rax, qword [fs:0x28]
0000000000006284         jne        loc_6290

0000000000006286         add        rsp, 0xb8
000000000000628d         pop        rbx
000000000000628e         pop        rbp
000000000000628f         ret
                        ; endp

                     loc_6290:
0000000000006290         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=version_etc+180
                        ; endp

                     loc_6295:
0000000000006295         mov        dword [rsp+0xc8+var_C0], r10d               ; CODE XREF=version_etc+159
000000000000629a         jmp        loc_6271

                     loc_629c:
000000000000629c         mov        rax, rbx                                    ; CODE XREF=version_etc+116
000000000000629f         add        rbx, 0x8
00000000000062a3         jmp        loc_6256
00000000000062a5         align      16                                          ; End of unwind block (FDE at 0xd498)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     emit_bug_reporting_address:
00000000000062b0         push       rbx                                         ; Begin of unwind block (FDE at 0xd4c4)
00000000000062b1         lea        rsi, qword [aNreportBugsToS]                ; argument "msgid" for method j_dcgettext, "\\nReport bugs to: %s\\n"
00000000000062b8         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000062bd         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000062bf         call       j_dcgettext                                 ; dcgettext
00000000000062c4         lea        rdx, qword [aBugcoreutilsgn]                ; "bug-coreutils@gnu.org"
00000000000062cb         mov        rsi, rax
00000000000062ce         mov        edi, 0x1
00000000000062d3         xor        eax, eax
00000000000062d5         call       j___printf_chk                              ; __printf_chk
00000000000062da         lea        rsi, qword [aSHomePageSn]                   ; argument "msgid" for method j_dcgettext, "%s home page: <%s>\\n"
00000000000062e1         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000062e6         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000062e8         call       j_dcgettext                                 ; dcgettext
00000000000062ed         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
00000000000062f4         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0xaae0
00000000000062fb         mov        rsi, rax
00000000000062fe         mov        edi, 0x1
0000000000006303         xor        eax, eax
0000000000006305         call       j___printf_chk                              ; __printf_chk
000000000000630a         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000006311         lea        rsi, qword [aGeneralHelpUsi]                ; argument "msgid" for method j_dcgettext, "General help using GNU software: <https://www.gnu.org/gethelp/>\\n"
0000000000006318         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000631a         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000631f         call       j_dcgettext                                 ; dcgettext
0000000000006324         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000006327         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
000000000000632a         pop        rbx
000000000000632b         jmp        j_fputs_unlocked                            ; fputs_unlocked
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xmalloc:
0000000000006330         push       rbx                                         ; End of unwind block (FDE at 0xd4c4), Begin of unwind block (FDE at 0xd4e4), CODE XREF=user_group_str+41, quotearg_n_options+295, quotearg_alloc_mem+129, xnmalloc+25, xcharalloc, xzalloc+4, xmemdup+15
0000000000006331         mov        rbx, rdi
0000000000006334         call       j_malloc                                    ; malloc
0000000000006339         test       rax, rax
000000000000633c         jne        loc_6343

000000000000633e         test       rbx, rbx
0000000000006341         jne        loc_6345

                     loc_6343:
0000000000006343         pop        rbx                                         ; CODE XREF=xmalloc+12
0000000000006344         ret
                        ; endp

                     loc_6345:
0000000000006345         call       xalloc_die                                  ; xalloc_die, CODE XREF=xmalloc+17
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_634a:
000000000000634a         nop        word [rax+rax]                              ; End of unwind block (FDE at 0xd4e4)
                     xnmalloc:
0000000000006350         mov        rax, rdi                                    ; Begin of unwind block (FDE at 0xd500)
0000000000006353         mul        rsi
0000000000006356         mov        rdi, rax
0000000000006359         seto       al
000000000000635c         test       rdi, rdi
000000000000635f         js         loc_636b

0000000000006361         movzx      eax, al
0000000000006364         test       rax, rax
0000000000006367         jne        loc_636b

0000000000006369         jmp        xmalloc                                     ; xmalloc
                        ; endp

                     loc_636b:
000000000000636b         sub        rsp, 0x8                                    ; CODE XREF=xnmalloc+15, xnmalloc+23
000000000000636f         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_6374:
0000000000006374         nop                                                    ; End of unwind block (FDE at 0xd500)
0000000000006376         nop        word [cs:rax+rax]
                     xcharalloc:
0000000000006380         jmp        xmalloc                                     ; xmalloc, Begin of unwind block (FDE at 0xd514)
                        ; endp
0000000000006382         align      16                                          ; End of unwind block (FDE at 0xd514)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xrealloc:
0000000000006390         test       rsi, rsi                                    ; Begin of unwind block (FDE at 0xd528), CODE XREF=quotearg_n_options+110, quotearg_n_options+386, xnrealloc+25, x2nrealloc+52, x2realloc+40
0000000000006393         push       rbx
0000000000006394         mov        rbx, rsi
0000000000006397         jne        loc_639e

0000000000006399         test       rdi, rdi
000000000000639c         jne        loc_63b8

                     loc_639e:
000000000000639e         mov        rsi, rbx                                    ; argument "__size" for method j_realloc, CODE XREF=xrealloc+7
00000000000063a1         call       j_realloc                                   ; realloc
00000000000063a6         test       rax, rax
00000000000063a9         jne        loc_63b0

00000000000063ab         test       rbx, rbx
00000000000063ae         jne        loc_63c1

                     loc_63b0:
00000000000063b0         pop        rbx                                         ; CODE XREF=xrealloc+25
00000000000063b1         ret
                        ; endp
00000000000063b2         align      8

                     loc_63b8:
00000000000063b8         call       sub_1de0                                    ; sub_1de0, CODE XREF=xrealloc+12
00000000000063bd         xor        eax, eax
00000000000063bf         pop        rbx
00000000000063c0         ret
                        ; endp

                     loc_63c1:
00000000000063c1         call       xalloc_die                                  ; xalloc_die, CODE XREF=xrealloc+30
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_63c6:
00000000000063c6         nop        word [cs:rax+rax]                           ; End of unwind block (FDE at 0xd528)
                     xnrealloc:
00000000000063d0         mov        rax, rsi                                    ; Begin of unwind block (FDE at 0xd54c)
00000000000063d3         mul        rdx
00000000000063d6         mov        rsi, rax
00000000000063d9         seto       al
00000000000063dc         test       rsi, rsi
00000000000063df         js         loc_63eb

00000000000063e1         movzx      eax, al
00000000000063e4         test       rax, rax
00000000000063e7         jne        loc_63eb

00000000000063e9         jmp        xrealloc                                    ; xrealloc
                        ; endp

                     loc_63eb:
00000000000063eb         sub        rsp, 0x8                                    ; CODE XREF=xnrealloc+15, xnrealloc+23
00000000000063ef         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_63f4:
00000000000063f4         nop                                                    ; End of unwind block (FDE at 0xd54c)
00000000000063f6         nop        word [cs:rax+rax]
                     x2nrealloc:
0000000000006400         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0xd560)
0000000000006403         mov        r9, rdx
0000000000006406         mov        rcx, qword [rsi]
0000000000006409         je         loc_6440

000000000000640b         xor        edx, edx
000000000000640d         movabs     rax, 0x5555555555555554
0000000000006417         div        r9
000000000000641a         cmp        rax, rcx
000000000000641d         jbe        loc_645b

000000000000641f         mov        rax, rcx
0000000000006422         shr        rax, 0x1
0000000000006425         lea        rcx, qword [rax+rcx+1]

                     loc_642a:
000000000000642a         mov        qword [rsi], rcx                            ; CODE XREF=x2nrealloc+89
000000000000642d         imul       rcx, r9                                     ; argument #4 for method xrealloc
0000000000006431         mov        rsi, rcx                                    ; argument #2 for method xrealloc
0000000000006434         jmp        xrealloc                                    ; xrealloc
                        ; endp
0000000000006439         align      64

                     loc_6440:
0000000000006440         test       rcx, rcx                                    ; CODE XREF=x2nrealloc+9
0000000000006443         je         loc_6468

                     loc_6445:
0000000000006445         mov        rax, rcx                                    ; CODE XREF=sub_6464+28
0000000000006448         mul        r9
000000000000644b         seto       dl
000000000000644e         test       rax, rax
0000000000006451         movzx      edx, dl
0000000000006454         js         loc_645b

0000000000006456         test       rdx, rdx
0000000000006459         je         loc_642a

                     loc_645b:
000000000000645b         sub        rsp, 0x8                                    ; CODE XREF=x2nrealloc+29, x2nrealloc+84
000000000000645f         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_6464:
0000000000006464         nop        dword [rax]
                        ; endp

                     loc_6468:
0000000000006468         xor        edx, edx                                    ; CODE XREF=x2nrealloc+67
000000000000646a         mov        eax, 0x80
000000000000646f         xor        r8d, r8d
0000000000006472         div        r9
0000000000006475         test       rax, rax
0000000000006478         sete       r8b
000000000000647c         lea        rcx, qword [r8+rax]
0000000000006480         jmp        loc_6445
0000000000006482         align      16                                          ; End of unwind block (FDE at 0xd560)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     x2realloc:
0000000000006490         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0xd578)
0000000000006493         mov        rax, qword [rsi]
0000000000006496         je         loc_64c0

0000000000006498         movabs     rdx, 0x5555555555555553
00000000000064a2         cmp        rax, rdx
00000000000064a5         ja         loc_64d1

00000000000064a7         mov        rdx, rax
00000000000064aa         shr        rdx, 0x1
00000000000064ad         lea        rax, qword [rdx+rax+1]

                     loc_64b2:
00000000000064b2         mov        qword [rsi], rax                            ; CODE XREF=x2realloc+63
00000000000064b5         mov        rsi, rax                                    ; argument #2 for method xrealloc
00000000000064b8         jmp        xrealloc                                    ; xrealloc
                        ; endp
00000000000064bd         align      64

                     loc_64c0:
00000000000064c0         test       rax, rax                                    ; CODE XREF=x2realloc+6
00000000000064c3         mov        edx, 0x80
00000000000064c8         cmove      rax, rdx
00000000000064cc         test       rax, rax
00000000000064cf         jns        loc_64b2

                     loc_64d1:
00000000000064d1         sub        rsp, 0x8                                    ; CODE XREF=x2realloc+21
00000000000064d5         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_64da:
00000000000064da         nop        word [rax+rax]                              ; End of unwind block (FDE at 0xd578)
                     xzalloc:
00000000000064e0         push       rbx                                         ; Begin of unwind block (FDE at 0xd590)
00000000000064e1         mov        rbx, rdi
00000000000064e4         call       xmalloc                                     ; xmalloc
00000000000064e9         mov        rdx, rbx                                    ; argument "__n" for method j_memset
00000000000064ec         xor        esi, esi                                    ; argument "__c" for method j_memset
00000000000064ee         mov        rdi, rax                                    ; argument "__s" for method j_memset
00000000000064f1         pop        rbx
00000000000064f2         jmp        j_memset                                    ; memset
                        ; endp
00000000000064f7         align      256                                         ; End of unwind block (FDE at 0xd590)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xcalloc:
0000000000006500         mov        rax, rdi                                    ; Begin of unwind block (FDE at 0xd5ac)
0000000000006503         sub        rsp, 0x8
0000000000006507         mul        rsi
000000000000650a         seto       dl
000000000000650d         test       rax, rax
0000000000006510         js         loc_6529

0000000000006512         movzx      edx, dl
0000000000006515         test       rdx, rdx
0000000000006518         jne        loc_6529

000000000000651a         call       j_calloc                                    ; calloc
000000000000651f         test       rax, rax
0000000000006522         je         loc_6529

0000000000006524         add        rsp, 0x8
0000000000006528         ret
                        ; endp

                     loc_6529:
0000000000006529         call       xalloc_die                                  ; xalloc_die, CODE XREF=xcalloc+16, xcalloc+24, xcalloc+34
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_652e:
000000000000652e         nop                                                    ; End of unwind block (FDE at 0xd5ac)
                        ; endp

                     xmemdup:
0000000000006530         push       rbp                                         ; Begin of unwind block (FDE at 0xd5c8), CODE XREF=clone_quoting_options+40, parse_with_separator+328, xstrdup+17
0000000000006531         push       rbx
0000000000006532         mov        rbp, rdi
0000000000006535         mov        rdi, rsi
0000000000006538         mov        rbx, rsi
000000000000653b         sub        rsp, 0x8
000000000000653f         call       xmalloc                                     ; xmalloc
0000000000006544         add        rsp, 0x8
0000000000006548         mov        rdx, rbx                                    ; argument "__n" for method j_memcpy
000000000000654b         mov        rsi, rbp                                    ; argument "__src" for method j_memcpy
000000000000654e         pop        rbx
000000000000654f         pop        rbp
0000000000006550         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
0000000000006553         jmp        j_memcpy                                    ; memcpy
                        ; endp
0000000000006558         align      32                                          ; End of unwind block (FDE at 0xd5c8)

                     xstrdup:
0000000000006560         push       rbx                                         ; Begin of unwind block (FDE at 0xd5f0), CODE XREF=main+1159, user_group_str+100, gid_to_name+36, uid_to_name+36, parse_with_separator+209, parse_with_separator+519, parse_with_separator+587, parse_with_separator+752
0000000000006561         mov        rbx, rdi
0000000000006564         call       j_strlen                                    ; strlen
0000000000006569         mov        rdi, rbx
000000000000656c         lea        rsi, qword [rax+1]
0000000000006570         pop        rbx
0000000000006571         jmp        xmemdup                                     ; xmemdup
0000000000006573         align      128                                         ; End of unwind block (FDE at 0xd5f0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xalloc_die:
0000000000006580         lea        rsi, qword [aMemoryExhauste]                ; Begin of unwind block (FDE at 0xd60c), argument "msgid" for method j_dcgettext, "memory exhausted", CODE XREF=quotearg_n_options+422, xmalloc+21, xnmalloc+31, xrealloc+49, xnrealloc+31, x2nrealloc+95, x2realloc+69, xcalloc+41, xfts_open+42
0000000000006587         sub        rsp, 0x8
000000000000658b         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000006590         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000006592         call       j_dcgettext                                 ; dcgettext
0000000000006597         mov        edi, dword [exit_failure]                   ; argument "__status" for method j_error, exit_failure
000000000000659d         lea        rdx, qword [aSS+4]                          ; argument "__format" for method j_error, 0xab29
00000000000065a4         mov        rcx, rax
00000000000065a7         xor        esi, esi                                    ; argument "__errnum" for method j_error
00000000000065a9         xor        eax, eax
00000000000065ab         call       j_error                                     ; error
00000000000065b0         call       j_abort                                     ; abort
                        ; endp
00000000000065b5         align      64                                          ; End of unwind block (FDE at 0xd60c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xfts_open:
00000000000065c0         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0xd624), CODE XREF=chown_files+63
00000000000065c4         or         esi, 0x200
00000000000065ca         call       rpl_fts_open                                ; rpl_fts_open
00000000000065cf         test       rax, rax
00000000000065d2         je         loc_65e0

00000000000065d4         add        rsp, 0x8
00000000000065d8         ret
                        ; endp
00000000000065d9         align      32

                     loc_65e0:
00000000000065e0         call       j___errno_location                          ; __errno_location, CODE XREF=xfts_open+18
00000000000065e5         cmp        dword [rax], 0x16
00000000000065e8         je         loc_65f0

00000000000065ea         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_65ef:
00000000000065ef         nop
                        ; endp

                     loc_65f0:
00000000000065f0         lea        rcx, qword [__PRETTY_FUNCTION__.3434]       ; argument "__function" for method j___assert_fail, "xfts_open", CODE XREF=xfts_open+40
00000000000065f7         lea        rsi, qword [aCoreutils831li_c360]           ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/xfts.c"
00000000000065fe         lea        rdi, qword [aErrnoEinval]                   ; argument "__assertion" for method j___assert_fail, "errno != EINVAL"
0000000000006605         mov        edx, 0x29                                   ; argument "__line" for method j___assert_fail
000000000000660a         call       j___assert_fail                             ; __assert_fail
                        ; endp
000000000000660f         align      16                                          ; End of unwind block (FDE at 0xd624)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     cycle_warning_required:
0000000000006610         mov        edx, dword [rdi+0x48]                       ; Begin of unwind block (FDE at 0xd640), CODE XREF=sub_2b60+9
0000000000006613         mov        eax, 0x1
0000000000006618         and        edx, 0x11
000000000000661b         cmp        edx, 0x10
000000000000661e         je         loc_6627

0000000000006620         xor        eax, eax
0000000000006622         cmp        edx, 0x11
0000000000006625         je         loc_6630

                     loc_6627:
0000000000006627         ret                                                    ; CODE XREF=cycle_warning_required+14
                        ; endp
0000000000006629         align      16

                     loc_6630:
0000000000006630         cmp        qword [rsi+0x58], 0x0                       ; CODE XREF=cycle_warning_required+21
0000000000006635         setne      al
0000000000006638         ret
                        ; endp
0000000000006639         align      64                                          ; End of unwind block (FDE at 0xd640)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int8_t, -72
        ;    var_50: int64_t, -80


                     xstrtoul:
0000000000006640         push       r15                                         ; Begin of unwind block (FDE at 0xd654), CODE XREF=parse_with_separator+568, parse_with_separator+811
0000000000006642         push       r14
0000000000006644         push       r13
0000000000006646         push       r12
0000000000006648         push       rbp
0000000000006649         push       rbx
000000000000664a         sub        rsp, 0x28
000000000000664e         mov        rax, qword [fs:0x28]
0000000000006657         mov        qword [rsp+0x58+var_40], rax
000000000000665c         xor        eax, eax
000000000000665e         cmp        edx, 0x24
0000000000006661         ja         loc_69c5

0000000000006667         lea        rax, qword [rsp+0x58+var_48]
000000000000666c         mov        r15, rsi
000000000000666f         test       rsi, rsi
0000000000006672         mov        rbp, rdi
0000000000006675         mov        dword [rsp+0x58+var_50], edx
0000000000006679         mov        r14, rcx
000000000000667c         mov        r13, r8
000000000000667f         cmove      r15, rax
0000000000006683         call       j___errno_location                          ; __errno_location
0000000000006688         mov        dword [rax], 0x0
000000000000668e         mov        r12, rax
0000000000006691         movzx      ebx, byte [rbp]
0000000000006695         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000669a         mov        edx, dword [rsp+0x58+var_50]
000000000000669e         mov        rsi, qword [rax]
00000000000066a1         mov        rax, rbp
00000000000066a4         jmp        loc_66b7
00000000000066a6         align      16

                     loc_66b0:
00000000000066b0         add        rax, 0x1                                    ; CODE XREF=xstrtoul+127
00000000000066b4         movzx      ebx, byte [rax]

                     loc_66b7:
00000000000066b7         movzx      ecx, bl                                     ; CODE XREF=xstrtoul+100
00000000000066ba         test       byte [rsi+rcx*2+1], 0x20
00000000000066bf         jne        loc_66b0

00000000000066c1         cmp        bl, 0x2d
00000000000066c4         je         loc_6718

00000000000066c6         mov        rsi, r15                                    ; argument "__endptr" for method j_strtoul
00000000000066c9         mov        rdi, rbp                                    ; argument "__nptr" for method j_strtoul
00000000000066cc         call       j_strtoul                                   ; strtoul
00000000000066d1         mov        rcx, qword [r15]
00000000000066d4         mov        rbx, rax
00000000000066d7         cmp        rcx, rbp
00000000000066da         je         loc_6708

00000000000066dc         mov        eax, dword [r12]
00000000000066e0         test       eax, eax
00000000000066e2         je         loc_6748

00000000000066e4         cmp        eax, 0x22
00000000000066e7         mov        ebp, 0x1
00000000000066ec         jne        loc_6718

                     loc_66ee:
00000000000066ee         test       r13, r13                                    ; CODE XREF=xstrtoul+266
00000000000066f1         je         loc_66fc

00000000000066f3         movzx      r12d, byte [rcx]
00000000000066f7         test       r12b, r12b
00000000000066fa         jne        loc_6777

                     loc_66fc:
00000000000066fc         mov        qword [r14], rbx                            ; CODE XREF=xstrtoul+177
00000000000066ff         jmp        loc_671d
0000000000006701         align      8

                     loc_6708:
0000000000006708         test       r13, r13                                    ; CODE XREF=xstrtoul+154
000000000000670b         mov        qword [rsp+0x58+var_50], rcx
0000000000006710         jne        loc_6750

0000000000006712         nop        word [rax+rax]

                     loc_6718:
0000000000006718         mov        ebp, 0x4                                    ; CODE XREF=xstrtoul+132, xstrtoul+172, xstrtoul+280, xstrtoul+309

                     loc_671d:
000000000000671d         mov        rdi, qword [rsp+0x58+var_40]                ; CODE XREF=xstrtoul+191, xstrtoul+535, xstrtoul+546
0000000000006722         xor        rdi, qword [fs:0x28]
000000000000672b         mov        eax, ebp
000000000000672d         jne        loc_69c0

0000000000006733         add        rsp, 0x28
0000000000006737         pop        rbx
0000000000006738         pop        rbp
0000000000006739         pop        r12
000000000000673b         pop        r13
000000000000673d         pop        r14
000000000000673f         pop        r15
0000000000006741         ret
                        ; endp
0000000000006742         align      8

                     loc_6748:
0000000000006748         xor        ebp, ebp                                    ; CODE XREF=xstrtoul+162
000000000000674a         jmp        loc_66ee
000000000000674c         align      16

                     loc_6750:
0000000000006750         movzx      r12d, byte [rbp]                            ; CODE XREF=xstrtoul+208
0000000000006755         test       r12b, r12b
0000000000006758         je         loc_6718

000000000000675a         movsx      esi, r12b                                   ; argument "__c" for method j_strchr
000000000000675e         mov        rdi, r13                                    ; argument "__s" for method j_strchr
0000000000006761         xor        ebp, ebp
0000000000006763         call       j_strchr                                    ; strchr
0000000000006768         test       rax, rax
000000000000676b         mov        ebx, 0x1
0000000000006770         mov        rcx, qword [rsp+0x58+var_50]
0000000000006775         je         loc_6718

                     loc_6777:
0000000000006777         movsx      esi, r12b                                   ; argument "__c" for method j_strchr, CODE XREF=xstrtoul+186
000000000000677b         mov        rdi, r13                                    ; argument "__s" for method j_strchr
000000000000677e         mov        qword [rsp+0x58+var_50], rcx
0000000000006783         call       j_strchr                                    ; strchr
0000000000006788         test       rax, rax
000000000000678b         mov        rcx, qword [rsp+0x58+var_50]
0000000000006790         je         loc_685c

0000000000006796         lea        eax, dword [r12-0x45]
000000000000679b         cmp        al, 0x2f
000000000000679d         ja         loc_67f0

000000000000679f         movabs     rdx, 0x814400308945
00000000000067a9         bt         rdx, rax
00000000000067ad         jae        loc_67f0

00000000000067af         mov        esi, 0x30                                   ; argument "__c" for method j_strchr
00000000000067b4         mov        rdi, r13                                    ; argument "__s" for method j_strchr
00000000000067b7         mov        qword [rsp+0x58+var_50], rcx
00000000000067bc         call       j_strchr                                    ; strchr
00000000000067c1         test       rax, rax
00000000000067c4         mov        rcx, qword [rsp+0x58+var_50]
00000000000067c9         je         loc_67f0

00000000000067cb         movzx      eax, byte [rcx+1]
00000000000067cf         cmp        al, 0x44
00000000000067d1         je         loc_67df

00000000000067d3         cmp        al, 0x69
00000000000067d5         je         loc_69a8

00000000000067db         cmp        al, 0x42
00000000000067dd         jne        loc_67f0

                     loc_67df:
00000000000067df         mov        edi, 0x2                                    ; CODE XREF=xstrtoul+401
00000000000067e4         mov        esi, 0x3e8
00000000000067e9         jmp        loc_67fa
00000000000067eb         align      16

                     loc_67f0:
00000000000067f0         mov        edi, 0x1                                    ; CODE XREF=xstrtoul+349, xstrtoul+365, xstrtoul+393, xstrtoul+413
00000000000067f5         mov        esi, 0x400

                     loc_67fa:
00000000000067fa         sub        r12d, 0x42                                  ; CODE XREF=xstrtoul+425, xstrtoul+891
00000000000067fe         cmp        r12b, 0x35
0000000000006802         ja         loc_685c

0000000000006804         lea        rdx, qword [switch_table_c3e8]              ; switch_table_c3e8
000000000000680b         movzx      r12d, r12b
000000000000680f         movsxd     rax, dword [rdx+r12*4]
0000000000006813         add        rax, rdx
0000000000006816         jmp        rax                                         ; switch statement using table at 0xc3e8, with 54 cases, 0x6818,0x6840,0x685c,0x6867,0x687d,0x6894,0x68ba,0x68df,0x68ff,0x6920,0x6943,0x6966,0x697c

                     loc_6818:
0000000000006818         mov        rax, rbx                                    ; case 43, CODE XREF=xstrtoul+470
000000000000681b         mul        rsi
000000000000681e         jo         loc_6a11

0000000000006824         xor        r8d, r8d

                     loc_6827:
0000000000006827         mul        rsi                                         ; CODE XREF=xstrtoul+846, xstrtoul+862, xstrtoul+987
000000000000682a         jo         loc_6a02

0000000000006830         mov        rbx, rax

                     loc_6833:
0000000000006833         or         ebp, r8d                                    ; CODE XREF=xstrtoul+972
0000000000006836         nop        word [cs:rax+rax]

                     loc_6840:
0000000000006840         movsxd     rdi, edi                                    ; case 33, CODE XREF=xstrtoul+470, xstrtoul+571, xstrtoul+594, xstrtoul+632, xstrtoul+712, xstrtoul+727, xstrtoul+823
0000000000006843         mov        eax, ebp
0000000000006845         add        rcx, rdi
0000000000006848         or         eax, 0x2
000000000000684b         mov        qword [r15], rcx
000000000000684e         cmp        byte [rcx], 0x0
0000000000006851         mov        qword [r14], rbx
0000000000006854         cmovne     ebp, eax
0000000000006857         jmp        loc_671d

                     loc_685c:
000000000000685c         mov        qword [r14], rbx                            ; case 52, CODE XREF=xstrtoul+336, xstrtoul+450, xstrtoul+470
000000000000685f         or         ebp, 0x2
0000000000006862         jmp        loc_671d

                     loc_6867:
0000000000006867         mov        edx, 0x2                                    ; case 53, CODE XREF=xstrtoul+470
000000000000686c         mov        rax, rdx
000000000000686f         mul        rbx
0000000000006872         jo         loc_690e

0000000000006878         add        rbx, rbx
000000000000687b         jmp        loc_6840

                     loc_687d:
000000000000687d         mov        edx, 0x200                                  ; case 32, CODE XREF=xstrtoul+470
0000000000006882         mov        rax, rdx
0000000000006885         mul        rbx
0000000000006888         jo         loc_690e

000000000000688e         shl        rbx, 0x9
0000000000006892         jmp        loc_6840

                     loc_6894:
0000000000006894         mov        r8d, 0x7                                    ; case 24, CODE XREF=xstrtoul+470
000000000000689a         xor        r9d, r9d
000000000000689d         nop        dword [rax]

                     loc_68a0:
00000000000068a0         mov        rax, rbx                                    ; CODE XREF=xstrtoul+627
00000000000068a3         mul        rsi
00000000000068a6         mov        rbx, rax
00000000000068a9         jo         loc_6a3e

                     loc_68af:
00000000000068af         sub        r8d, 0x1                                    ; CODE XREF=xstrtoul+1032
00000000000068b3         jne        loc_68a0

                     loc_68b5:
00000000000068b5         or         ebp, r9d                                    ; CODE XREF=xstrtoul+669, xstrtoul+701, xstrtoul+766, xstrtoul+801
00000000000068b8         jmp        loc_6840

                     loc_68ba:
00000000000068ba         mov        r8d, 0x8                                    ; case 23, CODE XREF=xstrtoul+470
00000000000068c0         xor        r9d, r9d
00000000000068c3         nop        dword [rax+rax]

                     loc_68c8:
00000000000068c8         mov        rax, rbx                                    ; CODE XREF=xstrtoul+667
00000000000068cb         mul        rsi
00000000000068ce         mov        rbx, rax
00000000000068d1         jo         loc_6a20

                     loc_68d7:
00000000000068d7         sub        r8d, 0x1                                    ; CODE XREF=xstrtoul+1002
00000000000068db         jne        loc_68c8

00000000000068dd         jmp        loc_68b5

                     loc_68df:
00000000000068df         mov        r8d, 0x4                                    ; case 50, CODE XREF=xstrtoul+470
00000000000068e5         xor        r9d, r9d

                     loc_68e8:
00000000000068e8         mov        rax, rbx                                    ; CODE XREF=xstrtoul+699
00000000000068eb         mul        rsi
00000000000068ee         mov        rbx, rax
00000000000068f1         jo         loc_69f3

                     loc_68f7:
00000000000068f7         sub        r8d, 0x1                                    ; CODE XREF=xstrtoul+957
00000000000068fb         jne        loc_68e8

00000000000068fd         jmp        loc_68b5

                     loc_68ff:
00000000000068ff         mov        rax, rbx                                    ; case 41, CODE XREF=xstrtoul+470
0000000000006902         mul        rsi
0000000000006905         mov        rbx, rax
0000000000006908         jno        loc_6840

                     loc_690e:
000000000000690e         mov        ebp, 0x1                                    ; CODE XREF=xstrtoul+562, xstrtoul+584, xstrtoul+817
0000000000006913         or         rbx, 0xffffffffffffffff
0000000000006917         jmp        loc_6840
000000000000691c         align      32

                     loc_6920:
0000000000006920         mov        r8d, 0x5                                    ; case 14, CODE XREF=xstrtoul+470
0000000000006926         xor        r9d, r9d

                     loc_6929:
0000000000006929         mov        rax, rbx                                    ; CODE XREF=xstrtoul+764
000000000000692c         mul        rsi
000000000000692f         mov        rbx, rax
0000000000006932         jo         loc_6a2f

                     loc_6938:
0000000000006938         sub        r8d, 0x1                                    ; CODE XREF=xstrtoul+1017
000000000000693c         jne        loc_6929

000000000000693e         jmp        loc_68b5

                     loc_6943:
0000000000006943         mov        r8d, 0x6                                    ; case 3, CODE XREF=xstrtoul+470
0000000000006949         xor        r9d, r9d

                     loc_694c:
000000000000694c         mov        rax, rbx                                    ; CODE XREF=xstrtoul+799
000000000000694f         mul        rsi
0000000000006952         mov        rbx, rax
0000000000006955         jo         loc_69e4

                     loc_695b:
000000000000695b         sub        r8d, 0x1                                    ; CODE XREF=xstrtoul+942
000000000000695f         jne        loc_694c

0000000000006961         jmp        loc_68b5

                     loc_6966:
0000000000006966         mov        edx, 0x400                                  ; case 0, CODE XREF=xstrtoul+470
000000000000696b         mov        rax, rdx
000000000000696e         mul        rbx
0000000000006971         jo         loc_690e

0000000000006973         shl        rbx, 0xa
0000000000006977         jmp        loc_6840

                     loc_697c:
000000000000697c         mov        rax, rbx                                    ; case 37, CODE XREF=xstrtoul+470
000000000000697f         mul        rsi
0000000000006982         jo         loc_6a4d

0000000000006988         xor        r8d, r8d

                     loc_698b:
000000000000698b         mul        rsi                                         ; CODE XREF=xstrtoul+1047
000000000000698e         jno        loc_6827

0000000000006994         mov        r8d, 0x1
000000000000699a         or         rax, 0xffffffffffffffff
000000000000699e         jmp        loc_6827
00000000000069a3         align      8

                     loc_69a8:
00000000000069a8         xor        edi, edi                                    ; CODE XREF=xstrtoul+405
00000000000069aa         cmp        byte [rcx+2], 0x42
00000000000069ae         mov        esi, 0x400
00000000000069b3         sete       dil
00000000000069b7         lea        edi, dword [rdi+rdi+1]
00000000000069bb         jmp        loc_67fa

                     loc_69c0:
00000000000069c0         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=xstrtoul+237
                        ; endp

                     loc_69c5:
00000000000069c5         lea        rcx, qword [__PRETTY_FUNCTION__.4162]       ; argument "__function" for method j___assert_fail, "xstrtoul", CODE XREF=xstrtoul+33
00000000000069cc         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/xstrtol.c"
00000000000069d3         lea        rdi, qword [a0StrtolbaseStr]                ; argument "__assertion" for method j___assert_fail, "0 <= strtol_base && strtol_base <= 36"
00000000000069da         mov        edx, 0x54                                   ; argument "__line" for method j___assert_fail
00000000000069df         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_69e4:
00000000000069e4         mov        r9d, 0x1                                    ; CODE XREF=xstrtoul+789
00000000000069ea         or         rbx, 0xffffffffffffffff
00000000000069ee         jmp        loc_695b

                     loc_69f3:
00000000000069f3         mov        r9d, 0x1                                    ; CODE XREF=xstrtoul+689
00000000000069f9         or         rbx, 0xffffffffffffffff
00000000000069fd         jmp        loc_68f7

                     loc_6a02:
0000000000006a02         mov        r8d, 0x1                                    ; CODE XREF=xstrtoul+490
0000000000006a08         or         rbx, 0xffffffffffffffff
0000000000006a0c         jmp        loc_6833

                     loc_6a11:
0000000000006a11         or         rax, 0xffffffffffffffff                     ; CODE XREF=xstrtoul+478
0000000000006a15         mov        r8d, 0x1
0000000000006a1b         jmp        loc_6827

                     loc_6a20:
0000000000006a20         mov        r9d, 0x1                                    ; CODE XREF=xstrtoul+657
0000000000006a26         or         rbx, 0xffffffffffffffff
0000000000006a2a         jmp        loc_68d7

                     loc_6a2f:
0000000000006a2f         mov        r9d, 0x1                                    ; CODE XREF=xstrtoul+754
0000000000006a35         or         rbx, 0xffffffffffffffff
0000000000006a39         jmp        loc_6938

                     loc_6a3e:
0000000000006a3e         mov        r9d, 0x1                                    ; CODE XREF=xstrtoul+617
0000000000006a44         or         rbx, 0xffffffffffffffff
0000000000006a48         jmp        loc_68af

                     loc_6a4d:
0000000000006a4d         mov        r8d, 0x1                                    ; CODE XREF=xstrtoul+834
0000000000006a53         or         rax, 0xffffffffffffffff
0000000000006a57         jmp        loc_698b
0000000000006a5c         align      32                                          ; End of unwind block (FDE at 0xd654)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     AD_compare:
0000000000006a60         xor        eax, eax                                    ; Begin of unwind block (FDE at 0xd6a4), DATA XREF=setup_dir.isra.4+19
0000000000006a62         mov        rdx, qword [rsi+8]
0000000000006a66         cmp        qword [rdi+8], rdx
0000000000006a6a         je         loc_6a70

0000000000006a6c         ret
                        ; endp
0000000000006a6e         align      16

                     loc_6a70:
0000000000006a70         mov        rax, qword [rsi]                            ; CODE XREF=AD_compare+10
0000000000006a73         cmp        qword [rdi], rax
0000000000006a76         sete       al
0000000000006a79         ret
                        ; endp
0000000000006a7a         align      128                                         ; End of unwind block (FDE at 0xd6a4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     AD_hash:
0000000000006a80         mov        rax, qword [rdi+8]                          ; Begin of unwind block (FDE at 0xd6b8), DATA XREF=setup_dir.isra.4+26
0000000000006a84         xor        edx, edx
0000000000006a86         div        rsi
0000000000006a89         mov        rax, rdx
0000000000006a8c         ret
                        ; endp
0000000000006a8d         align      16                                          ; End of unwind block (FDE at 0xd6b8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     dev_type_hash:
0000000000006a90         mov        rax, qword [rdi]                            ; Begin of unwind block (FDE at 0xd6cc), DATA XREF=filesystem_type+110
0000000000006a93         xor        edx, edx
0000000000006a95         div        rsi
0000000000006a98         mov        rax, rdx
0000000000006a9b         ret
                        ; endp
0000000000006a9c         align      32                                          ; End of unwind block (FDE at 0xd6cc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     dev_type_compare:
0000000000006aa0         mov        rax, qword [rsi]                            ; Begin of unwind block (FDE at 0xd6e0), DATA XREF=filesystem_type+103
0000000000006aa3         cmp        qword [rdi], rax
0000000000006aa6         sete       al
0000000000006aa9         ret
                        ; endp
0000000000006aaa         align      16                                          ; End of unwind block (FDE at 0xd6e0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fts_compare_ino:
0000000000006ab0         mov        rdx, qword [rdi]                            ; Begin of unwind block (FDE at 0xd6f4), DATA XREF=fts_build+2040
0000000000006ab3         mov        rax, qword [rsi]
0000000000006ab6         mov        rax, qword [rax+0x80]
0000000000006abd         cmp        qword [rdx+0x80], rax
0000000000006ac4         jb         loc_6ad0

0000000000006ac6         seta       al
0000000000006ac9         movzx      eax, al
0000000000006acc         ret
                        ; endp
0000000000006acd         align      16

                     loc_6ad0:
0000000000006ad0         mov        eax, 0xffffffff                             ; CODE XREF=fts_compare_ino+20
0000000000006ad5         ret
                        ; endp
0000000000006ad6         align      32                                          ; End of unwind block (FDE at 0xd6f4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fts_stat:
0000000000006ae0         push       r12                                         ; Begin of unwind block (FDE at 0xd708), CODE XREF=fts_build+1104, fts_build+1543, fts_build+2136, rpl_fts_open+765, rpl_fts_read+440, rpl_fts_read+645, rpl_fts_read+1452, rpl_fts_read+1624
0000000000006ae2         push       rbp
0000000000006ae3         mov        rbp, rsi
0000000000006ae6         push       rbx
0000000000006ae7         cmp        qword [rbp+0x58], 0x0
0000000000006aec         lea        rbx, qword [rsi+0x78]
0000000000006af0         mov        r12, rdi
0000000000006af3         mov        eax, dword [rdi+0x48]
0000000000006af6         mov        rsi, qword [rsi+0x30]
0000000000006afa         jne        loc_6b60

0000000000006afc         test       al, 0x1
0000000000006afe         je         loc_6b60

                     loc_6b00:
0000000000006b00         mov        rdx, rbx                                    ; argument "__stat_buf" for method j___xstat, CODE XREF=fts_stat+130, fts_stat+134
0000000000006b03         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
0000000000006b08         call       j___xstat                                   ; __xstat
0000000000006b0d         test       eax, eax
0000000000006b0f         je         loc_6b8b

0000000000006b11         call       j___errno_location                          ; __errno_location
0000000000006b16         mov        r12, rax
0000000000006b19         mov        eax, dword [rax]
0000000000006b1b         cmp        eax, 0x2
0000000000006b1e         je         loc_6c30

                     loc_6b24:
0000000000006b24         lea        rdi, qword [rbx+8]                          ; CODE XREF=fts_stat+327, fts_stat+361
0000000000006b28         mov        dword [rbp+0x40], eax
0000000000006b2b         mov        qword [rbp+0x78], 0x0
0000000000006b33         mov        qword [rbx+0x88], 0x0
0000000000006b3e         xor        eax, eax
0000000000006b40         and        rdi, 0xfffffffffffffff8
0000000000006b44         sub        rbx, rdi
0000000000006b47         lea        ecx, dword [rbx+0x90]
0000000000006b4d         shr        ecx, 0x3
0000000000006b50         rep stosq  qword [rdi], rax
0000000000006b53         mov        eax, 0xa

                     loc_6b58:
0000000000006b58         pop        rbx                                         ; CODE XREF=fts_stat+278, fts_stat+310, fts_stat+397, fts_stat+413, fts_stat+442
0000000000006b59         pop        rbp
0000000000006b5a         pop        r12
0000000000006b5c         ret
                        ; endp
0000000000006b5d         align      32

                     loc_6b60:
0000000000006b60         test       al, 0x2                                     ; CODE XREF=fts_stat+26, fts_stat+30
0000000000006b62         jne        loc_6b00

0000000000006b64         test       dl, dl
0000000000006b66         jne        loc_6b00

0000000000006b68         mov        rdx, rsi                                    ; argument "__filename" for method j___fxstatat
0000000000006b6b         mov        esi, dword [r12+0x2c]                       ; argument "__fildes" for method j___fxstatat
0000000000006b70         mov        r8d, 0x100                                  ; argument "__flag" for method j___fxstatat
0000000000006b76         mov        rcx, rbx                                    ; argument "__stat_buf" for method j___fxstatat
0000000000006b79         mov        edi, 0x1                                    ; argument "__ver" for method j___fxstatat
0000000000006b7e         call       j___fxstatat                                ; __fxstatat
0000000000006b83         test       eax, eax
0000000000006b85         jne        loc_6c20

                     loc_6b8b:
0000000000006b8b         mov        eax, dword [rbp+0x90]                       ; CODE XREF=fts_stat+47
0000000000006b91         and        eax, 0xf000
0000000000006b96         cmp        eax, 0x4000
0000000000006b9b         je         loc_6bc0

0000000000006b9d         cmp        eax, 0xa000
0000000000006ba2         je         loc_6c78

0000000000006ba8         cmp        eax, 0x8000
0000000000006bad         sete       al
0000000000006bb0         movzx      eax, al
0000000000006bb3         pop        rbx
0000000000006bb4         lea        eax, dword [rax+rax*4+3]
0000000000006bb8         pop        rbp
0000000000006bb9         pop        r12
0000000000006bbb         ret
                        ; endp
0000000000006bbc         align      64

                     loc_6bc0:
0000000000006bc0         mov        rax, qword [rbp+0x88]                       ; CODE XREF=fts_stat+187
0000000000006bc7         cmp        rax, 0x1
0000000000006bcb         jbe        loc_6c50

0000000000006bd1         cmp        qword [rbp+0x58], 0x0
0000000000006bd6         jle        loc_6c50

0000000000006bd8         test       byte [r12+0x48], 0x20
0000000000006bde         lea        rdx, qword [rax-2]
0000000000006be2         cmove      rax, rdx

                     loc_6be6:
0000000000006be6         cmp        byte [rbp+0x108], 0x2e                      ; CODE XREF=fts_stat+375
0000000000006bed         mov        qword [rbp+0x68], rax
0000000000006bf1         mov        eax, 0x1
0000000000006bf6         jne        loc_6b58

0000000000006bfc         cmp        byte [rbp+0x109], 0x0
0000000000006c03         jne        loc_6c88

                     loc_6c09:
0000000000006c09         cmp        qword [rbp+0x58], 0x1                       ; CODE XREF=fts_stat+448
0000000000006c0e         sbb        eax, eax
0000000000006c10         and        eax, 0xfffffffc
0000000000006c13         add        eax, 0x5
0000000000006c16         jmp        loc_6b58
0000000000006c1b         align      32

                     loc_6c20:
0000000000006c20         call       j___errno_location                          ; __errno_location, CODE XREF=fts_stat+165
0000000000006c25         mov        eax, dword [rax]
0000000000006c27         jmp        loc_6b24
0000000000006c2c         align      16

                     loc_6c30:
0000000000006c30         mov        rsi, qword [rbp+0x30]                       ; argument "__filename" for method j___lxstat, CODE XREF=fts_stat+62
0000000000006c34         mov        rdx, rbx                                    ; argument "__stat_buf" for method j___lxstat
0000000000006c37         mov        edi, 0x1                                    ; argument "__ver" for method j___lxstat
0000000000006c3c         call       j___lxstat                                  ; __lxstat
0000000000006c41         test       eax, eax
0000000000006c43         je         loc_6c60

0000000000006c45         mov        eax, dword [r12]
0000000000006c49         jmp        loc_6b24
0000000000006c4e         align      16

                     loc_6c50:
0000000000006c50         mov        rax, 0xffffffffffffffff                     ; CODE XREF=fts_stat+235, fts_stat+246
0000000000006c57         jmp        loc_6be6
0000000000006c59         align      32

                     loc_6c60:
0000000000006c60         mov        dword [r12], 0x0                            ; CODE XREF=fts_stat+355
0000000000006c68         mov        eax, 0xd
0000000000006c6d         jmp        loc_6b58
0000000000006c72         align      8

                     loc_6c78:
0000000000006c78         mov        eax, 0xc                                    ; CODE XREF=fts_stat+194
0000000000006c7d         jmp        loc_6b58
0000000000006c82         align      8

                     loc_6c88:
0000000000006c88         mov        edx, dword [rbp+0x108]                      ; CODE XREF=fts_stat+291
0000000000006c8e         and        edx, 0xffff00
0000000000006c94         cmp        edx, 0x2e00
0000000000006c9a         jne        loc_6b58

0000000000006ca0         jmp        loc_6c09
0000000000006ca5         align      16                                          ; End of unwind block (FDE at 0xd708)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fts_sort:
0000000000006cb0         push       r13                                         ; Begin of unwind block (FDE at 0xd744), CODE XREF=fts_build+1825, fts_build+2062, rpl_fts_open+548
0000000000006cb2         push       r12
0000000000006cb4         mov        r12, rdx
0000000000006cb7         push       rbp
0000000000006cb8         push       rbx
0000000000006cb9         mov        rbp, rdi
0000000000006cbc         mov        rbx, rsi
0000000000006cbf         sub        rsp, 0x8
0000000000006cc3         cmp        qword [rbp+0x38], rdx
0000000000006cc7         mov        r13, qword [rdi+0x40]
0000000000006ccb         mov        rdi, qword [rdi+0x10]
0000000000006ccf         jae        loc_6d05

0000000000006cd1         lea        rsi, qword [rdx+0x28]
0000000000006cd5         movabs     rax, 0x1fffffffffffffff
0000000000006cdf         cmp        rsi, rax
0000000000006ce2         mov        qword [rbp+0x38], rsi
0000000000006ce6         ja         loc_6d84

0000000000006cec         shl        rsi, 0x3                                    ; argument "__size" for method j_realloc
0000000000006cf0         call       j_realloc                                   ; realloc
0000000000006cf5         test       rax, rax
0000000000006cf8         mov        rdi, rax
0000000000006cfb         je         loc_6d80

0000000000006d01         mov        qword [rbp+0x10], rax

                     loc_6d05:
0000000000006d05         test       rbx, rbx                                    ; CODE XREF=fts_sort+31
0000000000006d08         je         loc_6d21

0000000000006d0a         mov        rdx, rdi
0000000000006d0d         nop        dword [rax]

                     loc_6d10:
0000000000006d10         add        rdx, 0x8                                    ; CODE XREF=fts_sort+111
0000000000006d14         mov        qword [rdx-8], rbx
0000000000006d18         mov        rbx, qword [rbx+0x10]
0000000000006d1c         test       rbx, rbx
0000000000006d1f         jne        loc_6d10

                     loc_6d21:
0000000000006d21         mov        rcx, r13                                    ; argument "__compar" for method j_qsort, CODE XREF=fts_sort+88
0000000000006d24         mov        edx, 0x8                                    ; argument "__size" for method j_qsort
0000000000006d29         mov        rsi, r12                                    ; argument "__nmemb" for method j_qsort
0000000000006d2c         call       j_qsort                                     ; qsort
0000000000006d31         mov        r8, qword [rbp+0x10]
0000000000006d35         mov        rcx, r12
0000000000006d38         sub        rcx, 0x1
0000000000006d3c         mov        rax, qword [r8]
0000000000006d3f         je         loc_6db0

0000000000006d41         mov        rdi, rax
0000000000006d44         mov        rdx, r8
0000000000006d47         jmp        loc_6d53
0000000000006d49         align      16

                     loc_6d50:
0000000000006d50         mov        rdi, qword [rdx]                            ; CODE XREF=fts_sort+179

                     loc_6d53:
0000000000006d53         mov        rsi, qword [rdx+8]                          ; CODE XREF=fts_sort+151
0000000000006d57         add        rdx, 0x8
0000000000006d5b         sub        rcx, 0x1
0000000000006d5f         mov        qword [rdi+0x10], rsi
0000000000006d63         jne        loc_6d50

0000000000006d65         mov        rdx, qword [r8+r12*8-8]

                     loc_6d6a:
0000000000006d6a         mov        qword [rdx+0x10], 0x0                       ; CODE XREF=fts_sort+259
0000000000006d72         add        rsp, 0x8
0000000000006d76         pop        rbx
0000000000006d77         pop        rbp
0000000000006d78         pop        r12
0000000000006d7a         pop        r13
0000000000006d7c         ret
                        ; endp
0000000000006d7d         align      128

                     loc_6d80:
0000000000006d80         mov        rdi, qword [rbp+0x10]                       ; CODE XREF=fts_sort+75

                     loc_6d84:
0000000000006d84         call       sub_1de0                                    ; sub_1de0, CODE XREF=fts_sort+54
0000000000006d89         mov        qword [rbp+0x10], 0x0
0000000000006d91         mov        qword [rbp+0x38], 0x0
0000000000006d99         add        rsp, 0x8
0000000000006d9d         mov        rax, rbx
0000000000006da0         pop        rbx
0000000000006da1         pop        rbp
0000000000006da2         pop        r12
0000000000006da4         pop        r13
0000000000006da6         ret
                        ; endp
0000000000006da7         align      16

                     loc_6db0:
0000000000006db0         mov        rdx, rax                                    ; CODE XREF=fts_sort+143
0000000000006db3         jmp        loc_6d6a
0000000000006db5         align      64                                          ; End of unwind block (FDE at 0xd744)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fts_alloc:
0000000000006dc0         push       r13                                         ; Begin of unwind block (FDE at 0xd794), CODE XREF=fts_build+556, rpl_fts_open+231, rpl_fts_open+334, rpl_fts_open+568
0000000000006dc2         push       r12
0000000000006dc4         mov        r12, rdi
0000000000006dc7         push       rbp
0000000000006dc8         lea        rdi, qword [rdx+0x110]
0000000000006dcf         push       rbx
0000000000006dd0         mov        r13, rsi
0000000000006dd3         mov        rbp, rdx
0000000000006dd6         sub        rsp, 0x8
0000000000006dda         and        rdi, 0xfffffffffffffff8                     ; argument "__size" for method j_malloc
0000000000006dde         call       j_malloc                                    ; malloc
0000000000006de3         test       rax, rax
0000000000006de6         mov        rbx, rax
0000000000006de9         je         loc_6e3c

0000000000006deb         lea        rdi, qword [rax+0x108]                      ; argument "__dest" for method j_memcpy
0000000000006df2         mov        rdx, rbp                                    ; argument "__n" for method j_memcpy
0000000000006df5         mov        rsi, r13                                    ; argument "__src" for method j_memcpy
0000000000006df8         call       j_memcpy                                    ; memcpy
0000000000006dfd         mov        rax, qword [r12+0x20]
0000000000006e02         mov        byte [rbx+rbp+0x108], 0x0
0000000000006e0a         mov        qword [rbx+0x60], rbp
0000000000006e0e         mov        qword [rbx+0x50], r12
0000000000006e12         mov        dword [rbx+0x40], 0x0
0000000000006e19         mov        qword [rbx+0x18], 0x0
0000000000006e21         mov        qword [rbx+0x38], rax
0000000000006e25         mov        dword [rbx+0x72], 0x30000
0000000000006e2c         mov        qword [rbx+0x20], 0x0
0000000000006e34         mov        qword [rbx+0x28], 0x0

                     loc_6e3c:
0000000000006e3c         add        rsp, 0x8                                    ; CODE XREF=fts_alloc+41
0000000000006e40         mov        rax, rbx
0000000000006e43         pop        rbx
0000000000006e44         pop        rbp
0000000000006e45         pop        r12
0000000000006e47         pop        r13
0000000000006e49         ret
                        ; endp
0000000000006e4a         align      16                                          ; End of unwind block (FDE at 0xd794)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fts_lfree:
0000000000006e50         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0xd7cc), CODE XREF=fts_build+1638, fts_build+1893, fts_build+2281, fts_build+2418, rpl_fts_open+851, rpl_fts_close+92, rpl_fts_read+367, rpl_fts_read+1034, rpl_fts_children+75
0000000000006e53         je         loc_6e90

0000000000006e55         push       rbp
0000000000006e56         push       rbx
0000000000006e57         mov        rbx, rdi
0000000000006e5a         sub        rsp, 0x8
0000000000006e5e         nop

                     loc_6e60:
0000000000006e60         mov        rdi, qword [rbx+0x18]                       ; CODE XREF=fts_lfree+48
0000000000006e64         mov        rbp, qword [rbx+0x10]
0000000000006e68         test       rdi, rdi
0000000000006e6b         je         loc_6e72

0000000000006e6d         call       j_closedir                                  ; closedir

                     loc_6e72:
0000000000006e72         mov        rdi, rbx                                    ; CODE XREF=fts_lfree+27
0000000000006e75         mov        rbx, rbp
0000000000006e78         call       sub_1de0                                    ; sub_1de0
0000000000006e7d         test       rbp, rbp
0000000000006e80         jne        loc_6e60

0000000000006e82         add        rsp, 0x8
0000000000006e86         pop        rbx
0000000000006e87         pop        rbp
0000000000006e88         ret
                        ; endp
0000000000006e89         align      16

                     loc_6e90:
0000000000006e90         ret                                                    ; CODE XREF=fts_lfree+3
                        ; endp
0000000000006e92         align      32                                          ; End of unwind block (FDE at 0xd7cc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fd_ring_clear:
0000000000006ea0         push       rbx                                         ; Begin of unwind block (FDE at 0xd7f8), CODE XREF=restore_initial_cwd+44, rpl_fts_close+140
0000000000006ea1         mov        rbx, rdi
0000000000006ea4         jmp        loc_6ebc
0000000000006ea6         align      16

                     loc_6eb0:
0000000000006eb0         mov        rdi, rbx                                    ; CODE XREF=fd_ring_clear+38
0000000000006eb3         call       i_ring_pop                                  ; i_ring_pop
0000000000006eb8         test       eax, eax
0000000000006eba         jns        loc_6ed0

                     loc_6ebc:
0000000000006ebc         mov        rdi, rbx                                    ; CODE XREF=fd_ring_clear+4, fd_ring_clear+55
0000000000006ebf         call       i_ring_empty                                ; i_ring_empty
0000000000006ec4         test       al, al
0000000000006ec6         je         loc_6eb0

0000000000006ec8         pop        rbx
0000000000006ec9         ret
                        ; endp
0000000000006eca         align      16

                     loc_6ed0:
0000000000006ed0         mov        edi, eax                                    ; argument "__fd" for method j_close, CODE XREF=fd_ring_clear+26
0000000000006ed2         call       j_close                                     ; close
0000000000006ed7         jmp        loc_6ebc
0000000000006ed9         align      32                                          ; End of unwind block (FDE at 0xd7f8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_A8: int64_t, -168
        ;    var_B8: int64_t, -184


                     filesystem_type:
0000000000006ee0         push       r13                                         ; Begin of unwind block (FDE at 0xd814), CODE XREF=leaf_optimization+4, fts_build+708
0000000000006ee2         push       r12
0000000000006ee4         push       rbp
0000000000006ee5         push       rbx
0000000000006ee6         sub        rsp, 0x98
0000000000006eed         mov        rbx, qword [rdi+0x50]
0000000000006ef1         mov        rax, qword [fs:0x28]
0000000000006efa         mov        qword [rsp+0xb8+var_30], rax
0000000000006f02         xor        eax, eax
0000000000006f04         test       byte [rbx+0x49], 0x2
0000000000006f08         je         loc_6f72

0000000000006f0a         mov        r12, qword [rbx+0x50]
0000000000006f0e         mov        rbp, rdi
0000000000006f11         mov        r13d, esi
0000000000006f14         test       r12, r12
0000000000006f17         je         loc_6f40

                     loc_6f19:
0000000000006f19         mov        rax, qword [rbp+0x78]                       ; CODE XREF=filesystem_type+139
0000000000006f1d         mov        rsi, rsp
0000000000006f20         mov        rdi, r12
0000000000006f23         mov        qword [rsp+0xb8+var_B8], rax
0000000000006f27         call       hash_lookup                                 ; hash_lookup
0000000000006f2c         test       rax, rax
0000000000006f2f         je         loc_6f6d

0000000000006f31         mov        rbx, qword [rax+8]
0000000000006f35         jmp        loc_6f74
0000000000006f37         align      64

                     loc_6f40:
0000000000006f40         mov        r8, qword [qword_20efc0]                    ; qword_20efc0, CODE XREF=filesystem_type+55
0000000000006f47         lea        rcx, qword [dev_type_compare]               ; dev_type_compare
0000000000006f4e         lea        rdx, qword [dev_type_hash]                  ; dev_type_hash
0000000000006f55         xor        esi, esi
0000000000006f57         mov        edi, 0xd
0000000000006f5c         call       hash_initialize                             ; hash_initialize
0000000000006f61         test       rax, rax
0000000000006f64         mov        r12, rax
0000000000006f67         mov        qword [rbx+0x50], rax
0000000000006f6b         jne        loc_6f19

                     loc_6f6d:
0000000000006f6d         test       r13d, r13d                                  ; CODE XREF=filesystem_type+79
0000000000006f70         jns        loc_6fa0

                     loc_6f72:
0000000000006f72         xor        ebx, ebx                                    ; CODE XREF=filesystem_type+40, filesystem_type+207

                     loc_6f74:
0000000000006f74         mov        rdx, qword [rsp+0xb8+var_30]                ; CODE XREF=filesystem_type+85, filesystem_type+217, filesystem_type+235, filesystem_type+275
0000000000006f7c         xor        rdx, qword [fs:0x28]
0000000000006f85         mov        rax, rbx
0000000000006f88         jne        loc_7002

0000000000006f8a         add        rsp, 0x98
0000000000006f91         pop        rbx
0000000000006f92         pop        rbp
0000000000006f93         pop        r12
0000000000006f95         pop        r13
0000000000006f97         ret
                        ; endp
0000000000006f98         align      32

                     loc_6fa0:
0000000000006fa0         lea        rsi, qword [rsp+0xb8+var_A8]                ; argument "__buf" for method j_fstatfs, CODE XREF=filesystem_type+144
0000000000006fa5         mov        edi, r13d                                   ; argument "__fildes" for method j_fstatfs
0000000000006fa8         call       j_fstatfs                                   ; fstatfs
0000000000006fad         test       eax, eax
0000000000006faf         jne        loc_6f72

0000000000006fb1         test       r12, r12
0000000000006fb4         mov        rbx, qword [rsp+0xb8+var_A8]
0000000000006fb9         je         loc_6f74

0000000000006fbb         mov        edi, 0x10                                   ; argument "__size" for method j_malloc
0000000000006fc0         call       j_malloc                                    ; malloc
0000000000006fc5         test       rax, rax
0000000000006fc8         mov        r13, rax
0000000000006fcb         je         loc_6f74

0000000000006fcd         mov        rax, qword [rbp+0x78]
0000000000006fd1         mov        qword [r13+8], rbx
0000000000006fd5         mov        rsi, r13
0000000000006fd8         mov        rdi, r12
0000000000006fdb         mov        qword [r13], rax
0000000000006fdf         call       hash_insert                                 ; hash_insert
0000000000006fe4         test       rax, rax
0000000000006fe7         je         loc_6ff8

0000000000006fe9         cmp        r13, rax
0000000000006fec         jne        loc_7007

                     loc_6fee:
0000000000006fee         mov        rbx, qword [rsp+0xb8+var_A8]                ; CODE XREF=filesystem_type+288
0000000000006ff3         jmp        loc_6f74

                     loc_6ff8:
0000000000006ff8         mov        rdi, r13                                    ; CODE XREF=filesystem_type+263
0000000000006ffb         call       sub_1de0                                    ; sub_1de0
0000000000007000         jmp        loc_6fee

                     loc_7002:
0000000000007002         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=filesystem_type+168
                        ; endp

                     loc_7007:
0000000000007007         call       j_abort                                     ; abort, CODE XREF=filesystem_type+268
                        ; endp
000000000000700c         align      16                                          ; End of unwind block (FDE at 0xd814)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     leaf_optimization:
0000000000007010         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0xd850), CODE XREF=fts_build+2231, rpl_fts_read+1797
0000000000007014         call       filesystem_type                             ; filesystem_type
0000000000007019         cmp        rax, 0x52654973
000000000000701f         je         loc_7070

0000000000007021         jle        loc_7050

0000000000007023         cmp        rax, 0x58465342
0000000000007029         je         loc_7070

000000000000702b         mov        edx, 0xff534d42
0000000000007030         cmp        rax, rdx
0000000000007033         je         loc_7065

0000000000007035         cmp        rax, 0x5346414f
000000000000703b         je         loc_7065

                     loc_703d:
000000000000703d         mov        eax, 0x1                                    ; CODE XREF=leaf_optimization+83
0000000000007042         add        rsp, 0x8
0000000000007046         ret
                        ; endp
0000000000007047         align      16

                     loc_7050:
0000000000007050         cmp        rax, 0x6969                                 ; CODE XREF=leaf_optimization+17
0000000000007056         je         loc_7065

0000000000007058         cmp        rax, 0x9fa0
000000000000705e         je         loc_7065

0000000000007060         test       rax, rax
0000000000007063         jne        loc_703d

                     loc_7065:
0000000000007065         xor        eax, eax                                    ; CODE XREF=leaf_optimization+35, leaf_optimization+43, leaf_optimization+70, leaf_optimization+78
0000000000007067         add        rsp, 0x8
000000000000706b         ret
                        ; endp
000000000000706c         align      16

                     loc_7070:
0000000000007070         mov        eax, 0x2                                    ; CODE XREF=leaf_optimization+15, leaf_optimization+25
0000000000007075         add        rsp, 0x8
0000000000007079         ret
                        ; endp
000000000000707a         align      128                                         ; End of unwind block (FDE at 0xd850)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     cwd_advance_fd:
0000000000007080         push       rbp                                         ; Begin of unwind block (FDE at 0xd874), CODE XREF=restore_initial_cwd+74, fts_safe_changedir+542, rpl_fts_read+1279, rpl_fts_children+290
0000000000007081         push       rbx
0000000000007082         mov        ebp, esi
0000000000007084         mov        rbx, rdi
0000000000007087         sub        rsp, 0x8
000000000000708b         mov        esi, dword [rdi+0x2c]
000000000000708e         cmp        esi, ebp
0000000000007090         jne        loc_7097

0000000000007092         cmp        esi, 0xffffff9c
0000000000007095         jne        loc_70e1

                     loc_7097:
0000000000007097         test       dl, dl                                      ; CODE XREF=cwd_advance_fd+16
0000000000007099         jne        loc_70b0

000000000000709b         test       byte [rbx+0x48], 0x4
000000000000709f         jne        loc_70a5

00000000000070a1         test       esi, esi
00000000000070a3         jns        loc_70d0

                     loc_70a5:
00000000000070a5         mov        dword [rbx+0x2c], ebp                       ; CODE XREF=cwd_advance_fd+31, cwd_advance_fd+59
00000000000070a8         add        rsp, 0x8
00000000000070ac         pop        rbx
00000000000070ad         pop        rbp
00000000000070ae         ret
                        ; endp
00000000000070af         align      16

                     loc_70b0:
00000000000070b0         lea        rdi, qword [rbx+0x60]                       ; CODE XREF=cwd_advance_fd+25
00000000000070b4         call       i_ring_push                                 ; i_ring_push
00000000000070b9         test       eax, eax
00000000000070bb         js         loc_70a5

00000000000070bd         mov        edi, eax                                    ; argument "__fd" for method j_close
00000000000070bf         call       j_close                                     ; close
00000000000070c4         mov        dword [rbx+0x2c], ebp
00000000000070c7         add        rsp, 0x8
00000000000070cb         pop        rbx
00000000000070cc         pop        rbp
00000000000070cd         ret
                        ; endp
00000000000070ce         align      16

                     loc_70d0:
00000000000070d0         mov        edi, esi                                    ; argument "__fd" for method j_close, CODE XREF=cwd_advance_fd+35
00000000000070d2         call       j_close                                     ; close
00000000000070d7         mov        dword [rbx+0x2c], ebp
00000000000070da         add        rsp, 0x8
00000000000070de         pop        rbx
00000000000070df         pop        rbp
00000000000070e0         ret
                        ; endp

                     loc_70e1:
00000000000070e1         call       j_abort                                     ; abort, CODE XREF=cwd_advance_fd+21
                        ; endp
00000000000070e6         align      16                                          ; End of unwind block (FDE at 0xd874)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     restore_initial_cwd:
00000000000070f0         push       rbp                                         ; Begin of unwind block (FDE at 0xd8b8), CODE XREF=fts_build+1854, rpl_fts_read+675, rpl_fts_read+1171
00000000000070f1         push       rbx
00000000000070f2         mov        rbx, rdi
00000000000070f5         sub        rsp, 0x8
00000000000070f9         mov        edx, dword [rdi+0x48]
00000000000070fc         mov        ebp, edx
00000000000070fe         and        ebp, 0x4
0000000000007101         jne        loc_7148

0000000000007103         and        dh, 0x2
0000000000007106         jne        loc_7130

0000000000007108         mov        edi, dword [rdi+0x28]                       ; argument "__fd" for method j_fchdir
000000000000710b         xor        ebp, ebp
000000000000710d         call       j_fchdir                                    ; fchdir
0000000000007112         test       eax, eax
0000000000007114         setne      bpl

                     loc_7118:
0000000000007118         lea        rdi, qword [rbx+0x60]                       ; CODE XREF=restore_initial_cwd+79, restore_initial_cwd+90
000000000000711c         call       fd_ring_clear                               ; fd_ring_clear
0000000000007121         add        rsp, 0x8
0000000000007125         mov        eax, ebp
0000000000007127         pop        rbx
0000000000007128         pop        rbp
0000000000007129         ret
                        ; endp
000000000000712a         align      16

                     loc_7130:
0000000000007130         mov        edx, 0x1                                    ; CODE XREF=restore_initial_cwd+22
0000000000007135         mov        esi, 0xffffff9c
000000000000713a         call       cwd_advance_fd                              ; cwd_advance_fd
000000000000713f         jmp        loc_7118
0000000000007141         align      8

                     loc_7148:
0000000000007148         xor        ebp, ebp                                    ; CODE XREF=restore_initial_cwd+17
000000000000714a         jmp        loc_7118
000000000000714c         align      16                                          ; End of unwind block (FDE at 0xd8b8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fts_palloc.isra.2:
0000000000007150         push       rbx                                         ; Begin of unwind block (FDE at 0xd8e4), CODE XREF=fts_build+611, rpl_fts_open+189
0000000000007151         mov        rcx, qword [rsi]
0000000000007154         mov        rbx, rdi
0000000000007157         mov        rdi, qword [rdi]
000000000000715a         lea        rax, qword [rcx+rdx+0x100]
0000000000007162         cmp        rcx, rax
0000000000007165         ja         loc_7188

0000000000007167         mov        qword [rsi], rax
000000000000716a         mov        rsi, rax                                    ; argument "__size" for method j_realloc
000000000000716d         call       j_realloc                                   ; realloc
0000000000007172         test       rax, rax
0000000000007175         je         loc_71a8

0000000000007177         mov        qword [rbx], rax
000000000000717a         mov        eax, 0x1
000000000000717f         pop        rbx
0000000000007180         ret
                        ; endp
0000000000007181         align      8

                     loc_7188:
0000000000007188         call       sub_1de0                                    ; sub_1de0, CODE XREF=fts_palloc.isra.2+21
000000000000718d         mov        qword [rbx], 0x0
0000000000007194         call       j___errno_location                          ; __errno_location
0000000000007199         mov        dword [rax], 0x24
000000000000719f         xor        eax, eax
00000000000071a1         pop        rbx
00000000000071a2         ret
                        ; endp
00000000000071a3         align      8

                     loc_71a8:
00000000000071a8         mov        rdi, qword [rbx]                            ; CODE XREF=fts_palloc.isra.2+37
00000000000071ab         call       sub_1de0                                    ; sub_1de0
00000000000071b0         mov        qword [rbx], 0x0
00000000000071b7         xor        eax, eax
00000000000071b9         pop        rbx
00000000000071ba         ret
                        ; endp
00000000000071bb         align      64                                          ; End of unwind block (FDE at 0xd8e4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     setup_dir.isra.4:
00000000000071c0         and        edi, 0x102                                  ; Begin of unwind block (FDE at 0xd90c), CODE XREF=rpl_fts_open+613, rpl_fts_read+837
00000000000071c6         push       rbx
00000000000071c7         mov        rbx, rsi
00000000000071ca         je         loc_7200

00000000000071cc         mov        r8, qword [qword_20efc0]                    ; qword_20efc0
00000000000071d3         lea        rcx, qword [AD_compare]                     ; AD_compare
00000000000071da         lea        rdx, qword [AD_hash]                        ; AD_hash
00000000000071e1         xor        esi, esi
00000000000071e3         mov        edi, 0x1f
00000000000071e8         call       hash_initialize                             ; hash_initialize
00000000000071ed         test       rax, rax
00000000000071f0         mov        qword [rbx], rax
00000000000071f3         setne      al

                     loc_71f6:
00000000000071f6         pop        rbx                                         ; CODE XREF=setup_dir.isra.4+85
00000000000071f7         ret
                        ; endp
00000000000071f8         align      512

                     loc_7200:
0000000000007200         mov        edi, 0x20                                   ; argument "__size" for method j_malloc, CODE XREF=setup_dir.isra.4+10
0000000000007205         call       j_malloc                                    ; malloc
000000000000720a         mov        rdi, rax
000000000000720d         mov        qword [rbx], rax
0000000000007210         xor        eax, eax
0000000000007212         test       rdi, rdi
0000000000007215         je         loc_71f6

0000000000007217         call       cycle_check_init                            ; cycle_check_init
000000000000721c         mov        eax, 0x1
0000000000007221         pop        rbx
0000000000007222         ret
                        ; endp
0000000000007223         align      16                                          ; End of unwind block (FDE at 0xd90c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40
        ;    var_38: int8_t, -56
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int32_t, -88


                     diropen.isra.6:
0000000000007230         mov        rax, rdx                                    ; Begin of unwind block (FDE at 0xd92c), CODE XREF=fts_safe_changedir+141, rpl_fts_open+647, rpl_fts_read+1752, rpl_fts_read+1832, rpl_fts_children+202
0000000000007233         mov        edx, esi
0000000000007235         shl        edx, 0xd
0000000000007238         and        edx, 0x20000
000000000000723e         or         edx, 0x90900
0000000000007244         and        esi, 0x200
000000000000724a         jne        loc_7260

000000000000724c         mov        rdi, rax
000000000000724f         mov        esi, edx
0000000000007251         xor        eax, eax
0000000000007253         jmp        open_safer                                  ; open_safer
0000000000007258         align      32

                     loc_7260:
0000000000007260         mov        rsi, rax                                    ; CODE XREF=diropen.isra.6+26
0000000000007263         xor        eax, eax
0000000000007265         jmp        openat_safer                                ; openat_safer
000000000000726a         align      16                                          ; End of unwind block (FDE at 0xd92c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_D0: int64_t, -208
        ;    var_D8: int64_t, -216
        ;    var_D9: int8_t, -217


                     fts_safe_changedir:
0000000000007270         push       r15                                         ; Begin of unwind block (FDE at 0xd940), CODE XREF=fts_build+2169, fts_build+2194, rpl_fts_read+542, rpl_fts_read+1123
0000000000007272         push       r14
0000000000007274         mov        r14, rsi
0000000000007277         push       r13
0000000000007279         push       r12
000000000000727b         mov        r13, rdi
000000000000727e         push       rbp
000000000000727f         push       rbx
0000000000007280         mov        r12d, edx
0000000000007283         mov        rbp, rcx
0000000000007286         sub        rsp, 0xb8
000000000000728d         mov        ebx, dword [rdi+0x48]
0000000000007290         mov        rax, qword [fs:0x28]
0000000000007299         mov        qword [rsp+0xe8+var_40], rax
00000000000072a1         xor        eax, eax
00000000000072a3         mov        r9d, ebx
00000000000072a6         and        r9d, 0x4
00000000000072aa         test       rcx, rcx
00000000000072ad         je         loc_7360

00000000000072b3         lea        rdx, qword [__PRETTY_FUNCTION__.4162+9]     ; 0xc4c9
00000000000072ba         mov        ecx, 0x3
00000000000072bf         mov        rsi, rbp
00000000000072c2         mov        rdi, rdx
00000000000072c5         rep  cmpsb byte [rsi], byte [rdi]
00000000000072c7         seta       al
00000000000072ca         sbb        al, 0x0
00000000000072cc         test       al, al
00000000000072ce         jne        loc_7360

00000000000072d4         test       r9d, r9d
00000000000072d7         jne        loc_7365

00000000000072dd         test       r12d, r12d
00000000000072e0         jns        loc_74ca

00000000000072e6         test       bh, 0x2
00000000000072e9         jne        loc_7430

                     loc_72ef:
00000000000072ef         mov        byte [rsp+0xe8+var_D9], 0x1                 ; CODE XREF=fts_safe_changedir+489

                     loc_72f4:
00000000000072f4         mov        edi, dword [r13+0x2c]                       ; CODE XREF=fts_safe_changedir+466, fts_safe_changedir+629
00000000000072f8         mov        rdx, rbp
00000000000072fb         mov        esi, ebx
00000000000072fd         call       diropen.isra.6                              ; diropen.isra.6
0000000000007302         test       eax, eax
0000000000007304         mov        r15d, eax
0000000000007307         js         loc_74bb

000000000000730d         mov        ebx, dword [r13+0x48]
0000000000007311         test       bl, 0x2
0000000000007314         je         loc_73ba

000000000000731a         nop        word [rax+rax]

                     loc_7320:
0000000000007320         lea        rdx, qword [rsp+0xe8+var_D8]                ; argument "__stat_buf" for method j___fxstat, CODE XREF=fts_safe_changedir+324, fts_safe_changedir+362, fts_safe_changedir+512, fts_safe_changedir+619
0000000000007325         mov        esi, r15d                                   ; argument "__fildes" for method j___fxstat
0000000000007328         mov        edi, 0x1                                    ; argument "__ver" for method j___fxstat
000000000000732d         call       j___fxstat                                  ; __fxstat
0000000000007332         test       eax, eax
0000000000007334         je         loc_7400

                     loc_733a:
000000000000733a         mov        ebx, 0xffffffff                             ; CODE XREF=fts_safe_changedir+426

                     loc_733f:
000000000000733f         test       r12d, r12d                                  ; CODE XREF=fts_safe_changedir+387
0000000000007342         jns        loc_7375

0000000000007344         call       j___errno_location                          ; __errno_location
0000000000007349         mov        r12d, dword [rax]
000000000000734c         mov        rbp, rax
000000000000734f         mov        edi, r15d                                   ; argument "__fd" for method j_close
0000000000007352         call       j_close                                     ; close
0000000000007357         mov        dword [rbp], r12d
000000000000735b         jmp        loc_7375
000000000000735d         align      32

                     loc_7360:
0000000000007360         test       r9d, r9d                                    ; CODE XREF=fts_safe_changedir+61, fts_safe_changedir+94
0000000000007363         je         loc_73a0

                     loc_7365:
0000000000007365         and        bh, 0x2                                     ; CODE XREF=fts_safe_changedir+103
0000000000007368         je         loc_7373

000000000000736a         test       r12d, r12d
000000000000736d         jns        loc_7420

                     loc_7373:
0000000000007373         xor        ebx, ebx                                    ; CODE XREF=fts_safe_changedir+248

                     loc_7375:
0000000000007375         mov        rcx, qword [rsp+0xe8+var_40]                ; CODE XREF=fts_safe_changedir+210, fts_safe_changedir+235, fts_safe_changedir+442, fts_safe_changedir+547, fts_safe_changedir+592
000000000000737d         xor        rcx, qword [fs:0x28]
0000000000007386         mov        eax, ebx
0000000000007388         jne        loc_74c5

000000000000738e         add        rsp, 0xb8
0000000000007395         pop        rbx
0000000000007396         pop        rbp
0000000000007397         pop        r12
0000000000007399         pop        r13
000000000000739b         pop        r14
000000000000739d         pop        r15
000000000000739f         ret
                        ; endp

                     loc_73a0:
00000000000073a0         test       r12d, r12d                                  ; CODE XREF=fts_safe_changedir+243
00000000000073a3         js         loc_74e0

00000000000073a9         test       bl, 0x2
00000000000073ac         mov        r15d, r12d
00000000000073af         mov        byte [rsp+0xe8+var_D9], 0x0
00000000000073b4         jne        loc_7320

                     loc_73ba:
00000000000073ba         test       rbp, rbp                                    ; CODE XREF=fts_safe_changedir+164
00000000000073bd         je         loc_73e0

00000000000073bf         lea        rdx, qword [__PRETTY_FUNCTION__.4162+9]     ; 0xc4c9

                     loc_73c6:
00000000000073c6         mov        ecx, 0x3                                    ; CODE XREF=fts_safe_changedir+613
00000000000073cb         mov        rsi, rbp
00000000000073ce         mov        rdi, rdx
00000000000073d1         rep  cmpsb byte [rsi], byte [rdi]
00000000000073d3         seta       al
00000000000073d6         sbb        al, 0x0
00000000000073d8         test       al, al
00000000000073da         je         loc_7320

                     loc_73e0:
00000000000073e0         and        bh, 0x2                                     ; CODE XREF=fts_safe_changedir+333, fts_safe_changedir+506, fts_safe_changedir+582
00000000000073e3         jne        loc_7478

00000000000073e9         mov        edi, r15d                                   ; argument "__fd" for method j_fchdir
00000000000073ec         call       j_fchdir                                    ; fchdir
00000000000073f1         mov        ebx, eax
00000000000073f3         jmp        loc_733f
00000000000073f8         align      1024

                     loc_7400:
0000000000007400         mov        rax, qword [rsp+0xe8+var_D8]                ; CODE XREF=fts_safe_changedir+196
0000000000007405         cmp        qword [r14+0x78], rax
0000000000007409         je         loc_74a0

                     loc_740f:
000000000000740f         call       j___errno_location                          ; __errno_location, CODE XREF=fts_safe_changedir+572
0000000000007414         mov        dword [rax], 0x2
000000000000741a         jmp        loc_733a
000000000000741f         align      32

                     loc_7420:
0000000000007420         mov        edi, r12d                                   ; argument "__fd" for method j_close, CODE XREF=fts_safe_changedir+253
0000000000007423         xor        ebx, ebx
0000000000007425         call       j_close                                     ; close
000000000000742a         jmp        loc_7375
000000000000742f         align      16

                     loc_7430:
0000000000007430         lea        r15, qword [r13+0x60]                       ; CODE XREF=fts_safe_changedir+121
0000000000007434         mov        rdi, r15
0000000000007437         call       i_ring_empty                                ; i_ring_empty
000000000000743c         test       al, al
000000000000743e         mov        byte [rsp+0xe8+var_D9], al
0000000000007442         jne        loc_72f4

0000000000007448         mov        rdi, r15
000000000000744b         call       i_ring_pop                                  ; i_ring_pop
0000000000007450         test       eax, eax
0000000000007452         mov        r15d, eax
0000000000007455         mov        ebx, dword [r13+0x48]
0000000000007459         js         loc_72ef

000000000000745f         test       bl, 0x2
0000000000007462         mov        r12d, eax
0000000000007465         mov        byte [rsp+0xe8+var_D9], 0x1
000000000000746a         je         loc_73e0

0000000000007470         jmp        loc_7320
0000000000007475         align      8

                     loc_7478:
0000000000007478         movzx      r14d, byte [rsp+0xe8+var_D9]                ; CODE XREF=fts_safe_changedir+371
000000000000747e         mov        esi, r15d
0000000000007481         mov        rdi, r13
0000000000007484         xor        ebx, ebx
0000000000007486         xor        r14d, 0x1
000000000000748a         movzx      edx, r14b
000000000000748e         call       cwd_advance_fd                              ; cwd_advance_fd
0000000000007493         jmp        loc_7375
0000000000007498         align      32

                     loc_74a0:
00000000000074a0         mov        rax, qword [rsp+0xe8+var_D0]                ; CODE XREF=fts_safe_changedir+409
00000000000074a5         cmp        qword [r14+0x80], rax
00000000000074ac         jne        loc_740f

00000000000074b2         mov        ebx, dword [r13+0x48]
00000000000074b6         jmp        loc_73e0

                     loc_74bb:
00000000000074bb         mov        ebx, 0xffffffff                             ; CODE XREF=fts_safe_changedir+151
00000000000074c0         jmp        loc_7375

                     loc_74c5:
00000000000074c5         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=fts_safe_changedir+280
                        ; endp

                     loc_74ca:
00000000000074ca         test       bl, 0x2                                     ; CODE XREF=fts_safe_changedir+112
00000000000074cd         mov        r15d, r12d
00000000000074d0         mov        byte [rsp+0xe8+var_D9], 0x1
00000000000074d5         je         loc_73c6

00000000000074db         jmp        loc_7320

                     loc_74e0:
00000000000074e0         mov        byte [rsp+0xe8+var_D9], 0x0                 ; CODE XREF=fts_safe_changedir+307
00000000000074e5         jmp        loc_72f4
00000000000074ea         align      16                                          ; End of unwind block (FDE at 0xd940)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     enter_dir.isra.10:
00000000000074f0         and        edi, 0x102                                  ; Begin of unwind block (FDE at 0xd990), CODE XREF=fts_build+1558, rpl_fts_read+899
00000000000074f6         push       r12
00000000000074f8         mov        r12, rsi
00000000000074fb         push       rbp
00000000000074fc         push       rbx
00000000000074fd         mov        rbx, rdx
0000000000007500         je         loc_7570

0000000000007502         mov        edi, 0x18                                   ; argument "__size" for method j_malloc
0000000000007507         call       j_malloc                                    ; malloc
000000000000750c         test       rax, rax
000000000000750f         mov        rbp, rax
0000000000007512         je         loc_7598

0000000000007518         mov        rax, qword [rbx+0x78]
000000000000751c         mov        rdi, qword [r12]
0000000000007520         mov        rsi, rbp
0000000000007523         mov        qword [rbp+0x10], rbx
0000000000007527         mov        qword [rbp], rax
000000000000752b         mov        rax, qword [rbx+0x80]
0000000000007532         mov        qword [rbp+8], rax
0000000000007536         call       hash_insert                                 ; hash_insert
000000000000753b         cmp        rbp, rax
000000000000753e         mov        r12, rax
0000000000007541         je         loc_7561

0000000000007543         mov        rdi, rbp
0000000000007546         call       sub_1de0                                    ; sub_1de0
000000000000754b         test       r12, r12
000000000000754e         je         loc_7598

0000000000007550         mov        rax, qword [r12+0x10]
0000000000007555         mov        ecx, 0x2
000000000000755a         mov        word [rbx+0x70], cx
000000000000755e         mov        qword [rbx], rax

                     loc_7561:
0000000000007561         pop        rbx                                         ; CODE XREF=enter_dir.isra.10+81, enter_dir.isra.10+143
0000000000007562         mov        eax, 0x1
0000000000007567         pop        rbp
0000000000007568         pop        r12
000000000000756a         ret
                        ; endp
000000000000756b         align      16

                     loc_7570:
0000000000007570         mov        rdi, qword [r12]                            ; CODE XREF=enter_dir.isra.10+16
0000000000007574         lea        rsi, qword [rdx+0x78]
0000000000007578         call       cycle_check                                 ; cycle_check
000000000000757d         test       al, al
000000000000757f         je         loc_7561

0000000000007581         mov        edx, 0x2
0000000000007586         mov        qword [rbx], rbx
0000000000007589         mov        word [rbx+0x70], dx
000000000000758d         pop        rbx
000000000000758e         pop        rbp
000000000000758f         pop        r12
0000000000007591         ret
                        ; endp
0000000000007592         align      8

                     loc_7598:
0000000000007598         pop        rbx                                         ; CODE XREF=enter_dir.isra.10+34, enter_dir.isra.10+94
0000000000007599         xor        eax, eax
000000000000759b         pop        rbp
000000000000759c         pop        r12
000000000000759e         ret
                        ; endp
000000000000759f         align      32                                          ; End of unwind block (FDE at 0xd990)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40


                     leave_dir.isra.12:
00000000000075a0         sub        rsp, 0x28                                   ; Begin of unwind block (FDE at 0xd9d4), CODE XREF=fts_build+1530, rpl_fts_read+405, rpl_fts_read+1209, rpl_fts_read+1368
00000000000075a4         mov        rcx, rsi
00000000000075a7         mov        rax, qword [fs:0x28]
00000000000075b0         mov        qword [rsp+0x28+var_10], rax
00000000000075b5         xor        eax, eax
00000000000075b7         and        edi, 0x102
00000000000075bd         jne        loc_7600

00000000000075bf         mov        rax, qword [rdx+8]
00000000000075c3         test       rax, rax
00000000000075c6         je         loc_75e5

00000000000075c8         cmp        qword [rax+0x58], 0x0
00000000000075cd         js         loc_75e5

00000000000075cf         mov        rcx, qword [rsi]
00000000000075d2         cmp        qword [rcx+0x10], 0x0
00000000000075d7         je         loc_7653

00000000000075d9         mov        rsi, qword [rdx+0x80]
00000000000075e0         cmp        qword [rcx], rsi
00000000000075e3         je         loc_7630

                     loc_75e5:
00000000000075e5         mov        rax, qword [rsp+0x28+var_10]                ; CODE XREF=leave_dir.isra.12+38, leave_dir.isra.12+45, leave_dir.isra.12+140, leave_dir.isra.12+152, leave_dir.isra.12+172
00000000000075ea         xor        rax, qword [fs:0x28]
00000000000075f3         jne        loc_764e

00000000000075f5         add        rsp, 0x28
00000000000075f9         ret
                        ; endp
00000000000075fa         align      512

                     loc_7600:
0000000000007600         mov        rax, qword [rdx+0x78]                       ; CODE XREF=leave_dir.isra.12+29
0000000000007604         mov        rdi, qword [rcx]
0000000000007607         mov        rsi, rsp
000000000000760a         mov        qword [rsp+0x28+var_28], rax
000000000000760e         mov        rax, qword [rdx+0x80]
0000000000007615         mov        qword [rsp+0x28+var_20], rax
000000000000761a         call       hash_delete                                 ; hash_delete
000000000000761f         test       rax, rax
0000000000007622         je         loc_7653

0000000000007624         mov        rdi, rax
0000000000007627         call       sub_1de0                                    ; sub_1de0
000000000000762c         jmp        loc_75e5
000000000000762e         align      16

                     loc_7630:
0000000000007630         mov        rsi, qword [rdx+0x78]                       ; CODE XREF=leave_dir.isra.12+67
0000000000007634         cmp        qword [rcx+8], rsi
0000000000007638         jne        loc_75e5

000000000000763a         mov        rdx, qword [rax+0x78]
000000000000763e         mov        rax, qword [rax+0x80]
0000000000007645         mov        qword [rcx+8], rdx
0000000000007649         mov        qword [rcx], rax
000000000000764c         jmp        loc_75e5

                     loc_764e:
000000000000764e         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=leave_dir.isra.12+83
                        ; endp

                     loc_7653:
0000000000007653         call       j_abort                                     ; abort, CODE XREF=leave_dir.isra.12+55, leave_dir.isra.12+130
                        ; endp
0000000000007658         align      32                                          ; End of unwind block (FDE at 0xd9d4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_44: int32_t, -68
        ;    var_49: int8_t, -73
        ;    var_4A: int8_t, -74
        ;    var_4B: int8_t, -75
        ;    var_50: int32_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160


                     fts_build:
0000000000007660         push       r15                                         ; Begin of unwind block (FDE at 0xd9f0), CODE XREF=rpl_fts_read+1056, rpl_fts_read+1561, rpl_fts_children+139, rpl_fts_children+219
0000000000007662         push       r14
0000000000007664         mov        r15, rdi
0000000000007667         push       r13
0000000000007669         push       r12
000000000000766b         push       rbp
000000000000766c         push       rbx
000000000000766d         sub        rsp, 0x78
0000000000007671         mov        rbp, qword [rdi]
0000000000007674         mov        rax, qword [fs:0x28]
000000000000767d         mov        qword [rsp+0xa8+var_40], rax
0000000000007682         xor        eax, eax
0000000000007684         mov        dword [rsp+0xa8+var_50], esi
0000000000007688         mov        rax, qword [rbp+0x18]
000000000000768c         test       rax, rax
000000000000768f         mov        qword [rsp+0xa8+var_58], rax
0000000000007694         je         loc_7ad0

000000000000769a         mov        rdi, rax                                    ; argument "__dirp" for method j_dirfd
000000000000769d         call       j_dirfd                                     ; dirfd
00000000000076a2         test       eax, eax
00000000000076a4         mov        dword [rsp+0xa8+var_44], eax
00000000000076a8         js         loc_7c00

00000000000076ae         cmp        qword [r15+0x40], 0x0
00000000000076b3         je         loc_7e88

00000000000076b9         mov        qword [rsp+0xa8+var_70], 0xffffffffffffffff

                     loc_76c2:
00000000000076c2         mov        edi, dword [r15+0x48]                       ; CODE XREF=fts_build+2207
00000000000076c6         mov        byte [rsp+0xa8+var_49], 0x1

                     loc_76cb:
00000000000076cb         mov        rcx, qword [rbp+0x48]                       ; CODE XREF=fts_build+1405, fts_build+2106, fts_build+2121
00000000000076cf         mov        rdx, qword [rbp+0x38]
00000000000076d3         mov        qword [rsp+0xa8+var_68], 0x0
00000000000076dc         cmp        byte [rdx+rcx-1], 0x2f
00000000000076e1         lea        rax, qword [rcx-1]
00000000000076e5         cmovne     rax, rcx
00000000000076e9         and        edi, 0x4
00000000000076ec         mov        qword [rsp+0xa8+var_60], rax
00000000000076f1         je         loc_7703

00000000000076f3         add        rax, qword [r15+0x20]
00000000000076f7         lea        rbx, qword [rax+1]
00000000000076fb         mov        byte [rax], 0x2f
00000000000076fe         mov        qword [rsp+0xa8+var_68], rbx

                     loc_7703:
0000000000007703         mov        rax, qword [rsp+0xa8+var_60]                ; CODE XREF=fts_build+145
0000000000007708         mov        rbx, qword [r15+0x30]
000000000000770c         mov        byte [rsp+0xa8+var_4A], 0x0
0000000000007711         mov        byte [rsp+0xa8+var_4B], 0x0
0000000000007716         mov        qword [rsp+0xa8+var_A0], 0x0
000000000000771f         mov        qword [rsp+0xa8+var_98], 0x0
0000000000007728         add        rax, 0x1
000000000000772c         mov        qword [rsp+0xa8+var_88], rbp
0000000000007731         sub        rbx, rax
0000000000007734         mov        qword [rsp+0xa8+var_90], rax
0000000000007739         mov        rax, qword [rbp+0x58]
000000000000773d         mov        qword [rsp+0xa8+var_80], rbx
0000000000007742         xor        ebx, ebx
0000000000007744         add        rax, 0x1
0000000000007748         mov        qword [rsp+0xa8+var_78], rax
000000000000774d         jmp        loc_782f
0000000000007752         align      8

                     loc_7758:
0000000000007758         mov        r9, r14                                     ; CODE XREF=fts_build+578, fts_build+678
000000000000775b         add        r9, qword [rsp+0xa8+var_90]
0000000000007760         jb         loc_7fc0

0000000000007766         mov        rax, qword [rsp+0xa8+var_78]
000000000000776b         lea        rsi, qword [r13+0x108]
0000000000007772         mov        qword [r13+0x58], rax
0000000000007776         mov        rax, qword [r15]
0000000000007779         mov        qword [r13+0x48], r9
000000000000777d         mov        qword [r13+8], rax
0000000000007781         mov        rax, qword [rbp]
0000000000007785         mov        qword [r13+0x80], rax
000000000000778c         mov        eax, dword [r15+0x48]
0000000000007790         test       al, 0x4
0000000000007792         jne        loc_7a00

0000000000007798         mov        qword [r13+0x30], rsi

                     loc_779c:
000000000000779c         cmp        qword [r15+0x40], 0x0                       ; CODE XREF=fts_build+958
00000000000077a1         je         loc_77ac

00000000000077a3         test       ah, 0x4
00000000000077a6         je         loc_7aa8

                     loc_77ac:
00000000000077ac         movzx      edx, byte [rbp+0x12]                        ; CODE XREF=fts_build+321
00000000000077b0         and        eax, 0x18
00000000000077b3         mov        esi, edx
00000000000077b5         sub        edx, 0x1
00000000000077b8         cmp        eax, 0x18
00000000000077bb         je         loc_7a70

                     loc_77c1:
00000000000077c1         mov        ecx, 0xb                                    ; CODE XREF=fts_build+1046
00000000000077c6         cmp        edx, 0xb
00000000000077c9         mov        word [r13+0x70], cx
00000000000077ce         ja         loc_7a38

00000000000077d4         lea        rax, qword [CSWTCH.53]                      ; CSWTCH.53
00000000000077db         mov        eax, dword [rax+rdx*4]
00000000000077de         mov        dword [r13+0x90], eax
00000000000077e5         mov        eax, 0x2

                     loc_77ea:
00000000000077ea         mov        qword [r13+0xa8], rax                       ; CODE XREF=fts_build+1000, fts_build+1087, fts_build+2508

                     loc_77f1:
00000000000077f1         cmp        qword [rsp+0xa8+var_98], 0x0                ; CODE XREF=fts_build+1114
00000000000077f7         mov        qword [r13+0x10], 0x0
00000000000077ff         je         loc_7a28

0000000000007805         mov        rax, qword [rsp+0xa8+var_A0]
000000000000780a         mov        qword [rax+0x10], r13

                     loc_780e:
000000000000780e         cmp        rbx, 0x2710                                 ; CODE XREF=fts_build+973
0000000000007815         je         loc_7910

                     loc_781b:
000000000000781b         add        rbx, 0x1                                    ; CODE XREF=fts_build+693, fts_build+1605
000000000000781f         cmp        rbx, qword [rsp+0xa8+var_70]
0000000000007824         jae        loc_7968

                     loc_782a:
000000000000782a         mov        qword [rsp+0xa8+var_A0], r13                ; CODE XREF=fts_build+765, fts_build+1030

                     loc_782f:
000000000000782f         mov        rax, qword [rsp+0xa8+var_88]                ; CODE XREF=fts_build+237
0000000000007834         mov        r13, qword [rax+0x18]
0000000000007838         test       r13, r13
000000000000783b         je         loc_7d08

0000000000007841         call       j___errno_location                          ; __errno_location
0000000000007846         mov        rdi, r13                                    ; argument "__dirp" for method j_readdir
0000000000007849         mov        dword [rax], 0x0
000000000000784f         mov        r12, rax
0000000000007852         call       j_readdir                                   ; readdir
0000000000007857         test       rax, rax
000000000000785a         mov        rbp, rax
000000000000785d         je         loc_7de0

0000000000007863         test       byte [r15+0x48], 0x20
0000000000007868         jne        loc_7874

000000000000786a         cmp        byte [rax+0x13], 0x2e
000000000000786e         je         loc_7a50

                     loc_7874:
0000000000007874         lea        r13, qword [rbp+0x13]                       ; CODE XREF=fts_build+520, fts_build+1019
0000000000007878         mov        rdi, r13                                    ; argument "__s" for method j_strlen
000000000000787b         call       j_strlen                                    ; strlen
0000000000007880         mov        rsi, r13
0000000000007883         mov        rdx, rax
0000000000007886         mov        rdi, r15
0000000000007889         mov        r14, rax
000000000000788c         call       fts_alloc                                   ; fts_alloc
0000000000007891         test       rax, rax
0000000000007894         mov        r13, rax
0000000000007897         je         loc_7cb0

000000000000789d         cmp        qword [rsp+0xa8+var_80], r14
00000000000078a2         ja         loc_7758

00000000000078a8         mov        rax, qword [r15+0x20]
00000000000078ac         lea        rsi, qword [r15+0x30]
00000000000078b0         lea        rdi, qword [r15+0x20]
00000000000078b4         mov        qword [rsp+0xa8+var_80], rax
00000000000078b9         mov        rax, qword [rsp+0xa8+var_60]
00000000000078be         lea        rdx, qword [rax+r14+2]
00000000000078c3         call       fts_palloc.isra.2                           ; fts_palloc.isra.2
00000000000078c8         test       al, al
00000000000078ca         je         loc_7cb0

00000000000078d0         mov        rdx, qword [r15+0x20]
00000000000078d4         cmp        rdx, qword [rsp+0xa8+var_80]
00000000000078d9         je         loc_7ac0

00000000000078df         add        rdx, qword [rsp+0xa8+var_90]
00000000000078e4         test       byte [r15+0x48], 0x4
00000000000078e9         cmove      rdx, qword [rsp+0xa8+var_68]
00000000000078ef         mov        qword [rsp+0xa8+var_68], rdx

                     loc_78f4:
00000000000078f4         mov        rcx, qword [r15+0x30]                       ; CODE XREF=fts_build+1125
00000000000078f8         sub        rcx, qword [rsp+0xa8+var_90]
00000000000078fd         mov        byte [rsp+0xa8+var_4B], al
0000000000007901         mov        qword [rsp+0xa8+var_80], rcx
0000000000007906         jmp        loc_7758
000000000000790b         align      16

                     loc_7910:
0000000000007910         cmp        qword [r15+0x40], 0x0                       ; CODE XREF=fts_build+437
0000000000007915         jne        loc_781b

000000000000791b         mov        esi, dword [rsp+0xa8+var_44]
000000000000791f         mov        rdi, qword [rsp+0xa8+var_88]
0000000000007924         call       filesystem_type                             ; filesystem_type
0000000000007929         cmp        rax, 0x1021994
000000000000792f         je         loc_7ca0

0000000000007935         mov        ecx, 0xff534d42
000000000000793a         cmp        rax, rcx
000000000000793d         je         loc_7ca0

0000000000007943         cmp        rax, 0x6969
0000000000007949         je         loc_7ca0

000000000000794f         add        rbx, 0x1
0000000000007953         cmp        rbx, qword [rsp+0xa8+var_70]
0000000000007958         mov        byte [rsp+0xa8+var_4A], 0x1
000000000000795d         jb         loc_782a

0000000000007963         nop        dword [rax+rax]

                     loc_7968:
0000000000007968         cmp        byte [rsp+0xa8+var_4B], 0x0                 ; CODE XREF=fts_build+452
000000000000796d         mov        rbp, qword [rsp+0xa8+var_88]
0000000000007972         je         loc_7d16

                     loc_7978:
0000000000007978         mov        rax, qword [r15+8]                          ; CODE XREF=fts_build+1712
000000000000797c         mov        rcx, qword [r15+0x20]
0000000000007980         test       rax, rax
0000000000007983         je         loc_79b0

0000000000007985         nop        dword [rax]

                     loc_7988:
0000000000007988         mov        rdx, qword [rax+0x30]                       ; CODE XREF=fts_build+846
000000000000798c         lea        rsi, qword [rax+0x108]
0000000000007993         cmp        rdx, rsi
0000000000007996         je         loc_79a3

0000000000007998         sub        rdx, qword [rax+0x38]
000000000000799c         add        rdx, rcx
000000000000799f         mov        qword [rax+0x30], rdx

                     loc_79a3:
00000000000079a3         mov        qword [rax+0x38], rcx                       ; CODE XREF=fts_build+822
00000000000079a7         mov        rax, qword [rax+0x10]
00000000000079ab         test       rax, rax
00000000000079ae         jne        loc_7988

                     loc_79b0:
00000000000079b0         mov        rax, qword [rsp+0xa8+var_98]                ; CODE XREF=fts_build+803
00000000000079b5         jmp        loc_79c3
00000000000079b7         align      64

                     loc_79c0:
00000000000079c0         mov        rax, rdx                                    ; CODE XREF=fts_build+916, fts_build+922

                     loc_79c3:
00000000000079c3         cmp        qword [rax+0x58], 0x0                       ; CODE XREF=fts_build+853
00000000000079c8         js         loc_7d16

00000000000079ce         mov        rdx, qword [rax+0x30]
00000000000079d2         lea        rsi, qword [rax+0x108]
00000000000079d9         cmp        rdx, rsi
00000000000079dc         je         loc_79e9

00000000000079de         sub        rdx, qword [rax+0x38]
00000000000079e2         add        rdx, rcx
00000000000079e5         mov        qword [rax+0x30], rdx

                     loc_79e9:
00000000000079e9         mov        rdx, qword [rax+0x10]                       ; CODE XREF=fts_build+892
00000000000079ed         mov        qword [rax+0x38], rcx
00000000000079f1         test       rdx, rdx
00000000000079f4         jne        loc_79c0

00000000000079f6         mov        rdx, qword [rax+8]
00000000000079fa         jmp        loc_79c0
00000000000079fc         align      512

                     loc_7a00:
0000000000007a00         mov        rax, qword [r13+0x38]                       ; CODE XREF=fts_build+306
0000000000007a04         mov        rdi, qword [rsp+0xa8+var_68]                ; argument "__dest" for method j_memmove
0000000000007a09         mov        qword [r13+0x30], rax
0000000000007a0d         mov        rax, qword [r13+0x60]
0000000000007a11         lea        rdx, qword [rax+1]                          ; argument "__n" for method j_memmove
0000000000007a15         call       j_memmove                                   ; memmove
0000000000007a1a         mov        eax, dword [r15+0x48]
0000000000007a1e         jmp        loc_779c
0000000000007a23         align      8

                     loc_7a28:
0000000000007a28         mov        qword [rsp+0xa8+var_98], r13                ; CODE XREF=fts_build+415
0000000000007a2d         jmp        loc_780e
0000000000007a32         align      8

                     loc_7a38:
0000000000007a38         mov        dword [r13+0x90], 0x0                       ; CODE XREF=fts_build+366
0000000000007a43         mov        eax, 0x2
0000000000007a48         jmp        loc_77ea
0000000000007a4d         align      16

                     loc_7a50:
0000000000007a50         cmp        byte [rax+0x14], 0x0                        ; CODE XREF=fts_build+526
0000000000007a54         je         loc_7a61

0000000000007a56         cmp        word [rax+0x14], 0x2e
0000000000007a5b         jne        loc_7874

                     loc_7a61:
0000000000007a61         mov        r13, qword [rsp+0xa8+var_A0]                ; CODE XREF=fts_build+1012
0000000000007a66         jmp        loc_782a
0000000000007a6b         align      16

                     loc_7a70:
0000000000007a70         and        esi, 0xfb                                   ; CODE XREF=fts_build+347
0000000000007a76         je         loc_77c1

0000000000007a7c         mov        eax, 0xb
0000000000007a81         cmp        edx, 0xb
0000000000007a84         mov        word [r13+0x70], ax
0000000000007a89         jbe        loc_8016

0000000000007a8f         mov        dword [r13+0x90], 0x0
0000000000007a9a         mov        eax, 0x1
0000000000007a9f         jmp        loc_77ea
0000000000007aa4         align      8

                     loc_7aa8:
0000000000007aa8         xor        edx, edx                                    ; CODE XREF=fts_build+326
0000000000007aaa         mov        rsi, r13
0000000000007aad         mov        rdi, r15
0000000000007ab0         call       fts_stat                                    ; fts_stat
0000000000007ab5         mov        word [r13+0x70], ax
0000000000007aba         jmp        loc_77f1
0000000000007abf         align      64

                     loc_7ac0:
0000000000007ac0         movzx      eax, byte [rsp+0xa8+var_4B]                 ; CODE XREF=fts_build+633
0000000000007ac5         jmp        loc_78f4
0000000000007aca         align      16

                     loc_7ad0:
0000000000007ad0         mov        eax, dword [rdi+0x48]                       ; CODE XREF=fts_build+52
0000000000007ad3         mov        edx, eax
0000000000007ad5         and        edx, 0x10
0000000000007ad8         je         loc_7ae7

0000000000007ada         test       al, 0x1
0000000000007adc         mov        edx, 0x20000
0000000000007ae1         jne        loc_7be8

                     loc_7ae7:
0000000000007ae7         and        eax, 0x204                                  ; CODE XREF=fts_build+1144, fts_build+1429
0000000000007aec         mov        rsi, qword [rbp+0x30]
0000000000007af0         mov        edi, 0xffffff9c
0000000000007af5         cmp        eax, 0x200
0000000000007afa         jne        loc_7b00

0000000000007afc         mov        edi, dword [r15+0x2c]

                     loc_7b00:
0000000000007b00         lea        rcx, qword [rsp+0xa8+var_44]                ; CODE XREF=fts_build+1178
0000000000007b05         call       opendirat                                   ; opendirat
0000000000007b0a         test       rax, rax
0000000000007b0d         mov        qword [rbp+0x18], rax
0000000000007b11         je         loc_7e30

0000000000007b17         cmp        word [rbp+0x70], 0xb
0000000000007b1c         je         loc_7eb0

0000000000007b22         mov        edi, dword [r15+0x48]
0000000000007b26         test       edi, 0x100
0000000000007b2c         jne        loc_7c50

                     loc_7b32:
0000000000007b32         cmp        qword [r15+0x40], 0x1                       ; CODE XREF=fts_build+1565, fts_build+2145
0000000000007b37         sbb        rax, rax
0000000000007b3a         and        eax, 0x186a1
0000000000007b3f         sub        rax, 0x1
0000000000007b43         cmp        dword [rsp+0xa8+var_50], 0x2
0000000000007b48         mov        qword [rsp+0xa8+var_70], rax
0000000000007b4d         je         loc_7ea0

0000000000007b53         mov        edx, dword [r15+0x48]
0000000000007b57         mov        eax, dword [rsp+0xa8+var_44]
0000000000007b5b         and        edx, 0x38
0000000000007b5e         cmp        edx, 0x18
0000000000007b61         je         loc_7f04

                     loc_7b67:
0000000000007b67         cmp        dword [rsp+0xa8+var_50], 0x3                ; CODE XREF=fts_build+2220, fts_build+2244
0000000000007b6c         mov        r12d, 0x1
0000000000007b72         sete       bl

                     loc_7b75:
0000000000007b75         test       byte [r15+0x49], 0x2                        ; CODE XREF=fts_build+2389
0000000000007b7a         jne        loc_7f5c

                     loc_7b80:
0000000000007b80         test       eax, eax                                    ; CODE XREF=fts_build+2323
0000000000007b82         jns        loc_7ee8

                     loc_7b88:
0000000000007b88         test       bl, bl                                      ; CODE XREF=fts_build+2201
0000000000007b8a         je         loc_7b9b

0000000000007b8c         test       r12b, r12b
0000000000007b8f         je         loc_7b9b

0000000000007b91         call       j___errno_location                          ; __errno_location
0000000000007b96         mov        eax, dword [rax]
0000000000007b98         mov        dword [rbp+0x40], eax

                     loc_7b9b:
0000000000007b9b         or         word [rbp+0x72], 0x1                        ; CODE XREF=fts_build+1322, fts_build+1327
0000000000007ba0         mov        rdi, qword [rbp+0x18]                       ; argument "__dirp" for method j_closedir
0000000000007ba4         call       j_closedir                                  ; closedir
0000000000007ba9         mov        edi, dword [r15+0x48]
0000000000007bad         mov        qword [rbp+0x18], 0x0
0000000000007bb5         test       edi, 0x200
0000000000007bbb         je         loc_7bd0

0000000000007bbd         mov        eax, dword [rsp+0xa8+var_44]
0000000000007bc1         test       eax, eax
0000000000007bc3         js         loc_7bd0

0000000000007bc5         mov        edi, eax                                    ; argument "__fd" for method j_close
0000000000007bc7         call       j_close                                     ; close
0000000000007bcc         mov        edi, dword [r15+0x48]

                     loc_7bd0:
0000000000007bd0         mov        qword [rbp+0x18], 0x0                       ; CODE XREF=fts_build+1371, fts_build+1379
0000000000007bd8         mov        byte [rsp+0xa8+var_49], 0x0
0000000000007bdd         jmp        loc_76cb
0000000000007be2         align      8

                     loc_7be8:
0000000000007be8         xor        edx, edx                                    ; CODE XREF=fts_build+1153
0000000000007bea         cmp        qword [rbp+0x58], 0x0
0000000000007bef         setne      dl
0000000000007bf2         shl        edx, 0x11
0000000000007bf5         jmp        loc_7ae7
0000000000007bfa         align      1024

                     loc_7c00:
0000000000007c00         mov        rdi, qword [rbp+0x18]                       ; argument "__dirp" for method j_closedir, CODE XREF=fts_build+72
0000000000007c04         call       j_closedir                                  ; closedir
0000000000007c09         cmp        dword [rsp+0xa8+var_50], 0x3
0000000000007c0e         mov        qword [rbp+0x18], 0x0
0000000000007c16         je         loc_7e3b

                     loc_7c1c:
0000000000007c1c         mov        qword [rsp+0xa8+var_98], 0x0                ; CODE XREF=fts_build+2005, fts_build+2032

                     loc_7c25:
0000000000007c25         mov        rbx, qword [rsp+0xa8+var_40]                ; CODE XREF=fts_build+1591, fts_build+1692, fts_build+1798, fts_build+1808, fts_build+1835, fts_build+1907, fts_build+2080, fts_build+2295, fts_build+2476
0000000000007c2a         xor        rbx, qword [fs:0x28]
0000000000007c33         mov        rax, qword [rsp+0xa8+var_98]
0000000000007c38         jne        loc_8011

0000000000007c3e         add        rsp, 0x78
0000000000007c42         pop        rbx
0000000000007c43         pop        rbp
0000000000007c44         pop        r12
0000000000007c46         pop        r13
0000000000007c48         pop        r14
0000000000007c4a         pop        r15
0000000000007c4c         ret
                        ; endp
0000000000007c4d         align      16

                     loc_7c50:
0000000000007c50         lea        rbx, qword [r15+0x58]                       ; CODE XREF=fts_build+1228
0000000000007c54         mov        rdx, rbp
0000000000007c57         mov        rsi, rbx
0000000000007c5a         call       leave_dir.isra.12                           ; leave_dir.isra.12
0000000000007c5f         xor        edx, edx
0000000000007c61         mov        rsi, rbp
0000000000007c64         mov        rdi, r15
0000000000007c67         call       fts_stat                                    ; fts_stat
0000000000007c6c         mov        edi, dword [r15+0x48]
0000000000007c70         mov        rdx, rbp
0000000000007c73         mov        rsi, rbx
0000000000007c76         call       enter_dir.isra.10                           ; enter_dir.isra.10
0000000000007c7b         test       al, al
0000000000007c7d         jne        loc_7b32

0000000000007c83         call       j___errno_location                          ; __errno_location
0000000000007c88         mov        qword [rsp+0xa8+var_98], 0x0
0000000000007c91         mov        dword [rax], 0xc
0000000000007c97         jmp        loc_7c25
0000000000007c99         align      32

                     loc_7ca0:
0000000000007ca0         mov        byte [rsp+0xa8+var_4A], 0x0                 ; CODE XREF=fts_build+719, fts_build+733, fts_build+745
0000000000007ca5         jmp        loc_781b
0000000000007caa         align      16

                     loc_7cb0:
0000000000007cb0         mov        rdi, r13                                    ; CODE XREF=fts_build+567, fts_build+618
0000000000007cb3         mov        rbp, qword [rsp+0xa8+var_88]
0000000000007cb8         mov        ebx, dword [r12]
0000000000007cbc         call       sub_1de0                                    ; sub_1de0
0000000000007cc1         mov        rdi, qword [rsp+0xa8+var_98]
0000000000007cc6         call       fts_lfree                                   ; fts_lfree
0000000000007ccb         mov        rdi, qword [rbp+0x18]                       ; argument "__dirp" for method j_closedir
0000000000007ccf         call       j_closedir                                  ; closedir
0000000000007cd4         mov        r9d, 0x7
0000000000007cda         mov        qword [rbp+0x18], 0x0
0000000000007ce2         mov        qword [rsp+0xa8+var_98], 0x0
0000000000007ceb         mov        word [rbp+0x70], r9w
0000000000007cf0         or         dword [r15+0x48], 0x2000
0000000000007cf8         mov        dword [r12], ebx
0000000000007cfc         jmp        loc_7c25
0000000000007d01         align      8

                     loc_7d08:
0000000000007d08         mov        rbp, rax                                    ; CODE XREF=fts_build+475

                     loc_7d0b:
0000000000007d0b         cmp        byte [rsp+0xa8+var_4B], 0x0                 ; CODE XREF=fts_build+1973, fts_build+1992
0000000000007d10         jne        loc_7978

                     loc_7d16:
0000000000007d16         test       byte [r15+0x48], 0x4                        ; CODE XREF=fts_build+786, fts_build+872
0000000000007d1b         je         loc_7d3b

0000000000007d1d         mov        rax, qword [rsp+0xa8+var_90]
0000000000007d22         cmp        qword [r15+0x30], rax
0000000000007d26         je         loc_7d2d

0000000000007d28         test       rbx, rbx
0000000000007d2b         jne        loc_7d33

                     loc_7d2d:
0000000000007d2d         sub        qword [rsp+0xa8+var_68], 0x1                ; CODE XREF=fts_build+1734

                     loc_7d33:
0000000000007d33         mov        rax, qword [rsp+0xa8+var_68]                ; CODE XREF=fts_build+1739
0000000000007d38         mov        byte [rax], 0x0

                     loc_7d3b:
0000000000007d3b         cmp        qword [rsp+0xa8+var_58], 0x0                ; CODE XREF=fts_build+1723
0000000000007d41         jne        loc_7db0

0000000000007d43         cmp        byte [rsp+0xa8+var_49], 0x0
0000000000007d48         je         loc_7db0

0000000000007d4a         cmp        dword [rsp+0xa8+var_50], 0x1
0000000000007d4f         je         loc_7d90

0000000000007d51         test       rbx, rbx
0000000000007d54         je         loc_7d90

                     loc_7d56:
0000000000007d56         cmp        byte [rsp+0xa8+var_4A], 0x0                 ; CODE XREF=fts_build+1875
0000000000007d5b         jne        loc_7e58

0000000000007d61         cmp        qword [r15+0x40], 0x0
0000000000007d66         je         loc_7c25

0000000000007d6c         cmp        rbx, 0x1
0000000000007d70         je         loc_7c25

0000000000007d76         mov        rsi, qword [rsp+0xa8+var_98]
0000000000007d7b         mov        rdx, rbx
0000000000007d7e         mov        rdi, r15
0000000000007d81         call       fts_sort                                    ; fts_sort
0000000000007d86         mov        qword [rsp+0xa8+var_98], rax
0000000000007d8b         jmp        loc_7c25

                     loc_7d90:
0000000000007d90         cmp        qword [rbp+0x58], 0x0                       ; CODE XREF=fts_build+1775, fts_build+1780
0000000000007d95         jne        loc_7ec6

0000000000007d9b         mov        rdi, r15
0000000000007d9e         call       restore_initial_cwd                         ; restore_initial_cwd
0000000000007da3         test       eax, eax
0000000000007da5         setne      al

                     loc_7da8:
0000000000007da8         test       al, al                                      ; CODE XREF=fts_build+2179
0000000000007daa         jne        loc_7f33

                     loc_7db0:
0000000000007db0         test       rbx, rbx                                    ; CODE XREF=fts_build+1761, fts_build+1768
0000000000007db3         jne        loc_7d56

0000000000007db5         cmp        dword [rsp+0xa8+var_50], 0x3
0000000000007dba         je         loc_7f78

                     loc_7dc0:
0000000000007dc0         mov        rdi, qword [rsp+0xa8+var_98]                ; CODE XREF=fts_build+2336, fts_build+2346, fts_build+2361
0000000000007dc5         call       fts_lfree                                   ; fts_lfree
0000000000007dca         mov        qword [rsp+0xa8+var_98], 0x0
0000000000007dd3         jmp        loc_7c25
0000000000007dd8         align      32

                     loc_7de0:
0000000000007de0         mov        eax, dword [r12]                            ; CODE XREF=fts_build+509
0000000000007de4         mov        rbp, qword [rsp+0xa8+var_88]
0000000000007de9         test       eax, eax
0000000000007deb         je         loc_7e0e

0000000000007ded         test       rbx, rbx
0000000000007df0         mov        dword [rbp+0x40], eax
0000000000007df3         jne        loc_7f29

0000000000007df9         cmp        qword [rsp+0xa8+var_58], 0x0
0000000000007dff         mov        eax, 0x4
0000000000007e04         jne        loc_7f29

                     loc_7e0a:
0000000000007e0a         mov        word [rbp+0x70], ax                         ; CODE XREF=fts_build+2254

                     loc_7e0e:
0000000000007e0e         mov        rdi, qword [rbp+0x18]                       ; CODE XREF=fts_build+1931
0000000000007e12         test       rdi, rdi
0000000000007e15         je         loc_7d0b

0000000000007e1b         call       j_closedir                                  ; closedir
0000000000007e20         mov        qword [rbp+0x18], 0x0
0000000000007e28         jmp        loc_7d0b
0000000000007e2d         align      16

                     loc_7e30:
0000000000007e30         cmp        dword [rsp+0xa8+var_50], 0x3                ; CODE XREF=fts_build+1201
0000000000007e35         jne        loc_7c1c

                     loc_7e3b:
0000000000007e3b         mov        r10d, 0x4                                   ; CODE XREF=fts_build+1462
0000000000007e41         mov        word [rbp+0x70], r10w
0000000000007e46         call       j___errno_location                          ; __errno_location
0000000000007e4b         mov        eax, dword [rax]
0000000000007e4d         mov        dword [rbp+0x40], eax
0000000000007e50         jmp        loc_7c1c
0000000000007e55         align      8

                     loc_7e58:
0000000000007e58         lea        rax, qword [fts_compare_ino]                ; fts_compare_ino, CODE XREF=fts_build+1787
0000000000007e5f         mov        rsi, qword [rsp+0xa8+var_98]
0000000000007e64         mov        rdx, rbx
0000000000007e67         mov        rdi, r15
0000000000007e6a         mov        qword [r15+0x40], rax
0000000000007e6e         call       fts_sort                                    ; fts_sort
0000000000007e73         mov        qword [r15+0x40], 0x0
0000000000007e7b         mov        qword [rsp+0xa8+var_98], rax
0000000000007e80         jmp        loc_7c25
0000000000007e85         align      8

                     loc_7e88:
0000000000007e88         mov        qword [rsp+0xa8+var_70], 0x186a0            ; CODE XREF=fts_build+83
0000000000007e91         mov        byte [rsp+0xa8+var_49], 0x1
0000000000007e96         mov        edi, dword [r15+0x48]
0000000000007e9a         jmp        loc_76cb
0000000000007e9f         align      32

                     loc_7ea0:
0000000000007ea0         mov        byte [rsp+0xa8+var_49], 0x0                 ; CODE XREF=fts_build+1261, fts_build+2371
0000000000007ea5         mov        edi, dword [r15+0x48]
0000000000007ea9         jmp        loc_76cb
0000000000007eae         align      16

                     loc_7eb0:
0000000000007eb0         xor        edx, edx                                    ; CODE XREF=fts_build+1212
0000000000007eb2         mov        rsi, rbp
0000000000007eb5         mov        rdi, r15
0000000000007eb8         call       fts_stat                                    ; fts_stat
0000000000007ebd         mov        word [rbp+0x70], ax
0000000000007ec1         jmp        loc_7b32

                     loc_7ec6:
0000000000007ec6         mov        rsi, qword [rbp+8]                          ; CODE XREF=fts_build+1845
0000000000007eca         lea        rcx, qword [__PRETTY_FUNCTION__.4162+9]     ; 0xc4c9
0000000000007ed1         mov        edx, 0xffffffff
0000000000007ed6         mov        rdi, r15
0000000000007ed9         call       fts_safe_changedir                          ; fts_safe_changedir
0000000000007ede         test       eax, eax
0000000000007ee0         setne      al
0000000000007ee3         jmp        loc_7da8

                     loc_7ee8:
0000000000007ee8         xor        ecx, ecx                                    ; CODE XREF=fts_build+1314
0000000000007eea         mov        edx, eax
0000000000007eec         mov        rsi, rbp
0000000000007eef         mov        rdi, r15
0000000000007ef2         call       fts_safe_changedir                          ; fts_safe_changedir
0000000000007ef7         test       eax, eax
0000000000007ef9         jne        loc_7b88

0000000000007eff         jmp        loc_76c2

                     loc_7f04:
0000000000007f04         cmp        qword [rbp+0x88], 0x2                       ; CODE XREF=fts_build+1281
0000000000007f0c         jne        loc_7b67

0000000000007f12         mov        esi, eax
0000000000007f14         mov        rdi, rbp
0000000000007f17         call       leaf_optimization                           ; leaf_optimization
0000000000007f1c         test       eax, eax
0000000000007f1e         jne        loc_7f9e

0000000000007f20         mov        eax, dword [rsp+0xa8+var_44]
0000000000007f24         jmp        loc_7b67

                     loc_7f29:
0000000000007f29         mov        eax, 0x7                                    ; CODE XREF=fts_build+1939, fts_build+1956
0000000000007f2e         jmp        loc_7e0a

                     loc_7f33:
0000000000007f33         mov        edi, 0x7                                    ; CODE XREF=fts_build+1866
0000000000007f38         mov        word [rbp+0x70], di
0000000000007f3c         or         dword [r15+0x48], 0x2000
0000000000007f44         mov        rdi, qword [rsp+0xa8+var_98]
0000000000007f49         call       fts_lfree                                   ; fts_lfree
0000000000007f4e         mov        qword [rsp+0xa8+var_98], 0x0
0000000000007f57         jmp        loc_7c25

                     loc_7f5c:
0000000000007f5c         mov        edi, eax                                    ; CODE XREF=fts_build+1306
0000000000007f5e         mov        edx, 0x3
0000000000007f63         mov        esi, 0x406
0000000000007f68         xor        eax, eax
0000000000007f6a         call       rpl_fcntl                                   ; rpl_fcntl
0000000000007f6f         mov        dword [rsp+0xa8+var_44], eax
0000000000007f73         jmp        loc_7b80

                     loc_7f78:
0000000000007f78         movzx      eax, word [rbp+0x70]                        ; CODE XREF=fts_build+1882
0000000000007f7c         cmp        ax, 0x7
0000000000007f80         je         loc_7dc0

0000000000007f86         cmp        ax, 0x4
0000000000007f8a         je         loc_7dc0

0000000000007f90         mov        esi, 0x6
0000000000007f95         mov        word [rbp+0x70], si
0000000000007f99         jmp        loc_7dc0

                     loc_7f9e:
0000000000007f9e         cmp        dword [rsp+0xa8+var_50], 0x3                ; CODE XREF=fts_build+2238
0000000000007fa3         jne        loc_7ea0

0000000000007fa9         mov        eax, dword [rsp+0xa8+var_44]
0000000000007fad         xor        r12d, r12d
0000000000007fb0         mov        ebx, 0x1
0000000000007fb5         jmp        loc_7b75
0000000000007fba         align      64

                     loc_7fc0:
0000000000007fc0         mov        rdi, r13                                    ; CODE XREF=fts_build+256
0000000000007fc3         mov        rbp, qword [rsp+0xa8+var_88]
0000000000007fc8         call       sub_1de0                                    ; sub_1de0
0000000000007fcd         mov        rdi, qword [rsp+0xa8+var_98]
0000000000007fd2         call       fts_lfree                                   ; fts_lfree
0000000000007fd7         mov        rdi, qword [rbp+0x18]                       ; argument "__dirp" for method j_closedir
0000000000007fdb         call       j_closedir                                  ; closedir
0000000000007fe0         mov        r8d, 0x7
0000000000007fe6         mov        qword [rbp+0x18], 0x0
0000000000007fee         mov        qword [rsp+0xa8+var_98], 0x0
0000000000007ff7         mov        word [rbp+0x70], r8w
0000000000007ffc         or         dword [r15+0x48], 0x2000
0000000000008004         mov        dword [r12], 0x24
000000000000800c         jmp        loc_7c25

                     loc_8011:
0000000000008011         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=fts_build+1496
                        ; endp

                     loc_8016:
0000000000008016         lea        rax, qword [CSWTCH.53]                      ; CSWTCH.53, CODE XREF=fts_build+1065
000000000000801d         mov        eax, dword [rax+rdx*4]
0000000000008020         mov        dword [r13+0x90], eax
0000000000008027         mov        eax, 0x1
000000000000802c         jmp        loc_77ea
0000000000008031         align      64                                          ; End of unwind block (FDE at 0xd9f0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_41: int8_t, -65
        ;    var_42: int8_t, -66
        ;    var_50: int64_t, -80


                     rpl_fts_open:
0000000000008040         push       r15                                         ; Begin of unwind block (FDE at 0xda40), CODE XREF=xfts_open+10
0000000000008042         push       r14
0000000000008044         push       r13
0000000000008046         push       r12
0000000000008048         push       rbp
0000000000008049         push       rbx
000000000000804a         sub        rsp, 0x28
000000000000804e         test       esi, 0xfffff000
0000000000008054         jne        loc_83d8

000000000000805a         mov        eax, esi
000000000000805c         mov        ebp, esi
000000000000805e         and        eax, 0x204
0000000000008063         cmp        eax, 0x204
0000000000008068         je         loc_83d8

000000000000806e         test       sil, 0x12
0000000000008072         je         loc_83d8

0000000000008078         mov        r13, rdi
000000000000807b         mov        esi, 0x1                                    ; argument "__size" for method j_calloc
0000000000008080         mov        edi, 0x80                                   ; argument "__nmemb" for method j_calloc
0000000000008085         mov        r14, rdx
0000000000008088         call       j_calloc                                    ; calloc
000000000000808d         test       rax, rax
0000000000008090         mov        rbx, rax
0000000000008093         je         loc_82ee

0000000000008099         test       bpl, 0x2
000000000000809d         mov        qword [rax+0x40], r14
00000000000080a1         jne        loc_8300

00000000000080a7         mov        rdi, qword [r13]
00000000000080ab         mov        dword [rax+0x48], ebp
00000000000080ae         mov        dword [rbx+0x2c], 0xffffff9c
00000000000080b5         test       rdi, rdi
00000000000080b8         je         loc_831f

                     loc_80be:
00000000000080be         mov        r15, r13                                    ; CODE XREF=rpl_fts_open+729
00000000000080c1         xor        r12d, r12d
00000000000080c4         nop        dword [rax]

                     loc_80c8:
00000000000080c8         call       j_strlen                                    ; strlen, CODE XREF=rpl_fts_open+158
00000000000080cd         cmp        r12, rax
00000000000080d0         cmovb      r12, rax
00000000000080d4         add        r15, 0x8
00000000000080d8         mov        rdi, qword [r15]
00000000000080db         test       rdi, rdi
00000000000080de         jne        loc_80c8

00000000000080e0         lea        rdx, qword [r12+1]
00000000000080e5         mov        eax, 0x1000
00000000000080ea         cmp        rdx, 0x1000
00000000000080f1         cmovb      rdx, rax

                     loc_80f5:
00000000000080f5         lea        rsi, qword [rbx+0x30]                       ; CODE XREF=rpl_fts_open+740
00000000000080f9         lea        rdi, qword [rbx+0x20]
00000000000080fd         call       fts_palloc.isra.2                           ; fts_palloc.isra.2
0000000000008102         test       al, al
0000000000008104         mov        byte [rsp+0x58+var_42], al
0000000000008108         je         loc_83a9

000000000000810e         mov        rsi, qword [r13]
0000000000008112         test       rsi, rsi
0000000000008115         je         loc_83c0

000000000000811b         lea        rsi, qword [aWrittenBySSAnd+27]             ; 0xc049
0000000000008122         xor        edx, edx
0000000000008124         mov        rdi, rbx
0000000000008127         call       fts_alloc                                   ; fts_alloc
000000000000812c         test       rax, rax
000000000000812f         mov        r15, rax
0000000000008132         je         loc_83a0

0000000000008138         mov        rax, 0xffffffffffffffff
000000000000813f         test       r14, r14
0000000000008142         mov        rsi, qword [r13]
0000000000008146         mov        qword [r15+0x58], rax
000000000000814a         mov        qword [r15+0x68], rax
000000000000814e         je         loc_815d

                     loc_8150:
0000000000008150         mov        eax, dword [rbx+0x48]                       ; CODE XREF=rpl_fts_open+902
0000000000008153         shr        eax, 0xa
0000000000008156         and        eax, 0x1
0000000000008159         mov        byte [rsp+0x58+var_42], al

                     loc_815d:
000000000000815d         test       rsi, rsi                                    ; CODE XREF=rpl_fts_open+270
0000000000008160         je         loc_83cc

0000000000008166         shr        ebp, 0xb
0000000000008169         mov        qword [rsp+0x58+var_40], 0x0
0000000000008172         xor        r12d, r12d
0000000000008175         xor        ebp, 0x1
0000000000008178         mov        eax, ebp
000000000000817a         xor        ebp, ebp
000000000000817c         and        eax, 0x1
000000000000817f         mov        byte [rsp+0x58+var_41], al
0000000000008183         jmp        loc_81fc
0000000000008185         align      8

                     loc_8188:
0000000000008188         mov        rdx, rax                                    ; CODE XREF=rpl_fts_open+466, rpl_fts_open+477, rpl_fts_open+488, rpl_fts_open+501, rpl_fts_open+517
000000000000818b         mov        rdi, rbx
000000000000818e         call       fts_alloc                                   ; fts_alloc
0000000000008193         test       rax, rax
0000000000008196         mov        rcx, rax
0000000000008199         je         loc_8390

000000000000819f         mov        qword [rax+0x58], 0x0
00000000000081a7         mov        qword [rax+8], r15
00000000000081ab         lea        rax, qword [rax+0x108]
00000000000081b2         test       r12, r12
00000000000081b5         mov        qword [rcx+0x30], rax
00000000000081b9         je         loc_8330

00000000000081bf         cmp        byte [rsp+0x58+var_42], 0x0
00000000000081c4         je         loc_8330

00000000000081ca         mov        esi, 0xb
00000000000081cf         test       r14, r14
00000000000081d2         mov        qword [rcx+0xa8], 0x2
00000000000081dd         mov        word [rcx+0x70], si
00000000000081e1         je         loc_8370

                     loc_81e7:
00000000000081e7         mov        qword [rcx+0x10], r12                       ; CODE XREF=rpl_fts_open+782
00000000000081eb         mov        r12, rcx

                     loc_81ee:
00000000000081ee         add        rbp, 0x1                                    ; CODE XREF=rpl_fts_open+809, rpl_fts_open+838
00000000000081f2         mov        rsi, qword [r13+rbp*8]
00000000000081f7         test       rsi, rsi
00000000000081fa         je         loc_8250

                     loc_81fc:
00000000000081fc         mov        rdi, rsi                                    ; argument "__s" for method j_strlen, CODE XREF=rpl_fts_open+323
00000000000081ff         mov        qword [rsp+0x58+var_50], rsi
0000000000008204         call       j_strlen                                    ; strlen
0000000000008209         cmp        rax, 0x2
000000000000820d         mov        rsi, qword [rsp+0x58+var_50]
0000000000008212         jbe        loc_8188

0000000000008218         cmp        byte [rsp+0x58+var_41], 0x0
000000000000821d         je         loc_8188

0000000000008223         cmp        byte [rsi+rax-1], 0x2f
0000000000008228         jne        loc_8188

000000000000822e         nop

                     loc_8230:
0000000000008230         cmp        byte [rsi+rax-2], 0x2f                      ; CODE XREF=rpl_fts_open+515
0000000000008235         jne        loc_8188

000000000000823b         sub        rax, 0x1
000000000000823f         cmp        rax, 0x1
0000000000008243         jne        loc_8230

0000000000008245         jmp        loc_8188
000000000000824a         align      16

                     loc_8250:
0000000000008250         test       r14, r14                                    ; CODE XREF=rpl_fts_open+442
0000000000008253         je         loc_826c

0000000000008255         cmp        rbp, 0x1
0000000000008259         jbe        loc_826c

000000000000825b         mov        rsi, r12
000000000000825e         mov        rdx, rbp
0000000000008261         mov        rdi, rbx
0000000000008264         call       fts_sort                                    ; fts_sort
0000000000008269         mov        r12, rax

                     loc_826c:
000000000000826c         lea        rsi, qword [aWrittenBySSAnd+27]             ; 0xc049, CODE XREF=rpl_fts_open+531, rpl_fts_open+537, rpl_fts_open+911
0000000000008273         xor        edx, edx
0000000000008275         mov        rdi, rbx
0000000000008278         call       fts_alloc                                   ; fts_alloc
000000000000827d         test       rax, rax
0000000000008280         mov        qword [rbx], rax
0000000000008283         je         loc_8390

0000000000008289         mov        edi, dword [rbx+0x48]
000000000000828c         mov        edx, 0x9
0000000000008291         lea        rsi, qword [rbx+0x58]
0000000000008295         mov        qword [rax+0x10], r12
0000000000008299         mov        word [rax+0x70], dx
000000000000829d         mov        qword [rax+0x58], 0x1
00000000000082a5         call       setup_dir.isra.4                            ; setup_dir.isra.4
00000000000082aa         test       al, al
00000000000082ac         je         loc_8390

00000000000082b2         mov        esi, dword [rbx+0x48]
00000000000082b5         test       esi, 0x204
00000000000082bb         jne        loc_82e0

00000000000082bd         mov        edi, dword [rbx+0x2c]
00000000000082c0         lea        rdx, qword [__PRETTY_FUNCTION__.4162+10]    ; 0xc4ca
00000000000082c7         call       diropen.isra.6                              ; diropen.isra.6
00000000000082cc         test       eax, eax
00000000000082ce         mov        dword [rbx+0x28], eax
00000000000082d1         jns        loc_82e0

00000000000082d3         or         dword [rbx+0x48], 0x4
00000000000082d7         nop        word [rax+rax]

                     loc_82e0:
00000000000082e0         lea        rdi, qword [rbx+0x60]                       ; CODE XREF=rpl_fts_open+635, rpl_fts_open+657
00000000000082e4         mov        esi, 0xffffffff
00000000000082e9         call       i_ring_init                                 ; i_ring_init

                     loc_82ee:
00000000000082ee         add        rsp, 0x28                                   ; CODE XREF=rpl_fts_open+83, rpl_fts_open+883, rpl_fts_open+933
00000000000082f2         mov        rax, rbx
00000000000082f5         pop        rbx
00000000000082f6         pop        rbp
00000000000082f7         pop        r12
00000000000082f9         pop        r13
00000000000082fb         pop        r14
00000000000082fd         pop        r15
00000000000082ff         ret
                        ; endp

                     loc_8300:
0000000000008300         mov        rdi, qword [r13]                            ; CODE XREF=rpl_fts_open+97
0000000000008304         mov        eax, ebp
0000000000008306         mov        dword [rbx+0x2c], 0xffffff9c
000000000000830d         and        ah, 0xfd
0000000000008310         or         eax, 0x4
0000000000008313         test       rdi, rdi
0000000000008316         mov        dword [rbx+0x48], eax
0000000000008319         jne        loc_80be

                     loc_831f:
000000000000831f         mov        edx, 0x1000                                 ; CODE XREF=rpl_fts_open+120
0000000000008324         jmp        loc_80f5
0000000000008329         align      16

                     loc_8330:
0000000000008330         xor        edx, edx                                    ; CODE XREF=rpl_fts_open+377, rpl_fts_open+388
0000000000008332         mov        rsi, rcx
0000000000008335         mov        rdi, rbx
0000000000008338         mov        qword [rsp+0x58+var_50], rcx
000000000000833d         call       fts_stat                                    ; fts_stat
0000000000008342         mov        rcx, qword [rsp+0x58+var_50]
0000000000008347         test       r14, r14
000000000000834a         mov        word [rcx+0x70], ax
000000000000834e         jne        loc_81e7

0000000000008354         test       r12, r12
0000000000008357         mov        qword [rcx+0x10], 0x0
000000000000835f         jne        loc_8378

0000000000008361         mov        qword [rsp+0x58+var_40], rcx
0000000000008366         mov        r12, rcx
0000000000008369         jmp        loc_81ee
000000000000836e         align      16

                     loc_8370:
0000000000008370         mov        qword [rcx+0x10], 0x0                       ; CODE XREF=rpl_fts_open+417

                     loc_8378:
0000000000008378         mov        rax, qword [rsp+0x58+var_40]                ; CODE XREF=rpl_fts_open+799
000000000000837d         mov        qword [rsp+0x58+var_40], rcx
0000000000008382         mov        qword [rax+0x10], rcx
0000000000008386         jmp        loc_81ee
000000000000838b         align      16

                     loc_8390:
0000000000008390         mov        rdi, r12                                    ; CODE XREF=rpl_fts_open+345, rpl_fts_open+579, rpl_fts_open+620
0000000000008393         call       fts_lfree                                   ; fts_lfree
0000000000008398         mov        rdi, r15
000000000000839b         call       sub_1de0                                    ; sub_1de0

                     loc_83a0:
00000000000083a0         mov        rdi, qword [rbx+0x20]                       ; CODE XREF=rpl_fts_open+242
00000000000083a4         call       sub_1de0                                    ; sub_1de0

                     loc_83a9:
00000000000083a9         mov        rdi, rbx                                    ; CODE XREF=rpl_fts_open+200
00000000000083ac         xor        ebx, ebx
00000000000083ae         call       sub_1de0                                    ; sub_1de0
00000000000083b3         jmp        loc_82ee
00000000000083b8         align      64

                     loc_83c0:
00000000000083c0         xor        r15d, r15d                                  ; CODE XREF=rpl_fts_open+213
00000000000083c3         test       r14, r14
00000000000083c6         jne        loc_8150

                     loc_83cc:
00000000000083cc         xor        r12d, r12d                                  ; CODE XREF=rpl_fts_open+288
00000000000083cf         jmp        loc_826c
00000000000083d4         align      8

                     loc_83d8:
00000000000083d8         call       j___errno_location                          ; __errno_location, CODE XREF=rpl_fts_open+20, rpl_fts_open+40, rpl_fts_open+50
00000000000083dd         xor        ebx, ebx
00000000000083df         mov        dword [rax], 0x16
00000000000083e5         jmp        loc_82ee
00000000000083ea         align      16                                          ; End of unwind block (FDE at 0xda40)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fts_close:
00000000000083f0         push       r12                                         ; Begin of unwind block (FDE at 0xda8c), CODE XREF=chown_files+156
00000000000083f2         push       rbp
00000000000083f3         mov        rbp, rdi
00000000000083f6         push       rbx
00000000000083f7         mov        rdi, qword [rdi]
00000000000083fa         test       rdi, rdi
00000000000083fd         je         loc_8443

00000000000083ff         cmp        qword [rdi+0x58], 0x0
0000000000008404         jns        loc_841f

0000000000008406         jmp        loc_8520
000000000000840b         align      16

                     loc_8410:
0000000000008410         call       sub_1de0                                    ; sub_1de0, CODE XREF=rpl_fts_close+54
0000000000008415         cmp        qword [rbx+0x58], 0x0
000000000000841a         mov        rdi, rbx
000000000000841d         js         loc_843b

                     loc_841f:
000000000000841f         mov        rbx, qword [rdi+0x10]                       ; CODE XREF=rpl_fts_close+20, rpl_fts_close+73
0000000000008423         test       rbx, rbx
0000000000008426         jne        loc_8410

0000000000008428         mov        rbx, qword [rdi+8]
000000000000842c         call       sub_1de0                                    ; sub_1de0
0000000000008431         cmp        qword [rbx+0x58], 0x0
0000000000008436         mov        rdi, rbx
0000000000008439         jns        loc_841f

                     loc_843b:
000000000000843b         mov        rdi, rbx                                    ; CODE XREF=rpl_fts_close+45
000000000000843e         call       sub_1de0                                    ; sub_1de0

                     loc_8443:
0000000000008443         mov        rdi, qword [rbp+8]                          ; CODE XREF=rpl_fts_close+13, rpl_fts_close+315
0000000000008447         test       rdi, rdi
000000000000844a         je         loc_8451

000000000000844c         call       fts_lfree                                   ; fts_lfree

                     loc_8451:
0000000000008451         mov        rdi, qword [rbp+0x10]                       ; CODE XREF=rpl_fts_close+90
0000000000008455         call       sub_1de0                                    ; sub_1de0
000000000000845a         mov        rdi, qword [rbp+0x20]
000000000000845e         call       sub_1de0                                    ; sub_1de0
0000000000008463         mov        eax, dword [rbp+0x48]
0000000000008466         test       ah, 0x2
0000000000008469         je         loc_84d0

000000000000846b         mov        edi, dword [rbp+0x2c]
000000000000846e         test       edi, edi
0000000000008470         jns        loc_8500

                     loc_8476:
0000000000008476         xor        ebx, ebx                                    ; CODE XREF=rpl_fts_close+226, rpl_fts_close+250, rpl_fts_close+279

                     loc_8478:
0000000000008478         lea        rdi, qword [rbp+0x60]                       ; CODE XREF=rpl_fts_close+292, rpl_fts_close+340, rpl_fts_close+348, rpl_fts_close+364
000000000000847c         call       fd_ring_clear                               ; fd_ring_clear
0000000000008481         mov        rdi, qword [rbp+0x50]
0000000000008485         test       rdi, rdi
0000000000008488         je         loc_848f

000000000000848a         call       hash_free                                   ; hash_free

                     loc_848f:
000000000000848f         test       dword [rbp+0x48], 0x102                     ; CODE XREF=rpl_fts_close+152
0000000000008496         mov        rdi, qword [rbp+0x58]
000000000000849a         je         loc_84c0

000000000000849c         test       rdi, rdi
000000000000849f         je         loc_84a6

00000000000084a1         call       hash_free                                   ; hash_free

                     loc_84a6:
00000000000084a6         mov        rdi, rbp                                    ; CODE XREF=rpl_fts_close+175, rpl_fts_close+213
00000000000084a9         call       sub_1de0                                    ; sub_1de0
00000000000084ae         test       ebx, ebx
00000000000084b0         jne        loc_8561

                     loc_84b6:
00000000000084b6         mov        eax, ebx                                    ; CODE XREF=rpl_fts_close+381
00000000000084b8         pop        rbx
00000000000084b9         pop        rbp
00000000000084ba         pop        r12
00000000000084bc         ret
                        ; endp
00000000000084bd         align      64

                     loc_84c0:
00000000000084c0         call       sub_1de0                                    ; sub_1de0, CODE XREF=rpl_fts_close+170
00000000000084c5         jmp        loc_84a6
00000000000084c7         align      16

                     loc_84d0:
00000000000084d0         test       al, 0x4                                     ; CODE XREF=rpl_fts_close+121
00000000000084d2         jne        loc_8476

00000000000084d4         mov        edi, dword [rbp+0x28]                       ; argument "__fd" for method j_fchdir
00000000000084d7         call       j_fchdir                                    ; fchdir
00000000000084dc         test       eax, eax
00000000000084de         jne        loc_8530

00000000000084e0         mov        edi, dword [rbp+0x28]                       ; argument "__fd" for method j_close
00000000000084e3         call       j_close                                     ; close
00000000000084e8         test       eax, eax
00000000000084ea         je         loc_8476

00000000000084ec         call       j___errno_location                          ; __errno_location
00000000000084f1         mov        r12, rax
00000000000084f4         jmp        loc_8558
00000000000084f6         align      256

                     loc_8500:
0000000000008500         call       j_close                                     ; close, CODE XREF=rpl_fts_close+128
0000000000008505         test       eax, eax
0000000000008507         je         loc_8476

000000000000850d         call       j___errno_location                          ; __errno_location
0000000000008512         mov        ebx, dword [rax]
0000000000008514         jmp        loc_8478
0000000000008519         align      32

                     loc_8520:
0000000000008520         mov        rbx, rdi                                    ; CODE XREF=rpl_fts_close+22
0000000000008523         mov        rdi, rbx
0000000000008526         call       sub_1de0                                    ; sub_1de0
000000000000852b         jmp        loc_8443

                     loc_8530:
0000000000008530         call       j___errno_location                          ; __errno_location, CODE XREF=rpl_fts_close+238
0000000000008535         mov        edi, dword [rbp+0x28]                       ; argument "__fd" for method j_close
0000000000008538         mov        r12, rax
000000000000853b         mov        ebx, dword [rax]
000000000000853d         call       j_close                                     ; close
0000000000008542         test       eax, eax
0000000000008544         je         loc_8478

000000000000854a         test       ebx, ebx
000000000000854c         jne        loc_8478

0000000000008552         nop        word [rax+rax]

                     loc_8558:
0000000000008558         mov        ebx, dword [r12]                            ; CODE XREF=rpl_fts_close+260
000000000000855c         jmp        loc_8478

                     loc_8561:
0000000000008561         call       j___errno_location                          ; __errno_location, CODE XREF=rpl_fts_close+192
0000000000008566         mov        dword [rax], ebx
0000000000008568         mov        ebx, 0xffffffff
000000000000856d         jmp        loc_84b6
0000000000008572         align      128                                         ; End of unwind block (FDE at 0xda8c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fts_read:
0000000000008580         push       r14                                         ; Begin of unwind block (FDE at 0xdabc), CODE XREF=sub_2b60+901, chown_files+117
0000000000008582         push       r13
0000000000008584         push       r12
0000000000008586         push       rbp
0000000000008587         push       rbx
0000000000008588         mov        rbp, qword [rdi]
000000000000858b         test       rbp, rbp
000000000000858e         je         loc_869e

0000000000008594         mov        edx, dword [rdi+0x48]
0000000000008597         test       dh, 0x20
000000000000859a         jne        loc_869e

00000000000085a0         movzx      eax, word [rbp+0x74]
00000000000085a4         mov        ebx, 0x3
00000000000085a9         mov        r12, rdi
00000000000085ac         mov        word [rbp+0x74], bx
00000000000085b0         cmp        ax, 0x1
00000000000085b4         je         loc_8800

00000000000085ba         cmp        ax, 0x2
00000000000085be         movzx      ecx, word [rbp+0x70]
00000000000085c2         je         loc_86b0

00000000000085c8         cmp        cx, 0x1
00000000000085cc         jne        loc_8600

00000000000085ce         jmp        loc_87f0
00000000000085d3         align      8

                     loc_85d8:
00000000000085d8         mov        qword [r12], rbx                            ; CODE XREF=rpl_fts_read+135
00000000000085dc         mov        rdi, rbp
00000000000085df         call       sub_1de0                                    ; sub_1de0
00000000000085e4         cmp        qword [rbx+0x58], 0x0
00000000000085e9         je         loc_8820

00000000000085ef         movzx      eax, word [rbx+0x74]
00000000000085f3         mov        rbp, rbx
00000000000085f6         cmp        ax, 0x4
00000000000085fa         jne        loc_8928

                     loc_8600:
0000000000008600         mov        rbx, qword [rbp+0x10]                       ; CODE XREF=rpl_fts_read+76, rpl_fts_read+317
0000000000008604         test       rbx, rbx
0000000000008607         jne        loc_85d8

0000000000008609         mov        rbx, qword [rbp+8]
000000000000860d         cmp        qword [rbx+0x18], 0x0
0000000000008612         jne        loc_8b80

                     loc_8618:
0000000000008618         mov        qword [r12], rbx                            ; CODE XREF=rpl_fts_read+1672
000000000000861c         mov        rdi, rbp
000000000000861f         call       sub_1de0                                    ; sub_1de0
0000000000008624         cmp        qword [rbx+0x58], 0xffffffffffffffff
0000000000008629         je         loc_8ae2

000000000000862f         cmp        word [rbx+0x70], 0xb
0000000000008634         je         loc_876f

000000000000863a         mov        rdx, qword [r12+0x20]
000000000000863f         mov        rax, qword [rbx+0x48]
0000000000008643         mov        byte [rdx+rax], 0x0
0000000000008647         cmp        qword [rbx+0x58], 0x0
000000000000864c         je         loc_8a10

0000000000008652         movzx      eax, word [rbx+0x72]
0000000000008656         test       al, 0x2
0000000000008658         je         loc_89c8

000000000000865e         mov        eax, dword [r12+0x48]
0000000000008663         mov        edi, dword [rbx+0x44]
0000000000008666         test       al, 0x4
0000000000008668         je         loc_8a6c

                     loc_866e:
000000000000866e         call       j_close                                     ; close, CODE XREF=rpl_fts_read+1287, rpl_fts_read+1708

                     loc_8673:
0000000000008673         mov        edi, dword [r12+0x48]                       ; CODE XREF=rpl_fts_read+1098, rpl_fts_read+1130, rpl_fts_read+1180

                     loc_8678:
0000000000008678         cmp        word [rbx+0x70], 0x2                        ; CODE XREF=rpl_fts_read+1162
000000000000867d         je         loc_8693

000000000000867f         mov        ecx, dword [rbx+0x40]
0000000000008682         test       ecx, ecx
0000000000008684         je         loc_8a28

000000000000868a         mov        edx, 0x7
000000000000868f         mov        word [rbx+0x70], dx

                     loc_8693:
0000000000008693         and        edi, 0x2000                                 ; CODE XREF=rpl_fts_read+253, rpl_fts_read+1219
0000000000008699         mov        rbp, rbx
000000000000869c         je         loc_871a

                     loc_869e:
000000000000869e         xor        ebp, ebp                                    ; CODE XREF=rpl_fts_read+14, rpl_fts_read+26, rpl_fts_read+1327, rpl_fts_read+1662
00000000000086a0         pop        rbx
00000000000086a1         mov        rax, rbp
00000000000086a4         pop        rbp
00000000000086a5         pop        r12
00000000000086a7         pop        r13
00000000000086a9         pop        r14
00000000000086ab         ret
                        ; endp
00000000000086ac         align      16

                     loc_86b0:
00000000000086b0         lea        eax, dword [rcx-0xc]                        ; CODE XREF=rpl_fts_read+66
00000000000086b3         cmp        ax, 0x1
00000000000086b7         jbe        loc_8730

00000000000086b9         cmp        cx, 0x1
00000000000086bd         jne        loc_8600

                     loc_86c3:
00000000000086c3         test       dl, 0x40                                    ; CODE XREF=rpl_fts_read+628
00000000000086c6         je         loc_8778

00000000000086cc         mov        rax, qword [r12+0x18]
00000000000086d1         cmp        qword [rbp+0x78], rax
00000000000086d5         je         loc_8778

                     loc_86db:
00000000000086db         test       byte [rbp+0x72], 0x2                        ; CODE XREF=rpl_fts_read+634
00000000000086df         jne        loc_8bc0

                     loc_86e5:
00000000000086e5         mov        rdi, qword [r12+8]                          ; CODE XREF=rpl_fts_read+1608
00000000000086ea         test       rdi, rdi
00000000000086ed         je         loc_86fd

00000000000086ef         call       fts_lfree                                   ; fts_lfree
00000000000086f4         mov        qword [r12+8], 0x0

                     loc_86fd:
00000000000086fd         mov        edi, dword [r12+0x48]                       ; CODE XREF=rpl_fts_read+365
0000000000008702         mov        r10d, 0x6
0000000000008708         lea        rsi, qword [r12+0x58]
000000000000870d         mov        word [rbp+0x70], r10w
0000000000008712         mov        rdx, rbp
0000000000008715         call       leave_dir.isra.12                           ; leave_dir.isra.12

                     loc_871a:
000000000000871a         pop        rbx                                         ; CODE XREF=rpl_fts_read+284, rpl_fts_read+467, rpl_fts_read+493, rpl_fts_read+864, rpl_fts_read+906, rpl_fts_read+925, rpl_fts_read+1373, rpl_fts_read+1407, rpl_fts_read+1518, rpl_fts_read+1724, rpl_fts_read+1778
000000000000871b         mov        rax, rbp
000000000000871e         pop        rbp
000000000000871f         pop        r12
0000000000008721         pop        r13
0000000000008723         pop        r14
0000000000008725         ret
                        ; endp
0000000000008726         align      16

                     loc_8730:
0000000000008730         mov        edx, 0x1                                    ; CODE XREF=rpl_fts_read+311
0000000000008735         mov        rsi, rbp
0000000000008738         call       fts_stat                                    ; fts_stat
000000000000873d         cmp        ax, 0x1
0000000000008741         mov        word [rbp+0x70], ax
0000000000008745         je         loc_8a8c

000000000000874b         cmp        ax, 0xb
000000000000874f         mov        qword [r12], rbp
0000000000008753         jne        loc_871a

0000000000008755         nop        dword [rax]

                     loc_8758:
0000000000008758         mov        rax, qword [rbp+0xa8]                       ; CODE XREF=rpl_fts_read+854
000000000000875f         cmp        rax, 0x2
0000000000008763         je         loc_8b08

0000000000008769         cmp        rax, 0x1
000000000000876d         je         loc_871a

                     loc_876f:
000000000000876f         call       j_abort                                     ; abort, CODE XREF=rpl_fts_read+180
                        ; endp
0000000000008774         align      8

                     loc_8778:
0000000000008778         mov        rdi, qword [r12+8]                          ; CODE XREF=rpl_fts_read+326, rpl_fts_read+341
000000000000877d         test       rdi, rdi
0000000000008780         je         loc_8998

0000000000008786         test       dh, 0x10
0000000000008789         jne        loc_8982

000000000000878f         mov        rcx, qword [rbp+0x30]
0000000000008793         mov        edx, 0xffffffff
0000000000008798         mov        rsi, rbp
000000000000879b         mov        rdi, r12
000000000000879e         call       fts_safe_changedir                          ; fts_safe_changedir
00000000000087a3         test       eax, eax
00000000000087a5         je         loc_8a62

00000000000087ab         call       j___errno_location                          ; __errno_location
00000000000087b0         mov        eax, dword [rax]
00000000000087b2         or         word [rbp+0x72], 0x1
00000000000087b7         mov        dword [rbp+0x40], eax
00000000000087ba         mov        rbp, qword [r12+8]
00000000000087bf         test       rbp, rbp
00000000000087c2         je         loc_89b6

00000000000087c8         mov        rax, rbp
00000000000087cb         nop        dword [rax+rax]

                     loc_87d0:
00000000000087d0         mov        rdx, qword [rax+8]                          ; CODE XREF=rpl_fts_read+611
00000000000087d4         mov        rdx, qword [rdx+0x30]
00000000000087d8         mov        qword [rax+0x30], rdx
00000000000087dc         mov        rax, qword [rax+0x10]
00000000000087e0         test       rax, rax
00000000000087e3         jne        loc_87d0

00000000000087e5         jmp        loc_89b6
00000000000087ea         align      16

                     loc_87f0:
00000000000087f0         cmp        ax, 0x4                                     ; CODE XREF=rpl_fts_read+78
00000000000087f4         jne        loc_86c3

00000000000087fa         jmp        loc_86db
00000000000087ff         align      2048

                     loc_8800:
0000000000008800         mov        rsi, rbp                                    ; CODE XREF=rpl_fts_read+52
0000000000008803         xor        edx, edx
0000000000008805         call       fts_stat                                    ; fts_stat
000000000000880a         mov        word [rbp+0x70], ax
000000000000880e         mov        rax, rbp
0000000000008811         pop        rbx
0000000000008812         pop        rbp
0000000000008813         pop        r12
0000000000008815         pop        r13
0000000000008817         pop        r14
0000000000008819         ret
                        ; endp
000000000000881a         align      32

                     loc_8820:
0000000000008820         mov        rdi, r12                                    ; CODE XREF=rpl_fts_read+105
0000000000008823         call       restore_initial_cwd                         ; restore_initial_cwd
0000000000008828         test       eax, eax
000000000000882a         jne        loc_8c31

0000000000008830         test       dword [r12+0x48], 0x102
0000000000008839         mov        rdi, qword [r12+0x58]
000000000000883e         je         loc_8978

0000000000008844         test       rdi, rdi
0000000000008847         je         loc_884e

0000000000008849         call       hash_free                                   ; hash_free

                     loc_884e:
000000000000884e         mov        rdx, qword [rbx+0x60]                       ; CODE XREF=rpl_fts_read+711, rpl_fts_read+1021
0000000000008852         lea        rbp, qword [rbx+0x108]
0000000000008859         mov        rdi, qword [r12+0x20]                       ; argument "__dest" for method j_memmove
000000000000885e         mov        rsi, rbp                                    ; argument "__src" for method j_memmove
0000000000008861         mov        qword [rbx+0x48], rdx
0000000000008865         add        rdx, 0x1                                    ; argument "__n" for method j_memmove
0000000000008869         call       j_memmove                                   ; memmove
000000000000886e         mov        esi, 0x2f                                   ; argument "__c" for method j_strrchr
0000000000008873         mov        rdi, rbp                                    ; argument "__s" for method j_strrchr
0000000000008876         call       j_strrchr                                   ; strrchr
000000000000887b         test       rax, rax
000000000000887e         je         loc_88ab

0000000000008880         cmp        rbp, rax
0000000000008883         je         loc_8a50

                     loc_8889:
0000000000008889         lea        r13, qword [rax+1]                          ; CODE XREF=rpl_fts_read+1239
000000000000888d         mov        rdi, r13                                    ; argument "__s" for method j_strlen
0000000000008890         call       j_strlen                                    ; strlen
0000000000008895         lea        rdx, qword [rax+1]                          ; argument "__n" for method j_memmove
0000000000008899         mov        r14, rax
000000000000889c         mov        rsi, r13                                    ; argument "__src" for method j_memmove
000000000000889f         mov        rdi, rbp                                    ; argument "__dest" for method j_memmove
00000000000088a2         call       j_memmove                                   ; memmove
00000000000088a7         mov        qword [rbx+0x60], r14

                     loc_88ab:
00000000000088ab         mov        rax, qword [r12+0x20]                       ; CODE XREF=rpl_fts_read+766, rpl_fts_read+1245
00000000000088b0         mov        edi, dword [r12+0x48]
00000000000088b5         lea        rsi, qword [r12+0x58]
00000000000088ba         mov        rbp, rbx
00000000000088bd         mov        qword [rbx+0x38], rax
00000000000088c1         mov        qword [rbx+0x30], rax
00000000000088c5         call       setup_dir.isra.4                            ; setup_dir.isra.4
00000000000088ca         movzx      eax, word [rbx+0x70]

                     loc_88ce:
00000000000088ce         cmp        ax, 0xb                                     ; CODE XREF=rpl_fts_read+1007, rpl_fts_read+1853
00000000000088d2         mov        qword [r12], rbp
00000000000088d6         je         loc_8758

                     loc_88dc:
00000000000088dc         cmp        ax, 0x1                                     ; CODE XREF=rpl_fts_read+1479, rpl_fts_read+1815
00000000000088e0         jne        loc_871a

                     loc_88e6:
00000000000088e6         cmp        qword [rbp+0x58], 0x0                       ; CODE XREF=rpl_fts_read+1311
00000000000088eb         jne        loc_88f6

                     loc_88ed:
00000000000088ed         mov        rax, qword [rbp+0x78]                       ; CODE XREF=rpl_fts_read+1784
00000000000088f1         mov        qword [r12+0x18], rax

                     loc_88f6:
00000000000088f6         mov        edi, dword [r12+0x48]                       ; CODE XREF=rpl_fts_read+875, rpl_fts_read+1524
00000000000088fb         lea        rsi, qword [r12+0x58]
0000000000008900         mov        rdx, rbp
0000000000008903         call       enter_dir.isra.10                           ; enter_dir.isra.10
0000000000008908         test       al, al
000000000000890a         jne        loc_871a

0000000000008910         call       j___errno_location                          ; __errno_location
0000000000008915         xor        ebp, ebp
0000000000008917         mov        dword [rax], 0xc
000000000000891d         jmp        loc_871a
0000000000008922         align      8

                     loc_8928:
0000000000008928         cmp        ax, 0x2                                     ; CODE XREF=rpl_fts_read+122
000000000000892c         je         loc_8bcd

                     loc_8932:
0000000000008932         mov        rax, qword [rbp+8]                          ; CODE XREF=rpl_fts_read+1087, rpl_fts_read+1585, rpl_fts_read+1651
0000000000008936         lea        rsi, qword [rbp+0x108]                      ; argument "__src" for method j_memmove
000000000000893d         mov        rdi, qword [rax+0x48]
0000000000008941         mov        rax, qword [rax+0x38]
0000000000008945         cmp        byte [rax+rdi-1], 0x2f
000000000000894a         lea        rdx, qword [rdi-1]
000000000000894e         cmove      rdi, rdx
0000000000008952         add        rdi, qword [r12+0x20]
0000000000008957         mov        byte [rdi], 0x2f
000000000000895a         mov        rax, qword [rbp+0x60]
000000000000895e         add        rdi, 0x1                                    ; argument "__dest" for method j_memmove
0000000000008962         lea        rdx, qword [rax+1]                          ; argument "__n" for method j_memmove
0000000000008966         call       j_memmove                                   ; memmove
000000000000896b         movzx      eax, word [rbp+0x70]
000000000000896f         jmp        loc_88ce
0000000000008974         align      8

                     loc_8978:
0000000000008978         call       sub_1de0                                    ; sub_1de0, CODE XREF=rpl_fts_read+702
000000000000897d         jmp        loc_884e

                     loc_8982:
0000000000008982         and        dh, 0xef                                    ; CODE XREF=rpl_fts_read+521
0000000000008985         mov        dword [r12+0x48], edx
000000000000898a         call       fts_lfree                                   ; fts_lfree
000000000000898f         mov        qword [r12+8], 0x0

                     loc_8998:
0000000000008998         mov        esi, 0x3                                    ; CODE XREF=rpl_fts_read+512
000000000000899d         mov        rdi, r12
00000000000089a0         call       fts_build                                   ; fts_build
00000000000089a5         test       rax, rax
00000000000089a8         mov        qword [r12+8], rax
00000000000089ad         je         loc_8aa4

00000000000089b3         mov        rbp, rax

                     loc_89b6:
00000000000089b6         mov        qword [r12+8], 0x0                          ; CODE XREF=rpl_fts_read+578, rpl_fts_read+613, rpl_fts_read+1255
00000000000089bf         jmp        loc_8932
00000000000089c4         align      8

                     loc_89c8:
00000000000089c8         test       al, 0x1                                     ; CODE XREF=rpl_fts_read+216
00000000000089ca         jne        loc_8673

00000000000089d0         mov        rsi, qword [rbx+8]
00000000000089d4         lea        rcx, qword [__PRETTY_FUNCTION__.4162+9]     ; 0xc4c9
00000000000089db         mov        edx, 0xffffffff
00000000000089e0         mov        rdi, r12
00000000000089e3         call       fts_safe_changedir                          ; fts_safe_changedir
00000000000089e8         test       eax, eax
00000000000089ea         je         loc_8673

                     loc_89f0:
00000000000089f0         call       j___errno_location                          ; __errno_location, CODE XREF=rpl_fts_read+1178
00000000000089f5         mov        edi, dword [r12+0x48]
00000000000089fa         mov        eax, dword [rax]
00000000000089fc         or         edi, 0x2000
0000000000008a02         mov        dword [rbx+0x40], eax
0000000000008a05         mov        dword [r12+0x48], edi
0000000000008a0a         jmp        loc_8678
0000000000008a0f         align      16

                     loc_8a10:
0000000000008a10         mov        rdi, r12                                    ; CODE XREF=rpl_fts_read+204
0000000000008a13         call       restore_initial_cwd                         ; restore_initial_cwd
0000000000008a18         test       eax, eax
0000000000008a1a         jne        loc_89f0

0000000000008a1c         jmp        loc_8673
0000000000008a21         align      8

                     loc_8a28:
0000000000008a28         mov        eax, 0x6                                    ; CODE XREF=rpl_fts_read+260
0000000000008a2d         lea        rsi, qword [r12+0x58]
0000000000008a32         mov        rdx, rbx
0000000000008a35         mov        word [rbx+0x70], ax
0000000000008a39         call       leave_dir.isra.12                           ; leave_dir.isra.12
0000000000008a3e         mov        edi, dword [r12+0x48]
0000000000008a43         jmp        loc_8693
0000000000008a48         align      16

                     loc_8a50:
0000000000008a50         cmp        byte [rbx+0x109], 0x0                       ; CODE XREF=rpl_fts_read+771
0000000000008a57         jne        loc_8889

0000000000008a5d         jmp        loc_88ab

                     loc_8a62:
0000000000008a62         mov        rbp, qword [r12+8]                          ; CODE XREF=rpl_fts_read+549
0000000000008a67         jmp        loc_89b6

                     loc_8a6c:
0000000000008a6c         test       ah, 0x2                                     ; CODE XREF=rpl_fts_read+232
0000000000008a6f         je         loc_8c0d

0000000000008a75         mov        esi, edi
0000000000008a77         mov        edx, 0x1
0000000000008a7c         mov        rdi, r12
0000000000008a7f         call       cwd_advance_fd                              ; cwd_advance_fd
0000000000008a84         mov        edi, dword [rbx+0x44]
0000000000008a87         jmp        loc_866e

                     loc_8a8c:
0000000000008a8c         mov        esi, dword [r12+0x48]                       ; CODE XREF=rpl_fts_read+453
0000000000008a91         test       sil, 0x4
0000000000008a95         je         loc_8c9c

0000000000008a9b         mov        qword [r12], rbp
0000000000008a9f         jmp        loc_88e6

                     loc_8aa4:
0000000000008aa4         mov        edi, dword [r12+0x48]                       ; CODE XREF=rpl_fts_read+1069
0000000000008aa9         test       edi, 0x2000
0000000000008aaf         jne        loc_869e

0000000000008ab5         mov        r9d, dword [rbp+0x40]
0000000000008ab9         test       r9d, r9d
0000000000008abc         je         loc_8ad0

0000000000008abe         cmp        word [rbp+0x70], 0x4
0000000000008ac3         je         loc_8ad0

0000000000008ac5         mov        r8d, 0x7
0000000000008acb         mov        word [rbp+0x70], r8w

                     loc_8ad0:
0000000000008ad0         lea        rsi, qword [r12+0x58]                       ; CODE XREF=rpl_fts_read+1340, rpl_fts_read+1347
0000000000008ad5         mov        rdx, rbp
0000000000008ad8         call       leave_dir.isra.12                           ; leave_dir.isra.12
0000000000008add         jmp        loc_871a

                     loc_8ae2:
0000000000008ae2         mov        rdi, rbx                                    ; CODE XREF=rpl_fts_read+169
0000000000008ae5         xor        ebp, ebp
0000000000008ae7         call       sub_1de0                                    ; sub_1de0
0000000000008aec         call       j___errno_location                          ; __errno_location
0000000000008af1         mov        dword [rax], 0x0
0000000000008af7         mov        qword [r12], 0x0
0000000000008aff         jmp        loc_871a
0000000000008b04         align      8

                     loc_8b08:
0000000000008b08         mov        rbx, qword [rbp+8]                          ; CODE XREF=rpl_fts_read+483
0000000000008b0c         cmp        qword [rbx+0x68], 0x0
0000000000008b11         jne        loc_8b24

0000000000008b13         mov        eax, dword [r12+0x48]
0000000000008b18         and        eax, 0x18
0000000000008b1b         cmp        eax, 0x18
0000000000008b1e         je         loc_8c7d

                     loc_8b24:
0000000000008b24         xor        edx, edx                                    ; CODE XREF=rpl_fts_read+1425, rpl_fts_read+1805
0000000000008b26         mov        rsi, rbp
0000000000008b29         mov        rdi, r12
0000000000008b2c         call       fts_stat                                    ; fts_stat
0000000000008b31         mov        edx, dword [rbp+0x90]
0000000000008b37         mov        word [rbp+0x70], ax
0000000000008b3b         and        edx, 0xf000
0000000000008b41         cmp        edx, 0x4000
0000000000008b47         jne        loc_88dc

0000000000008b4d         cmp        qword [rbp+0x58], 0x0
0000000000008b52         je         loc_8c6e

0000000000008b58         mov        rcx, qword [rbx+0x68]
0000000000008b5c         lea        rdx, qword [rcx-1]
0000000000008b60         cmp        rdx, 0xfffffffffffffffd
0000000000008b64         ja         loc_8b6a

0000000000008b66         mov        qword [rbx+0x68], rdx

                     loc_8b6a:
0000000000008b6a         cmp        ax, 0x1                                     ; CODE XREF=rpl_fts_read+1508
0000000000008b6e         jne        loc_871a

0000000000008b74         jmp        loc_88f6
0000000000008b79         align      128

                     loc_8b80:
0000000000008b80         mov        rax, qword [rbx+0x48]                       ; CODE XREF=rpl_fts_read+146
0000000000008b84         mov        rdx, qword [r12+0x20]
0000000000008b89         mov        esi, 0x3
0000000000008b8e         mov        qword [r12], rbx
0000000000008b92         mov        rdi, r12
0000000000008b95         mov        byte [rdx+rax], 0x0
0000000000008b99         call       fts_build                                   ; fts_build
0000000000008b9e         test       rax, rax
0000000000008ba1         mov        rbx, rax
0000000000008ba4         je         loc_8bf8

0000000000008ba6         mov        rdi, rbp
0000000000008ba9         mov        rbp, rbx
0000000000008bac         call       sub_1de0                                    ; sub_1de0
0000000000008bb1         jmp        loc_8932
0000000000008bb6         align      64

                     loc_8bc0:
0000000000008bc0         mov        edi, dword [rbp+0x44]                       ; argument "__fd" for method j_close, CODE XREF=rpl_fts_read+351
0000000000008bc3         call       j_close                                     ; close
0000000000008bc8         jmp        loc_86e5

                     loc_8bcd:
0000000000008bcd         mov        edx, 0x1                                    ; CODE XREF=rpl_fts_read+940
0000000000008bd2         mov        rsi, rbx
0000000000008bd5         mov        rdi, r12
0000000000008bd8         call       fts_stat                                    ; fts_stat
0000000000008bdd         cmp        ax, 0x1
0000000000008be1         mov        word [rbx+0x70], ax
0000000000008be5         je         loc_8c41

                     loc_8be7:
0000000000008be7         mov        esi, 0x3                                    ; CODE XREF=rpl_fts_read+1738, rpl_fts_read+1769, rpl_fts_read+1907
0000000000008bec         mov        rbp, rbx
0000000000008bef         mov        word [rbx+0x74], si
0000000000008bf3         jmp        loc_8932

                     loc_8bf8:
0000000000008bf8         test       byte [r12+0x49], 0x20                       ; CODE XREF=rpl_fts_read+1572
0000000000008bfe         jne        loc_869e

0000000000008c04         mov        rbx, qword [rbp+8]
0000000000008c08         jmp        loc_8618

                     loc_8c0d:
0000000000008c0d         call       j_fchdir                                    ; fchdir, CODE XREF=rpl_fts_read+1263
0000000000008c12         test       eax, eax
0000000000008c14         je         loc_8c29

0000000000008c16         call       j___errno_location                          ; __errno_location
0000000000008c1b         mov        eax, dword [rax]
0000000000008c1d         mov        dword [rbx+0x40], eax
0000000000008c20         or         dword [r12+0x48], 0x2000

                     loc_8c29:
0000000000008c29         mov        edi, dword [rbx+0x44]                       ; CODE XREF=rpl_fts_read+1684
0000000000008c2c         jmp        loc_866e

                     loc_8c31:
0000000000008c31         or         dword [r12+0x48], 0x2000                    ; CODE XREF=rpl_fts_read+682
0000000000008c3a         xor        ebp, ebp
0000000000008c3c         jmp        loc_871a

                     loc_8c41:
0000000000008c41         mov        esi, dword [r12+0x48]                       ; CODE XREF=rpl_fts_read+1637
0000000000008c46         test       sil, 0x4
0000000000008c4a         jne        loc_8be7

0000000000008c4c         mov        edi, dword [r12+0x2c]
0000000000008c51         lea        rdx, qword [__PRETTY_FUNCTION__.4162+10]    ; 0xc4ca
0000000000008c58         call       diropen.isra.6                              ; diropen.isra.6
0000000000008c5d         test       eax, eax
0000000000008c5f         mov        dword [rbx+0x44], eax
0000000000008c62         js         loc_8ce0

0000000000008c64         or         word [rbx+0x72], 0x2
0000000000008c69         jmp        loc_8be7

                     loc_8c6e:
0000000000008c6e         cmp        ax, 0x1                                     ; CODE XREF=rpl_fts_read+1490
0000000000008c72         jne        loc_871a

0000000000008c78         jmp        loc_88ed

                     loc_8c7d:
0000000000008c7d         mov        esi, dword [r12+0x2c]                       ; CODE XREF=rpl_fts_read+1438
0000000000008c82         mov        rdi, rbx
0000000000008c85         call       leaf_optimization                           ; leaf_optimization
0000000000008c8a         cmp        eax, 0x2
0000000000008c8d         jne        loc_8b24

0000000000008c93         movzx      eax, word [rbp+0x70]
0000000000008c97         jmp        loc_88dc

                     loc_8c9c:
0000000000008c9c         mov        edi, dword [r12+0x2c]                       ; CODE XREF=rpl_fts_read+1301
0000000000008ca1         lea        rdx, qword [__PRETTY_FUNCTION__.4162+10]    ; 0xc4ca
0000000000008ca8         call       diropen.isra.6                              ; diropen.isra.6
0000000000008cad         test       eax, eax
0000000000008caf         mov        dword [rbp+0x44], eax
0000000000008cb2         js         loc_8cc2

0000000000008cb4         or         word [rbp+0x72], 0x2
0000000000008cb9         movzx      eax, word [rbp+0x70]
0000000000008cbd         jmp        loc_88ce

                     loc_8cc2:
0000000000008cc2         call       j___errno_location                          ; __errno_location, CODE XREF=rpl_fts_read+1842
0000000000008cc7         mov        eax, dword [rax]
0000000000008cc9         mov        r11d, 0x7
0000000000008ccf         mov        word [rbp+0x70], r11w
0000000000008cd4         mov        dword [rbp+0x40], eax
0000000000008cd7         mov        qword [r12], rbp
0000000000008cdb         jmp        loc_871a

                     loc_8ce0:
0000000000008ce0         call       j___errno_location                          ; __errno_location, CODE XREF=rpl_fts_read+1762
0000000000008ce5         mov        eax, dword [rax]
0000000000008ce7         mov        edi, 0x7
0000000000008cec         mov        word [rbx+0x70], di
0000000000008cf0         mov        dword [rbx+0x40], eax
0000000000008cf3         jmp        loc_8be7
0000000000008cf8         align      256                                         ; End of unwind block (FDE at 0xdabc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fts_set:
0000000000008d00         cmp        edx, 0x4                                    ; Begin of unwind block (FDE at 0xdb20), CODE XREF=sub_2b60+536, sub_2b60+893, sub_3470+249
0000000000008d03         ja         loc_8d10

0000000000008d05         mov        word [rsi+0x74], dx
0000000000008d09         xor        eax, eax
0000000000008d0b         ret
                        ; endp
0000000000008d0c         align      16

                     loc_8d10:
0000000000008d10         sub        rsp, 0x8                                    ; CODE XREF=rpl_fts_set+3
0000000000008d14         call       j___errno_location                          ; __errno_location
0000000000008d19         mov        dword [rax], 0x16
0000000000008d1f         mov        eax, 0x1
0000000000008d24         add        rsp, 0x8
0000000000008d28         ret
                        ; endp
0000000000008d29         align      16                                          ; End of unwind block (FDE at 0xdb20)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fts_children:
0000000000008d30         push       r14                                         ; Begin of unwind block (FDE at 0xdb38)
0000000000008d32         push       r13
0000000000008d34         push       r12
0000000000008d36         push       rbp
0000000000008d37         mov        r12d, esi
0000000000008d3a         push       rbx
0000000000008d3b         mov        rbx, rdi
0000000000008d3e         call       j___errno_location                          ; __errno_location
0000000000008d43         test       r12d, 0xffffefff
0000000000008d4a         mov        r13, rax
0000000000008d4d         jne        loc_8e38

0000000000008d53         mov        rbp, qword [rbx]
0000000000008d56         mov        dword [rax], 0x0
0000000000008d5c         test       byte [rbx+0x49], 0x20
0000000000008d60         jne        loc_8de0

0000000000008d62         movzx      eax, word [rbp+0x70]
0000000000008d66         cmp        ax, 0x9
0000000000008d6a         je         loc_8dd0

0000000000008d6c         cmp        ax, 0x1
0000000000008d70         jne        loc_8de0

0000000000008d72         mov        rdi, qword [rbx+8]
0000000000008d76         test       rdi, rdi
0000000000008d79         je         loc_8d80

0000000000008d7b         call       fts_lfree                                   ; fts_lfree

                     loc_8d80:
0000000000008d80         cmp        r12d, 0x1000                                ; CODE XREF=rpl_fts_children+73
0000000000008d87         mov        r14d, 0x1
0000000000008d8d         jne        loc_8d9c

0000000000008d8f         or         dword [rbx+0x48], 0x1000
0000000000008d96         mov        r14d, 0x2

                     loc_8d9c:
0000000000008d9c         cmp        qword [rbp+0x58], 0x0                       ; CODE XREF=rpl_fts_children+93
0000000000008da1         jne        loc_8db5

0000000000008da3         mov        rax, qword [rbp+0x30]
0000000000008da7         cmp        byte [rax], 0x2f
0000000000008daa         je         loc_8db5

0000000000008dac         mov        esi, dword [rbx+0x48]
0000000000008daf         test       sil, 0x4
0000000000008db3         je         loc_8df0

                     loc_8db5:
0000000000008db5         mov        esi, r14d                                   ; CODE XREF=rpl_fts_children+113, rpl_fts_children+122
0000000000008db8         mov        rdi, rbx
0000000000008dbb         call       fts_build                                   ; fts_build
0000000000008dc0         mov        qword [rbx+8], rax

                     loc_8dc4:
0000000000008dc4         pop        rbx                                         ; CODE XREF=rpl_fts_children+256, rpl_fts_children+272, rpl_fts_children+307, rpl_fts_children+329
0000000000008dc5         pop        rbp
0000000000008dc6         pop        r12
0000000000008dc8         pop        r13
0000000000008dca         pop        r14
0000000000008dcc         ret
                        ; endp
0000000000008dcd         align      16

                     loc_8dd0:
0000000000008dd0         pop        rbx                                         ; CODE XREF=rpl_fts_children+58
0000000000008dd1         mov        rax, qword [rbp+0x10]
0000000000008dd5         pop        rbp
0000000000008dd6         pop        r12
0000000000008dd8         pop        r13
0000000000008dda         pop        r14
0000000000008ddc         ret
                        ; endp
0000000000008ddd         align      32

                     loc_8de0:
0000000000008de0         pop        rbx                                         ; CODE XREF=rpl_fts_children+48, rpl_fts_children+64
0000000000008de1         xor        eax, eax
0000000000008de3         pop        rbp
0000000000008de4         pop        r12
0000000000008de6         pop        r13
0000000000008de8         pop        r14
0000000000008dea         ret
                        ; endp
0000000000008deb         align      16

                     loc_8df0:
0000000000008df0         mov        edi, dword [rbx+0x2c]                       ; CODE XREF=rpl_fts_children+131
0000000000008df3         lea        rdx, qword [__PRETTY_FUNCTION__.4162+10]    ; 0xc4ca
0000000000008dfa         call       diropen.isra.6                              ; diropen.isra.6
0000000000008dff         test       eax, eax
0000000000008e01         mov        ebp, eax
0000000000008e03         js         loc_8e59

0000000000008e05         mov        esi, r14d
0000000000008e08         mov        rdi, rbx
0000000000008e0b         call       fts_build                                   ; fts_build
0000000000008e10         test       byte [rbx+0x49], 0x2
0000000000008e14         mov        qword [rbx+8], rax
0000000000008e18         jne        loc_8e48

0000000000008e1a         mov        edi, ebp                                    ; argument "__fd" for method j_fchdir
0000000000008e1c         call       j_fchdir                                    ; fchdir
0000000000008e21         test       eax, eax
0000000000008e23         jne        loc_8e68

0000000000008e25         mov        edi, ebp                                    ; argument "__fd" for method j_close
0000000000008e27         call       j_close                                     ; close

                     loc_8e2c:
0000000000008e2c         mov        rax, qword [rbx+8]                          ; CODE XREF=rpl_fts_children+295
0000000000008e30         jmp        loc_8dc4
0000000000008e32         align      8

                     loc_8e38:
0000000000008e38         mov        dword [rax], 0x16                           ; CODE XREF=rpl_fts_children+29
0000000000008e3e         xor        eax, eax
0000000000008e40         jmp        loc_8dc4
0000000000008e45         align      8

                     loc_8e48:
0000000000008e48         mov        edx, 0x1                                    ; CODE XREF=rpl_fts_children+232
0000000000008e4d         mov        esi, ebp
0000000000008e4f         mov        rdi, rbx
0000000000008e52         call       cwd_advance_fd                              ; cwd_advance_fd
0000000000008e57         jmp        loc_8e2c

                     loc_8e59:
0000000000008e59         mov        qword [rbx+8], 0x0                          ; CODE XREF=rpl_fts_children+211
0000000000008e61         xor        eax, eax
0000000000008e63         jmp        loc_8dc4

                     loc_8e68:
0000000000008e68         mov        ebx, dword [r13]                            ; CODE XREF=rpl_fts_children+243
0000000000008e6c         mov        edi, ebp                                    ; argument "__fd" for method j_close
0000000000008e6e         call       j_close                                     ; close
0000000000008e73         xor        eax, eax
0000000000008e75         mov        dword [r13], ebx
0000000000008e79         jmp        loc_8dc4
0000000000008e7e         align      128                                         ; End of unwind block (FDE at 0xdb38)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_34: int8_t, -52


                     rpl_mbrtowc:
0000000000008e80         push       r13                                         ; Begin of unwind block (FDE at 0xdb9c), CODE XREF=sub_4390+534
0000000000008e82         push       r12
0000000000008e84         mov        r13, rsi
0000000000008e87         push       rbp
0000000000008e88         push       rbx
0000000000008e89         mov        rbx, rdi
0000000000008e8c         mov        r12, rdx
0000000000008e8f         sub        rsp, 0x18
0000000000008e93         mov        rax, qword [fs:0x28]
0000000000008e9c         mov        qword [rsp+0x38+var_30], rax
0000000000008ea1         xor        eax, eax
0000000000008ea3         lea        rax, qword [rsp+0x38+var_34]
0000000000008ea8         test       rdi, rdi
0000000000008eab         cmove      rbx, rax
0000000000008eaf         mov        rdi, rbx                                    ; argument "__pwc" for method j_mbrtowc
0000000000008eb2         call       j_mbrtowc                                   ; mbrtowc
0000000000008eb7         cmp        rax, 0xfffffffffffffffd
0000000000008ebb         mov        rbp, rax
0000000000008ebe         jbe        loc_8ee0

0000000000008ec0         test       r12, r12
0000000000008ec3         je         loc_8ee0

0000000000008ec5         xor        edi, edi
0000000000008ec7         call       hard_locale                                 ; hard_locale
0000000000008ecc         test       al, al
0000000000008ece         jne        loc_8ee0

0000000000008ed0         movzx      eax, byte [r13]
0000000000008ed5         mov        ebp, 0x1
0000000000008eda         mov        dword [rbx], eax
0000000000008edc         nop        dword [rax]

                     loc_8ee0:
0000000000008ee0         mov        rdx, qword [rsp+0x38+var_30]                ; CODE XREF=rpl_mbrtowc+62, rpl_mbrtowc+67, rpl_mbrtowc+78
0000000000008ee5         xor        rdx, qword [fs:0x28]
0000000000008eee         mov        rax, rbp
0000000000008ef1         jne        loc_8efe

0000000000008ef3         add        rsp, 0x18
0000000000008ef7         pop        rbx
0000000000008ef8         pop        rbp
0000000000008ef9         pop        r12
0000000000008efb         pop        r13
0000000000008efd         ret
                        ; endp

                     loc_8efe:
0000000000008efe         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=rpl_mbrtowc+113
                        ; endp
0000000000008f03         align      16                                          ; End of unwind block (FDE at 0xdb9c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stream:
0000000000008f10         push       r12                                         ; Begin of unwind block (FDE at 0xdbdc), CODE XREF=close_stdout+13, close_stdout+51
0000000000008f12         push       rbp
0000000000008f13         mov        rbp, rdi
0000000000008f16         push       rbx
0000000000008f17         call       j___fpending                                ; __fpending
0000000000008f1c         mov        ebx, dword [rbp]
0000000000008f1f         mov        rdi, rbp
0000000000008f22         mov        r12, rax
0000000000008f25         call       rpl_fclose                                  ; rpl_fclose
0000000000008f2a         and        ebx, 0x20
0000000000008f2d         test       ebx, ebx
0000000000008f2f         jne        loc_8f48

0000000000008f31         test       eax, eax
0000000000008f33         je         loc_8f3f

0000000000008f35         test       r12, r12
0000000000008f38         mov        eax, 0xffffffff
0000000000008f3d         je         loc_8f78

                     loc_8f3f:
0000000000008f3f         pop        rbx                                         ; CODE XREF=close_stream+35
0000000000008f40         pop        rbp
0000000000008f41         pop        r12
0000000000008f43         ret
                        ; endp
0000000000008f44         align      8

                     loc_8f48:
0000000000008f48         test       eax, eax                                    ; CODE XREF=close_stream+31
0000000000008f4a         jne        loc_8f68

0000000000008f4c         call       j___errno_location                          ; __errno_location
0000000000008f51         mov        dword [rax], 0x0
0000000000008f57         mov        eax, 0xffffffff
0000000000008f5c         pop        rbx
0000000000008f5d         pop        rbp
0000000000008f5e         pop        r12
0000000000008f60         ret
                        ; endp
0000000000008f61         align      8

                     loc_8f68:
0000000000008f68         pop        rbx                                         ; CODE XREF=close_stream+58
0000000000008f69         mov        eax, 0xffffffff
0000000000008f6e         pop        rbp
0000000000008f6f         pop        r12
0000000000008f71         ret
                        ; endp
0000000000008f72         align      8

                     loc_8f78:
0000000000008f78         call       j___errno_location                          ; __errno_location, CODE XREF=close_stream+45
0000000000008f7d         cmp        dword [rax], 0x9
0000000000008f80         pop        rbx
0000000000008f81         pop        rbp
0000000000008f82         pop        r12
0000000000008f84         setne      al
0000000000008f87         movzx      eax, al
0000000000008f8a         neg        eax
0000000000008f8c         ret
                        ; endp
0000000000008f8d         align      16                                          ; End of unwind block (FDE at 0xdbdc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     cycle_check_init:
0000000000008f90         mov        qword [rdi+0x10], 0x0                       ; Begin of unwind block (FDE at 0xdc2c), CODE XREF=setup_dir.isra.4+87
0000000000008f98         mov        dword [rdi+0x18], 0x95f616
0000000000008f9f         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     cycle_check:
0000000000008fa0         cmp        dword [rdi+0x18], 0x95f616                  ; End of unwind block (FDE at 0xdc2c), Begin of unwind block (FDE at 0xdc40), CODE XREF=enter_dir.isra.10+136
0000000000008fa7         jne        loc_9007

0000000000008fa9         mov        rdx, qword [rdi+0x10]
0000000000008fad         mov        rcx, qword [rsi+8]
0000000000008fb1         test       rdx, rdx
0000000000008fb4         je         loc_8fd0

0000000000008fb6         cmp        qword [rdi], rcx
0000000000008fb9         je         loc_8fe8

                     loc_8fbb:
0000000000008fbb         lea        r8, qword [rdx+1]                           ; CODE XREF=cycle_check+79
0000000000008fbf         xor        eax, eax
0000000000008fc1         test       rdx, r8
0000000000008fc4         mov        qword [rdi+0x10], r8
0000000000008fc8         je         loc_9000

0000000000008fca         ret
                        ; endp
0000000000008fcc         align      16

                     loc_8fd0:
0000000000008fd0         mov        qword [rdi+0x10], 0x1                       ; CODE XREF=cycle_check+20

                     loc_8fd8:
0000000000008fd8         mov        rax, qword [rsi]                            ; CODE XREF=cycle_check+101
0000000000008fdb         mov        qword [rdi], rcx
0000000000008fde         mov        qword [rdi+8], rax
0000000000008fe2         xor        eax, eax
0000000000008fe4         ret
                        ; endp
0000000000008fe5         align      8

                     loc_8fe8:
0000000000008fe8         mov        rax, qword [rdi+8]                          ; CODE XREF=cycle_check+25
0000000000008fec         cmp        qword [rsi], rax
0000000000008fef         jne        loc_8fbb

                     loc_8ff1:
0000000000008ff1         mov        eax, 0x1                                    ; CODE XREF=cycle_check+99
0000000000008ff6         ret
                        ; endp
0000000000008ff7         align      4096

                     loc_9000:
0000000000009000         test       r8, r8                                      ; CODE XREF=cycle_check+40
0000000000009003         je         loc_8ff1

0000000000009005         jmp        loc_8fd8

                     loc_9007:
0000000000009007         lea        rcx, qword [__PRETTY_FUNCTION__.3994]       ; argument "__function" for method j___assert_fail, "cycle_check", CODE XREF=cycle_check+7
000000000000900e         lea        rsi, qword [aCoreutils831li_c510]           ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/cycle-check.c"
0000000000009015         lea        rdi, qword [aStatemagic9827]                ; argument "__assertion" for method j___assert_fail, "state->magic == 9827862"
000000000000901c         sub        rsp, 0x8
0000000000009020         mov        edx, 0x3c                                   ; argument "__line" for method j___assert_fail
0000000000009025         call       j___assert_fail                             ; __assert_fail
                        ; endp
000000000000902a         align      16                                          ; End of unwind block (FDE at 0xdc40)

                     open_safer:
0000000000009030         sub        rsp, 0x58                                   ; Begin of unwind block (FDE at 0xdc5c), CODE XREF=diropen.isra.6+35
0000000000009034         mov        qword [rsp+0x58+var_28], rdx
0000000000009039         xor        edx, edx
000000000000903b         mov        rax, qword [fs:0x28]
0000000000009044         mov        qword [rsp+0x58+var_40], rax
0000000000009049         xor        eax, eax
000000000000904b         test       sil, 0x40
000000000000904f         jne        loc_9078

                     loc_9051:
0000000000009051         xor        eax, eax                                    ; CODE XREF=open_safer+103
0000000000009053         call       j_open                                      ; open
0000000000009058         mov        edi, eax
000000000000905a         call       fd_safer                                    ; fd_safer
000000000000905f         mov        rcx, qword [rsp+0x58+var_40]
0000000000009064         xor        rcx, qword [fs:0x28]
000000000000906d         jne        loc_9099

000000000000906f         add        rsp, 0x58
0000000000009073         ret
                        ; endp
0000000000009074         align      8

                     loc_9078:
0000000000009078         lea        rax, qword [rsp+0x58+arg_0]                 ; CODE XREF=open_safer+31
000000000000907d         mov        dword [rsp+0x58+var_58], 0x10
0000000000009084         mov        edx, dword [rsp+0x58+var_28]
0000000000009088         mov        qword [rsp+0x58+var_50], rax
000000000000908d         lea        rax, qword [rsp+0x58+var_38]
0000000000009092         mov        qword [rsp+0x58+var_48], rax
0000000000009097         jmp        loc_9051

                     loc_9099:
0000000000009099         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=open_safer+61
                        ; endp
000000000000909e         align      32                                          ; End of unwind block (FDE at 0xdc5c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hard_locale:
00000000000090a0         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0xdc7c), CODE XREF=rpl_mbrtowc+71
00000000000090a4         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
00000000000090a6         call       j_setlocale                                 ; setlocale
00000000000090ab         mov        rdx, rax
00000000000090ae         mov        eax, 0x1
00000000000090b3         test       rdx, rdx
00000000000090b6         je         loc_90d5

00000000000090b8         lea        rdi, qword [__PRETTY_FUNCTION__.3994+12]    ; 0xc55c
00000000000090bf         mov        ecx, 0x2
00000000000090c4         mov        rsi, rdx
00000000000090c7         rep  cmpsb byte [rsi], byte [rdi]
00000000000090c9         seta       cl
00000000000090cc         sbb        cl, 0x0
00000000000090cf         xor        eax, eax
00000000000090d1         test       cl, cl
00000000000090d3         jne        loc_90e0

                     loc_90d5:
00000000000090d5         add        rsp, 0x8                                    ; CODE XREF=hard_locale+22
00000000000090d9         ret
                        ; endp
00000000000090da         align      32

                     loc_90e0:
00000000000090e0         lea        rdi, qword [aPosix]                         ; "POSIX", CODE XREF=hard_locale+51
00000000000090e7         mov        ecx, 0x6
00000000000090ec         mov        rsi, rdx
00000000000090ef         rep  cmpsb byte [rsi], byte [rdi]
00000000000090f1         seta       al
00000000000090f4         sbb        al, 0x0
00000000000090f6         test       al, al
00000000000090f8         setne      al
00000000000090fb         add        rsp, 0x8
00000000000090ff         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     next_prime:
0000000000009100         cmp        rdi, 0xa                                    ; End of unwind block (FDE at 0xdc7c), Begin of unwind block (FDE at 0xdc9c), CODE XREF=hash_initialize+123, hash_rehash+123
0000000000009104         mov        eax, 0xa
0000000000009109         movabs     r9, 0xaaaaaaaaaaaaaaab
0000000000009113         cmovb      rdi, rax
0000000000009117         or         rdi, 0x1
000000000000911b         cmp        rdi, 0xffffffffffffffff
000000000000911f         je         loc_918f

0000000000009121         nop        dword [rax]

                     loc_9128:
0000000000009128         mov        rax, rdi                                    ; CODE XREF=next_prime+141
000000000000912b         mov        rcx, rdi
000000000000912e         mul        r9
0000000000009131         mov        rax, rdx
0000000000009134         shr        rax, 0x1
0000000000009137         lea        rax, qword [rax+rax*2]
000000000000913b         sub        rcx, rax
000000000000913e         cmp        rdi, 0x9
0000000000009142         mov        rax, rcx
0000000000009145         jbe        loc_9180

0000000000009147         test       rcx, rcx
000000000000914a         je         loc_9185

000000000000914c         mov        r8d, 0x10
0000000000009152         mov        esi, 0x9
0000000000009157         mov        ecx, 0x3
000000000000915c         jmp        loc_9169
000000000000915e         align      32

                     loc_9160:
0000000000009160         add        r8, 0x8                                     ; CODE XREF=next_prime+126
0000000000009164         test       rdx, rdx
0000000000009167         je         loc_9185

                     loc_9169:
0000000000009169         add        rcx, 0x2                                    ; CODE XREF=next_prime+92
000000000000916d         xor        edx, edx
000000000000916f         mov        rax, rdi
0000000000009172         div        rcx
0000000000009175         add        rsi, r8
0000000000009178         cmp        rsi, rdi
000000000000917b         mov        rax, rdx
000000000000917e         jb         loc_9160

                     loc_9180:
0000000000009180         test       rax, rax                                    ; CODE XREF=next_prime+69
0000000000009183         jne        loc_918f

                     loc_9185:
0000000000009185         add        rdi, 0x2                                    ; CODE XREF=next_prime+74, next_prime+103
0000000000009189         cmp        rdi, 0xffffffffffffffff
000000000000918d         jne        loc_9128

                     loc_918f:
000000000000918f         mov        rax, rdi                                    ; CODE XREF=next_prime+31, next_prime+131
0000000000009192         ret
                        ; endp
0000000000009193         align      32                                          ; End of unwind block (FDE at 0xdc9c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     raw_hasher:
00000000000091a0         mov        rax, rdi                                    ; Begin of unwind block (FDE at 0xdcb0), DATA XREF=hash_initialize+4
00000000000091a3         xor        edx, edx
00000000000091a5         ror        rax, 0x3
00000000000091a9         div        rsi
00000000000091ac         mov        rax, rdx
00000000000091af         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     raw_comparator:
00000000000091b0         cmp        rdi, rsi                                    ; End of unwind block (FDE at 0xdcb0), Begin of unwind block (FDE at 0xdcc4), DATA XREF=hash_initialize+48
00000000000091b3         sete       al
00000000000091b6         ret
                        ; endp
00000000000091b7         align      64                                          ; End of unwind block (FDE at 0xdcc4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     safe_hasher:
00000000000091c0         push       rbx                                         ; Begin of unwind block (FDE at 0xdcd8), CODE XREF=hash_find_entry+20, transfer_entries+101, transfer_entries+175, hash_lookup+10, hash_get_next+12
00000000000091c1         mov        rbx, rdi
00000000000091c4         mov        rdi, rsi
00000000000091c7         mov        rsi, qword [rbx+0x10]
00000000000091cb         call       qword [rbx+0x30]
00000000000091ce         cmp        qword [rbx+0x10], rax
00000000000091d2         jbe        loc_91dd

00000000000091d4         shl        rax, 0x4
00000000000091d8         add        rax, qword [rbx]
00000000000091db         pop        rbx
00000000000091dc         ret
                        ; endp

                     loc_91dd:
00000000000091dd         call       j_abort                                     ; abort, CODE XREF=safe_hasher+18
                        ; endp
00000000000091e2         align      16                                          ; End of unwind block (FDE at 0xdcd8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_find_entry:
00000000000091f0         push       r14                                         ; Begin of unwind block (FDE at 0xdcf4), CODE XREF=hash_insert_if_absent+52, hash_insert_if_absent+463, hash_delete+35
00000000000091f2         push       r13
00000000000091f4         mov        r14, rdx
00000000000091f7         push       r12
00000000000091f9         push       rbp
00000000000091fa         mov        r12, rdi
00000000000091fd         push       rbx
00000000000091fe         mov        rbp, rsi
0000000000009201         mov        r13d, ecx
0000000000009204         call       safe_hasher                                 ; safe_hasher
0000000000009209         mov        qword [r14], rax
000000000000920c         mov        rsi, qword [rax]
000000000000920f         test       rsi, rsi
0000000000009212         je         loc_9300

0000000000009218         cmp        rsi, rbp
000000000000921b         mov        rbx, rax
000000000000921e         je         loc_92b3

0000000000009224         mov        rdi, rbp
0000000000009227         call       qword [r12+0x38]
000000000000922c         test       al, al
000000000000922e         jne        loc_92b0

0000000000009234         mov        rax, qword [rbx+8]
0000000000009238         test       rax, rax
000000000000923b         je         loc_9300

0000000000009241         mov        rsi, qword [rax]
0000000000009244         cmp        rbp, rsi
0000000000009247         jne        loc_9269

0000000000009249         jmp        loc_927c
000000000000924b         align      16

                     loc_9250:
0000000000009250         mov        rbx, qword [rbx+8]                          ; CODE XREF=hash_find_entry+131
0000000000009254         mov        rax, qword [rbx+8]
0000000000009258         test       rax, rax
000000000000925b         je         loc_9300

0000000000009261         mov        rsi, qword [rax]
0000000000009264         cmp        rsi, rbp
0000000000009267         je         loc_927c

                     loc_9269:
0000000000009269         mov        rdi, rbp                                    ; CODE XREF=hash_find_entry+87
000000000000926c         call       qword [r12+0x38]
0000000000009271         test       al, al
0000000000009273         je         loc_9250

0000000000009275         mov        rax, qword [rbx+8]
0000000000009279         mov        rsi, qword [rax]

                     loc_927c:
000000000000927c         test       r13b, r13b                                  ; CODE XREF=hash_find_entry+89, hash_find_entry+119
000000000000927f         je         loc_929e

0000000000009281         mov        rdx, qword [rax+8]
0000000000009285         mov        qword [rbx+8], rdx
0000000000009289         mov        qword [rax], 0x0
0000000000009290         mov        rdx, qword [r12+0x48]
0000000000009295         mov        qword [rax+8], rdx
0000000000009299         mov        qword [r12+0x48], rax

                     loc_929e:
000000000000929e         pop        rbx                                         ; CODE XREF=hash_find_entry+143, hash_find_entry+198, hash_find_entry+263
000000000000929f         mov        rax, rsi
00000000000092a2         pop        rbp
00000000000092a3         pop        r12
00000000000092a5         pop        r13
00000000000092a7         pop        r14
00000000000092a9         ret
                        ; endp
00000000000092aa         align      16

                     loc_92b0:
00000000000092b0         mov        rsi, qword [rbx]                            ; CODE XREF=hash_find_entry+62

                     loc_92b3:
00000000000092b3         test       r13b, r13b                                  ; CODE XREF=hash_find_entry+46
00000000000092b6         je         loc_929e

00000000000092b8         mov        rax, qword [rbx+8]
00000000000092bc         test       rax, rax
00000000000092bf         je         loc_92f0

00000000000092c1         movdqu     xmm0, xmmword [rax]
00000000000092c5         movups     xmmword [rbx], xmm0
00000000000092c8         mov        qword [rax], 0x0
00000000000092cf         mov        rdx, qword [r12+0x48]
00000000000092d4         mov        qword [rax+8], rdx
00000000000092d8         mov        qword [r12+0x48], rax
00000000000092dd         mov        rax, rsi
00000000000092e0         pop        rbx
00000000000092e1         pop        rbp
00000000000092e2         pop        r12
00000000000092e4         pop        r13
00000000000092e6         pop        r14
00000000000092e8         ret
                        ; endp
00000000000092e9         align      16

                     loc_92f0:
00000000000092f0         mov        qword [rbx], 0x0                            ; CODE XREF=hash_find_entry+207
00000000000092f7         jmp        loc_929e
00000000000092f9         align      256

                     loc_9300:
0000000000009300         xor        esi, esi                                    ; CODE XREF=hash_find_entry+34, hash_find_entry+75, hash_find_entry+107
0000000000009302         pop        rbx
0000000000009303         mov        rax, rsi
0000000000009306         pop        rbp
0000000000009307         pop        r12
0000000000009309         pop        r13
000000000000930b         pop        r14
000000000000930d         ret
                        ; endp
000000000000930e         align      16                                          ; End of unwind block (FDE at 0xdcf4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     check_tuning.isra.0:
0000000000009310         mov        rdx, qword [rdi]                            ; Begin of unwind block (FDE at 0xdd54), CODE XREF=hash_initialize+96, hash_initialize+283, hash_insert_if_absent+324, hash_delete+165
0000000000009313         lea        rcx, qword [default_tuning]                 ; default_tuning
000000000000931a         mov        eax, 0x1
000000000000931f         cmp        rdx, rcx
0000000000009322         je         loc_9385

0000000000009324         movss      xmm0, dword [rdx+8]
0000000000009329         ucomiss    xmm0, dword [float_c5f4]                    ; float_c5f4
0000000000009330         jbe        loc_9380

0000000000009332         movss      xmm1, dword [float_c5f8]                    ; float_c5f8
000000000000933a         ucomiss    xmm1, xmm0
000000000000933d         jbe        loc_9380

000000000000933f         movss      xmm1, dword [rdx+0xc]
0000000000009344         ucomiss    xmm1, dword [float_c5fc]                    ; float_c5fc
000000000000934b         jbe        loc_9380

000000000000934d         movss      xmm1, dword [rdx]
0000000000009351         ucomiss    xmm1, dword [float_c600]                    ; float_c600
0000000000009358         jb         loc_9380

000000000000935a         addss      xmm1, dword [float_c5f4]                    ; float_c5f4
0000000000009362         movss      xmm2, dword [rdx+4]
0000000000009367         ucomiss    xmm2, xmm1
000000000000936a         jbe        loc_9380

000000000000936c         movss      xmm3, dword [float_c604]                    ; float_c604
0000000000009374         ucomiss    xmm3, xmm2
0000000000009377         jb         loc_9380

0000000000009379         ucomiss    xmm0, xmm1
000000000000937c         ja         loc_9385

000000000000937e         nop

                     loc_9380:
0000000000009380         mov        qword [rdi], rcx                            ; CODE XREF=check_tuning.isra.0+32, check_tuning.isra.0+45, check_tuning.isra.0+59, check_tuning.isra.0+72, check_tuning.isra.0+90, check_tuning.isra.0+103
0000000000009383         xor        eax, eax

                     loc_9385:
0000000000009385         ret                                                    ; CODE XREF=check_tuning.isra.0+18, check_tuning.isra.0+108
                        ; endp
0000000000009387         align      16                                          ; End of unwind block (FDE at 0xdd54)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     transfer_entries:
0000000000009390         push       r15                                         ; Begin of unwind block (FDE at 0xdd68), CODE XREF=hash_rehash+303, hash_rehash+338, hash_rehash+359
0000000000009392         push       r14
0000000000009394         push       r13
0000000000009396         push       r12
0000000000009398         push       rbp
0000000000009399         push       rbx
000000000000939a         sub        rsp, 0x8
000000000000939e         mov        r12, qword [rsi]
00000000000093a1         cmp        r12, qword [rsi+8]
00000000000093a5         jae        loc_9488

00000000000093ab         mov        rbp, rdi
00000000000093ae         mov        r13, rsi
00000000000093b1         mov        r14d, edx
00000000000093b4         nop        dword [rax]

                     loc_93b8:
00000000000093b8         mov        r15, qword [r12]                            ; CODE XREF=transfer_entries+242
00000000000093bc         test       r15, r15
00000000000093bf         je         loc_947a

00000000000093c5         mov        rbx, qword [r12+8]
00000000000093ca         test       rbx, rbx
00000000000093cd         jne        loc_93ec

00000000000093cf         jmp        loc_942b
00000000000093d1         align      8

                     loc_93d8:
00000000000093d8         mov        rcx, qword [rax+8]                          ; CODE XREF=transfer_entries+114
00000000000093dc         test       rdx, rdx
00000000000093df         mov        qword [rbx+8], rcx
00000000000093e3         mov        qword [rax+8], rbx
00000000000093e7         mov        rbx, rdx
00000000000093ea         je         loc_9427

                     loc_93ec:
00000000000093ec         mov        r15, qword [rbx]                            ; CODE XREF=transfer_entries+61, transfer_entries+149
00000000000093ef         mov        rdi, rbp
00000000000093f2         mov        rsi, r15
00000000000093f5         call       safe_hasher                                 ; safe_hasher
00000000000093fa         cmp        qword [rax], 0x0
00000000000093fe         mov        rdx, qword [rbx+8]
0000000000009402         jne        loc_93d8

0000000000009404         mov        qword [rax], r15
0000000000009407         add        qword [rbp+0x18], 0x1
000000000000940c         test       rdx, rdx
000000000000940f         mov        qword [rbx], 0x0
0000000000009416         mov        rax, qword [rbp+0x48]
000000000000941a         mov        qword [rbx+8], rax
000000000000941e         mov        qword [rbp+0x48], rbx
0000000000009422         mov        rbx, rdx
0000000000009425         jne        loc_93ec

                     loc_9427:
0000000000009427         mov        r15, qword [r12]                            ; CODE XREF=transfer_entries+90

                     loc_942b:
000000000000942b         test       r14b, r14b                                  ; CODE XREF=transfer_entries+63
000000000000942e         mov        qword [r12+8], 0x0
0000000000009437         jne        loc_947a

0000000000009439         mov        rsi, r15
000000000000943c         mov        rdi, rbp
000000000000943f         call       safe_hasher                                 ; safe_hasher
0000000000009444         cmp        qword [rax], 0x0
0000000000009448         mov        rbx, rax
000000000000944b         je         loc_94a0

000000000000944d         mov        rax, qword [rbp+0x48]
0000000000009451         test       rax, rax
0000000000009454         je         loc_94b0

0000000000009456         mov        rdx, qword [rax+8]
000000000000945a         mov        qword [rbp+0x48], rdx

                     loc_945e:
000000000000945e         mov        rdx, qword [rbx+8]                          ; CODE XREF=transfer_entries+301
0000000000009462         mov        qword [rax], r15
0000000000009465         mov        qword [rax+8], rdx
0000000000009469         mov        qword [rbx+8], rax

                     loc_946d:
000000000000946d         mov        qword [r12], 0x0                            ; CODE XREF=transfer_entries+280
0000000000009475         sub        qword [r13+0x18], 0x1

                     loc_947a:
000000000000947a         add        r12, 0x10                                   ; CODE XREF=transfer_entries+47, transfer_entries+167
000000000000947e         cmp        qword [r13+8], r12
0000000000009482         ja         loc_93b8

                     loc_9488:
0000000000009488         add        rsp, 0x8                                    ; CODE XREF=transfer_entries+21
000000000000948c         mov        eax, 0x1
0000000000009491         pop        rbx
0000000000009492         pop        rbp
0000000000009493         pop        r12
0000000000009495         pop        r13
0000000000009497         pop        r14
0000000000009499         pop        r15
000000000000949b         ret
                        ; endp
000000000000949c         align      32

                     loc_94a0:
00000000000094a0         mov        qword [rax], r15                            ; CODE XREF=transfer_entries+187
00000000000094a3         add        qword [rbp+0x18], 0x1
00000000000094a8         jmp        loc_946d
00000000000094aa         align      16

                     loc_94b0:
00000000000094b0         mov        edi, 0x10                                   ; argument "__size" for method j_malloc, CODE XREF=transfer_entries+196
00000000000094b5         call       j_malloc                                    ; malloc
00000000000094ba         test       rax, rax
00000000000094bd         jne        loc_945e

00000000000094bf         add        rsp, 0x8
00000000000094c3         xor        eax, eax
00000000000094c5         pop        rbx
00000000000094c6         pop        rbp
00000000000094c7         pop        r12
00000000000094c9         pop        r13
00000000000094cb         pop        r14
00000000000094cd         pop        r15
00000000000094cf         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_get_n_buckets:
00000000000094d0         mov        rax, qword [rdi+0x10]                       ; End of unwind block (FDE at 0xdd68), Begin of unwind block (FDE at 0xddc8)
00000000000094d4         ret
                        ; endp
00000000000094d5         align      32                                          ; End of unwind block (FDE at 0xddc8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_get_n_buckets_used:
00000000000094e0         mov        rax, qword [rdi+0x18]                       ; Begin of unwind block (FDE at 0xdddc)
00000000000094e4         ret
                        ; endp
00000000000094e5         align      16                                          ; End of unwind block (FDE at 0xdddc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_get_n_entries:
00000000000094f0         mov        rax, qword [rdi+0x20]                       ; Begin of unwind block (FDE at 0xddf0)
00000000000094f4         ret
                        ; endp
00000000000094f5         align      256                                         ; End of unwind block (FDE at 0xddf0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_get_max_bucket_length:
0000000000009500         mov        rsi, qword [rdi]                            ; Begin of unwind block (FDE at 0xde04)
0000000000009503         mov        rdi, qword [rdi+8]
0000000000009507         xor        eax, eax
0000000000009509         cmp        rsi, rdi
000000000000950c         jae        loc_9547

000000000000950e         nop

                     loc_9510:
0000000000009510         cmp        qword [rsi], 0x0                            ; CODE XREF=hash_get_max_bucket_length+67
0000000000009514         je         loc_953c

0000000000009516         mov        rdx, qword [rsi+8]
000000000000951a         mov        ecx, 0x1
000000000000951f         test       rdx, rdx
0000000000009522         je         loc_9535

0000000000009524         nop        dword [rax]

                     loc_9528:
0000000000009528         mov        rdx, qword [rdx+8]                          ; CODE XREF=hash_get_max_bucket_length+51
000000000000952c         add        rcx, 0x1
0000000000009530         test       rdx, rdx
0000000000009533         jne        loc_9528

                     loc_9535:
0000000000009535         cmp        rax, rcx                                    ; CODE XREF=hash_get_max_bucket_length+34
0000000000009538         cmovb      rax, rcx

                     loc_953c:
000000000000953c         add        rsi, 0x10                                   ; CODE XREF=hash_get_max_bucket_length+20
0000000000009540         cmp        rsi, rdi
0000000000009543         jb         loc_9510

0000000000009545         ret
                        ; endp

                     loc_9547:
0000000000009547         ret                                                    ; CODE XREF=hash_get_max_bucket_length+12
                        ; endp
0000000000009549         align      16                                          ; End of unwind block (FDE at 0xde04)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_table_ok:
0000000000009550         mov        rcx, qword [rdi]                            ; Begin of unwind block (FDE at 0xde18)
0000000000009553         mov        r8, qword [rdi+8]
0000000000009557         xor        edx, edx
0000000000009559         xor        esi, esi
000000000000955b         cmp        rcx, r8
000000000000955e         jae        loc_9596

                     loc_9560:
0000000000009560         cmp        qword [rcx], 0x0                            ; CODE XREF=hash_table_ok+68
0000000000009564         je         loc_958d

0000000000009566         mov        rax, qword [rcx+8]
000000000000956a         add        rsi, 0x1
000000000000956e         add        rdx, 0x1
0000000000009572         test       rax, rax
0000000000009575         je         loc_958d

0000000000009577         nop        word [rax+rax]

                     loc_9580:
0000000000009580         mov        rax, qword [rax+8]                          ; CODE XREF=hash_table_ok+59
0000000000009584         add        rdx, 0x1
0000000000009588         test       rax, rax
000000000000958b         jne        loc_9580

                     loc_958d:
000000000000958d         add        rcx, 0x10                                   ; CODE XREF=hash_table_ok+20, hash_table_ok+37
0000000000009591         cmp        rcx, r8
0000000000009594         jb         loc_9560

                     loc_9596:
0000000000009596         xor        eax, eax                                    ; CODE XREF=hash_table_ok+14
0000000000009598         cmp        qword [rdi+0x18], rsi
000000000000959c         je         loc_95a0

000000000000959e         ret
                        ; endp

                     loc_95a0:
00000000000095a0         cmp        qword [rdi+0x20], rdx                       ; CODE XREF=hash_table_ok+76
00000000000095a4         sete       al
00000000000095a7         ret
                        ; endp
00000000000095a8         align      16                                          ; End of unwind block (FDE at 0xde18)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_print_statistics:
00000000000095b0         push       r13                                         ; Begin of unwind block (FDE at 0xde2c)
00000000000095b2         push       r12
00000000000095b4         mov        r12, rsi
00000000000095b7         push       rbp
00000000000095b8         push       rbx
00000000000095b9         xor        ebx, ebx
00000000000095bb         sub        rsp, 0x8
00000000000095bf         mov        rsi, qword [rdi]
00000000000095c2         mov        rcx, qword [rdi+0x20]
00000000000095c6         mov        rbp, qword [rdi+0x10]
00000000000095ca         mov        r13, qword [rdi+0x18]
00000000000095ce         mov        rdi, qword [rdi+8]
00000000000095d2         cmp        rsi, rdi
00000000000095d5         jae        loc_9615

00000000000095d7         nop        word [rax+rax]

                     loc_95e0:
00000000000095e0         cmp        qword [rsi], 0x0                            ; CODE XREF=hash_print_statistics+99
00000000000095e4         je         loc_960c

00000000000095e6         mov        rax, qword [rsi+8]
00000000000095ea         mov        edx, 0x1
00000000000095ef         test       rax, rax
00000000000095f2         je         loc_9605

00000000000095f4         nop        dword [rax]

                     loc_95f8:
00000000000095f8         mov        rax, qword [rax+8]                          ; CODE XREF=hash_print_statistics+83
00000000000095fc         add        rdx, 0x1
0000000000009600         test       rax, rax
0000000000009603         jne        loc_95f8

                     loc_9605:
0000000000009605         cmp        rbx, rdx                                    ; CODE XREF=hash_print_statistics+66
0000000000009608         cmovb      rbx, rdx

                     loc_960c:
000000000000960c         add        rsi, 0x10                                   ; CODE XREF=hash_print_statistics+52
0000000000009610         cmp        rsi, rdi
0000000000009613         jb         loc_95e0

                     loc_9615:
0000000000009615         lea        rdx, qword [aEntriesLun]                    ; "# entries:         %lu\\n", CODE XREF=hash_print_statistics+37
000000000000961c         mov        esi, 0x1
0000000000009621         mov        rdi, r12
0000000000009624         xor        eax, eax
0000000000009626         call       j___fprintf_chk                             ; __fprintf_chk
000000000000962b         lea        rdx, qword [aBucketsLun]                    ; "# buckets:         %lu\\n"
0000000000009632         xor        eax, eax
0000000000009634         mov        rcx, rbp
0000000000009637         mov        esi, 0x1
000000000000963c         mov        rdi, r12
000000000000963f         call       j___fprintf_chk                             ; __fprintf_chk
0000000000009644         test       r13, r13
0000000000009647         js         loc_96b0

0000000000009649         pxor       xmm0, xmm0
000000000000964d         test       rbp, rbp
0000000000009650         cvtsi2sd   xmm0, r13
0000000000009655         mulsd      xmm0, qword [float_c610+8]                  ; 0xc618
000000000000965d         js         loc_96d9

                     loc_965f:
000000000000965f         pxor       xmm1, xmm1                                  ; CODE XREF=hash_print_statistics+295
0000000000009663         cvtsi2sd   xmm1, rbp

                     loc_9668:
0000000000009668         divsd      xmm0, xmm1                                  ; CODE XREF=hash_print_statistics+322
000000000000966c         lea        rdx, qword [aBucketsUsedLu2]                ; "# buckets used:    %lu (%.2f%%)\\n"
0000000000009673         mov        rcx, r13
0000000000009676         mov        rdi, r12
0000000000009679         mov        esi, 0x1
000000000000967e         mov        eax, 0x1
0000000000009683         call       j___fprintf_chk                             ; __fprintf_chk
0000000000009688         add        rsp, 0x8
000000000000968c         mov        rcx, rbx
000000000000968f         mov        rdi, r12
0000000000009692         pop        rbx
0000000000009693         pop        rbp
0000000000009694         pop        r12
0000000000009696         pop        r13
0000000000009698         lea        rdx, qword [aMaxBucketLengt]                ; "max bucket length: %lu\\n"
000000000000969f         mov        esi, 0x1
00000000000096a4         xor        eax, eax
00000000000096a6         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
00000000000096ab         align      16

                     loc_96b0:
00000000000096b0         mov        rax, r13                                    ; CODE XREF=hash_print_statistics+151
00000000000096b3         mov        rdx, r13
00000000000096b6         pxor       xmm0, xmm0
00000000000096ba         shr        rax, 0x1
00000000000096bd         and        edx, 0x1
00000000000096c0         or         rax, rdx
00000000000096c3         test       rbp, rbp
00000000000096c6         cvtsi2sd   xmm0, rax
00000000000096cb         addsd      xmm0, xmm0
00000000000096cf         mulsd      xmm0, qword [float_c610+8]                  ; 0xc618
00000000000096d7         jns        loc_965f

                     loc_96d9:
00000000000096d9         mov        rax, rbp                                    ; CODE XREF=hash_print_statistics+173
00000000000096dc         pxor       xmm1, xmm1
00000000000096e0         shr        rax, 0x1
00000000000096e3         and        ebp, 0x1
00000000000096e6         or         rax, rbp
00000000000096e9         cvtsi2sd   xmm1, rax
00000000000096ee         addsd      xmm1, xmm1
00000000000096f2         jmp        loc_9668
00000000000096f7         align      256                                         ; End of unwind block (FDE at 0xde2c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_lookup:
0000000000009700         push       r12                                         ; Begin of unwind block (FDE at 0xde68), CODE XREF=filesystem_type+71
0000000000009702         push       rbp
0000000000009703         mov        r12, rdi
0000000000009706         push       rbx
0000000000009707         mov        rbp, rsi
000000000000970a         call       safe_hasher                                 ; safe_hasher
000000000000970f         mov        rsi, qword [rax]
0000000000009712         test       rsi, rsi
0000000000009715         je         loc_973d

0000000000009717         mov        rbx, rax
000000000000971a         jmp        loc_9723
000000000000971c         align      32

                     loc_9720:
0000000000009720         mov        rsi, qword [rbx]                            ; CODE XREF=hash_lookup+59

                     loc_9723:
0000000000009723         cmp        rsi, rbp                                    ; CODE XREF=hash_lookup+26
0000000000009726         je         loc_973f

0000000000009728         mov        rdi, rbp
000000000000972b         call       qword [r12+0x38]
0000000000009730         test       al, al
0000000000009732         jne        loc_9750

0000000000009734         mov        rbx, qword [rbx+8]
0000000000009738         test       rbx, rbx
000000000000973b         jne        loc_9720

                     loc_973d:
000000000000973d         xor        esi, esi                                    ; CODE XREF=hash_lookup+21

                     loc_973f:
000000000000973f         pop        rbx                                         ; CODE XREF=hash_lookup+38
0000000000009740         mov        rax, rsi
0000000000009743         pop        rbp
0000000000009744         pop        r12
0000000000009746         ret
                        ; endp
0000000000009747         align      16

                     loc_9750:
0000000000009750         mov        rsi, qword [rbx]                            ; CODE XREF=hash_lookup+50
0000000000009753         pop        rbx
0000000000009754         pop        rbp
0000000000009755         mov        rax, rsi
0000000000009758         pop        r12
000000000000975a         ret
                        ; endp
000000000000975b         align      32                                          ; End of unwind block (FDE at 0xde68)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_get_first:
0000000000009760         cmp        qword [rdi+0x20], 0x0                       ; Begin of unwind block (FDE at 0xdea0)
0000000000009765         je         loc_9793

0000000000009767         mov        rdx, qword [rdi]
000000000000976a         mov        rcx, qword [rdi+8]
000000000000976e         cmp        rdx, rcx
0000000000009771         jae        loc_9798

0000000000009773         mov        rax, qword [rdx]
0000000000009776         test       rax, rax
0000000000009779         jne        loc_9796

000000000000977b         nop        dword [rax+rax]

                     loc_9780:
0000000000009780         add        rdx, 0x10                                   ; CODE XREF=hash_get_first+47
0000000000009784         cmp        rdx, rcx
0000000000009787         jae        loc_9798

0000000000009789         mov        rax, qword [rdx]
000000000000978c         test       rax, rax
000000000000978f         je         loc_9780

0000000000009791         ret
                        ; endp

                     loc_9793:
0000000000009793         xor        eax, eax                                    ; CODE XREF=hash_get_first+5
0000000000009795         ret
                        ; endp

                     loc_9796:
0000000000009796         ret                                                    ; CODE XREF=hash_get_first+25
                        ; endp

                     loc_9798:
0000000000009798         sub        rsp, 0x8                                    ; CODE XREF=hash_get_first+17, hash_get_first+39
000000000000979c         call       j_abort                                     ; abort
                        ; endp
00000000000097a1         align      16                                          ; End of unwind block (FDE at 0xdea0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_get_next:
00000000000097b0         push       rbp                                         ; Begin of unwind block (FDE at 0xdeb4)
00000000000097b1         push       rbx
00000000000097b2         mov        rbp, rdi
00000000000097b5         mov        rbx, rsi
00000000000097b8         sub        rsp, 0x8
00000000000097bc         call       safe_hasher                                 ; safe_hasher
00000000000097c1         mov        rdx, rax
00000000000097c4         mov        rcx, rax
00000000000097c7         mov        rax, qword [rdx]
00000000000097ca         mov        rdx, qword [rdx+8]
00000000000097ce         cmp        rax, rbx
00000000000097d1         je         loc_97e9

00000000000097d3         nop        dword [rax+rax]

                     loc_97d8:
00000000000097d8         test       rdx, rdx                                    ; CODE XREF=hash_get_next+55
00000000000097db         je         loc_97ee

00000000000097dd         mov        rax, qword [rdx]
00000000000097e0         mov        rdx, qword [rdx+8]
00000000000097e4         cmp        rax, rbx
00000000000097e7         jne        loc_97d8

                     loc_97e9:
00000000000097e9         test       rdx, rdx                                    ; CODE XREF=hash_get_next+33
00000000000097ec         jne        loc_9818

                     loc_97ee:
00000000000097ee         mov        rdx, qword [rbp+8]                          ; CODE XREF=hash_get_next+43
00000000000097f2         jmp        loc_9800
00000000000097f4         align      8

                     loc_97f8:
00000000000097f8         mov        rax, qword [rcx]                            ; CODE XREF=hash_get_next+87
00000000000097fb         test       rax, rax
00000000000097fe         jne        loc_980b

                     loc_9800:
0000000000009800         add        rcx, 0x10                                   ; CODE XREF=hash_get_next+66
0000000000009804         cmp        rdx, rcx
0000000000009807         ja         loc_97f8

0000000000009809         xor        eax, eax

                     loc_980b:
000000000000980b         add        rsp, 0x8                                    ; CODE XREF=hash_get_next+78
000000000000980f         pop        rbx
0000000000009810         pop        rbp
0000000000009811         ret
                        ; endp
0000000000009812         align      8

                     loc_9818:
0000000000009818         mov        rax, qword [rdx]                            ; CODE XREF=hash_get_next+60
000000000000981b         add        rsp, 0x8
000000000000981f         pop        rbx
0000000000009820         pop        rbp
0000000000009821         ret
                        ; endp
0000000000009822         align      16                                          ; End of unwind block (FDE at 0xdeb4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_get_entries:
0000000000009830         mov        r9, qword [rdi]                             ; Begin of unwind block (FDE at 0xdee8)
0000000000009833         cmp        qword [rdi+8], r9
0000000000009837         jbe        loc_9892

0000000000009839         xor        r8d, r8d

                     loc_983c:
000000000000983c         mov        rcx, qword [r9]                             ; CODE XREF=hash_get_entries+85
000000000000983f         test       rcx, rcx
0000000000009842         je         loc_987d

0000000000009844         cmp        rdx, r8
0000000000009847         jbe        loc_9887

0000000000009849         mov        qword [rsi+r8*8], rcx
000000000000984d         mov        rcx, qword [r9+8]
0000000000009851         lea        rax, qword [r8+1]
0000000000009855         test       rcx, rcx
0000000000009858         je         loc_987a

000000000000985a         nop        word [rax+rax]

                     loc_9860:
0000000000009860         cmp        rdx, rax                                    ; CODE XREF=hash_get_entries+72
0000000000009863         je         loc_9890

0000000000009865         mov        r8, qword [rcx]
0000000000009868         add        rax, 0x1
000000000000986c         mov        qword [rsi+rax*8-8], r8
0000000000009871         mov        rcx, qword [rcx+8]
0000000000009875         test       rcx, rcx
0000000000009878         jne        loc_9860

                     loc_987a:
000000000000987a         mov        r8, rax                                     ; CODE XREF=hash_get_entries+40

                     loc_987d:
000000000000987d         add        r9, 0x10                                    ; CODE XREF=hash_get_entries+18
0000000000009881         cmp        qword [rdi+8], r9
0000000000009885         ja         loc_983c

                     loc_9887:
0000000000009887         mov        rax, r8                                     ; CODE XREF=hash_get_entries+23
000000000000988a         ret
                        ; endp
000000000000988b         align      16

                     loc_9890:
0000000000009890         ret                                                    ; CODE XREF=hash_get_entries+51
                        ; endp

                     loc_9892:
0000000000009892         xor        eax, eax                                    ; CODE XREF=hash_get_entries+7
0000000000009894         ret
                        ; endp
0000000000009895         align      32                                          ; End of unwind block (FDE at 0xdee8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_do_for_each:
00000000000098a0         push       r15                                         ; Begin of unwind block (FDE at 0xdefc)
00000000000098a2         push       r14
00000000000098a4         push       r13
00000000000098a6         push       r12
00000000000098a8         push       rbp
00000000000098a9         push       rbx
00000000000098aa         sub        rsp, 0x8
00000000000098ae         mov        r14, qword [rdi]
00000000000098b1         cmp        qword [rdi+8], r14
00000000000098b5         jbe        loc_9906

00000000000098b7         mov        r13, rdx
00000000000098ba         mov        r12, rsi
00000000000098bd         mov        r15, rdi
00000000000098c0         xor        ebp, ebp

                     loc_98c2:
00000000000098c2         mov        rdi, qword [r14]                            ; CODE XREF=hash_do_for_each+82
00000000000098c5         test       rdi, rdi
00000000000098c8         je         loc_98ea

00000000000098ca         mov        rbx, r14
00000000000098cd         jmp        loc_98d3
00000000000098cf         align      16

                     loc_98d0:
00000000000098d0         mov        rdi, qword [rbx]                            ; CODE XREF=hash_do_for_each+72

                     loc_98d3:
00000000000098d3         mov        rsi, r13                                    ; CODE XREF=hash_do_for_each+45
00000000000098d6         call       r12
00000000000098d9         test       al, al
00000000000098db         je         loc_98f4

00000000000098dd         mov        rbx, qword [rbx+8]
00000000000098e1         add        rbp, 0x1
00000000000098e5         test       rbx, rbx
00000000000098e8         jne        loc_98d0

                     loc_98ea:
00000000000098ea         add        r14, 0x10                                   ; CODE XREF=hash_do_for_each+40
00000000000098ee         cmp        qword [r15+8], r14
00000000000098f2         ja         loc_98c2

                     loc_98f4:
00000000000098f4         add        rsp, 0x8                                    ; CODE XREF=hash_do_for_each+59, hash_do_for_each+104
00000000000098f8         mov        rax, rbp
00000000000098fb         pop        rbx
00000000000098fc         pop        rbp
00000000000098fd         pop        r12
00000000000098ff         pop        r13
0000000000009901         pop        r14
0000000000009903         pop        r15
0000000000009905         ret
                        ; endp

                     loc_9906:
0000000000009906         xor        ebp, ebp                                    ; CODE XREF=hash_do_for_each+21
0000000000009908         jmp        loc_98f4
000000000000990a         align      16                                          ; End of unwind block (FDE at 0xdefc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_string:
0000000000009910         movzx      ecx, byte [rdi]                             ; Begin of unwind block (FDE at 0xdf48)
0000000000009913         xor        edx, edx
0000000000009915         test       cl, cl
0000000000009917         je         loc_993d

0000000000009919         nop        dword [rax]

                     loc_9920:
0000000000009920         mov        rax, rdx                                    ; CODE XREF=hash_string+43
0000000000009923         add        rdi, 0x1
0000000000009927         shl        rax, 0x5
000000000000992b         sub        rax, rdx
000000000000992e         xor        edx, edx
0000000000009930         add        rax, rcx
0000000000009933         movzx      ecx, byte [rdi]
0000000000009936         div        rsi
0000000000009939         test       cl, cl
000000000000993b         jne        loc_9920

                     loc_993d:
000000000000993d         mov        rax, rdx                                    ; CODE XREF=hash_string+7
0000000000009940         ret
                        ; endp
0000000000009941         align      16                                          ; End of unwind block (FDE at 0xdf48)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_reset_tuning:
0000000000009950         movabs     rax, 0x3f80000000000000                     ; Begin of unwind block (FDE at 0xdf5c)
000000000000995a         mov        byte [rdi+0x10], 0x0
000000000000995e         mov        qword [rdi], rax
0000000000009961         movabs     rax, 0x3fb4fdf43f4ccccd
000000000000996b         mov        qword [rdi+8], rax
000000000000996f         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_initialize:
0000000000009970         push       r15                                         ; End of unwind block (FDE at 0xdf5c), Begin of unwind block (FDE at 0xdf70), CODE XREF=filesystem_type+124, setup_dir.isra.4+40
0000000000009972         push       r14
0000000000009974         lea        rax, qword [raw_hasher]                     ; raw_hasher
000000000000997b         push       r13
000000000000997d         push       r12
000000000000997f         mov        r12, rdx
0000000000009982         push       rbp
0000000000009983         push       rbx
0000000000009984         mov        r13, rcx
0000000000009987         mov        rbp, rdi
000000000000998a         mov        edi, 0x50                                   ; argument "__size" for method j_malloc
000000000000998f         mov        r15, rsi
0000000000009992         sub        rsp, 0x8
0000000000009996         test       rdx, rdx
0000000000009999         mov        r14, r8
000000000000999c         cmove      r12, rax
00000000000099a0         lea        rax, qword [raw_comparator]                 ; raw_comparator
00000000000099a7         test       rcx, rcx
00000000000099aa         cmove      r13, rax
00000000000099ae         call       j_malloc                                    ; malloc
00000000000099b3         test       rax, rax
00000000000099b6         mov        rbx, rax
00000000000099b9         je         loc_9a6a

00000000000099bf         test       r15, r15
00000000000099c2         lea        rdi, qword [rax+0x28]
00000000000099c6         je         loc_9a80

00000000000099cc         mov        qword [rax+0x28], r15
00000000000099d0         call       check_tuning.isra.0                         ; check_tuning.isra.0
00000000000099d5         test       al, al
00000000000099d7         je         loc_9a60

00000000000099dd         cmp        byte [r15+0x10], 0x0
00000000000099e2         je         loc_9ae0

                     loc_99e8:
00000000000099e8         mov        rdi, rbp                                    ; CODE XREF=hash_initialize+362, hash_initialize+421
00000000000099eb         call       next_prime                                  ; next_prime
00000000000099f0         mov        edx, 0x8
00000000000099f5         mov        rbp, rax
00000000000099f8         xor        ecx, ecx
00000000000099fa         mov        rax, rdx
00000000000099fd         mul        rbp
0000000000009a00         jo         loc_9b1a

                     loc_9a06:
0000000000009a06         test       rax, rax                                    ; CODE XREF=hash_initialize+431
0000000000009a09         js         loc_9a60

0000000000009a0b         test       rcx, rcx
0000000000009a0e         jne        loc_9a60

0000000000009a10         test       rbp, rbp
0000000000009a13         mov        qword [rbx+0x10], rbp
0000000000009a17         je         loc_9a60

0000000000009a19         mov        esi, 0x10                                   ; argument "__size" for method j_calloc
0000000000009a1e         mov        rdi, rbp                                    ; argument "__nmemb" for method j_calloc
0000000000009a21         call       j_calloc                                    ; calloc
0000000000009a26         test       rax, rax
0000000000009a29         mov        qword [rbx], rax
0000000000009a2c         je         loc_9a60

0000000000009a2e         shl        rbp, 0x4
0000000000009a32         mov        qword [rbx+0x18], 0x0
0000000000009a3a         mov        qword [rbx+0x20], 0x0
0000000000009a42         add        rbp, rax
0000000000009a45         mov        qword [rbx+0x30], r12
0000000000009a49         mov        qword [rbx+0x38], r13
0000000000009a4d         mov        qword [rbx+8], rbp
0000000000009a51         mov        qword [rbx+0x40], r14
0000000000009a55         mov        qword [rbx+0x48], 0x0
0000000000009a5d         jmp        loc_9a6a
0000000000009a5f         align      32

                     loc_9a60:
0000000000009a60         mov        rdi, rbx                                    ; CODE XREF=hash_initialize+103, hash_initialize+153, hash_initialize+158, hash_initialize+167, hash_initialize+188, hash_initialize+298, hash_initialize+325
0000000000009a63         xor        ebx, ebx
0000000000009a65         call       sub_1de0                                    ; sub_1de0

                     loc_9a6a:
0000000000009a6a         add        rsp, 0x8                                    ; CODE XREF=hash_initialize+73, hash_initialize+237
0000000000009a6e         mov        rax, rbx
0000000000009a71         pop        rbx
0000000000009a72         pop        rbp
0000000000009a73         pop        r12
0000000000009a75         pop        r13
0000000000009a77         pop        r14
0000000000009a79         pop        r15
0000000000009a7b         ret
                        ; endp
0000000000009a7c         align      128

                     loc_9a80:
0000000000009a80         lea        rax, qword [default_tuning]                 ; default_tuning, CODE XREF=hash_initialize+86
0000000000009a87         mov        qword [rbx+0x28], rax
0000000000009a8b         call       check_tuning.isra.0                         ; check_tuning.isra.0
0000000000009a90         test       al, al
0000000000009a92         movss      xmm1, dword [float_c608]                    ; float_c608
0000000000009a9a         je         loc_9a60

0000000000009a9c         test       rbp, rbp
0000000000009a9f         js         loc_9aeb

                     loc_9aa1:
0000000000009aa1         pxor       xmm0, xmm0                                  ; CODE XREF=hash_initialize+377
0000000000009aa5         cvtsi2ss   xmm0, rbp

                     loc_9aaa:
0000000000009aaa         divss      xmm0, xmm1                                  ; CODE XREF=hash_initialize+404
0000000000009aae         ucomiss    xmm0, dword [float_c60c]                    ; float_c60c
0000000000009ab5         jae        loc_9a60

0000000000009ab7         ucomiss    xmm0, dword [float_c610]                    ; float_c610
0000000000009abe         jb         loc_9b10

0000000000009ac0         subss      xmm0, dword [float_c610]                    ; float_c610
0000000000009ac8         movabs     rax, 0x8000000000000000
0000000000009ad2         cvttss2si  rbp, xmm0
0000000000009ad7         xor        rbp, rax
0000000000009ada         jmp        loc_99e8
0000000000009adf         align      32

                     loc_9ae0:
0000000000009ae0         test       rbp, rbp                                    ; CODE XREF=hash_initialize+114
0000000000009ae3         movss      xmm1, dword [r15+8]
0000000000009ae9         jns        loc_9aa1

                     loc_9aeb:
0000000000009aeb         mov        rax, rbp                                    ; CODE XREF=hash_initialize+303
0000000000009aee         pxor       xmm0, xmm0
0000000000009af2         shr        rax, 0x1
0000000000009af5         and        ebp, 0x1
0000000000009af8         or         rax, rbp
0000000000009afb         cvtsi2ss   xmm0, rax
0000000000009b00         addss      xmm0, xmm0
0000000000009b04         jmp        loc_9aaa
0000000000009b06         align      16

                     loc_9b10:
0000000000009b10         cvttss2si  rbp, xmm0                                   ; CODE XREF=hash_initialize+334
0000000000009b15         jmp        loc_99e8

                     loc_9b1a:
0000000000009b1a         mov        ecx, 0x1                                    ; CODE XREF=hash_initialize+144
0000000000009b1f         jmp        loc_9a06
0000000000009b24         align      16                                          ; End of unwind block (FDE at 0xdf70)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_clear:
0000000000009b30         push       r12                                         ; Begin of unwind block (FDE at 0xdfbc)
0000000000009b32         push       rbp
0000000000009b33         mov        rbp, rdi
0000000000009b36         push       rbx
0000000000009b37         mov        r12, qword [rdi]
0000000000009b3a         cmp        r12, qword [rdi+8]
0000000000009b3e         jae        loc_9bab

                     loc_9b40:
0000000000009b40         cmp        qword [r12], 0x0                            ; CODE XREF=hash_clear+121
0000000000009b45         je         loc_9ba1

0000000000009b47         mov        rbx, qword [r12+8]
0000000000009b4c         mov        rax, qword [rbp+0x40]
0000000000009b50         test       rbx, rbx
0000000000009b53         je         loc_9b85

0000000000009b55         nop        dword [rax]

                     loc_9b58:
0000000000009b58         test       rax, rax                                    ; CODE XREF=hash_clear+83
0000000000009b5b         je         loc_9b66

0000000000009b5d         mov        rdi, qword [rbx]
0000000000009b60         call       rax
0000000000009b62         mov        rax, qword [rbp+0x40]

                     loc_9b66:
0000000000009b66         mov        rdx, qword [rbx+8]                          ; CODE XREF=hash_clear+43
0000000000009b6a         mov        rcx, qword [rbp+0x48]
0000000000009b6e         mov        qword [rbx], 0x0
0000000000009b75         test       rdx, rdx
0000000000009b78         mov        qword [rbx+8], rcx
0000000000009b7c         mov        qword [rbp+0x48], rbx
0000000000009b80         mov        rbx, rdx
0000000000009b83         jne        loc_9b58

                     loc_9b85:
0000000000009b85         test       rax, rax                                    ; CODE XREF=hash_clear+35
0000000000009b88         je         loc_9b90

0000000000009b8a         mov        rdi, qword [r12]
0000000000009b8e         call       rax

                     loc_9b90:
0000000000009b90         mov        qword [r12], 0x0                            ; CODE XREF=hash_clear+88
0000000000009b98         mov        qword [r12+8], 0x0

                     loc_9ba1:
0000000000009ba1         add        r12, 0x10                                   ; CODE XREF=hash_clear+21
0000000000009ba5         cmp        qword [rbp+8], r12
0000000000009ba9         ja         loc_9b40

                     loc_9bab:
0000000000009bab         mov        qword [rbp+0x18], 0x0                       ; CODE XREF=hash_clear+14
0000000000009bb3         mov        qword [rbp+0x20], 0x0
0000000000009bbb         pop        rbx
0000000000009bbc         pop        rbp
0000000000009bbd         pop        r12
0000000000009bbf         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_free:
0000000000009bc0         push       r12                                         ; End of unwind block (FDE at 0xdfbc), Begin of unwind block (FDE at 0xdfe8), CODE XREF=rpl_fts_close+154, rpl_fts_close+177, rpl_fts_read+713
0000000000009bc2         push       rbp
0000000000009bc3         mov        r12, rdi
0000000000009bc6         push       rbx
0000000000009bc7         cmp        qword [rdi+0x40], 0x0
0000000000009bcc         mov        rbp, qword [rdi]
0000000000009bcf         mov        rax, qword [rdi+8]
0000000000009bd3         je         loc_9c23

0000000000009bd5         cmp        qword [rdi+0x20], 0x0
0000000000009bda         je         loc_9c23

0000000000009bdc         cmp        rbp, rax
0000000000009bdf         jae        loc_9c5c

0000000000009be1         nop        dword [rax]

                     loc_9be8:
0000000000009be8         mov        rdi, qword [rbp]                            ; CODE XREF=hash_free+93
0000000000009bec         test       rdi, rdi
0000000000009bef         je         loc_9c16

0000000000009bf1         mov        rbx, rbp
0000000000009bf4         jmp        loc_9c03
0000000000009bf6         align      1024

                     loc_9c00:
0000000000009c00         mov        rdi, qword [rbx]                            ; CODE XREF=hash_free+79

                     loc_9c03:
0000000000009c03         call       qword [r12+0x40]                            ; CODE XREF=hash_free+52
0000000000009c08         mov        rbx, qword [rbx+8]
0000000000009c0c         test       rbx, rbx
0000000000009c0f         jne        loc_9c00

0000000000009c11         mov        rax, qword [r12+8]

                     loc_9c16:
0000000000009c16         add        rbp, 0x10                                   ; CODE XREF=hash_free+47
0000000000009c1a         cmp        rax, rbp
0000000000009c1d         ja         loc_9be8

0000000000009c1f         mov        rbp, qword [r12]

                     loc_9c23:
0000000000009c23         cmp        rbp, rax                                    ; CODE XREF=hash_free+19, hash_free+26
0000000000009c26         jae        loc_9c5c

0000000000009c28         nop        dword [rax+rax]

                     loc_9c30:
0000000000009c30         mov        rdi, qword [rbp+8]                          ; CODE XREF=hash_free+154
0000000000009c34         test       rdi, rdi
0000000000009c37         je         loc_9c51

0000000000009c39         nop        dword [rax]

                     loc_9c40:
0000000000009c40         mov        rbx, qword [rdi+8]                          ; CODE XREF=hash_free+143
0000000000009c44         call       sub_1de0                                    ; sub_1de0
0000000000009c49         test       rbx, rbx
0000000000009c4c         mov        rdi, rbx
0000000000009c4f         jne        loc_9c40

                     loc_9c51:
0000000000009c51         add        rbp, 0x10                                   ; CODE XREF=hash_free+119
0000000000009c55         cmp        qword [r12+8], rbp
0000000000009c5a         ja         loc_9c30

                     loc_9c5c:
0000000000009c5c         mov        rdi, qword [r12+0x48]                       ; CODE XREF=hash_free+31, hash_free+102
0000000000009c61         test       rdi, rdi
0000000000009c64         je         loc_9c81

0000000000009c66         nop        word [cs:rax+rax]

                     loc_9c70:
0000000000009c70         mov        rbx, qword [rdi+8]                          ; CODE XREF=hash_free+191
0000000000009c74         call       sub_1de0                                    ; sub_1de0
0000000000009c79         test       rbx, rbx
0000000000009c7c         mov        rdi, rbx
0000000000009c7f         jne        loc_9c70

                     loc_9c81:
0000000000009c81         mov        rdi, qword [r12]                            ; CODE XREF=hash_free+164
0000000000009c85         call       sub_1de0                                    ; sub_1de0
0000000000009c8a         pop        rbx
0000000000009c8b         mov        rdi, r12
0000000000009c8e         pop        rbp
0000000000009c8f         pop        r12
0000000000009c91         jmp        sub_1de0                                    ; sub_1de0
                        ; endp
0000000000009c96         align      32                                          ; End of unwind block (FDE at 0xdfe8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_20: int64_t, -32
        ;    var_30: int64_t, -48
        ;    var_38: int64_t, -56
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120


                     hash_rehash:
0000000000009ca0         push       r12                                         ; Begin of unwind block (FDE at 0xe014), CODE XREF=hash_insert_if_absent+443, hash_delete+271
0000000000009ca2         push       rbp
0000000000009ca3         mov        rbp, rdi
0000000000009ca6         push       rbx
0000000000009ca7         sub        rsp, 0x60
0000000000009cab         mov        r12, qword [rdi+0x28]
0000000000009caf         mov        rax, qword [fs:0x28]
0000000000009cb8         mov        qword [rsp+0x78+var_20], rax
0000000000009cbd         xor        eax, eax
0000000000009cbf         cmp        byte [r12+0x10], 0x0
0000000000009cc5         jne        loc_9d18

0000000000009cc7         test       rsi, rsi
0000000000009cca         js         loc_9e48

0000000000009cd0         pxor       xmm0, xmm0
0000000000009cd4         cvtsi2ss   xmm0, rsi

                     loc_9cd9:
0000000000009cd9         divss      xmm0, dword [r12+8]                         ; CODE XREF=hash_rehash+449
0000000000009ce0         ucomiss    xmm0, dword [float_c60c]                    ; float_c60c
0000000000009ce7         jae        loc_9e20

0000000000009ced         ucomiss    xmm0, dword [float_c610]                    ; float_c610
0000000000009cf4         jb         loc_9e70

0000000000009cfa         subss      xmm0, dword [float_c610]                    ; float_c610
0000000000009d02         movabs     rax, 0x8000000000000000
0000000000009d0c         cvttss2si  rsi, xmm0
0000000000009d11         xor        rsi, rax
0000000000009d14         nop        dword [rax]

                     loc_9d18:
0000000000009d18         mov        rdi, rsi                                    ; CODE XREF=hash_rehash+37, hash_rehash+469
0000000000009d1b         call       next_prime                                  ; next_prime
0000000000009d20         mov        edx, 0x8
0000000000009d25         mov        rbx, rax
0000000000009d28         xor        ecx, ecx
0000000000009d2a         mov        rax, rdx
0000000000009d2d         mul        rbx
0000000000009d30         jo         loc_9ecf

                     loc_9d36:
0000000000009d36         test       rax, rax                                    ; CODE XREF=hash_rehash+564
0000000000009d39         mov        eax, 0x1
0000000000009d3e         cmovs      rcx, rax
0000000000009d42         test       rbx, rbx
0000000000009d45         je         loc_9e20

0000000000009d4b         and        ecx, 0x1
0000000000009d4e         jne        loc_9e20

0000000000009d54         cmp        qword [rbp+0x10], rbx
0000000000009d58         je         loc_9e80

0000000000009d5e         mov        esi, 0x10                                   ; argument "__size" for method j_calloc
0000000000009d63         mov        rdi, rbx                                    ; argument "__nmemb" for method j_calloc
0000000000009d66         call       j_calloc                                    ; calloc
0000000000009d6b         test       rax, rax
0000000000009d6e         mov        qword [rsp+0x78+var_78], rax
0000000000009d72         je         loc_9e20

0000000000009d78         mov        qword [rsp+0x78+var_68], rbx
0000000000009d7d         shl        rbx, 0x4
0000000000009d81         mov        qword [rsp+0x78+var_50], r12
0000000000009d86         add        rbx, rax
0000000000009d89         mov        rax, qword [rbp+0x30]
0000000000009d8d         mov        r12, rsp
0000000000009d90         xor        edx, edx
0000000000009d92         mov        rsi, rbp
0000000000009d95         mov        rdi, r12
0000000000009d98         mov        qword [rsp+0x78+var_70], rbx
0000000000009d9d         mov        qword [rsp+0x78+var_60], 0x0
0000000000009da6         mov        qword [rsp+0x78+var_48], rax
0000000000009dab         mov        rax, qword [rbp+0x38]
0000000000009daf         mov        qword [rsp+0x78+var_58], 0x0
0000000000009db8         mov        qword [rsp+0x78+var_40], rax
0000000000009dbd         mov        rax, qword [rbp+0x40]
0000000000009dc1         mov        qword [rsp+0x78+var_38], rax
0000000000009dc6         mov        rax, qword [rbp+0x48]
0000000000009dca         mov        qword [rsp+0x78+var_30], rax
0000000000009dcf         call       transfer_entries                            ; transfer_entries
0000000000009dd4         test       al, al
0000000000009dd6         mov        ebx, eax
0000000000009dd8         jne        loc_9e90

0000000000009dde         mov        rax, qword [rsp+0x78+var_30]
0000000000009de3         mov        edx, 0x1
0000000000009de8         mov        rsi, r12
0000000000009deb         mov        rdi, rbp
0000000000009dee         mov        qword [rbp+0x48], rax
0000000000009df2         call       transfer_entries                            ; transfer_entries
0000000000009df7         test       al, al
0000000000009df9         je         loc_9ed9

0000000000009dff         xor        edx, edx
0000000000009e01         mov        rsi, r12
0000000000009e04         mov        rdi, rbp
0000000000009e07         call       transfer_entries                            ; transfer_entries
0000000000009e0c         test       al, al
0000000000009e0e         je         loc_9ed9

0000000000009e14         mov        rdi, qword [rsp+0x78+var_78]
0000000000009e18         call       sub_1de0                                    ; sub_1de0
0000000000009e1d         jmp        loc_9e22
0000000000009e1f         align      32

                     loc_9e20:
0000000000009e20         xor        ebx, ebx                                    ; CODE XREF=hash_rehash+71, hash_rehash+165, hash_rehash+174, hash_rehash+210

                     loc_9e22:
0000000000009e22         mov        rcx, qword [rsp+0x78+var_20]                ; CODE XREF=hash_rehash+381, hash_rehash+485, hash_rehash+549
0000000000009e27         xor        rcx, qword [fs:0x28]
0000000000009e30         mov        eax, ebx
0000000000009e32         jne        loc_9eca

0000000000009e38         add        rsp, 0x60
0000000000009e3c         pop        rbx
0000000000009e3d         pop        rbp
0000000000009e3e         pop        r12
0000000000009e40         ret
                        ; endp
0000000000009e41         align      8

                     loc_9e48:
0000000000009e48         mov        rax, rsi                                    ; CODE XREF=hash_rehash+42
0000000000009e4b         pxor       xmm0, xmm0
0000000000009e4f         shr        rax, 0x1
0000000000009e52         and        esi, 0x1
0000000000009e55         or         rax, rsi
0000000000009e58         cvtsi2ss   xmm0, rax
0000000000009e5d         addss      xmm0, xmm0
0000000000009e61         jmp        loc_9cd9
0000000000009e66         align      16

                     loc_9e70:
0000000000009e70         cvttss2si  rsi, xmm0                                   ; CODE XREF=hash_rehash+84
0000000000009e75         jmp        loc_9d18
0000000000009e7a         align      128

                     loc_9e80:
0000000000009e80         mov        ebx, 0x1                                    ; CODE XREF=hash_rehash+184
0000000000009e85         jmp        loc_9e22
0000000000009e87         align      16

                     loc_9e90:
0000000000009e90         mov        rdi, qword [rbp]                            ; CODE XREF=hash_rehash+312
0000000000009e94         call       sub_1de0                                    ; sub_1de0
0000000000009e99         mov        rax, qword [rsp+0x78+var_78]
0000000000009e9d         mov        qword [rbp], rax
0000000000009ea1         mov        rax, qword [rsp+0x78+var_70]
0000000000009ea6         mov        qword [rbp+8], rax
0000000000009eaa         mov        rax, qword [rsp+0x78+var_68]
0000000000009eaf         mov        qword [rbp+0x10], rax
0000000000009eb3         mov        rax, qword [rsp+0x78+var_60]
0000000000009eb8         mov        qword [rbp+0x18], rax
0000000000009ebc         mov        rax, qword [rsp+0x78+var_30]
0000000000009ec1         mov        qword [rbp+0x48], rax
0000000000009ec5         jmp        loc_9e22

                     loc_9eca:
0000000000009eca         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=hash_rehash+402
                        ; endp

                     loc_9ecf:
0000000000009ecf         mov        ecx, 0x1                                    ; CODE XREF=hash_rehash+144
0000000000009ed4         jmp        loc_9d36

                     loc_9ed9:
0000000000009ed9         call       j_abort                                     ; abort, CODE XREF=hash_rehash+345, hash_rehash+366
                        ; endp
0000000000009ede         align      32                                          ; End of unwind block (FDE at 0xe014)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_38: int64_t, -56


                     hash_insert_if_absent:
0000000000009ee0         push       r13                                         ; Begin of unwind block (FDE at 0xe04c), CODE XREF=hash_insert+27
0000000000009ee2         push       r12
0000000000009ee4         push       rbp
0000000000009ee5         push       rbx
0000000000009ee6         sub        rsp, 0x18
0000000000009eea         mov        rax, qword [fs:0x28]
0000000000009ef3         mov        qword [rsp+0x38+var_30], rax
0000000000009ef8         xor        eax, eax
0000000000009efa         test       rsi, rsi
0000000000009efd         je         loc_a0bd

0000000000009f03         mov        r12, rsp
0000000000009f06         xor        ecx, ecx
0000000000009f08         mov        r13, rdx
0000000000009f0b         mov        rdx, r12
0000000000009f0e         mov        rbx, rdi
0000000000009f11         mov        rbp, rsi
0000000000009f14         call       hash_find_entry                             ; hash_find_entry
0000000000009f19         test       rax, rax
0000000000009f1c         mov        rdx, rax
0000000000009f1f         je         loc_9f50

0000000000009f21         xor        eax, eax
0000000000009f23         test       r13, r13
0000000000009f26         je         loc_9f2c

0000000000009f28         mov        qword [r13], rdx

                     loc_9f2c:
0000000000009f2c         mov        rcx, qword [rsp+0x38+var_30]                ; CODE XREF=hash_insert_if_absent+70, hash_insert_if_absent+233, hash_insert_if_absent+507, hash_insert_if_absent+536
0000000000009f31         xor        rcx, qword [fs:0x28]
0000000000009f3a         jne        loc_a15f

0000000000009f40         add        rsp, 0x18
0000000000009f44         pop        rbx
0000000000009f45         pop        rbp
0000000000009f46         pop        r12
0000000000009f48         pop        r13
0000000000009f4a         ret
                        ; endp
0000000000009f4b         align      16

                     loc_9f50:
0000000000009f50         mov        rax, qword [rbx+0x18]                       ; CODE XREF=hash_insert_if_absent+63
0000000000009f54         test       rax, rax
0000000000009f57         js         loc_9fd0

0000000000009f59         pxor       xmm1, xmm1
0000000000009f5d         mov        rdx, qword [rbx+0x28]
0000000000009f61         cvtsi2ss   xmm1, rax
0000000000009f66         mov        rax, qword [rbx+0x10]
0000000000009f6a         test       rax, rax
0000000000009f6d         js         loc_9ffa

                     loc_9f73:
0000000000009f73         pxor       xmm0, xmm0                                  ; CODE XREF=hash_insert_if_absent+276
0000000000009f77         cvtsi2ss   xmm0, rax

                     loc_9f7c:
0000000000009f7c         mulss      xmm0, dword [rdx+8]                         ; CODE XREF=hash_insert_if_absent+307
0000000000009f81         ucomiss    xmm1, xmm0
0000000000009f84         ja         loc_a020

                     loc_9f8a:
0000000000009f8a         mov        r12, qword [rsp+0x38+var_38]                ; CODE XREF=hash_insert_if_absent+392, hash_insert_if_absent+471
0000000000009f8e         cmp        qword [r12], 0x0
0000000000009f93         je         loc_a0c8

0000000000009f99         mov        rax, qword [rbx+0x48]
0000000000009f9d         test       rax, rax
0000000000009fa0         je         loc_a0e0                                    ; DATA XREF=leaf_optimization+72

0000000000009fa6         mov        rdx, qword [rax+8]
0000000000009faa         mov        qword [rbx+0x48], rdx

                     loc_9fae:
0000000000009fae         mov        rdx, qword [r12+8]                          ; CODE XREF=hash_insert_if_absent+525
0000000000009fb3         mov        qword [rax], rbp
0000000000009fb6         mov        qword [rax+8], rdx
0000000000009fba         mov        qword [r12+8], rax
0000000000009fbf         mov        eax, 0x1
0000000000009fc4         add        qword [rbx+0x20], 0x1
0000000000009fc9         jmp        loc_9f2c
0000000000009fce         align      16

                     loc_9fd0:
0000000000009fd0         mov        rdx, rax                                    ; CODE XREF=hash_insert_if_absent+119
0000000000009fd3         pxor       xmm1, xmm1
0000000000009fd7         and        eax, 0x1
0000000000009fda         shr        rdx, 0x1
0000000000009fdd         or         rdx, rax
0000000000009fe0         mov        rax, qword [rbx+0x10]
0000000000009fe4         cvtsi2ss   xmm1, rdx
0000000000009fe9         mov        rdx, qword [rbx+0x28]
0000000000009fed         test       rax, rax
0000000000009ff0         addss      xmm1, xmm1
0000000000009ff4         jns        loc_9f73

                     loc_9ffa:
0000000000009ffa         mov        rcx, rax                                    ; CODE XREF=hash_insert_if_absent+141
0000000000009ffd         pxor       xmm0, xmm0
000000000000a001         shr        rcx, 0x1
000000000000a004         and        eax, 0x1
000000000000a007         or         rcx, rax
000000000000a00a         cvtsi2ss   xmm0, rcx
000000000000a00f         addss      xmm0, xmm0
000000000000a013         jmp        loc_9f7c
000000000000a018         align      32

                     loc_a020:
000000000000a020         lea        rdi, qword [rbx+0x28]                       ; CODE XREF=hash_insert_if_absent+164
000000000000a024         call       check_tuning.isra.0                         ; check_tuning.isra.0
000000000000a029         mov        rax, qword [rbx+0x10]
000000000000a02d         mov        rdx, qword [rbx+0x28]
000000000000a031         test       rax, rax
000000000000a034         movss      xmm2, dword [rdx+8]
000000000000a039         js         loc_a100

000000000000a03f         pxor       xmm0, xmm0
000000000000a043         cvtsi2ss   xmm0, rax

                     loc_a048:
000000000000a048         mov        rax, qword [rbx+0x18]                       ; CODE XREF=hash_insert_if_absent+569
000000000000a04c         test       rax, rax
000000000000a04f         js         loc_a120

000000000000a055         pxor       xmm1, xmm1
000000000000a059         cvtsi2ss   xmm1, rax

                     loc_a05e:
000000000000a05e         movaps     xmm3, xmm2                                  ; CODE XREF=hash_insert_if_absent+601
000000000000a061         mulss      xmm3, xmm0
000000000000a065         ucomiss    xmm1, xmm3
000000000000a068         jbe        loc_9f8a

000000000000a06e         cmp        byte [rdx+0x10], 0x0
000000000000a072         mulss      xmm0, dword [rdx+0xc]
000000000000a077         jne        loc_a07d

000000000000a079         mulss      xmm0, xmm2

                     loc_a07d:
000000000000a07d         ucomiss    xmm0, dword [float_c60c]                    ; float_c60c, CODE XREF=hash_insert_if_absent+407
000000000000a084         jae        loc_a0f3

000000000000a086         ucomiss    xmm0, dword [float_c610]                    ; float_c610
000000000000a08d         jae        loc_a140

000000000000a093         cvttss2si  rsi, xmm0

                     loc_a098:
000000000000a098         mov        rdi, rbx                                    ; CODE XREF=hash_insert_if_absent+634
000000000000a09b         call       hash_rehash                                 ; hash_rehash
000000000000a0a0         test       al, al
000000000000a0a2         je         loc_a0f3

000000000000a0a4         xor        ecx, ecx
000000000000a0a6         mov        rdx, r12
000000000000a0a9         mov        rsi, rbp
000000000000a0ac         mov        rdi, rbx
000000000000a0af         call       hash_find_entry                             ; hash_find_entry
000000000000a0b4         test       rax, rax
000000000000a0b7         je         loc_9f8a

                     loc_a0bd:
000000000000a0bd         call       j_abort                                     ; abort, CODE XREF=hash_insert_if_absent+29
                        ; endp
000000000000a0c2         align      8

                     loc_a0c8:
000000000000a0c8         mov        qword [r12], rbp                            ; CODE XREF=hash_insert_if_absent+179
000000000000a0cc         mov        eax, 0x1
000000000000a0d1         add        qword [rbx+0x20], 0x1
000000000000a0d6         add        qword [rbx+0x18], 0x1
000000000000a0db         jmp        loc_9f2c

                     loc_a0e0:
000000000000a0e0         mov        edi, 0x10                                   ; argument "__size" for method j_malloc, CODE XREF=hash_insert_if_absent+192
000000000000a0e5         call       j_malloc                                    ; malloc
000000000000a0ea         test       rax, rax
000000000000a0ed         jne        loc_9fae

                     loc_a0f3:
000000000000a0f3         mov        eax, 0xffffffff                             ; CODE XREF=hash_insert_if_absent+420, hash_insert_if_absent+450
000000000000a0f8         jmp        loc_9f2c
000000000000a0fd         align      256

                     loc_a100:
000000000000a100         mov        rcx, rax                                    ; CODE XREF=hash_insert_if_absent+345
000000000000a103         pxor       xmm0, xmm0
000000000000a107         shr        rcx, 0x1
000000000000a10a         and        eax, 0x1
000000000000a10d         or         rcx, rax
000000000000a110         cvtsi2ss   xmm0, rcx
000000000000a115         addss      xmm0, xmm0
000000000000a119         jmp        loc_a048
000000000000a11e         align      32

                     loc_a120:
000000000000a120         mov        rcx, rax                                    ; CODE XREF=hash_insert_if_absent+367
000000000000a123         pxor       xmm1, xmm1
000000000000a127         shr        rcx, 0x1
000000000000a12a         and        eax, 0x1
000000000000a12d         or         rcx, rax
000000000000a130         cvtsi2ss   xmm1, rcx
000000000000a135         addss      xmm1, xmm1
000000000000a139         jmp        loc_a05e
000000000000a13e         align      64

                     loc_a140:
000000000000a140         subss      xmm0, dword [float_c610]                    ; float_c610, CODE XREF=hash_insert_if_absent+429
000000000000a148         movabs     rax, 0x8000000000000000
000000000000a152         cvttss2si  rsi, xmm0
000000000000a157         xor        rsi, rax
000000000000a15a         jmp        loc_a098

                     loc_a15f:
000000000000a15f         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=hash_insert_if_absent+90
                        ; endp
000000000000a164         align      16                                          ; End of unwind block (FDE at 0xe04c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24


                     hash_insert:
000000000000a170         push       rbx                                         ; Begin of unwind block (FDE at 0xe088), CODE XREF=filesystem_type+255, enter_dir.isra.10+70
000000000000a171         mov        rbx, rsi
000000000000a174         sub        rsp, 0x10
000000000000a178         mov        rdx, rsp
000000000000a17b         mov        rax, qword [fs:0x28]
000000000000a184         mov        qword [rsp+0x18+var_10], rax
000000000000a189         xor        eax, eax
000000000000a18b         call       hash_insert_if_absent                       ; hash_insert_if_absent
000000000000a190         cmp        eax, 0xffffffff
000000000000a193         je         loc_a1c0

000000000000a195         test       eax, eax
000000000000a197         jne        loc_a19d

000000000000a199         mov        rbx, qword [rsp+0x18+var_18]

                     loc_a19d:
000000000000a19d         mov        rcx, qword [rsp+0x18+var_10]                ; CODE XREF=hash_insert+39, hash_insert+82
000000000000a1a2         xor        rcx, qword [fs:0x28]
000000000000a1ab         mov        rax, rbx
000000000000a1ae         jne        loc_a1c4

000000000000a1b0         add        rsp, 0x10
000000000000a1b4         pop        rbx
000000000000a1b5         ret
                        ; endp
000000000000a1b6         align      64

                     loc_a1c0:
000000000000a1c0         xor        ebx, ebx                                    ; CODE XREF=hash_insert+35
000000000000a1c2         jmp        loc_a19d

                     loc_a1c4:
000000000000a1c4         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=hash_insert+62
                        ; endp
000000000000a1c9         align      16                                          ; End of unwind block (FDE at 0xe088)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40


                     hash_delete:
000000000000a1d0         push       r12                                         ; Begin of unwind block (FDE at 0xe0ac), CODE XREF=leave_dir.isra.12+122
000000000000a1d2         push       rbp
000000000000a1d3         mov        ecx, 0x1
000000000000a1d8         push       rbx
000000000000a1d9         mov        rbx, rdi
000000000000a1dc         sub        rsp, 0x10
000000000000a1e0         mov        rdx, rsp
000000000000a1e3         mov        rax, qword [fs:0x28]
000000000000a1ec         mov        qword [rsp+0x28+var_20], rax
000000000000a1f1         xor        eax, eax
000000000000a1f3         call       hash_find_entry                             ; hash_find_entry
000000000000a1f8         test       rax, rax
000000000000a1fb         mov        rbp, rax
000000000000a1fe         je         loc_a20f

000000000000a200         mov        rax, qword [rsp+0x28+var_28]
000000000000a204         sub        qword [rbx+0x20], 0x1
000000000000a209         cmp        qword [rax], 0x0
000000000000a20d         je         loc_a230

                     loc_a20f:
000000000000a20f         mov        rcx, qword [rsp+0x28+var_20]                ; CODE XREF=hash_delete+46, hash_delete+159, hash_delete+229, hash_delete+278, hash_delete+321
000000000000a214         xor        rcx, qword [fs:0x28]
000000000000a21d         mov        rax, rbp
000000000000a220         jne        loc_a3ce

000000000000a226         add        rsp, 0x10
000000000000a22a         pop        rbx
000000000000a22b         pop        rbp
000000000000a22c         pop        r12
000000000000a22e         ret
                        ; endp
000000000000a22f         align      16

                     loc_a230:
000000000000a230         mov        rax, qword [rbx+0x18]                       ; CODE XREF=hash_delete+61
000000000000a234         sub        rax, 0x1
000000000000a238         test       rax, rax
000000000000a23b         mov        qword [rbx+0x18], rax
000000000000a23f         js         loc_a340

000000000000a245         pxor       xmm0, xmm0
000000000000a249         cvtsi2ss   xmm0, rax

                     loc_a24e:
000000000000a24e         mov        rax, qword [rbx+0x10]                       ; CODE XREF=hash_delete+393
000000000000a252         mov        rdx, qword [rbx+0x28]
000000000000a256         test       rax, rax
000000000000a259         js         loc_a320

000000000000a25f         pxor       xmm1, xmm1
000000000000a263         cvtsi2ss   xmm1, rax

                     loc_a268:
000000000000a268         mulss      xmm1, dword [rdx]                           ; CODE XREF=hash_delete+361
000000000000a26c         ucomiss    xmm1, xmm0
000000000000a26f         jbe        loc_a20f

000000000000a271         lea        rdi, qword [rbx+0x28]
000000000000a275         call       check_tuning.isra.0                         ; check_tuning.isra.0
000000000000a27a         mov        rax, qword [rbx+0x10]
000000000000a27e         mov        rdx, qword [rbx+0x28]
000000000000a282         test       rax, rax
000000000000a285         js         loc_a3b0

000000000000a28b         pxor       xmm0, xmm0
000000000000a28f         cvtsi2ss   xmm0, rax

                     loc_a294:
000000000000a294         mov        rax, qword [rbx+0x18]                       ; CODE XREF=hash_delete+505
000000000000a298         test       rax, rax
000000000000a29b         js         loc_a390

000000000000a2a1         pxor       xmm1, xmm1
000000000000a2a5         cvtsi2ss   xmm1, rax

                     loc_a2aa:
000000000000a2aa         movss      xmm2, dword [rdx]                           ; CODE XREF=hash_delete+473
000000000000a2ae         mulss      xmm2, xmm0
000000000000a2b2         ucomiss    xmm2, xmm1
000000000000a2b5         jbe        loc_a20f

000000000000a2bb         cmp        byte [rdx+0x10], 0x0
000000000000a2bf         mulss      xmm0, dword [rdx+4]
000000000000a2c4         je         loc_a380

                     loc_a2ca:
000000000000a2ca         ucomiss    xmm0, dword [float_c610]                    ; float_c610, CODE XREF=hash_delete+437
000000000000a2d1         jae        loc_a360

000000000000a2d7         cvttss2si  rsi, xmm0

                     loc_a2dc:
000000000000a2dc         mov        rdi, rbx                                    ; CODE XREF=hash_delete+426
000000000000a2df         call       hash_rehash                                 ; hash_rehash
000000000000a2e4         test       al, al
000000000000a2e6         jne        loc_a20f

000000000000a2ec         mov        rdi, qword [rbx+0x48]
000000000000a2f0         test       rdi, rdi
000000000000a2f3         je         loc_a309

000000000000a2f5         nop        dword [rax]

                     loc_a2f8:
000000000000a2f8         mov        r12, qword [rdi+8]                          ; CODE XREF=hash_delete+311
000000000000a2fc         call       sub_1de0                                    ; sub_1de0
000000000000a301         test       r12, r12
000000000000a304         mov        rdi, r12
000000000000a307         jne        loc_a2f8

                     loc_a309:
000000000000a309         mov        qword [rbx+0x48], 0x0                       ; CODE XREF=hash_delete+291
000000000000a311         jmp        loc_a20f
000000000000a316         align      32

                     loc_a320:
000000000000a320         mov        rcx, rax                                    ; CODE XREF=hash_delete+137
000000000000a323         pxor       xmm1, xmm1
000000000000a327         shr        rcx, 0x1
000000000000a32a         and        eax, 0x1
000000000000a32d         or         rcx, rax
000000000000a330         cvtsi2ss   xmm1, rcx
000000000000a335         addss      xmm1, xmm1
000000000000a339         jmp        loc_a268
000000000000a33e         align      64

                     loc_a340:
000000000000a340         mov        rdx, rax                                    ; CODE XREF=hash_delete+111
000000000000a343         pxor       xmm0, xmm0
000000000000a347         shr        rdx, 0x1
000000000000a34a         and        eax, 0x1
000000000000a34d         or         rdx, rax
000000000000a350         cvtsi2ss   xmm0, rdx
000000000000a355         addss      xmm0, xmm0
000000000000a359         jmp        loc_a24e
000000000000a35e         align      32

                     loc_a360:
000000000000a360         subss      xmm0, dword [float_c610]                    ; float_c610, CODE XREF=hash_delete+257
000000000000a368         movabs     rax, 0x8000000000000000
000000000000a372         cvttss2si  rsi, xmm0
000000000000a377         xor        rsi, rax
000000000000a37a         jmp        loc_a2dc
000000000000a37f         align      128

                     loc_a380:
000000000000a380         mulss      xmm0, dword [rdx+8]                         ; CODE XREF=hash_delete+244
000000000000a385         jmp        loc_a2ca
000000000000a38a         align      16

                     loc_a390:
000000000000a390         mov        rcx, rax                                    ; CODE XREF=hash_delete+203
000000000000a393         pxor       xmm1, xmm1
000000000000a397         shr        rcx, 0x1
000000000000a39a         and        eax, 0x1
000000000000a39d         or         rcx, rax
000000000000a3a0         cvtsi2ss   xmm1, rcx
000000000000a3a5         addss      xmm1, xmm1
000000000000a3a9         jmp        loc_a2aa
000000000000a3ae         align      16

                     loc_a3b0:
000000000000a3b0         mov        rcx, rax                                    ; CODE XREF=hash_delete+181
000000000000a3b3         pxor       xmm0, xmm0
000000000000a3b7         shr        rcx, 0x1
000000000000a3ba         and        eax, 0x1
000000000000a3bd         or         rcx, rax
000000000000a3c0         cvtsi2ss   xmm0, rcx
000000000000a3c5         addss      xmm0, xmm0
000000000000a3c9         jmp        loc_a294

                     loc_a3ce:
000000000000a3ce         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=hash_delete+80
                        ; endp
000000000000a3d3         align      32                                          ; End of unwind block (FDE at 0xe0ac)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     i_ring_init:
000000000000a3e0         mov        byte [rdi+0x1c], 0x1                        ; Begin of unwind block (FDE at 0xe0e4), CODE XREF=rpl_fts_open+681
000000000000a3e4         mov        qword [rdi+0x14], 0x0
000000000000a3ec         mov        dword [rdi], esi
000000000000a3ee         mov        dword [rdi+4], esi
000000000000a3f1         mov        dword [rdi+8], esi
000000000000a3f4         mov        dword [rdi+0xc], esi
000000000000a3f7         mov        dword [rdi+0x10], esi
000000000000a3fa         ret
                        ; endp
000000000000a3fb         align      1024                                        ; End of unwind block (FDE at 0xe0e4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     i_ring_empty:
000000000000a400         movzx      eax, byte [rdi+0x1c]                        ; Begin of unwind block (FDE at 0xe0f8), CODE XREF=fd_ring_clear+31, fts_safe_changedir+455
000000000000a404         ret
                        ; endp
000000000000a405         align      16                                          ; End of unwind block (FDE at 0xe0f8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     i_ring_push:
000000000000a410         movzx      edx, byte [rdi+0x1c]                        ; Begin of unwind block (FDE at 0xe10c), CODE XREF=cwd_advance_fd+52
000000000000a414         mov        ecx, dword [rdi+0x14]
000000000000a417         xor        edx, 0x1
000000000000a41a         movzx      edx, dl
000000000000a41d         add        ecx, edx
000000000000a41f         and        ecx, 0x3
000000000000a422         mov        eax, ecx
000000000000a424         lea        r8, qword [rdi+rax*4]
000000000000a428         mov        eax, dword [r8]
000000000000a42b         mov        dword [r8], esi
000000000000a42e         mov        esi, dword [rdi+0x18]
000000000000a431         mov        dword [rdi+0x14], ecx
000000000000a434         cmp        esi, ecx
000000000000a436         jne        loc_a440

000000000000a438         add        edx, esi
000000000000a43a         and        edx, 0x3
000000000000a43d         mov        dword [rdi+0x18], edx

                     loc_a440:
000000000000a440         mov        byte [rdi+0x1c], 0x0                        ; CODE XREF=i_ring_push+38
000000000000a444         ret
                        ; endp
000000000000a445         align      16                                          ; End of unwind block (FDE at 0xe10c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     i_ring_pop:
000000000000a450         cmp        byte [rdi+0x1c], 0x0                        ; Begin of unwind block (FDE at 0xe120), CODE XREF=fd_ring_clear+19, fts_safe_changedir+475
000000000000a454         jne        loc_a485

000000000000a456         mov        eax, dword [rdi+0x14]
000000000000a459         mov        esi, dword [rdi+0x10]
000000000000a45c         lea        rcx, qword [rdi+rax*4]
000000000000a460         mov        rdx, rax
000000000000a463         mov        eax, dword [rcx]
000000000000a465         mov        dword [rcx], esi
000000000000a467         cmp        edx, dword [rdi+0x18]
000000000000a46a         je         loc_a480

000000000000a46c         add        edx, 0x3
000000000000a46f         and        edx, 0x3
000000000000a472         mov        dword [rdi+0x14], edx
000000000000a475         ret
                        ; endp
000000000000a476         align      128

                     loc_a480:
000000000000a480         mov        byte [rdi+0x1c], 0x1                        ; CODE XREF=i_ring_pop+26
000000000000a484         ret
                        ; endp

                     loc_a485:
000000000000a485         sub        rsp, 0x8                                    ; CODE XREF=i_ring_pop+4
000000000000a489         call       j_abort                                     ; abort
                        ; endp
000000000000a48e         align      16                                          ; End of unwind block (FDE at 0xe120)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     locale_charset:
000000000000a490         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0xe134), CODE XREF=gettext_quote.part.1+11
000000000000a494         mov        edi, 0xe                                    ; argument "__item" for method j_nl_langinfo
000000000000a499         call       j_nl_langinfo                               ; nl_langinfo
000000000000a49e         test       rax, rax
000000000000a4a1         je         loc_a4c0

000000000000a4a3         cmp        byte [rax], 0x0
000000000000a4a6         lea        rdx, qword [aAscii]                         ; "ASCII"
000000000000a4ad         cmove      rax, rdx
000000000000a4b1         add        rsp, 0x8
000000000000a4b5         ret
                        ; endp
000000000000a4b6         align      64

                     loc_a4c0:
000000000000a4c0         lea        rax, qword [aAscii]                         ; "ASCII", CODE XREF=locale_charset+17
000000000000a4c7         add        rsp, 0x8
000000000000a4cb         ret
                        ; endp
000000000000a4cc         align      16                                          ; End of unwind block (FDE at 0xe134)

                     openat_safer:
000000000000a4d0         sub        rsp, 0x58                                   ; Begin of unwind block (FDE at 0xe154), CODE XREF=diropen.isra.6+53, opendirat+21
000000000000a4d4         mov        qword [rsp+0x58+var_20], rcx
000000000000a4d9         xor        ecx, ecx
000000000000a4db         mov        rax, qword [fs:0x28]
000000000000a4e4         mov        qword [rsp+0x58+var_40], rax
000000000000a4e9         xor        eax, eax
000000000000a4eb         test       dl, 0x40
000000000000a4ee         jne        loc_a518

                     loc_a4f0:
000000000000a4f0         xor        eax, eax                                    ; CODE XREF=openat_safer+103
000000000000a4f2         call       j_openat                                    ; openat
000000000000a4f7         mov        edi, eax
000000000000a4f9         call       fd_safer                                    ; fd_safer
000000000000a4fe         mov        rsi, qword [rsp+0x58+var_40]
000000000000a503         xor        rsi, qword [fs:0x28]
000000000000a50c         jne        loc_a539

000000000000a50e         add        rsp, 0x58
000000000000a512         ret
                        ; endp
000000000000a513         align      8

                     loc_a518:
000000000000a518         lea        rax, qword [rsp+0x58+arg_0]                 ; CODE XREF=openat_safer+30
000000000000a51d         mov        dword [rsp+0x58+var_58], 0x18
000000000000a524         mov        ecx, dword [rsp+0x58+var_20]
000000000000a528         mov        qword [rsp+0x58+var_50], rax
000000000000a52d         lea        rax, qword [rsp+0x58+var_38]
000000000000a532         mov        qword [rsp+0x58+var_48], rax
000000000000a537         jmp        loc_a4f0

                     loc_a539:
000000000000a539         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=openat_safer+60
                        ; endp
000000000000a53e         align      64                                          ; End of unwind block (FDE at 0xe154)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     opendirat:
000000000000a540         push       r13                                         ; Begin of unwind block (FDE at 0xe174), CODE XREF=fts_build+1189
000000000000a542         push       r12
000000000000a544         or         edx, 0x90900
000000000000a54a         push       rbp
000000000000a54b         push       rbx
000000000000a54c         xor        eax, eax
000000000000a54e         mov        r12, rcx
000000000000a551         sub        rsp, 0x8
000000000000a555         call       openat_safer                                ; openat_safer
000000000000a55a         test       eax, eax
000000000000a55c         js         loc_a5b0

000000000000a55e         mov        edi, eax                                    ; argument "__fd" for method j_fdopendir
000000000000a560         mov        ebx, eax
000000000000a562         call       j_fdopendir                                 ; fdopendir
000000000000a567         test       rax, rax
000000000000a56a         mov        rbp, rax
000000000000a56d         je         loc_a588

000000000000a56f         mov        dword [r12], ebx
000000000000a573         add        rsp, 0x8
000000000000a577         mov        rax, rbp
000000000000a57a         pop        rbx
000000000000a57b         pop        rbp
000000000000a57c         pop        r12
000000000000a57e         pop        r13
000000000000a580         ret
                        ; endp
000000000000a581         align      8

                     loc_a588:
000000000000a588         call       j___errno_location                          ; __errno_location, CODE XREF=opendirat+45
000000000000a58d         mov        r13d, dword [rax]
000000000000a590         mov        r12, rax
000000000000a593         mov        edi, ebx                                    ; argument "__fd" for method j_close
000000000000a595         call       j_close                                     ; close
000000000000a59a         mov        rax, rbp
000000000000a59d         mov        dword [r12], r13d
000000000000a5a1         add        rsp, 0x8
000000000000a5a5         pop        rbx
000000000000a5a6         pop        rbp
000000000000a5a7         pop        r12
000000000000a5a9         pop        r13
000000000000a5ab         ret
                        ; endp
000000000000a5ac         align      16

                     loc_a5b0:
000000000000a5b0         add        rsp, 0x8                                    ; CODE XREF=opendirat+28
000000000000a5b4         xor        ebp, ebp
000000000000a5b6         pop        rbx
000000000000a5b7         mov        rax, rbp
000000000000a5ba         pop        rbp
000000000000a5bb         pop        r12
000000000000a5bd         pop        r13
000000000000a5bf         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fd_safer:
000000000000a5c0         push       r13                                         ; End of unwind block (FDE at 0xe174), Begin of unwind block (FDE at 0xe1d4), CODE XREF=open_safer+42, openat_safer+41
000000000000a5c2         push       r12
000000000000a5c4         push       rbp
000000000000a5c5         push       rbx
000000000000a5c6         mov        ebx, edi
000000000000a5c8         sub        rsp, 0x8
000000000000a5cc         cmp        edi, 0x2
000000000000a5cf         ja         loc_a5f2

000000000000a5d1         call       dup_safer                                   ; dup_safer
000000000000a5d6         mov        r12d, eax
000000000000a5d9         call       j___errno_location                          ; __errno_location
000000000000a5de         mov        r13d, dword [rax]
000000000000a5e1         mov        rbp, rax
000000000000a5e4         mov        edi, ebx                                    ; argument "__fd" for method j_close
000000000000a5e6         call       j_close                                     ; close
000000000000a5eb         mov        ebx, r12d
000000000000a5ee         mov        dword [rbp], r13d

                     loc_a5f2:
000000000000a5f2         add        rsp, 0x8                                    ; CODE XREF=fd_safer+15
000000000000a5f6         mov        eax, ebx
000000000000a5f8         pop        rbx
000000000000a5f9         pop        rbp
000000000000a5fa         pop        r12
000000000000a5fc         pop        r13
000000000000a5fe         ret
                        ; endp
000000000000a5ff         align      512                                         ; End of unwind block (FDE at 0xe1d4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fclose:
000000000000a600         push       r12                                         ; Begin of unwind block (FDE at 0xe20c), CODE XREF=close_stream+21
000000000000a602         push       rbp
000000000000a603         push       rbx
000000000000a604         mov        rbx, rdi
000000000000a607         call       j_fileno                                    ; fileno
000000000000a60c         test       eax, eax
000000000000a60e         mov        rdi, rbx
000000000000a611         js         loc_a667

000000000000a613         call       j___freading                                ; __freading
000000000000a618         test       eax, eax
000000000000a61a         jne        loc_a648

                     loc_a61c:
000000000000a61c         mov        rdi, rbx                                    ; CODE XREF=rpl_fclose+98
000000000000a61f         call       rpl_fflush                                  ; rpl_fflush
000000000000a624         test       eax, eax
000000000000a626         je         loc_a664

000000000000a628         call       j___errno_location                          ; __errno_location
000000000000a62d         mov        r12d, dword [rax]
000000000000a630         mov        rdi, rbx                                    ; argument "__stream" for method j_fclose
000000000000a633         mov        rbp, rax
000000000000a636         call       j_fclose                                    ; fclose
000000000000a63b         test       r12d, r12d
000000000000a63e         jne        loc_a670

                     loc_a640:
000000000000a640         pop        rbx                                         ; CODE XREF=rpl_fclose+121
000000000000a641         pop        rbp
000000000000a642         pop        r12
000000000000a644         ret
                        ; endp
000000000000a645         align      8

                     loc_a648:
000000000000a648         mov        rdi, rbx                                    ; argument "__stream" for method j_fileno, CODE XREF=rpl_fclose+26
000000000000a64b         call       j_fileno                                    ; fileno
000000000000a650         xor        esi, esi                                    ; argument "__offset" for method j_lseek
000000000000a652         mov        edx, 0x1                                    ; argument "__whence" for method j_lseek
000000000000a657         mov        edi, eax                                    ; argument "__fd" for method j_lseek
000000000000a659         call       j_lseek                                     ; lseek
000000000000a65e         cmp        rax, 0xffffffffffffffff
000000000000a662         jne        loc_a61c

                     loc_a664:
000000000000a664         mov        rdi, rbx                                    ; CODE XREF=rpl_fclose+38

                     loc_a667:
000000000000a667         pop        rbx                                         ; CODE XREF=rpl_fclose+17
000000000000a668         pop        rbp
000000000000a669         pop        r12
000000000000a66b         jmp        j_fclose                                    ; fclose
                        ; endp

                     loc_a670:
000000000000a670         mov        dword [rbp], r12d                           ; CODE XREF=rpl_fclose+62
000000000000a674         mov        eax, 0xffffffff
000000000000a679         jmp        loc_a640
000000000000a67b         align      128                                         ; End of unwind block (FDE at 0xe20c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40
        ;    var_30: int64_t, -48
        ;    var_38: int64_t, -56
        ;    var_48: int8_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int32_t, -104


                     rpl_fcntl:
000000000000a680         push       r12                                         ; Begin of unwind block (FDE at 0xe244), CODE XREF=fts_build+2314
000000000000a682         push       rbp
000000000000a683         mov        ebp, edi
000000000000a685         push       rbx
000000000000a686         sub        rsp, 0x50
000000000000a68a         mov        rax, qword [fs:0x28]
000000000000a693         mov        qword [rsp+0x68+var_50], rax
000000000000a698         xor        eax, eax
000000000000a69a         lea        rax, qword [rsp+0x68+arg_0]
000000000000a69f         test       esi, esi
000000000000a6a1         mov        qword [rsp+0x68+var_38], rdx
000000000000a6a6         mov        qword [rsp+0x68+var_30], rcx
000000000000a6ab         mov        qword [rsp+0x68+var_28], r8
000000000000a6b0         mov        qword [rsp+0x68+var_60], rax
000000000000a6b5         lea        rax, qword [rsp+0x68+var_48]
000000000000a6ba         mov        qword [rsp+0x68+var_20], r9
000000000000a6bf         mov        dword [rsp+0x68+var_68], 0x10
000000000000a6c6         mov        qword [rsp+0x68+var_58], rax
000000000000a6cb         je         loc_a8d2

000000000000a6d1         cmp        esi, 0x406
000000000000a6d7         jne        loc_a720

000000000000a6d9         mov        rax, qword [rsp+0x68+var_58]
000000000000a6de         cmp        dword [have_dupfd_cloexec.3326], 0x0        ; have_dupfd_cloexec.3326
000000000000a6e5         mov        dword [rsp+0x68+var_68], 0x18
000000000000a6ec         mov        r12d, dword [rax+0x10]
000000000000a6f0         mov        edx, r12d
000000000000a6f3         js         loc_a823

000000000000a6f9         xor        eax, eax
000000000000a6fb         mov        esi, 0x406                                  ; argument "__cmd" for method j_fcntl
000000000000a700         call       j_fcntl                                     ; fcntl
000000000000a705         test       eax, eax
000000000000a707         mov        ebx, eax
000000000000a709         js         loc_a898

                     loc_a70f:
000000000000a70f         mov        dword [have_dupfd_cloexec.3326], 0x1        ; have_dupfd_cloexec.3326, CODE XREF=rpl_fcntl+544
000000000000a719         jmp        loc_a760
000000000000a71b         align      32

                     loc_a720:
000000000000a720         cmp        esi, 0xb                                    ; CODE XREF=rpl_fcntl+87
000000000000a723         je         loc_a750

000000000000a725         jg         loc_a780

000000000000a727         cmp        esi, 0x4
000000000000a72a         je         loc_a800

000000000000a730         jg         loc_a7f0

000000000000a736         cmp        esi, 0x2
000000000000a739         je         loc_a800

000000000000a73f         jg         loc_a750

000000000000a741         cmp        esi, 0x1
000000000000a744         jne        loc_a7a8

000000000000a746         nop        word [cs:rax+rax]

                     loc_a750:
000000000000a750         mov        edi, ebp                                    ; argument "__fd" for method j_fcntl, CODE XREF=rpl_fcntl+163, rpl_fcntl+191, rpl_fcntl+278, rpl_fcntl+344, rpl_fcntl+358, rpl_fcntl+371
000000000000a752         xor        eax, eax
000000000000a754         call       j_fcntl                                     ; fcntl
000000000000a759         mov        ebx, eax
000000000000a75b         nop        dword [rax+rax]

                     loc_a760:
000000000000a760         mov        rcx, qword [rsp+0x68+var_50]                ; CODE XREF=rpl_fcntl+153, rpl_fcntl+327, rpl_fcntl+414, rpl_fcntl+432, rpl_fcntl+445, rpl_fcntl+491, rpl_fcntl+524, rpl_fcntl+568, rpl_fcntl+613
000000000000a765         xor        rcx, qword [fs:0x28]
000000000000a76e         mov        eax, ebx
000000000000a770         jne        loc_a8cd

000000000000a776         add        rsp, 0x50
000000000000a77a         pop        rbx
000000000000a77b         pop        rbp
000000000000a77c         pop        r12
000000000000a77e         ret
                        ; endp
000000000000a77f         align      128

                     loc_a780:
000000000000a780         cmp        esi, 0x407                                  ; CODE XREF=rpl_fcntl+165
000000000000a786         jg         loc_a7d0

000000000000a788         cmp        esi, 0x406
000000000000a78e         jge        loc_a800

000000000000a790         cmp        esi, 0x401
000000000000a796         je         loc_a750

000000000000a798         cmp        esi, 0x402
000000000000a79e         je         loc_a800

000000000000a7a0         cmp        esi, 0x400
000000000000a7a6         je         loc_a800

                     loc_a7a8:
000000000000a7a8         mov        eax, dword [rsp+0x68+var_68]                ; CODE XREF=rpl_fcntl+196, rpl_fcntl+356, rpl_fcntl+382
000000000000a7ab         cmp        eax, 0x2f
000000000000a7ae         ja         loc_a8ea

000000000000a7b4         add        rax, qword [rsp+0x68+var_58]

                     loc_a7b9:
000000000000a7b9         mov        rdx, qword [rax]                            ; CODE XREF=rpl_fcntl+623
000000000000a7bc         mov        edi, ebp                                    ; argument "__fd" for method j_fcntl
000000000000a7be         xor        eax, eax
000000000000a7c0         call       j_fcntl                                     ; fcntl
000000000000a7c5         mov        ebx, eax
000000000000a7c7         jmp        loc_a760
000000000000a7c9         align      16

                     loc_a7d0:
000000000000a7d0         cmp        esi, 0x409                                  ; CODE XREF=rpl_fcntl+262
000000000000a7d6         je         loc_a800

000000000000a7d8         jl         loc_a750

000000000000a7de         cmp        esi, 0x40a
000000000000a7e4         jne        loc_a7a8

000000000000a7e6         jmp        loc_a750
000000000000a7eb         align      16

                     loc_a7f0:
000000000000a7f0         cmp        esi, 0x9                                    ; CODE XREF=rpl_fcntl+176
000000000000a7f3         je         loc_a750

000000000000a7f9         jg         loc_a800

000000000000a7fb         cmp        esi, 0x8
000000000000a7fe         jne        loc_a7a8

                     loc_a800:
000000000000a800         mov        eax, dword [rsp+0x68+var_68]                ; CODE XREF=rpl_fcntl+170, rpl_fcntl+185, rpl_fcntl+270, rpl_fcntl+286, rpl_fcntl+294, rpl_fcntl+342, rpl_fcntl+377
000000000000a803         cmp        eax, 0x2f
000000000000a806         ja         loc_a8f4

000000000000a80c         add        rax, qword [rsp+0x68+var_58]

                     loc_a811:
000000000000a811         mov        edx, dword [rax]                            ; CODE XREF=rpl_fcntl+633
000000000000a813         mov        edi, ebp                                    ; argument "__fd" for method j_fcntl
000000000000a815         xor        eax, eax
000000000000a817         call       j_fcntl                                     ; fcntl
000000000000a81c         mov        ebx, eax
000000000000a81e         jmp        loc_a760

                     loc_a823:
000000000000a823         xor        esi, esi                                    ; argument "__cmd" for method j_fcntl, CODE XREF=rpl_fcntl+115
000000000000a825         xor        eax, eax
000000000000a827         call       j_fcntl                                     ; fcntl
000000000000a82c         test       eax, eax
000000000000a82e         mov        ebx, eax
000000000000a830         js         loc_a760

000000000000a836         cmp        dword [have_dupfd_cloexec.3326], 0xffffffff ; have_dupfd_cloexec.3326
000000000000a83d         jne        loc_a760

                     loc_a843:
000000000000a843         xor        eax, eax                                    ; CODE XREF=rpl_fcntl+584
000000000000a845         mov        esi, 0x1                                    ; argument "__cmd" for method j_fcntl
000000000000a84a         mov        edi, ebx                                    ; argument "__fd" for method j_fcntl
000000000000a84c         call       j_fcntl                                     ; fcntl
000000000000a851         test       eax, eax
000000000000a853         js         loc_a871

000000000000a855         or         eax, 0x1
000000000000a858         mov        esi, 0x2                                    ; argument "__cmd" for method j_fcntl
000000000000a85d         mov        edi, ebx                                    ; argument "__fd" for method j_fcntl
000000000000a85f         mov        edx, eax
000000000000a861         xor        eax, eax
000000000000a863         call       j_fcntl                                     ; fcntl
000000000000a868         cmp        eax, 0xffffffff
000000000000a86b         jne        loc_a760

                     loc_a871:
000000000000a871         call       j___errno_location                          ; __errno_location, CODE XREF=rpl_fcntl+467
000000000000a876         mov        r12d, dword [rax]
000000000000a879         mov        rbp, rax
000000000000a87c         mov        edi, ebx                                    ; argument "__fd" for method j_close
000000000000a87e         call       j_close                                     ; close
000000000000a883         mov        ebx, 0xffffffff
000000000000a888         mov        dword [rbp], r12d
000000000000a88c         jmp        loc_a760
000000000000a891         align      8

                     loc_a898:
000000000000a898         call       j___errno_location                          ; __errno_location, CODE XREF=rpl_fcntl+137
000000000000a89d         cmp        dword [rax], 0x16
000000000000a8a0         jne        loc_a70f

000000000000a8a6         xor        esi, esi                                    ; argument "__cmd" for method j_fcntl
000000000000a8a8         xor        eax, eax
000000000000a8aa         mov        edx, r12d
000000000000a8ad         mov        edi, ebp                                    ; argument "__fd" for method j_fcntl
000000000000a8af         call       j_fcntl                                     ; fcntl
000000000000a8b4         test       eax, eax
000000000000a8b6         mov        ebx, eax
000000000000a8b8         js         loc_a760

000000000000a8be         mov        dword [have_dupfd_cloexec.3326], 0xffffffff ; have_dupfd_cloexec.3326
000000000000a8c8         jmp        loc_a843

                     loc_a8cd:
000000000000a8cd         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=rpl_fcntl+240
                        ; endp

                     loc_a8d2:
000000000000a8d2         mov        rax, qword [rsp+0x68+var_58]                ; CODE XREF=rpl_fcntl+75
000000000000a8d7         xor        esi, esi                                    ; argument "__cmd" for method j_fcntl
000000000000a8d9         mov        edx, dword [rax+0x10]
000000000000a8dc         xor        eax, eax
000000000000a8de         call       j_fcntl                                     ; fcntl
000000000000a8e3         mov        ebx, eax
000000000000a8e5         jmp        loc_a760

                     loc_a8ea:
000000000000a8ea         mov        rax, qword [rsp+0x68+var_60]                ; CODE XREF=rpl_fcntl+302
000000000000a8ef         jmp        loc_a7b9

                     loc_a8f4:
000000000000a8f4         mov        rax, qword [rsp+0x68+var_60]                ; CODE XREF=rpl_fcntl+390
000000000000a8f9         jmp        loc_a811
000000000000a8fe         align      256                                         ; End of unwind block (FDE at 0xe244)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fflush:
000000000000a900         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0xe27c), CODE XREF=rpl_fclose+31
000000000000a903         push       rbx
000000000000a904         mov        rbx, rdi
000000000000a907         je         loc_a91a

000000000000a909         call       j___freading                                ; __freading
000000000000a90e         test       eax, eax
000000000000a910         je         loc_a91a

000000000000a912         test       dword [rbx], 0x100
000000000000a918         jne        loc_a928

                     loc_a91a:
000000000000a91a         mov        rdi, rbx                                    ; argument "__stream" for method j_fflush, CODE XREF=rpl_fflush+7, rpl_fflush+16
000000000000a91d         pop        rbx
000000000000a91e         jmp        j_fflush                                    ; fflush
                        ; endp
000000000000a923         align      8

                     loc_a928:
000000000000a928         mov        rdi, rbx                                    ; CODE XREF=rpl_fflush+24
000000000000a92b         mov        edx, 0x1
000000000000a930         xor        esi, esi
000000000000a932         call       rpl_fseeko                                  ; rpl_fseeko
000000000000a937         mov        rdi, rbx                                    ; argument "__stream" for method j_fflush
000000000000a93a         pop        rbx
000000000000a93b         jmp        j_fflush                                    ; fflush
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fseeko:
000000000000a940         mov        rax, qword [rdi+8]                          ; End of unwind block (FDE at 0xe27c), Begin of unwind block (FDE at 0xe29c), CODE XREF=rpl_fflush+50
000000000000a944         cmp        qword [rdi+0x10], rax
000000000000a948         je         loc_a950

                     j_j_fseeko:        // fseeko
000000000000a94a         jmp        j_fseeko                                    ; fseeko, CODE XREF=j_j_fseeko+14, j_j_fseeko+21
                        ; endp
000000000000a94f         align      16

                     loc_a950:
000000000000a950         mov        rax, qword [rdi+0x20]                       ; CODE XREF=rpl_fseeko+8
000000000000a954         cmp        qword [rdi+0x28], rax
000000000000a958         jne        j_j_fseeko                                  ; fseeko

000000000000a95a         cmp        qword [rdi+0x48], 0x0
000000000000a95f         jne        j_j_fseeko                                  ; fseeko

000000000000a961         push       r12
000000000000a963         push       rbp
000000000000a964         mov        r12d, edx
000000000000a967         push       rbx
000000000000a968         mov        rbp, rsi
000000000000a96b         mov        rbx, rdi
000000000000a96e         call       j_fileno                                    ; fileno
000000000000a973         mov        edx, r12d                                   ; argument "__whence" for method j_lseek
000000000000a976         mov        rsi, rbp                                    ; argument "__offset" for method j_lseek
000000000000a979         mov        edi, eax                                    ; argument "__fd" for method j_lseek
000000000000a97b         call       j_lseek                                     ; lseek
000000000000a980         cmp        rax, 0xffffffffffffffff
000000000000a984         je         loc_a992

000000000000a986         and        dword [rbx], 0xffffffef
000000000000a989         mov        qword [rbx+0x90], rax
000000000000a990         xor        eax, eax

                     loc_a992:
000000000000a992         pop        rbx                                         ; CODE XREF=j_j_fseeko+58
000000000000a993         pop        rbp
000000000000a994         pop        r12
000000000000a996         ret
                        ; endp
000000000000a997         align      32                                          ; End of unwind block (FDE at 0xe29c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     dup_safer:
000000000000a9a0         mov        edx, 0x3                                    ; Begin of unwind block (FDE at 0xe2cc), CODE XREF=fd_safer+17
000000000000a9a5         xor        esi, esi
000000000000a9a7         xor        eax, eax
000000000000a9a9         jmp        rpl_fcntl                                   ; rpl_fcntl
                        ; endp
000000000000a9ae         align      16                                          ; End of unwind block (FDE at 0xe2cc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __libc_csu_init:
000000000000a9b0         push       r15                                         ; Begin of unwind block (FDE at 0xe2e4), DATA XREF=_start+22
000000000000a9b2         push       r14
000000000000a9b4         mov        r15, rdx
000000000000a9b7         push       r13
000000000000a9b9         push       r12
000000000000a9bb         lea        r12, qword [__frame_dummy_init_array_entry] ; __frame_dummy_init_array_entry
000000000000a9c2         push       rbp
000000000000a9c3         lea        rbp, qword [__do_global_dtors_aux_fini_array_entry] ; __do_global_dtors_aux_fini_array_entry
000000000000a9ca         push       rbx
000000000000a9cb         mov        r13d, edi
000000000000a9ce         mov        r14, rsi
000000000000a9d1         sub        rbp, r12
000000000000a9d4         sub        rsp, 0x8
000000000000a9d8         sar        rbp, 0x3
000000000000a9dc         call       _init                                       ; _init
000000000000a9e1         test       rbp, rbp
000000000000a9e4         je         loc_aa06

000000000000a9e6         xor        ebx, ebx
000000000000a9e8         nop        dword [rax+rax]

                     loc_a9f0:
000000000000a9f0         mov        rdx, r15                                    ; CODE XREF=__libc_csu_init+84
000000000000a9f3         mov        rsi, r14
000000000000a9f6         mov        edi, r13d
000000000000a9f9         call       qword [r12+rbx*8]
000000000000a9fd         add        rbx, 0x1
000000000000aa01         cmp        rbp, rbx
000000000000aa04         jne        loc_a9f0

                     loc_aa06:
000000000000aa06         add        rsp, 0x8                                    ; CODE XREF=__libc_csu_init+52
000000000000aa0a         pop        rbx
000000000000aa0b         pop        rbp
000000000000aa0c         pop        r12
000000000000aa0e         pop        r13
000000000000aa10         pop        r14
000000000000aa12         pop        r15
000000000000aa14         ret
                        ; endp
000000000000aa15         align      32                                          ; End of unwind block (FDE at 0xe2e4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __libc_csu_fini:
000000000000aa20         ret                                                    ; Begin of unwind block (FDE at 0xe32c), DATA XREF=_start+15
                        ; endp
000000000000aa22         align      16                                          ; End of unwind block (FDE at 0xe32c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     atexit:
000000000000aa30         mov        rdx, qword [__dso_handle]                   ; Begin of unwind block (FDE at 0xe344), __dso_handle, CODE XREF=main+157
000000000000aa37         xor        esi, esi
000000000000aa39         jmp        j___cxa_atexit                              ; __cxa_atexit
                        ; endp
000000000000aa3e         db  0x00 ; '.'                                         ; End of unwind block (FDE at 0xe344)
000000000000aa3f         db  0x00 ; '.'


        ; Section .fini
        ; Range: [0xaa40; 0xaa49[ (9 bytes)
        ; File offset : [43584; 43593[ (9 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _fini:
000000000000aa40         sub        rsp, 0x8
000000000000aa44         add        rsp, 0x8
000000000000aa48         ret
                        ; endp
000000000000aa49         db  0x00 ; '.'
000000000000aa4a         db  0x00 ; '.'
000000000000aa4b         db  0x00 ; '.'
000000000000aa4c         db  0x00 ; '.'
000000000000aa4d         db  0x00 ; '.'
000000000000aa4e         db  0x00 ; '.'
000000000000aa4f         db  0x00 ; '.'
000000000000aa50         db  0x00 ; '.'
000000000000aa51         db  0x00 ; '.'
000000000000aa52         db  0x00 ; '.'
000000000000aa53         db  0x00 ; '.'
000000000000aa54         db  0x00 ; '.'
000000000000aa55         db  0x00 ; '.'
000000000000aa56         db  0x00 ; '.'
000000000000aa57         db  0x00 ; '.'
000000000000aa58         db  0x00 ; '.'
000000000000aa59         db  0x00 ; '.'
000000000000aa5a         db  0x00 ; '.'
000000000000aa5b         db  0x00 ; '.'
000000000000aa5c         db  0x00 ; '.'
000000000000aa5d         db  0x00 ; '.'
000000000000aa5e         db  0x00 ; '.'
000000000000aa5f         db  0x00 ; '.'


        ; Section .rodata
        ; Range: [0xaa60; 0xc626[ (7110 bytes)
        ; File offset : [43616; 50726[ (7110 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

                     _IO_stdin_used:
000000000000aa60         db  0x01 ; '.'
000000000000aa61         db  0x00 ; '.'
000000000000aa62         db  0x02 ; '.'
000000000000aa63         db  0x00 ; '.'
                     aChown:
000000000000aa64         db         "chown", 0                                  ; DATA XREF=main+460, usage+636, usage+932, usage+1116, usage+1135, usage+1169
000000000000aa6a         db  0x5b ; '['                                         ; DATA XREF=usage+622
000000000000aa6b         db  0x00 ; '.'
                     aTestInvocation:
000000000000aa6c         db         "test invocation", 0                        ; DATA XREF=usage+668
                     aMulticallInvoc:
000000000000aa7c         db         "Multi-call invocation", 0                  ; DATA XREF=usage+716
                     aSha224sum:
000000000000aa92         db         "sha224sum", 0                              ; DATA XREF=usage+733
                     aSha2Utilities:
000000000000aa9c         db         "sha2 utilities", 0                         ; DATA XREF=usage+745
                     aSha256sum:
000000000000aaab         db         "sha256sum", 0                              ; DATA XREF=usage+629
                     aSha384sum:
000000000000aab5         db         "sha384sum", 0                              ; DATA XREF=usage+680
                     aSha512sum:
000000000000aabf         db         "sha512sum", 0                              ; DATA XREF=usage+704
                     aNsOnlineHelpSn:
000000000000aac9         db         "\n%s online help: <%s>\n", 0               ; DATA XREF=usage+818
000000000000aae0         db  0x47 ; 'G'                                         ; DATA XREF=main+453, usage+846, usage+1039, emit_bug_reporting_address+68
000000000000aae1         db  0x4e ; 'N'
000000000000aae2         db  0x55 ; 'U'
000000000000aae3         db  0x20 ; ' '
                     aCoreutils:
000000000000aae4         db         "coreutils", 0                              ; DATA XREF=main+126, main+138, usage+692
000000000000aaee         db  0x65 ; 'e'                                         ; DATA XREF=usage+885, usage+1078
000000000000aaef         db  0x6e ; 'n'
000000000000aaf0         db  0x5f ; '_'
000000000000aaf1         db  0x00 ; '.'
                     aFullDocumentat:
000000000000aaf2         db         "Full documentation <%s%s>\n", 0            ; DATA XREF=usage+913, usage+1102
                     aUsrlocalsharel:
000000000000ab0d         db         "/usr/local/share/locale", 0                ; DATA XREF=main+119
                     aSS:
000000000000ab25         db         "%s: %s", 0                                 ; DATA XREF=main+591, main+1197, close_stdout+108
                     aJimMeyering:
000000000000ab2c         db         "Jim Meyering", 0                           ; DATA XREF=main+439
                     aDavidMackenzie:
000000000000ab39         db         "David MacKenzie", 0                        ; DATA XREF=main+446
                     aHlprcfhv:
000000000000ab49         db         "HLPRcfhv", 0                               ; DATA XREF=main+199
                     aMissingOperand:
000000000000ab52         db         "missing operand", 0                        ; DATA XREF=main+1332
                     aMissingOperand_ab62:        // aMissingOperand
000000000000ab62         db         "missing operand after %s", 0               ; DATA XREF=main+1380
                     aRecursive:
000000000000ab7b         db         "recursive", 0
                     aChanges:
000000000000ab85         db         "changes", 0
                     aFrom:
000000000000ab8d         db         "from", 0
000000000000ab92         db  0x6e ; 'n'
000000000000ab93         db  0x6f ; 'o'
000000000000ab94         db  0x2d ; '-'
000000000000ab95         db  0x64 ; 'd'
000000000000ab96         db  0x65 ; 'e'
                     aReference:
000000000000ab97         db         "reference", 0
000000000000aba1         db  0x6e ; 'n'
000000000000aba2         db  0x6f ; 'o'
000000000000aba3         db  0x2d ; '-'
                     aPreserveroot:
000000000000aba4         db         "preserve-root", 0
                     aQuiet:
000000000000abb2         db         "quiet", 0
                     aSilent:
000000000000abb8         db         "silent", 0
                     aVerbose:
000000000000abbf         db         "verbose", 0
                     aHelp:
000000000000abc7         db         "help", 0
                     aVersion:
000000000000abcc         db         "version", 0
000000000000abd4         align      8
                     aTrySHelpForMor:
000000000000abd8         db         "Try '%s --help' for more information.\n", 0 ; DATA XREF=usage+47
000000000000abff         align      1024
                     aUsageSOptionOw:
000000000000ac00         db         "Usage: %s [OPTION]... [OWNER][:[GROUP]] FILE...\n  or:  %s [OPTION]... --reference=RFILE FILE...\n", 0 ; DATA XREF=usage+93
000000000000ac61         align      8
                     aChangeTheOwner:
000000000000ac68         db         "Change the owner and/or group of each FILE to OWNER and/or GROUP.\nWith --reference, change the owner and group of each FILE to those of RFILE.\n\n", 0 ; DATA XREF=usage+135
000000000000acf9         align      256
                     aCChangesLikeVe:
000000000000ad00         db         "  -c, --changes          like verbose but report only when a change is made\n  -f, --silent, --quiet  suppress most error messages\n  -v, --verbose          output a diagnostic for every file processed\n", 0 ; DATA XREF=usage+172
000000000000adc9         align      16
                     aDereferenceAff:
000000000000add0         db         "      --dereference      affect the referent of each symbolic link (this is\n                         the default), rather than the symbolic link itself\n  -h, --no-dereference   affect symbolic links instead of any referenced file\n", 0 ; DATA XREF=usage+209
000000000000aeb7         align      8
                     aUsefulOnlyOnSy:
000000000000aeb8         db         "                         (useful only on systems that can change the\n                         ownership of a symlink)\n", 0 ; DATA XREF=usage+246
000000000000af2f         align      16
                     aFromcurrentown:
000000000000af30         db         "      --from=CURRENT_OWNER:CURRENT_GROUP\n                         change the owner and/or group of each file only if\n                         its current owner and/or group match those specified\n                         here.  Either may be omitted, in whi" ; DATA XREF=usage+283
000000000000b030         db         "ch case a match\n                         is not required for the omitted attribute\n", 0
000000000000b084         align      8
                     aNopreserveroot:
000000000000b088         db         "      --no-preserve-root  do not treat '/' specially (the default)\n      --preserve-root    fail to operate recursively on '/'\n", 0 ; DATA XREF=usage+320
                     aReferencerfile:
000000000000b108         db         "      --reference=RFILE  use RFILE's owner and group rather than\n                         specifying OWNER:GROUP values\n", 0 ; DATA XREF=usage+357
000000000000b181         align      8
                     aRRecursiveOper:
000000000000b188         db         "  -R, --recursive        operate on files and directories recursively\n", 0 ; DATA XREF=usage+394
000000000000b1cf         align      16
                     aNtheFollowingO:
000000000000b1d0         db         "\nThe following options modify how a hierarchy is traversed when the -R\noption is also specified.  If more than one is specified, only the final\none takes effect.\n\n  -H                     if a command line argument is a symbolic link\n                      " ; DATA XREF=usage+431
000000000000b2d0         db         "   to a directory, traverse it\n  -L                     traverse every symbolic link to a directory\n                         encountered\n  -P                     do not traverse any symbolic links (default)\n\n", 0
000000000000b3a1         align      8
                     aHelpDisplayThi:
000000000000b3a8         db         "      --help     display this help and exit\n", 0 ; DATA XREF=usage+468
000000000000b3d5         align      8
                     aVersionOutputV:
000000000000b3d8         db         "      --version  output version information and exit\n", 0 ; DATA XREF=usage+505
000000000000b40e         align      16
                     aNownerIsUnchan:
000000000000b410         db         "\nOwner is unchanged if missing.  Group is unchanged if missing, but changed\nto login group if implied by a ':' following a symbolic OWNER.\nOWNER and GROUP may be numeric as well as symbolic.\n", 0 ; DATA XREF=usage+542
                     aNexamplesnSRoo:
000000000000b4d0         db         "\nExamples:\n  %s root /u        Change the owner of /u to \"root\".\n  %s root:staff /u  Likewise, but also change its group to \"staff\".\n  %s -hR root /u    Change the owner of /u and subfiles to \"root\".\n", 0 ; DATA XREF=usage+579
000000000000b599         align      32
                     aHttpswwwgnuorg:
000000000000b5a0         db         "https://www.gnu.org/software/coreutils/", 0 ; DATA XREF=usage+839, usage+939, usage+1032, usage+1142, emit_bug_reporting_address+61
                     aReportAnyTrans:
000000000000b5c8         db         "Report any translation bugs to <https://translationproject.org/team/>\n", 0 ; DATA XREF=usage+1183
000000000000b60f         align      16
                     aOrAvailableLoc:
000000000000b610         db         "or available locally via: info '(coreutils) %s%s'\n", 0 ; DATA XREF=usage+982
000000000000b643         align      8
                     aRDereferenceRe:
000000000000b648         db         "-R --dereference requires either -H or -L", 0 ; DATA XREF=main+1224
000000000000b672         align      8
                     aFailedToGetAtt:
000000000000b678         db         "failed to get attributes of %s", 0         ; DATA XREF=main+1094, main+1278
                     aCannotAccessS:
000000000000b697         db         "cannot access %s", 0                       ; DATA XREF=sub_2f80+47
                     aCannotReadDire:
000000000000b6a8         db         "cannot read directory %s", 0               ; DATA XREF=sub_3470+23
                     aCannotDerefere:
000000000000b6c1         db         "cannot dereference %s", 0                  ; DATA XREF=sub_3470+301
                     aChangingOwners:
000000000000b6d7         db         "changing ownership of %s", 0               ; DATA XREF=sub_2fd0+714
                     aChangingGroupO:
000000000000b6f0         db         "changing group of %s", 0                   ; DATA XREF=sub_2fd0+1080
                     aNoChangeToOwne:
000000000000b705         db         "no change to ownership of %s\n", 0         ; DATA XREF=sub_3470+416
                     aGroupOfSRetain:
000000000000b723         db         "group of %s retained as %s\n", 0           ; DATA XREF=sub_2fd0+652
                     aOwnershipOfSRe_b73f:        // aOwnershipOfSRe
000000000000b73f         db         "ownership of %s retained\n", 0             ; DATA XREF=sub_3470+360
                     aFtsreadFailed:
000000000000b759         db         "fts_read failed", 0                        ; DATA XREF=chown_files+248
                     aFtscloseFailed:
000000000000b769         db         "fts_close failed", 0                       ; DATA XREF=chown_files+165
000000000000b77a         align      128
                     aItIsDangerousT:
000000000000b780         db         "it is dangerous to operate recursively on %s", 0 ; DATA XREF=sub_2b60+803, sub_2fd0+168
000000000000b7ad         align      16
                     aItIsDangerousT_b7b0:        // aItIsDangerousT
000000000000b7b0         db         "it is dangerous to operate recursively on %s (same as %s)", 0 ; DATA XREF=sub_3470+507, sub_3780+35
000000000000b7ea         align      16
                     aUseNopreserver:
000000000000b7f0         db         "use --no-preserve-root to override this failsafe", 0 ; DATA XREF=sub_2b60+842, sub_2fd0+207
000000000000b821         align      8
                     aWarningCircula:
000000000000b828         db         "WARNING: Circular directory structure.\nThis almost certainly means that you have a corrupted file system.\nNOTIFY YOUR SYSTEM MANAGER.\nThe following directory is part of the cycle:\n  %s\n", 0 ; DATA XREF=sub_2fd0+924
000000000000b8e2         align      8
                     aChangedOwnersh:
000000000000b8e8         db         "changed ownership of %s from %s to %s\n", 0 ; DATA XREF=sub_2fd0+1152
000000000000b90f         align      16
                     aChangedGroupOf:
000000000000b910         db         "changed group of %s from %s to %s\n", 0    ; DATA XREF=sub_2fd0+990
000000000000b933         align      8
                     aFailedToChange:
000000000000b938         db         "failed to change ownership of %s from %s to %s\n", 0 ; DATA XREF=sub_2fd0+586
                     aFailedToChange_b968:        // aFailedToChange
000000000000b968         db         "failed to change group of %s from %s to %s\n", 0 ; DATA XREF=sub_2fd0+1025
000000000000b994         align      8
                     aFailedToChange_b998:        // aFailedToChange
000000000000b998         db         "failed to change ownership of %s\n", 0     ; DATA XREF=sub_3470+400, sub_3470+672
000000000000b9ba         align      64
                     aFailedToChange_b9c0:        // aFailedToChange
000000000000b9c0         db         "failed to change ownership of %s to %s\n", 0 ; DATA XREF=sub_3470+179
                     aFailedToChange_b9e8:        // aFailedToChange
000000000000b9e8         db         "failed to change group of %s to %s\n", 0   ; DATA XREF=sub_3470+387
000000000000ba0c         align      16
                     aOwnershipOfSRe:
000000000000ba10         db         "ownership of %s retained as %s\n", 0       ; DATA XREF=sub_2b60+407
                     aNeitherSymboli:
000000000000ba30         db         "neither symbolic link %s nor referent has been changed\n", 0 ; DATA XREF=sub_3470+122
000000000000ba68         db  0x13 ; '.'                                         ; DATA XREF=change_file_owner+83
000000000000ba69         db  0x71 ; 'q'
000000000000ba6a         db  0xff ; '.'
000000000000ba6b         db  0xff ; '.'
000000000000ba6c         db  0xb0 ; '.'
000000000000ba6d         db  0x73 ; 's'
000000000000ba6e         db  0xff ; '.'
000000000000ba6f         db  0xff ; '.'
000000000000ba70         db  0xf8 ; '.'
000000000000ba71         db  0x70 ; 'p'
000000000000ba72         db  0xff ; '.'
000000000000ba73         db  0xff ; '.'
000000000000ba74         db  0x13 ; '.'
000000000000ba75         db  0x71 ; 'q'
000000000000ba76         db  0xff ; '.'
000000000000ba77         db  0xff ; '.'
000000000000ba78         db  0x88 ; '.'
000000000000ba79         db  0x74 ; 't'
000000000000ba7a         db  0xff ; '.'
000000000000ba7b         db  0xff ; '.'
000000000000ba7c         db  0x13 ; '.'
000000000000ba7d         db  0x71 ; 'q'
000000000000ba7e         db  0xff ; '.'
000000000000ba7f         db  0xff ; '.'
000000000000ba80         db  0x68 ; 'h'
000000000000ba81         db  0x75 ; 'u'
000000000000ba82         db  0xff ; '.'
000000000000ba83         db  0xff ; '.'
000000000000ba84         db  0xd8 ; '.'
000000000000ba85         db  0x74 ; 't'
000000000000ba86         db  0xff ; '.'
000000000000ba87         db  0xff ; '.'
000000000000ba88         db  0x13 ; '.'
000000000000ba89         db  0x71 ; 'q'
000000000000ba8a         db  0xff ; '.'
000000000000ba8b         db  0xff ; '.'
000000000000ba8c         db  0x13 ; '.'
000000000000ba8d         db  0x71 ; 'q'
000000000000ba8e         db  0xff ; '.'
000000000000ba8f         db  0xff ; '.'
000000000000ba90         db  0x18 ; '.'
000000000000ba91         db  0x75 ; 'u'
000000000000ba92         db  0xff ; '.'
000000000000ba93         db  0xff ; '.'
                     a831:
000000000000ba94         db         "8.31", 0                                   ; DATA XREF=Version
                     aWriteError:
000000000000ba99         db         "write error", 0                            ; DATA XREF=close_stdout+67
000000000000baa5         align      8
                     aANullArgv0WasP:
000000000000baa8         db         "A NULL argv[0] was passed through an exec system call.\n", 0 ; DATA XREF=set_program_name+132
                     aLibs:
000000000000bae0         db         "/.libs/", 0                                ; DATA XREF=set_program_name+44
000000000000bae8         db  0x6c ; 'l'                                         ; DATA XREF=set_program_name+68
000000000000bae9         db  0x74 ; 't'
000000000000baea         db  0x2d ; '-'
000000000000baeb         db  0x00 ; '.'
000000000000baec         db  0xe2 ; '.'                                         ; DATA XREF=gettext_quote.part.1+206
000000000000baed         db  0x80 ; '.'
000000000000baee         db  0x98 ; '.'
000000000000baef         db  0x00 ; '.'
000000000000baf0         db  0xe2 ; '.'                                         ; DATA XREF=gettext_quote.part.1+213
000000000000baf1         db  0x80 ; '.'
000000000000baf2         db  0x99 ; '.'
000000000000baf3         db  0x00 ; '.'
000000000000baf4         db  0xa1 ; '.'                                         ; DATA XREF=gettext_quote.part.1+116
000000000000baf5         db  0x07 ; '.'
000000000000baf6         db  0x65 ; 'e'
000000000000baf7         db  0x00 ; '.'
000000000000baf8         db  0xa1 ; '.'                                         ; DATA XREF=gettext_quote.part.1+123
000000000000baf9         db  0xaf ; '.'
000000000000bafa         db  0x00 ; '.'
000000000000bafb         db  0x22 ; '"'                                         ; DATA XREF=gettext_quote.part.1+32, sub_4390+1451, sub_4390+1493, sub_4390+2429
000000000000bafc         db  0x00 ; '.'
000000000000bafd         db  0x27 ; '''                                         ; DATA XREF=gettext_quote.part.1+39, quotearg_buffer_restyled+179, sub_4390+132, sub_4390+1338, sub_4390+1670, sub_4390+1697, sub_4390+2352
000000000000bafe         db  0x00 ; '.'
000000000000baff         db  0x60 ; '`'                                         ; DATA XREF=sub_4390+1627, sub_4390+1654
000000000000bb00         db  0x00 ; '.'
                     aLiteral:
000000000000bb01         db         "literal", 0
                     aShell:
000000000000bb09         db         "shell", 0
                     aShellalways:
000000000000bb0f         db         "shell-always", 0
000000000000bb1c         db  0x73 ; 's'
000000000000bb1d         db  0x68 ; 'h'
000000000000bb1e         db  0x65 ; 'e'
000000000000bb1f         db  0x6c ; 'l'
000000000000bb20         db  0x6c ; 'l'
000000000000bb21         db  0x2d ; '-'
                     aEscape:
000000000000bb22         db         "escape", 0
                     aShellescapealw:
000000000000bb29         db         "shell-escape-always", 0
                     aCmaybe:
000000000000bb3d         db         "c-maybe", 0
                     aClocale:
000000000000bb45         db         "clocale", 0
000000000000bb4d         align      32
                     switch_table_bb60:        // switch_table
000000000000bb60         dd         quotearg_buffer_restyled.loc_4a8a-switch_table_bb60, quotearg_buffer_restyled.loc_3ce3-switch_table_bb60, quotearg_buffer_restyled.loc_4cb8-switch_table_bb60, quotearg_buffer_restyled.loc_4ac4-switch_table_bb60 ; switch table used at 0x3ce1 containing 11 entries, DATA XREF=quotearg_buffer_restyled+128
000000000000bb70         dd         quotearg_buffer_restyled.loc_48b4-switch_table_bb60, quotearg_buffer_restyled.loc_4910-switch_table_bb60, quotearg_buffer_restyled.loc_4965-switch_table_bb60, quotearg_buffer_restyled.loc_49aa-switch_table_bb60
000000000000bb80         dd         3 dup (quotearg_buffer_restyled.loc_49e4-switch_table_bb60)
000000000000bb8c         db  0xd4 ; '.'                                         ; DATA XREF=quotearg_buffer_restyled+477
000000000000bb8d         db  0x84 ; '.'
000000000000bb8e         db  0xff ; '.'
000000000000bb8f         db  0xff ; '.'
000000000000bb90         db  0xbc ; '.'
000000000000bb91         db  0x85 ; '.'
000000000000bb92         db  0xff ; '.'
000000000000bb93         db  0xff ; '.'
000000000000bb94         db  0xbc ; '.'
000000000000bb95         db  0x85 ; '.'
000000000000bb96         db  0xff ; '.'
000000000000bb97         db  0xff ; '.'
000000000000bb98         db  0xbc ; '.'
000000000000bb99         db  0x85 ; '.'
000000000000bb9a         db  0xff ; '.'
000000000000bb9b         db  0xff ; '.'
000000000000bb9c         db  0xbc ; '.'
000000000000bb9d         db  0x85 ; '.'
000000000000bb9e         db  0xff ; '.'
000000000000bb9f         db  0xff ; '.'
000000000000bba0         db  0xbc ; '.'
000000000000bba1         db  0x85 ; '.'
000000000000bba2         db  0xff ; '.'
000000000000bba3         db  0xff ; '.'
000000000000bba4         db  0xbc ; '.'
000000000000bba5         db  0x85 ; '.'
000000000000bba6         db  0xff ; '.'
000000000000bba7         db  0xff ; '.'
000000000000bba8         db  0x14 ; '.'
000000000000bba9         db  0x85 ; '.'
000000000000bbaa         db  0xff ; '.'
000000000000bbab         db  0xff ; '.'
000000000000bbac         db  0x1c ; '.'
000000000000bbad         db  0x84 ; '.'
000000000000bbae         db  0xff ; '.'
000000000000bbaf         db  0xff ; '.'
000000000000bbb0         db  0xdc ; '.'
000000000000bbb1         db  0x83 ; '.'
000000000000bbb2         db  0xff ; '.'
000000000000bbb3         db  0xff ; '.'
000000000000bbb4         db  0xa4 ; '.'
000000000000bbb5         db  0x85 ; '.'
000000000000bbb6         db  0xff ; '.'
000000000000bbb7         db  0xff ; '.'
000000000000bbb8         db  0x94 ; '.'
000000000000bbb9         db  0x85 ; '.'
000000000000bbba         db  0xff ; '.'
000000000000bbbb         db  0xff ; '.'
000000000000bbbc         db  0x84 ; '.'
000000000000bbbd         db  0x85 ; '.'
000000000000bbbe         db  0xff ; '.'
000000000000bbbf         db  0xff ; '.'
000000000000bbc0         db  0x74 ; 't'
000000000000bbc1         db  0x85 ; '.'
000000000000bbc2         db  0xff ; '.'
000000000000bbc3         db  0xff ; '.'
000000000000bbc4         db  0xbc ; '.'
000000000000bbc5         db  0x85 ; '.'
000000000000bbc6         db  0xff ; '.'
000000000000bbc7         db  0xff ; '.'
000000000000bbc8         db  0xbc ; '.'
000000000000bbc9         db  0x85 ; '.'
000000000000bbca         db  0xff ; '.'
000000000000bbcb         db  0xff ; '.'
000000000000bbcc         db  0xbc ; '.'
000000000000bbcd         db  0x85 ; '.'
000000000000bbce         db  0xff ; '.'
000000000000bbcf         db  0xff ; '.'
000000000000bbd0         db  0xbc ; '.'
000000000000bbd1         db  0x85 ; '.'
000000000000bbd2         db  0xff ; '.'
000000000000bbd3         db  0xff ; '.'
000000000000bbd4         db  0xbc ; '.'
000000000000bbd5         db  0x85 ; '.'
000000000000bbd6         db  0xff ; '.'
000000000000bbd7         db  0xff ; '.'
000000000000bbd8         db  0xbc ; '.'
000000000000bbd9         db  0x85 ; '.'
000000000000bbda         db  0xff ; '.'
000000000000bbdb         db  0xff ; '.'
000000000000bbdc         db  0xbc ; '.'
000000000000bbdd         db  0x85 ; '.'
000000000000bbde         db  0xff ; '.'
000000000000bbdf         db  0xff ; '.'
000000000000bbe0         db  0xbc ; '.'
000000000000bbe1         db  0x85 ; '.'
000000000000bbe2         db  0xff ; '.'
000000000000bbe3         db  0xff ; '.'
000000000000bbe4         db  0xbc ; '.'
000000000000bbe5         db  0x85 ; '.'
000000000000bbe6         db  0xff ; '.'
000000000000bbe7         db  0xff ; '.'
000000000000bbe8         db  0xbc ; '.'
000000000000bbe9         db  0x85 ; '.'
000000000000bbea         db  0xff ; '.'
000000000000bbeb         db  0xff ; '.'
000000000000bbec         db  0xbc ; '.'
000000000000bbed         db  0x85 ; '.'
000000000000bbee         db  0xff ; '.'
000000000000bbef         db  0xff ; '.'
000000000000bbf0         db  0xbc ; '.'
000000000000bbf1         db  0x85 ; '.'
000000000000bbf2         db  0xff ; '.'
000000000000bbf3         db  0xff ; '.'
000000000000bbf4         db  0xbc ; '.'
000000000000bbf5         db  0x85 ; '.'
000000000000bbf6         db  0xff ; '.'
000000000000bbf7         db  0xff ; '.'
000000000000bbf8         db  0xbc ; '.'
000000000000bbf9         db  0x85 ; '.'
000000000000bbfa         db  0xff ; '.'
000000000000bbfb         db  0xff ; '.'
000000000000bbfc         db  0xbc ; '.'
000000000000bbfd         db  0x85 ; '.'
000000000000bbfe         db  0xff ; '.'
000000000000bbff         db  0xff ; '.'
000000000000bc00         db  0xbc ; '.'
000000000000bc01         db  0x85 ; '.'
000000000000bc02         db  0xff ; '.'
000000000000bc03         db  0xff ; '.'
000000000000bc04         db  0xbc ; '.'
000000000000bc05         db  0x85 ; '.'
000000000000bc06         db  0xff ; '.'
000000000000bc07         db  0xff ; '.'
000000000000bc08         db  0xbc ; '.'
000000000000bc09         db  0x85 ; '.'
000000000000bc0a         db  0xff ; '.'
000000000000bc0b         db  0xff ; '.'
000000000000bc0c         db  0x64 ; 'd'
000000000000bc0d         db  0x85 ; '.'
000000000000bc0e         db  0xff ; '.'
000000000000bc0f         db  0xff ; '.'
000000000000bc10         db  0x54 ; 'T'
000000000000bc11         db  0x85 ; '.'
000000000000bc12         db  0xff ; '.'
000000000000bc13         db  0xff ; '.'
000000000000bc14         db  0x54 ; 'T'
000000000000bc15         db  0x85 ; '.'
000000000000bc16         db  0xff ; '.'
000000000000bc17         db  0xff ; '.'
000000000000bc18         db  0x24 ; '$'
000000000000bc19         db  0x85 ; '.'
000000000000bc1a         db  0xff ; '.'
000000000000bc1b         db  0xff ; '.'
000000000000bc1c         db  0x54 ; 'T'
000000000000bc1d         db  0x85 ; '.'
000000000000bc1e         db  0xff ; '.'
000000000000bc1f         db  0xff ; '.'
000000000000bc20         db  0xfc ; '.'
000000000000bc21         db  0x84 ; '.'
000000000000bc22         db  0xff ; '.'
000000000000bc23         db  0xff ; '.'
000000000000bc24         db  0x54 ; 'T'
000000000000bc25         db  0x85 ; '.'
000000000000bc26         db  0xff ; '.'
000000000000bc27         db  0xff ; '.'
000000000000bc28         db  0xb7 ; '.'
000000000000bc29         db  0x83 ; '.'
000000000000bc2a         db  0xff ; '.'
000000000000bc2b         db  0xff ; '.'
000000000000bc2c         db  0x54 ; 'T'
000000000000bc2d         db  0x85 ; '.'
000000000000bc2e         db  0xff ; '.'
000000000000bc2f         db  0xff ; '.'
000000000000bc30         db  0x54 ; 'T'
000000000000bc31         db  0x85 ; '.'
000000000000bc32         db  0xff ; '.'
000000000000bc33         db  0xff ; '.'
000000000000bc34         db  0x54 ; 'T'
000000000000bc35         db  0x85 ; '.'
000000000000bc36         db  0xff ; '.'
000000000000bc37         db  0xff ; '.'
000000000000bc38         db  0xfc ; '.'
000000000000bc39         db  0x84 ; '.'
000000000000bc3a         db  0xff ; '.'
000000000000bc3b         db  0xff ; '.'
000000000000bc3c         db  0xfc ; '.'
000000000000bc3d         db  0x84 ; '.'
000000000000bc3e         db  0xff ; '.'
000000000000bc3f         db  0xff ; '.'
000000000000bc40         db  0xfc ; '.'
000000000000bc41         db  0x84 ; '.'
000000000000bc42         db  0xff ; '.'
000000000000bc43         db  0xff ; '.'
000000000000bc44         db  0xfc ; '.'
000000000000bc45         db  0x84 ; '.'
000000000000bc46         db  0xff ; '.'
000000000000bc47         db  0xff ; '.'
000000000000bc48         db  0xfc ; '.'
000000000000bc49         db  0x84 ; '.'
000000000000bc4a         db  0xff ; '.'
000000000000bc4b         db  0xff ; '.'
000000000000bc4c         db  0xfc ; '.'
000000000000bc4d         db  0x84 ; '.'
000000000000bc4e         db  0xff ; '.'
000000000000bc4f         db  0xff ; '.'
000000000000bc50         db  0xfc ; '.'
000000000000bc51         db  0x84 ; '.'
000000000000bc52         db  0xff ; '.'
000000000000bc53         db  0xff ; '.'
000000000000bc54         db  0xfc ; '.'
000000000000bc55         db  0x84 ; '.'
000000000000bc56         db  0xff ; '.'
000000000000bc57         db  0xff ; '.'
000000000000bc58         db  0xfc ; '.'
000000000000bc59         db  0x84 ; '.'
000000000000bc5a         db  0xff ; '.'
000000000000bc5b         db  0xff ; '.'
000000000000bc5c         db  0xfc ; '.'
000000000000bc5d         db  0x84 ; '.'
000000000000bc5e         db  0xff ; '.'
000000000000bc5f         db  0xff ; '.'
000000000000bc60         db  0xfc ; '.'
000000000000bc61         db  0x84 ; '.'
000000000000bc62         db  0xff ; '.'
000000000000bc63         db  0xff ; '.'
000000000000bc64         db  0xfc ; '.'
000000000000bc65         db  0x84 ; '.'
000000000000bc66         db  0xff ; '.'
000000000000bc67         db  0xff ; '.'
000000000000bc68         db  0xfc ; '.'
000000000000bc69         db  0x84 ; '.'
000000000000bc6a         db  0xff ; '.'
000000000000bc6b         db  0xff ; '.'
000000000000bc6c         db  0xfc ; '.'
000000000000bc6d         db  0x84 ; '.'
000000000000bc6e         db  0xff ; '.'
000000000000bc6f         db  0xff ; '.'
000000000000bc70         db  0xfc ; '.'
000000000000bc71         db  0x84 ; '.'
000000000000bc72         db  0xff ; '.'
000000000000bc73         db  0xff ; '.'
000000000000bc74         db  0xfc ; '.'
000000000000bc75         db  0x84 ; '.'
000000000000bc76         db  0xff ; '.'
000000000000bc77         db  0xff ; '.'
000000000000bc78         db  0x54 ; 'T'
000000000000bc79         db  0x85 ; '.'
000000000000bc7a         db  0xff ; '.'
000000000000bc7b         db  0xff ; '.'
000000000000bc7c         db  0x54 ; 'T'
000000000000bc7d         db  0x85 ; '.'
000000000000bc7e         db  0xff ; '.'
000000000000bc7f         db  0xff ; '.'
000000000000bc80         db  0x54 ; 'T'
000000000000bc81         db  0x85 ; '.'
000000000000bc82         db  0xff ; '.'
000000000000bc83         db  0xff ; '.'
000000000000bc84         db  0x54 ; 'T'
000000000000bc85         db  0x85 ; '.'
000000000000bc86         db  0xff ; '.'
000000000000bc87         db  0xff ; '.'
000000000000bc88         db  0x87 ; '.'
000000000000bc89         db  0x83 ; '.'
000000000000bc8a         db  0xff ; '.'
000000000000bc8b         db  0xff ; '.'
000000000000bc8c         db  0xbc ; '.'
000000000000bc8d         db  0x85 ; '.'
000000000000bc8e         db  0xff ; '.'
000000000000bc8f         db  0xff ; '.'
000000000000bc90         db  0xfc ; '.'
000000000000bc91         db  0x84 ; '.'
000000000000bc92         db  0xff ; '.'
000000000000bc93         db  0xff ; '.'
000000000000bc94         db  0xfc ; '.'
000000000000bc95         db  0x84 ; '.'
000000000000bc96         db  0xff ; '.'
000000000000bc97         db  0xff ; '.'
000000000000bc98         db  0xfc ; '.'
000000000000bc99         db  0x84 ; '.'
000000000000bc9a         db  0xff ; '.'
000000000000bc9b         db  0xff ; '.'
000000000000bc9c         db  0xfc ; '.'
000000000000bc9d         db  0x84 ; '.'
000000000000bc9e         db  0xff ; '.'
000000000000bc9f         db  0xff ; '.'
000000000000bca0         db  0xfc ; '.'
000000000000bca1         db  0x84 ; '.'
000000000000bca2         db  0xff ; '.'
000000000000bca3         db  0xff ; '.'
000000000000bca4         db  0xfc ; '.'
000000000000bca5         db  0x84 ; '.'
000000000000bca6         db  0xff ; '.'
000000000000bca7         db  0xff ; '.'
000000000000bca8         db  0xfc ; '.'
000000000000bca9         db  0x84 ; '.'
000000000000bcaa         db  0xff ; '.'
000000000000bcab         db  0xff ; '.'
000000000000bcac         db  0xfc ; '.'
000000000000bcad         db  0x84 ; '.'
000000000000bcae         db  0xff ; '.'
000000000000bcaf         db  0xff ; '.'
000000000000bcb0         db  0xfc ; '.'
000000000000bcb1         db  0x84 ; '.'
000000000000bcb2         db  0xff ; '.'
000000000000bcb3         db  0xff ; '.'
000000000000bcb4         db  0xfc ; '.'
000000000000bcb5         db  0x84 ; '.'
000000000000bcb6         db  0xff ; '.'
000000000000bcb7         db  0xff ; '.'
000000000000bcb8         db  0xfc ; '.'
000000000000bcb9         db  0x84 ; '.'
000000000000bcba         db  0xff ; '.'
000000000000bcbb         db  0xff ; '.'
000000000000bcbc         db  0xfc ; '.'
000000000000bcbd         db  0x84 ; '.'
000000000000bcbe         db  0xff ; '.'
000000000000bcbf         db  0xff ; '.'
000000000000bcc0         db  0xfc ; '.'
000000000000bcc1         db  0x84 ; '.'
000000000000bcc2         db  0xff ; '.'
000000000000bcc3         db  0xff ; '.'
000000000000bcc4         db  0xfc ; '.'
000000000000bcc5         db  0x84 ; '.'
000000000000bcc6         db  0xff ; '.'
000000000000bcc7         db  0xff ; '.'
000000000000bcc8         db  0xfc ; '.'
000000000000bcc9         db  0x84 ; '.'
000000000000bcca         db  0xff ; '.'
000000000000bccb         db  0xff ; '.'
000000000000bccc         db  0xfc ; '.'
000000000000bccd         db  0x84 ; '.'
000000000000bcce         db  0xff ; '.'
000000000000bccf         db  0xff ; '.'
000000000000bcd0         db  0xfc ; '.'
000000000000bcd1         db  0x84 ; '.'
000000000000bcd2         db  0xff ; '.'
000000000000bcd3         db  0xff ; '.'
000000000000bcd4         db  0xfc ; '.'
000000000000bcd5         db  0x84 ; '.'
000000000000bcd6         db  0xff ; '.'
000000000000bcd7         db  0xff ; '.'
000000000000bcd8         db  0xfc ; '.'
000000000000bcd9         db  0x84 ; '.'
000000000000bcda         db  0xff ; '.'
000000000000bcdb         db  0xff ; '.'
000000000000bcdc         db  0xfc ; '.'
000000000000bcdd         db  0x84 ; '.'
000000000000bcde         db  0xff ; '.'
000000000000bcdf         db  0xff ; '.'
000000000000bce0         db  0xfc ; '.'
000000000000bce1         db  0x84 ; '.'
000000000000bce2         db  0xff ; '.'
000000000000bce3         db  0xff ; '.'
000000000000bce4         db  0xfc ; '.'
000000000000bce5         db  0x84 ; '.'
000000000000bce6         db  0xff ; '.'
000000000000bce7         db  0xff ; '.'
000000000000bce8         db  0xfc ; '.'
000000000000bce9         db  0x84 ; '.'
000000000000bcea         db  0xff ; '.'
000000000000bceb         db  0xff ; '.'
000000000000bcec         db  0xfc ; '.'
000000000000bced         db  0x84 ; '.'
000000000000bcee         db  0xff ; '.'
000000000000bcef         db  0xff ; '.'
000000000000bcf0         db  0xfc ; '.'
000000000000bcf1         db  0x84 ; '.'
000000000000bcf2         db  0xff ; '.'
000000000000bcf3         db  0xff ; '.'
000000000000bcf4         db  0xfc ; '.'
000000000000bcf5         db  0x84 ; '.'
000000000000bcf6         db  0xff ; '.'
000000000000bcf7         db  0xff ; '.'
000000000000bcf8         db  0x54 ; 'T'
000000000000bcf9         db  0x85 ; '.'
000000000000bcfa         db  0xff ; '.'
000000000000bcfb         db  0xff ; '.'
000000000000bcfc         db  0x2c ; ','
000000000000bcfd         db  0x84 ; '.'
000000000000bcfe         db  0xff ; '.'
000000000000bcff         db  0xff ; '.'
000000000000bd00         db  0xfc ; '.'
000000000000bd01         db  0x84 ; '.'
000000000000bd02         db  0xff ; '.'
000000000000bd03         db  0xff ; '.'
000000000000bd04         db  0x54 ; 'T'
000000000000bd05         db  0x85 ; '.'
000000000000bd06         db  0xff ; '.'
000000000000bd07         db  0xff ; '.'
000000000000bd08         db  0xfc ; '.'
000000000000bd09         db  0x84 ; '.'
000000000000bd0a         db  0xff ; '.'
000000000000bd0b         db  0xff ; '.'
000000000000bd0c         db  0x54 ; 'T'
000000000000bd0d         db  0x85 ; '.'
000000000000bd0e         db  0xff ; '.'
000000000000bd0f         db  0xff ; '.'
000000000000bd10         db  0xfc ; '.'
000000000000bd11         db  0x84 ; '.'
000000000000bd12         db  0xff ; '.'
000000000000bd13         db  0xff ; '.'
000000000000bd14         db  0xfc ; '.'
000000000000bd15         db  0x84 ; '.'
000000000000bd16         db  0xff ; '.'
000000000000bd17         db  0xff ; '.'
000000000000bd18         db  0xfc ; '.'
000000000000bd19         db  0x84 ; '.'
000000000000bd1a         db  0xff ; '.'
000000000000bd1b         db  0xff ; '.'
000000000000bd1c         db  0xfc ; '.'
000000000000bd1d         db  0x84 ; '.'
000000000000bd1e         db  0xff ; '.'
000000000000bd1f         db  0xff ; '.'
000000000000bd20         db  0xfc ; '.'
000000000000bd21         db  0x84 ; '.'
000000000000bd22         db  0xff ; '.'
000000000000bd23         db  0xff ; '.'
000000000000bd24         db  0xfc ; '.'
000000000000bd25         db  0x84 ; '.'
000000000000bd26         db  0xff ; '.'
000000000000bd27         db  0xff ; '.'
000000000000bd28         db  0xfc ; '.'
000000000000bd29         db  0x84 ; '.'
000000000000bd2a         db  0xff ; '.'
000000000000bd2b         db  0xff ; '.'
000000000000bd2c         db  0xfc ; '.'
000000000000bd2d         db  0x84 ; '.'
000000000000bd2e         db  0xff ; '.'
000000000000bd2f         db  0xff ; '.'
000000000000bd30         db  0xfc ; '.'
000000000000bd31         db  0x84 ; '.'
000000000000bd32         db  0xff ; '.'
000000000000bd33         db  0xff ; '.'
000000000000bd34         db  0xfc ; '.'
000000000000bd35         db  0x84 ; '.'
000000000000bd36         db  0xff ; '.'
000000000000bd37         db  0xff ; '.'
000000000000bd38         db  0xfc ; '.'
000000000000bd39         db  0x84 ; '.'
000000000000bd3a         db  0xff ; '.'
000000000000bd3b         db  0xff ; '.'
000000000000bd3c         db  0xfc ; '.'
000000000000bd3d         db  0x84 ; '.'
000000000000bd3e         db  0xff ; '.'
000000000000bd3f         db  0xff ; '.'
000000000000bd40         db  0xfc ; '.'
000000000000bd41         db  0x84 ; '.'
000000000000bd42         db  0xff ; '.'
000000000000bd43         db  0xff ; '.'
000000000000bd44         db  0xfc ; '.'
000000000000bd45         db  0x84 ; '.'
000000000000bd46         db  0xff ; '.'
000000000000bd47         db  0xff ; '.'
000000000000bd48         db  0xfc ; '.'
000000000000bd49         db  0x84 ; '.'
000000000000bd4a         db  0xff ; '.'
000000000000bd4b         db  0xff ; '.'
000000000000bd4c         db  0xfc ; '.'
000000000000bd4d         db  0x84 ; '.'
000000000000bd4e         db  0xff ; '.'
000000000000bd4f         db  0xff ; '.'
000000000000bd50         db  0xfc ; '.'
000000000000bd51         db  0x84 ; '.'
000000000000bd52         db  0xff ; '.'
000000000000bd53         db  0xff ; '.'
000000000000bd54         db  0xfc ; '.'
000000000000bd55         db  0x84 ; '.'
000000000000bd56         db  0xff ; '.'
000000000000bd57         db  0xff ; '.'
000000000000bd58         db  0xfc ; '.'
000000000000bd59         db  0x84 ; '.'
000000000000bd5a         db  0xff ; '.'
000000000000bd5b         db  0xff ; '.'
000000000000bd5c         db  0xfc ; '.'
000000000000bd5d         db  0x84 ; '.'
000000000000bd5e         db  0xff ; '.'
000000000000bd5f         db  0xff ; '.'
000000000000bd60         db  0xfc ; '.'
000000000000bd61         db  0x84 ; '.'
000000000000bd62         db  0xff ; '.'
000000000000bd63         db  0xff ; '.'
000000000000bd64         db  0xfc ; '.'
000000000000bd65         db  0x84 ; '.'
000000000000bd66         db  0xff ; '.'
000000000000bd67         db  0xff ; '.'
000000000000bd68         db  0xfc ; '.'
000000000000bd69         db  0x84 ; '.'
000000000000bd6a         db  0xff ; '.'
000000000000bd6b         db  0xff ; '.'
000000000000bd6c         db  0xfc ; '.'
000000000000bd6d         db  0x84 ; '.'
000000000000bd6e         db  0xff ; '.'
000000000000bd6f         db  0xff ; '.'
000000000000bd70         db  0xfc ; '.'
000000000000bd71         db  0x84 ; '.'
000000000000bd72         db  0xff ; '.'
000000000000bd73         db  0xff ; '.'
000000000000bd74         db  0xfc ; '.'
000000000000bd75         db  0x84 ; '.'
000000000000bd76         db  0xff ; '.'
000000000000bd77         db  0xff ; '.'
000000000000bd78         db  0xb7 ; '.'
000000000000bd79         db  0x82 ; '.'
000000000000bd7a         db  0xff ; '.'
000000000000bd7b         db  0xff ; '.'
000000000000bd7c         db  0x54 ; 'T'
000000000000bd7d         db  0x85 ; '.'
000000000000bd7e         db  0xff ; '.'
000000000000bd7f         db  0xff ; '.'
000000000000bd80         db  0xb7 ; '.'
000000000000bd81         db  0x82 ; '.'
000000000000bd82         db  0xff ; '.'
000000000000bd83         db  0xff ; '.'
000000000000bd84         db  0x24 ; '$'
000000000000bd85         db  0x85 ; '.'
000000000000bd86         db  0xff ; '.'
000000000000bd87         db  0xff ; '.'
000000000000bd88         db  0xa8 ; '.'                                         ; DATA XREF=sub_4130+137
000000000000bd89         db  0x84 ; '.'
000000000000bd8a         db  0xff ; '.'
000000000000bd8b         db  0xff ; '.'
000000000000bd8c         db  0xb8 ; '.'
000000000000bd8d         db  0x83 ; '.'
000000000000bd8e         db  0xff ; '.'
000000000000bd8f         db  0xff ; '.'
000000000000bd90         db  0xb8 ; '.'
000000000000bd91         db  0x83 ; '.'
000000000000bd92         db  0xff ; '.'
000000000000bd93         db  0xff ; '.'
000000000000bd94         db  0xb8 ; '.'
000000000000bd95         db  0x83 ; '.'
000000000000bd96         db  0xff ; '.'
000000000000bd97         db  0xff ; '.'
000000000000bd98         db  0xb8 ; '.'
000000000000bd99         db  0x83 ; '.'
000000000000bd9a         db  0xff ; '.'
000000000000bd9b         db  0xff ; '.'
000000000000bd9c         db  0xb8 ; '.'
000000000000bd9d         db  0x83 ; '.'
000000000000bd9e         db  0xff ; '.'
000000000000bd9f         db  0xff ; '.'
000000000000bda0         db  0xb8 ; '.'
000000000000bda1         db  0x83 ; '.'
000000000000bda2         db  0xff ; '.'
000000000000bda3         db  0xff ; '.'
000000000000bda4         db  0x98 ; '.'
000000000000bda5         db  0x84 ; '.'
000000000000bda6         db  0xff ; '.'
000000000000bda7         db  0xff ; '.'
000000000000bda8         db  0xe8 ; '.'
000000000000bda9         db  0x85 ; '.'
000000000000bdaa         db  0xff ; '.'
000000000000bdab         db  0xff ; '.'
000000000000bdac         db  0xd0 ; '.'
000000000000bdad         db  0x85 ; '.'
000000000000bdae         db  0xff ; '.'
000000000000bdaf         db  0xff ; '.'
000000000000bdb0         db  0x80 ; '.'
000000000000bdb1         db  0x84 ; '.'
000000000000bdb2         db  0xff ; '.'
000000000000bdb3         db  0xff ; '.'
000000000000bdb4         db  0xc0 ; '.'
000000000000bdb5         db  0x85 ; '.'
000000000000bdb6         db  0xff ; '.'
000000000000bdb7         db  0xff ; '.'
000000000000bdb8         db  0x68 ; 'h'
000000000000bdb9         db  0x84 ; '.'
000000000000bdba         db  0xff ; '.'
000000000000bdbb         db  0xff ; '.'
000000000000bdbc         db  0xa8 ; '.'
000000000000bdbd         db  0x85 ; '.'
000000000000bdbe         db  0xff ; '.'
000000000000bdbf         db  0xff ; '.'
000000000000bdc0         db  0xb8 ; '.'
000000000000bdc1         db  0x83 ; '.'
000000000000bdc2         db  0xff ; '.'
000000000000bdc3         db  0xff ; '.'
000000000000bdc4         db  0xb8 ; '.'
000000000000bdc5         db  0x83 ; '.'
000000000000bdc6         db  0xff ; '.'
000000000000bdc7         db  0xff ; '.'
000000000000bdc8         db  0xb8 ; '.'
000000000000bdc9         db  0x83 ; '.'
000000000000bdca         db  0xff ; '.'
000000000000bdcb         db  0xff ; '.'
000000000000bdcc         db  0xb8 ; '.'
000000000000bdcd         db  0x83 ; '.'
000000000000bdce         db  0xff ; '.'
000000000000bdcf         db  0xff ; '.'
000000000000bdd0         db  0xb8 ; '.'
000000000000bdd1         db  0x83 ; '.'
000000000000bdd2         db  0xff ; '.'
000000000000bdd3         db  0xff ; '.'
000000000000bdd4         db  0xb8 ; '.'
000000000000bdd5         db  0x83 ; '.'
000000000000bdd6         db  0xff ; '.'
000000000000bdd7         db  0xff ; '.'
000000000000bdd8         db  0xb8 ; '.'
000000000000bdd9         db  0x83 ; '.'
000000000000bdda         db  0xff ; '.'
000000000000bddb         db  0xff ; '.'
000000000000bddc         db  0xb8 ; '.'
000000000000bddd         db  0x83 ; '.'
000000000000bdde         db  0xff ; '.'
000000000000bddf         db  0xff ; '.'
000000000000bde0         db  0xb8 ; '.'
000000000000bde1         db  0x83 ; '.'
000000000000bde2         db  0xff ; '.'
000000000000bde3         db  0xff ; '.'
000000000000bde4         db  0xb8 ; '.'
000000000000bde5         db  0x83 ; '.'
000000000000bde6         db  0xff ; '.'
000000000000bde7         db  0xff ; '.'
000000000000bde8         db  0xb8 ; '.'
000000000000bde9         db  0x83 ; '.'
000000000000bdea         db  0xff ; '.'
000000000000bdeb         db  0xff ; '.'
000000000000bdec         db  0xb8 ; '.'
000000000000bded         db  0x83 ; '.'
000000000000bdee         db  0xff ; '.'
000000000000bdef         db  0xff ; '.'
000000000000bdf0         db  0xb8 ; '.'
000000000000bdf1         db  0x83 ; '.'
000000000000bdf2         db  0xff ; '.'
000000000000bdf3         db  0xff ; '.'
000000000000bdf4         db  0xb8 ; '.'
000000000000bdf5         db  0x83 ; '.'
000000000000bdf6         db  0xff ; '.'
000000000000bdf7         db  0xff ; '.'
000000000000bdf8         db  0xb8 ; '.'
000000000000bdf9         db  0x83 ; '.'
000000000000bdfa         db  0xff ; '.'
000000000000bdfb         db  0xff ; '.'
000000000000bdfc         db  0xb8 ; '.'
000000000000bdfd         db  0x83 ; '.'
000000000000bdfe         db  0xff ; '.'
000000000000bdff         db  0xff ; '.'
000000000000be00         db  0xb8 ; '.'
000000000000be01         db  0x83 ; '.'
000000000000be02         db  0xff ; '.'
000000000000be03         db  0xff ; '.'
000000000000be04         db  0xb8 ; '.'
000000000000be05         db  0x83 ; '.'
000000000000be06         db  0xff ; '.'
000000000000be07         db  0xff ; '.'
000000000000be08         db  0x90 ; '.'
000000000000be09         db  0x85 ; '.'
000000000000be0a         db  0xff ; '.'
000000000000be0b         db  0xff ; '.'
000000000000be0c         db  0x78 ; 'x'
000000000000be0d         db  0x85 ; '.'
000000000000be0e         db  0xff ; '.'
000000000000be0f         db  0xff ; '.'
000000000000be10         db  0x78 ; 'x'
000000000000be11         db  0x85 ; '.'
000000000000be12         db  0xff ; '.'
000000000000be13         db  0xff ; '.'
000000000000be14         db  0x60 ; '`'
000000000000be15         db  0x85 ; '.'
000000000000be16         db  0xff ; '.'
000000000000be17         db  0xff ; '.'
000000000000be18         db  0x78 ; 'x'
000000000000be19         db  0x85 ; '.'
000000000000be1a         db  0xff ; '.'
000000000000be1b         db  0xff ; '.'
000000000000be1c         db  0x48 ; 'H'
000000000000be1d         db  0x85 ; '.'
000000000000be1e         db  0xff ; '.'
000000000000be1f         db  0xff ; '.'
000000000000be20         db  0x78 ; 'x'
000000000000be21         db  0x85 ; '.'
000000000000be22         db  0xff ; '.'
000000000000be23         db  0xff ; '.'
000000000000be24         db  0xb8 ; '.'
000000000000be25         db  0x81 ; '.'
000000000000be26         db  0xff ; '.'
000000000000be27         db  0xff ; '.'
000000000000be28         db  0x78 ; 'x'
000000000000be29         db  0x85 ; '.'
000000000000be2a         db  0xff ; '.'
000000000000be2b         db  0xff ; '.'
000000000000be2c         db  0x78 ; 'x'
000000000000be2d         db  0x85 ; '.'
000000000000be2e         db  0xff ; '.'
000000000000be2f         db  0xff ; '.'
000000000000be30         db  0x78 ; 'x'
000000000000be31         db  0x85 ; '.'
000000000000be32         db  0xff ; '.'
000000000000be33         db  0xff ; '.'
000000000000be34         db  0x48 ; 'H'
000000000000be35         db  0x85 ; '.'
000000000000be36         db  0xff ; '.'
000000000000be37         db  0xff ; '.'
000000000000be38         db  0x48 ; 'H'
000000000000be39         db  0x85 ; '.'
000000000000be3a         db  0xff ; '.'
000000000000be3b         db  0xff ; '.'
000000000000be3c         db  0x48 ; 'H'
000000000000be3d         db  0x85 ; '.'
000000000000be3e         db  0xff ; '.'
000000000000be3f         db  0xff ; '.'
000000000000be40         db  0x48 ; 'H'
000000000000be41         db  0x85 ; '.'
000000000000be42         db  0xff ; '.'
000000000000be43         db  0xff ; '.'
000000000000be44         db  0x48 ; 'H'
000000000000be45         db  0x85 ; '.'
000000000000be46         db  0xff ; '.'
000000000000be47         db  0xff ; '.'
000000000000be48         db  0x48 ; 'H'
000000000000be49         db  0x85 ; '.'
000000000000be4a         db  0xff ; '.'
000000000000be4b         db  0xff ; '.'
000000000000be4c         db  0x48 ; 'H'
000000000000be4d         db  0x85 ; '.'
000000000000be4e         db  0xff ; '.'
000000000000be4f         db  0xff ; '.'
000000000000be50         db  0x48 ; 'H'
000000000000be51         db  0x85 ; '.'
000000000000be52         db  0xff ; '.'
000000000000be53         db  0xff ; '.'
000000000000be54         db  0x48 ; 'H'
000000000000be55         db  0x85 ; '.'
000000000000be56         db  0xff ; '.'
000000000000be57         db  0xff ; '.'
000000000000be58         db  0x48 ; 'H'
000000000000be59         db  0x85 ; '.'
000000000000be5a         db  0xff ; '.'
000000000000be5b         db  0xff ; '.'
000000000000be5c         db  0x48 ; 'H'
000000000000be5d         db  0x85 ; '.'
000000000000be5e         db  0xff ; '.'
000000000000be5f         db  0xff ; '.'
000000000000be60         db  0x48 ; 'H'
000000000000be61         db  0x85 ; '.'
000000000000be62         db  0xff ; '.'
000000000000be63         db  0xff ; '.'
000000000000be64         db  0x48 ; 'H'
000000000000be65         db  0x85 ; '.'
000000000000be66         db  0xff ; '.'
000000000000be67         db  0xff ; '.'
000000000000be68         db  0x48 ; 'H'
000000000000be69         db  0x85 ; '.'
000000000000be6a         db  0xff ; '.'
000000000000be6b         db  0xff ; '.'
000000000000be6c         db  0x48 ; 'H'
000000000000be6d         db  0x85 ; '.'
000000000000be6e         db  0xff ; '.'
000000000000be6f         db  0xff ; '.'
000000000000be70         db  0x48 ; 'H'
000000000000be71         db  0x85 ; '.'
000000000000be72         db  0xff ; '.'
000000000000be73         db  0xff ; '.'
000000000000be74         db  0x78 ; 'x'
000000000000be75         db  0x85 ; '.'
000000000000be76         db  0xff ; '.'
000000000000be77         db  0xff ; '.'
000000000000be78         db  0x78 ; 'x'
000000000000be79         db  0x85 ; '.'
000000000000be7a         db  0xff ; '.'
000000000000be7b         db  0xff ; '.'
000000000000be7c         db  0x78 ; 'x'
000000000000be7d         db  0x85 ; '.'
000000000000be7e         db  0xff ; '.'
000000000000be7f         db  0xff ; '.'
000000000000be80         db  0x78 ; 'x'
000000000000be81         db  0x85 ; '.'
000000000000be82         db  0xff ; '.'
000000000000be83         db  0xff ; '.'
000000000000be84         db  0x88 ; '.'
000000000000be85         db  0x81 ; '.'
000000000000be86         db  0xff ; '.'
000000000000be87         db  0xff ; '.'
000000000000be88         db  0xb8 ; '.'
000000000000be89         db  0x83 ; '.'
000000000000be8a         db  0xff ; '.'
000000000000be8b         db  0xff ; '.'
000000000000be8c         db  0x48 ; 'H'
000000000000be8d         db  0x85 ; '.'
000000000000be8e         db  0xff ; '.'
000000000000be8f         db  0xff ; '.'
000000000000be90         db  0x48 ; 'H'
000000000000be91         db  0x85 ; '.'
000000000000be92         db  0xff ; '.'
000000000000be93         db  0xff ; '.'
000000000000be94         db  0x48 ; 'H'
000000000000be95         db  0x85 ; '.'
000000000000be96         db  0xff ; '.'
000000000000be97         db  0xff ; '.'
000000000000be98         db  0x48 ; 'H'
000000000000be99         db  0x85 ; '.'
000000000000be9a         db  0xff ; '.'
000000000000be9b         db  0xff ; '.'
000000000000be9c         db  0x48 ; 'H'
000000000000be9d         db  0x85 ; '.'
000000000000be9e         db  0xff ; '.'
000000000000be9f         db  0xff ; '.'
000000000000bea0         db  0x48 ; 'H'
000000000000bea1         db  0x85 ; '.'
000000000000bea2         db  0xff ; '.'
000000000000bea3         db  0xff ; '.'
000000000000bea4         db  0x48 ; 'H'
000000000000bea5         db  0x85 ; '.'
000000000000bea6         db  0xff ; '.'
000000000000bea7         db  0xff ; '.'
000000000000bea8         db  0x48 ; 'H'
000000000000bea9         db  0x85 ; '.'
000000000000beaa         db  0xff ; '.'
000000000000beab         db  0xff ; '.'
000000000000beac         db  0x48 ; 'H'
000000000000bead         db  0x85 ; '.'
000000000000beae         db  0xff ; '.'
000000000000beaf         db  0xff ; '.'
000000000000beb0         db  0x48 ; 'H'
000000000000beb1         db  0x85 ; '.'
000000000000beb2         db  0xff ; '.'
000000000000beb3         db  0xff ; '.'
000000000000beb4         db  0x48 ; 'H'
000000000000beb5         db  0x85 ; '.'
000000000000beb6         db  0xff ; '.'
000000000000beb7         db  0xff ; '.'
000000000000beb8         db  0x48 ; 'H'
000000000000beb9         db  0x85 ; '.'
000000000000beba         db  0xff ; '.'
000000000000bebb         db  0xff ; '.'
000000000000bebc         db  0x48 ; 'H'
000000000000bebd         db  0x85 ; '.'
000000000000bebe         db  0xff ; '.'
000000000000bebf         db  0xff ; '.'
000000000000bec0         db  0x48 ; 'H'
000000000000bec1         db  0x85 ; '.'
000000000000bec2         db  0xff ; '.'
000000000000bec3         db  0xff ; '.'
000000000000bec4         db  0x48 ; 'H'
000000000000bec5         db  0x85 ; '.'
000000000000bec6         db  0xff ; '.'
000000000000bec7         db  0xff ; '.'
000000000000bec8         db  0x48 ; 'H'
000000000000bec9         db  0x85 ; '.'
000000000000beca         db  0xff ; '.'
000000000000becb         db  0xff ; '.'
000000000000becc         db  0x48 ; 'H'
000000000000becd         db  0x85 ; '.'
000000000000bece         db  0xff ; '.'
000000000000becf         db  0xff ; '.'
000000000000bed0         db  0x48 ; 'H'
000000000000bed1         db  0x85 ; '.'
000000000000bed2         db  0xff ; '.'
000000000000bed3         db  0xff ; '.'
000000000000bed4         db  0x48 ; 'H'
000000000000bed5         db  0x85 ; '.'
000000000000bed6         db  0xff ; '.'
000000000000bed7         db  0xff ; '.'
000000000000bed8         db  0x48 ; 'H'
000000000000bed9         db  0x85 ; '.'
000000000000beda         db  0xff ; '.'
000000000000bedb         db  0xff ; '.'
000000000000bedc         db  0x48 ; 'H'
000000000000bedd         db  0x85 ; '.'
000000000000bede         db  0xff ; '.'
000000000000bedf         db  0xff ; '.'
000000000000bee0         db  0x48 ; 'H'
000000000000bee1         db  0x85 ; '.'
000000000000bee2         db  0xff ; '.'
000000000000bee3         db  0xff ; '.'
000000000000bee4         db  0x48 ; 'H'
000000000000bee5         db  0x85 ; '.'
000000000000bee6         db  0xff ; '.'
000000000000bee7         db  0xff ; '.'
000000000000bee8         db  0x48 ; 'H'
000000000000bee9         db  0x85 ; '.'
000000000000beea         db  0xff ; '.'
000000000000beeb         db  0xff ; '.'
000000000000beec         db  0x48 ; 'H'
000000000000beed         db  0x85 ; '.'
000000000000beee         db  0xff ; '.'
000000000000beef         db  0xff ; '.'
000000000000bef0         db  0x48 ; 'H'
000000000000bef1         db  0x85 ; '.'
000000000000bef2         db  0xff ; '.'
000000000000bef3         db  0xff ; '.'
000000000000bef4         db  0x78 ; 'x'
000000000000bef5         db  0x85 ; '.'
000000000000bef6         db  0xff ; '.'
000000000000bef7         db  0xff ; '.'
000000000000bef8         db  0x48 ; 'H'
000000000000bef9         db  0x84 ; '.'
000000000000befa         db  0xff ; '.'
000000000000befb         db  0xff ; '.'
000000000000befc         db  0x48 ; 'H'
000000000000befd         db  0x85 ; '.'
000000000000befe         db  0xff ; '.'
000000000000beff         db  0xff ; '.'
000000000000bf00         db  0x78 ; 'x'
000000000000bf01         db  0x85 ; '.'
000000000000bf02         db  0xff ; '.'
000000000000bf03         db  0xff ; '.'
000000000000bf04         db  0x48 ; 'H'
000000000000bf05         db  0x85 ; '.'
000000000000bf06         db  0xff ; '.'
000000000000bf07         db  0xff ; '.'
000000000000bf08         db  0x78 ; 'x'
000000000000bf09         db  0x85 ; '.'
000000000000bf0a         db  0xff ; '.'
000000000000bf0b         db  0xff ; '.'
000000000000bf0c         db  0x48 ; 'H'
000000000000bf0d         db  0x85 ; '.'
000000000000bf0e         db  0xff ; '.'
000000000000bf0f         db  0xff ; '.'
000000000000bf10         db  0x48 ; 'H'
000000000000bf11         db  0x85 ; '.'
000000000000bf12         db  0xff ; '.'
000000000000bf13         db  0xff ; '.'
000000000000bf14         db  0x48 ; 'H'
000000000000bf15         db  0x85 ; '.'
000000000000bf16         db  0xff ; '.'
000000000000bf17         db  0xff ; '.'
000000000000bf18         db  0x48 ; 'H'
000000000000bf19         db  0x85 ; '.'
000000000000bf1a         db  0xff ; '.'
000000000000bf1b         db  0xff ; '.'
000000000000bf1c         db  0x48 ; 'H'
000000000000bf1d         db  0x85 ; '.'
000000000000bf1e         db  0xff ; '.'
000000000000bf1f         db  0xff ; '.'
000000000000bf20         db  0x48 ; 'H'
000000000000bf21         db  0x85 ; '.'
000000000000bf22         db  0xff ; '.'
000000000000bf23         db  0xff ; '.'
000000000000bf24         db  0x48 ; 'H'
000000000000bf25         db  0x85 ; '.'
000000000000bf26         db  0xff ; '.'
000000000000bf27         db  0xff ; '.'
000000000000bf28         db  0x48 ; 'H'
000000000000bf29         db  0x85 ; '.'
000000000000bf2a         db  0xff ; '.'
000000000000bf2b         db  0xff ; '.'
000000000000bf2c         db  0x48 ; 'H'
000000000000bf2d         db  0x85 ; '.'
000000000000bf2e         db  0xff ; '.'
000000000000bf2f         db  0xff ; '.'
000000000000bf30         db  0x48 ; 'H'
000000000000bf31         db  0x85 ; '.'
000000000000bf32         db  0xff ; '.'
000000000000bf33         db  0xff ; '.'
000000000000bf34         db  0x48 ; 'H'
000000000000bf35         db  0x85 ; '.'
000000000000bf36         db  0xff ; '.'
000000000000bf37         db  0xff ; '.'
000000000000bf38         db  0x48 ; 'H'
000000000000bf39         db  0x85 ; '.'
000000000000bf3a         db  0xff ; '.'
000000000000bf3b         db  0xff ; '.'
000000000000bf3c         db  0x48 ; 'H'
000000000000bf3d         db  0x85 ; '.'
000000000000bf3e         db  0xff ; '.'
000000000000bf3f         db  0xff ; '.'
000000000000bf40         db  0x48 ; 'H'
000000000000bf41         db  0x85 ; '.'
000000000000bf42         db  0xff ; '.'
000000000000bf43         db  0xff ; '.'
000000000000bf44         db  0x48 ; 'H'
000000000000bf45         db  0x85 ; '.'
000000000000bf46         db  0xff ; '.'
000000000000bf47         db  0xff ; '.'
000000000000bf48         db  0x48 ; 'H'
000000000000bf49         db  0x85 ; '.'
000000000000bf4a         db  0xff ; '.'
000000000000bf4b         db  0xff ; '.'
000000000000bf4c         db  0x48 ; 'H'
000000000000bf4d         db  0x85 ; '.'
000000000000bf4e         db  0xff ; '.'
000000000000bf4f         db  0xff ; '.'
000000000000bf50         db  0x48 ; 'H'
000000000000bf51         db  0x85 ; '.'
000000000000bf52         db  0xff ; '.'
000000000000bf53         db  0xff ; '.'
000000000000bf54         db  0x48 ; 'H'
000000000000bf55         db  0x85 ; '.'
000000000000bf56         db  0xff ; '.'
000000000000bf57         db  0xff ; '.'
000000000000bf58         db  0x48 ; 'H'
000000000000bf59         db  0x85 ; '.'
000000000000bf5a         db  0xff ; '.'
000000000000bf5b         db  0xff ; '.'
000000000000bf5c         db  0x48 ; 'H'
000000000000bf5d         db  0x85 ; '.'
000000000000bf5e         db  0xff ; '.'
000000000000bf5f         db  0xff ; '.'
000000000000bf60         db  0x48 ; 'H'
000000000000bf61         db  0x85 ; '.'
000000000000bf62         db  0xff ; '.'
000000000000bf63         db  0xff ; '.'
000000000000bf64         db  0x48 ; 'H'
000000000000bf65         db  0x85 ; '.'
000000000000bf66         db  0xff ; '.'
000000000000bf67         db  0xff ; '.'
000000000000bf68         db  0x48 ; 'H'
000000000000bf69         db  0x85 ; '.'
000000000000bf6a         db  0xff ; '.'
000000000000bf6b         db  0xff ; '.'
000000000000bf6c         db  0x48 ; 'H'
000000000000bf6d         db  0x85 ; '.'
000000000000bf6e         db  0xff ; '.'
000000000000bf6f         db  0xff ; '.'
000000000000bf70         db  0x48 ; 'H'
000000000000bf71         db  0x85 ; '.'
000000000000bf72         db  0xff ; '.'
000000000000bf73         db  0xff ; '.'
000000000000bf74         db  0xb8 ; '.'
000000000000bf75         db  0x80 ; '.'
000000000000bf76         db  0xff ; '.'
000000000000bf77         db  0xff ; '.'
000000000000bf78         db  0x78 ; 'x'
000000000000bf79         db  0x85 ; '.'
000000000000bf7a         db  0xff ; '.'
000000000000bf7b         db  0xff ; '.'
000000000000bf7c         db  0xb8 ; '.'
000000000000bf7d         db  0x80 ; '.'
000000000000bf7e         db  0xff ; '.'
000000000000bf7f         db  0xff ; '.'
000000000000bf80         db  0x60 ; '`'
000000000000bf81         db  0x85 ; '.'
000000000000bf82         db  0xff ; '.'
000000000000bf83         db  0xff ; '.'
000000000000bf84         db  0x00 ; '.'
000000000000bf85         db  0x00 ; '.'
000000000000bf86         db  0x00 ; '.'
000000000000bf87         db  0x00 ; '.'
000000000000bf88         db  0x00 ; '.'
000000000000bf89         db  0x00 ; '.'
000000000000bf8a         db  0x00 ; '.'
000000000000bf8b         db  0x00 ; '.'
000000000000bf8c         db  0x00 ; '.'
000000000000bf8d         db  0x00 ; '.'
000000000000bf8e         db  0x00 ; '.'
000000000000bf8f         db  0x00 ; '.'
000000000000bf90         db  0x00 ; '.'
000000000000bf91         db  0x00 ; '.'
000000000000bf92         db  0x00 ; '.'
000000000000bf93         db  0x00 ; '.'
000000000000bf94         db  0x00 ; '.'
000000000000bf95         db  0x00 ; '.'
000000000000bf96         db  0x00 ; '.'
000000000000bf97         db  0x00 ; '.'
000000000000bf98         db  0x00 ; '.'
000000000000bf99         db  0x00 ; '.'
000000000000bf9a         db  0x00 ; '.'
000000000000bf9b         db  0x00 ; '.'
000000000000bf9c         db  0x00 ; '.'
000000000000bf9d         db  0x00 ; '.'
000000000000bf9e         db  0x00 ; '.'
000000000000bf9f         db  0x00 ; '.'
                     quoting_style_vals:
000000000000bfa0         db  0x00 ; '.'
000000000000bfa1         db  0x00 ; '.'
000000000000bfa2         db  0x00 ; '.'
000000000000bfa3         db  0x00 ; '.'
000000000000bfa4         db  0x01 ; '.'
000000000000bfa5         db  0x00 ; '.'
000000000000bfa6         db  0x00 ; '.'
000000000000bfa7         db  0x00 ; '.'
000000000000bfa8         db  0x02 ; '.'
000000000000bfa9         db  0x00 ; '.'
000000000000bfaa         db  0x00 ; '.'
000000000000bfab         db  0x00 ; '.'
000000000000bfac         db  0x03 ; '.'
000000000000bfad         db  0x00 ; '.'
000000000000bfae         db  0x00 ; '.'
000000000000bfaf         db  0x00 ; '.'
000000000000bfb0         db  0x04 ; '.'
000000000000bfb1         db  0x00 ; '.'
000000000000bfb2         db  0x00 ; '.'
000000000000bfb3         db  0x00 ; '.'
000000000000bfb4         db  0x05 ; '.'
000000000000bfb5         db  0x00 ; '.'
000000000000bfb6         db  0x00 ; '.'
000000000000bfb7         db  0x00 ; '.'
000000000000bfb8         db  0x06 ; '.'
000000000000bfb9         db  0x00 ; '.'
000000000000bfba         db  0x00 ; '.'
000000000000bfbb         db  0x00 ; '.'
000000000000bfbc         db  0x07 ; '.'
000000000000bfbd         db  0x00 ; '.'
000000000000bfbe         db  0x00 ; '.'
000000000000bfbf         db  0x00 ; '.'
000000000000bfc0         db  0x08 ; '.'
000000000000bfc1         db  0x00 ; '.'
000000000000bfc2         db  0x00 ; '.'
000000000000bfc3         db  0x00 ; '.'
000000000000bfc4         db  0x09 ; '.'
000000000000bfc5         db  0x00 ; '.'
000000000000bfc6         db  0x00 ; '.'
000000000000bfc7         db  0x00 ; '.'
                     aInvalidUser:
000000000000bfc8         db         "invalid user", 0                           ; DATA XREF=parse_with_separator+816
                     aInvalidSpec:
000000000000bfd5         db         "invalid spec", 0                           ; DATA XREF=parse_with_separator+473
                     aInvalidGroup:
000000000000bfe2         db         "invalid group", 0                          ; DATA XREF=parse_with_separator+595
                     aSSSn:
000000000000bff0         db         "%s (%s) %s\n", 0                           ; DATA XREF=version_etc_arn+35
                     aSSn:
000000000000bffc         db         "%s %s\n", 0                                ; DATA XREF=version_etc_arn+318
000000000000c003         db  0x28 ; '('                                         ; DATA XREF=version_etc_arn+60
000000000000c004         db  0x43 ; 'C'
000000000000c005         db  0x29 ; ')'
000000000000c006         db  0x00 ; '.'
                     aWrittenBySn:
000000000000c007         db         "Written by %s.\n", 0                       ; DATA XREF=version_etc_arn+443
                     aWrittenBySAndS:
000000000000c017         db         "Written by %s and %s.\n", 0                ; DATA XREF=version_etc_arn+508
                     aWrittenBySSAnd:
000000000000c02e         db         "Written by %s, %s, and %s.\n", 0           ; DATA XREF=version_etc_arn+584
                     aNreportBugsToS:
000000000000c04a         db         "\nReport bugs to: %s\n", 0                 ; DATA XREF=emit_bug_reporting_address+1
                     aBugcoreutilsgn:
000000000000c05f         db         "bug-coreutils@gnu.org", 0                  ; DATA XREF=emit_bug_reporting_address+20
                     aSHomePageSn:
000000000000c075         db         "%s home page: <%s>\n", 0                   ; DATA XREF=emit_bug_reporting_address+42
000000000000c089         align      16
                     aNlicenseGplv3G:
000000000000c090         db         "\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\n", 0 ; DATA XREF=version_etc_arn+110
000000000000c15c         align      32
                     aWrittenBySSSna:
000000000000c160         db         "Written by %s, %s, %s,\nand %s.\n", 0      ; DATA XREF=version_etc_arn+656
                     aWrittenBySSSns_c180:        // aWrittenBySSSns
000000000000c180         db         "Written by %s, %s, %s,\n%s, and %s.\n", 0  ; DATA XREF=version_etc_arn+748
000000000000c1a4         align      8
                     aWrittenBySSSns_c1a8:        // aWrittenBySSSns
000000000000c1a8         db         "Written by %s, %s, %s,\n%s, %s, and %s.\n", 0 ; DATA XREF=version_etc_arn+800
                     aWrittenBySSSns_c1d0:        // aWrittenBySSSns
000000000000c1d0         db         "Written by %s, %s, %s,\n%s, %s, %s, and %s.\n", 0 ; DATA XREF=version_etc_arn+904
000000000000c1fc         align      512
                     aWrittenBySSSns_c200:        // aWrittenBySSSns
000000000000c200         db         "Written by %s, %s, %s,\n%s, %s, %s, %s,\nand %s.\n", 0 ; DATA XREF=version_etc_arn+184
                     aWrittenBySSSns:
000000000000c230         db         "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, and %s.\n", 0 ; DATA XREF=version_etc_arn+360
000000000000c264         align      8
                     aWrittenBySSSns_c268:        // aWrittenBySSSns
000000000000c268         db         "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n", 0 ; DATA XREF=version_etc_arn+997
000000000000c2a4         align      8
                     aGeneralHelpUsi:
000000000000c2a8         db         "General help using GNU software: <https://www.gnu.org/gethelp/>\n", 0 ; DATA XREF=emit_bug_reporting_address+97
000000000000c2e9         align      4
                     switch_table_c2ec:        // switch_table
000000000000c2ec         dd         version_etc_arn.loc_5e36-switch_table_c2ec, version_etc_arn.loc_5ec8-switch_table_c2ec, version_etc_arn.loc_5f08-switch_table_c2ec, version_etc_arn.loc_5f50-switch_table_c2ec ; switch table used at 0x5db4 containing 10 entries, DATA XREF=version_etc_arn+150
000000000000c2fc         dd         version_etc_arn.loc_5fa0-switch_table_c2ec, version_etc_arn.loc_5ff8-switch_table_c2ec, version_etc_arn.loc_6028-switch_table_c2ec, version_etc_arn.loc_6090-switch_table_c2ec
000000000000c30c         dd         version_etc_arn.loc_5dc0-switch_table_c2ec, version_etc_arn.loc_5e70-switch_table_c2ec
000000000000c314         align      32
                     version_etc_copyright:
000000000000c320         db         "Copyright %s %d Free Software Foundation, Inc.", 0 ; DATA XREF=version_etc_arn+79
                     aMemoryExhauste:
000000000000c34f         db         "memory exhausted", 0                       ; DATA XREF=xalloc_die
                     aCoreutils831li_c360:        // aCoreutils831li
000000000000c360         db         "../coreutils-8.31/lib/xfts.c", 0           ; DATA XREF=sub_65ef+8
                     aErrnoEinval:
000000000000c37d         db         "errno != EINVAL", 0                        ; DATA XREF=sub_65ef+15
000000000000c38d         align      16
                     __PRETTY_FUNCTION__.3434:
000000000000c390         db         "xfts_open", 0                              ; DATA XREF=sub_65ef+1
000000000000c39a         align      32
                     aCoreutils831li:
000000000000c3a0         db         "../coreutils-8.31/lib/xstrtol.c", 0        ; DATA XREF=xstrtoul+908
                     a0StrtolbaseStr:
000000000000c3c0         db         "0 <= strtol_base && strtol_base <= 36", 0  ; DATA XREF=xstrtoul+915
000000000000c3e6         align      8
                     switch_table_c3e8:        // switch_table
000000000000c3e8         dd         xstrtoul.loc_6966-switch_table_c3e8, 2 dup (xstrtoul.loc_685c-switch_table_c3e8), xstrtoul.loc_6943-switch_table_c3e8, xstrtoul.loc_685c-switch_table_c3e8 ; switch table used at 0x6816 containing 54 entries, DATA XREF=xstrtoul+452
000000000000c3fc         dd         xstrtoul.loc_697c-switch_table_c3e8, 3 dup (xstrtoul.loc_685c-switch_table_c3e8), xstrtoul.loc_68ff-switch_table_c3e8, xstrtoul.loc_685c-switch_table_c3e8
000000000000c414         dd         xstrtoul.loc_6818-switch_table_c3e8, 2 dup (xstrtoul.loc_685c-switch_table_c3e8), xstrtoul.loc_6920-switch_table_c3e8, 3 dup (xstrtoul.loc_685c-switch_table_c3e8)
000000000000c430         dd         xstrtoul.loc_68df-switch_table_c3e8, 4 dup (xstrtoul.loc_685c-switch_table_c3e8), xstrtoul.loc_68ba-switch_table_c3e8, xstrtoul.loc_6894-switch_table_c3e8
000000000000c44c         dd         7 dup (xstrtoul.loc_685c-switch_table_c3e8), xstrtoul.loc_687d-switch_table_c3e8, xstrtoul.loc_6840-switch_table_c3e8, 3 dup (xstrtoul.loc_685c-switch_table_c3e8)
000000000000c47c         dd         xstrtoul.loc_697c-switch_table_c3e8, 3 dup (xstrtoul.loc_685c-switch_table_c3e8), xstrtoul.loc_68ff-switch_table_c3e8, xstrtoul.loc_685c-switch_table_c3e8
000000000000c494         dd         xstrtoul.loc_6818-switch_table_c3e8, 6 dup (xstrtoul.loc_685c-switch_table_c3e8), xstrtoul.loc_68df-switch_table_c3e8, 2 dup (xstrtoul.loc_685c-switch_table_c3e8)
000000000000c4bc         dd         xstrtoul.loc_6867-switch_table_c3e8
                     __PRETTY_FUNCTION__.4162:
000000000000c4c0         db         "xstrtoul", 0                               ; DATA XREF=xstrtoul+901
000000000000c4c9         db  0x2e ; '.'                                         ; DATA XREF=fts_safe_changedir+67, fts_safe_changedir+335, fts_build+2154, rpl_fts_read+1108
000000000000c4ca         db  0x2e ; '.'                                         ; DATA XREF=rpl_fts_open+640, rpl_fts_read+1745, rpl_fts_read+1825, rpl_fts_children+195
000000000000c4cb         db  0x00 ; '.'
000000000000c4cc         db  0x00 ; '.'
000000000000c4cd         db  0x00 ; '.'
000000000000c4ce         db  0x00 ; '.'
000000000000c4cf         db  0x00 ; '.'
000000000000c4d0         db  0x00 ; '.'
000000000000c4d1         db  0x00 ; '.'
000000000000c4d2         db  0x00 ; '.'
000000000000c4d3         db  0x00 ; '.'
000000000000c4d4         db  0x00 ; '.'
000000000000c4d5         db  0x00 ; '.'
000000000000c4d6         db  0x00 ; '.'
000000000000c4d7         db  0x00 ; '.'
000000000000c4d8         db  0x00 ; '.'
000000000000c4d9         db  0x00 ; '.'
000000000000c4da         db  0x00 ; '.'
000000000000c4db         db  0x00 ; '.'
000000000000c4dc         db  0x00 ; '.'
000000000000c4dd         db  0x00 ; '.'
000000000000c4de         db  0x00 ; '.'
000000000000c4df         db  0x00 ; '.'
                     CSWTCH.53:
000000000000c4e0         db  0x00 ; '.'                                         ; DATA XREF=fts_build+372, fts_build+2486
000000000000c4e1         db  0x10 ; '.'
000000000000c4e2         db  0x00 ; '.'
000000000000c4e3         db  0x00 ; '.'
000000000000c4e4         db  0x00 ; '.'
000000000000c4e5         db  0x20 ; ' '
000000000000c4e6         db  0x00 ; '.'
000000000000c4e7         db  0x00 ; '.'
000000000000c4e8         db  0x00 ; '.'
000000000000c4e9         db  0x00 ; '.'
000000000000c4ea         db  0x00 ; '.'
000000000000c4eb         db  0x00 ; '.'
000000000000c4ec         db  0x00 ; '.'
000000000000c4ed         db  0x40 ; '@'
000000000000c4ee         db  0x00 ; '.'
000000000000c4ef         db  0x00 ; '.'
000000000000c4f0         db  0x00 ; '.'
000000000000c4f1         db  0x00 ; '.'
000000000000c4f2         db  0x00 ; '.'
000000000000c4f3         db  0x00 ; '.'
000000000000c4f4         db  0x00 ; '.'
000000000000c4f5         db  0x60 ; '`'
000000000000c4f6         db  0x00 ; '.'
000000000000c4f7         db  0x00 ; '.'
000000000000c4f8         db  0x00 ; '.'
000000000000c4f9         db  0x00 ; '.'
000000000000c4fa         db  0x00 ; '.'
000000000000c4fb         db  0x00 ; '.'
000000000000c4fc         db  0x00 ; '.'
000000000000c4fd         db  0x80 ; '.'
000000000000c4fe         db  0x00 ; '.'
000000000000c4ff         db  0x00 ; '.'
000000000000c500         db  0x00 ; '.'
000000000000c501         db  0x00 ; '.'
000000000000c502         db  0x00 ; '.'
000000000000c503         db  0x00 ; '.'
000000000000c504         db  0x00 ; '.'
000000000000c505         db  0xa0 ; '.'
000000000000c506         db  0x00 ; '.'
000000000000c507         db  0x00 ; '.'
000000000000c508         db  0x00 ; '.'
000000000000c509         db  0x00 ; '.'
000000000000c50a         db  0x00 ; '.'
000000000000c50b         db  0x00 ; '.'
000000000000c50c         db  0x00 ; '.'
000000000000c50d         db  0xc0 ; '.'
000000000000c50e         db  0x00 ; '.'
000000000000c50f         db  0x00 ; '.'
                     aCoreutils831li_c510:        // aCoreutils831li
000000000000c510         db         "../coreutils-8.31/lib/cycle-check.c", 0    ; DATA XREF=cycle_check+110
                     aStatemagic9827:
000000000000c534         db         "state->magic == 9827862", 0                ; DATA XREF=cycle_check+117
000000000000c54c         align      16
                     __PRETTY_FUNCTION__.3994:
000000000000c550         db         "cycle_check", 0                            ; DATA XREF=cycle_check+103
000000000000c55c         db  0x43 ; 'C'                                         ; DATA XREF=hard_locale+24
000000000000c55d         db  0x00 ; '.'
                     aPosix:
000000000000c55e         db         "POSIX", 0                                  ; DATA XREF=hard_locale+64
                     aEntriesLun:
000000000000c564         db         "# entries:         %lu\n", 0               ; DATA XREF=hash_print_statistics+101
                     aBucketsLun:
000000000000c57c         db         "# buckets:         %lu\n", 0               ; DATA XREF=hash_print_statistics+123
                     aMaxBucketLengt:
000000000000c594         db         "max bucket length: %lu\n", 0               ; DATA XREF=hash_print_statistics+232
000000000000c5ac         align      16
                     aBucketsUsedLu2:
000000000000c5b0         db         "# buckets used:    %lu (%.2f%%)\n", 0      ; DATA XREF=hash_print_statistics+188
000000000000c5d1         db  0x00 ; '.'
000000000000c5d2         db  0x00 ; '.'
000000000000c5d3         db  0x00 ; '.'
000000000000c5d4         db  0x00 ; '.'
000000000000c5d5         db  0x00 ; '.'
000000000000c5d6         db  0x00 ; '.'
000000000000c5d7         db  0x00 ; '.'
000000000000c5d8         db  0x00 ; '.'
000000000000c5d9         db  0x00 ; '.'
000000000000c5da         db  0x00 ; '.'
000000000000c5db         db  0x00 ; '.'
000000000000c5dc         db  0x00 ; '.'
000000000000c5dd         db  0x00 ; '.'
000000000000c5de         db  0x00 ; '.'
000000000000c5df         db  0x00 ; '.'
                     default_tuning:
000000000000c5e0         db  0x00 ; '.'                                         ; DATA XREF=check_tuning.isra.0+3, hash_initialize+272
000000000000c5e1         db  0x00 ; '.'
000000000000c5e2         db  0x00 ; '.'
000000000000c5e3         db  0x00 ; '.'
000000000000c5e4         db  0x00 ; '.'
000000000000c5e5         db  0x00 ; '.'
000000000000c5e6         db  0x80 ; '.'
000000000000c5e7         db  0x3f ; '?'
000000000000c5e8         db  0xcd ; '.'
000000000000c5e9         db  0xcc ; '.'
000000000000c5ea         db  0x4c ; 'L'
000000000000c5eb         db  0x3f ; '?'
000000000000c5ec         db  0xf4 ; '.'
000000000000c5ed         db  0xfd ; '.'
000000000000c5ee         db  0xb4 ; '.'
000000000000c5ef         db  0x3f ; '?'
000000000000c5f0         db  0x00 ; '.'
000000000000c5f1         db  0x00 ; '.'
000000000000c5f2         db  0x00 ; '.'
000000000000c5f3         db  0x00 ; '.'
                     float_c5f4:        // float
000000000000c5f4         dd         0.1f                                        ; DATA XREF=check_tuning.isra.0+25, check_tuning.isra.0+74
                     float_c5f8:        // float
000000000000c5f8         dd         0.9f                                        ; DATA XREF=check_tuning.isra.0+34
                     float_c5fc:        // float
000000000000c5fc         dd         1.1f                                        ; DATA XREF=check_tuning.isra.0+52
                     float_c600:        // float
000000000000c600         dd         0.0f                                        ; DATA XREF=check_tuning.isra.0+65
                     float_c604:        // float
000000000000c604         dd         1.0f                                        ; DATA XREF=check_tuning.isra.0+92
                     float_c608:        // float
000000000000c608         dd         0.8f                                        ; DATA XREF=hash_initialize+290
                     float_c60c:        // float
000000000000c60c         dd         1.84467e+19f                                ; DATA XREF=hash_initialize+318, hash_rehash+64, hash_insert_if_absent+413
                     float_c610:        // float
000000000000c610         dd         9.22337e+18f                                ; DATA XREF=hash_initialize+327, hash_initialize+336, hash_rehash+77, hash_rehash+90, hash_insert_if_absent+422, hash_insert_if_absent+608, hash_delete+250, hash_delete+400
000000000000c614         align      2
000000000000c61e         db  0x59 ; 'Y'
000000000000c61f         db  0x40 ; '@'
                     aAscii:
000000000000c620         db         "ASCII", 0                                  ; DATA XREF=locale_charset+22, locale_charset+48
000000000000c626         db  0x00 ; '.'
000000000000c627         db  0x00 ; '.'


        ; Section .eh_frame_hdr
        ; Range: [0xc628; 0xcadc[ (1204 bytes)
        ; File offset : [50728; 51932[ (1204 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

000000000000c628         db  0x01 ; '.'
000000000000c629         db  0x1b ; '.'
000000000000c62a         db  0x03 ; '.'
000000000000c62b         db  0x3b ; ';'
000000000000c62c         db  0xb4 ; '.'
000000000000c62d         db  0x04 ; '.'
000000000000c62e         db  0x00 ; '.'
000000000000c62f         db  0x00 ; '.'
000000000000c630         db  0x95 ; '.'
000000000000c631         db  0x00 ; '.'
000000000000c632         db  0x00 ; '.'
000000000000c633         db  0x00 ; '.'
000000000000c634         db  0x68 ; 'h'
000000000000c635         db  0x53 ; 'S'
000000000000c636         db  0xff ; '.'
000000000000c637         db  0xff ; '.'
000000000000c638         db  0x00 ; '.'
000000000000c639         db  0x05 ; '.'
000000000000c63a         db  0x00 ; '.'
000000000000c63b         db  0x00 ; '.'
000000000000c63c         db  0xb8 ; '.'
000000000000c63d         db  0x57 ; 'W'
000000000000c63e         db  0xff ; '.'
000000000000c63f         db  0xff ; '.'
000000000000c640         db  0x28 ; '('
000000000000c641         db  0x05 ; '.'
000000000000c642         db  0x00 ; '.'
000000000000c643         db  0x00 ; '.'
000000000000c644         db  0xc8 ; '.'
000000000000c645         db  0x57 ; 'W'
000000000000c646         db  0xff ; '.'
000000000000c647         db  0xff ; '.'
000000000000c648         db  0x6c ; 'l'
000000000000c649         db  0x05 ; '.'
000000000000c64a         db  0x00 ; '.'
000000000000c64b         db  0x00 ; '.'
000000000000c64c         db  0x58 ; 'X'
000000000000c64d         db  0x5d ; ']'
000000000000c64e         db  0xff ; '.'
000000000000c64f         db  0xff ; '.'
000000000000c650         db  0xd0 ; '.'
000000000000c651         db  0x04 ; '.'
000000000000c652         db  0x00 ; '.'
000000000000c653         db  0x00 ; '.'
000000000000c654         db  0x68 ; 'h'
000000000000c655         db  0x5e ; '^'
000000000000c656         db  0xff ; '.'
000000000000c657         db  0xff ; '.'
000000000000c658         db  0x40 ; '@'
000000000000c659         db  0x05 ; '.'
000000000000c65a         db  0x00 ; '.'
000000000000c65b         db  0x00 ; '.'
000000000000c65c         db  0x38 ; '8'
000000000000c65d         db  0x63 ; 'c'
000000000000c65e         db  0xff ; '.'
000000000000c65f         db  0xff ; '.'
000000000000c660         db  0xd8 ; '.'
000000000000c661         db  0x05 ; '.'
000000000000c662         db  0x00 ; '.'
000000000000c663         db  0x00 ; '.'
000000000000c664         db  0xb8 ; '.'
000000000000c665         db  0x63 ; 'c'
000000000000c666         db  0xff ; '.'
000000000000c667         db  0xff ; '.'
000000000000c668         db  0x14 ; '.'
000000000000c669         db  0x06 ; '.'
000000000000c66a         db  0x00 ; '.'
000000000000c66b         db  0x00 ; '.'
000000000000c66c         db  0xe8 ; '.'
000000000000c66d         db  0x63 ; 'c'
000000000000c66e         db  0xff ; '.'
000000000000c66f         db  0xff ; '.'
000000000000c670         db  0x28 ; '('
000000000000c671         db  0x06 ; '.'
000000000000c672         db  0x00 ; '.'
000000000000c673         db  0x00 ; '.'
000000000000c674         db  0x08 ; '.'
000000000000c675         db  0x64 ; 'd'
000000000000c676         db  0xff ; '.'
000000000000c677         db  0xff ; '.'
000000000000c678         db  0x44 ; 'D'
000000000000c679         db  0x06 ; '.'
000000000000c67a         db  0x00 ; '.'
000000000000c67b         db  0x00 ; '.'
000000000000c67c         db  0x68 ; 'h'
000000000000c67d         db  0x64 ; 'd'
000000000000c67e         db  0xff ; '.'
000000000000c67f         db  0xff ; '.'
000000000000c680         db  0x68 ; 'h'
000000000000c681         db  0x06 ; '.'
000000000000c682         db  0x00 ; '.'
000000000000c683         db  0x00 ; '.'
000000000000c684         db  0xc8 ; '.'
000000000000c685         db  0x64 ; 'd'
000000000000c686         db  0xff ; '.'
000000000000c687         db  0xff ; '.'
000000000000c688         db  0x8c ; '.'
000000000000c689         db  0x06 ; '.'
000000000000c68a         db  0x00 ; '.'
000000000000c68b         db  0x00 ; '.'
000000000000c68c         db  0x58 ; 'X'
000000000000c68d         db  0x72 ; 'r'
000000000000c68e         db  0xff ; '.'
000000000000c68f         db  0xff ; '.'
000000000000c690         db  0xdc ; '.'
000000000000c691         db  0x06 ; '.'
000000000000c692         db  0x00 ; '.'
000000000000c693         db  0x00 ; '.'
000000000000c694         db  0x78 ; 'x'
000000000000c695         db  0x73 ; 's'
000000000000c696         db  0xff ; '.'
000000000000c697         db  0xff ; '.'
000000000000c698         db  0x38 ; '8'
000000000000c699         db  0x07 ; '.'
000000000000c69a         db  0x00 ; '.'
000000000000c69b         db  0x00 ; '.'
000000000000c69c         db  0x88 ; '.'
000000000000c69d         db  0x73 ; 's'
000000000000c69e         db  0xff ; '.'
000000000000c69f         db  0xff ; '.'
000000000000c6a0         db  0x4c ; 'L'
000000000000c6a1         db  0x07 ; '.'
000000000000c6a2         db  0x00 ; '.'
000000000000c6a3         db  0x00 ; '.'
000000000000c6a4         db  0x98 ; '.'
000000000000c6a5         db  0x73 ; 's'
000000000000c6a6         db  0xff ; '.'
000000000000c6a7         db  0xff ; '.'
000000000000c6a8         db  0x60 ; '`'
000000000000c6a9         db  0x07 ; '.'
000000000000c6aa         db  0x00 ; '.'
000000000000c6ab         db  0x00 ; '.'
000000000000c6ac         db  0x48 ; 'H'
000000000000c6ad         db  0x74 ; 't'
000000000000c6ae         db  0xff ; '.'
000000000000c6af         db  0xff ; '.'
000000000000c6b0         db  0x90 ; '.'
000000000000c6b1         db  0x07 ; '.'
000000000000c6b2         db  0x00 ; '.'
000000000000c6b3         db  0x00 ; '.'
000000000000c6b4         db  0x98 ; '.'
000000000000c6b5         db  0x74 ; 't'
000000000000c6b6         db  0xff ; '.'
000000000000c6b7         db  0xff ; '.'
000000000000c6b8         db  0xa8 ; '.'
000000000000c6b9         db  0x07 ; '.'
000000000000c6ba         db  0x00 ; '.'
000000000000c6bb         db  0x00 ; '.'
000000000000c6bc         db  0x38 ; '8'
000000000000c6bd         db  0x75 ; 'u'
000000000000c6be         db  0xff ; '.'
000000000000c6bf         db  0xff ; '.'
000000000000c6c0         db  0xc8 ; '.'
000000000000c6c1         db  0x07 ; '.'
000000000000c6c2         db  0x00 ; '.'
000000000000c6c3         db  0x00 ; '.'
000000000000c6c4         db  0x28 ; '('
000000000000c6c5         db  0x76 ; 'v'
000000000000c6c6         db  0xff ; '.'
000000000000c6c7         db  0xff ; '.'
000000000000c6c8         db  0x0c ; '.'
000000000000c6c9         db  0x08 ; '.'
000000000000c6ca         db  0x00 ; '.'
000000000000c6cb         db  0x00 ; '.'
000000000000c6cc         db  0x68 ; 'h'
000000000000c6cd         db  0x88 ; '.'
000000000000c6ce         db  0xff ; '.'
000000000000c6cf         db  0xff ; '.'
000000000000c6d0         db  0x84 ; '.'
000000000000c6d1         db  0x08 ; '.'
000000000000c6d2         db  0x00 ; '.'
000000000000c6d3         db  0x00 ; '.'
000000000000c6d4         db  0x18 ; '.'
000000000000c6d5         db  0x8a ; '.'
000000000000c6d6         db  0xff ; '.'
000000000000c6d7         db  0xff ; '.'
000000000000c6d8         db  0xf0 ; '.'
000000000000c6d9         db  0x08 ; '.'
000000000000c6da         db  0x00 ; '.'
000000000000c6db         db  0x00 ; '.'
000000000000c6dc         db  0x58 ; 'X'
000000000000c6dd         db  0x8a ; '.'
000000000000c6de         db  0xff ; '.'
000000000000c6df         db  0xff ; '.'
000000000000c6e0         db  0x1c ; '.'
000000000000c6e1         db  0x09 ; '.'
000000000000c6e2         db  0x00 ; '.'
000000000000c6e3         db  0x00 ; '.'
000000000000c6e4         db  0x78 ; 'x'
000000000000c6e5         db  0x8a ; '.'
000000000000c6e6         db  0xff ; '.'
000000000000c6e7         db  0xff ; '.'
000000000000c6e8         db  0x30 ; '0'
000000000000c6e9         db  0x09 ; '.'
000000000000c6ea         db  0x00 ; '.'
000000000000c6eb         db  0x00 ; '.'
000000000000c6ec         db  0x98 ; '.'
000000000000c6ed         db  0x8a ; '.'
000000000000c6ee         db  0xff ; '.'
000000000000c6ef         db  0xff ; '.'
000000000000c6f0         db  0x44 ; 'D'
000000000000c6f1         db  0x09 ; '.'
000000000000c6f2         db  0x00 ; '.'
000000000000c6f3         db  0x00 ; '.'
000000000000c6f4         db  0xd8 ; '.'
000000000000c6f5         db  0x8a ; '.'
000000000000c6f6         db  0xff ; '.'
000000000000c6f7         db  0xff ; '.'
000000000000c6f8         db  0x58 ; 'X'
000000000000c6f9         db  0x09 ; '.'
000000000000c6fa         db  0x00 ; '.'
000000000000c6fb         db  0x00 ; '.'
000000000000c6fc         db  0xf8 ; '.'
000000000000c6fd         db  0x8a ; '.'
000000000000c6fe         db  0xff ; '.'
000000000000c6ff         db  0xff ; '.'
000000000000c700         db  0x6c ; 'l'
000000000000c701         db  0x09 ; '.'
000000000000c702         db  0x00 ; '.'
000000000000c703         db  0x00 ; '.'
000000000000c704         db  0x28 ; '('
000000000000c705         db  0x8b ; '.'
000000000000c706         db  0xff ; '.'
000000000000c707         db  0xff ; '.'
000000000000c708         db  0x80 ; '.'
000000000000c709         db  0x09 ; '.'
000000000000c70a         db  0x00 ; '.'
000000000000c70b         db  0x00 ; '.'
000000000000c70c         db  0xa8 ; '.'
000000000000c70d         db  0x8b ; '.'
000000000000c70e         db  0xff ; '.'
000000000000c70f         db  0xff ; '.'
000000000000c710         db  0xd4 ; '.'
000000000000c711         db  0x09 ; '.'
000000000000c712         db  0x00 ; '.'
000000000000c713         db  0x00 ; '.'
000000000000c714         db  0x98 ; '.'
000000000000c715         db  0x8c ; '.'
000000000000c716         db  0xff ; '.'
000000000000c717         db  0xff ; '.'
000000000000c718         db  0x40 ; '@'
000000000000c719         db  0x0a ; '.'
000000000000c71a         db  0x00 ; '.'
000000000000c71b         db  0x00 ; '.'
000000000000c71c         db  0xa8 ; '.'
000000000000c71d         db  0x8c ; '.'
000000000000c71e         db  0xff ; '.'
000000000000c71f         db  0xff ; '.'
000000000000c720         db  0x54 ; 'T'
000000000000c721         db  0x0a ; '.'
000000000000c722         db  0x00 ; '.'
000000000000c723         db  0x00 ; '.'
000000000000c724         db  0x48 ; 'H'
000000000000c725         db  0x8d ; '.'
000000000000c726         db  0xff ; '.'
000000000000c727         db  0xff ; '.'
000000000000c728         db  0x80 ; '.'
000000000000c729         db  0x0a ; '.'
000000000000c72a         db  0x00 ; '.'
000000000000c72b         db  0x00 ; '.'
000000000000c72c         db  0x68 ; 'h'
000000000000c72d         db  0x8d ; '.'
000000000000c72e         db  0xff ; '.'
000000000000c72f         db  0xff ; '.'
000000000000c730         db  0x94 ; '.'
000000000000c731         db  0x0a ; '.'
000000000000c732         db  0x00 ; '.'
000000000000c733         db  0x00 ; '.'
000000000000c734         db  0x78 ; 'x'
000000000000c735         db  0x8d ; '.'
000000000000c736         db  0xff ; '.'
000000000000c737         db  0xff ; '.'
000000000000c738         db  0xa8 ; '.'
000000000000c739         db  0x0a ; '.'
000000000000c73a         db  0x00 ; '.'
000000000000c73b         db  0x00 ; '.'
000000000000c73c         db  0x98 ; '.'
000000000000c73d         db  0x8d ; '.'
000000000000c73e         db  0xff ; '.'
000000000000c73f         db  0xff ; '.'
000000000000c740         db  0xbc ; '.'
000000000000c741         db  0x0a ; '.'
000000000000c742         db  0x00 ; '.'
000000000000c743         db  0x00 ; '.'
000000000000c744         db  0xb8 ; '.'
000000000000c745         db  0x8d ; '.'
000000000000c746         db  0xff ; '.'
000000000000c747         db  0xff ; '.'
000000000000c748         db  0xd0 ; '.'
000000000000c749         db  0x0a ; '.'
000000000000c74a         db  0x00 ; '.'
000000000000c74b         db  0x00 ; '.'
000000000000c74c         db  0x48 ; 'H'
000000000000c74d         db  0x8e ; '.'
000000000000c74e         db  0xff ; '.'
000000000000c74f         db  0xff ; '.'
000000000000c750         db  0xec ; '.'
000000000000c751         db  0x0a ; '.'
000000000000c752         db  0x00 ; '.'
000000000000c753         db  0x00 ; '.'
000000000000c754         db  0xd8 ; '.'
000000000000c755         db  0x8e ; '.'
000000000000c756         db  0xff ; '.'
000000000000c757         db  0xff ; '.'
000000000000c758         db  0x08 ; '.'
000000000000c759         db  0x0b ; '.'
000000000000c75a         db  0x00 ; '.'
000000000000c75b         db  0x00 ; '.'
000000000000c75c         db  0xe8 ; '.'
000000000000c75d         db  0x8e ; '.'
000000000000c75e         db  0xff ; '.'
000000000000c75f         db  0xff ; '.'
000000000000c760         db  0x1c ; '.'
000000000000c761         db  0x0b ; '.'
000000000000c762         db  0x00 ; '.'
000000000000c763         db  0x00 ; '.'
000000000000c764         db  0xf8 ; '.'
000000000000c765         db  0x8e ; '.'
000000000000c766         db  0xff ; '.'
000000000000c767         db  0xff ; '.'
000000000000c768         db  0x30 ; '0'
000000000000c769         db  0x0b ; '.'
000000000000c76a         db  0x00 ; '.'
000000000000c76b         db  0x00 ; '.'
000000000000c76c         db  0x98 ; '.'
000000000000c76d         db  0x8f ; '.'
000000000000c76e         db  0xff ; '.'
000000000000c76f         db  0xff ; '.'
000000000000c770         db  0x4c ; 'L'
000000000000c771         db  0x0b ; '.'
000000000000c772         db  0x00 ; '.'
000000000000c773         db  0x00 ; '.'
000000000000c774         db  0xa8 ; '.'
000000000000c775         db  0x8f ; '.'
000000000000c776         db  0xff ; '.'
000000000000c777         db  0xff ; '.'
000000000000c778         db  0x60 ; '`'
000000000000c779         db  0x0b ; '.'
000000000000c77a         db  0x00 ; '.'
000000000000c77b         db  0x00 ; '.'
000000000000c77c         db  0xc8 ; '.'
000000000000c77d         db  0x8f ; '.'
000000000000c77e         db  0xff ; '.'
000000000000c77f         db  0xff ; '.'
000000000000c780         db  0x74 ; 't'
000000000000c781         db  0x0b ; '.'
000000000000c782         db  0x00 ; '.'
000000000000c783         db  0x00 ; '.'
000000000000c784         db  0xd8 ; '.'
000000000000c785         db  0x8f ; '.'
000000000000c786         db  0xff ; '.'
000000000000c787         db  0xff ; '.'
000000000000c788         db  0x88 ; '.'
000000000000c789         db  0x0b ; '.'
000000000000c78a         db  0x00 ; '.'
000000000000c78b         db  0x00 ; '.'
000000000000c78c         db  0x68 ; 'h'
000000000000c78d         db  0x90 ; '.'
000000000000c78e         db  0xff ; '.'
000000000000c78f         db  0xff ; '.'
000000000000c790         db  0xa4 ; '.'
000000000000c791         db  0x0b ; '.'
000000000000c792         db  0x00 ; '.'
000000000000c793         db  0x00 ; '.'
000000000000c794         db  0x08 ; '.'
000000000000c795         db  0x91 ; '.'
000000000000c796         db  0xff ; '.'
000000000000c797         db  0xff ; '.'
000000000000c798         db  0xc0 ; '.'
000000000000c799         db  0x0b ; '.'
000000000000c79a         db  0x00 ; '.'
000000000000c79b         db  0x00 ; '.'
000000000000c79c         db  0x18 ; '.'
000000000000c79d         db  0x91 ; '.'
000000000000c79e         db  0xff ; '.'
000000000000c79f         db  0xff ; '.'
000000000000c7a0         db  0xd4 ; '.'
000000000000c7a1         db  0x0b ; '.'
000000000000c7a2         db  0x00 ; '.'
000000000000c7a3         db  0x00 ; '.'
000000000000c7a4         db  0x38 ; '8'
000000000000c7a5         db  0x91 ; '.'
000000000000c7a6         db  0xff ; '.'
000000000000c7a7         db  0xff ; '.'
000000000000c7a8         db  0xe8 ; '.'
000000000000c7a9         db  0x0b ; '.'
000000000000c7aa         db  0x00 ; '.'
000000000000c7ab         db  0x00 ; '.'
000000000000c7ac         db  0x58 ; 'X'
000000000000c7ad         db  0x91 ; '.'
000000000000c7ae         db  0xff ; '.'
000000000000c7af         db  0xff ; '.'
000000000000c7b0         db  0xfc ; '.'
000000000000c7b1         db  0x0b ; '.'
000000000000c7b2         db  0x00 ; '.'
000000000000c7b3         db  0x00 ; '.'
000000000000c7b4         db  0x68 ; 'h'
000000000000c7b5         db  0x91 ; '.'
000000000000c7b6         db  0xff ; '.'
000000000000c7b7         db  0xff ; '.'
000000000000c7b8         db  0x10 ; '.'
000000000000c7b9         db  0x0c ; '.'
000000000000c7ba         db  0x00 ; '.'
000000000000c7bb         db  0x00 ; '.'
000000000000c7bc         db  0x88 ; '.'
000000000000c7bd         db  0x91 ; '.'
000000000000c7be         db  0xff ; '.'
000000000000c7bf         db  0xff ; '.'
000000000000c7c0         db  0x24 ; '$'
000000000000c7c1         db  0x0c ; '.'
000000000000c7c2         db  0x00 ; '.'
000000000000c7c3         db  0x00 ; '.'
000000000000c7c4         db  0xa8 ; '.'
000000000000c7c5         db  0x91 ; '.'
000000000000c7c6         db  0xff ; '.'
000000000000c7c7         db  0xff ; '.'
000000000000c7c8         db  0x38 ; '8'
000000000000c7c9         db  0x0c ; '.'
000000000000c7ca         db  0x00 ; '.'
000000000000c7cb         db  0x00 ; '.'
000000000000c7cc         db  0xc8 ; '.'
000000000000c7cd         db  0x91 ; '.'
000000000000c7ce         db  0xff ; '.'
000000000000c7cf         db  0xff ; '.'
000000000000c7d0         db  0x50 ; 'P'
000000000000c7d1         db  0x0c ; '.'
000000000000c7d2         db  0x00 ; '.'
000000000000c7d3         db  0x00 ; '.'
000000000000c7d4         db  0x48 ; 'H'
000000000000c7d5         db  0x92 ; '.'
000000000000c7d6         db  0xff ; '.'
000000000000c7d7         db  0xff ; '.'
000000000000c7d8         db  0x78 ; 'x'
000000000000c7d9         db  0x0c ; '.'
000000000000c7da         db  0x00 ; '.'
000000000000c7db         db  0x00 ; '.'
000000000000c7dc         db  0x18 ; '.'
000000000000c7dd         db  0x96 ; '.'
000000000000c7de         db  0xff ; '.'
000000000000c7df         db  0xff ; '.'
000000000000c7e0         db  0xc8 ; '.'
000000000000c7e1         db  0x0c ; '.'
000000000000c7e2         db  0x00 ; '.'
000000000000c7e3         db  0x00 ; '.'
000000000000c7e4         db  0xe8 ; '.'
000000000000c7e5         db  0x96 ; '.'
000000000000c7e6         db  0xff ; '.'
000000000000c7e7         db  0xff ; '.'
000000000000c7e8         db  0x28 ; '('
000000000000c7e9         db  0x0d ; '.'
000000000000c7ea         db  0x00 ; '.'
000000000000c7eb         db  0x00 ; '.'
000000000000c7ec         db  0x08 ; '.'
000000000000c7ed         db  0x9b ; '.'
000000000000c7ee         db  0xff ; '.'
000000000000c7ef         db  0xff ; '.'
000000000000c7f0         db  0x3c ; '<'
000000000000c7f1         db  0x0e ; '.'
000000000000c7f2         db  0x00 ; '.'
000000000000c7f3         db  0x00 ; '.'
000000000000c7f4         db  0x28 ; '('
000000000000c7f5         db  0x9b ; '.'
000000000000c7f6         db  0xff ; '.'
000000000000c7f7         db  0xff ; '.'
000000000000c7f8         db  0x50 ; 'P'
000000000000c7f9         db  0x0e ; '.'
000000000000c7fa         db  0x00 ; '.'
000000000000c7fb         db  0x00 ; '.'
000000000000c7fc         db  0xa8 ; '.'
000000000000c7fd         db  0x9b ; '.'
000000000000c7fe         db  0xff ; '.'
000000000000c7ff         db  0xff ; '.'
000000000000c800         db  0x6c ; 'l'
000000000000c801         db  0x0e ; '.'
000000000000c802         db  0x00 ; '.'
000000000000c803         db  0x00 ; '.'
000000000000c804         db  0x88 ; '.'
000000000000c805         db  0x9c ; '.'
000000000000c806         db  0xff ; '.'
000000000000c807         db  0xff ; '.'
000000000000c808         db  0x98 ; '.'
000000000000c809         db  0x0e ; '.'
000000000000c80a         db  0x00 ; '.'
000000000000c80b         db  0x00 ; '.'
000000000000c80c         db  0x08 ; '.'
000000000000c80d         db  0x9d ; '.'
000000000000c80e         db  0xff ; '.'
000000000000c80f         db  0xff ; '.'
000000000000c810         db  0xb8 ; '.'
000000000000c811         db  0x0e ; '.'
000000000000c812         db  0x00 ; '.'
000000000000c813         db  0x00 ; '.'
000000000000c814         db  0x28 ; '('
000000000000c815         db  0x9d ; '.'
000000000000c816         db  0xff ; '.'
000000000000c817         db  0xff ; '.'
000000000000c818         db  0xd4 ; '.'
000000000000c819         db  0x0e ; '.'
000000000000c81a         db  0x00 ; '.'
000000000000c81b         db  0x00 ; '.'
000000000000c81c         db  0x58 ; 'X'
000000000000c81d         db  0x9d ; '.'
000000000000c81e         db  0xff ; '.'
000000000000c81f         db  0xff ; '.'
000000000000c820         db  0xe8 ; '.'
000000000000c821         db  0x0e ; '.'
000000000000c822         db  0x00 ; '.'
000000000000c823         db  0x00 ; '.'
000000000000c824         db  0x68 ; 'h'
000000000000c825         db  0x9d ; '.'
000000000000c826         db  0xff ; '.'
000000000000c827         db  0xff ; '.'
000000000000c828         db  0xfc ; '.'
000000000000c829         db  0x0e ; '.'
000000000000c82a         db  0x00 ; '.'
000000000000c82b         db  0x00 ; '.'
000000000000c82c         db  0xa8 ; '.'
000000000000c82d         db  0x9d ; '.'
000000000000c82e         db  0xff ; '.'
000000000000c82f         db  0xff ; '.'
000000000000c830         db  0x20 ; ' '
000000000000c831         db  0x0f ; '.'
000000000000c832         db  0x00 ; '.'
000000000000c833         db  0x00 ; '.'
000000000000c834         db  0xd8 ; '.'
000000000000c835         db  0x9d ; '.'
000000000000c836         db  0xff ; '.'
000000000000c837         db  0xff ; '.'
000000000000c838         db  0x34 ; '4'
000000000000c839         db  0x0f ; '.'
000000000000c83a         db  0x00 ; '.'
000000000000c83b         db  0x00 ; '.'
000000000000c83c         db  0x68 ; 'h'
000000000000c83d         db  0x9e ; '.'
000000000000c83e         db  0xff ; '.'
000000000000c83f         db  0xff ; '.'
000000000000c840         db  0x4c ; 'L'
000000000000c841         db  0x0f ; '.'
000000000000c842         db  0x00 ; '.'
000000000000c843         db  0x00 ; '.'
000000000000c844         db  0xb8 ; '.'
000000000000c845         db  0x9e ; '.'
000000000000c846         db  0xff ; '.'
000000000000c847         db  0xff ; '.'
000000000000c848         db  0x64 ; 'd'
000000000000c849         db  0x0f ; '.'
000000000000c84a         db  0x00 ; '.'
000000000000c84b         db  0x00 ; '.'
000000000000c84c         db  0xd8 ; '.'
000000000000c84d         db  0x9e ; '.'
000000000000c84e         db  0xff ; '.'
000000000000c84f         db  0xff ; '.'
000000000000c850         db  0x80 ; '.'
000000000000c851         db  0x0f ; '.'
000000000000c852         db  0x00 ; '.'
000000000000c853         db  0x00 ; '.'
000000000000c854         db  0x08 ; '.'
000000000000c855         db  0x9f ; '.'
000000000000c856         db  0xff ; '.'
000000000000c857         db  0xff ; '.'
000000000000c858         db  0x9c ; '.'
000000000000c859         db  0x0f ; '.'
000000000000c85a         db  0x00 ; '.'
000000000000c85b         db  0x00 ; '.'
000000000000c85c         db  0x38 ; '8'
000000000000c85d         db  0x9f ; '.'
000000000000c85e         db  0xff ; '.'
000000000000c85f         db  0xff ; '.'
000000000000c860         db  0xc4 ; '.'
000000000000c861         db  0x0f ; '.'
000000000000c862         db  0x00 ; '.'
000000000000c863         db  0x00 ; '.'
000000000000c864         db  0x58 ; 'X'
000000000000c865         db  0x9f ; '.'
000000000000c866         db  0xff ; '.'
000000000000c867         db  0xff ; '.'
000000000000c868         db  0xe0 ; '.'
000000000000c869         db  0x0f ; '.'
000000000000c86a         db  0x00 ; '.'
000000000000c86b         db  0x00 ; '.'
000000000000c86c         db  0x98 ; '.'
000000000000c86d         db  0x9f ; '.'
000000000000c86e         db  0xff ; '.'
000000000000c86f         db  0xff ; '.'
000000000000c870         db  0xf8 ; '.'
000000000000c871         db  0x0f ; '.'
000000000000c872         db  0x00 ; '.'
000000000000c873         db  0x00 ; '.'
000000000000c874         db  0xe8 ; '.'
000000000000c875         db  0x9f ; '.'
000000000000c876         db  0xff ; '.'
000000000000c877         db  0xff ; '.'
000000000000c878         db  0x14 ; '.'
000000000000c879         db  0x10 ; '.'
000000000000c87a         db  0x00 ; '.'
000000000000c87b         db  0x00 ; '.'
000000000000c87c         db  0x18 ; '.'
000000000000c87d         db  0xa0 ; '.'
000000000000c87e         db  0xff ; '.'
000000000000c87f         db  0xff ; '.'
000000000000c880         db  0x28 ; '('
000000000000c881         db  0x10 ; '.'
000000000000c882         db  0x00 ; '.'
000000000000c883         db  0x00 ; '.'
000000000000c884         db  0x38 ; '8'
000000000000c885         db  0xa4 ; '.'
000000000000c886         db  0xff ; '.'
000000000000c887         db  0xff ; '.'
000000000000c888         db  0x78 ; 'x'
000000000000c889         db  0x10 ; '.'
000000000000c88a         db  0x00 ; '.'
000000000000c88b         db  0x00 ; '.'
000000000000c88c         db  0x58 ; 'X'
000000000000c88d         db  0xa4 ; '.'
000000000000c88e         db  0xff ; '.'
000000000000c88f         db  0xff ; '.'
000000000000c890         db  0x8c ; '.'
000000000000c891         db  0x10 ; '.'
000000000000c892         db  0x00 ; '.'
000000000000c893         db  0x00 ; '.'
000000000000c894         db  0x68 ; 'h'
000000000000c895         db  0xa4 ; '.'
000000000000c896         db  0xff ; '.'
000000000000c897         db  0xff ; '.'
000000000000c898         db  0xa0 ; '.'
000000000000c899         db  0x10 ; '.'
000000000000c89a         db  0x00 ; '.'
000000000000c89b         db  0x00 ; '.'
000000000000c89c         db  0x78 ; 'x'
000000000000c89d         db  0xa4 ; '.'
000000000000c89e         db  0xff ; '.'
000000000000c89f         db  0xff ; '.'
000000000000c8a0         db  0xb4 ; '.'
000000000000c8a1         db  0x10 ; '.'
000000000000c8a2         db  0x00 ; '.'
000000000000c8a3         db  0x00 ; '.'
000000000000c8a4         db  0x88 ; '.'
000000000000c8a5         db  0xa4 ; '.'
000000000000c8a6         db  0xff ; '.'
000000000000c8a7         db  0xff ; '.'
000000000000c8a8         db  0xc8 ; '.'
000000000000c8a9         db  0x10 ; '.'
000000000000c8aa         db  0x00 ; '.'
000000000000c8ab         db  0x00 ; '.'
000000000000c8ac         db  0xb8 ; '.'
000000000000c8ad         db  0xa4 ; '.'
000000000000c8ae         db  0xff ; '.'
000000000000c8af         db  0xff ; '.'
000000000000c8b0         db  0xdc ; '.'
000000000000c8b1         db  0x10 ; '.'
000000000000c8b2         db  0x00 ; '.'
000000000000c8b3         db  0x00 ; '.'
000000000000c8b4         db  0x88 ; '.'
000000000000c8b5         db  0xa6 ; '.'
000000000000c8b6         db  0xff ; '.'
000000000000c8b7         db  0xff ; '.'
000000000000c8b8         db  0x18 ; '.'
000000000000c8b9         db  0x11 ; '.'
000000000000c8ba         db  0x00 ; '.'
000000000000c8bb         db  0x00 ; '.'
000000000000c8bc         db  0x98 ; '.'
000000000000c8bd         db  0xa7 ; '.'
000000000000c8be         db  0xff ; '.'
000000000000c8bf         db  0xff ; '.'
000000000000c8c0         db  0x68 ; 'h'
000000000000c8c1         db  0x11 ; '.'
000000000000c8c2         db  0x00 ; '.'
000000000000c8c3         db  0x00 ; '.'
000000000000c8c4         db  0x28 ; '('
000000000000c8c5         db  0xa8 ; '.'
000000000000c8c6         db  0xff ; '.'
000000000000c8c7         db  0xff ; '.'
000000000000c8c8         db  0xa0 ; '.'
000000000000c8c9         db  0x11 ; '.'
000000000000c8ca         db  0x00 ; '.'
000000000000c8cb         db  0x00 ; '.'
000000000000c8cc         db  0x78 ; 'x'
000000000000c8cd         db  0xa8 ; '.'
000000000000c8ce         db  0xff ; '.'
000000000000c8cf         db  0xff ; '.'
000000000000c8d0         db  0xcc ; '.'
000000000000c8d1         db  0x11 ; '.'
000000000000c8d2         db  0x00 ; '.'
000000000000c8d3         db  0x00 ; '.'
000000000000c8d4         db  0xb8 ; '.'
000000000000c8d5         db  0xa8 ; '.'
000000000000c8d6         db  0xff ; '.'
000000000000c8d7         db  0xff ; '.'
000000000000c8d8         db  0xe8 ; '.'
000000000000c8d9         db  0x11 ; '.'
000000000000c8da         db  0x00 ; '.'
000000000000c8db         db  0x00 ; '.'
000000000000c8dc         db  0xe8 ; '.'
000000000000c8dd         db  0xa9 ; '.'
000000000000c8de         db  0xff ; '.'
000000000000c8df         db  0xff ; '.'
000000000000c8e0         db  0x24 ; '$'
000000000000c8e1         db  0x12 ; '.'
000000000000c8e2         db  0x00 ; '.'
000000000000c8e3         db  0x00 ; '.'
000000000000c8e4         db  0x58 ; 'X'
000000000000c8e5         db  0xaa ; '.'
000000000000c8e6         db  0xff ; '.'
000000000000c8e7         db  0xff ; '.'
000000000000c8e8         db  0x48 ; 'H'
000000000000c8e9         db  0x12 ; '.'
000000000000c8ea         db  0x00 ; '.'
000000000000c8eb         db  0x00 ; '.'
000000000000c8ec         db  0xc8 ; '.'
000000000000c8ed         db  0xaa ; '.'
000000000000c8ee         db  0xff ; '.'
000000000000c8ef         db  0xff ; '.'
000000000000c8f0         db  0x8c ; '.'
000000000000c8f1         db  0x12 ; '.'
000000000000c8f2         db  0x00 ; '.'
000000000000c8f3         db  0x00 ; '.'
000000000000c8f4         db  0x28 ; '('
000000000000c8f5         db  0xab ; '.'
000000000000c8f6         db  0xff ; '.'
000000000000c8f7         db  0xff ; '.'
000000000000c8f8         db  0xb8 ; '.'
000000000000c8f9         db  0x12 ; '.'
000000000000c8fa         db  0x00 ; '.'
000000000000c8fb         db  0x00 ; '.'
000000000000c8fc         db  0x98 ; '.'
000000000000c8fd         db  0xab ; '.'
000000000000c8fe         db  0xff ; '.'
000000000000c8ff         db  0xff ; '.'
000000000000c900         db  0xe0 ; '.'
000000000000c901         db  0x12 ; '.'
000000000000c902         db  0x00 ; '.'
000000000000c903         db  0x00 ; '.'
000000000000c904         db  0x08 ; '.'
000000000000c905         db  0xac ; '.'
000000000000c906         db  0xff ; '.'
000000000000c907         db  0xff ; '.'
000000000000c908         db  0x00 ; '.'
000000000000c909         db  0x13 ; '.'
000000000000c90a         db  0x00 ; '.'
000000000000c90b         db  0x00 ; '.'
000000000000c90c         db  0x48 ; 'H'
000000000000c90d         db  0xac ; '.'
000000000000c90e         db  0xff ; '.'
000000000000c90f         db  0xff ; '.'
000000000000c910         db  0x14 ; '.'
000000000000c911         db  0x13 ; '.'
000000000000c912         db  0x00 ; '.'
000000000000c913         db  0x00 ; '.'
000000000000c914         db  0xc8 ; '.'
000000000000c915         db  0xae ; '.'
000000000000c916         db  0xff ; '.'
000000000000c917         db  0xff ; '.'
000000000000c918         db  0x64 ; 'd'
000000000000c919         db  0x13 ; '.'
000000000000c91a         db  0x00 ; '.'
000000000000c91b         db  0x00 ; '.'
000000000000c91c         db  0x78 ; 'x'
000000000000c91d         db  0xaf ; '.'
000000000000c91e         db  0xff ; '.'
000000000000c91f         db  0xff ; '.'
000000000000c920         db  0xa8 ; '.'
000000000000c921         db  0x13 ; '.'
000000000000c922         db  0x00 ; '.'
000000000000c923         db  0x00 ; '.'
000000000000c924         db  0x38 ; '8'
000000000000c925         db  0xb0 ; '.'
000000000000c926         db  0xff ; '.'
000000000000c927         db  0xff ; '.'
000000000000c928         db  0xc4 ; '.'
000000000000c929         db  0x13 ; '.'
000000000000c92a         db  0x00 ; '.'
000000000000c92b         db  0x00 ; '.'
000000000000c92c         db  0x18 ; '.'
000000000000c92d         db  0xba ; '.'
000000000000c92e         db  0xff ; '.'
000000000000c92f         db  0xff ; '.'
000000000000c930         db  0x14 ; '.'
000000000000c931         db  0x14 ; '.'
000000000000c932         db  0x00 ; '.'
000000000000c933         db  0x00 ; '.'
000000000000c934         db  0xc8 ; '.'
000000000000c935         db  0xbd ; '.'
000000000000c936         db  0xff ; '.'
000000000000c937         db  0xff ; '.'
000000000000c938         db  0x60 ; '`'
000000000000c939         db  0x14 ; '.'
000000000000c93a         db  0x00 ; '.'
000000000000c93b         db  0x00 ; '.'
000000000000c93c         db  0x58 ; 'X'
000000000000c93d         db  0xbf ; '.'
000000000000c93e         db  0xff ; '.'
000000000000c93f         db  0xff ; '.'
000000000000c940         db  0x90 ; '.'
000000000000c941         db  0x14 ; '.'
000000000000c942         db  0x00 ; '.'
000000000000c943         db  0x00 ; '.'
000000000000c944         db  0xd8 ; '.'
000000000000c945         db  0xc6 ; '.'
000000000000c946         db  0xff ; '.'
000000000000c947         db  0xff ; '.'
000000000000c948         db  0xf4 ; '.'
000000000000c949         db  0x14 ; '.'
000000000000c94a         db  0x00 ; '.'
000000000000c94b         db  0x00 ; '.'
000000000000c94c         db  0x08 ; '.'
000000000000c94d         db  0xc7 ; '.'
000000000000c94e         db  0xff ; '.'
000000000000c94f         db  0xff ; '.'
000000000000c950         db  0x0c ; '.'
000000000000c951         db  0x15 ; '.'
000000000000c952         db  0x00 ; '.'
000000000000c953         db  0x00 ; '.'
000000000000c954         db  0x58 ; 'X'
000000000000c955         db  0xc8 ; '.'
000000000000c956         db  0xff ; '.'
000000000000c957         db  0xff ; '.'
000000000000c958         db  0x70 ; 'p'
000000000000c959         db  0x15 ; '.'
000000000000c95a         db  0x00 ; '.'
000000000000c95b         db  0x00 ; '.'
000000000000c95c         db  0xe8 ; '.'
000000000000c95d         db  0xc8 ; '.'
000000000000c95e         db  0xff ; '.'
000000000000c95f         db  0xff ; '.'
000000000000c960         db  0xb0 ; '.'
000000000000c961         db  0x15 ; '.'
000000000000c962         db  0x00 ; '.'
000000000000c963         db  0x00 ; '.'
000000000000c964         db  0x68 ; 'h'
000000000000c965         db  0xc9 ; '.'
000000000000c966         db  0xff ; '.'
000000000000c967         db  0xff ; '.'
000000000000c968         db  0x00 ; '.'
000000000000c969         db  0x16 ; '.'
000000000000c96a         db  0x00 ; '.'
000000000000c96b         db  0x00 ; '.'
000000000000c96c         db  0x78 ; 'x'
000000000000c96d         db  0xc9 ; '.'
000000000000c96e         db  0xff ; '.'
000000000000c96f         db  0xff ; '.'
000000000000c970         db  0x14 ; '.'
000000000000c971         db  0x16 ; '.'
000000000000c972         db  0x00 ; '.'
000000000000c973         db  0x00 ; '.'
000000000000c974         db  0x08 ; '.'
000000000000c975         db  0xca ; '.'
000000000000c976         db  0xff ; '.'
000000000000c977         db  0xff ; '.'
000000000000c978         db  0x30 ; '0'
000000000000c979         db  0x16 ; '.'
000000000000c97a         db  0x00 ; '.'
000000000000c97b         db  0x00 ; '.'
000000000000c97c         db  0x78 ; 'x'
000000000000c97d         db  0xca ; '.'
000000000000c97e         db  0xff ; '.'
000000000000c97f         db  0xff ; '.'
000000000000c980         db  0x50 ; 'P'
000000000000c981         db  0x16 ; '.'
000000000000c982         db  0x00 ; '.'
000000000000c983         db  0x00 ; '.'
000000000000c984         db  0xd8 ; '.'
000000000000c985         db  0xca ; '.'
000000000000c986         db  0xff ; '.'
000000000000c987         db  0xff ; '.'
000000000000c988         db  0x70 ; 'p'
000000000000c989         db  0x16 ; '.'
000000000000c98a         db  0x00 ; '.'
000000000000c98b         db  0x00 ; '.'
000000000000c98c         db  0x78 ; 'x'
000000000000c98d         db  0xcb ; '.'
000000000000c98e         db  0xff ; '.'
000000000000c98f         db  0xff ; '.'
000000000000c990         db  0x84 ; '.'
000000000000c991         db  0x16 ; '.'
000000000000c992         db  0x00 ; '.'
000000000000c993         db  0x00 ; '.'
000000000000c994         db  0x88 ; '.'
000000000000c995         db  0xcb ; '.'
000000000000c996         db  0xff ; '.'
000000000000c997         db  0xff ; '.'
000000000000c998         db  0x98 ; '.'
000000000000c999         db  0x16 ; '.'
000000000000c99a         db  0x00 ; '.'
000000000000c99b         db  0x00 ; '.'
000000000000c99c         db  0x98 ; '.'
000000000000c99d         db  0xcb ; '.'
000000000000c99e         db  0xff ; '.'
000000000000c99f         db  0xff ; '.'
000000000000c9a0         db  0xac ; '.'
000000000000c9a1         db  0x16 ; '.'
000000000000c9a2         db  0x00 ; '.'
000000000000c9a3         db  0x00 ; '.'
000000000000c9a4         db  0xc8 ; '.'
000000000000c9a5         db  0xcb ; '.'
000000000000c9a6         db  0xff ; '.'
000000000000c9a7         db  0xff ; '.'
000000000000c9a8         db  0xc8 ; '.'
000000000000c9a9         db  0x16 ; '.'
000000000000c9aa         db  0x00 ; '.'
000000000000c9ab         db  0x00 ; '.'
000000000000c9ac         db  0xe8 ; '.'
000000000000c9ad         db  0xcc ; '.'
000000000000c9ae         db  0xff ; '.'
000000000000c9af         db  0xff ; '.'
000000000000c9b0         db  0x28 ; '('
000000000000c9b1         db  0x17 ; '.'
000000000000c9b2         db  0x00 ; '.'
000000000000c9b3         db  0x00 ; '.'
000000000000c9b4         db  0x68 ; 'h'
000000000000c9b5         db  0xcd ; '.'
000000000000c9b6         db  0xff ; '.'
000000000000c9b7         db  0xff ; '.'
000000000000c9b8         db  0x3c ; '<'
000000000000c9b9         db  0x17 ; '.'
000000000000c9ba         db  0x00 ; '.'
000000000000c9bb         db  0x00 ; '.'
000000000000c9bc         db  0xa8 ; '.'
000000000000c9bd         db  0xce ; '.'
000000000000c9be         db  0xff ; '.'
000000000000c9bf         db  0xff ; '.'
000000000000c9c0         db  0x9c ; '.'
000000000000c9c1         db  0x17 ; '.'
000000000000c9c2         db  0x00 ; '.'
000000000000c9c3         db  0x00 ; '.'
000000000000c9c4         db  0xb8 ; '.'
000000000000c9c5         db  0xce ; '.'
000000000000c9c6         db  0xff ; '.'
000000000000c9c7         db  0xff ; '.'
000000000000c9c8         db  0xb0 ; '.'
000000000000c9c9         db  0x17 ; '.'
000000000000c9ca         db  0x00 ; '.'
000000000000c9cb         db  0x00 ; '.'
000000000000c9cc         db  0xc8 ; '.'
000000000000c9cd         db  0xce ; '.'
000000000000c9ce         db  0xff ; '.'
000000000000c9cf         db  0xff ; '.'
000000000000c9d0         db  0xc4 ; '.'
000000000000c9d1         db  0x17 ; '.'
000000000000c9d2         db  0x00 ; '.'
000000000000c9d3         db  0x00 ; '.'
000000000000c9d4         db  0xd8 ; '.'
000000000000c9d5         db  0xce ; '.'
000000000000c9d6         db  0xff ; '.'
000000000000c9d7         db  0xff ; '.'
000000000000c9d8         db  0xd8 ; '.'
000000000000c9d9         db  0x17 ; '.'
000000000000c9da         db  0x00 ; '.'
000000000000c9db         db  0x00 ; '.'
000000000000c9dc         db  0x28 ; '('
000000000000c9dd         db  0xcf ; '.'
000000000000c9de         db  0xff ; '.'
000000000000c9df         db  0xff ; '.'
000000000000c9e0         db  0xec ; '.'
000000000000c9e1         db  0x17 ; '.'
000000000000c9e2         db  0x00 ; '.'
000000000000c9e3         db  0x00 ; '.'
000000000000c9e4         db  0x88 ; '.'
000000000000c9e5         db  0xcf ; '.'
000000000000c9e6         db  0xff ; '.'
000000000000c9e7         db  0xff ; '.'
000000000000c9e8         db  0x00 ; '.'
000000000000c9e9         db  0x18 ; '.'
000000000000c9ea         db  0x00 ; '.'
000000000000c9eb         db  0x00 ; '.'
000000000000c9ec         db  0xd8 ; '.'
000000000000c9ed         db  0xd0 ; '.'
000000000000c9ee         db  0xff ; '.'
000000000000c9ef         db  0xff ; '.'
000000000000c9f0         db  0x3c ; '<'
000000000000c9f1         db  0x18 ; '.'
000000000000c9f2         db  0x00 ; '.'
000000000000c9f3         db  0x00 ; '.'
000000000000c9f4         db  0x38 ; '8'
000000000000c9f5         db  0xd1 ; '.'
000000000000c9f6         db  0xff ; '.'
000000000000c9f7         db  0xff ; '.'
000000000000c9f8         db  0x74 ; 't'
000000000000c9f9         db  0x18 ; '.'
000000000000c9fa         db  0x00 ; '.'
000000000000c9fb         db  0x00 ; '.'
000000000000c9fc         db  0x88 ; '.'
000000000000c9fd         db  0xd1 ; '.'
000000000000c9fe         db  0xff ; '.'
000000000000c9ff         db  0xff ; '.'
000000000000ca00         db  0x88 ; '.'
000000000000ca01         db  0x18 ; '.'
000000000000ca02         db  0x00 ; '.'
000000000000ca03         db  0x00 ; '.'
000000000000ca04         db  0x08 ; '.'
000000000000ca05         db  0xd2 ; '.'
000000000000ca06         db  0xff ; '.'
000000000000ca07         db  0xff ; '.'
000000000000ca08         db  0xbc ; '.'
000000000000ca09         db  0x18 ; '.'
000000000000ca0a         db  0x00 ; '.'
000000000000ca0b         db  0x00 ; '.'
000000000000ca0c         db  0x78 ; 'x'
000000000000ca0d         db  0xd2 ; '.'
000000000000ca0e         db  0xff ; '.'
000000000000ca0f         db  0xff ; '.'
000000000000ca10         db  0xd0 ; '.'
000000000000ca11         db  0x18 ; '.'
000000000000ca12         db  0x00 ; '.'
000000000000ca13         db  0x00 ; '.'
000000000000ca14         db  0xe8 ; '.'
000000000000ca15         db  0xd2 ; '.'
000000000000ca16         db  0xff ; '.'
000000000000ca17         db  0xff ; '.'
000000000000ca18         db  0x1c ; '.'
000000000000ca19         db  0x19 ; '.'
000000000000ca1a         db  0x00 ; '.'
000000000000ca1b         db  0x00 ; '.'
000000000000ca1c         db  0x28 ; '('
000000000000ca1d         db  0xd3 ; '.'
000000000000ca1e         db  0xff ; '.'
000000000000ca1f         db  0xff ; '.'
000000000000ca20         db  0x30 ; '0'
000000000000ca21         db  0x19 ; '.'
000000000000ca22         db  0x00 ; '.'
000000000000ca23         db  0x00 ; '.'
000000000000ca24         db  0x48 ; 'H'
000000000000ca25         db  0xd3 ; '.'
000000000000ca26         db  0xff ; '.'
000000000000ca27         db  0xff ; '.'
000000000000ca28         db  0x44 ; 'D'
000000000000ca29         db  0x19 ; '.'
000000000000ca2a         db  0x00 ; '.'
000000000000ca2b         db  0x00 ; '.'
000000000000ca2c         db  0x08 ; '.'
000000000000ca2d         db  0xd5 ; '.'
000000000000ca2e         db  0xff ; '.'
000000000000ca2f         db  0xff ; '.'
000000000000ca30         db  0x90 ; '.'
000000000000ca31         db  0x19 ; '.'
000000000000ca32         db  0x00 ; '.'
000000000000ca33         db  0x00 ; '.'
000000000000ca34         db  0x98 ; '.'
000000000000ca35         db  0xd5 ; '.'
000000000000ca36         db  0xff ; '.'
000000000000ca37         db  0xff ; '.'
000000000000ca38         db  0xbc ; '.'
000000000000ca39         db  0x19 ; '.'
000000000000ca3a         db  0x00 ; '.'
000000000000ca3b         db  0x00 ; '.'
000000000000ca3c         db  0x78 ; 'x'
000000000000ca3d         db  0xd6 ; '.'
000000000000ca3e         db  0xff ; '.'
000000000000ca3f         db  0xff ; '.'
000000000000ca40         db  0xe8 ; '.'
000000000000ca41         db  0x19 ; '.'
000000000000ca42         db  0x00 ; '.'
000000000000ca43         db  0x00 ; '.'
000000000000ca44         db  0xb8 ; '.'
000000000000ca45         db  0xd8 ; '.'
000000000000ca46         db  0xff ; '.'
000000000000ca47         db  0xff ; '.'
000000000000ca48         db  0x20 ; ' '
000000000000ca49         db  0x1a ; '.'
000000000000ca4a         db  0x00 ; '.'
000000000000ca4b         db  0x00 ; '.'
000000000000ca4c         db  0x48 ; 'H'
000000000000ca4d         db  0xdb ; '.'
000000000000ca4e         db  0xff ; '.'
000000000000ca4f         db  0xff ; '.'
000000000000ca50         db  0x5c ; '\'
000000000000ca51         db  0x1a ; '.'
000000000000ca52         db  0x00 ; '.'
000000000000ca53         db  0x00 ; '.'
000000000000ca54         db  0xa8 ; '.'
000000000000ca55         db  0xdb ; '.'
000000000000ca56         db  0xff ; '.'
000000000000ca57         db  0xff ; '.'
000000000000ca58         db  0x80 ; '.'
000000000000ca59         db  0x1a ; '.'
000000000000ca5a         db  0x00 ; '.'
000000000000ca5b         db  0x00 ; '.'
000000000000ca5c         db  0xb8 ; '.'
000000000000ca5d         db  0xdd ; '.'
000000000000ca5e         db  0xff ; '.'
000000000000ca5f         db  0xff ; '.'
000000000000ca60         db  0xb8 ; '.'
000000000000ca61         db  0x1a ; '.'
000000000000ca62         db  0x00 ; '.'
000000000000ca63         db  0x00 ; '.'
000000000000ca64         db  0xd8 ; '.'
000000000000ca65         db  0xdd ; '.'
000000000000ca66         db  0xff ; '.'
000000000000ca67         db  0xff ; '.'
000000000000ca68         db  0xcc ; '.'
000000000000ca69         db  0x1a ; '.'
000000000000ca6a         db  0x00 ; '.'
000000000000ca6b         db  0x00 ; '.'
000000000000ca6c         db  0xe8 ; '.'
000000000000ca6d         db  0xdd ; '.'
000000000000ca6e         db  0xff ; '.'
000000000000ca6f         db  0xff ; '.'
000000000000ca70         db  0xe0 ; '.'
000000000000ca71         db  0x1a ; '.'
000000000000ca72         db  0x00 ; '.'
000000000000ca73         db  0x00 ; '.'
000000000000ca74         db  0x28 ; '('
000000000000ca75         db  0xde ; '.'
000000000000ca76         db  0xff ; '.'
000000000000ca77         db  0xff ; '.'
000000000000ca78         db  0xf4 ; '.'
000000000000ca79         db  0x1a ; '.'
000000000000ca7a         db  0x00 ; '.'
000000000000ca7b         db  0x00 ; '.'
000000000000ca7c         db  0x68 ; 'h'
000000000000ca7d         db  0xde ; '.'
000000000000ca7e         db  0xff ; '.'
000000000000ca7f         db  0xff ; '.'
000000000000ca80         db  0x08 ; '.'
000000000000ca81         db  0x1b ; '.'
000000000000ca82         db  0x00 ; '.'
000000000000ca83         db  0x00 ; '.'
000000000000ca84         db  0xa8 ; '.'
000000000000ca85         db  0xde ; '.'
000000000000ca86         db  0xff ; '.'
000000000000ca87         db  0xff ; '.'
000000000000ca88         db  0x28 ; '('
000000000000ca89         db  0x1b ; '.'
000000000000ca8a         db  0x00 ; '.'
000000000000ca8b         db  0x00 ; '.'
000000000000ca8c         db  0x18 ; '.'
000000000000ca8d         db  0xdf ; '.'
000000000000ca8e         db  0xff ; '.'
000000000000ca8f         db  0xff ; '.'
000000000000ca90         db  0x48 ; 'H'
000000000000ca91         db  0x1b ; '.'
000000000000ca92         db  0x00 ; '.'
000000000000ca93         db  0x00 ; '.'
000000000000ca94         db  0x98 ; '.'
000000000000ca95         db  0xdf ; '.'
000000000000ca96         db  0xff ; '.'
000000000000ca97         db  0xff ; '.'
000000000000ca98         db  0xa8 ; '.'
000000000000ca99         db  0x1b ; '.'
000000000000ca9a         db  0x00 ; '.'
000000000000ca9b         db  0x00 ; '.'
000000000000ca9c         db  0xd8 ; '.'
000000000000ca9d         db  0xdf ; '.'
000000000000ca9e         db  0xff ; '.'
000000000000ca9f         db  0xff ; '.'
000000000000caa0         db  0xe0 ; '.'
000000000000caa1         db  0x1b ; '.'
000000000000caa2         db  0x00 ; '.'
000000000000caa3         db  0x00 ; '.'
000000000000caa4         db  0x58 ; 'X'
000000000000caa5         db  0xe0 ; '.'
000000000000caa6         db  0xff ; '.'
000000000000caa7         db  0xff ; '.'
000000000000caa8         db  0x18 ; '.'
000000000000caa9         db  0x1c ; '.'
000000000000caaa         db  0x00 ; '.'
000000000000caab         db  0x00 ; '.'
000000000000caac         db  0xd8 ; '.'
000000000000caad         db  0xe2 ; '.'
000000000000caae         db  0xff ; '.'
000000000000caaf         db  0xff ; '.'
000000000000cab0         db  0x50 ; 'P'
000000000000cab1         db  0x1c ; '.'
000000000000cab2         db  0x00 ; '.'
000000000000cab3         db  0x00 ; '.'
000000000000cab4         db  0x18 ; '.'
000000000000cab5         db  0xe3 ; '.'
000000000000cab6         db  0xff ; '.'
000000000000cab7         db  0xff ; '.'
000000000000cab8         db  0x70 ; 'p'
000000000000cab9         db  0x1c ; '.'
000000000000caba         db  0x00 ; '.'
000000000000cabb         db  0x00 ; '.'
000000000000cabc         db  0x78 ; 'x'
000000000000cabd         db  0xe3 ; '.'
000000000000cabe         db  0xff ; '.'
000000000000cabf         db  0xff ; '.'
000000000000cac0         db  0xa0 ; '.'
000000000000cac1         db  0x1c ; '.'
000000000000cac2         db  0x00 ; '.'
000000000000cac3         db  0x00 ; '.'
000000000000cac4         db  0x88 ; '.'
000000000000cac5         db  0xe3 ; '.'
000000000000cac6         db  0xff ; '.'
000000000000cac7         db  0xff ; '.'
000000000000cac8         db  0xb8 ; '.'
000000000000cac9         db  0x1c ; '.'
000000000000caca         db  0x00 ; '.'
000000000000cacb         db  0x00 ; '.'
000000000000cacc         db  0xf8 ; '.'
000000000000cacd         db  0xe3 ; '.'
000000000000cace         db  0xff ; '.'
000000000000cacf         db  0xff ; '.'
000000000000cad0         db  0x00 ; '.'
000000000000cad1         db  0x1d ; '.'
000000000000cad2         db  0x00 ; '.'
000000000000cad3         db  0x00 ; '.'
000000000000cad4         db  0x08 ; '.'
000000000000cad5         db  0xe4 ; '.'
000000000000cad6         db  0xff ; '.'
000000000000cad7         db  0xff ; '.'
000000000000cad8         db  0x18 ; '.'
000000000000cad9         db  0x1d ; '.'
000000000000cada         db  0x00 ; '.'
000000000000cadb         db  0x00 ; '.'
000000000000cadc         db  0x00 ; '.'
000000000000cadd         db  0x00 ; '.'
000000000000cade         db  0x00 ; '.'
000000000000cadf         db  0x00 ; '.'


        ; Section .eh_frame
        ; Range: [0xcae0; 0xe358[ (6264 bytes)
        ; File offset : [51936; 58200[ (6264 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

000000000000cae0         dd         0x00000014                                  ; Length of the record
000000000000cae4         dd         0x00000000                                  ; CIE ID
000000000000cae8         db         0x01                                        ; Version
000000000000cae9         db         "zR", 0                                     ; Augmentation String
000000000000caec         db         0x01                                        ; Code Alignment Factor (unsigned LEB128=1)
000000000000caed         db         0x78                                        ; Data Alignment Factor (signed LEB128=-8)
000000000000caee         db         0x10                                        ; Return address register
000000000000caef         db         0x01                                        ; Augmentation data length
000000000000caf0         db         0x1b                                        ; FDE encoding
000000000000caf1         db  0x0c ; '.'
000000000000caf2         db  0x07 ; '.'
000000000000caf3         db  0x08 ; '.'
000000000000caf4         db  0x90 ; '.'
000000000000caf5         db  0x01 ; '.'
000000000000caf6         db  0x07 ; '.'
000000000000caf7         db  0x10 ; '.'
000000000000caf8         dd         0x00000014                                  ; Length of the record
000000000000cafc         dd         0x0000001c                                  ; FDE: parent CIE at 0xcae0 (FDE encoding = 0x1B)
000000000000cb00         db         0x80, 0x58, 2 dup (0xff)                    ; begin 0x2380
000000000000cb04         db         0x2b, 3 dup (0x00)                          ; length 0x2b (end at 0x23ab)
000000000000cb08         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cb09         align      16
000000000000cb10         dd         0x00000014                                  ; Length of the record
000000000000cb14         dd         0x00000000                                  ; CIE ID
000000000000cb18         db         0x01                                        ; Version
000000000000cb19         db         "zR", 0                                     ; Augmentation String
000000000000cb1c         db         0x01                                        ; Code Alignment Factor (unsigned LEB128=1)
000000000000cb1d         db         0x78                                        ; Data Alignment Factor (signed LEB128=-8)
000000000000cb1e         db         0x10                                        ; Return address register
000000000000cb1f         db         0x01                                        ; Augmentation data length
000000000000cb20         db         0x1b                                        ; FDE encoding
000000000000cb21         db  0x0c ; '.'
000000000000cb22         db  0x07 ; '.'
000000000000cb23         db  0x08 ; '.'
000000000000cb24         db  0x90 ; '.'
000000000000cb25         db  0x01 ; '.'
000000000000cb26         db  0x00 ; '.'
000000000000cb27         db  0x00 ; '.'
000000000000cb28         dd         0x00000024                                  ; Length of the record
000000000000cb2c         dd         0x0000001c                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000cb30         db         0x60, 0x4e, 2 dup (0xff)                    ; begin 0x1990
000000000000cb34         db         0x50, 0x04, 2 dup (0x00)                    ; length 0x450 (end at 0x1de0)
000000000000cb38         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cb39         db  0x0e ; '.'
000000000000cb3a         db  0x10 ; '.'
000000000000cb3b         db  0x46 ; 'F'
000000000000cb3c         db  0x0e ; '.'
000000000000cb3d         db  0x18 ; '.'
000000000000cb3e         db  0x4a ; 'J'
000000000000cb3f         db  0x0f ; '.'
000000000000cb40         db  0x0b ; '.'
000000000000cb41         db  0x77 ; 'w'
000000000000cb42         db  0x08 ; '.'
000000000000cb43         db  0x80 ; '.'
000000000000cb44         db  0x00 ; '.'
000000000000cb45         db  0x3f ; '?'
000000000000cb46         db  0x1a ; '.'
000000000000cb47         db  0x3b ; ';'
000000000000cb48         db  0x2a ; '*'
000000000000cb49         db  0x33 ; '3'
000000000000cb4a         db  0x24 ; '$'
000000000000cb4b         db  0x22 ; '"'
000000000000cb4c         db  0x00 ; '.'
000000000000cb4d         db  0x00 ; '.'
000000000000cb4e         db  0x00 ; '.'
000000000000cb4f         db  0x00 ; '.'
000000000000cb50         dd         0x00000014                                  ; Length of the record
000000000000cb54         dd         0x00000044                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000cb58         db         0x88, 0x52, 2 dup (0xff)                    ; begin 0x1de0
000000000000cb5c         db         0x10, 3 dup (0x00)                          ; length 0x10 (end at 0x1df0)
000000000000cb60         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cb61         align      8
000000000000cb68         dd         0x00000028                                  ; Length of the record
000000000000cb6c         dd         0x0000005c                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000cb70         db         0x20, 0x59, 2 dup (0xff)                    ; begin 0x2490
000000000000cb74         db         0xc2, 0x04, 2 dup (0x00)                    ; length 0x4c2 (end at 0x2952)
000000000000cb78         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cb79         db  0x42 ; 'B'
000000000000cb7a         db  0x0e ; '.'
000000000000cb7b         db  0x10 ; '.'
000000000000cb7c         db  0x8d ; '.'
000000000000cb7d         db  0x02 ; '.'
000000000000cb7e         db  0x42 ; 'B'
000000000000cb7f         db  0x0e ; '.'
000000000000cb80         db  0x18 ; '.'
000000000000cb81         db  0x8c ; '.'
000000000000cb82         db  0x03 ; '.'
000000000000cb83         db  0x46 ; 'F'
000000000000cb84         db  0x0e ; '.'
000000000000cb85         db  0x20 ; ' '
000000000000cb86         db  0x86 ; '.'
000000000000cb87         db  0x04 ; '.'
000000000000cb88         db  0x41 ; 'A'
000000000000cb89         db  0x0e ; '.'
000000000000cb8a         db  0x28 ; '('
000000000000cb8b         db  0x83 ; '.'
000000000000cb8c         db  0x05 ; '.'
000000000000cb8d         db  0x49 ; 'I'
000000000000cb8e         db  0x0e ; '.'
000000000000cb8f         db  0xb0 ; '.'
000000000000cb90         db  0x01 ; '.'
000000000000cb91         db  0x00 ; '.'
000000000000cb92         db  0x00 ; '.'
000000000000cb93         db  0x00 ; '.'
000000000000cb94         dd         0x00000068                                  ; Length of the record
000000000000cb98         dd         0x00000088                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000cb9c         db         0x54, 0x52, 2 dup (0xff)                    ; begin 0x1df0
000000000000cba0         db         0x90, 0x05, 2 dup (0x00)                    ; length 0x590 (end at 0x2380)
000000000000cba4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cba5         db  0x42 ; 'B'
000000000000cba6         db  0x0e ; '.'
000000000000cba7         db  0x10 ; '.'
000000000000cba8         db  0x8f ; '.'
000000000000cba9         db  0x02 ; '.'
000000000000cbaa         db  0x42 ; 'B'
000000000000cbab         db  0x0e ; '.'
000000000000cbac         db  0x18 ; '.'
000000000000cbad         db  0x8e ; '.'
000000000000cbae         db  0x03 ; '.'
000000000000cbaf         db  0x45 ; 'E'
000000000000cbb0         db  0x0e ; '.'
000000000000cbb1         db  0x20 ; ' '
000000000000cbb2         db  0x8d ; '.'
000000000000cbb3         db  0x04 ; '.'
000000000000cbb4         db  0x42 ; 'B'
000000000000cbb5         db  0x0e ; '.'
000000000000cbb6         db  0x28 ; '('
000000000000cbb7         db  0x8c ; '.'
000000000000cbb8         db  0x05 ; '.'
000000000000cbb9         db  0x47 ; 'G'
000000000000cbba         db  0x0e ; '.'
000000000000cbbb         db  0x30 ; '0'
000000000000cbbc         db  0x86 ; '.'
000000000000cbbd         db  0x06 ; '.'
000000000000cbbe         db  0x41 ; 'A'
000000000000cbbf         db  0x0e ; '.'
000000000000cbc0         db  0x38 ; '8'
000000000000cbc1         db  0x83 ; '.'
000000000000cbc2         db  0x07 ; '.'
000000000000cbc3         db  0x53 ; 'S'
000000000000cbc4         db  0x0e ; '.'
000000000000cbc5         db  0xb0 ; '.'
000000000000cbc6         db  0x02 ; '.'
000000000000cbc7         db  0x03 ; '.'
000000000000cbc8         db  0x81 ; '.'
000000000000cbc9         db  0x01 ; '.'
000000000000cbca         db  0x0a ; '.'
000000000000cbcb         db  0x0e ; '.'
000000000000cbcc         db  0xb8 ; '.'
000000000000cbcd         db  0x02 ; '.'
000000000000cbce         db  0x50 ; 'P'
000000000000cbcf         db  0x0e ; '.'
000000000000cbd0         db  0xc0 ; '.'
000000000000cbd1         db  0x02 ; '.'
000000000000cbd2         db  0x71 ; 'q'
000000000000cbd3         db  0x0b ; '.'
000000000000cbd4         db  0x03 ; '.'
000000000000cbd5         db  0x7c ; '|'
000000000000cbd6         db  0x01 ; '.'
000000000000cbd7         db  0x0e ; '.'
000000000000cbd8         db  0xb8 ; '.'
000000000000cbd9         db  0x02 ; '.'
000000000000cbda         db  0x45 ; 'E'
000000000000cbdb         db  0x0e ; '.'
000000000000cbdc         db  0xc0 ; '.'
000000000000cbdd         db  0x02 ; '.'
000000000000cbde         db  0x62 ; 'b'
000000000000cbdf         db  0x0e ; '.'
000000000000cbe0         db  0xb8 ; '.'
000000000000cbe1         db  0x02 ; '.'
000000000000cbe2         db  0x41 ; 'A'
000000000000cbe3         db  0x0e ; '.'
000000000000cbe4         db  0xb0 ; '.'
000000000000cbe5         db  0x02 ; '.'
000000000000cbe6         db  0x64 ; 'd'
000000000000cbe7         db  0x0a ; '.'
000000000000cbe8         db  0x0e ; '.'
000000000000cbe9         db  0x38 ; '8'
000000000000cbea         db  0x41 ; 'A'
000000000000cbeb         db  0x0e ; '.'
000000000000cbec         db  0x30 ; '0'
000000000000cbed         db  0x41 ; 'A'
000000000000cbee         db  0x0e ; '.'
000000000000cbef         db  0x28 ; '('
000000000000cbf0         db  0x42 ; 'B'
000000000000cbf1         db  0x0e ; '.'
000000000000cbf2         db  0x20 ; ' '
000000000000cbf3         db  0x42 ; 'B'
000000000000cbf4         db  0x0e ; '.'
000000000000cbf5         db  0x18 ; '.'
000000000000cbf6         db  0x42 ; 'B'
000000000000cbf7         db  0x0e ; '.'
000000000000cbf8         db  0x10 ; '.'
000000000000cbf9         db  0x42 ; 'B'
000000000000cbfa         db  0x0e ; '.'
000000000000cbfb         db  0x08 ; '.'
000000000000cbfc         db  0x41 ; 'A'
000000000000cbfd         db  0x0b ; '.'
000000000000cbfe         db  0x00 ; '.'
000000000000cbff         db  0x00 ; '.'
000000000000cc00         dd         0x00000038                                  ; Length of the record
000000000000cc04         dd         0x000000f4                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000cc08         db         0x58, 0x5d, 2 dup (0xff)                    ; begin 0x2960
000000000000cc0c         db         0x75, 3 dup (0x00)                          ; length 0x75 (end at 0x29d5)
000000000000cc10         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cc11         db  0x45 ; 'E'
000000000000cc12         db  0x0e ; '.'
000000000000cc13         db  0x10 ; '.'
000000000000cc14         db  0x8c ; '.'
000000000000cc15         db  0x02 ; '.'
000000000000cc16         db  0x41 ; 'A'
000000000000cc17         db  0x0e ; '.'
000000000000cc18         db  0x18 ; '.'
000000000000cc19         db  0x86 ; '.'
000000000000cc1a         db  0x03 ; '.'
000000000000cc1b         db  0x41 ; 'A'
000000000000cc1c         db  0x0e ; '.'
000000000000cc1d         db  0x20 ; ' '
000000000000cc1e         db  0x83 ; '.'
000000000000cc1f         db  0x04 ; '.'
000000000000cc20         db  0x02 ; '.'
000000000000cc21         db  0x48 ; 'H'
000000000000cc22         db  0x0a ; '.'
000000000000cc23         db  0x0e ; '.'
000000000000cc24         db  0x18 ; '.'
000000000000cc25         db  0x41 ; 'A'
000000000000cc26         db  0x0e ; '.'
000000000000cc27         db  0x10 ; '.'
000000000000cc28         db  0x42 ; 'B'
000000000000cc29         db  0x0e ; '.'
000000000000cc2a         db  0x08 ; '.'
000000000000cc2b         db  0x46 ; 'F'
000000000000cc2c         db  0x0b ; '.'
000000000000cc2d         db  0x49 ; 'I'
000000000000cc2e         db  0x0a ; '.'
000000000000cc2f         db  0x0e ; '.'
000000000000cc30         db  0x18 ; '.'
000000000000cc31         db  0x41 ; 'A'
000000000000cc32         db  0x0e ; '.'
000000000000cc33         db  0x10 ; '.'
000000000000cc34         db  0x42 ; 'B'
000000000000cc35         db  0x0e ; '.'
000000000000cc36         db  0x08 ; '.'
000000000000cc37         db  0x4c ; 'L'
000000000000cc38         db  0x0b ; '.'
000000000000cc39         db  0x00 ; '.'
000000000000cc3a         db  0x00 ; '.'
000000000000cc3b         db  0x00 ; '.'
000000000000cc3c         dd         0x00000010                                  ; Length of the record
000000000000cc40         dd         0x00000130                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000cc44         db         0x9c, 0x5d, 2 dup (0xff)                    ; begin 0x29e0
000000000000cc48         db         0x2b, 3 dup (0x00)                          ; length 0x2b (end at 0x2a0b)
000000000000cc4c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cc4d         align      16
000000000000cc50         dd         0x00000018                                  ; Length of the record
000000000000cc54         dd         0x00000144                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000cc58         db         0xb8, 0x5d, 2 dup (0xff)                    ; begin 0x2a10
000000000000cc5c         db         0x17, 3 dup (0x00)                          ; length 0x17 (end at 0x2a27)
000000000000cc60         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cc61         db  0x41 ; 'A'
000000000000cc62         db  0x0e ; '.'
000000000000cc63         db  0x10 ; '.'
000000000000cc64         db  0x83 ; '.'
000000000000cc65         db  0x02 ; '.'
000000000000cc66         db  0x51 ; 'Q'
000000000000cc67         db  0x0e ; '.'
000000000000cc68         db  0x08 ; '.'
000000000000cc69         db  0x00 ; '.'
000000000000cc6a         db  0x00 ; '.'
000000000000cc6b         db  0x00 ; '.'
000000000000cc6c         dd         0x00000020                                  ; Length of the record
000000000000cc70         dd         0x00000160                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000cc74         db         0xbc, 0x5d, 2 dup (0xff)                    ; begin 0x2a30
000000000000cc78         db         0x54, 3 dup (0x00)                          ; length 0x54 (end at 0x2a84)
000000000000cc7c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cc7d         db  0x41 ; 'A'
000000000000cc7e         db  0x0e ; '.'
000000000000cc7f         db  0x10 ; '.'
000000000000cc80         db  0x83 ; '.'
000000000000cc81         db  0x02 ; '.'
000000000000cc82         db  0x46 ; 'F'
000000000000cc83         db  0x0e ; '.'
000000000000cc84         db  0x30 ; '0'
000000000000cc85         db  0x76 ; 'v'
000000000000cc86         db  0x0a ; '.'
000000000000cc87         db  0x0e ; '.'
000000000000cc88         db  0x10 ; '.'
000000000000cc89         db  0x41 ; 'A'
000000000000cc8a         db  0x0e ; '.'
000000000000cc8b         db  0x08 ; '.'
000000000000cc8c         db  0x42 ; 'B'
000000000000cc8d         db  0x0b ; '.'
000000000000cc8e         db  0x00 ; '.'
000000000000cc8f         db  0x00 ; '.'
000000000000cc90         dd         0x00000020                                  ; Length of the record
000000000000cc94         dd         0x00000184                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000cc98         db         0xf8, 0x5d, 2 dup (0xff)                    ; begin 0x2a90
000000000000cc9c         db         0x54, 3 dup (0x00)                          ; length 0x54 (end at 0x2ae4)
000000000000cca0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cca1         db  0x41 ; 'A'
000000000000cca2         db  0x0e ; '.'
000000000000cca3         db  0x10 ; '.'
000000000000cca4         db  0x83 ; '.'
000000000000cca5         db  0x02 ; '.'
000000000000cca6         db  0x46 ; 'F'
000000000000cca7         db  0x0e ; '.'
000000000000cca8         db  0x30 ; '0'
000000000000cca9         db  0x76 ; 'v'
000000000000ccaa         db  0x0a ; '.'
000000000000ccab         db  0x0e ; '.'
000000000000ccac         db  0x10 ; '.'
000000000000ccad         db  0x41 ; 'A'
000000000000ccae         db  0x0e ; '.'
000000000000ccaf         db  0x08 ; '.'
000000000000ccb0         db  0x42 ; 'B'
000000000000ccb1         db  0x0b ; '.'
000000000000ccb2         db  0x00 ; '.'
000000000000ccb3         db  0x00 ; '.'
000000000000ccb4         dd         0x0000004c                                  ; Length of the record
000000000000ccb8         dd         0x000001a8                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000ccbc         db         0x34, 0x5e, 2 dup (0xff)                    ; begin 0x2af0
000000000000ccc0         db         0x83, 0x0d, 2 dup (0x00)                    ; length 0xd83 (end at 0x3873)
000000000000ccc4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ccc5         db  0x42 ; 'B'
000000000000ccc6         db  0x0e ; '.'
000000000000ccc7         db  0x10 ; '.'
000000000000ccc8         db  0x8f ; '.'
000000000000ccc9         db  0x02 ; '.'
000000000000ccca         db  0x42 ; 'B'
000000000000cccb         db  0x0e ; '.'
000000000000cccc         db  0x18 ; '.'
000000000000cccd         db  0x8e ; '.'
000000000000ccce         db  0x03 ; '.'
000000000000cccf         db  0x42 ; 'B'
000000000000ccd0         db  0x0e ; '.'
000000000000ccd1         db  0x20 ; ' '
000000000000ccd2         db  0x8d ; '.'
000000000000ccd3         db  0x04 ; '.'
000000000000ccd4         db  0x42 ; 'B'
000000000000ccd5         db  0x0e ; '.'
000000000000ccd6         db  0x28 ; '('
000000000000ccd7         db  0x8c ; '.'
000000000000ccd8         db  0x05 ; '.'
000000000000ccd9         db  0x44 ; 'D'
000000000000ccda         db  0x0e ; '.'
000000000000ccdb         db  0x30 ; '0'
000000000000ccdc         db  0x86 ; '.'
000000000000ccdd         db  0x06 ; '.'
000000000000ccde         db  0x41 ; 'A'
000000000000ccdf         db  0x0e ; '.'
000000000000cce0         db  0x38 ; '8'
000000000000cce1         db  0x83 ; '.'
000000000000cce2         db  0x07 ; '.'
000000000000cce3         db  0x4a ; 'J'
000000000000cce4         db  0x0e ; '.'
000000000000cce5         db  0xb0 ; '.'
000000000000cce6         db  0x03 ; '.'
000000000000cce7         db  0x03 ; '.'
000000000000cce8         db  0xfa ; '.'
000000000000cce9         db  0x04 ; '.'
000000000000ccea         db  0x0a ; '.'
000000000000cceb         db  0x0e ; '.'
000000000000ccec         db  0x38 ; '8'
000000000000cced         db  0x41 ; 'A'
000000000000ccee         db  0x0e ; '.'
000000000000ccef         db  0x30 ; '0'
000000000000ccf0         db  0x41 ; 'A'
000000000000ccf1         db  0x0e ; '.'
000000000000ccf2         db  0x28 ; '('
000000000000ccf3         db  0x42 ; 'B'
000000000000ccf4         db  0x0e ; '.'
000000000000ccf5         db  0x20 ; ' '
000000000000ccf6         db  0x42 ; 'B'
000000000000ccf7         db  0x0e ; '.'
000000000000ccf8         db  0x18 ; '.'
000000000000ccf9         db  0x42 ; 'B'
000000000000ccfa         db  0x0e ; '.'
000000000000ccfb         db  0x10 ; '.'
000000000000ccfc         db  0x42 ; 'B'
000000000000ccfd         db  0x0e ; '.'
000000000000ccfe         db  0x08 ; '.'
000000000000ccff         db  0x45 ; 'E'
000000000000cd00         db  0x0b ; '.'
000000000000cd01         db  0x00 ; '.'
000000000000cd02         db  0x00 ; '.'
000000000000cd03         db  0x00 ; '.'
000000000000cd04         dd         0x00000058                                  ; Length of the record
000000000000cd08         dd         0x000001f8                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000cd0c         db         0x74, 0x6b, 2 dup (0xff)                    ; begin 0x3880
000000000000cd10         db         0x20, 0x01, 2 dup (0x00)                    ; length 0x120 (end at 0x39a0)
000000000000cd14         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cd15         db  0x42 ; 'B'
000000000000cd16         db  0x0e ; '.'
000000000000cd17         db  0x10 ; '.'
000000000000cd18         db  0x8f ; '.'
000000000000cd19         db  0x02 ; '.'
000000000000cd1a         db  0x42 ; 'B'
000000000000cd1b         db  0x0e ; '.'
000000000000cd1c         db  0x18 ; '.'
000000000000cd1d         db  0x8e ; '.'
000000000000cd1e         db  0x03 ; '.'
000000000000cd1f         db  0x45 ; 'E'
000000000000cd20         db  0x0e ; '.'
000000000000cd21         db  0x20 ; ' '
000000000000cd22         db  0x8d ; '.'
000000000000cd23         db  0x04 ; '.'
000000000000cd24         db  0x42 ; 'B'
000000000000cd25         db  0x0e ; '.'
000000000000cd26         db  0x28 ; '('
000000000000cd27         db  0x8c ; '.'
000000000000cd28         db  0x05 ; '.'
000000000000cd29         db  0x44 ; 'D'
000000000000cd2a         db  0x0e ; '.'
000000000000cd2b         db  0x30 ; '0'
000000000000cd2c         db  0x86 ; '.'
000000000000cd2d         db  0x06 ; '.'
000000000000cd2e         db  0x41 ; 'A'
000000000000cd2f         db  0x0e ; '.'
000000000000cd30         db  0x38 ; '8'
000000000000cd31         db  0x83 ; '.'
000000000000cd32         db  0x07 ; '.'
000000000000cd33         db  0x47 ; 'G'
000000000000cd34         db  0x0e ; '.'
000000000000cd35         db  0x50 ; 'P'
000000000000cd36         db  0x7d ; '}'
000000000000cd37         db  0x0e ; '.'
000000000000cd38         db  0x58 ; 'X'
000000000000cd39         db  0x48 ; 'H'
000000000000cd3a         db  0x0e ; '.'
000000000000cd3b         db  0x60 ; '`'
000000000000cd3c         db  0x55 ; 'U'
000000000000cd3d         db  0x0e ; '.'
000000000000cd3e         db  0x58 ; 'X'
000000000000cd3f         db  0x41 ; 'A'
000000000000cd40         db  0x0e ; '.'
000000000000cd41         db  0x50 ; 'P'
000000000000cd42         db  0x02 ; '.'
000000000000cd43         db  0x5c ; '\'
000000000000cd44         db  0x0a ; '.'
000000000000cd45         db  0x0e ; '.'
000000000000cd46         db  0x38 ; '8'
000000000000cd47         db  0x43 ; 'C'
000000000000cd48         db  0x0e ; '.'
000000000000cd49         db  0x30 ; '0'
000000000000cd4a         db  0x41 ; 'A'
000000000000cd4b         db  0x0e ; '.'
000000000000cd4c         db  0x28 ; '('
000000000000cd4d         db  0x42 ; 'B'
000000000000cd4e         db  0x0e ; '.'
000000000000cd4f         db  0x20 ; ' '
000000000000cd50         db  0x42 ; 'B'
000000000000cd51         db  0x0e ; '.'
000000000000cd52         db  0x18 ; '.'
000000000000cd53         db  0x42 ; 'B'
000000000000cd54         db  0x0e ; '.'
000000000000cd55         db  0x10 ; '.'
000000000000cd56         db  0x42 ; 'B'
000000000000cd57         db  0x0e ; '.'
000000000000cd58         db  0x08 ; '.'
000000000000cd59         db  0x46 ; 'F'
000000000000cd5a         db  0x0b ; '.'
000000000000cd5b         db  0x00 ; '.'
000000000000cd5c         db  0x00 ; '.'
000000000000cd5d         db  0x00 ; '.'
000000000000cd5e         db  0x00 ; '.'
000000000000cd5f         db  0x00 ; '.'
000000000000cd60         dd         0x00000010                                  ; Length of the record
000000000000cd64         dd         0x00000254                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000cd68         db         0x38, 0x6c, 2 dup (0xff)                    ; begin 0x39a0
000000000000cd6c         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0x39a8)
000000000000cd70         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cd71         align      4
000000000000cd74         dd         0x00000010                                  ; Length of the record
000000000000cd78         dd         0x00000268                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000cd7c         db         0x34, 0x6c, 2 dup (0xff)                    ; begin 0x39b0
000000000000cd80         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0x39b8)
000000000000cd84         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cd85         align      8
000000000000cd88         dd         0x0000002c                                  ; Length of the record
000000000000cd8c         dd         0x0000027c                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000cd90         db         0x30, 0x6c, 2 dup (0xff)                    ; begin 0x39c0
000000000000cd94         db         0xa4, 3 dup (0x00)                          ; length 0xa4 (end at 0x3a64)
000000000000cd98         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cd99         db  0x41 ; 'A'
000000000000cd9a         db  0x0e ; '.'
000000000000cd9b         db  0x10 ; '.'
000000000000cd9c         db  0x86 ; '.'
000000000000cd9d         db  0x02 ; '.'
000000000000cd9e         db  0x41 ; 'A'
000000000000cd9f         db  0x0e ; '.'
000000000000cda0         db  0x18 ; '.'
000000000000cda1         db  0x83 ; '.'
000000000000cda2         db  0x03 ; '.'
000000000000cda3         db  0x44 ; 'D'
000000000000cda4         db  0x0e ; '.'
000000000000cda5         db  0x20 ; ' '
000000000000cda6         db  0x7a ; 'z'
000000000000cda7         db  0x0a ; '.'
000000000000cda8         db  0x0e ; '.'
000000000000cda9         db  0x18 ; '.'
000000000000cdaa         db  0x41 ; 'A'
000000000000cdab         db  0x0e ; '.'
000000000000cdac         db  0x10 ; '.'
000000000000cdad         db  0x41 ; 'A'
000000000000cdae         db  0x0e ; '.'
000000000000cdaf         db  0x08 ; '.'
000000000000cdb0         db  0x41 ; 'A'
000000000000cdb1         db  0x0b ; '.'
000000000000cdb2         db  0x00 ; '.'
000000000000cdb3         db  0x00 ; '.'
000000000000cdb4         db  0x00 ; '.'
000000000000cdb5         db  0x00 ; '.'
000000000000cdb6         db  0x00 ; '.'
000000000000cdb7         db  0x00 ; '.'
000000000000cdb8         dd         0x00000014                                  ; Length of the record
000000000000cdbc         dd         0x000002ac                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000cdc0         db         0xb0, 0x6c, 2 dup (0xff)                    ; begin 0x3a70
000000000000cdc4         db         0x42, 3 dup (0x00)                          ; length 0x42 (end at 0x3ab2)
000000000000cdc8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cdc9         align      16
000000000000cdd0         dd         0x0000001c                                  ; Length of the record
000000000000cdd4         dd         0x000002c4                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000cdd8         db         0xe8, 0x6c, 2 dup (0xff)                    ; begin 0x3ac0
000000000000cddc         db         0x9f, 3 dup (0x00)                          ; length 0x9f (end at 0x3b5f)
000000000000cde0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cde1         db  0x44 ; 'D'
000000000000cde2         db  0x0e ; '.'
000000000000cde3         db  0x10 ; '.'
000000000000cde4         db  0x83 ; '.'
000000000000cde5         db  0x02 ; '.'
000000000000cde6         db  0x02 ; '.'
000000000000cde7         db  0x78 ; 'x'
000000000000cde8         db  0x0a ; '.'
000000000000cde9         db  0x0e ; '.'
000000000000cdea         db  0x08 ; '.'
000000000000cdeb         db  0x41 ; 'A'
000000000000cdec         db  0x0b ; '.'
000000000000cded         db  0x00 ; '.'
000000000000cdee         db  0x00 ; '.'
000000000000cdef         db  0x00 ; '.'
000000000000cdf0         dd         0x00000040                                  ; Length of the record
000000000000cdf4         dd         0x000002e4                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000cdf8         db         0x68, 0x6d, 2 dup (0xff)                    ; begin 0x3b60
000000000000cdfc         db         0xe7, 3 dup (0x00)                          ; length 0xe7 (end at 0x3c47)
000000000000ce00         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ce01         db  0x41 ; 'A'
000000000000ce02         db  0x0e ; '.'
000000000000ce03         db  0x10 ; '.'
000000000000ce04         db  0x86 ; '.'
000000000000ce05         db  0x02 ; '.'
000000000000ce06         db  0x41 ; 'A'
000000000000ce07         db  0x0e ; '.'
000000000000ce08         db  0x18 ; '.'
000000000000ce09         db  0x83 ; '.'
000000000000ce0a         db  0x03 ; '.'
000000000000ce0b         db  0x49 ; 'I'
000000000000ce0c         db  0x0e ; '.'
000000000000ce0d         db  0x20 ; ' '
000000000000ce0e         db  0x6e ; 'n'
000000000000ce0f         db  0x0a ; '.'
000000000000ce10         db  0x0e ; '.'
000000000000ce11         db  0x18 ; '.'
000000000000ce12         db  0x41 ; 'A'
000000000000ce13         db  0x0e ; '.'
000000000000ce14         db  0x10 ; '.'
000000000000ce15         db  0x41 ; 'A'
000000000000ce16         db  0x0e ; '.'
000000000000ce17         db  0x08 ; '.'
000000000000ce18         db  0x45 ; 'E'
000000000000ce19         db  0x0b ; '.'
000000000000ce1a         db  0x02 ; '.'
000000000000ce1b         db  0x4a ; 'J'
000000000000ce1c         db  0x0a ; '.'
000000000000ce1d         db  0x0e ; '.'
000000000000ce1e         db  0x18 ; '.'
000000000000ce1f         db  0x41 ; 'A'
000000000000ce20         db  0x0e ; '.'
000000000000ce21         db  0x10 ; '.'
000000000000ce22         db  0x41 ; 'A'
000000000000ce23         db  0x0e ; '.'
000000000000ce24         db  0x08 ; '.'
000000000000ce25         db  0x44 ; 'D'
000000000000ce26         db  0x0b ; '.'
000000000000ce27         db  0x02 ; '.'
000000000000ce28         db  0x54 ; 'T'
000000000000ce29         db  0x0e ; '.'
000000000000ce2a         db  0x18 ; '.'
000000000000ce2b         db  0x41 ; 'A'
000000000000ce2c         db  0x0e ; '.'
000000000000ce2d         db  0x10 ; '.'
000000000000ce2e         db  0x41 ; 'A'
000000000000ce2f         db  0x0e ; '.'
000000000000ce30         db  0x08 ; '.'
000000000000ce31         db  0x00 ; '.'
000000000000ce32         db  0x00 ; '.'
000000000000ce33         db  0x00 ; '.'
000000000000ce34         dd         0x00000074                                  ; Length of the record
000000000000ce38         dd         0x00000328                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000ce3c         db         0x14, 0x6e, 2 dup (0xff)                    ; begin 0x3c50
000000000000ce40         db         0x34, 0x12, 2 dup (0x00)                    ; length 0x1234 (end at 0x4e84)
000000000000ce44         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ce45         db  0x42 ; 'B'
000000000000ce46         db  0x0e ; '.'
000000000000ce47         db  0x10 ; '.'
000000000000ce48         db  0x8f ; '.'
000000000000ce49         db  0x02 ; '.'
000000000000ce4a         db  0x42 ; 'B'
000000000000ce4b         db  0x0e ; '.'
000000000000ce4c         db  0x18 ; '.'
000000000000ce4d         db  0x8e ; '.'
000000000000ce4e         db  0x03 ; '.'
000000000000ce4f         db  0x45 ; 'E'
000000000000ce50         db  0x0e ; '.'
000000000000ce51         db  0x20 ; ' '
000000000000ce52         db  0x8d ; '.'
000000000000ce53         db  0x04 ; '.'
000000000000ce54         db  0x42 ; 'B'
000000000000ce55         db  0x0e ; '.'
000000000000ce56         db  0x28 ; '('
000000000000ce57         db  0x8c ; '.'
000000000000ce58         db  0x05 ; '.'
000000000000ce59         db  0x44 ; 'D'
000000000000ce5a         db  0x0e ; '.'
000000000000ce5b         db  0x30 ; '0'
000000000000ce5c         db  0x86 ; '.'
000000000000ce5d         db  0x06 ; '.'
000000000000ce5e         db  0x41 ; 'A'
000000000000ce5f         db  0x0e ; '.'
000000000000ce60         db  0x38 ; '8'
000000000000ce61         db  0x83 ; '.'
000000000000ce62         db  0x07 ; '.'
000000000000ce63         db  0x53 ; 'S'
000000000000ce64         db  0x0e ; '.'
000000000000ce65         db  0xf0 ; '.'
000000000000ce66         db  0x01 ; '.'
000000000000ce67         db  0x03 ; '.'
000000000000ce68         db  0x81 ; '.'
000000000000ce69         db  0x0b ; '.'
000000000000ce6a         db  0x0e ; '.'
000000000000ce6b         db  0xf8 ; '.'
000000000000ce6c         db  0x01 ; '.'
000000000000ce6d         db  0x4a ; 'J'
000000000000ce6e         db  0x0e ; '.'
000000000000ce6f         db  0x80 ; '.'
000000000000ce70         db  0x02 ; '.'
000000000000ce71         db  0x44 ; 'D'
000000000000ce72         db  0x0e ; '.'
000000000000ce73         db  0x88 ; '.'
000000000000ce74         db  0x02 ; '.'
000000000000ce75         db  0x45 ; 'E'
000000000000ce76         db  0x0e ; '.'
000000000000ce77         db  0x90 ; '.'
000000000000ce78         db  0x02 ; '.'
000000000000ce79         db  0x5f ; '_'
000000000000ce7a         db  0x0e ; '.'
000000000000ce7b         db  0xf0 ; '.'
000000000000ce7c         db  0x01 ; '.'
000000000000ce7d         db  0x64 ; 'd'
000000000000ce7e         db  0x0a ; '.'
000000000000ce7f         db  0x0e ; '.'
000000000000ce80         db  0x38 ; '8'
000000000000ce81         db  0x41 ; 'A'
000000000000ce82         db  0x0e ; '.'
000000000000ce83         db  0x30 ; '0'
000000000000ce84         db  0x41 ; 'A'
000000000000ce85         db  0x0e ; '.'
000000000000ce86         db  0x28 ; '('
000000000000ce87         db  0x42 ; 'B'
000000000000ce88         db  0x0e ; '.'
000000000000ce89         db  0x20 ; ' '
000000000000ce8a         db  0x42 ; 'B'
000000000000ce8b         db  0x0e ; '.'
000000000000ce8c         db  0x18 ; '.'
000000000000ce8d         db  0x42 ; 'B'
000000000000ce8e         db  0x0e ; '.'
000000000000ce8f         db  0x10 ; '.'
000000000000ce90         db  0x42 ; 'B'
000000000000ce91         db  0x0e ; '.'
000000000000ce92         db  0x08 ; '.'
000000000000ce93         db  0x44 ; 'D'
000000000000ce94         db  0x0b ; '.'
000000000000ce95         db  0x03 ; '.'
000000000000ce96         db  0x99 ; '.'
000000000000ce97         db  0x05 ; '.'
000000000000ce98         db  0x0e ; '.'
000000000000ce99         db  0xf8 ; '.'
000000000000ce9a         db  0x01 ; '.'
000000000000ce9b         db  0x4d ; 'M'
000000000000ce9c         db  0x0e ; '.'
000000000000ce9d         db  0x80 ; '.'
000000000000ce9e         db  0x02 ; '.'
000000000000ce9f         db  0x44 ; 'D'
000000000000cea0         db  0x0e ; '.'
000000000000cea1         db  0x88 ; '.'
000000000000cea2         db  0x02 ; '.'
000000000000cea3         db  0x47 ; 'G'
000000000000cea4         db  0x0e ; '.'
000000000000cea5         db  0x90 ; '.'
000000000000cea6         db  0x02 ; '.'
000000000000cea7         db  0x5b ; '['
000000000000cea8         db  0x0e ; '.'
000000000000cea9         db  0xf0 ; '.'
000000000000ceaa         db  0x01 ; '.'
000000000000ceab         db  0x00 ; '.'
000000000000ceac         dd         0x00000068                                  ; Length of the record
000000000000ceb0         dd         0x000003a0                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000ceb4         db         0xdc, 0x7f, 2 dup (0xff)                    ; begin 0x4e90
000000000000ceb8         db         0xab, 0x01, 2 dup (0x00)                    ; length 0x1ab (end at 0x503b)
000000000000cebc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cebd         db  0x42 ; 'B'
000000000000cebe         db  0x0e ; '.'
000000000000cebf         db  0x10 ; '.'
000000000000cec0         db  0x8f ; '.'
000000000000cec1         db  0x02 ; '.'
000000000000cec2         db  0x42 ; 'B'
000000000000cec3         db  0x0e ; '.'
000000000000cec4         db  0x18 ; '.'
000000000000cec5         db  0x8e ; '.'
000000000000cec6         db  0x03 ; '.'
000000000000cec7         db  0x45 ; 'E'
000000000000cec8         db  0x0e ; '.'
000000000000cec9         db  0x20 ; ' '
000000000000ceca         db  0x8d ; '.'
000000000000cecb         db  0x04 ; '.'
000000000000cecc         db  0x42 ; 'B'
000000000000cecd         db  0x0e ; '.'
000000000000cece         db  0x28 ; '('
000000000000cecf         db  0x8c ; '.'
000000000000ced0         db  0x05 ; '.'
000000000000ced1         db  0x44 ; 'D'
000000000000ced2         db  0x0e ; '.'
000000000000ced3         db  0x30 ; '0'
000000000000ced4         db  0x86 ; '.'
000000000000ced5         db  0x06 ; '.'
000000000000ced6         db  0x41 ; 'A'
000000000000ced7         db  0x0e ; '.'
000000000000ced8         db  0x38 ; '8'
000000000000ced9         db  0x83 ; '.'
000000000000ceda         db  0x07 ; '.'
000000000000cedb         db  0x47 ; 'G'
000000000000cedc         db  0x0e ; '.'
000000000000cedd         db  0x60 ; '`'
000000000000cede         db  0x02 ; '.'
000000000000cedf         db  0x99 ; '.'
000000000000cee0         db  0x0e ; '.'
000000000000cee1         db  0x68 ; 'h'
000000000000cee2         db  0x5f ; '_'
000000000000cee3         db  0x0e ; '.'
000000000000cee4         db  0x70 ; 'p'
000000000000cee5         db  0x46 ; 'F'
000000000000cee6         db  0x0e ; '.'
000000000000cee7         db  0x78 ; 'x'
000000000000cee8         db  0x42 ; 'B'
000000000000cee9         db  0x0e ; '.'
000000000000ceea         db  0x80 ; '.'
000000000000ceeb         db  0x01 ; '.'
000000000000ceec         db  0x59 ; 'Y'
000000000000ceed         db  0x0e ; '.'
000000000000ceee         db  0x60 ; '`'
000000000000ceef         db  0x02 ; '.'
000000000000cef0         db  0x40 ; '@'
000000000000cef1         db  0x0e ; '.'
000000000000cef2         db  0x68 ; 'h'
000000000000cef3         db  0x4b ; 'K'
000000000000cef4         db  0x0e ; '.'
000000000000cef5         db  0x70 ; 'p'
000000000000cef6         db  0x43 ; 'C'
000000000000cef7         db  0x0e ; '.'
000000000000cef8         db  0x78 ; 'x'
000000000000cef9         db  0x45 ; 'E'
000000000000cefa         db  0x0e ; '.'
000000000000cefb         db  0x80 ; '.'
000000000000cefc         db  0x01 ; '.'
000000000000cefd         db  0x5e ; '^'
000000000000cefe         db  0x0e ; '.'
000000000000ceff         db  0x60 ; '`'
000000000000cf00         db  0x4c ; 'L'
000000000000cf01         db  0x0a ; '.'
000000000000cf02         db  0x0e ; '.'
000000000000cf03         db  0x38 ; '8'
000000000000cf04         db  0x44 ; 'D'
000000000000cf05         db  0x0e ; '.'
000000000000cf06         db  0x30 ; '0'
000000000000cf07         db  0x41 ; 'A'
000000000000cf08         db  0x0e ; '.'
000000000000cf09         db  0x28 ; '('
000000000000cf0a         db  0x42 ; 'B'
000000000000cf0b         db  0x0e ; '.'
000000000000cf0c         db  0x20 ; ' '
000000000000cf0d         db  0x42 ; 'B'
000000000000cf0e         db  0x0e ; '.'
000000000000cf0f         db  0x18 ; '.'
000000000000cf10         db  0x42 ; 'B'
000000000000cf11         db  0x0e ; '.'
000000000000cf12         db  0x10 ; '.'
000000000000cf13         db  0x42 ; 'B'
000000000000cf14         db  0x0e ; '.'
000000000000cf15         db  0x08 ; '.'
000000000000cf16         db  0x46 ; 'F'
000000000000cf17         db  0x0b ; '.'
000000000000cf18         dd         0x00000028                                  ; Length of the record
000000000000cf1c         dd         0x0000040c                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000cf20         db         0x20, 0x81, 2 dup (0xff)                    ; begin 0x5040
000000000000cf24         db         0x36, 3 dup (0x00)                          ; length 0x36 (end at 0x5076)
000000000000cf28         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cf29         db  0x42 ; 'B'
000000000000cf2a         db  0x0e ; '.'
000000000000cf2b         db  0x10 ; '.'
000000000000cf2c         db  0x8c ; '.'
000000000000cf2d         db  0x02 ; '.'
000000000000cf2e         db  0x41 ; 'A'
000000000000cf2f         db  0x0e ; '.'
000000000000cf30         db  0x18 ; '.'
000000000000cf31         db  0x86 ; '.'
000000000000cf32         db  0x03 ; '.'
000000000000cf33         db  0x41 ; 'A'
000000000000cf34         db  0x0e ; '.'
000000000000cf35         db  0x20 ; ' '
000000000000cf36         db  0x83 ; '.'
000000000000cf37         db  0x04 ; '.'
000000000000cf38         db  0x6e ; 'n'
000000000000cf39         db  0x0e ; '.'
000000000000cf3a         db  0x18 ; '.'
000000000000cf3b         db  0x41 ; 'A'
000000000000cf3c         db  0x0e ; '.'
000000000000cf3d         db  0x10 ; '.'
000000000000cf3e         db  0x42 ; 'B'
000000000000cf3f         db  0x0e ; '.'
000000000000cf40         db  0x08 ; '.'
000000000000cf41         db  0x00 ; '.'
000000000000cf42         db  0x00 ; '.'
000000000000cf43         db  0x00 ; '.'
000000000000cf44         dd         0x00000010                                  ; Length of the record
000000000000cf48         dd         0x00000438                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000cf4c         db         0x34, 0x81, 2 dup (0xff)                    ; begin 0x5080
000000000000cf50         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0x5091)
000000000000cf54         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cf55         align      8
000000000000cf58         dd         0x00000010                                  ; Length of the record
000000000000cf5c         dd         0x0000044c                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000cf60         db         0x40, 0x81, 2 dup (0xff)                    ; begin 0x50a0
000000000000cf64         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0x50b1)
000000000000cf68         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cf69         align      4
000000000000cf6c         dd         0x00000010                                  ; Length of the record
000000000000cf70         dd         0x00000460                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000cf74         db         0x4c, 0x81, 2 dup (0xff)                    ; begin 0x50c0
000000000000cf78         db         0x35, 3 dup (0x00)                          ; length 0x35 (end at 0x50f5)
000000000000cf7c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cf7d         align      128
000000000000cf80         dd         0x00000010                                  ; Length of the record
000000000000cf84         dd         0x00000474                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000cf88         db         0x78, 0x81, 2 dup (0xff)                    ; begin 0x5100
000000000000cf8c         db         0x15, 3 dup (0x00)                          ; length 0x15 (end at 0x5115)
000000000000cf90         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cf91         align      4
000000000000cf94         dd         0x00000010                                  ; Length of the record
000000000000cf98         dd         0x00000488                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000cf9c         db         0x84, 0x81, 2 dup (0xff)                    ; begin 0x5120
000000000000cfa0         db         0x30, 3 dup (0x00)                          ; length 0x30 (end at 0x5150)
000000000000cfa4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cfa5         db  0x6b ; 'k'
000000000000cfa6         db  0x0e ; '.'
000000000000cfa7         db  0x10 ; '.'
000000000000cfa8         dd         0x00000050                                  ; Length of the record
000000000000cfac         dd         0x0000049c                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000cfb0         db         0xa0, 0x81, 2 dup (0xff)                    ; begin 0x5150
000000000000cfb4         db         0x74, 3 dup (0x00)                          ; length 0x74 (end at 0x51c4)
000000000000cfb8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cfb9         db  0x42 ; 'B'
000000000000cfba         db  0x0e ; '.'
000000000000cfbb         db  0x10 ; '.'
000000000000cfbc         db  0x8f ; '.'
000000000000cfbd         db  0x02 ; '.'
000000000000cfbe         db  0x42 ; 'B'
000000000000cfbf         db  0x0e ; '.'
000000000000cfc0         db  0x18 ; '.'
000000000000cfc1         db  0x8e ; '.'
000000000000cfc2         db  0x03 ; '.'
000000000000cfc3         db  0x49 ; 'I'
000000000000cfc4         db  0x0e ; '.'
000000000000cfc5         db  0x20 ; ' '
000000000000cfc6         db  0x8d ; '.'
000000000000cfc7         db  0x04 ; '.'
000000000000cfc8         db  0x42 ; 'B'
000000000000cfc9         db  0x0e ; '.'
000000000000cfca         db  0x28 ; '('
000000000000cfcb         db  0x8c ; '.'
000000000000cfcc         db  0x05 ; '.'
000000000000cfcd         db  0x44 ; 'D'
000000000000cfce         db  0x0e ; '.'
000000000000cfcf         db  0x30 ; '0'
000000000000cfd0         db  0x86 ; '.'
000000000000cfd1         db  0x06 ; '.'
000000000000cfd2         db  0x41 ; 'A'
000000000000cfd3         db  0x0e ; '.'
000000000000cfd4         db  0x38 ; '8'
000000000000cfd5         db  0x83 ; '.'
000000000000cfd6         db  0x07 ; '.'
000000000000cfd7         db  0x4d ; 'M'
000000000000cfd8         db  0x0e ; '.'
000000000000cfd9         db  0x50 ; 'P'
000000000000cfda         db  0x5f ; '_'
000000000000cfdb         db  0x0e ; '.'
000000000000cfdc         db  0x58 ; 'X'
000000000000cfdd         db  0x47 ; 'G'
000000000000cfde         db  0x0e ; '.'
000000000000cfdf         db  0x60 ; '`'
000000000000cfe0         db  0x46 ; 'F'
000000000000cfe1         db  0x0e ; '.'
000000000000cfe2         db  0x68 ; 'h'
000000000000cfe3         db  0x44 ; 'D'
000000000000cfe4         db  0x0e ; '.'
000000000000cfe5         db  0x70 ; 'p'
000000000000cfe6         db  0x58 ; 'X'
000000000000cfe7         db  0x0e ; '.'
000000000000cfe8         db  0x38 ; '8'
000000000000cfe9         db  0x41 ; 'A'
000000000000cfea         db  0x0e ; '.'
000000000000cfeb         db  0x30 ; '0'
000000000000cfec         db  0x41 ; 'A'
000000000000cfed         db  0x0e ; '.'
000000000000cfee         db  0x28 ; '('
000000000000cfef         db  0x42 ; 'B'
000000000000cff0         db  0x0e ; '.'
000000000000cff1         db  0x20 ; ' '
000000000000cff2         db  0x42 ; 'B'
000000000000cff3         db  0x0e ; '.'
000000000000cff4         db  0x18 ; '.'
000000000000cff5         db  0x42 ; 'B'
000000000000cff6         db  0x0e ; '.'
000000000000cff7         db  0x10 ; '.'
000000000000cff8         db  0x42 ; 'B'
000000000000cff9         db  0x0e ; '.'
000000000000cffa         db  0x08 ; '.'
000000000000cffb         db  0x00 ; '.'
000000000000cffc         dd         0x00000068                                  ; Length of the record
000000000000d000         dd         0x000004f0                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d004         db         0xcc, 0x81, 2 dup (0xff)                    ; begin 0x51d0
000000000000d008         db         0xe3, 3 dup (0x00)                          ; length 0xe3 (end at 0x52b3)
000000000000d00c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d00d         db  0x42 ; 'B'
000000000000d00e         db  0x0e ; '.'
000000000000d00f         db  0x10 ; '.'
000000000000d010         db  0x8f ; '.'
000000000000d011         db  0x02 ; '.'
000000000000d012         db  0x42 ; 'B'
000000000000d013         db  0x0e ; '.'
000000000000d014         db  0x18 ; '.'
000000000000d015         db  0x8e ; '.'
000000000000d016         db  0x03 ; '.'
000000000000d017         db  0x49 ; 'I'
000000000000d018         db  0x0e ; '.'
000000000000d019         db  0x20 ; ' '
000000000000d01a         db  0x8d ; '.'
000000000000d01b         db  0x04 ; '.'
000000000000d01c         db  0x42 ; 'B'
000000000000d01d         db  0x0e ; '.'
000000000000d01e         db  0x28 ; '('
000000000000d01f         db  0x8c ; '.'
000000000000d020         db  0x05 ; '.'
000000000000d021         db  0x44 ; 'D'
000000000000d022         db  0x0e ; '.'
000000000000d023         db  0x30 ; '0'
000000000000d024         db  0x86 ; '.'
000000000000d025         db  0x06 ; '.'
000000000000d026         db  0x41 ; 'A'
000000000000d027         db  0x0e ; '.'
000000000000d028         db  0x38 ; '8'
000000000000d029         db  0x83 ; '.'
000000000000d02a         db  0x07 ; '.'
000000000000d02b         db  0x4d ; 'M'
000000000000d02c         db  0x0e ; '.'
000000000000d02d         db  0x70 ; 'p'
000000000000d02e         db  0x65 ; 'e'
000000000000d02f         db  0x0e ; '.'
000000000000d030         db  0x78 ; 'x'
000000000000d031         db  0x4d ; 'M'
000000000000d032         db  0x0e ; '.'
000000000000d033         db  0x80 ; '.'
000000000000d034         db  0x01 ; '.'
000000000000d035         db  0x46 ; 'F'
000000000000d036         db  0x0e ; '.'
000000000000d037         db  0x88 ; '.'
000000000000d038         db  0x01 ; '.'
000000000000d039         db  0x42 ; 'B'
000000000000d03a         db  0x0e ; '.'
000000000000d03b         db  0x90 ; '.'
000000000000d03c         db  0x01 ; '.'
000000000000d03d         db  0x5e ; '^'
000000000000d03e         db  0x0e ; '.'
000000000000d03f         db  0x70 ; 'p'
000000000000d040         db  0x56 ; 'V'
000000000000d041         db  0x0e ; '.'
000000000000d042         db  0x78 ; 'x'
000000000000d043         db  0x43 ; 'C'
000000000000d044         db  0x0e ; '.'
000000000000d045         db  0x80 ; '.'
000000000000d046         db  0x01 ; '.'
000000000000d047         db  0x43 ; 'C'
000000000000d048         db  0x0e ; '.'
000000000000d049         db  0x88 ; '.'
000000000000d04a         db  0x01 ; '.'
000000000000d04b         db  0x56 ; 'V'
000000000000d04c         db  0x0e ; '.'
000000000000d04d         db  0x90 ; '.'
000000000000d04e         db  0x01 ; '.'
000000000000d04f         db  0x52 ; 'R'
000000000000d050         db  0x0e ; '.'
000000000000d051         db  0x70 ; 'p'
000000000000d052         db  0x5b ; '['
000000000000d053         db  0x0e ; '.'
000000000000d054         db  0x38 ; '8'
000000000000d055         db  0x41 ; 'A'
000000000000d056         db  0x0e ; '.'
000000000000d057         db  0x30 ; '0'
000000000000d058         db  0x41 ; 'A'
000000000000d059         db  0x0e ; '.'
000000000000d05a         db  0x28 ; '('
000000000000d05b         db  0x42 ; 'B'
000000000000d05c         db  0x0e ; '.'
000000000000d05d         db  0x20 ; ' '
000000000000d05e         db  0x42 ; 'B'
000000000000d05f         db  0x0e ; '.'
000000000000d060         db  0x18 ; '.'
000000000000d061         db  0x42 ; 'B'
000000000000d062         db  0x0e ; '.'
000000000000d063         db  0x10 ; '.'
000000000000d064         db  0x42 ; 'B'
000000000000d065         db  0x0e ; '.'
000000000000d066         db  0x08 ; '.'
000000000000d067         db  0x00 ; '.'
000000000000d068         dd         0x00000010                                  ; Length of the record
000000000000d06c         dd         0x0000055c                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d070         db         0x50, 0x82, 2 dup (0xff)                    ; begin 0x52c0
000000000000d074         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0x52ca)
000000000000d078         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d079         align      4
000000000000d07c         dd         0x00000028                                  ; Length of the record
000000000000d080         dd         0x00000570                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d084         db         0x4c, 0x82, 2 dup (0xff)                    ; begin 0x52d0
000000000000d088         db         0x93, 3 dup (0x00)                          ; length 0x93 (end at 0x5363)
000000000000d08c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d08d         db  0x48 ; 'H'
000000000000d08e         db  0x0e ; '.'
000000000000d08f         db  0x10 ; '.'
000000000000d090         db  0x8c ; '.'
000000000000d091         db  0x02 ; '.'
000000000000d092         db  0x48 ; 'H'
000000000000d093         db  0x0e ; '.'
000000000000d094         db  0x18 ; '.'
000000000000d095         db  0x86 ; '.'
000000000000d096         db  0x03 ; '.'
000000000000d097         db  0x41 ; 'A'
000000000000d098         db  0x0e ; '.'
000000000000d099         db  0x20 ; ' '
000000000000d09a         db  0x83 ; '.'
000000000000d09b         db  0x04 ; '.'
000000000000d09c         db  0x02 ; '.'
000000000000d09d         db  0x74 ; 't'
000000000000d09e         db  0x0e ; '.'
000000000000d09f         db  0x18 ; '.'
000000000000d0a0         db  0x4b ; 'K'
000000000000d0a1         db  0x0e ; '.'
000000000000d0a2         db  0x10 ; '.'
000000000000d0a3         db  0x42 ; 'B'
000000000000d0a4         db  0x0e ; '.'
000000000000d0a5         db  0x08 ; '.'
000000000000d0a6         db  0x00 ; '.'
000000000000d0a7         db  0x00 ; '.'
000000000000d0a8         dd         0x00000010                                  ; Length of the record
000000000000d0ac         dd         0x0000059c                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d0b0         db         0xc0, 0x82, 2 dup (0xff)                    ; begin 0x5370
000000000000d0b4         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x5383)
000000000000d0b8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d0b9         align      4
000000000000d0bc         dd         0x00000010                                  ; Length of the record
000000000000d0c0         dd         0x000005b0                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d0c4         db         0xcc, 0x82, 2 dup (0xff)                    ; begin 0x5390
000000000000d0c8         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x539c)
000000000000d0cc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d0cd         align      16
000000000000d0d0         dd         0x00000010                                  ; Length of the record
000000000000d0d4         dd         0x000005c4                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d0d8         db         0xc8, 0x82, 2 dup (0xff)                    ; begin 0x53a0
000000000000d0dc         db         0x18, 3 dup (0x00)                          ; length 0x18 (end at 0x53b8)
000000000000d0e0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d0e1         align      4
000000000000d0e4         dd         0x00000010                                  ; Length of the record
000000000000d0e8         dd         0x000005d8                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d0ec         db         0xd4, 0x82, 2 dup (0xff)                    ; begin 0x53c0
000000000000d0f0         db         0x14, 3 dup (0x00)                          ; length 0x14 (end at 0x53d4)
000000000000d0f4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d0f5         align      8
000000000000d0f8         dd         0x00000018                                  ; Length of the record
000000000000d0fc         dd         0x000005ec                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d100         db         0xe0, 0x82, 2 dup (0xff)                    ; begin 0x53e0
000000000000d104         db         0x8e, 3 dup (0x00)                          ; length 0x8e (end at 0x546e)
000000000000d108         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d109         db  0x44 ; 'D'
000000000000d10a         db  0x0e ; '.'
000000000000d10b         db  0x50 ; 'P'
000000000000d10c         db  0x02 ; '.'
000000000000d10d         db  0x7f ; '.'
000000000000d10e         db  0x0a ; '.'
000000000000d10f         db  0x0e ; '.'
000000000000d110         db  0x08 ; '.'
000000000000d111         db  0x41 ; 'A'
000000000000d112         db  0x0b ; '.'
000000000000d113         db  0x00 ; '.'
000000000000d114         dd         0x00000018                                  ; Length of the record
000000000000d118         dd         0x00000608                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d11c         db         0x54, 0x83, 2 dup (0xff)                    ; begin 0x5470
000000000000d120         db         0x8a, 3 dup (0x00)                          ; length 0x8a (end at 0x54fa)
000000000000d124         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d125         db  0x44 ; 'D'
000000000000d126         db  0x0e ; '.'
000000000000d127         db  0x50 ; 'P'
000000000000d128         db  0x02 ; '.'
000000000000d129         db  0x7b ; '{'
000000000000d12a         db  0x0a ; '.'
000000000000d12b         db  0x0e ; '.'
000000000000d12c         db  0x08 ; '.'
000000000000d12d         db  0x41 ; 'A'
000000000000d12e         db  0x0b ; '.'
000000000000d12f         db  0x00 ; '.'
000000000000d130         dd         0x00000010                                  ; Length of the record
000000000000d134         dd         0x00000624                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d138         db         0xc8, 0x83, 2 dup (0xff)                    ; begin 0x5500
000000000000d13c         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x550c)
000000000000d140         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d141         align      4
000000000000d144         dd         0x00000010                                  ; Length of the record
000000000000d148         dd         0x00000638                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d14c         db         0xc4, 0x83, 2 dup (0xff)                    ; begin 0x5510
000000000000d150         db         0x0f, 3 dup (0x00)                          ; length 0xf (end at 0x551f)
000000000000d154         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d155         align      8
000000000000d158         dd         0x00000018                                  ; Length of the record
000000000000d15c         dd         0x0000064c                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d160         db         0xc0, 0x83, 2 dup (0xff)                    ; begin 0x5520
000000000000d164         db         0x98, 3 dup (0x00)                          ; length 0x98 (end at 0x55b8)
000000000000d168         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d169         db  0x44 ; 'D'
000000000000d16a         db  0x0e ; '.'
000000000000d16b         db  0x50 ; 'P'
000000000000d16c         db  0x02 ; '.'
000000000000d16d         db  0x8e ; '.'
000000000000d16e         db  0x0a ; '.'
000000000000d16f         db  0x0e ; '.'
000000000000d170         db  0x08 ; '.'
000000000000d171         db  0x41 ; 'A'
000000000000d172         db  0x0b ; '.'
000000000000d173         db  0x00 ; '.'
000000000000d174         dd         0x00000010                                  ; Length of the record
000000000000d178         dd         0x00000668                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d17c         db         0x44, 0x84, 2 dup (0xff)                    ; begin 0x55c0
000000000000d180         db         0x10, 3 dup (0x00)                          ; length 0x10 (end at 0x55d0)
000000000000d184         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d185         align      8
000000000000d188         dd         0x00000010                                  ; Length of the record
000000000000d18c         dd         0x0000067c                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d190         db         0x40, 0x84, 2 dup (0xff)                    ; begin 0x55d0
000000000000d194         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0x55e1)
000000000000d198         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d199         align      4
000000000000d19c         dd         0x00000010                                  ; Length of the record
000000000000d1a0         dd         0x00000690                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d1a4         db         0x4c, 0x84, 2 dup (0xff)                    ; begin 0x55f0
000000000000d1a8         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0x55fa)
000000000000d1ac         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d1ad         align      16
000000000000d1b0         dd         0x00000018                                  ; Length of the record
000000000000d1b4         dd         0x000006a4                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d1b8         db         0x48, 0x84, 2 dup (0xff)                    ; begin 0x5600
000000000000d1bc         db         0x8e, 3 dup (0x00)                          ; length 0x8e (end at 0x568e)
000000000000d1c0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d1c1         db  0x44 ; 'D'
000000000000d1c2         db  0x0e ; '.'
000000000000d1c3         db  0x50 ; 'P'
000000000000d1c4         db  0x02 ; '.'
000000000000d1c5         db  0x7f ; '.'
000000000000d1c6         db  0x0a ; '.'
000000000000d1c7         db  0x0e ; '.'
000000000000d1c8         db  0x08 ; '.'
000000000000d1c9         db  0x41 ; 'A'
000000000000d1ca         db  0x0b ; '.'
000000000000d1cb         db  0x00 ; '.'
000000000000d1cc         dd         0x00000018                                  ; Length of the record
000000000000d1d0         dd         0x000006c0                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d1d4         db         0xbc, 0x84, 2 dup (0xff)                    ; begin 0x5690
000000000000d1d8         db         0x91, 3 dup (0x00)                          ; length 0x91 (end at 0x5721)
000000000000d1dc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d1dd         db  0x44 ; 'D'
000000000000d1de         db  0x0e ; '.'
000000000000d1df         db  0x50 ; 'P'
000000000000d1e0         db  0x02 ; '.'
000000000000d1e1         db  0x82 ; '.'
000000000000d1e2         db  0x0a ; '.'
000000000000d1e3         db  0x0e ; '.'
000000000000d1e4         db  0x08 ; '.'
000000000000d1e5         db  0x41 ; 'A'
000000000000d1e6         db  0x0b ; '.'
000000000000d1e7         db  0x00 ; '.'
000000000000d1e8         dd         0x00000010                                  ; Length of the record
000000000000d1ec         dd         0x000006dc                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d1f0         db         0x40, 0x85, 2 dup (0xff)                    ; begin 0x5730
000000000000d1f4         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x573c)
000000000000d1f8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d1f9         align      4
000000000000d1fc         dd         0x00000010                                  ; Length of the record
000000000000d200         dd         0x000006f0                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d204         db         0x3c, 0x85, 2 dup (0xff)                    ; begin 0x5740
000000000000d208         db         0x17, 3 dup (0x00)                          ; length 0x17 (end at 0x5757)
000000000000d20c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d20d         align      16
000000000000d210         dd         0x00000010                                  ; Length of the record
000000000000d214         dd         0x00000704                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d218         db         0x48, 0x85, 2 dup (0xff)                    ; begin 0x5760
000000000000d21c         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x5773)
000000000000d220         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d221         align      4
000000000000d224         dd         0x00000010                                  ; Length of the record
000000000000d228         dd         0x00000718                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d22c         db         0x54, 0x85, 2 dup (0xff)                    ; begin 0x5780
000000000000d230         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x578c)
000000000000d234         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d235         align      8
000000000000d238         dd         0x00000010                                  ; Length of the record
000000000000d23c         dd         0x0000072c                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d240         db         0x50, 0x85, 2 dup (0xff)                    ; begin 0x5790
000000000000d244         db         0x14, 3 dup (0x00)                          ; length 0x14 (end at 0x57a4)
000000000000d248         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d249         align      4
000000000000d24c         dd         0x00000010                                  ; Length of the record
000000000000d250         dd         0x00000740                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d254         db         0x5c, 0x85, 2 dup (0xff)                    ; begin 0x57b0
000000000000d258         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x57c3)
000000000000d25c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d25d         align      32
000000000000d260         dd         0x00000014                                  ; Length of the record
000000000000d264         dd         0x00000754                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d268         db         0x68, 0x85, 2 dup (0xff)                    ; begin 0x57d0
000000000000d26c         db         0x18, 3 dup (0x00)                          ; length 0x18 (end at 0x57e8)
000000000000d270         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d271         align      8
000000000000d278         dd         0x00000024                                  ; Length of the record
000000000000d27c         dd         0x0000076c                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d280         db         0x70, 0x85, 2 dup (0xff)                    ; begin 0x57f0
000000000000d284         db         0x71, 3 dup (0x00)                          ; length 0x71 (end at 0x5861)
000000000000d288         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d289         db  0x41 ; 'A'
000000000000d28a         db  0x0e ; '.'
000000000000d28b         db  0x10 ; '.'
000000000000d28c         db  0x83 ; '.'
000000000000d28d         db  0x02 ; '.'
000000000000d28e         db  0x56 ; 'V'
000000000000d28f         db  0x0e ; '.'
000000000000d290         db  0xb0 ; '.'
000000000000d291         db  0x01 ; '.'
000000000000d292         db  0x02 ; '.'
000000000000d293         db  0x4c ; 'L'
000000000000d294         db  0x0a ; '.'
000000000000d295         db  0x0e ; '.'
000000000000d296         db  0x10 ; '.'
000000000000d297         db  0x41 ; 'A'
000000000000d298         db  0x0e ; '.'
000000000000d299         db  0x08 ; '.'
000000000000d29a         db  0x44 ; 'D'
000000000000d29b         db  0x0b ; '.'
000000000000d29c         db  0x00 ; '.'
000000000000d29d         db  0x00 ; '.'
000000000000d29e         db  0x00 ; '.'
000000000000d29f         db  0x00 ; '.'
000000000000d2a0         dd         0x0000004c                                  ; Length of the record
000000000000d2a4         dd         0x00000794                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d2a8         db         0xc8, 0x85, 2 dup (0xff)                    ; begin 0x5870
000000000000d2ac         db         0xc9, 0x03, 2 dup (0x00)                    ; length 0x3c9 (end at 0x5c39)
000000000000d2b0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d2b1         db  0x42 ; 'B'
000000000000d2b2         db  0x0e ; '.'
000000000000d2b3         db  0x10 ; '.'
000000000000d2b4         db  0x8f ; '.'
000000000000d2b5         db  0x02 ; '.'
000000000000d2b6         db  0x42 ; 'B'
000000000000d2b7         db  0x0e ; '.'
000000000000d2b8         db  0x18 ; '.'
000000000000d2b9         db  0x8e ; '.'
000000000000d2ba         db  0x03 ; '.'
000000000000d2bb         db  0x45 ; 'E'
000000000000d2bc         db  0x0e ; '.'
000000000000d2bd         db  0x20 ; ' '
000000000000d2be         db  0x8d ; '.'
000000000000d2bf         db  0x04 ; '.'
000000000000d2c0         db  0x42 ; 'B'
000000000000d2c1         db  0x0e ; '.'
000000000000d2c2         db  0x28 ; '('
000000000000d2c3         db  0x8c ; '.'
000000000000d2c4         db  0x05 ; '.'
000000000000d2c5         db  0x44 ; 'D'
000000000000d2c6         db  0x0e ; '.'
000000000000d2c7         db  0x30 ; '0'
000000000000d2c8         db  0x86 ; '.'
000000000000d2c9         db  0x06 ; '.'
000000000000d2ca         db  0x41 ; 'A'
000000000000d2cb         db  0x0e ; '.'
000000000000d2cc         db  0x38 ; '8'
000000000000d2cd         db  0x83 ; '.'
000000000000d2ce         db  0x07 ; '.'
000000000000d2cf         db  0x50 ; 'P'
000000000000d2d0         db  0x0e ; '.'
000000000000d2d1         db  0x90 ; '.'
000000000000d2d2         db  0x01 ; '.'
000000000000d2d3         db  0x03 ; '.'
000000000000d2d4         db  0x10 ; '.'
000000000000d2d5         db  0x01 ; '.'
000000000000d2d6         db  0x0a ; '.'
000000000000d2d7         db  0x0e ; '.'
000000000000d2d8         db  0x38 ; '8'
000000000000d2d9         db  0x41 ; 'A'
000000000000d2da         db  0x0e ; '.'
000000000000d2db         db  0x30 ; '0'
000000000000d2dc         db  0x41 ; 'A'
000000000000d2dd         db  0x0e ; '.'
000000000000d2de         db  0x28 ; '('
000000000000d2df         db  0x42 ; 'B'
000000000000d2e0         db  0x0e ; '.'
000000000000d2e1         db  0x20 ; ' '
000000000000d2e2         db  0x42 ; 'B'
000000000000d2e3         db  0x0e ; '.'
000000000000d2e4         db  0x18 ; '.'
000000000000d2e5         db  0x42 ; 'B'
000000000000d2e6         db  0x0e ; '.'
000000000000d2e7         db  0x10 ; '.'
000000000000d2e8         db  0x42 ; 'B'
000000000000d2e9         db  0x0e ; '.'
000000000000d2ea         db  0x08 ; '.'
000000000000d2eb         db  0x46 ; 'F'
000000000000d2ec         db  0x0b ; '.'
000000000000d2ed         db  0x00 ; '.'
000000000000d2ee         db  0x00 ; '.'
000000000000d2ef         db  0x00 ; '.'
000000000000d2f0         dd         0x0000005c                                  ; Length of the record
000000000000d2f4         dd         0x000007e4                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d2f8         db         0x48, 0x89, 2 dup (0xff)                    ; begin 0x5c40
000000000000d2fc         db         0xcd, 3 dup (0x00)                          ; length 0xcd (end at 0x5d0d)
000000000000d300         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d301         db  0x4b ; 'K'
000000000000d302         db  0x0e ; '.'
000000000000d303         db  0x10 ; '.'
000000000000d304         db  0x8f ; '.'
000000000000d305         db  0x02 ; '.'
000000000000d306         db  0x42 ; 'B'
000000000000d307         db  0x0e ; '.'
000000000000d308         db  0x18 ; '.'
000000000000d309         db  0x8e ; '.'
000000000000d30a         db  0x03 ; '.'
000000000000d30b         db  0x45 ; 'E'
000000000000d30c         db  0x0e ; '.'
000000000000d30d         db  0x20 ; ' '
000000000000d30e         db  0x8d ; '.'
000000000000d30f         db  0x04 ; '.'
000000000000d310         db  0x42 ; 'B'
000000000000d311         db  0x0e ; '.'
000000000000d312         db  0x28 ; '('
000000000000d313         db  0x8c ; '.'
000000000000d314         db  0x05 ; '.'
000000000000d315         db  0x44 ; 'D'
000000000000d316         db  0x0e ; '.'
000000000000d317         db  0x30 ; '0'
000000000000d318         db  0x86 ; '.'
000000000000d319         db  0x06 ; '.'
000000000000d31a         db  0x41 ; 'A'
000000000000d31b         db  0x0e ; '.'
000000000000d31c         db  0x38 ; '8'
000000000000d31d         db  0x83 ; '.'
000000000000d31e         db  0x07 ; '.'
000000000000d31f         db  0x52 ; 'R'
000000000000d320         db  0x0e ; '.'
000000000000d321         db  0x50 ; 'P'
000000000000d322         db  0x02 ; '.'
000000000000d323         db  0x6d ; 'm'
000000000000d324         db  0x0e ; '.'
000000000000d325         db  0x38 ; '8'
000000000000d326         db  0x44 ; 'D'
000000000000d327         db  0x0e ; '.'
000000000000d328         db  0x30 ; '0'
000000000000d329         db  0x41 ; 'A'
000000000000d32a         db  0x0e ; '.'
000000000000d32b         db  0x28 ; '('
000000000000d32c         db  0x42 ; 'B'
000000000000d32d         db  0x0e ; '.'
000000000000d32e         db  0x20 ; ' '
000000000000d32f         db  0x42 ; 'B'
000000000000d330         db  0x0e ; '.'
000000000000d331         db  0x18 ; '.'
000000000000d332         db  0x42 ; 'B'
000000000000d333         db  0x0e ; '.'
000000000000d334         db  0x10 ; '.'
000000000000d335         db  0x42 ; 'B'
000000000000d336         db  0x0e ; '.'
000000000000d337         db  0x08 ; '.'
000000000000d338         db  0x4b ; 'K'
000000000000d339         db  0xc3 ; '.'
000000000000d33a         db  0xc6 ; '.'
000000000000d33b         db  0xcc ; '.'
000000000000d33c         db  0xcd ; '.'
000000000000d33d         db  0xce ; '.'
000000000000d33e         db  0xcf ; '.'
000000000000d33f         db  0x58 ; 'X'
000000000000d340         db  0x0e ; '.'
000000000000d341         db  0x50 ; 'P'
000000000000d342         db  0x83 ; '.'
000000000000d343         db  0x07 ; '.'
000000000000d344         db  0x86 ; '.'
000000000000d345         db  0x06 ; '.'
000000000000d346         db  0x8c ; '.'
000000000000d347         db  0x05 ; '.'
000000000000d348         db  0x8d ; '.'
000000000000d349         db  0x04 ; '.'
000000000000d34a         db  0x8e ; '.'
000000000000d34b         db  0x03 ; '.'
000000000000d34c         db  0x8f ; '.'
000000000000d34d         db  0x02 ; '.'
000000000000d34e         db  0x00 ; '.'
000000000000d34f         db  0x00 ; '.'
000000000000d350         dd         0x00000110                                  ; Length of the record
000000000000d354         dd         0x00000844                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d358         db         0xb8, 0x89, 2 dup (0xff)                    ; begin 0x5d10
000000000000d35c         db         0x17, 0x04, 2 dup (0x00)                    ; length 0x417 (end at 0x6127)
000000000000d360         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d361         db  0x42 ; 'B'
000000000000d362         db  0x0e ; '.'
000000000000d363         db  0x10 ; '.'
000000000000d364         db  0x8f ; '.'
000000000000d365         db  0x02 ; '.'
000000000000d366         db  0x42 ; 'B'
000000000000d367         db  0x0e ; '.'
000000000000d368         db  0x18 ; '.'
000000000000d369         db  0x8e ; '.'
000000000000d36a         db  0x03 ; '.'
000000000000d36b         db  0x42 ; 'B'
000000000000d36c         db  0x0e ; '.'
000000000000d36d         db  0x20 ; ' '
000000000000d36e         db  0x8d ; '.'
000000000000d36f         db  0x04 ; '.'
000000000000d370         db  0x42 ; 'B'
000000000000d371         db  0x0e ; '.'
000000000000d372         db  0x28 ; '('
000000000000d373         db  0x8c ; '.'
000000000000d374         db  0x05 ; '.'
000000000000d375         db  0x44 ; 'D'
000000000000d376         db  0x0e ; '.'
000000000000d377         db  0x30 ; '0'
000000000000d378         db  0x86 ; '.'
000000000000d379         db  0x06 ; '.'
000000000000d37a         db  0x41 ; 'A'
000000000000d37b         db  0x0e ; '.'
000000000000d37c         db  0x38 ; '8'
000000000000d37d         db  0x83 ; '.'
000000000000d37e         db  0x07 ; '.'
000000000000d37f         db  0x4a ; 'J'
000000000000d380         db  0x0e ; '.'
000000000000d381         db  0x60 ; '`'
000000000000d382         db  0x02 ; '.'
000000000000d383         db  0xdd ; '.'
000000000000d384         db  0x0e ; '.'
000000000000d385         db  0x68 ; 'h'
000000000000d386         db  0x57 ; 'W'
000000000000d387         db  0x0e ; '.'
000000000000d388         db  0x70 ; 'p'
000000000000d389         db  0x42 ; 'B'
000000000000d38a         db  0x0e ; '.'
000000000000d38b         db  0x78 ; 'x'
000000000000d38c         db  0x42 ; 'B'
000000000000d38d         db  0x0e ; '.'
000000000000d38e         db  0x80 ; '.'
000000000000d38f         db  0x01 ; '.'
000000000000d390         db  0x42 ; 'B'
000000000000d391         db  0x0e ; '.'
000000000000d392         db  0x88 ; '.'
000000000000d393         db  0x01 ; '.'
000000000000d394         db  0x42 ; 'B'
000000000000d395         db  0x0e ; '.'
000000000000d396         db  0x90 ; '.'
000000000000d397         db  0x01 ; '.'
000000000000d398         db  0x53 ; 'S'
000000000000d399         db  0x0e ; '.'
000000000000d39a         db  0x60 ; '`'
000000000000d39b         db  0x44 ; 'D'
000000000000d39c         db  0x0a ; '.'
000000000000d39d         db  0x0e ; '.'
000000000000d39e         db  0x38 ; '8'
000000000000d39f         db  0x41 ; 'A'
000000000000d3a0         db  0x0e ; '.'
000000000000d3a1         db  0x30 ; '0'
000000000000d3a2         db  0x41 ; 'A'
000000000000d3a3         db  0x0e ; '.'
000000000000d3a4         db  0x28 ; '('
000000000000d3a5         db  0x42 ; 'B'
000000000000d3a6         db  0x0e ; '.'
000000000000d3a7         db  0x20 ; ' '
000000000000d3a8         db  0x42 ; 'B'
000000000000d3a9         db  0x0e ; '.'
000000000000d3aa         db  0x18 ; '.'
000000000000d3ab         db  0x42 ; 'B'
000000000000d3ac         db  0x0e ; '.'
000000000000d3ad         db  0x10 ; '.'
000000000000d3ae         db  0x42 ; 'B'
000000000000d3af         db  0x0e ; '.'
000000000000d3b0         db  0x08 ; '.'
000000000000d3b1         db  0x44 ; 'D'
000000000000d3b2         db  0x0b ; '.'
000000000000d3b3         db  0x02 ; '.'
000000000000d3b4         db  0x78 ; 'x'
000000000000d3b5         db  0x0a ; '.'
000000000000d3b6         db  0x0e ; '.'
000000000000d3b7         db  0x68 ; 'h'
000000000000d3b8         db  0x48 ; 'H'
000000000000d3b9         db  0x0b ; '.'
000000000000d3ba         db  0x5a ; 'Z'
000000000000d3bb         db  0x0a ; '.'
000000000000d3bc         db  0x0e ; '.'
000000000000d3bd         db  0x38 ; '8'
000000000000d3be         db  0x47 ; 'G'
000000000000d3bf         db  0x0e ; '.'
000000000000d3c0         db  0x30 ; '0'
000000000000d3c1         db  0x41 ; 'A'
000000000000d3c2         db  0x0e ; '.'
000000000000d3c3         db  0x28 ; '('
000000000000d3c4         db  0x42 ; 'B'
000000000000d3c5         db  0x0e ; '.'
000000000000d3c6         db  0x20 ; ' '
000000000000d3c7         db  0x42 ; 'B'
000000000000d3c8         db  0x0e ; '.'
000000000000d3c9         db  0x18 ; '.'
000000000000d3ca         db  0x42 ; 'B'
000000000000d3cb         db  0x0e ; '.'
000000000000d3cc         db  0x10 ; '.'
000000000000d3cd         db  0x42 ; 'B'
000000000000d3ce         db  0x0e ; '.'
000000000000d3cf         db  0x08 ; '.'
000000000000d3d0         db  0x56 ; 'V'
000000000000d3d1         db  0x0b ; '.'
000000000000d3d2         db  0x5e ; '^'
000000000000d3d3         db  0x0a ; '.'
000000000000d3d4         db  0x0e ; '.'
000000000000d3d5         db  0x38 ; '8'
000000000000d3d6         db  0x52 ; 'R'
000000000000d3d7         db  0x0e ; '.'
000000000000d3d8         db  0x30 ; '0'
000000000000d3d9         db  0x41 ; 'A'
000000000000d3da         db  0x0e ; '.'
000000000000d3db         db  0x28 ; '('
000000000000d3dc         db  0x42 ; 'B'
000000000000d3dd         db  0x0e ; '.'
000000000000d3de         db  0x20 ; ' '
000000000000d3df         db  0x42 ; 'B'
000000000000d3e0         db  0x0e ; '.'
000000000000d3e1         db  0x18 ; '.'
000000000000d3e2         db  0x42 ; 'B'
000000000000d3e3         db  0x0e ; '.'
000000000000d3e4         db  0x10 ; '.'
000000000000d3e5         db  0x42 ; 'B'
000000000000d3e6         db  0x0e ; '.'
000000000000d3e7         db  0x08 ; '.'
000000000000d3e8         db  0x4f ; 'O'
000000000000d3e9         db  0x0b ; '.'
000000000000d3ea         db  0x62 ; 'b'
000000000000d3eb         db  0x0a ; '.'
000000000000d3ec         db  0x0e ; '.'
000000000000d3ed         db  0x38 ; '8'
000000000000d3ee         db  0x50 ; 'P'
000000000000d3ef         db  0x0e ; '.'
000000000000d3f0         db  0x30 ; '0'
000000000000d3f1         db  0x41 ; 'A'
000000000000d3f2         db  0x0e ; '.'
000000000000d3f3         db  0x28 ; '('
000000000000d3f4         db  0x42 ; 'B'
000000000000d3f5         db  0x0e ; '.'
000000000000d3f6         db  0x20 ; ' '
000000000000d3f7         db  0x42 ; 'B'
000000000000d3f8         db  0x0e ; '.'
000000000000d3f9         db  0x18 ; '.'
000000000000d3fa         db  0x42 ; 'B'
000000000000d3fb         db  0x0e ; '.'
000000000000d3fc         db  0x10 ; '.'
000000000000d3fd         db  0x42 ; 'B'
000000000000d3fe         db  0x0e ; '.'
000000000000d3ff         db  0x08 ; '.'
000000000000d400         db  0x55 ; 'U'
000000000000d401         db  0x0b ; '.'
000000000000d402         db  0x66 ; 'f'
000000000000d403         db  0x0e ; '.'
000000000000d404         db  0x68 ; 'h'
000000000000d405         db  0x42 ; 'B'
000000000000d406         db  0x0e ; '.'
000000000000d407         db  0x70 ; 'p'
000000000000d408         db  0x5c ; '\'
000000000000d409         db  0x0e ; '.'
000000000000d40a         db  0x68 ; 'h'
000000000000d40b         db  0x41 ; 'A'
000000000000d40c         db  0x0e ; '.'
000000000000d40d         db  0x60 ; '`'
000000000000d40e         db  0x44 ; 'D'
000000000000d40f         db  0x0a ; '.'
000000000000d410         db  0x0e ; '.'
000000000000d411         db  0x38 ; '8'
000000000000d412         db  0x41 ; 'A'
000000000000d413         db  0x0e ; '.'
000000000000d414         db  0x30 ; '0'
000000000000d415         db  0x41 ; 'A'
000000000000d416         db  0x0e ; '.'
000000000000d417         db  0x28 ; '('
000000000000d418         db  0x42 ; 'B'
000000000000d419         db  0x0e ; '.'
000000000000d41a         db  0x20 ; ' '
000000000000d41b         db  0x42 ; 'B'
000000000000d41c         db  0x0e ; '.'
000000000000d41d         db  0x18 ; '.'
000000000000d41e         db  0x42 ; 'B'
000000000000d41f         db  0x0e ; '.'
000000000000d420         db  0x10 ; '.'
000000000000d421         db  0x42 ; 'B'
000000000000d422         db  0x0e ; '.'
000000000000d423         db  0x08 ; '.'
000000000000d424         db  0x45 ; 'E'
000000000000d425         db  0x0b ; '.'
000000000000d426         db  0x68 ; 'h'
000000000000d427         db  0x0a ; '.'
000000000000d428         db  0x0e ; '.'
000000000000d429         db  0x68 ; 'h'
000000000000d42a         db  0x48 ; 'H'
000000000000d42b         db  0x0b ; '.'
000000000000d42c         db  0x72 ; 'r'
000000000000d42d         db  0x0e ; '.'
000000000000d42e         db  0x68 ; 'h'
000000000000d42f         db  0x45 ; 'E'
000000000000d430         db  0x0e ; '.'
000000000000d431         db  0x70 ; 'p'
000000000000d432         db  0x42 ; 'B'
000000000000d433         db  0x0e ; '.'
000000000000d434         db  0x78 ; 'x'
000000000000d435         db  0x42 ; 'B'
000000000000d436         db  0x0e ; '.'
000000000000d437         db  0x80 ; '.'
000000000000d438         db  0x01 ; '.'
000000000000d439         db  0x5e ; '^'
000000000000d43a         db  0x0e ; '.'
000000000000d43b         db  0x60 ; '`'
000000000000d43c         db  0x44 ; 'D'
000000000000d43d         db  0x0a ; '.'
000000000000d43e         db  0x0e ; '.'
000000000000d43f         db  0x38 ; '8'
000000000000d440         db  0x41 ; 'A'
000000000000d441         db  0x0e ; '.'
000000000000d442         db  0x30 ; '0'
000000000000d443         db  0x41 ; 'A'
000000000000d444         db  0x0e ; '.'
000000000000d445         db  0x28 ; '('
000000000000d446         db  0x42 ; 'B'
000000000000d447         db  0x0e ; '.'
000000000000d448         db  0x20 ; ' '
000000000000d449         db  0x42 ; 'B'
000000000000d44a         db  0x0e ; '.'
000000000000d44b         db  0x18 ; '.'
000000000000d44c         db  0x42 ; 'B'
000000000000d44d         db  0x0e ; '.'
000000000000d44e         db  0x10 ; '.'
000000000000d44f         db  0x42 ; 'B'
000000000000d450         db  0x0e ; '.'
000000000000d451         db  0x08 ; '.'
000000000000d452         db  0x41 ; 'A'
000000000000d453         db  0x0b ; '.'
000000000000d454         db  0x79 ; 'y'
000000000000d455         db  0x0a ; '.'
000000000000d456         db  0x0e ; '.'
000000000000d457         db  0x68 ; 'h'
000000000000d458         db  0x42 ; 'B'
000000000000d459         db  0x0e ; '.'
000000000000d45a         db  0x70 ; 'p'
000000000000d45b         db  0x42 ; 'B'
000000000000d45c         db  0x0e ; '.'
000000000000d45d         db  0x78 ; 'x'
000000000000d45e         db  0x42 ; 'B'
000000000000d45f         db  0x0e ; '.'
000000000000d460         db  0x80 ; '.'
000000000000d461         db  0x01 ; '.'
000000000000d462         db  0x51 ; 'Q'
000000000000d463         db  0x0b ; '.'
000000000000d464         dd         0x00000010                                  ; Length of the record
000000000000d468         dd         0x00000958                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d46c         db         0xc4, 0x8c, 2 dup (0xff)                    ; begin 0x6130
000000000000d470         db         0x20, 3 dup (0x00)                          ; length 0x20 (end at 0x6150)
000000000000d474         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d475         align      8
000000000000d478         dd         0x00000018                                  ; Length of the record
000000000000d47c         dd         0x0000096c                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d480         db         0xd0, 0x8c, 2 dup (0xff)                    ; begin 0x6150
000000000000d484         db         0x78, 3 dup (0x00)                          ; length 0x78 (end at 0x61c8)
000000000000d488         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d489         db  0x44 ; 'D'
000000000000d48a         db  0x0e ; '.'
000000000000d48b         db  0x70 ; 'p'
000000000000d48c         db  0x02 ; '.'
000000000000d48d         db  0x60 ; '`'
000000000000d48e         db  0x0a ; '.'
000000000000d48f         db  0x0e ; '.'
000000000000d490         db  0x08 ; '.'
000000000000d491         db  0x41 ; 'A'
000000000000d492         db  0x0b ; '.'
000000000000d493         db  0x00 ; '.'
000000000000d494         dd         0x00000028                                  ; Length of the record
000000000000d498         dd         0x00000988                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d49c         db         0x34, 0x8d, 2 dup (0xff)                    ; begin 0x61d0
000000000000d4a0         db         0xd5, 3 dup (0x00)                          ; length 0xd5 (end at 0x62a5)
000000000000d4a4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d4a5         db  0x41 ; 'A'
000000000000d4a6         db  0x0e ; '.'
000000000000d4a7         db  0x10 ; '.'
000000000000d4a8         db  0x86 ; '.'
000000000000d4a9         db  0x02 ; '.'
000000000000d4aa         db  0x41 ; 'A'
000000000000d4ab         db  0x0e ; '.'
000000000000d4ac         db  0x18 ; '.'
000000000000d4ad         db  0x83 ; '.'
000000000000d4ae         db  0x03 ; '.'
000000000000d4af         db  0x50 ; 'P'
000000000000d4b0         db  0x0e ; '.'
000000000000d4b1         db  0xd0 ; '.'
000000000000d4b2         db  0x01 ; '.'
000000000000d4b3         db  0x02 ; '.'
000000000000d4b4         db  0xab ; '.'
000000000000d4b5         db  0x0a ; '.'
000000000000d4b6         db  0x0e ; '.'
000000000000d4b7         db  0x18 ; '.'
000000000000d4b8         db  0x41 ; 'A'
000000000000d4b9         db  0x0e ; '.'
000000000000d4ba         db  0x10 ; '.'
000000000000d4bb         db  0x41 ; 'A'
000000000000d4bc         db  0x0e ; '.'
000000000000d4bd         db  0x08 ; '.'
000000000000d4be         db  0x41 ; 'A'
000000000000d4bf         db  0x0b ; '.'
000000000000d4c0         dd         0x0000001c                                  ; Length of the record
000000000000d4c4         dd         0x000009b4                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d4c8         db         0xe8, 0x8d, 2 dup (0xff)                    ; begin 0x62b0
000000000000d4cc         db         0x80, 3 dup (0x00)                          ; length 0x80 (end at 0x6330)
000000000000d4d0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d4d1         db  0x41 ; 'A'
000000000000d4d2         db  0x0e ; '.'
000000000000d4d3         db  0x10 ; '.'
000000000000d4d4         db  0x83 ; '.'
000000000000d4d5         db  0x02 ; '.'
000000000000d4d6         db  0x02 ; '.'
000000000000d4d7         db  0x7a ; 'z'
000000000000d4d8         db  0x0e ; '.'
000000000000d4d9         db  0x08 ; '.'
000000000000d4da         db  0x00 ; '.'
000000000000d4db         db  0x00 ; '.'
000000000000d4dc         db  0x00 ; '.'
000000000000d4dd         db  0x00 ; '.'
000000000000d4de         db  0x00 ; '.'
000000000000d4df         db  0x00 ; '.'
000000000000d4e0         dd         0x00000018                                  ; Length of the record
000000000000d4e4         dd         0x000009d4                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d4e8         db         0x48, 0x8e, 2 dup (0xff)                    ; begin 0x6330
000000000000d4ec         db         0x1a, 3 dup (0x00)                          ; length 0x1a (end at 0x634a)
000000000000d4f0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d4f1         db  0x41 ; 'A'
000000000000d4f2         db  0x0e ; '.'
000000000000d4f3         db  0x10 ; '.'
000000000000d4f4         db  0x83 ; '.'
000000000000d4f5         db  0x02 ; '.'
000000000000d4f6         db  0x53 ; 'S'
000000000000d4f7         db  0x0a ; '.'
000000000000d4f8         db  0x0e ; '.'
000000000000d4f9         db  0x08 ; '.'
000000000000d4fa         db  0x41 ; 'A'
000000000000d4fb         db  0x0b ; '.'
000000000000d4fc         dd         0x00000010                                  ; Length of the record
000000000000d500         dd         0x000009f0                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d504         db         0x4c, 0x8e, 2 dup (0xff)                    ; begin 0x6350
000000000000d508         db         0x24, 3 dup (0x00)                          ; length 0x24 (end at 0x6374)
000000000000d50c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d50d         db  0x5f ; '_'
000000000000d50e         db  0x0e ; '.'
000000000000d50f         db  0x10 ; '.'
000000000000d510         dd         0x00000010                                  ; Length of the record
000000000000d514         dd         0x00000a04                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d518         db         0x68, 0x8e, 2 dup (0xff)                    ; begin 0x6380
000000000000d51c         db         0x02, 3 dup (0x00)                          ; length 0x2 (end at 0x6382)
000000000000d520         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d521         align      4
000000000000d524         dd         0x00000020                                  ; Length of the record
000000000000d528         dd         0x00000a18                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d52c         db         0x64, 0x8e, 2 dup (0xff)                    ; begin 0x6390
000000000000d530         db         0x36, 3 dup (0x00)                          ; length 0x36 (end at 0x63c6)
000000000000d534         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d535         db  0x44 ; 'D'
000000000000d536         db  0x0e ; '.'
000000000000d537         db  0x10 ; '.'
000000000000d538         db  0x83 ; '.'
000000000000d539         db  0x02 ; '.'
000000000000d53a         db  0x5d ; ']'
000000000000d53b         db  0x0a ; '.'
000000000000d53c         db  0x0e ; '.'
000000000000d53d         db  0x08 ; '.'
000000000000d53e         db  0x47 ; 'G'
000000000000d53f         db  0x0b ; '.'
000000000000d540         db  0x48 ; 'H'
000000000000d541         db  0x0a ; '.'
000000000000d542         db  0x0e ; '.'
000000000000d543         db  0x08 ; '.'
000000000000d544         db  0x41 ; 'A'
000000000000d545         db  0x0b ; '.'
000000000000d546         db  0x00 ; '.'
000000000000d547         db  0x00 ; '.'
000000000000d548         dd         0x00000010                                  ; Length of the record
000000000000d54c         dd         0x00000a3c                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d550         db         0x80, 0x8e, 2 dup (0xff)                    ; begin 0x63d0
000000000000d554         db         0x24, 3 dup (0x00)                          ; length 0x24 (end at 0x63f4)
000000000000d558         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d559         db  0x5f ; '_'
000000000000d55a         db  0x0e ; '.'
000000000000d55b         db  0x10 ; '.'
000000000000d55c         dd         0x00000014                                  ; Length of the record
000000000000d560         dd         0x00000a50                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d564         db         0x9c, 0x8e, 2 dup (0xff)                    ; begin 0x6400
000000000000d568         db         0x82, 3 dup (0x00)                          ; length 0x82 (end at 0x6482)
000000000000d56c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d56d         db  0x02 ; '.'
000000000000d56e         db  0x5f ; '_'
000000000000d56f         db  0x0e ; '.'
000000000000d570         db  0x10 ; '.'
000000000000d571         db  0x49 ; 'I'
000000000000d572         db  0x0e ; '.'
000000000000d573         db  0x08 ; '.'
000000000000d574         dd         0x00000014                                  ; Length of the record
000000000000d578         dd         0x00000a68                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d57c         db         0x14, 0x8f, 2 dup (0xff)                    ; begin 0x6490
000000000000d580         db         0x4a, 3 dup (0x00)                          ; length 0x4a (end at 0x64da)
000000000000d584         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d585         db  0x02 ; '.'
000000000000d586         db  0x45 ; 'E'
000000000000d587         db  0x0e ; '.'
000000000000d588         db  0x10 ; '.'
000000000000d589         db  0x00 ; '.'
000000000000d58a         db  0x00 ; '.'
000000000000d58b         db  0x00 ; '.'
000000000000d58c         dd         0x00000018                                  ; Length of the record
000000000000d590         dd         0x00000a80                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d594         db         0x4c, 0x8f, 2 dup (0xff)                    ; begin 0x64e0
000000000000d598         db         0x17, 3 dup (0x00)                          ; length 0x17 (end at 0x64f7)
000000000000d59c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d59d         db  0x41 ; 'A'
000000000000d59e         db  0x0e ; '.'
000000000000d59f         db  0x10 ; '.'
000000000000d5a0         db  0x83 ; '.'
000000000000d5a1         db  0x02 ; '.'
000000000000d5a2         db  0x51 ; 'Q'
000000000000d5a3         db  0x0e ; '.'
000000000000d5a4         db  0x08 ; '.'
000000000000d5a5         db  0x00 ; '.'
000000000000d5a6         db  0x00 ; '.'
000000000000d5a7         db  0x00 ; '.'
000000000000d5a8         dd         0x00000018                                  ; Length of the record
000000000000d5ac         dd         0x00000a9c                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d5b0         db         0x50, 0x8f, 2 dup (0xff)                    ; begin 0x6500
000000000000d5b4         db         0x2e, 3 dup (0x00)                          ; length 0x2e (end at 0x652e)
000000000000d5b8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d5b9         db  0x47 ; 'G'
000000000000d5ba         db  0x0e ; '.'
000000000000d5bb         db  0x10 ; '.'
000000000000d5bc         db  0x61 ; 'a'
000000000000d5bd         db  0x0a ; '.'
000000000000d5be         db  0x0e ; '.'
000000000000d5bf         db  0x08 ; '.'
000000000000d5c0         db  0x41 ; 'A'
000000000000d5c1         db  0x0b ; '.'
000000000000d5c2         db  0x00 ; '.'
000000000000d5c3         db  0x00 ; '.'
000000000000d5c4         dd         0x00000024                                  ; Length of the record
000000000000d5c8         dd         0x00000ab8                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d5cc         db         0x64, 0x8f, 2 dup (0xff)                    ; begin 0x6530
000000000000d5d0         db         0x28, 3 dup (0x00)                          ; length 0x28 (end at 0x6558)
000000000000d5d4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d5d5         db  0x41 ; 'A'
000000000000d5d6         db  0x0e ; '.'
000000000000d5d7         db  0x10 ; '.'
000000000000d5d8         db  0x86 ; '.'
000000000000d5d9         db  0x02 ; '.'
000000000000d5da         db  0x41 ; 'A'
000000000000d5db         db  0x0e ; '.'
000000000000d5dc         db  0x18 ; '.'
000000000000d5dd         db  0x83 ; '.'
000000000000d5de         db  0x03 ; '.'
000000000000d5df         db  0x4d ; 'M'
000000000000d5e0         db  0x0e ; '.'
000000000000d5e1         db  0x20 ; ' '
000000000000d5e2         db  0x49 ; 'I'
000000000000d5e3         db  0x0e ; '.'
000000000000d5e4         db  0x18 ; '.'
000000000000d5e5         db  0x47 ; 'G'
000000000000d5e6         db  0x0e ; '.'
000000000000d5e7         db  0x10 ; '.'
000000000000d5e8         db  0x41 ; 'A'
000000000000d5e9         db  0x0e ; '.'
000000000000d5ea         db  0x08 ; '.'
000000000000d5eb         db  0x00 ; '.'
000000000000d5ec         dd         0x00000018                                  ; Length of the record
000000000000d5f0         dd         0x00000ae0                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d5f4         db         0x6c, 0x8f, 2 dup (0xff)                    ; begin 0x6560
000000000000d5f8         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x6573)
000000000000d5fc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d5fd         db  0x41 ; 'A'
000000000000d5fe         db  0x0e ; '.'
000000000000d5ff         db  0x10 ; '.'
000000000000d600         db  0x83 ; '.'
000000000000d601         db  0x02 ; '.'
000000000000d602         db  0x50 ; 'P'
000000000000d603         db  0x0e ; '.'
000000000000d604         db  0x08 ; '.'
000000000000d605         db  0x00 ; '.'
000000000000d606         db  0x00 ; '.'
000000000000d607         db  0x00 ; '.'
000000000000d608         dd         0x00000014                                  ; Length of the record
000000000000d60c         dd         0x00000afc                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d610         db         0x70, 0x8f, 2 dup (0xff)                    ; begin 0x6580
000000000000d614         db         0x35, 3 dup (0x00)                          ; length 0x35 (end at 0x65b5)
000000000000d618         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d619         db  0x4b ; 'K'
000000000000d61a         db  0x0e ; '.'
000000000000d61b         db  0x10 ; '.'
000000000000d61c         db  0x00 ; '.'
000000000000d61d         db  0x00 ; '.'
000000000000d61e         db  0x00 ; '.'
000000000000d61f         db  0x00 ; '.'
000000000000d620         dd         0x00000018                                  ; Length of the record
000000000000d624         dd         0x00000b14                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d628         db         0x98, 0x8f, 2 dup (0xff)                    ; begin 0x65c0
000000000000d62c         db         0x4f, 3 dup (0x00)                          ; length 0x4f (end at 0x660f)
000000000000d630         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d631         db  0x44 ; 'D'
000000000000d632         db  0x0e ; '.'
000000000000d633         db  0x10 ; '.'
000000000000d634         db  0x54 ; 'T'
000000000000d635         db  0x0a ; '.'
000000000000d636         db  0x0e ; '.'
000000000000d637         db  0x08 ; '.'
000000000000d638         db  0x48 ; 'H'
000000000000d639         db  0x0b ; '.'
000000000000d63a         db  0x00 ; '.'
000000000000d63b         db  0x00 ; '.'
000000000000d63c         dd         0x00000010                                  ; Length of the record
000000000000d640         dd         0x00000b30                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d644         db         0xcc, 0x8f, 2 dup (0xff)                    ; begin 0x6610
000000000000d648         db         0x29, 3 dup (0x00)                          ; length 0x29 (end at 0x6639)
000000000000d64c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d64d         align      16
000000000000d650         dd         0x0000004c                                  ; Length of the record
000000000000d654         dd         0x00000b44                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d658         db         0xe8, 0x8f, 2 dup (0xff)                    ; begin 0x6640
000000000000d65c         db         0x1c, 0x04, 2 dup (0x00)                    ; length 0x41c (end at 0x6a5c)
000000000000d660         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d661         db  0x42 ; 'B'
000000000000d662         db  0x0e ; '.'
000000000000d663         db  0x10 ; '.'
000000000000d664         db  0x8f ; '.'
000000000000d665         db  0x02 ; '.'
000000000000d666         db  0x42 ; 'B'
000000000000d667         db  0x0e ; '.'
000000000000d668         db  0x18 ; '.'
000000000000d669         db  0x8e ; '.'
000000000000d66a         db  0x03 ; '.'
000000000000d66b         db  0x42 ; 'B'
000000000000d66c         db  0x0e ; '.'
000000000000d66d         db  0x20 ; ' '
000000000000d66e         db  0x8d ; '.'
000000000000d66f         db  0x04 ; '.'
000000000000d670         db  0x42 ; 'B'
000000000000d671         db  0x0e ; '.'
000000000000d672         db  0x28 ; '('
000000000000d673         db  0x8c ; '.'
000000000000d674         db  0x05 ; '.'
000000000000d675         db  0x41 ; 'A'
000000000000d676         db  0x0e ; '.'
000000000000d677         db  0x30 ; '0'
000000000000d678         db  0x86 ; '.'
000000000000d679         db  0x06 ; '.'
000000000000d67a         db  0x41 ; 'A'
000000000000d67b         db  0x0e ; '.'
000000000000d67c         db  0x38 ; '8'
000000000000d67d         db  0x83 ; '.'
000000000000d67e         db  0x07 ; '.'
000000000000d67f         db  0x44 ; 'D'
000000000000d680         db  0x0e ; '.'
000000000000d681         db  0x60 ; '`'
000000000000d682         db  0x02 ; '.'
000000000000d683         db  0xe9 ; '.'
000000000000d684         db  0x0a ; '.'
000000000000d685         db  0x0e ; '.'
000000000000d686         db  0x38 ; '8'
000000000000d687         db  0x41 ; 'A'
000000000000d688         db  0x0e ; '.'
000000000000d689         db  0x30 ; '0'
000000000000d68a         db  0x41 ; 'A'
000000000000d68b         db  0x0e ; '.'
000000000000d68c         db  0x28 ; '('
000000000000d68d         db  0x42 ; 'B'
000000000000d68e         db  0x0e ; '.'
000000000000d68f         db  0x20 ; ' '
000000000000d690         db  0x42 ; 'B'
000000000000d691         db  0x0e ; '.'
000000000000d692         db  0x18 ; '.'
000000000000d693         db  0x42 ; 'B'
000000000000d694         db  0x0e ; '.'
000000000000d695         db  0x10 ; '.'
000000000000d696         db  0x42 ; 'B'
000000000000d697         db  0x0e ; '.'
000000000000d698         db  0x08 ; '.'
000000000000d699         db  0x47 ; 'G'
000000000000d69a         db  0x0b ; '.'
000000000000d69b         db  0x00 ; '.'
000000000000d69c         db  0x00 ; '.'
000000000000d69d         db  0x00 ; '.'
000000000000d69e         db  0x00 ; '.'
000000000000d69f         db  0x00 ; '.'
000000000000d6a0         dd         0x00000010                                  ; Length of the record
000000000000d6a4         dd         0x00000b94                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d6a8         db         0xb8, 0x93, 2 dup (0xff)                    ; begin 0x6a60
000000000000d6ac         db         0x1a, 3 dup (0x00)                          ; length 0x1a (end at 0x6a7a)
000000000000d6b0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d6b1         align      4
000000000000d6b4         dd         0x00000010                                  ; Length of the record
000000000000d6b8         dd         0x00000ba8                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d6bc         db         0xc4, 0x93, 2 dup (0xff)                    ; begin 0x6a80
000000000000d6c0         db         0x0d, 3 dup (0x00)                          ; length 0xd (end at 0x6a8d)
000000000000d6c4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d6c5         align      8
000000000000d6c8         dd         0x00000010                                  ; Length of the record
000000000000d6cc         dd         0x00000bbc                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d6d0         db         0xc0, 0x93, 2 dup (0xff)                    ; begin 0x6a90
000000000000d6d4         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x6a9c)
000000000000d6d8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d6d9         align      4
000000000000d6dc         dd         0x00000010                                  ; Length of the record
000000000000d6e0         dd         0x00000bd0                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d6e4         db         0xbc, 0x93, 2 dup (0xff)                    ; begin 0x6aa0
000000000000d6e8         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0x6aaa)
000000000000d6ec         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d6ed         align      16
000000000000d6f0         dd         0x00000010                                  ; Length of the record
000000000000d6f4         dd         0x00000be4                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d6f8         db         0xb8, 0x93, 2 dup (0xff)                    ; begin 0x6ab0
000000000000d6fc         db         0x26, 3 dup (0x00)                          ; length 0x26 (end at 0x6ad6)
000000000000d700         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d701         align      4
000000000000d704         dd         0x00000038                                  ; Length of the record
000000000000d708         dd         0x00000bf8                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d70c         db         0xd4, 0x93, 2 dup (0xff)                    ; begin 0x6ae0
000000000000d710         db         0xc5, 0x01, 2 dup (0x00)                    ; length 0x1c5 (end at 0x6ca5)
000000000000d714         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d715         db  0x42 ; 'B'
000000000000d716         db  0x0e ; '.'
000000000000d717         db  0x10 ; '.'
000000000000d718         db  0x8c ; '.'
000000000000d719         db  0x02 ; '.'
000000000000d71a         db  0x41 ; 'A'
000000000000d71b         db  0x0e ; '.'
000000000000d71c         db  0x18 ; '.'
000000000000d71d         db  0x86 ; '.'
000000000000d71e         db  0x03 ; '.'
000000000000d71f         db  0x44 ; 'D'
000000000000d720         db  0x0e ; '.'
000000000000d721         db  0x20 ; ' '
000000000000d722         db  0x83 ; '.'
000000000000d723         db  0x04 ; '.'
000000000000d724         db  0x02 ; '.'
000000000000d725         db  0x72 ; 'r'
000000000000d726         db  0x0a ; '.'
000000000000d727         db  0x0e ; '.'
000000000000d728         db  0x18 ; '.'
000000000000d729         db  0x41 ; 'A'
000000000000d72a         db  0x0e ; '.'
000000000000d72b         db  0x10 ; '.'
000000000000d72c         db  0x42 ; 'B'
000000000000d72d         db  0x0e ; '.'
000000000000d72e         db  0x08 ; '.'
000000000000d72f         db  0x44 ; 'D'
000000000000d730         db  0x0b ; '.'
000000000000d731         db  0x02 ; '.'
000000000000d732         db  0x54 ; 'T'
000000000000d733         db  0x0a ; '.'
000000000000d734         db  0x0e ; '.'
000000000000d735         db  0x18 ; '.'
000000000000d736         db  0x45 ; 'E'
000000000000d737         db  0x0e ; '.'
000000000000d738         db  0x10 ; '.'
000000000000d739         db  0x42 ; 'B'
000000000000d73a         db  0x0e ; '.'
000000000000d73b         db  0x08 ; '.'
000000000000d73c         db  0x45 ; 'E'
000000000000d73d         db  0x0b ; '.'
000000000000d73e         db  0x00 ; '.'
000000000000d73f         db  0x00 ; '.'
000000000000d740         dd         0x0000004c                                  ; Length of the record
000000000000d744         dd         0x00000c34                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d748         db         0x68, 0x95, 2 dup (0xff)                    ; begin 0x6cb0
000000000000d74c         db         0x05, 0x01, 2 dup (0x00)                    ; length 0x105 (end at 0x6db5)
000000000000d750         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d751         db  0x42 ; 'B'
000000000000d752         db  0x0e ; '.'
000000000000d753         db  0x10 ; '.'
000000000000d754         db  0x8d ; '.'
000000000000d755         db  0x02 ; '.'
000000000000d756         db  0x42 ; 'B'
000000000000d757         db  0x0e ; '.'
000000000000d758         db  0x18 ; '.'
000000000000d759         db  0x8c ; '.'
000000000000d75a         db  0x03 ; '.'
000000000000d75b         db  0x44 ; 'D'
000000000000d75c         db  0x0e ; '.'
000000000000d75d         db  0x20 ; ' '
000000000000d75e         db  0x86 ; '.'
000000000000d75f         db  0x04 ; '.'
000000000000d760         db  0x41 ; 'A'
000000000000d761         db  0x0e ; '.'
000000000000d762         db  0x28 ; '('
000000000000d763         db  0x83 ; '.'
000000000000d764         db  0x05 ; '.'
000000000000d765         db  0x4a ; 'J'
000000000000d766         db  0x0e ; '.'
000000000000d767         db  0x30 ; '0'
000000000000d768         db  0x02 ; '.'
000000000000d769         db  0xb3 ; '.'
000000000000d76a         db  0x0a ; '.'
000000000000d76b         db  0x0e ; '.'
000000000000d76c         db  0x28 ; '('
000000000000d76d         db  0x41 ; 'A'
000000000000d76e         db  0x0e ; '.'
000000000000d76f         db  0x20 ; ' '
000000000000d770         db  0x41 ; 'A'
000000000000d771         db  0x0e ; '.'
000000000000d772         db  0x18 ; '.'
000000000000d773         db  0x42 ; 'B'
000000000000d774         db  0x0e ; '.'
000000000000d775         db  0x10 ; '.'
000000000000d776         db  0x42 ; 'B'
000000000000d777         db  0x0e ; '.'
000000000000d778         db  0x08 ; '.'
000000000000d779         db  0x44 ; 'D'
000000000000d77a         db  0x0b ; '.'
000000000000d77b         db  0x5d ; ']'
000000000000d77c         db  0x0a ; '.'
000000000000d77d         db  0x0e ; '.'
000000000000d77e         db  0x28 ; '('
000000000000d77f         db  0x44 ; 'D'
000000000000d780         db  0x0e ; '.'
000000000000d781         db  0x20 ; ' '
000000000000d782         db  0x41 ; 'A'
000000000000d783         db  0x0e ; '.'
000000000000d784         db  0x18 ; '.'
000000000000d785         db  0x42 ; 'B'
000000000000d786         db  0x0e ; '.'
000000000000d787         db  0x10 ; '.'
000000000000d788         db  0x42 ; 'B'
000000000000d789         db  0x0e ; '.'
000000000000d78a         db  0x08 ; '.'
000000000000d78b         db  0x4a ; 'J'
000000000000d78c         db  0x0b ; '.'
000000000000d78d         db  0x00 ; '.'
000000000000d78e         db  0x00 ; '.'
000000000000d78f         db  0x00 ; '.'
000000000000d790         dd         0x00000034                                  ; Length of the record
000000000000d794         dd         0x00000c84                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d798         db         0x28, 0x96, 2 dup (0xff)                    ; begin 0x6dc0
000000000000d79c         db         0x8a, 3 dup (0x00)                          ; length 0x8a (end at 0x6e4a)
000000000000d7a0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d7a1         db  0x42 ; 'B'
000000000000d7a2         db  0x0e ; '.'
000000000000d7a3         db  0x10 ; '.'
000000000000d7a4         db  0x8d ; '.'
000000000000d7a5         db  0x02 ; '.'
000000000000d7a6         db  0x42 ; 'B'
000000000000d7a7         db  0x0e ; '.'
000000000000d7a8         db  0x18 ; '.'
000000000000d7a9         db  0x8c ; '.'
000000000000d7aa         db  0x03 ; '.'
000000000000d7ab         db  0x44 ; 'D'
000000000000d7ac         db  0x0e ; '.'
000000000000d7ad         db  0x20 ; ' '
000000000000d7ae         db  0x86 ; '.'
000000000000d7af         db  0x04 ; '.'
000000000000d7b0         db  0x48 ; 'H'
000000000000d7b1         db  0x0e ; '.'
000000000000d7b2         db  0x28 ; '('
000000000000d7b3         db  0x83 ; '.'
000000000000d7b4         db  0x05 ; '.'
000000000000d7b5         db  0x4a ; 'J'
000000000000d7b6         db  0x0e ; '.'
000000000000d7b7         db  0x30 ; '0'
000000000000d7b8         db  0x02 ; '.'
000000000000d7b9         db  0x66 ; 'f'
000000000000d7ba         db  0x0e ; '.'
000000000000d7bb         db  0x28 ; '('
000000000000d7bc         db  0x44 ; 'D'
000000000000d7bd         db  0x0e ; '.'
000000000000d7be         db  0x20 ; ' '
000000000000d7bf         db  0x41 ; 'A'
000000000000d7c0         db  0x0e ; '.'
000000000000d7c1         db  0x18 ; '.'
000000000000d7c2         db  0x42 ; 'B'
000000000000d7c3         db  0x0e ; '.'
000000000000d7c4         db  0x10 ; '.'
000000000000d7c5         db  0x42 ; 'B'
000000000000d7c6         db  0x0e ; '.'
000000000000d7c7         db  0x08 ; '.'
000000000000d7c8         dd         0x00000028                                  ; Length of the record
000000000000d7cc         dd         0x00000cbc                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d7d0         db         0x80, 0x96, 2 dup (0xff)                    ; begin 0x6e50
000000000000d7d4         db         0x42, 3 dup (0x00)                          ; length 0x42 (end at 0x6e92)
000000000000d7d8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d7d9         db  0x46 ; 'F'
000000000000d7da         db  0x0e ; '.'
000000000000d7db         db  0x10 ; '.'
000000000000d7dc         db  0x86 ; '.'
000000000000d7dd         db  0x02 ; '.'
000000000000d7de         db  0x41 ; 'A'
000000000000d7df         db  0x0e ; '.'
000000000000d7e0         db  0x18 ; '.'
000000000000d7e1         db  0x83 ; '.'
000000000000d7e2         db  0x03 ; '.'
000000000000d7e3         db  0x47 ; 'G'
000000000000d7e4         db  0x0e ; '.'
000000000000d7e5         db  0x20 ; ' '
000000000000d7e6         db  0x68 ; 'h'
000000000000d7e7         db  0x0e ; '.'
000000000000d7e8         db  0x18 ; '.'
000000000000d7e9         db  0x41 ; 'A'
000000000000d7ea         db  0x0e ; '.'
000000000000d7eb         db  0x10 ; '.'
000000000000d7ec         db  0x41 ; 'A'
000000000000d7ed         db  0x0e ; '.'
000000000000d7ee         db  0x08 ; '.'
000000000000d7ef         db  0x48 ; 'H'
000000000000d7f0         db  0xc3 ; '.'
000000000000d7f1         db  0xc6 ; '.'
000000000000d7f2         db  0x00 ; '.'
000000000000d7f3         db  0x00 ; '.'
000000000000d7f4         dd         0x00000018                                  ; Length of the record
000000000000d7f8         dd         0x00000ce8                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d7fc         db         0xa4, 0x96, 2 dup (0xff)                    ; begin 0x6ea0
000000000000d800         db         0x39, 3 dup (0x00)                          ; length 0x39 (end at 0x6ed9)
000000000000d804         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d805         db  0x41 ; 'A'
000000000000d806         db  0x0e ; '.'
000000000000d807         db  0x10 ; '.'
000000000000d808         db  0x83 ; '.'
000000000000d809         db  0x02 ; '.'
000000000000d80a         db  0x68 ; 'h'
000000000000d80b         db  0x0a ; '.'
000000000000d80c         db  0x0e ; '.'
000000000000d80d         db  0x08 ; '.'
000000000000d80e         db  0x47 ; 'G'
000000000000d80f         db  0x0b ; '.'
000000000000d810         dd         0x00000038                                  ; Length of the record
000000000000d814         dd         0x00000d04                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d818         db         0xc8, 0x96, 2 dup (0xff)                    ; begin 0x6ee0
000000000000d81c         db         0x2c, 0x01, 2 dup (0x00)                    ; length 0x12c (end at 0x700c)
000000000000d820         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d821         db  0x42 ; 'B'
000000000000d822         db  0x0e ; '.'
000000000000d823         db  0x10 ; '.'
000000000000d824         db  0x8d ; '.'
000000000000d825         db  0x02 ; '.'
000000000000d826         db  0x42 ; 'B'
000000000000d827         db  0x0e ; '.'
000000000000d828         db  0x18 ; '.'
000000000000d829         db  0x8c ; '.'
000000000000d82a         db  0x03 ; '.'
000000000000d82b         db  0x41 ; 'A'
000000000000d82c         db  0x0e ; '.'
000000000000d82d         db  0x20 ; ' '
000000000000d82e         db  0x86 ; '.'
000000000000d82f         db  0x04 ; '.'
000000000000d830         db  0x41 ; 'A'
000000000000d831         db  0x0e ; '.'
000000000000d832         db  0x28 ; '('
000000000000d833         db  0x83 ; '.'
000000000000d834         db  0x05 ; '.'
000000000000d835         db  0x47 ; 'G'
000000000000d836         db  0x0e ; '.'
000000000000d837         db  0xc0 ; '.'
000000000000d838         db  0x01 ; '.'
000000000000d839         db  0x02 ; '.'
000000000000d83a         db  0xa4 ; '.'
000000000000d83b         db  0x0a ; '.'
000000000000d83c         db  0x0e ; '.'
000000000000d83d         db  0x28 ; '('
000000000000d83e         db  0x41 ; 'A'
000000000000d83f         db  0x0e ; '.'
000000000000d840         db  0x20 ; ' '
000000000000d841         db  0x41 ; 'A'
000000000000d842         db  0x0e ; '.'
000000000000d843         db  0x18 ; '.'
000000000000d844         db  0x42 ; 'B'
000000000000d845         db  0x0e ; '.'
000000000000d846         db  0x10 ; '.'
000000000000d847         db  0x42 ; 'B'
000000000000d848         db  0x0e ; '.'
000000000000d849         db  0x08 ; '.'
000000000000d84a         db  0x49 ; 'I'
000000000000d84b         db  0x0b ; '.'
000000000000d84c         dd         0x00000020                                  ; Length of the record
000000000000d850         dd         0x00000d40                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d854         db         0xbc, 0x97, 2 dup (0xff)                    ; begin 0x7010
000000000000d858         db         0x6a, 3 dup (0x00)                          ; length 0x6a (end at 0x707a)
000000000000d85c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d85d         db  0x44 ; 'D'
000000000000d85e         db  0x0e ; '.'
000000000000d85f         db  0x10 ; '.'
000000000000d860         db  0x72 ; 'r'
000000000000d861         db  0x0a ; '.'
000000000000d862         db  0x0e ; '.'
000000000000d863         db  0x08 ; '.'
000000000000d864         db  0x4a ; 'J'
000000000000d865         db  0x0b ; '.'
000000000000d866         db  0x5b ; '['
000000000000d867         db  0x0a ; '.'
000000000000d868         db  0x0e ; '.'
000000000000d869         db  0x08 ; '.'
000000000000d86a         db  0x45 ; 'E'
000000000000d86b         db  0x0b ; '.'
000000000000d86c         db  0x49 ; 'I'
000000000000d86d         db  0x0e ; '.'
000000000000d86e         db  0x08 ; '.'
000000000000d86f         db  0x00 ; '.'
000000000000d870         dd         0x00000040                                  ; Length of the record
000000000000d874         dd         0x00000d64                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d878         db         0x08, 0x98, 2 dup (0xff)                    ; begin 0x7080
000000000000d87c         db         0x66, 3 dup (0x00)                          ; length 0x66 (end at 0x70e6)
000000000000d880         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d881         db  0x41 ; 'A'
000000000000d882         db  0x0e ; '.'
000000000000d883         db  0x10 ; '.'
000000000000d884         db  0x86 ; '.'
000000000000d885         db  0x02 ; '.'
000000000000d886         db  0x41 ; 'A'
000000000000d887         db  0x0e ; '.'
000000000000d888         db  0x18 ; '.'
000000000000d889         db  0x83 ; '.'
000000000000d88a         db  0x03 ; '.'
000000000000d88b         db  0x49 ; 'I'
000000000000d88c         db  0x0e ; '.'
000000000000d88d         db  0x20 ; ' '
000000000000d88e         db  0x61 ; 'a'
000000000000d88f         db  0x0a ; '.'
000000000000d890         db  0x0e ; '.'
000000000000d891         db  0x18 ; '.'
000000000000d892         db  0x41 ; 'A'
000000000000d893         db  0x0e ; '.'
000000000000d894         db  0x10 ; '.'
000000000000d895         db  0x41 ; 'A'
000000000000d896         db  0x0e ; '.'
000000000000d897         db  0x08 ; '.'
000000000000d898         db  0x42 ; 'B'
000000000000d899         db  0x0b ; '.'
000000000000d89a         db  0x5b ; '['
000000000000d89b         db  0x0a ; '.'
000000000000d89c         db  0x0e ; '.'
000000000000d89d         db  0x18 ; '.'
000000000000d89e         db  0x41 ; 'A'
000000000000d89f         db  0x0e ; '.'
000000000000d8a0         db  0x10 ; '.'
000000000000d8a1         db  0x41 ; 'A'
000000000000d8a2         db  0x0e ; '.'
000000000000d8a3         db  0x08 ; '.'
000000000000d8a4         db  0x43 ; 'C'
000000000000d8a5         db  0x0b ; '.'
000000000000d8a6         db  0x4e ; 'N'
000000000000d8a7         db  0x0a ; '.'
000000000000d8a8         db  0x0e ; '.'
000000000000d8a9         db  0x18 ; '.'
000000000000d8aa         db  0x41 ; 'A'
000000000000d8ab         db  0x0e ; '.'
000000000000d8ac         db  0x10 ; '.'
000000000000d8ad         db  0x41 ; 'A'
000000000000d8ae         db  0x0e ; '.'
000000000000d8af         db  0x08 ; '.'
000000000000d8b0         db  0x41 ; 'A'
000000000000d8b1         db  0x0b ; '.'
000000000000d8b2         db  0x00 ; '.'
000000000000d8b3         db  0x00 ; '.'
000000000000d8b4         dd         0x00000028                                  ; Length of the record
000000000000d8b8         dd         0x00000da8                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d8bc         db         0x34, 0x98, 2 dup (0xff)                    ; begin 0x70f0
000000000000d8c0         db         0x5c, 3 dup (0x00)                          ; length 0x5c (end at 0x714c)
000000000000d8c4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d8c5         db  0x41 ; 'A'
000000000000d8c6         db  0x0e ; '.'
000000000000d8c7         db  0x10 ; '.'
000000000000d8c8         db  0x86 ; '.'
000000000000d8c9         db  0x02 ; '.'
000000000000d8ca         db  0x41 ; 'A'
000000000000d8cb         db  0x0e ; '.'
000000000000d8cc         db  0x18 ; '.'
000000000000d8cd         db  0x83 ; '.'
000000000000d8ce         db  0x03 ; '.'
000000000000d8cf         db  0x47 ; 'G'
000000000000d8d0         db  0x0e ; '.'
000000000000d8d1         db  0x20 ; ' '
000000000000d8d2         db  0x6c ; 'l'
000000000000d8d3         db  0x0a ; '.'
000000000000d8d4         db  0x0e ; '.'
000000000000d8d5         db  0x18 ; '.'
000000000000d8d6         db  0x43 ; 'C'
000000000000d8d7         db  0x0e ; '.'
000000000000d8d8         db  0x10 ; '.'
000000000000d8d9         db  0x41 ; 'A'
000000000000d8da         db  0x0e ; '.'
000000000000d8db         db  0x08 ; '.'
000000000000d8dc         db  0x47 ; 'G'
000000000000d8dd         db  0x0b ; '.'
000000000000d8de         db  0x00 ; '.'
000000000000d8df         db  0x00 ; '.'
000000000000d8e0         dd         0x00000024                                  ; Length of the record
000000000000d8e4         dd         0x00000dd4                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d8e8         db         0x68, 0x98, 2 dup (0xff)                    ; begin 0x7150
000000000000d8ec         db         0x6b, 3 dup (0x00)                          ; length 0x6b (end at 0x71bb)
000000000000d8f0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d8f1         db  0x41 ; 'A'
000000000000d8f2         db  0x0e ; '.'
000000000000d8f3         db  0x10 ; '.'
000000000000d8f4         db  0x83 ; '.'
000000000000d8f5         db  0x02 ; '.'
000000000000d8f6         db  0x6f ; 'o'
000000000000d8f7         db  0x0a ; '.'
000000000000d8f8         db  0x0e ; '.'
000000000000d8f9         db  0x08 ; '.'
000000000000d8fa         db  0x48 ; 'H'
000000000000d8fb         db  0x0b ; '.'
000000000000d8fc         db  0x5a ; 'Z'
000000000000d8fd         db  0x0a ; '.'
000000000000d8fe         db  0x0e ; '.'
000000000000d8ff         db  0x08 ; '.'
000000000000d900         db  0x46 ; 'F'
000000000000d901         db  0x0b ; '.'
000000000000d902         db  0x52 ; 'R'
000000000000d903         db  0x0e ; '.'
000000000000d904         db  0x08 ; '.'
000000000000d905         db  0x00 ; '.'
000000000000d906         db  0x00 ; '.'
000000000000d907         db  0x00 ; '.'
000000000000d908         dd         0x0000001c                                  ; Length of the record
000000000000d90c         dd         0x00000dfc                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d910         db         0xb0, 0x98, 2 dup (0xff)                    ; begin 0x71c0
000000000000d914         db         0x63, 3 dup (0x00)                          ; length 0x63 (end at 0x7223)
000000000000d918         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d919         db  0x47 ; 'G'
000000000000d91a         db  0x0e ; '.'
000000000000d91b         db  0x10 ; '.'
000000000000d91c         db  0x83 ; '.'
000000000000d91d         db  0x02 ; '.'
000000000000d91e         db  0x70 ; 'p'
000000000000d91f         db  0x0a ; '.'
000000000000d920         db  0x0e ; '.'
000000000000d921         db  0x08 ; '.'
000000000000d922         db  0x49 ; 'I'
000000000000d923         db  0x0b ; '.'
000000000000d924         db  0x62 ; 'b'
000000000000d925         db  0x0e ; '.'
000000000000d926         db  0x08 ; '.'
000000000000d927         db  0x00 ; '.'
000000000000d928         dd         0x00000010                                  ; Length of the record
000000000000d92c         dd         0x00000e1c                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d930         db         0x00, 0x99, 2 dup (0xff)                    ; begin 0x7230
000000000000d934         db         0x3a, 3 dup (0x00)                          ; length 0x3a (end at 0x726a)
000000000000d938         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d939         align      4
000000000000d93c         dd         0x0000004c                                  ; Length of the record
000000000000d940         dd         0x00000e30                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d944         db         0x2c, 0x99, 2 dup (0xff)                    ; begin 0x7270
000000000000d948         db         0x7a, 0x02, 2 dup (0x00)                    ; length 0x27a (end at 0x74ea)
000000000000d94c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d94d         db  0x42 ; 'B'
000000000000d94e         db  0x0e ; '.'
000000000000d94f         db  0x10 ; '.'
000000000000d950         db  0x8f ; '.'
000000000000d951         db  0x02 ; '.'
000000000000d952         db  0x42 ; 'B'
000000000000d953         db  0x0e ; '.'
000000000000d954         db  0x18 ; '.'
000000000000d955         db  0x8e ; '.'
000000000000d956         db  0x03 ; '.'
000000000000d957         db  0x45 ; 'E'
000000000000d958         db  0x0e ; '.'
000000000000d959         db  0x20 ; ' '
000000000000d95a         db  0x8d ; '.'
000000000000d95b         db  0x04 ; '.'
000000000000d95c         db  0x42 ; 'B'
000000000000d95d         db  0x0e ; '.'
000000000000d95e         db  0x28 ; '('
000000000000d95f         db  0x8c ; '.'
000000000000d960         db  0x05 ; '.'
000000000000d961         db  0x44 ; 'D'
000000000000d962         db  0x0e ; '.'
000000000000d963         db  0x30 ; '0'
000000000000d964         db  0x86 ; '.'
000000000000d965         db  0x06 ; '.'
000000000000d966         db  0x41 ; 'A'
000000000000d967         db  0x0e ; '.'
000000000000d968         db  0x38 ; '8'
000000000000d969         db  0x83 ; '.'
000000000000d96a         db  0x07 ; '.'
000000000000d96b         db  0x4d ; 'M'
000000000000d96c         db  0x0e ; '.'
000000000000d96d         db  0xf0 ; '.'
000000000000d96e         db  0x01 ; '.'
000000000000d96f         db  0x03 ; '.'
000000000000d970         db  0x08 ; '.'
000000000000d971         db  0x01 ; '.'
000000000000d972         db  0x0a ; '.'
000000000000d973         db  0x0e ; '.'
000000000000d974         db  0x38 ; '8'
000000000000d975         db  0x41 ; 'A'
000000000000d976         db  0x0e ; '.'
000000000000d977         db  0x30 ; '0'
000000000000d978         db  0x41 ; 'A'
000000000000d979         db  0x0e ; '.'
000000000000d97a         db  0x28 ; '('
000000000000d97b         db  0x42 ; 'B'
000000000000d97c         db  0x0e ; '.'
000000000000d97d         db  0x20 ; ' '
000000000000d97e         db  0x42 ; 'B'
000000000000d97f         db  0x0e ; '.'
000000000000d980         db  0x18 ; '.'
000000000000d981         db  0x42 ; 'B'
000000000000d982         db  0x0e ; '.'
000000000000d983         db  0x10 ; '.'
000000000000d984         db  0x42 ; 'B'
000000000000d985         db  0x0e ; '.'
000000000000d986         db  0x08 ; '.'
000000000000d987         db  0x41 ; 'A'
000000000000d988         db  0x0b ; '.'
000000000000d989         db  0x00 ; '.'
000000000000d98a         db  0x00 ; '.'
000000000000d98b         db  0x00 ; '.'
000000000000d98c         dd         0x00000040                                  ; Length of the record
000000000000d990         dd         0x00000e80                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d994         db         0x5c, 0x9b, 2 dup (0xff)                    ; begin 0x74f0
000000000000d998         db         0xaf, 3 dup (0x00)                          ; length 0xaf (end at 0x759f)
000000000000d99c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d99d         db  0x48 ; 'H'
000000000000d99e         db  0x0e ; '.'
000000000000d99f         db  0x10 ; '.'
000000000000d9a0         db  0x8c ; '.'
000000000000d9a1         db  0x02 ; '.'
000000000000d9a2         db  0x44 ; 'D'
000000000000d9a3         db  0x0e ; '.'
000000000000d9a4         db  0x18 ; '.'
000000000000d9a5         db  0x86 ; '.'
000000000000d9a6         db  0x03 ; '.'
000000000000d9a7         db  0x41 ; 'A'
000000000000d9a8         db  0x0e ; '.'
000000000000d9a9         db  0x20 ; ' '
000000000000d9aa         db  0x83 ; '.'
000000000000d9ab         db  0x04 ; '.'
000000000000d9ac         db  0x02 ; '.'
000000000000d9ad         db  0x65 ; 'e'
000000000000d9ae         db  0x0a ; '.'
000000000000d9af         db  0x0e ; '.'
000000000000d9b0         db  0x18 ; '.'
000000000000d9b1         db  0x46 ; 'F'
000000000000d9b2         db  0x0e ; '.'
000000000000d9b3         db  0x10 ; '.'
000000000000d9b4         db  0x42 ; 'B'
000000000000d9b5         db  0x0e ; '.'
000000000000d9b6         db  0x08 ; '.'
000000000000d9b7         db  0x46 ; 'F'
000000000000d9b8         db  0x0b ; '.'
000000000000d9b9         db  0x5e ; '^'
000000000000d9ba         db  0x0a ; '.'
000000000000d9bb         db  0x0e ; '.'
000000000000d9bc         db  0x18 ; '.'
000000000000d9bd         db  0x41 ; 'A'
000000000000d9be         db  0x0e ; '.'
000000000000d9bf         db  0x10 ; '.'
000000000000d9c0         db  0x42 ; 'B'
000000000000d9c1         db  0x0e ; '.'
000000000000d9c2         db  0x08 ; '.'
000000000000d9c3         db  0x47 ; 'G'
000000000000d9c4         db  0x0b ; '.'
000000000000d9c5         db  0x41 ; 'A'
000000000000d9c6         db  0x0e ; '.'
000000000000d9c7         db  0x18 ; '.'
000000000000d9c8         db  0x43 ; 'C'
000000000000d9c9         db  0x0e ; '.'
000000000000d9ca         db  0x10 ; '.'
000000000000d9cb         db  0x42 ; 'B'
000000000000d9cc         db  0x0e ; '.'
000000000000d9cd         db  0x08 ; '.'
000000000000d9ce         db  0x00 ; '.'
000000000000d9cf         db  0x00 ; '.'
000000000000d9d0         dd         0x00000018                                  ; Length of the record
000000000000d9d4         dd         0x00000ec4                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d9d8         db         0xc8, 0x9b, 2 dup (0xff)                    ; begin 0x75a0
000000000000d9dc         db         0xb8, 3 dup (0x00)                          ; length 0xb8 (end at 0x7658)
000000000000d9e0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d9e1         db  0x44 ; 'D'
000000000000d9e2         db  0x0e ; '.'
000000000000d9e3         db  0x30 ; '0'
000000000000d9e4         db  0x02 ; '.'
000000000000d9e5         db  0x55 ; 'U'
000000000000d9e6         db  0x0a ; '.'
000000000000d9e7         db  0x0e ; '.'
000000000000d9e8         db  0x08 ; '.'
000000000000d9e9         db  0x47 ; 'G'
000000000000d9ea         db  0x0b ; '.'
000000000000d9eb         db  0x00 ; '.'
000000000000d9ec         dd         0x0000004c                                  ; Length of the record
000000000000d9f0         dd         0x00000ee0                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000d9f4         db         0x6c, 0x9c, 2 dup (0xff)                    ; begin 0x7660
000000000000d9f8         db         0xd1, 0x09, 2 dup (0x00)                    ; length 0x9d1 (end at 0x8031)
000000000000d9fc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d9fd         db  0x42 ; 'B'
000000000000d9fe         db  0x0e ; '.'
000000000000d9ff         db  0x10 ; '.'
000000000000da00         db  0x8f ; '.'
000000000000da01         db  0x02 ; '.'
000000000000da02         db  0x42 ; 'B'
000000000000da03         db  0x0e ; '.'
000000000000da04         db  0x18 ; '.'
000000000000da05         db  0x8e ; '.'
000000000000da06         db  0x03 ; '.'
000000000000da07         db  0x45 ; 'E'
000000000000da08         db  0x0e ; '.'
000000000000da09         db  0x20 ; ' '
000000000000da0a         db  0x8d ; '.'
000000000000da0b         db  0x04 ; '.'
000000000000da0c         db  0x42 ; 'B'
000000000000da0d         db  0x0e ; '.'
000000000000da0e         db  0x28 ; '('
000000000000da0f         db  0x8c ; '.'
000000000000da10         db  0x05 ; '.'
000000000000da11         db  0x41 ; 'A'
000000000000da12         db  0x0e ; '.'
000000000000da13         db  0x30 ; '0'
000000000000da14         db  0x86 ; '.'
000000000000da15         db  0x06 ; '.'
000000000000da16         db  0x41 ; 'A'
000000000000da17         db  0x0e ; '.'
000000000000da18         db  0x38 ; '8'
000000000000da19         db  0x83 ; '.'
000000000000da1a         db  0x07 ; '.'
000000000000da1b         db  0x44 ; 'D'
000000000000da1c         db  0x0e ; '.'
000000000000da1d         db  0xb0 ; '.'
000000000000da1e         db  0x01 ; '.'
000000000000da1f         db  0x03 ; '.'
000000000000da20         db  0xd1 ; '.'
000000000000da21         db  0x05 ; '.'
000000000000da22         db  0x0a ; '.'
000000000000da23         db  0x0e ; '.'
000000000000da24         db  0x38 ; '8'
000000000000da25         db  0x41 ; 'A'
000000000000da26         db  0x0e ; '.'
000000000000da27         db  0x30 ; '0'
000000000000da28         db  0x41 ; 'A'
000000000000da29         db  0x0e ; '.'
000000000000da2a         db  0x28 ; '('
000000000000da2b         db  0x42 ; 'B'
000000000000da2c         db  0x0e ; '.'
000000000000da2d         db  0x20 ; ' '
000000000000da2e         db  0x42 ; 'B'
000000000000da2f         db  0x0e ; '.'
000000000000da30         db  0x18 ; '.'
000000000000da31         db  0x42 ; 'B'
000000000000da32         db  0x0e ; '.'
000000000000da33         db  0x10 ; '.'
000000000000da34         db  0x42 ; 'B'
000000000000da35         db  0x0e ; '.'
000000000000da36         db  0x08 ; '.'
000000000000da37         db  0x44 ; 'D'
000000000000da38         db  0x0b ; '.'
000000000000da39         db  0x00 ; '.'
000000000000da3a         db  0x00 ; '.'
000000000000da3b         db  0x00 ; '.'
000000000000da3c         dd         0x00000048                                  ; Length of the record
000000000000da40         dd         0x00000f30                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000da44         db         0xfc, 0xa5, 2 dup (0xff)                    ; begin 0x8040
000000000000da48         db         0xaa, 0x03, 2 dup (0x00)                    ; length 0x3aa (end at 0x83ea)
000000000000da4c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000da4d         db  0x42 ; 'B'
000000000000da4e         db  0x0e ; '.'
000000000000da4f         db  0x10 ; '.'
000000000000da50         db  0x8f ; '.'
000000000000da51         db  0x02 ; '.'
000000000000da52         db  0x42 ; 'B'
000000000000da53         db  0x0e ; '.'
000000000000da54         db  0x18 ; '.'
000000000000da55         db  0x8e ; '.'
000000000000da56         db  0x03 ; '.'
000000000000da57         db  0x42 ; 'B'
000000000000da58         db  0x0e ; '.'
000000000000da59         db  0x20 ; ' '
000000000000da5a         db  0x8d ; '.'
000000000000da5b         db  0x04 ; '.'
000000000000da5c         db  0x42 ; 'B'
000000000000da5d         db  0x0e ; '.'
000000000000da5e         db  0x28 ; '('
000000000000da5f         db  0x8c ; '.'
000000000000da60         db  0x05 ; '.'
000000000000da61         db  0x41 ; 'A'
000000000000da62         db  0x0e ; '.'
000000000000da63         db  0x30 ; '0'
000000000000da64         db  0x86 ; '.'
000000000000da65         db  0x06 ; '.'
000000000000da66         db  0x41 ; 'A'
000000000000da67         db  0x0e ; '.'
000000000000da68         db  0x38 ; '8'
000000000000da69         db  0x83 ; '.'
000000000000da6a         db  0x07 ; '.'
000000000000da6b         db  0x44 ; 'D'
000000000000da6c         db  0x0e ; '.'
000000000000da6d         db  0x60 ; '`'
000000000000da6e         db  0x03 ; '.'
000000000000da6f         db  0xa4 ; '.'
000000000000da70         db  0x02 ; '.'
000000000000da71         db  0x0a ; '.'
000000000000da72         db  0x0e ; '.'
000000000000da73         db  0x38 ; '8'
000000000000da74         db  0x44 ; 'D'
000000000000da75         db  0x0e ; '.'
000000000000da76         db  0x30 ; '0'
000000000000da77         db  0x41 ; 'A'
000000000000da78         db  0x0e ; '.'
000000000000da79         db  0x28 ; '('
000000000000da7a         db  0x42 ; 'B'
000000000000da7b         db  0x0e ; '.'
000000000000da7c         db  0x20 ; ' '
000000000000da7d         db  0x42 ; 'B'
000000000000da7e         db  0x0e ; '.'
000000000000da7f         db  0x18 ; '.'
000000000000da80         db  0x42 ; 'B'
000000000000da81         db  0x0e ; '.'
000000000000da82         db  0x10 ; '.'
000000000000da83         db  0x42 ; 'B'
000000000000da84         db  0x0e ; '.'
000000000000da85         db  0x08 ; '.'
000000000000da86         db  0x41 ; 'A'
000000000000da87         db  0x0b ; '.'
000000000000da88         dd         0x0000002c                                  ; Length of the record
000000000000da8c         dd         0x00000f7c                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000da90         db         0x60, 0xa9, 2 dup (0xff)                    ; begin 0x83f0
000000000000da94         db         0x82, 0x01, 2 dup (0x00)                    ; length 0x182 (end at 0x8572)
000000000000da98         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000da99         db  0x42 ; 'B'
000000000000da9a         db  0x0e ; '.'
000000000000da9b         db  0x10 ; '.'
000000000000da9c         db  0x8c ; '.'
000000000000da9d         db  0x02 ; '.'
000000000000da9e         db  0x41 ; 'A'
000000000000da9f         db  0x0e ; '.'
000000000000daa0         db  0x18 ; '.'
000000000000daa1         db  0x86 ; '.'
000000000000daa2         db  0x03 ; '.'
000000000000daa3         db  0x44 ; 'D'
000000000000daa4         db  0x0e ; '.'
000000000000daa5         db  0x20 ; ' '
000000000000daa6         db  0x83 ; '.'
000000000000daa7         db  0x04 ; '.'
000000000000daa8         db  0x02 ; '.'
000000000000daa9         db  0xc2 ; '.'
000000000000daaa         db  0x0a ; '.'
000000000000daab         db  0x0e ; '.'
000000000000daac         db  0x18 ; '.'
000000000000daad         db  0x41 ; 'A'
000000000000daae         db  0x0e ; '.'
000000000000daaf         db  0x10 ; '.'
000000000000dab0         db  0x42 ; 'B'
000000000000dab1         db  0x0e ; '.'
000000000000dab2         db  0x08 ; '.'
000000000000dab3         db  0x44 ; 'D'
000000000000dab4         db  0x0b ; '.'
000000000000dab5         db  0x00 ; '.'
000000000000dab6         db  0x00 ; '.'
000000000000dab7         db  0x00 ; '.'
000000000000dab8         dd         0x00000060                                  ; Length of the record
000000000000dabc         dd         0x00000fac                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000dac0         db         0xc0, 0xaa, 2 dup (0xff)                    ; begin 0x8580
000000000000dac4         db         0x78, 0x07, 2 dup (0x00)                    ; length 0x778 (end at 0x8cf8)
000000000000dac8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dac9         db  0x42 ; 'B'
000000000000daca         db  0x0e ; '.'
000000000000dacb         db  0x10 ; '.'
000000000000dacc         db  0x8e ; '.'
000000000000dacd         db  0x02 ; '.'
000000000000dace         db  0x42 ; 'B'
000000000000dacf         db  0x0e ; '.'
000000000000dad0         db  0x18 ; '.'
000000000000dad1         db  0x8d ; '.'
000000000000dad2         db  0x03 ; '.'
000000000000dad3         db  0x42 ; 'B'
000000000000dad4         db  0x0e ; '.'
000000000000dad5         db  0x20 ; ' '
000000000000dad6         db  0x8c ; '.'
000000000000dad7         db  0x04 ; '.'
000000000000dad8         db  0x41 ; 'A'
000000000000dad9         db  0x0e ; '.'
000000000000dada         db  0x28 ; '('
000000000000dadb         db  0x86 ; '.'
000000000000dadc         db  0x05 ; '.'
000000000000dadd         db  0x41 ; 'A'
000000000000dade         db  0x0e ; '.'
000000000000dadf         db  0x30 ; '0'
000000000000dae0         db  0x83 ; '.'
000000000000dae1         db  0x06 ; '.'
000000000000dae2         db  0x03 ; '.'
000000000000dae3         db  0x19 ; '.'
000000000000dae4         db  0x01 ; '.'
000000000000dae5         db  0x0a ; '.'
000000000000dae6         db  0x0e ; '.'
000000000000dae7         db  0x28 ; '('
000000000000dae8         db  0x44 ; 'D'
000000000000dae9         db  0x0e ; '.'
000000000000daea         db  0x20 ; ' '
000000000000daeb         db  0x42 ; 'B'
000000000000daec         db  0x0e ; '.'
000000000000daed         db  0x18 ; '.'
000000000000daee         db  0x42 ; 'B'
000000000000daef         db  0x0e ; '.'
000000000000daf0         db  0x10 ; '.'
000000000000daf1         db  0x42 ; 'B'
000000000000daf2         db  0x0e ; '.'
000000000000daf3         db  0x08 ; '.'
000000000000daf4         db  0x45 ; 'E'
000000000000daf5         db  0x0b ; '.'
000000000000daf6         db  0x02 ; '.'
000000000000daf7         db  0x6b ; 'k'
000000000000daf8         db  0x0a ; '.'
000000000000daf9         db  0x0e ; '.'
000000000000dafa         db  0x28 ; '('
000000000000dafb         db  0x44 ; 'D'
000000000000dafc         db  0x0e ; '.'
000000000000dafd         db  0x20 ; ' '
000000000000dafe         db  0x42 ; 'B'
000000000000daff         db  0x0e ; '.'
000000000000db00         db  0x18 ; '.'
000000000000db01         db  0x42 ; 'B'
000000000000db02         db  0x0e ; '.'
000000000000db03         db  0x10 ; '.'
000000000000db04         db  0x42 ; 'B'
000000000000db05         db  0x0e ; '.'
000000000000db06         db  0x08 ; '.'
000000000000db07         db  0x4b ; 'K'
000000000000db08         db  0x0b ; '.'
000000000000db09         db  0x02 ; '.'
000000000000db0a         db  0xe2 ; '.'
000000000000db0b         db  0x0a ; '.'
000000000000db0c         db  0x0e ; '.'
000000000000db0d         db  0x28 ; '('
000000000000db0e         db  0x41 ; 'A'
000000000000db0f         db  0x0e ; '.'
000000000000db10         db  0x20 ; ' '
000000000000db11         db  0x42 ; 'B'
000000000000db12         db  0x0e ; '.'
000000000000db13         db  0x18 ; '.'
000000000000db14         db  0x42 ; 'B'
000000000000db15         db  0x0e ; '.'
000000000000db16         db  0x10 ; '.'
000000000000db17         db  0x42 ; 'B'
000000000000db18         db  0x0e ; '.'
000000000000db19         db  0x08 ; '.'
000000000000db1a         db  0x47 ; 'G'
000000000000db1b         db  0x0b ; '.'
000000000000db1c         dd         0x00000014                                  ; Length of the record
000000000000db20         dd         0x00001010                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000db24         db         0xdc, 0xb1, 2 dup (0xff)                    ; begin 0x8d00
000000000000db28         db         0x29, 3 dup (0x00)                          ; length 0x29 (end at 0x8d29)
000000000000db2c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000db2d         db  0x54 ; 'T'
000000000000db2e         db  0x0e ; '.'
000000000000db2f         db  0x10 ; '.'
000000000000db30         db  0x54 ; 'T'
000000000000db31         db  0x0e ; '.'
000000000000db32         db  0x08 ; '.'
000000000000db33         db  0x00 ; '.'
000000000000db34         dd         0x00000060                                  ; Length of the record
000000000000db38         dd         0x00001028                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000db3c         db         0xf4, 0xb1, 2 dup (0xff)                    ; begin 0x8d30
000000000000db40         db         0x4e, 0x01, 2 dup (0x00)                    ; length 0x14e (end at 0x8e7e)
000000000000db44         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000db45         db  0x42 ; 'B'
000000000000db46         db  0x0e ; '.'
000000000000db47         db  0x10 ; '.'
000000000000db48         db  0x8e ; '.'
000000000000db49         db  0x02 ; '.'
000000000000db4a         db  0x42 ; 'B'
000000000000db4b         db  0x0e ; '.'
000000000000db4c         db  0x18 ; '.'
000000000000db4d         db  0x8d ; '.'
000000000000db4e         db  0x03 ; '.'
000000000000db4f         db  0x42 ; 'B'
000000000000db50         db  0x0e ; '.'
000000000000db51         db  0x20 ; ' '
000000000000db52         db  0x8c ; '.'
000000000000db53         db  0x04 ; '.'
000000000000db54         db  0x41 ; 'A'
000000000000db55         db  0x0e ; '.'
000000000000db56         db  0x28 ; '('
000000000000db57         db  0x86 ; '.'
000000000000db58         db  0x05 ; '.'
000000000000db59         db  0x44 ; 'D'
000000000000db5a         db  0x0e ; '.'
000000000000db5b         db  0x30 ; '0'
000000000000db5c         db  0x83 ; '.'
000000000000db5d         db  0x06 ; '.'
000000000000db5e         db  0x02 ; '.'
000000000000db5f         db  0x8a ; '.'
000000000000db60         db  0x0a ; '.'
000000000000db61         db  0x0e ; '.'
000000000000db62         db  0x28 ; '('
000000000000db63         db  0x41 ; 'A'
000000000000db64         db  0x0e ; '.'
000000000000db65         db  0x20 ; ' '
000000000000db66         db  0x42 ; 'B'
000000000000db67         db  0x0e ; '.'
000000000000db68         db  0x18 ; '.'
000000000000db69         db  0x42 ; 'B'
000000000000db6a         db  0x0e ; '.'
000000000000db6b         db  0x10 ; '.'
000000000000db6c         db  0x42 ; 'B'
000000000000db6d         db  0x0e ; '.'
000000000000db6e         db  0x08 ; '.'
000000000000db6f         db  0x44 ; 'D'
000000000000db70         db  0x0b ; '.'
000000000000db71         db  0x41 ; 'A'
000000000000db72         db  0x0a ; '.'
000000000000db73         db  0x0e ; '.'
000000000000db74         db  0x28 ; '('
000000000000db75         db  0x45 ; 'E'
000000000000db76         db  0x0e ; '.'
000000000000db77         db  0x20 ; ' '
000000000000db78         db  0x42 ; 'B'
000000000000db79         db  0x0e ; '.'
000000000000db7a         db  0x18 ; '.'
000000000000db7b         db  0x42 ; 'B'
000000000000db7c         db  0x0e ; '.'
000000000000db7d         db  0x10 ; '.'
000000000000db7e         db  0x42 ; 'B'
000000000000db7f         db  0x0e ; '.'
000000000000db80         db  0x08 ; '.'
000000000000db81         db  0x44 ; 'D'
000000000000db82         db  0x0b ; '.'
000000000000db83         db  0x41 ; 'A'
000000000000db84         db  0x0a ; '.'
000000000000db85         db  0x0e ; '.'
000000000000db86         db  0x28 ; '('
000000000000db87         db  0x43 ; 'C'
000000000000db88         db  0x0e ; '.'
000000000000db89         db  0x20 ; ' '
000000000000db8a         db  0x42 ; 'B'
000000000000db8b         db  0x0e ; '.'
000000000000db8c         db  0x18 ; '.'
000000000000db8d         db  0x42 ; 'B'
000000000000db8e         db  0x0e ; '.'
000000000000db8f         db  0x10 ; '.'
000000000000db90         db  0x42 ; 'B'
000000000000db91         db  0x0e ; '.'
000000000000db92         db  0x08 ; '.'
000000000000db93         db  0x46 ; 'F'
000000000000db94         db  0x0b ; '.'
000000000000db95         db  0x00 ; '.'
000000000000db96         db  0x00 ; '.'
000000000000db97         db  0x00 ; '.'
000000000000db98         dd         0x0000003c                                  ; Length of the record
000000000000db9c         dd         0x0000108c                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000dba0         db         0xe0, 0xb2, 2 dup (0xff)                    ; begin 0x8e80
000000000000dba4         db         0x83, 3 dup (0x00)                          ; length 0x83 (end at 0x8f03)
000000000000dba8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dba9         db  0x42 ; 'B'
000000000000dbaa         db  0x0e ; '.'
000000000000dbab         db  0x10 ; '.'
000000000000dbac         db  0x8d ; '.'
000000000000dbad         db  0x02 ; '.'
000000000000dbae         db  0x42 ; 'B'
000000000000dbaf         db  0x0e ; '.'
000000000000dbb0         db  0x18 ; '.'
000000000000dbb1         db  0x8c ; '.'
000000000000dbb2         db  0x03 ; '.'
000000000000dbb3         db  0x44 ; 'D'
000000000000dbb4         db  0x0e ; '.'
000000000000dbb5         db  0x20 ; ' '
000000000000dbb6         db  0x86 ; '.'
000000000000dbb7         db  0x04 ; '.'
000000000000dbb8         db  0x41 ; 'A'
000000000000dbb9         db  0x0e ; '.'
000000000000dbba         db  0x28 ; '('
000000000000dbbb         db  0x83 ; '.'
000000000000dbbc         db  0x05 ; '.'
000000000000dbbd         db  0x4a ; 'J'
000000000000dbbe         db  0x0e ; '.'
000000000000dbbf         db  0x40 ; '@'
000000000000dbc0         db  0x02 ; '.'
000000000000dbc1         db  0x64 ; 'd'
000000000000dbc2         db  0x0a ; '.'
000000000000dbc3         db  0x0e ; '.'
000000000000dbc4         db  0x28 ; '('
000000000000dbc5         db  0x41 ; 'A'
000000000000dbc6         db  0x0e ; '.'
000000000000dbc7         db  0x20 ; ' '
000000000000dbc8         db  0x41 ; 'A'
000000000000dbc9         db  0x0e ; '.'
000000000000dbca         db  0x18 ; '.'
000000000000dbcb         db  0x42 ; 'B'
000000000000dbcc         db  0x0e ; '.'
000000000000dbcd         db  0x10 ; '.'
000000000000dbce         db  0x42 ; 'B'
000000000000dbcf         db  0x0e ; '.'
000000000000dbd0         db  0x08 ; '.'
000000000000dbd1         db  0x41 ; 'A'
000000000000dbd2         db  0x0b ; '.'
000000000000dbd3         db  0x00 ; '.'
000000000000dbd4         db  0x00 ; '.'
000000000000dbd5         db  0x00 ; '.'
000000000000dbd6         db  0x00 ; '.'
000000000000dbd7         db  0x00 ; '.'
000000000000dbd8         dd         0x0000004c                                  ; Length of the record
000000000000dbdc         dd         0x000010cc                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000dbe0         db         0x30, 0xb3, 2 dup (0xff)                    ; begin 0x8f10
000000000000dbe4         db         0x7d, 3 dup (0x00)                          ; length 0x7d (end at 0x8f8d)
000000000000dbe8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dbe9         db  0x42 ; 'B'
000000000000dbea         db  0x0e ; '.'
000000000000dbeb         db  0x10 ; '.'
000000000000dbec         db  0x8c ; '.'
000000000000dbed         db  0x02 ; '.'
000000000000dbee         db  0x41 ; 'A'
000000000000dbef         db  0x0e ; '.'
000000000000dbf0         db  0x18 ; '.'
000000000000dbf1         db  0x86 ; '.'
000000000000dbf2         db  0x03 ; '.'
000000000000dbf3         db  0x44 ; 'D'
000000000000dbf4         db  0x0e ; '.'
000000000000dbf5         db  0x20 ; ' '
000000000000dbf6         db  0x83 ; '.'
000000000000dbf7         db  0x04 ; '.'
000000000000dbf8         db  0x69 ; 'i'
000000000000dbf9         db  0x0a ; '.'
000000000000dbfa         db  0x0e ; '.'
000000000000dbfb         db  0x18 ; '.'
000000000000dbfc         db  0x41 ; 'A'
000000000000dbfd         db  0x0e ; '.'
000000000000dbfe         db  0x10 ; '.'
000000000000dbff         db  0x42 ; 'B'
000000000000dc00         db  0x0e ; '.'
000000000000dc01         db  0x08 ; '.'
000000000000dc02         db  0x45 ; 'E'
000000000000dc03         db  0x0b ; '.'
000000000000dc04         db  0x55 ; 'U'
000000000000dc05         db  0x0a ; '.'
000000000000dc06         db  0x0e ; '.'
000000000000dc07         db  0x18 ; '.'
000000000000dc08         db  0x41 ; 'A'
000000000000dc09         db  0x0e ; '.'
000000000000dc0a         db  0x10 ; '.'
000000000000dc0b         db  0x42 ; 'B'
000000000000dc0c         db  0x0e ; '.'
000000000000dc0d         db  0x08 ; '.'
000000000000dc0e         db  0x48 ; 'H'
000000000000dc0f         db  0x0b ; '.'
000000000000dc10         db  0x41 ; 'A'
000000000000dc11         db  0x0a ; '.'
000000000000dc12         db  0x0e ; '.'
000000000000dc13         db  0x18 ; '.'
000000000000dc14         db  0x46 ; 'F'
000000000000dc15         db  0x0e ; '.'
000000000000dc16         db  0x10 ; '.'
000000000000dc17         db  0x42 ; 'B'
000000000000dc18         db  0x0e ; '.'
000000000000dc19         db  0x08 ; '.'
000000000000dc1a         db  0x47 ; 'G'
000000000000dc1b         db  0x0b ; '.'
000000000000dc1c         db  0x49 ; 'I'
000000000000dc1d         db  0x0e ; '.'
000000000000dc1e         db  0x18 ; '.'
000000000000dc1f         db  0x41 ; 'A'
000000000000dc20         db  0x0e ; '.'
000000000000dc21         db  0x10 ; '.'
000000000000dc22         db  0x42 ; 'B'
000000000000dc23         db  0x0e ; '.'
000000000000dc24         db  0x08 ; '.'
000000000000dc25         db  0x00 ; '.'
000000000000dc26         db  0x00 ; '.'
000000000000dc27         db  0x00 ; '.'
000000000000dc28         dd         0x00000010                                  ; Length of the record
000000000000dc2c         dd         0x0000111c                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000dc30         db         0x60, 0xb3, 2 dup (0xff)                    ; begin 0x8f90
000000000000dc34         db         0x10, 3 dup (0x00)                          ; length 0x10 (end at 0x8fa0)
000000000000dc38         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dc39         align      4
000000000000dc3c         dd         0x00000018                                  ; Length of the record
000000000000dc40         dd         0x00001130                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000dc44         db         0x5c, 0xb3, 2 dup (0xff)                    ; begin 0x8fa0
000000000000dc48         db         0x8a, 3 dup (0x00)                          ; length 0x8a (end at 0x902a)
000000000000dc4c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dc4d         db  0x02 ; '.'
000000000000dc4e         db  0x80 ; '.'
000000000000dc4f         db  0x0e ; '.'
000000000000dc50         db  0x10 ; '.'
000000000000dc51         db  0x00 ; '.'
000000000000dc52         db  0x00 ; '.'
000000000000dc53         db  0x00 ; '.'
000000000000dc54         db  0x00 ; '.'
000000000000dc55         db  0x00 ; '.'
000000000000dc56         db  0x00 ; '.'
000000000000dc57         db  0x00 ; '.'
000000000000dc58         dd         0x0000001c                                  ; Length of the record
000000000000dc5c         dd         0x0000114c                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000dc60         db         0xd0, 0xb3, 2 dup (0xff)                    ; begin 0x9030
000000000000dc64         db         0x6e, 3 dup (0x00)                          ; length 0x6e (end at 0x909e)
000000000000dc68         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dc69         db  0x44 ; 'D'
000000000000dc6a         db  0x0e ; '.'
000000000000dc6b         db  0x60 ; '`'
000000000000dc6c         db  0x7f ; '.'
000000000000dc6d         db  0x0a ; '.'
000000000000dc6e         db  0x0e ; '.'
000000000000dc6f         db  0x08 ; '.'
000000000000dc70         db  0x45 ; 'E'
000000000000dc71         db  0x0b ; '.'
000000000000dc72         db  0x00 ; '.'
000000000000dc73         db  0x00 ; '.'
000000000000dc74         db  0x00 ; '.'
000000000000dc75         db  0x00 ; '.'
000000000000dc76         db  0x00 ; '.'
000000000000dc77         db  0x00 ; '.'
000000000000dc78         dd         0x0000001c                                  ; Length of the record
000000000000dc7c         dd         0x0000116c                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000dc80         db         0x20, 0xb4, 2 dup (0xff)                    ; begin 0x90a0
000000000000dc84         db         0x60, 3 dup (0x00)                          ; length 0x60 (end at 0x9100)
000000000000dc88         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dc89         db  0x44 ; 'D'
000000000000dc8a         db  0x0e ; '.'
000000000000dc8b         db  0x10 ; '.'
000000000000dc8c         db  0x75 ; 'u'
000000000000dc8d         db  0x0a ; '.'
000000000000dc8e         db  0x0e ; '.'
000000000000dc8f         db  0x08 ; '.'
000000000000dc90         db  0x47 ; 'G'
000000000000dc91         db  0x0b ; '.'
000000000000dc92         db  0x5f ; '_'
000000000000dc93         db  0x0e ; '.'
000000000000dc94         db  0x08 ; '.'
000000000000dc95         db  0x00 ; '.'
000000000000dc96         db  0x00 ; '.'
000000000000dc97         db  0x00 ; '.'
000000000000dc98         dd         0x00000010                                  ; Length of the record
000000000000dc9c         dd         0x0000118c                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000dca0         db         0x60, 0xb4, 2 dup (0xff)                    ; begin 0x9100
000000000000dca4         db         0x93, 3 dup (0x00)                          ; length 0x93 (end at 0x9193)
000000000000dca8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dca9         align      4
000000000000dcac         dd         0x00000010                                  ; Length of the record
000000000000dcb0         dd         0x000011a0                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000dcb4         db         0xec, 0xb4, 2 dup (0xff)                    ; begin 0x91a0
000000000000dcb8         db         0x10, 3 dup (0x00)                          ; length 0x10 (end at 0x91b0)
000000000000dcbc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dcbd         align      64
000000000000dcc0         dd         0x00000010                                  ; Length of the record
000000000000dcc4         dd         0x000011b4                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000dcc8         db         0xe8, 0xb4, 2 dup (0xff)                    ; begin 0x91b0
000000000000dccc         db         0x07, 3 dup (0x00)                          ; length 0x7 (end at 0x91b7)
000000000000dcd0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dcd1         align      4
000000000000dcd4         dd         0x00000018                                  ; Length of the record
000000000000dcd8         dd         0x000011c8                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000dcdc         db         0xe4, 0xb4, 2 dup (0xff)                    ; begin 0x91c0
000000000000dce0         db         0x22, 3 dup (0x00)                          ; length 0x22 (end at 0x91e2)
000000000000dce4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dce5         db  0x41 ; 'A'
000000000000dce6         db  0x0e ; '.'
000000000000dce7         db  0x10 ; '.'
000000000000dce8         db  0x83 ; '.'
000000000000dce9         db  0x02 ; '.'
000000000000dcea         db  0x5b ; '['
000000000000dceb         db  0x0a ; '.'
000000000000dcec         db  0x0e ; '.'
000000000000dced         db  0x08 ; '.'
000000000000dcee         db  0x41 ; 'A'
000000000000dcef         db  0x0b ; '.'
000000000000dcf0         dd         0x0000005c                                  ; Length of the record
000000000000dcf4         dd         0x000011e4                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000dcf8         db         0xf8, 0xb4, 2 dup (0xff)                    ; begin 0x91f0
000000000000dcfc         db         0x1e, 0x01, 2 dup (0x00)                    ; length 0x11e (end at 0x930e)
000000000000dd00         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dd01         db  0x42 ; 'B'
000000000000dd02         db  0x0e ; '.'
000000000000dd03         db  0x10 ; '.'
000000000000dd04         db  0x8e ; '.'
000000000000dd05         db  0x02 ; '.'
000000000000dd06         db  0x42 ; 'B'
000000000000dd07         db  0x0e ; '.'
000000000000dd08         db  0x18 ; '.'
000000000000dd09         db  0x8d ; '.'
000000000000dd0a         db  0x03 ; '.'
000000000000dd0b         db  0x45 ; 'E'
000000000000dd0c         db  0x0e ; '.'
000000000000dd0d         db  0x20 ; ' '
000000000000dd0e         db  0x8c ; '.'
000000000000dd0f         db  0x04 ; '.'
000000000000dd10         db  0x41 ; 'A'
000000000000dd11         db  0x0e ; '.'
000000000000dd12         db  0x28 ; '('
000000000000dd13         db  0x86 ; '.'
000000000000dd14         db  0x05 ; '.'
000000000000dd15         db  0x44 ; 'D'
000000000000dd16         db  0x0e ; '.'
000000000000dd17         db  0x30 ; '0'
000000000000dd18         db  0x83 ; '.'
000000000000dd19         db  0x06 ; '.'
000000000000dd1a         db  0x02 ; '.'
000000000000dd1b         db  0xa1 ; '.'
000000000000dd1c         db  0x0a ; '.'
000000000000dd1d         db  0x0e ; '.'
000000000000dd1e         db  0x28 ; '('
000000000000dd1f         db  0x44 ; 'D'
000000000000dd20         db  0x0e ; '.'
000000000000dd21         db  0x20 ; ' '
000000000000dd22         db  0x42 ; 'B'
000000000000dd23         db  0x0e ; '.'
000000000000dd24         db  0x18 ; '.'
000000000000dd25         db  0x42 ; 'B'
000000000000dd26         db  0x0e ; '.'
000000000000dd27         db  0x10 ; '.'
000000000000dd28         db  0x42 ; 'B'
000000000000dd29         db  0x0e ; '.'
000000000000dd2a         db  0x08 ; '.'
000000000000dd2b         db  0x47 ; 'G'
000000000000dd2c         db  0x0b ; '.'
000000000000dd2d         db  0x71 ; 'q'
000000000000dd2e         db  0x0a ; '.'
000000000000dd2f         db  0x0e ; '.'
000000000000dd30         db  0x28 ; '('
000000000000dd31         db  0x41 ; 'A'
000000000000dd32         db  0x0e ; '.'
000000000000dd33         db  0x20 ; ' '
000000000000dd34         db  0x42 ; 'B'
000000000000dd35         db  0x0e ; '.'
000000000000dd36         db  0x18 ; '.'
000000000000dd37         db  0x42 ; 'B'
000000000000dd38         db  0x0e ; '.'
000000000000dd39         db  0x10 ; '.'
000000000000dd3a         db  0x42 ; 'B'
000000000000dd3b         db  0x0e ; '.'
000000000000dd3c         db  0x08 ; '.'
000000000000dd3d         db  0x48 ; 'H'
000000000000dd3e         db  0x0b ; '.'
000000000000dd3f         db  0x53 ; 'S'
000000000000dd40         db  0x0e ; '.'
000000000000dd41         db  0x28 ; '('
000000000000dd42         db  0x44 ; 'D'
000000000000dd43         db  0x0e ; '.'
000000000000dd44         db  0x20 ; ' '
000000000000dd45         db  0x42 ; 'B'
000000000000dd46         db  0x0e ; '.'
000000000000dd47         db  0x18 ; '.'
000000000000dd48         db  0x42 ; 'B'
000000000000dd49         db  0x0e ; '.'
000000000000dd4a         db  0x10 ; '.'
000000000000dd4b         db  0x42 ; 'B'
000000000000dd4c         db  0x0e ; '.'
000000000000dd4d         db  0x08 ; '.'
000000000000dd4e         db  0x00 ; '.'
000000000000dd4f         db  0x00 ; '.'
000000000000dd50         dd         0x00000010                                  ; Length of the record
000000000000dd54         dd         0x00001244                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000dd58         db         0xb8, 0xb5, 2 dup (0xff)                    ; begin 0x9310
000000000000dd5c         db         0x77, 3 dup (0x00)                          ; length 0x77 (end at 0x9387)
000000000000dd60         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dd61         align      4
000000000000dd64         dd         0x0000005c                                  ; Length of the record
000000000000dd68         dd         0x00001258                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000dd6c         db         0x24, 0xb6, 2 dup (0xff)                    ; begin 0x9390
000000000000dd70         db         0x40, 0x01, 2 dup (0x00)                    ; length 0x140 (end at 0x94d0)
000000000000dd74         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dd75         db  0x42 ; 'B'
000000000000dd76         db  0x0e ; '.'
000000000000dd77         db  0x10 ; '.'
000000000000dd78         db  0x8f ; '.'
000000000000dd79         db  0x02 ; '.'
000000000000dd7a         db  0x42 ; 'B'
000000000000dd7b         db  0x0e ; '.'
000000000000dd7c         db  0x18 ; '.'
000000000000dd7d         db  0x8e ; '.'
000000000000dd7e         db  0x03 ; '.'
000000000000dd7f         db  0x42 ; 'B'
000000000000dd80         db  0x0e ; '.'
000000000000dd81         db  0x20 ; ' '
000000000000dd82         db  0x8d ; '.'
000000000000dd83         db  0x04 ; '.'
000000000000dd84         db  0x42 ; 'B'
000000000000dd85         db  0x0e ; '.'
000000000000dd86         db  0x28 ; '('
000000000000dd87         db  0x8c ; '.'
000000000000dd88         db  0x05 ; '.'
000000000000dd89         db  0x41 ; 'A'
000000000000dd8a         db  0x0e ; '.'
000000000000dd8b         db  0x30 ; '0'
000000000000dd8c         db  0x86 ; '.'
000000000000dd8d         db  0x06 ; '.'
000000000000dd8e         db  0x41 ; 'A'
000000000000dd8f         db  0x0e ; '.'
000000000000dd90         db  0x38 ; '8'
000000000000dd91         db  0x83 ; '.'
000000000000dd92         db  0x07 ; '.'
000000000000dd93         db  0x44 ; 'D'
000000000000dd94         db  0x0e ; '.'
000000000000dd95         db  0x40 ; '@'
000000000000dd96         db  0x02 ; '.'
000000000000dd97         db  0xee ; '.'
000000000000dd98         db  0x0a ; '.'
000000000000dd99         db  0x0e ; '.'
000000000000dd9a         db  0x38 ; '8'
000000000000dd9b         db  0x46 ; 'F'
000000000000dd9c         db  0x0e ; '.'
000000000000dd9d         db  0x30 ; '0'
000000000000dd9e         db  0x41 ; 'A'
000000000000dd9f         db  0x0e ; '.'
000000000000dda0         db  0x28 ; '('
000000000000dda1         db  0x42 ; 'B'
000000000000dda2         db  0x0e ; '.'
000000000000dda3         db  0x20 ; ' '
000000000000dda4         db  0x42 ; 'B'
000000000000dda5         db  0x0e ; '.'
000000000000dda6         db  0x18 ; '.'
000000000000dda7         db  0x42 ; 'B'
000000000000dda8         db  0x0e ; '.'
000000000000dda9         db  0x10 ; '.'
000000000000ddaa         db  0x42 ; 'B'
000000000000ddab         db  0x0e ; '.'
000000000000ddac         db  0x08 ; '.'
000000000000ddad         db  0x45 ; 'E'
000000000000ddae         db  0x0b ; '.'
000000000000ddaf         db  0x63 ; 'c'
000000000000ddb0         db  0x0e ; '.'
000000000000ddb1         db  0x38 ; '8'
000000000000ddb2         db  0x43 ; 'C'
000000000000ddb3         db  0x0e ; '.'
000000000000ddb4         db  0x30 ; '0'
000000000000ddb5         db  0x41 ; 'A'
000000000000ddb6         db  0x0e ; '.'
000000000000ddb7         db  0x28 ; '('
000000000000ddb8         db  0x42 ; 'B'
000000000000ddb9         db  0x0e ; '.'
000000000000ddba         db  0x20 ; ' '
000000000000ddbb         db  0x42 ; 'B'
000000000000ddbc         db  0x0e ; '.'
000000000000ddbd         db  0x18 ; '.'
000000000000ddbe         db  0x42 ; 'B'
000000000000ddbf         db  0x0e ; '.'
000000000000ddc0         db  0x10 ; '.'
000000000000ddc1         db  0x42 ; 'B'
000000000000ddc2         db  0x0e ; '.'
000000000000ddc3         db  0x08 ; '.'
000000000000ddc4         dd         0x00000010                                  ; Length of the record
000000000000ddc8         dd         0x000012b8                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000ddcc         db         0x04, 0xb7, 2 dup (0xff)                    ; begin 0x94d0
000000000000ddd0         db         0x05, 3 dup (0x00)                          ; length 0x5 (end at 0x94d5)
000000000000ddd4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ddd5         align      8
000000000000ddd8         dd         0x00000010                                  ; Length of the record
000000000000dddc         dd         0x000012cc                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000dde0         db         0x00, 0xb7, 2 dup (0xff)                    ; begin 0x94e0
000000000000dde4         db         0x05, 3 dup (0x00)                          ; length 0x5 (end at 0x94e5)
000000000000dde8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dde9         align      4
000000000000ddec         dd         0x00000010                                  ; Length of the record
000000000000ddf0         dd         0x000012e0                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000ddf4         db         0xfc, 0xb6, 2 dup (0xff)                    ; begin 0x94f0
000000000000ddf8         db         0x05, 3 dup (0x00)                          ; length 0x5 (end at 0x94f5)
000000000000ddfc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ddfd         align      512
000000000000de00         dd         0x00000010                                  ; Length of the record
000000000000de04         dd         0x000012f4                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000de08         db         0xf8, 0xb6, 2 dup (0xff)                    ; begin 0x9500
000000000000de0c         db         0x49, 3 dup (0x00)                          ; length 0x49 (end at 0x9549)
000000000000de10         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000de11         align      4
000000000000de14         dd         0x00000010                                  ; Length of the record
000000000000de18         dd         0x00001308                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000de1c         db         0x34, 0xb7, 2 dup (0xff)                    ; begin 0x9550
000000000000de20         db         0x58, 3 dup (0x00)                          ; length 0x58 (end at 0x95a8)
000000000000de24         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000de25         align      8
000000000000de28         dd         0x00000038                                  ; Length of the record
000000000000de2c         dd         0x0000131c                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000de30         db         0x80, 0xb7, 2 dup (0xff)                    ; begin 0x95b0
000000000000de34         db         0x47, 0x01, 2 dup (0x00)                    ; length 0x147 (end at 0x96f7)
000000000000de38         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000de39         db  0x42 ; 'B'
000000000000de3a         db  0x0e ; '.'
000000000000de3b         db  0x10 ; '.'
000000000000de3c         db  0x8d ; '.'
000000000000de3d         db  0x02 ; '.'
000000000000de3e         db  0x42 ; 'B'
000000000000de3f         db  0x0e ; '.'
000000000000de40         db  0x18 ; '.'
000000000000de41         db  0x8c ; '.'
000000000000de42         db  0x03 ; '.'
000000000000de43         db  0x44 ; 'D'
000000000000de44         db  0x0e ; '.'
000000000000de45         db  0x20 ; ' '
000000000000de46         db  0x86 ; '.'
000000000000de47         db  0x04 ; '.'
000000000000de48         db  0x41 ; 'A'
000000000000de49         db  0x0e ; '.'
000000000000de4a         db  0x28 ; '('
000000000000de4b         db  0x83 ; '.'
000000000000de4c         db  0x05 ; '.'
000000000000de4d         db  0x46 ; 'F'
000000000000de4e         db  0x0e ; '.'
000000000000de4f         db  0x30 ; '0'
000000000000de50         db  0x02 ; '.'
000000000000de51         db  0xcd ; '.'
000000000000de52         db  0x0a ; '.'
000000000000de53         db  0x0e ; '.'
000000000000de54         db  0x28 ; '('
000000000000de55         db  0x47 ; 'G'
000000000000de56         db  0x0e ; '.'
000000000000de57         db  0x20 ; ' '
000000000000de58         db  0x41 ; 'A'
000000000000de59         db  0x0e ; '.'
000000000000de5a         db  0x18 ; '.'
000000000000de5b         db  0x42 ; 'B'
000000000000de5c         db  0x0e ; '.'
000000000000de5d         db  0x10 ; '.'
000000000000de5e         db  0x42 ; 'B'
000000000000de5f         db  0x0e ; '.'
000000000000de60         db  0x08 ; '.'
000000000000de61         db  0x58 ; 'X'
000000000000de62         db  0x0b ; '.'
000000000000de63         db  0x00 ; '.'
000000000000de64         dd         0x00000034                                  ; Length of the record
000000000000de68         dd         0x00001358                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000de6c         db         0x94, 0xb8, 2 dup (0xff)                    ; begin 0x9700
000000000000de70         db         0x5b, 3 dup (0x00)                          ; length 0x5b (end at 0x975b)
000000000000de74         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000de75         db  0x42 ; 'B'
000000000000de76         db  0x0e ; '.'
000000000000de77         db  0x10 ; '.'
000000000000de78         db  0x8c ; '.'
000000000000de79         db  0x02 ; '.'
000000000000de7a         db  0x41 ; 'A'
000000000000de7b         db  0x0e ; '.'
000000000000de7c         db  0x18 ; '.'
000000000000de7d         db  0x86 ; '.'
000000000000de7e         db  0x03 ; '.'
000000000000de7f         db  0x44 ; 'D'
000000000000de80         db  0x0e ; '.'
000000000000de81         db  0x20 ; ' '
000000000000de82         db  0x83 ; '.'
000000000000de83         db  0x04 ; '.'
000000000000de84         db  0x79 ; 'y'
000000000000de85         db  0x0a ; '.'
000000000000de86         db  0x0e ; '.'
000000000000de87         db  0x18 ; '.'
000000000000de88         db  0x44 ; 'D'
000000000000de89         db  0x0e ; '.'
000000000000de8a         db  0x10 ; '.'
000000000000de8b         db  0x42 ; 'B'
000000000000de8c         db  0x0e ; '.'
000000000000de8d         db  0x08 ; '.'
000000000000de8e         db  0x4a ; 'J'
000000000000de8f         db  0x0b ; '.'
000000000000de90         db  0x44 ; 'D'
000000000000de91         db  0x0e ; '.'
000000000000de92         db  0x18 ; '.'
000000000000de93         db  0x41 ; 'A'
000000000000de94         db  0x0e ; '.'
000000000000de95         db  0x10 ; '.'
000000000000de96         db  0x45 ; 'E'
000000000000de97         db  0x0e ; '.'
000000000000de98         db  0x08 ; '.'
000000000000de99         db  0x00 ; '.'
000000000000de9a         db  0x00 ; '.'
000000000000de9b         db  0x00 ; '.'
000000000000de9c         dd         0x00000010                                  ; Length of the record
000000000000dea0         dd         0x00001390                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000dea4         db         0xbc, 0xb8, 2 dup (0xff)                    ; begin 0x9760
000000000000dea8         db         0x41, 3 dup (0x00)                          ; length 0x41 (end at 0x97a1)
000000000000deac         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dead         db  0x7c ; '|'
000000000000deae         db  0x0e ; '.'
000000000000deaf         db  0x10 ; '.'
000000000000deb0         dd         0x00000030                                  ; Length of the record
000000000000deb4         dd         0x000013a4                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000deb8         db         0xf8, 0xb8, 2 dup (0xff)                    ; begin 0x97b0
000000000000debc         db         0x72, 3 dup (0x00)                          ; length 0x72 (end at 0x9822)
000000000000dec0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dec1         db  0x41 ; 'A'
000000000000dec2         db  0x0e ; '.'
000000000000dec3         db  0x10 ; '.'
000000000000dec4         db  0x86 ; '.'
000000000000dec5         db  0x02 ; '.'
000000000000dec6         db  0x41 ; 'A'
000000000000dec7         db  0x0e ; '.'
000000000000dec8         db  0x18 ; '.'
000000000000dec9         db  0x83 ; '.'
000000000000deca         db  0x03 ; '.'
000000000000decb         db  0x4a ; 'J'
000000000000decc         db  0x0e ; '.'
000000000000decd         db  0x20 ; ' '
000000000000dece         db  0x02 ; '.'
000000000000decf         db  0x53 ; 'S'
000000000000ded0         db  0x0a ; '.'
000000000000ded1         db  0x0e ; '.'
000000000000ded2         db  0x18 ; '.'
000000000000ded3         db  0x41 ; 'A'
000000000000ded4         db  0x0e ; '.'
000000000000ded5         db  0x10 ; '.'
000000000000ded6         db  0x41 ; 'A'
000000000000ded7         db  0x0e ; '.'
000000000000ded8         db  0x08 ; '.'
000000000000ded9         db  0x47 ; 'G'
000000000000deda         db  0x0b ; '.'
000000000000dedb         db  0x47 ; 'G'
000000000000dedc         db  0x0e ; '.'
000000000000dedd         db  0x18 ; '.'
000000000000dede         db  0x41 ; 'A'
000000000000dedf         db  0x0e ; '.'
000000000000dee0         db  0x10 ; '.'
000000000000dee1         db  0x41 ; 'A'
000000000000dee2         db  0x0e ; '.'
000000000000dee3         db  0x08 ; '.'
000000000000dee4         dd         0x00000010                                  ; Length of the record
000000000000dee8         dd         0x000013d8                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000deec         db         0x44, 0xb9, 2 dup (0xff)                    ; begin 0x9830
000000000000def0         db         0x65, 3 dup (0x00)                          ; length 0x65 (end at 0x9895)
000000000000def4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000def5         align      8
000000000000def8         dd         0x00000048                                  ; Length of the record
000000000000defc         dd         0x000013ec                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000df00         db         0xa0, 0xb9, 2 dup (0xff)                    ; begin 0x98a0
000000000000df04         db         0x6a, 3 dup (0x00)                          ; length 0x6a (end at 0x990a)
000000000000df08         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000df09         db  0x42 ; 'B'
000000000000df0a         db  0x0e ; '.'
000000000000df0b         db  0x10 ; '.'
000000000000df0c         db  0x8f ; '.'
000000000000df0d         db  0x02 ; '.'
000000000000df0e         db  0x42 ; 'B'
000000000000df0f         db  0x0e ; '.'
000000000000df10         db  0x18 ; '.'
000000000000df11         db  0x8e ; '.'
000000000000df12         db  0x03 ; '.'
000000000000df13         db  0x42 ; 'B'
000000000000df14         db  0x0e ; '.'
000000000000df15         db  0x20 ; ' '
000000000000df16         db  0x8d ; '.'
000000000000df17         db  0x04 ; '.'
000000000000df18         db  0x42 ; 'B'
000000000000df19         db  0x0e ; '.'
000000000000df1a         db  0x28 ; '('
000000000000df1b         db  0x8c ; '.'
000000000000df1c         db  0x05 ; '.'
000000000000df1d         db  0x41 ; 'A'
000000000000df1e         db  0x0e ; '.'
000000000000df1f         db  0x30 ; '0'
000000000000df20         db  0x86 ; '.'
000000000000df21         db  0x06 ; '.'
000000000000df22         db  0x41 ; 'A'
000000000000df23         db  0x0e ; '.'
000000000000df24         db  0x38 ; '8'
000000000000df25         db  0x83 ; '.'
000000000000df26         db  0x07 ; '.'
000000000000df27         db  0x44 ; 'D'
000000000000df28         db  0x0e ; '.'
000000000000df29         db  0x40 ; '@'
000000000000df2a         db  0x02 ; '.'
000000000000df2b         db  0x4a ; 'J'
000000000000df2c         db  0x0a ; '.'
000000000000df2d         db  0x0e ; '.'
000000000000df2e         db  0x38 ; '8'
000000000000df2f         db  0x44 ; 'D'
000000000000df30         db  0x0e ; '.'
000000000000df31         db  0x30 ; '0'
000000000000df32         db  0x41 ; 'A'
000000000000df33         db  0x0e ; '.'
000000000000df34         db  0x28 ; '('
000000000000df35         db  0x42 ; 'B'
000000000000df36         db  0x0e ; '.'
000000000000df37         db  0x20 ; ' '
000000000000df38         db  0x42 ; 'B'
000000000000df39         db  0x0e ; '.'
000000000000df3a         db  0x18 ; '.'
000000000000df3b         db  0x42 ; 'B'
000000000000df3c         db  0x0e ; '.'
000000000000df3d         db  0x10 ; '.'
000000000000df3e         db  0x42 ; 'B'
000000000000df3f         db  0x0e ; '.'
000000000000df40         db  0x08 ; '.'
000000000000df41         db  0x41 ; 'A'
000000000000df42         db  0x0b ; '.'
000000000000df43         db  0x00 ; '.'
000000000000df44         dd         0x00000010                                  ; Length of the record
000000000000df48         dd         0x00001438                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000df4c         db         0xc4, 0xb9, 2 dup (0xff)                    ; begin 0x9910
000000000000df50         db         0x31, 3 dup (0x00)                          ; length 0x31 (end at 0x9941)
000000000000df54         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000df55         align      8
000000000000df58         dd         0x00000010                                  ; Length of the record
000000000000df5c         dd         0x0000144c                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000df60         db         0xf0, 0xb9, 2 dup (0xff)                    ; begin 0x9950
000000000000df64         db         0x20, 3 dup (0x00)                          ; length 0x20 (end at 0x9970)
000000000000df68         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000df69         align      4
000000000000df6c         dd         0x00000048                                  ; Length of the record
000000000000df70         dd         0x00001460                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000df74         db         0xfc, 0xb9, 2 dup (0xff)                    ; begin 0x9970
000000000000df78         db         0xb4, 0x01, 2 dup (0x00)                    ; length 0x1b4 (end at 0x9b24)
000000000000df7c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000df7d         db  0x42 ; 'B'
000000000000df7e         db  0x0e ; '.'
000000000000df7f         db  0x10 ; '.'
000000000000df80         db  0x8f ; '.'
000000000000df81         db  0x02 ; '.'
000000000000df82         db  0x42 ; 'B'
000000000000df83         db  0x0e ; '.'
000000000000df84         db  0x18 ; '.'
000000000000df85         db  0x8e ; '.'
000000000000df86         db  0x03 ; '.'
000000000000df87         db  0x49 ; 'I'
000000000000df88         db  0x0e ; '.'
000000000000df89         db  0x20 ; ' '
000000000000df8a         db  0x8d ; '.'
000000000000df8b         db  0x04 ; '.'
000000000000df8c         db  0x42 ; 'B'
000000000000df8d         db  0x0e ; '.'
000000000000df8e         db  0x28 ; '('
000000000000df8f         db  0x8c ; '.'
000000000000df90         db  0x05 ; '.'
000000000000df91         db  0x44 ; 'D'
000000000000df92         db  0x0e ; '.'
000000000000df93         db  0x30 ; '0'
000000000000df94         db  0x86 ; '.'
000000000000df95         db  0x06 ; '.'
000000000000df96         db  0x41 ; 'A'
000000000000df97         db  0x0e ; '.'
000000000000df98         db  0x38 ; '8'
000000000000df99         db  0x83 ; '.'
000000000000df9a         db  0x07 ; '.'
000000000000df9b         db  0x52 ; 'R'
000000000000df9c         db  0x0e ; '.'
000000000000df9d         db  0x40 ; '@'
000000000000df9e         db  0x02 ; '.'
000000000000df9f         db  0xd8 ; '.'
000000000000dfa0         db  0x0a ; '.'
000000000000dfa1         db  0x0e ; '.'
000000000000dfa2         db  0x38 ; '8'
000000000000dfa3         db  0x44 ; 'D'
000000000000dfa4         db  0x0e ; '.'
000000000000dfa5         db  0x30 ; '0'
000000000000dfa6         db  0x41 ; 'A'
000000000000dfa7         db  0x0e ; '.'
000000000000dfa8         db  0x28 ; '('
000000000000dfa9         db  0x42 ; 'B'
000000000000dfaa         db  0x0e ; '.'
000000000000dfab         db  0x20 ; ' '
000000000000dfac         db  0x42 ; 'B'
000000000000dfad         db  0x0e ; '.'
000000000000dfae         db  0x18 ; '.'
000000000000dfaf         db  0x42 ; 'B'
000000000000dfb0         db  0x0e ; '.'
000000000000dfb1         db  0x10 ; '.'
000000000000dfb2         db  0x42 ; 'B'
000000000000dfb3         db  0x0e ; '.'
000000000000dfb4         db  0x08 ; '.'
000000000000dfb5         db  0x45 ; 'E'
000000000000dfb6         db  0x0b ; '.'
000000000000dfb7         db  0x00 ; '.'
000000000000dfb8         dd         0x00000028                                  ; Length of the record
000000000000dfbc         dd         0x000014ac                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000dfc0         db         0x70, 0xbb, 2 dup (0xff)                    ; begin 0x9b30
000000000000dfc4         db         0x90, 3 dup (0x00)                          ; length 0x90 (end at 0x9bc0)
000000000000dfc8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dfc9         db  0x42 ; 'B'
000000000000dfca         db  0x0e ; '.'
000000000000dfcb         db  0x10 ; '.'
000000000000dfcc         db  0x8c ; '.'
000000000000dfcd         db  0x02 ; '.'
000000000000dfce         db  0x41 ; 'A'
000000000000dfcf         db  0x0e ; '.'
000000000000dfd0         db  0x18 ; '.'
000000000000dfd1         db  0x86 ; '.'
000000000000dfd2         db  0x03 ; '.'
000000000000dfd3         db  0x44 ; 'D'
000000000000dfd4         db  0x0e ; '.'
000000000000dfd5         db  0x20 ; ' '
000000000000dfd6         db  0x83 ; '.'
000000000000dfd7         db  0x04 ; '.'
000000000000dfd8         db  0x02 ; '.'
000000000000dfd9         db  0x85 ; '.'
000000000000dfda         db  0x0e ; '.'
000000000000dfdb         db  0x18 ; '.'
000000000000dfdc         db  0x41 ; 'A'
000000000000dfdd         db  0x0e ; '.'
000000000000dfde         db  0x10 ; '.'
000000000000dfdf         db  0x42 ; 'B'
000000000000dfe0         db  0x0e ; '.'
000000000000dfe1         db  0x08 ; '.'
000000000000dfe2         db  0x00 ; '.'
000000000000dfe3         db  0x00 ; '.'
000000000000dfe4         dd         0x00000028                                  ; Length of the record
000000000000dfe8         dd         0x000014d8                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000dfec         db         0xd4, 0xbb, 2 dup (0xff)                    ; begin 0x9bc0
000000000000dff0         db         0xd6, 3 dup (0x00)                          ; length 0xd6 (end at 0x9c96)
000000000000dff4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dff5         db  0x42 ; 'B'
000000000000dff6         db  0x0e ; '.'
000000000000dff7         db  0x10 ; '.'
000000000000dff8         db  0x8c ; '.'
000000000000dff9         db  0x02 ; '.'
000000000000dffa         db  0x41 ; 'A'
000000000000dffb         db  0x0e ; '.'
000000000000dffc         db  0x18 ; '.'
000000000000dffd         db  0x86 ; '.'
000000000000dffe         db  0x03 ; '.'
000000000000dfff         db  0x44 ; 'D'
000000000000e000         db  0x0e ; '.'
000000000000e001         db  0x20 ; ' '
000000000000e002         db  0x83 ; '.'
000000000000e003         db  0x04 ; '.'
000000000000e004         db  0x02 ; '.'
000000000000e005         db  0xc4 ; '.'
000000000000e006         db  0x0e ; '.'
000000000000e007         db  0x18 ; '.'
000000000000e008         db  0x44 ; 'D'
000000000000e009         db  0x0e ; '.'
000000000000e00a         db  0x10 ; '.'
000000000000e00b         db  0x42 ; 'B'
000000000000e00c         db  0x0e ; '.'
000000000000e00d         db  0x08 ; '.'
000000000000e00e         db  0x00 ; '.'
000000000000e00f         db  0x00 ; '.'
000000000000e010         dd         0x00000034                                  ; Length of the record
000000000000e014         dd         0x00001504                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000e018         db         0x88, 0xbc, 2 dup (0xff)                    ; begin 0x9ca0
000000000000e01c         db         0x3e, 0x02, 2 dup (0x00)                    ; length 0x23e (end at 0x9ede)
000000000000e020         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e021         db  0x42 ; 'B'
000000000000e022         db  0x0e ; '.'
000000000000e023         db  0x10 ; '.'
000000000000e024         db  0x8c ; '.'
000000000000e025         db  0x02 ; '.'
000000000000e026         db  0x41 ; 'A'
000000000000e027         db  0x0e ; '.'
000000000000e028         db  0x18 ; '.'
000000000000e029         db  0x86 ; '.'
000000000000e02a         db  0x03 ; '.'
000000000000e02b         db  0x44 ; 'D'
000000000000e02c         db  0x0e ; '.'
000000000000e02d         db  0x20 ; ' '
000000000000e02e         db  0x83 ; '.'
000000000000e02f         db  0x04 ; '.'
000000000000e030         db  0x44 ; 'D'
000000000000e031         db  0x0e ; '.'
000000000000e032         db  0x80 ; '.'
000000000000e033         db  0x01 ; '.'
000000000000e034         db  0x03 ; '.'
000000000000e035         db  0x91 ; '.'
000000000000e036         db  0x01 ; '.'
000000000000e037         db  0x0a ; '.'
000000000000e038         db  0x0e ; '.'
000000000000e039         db  0x20 ; ' '
000000000000e03a         db  0x41 ; 'A'
000000000000e03b         db  0x0e ; '.'
000000000000e03c         db  0x18 ; '.'
000000000000e03d         db  0x41 ; 'A'
000000000000e03e         db  0x0e ; '.'
000000000000e03f         db  0x10 ; '.'
000000000000e040         db  0x42 ; 'B'
000000000000e041         db  0x0e ; '.'
000000000000e042         db  0x08 ; '.'
000000000000e043         db  0x48 ; 'H'
000000000000e044         db  0x0b ; '.'
000000000000e045         db  0x00 ; '.'
000000000000e046         db  0x00 ; '.'
000000000000e047         db  0x00 ; '.'
000000000000e048         dd         0x00000038                                  ; Length of the record
000000000000e04c         dd         0x0000153c                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000e050         db         0x90, 0xbe, 2 dup (0xff)                    ; begin 0x9ee0
000000000000e054         db         0x84, 0x02, 2 dup (0x00)                    ; length 0x284 (end at 0xa164)
000000000000e058         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e059         db  0x42 ; 'B'
000000000000e05a         db  0x0e ; '.'
000000000000e05b         db  0x10 ; '.'
000000000000e05c         db  0x8d ; '.'
000000000000e05d         db  0x02 ; '.'
000000000000e05e         db  0x42 ; 'B'
000000000000e05f         db  0x0e ; '.'
000000000000e060         db  0x18 ; '.'
000000000000e061         db  0x8c ; '.'
000000000000e062         db  0x03 ; '.'
000000000000e063         db  0x41 ; 'A'
000000000000e064         db  0x0e ; '.'
000000000000e065         db  0x20 ; ' '
000000000000e066         db  0x86 ; '.'
000000000000e067         db  0x04 ; '.'
000000000000e068         db  0x41 ; 'A'
000000000000e069         db  0x0e ; '.'
000000000000e06a         db  0x28 ; '('
000000000000e06b         db  0x83 ; '.'
000000000000e06c         db  0x05 ; '.'
000000000000e06d         db  0x44 ; 'D'
000000000000e06e         db  0x0e ; '.'
000000000000e06f         db  0x40 ; '@'
000000000000e070         db  0x02 ; '.'
000000000000e071         db  0x5a ; 'Z'
000000000000e072         db  0x0a ; '.'
000000000000e073         db  0x0e ; '.'
000000000000e074         db  0x28 ; '('
000000000000e075         db  0x41 ; 'A'
000000000000e076         db  0x0e ; '.'
000000000000e077         db  0x20 ; ' '
000000000000e078         db  0x41 ; 'A'
000000000000e079         db  0x0e ; '.'
000000000000e07a         db  0x18 ; '.'
000000000000e07b         db  0x42 ; 'B'
000000000000e07c         db  0x0e ; '.'
000000000000e07d         db  0x10 ; '.'
000000000000e07e         db  0x42 ; 'B'
000000000000e07f         db  0x0e ; '.'
000000000000e080         db  0x08 ; '.'
000000000000e081         db  0x46 ; 'F'
000000000000e082         db  0x0b ; '.'
000000000000e083         db  0x00 ; '.'
000000000000e084         dd         0x00000020                                  ; Length of the record
000000000000e088         dd         0x00001578                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000e08c         db         0xe4, 0xc0, 2 dup (0xff)                    ; begin 0xa170
000000000000e090         db         0x59, 3 dup (0x00)                          ; length 0x59 (end at 0xa1c9)
000000000000e094         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e095         db  0x41 ; 'A'
000000000000e096         db  0x0e ; '.'
000000000000e097         db  0x10 ; '.'
000000000000e098         db  0x83 ; '.'
000000000000e099         db  0x02 ; '.'
000000000000e09a         db  0x47 ; 'G'
000000000000e09b         db  0x0e ; '.'
000000000000e09c         db  0x20 ; ' '
000000000000e09d         db  0x7c ; '|'
000000000000e09e         db  0x0a ; '.'
000000000000e09f         db  0x0e ; '.'
000000000000e0a0         db  0x10 ; '.'
000000000000e0a1         db  0x41 ; 'A'
000000000000e0a2         db  0x0e ; '.'
000000000000e0a3         db  0x08 ; '.'
000000000000e0a4         db  0x4b ; 'K'
000000000000e0a5         db  0x0b ; '.'
000000000000e0a6         db  0x00 ; '.'
000000000000e0a7         db  0x00 ; '.'
000000000000e0a8         dd         0x00000034                                  ; Length of the record
000000000000e0ac         dd         0x0000159c                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000e0b0         db         0x20, 0xc1, 2 dup (0xff)                    ; begin 0xa1d0
000000000000e0b4         db         0x03, 0x02, 2 dup (0x00)                    ; length 0x203 (end at 0xa3d3)
000000000000e0b8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e0b9         db  0x42 ; 'B'
000000000000e0ba         db  0x0e ; '.'
000000000000e0bb         db  0x10 ; '.'
000000000000e0bc         db  0x8c ; '.'
000000000000e0bd         db  0x02 ; '.'
000000000000e0be         db  0x41 ; 'A'
000000000000e0bf         db  0x0e ; '.'
000000000000e0c0         db  0x18 ; '.'
000000000000e0c1         db  0x86 ; '.'
000000000000e0c2         db  0x03 ; '.'
000000000000e0c3         db  0x46 ; 'F'
000000000000e0c4         db  0x0e ; '.'
000000000000e0c5         db  0x20 ; ' '
000000000000e0c6         db  0x83 ; '.'
000000000000e0c7         db  0x04 ; '.'
000000000000e0c8         db  0x47 ; 'G'
000000000000e0c9         db  0x0e ; '.'
000000000000e0ca         db  0x30 ; '0'
000000000000e0cb         db  0x02 ; '.'
000000000000e0cc         db  0x4a ; 'J'
000000000000e0cd         db  0x0a ; '.'
000000000000e0ce         db  0x0e ; '.'
000000000000e0cf         db  0x20 ; ' '
000000000000e0d0         db  0x41 ; 'A'
000000000000e0d1         db  0x0e ; '.'
000000000000e0d2         db  0x18 ; '.'
000000000000e0d3         db  0x41 ; 'A'
000000000000e0d4         db  0x0e ; '.'
000000000000e0d5         db  0x10 ; '.'
000000000000e0d6         db  0x42 ; 'B'
000000000000e0d7         db  0x0e ; '.'
000000000000e0d8         db  0x08 ; '.'
000000000000e0d9         db  0x42 ; 'B'
000000000000e0da         db  0x0b ; '.'
000000000000e0db         db  0x00 ; '.'
000000000000e0dc         db  0x00 ; '.'
000000000000e0dd         db  0x00 ; '.'
000000000000e0de         db  0x00 ; '.'
000000000000e0df         db  0x00 ; '.'
000000000000e0e0         dd         0x00000010                                  ; Length of the record
000000000000e0e4         dd         0x000015d4                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000e0e8         db         0xf8, 0xc2, 2 dup (0xff)                    ; begin 0xa3e0
000000000000e0ec         db         0x1b, 3 dup (0x00)                          ; length 0x1b (end at 0xa3fb)
000000000000e0f0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e0f1         align      4
000000000000e0f4         dd         0x00000010                                  ; Length of the record
000000000000e0f8         dd         0x000015e8                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000e0fc         db         0x04, 0xc3, 2 dup (0xff)                    ; begin 0xa400
000000000000e100         db         0x05, 3 dup (0x00)                          ; length 0x5 (end at 0xa405)
000000000000e104         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e105         align      8
000000000000e108         dd         0x00000010                                  ; Length of the record
000000000000e10c         dd         0x000015fc                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000e110         db         0x00, 0xc3, 2 dup (0xff)                    ; begin 0xa410
000000000000e114         db         0x35, 3 dup (0x00)                          ; length 0x35 (end at 0xa445)
000000000000e118         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e119         align      4
000000000000e11c         dd         0x00000010                                  ; Length of the record
000000000000e120         dd         0x00001610                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000e124         db         0x2c, 0xc3, 2 dup (0xff)                    ; begin 0xa450
000000000000e128         db         0x3e, 3 dup (0x00)                          ; length 0x3e (end at 0xa48e)
000000000000e12c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e12d         db  0x79 ; 'y'
000000000000e12e         db  0x0e ; '.'
000000000000e12f         db  0x10 ; '.'
000000000000e130         dd         0x0000001c                                  ; Length of the record
000000000000e134         dd         0x00001624                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000e138         db         0x58, 0xc3, 2 dup (0xff)                    ; begin 0xa490
000000000000e13c         db         0x3c, 3 dup (0x00)                          ; length 0x3c (end at 0xa4cc)
000000000000e140         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e141         db  0x44 ; 'D'
000000000000e142         db  0x0e ; '.'
000000000000e143         db  0x10 ; '.'
000000000000e144         db  0x61 ; 'a'
000000000000e145         db  0x0a ; '.'
000000000000e146         db  0x0e ; '.'
000000000000e147         db  0x08 ; '.'
000000000000e148         db  0x4b ; 'K'
000000000000e149         db  0x0b ; '.'
000000000000e14a         db  0x4b ; 'K'
000000000000e14b         db  0x0e ; '.'
000000000000e14c         db  0x08 ; '.'
000000000000e14d         db  0x00 ; '.'
000000000000e14e         db  0x00 ; '.'
000000000000e14f         db  0x00 ; '.'
000000000000e150         dd         0x0000001c                                  ; Length of the record
000000000000e154         dd         0x00001644                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000e158         db         0x78, 0xc3, 2 dup (0xff)                    ; begin 0xa4d0
000000000000e15c         db         0x6e, 3 dup (0x00)                          ; length 0x6e (end at 0xa53e)
000000000000e160         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e161         db  0x44 ; 'D'
000000000000e162         db  0x0e ; '.'
000000000000e163         db  0x60 ; '`'
000000000000e164         db  0x7e ; '~'
000000000000e165         db  0x0a ; '.'
000000000000e166         db  0x0e ; '.'
000000000000e167         db  0x08 ; '.'
000000000000e168         db  0x46 ; 'F'
000000000000e169         db  0x0b ; '.'
000000000000e16a         db  0x00 ; '.'
000000000000e16b         db  0x00 ; '.'
000000000000e16c         db  0x00 ; '.'
000000000000e16d         db  0x00 ; '.'
000000000000e16e         db  0x00 ; '.'
000000000000e16f         db  0x00 ; '.'
000000000000e170         dd         0x0000005c                                  ; Length of the record
000000000000e174         dd         0x00001664                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000e178         db         0xc8, 0xc3, 2 dup (0xff)                    ; begin 0xa540
000000000000e17c         db         0x80, 3 dup (0x00)                          ; length 0x80 (end at 0xa5c0)
000000000000e180         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e181         db  0x42 ; 'B'
000000000000e182         db  0x0e ; '.'
000000000000e183         db  0x10 ; '.'
000000000000e184         db  0x8d ; '.'
000000000000e185         db  0x02 ; '.'
000000000000e186         db  0x42 ; 'B'
000000000000e187         db  0x0e ; '.'
000000000000e188         db  0x18 ; '.'
000000000000e189         db  0x8c ; '.'
000000000000e18a         db  0x03 ; '.'
000000000000e18b         db  0x47 ; 'G'
000000000000e18c         db  0x0e ; '.'
000000000000e18d         db  0x20 ; ' '
000000000000e18e         db  0x86 ; '.'
000000000000e18f         db  0x04 ; '.'
000000000000e190         db  0x41 ; 'A'
000000000000e191         db  0x0e ; '.'
000000000000e192         db  0x28 ; '('
000000000000e193         db  0x83 ; '.'
000000000000e194         db  0x05 ; '.'
000000000000e195         db  0x49 ; 'I'
000000000000e196         db  0x0e ; '.'
000000000000e197         db  0x30 ; '0'
000000000000e198         db  0x62 ; 'b'
000000000000e199         db  0x0a ; '.'
000000000000e19a         db  0x0e ; '.'
000000000000e19b         db  0x28 ; '('
000000000000e19c         db  0x44 ; 'D'
000000000000e19d         db  0x0e ; '.'
000000000000e19e         db  0x20 ; ' '
000000000000e19f         db  0x41 ; 'A'
000000000000e1a0         db  0x0e ; '.'
000000000000e1a1         db  0x18 ; '.'
000000000000e1a2         db  0x42 ; 'B'
000000000000e1a3         db  0x0e ; '.'
000000000000e1a4         db  0x10 ; '.'
000000000000e1a5         db  0x42 ; 'B'
000000000000e1a6         db  0x0e ; '.'
000000000000e1a7         db  0x08 ; '.'
000000000000e1a8         db  0x48 ; 'H'
000000000000e1a9         db  0x0b ; '.'
000000000000e1aa         db  0x5d ; ']'
000000000000e1ab         db  0x0a ; '.'
000000000000e1ac         db  0x0e ; '.'
000000000000e1ad         db  0x28 ; '('
000000000000e1ae         db  0x41 ; 'A'
000000000000e1af         db  0x0e ; '.'
000000000000e1b0         db  0x20 ; ' '
000000000000e1b1         db  0x41 ; 'A'
000000000000e1b2         db  0x0e ; '.'
000000000000e1b3         db  0x18 ; '.'
000000000000e1b4         db  0x42 ; 'B'
000000000000e1b5         db  0x0e ; '.'
000000000000e1b6         db  0x10 ; '.'
000000000000e1b7         db  0x42 ; 'B'
000000000000e1b8         db  0x0e ; '.'
000000000000e1b9         db  0x08 ; '.'
000000000000e1ba         db  0x45 ; 'E'
000000000000e1bb         db  0x0b ; '.'
000000000000e1bc         db  0x44 ; 'D'
000000000000e1bd         db  0x0e ; '.'
000000000000e1be         db  0x28 ; '('
000000000000e1bf         db  0x43 ; 'C'
000000000000e1c0         db  0x0e ; '.'
000000000000e1c1         db  0x20 ; ' '
000000000000e1c2         db  0x44 ; 'D'
000000000000e1c3         db  0x0e ; '.'
000000000000e1c4         db  0x18 ; '.'
000000000000e1c5         db  0x42 ; 'B'
000000000000e1c6         db  0x0e ; '.'
000000000000e1c7         db  0x10 ; '.'
000000000000e1c8         db  0x42 ; 'B'
000000000000e1c9         db  0x0e ; '.'
000000000000e1ca         db  0x08 ; '.'
000000000000e1cb         db  0x00 ; '.'
000000000000e1cc         db  0x00 ; '.'
000000000000e1cd         db  0x00 ; '.'
000000000000e1ce         db  0x00 ; '.'
000000000000e1cf         db  0x00 ; '.'
000000000000e1d0         dd         0x00000034                                  ; Length of the record
000000000000e1d4         dd         0x000016c4                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000e1d8         db         0xe8, 0xc3, 2 dup (0xff)                    ; begin 0xa5c0
000000000000e1dc         db         0x3f, 3 dup (0x00)                          ; length 0x3f (end at 0xa5ff)
000000000000e1e0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e1e1         db  0x42 ; 'B'
000000000000e1e2         db  0x0e ; '.'
000000000000e1e3         db  0x10 ; '.'
000000000000e1e4         db  0x8d ; '.'
000000000000e1e5         db  0x02 ; '.'
000000000000e1e6         db  0x42 ; 'B'
000000000000e1e7         db  0x0e ; '.'
000000000000e1e8         db  0x18 ; '.'
000000000000e1e9         db  0x8c ; '.'
000000000000e1ea         db  0x03 ; '.'
000000000000e1eb         db  0x41 ; 'A'
000000000000e1ec         db  0x0e ; '.'
000000000000e1ed         db  0x20 ; ' '
000000000000e1ee         db  0x86 ; '.'
000000000000e1ef         db  0x04 ; '.'
000000000000e1f0         db  0x41 ; 'A'
000000000000e1f1         db  0x0e ; '.'
000000000000e1f2         db  0x28 ; '('
000000000000e1f3         db  0x83 ; '.'
000000000000e1f4         db  0x05 ; '.'
000000000000e1f5         db  0x46 ; 'F'
000000000000e1f6         db  0x0e ; '.'
000000000000e1f7         db  0x30 ; '0'
000000000000e1f8         db  0x6a ; 'j'
000000000000e1f9         db  0x0e ; '.'
000000000000e1fa         db  0x28 ; '('
000000000000e1fb         db  0x43 ; 'C'
000000000000e1fc         db  0x0e ; '.'
000000000000e1fd         db  0x20 ; ' '
000000000000e1fe         db  0x41 ; 'A'
000000000000e1ff         db  0x0e ; '.'
000000000000e200         db  0x18 ; '.'
000000000000e201         db  0x42 ; 'B'
000000000000e202         db  0x0e ; '.'
000000000000e203         db  0x10 ; '.'
000000000000e204         db  0x42 ; 'B'
000000000000e205         db  0x0e ; '.'
000000000000e206         db  0x08 ; '.'
000000000000e207         db  0x00 ; '.'
000000000000e208         dd         0x00000034                                  ; Length of the record
000000000000e20c         dd         0x000016fc                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000e210         db         0xf0, 0xc3, 2 dup (0xff)                    ; begin 0xa600
000000000000e214         db         0x7b, 3 dup (0x00)                          ; length 0x7b (end at 0xa67b)
000000000000e218         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e219         db  0x42 ; 'B'
000000000000e21a         db  0x0e ; '.'
000000000000e21b         db  0x10 ; '.'
000000000000e21c         db  0x8c ; '.'
000000000000e21d         db  0x02 ; '.'
000000000000e21e         db  0x41 ; 'A'
000000000000e21f         db  0x0e ; '.'
000000000000e220         db  0x18 ; '.'
000000000000e221         db  0x86 ; '.'
000000000000e222         db  0x03 ; '.'
000000000000e223         db  0x41 ; 'A'
000000000000e224         db  0x0e ; '.'
000000000000e225         db  0x20 ; ' '
000000000000e226         db  0x83 ; '.'
000000000000e227         db  0x04 ; '.'
000000000000e228         db  0x7d ; '}'
000000000000e229         db  0x0a ; '.'
000000000000e22a         db  0x0e ; '.'
000000000000e22b         db  0x18 ; '.'
000000000000e22c         db  0x41 ; 'A'
000000000000e22d         db  0x0e ; '.'
000000000000e22e         db  0x10 ; '.'
000000000000e22f         db  0x42 ; 'B'
000000000000e230         db  0x0e ; '.'
000000000000e231         db  0x08 ; '.'
000000000000e232         db  0x44 ; 'D'
000000000000e233         db  0x0b ; '.'
000000000000e234         db  0x60 ; '`'
000000000000e235         db  0x0a ; '.'
000000000000e236         db  0x0e ; '.'
000000000000e237         db  0x18 ; '.'
000000000000e238         db  0x41 ; 'A'
000000000000e239         db  0x0e ; '.'
000000000000e23a         db  0x10 ; '.'
000000000000e23b         db  0x42 ; 'B'
000000000000e23c         db  0x0e ; '.'
000000000000e23d         db  0x08 ; '.'
000000000000e23e         db  0x45 ; 'E'
000000000000e23f         db  0x0b ; '.'
000000000000e240         dd         0x00000034                                  ; Length of the record
000000000000e244         dd         0x00001734                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000e248         db         0x38, 0xc4, 2 dup (0xff)                    ; begin 0xa680
000000000000e24c         db         0x7e, 0x02, 2 dup (0x00)                    ; length 0x27e (end at 0xa8fe)
000000000000e250         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e251         db  0x42 ; 'B'
000000000000e252         db  0x0e ; '.'
000000000000e253         db  0x10 ; '.'
000000000000e254         db  0x8c ; '.'
000000000000e255         db  0x02 ; '.'
000000000000e256         db  0x41 ; 'A'
000000000000e257         db  0x0e ; '.'
000000000000e258         db  0x18 ; '.'
000000000000e259         db  0x86 ; '.'
000000000000e25a         db  0x03 ; '.'
000000000000e25b         db  0x43 ; 'C'
000000000000e25c         db  0x0e ; '.'
000000000000e25d         db  0x20 ; ' '
000000000000e25e         db  0x83 ; '.'
000000000000e25f         db  0x04 ; '.'
000000000000e260         db  0x44 ; 'D'
000000000000e261         db  0x0e ; '.'
000000000000e262         db  0x70 ; 'p'
000000000000e263         db  0x02 ; '.'
000000000000e264         db  0xf0 ; '.'
000000000000e265         db  0x0a ; '.'
000000000000e266         db  0x0e ; '.'
000000000000e267         db  0x20 ; ' '
000000000000e268         db  0x41 ; 'A'
000000000000e269         db  0x0e ; '.'
000000000000e26a         db  0x18 ; '.'
000000000000e26b         db  0x41 ; 'A'
000000000000e26c         db  0x0e ; '.'
000000000000e26d         db  0x10 ; '.'
000000000000e26e         db  0x42 ; 'B'
000000000000e26f         db  0x0e ; '.'
000000000000e270         db  0x08 ; '.'
000000000000e271         db  0x42 ; 'B'
000000000000e272         db  0x0b ; '.'
000000000000e273         db  0x00 ; '.'
000000000000e274         db  0x00 ; '.'
000000000000e275         db  0x00 ; '.'
000000000000e276         db  0x00 ; '.'
000000000000e277         db  0x00 ; '.'
000000000000e278         dd         0x0000001c                                  ; Length of the record
000000000000e27c         dd         0x0000176c                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000e280         db         0x80, 0xc6, 2 dup (0xff)                    ; begin 0xa900
000000000000e284         db         0x40, 3 dup (0x00)                          ; length 0x40 (end at 0xa940)
000000000000e288         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e289         db  0x44 ; 'D'
000000000000e28a         db  0x0e ; '.'
000000000000e28b         db  0x10 ; '.'
000000000000e28c         db  0x83 ; '.'
000000000000e28d         db  0x02 ; '.'
000000000000e28e         db  0x5a ; 'Z'
000000000000e28f         db  0x0a ; '.'
000000000000e290         db  0x0e ; '.'
000000000000e291         db  0x08 ; '.'
000000000000e292         db  0x4a ; 'J'
000000000000e293         db  0x0b ; '.'
000000000000e294         db  0x53 ; 'S'
000000000000e295         db  0x0e ; '.'
000000000000e296         db  0x08 ; '.'
000000000000e297         db  0x00 ; '.'
000000000000e298         dd         0x0000002c                                  ; Length of the record
000000000000e29c         dd         0x0000178c                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000e2a0         db         0xa0, 0xc6, 2 dup (0xff)                    ; begin 0xa940
000000000000e2a4         db         0x57, 3 dup (0x00)                          ; length 0x57 (end at 0xa997)
000000000000e2a8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e2a9         db  0x63 ; 'c'
000000000000e2aa         db  0x0e ; '.'
000000000000e2ab         db  0x10 ; '.'
000000000000e2ac         db  0x8c ; '.'
000000000000e2ad         db  0x02 ; '.'
000000000000e2ae         db  0x41 ; 'A'
000000000000e2af         db  0x0e ; '.'
000000000000e2b0         db  0x18 ; '.'
000000000000e2b1         db  0x86 ; '.'
000000000000e2b2         db  0x03 ; '.'
000000000000e2b3         db  0x44 ; 'D'
000000000000e2b4         db  0x0e ; '.'
000000000000e2b5         db  0x20 ; ' '
000000000000e2b6         db  0x83 ; '.'
000000000000e2b7         db  0x04 ; '.'
000000000000e2b8         db  0x6b ; 'k'
000000000000e2b9         db  0x0e ; '.'
000000000000e2ba         db  0x18 ; '.'
000000000000e2bb         db  0x41 ; 'A'
000000000000e2bc         db  0x0e ; '.'
000000000000e2bd         db  0x10 ; '.'
000000000000e2be         db  0x42 ; 'B'
000000000000e2bf         db  0x0e ; '.'
000000000000e2c0         db  0x08 ; '.'
000000000000e2c1         db  0x00 ; '.'
000000000000e2c2         db  0x00 ; '.'
000000000000e2c3         db  0x00 ; '.'
000000000000e2c4         db  0x00 ; '.'
000000000000e2c5         db  0x00 ; '.'
000000000000e2c6         db  0x00 ; '.'
000000000000e2c7         db  0x00 ; '.'
000000000000e2c8         dd         0x00000014                                  ; Length of the record
000000000000e2cc         dd         0x000017bc                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000e2d0         db         0xd0, 0xc6, 2 dup (0xff)                    ; begin 0xa9a0
000000000000e2d4         db         0x0e, 3 dup (0x00)                          ; length 0xe (end at 0xa9ae)
000000000000e2d8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e2d9         align      32
000000000000e2e0         dd         0x00000044                                  ; Length of the record
000000000000e2e4         dd         0x000017d4                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000e2e8         db         0xc8, 0xc6, 2 dup (0xff)                    ; begin 0xa9b0
000000000000e2ec         db         0x65, 3 dup (0x00)                          ; length 0x65 (end at 0xaa15)
000000000000e2f0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e2f1         db  0x42 ; 'B'
000000000000e2f2         db  0x0e ; '.'
000000000000e2f3         db  0x10 ; '.'
000000000000e2f4         db  0x8f ; '.'
000000000000e2f5         db  0x02 ; '.'
000000000000e2f6         db  0x42 ; 'B'
000000000000e2f7         db  0x0e ; '.'
000000000000e2f8         db  0x18 ; '.'
000000000000e2f9         db  0x8e ; '.'
000000000000e2fa         db  0x03 ; '.'
000000000000e2fb         db  0x45 ; 'E'
000000000000e2fc         db  0x0e ; '.'
000000000000e2fd         db  0x20 ; ' '
000000000000e2fe         db  0x8d ; '.'
000000000000e2ff         db  0x04 ; '.'
000000000000e300         db  0x42 ; 'B'
000000000000e301         db  0x0e ; '.'
000000000000e302         db  0x28 ; '('
000000000000e303         db  0x8c ; '.'
000000000000e304         db  0x05 ; '.'
000000000000e305         db  0x48 ; 'H'
000000000000e306         db  0x0e ; '.'
000000000000e307         db  0x30 ; '0'
000000000000e308         db  0x86 ; '.'
000000000000e309         db  0x06 ; '.'
000000000000e30a         db  0x48 ; 'H'
000000000000e30b         db  0x0e ; '.'
000000000000e30c         db  0x38 ; '8'
000000000000e30d         db  0x83 ; '.'
000000000000e30e         db  0x07 ; '.'
000000000000e30f         db  0x4d ; 'M'
000000000000e310         db  0x0e ; '.'
000000000000e311         db  0x40 ; '@'
000000000000e312         db  0x72 ; 'r'
000000000000e313         db  0x0e ; '.'
000000000000e314         db  0x38 ; '8'
000000000000e315         db  0x41 ; 'A'
000000000000e316         db  0x0e ; '.'
000000000000e317         db  0x30 ; '0'
000000000000e318         db  0x41 ; 'A'
000000000000e319         db  0x0e ; '.'
000000000000e31a         db  0x28 ; '('
000000000000e31b         db  0x42 ; 'B'
000000000000e31c         db  0x0e ; '.'
000000000000e31d         db  0x20 ; ' '
000000000000e31e         db  0x42 ; 'B'
000000000000e31f         db  0x0e ; '.'
000000000000e320         db  0x18 ; '.'
000000000000e321         db  0x42 ; 'B'
000000000000e322         db  0x0e ; '.'
000000000000e323         db  0x10 ; '.'
000000000000e324         db  0x42 ; 'B'
000000000000e325         db  0x0e ; '.'
000000000000e326         db  0x08 ; '.'
000000000000e327         db  0x00 ; '.'
000000000000e328         dd         0x00000014                                  ; Length of the record
000000000000e32c         dd         0x0000181c                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000e330         db         0xf0, 0xc6, 2 dup (0xff)                    ; begin 0xaa20
000000000000e334         db         0x02, 3 dup (0x00)                          ; length 0x2 (end at 0xaa22)
000000000000e338         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e339         align      64
000000000000e340         dd         0x00000010                                  ; Length of the record
000000000000e344         dd         0x00001834                                  ; FDE: parent CIE at 0xcb10 (FDE encoding = 0x1B)
000000000000e348         db         0xe8, 0xc6, 2 dup (0xff)                    ; begin 0xaa30
000000000000e34c         db         0x0e, 3 dup (0x00)                          ; length 0xe (end at 0xaa3e)
000000000000e350         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e351         align      8


        ; Segment Segment 3
        ; Range: [0x20e970; 0x20f240[ (2256 bytes)
        ; File offset : [59760; 61568[ (1808 bytes)
        ; Permissions: readable / writable
        ; Flags: 0x6



        ; Section .init_array
        ; Range: [0x20e970; 0x20e978[ (8 bytes)
        ; File offset : [59760; 59768[ (8 bytes)
        ; Flags: 0x3
        ;   SHT_FINI_ARRAY
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     __frame_dummy_init_array_entry:
000000000020e970         dq         frame_dummy                                 ; DATA XREF=__libc_csu_init+11


        ; Section .fini_array
        ; Range: [0x20e978; 0x20e980[ (8 bytes)
        ; File offset : [59768; 59776[ (8 bytes)
        ; Flags: 0x3
        ;   SHT_PREINIT_ARRAY
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     __do_global_dtors_aux_fini_array_entry:
000000000020e978         dq         __do_global_dtors_aux                       ; DATA XREF=__libc_csu_init+19


        ; Section .data.rel.ro
        ; Range: [0x20e980; 0x20eb98[ (536 bytes)
        ; File offset : [59776; 60312[ (536 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     long_options:
000000000020e980         db  0x7b ; '{'                                         ; DATA XREF=main+192
000000000020e981         db  0xab ; '.'
000000000020e982         db  0x00 ; '.'
000000000020e983         db  0x00 ; '.'
000000000020e984         db  0x00 ; '.'
000000000020e985         db  0x00 ; '.'
000000000020e986         db  0x00 ; '.'
000000000020e987         db  0x00 ; '.'
000000000020e988         db  0x00 ; '.'
000000000020e989         db  0x00 ; '.'
000000000020e98a         db  0x00 ; '.'
000000000020e98b         db  0x00 ; '.'
000000000020e98c         db  0x00 ; '.'
000000000020e98d         db  0x00 ; '.'
000000000020e98e         db  0x00 ; '.'
000000000020e98f         db  0x00 ; '.'
000000000020e990         db  0x00 ; '.'
000000000020e991         db  0x00 ; '.'
000000000020e992         db  0x00 ; '.'
000000000020e993         db  0x00 ; '.'
000000000020e994         db  0x00 ; '.'
000000000020e995         db  0x00 ; '.'
000000000020e996         db  0x00 ; '.'
000000000020e997         db  0x00 ; '.'
000000000020e998         db  0x52 ; 'R'
000000000020e999         db  0x00 ; '.'
000000000020e99a         db  0x00 ; '.'
000000000020e99b         db  0x00 ; '.'
000000000020e99c         db  0x00 ; '.'
000000000020e99d         db  0x00 ; '.'
000000000020e99e         db  0x00 ; '.'
000000000020e99f         db  0x00 ; '.'
000000000020e9a0         db  0x85 ; '.'
000000000020e9a1         db  0xab ; '.'
000000000020e9a2         db  0x00 ; '.'
000000000020e9a3         db  0x00 ; '.'
000000000020e9a4         db  0x00 ; '.'
000000000020e9a5         db  0x00 ; '.'
000000000020e9a6         db  0x00 ; '.'
000000000020e9a7         db  0x00 ; '.'
000000000020e9a8         db  0x00 ; '.'
000000000020e9a9         db  0x00 ; '.'
000000000020e9aa         db  0x00 ; '.'
000000000020e9ab         db  0x00 ; '.'
000000000020e9ac         db  0x00 ; '.'
000000000020e9ad         db  0x00 ; '.'
000000000020e9ae         db  0x00 ; '.'
000000000020e9af         db  0x00 ; '.'
000000000020e9b0         db  0x00 ; '.'
000000000020e9b1         db  0x00 ; '.'
000000000020e9b2         db  0x00 ; '.'
000000000020e9b3         db  0x00 ; '.'
000000000020e9b4         db  0x00 ; '.'
000000000020e9b5         db  0x00 ; '.'
000000000020e9b6         db  0x00 ; '.'
000000000020e9b7         db  0x00 ; '.'
000000000020e9b8         db  0x63 ; 'c'
000000000020e9b9         db  0x00 ; '.'
000000000020e9ba         db  0x00 ; '.'
000000000020e9bb         db  0x00 ; '.'
000000000020e9bc         db  0x00 ; '.'
000000000020e9bd         db  0x00 ; '.'
000000000020e9be         db  0x00 ; '.'
000000000020e9bf         db  0x00 ; '.'
000000000020e9c0         db  0x95 ; '.'
000000000020e9c1         db  0xab ; '.'
000000000020e9c2         db  0x00 ; '.'
000000000020e9c3         db  0x00 ; '.'
000000000020e9c4         db  0x00 ; '.'
000000000020e9c5         db  0x00 ; '.'
000000000020e9c6         db  0x00 ; '.'
000000000020e9c7         db  0x00 ; '.'
000000000020e9c8         db  0x00 ; '.'
000000000020e9c9         db  0x00 ; '.'
000000000020e9ca         db  0x00 ; '.'
000000000020e9cb         db  0x00 ; '.'
000000000020e9cc         db  0x00 ; '.'
000000000020e9cd         db  0x00 ; '.'
000000000020e9ce         db  0x00 ; '.'
000000000020e9cf         db  0x00 ; '.'
000000000020e9d0         db  0x00 ; '.'
000000000020e9d1         db  0x00 ; '.'
000000000020e9d2         db  0x00 ; '.'
000000000020e9d3         db  0x00 ; '.'
000000000020e9d4         db  0x00 ; '.'
000000000020e9d5         db  0x00 ; '.'
000000000020e9d6         db  0x00 ; '.'
000000000020e9d7         db  0x00 ; '.'
000000000020e9d8         db  0x80 ; '.'
000000000020e9d9         db  0x00 ; '.'
000000000020e9da         db  0x00 ; '.'
000000000020e9db         db  0x00 ; '.'
000000000020e9dc         db  0x00 ; '.'
000000000020e9dd         db  0x00 ; '.'
000000000020e9de         db  0x00 ; '.'
000000000020e9df         db  0x00 ; '.'
000000000020e9e0         db  0x8d ; '.'
000000000020e9e1         db  0xab ; '.'
000000000020e9e2         db  0x00 ; '.'
000000000020e9e3         db  0x00 ; '.'
000000000020e9e4         db  0x00 ; '.'
000000000020e9e5         db  0x00 ; '.'
000000000020e9e6         db  0x00 ; '.'
000000000020e9e7         db  0x00 ; '.'
000000000020e9e8         db  0x01 ; '.'
000000000020e9e9         db  0x00 ; '.'
000000000020e9ea         db  0x00 ; '.'
000000000020e9eb         db  0x00 ; '.'
000000000020e9ec         db  0x00 ; '.'
000000000020e9ed         db  0x00 ; '.'
000000000020e9ee         db  0x00 ; '.'
000000000020e9ef         db  0x00 ; '.'
000000000020e9f0         db  0x00 ; '.'
000000000020e9f1         db  0x00 ; '.'
000000000020e9f2         db  0x00 ; '.'
000000000020e9f3         db  0x00 ; '.'
000000000020e9f4         db  0x00 ; '.'
000000000020e9f5         db  0x00 ; '.'
000000000020e9f6         db  0x00 ; '.'
000000000020e9f7         db  0x00 ; '.'
000000000020e9f8         db  0x81 ; '.'
000000000020e9f9         db  0x00 ; '.'
000000000020e9fa         db  0x00 ; '.'
000000000020e9fb         db  0x00 ; '.'
000000000020e9fc         db  0x00 ; '.'
000000000020e9fd         db  0x00 ; '.'
000000000020e9fe         db  0x00 ; '.'
000000000020e9ff         db  0x00 ; '.'
000000000020ea00         db  0x92 ; '.'
000000000020ea01         db  0xab ; '.'
000000000020ea02         db  0x00 ; '.'
000000000020ea03         db  0x00 ; '.'
000000000020ea04         db  0x00 ; '.'
000000000020ea05         db  0x00 ; '.'
000000000020ea06         db  0x00 ; '.'
000000000020ea07         db  0x00 ; '.'
000000000020ea08         db  0x00 ; '.'
000000000020ea09         db  0x00 ; '.'
000000000020ea0a         db  0x00 ; '.'
000000000020ea0b         db  0x00 ; '.'
000000000020ea0c         db  0x00 ; '.'
000000000020ea0d         db  0x00 ; '.'
000000000020ea0e         db  0x00 ; '.'
000000000020ea0f         db  0x00 ; '.'
000000000020ea10         db  0x00 ; '.'
000000000020ea11         db  0x00 ; '.'
000000000020ea12         db  0x00 ; '.'
000000000020ea13         db  0x00 ; '.'
000000000020ea14         db  0x00 ; '.'
000000000020ea15         db  0x00 ; '.'
000000000020ea16         db  0x00 ; '.'
000000000020ea17         db  0x00 ; '.'
000000000020ea18         db  0x68 ; 'h'
000000000020ea19         db  0x00 ; '.'
000000000020ea1a         db  0x00 ; '.'
000000000020ea1b         db  0x00 ; '.'
000000000020ea1c         db  0x00 ; '.'
000000000020ea1d         db  0x00 ; '.'
000000000020ea1e         db  0x00 ; '.'
000000000020ea1f         db  0x00 ; '.'
000000000020ea20         db  0xa1 ; '.'
000000000020ea21         db  0xab ; '.'
000000000020ea22         db  0x00 ; '.'
000000000020ea23         db  0x00 ; '.'
000000000020ea24         db  0x00 ; '.'
000000000020ea25         db  0x00 ; '.'
000000000020ea26         db  0x00 ; '.'
000000000020ea27         db  0x00 ; '.'
000000000020ea28         db  0x00 ; '.'
000000000020ea29         db  0x00 ; '.'
000000000020ea2a         db  0x00 ; '.'
000000000020ea2b         db  0x00 ; '.'
000000000020ea2c         db  0x00 ; '.'
000000000020ea2d         db  0x00 ; '.'
000000000020ea2e         db  0x00 ; '.'
000000000020ea2f         db  0x00 ; '.'
000000000020ea30         db  0x00 ; '.'
000000000020ea31         db  0x00 ; '.'
000000000020ea32         db  0x00 ; '.'
000000000020ea33         db  0x00 ; '.'
000000000020ea34         db  0x00 ; '.'
000000000020ea35         db  0x00 ; '.'
000000000020ea36         db  0x00 ; '.'
000000000020ea37         db  0x00 ; '.'
000000000020ea38         db  0x82 ; '.'
000000000020ea39         db  0x00 ; '.'
000000000020ea3a         db  0x00 ; '.'
000000000020ea3b         db  0x00 ; '.'
000000000020ea3c         db  0x00 ; '.'
000000000020ea3d         db  0x00 ; '.'
000000000020ea3e         db  0x00 ; '.'
000000000020ea3f         db  0x00 ; '.'
000000000020ea40         db  0xa4 ; '.'
000000000020ea41         db  0xab ; '.'
000000000020ea42         db  0x00 ; '.'
000000000020ea43         db  0x00 ; '.'
000000000020ea44         db  0x00 ; '.'
000000000020ea45         db  0x00 ; '.'
000000000020ea46         db  0x00 ; '.'
000000000020ea47         db  0x00 ; '.'
000000000020ea48         db  0x00 ; '.'
000000000020ea49         db  0x00 ; '.'
000000000020ea4a         db  0x00 ; '.'
000000000020ea4b         db  0x00 ; '.'
000000000020ea4c         db  0x00 ; '.'
000000000020ea4d         db  0x00 ; '.'
000000000020ea4e         db  0x00 ; '.'
000000000020ea4f         db  0x00 ; '.'
000000000020ea50         db  0x00 ; '.'
000000000020ea51         db  0x00 ; '.'
000000000020ea52         db  0x00 ; '.'
000000000020ea53         db  0x00 ; '.'
000000000020ea54         db  0x00 ; '.'
000000000020ea55         db  0x00 ; '.'
000000000020ea56         db  0x00 ; '.'
000000000020ea57         db  0x00 ; '.'
000000000020ea58         db  0x83 ; '.'
000000000020ea59         db  0x00 ; '.'
000000000020ea5a         db  0x00 ; '.'
000000000020ea5b         db  0x00 ; '.'
000000000020ea5c         db  0x00 ; '.'
000000000020ea5d         db  0x00 ; '.'
000000000020ea5e         db  0x00 ; '.'
000000000020ea5f         db  0x00 ; '.'
000000000020ea60         db  0xb2 ; '.'
000000000020ea61         db  0xab ; '.'
000000000020ea62         db  0x00 ; '.'
000000000020ea63         db  0x00 ; '.'
000000000020ea64         db  0x00 ; '.'
000000000020ea65         db  0x00 ; '.'
000000000020ea66         db  0x00 ; '.'
000000000020ea67         db  0x00 ; '.'
000000000020ea68         db  0x00 ; '.'
000000000020ea69         db  0x00 ; '.'
000000000020ea6a         db  0x00 ; '.'
000000000020ea6b         db  0x00 ; '.'
000000000020ea6c         db  0x00 ; '.'
000000000020ea6d         db  0x00 ; '.'
000000000020ea6e         db  0x00 ; '.'
000000000020ea6f         db  0x00 ; '.'
000000000020ea70         db  0x00 ; '.'
000000000020ea71         db  0x00 ; '.'
000000000020ea72         db  0x00 ; '.'
000000000020ea73         db  0x00 ; '.'
000000000020ea74         db  0x00 ; '.'
000000000020ea75         db  0x00 ; '.'
000000000020ea76         db  0x00 ; '.'
000000000020ea77         db  0x00 ; '.'
000000000020ea78         db  0x66 ; 'f'
000000000020ea79         db  0x00 ; '.'
000000000020ea7a         db  0x00 ; '.'
000000000020ea7b         db  0x00 ; '.'
000000000020ea7c         db  0x00 ; '.'
000000000020ea7d         db  0x00 ; '.'
000000000020ea7e         db  0x00 ; '.'
000000000020ea7f         db  0x00 ; '.'
000000000020ea80         db  0xb8 ; '.'
000000000020ea81         db  0xab ; '.'
000000000020ea82         db  0x00 ; '.'
000000000020ea83         db  0x00 ; '.'
000000000020ea84         db  0x00 ; '.'
000000000020ea85         db  0x00 ; '.'
000000000020ea86         db  0x00 ; '.'
000000000020ea87         db  0x00 ; '.'
000000000020ea88         db  0x00 ; '.'
000000000020ea89         db  0x00 ; '.'
000000000020ea8a         db  0x00 ; '.'
000000000020ea8b         db  0x00 ; '.'
000000000020ea8c         db  0x00 ; '.'
000000000020ea8d         db  0x00 ; '.'
000000000020ea8e         db  0x00 ; '.'
000000000020ea8f         db  0x00 ; '.'
000000000020ea90         db  0x00 ; '.'
000000000020ea91         db  0x00 ; '.'
000000000020ea92         db  0x00 ; '.'
000000000020ea93         db  0x00 ; '.'
000000000020ea94         db  0x00 ; '.'
000000000020ea95         db  0x00 ; '.'
000000000020ea96         db  0x00 ; '.'
000000000020ea97         db  0x00 ; '.'
000000000020ea98         db  0x66 ; 'f'
000000000020ea99         db  0x00 ; '.'
000000000020ea9a         db  0x00 ; '.'
000000000020ea9b         db  0x00 ; '.'
000000000020ea9c         db  0x00 ; '.'
000000000020ea9d         db  0x00 ; '.'
000000000020ea9e         db  0x00 ; '.'
000000000020ea9f         db  0x00 ; '.'
000000000020eaa0         db  0x97 ; '.'
000000000020eaa1         db  0xab ; '.'
000000000020eaa2         db  0x00 ; '.'
000000000020eaa3         db  0x00 ; '.'
000000000020eaa4         db  0x00 ; '.'
000000000020eaa5         db  0x00 ; '.'
000000000020eaa6         db  0x00 ; '.'
000000000020eaa7         db  0x00 ; '.'
000000000020eaa8         db  0x01 ; '.'
000000000020eaa9         db  0x00 ; '.'
000000000020eaaa         db  0x00 ; '.'
000000000020eaab         db  0x00 ; '.'
000000000020eaac         db  0x00 ; '.'
000000000020eaad         db  0x00 ; '.'
000000000020eaae         db  0x00 ; '.'
000000000020eaaf         db  0x00 ; '.'
000000000020eab0         db  0x00 ; '.'
000000000020eab1         db  0x00 ; '.'
000000000020eab2         db  0x00 ; '.'
000000000020eab3         db  0x00 ; '.'
000000000020eab4         db  0x00 ; '.'
000000000020eab5         db  0x00 ; '.'
000000000020eab6         db  0x00 ; '.'
000000000020eab7         db  0x00 ; '.'
000000000020eab8         db  0x84 ; '.'
000000000020eab9         db  0x00 ; '.'
000000000020eaba         db  0x00 ; '.'
000000000020eabb         db  0x00 ; '.'
000000000020eabc         db  0x00 ; '.'
000000000020eabd         db  0x00 ; '.'
000000000020eabe         db  0x00 ; '.'
000000000020eabf         db  0x00 ; '.'
000000000020eac0         db  0xbf ; '.'
000000000020eac1         db  0xab ; '.'
000000000020eac2         db  0x00 ; '.'
000000000020eac3         db  0x00 ; '.'
000000000020eac4         db  0x00 ; '.'
000000000020eac5         db  0x00 ; '.'
000000000020eac6         db  0x00 ; '.'
000000000020eac7         db  0x00 ; '.'
000000000020eac8         db  0x00 ; '.'
000000000020eac9         db  0x00 ; '.'
000000000020eaca         db  0x00 ; '.'
000000000020eacb         db  0x00 ; '.'
000000000020eacc         db  0x00 ; '.'
000000000020eacd         db  0x00 ; '.'
000000000020eace         db  0x00 ; '.'
000000000020eacf         db  0x00 ; '.'
000000000020ead0         db  0x00 ; '.'
000000000020ead1         db  0x00 ; '.'
000000000020ead2         db  0x00 ; '.'
000000000020ead3         db  0x00 ; '.'
000000000020ead4         db  0x00 ; '.'
000000000020ead5         db  0x00 ; '.'
000000000020ead6         db  0x00 ; '.'
000000000020ead7         db  0x00 ; '.'
000000000020ead8         db  0x76 ; 'v'
000000000020ead9         db  0x00 ; '.'
000000000020eada         db  0x00 ; '.'
000000000020eadb         db  0x00 ; '.'
000000000020eadc         db  0x00 ; '.'
000000000020eadd         db  0x00 ; '.'
000000000020eade         db  0x00 ; '.'
000000000020eadf         db  0x00 ; '.'
000000000020eae0         db  0xc7 ; '.'
000000000020eae1         db  0xab ; '.'
000000000020eae2         db  0x00 ; '.'
000000000020eae3         db  0x00 ; '.'
000000000020eae4         db  0x00 ; '.'
000000000020eae5         db  0x00 ; '.'
000000000020eae6         db  0x00 ; '.'
000000000020eae7         db  0x00 ; '.'
000000000020eae8         db  0x00 ; '.'
000000000020eae9         db  0x00 ; '.'
000000000020eaea         db  0x00 ; '.'
000000000020eaeb         db  0x00 ; '.'
000000000020eaec         db  0x00 ; '.'
000000000020eaed         db  0x00 ; '.'
000000000020eaee         db  0x00 ; '.'
000000000020eaef         db  0x00 ; '.'
000000000020eaf0         db  0x00 ; '.'
000000000020eaf1         db  0x00 ; '.'
000000000020eaf2         db  0x00 ; '.'
000000000020eaf3         db  0x00 ; '.'
000000000020eaf4         db  0x00 ; '.'
000000000020eaf5         db  0x00 ; '.'
000000000020eaf6         db  0x00 ; '.'
000000000020eaf7         db  0x00 ; '.'
000000000020eaf8         db  0x7e ; '~'
000000000020eaf9         db  0xff ; '.'
000000000020eafa         db  0xff ; '.'
000000000020eafb         db  0xff ; '.'
000000000020eafc         db  0x00 ; '.'
000000000020eafd         db  0x00 ; '.'
000000000020eafe         db  0x00 ; '.'
000000000020eaff         db  0x00 ; '.'
000000000020eb00         db  0xcc ; '.'
000000000020eb01         db  0xab ; '.'
000000000020eb02         db  0x00 ; '.'
000000000020eb03         db  0x00 ; '.'
000000000020eb04         db  0x00 ; '.'
000000000020eb05         db  0x00 ; '.'
000000000020eb06         db  0x00 ; '.'
000000000020eb07         db  0x00 ; '.'
000000000020eb08         db  0x00 ; '.'
000000000020eb09         db  0x00 ; '.'
000000000020eb0a         db  0x00 ; '.'
000000000020eb0b         db  0x00 ; '.'
000000000020eb0c         db  0x00 ; '.'
000000000020eb0d         db  0x00 ; '.'
000000000020eb0e         db  0x00 ; '.'
000000000020eb0f         db  0x00 ; '.'
000000000020eb10         db  0x00 ; '.'
000000000020eb11         db  0x00 ; '.'
000000000020eb12         db  0x00 ; '.'
000000000020eb13         db  0x00 ; '.'
000000000020eb14         db  0x00 ; '.'
000000000020eb15         db  0x00 ; '.'
000000000020eb16         db  0x00 ; '.'
000000000020eb17         db  0x00 ; '.'
000000000020eb18         db  0x7d ; '}'
000000000020eb19         db  0xff ; '.'
000000000020eb1a         db  0xff ; '.'
000000000020eb1b         db  0xff ; '.'
000000000020eb1c         db  0x00 ; '.'
000000000020eb1d         db  0x00 ; '.'
000000000020eb1e         db  0x00 ; '.'
000000000020eb1f         db  0x00 ; '.'
000000000020eb20         db  0x00 ; '.'
000000000020eb21         db  0x00 ; '.'
000000000020eb22         db  0x00 ; '.'
000000000020eb23         db  0x00 ; '.'
000000000020eb24         db  0x00 ; '.'
000000000020eb25         db  0x00 ; '.'
000000000020eb26         db  0x00 ; '.'
000000000020eb27         db  0x00 ; '.'
000000000020eb28         db  0x00 ; '.'
000000000020eb29         db  0x00 ; '.'
000000000020eb2a         db  0x00 ; '.'
000000000020eb2b         db  0x00 ; '.'
000000000020eb2c         db  0x00 ; '.'
000000000020eb2d         db  0x00 ; '.'
000000000020eb2e         db  0x00 ; '.'
000000000020eb2f         db  0x00 ; '.'
000000000020eb30         db  0x00 ; '.'
000000000020eb31         db  0x00 ; '.'
000000000020eb32         db  0x00 ; '.'
000000000020eb33         db  0x00 ; '.'
000000000020eb34         db  0x00 ; '.'
000000000020eb35         db  0x00 ; '.'
000000000020eb36         db  0x00 ; '.'
000000000020eb37         db  0x00 ; '.'
000000000020eb38         db  0x00 ; '.'
000000000020eb39         db  0x00 ; '.'
000000000020eb3a         db  0x00 ; '.'
000000000020eb3b         db  0x00 ; '.'
000000000020eb3c         db  0x00 ; '.'
000000000020eb3d         db  0x00 ; '.'
000000000020eb3e         db  0x00 ; '.'
000000000020eb3f         db  0x00 ; '.'
                     quoting_style_args:
000000000020eb40         db  0x01 ; '.'
000000000020eb41         db  0xbb ; '.'
000000000020eb42         db  0x00 ; '.'
000000000020eb43         db  0x00 ; '.'
000000000020eb44         db  0x00 ; '.'
000000000020eb45         db  0x00 ; '.'
000000000020eb46         db  0x00 ; '.'
000000000020eb47         db  0x00 ; '.'
000000000020eb48         db  0x09 ; '.'
000000000020eb49         db  0xbb ; '.'
000000000020eb4a         db  0x00 ; '.'
000000000020eb4b         db  0x00 ; '.'
000000000020eb4c         db  0x00 ; '.'
000000000020eb4d         db  0x00 ; '.'
000000000020eb4e         db  0x00 ; '.'
000000000020eb4f         db  0x00 ; '.'
000000000020eb50         db  0x0f ; '.'
000000000020eb51         db  0xbb ; '.'
000000000020eb52         db  0x00 ; '.'
000000000020eb53         db  0x00 ; '.'
000000000020eb54         db  0x00 ; '.'
000000000020eb55         db  0x00 ; '.'
000000000020eb56         db  0x00 ; '.'
000000000020eb57         db  0x00 ; '.'
000000000020eb58         db  0x1c ; '.'
000000000020eb59         db  0xbb ; '.'
000000000020eb5a         db  0x00 ; '.'
000000000020eb5b         db  0x00 ; '.'
000000000020eb5c         db  0x00 ; '.'
000000000020eb5d         db  0x00 ; '.'
000000000020eb5e         db  0x00 ; '.'
000000000020eb5f         db  0x00 ; '.'
000000000020eb60         db  0x29 ; ')'
000000000020eb61         db  0xbb ; '.'
000000000020eb62         db  0x00 ; '.'
000000000020eb63         db  0x00 ; '.'
000000000020eb64         db  0x00 ; '.'
000000000020eb65         db  0x00 ; '.'
000000000020eb66         db  0x00 ; '.'
000000000020eb67         db  0x00 ; '.'
000000000020eb68         db  0x7b ; '{'
000000000020eb69         db  0xc3 ; '.'
000000000020eb6a         db  0x00 ; '.'
000000000020eb6b         db  0x00 ; '.'
000000000020eb6c         db  0x00 ; '.'
000000000020eb6d         db  0x00 ; '.'
000000000020eb6e         db  0x00 ; '.'
000000000020eb6f         db  0x00 ; '.'
000000000020eb70         db  0x3d ; '='
000000000020eb71         db  0xbb ; '.'
000000000020eb72         db  0x00 ; '.'
000000000020eb73         db  0x00 ; '.'
000000000020eb74         db  0x00 ; '.'
000000000020eb75         db  0x00 ; '.'
000000000020eb76         db  0x00 ; '.'
000000000020eb77         db  0x00 ; '.'
000000000020eb78         db  0x22 ; '"'
000000000020eb79         db  0xbb ; '.'
000000000020eb7a         db  0x00 ; '.'
000000000020eb7b         db  0x00 ; '.'
000000000020eb7c         db  0x00 ; '.'
000000000020eb7d         db  0x00 ; '.'
000000000020eb7e         db  0x00 ; '.'
000000000020eb7f         db  0x00 ; '.'
000000000020eb80         db  0x1e ; '.'
000000000020eb81         db  0xab ; '.'
000000000020eb82         db  0x00 ; '.'
000000000020eb83         db  0x00 ; '.'
000000000020eb84         db  0x00 ; '.'
000000000020eb85         db  0x00 ; '.'
000000000020eb86         db  0x00 ; '.'
000000000020eb87         db  0x00 ; '.'
000000000020eb88         db  0x45 ; 'E'
000000000020eb89         db  0xbb ; '.'
000000000020eb8a         db  0x00 ; '.'
000000000020eb8b         db  0x00 ; '.'
000000000020eb8c         db  0x00 ; '.'
000000000020eb8d         db  0x00 ; '.'
000000000020eb8e         db  0x00 ; '.'
000000000020eb8f         db  0x00 ; '.'
000000000020eb90         db  0x00 ; '.'
000000000020eb91         db  0x00 ; '.'
000000000020eb92         db  0x00 ; '.'
000000000020eb93         db  0x00 ; '.'
000000000020eb94         db  0x00 ; '.'
000000000020eb95         db  0x00 ; '.'
000000000020eb96         db  0x00 ; '.'
000000000020eb97         db  0x00 ; '.'


        ; Section .dynamic
        ; Range: [0x20eb98; 0x20ed88[ (496 bytes)
        ; File offset : [60312; 60808[ (496 bytes)
        ; Flags: 0x3
        ;   SHT_DYNAMIC
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     _DYNAMIC:
000000000020eb98         db  0x01 ; '.'
000000000020eb99         db  0x00 ; '.'
000000000020eb9a         db  0x00 ; '.'
000000000020eb9b         db  0x00 ; '.'
000000000020eb9c         db  0x00 ; '.'
000000000020eb9d         db  0x00 ; '.'
000000000020eb9e         db  0x00 ; '.'
000000000020eb9f         db  0x00 ; '.'
000000000020eba0         db  0x01 ; '.'
000000000020eba1         db  0x00 ; '.'
000000000020eba2         db  0x00 ; '.'
000000000020eba3         db  0x00 ; '.'
000000000020eba4         db  0x00 ; '.'
000000000020eba5         db  0x00 ; '.'
000000000020eba6         db  0x00 ; '.'
000000000020eba7         db  0x00 ; '.'
000000000020eba8         db  0x0c ; '.'
000000000020eba9         db  0x00 ; '.'
000000000020ebaa         db  0x00 ; '.'
000000000020ebab         db  0x00 ; '.'
000000000020ebac         db  0x00 ; '.'
000000000020ebad         db  0x00 ; '.'
000000000020ebae         db  0x00 ; '.'
000000000020ebaf         db  0x00 ; '.'
000000000020ebb0         db  0x70 ; 'p'
000000000020ebb1         db  0x19 ; '.'
000000000020ebb2         db  0x00 ; '.'
000000000020ebb3         db  0x00 ; '.'
000000000020ebb4         db  0x00 ; '.'
000000000020ebb5         db  0x00 ; '.'
000000000020ebb6         db  0x00 ; '.'
000000000020ebb7         db  0x00 ; '.'
000000000020ebb8         db  0x0d ; '.'
000000000020ebb9         db  0x00 ; '.'
000000000020ebba         db  0x00 ; '.'
000000000020ebbb         db  0x00 ; '.'
000000000020ebbc         db  0x00 ; '.'
000000000020ebbd         db  0x00 ; '.'
000000000020ebbe         db  0x00 ; '.'
000000000020ebbf         db  0x00 ; '.'
000000000020ebc0         db  0x40 ; '@'
000000000020ebc1         db  0xaa ; '.'
000000000020ebc2         db  0x00 ; '.'
000000000020ebc3         db  0x00 ; '.'
000000000020ebc4         db  0x00 ; '.'
000000000020ebc5         db  0x00 ; '.'
000000000020ebc6         db  0x00 ; '.'
000000000020ebc7         db  0x00 ; '.'
000000000020ebc8         db  0x19 ; '.'
000000000020ebc9         db  0x00 ; '.'
000000000020ebca         db  0x00 ; '.'
000000000020ebcb         db  0x00 ; '.'
000000000020ebcc         db  0x00 ; '.'
000000000020ebcd         db  0x00 ; '.'
000000000020ebce         db  0x00 ; '.'
000000000020ebcf         db  0x00 ; '.'
000000000020ebd0         db  0x70 ; 'p'
000000000020ebd1         db  0xe9 ; '.'
000000000020ebd2         db  0x20 ; ' '
000000000020ebd3         db  0x00 ; '.'
000000000020ebd4         db  0x00 ; '.'
000000000020ebd5         db  0x00 ; '.'
000000000020ebd6         db  0x00 ; '.'
000000000020ebd7         db  0x00 ; '.'
000000000020ebd8         db  0x1b ; '.'
000000000020ebd9         db  0x00 ; '.'
000000000020ebda         db  0x00 ; '.'
000000000020ebdb         db  0x00 ; '.'
000000000020ebdc         db  0x00 ; '.'
000000000020ebdd         db  0x00 ; '.'
000000000020ebde         db  0x00 ; '.'
000000000020ebdf         db  0x00 ; '.'
000000000020ebe0         db  0x08 ; '.'
000000000020ebe1         db  0x00 ; '.'
000000000020ebe2         db  0x00 ; '.'
000000000020ebe3         db  0x00 ; '.'
000000000020ebe4         db  0x00 ; '.'
000000000020ebe5         db  0x00 ; '.'
000000000020ebe6         db  0x00 ; '.'
000000000020ebe7         db  0x00 ; '.'
000000000020ebe8         db  0x1a ; '.'
000000000020ebe9         db  0x00 ; '.'
000000000020ebea         db  0x00 ; '.'
000000000020ebeb         db  0x00 ; '.'
000000000020ebec         db  0x00 ; '.'
000000000020ebed         db  0x00 ; '.'
000000000020ebee         db  0x00 ; '.'
000000000020ebef         db  0x00 ; '.'
000000000020ebf0         db  0x78 ; 'x'
000000000020ebf1         db  0xe9 ; '.'
000000000020ebf2         db  0x20 ; ' '
000000000020ebf3         db  0x00 ; '.'
000000000020ebf4         db  0x00 ; '.'
000000000020ebf5         db  0x00 ; '.'
000000000020ebf6         db  0x00 ; '.'
000000000020ebf7         db  0x00 ; '.'
000000000020ebf8         db  0x1c ; '.'
000000000020ebf9         db  0x00 ; '.'
000000000020ebfa         db  0x00 ; '.'
000000000020ebfb         db  0x00 ; '.'
000000000020ebfc         db  0x00 ; '.'
000000000020ebfd         db  0x00 ; '.'
000000000020ebfe         db  0x00 ; '.'
000000000020ebff         db  0x00 ; '.'
000000000020ec00         db  0x08 ; '.'
000000000020ec01         db  0x00 ; '.'
000000000020ec02         db  0x00 ; '.'
000000000020ec03         db  0x00 ; '.'
000000000020ec04         db  0x00 ; '.'
000000000020ec05         db  0x00 ; '.'
000000000020ec06         db  0x00 ; '.'
000000000020ec07         db  0x00 ; '.'
000000000020ec08         db  0xf5 ; '.'
000000000020ec09         db  0xfe ; '.'
000000000020ec0a         db  0xff ; '.'
000000000020ec0b         db  0x6f ; 'o'
000000000020ec0c         db  0x00 ; '.'
000000000020ec0d         db  0x00 ; '.'
000000000020ec0e         db  0x00 ; '.'
000000000020ec0f         db  0x00 ; '.'
000000000020ec10         db  0x98 ; '.'
000000000020ec11         db  0x02 ; '.'
000000000020ec12         db  0x00 ; '.'
000000000020ec13         db  0x00 ; '.'
000000000020ec14         db  0x00 ; '.'
000000000020ec15         db  0x00 ; '.'
000000000020ec16         db  0x00 ; '.'
000000000020ec17         db  0x00 ; '.'
000000000020ec18         db  0x05 ; '.'
000000000020ec19         db  0x00 ; '.'
000000000020ec1a         db  0x00 ; '.'
000000000020ec1b         db  0x00 ; '.'
000000000020ec1c         db  0x00 ; '.'
000000000020ec1d         db  0x00 ; '.'
000000000020ec1e         db  0x00 ; '.'
000000000020ec1f         db  0x00 ; '.'
000000000020ec20         db  0xa8 ; '.'
000000000020ec21         db  0x0a ; '.'
000000000020ec22         db  0x00 ; '.'
000000000020ec23         db  0x00 ; '.'
000000000020ec24         db  0x00 ; '.'
000000000020ec25         db  0x00 ; '.'
000000000020ec26         db  0x00 ; '.'
000000000020ec27         db  0x00 ; '.'
000000000020ec28         db  0x06 ; '.'
000000000020ec29         db  0x00 ; '.'
000000000020ec2a         db  0x00 ; '.'
000000000020ec2b         db  0x00 ; '.'
000000000020ec2c         db  0x00 ; '.'
000000000020ec2d         db  0x00 ; '.'
000000000020ec2e         db  0x00 ; '.'
000000000020ec2f         db  0x00 ; '.'
000000000020ec30         db  0xe0 ; '.'
000000000020ec31         db  0x02 ; '.'
000000000020ec32         db  0x00 ; '.'
000000000020ec33         db  0x00 ; '.'
000000000020ec34         db  0x00 ; '.'
000000000020ec35         db  0x00 ; '.'
000000000020ec36         db  0x00 ; '.'
000000000020ec37         db  0x00 ; '.'
000000000020ec38         db  0x0a ; '.'
000000000020ec39         db  0x00 ; '.'
000000000020ec3a         db  0x00 ; '.'
000000000020ec3b         db  0x00 ; '.'
000000000020ec3c         db  0x00 ; '.'
000000000020ec3d         db  0x00 ; '.'
000000000020ec3e         db  0x00 ; '.'
000000000020ec3f         db  0x00 ; '.'
000000000020ec40         db  0x7a ; 'z'
000000000020ec41         db  0x03 ; '.'
000000000020ec42         db  0x00 ; '.'
000000000020ec43         db  0x00 ; '.'
000000000020ec44         db  0x00 ; '.'
000000000020ec45         db  0x00 ; '.'
000000000020ec46         db  0x00 ; '.'
000000000020ec47         db  0x00 ; '.'
000000000020ec48         db  0x0b ; '.'
000000000020ec49         db  0x00 ; '.'
000000000020ec4a         db  0x00 ; '.'
000000000020ec4b         db  0x00 ; '.'
000000000020ec4c         db  0x00 ; '.'
000000000020ec4d         db  0x00 ; '.'
000000000020ec4e         db  0x00 ; '.'
000000000020ec4f         db  0x00 ; '.'
000000000020ec50         db  0x18 ; '.'
000000000020ec51         db  0x00 ; '.'
000000000020ec52         db  0x00 ; '.'
000000000020ec53         db  0x00 ; '.'
000000000020ec54         db  0x00 ; '.'
000000000020ec55         db  0x00 ; '.'
000000000020ec56         db  0x00 ; '.'
000000000020ec57         db  0x00 ; '.'
000000000020ec58         db  0x15 ; '.'
000000000020ec59         db  0x00 ; '.'
000000000020ec5a         db  0x00 ; '.'
000000000020ec5b         db  0x00 ; '.'
000000000020ec5c         db  0x00 ; '.'
000000000020ec5d         db  0x00 ; '.'
000000000020ec5e         db  0x00 ; '.'
000000000020ec5f         db  0x00 ; '.'
000000000020ec60         db  0x00 ; '.'
000000000020ec61         db  0x00 ; '.'
000000000020ec62         db  0x00 ; '.'
000000000020ec63         db  0x00 ; '.'
000000000020ec64         db  0x00 ; '.'
000000000020ec65         db  0x00 ; '.'
000000000020ec66         db  0x00 ; '.'
000000000020ec67         db  0x00 ; '.'
000000000020ec68         db  0x03 ; '.'
000000000020ec69         db  0x00 ; '.'
000000000020ec6a         db  0x00 ; '.'
000000000020ec6b         db  0x00 ; '.'
000000000020ec6c         db  0x00 ; '.'
000000000020ec6d         db  0x00 ; '.'
000000000020ec6e         db  0x00 ; '.'
000000000020ec6f         db  0x00 ; '.'
000000000020ec70         db  0x88 ; '.'
000000000020ec71         db  0xed ; '.'
000000000020ec72         db  0x20 ; ' '
000000000020ec73         db  0x00 ; '.'
000000000020ec74         db  0x00 ; '.'
000000000020ec75         db  0x00 ; '.'
000000000020ec76         db  0x00 ; '.'
000000000020ec77         db  0x00 ; '.'
000000000020ec78         db  0x02 ; '.'
000000000020ec79         db  0x00 ; '.'
000000000020ec7a         db  0x00 ; '.'
000000000020ec7b         db  0x00 ; '.'
000000000020ec7c         db  0x00 ; '.'
000000000020ec7d         db  0x00 ; '.'
000000000020ec7e         db  0x00 ; '.'
000000000020ec7f         db  0x00 ; '.'
000000000020ec80         db  0x60 ; '`'
000000000020ec81         db  0x06 ; '.'
000000000020ec82         db  0x00 ; '.'
000000000020ec83         db  0x00 ; '.'
000000000020ec84         db  0x00 ; '.'
000000000020ec85         db  0x00 ; '.'
000000000020ec86         db  0x00 ; '.'
000000000020ec87         db  0x00 ; '.'
000000000020ec88         db  0x14 ; '.'
000000000020ec89         db  0x00 ; '.'
000000000020ec8a         db  0x00 ; '.'
000000000020ec8b         db  0x00 ; '.'
000000000020ec8c         db  0x00 ; '.'
000000000020ec8d         db  0x00 ; '.'
000000000020ec8e         db  0x00 ; '.'
000000000020ec8f         db  0x00 ; '.'
000000000020ec90         db  0x07 ; '.'
000000000020ec91         db  0x00 ; '.'
000000000020ec92         db  0x00 ; '.'
000000000020ec93         db  0x00 ; '.'
000000000020ec94         db  0x00 ; '.'
000000000020ec95         db  0x00 ; '.'
000000000020ec96         db  0x00 ; '.'
000000000020ec97         db  0x00 ; '.'
000000000020ec98         db  0x17 ; '.'
000000000020ec99         db  0x00 ; '.'
000000000020ec9a         db  0x00 ; '.'
000000000020ec9b         db  0x00 ; '.'
000000000020ec9c         db  0x00 ; '.'
000000000020ec9d         db  0x00 ; '.'
000000000020ec9e         db  0x00 ; '.'
000000000020ec9f         db  0x00 ; '.'
000000000020eca0         db  0x10 ; '.'
000000000020eca1         db  0x13 ; '.'
000000000020eca2         db  0x00 ; '.'
000000000020eca3         db  0x00 ; '.'
000000000020eca4         db  0x00 ; '.'
000000000020eca5         db  0x00 ; '.'
000000000020eca6         db  0x00 ; '.'
000000000020eca7         db  0x00 ; '.'
000000000020eca8         db  0x07 ; '.'
000000000020eca9         db  0x00 ; '.'
000000000020ecaa         db  0x00 ; '.'
000000000020ecab         db  0x00 ; '.'
000000000020ecac         db  0x00 ; '.'
000000000020ecad         db  0x00 ; '.'
000000000020ecae         db  0x00 ; '.'
000000000020ecaf         db  0x00 ; '.'
000000000020ecb0         db  0x38 ; '8'
000000000020ecb1         db  0x0f ; '.'
000000000020ecb2         db  0x00 ; '.'
000000000020ecb3         db  0x00 ; '.'
000000000020ecb4         db  0x00 ; '.'
000000000020ecb5         db  0x00 ; '.'
000000000020ecb6         db  0x00 ; '.'
000000000020ecb7         db  0x00 ; '.'
000000000020ecb8         db  0x08 ; '.'
000000000020ecb9         db  0x00 ; '.'
000000000020ecba         db  0x00 ; '.'
000000000020ecbb         db  0x00 ; '.'
000000000020ecbc         db  0x00 ; '.'
000000000020ecbd         db  0x00 ; '.'
000000000020ecbe         db  0x00 ; '.'
000000000020ecbf         db  0x00 ; '.'
000000000020ecc0         db  0xd8 ; '.'
000000000020ecc1         db  0x03 ; '.'
000000000020ecc2         db  0x00 ; '.'
000000000020ecc3         db  0x00 ; '.'
000000000020ecc4         db  0x00 ; '.'
000000000020ecc5         db  0x00 ; '.'
000000000020ecc6         db  0x00 ; '.'
000000000020ecc7         db  0x00 ; '.'
000000000020ecc8         db  0x09 ; '.'
000000000020ecc9         db  0x00 ; '.'
000000000020ecca         db  0x00 ; '.'
000000000020eccb         db  0x00 ; '.'
000000000020eccc         db  0x00 ; '.'
000000000020eccd         db  0x00 ; '.'
000000000020ecce         db  0x00 ; '.'
000000000020eccf         db  0x00 ; '.'
000000000020ecd0         db  0x18 ; '.'
000000000020ecd1         db  0x00 ; '.'
000000000020ecd2         db  0x00 ; '.'
000000000020ecd3         db  0x00 ; '.'
000000000020ecd4         db  0x00 ; '.'
000000000020ecd5         db  0x00 ; '.'
000000000020ecd6         db  0x00 ; '.'
000000000020ecd7         db  0x00 ; '.'
000000000020ecd8         db  0x1e ; '.'
000000000020ecd9         db  0x00 ; '.'
000000000020ecda         db  0x00 ; '.'
000000000020ecdb         db  0x00 ; '.'
000000000020ecdc         db  0x00 ; '.'
000000000020ecdd         db  0x00 ; '.'
000000000020ecde         db  0x00 ; '.'
000000000020ecdf         db  0x00 ; '.'
000000000020ece0         db  0x08 ; '.'
000000000020ece1         db  0x00 ; '.'
000000000020ece2         db  0x00 ; '.'
000000000020ece3         db  0x00 ; '.'
000000000020ece4         db  0x00 ; '.'
000000000020ece5         db  0x00 ; '.'
000000000020ece6         db  0x00 ; '.'
000000000020ece7         db  0x00 ; '.'
000000000020ece8         db  0xfb ; '.'
000000000020ece9         db  0xff ; '.'
000000000020ecea         db  0xff ; '.'
000000000020eceb         db  0x6f ; 'o'
000000000020ecec         db  0x00 ; '.'
000000000020eced         db  0x00 ; '.'
000000000020ecee         db  0x00 ; '.'
000000000020ecef         db  0x00 ; '.'
000000000020ecf0         db  0x01 ; '.'
000000000020ecf1         db  0x00 ; '.'
000000000020ecf2         db  0x00 ; '.'
000000000020ecf3         db  0x08 ; '.'
000000000020ecf4         db  0x00 ; '.'
000000000020ecf5         db  0x00 ; '.'
000000000020ecf6         db  0x00 ; '.'
000000000020ecf7         db  0x00 ; '.'
000000000020ecf8         db  0xfe ; '.'
000000000020ecf9         db  0xff ; '.'
000000000020ecfa         db  0xff ; '.'
000000000020ecfb         db  0x6f ; 'o'
000000000020ecfc         db  0x00 ; '.'
000000000020ecfd         db  0x00 ; '.'
000000000020ecfe         db  0x00 ; '.'
000000000020ecff         db  0x00 ; '.'
000000000020ed00         db  0xc8 ; '.'
000000000020ed01         db  0x0e ; '.'
000000000020ed02         db  0x00 ; '.'
000000000020ed03         db  0x00 ; '.'
000000000020ed04         db  0x00 ; '.'
000000000020ed05         db  0x00 ; '.'
000000000020ed06         db  0x00 ; '.'
000000000020ed07         db  0x00 ; '.'
000000000020ed08         db  0xff ; '.'
000000000020ed09         db  0xff ; '.'
000000000020ed0a         db  0xff ; '.'
000000000020ed0b         db  0x6f ; 'o'
000000000020ed0c         db  0x00 ; '.'
000000000020ed0d         db  0x00 ; '.'
000000000020ed0e         db  0x00 ; '.'
000000000020ed0f         db  0x00 ; '.'
000000000020ed10         db  0x01 ; '.'
000000000020ed11         db  0x00 ; '.'
000000000020ed12         db  0x00 ; '.'
000000000020ed13         db  0x00 ; '.'
000000000020ed14         db  0x00 ; '.'
000000000020ed15         db  0x00 ; '.'
000000000020ed16         db  0x00 ; '.'
000000000020ed17         db  0x00 ; '.'
000000000020ed18         db  0xf0 ; '.'
000000000020ed19         db  0xff ; '.'
000000000020ed1a         db  0xff ; '.'
000000000020ed1b         db  0x6f ; 'o'
000000000020ed1c         db  0x00 ; '.'
000000000020ed1d         db  0x00 ; '.'
000000000020ed1e         db  0x00 ; '.'
000000000020ed1f         db  0x00 ; '.'
000000000020ed20         db  0x22 ; '"'
000000000020ed21         db  0x0e ; '.'
000000000020ed22         db  0x00 ; '.'
000000000020ed23         db  0x00 ; '.'
000000000020ed24         db  0x00 ; '.'
000000000020ed25         db  0x00 ; '.'
000000000020ed26         db  0x00 ; '.'
000000000020ed27         db  0x00 ; '.'
000000000020ed28         db  0xf9 ; '.'
000000000020ed29         db  0xff ; '.'
000000000020ed2a         db  0xff ; '.'
000000000020ed2b         db  0x6f ; 'o'
000000000020ed2c         db  0x00 ; '.'
000000000020ed2d         db  0x00 ; '.'
000000000020ed2e         db  0x00 ; '.'
000000000020ed2f         db  0x00 ; '.'
000000000020ed30         db  0x1d ; '.'
000000000020ed31         db  0x00 ; '.'
000000000020ed32         db  0x00 ; '.'
000000000020ed33         db  0x00 ; '.'
000000000020ed34         db  0x00 ; '.'
000000000020ed35         db  0x00 ; '.'
000000000020ed36         db  0x00 ; '.'
000000000020ed37         db  0x00 ; '.'
000000000020ed38         db  0x00 ; '.'
000000000020ed39         db  0x00 ; '.'
000000000020ed3a         db  0x00 ; '.'
000000000020ed3b         db  0x00 ; '.'
000000000020ed3c         db  0x00 ; '.'
000000000020ed3d         db  0x00 ; '.'
000000000020ed3e         db  0x00 ; '.'
000000000020ed3f         db  0x00 ; '.'
000000000020ed40         db  0x00 ; '.'
000000000020ed41         db  0x00 ; '.'
000000000020ed42         db  0x00 ; '.'
000000000020ed43         db  0x00 ; '.'
000000000020ed44         db  0x00 ; '.'
000000000020ed45         db  0x00 ; '.'
000000000020ed46         db  0x00 ; '.'
000000000020ed47         db  0x00 ; '.'
000000000020ed48         db  0x00 ; '.'
000000000020ed49         db  0x00 ; '.'
000000000020ed4a         db  0x00 ; '.'
000000000020ed4b         db  0x00 ; '.'
000000000020ed4c         db  0x00 ; '.'
000000000020ed4d         db  0x00 ; '.'
000000000020ed4e         db  0x00 ; '.'
000000000020ed4f         db  0x00 ; '.'
000000000020ed50         db  0x00 ; '.'
000000000020ed51         db  0x00 ; '.'
000000000020ed52         db  0x00 ; '.'
000000000020ed53         db  0x00 ; '.'
000000000020ed54         db  0x00 ; '.'
000000000020ed55         db  0x00 ; '.'
000000000020ed56         db  0x00 ; '.'
000000000020ed57         db  0x00 ; '.'
000000000020ed58         db  0x00 ; '.'
000000000020ed59         db  0x00 ; '.'
000000000020ed5a         db  0x00 ; '.'
000000000020ed5b         db  0x00 ; '.'
000000000020ed5c         db  0x00 ; '.'
000000000020ed5d         db  0x00 ; '.'
000000000020ed5e         db  0x00 ; '.'
000000000020ed5f         db  0x00 ; '.'
000000000020ed60         db  0x00 ; '.'
000000000020ed61         db  0x00 ; '.'
000000000020ed62         db  0x00 ; '.'
000000000020ed63         db  0x00 ; '.'
000000000020ed64         db  0x00 ; '.'
000000000020ed65         db  0x00 ; '.'
000000000020ed66         db  0x00 ; '.'
000000000020ed67         db  0x00 ; '.'
000000000020ed68         db  0x00 ; '.'
000000000020ed69         db  0x00 ; '.'
000000000020ed6a         db  0x00 ; '.'
000000000020ed6b         db  0x00 ; '.'
000000000020ed6c         db  0x00 ; '.'
000000000020ed6d         db  0x00 ; '.'
000000000020ed6e         db  0x00 ; '.'
000000000020ed6f         db  0x00 ; '.'
000000000020ed70         db  0x00 ; '.'
000000000020ed71         db  0x00 ; '.'
000000000020ed72         db  0x00 ; '.'
000000000020ed73         db  0x00 ; '.'
000000000020ed74         db  0x00 ; '.'
000000000020ed75         db  0x00 ; '.'
000000000020ed76         db  0x00 ; '.'
000000000020ed77         db  0x00 ; '.'
000000000020ed78         db  0x00 ; '.'
000000000020ed79         db  0x00 ; '.'
000000000020ed7a         db  0x00 ; '.'
000000000020ed7b         db  0x00 ; '.'
000000000020ed7c         db  0x00 ; '.'
000000000020ed7d         db  0x00 ; '.'
000000000020ed7e         db  0x00 ; '.'
000000000020ed7f         db  0x00 ; '.'
000000000020ed80         db  0x00 ; '.'
000000000020ed81         db  0x00 ; '.'
000000000020ed82         db  0x00 ; '.'
000000000020ed83         db  0x00 ; '.'
000000000020ed84         db  0x00 ; '.'
000000000020ed85         db  0x00 ; '.'
000000000020ed86         db  0x00 ; '.'
000000000020ed87         db  0x00 ; '.'


        ; Section .got
        ; Range: [0x20ed88; 0x20eff0[ (616 bytes)
        ; File offset : [60808; 61424[ (616 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     _GLOBAL_OFFSET_TABLE_:
000000000020ed88         db  0x98 ; '.'
000000000020ed89         db  0xeb ; '.'
000000000020ed8a         db  0x20 ; ' '
000000000020ed8b         db  0x00 ; '.'
000000000020ed8c         db  0x00 ; '.'
000000000020ed8d         db  0x00 ; '.'
000000000020ed8e         db  0x00 ; '.'
000000000020ed8f         db  0x00 ; '.'
                     qword_20ed90:
000000000020ed90         dq         0x0000000000000000                          ; DATA XREF=0x1990
000000000020ed98         db  0x00 ; '.'                                         ; DATA XREF=0x1996
000000000020ed99         db  0x00 ; '.'
000000000020ed9a         db  0x00 ; '.'
000000000020ed9b         db  0x00 ; '.'
000000000020ed9c         db  0x00 ; '.'
000000000020ed9d         db  0x00 ; '.'
000000000020ed9e         db  0x00 ; '.'
000000000020ed9f         db  0x00 ; '.'
                     endgrent@GOT:        // endgrent
000000000020eda0         dq         0x000000000020f250                          ; DATA XREF=j_endgrent
                     abort@GOT:        // abort
000000000020eda8         dq         0x000000000020f260                          ; DATA XREF=j_abort
                     __errno_location@GOT:        // __errno_location
000000000020edb0         dq         0x000000000020f268                          ; DATA XREF=j___errno_location
                     strncmp@GOT:        // strncmp
000000000020edb8         dq         0x000000000020f270                          ; DATA XREF=j_strncmp
                     _exit@GOT:        // _exit
000000000020edc0         dq         0x000000000020f280                          ; DATA XREF=j__exit
                     strcpy@GOT:        // strcpy
000000000020edc8         dq         0x000000000020f288                          ; DATA XREF=j_strcpy
                     __fpending@GOT:        // __fpending
000000000020edd0         dq         0x000000000020f290                          ; DATA XREF=j___fpending
                     qsort@GOT:        // qsort
000000000020edd8         dq         0x000000000020f298                          ; DATA XREF=j_qsort
                     fcntl@GOT:        // fcntl
000000000020ede0         dq         0x000000000020f2a0                          ; DATA XREF=j_fcntl
                     textdomain@GOT:        // textdomain
000000000020ede8         dq         0x000000000020f2a8                          ; DATA XREF=j_textdomain
                     fclose@GOT:        // fclose
000000000020edf0         dq         0x000000000020f2b0                          ; DATA XREF=j_fclose
                     getpwuid@GOT:        // getpwuid
000000000020edf8         dq         0x000000000020f2b8                          ; DATA XREF=j_getpwuid
                     bindtextdomain@GOT:        // bindtextdomain
000000000020ee00         dq         0x000000000020f2c0                          ; DATA XREF=j_bindtextdomain
                     stpcpy@GOT:        // stpcpy
000000000020ee08         dq         0x000000000020f2c8                          ; DATA XREF=j_stpcpy
                     dcgettext@GOT:        // dcgettext
000000000020ee10         dq         0x000000000020f2d0                          ; DATA XREF=j_dcgettext
                     __ctype_get_mb_cur_max@GOT:        // __ctype_get_mb_cur_max
000000000020ee18         dq         0x000000000020f2d8                          ; DATA XREF=j___ctype_get_mb_cur_max
                     strlen@GOT:        // strlen
000000000020ee20         dq         0x000000000020f2e0                          ; DATA XREF=j_strlen
                     __lxstat@GOT:        // __lxstat
000000000020ee28         dq         0x000000000020f2e8                          ; DATA XREF=j___lxstat
                     openat@GOT:        // openat
000000000020ee30         dq         0x000000000020f2f0                          ; DATA XREF=j_openat
                     __stack_chk_fail@GOT:        // __stack_chk_fail
000000000020ee38         dq         0x000000000020f2f8                          ; DATA XREF=j___stack_chk_fail
                     getopt_long@GOT:        // getopt_long
000000000020ee40         dq         0x000000000020f300                          ; DATA XREF=j_getopt_long
                     mbrtowc@GOT:        // mbrtowc
000000000020ee48         dq         0x000000000020f308                          ; DATA XREF=j_mbrtowc
                     strchr@GOT:        // strchr
000000000020ee50         dq         0x000000000020f310                          ; DATA XREF=j_strchr
                     getgrgid@GOT:        // getgrgid
000000000020ee58         dq         0x000000000020f318                          ; DATA XREF=j_getgrgid
                     __fxstatat@GOT:        // __fxstatat
000000000020ee60         dq         0x000000000020f320                          ; DATA XREF=j___fxstatat
                     strrchr@GOT:        // strrchr
000000000020ee68         dq         0x000000000020f328                          ; DATA XREF=j_strrchr
                     lseek@GOT:        // lseek
000000000020ee70         dq         0x000000000020f330                          ; DATA XREF=j_lseek
                     __assert_fail@GOT:        // __assert_fail
000000000020ee78         dq         0x000000000020f338                          ; DATA XREF=j___assert_fail
                     memset@GOT:        // memset
000000000020ee80         dq         0x000000000020f340                          ; DATA XREF=j_memset
                     close@GOT:        // close
000000000020ee88         dq         0x000000000020f348                          ; DATA XREF=j_close
                     __openat_2@GOT:        // __openat_2
000000000020ee90         dq         0x000000000020f350                          ; DATA XREF=j___openat_2
                     closedir@GOT:        // closedir
000000000020ee98         dq         0x000000000020f358                          ; DATA XREF=j_closedir
                     memcmp@GOT:        // memcmp
000000000020eea0         dq         0x000000000020f368                          ; DATA XREF=j_memcmp
                     fputs_unlocked@GOT:        // fputs_unlocked
000000000020eea8         dq         0x000000000020f370                          ; DATA XREF=j_fputs_unlocked
                     calloc@GOT:        // calloc
000000000020eeb0         dq         0x000000000020f378                          ; DATA XREF=j_calloc
                     dirfd@GOT:        // dirfd
000000000020eeb8         dq         0x000000000020f380                          ; DATA XREF=j_dirfd
                     getpwnam@GOT:        // getpwnam
000000000020eec0         dq         0x000000000020f388                          ; DATA XREF=j_getpwnam
                     memcpy@GOT:        // memcpy
000000000020eec8         dq         0x000000000020f398                          ; DATA XREF=j_memcpy
                     getgrnam@GOT:        // getgrnam
000000000020eed0         dq         0x000000000020f3a0                          ; DATA XREF=j_getgrnam
                     fileno@GOT:        // fileno
000000000020eed8         dq         0x000000000020f3a8                          ; DATA XREF=j_fileno
                     __xstat@GOT:        // __xstat
000000000020eee0         dq         0x000000000020f3b0                          ; DATA XREF=j___xstat
                     readdir@GOT:        // readdir
000000000020eee8         dq         0x000000000020f3b8                          ; DATA XREF=j_readdir
                     malloc@GOT:        // malloc
000000000020eef0         dq         0x000000000020f3c0                          ; DATA XREF=j_malloc
                     fflush@GOT:        // fflush
000000000020eef8         dq         0x000000000020f3c8                          ; DATA XREF=j_fflush
                     nl_langinfo@GOT:        // nl_langinfo
000000000020ef00         dq         0x000000000020f3d0                          ; DATA XREF=j_nl_langinfo
                     __fxstat@GOT:        // __fxstat
000000000020ef08         dq         0x000000000020f3d8                          ; DATA XREF=j___fxstat
                     endpwent@GOT:        // endpwent
000000000020ef10         dq         0x000000000020f3e0                          ; DATA XREF=j_endpwent
                     __freading@GOT:        // __freading
000000000020ef18         dq         0x000000000020f3e8                          ; DATA XREF=j___freading
                     fchdir@GOT:        // fchdir
000000000020ef20         dq         0x000000000020f3f0                          ; DATA XREF=j_fchdir
                     realloc@GOT:        // realloc
000000000020ef28         dq         0x000000000020f3f8                          ; DATA XREF=j_realloc
                     setlocale@GOT:        // setlocale
000000000020ef30         dq         0x000000000020f400                          ; DATA XREF=j_setlocale
                     __printf_chk@GOT:        // __printf_chk
000000000020ef38         dq         0x000000000020f408                          ; DATA XREF=j___printf_chk
                     memmove@GOT:        // memmove
000000000020ef40         dq         0x000000000020f410                          ; DATA XREF=j_memmove
                     error@GOT:        // error
000000000020ef48         dq         0x000000000020f418                          ; DATA XREF=j_error
                     open@GOT:        // open
000000000020ef50         dq         0x000000000020f420                          ; DATA XREF=j_open
                     fseeko@GOT:        // fseeko
000000000020ef58         dq         0x000000000020f428                          ; DATA XREF=j_fseeko
                     fchown@GOT:        // fchown
000000000020ef60         dq         0x000000000020f430                          ; DATA XREF=j_fchown
                     fdopendir@GOT:        // fdopendir
000000000020ef68         dq         0x000000000020f438                          ; DATA XREF=j_fdopendir
                     strtoul@GOT:        // strtoul
000000000020ef70         dq         0x000000000020f440                          ; DATA XREF=j_strtoul
                     fstatfs@GOT:        // fstatfs
000000000020ef78         dq         0x000000000020f448                          ; DATA XREF=j_fstatfs
                     __cxa_atexit@GOT:        // __cxa_atexit
000000000020ef80         dq         0x000000000020f450                          ; DATA XREF=j___cxa_atexit
                     fchownat@GOT:        // fchownat
000000000020ef88         dq         0x000000000020f458                          ; DATA XREF=j_fchownat
                     exit@GOT:        // exit
000000000020ef90         dq         0x000000000020f460                          ; DATA XREF=j_exit
                     fwrite@GOT:        // fwrite
000000000020ef98         dq         0x000000000020f468                          ; DATA XREF=j_fwrite
                     __fprintf_chk@GOT:        // __fprintf_chk
000000000020efa0         dq         0x000000000020f470                          ; DATA XREF=j___fprintf_chk
                     mbsinit@GOT:        // mbsinit
000000000020efa8         dq         0x000000000020f480                          ; DATA XREF=j_mbsinit
                     iswprint@GOT:        // iswprint
000000000020efb0         dq         0x000000000020f488                          ; DATA XREF=j_iswprint
                     __ctype_b_loc@GOT:        // __ctype_b_loc
000000000020efb8         dq         0x000000000020f498                          ; DATA XREF=j___ctype_b_loc
                     qword_20efc0:
000000000020efc0         dq         0x0000000000000000                          ; DATA XREF=sub_1de0, filesystem_type+96, setup_dir.isra.4+12
                     qword_20efc8:
000000000020efc8         dq         0x0000000000000000                          ; DATA XREF=deregister_tm_clones+23
000000000020efd0         db  0x00 ; '.'                                         ; DATA XREF=_start+36
000000000020efd1         db  0x00 ; '.'
000000000020efd2         db  0x00 ; '.'
000000000020efd3         db  0x00 ; '.'
000000000020efd4         db  0x00 ; '.'
000000000020efd5         db  0x00 ; '.'
000000000020efd6         db  0x00 ; '.'
000000000020efd7         db  0x00 ; '.'
                     qword_20efd8:
000000000020efd8         dq         0x0000000000000000                          ; DATA XREF=_init+4
                     qword_20efe0:
000000000020efe0         dq         0x0000000000000000                          ; DATA XREF=register_tm_clones+40
                     qword_20efe8:
000000000020efe8         dq         0x0000000000000000                          ; DATA XREF=j_qword_20efe8, __do_global_dtors_aux+9
000000000020eff0         db  0x00 ; '.'
000000000020eff1         db  0x00 ; '.'
000000000020eff2         db  0x00 ; '.'
000000000020eff3         db  0x00 ; '.'
000000000020eff4         db  0x00 ; '.'
000000000020eff5         db  0x00 ; '.'
000000000020eff6         db  0x00 ; '.'
000000000020eff7         db  0x00 ; '.'
000000000020eff8         db  0x00 ; '.'
000000000020eff9         db  0x00 ; '.'
000000000020effa         db  0x00 ; '.'
000000000020effb         db  0x00 ; '.'
000000000020effc         db  0x00 ; '.'
000000000020effd         db  0x00 ; '.'
000000000020effe         db  0x00 ; '.'
000000000020efff         db  0x00 ; '.'


        ; Section .data
        ; Range: [0x20f000; 0x20f080[ (128 bytes)
        ; File offset : [61440; 61568[ (128 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

000000000020f000         db  0x00 ; '.'
000000000020f001         db  0x00 ; '.'
000000000020f002         db  0x00 ; '.'
000000000020f003         db  0x00 ; '.'
000000000020f004         db  0x00 ; '.'
000000000020f005         db  0x00 ; '.'
000000000020f006         db  0x00 ; '.'
000000000020f007         db  0x00 ; '.'
                     __dso_handle:
000000000020f008         dq         0x000000000020f008                          ; DATA XREF=__do_global_dtors_aux+23, atexit, __dso_handle
                     Version:
000000000020f010         dq         0x000000000000ba94                          ; "8.31", DATA XREF=main+430
                     exit_failure:
000000000020f018         dd         0x00000001                                  ; DATA XREF=close_stdout+130, xalloc_die+23
000000000020f01c         db  0x00 ; '.'
000000000020f01d         db  0x00 ; '.'
000000000020f01e         db  0x00 ; '.'
000000000020f01f         db  0x00 ; '.'
                     quote_quoting_options:
000000000020f020         db  0x08 ; '.'                                         ; DATA XREF=quote_n_mem, quote_mem, quote_n, quote
000000000020f021         db  0x00 ; '.'
000000000020f022         db  0x00 ; '.'
000000000020f023         db  0x00 ; '.'
000000000020f024         db  0x00 ; '.'
000000000020f025         db  0x00 ; '.'
000000000020f026         db  0x00 ; '.'
000000000020f027         db  0x00 ; '.'
000000000020f028         db  0x00 ; '.'
000000000020f029         db  0x00 ; '.'
000000000020f02a         db  0x00 ; '.'
000000000020f02b         db  0x00 ; '.'
000000000020f02c         db  0x00 ; '.'
000000000020f02d         db  0x00 ; '.'
000000000020f02e         db  0x00 ; '.'
000000000020f02f         db  0x00 ; '.'
000000000020f030         db  0x00 ; '.'
000000000020f031         db  0x00 ; '.'
000000000020f032         db  0x00 ; '.'
000000000020f033         db  0x00 ; '.'
000000000020f034         db  0x00 ; '.'
000000000020f035         db  0x00 ; '.'
000000000020f036         db  0x00 ; '.'
000000000020f037         db  0x00 ; '.'
000000000020f038         db  0x00 ; '.'
000000000020f039         db  0x00 ; '.'
000000000020f03a         db  0x00 ; '.'
000000000020f03b         db  0x00 ; '.'
000000000020f03c         db  0x00 ; '.'
000000000020f03d         db  0x00 ; '.'
000000000020f03e         db  0x00 ; '.'
000000000020f03f         db  0x00 ; '.'
000000000020f040         db  0x00 ; '.'
000000000020f041         db  0x00 ; '.'
000000000020f042         db  0x00 ; '.'
000000000020f043         db  0x00 ; '.'
000000000020f044         db  0x00 ; '.'
000000000020f045         db  0x00 ; '.'
000000000020f046         db  0x00 ; '.'
000000000020f047         db  0x00 ; '.'
000000000020f048         db  0x00 ; '.'
000000000020f049         db  0x00 ; '.'
000000000020f04a         db  0x00 ; '.'
000000000020f04b         db  0x00 ; '.'
000000000020f04c         db  0x00 ; '.'
000000000020f04d         db  0x00 ; '.'
000000000020f04e         db  0x00 ; '.'
000000000020f04f         db  0x00 ; '.'
000000000020f050         db  0x00 ; '.'
000000000020f051         db  0x00 ; '.'
000000000020f052         db  0x00 ; '.'
000000000020f053         db  0x00 ; '.'
000000000020f054         db  0x00 ; '.'
000000000020f055         db  0x00 ; '.'
000000000020f056         db  0x00 ; '.'
000000000020f057         db  0x00 ; '.'
                     nslots:
000000000020f058         dd         0x00000001                                  ; DATA XREF=quotearg_n_options+58, quotearg_n_options+125, quotearg_n_options+158, quotearg_free, quotearg_free+133
000000000020f05c         align      32
                     slotvec:
000000000020f060         dq         0x000000000020f070                          ; DATA XREF=quotearg_n_options+41, quotearg_n_options+118, quotearg_n_options+402, quotearg_free+8, quotearg_free+125
000000000020f068         db  0x00 ; '.'
000000000020f069         db  0x00 ; '.'
000000000020f06a         db  0x00 ; '.'
000000000020f06b         db  0x00 ; '.'
000000000020f06c         db  0x00 ; '.'
000000000020f06d         db  0x00 ; '.'
000000000020f06e         db  0x00 ; '.'
000000000020f06f         db  0x00 ; '.'
                     slotvec0:
000000000020f070         dq         1.26481e-321, 1.06661e-317                  ; DATA XREF=quotearg_n_options+84, quotearg_n_options+391, quotearg_free+87, quotearg_free+105, slotvec


        ; Section .bss
        ; Range: [0x20f080; 0x20f240[ (448 bytes)
        ; No data on disk
        ; Flags: 0x3
        ;   SHT_NOBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     program_invocation_short_name@@GLIBC_2.2.5:
000000000020f080         db  0x00 ; '.'                                         ; DATA XREF=deregister_tm_clones, deregister_tm_clones+8, register_tm_clones, register_tm_clones+7, set_program_name+102
000000000020f081         db  0x00 ; '.'
000000000020f082         db  0x00 ; '.'
000000000020f083         db  0x00 ; '.'
000000000020f084         db  0x00 ; '.'
000000000020f085         db  0x00 ; '.'
000000000020f086         db  0x00 ; '.'
000000000020f087         db  0x00 ; '.'
                     stdout@@GLIBC_2.2.5:
000000000020f088         db  0x00 ; '.'                                         ; DATA XREF=main+423, usage+128, usage+165, usage+202, usage+239, usage+276, usage+313, usage+350, usage+387, usage+424, usage+461
000000000020f089         db  0x00 ; '.'
000000000020f08a         db  0x00 ; '.'
000000000020f08b         db  0x00 ; '.'
000000000020f08c         db  0x00 ; '.'
000000000020f08d         db  0x00 ; '.'
000000000020f08e         db  0x00 ; '.'
000000000020f08f         db  0x00 ; '.'
                     optind@@GLIBC_2.2.5:
000000000020f090         db  0x00 ; '.'                                         ; DATA XREF=main+732, main+857, main+1039, main+1181
000000000020f091         db  0x00 ; '.'
000000000020f092         db  0x00 ; '.'
000000000020f093         db  0x00 ; '.'
000000000020f094         db  0x00 ; '.'
000000000020f095         db  0x00 ; '.'
000000000020f096         db  0x00 ; '.'
000000000020f097         db  0x00 ; '.'
                     optarg@@GLIBC_2.2.5:
000000000020f098         db  0x00 ; '.'                                         ; DATA XREF=main+368, main+548, main+571
000000000020f099         db  0x00 ; '.'
000000000020f09a         db  0x00 ; '.'
000000000020f09b         db  0x00 ; '.'
000000000020f09c         db  0x00 ; '.'
000000000020f09d         db  0x00 ; '.'
000000000020f09e         db  0x00 ; '.'
000000000020f09f         db  0x00 ; '.'
                     __progname_full@@GLIBC_2.2.5:
000000000020f0a0         db  0x00 ; '.'                                         ; DATA XREF=set_program_name+116
000000000020f0a1         db  0x00 ; '.'
000000000020f0a2         db  0x00 ; '.'
000000000020f0a3         db  0x00 ; '.'
000000000020f0a4         db  0x00 ; '.'
000000000020f0a5         db  0x00 ; '.'
000000000020f0a6         db  0x00 ; '.'
000000000020f0a7         db  0x00 ; '.'
000000000020f0a8         db  0x00 ; '.'
000000000020f0a9         db  0x00 ; '.'
000000000020f0aa         db  0x00 ; '.'
000000000020f0ab         db  0x00 ; '.'
000000000020f0ac         db  0x00 ; '.'
000000000020f0ad         db  0x00 ; '.'
000000000020f0ae         db  0x00 ; '.'
000000000020f0af         db  0x00 ; '.'
000000000020f0b0         db  0x00 ; '.'
000000000020f0b1         db  0x00 ; '.'
000000000020f0b2         db  0x00 ; '.'
000000000020f0b3         db  0x00 ; '.'
000000000020f0b4         db  0x00 ; '.'
000000000020f0b5         db  0x00 ; '.'
000000000020f0b6         db  0x00 ; '.'
000000000020f0b7         db  0x00 ; '.'
000000000020f0b8         db  0x00 ; '.'
000000000020f0b9         db  0x00 ; '.'
000000000020f0ba         db  0x00 ; '.'
000000000020f0bb         db  0x00 ; '.'
000000000020f0bc         db  0x00 ; '.'
000000000020f0bd         db  0x00 ; '.'
000000000020f0be         db  0x00 ; '.'
000000000020f0bf         db  0x00 ; '.'
                     stderr@@GLIBC_2.2.5:
000000000020f0c0         db  0x00 ; '.'                                         ; DATA XREF=usage+61, close_stdout+44, set_program_name+125
000000000020f0c1         db  0x00 ; '.'
000000000020f0c2         db  0x00 ; '.'
000000000020f0c3         db  0x00 ; '.'
000000000020f0c4         db  0x00 ; '.'
000000000020f0c5         db  0x00 ; '.'
000000000020f0c6         db  0x00 ; '.'
000000000020f0c7         db  0x00 ; '.'
                     completed.7697:
000000000020f0c8         db  0x00 ; '.'                                         ; DATA XREF=__do_global_dtors_aux, __do_global_dtors_aux+40
000000000020f0c9         db  0x00 ; '.'
000000000020f0ca         db  0x00 ; '.'
000000000020f0cb         db  0x00 ; '.'
000000000020f0cc         db  0x00 ; '.'
000000000020f0cd         db  0x00 ; '.'
000000000020f0ce         db  0x00 ; '.'
000000000020f0cf         db  0x00 ; '.'
                     dev_ino_buf.7022:
000000000020f0d0         db  0x00 ; '.'                                         ; DATA XREF=main+1051
000000000020f0d1         db  0x00 ; '.'
000000000020f0d2         db  0x00 ; '.'
000000000020f0d3         db  0x00 ; '.'
000000000020f0d4         db  0x00 ; '.'
000000000020f0d5         db  0x00 ; '.'
000000000020f0d6         db  0x00 ; '.'
000000000020f0d7         db  0x00 ; '.'
000000000020f0d8         db  0x00 ; '.'
000000000020f0d9         db  0x00 ; '.'
000000000020f0da         db  0x00 ; '.'
000000000020f0db         db  0x00 ; '.'
000000000020f0dc         db  0x00 ; '.'
000000000020f0dd         db  0x00 ; '.'
000000000020f0de         db  0x00 ; '.'
000000000020f0df         db  0x00 ; '.'
                     reference_file:
000000000020f0e0         db  0x00 ; '.'                                         ; DATA XREF=main+375, main+742
000000000020f0e1         db  0x00 ; '.'
000000000020f0e2         db  0x00 ; '.'
000000000020f0e3         db  0x00 ; '.'
000000000020f0e4         db  0x00 ; '.'
000000000020f0e5         db  0x00 ; '.'
000000000020f0e6         db  0x00 ; '.'
000000000020f0e7         db  0x00 ; '.'
                     ignore_EPIPE:
000000000020f0e8         db  0x00 ; '.'                                         ; DATA XREF=close_stdout_set_ignore_EPIPE, close_stdout+27
000000000020f0e9         db  0x00 ; '.'
000000000020f0ea         db  0x00 ; '.'
000000000020f0eb         db  0x00 ; '.'
000000000020f0ec         db  0x00 ; '.'
000000000020f0ed         db  0x00 ; '.'
000000000020f0ee         db  0x00 ; '.'
000000000020f0ef         db  0x00 ; '.'
                     file_name:
000000000020f0f0         db  0x00 ; '.'                                         ; DATA XREF=close_stdout_set_file_name, close_stdout+86
000000000020f0f1         db  0x00 ; '.'
000000000020f0f2         db  0x00 ; '.'
000000000020f0f3         db  0x00 ; '.'
000000000020f0f4         db  0x00 ; '.'
000000000020f0f5         db  0x00 ; '.'
000000000020f0f6         db  0x00 ; '.'
000000000020f0f7         db  0x00 ; '.'
                     program_name:
000000000020f0f8         db  0x00 ; '.'                                         ; DATA XREF=usage+20, usage+572, set_program_name+109
000000000020f0f9         db  0x00 ; '.'
000000000020f0fa         db  0x00 ; '.'
000000000020f0fb         db  0x00 ; '.'
000000000020f0fc         db  0x00 ; '.'
000000000020f0fd         db  0x00 ; '.'
000000000020f0fe         db  0x00 ; '.'
000000000020f0ff         db  0x00 ; '.'
                     slot0:
000000000020f100         db  0x00 ; '.'                                         ; DATA XREF=quotearg_n_options+254, quotearg_free+70, slotvec0
000000000020f101         db  0x00 ; '.'
000000000020f102         db  0x00 ; '.'
000000000020f103         db  0x00 ; '.'
000000000020f104         db  0x00 ; '.'
000000000020f105         db  0x00 ; '.'
000000000020f106         db  0x00 ; '.'
000000000020f107         db  0x00 ; '.'
000000000020f108         db  0x00 ; '.'
000000000020f109         db  0x00 ; '.'
000000000020f10a         db  0x00 ; '.'
000000000020f10b         db  0x00 ; '.'
000000000020f10c         db  0x00 ; '.'
000000000020f10d         db  0x00 ; '.'
000000000020f10e         db  0x00 ; '.'
000000000020f10f         db  0x00 ; '.'
000000000020f110         db  0x00 ; '.'
000000000020f111         db  0x00 ; '.'
000000000020f112         db  0x00 ; '.'
000000000020f113         db  0x00 ; '.'
000000000020f114         db  0x00 ; '.'
000000000020f115         db  0x00 ; '.'
000000000020f116         db  0x00 ; '.'
000000000020f117         db  0x00 ; '.'
000000000020f118         db  0x00 ; '.'
000000000020f119         db  0x00 ; '.'
000000000020f11a         db  0x00 ; '.'
000000000020f11b         db  0x00 ; '.'
000000000020f11c         db  0x00 ; '.'
000000000020f11d         db  0x00 ; '.'
000000000020f11e         db  0x00 ; '.'
000000000020f11f         db  0x00 ; '.'
000000000020f120         db  0x00 ; '.'
000000000020f121         db  0x00 ; '.'
000000000020f122         db  0x00 ; '.'
000000000020f123         db  0x00 ; '.'
000000000020f124         db  0x00 ; '.'
000000000020f125         db  0x00 ; '.'
000000000020f126         db  0x00 ; '.'
000000000020f127         db  0x00 ; '.'
000000000020f128         db  0x00 ; '.'
000000000020f129         db  0x00 ; '.'
000000000020f12a         db  0x00 ; '.'
000000000020f12b         db  0x00 ; '.'
000000000020f12c         db  0x00 ; '.'
000000000020f12d         db  0x00 ; '.'
000000000020f12e         db  0x00 ; '.'
000000000020f12f         db  0x00 ; '.'
000000000020f130         db  0x00 ; '.'
000000000020f131         db  0x00 ; '.'
000000000020f132         db  0x00 ; '.'
000000000020f133         db  0x00 ; '.'
000000000020f134         db  0x00 ; '.'
000000000020f135         db  0x00 ; '.'
000000000020f136         db  0x00 ; '.'
000000000020f137         db  0x00 ; '.'
000000000020f138         db  0x00 ; '.'
000000000020f139         db  0x00 ; '.'
000000000020f13a         db  0x00 ; '.'
000000000020f13b         db  0x00 ; '.'
000000000020f13c         db  0x00 ; '.'
000000000020f13d         db  0x00 ; '.'
000000000020f13e         db  0x00 ; '.'
000000000020f13f         db  0x00 ; '.'
000000000020f140         db  0x00 ; '.'
000000000020f141         db  0x00 ; '.'
000000000020f142         db  0x00 ; '.'
000000000020f143         db  0x00 ; '.'
000000000020f144         db  0x00 ; '.'
000000000020f145         db  0x00 ; '.'
000000000020f146         db  0x00 ; '.'
000000000020f147         db  0x00 ; '.'
000000000020f148         db  0x00 ; '.'
000000000020f149         db  0x00 ; '.'
000000000020f14a         db  0x00 ; '.'
000000000020f14b         db  0x00 ; '.'
000000000020f14c         db  0x00 ; '.'
000000000020f14d         db  0x00 ; '.'
000000000020f14e         db  0x00 ; '.'
000000000020f14f         db  0x00 ; '.'
000000000020f150         db  0x00 ; '.'
000000000020f151         db  0x00 ; '.'
000000000020f152         db  0x00 ; '.'
000000000020f153         db  0x00 ; '.'
000000000020f154         db  0x00 ; '.'
000000000020f155         db  0x00 ; '.'
000000000020f156         db  0x00 ; '.'
000000000020f157         db  0x00 ; '.'
000000000020f158         db  0x00 ; '.'
000000000020f159         db  0x00 ; '.'
000000000020f15a         db  0x00 ; '.'
000000000020f15b         db  0x00 ; '.'
000000000020f15c         db  0x00 ; '.'
000000000020f15d         db  0x00 ; '.'
000000000020f15e         db  0x00 ; '.'
000000000020f15f         db  0x00 ; '.'
000000000020f160         db  0x00 ; '.'
000000000020f161         db  0x00 ; '.'
000000000020f162         db  0x00 ; '.'
000000000020f163         db  0x00 ; '.'
000000000020f164         db  0x00 ; '.'
000000000020f165         db  0x00 ; '.'
000000000020f166         db  0x00 ; '.'
000000000020f167         db  0x00 ; '.'
000000000020f168         db  0x00 ; '.'
000000000020f169         db  0x00 ; '.'
000000000020f16a         db  0x00 ; '.'
000000000020f16b         db  0x00 ; '.'
000000000020f16c         db  0x00 ; '.'
000000000020f16d         db  0x00 ; '.'
000000000020f16e         db  0x00 ; '.'
000000000020f16f         db  0x00 ; '.'
000000000020f170         db  0x00 ; '.'
000000000020f171         db  0x00 ; '.'
000000000020f172         db  0x00 ; '.'
000000000020f173         db  0x00 ; '.'
000000000020f174         db  0x00 ; '.'
000000000020f175         db  0x00 ; '.'
000000000020f176         db  0x00 ; '.'
000000000020f177         db  0x00 ; '.'
000000000020f178         db  0x00 ; '.'
000000000020f179         db  0x00 ; '.'
000000000020f17a         db  0x00 ; '.'
000000000020f17b         db  0x00 ; '.'
000000000020f17c         db  0x00 ; '.'
000000000020f17d         db  0x00 ; '.'
000000000020f17e         db  0x00 ; '.'
000000000020f17f         db  0x00 ; '.'
000000000020f180         db  0x00 ; '.'
000000000020f181         db  0x00 ; '.'
000000000020f182         db  0x00 ; '.'
000000000020f183         db  0x00 ; '.'
000000000020f184         db  0x00 ; '.'
000000000020f185         db  0x00 ; '.'
000000000020f186         db  0x00 ; '.'
000000000020f187         db  0x00 ; '.'
000000000020f188         db  0x00 ; '.'
000000000020f189         db  0x00 ; '.'
000000000020f18a         db  0x00 ; '.'
000000000020f18b         db  0x00 ; '.'
000000000020f18c         db  0x00 ; '.'
000000000020f18d         db  0x00 ; '.'
000000000020f18e         db  0x00 ; '.'
000000000020f18f         db  0x00 ; '.'
000000000020f190         db  0x00 ; '.'
000000000020f191         db  0x00 ; '.'
000000000020f192         db  0x00 ; '.'
000000000020f193         db  0x00 ; '.'
000000000020f194         db  0x00 ; '.'
000000000020f195         db  0x00 ; '.'
000000000020f196         db  0x00 ; '.'
000000000020f197         db  0x00 ; '.'
000000000020f198         db  0x00 ; '.'
000000000020f199         db  0x00 ; '.'
000000000020f19a         db  0x00 ; '.'
000000000020f19b         db  0x00 ; '.'
000000000020f19c         db  0x00 ; '.'
000000000020f19d         db  0x00 ; '.'
000000000020f19e         db  0x00 ; '.'
000000000020f19f         db  0x00 ; '.'
000000000020f1a0         db  0x00 ; '.'
000000000020f1a1         db  0x00 ; '.'
000000000020f1a2         db  0x00 ; '.'
000000000020f1a3         db  0x00 ; '.'
000000000020f1a4         db  0x00 ; '.'
000000000020f1a5         db  0x00 ; '.'
000000000020f1a6         db  0x00 ; '.'
000000000020f1a7         db  0x00 ; '.'
000000000020f1a8         db  0x00 ; '.'
000000000020f1a9         db  0x00 ; '.'
000000000020f1aa         db  0x00 ; '.'
000000000020f1ab         db  0x00 ; '.'
000000000020f1ac         db  0x00 ; '.'
000000000020f1ad         db  0x00 ; '.'
000000000020f1ae         db  0x00 ; '.'
000000000020f1af         db  0x00 ; '.'
000000000020f1b0         db  0x00 ; '.'
000000000020f1b1         db  0x00 ; '.'
000000000020f1b2         db  0x00 ; '.'
000000000020f1b3         db  0x00 ; '.'
000000000020f1b4         db  0x00 ; '.'
000000000020f1b5         db  0x00 ; '.'
000000000020f1b6         db  0x00 ; '.'
000000000020f1b7         db  0x00 ; '.'
000000000020f1b8         db  0x00 ; '.'
000000000020f1b9         db  0x00 ; '.'
000000000020f1ba         db  0x00 ; '.'
000000000020f1bb         db  0x00 ; '.'
000000000020f1bc         db  0x00 ; '.'
000000000020f1bd         db  0x00 ; '.'
000000000020f1be         db  0x00 ; '.'
000000000020f1bf         db  0x00 ; '.'
000000000020f1c0         db  0x00 ; '.'
000000000020f1c1         db  0x00 ; '.'
000000000020f1c2         db  0x00 ; '.'
000000000020f1c3         db  0x00 ; '.'
000000000020f1c4         db  0x00 ; '.'
000000000020f1c5         db  0x00 ; '.'
000000000020f1c6         db  0x00 ; '.'
000000000020f1c7         db  0x00 ; '.'
000000000020f1c8         db  0x00 ; '.'
000000000020f1c9         db  0x00 ; '.'
000000000020f1ca         db  0x00 ; '.'
000000000020f1cb         db  0x00 ; '.'
000000000020f1cc         db  0x00 ; '.'
000000000020f1cd         db  0x00 ; '.'
000000000020f1ce         db  0x00 ; '.'
000000000020f1cf         db  0x00 ; '.'
000000000020f1d0         db  0x00 ; '.'
000000000020f1d1         db  0x00 ; '.'
000000000020f1d2         db  0x00 ; '.'
000000000020f1d3         db  0x00 ; '.'
000000000020f1d4         db  0x00 ; '.'
000000000020f1d5         db  0x00 ; '.'
000000000020f1d6         db  0x00 ; '.'
000000000020f1d7         db  0x00 ; '.'
000000000020f1d8         db  0x00 ; '.'
000000000020f1d9         db  0x00 ; '.'
000000000020f1da         db  0x00 ; '.'
000000000020f1db         db  0x00 ; '.'
000000000020f1dc         db  0x00 ; '.'
000000000020f1dd         db  0x00 ; '.'
000000000020f1de         db  0x00 ; '.'
000000000020f1df         db  0x00 ; '.'
000000000020f1e0         db  0x00 ; '.'
000000000020f1e1         db  0x00 ; '.'
000000000020f1e2         db  0x00 ; '.'
000000000020f1e3         db  0x00 ; '.'
000000000020f1e4         db  0x00 ; '.'
000000000020f1e5         db  0x00 ; '.'
000000000020f1e6         db  0x00 ; '.'
000000000020f1e7         db  0x00 ; '.'
000000000020f1e8         db  0x00 ; '.'
000000000020f1e9         db  0x00 ; '.'
000000000020f1ea         db  0x00 ; '.'
000000000020f1eb         db  0x00 ; '.'
000000000020f1ec         db  0x00 ; '.'
000000000020f1ed         db  0x00 ; '.'
000000000020f1ee         db  0x00 ; '.'
000000000020f1ef         db  0x00 ; '.'
000000000020f1f0         db  0x00 ; '.'
000000000020f1f1         db  0x00 ; '.'
000000000020f1f2         db  0x00 ; '.'
000000000020f1f3         db  0x00 ; '.'
000000000020f1f4         db  0x00 ; '.'
000000000020f1f5         db  0x00 ; '.'
000000000020f1f6         db  0x00 ; '.'
000000000020f1f7         db  0x00 ; '.'
000000000020f1f8         db  0x00 ; '.'
000000000020f1f9         db  0x00 ; '.'
000000000020f1fa         db  0x00 ; '.'
000000000020f1fb         db  0x00 ; '.'
000000000020f1fc         db  0x00 ; '.'
000000000020f1fd         db  0x00 ; '.'
000000000020f1fe         db  0x00 ; '.'
000000000020f1ff         db  0x00 ; '.'
                     default_quoting_options:
000000000020f200         db  0x00 ; '.'                                         ; DATA XREF=clone_quoting_options+18, get_quoting_style, set_quoting_style, set_char_quoting, set_quoting_flags, set_custom_quoting, quotearg_buffer+4, quotearg_alloc_mem+4, quotearg_n, quotearg_n_mem, quotearg
000000000020f201         db  0x00 ; '.'
000000000020f202         db  0x00 ; '.'
000000000020f203         db  0x00 ; '.'
000000000020f204         db  0x00 ; '.'
000000000020f205         db  0x00 ; '.'
000000000020f206         db  0x00 ; '.'
000000000020f207         db  0x00 ; '.'
000000000020f208         db  0x00 ; '.'
000000000020f209         db  0x00 ; '.'
000000000020f20a         db  0x00 ; '.'
000000000020f20b         db  0x00 ; '.'
000000000020f20c         db  0x00 ; '.'
000000000020f20d         db  0x00 ; '.'
000000000020f20e         db  0x00 ; '.'
000000000020f20f         db  0x00 ; '.'
000000000020f210         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+65, quotearg_n_custom_mem+57
000000000020f211         db  0x00 ; '.'
000000000020f212         db  0x00 ; '.'
000000000020f213         db  0x00 ; '.'
000000000020f214         db  0x00 ; '.'
000000000020f215         db  0x00 ; '.'
000000000020f216         db  0x00 ; '.'
000000000020f217         db  0x00 ; '.'
000000000020f218         db  0x00 ; '.'
000000000020f219         db  0x00 ; '.'
000000000020f21a         db  0x00 ; '.'
000000000020f21b         db  0x00 ; '.'
000000000020f21c         db  0x00 ; '.'
000000000020f21d         db  0x00 ; '.'
000000000020f21e         db  0x00 ; '.'
000000000020f21f         db  0x00 ; '.'
000000000020f220         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+78, quotearg_n_custom_mem+70
000000000020f221         db  0x00 ; '.'
000000000020f222         db  0x00 ; '.'
000000000020f223         db  0x00 ; '.'
000000000020f224         db  0x00 ; '.'
000000000020f225         db  0x00 ; '.'
000000000020f226         db  0x00 ; '.'
000000000020f227         db  0x00 ; '.'
000000000020f228         db  0x00 ; '.'
000000000020f229         db  0x00 ; '.'
000000000020f22a         db  0x00 ; '.'
000000000020f22b         db  0x00 ; '.'
000000000020f22c         db  0x00 ; '.'
000000000020f22d         db  0x00 ; '.'
000000000020f22e         db  0x00 ; '.'
000000000020f22f         db  0x00 ; '.'
                     qword_20f230:
000000000020f230         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+22, quotearg_n_custom_mem+7
000000000020f231         db  0x00 ; '.'
000000000020f232         db  0x00 ; '.'
000000000020f233         db  0x00 ; '.'
000000000020f234         db  0x00 ; '.'
000000000020f235         db  0x00 ; '.'
000000000020f236         db  0x00 ; '.'
000000000020f237         db  0x00 ; '.'
                     have_dupfd_cloexec.3326:
000000000020f238         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+94, rpl_fcntl+143, rpl_fcntl+438, rpl_fcntl+574
000000000020f239         db  0x00 ; '.'
000000000020f23a         db  0x00 ; '.'
000000000020f23b         db  0x00 ; '.'
000000000020f23c         db  0x00 ; '.'
000000000020f23d         db  0x00 ; '.'
000000000020f23e         db  0x00 ; '.'
000000000020f23f         db  0x00 ; '.'


        ; Segment External Symbols
        ; Range: [0x20f250; 0x20f6f0[ (1184 bytes)
        ; No data on disk
        ; Permissions:  - 



        ; Section External Symbols Section
        ; Range: [0x20f250; 0x41e940[ (2160368 bytes)
        ; No data on disk

                             ; External Symbols Segment
                     endgrent:
000000000020f250         extern function code                                   ; DATA XREF=endgrent@GOT
                     free:
000000000020f258         extern function code
                     abort:
000000000020f260         extern function code                                   ; DATA XREF=abort@GOT
                     __errno_location:
000000000020f268         extern function code                                   ; DATA XREF=__errno_location@GOT
                     strncmp:
000000000020f270         extern function code                                   ; DATA XREF=strncmp@GOT
                     _ITM_deregisterTMCloneTable:
000000000020f278         extern function code
                     _exit:
000000000020f280         extern function code                                   ; DATA XREF=_exit@GOT
                     strcpy:
000000000020f288         extern function code                                   ; DATA XREF=strcpy@GOT
                     __fpending:
000000000020f290         extern function code                                   ; DATA XREF=__fpending@GOT
                     qsort:
000000000020f298         extern function code                                   ; DATA XREF=qsort@GOT
                     fcntl:
000000000020f2a0         extern function code                                   ; DATA XREF=fcntl@GOT
                     textdomain:
000000000020f2a8         extern function code                                   ; DATA XREF=textdomain@GOT
                     fclose:
000000000020f2b0         extern function code                                   ; DATA XREF=fclose@GOT
                     getpwuid:
000000000020f2b8         extern function code                                   ; DATA XREF=getpwuid@GOT
                     bindtextdomain:
000000000020f2c0         extern function code                                   ; DATA XREF=bindtextdomain@GOT
                     stpcpy:
000000000020f2c8         extern function code                                   ; DATA XREF=stpcpy@GOT
                     dcgettext:
000000000020f2d0         extern function code                                   ; DATA XREF=dcgettext@GOT
                     __ctype_get_mb_cur_max:
000000000020f2d8         extern function code                                   ; DATA XREF=__ctype_get_mb_cur_max@GOT
                     strlen:
000000000020f2e0         extern function code                                   ; DATA XREF=strlen@GOT
                     __lxstat:
000000000020f2e8         extern function code                                   ; DATA XREF=__lxstat@GOT
                     openat:
000000000020f2f0         extern function code                                   ; DATA XREF=openat@GOT
                     __stack_chk_fail:
000000000020f2f8         extern function code                                   ; DATA XREF=__stack_chk_fail@GOT
                     getopt_long:
000000000020f300         extern function code                                   ; DATA XREF=getopt_long@GOT
                     mbrtowc:
000000000020f308         extern function code                                   ; DATA XREF=mbrtowc@GOT
                     strchr:
000000000020f310         extern function code                                   ; DATA XREF=strchr@GOT
                     getgrgid:
000000000020f318         extern function code                                   ; DATA XREF=getgrgid@GOT
                     __fxstatat:
000000000020f320         extern function code                                   ; DATA XREF=__fxstatat@GOT
                     strrchr:
000000000020f328         extern function code                                   ; DATA XREF=strrchr@GOT
                     lseek:
000000000020f330         extern function code                                   ; DATA XREF=lseek@GOT
                     __assert_fail:
000000000020f338         extern function code                                   ; DATA XREF=__assert_fail@GOT
                     memset:
000000000020f340         extern function code                                   ; DATA XREF=memset@GOT
                     close:
000000000020f348         extern function code                                   ; DATA XREF=close@GOT
                     __openat_2:
000000000020f350         extern function code                                   ; DATA XREF=__openat_2@GOT
                     closedir:
000000000020f358         extern function code                                   ; DATA XREF=closedir@GOT
                     __libc_start_main:
000000000020f360         extern function code
                     memcmp:
000000000020f368         extern function code                                   ; DATA XREF=memcmp@GOT
                     fputs_unlocked:
000000000020f370         extern function code                                   ; DATA XREF=fputs_unlocked@GOT
                     calloc:
000000000020f378         extern function code                                   ; DATA XREF=calloc@GOT
                     dirfd:
000000000020f380         extern function code                                   ; DATA XREF=dirfd@GOT
                     getpwnam:
000000000020f388         extern function code                                   ; DATA XREF=getpwnam@GOT
                     __gmon_start__:
000000000020f390         extern function code
                     memcpy:
000000000020f398         extern function code                                   ; DATA XREF=memcpy@GOT
                     getgrnam:
000000000020f3a0         extern function code                                   ; DATA XREF=getgrnam@GOT
                     fileno:
000000000020f3a8         extern function code                                   ; DATA XREF=fileno@GOT
                     __xstat:
000000000020f3b0         extern function code                                   ; DATA XREF=__xstat@GOT
                     readdir:
000000000020f3b8         extern function code                                   ; DATA XREF=readdir@GOT
                     malloc:
000000000020f3c0         extern function code                                   ; DATA XREF=malloc@GOT
                     fflush:
000000000020f3c8         extern function code                                   ; DATA XREF=fflush@GOT
                     nl_langinfo:
000000000020f3d0         extern function code                                   ; DATA XREF=nl_langinfo@GOT
                     __fxstat:
000000000020f3d8         extern function code                                   ; DATA XREF=__fxstat@GOT
                     endpwent:
000000000020f3e0         extern function code                                   ; DATA XREF=endpwent@GOT
                     __freading:
000000000020f3e8         extern function code                                   ; DATA XREF=__freading@GOT
                     fchdir:
000000000020f3f0         extern function code                                   ; DATA XREF=fchdir@GOT
                     realloc:
000000000020f3f8         extern function code                                   ; DATA XREF=realloc@GOT
                     setlocale:
000000000020f400         extern function code                                   ; DATA XREF=setlocale@GOT
                     __printf_chk:
000000000020f408         extern function code                                   ; DATA XREF=__printf_chk@GOT
                     memmove:
000000000020f410         extern function code                                   ; DATA XREF=memmove@GOT
                     error:
000000000020f418         extern function code                                   ; DATA XREF=error@GOT
                     open:
000000000020f420         extern function code                                   ; DATA XREF=open@GOT
                     fseeko:
000000000020f428         extern function code                                   ; DATA XREF=fseeko@GOT
                     fchown:
000000000020f430         extern function code                                   ; DATA XREF=fchown@GOT
                     fdopendir:
000000000020f438         extern function code                                   ; DATA XREF=fdopendir@GOT
                     strtoul:
000000000020f440         extern function code                                   ; DATA XREF=strtoul@GOT
                     fstatfs:
000000000020f448         extern function code                                   ; DATA XREF=fstatfs@GOT
                     __cxa_atexit:
000000000020f450         extern function code                                   ; DATA XREF=__cxa_atexit@GOT
                     fchownat:
000000000020f458         extern function code                                   ; DATA XREF=fchownat@GOT
                     exit:
000000000020f460         extern function code                                   ; DATA XREF=exit@GOT
                     fwrite:
000000000020f468         extern function code                                   ; DATA XREF=fwrite@GOT
                     __fprintf_chk:
000000000020f470         extern function code                                   ; DATA XREF=__fprintf_chk@GOT
                     _ITM_registerTMCloneTable:
000000000020f478         extern function code
                     mbsinit:
000000000020f480         extern function code                                   ; DATA XREF=mbsinit@GOT
                     iswprint:
000000000020f488         extern function code                                   ; DATA XREF=iswprint@GOT
                     __cxa_finalize:
000000000020f490         extern function code
                     __ctype_b_loc:
000000000020f498         extern function code                                   ; DATA XREF=__ctype_b_loc@GOT
                     endgrent@@GLIBC_2.2.5:
000000000020f4a0         extern function code
                     free@@GLIBC_2.2.5:
000000000020f4a8         extern function code
                     abort@@GLIBC_2.2.5:
000000000020f4b0         extern function code
                     __errno_location@@GLIBC_2.2.5:
000000000020f4b8         extern function code
                     strncmp@@GLIBC_2.2.5:
000000000020f4c0         extern function code
                     _ITM_deregisterTMCloneTable_20f4c8:        // _ITM_deregisterTMCloneTable
000000000020f4c8         extern function code
                     _exit@@GLIBC_2.2.5:
000000000020f4d0         extern function code
                     strcpy@@GLIBC_2.2.5:
000000000020f4d8         extern function code
                     __fpending@@GLIBC_2.2.5:
000000000020f4e0         extern function code
                     qsort@@GLIBC_2.2.5:
000000000020f4e8         extern function code
                     fcntl@@GLIBC_2.2.5:
000000000020f4f0         extern function code
                     textdomain@@GLIBC_2.2.5:
000000000020f4f8         extern function code
                     fclose@@GLIBC_2.2.5:
000000000020f500         extern function code
                     getpwuid@@GLIBC_2.2.5:
000000000020f508         extern function code
                     bindtextdomain@@GLIBC_2.2.5:
000000000020f510         extern function code
                     stpcpy@@GLIBC_2.2.5:
000000000020f518         extern function code
                     dcgettext@@GLIBC_2.2.5:
000000000020f520         extern function code
                     __ctype_get_mb_cur_max@@GLIBC_2.2.5:
000000000020f528         extern function code
                     strlen@@GLIBC_2.2.5:
000000000020f530         extern function code
                     __lxstat@@GLIBC_2.2.5:
000000000020f538         extern function code
                     openat@@GLIBC_2.4:
000000000020f540         extern function code
                     __stack_chk_fail@@GLIBC_2.4:
000000000020f548         extern function code
                     getopt_long@@GLIBC_2.2.5:
000000000020f550         extern function code
                     mbrtowc@@GLIBC_2.2.5:
000000000020f558         extern function code
                     strchr@@GLIBC_2.2.5:
000000000020f560         extern function code
                     getgrgid@@GLIBC_2.2.5:
000000000020f568         extern function code
                     __fxstatat@@GLIBC_2.4:
000000000020f570         extern function code
                     strrchr@@GLIBC_2.2.5:
000000000020f578         extern function code
                     lseek@@GLIBC_2.2.5:
000000000020f580         extern function code
                     __assert_fail@@GLIBC_2.2.5:
000000000020f588         extern function code
                     memset@@GLIBC_2.2.5:
000000000020f590         extern function code
                     close@@GLIBC_2.2.5:
000000000020f598         extern function code
                     __openat_2@@GLIBC_2.7:
000000000020f5a0         extern function code
                     closedir@@GLIBC_2.2.5:
000000000020f5a8         extern function code
                     __libc_start_main@@GLIBC_2.2.5:
000000000020f5b0         extern function code
                     memcmp@@GLIBC_2.2.5:
000000000020f5b8         extern function code
                     fputs_unlocked@@GLIBC_2.2.5:
000000000020f5c0         extern function code
                     calloc@@GLIBC_2.2.5:
000000000020f5c8         extern function code
                     dirfd@@GLIBC_2.2.5:
000000000020f5d0         extern function code
                     getpwnam@@GLIBC_2.2.5:
000000000020f5d8         extern function code
                     __gmon_start___20f5e0:        // __gmon_start__
000000000020f5e0         extern function code
                     memcpy@@GLIBC_2.14:
000000000020f5e8         extern function code
                     getgrnam@@GLIBC_2.2.5:
000000000020f5f0         extern function code
                     fileno@@GLIBC_2.2.5:
000000000020f5f8         extern function code
                     __xstat@@GLIBC_2.2.5:
000000000020f600         extern function code
                     readdir@@GLIBC_2.2.5:
000000000020f608         extern function code
                     malloc@@GLIBC_2.2.5:
000000000020f610         extern function code
                     fflush@@GLIBC_2.2.5:
000000000020f618         extern function code
                     nl_langinfo@@GLIBC_2.2.5:
000000000020f620         extern function code
                     __fxstat@@GLIBC_2.2.5:
000000000020f628         extern function code
                     endpwent@@GLIBC_2.2.5:
000000000020f630         extern function code
                     __freading@@GLIBC_2.2.5:
000000000020f638         extern function code
                     fchdir@@GLIBC_2.2.5:
000000000020f640         extern function code
                     realloc@@GLIBC_2.2.5:
000000000020f648         extern function code
                     setlocale@@GLIBC_2.2.5:
000000000020f650         extern function code
                     __printf_chk@@GLIBC_2.3.4:
000000000020f658         extern function code
                     memmove@@GLIBC_2.2.5:
000000000020f660         extern function code
                     error@@GLIBC_2.2.5:
000000000020f668         extern function code
                     open@@GLIBC_2.2.5:
000000000020f670         extern function code
                     fseeko@@GLIBC_2.2.5:
000000000020f678         extern function code
                     fchown@@GLIBC_2.2.5:
000000000020f680         extern function code
                     fdopendir@@GLIBC_2.4:
000000000020f688         extern function code
                     strtoul@@GLIBC_2.2.5:
000000000020f690         extern function code
                     fstatfs@@GLIBC_2.2.5:
000000000020f698         extern function code
                     __cxa_atexit@@GLIBC_2.2.5:
000000000020f6a0         extern function code
                     fchownat@@GLIBC_2.4:
000000000020f6a8         extern function code
                     exit@@GLIBC_2.2.5:
000000000020f6b0         extern function code
                     fwrite@@GLIBC_2.2.5:
000000000020f6b8         extern function code
                     __fprintf_chk@@GLIBC_2.3.4:
000000000020f6c0         extern function code
                     _ITM_registerTMCloneTable_20f6c8:        // _ITM_registerTMCloneTable
000000000020f6c8         extern function code
                     mbsinit@@GLIBC_2.2.5:
000000000020f6d0         extern function code
                     iswprint@@GLIBC_2.2.5:
000000000020f6d8         extern function code
                     __cxa_finalize@@GLIBC_2.2.5:
000000000020f6e0         extern function code
                     __ctype_b_loc@@GLIBC_2.3:
000000000020f6e8         extern function code
