
/*
--------------------------------------------------------------------------------

        File: /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/expr
        UUID: CFCB9AA2-9F94-4037-4A77-940025C1129C
        Analysis version 58
        ELF file
        CPU: intel/x86_64
        64 bits addresses (Little Endian)

--------------------------------------------------------------------------------
*/



        ; Segment Segment 2
        ; Range: [0x0; 0x19df8[ (105976 bytes)
        ; File offset : [0; 105976[ (105976 bytes)
        ; Permissions: readable / executable
        ; Flags: 0x5

0000000000000000         db  0x7f ; '.'
0000000000000001         db  0x45 ; 'E'
0000000000000002         db  0x4c ; 'L'
0000000000000003         db  0x46 ; 'F'
0000000000000004         db  0x02 ; '.'
0000000000000005         db  0x01 ; '.'
0000000000000006         db  0x01 ; '.'
0000000000000007         db  0x00 ; '.'
0000000000000008         db  0x00 ; '.'
0000000000000009         db  0x00 ; '.'
000000000000000a         db  0x00 ; '.'
000000000000000b         db  0x00 ; '.'
000000000000000c         db  0x00 ; '.'
000000000000000d         db  0x00 ; '.'
000000000000000e         db  0x00 ; '.'
000000000000000f         db  0x00 ; '.'
0000000000000010         db  0x03 ; '.'
0000000000000011         db  0x00 ; '.'
0000000000000012         db  0x3e ; '>'
0000000000000013         db  0x00 ; '.'
0000000000000014         db  0x01 ; '.'
0000000000000015         db  0x00 ; '.'
0000000000000016         db  0x00 ; '.'
0000000000000017         db  0x00 ; '.'
0000000000000018         db  0xd0 ; '.'
0000000000000019         db  0x1f ; '.'
000000000000001a         db  0x00 ; '.'
000000000000001b         db  0x00 ; '.'
000000000000001c         db  0x00 ; '.'
000000000000001d         db  0x00 ; '.'
000000000000001e         db  0x00 ; '.'
000000000000001f         db  0x00 ; '.'
0000000000000020         db  0x40 ; '@'
0000000000000021         db  0x00 ; '.'
0000000000000022         db  0x00 ; '.'
0000000000000023         db  0x00 ; '.'
0000000000000024         db  0x00 ; '.'
0000000000000025         db  0x00 ; '.'
0000000000000026         db  0x00 ; '.'
0000000000000027         db  0x00 ; '.'
0000000000000028         db  0x40 ; '@'
0000000000000029         db  0x08 ; '.'
000000000000002a         db  0x08 ; '.'
000000000000002b         db  0x00 ; '.'
000000000000002c         db  0x00 ; '.'
000000000000002d         db  0x00 ; '.'
000000000000002e         db  0x00 ; '.'
000000000000002f         db  0x00 ; '.'
0000000000000030         db  0x00 ; '.'
0000000000000031         db  0x00 ; '.'
0000000000000032         db  0x00 ; '.'
0000000000000033         db  0x00 ; '.'
0000000000000034         db  0x40 ; '@'
0000000000000035         db  0x00 ; '.'
0000000000000036         db  0x38 ; '8'
0000000000000037         db  0x00 ; '.'
0000000000000038         db  0x09 ; '.'
0000000000000039         db  0x00 ; '.'
000000000000003a         db  0x40 ; '@'
000000000000003b         db  0x00 ; '.'
000000000000003c         db  0x25 ; '%'
000000000000003d         db  0x00 ; '.'
000000000000003e         db  0x24 ; '$'
000000000000003f         db  0x00 ; '.'
0000000000000040         db  0x06 ; '.'
0000000000000041         db  0x00 ; '.'
0000000000000042         db  0x00 ; '.'
0000000000000043         db  0x00 ; '.'
0000000000000044         db  0x04 ; '.'
0000000000000045         db  0x00 ; '.'
0000000000000046         db  0x00 ; '.'
0000000000000047         db  0x00 ; '.'
0000000000000048         db  0x40 ; '@'
0000000000000049         db  0x00 ; '.'
000000000000004a         db  0x00 ; '.'
000000000000004b         db  0x00 ; '.'
000000000000004c         db  0x00 ; '.'
000000000000004d         db  0x00 ; '.'
000000000000004e         db  0x00 ; '.'
000000000000004f         db  0x00 ; '.'
0000000000000050         db  0x40 ; '@'
0000000000000051         db  0x00 ; '.'
0000000000000052         db  0x00 ; '.'
0000000000000053         db  0x00 ; '.'
0000000000000054         db  0x00 ; '.'
0000000000000055         db  0x00 ; '.'
0000000000000056         db  0x00 ; '.'
0000000000000057         db  0x00 ; '.'
0000000000000058         db  0x40 ; '@'
0000000000000059         db  0x00 ; '.'
000000000000005a         db  0x00 ; '.'
000000000000005b         db  0x00 ; '.'
000000000000005c         db  0x00 ; '.'
000000000000005d         db  0x00 ; '.'
000000000000005e         db  0x00 ; '.'
000000000000005f         db  0x00 ; '.'
0000000000000060         db  0xf8 ; '.'
0000000000000061         db  0x01 ; '.'
0000000000000062         db  0x00 ; '.'
0000000000000063         db  0x00 ; '.'
0000000000000064         db  0x00 ; '.'
0000000000000065         db  0x00 ; '.'
0000000000000066         db  0x00 ; '.'
0000000000000067         db  0x00 ; '.'
0000000000000068         db  0xf8 ; '.'
0000000000000069         db  0x01 ; '.'
000000000000006a         db  0x00 ; '.'
000000000000006b         db  0x00 ; '.'
000000000000006c         db  0x00 ; '.'
000000000000006d         db  0x00 ; '.'
000000000000006e         db  0x00 ; '.'
000000000000006f         db  0x00 ; '.'
0000000000000070         db  0x08 ; '.'
0000000000000071         db  0x00 ; '.'
0000000000000072         db  0x00 ; '.'
0000000000000073         db  0x00 ; '.'
0000000000000074         db  0x00 ; '.'
0000000000000075         db  0x00 ; '.'
0000000000000076         db  0x00 ; '.'
0000000000000077         db  0x00 ; '.'
0000000000000078         db  0x03 ; '.'
0000000000000079         db  0x00 ; '.'
000000000000007a         db  0x00 ; '.'
000000000000007b         db  0x00 ; '.'
000000000000007c         db  0x04 ; '.'
000000000000007d         db  0x00 ; '.'
000000000000007e         db  0x00 ; '.'
000000000000007f         db  0x00 ; '.'
0000000000000080         db  0x38 ; '8'
0000000000000081         db  0x02 ; '.'
0000000000000082         db  0x00 ; '.'
0000000000000083         db  0x00 ; '.'
0000000000000084         db  0x00 ; '.'
0000000000000085         db  0x00 ; '.'
0000000000000086         db  0x00 ; '.'
0000000000000087         db  0x00 ; '.'
0000000000000088         db  0x38 ; '8'
0000000000000089         db  0x02 ; '.'
000000000000008a         db  0x00 ; '.'
000000000000008b         db  0x00 ; '.'
000000000000008c         db  0x00 ; '.'
000000000000008d         db  0x00 ; '.'
000000000000008e         db  0x00 ; '.'
000000000000008f         db  0x00 ; '.'
0000000000000090         db  0x38 ; '8'
0000000000000091         db  0x02 ; '.'
0000000000000092         db  0x00 ; '.'
0000000000000093         db  0x00 ; '.'
0000000000000094         db  0x00 ; '.'
0000000000000095         db  0x00 ; '.'
0000000000000096         db  0x00 ; '.'
0000000000000097         db  0x00 ; '.'
0000000000000098         db  0x1c ; '.'
0000000000000099         db  0x00 ; '.'
000000000000009a         db  0x00 ; '.'
000000000000009b         db  0x00 ; '.'
000000000000009c         db  0x00 ; '.'
000000000000009d         db  0x00 ; '.'
000000000000009e         db  0x00 ; '.'
000000000000009f         db  0x00 ; '.'
00000000000000a0         db  0x1c ; '.'
00000000000000a1         db  0x00 ; '.'
00000000000000a2         db  0x00 ; '.'
00000000000000a3         db  0x00 ; '.'
00000000000000a4         db  0x00 ; '.'
00000000000000a5         db  0x00 ; '.'
00000000000000a6         db  0x00 ; '.'
00000000000000a7         db  0x00 ; '.'
00000000000000a8         db  0x01 ; '.'
00000000000000a9         db  0x00 ; '.'
00000000000000aa         db  0x00 ; '.'
00000000000000ab         db  0x00 ; '.'
00000000000000ac         db  0x00 ; '.'
00000000000000ad         db  0x00 ; '.'
00000000000000ae         db  0x00 ; '.'
00000000000000af         db  0x00 ; '.'
00000000000000b0         db  0x01 ; '.'
00000000000000b1         db  0x00 ; '.'
00000000000000b2         db  0x00 ; '.'
00000000000000b3         db  0x00 ; '.'
00000000000000b4         db  0x05 ; '.'
00000000000000b5         db  0x00 ; '.'
00000000000000b6         db  0x00 ; '.'
00000000000000b7         db  0x00 ; '.'
00000000000000b8         db  0x00 ; '.'
00000000000000b9         db  0x00 ; '.'
00000000000000ba         db  0x00 ; '.'
00000000000000bb         db  0x00 ; '.'
00000000000000bc         db  0x00 ; '.'
00000000000000bd         db  0x00 ; '.'
00000000000000be         db  0x00 ; '.'
00000000000000bf         db  0x00 ; '.'
00000000000000c0         db  0x00 ; '.'
00000000000000c1         db  0x00 ; '.'
00000000000000c2         db  0x00 ; '.'
00000000000000c3         db  0x00 ; '.'
00000000000000c4         db  0x00 ; '.'
00000000000000c5         db  0x00 ; '.'
00000000000000c6         db  0x00 ; '.'
00000000000000c7         db  0x00 ; '.'
00000000000000c8         db  0x00 ; '.'
00000000000000c9         db  0x00 ; '.'
00000000000000ca         db  0x00 ; '.'
00000000000000cb         db  0x00 ; '.'
00000000000000cc         db  0x00 ; '.'
00000000000000cd         db  0x00 ; '.'
00000000000000ce         db  0x00 ; '.'
00000000000000cf         db  0x00 ; '.'
00000000000000d0         db  0xf8 ; '.'
00000000000000d1         db  0x9d ; '.'
00000000000000d2         db  0x01 ; '.'
00000000000000d3         db  0x00 ; '.'
00000000000000d4         db  0x00 ; '.'
00000000000000d5         db  0x00 ; '.'
00000000000000d6         db  0x00 ; '.'
00000000000000d7         db  0x00 ; '.'
00000000000000d8         db  0xf8 ; '.'
00000000000000d9         db  0x9d ; '.'
00000000000000da         db  0x01 ; '.'
00000000000000db         db  0x00 ; '.'
00000000000000dc         db  0x00 ; '.'
00000000000000dd         db  0x00 ; '.'
00000000000000de         db  0x00 ; '.'
00000000000000df         db  0x00 ; '.'
00000000000000e0         db  0x00 ; '.'
00000000000000e1         db  0x00 ; '.'
00000000000000e2         db  0x20 ; ' '
00000000000000e3         db  0x00 ; '.'
00000000000000e4         db  0x00 ; '.'
00000000000000e5         db  0x00 ; '.'
00000000000000e6         db  0x00 ; '.'
00000000000000e7         db  0x00 ; '.'
00000000000000e8         db  0x01 ; '.'
00000000000000e9         db  0x00 ; '.'
00000000000000ea         db  0x00 ; '.'
00000000000000eb         db  0x00 ; '.'
00000000000000ec         db  0x06 ; '.'
00000000000000ed         db  0x00 ; '.'
00000000000000ee         db  0x00 ; '.'
00000000000000ef         db  0x00 ; '.'
00000000000000f0         db  0xb0 ; '.'
00000000000000f1         db  0xaa ; '.'
00000000000000f2         db  0x01 ; '.'
00000000000000f3         db  0x00 ; '.'
00000000000000f4         db  0x00 ; '.'
00000000000000f5         db  0x00 ; '.'
00000000000000f6         db  0x00 ; '.'
00000000000000f7         db  0x00 ; '.'
00000000000000f8         db  0xb0 ; '.'
00000000000000f9         db  0xaa ; '.'
00000000000000fa         db  0x21 ; '!'
00000000000000fb         db  0x00 ; '.'
00000000000000fc         db  0x00 ; '.'
00000000000000fd         db  0x00 ; '.'
00000000000000fe         db  0x00 ; '.'
00000000000000ff         db  0x00 ; '.'
0000000000000100         db  0xb0 ; '.'                                         ; DATA XREF=quotearg_free+87, build_trtable+736, build_trtable+2820, build_charclass.isra.29+219, build_charclass.isra.29+299, build_charclass.isra.29+540, build_charclass.isra.29+612, build_charclass.isra.29+748, build_charclass.isra.29+806, build_charclass.isra.29+876, build_charclass.isra.29+934
0000000000000101         db  0xaa ; '.'
0000000000000102         db  0x21 ; '!'
0000000000000103         db  0x00 ; '.'
0000000000000104         db  0x00 ; '.'
0000000000000105         db  0x00 ; '.'
0000000000000106         db  0x00 ; '.'
0000000000000107         db  0x00 ; '.'
0000000000000108         db  0xd0 ; '.'                                         ; DATA XREF=eval6+19, eval6+348, build_trtable+18, build_trtable+1065
0000000000000109         db  0x05 ; '.'
000000000000010a         db  0x00 ; '.'
000000000000010b         db  0x00 ; '.'
000000000000010c         db  0x00 ; '.'
000000000000010d         db  0x00 ; '.'
000000000000010e         db  0x00 ; '.'
000000000000010f         db  0x00 ; '.'
0000000000000110         db  0x90 ; '.'
0000000000000111         db  0x07 ; '.'
0000000000000112         db  0x00 ; '.'
0000000000000113         db  0x00 ; '.'
0000000000000114         db  0x00 ; '.'
0000000000000115         db  0x00 ; '.'
0000000000000116         db  0x00 ; '.'
0000000000000117         db  0x00 ; '.'
0000000000000118         db  0x00 ; '.'
0000000000000119         db  0x00 ; '.'
000000000000011a         db  0x20 ; ' '
000000000000011b         db  0x00 ; '.'
000000000000011c         db  0x00 ; '.'
000000000000011d         db  0x00 ; '.'
000000000000011e         db  0x00 ; '.'
000000000000011f         db  0x00 ; '.'
0000000000000120         db  0x02 ; '.'
0000000000000121         db  0x00 ; '.'
0000000000000122         db  0x00 ; '.'
0000000000000123         db  0x00 ; '.'
0000000000000124         db  0x06 ; '.'
0000000000000125         db  0x00 ; '.'
0000000000000126         db  0x00 ; '.'
0000000000000127         db  0x00 ; '.'
0000000000000128         db  0x78 ; 'x'                                         ; DATA XREF=parse_expression+10, sub_12040+156, re_compile_internal+10, re_compile_internal+947
0000000000000129         db  0xab ; '.'
000000000000012a         db  0x01 ; '.'
000000000000012b         db  0x00 ; '.'
000000000000012c         db  0x00 ; '.'
000000000000012d         db  0x00 ; '.'
000000000000012e         db  0x00 ; '.'
000000000000012f         db  0x00 ; '.'
0000000000000130         db  0x78 ; 'x'
0000000000000131         db  0xab ; '.'
0000000000000132         db  0x21 ; '!'
0000000000000133         db  0x00 ; '.'
0000000000000134         db  0x00 ; '.'
0000000000000135         db  0x00 ; '.'
0000000000000136         db  0x00 ; '.'
0000000000000137         db  0x00 ; '.'
0000000000000138         db  0x78 ; 'x'
0000000000000139         db  0xab ; '.'
000000000000013a         db  0x21 ; '!'
000000000000013b         db  0x00 ; '.'
000000000000013c         db  0x00 ; '.'
000000000000013d         db  0x00 ; '.'
000000000000013e         db  0x00 ; '.'
000000000000013f         db  0x00 ; '.'
0000000000000140         db  0x00 ; '.'
0000000000000141         db  0x02 ; '.'
0000000000000142         db  0x00 ; '.'
0000000000000143         db  0x00 ; '.'
0000000000000144         db  0x00 ; '.'
0000000000000145         db  0x00 ; '.'
0000000000000146         db  0x00 ; '.'
0000000000000147         db  0x00 ; '.'
0000000000000148         db  0x00 ; '.'
0000000000000149         db  0x02 ; '.'
000000000000014a         db  0x00 ; '.'
000000000000014b         db  0x00 ; '.'
000000000000014c         db  0x00 ; '.'
000000000000014d         db  0x00 ; '.'
000000000000014e         db  0x00 ; '.'
000000000000014f         db  0x00 ; '.'
0000000000000150         db  0x08 ; '.'
0000000000000151         db  0x00 ; '.'
0000000000000152         db  0x00 ; '.'
0000000000000153         db  0x00 ; '.'
0000000000000154         db  0x00 ; '.'
0000000000000155         db  0x00 ; '.'
0000000000000156         db  0x00 ; '.'
0000000000000157         db  0x00 ; '.'
0000000000000158         db  0x04 ; '.'
0000000000000159         db  0x00 ; '.'
000000000000015a         db  0x00 ; '.'
000000000000015b         db  0x00 ; '.'
000000000000015c         db  0x04 ; '.'
000000000000015d         db  0x00 ; '.'
000000000000015e         db  0x00 ; '.'
000000000000015f         db  0x00 ; '.'
0000000000000160         db  0x54 ; 'T'
0000000000000161         db  0x02 ; '.'
0000000000000162         db  0x00 ; '.'
0000000000000163         db  0x00 ; '.'
0000000000000164         db  0x00 ; '.'
0000000000000165         db  0x00 ; '.'
0000000000000166         db  0x00 ; '.'
0000000000000167         db  0x00 ; '.'
0000000000000168         db  0x54 ; 'T'
0000000000000169         db  0x02 ; '.'
000000000000016a         db  0x00 ; '.'
000000000000016b         db  0x00 ; '.'
000000000000016c         db  0x00 ; '.'
000000000000016d         db  0x00 ; '.'
000000000000016e         db  0x00 ; '.'
000000000000016f         db  0x00 ; '.'
0000000000000170         db  0x54 ; 'T'
0000000000000171         db  0x02 ; '.'
0000000000000172         db  0x00 ; '.'
0000000000000173         db  0x00 ; '.'
0000000000000174         db  0x00 ; '.'
0000000000000175         db  0x00 ; '.'
0000000000000176         db  0x00 ; '.'
0000000000000177         db  0x00 ; '.'
0000000000000178         db  0x44 ; 'D'                                         ; DATA XREF=re_compile_fastmap_iter.isra.30+18, re_compile_fastmap_iter.isra.30+1172
0000000000000179         db  0x00 ; '.'
000000000000017a         db  0x00 ; '.'
000000000000017b         db  0x00 ; '.'
000000000000017c         db  0x00 ; '.'
000000000000017d         db  0x00 ; '.'
000000000000017e         db  0x00 ; '.'
000000000000017f         db  0x00 ; '.'
0000000000000180         db  0x44 ; 'D'
0000000000000181         db  0x00 ; '.'
0000000000000182         db  0x00 ; '.'
0000000000000183         db  0x00 ; '.'
0000000000000184         db  0x00 ; '.'
0000000000000185         db  0x00 ; '.'
0000000000000186         db  0x00 ; '.'
0000000000000187         db  0x00 ; '.'
0000000000000188         db  0x04 ; '.'
0000000000000189         db  0x00 ; '.'
000000000000018a         db  0x00 ; '.'
000000000000018b         db  0x00 ; '.'
000000000000018c         db  0x00 ; '.'
000000000000018d         db  0x00 ; '.'
000000000000018e         db  0x00 ; '.'
000000000000018f         db  0x00 ; '.'
0000000000000190         db  0x50 ; 'P'
0000000000000191         db  0xe5 ; '.'
0000000000000192         db  0x74 ; 't'
0000000000000193         db  0x64 ; 'd'
0000000000000194         db  0x04 ; '.'
0000000000000195         db  0x00 ; '.'
0000000000000196         db  0x00 ; '.'
0000000000000197         db  0x00 ; '.'
0000000000000198         db  0x00 ; '.'
0000000000000199         db  0x73 ; 's'
000000000000019a         db  0x01 ; '.'
000000000000019b         db  0x00 ; '.'
000000000000019c         db  0x00 ; '.'
000000000000019d         db  0x00 ; '.'
000000000000019e         db  0x00 ; '.'
000000000000019f         db  0x00 ; '.'
00000000000001a0         db  0x00 ; '.'
00000000000001a1         db  0x73 ; 's'
00000000000001a2         db  0x01 ; '.'
00000000000001a3         db  0x00 ; '.'
00000000000001a4         db  0x00 ; '.'
00000000000001a5         db  0x00 ; '.'
00000000000001a6         db  0x00 ; '.'
00000000000001a7         db  0x00 ; '.'
00000000000001a8         db  0x00 ; '.'
00000000000001a9         db  0x73 ; 's'
00000000000001aa         db  0x01 ; '.'
00000000000001ab         db  0x00 ; '.'
00000000000001ac         db  0x00 ; '.'
00000000000001ad         db  0x00 ; '.'
00000000000001ae         db  0x00 ; '.'
00000000000001af         db  0x00 ; '.'
00000000000001b0         db  0xdc ; '.'
00000000000001b1         db  0x05 ; '.'
00000000000001b2         db  0x00 ; '.'
00000000000001b3         db  0x00 ; '.'
00000000000001b4         db  0x00 ; '.'
00000000000001b5         db  0x00 ; '.'
00000000000001b6         db  0x00 ; '.'
00000000000001b7         db  0x00 ; '.'
00000000000001b8         db  0xdc ; '.'
00000000000001b9         db  0x05 ; '.'
00000000000001ba         db  0x00 ; '.'
00000000000001bb         db  0x00 ; '.'
00000000000001bc         db  0x00 ; '.'
00000000000001bd         db  0x00 ; '.'
00000000000001be         db  0x00 ; '.'                                         ; DATA XREF=re_search_stub+1079
00000000000001bf         db  0x00 ; '.'
00000000000001c0         db  0x04 ; '.'
00000000000001c1         db  0x00 ; '.'
00000000000001c2         db  0x00 ; '.'
00000000000001c3         db  0x00 ; '.'
00000000000001c4         db  0x00 ; '.'
00000000000001c5         db  0x00 ; '.'
00000000000001c6         db  0x00 ; '.'
00000000000001c7         db  0x00 ; '.'
00000000000001c8         db  0x51 ; 'Q'                                         ; DATA XREF=docolon+16, docolon+346
00000000000001c9         db  0xe5 ; '.'
00000000000001ca         db  0x74 ; 't'
00000000000001cb         db  0x64 ; 'd'
00000000000001cc         db  0x06 ; '.'
00000000000001cd         db  0x00 ; '.'
00000000000001ce         db  0x00 ; '.'
00000000000001cf         db  0x00 ; '.'
00000000000001d0         db  0x00 ; '.'
00000000000001d1         db  0x00 ; '.'
00000000000001d2         db  0x00 ; '.'
00000000000001d3         db  0x00 ; '.'
00000000000001d4         db  0x00 ; '.'
00000000000001d5         db  0x00 ; '.'
00000000000001d6         db  0x00 ; '.'
00000000000001d7         db  0x00 ; '.'
00000000000001d8         db  0x00 ; '.'
00000000000001d9         db  0x00 ; '.'
00000000000001da         db  0x00 ; '.'
00000000000001db         db  0x00 ; '.'
00000000000001dc         db  0x00 ; '.'
00000000000001dd         db  0x00 ; '.'
00000000000001de         db  0x00 ; '.'
00000000000001df         db  0x00 ; '.'
00000000000001e0         db  0x00 ; '.'
00000000000001e1         db  0x00 ; '.'
00000000000001e2         db  0x00 ; '.'
00000000000001e3         db  0x00 ; '.'
00000000000001e4         db  0x00 ; '.'
00000000000001e5         db  0x00 ; '.'
00000000000001e6         db  0x00 ; '.'
00000000000001e7         db  0x00 ; '.'
00000000000001e8         db  0x00 ; '.'
00000000000001e9         db  0x00 ; '.'
00000000000001ea         db  0x00 ; '.'
00000000000001eb         db  0x00 ; '.'
00000000000001ec         db  0x00 ; '.'
00000000000001ed         db  0x00 ; '.'
00000000000001ee         db  0x00 ; '.'
00000000000001ef         db  0x00 ; '.'
00000000000001f0         db  0x00 ; '.'
00000000000001f1         db  0x00 ; '.'
00000000000001f2         db  0x00 ; '.'
00000000000001f3         db  0x00 ; '.'
00000000000001f4         db  0x00 ; '.'
00000000000001f5         db  0x00 ; '.'
00000000000001f6         db  0x00 ; '.'
00000000000001f7         db  0x00 ; '.'
00000000000001f8         db  0x10 ; '.'
00000000000001f9         db  0x00 ; '.'                                         ; DATA XREF=re_search_stub+1141
00000000000001fa         db  0x00 ; '.'
00000000000001fb         db  0x00 ; '.'                                         ; DATA XREF=re_search_stub+1110
00000000000001fc         db  0x00 ; '.'
00000000000001fd         db  0x00 ; '.'
00000000000001fe         db  0x00 ; '.'
00000000000001ff         db  0x00 ; '.'
0000000000000200         db  0x52 ; 'R'                                         ; DATA XREF=build_trtable+2601, build_trtable+2707, peek_token+1008, peek_token+1092, peek_token+1254
0000000000000201         db  0xe5 ; '.'
0000000000000202         db  0x74 ; 't'
0000000000000203         db  0x64 ; 'd'
0000000000000204         db  0x04 ; '.'
0000000000000205         db  0x00 ; '.'
0000000000000206         db  0x00 ; '.'
0000000000000207         db  0x00 ; '.'
0000000000000208         db  0xb0 ; '.'
0000000000000209         db  0xaa ; '.'
000000000000020a         db  0x01 ; '.'
000000000000020b         db  0x00 ; '.'
000000000000020c         db  0x00 ; '.'
000000000000020d         db  0x00 ; '.'
000000000000020e         db  0x00 ; '.'
000000000000020f         db  0x00 ; '.'
0000000000000210         db  0xb0 ; '.'
0000000000000211         db  0xaa ; '.'
0000000000000212         db  0x21 ; '!'
0000000000000213         db  0x00 ; '.'
0000000000000214         db  0x00 ; '.'
0000000000000215         db  0x00 ; '.'
0000000000000216         db  0x00 ; '.'
0000000000000217         db  0x00 ; '.'
0000000000000218         db  0xb0 ; '.'
0000000000000219         db  0xaa ; '.'
000000000000021a         db  0x21 ; '!'
000000000000021b         db  0x00 ; '.'
000000000000021c         db  0x00 ; '.'
000000000000021d         db  0x00 ; '.'
000000000000021e         db  0x00 ; '.'
000000000000021f         db  0x00 ; '.'
0000000000000220         db  0x50 ; 'P'
0000000000000221         db  0x05 ; '.'
0000000000000222         db  0x00 ; '.'
0000000000000223         db  0x00 ; '.'
0000000000000224         db  0x00 ; '.'
0000000000000225         db  0x00 ; '.'
0000000000000226         db  0x00 ; '.'
0000000000000227         db  0x00 ; '.'
0000000000000228         db  0x50 ; 'P'
0000000000000229         db  0x05 ; '.'
000000000000022a         db  0x00 ; '.'
000000000000022b         db  0x00 ; '.'
000000000000022c         db  0x00 ; '.'
000000000000022d         db  0x00 ; '.'
000000000000022e         db  0x00 ; '.'
000000000000022f         db  0x00 ; '.'
0000000000000230         db  0x01 ; '.'
0000000000000231         db  0x00 ; '.'
0000000000000232         db  0x00 ; '.'
0000000000000233         db  0x00 ; '.'
0000000000000234         db  0x00 ; '.'
0000000000000235         db  0x00 ; '.'
0000000000000236         db  0x00 ; '.'
0000000000000237         db  0x00 ; '.'


        ; Section .interp
        ; Range: [0x238; 0x254[ (28 bytes)
        ; File offset : [568; 596[ (28 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

                     aLib64ldlinuxx8:
0000000000000238         db         "/lib64/ld-linux-x86-64.so.2", 0            ; DATA XREF=re_search_internal+24, re_search_internal+2964


        ; Section .note.ABI-tag
        ; Range: [0x254; 0x274[ (32 bytes)
        ; File offset : [596; 628[ (32 bytes)
        ; Flags: 0x2
        ;   SHT_NOTE
        ;   SHF_ALLOC

0000000000000254         db  0x04 ; '.'
0000000000000255         db  0x00 ; '.'
0000000000000256         db  0x00 ; '.'
0000000000000257         db  0x00 ; '.'
0000000000000258         db  0x10 ; '.'
0000000000000259         db  0x00 ; '.'
000000000000025a         db  0x00 ; '.'
000000000000025b         db  0x00 ; '.'
000000000000025c         db  0x01 ; '.'
000000000000025d         db  0x00 ; '.'
000000000000025e         db  0x00 ; '.'
000000000000025f         db  0x00 ; '.'
0000000000000260         db  0x47 ; 'G'
0000000000000261         db  0x4e ; 'N'
0000000000000262         db  0x55 ; 'U'
0000000000000263         db  0x00 ; '.'
0000000000000264         db  0x00 ; '.'
0000000000000265         db  0x00 ; '.'
0000000000000266         db  0x00 ; '.'
0000000000000267         db  0x00 ; '.'
0000000000000268         db  0x03 ; '.'
0000000000000269         db  0x00 ; '.'
000000000000026a         db  0x00 ; '.'
000000000000026b         db  0x00 ; '.'
000000000000026c         db  0x02 ; '.'
000000000000026d         db  0x00 ; '.'
000000000000026e         db  0x00 ; '.'
000000000000026f         db  0x00 ; '.'
0000000000000270         db  0x00 ; '.'
0000000000000271         db  0x00 ; '.'
0000000000000272         db  0x00 ; '.'
0000000000000273         db  0x00 ; '.'


        ; Section .note.gnu.build-id
        ; Range: [0x274; 0x298[ (36 bytes)
        ; File offset : [628; 664[ (36 bytes)
        ; Flags: 0x2
        ;   SHT_NOTE
        ;   SHF_ALLOC

0000000000000274         db  0x04 ; '.'
0000000000000275         db  0x00 ; '.'
0000000000000276         db  0x00 ; '.'
0000000000000277         db  0x00 ; '.'
0000000000000278         db  0x14 ; '.'
0000000000000279         db  0x00 ; '.'
000000000000027a         db  0x00 ; '.'
000000000000027b         db  0x00 ; '.'
000000000000027c         db  0x03 ; '.'
000000000000027d         db  0x00 ; '.'
000000000000027e         db  0x00 ; '.'
000000000000027f         db  0x00 ; '.'
0000000000000280         db  0x47 ; 'G'
0000000000000281         db  0x4e ; 'N'
0000000000000282         db  0x55 ; 'U'
0000000000000283         db  0x00 ; '.'
0000000000000284         db  0xcf ; '.'
0000000000000285         db  0xcb ; '.'
0000000000000286         db  0x9a ; '.'
0000000000000287         db  0xa2 ; '.'
0000000000000288         db  0x9f ; '.'
0000000000000289         db  0x94 ; '.'
000000000000028a         db  0x40 ; '@'
000000000000028b         db  0x37 ; '7'
000000000000028c         db  0x4a ; 'J'
000000000000028d         db  0x77 ; 'w'
000000000000028e         db  0x94 ; '.'
000000000000028f         db  0x00 ; '.'
0000000000000290         db  0x25 ; '%'
0000000000000291         db  0xc1 ; '.'
0000000000000292         db  0x12 ; '.'
0000000000000293         db  0x9c ; '.'
0000000000000294         db  0xbc ; '.'
0000000000000295         db  0x05 ; '.'
0000000000000296         db  0xa9 ; '.'
0000000000000297         db  0xa4 ; '.'


        ; Section .gnu.hash
        ; Range: [0x298; 0x2f8[ (96 bytes)
        ; File offset : [664; 760[ (96 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000000298         db  0x03 ; '.'
0000000000000299         db  0x00 ; '.'
000000000000029a         db  0x00 ; '.'
000000000000029b         db  0x00 ; '.'
000000000000029c         db  0x4c ; 'L'
000000000000029d         db  0x00 ; '.'
000000000000029e         db  0x00 ; '.'
000000000000029f         db  0x00 ; '.'
00000000000002a0         db  0x02 ; '.'
00000000000002a1         db  0x00 ; '.'
00000000000002a2         db  0x00 ; '.'
00000000000002a3         db  0x00 ; '.'
00000000000002a4         db  0x07 ; '.'
00000000000002a5         db  0x00 ; '.'
00000000000002a6         db  0x00 ; '.'
00000000000002a7         db  0x00 ; '.'
00000000000002a8         db  0x82 ; '.'
00000000000002a9         db  0x01 ; '.'
00000000000002aa         db  0x40 ; '@'
00000000000002ab         db  0x08 ; '.'
00000000000002ac         db  0x12 ; '.'
00000000000002ad         db  0x01 ; '.'
00000000000002ae         db  0x08 ; '.'
00000000000002af         db  0x1f ; '.'
00000000000002b0         db  0x2a ; '*'
00000000000002b1         db  0x44 ; 'D'
00000000000002b2         db  0x00 ; '.'
00000000000002b3         db  0x03 ; '.'
00000000000002b4         db  0xa8 ; '.'
00000000000002b5         db  0x04 ; '.'
00000000000002b6         db  0x00 ; '.'
00000000000002b7         db  0x00 ; '.'
00000000000002b8         db  0x4c ; 'L'
00000000000002b9         db  0x00 ; '.'
00000000000002ba         db  0x00 ; '.'
00000000000002bb         db  0x00 ; '.'
00000000000002bc         db  0x4f ; 'O'
00000000000002bd         db  0x00 ; '.'
00000000000002be         db  0x00 ; '.'
00000000000002bf         db  0x00 ; '.'
00000000000002c0         db  0x57 ; 'W'
00000000000002c1         db  0x00 ; '.'
00000000000002c2         db  0x00 ; '.'
00000000000002c3         db  0x00 ; '.'
00000000000002c4         db  0x28 ; '('
00000000000002c5         db  0x1d ; '.'
00000000000002c6         db  0x8c ; '.'                                         ; DATA XREF=docolon+134
00000000000002c7         db  0x1c ; '.'
00000000000002c8         db  0x42 ; 'B'
00000000000002c9         db  0x45 ; 'E'
00000000000002ca         db  0xd5 ; '.'
00000000000002cb         db  0xec ; '.'
00000000000002cc         db  0xbb ; '.'
00000000000002cd         db  0xe3 ; '.'
00000000000002ce         db  0x92 ; '.'
00000000000002cf         db  0x7c ; '|'
00000000000002d0         db  0xbc ; '.'
00000000000002d1         db  0x50 ; 'P'
00000000000002d2         db  0x76 ; 'v'
00000000000002d3         db  0x9e ; '.'
00000000000002d4         db  0x96 ; '.'
00000000000002d5         db  0xa0 ; '.'
00000000000002d6         db  0x89 ; '.'
00000000000002d7         db  0x97 ; '.'
00000000000002d8         db  0xd8 ; '.'
00000000000002d9         db  0x71 ; 'q'
00000000000002da         db  0x58 ; 'X'
00000000000002db         db  0x1c ; '.'
00000000000002dc         db  0xce ; '.'
00000000000002dd         db  0x2c ; ','
00000000000002de         db  0x63 ; 'c'
00000000000002df         db  0x72 ; 'r'
00000000000002e0         db  0xe4 ; '.'
00000000000002e1         db  0x62 ; 'b'
00000000000002e2         db  0x41 ; 'A'
00000000000002e3         db  0xf5 ; '.'
00000000000002e4         db  0xb8 ; '.'
00000000000002e5         db  0x8d ; '.'
00000000000002e6         db  0xf1 ; '.'
00000000000002e7         db  0x0e ; '.'
00000000000002e8         db  0xc0 ; '.'
00000000000002e9         db  0xb3 ; '.'
00000000000002ea         db  0xf7 ; '.'
00000000000002eb         db  0x12 ; '.'
00000000000002ec         db  0x39 ; '9'
00000000000002ed         db  0xf2 ; '.'
00000000000002ee         db  0x8b ; '.'
00000000000002ef         db  0x1c ; '.'
00000000000002f0         db  0x32 ; '2'
00000000000002f1         db  0xc4 ; '.'
00000000000002f2         db  0xf7 ; '.'
00000000000002f3         db  0x12 ; '.'
00000000000002f4         db  0xeb ; '.'
00000000000002f5         db  0xd3 ; '.'
00000000000002f6         db  0xef ; '.'
00000000000002f7         db  0x0e ; '.'


        ; Section .dynsym
        ; Range: [0x2f8; 0xb50[ (2136 bytes)
        ; File offset : [760; 2896[ (2136 bytes)
        ; Flags: 0x2
        ;   SHT_DYNSYM
        ;   SHF_ALLOC

00000000000002f8         db  0x00 ; '.'
00000000000002f9         db  0x00 ; '.'
00000000000002fa         db  0x00 ; '.'
00000000000002fb         db  0x00 ; '.'
00000000000002fc         db  0x00 ; '.'
00000000000002fd         db  0x00 ; '.'
00000000000002fe         db  0x00 ; '.'
00000000000002ff         db  0x00 ; '.'
0000000000000300         db  0x00 ; '.'
0000000000000301         db  0x00 ; '.'
0000000000000302         db  0x00 ; '.'
0000000000000303         db  0x00 ; '.'
0000000000000304         db  0x00 ; '.'
0000000000000305         db  0x00 ; '.'
0000000000000306         db  0x00 ; '.'
0000000000000307         db  0x00 ; '.'
0000000000000308         db  0x00 ; '.'
0000000000000309         db  0x00 ; '.'
000000000000030a         db  0x00 ; '.'
000000000000030b         db  0x00 ; '.'
000000000000030c         db  0x00 ; '.'
000000000000030d         db  0x00 ; '.'
000000000000030e         db  0x00 ; '.'
000000000000030f         db  0x00 ; '.'                                         ; DATA XREF=sub_12670+7
0000000000000310         db  0xea ; '.'
0000000000000311         db  0x02 ; '.'
0000000000000312         db  0x00 ; '.'
0000000000000313         db  0x00 ; '.'
0000000000000314         db  0x12 ; '.'
0000000000000315         db  0x00 ; '.'
0000000000000316         db  0x00 ; '.'
0000000000000317         db  0x00 ; '.'
0000000000000318         db  0x00 ; '.'
0000000000000319         db  0x00 ; '.'
000000000000031a         db  0x00 ; '.'
000000000000031b         db  0x00 ; '.'
000000000000031c         db  0x00 ; '.'
000000000000031d         db  0x00 ; '.'
000000000000031e         db  0x00 ; '.'
000000000000031f         db  0x00 ; '.'
0000000000000320         db  0x00 ; '.'
0000000000000321         db  0x00 ; '.'
0000000000000322         db  0x00 ; '.'
0000000000000323         db  0x00 ; '.'
0000000000000324         db  0x00 ; '.'
0000000000000325         db  0x00 ; '.'
0000000000000326         db  0x00 ; '.'
0000000000000327         db  0x00 ; '.'
0000000000000328         db  0x81 ; '.'
0000000000000329         db  0x03 ; '.'
000000000000032a         db  0x00 ; '.'
000000000000032b         db  0x00 ; '.'
000000000000032c         db  0x12 ; '.'
000000000000032d         db  0x00 ; '.'
000000000000032e         db  0x00 ; '.'
000000000000032f         db  0x00 ; '.'
0000000000000330         db  0x00 ; '.'
0000000000000331         db  0x00 ; '.'
0000000000000332         db  0x00 ; '.'
0000000000000333         db  0x00 ; '.'
0000000000000334         db  0x00 ; '.'
0000000000000335         db  0x00 ; '.'
0000000000000336         db  0x00 ; '.'
0000000000000337         db  0x00 ; '.'
0000000000000338         db  0x00 ; '.'
0000000000000339         db  0x00 ; '.'
000000000000033a         db  0x00 ; '.'
000000000000033b         db  0x00 ; '.'
000000000000033c         db  0x00 ; '.'
000000000000033d         db  0x00 ; '.'
000000000000033e         db  0x00 ; '.'
000000000000033f         db  0x00 ; '.'
0000000000000340         db  0x8c ; '.'
0000000000000341         db  0x01 ; '.'
0000000000000342         db  0x00 ; '.'
0000000000000343         db  0x00 ; '.'
0000000000000344         db  0x12 ; '.'
0000000000000345         db  0x00 ; '.'
0000000000000346         db  0x00 ; '.'
0000000000000347         db  0x00 ; '.'
0000000000000348         db  0x00 ; '.'
0000000000000349         db  0x00 ; '.'
000000000000034a         db  0x00 ; '.'
000000000000034b         db  0x00 ; '.'
000000000000034c         db  0x00 ; '.'
000000000000034d         db  0x00 ; '.'
000000000000034e         db  0x00 ; '.'
000000000000034f         db  0x00 ; '.'
0000000000000350         db  0x00 ; '.'
0000000000000351         db  0x00 ; '.'
0000000000000352         db  0x00 ; '.'
0000000000000353         db  0x00 ; '.'
0000000000000354         db  0x00 ; '.'
0000000000000355         db  0x00 ; '.'
0000000000000356         db  0x00 ; '.'
0000000000000357         db  0x00 ; '.'
0000000000000358         db  0x0b ; '.'
0000000000000359         db  0x02 ; '.'
000000000000035a         db  0x00 ; '.'
000000000000035b         db  0x00 ; '.'
000000000000035c         db  0x12 ; '.'
000000000000035d         db  0x00 ; '.'
000000000000035e         db  0x00 ; '.'
000000000000035f         db  0x00 ; '.'
0000000000000360         db  0x00 ; '.'
0000000000000361         db  0x00 ; '.'
0000000000000362         db  0x00 ; '.'
0000000000000363         db  0x00 ; '.'
0000000000000364         db  0x00 ; '.'
0000000000000365         db  0x00 ; '.'
0000000000000366         db  0x00 ; '.'
0000000000000367         db  0x00 ; '.'
0000000000000368         db  0x00 ; '.'
0000000000000369         db  0x00 ; '.'
000000000000036a         db  0x00 ; '.'
000000000000036b         db  0x00 ; '.'
000000000000036c         db  0x00 ; '.'
000000000000036d         db  0x00 ; '.'
000000000000036e         db  0x00 ; '.'
000000000000036f         db  0x00 ; '.'
0000000000000370         db  0xa3 ; '.'
0000000000000371         db  0x00 ; '.'
0000000000000372         db  0x00 ; '.'
0000000000000373         db  0x00 ; '.'
0000000000000374         db  0x12 ; '.'
0000000000000375         db  0x00 ; '.'
0000000000000376         db  0x00 ; '.'
0000000000000377         db  0x00 ; '.'
0000000000000378         db  0x00 ; '.'
0000000000000379         db  0x00 ; '.'
000000000000037a         db  0x00 ; '.'
000000000000037b         db  0x00 ; '.'
000000000000037c         db  0x00 ; '.'
000000000000037d         db  0x00 ; '.'
000000000000037e         db  0x00 ; '.'
000000000000037f         db  0x00 ; '.'
0000000000000380         db  0x00 ; '.'
0000000000000381         db  0x00 ; '.'
0000000000000382         db  0x00 ; '.'
0000000000000383         db  0x00 ; '.'
0000000000000384         db  0x00 ; '.'
0000000000000385         db  0x00 ; '.'
0000000000000386         db  0x00 ; '.'
0000000000000387         db  0x00 ; '.'
0000000000000388         db  0x27 ; '''
0000000000000389         db  0x01 ; '.'
000000000000038a         db  0x00 ; '.'
000000000000038b         db  0x00 ; '.'
000000000000038c         db  0x12 ; '.'
000000000000038d         db  0x00 ; '.'
000000000000038e         db  0x00 ; '.'
000000000000038f         db  0x00 ; '.'
0000000000000390         db  0x00 ; '.'
0000000000000391         db  0x00 ; '.'
0000000000000392         db  0x00 ; '.'
0000000000000393         db  0x00 ; '.'
0000000000000394         db  0x00 ; '.'
0000000000000395         db  0x00 ; '.'
0000000000000396         db  0x00 ; '.'
0000000000000397         db  0x00 ; '.'
0000000000000398         db  0x00 ; '.'
0000000000000399         db  0x00 ; '.'
000000000000039a         db  0x00 ; '.'
000000000000039b         db  0x00 ; '.'
000000000000039c         db  0x00 ; '.'
000000000000039d         db  0x00 ; '.'
000000000000039e         db  0x00 ; '.'
000000000000039f         db  0x00 ; '.'
00000000000003a0         db  0x0e ; '.'
00000000000003a1         db  0x00 ; '.'
00000000000003a2         db  0x00 ; '.'
00000000000003a3         db  0x00 ; '.'
00000000000003a4         db  0x20 ; ' '
00000000000003a5         db  0x00 ; '.'
00000000000003a6         db  0x00 ; '.'
00000000000003a7         db  0x00 ; '.'
00000000000003a8         db  0x00 ; '.'
00000000000003a9         db  0x00 ; '.'
00000000000003aa         db  0x00 ; '.'
00000000000003ab         db  0x00 ; '.'
00000000000003ac         db  0x00 ; '.'
00000000000003ad         db  0x00 ; '.'
00000000000003ae         db  0x00 ; '.'
00000000000003af         db  0x00 ; '.'
00000000000003b0         db  0x00 ; '.'
00000000000003b1         db  0x00 ; '.'
00000000000003b2         db  0x00 ; '.'
00000000000003b3         db  0x00 ; '.'
00000000000003b4         db  0x00 ; '.'
00000000000003b5         db  0x00 ; '.'
00000000000003b6         db  0x00 ; '.'
00000000000003b7         db  0x00 ; '.'
00000000000003b8         db  0x92 ; '.'
00000000000003b9         db  0x01 ; '.'
00000000000003ba         db  0x00 ; '.'
00000000000003bb         db  0x00 ; '.'
00000000000003bc         db  0x12 ; '.'
00000000000003bd         db  0x00 ; '.'
00000000000003be         db  0x00 ; '.'
00000000000003bf         db  0x00 ; '.'
00000000000003c0         db  0x00 ; '.'
00000000000003c1         db  0x00 ; '.'
00000000000003c2         db  0x00 ; '.'
00000000000003c3         db  0x00 ; '.'
00000000000003c4         db  0x00 ; '.'
00000000000003c5         db  0x00 ; '.'
00000000000003c6         db  0x00 ; '.'
00000000000003c7         db  0x00 ; '.'
00000000000003c8         db  0x00 ; '.'                                         ; DATA XREF=create_token_tree.isra.16+136
00000000000003c9         db  0x00 ; '.'
00000000000003ca         db  0x00 ; '.'
00000000000003cb         db  0x00 ; '.'
00000000000003cc         db  0x00 ; '.'
00000000000003cd         db  0x00 ; '.'
00000000000003ce         db  0x00 ; '.'
00000000000003cf         db  0x00 ; '.'
00000000000003d0         db  0xb1 ; '.'
00000000000003d1         db  0x02 ; '.'
00000000000003d2         db  0x00 ; '.'
00000000000003d3         db  0x00 ; '.'
00000000000003d4         db  0x12 ; '.'
00000000000003d5         db  0x00 ; '.'
00000000000003d6         db  0x00 ; '.'
00000000000003d7         db  0x00 ; '.'
00000000000003d8         db  0x00 ; '.'
00000000000003d9         db  0x00 ; '.'
00000000000003da         db  0x00 ; '.'
00000000000003db         db  0x00 ; '.'
00000000000003dc         db  0x00 ; '.'
00000000000003dd         db  0x00 ; '.'
00000000000003de         db  0x00 ; '.'
00000000000003df         db  0x00 ; '.'
00000000000003e0         db  0x00 ; '.'
00000000000003e1         db  0x00 ; '.'
00000000000003e2         db  0x00 ; '.'
00000000000003e3         db  0x00 ; '.'
00000000000003e4         db  0x00 ; '.'
00000000000003e5         db  0x00 ; '.'
00000000000003e6         db  0x00 ; '.'
00000000000003e7         db  0x00 ; '.'
00000000000003e8         db  0x56 ; 'V'
00000000000003e9         db  0x01 ; '.'
00000000000003ea         db  0x00 ; '.'
00000000000003eb         db  0x00 ; '.'
00000000000003ec         db  0x12 ; '.'
00000000000003ed         db  0x00 ; '.'
00000000000003ee         db  0x00 ; '.'
00000000000003ef         db  0x00 ; '.'
00000000000003f0         db  0x00 ; '.'
00000000000003f1         db  0x00 ; '.'
00000000000003f2         db  0x00 ; '.'
00000000000003f3         db  0x00 ; '.'
00000000000003f4         db  0x00 ; '.'
00000000000003f5         db  0x00 ; '.'
00000000000003f6         db  0x00 ; '.'
00000000000003f7         db  0x00 ; '.'
00000000000003f8         db  0x00 ; '.'
00000000000003f9         db  0x00 ; '.'
00000000000003fa         db  0x00 ; '.'
00000000000003fb         db  0x00 ; '.'
00000000000003fc         db  0x00 ; '.'
00000000000003fd         db  0x00 ; '.'
00000000000003fe         db  0x00 ; '.'
00000000000003ff         db  0x00 ; '.'                                         ; DATA XREF=duplicate_node+58, duplicate_node+69, duplicate_node+113, duplicate_node_closure+214, duplicate_node_closure+428, calc_eclosure_iter+605, re_acquire_state_context+346, check_node_accept+118, check_halt_state_context.isra.20+111, build_trtable+211, calc_first+67
0000000000000400         db  0xc3 ; '.'                                         ; DATA XREF=build_trtable+894, build_trtable+2048, sub_127b0+1354
0000000000000401         db  0x02 ; '.'
0000000000000402         db  0x00 ; '.'                                         ; DATA XREF=peek_token+736, peek_token+784, peek_token+1266, peek_token+1402
0000000000000403         db  0x00 ; '.'
0000000000000404         db  0x12 ; '.'
0000000000000405         db  0x00 ; '.'
0000000000000406         db  0x00 ; '.'
0000000000000407         db  0x00 ; '.'
0000000000000408         db  0x00 ; '.'
0000000000000409         db  0x00 ; '.'
000000000000040a         db  0x00 ; '.'
000000000000040b         db  0x00 ; '.'
000000000000040c         db  0x00 ; '.'
000000000000040d         db  0x00 ; '.'
000000000000040e         db  0x00 ; '.'
000000000000040f         db  0x00 ; '.'
0000000000000410         db  0x00 ; '.'
0000000000000411         db  0x00 ; '.'
0000000000000412         db  0x00 ; '.'
0000000000000413         db  0x00 ; '.'
0000000000000414         db  0x00 ; '.'
0000000000000415         db  0x00 ; '.'
0000000000000416         db  0x00 ; '.'
0000000000000417         db  0x00 ; '.'
0000000000000418         db  0xce ; '.'
0000000000000419         db  0x00 ; '.'
000000000000041a         db  0x00 ; '.'
000000000000041b         db  0x00 ; '.'
000000000000041c         db  0x12 ; '.'
000000000000041d         db  0x00 ; '.'
000000000000041e         db  0x00 ; '.'
000000000000041f         db  0x00 ; '.'
0000000000000420         db  0x00 ; '.'
0000000000000421         db  0x00 ; '.'
0000000000000422         db  0x00 ; '.'
0000000000000423         db  0x00 ; '.'
0000000000000424         db  0x00 ; '.'
0000000000000425         db  0x00 ; '.'
0000000000000426         db  0x00 ; '.'
0000000000000427         db  0x00 ; '.'
0000000000000428         db  0x00 ; '.'
0000000000000429         db  0x00 ; '.'
000000000000042a         db  0x00 ; '.'
000000000000042b         db  0x00 ; '.'
000000000000042c         db  0x00 ; '.'
000000000000042d         db  0x00 ; '.'
000000000000042e         db  0x00 ; '.'
000000000000042f         db  0x00 ; '.'
0000000000000430         db  0x2d ; '-'
0000000000000431         db  0x03 ; '.'
0000000000000432         db  0x00 ; '.'
0000000000000433         db  0x00 ; '.'
0000000000000434         db  0x12 ; '.'
0000000000000435         db  0x00 ; '.'                                         ; DATA XREF=re_search_internal+4162
0000000000000436         db  0x00 ; '.'
0000000000000437         db  0x00 ; '.'
0000000000000438         db  0x00 ; '.'
0000000000000439         db  0x00 ; '.'
000000000000043a         db  0x00 ; '.'
000000000000043b         db  0x00 ; '.'
000000000000043c         db  0x00 ; '.'
000000000000043d         db  0x00 ; '.'
000000000000043e         db  0x00 ; '.'
000000000000043f         db  0x00 ; '.'
0000000000000440         db  0x00 ; '.'
0000000000000441         db  0x00 ; '.'
0000000000000442         db  0x00 ; '.'
0000000000000443         db  0x00 ; '.'
0000000000000444         db  0x00 ; '.'
0000000000000445         db  0x00 ; '.'
0000000000000446         db  0x00 ; '.'
0000000000000447         db  0x00 ; '.'
0000000000000448         db  0xf3 ; '.'
0000000000000449         db  0x01 ; '.'
000000000000044a         db  0x00 ; '.'
000000000000044b         db  0x00 ; '.'
000000000000044c         db  0x12 ; '.'
000000000000044d         db  0x00 ; '.'
000000000000044e         db  0x00 ; '.'
000000000000044f         db  0x00 ; '.'
0000000000000450         db  0x00 ; '.'
0000000000000451         db  0x00 ; '.'
0000000000000452         db  0x00 ; '.'
0000000000000453         db  0x00 ; '.'
0000000000000454         db  0x00 ; '.'
0000000000000455         db  0x00 ; '.'
0000000000000456         db  0x00 ; '.'
0000000000000457         db  0x00 ; '.'
0000000000000458         db  0x00 ; '.'
0000000000000459         db  0x00 ; '.'
000000000000045a         db  0x00 ; '.'
000000000000045b         db  0x00 ; '.'
000000000000045c         db  0x00 ; '.'
000000000000045d         db  0x00 ; '.'
000000000000045e         db  0x00 ; '.'
000000000000045f         db  0x00 ; '.'
0000000000000460         db  0x4d ; 'M'
0000000000000461         db  0x02 ; '.'
0000000000000462         db  0x00 ; '.'
0000000000000463         db  0x00 ; '.'
0000000000000464         db  0x12 ; '.'
0000000000000465         db  0x00 ; '.'
0000000000000466         db  0x00 ; '.'
0000000000000467         db  0x00 ; '.'
0000000000000468         db  0x00 ; '.'
0000000000000469         db  0x00 ; '.'
000000000000046a         db  0x00 ; '.'
000000000000046b         db  0x00 ; '.'
000000000000046c         db  0x00 ; '.'                                         ; DATA XREF=re_search_internal+5446
000000000000046d         db  0x00 ; '.'
000000000000046e         db  0x00 ; '.'
000000000000046f         db  0x00 ; '.'
0000000000000470         db  0x00 ; '.'
0000000000000471         db  0x00 ; '.'
0000000000000472         db  0x00 ; '.'
0000000000000473         db  0x00 ; '.'
0000000000000474         db  0x00 ; '.'
0000000000000475         db  0x00 ; '.'
0000000000000476         db  0x00 ; '.'
0000000000000477         db  0x00 ; '.'
0000000000000478         db  0x29 ; ')'
0000000000000479         db  0x03 ; '.'
000000000000047a         db  0x00 ; '.'
000000000000047b         db  0x00 ; '.'
000000000000047c         db  0x12 ; '.'
000000000000047d         db  0x00 ; '.'
000000000000047e         db  0x00 ; '.'
000000000000047f         db  0x00 ; '.'
0000000000000480         db  0x00 ; '.'
0000000000000481         db  0x00 ; '.'
0000000000000482         db  0x00 ; '.'
0000000000000483         db  0x00 ; '.'
0000000000000484         db  0x00 ; '.'
0000000000000485         db  0x00 ; '.'
0000000000000486         db  0x00 ; '.'
0000000000000487         db  0x00 ; '.'
0000000000000488         db  0x00 ; '.'
0000000000000489         db  0x00 ; '.'
000000000000048a         db  0x00 ; '.'
000000000000048b         db  0x00 ; '.'
000000000000048c         db  0x00 ; '.'
000000000000048d         db  0x00 ; '.'
000000000000048e         db  0x00 ; '.'
000000000000048f         db  0x00 ; '.'
0000000000000490         db  0x3e ; '>'
0000000000000491         db  0x01 ; '.'
0000000000000492         db  0x00 ; '.'
0000000000000493         db  0x00 ; '.'
0000000000000494         db  0x12 ; '.'
0000000000000495         db  0x00 ; '.'
0000000000000496         db  0x00 ; '.'
0000000000000497         db  0x00 ; '.'
0000000000000498         db  0x00 ; '.'
0000000000000499         db  0x00 ; '.'
000000000000049a         db  0x00 ; '.'
000000000000049b         db  0x00 ; '.'
000000000000049c         db  0x00 ; '.'
000000000000049d         db  0x00 ; '.'
000000000000049e         db  0x00 ; '.'
000000000000049f         db  0x00 ; '.'
00000000000004a0         db  0x00 ; '.'
00000000000004a1         db  0x00 ; '.'
00000000000004a2         db  0x00 ; '.'
00000000000004a3         db  0x00 ; '.'
00000000000004a4         db  0x00 ; '.'
00000000000004a5         db  0x00 ; '.'
00000000000004a6         db  0x00 ; '.'
00000000000004a7         db  0x00 ; '.'
00000000000004a8         db  0xce ; '.'
00000000000004a9         db  0x01 ; '.'
00000000000004aa         db  0x00 ; '.'
00000000000004ab         db  0x00 ; '.'
00000000000004ac         db  0x12 ; '.'
00000000000004ad         db  0x00 ; '.'
00000000000004ae         db  0x00 ; '.'
00000000000004af         db  0x00 ; '.'
00000000000004b0         db  0x00 ; '.'
00000000000004b1         db  0x00 ; '.'
00000000000004b2         db  0x00 ; '.'
00000000000004b3         db  0x00 ; '.'
00000000000004b4         db  0x00 ; '.'
00000000000004b5         db  0x00 ; '.'
00000000000004b6         db  0x00 ; '.'
00000000000004b7         db  0x00 ; '.'
00000000000004b8         db  0x00 ; '.'
00000000000004b9         db  0x00 ; '.'
00000000000004ba         db  0x00 ; '.'
00000000000004bb         db  0x00 ; '.'
00000000000004bc         db  0x00 ; '.'
00000000000004bd         db  0x00 ; '.'
00000000000004be         db  0x00 ; '.'
00000000000004bf         db  0x00 ; '.'
00000000000004c0         db  0xec ; '.'
00000000000004c1         db  0x01 ; '.'
00000000000004c2         db  0x00 ; '.'
00000000000004c3         db  0x00 ; '.'
00000000000004c4         db  0x12 ; '.'
00000000000004c5         db  0x00 ; '.'
00000000000004c6         db  0x00 ; '.'
00000000000004c7         db  0x00 ; '.'
00000000000004c8         db  0x00 ; '.'
00000000000004c9         db  0x00 ; '.'
00000000000004ca         db  0x00 ; '.'
00000000000004cb         db  0x00 ; '.'
00000000000004cc         db  0x00 ; '.'
00000000000004cd         db  0x00 ; '.'
00000000000004ce         db  0x00 ; '.'
00000000000004cf         db  0x00 ; '.'
00000000000004d0         db  0x00 ; '.'
00000000000004d1         db  0x00 ; '.'
00000000000004d2         db  0x00 ; '.'
00000000000004d3         db  0x00 ; '.'
00000000000004d4         db  0x00 ; '.'
00000000000004d5         db  0x00 ; '.'
00000000000004d6         db  0x00 ; '.'
00000000000004d7         db  0x00 ; '.'
00000000000004d8         db  0xbf ; '.'
00000000000004d9         db  0x00 ; '.'
00000000000004da         db  0x00 ; '.'
00000000000004db         db  0x00 ; '.'
00000000000004dc         db  0x12 ; '.'
00000000000004dd         db  0x00 ; '.'
00000000000004de         db  0x00 ; '.'
00000000000004df         db  0x00 ; '.'
00000000000004e0         db  0x00 ; '.'
00000000000004e1         db  0x00 ; '.'
00000000000004e2         db  0x00 ; '.'
00000000000004e3         db  0x00 ; '.'
00000000000004e4         db  0x00 ; '.'
00000000000004e5         db  0x00 ; '.'
00000000000004e6         db  0x00 ; '.'
00000000000004e7         db  0x00 ; '.'
00000000000004e8         db  0x00 ; '.'
00000000000004e9         db  0x00 ; '.'
00000000000004ea         db  0x00 ; '.'
00000000000004eb         db  0x00 ; '.'
00000000000004ec         db  0x00 ; '.'
00000000000004ed         db  0x00 ; '.'
00000000000004ee         db  0x00 ; '.'
00000000000004ef         db  0x00 ; '.'
00000000000004f0         db  0x5b ; '['
00000000000004f1         db  0x01 ; '.'
00000000000004f2         db  0x00 ; '.'
00000000000004f3         db  0x00 ; '.'
00000000000004f4         db  0x12 ; '.'
00000000000004f5         db  0x00 ; '.'
00000000000004f6         db  0x00 ; '.'
00000000000004f7         db  0x00 ; '.'
00000000000004f8         db  0x00 ; '.'
00000000000004f9         db  0x00 ; '.'
00000000000004fa         db  0x00 ; '.'
00000000000004fb         db  0x00 ; '.'
00000000000004fc         db  0x00 ; '.'
00000000000004fd         db  0x00 ; '.'
00000000000004fe         db  0x00 ; '.'
00000000000004ff         db  0x00 ; '.'
0000000000000500         db  0x00 ; '.'
0000000000000501         db  0x00 ; '.'
0000000000000502         db  0x00 ; '.'
0000000000000503         db  0x00 ; '.'
0000000000000504         db  0x00 ; '.'
0000000000000505         db  0x00 ; '.'
0000000000000506         db  0x00 ; '.'
0000000000000507         db  0x00 ; '.'
0000000000000508         db  0x97 ; '.'
0000000000000509         db  0x02 ; '.'
000000000000050a         db  0x00 ; '.'
000000000000050b         db  0x00 ; '.'
000000000000050c         db  0x12 ; '.'
000000000000050d         db  0x00 ; '.'
000000000000050e         db  0x00 ; '.'
000000000000050f         db  0x00 ; '.'
0000000000000510         db  0x00 ; '.'
0000000000000511         db  0x00 ; '.'
0000000000000512         db  0x00 ; '.'
0000000000000513         db  0x00 ; '.'
0000000000000514         db  0x00 ; '.'
0000000000000515         db  0x00 ; '.'
0000000000000516         db  0x00 ; '.'
0000000000000517         db  0x00 ; '.'
0000000000000518         db  0x00 ; '.'
0000000000000519         db  0x00 ; '.'
000000000000051a         db  0x00 ; '.'
000000000000051b         db  0x00 ; '.'
000000000000051c         db  0x00 ; '.'
000000000000051d         db  0x00 ; '.'
000000000000051e         db  0x00 ; '.'
000000000000051f         db  0x00 ; '.'
0000000000000520         db  0x16 ; '.'
0000000000000521         db  0x01 ; '.'
0000000000000522         db  0x00 ; '.'
0000000000000523         db  0x00 ; '.'
0000000000000524         db  0x12 ; '.'
0000000000000525         db  0x00 ; '.'
0000000000000526         db  0x00 ; '.'
0000000000000527         db  0x00 ; '.'
0000000000000528         db  0x00 ; '.'
0000000000000529         db  0x00 ; '.'
000000000000052a         db  0x00 ; '.'
000000000000052b         db  0x00 ; '.'
000000000000052c         db  0x00 ; '.'
000000000000052d         db  0x00 ; '.'
000000000000052e         db  0x00 ; '.'
000000000000052f         db  0x00 ; '.'
0000000000000530         db  0x00 ; '.'
0000000000000531         db  0x00 ; '.'
0000000000000532         db  0x00 ; '.'
0000000000000533         db  0x00 ; '.'
0000000000000534         db  0x00 ; '.'
0000000000000535         db  0x00 ; '.'
0000000000000536         db  0x00 ; '.'
0000000000000537         db  0x00 ; '.'
0000000000000538         db  0xbc ; '.'
0000000000000539         db  0x02 ; '.'
000000000000053a         db  0x00 ; '.'
000000000000053b         db  0x00 ; '.'
000000000000053c         db  0x12 ; '.'
000000000000053d         db  0x00 ; '.'
000000000000053e         db  0x00 ; '.'
000000000000053f         db  0x00 ; '.'
0000000000000540         db  0x00 ; '.'
0000000000000541         db  0x00 ; '.'
0000000000000542         db  0x00 ; '.'
0000000000000543         db  0x00 ; '.'
0000000000000544         db  0x00 ; '.'
0000000000000545         db  0x00 ; '.'
0000000000000546         db  0x00 ; '.'
0000000000000547         db  0x00 ; '.'
0000000000000548         db  0x00 ; '.'
0000000000000549         db  0x00 ; '.'
000000000000054a         db  0x00 ; '.'
000000000000054b         db  0x00 ; '.'
000000000000054c         db  0x00 ; '.'
000000000000054d         db  0x00 ; '.'
000000000000054e         db  0x00 ; '.'
000000000000054f         db  0x00 ; '.'
0000000000000550         db  0x8b ; '.'
0000000000000551         db  0x00 ; '.'
0000000000000552         db  0x00 ; '.'
0000000000000553         db  0x00 ; '.'
0000000000000554         db  0x12 ; '.'
0000000000000555         db  0x00 ; '.'                                         ; DATA XREF=pop_fail_stack.isra.25+138
0000000000000556         db  0x00 ; '.'
0000000000000557         db  0x00 ; '.'
0000000000000558         db  0x00 ; '.'
0000000000000559         db  0x00 ; '.'
000000000000055a         db  0x00 ; '.'
000000000000055b         db  0x00 ; '.'
000000000000055c         db  0x00 ; '.'
000000000000055d         db  0x00 ; '.'
000000000000055e         db  0x00 ; '.'
000000000000055f         db  0x00 ; '.'
0000000000000560         db  0x00 ; '.'
0000000000000561         db  0x00 ; '.'
0000000000000562         db  0x00 ; '.'
0000000000000563         db  0x00 ; '.'
0000000000000564         db  0x00 ; '.'
0000000000000565         db  0x00 ; '.'
0000000000000566         db  0x00 ; '.'
0000000000000567         db  0x00 ; '.'
0000000000000568         db  0x67 ; 'g'
0000000000000569         db  0x03 ; '.'
000000000000056a         db  0x00 ; '.'
000000000000056b         db  0x00 ; '.'
000000000000056c         db  0x12 ; '.'
000000000000056d         db  0x00 ; '.'
000000000000056e         db  0x00 ; '.'
000000000000056f         db  0x00 ; '.'
0000000000000570         db  0x00 ; '.'
0000000000000571         db  0x00 ; '.'
0000000000000572         db  0x00 ; '.'
0000000000000573         db  0x00 ; '.'
0000000000000574         db  0x00 ; '.'
0000000000000575         db  0x00 ; '.'
0000000000000576         db  0x00 ; '.'
0000000000000577         db  0x00 ; '.'
0000000000000578         db  0x00 ; '.'
0000000000000579         db  0x00 ; '.'
000000000000057a         db  0x00 ; '.'
000000000000057b         db  0x00 ; '.'
000000000000057c         db  0x00 ; '.'
000000000000057d         db  0x00 ; '.'
000000000000057e         db  0x00 ; '.'
000000000000057f         db  0x00 ; '.'
0000000000000580         db  0x36 ; '6'
0000000000000581         db  0x01 ; '.'
0000000000000582         db  0x00 ; '.'
0000000000000583         db  0x00 ; '.'
0000000000000584         db  0x12 ; '.'
0000000000000585         db  0x00 ; '.'
0000000000000586         db  0x00 ; '.'
0000000000000587         db  0x00 ; '.'
0000000000000588         db  0x00 ; '.'
0000000000000589         db  0x00 ; '.'
000000000000058a         db  0x00 ; '.'
000000000000058b         db  0x00 ; '.'
000000000000058c         db  0x00 ; '.'
000000000000058d         db  0x00 ; '.'
000000000000058e         db  0x00 ; '.'
000000000000058f         db  0x00 ; '.'
0000000000000590         db  0x00 ; '.'
0000000000000591         db  0x00 ; '.'
0000000000000592         db  0x00 ; '.'
0000000000000593         db  0x00 ; '.'
0000000000000594         db  0x00 ; '.'
0000000000000595         db  0x00 ; '.'
0000000000000596         db  0x00 ; '.'
0000000000000597         db  0x00 ; '.'
0000000000000598         db  0x40 ; '@'
0000000000000599         db  0x02 ; '.'
000000000000059a         db  0x00 ; '.'
000000000000059b         db  0x00 ; '.'
000000000000059c         db  0x12 ; '.'
000000000000059d         db  0x00 ; '.'
000000000000059e         db  0x00 ; '.'
000000000000059f         db  0x00 ; '.'                                         ; DATA XREF=sub_140f0+32
00000000000005a0         db  0x00 ; '.'
00000000000005a1         db  0x00 ; '.'
00000000000005a2         db  0x00 ; '.'
00000000000005a3         db  0x00 ; '.'
00000000000005a4         db  0x00 ; '.'
00000000000005a5         db  0x00 ; '.'
00000000000005a6         db  0x00 ; '.'
00000000000005a7         db  0x00 ; '.'
00000000000005a8         db  0x00 ; '.'
00000000000005a9         db  0x00 ; '.'
00000000000005aa         db  0x00 ; '.'
00000000000005ab         db  0x00 ; '.'
00000000000005ac         db  0x00 ; '.'
00000000000005ad         db  0x00 ; '.'
00000000000005ae         db  0x00 ; '.'
00000000000005af         db  0x00 ; '.'                                         ; DATA XREF=sub_147d0+182
00000000000005b0         db  0xd9 ; '.'                                         ; DATA XREF=sub_147d0+120
00000000000005b1         db  0x00 ; '.'
00000000000005b2         db  0x00 ; '.'
00000000000005b3         db  0x00 ; '.'
00000000000005b4         db  0x12 ; '.'
00000000000005b5         db  0x00 ; '.'
00000000000005b6         db  0x00 ; '.'
00000000000005b7         db  0x00 ; '.'
00000000000005b8         db  0x00 ; '.'
00000000000005b9         db  0x00 ; '.'
00000000000005ba         db  0x00 ; '.'
00000000000005bb         db  0x00 ; '.'
00000000000005bc         db  0x00 ; '.'
00000000000005bd         db  0x00 ; '.'
00000000000005be         db  0x00 ; '.'
00000000000005bf         db  0x00 ; '.'
00000000000005c0         db  0x00 ; '.'
00000000000005c1         db  0x00 ; '.'
00000000000005c2         db  0x00 ; '.'                                         ; DATA XREF=sub_147d0+151
00000000000005c3         db  0x00 ; '.'
00000000000005c4         db  0x00 ; '.'
00000000000005c5         db  0x00 ; '.'
00000000000005c6         db  0x00 ; '.'
00000000000005c7         db  0x00 ; '.'
00000000000005c8         db  0xb7 ; '.'
00000000000005c9         db  0x01 ; '.'
00000000000005ca         db  0x00 ; '.'
00000000000005cb         db  0x00 ; '.'
00000000000005cc         db  0x12 ; '.'
00000000000005cd         db  0x00 ; '.'
00000000000005ce         db  0x00 ; '.'
00000000000005cf         db  0x00 ; '.'
00000000000005d0         db  0x00 ; '.'
00000000000005d1         db  0x00 ; '.'
00000000000005d2         db  0x00 ; '.'
00000000000005d3         db  0x00 ; '.'
00000000000005d4         db  0x00 ; '.'
00000000000005d5         db  0x00 ; '.'
00000000000005d6         db  0x00 ; '.'
00000000000005d7         db  0x00 ; '.'
00000000000005d8         db  0x00 ; '.'
00000000000005d9         db  0x00 ; '.'
00000000000005da         db  0x00 ; '.'
00000000000005db         db  0x00 ; '.'
00000000000005dc         db  0x00 ; '.'
00000000000005dd         db  0x00 ; '.'
00000000000005de         db  0x00 ; '.'
00000000000005df         db  0x00 ; '.'
00000000000005e0         db  0xfc ; '.'
00000000000005e1         db  0x01 ; '.'
00000000000005e2         db  0x00 ; '.'
00000000000005e3         db  0x00 ; '.'
00000000000005e4         db  0x12 ; '.'
00000000000005e5         db  0x00 ; '.'
00000000000005e6         db  0x00 ; '.'
00000000000005e7         db  0x00 ; '.'
00000000000005e8         db  0x00 ; '.'
00000000000005e9         db  0x00 ; '.'
00000000000005ea         db  0x00 ; '.'
00000000000005eb         db  0x00 ; '.'
00000000000005ec         db  0x00 ; '.'
00000000000005ed         db  0x00 ; '.'
00000000000005ee         db  0x00 ; '.'
00000000000005ef         db  0x00 ; '.'
00000000000005f0         db  0x00 ; '.'
00000000000005f1         db  0x00 ; '.'
00000000000005f2         db  0x00 ; '.'
00000000000005f3         db  0x00 ; '.'
00000000000005f4         db  0x00 ; '.'
00000000000005f5         db  0x00 ; '.'
00000000000005f6         db  0x00 ; '.'
00000000000005f7         db  0x00 ; '.'
00000000000005f8         db  0x03 ; '.'
00000000000005f9         db  0x02 ; '.'
00000000000005fa         db  0x00 ; '.'
00000000000005fb         db  0x00 ; '.'
00000000000005fc         db  0x12 ; '.'
00000000000005fd         db  0x00 ; '.'
00000000000005fe         db  0x00 ; '.'
00000000000005ff         db  0x00 ; '.'
0000000000000600         db  0x00 ; '.'
0000000000000601         db  0x00 ; '.'
0000000000000602         db  0x00 ; '.'
0000000000000603         db  0x00 ; '.'
0000000000000604         db  0x00 ; '.'
0000000000000605         db  0x00 ; '.'
0000000000000606         db  0x00 ; '.'
0000000000000607         db  0x00 ; '.'
0000000000000608         db  0x00 ; '.'
0000000000000609         db  0x00 ; '.'
000000000000060a         db  0x00 ; '.'
000000000000060b         db  0x00 ; '.'
000000000000060c         db  0x00 ; '.'
000000000000060d         db  0x00 ; '.'
000000000000060e         db  0x00 ; '.'
000000000000060f         db  0x00 ; '.'
0000000000000610         db  0x98 ; '.'
0000000000000611         db  0x01 ; '.'
0000000000000612         db  0x00 ; '.'
0000000000000613         db  0x00 ; '.'
0000000000000614         db  0x12 ; '.'
0000000000000615         db  0x00 ; '.'
0000000000000616         db  0x00 ; '.'
0000000000000617         db  0x00 ; '.'
0000000000000618         db  0x00 ; '.'
0000000000000619         db  0x00 ; '.'
000000000000061a         db  0x00 ; '.'
000000000000061b         db  0x00 ; '.'
000000000000061c         db  0x00 ; '.'
000000000000061d         db  0x00 ; '.'
000000000000061e         db  0x00 ; '.'
000000000000061f         db  0x00 ; '.'
0000000000000620         db  0x00 ; '.'
0000000000000621         db  0x00 ; '.'
0000000000000622         db  0x00 ; '.'
0000000000000623         db  0x00 ; '.'
0000000000000624         db  0x00 ; '.'
0000000000000625         db  0x00 ; '.'
0000000000000626         db  0x00 ; '.'
0000000000000627         db  0x00 ; '.'
0000000000000628         db  0x46 ; 'F'
0000000000000629         db  0x03 ; '.'
000000000000062a         db  0x00 ; '.'
000000000000062b         db  0x00 ; '.'
000000000000062c         db  0x12 ; '.'
000000000000062d         db  0x00 ; '.'
000000000000062e         db  0x00 ; '.'
000000000000062f         db  0x00 ; '.'
0000000000000630         db  0x00 ; '.'
0000000000000631         db  0x00 ; '.'
0000000000000632         db  0x00 ; '.'
0000000000000633         db  0x00 ; '.'
0000000000000634         db  0x00 ; '.'
0000000000000635         db  0x00 ; '.'
0000000000000636         db  0x00 ; '.'
0000000000000637         db  0x00 ; '.'
0000000000000638         db  0x00 ; '.'
0000000000000639         db  0x00 ; '.'
000000000000063a         db  0x00 ; '.'
000000000000063b         db  0x00 ; '.'
000000000000063c         db  0x00 ; '.'
000000000000063d         db  0x00 ; '.'
000000000000063e         db  0x00 ; '.'
000000000000063f         db  0x00 ; '.'
0000000000000640         db  0x1c ; '.'
0000000000000641         db  0x02 ; '.'
0000000000000642         db  0x00 ; '.'
0000000000000643         db  0x00 ; '.'
0000000000000644         db  0x12 ; '.'
0000000000000645         db  0x00 ; '.'
0000000000000646         db  0x00 ; '.'
0000000000000647         db  0x00 ; '.'
0000000000000648         db  0x00 ; '.'
0000000000000649         db  0x00 ; '.'
000000000000064a         db  0x00 ; '.'
000000000000064b         db  0x00 ; '.'
000000000000064c         db  0x00 ; '.'
000000000000064d         db  0x00 ; '.'
000000000000064e         db  0x00 ; '.'
000000000000064f         db  0x00 ; '.'
0000000000000650         db  0x00 ; '.'
0000000000000651         db  0x00 ; '.'
0000000000000652         db  0x00 ; '.'
0000000000000653         db  0x00 ; '.'
0000000000000654         db  0x00 ; '.'
0000000000000655         db  0x00 ; '.'
0000000000000656         db  0x00 ; '.'
0000000000000657         db  0x00 ; '.'
0000000000000658         db  0xf5 ; '.'
0000000000000659         db  0x01 ; '.'
000000000000065a         db  0x00 ; '.'
000000000000065b         db  0x00 ; '.'
000000000000065c         db  0x12 ; '.'
000000000000065d         db  0x00 ; '.'
000000000000065e         db  0x00 ; '.'
000000000000065f         db  0x00 ; '.'
0000000000000660         db  0x00 ; '.'
0000000000000661         db  0x00 ; '.'
0000000000000662         db  0x00 ; '.'
0000000000000663         db  0x00 ; '.'
0000000000000664         db  0x00 ; '.'
0000000000000665         db  0x00 ; '.'
0000000000000666         db  0x00 ; '.'
0000000000000667         db  0x00 ; '.'
0000000000000668         db  0x00 ; '.'
0000000000000669         db  0x00 ; '.'
000000000000066a         db  0x00 ; '.'
000000000000066b         db  0x00 ; '.'
000000000000066c         db  0x00 ; '.'
000000000000066d         db  0x00 ; '.'
000000000000066e         db  0x00 ; '.'
000000000000066f         db  0x00 ; '.'
0000000000000670         db  0x72 ; 'r'
0000000000000671         db  0x03 ; '.'
0000000000000672         db  0x00 ; '.'
0000000000000673         db  0x00 ; '.'
0000000000000674         db  0x12 ; '.'
0000000000000675         db  0x00 ; '.'
0000000000000676         db  0x00 ; '.'
0000000000000677         db  0x00 ; '.'
0000000000000678         db  0x00 ; '.'
0000000000000679         db  0x00 ; '.'
000000000000067a         db  0x00 ; '.'
000000000000067b         db  0x00 ; '.'
000000000000067c         db  0x00 ; '.'
000000000000067d         db  0x00 ; '.'
000000000000067e         db  0x00 ; '.'
000000000000067f         db  0x00 ; '.'
0000000000000680         db  0x00 ; '.'
0000000000000681         db  0x00 ; '.'
0000000000000682         db  0x00 ; '.'
0000000000000683         db  0x00 ; '.'
0000000000000684         db  0x00 ; '.'
0000000000000685         db  0x00 ; '.'
0000000000000686         db  0x00 ; '.'
0000000000000687         db  0x00 ; '.'
0000000000000688         db  0xe5 ; '.'
0000000000000689         db  0x01 ; '.'
000000000000068a         db  0x00 ; '.'
000000000000068b         db  0x00 ; '.'
000000000000068c         db  0x12 ; '.'
000000000000068d         db  0x00 ; '.'
000000000000068e         db  0x00 ; '.'
000000000000068f         db  0x00 ; '.'
0000000000000690         db  0x00 ; '.'
0000000000000691         db  0x00 ; '.'
0000000000000692         db  0x00 ; '.'
0000000000000693         db  0x00 ; '.'
0000000000000694         db  0x00 ; '.'
0000000000000695         db  0x00 ; '.'
0000000000000696         db  0x00 ; '.'
0000000000000697         db  0x00 ; '.'
0000000000000698         db  0x00 ; '.'
0000000000000699         db  0x00 ; '.'
000000000000069a         db  0x00 ; '.'
000000000000069b         db  0x00 ; '.'
000000000000069c         db  0x00 ; '.'
000000000000069d         db  0x00 ; '.'
000000000000069e         db  0x00 ; '.'
000000000000069f         db  0x00 ; '.'
00000000000006a0         db  0x3f ; '?'
00000000000006a1         db  0x03 ; '.'
00000000000006a2         db  0x00 ; '.'
00000000000006a3         db  0x00 ; '.'
00000000000006a4         db  0x12 ; '.'
00000000000006a5         db  0x00 ; '.'
00000000000006a6         db  0x00 ; '.'
00000000000006a7         db  0x00 ; '.'
00000000000006a8         db  0x00 ; '.'
00000000000006a9         db  0x00 ; '.'
00000000000006aa         db  0x00 ; '.'
00000000000006ab         db  0x00 ; '.'
00000000000006ac         db  0x00 ; '.'
00000000000006ad         db  0x00 ; '.'
00000000000006ae         db  0x00 ; '.'
00000000000006af         db  0x00 ; '.'
00000000000006b0         db  0x00 ; '.'
00000000000006b1         db  0x00 ; '.'
00000000000006b2         db  0x00 ; '.'
00000000000006b3         db  0x00 ; '.'
00000000000006b4         db  0x00 ; '.'
00000000000006b5         db  0x00 ; '.'
00000000000006b6         db  0x00 ; '.'
00000000000006b7         db  0x00 ; '.'
00000000000006b8         db  0x2a ; '*'
00000000000006b9         db  0x00 ; '.'
00000000000006ba         db  0x00 ; '.'
00000000000006bb         db  0x00 ; '.'
00000000000006bc         db  0x20 ; ' '
00000000000006bd         db  0x00 ; '.'
00000000000006be         db  0x00 ; '.'
00000000000006bf         db  0x00 ; '.'
00000000000006c0         db  0x00 ; '.'
00000000000006c1         db  0x00 ; '.'
00000000000006c2         db  0x00 ; '.'
00000000000006c3         db  0x00 ; '.'
00000000000006c4         db  0x00 ; '.'
00000000000006c5         db  0x00 ; '.'
00000000000006c6         db  0x00 ; '.'
00000000000006c7         db  0x00 ; '.'
00000000000006c8         db  0x00 ; '.'
00000000000006c9         db  0x00 ; '.'
00000000000006ca         db  0x00 ; '.'
00000000000006cb         db  0x00 ; '.'
00000000000006cc         db  0x00 ; '.'
00000000000006cd         db  0x00 ; '.'
00000000000006ce         db  0x00 ; '.'
00000000000006cf         db  0x00 ; '.'
00000000000006d0         db  0x46 ; 'F'
00000000000006d1         db  0x02 ; '.'
00000000000006d2         db  0x00 ; '.'
00000000000006d3         db  0x00 ; '.'
00000000000006d4         db  0x12 ; '.'
00000000000006d5         db  0x00 ; '.'
00000000000006d6         db  0x00 ; '.'
00000000000006d7         db  0x00 ; '.'
00000000000006d8         db  0x00 ; '.'
00000000000006d9         db  0x00 ; '.'
00000000000006da         db  0x00 ; '.'
00000000000006db         db  0x00 ; '.'
00000000000006dc         db  0x00 ; '.'
00000000000006dd         db  0x00 ; '.'
00000000000006de         db  0x00 ; '.'
00000000000006df         db  0x00 ; '.'
00000000000006e0         db  0x00 ; '.'
00000000000006e1         db  0x00 ; '.'
00000000000006e2         db  0x00 ; '.'
00000000000006e3         db  0x00 ; '.'
00000000000006e4         db  0x00 ; '.'
00000000000006e5         db  0x00 ; '.'
00000000000006e6         db  0x00 ; '.'
00000000000006e7         db  0x00 ; '.'
00000000000006e8         db  0xa3 ; '.'
00000000000006e9         db  0x02 ; '.'
00000000000006ea         db  0x00 ; '.'
00000000000006eb         db  0x00 ; '.'
00000000000006ec         db  0x12 ; '.'
00000000000006ed         db  0x00 ; '.'
00000000000006ee         db  0x00 ; '.'
00000000000006ef         db  0x00 ; '.'
00000000000006f0         db  0x00 ; '.'
00000000000006f1         db  0x00 ; '.'
00000000000006f2         db  0x00 ; '.'
00000000000006f3         db  0x00 ; '.'
00000000000006f4         db  0x00 ; '.'
00000000000006f5         db  0x00 ; '.'
00000000000006f6         db  0x00 ; '.'
00000000000006f7         db  0x00 ; '.'
00000000000006f8         db  0x00 ; '.'
00000000000006f9         db  0x00 ; '.'
00000000000006fa         db  0x00 ; '.'
00000000000006fb         db  0x00 ; '.'
00000000000006fc         db  0x00 ; '.'
00000000000006fd         db  0x00 ; '.'
00000000000006fe         db  0x00 ; '.'
00000000000006ff         db  0x00 ; '.'
0000000000000700         db  0xb1 ; '.'
0000000000000701         db  0x00 ; '.'
0000000000000702         db  0x00 ; '.'
0000000000000703         db  0x00 ; '.'
0000000000000704         db  0x12 ; '.'
0000000000000705         db  0x00 ; '.'
0000000000000706         db  0x00 ; '.'
0000000000000707         db  0x00 ; '.'
0000000000000708         db  0x00 ; '.'
0000000000000709         db  0x00 ; '.'
000000000000070a         db  0x00 ; '.'
000000000000070b         db  0x00 ; '.'
000000000000070c         db  0x00 ; '.'
000000000000070d         db  0x00 ; '.'
000000000000070e         db  0x00 ; '.'
000000000000070f         db  0x00 ; '.'
0000000000000710         db  0x00 ; '.'
0000000000000711         db  0x00 ; '.'
0000000000000712         db  0x00 ; '.'
0000000000000713         db  0x00 ; '.'
0000000000000714         db  0x00 ; '.'
0000000000000715         db  0x00 ; '.'
0000000000000716         db  0x00 ; '.'
0000000000000717         db  0x00 ; '.'
0000000000000718         db  0x8f ; '.'
0000000000000719         db  0x02 ; '.'
000000000000071a         db  0x00 ; '.'
000000000000071b         db  0x00 ; '.'
000000000000071c         db  0x12 ; '.'
000000000000071d         db  0x00 ; '.'
000000000000071e         db  0x00 ; '.'
000000000000071f         db  0x00 ; '.'
0000000000000720         db  0x00 ; '.'
0000000000000721         db  0x00 ; '.'
0000000000000722         db  0x00 ; '.'
0000000000000723         db  0x00 ; '.'
0000000000000724         db  0x00 ; '.'
0000000000000725         db  0x00 ; '.'
0000000000000726         db  0x00 ; '.'
0000000000000727         db  0x00 ; '.'
0000000000000728         db  0x00 ; '.'
0000000000000729         db  0x00 ; '.'
000000000000072a         db  0x00 ; '.'
000000000000072b         db  0x00 ; '.'
000000000000072c         db  0x00 ; '.'
000000000000072d         db  0x00 ; '.'
000000000000072e         db  0x00 ; '.'
000000000000072f         db  0x00 ; '.'
0000000000000730         db  0xc5 ; '.'
0000000000000731         db  0x01 ; '.'
0000000000000732         db  0x00 ; '.'
0000000000000733         db  0x00 ; '.'
0000000000000734         db  0x12 ; '.'
0000000000000735         db  0x00 ; '.'
0000000000000736         db  0x00 ; '.'
0000000000000737         db  0x00 ; '.'
0000000000000738         db  0x00 ; '.'
0000000000000739         db  0x00 ; '.'
000000000000073a         db  0x00 ; '.'
000000000000073b         db  0x00 ; '.'
000000000000073c         db  0x00 ; '.'
000000000000073d         db  0x00 ; '.'
000000000000073e         db  0x00 ; '.'
000000000000073f         db  0x00 ; '.'
0000000000000740         db  0x00 ; '.'
0000000000000741         db  0x00 ; '.'
0000000000000742         db  0x00 ; '.'
0000000000000743         db  0x00 ; '.'
0000000000000744         db  0x00 ; '.'
0000000000000745         db  0x00 ; '.'
0000000000000746         db  0x00 ; '.'
0000000000000747         db  0x00 ; '.'
0000000000000748         db  0x54 ; 'T'
0000000000000749         db  0x02 ; '.'
000000000000074a         db  0x00 ; '.'
000000000000074b         db  0x00 ; '.'
000000000000074c         db  0x12 ; '.'
000000000000074d         db  0x00 ; '.'
000000000000074e         db  0x00 ; '.'
000000000000074f         db  0x00 ; '.'
0000000000000750         db  0x00 ; '.'
0000000000000751         db  0x00 ; '.'
0000000000000752         db  0x00 ; '.'
0000000000000753         db  0x00 ; '.'
0000000000000754         db  0x00 ; '.'
0000000000000755         db  0x00 ; '.'
0000000000000756         db  0x00 ; '.'
0000000000000757         db  0x00 ; '.'
0000000000000758         db  0x00 ; '.'
0000000000000759         db  0x00 ; '.'
000000000000075a         db  0x00 ; '.'
000000000000075b         db  0x00 ; '.'
000000000000075c         db  0x00 ; '.'
000000000000075d         db  0x00 ; '.'
000000000000075e         db  0x00 ; '.'
000000000000075f         db  0x00 ; '.'
0000000000000760         db  0x48 ; 'H'
0000000000000761         db  0x01 ; '.'
0000000000000762         db  0x00 ; '.'
0000000000000763         db  0x00 ; '.'
0000000000000764         db  0x12 ; '.'
0000000000000765         db  0x00 ; '.'
0000000000000766         db  0x00 ; '.'
0000000000000767         db  0x00 ; '.'
0000000000000768         db  0x00 ; '.'
0000000000000769         db  0x00 ; '.'
000000000000076a         db  0x00 ; '.'
000000000000076b         db  0x00 ; '.'
000000000000076c         db  0x00 ; '.'
000000000000076d         db  0x00 ; '.'
000000000000076e         db  0x00 ; '.'
000000000000076f         db  0x00 ; '.'
0000000000000770         db  0x00 ; '.'
0000000000000771         db  0x00 ; '.'
0000000000000772         db  0x00 ; '.'
0000000000000773         db  0x00 ; '.'
0000000000000774         db  0x00 ; '.'
0000000000000775         db  0x00 ; '.'
0000000000000776         db  0x00 ; '.'
0000000000000777         db  0x00 ; '.'
0000000000000778         db  0xf8 ; '.'
0000000000000779         db  0x00 ; '.'
000000000000077a         db  0x00 ; '.'
000000000000077b         db  0x00 ; '.'
000000000000077c         db  0x12 ; '.'
000000000000077d         db  0x00 ; '.'
000000000000077e         db  0x00 ; '.'
000000000000077f         db  0x00 ; '.'
0000000000000780         db  0x00 ; '.'
0000000000000781         db  0x00 ; '.'
0000000000000782         db  0x00 ; '.'
0000000000000783         db  0x00 ; '.'
0000000000000784         db  0x00 ; '.'
0000000000000785         db  0x00 ; '.'
0000000000000786         db  0x00 ; '.'
0000000000000787         db  0x00 ; '.'
0000000000000788         db  0x00 ; '.'
0000000000000789         db  0x00 ; '.'
000000000000078a         db  0x00 ; '.'
000000000000078b         db  0x00 ; '.'
000000000000078c         db  0x00 ; '.'
000000000000078d         db  0x00 ; '.'
000000000000078e         db  0x00 ; '.'
000000000000078f         db  0x00 ; '.'
0000000000000790         db  0x96 ; '.'
0000000000000791         db  0x00 ; '.'
0000000000000792         db  0x00 ; '.'
0000000000000793         db  0x00 ; '.'
0000000000000794         db  0x12 ; '.'
0000000000000795         db  0x00 ; '.'
0000000000000796         db  0x00 ; '.'
0000000000000797         db  0x00 ; '.'
0000000000000798         db  0x00 ; '.'
0000000000000799         db  0x00 ; '.'
000000000000079a         db  0x00 ; '.'
000000000000079b         db  0x00 ; '.'
000000000000079c         db  0x00 ; '.'
000000000000079d         db  0x00 ; '.'
000000000000079e         db  0x00 ; '.'
000000000000079f         db  0x00 ; '.'
00000000000007a0         db  0x00 ; '.'
00000000000007a1         db  0x00 ; '.'
00000000000007a2         db  0x00 ; '.'
00000000000007a3         db  0x00 ; '.'
00000000000007a4         db  0x00 ; '.'
00000000000007a5         db  0x00 ; '.'
00000000000007a6         db  0x00 ; '.'
00000000000007a7         db  0x00 ; '.'
00000000000007a8         db  0x63 ; 'c'
00000000000007a9         db  0x02 ; '.'
00000000000007aa         db  0x00 ; '.'
00000000000007ab         db  0x00 ; '.'
00000000000007ac         db  0x12 ; '.'
00000000000007ad         db  0x00 ; '.'
00000000000007ae         db  0x00 ; '.'
00000000000007af         db  0x00 ; '.'
00000000000007b0         db  0x00 ; '.'
00000000000007b1         db  0x00 ; '.'
00000000000007b2         db  0x00 ; '.'
00000000000007b3         db  0x00 ; '.'
00000000000007b4         db  0x00 ; '.'
00000000000007b5         db  0x00 ; '.'
00000000000007b6         db  0x00 ; '.'
00000000000007b7         db  0x00 ; '.'
00000000000007b8         db  0x00 ; '.'
00000000000007b9         db  0x00 ; '.'
00000000000007ba         db  0x00 ; '.'
00000000000007bb         db  0x00 ; '.'
00000000000007bc         db  0x00 ; '.'
00000000000007bd         db  0x00 ; '.'
00000000000007be         db  0x00 ; '.'
00000000000007bf         db  0x00 ; '.'
00000000000007c0         db  0x5f ; '_'
00000000000007c1         db  0x03 ; '.'
00000000000007c2         db  0x00 ; '.'
00000000000007c3         db  0x00 ; '.'
00000000000007c4         db  0x12 ; '.'
00000000000007c5         db  0x00 ; '.'
00000000000007c6         db  0x00 ; '.'
00000000000007c7         db  0x00 ; '.'
00000000000007c8         db  0x00 ; '.'
00000000000007c9         db  0x00 ; '.'
00000000000007ca         db  0x00 ; '.'
00000000000007cb         db  0x00 ; '.'
00000000000007cc         db  0x00 ; '.'
00000000000007cd         db  0x00 ; '.'
00000000000007ce         db  0x00 ; '.'
00000000000007cf         db  0x00 ; '.'
00000000000007d0         db  0x00 ; '.'
00000000000007d1         db  0x00 ; '.'
00000000000007d2         db  0x00 ; '.'
00000000000007d3         db  0x00 ; '.'
00000000000007d4         db  0x00 ; '.'
00000000000007d5         db  0x00 ; '.'
00000000000007d6         db  0x00 ; '.'
00000000000007d7         db  0x00 ; '.'
00000000000007d8         db  0x7d ; '}'
00000000000007d9         db  0x02 ; '.'
00000000000007da         db  0x00 ; '.'
00000000000007db         db  0x00 ; '.'
00000000000007dc         db  0x12 ; '.'
00000000000007dd         db  0x00 ; '.'
00000000000007de         db  0x00 ; '.'
00000000000007df         db  0x00 ; '.'
00000000000007e0         db  0x00 ; '.'
00000000000007e1         db  0x00 ; '.'
00000000000007e2         db  0x00 ; '.'
00000000000007e3         db  0x00 ; '.'                                         ; DATA XREF=version_etc_arn+89
00000000000007e4         db  0x00 ; '.'
00000000000007e5         db  0x00 ; '.'
00000000000007e6         db  0x00 ; '.'
00000000000007e7         db  0x00 ; '.'
00000000000007e8         db  0x00 ; '.'
00000000000007e9         db  0x00 ; '.'
00000000000007ea         db  0x00 ; '.'
00000000000007eb         db  0x00 ; '.'
00000000000007ec         db  0x00 ; '.'
00000000000007ed         db  0x00 ; '.'
00000000000007ee         db  0x00 ; '.'
00000000000007ef         db  0x00 ; '.'
00000000000007f0         db  0x75 ; 'u'
00000000000007f1         db  0x01 ; '.'
00000000000007f2         db  0x00 ; '.'
00000000000007f3         db  0x00 ; '.'
00000000000007f4         db  0x12 ; '.'
00000000000007f5         db  0x00 ; '.'
00000000000007f6         db  0x00 ; '.'
00000000000007f7         db  0x00 ; '.'
00000000000007f8         db  0x00 ; '.'
00000000000007f9         db  0x00 ; '.'
00000000000007fa         db  0x00 ; '.'
00000000000007fb         db  0x00 ; '.'
00000000000007fc         db  0x00 ; '.'
00000000000007fd         db  0x00 ; '.'
00000000000007fe         db  0x00 ; '.'
00000000000007ff         db  0x00 ; '.'
0000000000000800         db  0x00 ; '.'                                         ; DATA XREF=peek_token+816, peek_token+1670
0000000000000801         db  0x00 ; '.'
0000000000000802         db  0x00 ; '.'
0000000000000803         db  0x00 ; '.'
0000000000000804         db  0x00 ; '.'
0000000000000805         db  0x00 ; '.'
0000000000000806         db  0x00 ; '.'
0000000000000807         db  0x00 ; '.'
0000000000000808         db  0x0c ; '.'
0000000000000809         db  0x01 ; '.'
000000000000080a         db  0x00 ; '.'
000000000000080b         db  0x00 ; '.'
000000000000080c         db  0x12 ; '.'
000000000000080d         db  0x00 ; '.'
000000000000080e         db  0x00 ; '.'
000000000000080f         db  0x00 ; '.'
0000000000000810         db  0x00 ; '.'
0000000000000811         db  0x00 ; '.'
0000000000000812         db  0x00 ; '.'
0000000000000813         db  0x00 ; '.'
0000000000000814         db  0x00 ; '.'
0000000000000815         db  0x00 ; '.'
0000000000000816         db  0x00 ; '.'
0000000000000817         db  0x00 ; '.'
0000000000000818         db  0x00 ; '.'
0000000000000819         db  0x00 ; '.'
000000000000081a         db  0x00 ; '.'
000000000000081b         db  0x00 ; '.'
000000000000081c         db  0x00 ; '.'
000000000000081d         db  0x00 ; '.'
000000000000081e         db  0x00 ; '.'
000000000000081f         db  0x00 ; '.'
0000000000000820         db  0xff ; '.'
0000000000000821         db  0x00 ; '.'
0000000000000822         db  0x00 ; '.'
0000000000000823         db  0x00 ; '.'
0000000000000824         db  0x12 ; '.'
0000000000000825         db  0x00 ; '.'
0000000000000826         db  0x00 ; '.'
0000000000000827         db  0x00 ; '.'
0000000000000828         db  0x00 ; '.'
0000000000000829         db  0x00 ; '.'
000000000000082a         db  0x00 ; '.'
000000000000082b         db  0x00 ; '.'
000000000000082c         db  0x00 ; '.'
000000000000082d         db  0x00 ; '.'
000000000000082e         db  0x00 ; '.'
000000000000082f         db  0x00 ; '.'
0000000000000830         db  0x00 ; '.'
0000000000000831         db  0x00 ; '.'
0000000000000832         db  0x00 ; '.'
0000000000000833         db  0x00 ; '.'
0000000000000834         db  0x00 ; '.'
0000000000000835         db  0x00 ; '.'
0000000000000836         db  0x00 ; '.'
0000000000000837         db  0x00 ; '.'
0000000000000838         db  0x64 ; 'd'
0000000000000839         db  0x00 ; '.'
000000000000083a         db  0x00 ; '.'
000000000000083b         db  0x00 ; '.'
000000000000083c         db  0x12 ; '.'
000000000000083d         db  0x00 ; '.'
000000000000083e         db  0x00 ; '.'
000000000000083f         db  0x00 ; '.'
0000000000000840         db  0x00 ; '.'
0000000000000841         db  0x00 ; '.'
0000000000000842         db  0x00 ; '.'
0000000000000843         db  0x00 ; '.'
0000000000000844         db  0x00 ; '.'
0000000000000845         db  0x00 ; '.'
0000000000000846         db  0x00 ; '.'
0000000000000847         db  0x00 ; '.'
0000000000000848         db  0x00 ; '.'
0000000000000849         db  0x00 ; '.'
000000000000084a         db  0x00 ; '.'
000000000000084b         db  0x00 ; '.'
000000000000084c         db  0x00 ; '.'
000000000000084d         db  0x00 ; '.'
000000000000084e         db  0x00 ; '.'
000000000000084f         db  0x00 ; '.'
0000000000000850         db  0x7d ; '}'
0000000000000851         db  0x01 ; '.'
0000000000000852         db  0x00 ; '.'
0000000000000853         db  0x00 ; '.'
0000000000000854         db  0x12 ; '.'
0000000000000855         db  0x00 ; '.'
0000000000000856         db  0x00 ; '.'
0000000000000857         db  0x00 ; '.'
0000000000000858         db  0x00 ; '.'
0000000000000859         db  0x00 ; '.'
000000000000085a         db  0x00 ; '.'
000000000000085b         db  0x00 ; '.'
000000000000085c         db  0x00 ; '.'
000000000000085d         db  0x00 ; '.'
000000000000085e         db  0x00 ; '.'
000000000000085f         db  0x00 ; '.'
0000000000000860         db  0x00 ; '.'
0000000000000861         db  0x00 ; '.'
0000000000000862         db  0x00 ; '.'
0000000000000863         db  0x00 ; '.'
0000000000000864         db  0x00 ; '.'
0000000000000865         db  0x00 ; '.'
0000000000000866         db  0x00 ; '.'
0000000000000867         db  0x00 ; '.'
0000000000000868         db  0x23 ; '#'
0000000000000869         db  0x02 ; '.'
000000000000086a         db  0x00 ; '.'
000000000000086b         db  0x00 ; '.'
000000000000086c         db  0x12 ; '.'
000000000000086d         db  0x00 ; '.'
000000000000086e         db  0x00 ; '.'
000000000000086f         db  0x00 ; '.'
0000000000000870         db  0x00 ; '.'
0000000000000871         db  0x00 ; '.'
0000000000000872         db  0x00 ; '.'
0000000000000873         db  0x00 ; '.'
0000000000000874         db  0x00 ; '.'
0000000000000875         db  0x00 ; '.'
0000000000000876         db  0x00 ; '.'
0000000000000877         db  0x00 ; '.'
0000000000000878         db  0x00 ; '.'
0000000000000879         db  0x00 ; '.'
000000000000087a         db  0x00 ; '.'
000000000000087b         db  0x00 ; '.'
000000000000087c         db  0x00 ; '.'
000000000000087d         db  0x00 ; '.'
000000000000087e         db  0x00 ; '.'
000000000000087f         db  0x00 ; '.'
0000000000000880         db  0x21 ; '!'
0000000000000881         db  0x03 ; '.'
0000000000000882         db  0x00 ; '.'
0000000000000883         db  0x00 ; '.'
0000000000000884         db  0x12 ; '.'
0000000000000885         db  0x00 ; '.'
0000000000000886         db  0x00 ; '.'
0000000000000887         db  0x00 ; '.'
0000000000000888         db  0x00 ; '.'
0000000000000889         db  0x00 ; '.'
000000000000088a         db  0x00 ; '.'
000000000000088b         db  0x00 ; '.'
000000000000088c         db  0x00 ; '.'
000000000000088d         db  0x00 ; '.'
000000000000088e         db  0x00 ; '.'
000000000000088f         db  0x00 ; '.'
0000000000000890         db  0x00 ; '.'
0000000000000891         db  0x00 ; '.'
0000000000000892         db  0x00 ; '.'
0000000000000893         db  0x00 ; '.'
0000000000000894         db  0x00 ; '.'
0000000000000895         db  0x00 ; '.'
0000000000000896         db  0x00 ; '.'
0000000000000897         db  0x00 ; '.'
0000000000000898         db  0x50 ; 'P'
0000000000000899         db  0x01 ; '.'
000000000000089a         db  0x00 ; '.'
000000000000089b         db  0x00 ; '.'
000000000000089c         db  0x12 ; '.'
000000000000089d         db  0x00 ; '.'
000000000000089e         db  0x00 ; '.'
000000000000089f         db  0x00 ; '.'
00000000000008a0         db  0x00 ; '.'
00000000000008a1         db  0x00 ; '.'
00000000000008a2         db  0x00 ; '.'
00000000000008a3         db  0x00 ; '.'
00000000000008a4         db  0x00 ; '.'
00000000000008a5         db  0x00 ; '.'
00000000000008a6         db  0x00 ; '.'
00000000000008a7         db  0x00 ; '.'
00000000000008a8         db  0x00 ; '.'
00000000000008a9         db  0x00 ; '.'
00000000000008aa         db  0x00 ; '.'
00000000000008ab         db  0x00 ; '.'
00000000000008ac         db  0x00 ; '.'
00000000000008ad         db  0x00 ; '.'
00000000000008ae         db  0x00 ; '.'
00000000000008af         db  0x00 ; '.'
00000000000008b0         db  0x58 ; 'X'
00000000000008b1         db  0x03 ; '.'
00000000000008b2         db  0x00 ; '.'
00000000000008b3         db  0x00 ; '.'
00000000000008b4         db  0x12 ; '.'
00000000000008b5         db  0x00 ; '.'
00000000000008b6         db  0x00 ; '.'
00000000000008b7         db  0x00 ; '.'
00000000000008b8         db  0x00 ; '.'
00000000000008b9         db  0x00 ; '.'
00000000000008ba         db  0x00 ; '.'
00000000000008bb         db  0x00 ; '.'
00000000000008bc         db  0x00 ; '.'
00000000000008bd         db  0x00 ; '.'
00000000000008be         db  0x00 ; '.'
00000000000008bf         db  0x00 ; '.'
00000000000008c0         db  0x00 ; '.'
00000000000008c1         db  0x00 ; '.'
00000000000008c2         db  0x00 ; '.'
00000000000008c3         db  0x00 ; '.'
00000000000008c4         db  0x00 ; '.'
00000000000008c5         db  0x00 ; '.'
00000000000008c6         db  0x00 ; '.'
00000000000008c7         db  0x00 ; '.'
00000000000008c8         db  0x59 ; 'Y'
00000000000008c9         db  0x00 ; '.'
00000000000008ca         db  0x00 ; '.'
00000000000008cb         db  0x00 ; '.'
00000000000008cc         db  0x12 ; '.'
00000000000008cd         db  0x00 ; '.'
00000000000008ce         db  0x00 ; '.'
00000000000008cf         db  0x00 ; '.'
00000000000008d0         db  0x00 ; '.'
00000000000008d1         db  0x00 ; '.'
00000000000008d2         db  0x00 ; '.'
00000000000008d3         db  0x00 ; '.'
00000000000008d4         db  0x00 ; '.'
00000000000008d5         db  0x00 ; '.'
00000000000008d6         db  0x00 ; '.'
00000000000008d7         db  0x00 ; '.'
00000000000008d8         db  0x00 ; '.'
00000000000008d9         db  0x00 ; '.'
00000000000008da         db  0x00 ; '.'
00000000000008db         db  0x00 ; '.'
00000000000008dc         db  0x00 ; '.'
00000000000008dd         db  0x00 ; '.'
00000000000008de         db  0x00 ; '.'
00000000000008df         db  0x00 ; '.'
00000000000008e0         db  0x1e ; '.'
00000000000008e1         db  0x01 ; '.'
00000000000008e2         db  0x00 ; '.'
00000000000008e3         db  0x00 ; '.'
00000000000008e4         db  0x12 ; '.'
00000000000008e5         db  0x00 ; '.'
00000000000008e6         db  0x00 ; '.'
00000000000008e7         db  0x00 ; '.'
00000000000008e8         db  0x00 ; '.'
00000000000008e9         db  0x00 ; '.'
00000000000008ea         db  0x00 ; '.'
00000000000008eb         db  0x00 ; '.'
00000000000008ec         db  0x00 ; '.'
00000000000008ed         db  0x00 ; '.'
00000000000008ee         db  0x00 ; '.'
00000000000008ef         db  0x00 ; '.'
00000000000008f0         db  0x00 ; '.'
00000000000008f1         db  0x00 ; '.'
00000000000008f2         db  0x00 ; '.'
00000000000008f3         db  0x00 ; '.'
00000000000008f4         db  0x00 ; '.'
00000000000008f5         db  0x00 ; '.'
00000000000008f6         db  0x00 ; '.'
00000000000008f7         db  0x00 ; '.'
00000000000008f8         db  0x83 ; '.'
00000000000008f9         db  0x01 ; '.'
00000000000008fa         db  0x00 ; '.'
00000000000008fb         db  0x00 ; '.'
00000000000008fc         db  0x12 ; '.'
00000000000008fd         db  0x00 ; '.'
00000000000008fe         db  0x00 ; '.'
00000000000008ff         db  0x00 ; '.'
0000000000000900         db  0x00 ; '.'
0000000000000901         db  0x00 ; '.'
0000000000000902         db  0x00 ; '.'
0000000000000903         db  0x00 ; '.'
0000000000000904         db  0x00 ; '.'
0000000000000905         db  0x00 ; '.'
0000000000000906         db  0x00 ; '.'
0000000000000907         db  0x00 ; '.'
0000000000000908         db  0x00 ; '.'
0000000000000909         db  0x00 ; '.'
000000000000090a         db  0x00 ; '.'
000000000000090b         db  0x00 ; '.'
000000000000090c         db  0x00 ; '.'
000000000000090d         db  0x00 ; '.'
000000000000090e         db  0x00 ; '.'
000000000000090f         db  0x00 ; '.'
0000000000000910         db  0x77 ; 'w'
0000000000000911         db  0x00 ; '.'
0000000000000912         db  0x00 ; '.'
0000000000000913         db  0x00 ; '.'
0000000000000914         db  0x12 ; '.'
0000000000000915         db  0x00 ; '.'
0000000000000916         db  0x00 ; '.'
0000000000000917         db  0x00 ; '.'
0000000000000918         db  0x00 ; '.'
0000000000000919         db  0x00 ; '.'
000000000000091a         db  0x00 ; '.'
000000000000091b         db  0x00 ; '.'
000000000000091c         db  0x00 ; '.'
000000000000091d         db  0x00 ; '.'
000000000000091e         db  0x00 ; '.'
000000000000091f         db  0x00 ; '.'
0000000000000920         db  0x00 ; '.'
0000000000000921         db  0x00 ; '.'
0000000000000922         db  0x00 ; '.'
0000000000000923         db  0x00 ; '.'
0000000000000924         db  0x00 ; '.'
0000000000000925         db  0x00 ; '.'
0000000000000926         db  0x00 ; '.'
0000000000000927         db  0x00 ; '.'
0000000000000928         db  0xa1 ; '.'
0000000000000929         db  0x03 ; '.'
000000000000092a         db  0x00 ; '.'
000000000000092b         db  0x00 ; '.'
000000000000092c         db  0x12 ; '.'
000000000000092d         db  0x00 ; '.'
000000000000092e         db  0x00 ; '.'
000000000000092f         db  0x00 ; '.'
0000000000000930         db  0x00 ; '.'
0000000000000931         db  0x00 ; '.'
0000000000000932         db  0x00 ; '.'
0000000000000933         db  0x00 ; '.'
0000000000000934         db  0x00 ; '.'
0000000000000935         db  0x00 ; '.'
0000000000000936         db  0x00 ; '.'
0000000000000937         db  0x00 ; '.'
0000000000000938         db  0x00 ; '.'
0000000000000939         db  0x00 ; '.'
000000000000093a         db  0x00 ; '.'
000000000000093b         db  0x00 ; '.'
000000000000093c         db  0x00 ; '.'
000000000000093d         db  0x00 ; '.'
000000000000093e         db  0x00 ; '.'
000000000000093f         db  0x00 ; '.'
0000000000000940         db  0x93 ; '.'
0000000000000941         db  0x01 ; '.'
0000000000000942         db  0x00 ; '.'
0000000000000943         db  0x00 ; '.'
0000000000000944         db  0x12 ; '.'
0000000000000945         db  0x00 ; '.'
0000000000000946         db  0x00 ; '.'
0000000000000947         db  0x00 ; '.'
0000000000000948         db  0x00 ; '.'
0000000000000949         db  0x00 ; '.'
000000000000094a         db  0x00 ; '.'
000000000000094b         db  0x00 ; '.'
000000000000094c         db  0x00 ; '.'
000000000000094d         db  0x00 ; '.'
000000000000094e         db  0x00 ; '.'
000000000000094f         db  0x00 ; '.'
0000000000000950         db  0x00 ; '.'
0000000000000951         db  0x00 ; '.'
0000000000000952         db  0x00 ; '.'
0000000000000953         db  0x00 ; '.'
0000000000000954         db  0x00 ; '.'
0000000000000955         db  0x00 ; '.'
0000000000000956         db  0x00 ; '.'
0000000000000957         db  0x00 ; '.'
0000000000000958         db  0xaa ; '.'
0000000000000959         db  0x02 ; '.'
000000000000095a         db  0x00 ; '.'
000000000000095b         db  0x00 ; '.'
000000000000095c         db  0x12 ; '.'
000000000000095d         db  0x00 ; '.'
000000000000095e         db  0x00 ; '.'
000000000000095f         db  0x00 ; '.'
0000000000000960         db  0x00 ; '.'
0000000000000961         db  0x00 ; '.'
0000000000000962         db  0x00 ; '.'
0000000000000963         db  0x00 ; '.'
0000000000000964         db  0x00 ; '.'
0000000000000965         db  0x00 ; '.'
0000000000000966         db  0x00 ; '.'
0000000000000967         db  0x00 ; '.'
0000000000000968         db  0x00 ; '.'
0000000000000969         db  0x00 ; '.'
000000000000096a         db  0x00 ; '.'
000000000000096b         db  0x00 ; '.'
000000000000096c         db  0x00 ; '.'
000000000000096d         db  0x00 ; '.'
000000000000096e         db  0x00 ; '.'
000000000000096f         db  0x00 ; '.'
0000000000000970         db  0x2b ; '+'
0000000000000971         db  0x02 ; '.'
0000000000000972         db  0x00 ; '.'
0000000000000973         db  0x00 ; '.'
0000000000000974         db  0x12 ; '.'
0000000000000975         db  0x00 ; '.'
0000000000000976         db  0x00 ; '.'
0000000000000977         db  0x00 ; '.'
0000000000000978         db  0x00 ; '.'
0000000000000979         db  0x00 ; '.'
000000000000097a         db  0x00 ; '.'
000000000000097b         db  0x00 ; '.'
000000000000097c         db  0x00 ; '.'
000000000000097d         db  0x00 ; '.'
000000000000097e         db  0x00 ; '.'
000000000000097f         db  0x00 ; '.'
0000000000000980         db  0x00 ; '.'
0000000000000981         db  0x00 ; '.'
0000000000000982         db  0x00 ; '.'
0000000000000983         db  0x00 ; '.'
0000000000000984         db  0x00 ; '.'
0000000000000985         db  0x00 ; '.'
0000000000000986         db  0x00 ; '.'
0000000000000987         db  0x00 ; '.'
0000000000000988         db  0x39 ; '9'
0000000000000989         db  0x00 ; '.'
000000000000098a         db  0x00 ; '.'
000000000000098b         db  0x00 ; '.'
000000000000098c         db  0x20 ; ' '
000000000000098d         db  0x00 ; '.'
000000000000098e         db  0x00 ; '.'
000000000000098f         db  0x00 ; '.'
0000000000000990         db  0x00 ; '.'
0000000000000991         db  0x00 ; '.'
0000000000000992         db  0x00 ; '.'
0000000000000993         db  0x00 ; '.'
0000000000000994         db  0x00 ; '.'
0000000000000995         db  0x00 ; '.'
0000000000000996         db  0x00 ; '.'
0000000000000997         db  0x00 ; '.'
0000000000000998         db  0x00 ; '.'
0000000000000999         db  0x00 ; '.'
000000000000099a         db  0x00 ; '.'
000000000000099b         db  0x00 ; '.'
000000000000099c         db  0x00 ; '.'
000000000000099d         db  0x00 ; '.'
000000000000099e         db  0x00 ; '.'
000000000000099f         db  0x00 ; '.'
00000000000009a0         db  0x5b ; '['
00000000000009a1         db  0x02 ; '.'
00000000000009a2         db  0x00 ; '.'
00000000000009a3         db  0x00 ; '.'
00000000000009a4         db  0x12 ; '.'
00000000000009a5         db  0x00 ; '.'
00000000000009a6         db  0x00 ; '.'
00000000000009a7         db  0x00 ; '.'
00000000000009a8         db  0x00 ; '.'
00000000000009a9         db  0x00 ; '.'
00000000000009aa         db  0x00 ; '.'
00000000000009ab         db  0x00 ; '.'
00000000000009ac         db  0x00 ; '.'
00000000000009ad         db  0x00 ; '.'
00000000000009ae         db  0x00 ; '.'
00000000000009af         db  0x00 ; '.'
00000000000009b0         db  0x00 ; '.'
00000000000009b1         db  0x00 ; '.'
00000000000009b2         db  0x00 ; '.'
00000000000009b3         db  0x00 ; '.'
00000000000009b4         db  0x00 ; '.'
00000000000009b5         db  0x00 ; '.'
00000000000009b6         db  0x00 ; '.'
00000000000009b7         db  0x00 ; '.'
00000000000009b8         db  0x6c ; 'l'
00000000000009b9         db  0x01 ; '.'
00000000000009ba         db  0x00 ; '.'
00000000000009bb         db  0x00 ; '.'
00000000000009bc         db  0x12 ; '.'
00000000000009bd         db  0x00 ; '.'
00000000000009be         db  0x00 ; '.'
00000000000009bf         db  0x00 ; '.'
00000000000009c0         db  0x00 ; '.'
00000000000009c1         db  0x00 ; '.'
00000000000009c2         db  0x00 ; '.'
00000000000009c3         db  0x00 ; '.'
00000000000009c4         db  0x00 ; '.'
00000000000009c5         db  0x00 ; '.'
00000000000009c6         db  0x00 ; '.'
00000000000009c7         db  0x00 ; '.'
00000000000009c8         db  0x00 ; '.'
00000000000009c9         db  0x00 ; '.'
00000000000009ca         db  0x00 ; '.'
00000000000009cb         db  0x00 ; '.'
00000000000009cc         db  0x00 ; '.'
00000000000009cd         db  0x00 ; '.'
00000000000009ce         db  0x00 ; '.'
00000000000009cf         db  0x00 ; '.'
00000000000009d0         db  0x12 ; '.'
00000000000009d1         db  0x03 ; '.'
00000000000009d2         db  0x00 ; '.'
00000000000009d3         db  0x00 ; '.'
00000000000009d4         db  0x22 ; '"'
00000000000009d5         db  0x00 ; '.'
00000000000009d6         db  0x00 ; '.'
00000000000009d7         db  0x00 ; '.'
00000000000009d8         db  0x00 ; '.'
00000000000009d9         db  0x00 ; '.'
00000000000009da         db  0x00 ; '.'
00000000000009db         db  0x00 ; '.'
00000000000009dc         db  0x00 ; '.'
00000000000009dd         db  0x00 ; '.'
00000000000009de         db  0x00 ; '.'
00000000000009df         db  0x00 ; '.'
00000000000009e0         db  0x00 ; '.'
00000000000009e1         db  0x00 ; '.'
00000000000009e2         db  0x00 ; '.'
00000000000009e3         db  0x00 ; '.'
00000000000009e4         db  0x00 ; '.'
00000000000009e5         db  0x00 ; '.'
00000000000009e6         db  0x00 ; '.'
00000000000009e7         db  0x00 ; '.'
00000000000009e8         db  0xfe ; '.'
00000000000009e9         db  0x02 ; '.'
00000000000009ea         db  0x00 ; '.'
00000000000009eb         db  0x00 ; '.'
00000000000009ec         db  0x12 ; '.'
00000000000009ed         db  0x00 ; '.'
00000000000009ee         db  0x00 ; '.'
00000000000009ef         db  0x00 ; '.'
00000000000009f0         db  0x00 ; '.'
00000000000009f1         db  0x00 ; '.'
00000000000009f2         db  0x00 ; '.'
00000000000009f3         db  0x00 ; '.'
00000000000009f4         db  0x00 ; '.'
00000000000009f5         db  0x00 ; '.'
00000000000009f6         db  0x00 ; '.'
00000000000009f7         db  0x00 ; '.'
00000000000009f8         db  0x00 ; '.'
00000000000009f9         db  0x00 ; '.'
00000000000009fa         db  0x00 ; '.'
00000000000009fb         db  0x00 ; '.'
00000000000009fc         db  0x00 ; '.'
00000000000009fd         db  0x00 ; '.'
00000000000009fe         db  0x00 ; '.'
00000000000009ff         db  0x00 ; '.'
0000000000000a00         db  0x6f ; 'o'
0000000000000a01         db  0x02 ; '.'
0000000000000a02         db  0x00 ; '.'
0000000000000a03         db  0x00 ; '.'
0000000000000a04         db  0x12 ; '.'
0000000000000a05         db  0x00 ; '.'
0000000000000a06         db  0x00 ; '.'
0000000000000a07         db  0x00 ; '.'
0000000000000a08         db  0x00 ; '.'
0000000000000a09         db  0x00 ; '.'
0000000000000a0a         db  0x00 ; '.'
0000000000000a0b         db  0x00 ; '.'
0000000000000a0c         db  0x00 ; '.'
0000000000000a0d         db  0x00 ; '.'
0000000000000a0e         db  0x00 ; '.'
0000000000000a0f         db  0x00 ; '.'
0000000000000a10         db  0x00 ; '.'
0000000000000a11         db  0x00 ; '.'
0000000000000a12         db  0x00 ; '.'
0000000000000a13         db  0x00 ; '.'
0000000000000a14         db  0x00 ; '.'
0000000000000a15         db  0x00 ; '.'
0000000000000a16         db  0x00 ; '.'
0000000000000a17         db  0x00 ; '.'
0000000000000a18         db  0x39 ; '9'
0000000000000a19         db  0x02 ; '.'
0000000000000a1a         db  0x00 ; '.'
0000000000000a1b         db  0x00 ; '.'
0000000000000a1c         db  0x11 ; '.'
0000000000000a1d         db  0x00 ; '.'
0000000000000a1e         db  0x19 ; '.'
0000000000000a1f         db  0x00 ; '.'
0000000000000a20         db  0x88 ; '.'
0000000000000a21         db  0xb0 ; '.'
0000000000000a22         db  0x21 ; '!'
0000000000000a23         db  0x00 ; '.'
0000000000000a24         db  0x00 ; '.'
0000000000000a25         db  0x00 ; '.'
0000000000000a26         db  0x00 ; '.'
0000000000000a27         db  0x00 ; '.'
0000000000000a28         db  0x08 ; '.'
0000000000000a29         db  0x00 ; '.'
0000000000000a2a         db  0x00 ; '.'
0000000000000a2b         db  0x00 ; '.'
0000000000000a2c         db  0x00 ; '.'
0000000000000a2d         db  0x00 ; '.'
0000000000000a2e         db  0x00 ; '.'
0000000000000a2f         db  0x00 ; '.'
0000000000000a30         db  0xae ; '.'
0000000000000a31         db  0x03 ; '.'
0000000000000a32         db  0x00 ; '.'
0000000000000a33         db  0x00 ; '.'
0000000000000a34         db  0x10 ; '.'
0000000000000a35         db  0x00 ; '.'
0000000000000a36         db  0x18 ; '.'
0000000000000a37         db  0x00 ; '.'
0000000000000a38         db  0x80 ; '.'
0000000000000a39         db  0xb0 ; '.'
0000000000000a3a         db  0x21 ; '!'
0000000000000a3b         db  0x00 ; '.'
0000000000000a3c         db  0x00 ; '.'
0000000000000a3d         db  0x00 ; '.'
0000000000000a3e         db  0x00 ; '.'
0000000000000a3f         db  0x00 ; '.'
0000000000000a40         db  0x00 ; '.'
0000000000000a41         db  0x00 ; '.'
0000000000000a42         db  0x00 ; '.'
0000000000000a43         db  0x00 ; '.'
0000000000000a44         db  0x00 ; '.'
0000000000000a45         db  0x00 ; '.'
0000000000000a46         db  0x00 ; '.'
0000000000000a47         db  0x00 ; '.'
0000000000000a48         db  0xc1 ; '.'
0000000000000a49         db  0x03 ; '.'
0000000000000a4a         db  0x00 ; '.'
0000000000000a4b         db  0x00 ; '.'
0000000000000a4c         db  0x10 ; '.'
0000000000000a4d         db  0x00 ; '.'
0000000000000a4e         db  0x19 ; '.'
0000000000000a4f         db  0x00 ; '.'
0000000000000a50         db  0x40 ; '@'
0000000000000a51         db  0xb2 ; '.'
0000000000000a52         db  0x21 ; '!'
0000000000000a53         db  0x00 ; '.'
0000000000000a54         db  0x00 ; '.'
0000000000000a55         db  0x00 ; '.'
0000000000000a56         db  0x00 ; '.'
0000000000000a57         db  0x00 ; '.'
0000000000000a58         db  0x00 ; '.'
0000000000000a59         db  0x00 ; '.'
0000000000000a5a         db  0x00 ; '.'
0000000000000a5b         db  0x00 ; '.'
0000000000000a5c         db  0x00 ; '.'
0000000000000a5d         db  0x00 ; '.'
0000000000000a5e         db  0x00 ; '.'
0000000000000a5f         db  0x00 ; '.'
0000000000000a60         db  0x86 ; '.'
0000000000000a61         db  0x03 ; '.'
0000000000000a62         db  0x00 ; '.'
0000000000000a63         db  0x00 ; '.'
0000000000000a64         db  0x11 ; '.'
0000000000000a65         db  0x00 ; '.'
0000000000000a66         db  0x19 ; '.'
0000000000000a67         db  0x00 ; '.'
0000000000000a68         db  0x80 ; '.'
0000000000000a69         db  0xb0 ; '.'
0000000000000a6a         db  0x21 ; '!'
0000000000000a6b         db  0x00 ; '.'
0000000000000a6c         db  0x00 ; '.'
0000000000000a6d         db  0x00 ; '.'
0000000000000a6e         db  0x00 ; '.'
0000000000000a6f         db  0x00 ; '.'
0000000000000a70         db  0x08 ; '.'
0000000000000a71         db  0x00 ; '.'
0000000000000a72         db  0x00 ; '.'
0000000000000a73         db  0x00 ; '.'
0000000000000a74         db  0x00 ; '.'
0000000000000a75         db  0x00 ; '.'
0000000000000a76         db  0x00 ; '.'
0000000000000a77         db  0x00 ; '.'
0000000000000a78         db  0x9f ; '.'
0000000000000a79         db  0x01 ; '.'
0000000000000a7a         db  0x00 ; '.'
0000000000000a7b         db  0x00 ; '.'
0000000000000a7c         db  0x21 ; '!'
0000000000000a7d         db  0x00 ; '.'
0000000000000a7e         db  0x19 ; '.'
0000000000000a7f         db  0x00 ; '.'
0000000000000a80         db  0x98 ; '.'
0000000000000a81         db  0xb0 ; '.'
0000000000000a82         db  0x21 ; '!'
0000000000000a83         db  0x00 ; '.'
0000000000000a84         db  0x00 ; '.'
0000000000000a85         db  0x00 ; '.'
0000000000000a86         db  0x00 ; '.'
0000000000000a87         db  0x00 ; '.'
0000000000000a88         db  0x08 ; '.'
0000000000000a89         db  0x00 ; '.'
0000000000000a8a         db  0x00 ; '.'
0000000000000a8b         db  0x00 ; '.'
0000000000000a8c         db  0x00 ; '.'
0000000000000a8d         db  0x00 ; '.'
0000000000000a8e         db  0x00 ; '.'
0000000000000a8f         db  0x00 ; '.'
0000000000000a90         db  0xb5 ; '.'
0000000000000a91         db  0x03 ; '.'
0000000000000a92         db  0x00 ; '.'
0000000000000a93         db  0x00 ; '.'
0000000000000a94         db  0x10 ; '.'
0000000000000a95         db  0x00 ; '.'
0000000000000a96         db  0x19 ; '.'
0000000000000a97         db  0x00 ; '.'
0000000000000a98         db  0x80 ; '.'
0000000000000a99         db  0xb0 ; '.'
0000000000000a9a         db  0x21 ; '!'
0000000000000a9b         db  0x00 ; '.'
0000000000000a9c         db  0x00 ; '.'
0000000000000a9d         db  0x00 ; '.'
0000000000000a9e         db  0x00 ; '.'
0000000000000a9f         db  0x00 ; '.'
0000000000000aa0         db  0x00 ; '.'
0000000000000aa1         db  0x00 ; '.'
0000000000000aa2         db  0x00 ; '.'
0000000000000aa3         db  0x00 ; '.'
0000000000000aa4         db  0x00 ; '.'
0000000000000aa5         db  0x00 ; '.'
0000000000000aa6         db  0x00 ; '.'
0000000000000aa7         db  0x00 ; '.'
0000000000000aa8         db  0x91 ; '.'
0000000000000aa9         db  0x03 ; '.'
0000000000000aaa         db  0x00 ; '.'
0000000000000aab         db  0x00 ; '.'
0000000000000aac         db  0x11 ; '.'
0000000000000aad         db  0x00 ; '.'
0000000000000aae         db  0x19 ; '.'
0000000000000aaf         db  0x00 ; '.'
0000000000000ab0         db  0x98 ; '.'
0000000000000ab1         db  0xb0 ; '.'
0000000000000ab2         db  0x21 ; '!'
0000000000000ab3         db  0x00 ; '.'
0000000000000ab4         db  0x00 ; '.'
0000000000000ab5         db  0x00 ; '.'
0000000000000ab6         db  0x00 ; '.'
0000000000000ab7         db  0x00 ; '.'
0000000000000ab8         db  0x08 ; '.'
0000000000000ab9         db  0x00 ; '.'
0000000000000aba         db  0x00 ; '.'
0000000000000abb         db  0x00 ; '.'
0000000000000abc         db  0x00 ; '.'
0000000000000abd         db  0x00 ; '.'
0000000000000abe         db  0x00 ; '.'
0000000000000abf         db  0x00 ; '.'
0000000000000ac0         db  0xcc ; '.'
0000000000000ac1         db  0x02 ; '.'
0000000000000ac2         db  0x00 ; '.'
0000000000000ac3         db  0x00 ; '.'
0000000000000ac4         db  0x21 ; '!'
0000000000000ac5         db  0x00 ; '.'
0000000000000ac6         db  0x19 ; '.'
0000000000000ac7         db  0x00 ; '.'
0000000000000ac8         db  0x80 ; '.'
0000000000000ac9         db  0xb0 ; '.'
0000000000000aca         db  0x21 ; '!'
0000000000000acb         db  0x00 ; '.'
0000000000000acc         db  0x00 ; '.'
0000000000000acd         db  0x00 ; '.'
0000000000000ace         db  0x00 ; '.'
0000000000000acf         db  0x00 ; '.'
0000000000000ad0         db  0x08 ; '.'
0000000000000ad1         db  0x00 ; '.'
0000000000000ad2         db  0x00 ; '.'
0000000000000ad3         db  0x00 ; '.'
0000000000000ad4         db  0x00 ; '.'
0000000000000ad5         db  0x00 ; '.'
0000000000000ad6         db  0x00 ; '.'
0000000000000ad7         db  0x00 ; '.'
0000000000000ad8         db  0x53 ; 'S'
0000000000000ad9         db  0x00 ; '.'
0000000000000ada         db  0x00 ; '.'
0000000000000adb         db  0x00 ; '.'
0000000000000adc         db  0x12 ; '.'
0000000000000add         db  0x00 ; '.'
0000000000000ade         db  0x0b ; '.'
0000000000000adf         db  0x00 ; '.'
0000000000000ae0         db  0x90 ; '.'
0000000000000ae1         db  0x19 ; '.'
0000000000000ae2         db  0x00 ; '.'
0000000000000ae3         db  0x00 ; '.'
0000000000000ae4         db  0x00 ; '.'
0000000000000ae5         db  0x00 ; '.'
0000000000000ae6         db  0x00 ; '.'
0000000000000ae7         db  0x00 ; '.'
0000000000000ae8         db  0x00 ; '.'
0000000000000ae9         db  0x00 ; '.'
0000000000000aea         db  0x00 ; '.'
0000000000000aeb         db  0x00 ; '.'
0000000000000aec         db  0x00 ; '.'
0000000000000aed         db  0x00 ; '.'
0000000000000aee         db  0x00 ; '.'
0000000000000aef         db  0x00 ; '.'
0000000000000af0         db  0x38 ; '8'
0000000000000af1         db  0x03 ; '.'
0000000000000af2         db  0x00 ; '.'
0000000000000af3         db  0x00 ; '.'
0000000000000af4         db  0x11 ; '.'
0000000000000af5         db  0x00 ; '.'
0000000000000af6         db  0x19 ; '.'
0000000000000af7         db  0x00 ; '.'
0000000000000af8         db  0xa0 ; '.'
0000000000000af9         db  0xb0 ; '.'
0000000000000afa         db  0x21 ; '!'
0000000000000afb         db  0x00 ; '.'
0000000000000afc         db  0x00 ; '.'
0000000000000afd         db  0x00 ; '.'
0000000000000afe         db  0x00 ; '.'
0000000000000aff         db  0x00 ; '.'
0000000000000b00         db  0x04 ; '.'
0000000000000b01         db  0x00 ; '.'
0000000000000b02         db  0x00 ; '.'
0000000000000b03         db  0x00 ; '.'
0000000000000b04         db  0x00 ; '.'
0000000000000b05         db  0x00 ; '.'
0000000000000b06         db  0x00 ; '.'
0000000000000b07         db  0x00 ; '.'
0000000000000b08         db  0x88 ; '.'
0000000000000b09         db  0x02 ; '.'
0000000000000b0a         db  0x00 ; '.'
0000000000000b0b         db  0x00 ; '.'
0000000000000b0c         db  0x11 ; '.'
0000000000000b0d         db  0x00 ; '.'
0000000000000b0e         db  0x19 ; '.'
0000000000000b0f         db  0x00 ; '.'
0000000000000b10         db  0xc0 ; '.'
0000000000000b11         db  0xb0 ; '.'
0000000000000b12         db  0x21 ; '!'
0000000000000b13         db  0x00 ; '.'
0000000000000b14         db  0x00 ; '.'
0000000000000b15         db  0x00 ; '.'
0000000000000b16         db  0x00 ; '.'
0000000000000b17         db  0x00 ; '.'
0000000000000b18         db  0x08 ; '.'
0000000000000b19         db  0x00 ; '.'
0000000000000b1a         db  0x00 ; '.'
0000000000000b1b         db  0x00 ; '.'
0000000000000b1c         db  0x00 ; '.'
0000000000000b1d         db  0x00 ; '.'
0000000000000b1e         db  0x00 ; '.'
0000000000000b1f         db  0x00 ; '.'
0000000000000b20         db  0x2f ; '/'
0000000000000b21         db  0x01 ; '.'
0000000000000b22         db  0x00 ; '.'
0000000000000b23         db  0x00 ; '.'
0000000000000b24         db  0x11 ; '.'
0000000000000b25         db  0x00 ; '.'
0000000000000b26         db  0x19 ; '.'
0000000000000b27         db  0x00 ; '.'
0000000000000b28         db  0x90 ; '.'
0000000000000b29         db  0xb0 ; '.'
0000000000000b2a         db  0x21 ; '!'
0000000000000b2b         db  0x00 ; '.'
0000000000000b2c         db  0x00 ; '.'
0000000000000b2d         db  0x00 ; '.'
0000000000000b2e         db  0x00 ; '.'
0000000000000b2f         db  0x00 ; '.'
0000000000000b30         db  0x04 ; '.'
0000000000000b31         db  0x00 ; '.'
0000000000000b32         db  0x00 ; '.'
0000000000000b33         db  0x00 ; '.'
0000000000000b34         db  0x00 ; '.'
0000000000000b35         db  0x00 ; '.'
0000000000000b36         db  0x00 ; '.'
0000000000000b37         db  0x00 ; '.'
0000000000000b38         db  0xe8 ; '.'
0000000000000b39         db  0x00 ; '.'
0000000000000b3a         db  0x00 ; '.'
0000000000000b3b         db  0x00 ; '.'
0000000000000b3c         db  0x12 ; '.'
0000000000000b3d         db  0x00 ; '.'
0000000000000b3e         db  0x0f ; '.'
0000000000000b3f         db  0x00 ; '.'
0000000000000b40         db  0xc0 ; '.'
0000000000000b41         db  0x55 ; 'U'
0000000000000b42         db  0x01 ; '.'
0000000000000b43         db  0x00 ; '.'
0000000000000b44         db  0x00 ; '.'
0000000000000b45         db  0x00 ; '.'
0000000000000b46         db  0x00 ; '.'
0000000000000b47         db  0x00 ; '.'
0000000000000b48         db  0x00 ; '.'
0000000000000b49         db  0x00 ; '.'
0000000000000b4a         db  0x00 ; '.'
0000000000000b4b         db  0x00 ; '.'
0000000000000b4c         db  0x00 ; '.'
0000000000000b4d         db  0x00 ; '.'
0000000000000b4e         db  0x00 ; '.'
0000000000000b4f         db  0x00 ; '.'


        ; Section .dynstr
        ; Range: [0xb50; 0xf4d[ (1021 bytes)
        ; File offset : [2896; 3917[ (1021 bytes)
        ; Flags: 0x2
        ;   SHT_STRTAB
        ;   SHF_ALLOC

0000000000000b50         db  0x00 ; '.'
0000000000000b51         db  0x6c ; 'l'
0000000000000b52         db  0x69 ; 'i'
0000000000000b53         db  0x62 ; 'b'
0000000000000b54         db  0x67 ; 'g'
0000000000000b55         db  0x6d ; 'm'
0000000000000b56         db  0x70 ; 'p'
0000000000000b57         db  0x2e ; '.'
0000000000000b58         db  0x73 ; 's'
0000000000000b59         db  0x6f ; 'o'
0000000000000b5a         db  0x2e ; '.'
0000000000000b5b         db  0x31 ; '1'
0000000000000b5c         db  0x30 ; '0'
0000000000000b5d         db  0x00 ; '.'
0000000000000b5e         db  0x5f ; '_'
0000000000000b5f         db  0x49 ; 'I'
0000000000000b60         db  0x54 ; 'T'
0000000000000b61         db  0x4d ; 'M'
0000000000000b62         db  0x5f ; '_'
0000000000000b63         db  0x64 ; 'd'
0000000000000b64         db  0x65 ; 'e'
0000000000000b65         db  0x72 ; 'r'
0000000000000b66         db  0x65 ; 'e'
0000000000000b67         db  0x67 ; 'g'
0000000000000b68         db  0x69 ; 'i'
0000000000000b69         db  0x73 ; 's'
0000000000000b6a         db  0x74 ; 't'
0000000000000b6b         db  0x65 ; 'e'
0000000000000b6c         db  0x72 ; 'r'
0000000000000b6d         db  0x54 ; 'T'
0000000000000b6e         db  0x4d ; 'M'
0000000000000b6f         db  0x43 ; 'C'
0000000000000b70         db  0x6c ; 'l'
0000000000000b71         db  0x6f ; 'o'
0000000000000b72         db  0x6e ; 'n'
0000000000000b73         db  0x65 ; 'e'
0000000000000b74         db  0x54 ; 'T'
0000000000000b75         db  0x61 ; 'a'
0000000000000b76         db  0x62 ; 'b'
0000000000000b77         db  0x6c ; 'l'
0000000000000b78         db  0x65 ; 'e'
0000000000000b79         db  0x00 ; '.'
0000000000000b7a         db  0x5f ; '_'
0000000000000b7b         db  0x5f ; '_'
0000000000000b7c         db  0x67 ; 'g'
0000000000000b7d         db  0x6d ; 'm'
0000000000000b7e         db  0x6f ; 'o'
0000000000000b7f         db  0x6e ; 'n'
0000000000000b80         db  0x5f ; '_'
0000000000000b81         db  0x73 ; 's'
0000000000000b82         db  0x74 ; 't'
0000000000000b83         db  0x61 ; 'a'
0000000000000b84         db  0x72 ; 'r'
0000000000000b85         db  0x74 ; 't'
0000000000000b86         db  0x5f ; '_'
0000000000000b87         db  0x5f ; '_'
0000000000000b88         db  0x00 ; '.'
0000000000000b89         db  0x5f ; '_'
0000000000000b8a         db  0x49 ; 'I'
0000000000000b8b         db  0x54 ; 'T'
0000000000000b8c         db  0x4d ; 'M'
0000000000000b8d         db  0x5f ; '_'
0000000000000b8e         db  0x72 ; 'r'
0000000000000b8f         db  0x65 ; 'e'
0000000000000b90         db  0x67 ; 'g'
0000000000000b91         db  0x69 ; 'i'
0000000000000b92         db  0x73 ; 's'
0000000000000b93         db  0x74 ; 't'
0000000000000b94         db  0x65 ; 'e'
0000000000000b95         db  0x72 ; 'r'
0000000000000b96         db  0x54 ; 'T'
0000000000000b97         db  0x4d ; 'M'
0000000000000b98         db  0x43 ; 'C'
0000000000000b99         db  0x6c ; 'l'
0000000000000b9a         db  0x6f ; 'o'
0000000000000b9b         db  0x6e ; 'n'
0000000000000b9c         db  0x65 ; 'e'
0000000000000b9d         db  0x54 ; 'T'
0000000000000b9e         db  0x61 ; 'a'
0000000000000b9f         db  0x62 ; 'b'
0000000000000ba0         db  0x6c ; 'l'
0000000000000ba1         db  0x65 ; 'e'
0000000000000ba2         db  0x00 ; '.'
0000000000000ba3         db  0x5f ; '_'
0000000000000ba4         db  0x69 ; 'i'
0000000000000ba5         db  0x6e ; 'n'
0000000000000ba6         db  0x69 ; 'i'
0000000000000ba7         db  0x74 ; 't'
0000000000000ba8         db  0x00 ; '.'
0000000000000ba9         db  0x5f ; '_'
0000000000000baa         db  0x5f ; '_'
0000000000000bab         db  0x67 ; 'g'
0000000000000bac         db  0x6d ; 'm'
0000000000000bad         db  0x70 ; 'p'
0000000000000bae         db  0x7a ; 'z'
0000000000000baf         db  0x5f ; '_'
0000000000000bb0         db  0x61 ; 'a'
0000000000000bb1         db  0x64 ; 'd'
0000000000000bb2         db  0x64 ; 'd'
0000000000000bb3         db  0x00 ; '.'
0000000000000bb4         db  0x5f ; '_'
0000000000000bb5         db  0x5f ; '_'
0000000000000bb6         db  0x67 ; 'g'
0000000000000bb7         db  0x6d ; 'm'
0000000000000bb8         db  0x70 ; 'p'
0000000000000bb9         db  0x7a ; 'z'
0000000000000bba         db  0x5f ; '_'
0000000000000bbb         db  0x69 ; 'i'
0000000000000bbc         db  0x6e ; 'n'
0000000000000bbd         db  0x69 ; 'i'
0000000000000bbe         db  0x74 ; 't'
0000000000000bbf         db  0x5f ; '_'
0000000000000bc0         db  0x73 ; 's'
0000000000000bc1         db  0x65 ; 'e'
0000000000000bc2         db  0x74 ; 't'
0000000000000bc3         db  0x5f ; '_'
0000000000000bc4         db  0x75 ; 'u'
0000000000000bc5         db  0x69 ; 'i'
0000000000000bc6         db  0x00 ; '.'
0000000000000bc7         db  0x5f ; '_'
0000000000000bc8         db  0x5f ; '_'
0000000000000bc9         db  0x67 ; 'g'
0000000000000bca         db  0x6d ; 'm'
0000000000000bcb         db  0x70 ; 'p'
0000000000000bcc         db  0x7a ; 'z'
0000000000000bcd         db  0x5f ; '_'
0000000000000bce         db  0x69 ; 'i'
0000000000000bcf         db  0x6e ; 'n'
0000000000000bd0         db  0x69 ; 'i'
0000000000000bd1         db  0x74 ; 't'
0000000000000bd2         db  0x5f ; '_'
0000000000000bd3         db  0x73 ; 's'
0000000000000bd4         db  0x65 ; 'e'
0000000000000bd5         db  0x74 ; 't'
0000000000000bd6         db  0x5f ; '_'
0000000000000bd7         db  0x73 ; 's'
0000000000000bd8         db  0x74 ; 't'
0000000000000bd9         db  0x72 ; 'r'
0000000000000bda         db  0x00 ; '.'
0000000000000bdb         db  0x5f ; '_'
0000000000000bdc         db  0x5f ; '_'
0000000000000bdd         db  0x67 ; 'g'
0000000000000bde         db  0x6d ; 'm'
0000000000000bdf         db  0x70 ; 'p'
0000000000000be0         db  0x7a ; 'z'
0000000000000be1         db  0x5f ; '_'
0000000000000be2         db  0x6d ; 'm'
0000000000000be3         db  0x75 ; 'u'
0000000000000be4         db  0x6c ; 'l'
0000000000000be5         db  0x00 ; '.'
0000000000000be6         db  0x5f ; '_'
0000000000000be7         db  0x5f ; '_'
0000000000000be8         db  0x67 ; 'g'
0000000000000be9         db  0x6d ; 'm'
0000000000000bea         db  0x70 ; 'p'
0000000000000beb         db  0x7a ; 'z'
0000000000000bec         db  0x5f ; '_'
0000000000000bed         db  0x63 ; 'c'
0000000000000bee         db  0x6c ; 'l'
0000000000000bef         db  0x65 ; 'e'
0000000000000bf0         db  0x61 ; 'a'
0000000000000bf1         db  0x72 ; 'r'
0000000000000bf2         db  0x00 ; '.'
0000000000000bf3         db  0x5f ; '_'
0000000000000bf4         db  0x5f ; '_'
0000000000000bf5         db  0x67 ; 'g'
0000000000000bf6         db  0x6d ; 'm'
0000000000000bf7         db  0x70 ; 'p'
0000000000000bf8         db  0x7a ; 'z'
0000000000000bf9         db  0x5f ; '_'
0000000000000bfa         db  0x74 ; 't'
0000000000000bfb         db  0x64 ; 'd'
0000000000000bfc         db  0x69 ; 'i'
0000000000000bfd         db  0x76 ; 'v'
0000000000000bfe         db  0x5f ; '_'
0000000000000bff         db  0x71 ; 'q'
0000000000000c00         db  0x00 ; '.'
0000000000000c01         db  0x5f ; '_'
0000000000000c02         db  0x5f ; '_'
0000000000000c03         db  0x67 ; 'g'
0000000000000c04         db  0x6d ; 'm'
0000000000000c05         db  0x70 ; 'p'
0000000000000c06         db  0x7a ; 'z'
0000000000000c07         db  0x5f ; '_'
0000000000000c08         db  0x74 ; 't'
0000000000000c09         db  0x64 ; 'd'
0000000000000c0a         db  0x69 ; 'i'
0000000000000c0b         db  0x76 ; 'v'
0000000000000c0c         db  0x5f ; '_'
0000000000000c0d         db  0x72 ; 'r'
0000000000000c0e         db  0x00 ; '.'
0000000000000c0f         db  0x5f ; '_'
0000000000000c10         db  0x5f ; '_'
0000000000000c11         db  0x67 ; 'g'
0000000000000c12         db  0x6d ; 'm'
0000000000000c13         db  0x70 ; 'p'
0000000000000c14         db  0x7a ; 'z'
0000000000000c15         db  0x5f ; '_'
0000000000000c16         db  0x67 ; 'g'
0000000000000c17         db  0x65 ; 'e'
0000000000000c18         db  0x74 ; 't'
0000000000000c19         db  0x5f ; '_'
0000000000000c1a         db  0x73 ; 's'
0000000000000c1b         db  0x74 ; 't'
0000000000000c1c         db  0x72 ; 'r'
0000000000000c1d         db  0x00 ; '.'
0000000000000c1e         db  0x5f ; '_'
0000000000000c1f         db  0x5f ; '_'
0000000000000c20         db  0x67 ; 'g'
0000000000000c21         db  0x6d ; 'm'
0000000000000c22         db  0x70 ; 'p'
0000000000000c23         db  0x7a ; 'z'
0000000000000c24         db  0x5f ; '_'
0000000000000c25         db  0x73 ; 's'
0000000000000c26         db  0x75 ; 'u'
0000000000000c27         db  0x62 ; 'b'
0000000000000c28         db  0x00 ; '.'
0000000000000c29         db  0x5f ; '_'
0000000000000c2a         db  0x5f ; '_'
0000000000000c2b         db  0x67 ; 'g'
0000000000000c2c         db  0x6d ; 'm'
0000000000000c2d         db  0x70 ; 'p'
0000000000000c2e         db  0x7a ; 'z'
0000000000000c2f         db  0x5f ; '_'
0000000000000c30         db  0x6f ; 'o'
0000000000000c31         db  0x75 ; 'u'
0000000000000c32         db  0x74 ; 't'
0000000000000c33         db  0x5f ; '_'
0000000000000c34         db  0x73 ; 's'
0000000000000c35         db  0x74 ; 't'
0000000000000c36         db  0x72 ; 'r'
0000000000000c37         db  0x00 ; '.'
0000000000000c38         db  0x5f ; '_'
0000000000000c39         db  0x66 ; 'f'
0000000000000c3a         db  0x69 ; 'i'
0000000000000c3b         db  0x6e ; 'n'
0000000000000c3c         db  0x69 ; 'i'
0000000000000c3d         db  0x00 ; '.'
0000000000000c3e         db  0x6c ; 'l'
0000000000000c3f         db  0x69 ; 'i'
0000000000000c40         db  0x62 ; 'b'
0000000000000c41         db  0x63 ; 'c'
0000000000000c42         db  0x2e ; '.'
0000000000000c43         db  0x73 ; 's'
0000000000000c44         db  0x6f ; 'o'
0000000000000c45         db  0x2e ; '.'
0000000000000c46         db  0x36 ; '6'
0000000000000c47         db  0x00 ; '.'
0000000000000c48         db  0x66 ; 'f'
0000000000000c49         db  0x66 ; 'f'
0000000000000c4a         db  0x6c ; 'l'
0000000000000c4b         db  0x75 ; 'u'
0000000000000c4c         db  0x73 ; 's'
0000000000000c4d         db  0x68 ; 'h'
0000000000000c4e         db  0x00 ; '.'
0000000000000c4f         db  0x5f ; '_'
0000000000000c50         db  0x5f ; '_'
0000000000000c51         db  0x70 ; 'p'
0000000000000c52         db  0x72 ; 'r'
0000000000000c53         db  0x69 ; 'i'
0000000000000c54         db  0x6e ; 'n'
0000000000000c55         db  0x74 ; 't'
0000000000000c56         db  0x66 ; 'f'
0000000000000c57         db  0x5f ; '_'
0000000000000c58         db  0x63 ; 'c'
0000000000000c59         db  0x68 ; 'h'
0000000000000c5a         db  0x6b ; 'k'
0000000000000c5b         db  0x00 ; '.'
0000000000000c5c         db  0x73 ; 's'
0000000000000c5d         db  0x65 ; 'e'
0000000000000c5e         db  0x74 ; 't'
0000000000000c5f         db  0x6c ; 'l'
0000000000000c60         db  0x6f ; 'o'
0000000000000c61         db  0x63 ; 'c'
0000000000000c62         db  0x61 ; 'a'
0000000000000c63         db  0x6c ; 'l'
0000000000000c64         db  0x65 ; 'e'
0000000000000c65         db  0x00 ; '.'
0000000000000c66         db  0x6d ; 'm'
0000000000000c67         db  0x62 ; 'b'
0000000000000c68         db  0x72 ; 'r'
0000000000000c69         db  0x74 ; 't'
0000000000000c6a         db  0x6f ; 'o'
0000000000000c6b         db  0x77 ; 'w'
0000000000000c6c         db  0x63 ; 'c'
0000000000000c6d         db  0x00 ; '.'
0000000000000c6e         db  0x74 ; 't'
0000000000000c6f         db  0x6f ; 'o'
0000000000000c70         db  0x77 ; 'w'
0000000000000c71         db  0x6c ; 'l'
0000000000000c72         db  0x6f ; 'o'
0000000000000c73         db  0x77 ; 'w'
0000000000000c74         db  0x65 ; 'e'
0000000000000c75         db  0x72 ; 'r'
0000000000000c76         db  0x00 ; '.'
0000000000000c77         db  0x73 ; 's'
0000000000000c78         db  0x74 ; 't'
0000000000000c79         db  0x72 ; 'r'
0000000000000c7a         db  0x6e ; 'n'
0000000000000c7b         db  0x63 ; 'c'
0000000000000c7c         db  0x6d ; 'm'
0000000000000c7d         db  0x70 ; 'p'
0000000000000c7e         db  0x00 ; '.'
0000000000000c7f         db  0x6f ; 'o'
0000000000000c80         db  0x70 ; 'p'
0000000000000c81         db  0x74 ; 't'
0000000000000c82         db  0x69 ; 'i'
0000000000000c83         db  0x6e ; 'n'
0000000000000c84         db  0x64 ; 'd'
0000000000000c85         db  0x00 ; '.'
0000000000000c86         db  0x73 ; 's'
0000000000000c87         db  0x74 ; 't'
0000000000000c88         db  0x72 ; 'r'
0000000000000c89         db  0x72 ; 'r'
0000000000000c8a         db  0x63 ; 'c'
0000000000000c8b         db  0x68 ; 'h'
0000000000000c8c         db  0x72 ; 'r'
0000000000000c8d         db  0x00 ; '.'
0000000000000c8e         db  0x64 ; 'd'
0000000000000c8f         db  0x63 ; 'c'
0000000000000c90         db  0x67 ; 'g'
0000000000000c91         db  0x65 ; 'e'
0000000000000c92         db  0x74 ; 't'
0000000000000c93         db  0x74 ; 't'
0000000000000c94         db  0x65 ; 'e'
0000000000000c95         db  0x78 ; 'x'
0000000000000c96         db  0x74 ; 't'
0000000000000c97         db  0x00 ; '.'
0000000000000c98         db  0x77 ; 'w'
0000000000000c99         db  0x63 ; 'c'
0000000000000c9a         db  0x72 ; 'r'
0000000000000c9b         db  0x74 ; 't'
0000000000000c9c         db  0x6f ; 'o'
0000000000000c9d         db  0x6d ; 'm'
0000000000000c9e         db  0x62 ; 'b'
0000000000000c9f         db  0x00 ; '.'
0000000000000ca0         db  0x65 ; 'e'
0000000000000ca1         db  0x72 ; 'r'
0000000000000ca2         db  0x72 ; 'r'
0000000000000ca3         db  0x6f ; 'o'
0000000000000ca4         db  0x72 ; 'r'
0000000000000ca5         db  0x00 ; '.'
0000000000000ca6         db  0x70 ; 'p'
0000000000000ca7         db  0x75 ; 'u'
0000000000000ca8         db  0x74 ; 't'
0000000000000ca9         db  0x73 ; 's'
0000000000000caa         db  0x00 ; '.'
0000000000000cab         db  0x5f ; '_'
0000000000000cac         db  0x5f ; '_'
0000000000000cad         db  0x73 ; 's'
0000000000000cae         db  0x74 ; 't'
0000000000000caf         db  0x61 ; 'a'
0000000000000cb0         db  0x63 ; 'c'
0000000000000cb1         db  0x6b ; 'k'
0000000000000cb2         db  0x5f ; '_'
0000000000000cb3         db  0x63 ; 'c'
0000000000000cb4         db  0x68 ; 'h'
0000000000000cb5         db  0x6b ; 'k'
0000000000000cb6         db  0x5f ; '_'
0000000000000cb7         db  0x66 ; 'f'
0000000000000cb8         db  0x61 ; 'a'
0000000000000cb9         db  0x69 ; 'i'
0000000000000cba         db  0x6c ; 'l'
0000000000000cbb         db  0x00 ; '.'
0000000000000cbc         db  0x69 ; 'i'
0000000000000cbd         db  0x73 ; 's'
0000000000000cbe         db  0x77 ; 'w'
0000000000000cbf         db  0x70 ; 'p'
0000000000000cc0         db  0x72 ; 'r'
0000000000000cc1         db  0x69 ; 'i'
0000000000000cc2         db  0x6e ; 'n'
0000000000000cc3         db  0x74 ; 't'
0000000000000cc4         db  0x00 ; '.'
0000000000000cc5         db  0x72 ; 'r'
0000000000000cc6         db  0x65 ; 'e'
0000000000000cc7         db  0x61 ; 'a'
0000000000000cc8         db  0x6c ; 'l'
0000000000000cc9         db  0x6c ; 'l'
0000000000000cca         db  0x6f ; 'o'
0000000000000ccb         db  0x63 ; 'c'
0000000000000ccc         db  0x00 ; '.'
0000000000000ccd         db  0x62 ; 'b'
0000000000000cce         db  0x74 ; 't'
0000000000000ccf         db  0x6f ; 'o'
0000000000000cd0         db  0x77 ; 'w'
0000000000000cd1         db  0x63 ; 'c'
0000000000000cd2         db  0x00 ; '.'
0000000000000cd3         db  0x74 ; 't'
0000000000000cd4         db  0x6f ; 'o'
0000000000000cd5         db  0x77 ; 'w'
0000000000000cd6         db  0x75 ; 'u'
0000000000000cd7         db  0x70 ; 'p'
0000000000000cd8         db  0x70 ; 'p'
0000000000000cd9         db  0x65 ; 'e'
0000000000000cda         db  0x72 ; 'r'
0000000000000cdb         db  0x00 ; '.'
0000000000000cdc         db  0x61 ; 'a'
0000000000000cdd         db  0x62 ; 'b'
0000000000000cde         db  0x6f ; 'o'
0000000000000cdf         db  0x72 ; 'r'
0000000000000ce0         db  0x74 ; 't'
0000000000000ce1         db  0x00 ; '.'
0000000000000ce2         db  0x5f ; '_'
0000000000000ce3         db  0x65 ; 'e'
0000000000000ce4         db  0x78 ; 'x'
0000000000000ce5         db  0x69 ; 'i'
0000000000000ce6         db  0x74 ; 't'
0000000000000ce7         db  0x00 ; '.'
0000000000000ce8         db  0x6d ; 'm'
0000000000000ce9         db  0x65 ; 'e'
0000000000000cea         db  0x6d ; 'm'
0000000000000ceb         db  0x63 ; 'c'
0000000000000cec         db  0x68 ; 'h'
0000000000000ced         db  0x72 ; 'r'                                         ; DATA XREF=sub_127b0+2831
0000000000000cee         db  0x00 ; '.'
0000000000000cef         db  0x70 ; 'p'
0000000000000cf0         db  0x72 ; 'r'
0000000000000cf1         db  0x6f ; 'o'
0000000000000cf2         db  0x67 ; 'g'
0000000000000cf3         db  0x72 ; 'r'
0000000000000cf4         db  0x61 ; 'a'
0000000000000cf5         db  0x6d ; 'm'
0000000000000cf6         db  0x5f ; '_'
0000000000000cf7         db  0x69 ; 'i'
0000000000000cf8         db  0x6e ; 'n'
0000000000000cf9         db  0x76 ; 'v'
0000000000000cfa         db  0x6f ; 'o'
0000000000000cfb         db  0x63 ; 'c'
0000000000000cfc         db  0x61 ; 'a'
0000000000000cfd         db  0x74 ; 't'
0000000000000cfe         db  0x69 ; 'i'
0000000000000cff         db  0x6f ; 'o'
                     aNname:
0000000000000d00         db         "n_name", 0
0000000000000d07         db  0x5f ; '_'
0000000000000d08         db  0x5f ; '_'
0000000000000d09         db  0x61 ; 'a'
0000000000000d0a         db  0x73 ; 's'
0000000000000d0b         db  0x73 ; 's'
0000000000000d0c         db  0x65 ; 'e'
0000000000000d0d         db  0x72 ; 'r'
0000000000000d0e         db  0x74 ; 't'
0000000000000d0f         db  0x5f ; '_'
0000000000000d10         db  0x66 ; 'f'
0000000000000d11         db  0x61 ; 'a'
0000000000000d12         db  0x69 ; 'i'
0000000000000d13         db  0x6c ; 'l'
0000000000000d14         db  0x00 ; '.'
0000000000000d15         db  0x69 ; 'i'
0000000000000d16         db  0x73 ; 's'
0000000000000d17         db  0x77 ; 'w'
0000000000000d18         db  0x61 ; 'a'
0000000000000d19         db  0x6c ; 'l'
0000000000000d1a         db  0x6e ; 'n'
0000000000000d1b         db  0x75 ; 'u'
0000000000000d1c         db  0x6d ; 'm'
0000000000000d1d         db  0x00 ; '.'
0000000000000d1e         db  0x5f ; '_'
0000000000000d1f         db  0x5f ; '_'
0000000000000d20         db  0x63 ; 'c'
0000000000000d21         db  0x74 ; 't'
0000000000000d22         db  0x79 ; 'y'
0000000000000d23         db  0x70 ; 'p'
0000000000000d24         db  0x65 ; 'e'
0000000000000d25         db  0x5f ; '_'
0000000000000d26         db  0x67 ; 'g'
0000000000000d27         db  0x65 ; 'e'
0000000000000d28         db  0x74 ; 't'
0000000000000d29         db  0x5f ; '_'
0000000000000d2a         db  0x6d ; 'm'
0000000000000d2b         db  0x62 ; 'b'
0000000000000d2c         db  0x5f ; '_'
0000000000000d2d         db  0x63 ; 'c'
0000000000000d2e         db  0x75 ; 'u'
0000000000000d2f         db  0x72 ; 'r'
0000000000000d30         db  0x5f ; '_'
0000000000000d31         db  0x6d ; 'm'
0000000000000d32         db  0x61 ; 'a'
0000000000000d33         db  0x78 ; 'x'
0000000000000d34         db  0x00 ; '.'
0000000000000d35         db  0x63 ; 'c'
0000000000000d36         db  0x61 ; 'a'
0000000000000d37         db  0x6c ; 'l'
0000000000000d38         db  0x6c ; 'l'
0000000000000d39         db  0x6f ; 'o'
0000000000000d3a         db  0x63 ; 'c'
0000000000000d3b         db  0x00 ; '.'
0000000000000d3c         db  0x73 ; 's'
0000000000000d3d         db  0x74 ; 't'
0000000000000d3e         db  0x72 ; 'r'
0000000000000d3f         db  0x6c ; 'l'
0000000000000d40         db  0x65 ; 'e'
0000000000000d41         db  0x6e ; 'n'
0000000000000d42         db  0x00 ; '.'
0000000000000d43         db  0x69 ; 'i'
0000000000000d44         db  0x73 ; 's'
0000000000000d45         db  0x77 ; 'w'
0000000000000d46         db  0x63 ; 'c'
0000000000000d47         db  0x74 ; 't'
0000000000000d48         db  0x79 ; 'y'
0000000000000d49         db  0x70 ; 'p'
0000000000000d4a         db  0x65 ; 'e'
0000000000000d4b         db  0x00 ; '.'
0000000000000d4c         db  0x6d ; 'm'
0000000000000d4d         db  0x65 ; 'e'
0000000000000d4e         db  0x6d ; 'm'
0000000000000d4f         db  0x73 ; 's'
0000000000000d50         db  0x65 ; 'e'
0000000000000d51         db  0x74 ; 't'
0000000000000d52         db  0x00 ; '.'
0000000000000d53         db  0x73 ; 's'
0000000000000d54         db  0x74 ; 't'
0000000000000d55         db  0x72 ; 'r'
0000000000000d56         db  0x63 ; 'c'
0000000000000d57         db  0x73 ; 's'
0000000000000d58         db  0x70 ; 'p'
0000000000000d59         db  0x6e ; 'n'
0000000000000d5a         db  0x00 ; '.'
0000000000000d5b         db  0x5f ; '_'
0000000000000d5c         db  0x5f ; '_'
0000000000000d5d         db  0x65 ; 'e'
0000000000000d5e         db  0x72 ; 'r'
0000000000000d5f         db  0x72 ; 'r'
0000000000000d60         db  0x6e ; 'n'
0000000000000d61         db  0x6f ; 'o'
0000000000000d62         db  0x5f ; '_'
0000000000000d63         db  0x6c ; 'l'
0000000000000d64         db  0x6f ; 'o'
0000000000000d65         db  0x63 ; 'c'
0000000000000d66         db  0x61 ; 'a'
0000000000000d67         db  0x74 ; 't'
0000000000000d68         db  0x69 ; 'i'
0000000000000d69         db  0x6f ; 'o'
0000000000000d6a         db  0x6e ; 'n'
0000000000000d6b         db  0x00 ; '.'
0000000000000d6c         db  0x6d ; 'm'
0000000000000d6d         db  0x65 ; 'e'
0000000000000d6e         db  0x6d ; 'm'
0000000000000d6f         db  0x63 ; 'c'
0000000000000d70         db  0x6d ; 'm'
0000000000000d71         db  0x70 ; 'p'
0000000000000d72         db  0x00 ; '.'
0000000000000d73         db  0x6d ; 'm'
0000000000000d74         db  0x65 ; 'e'
0000000000000d75         db  0x6d ; 'm'
0000000000000d76         db  0x70 ; 'p'
0000000000000d77         db  0x63 ; 'c'
0000000000000d78         db  0x70 ; 'p'
0000000000000d79         db  0x79 ; 'y'
0000000000000d7a         db  0x00 ; '.'
0000000000000d7b         db  0x5f ; '_'
0000000000000d7c         db  0x5f ; '_'
0000000000000d7d         db  0x66 ; 'f'
0000000000000d7e         db  0x70 ; 'p'
0000000000000d7f         db  0x72 ; 'r'
0000000000000d80         db  0x69 ; 'i'
0000000000000d81         db  0x6e ; 'n'
0000000000000d82         db  0x74 ; 't'
0000000000000d83         db  0x66 ; 'f'
0000000000000d84         db  0x5f ; '_'
0000000000000d85         db  0x63 ; 'c'
0000000000000d86         db  0x68 ; 'h'
0000000000000d87         db  0x6b ; 'k'
0000000000000d88         db  0x00 ; '.'
0000000000000d89         db  0x73 ; 's'
0000000000000d8a         db  0x74 ; 't'
0000000000000d8b         db  0x64 ; 'd'
0000000000000d8c         db  0x6f ; 'o'
0000000000000d8d         db  0x75 ; 'u'
0000000000000d8e         db  0x74 ; 't'
0000000000000d8f         db  0x00 ; '.'
0000000000000d90         db  0x6c ; 'l'
0000000000000d91         db  0x73 ; 's'
0000000000000d92         db  0x65 ; 'e'
0000000000000d93         db  0x65 ; 'e'
0000000000000d94         db  0x6b ; 'k'
0000000000000d95         db  0x00 ; '.'
0000000000000d96         db  0x6d ; 'm'
0000000000000d97         db  0x65 ; 'e'
0000000000000d98         db  0x6d ; 'm'
0000000000000d99         db  0x63 ; 'c'
0000000000000d9a         db  0x70 ; 'p'
0000000000000d9b         db  0x79 ; 'y'
0000000000000d9c         db  0x00 ; '.'
0000000000000d9d         db  0x66 ; 'f'
0000000000000d9e         db  0x63 ; 'c'
0000000000000d9f         db  0x6c ; 'l'
0000000000000da0         db  0x6f ; 'o'
0000000000000da1         db  0x73 ; 's'
0000000000000da2         db  0x65 ; 'e'
0000000000000da3         db  0x00 ; '.'
0000000000000da4         db  0x6d ; 'm'
0000000000000da5         db  0x61 ; 'a'
0000000000000da6         db  0x6c ; 'l'
0000000000000da7         db  0x6c ; 'l'
0000000000000da8         db  0x6f ; 'o'
0000000000000da9         db  0x63 ; 'c'
0000000000000daa         db  0x00 ; '.'
0000000000000dab         db  0x6d ; 'm'
0000000000000dac         db  0x62 ; 'b'
0000000000000dad         db  0x73 ; 's'
0000000000000dae         db  0x69 ; 'i'
0000000000000daf         db  0x6e ; 'n'
0000000000000db0         db  0x69 ; 'i'
0000000000000db1         db  0x74 ; 't'
0000000000000db2         db  0x00 ; '.'
0000000000000db3         db  0x6e ; 'n'
0000000000000db4         db  0x6c ; 'l'
0000000000000db5         db  0x5f ; '_'
0000000000000db6         db  0x6c ; 'l'
0000000000000db7         db  0x61 ; 'a'
0000000000000db8         db  0x6e ; 'n'
0000000000000db9         db  0x67 ; 'g'
0000000000000dba         db  0x69 ; 'i'
0000000000000dbb         db  0x6e ; 'n'
0000000000000dbc         db  0x66 ; 'f'
0000000000000dbd         db  0x6f ; 'o'
0000000000000dbe         db  0x00 ; '.'
0000000000000dbf         db  0x5f ; '_'
0000000000000dc0         db  0x5f ; '_'
0000000000000dc1         db  0x63 ; 'c'
0000000000000dc2         db  0x74 ; 't'
0000000000000dc3         db  0x79 ; 'y'
0000000000000dc4         db  0x70 ; 'p'
0000000000000dc5         db  0x65 ; 'e'
0000000000000dc6         db  0x5f ; '_'
0000000000000dc7         db  0x62 ; 'b'
0000000000000dc8         db  0x5f ; '_'
0000000000000dc9         db  0x6c ; 'l'
0000000000000dca         db  0x6f ; 'o'
0000000000000dcb         db  0x63 ; 'c'
0000000000000dcc         db  0x00 ; '.'
0000000000000dcd         db  0x5f ; '_'
0000000000000dce         db  0x5f ; '_'
0000000000000dcf         db  0x66 ; 'f'
0000000000000dd0         db  0x72 ; 'r'
0000000000000dd1         db  0x65 ; 'e'
0000000000000dd2         db  0x61 ; 'a'
0000000000000dd3         db  0x64 ; 'd'
0000000000000dd4         db  0x69 ; 'i'
0000000000000dd5         db  0x6e ; 'n'
0000000000000dd6         db  0x67 ; 'g'
0000000000000dd7         db  0x00 ; '.'
0000000000000dd8         db  0x73 ; 's'
0000000000000dd9         db  0x74 ; 't'
0000000000000dda         db  0x64 ; 'd'
0000000000000ddb         db  0x65 ; 'e'
0000000000000ddc         db  0x72 ; 'r'
0000000000000ddd         db  0x72 ; 'r'
0000000000000dde         db  0x00 ; '.'
0000000000000ddf         db  0x77 ; 'w'
0000000000000de0         db  0x63 ; 'c'
0000000000000de1         db  0x77 ; 'w'
0000000000000de2         db  0x69 ; 'i'
0000000000000de3         db  0x64 ; 'd'
0000000000000de4         db  0x74 ; 't'
0000000000000de5         db  0x68 ; 'h'
0000000000000de6         db  0x00 ; '.'
0000000000000de7         db  0x67 ; 'g'
0000000000000de8         db  0x65 ; 'e'
0000000000000de9         db  0x74 ; 't'
0000000000000dea         db  0x6f ; 'o'
0000000000000deb         db  0x70 ; 'p'
0000000000000dec         db  0x74 ; 't'
0000000000000ded         db  0x5f ; '_'
0000000000000dee         db  0x6c ; 'l'
0000000000000def         db  0x6f ; 'o'
0000000000000df0         db  0x6e ; 'n'
0000000000000df1         db  0x67 ; 'g'
0000000000000df2         db  0x00 ; '.'
0000000000000df3         db  0x66 ; 'f'
0000000000000df4         db  0x69 ; 'i'
0000000000000df5         db  0x6c ; 'l'
0000000000000df6         db  0x65 ; 'e'
0000000000000df7         db  0x6e ; 'n'
0000000000000df8         db  0x6f ; 'o'
0000000000000df9         db  0x00 ; '.'
0000000000000dfa         db  0x66 ; 'f'
0000000000000dfb         db  0x77 ; 'w'
0000000000000dfc         db  0x72 ; 'r'
0000000000000dfd         db  0x69 ; 'i'
0000000000000dfe         db  0x74 ; 't'
0000000000000dff         db  0x65 ; 'e'
0000000000000e00         db  0x00 ; '.'
0000000000000e01         db  0x5f ; '_'
0000000000000e02         db  0x5f ; '_'
0000000000000e03         db  0x66 ; 'f'
0000000000000e04         db  0x70 ; 'p'
0000000000000e05         db  0x65 ; 'e'
0000000000000e06         db  0x6e ; 'n'
0000000000000e07         db  0x64 ; 'd'
0000000000000e08         db  0x69 ; 'i'
0000000000000e09         db  0x6e ; 'n'
0000000000000e0a         db  0x67 ; 'g'
0000000000000e0b         db  0x00 ; '.'
0000000000000e0c         db  0x73 ; 's'
0000000000000e0d         db  0x74 ; 't'
0000000000000e0e         db  0x72 ; 'r'
0000000000000e0f         db  0x63 ; 'c'
0000000000000e10         db  0x68 ; 'h'
0000000000000e11         db  0x72 ; 'r'
0000000000000e12         db  0x00 ; '.'
0000000000000e13         db  0x69 ; 'i'
0000000000000e14         db  0x73 ; 's'
0000000000000e15         db  0x77 ; 'w'
0000000000000e16         db  0x63 ; 'c'
0000000000000e17         db  0x6e ; 'n'
0000000000000e18         db  0x74 ; 't'
0000000000000e19         db  0x72 ; 'r'
0000000000000e1a         db  0x6c ; 'l'
0000000000000e1b         db  0x00 ; '.'
0000000000000e1c         db  0x70 ; 'p'
0000000000000e1d         db  0x72 ; 'r'
0000000000000e1e         db  0x6f ; 'o'
0000000000000e1f         db  0x67 ; 'g'
0000000000000e20         db  0x72 ; 'r'
0000000000000e21         db  0x61 ; 'a'
0000000000000e22         db  0x6d ; 'm'
0000000000000e23         db  0x5f ; '_'
0000000000000e24         db  0x69 ; 'i'
0000000000000e25         db  0x6e ; 'n'
0000000000000e26         db  0x76 ; 'v'
0000000000000e27         db  0x6f ; 'o'
0000000000000e28         db  0x63 ; 'c'
0000000000000e29         db  0x61 ; 'a'
0000000000000e2a         db  0x74 ; 't'
0000000000000e2b         db  0x69 ; 'i'
0000000000000e2c         db  0x6f ; 'o'
0000000000000e2d         db  0x6e ; 'n'
0000000000000e2e         db  0x5f ; '_'
0000000000000e2f         db  0x73 ; 's'
0000000000000e30         db  0x68 ; 'h'
0000000000000e31         db  0x6f ; 'o'
0000000000000e32         db  0x72 ; 'r'
0000000000000e33         db  0x74 ; 't'
0000000000000e34         db  0x5f ; '_'
0000000000000e35         db  0x6e ; 'n'
0000000000000e36         db  0x61 ; 'a'
0000000000000e37         db  0x6d ; 'm'
0000000000000e38         db  0x65 ; 'e'
0000000000000e39         db  0x00 ; '.'
0000000000000e3a         db  0x5f ; '_'
0000000000000e3b         db  0x5f ; '_'
0000000000000e3c         db  0x63 ; 'c'
0000000000000e3d         db  0x74 ; 't'
0000000000000e3e         db  0x79 ; 'y'
0000000000000e3f         db  0x70 ; 'p'
0000000000000e40         db  0x65 ; 'e'
0000000000000e41         db  0x5f ; '_'
0000000000000e42         db  0x74 ; 't'
0000000000000e43         db  0x6f ; 'o'
0000000000000e44         db  0x75 ; 'u'
0000000000000e45         db  0x70 ; 'p'
0000000000000e46         db  0x70 ; 'p'
0000000000000e47         db  0x65 ; 'e'
0000000000000e48         db  0x72 ; 'r'
0000000000000e49         db  0x5f ; '_'
0000000000000e4a         db  0x6c ; 'l'
0000000000000e4b         db  0x6f ; 'o'
0000000000000e4c         db  0x63 ; 'c'
0000000000000e4d         db  0x00 ; '.'
0000000000000e4e         db  0x5f ; '_'
0000000000000e4f         db  0x5f ; '_'
0000000000000e50         db  0x63 ; 'c'
0000000000000e51         db  0x74 ; 't'
0000000000000e52         db  0x79 ; 'y'
0000000000000e53         db  0x70 ; 'p'
0000000000000e54         db  0x65 ; 'e'
0000000000000e55         db  0x5f ; '_'
0000000000000e56         db  0x74 ; 't'
0000000000000e57         db  0x6f ; 'o'
0000000000000e58         db  0x6c ; 'l'
0000000000000e59         db  0x6f ; 'o'
0000000000000e5a         db  0x77 ; 'w'
0000000000000e5b         db  0x65 ; 'e'
0000000000000e5c         db  0x72 ; 'r'
0000000000000e5d         db  0x5f ; '_'
0000000000000e5e         db  0x6c ; 'l'
0000000000000e5f         db  0x6f ; 'o'
0000000000000e60         db  0x63 ; 'c'
0000000000000e61         db  0x00 ; '.'
0000000000000e62         db  0x5f ; '_'
0000000000000e63         db  0x5f ; '_'
0000000000000e64         db  0x63 ; 'c'
0000000000000e65         db  0x78 ; 'x'
0000000000000e66         db  0x61 ; 'a'
0000000000000e67         db  0x5f ; '_'
0000000000000e68         db  0x66 ; 'f'
0000000000000e69         db  0x69 ; 'i'
0000000000000e6a         db  0x6e ; 'n'
0000000000000e6b         db  0x61 ; 'a'
0000000000000e6c         db  0x6c ; 'l'
0000000000000e6d         db  0x69 ; 'i'
0000000000000e6e         db  0x7a ; 'z'
0000000000000e6f         db  0x65 ; 'e'
0000000000000e70         db  0x00 ; '.'
0000000000000e71         db  0x6d ; 'm'
0000000000000e72         db  0x65 ; 'e'
0000000000000e73         db  0x6d ; 'm'
0000000000000e74         db  0x6d ; 'm'
0000000000000e75         db  0x6f ; 'o'
0000000000000e76         db  0x76 ; 'v'
0000000000000e77         db  0x65 ; 'e'
0000000000000e78         db  0x00 ; '.'
0000000000000e79         db  0x62 ; 'b'
0000000000000e7a         db  0x69 ; 'i'
0000000000000e7b         db  0x6e ; 'n'
0000000000000e7c         db  0x64 ; 'd'
0000000000000e7d         db  0x74 ; 't'
0000000000000e7e         db  0x65 ; 'e'
0000000000000e7f         db  0x78 ; 'x'
0000000000000e80         db  0x74 ; 't'
0000000000000e81         db  0x64 ; 'd'
0000000000000e82         db  0x6f ; 'o'
0000000000000e83         db  0x6d ; 'm'
0000000000000e84         db  0x61 ; 'a'
0000000000000e85         db  0x69 ; 'i'
0000000000000e86         db  0x6e ; 'n'
0000000000000e87         db  0x00 ; '.'
0000000000000e88         db  0x6f ; 'o'
0000000000000e89         db  0x70 ; 'p'
0000000000000e8a         db  0x74 ; 't'
0000000000000e8b         db  0x65 ; 'e'
0000000000000e8c         db  0x72 ; 'r'
0000000000000e8d         db  0x72 ; 'r'
0000000000000e8e         db  0x00 ; '.'
0000000000000e8f         db  0x73 ; 's'
0000000000000e90         db  0x74 ; 't'
0000000000000e91         db  0x72 ; 'r'
0000000000000e92         db  0x63 ; 'c'
0000000000000e93         db  0x6d ; 'm'
0000000000000e94         db  0x70 ; 'p'
0000000000000e95         db  0x00 ; '.'
0000000000000e96         db  0x5f ; '_'
0000000000000e97         db  0x5f ; '_'
0000000000000e98         db  0x6c ; 'l'
0000000000000e99         db  0x69 ; 'i'
0000000000000e9a         db  0x62 ; 'b'
0000000000000e9b         db  0x63 ; 'c'
0000000000000e9c         db  0x5f ; '_'
0000000000000e9d         db  0x73 ; 's'
0000000000000e9e         db  0x74 ; 't'
0000000000000e9f         db  0x61 ; 'a'
0000000000000ea0         db  0x72 ; 'r'
0000000000000ea1         db  0x74 ; 't'
0000000000000ea2         db  0x5f ; '_'
0000000000000ea3         db  0x6d ; 'm'
0000000000000ea4         db  0x61 ; 'a'
0000000000000ea5         db  0x69 ; 'i'
0000000000000ea6         db  0x6e ; 'n'
0000000000000ea7         db  0x00 ; '.'
0000000000000ea8         db  0x66 ; 'f'
0000000000000ea9         db  0x73 ; 's'
0000000000000eaa         db  0x65 ; 'e'
0000000000000eab         db  0x65 ; 'e'
0000000000000eac         db  0x6b ; 'k'
0000000000000ead         db  0x6f ; 'o'
0000000000000eae         db  0x00 ; '.'
0000000000000eaf         db  0x73 ; 's'
0000000000000eb0         db  0x74 ; 't'
0000000000000eb1         db  0x72 ; 'r'
0000000000000eb2         db  0x63 ; 'c'
0000000000000eb3         db  0x6f ; 'o'
0000000000000eb4         db  0x6c ; 'l'
0000000000000eb5         db  0x6c ; 'l'
0000000000000eb6         db  0x00 ; '.'
0000000000000eb7         db  0x5f ; '_'
0000000000000eb8         db  0x5f ; '_'
0000000000000eb9         db  0x6f ; 'o'
0000000000000eba         db  0x76 ; 'v'
0000000000000ebb         db  0x65 ; 'e'
0000000000000ebc         db  0x72 ; 'r'
0000000000000ebd         db  0x66 ; 'f'
0000000000000ebe         db  0x6c ; 'l'
0000000000000ebf         db  0x6f ; 'o'
0000000000000ec0         db  0x77 ; 'w'
0000000000000ec1         db  0x00 ; '.'
0000000000000ec2         db  0x66 ; 'f'
0000000000000ec3         db  0x70 ; 'p'
0000000000000ec4         db  0x75 ; 'u'
0000000000000ec5         db  0x74 ; 't'
0000000000000ec6         db  0x73 ; 's'
0000000000000ec7         db  0x5f ; '_'
0000000000000ec8         db  0x75 ; 'u'
0000000000000ec9         db  0x6e ; 'n'
0000000000000eca         db  0x6c ; 'l'
0000000000000ecb         db  0x6f ; 'o'
0000000000000ecc         db  0x63 ; 'c'
0000000000000ecd         db  0x6b ; 'k'
0000000000000ece         db  0x65 ; 'e'
0000000000000ecf         db  0x64 ; 'd'
0000000000000ed0         db  0x00 ; '.'
0000000000000ed1         db  0x66 ; 'f'
0000000000000ed2         db  0x72 ; 'r'
0000000000000ed3         db  0x65 ; 'e'
0000000000000ed4         db  0x65 ; 'e'
0000000000000ed5         db  0x00 ; '.'
0000000000000ed6         db  0x5f ; '_'
0000000000000ed7         db  0x5f ; '_'
0000000000000ed8         db  0x70 ; 'p'
0000000000000ed9         db  0x72 ; 'r'
0000000000000eda         db  0x6f ; 'o'
0000000000000edb         db  0x67 ; 'g'
0000000000000edc         db  0x6e ; 'n'
0000000000000edd         db  0x61 ; 'a'
0000000000000ede         db  0x6d ; 'm'
0000000000000edf         db  0x65 ; 'e'
0000000000000ee0         db  0x00 ; '.'
0000000000000ee1         db  0x5f ; '_'
0000000000000ee2         db  0x5f ; '_'
0000000000000ee3         db  0x70 ; 'p'
0000000000000ee4         db  0x72 ; 'r'
0000000000000ee5         db  0x6f ; 'o'
0000000000000ee6         db  0x67 ; 'g'
0000000000000ee7         db  0x6e ; 'n'
0000000000000ee8         db  0x61 ; 'a'
0000000000000ee9         db  0x6d ; 'm'
0000000000000eea         db  0x65 ; 'e'
0000000000000eeb         db  0x5f ; '_'
0000000000000eec         db  0x66 ; 'f'
0000000000000eed         db  0x75 ; 'u'
0000000000000eee         db  0x6c ; 'l'
0000000000000eef         db  0x6c ; 'l'
0000000000000ef0         db  0x00 ; '.'
0000000000000ef1         db  0x5f ; '_'
0000000000000ef2         db  0x5f ; '_'
0000000000000ef3         db  0x63 ; 'c'
0000000000000ef4         db  0x78 ; 'x'
0000000000000ef5         db  0x61 ; 'a'
0000000000000ef6         db  0x5f ; '_'
0000000000000ef7         db  0x61 ; 'a'
0000000000000ef8         db  0x74 ; 't'
0000000000000ef9         db  0x65 ; 'e'
0000000000000efa         db  0x78 ; 'x'
0000000000000efb         db  0x69 ; 'i'
0000000000000efc         db  0x74 ; 't'
0000000000000efd         db  0x00 ; '.'
0000000000000efe         db  0x5f ; '_'
0000000000000eff         db  0x65 ; 'e'
                     aData:
0000000000000f00         db         "data", 0
0000000000000f05         db  0x5f ; '_'
0000000000000f06         db  0x5f ; '_'
0000000000000f07         db  0x62 ; 'b'
0000000000000f08         db  0x73 ; 's'
0000000000000f09         db  0x73 ; 's'
0000000000000f0a         db  0x5f ; '_'
0000000000000f0b         db  0x73 ; 's'
0000000000000f0c         db  0x74 ; 't'
0000000000000f0d         db  0x61 ; 'a'
0000000000000f0e         db  0x72 ; 'r'
0000000000000f0f         db  0x74 ; 't'
0000000000000f10         db  0x00 ; '.'
0000000000000f11         db  0x5f ; '_'
0000000000000f12         db  0x65 ; 'e'
0000000000000f13         db  0x6e ; 'n'
0000000000000f14         db  0x64 ; 'd'
0000000000000f15         db  0x00 ; '.'
0000000000000f16         db  0x47 ; 'G'
0000000000000f17         db  0x4c ; 'L'
0000000000000f18         db  0x49 ; 'I'
0000000000000f19         db  0x42 ; 'B'
0000000000000f1a         db  0x43 ; 'C'
0000000000000f1b         db  0x5f ; '_'
0000000000000f1c         db  0x32 ; '2'
0000000000000f1d         db  0x2e ; '.'
0000000000000f1e         db  0x33 ; '3'
0000000000000f1f         db  0x2e ; '.'
0000000000000f20         db  0x34 ; '4'
0000000000000f21         db  0x00 ; '.'
0000000000000f22         db  0x47 ; 'G'
0000000000000f23         db  0x4c ; 'L'
0000000000000f24         db  0x49 ; 'I'
0000000000000f25         db  0x42 ; 'B'
0000000000000f26         db  0x43 ; 'C'
0000000000000f27         db  0x5f ; '_'
0000000000000f28         db  0x32 ; '2'
0000000000000f29         db  0x2e ; '.'
0000000000000f2a         db  0x31 ; '1'
0000000000000f2b         db  0x34 ; '4'
0000000000000f2c         db  0x00 ; '.'
0000000000000f2d         db  0x47 ; 'G'
0000000000000f2e         db  0x4c ; 'L'
0000000000000f2f         db  0x49 ; 'I'
0000000000000f30         db  0x42 ; 'B'
0000000000000f31         db  0x43 ; 'C'
0000000000000f32         db  0x5f ; '_'
0000000000000f33         db  0x32 ; '2'
0000000000000f34         db  0x2e ; '.'
0000000000000f35         db  0x34 ; '4'
0000000000000f36         db  0x00 ; '.'
0000000000000f37         db  0x47 ; 'G'
0000000000000f38         db  0x4c ; 'L'
0000000000000f39         db  0x49 ; 'I'
0000000000000f3a         db  0x42 ; 'B'
0000000000000f3b         db  0x43 ; 'C'
0000000000000f3c         db  0x5f ; '_'
0000000000000f3d         db  0x32 ; '2'
0000000000000f3e         db  0x2e ; '.'
0000000000000f3f         db  0x32 ; '2'
0000000000000f40         db  0x2e ; '.'
0000000000000f41         db  0x35 ; '5'
0000000000000f42         db  0x00 ; '.'
0000000000000f43         db  0x47 ; 'G'
0000000000000f44         db  0x4c ; 'L'
0000000000000f45         db  0x49 ; 'I'
0000000000000f46         db  0x42 ; 'B'
0000000000000f47         db  0x43 ; 'C'
0000000000000f48         db  0x5f ; '_'
0000000000000f49         db  0x32 ; '2'
0000000000000f4a         db  0x2e ; '.'
0000000000000f4b         db  0x33 ; '3'
0000000000000f4c         db  0x00 ; '.'
0000000000000f4d         db  0x00 ; '.'


        ; Section .gnu.version
        ; Range: [0xf4e; 0x1000[ (178 bytes)
        ; File offset : [3918; 4096[ (178 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000000f4e         db  0x00 ; '.'
0000000000000f4f         db  0x00 ; '.'
0000000000000f50         db  0x02 ; '.'
0000000000000f51         db  0x00 ; '.'
0000000000000f52         db  0x03 ; '.'
0000000000000f53         db  0x00 ; '.'
0000000000000f54         db  0x03 ; '.'
0000000000000f55         db  0x00 ; '.'
0000000000000f56         db  0x03 ; '.'
0000000000000f57         db  0x00 ; '.'
0000000000000f58         db  0x00 ; '.'
0000000000000f59         db  0x00 ; '.'
0000000000000f5a         db  0x03 ; '.'
0000000000000f5b         db  0x00 ; '.'
0000000000000f5c         db  0x00 ; '.'
0000000000000f5d         db  0x00 ; '.'
0000000000000f5e         db  0x03 ; '.'
0000000000000f5f         db  0x00 ; '.'
0000000000000f60         db  0x03 ; '.'
0000000000000f61         db  0x00 ; '.'
0000000000000f62         db  0x03 ; '.'
0000000000000f63         db  0x00 ; '.'
0000000000000f64         db  0x03 ; '.'
0000000000000f65         db  0x00 ; '.'
0000000000000f66         db  0x00 ; '.'
0000000000000f67         db  0x00 ; '.'
0000000000000f68         db  0x03 ; '.'
0000000000000f69         db  0x00 ; '.'
0000000000000f6a         db  0x03 ; '.'
0000000000000f6b         db  0x00 ; '.'
0000000000000f6c         db  0x03 ; '.'
0000000000000f6d         db  0x00 ; '.'
0000000000000f6e         db  0x03 ; '.'
0000000000000f6f         db  0x00 ; '.'
0000000000000f70         db  0x03 ; '.'
0000000000000f71         db  0x00 ; '.'
0000000000000f72         db  0x03 ; '.'
0000000000000f73         db  0x00 ; '.'
0000000000000f74         db  0x03 ; '.'
0000000000000f75         db  0x00 ; '.'
0000000000000f76         db  0x00 ; '.'
0000000000000f77         db  0x00 ; '.'
0000000000000f78         db  0x04 ; '.'
0000000000000f79         db  0x00 ; '.'
0000000000000f7a         db  0x03 ; '.'
0000000000000f7b         db  0x00 ; '.'
0000000000000f7c         db  0x03 ; '.'
0000000000000f7d         db  0x00 ; '.'
0000000000000f7e         db  0x03 ; '.'
0000000000000f7f         db  0x00 ; '.'
0000000000000f80         db  0x00 ; '.'
0000000000000f81         db  0x00 ; '.'
0000000000000f82         db  0x03 ; '.'
0000000000000f83         db  0x00 ; '.'
0000000000000f84         db  0x03 ; '.'
0000000000000f85         db  0x00 ; '.'
0000000000000f86         db  0x03 ; '.'
0000000000000f87         db  0x00 ; '.'
0000000000000f88         db  0x00 ; '.'
0000000000000f89         db  0x00 ; '.'
0000000000000f8a         db  0x03 ; '.'
0000000000000f8b         db  0x00 ; '.'
0000000000000f8c         db  0x03 ; '.'
0000000000000f8d         db  0x00 ; '.'
0000000000000f8e         db  0x03 ; '.'
0000000000000f8f         db  0x00 ; '.'
0000000000000f90         db  0x03 ; '.'
0000000000000f91         db  0x00 ; '.'
0000000000000f92         db  0x03 ; '.'
0000000000000f93         db  0x00 ; '.'
0000000000000f94         db  0x03 ; '.'
0000000000000f95         db  0x00 ; '.'
0000000000000f96         db  0x03 ; '.'
0000000000000f97         db  0x00 ; '.'
0000000000000f98         db  0x03 ; '.'
0000000000000f99         db  0x00 ; '.'
0000000000000f9a         db  0x03 ; '.'
0000000000000f9b         db  0x00 ; '.'
0000000000000f9c         db  0x03 ; '.'
0000000000000f9d         db  0x00 ; '.'
0000000000000f9e         db  0x00 ; '.'
0000000000000f9f         db  0x00 ; '.'
0000000000000fa0         db  0x05 ; '.'
0000000000000fa1         db  0x00 ; '.'
0000000000000fa2         db  0x03 ; '.'
0000000000000fa3         db  0x00 ; '.'
0000000000000fa4         db  0x00 ; '.'
0000000000000fa5         db  0x00 ; '.'
0000000000000fa6         db  0x03 ; '.'
0000000000000fa7         db  0x00 ; '.'
0000000000000fa8         db  0x03 ; '.'
0000000000000fa9         db  0x00 ; '.'
0000000000000faa         db  0x03 ; '.'
0000000000000fab         db  0x00 ; '.'
0000000000000fac         db  0x03 ; '.'
0000000000000fad         db  0x00 ; '.'
0000000000000fae         db  0x03 ; '.'
0000000000000faf         db  0x00 ; '.'
0000000000000fb0         db  0x00 ; '.'
0000000000000fb1         db  0x00 ; '.'
0000000000000fb2         db  0x03 ; '.'
0000000000000fb3         db  0x00 ; '.'
0000000000000fb4         db  0x03 ; '.'
0000000000000fb5         db  0x00 ; '.'
0000000000000fb6         db  0x03 ; '.'
0000000000000fb7         db  0x00 ; '.'
0000000000000fb8         db  0x03 ; '.'
0000000000000fb9         db  0x00 ; '.'
0000000000000fba         db  0x03 ; '.'
0000000000000fbb         db  0x00 ; '.'
0000000000000fbc         db  0x06 ; '.'
0000000000000fbd         db  0x00 ; '.'
0000000000000fbe         db  0x00 ; '.'
0000000000000fbf         db  0x00 ; '.'                                         ; DATA XREF=set_regs+166
0000000000000fc0         db  0x03 ; '.'
0000000000000fc1         db  0x00 ; '.'
0000000000000fc2         db  0x03 ; '.'
0000000000000fc3         db  0x00 ; '.'
0000000000000fc4         db  0x03 ; '.'
0000000000000fc5         db  0x00 ; '.'
0000000000000fc6         db  0x03 ; '.'
0000000000000fc7         db  0x00 ; '.'
0000000000000fc8         db  0x03 ; '.'
0000000000000fc9         db  0x00 ; '.'
0000000000000fca         db  0x00 ; '.'
0000000000000fcb         db  0x00 ; '.'
0000000000000fcc         db  0x03 ; '.'
0000000000000fcd         db  0x00 ; '.'
0000000000000fce         db  0x03 ; '.'
0000000000000fcf         db  0x00 ; '.'
0000000000000fd0         db  0x00 ; '.'
0000000000000fd1         db  0x00 ; '.'
0000000000000fd2         db  0x03 ; '.'
0000000000000fd3         db  0x00 ; '.'
0000000000000fd4         db  0x03 ; '.'
0000000000000fd5         db  0x00 ; '.'
0000000000000fd6         db  0x03 ; '.'
0000000000000fd7         db  0x00 ; '.'
0000000000000fd8         db  0x06 ; '.'
0000000000000fd9         db  0x00 ; '.'
0000000000000fda         db  0x00 ; '.'
0000000000000fdb         db  0x00 ; '.'
0000000000000fdc         db  0x03 ; '.'
0000000000000fdd         db  0x00 ; '.'
0000000000000fde         db  0x03 ; '.'
0000000000000fdf         db  0x00 ; '.'
0000000000000fe0         db  0x03 ; '.'
0000000000000fe1         db  0x00 ; '.'
0000000000000fe2         db  0x02 ; '.'
0000000000000fe3         db  0x00 ; '.'
0000000000000fe4         db  0x02 ; '.'
0000000000000fe5         db  0x00 ; '.'
0000000000000fe6         db  0x03 ; '.'
0000000000000fe7         db  0x00 ; '.'
0000000000000fe8         db  0x01 ; '.'
0000000000000fe9         db  0x00 ; '.'
0000000000000fea         db  0x01 ; '.'
0000000000000feb         db  0x00 ; '.'
0000000000000fec         db  0x03 ; '.'
0000000000000fed         db  0x00 ; '.'
0000000000000fee         db  0x03 ; '.'
0000000000000fef         db  0x00 ; '.'
0000000000000ff0         db  0x01 ; '.'
0000000000000ff1         db  0x00 ; '.'
0000000000000ff2         db  0x03 ; '.'
0000000000000ff3         db  0x00 ; '.'
0000000000000ff4         db  0x03 ; '.'
0000000000000ff5         db  0x00 ; '.'
0000000000000ff6         db  0x01 ; '.'
0000000000000ff7         db  0x00 ; '.'
0000000000000ff8         db  0x03 ; '.'
0000000000000ff9         db  0x00 ; '.'
0000000000000ffa         db  0x03 ; '.'
0000000000000ffb         db  0x00 ; '.'
0000000000000ffc         db  0x03 ; '.'
0000000000000ffd         db  0x00 ; '.'
0000000000000ffe         db  0x01 ; '.'
0000000000000fff         db  0x00 ; '.'


        ; Section .gnu.version_r
        ; Range: [0x1000; 0x1060[ (96 bytes)
        ; File offset : [4096; 4192[ (96 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000001000         db  0x01 ; '.'
0000000000001001         db  0x00 ; '.'
0000000000001002         db  0x05 ; '.'
0000000000001003         db  0x00 ; '.'
0000000000001004         db  0xee ; '.'
0000000000001005         db  0x00 ; '.'
0000000000001006         db  0x00 ; '.'
0000000000001007         db  0x00 ; '.'
0000000000001008         db  0x10 ; '.'
0000000000001009         db  0x00 ; '.'
000000000000100a         db  0x00 ; '.'
000000000000100b         db  0x00 ; '.'
000000000000100c         db  0x00 ; '.'
000000000000100d         db  0x00 ; '.'
000000000000100e         db  0x00 ; '.'
000000000000100f         db  0x00 ; '.'
0000000000001010         db  0x74 ; 't'
0000000000001011         db  0x19 ; '.'
0000000000001012         db  0x69 ; 'i'
0000000000001013         db  0x09 ; '.'
0000000000001014         db  0x00 ; '.'
0000000000001015         db  0x00 ; '.'
0000000000001016         db  0x06 ; '.'
0000000000001017         db  0x00 ; '.'
0000000000001018         db  0xc6 ; '.'
0000000000001019         db  0x03 ; '.'
000000000000101a         db  0x00 ; '.'
000000000000101b         db  0x00 ; '.'
000000000000101c         db  0x10 ; '.'
000000000000101d         db  0x00 ; '.'
000000000000101e         db  0x00 ; '.'
000000000000101f         db  0x00 ; '.'
0000000000001020         db  0x94 ; '.'
0000000000001021         db  0x91 ; '.'
0000000000001022         db  0x96 ; '.'
0000000000001023         db  0x06 ; '.'
0000000000001024         db  0x00 ; '.'
0000000000001025         db  0x00 ; '.'
0000000000001026         db  0x05 ; '.'
0000000000001027         db  0x00 ; '.'
0000000000001028         db  0xd2 ; '.'
0000000000001029         db  0x03 ; '.'
000000000000102a         db  0x00 ; '.'
000000000000102b         db  0x00 ; '.'
000000000000102c         db  0x10 ; '.'
000000000000102d         db  0x00 ; '.'
000000000000102e         db  0x00 ; '.'
000000000000102f         db  0x00 ; '.'
0000000000001030         db  0x14 ; '.'
0000000000001031         db  0x69 ; 'i'
0000000000001032         db  0x69 ; 'i'
0000000000001033         db  0x0d ; '.'
0000000000001034         db  0x00 ; '.'
0000000000001035         db  0x00 ; '.'
0000000000001036         db  0x04 ; '.'
0000000000001037         db  0x00 ; '.'
0000000000001038         db  0xdd ; '.'
0000000000001039         db  0x03 ; '.'
000000000000103a         db  0x00 ; '.'
000000000000103b         db  0x00 ; '.'
000000000000103c         db  0x10 ; '.'
000000000000103d         db  0x00 ; '.'
000000000000103e         db  0x00 ; '.'
000000000000103f         db  0x00 ; '.'
0000000000001040         db  0x75 ; 'u'
0000000000001041         db  0x1a ; '.'
0000000000001042         db  0x69 ; 'i'
0000000000001043         db  0x09 ; '.'
0000000000001044         db  0x00 ; '.'
0000000000001045         db  0x00 ; '.'
0000000000001046         db  0x03 ; '.'
0000000000001047         db  0x00 ; '.'
0000000000001048         db  0xe7 ; '.'
0000000000001049         db  0x03 ; '.'
000000000000104a         db  0x00 ; '.'
000000000000104b         db  0x00 ; '.'
000000000000104c         db  0x10 ; '.'
000000000000104d         db  0x00 ; '.'
000000000000104e         db  0x00 ; '.'
000000000000104f         db  0x00 ; '.'
0000000000001050         db  0x13 ; '.'
0000000000001051         db  0x69 ; 'i'
0000000000001052         db  0x69 ; 'i'
0000000000001053         db  0x0d ; '.'
0000000000001054         db  0x00 ; '.'
0000000000001055         db  0x00 ; '.'
0000000000001056         db  0x02 ; '.'
0000000000001057         db  0x00 ; '.'
0000000000001058         db  0xf3 ; '.'
0000000000001059         db  0x03 ; '.'
000000000000105a         db  0x00 ; '.'
000000000000105b         db  0x00 ; '.'
000000000000105c         db  0x00 ; '.'
000000000000105d         db  0x00 ; '.'
000000000000105e         db  0x00 ; '.'
000000000000105f         db  0x00 ; '.'


        ; Section .rela.dyn
        ; Range: [0x1060; 0x1378[ (792 bytes)
        ; File offset : [4192; 4984[ (792 bytes)
        ; Flags: 0x2
        ;   SHT_RELA
        ;   SHF_ALLOC

0000000000001060         db  0xb0 ; '.'
0000000000001061         db  0xaa ; '.'
0000000000001062         db  0x21 ; '!'
0000000000001063         db  0x00 ; '.'
0000000000001064         db  0x00 ; '.'
0000000000001065         db  0x00 ; '.'
0000000000001066         db  0x00 ; '.'
0000000000001067         db  0x00 ; '.'
0000000000001068         db  0x08 ; '.'
0000000000001069         db  0x00 ; '.'
000000000000106a         db  0x00 ; '.'
000000000000106b         db  0x00 ; '.'
000000000000106c         db  0x00 ; '.'
000000000000106d         db  0x00 ; '.'
000000000000106e         db  0x00 ; '.'
000000000000106f         db  0x00 ; '.'
0000000000001070         db  0xd0 ; '.'
0000000000001071         db  0x20 ; ' '
0000000000001072         db  0x00 ; '.'
0000000000001073         db  0x00 ; '.'
0000000000001074         db  0x00 ; '.'
0000000000001075         db  0x00 ; '.'
0000000000001076         db  0x00 ; '.'
0000000000001077         db  0x00 ; '.'
0000000000001078         db  0xb8 ; '.'
0000000000001079         db  0xaa ; '.'
000000000000107a         db  0x21 ; '!'
000000000000107b         db  0x00 ; '.'
000000000000107c         db  0x00 ; '.'
000000000000107d         db  0x00 ; '.'
000000000000107e         db  0x00 ; '.'
000000000000107f         db  0x00 ; '.'
0000000000001080         db  0x08 ; '.'
0000000000001081         db  0x00 ; '.'
0000000000001082         db  0x00 ; '.'
0000000000001083         db  0x00 ; '.'
0000000000001084         db  0x00 ; '.'
0000000000001085         db  0x00 ; '.'
0000000000001086         db  0x00 ; '.'
0000000000001087         db  0x00 ; '.'
0000000000001088         db  0x90 ; '.'
0000000000001089         db  0x20 ; ' '
000000000000108a         db  0x00 ; '.'
000000000000108b         db  0x00 ; '.'
000000000000108c         db  0x00 ; '.'
000000000000108d         db  0x00 ; '.'
000000000000108e         db  0x00 ; '.'
000000000000108f         db  0x00 ; '.'
0000000000001090         db  0xc0 ; '.'
0000000000001091         db  0xaa ; '.'
0000000000001092         db  0x21 ; '!'
0000000000001093         db  0x00 ; '.'
0000000000001094         db  0x00 ; '.'
0000000000001095         db  0x00 ; '.'
0000000000001096         db  0x00 ; '.'
0000000000001097         db  0x00 ; '.'
0000000000001098         db  0x08 ; '.'
0000000000001099         db  0x00 ; '.'
000000000000109a         db  0x00 ; '.'
000000000000109b         db  0x00 ; '.'
000000000000109c         db  0x00 ; '.'
000000000000109d         db  0x00 ; '.'
000000000000109e         db  0x00 ; '.'
000000000000109f         db  0x00 ; '.'
00000000000010a0         db  0x86 ; '.'
00000000000010a1         db  0x61 ; 'a'
00000000000010a2         db  0x01 ; '.'
00000000000010a3         db  0x00 ; '.'
00000000000010a4         db  0x00 ; '.'
00000000000010a5         db  0x00 ; '.'
00000000000010a6         db  0x00 ; '.'
00000000000010a7         db  0x00 ; '.'
00000000000010a8         db  0xe0 ; '.'
00000000000010a9         db  0xaa ; '.'
00000000000010aa         db  0x21 ; '!'
00000000000010ab         db  0x00 ; '.'
00000000000010ac         db  0x00 ; '.'
00000000000010ad         db  0x00 ; '.'
00000000000010ae         db  0x00 ; '.'
00000000000010af         db  0x00 ; '.'
00000000000010b0         db  0x08 ; '.'
00000000000010b1         db  0x00 ; '.'
00000000000010b2         db  0x00 ; '.'
00000000000010b3         db  0x00 ; '.'
00000000000010b4         db  0x00 ; '.'
00000000000010b5         db  0x00 ; '.'
00000000000010b6         db  0x00 ; '.'
00000000000010b7         db  0x00 ; '.'
00000000000010b8         db  0x8b ; '.'
00000000000010b9         db  0x61 ; 'a'
00000000000010ba         db  0x01 ; '.'
00000000000010bb         db  0x00 ; '.'
00000000000010bc         db  0x00 ; '.'
00000000000010bd         db  0x00 ; '.'
00000000000010be         db  0x00 ; '.'
00000000000010bf         db  0x00 ; '.'
00000000000010c0         db  0x20 ; ' '
00000000000010c1         db  0xab ; '.'
00000000000010c2         db  0x21 ; '!'
00000000000010c3         db  0x00 ; '.'
00000000000010c4         db  0x00 ; '.'
00000000000010c5         db  0x00 ; '.'
00000000000010c6         db  0x00 ; '.'
00000000000010c7         db  0x00 ; '.'
00000000000010c8         db  0x08 ; '.'
00000000000010c9         db  0x00 ; '.'
00000000000010ca         db  0x00 ; '.'
00000000000010cb         db  0x00 ; '.'
00000000000010cc         db  0x00 ; '.'
00000000000010cd         db  0x00 ; '.'
00000000000010ce         db  0x00 ; '.'
00000000000010cf         db  0x00 ; '.'
00000000000010d0         db  0x4f ; 'O'
00000000000010d1         db  0x62 ; 'b'
00000000000010d2         db  0x01 ; '.'
00000000000010d3         db  0x00 ; '.'
00000000000010d4         db  0x00 ; '.'
00000000000010d5         db  0x00 ; '.'
00000000000010d6         db  0x00 ; '.'
00000000000010d7         db  0x00 ; '.'
00000000000010d8         db  0x28 ; '('
00000000000010d9         db  0xab ; '.'
00000000000010da         db  0x21 ; '!'
00000000000010db         db  0x00 ; '.'
00000000000010dc         db  0x00 ; '.'
00000000000010dd         db  0x00 ; '.'
00000000000010de         db  0x00 ; '.'
00000000000010df         db  0x00 ; '.'
00000000000010e0         db  0x08 ; '.'
00000000000010e1         db  0x00 ; '.'
00000000000010e2         db  0x00 ; '.'
00000000000010e3         db  0x00 ; '.'
00000000000010e4         db  0x00 ; '.'
00000000000010e5         db  0x00 ; '.'
00000000000010e6         db  0x00 ; '.'
00000000000010e7         db  0x00 ; '.'
00000000000010e8         db  0x57 ; 'W'
00000000000010e9         db  0x62 ; 'b'
00000000000010ea         db  0x01 ; '.'
00000000000010eb         db  0x00 ; '.'
00000000000010ec         db  0x00 ; '.'
00000000000010ed         db  0x00 ; '.'
00000000000010ee         db  0x00 ; '.'
00000000000010ef         db  0x00 ; '.'
00000000000010f0         db  0x30 ; '0'
00000000000010f1         db  0xab ; '.'
00000000000010f2         db  0x21 ; '!'
00000000000010f3         db  0x00 ; '.'
00000000000010f4         db  0x00 ; '.'
00000000000010f5         db  0x00 ; '.'
00000000000010f6         db  0x00 ; '.'
00000000000010f7         db  0x00 ; '.'
00000000000010f8         db  0x08 ; '.'
00000000000010f9         db  0x00 ; '.'
00000000000010fa         db  0x00 ; '.'
00000000000010fb         db  0x00 ; '.'
00000000000010fc         db  0x00 ; '.'
00000000000010fd         db  0x00 ; '.'
00000000000010fe         db  0x00 ; '.'
00000000000010ff         db  0x00 ; '.'
0000000000001100         db  0x5d ; ']'
0000000000001101         db  0x62 ; 'b'
0000000000001102         db  0x01 ; '.'
0000000000001103         db  0x00 ; '.'
0000000000001104         db  0x00 ; '.'
0000000000001105         db  0x00 ; '.'
0000000000001106         db  0x00 ; '.'
0000000000001107         db  0x00 ; '.'
0000000000001108         db  0x38 ; '8'
0000000000001109         db  0xab ; '.'
000000000000110a         db  0x21 ; '!'
000000000000110b         db  0x00 ; '.'
000000000000110c         db  0x00 ; '.'
000000000000110d         db  0x00 ; '.'
000000000000110e         db  0x00 ; '.'
000000000000110f         db  0x00 ; '.'
0000000000001110         db  0x08 ; '.'
0000000000001111         db  0x00 ; '.'
0000000000001112         db  0x00 ; '.'
0000000000001113         db  0x00 ; '.'
0000000000001114         db  0x00 ; '.'
0000000000001115         db  0x00 ; '.'
0000000000001116         db  0x00 ; '.'
0000000000001117         db  0x00 ; '.'
0000000000001118         db  0x6a ; 'j'
0000000000001119         db  0x62 ; 'b'
000000000000111a         db  0x01 ; '.'
000000000000111b         db  0x00 ; '.'
000000000000111c         db  0x00 ; '.'
000000000000111d         db  0x00 ; '.'
000000000000111e         db  0x00 ; '.'
000000000000111f         db  0x00 ; '.'
0000000000001120         db  0x40 ; '@'
0000000000001121         db  0xab ; '.'
0000000000001122         db  0x21 ; '!'
0000000000001123         db  0x00 ; '.'
0000000000001124         db  0x00 ; '.'
0000000000001125         db  0x00 ; '.'
0000000000001126         db  0x00 ; '.'
0000000000001127         db  0x00 ; '.'
0000000000001128         db  0x08 ; '.'
0000000000001129         db  0x00 ; '.'
000000000000112a         db  0x00 ; '.'
000000000000112b         db  0x00 ; '.'
000000000000112c         db  0x00 ; '.'
000000000000112d         db  0x00 ; '.'
000000000000112e         db  0x00 ; '.'
000000000000112f         db  0x00 ; '.'
0000000000001130         db  0x77 ; 'w'
0000000000001131         db  0x62 ; 'b'
0000000000001132         db  0x01 ; '.'
0000000000001133         db  0x00 ; '.'
0000000000001134         db  0x00 ; '.'
0000000000001135         db  0x00 ; '.'
0000000000001136         db  0x00 ; '.'
0000000000001137         db  0x00 ; '.'
0000000000001138         db  0x48 ; 'H'
0000000000001139         db  0xab ; '.'
000000000000113a         db  0x21 ; '!'
000000000000113b         db  0x00 ; '.'
000000000000113c         db  0x00 ; '.'
000000000000113d         db  0x00 ; '.'
000000000000113e         db  0x00 ; '.'
000000000000113f         db  0x00 ; '.'
0000000000001140         db  0x08 ; '.'
0000000000001141         db  0x00 ; '.'
0000000000001142         db  0x00 ; '.'
0000000000001143         db  0x00 ; '.'
0000000000001144         db  0x00 ; '.'
0000000000001145         db  0x00 ; '.'
0000000000001146         db  0x00 ; '.'
0000000000001147         db  0x00 ; '.'
0000000000001148         db  0x8b ; '.'
0000000000001149         db  0x62 ; 'b'
000000000000114a         db  0x01 ; '.'
000000000000114b         db  0x00 ; '.'
000000000000114c         db  0x00 ; '.'
000000000000114d         db  0x00 ; '.'
000000000000114e         db  0x00 ; '.'
000000000000114f         db  0x00 ; '.'
0000000000001150         db  0x50 ; 'P'
0000000000001151         db  0xab ; '.'
0000000000001152         db  0x21 ; '!'
0000000000001153         db  0x00 ; '.'
0000000000001154         db  0x00 ; '.'
0000000000001155         db  0x00 ; '.'
0000000000001156         db  0x00 ; '.'
0000000000001157         db  0x00 ; '.'
0000000000001158         db  0x08 ; '.'
0000000000001159         db  0x00 ; '.'
000000000000115a         db  0x00 ; '.'
000000000000115b         db  0x00 ; '.'
000000000000115c         db  0x00 ; '.'
000000000000115d         db  0x00 ; '.'
000000000000115e         db  0x00 ; '.'
000000000000115f         db  0x00 ; '.'
0000000000001160         db  0x8d ; '.'
0000000000001161         db  0x62 ; 'b'
0000000000001162         db  0x01 ; '.'
0000000000001163         db  0x00 ; '.'
0000000000001164         db  0x00 ; '.'
0000000000001165         db  0x00 ; '.'
0000000000001166         db  0x00 ; '.'
0000000000001167         db  0x00 ; '.'
0000000000001168         db  0x58 ; 'X'
0000000000001169         db  0xab ; '.'
000000000000116a         db  0x21 ; '!'
000000000000116b         db  0x00 ; '.'
000000000000116c         db  0x00 ; '.'
000000000000116d         db  0x00 ; '.'
000000000000116e         db  0x00 ; '.'
000000000000116f         db  0x00 ; '.'
0000000000001170         db  0x08 ; '.'
0000000000001171         db  0x00 ; '.'
0000000000001172         db  0x00 ; '.'
0000000000001173         db  0x00 ; '.'
0000000000001174         db  0x00 ; '.'
0000000000001175         db  0x00 ; '.'
0000000000001176         db  0x00 ; '.'
0000000000001177         db  0x00 ; '.'
0000000000001178         db  0x70 ; 'p'
0000000000001179         db  0x62 ; 'b'
000000000000117a         db  0x01 ; '.'
000000000000117b         db  0x00 ; '.'
000000000000117c         db  0x00 ; '.'
000000000000117d         db  0x00 ; '.'
000000000000117e         db  0x00 ; '.'
000000000000117f         db  0x00 ; '.'
0000000000001180         db  0x60 ; '`'
0000000000001181         db  0xab ; '.'
0000000000001182         db  0x21 ; '!'
0000000000001183         db  0x00 ; '.'
0000000000001184         db  0x00 ; '.'
0000000000001185         db  0x00 ; '.'
0000000000001186         db  0x00 ; '.'
0000000000001187         db  0x00 ; '.'
0000000000001188         db  0x08 ; '.'
0000000000001189         db  0x00 ; '.'
000000000000118a         db  0x00 ; '.'
000000000000118b         db  0x00 ; '.'
000000000000118c         db  0x00 ; '.'
000000000000118d         db  0x00 ; '.'
000000000000118e         db  0x00 ; '.'
000000000000118f         db  0x00 ; '.'
0000000000001190         db  0xf1 ; '.'
0000000000001191         db  0x60 ; '`'
0000000000001192         db  0x01 ; '.'
0000000000001193         db  0x00 ; '.'
0000000000001194         db  0x00 ; '.'
0000000000001195         db  0x00 ; '.'
0000000000001196         db  0x00 ; '.'
0000000000001197         db  0x00 ; '.'
0000000000001198         db  0x68 ; 'h'
0000000000001199         db  0xab ; '.'
000000000000119a         db  0x21 ; '!'
000000000000119b         db  0x00 ; '.'
000000000000119c         db  0x00 ; '.'
000000000000119d         db  0x00 ; '.'
000000000000119e         db  0x00 ; '.'
000000000000119f         db  0x00 ; '.'
00000000000011a0         db  0x08 ; '.'
00000000000011a1         db  0x00 ; '.'
00000000000011a2         db  0x00 ; '.'
00000000000011a3         db  0x00 ; '.'
00000000000011a4         db  0x00 ; '.'
00000000000011a5         db  0x00 ; '.'
00000000000011a6         db  0x00 ; '.'
00000000000011a7         db  0x00 ; '.'
00000000000011a8         db  0x95 ; '.'
00000000000011a9         db  0x62 ; 'b'
00000000000011aa         db  0x01 ; '.'
00000000000011ab         db  0x00 ; '.'
00000000000011ac         db  0x00 ; '.'
00000000000011ad         db  0x00 ; '.'
00000000000011ae         db  0x00 ; '.'
00000000000011af         db  0x00 ; '.'
00000000000011b0         db  0x08 ; '.'
00000000000011b1         db  0xb0 ; '.'
00000000000011b2         db  0x21 ; '!'
00000000000011b3         db  0x00 ; '.'
00000000000011b4         db  0x00 ; '.'
00000000000011b5         db  0x00 ; '.'
00000000000011b6         db  0x00 ; '.'
00000000000011b7         db  0x00 ; '.'
00000000000011b8         db  0x08 ; '.'
00000000000011b9         db  0x00 ; '.'
00000000000011ba         db  0x00 ; '.'
00000000000011bb         db  0x00 ; '.'
00000000000011bc         db  0x00 ; '.'
00000000000011bd         db  0x00 ; '.'
00000000000011be         db  0x00 ; '.'
00000000000011bf         db  0x00 ; '.'
00000000000011c0         db  0x08 ; '.'
00000000000011c1         db  0xb0 ; '.'
00000000000011c2         db  0x21 ; '!'
00000000000011c3         db  0x00 ; '.'
00000000000011c4         db  0x00 ; '.'
00000000000011c5         db  0x00 ; '.'
00000000000011c6         db  0x00 ; '.'
00000000000011c7         db  0x00 ; '.'
00000000000011c8         db  0x60 ; '`'
00000000000011c9         db  0xb0 ; '.'
00000000000011ca         db  0x21 ; '!'
00000000000011cb         db  0x00 ; '.'
00000000000011cc         db  0x00 ; '.'
00000000000011cd         db  0x00 ; '.'
00000000000011ce         db  0x00 ; '.'
00000000000011cf         db  0x00 ; '.'
00000000000011d0         db  0x08 ; '.'
00000000000011d1         db  0x00 ; '.'
00000000000011d2         db  0x00 ; '.'
00000000000011d3         db  0x00 ; '.'
00000000000011d4         db  0x00 ; '.'
00000000000011d5         db  0x00 ; '.'
00000000000011d6         db  0x00 ; '.'
00000000000011d7         db  0x00 ; '.'
00000000000011d8         db  0x70 ; 'p'
00000000000011d9         db  0xb0 ; '.'
00000000000011da         db  0x21 ; '!'
00000000000011db         db  0x00 ; '.'
00000000000011dc         db  0x00 ; '.'
00000000000011dd         db  0x00 ; '.'
00000000000011de         db  0x00 ; '.'
00000000000011df         db  0x00 ; '.'
00000000000011e0         db  0x78 ; 'x'
00000000000011e1         db  0xb0 ; '.'
00000000000011e2         db  0x21 ; '!'
00000000000011e3         db  0x00 ; '.'
00000000000011e4         db  0x00 ; '.'
00000000000011e5         db  0x00 ; '.'
00000000000011e6         db  0x00 ; '.'
00000000000011e7         db  0x00 ; '.'
00000000000011e8         db  0x08 ; '.'
00000000000011e9         db  0x00 ; '.'
00000000000011ea         db  0x00 ; '.'
00000000000011eb         db  0x00 ; '.'
00000000000011ec         db  0x00 ; '.'
00000000000011ed         db  0x00 ; '.'
00000000000011ee         db  0x00 ; '.'
00000000000011ef         db  0x00 ; '.'
00000000000011f0         db  0x00 ; '.'
00000000000011f1         db  0xb1 ; '.'
00000000000011f2         db  0x21 ; '!'
00000000000011f3         db  0x00 ; '.'
00000000000011f4         db  0x00 ; '.'
00000000000011f5         db  0x00 ; '.'
00000000000011f6         db  0x00 ; '.'
00000000000011f7         db  0x00 ; '.'
00000000000011f8         db  0x98 ; '.'
00000000000011f9         db  0xaf ; '.'
00000000000011fa         db  0x21 ; '!'
00000000000011fb         db  0x00 ; '.'
00000000000011fc         db  0x00 ; '.'
00000000000011fd         db  0x00 ; '.'
00000000000011fe         db  0x00 ; '.'
00000000000011ff         db  0x00 ; '.'
0000000000001200         db  0x06 ; '.'                                         ; DATA XREF=peek_token+560, peek_token+572, peek_token+640, peek_token+652, peek_token+996, peek_token+1080
0000000000001201         db  0x00 ; '.'
0000000000001202         db  0x00 ; '.'
0000000000001203         db  0x00 ; '.'
0000000000001204         db  0x05 ; '.'
0000000000001205         db  0x00 ; '.'
0000000000001206         db  0x00 ; '.'
0000000000001207         db  0x00 ; '.'
0000000000001208         db  0x00 ; '.'
0000000000001209         db  0x00 ; '.'
000000000000120a         db  0x00 ; '.'
000000000000120b         db  0x00 ; '.'
000000000000120c         db  0x00 ; '.'
000000000000120d         db  0x00 ; '.'
000000000000120e         db  0x00 ; '.'
000000000000120f         db  0x00 ; '.'
0000000000001210         db  0xa0 ; '.'
0000000000001211         db  0xaf ; '.'
0000000000001212         db  0x21 ; '!'
0000000000001213         db  0x00 ; '.'
0000000000001214         db  0x00 ; '.'
0000000000001215         db  0x00 ; '.'
0000000000001216         db  0x00 ; '.'
0000000000001217         db  0x00 ; '.'
0000000000001218         db  0x06 ; '.'
0000000000001219         db  0x00 ; '.'
000000000000121a         db  0x00 ; '.'
000000000000121b         db  0x00 ; '.'
000000000000121c         db  0x07 ; '.'
000000000000121d         db  0x00 ; '.'
000000000000121e         db  0x00 ; '.'
000000000000121f         db  0x00 ; '.'
0000000000001220         db  0x00 ; '.'
0000000000001221         db  0x00 ; '.'
0000000000001222         db  0x00 ; '.'
0000000000001223         db  0x00 ; '.'
0000000000001224         db  0x00 ; '.'
0000000000001225         db  0x00 ; '.'
0000000000001226         db  0x00 ; '.'
0000000000001227         db  0x00 ; '.'
0000000000001228         db  0xa8 ; '.'
0000000000001229         db  0xaf ; '.'
000000000000122a         db  0x21 ; '!'
000000000000122b         db  0x00 ; '.'
000000000000122c         db  0x00 ; '.'
000000000000122d         db  0x00 ; '.'
000000000000122e         db  0x00 ; '.'
000000000000122f         db  0x00 ; '.'
0000000000001230         db  0x06 ; '.'
0000000000001231         db  0x00 ; '.'
0000000000001232         db  0x00 ; '.'
0000000000001233         db  0x00 ; '.'
0000000000001234         db  0x0c ; '.'
0000000000001235         db  0x00 ; '.'
0000000000001236         db  0x00 ; '.'
0000000000001237         db  0x00 ; '.'
0000000000001238         db  0x00 ; '.'
0000000000001239         db  0x00 ; '.'
000000000000123a         db  0x00 ; '.'
000000000000123b         db  0x00 ; '.'
000000000000123c         db  0x00 ; '.'
000000000000123d         db  0x00 ; '.'
000000000000123e         db  0x00 ; '.'
000000000000123f         db  0x00 ; '.'
0000000000001240         db  0xb0 ; '.'
0000000000001241         db  0xaf ; '.'
0000000000001242         db  0x21 ; '!'
0000000000001243         db  0x00 ; '.'
0000000000001244         db  0x00 ; '.'
0000000000001245         db  0x00 ; '.'
0000000000001246         db  0x00 ; '.'
0000000000001247         db  0x00 ; '.'
0000000000001248         db  0x06 ; '.'
0000000000001249         db  0x00 ; '.'
000000000000124a         db  0x00 ; '.'
000000000000124b         db  0x00 ; '.'
000000000000124c         db  0x19 ; '.'
000000000000124d         db  0x00 ; '.'
000000000000124e         db  0x00 ; '.'
000000000000124f         db  0x00 ; '.'
0000000000001250         db  0x00 ; '.'
0000000000001251         db  0x00 ; '.'
0000000000001252         db  0x00 ; '.'
0000000000001253         db  0x00 ; '.'
0000000000001254         db  0x00 ; '.'
0000000000001255         db  0x00 ; '.'
0000000000001256         db  0x00 ; '.'
0000000000001257         db  0x00 ; '.'
0000000000001258         db  0xb8 ; '.'
0000000000001259         db  0xaf ; '.'
000000000000125a         db  0x21 ; '!'
000000000000125b         db  0x00 ; '.'
000000000000125c         db  0x00 ; '.'
000000000000125d         db  0x00 ; '.'
000000000000125e         db  0x00 ; '.'
000000000000125f         db  0x00 ; '.'
0000000000001260         db  0x06 ; '.'
0000000000001261         db  0x00 ; '.'
0000000000001262         db  0x00 ; '.'
0000000000001263         db  0x00 ; '.'
0000000000001264         db  0x22 ; '"'
0000000000001265         db  0x00 ; '.'
0000000000001266         db  0x00 ; '.'
0000000000001267         db  0x00 ; '.'
0000000000001268         db  0x00 ; '.'
0000000000001269         db  0x00 ; '.'
000000000000126a         db  0x00 ; '.'
000000000000126b         db  0x00 ; '.'
000000000000126c         db  0x00 ; '.'
000000000000126d         db  0x00 ; '.'
000000000000126e         db  0x00 ; '.'
000000000000126f         db  0x00 ; '.'
0000000000001270         db  0xc0 ; '.'
0000000000001271         db  0xaf ; '.'
0000000000001272         db  0x21 ; '!'
0000000000001273         db  0x00 ; '.'
0000000000001274         db  0x00 ; '.'
0000000000001275         db  0x00 ; '.'
0000000000001276         db  0x00 ; '.'
0000000000001277         db  0x00 ; '.'
0000000000001278         db  0x06 ; '.'
0000000000001279         db  0x00 ; '.'
000000000000127a         db  0x00 ; '.'
000000000000127b         db  0x00 ; '.'
000000000000127c         db  0x28 ; '('
000000000000127d         db  0x00 ; '.'
000000000000127e         db  0x00 ; '.'
000000000000127f         db  0x00 ; '.'
0000000000001280         db  0x00 ; '.'
0000000000001281         db  0x00 ; '.'
0000000000001282         db  0x00 ; '.'
0000000000001283         db  0x00 ; '.'
0000000000001284         db  0x00 ; '.'
0000000000001285         db  0x00 ; '.'
0000000000001286         db  0x00 ; '.'
0000000000001287         db  0x00 ; '.'
0000000000001288         db  0xc8 ; '.'
0000000000001289         db  0xaf ; '.'
000000000000128a         db  0x21 ; '!'
000000000000128b         db  0x00 ; '.'
000000000000128c         db  0x00 ; '.'
000000000000128d         db  0x00 ; '.'
000000000000128e         db  0x00 ; '.'
000000000000128f         db  0x00 ; '.'
0000000000001290         db  0x06 ; '.'
0000000000001291         db  0x00 ; '.'
0000000000001292         db  0x00 ; '.'
0000000000001293         db  0x00 ; '.'
0000000000001294         db  0x2b ; '+'
0000000000001295         db  0x00 ; '.'
0000000000001296         db  0x00 ; '.'
0000000000001297         db  0x00 ; '.'
0000000000001298         db  0x00 ; '.'
0000000000001299         db  0x00 ; '.'
000000000000129a         db  0x00 ; '.'
000000000000129b         db  0x00 ; '.'
000000000000129c         db  0x00 ; '.'
000000000000129d         db  0x00 ; '.'
000000000000129e         db  0x00 ; '.'
000000000000129f         db  0x00 ; '.'
00000000000012a0         db  0xd0 ; '.'
00000000000012a1         db  0xaf ; '.'
00000000000012a2         db  0x21 ; '!'
00000000000012a3         db  0x00 ; '.'
00000000000012a4         db  0x00 ; '.'
00000000000012a5         db  0x00 ; '.'
00000000000012a6         db  0x00 ; '.'
00000000000012a7         db  0x00 ; '.'
00000000000012a8         db  0x06 ; '.'
00000000000012a9         db  0x00 ; '.'
00000000000012aa         db  0x00 ; '.'
00000000000012ab         db  0x00 ; '.'
00000000000012ac         db  0x3e ; '>'
00000000000012ad         db  0x00 ; '.'
00000000000012ae         db  0x00 ; '.'
00000000000012af         db  0x00 ; '.'
00000000000012b0         db  0x00 ; '.'
00000000000012b1         db  0x00 ; '.'
00000000000012b2         db  0x00 ; '.'
00000000000012b3         db  0x00 ; '.'
00000000000012b4         db  0x00 ; '.'
00000000000012b5         db  0x00 ; '.'
00000000000012b6         db  0x00 ; '.'
00000000000012b7         db  0x00 ; '.'
00000000000012b8         db  0xd8 ; '.'
00000000000012b9         db  0xaf ; '.'
00000000000012ba         db  0x21 ; '!'
00000000000012bb         db  0x00 ; '.'
00000000000012bc         db  0x00 ; '.'
00000000000012bd         db  0x00 ; '.'
00000000000012be         db  0x00 ; '.'
00000000000012bf         db  0x00 ; '.'
00000000000012c0         db  0x06 ; '.'
00000000000012c1         db  0x00 ; '.'
00000000000012c2         db  0x00 ; '.'
00000000000012c3         db  0x00 ; '.'
00000000000012c4         db  0x46 ; 'F'
00000000000012c5         db  0x00 ; '.'
00000000000012c6         db  0x00 ; '.'
00000000000012c7         db  0x00 ; '.'
00000000000012c8         db  0x00 ; '.'
00000000000012c9         db  0x00 ; '.'
00000000000012ca         db  0x00 ; '.'
00000000000012cb         db  0x00 ; '.'
00000000000012cc         db  0x00 ; '.'
00000000000012cd         db  0x00 ; '.'
00000000000012ce         db  0x00 ; '.'
00000000000012cf         db  0x00 ; '.'
00000000000012d0         db  0xe0 ; '.'
00000000000012d1         db  0xaf ; '.'
00000000000012d2         db  0x21 ; '!'
00000000000012d3         db  0x00 ; '.'
00000000000012d4         db  0x00 ; '.'
00000000000012d5         db  0x00 ; '.'
00000000000012d6         db  0x00 ; '.'
00000000000012d7         db  0x00 ; '.'
00000000000012d8         db  0x06 ; '.'
00000000000012d9         db  0x00 ; '.'
00000000000012da         db  0x00 ; '.'
00000000000012db         db  0x00 ; '.'
00000000000012dc         db  0x49 ; 'I'
00000000000012dd         db  0x00 ; '.'
00000000000012de         db  0x00 ; '.'
00000000000012df         db  0x00 ; '.'
00000000000012e0         db  0x00 ; '.'
00000000000012e1         db  0x00 ; '.'
00000000000012e2         db  0x00 ; '.'
00000000000012e3         db  0x00 ; '.'
00000000000012e4         db  0x00 ; '.'
00000000000012e5         db  0x00 ; '.'
00000000000012e6         db  0x00 ; '.'
00000000000012e7         db  0x00 ; '.'
00000000000012e8         db  0x80 ; '.'
00000000000012e9         db  0xb0 ; '.'
00000000000012ea         db  0x21 ; '!'
00000000000012eb         db  0x00 ; '.'
00000000000012ec         db  0x00 ; '.'
00000000000012ed         db  0x00 ; '.'
00000000000012ee         db  0x00 ; '.'
00000000000012ef         db  0x00 ; '.'
00000000000012f0         db  0x05 ; '.'
00000000000012f1         db  0x00 ; '.'
00000000000012f2         db  0x00 ; '.'
00000000000012f3         db  0x00 ; '.'
00000000000012f4         db  0x4f ; 'O'
00000000000012f5         db  0x00 ; '.'
00000000000012f6         db  0x00 ; '.'
00000000000012f7         db  0x00 ; '.'
00000000000012f8         db  0x00 ; '.'
00000000000012f9         db  0x00 ; '.'
00000000000012fa         db  0x00 ; '.'
00000000000012fb         db  0x00 ; '.'
00000000000012fc         db  0x00 ; '.'
00000000000012fd         db  0x00 ; '.'
00000000000012fe         db  0x00 ; '.'
00000000000012ff         db  0x00 ; '.'
0000000000001300         db  0x88 ; '.'
0000000000001301         db  0xb0 ; '.'
0000000000001302         db  0x21 ; '!'
0000000000001303         db  0x00 ; '.'
0000000000001304         db  0x00 ; '.'
0000000000001305         db  0x00 ; '.'
0000000000001306         db  0x00 ; '.'
0000000000001307         db  0x00 ; '.'
0000000000001308         db  0x05 ; '.'
0000000000001309         db  0x00 ; '.'
000000000000130a         db  0x00 ; '.'
000000000000130b         db  0x00 ; '.'
000000000000130c         db  0x4c ; 'L'
000000000000130d         db  0x00 ; '.'
000000000000130e         db  0x00 ; '.'
000000000000130f         db  0x00 ; '.'
0000000000001310         db  0x00 ; '.'
0000000000001311         db  0x00 ; '.'
0000000000001312         db  0x00 ; '.'
0000000000001313         db  0x00 ; '.'
0000000000001314         db  0x00 ; '.'
0000000000001315         db  0x00 ; '.'
0000000000001316         db  0x00 ; '.'
0000000000001317         db  0x00 ; '.'
0000000000001318         db  0x90 ; '.'
0000000000001319         db  0xb0 ; '.'
000000000000131a         db  0x21 ; '!'
000000000000131b         db  0x00 ; '.'
000000000000131c         db  0x00 ; '.'
000000000000131d         db  0x00 ; '.'
000000000000131e         db  0x00 ; '.'
000000000000131f         db  0x00 ; '.'
0000000000001320         db  0x05 ; '.'
0000000000001321         db  0x00 ; '.'
0000000000001322         db  0x00 ; '.'
0000000000001323         db  0x00 ; '.'
0000000000001324         db  0x57 ; 'W'
0000000000001325         db  0x00 ; '.'
0000000000001326         db  0x00 ; '.'
0000000000001327         db  0x00 ; '.'
0000000000001328         db  0x00 ; '.'
0000000000001329         db  0x00 ; '.'
000000000000132a         db  0x00 ; '.'
000000000000132b         db  0x00 ; '.'
000000000000132c         db  0x00 ; '.'
000000000000132d         db  0x00 ; '.'
000000000000132e         db  0x00 ; '.'
000000000000132f         db  0x00 ; '.'
0000000000001330         db  0x98 ; '.'
0000000000001331         db  0xb0 ; '.'
0000000000001332         db  0x21 ; '!'
0000000000001333         db  0x00 ; '.'
0000000000001334         db  0x00 ; '.'
0000000000001335         db  0x00 ; '.'
0000000000001336         db  0x00 ; '.'
0000000000001337         db  0x00 ; '.'
0000000000001338         db  0x05 ; '.'
0000000000001339         db  0x00 ; '.'
000000000000133a         db  0x00 ; '.'
000000000000133b         db  0x00 ; '.'
000000000000133c         db  0x52 ; 'R'
000000000000133d         db  0x00 ; '.'
000000000000133e         db  0x00 ; '.'
000000000000133f         db  0x00 ; '.'
0000000000001340         db  0x00 ; '.'
0000000000001341         db  0x00 ; '.'
0000000000001342         db  0x00 ; '.'
0000000000001343         db  0x00 ; '.'
0000000000001344         db  0x00 ; '.'
0000000000001345         db  0x00 ; '.'
0000000000001346         db  0x00 ; '.'
0000000000001347         db  0x00 ; '.'
0000000000001348         db  0xa0 ; '.'
0000000000001349         db  0xb0 ; '.'
000000000000134a         db  0x21 ; '!'
000000000000134b         db  0x00 ; '.'
000000000000134c         db  0x00 ; '.'
000000000000134d         db  0x00 ; '.'
000000000000134e         db  0x00 ; '.'
000000000000134f         db  0x00 ; '.'
0000000000001350         db  0x05 ; '.'
0000000000001351         db  0x00 ; '.'
0000000000001352         db  0x00 ; '.'
0000000000001353         db  0x00 ; '.'
0000000000001354         db  0x55 ; 'U'
0000000000001355         db  0x00 ; '.'
0000000000001356         db  0x00 ; '.'
0000000000001357         db  0x00 ; '.'
0000000000001358         db  0x00 ; '.'
0000000000001359         db  0x00 ; '.'
000000000000135a         db  0x00 ; '.'
000000000000135b         db  0x00 ; '.'
000000000000135c         db  0x00 ; '.'
000000000000135d         db  0x00 ; '.'
000000000000135e         db  0x00 ; '.'
000000000000135f         db  0x00 ; '.'
0000000000001360         db  0xc0 ; '.'
0000000000001361         db  0xb0 ; '.'
0000000000001362         db  0x21 ; '!'
0000000000001363         db  0x00 ; '.'
0000000000001364         db  0x00 ; '.'
0000000000001365         db  0x00 ; '.'
0000000000001366         db  0x00 ; '.'
0000000000001367         db  0x00 ; '.'
0000000000001368         db  0x05 ; '.'
0000000000001369         db  0x00 ; '.'
000000000000136a         db  0x00 ; '.'
000000000000136b         db  0x00 ; '.'
000000000000136c         db  0x56 ; 'V'
000000000000136d         db  0x00 ; '.'
000000000000136e         db  0x00 ; '.'
000000000000136f         db  0x00 ; '.'
0000000000001370         db  0x00 ; '.'
0000000000001371         db  0x00 ; '.'
0000000000001372         db  0x00 ; '.'
0000000000001373         db  0x00 ; '.'
0000000000001374         db  0x00 ; '.'
0000000000001375         db  0x00 ; '.'
0000000000001376         db  0x00 ; '.'
0000000000001377         db  0x00 ; '.'


        ; Section .rela.plt
        ; Range: [0x1378; 0x1990[ (1560 bytes)
        ; File offset : [4984; 6544[ (1560 bytes)
        ; Flags: 0x42
        ;   SHT_RELA
        ;   SHF_ALLOC

0000000000001378         db  0x90 ; '.'
0000000000001379         db  0xad ; '.'
000000000000137a         db  0x21 ; '!'
000000000000137b         db  0x00 ; '.'
000000000000137c         db  0x00 ; '.'
000000000000137d         db  0x00 ; '.'
000000000000137e         db  0x00 ; '.'
000000000000137f         db  0x00 ; '.'
0000000000001380         db  0x07 ; '.'
0000000000001381         db  0x00 ; '.'
0000000000001382         db  0x00 ; '.'
0000000000001383         db  0x00 ; '.'
0000000000001384         db  0x01 ; '.'
0000000000001385         db  0x00 ; '.'
0000000000001386         db  0x00 ; '.'
0000000000001387         db  0x00 ; '.'
0000000000001388         db  0x00 ; '.'
0000000000001389         db  0x00 ; '.'
000000000000138a         db  0x00 ; '.'
000000000000138b         db  0x00 ; '.'
000000000000138c         db  0x00 ; '.'
000000000000138d         db  0x00 ; '.'
000000000000138e         db  0x00 ; '.'
000000000000138f         db  0x00 ; '.'
0000000000001390         db  0x98 ; '.'
0000000000001391         db  0xad ; '.'
0000000000001392         db  0x21 ; '!'
0000000000001393         db  0x00 ; '.'
0000000000001394         db  0x00 ; '.'
0000000000001395         db  0x00 ; '.'
0000000000001396         db  0x00 ; '.'
0000000000001397         db  0x00 ; '.'
0000000000001398         db  0x07 ; '.'
0000000000001399         db  0x00 ; '.'
000000000000139a         db  0x00 ; '.'
000000000000139b         db  0x00 ; '.'
000000000000139c         db  0x02 ; '.'
000000000000139d         db  0x00 ; '.'
000000000000139e         db  0x00 ; '.'
000000000000139f         db  0x00 ; '.'
00000000000013a0         db  0x00 ; '.'
00000000000013a1         db  0x00 ; '.'
00000000000013a2         db  0x00 ; '.'
00000000000013a3         db  0x00 ; '.'
00000000000013a4         db  0x00 ; '.'
00000000000013a5         db  0x00 ; '.'
00000000000013a6         db  0x00 ; '.'
00000000000013a7         db  0x00 ; '.'
00000000000013a8         db  0xa0 ; '.'
00000000000013a9         db  0xad ; '.'
00000000000013aa         db  0x21 ; '!'
00000000000013ab         db  0x00 ; '.'
00000000000013ac         db  0x00 ; '.'
00000000000013ad         db  0x00 ; '.'
00000000000013ae         db  0x00 ; '.'
00000000000013af         db  0x00 ; '.'
00000000000013b0         db  0x07 ; '.'
00000000000013b1         db  0x00 ; '.'
00000000000013b2         db  0x00 ; '.'
00000000000013b3         db  0x00 ; '.'
00000000000013b4         db  0x03 ; '.'
00000000000013b5         db  0x00 ; '.'
00000000000013b6         db  0x00 ; '.'
00000000000013b7         db  0x00 ; '.'
00000000000013b8         db  0x00 ; '.'
00000000000013b9         db  0x00 ; '.'
00000000000013ba         db  0x00 ; '.'
00000000000013bb         db  0x00 ; '.'
00000000000013bc         db  0x00 ; '.'
00000000000013bd         db  0x00 ; '.'
00000000000013be         db  0x00 ; '.'
00000000000013bf         db  0x00 ; '.'
00000000000013c0         db  0xa8 ; '.'
00000000000013c1         db  0xad ; '.'
00000000000013c2         db  0x21 ; '!'
00000000000013c3         db  0x00 ; '.'
00000000000013c4         db  0x00 ; '.'
00000000000013c5         db  0x00 ; '.'
00000000000013c6         db  0x00 ; '.'
00000000000013c7         db  0x00 ; '.'
00000000000013c8         db  0x07 ; '.'
00000000000013c9         db  0x00 ; '.'
00000000000013ca         db  0x00 ; '.'
00000000000013cb         db  0x00 ; '.'
00000000000013cc         db  0x04 ; '.'
00000000000013cd         db  0x00 ; '.'
00000000000013ce         db  0x00 ; '.'
00000000000013cf         db  0x00 ; '.'
00000000000013d0         db  0x00 ; '.'
00000000000013d1         db  0x00 ; '.'
00000000000013d2         db  0x00 ; '.'
00000000000013d3         db  0x00 ; '.'
00000000000013d4         db  0x00 ; '.'
00000000000013d5         db  0x00 ; '.'
00000000000013d6         db  0x00 ; '.'
00000000000013d7         db  0x00 ; '.'
00000000000013d8         db  0xb0 ; '.'
00000000000013d9         db  0xad ; '.'
00000000000013da         db  0x21 ; '!'
00000000000013db         db  0x00 ; '.'
00000000000013dc         db  0x00 ; '.'
00000000000013dd         db  0x00 ; '.'
00000000000013de         db  0x00 ; '.'
00000000000013df         db  0x00 ; '.'
00000000000013e0         db  0x07 ; '.'
00000000000013e1         db  0x00 ; '.'
00000000000013e2         db  0x00 ; '.'
00000000000013e3         db  0x00 ; '.'
00000000000013e4         db  0x06 ; '.'
00000000000013e5         db  0x00 ; '.'
00000000000013e6         db  0x00 ; '.'
00000000000013e7         db  0x00 ; '.'
00000000000013e8         db  0x00 ; '.'
00000000000013e9         db  0x00 ; '.'
00000000000013ea         db  0x00 ; '.'
00000000000013eb         db  0x00 ; '.'
00000000000013ec         db  0x00 ; '.'
00000000000013ed         db  0x00 ; '.'
00000000000013ee         db  0x00 ; '.'
00000000000013ef         db  0x00 ; '.'
00000000000013f0         db  0xb8 ; '.'
00000000000013f1         db  0xad ; '.'
00000000000013f2         db  0x21 ; '!'
00000000000013f3         db  0x00 ; '.'
00000000000013f4         db  0x00 ; '.'
00000000000013f5         db  0x00 ; '.'
00000000000013f6         db  0x00 ; '.'
00000000000013f7         db  0x00 ; '.'
00000000000013f8         db  0x07 ; '.'
00000000000013f9         db  0x00 ; '.'
00000000000013fa         db  0x00 ; '.'
00000000000013fb         db  0x00 ; '.'
00000000000013fc         db  0x08 ; '.'
00000000000013fd         db  0x00 ; '.'
00000000000013fe         db  0x00 ; '.'
00000000000013ff         db  0x00 ; '.'
0000000000001400         db  0x00 ; '.'
0000000000001401         db  0x00 ; '.'
0000000000001402         db  0x00 ; '.'
0000000000001403         db  0x00 ; '.'
0000000000001404         db  0x00 ; '.'
0000000000001405         db  0x00 ; '.'
0000000000001406         db  0x00 ; '.'
0000000000001407         db  0x00 ; '.'
0000000000001408         db  0xc0 ; '.'
0000000000001409         db  0xad ; '.'
000000000000140a         db  0x21 ; '!'
000000000000140b         db  0x00 ; '.'
000000000000140c         db  0x00 ; '.'
000000000000140d         db  0x00 ; '.'
000000000000140e         db  0x00 ; '.'
000000000000140f         db  0x00 ; '.'
0000000000001410         db  0x07 ; '.'
0000000000001411         db  0x00 ; '.'
0000000000001412         db  0x00 ; '.'
0000000000001413         db  0x00 ; '.'
0000000000001414         db  0x09 ; '.'
0000000000001415         db  0x00 ; '.'
0000000000001416         db  0x00 ; '.'
0000000000001417         db  0x00 ; '.'
0000000000001418         db  0x00 ; '.'
0000000000001419         db  0x00 ; '.'
000000000000141a         db  0x00 ; '.'
000000000000141b         db  0x00 ; '.'
000000000000141c         db  0x00 ; '.'
000000000000141d         db  0x00 ; '.'
000000000000141e         db  0x00 ; '.'
000000000000141f         db  0x00 ; '.'
0000000000001420         db  0xc8 ; '.'
0000000000001421         db  0xad ; '.'
0000000000001422         db  0x21 ; '!'
0000000000001423         db  0x00 ; '.'
0000000000001424         db  0x00 ; '.'
0000000000001425         db  0x00 ; '.'
0000000000001426         db  0x00 ; '.'
0000000000001427         db  0x00 ; '.'
0000000000001428         db  0x07 ; '.'
0000000000001429         db  0x00 ; '.'
000000000000142a         db  0x00 ; '.'
000000000000142b         db  0x00 ; '.'
000000000000142c         db  0x0a ; '.'
000000000000142d         db  0x00 ; '.'
000000000000142e         db  0x00 ; '.'
000000000000142f         db  0x00 ; '.'
0000000000001430         db  0x00 ; '.'
0000000000001431         db  0x00 ; '.'
0000000000001432         db  0x00 ; '.'
0000000000001433         db  0x00 ; '.'
0000000000001434         db  0x00 ; '.'
0000000000001435         db  0x00 ; '.'
0000000000001436         db  0x00 ; '.'
0000000000001437         db  0x00 ; '.'
0000000000001438         db  0xd0 ; '.'
0000000000001439         db  0xad ; '.'
000000000000143a         db  0x21 ; '!'
000000000000143b         db  0x00 ; '.'
000000000000143c         db  0x00 ; '.'
000000000000143d         db  0x00 ; '.'
000000000000143e         db  0x00 ; '.'
000000000000143f         db  0x00 ; '.'
0000000000001440         db  0x07 ; '.'
0000000000001441         db  0x00 ; '.'
0000000000001442         db  0x00 ; '.'
0000000000001443         db  0x00 ; '.'
0000000000001444         db  0x0b ; '.'
0000000000001445         db  0x00 ; '.'
0000000000001446         db  0x00 ; '.'
0000000000001447         db  0x00 ; '.'
0000000000001448         db  0x00 ; '.'
0000000000001449         db  0x00 ; '.'
000000000000144a         db  0x00 ; '.'
000000000000144b         db  0x00 ; '.'
000000000000144c         db  0x00 ; '.'
000000000000144d         db  0x00 ; '.'
000000000000144e         db  0x00 ; '.'
000000000000144f         db  0x00 ; '.'
0000000000001450         db  0xd8 ; '.'
0000000000001451         db  0xad ; '.'
0000000000001452         db  0x21 ; '!'
0000000000001453         db  0x00 ; '.'
0000000000001454         db  0x00 ; '.'
0000000000001455         db  0x00 ; '.'
0000000000001456         db  0x00 ; '.'
0000000000001457         db  0x00 ; '.'
0000000000001458         db  0x07 ; '.'
0000000000001459         db  0x00 ; '.'
000000000000145a         db  0x00 ; '.'
000000000000145b         db  0x00 ; '.'
000000000000145c         db  0x0d ; '.'
000000000000145d         db  0x00 ; '.'
000000000000145e         db  0x00 ; '.'
000000000000145f         db  0x00 ; '.'
0000000000001460         db  0x00 ; '.'
0000000000001461         db  0x00 ; '.'
0000000000001462         db  0x00 ; '.'
0000000000001463         db  0x00 ; '.'
0000000000001464         db  0x00 ; '.'
0000000000001465         db  0x00 ; '.'
0000000000001466         db  0x00 ; '.'
0000000000001467         db  0x00 ; '.'
0000000000001468         db  0xe0 ; '.'
0000000000001469         db  0xad ; '.'
000000000000146a         db  0x21 ; '!'
000000000000146b         db  0x00 ; '.'
000000000000146c         db  0x00 ; '.'
000000000000146d         db  0x00 ; '.'
000000000000146e         db  0x00 ; '.'
000000000000146f         db  0x00 ; '.'
0000000000001470         db  0x07 ; '.'
0000000000001471         db  0x00 ; '.'
0000000000001472         db  0x00 ; '.'
0000000000001473         db  0x00 ; '.'
0000000000001474         db  0x0e ; '.'
0000000000001475         db  0x00 ; '.'
0000000000001476         db  0x00 ; '.'
0000000000001477         db  0x00 ; '.'
0000000000001478         db  0x00 ; '.'
0000000000001479         db  0x00 ; '.'
000000000000147a         db  0x00 ; '.'
000000000000147b         db  0x00 ; '.'
000000000000147c         db  0x00 ; '.'
000000000000147d         db  0x00 ; '.'
000000000000147e         db  0x00 ; '.'
000000000000147f         db  0x00 ; '.'
0000000000001480         db  0xe8 ; '.'
0000000000001481         db  0xad ; '.'
0000000000001482         db  0x21 ; '!'
0000000000001483         db  0x00 ; '.'
0000000000001484         db  0x00 ; '.'
0000000000001485         db  0x00 ; '.'
0000000000001486         db  0x00 ; '.'
0000000000001487         db  0x00 ; '.'
0000000000001488         db  0x07 ; '.'
0000000000001489         db  0x00 ; '.'
000000000000148a         db  0x00 ; '.'
000000000000148b         db  0x00 ; '.'
000000000000148c         db  0x0f ; '.'
000000000000148d         db  0x00 ; '.'
000000000000148e         db  0x00 ; '.'
000000000000148f         db  0x00 ; '.'
0000000000001490         db  0x00 ; '.'
0000000000001491         db  0x00 ; '.'
0000000000001492         db  0x00 ; '.'
0000000000001493         db  0x00 ; '.'
0000000000001494         db  0x00 ; '.'
0000000000001495         db  0x00 ; '.'
0000000000001496         db  0x00 ; '.'
0000000000001497         db  0x00 ; '.'
0000000000001498         db  0xf0 ; '.'
0000000000001499         db  0xad ; '.'
000000000000149a         db  0x21 ; '!'
000000000000149b         db  0x00 ; '.'
000000000000149c         db  0x00 ; '.'
000000000000149d         db  0x00 ; '.'
000000000000149e         db  0x00 ; '.'
000000000000149f         db  0x00 ; '.'
00000000000014a0         db  0x07 ; '.'
00000000000014a1         db  0x00 ; '.'
00000000000014a2         db  0x00 ; '.'
00000000000014a3         db  0x00 ; '.'
00000000000014a4         db  0x10 ; '.'
00000000000014a5         db  0x00 ; '.'
00000000000014a6         db  0x00 ; '.'
00000000000014a7         db  0x00 ; '.'
00000000000014a8         db  0x00 ; '.'
00000000000014a9         db  0x00 ; '.'
00000000000014aa         db  0x00 ; '.'
00000000000014ab         db  0x00 ; '.'
00000000000014ac         db  0x00 ; '.'
00000000000014ad         db  0x00 ; '.'
00000000000014ae         db  0x00 ; '.'
00000000000014af         db  0x00 ; '.'
00000000000014b0         db  0xf8 ; '.'
00000000000014b1         db  0xad ; '.'
00000000000014b2         db  0x21 ; '!'
00000000000014b3         db  0x00 ; '.'
00000000000014b4         db  0x00 ; '.'
00000000000014b5         db  0x00 ; '.'
00000000000014b6         db  0x00 ; '.'
00000000000014b7         db  0x00 ; '.'
00000000000014b8         db  0x07 ; '.'
00000000000014b9         db  0x00 ; '.'
00000000000014ba         db  0x00 ; '.'
00000000000014bb         db  0x00 ; '.'
00000000000014bc         db  0x11 ; '.'
00000000000014bd         db  0x00 ; '.'
00000000000014be         db  0x00 ; '.'
00000000000014bf         db  0x00 ; '.'
00000000000014c0         db  0x00 ; '.'
00000000000014c1         db  0x00 ; '.'
00000000000014c2         db  0x00 ; '.'
00000000000014c3         db  0x00 ; '.'
00000000000014c4         db  0x00 ; '.'
00000000000014c5         db  0x00 ; '.'
00000000000014c6         db  0x00 ; '.'
00000000000014c7         db  0x00 ; '.'
00000000000014c8         db  0x00 ; '.'
00000000000014c9         db  0xae ; '.'
00000000000014ca         db  0x21 ; '!'
00000000000014cb         db  0x00 ; '.'
00000000000014cc         db  0x00 ; '.'
00000000000014cd         db  0x00 ; '.'
00000000000014ce         db  0x00 ; '.'
00000000000014cf         db  0x00 ; '.'
00000000000014d0         db  0x07 ; '.'
00000000000014d1         db  0x00 ; '.'
00000000000014d2         db  0x00 ; '.'
00000000000014d3         db  0x00 ; '.'
00000000000014d4         db  0x12 ; '.'
00000000000014d5         db  0x00 ; '.'
00000000000014d6         db  0x00 ; '.'
00000000000014d7         db  0x00 ; '.'
00000000000014d8         db  0x00 ; '.'
00000000000014d9         db  0x00 ; '.'
00000000000014da         db  0x00 ; '.'
00000000000014db         db  0x00 ; '.'
00000000000014dc         db  0x00 ; '.'
00000000000014dd         db  0x00 ; '.'
00000000000014de         db  0x00 ; '.'
00000000000014df         db  0x00 ; '.'
00000000000014e0         db  0x08 ; '.'
00000000000014e1         db  0xae ; '.'
00000000000014e2         db  0x21 ; '!'
00000000000014e3         db  0x00 ; '.'
00000000000014e4         db  0x00 ; '.'
00000000000014e5         db  0x00 ; '.'
00000000000014e6         db  0x00 ; '.'
00000000000014e7         db  0x00 ; '.'
00000000000014e8         db  0x07 ; '.'
00000000000014e9         db  0x00 ; '.'
00000000000014ea         db  0x00 ; '.'
00000000000014eb         db  0x00 ; '.'
00000000000014ec         db  0x13 ; '.'
00000000000014ed         db  0x00 ; '.'
00000000000014ee         db  0x00 ; '.'
00000000000014ef         db  0x00 ; '.'
00000000000014f0         db  0x00 ; '.'
00000000000014f1         db  0x00 ; '.'
00000000000014f2         db  0x00 ; '.'
00000000000014f3         db  0x00 ; '.'
00000000000014f4         db  0x00 ; '.'
00000000000014f5         db  0x00 ; '.'
00000000000014f6         db  0x00 ; '.'
00000000000014f7         db  0x00 ; '.'
00000000000014f8         db  0x10 ; '.'
00000000000014f9         db  0xae ; '.'
00000000000014fa         db  0x21 ; '!'
00000000000014fb         db  0x00 ; '.'
00000000000014fc         db  0x00 ; '.'
00000000000014fd         db  0x00 ; '.'
00000000000014fe         db  0x00 ; '.'
00000000000014ff         db  0x00 ; '.'
0000000000001500         db  0x07 ; '.'
0000000000001501         db  0x00 ; '.'
0000000000001502         db  0x00 ; '.'
0000000000001503         db  0x00 ; '.'
0000000000001504         db  0x14 ; '.'
0000000000001505         db  0x00 ; '.'
0000000000001506         db  0x00 ; '.'
0000000000001507         db  0x00 ; '.'
0000000000001508         db  0x00 ; '.'
0000000000001509         db  0x00 ; '.'
000000000000150a         db  0x00 ; '.'
000000000000150b         db  0x00 ; '.'
000000000000150c         db  0x00 ; '.'
000000000000150d         db  0x00 ; '.'
000000000000150e         db  0x00 ; '.'
000000000000150f         db  0x00 ; '.'
0000000000001510         db  0x18 ; '.'
0000000000001511         db  0xae ; '.'
0000000000001512         db  0x21 ; '!'
0000000000001513         db  0x00 ; '.'
0000000000001514         db  0x00 ; '.'
0000000000001515         db  0x00 ; '.'
0000000000001516         db  0x00 ; '.'
0000000000001517         db  0x00 ; '.'
0000000000001518         db  0x07 ; '.'
0000000000001519         db  0x00 ; '.'
000000000000151a         db  0x00 ; '.'
000000000000151b         db  0x00 ; '.'
000000000000151c         db  0x15 ; '.'
000000000000151d         db  0x00 ; '.'
000000000000151e         db  0x00 ; '.'
000000000000151f         db  0x00 ; '.'
0000000000001520         db  0x00 ; '.'
0000000000001521         db  0x00 ; '.'
0000000000001522         db  0x00 ; '.'
0000000000001523         db  0x00 ; '.'
0000000000001524         db  0x00 ; '.'
0000000000001525         db  0x00 ; '.'
0000000000001526         db  0x00 ; '.'
0000000000001527         db  0x00 ; '.'
0000000000001528         db  0x20 ; ' '
0000000000001529         db  0xae ; '.'
000000000000152a         db  0x21 ; '!'
000000000000152b         db  0x00 ; '.'
000000000000152c         db  0x00 ; '.'
000000000000152d         db  0x00 ; '.'
000000000000152e         db  0x00 ; '.'
000000000000152f         db  0x00 ; '.'
0000000000001530         db  0x07 ; '.'
0000000000001531         db  0x00 ; '.'
0000000000001532         db  0x00 ; '.'
0000000000001533         db  0x00 ; '.'
0000000000001534         db  0x16 ; '.'
0000000000001535         db  0x00 ; '.'
0000000000001536         db  0x00 ; '.'
0000000000001537         db  0x00 ; '.'
0000000000001538         db  0x00 ; '.'
0000000000001539         db  0x00 ; '.'
000000000000153a         db  0x00 ; '.'
000000000000153b         db  0x00 ; '.'
000000000000153c         db  0x00 ; '.'
000000000000153d         db  0x00 ; '.'
000000000000153e         db  0x00 ; '.'
000000000000153f         db  0x00 ; '.'
0000000000001540         db  0x28 ; '('
0000000000001541         db  0xae ; '.'
0000000000001542         db  0x21 ; '!'
0000000000001543         db  0x00 ; '.'
0000000000001544         db  0x00 ; '.'
0000000000001545         db  0x00 ; '.'
0000000000001546         db  0x00 ; '.'
0000000000001547         db  0x00 ; '.'
0000000000001548         db  0x07 ; '.'
0000000000001549         db  0x00 ; '.'
000000000000154a         db  0x00 ; '.'
000000000000154b         db  0x00 ; '.'
000000000000154c         db  0x17 ; '.'
000000000000154d         db  0x00 ; '.'
000000000000154e         db  0x00 ; '.'
000000000000154f         db  0x00 ; '.'
0000000000001550         db  0x00 ; '.'
0000000000001551         db  0x00 ; '.'
0000000000001552         db  0x00 ; '.'
0000000000001553         db  0x00 ; '.'
0000000000001554         db  0x00 ; '.'
0000000000001555         db  0x00 ; '.'
0000000000001556         db  0x00 ; '.'
0000000000001557         db  0x00 ; '.'
0000000000001558         db  0x30 ; '0'
0000000000001559         db  0xae ; '.'
000000000000155a         db  0x21 ; '!'
000000000000155b         db  0x00 ; '.'
000000000000155c         db  0x00 ; '.'
000000000000155d         db  0x00 ; '.'
000000000000155e         db  0x00 ; '.'
000000000000155f         db  0x00 ; '.'
0000000000001560         db  0x07 ; '.'
0000000000001561         db  0x00 ; '.'
0000000000001562         db  0x00 ; '.'
0000000000001563         db  0x00 ; '.'
0000000000001564         db  0x18 ; '.'
0000000000001565         db  0x00 ; '.'
0000000000001566         db  0x00 ; '.'
0000000000001567         db  0x00 ; '.'
0000000000001568         db  0x00 ; '.'
0000000000001569         db  0x00 ; '.'
000000000000156a         db  0x00 ; '.'
000000000000156b         db  0x00 ; '.'
000000000000156c         db  0x00 ; '.'
000000000000156d         db  0x00 ; '.'
000000000000156e         db  0x00 ; '.'
000000000000156f         db  0x00 ; '.'
0000000000001570         db  0x38 ; '8'
0000000000001571         db  0xae ; '.'
0000000000001572         db  0x21 ; '!'
0000000000001573         db  0x00 ; '.'
0000000000001574         db  0x00 ; '.'
0000000000001575         db  0x00 ; '.'
0000000000001576         db  0x00 ; '.'
0000000000001577         db  0x00 ; '.'
0000000000001578         db  0x07 ; '.'
0000000000001579         db  0x00 ; '.'
000000000000157a         db  0x00 ; '.'
000000000000157b         db  0x00 ; '.'
000000000000157c         db  0x1a ; '.'
000000000000157d         db  0x00 ; '.'
000000000000157e         db  0x00 ; '.'
000000000000157f         db  0x00 ; '.'
0000000000001580         db  0x00 ; '.'
0000000000001581         db  0x00 ; '.'
0000000000001582         db  0x00 ; '.'
0000000000001583         db  0x00 ; '.'
0000000000001584         db  0x00 ; '.'
0000000000001585         db  0x00 ; '.'
0000000000001586         db  0x00 ; '.'
0000000000001587         db  0x00 ; '.'
0000000000001588         db  0x40 ; '@'
0000000000001589         db  0xae ; '.'
000000000000158a         db  0x21 ; '!'
000000000000158b         db  0x00 ; '.'
000000000000158c         db  0x00 ; '.'
000000000000158d         db  0x00 ; '.'
000000000000158e         db  0x00 ; '.'
000000000000158f         db  0x00 ; '.'
0000000000001590         db  0x07 ; '.'
0000000000001591         db  0x00 ; '.'
0000000000001592         db  0x00 ; '.'
0000000000001593         db  0x00 ; '.'
0000000000001594         db  0x1b ; '.'
0000000000001595         db  0x00 ; '.'
0000000000001596         db  0x00 ; '.'
0000000000001597         db  0x00 ; '.'
0000000000001598         db  0x00 ; '.'
0000000000001599         db  0x00 ; '.'
000000000000159a         db  0x00 ; '.'
000000000000159b         db  0x00 ; '.'
000000000000159c         db  0x00 ; '.'
000000000000159d         db  0x00 ; '.'
000000000000159e         db  0x00 ; '.'
000000000000159f         db  0x00 ; '.'
00000000000015a0         db  0x48 ; 'H'
00000000000015a1         db  0xae ; '.'
00000000000015a2         db  0x21 ; '!'
00000000000015a3         db  0x00 ; '.'
00000000000015a4         db  0x00 ; '.'
00000000000015a5         db  0x00 ; '.'
00000000000015a6         db  0x00 ; '.'
00000000000015a7         db  0x00 ; '.'
00000000000015a8         db  0x07 ; '.'
00000000000015a9         db  0x00 ; '.'
00000000000015aa         db  0x00 ; '.'
00000000000015ab         db  0x00 ; '.'
00000000000015ac         db  0x1c ; '.'
00000000000015ad         db  0x00 ; '.'
00000000000015ae         db  0x00 ; '.'
00000000000015af         db  0x00 ; '.'
00000000000015b0         db  0x00 ; '.'
00000000000015b1         db  0x00 ; '.'
00000000000015b2         db  0x00 ; '.'
00000000000015b3         db  0x00 ; '.'
00000000000015b4         db  0x00 ; '.'
00000000000015b5         db  0x00 ; '.'
00000000000015b6         db  0x00 ; '.'
00000000000015b7         db  0x00 ; '.'
00000000000015b8         db  0x50 ; 'P'
00000000000015b9         db  0xae ; '.'
00000000000015ba         db  0x21 ; '!'
00000000000015bb         db  0x00 ; '.'
00000000000015bc         db  0x00 ; '.'
00000000000015bd         db  0x00 ; '.'
00000000000015be         db  0x00 ; '.'
00000000000015bf         db  0x00 ; '.'
00000000000015c0         db  0x07 ; '.'
00000000000015c1         db  0x00 ; '.'
00000000000015c2         db  0x00 ; '.'
00000000000015c3         db  0x00 ; '.'
00000000000015c4         db  0x1d ; '.'
00000000000015c5         db  0x00 ; '.'
00000000000015c6         db  0x00 ; '.'
00000000000015c7         db  0x00 ; '.'
00000000000015c8         db  0x00 ; '.'
00000000000015c9         db  0x00 ; '.'
00000000000015ca         db  0x00 ; '.'
00000000000015cb         db  0x00 ; '.'
00000000000015cc         db  0x00 ; '.'
00000000000015cd         db  0x00 ; '.'
00000000000015ce         db  0x00 ; '.'
00000000000015cf         db  0x00 ; '.'
00000000000015d0         db  0x58 ; 'X'
00000000000015d1         db  0xae ; '.'
00000000000015d2         db  0x21 ; '!'
00000000000015d3         db  0x00 ; '.'
00000000000015d4         db  0x00 ; '.'
00000000000015d5         db  0x00 ; '.'
00000000000015d6         db  0x00 ; '.'
00000000000015d7         db  0x00 ; '.'
00000000000015d8         db  0x07 ; '.'
00000000000015d9         db  0x00 ; '.'
00000000000015da         db  0x00 ; '.'
00000000000015db         db  0x00 ; '.'
00000000000015dc         db  0x1e ; '.'
00000000000015dd         db  0x00 ; '.'
00000000000015de         db  0x00 ; '.'
00000000000015df         db  0x00 ; '.'
00000000000015e0         db  0x00 ; '.'
00000000000015e1         db  0x00 ; '.'
00000000000015e2         db  0x00 ; '.'
00000000000015e3         db  0x00 ; '.'
00000000000015e4         db  0x00 ; '.'
00000000000015e5         db  0x00 ; '.'
00000000000015e6         db  0x00 ; '.'
00000000000015e7         db  0x00 ; '.'
00000000000015e8         db  0x60 ; '`'
00000000000015e9         db  0xae ; '.'
00000000000015ea         db  0x21 ; '!'
00000000000015eb         db  0x00 ; '.'
00000000000015ec         db  0x00 ; '.'
00000000000015ed         db  0x00 ; '.'
00000000000015ee         db  0x00 ; '.'
00000000000015ef         db  0x00 ; '.'
00000000000015f0         db  0x07 ; '.'
00000000000015f1         db  0x00 ; '.'
00000000000015f2         db  0x00 ; '.'
00000000000015f3         db  0x00 ; '.'
00000000000015f4         db  0x1f ; '.'
00000000000015f5         db  0x00 ; '.'
00000000000015f6         db  0x00 ; '.'
00000000000015f7         db  0x00 ; '.'
00000000000015f8         db  0x00 ; '.'
00000000000015f9         db  0x00 ; '.'
00000000000015fa         db  0x00 ; '.'
00000000000015fb         db  0x00 ; '.'
00000000000015fc         db  0x00 ; '.'
00000000000015fd         db  0x00 ; '.'
00000000000015fe         db  0x00 ; '.'
00000000000015ff         db  0x00 ; '.'
0000000000001600         db  0x68 ; 'h'
0000000000001601         db  0xae ; '.'
0000000000001602         db  0x21 ; '!'
0000000000001603         db  0x00 ; '.'
0000000000001604         db  0x00 ; '.'
0000000000001605         db  0x00 ; '.'
0000000000001606         db  0x00 ; '.'
0000000000001607         db  0x00 ; '.'
0000000000001608         db  0x07 ; '.'
0000000000001609         db  0x00 ; '.'
000000000000160a         db  0x00 ; '.'
000000000000160b         db  0x00 ; '.'
000000000000160c         db  0x20 ; ' '
000000000000160d         db  0x00 ; '.'
000000000000160e         db  0x00 ; '.'
000000000000160f         db  0x00 ; '.'
0000000000001610         db  0x00 ; '.'
0000000000001611         db  0x00 ; '.'
0000000000001612         db  0x00 ; '.'
0000000000001613         db  0x00 ; '.'
0000000000001614         db  0x00 ; '.'
0000000000001615         db  0x00 ; '.'
0000000000001616         db  0x00 ; '.'
0000000000001617         db  0x00 ; '.'
0000000000001618         db  0x70 ; 'p'
0000000000001619         db  0xae ; '.'
000000000000161a         db  0x21 ; '!'
000000000000161b         db  0x00 ; '.'
000000000000161c         db  0x00 ; '.'
000000000000161d         db  0x00 ; '.'
000000000000161e         db  0x00 ; '.'
000000000000161f         db  0x00 ; '.'
0000000000001620         db  0x07 ; '.'
0000000000001621         db  0x00 ; '.'
0000000000001622         db  0x00 ; '.'
0000000000001623         db  0x00 ; '.'
0000000000001624         db  0x21 ; '!'
0000000000001625         db  0x00 ; '.'
0000000000001626         db  0x00 ; '.'
0000000000001627         db  0x00 ; '.'
0000000000001628         db  0x00 ; '.'
0000000000001629         db  0x00 ; '.'
000000000000162a         db  0x00 ; '.'
000000000000162b         db  0x00 ; '.'
000000000000162c         db  0x00 ; '.'
000000000000162d         db  0x00 ; '.'
000000000000162e         db  0x00 ; '.'
000000000000162f         db  0x00 ; '.'
0000000000001630         db  0x78 ; 'x'
0000000000001631         db  0xae ; '.'
0000000000001632         db  0x21 ; '!'
0000000000001633         db  0x00 ; '.'
0000000000001634         db  0x00 ; '.'
0000000000001635         db  0x00 ; '.'
0000000000001636         db  0x00 ; '.'
0000000000001637         db  0x00 ; '.'
0000000000001638         db  0x07 ; '.'
0000000000001639         db  0x00 ; '.'
000000000000163a         db  0x00 ; '.'
000000000000163b         db  0x00 ; '.'
000000000000163c         db  0x23 ; '#'
000000000000163d         db  0x00 ; '.'
000000000000163e         db  0x00 ; '.'
000000000000163f         db  0x00 ; '.'
0000000000001640         db  0x00 ; '.'
0000000000001641         db  0x00 ; '.'
0000000000001642         db  0x00 ; '.'
0000000000001643         db  0x00 ; '.'
0000000000001644         db  0x00 ; '.'
0000000000001645         db  0x00 ; '.'
0000000000001646         db  0x00 ; '.'
0000000000001647         db  0x00 ; '.'
0000000000001648         db  0x80 ; '.'
0000000000001649         db  0xae ; '.'
000000000000164a         db  0x21 ; '!'
000000000000164b         db  0x00 ; '.'
000000000000164c         db  0x00 ; '.'
000000000000164d         db  0x00 ; '.'
000000000000164e         db  0x00 ; '.'
000000000000164f         db  0x00 ; '.'
0000000000001650         db  0x07 ; '.'
0000000000001651         db  0x00 ; '.'
0000000000001652         db  0x00 ; '.'
0000000000001653         db  0x00 ; '.'
0000000000001654         db  0x24 ; '$'
0000000000001655         db  0x00 ; '.'
0000000000001656         db  0x00 ; '.'
0000000000001657         db  0x00 ; '.'
0000000000001658         db  0x00 ; '.'
0000000000001659         db  0x00 ; '.'
000000000000165a         db  0x00 ; '.'
000000000000165b         db  0x00 ; '.'
000000000000165c         db  0x00 ; '.'
000000000000165d         db  0x00 ; '.'
000000000000165e         db  0x00 ; '.'
000000000000165f         db  0x00 ; '.'
0000000000001660         db  0x88 ; '.'
0000000000001661         db  0xae ; '.'
0000000000001662         db  0x21 ; '!'
0000000000001663         db  0x00 ; '.'
0000000000001664         db  0x00 ; '.'
0000000000001665         db  0x00 ; '.'
0000000000001666         db  0x00 ; '.'
0000000000001667         db  0x00 ; '.'
0000000000001668         db  0x07 ; '.'
0000000000001669         db  0x00 ; '.'
000000000000166a         db  0x00 ; '.'
000000000000166b         db  0x00 ; '.'
000000000000166c         db  0x25 ; '%'
000000000000166d         db  0x00 ; '.'
000000000000166e         db  0x00 ; '.'
000000000000166f         db  0x00 ; '.'
0000000000001670         db  0x00 ; '.'
0000000000001671         db  0x00 ; '.'
0000000000001672         db  0x00 ; '.'
0000000000001673         db  0x00 ; '.'
0000000000001674         db  0x00 ; '.'
0000000000001675         db  0x00 ; '.'
0000000000001676         db  0x00 ; '.'
0000000000001677         db  0x00 ; '.'
0000000000001678         db  0x90 ; '.'
0000000000001679         db  0xae ; '.'
000000000000167a         db  0x21 ; '!'
000000000000167b         db  0x00 ; '.'
000000000000167c         db  0x00 ; '.'
000000000000167d         db  0x00 ; '.'
000000000000167e         db  0x00 ; '.'
000000000000167f         db  0x00 ; '.'
0000000000001680         db  0x07 ; '.'
0000000000001681         db  0x00 ; '.'
0000000000001682         db  0x00 ; '.'
0000000000001683         db  0x00 ; '.'
0000000000001684         db  0x26 ; '&'
0000000000001685         db  0x00 ; '.'
0000000000001686         db  0x00 ; '.'
0000000000001687         db  0x00 ; '.'
0000000000001688         db  0x00 ; '.'
0000000000001689         db  0x00 ; '.'
000000000000168a         db  0x00 ; '.'
000000000000168b         db  0x00 ; '.'
000000000000168c         db  0x00 ; '.'
000000000000168d         db  0x00 ; '.'
000000000000168e         db  0x00 ; '.'
000000000000168f         db  0x00 ; '.'
0000000000001690         db  0x98 ; '.'
0000000000001691         db  0xae ; '.'
0000000000001692         db  0x21 ; '!'
0000000000001693         db  0x00 ; '.'
0000000000001694         db  0x00 ; '.'
0000000000001695         db  0x00 ; '.'
0000000000001696         db  0x00 ; '.'
0000000000001697         db  0x00 ; '.'
0000000000001698         db  0x07 ; '.'
0000000000001699         db  0x00 ; '.'
000000000000169a         db  0x00 ; '.'
000000000000169b         db  0x00 ; '.'
000000000000169c         db  0x27 ; '''
000000000000169d         db  0x00 ; '.'
000000000000169e         db  0x00 ; '.'
000000000000169f         db  0x00 ; '.'
00000000000016a0         db  0x00 ; '.'
00000000000016a1         db  0x00 ; '.'
00000000000016a2         db  0x00 ; '.'
00000000000016a3         db  0x00 ; '.'
00000000000016a4         db  0x00 ; '.'
00000000000016a5         db  0x00 ; '.'
00000000000016a6         db  0x00 ; '.'
00000000000016a7         db  0x00 ; '.'
00000000000016a8         db  0xa0 ; '.'
00000000000016a9         db  0xae ; '.'
00000000000016aa         db  0x21 ; '!'
00000000000016ab         db  0x00 ; '.'
00000000000016ac         db  0x00 ; '.'
00000000000016ad         db  0x00 ; '.'
00000000000016ae         db  0x00 ; '.'
00000000000016af         db  0x00 ; '.'
00000000000016b0         db  0x07 ; '.'
00000000000016b1         db  0x00 ; '.'
00000000000016b2         db  0x00 ; '.'
00000000000016b3         db  0x00 ; '.'
00000000000016b4         db  0x29 ; ')'
00000000000016b5         db  0x00 ; '.'
00000000000016b6         db  0x00 ; '.'
00000000000016b7         db  0x00 ; '.'
00000000000016b8         db  0x00 ; '.'
00000000000016b9         db  0x00 ; '.'
00000000000016ba         db  0x00 ; '.'
00000000000016bb         db  0x00 ; '.'
00000000000016bc         db  0x00 ; '.'
00000000000016bd         db  0x00 ; '.'
00000000000016be         db  0x00 ; '.'
00000000000016bf         db  0x00 ; '.'
00000000000016c0         db  0xa8 ; '.'
00000000000016c1         db  0xae ; '.'
00000000000016c2         db  0x21 ; '!'
00000000000016c3         db  0x00 ; '.'
00000000000016c4         db  0x00 ; '.'
00000000000016c5         db  0x00 ; '.'
00000000000016c6         db  0x00 ; '.'
00000000000016c7         db  0x00 ; '.'
00000000000016c8         db  0x07 ; '.'
00000000000016c9         db  0x00 ; '.'
00000000000016ca         db  0x00 ; '.'
00000000000016cb         db  0x00 ; '.'
00000000000016cc         db  0x2a ; '*'
00000000000016cd         db  0x00 ; '.'
00000000000016ce         db  0x00 ; '.'
00000000000016cf         db  0x00 ; '.'
00000000000016d0         db  0x00 ; '.'
00000000000016d1         db  0x00 ; '.'
00000000000016d2         db  0x00 ; '.'
00000000000016d3         db  0x00 ; '.'
00000000000016d4         db  0x00 ; '.'
00000000000016d5         db  0x00 ; '.'
00000000000016d6         db  0x00 ; '.'
00000000000016d7         db  0x00 ; '.'
00000000000016d8         db  0xb0 ; '.'
00000000000016d9         db  0xae ; '.'
00000000000016da         db  0x21 ; '!'
00000000000016db         db  0x00 ; '.'
00000000000016dc         db  0x00 ; '.'
00000000000016dd         db  0x00 ; '.'
00000000000016de         db  0x00 ; '.'
00000000000016df         db  0x00 ; '.'
00000000000016e0         db  0x07 ; '.'
00000000000016e1         db  0x00 ; '.'
00000000000016e2         db  0x00 ; '.'
00000000000016e3         db  0x00 ; '.'
00000000000016e4         db  0x2c ; ','
00000000000016e5         db  0x00 ; '.'
00000000000016e6         db  0x00 ; '.'
00000000000016e7         db  0x00 ; '.'
00000000000016e8         db  0x00 ; '.'
00000000000016e9         db  0x00 ; '.'
00000000000016ea         db  0x00 ; '.'
00000000000016eb         db  0x00 ; '.'
00000000000016ec         db  0x00 ; '.'
00000000000016ed         db  0x00 ; '.'
00000000000016ee         db  0x00 ; '.'
00000000000016ef         db  0x00 ; '.'
00000000000016f0         db  0xb8 ; '.'
00000000000016f1         db  0xae ; '.'
00000000000016f2         db  0x21 ; '!'
00000000000016f3         db  0x00 ; '.'
00000000000016f4         db  0x00 ; '.'
00000000000016f5         db  0x00 ; '.'
00000000000016f6         db  0x00 ; '.'
00000000000016f7         db  0x00 ; '.'
00000000000016f8         db  0x07 ; '.'
00000000000016f9         db  0x00 ; '.'
00000000000016fa         db  0x00 ; '.'
00000000000016fb         db  0x00 ; '.'
00000000000016fc         db  0x2d ; '-'
00000000000016fd         db  0x00 ; '.'
00000000000016fe         db  0x00 ; '.'
00000000000016ff         db  0x00 ; '.'
0000000000001700         db  0x00 ; '.'
0000000000001701         db  0x00 ; '.'
0000000000001702         db  0x00 ; '.'
0000000000001703         db  0x00 ; '.'
0000000000001704         db  0x00 ; '.'
0000000000001705         db  0x00 ; '.'
0000000000001706         db  0x00 ; '.'
0000000000001707         db  0x00 ; '.'
0000000000001708         db  0xc0 ; '.'
0000000000001709         db  0xae ; '.'
000000000000170a         db  0x21 ; '!'
000000000000170b         db  0x00 ; '.'
000000000000170c         db  0x00 ; '.'
000000000000170d         db  0x00 ; '.'
000000000000170e         db  0x00 ; '.'
000000000000170f         db  0x00 ; '.'
0000000000001710         db  0x07 ; '.'
0000000000001711         db  0x00 ; '.'
0000000000001712         db  0x00 ; '.'
0000000000001713         db  0x00 ; '.'
0000000000001714         db  0x2e ; '.'
0000000000001715         db  0x00 ; '.'
0000000000001716         db  0x00 ; '.'
0000000000001717         db  0x00 ; '.'
0000000000001718         db  0x00 ; '.'
0000000000001719         db  0x00 ; '.'
000000000000171a         db  0x00 ; '.'
000000000000171b         db  0x00 ; '.'
000000000000171c         db  0x00 ; '.'
000000000000171d         db  0x00 ; '.'
000000000000171e         db  0x00 ; '.'
000000000000171f         db  0x00 ; '.'
0000000000001720         db  0xc8 ; '.'
0000000000001721         db  0xae ; '.'
0000000000001722         db  0x21 ; '!'
0000000000001723         db  0x00 ; '.'
0000000000001724         db  0x00 ; '.'
0000000000001725         db  0x00 ; '.'
0000000000001726         db  0x00 ; '.'
0000000000001727         db  0x00 ; '.'
0000000000001728         db  0x07 ; '.'
0000000000001729         db  0x00 ; '.'
000000000000172a         db  0x00 ; '.'
000000000000172b         db  0x00 ; '.'
000000000000172c         db  0x2f ; '/'
000000000000172d         db  0x00 ; '.'
000000000000172e         db  0x00 ; '.'
000000000000172f         db  0x00 ; '.'
0000000000001730         db  0x00 ; '.'
0000000000001731         db  0x00 ; '.'
0000000000001732         db  0x00 ; '.'
0000000000001733         db  0x00 ; '.'
0000000000001734         db  0x00 ; '.'
0000000000001735         db  0x00 ; '.'
0000000000001736         db  0x00 ; '.'
0000000000001737         db  0x00 ; '.'
0000000000001738         db  0xd0 ; '.'
0000000000001739         db  0xae ; '.'
000000000000173a         db  0x21 ; '!'
000000000000173b         db  0x00 ; '.'
000000000000173c         db  0x00 ; '.'
000000000000173d         db  0x00 ; '.'
000000000000173e         db  0x00 ; '.'
000000000000173f         db  0x00 ; '.'
0000000000001740         db  0x07 ; '.'
0000000000001741         db  0x00 ; '.'
0000000000001742         db  0x00 ; '.'
0000000000001743         db  0x00 ; '.'
0000000000001744         db  0x30 ; '0'
0000000000001745         db  0x00 ; '.'
0000000000001746         db  0x00 ; '.'
0000000000001747         db  0x00 ; '.'
0000000000001748         db  0x00 ; '.'
0000000000001749         db  0x00 ; '.'
000000000000174a         db  0x00 ; '.'
000000000000174b         db  0x00 ; '.'
000000000000174c         db  0x00 ; '.'
000000000000174d         db  0x00 ; '.'
000000000000174e         db  0x00 ; '.'
000000000000174f         db  0x00 ; '.'
0000000000001750         db  0xd8 ; '.'
0000000000001751         db  0xae ; '.'
0000000000001752         db  0x21 ; '!'
0000000000001753         db  0x00 ; '.'
0000000000001754         db  0x00 ; '.'
0000000000001755         db  0x00 ; '.'
0000000000001756         db  0x00 ; '.'
0000000000001757         db  0x00 ; '.'
0000000000001758         db  0x07 ; '.'
0000000000001759         db  0x00 ; '.'
000000000000175a         db  0x00 ; '.'
000000000000175b         db  0x00 ; '.'
000000000000175c         db  0x31 ; '1'
000000000000175d         db  0x00 ; '.'
000000000000175e         db  0x00 ; '.'
000000000000175f         db  0x00 ; '.'
0000000000001760         db  0x00 ; '.'
0000000000001761         db  0x00 ; '.'
0000000000001762         db  0x00 ; '.'
0000000000001763         db  0x00 ; '.'
0000000000001764         db  0x00 ; '.'
0000000000001765         db  0x00 ; '.'
0000000000001766         db  0x00 ; '.'
0000000000001767         db  0x00 ; '.'
0000000000001768         db  0xe0 ; '.'
0000000000001769         db  0xae ; '.'
000000000000176a         db  0x21 ; '!'
000000000000176b         db  0x00 ; '.'
000000000000176c         db  0x00 ; '.'
000000000000176d         db  0x00 ; '.'
000000000000176e         db  0x00 ; '.'
000000000000176f         db  0x00 ; '.'
0000000000001770         db  0x07 ; '.'
0000000000001771         db  0x00 ; '.'
0000000000001772         db  0x00 ; '.'
0000000000001773         db  0x00 ; '.'
0000000000001774         db  0x32 ; '2'
0000000000001775         db  0x00 ; '.'
0000000000001776         db  0x00 ; '.'
0000000000001777         db  0x00 ; '.'
0000000000001778         db  0x00 ; '.'
0000000000001779         db  0x00 ; '.'
000000000000177a         db  0x00 ; '.'
000000000000177b         db  0x00 ; '.'
000000000000177c         db  0x00 ; '.'
000000000000177d         db  0x00 ; '.'
000000000000177e         db  0x00 ; '.'
000000000000177f         db  0x00 ; '.'
0000000000001780         db  0xe8 ; '.'
0000000000001781         db  0xae ; '.'
0000000000001782         db  0x21 ; '!'
0000000000001783         db  0x00 ; '.'
0000000000001784         db  0x00 ; '.'
0000000000001785         db  0x00 ; '.'
0000000000001786         db  0x00 ; '.'
0000000000001787         db  0x00 ; '.'
0000000000001788         db  0x07 ; '.'
0000000000001789         db  0x00 ; '.'
000000000000178a         db  0x00 ; '.'
000000000000178b         db  0x00 ; '.'
000000000000178c         db  0x33 ; '3'
000000000000178d         db  0x00 ; '.'
000000000000178e         db  0x00 ; '.'
000000000000178f         db  0x00 ; '.'
0000000000001790         db  0x00 ; '.'
0000000000001791         db  0x00 ; '.'
0000000000001792         db  0x00 ; '.'
0000000000001793         db  0x00 ; '.'
0000000000001794         db  0x00 ; '.'
0000000000001795         db  0x00 ; '.'
0000000000001796         db  0x00 ; '.'
0000000000001797         db  0x00 ; '.'
0000000000001798         db  0xf0 ; '.'
0000000000001799         db  0xae ; '.'
000000000000179a         db  0x21 ; '!'
000000000000179b         db  0x00 ; '.'
000000000000179c         db  0x00 ; '.'
000000000000179d         db  0x00 ; '.'
000000000000179e         db  0x00 ; '.'
000000000000179f         db  0x00 ; '.'
00000000000017a0         db  0x07 ; '.'
00000000000017a1         db  0x00 ; '.'
00000000000017a2         db  0x00 ; '.'
00000000000017a3         db  0x00 ; '.'
00000000000017a4         db  0x34 ; '4'
00000000000017a5         db  0x00 ; '.'
00000000000017a6         db  0x00 ; '.'
00000000000017a7         db  0x00 ; '.'
00000000000017a8         db  0x00 ; '.'
00000000000017a9         db  0x00 ; '.'
00000000000017aa         db  0x00 ; '.'
00000000000017ab         db  0x00 ; '.'
00000000000017ac         db  0x00 ; '.'
00000000000017ad         db  0x00 ; '.'
00000000000017ae         db  0x00 ; '.'
00000000000017af         db  0x00 ; '.'
00000000000017b0         db  0xf8 ; '.'
00000000000017b1         db  0xae ; '.'
00000000000017b2         db  0x21 ; '!'
00000000000017b3         db  0x00 ; '.'
00000000000017b4         db  0x00 ; '.'
00000000000017b5         db  0x00 ; '.'
00000000000017b6         db  0x00 ; '.'
00000000000017b7         db  0x00 ; '.'
00000000000017b8         db  0x07 ; '.'
00000000000017b9         db  0x00 ; '.'
00000000000017ba         db  0x00 ; '.'
00000000000017bb         db  0x00 ; '.'
00000000000017bc         db  0x35 ; '5'
00000000000017bd         db  0x00 ; '.'
00000000000017be         db  0x00 ; '.'
00000000000017bf         db  0x00 ; '.'
00000000000017c0         db  0x00 ; '.'
00000000000017c1         db  0x00 ; '.'
00000000000017c2         db  0x00 ; '.'
00000000000017c3         db  0x00 ; '.'
00000000000017c4         db  0x00 ; '.'
00000000000017c5         db  0x00 ; '.'
00000000000017c6         db  0x00 ; '.'
00000000000017c7         db  0x00 ; '.'
00000000000017c8         db  0x00 ; '.'
00000000000017c9         db  0xaf ; '.'
00000000000017ca         db  0x21 ; '!'
00000000000017cb         db  0x00 ; '.'
00000000000017cc         db  0x00 ; '.'
00000000000017cd         db  0x00 ; '.'
00000000000017ce         db  0x00 ; '.'
00000000000017cf         db  0x00 ; '.'
00000000000017d0         db  0x07 ; '.'
00000000000017d1         db  0x00 ; '.'
00000000000017d2         db  0x00 ; '.'
00000000000017d3         db  0x00 ; '.'
00000000000017d4         db  0x36 ; '6'
00000000000017d5         db  0x00 ; '.'
00000000000017d6         db  0x00 ; '.'
00000000000017d7         db  0x00 ; '.'
00000000000017d8         db  0x00 ; '.'
00000000000017d9         db  0x00 ; '.'
00000000000017da         db  0x00 ; '.'
00000000000017db         db  0x00 ; '.'
00000000000017dc         db  0x00 ; '.'
00000000000017dd         db  0x00 ; '.'
00000000000017de         db  0x00 ; '.'
00000000000017df         db  0x00 ; '.'
00000000000017e0         db  0x08 ; '.'
00000000000017e1         db  0xaf ; '.'
00000000000017e2         db  0x21 ; '!'
00000000000017e3         db  0x00 ; '.'
00000000000017e4         db  0x00 ; '.'
00000000000017e5         db  0x00 ; '.'
00000000000017e6         db  0x00 ; '.'
00000000000017e7         db  0x00 ; '.'
00000000000017e8         db  0x07 ; '.'
00000000000017e9         db  0x00 ; '.'
00000000000017ea         db  0x00 ; '.'
00000000000017eb         db  0x00 ; '.'
00000000000017ec         db  0x37 ; '7'
00000000000017ed         db  0x00 ; '.'
00000000000017ee         db  0x00 ; '.'
00000000000017ef         db  0x00 ; '.'
00000000000017f0         db  0x00 ; '.'
00000000000017f1         db  0x00 ; '.'
00000000000017f2         db  0x00 ; '.'
00000000000017f3         db  0x00 ; '.'
00000000000017f4         db  0x00 ; '.'
00000000000017f5         db  0x00 ; '.'
00000000000017f6         db  0x00 ; '.'
00000000000017f7         db  0x00 ; '.'
00000000000017f8         db  0x10 ; '.'
00000000000017f9         db  0xaf ; '.'
00000000000017fa         db  0x21 ; '!'
00000000000017fb         db  0x00 ; '.'
00000000000017fc         db  0x00 ; '.'
00000000000017fd         db  0x00 ; '.'
00000000000017fe         db  0x00 ; '.'
00000000000017ff         db  0x00 ; '.'
0000000000001800         db  0x07 ; '.'
0000000000001801         db  0x00 ; '.'
0000000000001802         db  0x00 ; '.'
0000000000001803         db  0x00 ; '.'
0000000000001804         db  0x38 ; '8'
0000000000001805         db  0x00 ; '.'
0000000000001806         db  0x00 ; '.'
0000000000001807         db  0x00 ; '.'
0000000000001808         db  0x00 ; '.'
0000000000001809         db  0x00 ; '.'
000000000000180a         db  0x00 ; '.'
000000000000180b         db  0x00 ; '.'
000000000000180c         db  0x00 ; '.'
000000000000180d         db  0x00 ; '.'
000000000000180e         db  0x00 ; '.'
000000000000180f         db  0x00 ; '.'
0000000000001810         db  0x18 ; '.'
0000000000001811         db  0xaf ; '.'
0000000000001812         db  0x21 ; '!'
0000000000001813         db  0x00 ; '.'
0000000000001814         db  0x00 ; '.'
0000000000001815         db  0x00 ; '.'
0000000000001816         db  0x00 ; '.'
0000000000001817         db  0x00 ; '.'
0000000000001818         db  0x07 ; '.'
0000000000001819         db  0x00 ; '.'
000000000000181a         db  0x00 ; '.'
000000000000181b         db  0x00 ; '.'
000000000000181c         db  0x39 ; '9'
000000000000181d         db  0x00 ; '.'
000000000000181e         db  0x00 ; '.'
000000000000181f         db  0x00 ; '.'
0000000000001820         db  0x00 ; '.'
0000000000001821         db  0x00 ; '.'
0000000000001822         db  0x00 ; '.'
0000000000001823         db  0x00 ; '.'
0000000000001824         db  0x00 ; '.'
0000000000001825         db  0x00 ; '.'
0000000000001826         db  0x00 ; '.'
0000000000001827         db  0x00 ; '.'
0000000000001828         db  0x20 ; ' '
0000000000001829         db  0xaf ; '.'
000000000000182a         db  0x21 ; '!'
000000000000182b         db  0x00 ; '.'
000000000000182c         db  0x00 ; '.'
000000000000182d         db  0x00 ; '.'
000000000000182e         db  0x00 ; '.'
000000000000182f         db  0x00 ; '.'
0000000000001830         db  0x07 ; '.'
0000000000001831         db  0x00 ; '.'
0000000000001832         db  0x00 ; '.'
0000000000001833         db  0x00 ; '.'
0000000000001834         db  0x3a ; ':'
0000000000001835         db  0x00 ; '.'
0000000000001836         db  0x00 ; '.'
0000000000001837         db  0x00 ; '.'
0000000000001838         db  0x00 ; '.'
0000000000001839         db  0x00 ; '.'
000000000000183a         db  0x00 ; '.'
000000000000183b         db  0x00 ; '.'
000000000000183c         db  0x00 ; '.'
000000000000183d         db  0x00 ; '.'
000000000000183e         db  0x00 ; '.'
000000000000183f         db  0x00 ; '.'
0000000000001840         db  0x28 ; '('
0000000000001841         db  0xaf ; '.'
0000000000001842         db  0x21 ; '!'
0000000000001843         db  0x00 ; '.'
0000000000001844         db  0x00 ; '.'
0000000000001845         db  0x00 ; '.'
0000000000001846         db  0x00 ; '.'
0000000000001847         db  0x00 ; '.'
0000000000001848         db  0x07 ; '.'
0000000000001849         db  0x00 ; '.'
000000000000184a         db  0x00 ; '.'
000000000000184b         db  0x00 ; '.'
000000000000184c         db  0x3b ; ';'
000000000000184d         db  0x00 ; '.'
000000000000184e         db  0x00 ; '.'
000000000000184f         db  0x00 ; '.'
0000000000001850         db  0x00 ; '.'
0000000000001851         db  0x00 ; '.'
0000000000001852         db  0x00 ; '.'
0000000000001853         db  0x00 ; '.'
0000000000001854         db  0x00 ; '.'
0000000000001855         db  0x00 ; '.'
0000000000001856         db  0x00 ; '.'
0000000000001857         db  0x00 ; '.'
0000000000001858         db  0x30 ; '0'
0000000000001859         db  0xaf ; '.'
000000000000185a         db  0x21 ; '!'
000000000000185b         db  0x00 ; '.'
000000000000185c         db  0x00 ; '.'
000000000000185d         db  0x00 ; '.'
000000000000185e         db  0x00 ; '.'
000000000000185f         db  0x00 ; '.'
0000000000001860         db  0x07 ; '.'
0000000000001861         db  0x00 ; '.'
0000000000001862         db  0x00 ; '.'
0000000000001863         db  0x00 ; '.'
0000000000001864         db  0x3c ; '<'
0000000000001865         db  0x00 ; '.'
0000000000001866         db  0x00 ; '.'
0000000000001867         db  0x00 ; '.'
0000000000001868         db  0x00 ; '.'
0000000000001869         db  0x00 ; '.'
000000000000186a         db  0x00 ; '.'
000000000000186b         db  0x00 ; '.'
000000000000186c         db  0x00 ; '.'
000000000000186d         db  0x00 ; '.'
000000000000186e         db  0x00 ; '.'
000000000000186f         db  0x00 ; '.'
0000000000001870         db  0x38 ; '8'
0000000000001871         db  0xaf ; '.'
0000000000001872         db  0x21 ; '!'
0000000000001873         db  0x00 ; '.'
0000000000001874         db  0x00 ; '.'
0000000000001875         db  0x00 ; '.'
0000000000001876         db  0x00 ; '.'
0000000000001877         db  0x00 ; '.'
0000000000001878         db  0x07 ; '.'
0000000000001879         db  0x00 ; '.'
000000000000187a         db  0x00 ; '.'
000000000000187b         db  0x00 ; '.'
000000000000187c         db  0x3d ; '='
000000000000187d         db  0x00 ; '.'
000000000000187e         db  0x00 ; '.'
000000000000187f         db  0x00 ; '.'
0000000000001880         db  0x00 ; '.'
0000000000001881         db  0x00 ; '.'
0000000000001882         db  0x00 ; '.'
0000000000001883         db  0x00 ; '.'
0000000000001884         db  0x00 ; '.'
0000000000001885         db  0x00 ; '.'
0000000000001886         db  0x00 ; '.'
0000000000001887         db  0x00 ; '.'
0000000000001888         db  0x40 ; '@'
0000000000001889         db  0xaf ; '.'
000000000000188a         db  0x21 ; '!'
000000000000188b         db  0x00 ; '.'
000000000000188c         db  0x00 ; '.'
000000000000188d         db  0x00 ; '.'
000000000000188e         db  0x00 ; '.'
000000000000188f         db  0x00 ; '.'
0000000000001890         db  0x07 ; '.'
0000000000001891         db  0x00 ; '.'
0000000000001892         db  0x00 ; '.'
0000000000001893         db  0x00 ; '.'
0000000000001894         db  0x3f ; '?'
0000000000001895         db  0x00 ; '.'
0000000000001896         db  0x00 ; '.'
0000000000001897         db  0x00 ; '.'
0000000000001898         db  0x00 ; '.'
0000000000001899         db  0x00 ; '.'
000000000000189a         db  0x00 ; '.'
000000000000189b         db  0x00 ; '.'
000000000000189c         db  0x00 ; '.'
000000000000189d         db  0x00 ; '.'
000000000000189e         db  0x00 ; '.'
000000000000189f         db  0x00 ; '.'
00000000000018a0         db  0x48 ; 'H'
00000000000018a1         db  0xaf ; '.'
00000000000018a2         db  0x21 ; '!'
00000000000018a3         db  0x00 ; '.'
00000000000018a4         db  0x00 ; '.'
00000000000018a5         db  0x00 ; '.'
00000000000018a6         db  0x00 ; '.'
00000000000018a7         db  0x00 ; '.'
00000000000018a8         db  0x07 ; '.'
00000000000018a9         db  0x00 ; '.'
00000000000018aa         db  0x00 ; '.'
00000000000018ab         db  0x00 ; '.'
00000000000018ac         db  0x40 ; '@'
00000000000018ad         db  0x00 ; '.'
00000000000018ae         db  0x00 ; '.'
00000000000018af         db  0x00 ; '.'
00000000000018b0         db  0x00 ; '.'
00000000000018b1         db  0x00 ; '.'
00000000000018b2         db  0x00 ; '.'
00000000000018b3         db  0x00 ; '.'
00000000000018b4         db  0x00 ; '.'
00000000000018b5         db  0x00 ; '.'
00000000000018b6         db  0x00 ; '.'
00000000000018b7         db  0x00 ; '.'
00000000000018b8         db  0x50 ; 'P'
00000000000018b9         db  0xaf ; '.'
00000000000018ba         db  0x21 ; '!'
00000000000018bb         db  0x00 ; '.'
00000000000018bc         db  0x00 ; '.'
00000000000018bd         db  0x00 ; '.'
00000000000018be         db  0x00 ; '.'
00000000000018bf         db  0x00 ; '.'
00000000000018c0         db  0x07 ; '.'
00000000000018c1         db  0x00 ; '.'
00000000000018c2         db  0x00 ; '.'
00000000000018c3         db  0x00 ; '.'
00000000000018c4         db  0x41 ; 'A'
00000000000018c5         db  0x00 ; '.'
00000000000018c6         db  0x00 ; '.'
00000000000018c7         db  0x00 ; '.'
00000000000018c8         db  0x00 ; '.'
00000000000018c9         db  0x00 ; '.'
00000000000018ca         db  0x00 ; '.'
00000000000018cb         db  0x00 ; '.'
00000000000018cc         db  0x00 ; '.'
00000000000018cd         db  0x00 ; '.'
00000000000018ce         db  0x00 ; '.'
00000000000018cf         db  0x00 ; '.'
00000000000018d0         db  0x58 ; 'X'
00000000000018d1         db  0xaf ; '.'
00000000000018d2         db  0x21 ; '!'
00000000000018d3         db  0x00 ; '.'
00000000000018d4         db  0x00 ; '.'
00000000000018d5         db  0x00 ; '.'
00000000000018d6         db  0x00 ; '.'
00000000000018d7         db  0x00 ; '.'
00000000000018d8         db  0x07 ; '.'
00000000000018d9         db  0x00 ; '.'
00000000000018da         db  0x00 ; '.'
00000000000018db         db  0x00 ; '.'
00000000000018dc         db  0x42 ; 'B'
00000000000018dd         db  0x00 ; '.'
00000000000018de         db  0x00 ; '.'
00000000000018df         db  0x00 ; '.'
00000000000018e0         db  0x00 ; '.'
00000000000018e1         db  0x00 ; '.'
00000000000018e2         db  0x00 ; '.'
00000000000018e3         db  0x00 ; '.'
00000000000018e4         db  0x00 ; '.'
00000000000018e5         db  0x00 ; '.'
00000000000018e6         db  0x00 ; '.'
00000000000018e7         db  0x00 ; '.'
00000000000018e8         db  0x60 ; '`'
00000000000018e9         db  0xaf ; '.'
00000000000018ea         db  0x21 ; '!'
00000000000018eb         db  0x00 ; '.'
00000000000018ec         db  0x00 ; '.'
00000000000018ed         db  0x00 ; '.'
00000000000018ee         db  0x00 ; '.'
00000000000018ef         db  0x00 ; '.'
00000000000018f0         db  0x07 ; '.'
00000000000018f1         db  0x00 ; '.'
00000000000018f2         db  0x00 ; '.'
00000000000018f3         db  0x00 ; '.'
00000000000018f4         db  0x43 ; 'C'
00000000000018f5         db  0x00 ; '.'
00000000000018f6         db  0x00 ; '.'
00000000000018f7         db  0x00 ; '.'
00000000000018f8         db  0x00 ; '.'
00000000000018f9         db  0x00 ; '.'
00000000000018fa         db  0x00 ; '.'
00000000000018fb         db  0x00 ; '.'
00000000000018fc         db  0x00 ; '.'
00000000000018fd         db  0x00 ; '.'
00000000000018fe         db  0x00 ; '.'
00000000000018ff         db  0x00 ; '.'
0000000000001900         db  0x68 ; 'h'
0000000000001901         db  0xaf ; '.'
0000000000001902         db  0x21 ; '!'
0000000000001903         db  0x00 ; '.'
0000000000001904         db  0x00 ; '.'
0000000000001905         db  0x00 ; '.'
0000000000001906         db  0x00 ; '.'
0000000000001907         db  0x00 ; '.'
0000000000001908         db  0x07 ; '.'
0000000000001909         db  0x00 ; '.'
000000000000190a         db  0x00 ; '.'
000000000000190b         db  0x00 ; '.'
000000000000190c         db  0x44 ; 'D'
000000000000190d         db  0x00 ; '.'
000000000000190e         db  0x00 ; '.'
000000000000190f         db  0x00 ; '.'
0000000000001910         db  0x00 ; '.'
0000000000001911         db  0x00 ; '.'
0000000000001912         db  0x00 ; '.'
0000000000001913         db  0x00 ; '.'
0000000000001914         db  0x00 ; '.'
0000000000001915         db  0x00 ; '.'
0000000000001916         db  0x00 ; '.'
0000000000001917         db  0x00 ; '.'
0000000000001918         db  0x70 ; 'p'
0000000000001919         db  0xaf ; '.'
000000000000191a         db  0x21 ; '!'
000000000000191b         db  0x00 ; '.'
000000000000191c         db  0x00 ; '.'
000000000000191d         db  0x00 ; '.'
000000000000191e         db  0x00 ; '.'
000000000000191f         db  0x00 ; '.'
0000000000001920         db  0x07 ; '.'
0000000000001921         db  0x00 ; '.'
0000000000001922         db  0x00 ; '.'
0000000000001923         db  0x00 ; '.'
0000000000001924         db  0x45 ; 'E'
0000000000001925         db  0x00 ; '.'
0000000000001926         db  0x00 ; '.'
0000000000001927         db  0x00 ; '.'
0000000000001928         db  0x00 ; '.'
0000000000001929         db  0x00 ; '.'
000000000000192a         db  0x00 ; '.'
000000000000192b         db  0x00 ; '.'
000000000000192c         db  0x00 ; '.'
000000000000192d         db  0x00 ; '.'
000000000000192e         db  0x00 ; '.'
000000000000192f         db  0x00 ; '.'
0000000000001930         db  0x78 ; 'x'
0000000000001931         db  0xaf ; '.'
0000000000001932         db  0x21 ; '!'
0000000000001933         db  0x00 ; '.'
0000000000001934         db  0x00 ; '.'
0000000000001935         db  0x00 ; '.'
0000000000001936         db  0x00 ; '.'
0000000000001937         db  0x00 ; '.'
0000000000001938         db  0x07 ; '.'
0000000000001939         db  0x00 ; '.'
000000000000193a         db  0x00 ; '.'
000000000000193b         db  0x00 ; '.'
000000000000193c         db  0x47 ; 'G'
000000000000193d         db  0x00 ; '.'
000000000000193e         db  0x00 ; '.'
000000000000193f         db  0x00 ; '.'
0000000000001940         db  0x00 ; '.'
0000000000001941         db  0x00 ; '.'
0000000000001942         db  0x00 ; '.'
0000000000001943         db  0x00 ; '.'
0000000000001944         db  0x00 ; '.'
0000000000001945         db  0x00 ; '.'
0000000000001946         db  0x00 ; '.'
0000000000001947         db  0x00 ; '.'
0000000000001948         db  0x80 ; '.'
0000000000001949         db  0xaf ; '.'
000000000000194a         db  0x21 ; '!'
000000000000194b         db  0x00 ; '.'
000000000000194c         db  0x00 ; '.'
000000000000194d         db  0x00 ; '.'
000000000000194e         db  0x00 ; '.'
000000000000194f         db  0x00 ; '.'
0000000000001950         db  0x07 ; '.'
0000000000001951         db  0x00 ; '.'
0000000000001952         db  0x00 ; '.'
0000000000001953         db  0x00 ; '.'
0000000000001954         db  0x48 ; 'H'
0000000000001955         db  0x00 ; '.'
0000000000001956         db  0x00 ; '.'
0000000000001957         db  0x00 ; '.'
0000000000001958         db  0x00 ; '.'
0000000000001959         db  0x00 ; '.'
000000000000195a         db  0x00 ; '.'
000000000000195b         db  0x00 ; '.'
000000000000195c         db  0x00 ; '.'
000000000000195d         db  0x00 ; '.'
000000000000195e         db  0x00 ; '.'
000000000000195f         db  0x00 ; '.'
0000000000001960         db  0x88 ; '.'
0000000000001961         db  0xaf ; '.'
0000000000001962         db  0x21 ; '!'
0000000000001963         db  0x00 ; '.'
0000000000001964         db  0x00 ; '.'
0000000000001965         db  0x00 ; '.'
0000000000001966         db  0x00 ; '.'
0000000000001967         db  0x00 ; '.'
0000000000001968         db  0x07 ; '.'
0000000000001969         db  0x00 ; '.'
000000000000196a         db  0x00 ; '.'
000000000000196b         db  0x00 ; '.'
000000000000196c         db  0x4a ; 'J'
000000000000196d         db  0x00 ; '.'
000000000000196e         db  0x00 ; '.'
000000000000196f         db  0x00 ; '.'
0000000000001970         db  0x00 ; '.'
0000000000001971         db  0x00 ; '.'
0000000000001972         db  0x00 ; '.'
0000000000001973         db  0x00 ; '.'
0000000000001974         db  0x00 ; '.'
0000000000001975         db  0x00 ; '.'
0000000000001976         db  0x00 ; '.'
0000000000001977         db  0x00 ; '.'
0000000000001978         db  0x90 ; '.'
0000000000001979         db  0xaf ; '.'
000000000000197a         db  0x21 ; '!'
000000000000197b         db  0x00 ; '.'
000000000000197c         db  0x00 ; '.'
000000000000197d         db  0x00 ; '.'
000000000000197e         db  0x00 ; '.'
000000000000197f         db  0x00 ; '.'
0000000000001980         db  0x07 ; '.'
0000000000001981         db  0x00 ; '.'
0000000000001982         db  0x00 ; '.'
0000000000001983         db  0x00 ; '.'
0000000000001984         db  0x4b ; 'K'
0000000000001985         db  0x00 ; '.'
0000000000001986         db  0x00 ; '.'
0000000000001987         db  0x00 ; '.'
0000000000001988         db  0x00 ; '.'
0000000000001989         db  0x00 ; '.'
000000000000198a         db  0x00 ; '.'
000000000000198b         db  0x00 ; '.'
000000000000198c         db  0x00 ; '.'
000000000000198d         db  0x00 ; '.'
000000000000198e         db  0x00 ; '.'
000000000000198f         db  0x00 ; '.'


        ; Section .init
        ; Range: [0x1990; 0x19a7[ (23 bytes)
        ; File offset : [6544; 6567[ (23 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _init:
0000000000001990         sub        rsp, 0x8                                    ; CODE XREF=__libc_csu_init+44
0000000000001994         mov        rax, qword [qword_21afc0]                   ; qword_21afc0
000000000000199b         test       rax, rax
000000000000199e         je         loc_19a2

00000000000019a0         call       rax

                     loc_19a2:
00000000000019a2         add        rsp, 0x8                                    ; CODE XREF=_init+14
00000000000019a6         ret
                        ; endp
00000000000019a7         db  0x00 ; '.'
00000000000019a8         db  0x00 ; '.'
00000000000019a9         db  0x00 ; '.'
00000000000019aa         db  0x00 ; '.'
00000000000019ab         db  0x00 ; '.'
00000000000019ac         db  0x00 ; '.'
00000000000019ad         db  0x00 ; '.'
00000000000019ae         db  0x00 ; '.'
00000000000019af         db  0x00 ; '.'


        ; Section .plt
        ; Range: [0x19b0; 0x1dd0[ (1056 bytes)
        ; File offset : [6576; 7632[ (1056 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR


                     loc_19b0:
00000000000019b0         push       qword [qword_21ad80]                        ; Begin of unwind block (FDE at 0x1792c), qword_21ad80, CODE XREF=sub_19c6+5
00000000000019b6         jmp        qword [qword_21ad80+8]                      ; 0x21ad88
                        ; endp
00000000000019bc         nop        dword [rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_toupper_loc:        // __ctype_toupper_loc
00000000000019c0         jmp        qword [__ctype_toupper_loc@GOT]             ; __ctype_toupper_loc, __ctype_toupper_loc@GOT, CODE XREF=build_upper_buffer+29, build_wcs_upper_buffer+808
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_19c6:
00000000000019c6         push       0x0
00000000000019cb         jmp        loc_19b0


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_free:        // free
00000000000019d0         jmp        qword [free@GOT]                            ; free, free@GOT, CODE XREF=freev+22, freev+36, freev+45, toarith+116, docolon+288, docolon+298, eval6+690, quotearg_n_options+277, quotearg_free+55, quotearg_free+82, quotearg_free+120
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_19d6:
00000000000019d6         push       0x1
00000000000019db         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_abort:        // abort
00000000000019e0         jmp        qword [abort@GOT]                           ; abort, abort@GOT, CODE XREF=main+341, null+98, toarith+139, tostring+72, set_program_name+154, sub_5050+2799, quotearg_n_options+417, set_custom_quoting+43, quotearg_n_style+132, quotearg_n_style_mem+128, quotearg_n_style_colon+132
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_19e6:
00000000000019e6         push       0x2
00000000000019eb         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___errno_location:        // __errno_location
00000000000019f0         jmp        qword [__errno_location@GOT]                ; __errno_location, __errno_location@GOT, CODE XREF=docolon+1178, eval2+223, close_stdout+22, quotearg_n_options+28, clone_quoting_options+7, quotearg_buffer+45, quotearg_alloc_mem+42, close_stream+60, close_stream+104, rpl_fclose+40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_19f6:
00000000000019f6         push       0x3
00000000000019fb         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strncmp:        // strncmp
0000000000001a00         jmp        qword [strncmp@GOT]                         ; strncmp, strncmp@GOT, CODE XREF=usage+812, usage+1065
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a06:
0000000000001a06         push       0x4
0000000000001a0b         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j__exit:        // _exit
0000000000001a10         jmp        qword [_exit@GOT]                           ; _exit, _exit@GOT, CODE XREF=close_stdout+136
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a16:
0000000000001a16         push       0x5
0000000000001a1b         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___fpending:        // __fpending
0000000000001a20         jmp        qword [__fpending@GOT]                      ; __fpending, __fpending@GOT, CODE XREF=close_stream+7
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a26:
0000000000001a26         push       0x6
0000000000001a2b         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_puts:        // puts
0000000000001a30         jmp        qword [puts@GOT]                            ; puts, puts@GOT, CODE XREF=main+255
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a36:
0000000000001a36         push       0x7
0000000000001a3b         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_iswcntrl:        // iswcntrl
0000000000001a40         jmp        qword [iswcntrl@GOT]                        ; iswcntrl, iswcntrl@GOT, CODE XREF=mb_width_aux+18
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a46:
0000000000001a46         push       0x8
0000000000001a4b         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_textdomain:        // textdomain
0000000000001a50         jmp        qword [textdomain@GOT]                      ; textdomain, textdomain@GOT, CODE XREF=main+62
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a56:
0000000000001a56         push       0x9
0000000000001a5b         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_iswctype:        // iswctype
0000000000001a60         jmp        qword [iswctype@GOT]                        ; iswctype, iswctype@GOT, CODE XREF=check_node_accept_bytes.isra.31+217
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a66:
0000000000001a66         push       0xa
0000000000001a6b         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fclose:        // fclose
0000000000001a70         jmp        qword [fclose@GOT]                          ; fclose, fclose@GOT, CODE XREF=rpl_fclose+54, rpl_fclose+107
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a76:
0000000000001a76         push       0xb
0000000000001a7b         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_bindtextdomain:        // bindtextdomain
0000000000001a80         jmp        qword [bindtextdomain@GOT]                  ; bindtextdomain, bindtextdomain@GOT, CODE XREF=main+50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a86:
0000000000001a86         push       0xc
0000000000001a8b         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_dcgettext:        // dcgettext
0000000000001a90         jmp        qword [dcgettext@GOT]                       ; dcgettext, dcgettext@GOT, CODE XREF=main+375, main+414, require_more_args+49, usage+56, usage+102, usage+181, usage+218, usage+255, usage+292, usage+329, usage+366
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a96:
0000000000001a96         push       0xd
0000000000001a9b         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_get_mb_cur_max:        // __ctype_get_mb_cur_max
0000000000001aa0         jmp        qword [__ctype_get_mb_cur_max@GOT]          ; __ctype_get_mb_cur_max, __ctype_get_mb_cur_max@GOT, CODE XREF=docolon+368, docolon+707, eval6+604, eval6+997, eval6+1228, eval6+1597, eval6+2024, eval6+2347, mbschr+33, mbschr+244, mbslen+31
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1aa6:
0000000000001aa6         push       0xe
0000000000001aab         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strlen:        // strlen
0000000000001ab0         jmp        qword [strlen@GOT]                          ; strlen, strlen@GOT, CODE XREF=docolon+145, docolon+185, docolon+987, eval6+595, eval6+1880, eval6+2621, eval6+2770, mbschr+504, mbslen+45, mbslen+421, quotearg_buffer_restyled+343
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ab6:
0000000000001ab6         push       0xf
0000000000001abb         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___gmpz_get_str:        // __gmpz_get_str
0000000000001ac0         jmp        qword [__gmpz_get_str@GOT]                  ; __gmpz_get_str, __gmpz_get_str@GOT, CODE XREF=tostring+41
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ac6:
0000000000001ac6         push       0x10
0000000000001acb         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___stack_chk_fail:        // __stack_chk_fail
0000000000001ad0         jmp        qword [__stack_chk_fail@GOT]                ; __stack_chk_fail, __stack_chk_fail@GOT, CODE XREF=docolon+1058, eval6+2848, parse_long_options+314, parse_gnu_standard_options_only+310, mbschr+579, mbslen+489, sub_5050+2739, quotearg_n_style+137, quotearg_n_style_mem+133, quotearg_char_mem+147, quotearg_n_style_colon+137
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ad6:
0000000000001ad6         push       0x11
0000000000001adb         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_getopt_long:        // getopt_long
0000000000001ae0         jmp        qword [getopt_long@GOT]                     ; getopt_long, getopt_long@GOT, CODE XREF=parse_long_options+198, parse_gnu_standard_options_only+154
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ae6:
0000000000001ae6         push       0x12
0000000000001aeb         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_mbrtowc:        // mbrtowc
0000000000001af0         jmp        qword [mbrtowc@GOT]                         ; mbrtowc, mbrtowc@GOT, CODE XREF=rpl_mbrtowc+50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1af6:
0000000000001af6         push       0x13
0000000000001afb         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strchr:        // strchr
0000000000001b00         jmp        qword [strchr@GOT]                          ; strchr, strchr@GOT, CODE XREF=mbschr+88
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b06:
0000000000001b06         push       0x14
0000000000001b0b         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___overflow:        // __overflow
0000000000001b10         jmp        qword [__overflow@GOT]                      ; __overflow, __overflow@GOT, CODE XREF=main+334, usage+989
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b16:
0000000000001b16         push       0x15
0000000000001b1b         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strrchr:        // strrchr
0000000000001b20         jmp        qword [strrchr@GOT]                         ; strrchr, strrchr@GOT, CODE XREF=set_program_name+14
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b26:
0000000000001b26         push       0x16
0000000000001b2b         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_lseek:        // lseek
0000000000001b30         jmp        qword [lseek@GOT]                           ; lseek, lseek@GOT, CODE XREF=rpl_fclose+89, j_j_fseeko+49
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b36:
0000000000001b36         push       0x17
0000000000001b3b         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___gmpz_out_str:        // __gmpz_out_str
0000000000001b40         jmp        qword [__gmpz_out_str@GOT]                  ; __gmpz_out_str, __gmpz_out_str@GOT, CODE XREF=main+294
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b46:
0000000000001b46         push       0x18
0000000000001b4b         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___assert_fail:        // __assert_fail
0000000000001b50         jmp        qword [__assert_fail@GOT]                   ; __assert_fail, __assert_fail@GOT, CODE XREF=mbuiter_multi_next.part.2+30, docolon+1089, docolon+1173, eval6+2879, eval6+2915, mbschr+610, mbschr+641, mbschr+672, mbslen+484, mbslen+520, mbslen+551
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b56:
0000000000001b56         push       0x19
0000000000001b5b         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memset:        // memset
0000000000001b60         jmp        qword [memset@GOT]                          ; memset, memset@GOT, CODE XREF=quotearg_n_options+153, xzalloc+18, clean_state_log_if_needed+120, re_string_reconstruct+1128, re_string_reconstruct+1876, check_arrival+1782, get_subexp_sub.isra.32+344, sift_states_backward+744, re_search_internal+2450
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b66:
0000000000001b66         push       0x1a
0000000000001b6b         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strcspn:        // strcspn
0000000000001b70         jmp        qword [strcspn@GOT]                         ; strcspn, strcspn@GOT, CODE XREF=eval6+1014
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b76:
0000000000001b76         push       0x1b
0000000000001b7b         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memchr:        // memchr
0000000000001b80         jmp        qword [memchr@GOT]                          ; memchr, memchr@GOT, CODE XREF=strnlen1+17
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b86:
0000000000001b86         push       0x1c
0000000000001b8b         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memcmp:        // memcmp
0000000000001b90         jmp        qword [memcmp@GOT]                          ; memcmp, memcmp@GOT, CODE XREF=eval6+1820, quotearg_buffer_restyled+410, set_regs+1041, transit_state_bkref.isra.34+663
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b96:
0000000000001b96         push       0x1d
0000000000001b9b         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_wctype:        // wctype
0000000000001ba0         jmp        qword [wctype@GOT]                          ; wctype, wctype@GOT, CODE XREF=build_charclass.isra.29+103
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ba6:
0000000000001ba6         push       0x1e
0000000000001bab         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fputs_unlocked:        // fputs_unlocked
0000000000001bb0         jmp        qword [fputs_unlocked@GOT]                  ; fputs_unlocked, fputs_unlocked@GOT, CODE XREF=usage+192, usage+229, usage+266, usage+303, usage+340, usage+377, usage+414, usage+451, usage+488, usage+532, usage+974
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1bb6:
0000000000001bb6         push       0x1f
0000000000001bbb         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_calloc:        // calloc
0000000000001bc0         jmp        qword [calloc@GOT]                          ; calloc, calloc@GOT, CODE XREF=xcalloc+26, re_acquire_state_context+202, re_acquire_state+160, check_subexp_matching_top.isra.18+156, build_trtable+746, build_trtable+2611, build_trtable+2830, build_charclass_op+70, build_charclass_op+97, transit_state_bkref.isra.34+1726, transit_state_bkref.isra.34+1865
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1bc6:
0000000000001bc6         push       0x20
0000000000001bcb         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strcmp:        // strcmp
0000000000001bd0         jmp        qword [strcmp@GOT]                          ; strcmp, strcmp@GOT, CODE XREF=main+179, nextarg+21, build_charclass.isra.29+1480, build_charclass.isra.29+1620, build_charclass.isra.29+1758
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1bd6:
0000000000001bd6         push       0x21
0000000000001bdb         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memcpy:        // memcpy
0000000000001be0         jmp        qword [memcpy@GOT]                          ; memcpy, memcpy@GOT, CODE XREF=mb_copy+71, xmemdup+35, build_wcs_upper_buffer+348, build_wcs_upper_buffer+697, build_wcs_upper_buffer+796, build_wcs_upper_buffer+1071, build_wcs_upper_buffer+1340, re_node_set_merge+320, re_node_set_merge+357, re_node_set_merge+458, re_node_set_add_intersect+341
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1be6:
0000000000001be6         push       0x22
0000000000001beb         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fileno:        // fileno
0000000000001bf0         jmp        qword [fileno@GOT]                          ; fileno, fileno@GOT, CODE XREF=rpl_fclose+7, rpl_fclose+75, j_j_fseeko+36
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1bf6:
0000000000001bf6         push       0x23
0000000000001bfb         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_wcwidth:        // wcwidth
0000000000001c00         jmp        qword [wcwidth@GOT]                         ; wcwidth, wcwidth@GOT, CODE XREF=mb_width_aux+3
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c06:
0000000000001c06         push       0x24
0000000000001c0b         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_iswalnum:        // iswalnum
0000000000001c10         jmp        qword [iswalnum@GOT]                        ; iswalnum, iswalnum@GOT, CODE XREF=re_string_context_at+202, re_string_reconstruct+1790, peek_token+144, peek_token+440
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c16:
0000000000001c16         push       0x25
0000000000001c1b         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_malloc:        // malloc
0000000000001c20         jmp        qword [malloc@GOT]                          ; malloc, malloc@GOT, CODE XREF=xmalloc+4, re_node_set_insert+76, register_state+48, build_wcs_upper_buffer+1482, calc_eclosure_iter+87, check_arrival_expand_ecl+67, create_token_tree.isra.16+160, re_node_set_init_copy+38, re_node_set_init_union+74, re_acquire_state_context+629, expand_bkref_cache+632
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c26:
0000000000001c26         push       0x26
0000000000001c2b         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_wcrtomb:        // wcrtomb
0000000000001c30         jmp        qword [wcrtomb@GOT]                         ; wcrtomb, wcrtomb@GOT, CODE XREF=build_wcs_upper_buffer+313, build_wcs_upper_buffer+668, re_compile_fastmap_iter.isra.30+534, re_compile_fastmap_iter.isra.30+698, re_compile_fastmap_iter.isra.30+797
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c36:
0000000000001c36         push       0x27
0000000000001c3b         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fflush:        // fflush
0000000000001c40         jmp        qword [fflush@GOT]                          ; fflush, fflush@GOT, CODE XREF=rpl_fflush+30, rpl_fflush+59
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c46:
0000000000001c46         push       0x28
0000000000001c4b         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___gmpz_clear:        // __gmpz_clear
0000000000001c50         jmp        qword [__gmpz_clear@GOT]                    ; __gmpz_clear, __gmpz_clear@GOT, CODE XREF=freev+13, tostring+52
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c56:
0000000000001c56         push       0x29
0000000000001c5b         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_nl_langinfo:        // nl_langinfo
0000000000001c60         jmp        qword [nl_langinfo@GOT]                     ; nl_langinfo, nl_langinfo@GOT, CODE XREF=re_compile_internal+306, locale_charset+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c66:
0000000000001c66         push       0x2a
0000000000001c6b         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strcoll:        // strcoll
0000000000001c70         jmp        qword [strcoll@GOT]                         ; strcoll, strcoll@GOT, CODE XREF=eval2+242
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c76:
0000000000001c76         push       0x2b
0000000000001c7b         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___freading:        // __freading
0000000000001c80         jmp        qword [__freading@GOT]                      ; __freading, __freading@GOT, CODE XREF=rpl_fclose+19, rpl_fflush+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c86:
0000000000001c86         push       0x2c
0000000000001c8b         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_realloc:        // realloc
0000000000001c90         jmp        qword [realloc@GOT]                         ; realloc, realloc@GOT, CODE XREF=xrealloc+17, re_string_realloc_buffers+48, re_string_realloc_buffers+79, re_string_realloc_buffers+127, re_node_set_insert_last+74, re_node_set_insert+270, register_state+209, extend_buffers+95, re_dfa_add_node+247, re_dfa_add_node+278, re_dfa_add_node+302
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c96:
0000000000001c96         push       0x2d
0000000000001c9b         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_setlocale:        // setlocale
0000000000001ca0         jmp        qword [setlocale@GOT]                       ; setlocale, setlocale@GOT, CODE XREF=main+31, usage+787, usage+1040, hard_locale+6
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ca6:
0000000000001ca6         push       0x2e
0000000000001cab         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___printf_chk:        // __printf_chk
0000000000001cb0         jmp        qword [__printf_chk@GOT]                    ; __printf_chk, __printf_chk@GOT, CODE XREF=usage+123, usage+775, usage+864, usage+925, usage+1028, usage+1135, emit_bug_reporting_address+37, emit_bug_reporting_address+85
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1cb6:
0000000000001cb6         push       0x2f
0000000000001cbb         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___gmpz_init_set_ui:        // __gmpz_init_set_ui
0000000000001cc0         jmp        qword [__gmpz_init_set_ui@GOT]              ; __gmpz_init_set_ui, __gmpz_init_set_ui@GOT, CODE XREF=docolon+408, docolon+489, eval6+425, eval6+909, eval2+127, eval1+129, eval+134
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1cc6:
0000000000001cc6         push       0x30
0000000000001ccb         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_btowc:        // btowc
0000000000001cd0         jmp        qword [btowc@GOT]                           ; btowc, btowc@GOT, CODE XREF=sub_127b0+1827, sub_127b0+2551, re_compile_internal+1864
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1cd6:
0000000000001cd6         push       0x31
0000000000001cdb         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_mempcpy:        // mempcpy
0000000000001ce0         jmp        qword [mempcpy@GOT]                         ; mempcpy, mempcpy@GOT, CODE XREF=eval6+2290, eval6+2593
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ce6:
0000000000001ce6         push       0x32
0000000000001ceb         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memmove:        // memmove
0000000000001cf0         jmp        qword [memmove@GOT]                         ; memmove, memmove@GOT, CODE XREF=re_string_reconstruct+400, re_string_reconstruct+856, re_string_reconstruct+876, re_string_reconstruct+1179
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1cf6:
0000000000001cf6         push       0x33
0000000000001cfb         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_error:        // error
0000000000001d00         jmp        qword [error@GOT]                           ; error, error@GOT, CODE XREF=main+395, main+428, require_more_args+69, docolon+1053, docolon+1137, eval6+273, eval6+819, eval6+2973, eval4+284, eval4+320, eval3+211
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d06:
0000000000001d06         push       0x34
0000000000001d0b         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fseeko:        // fseeko
0000000000001d10         jmp        qword [fseeko@GOT]                          ; fseeko, fseeko@GOT, CODE XREF=j_j_fseeko
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d16:
0000000000001d16         push       0x35
0000000000001d1b         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_towlower:        // towlower
0000000000001d20         jmp        qword [towlower@GOT]                        ; towlower, towlower@GOT, CODE XREF=re_compile_fastmap_iter.isra.30+517, re_compile_fastmap_iter.isra.30+782
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d26:
0000000000001d26         push       0x36
0000000000001d2b         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_towupper:        // towupper
0000000000001d30         jmp        qword [towupper@GOT]                        ; towupper, towupper@GOT, CODE XREF=build_wcs_upper_buffer+268, build_wcs_upper_buffer+640
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d36:
0000000000001d36         push       0x37
0000000000001d3b         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___gmpz_init_set_str:        // __gmpz_init_set_str
0000000000001d40         jmp        qword [__gmpz_init_set_str@GOT]             ; __gmpz_init_set_str, __gmpz_init_set_str@GOT, CODE XREF=toarith+108
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d46:
0000000000001d46         push       0x38
0000000000001d4b         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___cxa_atexit:        // __cxa_atexit
0000000000001d50         jmp        qword [__cxa_atexit@GOT]                    ; __cxa_atexit, __cxa_atexit@GOT, CODE XREF=atexit+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d56:
0000000000001d56         push       0x39
0000000000001d5b         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_exit:        // exit
0000000000001d60         jmp        qword [exit@GOT]                            ; exit, exit@GOT, CODE XREF=usage+88, parse_long_options+290, parse_gnu_standard_options_only+242
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d66:
0000000000001d66         push       0x3a
0000000000001d6b         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fwrite:        // fwrite
0000000000001d70         jmp        qword [fwrite@GOT]                          ; fwrite, fwrite@GOT, CODE XREF=set_program_name+149
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d76:
0000000000001d76         push       0x3b
0000000000001d7b         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___fprintf_chk:        // __fprintf_chk
0000000000001d80         jmp        qword [__fprintf_chk@GOT]                   ; __fprintf_chk, __fprintf_chk@GOT, CODE XREF=usage+81, version_etc_arn+55, version_etc_arn+105, version_etc_arn+285, version_etc_arn+332, version_etc_arn+492, version_etc_arn+563, version_etc_arn+642, version_etc_arn+718, version_etc_arn+872
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d86:
0000000000001d86         push       0x3c
0000000000001d8b         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_mbsinit:        // mbsinit
0000000000001d90         jmp        qword [mbsinit@GOT]                         ; mbsinit, mbsinit@GOT, CODE XREF=docolon+839, docolon+877, eval6+1362, eval6+1725, eval6+1844, eval6+1939, eval6+2499, eval6+2538, mbschr+359, mbschr+427, mbslen+342
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d96:
0000000000001d96         push       0x3d
0000000000001d9b         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_iswprint:        // iswprint
0000000000001da0         jmp        qword [iswprint@GOT]                        ; iswprint, iswprint@GOT, CODE XREF=sub_5050+592
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1da6:
0000000000001da6         push       0x3e
0000000000001dab         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_tolower_loc:        // __ctype_tolower_loc
0000000000001db0         jmp        qword [__ctype_tolower_loc@GOT]             ; __ctype_tolower_loc, __ctype_tolower_loc@GOT, CODE XREF=re_compile_fastmap_iter.isra.30+287, re_compile_fastmap_iter.isra.30+729, re_compile_fastmap_iter.isra.30+976
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1db6:
0000000000001db6         push       0x3f
0000000000001dbb         jmp        0x19b0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_b_loc:        // __ctype_b_loc
0000000000001dc0         jmp        qword [__ctype_b_loc@GOT]                   ; __ctype_b_loc, __ctype_b_loc@GOT, CODE XREF=sub_4df0+51, build_charclass.isra.29+168, build_charclass.isra.29+248, build_charclass.isra.29+480, build_charclass.isra.29+554, build_charclass.isra.29+686, build_charclass.isra.29+819, build_charclass.isra.29+973, build_charclass.isra.29+1126, build_charclass.isra.29+1232, build_charclass.isra.29+1489
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1dc6:
0000000000001dc6         push       0x40
0000000000001dcb         jmp        0x19b0
                        ; endp


        ; Section .plt.got
        ; Range: [0x1dd0; 0x1dd8[ (8 bytes)
        ; File offset : [7632; 7640[ (8 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_qword_21afe0:        // qword_21afe0
0000000000001dd0         jmp        qword [qword_21afe0]                        ; qword, End of unwind block (FDE at 0x1792c), Begin of unwind block (FDE at 0x17954), qword_21afe0, CODE XREF=__do_global_dtors_aux+30
                        ; endp
0000000000001dd6         align      8
0000000000001dd8         db  0x00 ; '.'                                         ; End of unwind block (FDE at 0x17954)
0000000000001dd9         db  0x00 ; '.'
0000000000001dda         db  0x00 ; '.'
0000000000001ddb         db  0x00 ; '.'
0000000000001ddc         db  0x00 ; '.'
0000000000001ddd         db  0x00 ; '.'
0000000000001dde         db  0x00 ; '.'
0000000000001ddf         db  0x00 ; '.'


        ; Section .text
        ; Range: [0x1de0; 0x155be[ (79838 bytes)
        ; File offset : [7648; 87486[ (79838 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     mbuiter_multi_next.part.2:
0000000000001de0         lea        rcx, qword [__PRETTY_FUNCTION__.7929]       ; Begin of unwind block (FDE at 0x17a00), argument "__function" for method j___assert_fail, "mbuiter_multi_next", CODE XREF=docolon+1142, eval6+2884
0000000000001de7         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/mbuiter.h"
0000000000001dee         lea        rdi, qword [aItercurwc0]                    ; argument "__assertion" for method j___assert_fail, "iter->cur.wc == 0"
0000000000001df5         sub        rsp, 0x8
0000000000001df9         mov        edx, 0xb3                                   ; argument "__line" for method j___assert_fail
0000000000001dfe         call       j___assert_fail                             ; __assert_fail
                        ; endp
0000000000001e03         align      16                                          ; End of unwind block (FDE at 0x17a00)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     main:
0000000000001e10         push       rbp                                         ; Begin of unwind block (FDE at 0x17ccc), DATA XREF=_start+29
0000000000001e11         push       rbx
0000000000001e12         mov        ebp, edi
0000000000001e14         mov        rbx, rsi
0000000000001e17         sub        rsp, 0x8
0000000000001e1b         mov        rdi, qword [rsi]
0000000000001e1e         call       set_program_name                            ; set_program_name
0000000000001e23         lea        rsi, qword [aWrittenBySSAnd+27]             ; argument "__locale" for method j_setlocale, 0x16761
0000000000001e2a         mov        edi, 0x6                                    ; argument "__category" for method j_setlocale
0000000000001e2f         call       j_setlocale                                 ; setlocale
0000000000001e34         lea        rsi, qword [aUsrlocalsharel]                ; argument "__dirname" for method j_bindtextdomain, "/usr/local/share/locale"
0000000000001e3b         lea        rdi, qword [aCoreutils]                     ; argument "__domainname" for method j_bindtextdomain, "coreutils"
0000000000001e42         call       j_bindtextdomain                            ; bindtextdomain
0000000000001e47         lea        rdi, qword [aCoreutils]                     ; argument "__domainname" for method j_textdomain, "coreutils"
0000000000001e4e         call       j_textdomain                                ; textdomain
0000000000001e53         lea        rdi, qword [close_stdout]                   ; argument "__func" for method atexit, close_stdout
0000000000001e5a         mov        dword [exit_failure], 0x3                   ; exit_failure
0000000000001e64         call       atexit                                      ; atexit
0000000000001e69         lea        rax, qword [aPaulEggert]                    ; "Paul Eggert"
0000000000001e70         push       0x0
0000000000001e72         lea        r9, qword [usage]                           ; usage
0000000000001e79         lea        r8, qword [aUsrlocalsharel+24]              ; 0x160f8
0000000000001e80         lea        rcx, qword [aNsOnlineHelpSn+23]             ; 0x1600a
0000000000001e87         lea        rdx, qword [aItercurwc0+18]                 ; 0x15f8f
0000000000001e8e         push       rax
0000000000001e8f         lea        rax, qword [aJamesYoungman]                 ; "James Youngman"
0000000000001e96         mov        rsi, rbx
0000000000001e99         mov        edi, ebp
0000000000001e9b         push       rax
0000000000001e9c         lea        rax, qword [aMikeParker]                    ; "Mike Parker"
0000000000001ea3         push       rax
0000000000001ea4         xor        eax, eax
0000000000001ea6         call       parse_long_options                          ; parse_long_options
0000000000001eab         add        rsp, 0x20
0000000000001eaf         cmp        ebp, 0x1
0000000000001eb2         jbe        loc_1fa0

0000000000001eb8         mov        rdi, qword [rbx+8]                          ; argument "__s1" for method j_strcmp
0000000000001ebc         lea        rsi, qword [aMikeParker+12]                 ; argument "__s2" for method j_strcmp, 0x16124
0000000000001ec3         call       j_strcmp                                    ; strcmp
0000000000001ec8         test       eax, eax
0000000000001eca         jne        loc_1ed9

0000000000001ecc         cmp        ebp, 0x2
0000000000001ecf         je         loc_1fa0

0000000000001ed5         add        rbx, 0x8

                     loc_1ed9:
0000000000001ed9         add        rbx, 0x8                                    ; CODE XREF=main+186
0000000000001edd         mov        edi, 0x1                                    ; argument #1 for method eval
0000000000001ee2         mov        qword [args], rbx                           ; args
0000000000001ee9         call       eval                                        ; eval
0000000000001eee         mov        rbx, rax
0000000000001ef1         mov        rax, qword [args]                           ; args
0000000000001ef8         mov        rdx, qword [rax]
0000000000001efb         test       rdx, rdx
0000000000001efe         jne        loc_1f6a

0000000000001f00         mov        eax, dword [rbx]
0000000000001f02         test       eax, eax
0000000000001f04         je         loc_1f26

0000000000001f06         sub        eax, 0x1
0000000000001f09         jne        loc_1f65

0000000000001f0b         mov        rdi, qword [rbx+8]                          ; argument "__s" for method j_puts
0000000000001f0f         call       j_puts                                      ; puts

                     loc_1f14:
0000000000001f14         mov        rdi, rbx                                    ; CODE XREF=main+327, main+339
0000000000001f17         call       null                                        ; null
0000000000001f1c         add        rsp, 0x8
0000000000001f20         movzx      eax, al
0000000000001f23         pop        rbx
0000000000001f24         pop        rbp
0000000000001f25         ret
                        ; endp

                     loc_1f26:
0000000000001f26         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=main+244
0000000000001f2d         lea        rdx, qword [rbx+8]
0000000000001f31         mov        esi, 0xa
0000000000001f36         call       j___gmpz_out_str                            ; __gmpz_out_str
0000000000001f3b         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000001f42         mov        rax, qword [rdi+0x28]
0000000000001f46         cmp        rax, qword [rdi+0x30]
0000000000001f4a         jae        loc_1f59

0000000000001f4c         lea        rdx, qword [rax+1]
0000000000001f50         mov        qword [rdi+0x28], rdx
0000000000001f54         mov        byte [rax], 0xa
0000000000001f57         jmp        loc_1f14

                     loc_1f59:
0000000000001f59         mov        esi, 0xa                                    ; argument #2 for method j___overflow, CODE XREF=main+314
0000000000001f5e         call       j___overflow                                ; __overflow
0000000000001f63         jmp        loc_1f14

                     loc_1f65:
0000000000001f65         call       j_abort                                     ; abort, CODE XREF=main+249
                        ; endp

                     loc_1f6a:
0000000000001f6a         mov        esi, 0x8                                    ; CODE XREF=main+238
0000000000001f6f         xor        edi, edi
0000000000001f71         call       quotearg_n_style                            ; quotearg_n_style
0000000000001f76         lea        rsi, qword [aSyntaxErrorUne_15f58]          ; argument "msgid" for method j_dcgettext, "syntax error: unexpected argument %s"
0000000000001f7d         mov        rbx, rax
0000000000001f80         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000001f85         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000001f87         call       j_dcgettext                                 ; dcgettext
0000000000001f8c         mov        rcx, rbx
0000000000001f8f         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000001f92         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000001f94         mov        edi, 0x2                                    ; argument "__status" for method j_error
0000000000001f99         xor        eax, eax
0000000000001f9b         call       j_error                                     ; error

                     loc_1fa0:
0000000000001fa0         lea        rsi, qword [aMissingOperand]                ; argument "msgid" for method j_dcgettext, "missing operand", CODE XREF=main+162, main+191
0000000000001fa7         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000001fac         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000001fae         call       j_dcgettext                                 ; dcgettext
0000000000001fb3         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000001fb5         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000001fb8         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000001fba         xor        eax, eax
0000000000001fbc         call       j_error                                     ; error
0000000000001fc1         mov        edi, 0x2                                    ; argument #1 for method usage
0000000000001fc6         call       usage                                       ; usage
0000000000001fcb         nop        dword [rax+rax]                             ; End of unwind block (FDE at 0x17ccc)
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _start:
0000000000001fd0         xor        ebp, ebp                                    ; Begin of unwind block (FDE at 0x178fc)
0000000000001fd2         mov        r9, rdx
0000000000001fd5         pop        rsi
0000000000001fd6         mov        rdx, rsp
0000000000001fd9         and        rsp, 0xfffffffffffffff0
0000000000001fdd         push       rax
0000000000001fde         push       rsp
0000000000001fdf         lea        r8, qword [__libc_csu_fini]                 ; __libc_csu_fini
0000000000001fe6         lea        rcx, qword [__libc_csu_init]                ; __libc_csu_init
0000000000001fed         lea        rdi, qword [main]                           ; main
0000000000001ff4         call       qword [qword_21afb0+8]                      ; 0x21afb8
0000000000001ffa         hlt
                        ; endp
0000000000001ffb         align      8192                                        ; End of unwind block (FDE at 0x178fc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     deregister_tm_clones:
0000000000002000         lea        rdi, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5, CODE XREF=__do_global_dtors_aux+35, DATA XREF=peek_token+864, peek_token+896, peek_token+1429, peek_token+1452
0000000000002007         push       rbp
0000000000002008         lea        rax, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5
000000000000200f         cmp        rax, rdi
0000000000002012         mov        rbp, rsp
0000000000002015         je         loc_2030

0000000000002017         mov        rax, qword [qword_21afa0]                   ; qword_21afa0
000000000000201e         test       rax, rax
0000000000002021         je         loc_2030

0000000000002023         pop        rbp
0000000000002024         jmp        rax
                        ; endp
0000000000002026         align      16

                     loc_2030:
0000000000002030         pop        rbp                                         ; CODE XREF=deregister_tm_clones+21, deregister_tm_clones+33
0000000000002031         ret
                        ; endp
0000000000002032         align      64

                     register_tm_clones:
0000000000002040         lea        rdi, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5, CODE XREF=frame_dummy+5
0000000000002047         lea        rsi, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5
000000000000204e         push       rbp
000000000000204f         sub        rsi, rdi
0000000000002052         mov        rbp, rsp
0000000000002055         sar        rsi, 0x3
0000000000002059         mov        rax, rsi
000000000000205c         shr        rax, 0x3f
0000000000002060         add        rsi, rax
0000000000002063         sar        rsi, 0x1
0000000000002066         je         loc_2080

0000000000002068         mov        rax, qword [qword_21afd8]                   ; qword_21afd8
000000000000206f         test       rax, rax
0000000000002072         je         loc_2080

0000000000002074         pop        rbp
0000000000002075         jmp        rax
                        ; endp
0000000000002077         align      128

                     loc_2080:
0000000000002080         pop        rbp                                         ; CODE XREF=register_tm_clones+38, register_tm_clones+50
0000000000002081         ret
                        ; endp
0000000000002082         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __do_global_dtors_aux:
0000000000002090         cmp        byte [completed.7697], 0x0                  ; completed.7697, DATA XREF=__do_global_dtors_aux_fini_array_entry
0000000000002097         jne        loc_20c8

0000000000002099         cmp        qword [qword_21afe0], 0x0                   ; qword_21afe0
00000000000020a1         push       rbp
00000000000020a2         mov        rbp, rsp
00000000000020a5         je         loc_20b3

00000000000020a7         mov        rdi, qword [__dso_handle]                   ; __dso_handle
00000000000020ae         call       j_qword_21afe0                              ; qword_21afe0

                     loc_20b3:
00000000000020b3         call       deregister_tm_clones                        ; deregister_tm_clones, CODE XREF=__do_global_dtors_aux+21
00000000000020b8         mov        byte [completed.7697], 0x1                  ; completed.7697
00000000000020bf         pop        rbp
00000000000020c0         ret
                        ; endp
00000000000020c1         align      8

                     loc_20c8:
00000000000020c8         ret                                                    ; CODE XREF=__do_global_dtors_aux+7
                        ; endp
00000000000020ca         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     frame_dummy:
00000000000020d0         push       rbp                                         ; DATA XREF=__frame_dummy_init_array_entry
00000000000020d1         mov        rbp, rsp
00000000000020d4         pop        rbp
00000000000020d5         jmp        register_tm_clones                          ; register_tm_clones
00000000000020da         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     nextarg:
00000000000020e0         push       rbx                                         ; Begin of unwind block (FDE at 0x1796c), CODE XREF=eval6+45, eval6+69, eval6+89, eval6+109, eval6+132, eval6+157, eval6+205, eval6+775, eval5+59, eval4+44, eval4+160
00000000000020e1         mov        rbx, qword [args]                           ; args
00000000000020e8         mov        rsi, rdi
00000000000020eb         xor        eax, eax
00000000000020ed         mov        rdi, qword [rbx]
00000000000020f0         test       rdi, rdi
00000000000020f3         je         loc_210d

00000000000020f5         call       j_strcmp                                    ; strcmp
00000000000020fa         test       eax, eax
00000000000020fc         sete       al
00000000000020ff         movzx      edx, al
0000000000002102         lea        rdx, qword [rbx+rdx*8]
0000000000002106         mov        qword [args], rdx                           ; args

                     loc_210d:
000000000000210d         pop        rbx                                         ; CODE XREF=nextarg+19
000000000000210e         ret
                        ; endp
000000000000210f         align      16                                          ; End of unwind block (FDE at 0x1796c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     require_more_args:
0000000000002110         mov        rax, qword [args]                           ; Begin of unwind block (FDE at 0x17988), args, CODE XREF=eval6+145, eval6+288
0000000000002117         cmp        qword [rax], 0x0
000000000000211b         je         loc_211f

000000000000211d         ret
                        ; endp

                     loc_211f:
000000000000211f         push       rbx                                         ; CODE XREF=require_more_args+11
0000000000002120         mov        rdx, qword [rax-8]
0000000000002124         mov        esi, 0x8
0000000000002129         xor        edi, edi
000000000000212b         call       quotearg_n_style                            ; quotearg_n_style
0000000000002130         lea        rsi, qword [aSyntaxErrorMis]                ; argument "msgid" for method j_dcgettext, "syntax error: missing argument after %s"
0000000000002137         mov        rbx, rax
000000000000213a         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000213f         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002141         call       j_dcgettext                                 ; dcgettext
0000000000002146         mov        rcx, rbx
0000000000002149         mov        rdx, rax                                    ; argument "__format" for method j_error
000000000000214c         xor        esi, esi                                    ; argument "__errnum" for method j_error
000000000000214e         mov        edi, 0x2                                    ; argument "__status" for method j_error
0000000000002153         xor        eax, eax
0000000000002155         call       j_error                                     ; error
000000000000215a         nop        word [rax+rax]                              ; End of unwind block (FDE at 0x17988)
                     str_value:
0000000000002160         push       rbp                                         ; Begin of unwind block (FDE at 0x179a0), CODE XREF=docolon+267, docolon+449, eval6+314, eval6+679, eval6+951
0000000000002161         push       rbx
0000000000002162         mov        rbp, rdi
0000000000002165         mov        edi, 0x18
000000000000216a         sub        rsp, 0x8
000000000000216e         call       xmalloc                                     ; xmalloc
0000000000002173         mov        rdi, rbp
0000000000002176         mov        rbx, rax
0000000000002179         mov        dword [rax], 0x1
000000000000217f         call       xstrdup                                     ; xstrdup
0000000000002184         mov        qword [rbx+8], rax
0000000000002188         add        rsp, 0x8
000000000000218c         mov        rax, rbx
000000000000218f         pop        rbx
0000000000002190         pop        rbp
0000000000002191         ret
                        ; endp
0000000000002192         align      32                                          ; End of unwind block (FDE at 0x179a0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     freev:
00000000000021a0         push       rbx                                         ; Begin of unwind block (FDE at 0x179c8), CODE XREF=eval6+433, eval6+750, eval6+758, eval6+917, eval6+925, eval6+962, eval6+970, eval6+978, eval5+51, eval5+103, eval4+148
00000000000021a1         cmp        dword [rdi], 0x1
00000000000021a4         mov        rbx, rdi
00000000000021a7         je         loc_21c0

00000000000021a9         lea        rdi, qword [rdi+8]                          ; argument #1 for method j___gmpz_clear
00000000000021ad         call       j___gmpz_clear                              ; __gmpz_clear
00000000000021b2         mov        rdi, rbx                                    ; argument "__ptr" for method j_free
00000000000021b5         pop        rbx
00000000000021b6         jmp        j_free                                      ; free
                        ; endp
00000000000021bb         align      64

                     loc_21c0:
00000000000021c0         mov        rdi, qword [rdi+8]                          ; argument "__ptr" for method j_free, CODE XREF=freev+7
00000000000021c4         call       j_free                                      ; free
00000000000021c9         mov        rdi, rbx                                    ; argument "__ptr" for method j_free
00000000000021cc         pop        rbx
00000000000021cd         jmp        j_free                                      ; free
                        ; endp
00000000000021d2         align      32                                          ; End of unwind block (FDE at 0x179c8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     null:
00000000000021e0         mov        eax, dword [rdi]                            ; Begin of unwind block (FDE at 0x179e8), CODE XREF=main+263, eval1+45, eval1+67, eval1+79, eval+50, eval+69, eval+92
00000000000021e2         test       eax, eax
00000000000021e4         je         loc_2228

00000000000021e6         cmp        eax, 0x1
00000000000021e9         jne        loc_223e

00000000000021eb         mov        rdx, qword [rdi+8]
00000000000021ef         mov        eax, 0x1
00000000000021f4         movzx      ecx, byte [rdx]
00000000000021f7         test       cl, cl
00000000000021f9         je         loc_2222

00000000000021fb         xor        eax, eax
00000000000021fd         cmp        cl, 0x2d
0000000000002200         sete       al
0000000000002203         add        rax, rdx
0000000000002206         movzx      edx, byte [rax]
0000000000002209         jmp        loc_221b
000000000000220b         align      16

                     loc_2210:
0000000000002210         add        rax, 0x1                                    ; CODE XREF=null+62
0000000000002214         movzx      edx, byte [rax]
0000000000002217         test       dl, dl
0000000000002219         je         loc_2238

                     loc_221b:
000000000000221b         cmp        dl, 0x30                                    ; CODE XREF=null+41
000000000000221e         je         loc_2210

0000000000002220         xor        eax, eax

                     loc_2222:
0000000000002222         ret                                                    ; CODE XREF=null+25
                        ; endp
0000000000002224         align      8

                     loc_2228:
0000000000002228         mov        eax, dword [rdi+0xc]                        ; CODE XREF=null+4
000000000000222b         test       eax, eax
000000000000222d         sete       al
0000000000002230         ret
                        ; endp
0000000000002231         align      8

                     loc_2238:
0000000000002238         mov        eax, 0x1                                    ; CODE XREF=null+57
000000000000223d         ret
                        ; endp

                     loc_223e:
000000000000223e         sub        rsp, 0x8                                    ; CODE XREF=null+9
0000000000002242         call       j_abort                                     ; abort
                        ; endp
0000000000002247         align      16                                          ; End of unwind block (FDE at 0x179e8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     toarith:
0000000000002250         mov        eax, dword [rdi]                            ; Begin of unwind block (FDE at 0x17a14), CODE XREF=eval6+492, eval6+508, eval4+76, eval4+92, eval3+72, eval3+84
0000000000002252         test       eax, eax
0000000000002254         je         loc_22a0

0000000000002256         push       rbp
0000000000002257         push       rbx
0000000000002258         mov        rbx, rdi
000000000000225b         sub        rsp, 0x8
000000000000225f         cmp        eax, 0x1
0000000000002262         jne        loc_22db

0000000000002264         mov        rbp, qword [rdi+8]
0000000000002268         xor        edx, edx
000000000000226a         cmp        byte [rbp], 0x2d
000000000000226e         sete       dl
0000000000002271         add        rdx, rbp
0000000000002274         movsx      eax, byte [rdx]
0000000000002277         jmp        loc_228b
0000000000002279         align      128

                     loc_2280:
0000000000002280         add        rdx, 0x1                                    ; CODE XREF=toarith+65
0000000000002284         movsx      eax, byte [rdx]
0000000000002287         test       al, al
0000000000002289         je         loc_22b0

                     loc_228b:
000000000000228b         sub        eax, 0x30                                   ; CODE XREF=toarith+39
000000000000228e         cmp        eax, 0x9
0000000000002291         jbe        loc_2280

0000000000002293         add        rsp, 0x8
0000000000002297         xor        eax, eax
0000000000002299         pop        rbx
000000000000229a         pop        rbp
000000000000229b         ret
                        ; endp
000000000000229c         align      32

                     loc_22a0:
00000000000022a0         mov        eax, 0x1                                    ; CODE XREF=toarith+4
00000000000022a5         ret
                        ; endp
00000000000022a6         align      16

                     loc_22b0:
00000000000022b0         lea        rdi, qword [rbx+8]                          ; argument #1 for method j___gmpz_init_set_str, CODE XREF=toarith+57
00000000000022b4         mov        rsi, rbp                                    ; argument #2 for method j___gmpz_init_set_str
00000000000022b7         mov        edx, 0xa                                    ; argument #3 for method j___gmpz_init_set_str
00000000000022bc         call       j___gmpz_init_set_str                       ; __gmpz_init_set_str
00000000000022c1         mov        rdi, rbp                                    ; argument "__ptr" for method j_free
00000000000022c4         call       j_free                                      ; free
00000000000022c9         mov        dword [rbx], 0x0
00000000000022cf         add        rsp, 0x8
00000000000022d3         mov        eax, 0x1
00000000000022d8         pop        rbx
00000000000022d9         pop        rbp
00000000000022da         ret
                        ; endp

                     loc_22db:
00000000000022db         call       j_abort                                     ; abort, CODE XREF=toarith+18
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     tostring:
00000000000022e0         push       r12                                         ; End of unwind block (FDE at 0x17a14), Begin of unwind block (FDE at 0x17a54), CODE XREF=docolon+42, docolon+50, eval6+382, eval6+484, eval6+857, eval6+865, eval2+163, eval2+171
00000000000022e2         push       rbp
00000000000022e3         push       rbx
00000000000022e4         mov        eax, dword [rdi]
00000000000022e6         test       eax, eax
00000000000022e8         je         loc_22f8

00000000000022ea         cmp        eax, 0x1
00000000000022ed         jne        loc_2328

00000000000022ef         pop        rbx
00000000000022f0         pop        rbp
00000000000022f1         pop        r12
00000000000022f3         ret
                        ; endp
00000000000022f4         align      8

                     loc_22f8:
00000000000022f8         lea        rbp, qword [rdi+8]                          ; CODE XREF=tostring+8
00000000000022fc         mov        rbx, rdi
00000000000022ff         mov        esi, 0xa                                    ; argument #2 for method j___gmpz_get_str
0000000000002304         xor        edi, edi                                    ; argument #1 for method j___gmpz_get_str
0000000000002306         mov        rdx, rbp                                    ; argument #3 for method j___gmpz_get_str
0000000000002309         call       j___gmpz_get_str                            ; __gmpz_get_str
000000000000230e         mov        rdi, rbp                                    ; argument #1 for method j___gmpz_clear
0000000000002311         mov        r12, rax
0000000000002314         call       j___gmpz_clear                              ; __gmpz_clear
0000000000002319         mov        qword [rbx+8], r12
000000000000231d         mov        dword [rbx], 0x1
0000000000002323         pop        rbx
0000000000002324         pop        rbp
0000000000002325         pop        r12
0000000000002327         ret
                        ; endp

                     loc_2328:
0000000000002328         call       j_abort                                     ; abort, CODE XREF=tostring+13
                        ; endp
000000000000232d         align      16                                          ; End of unwind block (FDE at 0x17a54)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168


                     usage:
0000000000002330         push       r13                                         ; Begin of unwind block (FDE at 0x17a8c), CODE XREF=main+438, DATA XREF=main+98
0000000000002332         push       r12
0000000000002334         mov        edx, 0x5
0000000000002339         push       rbp
000000000000233a         push       rbx
000000000000233b         mov        ebp, edi
000000000000233d         sub        rsp, 0x88
0000000000002344         mov        rbx, qword [program_name]                   ; program_name
000000000000234b         mov        rax, qword [fs:0x28]
0000000000002354         mov        qword [rsp+0xa8+var_30], rax
0000000000002359         xor        eax, eax
000000000000235b         test       edi, edi
000000000000235d         je         loc_238d

000000000000235f         lea        rsi, qword [aTrySHelpForMor]                ; argument "msgid" for method j_dcgettext, "Try '%s --help' for more information.\\n"
0000000000002366         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002368         call       j_dcgettext                                 ; dcgettext
000000000000236d         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
0000000000002374         mov        rdx, rax
0000000000002377         mov        rcx, rbx
000000000000237a         mov        esi, 0x1
000000000000237f         xor        eax, eax
0000000000002381         call       j___fprintf_chk                             ; __fprintf_chk

                     loc_2386:
0000000000002386         mov        edi, ebp                                    ; argument "__status" for method j_exit, CODE XREF=usage+930
0000000000002388         call       j_exit                                      ; exit
                        ; endp

                     loc_238d:
000000000000238d         lea        rsi, qword [aUsageSExpressi]                ; argument "msgid" for method j_dcgettext, "Usage: %s EXPRESSION\\n  or:  %s OPTION\\n", CODE XREF=usage+45
0000000000002394         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002396         call       j_dcgettext                                 ; dcgettext
000000000000239b         mov        edi, 0x1
00000000000023a0         mov        rsi, rax
00000000000023a3         mov        rcx, rbx
00000000000023a6         xor        eax, eax
00000000000023a8         mov        rdx, rbx
00000000000023ab         call       j___printf_chk                              ; __printf_chk
00000000000023b0         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000023b7         mov        rax, qword [rdi+0x28]
00000000000023bb         cmp        rax, qword [rdi+0x30]
00000000000023bf         jae        loc_2708

00000000000023c5         lea        rdx, qword [rax+1]
00000000000023c9         mov        qword [rdi+0x28], rdx
00000000000023cd         mov        byte [rax], 0xa

                     loc_23d0:
00000000000023d0         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=usage+994
00000000000023d7         lea        rsi, qword [aHelpDisplayThi]                ; argument "msgid" for method j_dcgettext, "      --help     display this help and exit\\n"
00000000000023de         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000023e3         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000023e5         call       j_dcgettext                                 ; dcgettext
00000000000023ea         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
00000000000023ed         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000023f0         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000023f5         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000023fc         lea        rsi, qword [aVersionOutputV]                ; argument "msgid" for method j_dcgettext, "      --version  output version information and exit\\n"
0000000000002403         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002408         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000240a         call       j_dcgettext                                 ; dcgettext
000000000000240f         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002412         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002415         call       j_fputs_unlocked                            ; fputs_unlocked
000000000000241a         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002421         lea        rsi, qword [aNprintTheValue]                ; argument "msgid" for method j_dcgettext, "\\nPrint the value of EXPRESSION to standard output.  A blank line below\\nseparates increasing precedence groups.  EXPRESSION may be:\\n\\n  ARG1 | ARG2       ARG1 if it is neither null nor 0, otherwise ARG2\\n\\n  ARG1 & ARG2       ARG1 if neither argument is null o…"
0000000000002428         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000242d         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000242f         call       j_dcgettext                                 ; dcgettext
0000000000002434         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002437         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
000000000000243a         call       j_fputs_unlocked                            ; fputs_unlocked
000000000000243f         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002446         lea        rsi, qword [aNArg1Arg2Arg1I]                ; argument "msgid" for method j_dcgettext, "\\n  ARG1 < ARG2       ARG1 is less than ARG2\\n  ARG1 <= ARG2      ARG1 is less than or equal to ARG2\\n  ARG1 = ARG2       ARG1 is equal to ARG2\\n  ARG1 != ARG2      ARG1 is unequal to ARG2\\n  ARG1 >= ARG2      ARG1 is greater than or equal to ARG2\\n  ARG1 > ARG2…"
000000000000244d         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002452         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002454         call       j_dcgettext                                 ; dcgettext
0000000000002459         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
000000000000245c         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
000000000000245f         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002464         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
000000000000246b         lea        rsi, qword [aNArg1Arg2Arith]                ; argument "msgid" for method j_dcgettext, "\\n  ARG1 + ARG2       arithmetic sum of ARG1 and ARG2\\n  ARG1 - ARG2       arithmetic difference of ARG1 and ARG2\\n"
0000000000002472         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002477         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002479         call       j_dcgettext                                 ; dcgettext
000000000000247e         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002481         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002484         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002489         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002490         lea        rsi, qword [aNArg1Arg2Arith_159a0]          ; argument "msgid" for method j_dcgettext, "\\n  ARG1 * ARG2       arithmetic product of ARG1 and ARG2\\n  ARG1 / ARG2       arithmetic quotient of ARG1 divided by ARG2\\n  ARG1 % ARG2       arithmetic remainder of ARG1 divided by ARG2\\n"
0000000000002497         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000249c         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000249e         call       j_dcgettext                                 ; dcgettext
00000000000024a3         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
00000000000024a6         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000024a9         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000024ae         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000024b5         lea        rsi, qword [aNStringRegexpA]                ; argument "msgid" for method j_dcgettext, "\\n  STRING : REGEXP   anchored pattern match of REGEXP in STRING\\n\\n  match STRING REGEXP        same as STRING : REGEXP\\n  substr STRING POS LENGTH   substring of STRING, POS counted from 1\\n  index STRING CHARS         index in STRING where any CHARS is found…"
00000000000024bc         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000024c1         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000024c3         call       j_dcgettext                                 ; dcgettext
00000000000024c8         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
00000000000024cb         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000024ce         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000024d3         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000024da         lea        rsi, qword [aTokenInterpret]                ; argument "msgid" for method j_dcgettext, "  + TOKEN                    interpret TOKEN as a string, even if it is a\\n                               keyword like 'match' or an operator like '/'\\n\\n  ( EXPRESSION )             value of EXPRESSION\\n"
00000000000024e1         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000024e6         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000024e8         call       j_dcgettext                                 ; dcgettext
00000000000024ed         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
00000000000024f0         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000024f3         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000024f8         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000024ff         lea        rsi, qword [aNbewareThatMan]                ; argument "msgid" for method j_dcgettext, "\\nBeware that many operators need to be escaped or quoted for shells.\\nComparisons are arithmetic if both ARGs are numbers, else lexicographical.\\nPattern matches return the string matched between \\( and \\) or null; if\\n\\( and \\) are not used, they return the …"
0000000000002506         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000250b         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000250d         call       j_dcgettext                                 ; dcgettext
0000000000002512         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002515         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002518         call       j_fputs_unlocked                            ; fputs_unlocked
000000000000251d         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002524         lea        rsi, qword [aNexitStatusIs0]                ; argument "msgid" for method j_dcgettext, "\\nExit status is 0 if EXPRESSION is neither null nor 0, 1 if EXPRESSION is null\\nor 0, 2 if EXPRESSION is syntactically invalid, and 3 if an error occurred.\\n"
000000000000252b         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002530         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002532         call       j_dcgettext                                 ; dcgettext
0000000000002537         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
000000000000253a         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
000000000000253d         lea        rbx, qword [aItercurwc0+18]                 ; 0x15f8f
0000000000002544         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002549         lea        rax, qword [aItercurwc0+23]                 ; 0x15f94
0000000000002550         lea        rcx, qword [aSha256sum]                     ; "sha256sum"
0000000000002557         mov        qword [rsp+0xa8+var_48], 0x0
0000000000002560         mov        qword [rsp+0xa8+var_40], 0x0
0000000000002569         mov        rdx, rsp
000000000000256c         mov        qword [rsp+0xa8+var_A8], rax
0000000000002570         lea        rax, qword [aTestInvocation]                ; "test invocation"
0000000000002577         mov        qword [rsp+0xa8+var_78], rcx
000000000000257c         lea        rcx, qword [aSha384sum]                     ; "sha384sum"
0000000000002583         mov        qword [rsp+0xa8+var_A0], rax
0000000000002588         lea        rax, qword [aCoreutils]                     ; "coreutils"
000000000000258f         mov        qword [rsp+0xa8+var_68], rcx
0000000000002594         lea        rcx, qword [aSha512sum]                     ; "sha512sum"
000000000000259b         mov        qword [rsp+0xa8+var_98], rax
00000000000025a0         lea        rax, qword [aMulticallInvoc]                ; "Multi-call invocation"
00000000000025a7         mov        qword [rsp+0xa8+var_58], rcx
00000000000025ac         mov        qword [rsp+0xa8+var_90], rax
00000000000025b1         lea        rax, qword [aSha224sum]                     ; "sha224sum"
00000000000025b8         mov        qword [rsp+0xa8+var_88], rax
00000000000025bd         lea        rax, qword [aSha2Utilities]                 ; "sha2 utilities"
00000000000025c4         mov        qword [rsp+0xa8+var_80], rax
00000000000025c9         mov        qword [rsp+0xa8+var_70], rax
00000000000025ce         mov        qword [rsp+0xa8+var_60], rax
00000000000025d3         mov        qword [rsp+0xa8+var_50], rax
00000000000025d8         nop        dword [rax+rax]

                     loc_25e0:
00000000000025e0         add        rdx, 0x10                                   ; CODE XREF=usage+717
00000000000025e4         mov        rdi, qword [rdx]
00000000000025e7         test       rdi, rdi
00000000000025ea         je         loc_25ff

00000000000025ec         mov        ecx, 0x5
00000000000025f1         mov        rsi, rbx
00000000000025f4         rep  cmpsb byte [rsi], byte [rdi]
00000000000025f6         seta       al
00000000000025f9         sbb        al, 0x0
00000000000025fb         test       al, al
00000000000025fd         jne        loc_25e0

                     loc_25ff:
00000000000025ff         mov        r12, qword [rdx+8]                          ; CODE XREF=usage+698
0000000000002603         xor        edi, edi
0000000000002605         mov        edx, 0x5
000000000000260a         lea        rsi, qword [aNsOnlineHelpSn]                ; "\\n%s online help: <%s>\\n"
0000000000002611         test       r12, r12
0000000000002614         je         loc_2717

000000000000261a         call       j_dcgettext                                 ; dcgettext
000000000000261f         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000002626         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0x1600a
000000000000262d         mov        rsi, rax
0000000000002630         mov        edi, 0x1
0000000000002635         xor        eax, eax
0000000000002637         call       j___printf_chk                              ; __printf_chk
000000000000263c         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
000000000000263e         mov        edi, 0x5                                    ; argument "__category" for method j_setlocale
0000000000002643         call       j_setlocale                                 ; setlocale
0000000000002648         test       rax, rax
000000000000264b         je         loc_2665

000000000000264d         lea        rsi, qword [aCoreutils+10]                  ; argument "__s2" for method j_strncmp, 0x16018
0000000000002654         mov        edx, 0x3                                    ; argument "__n" for method j_strncmp
0000000000002659         mov        rdi, rax                                    ; argument "__s1" for method j_strncmp
000000000000265c         call       j_strncmp                                   ; strncmp
0000000000002661         test       eax, eax
0000000000002663         jne        loc_26de

                     loc_2665:
0000000000002665         lea        rsi, qword [aFullDocumentat]                ; argument "msgid" for method j_dcgettext, "Full documentation <%s%s>\\n", CODE XREF=usage+795, usage+979
000000000000266c         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000266e         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002673         call       j_dcgettext                                 ; dcgettext
0000000000002678         lea        rcx, qword [aItercurwc0+18]                 ; 0x15f8f
000000000000267f         lea        rdx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000002686         mov        rsi, rax
0000000000002689         mov        edi, 0x1
000000000000268e         xor        eax, eax
0000000000002690         call       j___printf_chk                              ; __printf_chk
0000000000002695         cmp        r12, rbx
0000000000002698         lea        rcx, qword [aMulticallInvoc+10]             ; 0x15fb0
000000000000269f         lea        rbx, qword [aWrittenBySSAnd+27]             ; 0x16761
00000000000026a6         cmove      rbx, rcx

                     loc_26aa:
00000000000026aa         lea        rsi, qword [aOrAvailableLoc]                ; argument "msgid" for method j_dcgettext, "or available locally via: info '(coreutils) %s%s'\\n", CODE XREF=usage+1140
00000000000026b1         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000026b3         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000026b8         call       j_dcgettext                                 ; dcgettext
00000000000026bd         mov        rcx, rbx
00000000000026c0         mov        rsi, rax
00000000000026c3         mov        rdx, r12
00000000000026c6         mov        edi, 0x1
00000000000026cb         xor        eax, eax
00000000000026cd         call       j___printf_chk                              ; __printf_chk
00000000000026d2         jmp        loc_2386

                     loc_26d7:
00000000000026d7         lea        r12, qword [aItercurwc0+18]                 ; 0x15f8f, CODE XREF=usage+1072

                     loc_26de:
00000000000026de         mov        r13, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=usage+819
00000000000026e5         lea        rsi, qword [aReportAnyTrans]                ; argument "msgid" for method j_dcgettext, "Report any translation bugs to <https://translationproject.org/team/>\\n"
00000000000026ec         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000026ee         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000026f3         call       j_dcgettext                                 ; dcgettext
00000000000026f8         mov        rsi, r13                                    ; argument "__stream" for method j_fputs_unlocked
00000000000026fb         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000026fe         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002703         jmp        loc_2665

                     loc_2708:
0000000000002708         mov        esi, 0xa                                    ; argument #2 for method j___overflow, CODE XREF=usage+143
000000000000270d         call       j___overflow                                ; __overflow
0000000000002712         jmp        loc_23d0

                     loc_2717:
0000000000002717         call       j_dcgettext                                 ; dcgettext, CODE XREF=usage+740
000000000000271c         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000002723         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0x1600a
000000000000272a         mov        rsi, rax
000000000000272d         mov        edi, 0x1
0000000000002732         xor        eax, eax
0000000000002734         call       j___printf_chk                              ; __printf_chk
0000000000002739         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
000000000000273b         mov        edi, 0x5                                    ; argument "__category" for method j_setlocale
0000000000002740         call       j_setlocale                                 ; setlocale
0000000000002745         test       rax, rax
0000000000002748         je         loc_2766

000000000000274a         lea        rsi, qword [aCoreutils+10]                  ; argument "__s2" for method j_strncmp, 0x16018
0000000000002751         mov        edx, 0x3                                    ; argument "__n" for method j_strncmp
0000000000002756         mov        rdi, rax                                    ; argument "__s1" for method j_strncmp
0000000000002759         call       j_strncmp                                   ; strncmp
000000000000275e         test       eax, eax
0000000000002760         jne        loc_26d7

                     loc_2766:
0000000000002766         lea        rsi, qword [aFullDocumentat]                ; argument "msgid" for method j_dcgettext, "Full documentation <%s%s>\\n", CODE XREF=usage+1048
000000000000276d         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002772         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002774         lea        r12, qword [aItercurwc0+18]                 ; 0x15f8f
000000000000277b         lea        rbx, qword [aMulticallInvoc+10]             ; 0x15fb0
0000000000002782         call       j_dcgettext                                 ; dcgettext
0000000000002787         lea        rcx, qword [aItercurwc0+18]                 ; 0x15f8f
000000000000278e         lea        rdx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000002795         mov        rsi, rax
0000000000002798         mov        edi, 0x1
000000000000279d         xor        eax, eax
000000000000279f         call       j___printf_chk                              ; __printf_chk
00000000000027a4         jmp        loc_26aa
00000000000027a9         align      16                                          ; End of unwind block (FDE at 0x17a8c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_148: int8_t, -328
        ;    var_164: int32_t, -356
        ;    var_168: int8_t, -360
        ;    var_170: int64_t, -368
        ;    var_178: int64_t, -376
        ;    var_17C: int8_t, -380
        ;    var_184: int64_t, -388
        ;    var_188: int8_t, -392
        ;    var_190: int8_t, -400
        ;    var_198: int64_t, -408
        ;    var_1A0: int64_t, -416
        ;    var_1A8: int64_t, -424
        ;    var_1C0: int64_t, -448
        ;    var_1C8: int64_t, -456
        ;    var_1D8: int64_t, -472
        ;    var_1E0: int64_t, -480
        ;    var_1E8: int64_t, -488
        ;    var_1F0: int64_t, -496


                     docolon:
00000000000027b0         push       r15                                         ; Begin of unwind block (FDE at 0x17ab8), CODE XREF=eval6+736, eval5+89
00000000000027b2         push       r14
00000000000027b4         push       r13
00000000000027b6         push       r12
00000000000027b8         push       rbp
00000000000027b9         push       rbx
00000000000027ba         mov        rbp, rsi
00000000000027bd         mov        rbx, rdi
00000000000027c0         sub        rsp, 0x1c8
00000000000027c7         mov        rax, qword [fs:0x28]
00000000000027d0         mov        qword [rsp+0x1f8+var_40], rax
00000000000027d8         xor        eax, eax
00000000000027da         call       tostring                                    ; tostring
00000000000027df         mov        rdi, rbp
00000000000027e2         call       tostring                                    ; tostring
00000000000027e7         mov        r12, qword [rbp+8]
00000000000027eb         lea        rax, qword [rsp+0x1f8+var_148]
00000000000027f3         lea        rbp, qword [rsp+0x1f8+var_1C8]
00000000000027f8         mov        qword [rsp+0x1f8+var_1E8], 0x0
0000000000002801         mov        qword [rsp+0x1f8+var_1E0], 0x0
000000000000280a         mov        qword [rsp+0x1f8+var_1D8], 0x0
0000000000002813         mov        qword [rsp+0x1f8+var_1C8], 0x0
000000000000281c         mov        rdi, r12                                    ; argument "__s" for method j_strlen
000000000000281f         mov        qword [rsp+0x1f8+var_1C0], 0x0
0000000000002828         mov        qword [rsp+0x1f8+var_1A8], rax
000000000000282d         mov        qword [rsp+0x1f8+var_1A0], 0x0
0000000000002836         mov        qword [rpl_re_syntax_options], 0x2c6        ; rpl_re_syntax_options
0000000000002841         call       j_strlen                                    ; strlen
0000000000002846         mov        rdx, rbp
0000000000002849         mov        rsi, rax
000000000000284c         mov        rdi, r12
000000000000284f         call       rpl_re_compile_pattern                      ; rpl_re_compile_pattern
0000000000002854         test       rax, rax
0000000000002857         jne        loc_2bba

000000000000285d         mov        r12, qword [rbx+8]
0000000000002861         and        byte [rsp+0x1f8+var_190], 0x7f
0000000000002866         mov        rdi, r12                                    ; argument "__s" for method j_strlen
0000000000002869         call       j_strlen                                    ; strlen
000000000000286e         lea        r8, qword [rsp+0x1f8+var_1E8]
0000000000002873         xor        ecx, ecx
0000000000002875         mov        rdx, rax
0000000000002878         mov        rsi, r12
000000000000287b         mov        rdi, rbp
000000000000287e         call       rpl_re_match                                ; rpl_re_match
0000000000002883         test       rax, rax
0000000000002886         mov        r15, rax
0000000000002889         js         loc_2958

000000000000288f         mov        r14, qword [rsp+0x1f8+var_198]
0000000000002894         test       r14, r14
0000000000002897         je         loc_2920

000000000000289d         mov        rax, qword [rsp+0x1f8+var_1D8]
00000000000028a2         mov        rdx, qword [rbx+8]
00000000000028a6         mov        rax, qword [rax+8]
00000000000028aa         mov        byte [rdx+rax], 0x0
00000000000028ae         mov        rax, qword [rsp+0x1f8+var_1E0]
00000000000028b3         mov        rdi, qword [rax+8]
00000000000028b7         add        rdi, qword [rbx+8]                          ; argument #1 for method str_value
00000000000028bb         call       str_value                                   ; str_value
00000000000028c0         mov        rbx, rax

                     loc_28c3:
00000000000028c3         cmp        qword [rsp+0x1f8+var_1E8], 0x0              ; CODE XREF=docolon+413, docolon+457, docolon+494
00000000000028c9         je         loc_28df

00000000000028cb         mov        rdi, qword [rsp+0x1f8+var_1E0]              ; argument "__ptr" for method j_free
00000000000028d0         call       j_free                                      ; free
00000000000028d5         mov        rdi, qword [rsp+0x1f8+var_1D8]              ; argument "__ptr" for method j_free
00000000000028da         call       j_free                                      ; free

                     loc_28df:
00000000000028df         mov        rdi, rbp                                    ; CODE XREF=docolon+281
00000000000028e2         mov        qword [rsp+0x1f8+var_1A8], 0x0
00000000000028eb         call       rpl_regfree                                 ; rpl_regfree
00000000000028f0         mov        rcx, qword [rsp+0x1f8+var_40]
00000000000028f8         xor        rcx, qword [fs:0x28]
0000000000002901         mov        rax, rbx
0000000000002904         jne        loc_2bd2

000000000000290a         add        rsp, 0x1c8
0000000000002911         pop        rbx
0000000000002912         pop        rbp
0000000000002913         pop        r12
0000000000002915         pop        r13
0000000000002917         pop        r14
0000000000002919         pop        r15
000000000000291b         ret
                        ; endp
000000000000291c         align      32

                     loc_2920:
0000000000002920         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max, CODE XREF=docolon+231
0000000000002925         cmp        rax, 0x1
0000000000002929         mov        r12, r15
000000000000292c         jne        loc_29a8

                     loc_292e:
000000000000292e         mov        edi, 0x18                                   ; CODE XREF=docolon+963
0000000000002933         call       xmalloc                                     ; xmalloc
0000000000002938         lea        rdi, qword [rax+8]                          ; argument #1 for method j___gmpz_init_set_ui
000000000000293c         mov        dword [rax], 0x0
0000000000002942         mov        rsi, r12                                    ; argument #2 for method j___gmpz_init_set_ui
0000000000002945         mov        rbx, rax
0000000000002948         call       j___gmpz_init_set_ui                        ; __gmpz_init_set_ui
000000000000294d         jmp        loc_28c3
0000000000002952         align      8

                     loc_2958:
0000000000002958         cmp        rax, 0xffffffffffffffff                     ; CODE XREF=docolon+217
000000000000295c         jne        loc_2bf6

0000000000002962         cmp        qword [rsp+0x1f8+var_198], 0x0
0000000000002968         je         loc_2980

000000000000296a         lea        rdi, qword [aWrittenBySSAnd+27]             ; argument #1 for method str_value, 0x16761
0000000000002971         call       str_value                                   ; str_value
0000000000002976         mov        rbx, rax
0000000000002979         jmp        loc_28c3
000000000000297e         align      128

                     loc_2980:
0000000000002980         mov        edi, 0x18                                   ; CODE XREF=docolon+440
0000000000002985         call       xmalloc                                     ; xmalloc
000000000000298a         lea        rdi, qword [rax+8]                          ; argument #1 for method j___gmpz_init_set_ui
000000000000298e         mov        dword [rax], 0x0
0000000000002994         xor        esi, esi                                    ; argument #2 for method j___gmpz_init_set_ui
0000000000002996         mov        rbx, rax
0000000000002999         call       j___gmpz_init_set_ui                        ; __gmpz_init_set_ui
000000000000299e         jmp        loc_28c3
00000000000029a3         align      8

                     loc_29a8:
00000000000029a8         lea        r13, qword [rsp+0x1f8+var_188]              ; CODE XREF=docolon+380
00000000000029ad         mov        r12, qword [rbx+8]
00000000000029b1         mov        byte [rsp+0x1f8+var_188], 0x0
00000000000029b6         mov        qword [rsp+0x1f8+var_184], 0x0
00000000000029bf         mov        byte [rsp+0x1f8+var_17C], 0x0
00000000000029c4         lea        rax, qword [r13+4]
00000000000029c8         mov        qword [rsp+0x1f8+var_178], r12
00000000000029d0         mov        qword [rsp+0x1f8+var_1F0], rax
00000000000029d5         jmp        loc_2a68
00000000000029da         align      32

                     loc_29e0:
00000000000029e0         mov        rbx, qword [rsp+0x1f8+var_178]              ; CODE XREF=docolon+701
00000000000029e8         lea        rcx, qword [is_basic_table]                 ; is_basic_table
00000000000029ef         movzx      edx, byte [rbx]
00000000000029f2         mov        eax, edx
00000000000029f4         shr        al, 0x5
00000000000029f7         and        eax, 0x7
00000000000029fa         mov        eax, dword [rcx+rax*4]
00000000000029fd         bt         eax, edx
0000000000002a00         jae        loc_2b18

0000000000002a06         mov        qword [rsp+0x1f8+var_170], 0x1
0000000000002a12         movsx      eax, byte [rbx]
0000000000002a15         mov        byte [rsp+0x1f8+var_168], 0x1
0000000000002a1d         mov        byte [rsp+0x1f8+var_17C], 0x1
0000000000002a22         mov        dword [rsp+0x1f8+var_164], eax

                     loc_2a29:
0000000000002a29         mov        eax, dword [rsp+0x1f8+var_164]              ; CODE XREF=docolon+862, docolon+1029
0000000000002a30         test       eax, eax
0000000000002a32         je         loc_2b70

0000000000002a38         mov        rbx, qword [rsp+0x1f8+var_178]

                     loc_2a40:
0000000000002a40         mov        rax, rbx                                    ; CODE XREF=docolon+1013
0000000000002a43         sub        rax, r12
0000000000002a46         cmp        rax, r15
0000000000002a49         jae        loc_2b70

                     loc_2a4f:
0000000000002a4f         add        rbx, qword [rsp+0x1f8+var_170]              ; CODE XREF=docolon+946
0000000000002a57         add        r14, 0x1
0000000000002a5b         mov        byte [rsp+0x1f8+var_17C], 0x0
0000000000002a60         mov        qword [rsp+0x1f8+var_178], rbx

                     loc_2a68:
0000000000002a68         cmp        byte [rsp+0x1f8+var_188], 0x0               ; CODE XREF=docolon+549
0000000000002a6d         je         loc_29e0

                     loc_2a73:
0000000000002a73         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max, CODE XREF=docolon+895
0000000000002a78         mov        rbx, qword [rsp+0x1f8+var_178]
0000000000002a80         mov        rsi, rax
0000000000002a83         mov        rdi, rbx
0000000000002a86         call       strnlen1                                    ; strnlen1
0000000000002a8b         lea        rcx, qword [r13+4]
0000000000002a8f         lea        rdi, qword [r13+0x24]
0000000000002a93         mov        rdx, rax
0000000000002a96         mov        rsi, rbx
0000000000002a99         call       rpl_mbrtowc                                 ; rpl_mbrtowc
0000000000002a9e         cmp        rax, 0xffffffffffffffff
0000000000002aa2         mov        qword [rsp+0x1f8+var_170], rax
0000000000002aaa         je         loc_2b38

0000000000002ab0         cmp        rax, 0xfffffffffffffffe
0000000000002ab4         je         loc_2b80

0000000000002aba         test       rax, rax
0000000000002abd         jne        loc_2aeb

0000000000002abf         mov        rbx, qword [rsp+0x1f8+var_178]
0000000000002ac7         mov        qword [rsp+0x1f8+var_170], 0x1
0000000000002ad3         cmp        byte [rbx], 0x0
0000000000002ad6         jne        loc_2c2b

0000000000002adc         mov        edx, dword [rsp+0x1f8+var_164]
0000000000002ae3         test       edx, edx
0000000000002ae5         jne        loc_2c26

                     loc_2aeb:
0000000000002aeb         lea        rdi, qword [r13+4]                          ; argument "__ps" for method j_mbsinit, CODE XREF=docolon+781
0000000000002aef         mov        byte [rsp+0x1f8+var_168], 0x1
0000000000002af7         call       j_mbsinit                                   ; mbsinit
0000000000002afc         test       eax, eax
0000000000002afe         je         loc_2bb0

0000000000002b04         mov        byte [rsp+0x1f8+var_188], 0x0
0000000000002b09         mov        byte [rsp+0x1f8+var_17C], 0x1
0000000000002b0e         jmp        loc_2a29
0000000000002b13         align      8

                     loc_2b18:
0000000000002b18         mov        rdi, qword [rsp+0x1f8+var_1F0]              ; argument "__ps" for method j_mbsinit, CODE XREF=docolon+592
0000000000002b1d         call       j_mbsinit                                   ; mbsinit
0000000000002b22         test       eax, eax
0000000000002b24         je         loc_2bd7

0000000000002b2a         mov        byte [rsp+0x1f8+var_188], 0x1
0000000000002b2f         jmp        loc_2a73
0000000000002b34         align      8

                     loc_2b38:
0000000000002b38         mov        rbx, qword [rsp+0x1f8+var_178]              ; CODE XREF=docolon+762
0000000000002b40         mov        qword [rsp+0x1f8+var_170], 0x1
0000000000002b4c         mov        byte [rsp+0x1f8+var_168], 0x0
0000000000002b54         mov        byte [rsp+0x1f8+var_17C], 0x1
0000000000002b59         mov        rax, rbx
0000000000002b5c         sub        rax, r12
0000000000002b5f         cmp        rax, r15
0000000000002b62         jb         loc_2a4f

0000000000002b68         nop        dword [rax+rax]

                     loc_2b70:
0000000000002b70         mov        r12, r14                                    ; CODE XREF=docolon+642, docolon+665
0000000000002b73         jmp        loc_292e
0000000000002b78         align      128

                     loc_2b80:
0000000000002b80         mov        rbx, qword [rsp+0x1f8+var_178]              ; CODE XREF=docolon+772
0000000000002b88         mov        rdi, rbx                                    ; argument "__s" for method j_strlen
0000000000002b8b         call       j_strlen                                    ; strlen
0000000000002b90         mov        byte [rsp+0x1f8+var_168], 0x0
0000000000002b98         mov        qword [rsp+0x1f8+var_170], rax
0000000000002ba0         mov        byte [rsp+0x1f8+var_17C], 0x1
0000000000002ba5         jmp        loc_2a40
0000000000002baa         align      16

                     loc_2bb0:
0000000000002bb0         mov        byte [rsp+0x1f8+var_17C], 0x1               ; CODE XREF=docolon+846
0000000000002bb5         jmp        loc_2a29

                     loc_2bba:
0000000000002bba         lea        rdx, qword [aSS+4]                          ; argument "__format" for method j_error, 0x16183, CODE XREF=docolon+167
0000000000002bc1         mov        rcx, rax
0000000000002bc4         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002bc6         mov        edi, 0x2                                    ; argument "__status" for method j_error
0000000000002bcb         xor        eax, eax
0000000000002bcd         call       j_error                                     ; error

                     loc_2bd2:
0000000000002bd2         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=docolon+340
                        ; endp

                     loc_2bd7:
0000000000002bd7         lea        rcx, qword [__PRETTY_FUNCTION__.7929]       ; argument "__function" for method j___assert_fail, "mbuiter_multi_next", CODE XREF=docolon+884
0000000000002bde         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/mbuiter.h"
0000000000002be5         lea        rdi, qword [aMbsinitItersta]                ; argument "__assertion" for method j___assert_fail, "mbsinit (&iter->state)"
0000000000002bec         mov        edx, 0x96                                   ; argument "__line" for method j___assert_fail
0000000000002bf1         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_2bf6:
0000000000002bf6         lea        rsi, qword [aErrorInRegular]                ; argument "msgid" for method j_dcgettext, "error in regular expression matcher", CODE XREF=docolon+428
0000000000002bfd         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002bff         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002c04         call       j_dcgettext                                 ; dcgettext
0000000000002c09         cmp        r15, 0xfffffffffffffffe
0000000000002c0d         mov        rbx, rax
0000000000002c10         mov        esi, 0x4b
0000000000002c15         je         loc_2c4a

                     loc_2c17:
0000000000002c17         mov        rdx, rbx                                    ; argument "__format" for method j_error, CODE XREF=docolon+1185
0000000000002c1a         mov        edi, 0x3                                    ; argument "__status" for method j_error
0000000000002c1f         xor        eax, eax
0000000000002c21         call       j_error                                     ; error

                     loc_2c26:
0000000000002c26         call       mbuiter_multi_next.part.2                   ; mbuiter_multi_next.part.2, CODE XREF=docolon+821
                        ; endp

                     loc_2c2b:
0000000000002c2b         lea        rcx, qword [__PRETTY_FUNCTION__.7929]       ; argument "__function" for method j___assert_fail, "mbuiter_multi_next", CODE XREF=docolon+806
0000000000002c32         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/mbuiter.h"
0000000000002c39         lea        rdi, qword [aItercurptr0]                   ; argument "__assertion" for method j___assert_fail, "*iter->cur.ptr == '\\0'"
0000000000002c40         mov        edx, 0xb2                                   ; argument "__line" for method j___assert_fail
0000000000002c45         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_2c4a:
0000000000002c4a         call       j___errno_location                          ; __errno_location, CODE XREF=docolon+1125
0000000000002c4f         mov        esi, dword [rax]
0000000000002c51         jmp        loc_2c17
0000000000002c53         align      32                                          ; End of unwind block (FDE at 0x17ab8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_64: int32_t, -100
        ;    var_68: int8_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_7C: int8_t, -124
        ;    var_84: int64_t, -132
        ;    var_88: int8_t, -136
        ;    var_A4: int32_t, -164
        ;    var_A8: int8_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_BC: int8_t, -188
        ;    var_C8: int8_t, -200
        ;    var_E4: int32_t, -228
        ;    var_E8: int8_t, -232
        ;    var_F0: int64_t, -240
        ;    var_F8: int64_t, -248
        ;    var_FC: int8_t, -252
        ;    var_104: int64_t, -260
        ;    var_108: int8_t, -264
        ;    var_110: int64_t, -272
        ;    var_118: int64_t, -280
        ;    var_120: int64_t, -288
        ;    var_128: int64_t, -296
        ;    var_130: int64_t, -304
        ;    var_138: int64_t, -312


                     eval6:
0000000000002c60         push       r15                                         ; Begin of unwind block (FDE at 0x17b08), CODE XREF=eval6+371, eval6+451, eval6+462, eval6+473, eval6+707, eval6+718, eval6+835, eval6+846, eval5+30, eval5+70
0000000000002c62         push       r14
0000000000002c64         push       r13
0000000000002c66         push       r12
0000000000002c68         push       rbp
0000000000002c69         push       rbx
0000000000002c6a         mov        ebx, edi
0000000000002c6c         lea        rdi, qword [aItercurptr0+23]                ; argument #1 for method nextarg, 0x16065
0000000000002c73         sub        rsp, 0x108
0000000000002c7a         mov        rax, qword [fs:0x28]
0000000000002c83         mov        qword [rsp+0x138+var_40], rax
0000000000002c8b         xor        eax, eax
0000000000002c8d         call       nextarg                                     ; nextarg
0000000000002c92         test       al, al
0000000000002c94         jne        loc_2d80

0000000000002c9a         lea        rdi, qword [aLength]                        ; argument #1 for method nextarg, "length"
0000000000002ca1         movzx      r15d, bl
0000000000002ca5         call       nextarg                                     ; nextarg
0000000000002caa         test       al, al
0000000000002cac         jne        loc_2dd0

0000000000002cb2         lea        rdi, qword [aMatch]                         ; argument #1 for method nextarg, "match"
0000000000002cb9         call       nextarg                                     ; nextarg
0000000000002cbe         test       al, al
0000000000002cc0         jne        loc_2f20

0000000000002cc6         lea        rdi, qword [aIndex]                         ; argument #1 for method nextarg, "index"
0000000000002ccd         call       nextarg                                     ; nextarg
0000000000002cd2         test       al, al
0000000000002cd4         mov        r14d, eax
0000000000002cd7         jne        loc_2fa0

0000000000002cdd         lea        rdi, qword [aSubstr]                        ; argument #1 for method nextarg, "substr"
0000000000002ce4         call       nextarg                                     ; nextarg
0000000000002ce9         test       al, al
0000000000002ceb         jne        loc_2e20

0000000000002cf1         call       require_more_args                           ; require_more_args
0000000000002cf6         lea        rdi, qword [aSubstr+7]                      ; argument #1 for method nextarg, 0x16081
0000000000002cfd         call       nextarg                                     ; nextarg
0000000000002d02         test       al, al
0000000000002d04         je         loc_2f60

0000000000002d0a         mov        edi, r15d                                   ; argument #1 for method eval
0000000000002d0d         call       eval                                        ; eval
0000000000002d12         mov        r13, rax
0000000000002d15         mov        rax, qword [args]                           ; args
0000000000002d1c         cmp        qword [rax], 0x0
0000000000002d20         je         loc_37c8

0000000000002d26         lea        rdi, qword [aSSn+9]                         ; argument #1 for method nextarg, 0x1671d
0000000000002d2d         call       nextarg                                     ; nextarg
0000000000002d32         test       al, al
0000000000002d34         jne        loc_2da2

0000000000002d36         mov        rax, qword [args]                           ; args
0000000000002d3d         mov        esi, 0x8
0000000000002d42         xor        edi, edi
0000000000002d44         mov        rdx, qword [rax]
0000000000002d47         call       quotearg_n_style                            ; quotearg_n_style
0000000000002d4c         lea        rsi, qword [aSyntaxErrorExp]                ; argument "msgid" for method j_dcgettext, "syntax error: expecting ')' instead of %s"
0000000000002d53         mov        rbx, rax
0000000000002d56         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002d5b         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002d5d         call       j_dcgettext                                 ; dcgettext
0000000000002d62         mov        rcx, rbx
0000000000002d65         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002d68         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002d6a         mov        edi, 0x2                                    ; argument "__status" for method j_error
0000000000002d6f         xor        eax, eax
0000000000002d71         call       j_error                                     ; error
0000000000002d76         nop        word [cs:rax+rax]

                     loc_2d80:
0000000000002d80         call       require_more_args                           ; require_more_args, CODE XREF=eval6+52

                     loc_2d85:
0000000000002d85         mov        rax, qword [args]                           ; args, CODE XREF=eval6+782
0000000000002d8c         mov        rdi, qword [rax]                            ; argument #1 for method str_value
0000000000002d8f         lea        rdx, qword [rax+8]
0000000000002d93         mov        qword [args], rdx                           ; args
0000000000002d9a         call       str_value                                   ; str_value
0000000000002d9f         mov        r13, rax

                     loc_2da2:
0000000000002da2         mov        rcx, qword [rsp+0x138+var_40]               ; CODE XREF=eval6+212, eval6+438, eval6+763, eval6+930, eval6+983
0000000000002daa         xor        rcx, qword [fs:0x28]
0000000000002db3         mov        rax, r13
0000000000002db6         jne        loc_3780

0000000000002dbc         add        rsp, 0x108
0000000000002dc3         pop        rbx
0000000000002dc4         pop        rbp
0000000000002dc5         pop        r12
0000000000002dc7         pop        r13
0000000000002dc9         pop        r14
0000000000002dcb         pop        r15
0000000000002dcd         ret
                        ; endp
0000000000002dce         align      16

                     loc_2dd0:
0000000000002dd0         mov        edi, r15d                                   ; argument #1 for method eval6, CODE XREF=eval6+76
0000000000002dd3         call       eval6                                       ; eval6
0000000000002dd8         mov        rbx, rax
0000000000002ddb         mov        rdi, rax
0000000000002dde         call       tostring                                    ; tostring
0000000000002de3         mov        rdi, qword [rbx+8]
0000000000002de7         call       mbslen                                      ; mbslen
0000000000002dec         mov        edi, 0x18
0000000000002df1         mov        rbp, rax
0000000000002df4         call       xmalloc                                     ; xmalloc
0000000000002df9         lea        rdi, qword [rax+8]                          ; argument #1 for method j___gmpz_init_set_ui
0000000000002dfd         mov        dword [rax], 0x0
0000000000002e03         mov        rsi, rbp                                    ; argument #2 for method j___gmpz_init_set_ui
0000000000002e06         mov        r13, rax
0000000000002e09         call       j___gmpz_init_set_ui                        ; __gmpz_init_set_ui
0000000000002e0e         mov        rdi, rbx                                    ; argument #1 for method freev
0000000000002e11         call       freev                                       ; freev
0000000000002e16         jmp        loc_2da2
0000000000002e18         align      32

                     loc_2e20:
0000000000002e20         mov        edi, r15d                                   ; argument #1 for method eval6, CODE XREF=eval6+139
0000000000002e23         call       eval6                                       ; eval6
0000000000002e28         mov        edi, r15d                                   ; argument #1 for method eval6
0000000000002e2b         mov        rbp, rax
0000000000002e2e         call       eval6                                       ; eval6
0000000000002e33         mov        edi, r15d                                   ; argument #1 for method eval6
0000000000002e36         mov        rbx, rax
0000000000002e39         call       eval6                                       ; eval6
0000000000002e3e         mov        rdi, rbp
0000000000002e41         mov        r12, rax
0000000000002e44         call       tostring                                    ; tostring
0000000000002e49         mov        rdi, rbx
0000000000002e4c         call       toarith                                     ; toarith
0000000000002e51         test       al, al
0000000000002e53         je         loc_3010

0000000000002e59         mov        rdi, r12
0000000000002e5c         call       toarith                                     ; toarith
0000000000002e61         test       al, al
0000000000002e63         je         loc_3010

0000000000002e69         mov        edx, dword [rbx+0xc]
0000000000002e6c         mov        r13, 0xffffffffffffffff
0000000000002e73         test       edx, edx
0000000000002e75         js         loc_2e87

0000000000002e77         cmp        edx, 0x1
0000000000002e7a         mov        r13, 0xfffffffffffffffe
0000000000002e81         jle        loc_36da

                     loc_2e87:
0000000000002e87         mov        eax, dword [r12+0xc]                        ; CODE XREF=eval6+533, eval6+2714, eval6+2831, eval6+2843
0000000000002e8c         mov        r15, 0xffffffffffffffff
0000000000002e93         test       eax, eax
0000000000002e95         js         loc_2ea7

0000000000002e97         cmp        eax, 0x1
0000000000002e9a         mov        r15, 0xfffffffffffffffe
0000000000002ea1         jle        loc_36b6

                     loc_2ea7:
0000000000002ea7         mov        rax, qword [rbp+8]                          ; CODE XREF=eval6+565, eval6+2677, eval6+2820
0000000000002eab         mov        rdi, rax                                    ; argument "__s" for method j_strlen
0000000000002eae         mov        qword [rsp+0x138+var_130], rax
0000000000002eb3         call       j_strlen                                    ; strlen
0000000000002eb8         mov        qword [rsp+0x138+var_138], rax
0000000000002ebc         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max
0000000000002ec1         cmp        rax, 0x1
0000000000002ec5         mov        rdx, qword [rsp+0x138+var_138]
0000000000002ec9         jbe        loc_2ed8

0000000000002ecb         mov        rdi, qword [rsp+0x138+var_130]
0000000000002ed0         call       mbslen                                      ; mbslen
0000000000002ed5         mov        rdx, rax

                     loc_2ed8:
0000000000002ed8         cmp        r13, rdx                                    ; CODE XREF=eval6+617
0000000000002edb         ja         loc_2ef0

0000000000002edd         test       r14b, r14b
0000000000002ee0         jne        loc_2ef0

0000000000002ee2         lea        rax, qword [r15-1]
0000000000002ee6         cmp        rax, 0xfffffffffffffffd
0000000000002eea         jbe        loc_343a

                     loc_2ef0:
0000000000002ef0         lea        rdi, qword [aWrittenBySSAnd+27]             ; 0x16761, CODE XREF=eval6+635, eval6+640
0000000000002ef7         call       xstrdup                                     ; xstrdup
0000000000002efc         mov        qword [rsp+0x138+var_138], rax

                     loc_2f00:
0000000000002f00         mov        r14, qword [rsp+0x138+var_138]              ; CODE XREF=eval6+2611
0000000000002f04         mov        rdi, r14                                    ; argument #1 for method str_value
0000000000002f07         call       str_value                                   ; str_value
0000000000002f0c         mov        rdi, r14                                    ; argument "__ptr" for method j_free
0000000000002f0f         mov        r13, rax
0000000000002f12         call       j_free                                      ; free
0000000000002f17         jmp        loc_301f
0000000000002f1c         align      32

                     loc_2f20:
0000000000002f20         mov        edi, r15d                                   ; argument #1 for method eval6, CODE XREF=eval6+96
0000000000002f23         call       eval6                                       ; eval6
0000000000002f28         mov        edi, r15d                                   ; argument #1 for method eval6
0000000000002f2b         mov        r13, rax
0000000000002f2e         call       eval6                                       ; eval6
0000000000002f33         test       bl, bl
0000000000002f35         mov        rbp, rax
0000000000002f38         je         loc_2f53

0000000000002f3a         mov        rdi, r13
0000000000002f3d         mov        rsi, rax
0000000000002f40         call       docolon                                     ; docolon
0000000000002f45         mov        rbx, rax
0000000000002f48         mov        rdi, r13                                    ; argument #1 for method freev
0000000000002f4b         mov        r13, rbx
0000000000002f4e         call       freev                                       ; freev

                     loc_2f53:
0000000000002f53         mov        rdi, rbp                                    ; argument #1 for method freev, CODE XREF=eval6+728
0000000000002f56         call       freev                                       ; freev
0000000000002f5b         jmp        loc_2da2

                     loc_2f60:
0000000000002f60         lea        rdi, qword [aSSn+9]                         ; argument #1 for method nextarg, 0x1671d, CODE XREF=eval6+164
0000000000002f67         call       nextarg                                     ; nextarg
0000000000002f6c         test       al, al
0000000000002f6e         je         loc_2d85

0000000000002f74         lea        rsi, qword [aSyntaxErrorUne]                ; argument "msgid" for method j_dcgettext, "syntax error: unexpected ')'"
0000000000002f7b         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002f80         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002f82         call       j_dcgettext                                 ; dcgettext
0000000000002f87         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002f89         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002f8c         mov        edi, 0x2                                    ; argument "__status" for method j_error
0000000000002f91         xor        eax, eax
0000000000002f93         call       j_error                                     ; error
0000000000002f98         nop        dword [rax+rax]

                     loc_2fa0:
0000000000002fa0         mov        edi, r15d                                   ; argument #1 for method eval6, CODE XREF=eval6+119
0000000000002fa3         call       eval6                                       ; eval6
0000000000002fa8         mov        edi, r15d                                   ; argument #1 for method eval6
0000000000002fab         mov        r12, rax
0000000000002fae         call       eval6                                       ; eval6
0000000000002fb3         mov        rdi, r12
0000000000002fb6         mov        rbx, rax
0000000000002fb9         call       tostring                                    ; tostring
0000000000002fbe         mov        rdi, rbx
0000000000002fc1         call       tostring                                    ; tostring
0000000000002fc6         mov        r13, qword [rbx+8]
0000000000002fca         cmp        byte [r13], 0x0
0000000000002fcf         jne        loc_3040

                     loc_2fd1:
0000000000002fd1         xor        ebp, ebp                                    ; CODE XREF=eval6+1024, eval6+1163, eval6+1391

                     loc_2fd3:
0000000000002fd3         mov        edi, 0x18                                   ; CODE XREF=eval6+1034, eval6+1192, eval6+1559, eval6+1827
0000000000002fd8         call       xmalloc                                     ; xmalloc
0000000000002fdd         lea        rdi, qword [rax+8]                          ; argument #1 for method j___gmpz_init_set_ui
0000000000002fe1         mov        dword [rax], 0x0
0000000000002fe7         mov        rsi, rbp                                    ; argument #2 for method j___gmpz_init_set_ui
0000000000002fea         mov        r13, rax
0000000000002fed         call       j___gmpz_init_set_ui                        ; __gmpz_init_set_ui
0000000000002ff2         mov        rdi, r12                                    ; argument #1 for method freev
0000000000002ff5         call       freev                                       ; freev
0000000000002ffa         mov        rdi, rbx                                    ; argument #1 for method freev
0000000000002ffd         call       freev                                       ; freev
0000000000003002         jmp        loc_2da2
0000000000003007         align      16

                     loc_3010:
0000000000003010         lea        rdi, qword [aWrittenBySSAnd+27]             ; argument #1 for method str_value, 0x16761, CODE XREF=eval6+499, eval6+515
0000000000003017         call       str_value                                   ; str_value
000000000000301c         mov        r13, rax

                     loc_301f:
000000000000301f         mov        rdi, rbp                                    ; argument #1 for method freev, CODE XREF=eval6+695
0000000000003022         call       freev                                       ; freev
0000000000003027         mov        rdi, rbx                                    ; argument #1 for method freev
000000000000302a         call       freev                                       ; freev
000000000000302f         mov        rdi, r12                                    ; argument #1 for method freev
0000000000003032         call       freev                                       ; freev
0000000000003037         jmp        loc_2da2
000000000000303c         align      64

                     loc_3040:
0000000000003040         mov        r14, qword [r12+8]                          ; CODE XREF=eval6+879
0000000000003045         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max
000000000000304a         cmp        rax, 0x1
000000000000304e         ja         loc_3070

0000000000003050         mov        rsi, r13                                    ; argument "__reject" for method j_strcspn
0000000000003053         mov        rdi, r14                                    ; argument "__s" for method j_strcspn
0000000000003056         call       j_strcspn                                   ; strcspn
000000000000305b         cmp        byte [r14+rax], 0x0
0000000000003060         je         loc_2fd1

0000000000003066         lea        rbp, qword [rax+1]
000000000000306a         jmp        loc_2fd3
000000000000306f         align      16

                     loc_3070:
0000000000003070         mov        qword [rsp+0x138+var_F8], r14               ; CODE XREF=eval6+1006
0000000000003075         lea        r14, qword [rsp+0x138+var_C8]
000000000000307a         mov        byte [rsp+0x138+var_108], 0x0
000000000000307f         xor        ebp, ebp
0000000000003081         cmp        byte [rsp+0x138+var_108], 0x0
0000000000003086         mov        qword [rsp+0x138+var_104], 0x0
000000000000308f         lea        rax, qword [r14+0x24]
0000000000003093         mov        byte [rsp+0x138+var_FC], 0x0
0000000000003098         mov        qword [rsp+0x138+var_138], rax
000000000000309c         lea        rax, qword [rsp+0x138+var_108]
00000000000030a1         mov        qword [rsp+0x138+var_128], rax
00000000000030a6         jne        loc_312c

                     loc_30ac:
00000000000030ac         mov        rdi, qword [rsp+0x138+var_F8]               ; CODE XREF=eval6+1226
00000000000030b1         lea        rsi, qword [is_basic_table]                 ; is_basic_table
00000000000030b8         movzx      edx, byte [rdi]
00000000000030bb         mov        eax, edx
00000000000030bd         shr        al, 0x5
00000000000030c0         and        eax, 0x7
00000000000030c3         mov        eax, dword [rsi+rax*4]
00000000000030c6         bt         eax, edx
00000000000030c9         jae        loc_33ea

00000000000030cf         mov        qword [rsp+0x138+var_F0], 0x1
00000000000030d8         movsx      eax, byte [rdi]
00000000000030db         mov        byte [rsp+0x138+var_E8], 0x1
00000000000030e0         mov        byte [rsp+0x138+var_FC], 0x1
00000000000030e5         test       eax, eax
00000000000030e7         mov        dword [rsp+0x138+var_E4], eax
00000000000030eb         je         loc_2fd1

00000000000030f1         add        rbp, 0x1

                     loc_30f5:
00000000000030f5         movsx      esi, byte [rdi]                             ; CODE XREF=eval6+1414, eval6+1990
00000000000030f8         mov        qword [rsp+0x138+var_130], rdi
00000000000030fd         mov        rdi, r13
0000000000003100         call       mbschr                                      ; mbschr
0000000000003105         test       rax, rax
0000000000003108         jne        loc_2fd3

000000000000310e         mov        rdx, qword [rsp+0x138+var_130]
0000000000003113         mov        edi, 0x1

                     loc_3118:
0000000000003118         add        rdi, rdx                                    ; CODE XREF=eval6+2005
000000000000311b         cmp        byte [rsp+0x138+var_108], 0x0
0000000000003120         mov        byte [rsp+0x138+var_FC], 0x0
0000000000003125         mov        qword [rsp+0x138+var_F8], rdi
000000000000312a         je         loc_30ac

                     loc_312c:
000000000000312c         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max, CODE XREF=eval6+1094, eval6+1957
0000000000003131         mov        r8, qword [rsp+0x138+var_F8]
0000000000003136         mov        rsi, rax
0000000000003139         mov        rdi, r8
000000000000313c         mov        qword [rsp+0x138+var_130], r8
0000000000003141         call       strnlen1                                    ; strnlen1
0000000000003146         mov        rsi, qword [rsp+0x138+var_128]
000000000000314b         mov        r8, qword [rsp+0x138+var_130]
0000000000003150         mov        rdx, rax
0000000000003153         lea        rcx, qword [rsi+4]
0000000000003157         lea        rdi, qword [rsi+0x24]
000000000000315b         mov        rsi, r8
000000000000315e         call       rpl_mbrtowc                                 ; rpl_mbrtowc
0000000000003163         cmp        rax, 0xffffffffffffffff
0000000000003167         mov        qword [rsp+0x138+var_F0], rax
000000000000316c         je         loc_340a

0000000000003172         cmp        rax, 0xfffffffffffffffe
0000000000003176         je         loc_3698

000000000000317c         test       rax, rax
000000000000317f         jne        loc_31a4

0000000000003181         mov        rdi, qword [rsp+0x138+var_F8]
0000000000003186         mov        qword [rsp+0x138+var_F0], 0x1
000000000000318f         cmp        byte [rdi], 0x0
0000000000003192         jne        loc_37a9

0000000000003198         mov        esi, dword [rsp+0x138+var_E4]
000000000000319c         test       esi, esi
000000000000319e         jne        loc_37a4

                     loc_31a4:
00000000000031a4         mov        rax, qword [rsp+0x138+var_128]              ; CODE XREF=eval6+1311
00000000000031a9         mov        byte [rsp+0x138+var_E8], 0x1
00000000000031ae         lea        rdi, qword [rax+4]                          ; argument "__ps" for method j_mbsinit
00000000000031b2         call       j_mbsinit                                   ; mbsinit
00000000000031b7         test       eax, eax
00000000000031b9         je         loc_36ff

00000000000031bf         mov        byte [rsp+0x138+var_108], 0x0
00000000000031c4         mov        byte [rsp+0x138+var_FC], 0x1

                     loc_31c9:
00000000000031c9         mov        ecx, dword [rsp+0x138+var_E4]               ; CODE XREF=eval6+2724
00000000000031cd         test       ecx, ecx
00000000000031cf         je         loc_2fd1

                     loc_31d5:
00000000000031d5         add        rbp, 0x1                                    ; CODE XREF=eval6+2641
00000000000031d9         cmp        qword [rsp+0x138+var_F0], 0x1
00000000000031df         jne        loc_31f0

00000000000031e1         mov        rdi, qword [rsp+0x138+var_F8]
00000000000031e6         jmp        loc_30f5
00000000000031eb         align      16

                     loc_31f0:
00000000000031f0         mov        qword [rsp+0x138+var_B8], r13               ; CODE XREF=eval6+1407
00000000000031f8         mov        byte [rsp+0x138+var_C8], 0x0
00000000000031fd         mov        qword [r14+4], 0x0
0000000000003205         mov        byte [rsp+0x138+var_BC], 0x0
000000000000320a         jmp        loc_3292
000000000000320f         align      16

                     loc_3210:
0000000000003210         mov        rcx, qword [rsp+0x138+var_B8]               ; CODE XREF=eval6+1591
0000000000003218         lea        rsi, qword [is_basic_table]                 ; is_basic_table
000000000000321f         movzx      edx, byte [rcx]
0000000000003222         mov        eax, edx
0000000000003224         shr        al, 0x5
0000000000003227         and        eax, 0x7
000000000000322a         mov        eax, dword [rsi+rax*4]
000000000000322d         bt         eax, edx
0000000000003230         jae        loc_3390

0000000000003236         mov        qword [rsp+0x138+var_B0], 0x1
0000000000003242         movsx      eax, byte [rcx]
0000000000003245         mov        byte [rsp+0x138+var_A8], 0x1
000000000000324d         mov        byte [rsp+0x138+var_BC], 0x1
0000000000003252         mov        dword [rsp+0x138+var_A4], eax

                     loc_3259:
0000000000003259         mov        eax, dword [rsp+0x138+var_A4]               ; CODE XREF=eval6+1748, eval6+1925
0000000000003260         test       eax, eax
0000000000003262         je         loc_342b

0000000000003268         cmp        byte [rsp+0x138+var_E8], 0x0
000000000000326d         je         loc_3359

0000000000003273         cmp        dword [rsp+0x138+var_E4], eax
0000000000003277         je         loc_2fd3

000000000000327d         mov        r15, qword [rsp+0x138+var_B0]

                     loc_3285:
0000000000003285         add        qword [rsp+0x138+var_B8], r15               ; CODE XREF=eval6+1798, eval6+1833
000000000000328d         mov        byte [rsp+0x138+var_BC], 0x0

                     loc_3292:
0000000000003292         cmp        byte [rsp+0x138+var_C8], 0x0                ; CODE XREF=eval6+1450
0000000000003297         je         loc_3210

                     loc_329d:
000000000000329d         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max, CODE XREF=eval6+1862
00000000000032a2         mov        r15, qword [rsp+0x138+var_B8]
00000000000032aa         mov        rsi, rax
00000000000032ad         mov        rdi, r15
00000000000032b0         call       strnlen1                                    ; strnlen1
00000000000032b5         mov        rdi, qword [rsp+0x138+var_138]
00000000000032b9         lea        rcx, qword [r14+4]
00000000000032bd         mov        rdx, rax
00000000000032c0         mov        rsi, r15
00000000000032c3         call       rpl_mbrtowc                                 ; rpl_mbrtowc
00000000000032c8         cmp        rax, 0xffffffffffffffff
00000000000032cc         mov        qword [rsp+0x138+var_B0], rax
00000000000032d4         je         loc_3340

00000000000032d6         cmp        rax, 0xfffffffffffffffe
00000000000032da         je         loc_33b0

00000000000032e0         test       rax, rax
00000000000032e3         jne        loc_3311

00000000000032e5         mov        rax, qword [rsp+0x138+var_B8]
00000000000032ed         mov        qword [rsp+0x138+var_B0], 0x1
00000000000032f9         cmp        byte [rax], 0x0
00000000000032fc         jne        loc_37a9

0000000000003302         mov        edi, dword [rsp+0x138+var_A4]
0000000000003309         test       edi, edi
000000000000330b         jne        loc_37a4

                     loc_3311:
0000000000003311         lea        rdi, qword [r14+4]                          ; argument "__ps" for method j_mbsinit, CODE XREF=eval6+1667
0000000000003315         mov        byte [rsp+0x138+var_A8], 0x1
000000000000331d         call       j_mbsinit                                   ; mbsinit
0000000000003322         test       eax, eax
0000000000003324         je         loc_33e0

000000000000332a         mov        byte [rsp+0x138+var_C8], 0x0
000000000000332f         mov        byte [rsp+0x138+var_BC], 0x1
0000000000003334         jmp        loc_3259
0000000000003339         align      64

                     loc_3340:
0000000000003340         mov        qword [rsp+0x138+var_B0], 0x1               ; CODE XREF=eval6+1652
000000000000334c         mov        byte [rsp+0x138+var_A8], 0x0
0000000000003354         mov        byte [rsp+0x138+var_BC], 0x1

                     loc_3359:
0000000000003359         mov        r15, qword [rsp+0x138+var_B0]               ; CODE XREF=eval6+1549, eval6+1906
0000000000003361         cmp        r15, qword [rsp+0x138+var_F0]
0000000000003366         jne        loc_3285

000000000000336c         mov        rsi, qword [rsp+0x138+var_F8]               ; argument "__s2" for method j_memcmp
0000000000003371         mov        rdi, qword [rsp+0x138+var_B8]               ; argument "__s1" for method j_memcmp
0000000000003379         mov        rdx, r15                                    ; argument "__n" for method j_memcmp
000000000000337c         call       j_memcmp                                    ; memcmp
0000000000003381         test       eax, eax
0000000000003383         je         loc_2fd3

0000000000003389         jmp        loc_3285
000000000000338e         align      16

                     loc_3390:
0000000000003390         lea        rdi, qword [r14+4]                          ; argument "__ps" for method j_mbsinit, CODE XREF=eval6+1488
0000000000003394         call       j_mbsinit                                   ; mbsinit
0000000000003399         test       eax, eax
000000000000339b         je         loc_3785

00000000000033a1         mov        byte [rsp+0x138+var_C8], 0x1
00000000000033a6         jmp        loc_329d
00000000000033ab         align      16

                     loc_33b0:
00000000000033b0         mov        rdi, qword [rsp+0x138+var_B8]               ; argument "__s" for method j_strlen, CODE XREF=eval6+1658
00000000000033b8         call       j_strlen                                    ; strlen
00000000000033bd         mov        byte [rsp+0x138+var_A8], 0x0
00000000000033c5         mov        qword [rsp+0x138+var_B0], rax
00000000000033cd         mov        byte [rsp+0x138+var_BC], 0x1
00000000000033d2         jmp        loc_3359
00000000000033d7         align      32

                     loc_33e0:
00000000000033e0         mov        byte [rsp+0x138+var_BC], 0x1                ; CODE XREF=eval6+1732
00000000000033e5         jmp        loc_3259

                     loc_33ea:
00000000000033ea         mov        rax, qword [rsp+0x138+var_128]              ; CODE XREF=eval6+1129
00000000000033ef         lea        rdi, qword [rax+4]                          ; argument "__ps" for method j_mbsinit
00000000000033f3         call       j_mbsinit                                   ; mbsinit
00000000000033f8         test       eax, eax
00000000000033fa         je         loc_3785

0000000000003400         mov        byte [rsp+0x138+var_108], 0x1
0000000000003405         jmp        loc_312c

                     loc_340a:
000000000000340a         mov        qword [rsp+0x138+var_F0], 0x1               ; CODE XREF=eval6+1292
0000000000003413         mov        byte [rsp+0x138+var_E8], 0x0
0000000000003418         add        rbp, 0x1
000000000000341c         mov        byte [rsp+0x138+var_FC], 0x1
0000000000003421         mov        rdi, qword [rsp+0x138+var_F8]
0000000000003426         jmp        loc_30f5

                     loc_342b:
000000000000342b         mov        rdx, qword [rsp+0x138+var_F8]               ; CODE XREF=eval6+1538
0000000000003430         mov        rdi, qword [rsp+0x138+var_F0]
0000000000003435         jmp        loc_3118

                     loc_343a:
000000000000343a         sub        rdx, r13                                    ; CODE XREF=eval6+650
000000000000343d         lea        rax, qword [rdx+1]
0000000000003441         cmp        rax, r15
0000000000003444         cmovbe     r15, rax
0000000000003448         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max
000000000000344d         cmp        rax, 0x1
0000000000003451         je         loc_3664

0000000000003457         mov        rdi, qword [rsp+0x138+var_138]
000000000000345b         mov        r14d, 0x1
0000000000003461         add        rdi, 0x1
0000000000003465         call       xmalloc                                     ; xmalloc
000000000000346a         mov        rsi, qword [rsp+0x138+var_130]
000000000000346f         mov        qword [rsp+0x138+var_138], rax
0000000000003473         mov        qword [rsp+0x138+var_130], rax
0000000000003478         lea        rax, qword [rsp+0x138+var_88]
0000000000003480         mov        byte [rsp+0x138+var_88], 0x0
0000000000003488         mov        qword [rsp+0x138+var_84], 0x0
0000000000003494         mov        byte [rsp+0x138+var_7C], 0x0
000000000000349c         mov        qword [rsp+0x138+var_118], rax
00000000000034a1         lea        rax, qword [rsp+0x138+var_84]
00000000000034a9         mov        qword [rsp+0x138+var_78], rsi
00000000000034b1         mov        qword [rsp+0x138+var_110], rax
00000000000034b6         jmp        loc_357d
00000000000034bb         align      64

                     loc_34c0:
00000000000034c0         mov        rcx, qword [rsp+0x138+var_78]               ; CODE XREF=eval6+2341
00000000000034c8         lea        rsi, qword [is_basic_table]                 ; is_basic_table
00000000000034cf         movzx      edx, byte [rcx]
00000000000034d2         mov        eax, edx
00000000000034d4         shr        al, 0x5
00000000000034d7         and        eax, 0x7
00000000000034da         mov        eax, dword [rsi+rax*4]
00000000000034dd         bt         eax, edx
00000000000034e0         jae        loc_3645

00000000000034e6         mov        qword [rsp+0x138+var_70], 0x1
00000000000034f2         movsx      eax, byte [rcx]
00000000000034f5         mov        byte [rsp+0x138+var_68], 0x1
00000000000034fd         mov        byte [rsp+0x138+var_7C], 0x1
0000000000003505         mov        dword [rsp+0x138+var_64], eax

                     loc_350c:
000000000000350c         mov        eax, dword [rsp+0x138+var_64]               ; CODE XREF=eval6+2528, eval6+2812
0000000000003513         test       eax, eax
0000000000003515         je         loc_368b

                     loc_351b:
000000000000351b         test       r15, r15                                    ; CODE XREF=eval6+2757, eval6+2799
000000000000351e         je         loc_368b

0000000000003524         cmp        r13, r14
0000000000003527         mov        r8, qword [rsp+0x138+var_70]
000000000000352f         mov        rcx, qword [rsp+0x138+var_78]
0000000000003537         ja         loc_3566

0000000000003539         mov        rdi, qword [rsp+0x138+var_130]              ; argument "__dest" for method j_mempcpy
000000000000353e         mov        rdx, r8                                     ; argument "__n" for method j_mempcpy
0000000000003541         mov        rsi, rcx                                    ; argument "__src" for method j_mempcpy
0000000000003544         mov        qword [rsp+0x138+var_120], r8
0000000000003549         mov        qword [rsp+0x138+var_128], rcx
000000000000354e         sub        r15, 0x1
0000000000003552         call       j_mempcpy                                   ; mempcpy
0000000000003557         mov        r8, qword [rsp+0x138+var_120]
000000000000355c         mov        rcx, qword [rsp+0x138+var_128]
0000000000003561         mov        qword [rsp+0x138+var_130], rax

                     loc_3566:
0000000000003566         add        rcx, r8                                     ; CODE XREF=eval6+2263
0000000000003569         mov        byte [rsp+0x138+var_7C], 0x0
0000000000003571         add        r14, 0x1
0000000000003575         mov        qword [rsp+0x138+var_78], rcx

                     loc_357d:
000000000000357d         cmp        byte [rsp+0x138+var_88], 0x0                ; CODE XREF=eval6+2134
0000000000003585         je         loc_34c0

                     loc_358b:
000000000000358b         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max, CODE XREF=eval6+2559
0000000000003590         mov        r8, qword [rsp+0x138+var_78]
0000000000003598         mov        rsi, rax
000000000000359b         mov        rdi, r8
000000000000359e         mov        qword [rsp+0x138+var_128], r8
00000000000035a3         call       strnlen1                                    ; strnlen1
00000000000035a8         mov        rsi, qword [rsp+0x138+var_118]
00000000000035ad         mov        r8, qword [rsp+0x138+var_128]
00000000000035b2         mov        rdx, rax
00000000000035b5         lea        rcx, qword [rsi+4]
00000000000035b9         lea        rdi, qword [rsi+0x24]
00000000000035bd         mov        rsi, r8
00000000000035c0         call       rpl_mbrtowc                                 ; rpl_mbrtowc
00000000000035c5         cmp        rax, 0xffffffffffffffff
00000000000035c9         mov        qword [rsp+0x138+var_70], rax
00000000000035d1         je         loc_3709

00000000000035d7         cmp        rax, 0xfffffffffffffffe
00000000000035db         je         loc_372a

00000000000035e1         test       rax, rax
00000000000035e4         jne        loc_3612

00000000000035e6         mov        rax, qword [rsp+0x138+var_78]
00000000000035ee         mov        qword [rsp+0x138+var_70], 0x1
00000000000035fa         cmp        byte [rax], 0x0
00000000000035fd         jne        loc_37a9

0000000000003603         mov        edx, dword [rsp+0x138+var_64]
000000000000360a         test       edx, edx
000000000000360c         jne        loc_37a4

                     loc_3612:
0000000000003612         mov        rax, qword [rsp+0x138+var_118]              ; CODE XREF=eval6+2436
0000000000003617         mov        byte [rsp+0x138+var_68], 0x1
000000000000361f         lea        rdi, qword [rax+4]                          ; argument "__ps" for method j_mbsinit
0000000000003623         call       j_mbsinit                                   ; mbsinit
0000000000003628         test       eax, eax
000000000000362a         je         loc_3754

0000000000003630         mov        byte [rsp+0x138+var_88], 0x0
0000000000003638         mov        byte [rsp+0x138+var_7C], 0x1
0000000000003640         jmp        loc_350c

                     loc_3645:
0000000000003645         mov        rdi, qword [rsp+0x138+var_110]              ; argument "__ps" for method j_mbsinit, CODE XREF=eval6+2176
000000000000364a         call       j_mbsinit                                   ; mbsinit
000000000000364f         test       eax, eax
0000000000003651         je         loc_3785

0000000000003657         mov        byte [rsp+0x138+var_88], 0x1
000000000000365f         jmp        loc_358b

                     loc_3664:
0000000000003664         lea        rdi, qword [r15+1]                          ; CODE XREF=eval6+2033
0000000000003668         call       xmalloc                                     ; xmalloc
000000000000366d         mov        rsi, qword [rsp+0x138+var_130]
0000000000003672         mov        rdx, r15                                    ; argument "__n" for method j_mempcpy
0000000000003675         mov        rdi, rax                                    ; argument "__dest" for method j_mempcpy
0000000000003678         mov        qword [rsp+0x138+var_138], rax
000000000000367c         lea        rsi, qword [rsi+r13-1]                      ; argument "__src" for method j_mempcpy
0000000000003681         call       j_mempcpy                                   ; mempcpy
0000000000003686         mov        qword [rsp+0x138+var_130], rax

                     loc_368b:
000000000000368b         mov        rax, qword [rsp+0x138+var_130]              ; CODE XREF=eval6+2229, eval6+2238
0000000000003690         mov        byte [rax], 0x0
0000000000003693         jmp        loc_2f00

                     loc_3698:
0000000000003698         mov        rdi, qword [rsp+0x138+var_F8]               ; argument "__s" for method j_strlen, CODE XREF=eval6+1302
000000000000369d         call       j_strlen                                    ; strlen
00000000000036a2         mov        byte [rsp+0x138+var_E8], 0x0
00000000000036a7         mov        qword [rsp+0x138+var_F0], rax
00000000000036ac         mov        byte [rsp+0x138+var_FC], 0x1
00000000000036b1         jmp        loc_31d5

                     loc_36b6:
00000000000036b6         mov        rdx, qword [r12+0x10]                       ; CODE XREF=eval6+577
00000000000036bb         test       eax, eax
00000000000036bd         mov        r15, qword [rdx]
00000000000036c0         je         loc_3761

00000000000036c6         cmp        r15, 0xffffffffffffffff
00000000000036ca         mov        rax, 0xfffffffffffffffe
00000000000036d1         cmove      r15, rax
00000000000036d5         jmp        loc_2ea7

                     loc_36da:
00000000000036da         mov        rcx, qword [rbx+0x10]                       ; CODE XREF=eval6+545
00000000000036de         test       edx, edx
00000000000036e0         mov        r13, qword [rcx]
00000000000036e3         je         loc_3769

00000000000036e9         cmp        r13, 0xffffffffffffffff
00000000000036ed         je         loc_3774

00000000000036f3         test       r13, r13
00000000000036f6         sete       r14b
00000000000036fa         jmp        loc_2e87

                     loc_36ff:
00000000000036ff         mov        byte [rsp+0x138+var_FC], 0x1                ; CODE XREF=eval6+1369
0000000000003704         jmp        loc_31c9

                     loc_3709:
0000000000003709         mov        qword [rsp+0x138+var_70], 0x1               ; CODE XREF=eval6+2417
0000000000003715         mov        byte [rsp+0x138+var_68], 0x0
000000000000371d         mov        byte [rsp+0x138+var_7C], 0x1
0000000000003725         jmp        loc_351b

                     loc_372a:
000000000000372a         mov        rdi, qword [rsp+0x138+var_78]               ; argument "__s" for method j_strlen, CODE XREF=eval6+2427
0000000000003732         call       j_strlen                                    ; strlen
0000000000003737         mov        byte [rsp+0x138+var_68], 0x0
000000000000373f         mov        qword [rsp+0x138+var_70], rax
0000000000003747         mov        byte [rsp+0x138+var_7C], 0x1
000000000000374f         jmp        loc_351b

                     loc_3754:
0000000000003754         mov        byte [rsp+0x138+var_7C], 0x1                ; CODE XREF=eval6+2506
000000000000375c         jmp        loc_350c

                     loc_3761:
0000000000003761         xor        r15d, r15d                                  ; CODE XREF=eval6+2656
0000000000003764         jmp        loc_2ea7

                     loc_3769:
0000000000003769         mov        r14d, eax                                   ; CODE XREF=eval6+2691
000000000000376c         xor        r13d, r13d
000000000000376f         jmp        loc_2e87

                     loc_3774:
0000000000003774         mov        r13, 0xfffffffffffffffe                     ; CODE XREF=eval6+2701
000000000000377b         jmp        loc_2e87

                     loc_3780:
0000000000003780         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=eval6+342
                        ; endp

                     loc_3785:
0000000000003785         lea        rcx, qword [__PRETTY_FUNCTION__.7929]       ; argument "__function" for method j___assert_fail, "mbuiter_multi_next", CODE XREF=eval6+1851, eval6+1946, eval6+2545
000000000000378c         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/mbuiter.h"
0000000000003793         lea        rdi, qword [aMbsinitItersta]                ; argument "__assertion" for method j___assert_fail, "mbsinit (&iter->state)"
000000000000379a         mov        edx, 0x96                                   ; argument "__line" for method j___assert_fail
000000000000379f         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_37a4:
00000000000037a4         call       mbuiter_multi_next.part.2                   ; mbuiter_multi_next.part.2, CODE XREF=eval6+1342, eval6+1707, eval6+2476
                        ; endp

                     loc_37a9:
00000000000037a9         lea        rcx, qword [__PRETTY_FUNCTION__.7929]       ; argument "__function" for method j___assert_fail, "mbuiter_multi_next", CODE XREF=eval6+1330, eval6+1692, eval6+2461
00000000000037b0         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/mbuiter.h"
00000000000037b7         lea        rdi, qword [aItercurptr0]                   ; argument "__assertion" for method j___assert_fail, "*iter->cur.ptr == '\\0'"
00000000000037be         mov        edx, 0xb2                                   ; argument "__line" for method j___assert_fail
00000000000037c3         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_37c8:
00000000000037c8         mov        rdx, qword [rax-8]                          ; CODE XREF=eval6+192
00000000000037cc         mov        esi, 0x8
00000000000037d1         xor        edi, edi
00000000000037d3         call       quotearg_n_style                            ; quotearg_n_style
00000000000037d8         lea        rsi, qword [aSyntaxErrorExp_15f00]          ; argument "msgid" for method j_dcgettext, "syntax error: expecting ')' after %s"
00000000000037df         mov        rbx, rax
00000000000037e2         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000037e7         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000037e9         call       j_dcgettext                                 ; dcgettext
00000000000037ee         mov        rcx, rbx
00000000000037f1         mov        rdx, rax                                    ; argument "__format" for method j_error
00000000000037f4         xor        esi, esi                                    ; argument "__errnum" for method j_error
00000000000037f6         mov        edi, 0x2                                    ; argument "__status" for method j_error
00000000000037fb         xor        eax, eax
00000000000037fd         call       j_error                                     ; error
0000000000003802         nop        dword [rax]                                 ; End of unwind block (FDE at 0x17b08)
0000000000003806         nop        word [cs:rax+rax]
                     eval5:
0000000000003810         push       r15                                         ; Begin of unwind block (FDE at 0x17b58), CODE XREF=eval4+18, eval4+60
0000000000003812         push       r14
0000000000003814         mov        r14d, edi
0000000000003817         push       r13
0000000000003819         push       r12
000000000000381b         lea        r12, qword [aSyntaxErrorUne+29]             ; 0x160a0
0000000000003822         push       rbp
0000000000003823         push       rbx
0000000000003824         movzx      ebp, dil
0000000000003828         mov        edi, ebp                                    ; argument #1 for method eval6
000000000000382a         sub        rsp, 0x8
000000000000382e         call       eval6                                       ; eval6
0000000000003833         mov        r13, rax
0000000000003836         jmp        loc_3848
0000000000003838         align      64

                     loc_3840:
0000000000003840         mov        rdi, rbx                                    ; argument #1 for method freev, CODE XREF=eval5+81, eval5+108
0000000000003843         call       freev                                       ; freev

                     loc_3848:
0000000000003848         mov        rdi, r12                                    ; argument #1 for method nextarg, CODE XREF=eval5+38
000000000000384b         call       nextarg                                     ; nextarg
0000000000003850         test       al, al
0000000000003852         je         loc_3880

0000000000003854         mov        edi, ebp                                    ; argument #1 for method eval6
0000000000003856         call       eval6                                       ; eval6
000000000000385b         test       r14b, r14b
000000000000385e         mov        rbx, rax
0000000000003861         je         loc_3840

0000000000003863         mov        rdi, r13
0000000000003866         mov        rsi, rax
0000000000003869         call       docolon                                     ; docolon
000000000000386e         mov        rdi, r13                                    ; argument #1 for method freev
0000000000003871         mov        r15, rax
0000000000003874         mov        r13, r15
0000000000003877         call       freev                                       ; freev
000000000000387c         jmp        loc_3840
000000000000387e         align      128

                     loc_3880:
0000000000003880         add        rsp, 0x8                                    ; CODE XREF=eval5+66
0000000000003884         mov        rax, r13
0000000000003887         pop        rbx
0000000000003888         pop        rbp
0000000000003889         pop        r12
000000000000388b         pop        r13
000000000000388d         pop        r14
000000000000388f         pop        r15
0000000000003891         ret
                        ; endp
0000000000003892         align      32                                          ; End of unwind block (FDE at 0x17b58)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     eval4:
00000000000038a0         push       r14                                         ; Begin of unwind block (FDE at 0x17ba0), CODE XREF=eval3+18, eval3+56
00000000000038a2         push       r13
00000000000038a4         mov        r14d, edi
00000000000038a7         push       r12
00000000000038a9         movzx      r12d, dil
00000000000038ad         push       rbp
00000000000038ae         push       rbx
00000000000038af         mov        edi, r12d
00000000000038b2         call       eval5                                       ; eval5
00000000000038b7         mov        r13, rax
00000000000038ba         jmp        loc_3939
00000000000038bc         align      64

                     loc_38c0:
00000000000038c0         lea        rdi, qword [aLibs+6]                        ; 0x16236, CODE XREF=eval4+167
00000000000038c7         mov        ebp, 0x1
00000000000038cc         call       nextarg                                     ; nextarg
00000000000038d1         test       al, al
00000000000038d3         je         loc_3968

                     loc_38d9:
00000000000038d9         mov        edi, r12d                                   ; CODE XREF=eval4+175, eval4+221
00000000000038dc         call       eval5                                       ; eval5
00000000000038e1         test       r14b, r14b
00000000000038e4         mov        rbx, rax
00000000000038e7         je         loc_3931

00000000000038e9         mov        rdi, r13
00000000000038ec         call       toarith                                     ; toarith
00000000000038f1         test       al, al
00000000000038f3         je         loc_399d

00000000000038f9         mov        rdi, rbx
00000000000038fc         call       toarith                                     ; toarith
0000000000003901         test       al, al
0000000000003903         je         loc_399d

0000000000003909         test       ebp, ebp
000000000000390b         je         loc_3958

000000000000390d         mov        eax, dword [rbx+0xc]
0000000000003910         test       eax, eax
0000000000003912         je         loc_39c1

0000000000003918         cmp        ebp, 0x1
000000000000391b         je         loc_3988

000000000000391d         mov        rax, qword [qword_21afc8]                   ; qword_21afc8

                     loc_3924:
0000000000003924         lea        rdi, qword [r13+8]                          ; CODE XREF=eval4+191, eval4+239
0000000000003928         lea        rdx, qword [rbx+8]
000000000000392c         mov        rsi, rdi
000000000000392f         call       rax

                     loc_3931:
0000000000003931         mov        rdi, rbx                                    ; CODE XREF=eval4+71
0000000000003934         call       freev                                       ; freev

                     loc_3939:
0000000000003939         lea        rdi, qword [aSyntaxErrorUne+31]             ; 0x160a2, CODE XREF=eval4+26
0000000000003940         call       nextarg                                     ; nextarg
0000000000003945         test       al, al
0000000000003947         je         loc_38c0

000000000000394d         xor        ebp, ebp
000000000000394f         jmp        loc_38d9
0000000000003951         align      8

                     loc_3958:
0000000000003958         mov        rax, qword [qword_21afb0]                   ; qword_21afb0, CODE XREF=eval4+107
000000000000395f         jmp        loc_3924
0000000000003961         align      8

                     loc_3968:
0000000000003968         lea        rdi, qword [aSyntaxErrorUne+33]             ; 0x160a4, CODE XREF=eval4+51
000000000000396f         call       nextarg                                     ; nextarg
0000000000003974         test       al, al
0000000000003976         je         loc_3991

0000000000003978         mov        ebp, 0x2
000000000000397d         jmp        loc_38d9
0000000000003982         align      8

                     loc_3988:
0000000000003988         mov        rax, qword [qword_21af98]                   ; qword_21af98, CODE XREF=eval4+123
000000000000398f         jmp        loc_3924

                     loc_3991:
0000000000003991         pop        rbx                                         ; CODE XREF=eval4+214
0000000000003992         mov        rax, r13
0000000000003995         pop        rbp
0000000000003996         pop        r12
0000000000003998         pop        r13
000000000000399a         pop        r14
000000000000399c         ret
                        ; endp

                     loc_399d:
000000000000399d         lea        rsi, qword [aNonintegerArgu]                ; argument "msgid" for method j_dcgettext, "non-integer argument", CODE XREF=eval4+83, eval4+99
00000000000039a4         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000039a9         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000039ab         call       j_dcgettext                                 ; dcgettext
00000000000039b0         xor        esi, esi                                    ; argument "__errnum" for method j_error
00000000000039b2         mov        rdx, rax                                    ; argument "__format" for method j_error
00000000000039b5         mov        edi, 0x2                                    ; argument "__status" for method j_error
00000000000039ba         xor        eax, eax
00000000000039bc         call       j_error                                     ; error

                     loc_39c1:
00000000000039c1         lea        rsi, qword [aDivisionByZero]                ; argument "msgid" for method j_dcgettext, "division by zero", CODE XREF=eval4+114
00000000000039c8         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000039cd         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000039cf         call       j_dcgettext                                 ; dcgettext
00000000000039d4         xor        esi, esi                                    ; argument "__errnum" for method j_error
00000000000039d6         mov        rdx, rax                                    ; argument "__format" for method j_error
00000000000039d9         mov        edi, 0x2                                    ; argument "__status" for method j_error
00000000000039de         xor        eax, eax
00000000000039e0         call       j_error                                     ; error
00000000000039e5         nop                                                    ; End of unwind block (FDE at 0x17ba0)
00000000000039e6         nop        word [cs:rax+rax]
                     eval3:
00000000000039f0         push       r14                                         ; Begin of unwind block (FDE at 0x17be0), CODE XREF=eval2+24, eval2+72
00000000000039f2         push       r13
00000000000039f4         mov        r14d, edi
00000000000039f7         push       r12
00000000000039f9         movzx      r12d, dil
00000000000039fd         push       rbp
00000000000039fe         push       rbx
00000000000039ff         mov        edi, r12d
0000000000003a02         call       eval4                                       ; eval4
0000000000003a07         mov        r13, rax
0000000000003a0a         jmp        loc_3a6d
0000000000003a0c         align      16

                     loc_3a10:
0000000000003a10         lea        rdi, qword [aMikeParker+13]                 ; 0x16125, CODE XREF=eval3+139
0000000000003a17         call       nextarg                                     ; nextarg
0000000000003a1c         test       al, al
0000000000003a1e         je         loc_3a98

0000000000003a20         mov        ebp, 0x1

                     loc_3a25:
0000000000003a25         mov        edi, r12d                                   ; CODE XREF=eval3+143
0000000000003a28         call       eval4                                       ; eval4
0000000000003a2d         test       r14b, r14b
0000000000003a30         mov        rbx, rax
0000000000003a33         je         loc_3a65

0000000000003a35         mov        rdi, r13
0000000000003a38         call       toarith                                     ; toarith
0000000000003a3d         test       al, al
0000000000003a3f         je         loc_3aa4

0000000000003a41         mov        rdi, rbx
0000000000003a44         call       toarith                                     ; toarith
0000000000003a49         test       al, al
0000000000003a4b         je         loc_3aa4

0000000000003a4d         test       ebp, ebp
0000000000003a4f         je         loc_3a88

0000000000003a51         mov        rax, qword [qword_21afa8]                   ; qword_21afa8

                     loc_3a58:
0000000000003a58         lea        rdi, qword [r13+8]                          ; CODE XREF=eval3+159
0000000000003a5c         lea        rdx, qword [rbx+8]
0000000000003a60         mov        rsi, rdi
0000000000003a63         call       rax

                     loc_3a65:
0000000000003a65         mov        rdi, rbx                                    ; CODE XREF=eval3+67
0000000000003a68         call       freev                                       ; freev

                     loc_3a6d:
0000000000003a6d         lea        rdi, qword [aItercurptr0+23]                ; 0x16065, CODE XREF=eval3+26
0000000000003a74         call       nextarg                                     ; nextarg
0000000000003a79         test       al, al
0000000000003a7b         je         loc_3a10

0000000000003a7d         xor        ebp, ebp
0000000000003a7f         jmp        loc_3a25
0000000000003a81         align      8

                     loc_3a88:
0000000000003a88         mov        rax, qword [qword_21afd0]                   ; qword_21afd0, CODE XREF=eval3+95
0000000000003a8f         jmp        loc_3a58
0000000000003a91         align      8

                     loc_3a98:
0000000000003a98         pop        rbx                                         ; CODE XREF=eval3+46
0000000000003a99         mov        rax, r13
0000000000003a9c         pop        rbp
0000000000003a9d         pop        r12
0000000000003a9f         pop        r13
0000000000003aa1         pop        r14
0000000000003aa3         ret
                        ; endp

                     loc_3aa4:
0000000000003aa4         lea        rsi, qword [aNonintegerArgu]                ; argument "msgid" for method j_dcgettext, "non-integer argument", CODE XREF=eval3+79, eval3+91
0000000000003aab         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003ab0         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003ab2         call       j_dcgettext                                 ; dcgettext
0000000000003ab7         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000003ab9         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000003abc         mov        edi, 0x2                                    ; argument "__status" for method j_error
0000000000003ac1         xor        eax, eax
0000000000003ac3         call       j_error                                     ; error
0000000000003ac8         nop        dword [rax+rax]                             ; End of unwind block (FDE at 0x17be0)
                     eval2:
0000000000003ad0         push       r15                                         ; Begin of unwind block (FDE at 0x17c20), CODE XREF=eval1+11, eval1+56
0000000000003ad2         push       r14
0000000000003ad4         mov        r14d, edi
0000000000003ad7         push       r13
0000000000003ad9         push       r12
0000000000003adb         movzx      r13d, dil
0000000000003adf         push       rbp
0000000000003ae0         push       rbx
0000000000003ae1         mov        edi, r13d
0000000000003ae4         sub        rsp, 0x8
0000000000003ae8         call       eval3                                       ; eval3
0000000000003aed         mov        rbx, rax
0000000000003af0         jmp        loc_3b54
0000000000003af2         align      8

                     loc_3af8:
0000000000003af8         lea        rdi, qword [aDivisionByZero+19]             ; 0x160ce, CODE XREF=eval2+146
0000000000003aff         mov        r12d, 0x1
0000000000003b05         call       nextarg                                     ; nextarg
0000000000003b0a         test       al, al
0000000000003b0c         je         loc_3c50

                     loc_3b12:
0000000000003b12         mov        edi, r13d                                   ; CODE XREF=eval2+151, eval2+406, eval2+516, eval2+542, eval2+570
0000000000003b15         xor        r15d, r15d
0000000000003b18         call       eval3                                       ; eval3
0000000000003b1d         test       r14b, r14b
0000000000003b20         mov        rbp, rax
0000000000003b23         jne        loc_3b70

                     loc_3b25:
0000000000003b25         mov        rdi, rbx                                    ; CODE XREF=eval2+285, eval2+305, eval2+329, eval2+345, eval2+362, eval2+377
0000000000003b28         call       freev                                       ; freev
0000000000003b2d         mov        rdi, rbp
0000000000003b30         call       freev                                       ; freev
0000000000003b35         mov        edi, 0x18
0000000000003b3a         call       xmalloc                                     ; xmalloc
0000000000003b3f         lea        rdi, qword [rax+8]                          ; argument #1 for method j___gmpz_init_set_ui
0000000000003b43         mov        dword [rax], 0x0
0000000000003b49         mov        rsi, r15                                    ; argument #2 for method j___gmpz_init_set_ui
0000000000003b4c         mov        rbx, rax
0000000000003b4f         call       j___gmpz_init_set_ui                        ; __gmpz_init_set_ui

                     loc_3b54:
0000000000003b54         lea        rdi, qword [aDivisionByZero+17]             ; 0x160cc, CODE XREF=eval2+32
0000000000003b5b         call       nextarg                                     ; nextarg
0000000000003b60         test       al, al
0000000000003b62         je         loc_3af8

0000000000003b64         xor        r12d, r12d
0000000000003b67         jmp        loc_3b12
0000000000003b69         align      16

                     loc_3b70:
0000000000003b70         mov        rdi, rbx                                    ; CODE XREF=eval2+83
0000000000003b73         call       tostring                                    ; tostring
0000000000003b78         mov        rdi, rbp
0000000000003b7b         call       tostring                                    ; tostring
0000000000003b80         mov        rdi, qword [rbx+8]
0000000000003b84         xor        edx, edx
0000000000003b86         cmp        byte [rdi], 0x2d
0000000000003b89         sete       dl
0000000000003b8c         add        rdx, rdi
0000000000003b8f         movsx      eax, byte [rdx]
0000000000003b92         jmp        loc_3ba7
0000000000003b94         align      8

                     loc_3b98:
0000000000003b98         add        rdx, 0x1                                    ; CODE XREF=eval2+221
0000000000003b9c         movsx      eax, byte [rdx]
0000000000003b9f         test       al, al
0000000000003ba1         je         loc_3c70

                     loc_3ba7:
0000000000003ba7         sub        eax, 0x30                                   ; CODE XREF=eval2+194
0000000000003baa         cmp        eax, 0x9
0000000000003bad         jbe        loc_3b98

                     loc_3baf:
0000000000003baf         call       j___errno_location                          ; __errno_location, CODE XREF=eval2+459
0000000000003bb4         mov        dword [rax], 0x0
0000000000003bba         mov        rsi, qword [rbp+8]                          ; argument "__s2" for method j_strcoll
0000000000003bbe         mov        rdi, qword [rbx+8]                          ; argument "__s1" for method j_strcoll
0000000000003bc2         call       j_strcoll                                   ; strcoll

                     loc_3bc7:
0000000000003bc7         cmp        r12d, 0x5                                   ; CODE XREF=eval2+469
0000000000003bcb         ja         loc_3c30

0000000000003bcd         lea        rcx, qword [switch_table_16140]             ; switch_table_16140
0000000000003bd4         movsxd     rdx, dword [rcx+r12*4]
0000000000003bd8         add        rdx, rcx
0000000000003bdb         jmp        rdx                                         ; switch statement using table at 0x16140, with 6 cases, 0x3be0,0x3bf8,0x3c10,0x3c20,0x3c30,0x3c40
0000000000003bdd         align      32

                     loc_3be0:
0000000000003be0         movsxd     rsi, eax                                    ; case 4, CODE XREF=eval2+267
0000000000003be3         not        rsi
0000000000003be6         shr        rsi, 0x3f
0000000000003bea         mov        r15, rsi
0000000000003bed         jmp        loc_3b25
0000000000003bf2         align      8

                     loc_3bf8:
0000000000003bf8         xor        r15d, r15d                                  ; case 3, CODE XREF=eval2+267
0000000000003bfb         test       eax, eax
0000000000003bfd         setne      r15b
0000000000003c01         jmp        loc_3b25
0000000000003c06         align      16

                     loc_3c10:
0000000000003c10         xor        r15d, r15d                                  ; case 2, CODE XREF=eval2+267
0000000000003c13         test       eax, eax
0000000000003c15         sete       r15b
0000000000003c19         jmp        loc_3b25
0000000000003c1e         align      32

                     loc_3c20:
0000000000003c20         xor        r15d, r15d                                  ; case 1, CODE XREF=eval2+267
0000000000003c23         test       eax, eax
0000000000003c25         setle      r15b
0000000000003c29         jmp        loc_3b25
0000000000003c2e         align      16

                     loc_3c30:
0000000000003c30         movsxd     rsi, eax                                    ; case 0, CODE XREF=eval2+251, eval2+267
0000000000003c33         shr        rsi, 0x3f
0000000000003c37         mov        r15, rsi
0000000000003c3a         jmp        loc_3b25
0000000000003c3f         align      64

                     loc_3c40:
0000000000003c40         xor        r15d, r15d                                  ; case 5, CODE XREF=eval2+267
0000000000003c43         test       eax, eax
0000000000003c45         setg       r15b
0000000000003c49         jmp        loc_3b25
0000000000003c4e         align      16

                     loc_3c50:
0000000000003c50         lea        rdi, qword [aDivisionByZero+26]             ; 0x160d5, CODE XREF=eval2+60
0000000000003c57         call       nextarg                                     ; nextarg
0000000000003c5c         test       al, al
0000000000003c5e         je         loc_3cb0

                     loc_3c60:
0000000000003c60         mov        r12d, 0x2                                   ; CODE XREF=eval2+494
0000000000003c66         jmp        loc_3b12
0000000000003c6b         align      16

                     loc_3c70:
0000000000003c70         mov        rsi, qword [rbp+8]                          ; CODE XREF=eval2+209
0000000000003c74         xor        edx, edx
0000000000003c76         cmp        byte [rsi], 0x2d
0000000000003c79         sete       dl
0000000000003c7c         add        rdx, rsi
0000000000003c7f         movsx      eax, byte [rdx]
0000000000003c82         jmp        loc_3c93
0000000000003c84         align      8

                     loc_3c88:
0000000000003c88         add        rdx, 0x1                                    ; CODE XREF=eval2+457
0000000000003c8c         movsx      eax, byte [rdx]
0000000000003c8f         test       al, al
0000000000003c91         je         loc_3ca0

                     loc_3c93:
0000000000003c93         sub        eax, 0x30                                   ; CODE XREF=eval2+434
0000000000003c96         cmp        eax, 0x9
0000000000003c99         jbe        loc_3c88

0000000000003c9b         jmp        loc_3baf

                     loc_3ca0:
0000000000003ca0         call       strintcmp                                   ; strintcmp, CODE XREF=eval2+449
0000000000003ca5         jmp        loc_3bc7
0000000000003caa         align      16

                     loc_3cb0:
0000000000003cb0         lea        rdi, qword [aDivisionByZero+22]             ; 0x160d1, CODE XREF=eval2+398
0000000000003cb7         call       nextarg                                     ; nextarg
0000000000003cbc         test       al, al
0000000000003cbe         jne        loc_3c60

0000000000003cc0         lea        rdi, qword [aDivisionByZero+25]             ; 0x160d4
0000000000003cc7         mov        r12d, 0x3
0000000000003ccd         call       nextarg                                     ; nextarg
0000000000003cd2         test       al, al
0000000000003cd4         jne        loc_3b12

0000000000003cda         lea        rdi, qword [aDivisionByZero+28]             ; 0x160d7
0000000000003ce1         mov        r12d, 0x4
0000000000003ce7         call       nextarg                                     ; nextarg
0000000000003cec         test       al, al
0000000000003cee         jne        loc_3b12

0000000000003cf4         lea        rdi, qword [aDivisionByZero+31]             ; 0x160da
0000000000003cfb         call       nextarg                                     ; nextarg
0000000000003d00         test       al, al
0000000000003d02         je         loc_3d0f

0000000000003d04         mov        r12d, 0x5
0000000000003d0a         jmp        loc_3b12

                     loc_3d0f:
0000000000003d0f         add        rsp, 0x8                                    ; CODE XREF=eval2+562
0000000000003d13         mov        rax, rbx
0000000000003d16         pop        rbx
0000000000003d17         pop        rbp
0000000000003d18         pop        r12
0000000000003d1a         pop        r13
0000000000003d1c         pop        r14
0000000000003d1e         pop        r15
0000000000003d20         ret
                        ; endp
0000000000003d21         align      16                                          ; End of unwind block (FDE at 0x17c20)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     eval1:
0000000000003d30         push       r12                                         ; Begin of unwind block (FDE at 0x17c6c), CODE XREF=eval+11, eval+58
0000000000003d32         push       rbp
0000000000003d33         mov        r12d, edi
0000000000003d36         push       rbx
0000000000003d37         movzx      edi, dil
0000000000003d3b         call       eval2                                       ; eval2
0000000000003d40         mov        rbx, rax

                     loc_3d43:
0000000000003d43         lea        rdi, qword [aDivisionByZero+33]             ; 0x160dc, CODE XREF=eval1+168
0000000000003d4a         call       nextarg                                     ; nextarg
0000000000003d4f         test       al, al
0000000000003d51         je         loc_3dc6

                     loc_3d53:
0000000000003d53         xor        edi, edi                                    ; CODE XREF=eval1+148
0000000000003d55         test       r12b, r12b
0000000000003d58         je         loc_3d68

0000000000003d5a         mov        rdi, rbx
0000000000003d5d         call       null                                        ; null
0000000000003d62         xor        eax, 0x1
0000000000003d65         movzx      edi, al

                     loc_3d68:
0000000000003d68         call       eval2                                       ; eval2, CODE XREF=eval1+40
0000000000003d6d         mov        rdi, rbx
0000000000003d70         mov        rbp, rax
0000000000003d73         call       null                                        ; null
0000000000003d78         test       al, al
0000000000003d7a         jne        loc_3d88

0000000000003d7c         mov        rdi, rbp
0000000000003d7f         call       null                                        ; null
0000000000003d84         test       al, al
0000000000003d86         je         loc_3dd0

                     loc_3d88:
0000000000003d88         mov        rdi, rbx                                    ; CODE XREF=eval1+74
0000000000003d8b         call       freev                                       ; freev
0000000000003d90         mov        rdi, rbp
0000000000003d93         call       freev                                       ; freev
0000000000003d98         mov        edi, 0x18
0000000000003d9d         call       xmalloc                                     ; xmalloc
0000000000003da2         lea        rdi, qword [rax+8]                          ; argument #1 for method j___gmpz_init_set_ui
0000000000003da6         xor        esi, esi                                    ; argument #2 for method j___gmpz_init_set_ui
0000000000003da8         mov        dword [rax], 0x0
0000000000003dae         mov        rbx, rax
0000000000003db1         call       j___gmpz_init_set_ui                        ; __gmpz_init_set_ui
0000000000003db6         lea        rdi, qword [aDivisionByZero+33]             ; 0x160dc
0000000000003dbd         call       nextarg                                     ; nextarg
0000000000003dc2         test       al, al
0000000000003dc4         jne        loc_3d53

                     loc_3dc6:
0000000000003dc6         mov        rax, rbx                                    ; CODE XREF=eval1+33
0000000000003dc9         pop        rbx
0000000000003dca         pop        rbp
0000000000003dcb         pop        r12
0000000000003dcd         ret
                        ; endp
0000000000003dce         align      16

                     loc_3dd0:
0000000000003dd0         mov        rdi, rbp                                    ; CODE XREF=eval1+86
0000000000003dd3         call       freev                                       ; freev
0000000000003dd8         jmp        loc_3d43
0000000000003ddd         align      32                                          ; End of unwind block (FDE at 0x17c6c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     eval:
0000000000003de0         push       r12                                         ; Begin of unwind block (FDE at 0x17c9c), CODE XREF=main+217, eval6+173
0000000000003de2         push       rbp
0000000000003de3         mov        r12d, edi
0000000000003de6         push       rbx
0000000000003de7         movzx      edi, dil
0000000000003deb         call       eval1                                       ; eval1
0000000000003df0         mov        rbx, rax
0000000000003df3         nop        dword [rax+rax]

                     loc_3df8:
0000000000003df8         lea        rdi, qword [aDivisionByZero+35]             ; 0x160de, CODE XREF=eval+99, eval+176
0000000000003dff         call       nextarg                                     ; nextarg
0000000000003e04         test       al, al
0000000000003e06         je         loc_3e7b

                     loc_3e08:
0000000000003e08         xor        edi, edi                                    ; CODE XREF=eval+153
0000000000003e0a         test       r12b, r12b
0000000000003e0d         je         loc_3e1a

0000000000003e0f         mov        rdi, rbx
0000000000003e12         call       null                                        ; null
0000000000003e17         movzx      edi, al

                     loc_3e1a:
0000000000003e1a         call       eval1                                       ; eval1, CODE XREF=eval+45
0000000000003e1f         mov        rdi, rbx
0000000000003e22         mov        rbp, rax
0000000000003e25         call       null                                        ; null
0000000000003e2a         test       al, al
0000000000003e2c         je         loc_3e88

0000000000003e2e         mov        rdi, rbx
0000000000003e31         mov        rbx, rbp
0000000000003e34         call       freev                                       ; freev
0000000000003e39         mov        rdi, rbp
0000000000003e3c         call       null                                        ; null
0000000000003e41         test       al, al
0000000000003e43         je         loc_3df8

0000000000003e45         mov        rdi, rbp
0000000000003e48         call       freev                                       ; freev
0000000000003e4d         mov        edi, 0x18
0000000000003e52         call       xmalloc                                     ; xmalloc
0000000000003e57         lea        rdi, qword [rax+8]                          ; argument #1 for method j___gmpz_init_set_ui
0000000000003e5b         xor        esi, esi                                    ; argument #2 for method j___gmpz_init_set_ui
0000000000003e5d         mov        dword [rax], 0x0
0000000000003e63         mov        rbx, rax
0000000000003e66         call       j___gmpz_init_set_ui                        ; __gmpz_init_set_ui
0000000000003e6b         lea        rdi, qword [aDivisionByZero+35]             ; 0x160de
0000000000003e72         call       nextarg                                     ; nextarg
0000000000003e77         test       al, al
0000000000003e79         jne        loc_3e08

                     loc_3e7b:
0000000000003e7b         mov        rax, rbx                                    ; CODE XREF=eval+38
0000000000003e7e         pop        rbx
0000000000003e7f         pop        rbp
0000000000003e80         pop        r12
0000000000003e82         ret
                        ; endp
0000000000003e83         align      8

                     loc_3e88:
0000000000003e88         mov        rdi, rbp                                    ; CODE XREF=eval+76
0000000000003e8b         call       freev                                       ; freev
0000000000003e90         jmp        loc_3df8
0000000000003e95         align      32                                          ; End of unwind block (FDE at 0x17c9c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout_set_file_name:
0000000000003ea0         mov        qword [file_name], rdi                      ; Begin of unwind block (FDE at 0x17d0c), file_name
0000000000003ea7         ret
                        ; endp
0000000000003ea8         align      16                                          ; End of unwind block (FDE at 0x17d0c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout_set_ignore_EPIPE:
0000000000003eb0         mov        byte [ignore_EPIPE], dil                    ; Begin of unwind block (FDE at 0x17d20), ignore_EPIPE
0000000000003eb7         ret
                        ; endp
0000000000003eb8         align      64                                          ; End of unwind block (FDE at 0x17d20)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout:
0000000000003ec0         push       rbp                                         ; Begin of unwind block (FDE at 0x17d34), DATA XREF=main+67
0000000000003ec1         push       rbx
0000000000003ec2         sub        rsp, 0x8
0000000000003ec6         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000003ecd         call       close_stream                                ; close_stream
0000000000003ed2         test       eax, eax
0000000000003ed4         je         loc_3eec

0000000000003ed6         call       j___errno_location                          ; __errno_location
0000000000003edb         cmp        byte [ignore_EPIPE], 0x0                    ; ignore_EPIPE
0000000000003ee2         mov        rbx, rax
0000000000003ee5         je         loc_3f03

0000000000003ee7         cmp        dword [rax], 0x20
0000000000003eea         jne        loc_3f03

                     loc_3eec:
0000000000003eec         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5, CODE XREF=close_stdout+20
0000000000003ef3         call       close_stream                                ; close_stream
0000000000003ef8         test       eax, eax
0000000000003efa         jne        loc_3f42

0000000000003efc         add        rsp, 0x8
0000000000003f00         pop        rbx
0000000000003f01         pop        rbp
0000000000003f02         ret
                        ; endp

                     loc_3f03:
0000000000003f03         lea        rsi, qword [aWriteError]                    ; argument "msgid" for method j_dcgettext, "write error", CODE XREF=close_stdout+37, close_stdout+42
0000000000003f0a         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003f0c         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003f11         call       j_dcgettext                                 ; dcgettext
0000000000003f16         mov        rdi, qword [file_name]                      ; file_name
0000000000003f1d         mov        rbp, rax
0000000000003f20         test       rdi, rdi
0000000000003f23         je         loc_3f4d

0000000000003f25         call       quotearg_colon                              ; quotearg_colon
0000000000003f2a         mov        esi, dword [rbx]                            ; argument "__errnum" for method j_error
0000000000003f2c         lea        rdx, qword [aSS]                            ; argument "__format" for method j_error, "%s: %s"
0000000000003f33         mov        rcx, rax
0000000000003f36         mov        r8, rbp
0000000000003f39         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000003f3b         xor        eax, eax
0000000000003f3d         call       j_error                                     ; error

                     loc_3f42:
0000000000003f42         mov        edi, dword [exit_failure]                   ; argument "__status" for method j__exit, exit_failure, CODE XREF=close_stdout+58, close_stdout+162
0000000000003f48         call       j__exit                                     ; _exit
                        ; endp

                     loc_3f4d:
0000000000003f4d         mov        esi, dword [rbx]                            ; argument "__errnum" for method j_error, CODE XREF=close_stdout+99
0000000000003f4f         lea        rdx, qword [aSS+4]                          ; argument "__format" for method j_error, 0x16183
0000000000003f56         mov        rcx, rax
0000000000003f59         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000003f5b         xor        eax, eax
0000000000003f5d         call       j_error                                     ; error
0000000000003f62         jmp        loc_3f42
0000000000003f64         align      16                                          ; End of unwind block (FDE at 0x17d34)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_38: -56
        ;    var_48: -72
        ;    var_58: -88
        ;    var_68: -104
        ;    var_78: -120
        ;    var_88: -136
        ;    var_98: -152
        ;    var_A8: -168
        ;    var_D8: int8_t, -216
        ;    var_E0: int64_t, -224
        ;    var_E8: int64_t, -232
        ;    var_F0: int64_t, -240
        ;    var_F4: int32_t, -244
        ;    var_F8: int32_t, -248
        ;    var_100: int64_t, -256


                     parse_long_options:
0000000000003f70         push       r13                                         ; Begin of unwind block (FDE at 0x17d64), CODE XREF=main+150
0000000000003f72         push       r12
0000000000003f74         mov        r13, r8
0000000000003f77         push       rbp
0000000000003f78         push       rbx
0000000000003f79         mov        rbp, rdx
0000000000003f7c         mov        r12, rcx
0000000000003f7f         sub        rsp, 0xe8
0000000000003f86         test       al, al
0000000000003f88         je         loc_3fc4

0000000000003f8a         movaps     xmmword [rsp+0x108+var_A8], xmm0
0000000000003f8f         movaps     xmmword [rsp+0x108+var_98], xmm1
0000000000003f94         movaps     xmmword [rsp+0x108+var_88], xmm2
0000000000003f9c         movaps     xmmword [rsp+0x108+var_78], xmm3
0000000000003fa4         movaps     xmmword [rsp+0x108+var_68], xmm4
0000000000003fac         movaps     xmmword [rsp+0x108+var_58], xmm5
0000000000003fb4         movaps     xmmword [rsp+0x108+var_48], xmm6
0000000000003fbc         movaps     xmmword [rsp+0x108+var_38], xmm7

                     loc_3fc4:
0000000000003fc4         mov        rax, qword [fs:0x28]                        ; CODE XREF=parse_long_options+24
0000000000003fcd         mov        qword [rsp+0x108+var_E0], rax
0000000000003fd2         xor        eax, eax
0000000000003fd4         cmp        edi, 0x2
0000000000003fd7         mov        ebx, dword [opterr@@GLIBC_2.2.5]            ; opterr@@GLIBC_2.2.5
0000000000003fdd         mov        dword [opterr@@GLIBC_2.2.5], 0x0            ; opterr@@GLIBC_2.2.5
0000000000003fe7         je         loc_4020

                     loc_3fe9:
0000000000003fe9         mov        rax, qword [rsp+0x108+var_E0]               ; CODE XREF=parse_long_options+206, parse_long_options+221, parse_long_options+309
0000000000003fee         xor        rax, qword [fs:0x28]
0000000000003ff7         mov        dword [opterr@@GLIBC_2.2.5], ebx            ; opterr@@GLIBC_2.2.5
0000000000003ffd         mov        dword [optind@@GLIBC_2.2.5], 0x0            ; optind@@GLIBC_2.2.5
0000000000004007         jne        loc_40aa

000000000000400d         add        rsp, 0xe8
0000000000004014         pop        rbx
0000000000004015         pop        rbp
0000000000004016         pop        r12
0000000000004018         pop        r13
000000000000401a         ret
                        ; endp
000000000000401b         align      32

                     loc_4020:
0000000000004020         lea        rcx, qword [long_options]                   ; argument "__longopts" for method j_getopt_long, long_options, CODE XREF=parse_long_options+119
0000000000004027         lea        rdx, qword [aItercurptr0+23]                ; argument "__shortopts" for method j_getopt_long, 0x16065
000000000000402e         xor        r8d, r8d                                    ; argument "__longind" for method j_getopt_long
0000000000004031         mov        qword [rsp+0x108+var_100], r9
0000000000004036         call       j_getopt_long                               ; getopt_long
000000000000403b         cmp        eax, 0xffffffff
000000000000403e         je         loc_3fe9

0000000000004040         cmp        eax, 0x68
0000000000004043         mov        r9, qword [rsp+0x108+var_100]
0000000000004048         je         loc_40a0

000000000000404a         cmp        eax, 0x76
000000000000404d         jne        loc_3fe9

000000000000404f         lea        rax, qword [rsp+0x108+arg_0]
0000000000004057         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
000000000000405e         lea        r8, qword [rsp+0x108+var_F8]
0000000000004063         mov        rcx, r13
0000000000004066         mov        rdx, r12
0000000000004069         mov        rsi, rbp
000000000000406c         mov        qword [rsp+0x108+var_F0], rax
0000000000004071         lea        rax, qword [rsp+0x108+var_D8]
0000000000004076         mov        dword [rsp+0x108+var_F8], 0x30
000000000000407e         mov        dword [rsp+0x108+var_F4], 0x30
0000000000004086         mov        qword [rsp+0x108+var_E8], rax
000000000000408b         call       version_etc_va                              ; version_etc_va
0000000000004090         xor        edi, edi                                    ; argument "__status" for method j_exit
0000000000004092         call       j_exit                                      ; exit
                        ; endp
0000000000004097         align      32

                     loc_40a0:
00000000000040a0         xor        edi, edi                                    ; CODE XREF=parse_long_options+216
00000000000040a2         call       r9
00000000000040a5         jmp        loc_3fe9

                     loc_40aa:
00000000000040aa         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=parse_long_options+151
                        ; endp
00000000000040af         align      16                                          ; End of unwind block (FDE at 0x17d64)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_8: int, 16
        ;    arg_0: int, 8
        ;    var_38: -56
        ;    var_48: -72
        ;    var_58: -88
        ;    var_68: -104
        ;    var_78: -120
        ;    var_88: -136
        ;    var_98: -152
        ;    var_A8: -168
        ;    var_D8: int8_t, -216
        ;    var_E0: int64_t, -224
        ;    var_E8: int64_t, -232
        ;    var_F0: int64_t, -240
        ;    var_F4: int32_t, -244
        ;    var_F8: int32_t, -248


                     parse_gnu_standard_options_only:
00000000000040b0         push       r14                                         ; Begin of unwind block (FDE at 0x17da0)
00000000000040b2         push       r13
00000000000040b4         mov        r14, r8
00000000000040b7         push       r12
00000000000040b9         push       rbp
00000000000040ba         mov        r12, rdx
00000000000040bd         push       rbx
00000000000040be         mov        r13, rcx
00000000000040c1         sub        rsp, 0xd0
00000000000040c8         test       al, al
00000000000040ca         mov        rbp, qword [rsp+0xf8+arg_0]
00000000000040d2         je         loc_410b

00000000000040d4         movaps     xmmword [rsp+0xf8+var_A8], xmm0
00000000000040d9         movaps     xmmword [rsp+0xf8+var_98], xmm1
00000000000040de         movaps     xmmword [rsp+0xf8+var_88], xmm2
00000000000040e3         movaps     xmmword [rsp+0xf8+var_78], xmm3
00000000000040eb         movaps     xmmword [rsp+0xf8+var_68], xmm4
00000000000040f3         movaps     xmmword [rsp+0xf8+var_58], xmm5
00000000000040fb         movaps     xmmword [rsp+0xf8+var_48], xmm6
0000000000004103         movaps     xmmword [rsp+0xf8+var_38], xmm7

                     loc_410b:
000000000000410b         mov        rax, qword [fs:0x28]                        ; CODE XREF=parse_gnu_standard_options_only+34
0000000000004114         mov        qword [rsp+0xf8+var_E0], rax
0000000000004119         xor        eax, eax
000000000000411b         lea        rdx, qword [aWrittenBySSAnd+27]             ; 0x16761
0000000000004122         lea        rax, qword [aItercurptr0+23]                ; 0x16065
0000000000004129         test       r9b, r9b
000000000000412c         lea        rcx, qword [long_options]                   ; argument "__longopts" for method j_getopt_long, long_options
0000000000004133         cmove      rdx, rax                                    ; argument "__shortopts" for method j_getopt_long
0000000000004137         xor        r8d, r8d                                    ; argument "__longind" for method j_getopt_long
000000000000413a         mov        ebx, dword [opterr@@GLIBC_2.2.5]            ; opterr@@GLIBC_2.2.5
0000000000004140         mov        dword [opterr@@GLIBC_2.2.5], 0x1            ; opterr@@GLIBC_2.2.5
000000000000414a         call       j_getopt_long                               ; getopt_long
000000000000414f         cmp        eax, 0xffffffff
0000000000004152         je         loc_41b8

0000000000004154         cmp        eax, 0x68
0000000000004157         je         loc_41e0

000000000000415d         cmp        eax, 0x76
0000000000004160         jne        loc_41b0

0000000000004162         lea        rax, qword [rsp+0xf8+arg_8]
000000000000416a         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004171         mov        r8, rsp
0000000000004174         mov        rcx, r14
0000000000004177         mov        rdx, r13
000000000000417a         mov        rsi, r12
000000000000417d         mov        qword [rsp+0xf8+var_F0], rax
0000000000004182         lea        rax, qword [rsp+0xf8+var_D8]
0000000000004187         mov        dword [rsp+0xf8+var_F8], 0x30
000000000000418e         mov        dword [rsp+0xf8+var_F4], 0x30
0000000000004196         mov        qword [rsp+0xf8+var_E8], rax
000000000000419b         call       version_etc_va                              ; version_etc_va
00000000000041a0         xor        edi, edi                                    ; argument "__status" for method j_exit
00000000000041a2         call       j_exit                                      ; exit
                        ; endp
00000000000041a7         align      16

                     loc_41b0:
00000000000041b0         mov        edi, dword [exit_failure]                   ; exit_failure, CODE XREF=parse_gnu_standard_options_only+176
00000000000041b6         call       rbp

                     loc_41b8:
00000000000041b8         mov        rax, qword [rsp+0xf8+var_E0]                ; CODE XREF=parse_gnu_standard_options_only+162, parse_gnu_standard_options_only+308
00000000000041bd         xor        rax, qword [fs:0x28]
00000000000041c6         mov        dword [opterr@@GLIBC_2.2.5], ebx            ; opterr@@GLIBC_2.2.5
00000000000041cc         jne        loc_41e6

00000000000041ce         add        rsp, 0xd0
00000000000041d5         pop        rbx
00000000000041d6         pop        rbp
00000000000041d7         pop        r12
00000000000041d9         pop        r13
00000000000041db         pop        r14
00000000000041dd         ret
                        ; endp
00000000000041de         align      32

                     loc_41e0:
00000000000041e0         xor        edi, edi                                    ; CODE XREF=parse_gnu_standard_options_only+167
00000000000041e2         call       rbp
00000000000041e4         jmp        loc_41b8

                     loc_41e6:
00000000000041e6         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=parse_gnu_standard_options_only+284
                        ; endp
00000000000041eb         align      16                                          ; End of unwind block (FDE at 0x17da0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     mb_width_aux:
00000000000041f0         push       rbx                                         ; Begin of unwind block (FDE at 0x17dec)
00000000000041f1         mov        ebx, edi
00000000000041f3         call       j_wcwidth                                   ; wcwidth
00000000000041f8         test       eax, eax
00000000000041fa         js         loc_4200

00000000000041fc         pop        rbx
00000000000041fd         ret
                        ; endp
00000000000041fe         align      512

                     loc_4200:
0000000000004200         mov        edi, ebx                                    ; argument "__wc" for method j_iswcntrl, CODE XREF=mb_width_aux+10
0000000000004202         call       j_iswcntrl                                  ; iswcntrl
0000000000004207         test       eax, eax
0000000000004209         sete       al
000000000000420c         movzx      eax, al
000000000000420f         pop        rbx
0000000000004210         ret
                        ; endp
0000000000004211         align      32                                          ; End of unwind block (FDE at 0x17dec)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     mb_copy:
0000000000004220         push       rbp                                         ; Begin of unwind block (FDE at 0x17e0c)
0000000000004221         push       rbx
0000000000004222         mov        rbx, rsi
0000000000004225         lea        rax, qword [rbx+0x18]
0000000000004229         mov        rbp, rdi
000000000000422c         sub        rsp, 0x8
0000000000004230         mov        rsi, qword [rsi]
0000000000004233         mov        rdx, qword [rbx+8]
0000000000004237         cmp        rsi, rax
000000000000423a         je         loc_4260

000000000000423c         mov        qword [rdi], rsi

                     loc_423f:
000000000000423f         movzx      eax, byte [rbx+0x10]                        ; CODE XREF=mb_copy+84
0000000000004243         mov        qword [rbp+8], rdx
0000000000004247         test       al, al
0000000000004249         mov        byte [rbp+0x10], al
000000000000424c         je         loc_4254

000000000000424e         mov        eax, dword [rbx+0x14]
0000000000004251         mov        dword [rbp+0x14], eax

                     loc_4254:
0000000000004254         add        rsp, 0x8                                    ; CODE XREF=mb_copy+44
0000000000004258         pop        rbx
0000000000004259         pop        rbp
000000000000425a         ret
                        ; endp
000000000000425b         align      32

                     loc_4260:
0000000000004260         lea        rcx, qword [rdi+0x18]                       ; CODE XREF=mb_copy+26
0000000000004264         mov        rdi, rcx                                    ; argument "__dest" for method j_memcpy
0000000000004267         call       j_memcpy                                    ; memcpy
000000000000426c         mov        rdx, qword [rbx+8]
0000000000004270         mov        qword [rbp], rax
0000000000004274         jmp        loc_423f
0000000000004276         align      128                                         ; End of unwind block (FDE at 0x17e0c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     is_basic:
0000000000004280         mov        eax, edi                                    ; Begin of unwind block (FDE at 0x17e38)
0000000000004282         lea        rdx, qword [is_basic_table]                 ; is_basic_table
0000000000004289         mov        ecx, edi
000000000000428b         shr        al, 0x5
000000000000428e         and        ecx, 0x1f
0000000000004291         and        eax, 0x7
0000000000004294         mov        eax, dword [rdx+rax*4]
0000000000004297         shr        eax, cl
0000000000004299         and        eax, 0x1
000000000000429c         ret
                        ; endp
000000000000429d         align      32                                          ; End of unwind block (FDE at 0x17e38)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_54: int32_t, -84
        ;    var_58: int8_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_6C: int8_t, -108
        ;    var_74: int64_t, -116
        ;    var_78: int8_t, -120


                     mbschr:
00000000000042a0         push       r14                                         ; Begin of unwind block (FDE at 0x17e4c), CODE XREF=eval6+1184
00000000000042a2         push       r13
00000000000042a4         push       r12
00000000000042a6         push       rbp
00000000000042a7         mov        r12, rdi
00000000000042aa         push       rbx
00000000000042ab         mov        ebx, esi
00000000000042ad         sub        rsp, 0x50
00000000000042b1         mov        rax, qword [fs:0x28]
00000000000042ba         mov        qword [rsp+0x78+var_30], rax
00000000000042bf         xor        eax, eax
00000000000042c1         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max
00000000000042c6         cmp        rax, 0x1
00000000000042ca         jbe        loc_42d3

00000000000042cc         cmp        bl, 0x2f
00000000000042cf         mov        ebp, ebx
00000000000042d1         ja         loc_4300

                     loc_42d3:
00000000000042d3         mov        rax, qword [rsp+0x78+var_30]                ; CODE XREF=mbschr+42
00000000000042d8         xor        rax, qword [fs:0x28]
00000000000042e1         jne        loc_44e3

00000000000042e7         add        rsp, 0x50
00000000000042eb         mov        esi, ebx                                    ; argument "__c" for method j_strchr
00000000000042ed         mov        rdi, r12                                    ; argument "__s" for method j_strchr
00000000000042f0         pop        rbx
00000000000042f1         pop        rbp
00000000000042f2         pop        r12
00000000000042f4         pop        r13
00000000000042f6         pop        r14
00000000000042f8         jmp        j_strchr                                    ; strchr
                        ; endp
00000000000042fd         align      256

                     loc_4300:
0000000000004300         mov        rbx, rsp                                    ; CODE XREF=mbschr+49
0000000000004303         mov        qword [rsp+0x78+var_68], r12
0000000000004308         mov        byte [rsp+0x78+var_78], 0x0
000000000000430c         mov        qword [rsp+0x78+var_74], 0x0
0000000000004315         mov        byte [rsp+0x78+var_6C], 0x0
000000000000431a         lea        r12, qword [is_basic_table]                 ; is_basic_table
0000000000004321         lea        r13, qword [rbx+4]
0000000000004325         jmp        loc_438e
0000000000004327         align      16

                     loc_4330:
0000000000004330         mov        rax, qword [rsp+0x78+var_68]                ; CODE XREF=mbschr+242
0000000000004335         movzx      ecx, byte [rax]
0000000000004338         mov        edx, ecx
000000000000433a         shr        dl, 0x5
000000000000433d         and        edx, 0x7
0000000000004340         mov        edx, dword [r12+rdx*4]
0000000000004344         bt         edx, ecx
0000000000004347         jae        loc_4448

000000000000434d         mov        qword [rsp+0x78+var_60], 0x1
0000000000004356         movsx      edx, byte [rax]
0000000000004359         mov        byte [rsp+0x78+var_58], 0x1
000000000000435e         mov        byte [rsp+0x78+var_6C], 0x1
0000000000004363         test       edx, edx
0000000000004365         mov        dword [rsp+0x78+var_54], edx
0000000000004369         je         loc_44c0

000000000000436f         mov        edx, 0x1
0000000000004374         mov        r14, rax

                     loc_4377:
0000000000004377         cmp        bpl, byte [r14]                             ; CODE XREF=mbschr+413, mbschr+485
000000000000437a         je         loc_44c3

                     loc_4380:
0000000000004380         lea        rax, qword [r14+rdx]                        ; CODE XREF=mbschr+407
0000000000004384         mov        byte [rsp+0x78+var_6C], 0x0
0000000000004389         mov        qword [rsp+0x78+var_68], rax

                     loc_438e:
000000000000438e         cmp        byte [rsp+0x78+var_78], 0x0                 ; CODE XREF=mbschr+133
0000000000004392         je         loc_4330

                     loc_4394:
0000000000004394         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max, CODE XREF=mbschr+444
0000000000004399         mov        r14, qword [rsp+0x78+var_68]
000000000000439e         mov        rsi, rax
00000000000043a1         mov        rdi, r14
00000000000043a4         call       strnlen1                                    ; strnlen1
00000000000043a9         lea        rcx, qword [rbx+4]
00000000000043ad         lea        rdi, qword [rbx+0x24]
00000000000043b1         mov        rdx, rax
00000000000043b4         mov        rsi, r14
00000000000043b7         call       rpl_mbrtowc                                 ; rpl_mbrtowc
00000000000043bc         cmp        rax, 0xffffffffffffffff
00000000000043c0         mov        qword [rsp+0x78+var_60], rax
00000000000043c5         je         loc_4468

00000000000043cb         cmp        rax, 0xfffffffffffffffe
00000000000043cf         je         loc_4490

00000000000043d5         test       rax, rax
00000000000043d8         jne        loc_43fe

00000000000043da         mov        r14, qword [rsp+0x78+var_68]
00000000000043df         mov        qword [rsp+0x78+var_60], 0x1
00000000000043e8         cmp        byte [r14], 0x0
00000000000043ec         jne        loc_4507

00000000000043f2         mov        edx, dword [rsp+0x78+var_54]
00000000000043f6         test       edx, edx
00000000000043f8         jne        loc_4526

                     loc_43fe:
00000000000043fe         lea        rdi, qword [rbx+4]                          ; argument "__ps" for method j_mbsinit, CODE XREF=mbschr+312
0000000000004402         mov        byte [rsp+0x78+var_58], 0x1
0000000000004407         call       j_mbsinit                                   ; mbsinit
000000000000440c         test       eax, eax
000000000000440e         je         loc_44b0

0000000000004414         mov        byte [rsp+0x78+var_78], 0x0
0000000000004418         mov        byte [rsp+0x78+var_6C], 0x1

                     loc_441d:
000000000000441d         mov        eax, dword [rsp+0x78+var_54]                ; CODE XREF=mbschr+533
0000000000004421         test       eax, eax
0000000000004423         je         loc_44c0

0000000000004429         mov        r14, qword [rsp+0x78+var_68]

                     loc_442e:
000000000000442e         mov        rdx, qword [rsp+0x78+var_60]                ; CODE XREF=mbschr+524
0000000000004433         cmp        rdx, 0x1
0000000000004437         jne        loc_4380

000000000000443d         jmp        loc_4377
0000000000004442         align      8

                     loc_4448:
0000000000004448         mov        rdi, r13                                    ; argument "__ps" for method j_mbsinit, CODE XREF=mbschr+167
000000000000444b         call       j_mbsinit                                   ; mbsinit
0000000000004450         test       eax, eax
0000000000004452         je         loc_44e8

0000000000004458         mov        byte [rsp+0x78+var_78], 0x1
000000000000445c         jmp        loc_4394
0000000000004461         align      8

                     loc_4468:
0000000000004468         mov        qword [rsp+0x78+var_60], 0x1                ; CODE XREF=mbschr+293
0000000000004471         mov        byte [rsp+0x78+var_58], 0x0
0000000000004476         mov        edx, 0x1
000000000000447b         mov        byte [rsp+0x78+var_6C], 0x1
0000000000004480         mov        r14, qword [rsp+0x78+var_68]
0000000000004485         jmp        loc_4377
000000000000448a         align      16

                     loc_4490:
0000000000004490         mov        r14, qword [rsp+0x78+var_68]                ; CODE XREF=mbschr+303
0000000000004495         mov        rdi, r14                                    ; argument "__s" for method j_strlen
0000000000004498         call       j_strlen                                    ; strlen
000000000000449d         mov        byte [rsp+0x78+var_58], 0x0
00000000000044a2         mov        qword [rsp+0x78+var_60], rax
00000000000044a7         mov        byte [rsp+0x78+var_6C], 0x1
00000000000044ac         jmp        loc_442e
00000000000044ae         align      16

                     loc_44b0:
00000000000044b0         mov        byte [rsp+0x78+var_6C], 0x1                 ; CODE XREF=mbschr+366
00000000000044b5         jmp        loc_441d
00000000000044ba         align      64

                     loc_44c0:
00000000000044c0         xor        r14d, r14d                                  ; CODE XREF=mbschr+201, mbschr+387

                     loc_44c3:
00000000000044c3         mov        rsi, qword [rsp+0x78+var_30]                ; CODE XREF=mbschr+218
00000000000044c8         xor        rsi, qword [fs:0x28]
00000000000044d1         mov        rax, r14
00000000000044d4         jne        loc_44e3

00000000000044d6         add        rsp, 0x50
00000000000044da         pop        rbx
00000000000044db         pop        rbp
00000000000044dc         pop        r12
00000000000044de         pop        r13
00000000000044e0         pop        r14
00000000000044e2         ret
                        ; endp

                     loc_44e3:
00000000000044e3         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=mbschr+65, mbschr+564
                        ; endp

                     loc_44e8:
00000000000044e8         lea        rcx, qword [__PRETTY_FUNCTION__.5021]       ; argument "__function" for method j___assert_fail, "mbuiter_multi_next", CODE XREF=mbschr+434
00000000000044ef         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/mbuiter.h"
00000000000044f6         lea        rdi, qword [aMbsinitItersta]                ; argument "__assertion" for method j___assert_fail, "mbsinit (&iter->state)"
00000000000044fd         mov        edx, 0x96                                   ; argument "__line" for method j___assert_fail
0000000000004502         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_4507:
0000000000004507         lea        rcx, qword [__PRETTY_FUNCTION__.5021]       ; argument "__function" for method j___assert_fail, "mbuiter_multi_next", CODE XREF=mbschr+332
000000000000450e         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/mbuiter.h"
0000000000004515         lea        rdi, qword [aItercurptr0]                   ; argument "__assertion" for method j___assert_fail, "*iter->cur.ptr == '\\0'"
000000000000451c         mov        edx, 0xb2                                   ; argument "__line" for method j___assert_fail
0000000000004521         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_4526:
0000000000004526         lea        rcx, qword [__PRETTY_FUNCTION__.5021]       ; argument "__function" for method j___assert_fail, "mbuiter_multi_next", CODE XREF=mbschr+344
000000000000452d         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/mbuiter.h"
0000000000004534         lea        rdi, qword [aItercurwc0]                    ; argument "__assertion" for method j___assert_fail, "iter->cur.wc == 0"
000000000000453b         mov        edx, 0xb3                                   ; argument "__line" for method j___assert_fail
0000000000004540         call       j___assert_fail                             ; __assert_fail
                        ; endp
0000000000004545         align      16                                          ; End of unwind block (FDE at 0x17e4c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_54: int32_t, -84
        ;    var_58: int8_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_6C: int8_t, -108
        ;    var_74: int64_t, -116
        ;    var_78: int8_t, -120


                     mbslen:
0000000000004550         push       r14                                         ; Begin of unwind block (FDE at 0x17eac), CODE XREF=eval6+391, eval6+624
0000000000004552         push       r13
0000000000004554         push       r12
0000000000004556         push       rbp
0000000000004557         push       rbx
0000000000004558         mov        rbx, rdi
000000000000455b         sub        rsp, 0x50
000000000000455f         mov        rax, qword [fs:0x28]
0000000000004568         mov        qword [rsp+0x78+var_30], rax
000000000000456d         xor        eax, eax
000000000000456f         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max
0000000000004574         cmp        rax, 0x1
0000000000004578         ja         loc_45b0

000000000000457a         mov        rdi, rbx                                    ; argument "__s" for method j_strlen
000000000000457d         call       j_strlen                                    ; strlen
0000000000004582         mov        rbx, rax

                     loc_4585:
0000000000004585         mov        rsi, qword [rsp+0x78+var_30]                ; CODE XREF=mbslen+205
000000000000458a         xor        rsi, qword [fs:0x28]
0000000000004593         mov        rax, rbx
0000000000004596         jne        loc_4739

000000000000459c         add        rsp, 0x50
00000000000045a0         pop        rbx
00000000000045a1         pop        rbp
00000000000045a2         pop        r12
00000000000045a4         pop        r13
00000000000045a6         pop        r14
00000000000045a8         ret
                        ; endp
00000000000045a9         align      16

                     loc_45b0:
00000000000045b0         mov        rbp, rsp                                    ; CODE XREF=mbslen+40
00000000000045b3         mov        qword [rsp+0x78+var_68], rbx
00000000000045b8         mov        byte [rsp+0x78+var_78], 0x0
00000000000045bc         mov        qword [rsp+0x78+var_74], 0x0
00000000000045c5         mov        byte [rsp+0x78+var_6C], 0x0
00000000000045ca         xor        ebx, ebx
00000000000045cc         lea        r12, qword [is_basic_table]                 ; is_basic_table
00000000000045d3         lea        r13, qword [rbp+4]
00000000000045d7         jmp        loc_4636
00000000000045d9         align      32

                     loc_45e0:
00000000000045e0         mov        rcx, qword [rsp+0x78+var_68]                ; CODE XREF=mbslen+234
00000000000045e5         movzx      edx, byte [rcx]
00000000000045e8         mov        eax, edx
00000000000045ea         shr        al, 0x5
00000000000045ed         and        eax, 0x7
00000000000045f0         mov        eax, dword [r12+rax*4]
00000000000045f4         bt         eax, edx
00000000000045f7         jae        loc_46c0

00000000000045fd         mov        qword [rsp+0x78+var_60], 0x1
0000000000004606         movsx      eax, byte [rcx]
0000000000004609         mov        byte [rsp+0x78+var_58], 0x1
000000000000460e         mov        byte [rsp+0x78+var_6C], 0x1
0000000000004613         mov        dword [rsp+0x78+var_54], eax

                     loc_4617:
0000000000004617         mov        eax, dword [rsp+0x78+var_54]                ; CODE XREF=mbslen+360, mbslen+453
000000000000461b         test       eax, eax
000000000000461d         je         loc_4585

                     loc_4623:
0000000000004623         mov        rax, qword [rsp+0x78+var_60]                ; CODE XREF=mbslen+406, mbslen+436
0000000000004628         add        qword [rsp+0x78+var_68], rax
000000000000462d         add        rbx, 0x1
0000000000004631         mov        byte [rsp+0x78+var_6C], 0x0

                     loc_4636:
0000000000004636         cmp        byte [rsp+0x78+var_78], 0x0                 ; CODE XREF=mbslen+135
000000000000463a         je         loc_45e0

                     loc_463c:
000000000000463c         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max, CODE XREF=mbslen+384
0000000000004641         mov        r14, qword [rsp+0x78+var_68]
0000000000004646         mov        rsi, rax
0000000000004649         mov        rdi, r14
000000000000464c         call       strnlen1                                    ; strnlen1
0000000000004651         lea        rcx, qword [rbp+4]
0000000000004655         lea        rdi, qword [rbp+0x24]
0000000000004659         mov        rdx, rax
000000000000465c         mov        rsi, r14
000000000000465f         call       rpl_mbrtowc                                 ; rpl_mbrtowc
0000000000004664         cmp        rax, 0xffffffffffffffff
0000000000004668         mov        qword [rsp+0x78+var_60], rax
000000000000466d         je         loc_46d8

000000000000466f         cmp        rax, 0xfffffffffffffffe
0000000000004673         je         loc_46f0

0000000000004675         test       rax, rax
0000000000004678         jne        loc_469d

000000000000467a         mov        rax, qword [rsp+0x78+var_68]
000000000000467f         mov        qword [rsp+0x78+var_60], 0x1
0000000000004688         cmp        byte [rax], 0x0
000000000000468b         jne        loc_473e

0000000000004691         mov        edx, dword [rsp+0x78+var_54]
0000000000004695         test       edx, edx
0000000000004697         jne        loc_475d

                     loc_469d:
000000000000469d         lea        rdi, qword [rbp+4]                          ; argument "__ps" for method j_mbsinit, CODE XREF=mbslen+296
00000000000046a1         mov        byte [rsp+0x78+var_58], 0x1
00000000000046a6         call       j_mbsinit                                   ; mbsinit
00000000000046ab         test       eax, eax
00000000000046ad         je         loc_4710

00000000000046af         mov        byte [rsp+0x78+var_78], 0x0
00000000000046b3         mov        byte [rsp+0x78+var_6C], 0x1
00000000000046b8         jmp        loc_4617
00000000000046bd         align      64

                     loc_46c0:
00000000000046c0         mov        rdi, r13                                    ; argument "__ps" for method j_mbsinit, CODE XREF=mbslen+167
00000000000046c3         call       j_mbsinit                                   ; mbsinit
00000000000046c8         test       eax, eax
00000000000046ca         je         loc_471a

00000000000046cc         mov        byte [rsp+0x78+var_78], 0x1
00000000000046d0         jmp        loc_463c
00000000000046d5         align      8

                     loc_46d8:
00000000000046d8         mov        qword [rsp+0x78+var_60], 0x1                ; CODE XREF=mbslen+285
00000000000046e1         mov        byte [rsp+0x78+var_58], 0x0
00000000000046e6         jmp        loc_4623
00000000000046eb         align      16

                     loc_46f0:
00000000000046f0         mov        rdi, qword [rsp+0x78+var_68]                ; argument "__s" for method j_strlen, CODE XREF=mbslen+291
00000000000046f5         call       j_strlen                                    ; strlen
00000000000046fa         mov        byte [rsp+0x78+var_58], 0x0
00000000000046ff         mov        qword [rsp+0x78+var_60], rax
0000000000004704         jmp        loc_4623
0000000000004709         align      16

                     loc_4710:
0000000000004710         mov        byte [rsp+0x78+var_6C], 0x1                 ; CODE XREF=mbslen+349
0000000000004715         jmp        loc_4617

                     loc_471a:
000000000000471a         lea        rcx, qword [__PRETTY_FUNCTION__.5021_161e0] ; argument "__function" for method j___assert_fail, "mbuiter_multi_next", CODE XREF=mbslen+378
0000000000004721         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/mbuiter.h"
0000000000004728         lea        rdi, qword [aMbsinitItersta]                ; argument "__assertion" for method j___assert_fail, "mbsinit (&iter->state)"
000000000000472f         mov        edx, 0x96                                   ; argument "__line" for method j___assert_fail
0000000000004734         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_4739:
0000000000004739         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=mbslen+70
                        ; endp

                     loc_473e:
000000000000473e         lea        rcx, qword [__PRETTY_FUNCTION__.5021_161e0] ; argument "__function" for method j___assert_fail, "mbuiter_multi_next", CODE XREF=mbslen+315
0000000000004745         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/mbuiter.h"
000000000000474c         lea        rdi, qword [aItercurptr0]                   ; argument "__assertion" for method j___assert_fail, "*iter->cur.ptr == '\\0'"
0000000000004753         mov        edx, 0xb2                                   ; argument "__line" for method j___assert_fail
0000000000004758         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_475d:
000000000000475d         lea        rcx, qword [__PRETTY_FUNCTION__.5021_161e0] ; argument "__function" for method j___assert_fail, "mbuiter_multi_next", CODE XREF=mbslen+327
0000000000004764         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/mbuiter.h"
000000000000476b         lea        rdi, qword [aItercurwc0]                    ; argument "__assertion" for method j___assert_fail, "iter->cur.wc == 0"
0000000000004772         mov        edx, 0xb3                                   ; argument "__line" for method j___assert_fail
0000000000004777         call       j___assert_fail                             ; __assert_fail
                        ; endp
000000000000477c         align      128                                         ; End of unwind block (FDE at 0x17eac)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_program_name:
0000000000004780         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0x17ef4), CODE XREF=main+14
0000000000004783         push       rbx
0000000000004784         je         loc_47fd

0000000000004786         mov        esi, 0x2f                                   ; argument "__c" for method j_strrchr
000000000000478b         mov        rbx, rdi
000000000000478e         call       j_strrchr                                   ; strrchr
0000000000004793         test       rax, rax
0000000000004796         je         loc_47ed

0000000000004798         lea        r8, qword [rax+1]
000000000000479c         mov        rdx, r8
000000000000479f         sub        rdx, rbx
00000000000047a2         cmp        rdx, 0x6
00000000000047a6         jle        loc_47ed

00000000000047a8         lea        rsi, qword [rax-6]
00000000000047ac         lea        rdi, qword [aLibs]                          ; "/.libs/"
00000000000047b3         mov        ecx, 0x7
00000000000047b8         rep  cmpsb byte [rsi], byte [rdi]
00000000000047ba         seta       dl
00000000000047bd         sbb        dl, 0x0
00000000000047c0         test       dl, dl
00000000000047c2         jne        loc_47ed

00000000000047c4         lea        rdi, qword [aLibs+8]                        ; 0x16238
00000000000047cb         mov        ecx, 0x3
00000000000047d0         mov        rsi, r8
00000000000047d3         mov        rbx, r8
00000000000047d6         rep  cmpsb byte [rsi], byte [rdi]
00000000000047d8         seta       dl
00000000000047db         sbb        dl, 0x0
00000000000047de         test       dl, dl
00000000000047e0         jne        loc_47ed

00000000000047e2         lea        rbx, qword [rax+4]
00000000000047e6         mov        qword [program_invocation_short_name@@GLIBC_2.2.5], rbx ; program_invocation_short_name@@GLIBC_2.2.5

                     loc_47ed:
00000000000047ed         mov        qword [program_name], rbx                   ; program_name, CODE XREF=set_program_name+22, set_program_name+38, set_program_name+66, set_program_name+96
00000000000047f4         mov        qword [__progname_full@@GLIBC_2.2.5], rbx   ; __progname_full@@GLIBC_2.2.5
00000000000047fb         pop        rbx
00000000000047fc         ret
                        ; endp

                     loc_47fd:
00000000000047fd         mov        rcx, qword [stderr@@GLIBC_2.2.5]            ; argument "__s" for method j_fwrite, stderr@@GLIBC_2.2.5, CODE XREF=set_program_name+4
0000000000004804         lea        rdi, qword [aANullArgv0WasP]                ; argument "__ptr" for method j_fwrite, "A NULL argv[0] was passed through an exec system call.\\n"
000000000000480b         mov        edx, 0x37                                   ; argument "__n" for method j_fwrite
0000000000004810         mov        esi, 0x1                                    ; argument "__size" for method j_fwrite
0000000000004815         call       j_fwrite                                    ; fwrite
000000000000481a         call       j_abort                                     ; abort
                        ; endp
000000000000481f         align      32                                          ; End of unwind block (FDE at 0x17ef4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     gettext_quote.part.1:
0000000000004820         push       rbp                                         ; Begin of unwind block (FDE at 0x17f14), CODE XREF=sub_5050+2597, sub_5050+2619
0000000000004821         push       rbx
0000000000004822         mov        rbp, rdi
0000000000004825         mov        ebx, esi
0000000000004827         sub        rsp, 0x8
000000000000482b         call       locale_charset                              ; locale_charset
0000000000004830         movzx      edx, byte [rax]
0000000000004833         and        edx, 0xffffffdf
0000000000004836         cmp        dl, 0x55
0000000000004839         je         loc_48b0

000000000000483b         cmp        dl, 0x47
000000000000483e         je         loc_4860

                     loc_4840:
0000000000004840         lea        rax, qword [aLibs+27]                       ; 0x1624b, CODE XREF=gettext_quote.part.1+74, gettext_quote.part.1+80, gettext_quote.part.1+86, gettext_quote.part.1+92, gettext_quote.part.1+98, gettext_quote.part.1+104, gettext_quote.part.1+110, gettext_quote.part.1+154, gettext_quote.part.1+166, gettext_quote.part.1+176, gettext_quote.part.1+186
0000000000004847         lea        rdx, qword [aSyntaxErrorUne+27]             ; 0x1609e
000000000000484e         cmp        ebx, 0x9
0000000000004851         cmovne     rax, rdx
0000000000004855         add        rsp, 0x8
0000000000004859         pop        rbx
000000000000485a         pop        rbp
000000000000485b         ret
                        ; endp
000000000000485c         align      32

                     loc_4860:
0000000000004860         movzx      edx, byte [rax+1]                           ; CODE XREF=gettext_quote.part.1+30
0000000000004864         and        edx, 0xffffffdf
0000000000004867         cmp        dl, 0x42
000000000000486a         jne        loc_4840

000000000000486c         cmp        byte [rax+2], 0x31
0000000000004870         jne        loc_4840

0000000000004872         cmp        byte [rax+3], 0x38
0000000000004876         jne        loc_4840

0000000000004878         cmp        byte [rax+4], 0x30
000000000000487c         jne        loc_4840

000000000000487e         cmp        byte [rax+5], 0x33
0000000000004882         jne        loc_4840

0000000000004884         cmp        byte [rax+6], 0x30
0000000000004888         jne        loc_4840

000000000000488a         cmp        byte [rax+7], 0x0
000000000000488e         jne        loc_4840

0000000000004890         cmp        byte [rbp], 0x60
0000000000004894         lea        rax, qword [aLibs+20]                       ; 0x16244
000000000000489b         lea        rdx, qword [aLibs+24]                       ; 0x16248
00000000000048a2         cmovne     rax, rdx
00000000000048a6         add        rsp, 0x8
00000000000048aa         pop        rbx
00000000000048ab         pop        rbp
00000000000048ac         ret
                        ; endp
00000000000048ad         align      16

                     loc_48b0:
00000000000048b0         movzx      edx, byte [rax+1]                           ; CODE XREF=gettext_quote.part.1+25
00000000000048b4         and        edx, 0xffffffdf
00000000000048b7         cmp        dl, 0x54
00000000000048ba         jne        loc_4840

00000000000048bc         movzx      edx, byte [rax+2]
00000000000048c0         and        edx, 0xffffffdf
00000000000048c3         cmp        dl, 0x46
00000000000048c6         jne        loc_4840

00000000000048cc         cmp        byte [rax+3], 0x2d
00000000000048d0         jne        loc_4840

00000000000048d6         cmp        byte [rax+4], 0x38
00000000000048da         jne        loc_4840

00000000000048e0         cmp        byte [rax+5], 0x0
00000000000048e4         jne        loc_4840

00000000000048ea         cmp        byte [rbp], 0x60
00000000000048ee         lea        rax, qword [aLibs+12]                       ; 0x1623c
00000000000048f5         lea        rdx, qword [aLibs+16]                       ; 0x16240
00000000000048fc         cmovne     rax, rdx
0000000000004900         add        rsp, 0x8
0000000000004904         pop        rbx
0000000000004905         pop        rbp
0000000000004906         ret
                        ; endp
0000000000004907         align      16                                          ; End of unwind block (FDE at 0x17f14)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_0: int, 8
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_4C: int32_t, -76
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_69: int8_t, -105
        ;    var_6A: int8_t, -106
        ;    var_6B: int8_t, -107
        ;    var_6C: int8_t, -108
        ;    var_70: int32_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208
        ;    var_D8: int64_t, -216
        ;    var_D9: int8_t, -217
        ;    var_DA: int8_t, -218
        ;    var_DB: int8_t, -219
        ;    var_E0: int32_t, -224


                     quotearg_buffer_restyled:
0000000000004910         push       r15                                         ; Begin of unwind block (FDE at 0x17f58), CODE XREF=sub_5050+1165, sub_5050+2699, quotearg_n_options+231, quotearg_n_options+344, quotearg_buffer+92, quotearg_alloc_mem+103, quotearg_alloc_mem+176
0000000000004912         push       r14
0000000000004914         mov        r15d, r8d
0000000000004917         push       r13
0000000000004919         push       r12
000000000000491b         mov        r14, rdi
000000000000491e         push       rbp
000000000000491f         push       rbx
0000000000004920         mov        ebx, r9d
0000000000004923         mov        r13, rsi
0000000000004926         mov        rbp, rcx
0000000000004929         and        ebx, 0x2
000000000000492c         sub        rsp, 0xb8
0000000000004933         mov        rax, qword [rsp+0xe8+arg_0]
000000000000493b         mov        qword [rsp+0xe8+var_D8], rdx
0000000000004940         mov        dword [rsp+0xe8+var_E0], r8d
0000000000004945         mov        dword [rsp+0xe8+var_70], r9d
000000000000494a         mov        qword [rsp+0xe8+var_C8], rax
000000000000494f         mov        rax, qword [rsp+0xe8+arg_8]
0000000000004957         mov        qword [rsp+0xe8+var_80], rax
000000000000495c         mov        rax, qword [rsp+0xe8+arg_10]
0000000000004964         mov        qword [rsp+0xe8+var_88], rax
0000000000004969         mov        rax, qword [fs:0x28]
0000000000004972         mov        qword [rsp+0xe8+var_40], rax
000000000000497a         xor        eax, eax
000000000000497c         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max
0000000000004981         cmp        r15d, 0xa
0000000000004985         mov        qword [rsp+0xe8+var_90], rax
000000000000498a         ja         loc_5b3f

0000000000004990         lea        rcx, qword [switch_table_162a0]             ; switch_table_162a0
0000000000004997         mov        edx, r15d
000000000000499a         movsxd     rax, dword [rcx+rdx*4]
000000000000499e         add        rax, rcx
00000000000049a1         jmp        rax                                         ; switch statement using table at 0x162a0, with 11 cases, 0x49a3,0x5574,0x55d0,0x5625,0x566a,0x56a4,0x574a,0x5784,0x5978

                     loc_49a3:
00000000000049a3         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 1, CODE XREF=quotearg_buffer_restyled+145, sub_5050+1318
00000000000049a8         mov        byte [rsp+0xe8+var_6C], 0x0
00000000000049ad         xor        r12d, r12d
00000000000049b0         mov        qword [rsp+0xe8+var_98], 0x0
00000000000049b9         mov        byte [rsp+0xe8+var_D9], 0x1
00000000000049be         mov        byte [rsp+0xe8+var_DB], 0x0

                     loc_49c3:
00000000000049c3         lea        rax, qword [aSyntaxErrorUne+27]             ; 0x1609e, CODE XREF=sub_5050+1876
00000000000049ca         mov        qword [rsp+0xe8+var_D0], 0x1
00000000000049d3         xor        r15d, r15d
00000000000049d6         mov        dword [rsp+0xe8+var_E0], 0x2
00000000000049de         mov        qword [rsp+0xe8+var_A0], rax

                     loc_49e3:
00000000000049e3         xor        r11d, r11d                                  ; CODE XREF=sub_5050+180, sub_5050+1400, sub_5050+1488, sub_5050+1557, sub_5050+1615, sub_5050+1781, sub_5050+1839, sub_5050+2408, sub_5050+2485
00000000000049e6         mov        rax, rbp
00000000000049e9         mov        r8d, r12d
00000000000049ec         mov        rbp, r11
00000000000049ef         mov        r11, rax
00000000000049f2         nop        word [rax+rax]

                     loc_49f8:
00000000000049f8         cmp        r11, rbp                                    ; CODE XREF=sub_4b00+194
00000000000049fb         setne      r12b
00000000000049ff         cmp        r11, 0xffffffffffffffff
0000000000004a03         jne        loc_4a12

0000000000004a05         mov        rax, qword [rsp+0xe8+var_D8]
0000000000004a0a         cmp        byte [rax+rbp], 0x0
0000000000004a0e         setne      r12b

                     loc_4a12:
0000000000004a12         test       r12b, r12b                                  ; CODE XREF=quotearg_buffer_restyled+243
0000000000004a15         je         loc_5070

0000000000004a1b         cmp        dword [rsp+0xe8+var_E0], 0x2
0000000000004a20         mov        rdi, qword [rsp+0xe8+var_D8]
0000000000004a25         lea        r9, qword [rdi+rbp]
0000000000004a29         setne      al
0000000000004a2c         and        al, byte [rsp+0xe8+var_DB]
0000000000004a30         mov        r10d, eax
0000000000004a33         je         loc_4ae0

0000000000004a39         mov        rax, qword [rsp+0xe8+var_D0]
0000000000004a3e         test       rax, rax
0000000000004a41         je         loc_4e70

0000000000004a47         cmp        r11, 0xffffffffffffffff
0000000000004a4b         lea        rbx, qword [rbp+rax]
0000000000004a50         jne        loc_4a80

0000000000004a52         cmp        rax, 0x1
0000000000004a56         jbe        loc_4a80

0000000000004a58         mov        byte [rsp+0xe8+var_B0], r8b
0000000000004a5d         mov        byte [rsp+0xe8+var_B8], r10b
0000000000004a62         mov        qword [rsp+0xe8+var_C0], r9
0000000000004a67         call       j_strlen                                    ; strlen
0000000000004a6c         movzx      r8d, byte [rsp+0xe8+var_B0]
0000000000004a72         movzx      r10d, byte [rsp+0xe8+var_B8]
0000000000004a78         mov        r11, rax
0000000000004a7b         mov        r9, qword [rsp+0xe8+var_C0]

                     loc_4a80:
0000000000004a80         cmp        rbx, r11                                    ; CODE XREF=quotearg_buffer_restyled+320, quotearg_buffer_restyled+326
0000000000004a83         mov        byte [rsp+0xe8+var_C0], r10b
0000000000004a88         ja         loc_5040

0000000000004a8e         mov        rdx, qword [rsp+0xe8+var_D0]                ; argument "__n" for method j_memcmp
0000000000004a93         mov        rsi, qword [rsp+0xe8+var_A0]                ; argument "__s2" for method j_memcmp
0000000000004a98         mov        rdi, r9                                     ; argument "__s1" for method j_memcmp
0000000000004a9b         mov        qword [rsp+0xe8+var_A8], r11
0000000000004aa0         mov        byte [rsp+0xe8+var_B0], r8b
0000000000004aa5         mov        qword [rsp+0xe8+var_B8], r9
0000000000004aaa         call       j_memcmp                                    ; memcmp
0000000000004aaf         test       eax, eax
0000000000004ab1         mov        r9, qword [rsp+0xe8+var_B8]
0000000000004ab6         movzx      r8d, byte [rsp+0xe8+var_B0]
0000000000004abc         mov        r11, qword [rsp+0xe8+var_A8]
0000000000004ac1         jne        loc_5040

0000000000004ac7         cmp        byte [rsp+0xe8+var_D9], 0x0
0000000000004acc         movzx      r10d, byte [rsp+0xe8+var_C0]
0000000000004ad2         jne        loc_5a55

0000000000004ad8         nop        dword [rax+rax]

                     loc_4ae0:
0000000000004ae0         movzx      ebx, byte [r9]                              ; CODE XREF=quotearg_buffer_restyled+291, sub_5030+19
0000000000004ae4         cmp        bl, 0x7e
0000000000004ae7         ja         loc_4e08

0000000000004aed         lea        rcx, qword [switch_table_162a0+44]          ; 0x162cc
0000000000004af4         movzx      edx, bl
0000000000004af7         movsxd     rax, dword [rcx+rdx*4]
0000000000004afb         add        rax, rcx
0000000000004afe         jmp        rax
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_4b00:
0000000000004b00         xor        r10d, r10d
0000000000004b03         cmp        r11, 0x1
0000000000004b07         setne      al
0000000000004b0a         cmp        r11, 0xffffffffffffffff
0000000000004b0e         jne        loc_4b1c

0000000000004b10         mov        rax, qword [rsp+arg_8]
0000000000004b15         cmp        byte [rax+1], 0x0
0000000000004b19         setne      al

                     loc_4b1c:
0000000000004b1c         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_4b00+14
0000000000004b21         sete       dl
0000000000004b24         test       al, al
0000000000004b26         je         loc_4d78

                     loc_4b2c:
0000000000004b2c         xor        r12d, r12d                                  ; CODE XREF=sub_4d70+11
0000000000004b2f         xor        eax, eax
0000000000004b31         nop        dword [rax]
                        ; endp

                     loc_4b38:
0000000000004b38         cmp        byte [rsp+0xe8+var_DB], 0x1                 ; CODE XREF=sub_4d20+50, sub_4df0+119
0000000000004b3d         jne        loc_4c52

0000000000004b43         test       dl, dl
0000000000004b45         jne        loc_4c52

                     loc_4b4b:
0000000000004b4b         mov        rsi, qword [rsp+0xe8+var_C8]                ; CODE XREF=sub_4c00+87
0000000000004b50         test       rsi, rsi
0000000000004b53         je         loc_4b69

0000000000004b55         mov        edx, ebx
0000000000004b57         shr        dl, 0x5
0000000000004b5a         movzx      edx, dl
0000000000004b5d         mov        edx, dword [rsi+rdx*4]
0000000000004b60         bt         edx, ebx
0000000000004b63         jb         loc_4cb3

                     loc_4b69:
0000000000004b69         test       r10b, r10b                                  ; CODE XREF=sub_4b00+83, sub_4c00+93
0000000000004b6c         jne        loc_4cb3

0000000000004b72         xor        eax, 0x1
0000000000004b75         add        rbp, 0x1
0000000000004b79         and        eax, r8d

                     loc_4b7c:
0000000000004b7c         test       al, al                                      ; CODE XREF=sub_5050+936
0000000000004b7e         je         loc_4ba0

0000000000004b80         cmp        r13, r15
0000000000004b83         jbe        loc_4b8a

0000000000004b85         mov        byte [r14+r15], 0x27

                     loc_4b8a:
0000000000004b8a         lea        rax, qword [r15+1]                          ; CODE XREF=sub_4b00+131
0000000000004b8e         cmp        r13, rax
0000000000004b91         jbe        loc_4b99

0000000000004b93         mov        byte [r14+r15+1], 0x27

                     loc_4b99:
0000000000004b99         add        r15, 0x2                                    ; CODE XREF=sub_4b00+145
0000000000004b9d         xor        r8d, r8d

                     loc_4ba0:
0000000000004ba0         cmp        r15, r13                                    ; CODE XREF=sub_4b00+126, sub_4c00+275, sub_5050+869
0000000000004ba3         jae        loc_4ba9

0000000000004ba5         mov        byte [r14+r15], bl

                     loc_4ba9:
0000000000004ba9         movzx      edi, byte [rsp+0xe8+var_DA]                 ; CODE XREF=sub_4b00+163
0000000000004bae         add        r15, 0x1
0000000000004bb2         mov        eax, 0x0
0000000000004bb7         test       r12b, r12b
0000000000004bba         cmove      edi, eax
0000000000004bbd         mov        byte [rsp+0xe8+var_DA], dil
0000000000004bc2         jmp        loc_49f8
0000000000004bc7         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_70: int8_t, 120
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_4bd0:
0000000000004bd0         xor        r10d, r10d
0000000000004bd3         mov        eax, dword [rsp+arg_0]
0000000000004bd7         cmp        eax, 0x2
0000000000004bda         je         loc_5198

0000000000004be0         cmp        eax, 0x5
0000000000004be3         je         loc_5158

0000000000004be9         cmp        eax, 0x2
0000000000004bec         mov        ebx, 0x3f
0000000000004bf1         sete       dl
0000000000004bf4         xor        r12d, r12d
0000000000004bf7         xor        eax, eax
0000000000004bf9         jmp        sub_4b00+56
                        ; endp
0000000000004bfe         align      1024


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_74: int8_t, 124
        ;    arg_48: int, 80
        ;    arg_40: int, 72
        ;    arg_38: int, 64
        ;    arg_30: int, 56
        ;    arg_28: int, 48
        ;    arg_20: int, 40
        ;    arg_18: int, 32
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_4c00:
0000000000004c00         xor        r10d, r10d
0000000000004c03         cmp        dword [rsp+arg_0], 0x2
0000000000004c08         je         loc_5110

0000000000004c0e         mov        byte [rsp+arg_74], r12b
0000000000004c13         xor        edx, edx
0000000000004c15         xor        eax, eax
0000000000004c17         mov        ebx, 0x27
0000000000004c1c         jmp        sub_4b00+56
                        ; endp
0000000000004c21         nop        dword [rax]
0000000000004c28         mov        edx, 0x9
0000000000004c2d         mov        ebx, 0x74

                     loc_4c32:
0000000000004c32         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_4dc0+10, sub_4eb0+37, sub_4ff0+53
0000000000004c37         sete       al
0000000000004c3a         and        al, byte [rsp+arg_7]
0000000000004c3e         jne        sub_4d70+30

0000000000004c44         cmp        byte [rsp+arg_5], 0x0                       ; CODE XREF=sub_4c00+114
0000000000004c49         jne        loc_4cb0

                     loc_4c4b:
0000000000004c4b         mov        ebx, edx                                    ; CODE XREF=sub_4d20+18
0000000000004c4d         xor        r12d, r12d
0000000000004c50         xor        eax, eax
                        ; endp

                     loc_4c52:
0000000000004c52         cmp        byte [rsp+0xe8+var_D9], 0x0                 ; CODE XREF=sub_4b00+61, sub_4b00+69
0000000000004c57         jne        loc_4b4b

0000000000004c5d         jmp        loc_4b69
0000000000004c62         nop        word [rax+rax]
0000000000004c68         mov        edx, 0x8
0000000000004c6d         mov        ebx, 0x62
0000000000004c72         jmp        sub_4c00+68
0000000000004c74         nop        dword [rax]
0000000000004c78         cmp        dword [rsp+8], 0x2
0000000000004c7d         je         sub_5050                                    ; sub_5050
0000000000004c83         cmp        byte [rsp+0xd], 0x0
0000000000004c88         je         sub_4e90+16

                     loc_4c8e:
0000000000004c8e         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_4e90+8
0000000000004c93         je         loc_4ea0

0000000000004c99         cmp        qword [rsp+arg_10], 0x0
0000000000004c9f         jne        loc_505b

0000000000004ca5         mov        ebx, 0x5c
0000000000004caa         nop        word [rax+rax]
                        ; endp

                     loc_4cb0:
0000000000004cb0         xor        r12d, r12d                                  ; CODE XREF=sub_4c00+73, sub_4ff0+29
                        ; endp

                     loc_4cb3:
0000000000004cb3         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_4b00+99, sub_4b00+108
0000000000004cb8         sete       dl
0000000000004cbb         cmp        byte [rsp+0xe8+var_D9], 0x0
0000000000004cc0         mov        eax, edx
0000000000004cc2         jne        loc_5518

0000000000004cc8         mov        eax, r8d
0000000000004ccb         xor        eax, 0x1
0000000000004cce         and        al, dl
0000000000004cd0         je         loc_4d01

0000000000004cd2         cmp        r13, r15
0000000000004cd5         jbe        loc_4cdc

0000000000004cd7         mov        byte [r14+r15], 0x27

                     loc_4cdc:
0000000000004cdc         lea        rdx, qword [r15+1]                          ; CODE XREF=sub_4c00+213
0000000000004ce0         cmp        r13, rdx
0000000000004ce3         jbe        loc_4ceb

0000000000004ce5         mov        byte [r14+r15+1], 0x24

                     loc_4ceb:
0000000000004ceb         lea        rdx, qword [r15+2]                          ; CODE XREF=sub_4c00+227
0000000000004cef         cmp        r13, rdx
0000000000004cf2         jbe        loc_4cfa

0000000000004cf4         mov        byte [r14+r15+2], 0x27

                     loc_4cfa:
0000000000004cfa         add        r15, 0x3                                    ; CODE XREF=sub_4c00+242
0000000000004cfe         mov        r8d, eax

                     loc_4d01:
0000000000004d01         cmp        r13, r15                                    ; CODE XREF=sub_4c00+208
0000000000004d04         jbe        loc_4d0b

0000000000004d06         mov        byte [r14+r15], 0x5c

                     loc_4d0b:
0000000000004d0b         add        r15, 0x1                                    ; CODE XREF=sub_4c00+260
0000000000004d0f         add        rbp, 0x1
0000000000004d13         jmp        loc_4ba0
0000000000004d18         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_70: int8_t, 120
        ;    arg_20: int, 40
        ;    arg_18: int, 32
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_4d20:
0000000000004d20         cmp        byte [rsp+arg_5], 0x0
0000000000004d25         jne        loc_4ef3

0000000000004d2b         xor        edx, edx
0000000000004d2d         test       byte [rsp+arg_70], 0x1
0000000000004d32         je         loc_4c4b

0000000000004d38         add        rbp, 0x1
0000000000004d3c         jmp        quotearg_buffer_restyled+232
                        ; endp
0000000000004d41         nop        dword [rax]
0000000000004d48         cmp        dword [rsp+8], 0x2
0000000000004d4d         sete       dl
0000000000004d50         xor        eax, eax
0000000000004d52         jmp        sub_4b00+56
0000000000004d57         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_4d60:
0000000000004d60         mov        edx, 0x7
0000000000004d65         mov        ebx, 0x61
0000000000004d6a         jmp        sub_4c00+68
                        ; endp
0000000000004d6f         nop


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_4d70:
0000000000004d70         cmp        dword [rsp+8], 0x2
0000000000004d75         sete       dl
                        ; endp

                     loc_4d78:
0000000000004d78         test       rbp, rbp                                    ; CODE XREF=sub_4b00+38, sub_4f90+35
0000000000004d7b         jne        loc_4b2c

0000000000004d81         movzx      eax, byte [rsp+arg_7]                       ; CODE XREF=sub_4fc0+43
0000000000004d86         and        al, dl
0000000000004d88         je         sub_4b00+56

0000000000004d8e         mov        rbp, r11
0000000000004d91         mov        dword [rsp+arg_0], 0x2
0000000000004d99         jmp        sub_5050+1097
                        ; endp
0000000000004d9e         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_4da0:
0000000000004da0         cmp        dword [rsp+arg_0], 0x2
0000000000004da5         sete       dl
0000000000004da8         xor        r12d, r12d
0000000000004dab         jmp        sub_4d70+17
                        ; endp
0000000000004dad         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_4db0:
0000000000004db0         cmp        dword [rsp+arg_0], 0x2
0000000000004db5         mov        ebx, 0x20
0000000000004dba         sete       dl
0000000000004dbd         jmp        sub_4d70+17
                        ; endp
0000000000004dbf         align      64


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_4dc0:
0000000000004dc0         mov        edx, 0xd
0000000000004dc5         mov        ebx, 0x72
0000000000004dca         jmp        loc_4c32
0000000000004dcf         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_4dd0:
0000000000004dd0         mov        edx, 0xc
0000000000004dd5         mov        ebx, 0x66
0000000000004dda         jmp        sub_4c00+68
                        ; endp
0000000000004ddf         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_4de0:
0000000000004de0         mov        edx, 0xb
0000000000004de5         mov        ebx, 0x76
0000000000004dea         jmp        sub_4c00+68
                        ; endp
0000000000004def         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_4df0:
0000000000004df0         mov        edx, 0xa
0000000000004df5         mov        ebx, 0x6e
0000000000004dfa         jmp        sub_4c00+50
                        ; endp
0000000000004dff         align      512

                     loc_4e00:
0000000000004e00         xor        r10d, r10d                                  ; CODE XREF=sub_4df0+135
0000000000004e03         nop        dword [rax+rax]

                     loc_4e08:
0000000000004e08         cmp        qword [rsp+0xe8+var_90], 0x1                ; CODE XREF=quotearg_buffer_restyled+471
0000000000004e0e         jne        loc_51b8

0000000000004e14         mov        qword [rsp+0xe8+var_B0], r11
0000000000004e19         mov        byte [rsp+0xe8+var_B8], r8b
0000000000004e1e         mov        byte [rsp+0xe8+var_C0], r10b
0000000000004e23         call       j___ctype_b_loc                             ; __ctype_b_loc
0000000000004e28         mov        rcx, qword [rax]
0000000000004e2b         movzx      edx, bl
0000000000004e2e         movzx      r10d, byte [rsp+0xe8+var_C0]
0000000000004e34         movzx      r8d, byte [rsp+0xe8+var_B8]
0000000000004e3a         mov        r11, qword [rsp+0xe8+var_B0]
0000000000004e3f         mov        edi, 0x1
0000000000004e44         movzx      eax, word [rcx+rdx*2]
0000000000004e48         and        ax, 0x4000
0000000000004e4c         setne      r12b
0000000000004e50         sete       al
0000000000004e53         and        al, byte [rsp+0xe8+var_DB]

                     loc_4e57:
0000000000004e57         test       al, al                                      ; CODE XREF=sub_5050+2221
0000000000004e59         jne        loc_57f1

0000000000004e5f         cmp        dword [rsp+0xe8+var_E0], 0x2
0000000000004e64         sete       dl
0000000000004e67         jmp        loc_4b38
0000000000004e6c         align      16

                     loc_4e70:
0000000000004e70         movzx      ebx, byte [r9]                              ; CODE XREF=quotearg_buffer_restyled+305
0000000000004e74         cmp        bl, 0x7e
0000000000004e77         ja         loc_4e00

0000000000004e79         lea        rcx, qword [switch_table_162a0+552]         ; 0x164c8
0000000000004e80         movzx      edx, bl
0000000000004e83         movsxd     rax, dword [rcx+rdx*4]
0000000000004e87         add        rax, rcx
0000000000004e8a         jmp        rax
                        ; endp
0000000000004e8c         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_4e90:
0000000000004e90         xor        r10d, r10d
0000000000004e93         cmp        byte [rsp+arg_5], 0x0
0000000000004e98         jne        loc_4c8e

0000000000004e9e         nop

                     loc_4ea0:
0000000000004ea0         mov        edx, 0x5c                                   ; CODE XREF=sub_4c00+136, sub_4c00+147
0000000000004ea5         mov        ebx, 0x5c
0000000000004eaa         jmp        sub_4c00+68
                        ; endp
0000000000004eaf         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_4eb0:
0000000000004eb0         mov        edx, 0xc
0000000000004eb5         xor        r10d, r10d
0000000000004eb8         mov        ebx, 0x66
0000000000004ebd         jmp        sub_4c00+68
                        ; endp
0000000000004ec2         nop        word [rax+rax]
0000000000004ec8         mov        edx, 0xa
0000000000004ecd         xor        r10d, r10d
0000000000004ed0         mov        ebx, 0x6e
0000000000004ed5         jmp        sub_4c00+50
0000000000004eda         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_4ee0:
0000000000004ee0         mov        ebx, 0x61
0000000000004ee5         jmp        sub_4c00+176
                        ; endp
0000000000004eea         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_4ef0:
0000000000004ef0         xor        r10d, r10d
                        ; endp

                     loc_4ef3:
0000000000004ef3         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_4d20+5
0000000000004ef8         sete       dl
0000000000004efb         cmp        byte [rsp+arg_7], 0x0
0000000000004f00         jne        loc_5a9a

0000000000004f06         mov        eax, r8d
0000000000004f09         mov        rcx, r15
0000000000004f0c         xor        eax, 0x1
0000000000004f0f         and        al, dl
0000000000004f11         je         loc_4f40

0000000000004f13         cmp        r13, r15
0000000000004f16         jbe        loc_4f1d

0000000000004f18         mov        byte [r14+r15], 0x27

                     loc_4f1d:
0000000000004f1d         lea        rcx, qword [r15+1]                          ; CODE XREF=sub_4ef0+38
0000000000004f21         cmp        r13, rcx
0000000000004f24         jbe        loc_4f2c

0000000000004f26         mov        byte [r14+r15+1], 0x24

                     loc_4f2c:
0000000000004f2c         lea        rcx, qword [r15+2]                          ; CODE XREF=sub_4ef0+52
0000000000004f30         cmp        r13, rcx
0000000000004f33         ja         loc_5569

                     loc_4f39:
0000000000004f39         lea        rcx, qword [r15+3]                          ; CODE XREF=sub_5050+1311
0000000000004f3d         mov        r8d, eax

                     loc_4f40:
0000000000004f40         cmp        r13, rcx                                    ; CODE XREF=sub_4ef0+33
0000000000004f43         jbe        loc_4f4a

0000000000004f45         mov        byte [r14+rcx], 0x5c

                     loc_4f4a:
0000000000004f4a         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_4ef0+83
0000000000004f4f         lea        r15, qword [rcx+1]
0000000000004f53         je         loc_5559

0000000000004f59         lea        rax, qword [rbp+1]
0000000000004f5d         cmp        rax, r11
0000000000004f60         jae        loc_4f7b

0000000000004f62         mov        rax, qword [rsp+arg_8]
0000000000004f67         movzx      eax, byte [rax+rbp+1]
0000000000004f6c         mov        byte [rsp+arg_20], al
0000000000004f70         sub        eax, 0x30
0000000000004f73         cmp        al, 0x9
0000000000004f75         jbe        loc_57a9

                     loc_4f7b:
0000000000004f7b         mov        eax, r12d                                   ; CODE XREF=sub_4ef0+112
0000000000004f7e         mov        ebx, 0x30
0000000000004f83         xor        r12d, r12d
0000000000004f86         jmp        sub_4b00+56
                        ; endp
0000000000004f8b         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_4f90:
0000000000004f90         cmp        dword [rsp+arg_0], 0x2
0000000000004f95         mov        r12d, r10d
0000000000004f98         sete       dl
0000000000004f9b         xor        r10d, r10d
0000000000004f9e         xor        eax, eax
0000000000004fa0         jmp        sub_4b00+56
                        ; endp
0000000000004fa5         nop        dword [rax]
0000000000004fa8         cmp        dword [rsp+8], 0x2
0000000000004fad         sete       dl
0000000000004fb0         xor        r10d, r10d
0000000000004fb3         jmp        sub_4d70+8
0000000000004fb8         nop        dword [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_4fc0:
0000000000004fc0         cmp        dword [rsp+8], 0x2
0000000000004fc5         sete       dl
0000000000004fc8         xor        r10d, r10d
0000000000004fcb         xor        r12d, r12d
0000000000004fce         jmp        sub_4d70+17
                        ; endp
0000000000004fd3         nop        dword [rax+rax]
0000000000004fd8         cmp        dword [rsp+8], 0x2
0000000000004fdd         mov        r12d, r10d
0000000000004fe0         mov        ebx, 0x20
0000000000004fe5         sete       dl
0000000000004fe8         xor        r10d, r10d
0000000000004feb         jmp        sub_4d70+17


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_4ff0:
0000000000004ff0         mov        edx, 0xd
0000000000004ff5         xor        r10d, r10d
0000000000004ff8         mov        ebx, 0x72
0000000000004ffd         jmp        sub_4c00+50
                        ; endp
0000000000005002         nop        word [rax+rax]
0000000000005008         mov        ebx, 0x76
000000000000500d         jmp        sub_4c00+176
0000000000005012         nop        word [rax+rax]
0000000000005018         mov        edx, 0x9
000000000000501d         xor        r10d, r10d
0000000000005020         mov        ebx, 0x74
0000000000005025         jmp        sub_4c00+50
000000000000502a         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_5030:
0000000000005030         mov        ebx, 0x62
0000000000005035         jmp        sub_4c00+176
                        ; endp
000000000000503a         nop        word [rax+rax]

                     loc_5040:
0000000000005040         xor        r10d, r10d                                  ; CODE XREF=quotearg_buffer_restyled+376, quotearg_buffer_restyled+433
0000000000005043         jmp        loc_4ae0
0000000000005048         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_7: int8_t, 15


                     sub_5050:
0000000000005050         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_4c00+125
0000000000005055         jne        sub_5050+2416
                        ; endp

                     loc_505b:
000000000000505b         add        rbp, 0x1                                    ; CODE XREF=sub_4c00+159
000000000000505f         mov        eax, r8d
0000000000005062         xor        r12d, r12d
0000000000005065         mov        ebx, 0x5c
000000000000506a         jmp        sub_4b00+124
                        ; endp
000000000000506f         align      16

                     loc_5070:
0000000000005070         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=quotearg_buffer_restyled+261
0000000000005075         movzx      ebx, byte [rsp+0xe8+var_D9]
000000000000507a         mov        r12d, r8d
000000000000507d         mov        rbp, r11
0000000000005080         sete       dl
0000000000005083         mov        eax, ebx
0000000000005085         test       r15, r15
0000000000005088         sete       cl
000000000000508b         and        eax, edx
000000000000508d         and        al, cl
000000000000508f         jne        loc_5af6

0000000000005095         mov        eax, ebx
0000000000005097         xor        eax, 0x1
000000000000509a         and        dl, al
000000000000509c         je         loc_5a0c

00000000000050a2         cmp        byte [rsp+0xe8+var_6C], 0x0
00000000000050a7         je         loc_5a0a

00000000000050ad         cmp        byte [rsp+0xe8+var_DA], 0x0
00000000000050b2         jne        loc_5aad

00000000000050b8         test       r13, r13
00000000000050bb         sete       al
00000000000050be         cmp        qword [rsp+0xe8+var_98], 0x0
00000000000050c4         setne      dl
00000000000050c7         and        al, dl
00000000000050c9         je         loc_5aec

00000000000050cf         mov        r13, qword [rsp+0xe8+var_98]

                     loc_50d4:
00000000000050d4         lea        rbx, qword [aSyntaxErrorUne+27]             ; 0x1609e, CODE XREF=sub_5050+2781
00000000000050db         mov        byte [r14], 0x27
00000000000050df         mov        dword [rsp+0xe8+var_E0], 0x2
00000000000050e7         mov        r15d, 0x1
00000000000050ed         mov        qword [rsp+0xe8+var_D0], 0x1
00000000000050f6         mov        byte [rsp+0xe8+var_D9], 0x0
00000000000050fb         mov        qword [rsp+0xe8+var_A0], rbx
0000000000005100         mov        byte [rsp+0xe8+var_6C], al
0000000000005104         jmp        loc_49e3
0000000000005109         align      16

                     loc_5110:
0000000000005110         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_4c00+8
0000000000005115         jne        sub_5050+2416

000000000000511b         test       r13, r13
000000000000511e         je         loc_5520

0000000000005124         xor        edx, edx
0000000000005126         cmp        qword [rsp+arg_48], 0x0
000000000000512c         jne        loc_5520

                     loc_5132:
0000000000005132         mov        qword [rsp+arg_48], r13                     ; CODE XREF=sub_5050+1284, sub_5050+2794
0000000000005137         add        r15, 0x3
000000000000513b         xor        eax, eax
000000000000513d         mov        byte [rsp+arg_74], r12b
0000000000005142         xor        r8d, r8d
0000000000005145         mov        r13, rdx
0000000000005148         mov        ebx, 0x27
000000000000514d         jmp        sub_4b00+105
                        ; endp
0000000000005152         align      8

                     loc_5158:
0000000000005158         test       byte [rsp+arg_70], 0x4                      ; CODE XREF=sub_4bd0+19
000000000000515d         je         loc_5180

000000000000515f         lea        rcx, qword [rbp+2]
0000000000005163         cmp        rcx, r11
0000000000005166         jae        loc_5180

0000000000005168         mov        rax, qword [rsp+arg_8]
000000000000516d         cmp        byte [rax+rbp+1], 0x3f
0000000000005172         je         loc_5902

0000000000005178         nop        dword [rax+rax]

                     loc_5180:
0000000000005180         xor        edx, edx                                    ; CODE XREF=sub_5050+269, sub_5050+278, sub_5050+2233, sub_5050+2253
0000000000005182         xor        r12d, r12d
0000000000005185         xor        eax, eax
0000000000005187         mov        ebx, 0x3f
000000000000518c         jmp        sub_4b00+56
                        ; endp
0000000000005191         align      8

                     loc_5198:
0000000000005198         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_4bd0+10
000000000000519d         jne        loc_59c0

00000000000051a3         xor        r12d, r12d
00000000000051a6         xor        eax, eax
00000000000051a8         mov        ebx, 0x3f
00000000000051ad         jmp        sub_4b00+105
                        ; endp
00000000000051b2         align      8

                     loc_51b8:
00000000000051b8         lea        rax, qword [rsp+0xe8+var_48]                ; CODE XREF=sub_4df0+30
00000000000051c0         cmp        r11, 0xffffffffffffffff
00000000000051c4         mov        qword [rsp+0xe8+var_48], 0x0
00000000000051d0         mov        qword [rsp+0xe8+var_C0], rax
00000000000051d5         jne        loc_5204

00000000000051d7         mov        rdi, qword [rsp+0xe8+var_D8]                ; argument "__s" for method j_strlen
00000000000051dc         mov        byte [rsp+0xe8+var_A8], r8b
00000000000051e1         mov        byte [rsp+0xe8+var_B0], r10b
00000000000051e6         mov        qword [rsp+0xe8+var_B8], r9
00000000000051eb         call       j_strlen                                    ; strlen
00000000000051f0         movzx      r8d, byte [rsp+0xe8+var_A8]
00000000000051f6         movzx      r10d, byte [rsp+0xe8+var_B0]
00000000000051fc         mov        r11, rax
00000000000051ff         mov        r9, qword [rsp+0xe8+var_B8]

                     loc_5204:
0000000000005204         lea        rax, qword [rsp+0xe8+var_4C]                ; CODE XREF=sub_5050+389
000000000000520c         xor        ecx, ecx
000000000000520e         mov        byte [rsp+0xe8+var_6A], bl
0000000000005212         mov        byte [rsp+0xe8+var_6B], r8b
0000000000005217         mov        rbx, rcx
000000000000521a         mov        qword [rsp+0xe8+var_60], r9
0000000000005222         mov        qword [rsp+0xe8+var_B0], rax
0000000000005227         mov        byte [rsp+0xe8+var_69], r10b
000000000000522c         mov        qword [rsp+0xe8+var_68], r15
0000000000005234         mov        qword [rsp+0xe8+var_A8], r14
0000000000005239         mov        qword [rsp+0xe8+var_78], r13
000000000000523e         mov        qword [rsp+0xe8+var_B8], r11

                     loc_5243:
0000000000005243         mov        rax, qword [rsp+0xe8+var_D8]                ; CODE XREF=sub_5050+623
0000000000005248         lea        r14, qword [rbp+rbx]
000000000000524d         mov        rdx, qword [rsp+0xe8+var_B8]
0000000000005252         mov        rcx, qword [rsp+0xe8+var_C0]
0000000000005257         mov        rdi, qword [rsp+0xe8+var_B0]
000000000000525c         lea        r13, qword [rax+r14]
0000000000005260         sub        rdx, r14
0000000000005263         mov        rsi, r13
0000000000005266         call       rpl_mbrtowc                                 ; rpl_mbrtowc
000000000000526b         test       rax, rax
000000000000526e         mov        r15, rax
0000000000005271         je         loc_52c1

0000000000005273         cmp        rax, 0xffffffffffffffff
0000000000005277         je         loc_5895

000000000000527d         cmp        rax, 0xfffffffffffffffe
0000000000005281         je         loc_5821

0000000000005287         cmp        dword [rsp+0xe8+var_E0], 0x2
000000000000528c         sete       al
000000000000528f         and        al, byte [rsp+0xe8+var_D9]
0000000000005293         jne        loc_5430

                     loc_5299:
0000000000005299         mov        edi, dword [rsp+0xe8+var_4C]                ; argument "__wc" for method j_iswprint, CODE XREF=sub_5050+996, sub_5050+1031
00000000000052a0         call       j_iswprint                                  ; iswprint
00000000000052a5         mov        rdi, qword [rsp+0xe8+var_C0]                ; argument "__ps" for method j_mbsinit
00000000000052aa         test       eax, eax
00000000000052ac         mov        eax, 0x0
00000000000052b1         cmove      r12d, eax
00000000000052b5         add        rbx, r15
00000000000052b8         call       j_mbsinit                                   ; mbsinit
00000000000052bd         test       eax, eax
00000000000052bf         je         loc_5243

                     loc_52c1:
00000000000052c1         mov        edx, r12d                                   ; CODE XREF=sub_5050+545
00000000000052c4         mov        rdi, rbx
00000000000052c7         movzx      r8d, byte [rsp+0xe8+var_6B]
00000000000052cd         xor        edx, 0x1
00000000000052d0         movzx      ebx, byte [rsp+0xe8+var_6A]
00000000000052d5         movzx      r10d, byte [rsp+0xe8+var_69]
00000000000052db         and        dl, byte [rsp+0xe8+var_DB]
00000000000052df         mov        r15, qword [rsp+0xe8+var_68]
00000000000052e7         mov        r14, qword [rsp+0xe8+var_A8]
00000000000052ec         mov        r13, qword [rsp+0xe8+var_78]
00000000000052f1         mov        r11, qword [rsp+0xe8+var_B8]

                     loc_52f6:
00000000000052f6         cmp        rdi, 0x1                                    ; CODE XREF=sub_5050+2112, sub_5050+2168
00000000000052fa         jbe        loc_58fb

                     loc_5300:
0000000000005300         mov        rcx, rdi                                    ; CODE XREF=sub_5050+1961
0000000000005303         xor        esi, esi
0000000000005305         movzx      r9d, byte [rsp+0xe8+var_D9]
000000000000530b         add        rcx, rbp
000000000000530e         mov        rdi, qword [rsp+0xe8+var_D8]
0000000000005313         jmp        loc_53ce
0000000000005318         align      32

                     loc_5320:
0000000000005320         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_5050+896
0000000000005325         sete       al
0000000000005328         test       r9b, r9b
000000000000532b         jne        loc_57e0

0000000000005331         mov        esi, r8d
0000000000005334         xor        esi, 0x1
0000000000005337         and        al, sil
000000000000533a         je         loc_536b

000000000000533c         cmp        r13, r15
000000000000533f         jbe        loc_5346

0000000000005341         mov        byte [r14+r15], 0x27

                     loc_5346:
0000000000005346         lea        rsi, qword [r15+1]                          ; CODE XREF=sub_5050+751
000000000000534a         cmp        r13, rsi
000000000000534d         jbe        loc_5355

000000000000534f         mov        byte [r14+r15+1], 0x24

                     loc_5355:
0000000000005355         lea        rsi, qword [r15+2]                          ; CODE XREF=sub_5050+765
0000000000005359         cmp        r13, rsi
000000000000535c         jbe        loc_5364

000000000000535e         mov        byte [r14+r15+2], 0x27

                     loc_5364:
0000000000005364         add        r15, 0x3                                    ; CODE XREF=sub_5050+780
0000000000005368         mov        r8d, eax

                     loc_536b:
000000000000536b         cmp        r13, r15                                    ; CODE XREF=sub_5050+746
000000000000536e         jbe        loc_5375

0000000000005370         mov        byte [r14+r15], 0x5c

                     loc_5375:
0000000000005375         lea        rax, qword [r15+1]                          ; CODE XREF=sub_5050+798
0000000000005379         cmp        r13, rax
000000000000537c         jbe        loc_538b

000000000000537e         mov        eax, ebx
0000000000005380         shr        al, 0x6
0000000000005383         add        eax, 0x30
0000000000005386         mov        byte [r14+r15+1], al

                     loc_538b:
000000000000538b         lea        rax, qword [r15+2]                          ; CODE XREF=sub_5050+812
000000000000538f         cmp        r13, rax
0000000000005392         jbe        loc_53a4

0000000000005394         mov        eax, ebx
0000000000005396         shr        al, 0x3
0000000000005399         and        eax, 0x7
000000000000539c         add        eax, 0x30
000000000000539f         mov        byte [r14+r15+2], al

                     loc_53a4:
00000000000053a4         and        ebx, 0x7                                    ; CODE XREF=sub_5050+834
00000000000053a7         add        rbp, 0x1
00000000000053ab         add        r15, 0x3
00000000000053af         add        ebx, 0x30
00000000000053b2         cmp        rbp, rcx
00000000000053b5         jae        loc_4ba0

00000000000053bb         mov        esi, edx

                     loc_53bd:
00000000000053bd         cmp        r13, r15                                    ; CODE XREF=sub_5050+985, sub_5050+1969
00000000000053c0         jbe        loc_53c6

00000000000053c2         mov        byte [r14+r15], bl

                     loc_53c6:
00000000000053c6         movzx      ebx, byte [rdi+rbp]                         ; CODE XREF=sub_5050+880
00000000000053ca         add        r15, 0x1

                     loc_53ce:
00000000000053ce         test       dl, dl                                      ; CODE XREF=sub_5050+707
00000000000053d0         jne        loc_5320

00000000000053d6         mov        eax, esi
00000000000053d8         xor        eax, 0x1
00000000000053db         and        eax, r8d
00000000000053de         test       r10b, r10b
00000000000053e1         je         loc_53f1

00000000000053e3         cmp        r13, r15
00000000000053e6         jbe        loc_53ed

00000000000053e8         mov        byte [r14+r15], 0x5c

                     loc_53ed:
00000000000053ed         add        r15, 0x1                                    ; CODE XREF=sub_5050+918

                     loc_53f1:
00000000000053f1         add        rbp, 0x1                                    ; CODE XREF=sub_5050+913
00000000000053f5         cmp        rbp, rcx
00000000000053f8         jae        loc_4b7c

00000000000053fe         test       al, al
0000000000005400         je         loc_57fe

0000000000005406         cmp        r13, r15
0000000000005409         jbe        loc_5410

000000000000540b         mov        byte [r14+r15], 0x27

                     loc_5410:
0000000000005410         lea        rax, qword [r15+1]                          ; CODE XREF=sub_5050+953
0000000000005414         cmp        r13, rax
0000000000005417         jbe        loc_541f

0000000000005419         mov        byte [r14+r15+1], 0x27

                     loc_541f:
000000000000541f         add        r15, 0x2                                    ; CODE XREF=sub_5050+967
0000000000005423         xor        r10d, r10d
0000000000005426         xor        r8d, r8d
0000000000005429         jmp        loc_53bd
000000000000542b         align      16

                     loc_5430:
0000000000005430         cmp        r15, 0x1                                    ; CODE XREF=sub_5050+579
0000000000005434         je         loc_5299

000000000000543a         mov        rdi, qword [rsp+0xe8+var_D8]
000000000000543f         lea        rcx, qword [rdi+r15]
0000000000005443         lea        rdx, qword [rdi+r14+1]
0000000000005448         lea        r8, qword [rcx+r14]
000000000000544c         jmp        loc_545d
000000000000544e         align      16

                     loc_5450:
0000000000005450         add        rdx, 0x1                                    ; CODE XREF=sub_5050+1046, sub_5050+1072
0000000000005454         cmp        r8, rdx
0000000000005457         je         loc_5299

                     loc_545d:
000000000000545d         movzx      ecx, byte [rdx]                             ; CODE XREF=sub_5050+1020
0000000000005460         sub        ecx, 0x5b
0000000000005463         cmp        cl, 0x21
0000000000005466         ja         loc_5450

0000000000005468         mov        esi, 0x1
000000000000546d         shl        rsi, cl
0000000000005470         mov        rcx, rsi
0000000000005473         movabs     rsi, 0x20000002b
000000000000547d         test       rcx, rsi
0000000000005480         je         loc_5450

0000000000005482         mov        r14, qword [rsp+0xe8+var_A8]
0000000000005487         mov        r13, qword [rsp+0xe8+var_78]
000000000000548c         mov        rbp, qword [rsp+0xe8+var_B8]
0000000000005491         mov        dword [rsp+0xe8+var_E0], 0x2

                     loc_5499:
0000000000005499         cmp        byte [rsp+0xe8+var_DB], 0x0                 ; CODE XREF=sub_5050+1227, sub_5050+1948, sub_5050+2585, sub_5050+2734
000000000000549e         je         loc_54b0

00000000000054a0         test       al, al
00000000000054a2         mov        eax, 0x4
00000000000054a7         cmove      eax, dword [rsp+0xe8+var_E0]
00000000000054ac         mov        dword [rsp+0xe8+var_E0], eax

                     loc_54b0:
00000000000054b0         sub        rsp, 0x8                                    ; CODE XREF=sub_5050+1102
00000000000054b4         mov        rcx, rbp
00000000000054b7         mov        rsi, r13
00000000000054ba         push       qword [rsp+0xf0+var_88]
00000000000054be         push       qword [rsp+0xf8+var_80]
00000000000054c2         mov        rdi, r14
00000000000054c5         push       0x0
00000000000054c7         mov        r9d, dword [rsp+0x108+var_70]
00000000000054cf         mov        r8d, dword [rsp+0x108+var_E0]
00000000000054d4         mov        rdx, qword [rsp+0x108+var_D8]
00000000000054d9         and        r9d, 0xfffffffd
00000000000054dd         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
00000000000054e2         add        rsp, 0x20
00000000000054e6         mov        r15, rax

                     loc_54e9:
00000000000054e9         mov        rbx, qword [rsp+0xe8+var_40]                ; CODE XREF=sub_5050+2549, sub_5050+2560, sub_5050+2711
00000000000054f1         xor        rbx, qword [fs:0x28]
00000000000054fa         mov        rax, r15
00000000000054fd         jne        loc_5b03

0000000000005503         add        rsp, 0xb8
000000000000550a         pop        rbx
000000000000550b         pop        rbp
000000000000550c         pop        r12
000000000000550e         pop        r13
0000000000005510         pop        r14
0000000000005512         pop        r15
0000000000005514         ret
                        ; endp
0000000000005515         align      8

                     loc_5518:
0000000000005518         mov        rbp, r11                                    ; CODE XREF=sub_4c00+194
000000000000551b         jmp        loc_5499

                     loc_5520:
0000000000005520         cmp        r13, r15                                    ; CODE XREF=sub_5050+206, sub_5050+220
0000000000005523         jbe        loc_552a

0000000000005525         mov        byte [r14+r15], 0x27

                     loc_552a:
000000000000552a         lea        rax, qword [r15+1]                          ; CODE XREF=sub_5050+1235
000000000000552e         cmp        r13, rax
0000000000005531         jbe        loc_5539

0000000000005533         mov        byte [r14+r15+1], 0x5c

                     loc_5539:
0000000000005539         lea        rax, qword [r15+2]                          ; CODE XREF=sub_5050+1249
000000000000553d         cmp        r13, rax
0000000000005540         jbe        loc_5b32

0000000000005546         mov        rdx, r13
0000000000005549         mov        byte [r14+r15+2], 0x27
000000000000554f         mov        r13, qword [rsp+arg_48]
0000000000005554         jmp        loc_5132

                     loc_5559:
0000000000005559         mov        eax, r12d                                   ; CODE XREF=sub_4ef0+99
000000000000555c         mov        ebx, 0x30
0000000000005561         xor        r12d, r12d
0000000000005564         jmp        sub_4b00+105
                        ; endp

                     loc_5569:
0000000000005569         mov        byte [r14+r15+2], 0x27                      ; CODE XREF=sub_4ef0+67
000000000000556f         jmp        loc_4f39

                     loc_5574:
0000000000005574         test       ebx, ebx                                    ; case 4, CODE XREF=quotearg_buffer_restyled+145
0000000000005576         jne        loc_49a3

000000000000557c         mov        byte [rsp+0xe8+var_DB], 0x1

                     loc_5581:
0000000000005581         test       r13, r13                                    ; CODE XREF=sub_5050+2749
0000000000005584         jne        loc_5b1a

000000000000558a         lea        rax, qword [aSyntaxErrorUne+27]             ; 0x1609e
0000000000005591         mov        qword [rsp+0xe8+var_98], 0x0
000000000000559a         mov        byte [rsp+0xe8+var_DA], 0x1
000000000000559f         mov        byte [rsp+0xe8+var_6C], 0x0
00000000000055a4         xor        r12d, r12d
00000000000055a7         mov        byte [rsp+0xe8+var_D9], 0x0
00000000000055ac         mov        qword [rsp+0xe8+var_D0], 0x1
00000000000055b5         mov        qword [rsp+0xe8+var_A0], rax
00000000000055ba         mov        r15d, 0x1
00000000000055c0         mov        dword [rsp+0xe8+var_E0], 0x2
00000000000055c8         jmp        loc_49e3
00000000000055cd         align      16

                     loc_55d0:
00000000000055d0         test       ebx, ebx                                    ; case 5, CODE XREF=quotearg_buffer_restyled+145
00000000000055d2         jne        loc_59cd

00000000000055d8         test       r13, r13
00000000000055db         je         loc_5806

00000000000055e1         mov        byte [r14], 0x22
00000000000055e5         mov        byte [rsp+0xe8+var_DA], 0x1
00000000000055ea         xor        r12d, r12d
00000000000055ed         mov        byte [rsp+0xe8+var_6C], 0x0
00000000000055f2         mov        qword [rsp+0xe8+var_98], 0x0

                     loc_55fb:
00000000000055fb         lea        rax, qword [aLibs+27]                       ; 0x1624b, CODE XREF=sub_5050+1996
0000000000005602         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000005607         mov        byte [rsp+0xe8+var_DB], 0x1
000000000000560c         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000005615         mov        r15d, 0x1
000000000000561b         mov        qword [rsp+0xe8+var_A0], rax
0000000000005620         jmp        loc_49e3

                     loc_5625:
0000000000005625         lea        rax, qword [aLibs+27]                       ; case 6, 0x1624b, CODE XREF=quotearg_buffer_restyled+145
000000000000562c         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000005631         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000005636         xor        r12d, r12d
0000000000005639         mov        qword [rsp+0xe8+var_98], 0x0
0000000000005642         mov        byte [rsp+0xe8+var_D9], 0x1
0000000000005647         mov        byte [rsp+0xe8+var_DB], 0x1
000000000000564c         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000005655         xor        r15d, r15d
0000000000005658         mov        qword [rsp+0xe8+var_A0], rax
000000000000565d         mov        dword [rsp+0xe8+var_E0], 0x5
0000000000005665         jmp        loc_49e3

                     loc_566a:
000000000000566a         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 7, CODE XREF=quotearg_buffer_restyled+145
000000000000566f         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000005674         xor        r12d, r12d
0000000000005677         mov        qword [rsp+0xe8+var_98], 0x0
0000000000005680         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000005685         xor        r15d, r15d
0000000000005688         mov        byte [rsp+0xe8+var_DB], 0x1
000000000000568d         mov        qword [rsp+0xe8+var_D0], 0x0
0000000000005696         mov        qword [rsp+0xe8+var_A0], 0x0
000000000000569f         jmp        loc_49e3

                     loc_56a4:
00000000000056a4         cmp        dword [rsp+0xe8+var_E0], 0xa                ; case 10, CODE XREF=quotearg_buffer_restyled+145
00000000000056a9         je         loc_5701

00000000000056ab         lea        rsi, qword [aLibs+29]                       ; argument "msgid" for method j_dcgettext, 0x1624d
00000000000056b2         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000056b4         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000056b9         call       j_dcgettext                                 ; dcgettext
00000000000056be         mov        rcx, rax
00000000000056c1         mov        qword [rsp+0xe8+var_80], rax
00000000000056c6         lea        rax, qword [aLibs+29]                       ; 0x1624d
00000000000056cd         cmp        rcx, rax
00000000000056d0         je         loc_5a6e

                     loc_56d6:
00000000000056d6         lea        rsi, qword [aSyntaxErrorUne+27]             ; argument "msgid" for method j_dcgettext, 0x1609e, CODE XREF=sub_5050+2607
00000000000056dd         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000056df         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000056e4         call       j_dcgettext                                 ; dcgettext
00000000000056e9         mov        rcx, rax
00000000000056ec         mov        qword [rsp+0xe8+var_88], rax
00000000000056f1         lea        rax, qword [aSyntaxErrorUne+27]             ; 0x1609e
00000000000056f8         cmp        rcx, rax
00000000000056fb         je         loc_5a84

                     loc_5701:
0000000000005701         xor        r15d, r15d                                  ; CODE XREF=sub_5050+1625, sub_5050+2629
0000000000005704         test       ebx, ebx
0000000000005706         je         loc_58cd

                     loc_570c:
000000000000570c         test       ebx, ebx                                    ; CODE XREF=sub_5050+2183, sub_5050+2214
000000000000570e         mov        rbx, qword [rsp+0xe8+var_88]
0000000000005713         setne      byte [rsp+0xe8+var_D9]
0000000000005718         xor        r12d, r12d
000000000000571b         mov        rdi, rbx                                    ; argument "__s" for method j_strlen
000000000000571e         call       j_strlen                                    ; strlen
0000000000005723         mov        qword [rsp+0xe8+var_A0], rbx
0000000000005728         mov        qword [rsp+0xe8+var_D0], rax
000000000000572d         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000005732         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000005737         mov        qword [rsp+0xe8+var_98], 0x0
0000000000005740         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000005745         jmp        loc_49e3

                     loc_574a:
000000000000574a         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 0, CODE XREF=quotearg_buffer_restyled+145
000000000000574f         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000005754         xor        r12d, r12d
0000000000005757         mov        qword [rsp+0xe8+var_98], 0x0
0000000000005760         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000005765         xor        r15d, r15d
0000000000005768         mov        byte [rsp+0xe8+var_DB], 0x0
000000000000576d         mov        qword [rsp+0xe8+var_D0], 0x0
0000000000005776         mov        qword [rsp+0xe8+var_A0], 0x0
000000000000577f         jmp        loc_49e3

                     loc_5784:
0000000000005784         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 3, CODE XREF=quotearg_buffer_restyled+145
0000000000005789         mov        byte [rsp+0xe8+var_6C], 0x0
000000000000578e         xor        r12d, r12d
0000000000005791         mov        qword [rsp+0xe8+var_98], 0x0
000000000000579a         mov        byte [rsp+0xe8+var_D9], 0x1
000000000000579f         mov        byte [rsp+0xe8+var_DB], 0x1
00000000000057a4         jmp        loc_49c3

                     loc_57a9:
00000000000057a9         cmp        r13, r15                                    ; CODE XREF=sub_4ef0+133
00000000000057ac         jbe        loc_57b3

00000000000057ae         mov        byte [r14+r15], 0x30

                     loc_57b3:
00000000000057b3         lea        rax, qword [rcx+2]                          ; CODE XREF=sub_5050+1884
00000000000057b7         cmp        r13, rax
00000000000057ba         jbe        loc_57c2

00000000000057bc         mov        byte [r14+rcx+2], 0x30

                     loc_57c2:
00000000000057c2         mov        eax, r12d                                   ; CODE XREF=sub_5050+1898
00000000000057c5         lea        r15, qword [rcx+3]
00000000000057c9         xor        r12d, r12d
00000000000057cc         mov        ebx, 0x30
00000000000057d1         jmp        sub_4b00+56
                        ; endp
00000000000057d6         align      32

                     loc_57e0:
00000000000057e0         movzx      ebx, byte [rsp+0xe8+var_D9]                 ; CODE XREF=sub_5050+731
00000000000057e5         mov        rbp, r11
00000000000057e8         mov        byte [rsp+0xe8+var_DB], bl
00000000000057ec         jmp        loc_5499

                     loc_57f1:
00000000000057f1         movzx      edx, byte [rsp+0xe8+var_DB]                 ; CODE XREF=sub_4df0+105
00000000000057f6         xor        r12d, r12d
00000000000057f9         jmp        loc_5300

                     loc_57fe:
00000000000057fe         xor        r10d, r10d                                  ; CODE XREF=sub_5050+944
0000000000005801         jmp        loc_53bd

                     loc_5806:
0000000000005806         mov        qword [rsp+0xe8+var_98], 0x0                ; CODE XREF=sub_5050+1419
000000000000580f         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000005814         xor        r12d, r12d
0000000000005817         mov        byte [rsp+0xe8+var_6C], 0x0
000000000000581c         jmp        loc_55fb

                     loc_5821:
0000000000005821         mov        r11, qword [rsp+0xe8+var_B8]                ; CODE XREF=sub_5050+561
0000000000005826         mov        rsi, r14
0000000000005829         mov        rcx, r13
000000000000582c         mov        rax, rbx
000000000000582f         mov        rdi, rbx
0000000000005832         movzx      r8d, byte [rsp+0xe8+var_6B]
0000000000005838         movzx      ebx, byte [rsp+0xe8+var_6A]
000000000000583d         mov        r9, qword [rsp+0xe8+var_60]
0000000000005845         cmp        rsi, r11
0000000000005848         movzx      r10d, byte [rsp+0xe8+var_69]
000000000000584e         mov        r15, qword [rsp+0xe8+var_68]
0000000000005856         mov        r14, qword [rsp+0xe8+var_A8]
000000000000585b         mov        r13, qword [rsp+0xe8+var_78]
0000000000005860         jae        loc_5888

0000000000005862         cmp        byte [rcx], 0x0
0000000000005865         jne        loc_5877

0000000000005867         jmp        loc_5888
0000000000005869         align      16

                     loc_5870:
0000000000005870         cmp        byte [r9+rax], 0x0                          ; CODE XREF=sub_5050+2099
0000000000005875         je         loc_5885

                     loc_5877:
0000000000005877         add        rax, 0x1                                    ; CODE XREF=sub_5050+2069
000000000000587b         lea        rdx, qword [rbp+rax]
0000000000005880         cmp        r11, rdx
0000000000005883         ja         loc_5870

                     loc_5885:
0000000000005885         mov        rdi, rax                                    ; CODE XREF=sub_5050+2085

                     loc_5888:
0000000000005888         movzx      edx, byte [rsp+0xe8+var_DB]                 ; CODE XREF=sub_5050+2064, sub_5050+2071
000000000000588d         xor        r12d, r12d
0000000000005890         jmp        loc_52f6

                     loc_5895:
0000000000005895         mov        rdi, rbx                                    ; CODE XREF=sub_5050+551
0000000000005898         movzx      r8d, byte [rsp+0xe8+var_6B]
000000000000589e         movzx      ebx, byte [rsp+0xe8+var_6A]
00000000000058a3         movzx      r10d, byte [rsp+0xe8+var_69]
00000000000058a9         mov        r15, qword [rsp+0xe8+var_68]
00000000000058b1         xor        r12d, r12d
00000000000058b4         mov        r14, qword [rsp+0xe8+var_A8]
00000000000058b9         mov        r13, qword [rsp+0xe8+var_78]
00000000000058be         mov        r11, qword [rsp+0xe8+var_B8]
00000000000058c3         movzx      edx, byte [rsp+0xe8+var_DB]
00000000000058c8         jmp        loc_52f6

                     loc_58cd:
00000000000058cd         mov        rdx, qword [rsp+0xe8+var_80]                ; CODE XREF=sub_5050+1718
00000000000058d2         movzx      eax, byte [rdx]
00000000000058d5         test       al, al
00000000000058d7         je         loc_570c

00000000000058dd         nop        dword [rax]

                     loc_58e0:
00000000000058e0         cmp        r13, r15                                    ; CODE XREF=sub_5050+2212
00000000000058e3         jbe        loc_58e9

00000000000058e5         mov        byte [r14+r15], al

                     loc_58e9:
00000000000058e9         add        r15, 0x1                                    ; CODE XREF=sub_5050+2195
00000000000058ed         movzx      eax, byte [rdx+r15]
00000000000058f2         test       al, al
00000000000058f4         jne        loc_58e0

00000000000058f6         jmp        loc_570c

                     loc_58fb:
00000000000058fb         mov        eax, edx                                    ; CODE XREF=sub_5050+682
00000000000058fd         jmp        loc_4e57

                     loc_5902:
0000000000005902         movzx      ebx, byte [rax+rcx]                         ; CODE XREF=sub_5050+290
0000000000005906         cmp        bl, 0x3e
0000000000005909         ja         loc_5180

000000000000590f         movabs     rax, 0x7000a38200000000
0000000000005919         bt         rax, rbx
000000000000591d         jae        loc_5180

0000000000005923         cmp        byte [rsp+arg_7], 0x0
0000000000005928         jne        loc_5b12

000000000000592e         cmp        r13, r15
0000000000005931         jbe        loc_5938

0000000000005933         mov        byte [r14+r15], 0x3f

                     loc_5938:
0000000000005938         lea        rax, qword [r15+1]                          ; CODE XREF=sub_5050+2273
000000000000593c         cmp        r13, rax
000000000000593f         jbe        loc_5947

0000000000005941         mov        byte [r14+r15+1], 0x22

                     loc_5947:
0000000000005947         lea        rax, qword [r15+2]                          ; CODE XREF=sub_5050+2287
000000000000594b         cmp        r13, rax
000000000000594e         jbe        loc_5956

0000000000005950         mov        byte [r14+r15+2], 0x22

                     loc_5956:
0000000000005956         lea        rax, qword [r15+3]                          ; CODE XREF=sub_5050+2302
000000000000595a         cmp        r13, rax
000000000000595d         jbe        loc_5965

000000000000595f         mov        byte [r14+r15+3], 0x3f

                     loc_5965:
0000000000005965         add        r15, 0x4                                    ; CODE XREF=sub_5050+2317
0000000000005969         xor        edx, edx
000000000000596b         xor        r12d, r12d
000000000000596e         xor        eax, eax
0000000000005970         mov        rbp, rcx
0000000000005973         jmp        sub_4b00+56
                        ; endp

                     loc_5978:
0000000000005978         test       ebx, ebx                                    ; case 2, CODE XREF=quotearg_buffer_restyled+145
000000000000597a         je         loc_5b08

0000000000005980         lea        rax, qword [aSyntaxErrorUne+27]             ; 0x1609e
0000000000005987         mov        byte [rsp+0xe8+var_DA], 0x1
000000000000598c         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000005991         xor        r12d, r12d
0000000000005994         mov        qword [rsp+0xe8+var_98], 0x0
000000000000599d         mov        byte [rsp+0xe8+var_D9], 0x1
00000000000059a2         mov        byte [rsp+0xe8+var_DB], 0x0
00000000000059a7         mov        qword [rsp+0xe8+var_D0], 0x1
00000000000059b0         xor        r15d, r15d
00000000000059b3         mov        qword [rsp+0xe8+var_A0], rax
00000000000059b8         jmp        loc_49e3
00000000000059bd         align      64

                     loc_59c0:
00000000000059c0         mov        rbp, r11                                    ; CODE XREF=sub_5050+333
00000000000059c3         movzx      eax, byte [rsp+arg_7]
00000000000059c8         jmp        sub_5050+1097
                        ; endp

                     loc_59cd:
00000000000059cd         lea        rax, qword [aLibs+27]                       ; 0x1624b, CODE XREF=sub_5050+1410
00000000000059d4         mov        byte [rsp+0xe8+var_DA], 0x1
00000000000059d9         mov        byte [rsp+0xe8+var_6C], 0x0
00000000000059de         xor        r12d, r12d
00000000000059e1         mov        qword [rsp+0xe8+var_98], 0x0
00000000000059ea         mov        byte [rsp+0xe8+var_D9], 0x1
00000000000059ef         mov        byte [rsp+0xe8+var_DB], 0x1
00000000000059f4         mov        qword [rsp+0xe8+var_D0], 0x1
00000000000059fd         xor        r15d, r15d
0000000000005a00         mov        qword [rsp+0xe8+var_A0], rax
0000000000005a05         jmp        loc_49e3

                     loc_5a0a:
0000000000005a0a         mov        eax, edx                                    ; CODE XREF=sub_5050+87

                     loc_5a0c:
0000000000005a0c         mov        rbx, qword [rsp+0xe8+var_A0]                ; CODE XREF=sub_5050+76, sub_5050+2721
0000000000005a11         test       rbx, rbx
0000000000005a14         je         loc_5a42

0000000000005a16         test       al, al
0000000000005a18         je         loc_5a42

0000000000005a1a         movzx      ecx, byte [rbx]
0000000000005a1d         mov        rax, rbx
0000000000005a20         test       cl, cl
0000000000005a22         je         loc_5a42

0000000000005a24         mov        rdx, r15
0000000000005a27         sub        rax, r15

                     loc_5a2a:
0000000000005a2a         cmp        r13, rdx                                    ; CODE XREF=sub_5050+2541
0000000000005a2d         jbe        loc_5a33

0000000000005a2f         mov        byte [r14+rdx], cl

                     loc_5a33:
0000000000005a33         add        rdx, 0x1                                    ; CODE XREF=sub_5050+2525
0000000000005a37         movzx      ecx, byte [rax+rdx]
0000000000005a3b         test       cl, cl
0000000000005a3d         jne        loc_5a2a

0000000000005a3f         mov        r15, rdx

                     loc_5a42:
0000000000005a42         cmp        r13, r15                                    ; CODE XREF=sub_5050+2500, sub_5050+2504, sub_5050+2514
0000000000005a45         jbe        loc_54e9

0000000000005a4b         mov        byte [r14+r15], 0x0
0000000000005a50         jmp        loc_54e9

                     loc_5a55:
0000000000005a55         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=quotearg_buffer_restyled+450
0000000000005a5a         movzx      ebx, byte [rsp+0xe8+var_D9]
0000000000005a5f         mov        rbp, r11
0000000000005a62         sete       al
0000000000005a65         mov        byte [rsp+0xe8+var_DB], bl
0000000000005a69         jmp        loc_5499

                     loc_5a6e:
0000000000005a6e         mov        esi, dword [rsp+0xe8+var_E0]                ; CODE XREF=sub_5050+1664
0000000000005a72         mov        rdi, rcx
0000000000005a75         call       gettext_quote.part.1                        ; gettext_quote.part.1
0000000000005a7a         mov        qword [rsp+0xe8+var_80], rax
0000000000005a7f         jmp        loc_56d6

                     loc_5a84:
0000000000005a84         mov        esi, dword [rsp+0xe8+var_E0]                ; CODE XREF=sub_5050+1707
0000000000005a88         mov        rdi, rcx
0000000000005a8b         call       gettext_quote.part.1                        ; gettext_quote.part.1
0000000000005a90         mov        qword [rsp+0xe8+var_88], rax
0000000000005a95         jmp        loc_5701

                     loc_5a9a:
0000000000005a9a         movzx      ebx, byte [rsp+arg_7]                       ; CODE XREF=sub_4ef0+16
0000000000005a9f         mov        rbp, r11
0000000000005aa2         mov        eax, edx
0000000000005aa4         mov        byte [rsp+arg_5], bl
0000000000005aa8         jmp        sub_5050+1097
                        ; endp

                     loc_5aad:
0000000000005aad         sub        rsp, 0x8                                    ; CODE XREF=sub_5050+98
0000000000005ab1         mov        r8d, 0x5
0000000000005ab7         mov        rcx, r11
0000000000005aba         push       qword [rsp+0xf0+var_88]
0000000000005abe         push       qword [rsp+0xf8+var_80]
0000000000005ac2         mov        rdi, r14
0000000000005ac5         push       qword [rsp+0x100+var_C8]
0000000000005ac9         mov        r9d, dword [rsp+0x108+var_70]
0000000000005ad1         mov        rdx, qword [rsp+0x108+var_D8]
0000000000005ad6         mov        rsi, qword [rsp+0x108+var_98]
0000000000005adb         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000005ae0         add        rsp, 0x20
0000000000005ae4         mov        r15, rax
0000000000005ae7         jmp        loc_54e9

                     loc_5aec:
0000000000005aec         movzx      eax, byte [rsp+0xe8+var_6C]                 ; CODE XREF=sub_5050+121
0000000000005af1         jmp        loc_5a0c

                     loc_5af6:
0000000000005af6         mov        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_5050+63
0000000000005afe         jmp        loc_5499

                     loc_5b03:
0000000000005b03         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=sub_5050+1197
                        ; endp

                     loc_5b08:
0000000000005b08         mov        byte [rsp+0xe8+var_DB], 0x0                 ; CODE XREF=sub_5050+2346
0000000000005b0d         jmp        loc_5581

                     loc_5b12:
0000000000005b12         mov        rbp, r11                                    ; CODE XREF=sub_5050+2264
0000000000005b15         jmp        sub_5050+1120
                        ; endp

                     loc_5b1a:
0000000000005b1a         mov        byte [rsp+0xe8+var_DA], 0x1                 ; CODE XREF=sub_5050+1332
0000000000005b1f         xor        eax, eax
0000000000005b21         xor        r12d, r12d
0000000000005b24         mov        qword [rsp+0xe8+var_98], 0x0
0000000000005b2d         jmp        loc_50d4

                     loc_5b32:
0000000000005b32         mov        rdx, r13                                    ; CODE XREF=sub_5050+1264
0000000000005b35         mov        r13, qword [rsp+arg_48]
0000000000005b3a         jmp        loc_5132

                     loc_5b3f:
0000000000005b3f         call       j_abort                                     ; abort, CODE XREF=quotearg_buffer_restyled+122
                        ; endp
0000000000005b44         align      16                                          ; End of unwind block (FDE at 0x17f58)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_3C: int32_t, -60
        ;    var_40: int32_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80


                     quotearg_n_options:
0000000000005b50         push       r15                                         ; Begin of unwind block (FDE at 0x17fd0), CODE XREF=quotearg_n+14, quotearg_n_mem+7, quotearg+19, quotearg_mem+15, quotearg_n_style+106, quotearg_n_style_mem+102, quotearg_char_mem+121, quotearg_n_style_colon+106, quotearg_n_custom_mem+109, quote_n_mem+7, quote_mem+15
0000000000005b52         push       r14
0000000000005b54         movsxd     r15, edi
0000000000005b57         push       r13
0000000000005b59         push       r12
0000000000005b5b         mov        r14, rdx
0000000000005b5e         push       rbp
0000000000005b5f         push       rbx
0000000000005b60         mov        rbp, rcx
0000000000005b63         sub        rsp, 0x28
0000000000005b67         mov        qword [rsp+0x58+var_50], rsi
0000000000005b6c         call       j___errno_location                          ; __errno_location
0000000000005b71         mov        r13, rax
0000000000005b74         mov        eax, dword [rax]
0000000000005b76         test       r15d, r15d
0000000000005b79         mov        rbx, qword [slotvec]                        ; slotvec
0000000000005b80         mov        dword [rsp+0x58+var_40], eax
0000000000005b84         js         loc_5cf1

0000000000005b8a         cmp        dword [nslots], r15d                        ; nslots
0000000000005b91         jg         loc_5bf5

0000000000005b93         cmp        r15d, 0x7fffffff
0000000000005b9a         je         loc_5cf6

0000000000005ba0         lea        r12d, dword [r15+1]
0000000000005ba4         lea        rax, qword [slotvec0]                       ; slotvec0
0000000000005bab         movsxd     rsi, r12d
0000000000005bae         shl        rsi, 0x4
0000000000005bb2         cmp        rbx, rax
0000000000005bb5         je         loc_5cd0

0000000000005bbb         mov        rdi, rbx                                    ; argument #1 for method xrealloc
0000000000005bbe         call       xrealloc                                    ; xrealloc
0000000000005bc3         mov        rbx, rax
0000000000005bc6         mov        qword [slotvec], rax                        ; slotvec

                     loc_5bcd:
0000000000005bcd         movsxd     rdi, dword [nslots]                         ; nslots, CODE XREF=quotearg_n_options+412
0000000000005bd4         mov        edx, r12d
0000000000005bd7         xor        esi, esi                                    ; argument "__c" for method j_memset
0000000000005bd9         sub        edx, edi
0000000000005bdb         shl        rdi, 0x4
0000000000005bdf         movsxd     rdx, edx
0000000000005be2         add        rdi, rbx                                    ; argument "__s" for method j_memset
0000000000005be5         shl        rdx, 0x4                                    ; argument "__n" for method j_memset
0000000000005be9         call       j_memset                                    ; memset
0000000000005bee         mov        dword [nslots], r12d                        ; nslots

                     loc_5bf5:
0000000000005bf5         mov        eax, dword [rbp+4]                          ; CODE XREF=quotearg_n_options+65
0000000000005bf8         shl        r15, 0x4
0000000000005bfc         sub        rsp, 0x8
0000000000005c00         add        rbx, r15
0000000000005c03         lea        r15, qword [rbp+8]
0000000000005c07         mov        r8d, dword [rbp]                            ; argument #5 for method quotearg_buffer_restyled
0000000000005c0b         mov        r11, qword [rbx]
0000000000005c0e         mov        r12, qword [rbx+8]
0000000000005c12         mov        rcx, r14                                    ; argument #4 for method quotearg_buffer_restyled
0000000000005c15         or         eax, 0x1
0000000000005c18         mov        dword [rsp+0x60+var_3C], eax
0000000000005c1c         push       qword [rbp+0x30]                            ; argument #9 for method quotearg_buffer_restyled
0000000000005c1f         mov        r9d, eax                                    ; argument #6 for method quotearg_buffer_restyled
0000000000005c22         push       qword [rbp+0x28]                            ; argument #8 for method quotearg_buffer_restyled
0000000000005c25         push       r15                                         ; argument #7 for method quotearg_buffer_restyled
0000000000005c27         mov        rsi, r11                                    ; argument #2 for method quotearg_buffer_restyled
0000000000005c2a         mov        rdx, qword [rsp+0x78+var_50]                ; argument #3 for method quotearg_buffer_restyled
0000000000005c2f         mov        rdi, r12                                    ; argument #1 for method quotearg_buffer_restyled
0000000000005c32         mov        qword [rsp+0x78+var_48], r11
0000000000005c37         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000005c3c         add        rsp, 0x20
0000000000005c40         mov        r11, qword [rsp+0x58+var_48]
0000000000005c45         cmp        r11, rax
0000000000005c48         ja         loc_5cb1

0000000000005c4a         lea        rsi, qword [rax+1]
0000000000005c4e         lea        rax, qword [slot0]                          ; slot0
0000000000005c55         cmp        r12, rax
0000000000005c58         mov        qword [rbx], rsi
0000000000005c5b         je         loc_5c6f

0000000000005c5d         mov        rdi, r12                                    ; argument "__ptr" for method j_free
0000000000005c60         mov        qword [rsp+0x58+var_48], rsi
0000000000005c65         call       j_free                                      ; free
0000000000005c6a         mov        rsi, qword [rsp+0x58+var_48]

                     loc_5c6f:
0000000000005c6f         mov        rdi, rsi                                    ; argument #1 for method xmalloc, CODE XREF=quotearg_n_options+267
0000000000005c72         mov        qword [rsp+0x58+var_48], rsi
0000000000005c77         call       xmalloc                                     ; xmalloc
0000000000005c7c         sub        rsp, 0x8
0000000000005c80         mov        qword [rbx+8], rax
0000000000005c84         mov        r8d, dword [rbp]                            ; argument #5 for method quotearg_buffer_restyled
0000000000005c88         push       qword [rbp+0x30]                            ; argument #9 for method quotearg_buffer_restyled
0000000000005c8b         push       qword [rbp+0x28]                            ; argument #8 for method quotearg_buffer_restyled
0000000000005c8e         mov        rcx, r14                                    ; argument #4 for method quotearg_buffer_restyled
0000000000005c91         push       r15                                         ; argument #7 for method quotearg_buffer_restyled
0000000000005c93         mov        r9d, dword [rsp+0x78+var_3C]                ; argument #6 for method quotearg_buffer_restyled
0000000000005c98         mov        rdi, rax                                    ; argument #1 for method quotearg_buffer_restyled
0000000000005c9b         mov        rdx, qword [rsp+0x78+var_50]                ; argument #3 for method quotearg_buffer_restyled
0000000000005ca0         mov        rsi, qword [rsp+0x78+var_48]                ; argument #2 for method quotearg_buffer_restyled
0000000000005ca5         mov        r12, rax
0000000000005ca8         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000005cad         add        rsp, 0x20

                     loc_5cb1:
0000000000005cb1         mov        eax, dword [rsp+0x58+var_40]                ; CODE XREF=quotearg_n_options+248
0000000000005cb5         mov        dword [r13], eax
0000000000005cb9         add        rsp, 0x28
0000000000005cbd         mov        rax, r12
0000000000005cc0         pop        rbx
0000000000005cc1         pop        rbp
0000000000005cc2         pop        r12
0000000000005cc4         pop        r13
0000000000005cc6         pop        r14
0000000000005cc8         pop        r15
0000000000005cca         ret
                        ; endp
0000000000005ccb         align      16

                     loc_5cd0:
0000000000005cd0         xor        edi, edi                                    ; argument #1 for method xrealloc, CODE XREF=quotearg_n_options+101
0000000000005cd2         call       xrealloc                                    ; xrealloc
0000000000005cd7         movdqa     xmm0, xmmword [slotvec0]                    ; slotvec0
0000000000005cdf         mov        rbx, rax
0000000000005ce2         mov        qword [slotvec], rax                        ; slotvec
0000000000005ce9         movups     xmmword [rax], xmm0
0000000000005cec         jmp        loc_5bcd

                     loc_5cf1:
0000000000005cf1         call       j_abort                                     ; abort, CODE XREF=quotearg_n_options+52
                        ; endp

                     loc_5cf6:
0000000000005cf6         call       xalloc_die                                  ; xalloc_die, CODE XREF=quotearg_n_options+74
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_5cfb:
0000000000005cfb         nop        dword [rax+rax]                             ; End of unwind block (FDE at 0x17fd0)
                     clone_quoting_options:
0000000000005d00         push       r12                                         ; Begin of unwind block (FDE at 0x1803c)
0000000000005d02         push       rbp
0000000000005d03         push       rbx
0000000000005d04         mov        rbx, rdi
0000000000005d07         call       j___errno_location                          ; __errno_location
0000000000005d0c         mov        r12d, dword [rax]
0000000000005d0f         mov        rbp, rax
0000000000005d12         lea        rax, qword [default_quoting_options]        ; default_quoting_options
0000000000005d19         test       rbx, rbx
0000000000005d1c         mov        esi, 0x38                                   ; argument #2 for method xmemdup
0000000000005d21         cmove      rbx, rax
0000000000005d25         mov        rdi, rbx                                    ; argument #1 for method xmemdup
0000000000005d28         call       xmemdup                                     ; xmemdup
0000000000005d2d         mov        dword [rbp], r12d
0000000000005d31         pop        rbx
0000000000005d32         pop        rbp
0000000000005d33         pop        r12
0000000000005d35         ret
                        ; endp
0000000000005d36         align      64                                          ; End of unwind block (FDE at 0x1803c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     get_quoting_style:
0000000000005d40         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x18068), default_quoting_options
0000000000005d47         test       rdi, rdi
0000000000005d4a         cmove      rdi, rax
0000000000005d4e         mov        eax, dword [rdi]
0000000000005d50         ret
                        ; endp
0000000000005d51         align      32                                          ; End of unwind block (FDE at 0x18068)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_quoting_style:
0000000000005d60         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x1807c), default_quoting_options
0000000000005d67         test       rdi, rdi
0000000000005d6a         cmove      rdi, rax
0000000000005d6e         mov        dword [rdi], esi
0000000000005d70         ret
                        ; endp
0000000000005d71         align      128                                         ; End of unwind block (FDE at 0x1807c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_char_quoting:
0000000000005d80         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x18090), default_quoting_options
0000000000005d87         test       rdi, rdi
0000000000005d8a         mov        ecx, esi
0000000000005d8c         cmove      rdi, rax
0000000000005d90         mov        eax, esi
0000000000005d92         and        ecx, 0x1f
0000000000005d95         shr        al, 0x5
0000000000005d98         movzx      eax, al
0000000000005d9b         lea        rdi, qword [rdi+rax*4+8]
0000000000005da0         mov        esi, dword [rdi]
0000000000005da2         mov        eax, esi
0000000000005da4         shr        eax, cl
0000000000005da6         xor        edx, eax
0000000000005da8         and        eax, 0x1
0000000000005dab         and        edx, 0x1
0000000000005dae         shl        edx, cl
0000000000005db0         xor        edx, esi
0000000000005db2         mov        dword [rdi], edx
0000000000005db4         ret
                        ; endp
0000000000005db5         align      64                                          ; End of unwind block (FDE at 0x18090)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_quoting_flags:
0000000000005dc0         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x180a4), default_quoting_options
0000000000005dc7         test       rdi, rdi
0000000000005dca         cmove      rdi, rax
0000000000005dce         mov        eax, dword [rdi+4]
0000000000005dd1         mov        dword [rdi+4], esi
0000000000005dd4         ret
                        ; endp
0000000000005dd5         align      32                                          ; End of unwind block (FDE at 0x180a4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_custom_quoting:
0000000000005de0         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x180b8), default_quoting_options
0000000000005de7         test       rdi, rdi
0000000000005dea         cmove      rdi, rax
0000000000005dee         test       rsi, rsi
0000000000005df1         mov        dword [rdi], 0xa
0000000000005df7         je         loc_5e07

0000000000005df9         test       rdx, rdx
0000000000005dfc         je         loc_5e07

0000000000005dfe         mov        qword [rdi+0x28], rsi
0000000000005e02         mov        qword [rdi+0x30], rdx
0000000000005e06         ret
                        ; endp

                     loc_5e07:
0000000000005e07         sub        rsp, 0x8                                    ; CODE XREF=set_custom_quoting+23, set_custom_quoting+28
0000000000005e0b         call       j_abort                                     ; abort
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64


                     quotearg_buffer:
0000000000005e10         push       r15                                         ; End of unwind block (FDE at 0x180b8), Begin of unwind block (FDE at 0x180cc)
0000000000005e12         push       r14
0000000000005e14         lea        rax, qword [default_quoting_options]        ; default_quoting_options
0000000000005e1b         push       r13
0000000000005e1d         push       r12
0000000000005e1f         mov        r13, rdi
0000000000005e22         push       rbp
0000000000005e23         push       rbx
0000000000005e24         mov        rbx, r8
0000000000005e27         mov        r14, rsi
0000000000005e2a         mov        r15, rdx
0000000000005e2d         sub        rsp, 0x18
0000000000005e31         test       r8, r8
0000000000005e34         cmove      rbx, rax
0000000000005e38         mov        qword [rsp+0x48+var_40], rcx
0000000000005e3d         call       j___errno_location                          ; __errno_location
0000000000005e42         mov        r12d, dword [rax]
0000000000005e45         mov        rbp, rax
0000000000005e48         lea        rax, qword [rbx+8]
0000000000005e4c         sub        rsp, 0x8
0000000000005e50         mov        r9d, dword [rbx+4]
0000000000005e54         push       qword [rbx+0x30]
0000000000005e57         mov        r8d, dword [rbx]
0000000000005e5a         push       qword [rbx+0x28]
0000000000005e5d         mov        rdx, r15
0000000000005e60         push       rax
0000000000005e61         mov        rcx, qword [rsp+0x68+var_40]
0000000000005e66         mov        rsi, r14
0000000000005e69         mov        rdi, r13
0000000000005e6c         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000005e71         mov        dword [rbp], r12d
0000000000005e75         add        rsp, 0x38
0000000000005e79         pop        rbx
0000000000005e7a         pop        rbp
0000000000005e7b         pop        r12
0000000000005e7d         pop        r13
0000000000005e7f         pop        r14
0000000000005e81         pop        r15
0000000000005e83         ret
                        ; endp
0000000000005e84         align      16                                          ; End of unwind block (FDE at 0x180cc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_5C: int32_t, -92


                     quotearg_alloc_mem:
0000000000005e90         push       r15                                         ; Begin of unwind block (FDE at 0x18120), CODE XREF=quotearg_alloc+5
0000000000005e92         push       r14
0000000000005e94         lea        rax, qword [default_quoting_options]        ; default_quoting_options
0000000000005e9b         push       r13
0000000000005e9d         push       r12
0000000000005e9f         mov        r12, rdx
0000000000005ea2         push       rbp
0000000000005ea3         push       rbx
0000000000005ea4         mov        rbx, rcx
0000000000005ea7         mov        r14, rdi
0000000000005eaa         mov        r15, rsi
0000000000005ead         sub        rsp, 0x38
0000000000005eb1         test       rcx, rcx
0000000000005eb4         cmove      rbx, rax
0000000000005eb8         xor        ebp, ebp
0000000000005eba         call       j___errno_location                          ; __errno_location
0000000000005ebf         test       r12, r12
0000000000005ec2         mov        r13, rax
0000000000005ec5         mov        eax, dword [rax]
0000000000005ec7         sete       bpl
0000000000005ecb         or         ebp, dword [rbx+4]
0000000000005ece         lea        r10, qword [rbx+8]
0000000000005ed2         sub        rsp, 0x8
0000000000005ed6         mov        r8d, dword [rbx]
0000000000005ed9         mov        rcx, r15
0000000000005edc         mov        dword [rsp+0x70+var_5C], eax
0000000000005ee0         push       qword [rbx+0x30]
0000000000005ee3         mov        rdx, r14
0000000000005ee6         push       qword [rbx+0x28]
0000000000005ee9         push       r10
0000000000005eeb         xor        esi, esi
0000000000005eed         mov        r9d, ebp
0000000000005ef0         xor        edi, edi
0000000000005ef2         mov        qword [rsp+0x88+var_48], r10
0000000000005ef7         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000005efc         lea        rsi, qword [rax+1]
0000000000005f00         mov        qword [rsp+0x88+var_40], rax
0000000000005f05         add        rsp, 0x20
0000000000005f09         mov        rdi, rsi
0000000000005f0c         mov        qword [rsp+0x68+var_50], rsi
0000000000005f11         call       xmalloc                                     ; xmalloc
0000000000005f16         mov        qword [rsp+0x68+var_58], rax
0000000000005f1b         sub        rsp, 0x8
0000000000005f1f         push       qword [rbx+0x30]
0000000000005f22         push       qword [rbx+0x28]
0000000000005f25         mov        r10, qword [rsp+0x80+var_48]
0000000000005f2a         mov        r9d, ebp
0000000000005f2d         mov        r8d, dword [rbx]
0000000000005f30         mov        rcx, r15
0000000000005f33         mov        rdx, r14
0000000000005f36         mov        rdi, rax
0000000000005f39         push       r10
0000000000005f3b         mov        rsi, qword [rsp+0x88+var_50]
0000000000005f40         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000005f45         mov        eax, dword [rsp+0x88+var_5C]
0000000000005f49         add        rsp, 0x20
0000000000005f4d         test       r12, r12
0000000000005f50         mov        dword [r13], eax
0000000000005f54         je         loc_5f5f

0000000000005f56         mov        r11, qword [rsp+0x68+var_40]
0000000000005f5b         mov        qword [r12], r11

                     loc_5f5f:
0000000000005f5f         mov        rax, qword [rsp+0x68+var_58]                ; CODE XREF=quotearg_alloc_mem+196
0000000000005f64         add        rsp, 0x38
0000000000005f68         pop        rbx
0000000000005f69         pop        rbp
0000000000005f6a         pop        r12
0000000000005f6c         pop        r13
0000000000005f6e         pop        r14
0000000000005f70         pop        r15
0000000000005f72         ret
                        ; endp
0000000000005f73         align      128                                         ; End of unwind block (FDE at 0x18120)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_alloc:
0000000000005f80         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0x1818c)
0000000000005f83         xor        edx, edx
0000000000005f85         jmp        quotearg_alloc_mem                          ; quotearg_alloc_mem
                        ; endp
0000000000005f8a         align      16                                          ; End of unwind block (FDE at 0x1818c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_free:
0000000000005f90         mov        eax, dword [nslots]                         ; Begin of unwind block (FDE at 0x181a0), nslots
0000000000005f96         push       r12
0000000000005f98         mov        r12, qword [slotvec]                        ; slotvec
0000000000005f9f         push       rbp
0000000000005fa0         push       rbx
0000000000005fa1         cmp        eax, 0x1
0000000000005fa4         jle        loc_5fd1

0000000000005fa6         sub        eax, 0x2
0000000000005fa9         lea        rbx, qword [r12+0x18]
0000000000005fae         shl        rax, 0x4
0000000000005fb2         lea        rbp, qword [r12+rax+0x28]
0000000000005fb7         nop        word [rax+rax]

                     loc_5fc0:
0000000000005fc0         mov        rdi, qword [rbx]                            ; argument "__ptr" for method j_free, CODE XREF=quotearg_free+63
0000000000005fc3         add        rbx, 0x10
0000000000005fc7         call       j_free                                      ; free
0000000000005fcc         cmp        rbx, rbp
0000000000005fcf         jne        loc_5fc0

                     loc_5fd1:
0000000000005fd1         mov        rdi, qword [r12+8]                          ; CODE XREF=quotearg_free+20
0000000000005fd6         lea        rbx, qword [slot0]                          ; slot0
0000000000005fdd         cmp        rdi, rbx
0000000000005fe0         je         loc_5ff9

0000000000005fe2         call       j_free                                      ; free
0000000000005fe7         mov        qword [slotvec0], 0x100                     ; slotvec0
0000000000005ff2         mov        qword [slotvec0+8], rbx                     ; 0x21b078

                     loc_5ff9:
0000000000005ff9         lea        rbx, qword [slotvec0]                       ; slotvec0, CODE XREF=quotearg_free+80
0000000000006000         cmp        r12, rbx
0000000000006003         je         loc_6014

0000000000006005         mov        rdi, r12                                    ; argument "__ptr" for method j_free
0000000000006008         call       j_free                                      ; free
000000000000600d         mov        qword [slotvec], rbx                        ; slotvec

                     loc_6014:
0000000000006014         pop        rbx                                         ; CODE XREF=quotearg_free+115
0000000000006015         mov        dword [nslots], 0x1                         ; nslots
000000000000601f         pop        rbp
0000000000006020         pop        r12
0000000000006022         ret
                        ; endp
0000000000006023         align      16                                          ; End of unwind block (FDE at 0x181a0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_n:
0000000000006030         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x181cc), default_quoting_options
0000000000006037         mov        rdx, 0xffffffffffffffff
000000000000603e         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000006043         align      16                                          ; End of unwind block (FDE at 0x181cc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_n_mem:
0000000000006050         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x181e0), default_quoting_options
0000000000006057         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
000000000000605c         align      32                                          ; End of unwind block (FDE at 0x181e0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg:
0000000000006060         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x181f4), default_quoting_options
0000000000006067         mov        rsi, rdi
000000000000606a         mov        rdx, 0xffffffffffffffff
0000000000006071         xor        edi, edi
0000000000006073         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000006078         align      128                                         ; End of unwind block (FDE at 0x181f4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_mem:
0000000000006080         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x18208), default_quoting_options
0000000000006087         mov        rdx, rsi
000000000000608a         mov        rsi, rdi
000000000000608d         xor        edi, edi
000000000000608f         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000006094         align      32                                          ; End of unwind block (FDE at 0x18208)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_n_style:
00000000000060a0         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0x1821c), CODE XREF=main+353, require_more_args+27, eval6+231, eval6+2931
00000000000060a4         mov        rax, rdx
00000000000060a7         mov        rdx, qword [fs:0x28]
00000000000060b0         mov        qword [rsp+0x48+var_10], rdx
00000000000060b5         xor        edx, edx
00000000000060b7         cmp        esi, 0xa
00000000000060ba         je         loc_6124

00000000000060bc         mov        dword [rsp+0x48+var_48], esi
00000000000060bf         mov        rcx, rsp
00000000000060c2         mov        rdx, 0xffffffffffffffff
00000000000060c9         mov        rsi, rax
00000000000060cc         mov        qword [rsp+0x48+var_44], 0x0
00000000000060d5         mov        qword [rsp+0x48+var_3C], 0x0
00000000000060de         mov        qword [rsp+0x48+var_34], 0x0
00000000000060e7         mov        qword [rsp+0x48+var_2C], 0x0
00000000000060f0         mov        qword [rsp+0x48+var_24], 0x0
00000000000060f9         mov        qword [rsp+0x48+var_1C], 0x0
0000000000006102         mov        dword [rsp+0x48+var_14], 0x0
000000000000610a         call       quotearg_n_options                          ; quotearg_n_options
000000000000610f         mov        rcx, qword [rsp+0x48+var_10]
0000000000006114         xor        rcx, qword [fs:0x28]
000000000000611d         jne        loc_6129

000000000000611f         add        rsp, 0x48
0000000000006123         ret
                        ; endp

                     loc_6124:
0000000000006124         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style+26
                        ; endp

                     loc_6129:
0000000000006129         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style+125
                        ; endp
000000000000612e         align      16                                          ; End of unwind block (FDE at 0x1821c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_n_style_mem:
0000000000006130         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0x18238), CODE XREF=quotearg_style_mem+10
0000000000006134         mov        rax, rdx
0000000000006137         mov        rdx, rcx
000000000000613a         mov        rcx, qword [fs:0x28]
0000000000006143         mov        qword [rsp+0x48+var_10], rcx
0000000000006148         xor        ecx, ecx
000000000000614a         cmp        esi, 0xa
000000000000614d         je         loc_61b0

000000000000614f         mov        dword [rsp+0x48+var_48], esi
0000000000006152         mov        rcx, rsp
0000000000006155         mov        rsi, rax
0000000000006158         mov        qword [rsp+0x48+var_44], 0x0
0000000000006161         mov        qword [rsp+0x48+var_3C], 0x0
000000000000616a         mov        qword [rsp+0x48+var_34], 0x0
0000000000006173         mov        qword [rsp+0x48+var_2C], 0x0
000000000000617c         mov        qword [rsp+0x48+var_24], 0x0
0000000000006185         mov        qword [rsp+0x48+var_1C], 0x0
000000000000618e         mov        dword [rsp+0x48+var_14], 0x0
0000000000006196         call       quotearg_n_options                          ; quotearg_n_options
000000000000619b         mov        rdx, qword [rsp+0x48+var_10]
00000000000061a0         xor        rdx, qword [fs:0x28]
00000000000061a9         jne        loc_61b5

00000000000061ab         add        rsp, 0x48
00000000000061af         ret
                        ; endp

                     loc_61b0:
00000000000061b0         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style_mem+29
                        ; endp

                     loc_61b5:
00000000000061b5         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style_mem+121
                        ; endp
00000000000061ba         align      64                                          ; End of unwind block (FDE at 0x18238)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_style:
00000000000061c0         mov        rdx, rsi                                    ; Begin of unwind block (FDE at 0x18254)
00000000000061c3         mov        esi, edi
00000000000061c5         xor        edi, edi
00000000000061c7         jmp        quotearg_n_style                            ; quotearg_n_style
                        ; endp
00000000000061cc         align      16                                          ; End of unwind block (FDE at 0x18254)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_style_mem:
00000000000061d0         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0x18268)
00000000000061d3         mov        rdx, rsi
00000000000061d6         mov        esi, edi
00000000000061d8         xor        edi, edi
00000000000061da         jmp        quotearg_n_style_mem                        ; quotearg_n_style_mem
                        ; endp
00000000000061df         align      32                                          ; End of unwind block (FDE at 0x18268)

                     quotearg_char_mem:
00000000000061e0         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0x1827c), CODE XREF=quotearg_char+11
00000000000061e4         mov        ecx, edx
00000000000061e6         mov        rax, qword [fs:0x28]
00000000000061ef         mov        qword [rsp+0x48+var_10], rax
00000000000061f4         xor        eax, eax
00000000000061f6         mov        rax, qword [qword_21b230]                   ; qword_21b230
00000000000061fd         mov        r8, rsp
0000000000006200         and        ecx, 0x1f
0000000000006203         movdqa     xmm0, xmmword [default_quoting_options]     ; default_quoting_options
000000000000620b         mov        qword [rsp+0x48+var_18], rax
0000000000006210         mov        eax, edx
0000000000006212         movaps     xmmword [rsp+0x48+var_48], xmm0
0000000000006216         shr        al, 0x5
0000000000006219         movzx      eax, al
000000000000621c         lea        r9, qword [r8+rax*4+8]
0000000000006221         movdqa     xmm0, xmmword [default_quoting_options+16]  ; 0x21b210
0000000000006229         movaps     xmmword [rsp+0x48+var_38], xmm0
000000000000622e         movdqa     xmm0, xmmword [default_quoting_options+32]  ; 0x21b220
0000000000006236         movaps     xmmword [rsp+0x48+var_28], xmm0
000000000000623b         mov        edx, dword [r9]
000000000000623e         mov        eax, edx
0000000000006240         shr        eax, cl
0000000000006242         not        eax
0000000000006244         and        eax, 0x1
0000000000006247         shl        eax, cl
0000000000006249         mov        rcx, r8
000000000000624c         xor        eax, edx
000000000000624e         mov        rdx, rsi
0000000000006251         mov        rsi, rdi
0000000000006254         mov        dword [r9], eax
0000000000006257         xor        edi, edi
0000000000006259         call       quotearg_n_options                          ; quotearg_n_options
000000000000625e         mov        rsi, qword [rsp+0x48+var_10]
0000000000006263         xor        rsi, qword [fs:0x28]
000000000000626c         jne        loc_6273

000000000000626e         add        rsp, 0x48
0000000000006272         ret
                        ; endp

                     loc_6273:
0000000000006273         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_char_mem+140
                        ; endp
0000000000006278         align      128                                         ; End of unwind block (FDE at 0x1827c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24
        ;    var_28: -40
        ;    var_38: -56
        ;    var_48: -72


                     quotearg_char:
0000000000006280         movsx      edx, sil                                    ; Begin of unwind block (FDE at 0x18298)
0000000000006284         mov        rsi, 0xffffffffffffffff
000000000000628b         jmp        quotearg_char_mem                           ; quotearg_char_mem


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_colon:
0000000000006290         mov        edx, 0x3a                                   ; End of unwind block (FDE at 0x18298), Begin of unwind block (FDE at 0x182ac), CODE XREF=close_stdout+101
0000000000006295         mov        rsi, 0xffffffffffffffff
000000000000629c         jmp        quotearg_char_mem                           ; quotearg_char_mem
                        ; endp
00000000000062a1         align      16                                          ; End of unwind block (FDE at 0x182ac)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_colon_mem:
00000000000062b0         mov        edx, 0x3a                                   ; Begin of unwind block (FDE at 0x182c0)
00000000000062b5         jmp        quotearg_char_mem                           ; quotearg_char_mem
                        ; endp
00000000000062ba         align      64                                          ; End of unwind block (FDE at 0x182c0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_n_style_colon:
00000000000062c0         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0x182d4)
00000000000062c4         mov        rax, rdx
00000000000062c7         mov        rdx, qword [fs:0x28]
00000000000062d0         mov        qword [rsp+0x48+var_10], rdx
00000000000062d5         xor        edx, edx
00000000000062d7         cmp        esi, 0xa
00000000000062da         je         loc_6344

00000000000062dc         mov        dword [rsp+0x48+var_48], esi
00000000000062df         mov        rcx, rsp
00000000000062e2         mov        rdx, 0xffffffffffffffff
00000000000062e9         mov        rsi, rax
00000000000062ec         mov        qword [rsp+0x48+var_44], 0x0
00000000000062f5         mov        qword [rsp+0x48+var_3C], 0x4000000
00000000000062fe         mov        qword [rsp+0x48+var_34], 0x0
0000000000006307         mov        qword [rsp+0x48+var_2C], 0x0
0000000000006310         mov        qword [rsp+0x48+var_24], 0x0
0000000000006319         mov        qword [rsp+0x48+var_1C], 0x0
0000000000006322         mov        dword [rsp+0x48+var_14], 0x0
000000000000632a         call       quotearg_n_options                          ; quotearg_n_options
000000000000632f         mov        rcx, qword [rsp+0x48+var_10]
0000000000006334         xor        rcx, qword [fs:0x28]
000000000000633d         jne        loc_6349

000000000000633f         add        rsp, 0x48
0000000000006343         ret
                        ; endp

                     loc_6344:
0000000000006344         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style_colon+26
                        ; endp

                     loc_6349:
0000000000006349         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style_colon+125
                        ; endp
000000000000634e         align      16                                          ; End of unwind block (FDE at 0x182d4)

                     quotearg_n_custom_mem:
0000000000006350         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0x182f0), CODE XREF=quotearg_n_custom+7, quotearg_custom+18, quotearg_custom_mem+14
0000000000006354         mov        r9, rcx
0000000000006357         mov        rcx, qword [qword_21b230]                   ; qword_21b230
000000000000635e         movdqa     xmm0, xmmword [default_quoting_options]     ; default_quoting_options
0000000000006366         mov        rax, qword [fs:0x28]
000000000000636f         mov        qword [rsp+0x48+var_10], rax
0000000000006374         xor        eax, eax
0000000000006376         movaps     xmmword [rsp+0x48+var_48], xmm0
000000000000637a         test       rsi, rsi
000000000000637d         mov        qword [rsp+0x48+var_18], rcx
0000000000006382         mov        dword [rsp+0x48+var_48], 0xa
0000000000006389         movdqa     xmm0, xmmword [default_quoting_options+16]  ; 0x21b210
0000000000006391         movaps     xmmword [rsp+0x48+var_38], xmm0
0000000000006396         movdqa     xmm0, xmmword [default_quoting_options+32]  ; 0x21b220
000000000000639e         movaps     xmmword [rsp+0x48+var_28], xmm0
00000000000063a3         je         loc_63d7

00000000000063a5         test       rdx, rdx
00000000000063a8         je         loc_63d7

00000000000063aa         mov        qword [rsp+0x48+var_20], rsi
00000000000063af         mov        qword [rsp+0x48+var_18], rdx
00000000000063b4         mov        rcx, rsp
00000000000063b7         mov        rdx, r8
00000000000063ba         mov        rsi, r9
00000000000063bd         call       quotearg_n_options                          ; quotearg_n_options
00000000000063c2         mov        rdi, qword [rsp+0x48+var_10]
00000000000063c7         xor        rdi, qword [fs:0x28]
00000000000063d0         jne        loc_63dc

00000000000063d2         add        rsp, 0x48
00000000000063d6         ret
                        ; endp

                     loc_63d7:
00000000000063d7         call       j_abort                                     ; abort, CODE XREF=quotearg_n_custom_mem+83, quotearg_n_custom_mem+88
                        ; endp

                     loc_63dc:
00000000000063dc         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_custom_mem+128
                        ; endp
00000000000063e1         align      16                                          ; End of unwind block (FDE at 0x182f0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24
        ;    var_20: int64_t, -32
        ;    var_28: -40
        ;    var_38: -56
        ;    var_48: int32_t, -72


                     quotearg_n_custom:
00000000000063f0         mov        r8, 0xffffffffffffffff                      ; Begin of unwind block (FDE at 0x1830c)
00000000000063f7         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
00000000000063fc         align      1024                                        ; End of unwind block (FDE at 0x1830c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_custom:
0000000000006400         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0x18320)
0000000000006403         mov        r8, 0xffffffffffffffff
000000000000640a         mov        rdx, rsi
000000000000640d         mov        rsi, rdi
0000000000006410         xor        edi, edi
0000000000006412         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
                        ; endp
0000000000006417         align      32                                          ; End of unwind block (FDE at 0x18320)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_custom_mem:
0000000000006420         mov        r8, rcx                                     ; Begin of unwind block (FDE at 0x18334)
0000000000006423         mov        rcx, rdx
0000000000006426         mov        rdx, rsi
0000000000006429         mov        rsi, rdi
000000000000642c         xor        edi, edi
000000000000642e         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
                        ; endp
0000000000006433         align      64                                          ; End of unwind block (FDE at 0x18334)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_n_mem:
0000000000006440         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0x18348), quote_quoting_options
0000000000006447         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
000000000000644c         align      16                                          ; End of unwind block (FDE at 0x18348)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_mem:
0000000000006450         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0x1835c), quote_quoting_options
0000000000006457         mov        rdx, rsi
000000000000645a         mov        rsi, rdi
000000000000645d         xor        edi, edi
000000000000645f         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000006464         align      16                                          ; End of unwind block (FDE at 0x1835c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_n:
0000000000006470         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0x18370), quote_quoting_options
0000000000006477         mov        rdx, 0xffffffffffffffff
000000000000647e         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000006483         align      16                                          ; End of unwind block (FDE at 0x18370)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote:
0000000000006490         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0x18384), quote_quoting_options
0000000000006497         mov        rsi, rdi
000000000000649a         mov        rdx, 0xffffffffffffffff
00000000000064a1         xor        edi, edi
00000000000064a3         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
00000000000064a8         align      16                                          ; End of unwind block (FDE at 0x18384)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     strnlen1:
00000000000064b0         push       rbp                                         ; Begin of unwind block (FDE at 0x1839c), CODE XREF=docolon+726, eval6+1249, eval6+1616, eval6+2371, mbschr+260, mbslen+252
00000000000064b1         push       rbx
00000000000064b2         mov        rdx, rsi                                    ; argument "__n" for method j_memchr
00000000000064b5         mov        rbx, rsi
00000000000064b8         xor        esi, esi                                    ; argument "__c" for method j_memchr
00000000000064ba         mov        rbp, rdi
00000000000064bd         sub        rsp, 0x8
00000000000064c1         call       j_memchr                                    ; memchr
00000000000064c6         mov        rdx, rax
00000000000064c9         sub        rdx, rbp
00000000000064cc         add        rdx, 0x1
00000000000064d0         test       rax, rax
00000000000064d3         mov        rax, rbx
00000000000064d6         cmovne     rax, rdx
00000000000064da         add        rsp, 0x8
00000000000064de         pop        rbx
00000000000064df         pop        rbp
00000000000064e0         ret
                        ; endp
00000000000064e1         align      16                                          ; End of unwind block (FDE at 0x1839c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     strintcmp:
00000000000064f0         movzx      r8d, byte [rdi]                             ; Begin of unwind block (FDE at 0x183c4), CODE XREF=eval2+464
00000000000064f4         movzx      edx, byte [rsi]
00000000000064f7         cmp        r8b, 0x2d
00000000000064fb         je         loc_65a0

0000000000006501         cmp        dl, 0x2d
0000000000006504         je         loc_65e8

000000000000650a         nop        word [rax+rax]

                     loc_6510:
0000000000006510         cmp        r8b, 0x30                                   ; CODE XREF=strintcmp+448
0000000000006514         je         loc_66a8

                     loc_651a:
000000000000651a         cmp        dl, 0x30                                    ; CODE XREF=strintcmp+431
000000000000651d         je         loc_6698

0000000000006523         movzx      eax, dl
0000000000006526         cmp        dl, r8b
0000000000006529         lea        ecx, dword [rax-0x30]
000000000000652c         jne        loc_66c8

0000000000006532         cmp        ecx, 0x9
0000000000006535         ja         loc_6760

                     loc_653b:
000000000000653b         add        rdi, 0x1                                    ; CODE XREF=strintcmp+107
000000000000653f         add        rsi, 0x1
0000000000006543         movzx      eax, byte [rsi]
0000000000006546         movzx      r8d, byte [rdi]
000000000000654a         mov        edx, eax
000000000000654c         lea        ecx, dword [rax-0x30]
000000000000654f         cmp        r8b, al
0000000000006552         jne        loc_66c8

0000000000006558         cmp        ecx, 0x9
000000000000655b         jbe        loc_653b

000000000000655d         movzx      edx, r8b

                     loc_6561:
0000000000006561         xor        r9d, r9d                                    ; CODE XREF=strintcmp+482
0000000000006564         cmp        ecx, 0x9
0000000000006567         ja         loc_6760

000000000000656d         nop        dword [rax]

                     loc_6570:
0000000000006570         xor        ecx, ecx                                    ; CODE XREF=strintcmp+517
0000000000006572         nop        word [rax+rax]

                     loc_6578:
0000000000006578         movzx      eax, byte [rsi+rcx+1]                       ; CODE XREF=strintcmp+151
000000000000657d         add        rcx, 0x1
0000000000006581         sub        eax, 0x30
0000000000006584         cmp        eax, 0x9
0000000000006587         jbe        loc_6578

0000000000006589         cmp        r9, rcx
000000000000658c         je         loc_6763

0000000000006592         sbb        eax, eax
0000000000006594         or         eax, 0x1
0000000000006597         ret
                        ; endp
0000000000006598         align      32

                     loc_65a0:
00000000000065a0         add        rdi, 0x1                                    ; CODE XREF=strintcmp+11, strintcmp+186
00000000000065a4         movzx      ecx, byte [rdi]
00000000000065a7         cmp        cl, 0x30
00000000000065aa         je         loc_65a0

00000000000065ac         movzx      eax, cl
00000000000065af         cmp        dl, 0x2d
00000000000065b2         lea        r8d, dword [rax-0x30]
00000000000065b6         je         loc_6620

00000000000065b8         cmp        r8d, 0x9
00000000000065bc         jbe        loc_678e

00000000000065c2         nop        word [rax+rax]

                     loc_65c8:
00000000000065c8         cmp        dl, 0x30                                    ; CODE XREF=strintcmp+463
00000000000065cb         je         loc_66b8

00000000000065d1         sub        edx, 0x30
00000000000065d4         xor        r9d, r9d
00000000000065d7         cmp        edx, 0x9
00000000000065da         setbe      r9b
00000000000065de         mov        eax, r9d
00000000000065e1         neg        eax
00000000000065e3         ret
                        ; endp
00000000000065e4         align      8

                     loc_65e8:
00000000000065e8         add        rsi, 0x1                                    ; CODE XREF=strintcmp+20, strintcmp+257
00000000000065ec         movzx      eax, byte [rsi]
00000000000065ef         cmp        al, 0x30
00000000000065f1         je         loc_65e8

00000000000065f3         lea        edx, dword [rax-0x30]
00000000000065f6         mov        eax, 0x1
00000000000065fb         cmp        edx, 0x9
00000000000065fe         jbe        loc_6703

                     loc_6604:
0000000000006604         cmp        r8b, 0x30                                   ; CODE XREF=strintcmp+544
0000000000006608         je         loc_6708

000000000000660e         sub        r8d, 0x30
0000000000006612         xor        eax, eax
0000000000006614         cmp        r8d, 0x9
0000000000006618         setbe      al
000000000000661b         ret
                        ; endp
000000000000661c         align      32

                     loc_6620:
0000000000006620         add        rsi, 0x1                                    ; CODE XREF=strintcmp+198, strintcmp+316
0000000000006624         movzx      r9d, byte [rsi]
0000000000006628         cmp        r9b, 0x30
000000000000662c         je         loc_6620

000000000000662e         cmp        cl, r9b
0000000000006631         jne        loc_6774

0000000000006637         cmp        r8d, 0x9
000000000000663b         lea        edx, dword [rax-0x30]
000000000000663e         ja         loc_6661

                     loc_6640:
0000000000006640         add        rdi, 0x1                                    ; CODE XREF=strintcmp+367
0000000000006644         add        rsi, 0x1
0000000000006648         movzx      eax, byte [rsi]
000000000000664b         movzx      ecx, byte [rdi]
000000000000664e         mov        r9d, eax
0000000000006651         lea        edx, dword [rax-0x30]
0000000000006654         cmp        cl, al
0000000000006656         jne        loc_6718

000000000000665c         cmp        edx, 0x9
000000000000665f         jbe        loc_6640

                     loc_6661:
0000000000006661         xor        r10d, r10d                                  ; CODE XREF=strintcmp+334, strintcmp+564
0000000000006664         cmp        edx, 0x9
0000000000006667         ja         loc_6760

                     loc_666d:
000000000000666d         xor        edx, edx                                    ; CODE XREF=strintcmp+597
000000000000666f         nop

                     loc_6670:
0000000000006670         movzx      eax, byte [rsi+rdx+1]                       ; CODE XREF=strintcmp+399
0000000000006675         add        rdx, 0x1
0000000000006679         sub        eax, 0x30
000000000000667c         cmp        eax, 0x9
000000000000667f         jbe        loc_6670

0000000000006681         cmp        r10, rdx
0000000000006684         je         loc_677d

000000000000668a         sbb        eax, eax
000000000000668c         and        eax, 0x2
000000000000668f         sub        eax, 0x1
0000000000006692         ret
                        ; endp
0000000000006693         align      8

                     loc_6698:
0000000000006698         add        rsi, 0x1                                    ; CODE XREF=strintcmp+45
000000000000669c         movzx      edx, byte [rsi]
000000000000669f         jmp        loc_651a
00000000000066a4         align      8

                     loc_66a8:
00000000000066a8         add        rdi, 0x1                                    ; CODE XREF=strintcmp+36
00000000000066ac         movzx      r8d, byte [rdi]
00000000000066b0         jmp        loc_6510
00000000000066b5         align      8

                     loc_66b8:
00000000000066b8         add        rsi, 0x1                                    ; CODE XREF=strintcmp+219
00000000000066bc         movzx      edx, byte [rsi]
00000000000066bf         jmp        loc_65c8
00000000000066c4         align      8

                     loc_66c8:
00000000000066c8         movzx      eax, r8b                                    ; CODE XREF=strintcmp+60, strintcmp+98
00000000000066cc         sub        eax, 0x30
00000000000066cf         cmp        eax, 0x9
00000000000066d2         ja         loc_6561

00000000000066d8         xor        r9d, r9d
00000000000066db         nop        dword [rax+rax]

                     loc_66e0:
00000000000066e0         movzx      eax, byte [rdi+r9+1]                        ; CODE XREF=strintcmp+512
00000000000066e6         add        r9, 0x1
00000000000066ea         sub        eax, 0x30
00000000000066ed         cmp        eax, 0x9
00000000000066f0         jbe        loc_66e0

00000000000066f2         cmp        ecx, 0x9
00000000000066f5         jbe        loc_6570

00000000000066fb         xor        eax, eax
00000000000066fd         test       r9, r9
0000000000006700         setne      al

                     loc_6703:
0000000000006703         ret                                                    ; CODE XREF=strintcmp+270, strintcmp+632, strintcmp+658
                        ; endp
0000000000006705         align      8

                     loc_6708:
0000000000006708         add        rdi, 0x1                                    ; CODE XREF=strintcmp+280
000000000000670c         movzx      r8d, byte [rdi]
0000000000006710         jmp        loc_6604
0000000000006715         align      8

                     loc_6718:
0000000000006718         movzx      r8d, cl                                     ; CODE XREF=strintcmp+358
000000000000671c         sub        r8d, 0x30

                     loc_6720:
0000000000006720         cmp        r8d, 0x9                                    ; CODE XREF=strintcmp+651
0000000000006724         ja         loc_6661

000000000000672a         xor        r10d, r10d
000000000000672d         nop        dword [rax]

                     loc_6730:
0000000000006730         movzx      eax, byte [rdi+r10+1]                       ; CODE XREF=strintcmp+592
0000000000006736         add        r10, 0x1
000000000000673a         sub        eax, 0x30
000000000000673d         cmp        eax, 0x9
0000000000006740         jbe        loc_6730

0000000000006742         cmp        edx, 0x9
0000000000006745         jbe        loc_666d

000000000000674b         xor        eax, eax
000000000000674d         test       r10, r10
0000000000006750         setne      al
0000000000006753         neg        eax
0000000000006755         ret
                        ; endp
0000000000006756         align      32

                     loc_6760:
0000000000006760         xor        eax, eax                                    ; CODE XREF=strintcmp+69, strintcmp+119, strintcmp+375
0000000000006762         ret
                        ; endp

                     loc_6763:
0000000000006763         xor        eax, eax                                    ; CODE XREF=strintcmp+156
0000000000006765         test       r9, r9
0000000000006768         je         loc_6703

000000000000676a         movzx      r9d, r8b
000000000000676e         mov        eax, r9d
0000000000006771         sub        eax, edx
0000000000006773         ret
                        ; endp

                     loc_6774:
0000000000006774         movzx      eax, r9b                                    ; CODE XREF=strintcmp+321
0000000000006778         lea        edx, dword [rax-0x30]
000000000000677b         jmp        loc_6720

                     loc_677d:
000000000000677d         xor        eax, eax                                    ; CODE XREF=strintcmp+404
000000000000677f         test       r10, r10
0000000000006782         je         loc_6703

0000000000006788         mov        eax, r9d
000000000000678b         sub        eax, ecx
000000000000678d         ret
                        ; endp

                     loc_678e:
000000000000678e         mov        eax, 0xffffffff                             ; CODE XREF=strintcmp+204
0000000000006793         ret
                        ; endp
0000000000006794         align      32                                          ; End of unwind block (FDE at 0x183c4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88


                     version_etc_arn:
00000000000067a0         push       r15                                         ; Begin of unwind block (FDE at 0x183dc), CODE XREF=j_version_etc_arn, version_etc_va+75, version_etc+161
00000000000067a2         push       r14
00000000000067a4         push       r13
00000000000067a6         push       r12
00000000000067a8         mov        r12, r9
00000000000067ab         push       rbp
00000000000067ac         push       rbx
00000000000067ad         mov        rbp, rdi
00000000000067b0         mov        rbx, r8
00000000000067b3         sub        rsp, 0x28
00000000000067b7         test       rsi, rsi
00000000000067ba         je         loc_68d8

00000000000067c0         mov        r8, rdx
00000000000067c3         lea        rdx, qword [aSSSn]                          ; "%s (%s) %s\\n"
00000000000067ca         mov        r9, rcx
00000000000067cd         xor        eax, eax
00000000000067cf         mov        rcx, rsi
00000000000067d2         mov        esi, 0x1
00000000000067d7         call       j___fprintf_chk                             ; __fprintf_chk

                     loc_67dc:
00000000000067dc         lea        rsi, qword [aSSn+7]                         ; argument "msgid" for method j_dcgettext, 0x1671b, CODE XREF=version_etc_arn+337
00000000000067e3         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000067e5         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000067ea         call       j_dcgettext                                 ; dcgettext
00000000000067ef         lea        rdx, qword [version_etc_copyright]          ; "Copyright %s %d Free Software Foundation, Inc."
00000000000067f6         mov        rcx, rax
00000000000067f9         mov        r8d, 0x7e3
00000000000067ff         mov        esi, 0x1
0000000000006804         mov        rdi, rbp
0000000000006807         xor        eax, eax
0000000000006809         call       j___fprintf_chk                             ; __fprintf_chk
000000000000680e         lea        rsi, qword [aNlicenseGplv3G]                ; argument "msgid" for method j_dcgettext, "\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n"
0000000000006815         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000006817         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000681c         call       j_dcgettext                                 ; dcgettext
0000000000006821         mov        rsi, rbp                                    ; argument "__stream" for method j_fputs_unlocked
0000000000006824         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000006827         call       j_fputs_unlocked                            ; fputs_unlocked
000000000000682c         cmp        r12, 0x9
0000000000006830         ja         loc_6b70

0000000000006836         lea        rdx, qword [switch_table_16a04]             ; switch_table_16a04
000000000000683d         movsxd     rax, dword [rdx+r12*4]
0000000000006841         add        rax, rdx
0000000000006844         jmp        rax                                         ; switch statement using table at 0x16a04, with 10 cases, 0x6850,0x68c6,0x6900,0x6958,0x6998,0x69e0,0x6a30,0x6a88,0x6ab8,0x6b20
0000000000006846         align      16

                     loc_6850:
0000000000006850         mov        r9, qword [rbx+0x38]                        ; case 8, CODE XREF=version_etc_arn+164
0000000000006854         mov        rax, qword [rbx+0x10]
0000000000006858         lea        rsi, qword [aWrittenBySSSns_16918]          ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n"
000000000000685f         mov        r8, qword [rbx+8]
0000000000006863         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000006868         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000686a         mov        r13, qword [rbx+0x30]
000000000000686e         mov        r12, qword [rbx+0x28]
0000000000006872         mov        qword [rsp+0x58+var_48], r9
0000000000006877         mov        r15, qword [rbx+0x20]
000000000000687b         mov        r14, qword [rbx+0x18]
000000000000687f         mov        qword [rsp+0x58+var_58], rax
0000000000006883         mov        qword [rsp+0x58+var_50], r8
0000000000006888         mov        rbx, qword [rbx]
000000000000688b         call       j_dcgettext                                 ; dcgettext
0000000000006890         sub        rsp, 0x8

                     loc_6894:
0000000000006894         mov        r9, qword [rsp+0x60+var_48]                 ; CODE XREF=version_etc_arn+432
0000000000006899         mov        rdx, rax
000000000000689c         mov        rcx, rbx
000000000000689f         mov        esi, 0x1
00000000000068a4         mov        rdi, rbp
00000000000068a7         xor        eax, eax
00000000000068a9         push       r9
00000000000068ab         push       r13
00000000000068ad         push       r12
00000000000068af         push       r15
00000000000068b1         push       r14
00000000000068b3         mov        r9, qword [rsp+0x88+var_58]
00000000000068b8         mov        r8, qword [rsp+0x88+var_50]
00000000000068bd         call       j___fprintf_chk                             ; __fprintf_chk
00000000000068c2         add        rsp, 0x30

                     loc_68c6:
00000000000068c6         add        rsp, 0x28                                   ; case 0, CODE XREF=version_etc_arn+164
00000000000068ca         pop        rbx
00000000000068cb         pop        rbp
00000000000068cc         pop        r12
00000000000068ce         pop        r13
00000000000068d0         pop        r14
00000000000068d2         pop        r15
00000000000068d4         ret
                        ; endp
00000000000068d5         align      8

                     loc_68d8:
00000000000068d8         mov        r8, rcx                                     ; CODE XREF=version_etc_arn+26
00000000000068db         mov        rcx, rdx
00000000000068de         lea        rdx, qword [aSSn]                           ; "%s %s\\n"
00000000000068e5         mov        esi, 0x1
00000000000068ea         xor        eax, eax
00000000000068ec         call       j___fprintf_chk                             ; __fprintf_chk
00000000000068f1         jmp        loc_67dc
00000000000068f6         align      256

                     loc_6900:
0000000000006900         mov        r10, qword [rbx+0x40]                       ; case 9, CODE XREF=version_etc_arn+164
0000000000006904         mov        r9, qword [rbx+0x38]
0000000000006908         lea        rsi, qword [aWrittenBySSSns]                ; "Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n"
000000000000690f         mov        rax, qword [rbx+0x10]
0000000000006913         mov        r8, qword [rbx+8]
0000000000006917         mov        edx, 0x5
000000000000691c         mov        r13, qword [rbx+0x30]
0000000000006920         mov        r12, qword [rbx+0x28]
0000000000006924         mov        r15, qword [rbx+0x20]
0000000000006928         mov        r14, qword [rbx+0x18]
000000000000692c         mov        rbx, qword [rbx]
000000000000692f         mov        qword [rsp+0x58+var_40], r10
0000000000006934         mov        qword [rsp+0x58+var_48], r9
0000000000006939         mov        qword [rsp+0x58+var_58], rax
000000000000693d         mov        qword [rsp+0x58+var_50], r8

                     loc_6942:
0000000000006942         xor        edi, edi                                    ; argument "domain" for method j_dcgettext, CODE XREF=version_etc_arn+1042
0000000000006944         call       j_dcgettext                                 ; dcgettext
0000000000006949         mov        r10, qword [rsp+0x58+var_40]
000000000000694e         push       r10
0000000000006950         jmp        loc_6894
0000000000006955         align      8

                     loc_6958:
0000000000006958         mov        rbx, qword [rbx]                            ; case 1, CODE XREF=version_etc_arn+164
000000000000695b         lea        rsi, qword [aWrittenBySn]                   ; argument "msgid" for method j_dcgettext, "Written by %s.\\n"
0000000000006962         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000006967         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000006969         call       j_dcgettext                                 ; dcgettext
000000000000696e         add        rsp, 0x28
0000000000006972         mov        rcx, rbx
0000000000006975         mov        rdi, rbp
0000000000006978         pop        rbx
0000000000006979         pop        rbp
000000000000697a         pop        r12
000000000000697c         pop        r13
000000000000697e         pop        r14
0000000000006980         pop        r15
0000000000006982         mov        rdx, rax
0000000000006985         mov        esi, 0x1
000000000000698a         xor        eax, eax
000000000000698c         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
0000000000006991         align      8

                     loc_6998:
0000000000006998         mov        r12, qword [rbx+8]                          ; case 2, CODE XREF=version_etc_arn+164
000000000000699c         lea        rsi, qword [aWrittenBySAndS]                ; argument "msgid" for method j_dcgettext, "Written by %s and %s.\\n"
00000000000069a3         mov        rbx, qword [rbx]
00000000000069a6         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000069ab         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000069ad         call       j_dcgettext                                 ; dcgettext
00000000000069b2         add        rsp, 0x28
00000000000069b6         mov        r8, r12
00000000000069b9         mov        rcx, rbx
00000000000069bc         mov        rdi, rbp
00000000000069bf         mov        rdx, rax
00000000000069c2         mov        esi, 0x1
00000000000069c7         pop        rbx
00000000000069c8         pop        rbp
00000000000069c9         pop        r12
00000000000069cb         pop        r13
00000000000069cd         pop        r14
00000000000069cf         pop        r15
00000000000069d1         xor        eax, eax
00000000000069d3         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
00000000000069d8         align      32

                     loc_69e0:
00000000000069e0         mov        r13, qword [rbx+0x10]                       ; case 3, CODE XREF=version_etc_arn+164
00000000000069e4         mov        r12, qword [rbx+8]
00000000000069e8         lea        rsi, qword [aWrittenBySSAnd]                ; argument "msgid" for method j_dcgettext, "Written by %s, %s, and %s.\\n"
00000000000069ef         mov        rbx, qword [rbx]
00000000000069f2         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000069f7         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000069f9         call       j_dcgettext                                 ; dcgettext
00000000000069fe         add        rsp, 0x28
0000000000006a02         mov        r9, r13
0000000000006a05         mov        r8, r12
0000000000006a08         mov        rcx, rbx
0000000000006a0b         mov        rdi, rbp
0000000000006a0e         mov        rdx, rax
0000000000006a11         pop        rbx
0000000000006a12         pop        rbp
0000000000006a13         pop        r12
0000000000006a15         pop        r13
0000000000006a17         pop        r14
0000000000006a19         pop        r15
0000000000006a1b         mov        esi, 0x1
0000000000006a20         xor        eax, eax
0000000000006a22         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
0000000000006a27         align      16

                     loc_6a30:
0000000000006a30         lea        rsi, qword [aWrittenBySSSna]                ; case 4, argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\nand %s.\\n", CODE XREF=version_etc_arn+164
0000000000006a37         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000006a3c         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000006a3e         mov        r14, qword [rbx+0x18]
0000000000006a42         mov        r13, qword [rbx+0x10]
0000000000006a46         mov        r12, qword [rbx+8]
0000000000006a4a         mov        rbx, qword [rbx]
0000000000006a4d         call       j_dcgettext                                 ; dcgettext
0000000000006a52         sub        rsp, 0x8

                     loc_6a56:
0000000000006a56         push       r14                                         ; CODE XREF=version_etc_arn+784
0000000000006a58         mov        rdx, rax
0000000000006a5b         mov        r9, r13
0000000000006a5e         mov        r8, r12
0000000000006a61         mov        rcx, rbx
0000000000006a64         mov        rdi, rbp
0000000000006a67         mov        esi, 0x1
0000000000006a6c         xor        eax, eax
0000000000006a6e         call       j___fprintf_chk                             ; __fprintf_chk
0000000000006a73         pop        rax
0000000000006a74         pop        rdx
0000000000006a75         add        rsp, 0x28
0000000000006a79         pop        rbx
0000000000006a7a         pop        rbp
0000000000006a7b         pop        r12
0000000000006a7d         pop        r13
0000000000006a7f         pop        r14
0000000000006a81         pop        r15
0000000000006a83         ret
                        ; endp
0000000000006a84         align      8

                     loc_6a88:
0000000000006a88         mov        r15, qword [rbx+0x20]                       ; case 5, CODE XREF=version_etc_arn+164
0000000000006a8c         lea        rsi, qword [aWrittenBySSSns_16898]          ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, and %s.\\n"
0000000000006a93         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000006a98         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000006a9a         mov        r14, qword [rbx+0x18]
0000000000006a9e         mov        r13, qword [rbx+0x10]
0000000000006aa2         mov        r12, qword [rbx+8]
0000000000006aa6         mov        rbx, qword [rbx]
0000000000006aa9         call       j_dcgettext                                 ; dcgettext
0000000000006aae         push       r15
0000000000006ab0         jmp        loc_6a56
0000000000006ab2         align      8

                     loc_6ab8:
0000000000006ab8         mov        r8, qword [rbx+8]                           ; case 6, CODE XREF=version_etc_arn+164
0000000000006abc         mov        r12, qword [rbx+0x28]
0000000000006ac0         lea        rsi, qword [aWrittenBySSSns_168c0]          ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, %s, and %s.\\n"
0000000000006ac7         mov        r15, qword [rbx+0x20]
0000000000006acb         mov        r14, qword [rbx+0x18]
0000000000006acf         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000006ad4         mov        r13, qword [rbx+0x10]
0000000000006ad8         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000006ada         mov        rbx, qword [rbx]
0000000000006add         mov        qword [rsp+0x58+var_58], r8
0000000000006ae1         call       j_dcgettext                                 ; dcgettext
0000000000006ae6         sub        rsp, 0x8
0000000000006aea         mov        r9, r13
0000000000006aed         push       r12
0000000000006aef         push       r15
0000000000006af1         push       r14

                     loc_6af3:
0000000000006af3         mov        r8, qword [rsp+0x78+var_58]                 ; CODE XREF=version_etc_arn+964
0000000000006af8         mov        rcx, rbx
0000000000006afb         mov        rdx, rax
0000000000006afe         mov        rdi, rbp
0000000000006b01         mov        esi, 0x1
0000000000006b06         xor        eax, eax
0000000000006b08         call       j___fprintf_chk                             ; __fprintf_chk
0000000000006b0d         add        rsp, 0x20
0000000000006b11         add        rsp, 0x28
0000000000006b15         pop        rbx
0000000000006b16         pop        rbp
0000000000006b17         pop        r12
0000000000006b19         pop        r13
0000000000006b1b         pop        r14
0000000000006b1d         pop        r15
0000000000006b1f         ret
                        ; endp

                     loc_6b20:
0000000000006b20         mov        r9, qword [rbx+0x10]                        ; case 7, CODE XREF=version_etc_arn+164
0000000000006b24         mov        r13, qword [rbx+0x30]
0000000000006b28         lea        rsi, qword [aWrittenBySSSns_168e8]          ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n"
0000000000006b2f         mov        r12, qword [rbx+0x28]
0000000000006b33         mov        r15, qword [rbx+0x20]
0000000000006b37         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000006b3c         mov        r14, qword [rbx+0x18]
0000000000006b40         mov        r8, qword [rbx+8]
0000000000006b44         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000006b46         mov        qword [rsp+0x58+var_50], r9
0000000000006b4b         mov        rbx, qword [rbx]
0000000000006b4e         mov        qword [rsp+0x58+var_58], r8
0000000000006b52         call       j_dcgettext                                 ; dcgettext
0000000000006b57         push       r13
0000000000006b59         push       r12
0000000000006b5b         push       r15
0000000000006b5d         push       r14
0000000000006b5f         mov        r9, qword [rsp+0x78+var_50]
0000000000006b64         jmp        loc_6af3
0000000000006b66         align      16

                     loc_6b70:
0000000000006b70         mov        r10, qword [rbx+0x40]                       ; CODE XREF=version_etc_arn+144
0000000000006b74         mov        r9, qword [rbx+0x38]
0000000000006b78         mov        edx, 0x5
0000000000006b7d         mov        rax, qword [rbx+0x10]
0000000000006b81         mov        r8, qword [rbx+8]
0000000000006b85         lea        rsi, qword [aWrittenBySSSns_16980]          ; "Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n"
0000000000006b8c         mov        r13, qword [rbx+0x30]
0000000000006b90         mov        r12, qword [rbx+0x28]
0000000000006b94         mov        r15, qword [rbx+0x20]
0000000000006b98         mov        r14, qword [rbx+0x18]
0000000000006b9c         mov        qword [rsp+0x58+var_40], r10
0000000000006ba1         mov        qword [rsp+0x58+var_48], r9
0000000000006ba6         mov        qword [rsp+0x58+var_58], rax
0000000000006baa         mov        qword [rsp+0x58+var_50], r8
0000000000006baf         mov        rbx, qword [rbx]
0000000000006bb2         jmp        loc_6942
0000000000006bb7         align      64                                          ; End of unwind block (FDE at 0x183dc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     version_etc_ar:
0000000000006bc0         xor        r9d, r9d                                    ; Begin of unwind block (FDE at 0x184f0)
0000000000006bc3         cmp        qword [r8], 0x0
0000000000006bc7         je         j_version_etc_arn                           ; version_etc_arn

0000000000006bc9         nop        dword [rax]

                     loc_6bd0:
0000000000006bd0         add        r9, 0x1                                     ; CODE XREF=version_etc_ar+25
0000000000006bd4         cmp        qword [r8+r9*8], 0x0
0000000000006bd9         jne        loc_6bd0

                     j_version_etc_arn:        // version_etc_arn
0000000000006bdb         jmp        version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc_ar+7
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16


                     version_etc_va:
0000000000006be0         sub        rsp, 0x68                                   ; End of unwind block (FDE at 0x184f0), Begin of unwind block (FDE at 0x18504), CODE XREF=parse_long_options+283, parse_gnu_standard_options_only+235
0000000000006be4         mov        r10, r8
0000000000006be7         xor        r9d, r9d
0000000000006bea         mov        rax, qword [fs:0x28]
0000000000006bf3         mov        qword [rsp+0x68+var_10], rax
0000000000006bf8         xor        eax, eax
0000000000006bfa         mov        r8, rsp
0000000000006bfd         nop        dword [rax]

                     loc_6c00:
0000000000006c00         mov        eax, dword [r10]                            ; CODE XREF=version_etc_va+73
0000000000006c03         cmp        eax, 0x2f
0000000000006c06         ja         loc_6c4a

0000000000006c08         mov        r11d, eax
0000000000006c0b         add        r11, qword [r10+0x10]
0000000000006c0f         add        eax, 0x8
0000000000006c12         mov        dword [r10], eax

                     loc_6c15:
0000000000006c15         mov        rax, qword [r11]                            ; CODE XREF=version_etc_va+118
0000000000006c18         test       rax, rax
0000000000006c1b         mov        qword [r8+r9*8], rax
0000000000006c1f         je         loc_6c2b

0000000000006c21         add        r9, 0x1
0000000000006c25         cmp        r9, 0xa
0000000000006c29         jne        loc_6c00

                     loc_6c2b:
0000000000006c2b         call       version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc_va+63
0000000000006c30         mov        rax, qword [rsp+0x68+var_10]
0000000000006c35         xor        rax, qword [fs:0x28]
0000000000006c3e         jne        loc_6c45

0000000000006c40         add        rsp, 0x68
0000000000006c44         ret
                        ; endp

                     loc_6c45:
0000000000006c45         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=version_etc_va+94
                        ; endp

                     loc_6c4a:
0000000000006c4a         mov        r11, qword [r10+8]                          ; CODE XREF=version_etc_va+38
0000000000006c4e         lea        rax, qword [r11+8]
0000000000006c52         mov        qword [r10+8], rax
0000000000006c56         jmp        loc_6c15
0000000000006c58         align      32                                          ; End of unwind block (FDE at 0x18504)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40
        ;    var_48: int8_t, -72
        ;    var_50: int64_t, -80
        ;    var_A8: int8_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int32_t, -192


                     version_etc:
0000000000006c60         push       rbp                                         ; Begin of unwind block (FDE at 0x18520)
0000000000006c61         push       rbx
0000000000006c62         mov        r10d, 0x20
0000000000006c68         xor        r11d, r11d
0000000000006c6b         sub        rsp, 0xb8
0000000000006c72         mov        rax, qword [fs:0x28]
0000000000006c7b         mov        qword [rsp+0xc8+var_50], rax
0000000000006c80         xor        eax, eax
0000000000006c82         lea        rax, qword [rsp+0xc8+arg_0]
0000000000006c8a         mov        qword [rsp+0xc8+var_28], r8
0000000000006c92         lea        rbx, qword [rsp+0xc8+arg_0]
0000000000006c9a         lea        r8, qword [rsp+0xc8+var_A8]
0000000000006c9f         mov        qword [rsp+0xc8+var_20], r9
0000000000006ca7         mov        dword [rsp+0xc8+var_C0], 0x20
0000000000006caf         mov        qword [rsp+0xc8+var_B8], rax
0000000000006cb4         lea        rax, qword [rsp+0xc8+var_48]
0000000000006cbc         xor        r9d, r9d
0000000000006cbf         mov        qword [rsp+0xc8+var_B0], rax
0000000000006cc4         mov        rbp, rax
0000000000006cc7         nop        word [rax+rax]

                     loc_6cd0:
0000000000006cd0         cmp        r10d, 0x2f                                  ; CODE XREF=version_etc+154
0000000000006cd4         ja         loc_6d2c

0000000000006cd6         mov        eax, r10d
0000000000006cd9         mov        r11d, 0x1
0000000000006cdf         add        r10d, 0x8
0000000000006ce3         add        rax, rbp

                     loc_6ce6:
0000000000006ce6         mov        rax, qword [rax]                            ; CODE XREF=version_etc+211
0000000000006ce9         test       rax, rax
0000000000006cec         mov        qword [r8+r9*8], rax
0000000000006cf0         je         loc_6cfc

0000000000006cf2         add        r9, 0x1
0000000000006cf6         cmp        r9, 0xa
0000000000006cfa         jne        loc_6cd0

                     loc_6cfc:
0000000000006cfc         test       r11b, r11b                                  ; CODE XREF=version_etc+144
0000000000006cff         jne        loc_6d25

                     loc_6d01:
0000000000006d01         call       version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc+202
0000000000006d06         mov        rax, qword [rsp+0xc8+var_50]
0000000000006d0b         xor        rax, qword [fs:0x28]
0000000000006d14         jne        loc_6d20

0000000000006d16         add        rsp, 0xb8
0000000000006d1d         pop        rbx
0000000000006d1e         pop        rbp
0000000000006d1f         ret
                        ; endp

                     loc_6d20:
0000000000006d20         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=version_etc+180
                        ; endp

                     loc_6d25:
0000000000006d25         mov        dword [rsp+0xc8+var_C0], r10d               ; CODE XREF=version_etc+159
0000000000006d2a         jmp        loc_6d01

                     loc_6d2c:
0000000000006d2c         mov        rax, rbx                                    ; CODE XREF=version_etc+116
0000000000006d2f         add        rbx, 0x8
0000000000006d33         jmp        loc_6ce6
0000000000006d35         align      64                                          ; End of unwind block (FDE at 0x18520)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     emit_bug_reporting_address:
0000000000006d40         push       rbx                                         ; Begin of unwind block (FDE at 0x1854c)
0000000000006d41         lea        rsi, qword [aNreportBugsToS]                ; argument "msgid" for method j_dcgettext, "\\nReport bugs to: %s\\n"
0000000000006d48         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000006d4d         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000006d4f         call       j_dcgettext                                 ; dcgettext
0000000000006d54         lea        rdx, qword [aBugcoreutilsgn]                ; "bug-coreutils@gnu.org"
0000000000006d5b         mov        rsi, rax
0000000000006d5e         mov        edi, 0x1
0000000000006d63         xor        eax, eax
0000000000006d65         call       j___printf_chk                              ; __printf_chk
0000000000006d6a         lea        rsi, qword [aSHomePageSn]                   ; argument "msgid" for method j_dcgettext, "%s home page: <%s>\\n"
0000000000006d71         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000006d76         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000006d78         call       j_dcgettext                                 ; dcgettext
0000000000006d7d         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000006d84         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0x1600a
0000000000006d8b         mov        rsi, rax
0000000000006d8e         mov        edi, 0x1
0000000000006d93         xor        eax, eax
0000000000006d95         call       j___printf_chk                              ; __printf_chk
0000000000006d9a         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000006da1         lea        rsi, qword [aGeneralHelpUsi]                ; argument "msgid" for method j_dcgettext, "General help using GNU software: <https://www.gnu.org/gethelp/>\\n"
0000000000006da8         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000006daa         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000006daf         call       j_dcgettext                                 ; dcgettext
0000000000006db4         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000006db7         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000006dba         pop        rbx
0000000000006dbb         jmp        j_fputs_unlocked                            ; fputs_unlocked
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xmalloc:
0000000000006dc0         push       rbx                                         ; End of unwind block (FDE at 0x1854c), Begin of unwind block (FDE at 0x1856c), CODE XREF=str_value+14, docolon+387, docolon+469, eval6+404, eval6+888, eval6+2053, eval6+2568, eval2+106, eval1+109, eval+114, quotearg_n_options+295
0000000000006dc1         mov        rbx, rdi
0000000000006dc4         call       j_malloc                                    ; malloc
0000000000006dc9         test       rax, rax
0000000000006dcc         jne        loc_6dd3

0000000000006dce         test       rbx, rbx
0000000000006dd1         jne        loc_6dd5

                     loc_6dd3:
0000000000006dd3         pop        rbx                                         ; CODE XREF=xmalloc+12
0000000000006dd4         ret
                        ; endp

                     loc_6dd5:
0000000000006dd5         call       xalloc_die                                  ; xalloc_die, CODE XREF=xmalloc+17
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_6dda:
0000000000006dda         nop        word [rax+rax]                              ; End of unwind block (FDE at 0x1856c)
                     xnmalloc:
0000000000006de0         mov        rax, rdi                                    ; Begin of unwind block (FDE at 0x18588)
0000000000006de3         mul        rsi
0000000000006de6         mov        rdi, rax
0000000000006de9         seto       al
0000000000006dec         test       rdi, rdi
0000000000006def         js         loc_6dfb

0000000000006df1         movzx      eax, al
0000000000006df4         test       rax, rax
0000000000006df7         jne        loc_6dfb

0000000000006df9         jmp        xmalloc                                     ; xmalloc
                        ; endp

                     loc_6dfb:
0000000000006dfb         sub        rsp, 0x8                                    ; CODE XREF=xnmalloc+15, xnmalloc+23
0000000000006dff         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_6e04:
0000000000006e04         nop                                                    ; End of unwind block (FDE at 0x18588)
0000000000006e06         nop        word [cs:rax+rax]
                     xcharalloc:
0000000000006e10         jmp        xmalloc                                     ; xmalloc, Begin of unwind block (FDE at 0x1859c)
                        ; endp
0000000000006e12         align      32                                          ; End of unwind block (FDE at 0x1859c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xrealloc:
0000000000006e20         test       rsi, rsi                                    ; Begin of unwind block (FDE at 0x185b0), CODE XREF=quotearg_n_options+110, quotearg_n_options+386, xnrealloc+25, x2nrealloc+52, x2realloc+40
0000000000006e23         push       rbx
0000000000006e24         mov        rbx, rsi
0000000000006e27         jne        loc_6e2e

0000000000006e29         test       rdi, rdi
0000000000006e2c         jne        loc_6e48

                     loc_6e2e:
0000000000006e2e         mov        rsi, rbx                                    ; argument "__size" for method j_realloc, CODE XREF=xrealloc+7
0000000000006e31         call       j_realloc                                   ; realloc
0000000000006e36         test       rax, rax
0000000000006e39         jne        loc_6e40

0000000000006e3b         test       rbx, rbx
0000000000006e3e         jne        loc_6e51

                     loc_6e40:
0000000000006e40         pop        rbx                                         ; CODE XREF=xrealloc+25
0000000000006e41         ret
                        ; endp
0000000000006e42         align      8

                     loc_6e48:
0000000000006e48         call       j_free                                      ; free, CODE XREF=xrealloc+12
0000000000006e4d         xor        eax, eax
0000000000006e4f         pop        rbx
0000000000006e50         ret
                        ; endp

                     loc_6e51:
0000000000006e51         call       xalloc_die                                  ; xalloc_die, CODE XREF=xrealloc+30
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_6e56:
0000000000006e56         nop        word [cs:rax+rax]                           ; End of unwind block (FDE at 0x185b0)
                     xnrealloc:
0000000000006e60         mov        rax, rsi                                    ; Begin of unwind block (FDE at 0x185d4)
0000000000006e63         mul        rdx
0000000000006e66         mov        rsi, rax
0000000000006e69         seto       al
0000000000006e6c         test       rsi, rsi
0000000000006e6f         js         loc_6e7b

0000000000006e71         movzx      eax, al
0000000000006e74         test       rax, rax
0000000000006e77         jne        loc_6e7b

0000000000006e79         jmp        xrealloc                                    ; xrealloc
                        ; endp

                     loc_6e7b:
0000000000006e7b         sub        rsp, 0x8                                    ; CODE XREF=xnrealloc+15, xnrealloc+23
0000000000006e7f         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_6e84:
0000000000006e84         nop                                                    ; End of unwind block (FDE at 0x185d4)
0000000000006e86         nop        word [cs:rax+rax]
                     x2nrealloc:
0000000000006e90         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0x185e8)
0000000000006e93         mov        r9, rdx
0000000000006e96         mov        rcx, qword [rsi]
0000000000006e99         je         loc_6ed0

0000000000006e9b         xor        edx, edx
0000000000006e9d         movabs     rax, 0x5555555555555554
0000000000006ea7         div        r9
0000000000006eaa         cmp        rax, rcx
0000000000006ead         jbe        loc_6eeb

0000000000006eaf         mov        rax, rcx
0000000000006eb2         shr        rax, 0x1
0000000000006eb5         lea        rcx, qword [rax+rcx+1]

                     loc_6eba:
0000000000006eba         mov        qword [rsi], rcx                            ; CODE XREF=x2nrealloc+89
0000000000006ebd         imul       rcx, r9                                     ; argument #4 for method xrealloc
0000000000006ec1         mov        rsi, rcx                                    ; argument #2 for method xrealloc
0000000000006ec4         jmp        xrealloc                                    ; xrealloc
                        ; endp
0000000000006ec9         align      16

                     loc_6ed0:
0000000000006ed0         test       rcx, rcx                                    ; CODE XREF=x2nrealloc+9
0000000000006ed3         je         loc_6ef8

                     loc_6ed5:
0000000000006ed5         mov        rax, rcx                                    ; CODE XREF=sub_6ef4+28
0000000000006ed8         mul        r9
0000000000006edb         seto       dl
0000000000006ede         test       rax, rax
0000000000006ee1         movzx      edx, dl
0000000000006ee4         js         loc_6eeb

0000000000006ee6         test       rdx, rdx
0000000000006ee9         je         loc_6eba

                     loc_6eeb:
0000000000006eeb         sub        rsp, 0x8                                    ; CODE XREF=x2nrealloc+29, x2nrealloc+84
0000000000006eef         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_6ef4:
0000000000006ef4         nop        dword [rax]
                        ; endp

                     loc_6ef8:
0000000000006ef8         xor        edx, edx                                    ; CODE XREF=x2nrealloc+67
0000000000006efa         mov        eax, 0x80
0000000000006eff         xor        r8d, r8d
0000000000006f02         div        r9
0000000000006f05         test       rax, rax
0000000000006f08         sete       r8b
0000000000006f0c         lea        rcx, qword [r8+rax]
0000000000006f10         jmp        loc_6ed5
0000000000006f12         align      32                                          ; End of unwind block (FDE at 0x185e8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     x2realloc:
0000000000006f20         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0x18600)
0000000000006f23         mov        rax, qword [rsi]
0000000000006f26         je         loc_6f50

0000000000006f28         movabs     rdx, 0x5555555555555553
0000000000006f32         cmp        rax, rdx
0000000000006f35         ja         loc_6f61

0000000000006f37         mov        rdx, rax
0000000000006f3a         shr        rdx, 0x1
0000000000006f3d         lea        rax, qword [rdx+rax+1]

                     loc_6f42:
0000000000006f42         mov        qword [rsi], rax                            ; CODE XREF=x2realloc+63
0000000000006f45         mov        rsi, rax                                    ; argument #2 for method xrealloc
0000000000006f48         jmp        xrealloc                                    ; xrealloc
                        ; endp
0000000000006f4d         align      16

                     loc_6f50:
0000000000006f50         test       rax, rax                                    ; CODE XREF=x2realloc+6
0000000000006f53         mov        edx, 0x80
0000000000006f58         cmove      rax, rdx
0000000000006f5c         test       rax, rax
0000000000006f5f         jns        loc_6f42

                     loc_6f61:
0000000000006f61         sub        rsp, 0x8                                    ; CODE XREF=x2realloc+21
0000000000006f65         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_6f6a:
0000000000006f6a         nop        word [rax+rax]                              ; End of unwind block (FDE at 0x18600)
                     xzalloc:
0000000000006f70         push       rbx                                         ; Begin of unwind block (FDE at 0x18618)
0000000000006f71         mov        rbx, rdi
0000000000006f74         call       xmalloc                                     ; xmalloc
0000000000006f79         mov        rdx, rbx                                    ; argument "__n" for method j_memset
0000000000006f7c         xor        esi, esi                                    ; argument "__c" for method j_memset
0000000000006f7e         mov        rdi, rax                                    ; argument "__s" for method j_memset
0000000000006f81         pop        rbx
0000000000006f82         jmp        j_memset                                    ; memset
                        ; endp
0000000000006f87         align      16                                          ; End of unwind block (FDE at 0x18618)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xcalloc:
0000000000006f90         mov        rax, rdi                                    ; Begin of unwind block (FDE at 0x18634)
0000000000006f93         sub        rsp, 0x8
0000000000006f97         mul        rsi
0000000000006f9a         seto       dl
0000000000006f9d         test       rax, rax
0000000000006fa0         js         loc_6fb9

0000000000006fa2         movzx      edx, dl
0000000000006fa5         test       rdx, rdx
0000000000006fa8         jne        loc_6fb9

0000000000006faa         call       j_calloc                                    ; calloc
0000000000006faf         test       rax, rax
0000000000006fb2         je         loc_6fb9

0000000000006fb4         add        rsp, 0x8
0000000000006fb8         ret
                        ; endp

                     loc_6fb9:
0000000000006fb9         call       xalloc_die                                  ; xalloc_die, CODE XREF=xcalloc+16, xcalloc+24, xcalloc+34
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_6fbe:
0000000000006fbe         nop                                                    ; End of unwind block (FDE at 0x18634)
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xmemdup:
0000000000006fc0         push       rbp                                         ; Begin of unwind block (FDE at 0x18650), CODE XREF=clone_quoting_options+40
0000000000006fc1         push       rbx
0000000000006fc2         mov        rbp, rdi
0000000000006fc5         mov        rdi, rsi
0000000000006fc8         mov        rbx, rsi
0000000000006fcb         sub        rsp, 0x8
0000000000006fcf         call       xmalloc                                     ; xmalloc
0000000000006fd4         add        rsp, 0x8
0000000000006fd8         mov        rdx, rbx                                    ; argument "__n" for method j_memcpy
0000000000006fdb         mov        rsi, rbp                                    ; argument "__src" for method j_memcpy
0000000000006fde         pop        rbx
0000000000006fdf         pop        rbp
0000000000006fe0         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
0000000000006fe3         jmp        j_memcpy                                    ; memcpy
                        ; endp
0000000000006fe8         align      16                                          ; End of unwind block (FDE at 0x18650)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xstrdup:
0000000000006ff0         push       rbx                                         ; Begin of unwind block (FDE at 0x18678), CODE XREF=str_value+31, eval6+663
0000000000006ff1         mov        rbx, rdi
0000000000006ff4         call       j_strlen                                    ; strlen
0000000000006ff9         mov        rdi, rbx
0000000000006ffc         lea        rsi, qword [rax+1]
0000000000007000         pop        rbx
0000000000007001         jmp        xmemdup                                     ; xmemdup
                        ; endp
0000000000007003         align      16                                          ; End of unwind block (FDE at 0x18678)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xalloc_die:
0000000000007010         lea        rsi, qword [aMemoryExhauste]                ; Begin of unwind block (FDE at 0x18694), argument "msgid" for method j_dcgettext, "memory exhausted", CODE XREF=quotearg_n_options+422, xmalloc+21, xnmalloc+31, xrealloc+49, xnrealloc+31, x2nrealloc+95, x2realloc+69, xcalloc+41
0000000000007017         sub        rsp, 0x8
000000000000701b         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000007020         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000007022         call       j_dcgettext                                 ; dcgettext
0000000000007027         mov        edi, dword [exit_failure]                   ; argument "__status" for method j_error, exit_failure
000000000000702d         lea        rdx, qword [aSS+4]                          ; argument "__format" for method j_error, 0x16183
0000000000007034         mov        rcx, rax
0000000000007037         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000007039         xor        eax, eax
000000000000703b         call       j_error                                     ; error
0000000000007040         call       j_abort                                     ; abort
                        ; endp
0000000000007045         align      16                                          ; End of unwind block (FDE at 0x18694)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_34: int8_t, -52


                     rpl_mbrtowc:
0000000000007050         push       r13                                         ; Begin of unwind block (FDE at 0x186ac), CODE XREF=docolon+745, eval6+1278, eval6+1635, eval6+2400, mbschr+279, mbslen+271, sub_5050+534, build_wcs_buffer+111, build_wcs_upper_buffer+231, build_wcs_upper_buffer+608, re_string_reconstruct+586
0000000000007052         push       r12
0000000000007054         mov        r13, rsi
0000000000007057         push       rbp
0000000000007058         push       rbx
0000000000007059         mov        rbx, rdi
000000000000705c         mov        r12, rdx
000000000000705f         sub        rsp, 0x18
0000000000007063         mov        rax, qword [fs:0x28]
000000000000706c         mov        qword [rsp+0x38+var_30], rax
0000000000007071         xor        eax, eax
0000000000007073         lea        rax, qword [rsp+0x38+var_34]
0000000000007078         test       rdi, rdi
000000000000707b         cmove      rbx, rax
000000000000707f         mov        rdi, rbx                                    ; argument "__pwc" for method j_mbrtowc
0000000000007082         call       j_mbrtowc                                   ; mbrtowc
0000000000007087         cmp        rax, 0xfffffffffffffffd
000000000000708b         mov        rbp, rax
000000000000708e         jbe        loc_70b0

0000000000007090         test       r12, r12
0000000000007093         je         loc_70b0

0000000000007095         xor        edi, edi
0000000000007097         call       hard_locale                                 ; hard_locale
000000000000709c         test       al, al
000000000000709e         jne        loc_70b0

00000000000070a0         movzx      eax, byte [r13]
00000000000070a5         mov        ebp, 0x1
00000000000070aa         mov        dword [rbx], eax
00000000000070ac         nop        dword [rax]

                     loc_70b0:
00000000000070b0         mov        rdx, qword [rsp+0x38+var_30]                ; CODE XREF=rpl_mbrtowc+62, rpl_mbrtowc+67, rpl_mbrtowc+78
00000000000070b5         xor        rdx, qword [fs:0x28]
00000000000070be         mov        rax, rbp
00000000000070c1         jne        loc_70ce

00000000000070c3         add        rsp, 0x18
00000000000070c7         pop        rbx
00000000000070c8         pop        rbp
00000000000070c9         pop        r12
00000000000070cb         pop        r13
00000000000070cd         ret
                        ; endp

                     loc_70ce:
00000000000070ce         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=rpl_mbrtowc+113
                        ; endp
00000000000070d3         align      32                                          ; End of unwind block (FDE at 0x186ac)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     peek_token_bracket:
00000000000070e0         mov        rax, qword [rsi+0x48]                       ; Begin of unwind block (FDE at 0x186ec), CODE XREF=parse_bracket_element.constprop.37+507, sub_127b0+84, sub_127b0+295, sub_127b0+1382, sub_127b0+1566, sub_127b0+1659
00000000000070e4         cmp        qword [rsi+0x68], rax
00000000000070e8         jle        loc_7140

00000000000070ea         mov        r8, qword [rsi+8]
00000000000070ee         cmp        dword [rsi+0x90], 0x1
00000000000070f5         movzx      ecx, byte [r8+rax]
00000000000070fa         mov        byte [rdi], cl
00000000000070fc         jle        loc_7113

00000000000070fe         cmp        rax, qword [rsi+0x30]
0000000000007102         je         loc_7113

0000000000007104         mov        r9, qword [rsi+0x10]
0000000000007108         cmp        dword [r9+rax*4], 0xffffffff
000000000000710d         je         loc_718f

                     loc_7113:
0000000000007113         cmp        cl, 0x5c                                    ; CODE XREF=peek_token_bracket+28, peek_token_bracket+34
0000000000007116         je         loc_7180

0000000000007118         cmp        cl, 0x5b
000000000000711b         je         loc_7150

000000000000711d         cmp        cl, 0x5d
0000000000007120         je         loc_71c0

0000000000007126         cmp        cl, 0x5e
0000000000007129         je         loc_71b0

000000000000712f         cmp        cl, 0x2d
0000000000007132         jne        loc_718f

0000000000007134         mov        byte [rdi+8], 0x16
0000000000007138         mov        eax, 0x1
000000000000713d         ret
                        ; endp
000000000000713e         align      64

                     loc_7140:
0000000000007140         mov        byte [rdi+8], 0x2                           ; CODE XREF=peek_token_bracket+8
0000000000007144         xor        eax, eax
0000000000007146         ret
                        ; endp
0000000000007147         align      16

                     loc_7150:
0000000000007150         lea        rcx, qword [rax+1]                          ; CODE XREF=peek_token_bracket+59
0000000000007154         cmp        rcx, qword [rsi+0x58]
0000000000007158         jge        loc_71a0

000000000000715a         movzx      eax, byte [r8+rax+1]
0000000000007160         cmp        al, 0x3a
0000000000007162         mov        byte [rdi], al
0000000000007164         je         loc_7200

000000000000716a         cmp        al, 0x3d
000000000000716c         je         loc_71f0

0000000000007172         cmp        al, 0x2e
0000000000007174         jne        loc_71a0

0000000000007176         mov        byte [rdi+8], 0x1a
000000000000717a         mov        eax, 0x2
000000000000717f         ret
                        ; endp

                     loc_7180:
0000000000007180         and        edx, 0x1                                    ; CODE XREF=peek_token_bracket+54
0000000000007183         je         loc_718f

0000000000007185         lea        rdx, qword [rax+1]
0000000000007189         cmp        rdx, qword [rsi+0x58]
000000000000718d         jl         loc_71d0

                     loc_718f:
000000000000718f         mov        byte [rdi+8], 0x1                           ; CODE XREF=peek_token_bracket+45, peek_token_bracket+82, peek_token_bracket+163
0000000000007193         mov        eax, 0x1
0000000000007198         ret
                        ; endp
0000000000007199         align      32

                     loc_71a0:
00000000000071a0         mov        byte [rdi+8], 0x1                           ; CODE XREF=peek_token_bracket+120, peek_token_bracket+148, peek_token_bracket+291
00000000000071a4         mov        byte [rdi], 0x5b
00000000000071a7         mov        eax, 0x1
00000000000071ac         ret
                        ; endp
00000000000071ad         align      16

                     loc_71b0:
00000000000071b0         mov        byte [rdi+8], 0x19                          ; CODE XREF=peek_token_bracket+73
00000000000071b4         mov        eax, 0x1
00000000000071b9         ret
                        ; endp
00000000000071ba         align      64

                     loc_71c0:
00000000000071c0         mov        byte [rdi+8], 0x15                          ; CODE XREF=peek_token_bracket+64
00000000000071c4         mov        eax, 0x1
00000000000071c9         ret
                        ; endp
00000000000071ca         align      16

                     loc_71d0:
00000000000071d0         mov        qword [rsi+0x48], rdx                       ; CODE XREF=peek_token_bracket+173
00000000000071d4         movzx      eax, byte [r8+rax+1]
00000000000071da         mov        byte [rdi+8], 0x1
00000000000071de         mov        byte [rdi], al
00000000000071e0         mov        eax, 0x1
00000000000071e5         ret
                        ; endp
00000000000071e6         align      16

                     loc_71f0:
00000000000071f0         mov        byte [rdi+8], 0x1c                          ; CODE XREF=peek_token_bracket+140
00000000000071f4         mov        eax, 0x2
00000000000071f9         ret
                        ; endp
00000000000071fa         align      512

                     loc_7200:
0000000000007200         and        edx, 0x4                                    ; CODE XREF=peek_token_bracket+132
0000000000007203         je         loc_71a0

0000000000007205         mov        byte [rdi+8], 0x1e
0000000000007209         mov        eax, 0x2
000000000000720e         ret
                        ; endp
000000000000720f         align      16                                          ; End of unwind block (FDE at 0x186ec)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     mark_opt_subexp:
0000000000007210         cmp        byte [rsi+0x30], 0x11                       ; Begin of unwind block (FDE at 0x18700), DATA XREF=sub_12040+1284
0000000000007214         je         loc_7220

                     loc_7216:
0000000000007216         xor        eax, eax                                    ; CODE XREF=mark_opt_subexp+20
0000000000007218         ret
                        ; endp
0000000000007219         align      32

                     loc_7220:
0000000000007220         cmp        rdi, qword [rsi+0x28]                       ; CODE XREF=mark_opt_subexp+4
0000000000007224         jne        loc_7216

0000000000007226         or         byte [rsi+0x32], 0x8
000000000000722a         xor        eax, eax
000000000000722c         ret
                        ; endp
000000000000722d         align      16                                          ; End of unwind block (FDE at 0x18700)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_52: int16_t, -82
        ;    var_58: int32_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_6C: int32_t, -108
        ;    var_70: int32_t, -112
        ;    var_78: int64_t, -120


                     check_dst_limits_calc_pos_1:
0000000000007230         push       r15                                         ; Begin of unwind block (FDE at 0x18714), CODE XREF=check_dst_limits_calc_pos_1+349, check_dst_limits_calc_pos+88
0000000000007232         push       r14
0000000000007234         mov        r9, rdx
0000000000007237         push       r13
0000000000007239         push       r12
000000000000723b         lea        rdx, qword [rcx+rcx*2]
000000000000723f         push       rbp
0000000000007240         push       rbx
0000000000007241         mov        r15d, esi
0000000000007244         sub        rsp, 0x48
0000000000007248         mov        r14, qword [rdi+0x98]
000000000000724f         mov        qword [rsp+0x78+var_78], rdi
0000000000007253         mov        rax, qword [r14+0x30]
0000000000007257         lea        r12, qword [rax+rdx*8]
000000000000725b         cmp        qword [r12+8], 0x0
0000000000007261         jle        loc_73f5

0000000000007267         lea        rax, qword [r8+r8*4]
000000000000726b         mov        r11, rcx
000000000000726e         mov        ecx, r9d
0000000000007271         mov        r10, r8
0000000000007274         xor        ebx, ebx
0000000000007276         mov        dword [rsp+0x78+var_58], esi
000000000000727a         shl        rax, 0x3
000000000000727e         mov        r15, r9
0000000000007281         mov        qword [rsp+0x78+var_68], r11
0000000000007286         mov        qword [rsp+0x78+var_50], rax
000000000000728b         mov        eax, 0x1
0000000000007290         shl        rax, cl
0000000000007293         mov        qword [rsp+0x78+var_60], rax
0000000000007298         not        eax
000000000000729a         mov        word [rsp+0x78+var_52], ax
000000000000729f         mov        eax, esi
00000000000072a1         and        eax, 0x1
00000000000072a4         mov        dword [rsp+0x78+var_6C], eax
00000000000072a8         mov        eax, esi
00000000000072aa         and        eax, 0x2
00000000000072ad         mov        dword [rsp+0x78+var_70], eax
00000000000072b1         jmp        loc_72d5
00000000000072b3         align      8

                     loc_72b8:
00000000000072b8         cmp        dl, 0x9                                     ; CODE XREF=check_dst_limits_calc_pos_1+191
00000000000072bb         je         loc_7410

00000000000072c1         cmp        dl, 0x4
00000000000072c4         je         loc_7318

                     loc_72c6:
00000000000072c6         add        rbx, 0x1                                    ; CODE XREF=check_dst_limits_calc_pos_1+199, check_dst_limits_calc_pos_1+204, check_dst_limits_calc_pos_1+236, check_dst_limits_calc_pos_1+486, check_dst_limits_calc_pos_1+495
00000000000072ca         cmp        qword [r12+8], rbx
00000000000072cf         jle        loc_73f0

                     loc_72d5:
00000000000072d5         mov        rax, qword [r12+0x10]                       ; CODE XREF=check_dst_limits_calc_pos_1+129, check_dst_limits_calc_pos_1+436
00000000000072da         mov        rbp, qword [rax+rbx*8]
00000000000072de         mov        rax, rbp
00000000000072e1         shl        rax, 0x4
00000000000072e5         add        rax, qword [r14]
00000000000072e8         movzx      edx, byte [rax+8]
00000000000072ec         cmp        dl, 0x8
00000000000072ef         jne        loc_72b8

00000000000072f1         mov        ecx, dword [rsp+0x78+var_6C]
00000000000072f5         test       ecx, ecx
00000000000072f7         je         loc_72c6

00000000000072f9         cmp        qword [rax], r15
00000000000072fc         jne        loc_72c6

                     loc_72fe:
00000000000072fe         add        rsp, 0x48                                   ; CODE XREF=check_dst_limits_calc_pos_1+357
0000000000007302         mov        eax, 0xffffffff
0000000000007307         pop        rbx
0000000000007308         pop        rbp
0000000000007309         pop        r12
000000000000730b         pop        r13
000000000000730d         pop        r14
000000000000730f         pop        r15
0000000000007311         ret
                        ; endp
0000000000007312         align      8

                     loc_7318:
0000000000007318         cmp        r10, 0xffffffffffffffff                     ; CODE XREF=check_dst_limits_calc_pos_1+148
000000000000731c         je         loc_72c6

000000000000731e         mov        rax, qword [rsp+0x78+var_78]
0000000000007322         mov        r13, qword [rsp+0x78+var_50]
0000000000007327         mov        rdi, rbp
000000000000732a         mov        qword [rsp+0x78+var_48], r12
000000000000732f         mov        qword [rsp+0x78+var_40], rbx
0000000000007334         mov        r12, r10
0000000000007337         add        r13, qword [rax+0xd8]
000000000000733e         lea        rax, qword [rbp+rbp*2]
0000000000007343         mov        rbp, r14
0000000000007346         mov        r14, rdi
0000000000007349         shl        rax, 0x3
000000000000734d         mov        rbx, rax

                     loc_7350:
0000000000007350         cmp        qword [r13], r14                            ; CODE XREF=check_dst_limits_calc_pos_1+409
0000000000007354         jne        loc_73c0

0000000000007356         cmp        r15, 0x3f
000000000000735a         jg         loc_7368

000000000000735c         movzx      eax, word [r13+0x22]
0000000000007361         test       qword [rsp+0x78+var_60], rax
0000000000007366         je         loc_73c0

                     loc_7368:
0000000000007368         mov        rax, qword [rbp+0x28]                       ; CODE XREF=check_dst_limits_calc_pos_1+298
000000000000736c         mov        rax, qword [rax+rbx+0x10]
0000000000007371         mov        rcx, qword [rax]
0000000000007374         cmp        qword [rsp+0x78+var_68], rcx
0000000000007379         je         loc_7440

000000000000737f         mov        esi, dword [rsp+0x78+var_58]
0000000000007383         mov        rdi, qword [rsp+0x78+var_78]
0000000000007387         mov        r8, r12
000000000000738a         mov        rdx, r15
000000000000738d         call       check_dst_limits_calc_pos_1                 ; check_dst_limits_calc_pos_1
0000000000007392         cmp        eax, 0xffffffff
0000000000007395         je         loc_72fe

000000000000739b         test       eax, eax
000000000000739d         jne        loc_73a7

000000000000739f         mov        esi, dword [rsp+0x78+var_70]
00000000000073a3         test       esi, esi
00000000000073a5         jne        loc_7425

                     loc_73a7:
00000000000073a7         cmp        r15, 0x3f                                   ; CODE XREF=check_dst_limits_calc_pos_1+365
00000000000073ab         jg         loc_73c0

00000000000073ad         movzx      eax, word [rsp+0x78+var_52]
00000000000073b2         and        word [r13+0x22], ax
00000000000073b7         nop        word [rax+rax]

                     loc_73c0:
00000000000073c0         add        r13, 0x28                                   ; CODE XREF=check_dst_limits_calc_pos_1+292, check_dst_limits_calc_pos_1+310, check_dst_limits_calc_pos_1+379
00000000000073c4         cmp        byte [r13-8], 0x0
00000000000073c9         jne        loc_7350

00000000000073cb         mov        rbx, qword [rsp+0x78+var_40]
00000000000073d0         mov        r10, r12
00000000000073d3         mov        r12, qword [rsp+0x78+var_48]
00000000000073d8         mov        r14, rbp
00000000000073db         add        rbx, 0x1
00000000000073df         cmp        qword [r12+8], rbx
00000000000073e4         jg         loc_72d5

00000000000073ea         nop        word [rax+rax]

                     loc_73f0:
00000000000073f0         mov        r15d, dword [rsp+0x78+var_58]               ; CODE XREF=check_dst_limits_calc_pos_1+159

                     loc_73f5:
00000000000073f5         add        rsp, 0x48                                   ; CODE XREF=check_dst_limits_calc_pos_1+49
00000000000073f9         mov        eax, r15d
00000000000073fc         pop        rbx
00000000000073fd         sar        eax, 0x1
00000000000073ff         pop        rbp
0000000000007400         pop        r12
0000000000007402         pop        r13
0000000000007404         pop        r14
0000000000007406         pop        r15
0000000000007408         ret
                        ; endp
0000000000007409         align      16

                     loc_7410:
0000000000007410         mov        edx, dword [rsp+0x78+var_70]                ; CODE XREF=check_dst_limits_calc_pos_1+139
0000000000007414         test       edx, edx
0000000000007416         je         loc_72c6

000000000000741c         cmp        qword [rax], r15
000000000000741f         jne        loc_72c6

                     loc_7425:
0000000000007425         add        rsp, 0x48                                   ; CODE XREF=check_dst_limits_calc_pos_1+373
0000000000007429         xor        eax, eax
000000000000742b         pop        rbx
000000000000742c         pop        rbp
000000000000742d         pop        r12
000000000000742f         pop        r13
0000000000007431         pop        r14
0000000000007433         pop        r15
0000000000007435         ret
                        ; endp
0000000000007436         align      64

                     loc_7440:
0000000000007440         mov        r15d, dword [rsp+0x78+var_58]               ; CODE XREF=check_dst_limits_calc_pos_1+329
0000000000007445         add        rsp, 0x48
0000000000007449         pop        rbx
000000000000744a         pop        rbp
000000000000744b         mov        eax, r15d
000000000000744e         and        eax, 0x1
0000000000007451         pop        r12
0000000000007453         neg        eax
0000000000007455         pop        r13
0000000000007457         pop        r14
0000000000007459         pop        r15
000000000000745b         ret
                        ; endp
000000000000745c         align      32                                          ; End of unwind block (FDE at 0x18714)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     check_dst_limits_calc_pos:
0000000000007460         mov        rax, qword [rdi+0xd8]                       ; Begin of unwind block (FDE at 0x187a8), CODE XREF=check_dst_limits.isra.13+430, check_dst_limits.isra.13+464
0000000000007467         lea        rsi, qword [rsi+rsi*4]
000000000000746b         lea        rax, qword [rax+rsi*8]
000000000000746f         mov        r10, qword [rax+0x10]
0000000000007473         cmp        r10, r8
0000000000007476         jg         loc_74c0

0000000000007478         mov        rax, qword [rax+0x18]
000000000000747c         cmp        rax, r8
000000000000747f         jl         loc_74a0

0000000000007481         xor        esi, esi
0000000000007483         cmp        r10, r8
0000000000007486         sete       sil
000000000000748a         or         esi, 0x2
000000000000748d         cmp        rax, r8
0000000000007490         je         loc_74b5

0000000000007492         xor        eax, eax
0000000000007494         cmp        r10, r8
0000000000007497         je         loc_74b0

0000000000007499         ret
                        ; endp
000000000000749b         align      32

                     loc_74a0:
00000000000074a0         mov        eax, 0x1                                    ; CODE XREF=check_dst_limits_calc_pos+31
00000000000074a5         ret
                        ; endp
00000000000074a6         align      16

                     loc_74b0:
00000000000074b0         mov        esi, 0x1                                    ; CODE XREF=check_dst_limits_calc_pos+55

                     loc_74b5:
00000000000074b5         mov        r8, r9                                      ; CODE XREF=check_dst_limits_calc_pos+48
00000000000074b8         jmp        check_dst_limits_calc_pos_1                 ; check_dst_limits_calc_pos_1
                        ; endp
00000000000074bd         align      64

                     loc_74c0:
00000000000074c0         mov        eax, 0xffffffff                             ; CODE XREF=check_dst_limits_calc_pos+22
00000000000074c5         ret
                        ; endp
00000000000074c6         align      16                                          ; End of unwind block (FDE at 0x187a8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     postorder:
00000000000074d0         push       r12                                         ; Begin of unwind block (FDE at 0x187bc), CODE XREF=sub_12040+93, sub_12040+776, sub_12040+1033, sub_12040+1127, sub_12040+1294, parse_branch+325, parse_branch+348, parse_branch+368, parse_reg_exp+317, re_compile_internal+1645, re_compile_internal+1672
00000000000074d2         mov        r12, rsi
00000000000074d5         push       rbp
00000000000074d6         mov        rbp, rdx
00000000000074d9         push       rbx
00000000000074da         mov        rbx, rdi
00000000000074dd         jmp        loc_74e3
00000000000074df         align      32

                     loc_74e0:
00000000000074e0         mov        rbx, rax                                    ; CODE XREF=postorder+26, postorder+35, postorder+87

                     loc_74e3:
00000000000074e3         mov        rax, qword [rbx+8]                          ; CODE XREF=postorder+13
00000000000074e7         test       rax, rax
00000000000074ea         jne        loc_74e0

00000000000074ec         mov        rax, qword [rbx+0x10]
00000000000074f0         test       rax, rax
00000000000074f3         jne        loc_74e0

00000000000074f5         mov        rsi, rbx
00000000000074f8         mov        rdi, rbp
00000000000074fb         call       r12
00000000000074fe         test       eax, eax
0000000000007500         jne        loc_7536

0000000000007502         nop        word [rax+rax]

                     loc_7508:
0000000000007508         mov        rdx, qword [rbx]                            ; CODE XREF=postorder+100
000000000000750b         test       rdx, rdx
000000000000750e         je         loc_7536

0000000000007510         mov        rax, qword [rdx+0x10]
0000000000007514         cmp        rax, rbx
0000000000007517         mov        rbx, rdx
000000000000751a         sete       sil
000000000000751e         test       rax, rax
0000000000007521         sete       cl
0000000000007524         or         sil, cl
0000000000007527         je         loc_74e0

0000000000007529         mov        rsi, rbx
000000000000752c         mov        rdi, rbp
000000000000752f         call       r12
0000000000007532         test       eax, eax
0000000000007534         je         loc_7508

                     loc_7536:
0000000000007536         pop        rbx                                         ; CODE XREF=postorder+48, postorder+62
0000000000007537         pop        rbp
0000000000007538         pop        r12
000000000000753a         ret
                        ; endp
000000000000753b         align      64                                          ; End of unwind block (FDE at 0x187bc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     preorder:
0000000000007540         push       r12                                         ; Begin of unwind block (FDE at 0x187e8), CODE XREF=re_compile_internal+1563, re_compile_internal+1699
0000000000007542         mov        r12, rsi
0000000000007545         push       rbp
0000000000007546         mov        rbp, rdx
0000000000007549         push       rbx
000000000000754a         mov        rbx, rdi
000000000000754d         jmp        loc_7553
000000000000754f         align      16

                     loc_7550:
0000000000007550         mov        rbx, rdx                                    ; CODE XREF=preorder+41, preorder+63

                     loc_7553:
0000000000007553         mov        rsi, rbx                                    ; CODE XREF=preorder+13
0000000000007556         mov        rdi, rbp
0000000000007559         call       r12
000000000000755c         test       eax, eax
000000000000755e         jne        loc_758c

0000000000007560         mov        rdx, qword [rbx+8]
0000000000007564         xor        ecx, ecx
0000000000007566         test       rdx, rdx
0000000000007569         jne        loc_7550

000000000000756b         jmp        loc_7573
000000000000756d         align      16

                     loc_7570:
0000000000007570         mov        rbx, rdx                                    ; CODE XREF=preorder+74

                     loc_7573:
0000000000007573         mov        rdx, qword [rbx+0x10]                       ; CODE XREF=preorder+43
0000000000007577         cmp        rdx, rcx
000000000000757a         je         loc_7581

000000000000757c         test       rdx, rdx
000000000000757f         jne        loc_7550

                     loc_7581:
0000000000007581         mov        rdx, qword [rbx]                            ; CODE XREF=preorder+58
0000000000007584         mov        rcx, rbx
0000000000007587         test       rdx, rdx
000000000000758a         jne        loc_7570

                     loc_758c:
000000000000758c         pop        rbx                                         ; CODE XREF=preorder+30
000000000000758d         pop        rbp
000000000000758e         pop        r12
0000000000007590         ret
                        ; endp
0000000000007591         align      32                                          ; End of unwind block (FDE at 0x187e8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_string_realloc_buffers:
00000000000075a0         push       rbp                                         ; Begin of unwind block (FDE at 0x18814), CODE XREF=extend_buffers+56, re_search_internal+587, re_compile_internal+789, re_compile_internal+1757
00000000000075a1         push       rbx
00000000000075a2         mov        rbp, rsi
00000000000075a5         mov        rbx, rdi
00000000000075a8         sub        rsp, 0x8
00000000000075ac         cmp        dword [rdi+0x90], 0x1
00000000000075b3         jle        loc_75fd

00000000000075b5         movabs     rax, 0x1fffffffffffffff
00000000000075bf         cmp        rsi, rax
00000000000075c2         ja         loc_7630

00000000000075c4         mov        rdi, qword [rdi+0x10]                       ; argument "__ptr" for method j_realloc
00000000000075c8         lea        rsi, qword [rsi*4]                          ; argument "__size" for method j_realloc
00000000000075d0         call       j_realloc                                   ; realloc
00000000000075d5         test       rax, rax
00000000000075d8         je         loc_7630

00000000000075da         mov        rdi, qword [rbx+0x18]
00000000000075de         mov        qword [rbx+0x10], rax
00000000000075e2         test       rdi, rdi
00000000000075e5         je         loc_75fd

00000000000075e7         lea        rsi, qword [rbp*8]                          ; argument "__size" for method j_realloc
00000000000075ef         call       j_realloc                                   ; realloc
00000000000075f4         test       rax, rax
00000000000075f7         je         loc_7630

00000000000075f9         mov        qword [rbx+0x18], rax

                     loc_75fd:
00000000000075fd         cmp        byte [rbx+0x8b], 0x0                        ; CODE XREF=re_string_realloc_buffers+19, re_string_realloc_buffers+69
0000000000007604         jne        loc_7618

                     loc_7606:
0000000000007606         mov        qword [rbx+0x40], rbp                       ; CODE XREF=re_string_realloc_buffers+141
000000000000760a         add        rsp, 0x8
000000000000760e         xor        eax, eax
0000000000007610         pop        rbx
0000000000007611         pop        rbp
0000000000007612         ret
                        ; endp
0000000000007613         align      8

                     loc_7618:
0000000000007618         mov        rdi, qword [rbx+8]                          ; argument "__ptr" for method j_realloc, CODE XREF=re_string_realloc_buffers+100
000000000000761c         mov        rsi, rbp                                    ; argument "__size" for method j_realloc
000000000000761f         call       j_realloc                                   ; realloc
0000000000007624         test       rax, rax
0000000000007627         je         loc_7630

0000000000007629         mov        qword [rbx+8], rax
000000000000762d         jmp        loc_7606
000000000000762f         align      16

                     loc_7630:
0000000000007630         add        rsp, 0x8                                    ; CODE XREF=re_string_realloc_buffers+34, re_string_realloc_buffers+56, re_string_realloc_buffers+87, re_string_realloc_buffers+135
0000000000007634         mov        eax, 0xc
0000000000007639         pop        rbx
000000000000763a         pop        rbp
000000000000763b         ret
                        ; endp
000000000000763c         align      64                                          ; End of unwind block (FDE at 0x18814)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_node_set_insert_last:
0000000000007640         push       rbp                                         ; Begin of unwind block (FDE at 0x18848), CODE XREF=register_state+117, sub_14120+481
0000000000007641         push       rbx
0000000000007642         mov        rbp, rsi
0000000000007645         mov        rbx, rdi
0000000000007648         sub        rsp, 0x8
000000000000764c         mov        rsi, qword [rdi+8]
0000000000007650         cmp        qword [rdi], rsi
0000000000007653         mov        rax, qword [rdi+0x10]
0000000000007657         je         loc_7678

                     loc_7659:
0000000000007659         lea        rdx, qword [rsi+1]                          ; CODE XREF=re_node_set_insert_last+92
000000000000765d         mov        qword [rbx+8], rdx
0000000000007661         mov        qword [rax+rsi*8], rbp
0000000000007665         mov        eax, 0x1

                     loc_766a:
000000000000766a         add        rsp, 0x8                                    ; CODE XREF=re_node_set_insert_last+98
000000000000766e         pop        rbx
000000000000766f         pop        rbp
0000000000007670         ret
                        ; endp
0000000000007671         align      8

                     loc_7678:
0000000000007678         add        rsi, 0x1                                    ; CODE XREF=re_node_set_insert_last+23
000000000000767c         lea        rdx, qword [rsi+rsi]
0000000000007680         shl        rsi, 0x4                                    ; argument "__size" for method j_realloc
0000000000007684         mov        qword [rdi], rdx
0000000000007687         mov        rdi, rax                                    ; argument "__ptr" for method j_realloc
000000000000768a         call       j_realloc                                   ; realloc
000000000000768f         test       rax, rax
0000000000007692         je         loc_76a0

0000000000007694         mov        qword [rbx+0x10], rax
0000000000007698         mov        rsi, qword [rbx+8]
000000000000769c         jmp        loc_7659
000000000000769e         align      32

                     loc_76a0:
00000000000076a0         xor        eax, eax                                    ; CODE XREF=re_node_set_insert_last+82
00000000000076a2         jmp        loc_766a
00000000000076a4         align      16                                          ; End of unwind block (FDE at 0x18848)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_node_set_insert:
00000000000076b0         push       rbp                                         ; Begin of unwind block (FDE at 0x18874), CODE XREF=duplicate_node_closure+224, duplicate_node_closure+282, duplicate_node_closure+352, duplicate_node_closure+465, duplicate_node_closure+607, check_arrival_expand_ecl_sub+84, check_arrival_expand_ecl_sub+148, calc_eclosure_iter+360, calc_eclosure_iter+495, expand_bkref_cache+409, build_trtable+1657
00000000000076b1         push       rbx
00000000000076b2         mov        rbp, rsi
00000000000076b5         mov        rbx, rdi
00000000000076b8         sub        rsp, 0x8
00000000000076bc         mov        rdx, qword [rdi]
00000000000076bf         test       rdx, rdx
00000000000076c2         je         loc_76e8

00000000000076c4         mov        rsi, qword [rdi+8]
00000000000076c8         mov        rax, qword [rdi+0x10]
00000000000076cc         test       rsi, rsi
00000000000076cf         jne        loc_7720

00000000000076d1         mov        qword [rax], rbp
00000000000076d4         add        qword [rdi+8], 0x1
00000000000076d9         mov        eax, 0x1

                     loc_76de:
00000000000076de         add        rsp, 0x8                                    ; CODE XREF=re_node_set_insert+177, re_node_set_insert+247, re_node_set_insert+295
00000000000076e2         pop        rbx
00000000000076e3         pop        rbp
00000000000076e4         ret
                        ; endp
00000000000076e5         align      8

                     loc_76e8:
00000000000076e8         mov        qword [rdi], 0x1                            ; CODE XREF=re_node_set_insert+18
00000000000076ef         mov        qword [rdi+8], 0x1
00000000000076f7         mov        edi, 0x8                                    ; argument "__size" for method j_malloc
00000000000076fc         call       j_malloc                                    ; malloc
0000000000007701         test       rax, rax
0000000000007704         mov        qword [rbx+0x10], rax
0000000000007708         je         loc_7798

000000000000770e         mov        qword [rax], rbp
0000000000007711         add        rsp, 0x8
0000000000007715         mov        eax, 0x1
000000000000771a         pop        rbx
000000000000771b         pop        rbp
000000000000771c         ret
                        ; endp
000000000000771d         align      32

                     loc_7720:
0000000000007720         cmp        rdx, rsi                                    ; CODE XREF=re_node_set_insert+31
0000000000007723         je         loc_77b0

                     loc_7729:
0000000000007729         cmp        qword [rax], rbp                            ; CODE XREF=re_node_set_insert+288
000000000000772c         lea        rdx, qword [rsi*8]
0000000000007734         jle        loc_7770

0000000000007736         test       rsi, rsi
0000000000007739         jle        loc_7753

000000000000773b         add        rdx, rax
000000000000773e         nop

                     loc_7740:
0000000000007740         mov        rcx, qword [rdx-8]                          ; CODE XREF=re_node_set_insert+159
0000000000007744         sub        rdx, 0x8
0000000000007748         mov        qword [rdx+8], rcx
000000000000774c         cmp        rax, rdx
000000000000774f         jne        loc_7740

0000000000007751         xor        edx, edx

                     loc_7753:
0000000000007753         mov        qword [rax+rdx], rbp                        ; CODE XREF=re_node_set_insert+137, re_node_set_insert+200, re_node_set_insert+226
0000000000007757         mov        eax, 0x1
000000000000775c         add        qword [rbx+8], 0x1
0000000000007761         jmp        loc_76de
0000000000007766         align      16

                     loc_7770:
0000000000007770         mov        rcx, qword [rax+rdx-8]                      ; CODE XREF=re_node_set_insert+132
0000000000007775         cmp        rbp, rcx
0000000000007778         jge        loc_7753

000000000000777a         nop        word [rax+rax]

                     loc_7780:
0000000000007780         mov        qword [rax+rdx], rcx                        ; CODE XREF=re_node_set_insert+224
0000000000007784         sub        rdx, 0x8
0000000000007788         mov        rcx, qword [rax+rdx-8]
000000000000778d         cmp        rcx, rbp
0000000000007790         jg         loc_7780

0000000000007792         jmp        loc_7753
0000000000007794         align      8

                     loc_7798:
0000000000007798         mov        qword [rbx+8], 0x0                          ; CODE XREF=re_node_set_insert+88
00000000000077a0         mov        qword [rbx], 0x0
00000000000077a7         jmp        loc_76de
00000000000077ac         align      16

                     loc_77b0:
00000000000077b0         lea        rdx, qword [rsi+rsi]                        ; CODE XREF=re_node_set_insert+115
00000000000077b4         shl        rsi, 0x4                                    ; argument "__size" for method j_realloc
00000000000077b8         mov        qword [rdi], rdx
00000000000077bb         mov        rdi, rax                                    ; argument "__ptr" for method j_realloc
00000000000077be         call       j_realloc                                   ; realloc
00000000000077c3         test       rax, rax
00000000000077c6         je         loc_77d5

00000000000077c8         mov        qword [rbx+0x10], rax
00000000000077cc         mov        rsi, qword [rbx+8]
00000000000077d0         jmp        loc_7729

                     loc_77d5:
00000000000077d5         xor        eax, eax                                    ; CODE XREF=re_node_set_insert+278
00000000000077d7         jmp        loc_76de
00000000000077dc         align      32                                          ; End of unwind block (FDE at 0x18874)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     register_state:
00000000000077e0         push       r14                                         ; Begin of unwind block (FDE at 0x188ac), CODE XREF=re_acquire_state_context+513, re_acquire_state+390
00000000000077e2         push       r13
00000000000077e4         mov        r14, rdi
00000000000077e7         push       r12
00000000000077e9         push       rbp
00000000000077ea         mov        r12, rdx
00000000000077ed         push       rbx
00000000000077ee         mov        rbx, qword [rsi+0x10]
00000000000077f2         mov        rbp, rsi
00000000000077f5         mov        qword [rsi], rdx
00000000000077f8         mov        qword [rsi+0x28], 0x0
0000000000007800         lea        r13, qword [rsi+0x20]
0000000000007804         lea        rdi, qword [rbx*8]                          ; argument "__size" for method j_malloc
000000000000780c         mov        qword [rsi+0x20], rbx
0000000000007810         call       j_malloc                                    ; malloc
0000000000007815         test       rax, rax
0000000000007818         mov        qword [rbp+0x30], rax
000000000000781c         je         loc_785e

000000000000781e         test       rbx, rbx
0000000000007821         jle        loc_7870

0000000000007823         xor        ebx, ebx
0000000000007825         jmp        loc_783a
0000000000007827         align      16

                     loc_7830:
0000000000007830         add        rbx, 0x1                                    ; CODE XREF=register_state+112, register_state+124
0000000000007834         cmp        qword [rbp+0x10], rbx
0000000000007838         jle        loc_7870

                     loc_783a:
000000000000783a         mov        rax, qword [rbp+0x18]                       ; CODE XREF=register_state+69
000000000000783e         mov        rsi, qword [rax+rbx*8]
0000000000007842         mov        rax, rsi
0000000000007845         shl        rax, 0x4
0000000000007849         add        rax, qword [r14]
000000000000784c         test       byte [rax+8], 0x8
0000000000007850         jne        loc_7830

0000000000007852         mov        rdi, r13
0000000000007855         call       re_node_set_insert_last                     ; re_node_set_insert_last
000000000000785a         test       al, al
000000000000785c         jne        loc_7830

                     loc_785e:
000000000000785e         pop        rbx                                         ; CODE XREF=register_state+60, register_state+217
000000000000785f         mov        eax, 0xc
0000000000007864         pop        rbp
0000000000007865         pop        r12
0000000000007867         pop        r13
0000000000007869         pop        r14
000000000000786b         ret
                        ; endp
000000000000786c         align      16

                     loc_7870:
0000000000007870         and        r12, qword [r14+0x88]                       ; CODE XREF=register_state+65, register_state+88
0000000000007877         mov        rax, qword [r14+0x40]
000000000000787b         lea        rdx, qword [r12+r12*2]
000000000000787f         lea        rbx, qword [rax+rdx*8]
0000000000007883         mov        rdx, qword [rbx]
0000000000007886         cmp        qword [rbx+8], rdx
000000000000788a         mov        rax, qword [rbx+0x10]
000000000000788e         lea        rsi, qword [rdx+1]
0000000000007892         jle        loc_78a6

                     loc_7894:
0000000000007894         mov        qword [rbx], rsi                            ; CODE XREF=register_state+234
0000000000007897         mov        qword [rax+rdx*8], rbp
000000000000789b         xor        eax, eax
000000000000789d         pop        rbx
000000000000789e         pop        rbp
000000000000789f         pop        r12
00000000000078a1         pop        r13
00000000000078a3         pop        r14
00000000000078a5         ret
                        ; endp

                     loc_78a6:
00000000000078a6         lea        r12, qword [rsi+rsi]                        ; CODE XREF=register_state+178
00000000000078aa         mov        rdi, rax                                    ; argument "__ptr" for method j_realloc
00000000000078ad         shl        rsi, 0x4                                    ; argument "__size" for method j_realloc
00000000000078b1         call       j_realloc                                   ; realloc
00000000000078b6         test       rax, rax
00000000000078b9         je         loc_785e

00000000000078bb         mov        rdx, qword [rbx]
00000000000078be         mov        qword [rbx+0x10], rax
00000000000078c2         mov        qword [rbx+8], r12
00000000000078c6         lea        rsi, qword [rdx+1]
00000000000078ca         jmp        loc_7894
00000000000078cc         align      16                                          ; End of unwind block (FDE at 0x188ac)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     build_upper_buffer:
00000000000078d0         push       r12                                         ; Begin of unwind block (FDE at 0x188fc), CODE XREF=extend_buffers+320, re_string_reconstruct+1651, sub_14120+1344
00000000000078d2         mov        r12, qword [rdi+0x58]
00000000000078d6         cmp        qword [rdi+0x40], r12
00000000000078da         push       rbp
00000000000078db         mov        rbp, rdi
00000000000078de         cmovle     r12, qword [rdi+0x40]
00000000000078e3         push       rbx
00000000000078e4         mov        rbx, qword [rdi+0x30]
00000000000078e8         cmp        r12, rbx
00000000000078eb         jle        loc_7925

00000000000078ed         call       j___ctype_toupper_loc                       ; __ctype_toupper_loc
00000000000078f2         nop        word [rax+rax]

                     loc_78f8:
00000000000078f8         mov        rdx, qword [rbp]                            ; CODE XREF=build_upper_buffer+83
00000000000078fc         mov        rcx, qword [rbp+0x78]
0000000000007900         add        rdx, rbx
0000000000007903         add        rdx, qword [rbp+0x28]
0000000000007907         test       rcx, rcx
000000000000790a         movzx      edx, byte [rdx]
000000000000790d         jne        loc_7938

                     loc_790f:
000000000000790f         mov        rsi, qword [rax]                            ; CODE XREF=build_upper_buffer+108
0000000000007912         mov        rcx, qword [rbp+8]
0000000000007916         mov        edx, dword [rsi+rdx*4]
0000000000007919         mov        byte [rcx+rbx], dl
000000000000791c         add        rbx, 0x1
0000000000007920         cmp        r12, rbx
0000000000007923         jne        loc_78f8

                     loc_7925:
0000000000007925         mov        qword [rbp+0x30], rbx                       ; CODE XREF=build_upper_buffer+27
0000000000007929         mov        qword [rbp+0x38], rbx
000000000000792d         pop        rbx
000000000000792e         pop        rbp
000000000000792f         pop        r12
0000000000007931         ret
                        ; endp
0000000000007932         align      8

                     loc_7938:
0000000000007938         movzx      edx, byte [rcx+rdx]                         ; CODE XREF=build_upper_buffer+61
000000000000793c         jmp        loc_790f
000000000000793e         align      64                                          ; End of unwind block (FDE at 0x188fc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_88: int8_t, -136
        ;    var_8C: int32_t, -140


                     build_wcs_buffer:
0000000000007940         push       r15                                         ; Begin of unwind block (FDE at 0x1892c), CODE XREF=extend_buffers+275, re_string_reconstruct+424, sub_14120+1021
0000000000007942         push       r14
0000000000007944         push       r13
0000000000007946         push       r12
0000000000007948         push       rbp
0000000000007949         push       rbx
000000000000794a         mov        rbx, rdi
000000000000794d         sub        rsp, 0x68
0000000000007951         mov        r12, qword [rdi+0x58]
0000000000007955         mov        rbp, qword [rdi+0x30]
0000000000007959         mov        rax, qword [fs:0x28]
0000000000007962         mov        qword [rsp+0x98+var_40], rax
0000000000007967         xor        eax, eax
0000000000007969         cmp        qword [rdi+0x40], r12
000000000000796d         cmovle     r12, qword [rdi+0x40]
0000000000007972         cmp        r12, rbp
0000000000007975         jle        loc_7a04

000000000000797b         lea        r14, qword [rdi+0x20]
000000000000797f         lea        r13, qword [rsp+0x98+var_8C]
0000000000007984         nop        dword [rax]

                     loc_7988:
0000000000007988         mov        rdi, qword [rbx+0x78]                       ; CODE XREF=build_wcs_buffer+194, build_wcs_buffer+246
000000000000798c         mov        rdx, r12
000000000000798f         mov        r15, qword [rbx+0x20]
0000000000007993         sub        rdx, rbp
0000000000007996         test       rdi, rdi
0000000000007999         jne        loc_7a80

000000000000799f         mov        rsi, qword [rbx+0x28]
00000000000079a3         add        rsi, rbp
00000000000079a6         add        rsi, qword [rbx]

                     loc_79a9:
00000000000079a9         mov        rcx, r14                                    ; CODE XREF=build_wcs_buffer+337, build_wcs_buffer+359, build_wcs_buffer+413
00000000000079ac         mov        rdi, r13
00000000000079af         call       rpl_mbrtowc                                 ; rpl_mbrtowc
00000000000079b4         lea        rdx, qword [rax-1]
00000000000079b8         cmp        rdx, 0xfffffffffffffffd
00000000000079bc         ja         loc_7a50

00000000000079c2         cmp        rax, 0xfffffffffffffffe
00000000000079c6         mov        edx, dword [rsp+0x98+var_8C]
00000000000079ca         je         loc_7a40

                     loc_79cc:
00000000000079cc         mov        rcx, qword [rbx+0x10]                       ; CODE XREF=build_wcs_buffer+311
00000000000079d0         lea        rsi, qword [rbp+1]
00000000000079d4         lea        rdi, qword [rbp*4]
00000000000079dc         mov        dword [rcx+rbp*4], edx
00000000000079df         add        rbp, rax
00000000000079e2         cmp        rsi, rbp
00000000000079e5         jge        loc_7a30

00000000000079e7         lea        rdx, qword [rcx+rdi+4]
00000000000079ec         lea        rax, qword [rcx+rbp*4]

                     loc_79f0:
00000000000079f0         mov        dword [rdx], 0xffffffff                     ; CODE XREF=build_wcs_buffer+189
00000000000079f6         add        rdx, 0x4
00000000000079fa         cmp        rax, rdx
00000000000079fd         jne        loc_79f0

00000000000079ff         cmp        rbp, r12
0000000000007a02         jl         loc_7988

                     loc_7a04:
0000000000007a04         mov        rax, qword [rsp+0x98+var_40]                ; CODE XREF=build_wcs_buffer+53, build_wcs_buffer+252, build_wcs_buffer+428
0000000000007a09         xor        rax, qword [fs:0x28]
0000000000007a12         mov        qword [rbx+0x30], rbp
0000000000007a16         mov        qword [rbx+0x38], rbp
0000000000007a1a         jne        loc_7afe

0000000000007a20         add        rsp, 0x68
0000000000007a24         pop        rbx
0000000000007a25         pop        rbp
0000000000007a26         pop        r12
0000000000007a28         pop        r13
0000000000007a2a         pop        r14
0000000000007a2c         pop        r15
0000000000007a2e         ret
                        ; endp
0000000000007a2f         align      16

                     loc_7a30:
0000000000007a30         mov        rbp, rsi                                    ; CODE XREF=build_wcs_buffer+165
0000000000007a33         cmp        rbp, r12
0000000000007a36         jl         loc_7988

0000000000007a3c         jmp        loc_7a04
0000000000007a3e         align      64

                     loc_7a40:
0000000000007a40         mov        rax, qword [rbx+0x58]                       ; CODE XREF=build_wcs_buffer+138
0000000000007a44         cmp        qword [rbx+0x40], rax
0000000000007a48         jl         loc_7ae8

0000000000007a4e         nop

                     loc_7a50:
0000000000007a50         mov        rax, qword [rbx]                            ; CODE XREF=build_wcs_buffer+124
0000000000007a53         mov        rcx, qword [rbx+0x78]
0000000000007a57         add        rax, rbp
0000000000007a5a         add        rax, qword [rbx+0x28]
0000000000007a5e         test       rcx, rcx
0000000000007a61         movzx      edx, byte [rax]
0000000000007a64         mov        dword [rsp+0x98+var_8C], edx
0000000000007a68         jne        loc_7af1

                     loc_7a6e:
0000000000007a6e         mov        qword [rbx+0x20], r15                       ; CODE XREF=build_wcs_buffer+441
0000000000007a72         mov        eax, 0x1
0000000000007a77         jmp        loc_79cc
0000000000007a7c         align      128

                     loc_7a80:
0000000000007a80         mov        ecx, dword [rbx+0x90]                       ; CODE XREF=build_wcs_buffer+89
0000000000007a86         xor        eax, eax
0000000000007a88         lea        rsi, qword [rsp+0x98+var_88]
0000000000007a8d         test       ecx, ecx
0000000000007a8f         jg         loc_7ab1

0000000000007a91         jmp        loc_79a9
0000000000007a96         align      32

                     loc_7aa0:
0000000000007aa0         add        rax, 0x1                                    ; CODE XREF=build_wcs_buffer+411
0000000000007aa4         cmp        rdx, rax
0000000000007aa7         je         loc_79a9

0000000000007aad         mov        rdi, qword [rbx+0x78]

                     loc_7ab1:
0000000000007ab1         mov        rcx, qword [rbx]                            ; CODE XREF=build_wcs_buffer+335
0000000000007ab4         add        rcx, rbp
0000000000007ab7         add        rcx, rax
0000000000007aba         add        rcx, qword [rbx+0x28]
0000000000007abe         movzx      ecx, byte [rcx]
0000000000007ac1         movzx      ecx, byte [rdi+rcx]
0000000000007ac5         mov        rdi, qword [rbx+8]
0000000000007ac9         add        rdi, rbp
0000000000007acc         mov        byte [rdi+rax], cl
0000000000007acf         mov        byte [rsi+rax], cl
0000000000007ad2         lea        ecx, dword [rax+1]
0000000000007ad5         cmp        ecx, dword [rbx+0x90]
0000000000007adb         jl         loc_7aa0

0000000000007add         jmp        loc_79a9
0000000000007ae2         align      8

                     loc_7ae8:
0000000000007ae8         mov        qword [rbx+0x20], r15                       ; CODE XREF=build_wcs_buffer+264
0000000000007aec         jmp        loc_7a04

                     loc_7af1:
0000000000007af1         movzx      edx, byte [rcx+rdx]                         ; CODE XREF=build_wcs_buffer+296
0000000000007af5         mov        dword [rsp+0x98+var_8C], edx
0000000000007af9         jmp        loc_7a6e

                     loc_7afe:
0000000000007afe         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=build_wcs_buffer+218
                        ; endp
0000000000007b03         align      16                                          ; End of unwind block (FDE at 0x1892c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_88: int8_t, -136
        ;    var_90: int64_t, -144
        ;    var_94: int32_t, -148
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208


                     build_wcs_upper_buffer:
0000000000007b10         push       r15                                         ; Begin of unwind block (FDE at 0x18978), CODE XREF=extend_buffers+149, re_string_reconstruct+298, re_compile_internal+724
0000000000007b12         push       r14
0000000000007b14         mov        r14, rdi
0000000000007b17         push       r13
0000000000007b19         push       r12
0000000000007b1b         push       rbp
0000000000007b1c         push       rbx
0000000000007b1d         sub        rsp, 0xa8
0000000000007b24         mov        rbx, qword [rdi+0x58]
0000000000007b28         mov        r15, qword [rdi+0x30]
0000000000007b2c         mov        rax, qword [fs:0x28]
0000000000007b35         mov        qword [rsp+0xd8+var_40], rax
0000000000007b3d         xor        eax, eax
0000000000007b3f         cmp        qword [rdi+0x40], rbx
0000000000007b43         cmovle     rbx, qword [rdi+0x40]
0000000000007b48         cmp        byte [rdi+0x8a], 0x0
0000000000007b4f         jne        loc_7b5c

0000000000007b51         cmp        qword [rdi+0x78], 0x0
0000000000007b56         je         loc_7ce0

                     loc_7b5c:
0000000000007b5c         mov        r13, qword [r14+0x38]                       ; CODE XREF=build_wcs_upper_buffer+63, build_wcs_upper_buffer+471

                     loc_7b60:
0000000000007b60         cmp        r15, rbx                                    ; CODE XREF=build_wcs_upper_buffer+408, build_wcs_upper_buffer+450, build_wcs_upper_buffer+1169, build_wcs_upper_buffer+1184, build_wcs_upper_buffer+1459
0000000000007b63         jl         loc_7ba0

                     loc_7b65:
0000000000007b65         mov        qword [r14+0x30], r15                       ; CODE XREF=build_wcs_upper_buffer+1233
0000000000007b69         mov        qword [r14+0x38], r13
0000000000007b6d         xor        eax, eax

                     loc_7b6f:
0000000000007b6f         mov        rcx, qword [rsp+0xd8+var_40]                ; CODE XREF=build_wcs_upper_buffer+898, build_wcs_upper_buffer+1515
0000000000007b77         xor        rcx, qword [fs:0x28]
0000000000007b80         jne        loc_810a

0000000000007b86         add        rsp, 0xa8
0000000000007b8d         pop        rbx
0000000000007b8e         pop        rbp
0000000000007b8f         pop        r12
0000000000007b91         pop        r13
0000000000007b93         pop        r14
0000000000007b95         pop        r15
0000000000007b97         ret
                        ; endp
0000000000007b98         align      32

                     loc_7ba0:
0000000000007ba0         lea        rax, qword [r14+0x20]                       ; CODE XREF=build_wcs_upper_buffer+83
0000000000007ba4         mov        qword [rsp+0xd8+var_D0], rax
0000000000007ba9         mov        rax, rbx
0000000000007bac         sub        rax, r15
0000000000007baf         mov        qword [rsp+0xd8+var_C8], rax
0000000000007bb4         lea        rax, qword [rsp+0xd8+var_94]
0000000000007bb9         mov        qword [rsp+0xd8+var_B8], rax

                     loc_7bbe:
0000000000007bbe         mov        rdx, qword [r14+0x78]                       ; CODE XREF=build_wcs_upper_buffer+1051
0000000000007bc2         mov        rax, qword [r14+0x20]
0000000000007bc6         test       rdx, rdx
0000000000007bc9         mov        qword [rsp+0xd8+var_90], rax
0000000000007bce         jne        loc_7ed9

0000000000007bd4         mov        rbp, qword [r14+0x28]
0000000000007bd8         add        rbp, r13
0000000000007bdb         add        rbp, qword [r14]
0000000000007bde         mov        qword [rsp+0xd8+var_C0], rbp

                     loc_7be3:
0000000000007be3         mov        rcx, qword [rsp+0xd8+var_D0]                ; CODE XREF=build_wcs_upper_buffer+1040
0000000000007be8         mov        rdx, qword [rsp+0xd8+var_C8]
0000000000007bed         mov        rsi, qword [rsp+0xd8+var_C0]
0000000000007bf2         mov        rdi, qword [rsp+0xd8+var_B8]
0000000000007bf7         call       rpl_mbrtowc                                 ; rpl_mbrtowc
0000000000007bfc         mov        rbp, rax
0000000000007bff         lea        rax, qword [rax-1]
0000000000007c03         cmp        rax, 0xfffffffffffffffc
0000000000007c07         mov        qword [rsp+0xd8+var_B8], rax
0000000000007c0c         ja         loc_7f49

0000000000007c12         mov        edx, dword [rsp+0xd8+var_94]
0000000000007c16         mov        edi, edx                                    ; argument "__wc" for method j_towupper
0000000000007c18         mov        dword [rsp+0xd8+var_C8], edx
0000000000007c1c         call       j_towupper                                  ; towupper
0000000000007c21         mov        edx, dword [rsp+0xd8+var_C8]
0000000000007c25         mov        r12d, eax
0000000000007c28         mov        qword [rsp+0xd8+var_D0], r15
0000000000007c2d         cmp        edx, eax
0000000000007c2f         je         loc_7f30

0000000000007c35         lea        rcx, qword [rsp+0xd8+var_88]
0000000000007c3a         lea        rdx, qword [rsp+0xd8+var_90]                ; argument "__ps" for method j_wcrtomb
0000000000007c3f         mov        esi, eax                                    ; argument "__wc" for method j_wcrtomb
0000000000007c41         mov        rdi, rcx                                    ; argument "__s" for method j_wcrtomb
0000000000007c44         mov        qword [rsp+0xd8+var_C8], rcx
0000000000007c49         call       j_wcrtomb                                   ; wcrtomb
0000000000007c4e         cmp        rbp, rax
0000000000007c51         mov        r11, rax
0000000000007c54         mov        rcx, qword [rsp+0xd8+var_C8]
0000000000007c59         jne        loc_7fe6

0000000000007c5f         mov        rdi, qword [r14+8]
0000000000007c63         mov        rdx, rbp                                    ; argument "__n" for method j_memcpy
0000000000007c66         mov        rsi, rcx                                    ; argument "__src" for method j_memcpy
0000000000007c69         add        rdi, r15                                    ; argument "__dest" for method j_memcpy
0000000000007c6c         call       j_memcpy                                    ; memcpy

                     loc_7c71:
0000000000007c71         cmp        byte [r14+0x8c], 0x0                        ; CODE XREF=build_wcs_upper_buffer+1076
0000000000007c79         lea        rax, qword [rbp+r13]
0000000000007c7e         jne        loc_7fb5

                     loc_7c84:
0000000000007c84         add        r15, 0x1                                    ; CODE XREF=build_wcs_upper_buffer+1219
0000000000007c88         mov        rsi, qword [rsp+0xd8+var_D0]
0000000000007c8d         mov        rdx, qword [r14+0x10]
0000000000007c91         lea        rcx, qword [r15+rbp-1]
0000000000007c96         mov        r13, rax
0000000000007c99         cmp        r15, rcx
0000000000007c9c         lea        rax, qword [rsi*4]
0000000000007ca4         mov        dword [rdx+rsi*4], r12d
0000000000007ca8         jge        loc_7b60

0000000000007cae         lea        rax, qword [rdx+rax+4]
0000000000007cb3         lea        rdx, qword [rdx+rcx*4]
0000000000007cb7         nop        word [rax+rax]

                     loc_7cc0:
0000000000007cc0         mov        dword [rax], 0xffffffff                     ; CODE XREF=build_wcs_upper_buffer+445
0000000000007cc6         add        rax, 0x4
0000000000007cca         cmp        rdx, rax
0000000000007ccd         jne        loc_7cc0

0000000000007ccf         mov        r15, rcx
0000000000007cd2         jmp        loc_7b60
0000000000007cd7         align      32

                     loc_7ce0:
0000000000007ce0         cmp        byte [rdi+0x8c], 0x0                        ; CODE XREF=build_wcs_upper_buffer+70
0000000000007ce7         jne        loc_7b5c

0000000000007ced         cmp        r15, rbx
0000000000007cf0         jge        loc_7e88

0000000000007cf6         lea        rax, qword [rdi+0x20]
0000000000007cfa         mov        qword [rsp+0xd8+var_D0], rax
0000000000007cff         lea        rax, qword [rsp+0xd8+var_94]
0000000000007d04         mov        qword [rsp+0xd8+var_A8], rax
0000000000007d09         lea        rax, qword [rsp+0xd8+var_90]
0000000000007d0e         mov        qword [rsp+0xd8+var_A0], rax
0000000000007d13         lea        rax, qword [rsp+0xd8+var_88]
0000000000007d18         mov        qword [rsp+0xd8+var_B0], rax
0000000000007d1d         nop        dword [rax]

                     loc_7d20:
0000000000007d20         mov        rbp, qword [r14+0x28]                       ; CODE XREF=build_wcs_upper_buffer+765
0000000000007d24         mov        r13, r15
0000000000007d27         add        rbp, r15
0000000000007d2a         add        rbp, qword [r14]
0000000000007d2d         movzx      r12d, byte [rbp]
0000000000007d32         test       r12b, 0x80
0000000000007d36         jne        loc_7d4a

0000000000007d38         mov        rdi, qword [rsp+0xd8+var_D0]                ; argument "__ps" for method j_mbsinit
0000000000007d3d         call       j_mbsinit                                   ; mbsinit
0000000000007d42         test       eax, eax
0000000000007d44         jne        loc_7e38

                     loc_7d4a:
0000000000007d4a         mov        rax, qword [r14+0x20]                       ; CODE XREF=build_wcs_upper_buffer+550
0000000000007d4e         mov        rdi, qword [rsp+0xd8+var_A8]
0000000000007d53         mov        rdx, rbx
0000000000007d56         mov        rcx, qword [rsp+0xd8+var_D0]
0000000000007d5b         sub        rdx, r15
0000000000007d5e         mov        rsi, rbp
0000000000007d61         mov        qword [rsp+0xd8+var_C8], rdx
0000000000007d66         mov        qword [rsp+0xd8+var_90], rax
0000000000007d6b         mov        qword [rsp+0xd8+var_B8], rdi
0000000000007d70         call       rpl_mbrtowc                                 ; rpl_mbrtowc
0000000000007d75         mov        rbp, rax
0000000000007d78         lea        rax, qword [rax-1]
0000000000007d7c         cmp        rax, 0xfffffffffffffffc
0000000000007d80         ja         loc_7e68

0000000000007d86         mov        edx, dword [rsp+0xd8+var_94]
0000000000007d8a         mov        edi, edx                                    ; argument "__wc" for method j_towupper
0000000000007d8c         mov        dword [rsp+0xd8+var_C0], edx
0000000000007d90         call       j_towupper                                  ; towupper
0000000000007d95         mov        edx, dword [rsp+0xd8+var_C0]
0000000000007d99         mov        r12d, eax
0000000000007d9c         cmp        edx, eax
0000000000007d9e         je         loc_7e18

0000000000007da0         mov        rdx, qword [rsp+0xd8+var_A0]                ; argument "__ps" for method j_wcrtomb
0000000000007da5         mov        rdi, qword [rsp+0xd8+var_B0]                ; argument "__s" for method j_wcrtomb
0000000000007daa         mov        esi, eax                                    ; argument "__wc" for method j_wcrtomb
0000000000007dac         call       j_wcrtomb                                   ; wcrtomb
0000000000007db1         cmp        rbp, rax
0000000000007db4         jne        loc_7f28

0000000000007dba         mov        rdi, qword [r14+8]
0000000000007dbe         mov        rsi, qword [rsp+0xd8+var_B0]                ; argument "__src" for method j_memcpy
0000000000007dc3         mov        rdx, rbp                                    ; argument "__n" for method j_memcpy
0000000000007dc6         add        rdi, r15                                    ; argument "__dest" for method j_memcpy
0000000000007dc9         call       j_memcpy                                    ; memcpy

                     loc_7dce:
0000000000007dce         add        r15, 0x1                                    ; CODE XREF=build_wcs_upper_buffer+801
0000000000007dd2         mov        rdx, qword [r14+0x10]
0000000000007dd6         lea        rax, qword [r13*4]
0000000000007dde         lea        rcx, qword [r15+rbp-1]
0000000000007de3         cmp        r15, rcx
0000000000007de6         mov        dword [rdx+r13*4], r12d
0000000000007dea         jge        loc_7e0a

0000000000007dec         lea        rax, qword [rdx+rax+4]
0000000000007df1         lea        rdx, qword [rdx+rcx*4]
0000000000007df5         nop        dword [rax]

                     loc_7df8:
0000000000007df8         mov        dword [rax], 0xffffffff                     ; CODE XREF=build_wcs_upper_buffer+757
0000000000007dfe         add        rax, 0x4
0000000000007e02         cmp        rdx, rax
0000000000007e05         jne        loc_7df8

0000000000007e07         mov        r15, rcx

                     loc_7e0a:
0000000000007e0a         cmp        rbx, r15                                    ; CODE XREF=build_wcs_upper_buffer+730, build_wcs_upper_buffer+849, build_wcs_upper_buffer+949, build_wcs_upper_buffer+964
0000000000007e0d         jg         loc_7d20

0000000000007e13         jmp        loc_7e88
0000000000007e15         align      8

                     loc_7e18:
0000000000007e18         mov        rsi, qword [r14+0x28]                       ; CODE XREF=build_wcs_upper_buffer+654
0000000000007e1c         mov        rdi, qword [r14+8]
0000000000007e20         mov        rdx, rbp                                    ; argument "__n" for method j_memcpy
0000000000007e23         add        rsi, r15
0000000000007e26         add        rsi, qword [r14]                            ; argument "__src" for method j_memcpy
0000000000007e29         add        rdi, r15                                    ; argument "__dest" for method j_memcpy
0000000000007e2c         call       j_memcpy                                    ; memcpy
0000000000007e31         jmp        loc_7dce
0000000000007e33         align      8

                     loc_7e38:
0000000000007e38         call       j___ctype_toupper_loc                       ; __ctype_toupper_loc, CODE XREF=build_wcs_upper_buffer+564
0000000000007e3d         mov        rax, qword [rax]
0000000000007e40         mov        rdx, qword [r14+8]
0000000000007e44         mov        eax, dword [rax+r12*4]
0000000000007e48         mov        byte [rdx+r15], al
0000000000007e4c         mov        rdx, qword [r14+8]
0000000000007e50         mov        rax, qword [r14+0x10]
0000000000007e54         movzx      edx, byte [rdx+r15]
0000000000007e59         mov        dword [rax+r15*4], edx
0000000000007e5d         add        r15, 0x1
0000000000007e61         jmp        loc_7e0a
0000000000007e63         align      8

                     loc_7e68:
0000000000007e68         cmp        rax, 0xfffffffffffffffd                     ; CODE XREF=build_wcs_upper_buffer+624
0000000000007e6c         jne        loc_7ea0

0000000000007e6e         mov        rax, qword [r14+0x58]
0000000000007e72         cmp        qword [r14+0x40], rax
0000000000007e76         jge        loc_7ea0

0000000000007e78         mov        rax, qword [rsp+0xd8+var_90]
0000000000007e7d         mov        qword [r14+0x20], rax
0000000000007e81         nop        dword [rax]

                     loc_7e88:
0000000000007e88         mov        qword [r14+0x30], r15                       ; CODE XREF=build_wcs_upper_buffer+480, build_wcs_upper_buffer+771
0000000000007e8c         mov        qword [r14+0x38], r15
0000000000007e90         xor        eax, eax
0000000000007e92         jmp        loc_7b6f
0000000000007e97         align      32

                     loc_7ea0:
0000000000007ea0         mov        rax, qword [r14]                            ; CODE XREF=build_wcs_upper_buffer+860, build_wcs_upper_buffer+870
0000000000007ea3         mov        rdx, qword [r14+8]
0000000000007ea7         add        rax, r15
0000000000007eaa         add        rax, qword [r14+0x28]
0000000000007eae         movzx      eax, byte [rax]
0000000000007eb1         mov        byte [rdx+r15], al
0000000000007eb5         mov        rdx, qword [r14+0x10]
0000000000007eb9         add        r15, 0x1
0000000000007ebd         cmp        rbp, 0xffffffffffffffff
0000000000007ec1         mov        dword [rdx+r13*4], eax
0000000000007ec5         jne        loc_7e0a

0000000000007ecb         mov        rax, qword [rsp+0xd8+var_90]
0000000000007ed0         mov        qword [r14+0x20], rax
0000000000007ed4         jmp        loc_7e0a

                     loc_7ed9:
0000000000007ed9         mov        eax, dword [r14+0x90]                       ; CODE XREF=build_wcs_upper_buffer+190
0000000000007ee0         test       eax, eax
0000000000007ee2         jle        loc_8100

0000000000007ee8         mov        rdi, qword [r14+0x28]
0000000000007eec         lea        r11d, dword [rax-1]
0000000000007ef0         lea        rcx, qword [rsp+0xd8+var_88]
0000000000007ef5         xor        eax, eax
0000000000007ef7         add        rdi, r13
0000000000007efa         add        rdi, qword [r14]
0000000000007efd         jmp        loc_7f0a

                     loc_7eff:
0000000000007eff         add        rax, 0x1                                    ; CODE XREF=build_wcs_upper_buffer+1033
0000000000007f03         cmp        qword [rsp+0xd8+var_C8], rax
0000000000007f08         je         loc_7f1b

                     loc_7f0a:
0000000000007f0a         movzx      esi, byte [rdi+rax]                         ; CODE XREF=build_wcs_upper_buffer+1005
0000000000007f0e         cmp        r11, rax
0000000000007f11         movzx      esi, byte [rdx+rsi]
0000000000007f15         mov        byte [rcx+rax], sil
0000000000007f19         jne        loc_7eff

                     loc_7f1b:
0000000000007f1b         mov        qword [rsp+0xd8+var_C0], rcx                ; CODE XREF=build_wcs_upper_buffer+1016, build_wcs_upper_buffer+1525
0000000000007f20         jmp        loc_7be3
0000000000007f25         align      8

                     loc_7f28:
0000000000007f28         mov        r13, r15                                    ; CODE XREF=build_wcs_upper_buffer+676
0000000000007f2b         jmp        loc_7bbe

                     loc_7f30:
0000000000007f30         mov        rdi, qword [r14+8]                          ; CODE XREF=build_wcs_upper_buffer+287, build_wcs_upper_buffer+1242
0000000000007f34         mov        rsi, qword [rsp+0xd8+var_C0]                ; argument "__src" for method j_memcpy
0000000000007f39         mov        rdx, rbp                                    ; argument "__n" for method j_memcpy
0000000000007f3c         add        rdi, r15                                    ; argument "__dest" for method j_memcpy
0000000000007f3f         call       j_memcpy                                    ; memcpy
0000000000007f44         jmp        loc_7c71

                     loc_7f49:
0000000000007f49         cmp        qword [rsp+0xd8+var_B8], 0xfffffffffffffffd ; CODE XREF=build_wcs_upper_buffer+252
0000000000007f4f         jne        loc_7f5b

0000000000007f51         mov        rax, qword [r14+0x58]
0000000000007f55         cmp        qword [r14+0x40], rax
0000000000007f59         jl         loc_7fd8

                     loc_7f5b:
0000000000007f5b         mov        rax, qword [r14]                            ; CODE XREF=build_wcs_upper_buffer+1087
0000000000007f5e         mov        rdx, qword [r14+0x78]
0000000000007f62         add        rax, r13
0000000000007f65         add        rax, qword [r14+0x28]
0000000000007f69         test       rdx, rdx
0000000000007f6c         movzx      eax, byte [rax]
0000000000007f6f         jne        loc_811c

                     loc_7f75:
0000000000007f75         mov        rdx, qword [r14+8]                          ; CODE XREF=build_wcs_upper_buffer+1552
0000000000007f79         mov        rcx, r15
0000000000007f7c         mov        byte [rdx+r15], al
0000000000007f80         cmp        byte [r14+0x8c], 0x0
0000000000007f88         jne        loc_810f

                     loc_7f8e:
0000000000007f8e         mov        rdx, qword [r14+0x10]                       ; CODE XREF=build_wcs_upper_buffer+1543
0000000000007f92         add        r13, 0x1
0000000000007f96         add        r15, 0x1
0000000000007f9a         cmp        rbp, 0xffffffffffffffff
0000000000007f9e         mov        dword [rdx+rcx*4], eax
0000000000007fa1         jne        loc_7b60

0000000000007fa7         mov        rax, qword [rsp+0xd8+var_90]
0000000000007fac         mov        qword [r14+0x20], rax
0000000000007fb0         jmp        loc_7b60

                     loc_7fb5:
0000000000007fb5         mov        rdx, qword [r14+0x18]                       ; CODE XREF=build_wcs_upper_buffer+366
0000000000007fb9         mov        rcx, r15
0000000000007fbc         mov        r10, r13
0000000000007fbf         sub        rcx, r13
0000000000007fc2         lea        rdx, qword [rdx+rcx*8]

                     loc_7fc6:
0000000000007fc6         mov        qword [rdx+r10*8], r10                      ; CODE XREF=build_wcs_upper_buffer+1217
0000000000007fca         add        r10, 0x1
0000000000007fce         cmp        rax, r10
0000000000007fd1         jne        loc_7fc6

0000000000007fd3         jmp        loc_7c84

                     loc_7fd8:
0000000000007fd8         mov        rax, qword [rsp+0xd8+var_90]                ; CODE XREF=build_wcs_upper_buffer+1097, build_wcs_upper_buffer+1267
0000000000007fdd         mov        qword [r14+0x20], rax
0000000000007fe1         jmp        loc_7b65

                     loc_7fe6:
0000000000007fe6         cmp        rax, 0xffffffffffffffff                     ; CODE XREF=build_wcs_upper_buffer+329
0000000000007fea         je         loc_7f30

0000000000007ff0         lea        rax, qword [rax+r15]
0000000000007ff4         mov        rsi, rax
0000000000007ff7         mov        qword [rsp+0xd8+var_D0], rax
0000000000007ffc         mov        rax, qword [r14+0x40]
0000000000008000         cmp        rsi, rax                                    ; DATA XREF=peek_token+607
0000000000008003         ja         loc_7fd8

0000000000008005         cmp        qword [r14+0x18], 0x0
000000000000800a         je         loc_80c8

                     loc_8010:
0000000000008010         cmp        byte [r14+0x8c], 0x0                        ; CODE XREF=build_wcs_upper_buffer+1504
0000000000008018         jne        loc_803a

000000000000801a         test       r15, r15
000000000000801d         je         loc_8032

000000000000801f         mov        rdx, qword [r14+0x18]
0000000000008023         xor        eax, eax

                     loc_8025:
0000000000008025         mov        qword [rdx+rax*8], rax                      ; CODE XREF=build_wcs_upper_buffer+1312
0000000000008029         add        rax, 0x1
000000000000802d         cmp        rax, r15
0000000000008030         jne        loc_8025                                    ; DATA XREF=fetch_number+115, fetch_number+120

                     loc_8032:
0000000000008032         mov        byte [r14+0x8c], 0x1                        ; CODE XREF=build_wcs_upper_buffer+1293

                     loc_803a:
000000000000803a         mov        rdi, qword [r14+8]                          ; CODE XREF=build_wcs_upper_buffer+1288
000000000000803e         mov        rsi, rcx                                    ; argument "__src" for method j_memcpy
0000000000008041         mov        rdx, r11                                    ; argument "__n" for method j_memcpy
0000000000008044         mov        qword [rsp+0xd8+var_C8], r11
0000000000008049         add        rdi, r15                                    ; argument "__dest" for method j_memcpy
000000000000804c         call       j_memcpy                                    ; memcpy
0000000000008051         mov        rax, qword [r14+0x10]
0000000000008055         mov        r11, qword [rsp+0xd8+var_C8]
000000000000805a         lea        rcx, qword [rax+r15*4]
000000000000805e         mov        rax, qword [r14+0x18]
0000000000008062         cmp        r11, 0x1
0000000000008066         mov        dword [rcx], r12d
0000000000008069         lea        rsi, qword [rax+r15*8]
000000000000806d         mov        qword [rsi], r13
0000000000008070         jbe        loc_809a

0000000000008072         mov        eax, 0x1

                     loc_8077:
0000000000008077         mov        rdx, qword [rsp+0xd8+var_B8]                ; CODE XREF=build_wcs_upper_buffer+1416
000000000000807c         cmp        rax, rbp
000000000000807f         cmovb      rdx, rax
0000000000008083         add        rdx, r13
0000000000008086         mov        qword [rsi+rax*8], rdx
000000000000808a         mov        dword [rcx+rax*4], 0xffffffff
0000000000008091         add        rax, 0x1
0000000000008095         cmp        rax, r11
0000000000008098         jne        loc_8077

                     loc_809a:
000000000000809a         mov        rbx, qword [r14+0x58]                       ; CODE XREF=build_wcs_upper_buffer+1376
000000000000809e         sub        r11, rbp
00000000000080a1         add        rbx, r11
00000000000080a4         cmp        r13, qword [r14+0x60]
00000000000080a8         mov        qword [r14+0x58], rbx
00000000000080ac         jge        loc_80b2

00000000000080ae         add        qword [r14+0x68], r11

                     loc_80b2:
00000000000080b2         cmp        qword [r14+0x40], rbx                       ; CODE XREF=build_wcs_upper_buffer+1436
00000000000080b6         mov        r15, qword [rsp+0xd8+var_D0]
00000000000080bb         cmovle     rbx, qword [r14+0x40]
00000000000080c0         add        r13, rbp
00000000000080c3         jmp        loc_7b60

                     loc_80c8:
00000000000080c8         lea        rdi, qword [rax*8]                          ; argument "__size" for method j_malloc, CODE XREF=build_wcs_upper_buffer+1274
00000000000080d0         mov        qword [rsp+0xd8+var_C0], rcx
00000000000080d5         mov        qword [rsp+0xd8+var_C8], r11
00000000000080da         call       j_malloc                                    ; malloc
00000000000080df         test       rax, rax
00000000000080e2         mov        qword [r14+0x18], rax
00000000000080e6         mov        r11, qword [rsp+0xd8+var_C8]
00000000000080eb         mov        rcx, qword [rsp+0xd8+var_C0]
00000000000080f0         jne        loc_8010

00000000000080f6         mov        eax, 0xc
00000000000080fb         jmp        loc_7b6f

                     loc_8100:
0000000000008100         lea        rcx, qword [rsp+0xd8+var_88]                ; CODE XREF=build_wcs_upper_buffer+978
0000000000008105         jmp        loc_7f1b

                     loc_810a:
000000000000810a         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=build_wcs_upper_buffer+112
                        ; endp

                     loc_810f:
000000000000810f         mov        rdx, qword [r14+0x18]                       ; CODE XREF=build_wcs_upper_buffer+1144
0000000000008113         mov        qword [rdx+r15*8], r13
0000000000008117         jmp        loc_7f8e

                     loc_811c:
000000000000811c         movzx      eax, byte [rdx+rax]                         ; CODE XREF=build_wcs_upper_buffer+1119
0000000000008120         jmp        loc_7f75
0000000000008125         align      16                                          ; End of unwind block (FDE at 0x18978)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     extend_buffers:
0000000000008130         push       rbp                                         ; Begin of unwind block (FDE at 0x189c4), CODE XREF=clean_state_log_if_needed+38, clean_state_log_if_needed+85, transit_state_bkref.isra.34+2162, re_search_internal+3125
0000000000008131         push       rbx
0000000000008132         movabs     rdx, 0xffffffffffffffe
000000000000813c         sub        rsp, 0x8
0000000000008140         mov        rax, qword [rdi+0x40]
0000000000008144         cmp        rax, rdx
0000000000008147         ja         loc_8258

000000000000814d         mov        rdx, qword [rdi+0x58]
0000000000008151         add        rax, rax
0000000000008154         movsxd     rsi, esi
0000000000008157         mov        rbx, rdi
000000000000815a         cmp        rax, rdx
000000000000815d         cmovg      rax, rdx
0000000000008161         cmp        rax, rsi
0000000000008164         cmovge     rsi, rax
0000000000008168         call       re_string_realloc_buffers                   ; re_string_realloc_buffers
000000000000816d         test       eax, eax
000000000000816f         mov        ebp, eax
0000000000008171         jne        loc_822d

0000000000008177         mov        rdi, qword [rbx+0xb8]
000000000000817e         test       rdi, rdi
0000000000008181         je         loc_81a4

0000000000008183         mov        rax, qword [rbx+0x40]
0000000000008187         lea        rsi, qword [0x8+rax*8]                      ; argument "__size" for method j_realloc
000000000000818f         call       j_realloc                                   ; realloc
0000000000008194         test       rax, rax
0000000000008197         je         loc_8258

000000000000819d         mov        qword [rbx+0xb8], rax

                     loc_81a4:
00000000000081a4         cmp        byte [rbx+0x88], 0x0                        ; CODE XREF=extend_buffers+81
00000000000081ab         mov        eax, dword [rbx+0x90]
00000000000081b1         je         loc_81d0

00000000000081b3         cmp        eax, 0x1
00000000000081b6         mov        rdi, rbx
00000000000081b9         jle        loc_8270

00000000000081bf         add        rsp, 0x8
00000000000081c3         pop        rbx
00000000000081c4         pop        rbp
00000000000081c5         jmp        build_wcs_upper_buffer                      ; build_wcs_upper_buffer
                        ; endp
00000000000081ca         align      16

                     loc_81d0:
00000000000081d0         cmp        eax, 0x1                                    ; CODE XREF=extend_buffers+129
00000000000081d3         jg         loc_8240

00000000000081d5         mov        rcx, qword [rbx+0x78]
00000000000081d9         test       rcx, rcx
00000000000081dc         je         loc_822d

00000000000081de         mov        rsi, qword [rbx+0x58]
00000000000081e2         cmp        qword [rbx+0x40], rsi
00000000000081e6         cmovle     rsi, qword [rbx+0x40]
00000000000081eb         mov        rax, qword [rbx+0x30]
00000000000081ef         cmp        rsi, rax
00000000000081f2         jg         loc_8204

00000000000081f4         jmp        loc_8225
00000000000081f6         align      512

                     loc_8200:
0000000000008200         mov        rcx, qword [rbx+0x78]                       ; CODE XREF=extend_buffers+243

                     loc_8204:
0000000000008204         mov        rdx, qword [rbx]                            ; CODE XREF=extend_buffers+194
0000000000008207         add        rdx, rax
000000000000820a         add        rdx, qword [rbx+0x28]
000000000000820e         movzx      edx, byte [rdx]
0000000000008211         movzx      ecx, byte [rcx+rdx]
0000000000008215         mov        rdx, qword [rbx+8]
0000000000008219         mov        byte [rdx+rax], cl
000000000000821c         add        rax, 0x1
0000000000008220         cmp        rsi, rax
0000000000008223         jne        loc_8200

                     loc_8225:
0000000000008225         mov        qword [rbx+0x30], rax                       ; CODE XREF=extend_buffers+196
0000000000008229         mov        qword [rbx+0x38], rax

                     loc_822d:
000000000000822d         add        rsp, 0x8                                    ; CODE XREF=extend_buffers+65, extend_buffers+172
0000000000008231         mov        eax, ebp
0000000000008233         pop        rbx
0000000000008234         pop        rbp
0000000000008235         ret
                        ; endp
0000000000008236         align      64

                     loc_8240:
0000000000008240         mov        rdi, rbx                                    ; CODE XREF=extend_buffers+163
0000000000008243         call       build_wcs_buffer                            ; build_wcs_buffer
0000000000008248         add        rsp, 0x8
000000000000824c         mov        eax, ebp
000000000000824e         pop        rbx
000000000000824f         pop        rbp
0000000000008250         ret
                        ; endp
0000000000008251         align      8

                     loc_8258:
0000000000008258         mov        ebp, 0xc                                    ; CODE XREF=extend_buffers+23, extend_buffers+103
000000000000825d         add        rsp, 0x8
0000000000008261         mov        eax, ebp
0000000000008263         pop        rbx
0000000000008264         pop        rbp
0000000000008265         ret
                        ; endp
0000000000008266         align      16

                     loc_8270:
0000000000008270         call       build_upper_buffer                          ; build_upper_buffer, CODE XREF=extend_buffers+137
0000000000008275         add        rsp, 0x8
0000000000008279         mov        eax, ebp
000000000000827b         pop        rbx
000000000000827c         pop        rbp
000000000000827d         ret
                        ; endp
000000000000827e         align      128                                         ; End of unwind block (FDE at 0x189c4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     clean_state_log_if_needed:
0000000000008280         push       r12                                         ; Begin of unwind block (FDE at 0x18a20), CODE XREF=get_subexp_sub.isra.32+244, transit_state_bkref.isra.34+816, re_search_internal+3351
0000000000008282         push       rbp
0000000000008283         mov        rbp, rsi
0000000000008286         push       rbx
0000000000008287         mov        rax, qword [rdi+0x40]
000000000000828b         mov        rbx, rdi
000000000000828e         mov        r12, qword [rdi+0xc0]
0000000000008295         cmp        rax, rsi
0000000000008298         jg         loc_82c0

000000000000829a         cmp        rax, qword [rdi+0x58]
000000000000829e         jge        loc_82c0

00000000000082a0         lea        esi, dword [rbp+1]
00000000000082a3         mov        rdi, rbx
00000000000082a6         call       extend_buffers                              ; extend_buffers
00000000000082ab         test       eax, eax
00000000000082ad         jne        loc_82b6

                     loc_82af:
00000000000082af         cmp        r12, rbp                                    ; CODE XREF=clean_state_log_if_needed+71, clean_state_log_if_needed+77, clean_state_log_if_needed+92
00000000000082b2         jl         loc_82e0

                     loc_82b4:
00000000000082b4         xor        eax, eax                                    ; CODE XREF=clean_state_log_if_needed+132

                     loc_82b6:
00000000000082b6         pop        rbx                                         ; CODE XREF=clean_state_log_if_needed+45, clean_state_log_if_needed+94
00000000000082b7         pop        rbp
00000000000082b8         pop        r12
00000000000082ba         ret
                        ; endp
00000000000082bb         align      64

                     loc_82c0:
00000000000082c0         mov        rax, qword [rbx+0x30]                       ; CODE XREF=clean_state_log_if_needed+24, clean_state_log_if_needed+30
00000000000082c4         cmp        rax, rbp
00000000000082c7         jg         loc_82af

00000000000082c9         cmp        rax, qword [rbx+0x58]
00000000000082cd         jge        loc_82af

00000000000082cf         lea        esi, dword [rbp+1]
00000000000082d2         mov        rdi, rbx
00000000000082d5         call       extend_buffers                              ; extend_buffers
00000000000082da         test       eax, eax
00000000000082dc         je         loc_82af

00000000000082de         jmp        loc_82b6

                     loc_82e0:
00000000000082e0         mov        rax, qword [rbx+0xb8]                       ; CODE XREF=clean_state_log_if_needed+50
00000000000082e7         mov        rdx, rbp
00000000000082ea         xor        esi, esi                                    ; argument "__c" for method j_memset
00000000000082ec         sub        rdx, r12
00000000000082ef         shl        rdx, 0x3                                    ; argument "__n" for method j_memset
00000000000082f3         lea        rdi, qword [rax+r12*8+8]                    ; argument "__s" for method j_memset
00000000000082f8         call       j_memset                                    ; memset
00000000000082fd         mov        qword [rbx+0xc0], rbp
0000000000008304         jmp        loc_82b4
0000000000008306         align      16                                          ; End of unwind block (FDE at 0x18a20)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     free_charset:
0000000000008310         push       rbx                                         ; Begin of unwind block (FDE at 0x18a4c), CODE XREF=free_token+35, build_charclass_op+499, build_charclass_op+523, build_charclass_op+593, sub_127b0+1155, sub_127b0+2271
0000000000008311         mov        rbx, rdi
0000000000008314         mov        rdi, qword [rdi]                            ; argument "__ptr" for method j_free
0000000000008317         call       j_free                                      ; free
000000000000831c         mov        rdi, qword [rbx+8]                          ; argument "__ptr" for method j_free
0000000000008320         call       j_free                                      ; free
0000000000008325         mov        rdi, qword [rbx+0x10]                       ; argument "__ptr" for method j_free
0000000000008329         call       j_free                                      ; free
000000000000832e         mov        rdi, qword [rbx+0x18]                       ; argument "__ptr" for method j_free
0000000000008332         call       j_free                                      ; free
0000000000008337         mov        rdi, rbx                                    ; argument "__ptr" for method j_free
000000000000833a         pop        rbx
000000000000833b         jmp        j_free                                      ; free
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     free_token:
0000000000008340         mov        eax, dword [rdi+8]                          ; End of unwind block (FDE at 0x18a4c), Begin of unwind block (FDE at 0x18a68), CODE XREF=free_tree+8, free_dfa_content+50
0000000000008343         and        eax, 0x400ff
0000000000008348         cmp        eax, 0x6
000000000000834b         je         loc_8360

000000000000834d         cmp        eax, 0x3
0000000000008350         je         loc_8358

0000000000008352         ret
                        ; endp
0000000000008354         align      8

                     loc_8358:
0000000000008358         mov        rdi, qword [rdi]                            ; argument "__ptr" for method j_free, CODE XREF=free_token+16
000000000000835b         jmp        j_free                                      ; free
                        ; endp

                     loc_8360:
0000000000008360         mov        rdi, qword [rdi]                            ; CODE XREF=free_token+11
0000000000008363         jmp        free_charset                                ; free_charset
                        ; endp
0000000000008365         align      16                                          ; End of unwind block (FDE at 0x18a68)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     free_tree:
0000000000008370         lea        rdi, qword [rsi+0x28]                       ; Begin of unwind block (FDE at 0x18a7c), DATA XREF=sub_12040+81, sub_12040+764, sub_12040+1024, sub_12040+1118, parse_branch+313, parse_branch+336, parse_branch+353, parse_reg_exp+305
0000000000008374         sub        rsp, 0x8
0000000000008378         call       free_token                                  ; free_token
000000000000837d         xor        eax, eax
000000000000837f         add        rsp, 0x8
0000000000008383         ret
                        ; endp
0000000000008384         align      16                                          ; End of unwind block (FDE at 0x18a7c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72


                     re_dfa_add_node:
0000000000008390         push       r15                                         ; Begin of unwind block (FDE at 0x18a94), CODE XREF=duplicate_node+38, calc_first+30
0000000000008392         push       r14
0000000000008394         mov        r14, rsi
0000000000008397         push       r13
0000000000008399         push       r12
000000000000839b         push       rbp
000000000000839c         push       rbx
000000000000839d         mov        rbx, rdi
00000000000083a0         sub        rsp, 0x18
00000000000083a4         mov        rsi, qword [rdi+0x10]
00000000000083a8         mov        rbp, qword [rdi+8]
00000000000083ac         cmp        rsi, rbp
00000000000083af         jae        loc_8460

00000000000083b5         mov        r12, qword [rdi+0x18]
00000000000083b9         mov        rbp, qword [rdi+0x28]

                     loc_83bd:
00000000000083bd         mov        rax, rsi                                    ; CODE XREF=re_dfa_add_node+391
00000000000083c0         mov        ecx, edx
00000000000083c2         shl        rax, 0x4
00000000000083c6         add        rax, qword [rbx]
00000000000083c9         and        ecx, 0xfffc00ff
00000000000083cf         mov        qword [rax+8], rdx
00000000000083d3         mov        dword [rax+8], ecx
00000000000083d6         xor        ecx, ecx
00000000000083d8         cmp        dl, 0x6
00000000000083db         mov        qword [rax], r14
00000000000083de         sete       cl
00000000000083e1         cmp        dl, 0x5
00000000000083e4         jne        loc_83f2

00000000000083e6         xor        ecx, ecx
00000000000083e8         cmp        dword [rbx+0xb4], 0x1
00000000000083ef         setg       cl

                     loc_83f2:
00000000000083f2         movzx      edx, byte [rax+0xa]                         ; CODE XREF=re_dfa_add_node+84
00000000000083f6         shl        ecx, 0x4
00000000000083f9         pxor       xmm0, xmm0
00000000000083fd         and        edx, 0xffffffef
0000000000008400         or         edx, ecx                                    ; DATA XREF=peek_token+600, peek_token+969
0000000000008402         mov        byte [rax+0xa], dl
0000000000008405         mov        qword [r12+rsi*8], 0xffffffffffffffff
000000000000840d         mov        rax, qword [rbx+0x10]
0000000000008411         lea        rax, qword [rax+rax*2]
0000000000008415         lea        rax, qword [rbp+rax*8]
000000000000841a         movups     xmmword [rax], xmm0
000000000000841d         mov        qword [rax+0x10], 0x0
0000000000008425         mov        rax, qword [rbx+0x10]
0000000000008429         lea        rdx, qword [rax+rax*2]
000000000000842d         mov        rax, qword [rbx+0x30]
0000000000008431         lea        rax, qword [rax+rdx*8]
0000000000008435         movups     xmmword [rax], xmm0
0000000000008438         mov        qword [rax+0x10], 0x0
0000000000008440         mov        rax, qword [rbx+0x10]
0000000000008444         lea        rdx, qword [rax+1]
0000000000008448         mov        qword [rbx+0x10], rdx

                     loc_844c:
000000000000844c         add        rsp, 0x18                                   ; CODE XREF=re_dfa_add_node+457
0000000000008450         pop        rbx
0000000000008451         pop        rbp
0000000000008452         pop        r12
0000000000008454         pop        r13
0000000000008456         pop        r14
0000000000008458         pop        r15
000000000000845a         ret
                        ; endp
000000000000845b         align      32

                     loc_8460:
0000000000008460         lea        r13, qword [rbp+rbp]                        ; CODE XREF=re_dfa_add_node+31
0000000000008465         movabs     rax, 0xaaaaaaaaaaaaaaa
000000000000846f         cmp        r13, rax
0000000000008472         ja         loc_8552

0000000000008478         mov        rdi, qword [rdi]                            ; argument "__ptr" for method j_realloc
000000000000847b         mov        rsi, rbp
000000000000847e         mov        qword [rsp+0x48+var_40], rdx
0000000000008483         shl        rsi, 0x5                                    ; argument "__size" for method j_realloc
0000000000008487         call       j_realloc                                   ; realloc
000000000000848c         test       rax, rax
000000000000848f         je         loc_8552

0000000000008495         mov        r15, rbp
0000000000008498         mov        rdi, qword [rbx+0x18]                       ; argument "__ptr" for method j_realloc
000000000000849c         mov        qword [rbx], rax
000000000000849f         shl        r15, 0x4
00000000000084a3         mov        rsi, r15                                    ; argument "__size" for method j_realloc
00000000000084a6         call       j_realloc                                   ; realloc
00000000000084ab         mov        rdi, qword [rbx+0x20]                       ; argument "__ptr" for method j_realloc
00000000000084af         mov        rsi, r15                                    ; argument "__size" for method j_realloc
00000000000084b2         lea        r15, qword [r13+rbp*4]
00000000000084b7         mov        r12, rax
00000000000084ba         shl        r15, 0x3
00000000000084be         call       j_realloc                                   ; realloc
00000000000084c3         mov        rdi, qword [rbx+0x28]                       ; argument "__ptr" for method j_realloc
00000000000084c7         mov        rsi, r15                                    ; argument "__size" for method j_realloc
00000000000084ca         mov        qword [rsp+0x48+var_48], rax
00000000000084ce         call       j_realloc                                   ; realloc
00000000000084d3         mov        rdi, qword [rbx+0x30]                       ; argument "__ptr" for method j_realloc
00000000000084d7         mov        rsi, r15                                    ; argument "__size" for method j_realloc
00000000000084da         mov        rbp, rax
00000000000084dd         call       j_realloc                                   ; realloc
00000000000084e2         test       r12, r12
00000000000084e5         mov        rcx, qword [rsp+0x48+var_48]
00000000000084e9         je         loc_8520

00000000000084eb         test       rcx, rcx
00000000000084ee         je         loc_8520

00000000000084f0         test       rbp, rbp
00000000000084f3         je         loc_8520

00000000000084f5         test       rax, rax
00000000000084f8         mov        rdx, qword [rsp+0x48+var_40]
00000000000084fd         je         loc_8520

00000000000084ff         mov        qword [rbx+0x18], r12
0000000000008503         mov        qword [rbx+0x20], rcx
0000000000008507         mov        qword [rbx+0x28], rbp
000000000000850b         mov        qword [rbx+0x30], rax
000000000000850f         mov        qword [rbx+8], r13
0000000000008513         mov        rsi, qword [rbx+0x10]
0000000000008517         jmp        loc_83bd
000000000000851c         align      32

                     loc_8520:
0000000000008520         mov        rdi, r12                                    ; argument "__ptr" for method j_free, CODE XREF=re_dfa_add_node+345, re_dfa_add_node+350, re_dfa_add_node+355, re_dfa_add_node+365
0000000000008523         mov        qword [rsp+0x48+var_40], rax
0000000000008528         mov        qword [rsp+0x48+var_48], rcx
000000000000852c         call       j_free                                      ; free
0000000000008531         mov        rcx, qword [rsp+0x48+var_48]
0000000000008535         mov        rdi, rcx                                    ; argument "__ptr" for method j_free
0000000000008538         call       j_free                                      ; free
000000000000853d         mov        rdi, rbp                                    ; argument "__ptr" for method j_free
0000000000008540         call       j_free                                      ; free
0000000000008545         mov        rax, qword [rsp+0x48+var_40]
000000000000854a         mov        rdi, rax                                    ; argument "__ptr" for method j_free
000000000000854d         call       j_free                                      ; free

                     loc_8552:
0000000000008552         mov        rax, 0xffffffffffffffff                     ; CODE XREF=re_dfa_add_node+226, re_dfa_add_node+255
0000000000008559         jmp        loc_844c
000000000000855e         align      32                                          ; End of unwind block (FDE at 0x18a94)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     duplicate_node:
0000000000008560         push       r13                                         ; Begin of unwind block (FDE at 0x18ae0), CODE XREF=duplicate_node_closure+258, duplicate_node_closure+328, duplicate_node_closure+437, duplicate_node_closure+542
0000000000008562         push       r12
0000000000008564         mov        r13, rsi
0000000000008567         push       rbp
0000000000008568         push       rbx
0000000000008569         shl        r13, 0x4
000000000000856d         mov        rbp, rsi
0000000000008570         mov        r12d, edx
0000000000008573         mov        rbx, rdi
0000000000008576         sub        rsp, 0x8
000000000000857a         mov        rax, qword [rdi]
000000000000857d         mov        rsi, qword [rax+r13]
0000000000008581         mov        rdx, qword [rax+r13+8]
0000000000008586         call       re_dfa_add_node                             ; re_dfa_add_node
000000000000858b         cmp        rax, 0xffffffffffffffff
000000000000858f         je         loc_85f4

0000000000008591         mov        edi, r12d
0000000000008594         mov        r8, qword [rbx]
0000000000008597         mov        rsi, rax
000000000000859a         and        di, 0x3ff
000000000000859f         shl        rsi, 0x4
00000000000085a3         mov        ecx, edi
00000000000085a5         and        ecx, 0x3ff
00000000000085ab         add        rsi, r8
00000000000085ae         shl        ecx, 0x8
00000000000085b1         mov        edx, ecx
00000000000085b3         mov        ecx, dword [rsi+8]
00000000000085b6         and        ecx, 0xfffc00ff
00000000000085bc         or         ecx, edx
00000000000085be         mov        dword [rsi+8], ecx
00000000000085c1         mov        edx, dword [r8+r13+8]
00000000000085c6         and        ecx, 0xfffc00ff
00000000000085cc         shr        edx, 0x8
00000000000085cf         or         edx, edi
00000000000085d1         and        edx, 0x3ff
00000000000085d7         shl        edx, 0x8
00000000000085da         or         edx, ecx
00000000000085dc         mov        ecx, edx
00000000000085de         mov        dword [rsi+8], edx
00000000000085e1         shr        ecx, 0x10
00000000000085e4         mov        edx, ecx
00000000000085e6         or         edx, 0x4
00000000000085e9         mov        byte [rsi+0xa], dl
00000000000085ec         mov        rdx, qword [rbx+0x20]
00000000000085f0         mov        qword [rdx+rax*8], rbp

                     loc_85f4:
00000000000085f4         add        rsp, 0x8                                    ; CODE XREF=duplicate_node+47
00000000000085f8         pop        rbx
00000000000085f9         pop        rbp
00000000000085fa         pop        r12
00000000000085fc         pop        r13
00000000000085fe         ret
                        ; endp
00000000000085ff         align      512                                         ; End of unwind block (FDE at 0x18ae0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72


                     duplicate_node_closure:
0000000000008600         push       r15                                         ; Begin of unwind block (FDE at 0x18b18), CODE XREF=duplicate_node_closure+378, calc_eclosure_iter+618
0000000000008602         push       r14
0000000000008604         mov        r9, rsi
0000000000008607         push       r13
0000000000008609         push       r12
000000000000860b         mov        r14, rdi
000000000000860e         push       rbp
000000000000860f         push       rbx
0000000000008610         mov        r13, rdx
0000000000008613         mov        ebp, r8d
0000000000008616         sub        rsp, 0x18
000000000000861a         mov        qword [rsp+0x48+var_40], rcx

                     loc_861f:
000000000000861f         mov        r8, qword [r14]                             ; CODE XREF=duplicate_node_closure+293, duplicate_node_closure+481
0000000000008622         mov        rax, r9
0000000000008625         mov        rdi, qword [r14+0x28]
0000000000008629         shl        rax, 0x4
000000000000862d         mov        r12, r13
0000000000008630         add        rax, r8
0000000000008633         cmp        byte [rax+8], 0x4
0000000000008637         je         loc_87f0

000000000000863d         lea        r12, qword [r9+r9*2]
0000000000008641         shl        r12, 0x3
0000000000008645         lea        rsi, qword [rdi+r12]
0000000000008649         mov        rcx, qword [rsi+8]
000000000000864d         test       rcx, rcx
0000000000008650         je         loc_8849

0000000000008656         lea        rbx, qword [r13+r13*2]
000000000000865b         mov        rsi, qword [rsi+0x10]
000000000000865f         shl        rbx, 0x3
0000000000008663         add        rdi, rbx
0000000000008666         cmp        rcx, 0x1
000000000000866a         mov        r15, qword [rsi]
000000000000866d         mov        qword [rdi+8], 0x0
0000000000008675         je         loc_8790

000000000000867b         mov        rdx, qword [r14+0x10]
000000000000867f         lea        rsi, qword [rdx-1]
0000000000008683         mov        rax, rsi
0000000000008686         shl        rax, 0x4
000000000000868a         add        rax, r8
000000000000868d         test       byte [rax+0xa], 0x4
0000000000008691         je         loc_8740

0000000000008697         test       rsi, rsi
000000000000869a         jle        loc_8740

00000000000086a0         shl        rdx, 0x4
00000000000086a4         sub        r8, rax
00000000000086a7         mov        rcx, qword [r14+0x20]
00000000000086ab         lea        r8, qword [r8+rdx-0x20]
00000000000086b0         jmp        loc_86ca
00000000000086b2         align      8

                     loc_86b8:
00000000000086b8         add        rax, r8                                     ; CODE XREF=duplicate_node_closure+206, duplicate_node_closure+222
00000000000086bb         sub        rsi, 0x1
00000000000086bf         test       byte [rax+0xa], 0x4
00000000000086c3         je         loc_8740

00000000000086c5         test       rsi, rsi
00000000000086c8         jle        loc_8740

                     loc_86ca:
00000000000086ca         cmp        qword [rcx+rsi*8], r15                      ; CODE XREF=duplicate_node_closure+176
00000000000086ce         jne        loc_86b8

00000000000086d0         mov        edx, dword [rax+8]
00000000000086d3         shr        edx, 0x8
00000000000086d6         and        edx, 0x3ff
00000000000086dc         cmp        ebp, edx
00000000000086de         jne        loc_86b8

00000000000086e0         call       re_node_set_insert                          ; re_node_set_insert
00000000000086e5         test       al, al
00000000000086e7         je         loc_872b

                     loc_86e9:
00000000000086e9         mov        rax, qword [r14+0x28]                       ; CODE XREF=duplicate_node_closure+385
00000000000086ed         mov        edx, ebp
00000000000086ef         mov        rdi, r14
00000000000086f2         mov        rax, qword [rax+r12+0x10]
00000000000086f7         mov        r9, qword [rax+8]
00000000000086fb         mov        rsi, r9
00000000000086fe         mov        qword [rsp+0x48+var_48], r9
0000000000008702         call       duplicate_node                              ; duplicate_node
0000000000008707         cmp        rax, 0xffffffffffffffff
000000000000870b         mov        r13, rax
000000000000870e         je         loc_872b

                     loc_8710:
0000000000008710         add        rbx, qword [r14+0x28]                       ; CODE XREF=duplicate_node_closure+580
0000000000008714         mov        rsi, r13
0000000000008717         mov        rdi, rbx
000000000000871a         call       re_node_set_insert                          ; re_node_set_insert
000000000000871f         test       al, al
0000000000008721         mov        r9, qword [rsp+0x48+var_48]
0000000000008725         jne        loc_861f

                     loc_872b:
000000000000872b         mov        eax, 0xc                                    ; CODE XREF=duplicate_node_closure+231, duplicate_node_closure+270, duplicate_node_closure+340, duplicate_node_closure+359, duplicate_node_closure+449, duplicate_node_closure+472, duplicate_node_closure+558, duplicate_node_closure+624

                     loc_8730:
0000000000008730         add        rsp, 0x18                                   ; CODE XREF=duplicate_node_closure+391, duplicate_node_closure+599, duplicate_node_closure+618
0000000000008734         pop        rbx
0000000000008735         pop        rbp
0000000000008736         pop        r12
0000000000008738         pop        r13
000000000000873a         pop        r14
000000000000873c         pop        r15
000000000000873e         ret
                        ; endp
000000000000873f         align      64

                     loc_8740:
0000000000008740         mov        edx, ebp                                    ; CODE XREF=duplicate_node_closure+145, duplicate_node_closure+154, duplicate_node_closure+195, duplicate_node_closure+200
0000000000008742         mov        rsi, r15
0000000000008745         mov        rdi, r14
0000000000008748         call       duplicate_node                              ; duplicate_node
000000000000874d         cmp        rax, 0xffffffffffffffff
0000000000008751         mov        r13, rax
0000000000008754         je         loc_872b

0000000000008756         mov        rdi, qword [r14+0x28]
000000000000875a         mov        rsi, r13
000000000000875d         add        rdi, rbx
0000000000008760         call       re_node_set_insert                          ; re_node_set_insert
0000000000008765         test       al, al
0000000000008767         je         loc_872b

0000000000008769         mov        rcx, qword [rsp+0x48+var_40]
000000000000876e         mov        r8d, ebp
0000000000008771         mov        rdx, r13
0000000000008774         mov        rsi, r15
0000000000008777         mov        rdi, r14
000000000000877a         call       duplicate_node_closure                      ; duplicate_node_closure
000000000000877f         test       eax, eax
0000000000008781         je         loc_86e9

0000000000008787         jmp        loc_8730
0000000000008789         align      16

                     loc_8790:
0000000000008790         cmp        r9, qword [rsp+0x48+var_40]                 ; CODE XREF=duplicate_node_closure+117
0000000000008795         jne        loc_87a0

0000000000008797         cmp        r9, r13
000000000000879a         jne        loc_885c

                     loc_87a0:
00000000000087a0         mov        eax, dword [rax+8]                          ; CODE XREF=duplicate_node_closure+405
00000000000087a3         mov        rsi, r15
00000000000087a6         mov        rdi, r14
00000000000087a9         shr        eax, 0x8
00000000000087ac         and        eax, 0x3ff
00000000000087b1         or         ebp, eax
00000000000087b3         mov        edx, ebp
00000000000087b5         call       duplicate_node                              ; duplicate_node
00000000000087ba         cmp        rax, 0xffffffffffffffff
00000000000087be         mov        r13, rax
00000000000087c1         je         loc_872b

00000000000087c7         add        rbx, qword [r14+0x28]
00000000000087cb         mov        rsi, rax
00000000000087ce         mov        rdi, rbx
00000000000087d1         call       re_node_set_insert                          ; re_node_set_insert
00000000000087d6         test       al, al
00000000000087d8         je         loc_872b

00000000000087de         mov        r9, r15
00000000000087e1         jmp        loc_861f
00000000000087e6         align      16

                     loc_87f0:
00000000000087f0         mov        rax, qword [r14+0x18]                       ; CODE XREF=duplicate_node_closure+55
00000000000087f4         lea        rbx, qword [r13+r13*2]
00000000000087f9         lea        r15, qword [r9*8]
0000000000008801         mov        edx, ebp
0000000000008803         shl        rbx, 0x3
0000000000008807         mov        r9, qword [rax+r9*8]
000000000000880b         mov        qword [rdi+rbx+8], 0x0
0000000000008814         mov        rdi, r14
0000000000008817         mov        rsi, r9
000000000000881a         mov        qword [rsp+0x48+var_48], r9
000000000000881e         call       duplicate_node                              ; duplicate_node
0000000000008823         cmp        rax, 0xffffffffffffffff
0000000000008827         mov        r13, rax
000000000000882a         mov        r9, qword [rsp+0x48+var_48]
000000000000882e         je         loc_872b

0000000000008834         mov        rax, qword [r14+0x18]
0000000000008838         mov        qword [rsp+0x48+var_48], r9
000000000000883c         mov        rcx, qword [rax+r15]
0000000000008840         mov        qword [rax+r12*8], rcx
0000000000008844         jmp        loc_8710

                     loc_8849:
0000000000008849         mov        rax, qword [r14+0x18]                       ; CODE XREF=duplicate_node_closure+80
000000000000884d         mov        rcx, qword [rax+r9*8]
0000000000008851         mov        qword [rax+r13*8], rcx
0000000000008855         xor        eax, eax
0000000000008857         jmp        loc_8730

                     loc_885c:
000000000000885c         mov        rsi, r15                                    ; CODE XREF=duplicate_node_closure+410
000000000000885f         call       re_node_set_insert                          ; re_node_set_insert
0000000000008864         mov        edx, eax
0000000000008866         xor        eax, eax
0000000000008868         test       dl, dl
000000000000886a         jne        loc_8730

0000000000008870         jmp        loc_872b
0000000000008875         align      128                                         ; End of unwind block (FDE at 0x18b18)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     free_state:
0000000000008880         push       rbx                                         ; Begin of unwind block (FDE at 0x18b64), CODE XREF=free_dfa_content+252, re_acquire_state_context+529, re_acquire_state+487
0000000000008881         mov        rbx, rdi
0000000000008884         mov        rdi, qword [rdi+0x30]                       ; argument "__ptr" for method j_free
0000000000008888         call       j_free                                      ; free
000000000000888d         mov        rdi, qword [rbx+0x48]                       ; argument "__ptr" for method j_free
0000000000008891         call       j_free                                      ; free
0000000000008896         mov        rax, qword [rbx+0x50]
000000000000889a         lea        rdx, qword [rbx+8]
000000000000889e         cmp        rax, rdx
00000000000088a1         je         loc_88b5

00000000000088a3         mov        rdi, qword [rax+0x10]                       ; argument "__ptr" for method j_free
00000000000088a7         call       j_free                                      ; free
00000000000088ac         mov        rdi, qword [rbx+0x50]                       ; argument "__ptr" for method j_free
00000000000088b0         call       j_free                                      ; free

                     loc_88b5:
00000000000088b5         mov        rdi, qword [rbx+0x18]                       ; argument "__ptr" for method j_free, CODE XREF=free_state+33
00000000000088b9         call       j_free                                      ; free
00000000000088be         mov        rdi, qword [rbx+0x60]                       ; argument "__ptr" for method j_free
00000000000088c2         call       j_free                                      ; free
00000000000088c7         mov        rdi, qword [rbx+0x58]                       ; argument "__ptr" for method j_free
00000000000088cb         call       j_free                                      ; free
00000000000088d0         mov        rdi, rbx                                    ; argument "__ptr" for method j_free
00000000000088d3         pop        rbx
00000000000088d4         jmp        j_free                                      ; free
                        ; endp
00000000000088d9         align      32                                          ; End of unwind block (FDE at 0x18b64)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_string_destruct:
00000000000088e0         push       rbx                                         ; Begin of unwind block (FDE at 0x18b80), CODE XREF=re_search_internal+2932, re_compile_internal+887, sub_14120+983
00000000000088e1         mov        rbx, rdi
00000000000088e4         mov        rdi, qword [rdi+0x10]                       ; argument "__ptr" for method j_free
00000000000088e8         call       j_free                                      ; free
00000000000088ed         mov        rdi, qword [rbx+0x18]                       ; argument "__ptr" for method j_free
00000000000088f1         call       j_free                                      ; free
00000000000088f6         cmp        byte [rbx+0x8b], 0x0
00000000000088fd         jne        loc_8908

00000000000088ff         pop        rbx
0000000000008900         ret
                        ; endp
0000000000008901         align      8

                     loc_8908:
0000000000008908         mov        rdi, qword [rbx+8]                          ; argument "__ptr" for method j_free, CODE XREF=re_string_destruct+29
000000000000890c         pop        rbx
000000000000890d         jmp        j_free                                      ; free
                        ; endp
0000000000008912         align      32                                          ; End of unwind block (FDE at 0x18b80)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     free_dfa_content:
0000000000008920         push       r14                                         ; Begin of unwind block (FDE at 0x18ba0), CODE XREF=re_compile_internal+895, rpl_regfree+12
0000000000008922         push       r13
0000000000008924         push       r12
0000000000008926         mov        r12, rdi
0000000000008929         push       rbp
000000000000892a         push       rbx
000000000000892b         mov        rdi, qword [rdi]
000000000000892e         test       rdi, rdi
0000000000008931         je         loc_895e

0000000000008933         cmp        qword [r12+0x10], 0x0
0000000000008939         je         loc_895e

000000000000893b         xor        ebx, ebx
000000000000893d         jmp        loc_8944
000000000000893f         align      64

                     loc_8940:
0000000000008940         mov        rdi, qword [r12]                            ; CODE XREF=free_dfa_content+60

                     loc_8944:
0000000000008944         mov        rax, rbx                                    ; CODE XREF=free_dfa_content+29
0000000000008947         add        rbx, 0x1
000000000000894b         shl        rax, 0x4
000000000000894f         add        rdi, rax
0000000000008952         call       free_token                                  ; free_token
0000000000008957         cmp        qword [r12+0x10], rbx
000000000000895c         ja         loc_8940

                     loc_895e:
000000000000895e         mov        rdi, qword [r12+0x18]                       ; argument "__ptr" for method j_free, CODE XREF=free_dfa_content+17, free_dfa_content+25
0000000000008963         call       j_free                                      ; free
0000000000008968         cmp        qword [r12+0x10], 0x0
000000000000896e         je         loc_89c3

0000000000008970         xor        ebx, ebx
0000000000008972         xor        ebp, ebp
0000000000008974         nop        dword [rax]

                     loc_8978:
0000000000008978         mov        rax, qword [r12+0x30]                       ; CODE XREF=free_dfa_content+161
000000000000897d         test       rax, rax
0000000000008980         je         loc_898c

0000000000008982         mov        rdi, qword [rax+rbx+0x10]                   ; argument "__ptr" for method j_free
0000000000008987         call       j_free                                      ; free

                     loc_898c:
000000000000898c         mov        rax, qword [r12+0x38]                       ; CODE XREF=free_dfa_content+96
0000000000008991         test       rax, rax
0000000000008994         je         loc_89a0

0000000000008996         mov        rdi, qword [rax+rbx+0x10]                   ; argument "__ptr" for method j_free
000000000000899b         call       j_free                                      ; free

                     loc_89a0:
00000000000089a0         mov        rax, qword [r12+0x28]                       ; CODE XREF=free_dfa_content+116
00000000000089a5         test       rax, rax
00000000000089a8         je         loc_89b4

00000000000089aa         mov        rdi, qword [rax+rbx+0x10]                   ; argument "__ptr" for method j_free
00000000000089af         call       j_free                                      ; free

                     loc_89b4:
00000000000089b4         add        rbp, 0x1                                    ; CODE XREF=free_dfa_content+136
00000000000089b8         add        rbx, 0x18
00000000000089bc         cmp        qword [r12+0x10], rbp
00000000000089c1         ja         loc_8978

                     loc_89c3:
00000000000089c3         mov        rdi, qword [r12+0x28]                       ; argument "__ptr" for method j_free, CODE XREF=free_dfa_content+78
00000000000089c8         call       j_free                                      ; free
00000000000089cd         mov        rdi, qword [r12+0x30]                       ; argument "__ptr" for method j_free
00000000000089d2         call       j_free                                      ; free
00000000000089d7         mov        rdi, qword [r12+0x38]                       ; argument "__ptr" for method j_free
00000000000089dc         call       j_free                                      ; free
00000000000089e1         mov        rdi, qword [r12]                            ; argument "__ptr" for method j_free
00000000000089e5         call       j_free                                      ; free
00000000000089ea         mov        rdi, qword [r12+0x40]
00000000000089ef         test       rdi, rdi
00000000000089f2         je         loc_8a47

00000000000089f4         xor        r14d, r14d
00000000000089f7         xor        r13d, r13d
00000000000089fa         nop        word [rax+rax]

                     loc_8a00:
0000000000008a00         lea        rbp, qword [rdi+r14]                        ; CODE XREF=free_dfa_content+293
0000000000008a04         cmp        qword [rbp], 0x0
0000000000008a09         jle        loc_8a27

0000000000008a0b         xor        ebx, ebx
0000000000008a0d         nop        dword [rax]

                     loc_8a10:
0000000000008a10         mov        rax, qword [rbp+0x10]                       ; CODE XREF=free_dfa_content+261
0000000000008a14         mov        rdi, qword [rax+rbx*8]
0000000000008a18         add        rbx, 0x1
0000000000008a1c         call       free_state                                  ; free_state
0000000000008a21         cmp        qword [rbp], rbx
0000000000008a25         jg         loc_8a10

                     loc_8a27:
0000000000008a27         mov        rdi, qword [rbp+0x10]                       ; argument "__ptr" for method j_free, CODE XREF=free_dfa_content+233
0000000000008a2b         add        r13, 0x1
0000000000008a2f         add        r14, 0x18
0000000000008a33         call       j_free                                      ; free
0000000000008a38         cmp        qword [r12+0x88], r13
0000000000008a40         mov        rdi, qword [r12+0x40]
0000000000008a45         jae        loc_8a00

                     loc_8a47:
0000000000008a47         call       j_free                                      ; free, CODE XREF=free_dfa_content+210
0000000000008a4c         mov        rdi, qword [r12+0x78]
0000000000008a51         lea        rax, qword [utf8_sb_map]                    ; utf8_sb_map
0000000000008a58         cmp        rdi, rax
0000000000008a5b         je         loc_8a62

0000000000008a5d         call       j_free                                      ; free

                     loc_8a62:
0000000000008a62         mov        rdi, qword [r12+0xe0]                       ; argument "__ptr" for method j_free, CODE XREF=free_dfa_content+315
0000000000008a6a         call       j_free                                      ; free
0000000000008a6f         pop        rbx
0000000000008a70         mov        rdi, r12                                    ; argument "__ptr" for method j_free
0000000000008a73         pop        rbp
0000000000008a74         pop        r12
0000000000008a76         pop        r13
0000000000008a78         pop        r14
0000000000008a7a         jmp        j_free                                      ; free
                        ; endp
0000000000008a7f         align      128                                         ; End of unwind block (FDE at 0x18ba0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     match_ctx_clean:
0000000000008a80         push       r14                                         ; Begin of unwind block (FDE at 0x18bdc), CODE XREF=re_search_internal+3892, re_search_internal+5268
0000000000008a82         push       r13
0000000000008a84         mov        r14, rdi
0000000000008a87         push       r12
0000000000008a89         push       rbp
0000000000008a8a         push       rbx
0000000000008a8b         cmp        qword [rdi+0xe8], 0x0
0000000000008a93         jle        loc_8b19

0000000000008a99         xor        r13d, r13d
0000000000008a9c         nop        dword [rax]

                     loc_8aa0:
0000000000008aa0         mov        rax, qword [r14+0xf8]                       ; CODE XREF=match_ctx_clean+151
0000000000008aa7         mov        r12, qword [rax+r13*8]
0000000000008aab         cmp        qword [r12+0x20], 0x0
0000000000008ab1         jle        loc_8add

0000000000008ab3         xor        ebx, ebx
0000000000008ab5         nop        dword [rax]

                     loc_8ab8:
0000000000008ab8         mov        rax, qword [r12+0x28]                       ; CODE XREF=match_ctx_clean+91
0000000000008abd         mov        rbp, qword [rax+rbx*8]
0000000000008ac1         add        rbx, 0x1
0000000000008ac5         mov        rdi, qword [rbp+0x20]                       ; argument "__ptr" for method j_free
0000000000008ac9         call       j_free                                      ; free
0000000000008ace         mov        rdi, rbp                                    ; argument "__ptr" for method j_free
0000000000008ad1         call       j_free                                      ; free
0000000000008ad6         cmp        qword [r12+0x20], rbx
0000000000008adb         jg         loc_8ab8

                     loc_8add:
0000000000008add         mov        rdi, qword [r12+0x28]                       ; argument "__ptr" for method j_free, CODE XREF=match_ctx_clean+49
0000000000008ae2         call       j_free                                      ; free
0000000000008ae7         mov        rax, qword [r12+0x10]
0000000000008aec         test       rax, rax
0000000000008aef         je         loc_8b04

0000000000008af1         mov        rdi, qword [rax+0x10]                       ; argument "__ptr" for method j_free
0000000000008af5         call       j_free                                      ; free
0000000000008afa         mov        rdi, qword [r12+0x10]                       ; argument "__ptr" for method j_free
0000000000008aff         call       j_free                                      ; free

                     loc_8b04:
0000000000008b04         mov        rdi, r12                                    ; argument "__ptr" for method j_free, CODE XREF=match_ctx_clean+111
0000000000008b07         add        r13, 0x1
0000000000008b0b         call       j_free                                      ; free
0000000000008b10         cmp        qword [r14+0xe8], r13
0000000000008b17         jg         loc_8aa0

                     loc_8b19:
0000000000008b19         pop        rbx                                         ; CODE XREF=match_ctx_clean+19
0000000000008b1a         mov        qword [r14+0xe8], 0x0
0000000000008b25         mov        qword [r14+0xc8], 0x0
0000000000008b30         pop        rbp
0000000000008b31         pop        r12
0000000000008b33         pop        r13
0000000000008b35         pop        r14
0000000000008b37         ret
                        ; endp
0000000000008b38         align      64                                          ; End of unwind block (FDE at 0x18bdc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_string_char_size_at.part.0:
0000000000008b40         mov        rcx, qword [rdi+0x30]                       ; Begin of unwind block (FDE at 0x18c18), CODE XREF=check_node_accept_bytes.isra.31+58, parse_bracket_element.constprop.37+59, parse_bracket_element.constprop.37+463
0000000000008b44         lea        rax, qword [rsi+1]
0000000000008b48         cmp        rax, rcx
0000000000008b4b         jge        loc_8b88

0000000000008b4d         mov        rdx, qword [rdi+0x10]
0000000000008b51         lea        rdi, qword [rax*4]
0000000000008b59         cmp        dword [rdx+rax*4], 0xffffffff
0000000000008b5d         jne        loc_8b88

0000000000008b5f         sub        rcx, rsi
0000000000008b62         lea        rsi, qword [rdx+rdi-4]
0000000000008b67         mov        edx, 0x2
0000000000008b6c         jmp        loc_8b7b
0000000000008b6e         align      16

                     loc_8b70:
0000000000008b70         add        rdx, 0x1                                    ; CODE XREF=re_string_char_size_at.part.0+64
0000000000008b74         cmp        dword [rsi+rdx*4-4], 0xffffffff
0000000000008b79         jne        loc_8b8d

                     loc_8b7b:
0000000000008b7b         cmp        rdx, rcx                                    ; CODE XREF=re_string_char_size_at.part.0+44
0000000000008b7e         mov        eax, edx
0000000000008b80         jne        loc_8b70

0000000000008b82         ret
                        ; endp
0000000000008b84         align      8

                     loc_8b88:
0000000000008b88         mov        eax, 0x1                                    ; CODE XREF=re_string_char_size_at.part.0+11, re_string_char_size_at.part.0+29

                     loc_8b8d:
0000000000008b8d         ret                                                    ; CODE XREF=re_string_char_size_at.part.0+57
                        ; endp
0000000000008b8f         align      16                                          ; End of unwind block (FDE at 0x18c18)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_node_set_compare.part.2:
0000000000008b90         mov        rdx, qword [rdi+8]                          ; Begin of unwind block (FDE at 0x18c2c), CODE XREF=re_acquire_state_context+163, re_acquire_state+128
0000000000008b94         xor        eax, eax
0000000000008b96         cmp        rdx, qword [rsi+8]
0000000000008b9a         je         loc_8ba0

0000000000008b9c         ret
                        ; endp
0000000000008b9e         align      32

                     loc_8ba0:
0000000000008ba0         lea        rax, qword [rdx-1]                          ; CODE XREF=re_node_set_compare.part.2+10
0000000000008ba4         lea        rdx, qword [rax*8]
0000000000008bac         jmp        loc_8bcd
0000000000008bae         align      16

                     loc_8bb0:
0000000000008bb0         mov        rcx, qword [rdi+0x10]                       ; CODE XREF=re_node_set_compare.part.2+64
0000000000008bb4         mov        r8, qword [rcx+rdx]
0000000000008bb8         mov        rcx, qword [rsi+0x10]
0000000000008bbc         mov        rcx, qword [rcx+rdx]
0000000000008bc0         sub        rdx, 0x8
0000000000008bc4         cmp        r8, rcx
0000000000008bc7         jne        loc_8be0

0000000000008bc9         sub        rax, 0x1

                     loc_8bcd:
0000000000008bcd         test       rax, rax                                    ; CODE XREF=re_node_set_compare.part.2+28
0000000000008bd0         jns        loc_8bb0

0000000000008bd2         mov        eax, 0x1
0000000000008bd7         ret
                        ; endp
0000000000008bd8         align      32

                     loc_8be0:
0000000000008be0         xor        eax, eax                                    ; CODE XREF=re_node_set_compare.part.2+55
0000000000008be2         ret
                        ; endp
0000000000008be3         align      16                                          ; End of unwind block (FDE at 0x18c2c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_node_set_contains.isra.3:
0000000000008bf0         xor        eax, eax                                    ; Begin of unwind block (FDE at 0x18c40), CODE XREF=check_arrival_expand_ecl_sub+43, expand_bkref_cache+371, expand_bkref_cache+537, expand_bkref_cache+599, sub_epsilon_src_nodes+124, sub_epsilon_src_nodes+264, sub_epsilon_src_nodes+305, sub_epsilon_src_nodes+350, sub_epsilon_src_nodes+372, sub_epsilon_src_nodes+435, sub_epsilon_src_nodes+456
0000000000008bf2         test       rdi, rdi
0000000000008bf5         jle        loc_8c35

0000000000008bf7         mov        r8, qword [rsi]
0000000000008bfa         sub        rdi, 0x1
0000000000008bfe         xor        esi, esi

                     loc_8c00:
0000000000008c00         cmp        rsi, rdi                                    ; CODE XREF=re_node_set_contains.isra.3+103
0000000000008c03         jae        loc_8c2d

0000000000008c05         lea        rcx, qword [rsi+rdi]
0000000000008c09         shr        rcx, 0x1
0000000000008c0c         cmp        rdx, qword [r8+rcx*8]
0000000000008c10         jle        loc_8c28

0000000000008c12         jmp        loc_8c40
0000000000008c14         align      8

                     loc_8c18:
0000000000008c18         lea        rax, qword [rsi+rcx]                        ; CODE XREF=re_node_set_contains.isra.3+59
0000000000008c1c         shr        rax, 0x1
0000000000008c1f         cmp        qword [r8+rax*8], rdx
0000000000008c23         jl         loc_8c50

0000000000008c25         mov        rcx, rax

                     loc_8c28:
0000000000008c28         cmp        rsi, rcx                                    ; CODE XREF=re_node_set_contains.isra.3+32
0000000000008c2b         jb         loc_8c18

                     loc_8c2d:
0000000000008c2d         xor        eax, eax                                    ; CODE XREF=re_node_set_contains.isra.3+19
0000000000008c2f         cmp        rdx, qword [r8+rsi*8]
0000000000008c33         je         loc_8c60

                     loc_8c35:
0000000000008c35         ret                                                    ; CODE XREF=re_node_set_contains.isra.3+5
                        ; endp
0000000000008c37         align      64

                     loc_8c40:
0000000000008c40         mov        rax, rcx                                    ; CODE XREF=re_node_set_contains.isra.3+34
0000000000008c43         mov        rcx, rdi
0000000000008c46         nop        word [cs:rax+rax]

                     loc_8c50:
0000000000008c50         lea        rsi, qword [rax+1]                          ; CODE XREF=re_node_set_contains.isra.3+51
0000000000008c54         mov        rdi, rcx
0000000000008c57         jmp        loc_8c00
0000000000008c59         align      32

                     loc_8c60:
0000000000008c60         lea        rax, qword [rsi+1]                          ; CODE XREF=re_node_set_contains.isra.3+67
0000000000008c64         ret
                        ; endp
0000000000008c65         align      16                                          ; End of unwind block (FDE at 0x18c40)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     check_arrival_expand_ecl_sub:
0000000000008c70         push       r15                                         ; Begin of unwind block (FDE at 0x18c54), CODE XREF=check_arrival_expand_ecl_sub+224, check_arrival_expand_ecl+216
0000000000008c72         push       r14
0000000000008c74         lea        r14, qword [rsi+0x10]
0000000000008c78         push       r13
0000000000008c7a         push       r12
0000000000008c7c         mov        r15, rcx
0000000000008c7f         push       rbp
0000000000008c80         push       rbx
0000000000008c81         mov        r12, rdi
0000000000008c84         mov        rbp, rsi
0000000000008c87         mov        rbx, rdx
0000000000008c8a         mov        r13d, r8d
0000000000008c8d         sub        rsp, 0x8

                     loc_8c91:
0000000000008c91         mov        rdi, qword [rbp+8]                          ; CODE XREF=check_arrival_expand_ecl_sub+131
0000000000008c95         mov        rdx, rbx
0000000000008c98         mov        rsi, r14
0000000000008c9b         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
0000000000008ca0         test       rax, rax
0000000000008ca3         jne        loc_8d10

0000000000008ca5         mov        rax, rbx
0000000000008ca8         shl        rax, 0x4
0000000000008cac         add        rax, qword [r12]
0000000000008cb0         movzx      edx, byte [rax+8]
0000000000008cb4         cmp        edx, r13d
0000000000008cb7         jne        loc_8cbe

0000000000008cb9         cmp        qword [rax], r15
0000000000008cbc         je         loc_8cf8

                     loc_8cbe:
0000000000008cbe         mov        rsi, rbx                                    ; CODE XREF=check_arrival_expand_ecl_sub+71
0000000000008cc1         mov        rdi, rbp
0000000000008cc4         call       re_node_set_insert                          ; re_node_set_insert
0000000000008cc9         test       al, al
0000000000008ccb         je         loc_8d28

0000000000008ccd         lea        rbx, qword [rbx+rbx*2]
0000000000008cd1         mov        rdx, qword [r12+0x28]
0000000000008cd6         shl        rbx, 0x3
0000000000008cda         add        rdx, rbx
0000000000008cdd         mov        rax, qword [rdx+8]
0000000000008ce1         test       rax, rax
0000000000008ce4         je         loc_8d10

0000000000008ce6         cmp        rax, 0x2
0000000000008cea         mov        rdx, qword [rdx+0x10]
0000000000008cee         je         loc_8d40

                     loc_8cf0:
0000000000008cf0         mov        rbx, qword [rdx]                            ; CODE XREF=check_arrival_expand_ecl_sub+243
0000000000008cf3         jmp        loc_8c91
0000000000008cf5         align      8

                     loc_8cf8:
0000000000008cf8         cmp        r13d, 0x9                                   ; CODE XREF=check_arrival_expand_ecl_sub+76
0000000000008cfc         jne        loc_8d10

0000000000008cfe         mov        rsi, rbx
0000000000008d01         mov        rdi, rbp
0000000000008d04         call       re_node_set_insert                          ; re_node_set_insert
0000000000008d09         test       al, al
0000000000008d0b         je         loc_8d28

0000000000008d0d         nop        dword [rax]

                     loc_8d10:
0000000000008d10         xor        eax, eax                                    ; CODE XREF=check_arrival_expand_ecl_sub+51, check_arrival_expand_ecl_sub+116, check_arrival_expand_ecl_sub+140

                     loc_8d12:
0000000000008d12         add        rsp, 0x8                                    ; CODE XREF=check_arrival_expand_ecl_sub+231
0000000000008d16         pop        rbx
0000000000008d17         pop        rbp
0000000000008d18         pop        r12
0000000000008d1a         pop        r13
0000000000008d1c         pop        r14
0000000000008d1e         pop        r15
0000000000008d20         ret
                        ; endp
0000000000008d21         align      8

                     loc_8d28:
0000000000008d28         add        rsp, 0x8                                    ; CODE XREF=check_arrival_expand_ecl_sub+91, check_arrival_expand_ecl_sub+155
0000000000008d2c         mov        eax, 0xc
0000000000008d31         pop        rbx
0000000000008d32         pop        rbp
0000000000008d33         pop        r12
0000000000008d35         pop        r13
0000000000008d37         pop        r14
0000000000008d39         pop        r15
0000000000008d3b         ret
                        ; endp
0000000000008d3c         align      64

                     loc_8d40:
0000000000008d40         mov        rdx, qword [rdx+8]                          ; CODE XREF=check_arrival_expand_ecl_sub+126
0000000000008d44         mov        r8d, r13d
0000000000008d47         mov        rcx, r15
0000000000008d4a         mov        rsi, rbp
0000000000008d4d         mov        rdi, r12
0000000000008d50         call       check_arrival_expand_ecl_sub                ; check_arrival_expand_ecl_sub
0000000000008d55         test       eax, eax
0000000000008d57         jne        loc_8d12

0000000000008d59         mov        rax, qword [r12+0x28]
0000000000008d5e         mov        rdx, qword [rax+rbx+0x10]
0000000000008d63         jmp        loc_8cf0
0000000000008d65         align      16                                          ; End of unwind block (FDE at 0x18c54)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_node_set_remove_at.isra.4.part.5:
0000000000008d70         mov        rax, qword [rdi]                            ; Begin of unwind block (FDE at 0x18cb8), CODE XREF=re_acquire_state_context+473, sub_epsilon_src_nodes+477, update_cur_sifted_state+1890
0000000000008d73         cmp        rax, rdx
0000000000008d76         jle        loc_8da2

0000000000008d78         sub        rax, 0x1
0000000000008d7c         cmp        rdx, rax
0000000000008d7f         mov        qword [rdi], rax
0000000000008d82         jge        loc_8da2

0000000000008d84         mov        rax, qword [rsi]
0000000000008d87         nop        word [rax+rax]

                     loc_8d90:
0000000000008d90         mov        rcx, qword [rax+rdx*8+8]                    ; CODE XREF=re_node_set_remove_at.isra.4.part.5+48
0000000000008d95         mov        qword [rax+rdx*8], rcx
0000000000008d99         add        rdx, 0x1
0000000000008d9d         cmp        rdx, qword [rdi]
0000000000008da0         jl         loc_8d90

                     loc_8da2:
0000000000008da2         ret                                                    ; CODE XREF=re_node_set_remove_at.isra.4.part.5+6, re_node_set_remove_at.isra.4.part.5+18
                        ; endp
0000000000008da4         align      16                                          ; End of unwind block (FDE at 0x18cb8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     optimize_subexps:
0000000000008db0         movzx      eax, byte [rsi+0x30]                        ; Begin of unwind block (FDE at 0x18ccc), DATA XREF=re_compile_internal+1553
0000000000008db4         cmp        al, 0x4
0000000000008db6         je         loc_8e10

0000000000008db8         cmp        al, 0x11
0000000000008dba         je         loc_8dc0

                     loc_8dbc:
0000000000008dbc         xor        eax, eax                                    ; CODE XREF=optimize_subexps+23, optimize_subexps+29, optimize_subexps+74, optimize_subexps+93, optimize_subexps+106
0000000000008dbe         ret
                        ; endp
0000000000008dbf         align      64

                     loc_8dc0:
0000000000008dc0         mov        rax, qword [rsi+8]                          ; CODE XREF=optimize_subexps+10
0000000000008dc4         test       rax, rax
0000000000008dc7         je         loc_8dbc

0000000000008dc9         cmp        byte [rax+0x30], 0x11
0000000000008dcd         jne        loc_8dbc

0000000000008dcf         mov        rcx, qword [rax+0x28]
0000000000008dd3         mov        rax, qword [rax+8]
0000000000008dd7         test       rax, rax
0000000000008dda         mov        qword [rsi+8], rax
0000000000008dde         je         loc_8de3

0000000000008de0         mov        qword [rax], rsi

                     loc_8de3:
0000000000008de3         mov        rax, qword [rdi+0xe0]                       ; CODE XREF=optimize_subexps+46
0000000000008dea         mov        rdx, qword [rsi+0x28]
0000000000008dee         cmp        rcx, 0x3f
0000000000008df2         mov        rdx, qword [rax+rdx*8]
0000000000008df6         mov        qword [rax+rcx*8], rdx
0000000000008dfa         jg         loc_8dbc

0000000000008dfc         mov        rax, 0xfffffffffffffffe
0000000000008e03         rol        rax, cl
0000000000008e06         and        qword [rdi+0xa0], rax
0000000000008e0d         jmp        loc_8dbc
0000000000008e0f         align      16

                     loc_8e10:
0000000000008e10         mov        rax, qword [rdi+0xe0]                       ; CODE XREF=optimize_subexps+6
0000000000008e17         test       rax, rax
0000000000008e1a         je         loc_8dbc

0000000000008e1c         movsxd     rdx, dword [rsi+0x28]
0000000000008e20         mov        rcx, qword [rax+rdx*8]
0000000000008e24         mov        eax, 0x1
0000000000008e29         shl        eax, cl
0000000000008e2b         mov        qword [rsi+0x28], rcx
0000000000008e2f         cdqe
0000000000008e31         or         qword [rdi+0xa0], rax
0000000000008e38         xor        eax, eax
0000000000008e3a         ret
                        ; endp
0000000000008e3b         align      64                                          ; End of unwind block (FDE at 0x18ccc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     calc_next:
0000000000008e40         movzx      eax, byte [rsi+0x30]                        ; Begin of unwind block (FDE at 0x18ce0), DATA XREF=re_compile_internal+1689
0000000000008e44         mov        rdx, qword [rsi+8]
0000000000008e48         cmp        al, 0xb
0000000000008e4a         je         loc_8e90

0000000000008e4c         cmp        al, 0x10
0000000000008e4e         je         loc_8e78

0000000000008e50         test       rdx, rdx
0000000000008e53         je         loc_8e5d

0000000000008e55         mov        rax, qword [rsi+0x20]
0000000000008e59         mov        qword [rdx+0x20], rax

                     loc_8e5d:
0000000000008e5d         mov        rax, qword [rsi+0x10]                       ; CODE XREF=calc_next+19
0000000000008e61         test       rax, rax
0000000000008e64         je         loc_8e6e

0000000000008e66         mov        rdx, qword [rsi+0x20]
0000000000008e6a         mov        qword [rax+0x20], rdx

                     loc_8e6e:
0000000000008e6e         xor        eax, eax                                    ; CODE XREF=calc_next+36
0000000000008e70         ret
                        ; endp
0000000000008e71         align      8

                     loc_8e78:
0000000000008e78         mov        rax, qword [rsi+0x10]                       ; CODE XREF=calc_next+14
0000000000008e7c         mov        rcx, qword [rax+0x18]
0000000000008e80         mov        qword [rdx+0x20], rcx
0000000000008e84         mov        rdx, qword [rsi+0x20]
0000000000008e88         mov        qword [rax+0x20], rdx
0000000000008e8c         xor        eax, eax
0000000000008e8e         ret
                        ; endp
0000000000008e8f         align      16

                     loc_8e90:
0000000000008e90         mov        qword [rdx+0x20], rsi                       ; CODE XREF=calc_next+10
0000000000008e94         xor        eax, eax
0000000000008e96         ret
                        ; endp
0000000000008e97         align      32                                          ; End of unwind block (FDE at 0x18ce0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112


                     check_dst_limits.isra.13:
0000000000008ea0         push       r15                                         ; Begin of unwind block (FDE at 0x18cf4), CODE XREF=sift_states_backward+396, update_cur_sifted_state+1699
0000000000008ea2         push       r14
0000000000008ea4         push       r13
0000000000008ea6         push       r12
0000000000008ea8         push       rbp
0000000000008ea9         push       rbx
0000000000008eaa         xor        ebx, ebx
0000000000008eac         sub        rsp, 0x48
0000000000008eb0         mov        rax, qword [rdi+0x98]
0000000000008eb7         mov        r15, qword [rdi+0xc8]
0000000000008ebe         mov        r12, qword [rsp+0x78+arg_0]
0000000000008ec6         mov        qword [rsp+0x78+var_70], rax
0000000000008ecb         mov        rbp, r15

                     loc_8ece:
0000000000008ece         cmp        rbx, rbp                                    ; CODE XREF=check_dst_limits.isra.13+519
0000000000008ed1         jge        loc_8f2b

0000000000008ed3         lea        rax, qword [rbx+rbp]
0000000000008ed7         mov        r13, qword [rdi+0xd8]
0000000000008ede         mov        r10, rax
0000000000008ee1         shr        r10, 0x3f
0000000000008ee5         add        r10, rax
0000000000008ee8         sar        r10, 0x1
0000000000008eeb         lea        rax, qword [r10+r10*4]
0000000000008eef         cmp        r8, qword [r13+rax*8+8]
0000000000008ef4         jle        loc_8f26

0000000000008ef6         jmp        loc_9090
0000000000008efb         align      256

                     loc_8f00:
0000000000008f00         lea        r11, qword [rbx+r10]                        ; CODE XREF=check_dst_limits.isra.13+137
0000000000008f04         mov        rax, r11
0000000000008f07         shr        rax, 0x3f
0000000000008f0b         add        rax, r11
0000000000008f0e         sar        rax, 0x1
0000000000008f11         lea        r11, qword [rax+rax*4]
0000000000008f15         mov        r14, rax
0000000000008f18         cmp        qword [r13+r11*8+8], r8
0000000000008f1d         jl         loc_90a0

0000000000008f23         mov        r10, rax

                     loc_8f26:
0000000000008f26         cmp        rbx, r10                                    ; CODE XREF=check_dst_limits.isra.13+84
0000000000008f29         jl         loc_8f00

                     loc_8f2b:
0000000000008f2b         cmp        r15, rbx                                    ; CODE XREF=check_dst_limits.isra.13+49
0000000000008f2e         jle        loc_90d0

0000000000008f34         mov        r11, qword [rdi+0xd8]
0000000000008f3b         lea        rax, qword [rbx+rbx*4]
0000000000008f3f         lea        rax, qword [r11+rax*8]
0000000000008f43         cmp        r8, qword [rax+8]
0000000000008f47         mov        rax, 0xffffffffffffffff
0000000000008f4e         cmovne     rbx, rax

                     loc_8f52:
0000000000008f52         mov        rax, r15                                    ; CODE XREF=sub_90b0+39
0000000000008f55         xor        ebp, ebp

                     loc_8f57:
0000000000008f57         cmp        rbp, rax                                    ; CODE XREF=sub_90b0+23
0000000000008f5a         jge        loc_8fb4

0000000000008f5c         lea        r11, qword [rbp+rax]
0000000000008f61         mov        r10, r11
0000000000008f64         shr        r10, 0x3f
0000000000008f68         add        r10, r11
0000000000008f6b         mov        r11, qword [rdi+0xd8]
0000000000008f72         sar        r10, 0x1
0000000000008f75         lea        r13, qword [r10+r10*4]
0000000000008f79         cmp        r12, qword [r11+r13*8+8]
0000000000008f7e         jle        loc_8faf

0000000000008f80         jmp        sub_90b0                                    ; sub_90b0
                        ; endp
0000000000008f85         align      8

                     loc_8f88:
0000000000008f88         lea        r13, qword [rbp+r10]                        ; CODE XREF=check_dst_limits.isra.13+274
0000000000008f8d         mov        rax, r13
0000000000008f90         shr        rax, 0x3f
0000000000008f94         add        rax, r13
0000000000008f97         sar        rax, 0x1
0000000000008f9a         lea        r13, qword [rax+rax*4]
0000000000008f9e         mov        r14, rax
0000000000008fa1         cmp        qword [r11+r13*8+8], r12
0000000000008fa6         jl         loc_90c0

0000000000008fac         mov        r10, rax

                     loc_8faf:
0000000000008faf         cmp        rbp, r10                                    ; CODE XREF=check_dst_limits.isra.13+222
0000000000008fb2         jl         loc_8f88

                     loc_8fb4:
0000000000008fb4         cmp        r15, rbp                                    ; CODE XREF=check_dst_limits.isra.13+186
0000000000008fb7         jle        loc_90e0

0000000000008fbd         mov        r10, qword [rdi+0xd8]
0000000000008fc4         lea        rax, qword [rbp+rbp*4]
0000000000008fc9         lea        rax, qword [r10+rax*8]
0000000000008fcd         cmp        r12, qword [rax+8]
0000000000008fd1         mov        rax, 0xffffffffffffffff
0000000000008fd8         cmovne     rbp, rax

                     loc_8fdc:
0000000000008fdc         cmp        qword [rsi], 0x0                            ; CODE XREF=sub_90b0+55
0000000000008fe0         jle        loc_9102

0000000000008fe6         mov        qword [rsp+0x78+var_48], rbp
0000000000008feb         mov        qword [rsp+0x78+var_58], r9
0000000000008ff0         mov        r13, rdi
0000000000008ff3         mov        qword [rsp+0x78+var_60], r8
0000000000008ff8         mov        qword [rsp+0x78+var_68], rcx
0000000000008ffd         xor        r14d, r14d
0000000000009000         mov        qword [rsp+0x78+var_40], rsi
0000000000009005         mov        qword [rsp+0x78+var_50], rbx
000000000000900a         mov        rbp, rdx
000000000000900d         mov        r15, r12

                     loc_9010:
0000000000009010         mov        rax, qword [rbp]                            ; CODE XREF=sub_90b0+76
0000000000009014         mov        rdx, qword [r13+0xd8]
000000000000901b         mov        rdi, r13
000000000000901e         mov        r9, qword [rsp+0x78+var_50]
0000000000009023         mov        r8, qword [rsp+0x78+var_60]
0000000000009028         mov        rcx, qword [rsp+0x78+var_68]
000000000000902d         mov        rsi, qword [rax+r14*8]
0000000000009031         lea        rax, qword [rsi+rsi*4]
0000000000009035         lea        rax, qword [rdx+rax*8]
0000000000009039         mov        rdx, qword [rsp+0x78+var_70]
000000000000903e         mov        rax, qword [rax]
0000000000009041         shl        rax, 0x4
0000000000009045         add        rax, qword [rdx]
0000000000009048         mov        r12, qword [rax]
000000000000904b         mov        rdx, r12
000000000000904e         call       check_dst_limits_calc_pos                   ; check_dst_limits_calc_pos
0000000000009053         mov        ebx, eax
0000000000009055         mov        rax, qword [rbp]
0000000000009059         mov        r9, qword [rsp+0x78+var_48]
000000000000905e         mov        rcx, qword [rsp+0x78+var_58]
0000000000009063         mov        r8, r15
0000000000009066         mov        rdx, r12
0000000000009069         mov        rdi, r13
000000000000906c         mov        rsi, qword [rax+r14*8]
0000000000009070         call       check_dst_limits_calc_pos                   ; check_dst_limits_calc_pos
0000000000009075         cmp        ebx, eax
0000000000009077         je         loc_90f0

0000000000009079         mov        eax, 0x1

                     loc_907e:
000000000000907e         add        rsp, 0x48                                   ; CODE XREF=sub_90b0+84
0000000000009082         pop        rbx
0000000000009083         pop        rbp
0000000000009084         pop        r12
0000000000009086         pop        r13
0000000000009088         pop        r14
000000000000908a         pop        r15
000000000000908c         ret
                        ; endp
000000000000908d         align      16

                     loc_9090:
0000000000009090         mov        r14, r10                                    ; CODE XREF=check_dst_limits.isra.13+86
0000000000009093         mov        r10, rbp
0000000000009096         nop        word [cs:rax+rax]

                     loc_90a0:
00000000000090a0         lea        rbx, qword [r14+1]                          ; CODE XREF=check_dst_limits.isra.13+125
00000000000090a4         mov        rbp, r10
00000000000090a7         jmp        loc_8ece
00000000000090ac         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_90b0:
00000000000090b0         mov        r14, r10                                    ; CODE XREF=check_dst_limits.isra.13+224
00000000000090b3         mov        r10, rax
00000000000090b6         nop        word [cs:rax+rax]
                        ; endp

                     loc_90c0:
00000000000090c0         lea        rbp, qword [r14+1]                          ; CODE XREF=check_dst_limits.isra.13+262
00000000000090c4         mov        rax, r10
00000000000090c7         jmp        loc_8f57
00000000000090cc         align      16

                     loc_90d0:
00000000000090d0         mov        rbx, 0xffffffffffffffff                     ; CODE XREF=check_dst_limits.isra.13+142
00000000000090d7         jmp        loc_8f52
00000000000090dc         align      32

                     loc_90e0:
00000000000090e0         mov        rbp, 0xffffffffffffffff                     ; CODE XREF=check_dst_limits.isra.13+279
00000000000090e7         jmp        loc_8fdc
00000000000090ec         align      16

                     loc_90f0:
00000000000090f0         mov        rax, qword [rsp+0x78+var_40]                ; CODE XREF=check_dst_limits.isra.13+471
00000000000090f5         add        r14, 0x1
00000000000090f9         cmp        r14, qword [rax]
00000000000090fc         jl         loc_9010

                     loc_9102:
0000000000009102         xor        eax, eax                                    ; CODE XREF=check_dst_limits.isra.13+320
0000000000009104         jmp        loc_907e
0000000000009109         align      16                                          ; End of unwind block (FDE at 0x18cf4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_node_set_merge:
0000000000009110         test       rsi, rsi                                    ; Begin of unwind block (FDE at 0x18d44), CODE XREF=calc_eclosure_iter+306, check_arrival_expand_ecl+275, expand_bkref_cache+694, build_trtable+557, check_arrival+389, check_arrival+692, update_cur_sifted_state+870, sub_14120+791
0000000000009113         je         loc_9208

0000000000009119         mov        rdx, qword [rsi+8]
000000000000911d         test       rdx, rdx
0000000000009120         je         loc_9208

0000000000009126         push       r12
0000000000009128         push       rbp
0000000000009129         mov        r12, rsi
000000000000912c         push       rbx
000000000000912d         mov        rax, qword [rdi+8]
0000000000009131         mov        rbx, rdi
0000000000009134         mov        rsi, qword [rdi]
0000000000009137         lea        rcx, qword [rax+rdx*2]
000000000000913b         cmp        rsi, rcx
000000000000913e         jl         loc_9288

                     loc_9144:
0000000000009144         test       rax, rax                                    ; CODE XREF=re_node_set_merge+420
0000000000009147         je         loc_92c0

000000000000914d         lea        rbp, qword [rax+rdx*2]
0000000000009151         sub        rdx, 0x1
0000000000009155         sub        rax, 0x1
0000000000009159         mov        rdi, rdx
000000000000915c         not        rdi

                     loc_915f:
000000000000915f         test       rdi, rdi                                    ; CODE XREF=re_node_set_merge+270, re_node_set_merge+284
0000000000009162         jns        loc_91a0

                     loc_9164:
0000000000009164         test       rax, rax                                    ; CODE XREF=re_node_set_merge+139
0000000000009167         js         loc_91a0

0000000000009169         mov        rcx, qword [rbx+0x10]
000000000000916d         mov        rsi, qword [r12+0x10]
0000000000009172         mov        rsi, qword [rsi+rdx*8]
0000000000009176         cmp        qword [rcx+rax*8], rsi
000000000000917a         je         loc_9210

0000000000009180         jge        loc_9228

0000000000009186         sub        rdx, 0x1
000000000000918a         sub        rbp, 0x1
000000000000918e         mov        rdi, rdx
0000000000009191         mov        qword [rcx+rbp*8], rsi
0000000000009195         not        rdi
0000000000009198         test       rdi, rdi
000000000000919b         js         loc_9164

000000000000919d         nop        dword [rax]

                     loc_91a0:
00000000000091a0         test       rdx, rdx                                    ; CODE XREF=re_node_set_merge+82, re_node_set_merge+87
00000000000091a3         jns        loc_9238

                     loc_91a9:
00000000000091a9         mov        rcx, qword [rbx+8]                          ; CODE XREF=re_node_set_merge+325
00000000000091ad         mov        rax, qword [r12+8]
00000000000091b2         lea        r8, qword [rcx+rax*2-1]
00000000000091b7         mov        rdx, r8
00000000000091ba         sub        rdx, rbp
00000000000091bd         add        rdx, 0x1
00000000000091c1         je         loc_91fa

00000000000091c3         mov        rdi, qword [rbx+0x10]
00000000000091c7         lea        rax, qword [rcx-1]
00000000000091cb         add        rcx, rdx
00000000000091ce         mov        qword [rbx+8], rcx
00000000000091d2         nop        word [rax+rax]

                     loc_91d8:
00000000000091d8         mov        rsi, qword [rdi+r8*8]                       ; CODE XREF=re_node_set_merge+232, re_node_set_merge+343
00000000000091dc         mov        rcx, qword [rdi+rax*8]
00000000000091e0         lea        r9, qword [rax+rdx]
00000000000091e4         lea        r9, qword [rdi+r9*8]
00000000000091e8         cmp        rsi, rcx
00000000000091eb         jle        loc_9260

00000000000091ed         sub        r8, 0x1
00000000000091f1         sub        rdx, 0x1
00000000000091f5         mov        qword [r9], rsi
00000000000091f8         jne        loc_91d8

                     loc_91fa:
00000000000091fa         xor        eax, eax                                    ; CODE XREF=re_node_set_merge+177, re_node_set_merge+463

                     loc_91fc:
00000000000091fc         pop        rbx                                         ; CODE XREF=re_node_set_merge+364, re_node_set_merge+473
00000000000091fd         pop        rbp
00000000000091fe         pop        r12
0000000000009200         ret
                        ; endp
0000000000009201         align      8

                     loc_9208:
0000000000009208         xor        eax, eax                                    ; CODE XREF=re_node_set_merge+3, re_node_set_merge+16
000000000000920a         ret
                        ; endp
000000000000920b         align      16

                     loc_9210:
0000000000009210         sub        rdx, 0x1                                    ; CODE XREF=re_node_set_merge+106
0000000000009214         sub        rax, 0x1
0000000000009218         mov        rdi, rdx
000000000000921b         not        rdi
000000000000921e         jmp        loc_915f
0000000000009223         align      8

                     loc_9228:
0000000000009228         sub        rax, 0x1                                    ; CODE XREF=re_node_set_merge+112
000000000000922c         jmp        loc_915f
0000000000009231         align      8

                     loc_9238:
0000000000009238         mov        rax, qword [rbx+0x10]                       ; CODE XREF=re_node_set_merge+147
000000000000923c         add        rdx, 0x1
0000000000009240         mov        rsi, qword [r12+0x10]                       ; argument "__src" for method j_memcpy
0000000000009245         sub        rbp, rdx
0000000000009248         shl        rdx, 0x3                                    ; argument "__n" for method j_memcpy
000000000000924c         lea        rdi, qword [rax+rbp*8]                      ; argument "__dest" for method j_memcpy
0000000000009250         call       j_memcpy                                    ; memcpy
0000000000009255         jmp        loc_91a9
000000000000925a         align      32

                     loc_9260:
0000000000009260         sub        rax, 0x1                                    ; CODE XREF=re_node_set_merge+219
0000000000009264         mov        qword [r9], rcx
0000000000009267         jns        loc_91d8

000000000000926d         lea        rsi, qword [rdi+rbp*8]                      ; argument "__src" for method j_memcpy
0000000000009271         shl        rdx, 0x3                                    ; argument "__n" for method j_memcpy
0000000000009275         call       j_memcpy                                    ; memcpy
000000000000927a         xor        eax, eax
000000000000927c         jmp        loc_91fc
0000000000009281         align      8

                     loc_9288:
0000000000009288         add        rdx, rsi                                    ; CODE XREF=re_node_set_merge+46
000000000000928b         mov        rdi, qword [rdi+0x10]                       ; argument "__ptr" for method j_realloc
000000000000928f         lea        rbp, qword [rdx+rdx]
0000000000009293         shl        rdx, 0x4
0000000000009297         mov        rsi, rdx                                    ; argument "__size" for method j_realloc
000000000000929a         call       j_realloc                                   ; realloc
000000000000929f         test       rax, rax
00000000000092a2         je         loc_92e4

00000000000092a4         mov        qword [rbx+0x10], rax
00000000000092a8         mov        qword [rbx], rbp
00000000000092ab         mov        rax, qword [rbx+8]
00000000000092af         mov        rdx, qword [r12+8]
00000000000092b4         jmp        loc_9144
00000000000092b9         align      64

                     loc_92c0:
00000000000092c0         mov        qword [rbx+8], rdx                          ; CODE XREF=re_node_set_merge+55
00000000000092c4         mov        rax, qword [r12+8]
00000000000092c9         mov        rdi, qword [rbx+0x10]                       ; argument "__dest" for method j_memcpy
00000000000092cd         mov        rsi, qword [r12+0x10]                       ; argument "__src" for method j_memcpy
00000000000092d2         lea        rdx, qword [rax*8]                          ; argument "__n" for method j_memcpy
00000000000092da         call       j_memcpy                                    ; memcpy
00000000000092df         jmp        loc_91fa

                     loc_92e4:
00000000000092e4         mov        eax, 0xc                                    ; CODE XREF=re_node_set_merge+402
00000000000092e9         jmp        loc_91fc
00000000000092ee         align      16                                          ; End of unwind block (FDE at 0x18d44)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_58: int8_t, -88
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_7C: int32_t, -124
        ;    var_7D: int8_t, -125
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144


                     calc_eclosure_iter:
00000000000092f0         push       r15                                         ; Begin of unwind block (FDE at 0x18d7c), CODE XREF=calc_eclosure_iter+654, sub_14120+170
00000000000092f2         push       r14
00000000000092f4         mov        r15, rsi
00000000000092f7         push       r13
00000000000092f9         push       r12
00000000000092fb         push       rbp
00000000000092fc         push       rbx
00000000000092fd         lea        rbx, qword [rdx+rdx*2]
0000000000009301         mov        rbp, rdx
0000000000009304         sub        rsp, 0x68
0000000000009308         mov        r12, qword [rsi+0x28]
000000000000930c         shl        rbx, 0x3
0000000000009310         mov        rax, qword [fs:0x28]
0000000000009319         mov        qword [rsp+0x98+var_40], rax
000000000000931e         xor        eax, eax
0000000000009320         mov        qword [rsp+0x98+var_88], rdi
0000000000009325         mov        dword [rsp+0x98+var_7C], ecx
0000000000009329         add        r12, rbx
000000000000932c         mov        rax, qword [r12+8]
0000000000009331         mov        qword [rsp+0x98+var_70], 0x0
000000000000933a         lea        rdi, qword [rax+1]
000000000000933e         mov        qword [rsp+0x98+var_78], rdi
0000000000009343         shl        rdi, 0x3                                    ; argument "__size" for method j_malloc
0000000000009347         call       j_malloc                                    ; malloc
000000000000934c         test       rax, rax
000000000000934f         mov        qword [rsp+0x98+var_68], rax
0000000000009354         je         loc_9590

000000000000935a         mov        rax, qword [r15+0x30]
000000000000935e         mov        rdx, qword [r15]
0000000000009361         mov        r13, rbp
0000000000009364         shl        r13, 0x4
0000000000009368         mov        qword [rax+rbx+8], 0xffffffffffffffff
0000000000009371         lea        rax, qword [rdx+r13]
0000000000009375         mov        r8d, dword [rax+8]
0000000000009379         test       r8d, 0x3ff00
0000000000009380         jne        loc_9520

                     loc_9386:
0000000000009386         test       byte [rax+8], 0x8                           ; CODE XREF=calc_eclosure_iter+589, calc_eclosure_iter+637
000000000000938a         je         loc_9450

0000000000009390         mov        rsi, qword [r15+0x28]
0000000000009394         lea        rax, qword [rsi+rbx]
0000000000009398         cmp        qword [rax+8], 0x0
000000000000939d         jle        loc_9450

00000000000093a3         lea        rdx, qword [rsp+0x98+var_78]
00000000000093a8         mov        byte [rsp+0x98+var_7D], 0x0
00000000000093ad         xor        r14d, r14d
00000000000093b0         lea        r12, qword [rsp+0x98+var_58]
00000000000093b5         mov        qword [rsp+0x98+var_90], rdx
00000000000093ba         jmp        loc_93d6
00000000000093bc         align      64

                     loc_93c0:
00000000000093c0         mov        rsi, qword [r15+0x28]                       ; CODE XREF=calc_eclosure_iter+325, calc_eclosure_iter+342
00000000000093c4         add        r14, 0x1
00000000000093c8         lea        rax, qword [rsi+rbx]
00000000000093cc         cmp        qword [rax+8], r14
00000000000093d0         jle        loc_94d7

                     loc_93d6:
00000000000093d6         mov        rax, qword [rax+0x10]                       ; CODE XREF=calc_eclosure_iter+202, calc_eclosure_iter+481
00000000000093da         mov        rdx, qword [rax+r14*8]
00000000000093de         mov        rax, qword [r15+0x30]
00000000000093e2         lea        r8, qword [rdx+rdx*2]
00000000000093e6         lea        r13, qword [r8*8]
00000000000093ee         add        rax, r13
00000000000093f1         mov        rcx, qword [rax+8]
00000000000093f5         cmp        rcx, 0xffffffffffffffff
00000000000093f9         je         loc_94c0

00000000000093ff         test       rcx, rcx
0000000000009402         je         loc_9578

0000000000009408         movdqu     xmm0, xmmword [rax]
000000000000940c         movaps     xmmword [rsp+0x98+var_58], xmm0
0000000000009411         mov        rax, qword [rax+0x10]
0000000000009415         mov        qword [rsp+0x98+var_48], rax

                     loc_941a:
000000000000941a         mov        rdi, qword [rsp+0x98+var_90]                ; CODE XREF=calc_eclosure_iter+661
000000000000941f         mov        rsi, r12
0000000000009422         call       re_node_set_merge                           ; re_node_set_merge
0000000000009427         test       eax, eax
0000000000009429         jne        loc_9496

000000000000942b         mov        rax, qword [r15+0x30]
000000000000942f         cmp        qword [rax+r13+8], 0x0
0000000000009435         jne        loc_93c0

0000000000009437         mov        rdi, qword [rsp+0x98+var_48]                ; argument "__ptr" for method j_free
000000000000943c         call       j_free                                      ; free
0000000000009441         mov        byte [rsp+0x98+var_7D], 0x1
0000000000009446         jmp        loc_93c0
000000000000944b         align      16

                     loc_9450:
0000000000009450         lea        rdi, qword [rsp+0x98+var_78]                ; CODE XREF=calc_eclosure_iter+154, calc_eclosure_iter+173, calc_eclosure_iter+566
0000000000009455         mov        rsi, rbp
0000000000009458         call       re_node_set_insert                          ; re_node_set_insert
000000000000945d         test       al, al
000000000000945f         je         loc_9590

0000000000009465         mov        rax, qword [r15+0x30]

                     loc_9469:
0000000000009469         movdqa     xmm0, xmmword [rsp+0x98+var_78]             ; CODE XREF=calc_eclosure_iter+521, calc_eclosure_iter+532
000000000000946f         movups     xmmword [rax+rbx], xmm0
0000000000009473         mov        rdx, qword [rsp+0x98+var_68]
0000000000009478         mov        qword [rax+rbx+0x10], rdx

                     loc_947d:
000000000000947d         mov        rbx, qword [rsp+0x98+var_88]                ; CODE XREF=calc_eclosure_iter+546
0000000000009482         mov        rax, qword [rsp+0x98+var_68]
0000000000009487         movdqa     xmm0, xmmword [rsp+0x98+var_78]
000000000000948d         movaps     xmmword [rbx], xmm0
0000000000009490         mov        qword [rbx+0x10], rax
0000000000009494         xor        eax, eax

                     loc_9496:
0000000000009496         mov        rsi, qword [rsp+0x98+var_40]                ; CODE XREF=calc_eclosure_iter+313, calc_eclosure_iter+625, calc_eclosure_iter+667, calc_eclosure_iter+677
000000000000949b         xor        rsi, qword [fs:0x28]
00000000000094a4         jne        loc_959a

00000000000094aa         add        rsp, 0x68
00000000000094ae         pop        rbx
00000000000094af         pop        rbp
00000000000094b0         pop        r12
00000000000094b2         pop        r13
00000000000094b4         pop        r14
00000000000094b6         pop        r15
00000000000094b8         ret
                        ; endp
00000000000094b9         align      64

                     loc_94c0:
00000000000094c0         lea        rax, qword [rsi+rbx]                        ; CODE XREF=calc_eclosure_iter+265
00000000000094c4         add        r14, 0x1
00000000000094c8         mov        byte [rsp+0x98+var_7D], 0x1
00000000000094cd         cmp        qword [rax+8], r14
00000000000094d1         jg         loc_93d6

                     loc_94d7:
00000000000094d7         lea        rdi, qword [rsp+0x98+var_78]                ; CODE XREF=calc_eclosure_iter+224
00000000000094dc         mov        rsi, rbp
00000000000094df         call       re_node_set_insert                          ; re_node_set_insert
00000000000094e4         test       al, al
00000000000094e6         je         loc_9590

00000000000094ec         cmp        byte [rsp+0x98+var_7C], 0x1
00000000000094f1         mov        rax, qword [r15+0x30]
00000000000094f5         lea        rdx, qword [rax+rbx]
00000000000094f9         je         loc_9469

00000000000094ff         cmp        byte [rsp+0x98+var_7D], 0x0
0000000000009504         je         loc_9469

000000000000950a         mov        qword [rdx+8], 0x0
0000000000009512         jmp        loc_947d
0000000000009517         align      32

                     loc_9520:
0000000000009520         cmp        qword [r12+8], 0x0                          ; CODE XREF=calc_eclosure_iter+144
0000000000009526         je         loc_9450

000000000000952c         mov        rcx, qword [r12+0x10]
0000000000009531         mov        rcx, qword [rcx]
0000000000009534         shl        rcx, 0x4
0000000000009538         test       byte [rdx+rcx+0xa], 0x4
000000000000953d         jne        loc_9386

0000000000009543         shr        r8d, 0x8
0000000000009547         mov        rcx, rbp
000000000000954a         mov        rdx, rbp
000000000000954d         and        r8d, 0x3ff
0000000000009554         mov        rsi, rbp
0000000000009557         mov        rdi, r15
000000000000955a         call       duplicate_node_closure                      ; duplicate_node_closure
000000000000955f         test       eax, eax
0000000000009561         jne        loc_9496

0000000000009567         mov        rax, qword [r15]
000000000000956a         add        rax, r13
000000000000956d         jmp        loc_9386
0000000000009572         align      8

                     loc_9578:
0000000000009578         mov        rsi, r15                                    ; CODE XREF=calc_eclosure_iter+274
000000000000957b         mov        rdi, r12
000000000000957e         call       calc_eclosure_iter                          ; calc_eclosure_iter
0000000000009583         test       eax, eax
0000000000009585         je         loc_941a

000000000000958b         jmp        loc_9496

                     loc_9590:
0000000000009590         mov        eax, 0xc                                    ; CODE XREF=calc_eclosure_iter+100, calc_eclosure_iter+367, calc_eclosure_iter+502
0000000000009595         jmp        loc_9496

                     loc_959a:
000000000000959a         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=calc_eclosure_iter+436
                        ; endp
000000000000959f         align      32                                          ; End of unwind block (FDE at 0x18d7c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_5C: int32_t, -92


                     check_arrival_expand_ecl:
00000000000095a0         push       r15                                         ; Begin of unwind block (FDE at 0x18dcc), CODE XREF=expand_bkref_cache+680, check_arrival+884, check_arrival+1283
00000000000095a2         push       r14
00000000000095a4         mov        r14, rdi
00000000000095a7         push       r13
00000000000095a9         push       r12
00000000000095ab         mov        r15, rsi
00000000000095ae         push       rbp
00000000000095af         push       rbx
00000000000095b0         mov        rbp, rdx
00000000000095b3         mov        ebx, ecx
00000000000095b5         sub        rsp, 0x38
00000000000095b9         mov        r12, qword [rsi+8]
00000000000095bd         mov        rax, qword [fs:0x28]
00000000000095c6         mov        qword [rsp+0x68+var_40], rax
00000000000095cb         xor        eax, eax
00000000000095cd         mov        qword [rsp+0x68+var_50], 0x0
00000000000095d6         lea        rdi, qword [r12*8]                          ; argument "__size" for method j_malloc
00000000000095de         mov        qword [rsp+0x68+var_58], r12
00000000000095e3         call       j_malloc                                    ; malloc
00000000000095e8         test       rax, rax
00000000000095eb         mov        qword [rsp+0x68+var_48], rax
00000000000095f0         je         loc_96ed

00000000000095f6         test       r12, r12
00000000000095f9         jle        loc_968b

00000000000095ff         lea        r12, qword [rsp+0x68+var_58]
0000000000009604         xor        r13d, r13d
0000000000009607         nop        word [rax+rax]

                     loc_9610:
0000000000009610         mov        rax, qword [r15+0x10]                       ; CODE XREF=check_arrival_expand_ecl+233
0000000000009614         mov        rdx, qword [rax+r13*8]
0000000000009618         mov        rax, qword [r14+0x30]
000000000000961c         lea        rcx, qword [rdx+rdx*2]
0000000000009620         lea        rsi, qword [rax+rcx*8]
0000000000009624         mov        r8, qword [rsi+8]
0000000000009628         test       r8, r8
000000000000962b         jle        loc_96b0

0000000000009631         mov        r10, qword [rsi+0x10]
0000000000009635         mov        r9, qword [r14]
0000000000009638         xor        ecx, ecx
000000000000963a         jmp        loc_9649
000000000000963c         align      64

                     loc_9640:
0000000000009640         add        rcx, 0x1                                    ; CODE XREF=check_arrival_expand_ecl+191, check_arrival_expand_ecl+196
0000000000009644         cmp        r8, rcx
0000000000009647         je         loc_96b0

                     loc_9649:
0000000000009649         mov        rdi, qword [r10+rcx*8]                      ; CODE XREF=check_arrival_expand_ecl+154
000000000000964d         mov        rax, rdi
0000000000009650         shl        rax, 0x4
0000000000009654         add        rax, r9
0000000000009657         movzx      r11d, byte [rax+8]
000000000000965c         cmp        ebx, r11d
000000000000965f         jne        loc_9640

0000000000009661         cmp        rbp, qword [rax]
0000000000009664         jne        loc_9640

0000000000009666         cmp        rdi, 0xffffffffffffffff
000000000000966a         je         loc_96b0

000000000000966c         mov        r8d, ebx
000000000000966f         mov        rcx, rbp
0000000000009672         mov        rsi, r12
0000000000009675         mov        rdi, r14
0000000000009678         call       check_arrival_expand_ecl_sub                ; check_arrival_expand_ecl_sub
000000000000967d         test       eax, eax
000000000000967f         jne        loc_96bc

                     loc_9681:
0000000000009681         add        r13, 0x1                                    ; CODE XREF=check_arrival_expand_ecl+282
0000000000009685         cmp        qword [r15+8], r13
0000000000009689         jg         loc_9610

                     loc_968b:
000000000000968b         mov        rdi, qword [r15+0x10]                       ; argument "__ptr" for method j_free, CODE XREF=check_arrival_expand_ecl+89
000000000000968f         call       j_free                                      ; free
0000000000009694         mov        rax, qword [rsp+0x68+var_48]
0000000000009699         movdqa     xmm0, xmmword [rsp+0x68+var_58]
000000000000969f         mov        qword [r15+0x10], rax
00000000000096a3         xor        eax, eax
00000000000096a5         movaps     xmmword [r15], xmm0
00000000000096a9         jmp        loc_96ce
00000000000096ab         align      16

                     loc_96b0:
00000000000096b0         mov        rdi, r12                                    ; CODE XREF=check_arrival_expand_ecl+139, check_arrival_expand_ecl+167, check_arrival_expand_ecl+202
00000000000096b3         call       re_node_set_merge                           ; re_node_set_merge
00000000000096b8         test       eax, eax
00000000000096ba         je         loc_9681

                     loc_96bc:
00000000000096bc         mov        rdi, qword [rsp+0x68+var_48]                ; argument "__ptr" for method j_free, CODE XREF=check_arrival_expand_ecl+223
00000000000096c1         mov        dword [rsp+0x68+var_5C], eax
00000000000096c5         call       j_free                                      ; free
00000000000096ca         mov        eax, dword [rsp+0x68+var_5C]

                     loc_96ce:
00000000000096ce         mov        rdx, qword [rsp+0x68+var_40]                ; CODE XREF=check_arrival_expand_ecl+265, check_arrival_expand_ecl+338
00000000000096d3         xor        rdx, qword [fs:0x28]
00000000000096dc         jne        loc_96f4

00000000000096de         add        rsp, 0x38
00000000000096e2         pop        rbx
00000000000096e3         pop        rbp
00000000000096e4         pop        r12
00000000000096e6         pop        r13
00000000000096e8         pop        r14
00000000000096ea         pop        r15
00000000000096ec         ret
                        ; endp

                     loc_96ed:
00000000000096ed         mov        eax, 0xc                                    ; CODE XREF=check_arrival_expand_ecl+80
00000000000096f2         jmp        loc_96ce

                     loc_96f4:
00000000000096f4         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=check_arrival_expand_ecl+316
                        ; endp
00000000000096f9         align      256                                         ; End of unwind block (FDE at 0x18dcc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_node_set_add_intersect:
0000000000009700         mov        r9, qword [rsi+8]                           ; Begin of unwind block (FDE at 0x18e18), CODE XREF=sub_epsilon_src_nodes+156, update_cur_sifted_state+263
0000000000009704         xor        eax, eax
0000000000009706         test       r9, r9
0000000000009709         je         loc_97c8

000000000000970f         mov        r11, qword [rdx+8]
0000000000009713         test       r11, r11
0000000000009716         je         loc_97c8

000000000000971c         push       r13
000000000000971e         push       r12
0000000000009720         lea        rax, qword [r9+r11]
0000000000009724         push       rbp
0000000000009725         push       rbx
0000000000009726         mov        r12, rdx
0000000000009729         mov        rbx, rdi
000000000000972c         mov        rbp, rsi
000000000000972f         sub        rsp, 0x8
0000000000009733         mov        rcx, qword [rdi+8]
0000000000009737         mov        r13, qword [rdi]
000000000000973a         mov        rdi, qword [rdi+0x10]
000000000000973e         lea        rdx, qword [rax+rcx]
0000000000009742         cmp        rdx, r13
0000000000009745         jg         loc_9870

                     loc_974b:
000000000000974b         lea        rsi, qword [rcx+r9]                         ; CODE XREF=re_node_set_add_intersect+412
000000000000974f         mov        r13, qword [rbp+0x10]
0000000000009753         mov        rdx, qword [r12+0x10]
0000000000009758         sub        r9, 0x1
000000000000975c         sub        rcx, 0x1
0000000000009760         add        rsi, r11
0000000000009763         sub        r11, 0x1
0000000000009767         mov        rax, qword [r13+r9*8]
000000000000976c         mov        r8, qword [rdx+r11*8]

                     loc_9770:
0000000000009770         cmp        rax, r8                                     ; CODE XREF=re_node_set_add_intersect+219
0000000000009773         je         loc_9786

                     loc_9775:
0000000000009775         jge        loc_97d0                                    ; CODE XREF=re_node_set_add_intersect+132

0000000000009777         sub        r11, 0x1
000000000000977b         js         loc_97e0

                     loc_977d:
000000000000977d         mov        r8, qword [rdx+r11*8]                       ; CODE XREF=re_node_set_add_intersect+193
0000000000009781         cmp        rax, r8
0000000000009784         jne        loc_9775

                     loc_9786:
0000000000009786         test       rcx, rcx                                    ; CODE XREF=re_node_set_add_intersect+115
0000000000009789         jns        loc_979a

000000000000978b         jmp        loc_97a8
000000000000978d         align      16

                     loc_9790:
0000000000009790         sub        rcx, 0x1                                    ; CODE XREF=re_node_set_add_intersect+161
0000000000009794         cmp        rcx, 0xffffffffffffffff
0000000000009798         je         loc_97a8

                     loc_979a:
000000000000979a         mov        r10, qword [rdi+rcx*8]                      ; CODE XREF=re_node_set_add_intersect+137
000000000000979e         cmp        r10, r8
00000000000097a1         jg         loc_9790

00000000000097a3         cmp        r10, r8
00000000000097a6         je         loc_97b0

                     loc_97a8:
00000000000097a8         sub        rsi, 0x1                                    ; CODE XREF=re_node_set_add_intersect+139, re_node_set_add_intersect+152
00000000000097ac         mov        qword [rdi+rsi*8], r8

                     loc_97b0:
00000000000097b0         sub        r9, 0x1                                     ; CODE XREF=re_node_set_add_intersect+166
00000000000097b4         js         loc_97e0

00000000000097b6         sub        r11, 0x1
00000000000097ba         js         loc_97e0

00000000000097bc         mov        rax, qword [r13+r9*8]
00000000000097c1         jmp        loc_977d
00000000000097c3         align      8

                     loc_97c8:
00000000000097c8         ret                                                    ; CODE XREF=re_node_set_add_intersect+9, re_node_set_add_intersect+22
                        ; endp
00000000000097ca         align      16

                     loc_97d0:
00000000000097d0         sub        r9, 0x1                                     ; CODE XREF=loc_9775
00000000000097d4         js         loc_97e0

00000000000097d6         mov        rax, qword [r13+r9*8]
00000000000097db         jmp        loc_9770
00000000000097dd         align      32

                     loc_97e0:
00000000000097e0         mov        rcx, qword [rbx+8]                          ; CODE XREF=re_node_set_add_intersect+123, re_node_set_add_intersect+180, re_node_set_add_intersect+186, re_node_set_add_intersect+212
00000000000097e4         mov        rdx, qword [rbp+8]
00000000000097e8         add        rdx, rcx
00000000000097eb         add        rdx, qword [r12+8]
00000000000097f0         lea        rax, qword [rcx-1]
00000000000097f4         lea        r9, qword [rdx-1]
00000000000097f8         sub        rdx, rsi
00000000000097fb         add        rcx, rdx
00000000000097fe         test       rdx, rdx
0000000000009801         mov        qword [rbx+8], rcx
0000000000009805         jle        loc_984d

0000000000009807         test       rax, rax
000000000000980a         js         loc_984d

000000000000980c         nop        dword [rax]

                     loc_9810:
0000000000009810         mov        r8, qword [rdi+r9*8]                        ; CODE XREF=re_node_set_add_intersect+304, re_node_set_add_intersect+331
0000000000009814         mov        rcx, qword [rdi+rax*8]
0000000000009818         lea        r10, qword [rax+rdx]
000000000000981c         lea        r10, qword [rdi+r10*8]
0000000000009820         cmp        r8, rcx
0000000000009823         jle        loc_9840

0000000000009825         sub        r9, 0x1
0000000000009829         sub        rdx, 0x1
000000000000982d         mov        qword [r10], r8
0000000000009830         jne        loc_9810

0000000000009832         xor        edx, edx
0000000000009834         jmp        loc_9851
0000000000009836         align      64

                     loc_9840:
0000000000009840         sub        rax, 0x1                                    ; CODE XREF=re_node_set_add_intersect+291
0000000000009844         mov        qword [r10], rcx
0000000000009847         cmp        rax, 0xffffffffffffffff
000000000000984b         jne        loc_9810

                     loc_984d:
000000000000984d         shl        rdx, 0x3                                    ; CODE XREF=re_node_set_add_intersect+261, re_node_set_add_intersect+266

                     loc_9851:
0000000000009851         lea        rsi, qword [rdi+rsi*8]                      ; argument "__src" for method j_memcpy, CODE XREF=re_node_set_add_intersect+308
0000000000009855         call       j_memcpy                                    ; memcpy
000000000000985a         xor        eax, eax

                     loc_985c:
000000000000985c         add        rsp, 0x8                                    ; CODE XREF=re_node_set_add_intersect+422
0000000000009860         pop        rbx
0000000000009861         pop        rbp
0000000000009862         pop        r12
0000000000009864         pop        r13
0000000000009866         ret
                        ; endp
0000000000009867         align      16

                     loc_9870:
0000000000009870         add        r13, rax                                    ; CODE XREF=re_node_set_add_intersect+69
0000000000009873         lea        rsi, qword [r13*8]                          ; argument "__size" for method j_realloc
000000000000987b         call       j_realloc                                   ; realloc
0000000000009880         test       rax, rax
0000000000009883         mov        rdi, rax
0000000000009886         je         loc_98a1

0000000000009888         mov        qword [rbx+0x10], rax
000000000000988c         mov        qword [rbx], r13
000000000000988f         mov        rcx, qword [rbx+8]
0000000000009893         mov        r9, qword [rbp+8]
0000000000009897         mov        r11, qword [r12+8]
000000000000989c         jmp        loc_974b

                     loc_98a1:
00000000000098a1         mov        eax, 0xc                                    ; CODE XREF=re_node_set_add_intersect+390
00000000000098a6         jmp        loc_985c
00000000000098a8         align      16                                          ; End of unwind block (FDE at 0x18e18)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40


                     create_token_tree.isra.16:
00000000000098b0         push       rbx                                         ; Begin of unwind block (FDE at 0x18e68), CODE XREF=duplicate_tree+62, lower_subexp+130, lower_subexp+156, lower_subexp+215, lower_subexp+241, lower_subexp+279, lower_subexp+463, lower_subexp+489, lower_subexp+531, build_charclass_op+350, build_charclass_op+410
00000000000098b1         mov        rbx, rdi
00000000000098b4         sub        rsp, 0x20
00000000000098b8         mov        eax, dword [rsi]
00000000000098ba         cmp        eax, 0xf
00000000000098bd         je         loc_9938

00000000000098bf         movsxd     r9, eax
00000000000098c2         lea        r10d, dword [rax+1]
00000000000098c6         mov        rdi, qword [rdi]
00000000000098c9         mov        rax, r9
00000000000098cc         shl        rax, 0x6
00000000000098d0         add        rax, 0x8

                     loc_98d4:
00000000000098d4         shl        r9, 0x6                                     ; CODE XREF=create_token_tree.isra.16+215
00000000000098d8         mov        dword [rsi], r10d
00000000000098db         add        rax, rdi
00000000000098de         lea        rsi, qword [rdi+r9]
00000000000098e2         mov        qword [rsi+8], 0x0
00000000000098ea         mov        qword [rsi+0x10], rdx
00000000000098ee         lea        rdi, qword [rsi+0x20]
00000000000098f2         mov        qword [rsi+0x18], rcx
00000000000098f6         movdqu     xmm0, xmmword [r8]
00000000000098fb         movups     xmmword [rsi+0x30], xmm0
00000000000098ff         and        byte [rdi+0x1a], 0xf3
0000000000009903         test       rdx, rdx
0000000000009906         mov        qword [rsi+0x20], 0x0
000000000000990e         mov        qword [rsi+0x28], 0x0
0000000000009916         mov        qword [rsi+0x40], 0xffffffffffffffff
000000000000991e         je         loc_9923

0000000000009920         mov        qword [rdx], rax

                     loc_9923:
0000000000009923         test       rcx, rcx                                    ; CODE XREF=create_token_tree.isra.16+110
0000000000009926         je         loc_992b

0000000000009928         mov        qword [rcx], rax

                     loc_992b:
000000000000992b         add        rsp, 0x20                                   ; CODE XREF=create_token_tree.isra.16+118, create_token_tree.isra.16+222
000000000000992f         pop        rbx
0000000000009930         ret
                        ; endp
0000000000009931         align      8

                     loc_9938:
0000000000009938         mov        edi, 0x3c8                                  ; argument "__size" for method j_malloc, CODE XREF=create_token_tree.isra.16+13
000000000000993d         mov        qword [rsp+0x28+var_10], r8
0000000000009942         mov        qword [rsp+0x28+var_18], rcx
0000000000009947         mov        qword [rsp+0x28+var_20], rdx
000000000000994c         mov        qword [rsp+0x28+var_28], rsi
0000000000009950         call       j_malloc                                    ; malloc
0000000000009955         test       rax, rax
0000000000009958         mov        rdi, rax
000000000000995b         je         loc_998c

000000000000995d         mov        rax, qword [rbx]
0000000000009960         mov        r10d, 0x1
0000000000009966         mov        qword [rbx], rdi
0000000000009969         xor        r9d, r9d
000000000000996c         mov        r8, qword [rsp+0x28+var_10]
0000000000009971         mov        rcx, qword [rsp+0x28+var_18]
0000000000009976         mov        rdx, qword [rsp+0x28+var_20]
000000000000997b         mov        rsi, qword [rsp+0x28+var_28]
000000000000997f         mov        qword [rdi], rax
0000000000009982         mov        eax, 0x8
0000000000009987         jmp        loc_98d4

                     loc_998c:
000000000000998c         xor        eax, eax                                    ; CODE XREF=create_token_tree.isra.16+171
000000000000998e         jmp        loc_992b


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_38: int64_t, -56


                     duplicate_tree:
0000000000009990         push       r14                                         ; End of unwind block (FDE at 0x18e68), Begin of unwind block (FDE at 0x18e8c), CODE XREF=sub_12040+540, sub_12040+888, sub_12040+982
0000000000009992         push       r13
0000000000009994         lea        r13, qword [rsi+0x70]
0000000000009998         push       r12
000000000000999a         push       rbp
000000000000999b         lea        r12, qword [rsi+0x80]
00000000000099a2         push       rbx
00000000000099a3         mov        rbx, rdi
00000000000099a6         sub        rsp, 0x10
00000000000099aa         mov        rbp, qword [rdi]
00000000000099ad         mov        rax, qword [fs:0x28]
00000000000099b6         mov        qword [rsp+0x38+var_30], rax
00000000000099bb         xor        eax, eax
00000000000099bd         mov        r14, rsp

                     loc_99c0:
00000000000099c0         lea        r8, qword [rbx+0x28]                        ; CODE XREF=duplicate_tree+101, duplicate_tree+199
00000000000099c4         xor        ecx, ecx
00000000000099c6         xor        edx, edx
00000000000099c8         mov        rsi, r12
00000000000099cb         mov        rdi, r13
00000000000099ce         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
00000000000099d3         test       rax, rax
00000000000099d6         mov        qword [r14], rax
00000000000099d9         je         loc_9a2c

00000000000099db         mov        qword [rax], rbp
00000000000099de         mov        rbp, qword [r14]
00000000000099e1         or         byte [rbp+0x32], 0x4
00000000000099e5         mov        rax, qword [rbx+8]
00000000000099e9         test       rax, rax
00000000000099ec         je         loc_9a00

00000000000099ee         lea        r14, qword [rbp+8]
00000000000099f2         mov        rbx, rax
00000000000099f5         jmp        loc_99c0
00000000000099f7         align      512

                     loc_9a00:
0000000000009a00         xor        edx, edx                                    ; CODE XREF=duplicate_tree+92
0000000000009a02         jmp        loc_9a0b
0000000000009a04         align      8

                     loc_9a08:
0000000000009a08         mov        rbx, rax                                    ; CODE XREF=duplicate_tree+150

                     loc_9a0b:
0000000000009a0b         mov        rax, qword [rbx+0x10]                       ; CODE XREF=duplicate_tree+114
0000000000009a0f         test       rax, rax
0000000000009a12         je         loc_9a19

0000000000009a14         cmp        rax, rdx
0000000000009a17         jne        loc_9a50

                     loc_9a19:
0000000000009a19         mov        rax, qword [rbx]                            ; CODE XREF=duplicate_tree+130
0000000000009a1c         mov        rbp, qword [rbp]
0000000000009a20         mov        rdx, rbx
0000000000009a23         test       rax, rax
0000000000009a26         jne        loc_9a08

0000000000009a28         mov        rax, qword [rsp+0x38+var_38]

                     loc_9a2c:
0000000000009a2c         mov        rcx, qword [rsp+0x38+var_30]                ; CODE XREF=duplicate_tree+73
0000000000009a31         xor        rcx, qword [fs:0x28]
0000000000009a3a         jne        loc_9a5c

0000000000009a3c         add        rsp, 0x10
0000000000009a40         pop        rbx
0000000000009a41         pop        rbp
0000000000009a42         pop        r12
0000000000009a44         pop        r13
0000000000009a46         pop        r14
0000000000009a48         ret
                        ; endp
0000000000009a49         align      16

                     loc_9a50:
0000000000009a50         lea        r14, qword [rbp+0x10]                       ; CODE XREF=duplicate_tree+135
0000000000009a54         mov        rbx, rax
0000000000009a57         jmp        loc_99c0

                     loc_9a5c:
0000000000009a5c         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=duplicate_tree+170
                        ; endp
0000000000009a61         align      16                                          ; End of unwind block (FDE at 0x18e8c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_50: int8_t, -80
        ;    var_58: int8_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112


                     lower_subexp:
0000000000009a70         push       r15                                         ; Begin of unwind block (FDE at 0x18ed0), CODE XREF=lower_subexps+104, lower_subexps+136
0000000000009a72         push       r14
0000000000009a74         push       r13
0000000000009a76         push       r12
0000000000009a78         mov        r13, rdx
0000000000009a7b         push       rbp
0000000000009a7c         push       rbx
0000000000009a7d         sub        rsp, 0x48
0000000000009a81         mov        rbx, qword [rsi]
0000000000009a84         mov        rbp, qword [rdx+8]
0000000000009a88         mov        rax, qword [fs:0x28]
0000000000009a91         mov        qword [rsp+0x78+var_40], rax
0000000000009a96         xor        eax, eax
0000000000009a98         test       byte [rsi+0x38], 0x10
0000000000009a9c         mov        qword [rsp+0x78+var_60], rdi
0000000000009aa1         je         loc_9c18

0000000000009aa7         test       rbp, rbp
0000000000009aaa         je         loc_9b20

0000000000009aac         mov        rax, qword [rdx+0x28]
0000000000009ab0         cmp        rax, 0x3f
0000000000009ab4         jg         loc_9bed

0000000000009aba         mov        rdx, qword [rbx+0xa0]
0000000000009ac1         bt         rdx, rax
0000000000009ac5         jae        loc_9bed

0000000000009acb         lea        rax, qword [rbx+0x70]
0000000000009acf         lea        r14, qword [rsp+0x78+var_58]
0000000000009ad4         sub        rbx, 0xffffffffffffff80
0000000000009ad8         xor        ecx, ecx
0000000000009ada         xor        edx, edx
0000000000009adc         mov        rsi, rbx
0000000000009adf         mov        r15, rax
0000000000009ae2         mov        r8, r14
0000000000009ae5         mov        rdi, rax
0000000000009ae8         mov        byte [rsp+0x78+var_50], 0x8
0000000000009aed         mov        qword [rsp+0x78+var_70], rax
0000000000009af2         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000009af7         mov        rdi, r15
0000000000009afa         mov        r8, r14
0000000000009afd         xor        ecx, ecx
0000000000009aff         xor        edx, edx
0000000000009b01         mov        rsi, rbx
0000000000009b04         mov        r12, rax
0000000000009b07         mov        byte [rsp+0x78+var_50], 0x9
0000000000009b0c         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000009b11         mov        r15, rax
0000000000009b14         jmp        loc_9c6d
0000000000009b19         align      32

                     loc_9b20:
0000000000009b20         lea        rax, qword [rbx+0x70]                       ; CODE XREF=lower_subexp+58
0000000000009b24         lea        r14, qword [rsp+0x78+var_58]
0000000000009b29         sub        rbx, 0xffffffffffffff80
0000000000009b2d         xor        ecx, ecx
0000000000009b2f         xor        edx, edx
0000000000009b31         mov        rsi, rbx
0000000000009b34         mov        r15, rax
0000000000009b37         mov        r8, r14
0000000000009b3a         mov        rdi, rax
0000000000009b3d         mov        byte [rsp+0x78+var_50], 0x8
0000000000009b42         mov        qword [rsp+0x78+var_70], rax
0000000000009b47         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000009b4c         mov        rdi, r15
0000000000009b4f         mov        r8, r14
0000000000009b52         xor        ecx, ecx
0000000000009b54         xor        edx, edx
0000000000009b56         mov        rsi, rbx
0000000000009b59         mov        r12, rax
0000000000009b5c         mov        byte [rsp+0x78+var_50], 0x9
0000000000009b61         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000009b66         mov        r11, rax
0000000000009b69         mov        r15, rax

                     loc_9b6c:
0000000000009b6c         mov        rdi, qword [rsp+0x78+var_70]                ; CODE XREF=lower_subexp+503, lower_subexp+539
0000000000009b71         mov        r8, r14
0000000000009b74         mov        rcx, r11
0000000000009b77         mov        rdx, r12
0000000000009b7a         mov        rsi, rbx
0000000000009b7d         mov        byte [rsp+0x78+var_50], 0x10
0000000000009b82         mov        qword [rsp+0x78+var_68], r11
0000000000009b87         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000009b8c         test       rax, rax
0000000000009b8f         mov        rbp, rax
0000000000009b92         je         loc_9c90

0000000000009b98         mov        r11, qword [rsp+0x78+var_68]
0000000000009b9d         test       r11, r11
0000000000009ba0         je         loc_9c90

0000000000009ba6         test       r12, r12
0000000000009ba9         je         loc_9c90

0000000000009baf         test       r15, r15
0000000000009bb2         je         loc_9c90

0000000000009bb8         mov        rax, qword [r13+0x28]
0000000000009bbc         mov        qword [r15+0x28], rax
0000000000009bc0         mov        qword [r12+0x28], rax
0000000000009bc5         movzx      eax, byte [r13+0x32]
0000000000009bca         movzx      edx, byte [r15+0x32]
0000000000009bcf         and        eax, 0x8
0000000000009bd2         and        edx, 0xfffffff7
0000000000009bd5         mov        ecx, eax
0000000000009bd7         or         edx, ecx
0000000000009bd9         mov        byte [r15+0x32], dl
0000000000009bdd         movzx      eax, byte [r12+0x32]
0000000000009be3         and        eax, 0xfffffff7
0000000000009be6         or         eax, ecx
0000000000009be8         mov        byte [r12+0x32], al

                     loc_9bed:
0000000000009bed         mov        rdi, qword [rsp+0x78+var_40]                ; CODE XREF=lower_subexp+68, lower_subexp+85, lower_subexp+557
0000000000009bf2         xor        rdi, qword [fs:0x28]
0000000000009bfb         mov        rax, rbp
0000000000009bfe         jne        loc_9ca2

0000000000009c04         add        rsp, 0x48
0000000000009c08         pop        rbx
0000000000009c09         pop        rbp
0000000000009c0a         pop        r12
0000000000009c0c         pop        r13
0000000000009c0e         pop        r14
0000000000009c10         pop        r15
0000000000009c12         ret
                        ; endp
0000000000009c13         align      8

                     loc_9c18:
0000000000009c18         lea        rax, qword [rbx+0x70]                       ; CODE XREF=lower_subexp+49
0000000000009c1c         lea        r14, qword [rsp+0x78+var_58]
0000000000009c21         sub        rbx, 0xffffffffffffff80
0000000000009c25         xor        ecx, ecx
0000000000009c27         xor        edx, edx
0000000000009c29         mov        rsi, rbx
0000000000009c2c         mov        r15, rax
0000000000009c2f         mov        r8, r14
0000000000009c32         mov        rdi, rax
0000000000009c35         mov        byte [rsp+0x78+var_50], 0x8
0000000000009c3a         mov        qword [rsp+0x78+var_70], rax
0000000000009c3f         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000009c44         xor        ecx, ecx
0000000000009c46         xor        edx, edx
0000000000009c48         mov        rdi, r15
0000000000009c4b         mov        r8, r14
0000000000009c4e         mov        rsi, rbx
0000000000009c51         mov        r12, rax
0000000000009c54         mov        byte [rsp+0x78+var_50], 0x9
0000000000009c59         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000009c5e         test       rbp, rbp
0000000000009c61         mov        r15, rax
0000000000009c64         mov        r11, rax
0000000000009c67         je         loc_9b6c

                     loc_9c6d:
0000000000009c6d         mov        rdi, qword [rsp+0x78+var_70]                ; CODE XREF=lower_subexp+164
0000000000009c72         mov        r8, r14
0000000000009c75         mov        rcx, r15
0000000000009c78         mov        rdx, rbp
0000000000009c7b         mov        rsi, rbx
0000000000009c7e         mov        byte [rsp+0x78+var_50], 0x10
0000000000009c83         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000009c88         mov        r11, rax
0000000000009c8b         jmp        loc_9b6c

                     loc_9c90:
0000000000009c90         mov        rax, qword [rsp+0x78+var_60]                ; CODE XREF=lower_subexp+290, lower_subexp+304, lower_subexp+313, lower_subexp+322
0000000000009c95         xor        ebp, ebp
0000000000009c97         mov        dword [rax], 0xc
0000000000009c9d         jmp        loc_9bed

                     loc_9ca2:
0000000000009ca2         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=lower_subexp+398
                        ; endp
0000000000009ca7         align      16                                          ; End of unwind block (FDE at 0x18ed0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_20: int64_t, -32
        ;    var_24: int32_t, -36


                     lower_subexps:
0000000000009cb0         push       rbp                                         ; Begin of unwind block (FDE at 0x18f20), DATA XREF=re_compile_internal+1638
0000000000009cb1         push       rbx
0000000000009cb2         mov        rbp, rdi
0000000000009cb5         mov        rbx, rsi
0000000000009cb8         sub        rsp, 0x18
0000000000009cbc         mov        rdx, qword [rsi+8]
0000000000009cc0         mov        rax, qword [fs:0x28]
0000000000009cc9         mov        qword [rsp+0x28+var_20], rax
0000000000009cce         xor        eax, eax
0000000000009cd0         mov        dword [rsp+0x28+var_24], 0x0
0000000000009cd8         test       rdx, rdx
0000000000009cdb         je         loc_9ce3

0000000000009cdd         cmp        byte [rdx+0x30], 0x11
0000000000009ce1         je         loc_9d30

                     loc_9ce3:
0000000000009ce3         mov        rdx, qword [rbx+0x10]                       ; CODE XREF=lower_subexps+43, lower_subexps+148, lower_subexps+153
0000000000009ce7         test       rdx, rdx
0000000000009cea         je         loc_9cf2

0000000000009cec         cmp        byte [rdx+0x30], 0x11
0000000000009cf0         je         loc_9d10

                     loc_9cf2:
0000000000009cf2         mov        rcx, qword [rsp+0x28+var_20]                ; CODE XREF=lower_subexps+58, lower_subexps+116, lower_subexps+121
0000000000009cf7         xor        rcx, qword [fs:0x28]
0000000000009d00         mov        eax, dword [rsp+0x28+var_24]
0000000000009d04         jne        loc_9d4b

0000000000009d06         add        rsp, 0x18
0000000000009d0a         pop        rbx
0000000000009d0b         pop        rbp
0000000000009d0c         ret
                        ; endp
0000000000009d0d         align      16

                     loc_9d10:
0000000000009d10         lea        rdi, qword [rsp+0x28+var_24]                ; CODE XREF=lower_subexps+64
0000000000009d15         mov        rsi, rbp
0000000000009d18         call       lower_subexp                                ; lower_subexp
0000000000009d1d         test       rax, rax
0000000000009d20         mov        qword [rbx+0x10], rax
0000000000009d24         je         loc_9cf2

0000000000009d26         mov        qword [rax], rbx
0000000000009d29         jmp        loc_9cf2
0000000000009d2b         align      16

                     loc_9d30:
0000000000009d30         lea        rdi, qword [rsp+0x28+var_24]                ; CODE XREF=lower_subexps+49
0000000000009d35         mov        rsi, rbp
0000000000009d38         call       lower_subexp                                ; lower_subexp
0000000000009d3d         test       rax, rax
0000000000009d40         mov        qword [rbx+8], rax
0000000000009d44         je         loc_9ce3

0000000000009d46         mov        qword [rax], rbx
0000000000009d49         jmp        loc_9ce3

                     loc_9d4b:
0000000000009d4b         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=lower_subexps+84
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_node_set_init_copy:
0000000000009d50         push       r12                                         ; End of unwind block (FDE at 0x18f20), Begin of unwind block (FDE at 0x18f4c), CODE XREF=re_node_set_init_union+235, re_acquire_state_context+232, re_acquire_state_context+649, re_acquire_state+187, expand_bkref_cache+390, build_trtable+1614, check_arrival+1551, set_regs+1237, update_cur_sifted_state+2049, sub_14120+592
0000000000009d52         push       rbp
0000000000009d53         push       rbx
0000000000009d54         mov        rax, qword [rsi+8]
0000000000009d58         mov        qword [rdi+8], rax
0000000000009d5c         mov        r12, qword [rsi+8]
0000000000009d60         test       r12, r12
0000000000009d63         jle        loc_9da0

0000000000009d65         mov        rbx, rdi
0000000000009d68         mov        qword [rdi], rax
0000000000009d6b         lea        rdi, qword [rax*8]                          ; argument "__size" for method j_malloc
0000000000009d73         mov        rbp, rsi
0000000000009d76         call       j_malloc                                    ; malloc
0000000000009d7b         test       rax, rax
0000000000009d7e         mov        qword [rbx+0x10], rax
0000000000009d82         je         loc_9dc0

0000000000009d84         mov        rsi, qword [rbp+0x10]                       ; argument "__src" for method j_memcpy
0000000000009d88         lea        rdx, qword [r12*8]                          ; argument "__n" for method j_memcpy
0000000000009d90         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
0000000000009d93         call       j_memcpy                                    ; memcpy
0000000000009d98         xor        eax, eax

                     loc_9d9a:
0000000000009d9a         pop        rbx                                         ; CODE XREF=re_node_set_init_copy+132
0000000000009d9b         pop        rbp
0000000000009d9c         pop        r12
0000000000009d9e         ret
                        ; endp
0000000000009d9f         align      32

                     loc_9da0:
0000000000009da0         pxor       xmm0, xmm0                                  ; CODE XREF=re_node_set_init_copy+19
0000000000009da4         mov        qword [rdi+0x10], 0x0
0000000000009dac         xor        eax, eax
0000000000009dae         movups     xmmword [rdi], xmm0
0000000000009db1         pop        rbx
0000000000009db2         pop        rbp
0000000000009db3         pop        r12
0000000000009db5         ret
                        ; endp
0000000000009db6         align      64

                     loc_9dc0:
0000000000009dc0         mov        qword [rbx+8], 0x0                          ; CODE XREF=re_node_set_init_copy+50
0000000000009dc8         mov        qword [rbx], 0x0
0000000000009dcf         mov        eax, 0xc
0000000000009dd4         jmp        loc_9d9a
0000000000009dd6         align      32                                          ; End of unwind block (FDE at 0x18f4c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_node_set_init_union:
0000000000009de0         test       rsi, rsi                                    ; Begin of unwind block (FDE at 0x18f88), CODE XREF=merge_state_array+96, transit_state_bkref.isra.34+1185, merge_state_with_log+188, re_search_internal+3431
0000000000009de3         push       r14
0000000000009de5         push       r13
0000000000009de7         push       r12
0000000000009de9         push       rbp
0000000000009dea         push       rbx
0000000000009deb         je         loc_9e95

0000000000009df1         test       rdx, rdx
0000000000009df4         mov        r13, qword [rsi+8]
0000000000009df8         je         loc_9e90

0000000000009dfe         test       r13, r13
0000000000009e01         jle        loc_9e90

0000000000009e07         mov        r14, qword [rdx+8]
0000000000009e0b         test       r14, r14
0000000000009e0e         jle        loc_9ec3

0000000000009e14         mov        r12, rdi
0000000000009e17         lea        rdi, qword [r13+r14]
0000000000009e1c         mov        rbx, rdx
0000000000009e1f         mov        rbp, rsi
0000000000009e22         mov        qword [r12], rdi
0000000000009e26         shl        rdi, 0x3                                    ; argument "__size" for method j_malloc
0000000000009e2a         call       j_malloc                                    ; malloc
0000000000009e2f         test       rax, rax
0000000000009e32         mov        qword [r12+0x10], rax
0000000000009e37         je         loc_9f28

0000000000009e3d         mov        r9, qword [rbx+0x10]
0000000000009e41         mov        r8, qword [rbp+0x10]
0000000000009e45         xor        ebx, ebx
0000000000009e47         xor        ecx, ecx
0000000000009e49         xor        esi, esi
0000000000009e4b         jmp        loc_9e6e
0000000000009e4d         align      16

                     loc_9e50:
0000000000009e50         sete       dil                                         ; CODE XREF=re_node_set_init_union+157
0000000000009e54         mov        qword [rax+rbx*8-8], rdx
0000000000009e59         add        rsi, 0x1
0000000000009e5d         movzx      edi, dil
0000000000009e61         add        rcx, rdi

                     loc_9e64:
0000000000009e64         cmp        r13, rsi                                    ; CODE XREF=re_node_set_init_union+168
0000000000009e67         jle        loc_9ed0

0000000000009e69         cmp        r14, rcx
0000000000009e6c         jle        loc_9ee8

                     loc_9e6e:
0000000000009e6e         mov        rdx, qword [r8+rsi*8]                       ; CODE XREF=re_node_set_init_union+107
0000000000009e72         mov        rdi, qword [r9+rcx*8]
0000000000009e76         add        rbx, 0x1
0000000000009e7a         cmp        rdx, rdi
0000000000009e7d         jle        loc_9e50

0000000000009e7f         add        rcx, 0x1
0000000000009e83         mov        qword [rax+rbx*8-8], rdi
0000000000009e88         jmp        loc_9e64
0000000000009e8a         align      16

                     loc_9e90:
0000000000009e90         test       r13, r13                                    ; CODE XREF=re_node_set_init_union+24, re_node_set_init_union+33
0000000000009e93         jg         loc_9ec3

                     loc_9e95:
0000000000009e95         test       rdx, rdx                                    ; CODE XREF=re_node_set_init_union+11
0000000000009e98         je         loc_9ea1

0000000000009e9a         cmp        qword [rdx+8], 0x0
0000000000009e9f         jg         loc_9ec0

                     loc_9ea1:
0000000000009ea1         pxor       xmm0, xmm0                                  ; CODE XREF=re_node_set_init_union+184
0000000000009ea5         mov        qword [rdi+0x10], 0x0
0000000000009ead         xor        eax, eax
0000000000009eaf         movaps     xmmword [rdi], xmm0

                     loc_9eb2:
0000000000009eb2         pop        rbx                                         ; CODE XREF=re_node_set_init_union+333
0000000000009eb3         pop        rbp
0000000000009eb4         pop        r12
0000000000009eb6         pop        r13
0000000000009eb8         pop        r14
0000000000009eba         ret
                        ; endp
0000000000009ebb         align      64

                     loc_9ec0:
0000000000009ec0         mov        rsi, rdx                                    ; CODE XREF=re_node_set_init_union+191

                     loc_9ec3:
0000000000009ec3         pop        rbx                                         ; CODE XREF=re_node_set_init_union+46, re_node_set_init_union+179
0000000000009ec4         pop        rbp
0000000000009ec5         pop        r12
0000000000009ec7         pop        r13
0000000000009ec9         pop        r14
0000000000009ecb         jmp        re_node_set_init_copy                       ; re_node_set_init_copy
                        ; endp

                     loc_9ed0:
0000000000009ed0         cmp        r14, rcx                                    ; CODE XREF=re_node_set_init_union+135
0000000000009ed3         jg         loc_9f08

                     loc_9ed5:
0000000000009ed5         mov        qword [r12+8], rbx                          ; CODE XREF=re_node_set_init_union+291, re_node_set_init_union+323
0000000000009eda         xor        eax, eax
0000000000009edc         pop        rbx
0000000000009edd         pop        rbp
0000000000009ede         pop        r12
0000000000009ee0         pop        r13
0000000000009ee2         pop        r14
0000000000009ee4         ret
                        ; endp
0000000000009ee5         align      8

                     loc_9ee8:
0000000000009ee8         sub        r13, rsi                                    ; CODE XREF=re_node_set_init_union+140
0000000000009eeb         lea        rdi, qword [rax+rbx*8]                      ; argument "__dest" for method j_memcpy
0000000000009eef         lea        rsi, qword [r8+rsi*8]                       ; argument "__src" for method j_memcpy
0000000000009ef3         lea        rdx, qword [r13*8]                          ; argument "__n" for method j_memcpy
0000000000009efb         add        rbx, r13
0000000000009efe         call       j_memcpy                                    ; memcpy
0000000000009f03         jmp        loc_9ed5
0000000000009f05         align      8

                     loc_9f08:
0000000000009f08         sub        r14, rcx                                    ; CODE XREF=re_node_set_init_union+243
0000000000009f0b         lea        rdi, qword [rax+rbx*8]                      ; argument "__dest" for method j_memcpy
0000000000009f0f         lea        rsi, qword [r9+rcx*8]                       ; argument "__src" for method j_memcpy
0000000000009f13         lea        rdx, qword [r14*8]                          ; argument "__n" for method j_memcpy
0000000000009f1b         add        rbx, r14
0000000000009f1e         call       j_memcpy                                    ; memcpy
0000000000009f23         jmp        loc_9ed5
0000000000009f25         align      8

                     loc_9f28:
0000000000009f28         mov        eax, 0xc                                    ; CODE XREF=re_node_set_init_union+87
0000000000009f2d         jmp        loc_9eb2
0000000000009f32         align      64                                          ; End of unwind block (FDE at 0x18f88)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_54: int32_t, -84


                     re_acquire_state_context:
0000000000009f40         push       r15                                         ; Begin of unwind block (FDE at 0x18fec), CODE XREF=build_trtable+597, build_trtable+2464, build_trtable+2539, check_arrival+987, check_arrival+1653, transit_state_bkref.isra.34+1239, transit_state_bkref.isra.34+1970, merge_state_with_log+254, merge_state_with_log+354, re_search_internal+3497, re_search_internal+3734
0000000000009f42         push       r14
0000000000009f44         push       r13
0000000000009f46         push       r12
0000000000009f48         push       rbp
0000000000009f49         push       rbx
0000000000009f4a         sub        rsp, 0x28
0000000000009f4e         mov        r10, qword [rdx+8]
0000000000009f52         test       r10, r10
0000000000009f55         je         loc_a1df

0000000000009f5b         mov        r8d, ecx
0000000000009f5e         test       r10, r10
0000000000009f61         lea        r12, qword [r8+r10]
0000000000009f65         jle        loc_9f7c

0000000000009f67         mov        rax, qword [rdx+0x10]
0000000000009f6b         lea        r10, qword [rax+r10*8]
0000000000009f6f         nop

                     loc_9f70:
0000000000009f70         add        r12, qword [rax]                            ; CODE XREF=re_acquire_state_context+58
0000000000009f73         add        rax, 0x8
0000000000009f77         cmp        r10, rax
0000000000009f7a         jne        loc_9f70

                     loc_9f7c:
0000000000009f7c         mov        rax, qword [rsi+0x88]                       ; CODE XREF=re_acquire_state_context+37
0000000000009f83         mov        rbp, rdx
0000000000009f86         mov        dword [rsp+0x58+var_54], ecx
0000000000009f8a         mov        r13, rsi
0000000000009f8d         mov        qword [rsp+0x58+var_40], rdi
0000000000009f92         and        rax, r12
0000000000009f95         lea        rdx, qword [rax+rax*2]
0000000000009f99         mov        rax, qword [rsi+0x40]
0000000000009f9d         lea        rax, qword [rax+rdx*8]
0000000000009fa1         mov        r11, qword [rax]
0000000000009fa4         test       r11, r11
0000000000009fa7         jle        loc_a000

0000000000009fa9         mov        rbx, qword [rax+0x10]
0000000000009fad         xor        r10d, r10d
0000000000009fb0         mov        r9d, ecx
0000000000009fb3         jmp        loc_9fc1
0000000000009fb5         align      8

                     loc_9fb8:
0000000000009fb8         add        r10, 0x1                                    ; CODE XREF=re_acquire_state_context+136, re_acquire_state_context+149, re_acquire_state_context+158, re_acquire_state_context+170
0000000000009fbc         cmp        r10, r11
0000000000009fbf         je         loc_a000

                     loc_9fc1:
0000000000009fc1         mov        r14, qword [rbx+r10*8]                      ; CODE XREF=re_acquire_state_context+115
0000000000009fc5         cmp        qword [r14], r12
0000000000009fc8         jne        loc_9fb8

0000000000009fca         movzx      eax, byte [r14+0x68]
0000000000009fcf         and        eax, 0xf
0000000000009fd2         cmp        eax, r9d
0000000000009fd5         jne        loc_9fb8

0000000000009fd7         mov        rdi, qword [r14+0x50]
0000000000009fdb         test       rdi, rdi
0000000000009fde         je         loc_9fb8

0000000000009fe0         mov        rsi, rbp
0000000000009fe3         call       re_node_set_compare.part.2                  ; re_node_set_compare.part.2
0000000000009fe8         test       al, al
0000000000009fea         je         loc_9fb8

                     loc_9fec:
0000000000009fec         add        rsp, 0x28                                   ; CODE XREF=re_acquire_state_context+520, re_acquire_state_context+548, re_acquire_state_context+680
0000000000009ff0         mov        rax, r14
0000000000009ff3         pop        rbx
0000000000009ff4         pop        rbp
0000000000009ff5         pop        r12
0000000000009ff7         pop        r13
0000000000009ff9         pop        r14
0000000000009ffb         pop        r15
0000000000009ffd         ret
                        ; endp
0000000000009ffe         align      8192

                     loc_a000:
000000000000a000         mov        esi, 0x1                                    ; argument "__size" for method j_calloc, CODE XREF=re_acquire_state_context+103, re_acquire_state_context+127
000000000000a005         mov        edi, 0x70                                   ; argument "__nmemb" for method j_calloc
000000000000a00a         call       j_calloc                                    ; calloc
000000000000a00f         test       rax, rax
000000000000a012         mov        r14, rax
000000000000a015         je         loc_a156

000000000000a01b         lea        rax, qword [rax+8]
000000000000a01f         mov        rsi, rbp
000000000000a022         mov        rdi, rax
000000000000a025         mov        rbx, rax
000000000000a028         call       re_node_set_init_copy                       ; re_node_set_init_copy
000000000000a02d         test       eax, eax
000000000000a02f         jne        loc_a1ed

000000000000a035         movzx      eax, byte [r14+0x68]
000000000000a03a         movzx      edx, byte [rsp+0x58+var_54]
000000000000a03f         mov        qword [r14+0x50], rbx
000000000000a043         and        edx, 0xf
000000000000a046         and        eax, 0xfffffff0
000000000000a049         or         eax, edx
000000000000a04b         cmp        qword [rbp+8], 0x0
000000000000a050         mov        byte [r14+0x68], al
000000000000a054         jle        loc_a138

000000000000a05a         lea        rcx, qword [r14+0x18]
000000000000a05e         xor        r15d, r15d
000000000000a061         mov        qword [rsp+0x58+var_48], r12
000000000000a066         xor        r10d, r10d
000000000000a069         mov        r12, r13
000000000000a06c         mov        r13, r15
000000000000a06f         mov        qword [rsp+0x58+var_50], rcx
000000000000a074         mov        r15, rbx
000000000000a077         nop        word [rax+rax]

                     loc_a080:
000000000000a080         mov        rax, qword [rbp+0x10]                       ; CODE XREF=re_acquire_state_context+490
000000000000a084         mov        rax, qword [rax+r13*8]
000000000000a088         shl        rax, 0x4
000000000000a08c         add        rax, qword [r12]
000000000000a090         movzx      esi, byte [rax+8]
000000000000a094         mov        ebx, dword [rax+8]
000000000000a097         shr        ebx, 0x8
000000000000a09a         and        bx, 0x3ff
000000000000a09f         cmp        esi, 0x1
000000000000a0a2         movzx      edi, bx
000000000000a0a5         jne        loc_a0ab

000000000000a0a7         test       edi, edi
000000000000a0a9         je         loc_a122

                     loc_a0ab:
000000000000a0ab         movzx      edx, byte [r14+0x68]                        ; CODE XREF=re_acquire_state_context+357
000000000000a0b0         movzx      eax, byte [rax+0xa]
000000000000a0b4         mov        r9d, edx
000000000000a0b7         shr        al, 0x4
000000000000a0ba         and        edx, 0xffffffdf
000000000000a0bd         shr        r9b, 0x5
000000000000a0c1         or         eax, r9d
000000000000a0c4         and        eax, 0x1
000000000000a0c7         shl        eax, 0x5
000000000000a0ca         or         eax, edx
000000000000a0cc         cmp        esi, 0x2
000000000000a0cf         mov        byte [r14+0x68], al
000000000000a0d3         je         loc_a1a0

000000000000a0d9         cmp        esi, 0x4
000000000000a0dc         jne        loc_a0e5

000000000000a0de         or         eax, 0x40
000000000000a0e1         mov        byte [r14+0x68], al

                     loc_a0e5:
000000000000a0e5         test       edi, edi                                    ; CODE XREF=re_acquire_state_context+412, re_acquire_state_context+615
000000000000a0e7         je         loc_a122

000000000000a0e9         cmp        r15, qword [r14+0x50]
000000000000a0ed         je         loc_a1b0

                     loc_a0f3:
000000000000a0f3         test       bl, 0x1                                     ; CODE XREF=re_acquire_state_context+666
000000000000a0f6         je         loc_a170

000000000000a0f8         test       byte [rsp+0x58+var_54], 0x1
000000000000a0fd         je         loc_a108

000000000000a0ff         test       bl, 0x2
000000000000a102         je         loc_a17c

000000000000a104         nop        dword [rax]

                     loc_a108:
000000000000a108         mov        rdx, r13                                    ; CODE XREF=re_acquire_state_context+445, re_acquire_state_context+570, re_acquire_state_context+582, re_acquire_state_context+596
000000000000a10b         sub        rdx, r10
000000000000a10e         js         loc_a11e

000000000000a110         mov        rsi, qword [rsp+0x58+var_50]
000000000000a115         lea        rdi, qword [r14+0x10]
000000000000a119         call       re_node_set_remove_at.isra.4.part.5         ; re_node_set_remove_at.isra.4.part.5

                     loc_a11e:
000000000000a11e         add        r10, 0x1                                    ; CODE XREF=re_acquire_state_context+462

                     loc_a122:
000000000000a122         add        r13, 0x1                                    ; CODE XREF=re_acquire_state_context+361, re_acquire_state_context+423, re_acquire_state_context+587, re_acquire_state_context+594
000000000000a126         cmp        r13, qword [rbp+8]
000000000000a12a         jl         loc_a080

000000000000a130         mov        r13, r12
000000000000a133         mov        r12, qword [rsp+0x58+var_48]

                     loc_a138:
000000000000a138         mov        rdx, r12                                    ; CODE XREF=re_acquire_state_context+276
000000000000a13b         mov        rsi, r14
000000000000a13e         mov        rdi, r13
000000000000a141         call       register_state                              ; register_state
000000000000a146         test       eax, eax
000000000000a148         je         loc_9fec

                     loc_a14e:
000000000000a14e         mov        rdi, r14                                    ; CODE XREF=re_acquire_state_context+641
000000000000a151         call       free_state                                  ; free_state

                     loc_a156:
000000000000a156         mov        rax, qword [rsp+0x58+var_40]                ; CODE XREF=re_acquire_state_context+213, re_acquire_state_context+656, re_acquire_state_context+693
000000000000a15b         xor        r14d, r14d
000000000000a15e         mov        dword [rax], 0xc
000000000000a164         jmp        loc_9fec
000000000000a169         align      16

                     loc_a170:
000000000000a170         test       bl, 0x2                                     ; CODE XREF=re_acquire_state_context+438
000000000000a173         je         loc_a17c

000000000000a175         test       byte [rsp+0x58+var_54], 0x1
000000000000a17a         jne        loc_a108

                     loc_a17c:
000000000000a17c         test       bl, 0x10                                    ; CODE XREF=re_acquire_state_context+450, re_acquire_state_context+563
000000000000a17f         je         loc_a188

000000000000a181         test       byte [rsp+0x58+var_54], 0x2
000000000000a186         je         loc_a108

                     loc_a188:
000000000000a188         and        ebx, 0x40                                   ; CODE XREF=re_acquire_state_context+575
000000000000a18b         je         loc_a122

000000000000a18d         test       byte [rsp+0x58+var_54], 0x4
000000000000a192         jne        loc_a122

000000000000a194         jmp        loc_a108
000000000000a199         align      32

                     loc_a1a0:
000000000000a1a0         or         eax, 0x10                                   ; CODE XREF=re_acquire_state_context+403
000000000000a1a3         mov        byte [r14+0x68], al
000000000000a1a7         jmp        loc_a0e5
000000000000a1ac         align      16

                     loc_a1b0:
000000000000a1b0         mov        edi, 0x18                                   ; argument "__size" for method j_malloc, CODE XREF=re_acquire_state_context+429
000000000000a1b5         call       j_malloc                                    ; malloc
000000000000a1ba         test       rax, rax
000000000000a1bd         mov        qword [r14+0x50], rax
000000000000a1c1         je         loc_a14e

000000000000a1c3         mov        rsi, rbp
000000000000a1c6         mov        rdi, rax
000000000000a1c9         call       re_node_set_init_copy                       ; re_node_set_init_copy
000000000000a1ce         test       eax, eax
000000000000a1d0         jne        loc_a156

000000000000a1d2         or         byte [r14+0x68], 0x80
000000000000a1d7         xor        r10d, r10d
000000000000a1da         jmp        loc_a0f3

                     loc_a1df:
000000000000a1df         mov        dword [rdi], 0x0                            ; CODE XREF=re_acquire_state_context+21
000000000000a1e5         xor        r14d, r14d
000000000000a1e8         jmp        loc_9fec

                     loc_a1ed:
000000000000a1ed         mov        rdi, r14                                    ; argument "__ptr" for method j_free, CODE XREF=re_acquire_state_context+239
000000000000a1f0         call       j_free                                      ; free
000000000000a1f5         jmp        loc_a156
000000000000a1fa         align      512                                         ; End of unwind block (FDE at 0x18fec)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_acquire_state:
000000000000a200         push       r15                                         ; Begin of unwind block (FDE at 0x19038), CODE XREF=merge_state_array+120, expand_bkref_cache+464, check_arrival+754, update_cur_sifted_state+219, update_cur_sifted_state+307
000000000000a202         push       r14
000000000000a204         push       r13
000000000000a206         push       r12
000000000000a208         push       rbp
000000000000a209         push       rbx
000000000000a20a         sub        rsp, 0x8
000000000000a20e         mov        rbp, qword [rdx+8]
000000000000a212         test       rbp, rbp
000000000000a215         je         loc_a3f0

000000000000a21b         test       rbp, rbp
000000000000a21e         jle        loc_a23c

000000000000a220         mov        rax, qword [rdx+0x10]
000000000000a224         lea        rcx, qword [rax+rbp*8]
000000000000a228         nop        dword [rax+rax]

                     loc_a230:
000000000000a230         add        rbp, qword [rax]                            ; CODE XREF=re_acquire_state+58
000000000000a233         add        rax, 0x8
000000000000a237         cmp        rcx, rax
000000000000a23a         jne        loc_a230

                     loc_a23c:
000000000000a23c         mov        rax, qword [rsi+0x88]                       ; CODE XREF=re_acquire_state+30
000000000000a243         mov        r14, rdx
000000000000a246         mov        r12, rsi
000000000000a249         mov        r13, rdi
000000000000a24c         and        rax, rbp
000000000000a24f         lea        rdx, qword [rax+rax*2]
000000000000a253         mov        rax, qword [rsi+0x40]
000000000000a257         lea        rax, qword [rax+rdx*8]
000000000000a25b         mov        r10, qword [rax]
000000000000a25e         test       r10, r10
000000000000a261         jle        loc_a296

000000000000a263         mov        r11, qword [rax+0x10]
000000000000a267         xor        r9d, r9d
000000000000a26a         nop        word [rax+rax]

                     loc_a270:
000000000000a270         mov        rbx, qword [r11+r9*8]                       ; CODE XREF=re_acquire_state+148
000000000000a274         cmp        qword [rbx], rbp
000000000000a277         jne        loc_a28d

000000000000a279         lea        rdi, qword [rbx+8]
000000000000a27d         mov        rsi, r14
000000000000a280         call       re_node_set_compare.part.2                  ; re_node_set_compare.part.2
000000000000a285         test       al, al
000000000000a287         jne        loc_a38f

                     loc_a28d:
000000000000a28d         add        r9, 0x1                                     ; CODE XREF=re_acquire_state+119
000000000000a291         cmp        r10, r9
000000000000a294         jne        loc_a270

                     loc_a296:
000000000000a296         mov        esi, 0x1                                    ; argument "__size" for method j_calloc, CODE XREF=re_acquire_state+97
000000000000a29b         mov        edi, 0x70                                   ; argument "__nmemb" for method j_calloc
000000000000a2a0         call       j_calloc                                    ; calloc
000000000000a2a5         test       rax, rax
000000000000a2a8         mov        rbx, rax
000000000000a2ab         je         loc_a3d8

000000000000a2b1         lea        r15, qword [rax+8]
000000000000a2b5         mov        rsi, r14
000000000000a2b8         mov        rdi, r15
000000000000a2bb         call       re_node_set_init_copy                       ; re_node_set_init_copy
000000000000a2c0         test       eax, eax
000000000000a2c2         jne        loc_a3d0

000000000000a2c8         mov        rax, qword [r14+8]
000000000000a2cc         mov        qword [rbx+0x50], r15
000000000000a2d0         test       rax, rax
000000000000a2d3         jle        loc_a37d

000000000000a2d9         mov        rsi, qword [r14+0x10]
000000000000a2dd         mov        r8, qword [r12]
000000000000a2e1         lea        r9, qword [rsi+rax*8]
000000000000a2e5         jmp        loc_a334
000000000000a2e7         align      16

                     loc_a2f0:
000000000000a2f0         movzx      ecx, byte [rbx+0x68]                        ; CODE XREF=re_acquire_state+325
000000000000a2f4         movzx      edx, byte [rax+0xa]
000000000000a2f8         mov        r10d, ecx
000000000000a2fb         shr        dl, 0x4
000000000000a2fe         and        ecx, 0xffffffdf
000000000000a301         shr        r10b, 0x5
000000000000a305         or         edx, r10d
000000000000a308         and        edx, 0x1
000000000000a30b         shl        edx, 0x5
000000000000a30e         or         edx, ecx
000000000000a310         cmp        edi, 0x2
000000000000a313         mov        byte [rbx+0x68], dl
000000000000a316         je         loc_a3a8

000000000000a31c         cmp        edi, 0x4
000000000000a31f         jne        loc_a3b8

000000000000a325         or         edx, 0x40
000000000000a328         mov        byte [rbx+0x68], dl

                     loc_a32b:
000000000000a32b         add        rsi, 0x8                                    ; CODE XREF=re_acquire_state+334, re_acquire_state+430, re_acquire_state+452
000000000000a32f         cmp        r9, rsi
000000000000a332         je         loc_a37d

                     loc_a334:
000000000000a334         mov        rax, qword [rsi]                            ; CODE XREF=re_acquire_state+229, re_acquire_state+379
000000000000a337         shl        rax, 0x4
000000000000a33b         add        rax, r8
000000000000a33e         movzx      edi, byte [rax+8]
000000000000a342         cmp        edi, 0x1
000000000000a345         jne        loc_a2f0

000000000000a347         test       dword [rax+8], 0x3ff00
000000000000a34e         je         loc_a32b

000000000000a350         movzx      edx, byte [rbx+0x68]
000000000000a354         movzx      eax, byte [rax+0xa]
000000000000a358         mov        ecx, edx
000000000000a35a         shr        al, 0x4
000000000000a35d         and        edx, 0xffffffdf
000000000000a360         shr        cl, 0x5
000000000000a363         or         eax, ecx
000000000000a365         and        eax, 0x1
000000000000a368         shl        eax, 0x5
000000000000a36b         or         eax, edx
000000000000a36d         mov        byte [rbx+0x68], al

                     loc_a370:
000000000000a370         add        rsi, 0x8                                    ; CODE XREF=re_acquire_state+443, re_acquire_state+458
000000000000a374         or         byte [rbx+0x68], 0x80
000000000000a378         cmp        r9, rsi
000000000000a37b         jne        loc_a334

                     loc_a37d:
000000000000a37d         mov        rdx, rbp                                    ; CODE XREF=re_acquire_state+211, re_acquire_state+306
000000000000a380         mov        rsi, rbx
000000000000a383         mov        rdi, r12
000000000000a386         call       register_state                              ; register_state
000000000000a38b         test       eax, eax
000000000000a38d         jne        loc_a3e4

                     loc_a38f:
000000000000a38f         add        rsp, 0x8                                    ; CODE XREF=re_acquire_state+135, re_acquire_state+482, re_acquire_state+504
000000000000a393         mov        rax, rbx
000000000000a396         pop        rbx
000000000000a397         pop        rbp
000000000000a398         pop        r12
000000000000a39a         pop        r13
000000000000a39c         pop        r14
000000000000a39e         pop        r15
000000000000a3a0         ret
                        ; endp
000000000000a3a1         align      8

                     loc_a3a8:
000000000000a3a8         or         edx, 0x10                                   ; CODE XREF=re_acquire_state+278
000000000000a3ab         mov        byte [rbx+0x68], dl
000000000000a3ae         jmp        loc_a32b
000000000000a3b3         align      8

                     loc_a3b8:
000000000000a3b8         cmp        edi, 0xc                                    ; CODE XREF=re_acquire_state+287
000000000000a3bb         je         loc_a370

000000000000a3bd         test       dword [rax+8], 0x3ff00
000000000000a3c4         je         loc_a32b

000000000000a3ca         jmp        loc_a370
000000000000a3cc         align      16

                     loc_a3d0:
000000000000a3d0         mov        rdi, rbx                                    ; argument "__ptr" for method j_free, CODE XREF=re_acquire_state+194
000000000000a3d3         call       j_free                                      ; free

                     loc_a3d8:
000000000000a3d8         mov        dword [r13], 0xc                            ; CODE XREF=re_acquire_state+171, re_acquire_state+492
000000000000a3e0         xor        ebx, ebx
000000000000a3e2         jmp        loc_a38f

                     loc_a3e4:
000000000000a3e4         mov        rdi, rbx                                    ; CODE XREF=re_acquire_state+397
000000000000a3e7         call       free_state                                  ; free_state
000000000000a3ec         jmp        loc_a3d8
000000000000a3ee         align      16

                     loc_a3f0:
000000000000a3f0         mov        dword [rdi], 0x0                            ; CODE XREF=re_acquire_state+21
000000000000a3f6         xor        ebx, ebx
000000000000a3f8         jmp        loc_a38f
000000000000a3fa         align      1024                                        ; End of unwind block (FDE at 0x19038)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_58: int8_t, -88
        ;    var_5C: int32_t, -92
        ;    var_70: int64_t, -112


                     merge_state_array:
000000000000a400         push       r15                                         ; Begin of unwind block (FDE at 0x19084), CODE XREF=re_search_internal+5755, update_cur_sifted_state+1819
000000000000a402         push       r14
000000000000a404         push       r13
000000000000a406         push       r12
000000000000a408         push       rbp
000000000000a409         push       rbx
000000000000a40a         sub        rsp, 0x48
000000000000a40e         mov        rax, qword [fs:0x28]
000000000000a417         mov        qword [rsp+0x78+var_40], rax
000000000000a41c         xor        eax, eax
000000000000a41e         test       rcx, rcx
000000000000a421         jle        loc_a4b6

000000000000a427         lea        rax, qword [rsp+0x78+var_5C]
000000000000a42c         mov        r14, rdi
000000000000a42f         mov        rbx, rsi
000000000000a432         mov        r12, rdx
000000000000a435         mov        rbp, rcx
000000000000a438         xor        r15d, r15d
000000000000a43b         lea        r13, qword [rsp+0x78+var_58]
000000000000a440         mov        qword [rsp+0x78+var_70], rax
000000000000a445         jmp        loc_a49c
000000000000a447         align      16

                     loc_a450:
000000000000a450         test       rdx, rdx                                    ; CODE XREF=merge_state_array+167
000000000000a453         je         loc_a493

000000000000a455         add        rdx, 0x8
000000000000a459         add        rsi, 0x8
000000000000a45d         mov        rdi, r13
000000000000a460         call       re_node_set_init_union                      ; re_node_set_init_union
000000000000a465         test       eax, eax
000000000000a467         mov        dword [rsp+0x78+var_5C], eax
000000000000a46b         jne        loc_a4b8

000000000000a46d         mov        rdi, qword [rsp+0x78+var_70]
000000000000a472         mov        rdx, r13
000000000000a475         mov        rsi, r14
000000000000a478         call       re_acquire_state                            ; re_acquire_state
000000000000a47d         mov        rdi, qword [rsp+0x78+var_48]                ; argument "__ptr" for method j_free
000000000000a482         mov        qword [rbx+r15*8], rax
000000000000a486         call       j_free                                      ; free
000000000000a48b         mov        eax, dword [rsp+0x78+var_5C]
000000000000a48f         test       eax, eax
000000000000a491         jne        loc_a4b8

                     loc_a493:
000000000000a493         add        r15, 0x1                                    ; CODE XREF=merge_state_array+83
000000000000a497         cmp        rbp, r15
000000000000a49a         je         loc_a4b6

                     loc_a49c:
000000000000a49c         mov        rsi, qword [rbx+r15*8]                      ; CODE XREF=merge_state_array+69, merge_state_array+180
000000000000a4a0         mov        rdx, qword [r12+r15*8]
000000000000a4a4         test       rsi, rsi
000000000000a4a7         jne        loc_a450

000000000000a4a9         mov        qword [rbx+r15*8], rdx
000000000000a4ad         add        r15, 0x1
000000000000a4b1         cmp        rbp, r15
000000000000a4b4         jne        loc_a49c

                     loc_a4b6:
000000000000a4b6         xor        eax, eax                                    ; CODE XREF=merge_state_array+33, merge_state_array+154

                     loc_a4b8:
000000000000a4b8         mov        rcx, qword [rsp+0x78+var_40]                ; CODE XREF=merge_state_array+107, merge_state_array+145
000000000000a4bd         xor        rcx, qword [fs:0x28]
000000000000a4c6         jne        loc_a4d7

000000000000a4c8         add        rsp, 0x48
000000000000a4cc         pop        rbx
000000000000a4cd         pop        rbp
000000000000a4ce         pop        r12
000000000000a4d0         pop        r13
000000000000a4d2         pop        r14
000000000000a4d4         pop        r15
000000000000a4d6         ret
                        ; endp

                     loc_a4d7:
000000000000a4d7         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=merge_state_array+198
                        ; endp
000000000000a4dc         align      32                                          ; End of unwind block (FDE at 0x19084)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_5C: int32_t, -92
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_7C: int32_t, -124
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168


                     expand_bkref_cache:
000000000000a4e0         push       r15                                         ; Begin of unwind block (FDE at 0x190d0), CODE XREF=check_arrival+928, check_arrival+1614
000000000000a4e2         push       r14
000000000000a4e4         push       r13
000000000000a4e6         push       r12
000000000000a4e8         mov        r12, rdx
000000000000a4eb         push       rbp
000000000000a4ec         push       rbx
000000000000a4ed         mov        rbx, rdi
000000000000a4f0         mov        rbp, rsi
000000000000a4f3         xor        esi, esi
000000000000a4f5         sub        rsp, 0x78
000000000000a4f9         mov        rdi, qword [rdi+0xc8]
000000000000a500         mov        rax, qword [fs:0x28]
000000000000a509         mov        qword [rsp+0xa8+var_40], rax
000000000000a50e         xor        eax, eax
000000000000a510         mov        qword [rsp+0xa8+var_88], rcx
000000000000a515         mov        dword [rsp+0xa8+var_7C], r8d
000000000000a51a         mov        rdx, rdi

                     loc_a51d:
000000000000a51d         cmp        rsi, rdx                                    ; CODE XREF=expand_bkref_cache+247
000000000000a520         jge        loc_a577

000000000000a522         lea        rax, qword [rsi+rdx]
000000000000a526         mov        r8, qword [rbx+0xd8]
000000000000a52d         mov        rcx, rax
000000000000a530         shr        rcx, 0x3f
000000000000a534         add        rcx, rax
000000000000a537         sar        rcx, 0x1
000000000000a53a         lea        rax, qword [rcx+rcx*4]
000000000000a53e         cmp        r12, qword [r8+rax*8+8]
000000000000a543         jle        loc_a572

000000000000a545         jmp        loc_a5c8
000000000000a54a         align      16

                     loc_a550:
000000000000a550         lea        rdx, qword [rsi+rcx]                        ; CODE XREF=expand_bkref_cache+149
000000000000a554         mov        rax, rdx
000000000000a557         shr        rax, 0x3f
000000000000a55b         add        rax, rdx
000000000000a55e         sar        rax, 0x1
000000000000a561         lea        rdx, qword [rax+rax*4]
000000000000a565         mov        r9, rax
000000000000a568         cmp        r12, qword [r8+rdx*8+8]
000000000000a56d         jg         loc_a5d0

000000000000a56f         mov        rcx, rax

                     loc_a572:
000000000000a572         cmp        rsi, rcx                                    ; CODE XREF=expand_bkref_cache+99
000000000000a575         jl         loc_a550

                     loc_a577:
000000000000a577         cmp        rdi, rsi                                    ; CODE XREF=expand_bkref_cache+64
000000000000a57a         jle        loc_a59d

000000000000a57c         mov        rcx, qword [rbx+0xd8]
000000000000a583         lea        rax, qword [rsi+rsi*4]
000000000000a587         shl        rax, 0x3
000000000000a58b         cmp        qword [rcx+rax+8], r12
000000000000a590         mov        qword [rsp+0xa8+var_78], rax
000000000000a595         jne        loc_a59d

000000000000a597         cmp        rsi, 0xffffffffffffffff
000000000000a59b         jne        loc_a5e0

                     loc_a59d:
000000000000a59d         xor        eax, eax                                    ; CODE XREF=expand_bkref_cache+154, expand_bkref_cache+181, expand_bkref_cache+514

                     loc_a59f:
000000000000a59f         mov        rbx, qword [rsp+0xa8+var_40]                ; CODE XREF=expand_bkref_cache+833, expand_bkref_cache+854, expand_bkref_cache+865, expand_bkref_cache+872, expand_bkref_cache+888
000000000000a5a4         xor        rbx, qword [fs:0x28]
000000000000a5ad         jne        loc_a879

000000000000a5b3         add        rsp, 0x78
000000000000a5b7         pop        rbx
000000000000a5b8         pop        rbp
000000000000a5b9         pop        r12
000000000000a5bb         pop        r13
000000000000a5bd         pop        r14
000000000000a5bf         pop        r15
000000000000a5c1         ret
                        ; endp
000000000000a5c2         align      8

                     loc_a5c8:
000000000000a5c8         mov        r9, rcx                                     ; CODE XREF=expand_bkref_cache+101
000000000000a5cb         mov        rcx, rdx
000000000000a5ce         nop

                     loc_a5d0:
000000000000a5d0         lea        rsi, qword [r9+1]                           ; CODE XREF=expand_bkref_cache+141
000000000000a5d4         mov        rdx, rcx
000000000000a5d7         jmp        loc_a51d
000000000000a5dc         align      32

                     loc_a5e0:
000000000000a5e0         lea        rax, qword [rbp+0x10]                       ; CODE XREF=expand_bkref_cache+187
000000000000a5e4         mov        r13, qword [rbx+0x98]
000000000000a5eb         mov        qword [rsp+0xa8+var_A8], rax
000000000000a5ef         lea        rax, qword [rsp+0xa8+var_5C]
000000000000a5f4         mov        qword [rsp+0xa8+var_70], rax
000000000000a5f9         lea        rax, qword [rsp+0xa8+var_58]
000000000000a5fe         mov        qword [rsp+0xa8+var_98], rax

                     loc_a603:
000000000000a603         mov        rax, qword [rsp+0xa8+var_78]                ; CODE XREF=expand_bkref_cache+737
000000000000a608         lea        r15, qword [rcx+rax]
000000000000a60c         jmp        loc_a6e8
000000000000a611         align      8

                     loc_a618:
000000000000a618         mov        rax, qword [r13+0x18]                       ; CODE XREF=expand_bkref_cache+564
000000000000a61c         mov        rcx, qword [rax+r10*8]
000000000000a620         mov        r10, qword [rbx+0xb8]
000000000000a627         lea        rax, qword [r14*8]
000000000000a62f         mov        qword [rsp+0xa8+var_90], rax
000000000000a634         add        r10, rax
000000000000a637         mov        qword [rsp+0xa8+var_A0], rcx
000000000000a63c         mov        r9, qword [r10]
000000000000a63f         test       r9, r9
000000000000a642         je         loc_a7d0

000000000000a648         mov        rdi, qword [r9+0x10]
000000000000a64c         lea        rsi, qword [r9+0x18]
000000000000a650         mov        rdx, rcx
000000000000a653         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000a658         test       rax, rax
000000000000a65b         jne        loc_a6d9

000000000000a65d         mov        rdi, qword [rsp+0xa8+var_98]
000000000000a662         lea        rsi, qword [r9+8]
000000000000a666         call       re_node_set_init_copy                       ; re_node_set_init_copy
000000000000a66b         mov        rsi, qword [rsp+0xa8+var_A0]
000000000000a670         mov        rdi, qword [rsp+0xa8+var_98]
000000000000a675         mov        dword [rsp+0xa8+var_5C], eax
000000000000a679         call       re_node_set_insert                          ; re_node_set_insert
000000000000a67e         mov        edx, dword [rsp+0xa8+var_5C]
000000000000a682         test       edx, edx
000000000000a684         jne        loc_a826

000000000000a68a         cmp        al, 0x1
000000000000a68c         jne        loc_a826

000000000000a692         mov        r10, qword [rsp+0xa8+var_90]
000000000000a697         add        r10, qword [rbx+0xb8]

                     loc_a69e:
000000000000a69e         mov        rdx, qword [rsp+0xa8+var_98]                ; CODE XREF=expand_bkref_cache+816
000000000000a6a3         mov        rdi, qword [rsp+0xa8+var_70]
000000000000a6a8         mov        rsi, r13
000000000000a6ab         mov        qword [rsp+0xa8+var_A0], r10
000000000000a6b0         call       re_acquire_state                            ; re_acquire_state
000000000000a6b5         mov        r10, qword [rsp+0xa8+var_A0]
000000000000a6ba         mov        rdi, qword [rsp+0xa8+var_48]                ; argument "__ptr" for method j_free
000000000000a6bf         mov        qword [r10], rax
000000000000a6c2         call       j_free                                      ; free
000000000000a6c7         mov        rax, qword [rbx+0xb8]
000000000000a6ce         cmp        qword [rax+r14*8], 0x0
000000000000a6d3         je         loc_a815

                     loc_a6d9:
000000000000a6d9         add        r15, 0x28                                   ; CODE XREF=expand_bkref_cache+379, expand_bkref_cache+545, expand_bkref_cache+607, expand_bkref_cache+827
000000000000a6dd         cmp        byte [r15-8], 0x0
000000000000a6e2         je         loc_a59d

                     loc_a6e8:
000000000000a6e8         mov        r10, qword [r15]                            ; CODE XREF=expand_bkref_cache+300
000000000000a6eb         mov        r9, qword [rbp+8]
000000000000a6ef         mov        rsi, qword [rsp+0xa8+var_A8]
000000000000a6f3         mov        rdx, r10
000000000000a6f6         mov        rdi, r9
000000000000a6f9         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000a6fe         test       rax, rax
000000000000a701         je         loc_a6d9

000000000000a703         mov        r8, qword [r15+0x18]
000000000000a707         add        r8, r12
000000000000a70a         mov        r14, r8
000000000000a70d         sub        r14, qword [r15+0x10]
000000000000a711         cmp        r12, r14
000000000000a714         jne        loc_a618

000000000000a71a         mov        rcx, qword [r13+0x28]
000000000000a71e         lea        rax, qword [r10+r10*2]
000000000000a722         mov        rsi, qword [rsp+0xa8+var_A8]
000000000000a726         mov        rdi, r9
000000000000a729         lea        rax, qword [rcx+rax*8]
000000000000a72d         mov        rax, qword [rax+0x10]
000000000000a731         mov        r14, qword [rax]
000000000000a734         mov        rdx, r14
000000000000a737         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000a73c         test       rax, rax
000000000000a73f         jne        loc_a6d9

000000000000a741         mov        edi, 0x8                                    ; argument "__size" for method j_malloc
000000000000a746         mov        qword [rsp+0xa8+var_58], 0x1
000000000000a74f         mov        qword [rsp+0xa8+var_50], 0x1
000000000000a758         call       j_malloc                                    ; malloc
000000000000a75d         test       rax, rax
000000000000a760         mov        qword [rsp+0xa8+var_48], rax
000000000000a765         je         loc_a85d

000000000000a76b         mov        qword [rax], r14
000000000000a76e         xor        eax, eax

                     loc_a770:
000000000000a770         mov        r15, qword [rsp+0xa8+var_98]                ; CODE XREF=expand_bkref_cache+916
000000000000a775         mov        rdx, qword [rsp+0xa8+var_88]
000000000000a77a         mov        rdi, r13
000000000000a77d         mov        ecx, dword [rsp+0xa8+var_7C]
000000000000a781         mov        dword [rsp+0xa8+var_5C], eax
000000000000a785         mov        rsi, r15
000000000000a788         call       check_arrival_expand_ecl                    ; check_arrival_expand_ecl
000000000000a78d         mov        rsi, r15
000000000000a790         mov        rdi, rbp
000000000000a793         mov        r14d, eax
000000000000a796         call       re_node_set_merge                           ; re_node_set_merge
000000000000a79b         mov        rdi, qword [rsp+0xa8+var_48]                ; argument "__ptr" for method j_free
000000000000a7a0         mov        r15d, eax
000000000000a7a3         call       j_free                                      ; free
000000000000a7a8         mov        eax, dword [rsp+0xa8+var_5C]
000000000000a7ac         mov        edx, r14d
000000000000a7af         or         edx, r15d
000000000000a7b2         or         edx, eax
000000000000a7b4         jne        loc_a846

000000000000a7ba         mov        rcx, qword [rbx+0xd8]
000000000000a7c1         jmp        loc_a603
000000000000a7c6         align      16

                     loc_a7d0:
000000000000a7d0         mov        edi, 0x8                                    ; argument "__size" for method j_malloc, CODE XREF=expand_bkref_cache+354
000000000000a7d5         mov        qword [rsp+0xa8+var_90], r10
000000000000a7da         mov        qword [rsp+0xa8+var_58], 0x1
000000000000a7e3         mov        qword [rsp+0xa8+var_50], 0x1
000000000000a7ec         call       j_malloc                                    ; malloc
000000000000a7f1         test       rax, rax
000000000000a7f4         mov        qword [rsp+0xa8+var_48], rax
000000000000a7f9         je         loc_a83c

000000000000a7fb         mov        rdi, qword [rsp+0xa8+var_A0]
000000000000a800         mov        dword [rsp+0xa8+var_5C], 0x0
000000000000a808         mov        r10, qword [rsp+0xa8+var_90]
000000000000a80d         mov        qword [rax], rdi
000000000000a810         jmp        loc_a69e

                     loc_a815:
000000000000a815         mov        eax, dword [rsp+0xa8+var_5C]                ; CODE XREF=expand_bkref_cache+499
000000000000a819         test       eax, eax
000000000000a81b         je         loc_a6d9

000000000000a821         jmp        loc_a59f

                     loc_a826:
000000000000a826         mov        rdi, qword [rsp+0xa8+var_48]                ; argument "__ptr" for method j_free, CODE XREF=expand_bkref_cache+420, expand_bkref_cache+428
000000000000a82b         call       j_free                                      ; free
000000000000a830         mov        eax, dword [rsp+0xa8+var_5C]
000000000000a834         test       eax, eax
000000000000a836         jne        loc_a59f

                     loc_a83c:
000000000000a83c         mov        eax, 0xc                                    ; CODE XREF=expand_bkref_cache+793
000000000000a841         jmp        loc_a59f

                     loc_a846:
000000000000a846         test       eax, eax                                    ; CODE XREF=expand_bkref_cache+724
000000000000a848         jne        loc_a59f

000000000000a84e         test       r14d, r14d
000000000000a851         mov        eax, r14d
000000000000a854         cmove      eax, r15d
000000000000a858         jmp        loc_a59f

                     loc_a85d:
000000000000a85d         mov        qword [rsp+0xa8+var_50], 0x0                ; CODE XREF=expand_bkref_cache+645
000000000000a866         mov        qword [rsp+0xa8+var_58], 0x0
000000000000a86f         mov        eax, 0xc
000000000000a874         jmp        loc_a770

                     loc_a879:
000000000000a879         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=expand_bkref_cache+205
                        ; endp
000000000000a87e         align      128                                         ; End of unwind block (FDE at 0x190d0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80


                     check_subexp_matching_top.isra.18:
000000000000a880         push       r15                                         ; Begin of unwind block (FDE at 0x1911c), CODE XREF=transit_state_bkref.isra.34+2056, merge_state_with_log+417, re_search_internal+5535
000000000000a882         push       r14
000000000000a884         push       r13
000000000000a886         push       r12
000000000000a888         push       rbp
000000000000a889         push       rbx
000000000000a88a         sub        rsp, 0x28
000000000000a88e         cmp        qword [rsi], 0x0
000000000000a892         mov        r13, qword [rdi+0x98]
000000000000a899         jle        loc_a960

000000000000a89f         mov        r14, rdx
000000000000a8a2         mov        r12, rsi
000000000000a8a5         mov        r15, rdi
000000000000a8a8         xor        ebx, ebx
000000000000a8aa         jmp        loc_a8be
000000000000a8ac         align      16

                     loc_a8b0:
000000000000a8b0         add        rbx, 0x1                                    ; CODE XREF=check_subexp_matching_top.isra.18+84, check_subexp_matching_top.isra.18+93, check_subexp_matching_top.isra.18+106
000000000000a8b4         cmp        rbx, qword [r12]
000000000000a8b8         jge        loc_a960

                     loc_a8be:
000000000000a8be         mov        rax, qword [r14]                            ; CODE XREF=check_subexp_matching_top.isra.18+42, check_subexp_matching_top.isra.18+211
000000000000a8c1         mov        rbp, qword [rax+rbx*8]
000000000000a8c5         mov        rax, rbp
000000000000a8c8         shl        rax, 0x4
000000000000a8cc         add        rax, qword [r13]
000000000000a8d0         cmp        byte [rax+8], 0x8
000000000000a8d4         jne        loc_a8b0

000000000000a8d6         mov        rax, qword [rax]
000000000000a8d9         cmp        rax, 0x3f
000000000000a8dd         jg         loc_a8b0

000000000000a8df         mov        rsi, qword [r13+0xa0]
000000000000a8e6         bt         rsi, rax
000000000000a8ea         jae        loc_a8b0

000000000000a8ec         mov        r8, qword [r15+0xe8]
000000000000a8f3         cmp        r8, qword [r15+0xf0]
000000000000a8fa         mov        r9, qword [r15+0xf8]
000000000000a901         je         loc_a978

                     loc_a903:
000000000000a903         mov        esi, 0x30                                   ; argument "__size" for method j_calloc, CODE XREF=check_subexp_matching_top.isra.18+316
000000000000a908         mov        edi, 0x1                                    ; argument "__nmemb" for method j_calloc
000000000000a90d         mov        qword [rsp+0x58+var_48], r9
000000000000a912         mov        qword [rsp+0x58+var_50], r8
000000000000a917         mov        qword [rsp+0x58+var_40], rcx
000000000000a91c         call       j_calloc                                    ; calloc
000000000000a921         mov        r8, qword [rsp+0x58+var_50]
000000000000a926         mov        r9, qword [rsp+0x58+var_48]
000000000000a92b         test       rax, rax
000000000000a92e         mov        qword [r9+r8*8], rax
000000000000a932         je         loc_a971

000000000000a934         add        r8, 0x1
000000000000a938         add        rbx, 0x1
000000000000a93c         mov        rcx, qword [rsp+0x58+var_40]
000000000000a941         mov        qword [r15+0xe8], r8
000000000000a948         cmp        rbx, qword [r12]
000000000000a94c         mov        qword [rax+8], rbp
000000000000a950         mov        qword [rax], rcx
000000000000a953         jl         loc_a8be

000000000000a959         nop        dword [rax]

                     loc_a960:
000000000000a960         xor        eax, eax                                    ; CODE XREF=check_subexp_matching_top.isra.18+25, check_subexp_matching_top.isra.18+56

                     loc_a962:
000000000000a962         add        rsp, 0x28                                   ; CODE XREF=check_subexp_matching_top.isra.18+246
000000000000a966         pop        rbx
000000000000a967         pop        rbp
000000000000a968         pop        r12
000000000000a96a         pop        r13
000000000000a96c         pop        r14
000000000000a96e         pop        r15
000000000000a970         ret
                        ; endp

                     loc_a971:
000000000000a971         mov        eax, 0xc                                    ; CODE XREF=check_subexp_matching_top.isra.18+178, check_subexp_matching_top.isra.18+288
000000000000a976         jmp        loc_a962

                     loc_a978:
000000000000a978         lea        rax, qword [r8+r8]                          ; CODE XREF=check_subexp_matching_top.isra.18+129
000000000000a97c         mov        rsi, r8
000000000000a97f         mov        rdi, r9                                     ; argument "__ptr" for method j_realloc
000000000000a982         shl        rsi, 0x4                                    ; argument "__size" for method j_realloc
000000000000a986         mov        qword [rsp+0x58+var_50], rcx
000000000000a98b         mov        qword [rsp+0x58+var_48], rax
000000000000a990         call       j_realloc                                   ; realloc
000000000000a995         test       rax, rax
000000000000a998         mov        r9, rax
000000000000a99b         mov        rcx, qword [rsp+0x58+var_50]
000000000000a9a0         je         loc_a971

000000000000a9a2         mov        qword [r15+0xf8], rax
000000000000a9a9         mov        rax, qword [rsp+0x58+var_48]
000000000000a9ae         mov        r8, qword [r15+0xe8]
000000000000a9b5         mov        qword [r15+0xf0], rax
000000000000a9bc         jmp        loc_a903
000000000000a9c1         align      16                                          ; End of unwind block (FDE at 0x1911c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_string_context_at:
000000000000a9d0         push       rbp                                         ; Begin of unwind block (FDE at 0x19168), CODE XREF=check_node_accept+109, check_halt_state_context.isra.20+22, re_string_reconstruct+201, re_string_reconstruct+805, re_string_reconstruct+1635, check_arrival+192, check_arrival+962, check_arrival+1179, transit_state_bkref.isra.34+265, transit_state_bkref.isra.34+1092, merge_state_with_log+222
000000000000a9d1         push       rbx
000000000000a9d2         mov        rbp, rdi
000000000000a9d5         sub        rsp, 0x8
000000000000a9d9         test       rsi, rsi
000000000000a9dc         js         loc_aa30

000000000000a9de         cmp        qword [rdi+0x58], rsi
000000000000a9e2         je         loc_aa88

000000000000a9e8         cmp        dword [rdi+0x90], 0x1
000000000000a9ef         jle        loc_aa40

000000000000a9f1         mov        rax, qword [rdi+0x10]
000000000000a9f5         jmp        loc_aa0a
000000000000a9f7         align      512

                     loc_aa00:
000000000000aa00         sub        rsi, 0x1                                    ; CODE XREF=re_string_context_at+64
000000000000aa04         cmp        rsi, 0xffffffffffffffff
000000000000aa08         je         loc_aa30

                     loc_aa0a:
000000000000aa0a         mov        ebx, dword [rax+rsi*4]                      ; CODE XREF=re_string_context_at+37
000000000000aa0d         cmp        ebx, 0xffffffff
000000000000aa10         je         loc_aa00

000000000000aa12         cmp        byte [rbp+0x8e], 0x0
000000000000aa19         jne        loc_aa98

                     loc_aa1b:
000000000000aa1b         xor        eax, eax                                    ; CODE XREF=re_string_context_at+214
000000000000aa1d         cmp        ebx, 0xa
000000000000aa20         je         loc_aa6c

                     loc_aa22:
000000000000aa22         add        rsp, 0x8                                    ; CODE XREF=re_string_context_at+147, re_string_context_at+154, re_string_context_at+198, re_string_context_at+225
000000000000aa26         pop        rbx
000000000000aa27         pop        rbp
000000000000aa28         ret
                        ; endp
000000000000aa29         align      16

                     loc_aa30:
000000000000aa30         mov        eax, dword [rbp+0x70]                       ; CODE XREF=re_string_context_at+12, re_string_context_at+56
000000000000aa33         add        rsp, 0x8
000000000000aa37         pop        rbx
000000000000aa38         pop        rbp
000000000000aa39         ret
                        ; endp
000000000000aa3a         align      64

                     loc_aa40:
000000000000aa40         mov        rax, qword [rdi+8]                          ; CODE XREF=re_string_context_at+31
000000000000aa44         mov        rcx, qword [rdi+0x80]
000000000000aa4b         movzx      eax, byte [rax+rsi]
000000000000aa4f         mov        rdx, rax
000000000000aa52         sar        rax, 0x6
000000000000aa56         mov        rcx, qword [rcx+rax*8]
000000000000aa5a         mov        eax, 0x1
000000000000aa5f         bt         rcx, rdx
000000000000aa63         jb         loc_aa22

000000000000aa65         xor        eax, eax
000000000000aa67         cmp        dl, 0xa
000000000000aa6a         jne        loc_aa22

                     loc_aa6c:
000000000000aa6c         xor        eax, eax                                    ; CODE XREF=re_string_context_at+80
000000000000aa6e         cmp        byte [rbp+0x8d], 0x0
000000000000aa75         setne      al
000000000000aa78         add        rsp, 0x8
000000000000aa7c         add        eax, eax
000000000000aa7e         pop        rbx
000000000000aa7f         pop        rbp
000000000000aa80         ret
                        ; endp
000000000000aa81         align      8

                     loc_aa88:
000000000000aa88         and        edx, 0x2                                    ; CODE XREF=re_string_context_at+18
000000000000aa8b         cmp        edx, 0x1
000000000000aa8e         sbb        eax, eax
000000000000aa90         and        eax, 0x2
000000000000aa93         add        eax, 0x8
000000000000aa96         jmp        loc_aa22

                     loc_aa98:
000000000000aa98         mov        edi, ebx                                    ; argument "__wc" for method j_iswalnum, CODE XREF=re_string_context_at+73
000000000000aa9a         call       j_iswalnum                                  ; iswalnum
000000000000aa9f         test       eax, eax
000000000000aaa1         jne        loc_aaac

000000000000aaa3         cmp        ebx, 0x5f
000000000000aaa6         jne        loc_aa1b

                     loc_aaac:
000000000000aaac         mov        eax, 0x1                                    ; CODE XREF=re_string_context_at+209
000000000000aab1         jmp        loc_aa22
000000000000aab6         align      64                                          ; End of unwind block (FDE at 0x19168)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     check_node_accept:
000000000000aac0         mov        rax, qword [rdi+8]                          ; Begin of unwind block (FDE at 0x191ac), CODE XREF=check_arrival+495, set_regs+378, sift_states_backward+295
000000000000aac4         movzx      ecx, byte [rax+rdx]
000000000000aac8         movzx      eax, byte [rsi+8]
000000000000aacc         cmp        al, 0x3
000000000000aace         je         loc_ab88

000000000000aad4         jbe        loc_ab70

000000000000aada         cmp        al, 0x5
000000000000aadc         je         loc_aaf0

000000000000aade         cmp        al, 0x7
000000000000aae0         jne        loc_ab80

000000000000aae6         xor        eax, eax
000000000000aae8         test       cl, cl
000000000000aaea         js         loc_ab7a

                     loc_aaf0:
000000000000aaf0         cmp        cl, 0xa                                     ; CODE XREF=check_node_accept+28
000000000000aaf3         je         loc_abb8

000000000000aaf9         test       cl, cl
000000000000aafb         jne        loc_ab10

000000000000aafd         mov        rcx, qword [rdi+0x98]
000000000000ab04         xor        eax, eax
000000000000ab06         test       byte [rcx+0xd8], 0x80
000000000000ab0d         jne        loc_ab7a

000000000000ab0f         nop

                     loc_ab10:
000000000000ab10         push       rbx                                         ; CODE XREF=check_node_accept+59, check_node_accept+184, check_node_accept+220, check_node_accept+264
000000000000ab11         mov        ebx, dword [rsi+8]
000000000000ab14         mov        eax, 0x1
000000000000ab19         test       ebx, 0x3ff00
000000000000ab1f         je         loc_ab6c

000000000000ab21         mov        rsi, rdx
000000000000ab24         mov        edx, dword [rdi+0xa0]
000000000000ab2a         shr        ebx, 0x8
000000000000ab2d         call       re_string_context_at                        ; re_string_context_at
000000000000ab32         mov        ecx, ebx
000000000000ab34         mov        edx, eax
000000000000ab36         and        cx, 0x3ff
000000000000ab3b         test       bl, 0x4
000000000000ab3e         je         loc_aba8

000000000000ab40         xor        eax, eax
000000000000ab42         test       dl, 0x1
000000000000ab45         je         loc_ab6c

000000000000ab47         and        ebx, 0x8
000000000000ab4a         jne        loc_ab6c

                     loc_ab4c:
000000000000ab4c         test       cl, 0x20                                    ; CODE XREF=check_node_accept+235, check_node_accept+239
000000000000ab4f         je         loc_ab58

000000000000ab51         xor        eax, eax
000000000000ab53         test       dl, 0x2
000000000000ab56         je         loc_ab6c

                     loc_ab58:
000000000000ab58         shr        edx, 0x3                                    ; CODE XREF=check_node_accept+143
000000000000ab5b         mov        eax, 0x1
000000000000ab60         and        edx, 0x1
000000000000ab63         and        ecx, 0x80
000000000000ab69         cmovne     eax, edx

                     loc_ab6c:
000000000000ab6c         pop        rbx                                         ; CODE XREF=check_node_accept+95, check_node_accept+133, check_node_accept+138, check_node_accept+150
000000000000ab6d         ret
                        ; endp
000000000000ab6e         align      16

                     loc_ab70:
000000000000ab70         cmp        al, 0x1                                     ; CODE XREF=check_node_accept+20
000000000000ab72         jne        loc_ab80

000000000000ab74         xor        eax, eax
000000000000ab76         cmp        byte [rsi], cl
000000000000ab78         je         loc_ab10

                     loc_ab7a:
000000000000ab7a         ret                                                    ; CODE XREF=check_node_accept+42, check_node_accept+77
                        ; endp
000000000000ab7c         align      128

                     loc_ab80:
000000000000ab80         xor        eax, eax                                    ; CODE XREF=check_node_accept+32, check_node_accept+178
000000000000ab82         ret
                        ; endp
000000000000ab83         align      8

                     loc_ab88:
000000000000ab88         mov        r8, qword [rsi]                             ; CODE XREF=check_node_accept+14
000000000000ab8b         movzx      eax, cl
000000000000ab8e         sar        rax, 0x6
000000000000ab92         mov        r8, qword [r8+rax*8]
000000000000ab96         xor        eax, eax
000000000000ab98         bt         r8, rcx
000000000000ab9c         jb         loc_ab10

000000000000aba2         ret
                        ; endp
000000000000aba4         align      8

                     loc_aba8:
000000000000aba8         and        ebx, 0x8                                    ; CODE XREF=check_node_accept+126
000000000000abab         je         loc_ab4c

000000000000abad         test       al, 0x1
000000000000abaf         je         loc_ab4c

000000000000abb1         xor        eax, eax
000000000000abb3         pop        rbx
000000000000abb4         ret
                        ; endp
000000000000abb5         align      8

                     loc_abb8:
000000000000abb8         mov        rcx, qword [rdi+0x98]                       ; CODE XREF=check_node_accept+51
000000000000abbf         xor        eax, eax
000000000000abc1         test       byte [rcx+0xd8], 0x40
000000000000abc8         jne        loc_ab10

000000000000abce         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     check_halt_state_context.isra.20:
000000000000abd0         push       r12                                         ; End of unwind block (FDE at 0x191ac), Begin of unwind block (FDE at 0x191d4), CODE XREF=re_search_internal+2247, re_search_internal+2620, re_search_internal+3076, re_search_internal+4556, re_search_internal+5591
000000000000abd2         mov        r12, rdx
000000000000abd5         push       rbp
000000000000abd6         push       rbx
000000000000abd7         mov        edx, dword [rdi+0xa0]
000000000000abdd         mov        rbx, rsi
000000000000abe0         mov        rsi, rcx
000000000000abe3         mov        rbp, rdi
000000000000abe6         call       re_string_context_at                        ; re_string_context_at
000000000000abeb         test       rbx, rbx
000000000000abee         jle        loc_ac98

000000000000abf4         mov        rdx, qword [rbp+0x98]
000000000000abfb         mov        r11d, eax
000000000000abfe         mov        ebp, eax
000000000000ac00         and        eax, 0x1
000000000000ac03         mov        r9, qword [r12]
000000000000ac07         xor        esi, esi
000000000000ac09         and        ebp, 0x8
000000000000ac0c         and        r11d, 0x2
000000000000ac10         mov        r10d, eax
000000000000ac13         mov        r8, qword [rdx]
000000000000ac16         jmp        loc_ac29
000000000000ac18         align      32

                     loc_ac20:
000000000000ac20         add        rsi, 0x1                                    ; CODE XREF=check_halt_state_context.isra.20+120, check_halt_state_context.isra.20+135, check_halt_state_context.isra.20+140, check_halt_state_context.isra.20+151, check_halt_state_context.isra.20+163, check_halt_state_context.isra.20+184
000000000000ac24         cmp        rsi, rbx
000000000000ac27         je         loc_ac98

                     loc_ac29:
000000000000ac29         mov        rax, qword [r9+rsi*8]                       ; CODE XREF=check_halt_state_context.isra.20+70
000000000000ac2d         mov        rdx, rax
000000000000ac30         shl        rdx, 0x4
000000000000ac34         add        rdx, r8
000000000000ac37         mov        ecx, dword [rdx+8]
000000000000ac3a         shr        ecx, 0x8
000000000000ac3d         mov        edi, ecx
000000000000ac3f         and        di, 0x3ff
000000000000ac44         cmp        byte [rdx+8], 0x2
000000000000ac48         jne        loc_ac20

000000000000ac4a         test       di, di
000000000000ac4d         je         loc_ac75

000000000000ac4f         test       cl, 0x4
000000000000ac52         je         loc_ac80

000000000000ac54         test       r10d, r10d
000000000000ac57         je         loc_ac20

000000000000ac59         and        ecx, 0x8
000000000000ac5c         jne        loc_ac20

                     loc_ac5e:
000000000000ac5e         test       dil, 0x20                                   ; CODE XREF=check_halt_state_context.isra.20+179
000000000000ac62         je         loc_ac69

                     loc_ac64:
000000000000ac64         test       r11d, r11d                                  ; CODE XREF=check_halt_state_context.isra.20+192
000000000000ac67         je         loc_ac20

                     loc_ac69:
000000000000ac69         and        edi, 0x80                                   ; CODE XREF=check_halt_state_context.isra.20+146, check_halt_state_context.isra.20+190
000000000000ac6f         je         loc_ac75

000000000000ac71         test       ebp, ebp
000000000000ac73         je         loc_ac20

                     loc_ac75:
000000000000ac75         pop        rbx                                         ; CODE XREF=check_halt_state_context.isra.20+125, check_halt_state_context.isra.20+159
000000000000ac76         pop        rbp
000000000000ac77         pop        r12
000000000000ac79         ret
                        ; endp
000000000000ac7a         align      128

                     loc_ac80:
000000000000ac80         and        ecx, 0x8                                    ; CODE XREF=check_halt_state_context.isra.20+130
000000000000ac83         je         loc_ac5e

000000000000ac85         test       r10d, r10d
000000000000ac88         jne        loc_ac20

000000000000ac8a         test       dil, 0x20
000000000000ac8e         je         loc_ac69

000000000000ac90         jmp        loc_ac64
000000000000ac92         align      8

                     loc_ac98:
000000000000ac98         pop        rbx                                         ; CODE XREF=check_halt_state_context.isra.20+30, check_halt_state_context.isra.20+87
000000000000ac99         xor        eax, eax
000000000000ac9b         pop        rbp
000000000000ac9c         pop        r12
000000000000ac9e         ret
                        ; endp
000000000000ac9f         align      32                                          ; End of unwind block (FDE at 0x191d4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_46: int8_t, -70
        ;    var_50: int64_t, -80
        ;    var_54: int32_t, -84
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_6C: int32_t, -108
        ;    var_78: int64_t, -120


                     re_string_reconstruct:
000000000000aca0         push       r15                                         ; Begin of unwind block (FDE at 0x1920c), CODE XREF=re_search_internal+1510, re_search_internal+4443
000000000000aca2         push       r14
000000000000aca4         mov        r15, rsi
000000000000aca7         push       r13
000000000000aca9         push       r12
000000000000acab         mov        r10d, edx
000000000000acae         push       rbp
000000000000acaf         push       rbx
000000000000acb0         mov        rbp, rsi
000000000000acb3         mov        rbx, rdi
000000000000acb6         sub        rsp, 0x48
000000000000acba         mov        rax, qword [fs:0x28]
000000000000acc3         mov        qword [rsp+0x78+var_40], rax
000000000000acc8         xor        eax, eax
000000000000acca         mov        rax, qword [rdi+0x28]
000000000000acce         sub        rbp, rax
000000000000acd1         cmp        rax, rsi
000000000000acd4         jle        loc_ad36

000000000000acd6         cmp        dword [rdi+0x90], 0x1
000000000000acdd         jg         loc_ae10

                     loc_ace3:
000000000000ace3         mov        rax, qword [rbx+0x50]                       ; CODE XREF=re_string_reconstruct+376
000000000000ace7         mov        qword [rbx+0x30], 0x0
000000000000acef         mov        rbp, r15
000000000000acf2         mov        qword [rbx+0x28], 0x0
000000000000acfa         mov        qword [rbx+0x38], 0x0
000000000000ad02         mov        byte [rbx+0x8c], 0x0
000000000000ad09         mov        qword [rbx+0x58], rax
000000000000ad0d         mov        rax, qword [rbx+0x60]
000000000000ad11         mov        qword [rbx+0x68], rax
000000000000ad15         mov        eax, r10d
000000000000ad18         and        eax, 0x1
000000000000ad1b         cmp        eax, 0x1
000000000000ad1e         sbb        eax, eax
000000000000ad20         and        eax, 0x2
000000000000ad23         add        eax, 0x4
000000000000ad26         cmp        byte [rbx+0x8b], 0x0
000000000000ad2d         mov        dword [rbx+0x70], eax
000000000000ad30         je         loc_ae00

                     loc_ad36:
000000000000ad36         test       rbp, rbp                                    ; CODE XREF=re_string_reconstruct+52, re_string_reconstruct+359
000000000000ad39         je         loc_ad9e

000000000000ad3b         mov        rax, qword [rbx+0x38]
000000000000ad3f         movzx      edx, byte [rbx+0x8c]
000000000000ad46         mov        r8, qword [rbx+0x30]
000000000000ad4a         cmp        rax, rbp
000000000000ad4d         jle        loc_ae70

000000000000ad53         test       dl, dl
000000000000ad55         jne        loc_af68

000000000000ad5b         lea        rsi, qword [rbp-1]
000000000000ad5f         mov        edx, r10d
000000000000ad62         mov        rdi, rbx
000000000000ad65         mov        qword [rsp+0x78+var_78], r8
000000000000ad69         call       re_string_context_at                        ; re_string_context_at
000000000000ad6e         mov        r8, qword [rsp+0x78+var_78]
000000000000ad72         mov        dword [rbx+0x70], eax
000000000000ad75         sub        r8, rbp
000000000000ad78         cmp        dword [rbx+0x90], 0x1
000000000000ad7f         jg         loc_ae20

                     loc_ad85:
000000000000ad85         cmp        byte [rbx+0x8b], 0x0                        ; CODE XREF=re_string_reconstruct+412
000000000000ad8c         jne        loc_b130

000000000000ad92         sub        qword [rbx+0x38], rbp
000000000000ad96         mov        qword [rbx+0x30], r8

                     loc_ad9a:
000000000000ad9a         add        qword [rbx+8], rbp                          ; CODE XREF=re_string_reconstruct+1150, re_string_reconstruct+1780

                     loc_ad9e:
000000000000ad9e         mov        rax, qword [rbx+0x58]                       ; CODE XREF=re_string_reconstruct+153, re_string_reconstruct+1156
000000000000ada2         sub        qword [rbx+0x68], rbp
000000000000ada6         mov        qword [rbx+0x28], r15
000000000000adaa         sub        rax, rbp
000000000000adad         cmp        dword [rbx+0x90], 0x1
000000000000adb4         mov        qword [rbx+0x58], rax
000000000000adb8         jle        loc_ae58

000000000000adbe         cmp        byte [rbx+0x88], 0x0
000000000000adc5         mov        rdi, rbx
000000000000adc8         je         loc_ae48

000000000000adca         call       build_wcs_upper_buffer                      ; build_wcs_upper_buffer
000000000000adcf         test       eax, eax
000000000000add1         jne        loc_addd

                     loc_add3:
000000000000add3         mov        qword [rbx+0x48], 0x0                       ; CODE XREF=re_string_reconstruct+429, re_string_reconstruct+457, re_string_reconstruct+1412, re_string_reconstruct+1488, re_string_reconstruct+1656
000000000000addb         xor        eax, eax

                     loc_addd:
000000000000addd         mov        rcx, qword [rsp+0x78+var_40]                ; CODE XREF=re_string_reconstruct+305
000000000000ade2         xor        rcx, qword [fs:0x28]
000000000000adeb         jne        loc_b43a

000000000000adf1         add        rsp, 0x48
000000000000adf5         pop        rbx
000000000000adf6         pop        rbp
000000000000adf7         pop        r12
000000000000adf9         pop        r13
000000000000adfb         pop        r14
000000000000adfd         pop        r15
000000000000adff         ret
                        ; endp

                     loc_ae00:
000000000000ae00         mov        rax, qword [rbx]                            ; CODE XREF=re_string_reconstruct+144
000000000000ae03         mov        qword [rbx+8], rax
000000000000ae07         jmp        loc_ad36
000000000000ae0c         align      16

                     loc_ae10:
000000000000ae10         mov        qword [rdi+0x20], 0x0                       ; CODE XREF=re_string_reconstruct+61
000000000000ae18         jmp        loc_ace3
000000000000ae1d         align      32

                     loc_ae20:
000000000000ae20         mov        rdi, qword [rbx+0x10]                       ; argument "__dest" for method j_memmove, CODE XREF=re_string_reconstruct+223
000000000000ae24         lea        rdx, qword [r8*4]                           ; argument "__n" for method j_memmove
000000000000ae2c         lea        rsi, qword [rdi+rbp*4]                      ; argument "__src" for method j_memmove
000000000000ae30         call       j_memmove                                   ; memmove
000000000000ae35         mov        r8, qword [rbx+0x30]
000000000000ae39         sub        r8, rbp
000000000000ae3c         jmp        loc_ad85
000000000000ae41         align      8

                     loc_ae48:
000000000000ae48         call       build_wcs_buffer                            ; build_wcs_buffer, CODE XREF=re_string_reconstruct+296
000000000000ae4d         jmp        loc_add3
000000000000ae52         align      8

                     loc_ae58:
000000000000ae58         cmp        byte [rbx+0x8b], 0x0                        ; CODE XREF=re_string_reconstruct+280
000000000000ae5f         jne        loc_b210

000000000000ae65         mov        qword [rbx+0x30], rax
000000000000ae69         jmp        loc_add3
000000000000ae6e         align      16

                     loc_ae70:
000000000000ae70         test       dl, dl                                      ; CODE XREF=re_string_reconstruct+173
000000000000ae72         jne        loc_b31d

                     loc_ae78:
000000000000ae78         movsxd     rdx, dword [rbx+0x90]                       ; CODE XREF=re_string_reconstruct+1696
000000000000ae7f         mov        qword [rbx+0x30], 0x0
000000000000ae87         mov        r11, qword [rbx+0x28]
000000000000ae8b         cmp        edx, 0x1
000000000000ae8e         jle        loc_b278

000000000000ae94         cmp        byte [rbx+0x89], 0x0
000000000000ae9b         jne        loc_b158

                     loc_aea1:
000000000000aea1         lea        r14, qword [r11+rax]                        ; CODE XREF=re_string_reconstruct+1244, re_string_reconstruct+1263, re_string_reconstruct+1380
000000000000aea5         cmp        r15, r14
000000000000aea8         jle        loc_b2ef

000000000000aeae         lea        rax, qword [rbx+0x20]
000000000000aeb2         lea        r13, qword [rsp+0x78+var_54]
000000000000aeb7         mov        qword [rsp+0x78+var_68], rax
000000000000aebc         nop        dword [rax]

                     loc_aec0:
000000000000aec0         mov        r12, qword [rbx+0x50]                       ; CODE XREF=re_string_reconstruct+624
000000000000aec4         mov        rsi, qword [rbx]
000000000000aec7         mov        rdi, r13
000000000000aeca         mov        rax, qword [rbx+0x20]
000000000000aece         mov        rcx, qword [rsp+0x78+var_68]
000000000000aed3         mov        dword [rsp+0x78+var_6C], r10d
000000000000aed8         mov        qword [rsp+0x78+var_78], r8
000000000000aedc         sub        r12, r14
000000000000aedf         add        rsi, r14
000000000000aee2         mov        rdx, r12
000000000000aee5         mov        qword [rsp+0x78+var_60], rax
000000000000aeea         call       rpl_mbrtowc                                 ; rpl_mbrtowc
000000000000aeef         lea        rcx, qword [rax-1]
000000000000aef3         mov        edx, dword [rsp+0x78+var_54]
000000000000aef7         mov        r8, qword [rsp+0x78+var_78]
000000000000aefb         mov        r10d, dword [rsp+0x78+var_6C]
000000000000af00         cmp        rcx, 0xfffffffffffffffc
000000000000af04         ja         loc_b345

                     loc_af0a:
000000000000af0a         add        r14, rax                                    ; CODE XREF=re_string_reconstruct+1733
000000000000af0d         cmp        r15, r14
000000000000af10         jg         loc_aec0

000000000000af12         sub        r14, r15
000000000000af15         cmp        edx, 0xffffffff
000000000000af18         mov        r12, r14
000000000000af1b         mov        qword [rbx+0x30], r14
000000000000af1f         je         loc_b2f9

                     loc_af25:
000000000000af25         cmp        byte [rbx+0x8e], 0x0                        ; CODE XREF=re_string_reconstruct+1850
000000000000af2c         jne        loc_b399

                     loc_af32:
000000000000af32         xor        eax, eax                                    ; CODE XREF=re_string_reconstruct+1805
000000000000af34         cmp        edx, 0xa
000000000000af37         jne        loc_af47

000000000000af39         xor        eax, eax
000000000000af3b         cmp        byte [rbx+0x8d], 0x0
000000000000af42         setne      al
000000000000af45         add        eax, eax

                     loc_af47:
000000000000af47         mov        dword [rbx+0x70], eax                       ; CODE XREF=re_string_reconstruct+663, re_string_reconstruct+1816

                     loc_af4a:
000000000000af4a         cmp        r12, 0x0                                    ; CODE XREF=re_string_reconstruct+1643
000000000000af4e         jne        loc_b36a

                     loc_af54:
000000000000af54         movzx      eax, byte [rbx+0x8b]                        ; CODE XREF=re_string_reconstruct+1885
000000000000af5b         mov        qword [rbx+0x38], r12
000000000000af5f         jmp        loc_b11c
000000000000af64         align      8

                     loc_af68:
000000000000af68         mov        r14, qword [rbx+0x18]                       ; CODE XREF=re_string_reconstruct+181
000000000000af6c         mov        rcx, r8
000000000000af6f         xor        esi, esi
000000000000af71         jmp        loc_af83
000000000000af73         align      8

                     loc_af78:
000000000000af78         jge        loc_afb3                                    ; CODE XREF=re_string_reconstruct+766

000000000000af7a         lea        rsi, qword [rax+1]

                     loc_af7e:
000000000000af7e         cmp        rsi, rcx                                    ; CODE XREF=re_string_reconstruct+771
000000000000af81         jge        loc_afa8

                     loc_af83:
000000000000af83         lea        rdx, qword [rsi+rcx]                        ; CODE XREF=re_string_reconstruct+721
000000000000af87         mov        rax, rdx
000000000000af8a         shr        rax, 0x3f
000000000000af8e         add        rax, rdx
000000000000af91         sar        rax, 0x1
000000000000af94         mov        rdx, qword [r14+rax*8]
000000000000af98         mov        r12, rax
000000000000af9b         cmp        rdx, rbp
000000000000af9e         jle        loc_af78

000000000000afa0         mov        rcx, rax
000000000000afa3         jmp        loc_af7e
000000000000afa5         align      8

                     loc_afa8:
000000000000afa8         lea        r12, qword [rax+1]                          ; CODE XREF=re_string_reconstruct+737
000000000000afac         cmp        rdx, rbp
000000000000afaf         cmovge     r12, rax

                     loc_afb3:
000000000000afb3         lea        r13, qword [r12-1]                          ; CODE XREF=loc_af78
000000000000afb8         mov        edx, r10d
000000000000afbb         mov        rdi, rbx
000000000000afbe         mov        qword [rsp+0x78+var_78], r8
000000000000afc2         mov        rsi, r13
000000000000afc5         call       re_string_context_at                        ; re_string_context_at
000000000000afca         cmp        rbp, r12
000000000000afcd         mov        dword [rbx+0x70], eax
000000000000afd0         mov        r8, qword [rsp+0x78+var_78]
000000000000afd4         jne        loc_b058

000000000000afda         cmp        rbp, r8
000000000000afdd         jge        loc_b058

000000000000afdf         cmp        qword [r14+r12*8], rbp
000000000000afe3         jne        loc_b058

000000000000afe5         mov        rdi, qword [rbx+0x10]                       ; argument "__dest" for method j_memmove
000000000000afe9         sub        r8, rbp
000000000000afec         lea        rdx, qword [r8*4]                           ; argument "__n" for method j_memmove
000000000000aff4         lea        rsi, qword [rdi+rbp*4]                      ; argument "__src" for method j_memmove
000000000000aff8         call       j_memmove                                   ; memmove
000000000000affd         mov        rdi, qword [rbx+8]                          ; argument "__dest" for method j_memmove
000000000000b001         mov        rdx, qword [rbx+0x30]
000000000000b005         lea        rsi, qword [rdi+rbp]                        ; argument "__src" for method j_memmove
000000000000b009         sub        rdx, rbp                                    ; argument "__n" for method j_memmove
000000000000b00c         call       j_memmove                                   ; memmove
000000000000b011         mov        rax, qword [rbx+0x30]
000000000000b015         sub        qword [rbx+0x38], rbp
000000000000b019         sub        rax, rbp
000000000000b01c         test       rax, rax
000000000000b01f         mov        qword [rbx+0x30], rax
000000000000b023         jle        loc_b048

000000000000b025         mov        rcx, qword [rbx+0x18]
000000000000b029         xor        eax, eax
000000000000b02b         lea        rsi, qword [rcx+rbp*8]
000000000000b02f         nop

                     loc_b030:
000000000000b030         mov        rdx, qword [rsi+rax*8]                      ; CODE XREF=re_string_reconstruct+931
000000000000b034         sub        rdx, rbp
000000000000b037         mov        qword [rcx+rax*8], rdx
000000000000b03b         add        rax, 0x1
000000000000b03f         cmp        qword [rbx+0x30], rax
000000000000b043         jg         loc_b030

000000000000b045         nop        dword [rax]

                     loc_b048:
000000000000b048         movzx      eax, byte [rbx+0x8b]                        ; CODE XREF=re_string_reconstruct+899, re_string_reconstruct+1587
000000000000b04f         jmp        loc_b11c
000000000000b054         align      8

                     loc_b058:
000000000000b058         mov        rax, qword [rbx+0x50]                       ; CODE XREF=re_string_reconstruct+820, re_string_reconstruct+829, re_string_reconstruct+835
000000000000b05c         mov        byte [rbx+0x8c], 0x0
000000000000b063         add        rax, rbp
000000000000b066         sub        rax, r15
000000000000b069         mov        qword [rbx+0x58], rax
000000000000b06d         mov        rax, qword [rbx+0x60]
000000000000b071         add        rax, rbp
000000000000b074         sub        rax, r15
000000000000b077         test       r12, r12
000000000000b07a         mov        qword [rbx+0x68], rax
000000000000b07e         jle        loc_b0a3

000000000000b080         cmp        qword [r14+r12*8-8], rbp
000000000000b085         je         loc_b09b

000000000000b087         jmp        loc_b0a3
000000000000b089         align      16

                     loc_b090:
000000000000b090         cmp        qword [r14+r13*8-8], rbp                    ; CODE XREF=re_string_reconstruct+1025
000000000000b095         jne        loc_b0a3

000000000000b097         sub        r13, 0x1

                     loc_b09b:
000000000000b09b         test       r13, r13                                    ; CODE XREF=re_string_reconstruct+997
000000000000b09e         mov        r12, r13
000000000000b0a1         jne        loc_b090

                     loc_b0a3:
000000000000b0a3         cmp        r12, r8                                     ; CODE XREF=re_string_reconstruct+990, re_string_reconstruct+999, re_string_reconstruct+1013
000000000000b0a6         jge        loc_b2d8

000000000000b0ac         mov        rax, qword [rbx+0x10]
000000000000b0b0         jmp        loc_b0c5
000000000000b0b2         align      8

                     loc_b0b8:
000000000000b0b8         add        r12, 0x1                                    ; CODE XREF=re_string_reconstruct+1066
000000000000b0bc         cmp        r12, r8
000000000000b0bf         je         loc_b2e0

                     loc_b0c5:
000000000000b0c5         cmp        dword [rax+r12*4], 0xffffffff               ; CODE XREF=re_string_reconstruct+1040
000000000000b0ca         je         loc_b0b8

                     loc_b0cc:
000000000000b0cc         mov        rdx, qword [r14+r12*8]                      ; CODE XREF=loc_b2d8
000000000000b0d0         sub        rdx, rbp
000000000000b0d3         cmp        rdx, 0x0
000000000000b0d7         mov        qword [rbx+0x30], rdx
000000000000b0db         je         loc_b111

000000000000b0dd         jle        loc_b0ff

000000000000b0df         mov        rax, qword [rbx+0x10]
000000000000b0e3         lea        rcx, qword [rax+rdx*4]
000000000000b0e7         nop        word [rax+rax]

                     loc_b0f0:
000000000000b0f0         mov        dword [rax], 0xffffffff                     ; CODE XREF=re_string_reconstruct+1117
000000000000b0f6         add        rax, 0x4
000000000000b0fa         cmp        rcx, rax
000000000000b0fd         jne        loc_b0f0

                     loc_b0ff:
000000000000b0ff         mov        rdi, qword [rbx+8]                          ; argument "__s" for method j_memset, CODE XREF=re_string_reconstruct+1085
000000000000b103         mov        esi, 0xff                                   ; argument "__c" for method j_memset
000000000000b108         call       j_memset                                    ; memset
000000000000b10d         mov        rdx, qword [rbx+0x30]

                     loc_b111:
000000000000b111         movzx      eax, byte [rbx+0x8b]                        ; CODE XREF=re_string_reconstruct+1083, re_string_reconstruct+1610
000000000000b118         mov        qword [rbx+0x38], rdx

                     loc_b11c:
000000000000b11c         test       al, al                                      ; CODE XREF=re_string_reconstruct+703, re_string_reconstruct+943, re_string_reconstruct+1199
000000000000b11e         je         loc_ad9a

000000000000b124         jmp        loc_ad9e
000000000000b129         align      16

                     loc_b130:
000000000000b130         mov        rdi, qword [rbx+8]                          ; argument "__dest" for method j_memmove, CODE XREF=re_string_reconstruct+236
000000000000b134         mov        rdx, r8                                     ; argument "__n" for method j_memmove
000000000000b137         lea        rsi, qword [rdi+rbp]                        ; argument "__src" for method j_memmove
000000000000b13b         call       j_memmove                                   ; memmove
000000000000b140         movzx      eax, byte [rbx+0x8b]
000000000000b147         sub        qword [rbx+0x30], rbp
000000000000b14b         sub        qword [rbx+0x38], rbp
000000000000b14f         jmp        loc_b11c
000000000000b151         align      8

                     loc_b158:
000000000000b158         mov        rcx, qword [rbx]                            ; CODE XREF=re_string_reconstruct+507
000000000000b15b         mov        rdi, rbp
000000000000b15e         sub        rdi, rdx
000000000000b161         mov        rdx, rdi
000000000000b164         lea        r12, qword [rcx+r11]
000000000000b168         add        rdx, r12
000000000000b16b         lea        rsi, qword [r12+rbp-1]
000000000000b170         cmp        rcx, rdx
000000000000b173         cmovb      rcx, rdx
000000000000b177         cmp        rcx, rsi
000000000000b17a         jbe        loc_b195

000000000000b17c         jmp        loc_aea1
000000000000b181         align      8

                     loc_b188:
000000000000b188         sub        rsi, 0x1                                    ; CODE XREF=re_string_reconstruct+1278
000000000000b18c         cmp        rcx, rsi
000000000000b18f         ja         loc_aea1

                     loc_b195:
000000000000b195         movzx      edx, byte [rsi]                             ; CODE XREF=re_string_reconstruct+1242
000000000000b198         and        edx, 0xffffffc0
000000000000b19b         cmp        dl, 0x80
000000000000b19e         je         loc_b188

000000000000b1a0         mov        rdx, qword [rbx+0x58]
000000000000b1a4         mov        rcx, qword [rbx+0x78]
000000000000b1a8         mov        r14, rsi
000000000000b1ab         add        rdx, r12
000000000000b1ae         sub        rdx, rsi
000000000000b1b1         test       rcx, rcx
000000000000b1b4         jne        loc_b402

                     loc_b1ba:
000000000000b1ba         lea        r13, qword [rsp+0x78+var_54]                ; CODE XREF=re_string_reconstruct+1941
000000000000b1bf         add        r12, rbp
000000000000b1c2         lea        rcx, qword [rsp+0x78+var_50]
000000000000b1c7         sub        r12, r14
000000000000b1ca         mov        dword [rsp+0x78+var_6C], r10d
000000000000b1cf         mov        qword [rsp+0x78+var_78], r8
000000000000b1d3         mov        rdi, r13
000000000000b1d6         mov        qword [rsp+0x78+var_50], 0x0
000000000000b1df         call       rpl_mbrtowc                                 ; rpl_mbrtowc
000000000000b1e4         cmp        r12, rax
000000000000b1e7         mov        r8, qword [rsp+0x78+var_78]
000000000000b1eb         mov        r10d, dword [rsp+0x78+var_6C]
000000000000b1f0         ja         loc_b1fc

000000000000b1f2         cmp        rax, 0xfffffffffffffffd
000000000000b1f6         jbe        loc_b3c1

                     loc_b1fc:
000000000000b1fc         mov        r11, qword [rbx+0x28]                       ; CODE XREF=re_string_reconstruct+1360, re_string_reconstruct+1856
000000000000b200         mov        rax, qword [rbx+0x38]
000000000000b204         jmp        loc_aea1
000000000000b209         align      16

                     loc_b210:
000000000000b210         cmp        byte [rbx+0x88], 0x0                        ; CODE XREF=re_string_reconstruct+447
000000000000b217         jne        loc_b310

000000000000b21d         mov        rcx, qword [rbx+0x78]
000000000000b221         test       rcx, rcx
000000000000b224         je         loc_add3

000000000000b22a         cmp        qword [rbx+0x40], rax
000000000000b22e         mov        rdx, qword [rbx+0x30]
000000000000b232         cmovle     rax, qword [rbx+0x40]
000000000000b237         cmp        rax, rdx
000000000000b23a         jg         loc_b248

000000000000b23c         jmp        loc_b268
000000000000b23e         align      64

                     loc_b240:
000000000000b240         mov        r15, qword [rbx+0x28]                       ; CODE XREF=re_string_reconstruct+1478
000000000000b244         mov        rcx, qword [rbx+0x78]

                     loc_b248:
000000000000b248         mov        rsi, qword [rbx]                            ; CODE XREF=re_string_reconstruct+1434
000000000000b24b         add        rsi, rdx
000000000000b24e         movzx      esi, byte [rsi+r15]
000000000000b253         movzx      esi, byte [rcx+rsi]
000000000000b257         mov        rcx, qword [rbx+8]
000000000000b25b         mov        byte [rcx+rdx], sil
000000000000b25f         add        rdx, 0x1
000000000000b263         cmp        rax, rdx
000000000000b266         jne        loc_b240

                     loc_b268:
000000000000b268         mov        qword [rbx+0x30], rdx                       ; CODE XREF=re_string_reconstruct+1436
000000000000b26c         mov        qword [rbx+0x38], rdx
000000000000b270         jmp        loc_add3
000000000000b275         align      8

                     loc_b278:
000000000000b278         mov        rax, qword [rbx]                            ; CODE XREF=re_string_reconstruct+494
000000000000b27b         mov        rdx, qword [rbx+0x78]
000000000000b27f         add        rax, rbp
000000000000b282         test       rdx, rdx
000000000000b285         movzx      eax, byte [r11+rax-1]
000000000000b28b         mov        qword [rbx+0x38], 0x0
000000000000b293         je         loc_b299

000000000000b295         movzx      eax, byte [rdx+rax]

                     loc_b299:
000000000000b299         mov        rcx, qword [rbx+0x80]                       ; CODE XREF=re_string_reconstruct+1523
000000000000b2a0         movzx      edx, al
000000000000b2a3         sar        rdx, 0x6
000000000000b2a7         mov        rcx, qword [rcx+rdx*8]
000000000000b2ab         mov        edx, 0x1
000000000000b2b0         bt         rcx, rax
000000000000b2b4         jb         loc_b2d0

000000000000b2b6         xor        edx, edx
000000000000b2b8         cmp        al, 0xa
000000000000b2ba         jne        loc_b2d0

000000000000b2bc         xor        edx, edx
000000000000b2be         cmp        byte [rbx+0x8d], 0x0
000000000000b2c5         setne      dl
000000000000b2c8         add        edx, edx
000000000000b2ca         nop        word [rax+rax]

                     loc_b2d0:
000000000000b2d0         mov        dword [rbx+0x70], edx                       ; CODE XREF=re_string_reconstruct+1556, re_string_reconstruct+1562
000000000000b2d3         jmp        loc_b048

                     loc_b2d8:
000000000000b2d8         jne        loc_b0cc                                    ; CODE XREF=re_string_reconstruct+1030

000000000000b2de         nop

                     loc_b2e0:
000000000000b2e0         mov        qword [rbx+0x30], 0x0                       ; CODE XREF=re_string_reconstruct+1055
000000000000b2e8         xor        edx, edx
000000000000b2ea         jmp        loc_b111

                     loc_b2ef:
000000000000b2ef         sub        r14, r15                                    ; CODE XREF=re_string_reconstruct+520
000000000000b2f2         mov        r12, r14
000000000000b2f5         mov        qword [rbx+0x30], r14

                     loc_b2f9:
000000000000b2f9         lea        rsi, qword [r8-1]                           ; CODE XREF=re_string_reconstruct+639
000000000000b2fd         mov        edx, r10d
000000000000b300         mov        rdi, rbx
000000000000b303         call       re_string_context_at                        ; re_string_context_at
000000000000b308         mov        dword [rbx+0x70], eax
000000000000b30b         jmp        loc_af4a

                     loc_b310:
000000000000b310         mov        rdi, rbx                                    ; CODE XREF=re_string_reconstruct+1399
000000000000b313         call       build_upper_buffer                          ; build_upper_buffer
000000000000b318         jmp        loc_add3

                     loc_b31d:
000000000000b31d         mov        rdx, qword [rbx+0x50]                       ; CODE XREF=re_string_reconstruct+466
000000000000b321         mov        byte [rbx+0x8c], 0x0
000000000000b328         add        rdx, rbp
000000000000b32b         sub        rdx, r15
000000000000b32e         mov        qword [rbx+0x58], rdx
000000000000b332         mov        rdx, qword [rbx+0x60]
000000000000b336         add        rdx, rbp
000000000000b339         sub        rdx, r15
000000000000b33c         mov        qword [rbx+0x68], rdx
000000000000b340         jmp        loc_ae78

                     loc_b345:
000000000000b345         test       rax, rax                                    ; CODE XREF=re_string_reconstruct+612
000000000000b348         je         loc_b3bd

000000000000b34a         test       r12, r12
000000000000b34d         je         loc_b3bd

000000000000b34f         mov        rax, qword [rbx]
000000000000b352         movzx      edx, byte [rax+r14]

                     loc_b357:
000000000000b357         mov        rax, qword [rsp+0x78+var_60]                ; CODE XREF=re_string_reconstruct+1823
000000000000b35c         mov        qword [rbx+0x20], rax
000000000000b360         mov        eax, 0x1
000000000000b365         jmp        loc_af0a

                     loc_b36a:
000000000000b36a         jle        loc_b387                                    ; CODE XREF=re_string_reconstruct+686

000000000000b36c         mov        rax, qword [rbx+0x10]
000000000000b370         lea        rdx, qword [rax+r12*4]
000000000000b374         nop        dword [rax]

                     loc_b378:
000000000000b378         mov        dword [rax], 0xffffffff                     ; CODE XREF=re_string_reconstruct+1765
000000000000b37e         add        rax, 0x4
000000000000b382         cmp        rdx, rax
000000000000b385         jne        loc_b378

                     loc_b387:
000000000000b387         cmp        byte [rbx+0x8b], 0x0                        ; CODE XREF=loc_b36a
000000000000b38e         jne        loc_b3e8

000000000000b390         mov        qword [rbx+0x38], r12
000000000000b394         jmp        loc_ad9a

                     loc_b399:
000000000000b399         mov        edi, edx                                    ; argument "__wc" for method j_iswalnum, CODE XREF=re_string_reconstruct+652
000000000000b39b         mov        dword [rsp+0x78+var_78], edx
000000000000b39e         call       j_iswalnum                                  ; iswalnum
000000000000b3a3         test       eax, eax
000000000000b3a5         jne        loc_b3b3

000000000000b3a7         mov        edx, dword [rsp+0x78+var_78]
000000000000b3aa         cmp        edx, 0x5f
000000000000b3ad         jne        loc_af32

                     loc_b3b3:
000000000000b3b3         mov        eax, 0x1                                    ; CODE XREF=re_string_reconstruct+1797
000000000000b3b8         jmp        loc_af47

                     loc_b3bd:
000000000000b3bd         xor        edx, edx                                    ; CODE XREF=re_string_reconstruct+1704, re_string_reconstruct+1709
000000000000b3bf         jmp        loc_b357

                     loc_b3c1:
000000000000b3c1         mov        edx, dword [rsp+0x78+var_54]                ; CODE XREF=re_string_reconstruct+1366
000000000000b3c5         sub        rax, r12
000000000000b3c8         mov        qword [rbx+0x20], 0x0
000000000000b3d0         mov        r12, rax
000000000000b3d3         mov        qword [rbx+0x30], rax
000000000000b3d7         cmp        edx, 0xffffffff
000000000000b3da         jne        loc_af25

000000000000b3e0         jmp        loc_b1fc
000000000000b3e5         align      8

                     loc_b3e8:
000000000000b3e8         mov        rdi, qword [rbx+8]                          ; argument "__s" for method j_memset, CODE XREF=re_string_reconstruct+1774
000000000000b3ec         mov        rdx, r12                                    ; argument "__n" for method j_memset
000000000000b3ef         mov        esi, 0xff                                   ; argument "__c" for method j_memset
000000000000b3f4         call       j_memset                                    ; memset
000000000000b3f9         mov        r12, qword [rbx+0x30]
000000000000b3fd         jmp        loc_af54

                     loc_b402:
000000000000b402         cmp        rdx, 0x6                                    ; CODE XREF=re_string_reconstruct+1300
000000000000b406         mov        edi, 0x6
000000000000b40b         lea        r11, qword [rsp+0x78+var_46]
000000000000b410         cmovle     rdi, rdx
000000000000b414         sub        edi, 0x1
000000000000b417         test       edi, edi
000000000000b419         movsxd     rax, edi
000000000000b41c         js         loc_b432

                     loc_b41e:
000000000000b41e         movzx      edi, byte [rsi+rax]                         ; CODE XREF=re_string_reconstruct+1936
000000000000b422         movzx      edi, byte [rcx+rdi]
000000000000b426         mov        byte [r11+rax], dil
000000000000b42a         sub        rax, 0x1
000000000000b42e         test       eax, eax
000000000000b430         jns        loc_b41e

                     loc_b432:
000000000000b432         mov        rsi, r11                                    ; CODE XREF=re_string_reconstruct+1916
000000000000b435         jmp        loc_b1ba

                     loc_b43a:
000000000000b43a         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=re_string_reconstruct+331
                        ; endp
000000000000b43f         align      64                                          ; End of unwind block (FDE at 0x1920c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int8_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120


                     sub_epsilon_src_nodes:
000000000000b440         push       r15                                         ; Begin of unwind block (FDE at 0x1925c), CODE XREF=update_cur_sifted_state+1100, update_cur_sifted_state+1290, update_cur_sifted_state+1448
000000000000b442         push       r14
000000000000b444         mov        r14, rdx
000000000000b447         push       r13
000000000000b449         push       r12
000000000000b44b         lea        rdx, qword [rsi+rsi*2]
000000000000b44f         push       rbp
000000000000b450         push       rbx
000000000000b451         pxor       xmm0, xmm0
000000000000b455         sub        rsp, 0x48
000000000000b459         mov        rax, qword [fs:0x28]
000000000000b462         mov        qword [rsp+0x78+var_40], rax
000000000000b467         xor        eax, eax
000000000000b469         mov        rax, qword [rdi+0x38]
000000000000b46d         mov        qword [rsp+0x78+var_48], 0x0
000000000000b476         movaps     xmmword [rsp+0x78+var_58], xmm0
000000000000b47b         mov        qword [rsp+0x78+var_68], rcx
000000000000b480         lea        rbp, qword [rax+rdx*8]
000000000000b484         mov        r10, qword [rbp+8]
000000000000b488         test       r10, r10
000000000000b48b         jle        loc_b672

000000000000b491         lea        rax, qword [rsp+0x78+var_58]
000000000000b496         mov        r12, rdi
000000000000b499         mov        r13, rsi
000000000000b49c         xor        ebx, ebx
000000000000b49e         mov        qword [rsp+0x78+var_60], rax
000000000000b4a3         jmp        loc_b4fd
000000000000b4a5         align      8

                     loc_b4a8:
000000000000b4a8         test       rax, rax                                    ; CODE XREF=sub_epsilon_src_nodes+283
000000000000b4ab         jne        loc_b588

000000000000b4b1         mov        rdi, qword [r14+8]
000000000000b4b5         lea        rsi, qword [r14+0x10]
000000000000b4b9         mov        rdx, r8
000000000000b4bc         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000b4c1         test       rax, rax
000000000000b4c4         je         loc_b588

                     loc_b4ca:
000000000000b4ca         mov        rdx, qword [r12+0x38]                       ; CODE XREF=sub_epsilon_src_nodes+313, sub_epsilon_src_nodes+386
000000000000b4cf         mov        rsi, qword [rsp+0x78+var_68]
000000000000b4d4         mov        rdi, qword [rsp+0x78+var_60]
000000000000b4d9         add        rdx, r9
000000000000b4dc         call       re_node_set_add_intersect                   ; re_node_set_add_intersect
000000000000b4e1         test       eax, eax
000000000000b4e3         jne        loc_b660

000000000000b4e9         mov        r10, qword [rbp+8]
000000000000b4ed         nop        dword [rax]

                     loc_b4f0:
000000000000b4f0         add        rbx, 0x1                                    ; CODE XREF=sub_epsilon_src_nodes+200, sub_epsilon_src_nodes+217, sub_epsilon_src_nodes+292, sub_epsilon_src_nodes+319, sub_epsilon_src_nodes+335, sub_epsilon_src_nodes+358, sub_epsilon_src_nodes+380
000000000000b4f4         cmp        r10, rbx
000000000000b4f7         jle        loc_b5d0

                     loc_b4fd:
000000000000b4fd         mov        rax, qword [rbp+0x10]                       ; CODE XREF=sub_epsilon_src_nodes+99
000000000000b501         mov        rax, qword [rax+rbx*8]
000000000000b505         cmp        r13, rax
000000000000b508         je         loc_b4f0

000000000000b50a         mov        rdx, rax
000000000000b50d         shl        rdx, 0x4
000000000000b511         add        rdx, qword [r12]
000000000000b515         test       byte [rdx+8], 0x8
000000000000b519         je         loc_b4f0

000000000000b51b         lea        r9, qword [rax+rax*2]
000000000000b51f         mov        rcx, qword [r12+0x28]
000000000000b524         lea        r11, qword [rbp+0x10]
000000000000b528         mov        rdi, r10
000000000000b52b         shl        r9, 0x3
000000000000b52f         mov        rsi, r11
000000000000b532         add        rcx, r9
000000000000b535         mov        r15, qword [rcx+0x10]
000000000000b539         mov        qword [rsp+0x78+var_70], rcx
000000000000b53e         mov        r8, qword [r15]
000000000000b541         mov        rdx, r8
000000000000b544         mov        qword [rsp+0x78+var_78], r8
000000000000b548         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000b54d         mov        rcx, qword [rsp+0x78+var_70]
000000000000b552         mov        r8, qword [rsp+0x78+var_78]
000000000000b556         cmp        qword [rcx+8], 0x1
000000000000b55b         jg         loc_b4a8

000000000000b561         test       rax, rax
000000000000b564         jne        loc_b4f0

000000000000b566         mov        rdi, qword [r14+8]
000000000000b56a         lea        rsi, qword [r14+0x10]
000000000000b56e         mov        rdx, r8
000000000000b571         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000b576         test       rax, rax
000000000000b579         jne        loc_b4ca

000000000000b57f         jmp        loc_b4f0
000000000000b584         align      8

                     loc_b588:
000000000000b588         mov        r15, qword [r15+8]                          ; CODE XREF=sub_epsilon_src_nodes+107, sub_epsilon_src_nodes+132
000000000000b58c         test       r15, r15
000000000000b58f         jle        loc_b4f0

000000000000b595         mov        rdx, r15
000000000000b598         mov        rsi, r11
000000000000b59b         mov        rdi, r10
000000000000b59e         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000b5a3         test       rax, rax
000000000000b5a6         jne        loc_b4f0

000000000000b5ac         mov        rdi, qword [r14+8]
000000000000b5b0         lea        rsi, qword [r14+0x10]
000000000000b5b4         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000b5b9         test       rax, rax
000000000000b5bc         je         loc_b4f0

000000000000b5c2         jmp        loc_b4ca
000000000000b5c7         align      16

                     loc_b5d0:
000000000000b5d0         xor        r9d, r9d                                    ; CODE XREF=sub_epsilon_src_nodes+183
000000000000b5d3         test       r10, r10
000000000000b5d6         lea        r11, qword [rsp+0x78+var_48]
000000000000b5db         jle        loc_b62c

000000000000b5dd         nop        dword [rax]

                     loc_b5e0:
000000000000b5e0         mov        rax, qword [rbp+0x10]                       ; CODE XREF=sub_epsilon_src_nodes+490
000000000000b5e4         mov        rdi, qword [rsp+0x78+var_50]
000000000000b5e9         mov        rsi, r11
000000000000b5ec         mov        r10, qword [rax+r9*8]
000000000000b5f0         mov        rdx, r10
000000000000b5f3         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000b5f8         test       rax, rax
000000000000b5fb         jne        loc_b622

000000000000b5fd         lea        rbx, qword [r14+0x10]
000000000000b601         mov        rdi, qword [r14+8]
000000000000b605         mov        rsi, rbx
000000000000b608         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000b60d         sub        rax, 0x1
000000000000b611         mov        rdx, rax
000000000000b614         js         loc_b622

000000000000b616         lea        rdi, qword [r14+8]
000000000000b61a         mov        rsi, rbx
000000000000b61d         call       re_node_set_remove_at.isra.4.part.5         ; re_node_set_remove_at.isra.4.part.5

                     loc_b622:
000000000000b622         add        r9, 0x1                                     ; CODE XREF=sub_epsilon_src_nodes+443, sub_epsilon_src_nodes+468
000000000000b626         cmp        qword [rbp+8], r9
000000000000b62a         jg         loc_b5e0

                     loc_b62c:
000000000000b62c         mov        rdi, qword [rsp+0x78+var_48]                ; CODE XREF=sub_epsilon_src_nodes+411

                     loc_b631:
000000000000b631         call       j_free                                      ; free, CODE XREF=sub_epsilon_src_nodes+564
000000000000b636         xor        eax, eax

                     loc_b638:
000000000000b638         mov        rsi, qword [rsp+0x78+var_40]                ; CODE XREF=sub_epsilon_src_nodes+560
000000000000b63d         xor        rsi, qword [fs:0x28]
000000000000b646         jne        loc_b676

000000000000b648         add        rsp, 0x48
000000000000b64c         pop        rbx
000000000000b64d         pop        rbp
000000000000b64e         pop        r12
000000000000b650         pop        r13
000000000000b652         pop        r14
000000000000b654         pop        r15
000000000000b656         ret
                        ; endp
000000000000b657         align      32

                     loc_b660:
000000000000b660         mov        rdi, qword [rsp+0x78+var_48]                ; argument "__ptr" for method j_free, CODE XREF=sub_epsilon_src_nodes+163
000000000000b665         mov        dword [rsp+0x78+var_78], eax
000000000000b668         call       j_free                                      ; free
000000000000b66d         mov        eax, dword [rsp+0x78+var_78]
000000000000b670         jmp        loc_b638

                     loc_b672:
000000000000b672         xor        edi, edi                                    ; CODE XREF=sub_epsilon_src_nodes+75
000000000000b674         jmp        loc_b631

                     loc_b676:
000000000000b676         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=sub_epsilon_src_nodes+518
                        ; endp
000000000000b67b         align      128                                         ; End of unwind block (FDE at 0x1925c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_58: -88
        ;    var_67: int8_t, -103
        ;    var_68: int8_t, -104
        ;    var_78: -120
        ;    var_88: int8_t, -136
        ;    var_98: -152
        ;    var_A8: int64_t, -168
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_CC: int32_t, -204
        ;    var_E0: int64_t, -224
        ;    var_E8: int64_t, -232
        ;    var_E9: int8_t, -233
        ;    var_F8: int64_t, -248
        ;    var_100: int64_t, -256
        ;    var_108: int64_t, -264
        ;    var_110: int64_t, -272
        ;    var_118: int64_t, -280
        ;    var_120: int64_t, -288
        ;    var_128: int64_t, -296
        ;    var_130: int64_t, -304


                     build_trtable:
000000000000b680         push       r15                                         ; Begin of unwind block (FDE at 0x192ac), CODE XREF=re_search_internal+4240
000000000000b682         push       r14
000000000000b684         mov        r15, rdi
000000000000b687         push       r13
000000000000b689         push       r12
000000000000b68b         mov        edi, 0x3800                                 ; argument "__size" for method j_malloc
000000000000b690         push       rbp
000000000000b691         push       rbx
000000000000b692         sub        rsp, 0x108
000000000000b699         mov        rax, qword [fs:0x28]
000000000000b6a2         mov        qword [rsp+0x138+var_40], rax
000000000000b6aa         xor        eax, eax
000000000000b6ac         mov        qword [rsp+0x138+var_130], rsi
000000000000b6b1         call       j_malloc                                    ; malloc
000000000000b6b6         test       rax, rax
000000000000b6b9         mov        qword [rsp+0x138+var_120], rax
000000000000b6be         je         loc_ba90

000000000000b6c4         mov        rax, qword [rsp+0x138+var_120]
000000000000b6c9         pxor       xmm0, xmm0
000000000000b6cd         lea        rbx, qword [rax+0x1800]
000000000000b6d4         mov        rax, qword [rsp+0x138+var_130]
000000000000b6d9         movaps     xmmword [rsp+0x138+var_A8], xmm0
000000000000b6e1         mov        qword [rsp+0x138+var_F8], rbx
000000000000b6e6         movaps     xmmword [rsp+0x138+var_98], xmm0
000000000000b6ee         cmp        qword [rax+0x10], 0x0
000000000000b6f3         mov        qword [rax+0x58], 0x0
000000000000b6fb         mov        qword [rax+0x60], 0x0
000000000000b703         jle        loc_c17a

000000000000b709         mov        qword [rsp+0x138+var_108], r15
000000000000b70e         xor        ebp, ebp
000000000000b710         mov        qword [rsp+0x138+var_128], 0x0
000000000000b719         mov        r15, rbx

                     loc_b71c:
000000000000b71c         mov        rbx, qword [rsp+0x138+var_128]              ; CODE XREF=build_trtable+275
000000000000b721         lea        rax, qword [rbx*8]
000000000000b729         mov        qword [rsp+0x138+var_118], rax
000000000000b72e         mov        rax, qword [rsp+0x138+var_130]
000000000000b733         mov        rax, qword [rax+0x18]
000000000000b737         mov        r13, qword [rax+rbx*8]
000000000000b73b         mov        rax, qword [rsp+0x138+var_108]
000000000000b740         shl        r13, 0x4
000000000000b744         add        r13, qword [rax]
000000000000b747         movzx      r14d, byte [r13+8]
000000000000b74c         mov        eax, dword [r13+8]
000000000000b750         shr        eax, 0x8
000000000000b753         and        ax, 0x3ff
000000000000b757         cmp        r14d, 0x1
000000000000b75b         je         loc_bac0

000000000000b761         cmp        r14d, 0x3
000000000000b765         je         loc_bf30

000000000000b76b         cmp        r14d, 0x5
000000000000b76f         je         loc_bdf0

000000000000b775         cmp        r14d, 0x7
000000000000b779         je         loc_bf59

                     loc_b77f:
000000000000b77f         mov        rbx, qword [rsp+0x138+var_130]              ; CODE XREF=build_trtable+1231, build_trtable+1316, build_trtable+1694, build_trtable+1827, build_trtable+2042, build_trtable+2144, build_trtable+2337
000000000000b784         add        qword [rsp+0x138+var_128], 0x1
000000000000b78a         mov        rax, qword [rsp+0x138+var_128]
000000000000b78f         cmp        rax, qword [rbx+0x10]
000000000000b793         jl         loc_b71c

000000000000b795         test       rbp, rbp
000000000000b798         mov        r15, qword [rsp+0x138+var_108]
000000000000b79d         jle        loc_c1f9

000000000000b7a3         lea        rbx, qword [rbp+1]
000000000000b7a7         mov        qword [rsp+0x138+var_C0], 0x0
000000000000b7b0         mov        qword [rsp+0x138+var_C8], rbx
000000000000b7b5         shl        rbx, 0x3
000000000000b7b9         mov        rdi, rbx                                    ; argument "__size" for method j_malloc
000000000000b7bc         call       j_malloc                                    ; malloc
000000000000b7c1         test       rax, rax
000000000000b7c4         mov        r12, rax
000000000000b7c7         mov        qword [rsp+0x138+var_B8], rax
000000000000b7cf         je         loc_bfcf

000000000000b7d5         movabs     rax, 0xaaaaaaaaaaaa855
000000000000b7df         mov        dword [rsp+0x138+var_CC], 0x0
000000000000b7e7         cmp        rbp, rax
000000000000b7ea         jg         loc_bfcf

000000000000b7f0         lea        rax, qword [rbp+rbp*2]
000000000000b7f5         shl        rax, 0x3
000000000000b7f9         mov        rdi, rax                                    ; argument "__size" for method j_malloc
000000000000b7fc         mov        qword [rsp+0x138+var_E0], rax
000000000000b801         call       j_malloc                                    ; malloc
000000000000b806         test       rax, rax
000000000000b809         mov        qword [rsp+0x138+var_128], rax
000000000000b80e         je         loc_bfcf

000000000000b814         mov        rax, qword [rsp+0x138+var_128]
000000000000b819         sub        rbx, 0x8
000000000000b81d         mov        r12, qword [rsp+0x138+var_F8]
000000000000b822         pxor       xmm0, xmm0
000000000000b826         lea        r14, qword [rsp+0x138+var_C8]
000000000000b82b         mov        qword [rsp+0x138+var_118], rbp
000000000000b830         mov        byte [rsp+0x138+var_E9], 0x0
000000000000b835         mov        rbp, r15
000000000000b838         add        rax, rbx
000000000000b83b         mov        qword [rsp+0x138+var_E8], r12
000000000000b840         add        rbx, rax
000000000000b843         mov        qword [rsp+0x138+var_108], rax
000000000000b848         mov        rax, qword [rsp+0x138+var_120]
000000000000b84d         movaps     xmmword [rsp+0x138+var_68], xmm0
000000000000b855         mov        qword [rsp+0x138+var_100], rbx
000000000000b85a         xor        ebx, ebx
000000000000b85c         lea        r13, qword [rax+8]
000000000000b860         lea        rax, qword [rsp+0x138+var_CC]
000000000000b865         movaps     xmmword [rsp+0x138+var_58], xmm0
000000000000b86d         mov        qword [rsp+0x138+var_110], rax

                     loc_b872:
000000000000b872         mov        qword [rsp+0x138+var_C0], 0x0               ; CODE XREF=build_trtable+706
000000000000b87b         cmp        qword [r13], 0x0
000000000000b880         jle        loc_b8c8

000000000000b882         xor        r15d, r15d
000000000000b885         nop        dword [rax]

                     loc_b888:
000000000000b888         mov        rax, qword [r13+8]                          ; CODE XREF=build_trtable+582
000000000000b88c         mov        rdx, qword [rax+r15*8]
000000000000b890         mov        rax, qword [rbp+0x18]
000000000000b894         mov        rax, qword [rax+rdx*8]
000000000000b898         cmp        rax, 0xffffffffffffffff
000000000000b89c         je         loc_b8be

000000000000b89e         lea        rdx, qword [rax+rax*2]
000000000000b8a2         mov        rax, qword [rbp+0x30]
000000000000b8a6         mov        rdi, r14
000000000000b8a9         lea        rsi, qword [rax+rdx*8]
000000000000b8ad         call       re_node_set_merge                           ; re_node_set_merge
000000000000b8b2         test       eax, eax
000000000000b8b4         mov        dword [rsp+0x138+var_CC], eax
000000000000b8b8         jne        loc_bfb8

                     loc_b8be:
000000000000b8be         add        r15, 0x1                                    ; CODE XREF=build_trtable+540
000000000000b8c2         cmp        qword [r13], r15
000000000000b8c6         jg         loc_b888

                     loc_b8c8:
000000000000b8c8         mov        rdi, qword [rsp+0x138+var_110]              ; CODE XREF=build_trtable+512
000000000000b8cd         xor        ecx, ecx
000000000000b8cf         mov        rsi, rbp
000000000000b8d2         mov        rdx, r14
000000000000b8d5         call       re_acquire_state_context                    ; re_acquire_state_context
000000000000b8da         mov        rsi, qword [rsp+0x138+var_128]
000000000000b8df         test       rax, rax
000000000000b8e2         mov        qword [rsi+rbx*8], rax
000000000000b8e6         je         loc_c098

                     loc_b8ec:
000000000000b8ec         cmp        byte [rax+0x68], 0x0                        ; CODE XREF=build_trtable+2590
000000000000b8f0         js         loc_c010

000000000000b8f6         mov        rdi, qword [rsp+0x138+var_108]
000000000000b8fb         mov        rsi, qword [rsp+0x138+var_100]
000000000000b900         mov        qword [rdi+rbx*8], rax
000000000000b904         mov        rax, qword [rsp+0x138+var_128]
000000000000b909         mov        rax, qword [rax+rbx*8]
000000000000b90d         mov        qword [rsi+rbx*8], rax

                     loc_b911:
000000000000b911         lea        rdx, qword [rsp+0x138+var_68]               ; CODE XREF=build_trtable+2556, build_trtable+2568
000000000000b919         xor        eax, eax

                     loc_b91b:
000000000000b91b         mov        rcx, qword [rdx+rax]                        ; CODE XREF=build_trtable+687
000000000000b91f         or         rcx, qword [r12+rax]
000000000000b923         mov        qword [rdx+rax], rcx
000000000000b927         add        rax, 0x8
000000000000b92b         cmp        rax, 0x20
000000000000b92f         jne        loc_b91b

000000000000b931         add        rbx, 0x1
000000000000b935         add        r13, 0x18
000000000000b939         add        r12, 0x20
000000000000b93d         cmp        rbx, qword [rsp+0x138+var_118]
000000000000b942         jne        loc_b872

000000000000b948         cmp        byte [rsp+0x138+var_E9], 0x0
000000000000b94d         mov        r15, rbp
000000000000b950         mov        rbp, qword [rsp+0x138+var_118]
000000000000b955         mov        qword [rsp+0x138+var_118], rdx
000000000000b95a         jne        loc_c0a9

000000000000b960         mov        esi, 0x100                                  ; argument "__size" for method j_calloc
000000000000b965         mov        edi, 0x8                                    ; argument "__nmemb" for method j_calloc
000000000000b96a         call       j_calloc                                    ; calloc
000000000000b96f         mov        r11, rax
000000000000b972         mov        rax, qword [rsp+0x138+var_130]
000000000000b977         test       r11, r11
000000000000b97a         mov        qword [rax+0x58], r11
000000000000b97e         je         loc_bfbd

000000000000b984         mov        rbx, qword [rsp+0x138+var_F8]
000000000000b989         mov        r12, qword [rsp+0x138+var_128]
000000000000b98e         xor        r9d, r9d
000000000000b991         mov        r13, qword [rsp+0x138+var_108]
000000000000b996         mov        rdx, qword [rsp+0x138+var_118]
000000000000b99b         add        rbx, 0x20

                     loc_b99f:
000000000000b99f         mov        rax, qword [rdx+r9]                         ; CODE XREF=build_trtable+860
000000000000b9a3         test       rax, rax
000000000000b9a6         je         loc_b9d4

000000000000b9a8         mov        rsi, r9
000000000000b9ab         mov        ecx, 0x1
000000000000b9b0         shl        rsi, 0x6
000000000000b9b4         add        rsi, r11
000000000000b9b7         nop        word [rax+rax]

                     loc_b9c0:
000000000000b9c0         test       al, 0x1                                     ; CODE XREF=build_trtable+850
000000000000b9c2         jne        loc_c128

                     loc_b9c8:
000000000000b9c8         add        rcx, rcx                                    ; CODE XREF=build_trtable+2793, build_trtable+2805
000000000000b9cb         add        rsi, 0x8
000000000000b9cf         shr        rax, 0x1
000000000000b9d2         jne        loc_b9c0

                     loc_b9d4:
000000000000b9d4         add        r9, 0x8                                     ; CODE XREF=build_trtable+806
000000000000b9d8         cmp        r9, 0x20
000000000000b9dc         jne        loc_b99f

                     loc_b9de:
000000000000b9de         test       byte [rsp+0x138+var_67], 0x4                ; CODE XREF=build_trtable+2720
000000000000b9e6         je         loc_ba22

000000000000b9e8         xor        eax, eax
000000000000b9ea         mov        rdx, qword [rsp+0x138+var_E8]
000000000000b9ef         jmp        loc_b9fe

                     loc_b9f1:
000000000000b9f1         add        rax, 0x1                                    ; CODE XREF=build_trtable+901
000000000000b9f5         add        rdx, 0x20
000000000000b9f9         cmp        rax, rbp
000000000000b9fc         je         loc_ba22

                     loc_b9fe:
000000000000b9fe         test       qword [rdx], 0x400                          ; CODE XREF=build_trtable+879
000000000000ba05         je         loc_b9f1

000000000000ba07         mov        rbx, qword [rsp+0x138+var_100]
000000000000ba0c         cmp        byte [rsp+0x138+var_E9], 0x0
000000000000ba11         mov        rax, qword [rbx+rax*8]
000000000000ba15         mov        qword [r11+0x50], rax
000000000000ba19         je         loc_ba22

000000000000ba1b         mov        qword [r11+0x850], rax

                     loc_ba22:
000000000000ba22         mov        rdi, qword [rsp+0x138+var_128]              ; argument "__ptr" for method j_free, CODE XREF=build_trtable+870, build_trtable+892, build_trtable+921
000000000000ba27         call       j_free                                      ; free
000000000000ba2c         mov        rdi, qword [rsp+0x138+var_B8]               ; argument "__ptr" for method j_free
000000000000ba34         call       j_free                                      ; free
000000000000ba39         mov        rax, qword [rsp+0x138+var_120]
000000000000ba3e         mov        rbx, qword [rsp+0x138+var_E0]
000000000000ba43         lea        rbp, qword [rax+0x10]
000000000000ba47         add        rbx, rbp

                     loc_ba4a:
000000000000ba4a         mov        rdi, qword [rbp]                            ; argument "__ptr" for method j_free, CODE XREF=build_trtable+986
000000000000ba4e         add        rbp, 0x18
000000000000ba52         call       j_free                                      ; free
000000000000ba57         cmp        rbx, rbp
000000000000ba5a         jne        loc_ba4a

000000000000ba5c         mov        rdi, qword [rsp+0x138+var_120]              ; argument "__ptr" for method j_free
000000000000ba61         call       j_free                                      ; free
000000000000ba66         mov        eax, 0x1
000000000000ba6b         jmp        loc_ba92

                     loc_ba6d:
000000000000ba6d         test       rbp, rbp                                    ; CODE XREF=build_trtable+1799
000000000000ba70         mov        qword [rbx+8], 0x0
000000000000ba78         mov        qword [rbx], 0x0
000000000000ba7f         jne        loc_bdb0

000000000000ba85         mov        rdi, qword [rsp+0x138+var_120]              ; argument "__ptr" for method j_free
000000000000ba8a         call       j_free                                      ; free
000000000000ba8f         nop

                     loc_ba90:
000000000000ba90         xor        eax, eax                                    ; CODE XREF=build_trtable+62, build_trtable+1891, build_trtable+2443, build_trtable+2950

                     loc_ba92:
000000000000ba92         mov        rbx, qword [rsp+0x138+var_40]               ; CODE XREF=build_trtable+1003, build_trtable+2850
000000000000ba9a         xor        rbx, qword [fs:0x28]
000000000000baa3         jne        loc_c1f4

000000000000baa9         add        rsp, 0x108
000000000000bab0         pop        rbx
000000000000bab1         pop        rbp
000000000000bab2         pop        r12
000000000000bab4         pop        r13
000000000000bab6         pop        r14
000000000000bab8         pop        r15
000000000000baba         ret
                        ; endp
000000000000babb         align      64

                     loc_bac0:
000000000000bac0         movzx      ecx, byte [r13]                             ; CODE XREF=build_trtable+219
000000000000bac5         lea        r12, qword [rsp+0x138+var_A8]
000000000000bacd         mov        edi, 0x1
000000000000bad2         mov        rdx, rcx
000000000000bad5         and        ecx, 0x3f
000000000000bad8         shr        rdx, 0x3
000000000000badc         shl        rdi, cl
000000000000badf         and        edx, 0x18
000000000000bae2         or         qword [r12+rdx], rdi

                     loc_bae6:
000000000000bae6         test       ax, ax                                      ; CODE XREF=build_trtable+1993, build_trtable+2008, build_trtable+2260
000000000000bae9         je         loc_bbb0

000000000000baef         test       al, 0x20
000000000000baf1         jne        loc_be60

                     loc_baf7:
000000000000baf7         test       al, 0x80                                    ; CODE XREF=build_trtable+2060
000000000000baf9         jne        loc_bd94

000000000000baff         test       al, 0x4
000000000000bb01         je         loc_bb55

000000000000bb03         cmp        r14d, 0x1
000000000000bb07         je         loc_bee5

000000000000bb0d         mov        r8, qword [rsp+0x138+var_108]
000000000000bb12         cmp        dword [r8+0xb4], 0x1
000000000000bb1a         jle        loc_bf72

                     loc_bb20:
000000000000bb20         mov        rdi, qword [r8+0x78]                        ; CODE XREF=build_trtable+2173
000000000000bb24         xor        esi, esi
000000000000bb26         xor        ecx, ecx

                     loc_bb28:
000000000000bb28         mov        rdx, qword [rdi+rcx*8]                      ; CODE XREF=build_trtable+1226
000000000000bb2c         not        rdx
000000000000bb2f         or         rdx, qword [r8+rcx*8+0xb8]
000000000000bb37         and        rdx, qword [r12+rcx*8]
000000000000bb3b         mov        qword [r12+rcx*8], rdx
000000000000bb3f         add        rcx, 0x1
000000000000bb43         or         rsi, rdx
000000000000bb46         cmp        rcx, 0x4
000000000000bb4a         jne        loc_bb28

000000000000bb4c         test       rsi, rsi
000000000000bb4f         je         loc_b77f

                     loc_bb55:
000000000000bb55         test       al, 0x8                                     ; CODE XREF=build_trtable+1153, build_trtable+2331
000000000000bb57         je         loc_bbb0

000000000000bb59         cmp        r14d, 0x1
000000000000bb5d         je         loc_be91

000000000000bb63         mov        rdi, qword [rsp+0x138+var_108]
000000000000bb68         cmp        dword [rdi+0xb4], 0x1
000000000000bb6f         jle        loc_beae

                     loc_bb75:
000000000000bb75         mov        rsi, qword [rdi+0x78]                       ; CODE XREF=build_trtable+2088
000000000000bb79         xor        ecx, ecx
000000000000bb7b         xor        edx, edx

                     loc_bb7d:
000000000000bb7d         mov        rax, qword [rdi+rdx*8+0xb8]                 ; CODE XREF=build_trtable+1311
000000000000bb85         and        rax, qword [rsi+rdx*8]
000000000000bb89         not        rax
000000000000bb8c         and        rax, qword [r12+rdx*8]
000000000000bb90         mov        qword [r12+rdx*8], rax
000000000000bb94         add        rdx, 0x1
000000000000bb98         or         rcx, rax
000000000000bb9b         cmp        rdx, 0x4
000000000000bb9f         jne        loc_bb7d

000000000000bba1         test       rcx, rcx
000000000000bba4         je         loc_b77f

000000000000bbaa         nop        word [rax+rax]

                     loc_bbb0:
000000000000bbb0         xor        ebx, ebx                                    ; CODE XREF=build_trtable+1129, build_trtable+1239, build_trtable+2138
000000000000bbb2         test       rbp, rbp
000000000000bbb5         jle        loc_bd1b

000000000000bbbb         mov        qword [rsp+0x138+var_110], r13
000000000000bbc0         mov        r13, r15
000000000000bbc3         nop        dword [rax+rax]

                     loc_bbc8:
000000000000bbc8         mov        r10, rbx                                    ; CODE XREF=build_trtable+1682
000000000000bbcb         shl        r10, 0x5
000000000000bbcf         cmp        r14d, 0x1
000000000000bbd3         jne        loc_bbf8

000000000000bbd5         mov        rax, qword [rsp+0x138+var_110]
000000000000bbda         movzx      edx, byte [rax]
000000000000bbdd         mov        rax, rdx
000000000000bbe0         shr        rax, 0x3
000000000000bbe4         and        eax, 0x18
000000000000bbe7         add        rax, r13
000000000000bbea         mov        rax, qword [rax+r10]
000000000000bbee         bt         rax, rdx
000000000000bbf2         jae        loc_bd0b

                     loc_bbf8:
000000000000bbf8         lea        rdi, qword [r13+r10]                        ; CODE XREF=build_trtable+1363
000000000000bbfd         lea        rsi, qword [rsp+0x138+var_88]
000000000000bc05         xor        ecx, ecx
000000000000bc07         xor        eax, eax

                     loc_bc09:
000000000000bc09         mov        rdx, qword [r12+rax*8]                      ; CODE XREF=build_trtable+1440
000000000000bc0d         and        rdx, qword [rdi+rax*8]
000000000000bc11         mov        qword [rsi+rax*8], rdx
000000000000bc15         add        rax, 0x1
000000000000bc19         or         rcx, rdx
000000000000bc1c         cmp        rax, 0x4
000000000000bc20         jne        loc_bc09

000000000000bc22         test       rcx, rcx
000000000000bc25         je         loc_bd0b

000000000000bc2b         lea        r11, qword [rsp+0x138+var_68]
000000000000bc33         xor        r15d, r15d
000000000000bc36         xor        r9d, r9d
000000000000bc39         xor        ecx, ecx

                     loc_bc3b:
000000000000bc3b         mov        rsi, qword [r12+rcx*8]                      ; CODE XREF=build_trtable+1512
000000000000bc3f         mov        rax, qword [rdi+rcx*8]
000000000000bc43         mov        rdx, rsi
000000000000bc46         not        rdx
000000000000bc49         and        rdx, rax
000000000000bc4c         not        rax
000000000000bc4f         and        rax, rsi
000000000000bc52         mov        qword [r11+rcx*8], rdx
000000000000bc56         or         r9, rdx
000000000000bc59         mov        qword [r12+rcx*8], rax
000000000000bc5d         add        rcx, 0x1
000000000000bc61         or         r15, rax
000000000000bc64         cmp        rcx, 0x4
000000000000bc68         jne        loc_bc3b

000000000000bc6a         mov        rdi, qword [rsp+0x138+var_120]
000000000000bc6f         lea        rax, qword [rbx+rbx*2]
000000000000bc73         test       r9, r9
000000000000bc76         lea        rdx, qword [rdi+rax*8]
000000000000bc7a         je         loc_bce4

000000000000bc7c         mov        rax, rbp
000000000000bc7f         movdqa     xmm0, xmmword [rsp+0x138+var_68]
000000000000bc88         shl        rax, 0x5
000000000000bc8c         mov        rsi, rdx
000000000000bc8f         mov        qword [rsp+0x138+var_100], rdx
000000000000bc94         add        rax, r13
000000000000bc97         movups     xmmword [rax], xmm0
000000000000bc9a         movdqa     xmm0, xmmword [rsp+0x138+var_58]
000000000000bca3         movups     xmmword [rax+0x10], xmm0
000000000000bca7         lea        rax, qword [rbp+rbp*2]
000000000000bcac         lea        rdi, qword [rdi+rax*8]
000000000000bcb0         movdqa     xmm0, xmmword [rsp+0x138+var_88]
000000000000bcb9         movups     xmmword [r13+r10], xmm0
000000000000bcbf         movdqa     xmm0, xmmword [rsp+0x138+var_78]
000000000000bcc8         movups     xmmword [r13+r10+0x10], xmm0
000000000000bcce         call       re_node_set_init_copy                       ; re_node_set_init_copy
000000000000bcd3         test       eax, eax
000000000000bcd5         jne        loc_bdb0

000000000000bcdb         mov        rdx, qword [rsp+0x138+var_100]
000000000000bce0         add        rbp, 0x1

                     loc_bce4:
000000000000bce4         mov        rax, qword [rsp+0x138+var_130]              ; CODE XREF=build_trtable+1530
000000000000bce9         mov        rsi, qword [rsp+0x138+var_118]
000000000000bcee         mov        rdi, rdx
000000000000bcf1         mov        rax, qword [rax+0x18]
000000000000bcf5         mov        rsi, qword [rax+rsi]
000000000000bcf9         call       re_node_set_insert                          ; re_node_set_insert
000000000000bcfe         test       al, al
000000000000bd00         je         loc_bdb0

000000000000bd06         test       r15, r15
000000000000bd09         je         loc_bd18

                     loc_bd0b:
000000000000bd0b         add        rbx, 0x1                                    ; CODE XREF=build_trtable+1394, build_trtable+1445
000000000000bd0f         cmp        rbx, rbp
000000000000bd12         jl         loc_bbc8

                     loc_bd18:
000000000000bd18         mov        r15, r13                                    ; CODE XREF=build_trtable+1673

                     loc_bd1b:
000000000000bd1b         cmp        rbp, rbx                                    ; CODE XREF=build_trtable+1333
000000000000bd1e         jne        loc_b77f

000000000000bd24         mov        rax, rbp
000000000000bd27         movdqa     xmm0, xmmword [rsp+0x138+var_A8]
000000000000bd30         shl        rax, 0x5
000000000000bd34         mov        rbx, qword [rsp+0x138+var_118]
000000000000bd39         mov        edi, 0x8                                    ; argument "__size" for method j_malloc
000000000000bd3e         add        rax, r15
000000000000bd41         movups     xmmword [rax], xmm0
000000000000bd44         movdqa     xmm0, xmmword [rsp+0x138+var_98]
000000000000bd4d         movups     xmmword [rax+0x10], xmm0
000000000000bd51         mov        rax, qword [rsp+0x138+var_130]
000000000000bd56         mov        rax, qword [rax+0x18]
000000000000bd5a         mov        r13, qword [rax+rbx]
000000000000bd5e         mov        rbx, qword [rsp+0x138+var_120]
000000000000bd63         lea        rax, qword [rbp+rbp*2]
000000000000bd68         lea        rbx, qword [rbx+rax*8]
000000000000bd6c         mov        qword [rbx], 0x1
000000000000bd73         mov        qword [rbx+8], 0x1
000000000000bd7b         call       j_malloc                                    ; malloc
000000000000bd80         test       rax, rax
000000000000bd83         mov        qword [rbx+0x10], rax
000000000000bd87         je         loc_ba6d

000000000000bd8d         mov        qword [rax], r13
000000000000bd90         add        rbp, 0x1

                     loc_bd94:
000000000000bd94         pxor       xmm0, xmm0                                  ; CODE XREF=build_trtable+1145, build_trtable+2070, build_trtable+2154
000000000000bd98         movaps     xmmword [r12], xmm0
000000000000bd9d         movaps     xmmword [r12+0x10], xmm0
000000000000bda3         jmp        loc_b77f
000000000000bda8         align      16

                     loc_bdb0:
000000000000bdb0         mov        rax, qword [rsp+0x138+var_120]              ; CODE XREF=build_trtable+1023, build_trtable+1621, build_trtable+1664
000000000000bdb5         lea        rbx, qword [rax+0x10]
000000000000bdb9         lea        rax, qword [rbp+rbp*2]
000000000000bdbe         lea        rbp, qword [rbx+rax*8]
000000000000bdc2         nop        word [rax+rax]

                     loc_bdc8:
000000000000bdc8         mov        rdi, qword [rbx]                            ; argument "__ptr" for method j_free, CODE XREF=build_trtable+1879
000000000000bdcb         add        rbx, 0x18
000000000000bdcf         call       j_free                                      ; free
000000000000bdd4         cmp        rbp, rbx
000000000000bdd7         jne        loc_bdc8

000000000000bdd9         mov        rdi, qword [rsp+0x138+var_120]              ; argument "__ptr" for method j_free
000000000000bdde         call       j_free                                      ; free
000000000000bde3         jmp        loc_ba90
000000000000bde8         align      16

                     loc_bdf0:
000000000000bdf0         mov        rsi, qword [rsp+0x138+var_108]              ; CODE XREF=build_trtable+239
000000000000bdf5         cmp        dword [rsi+0xb4], 0x1
000000000000bdfc         jle        loc_bf05

000000000000be02         mov        rsi, qword [rsi+0x78]
000000000000be06         lea        r12, qword [rsp+0x138+var_A8]
000000000000be0e         xor        edx, edx

                     loc_be10:
000000000000be10         mov        rcx, qword [r12+rdx]                        ; CODE XREF=build_trtable+1956
000000000000be14         or         rcx, qword [rsi+rdx]
000000000000be18         mov        qword [r12+rdx], rcx
000000000000be1c         add        rdx, 0x8
000000000000be20         cmp        rdx, 0x20
000000000000be24         jne        loc_be10

                     loc_be26:
000000000000be26         mov        rbx, qword [rsp+0x138+var_108]              ; CODE XREF=build_trtable+2209, build_trtable+2285
000000000000be2b         mov        rdx, qword [rbx+0xd8]
000000000000be32         test       dl, 0x40
000000000000be35         jne        loc_be43

000000000000be37         and        qword [rsp+0x138+var_A8], 0xfffffffffffffbff

                     loc_be43:
000000000000be43         and        edx, 0x80                                   ; CODE XREF=build_trtable+1973
000000000000be49         je         loc_bae6

000000000000be4f         and        qword [rsp+0x138+var_A8], 0xfffffffffffffffe
000000000000be58         jmp        loc_bae6
000000000000be5d         align      32

                     loc_be60:
000000000000be60         mov        rdx, qword [rsp+0x138+var_A8]               ; CODE XREF=build_trtable+1137
000000000000be68         pxor       xmm0, xmm0
000000000000be6c         and        dh, 0x4
000000000000be6f         movaps     xmmword [r12], xmm0
000000000000be74         movaps     xmmword [r12+0x10], xmm0
000000000000be7a         je         loc_b77f

000000000000be80         mov        qword [rsp+0x138+var_A8], 0x400
000000000000be8c         jmp        loc_baf7

                     loc_be91:
000000000000be91         test       byte [r13+0xa], 0x40                        ; CODE XREF=build_trtable+1245
000000000000be96         jne        loc_bd94

000000000000be9c         mov        rdi, qword [rsp+0x138+var_108]
000000000000bea1         cmp        dword [rdi+0xb4], 0x1
000000000000bea8         jg         loc_bb75

                     loc_beae:
000000000000beae         mov        rsi, qword [rsp+0x138+var_108]              ; CODE XREF=build_trtable+1263
000000000000beb3         xor        ecx, ecx
000000000000beb5         xor        edx, edx

                     loc_beb7:
000000000000beb7         mov        rax, qword [rsi+rdx*8+0xb8]                 ; CODE XREF=build_trtable+2133
000000000000bebf         not        rax
000000000000bec2         and        rax, qword [r12+rdx*8]
000000000000bec6         mov        qword [r12+rdx*8], rax
000000000000beca         add        rdx, 0x1
000000000000bece         or         rcx, rax
000000000000bed1         cmp        rdx, 0x4
000000000000bed5         jne        loc_beb7

000000000000bed7         test       rcx, rcx
000000000000beda         jne        loc_bbb0

000000000000bee0         jmp        loc_b77f

                     loc_bee5:
000000000000bee5         test       byte [r13+0xa], 0x40                        ; CODE XREF=build_trtable+1159
000000000000beea         je         loc_bd94

000000000000bef0         mov        r8, qword [rsp+0x138+var_108]
000000000000bef5         cmp        dword [r8+0xb4], 0x1
000000000000befd         jg         loc_bb20

000000000000bf03         jmp        loc_bf72

                     loc_bf05:
000000000000bf05         pcmpeqd    xmm0, xmm0                                  ; CODE XREF=build_trtable+1916
000000000000bf09         lea        r12, qword [rsp+0x138+var_A8]
000000000000bf11         movaps     xmmword [rsp+0x138+var_A8], xmm0
000000000000bf19         movaps     xmmword [rsp+0x138+var_98], xmm0
000000000000bf21         jmp        loc_be26
000000000000bf26         align      16

                     loc_bf30:
000000000000bf30         mov        rsi, qword [r13]                            ; CODE XREF=build_trtable+229
000000000000bf34         lea        r12, qword [rsp+0x138+var_A8]
000000000000bf3c         xor        edx, edx

                     loc_bf3e:
000000000000bf3e         mov        rcx, qword [r12+rdx]                        ; CODE XREF=build_trtable+2258
000000000000bf42         or         rcx, qword [rsi+rdx]
000000000000bf46         mov        qword [r12+rdx], rcx
000000000000bf4a         add        rdx, 0x8
000000000000bf4e         cmp        rdx, 0x20
000000000000bf52         jne        loc_bf3e

000000000000bf54         jmp        loc_bae6

                     loc_bf59:
000000000000bf59         pcmpeqd    xmm0, xmm0                                  ; CODE XREF=build_trtable+249
000000000000bf5d         lea        r12, qword [rsp+0x138+var_A8]
000000000000bf65         movaps     xmmword [rsp+0x138+var_A8], xmm0
000000000000bf6d         jmp        loc_be26

                     loc_bf72:
000000000000bf72         mov        rdi, qword [rsp+0x138+var_108]              ; CODE XREF=build_trtable+1178, build_trtable+2179
000000000000bf77         xor        esi, esi
000000000000bf79         xor        edx, edx

                     loc_bf7b:
000000000000bf7b         mov        rcx, qword [r12+rdx*8]                      ; CODE XREF=build_trtable+2326
000000000000bf7f         and        rcx, qword [rdi+rdx*8+0xb8]
000000000000bf87         mov        qword [r12+rdx*8], rcx
000000000000bf8b         add        rdx, 0x1
000000000000bf8f         or         rsi, rcx
000000000000bf92         cmp        rdx, 0x4
000000000000bf96         jne        loc_bf7b

000000000000bf98         test       rsi, rsi
000000000000bf9b         jne        loc_bb55

000000000000bfa1         jmp        loc_b77f

                     loc_bfa6:
000000000000bfa6         mov        edx, dword [rsp+0x138+var_CC]               ; CODE XREF=build_trtable+2481
000000000000bfaa         test       edx, edx
000000000000bfac         je         loc_c037

000000000000bfb2         nop        word [rax+rax]

                     loc_bfb8:
000000000000bfb8         mov        rbp, qword [rsp+0x138+var_118]              ; CODE XREF=build_trtable+568, build_trtable+2574, build_trtable+2596

                     loc_bfbd:
000000000000bfbd         mov        rdi, qword [rsp+0x138+var_128]              ; argument "__ptr" for method j_free, CODE XREF=build_trtable+766, build_trtable+2631
000000000000bfc2         call       j_free                                      ; free
000000000000bfc7         mov        r12, qword [rsp+0x138+var_B8]

                     loc_bfcf:
000000000000bfcf         mov        rdi, r12                                    ; argument "__ptr" for method j_free, CODE XREF=build_trtable+335, build_trtable+362, build_trtable+398
000000000000bfd2         call       j_free                                      ; free
000000000000bfd7         mov        rax, qword [rsp+0x138+var_120]
000000000000bfdc         lea        rbx, qword [rax+0x10]
000000000000bfe0         lea        rax, qword [rbp+rbp*2]
000000000000bfe5         lea        rbp, qword [rbx+rax*8]
000000000000bfe9         nop        dword [rax]

                     loc_bff0:
000000000000bff0         mov        rdi, qword [rbx]                            ; argument "__ptr" for method j_free, CODE XREF=build_trtable+2431
000000000000bff3         add        rbx, 0x18
000000000000bff7         call       j_free                                      ; free
000000000000bffc         cmp        rbp, rbx
000000000000bfff         jne        loc_bff0

000000000000c001         mov        rdi, qword [rsp+0x138+var_120]              ; argument "__ptr" for method j_free
000000000000c006         call       j_free                                      ; free
000000000000c00b         jmp        loc_ba90

                     loc_c010:
000000000000c010         mov        rdi, qword [rsp+0x138+var_110]              ; CODE XREF=build_trtable+624
000000000000c015         mov        ecx, 0x1
000000000000c01a         mov        rdx, r14
000000000000c01d         mov        rsi, rbp
000000000000c020         call       re_acquire_state_context                    ; re_acquire_state_context
000000000000c025         mov        rdi, qword [rsp+0x138+var_108]
000000000000c02a         test       rax, rax
000000000000c02d         mov        qword [rdi+rbx*8], rax
000000000000c031         je         loc_bfa6

                     loc_c037:
000000000000c037         mov        rdi, qword [rsp+0x138+var_128]              ; CODE XREF=build_trtable+2348
000000000000c03c         cmp        rax, qword [rdi+rbx*8]
000000000000c040         je         loc_c05b

000000000000c042         movzx      edi, byte [rsp+0x138+var_E9]
000000000000c047         cmp        dword [rbp+0xb4], 0x2
000000000000c04e         mov        eax, 0x1
000000000000c053         cmovge     edi, eax
000000000000c056         mov        byte [rsp+0x138+var_E9], dil

                     loc_c05b:
000000000000c05b         mov        rdi, qword [rsp+0x138+var_110]              ; CODE XREF=build_trtable+2496
000000000000c060         mov        rsi, rbp
000000000000c063         mov        ecx, 0x2
000000000000c068         mov        rdx, r14
000000000000c06b         call       re_acquire_state_context                    ; re_acquire_state_context
000000000000c070         mov        rsi, qword [rsp+0x138+var_100]
000000000000c075         test       rax, rax
000000000000c078         mov        qword [rsi+rbx*8], rax
000000000000c07c         jne        loc_b911

000000000000c082         mov        eax, dword [rsp+0x138+var_CC]
000000000000c086         test       eax, eax
000000000000c088         je         loc_b911

000000000000c08e         jmp        loc_bfb8
000000000000c093         align      8

                     loc_c098:
000000000000c098         mov        ecx, dword [rsp+0x138+var_CC]               ; CODE XREF=build_trtable+614
000000000000c09c         test       ecx, ecx
000000000000c09e         je         loc_b8ec

000000000000c0a4         jmp        loc_bfb8

                     loc_c0a9:
000000000000c0a9         mov        esi, 0x200                                  ; argument "__size" for method j_calloc, CODE XREF=build_trtable+730
000000000000c0ae         mov        edi, 0x8                                    ; argument "__nmemb" for method j_calloc
000000000000c0b3         call       j_calloc                                    ; calloc
000000000000c0b8         mov        r11, rax
000000000000c0bb         mov        rax, qword [rsp+0x138+var_130]
000000000000c0c0         test       r11, r11
000000000000c0c3         mov        qword [rax+0x60], r11
000000000000c0c7         je         loc_bfbd

000000000000c0cd         mov        r13, qword [rsp+0x138+var_F8]
000000000000c0d2         mov        r10, qword [rsp+0x138+var_128]
000000000000c0d7         mov        r12, r11
000000000000c0da         mov        r14, qword [rsp+0x138+var_108]
000000000000c0df         mov        rdx, qword [rsp+0x138+var_118]
000000000000c0e4         xor        ebx, ebx
000000000000c0e6         add        r13, 0x20

                     loc_c0ea:
000000000000c0ea         mov        rax, qword [rdx+rbx]                        ; CODE XREF=build_trtable+2718
000000000000c0ee         test       rax, rax
000000000000c0f1         je         loc_c10f

000000000000c0f3         mov        rsi, r12
000000000000c0f6         mov        ecx, 0x1

                     loc_c0fb:
000000000000c0fb         test       al, 0x1                                     ; CODE XREF=build_trtable+2701
000000000000c0fd         jne        loc_c1ac

                     loc_c103:
000000000000c103         add        rcx, rcx                                    ; CODE XREF=build_trtable+2923
000000000000c106         add        rsi, 0x8
000000000000c10a         shr        rax, 0x1
000000000000c10d         jne        loc_c0fb

                     loc_c10f:
000000000000c10f         add        rbx, 0x8                                    ; CODE XREF=build_trtable+2673
000000000000c113         add        r12, 0x200
000000000000c11a         cmp        rbx, 0x20
000000000000c11e         jne        loc_c0ea

000000000000c120         jmp        loc_b9de
000000000000c125         align      8

                     loc_c128:
000000000000c128         mov        rdi, qword [rsp+0x138+var_120]              ; CODE XREF=build_trtable+834
000000000000c12d         test       qword [rdi+r9+0x1800], rcx
000000000000c135         jne        loc_c1a7

000000000000c137         lea        rdi, qword [rbx+r9]
000000000000c13b         xor        r8d, r8d
000000000000c13e         nop

                     loc_c140:
000000000000c140         mov        r10, qword [rdi]                            ; CODE XREF=build_trtable+2769
000000000000c143         add        r8, 0x1
000000000000c147         add        rdi, 0x20
000000000000c14b         and        r10, rcx
000000000000c14e         test       r10, r10
000000000000c151         je         loc_c140

000000000000c153         shl        r8, 0x3

                     loc_c157:
000000000000c157         test       qword [r15+r9+0xb8], rcx                    ; CODE XREF=build_trtable+2858
000000000000c15f         je         loc_c16e

000000000000c161         mov        rdi, qword [r13+r8]
000000000000c166         mov        qword [rsi], rdi
000000000000c169         jmp        loc_b9c8

                     loc_c16e:
000000000000c16e         mov        rdi, qword [r12+r8]                         ; CODE XREF=build_trtable+2783
000000000000c172         mov        qword [rsi], rdi
000000000000c175         jmp        loc_b9c8

                     loc_c17a:
000000000000c17a         mov        rdi, qword [rsp+0x138+var_120]              ; argument "__ptr" for method j_free, CODE XREF=build_trtable+131
000000000000c17f         call       j_free                                      ; free

                     loc_c184:
000000000000c184         mov        esi, 0x100                                  ; argument "__size" for method j_calloc, CODE XREF=build_trtable+2956
000000000000c189         mov        edi, 0x8                                    ; argument "__nmemb" for method j_calloc
000000000000c18e         call       j_calloc                                    ; calloc
000000000000c193         mov        rbx, qword [rsp+0x138+var_130]
000000000000c198         test       rax, rax
000000000000c19b         mov        qword [rbx+0x58], rax
000000000000c19f         setne      al
000000000000c1a2         jmp        loc_ba92

                     loc_c1a7:
000000000000c1a7         xor        r8d, r8d                                    ; CODE XREF=build_trtable+2741
000000000000c1aa         jmp        loc_c157

                     loc_c1ac:
000000000000c1ac         mov        rdi, qword [rsp+0x138+var_120]              ; CODE XREF=build_trtable+2685
000000000000c1b1         test       qword [rdi+rbx+0x1800], rcx
000000000000c1b9         jne        loc_c1f0

000000000000c1bb         lea        r9, qword [r13+rbx]
000000000000c1c0         xor        r8d, r8d

                     loc_c1c3:
000000000000c1c3         mov        r15, qword [r9]                             ; CODE XREF=build_trtable+2903
000000000000c1c6         add        r8, 0x1
000000000000c1ca         add        r9, 0x20
000000000000c1ce         mov        rdi, r8
000000000000c1d1         and        r15, rcx
000000000000c1d4         test       r15, r15
000000000000c1d7         je         loc_c1c3

                     loc_c1d9:
000000000000c1d9         mov        r8, qword [r10+rdi*8]                       ; CODE XREF=build_trtable+2930
000000000000c1dd         mov        qword [rsi], r8
000000000000c1e0         mov        rdi, qword [r14+rdi*8]
000000000000c1e4         mov        qword [rsi+0x800], rdi
000000000000c1eb         jmp        loc_c103

                     loc_c1f0:
000000000000c1f0         xor        edi, edi                                    ; CODE XREF=build_trtable+2873
000000000000c1f2         jmp        loc_c1d9

                     loc_c1f4:
000000000000c1f4         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=build_trtable+1059
                        ; endp

                     loc_c1f9:
000000000000c1f9         mov        rdi, qword [rsp+0x138+var_120]              ; argument "__ptr" for method j_free, CODE XREF=build_trtable+285
000000000000c1fe         call       j_free                                      ; free
000000000000c203         test       rbp, rbp
000000000000c206         jne        loc_ba90

000000000000c20c         jmp        loc_c184
000000000000c211         align      32                                          ; End of unwind block (FDE at 0x192ac)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     calc_first:
000000000000c220         cmp        byte [rsi+0x30], 0x10                       ; Begin of unwind block (FDE at 0x192fc), DATA XREF=re_compile_internal+1662
000000000000c224         je         loc_c288

000000000000c226         push       rbp
000000000000c227         push       rbx
000000000000c228         mov        rbx, rsi
000000000000c22b         mov        rbp, rdi
000000000000c22e         sub        rsp, 0x8
000000000000c232         mov        qword [rbx+0x18], rsi
000000000000c236         mov        rdx, qword [rbx+0x30]
000000000000c23a         mov        rsi, qword [rsi+0x28]
000000000000c23e         call       re_dfa_add_node                             ; re_dfa_add_node
000000000000c243         cmp        rax, 0xffffffffffffffff
000000000000c247         mov        rdx, rax
000000000000c24a         mov        qword [rbx+0x38], rax
000000000000c24e         je         loc_c2a0

000000000000c250         xor        eax, eax
000000000000c252         cmp        byte [rbx+0x30], 0xc
000000000000c256         jne        loc_c27c

000000000000c258         mov        ecx, dword [rbx+0x28]
000000000000c25b         shl        rdx, 0x4
000000000000c25f         add        rdx, qword [rbp]
000000000000c263         and        ecx, 0x3ff
000000000000c269         shl        ecx, 0x8
000000000000c26c         mov        esi, ecx
000000000000c26e         mov        ecx, dword [rdx+8]
000000000000c271         and        ecx, 0xfffc00ff
000000000000c277         or         ecx, esi
000000000000c279         mov        dword [rdx+8], ecx

                     loc_c27c:
000000000000c27c         add        rsp, 0x8                                    ; CODE XREF=calc_first+54, calc_first+133
000000000000c280         pop        rbx
000000000000c281         pop        rbp
000000000000c282         ret
                        ; endp
000000000000c283         align      8

                     loc_c288:
000000000000c288         mov        rax, qword [rsi+8]                          ; CODE XREF=calc_first+4
000000000000c28c         mov        rdx, qword [rax+0x18]
000000000000c290         mov        rax, qword [rax+0x38]
000000000000c294         mov        qword [rsi+0x18], rdx
000000000000c298         mov        qword [rsi+0x38], rax
000000000000c29c         xor        eax, eax
000000000000c29e         ret
                        ; endp
000000000000c29f         align      32

                     loc_c2a0:
000000000000c2a0         mov        eax, 0xc                                    ; CODE XREF=calc_first+46
000000000000c2a5         jmp        loc_c27c
000000000000c2a7         align      16                                          ; End of unwind block (FDE at 0x192fc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     free_fail_stack_return.part.24:
000000000000c2b0         push       r12                                         ; Begin of unwind block (FDE at 0x19330), CODE XREF=set_regs+1279, set_regs+1383, set_regs+1810, set_regs+2005
000000000000c2b2         push       rbp
000000000000c2b3         mov        rbp, rdi
000000000000c2b6         push       rbx
000000000000c2b7         cmp        qword [rdi], 0x0
000000000000c2bb         jle        loc_c2f2

000000000000c2bd         xor        ebx, ebx
000000000000c2bf         xor        r12d, r12d
000000000000c2c2         nop        word [rax+rax]

                     loc_c2c8:
000000000000c2c8         mov        rax, qword [rbp+0x10]                       ; CODE XREF=free_fail_stack_return.part.24+64
000000000000c2cc         add        r12, 0x1
000000000000c2d0         mov        rdi, qword [rax+rbx+0x28]                   ; argument "__ptr" for method j_free
000000000000c2d5         call       j_free                                      ; free
000000000000c2da         mov        rax, qword [rbp+0x10]
000000000000c2de         mov        rdi, qword [rax+rbx+0x10]                   ; argument "__ptr" for method j_free
000000000000c2e3         add        rbx, 0x30
000000000000c2e7         call       j_free                                      ; free
000000000000c2ec         cmp        r12, qword [rbp]
000000000000c2f0         jl         loc_c2c8

                     loc_c2f2:
000000000000c2f2         pop        rbx                                         ; CODE XREF=free_fail_stack_return.part.24+11
000000000000c2f3         mov        rdi, qword [rbp+0x10]                       ; argument "__ptr" for method j_free
000000000000c2f7         pop        rbp
000000000000c2f8         pop        r12
000000000000c2fa         jmp        j_free                                      ; free
                        ; endp
000000000000c2ff         align      256                                         ; End of unwind block (FDE at 0x19330)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     pop_fail_stack.isra.25:
000000000000c300         push       r12                                         ; Begin of unwind block (FDE at 0x1935c), CODE XREF=set_regs+1459, set_regs+1542
000000000000c302         push       rbp
000000000000c303         push       rbx
000000000000c304         mov        rax, qword [rdi]
000000000000c307         sub        rax, 0x1
000000000000c30b         test       rax, rax
000000000000c30e         mov        qword [rdi], rax
000000000000c311         js         loc_c375

000000000000c313         lea        rbx, qword [rax+rax*2]
000000000000c317         mov        rax, qword [rsi]
000000000000c31a         mov        r12, rsi
000000000000c31d         shl        rcx, 0x4
000000000000c321         mov        rbp, r9
000000000000c324         mov        rdi, r8                                     ; argument "__dest" for method j_memcpy
000000000000c327         shl        rbx, 0x4
000000000000c32b         add        rax, rbx
000000000000c32e         mov        rsi, qword [rax]
000000000000c331         mov        qword [rdx], rsi
000000000000c334         mov        rsi, qword [rax+0x10]                       ; argument "__src" for method j_memcpy
000000000000c338         mov        rdx, rcx                                    ; argument "__n" for method j_memcpy
000000000000c33b         call       j_memcpy                                    ; memcpy
000000000000c340         mov        rdi, qword [rbp+0x10]                       ; argument "__ptr" for method j_free
000000000000c344         call       j_free                                      ; free
000000000000c349         mov        rax, qword [r12]
000000000000c34d         mov        rdi, qword [rax+rbx+0x10]                   ; argument "__ptr" for method j_free
000000000000c352         call       j_free                                      ; free
000000000000c357         add        rbx, qword [r12]
000000000000c35b         movdqu     xmm0, xmmword [rbx+0x18]
000000000000c360         movaps     xmmword [rbp], xmm0
000000000000c364         mov        rax, qword [rbx+0x28]
000000000000c368         mov        qword [rbp+0x10], rax
000000000000c36c         mov        rax, qword [rbx+8]
000000000000c370         pop        rbx
000000000000c371         pop        rbp
000000000000c372         pop        r12
000000000000c374         ret
                        ; endp

                     loc_c375:
000000000000c375         lea        rcx, qword [__PRETTY_FUNCTION__.8040]       ; argument "__function" for method j___assert_fail, "pop_fail_stack", CODE XREF=pop_fail_stack.isra.25+17
000000000000c37c         lea        rsi, qword [aCoreutils831li_16a80]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/regexec.c"
000000000000c383         lea        rdi, qword [aNum0]                          ; argument "__assertion" for method j___assert_fail, "num >= 0"
000000000000c38a         mov        edx, 0x555                                  ; argument "__line" for method j___assert_fail
000000000000c38f         call       j___assert_fail                             ; __assert_fail
                        ; endp
000000000000c394         align      32                                          ; End of unwind block (FDE at 0x1935c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     build_collating_symbol.isra.28:
000000000000c3a0         push       rbp                                         ; Begin of unwind block (FDE at 0x1938c), CODE XREF=sub_127b0+1072, sub_127b0+1128
000000000000c3a1         push       rbx
000000000000c3a2         mov        rbp, rdi
000000000000c3a5         mov        rdi, rsi                                    ; argument "__s" for method j_strlen
000000000000c3a8         mov        rbx, rsi
000000000000c3ab         sub        rsp, 0x8
000000000000c3af         call       j_strlen                                    ; strlen
000000000000c3b4         cmp        rax, 0x1
000000000000c3b8         jne        loc_c3e0

000000000000c3ba         movzx      ecx, byte [rbx]
000000000000c3bd         mov        rdx, rcx
000000000000c3c0         and        ecx, 0x3f
000000000000c3c3         shr        rdx, 0x3
000000000000c3c7         shl        rax, cl
000000000000c3ca         and        edx, 0x18
000000000000c3cd         or         qword [rbp+rdx], rax
000000000000c3d2         add        rsp, 0x8
000000000000c3d6         xor        eax, eax
000000000000c3d8         pop        rbx
000000000000c3d9         pop        rbp
000000000000c3da         ret
                        ; endp
000000000000c3db         align      32

                     loc_c3e0:
000000000000c3e0         add        rsp, 0x8                                    ; CODE XREF=build_collating_symbol.isra.28+24
000000000000c3e4         mov        eax, 0x3
000000000000c3e9         pop        rbx
000000000000c3ea         pop        rbp
000000000000c3eb         ret
                        ; endp
000000000000c3ec         align      16                                          ; End of unwind block (FDE at 0x1938c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_30: int64_t, -48
        ;    var_38: int64_t, -56


                     build_charclass.isra.29:
000000000000c3f0         push       r14                                         ; Begin of unwind block (FDE at 0x193c0), CODE XREF=build_charclass_op+163, sub_127b0+1309
000000000000c3f2         push       r13
000000000000c3f4         mov        r13, rcx
000000000000c3f7         push       r12
000000000000c3f9         push       rbp
000000000000c3fa         mov        r12, r9
000000000000c3fd         push       rbx
000000000000c3fe         mov        rbp, rdi
000000000000c401         mov        rbx, rsi
000000000000c404         sub        rsp, 0x10
000000000000c408         test       qword [rsp+0x38+arg_0], 0x400000
000000000000c411         je         loc_c438

000000000000c413         lea        rdi, qword [aUpper]                         ; "upper"
000000000000c41a         mov        ecx, 0x6
000000000000c41f         mov        rsi, r9
000000000000c422         rep  cmpsb byte [rsi], byte [rdi]
000000000000c424         seta       al
000000000000c427         sbb        al, 0x0
000000000000c429         test       al, al
000000000000c42b         jne        loc_c526

000000000000c431         lea        r12, qword [aAlpha]                         ; "alpha"

                     loc_c438:
000000000000c438         mov        rcx, qword [r13]                            ; CODE XREF=build_charclass.isra.29+33
000000000000c43c         cmp        qword [r8], rcx
000000000000c43f         mov        rax, qword [rdx]
000000000000c442         je         loc_c559

                     loc_c448:
000000000000c448         lea        rdx, qword [rcx+1]                          ; CODE XREF=build_charclass.isra.29+355, build_charclass.isra.29+419
000000000000c44c         mov        rdi, r12                                    ; argument "__property" for method j_wctype
000000000000c44f         mov        qword [r13], rdx
000000000000c453         lea        r13, qword [rax+rcx*8]
000000000000c457         call       j_wctype                                    ; wctype
000000000000c45c         lea        rdi, qword [aAlnum]                         ; "alnum"
000000000000c463         mov        qword [r13], rax
000000000000c467         mov        ecx, 0x6
000000000000c46c         mov        rsi, r12
000000000000c46f         rep  cmpsb byte [rsi], byte [rdi]
000000000000c471         seta       al
000000000000c474         sbb        al, 0x0
000000000000c476         test       al, al
000000000000c478         je         loc_c4e8

000000000000c47a         lea        rdi, qword [aCntrl]                         ; "cntrl"
000000000000c481         mov        ecx, 0x6
000000000000c486         mov        rsi, r12
000000000000c489         rep  cmpsb byte [rsi], byte [rdi]
000000000000c48b         seta       al
000000000000c48e         sbb        al, 0x0
000000000000c490         test       al, al
000000000000c492         jne        loc_c598

000000000000c498         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000c49d         xor        ecx, ecx
000000000000c49f         test       rbp, rbp
000000000000c4a2         mov        rdx, qword [rax]
000000000000c4a5         mov        edi, 0x1
000000000000c4aa         jne        loc_c76a

                     loc_c4b0:
000000000000c4b0         test       byte [rdx+rcx*2], 0x2                       ; CODE XREF=build_charclass.isra.29+226
000000000000c4b4         je         loc_c4c7

000000000000c4b6         mov        rax, rcx
000000000000c4b9         mov        rsi, rdi
000000000000c4bc         sar        rax, 0x6
000000000000c4c0         shl        rsi, cl
000000000000c4c3         or         qword [rbx+rax*8], rsi

                     loc_c4c7:
000000000000c4c7         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+196
000000000000c4cb         cmp        rcx, 0x100
000000000000c4d2         jne        loc_c4b0

                     loc_c4d4:
000000000000c4d4         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+308, build_charclass.isra.29+549, build_charclass.isra.29+621, build_charclass.isra.29+757, build_charclass.isra.29+814, build_charclass.isra.29+885, build_charclass.isra.29+942, build_charclass.isra.29+1037, build_charclass.isra.29+1095, build_charclass.isra.29+1187, build_charclass.isra.29+1292

                     loc_c4d6:
000000000000c4d6         add        rsp, 0x10                                   ; CODE XREF=build_charclass.isra.29+1197, build_charclass.isra.29+1893
000000000000c4da         pop        rbx
000000000000c4db         pop        rbp
000000000000c4dc         pop        r12
000000000000c4de         pop        r13
000000000000c4e0         pop        r14
000000000000c4e2         ret
                        ; endp
000000000000c4e3         align      8

                     loc_c4e8:
000000000000c4e8         call       j___ctype_b_loc                             ; __ctype_b_loc, CODE XREF=build_charclass.isra.29+136
000000000000c4ed         xor        ecx, ecx
000000000000c4ef         test       rbp, rbp
000000000000c4f2         mov        rdx, qword [rax]
000000000000c4f5         mov        edi, 0x1
000000000000c4fa         jne        loc_c6ea

                     loc_c500:
000000000000c500         test       byte [rdx+rcx*2], 0x8                       ; CODE XREF=build_charclass.isra.29+306
000000000000c504         je         loc_c517

000000000000c506         mov        rax, rcx
000000000000c509         mov        rsi, rdi
000000000000c50c         sar        rax, 0x6
000000000000c510         shl        rsi, cl
000000000000c513         or         qword [rbx+rax*8], rsi

                     loc_c517:
000000000000c517         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+276
000000000000c51b         cmp        rcx, 0x100
000000000000c522         jne        loc_c500

000000000000c524         jmp        loc_c4d4

                     loc_c526:
000000000000c526         lea        rdi, qword [aLower]                         ; "lower", CODE XREF=build_charclass.isra.29+59
000000000000c52d         mov        ecx, 0x6
000000000000c532         mov        rsi, r9
000000000000c535         rep  cmpsb byte [rsi], byte [rdi]
000000000000c537         mov        rcx, qword [r13]
000000000000c53b         seta       al
000000000000c53e         sbb        al, 0x0
000000000000c540         test       al, al
000000000000c542         lea        rax, qword [aAlpha]                         ; "alpha"
000000000000c549         cmove      r12, rax
000000000000c54d         cmp        qword [r8], rcx
000000000000c550         mov        rax, qword [rdx]
000000000000c553         jne        loc_c448

                     loc_c559:
000000000000c559         lea        r14, qword [rcx+rcx+1]                      ; CODE XREF=build_charclass.isra.29+82
000000000000c55e         mov        rdi, rax                                    ; argument "__ptr" for method j_realloc
000000000000c561         mov        qword [rsp+0x38+var_30], r8
000000000000c566         mov        qword [rsp+0x38+var_38], rdx
000000000000c56a         lea        rsi, qword [r14*8]                          ; argument "__size" for method j_realloc
000000000000c572         call       j_realloc                                   ; realloc
000000000000c577         test       rax, rax
000000000000c57a         je         loc_c898

000000000000c580         mov        rdx, qword [rsp+0x38+var_38]
000000000000c584         mov        r8, qword [rsp+0x38+var_30]
000000000000c589         mov        qword [rdx], rax
000000000000c58c         mov        qword [r8], r14
000000000000c58f         mov        rcx, qword [r13]
000000000000c593         jmp        loc_c448

                     loc_c598:
000000000000c598         lea        rdi, qword [aLower]                         ; "lower", CODE XREF=build_charclass.isra.29+162
000000000000c59f         mov        ecx, 0x6
000000000000c5a4         mov        rsi, r12
000000000000c5a7         rep  cmpsb byte [rsi], byte [rdi]
000000000000c5a9         seta       al
000000000000c5ac         sbb        al, 0x0
000000000000c5ae         test       al, al
000000000000c5b0         je         loc_c61a

000000000000c5b2         lea        rdi, qword [aSpace]                         ; "space"
000000000000c5b9         mov        ecx, 0x6
000000000000c5be         mov        rsi, r12
000000000000c5c1         rep  cmpsb byte [rsi], byte [rdi]
000000000000c5c3         seta       al
000000000000c5c6         sbb        al, 0x0
000000000000c5c8         test       al, al
000000000000c5ca         jne        loc_c662

000000000000c5d0         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000c5d5         xor        ecx, ecx
000000000000c5d7         test       rbp, rbp
000000000000c5da         mov        rdx, qword [rax]
000000000000c5dd         mov        edi, 0x1
000000000000c5e2         jne        loc_c93e

000000000000c5e8         nop        dword [rax+rax]

                     loc_c5f0:
000000000000c5f0         test       byte [rdx+rcx*2+1], 0x20                    ; CODE XREF=build_charclass.isra.29+547
000000000000c5f5         je         loc_c608

000000000000c5f7         mov        rax, rcx
000000000000c5fa         mov        rsi, rdi
000000000000c5fd         sar        rax, 0x6
000000000000c601         shl        rsi, cl
000000000000c604         or         qword [rbx+rax*8], rsi

                     loc_c608:
000000000000c608         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+517
000000000000c60c         cmp        rcx, 0x100
000000000000c613         jne        loc_c5f0

000000000000c615         jmp        loc_c4d4

                     loc_c61a:
000000000000c61a         call       j___ctype_b_loc                             ; __ctype_b_loc, CODE XREF=build_charclass.isra.29+448
000000000000c61f         xor        ecx, ecx
000000000000c621         test       rbp, rbp
000000000000c624         mov        rdx, qword [rax]
000000000000c627         mov        edi, 0x1
000000000000c62c         jne        loc_c802

000000000000c632         nop        word [rax+rax]

                     loc_c638:
000000000000c638         test       byte [rdx+rcx*2+1], 0x2                     ; CODE XREF=build_charclass.isra.29+619
000000000000c63d         je         loc_c650

000000000000c63f         mov        rax, rcx
000000000000c642         mov        rsi, rdi
000000000000c645         sar        rax, 0x6
000000000000c649         shl        rsi, cl
000000000000c64c         or         qword [rbx+rax*8], rsi

                     loc_c650:
000000000000c650         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+589
000000000000c654         cmp        rcx, 0x100
000000000000c65b         jne        loc_c638

000000000000c65d         jmp        loc_c4d4

                     loc_c662:
000000000000c662         lea        rdi, qword [aAlpha]                         ; "alpha", CODE XREF=build_charclass.isra.29+474
000000000000c669         mov        ecx, 0x6
000000000000c66e         mov        rsi, r12
000000000000c671         rep  cmpsb byte [rsi], byte [rdi]
000000000000c673         seta       al
000000000000c676         sbb        al, 0x0
000000000000c678         test       al, al
000000000000c67a         je         loc_c723

000000000000c680         lea        rdi, qword [aDigit]                         ; "digit"
000000000000c687         mov        ecx, 0x6
000000000000c68c         mov        rsi, r12
000000000000c68f         rep  cmpsb byte [rsi], byte [rdi]
000000000000c691         seta       al
000000000000c694         sbb        al, 0x0
000000000000c696         test       al, al
000000000000c698         jne        loc_c7a3

000000000000c69e         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000c6a3         xor        ecx, ecx
000000000000c6a5         test       rbp, rbp
000000000000c6a8         mov        rdx, qword [rax]
000000000000c6ab         mov        edi, 0x1
000000000000c6b0         jne        loc_cb5a

000000000000c6b6         nop        word [cs:rax+rax]

                     loc_c6c0:
000000000000c6c0         test       byte [rdx+rcx*2+1], 0x8                     ; CODE XREF=build_charclass.isra.29+755
000000000000c6c5         je         loc_c6d8

000000000000c6c7         mov        rax, rcx
000000000000c6ca         mov        rsi, rdi
000000000000c6cd         sar        rax, 0x6
000000000000c6d1         shl        rsi, cl
000000000000c6d4         or         qword [rbx+rax*8], rsi

                     loc_c6d8:
000000000000c6d8         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+725
000000000000c6dc         cmp        rcx, 0x100
000000000000c6e3         jne        loc_c6c0

000000000000c6e5         jmp        loc_c4d4

                     loc_c6ea:
000000000000c6ea         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+266
000000000000c6ec         nop        dword [rax]

                     loc_c6f0:
000000000000c6f0         test       byte [rdx+rax*2], 0x8                       ; CODE XREF=build_charclass.isra.29+812
000000000000c6f4         je         loc_c712

000000000000c6f6         movzx      ecx, byte [rbp+rax]
000000000000c6fb         mov        r10, rdi
000000000000c6fe         mov        rsi, rcx
000000000000c701         and        ecx, 0x3f
000000000000c704         shr        rsi, 0x3
000000000000c708         shl        r10, cl
000000000000c70b         and        esi, 0x18
000000000000c70e         or         qword [rbx+rsi], r10

                     loc_c712:
000000000000c712         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+772
000000000000c716         cmp        rax, 0x100
000000000000c71c         jne        loc_c6f0

000000000000c71e         jmp        loc_c4d4

                     loc_c723:
000000000000c723         call       j___ctype_b_loc                             ; __ctype_b_loc, CODE XREF=build_charclass.isra.29+650
000000000000c728         xor        ecx, ecx
000000000000c72a         test       rbp, rbp
000000000000c72d         mov        rdx, qword [rax]
000000000000c730         mov        edi, 0x1
000000000000c735         jne        loc_c908

000000000000c73b         nop        dword [rax+rax]

                     loc_c740:
000000000000c740         test       byte [rdx+rcx*2+1], 0x4                     ; CODE XREF=build_charclass.isra.29+883
000000000000c745         je         loc_c758

000000000000c747         mov        rax, rcx
000000000000c74a         mov        rsi, rdi
000000000000c74d         sar        rax, 0x6
000000000000c751         shl        rsi, cl
000000000000c754         or         qword [rbx+rax*8], rsi

                     loc_c758:
000000000000c758         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+853
000000000000c75c         cmp        rcx, 0x100
000000000000c763         jne        loc_c740

000000000000c765         jmp        loc_c4d4

                     loc_c76a:
000000000000c76a         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+186
000000000000c76c         nop        dword [rax]

                     loc_c770:
000000000000c770         test       byte [rdx+rax*2], 0x2                       ; CODE XREF=build_charclass.isra.29+940
000000000000c774         je         loc_c792

000000000000c776         movzx      ecx, byte [rbp+rax]
000000000000c77b         mov        r11, rdi
000000000000c77e         mov        rsi, rcx
000000000000c781         and        ecx, 0x3f
000000000000c784         shr        rsi, 0x3
000000000000c788         shl        r11, cl
000000000000c78b         and        esi, 0x18
000000000000c78e         or         qword [rbx+rsi], r11

                     loc_c792:
000000000000c792         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+900
000000000000c796         cmp        rax, 0x100
000000000000c79c         jne        loc_c770

000000000000c79e         jmp        loc_c4d4

                     loc_c7a3:
000000000000c7a3         lea        rdi, qword [aPrint]                         ; "print", CODE XREF=build_charclass.isra.29+680
000000000000c7aa         mov        ecx, 0x6
000000000000c7af         mov        rsi, r12
000000000000c7b2         rep  cmpsb byte [rsi], byte [rdi]
000000000000c7b4         seta       al
000000000000c7b7         sbb        al, 0x0
000000000000c7b9         test       al, al
000000000000c7bb         jne        loc_c83c

000000000000c7bd         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000c7c2         xor        ecx, ecx
000000000000c7c4         test       rbp, rbp
000000000000c7c7         mov        rdx, qword [rax]
000000000000c7ca         mov        edi, 0x1
000000000000c7cf         jne        loc_cbc7

000000000000c7d5         nop        dword [rax]

                     loc_c7d8:
000000000000c7d8         test       byte [rdx+rcx*2+1], 0x40                    ; CODE XREF=build_charclass.isra.29+1035
000000000000c7dd         je         loc_c7f0

000000000000c7df         mov        rax, rcx
000000000000c7e2         mov        rsi, rdi
000000000000c7e5         sar        rax, 0x6
000000000000c7e9         shl        rsi, cl
000000000000c7ec         or         qword [rbx+rax*8], rsi

                     loc_c7f0:
000000000000c7f0         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+1005
000000000000c7f4         cmp        rcx, 0x100
000000000000c7fb         jne        loc_c7d8

000000000000c7fd         jmp        loc_c4d4

                     loc_c802:
000000000000c802         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+572
000000000000c804         nop        dword [rax]

                     loc_c808:
000000000000c808         test       byte [rdx+rax*2+1], 0x2                     ; CODE XREF=build_charclass.isra.29+1093
000000000000c80d         je         loc_c82b

000000000000c80f         movzx      ecx, byte [rbp+rax]
000000000000c814         mov        r14, rdi
000000000000c817         mov        rsi, rcx
000000000000c81a         and        ecx, 0x3f
000000000000c81d         shr        rsi, 0x3
000000000000c821         shl        r14, cl
000000000000c824         and        esi, 0x18
000000000000c827         or         qword [rbx+rsi], r14

                     loc_c82b:
000000000000c82b         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+1053
000000000000c82f         cmp        rax, 0x100
000000000000c835         jne        loc_c808

000000000000c837         jmp        loc_c4d4

                     loc_c83c:
000000000000c83c         lea        rdi, qword [aUpper]                         ; "upper", CODE XREF=build_charclass.isra.29+971
000000000000c843         mov        ecx, 0x6
000000000000c848         mov        rsi, r12
000000000000c84b         rep  cmpsb byte [rsi], byte [rdi]
000000000000c84d         seta       al
000000000000c850         sbb        al, 0x0
000000000000c852         test       al, al
000000000000c854         jne        loc_c8a2

000000000000c856         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000c85b         xor        ecx, ecx
000000000000c85d         test       rbp, rbp
000000000000c860         mov        rax, qword [rax]
000000000000c863         mov        edi, 0x1
000000000000c868         jne        loc_cb90

                     loc_c86e:
000000000000c86e         test       byte [rax+rcx*2+1], 0x1                     ; CODE XREF=build_charclass.isra.29+1185
000000000000c873         je         loc_c886

000000000000c875         mov        rdx, rcx
000000000000c878         mov        rsi, rdi
000000000000c87b         sar        rdx, 0x6
000000000000c87f         shl        rsi, cl
000000000000c882         or         qword [rbx+rdx*8], rsi

                     loc_c886:
000000000000c886         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+1155
000000000000c88a         cmp        rcx, 0x100
000000000000c891         jne        loc_c86e

000000000000c893         jmp        loc_c4d4

                     loc_c898:
000000000000c898         mov        eax, 0xc                                    ; CODE XREF=build_charclass.isra.29+394
000000000000c89d         jmp        loc_c4d6

                     loc_c8a2:
000000000000c8a2         lea        rdi, qword [aBlank]                         ; "blank", CODE XREF=build_charclass.isra.29+1124
000000000000c8a9         mov        ecx, 0x6
000000000000c8ae         mov        rsi, r12
000000000000c8b1         rep  cmpsb byte [rsi], byte [rdi]
000000000000c8b3         seta       al
000000000000c8b6         sbb        al, 0x0
000000000000c8b8         test       al, al
000000000000c8ba         jne        loc_c9ae

000000000000c8c0         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000c8c5         xor        ecx, ecx
000000000000c8c7         test       rbp, rbp
000000000000c8ca         mov        rdx, qword [rax]
000000000000c8cd         mov        esi, 0x1
000000000000c8d2         jne        loc_c974

                     loc_c8d8:
000000000000c8d8         test       byte [rdx+rcx*2], 0x1                       ; CODE XREF=build_charclass.isra.29+1290
000000000000c8dc         je         loc_c8ef

000000000000c8de         mov        rax, rcx
000000000000c8e1         mov        rdi, rsi
000000000000c8e4         sar        rax, 0x6
000000000000c8e8         shl        rdi, cl
000000000000c8eb         or         qword [rbx+rax*8], rdi

                     loc_c8ef:
000000000000c8ef         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+1260
000000000000c8f3         cmp        rcx, 0x100
000000000000c8fa         jne        loc_c8d8

000000000000c8fc         jmp        loc_c4d4
000000000000c901         align      8

                     loc_c908:
000000000000c908         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+837

                     loc_c90a:
000000000000c90a         test       byte [rdx+rax*2+1], 0x4                     ; CODE XREF=build_charclass.isra.29+1351
000000000000c90f         je         loc_c92d

000000000000c911         movzx      ecx, byte [rbp+rax]
000000000000c916         mov        r9, rdi
000000000000c919         mov        rsi, rcx
000000000000c91c         and        ecx, 0x3f
000000000000c91f         shr        rsi, 0x3
000000000000c923         shl        r9, cl
000000000000c926         and        esi, 0x18
000000000000c929         or         qword [rbx+rsi], r9

                     loc_c92d:
000000000000c92d         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+1311
000000000000c931         cmp        rax, 0x100
000000000000c937         jne        loc_c90a

000000000000c939         jmp        loc_c4d4

                     loc_c93e:
000000000000c93e         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+498

                     loc_c940:
000000000000c940         test       byte [rdx+rax*2+1], 0x20                    ; CODE XREF=build_charclass.isra.29+1405
000000000000c945         je         loc_c963

000000000000c947         movzx      ecx, byte [rbp+rax]
000000000000c94c         mov        r9, rdi
000000000000c94f         mov        rsi, rcx
000000000000c952         and        ecx, 0x3f
000000000000c955         shr        rsi, 0x3
000000000000c959         shl        r9, cl
000000000000c95c         and        esi, 0x18
000000000000c95f         or         qword [rbx+rsi], r9

                     loc_c963:
000000000000c963         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+1365
000000000000c967         cmp        rax, 0x100
000000000000c96d         jne        loc_c940

000000000000c96f         jmp        loc_c4d4

                     loc_c974:
000000000000c974         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+1250
000000000000c976         mov        edi, 0x1

                     loc_c97b:
000000000000c97b         test       byte [rdx+rax*2], 0x1                       ; CODE XREF=build_charclass.isra.29+1463
000000000000c97f         je         loc_c99d

000000000000c981         movzx      ecx, byte [rbp+rax]
000000000000c986         mov        r14, rdi
000000000000c989         mov        rsi, rcx
000000000000c98c         and        ecx, 0x3f
000000000000c98f         shr        rsi, 0x3
000000000000c993         shl        r14, cl
000000000000c996         and        esi, 0x18
000000000000c999         or         qword [rbx+rsi], r14

                     loc_c99d:
000000000000c99d         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+1423
000000000000c9a1         cmp        rax, 0x100
000000000000c9a7         jne        loc_c97b

000000000000c9a9         jmp        loc_c4d4

                     loc_c9ae:
000000000000c9ae         lea        rsi, qword [aGraph]                         ; argument "__s2" for method j_strcmp, "graph", CODE XREF=build_charclass.isra.29+1226
000000000000c9b5         mov        rdi, r12                                    ; argument "__s1" for method j_strcmp
000000000000c9b8         call       j_strcmp                                    ; strcmp
000000000000c9bd         test       eax, eax
000000000000c9bf         jne        loc_ca3a

000000000000c9c1         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000c9c6         xor        ecx, ecx
000000000000c9c8         test       rbp, rbp
000000000000c9cb         mov        rsi, qword [rax]
000000000000c9ce         mov        edx, 0x1
000000000000c9d3         jne        loc_c9ff

                     loc_c9d5:
000000000000c9d5         cmp        word [rsi+rcx*2], 0x0                       ; CODE XREF=build_charclass.isra.29+1544
000000000000c9da         jns        loc_c9ed

000000000000c9dc         mov        rax, rcx
000000000000c9df         mov        rdi, rdx
000000000000c9e2         sar        rax, 0x6
000000000000c9e6         shl        rdi, cl
000000000000c9e9         or         qword [rbx+rax*8], rdi

                     loc_c9ed:
000000000000c9ed         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+1514
000000000000c9f1         cmp        rcx, 0x100
000000000000c9f8         jne        loc_c9d5

000000000000c9fa         jmp        loc_c4d4

                     loc_c9ff:
000000000000c9ff         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+1507
000000000000ca01         mov        edi, 0x1

                     loc_ca06:
000000000000ca06         cmp        word [rsi+rax*2], 0x0                       ; CODE XREF=build_charclass.isra.29+1603
000000000000ca0b         jns        loc_ca29

000000000000ca0d         movzx      ecx, byte [rbp+rax]
000000000000ca12         mov        r9, rdi
000000000000ca15         mov        rdx, rcx
000000000000ca18         and        ecx, 0x3f
000000000000ca1b         shr        rdx, 0x3
000000000000ca1f         shl        r9, cl
000000000000ca22         and        edx, 0x18
000000000000ca25         or         qword [rbx+rdx], r9

                     loc_ca29:
000000000000ca29         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+1563
000000000000ca2d         cmp        rax, 0x100
000000000000ca33         jne        loc_ca06

000000000000ca35         jmp        loc_c4d4

                     loc_ca3a:
000000000000ca3a         lea        rsi, qword [aPunct]                         ; argument "__s2" for method j_strcmp, "punct", CODE XREF=build_charclass.isra.29+1487
000000000000ca41         mov        rdi, r12                                    ; argument "__s1" for method j_strcmp
000000000000ca44         call       j_strcmp                                    ; strcmp
000000000000ca49         test       eax, eax
000000000000ca4b         jne        loc_cac4

000000000000ca4d         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000ca52         xor        ecx, ecx
000000000000ca54         test       rbp, rbp
000000000000ca57         mov        rsi, qword [rax]
000000000000ca5a         mov        edx, 0x1
000000000000ca5f         jne        loc_ca8a

                     loc_ca61:
000000000000ca61         test       byte [rsi+rcx*2], 0x4                       ; CODE XREF=build_charclass.isra.29+1683
000000000000ca65         je         loc_ca78

000000000000ca67         mov        rax, rcx
000000000000ca6a         mov        rdi, rdx
000000000000ca6d         sar        rax, 0x6
000000000000ca71         shl        rdi, cl
000000000000ca74         or         qword [rbx+rax*8], rdi

                     loc_ca78:
000000000000ca78         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+1653
000000000000ca7c         cmp        rcx, 0x100
000000000000ca83         jne        loc_ca61

000000000000ca85         jmp        loc_c4d4

                     loc_ca8a:
000000000000ca8a         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+1647
000000000000ca8c         mov        edi, 0x1

                     loc_ca91:
000000000000ca91         test       byte [rsi+rax*2], 0x4                       ; CODE XREF=build_charclass.isra.29+1741
000000000000ca95         je         loc_cab3

000000000000ca97         movzx      ecx, byte [rbp+rax]
000000000000ca9c         mov        r14, rdi
000000000000ca9f         mov        rdx, rcx
000000000000caa2         and        ecx, 0x3f
000000000000caa5         shr        rdx, 0x3
000000000000caa9         shl        r14, cl
000000000000caac         and        edx, 0x18
000000000000caaf         or         qword [rbx+rdx], r14

                     loc_cab3:
000000000000cab3         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+1701
000000000000cab7         cmp        rax, 0x100
000000000000cabd         jne        loc_ca91

000000000000cabf         jmp        loc_c4d4

                     loc_cac4:
000000000000cac4         lea        rsi, qword [aPunct+6]                       ; argument "__s2" for method j_strcmp, 0x16b2d, CODE XREF=build_charclass.isra.29+1627
000000000000cacb         mov        rdi, r12                                    ; argument "__s1" for method j_strcmp
000000000000cace         call       j_strcmp                                    ; strcmp
000000000000cad3         test       eax, eax
000000000000cad5         jne        loc_cb50

000000000000cad7         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000cadc         xor        ecx, ecx
000000000000cade         test       rbp, rbp
000000000000cae1         mov        rsi, qword [rax]
000000000000cae4         mov        edx, 0x1
000000000000cae9         jne        loc_cb15

                     loc_caeb:
000000000000caeb         test       byte [rsi+rcx*2+1], 0x10                    ; CODE XREF=build_charclass.isra.29+1822
000000000000caf0         je         loc_cb03

000000000000caf2         mov        rax, rcx
000000000000caf5         mov        rdi, rdx
000000000000caf8         sar        rax, 0x6
000000000000cafc         shl        rdi, cl
000000000000caff         or         qword [rbx+rax*8], rdi

                     loc_cb03:
000000000000cb03         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+1792
000000000000cb07         cmp        rcx, 0x100
000000000000cb0e         jne        loc_caeb

000000000000cb10         jmp        loc_c4d4

                     loc_cb15:
000000000000cb15         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+1785
000000000000cb17         mov        edi, 0x1

                     loc_cb1c:
000000000000cb1c         test       byte [rsi+rax*2+1], 0x10                    ; CODE XREF=build_charclass.isra.29+1881
000000000000cb21         je         loc_cb3f

000000000000cb23         movzx      ecx, byte [rbp+rax]
000000000000cb28         mov        r9, rdi
000000000000cb2b         mov        rdx, rcx
000000000000cb2e         and        ecx, 0x3f
000000000000cb31         shr        rdx, 0x3
000000000000cb35         shl        r9, cl
000000000000cb38         and        edx, 0x18
000000000000cb3b         or         qword [rbx+rdx], r9

                     loc_cb3f:
000000000000cb3f         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+1841
000000000000cb43         cmp        rax, 0x100
000000000000cb49         jne        loc_cb1c

000000000000cb4b         jmp        loc_c4d4

                     loc_cb50:
000000000000cb50         mov        eax, 0x4                                    ; CODE XREF=build_charclass.isra.29+1765
000000000000cb55         jmp        loc_c4d6

                     loc_cb5a:
000000000000cb5a         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+704

                     loc_cb5c:
000000000000cb5c         test       byte [rdx+rax*2+1], 0x8                     ; CODE XREF=build_charclass.isra.29+1945
000000000000cb61         je         loc_cb7f

000000000000cb63         movzx      ecx, byte [rbp+rax]
000000000000cb68         mov        r14, rdi
000000000000cb6b         mov        rsi, rcx
000000000000cb6e         and        ecx, 0x3f
000000000000cb71         shr        rsi, 0x3
000000000000cb75         shl        r14, cl
000000000000cb78         and        esi, 0x18
000000000000cb7b         or         qword [rbx+rsi], r14

                     loc_cb7f:
000000000000cb7f         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+1905
000000000000cb83         cmp        rax, 0x100
000000000000cb89         jne        loc_cb5c

000000000000cb8b         jmp        loc_c4d4

                     loc_cb90:
000000000000cb90         xor        edx, edx                                    ; CODE XREF=build_charclass.isra.29+1144

                     loc_cb92:
000000000000cb92         test       byte [rax+rdx*2+1], 0x1                     ; CODE XREF=build_charclass.isra.29+2000
000000000000cb97         je         loc_cbb5

000000000000cb99         movzx      ecx, byte [rbp+rdx]
000000000000cb9e         mov        r9, rdi
000000000000cba1         mov        rsi, rcx
000000000000cba4         and        ecx, 0x3f
000000000000cba7         shr        rsi, 0x3
000000000000cbab         shl        r9, cl
000000000000cbae         and        esi, 0x18
000000000000cbb1         or         qword [rbx+rsi], r9

                     loc_cbb5:
000000000000cbb5         add        rdx, 0x1                                    ; CODE XREF=build_charclass.isra.29+1959
000000000000cbb9         cmp        rdx, 0x100
000000000000cbc0         jne        loc_cb92

000000000000cbc2         jmp        loc_c4d4

                     loc_cbc7:
000000000000cbc7         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+991

                     loc_cbc9:
000000000000cbc9         test       byte [rdx+rax*2+1], 0x40                    ; CODE XREF=build_charclass.isra.29+2054
000000000000cbce         je         loc_cbec

000000000000cbd0         movzx      ecx, byte [rbp+rax]
000000000000cbd5         mov        r14, rdi
000000000000cbd8         mov        rsi, rcx
000000000000cbdb         and        ecx, 0x3f
000000000000cbde         shr        rsi, 0x3
000000000000cbe2         shl        r14, cl
000000000000cbe5         and        esi, 0x18
000000000000cbe8         or         qword [rbx+rsi], r14

                     loc_cbec:
000000000000cbec         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+2014
000000000000cbf0         cmp        rax, 0x100
000000000000cbf6         jne        loc_cbc9

000000000000cbf8         jmp        loc_c4d4
000000000000cbfd         align      1024                                        ; End of unwind block (FDE at 0x193c0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_50: int8_t, -80
        ;    var_58: int8_t, -88
        ;    var_60: int8_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136


                     build_charclass_op:
000000000000cc00         push       r15                                         ; Begin of unwind block (FDE at 0x19404), CODE XREF=sub_127b0+402
000000000000cc02         push       r14
000000000000cc04         mov        r14, rdx
000000000000cc07         push       r13
000000000000cc09         push       r12
000000000000cc0b         mov        r13, rcx
000000000000cc0e         push       rbp
000000000000cc0f         push       rbx
000000000000cc10         mov        rbp, rdi
000000000000cc13         mov        edi, 0x20                                   ; argument "__nmemb" for method j_calloc
000000000000cc18         mov        r12d, r8d
000000000000cc1b         sub        rsp, 0x58
000000000000cc1f         mov        qword [rsp+0x88+var_88], rsi
000000000000cc23         mov        esi, 0x1                                    ; argument "__size" for method j_calloc
000000000000cc28         mov        qword [rsp+0x88+var_80], r9
000000000000cc2d         mov        rax, qword [fs:0x28]
000000000000cc36         mov        qword [rsp+0x88+var_40], rax
000000000000cc3b         xor        eax, eax
000000000000cc3d         mov        qword [rsp+0x88+var_70], 0x0
000000000000cc46         call       j_calloc                                    ; calloc
000000000000cc4b         test       rax, rax
000000000000cc4e         je         loc_ce10

000000000000cc54         mov        esi, 0x1                                    ; argument "__size" for method j_calloc
000000000000cc59         mov        edi, 0x50                                   ; argument "__nmemb" for method j_calloc
000000000000cc5e         mov        rbx, rax
000000000000cc61         call       j_calloc                                    ; calloc
000000000000cc66         test       rax, rax
000000000000cc69         mov        r15, rax
000000000000cc6c         je         loc_ce20

000000000000cc72         movzx      eax, byte [rax+0x20]
000000000000cc76         sub        rsp, 0x8
000000000000cc7a         mov        edx, r12d
000000000000cc7d         push       0x0
000000000000cc7f         and        edx, 0x1
000000000000cc82         mov        rdi, qword [rsp+0x98+var_88]
000000000000cc87         lea        rcx, qword [r15+0x48]
000000000000cc8b         mov        r9, r14
000000000000cc8e         mov        rsi, rbx
000000000000cc91         lea        r8, qword [rsp+0x98+var_70]
000000000000cc96         and        eax, 0xfffffffe
000000000000cc99         or         eax, edx
000000000000cc9b         lea        rdx, qword [r15+0x18]
000000000000cc9f         mov        byte [r15+0x20], al
000000000000cca3         call       build_charclass.isra.29                     ; build_charclass.isra.29
000000000000cca8         test       eax, eax
000000000000ccaa         pop        rdx
000000000000ccab         pop        rcx
000000000000ccac         jne        loc_ce40

000000000000ccb2         movsx      rcx, byte [r13]
000000000000ccb7         mov        esi, 0x1
000000000000ccbc         test       cl, cl
000000000000ccbe         je         loc_ccfa

                     loc_ccc0:
000000000000ccc0         lea        rax, qword [rcx+0x3f]                       ; CODE XREF=build_charclass_op+248
000000000000ccc4         test       rcx, rcx
000000000000ccc7         mov        rdx, rcx
000000000000ccca         cmovns     rax, rcx
000000000000ccce         sar        rdx, 0x3f
000000000000ccd2         add        r13, 0x1
000000000000ccd6         shr        rdx, 0x3a
000000000000ccda         sar        rax, 0x6
000000000000ccde         add        rcx, rdx
000000000000cce1         and        ecx, 0x3f
000000000000cce4         sub        rcx, rdx
000000000000cce7         mov        rdx, rsi
000000000000ccea         shl        rdx, cl
000000000000cced         movsx      rcx, byte [r13]
000000000000ccf2         or         qword [rbx+rax*8], rdx
000000000000ccf6         test       cl, cl
000000000000ccf8         jne        loc_ccc0

                     loc_ccfa:
000000000000ccfa         test       r12b, r12b                                  ; CODE XREF=build_charclass_op+190
000000000000ccfd         je         loc_cd12

000000000000ccff         lea        rdx, qword [rbx+0x20]
000000000000cd03         mov        rax, rbx

                     loc_cd06:
000000000000cd06         not        qword [rax]                                 ; CODE XREF=build_charclass_op+272
000000000000cd09         add        rax, 0x8
000000000000cd0d         cmp        rdx, rax
000000000000cd10         jne        loc_cd06

                     loc_cd12:
000000000000cd12         cmp        dword [rbp+0xb4], 0x1                       ; CODE XREF=build_charclass_op+253
000000000000cd19         jle        loc_cd33

000000000000cd1b         mov        rcx, qword [rbp+0x78]
000000000000cd1f         xor        eax, eax

                     loc_cd21:
000000000000cd21         mov        rdx, qword [rcx+rax]                        ; CODE XREF=build_charclass_op+305
000000000000cd25         and        qword [rbx+rax], rdx
000000000000cd29         add        rax, 0x8
000000000000cd2d         cmp        rax, 0x20
000000000000cd31         jne        loc_cd21

                     loc_cd33:
000000000000cd33         lea        r9, qword [rsp+0x88+var_68]                 ; CODE XREF=build_charclass_op+281
000000000000cd38         lea        r12, qword [rbp+0x70]
000000000000cd3c         lea        r13, qword [rbp+0x80]
000000000000cd43         xor        ecx, ecx
000000000000cd45         xor        edx, edx
000000000000cd47         mov        byte [rsp+0x88+var_60], 0x3
000000000000cd4c         mov        r8, r9
000000000000cd4f         mov        rsi, r13
000000000000cd52         mov        rdi, r12
000000000000cd55         mov        qword [rsp+0x88+var_68], rbx
000000000000cd5a         mov        qword [rsp+0x88+var_88], r9
000000000000cd5e         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000000cd63         test       rax, rax
000000000000cd66         mov        r14, rax
000000000000cd69         je         loc_ce00

000000000000cd6f         cmp        dword [rbp+0xb4], 0x1
000000000000cd76         jle        loc_cdf0

000000000000cd78         or         byte [rbp+0xb0], 0x2
000000000000cd7f         mov        r9, qword [rsp+0x88+var_88]
000000000000cd83         xor        ecx, ecx
000000000000cd85         xor        edx, edx
000000000000cd87         mov        rsi, r13
000000000000cd8a         mov        rdi, r12
000000000000cd8d         mov        byte [rsp+0x88+var_60], 0x6
000000000000cd92         mov        qword [rsp+0x88+var_68], r15
000000000000cd97         mov        r8, r9
000000000000cd9a         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000000cd9f         test       rax, rax
000000000000cda2         je         loc_ce00

000000000000cda4         lea        r8, qword [rsp+0x88+var_58]
000000000000cda9         mov        rdx, r14
000000000000cdac         mov        rcx, rax
000000000000cdaf         mov        rsi, r13
000000000000cdb2         mov        rdi, r12
000000000000cdb5         mov        byte [rsp+0x88+var_50], 0xa
000000000000cdba         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000000cdbf         mov        r14, rax

                     loc_cdc2:
000000000000cdc2         mov        rdi, qword [rsp+0x88+var_40]                ; CODE XREF=build_charclass_op+504, build_charclass_op+542, build_charclass_op+566, build_charclass_op+608
000000000000cdc7         xor        rdi, qword [fs:0x28]
000000000000cdd0         mov        rax, r14
000000000000cdd3         jne        loc_ce65

000000000000cdd9         add        rsp, 0x58
000000000000cddd         pop        rbx
000000000000cdde         pop        rbp
000000000000cddf         pop        r12
000000000000cde1         pop        r13
000000000000cde3         pop        r14
000000000000cde5         pop        r15
000000000000cde7         ret
                        ; endp
000000000000cde8         align      16

                     loc_cdf0:
000000000000cdf0         mov        rdi, r15                                    ; CODE XREF=build_charclass_op+374
000000000000cdf3         call       free_charset                                ; free_charset
000000000000cdf8         jmp        loc_cdc2
000000000000cdfa         align      512

                     loc_ce00:
000000000000ce00         mov        rdi, rbx                                    ; argument "__ptr" for method j_free, CODE XREF=build_charclass_op+361, build_charclass_op+418
000000000000ce03         call       j_free                                      ; free
000000000000ce08         mov        rdi, r15
000000000000ce0b         call       free_charset                                ; free_charset

                     loc_ce10:
000000000000ce10         mov        rax, qword [rsp+0x88+var_80]                ; CODE XREF=build_charclass_op+78
000000000000ce15         xor        r14d, r14d
000000000000ce18         mov        dword [rax], 0xc
000000000000ce1e         jmp        loc_cdc2

                     loc_ce20:
000000000000ce20         mov        rdi, rbx                                    ; argument "__ptr" for method j_free, CODE XREF=build_charclass_op+108
000000000000ce23         xor        r14d, r14d
000000000000ce26         call       j_free                                      ; free
000000000000ce2b         mov        rax, qword [rsp+0x88+var_80]
000000000000ce30         mov        dword [rax], 0xc
000000000000ce36         jmp        loc_cdc2
000000000000ce38         align      64

                     loc_ce40:
000000000000ce40         mov        rdi, rbx                                    ; argument "__ptr" for method j_free, CODE XREF=build_charclass_op+172
000000000000ce43         mov        dword [rsp+0x88+var_88], eax
000000000000ce46         xor        r14d, r14d
000000000000ce49         call       j_free                                      ; free
000000000000ce4e         mov        rdi, r15
000000000000ce51         call       free_charset                                ; free_charset
000000000000ce56         mov        rdi, qword [rsp+0x88+var_80]
000000000000ce5b         mov        eax, dword [rsp+0x88+var_88]
000000000000ce5e         mov        dword [rdi], eax
000000000000ce60         jmp        loc_cdc2

                     loc_ce65:
000000000000ce65         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=build_charclass_op+467
                        ; endp
000000000000ce6a         align      16                                          ; End of unwind block (FDE at 0x19404)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_148: int8_t, -328
        ;    var_150: int8_t, -336
        ;    var_154: int32_t, -340
        ;    var_160: int64_t, -352
        ;    var_168: int64_t, -360
        ;    var_170: int64_t, -368
        ;    var_178: int64_t, -376
        ;    var_180: int64_t, -384
        ;    var_188: int64_t, -392
        ;    var_190: int64_t, -400
        ;    var_198: int64_t, -408
        ;    var_1A0: int64_t, -416
        ;    var_1A8: int64_t, -424


                     re_compile_fastmap_iter.isra.30:
000000000000ce70         push       r15                                         ; Begin of unwind block (FDE at 0x19464), CODE XREF=rpl_re_compile_fastmap+80, rpl_re_compile_fastmap+111, rpl_re_compile_fastmap+145, rpl_re_compile_fastmap+179
000000000000ce72         push       r14
000000000000ce74         mov        rax, rdi
000000000000ce77         push       r13
000000000000ce79         push       r12
000000000000ce7b         push       rbp
000000000000ce7c         push       rbx
000000000000ce7d         xor        ebx, ebx
000000000000ce7f         mov        rbp, rcx
000000000000ce82         sub        rsp, 0x178
000000000000ce89         mov        rax, qword [rax]
000000000000ce8c         mov        qword [rsp+0x1a8+var_178], rdi
000000000000ce91         mov        qword [rsp+0x1a8+var_188], rsi
000000000000ce96         mov        rdi, qword [fs:0x28]
000000000000ce9f         mov        qword [rsp+0x1a8+var_40], rdi
000000000000cea7         xor        edi, edi
000000000000cea9         cmp        dword [rax+0xb4], 0x1
000000000000ceb0         mov        qword [rsp+0x1a8+var_180], rdx
000000000000ceb5         mov        qword [rsp+0x1a8+var_1A0], rax
000000000000ceba         jne        loc_ced3

000000000000cebc         mov        rax, qword [rsp+0x1a8+var_178]
000000000000cec1         mov        rax, qword [rax+0x18]
000000000000cec5         mov        rbx, rax
000000000000cec8         mov        qword [rsp+0x1a8+var_1A8], rax
000000000000cecc         shr        rbx, 0x16
000000000000ced0         and        ebx, 0x1

                     loc_ced3:
000000000000ced3         mov        rax, qword [rsp+0x1a8+var_188]              ; CODE XREF=re_compile_fastmap_iter.isra.30+74
000000000000ced8         cmp        qword [rax], 0x0
000000000000cedc         jle        loc_d2ed

000000000000cee2         lea        rax, qword [rsp+0x1a8+var_150]
000000000000cee7         mov        qword [rsp+0x1a8+var_1A8], 0x0
000000000000ceef         mov        qword [rsp+0x1a8+var_168], rax
000000000000cef4         lea        rax, qword [rsp+0x1a8+var_154]
000000000000cef9         mov        qword [rsp+0x1a8+var_160], rax
000000000000cefe         lea        rax, qword [rsp+0x1a8+var_148]
000000000000cf03         mov        qword [rsp+0x1a8+var_170], rax
000000000000cf08         jmp        loc_cf4e
000000000000cf0a         align      16

                     loc_cf10:
000000000000cf10         cmp        eax, 0x3                                    ; CODE XREF=re_compile_fastmap_iter.isra.30+271
000000000000cf13         je         loc_d206

000000000000cf19         cmp        eax, 0x6
000000000000cf1c         je         loc_d0a8

000000000000cf22         and        edx, 0xfffffffd
000000000000cf25         cmp        dl, 0x5
000000000000cf28         je         loc_d324

000000000000cf2e         cmp        eax, 0x2
000000000000cf31         je         loc_d284

                     loc_cf37:
000000000000cf37         mov        rdi, qword [rsp+0x1a8+var_188]              ; CODE XREF=re_compile_fastmap_iter.isra.30+313, re_compile_fastmap_iter.isra.30+327, re_compile_fastmap_iter.isra.30+507, re_compile_fastmap_iter.isra.30+543, re_compile_fastmap_iter.isra.30+559, re_compile_fastmap_iter.isra.30+630, re_compile_fastmap_iter.isra.30+842, re_compile_fastmap_iter.isra.30+913, re_compile_fastmap_iter.isra.30+1028
000000000000cf3c         add        qword [rsp+0x1a8+var_1A8], 0x1
000000000000cf41         mov        rax, qword [rsp+0x1a8+var_1A8]
000000000000cf45         cmp        rax, qword [rdi]
000000000000cf48         jge        loc_d2ed

                     loc_cf4e:
000000000000cf4e         mov        rax, qword [rsp+0x1a8+var_180]              ; CODE XREF=re_compile_fastmap_iter.isra.30+152
000000000000cf53         mov        rdi, qword [rsp+0x1a8+var_1A8]
000000000000cf57         mov        rax, qword [rax]
000000000000cf5a         mov        r12, qword [rax+rdi*8]
000000000000cf5e         mov        rax, qword [rsp+0x1a8+var_1A0]
000000000000cf63         mov        rcx, qword [rax]
000000000000cf66         mov        rax, r12
000000000000cf69         shl        rax, 0x4
000000000000cf6d         mov        qword [rsp+0x1a8+var_198], rax
000000000000cf72         lea        rsi, qword [rcx+rax]
000000000000cf76         movzx      eax, byte [rsi+8]
000000000000cf7a         cmp        eax, 0x1
000000000000cf7d         mov        edx, eax
000000000000cf7f         jne        loc_cf10

000000000000cf81         movzx      r13d, byte [rsi]
000000000000cf85         test       ebx, ebx
000000000000cf87         mov        byte [rbp+r13], 0x1
000000000000cf8d         je         loc_cfa0

000000000000cf8f         call       j___ctype_tolower_loc                       ; __ctype_tolower_loc
000000000000cf94         mov        rax, qword [rax]
000000000000cf97         movsxd     rax, dword [rax+r13*4]
000000000000cf9b         mov        byte [rbp+rax], 0x1

                     loc_cfa0:
000000000000cfa0         mov        rax, qword [rsp+0x1a8+var_178]              ; CODE XREF=re_compile_fastmap_iter.isra.30+285
000000000000cfa5         test       byte [rax+0x1a], 0x40
000000000000cfa9         je         loc_cf37

000000000000cfab         mov        rsi, qword [rsp+0x1a8+var_1A0]
000000000000cfb0         cmp        dword [rsi+0xb4], 0x1
000000000000cfb7         jle        loc_cf37

000000000000cfbd         mov        rax, qword [rsi]
000000000000cfc0         mov        rdi, qword [rsp+0x1a8+var_198]
000000000000cfc5         movzx      edx, byte [rax+rdi]
000000000000cfc9         mov        byte [rsp+0x1a8+var_148], dl
000000000000cfcd         lea        rdx, qword [r12+1]
000000000000cfd2         cmp        qword [rsi+0x10], rdx
000000000000cfd6         jbe        loc_d316

000000000000cfdc         lea        rcx, qword [rax+rdi+0x10]
000000000000cfe1         mov        eax, dword [rcx+8]
000000000000cfe4         and        eax, 0x2000ff
000000000000cfe9         cmp        eax, 0x200001
000000000000cfee         jne        loc_d316

000000000000cff4         add        rdi, 0x20
000000000000cff8         mov        r13, rdi
000000000000cffb         mov        rdi, qword [rsp+0x1a8+var_170]
000000000000d000         lea        rax, qword [rdi+1]
000000000000d004         jmp        loc_d02b
000000000000d006         align      16

                     loc_d010:
000000000000d010         mov        rcx, qword [rsi]                            ; CODE XREF=re_compile_fastmap_iter.isra.30+466
000000000000d013         add        rcx, r13
000000000000d016         add        r13, 0x10
000000000000d01a         mov        edx, dword [rcx+8]
000000000000d01d         and        edx, 0x2000ff
000000000000d023         cmp        edx, 0x200001
000000000000d029         jne        loc_d044

                     loc_d02b:
000000000000d02b         movzx      edx, byte [rcx]                             ; CODE XREF=re_compile_fastmap_iter.isra.30+404
000000000000d02e         add        rax, 0x1
000000000000d032         mov        byte [rax-1], dl
000000000000d035         mov        rdx, rax
000000000000d038         sub        rdx, rdi
000000000000d03b         add        rdx, r12
000000000000d03e         cmp        qword [rsi+0x10], rdx
000000000000d042         ja         loc_d010

                     loc_d044:
000000000000d044         mov        rsi, qword [rsp+0x1a8+var_170]              ; CODE XREF=re_compile_fastmap_iter.isra.30+441, re_compile_fastmap_iter.isra.30+1199
000000000000d049         mov        rcx, qword [rsp+0x1a8+var_168]
000000000000d04e         mov        rdi, qword [rsp+0x1a8+var_160]
000000000000d053         sub        rax, rsi
000000000000d056         mov        qword [rcx], 0x0
000000000000d05d         mov        r12, rax
000000000000d060         mov        rdx, rax
000000000000d063         call       rpl_mbrtowc                                 ; rpl_mbrtowc
000000000000d068         cmp        r12, rax
000000000000d06b         jne        loc_cf37

000000000000d071         mov        edi, dword [rsp+0x1a8+var_154]              ; argument "__wc" for method j_towlower
000000000000d075         call       j_towlower                                  ; towlower
000000000000d07a         mov        rdx, qword [rsp+0x1a8+var_168]              ; argument "__ps" for method j_wcrtomb
000000000000d07f         mov        rdi, qword [rsp+0x1a8+var_170]              ; argument "__s" for method j_wcrtomb
000000000000d084         mov        esi, eax                                    ; argument "__wc" for method j_wcrtomb
000000000000d086         call       j_wcrtomb                                   ; wcrtomb
000000000000d08b         cmp        rax, 0xffffffffffffffff
000000000000d08f         je         loc_cf37

000000000000d095         movzx      eax, byte [rsp+0x1a8+var_148]
000000000000d09a         mov        byte [rbp+rax], 0x1
000000000000d09f         jmp        loc_cf37
000000000000d0a4         align      8

                     loc_d0a8:
000000000000d0a8         mov        rax, qword [rsp+0x1a8+var_1A0]              ; CODE XREF=re_compile_fastmap_iter.isra.30+172
000000000000d0ad         mov        r12, qword [rsi]
000000000000d0b0         cmp        dword [rax+0xb4], 0x1
000000000000d0b7         jle        loc_d0dd

000000000000d0b9         cmp        qword [r12+0x48], 0x0
000000000000d0bf         jne        loc_d1bf

000000000000d0c5         test       byte [r12+0x20], 0x1
000000000000d0cb         jne        loc_d1bf

000000000000d0d1         cmp        qword [r12+0x40], 0x0
000000000000d0d7         jne        loc_d1bf

                     loc_d0dd:
000000000000d0dd         xor        r13d, r13d                                  ; CODE XREF=re_compile_fastmap_iter.isra.30+583
000000000000d0e0         cmp        qword [r12+0x28], 0x0
000000000000d0e6         jle        loc_cf37

000000000000d0ec         mov        r15, r12
000000000000d0ef         mov        r14, qword [rsp+0x1a8+var_168]
000000000000d0f4         mov        r12, rbp
000000000000d0f7         mov        rbp, r13
000000000000d0fa         mov        r13d, ebx
000000000000d0fd         jmp        loc_d10d

                     loc_d0ff:
000000000000d0ff         add        rbp, 0x1                                    ; CODE XREF=re_compile_fastmap_iter.isra.30+760, re_compile_fastmap_iter.isra.30+774, re_compile_fastmap_iter.isra.30+806
000000000000d103         cmp        rbp, qword [r15+0x28]
000000000000d107         jge        loc_d1b4

                     loc_d10d:
000000000000d10d         mov        qword [r14], 0x0                            ; CODE XREF=re_compile_fastmap_iter.isra.30+653, re_compile_fastmap_iter.isra.30+830
000000000000d114         mov        rax, qword [r15]
000000000000d117         mov        rdx, r14                                    ; argument "__ps" for method j_wcrtomb
000000000000d11a         mov        rdi, qword [rsp+0x1a8+var_170]              ; argument "__s" for method j_wcrtomb
000000000000d11f         lea        rbx, qword [rbp*4]
000000000000d127         mov        esi, dword [rax+rbp*4]                      ; argument "__wc" for method j_wcrtomb
000000000000d12a         call       j_wcrtomb                                   ; wcrtomb
000000000000d12f         cmp        rax, 0xffffffffffffffff
000000000000d133         je         loc_d15f

000000000000d135         movzx      edx, byte [rsp+0x1a8+var_148]
000000000000d13a         test       r13d, r13d
000000000000d13d         mov        byte [r12+rdx], 0x1
000000000000d142         mov        qword [rsp+0x1a8+var_198], rdx
000000000000d147         je         loc_d15f

000000000000d149         call       j___ctype_tolower_loc                       ; __ctype_tolower_loc
000000000000d14e         mov        rdx, qword [rsp+0x1a8+var_198]
000000000000d153         mov        rax, qword [rax]
000000000000d156         movsxd     rax, dword [rax+rdx*4]
000000000000d15a         mov        byte [r12+rax], 0x1

                     loc_d15f:
000000000000d15f         mov        rax, qword [rsp+0x1a8+var_178]              ; CODE XREF=re_compile_fastmap_iter.isra.30+707, re_compile_fastmap_iter.isra.30+727
000000000000d164         test       byte [rax+0x1a], 0x40
000000000000d168         je         loc_d0ff

000000000000d16a         mov        rax, qword [rsp+0x1a8+var_1A0]
000000000000d16f         cmp        dword [rax+0xb4], 0x1
000000000000d176         jle        loc_d0ff

000000000000d178         mov        rax, qword [r15]
000000000000d17b         mov        edi, dword [rax+rbx]                        ; argument "__wc" for method j_towlower
000000000000d17e         call       j_towlower                                  ; towlower
000000000000d183         mov        rdi, qword [rsp+0x1a8+var_170]              ; argument "__s" for method j_wcrtomb
000000000000d188         mov        rdx, r14                                    ; argument "__ps" for method j_wcrtomb
000000000000d18b         mov        esi, eax                                    ; argument "__wc" for method j_wcrtomb
000000000000d18d         call       j_wcrtomb                                   ; wcrtomb
000000000000d192         cmp        rax, 0xffffffffffffffff
000000000000d196         je         loc_d0ff

000000000000d19c         movzx      eax, byte [rsp+0x1a8+var_148]
000000000000d1a1         add        rbp, 0x1
000000000000d1a5         mov        byte [r12+rax], 0x1
000000000000d1aa         cmp        rbp, qword [r15+0x28]
000000000000d1ae         jl         loc_d10d

                     loc_d1b4:
000000000000d1b4         mov        ebx, r13d                                   ; CODE XREF=re_compile_fastmap_iter.isra.30+663
000000000000d1b7         mov        rbp, r12
000000000000d1ba         jmp        loc_cf37

                     loc_d1bf:
000000000000d1bf         mov        r12, qword [rsp+0x1a8+var_168]              ; CODE XREF=re_compile_fastmap_iter.isra.30+591, re_compile_fastmap_iter.isra.30+603, re_compile_fastmap_iter.isra.30+615
000000000000d1c4         mov        r13, qword [rsp+0x1a8+var_160]
000000000000d1c9         mov        byte [rsp+0x1a8+var_154], 0x0
000000000000d1ce         nop

                     loc_d1d0:
000000000000d1d0         xor        edi, edi                                    ; CODE XREF=re_compile_fastmap_iter.isra.30+911
000000000000d1d2         mov        qword [r12], 0x0
000000000000d1da         mov        rcx, r12
000000000000d1dd         mov        edx, 0x1
000000000000d1e2         mov        rsi, r13
000000000000d1e5         call       rpl_mbrtowc                                 ; rpl_mbrtowc
000000000000d1ea         cmp        rax, 0xfffffffffffffffe
000000000000d1ee         jne        loc_d1fa

000000000000d1f0         movzx      eax, byte [rsp+0x1a8+var_154]
000000000000d1f5         mov        byte [rbp+rax], 0x1

                     loc_d1fa:
000000000000d1fa         add        byte [rsp+0x1a8+var_154], 0x1               ; CODE XREF=re_compile_fastmap_iter.isra.30+894
000000000000d1ff         jne        loc_d1d0

000000000000d201         jmp        loc_cf37

                     loc_d206:
000000000000d206         mov        r13, rbp                                    ; CODE XREF=re_compile_fastmap_iter.isra.30+163
000000000000d209         xor        r12d, r12d
000000000000d20c         mov        qword [rsp+0x1a8+var_190], 0x0

                     loc_d215:
000000000000d215         mov        rax, qword [rsp+0x1a8+var_198]              ; CODE XREF=re_compile_fastmap_iter.isra.30+1042
000000000000d21a         mov        rsi, qword [rsp+0x1a8+var_190]
000000000000d21f         xor        r14d, r14d
000000000000d222         mov        rax, qword [rcx+rax]
000000000000d226         mov        r15, qword [rax+rsi]
000000000000d22a         nop        word [rax+rax]

                     loc_d230:
000000000000d230         bt         r15, r14                                    ; CODE XREF=re_compile_fastmap_iter.isra.30+1005
000000000000d234         jae        loc_d255

000000000000d236         test       ebx, ebx
000000000000d238         mov        byte [r13+r14], 0x1
000000000000d23e         je         loc_d255

000000000000d240         call       j___ctype_tolower_loc                       ; __ctype_tolower_loc
000000000000d245         mov        rax, qword [rax]
000000000000d248         lea        rdx, qword [r12+r14]
000000000000d24c         movsxd     rax, dword [rax+rdx*4]
000000000000d250         mov        byte [rbp+rax], 0x1

                     loc_d255:
000000000000d255         add        r14, 0x1                                    ; CODE XREF=re_compile_fastmap_iter.isra.30+964, re_compile_fastmap_iter.isra.30+974
000000000000d259         cmp        r14, 0x40
000000000000d25d         jne        loc_d230

000000000000d25f         add        r12, 0x40
000000000000d263         add        qword [rsp+0x1a8+var_190], 0x8
000000000000d269         add        r13, 0x40
000000000000d26d         cmp        r12, 0x100
000000000000d274         je         loc_cf37

000000000000d27a         mov        rax, qword [rsp+0x1a8+var_1A0]
000000000000d27f         mov        rcx, qword [rax]
000000000000d282         jmp        loc_d215

                     loc_d284:
000000000000d284         movdqa     xmm0, xmmword [__re_error_msgid+384]        ; 0x172e0, CODE XREF=re_compile_fastmap_iter.isra.30+193
000000000000d28c         movups     xmmword [rbp], xmm0
000000000000d290         movups     xmmword [rbp+0x10], xmm0
000000000000d294         movups     xmmword [rbp+0x20], xmm0
000000000000d298         movups     xmmword [rbp+0x30], xmm0
000000000000d29c         movups     xmmword [rbp+0x40], xmm0
000000000000d2a0         movups     xmmword [rbp+0x50], xmm0
000000000000d2a4         movups     xmmword [rbp+0x60], xmm0
000000000000d2a8         movups     xmmword [rbp+0x70], xmm0
000000000000d2ac         movups     xmmword [rbp+0x80], xmm0
000000000000d2b3         movups     xmmword [rbp+0x90], xmm0
000000000000d2ba         movups     xmmword [rbp+0xa0], xmm0
000000000000d2c1         movups     xmmword [rbp+0xb0], xmm0
000000000000d2c8         movups     xmmword [rbp+0xc0], xmm0
000000000000d2cf         movups     xmmword [rbp+0xd0], xmm0
000000000000d2d6         movups     xmmword [rbp+0xe0], xmm0
000000000000d2dd         movups     xmmword [rbp+0xf0], xmm0

                     loc_d2e4:
000000000000d2e4         mov        rax, qword [rsp+0x1a8+var_178]              ; CODE XREF=re_compile_fastmap_iter.isra.30+1309
000000000000d2e9         or         byte [rax+0x38], 0x1

                     loc_d2ed:
000000000000d2ed         mov        rax, qword [rsp+0x1a8+var_40]               ; CODE XREF=re_compile_fastmap_iter.isra.30+108, re_compile_fastmap_iter.isra.30+216, re_compile_fastmap_iter.isra.30+1303
000000000000d2f5         xor        rax, qword [fs:0x28]
000000000000d2fe         jne        loc_d392

000000000000d304         add        rsp, 0x178
000000000000d30b         pop        rbx
000000000000d30c         pop        rbp
000000000000d30d         pop        r12
000000000000d30f         pop        r13
000000000000d311         pop        r14
000000000000d313         pop        r15
000000000000d315         ret
                        ; endp

                     loc_d316:
000000000000d316         mov        rax, qword [rsp+0x1a8+var_170]              ; CODE XREF=re_compile_fastmap_iter.isra.30+358, re_compile_fastmap_iter.isra.30+382
000000000000d31b         add        rax, 0x1
000000000000d31f         jmp        loc_d044

                     loc_d324:
000000000000d324         movdqa     xmm0, xmmword [__re_error_msgid+384]        ; 0x172e0, CODE XREF=re_compile_fastmap_iter.isra.30+184
000000000000d32c         cmp        eax, 0x2
000000000000d32f         movups     xmmword [rbp], xmm0
000000000000d333         movups     xmmword [rbp+0x10], xmm0
000000000000d337         movups     xmmword [rbp+0x20], xmm0
000000000000d33b         movups     xmmword [rbp+0x30], xmm0
000000000000d33f         movups     xmmword [rbp+0x40], xmm0
000000000000d343         movups     xmmword [rbp+0x50], xmm0
000000000000d347         movups     xmmword [rbp+0x60], xmm0
000000000000d34b         movups     xmmword [rbp+0x70], xmm0
000000000000d34f         movups     xmmword [rbp+0x80], xmm0
000000000000d356         movups     xmmword [rbp+0x90], xmm0
000000000000d35d         movups     xmmword [rbp+0xa0], xmm0
000000000000d364         movups     xmmword [rbp+0xb0], xmm0
000000000000d36b         movups     xmmword [rbp+0xc0], xmm0
000000000000d372         movups     xmmword [rbp+0xd0], xmm0
000000000000d379         movups     xmmword [rbp+0xe0], xmm0
000000000000d380         movups     xmmword [rbp+0xf0], xmm0
000000000000d387         jne        loc_d2ed

000000000000d38d         jmp        loc_d2e4

                     loc_d392:
000000000000d392         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=re_compile_fastmap_iter.isra.30+1166
                        ; endp
000000000000d397         align      32                                          ; End of unwind block (FDE at 0x19464)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     check_node_accept_bytes.isra.31:
000000000000d3a0         shl        rdx, 0x4                                    ; Begin of unwind block (FDE at 0x194b4), CODE XREF=check_arrival+597, set_regs+888, sift_states_backward+521, re_search_internal+3298
000000000000d3a4         push       r13
000000000000d3a6         push       r12
000000000000d3a8         lea        r9, qword [rdi+rdx]
000000000000d3ac         push       rbp
000000000000d3ad         push       rbx
000000000000d3ae         sub        rsp, 0x8
000000000000d3b2         movzx      r11d, byte [r9+8]
000000000000d3b7         cmp        r11b, 0x7
000000000000d3bb         je         loc_d4d0

000000000000d3c1         cmp        dword [rcx+0x90], 0x1
000000000000d3c8         je         loc_d490

000000000000d3ce         mov        rbx, rsi
000000000000d3d1         mov        rdi, rcx
000000000000d3d4         mov        rsi, r8
000000000000d3d7         mov        r10, rcx
000000000000d3da         call       re_string_char_size_at.part.0               ; re_string_char_size_at.part.0
000000000000d3df         cmp        r11b, 0x5
000000000000d3e3         mov        ebp, eax
000000000000d3e5         je         loc_d4a0

000000000000d3eb         cmp        r11b, 0x6
000000000000d3ef         jne        loc_d490

000000000000d3f5         cmp        eax, 0x1
000000000000d3f8         jle        loc_d490

000000000000d3fe         mov        r13, qword [r9]
000000000000d401         mov        rsi, qword [r13+0x40]
000000000000d405         mov        rdx, qword [r13+0x28]
000000000000d409         test       rsi, rsi
000000000000d40c         jne        loc_d419

000000000000d40e         cmp        qword [r13+0x48], 0x0
000000000000d413         je         loc_d508

                     loc_d419:
000000000000d419         mov        rax, qword [r10+0x10]                       ; CODE XREF=check_node_accept_bytes.isra.31+108, check_node_accept_bytes.isra.31+363
000000000000d41d         test       rdx, rdx
000000000000d420         mov        r12d, dword [rax+r8*4]
000000000000d424         jle        loc_d447

000000000000d426         mov        rcx, qword [r13]
000000000000d42a         cmp        r12d, dword [rcx]
000000000000d42d         je         loc_d482

000000000000d42f         xor        eax, eax
000000000000d431         jmp        loc_d43e
000000000000d433         align      8

                     loc_d438:
000000000000d438         cmp        r12d, dword [rcx+rax*4]                     ; CODE XREF=check_node_accept_bytes.isra.31+165
000000000000d43c         je         loc_d482

                     loc_d43e:
000000000000d43e         add        rax, 0x1                                    ; CODE XREF=check_node_accept_bytes.isra.31+145
000000000000d442         cmp        rax, rdx
000000000000d445         jne        loc_d438

                     loc_d447:
000000000000d447         mov        rax, qword [r13+0x48]                       ; CODE XREF=check_node_accept_bytes.isra.31+132
000000000000d44b         test       rax, rax
000000000000d44e         jle        loc_d52c

000000000000d454         xor        ebx, ebx
000000000000d456         jmp        loc_d46e
000000000000d458         align      32

                     loc_d460:
000000000000d460         add        rbx, 0x1                                    ; CODE XREF=check_node_accept_bytes.isra.31+224
000000000000d464         cmp        rbx, qword [r13+0x48]
000000000000d468         jge        loc_d528

                     loc_d46e:
000000000000d46e         mov        rax, qword [r13+0x18]                       ; CODE XREF=check_node_accept_bytes.isra.31+182
000000000000d472         mov        edi, r12d                                   ; argument "__wc" for method j_iswctype
000000000000d475         mov        rsi, qword [rax+rbx*8]                      ; argument "__desc" for method j_iswctype
000000000000d479         call       j_iswctype                                  ; iswctype
000000000000d47e         test       eax, eax
000000000000d480         je         loc_d460

                     loc_d482:
000000000000d482         test       byte [r13+0x20], 0x1                        ; CODE XREF=check_node_accept_bytes.isra.31+141, check_node_accept_bytes.isra.31+156, check_node_accept_bytes.isra.31+441
000000000000d487         je         loc_d492

000000000000d489         nop        dword [rax]

                     loc_d490:
000000000000d490         xor        ebp, ebp                                    ; CODE XREF=check_node_accept_bytes.isra.31+40, check_node_accept_bytes.isra.31+79, check_node_accept_bytes.isra.31+88, check_node_accept_bytes.isra.31+259, check_node_accept_bytes.isra.31+281, check_node_accept_bytes.isra.31+299, check_node_accept_bytes.isra.31+317, check_node_accept_bytes.isra.31+330, check_node_accept_bytes.isra.31+353, check_node_accept_bytes.isra.31+380, check_node_accept_bytes.isra.31+457

                     loc_d492:
000000000000d492         add        rsp, 0x8                                    ; CODE XREF=check_node_accept_bytes.isra.31+231, check_node_accept_bytes.isra.31+270, check_node_accept_bytes.isra.31+283, check_node_accept_bytes.isra.31+355, check_node_accept_bytes.isra.31+374, check_node_accept_bytes.isra.31+497
000000000000d496         mov        eax, ebp
000000000000d498         pop        rbx
000000000000d499         pop        rbp
000000000000d49a         pop        r12
000000000000d49c         pop        r13
000000000000d49e         ret
                        ; endp
000000000000d49f         align      32

                     loc_d4a0:
000000000000d4a0         cmp        eax, 0x1                                    ; CODE XREF=check_node_accept_bytes.isra.31+69
000000000000d4a3         jle        loc_d490

000000000000d4a5         mov        rax, qword [rbx]
000000000000d4a8         test       al, 0x40
000000000000d4aa         je         loc_d4c0

                     loc_d4ac:
000000000000d4ac         test       al, 0x80                                    ; CODE XREF=check_node_accept_bytes.isra.31+297
000000000000d4ae         je         loc_d492

000000000000d4b0         mov        rax, qword [r10+8]
000000000000d4b4         cmp        byte [rax+r8], 0x0
000000000000d4b9         je         loc_d490

000000000000d4bb         jmp        loc_d492
000000000000d4bd         align      64

                     loc_d4c0:
000000000000d4c0         mov        rdx, qword [r10+8]                          ; CODE XREF=check_node_accept_bytes.isra.31+266
000000000000d4c4         cmp        byte [rdx+r8], 0xa
000000000000d4c9         jne        loc_d4ac

000000000000d4cb         jmp        loc_d490
000000000000d4cd         align      16

                     loc_d4d0:
000000000000d4d0         mov        rdx, qword [rcx+8]                          ; CODE XREF=check_node_accept_bytes.isra.31+27
000000000000d4d4         lea        rsi, qword [rdx+r8]
000000000000d4d8         movzx      eax, byte [rsi]
000000000000d4db         cmp        al, 0xc1
000000000000d4dd         jbe        loc_d490

000000000000d4df         mov        rcx, qword [rcx+0x58]
000000000000d4e3         lea        rdi, qword [r8+1]
000000000000d4e7         cmp        rdi, rcx
000000000000d4ea         jge        loc_d490

000000000000d4ec         cmp        al, 0xdf
000000000000d4ee         movzx      edx, byte [rdx+r8+1]
000000000000d4f4         ja         loc_d55e

000000000000d4f6         add        edx, 0xffffff80
000000000000d4f9         mov        ebp, 0x2
000000000000d4fe         cmp        dl, 0x3f
000000000000d501         ja         loc_d490

000000000000d503         jmp        loc_d492
000000000000d505         align      8

                     loc_d508:
000000000000d508         test       rdx, rdx                                    ; CODE XREF=check_node_accept_bytes.isra.31+115
000000000000d50b         jne        loc_d419

                     loc_d511:
000000000000d511         test       byte [r13+0x20], 0x1                        ; CODE XREF=check_node_accept_bytes.isra.31+399, check_node_accept_bytes.isra.31+423
000000000000d516         jne        loc_d492

000000000000d51c         jmp        loc_d490
000000000000d521         align      8

                     loc_d528:
000000000000d528         mov        rsi, qword [r13+0x40]                       ; CODE XREF=check_node_accept_bytes.isra.31+200

                     loc_d52c:
000000000000d52c         test       rsi, rsi                                    ; CODE XREF=check_node_accept_bytes.isra.31+174
000000000000d52f         jle        loc_d511

000000000000d531         mov        rdx, qword [r13+8]
000000000000d535         xor        eax, eax
000000000000d537         jmp        loc_d549
000000000000d539         align      64

                     loc_d540:
000000000000d540         add        rax, 0x1                                    ; CODE XREF=check_node_accept_bytes.isra.31+429, check_node_accept_bytes.isra.31+439
000000000000d544         cmp        rax, rsi
000000000000d547         je         loc_d511

                     loc_d549:
000000000000d549         cmp        r12d, dword [rdx+rax*4]                     ; CODE XREF=check_node_accept_bytes.isra.31+407
000000000000d54d         jl         loc_d540

000000000000d54f         mov        rcx, qword [r13+0x10]
000000000000d553         cmp        r12d, dword [rcx+rax*4]
000000000000d557         jg         loc_d540

000000000000d559         jmp        loc_d482

                     loc_d55e:
000000000000d55e         cmp        al, 0xef                                    ; CODE XREF=check_node_accept_bytes.isra.31+340
000000000000d560         ja         loc_d5a8

000000000000d562         cmp        al, 0xe0
000000000000d564         jne        loc_d56f

000000000000d566         cmp        dl, 0x9f
000000000000d569         jbe        loc_d490

                     loc_d56f:
000000000000d56f         mov        ebp, 0x3                                    ; CODE XREF=check_node_accept_bytes.isra.31+452

                     loc_d574:
000000000000d574         movsxd     rdi, ebp                                    ; CODE XREF=check_node_accept_bytes.isra.31+542, check_node_accept_bytes.isra.31+566, check_node_accept_bytes.isra.31+594
000000000000d577         add        r8, rdi
000000000000d57a         cmp        rcx, r8
000000000000d57d         jl         loc_d490

000000000000d583         mov        eax, 0x1
000000000000d588         jmp        loc_d597

                     loc_d58a:
000000000000d58a         add        rax, 0x1                                    ; CODE XREF=check_node_accept_bytes.isra.31+513
000000000000d58e         cmp        rdi, rax
000000000000d591         jle        loc_d492

                     loc_d597:
000000000000d597         movzx      ebx, byte [rsi+rax]                         ; CODE XREF=check_node_accept_bytes.isra.31+488
000000000000d59b         lea        edx, dword [rbx-0x80]
000000000000d59e         cmp        dl, 0x3f
000000000000d5a1         jbe        loc_d58a

000000000000d5a3         jmp        loc_d490

                     loc_d5a8:
000000000000d5a8         cmp        al, 0xf7                                    ; CODE XREF=check_node_accept_bytes.isra.31+448
000000000000d5aa         ja         loc_d5c0

000000000000d5ac         cmp        al, 0xf0
000000000000d5ae         jne        loc_d5b9

000000000000d5b0         cmp        dl, 0x8f
000000000000d5b3         jbe        loc_d490

                     loc_d5b9:
000000000000d5b9         mov        ebp, 0x4                                    ; CODE XREF=check_node_accept_bytes.isra.31+526
000000000000d5be         jmp        loc_d574

                     loc_d5c0:
000000000000d5c0         cmp        al, 0xfb                                    ; CODE XREF=check_node_accept_bytes.isra.31+522
000000000000d5c2         ja         loc_d5d8

000000000000d5c4         cmp        al, 0xf8
000000000000d5c6         jne        loc_d5d1

000000000000d5c8         cmp        dl, 0x87
000000000000d5cb         jbe        loc_d490

                     loc_d5d1:
000000000000d5d1         mov        ebp, 0x5                                    ; CODE XREF=check_node_accept_bytes.isra.31+550
000000000000d5d6         jmp        loc_d574

                     loc_d5d8:
000000000000d5d8         cmp        al, 0xfd                                    ; CODE XREF=check_node_accept_bytes.isra.31+546
000000000000d5da         ja         loc_d490

000000000000d5e0         cmp        al, 0xfc
000000000000d5e2         jne        loc_d5ed

000000000000d5e4         cmp        dl, 0x83
000000000000d5e7         jbe        loc_d490

                     loc_d5ed:
000000000000d5ed         mov        ebp, 0x6                                    ; CODE XREF=check_node_accept_bytes.isra.31+578
000000000000d5f2         jmp        loc_d574
000000000000d5f4         align      512                                         ; End of unwind block (FDE at 0x194b4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int8_t, -88
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_7C: int32_t, -124
        ;    var_80: int32_t, -128
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208
        ;    var_D8: int64_t, -216
        ;    var_E0: int64_t, -224
        ;    var_E8: int64_t, -232
        ;    var_F0: int64_t, -240
        ;    var_F8: int64_t, -248
        ;    var_100: int64_t, -256
        ;    var_108: int64_t, -264


                     check_arrival:
000000000000d600         push       r15                                         ; Begin of unwind block (FDE at 0x194f0), CODE XREF=get_subexp_sub.isra.32+48, transit_state_bkref.isra.34+1675
000000000000d602         push       r14
000000000000d604         mov        r15, rdi
000000000000d607         push       r13
000000000000d609         push       r12
000000000000d60b         push       rbp
000000000000d60c         push       rbx
000000000000d60d         mov        rbp, rcx
000000000000d610         mov        rbx, rdx
000000000000d613         sub        rsp, 0xd8
000000000000d61a         mov        rcx, qword [rdi+0x98]
000000000000d621         mov        r13, qword [rsi+8]
000000000000d625         mov        rax, qword [fs:0x28]
000000000000d62e         mov        qword [rsp+0x108+var_40], rax
000000000000d636         xor        eax, eax
000000000000d638         mov        rax, rdx
000000000000d63b         mov        qword [rsp+0x108+var_A8], rsi
000000000000d640         mov        qword [rsp+0x108+var_90], r8
000000000000d645         shl        rax, 0x4
000000000000d649         add        rax, qword [rcx]
000000000000d64c         mov        qword [rsp+0x108+var_C8], r9
000000000000d651         mov        qword [rsp+0x108+var_D8], rcx
000000000000d656         mov        dword [rsp+0x108+var_80], 0x0
000000000000d661         mov        rax, qword [rax]
000000000000d664         mov        qword [rsp+0x108+var_C0], rax
000000000000d669         movsxd     rax, dword [rdi+0xe0]
000000000000d670         add        rax, r9
000000000000d673         cmp        rax, r13
000000000000d676         jge        loc_dc96

                     loc_d67c:
000000000000d67c         mov        rax, qword [rsp+0x108+var_A8]               ; CODE XREF=check_arrival+1787
000000000000d681         mov        rdx, qword [r15+0xb8]
000000000000d688         mov        rcx, qword [r15+0x48]
000000000000d68c         mov        r12, qword [rax]
000000000000d68f         mov        r14, qword [rax+0x10]
000000000000d693         mov        qword [rsp+0x108+var_A0], rdx
000000000000d698         mov        qword [rsp+0x108+var_98], rcx
000000000000d69d         mov        edx, dword [r15+0xa0]
000000000000d6a4         test       r12, r12
000000000000d6a7         mov        qword [r15+0xb8], r14
000000000000d6ae         je         loc_da90

000000000000d6b4         lea        rsi, qword [r12-1]
000000000000d6b9         mov        qword [r15+0x48], r12
000000000000d6bd         mov        rdi, r15
000000000000d6c0         call       re_string_context_at                        ; re_string_context_at
000000000000d6c5         cmp        r12, rbp
000000000000d6c8         mov        r13d, eax
000000000000d6cb         je         loc_daa3

000000000000d6d1         mov        rbp, qword [r14+r12*8]
000000000000d6d5         test       rbp, rbp
000000000000d6d8         je         loc_d6e4

000000000000d6da         test       byte [rbp+0x68], 0x40
000000000000d6de         jne        loc_dc00

                     loc_d6e4:
000000000000d6e4         pxor       xmm0, xmm0                                  ; CODE XREF=check_arrival+216
000000000000d6e8         mov        qword [rsp+0x108+var_68], 0x0
000000000000d6f4         movaps     xmmword [rsp+0x108+var_78], xmm0

                     loc_d6fc:
000000000000d6fc         cmp        r12, qword [rsp+0x108+var_C8]               ; CODE XREF=check_arrival+1575, check_arrival+1681
000000000000d701         jge        loc_da28

000000000000d707         mov        ecx, dword [r15+0xe0]
000000000000d70e         test       ecx, ecx
000000000000d710         js         loc_da28

000000000000d716         lea        rbx, qword [rsp+0x108+var_78]
000000000000d71e         lea        rax, qword [0x8+r12*8]
000000000000d726         mov        qword [rsp+0x108+var_108], r12
000000000000d72a         mov        qword [rsp+0x108+var_E8], 0x0
000000000000d733         mov        qword [rsp+0x108+var_100], rbx
000000000000d738         lea        rbx, qword [rsp+0x108+var_58]
000000000000d740         mov        qword [rsp+0x108+var_F8], rax
000000000000d745         mov        rax, qword [r15+0xb8]
000000000000d74c         mov        qword [rsp+0x108+var_F0], rbx
000000000000d751         lea        rbx, qword [rsp+0x108+var_7C]
000000000000d759         mov        qword [rsp+0x108+var_B0], rbx

                     loc_d75e:
000000000000d75e         mov        rcx, qword [rsp+0x108+var_F8]               ; CODE XREF=check_arrival+1058
000000000000d763         mov        qword [rsp+0x108+var_70], 0x0
000000000000d76f         mov        rsi, qword [rax+rcx]
000000000000d773         test       rsi, rsi
000000000000d776         je         loc_db38

000000000000d77c         mov        rdi, qword [rsp+0x108+var_100]
000000000000d781         add        rsi, 0x8
000000000000d785         call       re_node_set_merge                           ; re_node_set_merge
000000000000d78a         test       eax, eax
000000000000d78c         mov        dword [rsp+0x108+var_80], eax
000000000000d793         jne        loc_db70

000000000000d799         test       rbp, rbp
000000000000d79c         je         loc_d948

                     loc_d7a2:
000000000000d7a2         cmp        qword [rbp+0x28], 0x0                       ; CODE XREF=check_arrival+1339
000000000000d7a7         mov        rax, qword [rsp+0x108+var_F0]
000000000000d7ac         pxor       xmm0, xmm0
000000000000d7b0         mov        r12, qword [r15+0x98]
000000000000d7b7         mov        dword [rsp+0x108+var_7C], 0x0
000000000000d7c2         mov        qword [rax+0x10], 0x0
000000000000d7ca         movaps     xmmword [rax], xmm0
000000000000d7cd         jle        loc_dd00

000000000000d7d3         lea        rax, qword [r12+0xd8]
000000000000d7db         xor        ebx, ebx
000000000000d7dd         mov        qword [rsp+0x108+var_E0], rax
000000000000d7e2         jmp        loc_d829
000000000000d7e4         align      8

                     loc_d7e8:
000000000000d7e8         mov        rdx, qword [rsp+0x108+var_108]              ; CODE XREF=check_arrival+580, check_arrival+1327
000000000000d7ec         mov        rdi, r15
000000000000d7ef         call       check_node_accept                           ; check_node_accept
000000000000d7f4         test       al, al
000000000000d7f6         je         loc_d81b

                     loc_d7f8:
000000000000d7f8         lea        r13, qword [r14*8]                          ; CODE XREF=check_arrival+1314

                     loc_d800:
000000000000d800         mov        rax, qword [r12+0x18]                       ; CODE XREF=check_arrival+779, check_arrival+794
000000000000d805         mov        rdi, qword [rsp+0x108+var_100]
000000000000d80a         mov        rsi, qword [rax+r13]
000000000000d80e         call       re_node_set_insert                          ; re_node_set_insert
000000000000d813         test       al, al
000000000000d815         je         loc_db58

                     loc_d81b:
000000000000d81b         add        rbx, 0x1                                    ; CODE XREF=check_arrival+502
000000000000d81f         cmp        rbx, qword [rbp+0x28]
000000000000d823         jge        loc_dbb0

                     loc_d829:
000000000000d829         mov        rax, qword [rbp+0x30]                       ; CODE XREF=check_arrival+482
000000000000d82d         mov        rdi, qword [r12]
000000000000d831         mov        r14, qword [rax+rbx*8]
000000000000d835         mov        r13, r14
000000000000d838         shl        r13, 0x4
000000000000d83c         lea        rsi, qword [rdi+r13]
000000000000d840         test       byte [rsi+0xa], 0x10
000000000000d844         je         loc_d7e8

000000000000d846         mov        r8, qword [rsp+0x108+var_108]
000000000000d84a         mov        rsi, qword [rsp+0x108+var_E0]
000000000000d84f         mov        rcx, r15
000000000000d852         mov        rdx, r14
000000000000d855         call       check_node_accept_bytes.isra.31             ; check_node_accept_bytes.isra.31
000000000000d85a         cmp        eax, 0x1
000000000000d85d         jle        loc_db20

000000000000d863         cdqe
000000000000d865         add        rax, qword [rsp+0x108+var_108]
000000000000d869         mov        rdx, qword [r12+0x18]
000000000000d86e         lea        r13, qword [r14*8]
000000000000d876         mov        rdx, qword [rdx+r14*8]
000000000000d87a         mov        rcx, rax
000000000000d87d         mov        qword [rsp+0x108+var_D0], rax
000000000000d882         lea        r14, qword [rax*8]
000000000000d88a         mov        rax, qword [r15+0xb8]
000000000000d891         mov        rsi, qword [rax+rcx*8]
000000000000d895         mov        qword [rsp+0x108+var_50], 0x0
000000000000d8a1         test       rsi, rsi
000000000000d8a4         je         loc_d8c9

000000000000d8a6         mov        rdi, qword [rsp+0x108+var_F0]
000000000000d8ab         add        rsi, 0x8
000000000000d8af         mov        qword [rsp+0x108+var_B8], rdx
000000000000d8b4         call       re_node_set_merge                           ; re_node_set_merge
000000000000d8b9         test       eax, eax
000000000000d8bb         mov        dword [rsp+0x108+var_7C], eax
000000000000d8c2         mov        rdx, qword [rsp+0x108+var_B8]
000000000000d8c7         jne        loc_d920

                     loc_d8c9:
000000000000d8c9         mov        rdi, qword [rsp+0x108+var_F0]               ; CODE XREF=check_arrival+676
000000000000d8ce         mov        rsi, rdx
000000000000d8d1         call       re_node_set_insert                          ; re_node_set_insert
000000000000d8d6         test       al, al
000000000000d8d8         je         loc_db58

000000000000d8de         add        r14, qword [r15+0xb8]
000000000000d8e5         mov        rdx, qword [rsp+0x108+var_F0]
000000000000d8ea         mov        rsi, r12
000000000000d8ed         mov        rdi, qword [rsp+0x108+var_B0]
000000000000d8f2         call       re_acquire_state                            ; re_acquire_state
000000000000d8f7         mov        rdx, qword [rsp+0x108+var_D0]
000000000000d8fc         mov        qword [r14], rax
000000000000d8ff         mov        rax, qword [r15+0xb8]
000000000000d906         cmp        qword [rax+rdx*8], 0x0
000000000000d90b         jne        loc_d800

000000000000d911         mov        edx, dword [rsp+0x108+var_7C]
000000000000d918         test       edx, edx
000000000000d91a         je         loc_d800

                     loc_d920:
000000000000d920         mov        rdi, qword [rsp+0x108+var_48]               ; argument "__ptr" for method j_free, CODE XREF=check_arrival+711
000000000000d928         call       j_free                                      ; free
000000000000d92d         mov        eax, dword [rsp+0x108+var_7C]
000000000000d934         test       eax, eax
000000000000d936         mov        dword [rsp+0x108+var_80], eax
000000000000d93d         jne        loc_db70

000000000000d943         nop        dword [rax+rax]

                     loc_d948:
000000000000d948         mov        rax, qword [rsp+0x108+var_108]              ; CODE XREF=check_arrival+412, check_arrival+1480
000000000000d94c         cmp        qword [rsp+0x108+var_70], 0x0
000000000000d955         lea        rbx, qword [rax+1]
000000000000d959         mov        r12, rbx
000000000000d95c         je         loc_d9b4

000000000000d95e         mov        ecx, dword [rsp+0x108+arg_0]
000000000000d965         mov        rdx, qword [rsp+0x108+var_C0]
000000000000d96a         mov        rsi, qword [rsp+0x108+var_100]
000000000000d96f         mov        rdi, qword [rsp+0x108+var_D8]
000000000000d974         call       check_arrival_expand_ecl                    ; check_arrival_expand_ecl
000000000000d979         test       eax, eax
000000000000d97b         mov        dword [rsp+0x108+var_80], eax
000000000000d982         jne        loc_db70

000000000000d988         mov        r8d, dword [rsp+0x108+arg_0]
000000000000d990         mov        rcx, qword [rsp+0x108+var_C0]
000000000000d995         mov        rdx, rbx
000000000000d998         mov        rsi, qword [rsp+0x108+var_100]
000000000000d99d         mov        rdi, r15
000000000000d9a0         call       expand_bkref_cache                          ; expand_bkref_cache
000000000000d9a5         test       eax, eax
000000000000d9a7         mov        dword [rsp+0x108+var_80], eax
000000000000d9ae         jne        loc_db70

                     loc_d9b4:
000000000000d9b4         mov        edx, dword [r15+0xa0]                       ; CODE XREF=check_arrival+860, check_arrival+1356
000000000000d9bb         mov        rsi, qword [rsp+0x108+var_108]
000000000000d9bf         mov        rdi, r15
000000000000d9c2         call       re_string_context_at                        ; re_string_context_at
000000000000d9c7         mov        rdx, qword [rsp+0x108+var_100]
000000000000d9cc         mov        rsi, qword [rsp+0x108+var_D8]
000000000000d9d1         lea        rdi, qword [rsp+0x108+var_80]
000000000000d9d9         mov        ecx, eax
000000000000d9db         call       re_acquire_state_context                    ; re_acquire_state_context
000000000000d9e0         test       rax, rax
000000000000d9e3         mov        rbp, rax
000000000000d9e6         je         loc_dbd0

000000000000d9ec         mov        rax, qword [r15+0xb8]
000000000000d9f3         mov        rdx, qword [rsp+0x108+var_F8]
000000000000d9f8         mov        qword [rsp+0x108+var_E8], 0x0
000000000000da01         mov        qword [rax+rdx], rbp

                     loc_da05:
000000000000da05         cmp        qword [rsp+0x108+var_C8], rbx               ; CODE XREF=check_arrival+1525
000000000000da0a         jle        loc_da28

000000000000da0c         movsxd     rdx, dword [r15+0xe0]
000000000000da13         add        qword [rsp+0x108+var_F8], 0x8
000000000000da19         cmp        rdx, qword [rsp+0x108+var_E8]
000000000000da1e         mov        qword [rsp+0x108+var_108], rbx
000000000000da22         jge        loc_d75e

                     loc_da28:
000000000000da28         mov        rdi, qword [rsp+0x108+var_68]               ; argument "__ptr" for method j_free, CODE XREF=check_arrival+257, check_arrival+272, check_arrival+1034
000000000000da30         call       j_free                                      ; free
000000000000da35         mov        rax, qword [r15+0xb8]
000000000000da3c         mov        rbx, qword [rsp+0x108+var_C8]
000000000000da41         mov        rax, qword [rax+rbx*8]
000000000000da45         test       rax, rax
000000000000da48         je         loc_dd25

000000000000da4e         mov        rbx, qword [rsp+0x108+var_A8]
000000000000da53         mov        rdx, qword [rsp+0x108+var_90]
000000000000da58         lea        rsi, qword [rax+0x18]
000000000000da5c         mov        qword [rbx], r12
000000000000da5f         mov        rbx, qword [rsp+0x108+var_A0]
000000000000da64         mov        qword [r15+0xb8], rbx
000000000000da6b         mov        rbx, qword [rsp+0x108+var_98]
000000000000da70         mov        qword [r15+0x48], rbx
000000000000da74         mov        rdi, qword [rax+0x10]
000000000000da78         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000da7d         test       rax, rax
000000000000da80         sete       al
000000000000da83         movzx      eax, al
000000000000da86         jmp        loc_db84
000000000000da8b         align      16

                     loc_da90:
000000000000da90         lea        rsi, qword [rbp-1]                          ; CODE XREF=check_arrival+174
000000000000da94         mov        qword [r15+0x48], rbp
000000000000da98         mov        rdi, r15
000000000000da9b         call       re_string_context_at                        ; re_string_context_at
000000000000daa0         mov        r13d, eax

                     loc_daa3:
000000000000daa3         mov        edi, 0x8                                    ; argument "__size" for method j_malloc, CODE XREF=check_arrival+203
000000000000daa8         mov        qword [rsp+0x108+var_78], 0x1
000000000000dab4         mov        qword [rsp+0x108+var_70], 0x1
000000000000dac0         call       j_malloc                                    ; malloc
000000000000dac5         test       rax, rax
000000000000dac8         mov        qword [rsp+0x108+var_68], rax
000000000000dad0         je         loc_dd1b

000000000000dad6         mov        qword [rax], rbx
000000000000dad9         mov        ecx, dword [rsp+0x108+arg_0]
000000000000dae0         lea        rbx, qword [rsp+0x108+var_78]
000000000000dae8         mov        rdx, qword [rsp+0x108+var_C0]
000000000000daed         mov        rdi, qword [rsp+0x108+var_D8]
000000000000daf2         mov        r12, rbp
000000000000daf5         mov        rsi, rbx
000000000000daf8         mov        dword [rsp+0x108+var_80], 0x0
000000000000db03         call       check_arrival_expand_ecl                    ; check_arrival_expand_ecl
000000000000db08         test       eax, eax
000000000000db0a         mov        dword [rsp+0x108+var_80], eax
000000000000db11         je         loc_dc2d

000000000000db17         jmp        loc_db70
000000000000db19         align      32

                     loc_db20:
000000000000db20         test       eax, eax                                    ; CODE XREF=check_arrival+605
000000000000db22         jne        loc_d7f8

000000000000db28         mov        rsi, qword [r12]
000000000000db2c         add        rsi, r13
000000000000db2f         jmp        loc_d7e8
000000000000db34         align      8

                     loc_db38:
000000000000db38         test       rbp, rbp                                    ; CODE XREF=check_arrival+374
000000000000db3b         jne        loc_d7a2

000000000000db41         mov        rax, qword [rsp+0x108+var_108]
000000000000db45         lea        rbx, qword [rax+1]
000000000000db49         mov        r12, rbx
000000000000db4c         jmp        loc_d9b4
000000000000db51         align      8

                     loc_db58:
000000000000db58         mov        rdi, qword [rsp+0x108+var_48]               ; argument "__ptr" for method j_free, CODE XREF=check_arrival+533, check_arrival+728
000000000000db60         call       j_free                                      ; free
000000000000db65         mov        dword [rsp+0x108+var_80], 0xc

                     loc_db70:
000000000000db70         mov        rdi, qword [rsp+0x108+var_68]               ; argument "__ptr" for method j_free, CODE XREF=check_arrival+403, check_arrival+829, check_arrival+898, check_arrival+942, check_arrival+1303, check_arrival+1497, check_arrival+1628, check_arrival+1814
000000000000db78         call       j_free                                      ; free
000000000000db7d         mov        eax, dword [rsp+0x108+var_80]

                     loc_db84:
000000000000db84         mov        rbx, qword [rsp+0x108+var_40]               ; CODE XREF=check_arrival+1158, check_arrival+1565, check_arrival+1824, check_arrival+1863
000000000000db8c         xor        rbx, qword [fs:0x28]
000000000000db95         jne        loc_dd4c

000000000000db9b         add        rsp, 0xd8
000000000000dba2         pop        rbx
000000000000dba3         pop        rbp
000000000000dba4         pop        r12
000000000000dba6         pop        r13
000000000000dba8         pop        r14
000000000000dbaa         pop        r15
000000000000dbac         ret
                        ; endp
000000000000dbad         align      16

                     loc_dbb0:
000000000000dbb0         mov        rdi, qword [rsp+0x108+var_48]               ; CODE XREF=check_arrival+547

                     loc_dbb8:
000000000000dbb8         call       j_free                                      ; free, CODE XREF=check_arrival+1794
000000000000dbbd         mov        dword [rsp+0x108+var_80], 0x0
000000000000dbc8         jmp        loc_d948
000000000000dbcd         align      16

                     loc_dbd0:
000000000000dbd0         mov        eax, dword [rsp+0x108+var_80]               ; CODE XREF=check_arrival+998
000000000000dbd7         test       eax, eax
000000000000dbd9         jne        loc_db70

000000000000dbdb         mov        rax, qword [r15+0xb8]
000000000000dbe2         mov        rdx, qword [rsp+0x108+var_F8]
000000000000dbe7         add        qword [rsp+0x108+var_E8], 0x1
000000000000dbed         mov        qword [rax+rdx], 0x0
000000000000dbf5         jmp        loc_da05
000000000000dbfa         align      1024

                     loc_dc00:
000000000000dc00         lea        rbx, qword [rsp+0x108+var_78]               ; CODE XREF=check_arrival+222
000000000000dc08         lea        rsi, qword [rbp+8]
000000000000dc0c         mov        rdi, rbx
000000000000dc0f         call       re_node_set_init_copy                       ; re_node_set_init_copy
000000000000dc14         test       eax, eax
000000000000dc16         mov        dword [rsp+0x108+var_80], eax
000000000000dc1d         jne        loc_db84

000000000000dc23         test       byte [rbp+0x68], 0x40
000000000000dc27         je         loc_d6fc

                     loc_dc2d:
000000000000dc2d         cmp        qword [rsp+0x108+var_70], 0x0               ; CODE XREF=check_arrival+1297
000000000000dc36         je         loc_dc62

000000000000dc38         mov        r8d, dword [rsp+0x108+arg_0]
000000000000dc40         mov        rcx, qword [rsp+0x108+var_C0]
000000000000dc45         mov        rdx, r12
000000000000dc48         mov        rsi, rbx
000000000000dc4b         mov        rdi, r15
000000000000dc4e         call       expand_bkref_cache                          ; expand_bkref_cache
000000000000dc53         test       eax, eax
000000000000dc55         mov        dword [rsp+0x108+var_80], eax
000000000000dc5c         jne        loc_db70

                     loc_dc62:
000000000000dc62         mov        rsi, qword [rsp+0x108+var_D8]               ; CODE XREF=check_arrival+1590
000000000000dc67         lea        rdi, qword [rsp+0x108+var_80]
000000000000dc6f         mov        ecx, r13d
000000000000dc72         mov        rdx, rbx
000000000000dc75         call       re_acquire_state_context                    ; re_acquire_state_context
000000000000dc7a         test       rax, rax
000000000000dc7d         mov        rbp, rax
000000000000dc80         je         loc_dd07

                     loc_dc86:
000000000000dc86         mov        rax, qword [r15+0xb8]                       ; CODE XREF=check_arrival+1808
000000000000dc8d         mov        qword [rax+r12*8], rbp
000000000000dc91         jmp        loc_d6fc

                     loc_dc96:
000000000000dc96         lea        r12, qword [rax+1]                          ; CODE XREF=check_arrival+118
000000000000dc9a         movabs     rax, 0x7fffffffffffffff
000000000000dca4         sub        rax, r13
000000000000dca7         cmp        rax, r12
000000000000dcaa         jl         loc_dd1b

000000000000dcac         lea        r14, qword [r13+r12]
000000000000dcb1         movabs     rax, 0x1fffffffffffffff
000000000000dcbb         cmp        r14, rax
000000000000dcbe         ja         loc_dd1b

000000000000dcc0         mov        rax, qword [rsp+0x108+var_A8]
000000000000dcc5         lea        rsi, qword [r14*8]                          ; argument "__size" for method j_realloc
000000000000dccd         mov        rdi, qword [rax+0x10]                       ; argument "__ptr" for method j_realloc
000000000000dcd1         call       j_realloc                                   ; realloc
000000000000dcd6         test       rax, rax
000000000000dcd9         je         loc_dd1b

000000000000dcdb         mov        rcx, qword [rsp+0x108+var_A8]
000000000000dce0         lea        rdx, qword [r12*8]                          ; argument "__n" for method j_memset
000000000000dce8         lea        rdi, qword [rax+r13*8]                      ; argument "__s" for method j_memset
000000000000dcec         xor        esi, esi                                    ; argument "__c" for method j_memset
000000000000dcee         mov        qword [rcx+0x10], rax
000000000000dcf2         mov        qword [rcx+8], r14
000000000000dcf6         call       j_memset                                    ; memset
000000000000dcfb         jmp        loc_d67c

                     loc_dd00:
000000000000dd00         xor        edi, edi                                    ; CODE XREF=check_arrival+461
000000000000dd02         jmp        loc_dbb8

                     loc_dd07:
000000000000dd07         mov        esi, dword [rsp+0x108+var_80]               ; CODE XREF=check_arrival+1664
000000000000dd0e         test       esi, esi
000000000000dd10         je         loc_dc86

000000000000dd16         jmp        loc_db70

                     loc_dd1b:
000000000000dd1b         mov        eax, 0xc                                    ; CODE XREF=check_arrival+1232, check_arrival+1706, check_arrival+1726, check_arrival+1753
000000000000dd20         jmp        loc_db84

                     loc_dd25:
000000000000dd25         mov        rax, qword [rsp+0x108+var_A8]               ; CODE XREF=check_arrival+1096
000000000000dd2a         mov        qword [rax], r12
000000000000dd2d         mov        rax, qword [rsp+0x108+var_A0]
000000000000dd32         mov        qword [r15+0xb8], rax
000000000000dd39         mov        rax, qword [rsp+0x108+var_98]
000000000000dd3e         mov        qword [r15+0x48], rax
000000000000dd42         mov        eax, 0x1
000000000000dd47         jmp        loc_db84

                     loc_dd4c:
000000000000dd4c         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=check_arrival+1429
                        ; endp
000000000000dd51         align      32                                          ; End of unwind block (FDE at 0x194f0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_28: int8_t, -40
        ;    var_38: int64_t, -56
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int8_t, -112
        ;    var_78: int64_t, -120
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_C9: int8_t, -201
        ;    var_D1: int8_t, -209
        ;    var_D8: int64_t, -216


                     set_regs:
000000000000dd60         push       rbp                                         ; Begin of unwind block (FDE at 0x19540), CODE XREF=re_search_internal+4945
000000000000dd61         mov        rbp, rsp
000000000000dd64         push       r15
000000000000dd66         push       r14
000000000000dd68         push       r13
000000000000dd6a         push       r12
000000000000dd6c         mov        r13, rcx
000000000000dd6f         push       rbx
000000000000dd70         mov        r12, rsi
000000000000dd73         sub        rsp, 0xb8
000000000000dd7a         mov        qword [rbp+var_98], rdx
000000000000dd81         mov        qword [rbp+var_50], 0x0
000000000000dd89         mov        rax, qword [fs:0x28]
000000000000dd92         mov        qword [rbp+var_38], rax
000000000000dd96         xor        eax, eax
000000000000dd98         mov        rax, qword [rdi]
000000000000dd9b         test       r8b, r8b
000000000000dd9e         mov        qword [rbp+var_48], 0x2
000000000000dda6         mov        qword [rbp+var_40], 0x0
000000000000ddae         mov        qword [rbp+var_90], rax
000000000000ddb5         je         loc_e55d

000000000000ddbb         mov        edi, 0x60                                   ; argument "__size" for method j_malloc
000000000000ddc0         call       j_malloc                                    ; malloc
000000000000ddc5         lea        rcx, qword [rbp+var_50]
000000000000ddc9         test       rax, rax
000000000000ddcc         mov        qword [rbp+var_40], rax
000000000000ddd0         mov        qword [rbp+var_88], rcx
000000000000ddd7         je         loc_e4fc

                     loc_dddd:
000000000000dddd         mov        rax, qword [rbp+var_90]                     ; CODE XREF=set_regs+2056
000000000000dde4         pxor       xmm0, xmm0
000000000000dde8         mov        qword [rbp+var_60], 0x0
000000000000ddf0         mov        rbx, qword [rax+0x90]
000000000000ddf7         mov        rax, qword [rbp+var_98]
000000000000ddfe         movaps     xmmword [rbp+var_70], xmm0
000000000000de02         shl        rax, 0x4
000000000000de06         cmp        rax, 0xfbf
000000000000de0c         mov        qword [rbp+var_B8], rax
000000000000de13         ja         loc_e506

000000000000de19         add        rax, 0x10
000000000000de1d         mov        byte [rbp+var_C9], 0x0
000000000000de24         sub        rsp, rax
000000000000de27         lea        rax, qword [rsp+0xe0+var_D1]
000000000000de2c         and        rax, 0xfffffffffffffff0
000000000000de30         mov        qword [rbp+var_C0], rax

                     loc_de37:
000000000000de37         mov        rdx, qword [rbp+var_B8]                     ; argument "__n" for method j_memcpy, CODE XREF=set_regs+1987
000000000000de3e         mov        rdi, qword [rbp+var_C0]                     ; argument "__dest" for method j_memcpy
000000000000de45         mov        rsi, r13                                    ; argument "__src" for method j_memcpy
000000000000de48         call       j_memcpy                                    ; memcpy
000000000000de4d         lea        rax, qword [rbp+var_70]
000000000000de51         mov        rcx, qword [r13]
000000000000de55         mov        qword [rbp+var_A8], rax
000000000000de5c         add        rax, 0x10
000000000000de60         mov        qword [rbp+var_78], rcx
000000000000de64         mov        qword [rbp+var_C8], rax

                     loc_de6b:
000000000000de6b         lea        rax, qword [rbp+var_78]                     ; CODE XREF=set_regs+1554
000000000000de6f         mov        qword [rbp+var_B0], rax
000000000000de76         jmp        loc_df59
000000000000de7b         align      128

                     loc_de80:
000000000000de80         cmp        esi, 0x9                                    ; CODE XREF=set_regs+548
000000000000de83         je         loc_e070

                     loc_de89:
000000000000de89         cmp        rax, rcx                                    ; CODE XREF=set_regs+568, set_regs+596, set_regs+798, set_regs+854, set_regs+1770, set_regs+1901
000000000000de8c         jne        loc_de9c

000000000000de8e         cmp        qword [r12+0xb0], rbx
000000000000de96         je         loc_e270

                     loc_de9c:
000000000000de9c         mov        r14, qword [r12+0x98]                       ; CODE XREF=set_regs+300, set_regs+1477
000000000000dea4         mov        rdi, qword [r14]
000000000000dea7         lea        rsi, qword [rdi+r9]
000000000000deab         movzx      eax, byte [rsi+8]
000000000000deaf         test       al, 0x8
000000000000deb1         jne        loc_dfc0

000000000000deb7         test       byte [rsi+0xa], 0x10
000000000000debb         jne        loc_e0c0

000000000000dec1         cmp        al, 0x4
000000000000dec3         je         loc_e100

000000000000dec9         mov        rcx, qword [rbp+var_78]

                     loc_decd:
000000000000decd         mov        rdx, rcx                                    ; CODE XREF=set_regs+922, set_regs+1701
000000000000ded0         mov        rdi, r12
000000000000ded3         mov        qword [rbp+var_A0], rcx
000000000000deda         call       check_node_accept                           ; check_node_accept
000000000000dedf         test       al, al
000000000000dee1         mov        rcx, qword [rbp+var_A0]
000000000000dee8         je         loc_e338

000000000000deee         mov        rax, qword [r14+0x18]
000000000000def2         lea        rdx, qword [rcx+1]
000000000000def6         mov        rbx, qword [rax+r15*8]

                     loc_defa:
000000000000defa         cmp        qword [rbp+var_88], 0x0                     ; CODE XREF=set_regs+1073
000000000000df02         mov        qword [rbp+var_78], rdx
000000000000df06         je         loc_df44

000000000000df08         cmp        rdx, qword [r12+0xa8]
000000000000df10         jg         loc_e346

000000000000df16         mov        rax, qword [r12+0xb8]
000000000000df1e         mov        rax, qword [rax+rdx*8]
000000000000df22         test       rax, rax
000000000000df25         je         loc_e346

000000000000df2b         mov        rdi, qword [rax+0x10]
000000000000df2f         lea        rsi, qword [rax+0x18]
000000000000df33         mov        rdx, rbx
000000000000df36         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000df3b         test       rax, rax
000000000000df3e         je         loc_e346

                     loc_df44:
000000000000df44         mov        qword [rbp+var_68], 0x0                     ; CODE XREF=set_regs+422

                     loc_df4c:
000000000000df4c         test       rbx, rbx                                    ; CODE XREF=set_regs+772, set_regs+1136, set_regs+1244, set_regs+1571, set_regs+1675
000000000000df4f         js         loc_e32a

000000000000df55         mov        rcx, qword [rbp+var_78]

                     loc_df59:
000000000000df59         mov        rax, qword [r13+8]                          ; CODE XREF=set_regs+278
000000000000df5d         cmp        rax, rcx
000000000000df60         jl         loc_e450

000000000000df66         mov        rdi, qword [rbp+var_90]
000000000000df6d         mov        r9, rbx
000000000000df70         mov        r15, rbx
000000000000df73         shl        r9, 0x4
000000000000df77         mov        rdx, qword [rdi]
000000000000df7a         add        rdx, r9
000000000000df7d         movzx      esi, byte [rdx+8]
000000000000df81         cmp        esi, 0x8
000000000000df84         jne        loc_de80

000000000000df8a         mov        rdx, qword [rdx]
000000000000df8d         add        rdx, 0x1
000000000000df91         cmp        qword [rbp+var_98], rdx
000000000000df98         jle        loc_de89

000000000000df9e         shl        rdx, 0x4
000000000000dfa2         add        rdx, r13
000000000000dfa5         mov        qword [rdx+8], 0xffffffffffffffff
000000000000dfad         mov        qword [rdx], rcx
000000000000dfb0         mov        rax, qword [r13+8]
000000000000dfb4         jmp        loc_de89
000000000000dfb9         align      64

                     loc_dfc0:
000000000000dfc0         mov        rax, qword [r12+0xb8]                       ; CODE XREF=set_regs+337
000000000000dfc8         mov        rdx, qword [rbp+var_78]
000000000000dfcc         mov        rsi, rbx
000000000000dfcf         mov        rdi, qword [rbp+var_A8]
000000000000dfd6         mov        r9, qword [rax+rdx*8]
000000000000dfda         mov        rax, qword [r14+0x28]
000000000000dfde         lea        rdx, qword [rbx+rbx*2]
000000000000dfe2         mov        qword [rbp+var_A0], r9
000000000000dfe9         lea        r15, qword [rax+rdx*8]
000000000000dfed         call       re_node_set_insert                          ; re_node_set_insert
000000000000dff2         test       al, al
000000000000dff4         mov        r9, qword [rbp+var_A0]
000000000000dffb         je         loc_e4d8

000000000000e001         mov        r10, qword [r15+8]
000000000000e005         test       r10, r10
000000000000e008         jle        loc_e338

000000000000e00e         mov        r15, qword [r15+0x10]
000000000000e012         mov        r11, qword [r9+0x10]
000000000000e016         lea        r14, qword [r9+0x18]
000000000000e01a         mov        rbx, 0xffffffffffffffff
000000000000e021         xor        r9d, r9d
000000000000e024         mov        qword [rbp+var_A0], r12
000000000000e02b         nop        dword [rax+rax]

                     loc_e030:
000000000000e030         mov        r12, qword [r15+r9*8]                       ; CODE XREF=set_regs+763
000000000000e034         mov        rsi, r14
000000000000e037         mov        rdi, r11
000000000000e03a         mov        rdx, r12
000000000000e03d         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000e042         test       rax, rax
000000000000e045         je         loc_e054

000000000000e047         cmp        rbx, 0xffffffffffffffff
000000000000e04b         jne        loc_e1a0

000000000000e051         mov        rbx, r12

                     loc_e054:
000000000000e054         add        r9, 0x1                                     ; CODE XREF=set_regs+741
000000000000e058         cmp        r10, r9
000000000000e05b         jne        loc_e030

000000000000e05d         mov        r12, qword [rbp+var_A0]
000000000000e064         jmp        loc_df4c
000000000000e069         align      16

                     loc_e070:
000000000000e070         mov        rdi, qword [rdx]                            ; CODE XREF=set_regs+291
000000000000e073         lea        rsi, qword [rdi+1]
000000000000e077         cmp        qword [rbp+var_98], rsi
000000000000e07e         jle        loc_de89

000000000000e084         shl        rsi, 0x4
000000000000e088         lea        rax, qword [r13+rsi]
000000000000e08d         cmp        qword [rax], rcx
000000000000e090         jl         loc_e410

000000000000e096         test       byte [rdx+0xa], 0x8
000000000000e09a         je         loc_e0ae

000000000000e09c         mov        rdi, qword [rbp+var_C0]
000000000000e0a3         cmp        qword [rdi+rsi], 0xffffffffffffffff
000000000000e0a8         jne        loc_e49b

                     loc_e0ae:
000000000000e0ae         mov        qword [rax+8], rcx                          ; CODE XREF=set_regs+826
000000000000e0b2         mov        rax, qword [r13+8]
000000000000e0b6         jmp        loc_de89
000000000000e0bb         align      64

                     loc_e0c0:
000000000000e0c0         mov        r8, qword [rbp+var_78]                      ; CODE XREF=set_regs+347
000000000000e0c4         lea        rsi, qword [r14+0xd8]
000000000000e0cb         mov        rcx, r12
000000000000e0ce         mov        rdx, rbx
000000000000e0d1         mov        qword [rbp+var_A0], r9
000000000000e0d8         call       check_node_accept_bytes.isra.31             ; check_node_accept_bytes.isra.31
000000000000e0dd         movsxd     rcx, eax
000000000000e0e0         test       rcx, rcx
000000000000e0e3         jne        loc_e2e1

000000000000e0e9         mov        r9, qword [rbp+var_A0]
000000000000e0f0         mov        rsi, qword [r14]
000000000000e0f3         mov        rcx, qword [rbp+var_78]
000000000000e0f7         add        rsi, r9
000000000000e0fa         jmp        loc_decd
000000000000e0ff         align      256

                     loc_e100:
000000000000e100         mov        rax, qword [rsi]                            ; CODE XREF=set_regs+355
000000000000e103         add        rax, 0x1
000000000000e107         shl        rax, 0x4
000000000000e10b         add        rax, r13
000000000000e10e         mov        rdx, qword [rax+8]
000000000000e112         mov        rdi, qword [rax]
000000000000e115         mov        rcx, rdx
000000000000e118         sub        rcx, rdi
000000000000e11b         cmp        qword [rbp+var_88], 0x0
000000000000e123         je         loc_e2d8

000000000000e129         cmp        rdi, 0xffffffffffffffff
000000000000e12d         je         loc_e346

000000000000e133         cmp        rdx, 0xffffffffffffffff
000000000000e137         je         loc_e346

000000000000e13d         test       rcx, rcx
000000000000e140         je         loc_e390

000000000000e146         mov        r15, qword [rbp+var_78]
000000000000e14a         mov        rdx, qword [r12+0x30]
000000000000e14f         mov        rax, qword [r12+8]
000000000000e154         sub        rdx, r15
000000000000e157         cmp        rcx, rdx
000000000000e15a         jg         loc_e346

000000000000e160         lea        rsi, qword [rax+r15]                        ; argument "__s2" for method j_memcmp
000000000000e164         add        rdi, rax                                    ; argument "__s1" for method j_memcmp
000000000000e167         mov        rdx, rcx                                    ; argument "__n" for method j_memcmp
000000000000e16a         mov        qword [rbp+var_A0], rcx
000000000000e171         call       j_memcmp                                    ; memcmp
000000000000e176         test       eax, eax
000000000000e178         mov        rcx, qword [rbp+var_A0]
000000000000e17f         jne        loc_e346

                     loc_e185:
000000000000e185         mov        rax, qword [r14+0x18]                       ; CODE XREF=set_regs+1413
000000000000e189         lea        rdx, qword [r15+rcx]
000000000000e18d         mov        rbx, qword [rax+rbx*8]
000000000000e191         jmp        loc_defa
000000000000e196         align      32

                     loc_e1a0:
000000000000e1a0         mov        rsi, qword [rbp+var_C8]                     ; CODE XREF=set_regs+747
000000000000e1a7         mov        rdi, qword [rbp+var_68]
000000000000e1ab         mov        rdx, rbx
000000000000e1ae         mov        r14, r12
000000000000e1b1         mov        r12, qword [rbp+var_A0]
000000000000e1b8         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000e1bd         test       rax, rax
000000000000e1c0         jne        loc_e380

000000000000e1c6         mov        rcx, qword [rbp+var_88]
000000000000e1cd         test       rcx, rcx
000000000000e1d0         je         loc_df4c

000000000000e1d6         mov        r15, qword [rcx]
000000000000e1d9         mov        rdx, qword [rbp+var_78]
000000000000e1dd         lea        rax, qword [r15+1]
000000000000e1e1         cmp        rax, qword [rcx+8]
000000000000e1e5         mov        qword [rcx], rax
000000000000e1e8         je         loc_e56d

000000000000e1ee         mov        rax, qword [rcx+0x10]

                     loc_e1f2:
000000000000e1f2         lea        r15, qword [r15+r15*2]                      ; CODE XREF=set_regs+2119
000000000000e1f6         shl        r15, 0x4
000000000000e1fa         add        r15, rax
000000000000e1fd         mov        qword [r15+8], r14
000000000000e201         mov        r14, qword [rbp+var_B8]
000000000000e208         mov        qword [r15], rdx
000000000000e20b         mov        rdi, r14                                    ; argument "__size" for method j_malloc
000000000000e20e         call       j_malloc                                    ; malloc
000000000000e213         test       rax, rax
000000000000e216         mov        qword [r15+0x10], rax
000000000000e21a         je         loc_e242

000000000000e21c         mov        rdx, r14                                    ; argument "__n" for method j_memcpy
000000000000e21f         mov        rsi, r13                                    ; argument "__src" for method j_memcpy
000000000000e222         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
000000000000e225         call       j_memcpy                                    ; memcpy
000000000000e22a         mov        rsi, qword [rbp+var_A8]
000000000000e231         lea        rdi, qword [r15+0x18]
000000000000e235         call       re_node_set_init_copy                       ; re_node_set_init_copy
000000000000e23a         test       eax, eax
000000000000e23c         je         loc_df4c

                     loc_e242:
000000000000e242         mov        rdi, qword [rbp+var_60]                     ; argument "__ptr" for method j_free, CODE XREF=set_regs+1210
000000000000e246         call       j_free                                      ; free
000000000000e24b         cmp        byte [rbp+var_C9], 0x0
000000000000e252         jne        loc_e5eb

                     loc_e258:
000000000000e258         mov        rdi, qword [rbp+var_88]                     ; CODE XREF=set_regs+1942, set_regs+2181
000000000000e25f         call       free_fail_stack_return.part.24              ; free_fail_stack_return.part.24
000000000000e264         mov        eax, 0xc
000000000000e269         jmp        loc_e479
000000000000e26e         align      16

                     loc_e270:
000000000000e270         cmp        qword [rbp+var_88], 0x0                     ; CODE XREF=set_regs+310
000000000000e278         je         loc_e5ac

000000000000e27e         mov        rcx, qword [rbp+var_98]
000000000000e285         test       rcx, rcx
000000000000e288         je         loc_e2aa

000000000000e28a         mov        rax, r13
000000000000e28d         xor        edx, edx
000000000000e28f         nop

                     loc_e290:
000000000000e290         cmp        qword [rax], 0x0                            ; CODE XREF=set_regs+1352
000000000000e294         js         loc_e29d

000000000000e296         cmp        qword [rax+8], 0xffffffffffffffff
000000000000e29b         je         loc_e2f0

                     loc_e29d:
000000000000e29d         add        rdx, 0x1                                    ; CODE XREF=set_regs+1332
000000000000e2a1         add        rax, 0x10
000000000000e2a5         cmp        rcx, rdx
000000000000e2a8         jne        loc_e290

                     loc_e2aa:
000000000000e2aa         mov        rdi, qword [rbp+var_60]                     ; argument "__ptr" for method j_free, CODE XREF=set_regs+1320
000000000000e2ae         call       j_free                                      ; free
000000000000e2b3         cmp        byte [rbp+var_C9], 0x0
000000000000e2ba         jne        loc_e634

                     loc_e2c0:
000000000000e2c0         mov        rdi, qword [rbp+var_88]                     ; CODE XREF=set_regs+2272
000000000000e2c7         call       free_fail_stack_return.part.24              ; free_fail_stack_return.part.24
000000000000e2cc         xor        eax, eax
000000000000e2ce         jmp        loc_e479
000000000000e2d3         align      8

                     loc_e2d8:
000000000000e2d8         test       rcx, rcx                                    ; CODE XREF=set_regs+963
000000000000e2db         je         loc_e390

                     loc_e2e1:
000000000000e2e1         mov        r15, qword [rbp+var_78]                     ; CODE XREF=set_regs+899
000000000000e2e5         jmp        loc_e185
000000000000e2ea         align      16

                     loc_e2f0:
000000000000e2f0         mov        rdi, qword [rbp+var_88]                     ; CODE XREF=set_regs+1339
000000000000e2f7         mov        r9, qword [rbp+var_A8]
000000000000e2fe         mov        r8, r13
000000000000e301         mov        rcx, qword [rbp+var_98]
000000000000e308         mov        rdx, qword [rbp+var_B0]
000000000000e30f         lea        rsi, qword [rdi+0x10]
000000000000e313         call       pop_fail_stack.isra.25                      ; pop_fail_stack.isra.25
000000000000e318         mov        r9, rax
000000000000e31b         mov        rbx, rax
000000000000e31e         mov        r15, rax
000000000000e321         shl        r9, 0x4
000000000000e325         jmp        loc_de9c

                     loc_e32a:
000000000000e32a         cmp        rbx, 0xfffffffffffffffe                     ; CODE XREF=set_regs+495
000000000000e32e         je         loc_e4d8

000000000000e334         nop        dword [rax]

                     loc_e338:
000000000000e338         cmp        qword [rbp+var_88], 0x0                     ; CODE XREF=set_regs+392, set_regs+680
000000000000e340         je         loc_e5fc

                     loc_e346:
000000000000e346         mov        rdi, qword [rbp+var_88]                     ; CODE XREF=set_regs+432, set_regs+453, set_regs+478, set_regs+973, set_regs+983, set_regs+1018, set_regs+1055
000000000000e34d         mov        rcx, qword [rbp+var_98]
000000000000e354         lea        rdx, qword [rbp+var_78]
000000000000e358         mov        r9, qword [rbp+var_A8]
000000000000e35f         mov        r8, r13
000000000000e362         lea        rsi, qword [rdi+0x10]
000000000000e366         call       pop_fail_stack.isra.25                      ; pop_fail_stack.isra.25
000000000000e36b         mov        rcx, qword [rbp+var_78]
000000000000e36f         mov        rbx, rax
000000000000e372         jmp        loc_de6b
000000000000e377         align      128

                     loc_e380:
000000000000e380         mov        rbx, r14                                    ; CODE XREF=set_regs+1120
000000000000e383         jmp        loc_df4c
000000000000e388         align      16

                     loc_e390:
000000000000e390         mov        rdi, qword [rbp+var_A8]                     ; CODE XREF=set_regs+992, set_regs+1403
000000000000e397         mov        rsi, rbx
000000000000e39a         mov        qword [rbp+var_A0], r9
000000000000e3a1         call       re_node_set_insert                          ; re_node_set_insert
000000000000e3a6         test       al, al
000000000000e3a8         je         loc_e4d8

000000000000e3ae         mov        rdx, qword [r14+0x28]
000000000000e3b2         lea        rax, qword [rbx+rbx*2]
000000000000e3b6         mov        rcx, qword [rbp+var_78]
000000000000e3ba         lea        rax, qword [rdx+rax*8]
000000000000e3be         mov        qword [rbp+var_D8], rcx
000000000000e3c5         mov        rax, qword [rax+0x10]
000000000000e3c9         mov        rbx, qword [rax]
000000000000e3cc         mov        rax, qword [r12+0xb8]
000000000000e3d4         mov        rax, qword [rax+rcx*8]
000000000000e3d8         mov        rdx, rbx
000000000000e3db         mov        rdi, qword [rax+0x10]
000000000000e3df         lea        rsi, qword [rax+0x18]
000000000000e3e3         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000e3e8         test       rax, rax
000000000000e3eb         jne        loc_df4c

000000000000e3f1         mov        r9, qword [rbp+var_A0]
000000000000e3f8         mov        rsi, qword [r14]
000000000000e3fb         mov        rcx, qword [rbp+var_D8]
000000000000e402         add        rsi, r9
000000000000e405         jmp        loc_decd
000000000000e40a         align      16

                     loc_e410:
000000000000e410         mov        rdx, qword [rbp+var_B8]                     ; argument "__n" for method j_memcpy, CODE XREF=set_regs+816
000000000000e417         mov        rdi, qword [rbp+var_C0]                     ; argument "__dest" for method j_memcpy
000000000000e41e         mov        rsi, r13                                    ; argument "__src" for method j_memcpy
000000000000e421         mov        qword [rax+8], rcx
000000000000e425         mov        qword [rbp+var_D8], r9
000000000000e42c         mov        qword [rbp+var_A0], rcx
000000000000e433         call       j_memcpy                                    ; memcpy
000000000000e438         mov        rax, qword [r13+8]
000000000000e43c         mov        rcx, qword [rbp+var_A0]
000000000000e443         mov        r9, qword [rbp+var_D8]
000000000000e44a         jmp        loc_de89
000000000000e44f         align      16

                     loc_e450:
000000000000e450         mov        rdi, qword [rbp+var_60]                     ; argument "__ptr" for method j_free, CODE XREF=set_regs+512
000000000000e454         call       j_free                                      ; free
000000000000e459         cmp        byte [rbp+var_C9], 0x0
000000000000e460         jne        loc_e53c

000000000000e466         mov        rdi, qword [rbp+var_88]
000000000000e46d         test       rdi, rdi
000000000000e470         je         loc_e477

                     loc_e472:
000000000000e472         call       free_fail_stack_return.part.24              ; free_fail_stack_return.part.24, CODE XREF=set_regs+2034

                     loc_e477:
000000000000e477         xor        eax, eax                                    ; CODE XREF=set_regs+1808, set_regs+2040, set_regs+2140

                     loc_e479:
000000000000e479         mov        rbx, qword [rbp+var_38]                     ; CODE XREF=set_regs+1289, set_regs+1390, set_regs+1953, set_regs+2160, set_regs+2225, set_regs+2255
000000000000e47d         xor        rbx, qword [fs:0x28]
000000000000e486         jne        loc_e645

000000000000e48c         lea        rsp, qword [rbp+var_28]
000000000000e490         pop        rbx
000000000000e491         pop        r12
000000000000e493         pop        r13
000000000000e495         pop        r14
000000000000e497         pop        r15
000000000000e499         pop        rbp
000000000000e49a         ret
                        ; endp

                     loc_e49b:
000000000000e49b         mov        rdx, qword [rbp+var_B8]                     ; argument "__n" for method j_memcpy, CODE XREF=set_regs+840
000000000000e4a2         mov        rsi, rdi                                    ; argument "__src" for method j_memcpy
000000000000e4a5         mov        rdi, r13                                    ; argument "__dest" for method j_memcpy
000000000000e4a8         mov        qword [rbp+var_D8], rcx
000000000000e4af         mov        qword [rbp+var_A0], r9
000000000000e4b6         call       j_memcpy                                    ; memcpy
000000000000e4bb         mov        rax, qword [r13+8]
000000000000e4bf         mov        r9, qword [rbp+var_A0]
000000000000e4c6         mov        rcx, qword [rbp+var_D8]
000000000000e4cd         jmp        loc_de89
000000000000e4d2         align      8

                     loc_e4d8:
000000000000e4d8         mov        rdi, qword [rbp+var_60]                     ; argument "__ptr" for method j_free, CODE XREF=set_regs+667, set_regs+1486, set_regs+1608
000000000000e4dc         call       j_free                                      ; free
000000000000e4e1         cmp        byte [rbp+var_C9], 0x0
000000000000e4e8         jne        loc_e5eb

                     loc_e4ee:
000000000000e4ee         cmp        qword [rbp+var_88], 0x0                     ; CODE XREF=set_regs+2199
000000000000e4f6         jne        loc_e258

                     loc_e4fc:
000000000000e4fc         mov        eax, 0xc                                    ; CODE XREF=set_regs+119, set_regs+2003, set_regs+2010
000000000000e501         jmp        loc_e479

                     loc_e506:
000000000000e506         mov        rdi, qword [rbp+var_B8]                     ; argument "__size" for method j_malloc, CODE XREF=set_regs+179
000000000000e50d         call       j_malloc                                    ; malloc
000000000000e512         test       rax, rax
000000000000e515         mov        qword [rbp+var_C0], rax
000000000000e51c         mov        byte [rbp+var_C9], 0x1
000000000000e523         jne        loc_de37

000000000000e529         mov        rdi, qword [rbp+var_88]
000000000000e530         test       rdi, rdi
000000000000e533         je         loc_e4fc

000000000000e535         call       free_fail_stack_return.part.24              ; free_fail_stack_return.part.24
000000000000e53a         jmp        loc_e4fc

                     loc_e53c:
000000000000e53c         mov        rdi, qword [rbp+var_C0]                     ; argument "__ptr" for method j_free, CODE XREF=set_regs+1792
000000000000e543         call       j_free                                      ; free
000000000000e548         mov        rdi, qword [rbp+var_88]
000000000000e54f         test       rdi, rdi
000000000000e552         jne        loc_e472

000000000000e558         jmp        loc_e477

                     loc_e55d:
000000000000e55d         mov        qword [rbp+var_88], 0x0                     ; CODE XREF=set_regs+85
000000000000e568         jmp        loc_dddd

                     loc_e56d:
000000000000e56d         lea        rsi, qword [rax+rax*2]                      ; CODE XREF=set_regs+1160
000000000000e571         mov        rax, qword [rbp+var_88]
000000000000e578         mov        qword [rbp+var_A0], rdx
000000000000e57f         shl        rsi, 0x5                                    ; argument "__size" for method j_realloc
000000000000e583         mov        rdi, qword [rax+0x10]                       ; argument "__ptr" for method j_realloc
000000000000e587         call       j_realloc                                   ; realloc
000000000000e58c         test       rax, rax
000000000000e58f         je         loc_e5d5

000000000000e591         mov        rcx, qword [rbp+var_88]
000000000000e598         mov        rdx, qword [rbp+var_A0]
000000000000e59f         shl        qword [rcx+8], 0x1
000000000000e5a3         mov        qword [rcx+0x10], rax
000000000000e5a7         jmp        loc_e1f2

                     loc_e5ac:
000000000000e5ac         mov        rdi, qword [rbp+var_60]                     ; argument "__ptr" for method j_free, CODE XREF=set_regs+1304
000000000000e5b0         call       j_free                                      ; free
000000000000e5b5         cmp        byte [rbp+var_C9], 0x0
000000000000e5bc         je         loc_e477

000000000000e5c2         mov        rdi, qword [rbp+var_C0]                     ; argument "__ptr" for method j_free
000000000000e5c9         call       j_free                                      ; free
000000000000e5ce         xor        eax, eax
000000000000e5d0         jmp        loc_e479

                     loc_e5d5:
000000000000e5d5         mov        rdi, qword [rbp+var_60]                     ; argument "__ptr" for method j_free, CODE XREF=set_regs+2095
000000000000e5d9         call       j_free                                      ; free
000000000000e5de         cmp        byte [rbp+var_C9], 0x0
000000000000e5e5         je         loc_e258

                     loc_e5eb:
000000000000e5eb         mov        rdi, qword [rbp+var_C0]                     ; argument "__ptr" for method j_free, CODE XREF=set_regs+1266, set_regs+1928
000000000000e5f2         call       j_free                                      ; free
000000000000e5f7         jmp        loc_e4ee

                     loc_e5fc:
000000000000e5fc         mov        rdi, qword [rbp+var_60]                     ; argument "__ptr" for method j_free, CODE XREF=set_regs+1504
000000000000e600         call       j_free                                      ; free
000000000000e605         cmp        byte [rbp+var_C9], 0x0
000000000000e60c         mov        eax, 0x1
000000000000e611         je         loc_e479

000000000000e617         mov        rdi, qword [rbp+var_C0]                     ; argument "__ptr" for method j_free
000000000000e61e         mov        dword [rbp+var_88], eax
000000000000e624         call       j_free                                      ; free
000000000000e629         mov        eax, dword [rbp+var_88]
000000000000e62f         jmp        loc_e479

                     loc_e634:
000000000000e634         mov        rdi, qword [rbp+var_C0]                     ; argument "__ptr" for method j_free, CODE XREF=set_regs+1370
000000000000e63b         call       j_free                                      ; free
000000000000e640         jmp        loc_e2c0

                     loc_e645:
000000000000e645         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=set_regs+1830
                        ; endp
000000000000e64a         align      16                                          ; End of unwind block (FDE at 0x19540)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64


                     get_subexp_sub.isra.32:
000000000000e650         push       r15                                         ; Begin of unwind block (FDE at 0x19570), CODE XREF=transit_state_bkref.isra.34+710, transit_state_bkref.isra.34+1789
000000000000e652         push       r14
000000000000e654         mov        r14, rcx
000000000000e657         push       r13
000000000000e659         push       r12
000000000000e65b         mov        r13, rsi
000000000000e65e         push       rbp
000000000000e65f         push       rbx
000000000000e660         lea        rsi, qword [rdx+0x10]
000000000000e664         mov        rbp, rdx
000000000000e667         mov        r9, r8
000000000000e66a         mov        r12, r8
000000000000e66d         sub        rsp, 0x20
000000000000e671         mov        rcx, qword [rdx+8]
000000000000e675         mov        r8, r14
000000000000e678         push       0x8
000000000000e67a         mov        rdx, qword [rdx]
000000000000e67d         mov        rbx, rdi
000000000000e680         call       check_arrival                               ; check_arrival
000000000000e685         test       eax, eax
000000000000e687         pop        rdx
000000000000e688         pop        rcx
000000000000e689         je         loc_e6a0

                     loc_e68b:
000000000000e68b         add        rsp, 0x18                                   ; CODE XREF=get_subexp_sub.isra.32+401
000000000000e68f         pop        rbx
000000000000e690         pop        rbp
000000000000e691         pop        r12
000000000000e693         pop        r13
000000000000e695         pop        r14
000000000000e697         pop        r15
000000000000e699         ret
                        ; endp
000000000000e69a         align      32

                     loc_e6a0:
000000000000e6a0         mov        rax, qword [rbx+0xc8]                       ; CODE XREF=get_subexp_sub.isra.32+57
000000000000e6a7         mov        rdx, qword [rbx+0xd0]
000000000000e6ae         mov        r15, qword [rbp+8]
000000000000e6b2         mov        rcx, qword [r13]
000000000000e6b6         mov        rdi, qword [rbx+0xd8]
000000000000e6bd         cmp        rax, rdx
000000000000e6c0         mov        rsi, r15
000000000000e6c3         jge        loc_e760

                     loc_e6c9:
000000000000e6c9         lea        rdx, qword [rax+rax*4]                      ; CODE XREF=get_subexp_sub.isra.32+379
000000000000e6cd         shl        rdx, 0x3
000000000000e6d1         test       rax, rax
000000000000e6d4         jle        loc_e6e1

000000000000e6d6         lea        r8, qword [rdi+rdx-0x28]
000000000000e6db         cmp        r12, qword [r8+8]
000000000000e6df         je         loc_e750

                     loc_e6e1:
000000000000e6e1         add        rdi, rdx                                    ; CODE XREF=get_subexp_sub.isra.32+132, get_subexp_sub.isra.32+261
000000000000e6e4         xor        edx, edx
000000000000e6e6         cmp        r15, rcx
000000000000e6e9         sete       dl
000000000000e6ec         add        rax, 0x1
000000000000e6f0         mov        qword [rdi], r14
000000000000e6f3         neg        edx
000000000000e6f5         mov        qword [rdi+8], r12
000000000000e6f9         mov        qword [rdi+0x10], rcx
000000000000e6fd         mov        word [rdi+0x22], dx
000000000000e701         mov        qword [rdi+0x18], r15
000000000000e705         mov        qword [rbx+0xc8], rax
000000000000e70c         mov        byte [rdi+0x20], 0x0
000000000000e710         mov        rax, r15
000000000000e713         movsxd     rdx, dword [rbx+0xe0]
000000000000e71a         sub        rax, rcx
000000000000e71d         cmp        rdx, rax
000000000000e720         jge        loc_e72c

000000000000e722         sub        r15d, ecx
000000000000e725         mov        dword [rbx+0xe0], r15d

                     loc_e72c:
000000000000e72c         add        rsi, r12                                    ; CODE XREF=get_subexp_sub.isra.32+208
000000000000e72f         sub        rsi, qword [r13]
000000000000e733         add        rsp, 0x18
000000000000e737         mov        rdi, rbx
000000000000e73a         pop        rbx
000000000000e73b         pop        rbp
000000000000e73c         pop        r12
000000000000e73e         pop        r13
000000000000e740         pop        r14
000000000000e742         pop        r15
000000000000e744         jmp        clean_state_log_if_needed                   ; clean_state_log_if_needed
                        ; endp
000000000000e749         align      16

                     loc_e750:
000000000000e750         mov        byte [r8+0x20], 0x1                         ; CODE XREF=get_subexp_sub.isra.32+143
000000000000e755         jmp        loc_e6e1
000000000000e757         align      32

                     loc_e760:
000000000000e760         lea        rsi, qword [rdx+rdx*4]                      ; CODE XREF=get_subexp_sub.isra.32+115
000000000000e764         mov        qword [rsp+0x48+var_40], rcx
000000000000e769         shl        rsi, 0x4                                    ; argument "__size" for method j_realloc
000000000000e76d         call       j_realloc                                   ; realloc
000000000000e772         test       rax, rax
000000000000e775         mov        rcx, qword [rsp+0x48+var_40]
000000000000e77a         je         loc_e7d0

000000000000e77c         mov        rsi, qword [rbx+0xc8]
000000000000e783         mov        rdx, qword [rbx+0xd0]
000000000000e78a         mov        qword [rbx+0xd8], rax
000000000000e791         mov        qword [rsp+0x48+var_40], rcx
000000000000e796         lea        rsi, qword [rsi+rsi*4]
000000000000e79a         lea        rdx, qword [rdx+rdx*4]
000000000000e79e         lea        rdi, qword [rax+rsi*8]                      ; argument "__s" for method j_memset
000000000000e7a2         shl        rdx, 0x3                                    ; argument "__n" for method j_memset
000000000000e7a6         xor        esi, esi                                    ; argument "__c" for method j_memset
000000000000e7a8         call       j_memset                                    ; memset
000000000000e7ad         shl        qword [rbx+0xd0], 0x1
000000000000e7b4         mov        rax, qword [rbx+0xc8]
000000000000e7bb         mov        rdi, qword [rbx+0xd8]
000000000000e7c2         mov        rsi, qword [rbp+8]
000000000000e7c6         mov        rcx, qword [rsp+0x48+var_40]
000000000000e7cb         jmp        loc_e6c9

                     loc_e7d0:
000000000000e7d0         mov        rdi, qword [rbx+0xd8]                       ; argument "__ptr" for method j_free, CODE XREF=get_subexp_sub.isra.32+298
000000000000e7d7         call       j_free                                      ; free
000000000000e7dc         mov        eax, 0xc
000000000000e7e1         jmp        loc_e68b
000000000000e7e6         align      16                                          ; End of unwind block (FDE at 0x19570)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_58: int8_t, -88
        ;    var_5C: int32_t, -92
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208
        ;    var_D8: int64_t, -216
        ;    var_E0: int64_t, -224
        ;    var_E8: int64_t, -232


                     transit_state_bkref.isra.34:
000000000000e7f0         push       r15                                         ; Begin of unwind block (FDE at 0x195dc), CODE XREF=transit_state_bkref.isra.34+2090, merge_state_with_log+449, re_search_internal+5802
000000000000e7f2         push       r14
000000000000e7f4         push       r13
000000000000e7f6         push       r12
000000000000e7f8         push       rbp
000000000000e7f9         push       rbx
000000000000e7fa         sub        rsp, 0xb8
000000000000e801         mov        r15, qword [rdi+0x48]
000000000000e805         mov        rax, qword [fs:0x28]
000000000000e80e         mov        qword [rsp+0xe8+var_40], rax
000000000000e816         xor        eax, eax
000000000000e818         cmp        qword [rsi], 0x0
000000000000e81c         mov        rax, qword [rdi+0x98]
000000000000e823         mov        qword [rsp+0xe8+var_A0], rsi
000000000000e828         mov        qword [rsp+0xe8+var_A8], rdx
000000000000e82d         mov        qword [rsp+0xe8+var_B0], rax
000000000000e832         jle        loc_eb60

000000000000e838         lea        rax, qword [r15*8]
000000000000e840         mov        r14, rdi
000000000000e843         mov        qword [rsp+0xe8+var_E8], 0x0
000000000000e84b         mov        qword [rsp+0xe8+var_E0], r15
000000000000e850         mov        qword [rsp+0xe8+var_88], rax
000000000000e855         lea        rax, qword [rsp+0xe8+var_58]
000000000000e85d         mov        qword [rsp+0xe8+var_80], rax
000000000000e862         lea        rax, qword [rsp+0xe8+var_5C]
000000000000e86a         mov        qword [rsp+0xe8+var_70], rax
000000000000e86f         jmp        loc_e8b7
000000000000e871         align      8

                     loc_e878:
000000000000e878         test       al, 0x1                                     ; CODE XREF=transit_state_bkref.isra.34+285
000000000000e87a         je         loc_e8a0

000000000000e87c         and        edx, 0x8
000000000000e87f         jne        loc_e8a0

                     loc_e881:
000000000000e881         test       cl, 0x20                                    ; CODE XREF=transit_state_bkref.isra.34+294, transit_state_bkref.isra.34+302
000000000000e884         je         loc_e88a

000000000000e886         test       al, 0x2
000000000000e888         je         loc_e8a0

                     loc_e88a:
000000000000e88a         and        ecx, 0x80                                   ; CODE XREF=transit_state_bkref.isra.34+148
000000000000e890         je         loc_e930

000000000000e896         test       al, 0x8
000000000000e898         jne        loc_e930

000000000000e89e         nop

                     loc_e8a0:
000000000000e8a0         mov        rdi, qword [rsp+0xe8+var_A0]                ; CODE XREF=transit_state_bkref.isra.34+138, transit_state_bkref.isra.34+143, transit_state_bkref.isra.34+152, transit_state_bkref.isra.34+237, transit_state_bkref.isra.34+308, transit_state_bkref.isra.34+976, transit_state_bkref.isra.34+1335
000000000000e8a5         add        qword [rsp+0xe8+var_E8], 0x1
000000000000e8aa         mov        rax, qword [rsp+0xe8+var_E8]
000000000000e8ae         cmp        rax, qword [rdi]
000000000000e8b1         jge        loc_eb60

                     loc_e8b7:
000000000000e8b7         mov        rax, qword [rsp+0xe8+var_A8]                ; CODE XREF=transit_state_bkref.isra.34+127
000000000000e8bc         mov        rdi, qword [rsp+0xe8+var_E8]
000000000000e8c0         mov        rax, qword [rax]
000000000000e8c3         mov        r13, qword [rax+rdi*8]
000000000000e8c7         mov        rdi, qword [rsp+0xe8+var_B0]
000000000000e8cc         mov        rax, qword [rdi]
000000000000e8cf         mov        rbx, r13
000000000000e8d2         shl        rbx, 0x4
000000000000e8d6         add        rax, rbx
000000000000e8d9         cmp        byte [rax+8], 0x4
000000000000e8dd         jne        loc_e8a0

000000000000e8df         mov        ebp, dword [rax+8]
000000000000e8e2         test       ebp, 0x3ff00
000000000000e8e8         je         loc_e930

000000000000e8ea         mov        edx, dword [r14+0xa0]
000000000000e8f1         mov        rsi, qword [rsp+0xe8+var_E0]
000000000000e8f6         mov        rdi, r14
000000000000e8f9         call       re_string_context_at                        ; re_string_context_at
000000000000e8fe         mov        edx, ebp
000000000000e900         shr        edx, 0x8
000000000000e903         mov        ecx, edx
000000000000e905         and        cx, 0x3ff
000000000000e90a         test       dl, 0x4
000000000000e90d         jne        loc_e878

000000000000e913         and        edx, 0x8
000000000000e916         je         loc_e881

000000000000e91c         test       al, 0x1
000000000000e91e         je         loc_e881

000000000000e924         jmp        loc_e8a0
000000000000e929         align      16

                     loc_e930:
000000000000e930         mov        rdi, qword [r14+0xc8]                       ; CODE XREF=transit_state_bkref.isra.34+160, transit_state_bkref.isra.34+168, transit_state_bkref.isra.34+248
000000000000e937         mov        rax, qword [r14+0x98]
000000000000e93e         xor        ecx, ecx
000000000000e940         mov        r10, qword [r14+8]
000000000000e944         mov        r9, qword [rsp+0xe8+var_E0]
000000000000e949         mov        qword [rsp+0xe8+var_78], rdi
000000000000e94e         mov        qword [rsp+0xe8+var_98], rax

                     loc_e953:
000000000000e953         cmp        rcx, rdi                                    ; CODE XREF=transit_state_bkref.isra.34+871
000000000000e956         jge        loc_e9ab

000000000000e958         lea        rax, qword [rcx+rdi]
000000000000e95c         mov        r11, qword [r14+0xd8]
000000000000e963         mov        rsi, rax
000000000000e966         shr        rsi, 0x3f
000000000000e96a         add        rsi, rax
000000000000e96d         sar        rsi, 0x1
000000000000e970         lea        rax, qword [rsi+rsi*4]
000000000000e974         cmp        r9, qword [r11+rax*8+8]
000000000000e979         jle        loc_e9a6

000000000000e97b         jmp        loc_eb48

                     loc_e980:
000000000000e980         lea        rdx, qword [rsi+rcx]                        ; CODE XREF=transit_state_bkref.isra.34+441
000000000000e984         mov        rax, rdx
000000000000e987         shr        rax, 0x3f
000000000000e98b         add        rax, rdx
000000000000e98e         sar        rax, 0x1
000000000000e991         lea        rdx, qword [rax+rax*4]
000000000000e995         mov        r8, rax
000000000000e998         cmp        r9, qword [r11+rdx*8+8]
000000000000e99d         jg         loc_eb50

000000000000e9a3         mov        rsi, rax

                     loc_e9a6:
000000000000e9a6         cmp        rsi, rcx                                    ; CODE XREF=transit_state_bkref.isra.34+393
000000000000e9a9         jg         loc_e980

                     loc_e9ab:
000000000000e9ab         cmp        qword [rsp+0xe8+var_78], rcx                ; CODE XREF=transit_state_bkref.isra.34+358
000000000000e9b0         jle        loc_e9d6

000000000000e9b2         mov        rdx, qword [r14+0xd8]
000000000000e9b9         lea        rax, qword [rcx+rcx*4]
000000000000e9bd         mov        rdi, qword [rsp+0xe8+var_E0]
000000000000e9c2         lea        rax, qword [rdx+rax*8]
000000000000e9c6         cmp        qword [rax+8], rdi
000000000000e9ca         jne        loc_e9d6

000000000000e9cc         cmp        rcx, 0xffffffffffffffff
000000000000e9d0         jne        loc_eba6

                     loc_e9d6:
000000000000e9d6         mov        rax, qword [rsp+0xe8+var_98]                ; CODE XREF=transit_state_bkref.isra.34+448, transit_state_bkref.isra.34+474, transit_state_bkref.isra.34+944
000000000000e9db         cmp        qword [r14+0xe8], 0x0
000000000000e9e3         mov        rdx, qword [rax]
000000000000e9e6         mov        rax, qword [rdx+rbx]
000000000000e9ea         mov        qword [rsp+0xe8+var_90], rax
000000000000e9ef         jle        loc_ebab

000000000000e9f5         mov        qword [rsp+0xe8+var_B8], r13
000000000000e9fa         mov        qword [rsp+0xe8+var_C0], 0x0
000000000000ea03         mov        r13, r10

                     loc_ea06:
000000000000ea06         mov        rax, qword [r14+0xf8]                       ; CODE XREF=transit_state_bkref.isra.34+601
000000000000ea0d         mov        rbx, qword [rsp+0xe8+var_C0]
000000000000ea12         mov        rdi, qword [rsp+0xe8+var_90]
000000000000ea17         mov        rbx, qword [rax+rbx*8]
000000000000ea1b         mov        rax, qword [rbx+8]
000000000000ea1f         shl        rax, 0x4
000000000000ea23         cmp        rdi, qword [rdx+rax]
000000000000ea27         je         loc_ea50

                     loc_ea29:
000000000000ea29         add        qword [rsp+0xe8+var_C0], 0x1                ; CODE XREF=transit_state_bkref.isra.34+1447, transit_state_bkref.isra.34+1829, transit_state_bkref.isra.34+1925
000000000000ea2f         mov        rax, qword [rsp+0xe8+var_C0]
000000000000ea34         cmp        rax, qword [r14+0xe8]
000000000000ea3b         jge        loc_f0b1

000000000000ea41         mov        rax, qword [rsp+0xe8+var_98]
000000000000ea46         mov        rdx, qword [rax]
000000000000ea49         jmp        loc_ea06
000000000000ea4b         align      16

                     loc_ea50:
000000000000ea50         cmp        qword [rbx+0x20], 0x0                       ; CODE XREF=transit_state_bkref.isra.34+567
000000000000ea55         mov        r11, qword [rbx]
000000000000ea58         jle        loc_f0c2

000000000000ea5e         mov        rcx, qword [rsp+0xe8+var_E0]
000000000000ea63         mov        r8, r13
000000000000ea66         xor        ebp, ebp
000000000000ea68         mov        r13, rbx
000000000000ea6b         mov        rbx, rcx
000000000000ea6e         jmp        loc_eadc

                     loc_ea70:
000000000000ea70         lea        rsi, qword [r8+r11]                         ; argument "__s2" for method j_memcmp, CODE XREF=transit_state_bkref.isra.34+779, transit_state_bkref.isra.34+844
000000000000ea74         lea        rdi, qword [r8+rbx]                         ; argument "__s1" for method j_memcmp
000000000000ea78         mov        qword [rsp+0xe8+var_C8], r9
000000000000ea7d         mov        qword [rsp+0xe8+var_D0], r11
000000000000ea82         mov        qword [rsp+0xe8+var_D8], r8
000000000000ea87         call       j_memcmp                                    ; memcmp
000000000000ea8c         test       eax, eax
000000000000ea8e         mov        r8, qword [rsp+0xe8+var_D8]
000000000000ea93         mov        r11, qword [rsp+0xe8+var_D0]
000000000000ea98         mov        r9, qword [rsp+0xe8+var_C8]
000000000000ea9d         jne        loc_ef68

                     loc_eaa3:
000000000000eaa3         mov        r8, qword [rsp+0xe8+var_E0]                 ; CODE XREF=transit_state_bkref.isra.34+773
000000000000eaa8         mov        rcx, qword [rsp+0xe8+var_B8]
000000000000eaad         mov        rdx, r9
000000000000eab0         mov        rsi, r13
000000000000eab3         mov        rdi, r14
000000000000eab6         call       get_subexp_sub.isra.32                      ; get_subexp_sub.isra.32
000000000000eabb         cmp        eax, 0x1
000000000000eabe         mov        r8, qword [r14+8]
000000000000eac2         ja         loc_eb68

000000000000eac8         add        rbp, 0x1
000000000000eacc         cmp        rbp, qword [r13+0x20]
000000000000ead0         mov        r11, r15
000000000000ead3         mov        rbx, r12
000000000000ead6         jge        loc_ed88

                     loc_eadc:
000000000000eadc         mov        rax, qword [r13+0x28]                       ; CODE XREF=transit_state_bkref.isra.34+638
000000000000eae0         mov        r9, qword [rax+rbp*8]
000000000000eae4         mov        r15, qword [r9+8]
000000000000eae8         mov        rdx, r15
000000000000eaeb         sub        rdx, r11
000000000000eaee         test       rdx, rdx
000000000000eaf1         lea        r12, qword [rdx+rbx]
000000000000eaf5         jle        loc_eaa3

000000000000eaf7         cmp        qword [r14+0x30], r12
000000000000eafb         jge        loc_ea70

000000000000eb01         cmp        qword [r14+0x58], r12
000000000000eb05         mov        qword [rsp+0xe8+var_D0], rdx
000000000000eb0a         mov        qword [rsp+0xe8+var_D8], r9
000000000000eb0f         jl         loc_ef68

000000000000eb15         mov        rsi, r12
000000000000eb18         mov        rdi, r14
000000000000eb1b         mov        qword [rsp+0xe8+var_C8], r11
000000000000eb20         call       clean_state_log_if_needed                   ; clean_state_log_if_needed
000000000000eb25         test       eax, eax
000000000000eb27         jne        loc_eb68

000000000000eb29         mov        r8, qword [r14+8]
000000000000eb2d         mov        rdx, qword [rsp+0xe8+var_D0]
000000000000eb32         mov        r9, qword [rsp+0xe8+var_D8]
000000000000eb37         mov        r11, qword [rsp+0xe8+var_C8]
000000000000eb3c         jmp        loc_ea70
000000000000eb41         align      8

                     loc_eb48:
000000000000eb48         mov        r8, rsi                                     ; CODE XREF=transit_state_bkref.isra.34+395
000000000000eb4b         mov        rsi, rdi
000000000000eb4e         nop

                     loc_eb50:
000000000000eb50         lea        rcx, qword [r8+1]                           ; CODE XREF=transit_state_bkref.isra.34+429
000000000000eb54         mov        rdi, rsi
000000000000eb57         jmp        loc_e953
000000000000eb5c         align      32

                     loc_eb60:
000000000000eb60         xor        eax, eax                                    ; CODE XREF=transit_state_bkref.isra.34+66, transit_state_bkref.isra.34+193
000000000000eb62         nop        word [rax+rax]

                     loc_eb68:
000000000000eb68         mov        rbx, qword [rsp+0xe8+var_40]                ; CODE XREF=transit_state_bkref.isra.34+722, transit_state_bkref.isra.34+823, transit_state_bkref.isra.34+1694, transit_state_bkref.isra.34+1801, transit_state_bkref.isra.34+1902, transit_state_bkref.isra.34+2016, transit_state_bkref.isra.34+2070, transit_state_bkref.isra.34+2110, transit_state_bkref.isra.34+2140, transit_state_bkref.isra.34+2169
000000000000eb70         xor        rbx, qword [fs:0x28]
000000000000eb79         jne        loc_f0cc

000000000000eb7f         add        rsp, 0xb8
000000000000eb86         pop        rbx
000000000000eb87         pop        rbp
000000000000eb88         pop        r12
000000000000eb8a         pop        r13
000000000000eb8c         pop        r14
000000000000eb8e         pop        r15
000000000000eb90         ret
                        ; endp
000000000000eb91         align      8

                     loc_eb98:
000000000000eb98         add        rax, 0x28                                   ; CODE XREF=transit_state_bkref.isra.34+953
000000000000eb9c         cmp        byte [rax-8], 0x0
000000000000eba0         je         loc_e9d6

                     loc_eba6:
000000000000eba6         cmp        r13, qword [rax]                            ; CODE XREF=transit_state_bkref.isra.34+480
000000000000eba9         jne        loc_eb98

                     loc_ebab:
000000000000ebab         mov        rax, qword [rsp+0xe8+var_78]                ; CODE XREF=transit_state_bkref.isra.34+511

                     loc_ebb0:
000000000000ebb0         cmp        qword [rsp+0xe8+var_78], rax                ; CODE XREF=transit_state_bkref.isra.34+2253
000000000000ebb5         mov        dword [rsp+0xe8+var_5C], 0x0
000000000000ebc0         jge        loc_e8a0

000000000000ebc6         lea        rax, qword [r13*8]
000000000000ebce         mov        r12, qword [rsp+0xe8+var_78]
000000000000ebd3         mov        rbp, qword [rsp+0xe8+var_B0]
000000000000ebd8         mov        qword [rsp+0xe8+var_98], rax
000000000000ebdd         lea        rax, qword [r13+r13*2]
000000000000ebe2         lea        r8, qword [r12+r12*4]
000000000000ebe6         shl        rax, 0x3
000000000000ebea         mov        qword [rsp+0xe8+var_90], rax
000000000000ebef         lea        r15, qword [r8*8]
000000000000ebf7         jmp        loc_ed2d
000000000000ebfc         align      1024

                     loc_ec00:
000000000000ec00         mov        rcx, qword [rbp+0x28]                       ; CODE XREF=transit_state_bkref.isra.34+1390
000000000000ec04         mov        rdi, qword [rsp+0xe8+var_90]
000000000000ec09         mov        rcx, qword [rcx+rdi+0x10]
000000000000ec0e         mov        rcx, qword [rcx]
000000000000ec11         lea        rcx, qword [rcx+rcx*2]
000000000000ec15         lea        rcx, qword [rdx+rcx*8]
000000000000ec19         mov        qword [rsp+0xe8+var_D0], rcx

                     loc_ec1e:
000000000000ec1e         add        rbx, qword [rsp+0xe8+var_E0]                ; CODE XREF=transit_state_bkref.isra.34+1422
000000000000ec23         mov        edx, dword [r14+0xa0]
000000000000ec2a         mov        rdi, r14
000000000000ec2d         sub        rbx, rax
000000000000ec30         lea        rsi, qword [rbx-1]
000000000000ec34         call       re_string_context_at                        ; re_string_context_at
000000000000ec39         mov        rsi, qword [rsp+0xe8+var_88]
000000000000ec3e         mov        ecx, eax
000000000000ec40         mov        rax, qword [r14+0xb8]
000000000000ec47         lea        r10, qword [rbx*8]
000000000000ec4f         mov        qword [rsp+0xe8+var_D8], 0x0
000000000000ec58         lea        r11, qword [rax+r10]
000000000000ec5c         mov        rax, qword [rax+rsi]
000000000000ec60         mov        rdx, qword [r11]
000000000000ec63         test       rax, rax
000000000000ec66         je         loc_ec71

000000000000ec68         mov        rax, qword [rax+0x10]
000000000000ec6c         mov        qword [rsp+0xe8+var_D8], rax

                     loc_ec71:
000000000000ec71         test       rdx, rdx                                    ; CODE XREF=transit_state_bkref.isra.34+1142
000000000000ec74         je         loc_ef90

000000000000ec7a         mov        rsi, qword [rdx+0x50]
000000000000ec7e         mov        rdi, qword [rsp+0xe8+var_80]
000000000000ec83         mov        rdx, qword [rsp+0xe8+var_D0]
000000000000ec88         mov        qword [rsp+0xe8+var_B8], r10
000000000000ec8d         mov        dword [rsp+0xe8+var_C0], ecx
000000000000ec91         call       re_node_set_init_union                      ; re_node_set_init_union
000000000000ec96         test       eax, eax
000000000000ec98         mov        dword [rsp+0xe8+var_5C], eax
000000000000ec9f         mov        ecx, dword [rsp+0xe8+var_C0]
000000000000eca3         mov        r10, qword [rsp+0xe8+var_B8]
000000000000eca8         jne        loc_f038

000000000000ecae         add        r10, qword [r14+0xb8]
000000000000ecb5         mov        rdx, qword [rsp+0xe8+var_80]
000000000000ecba         mov        rsi, rbp
000000000000ecbd         mov        rdi, qword [rsp+0xe8+var_70]
000000000000ecc2         mov        qword [rsp+0xe8+var_C0], r10
000000000000ecc7         call       re_acquire_state_context                    ; re_acquire_state_context
000000000000eccc         mov        r10, qword [rsp+0xe8+var_C0]
000000000000ecd1         mov        rdi, qword [rsp+0xe8+var_48]                ; argument "__ptr" for method j_free
000000000000ecd9         mov        qword [r10], rax
000000000000ecdc         call       j_free                                      ; free
000000000000ece1         mov        rdx, qword [r14+0xb8]
000000000000ece8         cmp        qword [rdx+rbx*8], 0x0
000000000000eced         je         loc_efc1

                     loc_ecf3:
000000000000ecf3         cmp        qword [rsp+0xe8+var_C8], 0x0                ; CODE XREF=transit_state_bkref.isra.34+1995, transit_state_bkref.isra.34+2010
000000000000ecf9         jne        loc_ed18

000000000000ecfb         mov        rax, qword [rsp+0xe8+var_88]
000000000000ed00         mov        rbx, qword [rsp+0xe8+var_D8]
000000000000ed05         mov        rax, qword [rdx+rax]
000000000000ed09         cmp        qword [rax+0x10], rbx
000000000000ed0d         jg         loc_efd8

000000000000ed13         nop        dword [rax+rax]

                     loc_ed18:
000000000000ed18         add        r12, 0x1                                    ; CODE XREF=transit_state_bkref.isra.34+1289, transit_state_bkref.isra.34+1354, transit_state_bkref.isra.34+1365, transit_state_bkref.isra.34+2104
000000000000ed1c         add        r15, 0x28
000000000000ed20         cmp        r12, qword [r14+0xc8]
000000000000ed27         jge        loc_e8a0

                     loc_ed2d:
000000000000ed2d         mov        rax, qword [r14+0xd8]                       ; CODE XREF=transit_state_bkref.isra.34+1031
000000000000ed34         add        rax, r15
000000000000ed37         cmp        r13, qword [rax]
000000000000ed3a         jne        loc_ed18

000000000000ed3c         mov        rdi, qword [rsp+0xe8+var_E0]
000000000000ed41         cmp        rdi, qword [rax+8]
000000000000ed45         jne        loc_ed18

000000000000ed47         mov        rbx, qword [rax+0x18]
000000000000ed4b         mov        rax, qword [rax+0x10]
000000000000ed4f         mov        rdx, qword [rbp+0x30]
000000000000ed53         mov        rcx, rbx
000000000000ed56         sub        rcx, rax
000000000000ed59         mov        qword [rsp+0xe8+var_C8], rcx
000000000000ed5e         je         loc_ec00

000000000000ed64         mov        rcx, qword [rbp+0x18]
000000000000ed68         mov        rdi, qword [rsp+0xe8+var_98]
000000000000ed6d         mov        rcx, qword [rcx+rdi]
000000000000ed71         lea        rcx, qword [rcx+rcx*2]
000000000000ed75         lea        rcx, qword [rdx+rcx*8]
000000000000ed79         mov        qword [rsp+0xe8+var_D0], rcx
000000000000ed7e         jmp        loc_ec1e
000000000000ed83         align      8

                     loc_ed88:
000000000000ed88         mov        rbx, r13                                    ; CODE XREF=transit_state_bkref.isra.34+742
000000000000ed8b         mov        r13, r8

                     loc_ed8e:
000000000000ed8e         lea        r11, qword [r15+1]                          ; CODE XREF=transit_state_bkref.isra.34+1946

                     loc_ed92:
000000000000ed92         cmp        qword [rsp+0xe8+var_E0], r11                ; CODE XREF=transit_state_bkref.isra.34+1937, transit_state_bkref.isra.34+2263
000000000000ed97         jl         loc_ea29

000000000000ed9d         mov        rax, r12
000000000000eda0         lea        r15, qword [r11*8]
000000000000eda8         mov        r12, rbx
000000000000edab         mov        rbx, r11
000000000000edae         mov        r11, r13
000000000000edb1         mov        r13, rax
000000000000edb4         nop        dword [rax]

                     loc_edb8:
000000000000edb8         mov        rax, rbx                                    ; CODE XREF=transit_state_bkref.isra.34+1820
000000000000edbb         sub        rax, qword [r12]
000000000000edbf         test       rax, rax
000000000000edc2         jle        loc_ede5

000000000000edc4         cmp        qword [r14+0x30], r13
000000000000edc8         jle        loc_f051

                     loc_edce:
000000000000edce         movzx      ecx, byte [r11+rbx-1]                       ; CODE XREF=transit_state_bkref.isra.34+2179
000000000000edd4         lea        rax, qword [r13+1]
000000000000edd8         cmp        byte [r11+r13], cl
000000000000eddc         jne        loc_ef12

000000000000ede2         mov        r13, rax

                     loc_ede5:
000000000000ede5         mov        rax, qword [r14+0xb8]                       ; CODE XREF=transit_state_bkref.isra.34+1490
000000000000edec         mov        rax, qword [rax+r15]
000000000000edf0         test       rax, rax
000000000000edf3         je         loc_eeff

000000000000edf9         mov        rcx, qword [rax+0x10]
000000000000edfd         test       rcx, rcx
000000000000ee00         jle        loc_eeff

000000000000ee06         mov        rdi, qword [rax+0x18]
000000000000ee0a         mov        rax, qword [rsp+0xe8+var_98]
000000000000ee0f         xor        edx, edx
000000000000ee11         mov        r8, qword [rsp+0xe8+var_90]
000000000000ee16         mov        rsi, qword [rax]
000000000000ee19         jmp        loc_ee2d
000000000000ee1b         align      32

                     loc_ee20:
000000000000ee20         add        rdx, 0x1                                    ; CODE XREF=transit_state_bkref.isra.34+1615, transit_state_bkref.isra.34+1620
000000000000ee24         cmp        rcx, rdx
000000000000ee27         je         loc_eeff

                     loc_ee2d:
000000000000ee2d         mov        rbp, qword [rdi+rdx*8]                      ; CODE XREF=transit_state_bkref.isra.34+1577
000000000000ee31         mov        rax, rbp
000000000000ee34         shl        rax, 0x4
000000000000ee38         add        rax, rsi
000000000000ee3b         cmp        byte [rax+8], 0x9
000000000000ee3f         jne        loc_ee20

000000000000ee41         cmp        r8, qword [rax]
000000000000ee44         jne        loc_ee20

000000000000ee46         cmp        rbp, 0xffffffffffffffff
000000000000ee4a         je         loc_eeff

000000000000ee50         mov        rsi, qword [r12+0x10]
000000000000ee55         mov        rcx, qword [r12]
000000000000ee59         test       rsi, rsi
000000000000ee5c         je         loc_ef20

                     loc_ee62:
000000000000ee62         mov        qword [rsp+0xe8+var_D8], r11                ; CODE XREF=transit_state_bkref.isra.34+1891
000000000000ee67         mov        rdx, qword [r12+8]
000000000000ee6c         sub        rsp, 0x8
000000000000ee70         push       0x9
000000000000ee72         mov        r9, rbx
000000000000ee75         mov        r8, rbp
000000000000ee78         mov        rdi, r14
000000000000ee7b         call       check_arrival                               ; check_arrival
000000000000ee80         pop        rdx
000000000000ee81         cmp        eax, 0x1
000000000000ee84         pop        rcx
000000000000ee85         mov        r11, qword [rsp+0xe8+var_D8]
000000000000ee8a         je         loc_eeff

000000000000ee8c         test       eax, eax
000000000000ee8e         jne        loc_eb68

000000000000ee94         mov        rax, qword [r12+0x20]
000000000000ee99         cmp        rax, qword [r12+0x18]
000000000000ee9e         je         loc_f078

                     loc_eea4:
000000000000eea4         mov        esi, 0x28                                   ; argument "__size" for method j_calloc, CODE XREF=transit_state_bkref.isra.34+2236
000000000000eea9         mov        edi, 0x1                                    ; argument "__nmemb" for method j_calloc
000000000000eeae         call       j_calloc                                    ; calloc
000000000000eeb3         test       rax, rax
000000000000eeb6         je         loc_ef59

000000000000eebc         mov        rdx, qword [r12+0x20]
000000000000eec1         mov        rcx, qword [r12+0x28]
000000000000eec6         mov        rsi, r12
000000000000eec9         mov        r8, qword [rsp+0xe8+var_E0]
000000000000eece         mov        rdi, r14
000000000000eed1         mov        qword [rcx+rdx*8], rax
000000000000eed5         mov        rcx, qword [rsp+0xe8+var_B8]
000000000000eeda         add        rdx, 0x1
000000000000eede         mov        qword [rax], rbp
000000000000eee1         mov        qword [rax+8], rbx
000000000000eee5         mov        qword [r12+0x20], rdx
000000000000eeea         mov        rdx, rax
000000000000eeed         call       get_subexp_sub.isra.32                      ; get_subexp_sub.isra.32
000000000000eef2         cmp        eax, 0x1
000000000000eef5         mov        r11, qword [r14+8]
000000000000eef9         ja         loc_eb68

                     loc_eeff:
000000000000eeff         add        rbx, 0x1                                    ; CODE XREF=transit_state_bkref.isra.34+1539, transit_state_bkref.isra.34+1552, transit_state_bkref.isra.34+1591, transit_state_bkref.isra.34+1626, transit_state_bkref.isra.34+1690
000000000000ef03         add        r15, 0x8
000000000000ef07         cmp        qword [rsp+0xe8+var_E0], rbx
000000000000ef0c         jge        loc_edb8

                     loc_ef12:
000000000000ef12         mov        r13, r11                                    ; CODE XREF=transit_state_bkref.isra.34+1516, transit_state_bkref.isra.34+2149
000000000000ef15         jmp        loc_ea29
000000000000ef1a         align      32

                     loc_ef20:
000000000000ef20         mov        rsi, rbx                                    ; CODE XREF=transit_state_bkref.isra.34+1644
000000000000ef23         mov        edi, 0x18                                   ; argument "__nmemb" for method j_calloc
000000000000ef28         mov        qword [rsp+0xe8+var_D0], r11
000000000000ef2d         sub        rsi, rcx
000000000000ef30         mov        qword [rsp+0xe8+var_D8], rcx
000000000000ef35         add        rsi, 0x1                                    ; argument "__size" for method j_calloc
000000000000ef39         call       j_calloc                                    ; calloc
000000000000ef3e         test       rax, rax
000000000000ef41         mov        rsi, rax
000000000000ef44         mov        qword [r12+0x10], rax
000000000000ef49         mov        rcx, qword [rsp+0xe8+var_D8]
000000000000ef4e         mov        r11, qword [rsp+0xe8+var_D0]
000000000000ef53         jne        loc_ee62

                     loc_ef59:
000000000000ef59         mov        eax, 0xc                                    ; CODE XREF=transit_state_bkref.isra.34+1734, transit_state_bkref.isra.34+2215
000000000000ef5e         jmp        loc_eb68
000000000000ef63         align      8

                     loc_ef68:
000000000000ef68         mov        rcx, rbx                                    ; CODE XREF=transit_state_bkref.isra.34+685, transit_state_bkref.isra.34+799
000000000000ef6b         mov        rbx, r13
000000000000ef6e         mov        r13, r8
000000000000ef71         cmp        qword [rbx+0x20], rbp
000000000000ef75         jg         loc_ea29

000000000000ef7b         test       rbp, rbp
000000000000ef7e         mov        r12, rcx
000000000000ef81         je         loc_ed92

000000000000ef87         mov        r15, r11
000000000000ef8a         jmp        loc_ed8e
000000000000ef8f         align      16

                     loc_ef90:
000000000000ef90         mov        rdx, qword [rsp+0xe8+var_D0]                ; CODE XREF=transit_state_bkref.isra.34+1156
000000000000ef95         mov        rdi, qword [rsp+0xe8+var_70]
000000000000ef9a         mov        rsi, rbp
000000000000ef9d         mov        qword [rsp+0xe8+var_C0], r11
000000000000efa2         call       re_acquire_state_context                    ; re_acquire_state_context
000000000000efa7         mov        r11, qword [rsp+0xe8+var_C0]
000000000000efac         mov        rdx, qword [r14+0xb8]
000000000000efb3         mov        qword [r11], rax
000000000000efb6         cmp        qword [rdx+rbx*8], 0x0
000000000000efbb         jne        loc_ecf3

                     loc_efc1:
000000000000efc1         mov        eax, dword [rsp+0xe8+var_5C]                ; CODE XREF=transit_state_bkref.isra.34+1277
000000000000efc8         test       eax, eax
000000000000efca         je         loc_ecf3

000000000000efd0         jmp        loc_eb68
000000000000efd5         align      8

                     loc_efd8:
000000000000efd8         mov        rax, qword [rsp+0xe8+var_D0]                ; CODE XREF=transit_state_bkref.isra.34+1309
000000000000efdd         mov        rcx, qword [rsp+0xe8+var_E0]
000000000000efe2         mov        rdi, r14
000000000000efe5         lea        r8, qword [rax+0x10]
000000000000efe9         lea        rbx, qword [rax+8]
000000000000efed         mov        rdx, r8
000000000000eff0         mov        rsi, rbx
000000000000eff3         mov        qword [rsp+0xe8+var_D8], r8
000000000000eff8         call       check_subexp_matching_top.isra.18           ; check_subexp_matching_top.isra.18
000000000000effd         test       eax, eax
000000000000efff         mov        dword [rsp+0xe8+var_5C], eax
000000000000f006         jne        loc_eb68

000000000000f00c         mov        r8, qword [rsp+0xe8+var_D8]
000000000000f011         mov        rsi, rbx
000000000000f014         mov        rdi, r14
000000000000f017         mov        rdx, r8
000000000000f01a         call       transit_state_bkref.isra.34                 ; transit_state_bkref.isra.34
000000000000f01f         test       eax, eax
000000000000f021         mov        dword [rsp+0xe8+var_5C], eax
000000000000f028         je         loc_ed18

000000000000f02e         jmp        loc_eb68
000000000000f033         align      8

                     loc_f038:
000000000000f038         mov        rdi, qword [rsp+0xe8+var_48]                ; argument "__ptr" for method j_free, CODE XREF=transit_state_bkref.isra.34+1208
000000000000f040         call       j_free                                      ; free
000000000000f045         mov        eax, dword [rsp+0xe8+var_5C]
000000000000f04c         jmp        loc_eb68

                     loc_f051:
000000000000f051         cmp        qword [r14+0x58], r13                       ; CODE XREF=transit_state_bkref.isra.34+1496
000000000000f055         jle        loc_ef12

000000000000f05b         lea        esi, dword [r13+1]
000000000000f05f         mov        rdi, r14
000000000000f062         call       extend_buffers                              ; extend_buffers
000000000000f067         test       eax, eax
000000000000f069         jne        loc_eb68

000000000000f06f         mov        r11, qword [r14+8]
000000000000f073         jmp        loc_edce

                     loc_f078:
000000000000f078         lea        rdx, qword [rax+rax+1]                      ; CODE XREF=transit_state_bkref.isra.34+1710
000000000000f07d         mov        rdi, qword [r12+0x28]                       ; argument "__ptr" for method j_realloc
000000000000f082         lea        rsi, qword [rdx*8]                          ; argument "__size" for method j_realloc
000000000000f08a         mov        qword [rsp+0xe8+var_D8], rdx
000000000000f08f         call       j_realloc                                   ; realloc
000000000000f094         test       rax, rax
000000000000f097         je         loc_ef59

000000000000f09d         mov        rdx, qword [rsp+0xe8+var_D8]
000000000000f0a2         mov        qword [r12+0x28], rax
000000000000f0a7         mov        qword [r12+0x18], rdx
000000000000f0ac         jmp        loc_eea4

                     loc_f0b1:
000000000000f0b1         mov        r13, qword [rsp+0xe8+var_B8]                ; CODE XREF=transit_state_bkref.isra.34+587
000000000000f0b6         mov        rax, qword [r14+0xc8]
000000000000f0bd         jmp        loc_ebb0

                     loc_f0c2:
000000000000f0c2         mov        r12, qword [rsp+0xe8+var_E0]                ; CODE XREF=transit_state_bkref.isra.34+616
000000000000f0c7         jmp        loc_ed92

                     loc_f0cc:
000000000000f0cc         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=transit_state_bkref.isra.34+905
                        ; endp
000000000000f0d1         align      32                                          ; End of unwind block (FDE at 0x195dc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_58: int8_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104


                     merge_state_with_log:
000000000000f0e0         push       r15                                         ; Begin of unwind block (FDE at 0x1963c), CODE XREF=re_search_internal+2012, re_search_internal+3011
000000000000f0e2         push       r14
000000000000f0e4         push       r13
000000000000f0e6         push       r12
000000000000f0e8         mov        r13, rdi
000000000000f0eb         push       rbp
000000000000f0ec         push       rbx
000000000000f0ed         mov        rbx, rsi
000000000000f0f0         sub        rsp, 0x38
000000000000f0f4         mov        r12, qword [rsi+0x48]
000000000000f0f8         mov        r14, qword [rsi+0xb8]
000000000000f0ff         mov        rax, qword [fs:0x28]
000000000000f108         mov        qword [rsp+0x68+var_40], rax
000000000000f10d         xor        eax, eax
000000000000f10f         mov        r15, qword [rsi+0x98]
000000000000f116         lea        rbp, qword [r12*8]
000000000000f11e         add        r14, rbp
000000000000f121         cmp        qword [rsi+0xc0], r12
000000000000f128         jge        loc_f170

000000000000f12a         mov        qword [r14], rdx
000000000000f12d         mov        rbp, rdx
000000000000f130         mov        qword [rsi+0xc0], r12

                     loc_f137:
000000000000f137         cmp        qword [r15+0x98], 0x0                       ; CODE XREF=merge_state_with_log+273, merge_state_with_log+289, merge_state_with_log+365, merge_state_with_log+382
000000000000f13f         jne        loc_f268

                     loc_f145:
000000000000f145         mov        rcx, qword [rsp+0x68+var_40]                ; CODE XREF=merge_state_with_log+434, merge_state_with_log+473, merge_state_with_log+482
000000000000f14a         xor        rcx, qword [fs:0x28]
000000000000f153         mov        rax, rbp
000000000000f156         jne        loc_f2c7

000000000000f15c         add        rsp, 0x38
000000000000f160         pop        rbx
000000000000f161         pop        rbp
000000000000f162         pop        r12
000000000000f164         pop        r13
000000000000f166         pop        r14
000000000000f168         pop        r15
000000000000f16a         ret
                        ; endp
000000000000f16b         align      16

                     loc_f170:
000000000000f170         mov        rax, qword [r14]                            ; CODE XREF=merge_state_with_log+72
000000000000f173         test       rax, rax
000000000000f176         je         loc_f258

000000000000f17c         test       rdx, rdx
000000000000f17f         mov        rax, qword [rax+0x50]
000000000000f183         je         loc_f210

000000000000f189         mov        r14, qword [rdx+0x50]
000000000000f18d         lea        rdi, qword [rsp+0x68+var_58]
000000000000f192         mov        rdx, rax
000000000000f195         mov        qword [rsp+0x68+var_68], rdi
000000000000f199         mov        rsi, r14
000000000000f19c         call       re_node_set_init_union                      ; re_node_set_init_union
000000000000f1a1         test       eax, eax
000000000000f1a3         mov        dword [r13], eax
000000000000f1a7         jne        loc_f2c0

000000000000f1ad         mov        rax, qword [rbx+0x48]
000000000000f1b1         mov        edx, dword [rbx+0xa0]
000000000000f1b7         mov        rdi, rbx
000000000000f1ba         lea        rsi, qword [rax-1]
000000000000f1be         call       re_string_context_at                        ; re_string_context_at
000000000000f1c3         mov        r8, qword [rbx+0xb8]
000000000000f1ca         mov        rdx, qword [rsp+0x68+var_68]
000000000000f1ce         mov        ecx, eax
000000000000f1d0         mov        rsi, r15
000000000000f1d3         mov        rdi, r13
000000000000f1d6         add        r8, rbp
000000000000f1d9         mov        qword [rsp+0x68+var_60], r8
000000000000f1de         call       re_acquire_state_context                    ; re_acquire_state_context
000000000000f1e3         mov        r8, qword [rsp+0x68+var_60]
000000000000f1e8         test       r14, r14
000000000000f1eb         mov        rbp, rax
000000000000f1ee         mov        qword [r8], rax
000000000000f1f1         je         loc_f137

000000000000f1f7         mov        rdi, qword [rsp+0x68+var_48]                ; argument "__ptr" for method j_free
000000000000f1fc         call       j_free                                      ; free
000000000000f201         jmp        loc_f137
000000000000f206         align      16

                     loc_f210:
000000000000f210         movdqu     xmm0, xmmword [rax]                         ; CODE XREF=merge_state_with_log+163
000000000000f214         mov        rdi, rbx
000000000000f217         mov        edx, dword [rsi+0xa0]
000000000000f21d         lea        rsi, qword [r12-1]
000000000000f222         movaps     xmmword [rsp+0x68+var_58], xmm0
000000000000f227         mov        rax, qword [rax+0x10]
000000000000f22b         mov        qword [rsp+0x68+var_48], rax
000000000000f230         call       re_string_context_at                        ; re_string_context_at
000000000000f235         lea        rdx, qword [rsp+0x68+var_58]
000000000000f23a         mov        ecx, eax
000000000000f23c         mov        rsi, r15
000000000000f23f         mov        rdi, r13
000000000000f242         call       re_acquire_state_context                    ; re_acquire_state_context
000000000000f247         mov        rbp, rax
000000000000f24a         mov        qword [r14], rax
000000000000f24d         jmp        loc_f137
000000000000f252         align      8

                     loc_f258:
000000000000f258         mov        qword [r14], rdx                            ; CODE XREF=merge_state_with_log+150
000000000000f25b         mov        rbp, rdx
000000000000f25e         jmp        loc_f137
000000000000f263         align      8

                     loc_f268:
000000000000f268         test       rbp, rbp                                    ; CODE XREF=merge_state_with_log+95
000000000000f26b         je         loc_f2c0

000000000000f26d         lea        r14, qword [rbp+0x10]
000000000000f271         lea        r15, qword [rbp+0x18]
000000000000f275         mov        rcx, r12
000000000000f278         mov        rdi, rbx
000000000000f27b         mov        rdx, r15
000000000000f27e         mov        rsi, r14
000000000000f281         call       check_subexp_matching_top.isra.18           ; check_subexp_matching_top.isra.18
000000000000f286         test       eax, eax
000000000000f288         mov        dword [r13], eax
000000000000f28c         jne        loc_f2c0

000000000000f28e         test       byte [rbp+0x68], 0x40
000000000000f292         je         loc_f145

000000000000f298         mov        rdx, r15
000000000000f29b         mov        rsi, r14
000000000000f29e         mov        rdi, rbx
000000000000f2a1         call       transit_state_bkref.isra.34                 ; transit_state_bkref.isra.34
000000000000f2a6         test       eax, eax
000000000000f2a8         mov        dword [r13], eax
000000000000f2ac         jne        loc_f2c0

000000000000f2ae         mov        rax, qword [rbx+0xb8]
000000000000f2b5         mov        rbp, qword [rax+r12*8]
000000000000f2b9         jmp        loc_f145
000000000000f2be         align      64

                     loc_f2c0:
000000000000f2c0         xor        ebp, ebp                                    ; CODE XREF=merge_state_with_log+199, merge_state_with_log+395, merge_state_with_log+428, merge_state_with_log+460
000000000000f2c2         jmp        loc_f145

                     loc_f2c7:
000000000000f2c7         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=merge_state_with_log+118
                        ; endp
000000000000f2cc         align      16                                          ; End of unwind block (FDE at 0x1963c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_6C: int32_t, -108
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152


                     sift_states_backward:
000000000000f2d0         push       r15                                         ; Begin of unwind block (FDE at 0x19688), CODE XREF=re_search_internal+2510, re_search_internal+4661, update_cur_sifted_state+1785
000000000000f2d2         push       r14
000000000000f2d4         mov        r14, rdi
000000000000f2d7         push       r13
000000000000f2d9         push       r12
000000000000f2db         mov        r13, rsi
000000000000f2de         push       rbp
000000000000f2df         push       rbx
000000000000f2e0         sub        rsp, 0x68
000000000000f2e4         mov        r15, qword [rsi+0x18]
000000000000f2e8         mov        rbx, qword [rsi+0x10]
000000000000f2ec         mov        qword [rsp+0x98+var_98], rdi
000000000000f2f0         mov        edi, 0x8                                    ; argument "__size" for method j_malloc
000000000000f2f5         mov        qword [rsp+0x98+var_58], 0x1
000000000000f2fe         mov        rax, qword [fs:0x28]
000000000000f307         mov        qword [rsp+0x98+var_40], rax
000000000000f30c         xor        eax, eax
000000000000f30e         mov        qword [rsp+0x98+var_50], 0x1
000000000000f317         call       j_malloc                                    ; malloc
000000000000f31c         test       rax, rax
000000000000f31f         mov        qword [rsp+0x98+var_48], rax
000000000000f324         je         loc_f604

000000000000f32a         lea        rcx, qword [rsp+0x98+var_58]
000000000000f32f         mov        qword [rax], rbx
000000000000f332         mov        rdx, r15
000000000000f335         mov        rsi, r13
000000000000f338         mov        rdi, r14
000000000000f33b         mov        qword [rsp+0x98+var_88], rcx
000000000000f340         call       update_cur_sifted_state                     ; update_cur_sifted_state
000000000000f345         test       eax, eax
000000000000f347         jne        loc_f5d5

000000000000f34d         lea        rax, qword [r15*8]
000000000000f355         test       r15, r15
000000000000f358         mov        dword [rsp+0x98+var_6C], 0x0
000000000000f360         mov        qword [rsp+0x98+var_90], rax
000000000000f365         lea        rax, qword [r13+0x30]
000000000000f369         mov        qword [rsp+0x98+var_60], rax
000000000000f36e         jle        loc_f577

                     loc_f374:
000000000000f374         mov        rdi, qword [r13]                            ; CODE XREF=sift_states_backward+673
000000000000f378         mov        rax, qword [rsp+0x98+var_90]
000000000000f37d         cmp        qword [rdi+rax], 0x0
000000000000f382         je         loc_f598

000000000000f388         mov        rax, qword [rsp+0x98+var_98]
000000000000f38c         mov        dword [rsp+0x98+var_6C], 0x0
000000000000f394         mov        ecx, dword [rsp+0x98+var_6C]
000000000000f398         cmp        dword [rax+0xe0], ecx
000000000000f39e         jl         loc_f5b1

                     loc_f3a4:
000000000000f3a4         mov        rbx, qword [rsp+0x98+var_98]                ; CODE XREF=sift_states_backward+731
000000000000f3a8         mov        rdi, qword [rsp+0x98+var_90]
000000000000f3ad         sub        r15, 0x1
000000000000f3b1         mov        qword [rsp+0x98+var_50], 0x0
000000000000f3ba         mov        rax, qword [rbx+0xb8]
000000000000f3c1         mov        r12, qword [rax+rdi-8]
000000000000f3c6         test       r12, r12
000000000000f3c9         je         loc_f550

000000000000f3cf         cmp        qword [r12+0x28], 0x0
000000000000f3d5         mov        r14, qword [rbx+0x98]
000000000000f3dc         jle        loc_f550

000000000000f3e2         xor        ebx, ebx
000000000000f3e4         jmp        loc_f48b
000000000000f3e9         align      16

                     loc_f3f0:
000000000000f3f0         mov        rdi, qword [rsp+0x98+var_98]                ; CODE XREF=sift_states_backward+469, sift_states_backward+625, sift_states_backward+700
000000000000f3f4         mov        rdx, r15
000000000000f3f7         call       check_node_accept                           ; check_node_accept
000000000000f3fc         test       al, al
000000000000f3fe         je         loc_f47c

000000000000f400         mov        rax, qword [r13]
000000000000f404         mov        rcx, qword [rsp+0x98+var_90]
000000000000f409         mov        rax, qword [rax+rcx]
000000000000f40d         test       rax, rax
000000000000f410         je         loc_f47c

000000000000f412         mov        rdx, qword [r14+0x18]
000000000000f416         mov        rdi, qword [rax+0x10]
000000000000f41a         lea        rsi, qword [rax+0x18]
000000000000f41e         mov        rdx, qword [rdx+rbp*8]
000000000000f422         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000f427         test       rax, rax
000000000000f42a         je         loc_f47c

000000000000f42c         mov        r10d, 0x1

                     loc_f432:
000000000000f432         cmp        qword [r13+0x28], 0x0                       ; CODE XREF=sift_states_backward+555, sift_states_backward+608, loc_f580
000000000000f437         je         loc_f467

000000000000f439         mov        rax, qword [r14+0x18]
000000000000f43d         sub        rsp, 0x8
000000000000f441         lea        rsi, qword [r13+0x28]
000000000000f445         lea        r8, qword [r10+r15]
000000000000f449         mov        r9, rbp
000000000000f44c         mov        rcx, qword [rax+rbp*8]
000000000000f450         push       r15
000000000000f452         mov        rdx, qword [rsp+0xa8+var_60]
000000000000f457         mov        rdi, qword [rsp+0xa8+var_98]
000000000000f45c         call       check_dst_limits.isra.13                    ; check_dst_limits.isra.13
000000000000f461         test       al, al
000000000000f463         pop        rdx
000000000000f464         pop        rcx
000000000000f465         jne        loc_f47c

                     loc_f467:
000000000000f467         mov        rdi, qword [rsp+0x98+var_88]                ; CODE XREF=sift_states_backward+359
000000000000f46c         mov        rsi, rbp
000000000000f46f         call       re_node_set_insert                          ; re_node_set_insert
000000000000f474         test       al, al
000000000000f476         je         loc_f5d0

                     loc_f47c:
000000000000f47c         add        rbx, 0x1                                    ; CODE XREF=sift_states_backward+302, sift_states_backward+320, sift_states_backward+346, sift_states_backward+405
000000000000f480         cmp        rbx, qword [r12+0x28]
000000000000f485         jge        loc_f550

                     loc_f48b:
000000000000f48b         mov        rax, qword [r12+0x30]                       ; CODE XREF=sift_states_backward+276
000000000000f490         mov        rsi, qword [r14]
000000000000f493         mov        rbp, qword [rax+rbx*8]
000000000000f497         mov        r9, rbp
000000000000f49a         shl        r9, 0x4
000000000000f49e         add        rsi, r9
000000000000f4a1         test       byte [rsi+0xa], 0x10
000000000000f4a5         je         loc_f3f0

000000000000f4ab         mov        rcx, qword [rsp+0x98+var_98]
000000000000f4af         mov        rax, qword [r13+0x18]
000000000000f4b3         mov        r8, r15
000000000000f4b6         mov        rdx, rbp
000000000000f4b9         mov        qword [rsp+0x98+var_80], r9
000000000000f4be         mov        r11, qword [rcx+0x98]
000000000000f4c5         mov        qword [rsp+0x98+var_78], rax
000000000000f4ca         mov        rdi, qword [r11]
000000000000f4cd         lea        rsi, qword [r11+0xd8]
000000000000f4d4         mov        qword [rsp+0x98+var_68], r11
000000000000f4d9         call       check_node_accept_bytes.isra.31             ; check_node_accept_bytes.isra.31
000000000000f4de         movsxd     r10, eax
000000000000f4e1         mov        r9, qword [rsp+0x98+var_80]
000000000000f4e6         cmp        r10d, 0x0
000000000000f4ea         jle        loc_f580

000000000000f4f0         movsxd     rax, r10d
000000000000f4f3         add        rax, r15
000000000000f4f6         cmp        qword [rsp+0x98+var_78], rax
000000000000f4fb         jl         loc_f432

000000000000f501         mov        rdx, qword [r13]
000000000000f505         mov        r11, qword [rsp+0x98+var_68]
000000000000f50a         mov        rax, qword [rdx+rax*8]
000000000000f50e         test       rax, rax
000000000000f511         je         loc_f586

000000000000f513         mov        rdx, qword [r11+0x18]
000000000000f517         mov        rdi, qword [rax+0x10]
000000000000f51b         lea        rsi, qword [rax+0x18]
000000000000f51f         mov        qword [rsp+0x98+var_80], r9
000000000000f524         mov        rdx, qword [rdx+rbp*8]
000000000000f528         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000f52d         test       rax, rax
000000000000f530         jne        loc_f432

000000000000f536         mov        r9, qword [rsp+0x98+var_80]
000000000000f53b         mov        rsi, qword [r14]
000000000000f53e         add        rsi, r9
000000000000f541         jmp        loc_f3f0
000000000000f546         align      16

                     loc_f550:
000000000000f550         mov        rcx, qword [rsp+0x98+var_88]                ; CODE XREF=sift_states_backward+249, sift_states_backward+268, sift_states_backward+437
000000000000f555         mov        rdi, qword [rsp+0x98+var_98]
000000000000f559         mov        rdx, r15
000000000000f55c         mov        rsi, r13
000000000000f55f         call       update_cur_sifted_state                     ; update_cur_sifted_state
000000000000f564         test       eax, eax
000000000000f566         jne        loc_f5d5

000000000000f568         sub        qword [rsp+0x98+var_90], 0x8
000000000000f56e         test       r15, r15
000000000000f571         jne        loc_f374

                     loc_f577:
000000000000f577         xor        eax, eax                                    ; CODE XREF=sift_states_backward+158
000000000000f579         jmp        loc_f5d5
000000000000f57b         align      128

                     loc_f580:
000000000000f580         jne        loc_f432                                    ; CODE XREF=sift_states_backward+538

                     loc_f586:
000000000000f586         mov        rsi, qword [r14]                            ; CODE XREF=sift_states_backward+577
000000000000f589         add        rsi, r9
000000000000f58c         jmp        loc_f3f0
000000000000f591         align      8

                     loc_f598:
000000000000f598         mov        rax, qword [rsp+0x98+var_98]                ; CODE XREF=sift_states_backward+178
000000000000f59c         add        dword [rsp+0x98+var_6C], 0x1
000000000000f5a1         mov        ecx, dword [rsp+0x98+var_6C]
000000000000f5a5         cmp        dword [rax+0xe0], ecx
000000000000f5ab         jge        loc_f3a4

                     loc_f5b1:
000000000000f5b1         mov        rdx, qword [rsp+0x98+var_90]                ; argument "__n" for method j_memset, CODE XREF=sift_states_backward+206
000000000000f5b6         xor        esi, esi                                    ; argument "__c" for method j_memset
000000000000f5b8         call       j_memset                                    ; memset
000000000000f5bd         mov        rdi, qword [rsp+0x98+var_48]                ; argument "__ptr" for method j_free
000000000000f5c2         call       j_free                                      ; free
000000000000f5c7         xor        eax, eax
000000000000f5c9         jmp        loc_f5e5
000000000000f5cb         align      16

                     loc_f5d0:
000000000000f5d0         mov        eax, 0xc                                    ; CODE XREF=sift_states_backward+422

                     loc_f5d5:
000000000000f5d5         mov        rdi, qword [rsp+0x98+var_48]                ; argument "__ptr" for method j_free, CODE XREF=sift_states_backward+119, sift_states_backward+662, sift_states_backward+681
000000000000f5da         mov        dword [rsp+0x98+var_98], eax
000000000000f5dd         call       j_free                                      ; free
000000000000f5e2         mov        eax, dword [rsp+0x98+var_98]

                     loc_f5e5:
000000000000f5e5         mov        rdx, qword [rsp+0x98+var_40]                ; CODE XREF=sift_states_backward+761, sift_states_backward+825
000000000000f5ea         xor        rdx, qword [fs:0x28]
000000000000f5f3         jne        loc_f60b

000000000000f5f5         add        rsp, 0x68
000000000000f5f9         pop        rbx
000000000000f5fa         pop        rbp
000000000000f5fb         pop        r12
000000000000f5fd         pop        r13
000000000000f5ff         pop        r14
000000000000f601         pop        r15
000000000000f603         ret
                        ; endp

                     loc_f604:
000000000000f604         mov        eax, 0xc                                    ; CODE XREF=sift_states_backward+84
000000000000f609         jmp        loc_f5e5

                     loc_f60b:
000000000000f60b         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=sift_states_backward+803
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_0: int, 8
        ;    var_40: int64_t, -64
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_68: int32_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int32_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int32_t, -184
        ;    var_BA: int8_t, -186
        ;    var_BB: int8_t, -187
        ;    var_BC: int8_t, -188
        ;    var_BD: int8_t, -189
        ;    var_BE: int8_t, -190
        ;    var_BF: int8_t, -191
        ;    var_C0: int8_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208
        ;    var_D8: int32_t, -216
        ;    var_E0: int64_t, -224
        ;    var_E8: int64_t, -232
        ;    var_F0: int64_t, -240
        ;    var_F8: int64_t, -248
        ;    var_100: int64_t, -256
        ;    var_108: int64_t, -264
        ;    var_110: int64_t, -272
        ;    var_118: int64_t, -280
        ;    var_120: int64_t, -288
        ;    var_130: int64_t, -304
        ;    var_138: int64_t, -312
        ;    var_140: int64_t, -320
        ;    var_148: int64_t, -328
        ;    var_158: int64_t, -344
        ;    var_168: -360
        ;    var_170: int64_t, -368
        ;    var_178: int64_t, -376
        ;    var_180: int64_t, -384
        ;    var_188: int64_t, -392
        ;    var_190: int64_t, -400
        ;    var_194: int32_t, -404
        ;    var_198: int32_t, -408
        ;    var_199: int8_t, -409
        ;    var_19A: int8_t, -410
        ;    var_1A0: int32_t, -416
        ;    var_1A8: int64_t, -424
        ;    var_1B0: int64_t, -432
        ;    var_1B8: int64_t, -440
        ;    var_1BC: int32_t, -444
        ;    var_1C0: int32_t, -448
        ;    var_1C8: int64_t, -456
        ;    var_1D0: int64_t, -464
        ;    var_1D8: int64_t, -472
        ;    var_1E0: int64_t, -480
        ;    var_1E8: int64_t, -488
        ;    var_1F0: int64_t, -496
        ;    var_1F8: int64_t, -504
        ;    var_200: int64_t, -512
        ;    var_208: int64_t, -520
        ;    var_20C: int32_t, -524
        ;    var_210: int32_t, -528
        ;    var_218: int64_t, -536
        ;    var_220: int64_t, -544
        ;    var_228: int64_t, -552
        ;    var_230: int64_t, -560
        ;    var_238: int64_t, -568
        ;    var_240: int64_t, -576
        ;    var_248: int64_t, -584
        ;    var_250: int64_t, -592
        ;    var_258: int64_t, -600
        ;    var_260: int64_t, -608
        ;    var_268: int64_t, -616


                     re_search_internal:
000000000000f610         push       r15                                         ; End of unwind block (FDE at 0x19688), Begin of unwind block (FDE at 0x196e8), CODE XREF=re_search_stub+266, rpl_regexec+88
000000000000f612         push       r14
000000000000f614         push       r13
000000000000f616         push       r12
000000000000f618         mov        r13, r9
000000000000f61b         push       rbp
000000000000f61c         push       rbx
000000000000f61d         mov        rbp, rcx
000000000000f620         mov        ecx, 0x20
000000000000f625         mov        r12, r8
000000000000f628         sub        rsp, aLib64ldlinuxx8                        ; "/lib64/ld-linux-x86-64.so.2"
000000000000f62f         mov        rbx, qword [rdi]
000000000000f632         mov        rax, qword [rsp+0x268+arg_8]
000000000000f63a         mov        qword [rsp+0x268+var_220], rdi
000000000000f63f         mov        qword [rsp+0x268+var_1F0], rsi
000000000000f644         mov        rsi, rdi
000000000000f647         lea        rdi, qword [rsp+0x268+var_148]
000000000000f64f         mov        qword [rsp+0x268+var_1E0], rdx
000000000000f657         mov        qword [rsp+0x268+var_230], rbx
000000000000f65c         mov        qword [rsp+0x268+var_1B0], rax
000000000000f664         mov        qword [rsp+0x268+var_268], rdi
000000000000f668         mov        rax, qword [fs:0x28]
000000000000f671         mov        qword [rsp+0x268+var_40], rax
000000000000f679         xor        eax, eax
000000000000f67b         rep stosq  qword [rdi], rax
000000000000f67e         mov        rdi, qword [rsi+0x20]
000000000000f682         mov        qword [rsp+0x268+var_B0], rbx
000000000000f68a         test       rdi, rdi
000000000000f68d         mov        qword [rsp+0x268+var_200], rdi
000000000000f692         je         loc_f6b6

000000000000f694         movzx      edx, byte [rsi+0x38]
000000000000f698         test       dl, 0x8
000000000000f69b         je         loc_fb30

000000000000f6a1         cmp        rbp, r8
000000000000f6a4         je         loc_fb30

000000000000f6aa         and        edx, 0x1
000000000000f6ad         cmove      rax, rdi
000000000000f6b1         mov        qword [rsp+0x268+var_200], rax

                     loc_f6b6:
000000000000f6b6         mov        rax, qword [rsp+0x268+var_220]              ; CODE XREF=re_search_internal+130, re_search_internal+1321
000000000000f6bb         mov        qword [rsp+0x268+var_1D0], 0x0
000000000000f6c7         mov        rax, qword [rax+0x30]
000000000000f6cb         cmp        rax, qword [rsp+0x268+arg_0]
000000000000f6d3         jae        loc_f6f4

000000000000f6d5         mov        rcx, qword [rsp+0x268+arg_0]
000000000000f6dd         lea        rdx, qword [rcx-1]
000000000000f6e1         sub        rdx, rax
000000000000f6e4         sub        qword [rsp+0x268+arg_0], rdx
000000000000f6ec         mov        qword [rsp+0x268+var_1D0], rdx

                     loc_f6f4:
000000000000f6f4         mov        rsi, qword [rsp+0x268+var_220]              ; CODE XREF=re_search_internal+195
000000000000f6f9         cmp        qword [rsi+0x10], 0x0
000000000000f6fe         je         loc_10590

000000000000f704         mov        rdi, qword [rsp+0x268+var_230]
000000000000f709         mov        rax, qword [rdi+0x48]
000000000000f70d         test       rax, rax
000000000000f710         je         loc_10590

000000000000f716         mov        rdx, qword [rdi+0x50]
000000000000f71a         test       rdx, rdx
000000000000f71d         je         loc_10590

000000000000f723         mov        rcx, qword [rdi+0x58]
000000000000f727         test       rcx, rcx
000000000000f72a         je         loc_10590

000000000000f730         cmp        qword [rdi+0x60], 0x0
000000000000f735         je         loc_10590

000000000000f73b         cmp        qword [rax+0x10], 0x0
000000000000f740         jne        loc_f778

000000000000f742         cmp        qword [rdx+0x10], 0x0
000000000000f747         jne        loc_f778

000000000000f749         cmp        qword [rcx+0x10], 0x0
000000000000f74e         je         loc_f756

000000000000f750         cmp        byte [rsi+0x38], 0x0
000000000000f754         js         loc_f778

                     loc_f756:
000000000000f756         test       rbp, rbp                                    ; CODE XREF=re_search_internal+318
000000000000f759         je         loc_f76c

000000000000f75b         test       r12, r12
000000000000f75e         mov        dword [rsp+0x268+var_20C], 0x1
000000000000f766         jne        loc_10189

                     loc_f76c:
000000000000f76c         xor        r12d, r12d                                  ; CODE XREF=re_search_internal+329
000000000000f76f         xor        ebp, ebp
000000000000f771         nop        dword [rax]

                     loc_f778:
000000000000f778         cmp        qword [rsp+0x268+arg_0], 0x0                ; CODE XREF=re_search_internal+304, re_search_internal+311, re_search_internal+324
000000000000f781         mov        dword [rsp+0x268+var_210], 0x1
000000000000f789         je         loc_fb10

                     loc_f78f:
000000000000f78f         mov        r11, qword [rsp+0x268+var_230]              ; CODE XREF=re_search_internal+1303
000000000000f794         mov        rax, qword [rsp+0x268+var_220]
000000000000f799         mov        rdi, qword [rsp+0x268+var_1E0]
000000000000f7a1         mov        rsi, qword [r11+0x10]
000000000000f7a5         mov        rbx, qword [rax+0x28]
000000000000f7a9         mov        edx, dword [r11+0xb4]
000000000000f7b0         mov        rax, qword [rax+0x18]
000000000000f7b4         mov        qword [rsp+0x268+var_F0], rdi
000000000000f7bc         mov        qword [rsp+0x268+var_F8], rdi
000000000000f7c4         mov        qword [rsp+0x268+var_260], rsi
000000000000f7c9         lea        rsi, qword [rsi+1]
000000000000f7cd         mov        qword [rsp+0x268+var_1B8], rbx
000000000000f7d5         movsxd     rcx, edx
000000000000f7d8         shr        rax, 0x16
000000000000f7dc         mov        qword [rsp+0x268+var_D0], rbx
000000000000f7e4         and        eax, 0x1
000000000000f7e7         cmp        rsi, rcx
000000000000f7ea         mov        dword [rsp+0x268+var_B8], edx
000000000000f7f1         cmovl      rsi, rcx
000000000000f7f5         lea        rcx, qword [rdi+1]
000000000000f7f9         mov        byte [rsp+0x268+var_C0], al
000000000000f800         mov        qword [rsp+0x268+var_E0], rdi
000000000000f808         mov        qword [rsp+0x268+var_E8], rdi
000000000000f810         cmp        rsi, rcx
000000000000f813         mov        rdi, qword [rsp+0x268+var_268]
000000000000f817         cmovg      rsi, rcx
000000000000f81b         test       rbx, rbx
000000000000f81e         mov        rcx, qword [rsp+0x268+var_1F0]
000000000000f823         setne      bl
000000000000f826         or         eax, ebx
000000000000f828         mov        byte [rsp+0x268+var_BD], al
000000000000f82f         movzx      eax, byte [r11+0xb0]
000000000000f837         mov        qword [rsp+0x268+var_148], rcx
000000000000f83f         mov        edx, eax
000000000000f841         shr        al, 0x3
000000000000f844         shr        dl, 0x2
000000000000f847         and        eax, 0x1
000000000000f84a         and        edx, 0x1
000000000000f84d         mov        byte [rsp+0x268+var_BE], al
000000000000f854         mov        byte [rsp+0x268+var_BF], dl
000000000000f85b         call       re_string_realloc_buffers                   ; re_string_realloc_buffers
000000000000f860         test       eax, eax
000000000000f862         mov        dword [rsp+0x268+var_20C], eax
000000000000f866         jne        loc_10160

000000000000f86c         mov        rdi, qword [rsp+0x268+var_230]
000000000000f871         lea        rax, qword [rdi+0xb8]
000000000000f878         mov        qword [rsp+0x268+var_C8], rax
000000000000f880         movzx      eax, byte [rdi+0xb0]
000000000000f887         mov        byte [rsp+0x268+var_260], al
000000000000f88b         shr        al, 0x4
000000000000f88e         and        eax, 0x1
000000000000f891         cmp        byte [rsp+0x268+var_BD], 0x0
000000000000f899         mov        byte [rsp+0x268+var_BA], al
000000000000f8a0         jne        loc_f8c5

000000000000f8a2         mov        rsi, qword [rsp+0x268+var_230]
000000000000f8a7         mov        rax, qword [rsp+0x268+var_1F0]
000000000000f8ac         cmp        dword [rsi+0xb4], 0x1
000000000000f8b3         mov        qword [rsp+0x268+var_140], rax
000000000000f8bb         mov        rax, qword [rsp+0x268+var_1E0]
000000000000f8c3         jle        loc_f8c7

                     loc_f8c5:
000000000000f8c5         xor        eax, eax                                    ; CODE XREF=re_search_internal+656

                     loc_f8c7:
000000000000f8c7         mov        qword [rsp+0x268+var_118], rax              ; CODE XREF=re_search_internal+691
000000000000f8cf         mov        qword [rsp+0x268+var_110], rax
000000000000f8d7         mov        rax, qword [rsp+0x268+var_220]
000000000000f8dc         mov        qword [rsp+0x268+var_E0], r13
000000000000f8e4         mov        qword [rsp+0x268+var_E8], r13
000000000000f8ec         movzx      eax, byte [rax+0x38]
000000000000f8f0         mov        byte [rsp+0x268+var_260], al
000000000000f8f4         shr        al, 0x7
000000000000f8f7         mov        byte [rsp+0x268+var_BB], al
000000000000f8fe         mov        rax, qword [rsp+0x268+var_230]
000000000000f903         mov        r14, qword [rax+0x98]
000000000000f90a         mov        eax, dword [rsp+0x268+arg_10]
000000000000f911         mov        qword [rsp+0x268+var_A0], 0xffffffffffffffff
000000000000f91d         lea        r13, qword [r14+r14]
000000000000f921         mov        dword [rsp+0x268+var_A8], eax
000000000000f928         test       r13, r13
000000000000f92b         jle        loc_f97f

000000000000f92d         movabs     rax, 0x666666666666666
000000000000f937         cmp        r13, rax
000000000000f93a         jg         loc_10680

000000000000f940         lea        rdi, qword [r13+r14*8]
000000000000f945         shl        rdi, 0x3                                    ; argument "__size" for method j_malloc
000000000000f949         call       j_malloc                                    ; malloc
000000000000f94e         mov        rdi, r14
000000000000f951         mov        r15, rax
000000000000f954         mov        qword [rsp+0x268+var_70], rax
000000000000f95c         shl        rdi, 0x4                                    ; argument "__size" for method j_malloc
000000000000f960         call       j_malloc                                    ; malloc
000000000000f965         test       rax, rax
000000000000f968         mov        qword [rsp+0x268+var_50], rax
000000000000f970         je         loc_10680

000000000000f976         test       r15, r15
000000000000f979         je         loc_10680

                     loc_f97f:
000000000000f97f         cmp        qword [rsp+0x268+arg_0], 0x1                ; CODE XREF=re_search_internal+795
000000000000f988         mov        qword [rsp+0x268+var_78], r13
000000000000f990         mov        dword [rsp+0x268+var_68], 0x1
000000000000f99b         mov        qword [rsp+0x268+var_58], r13
000000000000f9a3         jbe        loc_10ac8

                     loc_f9a9:
000000000000f9a9         mov        rax, qword [rsp+0x268+var_108]              ; CODE XREF=re_search_internal+5316
000000000000f9b1         movabs     rdx, 0x1ffffffffffffffe
000000000000f9bb         cmp        rax, rdx
000000000000f9be         ja         loc_10680

000000000000f9c4         lea        rdi, qword [0x8+rax*8]                      ; argument "__size" for method j_malloc
000000000000f9cc         call       j_malloc                                    ; malloc
000000000000f9d1         test       rax, rax
000000000000f9d4         mov        rdi, rax
000000000000f9d7         mov        qword [rsp+0x268+var_90], rax
000000000000f9df         je         loc_106d0

                     loc_f9e5:
000000000000f9e5         mov        eax, dword [rsp+0x268+arg_10]               ; CODE XREF=re_search_internal+5334
000000000000f9ec         mov        qword [rsp+0x268+var_190], rbp
000000000000f9f4         and        eax, 0x1
000000000000f9f7         cmp        eax, 0x1
000000000000f9fa         sbb        eax, eax
000000000000f9fc         and        eax, 0x2
000000000000f9ff         add        eax, 0x4
000000000000fa02         mov        dword [rsp+0x268+var_D8], eax
000000000000fa09         xor        eax, eax
000000000000fa0b         cmp        rbp, r12
000000000000fa0e         setle      al
000000000000fa11         lea        eax, dword [rax+rax-1]
000000000000fa15         mov        dword [rsp+0x268+var_1BC], eax
000000000000fa1c         mov        rax, r12
000000000000fa1f         cmovle     rax, rbp
000000000000fa23         mov        qword [rsp+0x268+var_1D8], rax
000000000000fa2b         mov        rax, r12
000000000000fa2e         cmovge     rax, rbp
000000000000fa32         cmp        qword [rsp+0x268+var_200], 0x0
000000000000fa38         mov        qword [rsp+0x268+var_1F8], rax
000000000000fa3d         mov        rax, qword [rsp+0x268+var_230]
000000000000fa42         mov        esi, dword [rax+0xb4]
000000000000fa48         mov        eax, 0x8
000000000000fa4d         mov        dword [rsp+0x268+var_1A0], esi
000000000000fa54         je         loc_fa8f

000000000000fa56         cmp        esi, 0x1
000000000000fa59         mov        ecx, 0x4
000000000000fa5e         je         loc_fa7e

000000000000fa60         mov        rax, qword [rsp+0x268+var_220]
000000000000fa65         test       byte [rax+0x1a], 0x40
000000000000fa69         jne        loc_107ee

000000000000fa6f         cmp        qword [rsp+0x268+var_1B8], 0x0
000000000000fa78         jne        loc_107ee

                     loc_fa7e:
000000000000fa7e         xor        edx, edx                                    ; CODE XREF=re_search_internal+1102, re_search_internal+4576
000000000000fa80         cmp        rbp, r12
000000000000fa83         movzx      eax, bl
000000000000fa86         setle      dl
000000000000fa89         or         eax, ecx
000000000000fa8b         add        edx, edx
000000000000fa8d         or         eax, edx

                     loc_fa8f:
000000000000fa8f         cmp        rbp, qword [rsp+0x268+var_1F8]              ; CODE XREF=re_search_internal+1092
000000000000fa94         setg       cl
000000000000fa97         cmp        rbp, qword [rsp+0x268+var_1D8]
000000000000fa9f         setl       dl
000000000000faa2         or         cl, dl
000000000000faa4         jne        loc_10579

000000000000faaa         lea        rcx, qword [rsp+0x268+var_190]
000000000000fab2         cmp        rbp, r12
000000000000fab5         mov        edx, 0x0
000000000000faba         cmovle     rdx, rcx
000000000000fabe         test       rdx, rdx
000000000000fac1         mov        qword [rsp+0x268+var_1A8], rdx
000000000000fac9         setne      byte [rsp+0x268+var_199]
000000000000fad1         sub        eax, 0x4
000000000000fad4         mov        dword [rsp+0x268+var_1C0], eax
000000000000fadb         lea        rax, qword [rsp+0x268+var_198]
000000000000fae3         mov        qword [rsp+0x268+var_240], rax

                     loc_fae8:
000000000000fae8         mov        eax, dword [rsp+0x268+var_1C0]              ; CODE XREF=re_search_internal+3939
000000000000faef         cmp        eax, 0x4
000000000000faf2         ja         loc_106dd

000000000000faf8         lea        rcx, qword [switch_table_16bc0]             ; switch_table_16bc0
000000000000faff         movsxd     rax, dword [rcx+rax*4]
000000000000fb03         add        rax, rcx
000000000000fb06         jmp        rax                                         ; switch statement using table at 0x16bc0, with 5 cases, 0xfb3e,0xfbe8,0x10062,0x100d4
000000000000fb08         align      16

                     loc_fb10:
000000000000fb10         mov        rax, qword [rsp+0x268+var_230]              ; CODE XREF=re_search_internal+377
000000000000fb15         cmp        qword [rax+0x98], 0x0
000000000000fb1d         setne      al
000000000000fb20         movzx      eax, al
000000000000fb23         mov        dword [rsp+0x268+var_210], eax
000000000000fb27         jmp        loc_f78f
000000000000fb2c         align      16

                     loc_fb30:
000000000000fb30         mov        qword [rsp+0x268+var_200], 0x0              ; CODE XREF=re_search_internal+139, re_search_internal+148
000000000000fb39         jmp        loc_f6b6

                     loc_fb3e:
000000000000fb3e         cmp        qword [rsp+0x268+var_1F8], rbp              ; case 2, CODE XREF=re_search_internal+1270
000000000000fb43         jle        loc_fb9f

000000000000fb45         mov        rax, qword [rsp+0x268+var_1F0]
000000000000fb4a         mov        rdi, qword [rsp+0x268+var_200]
000000000000fb4f         movzx      edx, byte [rax+rbp]
000000000000fb53         lea        rax, qword [rbp+1]
000000000000fb57         cmp        byte [rdi+rdx], 0x0
000000000000fb5b         jne        loc_fbe8

000000000000fb61         mov        rsi, qword [rsp+0x268+var_200]
000000000000fb66         mov        rcx, qword [rsp+0x268+var_1F8]
000000000000fb6b         mov        rdi, qword [rsp+0x268+var_1F0]
000000000000fb70         jmp        loc_fb8a
000000000000fb72         align      8

                     loc_fb78:
000000000000fb78         movzx      edx, byte [rdi+rax]                         ; CODE XREF=re_search_internal+1408
000000000000fb7c         lea        rax, qword [rax+1]
000000000000fb80         cmp        byte [rsi+rdx], 0x0
000000000000fb84         jne        loc_10d21

                     loc_fb8a:
000000000000fb8a         cmp        rcx, rax                                    ; CODE XREF=re_search_internal+1376
000000000000fb8d         mov        rbp, rax
000000000000fb90         jne        loc_fb78

                     loc_fb92:
000000000000fb92         mov        rax, qword [rsp+0x268+var_1F8]              ; CODE XREF=re_search_internal+2751
000000000000fb97         mov        qword [rsp+0x268+var_190], rax

                     loc_fb9f:
000000000000fb9f         cmp        qword [rsp+0x268+var_1F8], rbp              ; CODE XREF=re_search_internal+1331, re_search_internal+2647
000000000000fba4         jne        loc_fbe8

000000000000fba6         xor        eax, eax
000000000000fba8         mov        rsi, qword [rsp+0x268+var_1F8]
000000000000fbad         cmp        qword [rsp+0x268+var_1E0], rsi
000000000000fbb5         jle        loc_fbc0

000000000000fbb7         mov        rax, qword [rsp+0x268+var_1F0]
000000000000fbbc         movzx      eax, byte [rax+rsi]

                     loc_fbc0:
000000000000fbc0         mov        rsi, qword [rsp+0x268+var_1B8]              ; CODE XREF=re_search_internal+1445
000000000000fbc8         test       rsi, rsi
000000000000fbcb         je         loc_fbd1

000000000000fbcd         movzx      eax, byte [rsi+rax]

                     loc_fbd1:
000000000000fbd1         mov        rdi, qword [rsp+0x268+var_200]              ; CODE XREF=re_search_internal+1467
000000000000fbd6         cmp        byte [rdi+rax], 0x0
000000000000fbda         je         loc_10579

000000000000fbe0         mov        rbp, qword [rsp+0x268+var_1F8]
000000000000fbe5         nop        dword [rax]

                     loc_fbe8:
000000000000fbe8         mov        edx, dword [rsp+0x268+arg_10]               ; case 4, CODE XREF=re_search_internal+1270, re_search_internal+1355, re_search_internal+1428, re_search_internal+2687, re_search_internal+2863, re_search_internal+2880, re_search_internal+4370, re_search_internal+5913
000000000000fbef         mov        rdi, qword [rsp+0x268+var_268]
000000000000fbf3         mov        rsi, rbp
000000000000fbf6         call       re_string_reconstruct                       ; re_string_reconstruct
000000000000fbfb         test       eax, eax
000000000000fbfd         mov        dword [rsp+0x268+var_20C], eax
000000000000fc01         jne        loc_10160

000000000000fc07         cmp        dword [rsp+0x268+var_1A0], 0x1
000000000000fc0f         je         loc_fc2d

000000000000fc11         cmp        qword [rsp+0x268+var_118], 0x0
000000000000fc1a         je         loc_fc2d

000000000000fc1c         mov        rax, qword [rsp+0x268+var_138]
000000000000fc24         cmp        dword [rax], 0xffffffff
000000000000fc27         je         loc_10551

                     loc_fc2d:
000000000000fc2d         mov        rbx, qword [rsp+0x268+var_B0]               ; CODE XREF=re_search_internal+1535, re_search_internal+1546
000000000000fc35         movzx      eax, byte [rsp+0x268+var_210]
000000000000fc3a         mov        dword [rsp+0x268+var_68], 0x0
000000000000fc45         mov        qword [rsp+0x268+var_80], 0x0
000000000000fc51         mov        qword [rsp+0x268+var_88], 0x0
000000000000fc5d         mov        dword [rsp+0x268+var_198], 0x0
000000000000fc68         mov        r14, qword [rbx+0x48]
000000000000fc6c         and        eax, 0x1
000000000000fc6f         mov        byte [rsp+0x268+var_19A], al
000000000000fc76         mov        rax, qword [rsp+0x268+var_100]
000000000000fc7e         cmp        byte [r14+0x68], 0x0
000000000000fc83         mov        qword [rsp+0x268+var_260], rax
000000000000fc88         js         loc_10600

                     loc_fc8e:
000000000000fc8e         mov        rax, qword [rsp+0x268+var_90]               ; CODE XREF=re_search_internal+4115, re_search_internal+4471, re_search_internal+5698
000000000000fc96         test       rax, rax
000000000000fc99         je         loc_fcb2

000000000000fc9b         cmp        qword [rbx+0x98], 0x0
000000000000fca3         mov        rdi, qword [rsp+0x268+var_260]
000000000000fca8         mov        qword [rax+rdi*8], r14
000000000000fcac         jne        loc_10b9b

                     loc_fcb2:
000000000000fcb2         movzx      eax, byte [rsp+0x268+var_199]               ; CODE XREF=re_search_internal+1673
000000000000fcba         mov        byte [rsp+0x268+var_250], al
000000000000fcbe         movzx      eax, byte [r14+0x68]

                     loc_fcc3:
000000000000fcc3         test       al, 0x10                                    ; CODE XREF=re_search_internal+5569
000000000000fcc5         mov        qword [rsp+0x268+var_248], 0xffffffffffffffff
000000000000fcce         mov        qword [rsp+0x268+var_238], 0x0
000000000000fcd7         jne        loc_10b60

                     loc_fcdd:
000000000000fcdd         mov        rax, qword [rsp+0x268+var_1A8]              ; CODE XREF=re_search_internal+5494, re_search_internal+5604
000000000000fce5         mov        r8, qword [rsp+0x268+var_100]
000000000000fced         mov        qword [rsp+0x268+var_218], rax
000000000000fcf2         lea        rax, qword [rsp+0x268+var_188]
000000000000fcfa         mov        qword [rsp+0x268+var_208], rax
000000000000fcff         lea        rax, qword [rsp+0x268+var_194]
000000000000fd07         mov        qword [rsp+0x268+var_1E8], rax
000000000000fd0f         jmp        loc_fd6c
000000000000fd11         align      8

                     loc_fd18:
000000000000fd18         cmp        r14, r13                                    ; CODE XREF=re_search_internal+2023, re_search_internal+5395, re_search_internal+5411
000000000000fd1b         mov        r8, qword [rsp+0x268+var_100]
000000000000fd23         sete       al
000000000000fd26         and        byte [rsp+0x268+var_250], al
000000000000fd2a         movzx      eax, byte [r13+0x68]
000000000000fd2f         cmove      rbx, qword [rsp+0x268+var_260]
000000000000fd35         test       al, 0x10
000000000000fd37         mov        qword [rsp+0x268+var_260], rbx
000000000000fd3c         je         loc_fd69

000000000000fd3e         test       al, al
000000000000fd40         js         loc_10200

                     loc_fd46:
000000000000fd46         mov        eax, dword [rsp+0x268+var_210]              ; CODE XREF=re_search_internal+3095
000000000000fd4a         mov        qword [rsp+0x268+var_248], r8
000000000000fd4f         test       eax, eax
000000000000fd51         je         loc_fe76

000000000000fd57         mov        qword [rsp+0x268+var_238], 0x1
000000000000fd60         mov        qword [rsp+0x268+var_218], 0x0

                     loc_fd69:
000000000000fd69         mov        r14, r13                                    ; CODE XREF=re_search_internal+1836, re_search_internal+3089

                     loc_fd6c:
000000000000fd6c         cmp        qword [rsp+0x268+var_E0], r8                ; CODE XREF=re_search_internal+1791
000000000000fd74         jle        loc_fe64

000000000000fd7a         mov        rax, qword [rsp+0x268+var_108]
000000000000fd82         lea        rbx, qword [r8+1]
000000000000fd86         cmp        rbx, rax
000000000000fd89         jge        loc_10230

                     loc_fd8f:
000000000000fd8f         mov        rax, qword [rsp+0x268+var_118]              ; CODE XREF=re_search_internal+3112
000000000000fd97         cmp        rbx, rax
000000000000fd9a         jge        loc_10520

                     loc_fda0:
000000000000fda0         test       byte [r14+0x68], 0x20                       ; CODE XREF=re_search_internal+3864
000000000000fda5         jne        loc_10270

                     loc_fdab:
000000000000fdab         lea        rax, qword [r8+1]                           ; CODE XREF=re_search_internal+3158, re_search_internal+4006
000000000000fdaf         mov        qword [rsp+0x268+var_100], rax
000000000000fdb7         mov        rax, qword [rsp+0x268+var_140]
000000000000fdbf         movzx      r13d, byte [rax+r8]

                     loc_fdc4:
000000000000fdc4         mov        rax, qword [r14+0x58]                       ; CODE XREF=re_search_internal+4247
000000000000fdc8         test       rax, rax
000000000000fdcb         je         loc_104e0

000000000000fdd1         mov        r13, qword [rax+r13*8]

                     loc_fdd5:
000000000000fdd5         cmp        qword [rsp+0x268+var_90], 0x0               ; CODE XREF=re_search_internal+3849, re_search_internal+4021
000000000000fdde         je         loc_fdf4

                     loc_fde0:
000000000000fde0         mov        rsi, qword [rsp+0x268+var_268]              ; CODE XREF=re_search_internal+4067
000000000000fde4         mov        rdi, qword [rsp+0x268+var_240]
000000000000fde9         mov        rdx, r13
000000000000fdec         call       merge_state_with_log                        ; merge_state_with_log
000000000000fdf1         mov        r13, rax

                     loc_fdf4:
000000000000fdf4         test       r13, r13                                    ; CODE XREF=re_search_internal+1998
000000000000fdf7         jne        loc_fd18

000000000000fdfd         mov        ecx, dword [rsp+0x268+var_198]
000000000000fe04         mov        rdi, qword [rsp+0x268+var_90]
000000000000fe0c         test       ecx, ecx
000000000000fe0e         jne        loc_106d0

000000000000fe14         test       rdi, rdi
000000000000fe17         je         loc_fe64

000000000000fe19         movzx      eax, byte [rsp+0x268+var_19A]
000000000000fe21         xor        eax, 0x1
000000000000fe24         test       byte [rsp+0x268+var_238], al
000000000000fe28         jne        loc_fe64

                     loc_fe2a:
000000000000fe2a         mov        rsi, qword [rsp+0x268+var_88]               ; CODE XREF=re_search_internal+3048
000000000000fe32         mov        rax, qword [rsp+0x268+var_100]
000000000000fe3a         xor        ecx, ecx
000000000000fe3c         jmp        loc_fe53
000000000000fe3e         align      64

                     loc_fe40:
000000000000fe40         cmp        qword [rdi+rdx*8], 0x0                      ; CODE XREF=re_search_internal+2122
000000000000fe45         mov        rax, rdx
000000000000fe48         mov        ecx, 0x1
000000000000fe4d         jne        loc_101c0

                     loc_fe53:
000000000000fe53         lea        rdx, qword [rax+1]                          ; CODE XREF=re_search_internal+2092
000000000000fe57         cmp        rsi, rdx
000000000000fe5a         jge        loc_fe40

000000000000fe5c         test       cl, cl
000000000000fe5e         jne        loc_10d2e

                     loc_fe64:
000000000000fe64         mov        rax, qword [rsp+0x268+var_218]              ; CODE XREF=re_search_internal+1892, re_search_internal+2055, re_search_internal+2072, re_search_internal+5401, re_search_internal+5926
000000000000fe69         test       rax, rax
000000000000fe6c         je         loc_fe76

000000000000fe6e         mov        rdi, qword [rsp+0x268+var_260]
000000000000fe73         add        qword [rax], rdi

                     loc_fe76:
000000000000fe76         mov        rax, qword [rsp+0x268+var_248]              ; CODE XREF=re_search_internal+1857, re_search_internal+2140, re_search_internal+5479, re_search_internal+5631
000000000000fe7b         cmp        rax, 0xffffffffffffffff
000000000000fe7f         je         loc_10540

000000000000fe85         cmp        rax, 0xfffffffffffffffe
000000000000fe89         je         loc_10680

000000000000fe8f         mov        rax, qword [rsp+0x268+var_248]
000000000000fe94         mov        qword [rsp+0x268+var_A0], rax
000000000000fe9c         mov        rax, qword [rsp+0x268+var_220]
000000000000fea1         test       byte [rax+0x38], 0x10
000000000000fea5         jne        loc_10660

000000000000feab         cmp        qword [rsp+0x268+arg_0], 0x1
000000000000feb4         jbe        loc_107ac

000000000000feba         mov        rcx, qword [rsp+0x268+var_248]
000000000000febf         mov        rbx, qword [rsp+0x268+var_90]
000000000000fec7         mov        rdi, qword [rsp+0x268+var_268]
000000000000fecb         mov        rax, qword [rbx+rcx*8]
000000000000fecf         mov        rsi, qword [rax+0x10]
000000000000fed3         lea        rdx, qword [rax+0x18]
000000000000fed7         call       check_halt_state_context.isra.20            ; check_halt_state_context.isra.20
000000000000fedc         mov        r13, rax
000000000000fedf         mov        qword [rsp+0x268+var_98], rax
000000000000fee7         mov        rax, qword [rsp+0x268+var_230]
000000000000feec         test       byte [rax+0xb0], 0x1
000000000000fef3         jne        loc_ff10

000000000000fef5         mov        rax, qword [rsp+0x268+var_230]
000000000000fefa         cmp        qword [rax+0x98], 0x0
000000000000ff02         je         loc_1089c

                     loc_ff08:
000000000000ff08         mov        r13, qword [rsp+0x268+var_98]               ; CODE XREF=re_search_internal+4569

                     loc_ff10:
000000000000ff10         movabs     rsi, 0x1ffffffffffffffe                     ; CODE XREF=re_search_internal+2275
000000000000ff1a         cmp        qword [rsp+0x268+var_248], rsi
000000000000ff1f         mov        r15, qword [rsp+0x268+var_B0]
000000000000ff27         ja         loc_10b8b

000000000000ff2d         mov        rax, qword [rsp+0x268+var_248]
000000000000ff32         add        rax, 0x1
000000000000ff36         lea        rbx, qword [rax*8]
000000000000ff3e         mov        qword [rsp+0x268+var_260], rax
000000000000ff43         mov        rdi, rbx                                    ; argument "__size" for method j_malloc
000000000000ff46         call       j_malloc                                    ; malloc
000000000000ff4b         test       rax, rax
000000000000ff4e         mov        r12, rax
000000000000ff51         je         loc_10680

000000000000ff57         cmp        qword [r15+0x98], 0x0
000000000000ff5f         je         loc_107f5

000000000000ff65         mov        rdi, rbx                                    ; argument "__size" for method j_malloc
000000000000ff68         call       j_malloc                                    ; malloc
000000000000ff6d         test       rax, rax
000000000000ff70         mov        rbp, rax
000000000000ff73         je         loc_10678

000000000000ff79         mov        r14, qword [rsp+0x268+var_248]
000000000000ff7e         lea        rbx, qword [rsp+0x268+var_188]
000000000000ff86         mov        qword [rsp+0x268+var_258], r15
000000000000ff8b         mov        qword [rsp+0x268+var_250], rax

                     loc_ff90:
000000000000ff90         mov        rax, qword [rsp+0x268+var_260]              ; CODE XREF=re_search_internal+2637
000000000000ff95         xor        esi, esi                                    ; argument "__c" for method j_memset
000000000000ff97         mov        rdi, rbp                                    ; argument "__s" for method j_memset
000000000000ff9a         lea        rdx, qword [rax*8]                          ; argument "__n" for method j_memset
000000000000ffa2         call       j_memset                                    ; memset
000000000000ffa7         pxor       xmm0, xmm0
000000000000ffab         mov        qword [rsp+0x268+var_188], r12
000000000000ffb3         mov        qword [rsp+0x268+var_180], rbp
000000000000ffbb         mov        qword [rsp+0x268+var_178], r13
000000000000ffc3         mov        rsi, rbx
000000000000ffc6         mov        qword [rsp+0x268+var_170], r14
000000000000ffce         mov        rdi, qword [rsp+0x268+var_268]
000000000000ffd2         movaps     xmmword [rbx+0x20], xmm0
000000000000ffd6         mov        qword [rbx+0x30], 0x0
000000000000ffde         call       sift_states_backward                        ; sift_states_backward
000000000000ffe3         mov        rdi, qword [rsp+0x268+var_158]              ; argument "__ptr" for method j_free
000000000000ffeb         mov        r15d, eax
000000000000ffee         call       j_free                                      ; free
000000000000fff3         test       r15d, r15d
000000000000fff6         jne        loc_10c14

000000000000fffc         cmp        qword [r12], 0x0
0000000000010001         jne        loc_10c73

0000000000010007         cmp        qword [rbp], 0x0
000000000001000c         jne        loc_10c73

0000000000010012         mov        rdx, qword [rsp+0x268+var_90]
000000000001001a         nop        word [rax+rax]

                     loc_10020:
0000000000010020         sub        r14, 0x1                                    ; CODE XREF=re_search_internal+2597, re_search_internal+2603
0000000000010024         cmp        r14, 0xffffffffffffffff
0000000000010028         je         loc_10aeb

000000000001002e         mov        rax, qword [rdx+r14*8]
0000000000010032         test       rax, rax
0000000000010035         je         loc_10020

0000000000010037         test       byte [rax+0x68], 0x10
000000000001003b         je         loc_10020

000000000001003d         mov        rsi, qword [rax+0x10]
0000000000010041         mov        rdi, qword [rsp+0x268+var_268]
0000000000010045         lea        rdx, qword [rax+0x18]
0000000000010049         mov        rcx, r14
000000000001004c         call       check_halt_state_context.isra.20            ; check_halt_state_context.isra.20
0000000000010051         mov        r13, rax
0000000000010054         lea        rax, qword [r14+1]
0000000000010058         mov        qword [rsp+0x268+var_260], rax
000000000001005d         jmp        loc_ff90

                     loc_10062:
0000000000010062         cmp        qword [rsp+0x268+var_1F8], rbp              ; case 3, CODE XREF=re_search_internal+1270
0000000000010067         jle        loc_fb9f

000000000001006d         mov        rax, qword [rsp+0x268+var_1F0]
0000000000010072         mov        rdi, qword [rsp+0x268+var_1B8]
000000000001007a         mov        rsi, qword [rsp+0x268+var_200]
000000000001007f         movzx      eax, byte [rax+rbp]
0000000000010083         movzx      edx, byte [rdi+rax]
0000000000010087         lea        rax, qword [rbp+1]
000000000001008b         cmp        byte [rsi+rdx], 0x0
000000000001008f         jne        loc_fbe8

0000000000010095         mov        rsi, qword [rsp+0x268+var_200]
000000000001009a         mov        rdi, qword [rsp+0x268+var_1B8]
00000000000100a2         mov        rcx, qword [rsp+0x268+var_1F8]
00000000000100a7         mov        r8, qword [rsp+0x268+var_1F0]
00000000000100ac         jmp        loc_100c7
00000000000100ae         align      16

                     loc_100b0:
00000000000100b0         movzx      eax, byte [r8+rax]                          ; CODE XREF=re_search_internal+2749
00000000000100b5         movzx      edx, byte [rdi+rax]
00000000000100b9         lea        rax, qword [rbp+1]
00000000000100bd         cmp        byte [rsi+rdx], 0x0
00000000000100c1         jne        loc_10d21

                     loc_100c7:
00000000000100c7         cmp        rcx, rax                                    ; CODE XREF=re_search_internal+2716
00000000000100ca         mov        rbp, rax
00000000000100cd         jne        loc_100b0

00000000000100cf         jmp        loc_fb92

                     loc_100d4:
00000000000100d4         cmp        qword [rsp+0x268+var_1D8], rbp              ; case 1, CODE XREF=re_search_internal+1270
00000000000100dc         jg         loc_10579

00000000000100e2         xor        ecx, ecx
00000000000100e4         mov        rax, rbp
00000000000100e7         mov        rdi, qword [rsp+0x268+var_200]
00000000000100ec         mov        rsi, qword [rsp+0x268+var_1B8]
00000000000100f4         mov        r9, qword [rsp+0x268+var_1D8]
00000000000100fc         mov        r10, qword [rsp+0x268+var_1F0]
0000000000010101         mov        r8, qword [rsp+0x268+var_1E0]
0000000000010109         jmp        loc_10122
000000000001010b         align      16

                     loc_10110:
0000000000010110         sub        rax, 0x1                                    ; CODE XREF=re_search_internal+2859
0000000000010114         mov        ecx, 0x1
0000000000010119         cmp        rax, r9
000000000001011c         jl         loc_10b00

                     loc_10122:
0000000000010122         xor        edx, edx                                    ; CODE XREF=re_search_internal+2809
0000000000010124         cmp        r8, rax
0000000000010127         jle        loc_1012e

0000000000010129         movzx      edx, byte [r10+rax]

                     loc_1012e:
000000000001012e         test       rsi, rsi                                    ; CODE XREF=re_search_internal+2839
0000000000010131         je         loc_10137

0000000000010133         movzx      edx, byte [rsi+rdx]

                     loc_10137:
0000000000010137         cmp        byte [rdi+rdx], 0x0                         ; CODE XREF=re_search_internal+2849
000000000001013b         je         loc_10110

000000000001013d         test       cl, cl
000000000001013f         je         loc_fbe8

0000000000010145         mov        qword [rsp+0x268+var_190], rax
000000000001014d         mov        rbp, rax
0000000000010150         jmp        loc_fbe8
0000000000010155         align      8

                     loc_10158:
0000000000010158         mov        dword [rsp+0x268+var_20C], eax              ; CODE XREF=re_search_internal+4450
000000000001015c         nop        dword [rax]

                     loc_10160:
0000000000010160         mov        rdi, qword [rsp+0x268+var_90]               ; CODE XREF=re_search_internal+598, re_search_internal+1521, re_search_internal+4135, re_search_internal+4757

                     loc_10168:
0000000000010168         call       j_free                                      ; free, CODE XREF=re_search_internal+3961, re_search_internal+4224, re_search_internal+4296, re_search_internal+5164, re_search_internal+5250, re_search_internal+5384, re_search_internal+5510, re_search_internal+5689
000000000001016d         mov        rax, qword [rsp+0x268+var_230]
0000000000010172         cmp        qword [rax+0x98], 0x0
000000000001017a         jne        loc_10aa0

                     loc_10180:
0000000000010180         mov        rdi, qword [rsp+0x268+var_268]              ; CODE XREF=re_search_internal+5299
0000000000010184         call       re_string_destruct                          ; re_string_destruct

                     loc_10189:
0000000000010189         mov        rsi, qword [rsp+0x268+var_40]               ; CODE XREF=re_search_internal+342, re_search_internal+3976
0000000000010191         xor        rsi, qword [fs:0x28]
000000000001019a         mov        eax, dword [rsp+0x268+var_20C]
000000000001019e         jne        loc_10d3b

00000000000101a4         add        rsp, aLib64ldlinuxx8                        ; "/lib64/ld-linux-x86-64.so.2"
00000000000101ab         pop        rbx
00000000000101ac         pop        rbp
00000000000101ad         pop        r12
00000000000101af         pop        r13
00000000000101b1         pop        r14
00000000000101b3         pop        r15
00000000000101b5         ret
                        ; endp
00000000000101b6         align      64

                     loc_101c0:
00000000000101c0         mov        rsi, qword [rsp+0x268+var_268]              ; CODE XREF=re_search_internal+2109
00000000000101c4         mov        rdi, qword [rsp+0x268+var_240]
00000000000101c9         mov        qword [rsp+0x268+var_100], rdx
00000000000101d1         xor        edx, edx
00000000000101d3         call       merge_state_with_log                        ; merge_state_with_log
00000000000101d8         mov        edx, dword [rsp+0x268+var_198]
00000000000101df         test       edx, edx
00000000000101e1         jne        loc_10b1d

00000000000101e7         test       rax, rax
00000000000101ea         jne        loc_10b30

00000000000101f0         mov        rdi, qword [rsp+0x268+var_90]
00000000000101f8         jmp        loc_fe2a
00000000000101fd         align      512

                     loc_10200:
0000000000010200         mov        rsi, qword [r13+0x10]                       ; CODE XREF=re_search_internal+1840
0000000000010204         mov        rdi, qword [rsp+0x268+var_268]
0000000000010208         lea        rdx, qword [r13+0x18]
000000000001020c         mov        rcx, r8
000000000001020f         mov        qword [rsp+0x268+var_258], r8
0000000000010214         call       check_halt_state_context.isra.20            ; check_halt_state_context.isra.20
0000000000010219         test       rax, rax
000000000001021c         mov        r8, qword [rsp+0x268+var_258]
0000000000010221         je         loc_fd69

0000000000010227         jmp        loc_fd46
000000000001022c         align      16

                     loc_10230:
0000000000010230         cmp        rax, qword [rsp+0x268+var_F0]               ; CODE XREF=re_search_internal+1913
0000000000010238         jge        loc_fd8f

                     loc_1023e:
000000000001023e         mov        rdi, qword [rsp+0x268+var_268]              ; CODE XREF=re_search_internal+3870
0000000000010242         lea        esi, dword [rbx+1]
0000000000010245         call       extend_buffers                              ; extend_buffers
000000000001024a         test       eax, eax
000000000001024c         mov        dword [rsp+0x268+var_198], eax
0000000000010253         jne        loc_10b38

0000000000010259         test       byte [r14+0x68], 0x20
000000000001025e         mov        r8, qword [rsp+0x268+var_100]
0000000000010266         je         loc_fdab

000000000001026c         nop        dword [rax]

                     loc_10270:
0000000000010270         cmp        qword [r14+0x10], 0x0                       ; CODE XREF=re_search_internal+1941
0000000000010275         mov        r13, qword [rsp+0x268+var_B0]
000000000001027d         jle        loc_105ab

0000000000010283         lea        rax, qword [r13+0xd8]
000000000001028a         xor        r12d, r12d
000000000001028d         mov        qword [rsp+0x268+var_1C8], rbx
0000000000010295         mov        rbx, r12
0000000000010298         mov        r12, r8
000000000001029b         mov        qword [rsp+0x268+var_228], rax
00000000000102a0         jmp        loc_103f8
00000000000102a5         align      8

                     loc_102a8:
00000000000102a8         test       al, 0x1                                     ; CODE XREF=re_search_internal+3643
00000000000102aa         je         loc_103ea

00000000000102b0         and        ecx, 0x8
00000000000102b3         jne        loc_103ea

                     loc_102b9:
00000000000102b9         test       dl, 0x20                                    ; CODE XREF=re_search_internal+3652, re_search_internal+3660
00000000000102bc         je         loc_102c6

00000000000102be         test       al, 0x2
00000000000102c0         je         loc_103ea

                     loc_102c6:
00000000000102c6         and        edx, 0x80                                   ; CODE XREF=re_search_internal+3244
00000000000102cc         je         loc_102e0

00000000000102ce         test       al, 0x8
00000000000102d0         je         loc_103ea

00000000000102d6         nop        word [cs:rax+rax]

                     loc_102e0:
00000000000102e0         mov        rcx, qword [rsp+0x268+var_268]              ; CODE XREF=re_search_internal+3260, re_search_internal+3601
00000000000102e4         mov        rsi, qword [rsp+0x268+var_228]
00000000000102e9         mov        r8, r12
00000000000102ec         mov        rdx, r15
00000000000102ef         mov        rdi, rbp
00000000000102f2         call       check_node_accept_bytes.isra.31             ; check_node_accept_bytes.isra.31
00000000000102f7         test       eax, eax
00000000000102f9         je         loc_103e2

00000000000102ff         movsxd     rbp, eax
0000000000010302         add        rbp, qword [rsp+0x268+var_100]
000000000001030a         cmp        dword [rsp+0x268+var_68], eax
0000000000010311         cmovge     eax, dword [rsp+0x268+var_68]
0000000000010319         mov        rdi, qword [rsp+0x268+var_268]
000000000001031d         mov        rsi, rbp
0000000000010320         mov        dword [rsp+0x268+var_68], eax
0000000000010327         call       clean_state_log_if_needed                   ; clean_state_log_if_needed
000000000001032c         test       eax, eax
000000000001032e         mov        dword [rsp+0x268+var_194], eax
0000000000010335         jne        loc_105d0

000000000001033b         mov        rax, qword [r13+0x18]
000000000001033f         lea        r12, qword [rbp*8]
0000000000010347         mov        rax, qword [rax+r15*8]
000000000001034b         mov        r15, qword [rsp+0x268+var_90]
0000000000010353         lea        rdx, qword [rax+rax*2]
0000000000010357         mov        rax, qword [r13+0x30]
000000000001035b         add        r15, r12
000000000001035e         lea        rdx, qword [rax+rdx*8]
0000000000010362         mov        rax, qword [r15]
0000000000010365         test       rax, rax
0000000000010368         je         loc_10468

000000000001036e         mov        rsi, qword [rax+0x50]
0000000000010372         mov        rdi, qword [rsp+0x268+var_208]
0000000000010377         call       re_node_set_init_union                      ; re_node_set_init_union
000000000001037c         test       eax, eax
000000000001037e         mov        dword [rsp+0x268+var_194], eax
0000000000010385         jne        loc_105d0

000000000001038b         mov        edx, dword [rsp+0x268+var_A8]
0000000000010392         mov        rdi, qword [rsp+0x268+var_268]
0000000000010396         lea        rsi, qword [rbp-1]
000000000001039a         call       re_string_context_at                        ; re_string_context_at
000000000001039f         mov        rdx, qword [rsp+0x268+var_208]
00000000000103a4         mov        rdi, qword [rsp+0x268+var_1E8]
00000000000103ac         mov        ecx, eax
00000000000103ae         add        r12, qword [rsp+0x268+var_90]
00000000000103b6         mov        rsi, r13
00000000000103b9         call       re_acquire_state_context                    ; re_acquire_state_context
00000000000103be         mov        rdi, qword [rsp+0x268+var_178]              ; argument "__ptr" for method j_free
00000000000103c6         mov        qword [r12], rax
00000000000103ca         call       j_free                                      ; free
00000000000103cf         mov        rdi, qword [rsp+0x268+var_90]
00000000000103d7         cmp        qword [rdi+rbp*8], 0x0
00000000000103dc         je         loc_104c1

                     loc_103e2:
00000000000103e2         mov        r12, qword [rsp+0x268+var_100]              ; CODE XREF=re_search_internal+3305, re_search_internal+3755, re_search_internal+3770

                     loc_103ea:
00000000000103ea         add        rbx, 0x1                                    ; CODE XREF=re_search_internal+3226, re_search_internal+3235, re_search_internal+3248, re_search_internal+3264, re_search_internal+3586, re_search_internal+3666
00000000000103ee         cmp        rbx, qword [r14+0x10]
00000000000103f2         jge        loc_105a0

                     loc_103f8:
00000000000103f8         mov        rax, qword [r14+0x18]                       ; CODE XREF=re_search_internal+3216
00000000000103fc         mov        rbp, qword [r13]
0000000000010400         mov        r15, qword [rax+rbx*8]
0000000000010404         mov        rax, r15
0000000000010407         shl        rax, 0x4
000000000001040b         add        rax, rbp
000000000001040e         test       byte [rax+0xa], 0x10
0000000000010412         je         loc_103ea

0000000000010414         mov        ecx, dword [rax+8]
0000000000010417         test       ecx, 0x3ff00
000000000001041d         mov        dword [rsp+0x268+var_258], ecx
0000000000010421         je         loc_102e0

0000000000010427         mov        edx, dword [rsp+0x268+var_A8]
000000000001042e         mov        rdi, qword [rsp+0x268+var_268]
0000000000010432         mov        rsi, r12
0000000000010435         call       re_string_context_at                        ; re_string_context_at
000000000001043a         mov        ecx, dword [rsp+0x268+var_258]
000000000001043e         shr        ecx, 0x8
0000000000010441         mov        edx, ecx
0000000000010443         and        dx, 0x3ff
0000000000010448         test       cl, 0x4
000000000001044b         jne        loc_102a8

0000000000010451         and        ecx, 0x8
0000000000010454         je         loc_102b9

000000000001045a         test       al, 0x1
000000000001045c         je         loc_102b9

0000000000010462         jmp        loc_103ea
0000000000010464         align      8

                     loc_10468:
0000000000010468         movdqu     xmm0, xmmword [rdx]                         ; CODE XREF=re_search_internal+3416
000000000001046c         lea        rsi, qword [rbp-1]
0000000000010470         mov        rdi, qword [rsp+0x268+var_268]
0000000000010474         movaps     xmmword [rsp+0x268+var_188], xmm0
000000000001047c         mov        rax, qword [rdx+0x10]
0000000000010480         mov        edx, dword [rsp+0x268+var_A8]
0000000000010487         mov        qword [rsp+0x268+var_178], rax
000000000001048f         call       re_string_context_at                        ; re_string_context_at
0000000000010494         mov        rdi, qword [rsp+0x268+var_1E8]
000000000001049c         mov        rdx, qword [rsp+0x268+var_208]
00000000000104a1         mov        ecx, eax
00000000000104a3         mov        rsi, r13
00000000000104a6         call       re_acquire_state_context                    ; re_acquire_state_context
00000000000104ab         mov        rdi, qword [rsp+0x268+var_90]
00000000000104b3         mov        qword [r15], rax
00000000000104b6         cmp        qword [rdi+rbp*8], 0x0
00000000000104bb         jne        loc_103e2

                     loc_104c1:
00000000000104c1         mov        eax, dword [rsp+0x268+var_194]              ; CODE XREF=re_search_internal+3532
00000000000104c8         test       eax, eax
00000000000104ca         je         loc_103e2

00000000000104d0         mov        rbx, qword [rsp+0x268+var_1C8]
00000000000104d8         jmp        loc_105e0
00000000000104dd         align      32

                     loc_104e0:
00000000000104e0         mov        rbp, qword [r14+0x60]                       ; CODE XREF=re_search_internal+1979
00000000000104e4         test       rbp, rbp
00000000000104e7         je         loc_10695

00000000000104ed         mov        rax, qword [rsp+0x268+var_100]
00000000000104f5         mov        edx, dword [rsp+0x268+var_A8]
00000000000104fc         mov        rdi, qword [rsp+0x268+var_268]
0000000000010500         lea        rsi, qword [rax-1]
0000000000010504         call       re_string_context_at                        ; re_string_context_at
0000000000010509         test       al, 0x1
000000000001050b         je         loc_105c0

0000000000010511         mov        r13, qword [rbp+r13*8+0x800]
0000000000010519         jmp        loc_fdd5
000000000001051e         align      32

                     loc_10520:
0000000000010520         cmp        rax, qword [rsp+0x268+var_F0]               ; CODE XREF=re_search_internal+1930
0000000000010528         jge        loc_fda0

000000000001052e         jmp        loc_1023e

                     loc_10533:
0000000000010533         mov        rdi, r12                                    ; argument "__ptr" for method j_free, CODE XREF=re_search_internal+4700
0000000000010536         call       j_free                                      ; free
000000000001053b         nop        dword [rax+rax]

                     loc_10540:
0000000000010540         mov        rdi, qword [rsp+0x268+var_268]              ; CODE XREF=re_search_internal+2159, re_search_internal+5355, re_search_internal+5671
0000000000010544         call       match_ctx_clean                             ; match_ctx_clean
0000000000010549         mov        rbp, qword [rsp+0x268+var_190]

                     loc_10551:
0000000000010551         movsxd     rax, dword [rsp+0x268+var_1BC]              ; CODE XREF=re_search_internal+1559
0000000000010559         add        rbp, rax
000000000001055c         cmp        rbp, qword [rsp+0x268+var_1D8]
0000000000010564         mov        qword [rsp+0x268+var_190], rbp
000000000001056c         jl         loc_10579

000000000001056e         cmp        rbp, qword [rsp+0x268+var_1F8]
0000000000010573         jle        loc_fae8

                     loc_10579:
0000000000010579         mov        rdi, qword [rsp+0x268+var_90]               ; CODE XREF=re_search_internal+1172, re_search_internal+1482, re_search_internal+2764, re_search_internal+3932, re_search_internal+4393, re_search_internal+4402
0000000000010581         mov        dword [rsp+0x268+var_20C], 0x1
0000000000010589         jmp        loc_10168
000000000001058e         align      16

                     loc_10590:
0000000000010590         mov        dword [rsp+0x268+var_20C], 0x1              ; CODE XREF=re_search_internal+238, re_search_internal+256, re_search_internal+269, re_search_internal+282, re_search_internal+293
0000000000010598         jmp        loc_10189
000000000001059d         align      32

                     loc_105a0:
00000000000105a0         mov        rbx, qword [rsp+0x268+var_1C8]              ; CODE XREF=re_search_internal+3554
00000000000105a8         mov        r8, r12

                     loc_105ab:
00000000000105ab         mov        dword [rsp+0x268+var_198], 0x0              ; CODE XREF=re_search_internal+3181
00000000000105b6         jmp        loc_fdab
00000000000105bb         align      64

                     loc_105c0:
00000000000105c0         mov        r13, qword [rbp+r13*8]                      ; CODE XREF=re_search_internal+3835
00000000000105c5         jmp        loc_fdd5
00000000000105ca         align      16

                     loc_105d0:
00000000000105d0         mov        rbx, qword [rsp+0x268+var_1C8]              ; CODE XREF=re_search_internal+3365, re_search_internal+3445
00000000000105d8         mov        rdi, qword [rsp+0x268+var_90]

                     loc_105e0:
00000000000105e0         test       rdi, rdi                                    ; CODE XREF=re_search_internal+3784
00000000000105e3         mov        dword [rsp+0x268+var_198], eax
00000000000105ea         je         loc_106d0

                     loc_105f0:
00000000000105f0         xor        r13d, r13d                                  ; CODE XREF=re_search_internal+4275
00000000000105f3         jmp        loc_fde0
00000000000105f8         align      512

                     loc_10600:
0000000000010600         mov        edx, dword [rsp+0x268+var_A8]               ; CODE XREF=re_search_internal+1656
0000000000010607         mov        rdi, qword [rsp+0x268+var_268]
000000000001060b         lea        rsi, qword [rax-1]
000000000001060f         call       re_string_context_at                        ; re_string_context_at
0000000000010614         test       al, 0x1
0000000000010616         je         loc_10785

000000000001061c         mov        r14, qword [rbx+0x50]

                     loc_10620:
0000000000010620         test       r14, r14                                    ; CODE XREF=re_search_internal+4503, re_search_internal+5619, re_search_internal+5726
0000000000010623         jne        loc_fc8e

0000000000010629         mov        eax, dword [rsp+0x268+var_198]
0000000000010630         cmp        eax, 0xc
0000000000010633         mov        dword [rsp+0x268+var_20C], eax
0000000000010637         je         loc_10160

000000000001063d         lea        rcx, qword [__PRETTY_FUNCTION__.7972]       ; argument "__function" for method j___assert_fail, "check_matching"
0000000000010644         lea        rsi, qword [aCoreutils831li_16a80]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/regexec.c"
000000000001064b         lea        rdi, qword [aErrRegespace]                  ; argument "__assertion" for method j___assert_fail, "err == REG_ESPACE"
0000000000010652         mov        edx, 0x435                                  ; argument "__line" for method j___assert_fail
0000000000010657         call       j___assert_fail                             ; __assert_fail
                        ; endp
000000000001065c         align      32

                     loc_10660:
0000000000010660         mov        rax, qword [rsp+0x268+var_230]              ; CODE XREF=re_search_internal+2197
0000000000010665         cmp        qword [rax+0x98], 0x0
000000000001066d         je         loc_1089c

0000000000010673         jmp        loc_107bf

                     loc_10678:
0000000000010678         mov        rdi, r12                                    ; argument "__ptr" for method j_free, CODE XREF=re_search_internal+2403
000000000001067b         call       j_free                                      ; free

                     loc_10680:
0000000000010680         mov        rdi, qword [rsp+0x268+var_90]               ; CODE XREF=re_search_internal+810, re_search_internal+864, re_search_internal+873, re_search_internal+942, re_search_internal+2169, re_search_internal+2369, re_search_internal+5419
0000000000010688         mov        dword [rsp+0x268+var_20C], 0xc
0000000000010690         jmp        loc_10168

                     loc_10695:
0000000000010695         mov        rdi, qword [rsp+0x268+var_B0]               ; CODE XREF=re_search_internal+3799
000000000001069d         mov        rsi, r14
00000000000106a0         call       build_trtable                               ; build_trtable
00000000000106a5         test       al, al
00000000000106a7         jne        loc_fdc4

00000000000106ad         mov        rdi, qword [rsp+0x268+var_90]
00000000000106b5         mov        dword [rsp+0x268+var_198], 0xc
00000000000106c0         test       rdi, rdi
00000000000106c3         jne        loc_105f0

00000000000106c9         nop        dword [rax]

                     loc_106d0:
00000000000106d0         mov        dword [rsp+0x268+var_20C], 0xc              ; CODE XREF=re_search_internal+975, re_search_internal+2046, re_search_internal+4058
00000000000106d8         jmp        loc_10168

                     loc_106dd:
00000000000106dd         mov        rbx, qword [rsp+0x268+var_200]              ; CODE XREF=re_search_internal+1250
00000000000106e2         mov        r13d, dword [rsp+0x268+var_1BC]
00000000000106ea         mov        r14, qword [rsp+0x268+var_1D8]
00000000000106f2         mov        r15, qword [rsp+0x268+var_1F8]
00000000000106f7         mov        r12, qword [rsp+0x268+var_1E0]
00000000000106ff         jmp        loc_10748
0000000000010701         align      8

                     loc_10708:
0000000000010708         cmp        r12, rbp                                    ; CODE XREF=re_search_internal+4427, re_search_internal+4467
000000000001070b         mov        rax, rbx
000000000001070e         jle        loc_1071f

0000000000010710         mov        rax, qword [rsp+0x268+var_140]
0000000000010718         movzx      eax, byte [rax+rdx]
000000000001071c         add        rax, rbx

                     loc_1071f:
000000000001071f         cmp        byte [rax], 0x0                             ; CODE XREF=re_search_internal+4350
0000000000010722         jne        loc_fbe8

0000000000010728         movsxd     rax, r13d
000000000001072b         add        rbp, rax
000000000001072e         cmp        rbp, r14
0000000000010731         mov        qword [rsp+0x268+var_190], rbp
0000000000010739         jl         loc_10579

000000000001073f         cmp        rbp, r15
0000000000010742         jg         loc_10579

                     loc_10748:
0000000000010748         mov        rdx, rbp                                    ; CODE XREF=re_search_internal+4335
000000000001074b         sub        rdx, qword [rsp+0x268+var_120]
0000000000010753         cmp        qword [rsp+0x268+var_110], rdx
000000000001075b         ja         loc_10708

000000000001075d         mov        edx, dword [rsp+0x268+arg_10]
0000000000010764         mov        rdi, qword [rsp+0x268+var_268]
0000000000010768         mov        rsi, rbp
000000000001076b         call       re_string_reconstruct                       ; re_string_reconstruct
0000000000010770         test       eax, eax
0000000000010772         jne        loc_10158

0000000000010778         mov        rdx, rbp
000000000001077b         sub        rdx, qword [rsp+0x268+var_120]
0000000000010783         jmp        loc_10708

                     loc_10785:
0000000000010785         test       eax, eax                                    ; CODE XREF=re_search_internal+4102
0000000000010787         je         loc_fc8e

000000000001078d         mov        edx, eax
000000000001078f         and        edx, 0x6
0000000000010792         cmp        edx, 0x6
0000000000010795         je         loc_10bff

000000000001079b         test       al, 0x2
000000000001079d         je         loc_10c50

00000000000107a3         mov        r14, qword [rbx+0x58]
00000000000107a7         jmp        loc_10620

                     loc_107ac:
00000000000107ac         mov        rax, qword [rsp+0x268+var_230]              ; CODE XREF=re_search_internal+2212
00000000000107b1         cmp        qword [rax+0x98], 0x0
00000000000107b9         je         loc_1089c

                     loc_107bf:
00000000000107bf         mov        rcx, qword [rsp+0x268+var_248]              ; CODE XREF=re_search_internal+4195
00000000000107c4         mov        rbx, qword [rsp+0x268+var_90]
00000000000107cc         mov        rdi, qword [rsp+0x268+var_268]
00000000000107d0         mov        rax, qword [rbx+rcx*8]
00000000000107d4         mov        rsi, qword [rax+0x10]
00000000000107d8         lea        rdx, qword [rax+0x18]
00000000000107dc         call       check_halt_state_context.isra.20            ; check_halt_state_context.isra.20
00000000000107e1         mov        qword [rsp+0x268+var_98], rax
00000000000107e9         jmp        loc_ff08

                     loc_107ee:
00000000000107ee         xor        ecx, ecx                                    ; CODE XREF=re_search_internal+1113, re_search_internal+1128
00000000000107f0         jmp        loc_fa7e

                     loc_107f5:
00000000000107f5         pxor       xmm0, xmm0                                  ; CODE XREF=re_search_internal+2383
00000000000107f9         mov        qword [rsp+0x268+var_188], rax
0000000000010801         mov        rdi, qword [rsp+0x268+var_268]
0000000000010805         mov        rax, qword [rsp+0x268+var_248]
000000000001080a         lea        rbx, qword [rsp+0x268+var_188]
0000000000010812         mov        qword [rsp+0x268+var_180], 0x0
000000000001081e         mov        qword [rsp+0x268+var_178], r13
0000000000010826         mov        rsi, rbx
0000000000010829         mov        qword [rsp+0x268+var_158], 0x0
0000000000010835         movaps     xmmword [rsp+0x268+var_168], xmm0
000000000001083d         mov        qword [rsp+0x268+var_170], rax
0000000000010845         call       sift_states_backward                        ; sift_states_backward
000000000001084a         mov        rdi, qword [rsp+0x268+var_158]              ; argument "__ptr" for method j_free
0000000000010852         mov        dword [rsp+0x268+var_260], eax
0000000000010856         call       j_free                                      ; free
000000000001085b         mov        eax, dword [rsp+0x268+var_260]
000000000001085f         test       eax, eax
0000000000010861         jne        loc_10ca8

0000000000010867         cmp        qword [r12], 0x0
000000000001086c         je         loc_10533

                     loc_10872:
0000000000010872         mov        rdi, qword [rsp+0x268+var_90]               ; argument "__ptr" for method j_free, CODE XREF=re_search_internal+5778
000000000001087a         call       j_free                                      ; free
000000000001087f         mov        rax, qword [rsp+0x268+var_248]
0000000000010884         mov        qword [rsp+0x268+var_90], r12
000000000001088c         mov        qword [rsp+0x268+var_98], r13
0000000000010894         mov        qword [rsp+0x268+var_A0], rax

                     loc_1089c:
000000000001089c         cmp        qword [rsp+0x268+arg_0], 0x0                ; CODE XREF=re_search_internal+2290, re_search_internal+4189, re_search_internal+4521
00000000000108a5         je         loc_10160

00000000000108ab         cmp        qword [rsp+0x268+arg_0], 0x1
00000000000108b4         je         loc_10cd8

00000000000108ba         mov        rsi, qword [rsp+0x268+var_1B0]
00000000000108c2         mov        rcx, qword [rsp+0x268+arg_0]
00000000000108ca         mov        rdx, 0xffffffffffffffff
00000000000108d1         shl        rcx, 0x4
00000000000108d5         lea        rax, qword [rsi+0x10]
00000000000108d9         add        rcx, rsi

                     loc_108dc:
00000000000108dc         mov        qword [rax+8], rdx                          ; CODE XREF=re_search_internal+4826
00000000000108e0         mov        qword [rax], rdx
00000000000108e3         add        rax, 0x10
00000000000108e7         cmp        rcx, rax
00000000000108ea         jne        loc_108dc

00000000000108ec         mov        rdi, qword [rsp+0x268+var_1B0]
00000000000108f4         mov        rax, qword [rsp+0x268+var_A0]
00000000000108fc         mov        qword [rdi+8], rax
0000000000010900         mov        rax, qword [rsp+0x268+var_220]
0000000000010905         mov        qword [rdi], 0x0
000000000001090c         test       byte [rax+0x38], 0x10
0000000000010910         jne        loc_10cf3

0000000000010916         cmp        qword [rsp+0x268+arg_0], 0x1
000000000001091f         je         loc_10cf3

0000000000010925         mov        rax, qword [rsp+0x268+var_230]
000000000001092a         xor        r8d, r8d
000000000001092d         test       byte [rax+0xb0], 0x1
0000000000010934         je         loc_10945

0000000000010936         xor        r8d, r8d
0000000000010939         cmp        qword [rax+0x98], 0x0
0000000000010941         setg       r8b

                     loc_10945:
0000000000010945         mov        rbx, qword [rsp+0x268+var_1B0]              ; CODE XREF=re_search_internal+4900
000000000001094d         mov        rdx, qword [rsp+0x268+arg_0]
0000000000010955         mov        rsi, qword [rsp+0x268+var_268]
0000000000010959         mov        rdi, qword [rsp+0x268+var_220]
000000000001095e         mov        rcx, rbx
0000000000010961         call       set_regs                                    ; set_regs
0000000000010966         test       eax, eax
0000000000010968         jne        loc_10c3d

000000000001096e         mov        rax, qword [rbx]

                     loc_10971:
0000000000010971         movzx      r11d, byte [rsp+0x268+var_BC]               ; CODE XREF=re_search_internal+5861
000000000001097a         mov        r10, qword [rsp+0x268+var_118]
0000000000010982         xor        ecx, ecx
0000000000010984         mov        r9, qword [rsp+0x268+var_130]
000000000001098c         mov        r8, qword [rsp+0x268+var_110]
0000000000010994         mov        rdi, qword [rsp+0x268+var_190]
000000000001099c         mov        rdx, qword [rsp+0x268+var_1B0]
00000000000109a4         jmp        loc_109a9

                     loc_109a6:
00000000000109a6         mov        rax, qword [rdx]                            ; CODE XREF=re_search_internal+5065

                     loc_109a9:
00000000000109a9         cmp        rax, 0xffffffffffffffff                     ; CODE XREF=re_search_internal+5012
00000000000109ad         je         loc_109c9

00000000000109af         test       r11b, r11b
00000000000109b2         mov        rsi, qword [rdx+8]
00000000000109b6         jne        loc_10cfa

                     loc_109bc:
00000000000109bc         add        rax, rdi                                    ; CODE XREF=re_search_internal+5887, re_search_internal+5895
00000000000109bf         add        rsi, rdi
00000000000109c2         mov        qword [rdx], rax
00000000000109c5         mov        qword [rdx+8], rsi

                     loc_109c9:
00000000000109c9         add        rcx, 0x1                                    ; CODE XREF=re_search_internal+5021
00000000000109cd         add        rdx, 0x10
00000000000109d1         cmp        rcx, qword [rsp+0x268+arg_0]
00000000000109d9         jne        loc_109a6

00000000000109db         cmp        qword [rsp+0x268+var_1D0], 0x0
00000000000109e4         jle        loc_10a25

00000000000109e6         mov        rdx, qword [rsp+0x268+var_1D0]
00000000000109ee         mov        rdi, qword [rsp+0x268+var_1B0]
00000000000109f6         mov        rax, rcx
00000000000109f9         shl        rax, 0x4
00000000000109fd         add        rdx, rcx
0000000000010a00         lea        rax, qword [rdi+rax+8]
0000000000010a05         shl        rdx, 0x4
0000000000010a09         lea        rsi, qword [rdi+rdx+8]
0000000000010a0e         mov        rdx, 0xffffffffffffffff

                     loc_10a15:
0000000000010a15         mov        qword [rax-8], rdx                          ; CODE XREF=re_search_internal+5139
0000000000010a19         mov        qword [rax], rdx
0000000000010a1c         add        rax, 0x10
0000000000010a20         cmp        rsi, rax
0000000000010a23         jne        loc_10a15

                     loc_10a25:
0000000000010a25         mov        rax, qword [rsp+0x268+var_230]              ; CODE XREF=re_search_internal+5076
0000000000010a2a         mov        rdi, qword [rsp+0x268+var_90]
0000000000010a32         mov        r9, qword [rax+0xe0]
0000000000010a39         test       r9, r9
0000000000010a3c         je         loc_10168

0000000000010a42         mov        r10, qword [rsp+0x268+var_1B0]
0000000000010a4a         xor        r8d, r8d
0000000000010a4d         lea        rdx, qword [r10+0x10]
0000000000010a51         jmp        loc_10a89

                     loc_10a53:
0000000000010a53         mov        rax, qword [r9+rsi*8-8]                     ; CODE XREF=re_search_internal+5248
0000000000010a58         cmp        rax, r8
0000000000010a5b         je         loc_10a82

0000000000010a5d         add        rax, 0x1
0000000000010a61         shl        rax, 0x4
0000000000010a65         mov        rax, qword [r10+rax]
0000000000010a69         mov        qword [rdx], rax
0000000000010a6c         mov        rax, qword [r9+rsi*8-8]
0000000000010a71         add        rax, 0x1
0000000000010a75         shl        rax, 0x4
0000000000010a79         mov        rax, qword [r10+rax+8]
0000000000010a7e         mov        qword [rdx+8], rax

                     loc_10a82:
0000000000010a82         add        rdx, 0x10                                   ; CODE XREF=re_search_internal+5195
0000000000010a86         mov        r8, rsi

                     loc_10a89:
0000000000010a89         lea        rsi, qword [r8+1]                           ; CODE XREF=re_search_internal+5185
0000000000010a8d         cmp        rsi, rcx
0000000000010a90         jne        loc_10a53

0000000000010a92         jmp        loc_10168
0000000000010a97         align      32

                     loc_10aa0:
0000000000010aa0         mov        rdi, qword [rsp+0x268+var_268]              ; CODE XREF=re_search_internal+2922
0000000000010aa4         call       match_ctx_clean                             ; match_ctx_clean
0000000000010aa9         mov        rdi, qword [rsp+0x268+var_50]               ; argument "__ptr" for method j_free
0000000000010ab1         call       j_free                                      ; free
0000000000010ab6         mov        rdi, qword [rsp+0x268+var_70]               ; argument "__ptr" for method j_free
0000000000010abe         call       j_free                                      ; free
0000000000010ac3         jmp        loc_10180

                     loc_10ac8:
0000000000010ac8         mov        rax, qword [rsp+0x268+var_230]              ; CODE XREF=re_search_internal+915
0000000000010acd         test       byte [rax+0xb0], 0x2
0000000000010ad4         jne        loc_f9a9

0000000000010ada         mov        qword [rsp+0x268+var_90], 0x0
0000000000010ae6         jmp        loc_f9e5

                     loc_10aeb:
0000000000010aeb         mov        rdi, r12                                    ; argument "__ptr" for method j_free, CODE XREF=re_search_internal+2584
0000000000010aee         call       j_free                                      ; free
0000000000010af3         mov        rdi, rbp                                    ; argument "__ptr" for method j_free
0000000000010af6         call       j_free                                      ; free
0000000000010afb         jmp        loc_10540

                     loc_10b00:
0000000000010b00         mov        qword [rsp+0x268+var_190], rax              ; CODE XREF=re_search_internal+2828
0000000000010b08         mov        rdi, qword [rsp+0x268+var_90]
0000000000010b10         mov        dword [rsp+0x268+var_20C], 0x1
0000000000010b18         jmp        loc_10168

                     loc_10b1d:
0000000000010b1d         test       rax, rax                                    ; CODE XREF=re_search_internal+3025
0000000000010b20         mov        r13, rax
0000000000010b23         jne        loc_fd18

0000000000010b29         jmp        loc_fe64
0000000000010b2e         align      16

                     loc_10b30:
0000000000010b30         mov        r13, rax                                    ; CODE XREF=re_search_internal+3034
0000000000010b33         jmp        loc_fd18

                     loc_10b38:
0000000000010b38         cmp        eax, 0xc                                    ; CODE XREF=re_search_internal+3139
0000000000010b3b         je         loc_10680

0000000000010b41         lea        rcx, qword [__PRETTY_FUNCTION__.7972]       ; argument "__function" for method j___assert_fail, "check_matching"
0000000000010b48         lea        rsi, qword [aCoreutils831li_16a80]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/regexec.c"
0000000000010b4f         lea        rdi, qword [aErrRegespace]                  ; argument "__assertion" for method j___assert_fail, "err == REG_ESPACE"
0000000000010b56         mov        edx, 0x46c                                  ; argument "__line" for method j___assert_fail
0000000000010b5b         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_10b60:
0000000000010b60         cmp        byte [r14+0x68], 0x0                        ; CODE XREF=re_search_internal+1735
0000000000010b65         js         loc_10bd6

                     loc_10b67:
0000000000010b67         mov        esi, dword [rsp+0x268+var_210]              ; CODE XREF=re_search_internal+5610
0000000000010b6b         mov        rax, qword [rsp+0x268+var_260]
0000000000010b70         test       esi, esi
0000000000010b72         mov        qword [rsp+0x268+var_248], rax
0000000000010b77         je         loc_fe76

0000000000010b7d         mov        qword [rsp+0x268+var_238], 0x1
0000000000010b86         jmp        loc_fcdd

                     loc_10b8b:
0000000000010b8b         mov        rdi, rbx                                    ; CODE XREF=re_search_internal+2327
0000000000010b8e         mov        dword [rsp+0x268+var_20C], 0xc
0000000000010b96         jmp        loc_10168

                     loc_10b9b:
0000000000010b9b         lea        rbx, qword [r14+0x10]                       ; CODE XREF=re_search_internal+1692
0000000000010b9f         lea        rbp, qword [r14+0x18]
0000000000010ba3         mov        rdi, qword [rsp+0x268+var_268]
0000000000010ba7         xor        ecx, ecx
0000000000010ba9         mov        rdx, rbp
0000000000010bac         mov        rsi, rbx
0000000000010baf         call       check_subexp_matching_top.isra.18           ; check_subexp_matching_top.isra.18
0000000000010bb4         test       eax, eax
0000000000010bb6         mov        dword [rsp+0x268+var_198], eax
0000000000010bbd         jne        loc_10c08

0000000000010bbf         movzx      eax, byte [r14+0x68]
0000000000010bc4         test       al, 0x40
0000000000010bc6         jne        loc_10cb0

                     loc_10bcc:
0000000000010bcc         mov        byte [rsp+0x268+var_250], 0x0               ; CODE XREF=re_search_internal+5827
0000000000010bd1         jmp        loc_fcc3

                     loc_10bd6:
0000000000010bd6         mov        rsi, qword [r14+0x10]                       ; CODE XREF=re_search_internal+5461
0000000000010bda         mov        rcx, qword [rsp+0x268+var_260]
0000000000010bdf         lea        rdx, qword [r14+0x18]
0000000000010be3         mov        rdi, qword [rsp+0x268+var_268]
0000000000010be7         call       check_halt_state_context.isra.20            ; check_halt_state_context.isra.20
0000000000010bec         test       rax, rax
0000000000010bef         mov        qword [rsp+0x268+var_238], rax
0000000000010bf4         je         loc_fcdd

0000000000010bfa         jmp        loc_10b67

                     loc_10bff:
0000000000010bff         mov        r14, qword [rbx+0x60]                       ; CODE XREF=re_search_internal+4485
0000000000010c03         jmp        loc_10620

                     loc_10c08:
0000000000010c08         cdqe                                                   ; CODE XREF=re_search_internal+5549, re_search_internal+5816
0000000000010c0a         mov        qword [rsp+0x268+var_248], rax
0000000000010c0f         jmp        loc_fe76

                     loc_10c14:
0000000000010c14         mov        r14, qword [rsp+0x268+var_250]              ; CODE XREF=re_search_internal+2534
0000000000010c19         mov        eax, r15d

                     loc_10c1c:
0000000000010c1c         mov        rdi, r12                                    ; argument "__ptr" for method j_free, CODE XREF=re_search_internal+5787
0000000000010c1f         mov        dword [rsp+0x268+var_260], eax
0000000000010c23         call       j_free                                      ; free
0000000000010c28         mov        rdi, r14                                    ; argument "__ptr" for method j_free
0000000000010c2b         call       j_free                                      ; free
0000000000010c30         mov        eax, dword [rsp+0x268+var_260]
0000000000010c34         cmp        eax, 0x1
0000000000010c37         je         loc_10540

                     loc_10c3d:
0000000000010c3d         mov        rdi, qword [rsp+0x268+var_90]               ; CODE XREF=re_search_internal+4952
0000000000010c45         mov        dword [rsp+0x268+var_20C], eax
0000000000010c49         jmp        loc_10168
0000000000010c4e         align      16

                     loc_10c50:
0000000000010c50         test       al, 0x4                                     ; CODE XREF=re_search_internal+4493
0000000000010c52         je         loc_fc8e

0000000000010c58         mov        rdx, qword [r14+0x50]
0000000000010c5c         mov        rdi, qword [rsp+0x268+var_240]
0000000000010c61         mov        ecx, eax
0000000000010c63         mov        rsi, rbx
0000000000010c66         call       re_acquire_state_context                    ; re_acquire_state_context
0000000000010c6b         mov        r14, rax
0000000000010c6e         jmp        loc_10620

                     loc_10c73:
0000000000010c73         mov        r15, qword [rsp+0x268+var_258]              ; CODE XREF=re_search_internal+2545, re_search_internal+2556
0000000000010c78         mov        rcx, qword [rsp+0x268+var_260]
0000000000010c7d         mov        rdx, rbp
0000000000010c80         mov        rsi, r12
0000000000010c83         mov        qword [rsp+0x268+var_248], r14
0000000000010c88         mov        rdi, r15
0000000000010c8b         call       merge_state_array                           ; merge_state_array
0000000000010c90         mov        rdi, rbp                                    ; argument "__ptr" for method j_free
0000000000010c93         mov        dword [rsp+0x268+var_260], eax
0000000000010c97         call       j_free                                      ; free
0000000000010c9c         mov        eax, dword [rsp+0x268+var_260]
0000000000010ca0         test       eax, eax
0000000000010ca2         je         loc_10872

                     loc_10ca8:
0000000000010ca8         xor        r14d, r14d                                  ; CODE XREF=re_search_internal+4689
0000000000010cab         jmp        loc_10c1c

                     loc_10cb0:
0000000000010cb0         mov        rdi, qword [rsp+0x268+var_268]              ; CODE XREF=re_search_internal+5558
0000000000010cb4         mov        rdx, rbp
0000000000010cb7         mov        rsi, rbx
0000000000010cba         call       transit_state_bkref.isra.34                 ; transit_state_bkref.isra.34
0000000000010cbf         test       eax, eax
0000000000010cc1         mov        dword [rsp+0x268+var_198], eax
0000000000010cc8         jne        loc_10c08

0000000000010cce         movzx      eax, byte [r14+0x68]
0000000000010cd3         jmp        loc_10bcc

                     loc_10cd8:
0000000000010cd8         mov        rsi, qword [rsp+0x268+var_1B0]              ; CODE XREF=re_search_internal+4772
0000000000010ce0         mov        rax, qword [rsp+0x268+var_A0]
0000000000010ce8         mov        qword [rsi], 0x0
0000000000010cef         mov        qword [rsi+8], rax

                     loc_10cf3:
0000000000010cf3         xor        eax, eax                                    ; CODE XREF=re_search_internal+4864, re_search_internal+4879
0000000000010cf5         jmp        loc_10971

                     loc_10cfa:
0000000000010cfa         cmp        r10, rax                                    ; CODE XREF=re_search_internal+5030
0000000000010cfd         je         loc_10d1c

0000000000010cff         mov        rax, qword [r9+rax*8]

                     loc_10d03:
0000000000010d03         cmp        r10, rsi                                    ; CODE XREF=re_search_internal+5903
0000000000010d06         mov        qword [rdx], rax
0000000000010d09         je         loc_10d14

0000000000010d0b         mov        rsi, qword [r9+rsi*8]
0000000000010d0f         jmp        loc_109bc

                     loc_10d14:
0000000000010d14         mov        rsi, r8                                     ; CODE XREF=re_search_internal+5881
0000000000010d17         jmp        loc_109bc

                     loc_10d1c:
0000000000010d1c         mov        rax, r8                                     ; CODE XREF=re_search_internal+5869
0000000000010d1f         jmp        loc_10d03

                     loc_10d21:
0000000000010d21         mov        qword [rsp+0x268+var_190], rbp              ; CODE XREF=re_search_internal+1396, re_search_internal+2737
0000000000010d29         jmp        loc_fbe8

                     loc_10d2e:
0000000000010d2e         mov        qword [rsp+0x268+var_100], rax              ; CODE XREF=re_search_internal+2126
0000000000010d36         jmp        loc_fe64

                     loc_10d3b:
0000000000010d3b         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=re_search_internal+2958
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_78: int64_t, -120
        ;    var_7C: int32_t, -124
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208


                     update_cur_sifted_state:
0000000000010d40         push       r15                                         ; End of unwind block (FDE at 0x196e8), Begin of unwind block (FDE at 0x19738), CODE XREF=sift_states_backward+112, sift_states_backward+655
0000000000010d42         push       r14
0000000000010d44         mov        rax, rdi
0000000000010d47         push       r13
0000000000010d49         push       r12
0000000000010d4b         mov        r13, rsi
0000000000010d4e         push       rbp
0000000000010d4f         push       rbx
0000000000010d50         mov        rbp, rdx
0000000000010d53         mov        rbx, rcx
0000000000010d56         lea        rcx, qword [rdx*8]
0000000000010d5e         sub        rsp, 0xa8
0000000000010d65         mov        r12, qword [rax+0x98]
0000000000010d6c         mov        rax, qword [rax+0xb8]
0000000000010d73         mov        qword [rsp+0xd8+var_D0], rdi
0000000000010d78         mov        qword [rsp+0xd8+var_C0], rcx
0000000000010d7d         mov        rdi, qword [fs:0x28]
0000000000010d86         mov        qword [rsp+0xd8+var_40], rdi
0000000000010d8e         xor        edi, edi
0000000000010d90         mov        rdx, qword [rax+rdx*8]
0000000000010d94         mov        dword [rsp+0xd8+var_7C], 0x0
0000000000010d9c         mov        rcx, qword [rbx+8]
0000000000010da0         test       rdx, rdx
0000000000010da3         je         loc_10ff8

0000000000010da9         lea        rdi, qword [rdx+8]
0000000000010dad         test       rcx, rcx
0000000000010db0         mov        qword [rsp+0xd8+var_C8], rdi
0000000000010db5         jne        loc_10e08

0000000000010db7         mov        rdx, qword [rsi]
0000000000010dba         mov        qword [rdx+rbp*8], 0x0
0000000000010dc2         mov        rdx, qword [rax+rbp*8]
0000000000010dc6         xor        eax, eax
0000000000010dc8         test       byte [rdx+0x68], 0x40
0000000000010dcc         jne        loc_10eaf

0000000000010dd2         nop        word [rax+rax]

                     loc_10dd8:
0000000000010dd8         mov        rdi, qword [rsp+0xd8+var_40]                ; CODE XREF=update_cur_sifted_state+233, update_cur_sifted_state+274, update_cur_sifted_state+321, update_cur_sifted_state+333, update_cur_sifted_state+361, update_cur_sifted_state+725, update_cur_sifted_state+738, update_cur_sifted_state+888, update_cur_sifted_state+1107, update_cur_sifted_state+1297, update_cur_sifted_state+1455
0000000000010de0         xor        rdi, qword [fs:0x28]
0000000000010de9         jne        loc_1158b

0000000000010def         add        rsp, 0xa8
0000000000010df6         pop        rbx
0000000000010df7         pop        rbp
0000000000010df8         pop        r12
0000000000010dfa         pop        r13
0000000000010dfc         pop        r14
0000000000010dfe         pop        r15
0000000000010e00         ret
                        ; endp
0000000000010e01         align      8

                     loc_10e08:
0000000000010e08         lea        rdi, qword [rsp+0xd8+var_78]                ; CODE XREF=update_cur_sifted_state+117
0000000000010e0d         mov        rdx, rbx
0000000000010e10         mov        rsi, r12
0000000000010e13         mov        dword [rsp+0xd8+var_78], 0x0
0000000000010e1b         call       re_acquire_state                            ; re_acquire_state
0000000000010e20         mov        rdx, rax
0000000000010e23         mov        eax, dword [rsp+0xd8+var_78]
0000000000010e27         test       eax, eax
0000000000010e29         jne        loc_10dd8

0000000000010e2b         mov        r15, qword [rdx+0x38]
0000000000010e2f         lea        r14, qword [rdx+0x38]
0000000000010e33         test       r15, r15
0000000000010e36         je         loc_11040

                     loc_10e3c:
0000000000010e3c         mov        rsi, qword [rsp+0xd8+var_C8]                ; CODE XREF=update_cur_sifted_state+827, update_cur_sifted_state+840
0000000000010e41         mov        rdx, r14
0000000000010e44         mov        rdi, rbx
0000000000010e47         call       re_node_set_add_intersect                   ; re_node_set_add_intersect
0000000000010e4c         test       eax, eax
0000000000010e4e         mov        dword [rsp+0xd8+var_7C], eax
0000000000010e52         jne        loc_10dd8

0000000000010e54         cmp        qword [r13+0x28], 0x0
0000000000010e59         jne        loc_110d0

                     loc_10e5f:
0000000000010e5f         mov        r14, qword [rsp+0xd8+var_C0]                ; CODE XREF=update_cur_sifted_state+1155
0000000000010e64         add        r14, qword [r13]

                     loc_10e68:
0000000000010e68         lea        rdi, qword [rsp+0xd8+var_7C]                ; CODE XREF=update_cur_sifted_state+905
0000000000010e6d         mov        rdx, rbx
0000000000010e70         mov        rsi, r12
0000000000010e73         call       re_acquire_state                            ; re_acquire_state
0000000000010e78         mov        qword [r14], rax
0000000000010e7b         mov        eax, dword [rsp+0xd8+var_7C]
0000000000010e7f         test       eax, eax
0000000000010e81         jne        loc_10dd8

0000000000010e87         cmp        qword [rsp+0xd8+var_C8], 0x0
0000000000010e8d         je         loc_10dd8

0000000000010e93         mov        rax, qword [rsp+0xd8+var_D0]
0000000000010e98         mov        rax, qword [rax+0xb8]
0000000000010e9f         mov        rdx, qword [rax+rbp*8]
0000000000010ea3         xor        eax, eax
0000000000010ea5         test       byte [rdx+0x68], 0x40
0000000000010ea9         je         loc_10dd8

                     loc_10eaf:
0000000000010eaf         mov        rax, qword [rsp+0xd8+var_D0]                ; CODE XREF=update_cur_sifted_state+140
0000000000010eb4         xor        ebx, ebx
0000000000010eb6         mov        rsi, qword [rax+0xc8]
0000000000010ebd         mov        rdx, rsi

                     loc_10ec0:
0000000000010ec0         cmp        rbx, rdx                                    ; CODE XREF=update_cur_sifted_state+759
0000000000010ec3         jge        loc_10f23

0000000000010ec5         lea        rax, qword [rbx+rdx]
0000000000010ec9         mov        rcx, rax
0000000000010ecc         shr        rcx, 0x3f
0000000000010ed0         add        rcx, rax
0000000000010ed3         mov        rax, qword [rsp+0xd8+var_D0]
0000000000010ed8         sar        rcx, 0x1
0000000000010edb         mov        rdi, qword [rax+0xd8]
0000000000010ee2         lea        rax, qword [rcx+rcx*4]
0000000000010ee6         cmp        rbp, qword [rdi+rax*8+8]
0000000000010eeb         jle        loc_10f1e

0000000000010eed         jmp        loc_11027
0000000000010ef2         align      8

                     loc_10ef8:
0000000000010ef8         lea        rdx, qword [rbx+rcx]                        ; CODE XREF=update_cur_sifted_state+481
0000000000010efc         mov        rax, rdx
0000000000010eff         shr        rax, 0x3f
0000000000010f03         add        rax, rdx
0000000000010f06         sar        rax, 0x1
0000000000010f09         lea        rdx, qword [rax+rax*4]
0000000000010f0d         mov        r8, rax
0000000000010f10         cmp        rbp, qword [rdi+rdx*8+8]
0000000000010f15         jg         loc_11030

0000000000010f1b         mov        rcx, rax

                     loc_10f1e:
0000000000010f1e         cmp        rbx, rcx                                    ; CODE XREF=update_cur_sifted_state+427
0000000000010f21         jl         loc_10ef8

                     loc_10f23:
0000000000010f23         cmp        rsi, rbx                                    ; CODE XREF=update_cur_sifted_state+387
0000000000010f26         jle        loc_11020

0000000000010f2c         lea        rax, qword [rbx+rbx*4]
0000000000010f30         lea        rsi, qword [rax*8]
0000000000010f38         mov        rax, qword [rsp+0xd8+var_D0]
0000000000010f3d         mov        qword [rsp+0xd8+var_98], rsi
0000000000010f42         mov        rax, qword [rax+0xd8]
0000000000010f49         cmp        rbp, qword [rax+rsi+8]
0000000000010f4e         jne        loc_11020

0000000000010f54         cmp        rbx, 0xffffffffffffffff
0000000000010f58         je         loc_11020

0000000000010f5e         mov        rax, qword [rsp+0xd8+var_D0]
0000000000010f63         mov        qword [rsp+0xd8+var_78], 0x0
0000000000010f6c         mov        r12, qword [rax+0x98]
0000000000010f73         mov        rax, qword [rsp+0xd8+var_C8]
0000000000010f78         cmp        qword [rax+8], 0x0
0000000000010f7d         jle        loc_11020

0000000000010f83         lea        rax, qword [rsp+0xd8+var_78]
0000000000010f88         mov        qword [rsp+0xd8+var_B8], 0x0
0000000000010f91         mov        qword [rsp+0xd8+var_90], rbx
0000000000010f96         mov        r15, r13
0000000000010f99         mov        qword [rsp+0xd8+var_A0], rax
0000000000010f9e         jmp        loc_10fc2

                     loc_10fa0:
0000000000010fa0         cmp        al, 0x4                                     ; CODE XREF=update_cur_sifted_state+679, update_cur_sifted_state+685
0000000000010fa2         je         loc_11328

                     loc_10fa8:
0000000000010fa8         mov        rcx, qword [rsp+0xd8+var_C8]                ; CODE XREF=update_cur_sifted_state+687, update_cur_sifted_state+1987
0000000000010fad         add        qword [rsp+0xd8+var_B8], 0x1
0000000000010fb3         mov        rax, qword [rsp+0xd8+var_B8]
0000000000010fb8         cmp        rax, qword [rcx+8]
0000000000010fbc         jge        loc_1157b

                     loc_10fc2:
0000000000010fc2         mov        rax, qword [rsp+0xd8+var_C8]                ; CODE XREF=update_cur_sifted_state+606
0000000000010fc7         mov        rdi, qword [rsp+0xd8+var_B8]
0000000000010fcc         mov        rax, qword [rax+0x10]
0000000000010fd0         mov        r14, qword [rax+rdi*8]
0000000000010fd4         mov        rax, r14
0000000000010fd7         shl        rax, 0x4
0000000000010fdb         add        rax, qword [r12]
0000000000010fdf         cmp        r14, qword [r15+0x10]
0000000000010fe3         movzx      eax, byte [rax+8]
0000000000010fe7         jne        loc_10fa0

0000000000010fe9         cmp        rbp, qword [r15+0x18]
0000000000010fed         jne        loc_10fa0

0000000000010fef         jmp        loc_10fa8
0000000000010ff1         align      8

                     loc_10ff8:
0000000000010ff8         lea        r14, qword [rbp*8]                          ; CODE XREF=update_cur_sifted_state+99
0000000000011000         add        r14, qword [rsi]
0000000000011003         test       rcx, rcx
0000000000011006         jne        loc_110c0

000000000001100c         mov        qword [r14], 0x0
0000000000011013         xor        eax, eax
0000000000011015         jmp        loc_10dd8
000000000001101a         align      32

                     loc_11020:
0000000000011020         xor        eax, eax                                    ; CODE XREF=update_cur_sifted_state+486, update_cur_sifted_state+526, update_cur_sifted_state+536, update_cur_sifted_state+573, update_cur_sifted_state+2113
0000000000011022         jmp        loc_10dd8

                     loc_11027:
0000000000011027         mov        r8, rcx                                     ; CODE XREF=update_cur_sifted_state+429
000000000001102a         mov        rcx, rdx
000000000001102d         nop        dword [rax]

                     loc_11030:
0000000000011030         lea        rbx, qword [r8+1]                           ; CODE XREF=update_cur_sifted_state+469
0000000000011034         mov        rdx, rcx
0000000000011037         jmp        loc_10ec0
000000000001103c         align      64

                     loc_11040:
0000000000011040         mov        rdi, qword [rbx+8]                          ; CODE XREF=update_cur_sifted_state+246
0000000000011044         mov        qword [rdx+0x40], 0x0
000000000001104c         mov        qword [rsp+0xd8+var_B8], rdx
0000000000011051         mov        qword [rdx+0x38], rdi
0000000000011055         shl        rdi, 0x3                                    ; argument "__size" for method j_malloc
0000000000011059         call       j_malloc                                    ; malloc
000000000001105e         mov        rdx, qword [rsp+0xd8+var_B8]
0000000000011063         test       rax, rax
0000000000011066         mov        qword [rdx+0x48], rax
000000000001106a         je         loc_110b3

000000000001106c         cmp        qword [rbx+8], 0x0
0000000000011071         mov        dword [rsp+0xd8+var_78], 0x0
0000000000011079         jg         loc_1108e

000000000001107b         jmp        loc_10e3c

                     loc_11080:
0000000000011080         add        r15, 0x1                                    ; CODE XREF=update_cur_sifted_state+881
0000000000011084         cmp        r15, qword [rbx+8]
0000000000011088         jge        loc_10e3c

                     loc_1108e:
000000000001108e         mov        rax, qword [rbx+0x10]                       ; CODE XREF=update_cur_sifted_state+825
0000000000011092         mov        rdi, r14
0000000000011095         mov        rax, qword [rax+r15*8]
0000000000011099         lea        rdx, qword [rax+rax*2]
000000000001109d         mov        rax, qword [r12+0x38]
00000000000110a2         lea        rsi, qword [rax+rdx*8]
00000000000110a6         call       re_node_set_merge                           ; re_node_set_merge
00000000000110ab         test       eax, eax
00000000000110ad         mov        dword [rsp+0xd8+var_78], eax
00000000000110b1         je         loc_11080

                     loc_110b3:
00000000000110b3         mov        eax, 0xc                                    ; CODE XREF=update_cur_sifted_state+810
00000000000110b8         jmp        loc_10dd8
00000000000110bd         align      64

                     loc_110c0:
00000000000110c0         mov        qword [rsp+0xd8+var_C8], 0x0                ; CODE XREF=update_cur_sifted_state+710
00000000000110c9         jmp        loc_10e68
00000000000110ce         align      16

                     loc_110d0:
00000000000110d0         mov        rax, qword [rsp+0xd8+var_D0]                ; CODE XREF=update_cur_sifted_state+281
00000000000110d5         mov        rax, qword [rax+0xd8]
00000000000110dc         mov        qword [rsp+0xd8+var_B8], rax
00000000000110e1         jle        loc_111bb

00000000000110e7         xor        r15d, r15d
00000000000110ea         nop        word [rax+rax]

                     loc_110f0:
00000000000110f0         mov        rax, qword [r13+0x30]                       ; CODE XREF=update_cur_sifted_state+1141
00000000000110f4         mov        rdi, qword [rsp+0xd8+var_B8]
00000000000110f9         mov        rax, qword [rax+r15*8]
00000000000110fd         lea        rax, qword [rax+rax*4]
0000000000011101         lea        rdx, qword [rdi+rax*8]
0000000000011105         cmp        rbp, qword [rdx+0x10]
0000000000011109         jle        loc_111ad

000000000001110f         cmp        rbp, qword [rdx+8]
0000000000011113         jg         loc_111ad

0000000000011119         mov        rcx, qword [rdx]
000000000001111c         mov        rax, qword [r12]
0000000000011120         mov        rsi, qword [rbx+8]
0000000000011124         shl        rcx, 0x4
0000000000011128         cmp        rbp, qword [rdx+0x18]
000000000001112c         mov        r8, qword [rax+rcx]
0000000000011130         je         loc_111d0

0000000000011136         xor        r14d, r14d
0000000000011139         test       rsi, rsi
000000000001113c         jle        loc_111ad

000000000001113e         mov        qword [rsp+0xd8+var_B0], rbp
0000000000011143         mov        rbp, r8
0000000000011146         jmp        loc_1115e
0000000000011148         align      16

                     loc_11150:
0000000000011150         add        r14, 0x1                                    ; CODE XREF=update_cur_sifted_state+1082, update_cur_sifted_state+1087
0000000000011154         cmp        r14, qword [rbx+8]
0000000000011158         jge        loc_111a8

                     loc_1115a:
000000000001115a         mov        rax, qword [r12]                            ; CODE XREF=update_cur_sifted_state+1121

                     loc_1115e:
000000000001115e         mov        rdx, qword [rbx+0x10]                       ; CODE XREF=update_cur_sifted_state+1030
0000000000011162         mov        rsi, qword [rdx+r14*8]
0000000000011166         mov        rdx, rsi
0000000000011169         shl        rdx, 0x4
000000000001116d         add        rax, rdx
0000000000011170         movzx      edx, byte [rax+8]
0000000000011174         sub        edx, 0x8
0000000000011177         cmp        edx, 0x1
000000000001117a         ja         loc_11150

000000000001117c         cmp        rbp, qword [rax]
000000000001117f         jne        loc_11150

0000000000011181         mov        rcx, qword [rsp+0xd8+var_C8]
0000000000011186         mov        rdx, rbx
0000000000011189         mov        rdi, r12
000000000001118c         call       sub_epsilon_src_nodes                       ; sub_epsilon_src_nodes
0000000000011191         test       eax, eax
0000000000011193         jne        loc_10dd8

0000000000011199         add        r14, 0x1
000000000001119d         cmp        r14, qword [rbx+8]
00000000000111a1         jl         loc_1115a

00000000000111a3         nop        dword [rax+rax]

                     loc_111a8:
00000000000111a8         mov        rbp, qword [rsp+0xd8+var_B0]                ; CODE XREF=update_cur_sifted_state+1048

                     loc_111ad:
00000000000111ad         add        r15, 0x1                                    ; CODE XREF=update_cur_sifted_state+969, update_cur_sifted_state+979, update_cur_sifted_state+1020, update_cur_sifted_state+1171, update_cur_sifted_state+1306, update_cur_sifted_state+1317, update_cur_sifted_state+1484, update_cur_sifted_state+1501
00000000000111b1         cmp        r15, qword [r13+0x28]
00000000000111b5         jl         loc_110f0

                     loc_111bb:
00000000000111bb         mov        dword [rsp+0xd8+var_7C], 0x0                ; CODE XREF=update_cur_sifted_state+929
00000000000111c3         jmp        loc_10e5f
00000000000111c8         align      16

                     loc_111d0:
00000000000111d0         test       rsi, rsi                                    ; CODE XREF=update_cur_sifted_state+1008
00000000000111d3         jle        loc_111ad

00000000000111d5         mov        r10, qword [rbx+0x10]
00000000000111d9         mov        r9, 0xffffffffffffffff
00000000000111e0         lea        r11, qword [r10+rsi*8]
00000000000111e4         mov        rcx, r10
00000000000111e7         mov        rsi, r9
00000000000111ea         jmp        loc_11206
00000000000111ec         align      16

                     loc_111f0:
00000000000111f0         cmp        r14d, 0x9                                   ; CODE XREF=update_cur_sifted_state+1244
00000000000111f4         jne        loc_111fd

00000000000111f6         cmp        r8, qword [rdx]
00000000000111f9         cmove      r9, rdi

                     loc_111fd:
00000000000111fd         add        rcx, 0x8                                    ; CODE XREF=update_cur_sifted_state+1204
0000000000011201         cmp        r11, rcx
0000000000011204         je         loc_1122e

                     loc_11206:
0000000000011206         mov        rdi, qword [rcx]                            ; CODE XREF=update_cur_sifted_state+1194, update_cur_sifted_state+1260
0000000000011209         mov        rdx, rdi
000000000001120c         shl        rdx, 0x4
0000000000011210         add        rdx, rax
0000000000011213         movzx      r14d, byte [rdx+8]
0000000000011218         cmp        r14d, 0x8
000000000001121c         jne        loc_111f0

000000000001121e         cmp        r8, qword [rdx]
0000000000011221         cmove      rsi, rdi
0000000000011225         add        rcx, 0x8
0000000000011229         cmp        r11, rcx
000000000001122c         jne        loc_11206

                     loc_1122e:
000000000001122e         test       rsi, rsi                                    ; CODE XREF=update_cur_sifted_state+1220
0000000000011231         mov        r14, r9
0000000000011234         mov        qword [rsp+0xd8+var_B0], r9
0000000000011239         js         loc_11300

000000000001123f         mov        rcx, qword [rsp+0xd8+var_C8]
0000000000011244         mov        rdx, rbx
0000000000011247         mov        rdi, r12
000000000001124a         call       sub_epsilon_src_nodes                       ; sub_epsilon_src_nodes
000000000001124f         test       eax, eax
0000000000011251         jne        loc_10dd8

0000000000011257         test       r14, r14
000000000001125a         js         loc_111ad

0000000000011260         cmp        qword [rbx+8], 0x0
0000000000011265         jle        loc_111ad

000000000001126b         mov        r10, qword [rbx+0x10]

                     loc_1126f:
000000000001126f         xor        r14d, r14d                                  ; CODE XREF=update_cur_sifted_state+1478
0000000000011272         mov        qword [rsp+0xd8+var_A8], rbp
0000000000011277         mov        rbp, r14
000000000001127a         mov        r14, qword [rsp+0xd8+var_B0]
000000000001127f         jmp        loc_1129a
0000000000011281         align      8

                     loc_11288:
0000000000011288         add        rbp, 0x1                                    ; CODE XREF=update_cur_sifted_state+1409, update_cur_sifted_state+1432, update_cur_sifted_state+1465
000000000001128c         cmp        rbp, qword [rbx+8]
0000000000011290         jge        loc_11318

0000000000011296         mov        r10, qword [rbx+0x10]

                     loc_1129a:
000000000001129a         mov        r10, qword [r10+rbp*8]                      ; CODE XREF=update_cur_sifted_state+1343
000000000001129e         mov        rax, qword [r12+0x38]
00000000000112a3         mov        rdx, r14
00000000000112a6         lea        r9, qword [r10+r10*2]
00000000000112aa         shl        r9, 0x3
00000000000112ae         add        rax, r9
00000000000112b1         mov        rdi, qword [rax+8]
00000000000112b5         lea        rsi, qword [rax+0x10]
00000000000112b9         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
00000000000112be         test       rax, rax
00000000000112c1         jne        loc_11288

00000000000112c3         add        r9, qword [r12+0x30]
00000000000112c8         mov        rdi, qword [r9+8]
00000000000112cc         lea        rsi, qword [r9+0x10]
00000000000112d0         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
00000000000112d5         test       rax, rax
00000000000112d8         jne        loc_11288

00000000000112da         mov        rcx, qword [rsp+0xd8+var_C8]
00000000000112df         mov        rdx, rbx
00000000000112e2         mov        rsi, r10
00000000000112e5         mov        rdi, r12
00000000000112e8         call       sub_epsilon_src_nodes                       ; sub_epsilon_src_nodes
00000000000112ed         test       eax, eax
00000000000112ef         jne        loc_10dd8

00000000000112f5         sub        rbp, 0x1
00000000000112f9         jmp        loc_11288
00000000000112fb         align      256

                     loc_11300:
0000000000011300         cmp        qword [rsp+0xd8+var_B0], 0x0                ; CODE XREF=update_cur_sifted_state+1273
0000000000011306         jns        loc_1126f

000000000001130c         jmp        loc_111ad
0000000000011311         align      8

                     loc_11318:
0000000000011318         mov        rbp, qword [rsp+0xd8+var_A8]                ; CODE XREF=update_cur_sifted_state+1360
000000000001131d         jmp        loc_111ad
0000000000011322         align      8

                     loc_11328:
0000000000011328         mov        rax, qword [rsp+0xd8+var_D0]                ; CODE XREF=update_cur_sifted_state+610
000000000001132d         mov        r13, qword [rsp+0xd8+var_98]
0000000000011332         mov        rbx, qword [rsp+0xd8+var_90]
0000000000011337         add        r13, qword [rax+0xd8]
000000000001133e         lea        rax, qword [r14+r14*2]
0000000000011342         shl        rax, 0x3
0000000000011346         mov        qword [rsp+0xd8+var_A8], rax
000000000001134b         lea        rax, qword [r14*8]
0000000000011353         mov        qword [rsp+0xd8+var_B0], rax
0000000000011358         mov        rax, r15
000000000001135b         mov        r15, r13
000000000001135e         mov        r13, rbx
0000000000011361         mov        rbx, rax
0000000000011364         jmp        loc_114ce
0000000000011369         align      16

                     loc_11370:
0000000000011370         mov        rax, qword [r15+0x18]                       ; CODE XREF=update_cur_sifted_state+1937
0000000000011374         sub        rax, qword [r15+0x10]
0000000000011378         test       rax, rax
000000000001137b         lea        r9, qword [rbp+rax]
0000000000011380         je         loc_114e0

0000000000011386         mov        rax, qword [r12+0x18]
000000000001138b         mov        rsi, qword [rsp+0xd8+var_B0]
0000000000011390         mov        r10, qword [rax+rsi]

                     loc_11394:
0000000000011394         cmp        r9, qword [rbx+0x18]                        ; CODE XREF=update_cur_sifted_state+1970
0000000000011398         jg         loc_114d7

000000000001139e         mov        rax, qword [rbx]
00000000000113a1         mov        rax, qword [rax+r9*8]
00000000000113a5         test       rax, rax
00000000000113a8         je         loc_114d7

00000000000113ae         mov        rdi, qword [rax+0x10]
00000000000113b2         lea        rsi, qword [rax+0x18]
00000000000113b6         mov        rdx, r10
00000000000113b9         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
00000000000113be         test       rax, rax
00000000000113c1         je         loc_114d7

00000000000113c7         sub        rsp, 0x8
00000000000113cb         lea        rdx, qword [rbx+0x30]
00000000000113cf         lea        rsi, qword [rbx+0x28]
00000000000113d3         push       r9
00000000000113d5         mov        rdi, qword [rsp+0xe8+var_D0]
00000000000113da         mov        rcx, r14
00000000000113dd         mov        r9, r10
00000000000113e0         mov        r8, rbp
00000000000113e3         call       check_dst_limits.isra.13                    ; check_dst_limits.isra.13
00000000000113e8         test       al, al
00000000000113ea         pop        rdx
00000000000113eb         pop        rcx
00000000000113ec         jne        loc_114d7

00000000000113f2         cmp        qword [rsp+0xd8+var_78], 0x0
00000000000113f8         je         loc_11508

                     loc_113fe:
00000000000113fe         mov        rax, qword [rsp+0xd8+var_A0]                ; CODE XREF=update_cur_sifted_state+2056
0000000000011403         mov        rsi, r13
0000000000011406         mov        qword [rsp+0xd8+var_68], r14
000000000001140b         mov        qword [rsp+0xd8+var_60], rbp
0000000000011410         lea        rdi, qword [rax+0x20]
0000000000011414         call       re_node_set_insert                          ; re_node_set_insert
0000000000011419         test       al, al
000000000001141b         je         loc_11574

0000000000011421         mov        rdi, qword [rsp+0xd8+var_C0]
0000000000011426         mov        rax, qword [rsp+0xd8+var_78]
000000000001142b         mov        rsi, qword [rsp+0xd8+var_A0]
0000000000011430         mov        r15, qword [rax+rdi]
0000000000011434         mov        rdi, qword [rsp+0xd8+var_D0]
0000000000011439         call       sift_states_backward                        ; sift_states_backward
000000000001143e         test       eax, eax
0000000000011440         jne        loc_1154e

0000000000011446         mov        rsi, qword [rbx+8]
000000000001144a         mov        rdx, qword [rsp+0xd8+var_78]
000000000001144f         test       rsi, rsi
0000000000011452         je         loc_1146d

0000000000011454         lea        rcx, qword [rbp+1]
0000000000011458         mov        rdi, r12
000000000001145b         call       merge_state_array                           ; merge_state_array
0000000000011460         test       eax, eax
0000000000011462         jne        loc_1154e

0000000000011468         mov        rdx, qword [rsp+0xd8+var_78]

                     loc_1146d:
000000000001146d         mov        r11, qword [rsp+0xd8+var_A0]                ; CODE XREF=update_cur_sifted_state+1810
0000000000011472         mov        rax, qword [rsp+0xd8+var_C0]
0000000000011477         mov        rdi, qword [rsp+0xd8+var_50]
000000000001147f         lea        r9, qword [r11+0x30]
0000000000011483         mov        qword [rdx+rax], r15
0000000000011487         mov        rdx, r13
000000000001148a         mov        rsi, r9
000000000001148d         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
0000000000011492         sub        rax, 0x1
0000000000011496         mov        rdx, rax
0000000000011499         js         loc_114a7

000000000001149b         lea        rdi, qword [r11+0x28]
000000000001149f         mov        rsi, r9
00000000000114a2         call       re_node_set_remove_at.isra.4.part.5         ; re_node_set_remove_at.isra.4.part.5

                     loc_114a7:
00000000000114a7         mov        rcx, qword [rsp+0xd8+var_D0]                ; CODE XREF=update_cur_sifted_state+1881
00000000000114ac         lea        rax, qword [r13+r13*4]
00000000000114b1         mov        rdx, qword [rcx+0xd8]
00000000000114b8         lea        rax, qword [rdx+rax*8]
00000000000114bc         nop        dword [rax]

                     loc_114c0:
00000000000114c0         add        r13, 0x1                                    ; CODE XREF=update_cur_sifted_state+1946
00000000000114c4         cmp        byte [rax+0x20], 0x0
00000000000114c8         lea        r15, qword [rax+0x28]
00000000000114cc         je         loc_11500

                     loc_114ce:
00000000000114ce         cmp        r14, qword [r15]                            ; CODE XREF=update_cur_sifted_state+1572
00000000000114d1         je         loc_11370

                     loc_114d7:
00000000000114d7         mov        rax, r15                                    ; CODE XREF=update_cur_sifted_state+1624, update_cur_sifted_state+1640, update_cur_sifted_state+1665, update_cur_sifted_state+1708
00000000000114da         jmp        loc_114c0
00000000000114dc         align      32

                     loc_114e0:
00000000000114e0         mov        rax, qword [r12+0x28]                       ; CODE XREF=update_cur_sifted_state+1600
00000000000114e5         mov        rdi, qword [rsp+0xd8+var_A8]
00000000000114ea         mov        rax, qword [rax+rdi+0x10]
00000000000114ef         mov        r10, qword [rax]
00000000000114f2         jmp        loc_11394
00000000000114f7         align      256

                     loc_11500:
0000000000011500         mov        r15, rbx                                    ; CODE XREF=update_cur_sifted_state+1932
0000000000011503         jmp        loc_10fa8

                     loc_11508:
0000000000011508         mov        rax, qword [rbx+0x30]                       ; CODE XREF=update_cur_sifted_state+1720
000000000001150c         lea        rsi, qword [rbx+0x20]
0000000000011510         movdqa     xmm0, xmmword [rbx]
0000000000011514         mov        qword [rsp+0xd8+var_48], rax
000000000001151c         mov        rax, qword [rsp+0xd8+var_A0]
0000000000011521         movaps     xmmword [rsp+0xd8+var_78], xmm0
0000000000011526         lea        rdi, qword [rax+0x20]
000000000001152a         movdqa     xmm0, xmmword [rbx+0x10]
000000000001152f         movaps     xmmword [rsp+0xd8+var_68], xmm0
0000000000011534         movdqa     xmm0, xmmword [rbx+0x20]
0000000000011539         movaps     xmmword [rsp+0xd8+var_58], xmm0
0000000000011541         call       re_node_set_init_copy                       ; re_node_set_init_copy
0000000000011546         test       eax, eax
0000000000011548         je         loc_113fe

                     loc_1154e:
000000000001154e         cmp        qword [rsp+0xd8+var_78], 0x0                ; CODE XREF=update_cur_sifted_state+1792, update_cur_sifted_state+1826, update_cur_sifted_state+2105
0000000000011554         je         loc_10dd8

                     loc_1155a:
000000000001155a         mov        rdi, qword [rsp+0xd8+var_48]                ; argument "__ptr" for method j_free, CODE XREF=update_cur_sifted_state+2121
0000000000011562         mov        dword [rsp+0xd8+var_D0], eax
0000000000011566         call       j_free                                      ; free
000000000001156b         mov        eax, dword [rsp+0xd8+var_D0]
000000000001156f         jmp        loc_10dd8

                     loc_11574:
0000000000011574         mov        eax, 0xc                                    ; CODE XREF=update_cur_sifted_state+1755
0000000000011579         jmp        loc_1154e

                     loc_1157b:
000000000001157b         cmp        qword [rsp+0xd8+var_78], 0x0                ; CODE XREF=update_cur_sifted_state+636
0000000000011581         je         loc_11020

0000000000011587         xor        eax, eax
0000000000011589         jmp        loc_1155a

                     loc_1158b:
000000000001158b         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=update_cur_sifted_state+169
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_40: int8_t, -64


                     parse_bracket_element.constprop.37:
0000000000011590         push       r14                                         ; End of unwind block (FDE at 0x19738), Begin of unwind block (FDE at 0x19798), CODE XREF=sub_127b0+271, sub_127b0+1639
0000000000011592         push       r13
0000000000011594         mov        r10, rsi
0000000000011597         push       r12
0000000000011599         push       rbp
000000000001159a         movsxd     r11, ecx
000000000001159d         push       rbx
000000000001159e         mov        rbp, rdx
00000000000115a1         mov        rbx, rdi
00000000000115a4         sub        rsp, 0x20
00000000000115a8         mov        r12, qword [rsi+0x48]
00000000000115ac         mov        rax, qword [fs:0x28]
00000000000115b5         mov        qword [rsp+0x48+var_30], rax
00000000000115ba         xor        eax, eax
00000000000115bc         cmp        dword [rsi+0x90], 0x1
00000000000115c3         je         loc_11618

00000000000115c5         mov        rsi, r12
00000000000115c8         mov        rdi, r10
00000000000115cb         call       re_string_char_size_at.part.0               ; re_string_char_size_at.part.0
00000000000115d0         cmp        eax, 0x1
00000000000115d3         jle        loc_11618

00000000000115d5         mov        rdx, qword [r10+0x10]
00000000000115d9         cdqe
00000000000115db         mov        dword [rbx], 0x1
00000000000115e1         add        rax, r12
00000000000115e4         mov        edx, dword [rdx+r12*4]
00000000000115e8         mov        dword [rbx+8], edx
00000000000115eb         mov        qword [r10+0x48], rax
00000000000115ef         xor        eax, eax

                     loc_115f1:
00000000000115f1         mov        rcx, qword [rsp+0x48+var_30]                ; CODE XREF=parse_bracket_element.constprop.37+189, parse_bracket_element.constprop.37+353, parse_bracket_element.constprop.37+493, parse_bracket_element.constprop.37+528, parse_bracket_element.constprop.37+569, parse_bracket_element.constprop.37+582, parse_bracket_element.constprop.37+595
00000000000115f6         xor        rcx, qword [fs:0x28]
00000000000115ff         jne        loc_117e8

0000000000011605         add        rsp, 0x20
0000000000011609         pop        rbx
000000000001160a         pop        rbp
000000000001160b         pop        r12
000000000001160d         pop        r13
000000000001160f         pop        r14
0000000000011611         ret
                        ; endp
0000000000011612         align      8

                     loc_11618:
0000000000011618         movzx      eax, byte [rbp+8]                           ; CODE XREF=parse_bracket_element.constprop.37+51, parse_bracket_element.constprop.37+67
000000000001161c         add        r11, r12
000000000001161f         mov        qword [r10+0x48], r11
0000000000011623         mov        edx, eax
0000000000011625         and        edx, 0xfffffffb
0000000000011628         cmp        dl, 0x1a
000000000001162b         je         loc_11650

000000000001162d         cmp        al, 0x1c
000000000001162f         je         loc_11650

0000000000011631         cmp        al, 0x16
0000000000011633         jne        loc_1163e

0000000000011635         test       r9b, r9b
0000000000011638         je         loc_11782

                     loc_1163e:
000000000001163e         movzx      eax, byte [rbp]                             ; CODE XREF=parse_bracket_element.constprop.37+163, parse_bracket_element.constprop.37+522
0000000000011642         mov        dword [rbx], 0x0
0000000000011648         mov        byte [rbx+8], al
000000000001164b         xor        eax, eax
000000000001164d         jmp        loc_115f1
000000000001164f         align      16

                     loc_11650:
0000000000011650         mov        r12, qword [r10+0x68]                       ; CODE XREF=parse_bracket_element.constprop.37+155, parse_bracket_element.constprop.37+159
0000000000011654         cmp        r11, r12
0000000000011657         jge        loc_11778

000000000001165d         movzx      r13d, byte [rbp]
0000000000011662         xor        r8d, r8d
0000000000011665         jmp        loc_11692
0000000000011667         align      16

                     loc_11670:
0000000000011670         mov        rax, qword [rbx+8]                          ; CODE XREF=parse_bracket_element.constprop.37+294, parse_bracket_element.constprop.37+304
0000000000011674         mov        byte [rax+r8], r9b
0000000000011678         add        r8, 0x1
000000000001167c         cmp        r8, 0x20
0000000000011680         je         loc_11778

0000000000011686         movzx      eax, byte [rbp+8]
000000000001168a         mov        r11, qword [r10+0x48]
000000000001168e         mov        r12, qword [r10+0x68]

                     loc_11692:
0000000000011692         cmp        al, 0x1e                                    ; CODE XREF=parse_bracket_element.constprop.37+213
0000000000011694         movsxd     r14, r8d
0000000000011697         je         loc_11700

                     loc_11699:
0000000000011699         mov        rdx, qword [r10+8]                          ; CODE XREF=parse_bracket_element.constprop.37+376, parse_bracket_element.constprop.37+407, parse_bracket_element.constprop.37+436
000000000001169d         lea        rax, qword [r11+1]
00000000000116a1         mov        qword [r10+0x48], rax
00000000000116a5         movzx      r9d, byte [rdx+r11]

                     loc_116aa:
00000000000116aa         cmp        rax, r12                                    ; CODE XREF=parse_bracket_element.constprop.37+477, parse_bracket_element.constprop.37+556
00000000000116ad         jge        loc_11778

00000000000116b3         cmp        r13b, r9b
00000000000116b6         jne        loc_11670

00000000000116b8         mov        rdx, qword [r10+8]
00000000000116bc         cmp        byte [rdx+rax], 0x5d
00000000000116c0         jne        loc_11670

00000000000116c2         add        rax, 0x1
00000000000116c6         mov        qword [r10+0x48], rax
00000000000116ca         mov        rax, qword [rbx+8]
00000000000116ce         mov        byte [rax+r14], 0x0
00000000000116d3         movzx      eax, byte [rbp+8]
00000000000116d7         cmp        al, 0x1c
00000000000116d9         je         loc_117db

00000000000116df         cmp        al, 0x1e
00000000000116e1         je         loc_117ce

00000000000116e7         cmp        al, 0x1a
00000000000116e9         je         loc_117c1

00000000000116ef         xor        eax, eax
00000000000116f1         jmp        loc_115f1
00000000000116f6         align      256

                     loc_11700:
0000000000011700         cmp        byte [r10+0x8b], 0x0                        ; CODE XREF=parse_bracket_element.constprop.37+263
0000000000011708         je         loc_11699

000000000001170a         cmp        byte [r10+0x8c], 0x0
0000000000011712         je         loc_117a8

0000000000011718         cmp        r11, qword [r10+0x30]
000000000001171c         je         loc_1172d

000000000001171e         mov        rax, qword [r10+0x10]
0000000000011722         cmp        dword [rax+r11*4], 0xffffffff
0000000000011727         je         loc_11699

                     loc_1172d:
000000000001172d         mov        rax, qword [r10+0x18]                       ; CODE XREF=parse_bracket_element.constprop.37+396
0000000000011731         mov        rax, qword [rax+r11*8]
0000000000011735         add        rax, qword [r10]
0000000000011738         add        rax, qword [r10+0x28]
000000000001173c         movzx      r9d, byte [rax]
0000000000011740         test       r9b, 0x80
0000000000011744         jne        loc_11699

000000000001174a         cmp        dword [r10+0x90], 0x1
0000000000011752         mov        eax, 0x1
0000000000011757         je         loc_11766

0000000000011759         mov        rsi, r11
000000000001175c         mov        rdi, r10
000000000001175f         call       re_string_char_size_at.part.0               ; re_string_char_size_at.part.0
0000000000011764         cdqe

                     loc_11766:
0000000000011766         add        rax, r11                                    ; CODE XREF=parse_bracket_element.constprop.37+455
0000000000011769         mov        qword [r10+0x48], rax
000000000001176d         jmp        loc_116aa
0000000000011772         align      8

                     loc_11778:
0000000000011778         mov        eax, 0x7                                    ; CODE XREF=parse_bracket_element.constprop.37+199, parse_bracket_element.constprop.37+240, parse_bracket_element.constprop.37+285
000000000001177d         jmp        loc_115f1

                     loc_11782:
0000000000011782         mov        rdi, rsp                                    ; CODE XREF=parse_bracket_element.constprop.37+168
0000000000011785         mov        rdx, r8
0000000000011788         mov        rsi, r10
000000000001178b         call       peek_token_bracket                          ; peek_token_bracket
0000000000011790         cmp        byte [rsp+0x48+var_40], 0x15
0000000000011795         mov        eax, 0xb
000000000001179a         je         loc_1163e

00000000000117a0         jmp        loc_115f1
00000000000117a5         align      8

                     loc_117a8:
00000000000117a8         lea        rax, qword [r11+1]                          ; CODE XREF=parse_bracket_element.constprop.37+386
00000000000117ac         add        r11, qword [r10]
00000000000117af         mov        rdx, qword [r10+0x28]
00000000000117b3         mov        qword [r10+0x48], rax
00000000000117b7         movzx      r9d, byte [r11+rdx]
00000000000117bc         jmp        loc_116aa

                     loc_117c1:
00000000000117c1         mov        dword [rbx], 0x3                            ; CODE XREF=parse_bracket_element.constprop.37+345
00000000000117c7         xor        eax, eax
00000000000117c9         jmp        loc_115f1

                     loc_117ce:
00000000000117ce         mov        dword [rbx], 0x4                            ; CODE XREF=parse_bracket_element.constprop.37+337
00000000000117d4         xor        eax, eax
00000000000117d6         jmp        loc_115f1

                     loc_117db:
00000000000117db         mov        dword [rbx], 0x2                            ; CODE XREF=parse_bracket_element.constprop.37+329
00000000000117e1         xor        eax, eax
00000000000117e3         jmp        loc_115f1

                     loc_117e8:
00000000000117e8         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=parse_bracket_element.constprop.37+111
                        ; endp
00000000000117ed         align      16                                          ; End of unwind block (FDE at 0x19798)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_50: int8_t, -80
        ;    var_58: int8_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104


                     peek_token:
00000000000117f0         push       r15                                         ; Begin of unwind block (FDE at 0x197dc), CODE XREF=peek_token+1722, fetch_number+41, parse_expression+139, sub_12040+292, sub_12040+385, sub_12040+1077, sub_12670+304, sub_127b0+789, sub_127b0+2010, parse_reg_exp+266, re_compile_internal+1168
00000000000117f2         push       r14
00000000000117f4         push       r13
00000000000117f6         push       r12
00000000000117f8         push       rbp
00000000000117f9         push       rbx
00000000000117fa         mov        rbp, rdi
00000000000117fd         sub        rsp, 0x38
0000000000011801         mov        r14, qword [rsi+0x48]
0000000000011805         mov        rax, qword [fs:0x28]
000000000001180e         mov        qword [rsp+0x68+var_40], rax
0000000000011813         xor        eax, eax
0000000000011815         cmp        qword [rsi+0x68], r14
0000000000011819         jle        loc_118b0

000000000001181f         movzx      r13d, byte [rdi+0xa]
0000000000011824         mov        r15, rdx
0000000000011827         mov        rdx, qword [rsi+8]
000000000001182b         mov        rbx, rsi
000000000001182e         movzx      r12d, byte [rdx+r14]
0000000000011833         and        r13d, 0xffffff9f
0000000000011837         mov        byte [rdi+0xa], r13b
000000000001183b         mov        eax, dword [rsi+0x90]
0000000000011841         mov        byte [rdi], r12b
0000000000011844         cmp        eax, 0x1
0000000000011847         jle        loc_118e0

000000000001184d         cmp        r14, qword [rsi+0x30]
0000000000011851         je         loc_119f0

0000000000011857         mov        rcx, qword [rsi+0x10]
000000000001185b         mov        ecx, dword [rcx+r14*4]
000000000001185f         cmp        ecx, 0xffffffff
0000000000011862         je         loc_11940

0000000000011868         cmp        r12b, 0x5c
000000000001186c         je         loc_11960

0000000000011872         mov        byte [rdi+8], 0x1

                     loc_11876:
0000000000011876         mov        edi, ecx                                    ; argument "__wc" for method j_iswalnum, CODE XREF=peek_token+534
0000000000011878         mov        qword [rsp+0x68+var_60], rdx
000000000001187d         mov        dword [rsp+0x68+var_68], ecx
0000000000011880         call       j_iswalnum                                  ; iswalnum
0000000000011885         mov        ecx, dword [rsp+0x68+var_68]
0000000000011888         test       eax, eax
000000000001188a         setne      al
000000000001188d         cmp        ecx, 0x5f
0000000000011890         sete       cl
0000000000011893         or         eax, ecx
0000000000011895         shl        eax, 0x6
0000000000011898         or         r13d, eax
000000000001189b         mov        byte [rbp+0xa], r13b
000000000001189f         mov        rdx, qword [rsp+0x68+var_60]
00000000000118a4         jmp        loc_1191c
00000000000118a6         align      16

                     loc_118b0:
00000000000118b0         mov        byte [rdi+8], 0x2                           ; CODE XREF=peek_token+41

                     loc_118b4:
00000000000118b4         mov        rdi, qword [rsp+0x68+var_40]                ; CODE XREF=peek_token+353, peek_token+553, peek_token+579, peek_token+589, peek_token+625, peek_token+659, peek_token+669, peek_token+714, peek_token+729, peek_token+748, peek_token+758
00000000000118b9         xor        rdi, qword [fs:0x28]
00000000000118c2         jne        loc_11ee8

00000000000118c8         add        rsp, 0x38
00000000000118cc         pop        rbx
00000000000118cd         pop        rbp
00000000000118ce         pop        r12
00000000000118d0         pop        r13
00000000000118d2         pop        r14
00000000000118d4         pop        r15
00000000000118d6         ret
                        ; endp
00000000000118d7         align      32

                     loc_118e0:
00000000000118e0         cmp        r12b, 0x5c                                  ; CODE XREF=peek_token+87
00000000000118e4         je         loc_11960

00000000000118e6         mov        byte [rbp+8], 0x1
00000000000118ea         mov        qword [rsp+0x68+var_68], rdx
00000000000118ee         call       j___ctype_b_loc                             ; __ctype_b_loc
00000000000118f3         mov        rsi, qword [rax]
00000000000118f6         movzx      ecx, r12b
00000000000118fa         movzx      eax, word [rsi+rcx*2]
00000000000118fe         shr        ax, 0x3
0000000000011902         and        eax, 0x1
0000000000011905         cmp        r12b, 0x5f
0000000000011909         sete       cl
000000000001190c         or         eax, ecx
000000000001190e         shl        eax, 0x6
0000000000011911         or         r13d, eax
0000000000011914         mov        byte [rbp+0xa], r13b
0000000000011918         mov        rdx, qword [rsp+0x68+var_68]

                     loc_1191c:
000000000001191c         sub        r12d, 0xa                                   ; CODE XREF=peek_token+180
0000000000011920         cmp        r12b, 0x73
0000000000011924         ja         loc_11a5c

000000000001192a         lea        rcx, qword [switch_table_16bd4]             ; switch_table_16bd4
0000000000011931         movzx      r12d, r12b
0000000000011935         movsxd     rax, dword [rcx+r12*4]
0000000000011939         add        rax, rcx
000000000001193c         jmp        rax                                         ; switch statement using table at 0x16bd4, with 116 cases, 0x11a20,0x11a48,0x11a5c,0x11a70,0x11a98,0x11ac0,0x11ad0,0x11af0,0x11b00,0x11b20,0x11b40,0x11b50,0x11b70,0x11b90
000000000001193e         align      64

                     loc_11940:
0000000000011940         or         r13d, 0x20                                  ; CODE XREF=peek_token+114
0000000000011944         mov        byte [rdi+8], 0x1
0000000000011948         mov        eax, 0x1
000000000001194d         mov        byte [rdi+0xa], r13b
0000000000011951         jmp        loc_118b4
0000000000011956         align      32

                     loc_11960:
0000000000011960         lea        rsi, qword [r14+1]                          ; CODE XREF=peek_token+124, peek_token+244, peek_token+516
0000000000011964         cmp        rsi, qword [rbx+0x58]
0000000000011968         jge        loc_11a10

000000000001196e         cmp        byte [rbx+0x8b], 0x0
0000000000011975         jne        loc_11e00

                     loc_1197b:
000000000001197b         movzx      edi, byte [rdx+r14+1]                       ; CODE XREF=peek_token+1647
0000000000011981         mov        r12d, edi
0000000000011984         mov        dword [rsp+0x68+var_60], edi

                     loc_11988:
0000000000011988         cmp        eax, 0x1                                    ; CODE XREF=peek_token+1653, peek_token+1702
000000000001198b         mov        byte [rbp], r12b
000000000001198f         mov        byte [rbp+8], 0x1
0000000000011993         jle        loc_11de0

0000000000011999         mov        rax, qword [rbx+0x10]
000000000001199d         mov        r8d, dword [rax+rsi*4]

                     loc_119a1:
00000000000119a1         mov        edi, r8d                                    ; argument "__wc" for method j_iswalnum, CODE XREF=peek_token+1779
00000000000119a4         mov        dword [rsp+0x68+var_68], r8d
00000000000119a8         call       j_iswalnum                                  ; iswalnum
00000000000119ad         mov        r8d, dword [rsp+0x68+var_68]
00000000000119b1         test       eax, eax
00000000000119b3         setne      al
00000000000119b6         cmp        r8d, 0x5f

                     loc_119ba:
00000000000119ba         sete       dl                                          ; CODE XREF=peek_token+1547
00000000000119bd         lea        ecx, dword [r12-0x27]
00000000000119c2         or         eax, edx
00000000000119c4         shl        eax, 0x6
00000000000119c7         or         r13d, eax
00000000000119ca         cmp        cl, 0x56
00000000000119cd         mov        byte [rbp+0xa], r13b
00000000000119d1         ja         loc_11dd5

00000000000119d7         lea        rdx, qword [switch_table_16da4]             ; switch_table_16da4
00000000000119de         movzx      ecx, cl
00000000000119e1         movsxd     rax, dword [rdx+rcx*4]
00000000000119e5         add        rax, rdx
00000000000119e8         jmp        rax                                         ; switch statement using table at 0x16da4, with 87 cases, 0x11bb9,0x11bd4,0x11bf2,0x11c0d,0x11c28,0x11c46,0x11c68,0x11c8a,0x11ca5,0x11cc0,0x11ce2,0x11cfd,0x11d1f,0x11d41,0x11d6a,0x11d85,0x11d9c,0x11db3,0x11dd5
00000000000119ea         align      16

                     loc_119f0:
00000000000119f0         cmp        r12b, 0x5c                                  ; CODE XREF=peek_token+97
00000000000119f4         je         loc_11960

00000000000119fa         mov        rax, qword [rbx+0x10]
00000000000119fe         mov        byte [rbp+8], 0x1
0000000000011a02         mov        ecx, dword [rax+r14*4]
0000000000011a06         jmp        loc_11876
0000000000011a0b         align      16

                     loc_11a10:
0000000000011a10         mov        byte [rbp+8], 0x24                          ; CODE XREF=peek_token+376
0000000000011a14         mov        eax, 0x1
0000000000011a19         jmp        loc_118b4
0000000000011a1e         align      32

                     loc_11a20:
0000000000011a20         and        r15d, 0x1200                                ; case 115, CODE XREF=peek_token+332
0000000000011a27         mov        eax, 0x1
0000000000011a2c         cmp        r15, 0x1200
0000000000011a33         jne        loc_118b4

                     loc_11a39:
0000000000011a39         mov        byte [rbp+8], 0x18                          ; CODE XREF=peek_token+1105
0000000000011a3d         jmp        loc_118b4
0000000000011a42         align      8

                     loc_11a48:
0000000000011a48         and        r15d, 0x8400                                ; case 114, CODE XREF=peek_token+332
0000000000011a4f         cmp        r15, 0x8000
0000000000011a56         je         loc_11b32

                     loc_11a5c:
0000000000011a5c         mov        eax, 0x1                                    ; case 112, CODE XREF=peek_token+308, peek_token+332, peek_token+1664, peek_token+1677
0000000000011a61         jmp        loc_118b4
0000000000011a66         align      16

                     loc_11a70:
0000000000011a70         and        r15d, 0x1200                                ; case 113, CODE XREF=peek_token+332
0000000000011a77         mov        eax, 0x1
0000000000011a7c         cmp        r15, 0x1200
0000000000011a83         jne        loc_118b4

                     loc_11a89:
0000000000011a89         mov        byte [rbp+8], 0x17                          ; CODE XREF=peek_token+1021
0000000000011a8d         jmp        loc_118b4
0000000000011a92         align      8

                     loc_11a98:
0000000000011a98         test       r15d, 0x800008                              ; case 84, CODE XREF=peek_token+332
0000000000011a9f         jne        loc_11aaa

0000000000011aa1         test       r14, r14
0000000000011aa4         jne        loc_11e6a

                     loc_11aaa:
0000000000011aaa         mov        byte [rbp+8], 0xc                           ; CODE XREF=peek_token+687, peek_token+1683
0000000000011aae         mov        dword [rbp], 0x10
0000000000011ab5         mov        eax, 0x1
0000000000011aba         jmp        loc_118b4
0000000000011abf         align      64

                     loc_11ac0:
0000000000011ac0         mov        byte [rbp+8], 0x14                          ; case 81, CODE XREF=peek_token+332
0000000000011ac4         mov        eax, 0x1
0000000000011ac9         jmp        loc_118b4
0000000000011ace         align      16

                     loc_11ad0:
0000000000011ad0         test       r15d, 0x402                                 ; case 53, CODE XREF=peek_token+332
0000000000011ad7         mov        eax, 0x1
0000000000011adc         jne        loc_118b4

                     loc_11ae2:
0000000000011ae2         mov        byte [rbp+8], 0x13                          ; CODE XREF=peek_token+1288
0000000000011ae6         jmp        loc_118b4
0000000000011aeb         align      16

                     loc_11af0:
0000000000011af0         mov        byte [rbp+8], 0x5                           ; case 36, CODE XREF=peek_token+332
0000000000011af4         mov        eax, 0x1
0000000000011af9         jmp        loc_118b4
0000000000011afe         align      256

                     loc_11b00:
0000000000011b00         test       r15d, 0x402                                 ; case 33, CODE XREF=peek_token+332
0000000000011b07         mov        eax, 0x1
0000000000011b0c         jne        loc_118b4

                     loc_11b12:
0000000000011b12         mov        byte [rbp+8], 0x12                          ; CODE XREF=peek_token+1424
0000000000011b16         jmp        loc_118b4
0000000000011b1b         align      32

                     loc_11b20:
0000000000011b20         test       r15d, 0x800                                 ; case 0, CODE XREF=peek_token+332
0000000000011b27         mov        eax, 0x1
0000000000011b2c         je         loc_118b4

                     loc_11b32:
0000000000011b32         mov        byte [rbp+8], 0xa                           ; CODE XREF=peek_token+614
0000000000011b36         mov        eax, 0x1
0000000000011b3b         jmp        loc_118b4

                     loc_11b40:
0000000000011b40         mov        byte [rbp+8], 0xb                           ; case 32, CODE XREF=peek_token+332
0000000000011b44         mov        eax, 0x1
0000000000011b49         jmp        loc_118b4
0000000000011b4e         align      16

                     loc_11b50:
0000000000011b50         test       r15d, deregister_tm_clones                  ; case 31, CODE XREF=peek_token+332
0000000000011b57         mov        eax, 0x1
0000000000011b5c         je         loc_118b4

                     loc_11b62:
0000000000011b62         mov        byte [rbp+8], 0x9                           ; CODE XREF=peek_token+1447
0000000000011b66         jmp        loc_118b4
0000000000011b6b         align      16

                     loc_11b70:
0000000000011b70         test       r15d, deregister_tm_clones                  ; case 30, CODE XREF=peek_token+332
0000000000011b77         mov        eax, 0x1
0000000000011b7c         je         loc_118b4

                     loc_11b82:
0000000000011b82         mov        byte [rbp+8], 0x8                           ; CODE XREF=peek_token+1470
0000000000011b86         jmp        loc_118b4
0000000000011b8b         align      16

                     loc_11b90:
0000000000011b90         test       r15b, 0x8                                   ; case 26, CODE XREF=peek_token+332
0000000000011b94         jne        loc_11ba4

0000000000011b96         add        r14, 0x1
0000000000011b9a         cmp        r14, qword [rbx+0x58]
0000000000011b9e         jne        loc_11e9b

                     loc_11ba4:
0000000000011ba4         mov        byte [rbp+8], 0xc                           ; CODE XREF=peek_token+932, peek_token+1754
0000000000011ba8         mov        dword [rbp], 0x20
0000000000011baf         mov        eax, 0x1
0000000000011bb4         jmp        loc_118b4

                     loc_11bb9:
0000000000011bb9         test       r15d, 0x8400                                ; case 85, CODE XREF=peek_token+504
0000000000011bc0         mov        eax, 0x2
0000000000011bc5         jne        loc_118b4

0000000000011bcb         mov        byte [rbp+8], 0xa
0000000000011bcf         jmp        loc_118b4

                     loc_11bd4:
0000000000011bd4         and        r15d, 0x1200                                ; case 84, CODE XREF=peek_token+504
0000000000011bdb         mov        eax, 0x2
0000000000011be0         cmp        r15, 0x200
0000000000011be7         jne        loc_118b4

0000000000011bed         jmp        loc_11a89

                     loc_11bf2:
0000000000011bf2         test       r15d, 0x80000                               ; case 80, CODE XREF=peek_token+504
0000000000011bf9         mov        eax, 0x2
0000000000011bfe         jne        loc_118b4

0000000000011c04         mov        byte [rbp+8], 0x20
0000000000011c08         jmp        loc_118b4

                     loc_11c0d:
0000000000011c0d         test       r15d, 0x80000                               ; case 76, CODE XREF=peek_token+504
0000000000011c14         mov        eax, 0x2
0000000000011c19         jne        loc_118b4

0000000000011c1f         mov        byte [rbp+8], 0x22
0000000000011c23         jmp        loc_118b4

                     loc_11c28:
0000000000011c28         and        r15d, 0x1200                                ; case 86, CODE XREF=peek_token+504
0000000000011c2f         mov        eax, 0x2
0000000000011c34         cmp        r15, 0x200
0000000000011c3b         jne        loc_118b4

0000000000011c41         jmp        loc_11a39

                     loc_11c46:
0000000000011c46         test       r15d, 0x80000                               ; case 59, CODE XREF=peek_token+504
0000000000011c4d         mov        eax, 0x2
0000000000011c52         jne        loc_118b4

0000000000011c58         mov        byte [rbp+8], 0xc
0000000000011c5c         mov        dword [rbp], 0x100
0000000000011c63         jmp        loc_118b4

                     loc_11c68:
0000000000011c68         test       r15d, 0x80000                               ; case 57, CODE XREF=peek_token+504
0000000000011c6f         mov        eax, 0x2
0000000000011c74         jne        loc_118b4

0000000000011c7a         mov        byte [rbp+8], 0xc
0000000000011c7e         mov        dword [rbp], 0x40
0000000000011c85         jmp        loc_118b4

                     loc_11c8a:
0000000000011c8a         test       r15d, 0x80000                               ; case 48, CODE XREF=peek_token+504
0000000000011c91         mov        eax, 0x2
0000000000011c96         jne        loc_118b4

0000000000011c9c         mov        byte [rbp+8], 0x21
0000000000011ca0         jmp        loc_118b4

                     loc_11ca5:
0000000000011ca5         test       r15d, 0x80000                               ; case 44, CODE XREF=peek_token+504
0000000000011cac         mov        eax, 0x2
0000000000011cb1         jne        loc_118b4

0000000000011cb7         mov        byte [rbp+8], 0x23
0000000000011cbb         jmp        loc_118b4

                     loc_11cc0:
0000000000011cc0         test       r15d, 0x80000                               ; case 27, CODE XREF=peek_token+504
0000000000011cc7         mov        eax, 0x2
0000000000011ccc         jne        loc_118b4

0000000000011cd2         mov        byte [rbp+8], 0xc
0000000000011cd6         mov        dword [rbp], 0x200
0000000000011cdd         jmp        loc_118b4

                     loc_11ce2:
0000000000011ce2         and        r15d, 0x402                                 ; case 24, CODE XREF=peek_token+504
0000000000011ce9         mov        eax, 0x2
0000000000011cee         cmp        r15, 0x2
0000000000011cf2         jne        loc_118b4

0000000000011cf8         jmp        loc_11ae2

                     loc_11cfd:
0000000000011cfd         test       r15d, 0x80000                               ; case 23, CODE XREF=peek_token+504
0000000000011d04         mov        eax, 0x2
0000000000011d09         jne        loc_118b4

0000000000011d0f         mov        byte [rbp+8], 0xc
0000000000011d13         mov        dword [rbp], 0x9
0000000000011d1a         jmp        loc_118b4

                     loc_11d1f:
0000000000011d1f         test       r15d, 0x80000                               ; case 21, CODE XREF=peek_token+504
0000000000011d26         mov        eax, 0x2
0000000000011d2b         jne        loc_118b4

0000000000011d31         mov        byte [rbp+8], 0xc
0000000000011d35         mov        dword [rbp], 0x6
0000000000011d3c         jmp        loc_118b4

                     loc_11d41:
0000000000011d41         test       r15d, 0x4000                                ; case 18, CODE XREF=peek_token+504
0000000000011d48         mov        eax, 0x2
0000000000011d4d         jne        loc_118b4

0000000000011d53         mov        edx, dword [rsp+0x68+var_60]
0000000000011d57         mov        byte [rbp+8], 0x4
0000000000011d5b         sub        edx, 0x31
0000000000011d5e         movsxd     rdx, edx
0000000000011d61         mov        qword [rbp], rdx
0000000000011d65         jmp        loc_118b4

                     loc_11d6a:
0000000000011d6a         and        r15d, 0x402                                 ; case 4, CODE XREF=peek_token+504
0000000000011d71         mov        eax, 0x2
0000000000011d76         cmp        r15, 0x2
0000000000011d7a         jne        loc_118b4

0000000000011d80         jmp        loc_11b12

                     loc_11d85:
0000000000011d85         test       r15d, deregister_tm_clones                  ; case 2, CODE XREF=peek_token+504
0000000000011d8c         mov        eax, 0x2
0000000000011d91         jne        loc_118b4

0000000000011d97         jmp        loc_11b62

                     loc_11d9c:
0000000000011d9c         test       r15d, deregister_tm_clones                  ; case 1, CODE XREF=peek_token+504
0000000000011da3         mov        eax, 0x2
0000000000011da8         jne        loc_118b4

0000000000011dae         jmp        loc_11b82

                     loc_11db3:
0000000000011db3         test       r15d, 0x80000                               ; case 0, CODE XREF=peek_token+504
0000000000011dba         mov        eax, 0x2
0000000000011dbf         jne        loc_118b4

0000000000011dc5         mov        byte [rbp+8], 0xc
0000000000011dc9         mov        dword [rbp], 0x80
0000000000011dd0         jmp        loc_118b4

                     loc_11dd5:
0000000000011dd5         mov        eax, 0x2                                    ; case 83, CODE XREF=peek_token+481, peek_token+504
0000000000011dda         jmp        loc_118b4
0000000000011ddf         align      32

                     loc_11de0:
0000000000011de0         call       j___ctype_b_loc                             ; __ctype_b_loc, CODE XREF=peek_token+419
0000000000011de5         mov        rsi, qword [rax]
0000000000011de8         movzx      edx, r12b
0000000000011dec         movzx      eax, word [rsi+rdx*2]
0000000000011df0         shr        ax, 0x3
0000000000011df4         and        eax, 0x1
0000000000011df7         cmp        r12b, 0x5f
0000000000011dfb         jmp        loc_119ba

                     loc_11e00:
0000000000011e00         cmp        eax, 0x1                                    ; CODE XREF=peek_token+389
0000000000011e03         jle        loc_11e34

0000000000011e05         mov        rcx, qword [rbx+0x10]
0000000000011e09         lea        rdi, qword [rsi*4]
0000000000011e11         mov        r8d, dword [rcx+rsi*4]
0000000000011e15         cmp        r8d, 0xffffffff
0000000000011e19         je         loc_11ecf

0000000000011e1f         lea        r9, qword [r14+2]
0000000000011e23         cmp        qword [rbx+0x30], r9
0000000000011e27         je         loc_11e34

0000000000011e29         cmp        dword [rcx+rdi+4], 0xffffffff
0000000000011e2e         je         loc_11ecf

                     loc_11e34:
0000000000011e34         cmp        byte [rbx+0x8c], 0x0                        ; CODE XREF=peek_token+1555, peek_token+1591
0000000000011e3b         mov        rcx, qword [rbx]
0000000000011e3e         mov        rdi, qword [rbx+0x28]
0000000000011e42         je         loc_11e88

0000000000011e44         mov        r8, qword [rbx+0x18]
0000000000011e48         add        rcx, rdi
0000000000011e4b         add        rcx, qword [r8+rsi*8]
0000000000011e4f         movzx      edi, byte [rcx]
0000000000011e52         mov        r12d, edi
0000000000011e55         mov        dword [rsp+0x68+var_60], edi
0000000000011e59         and        edi, 0x80
0000000000011e5f         jne        loc_1197b

0000000000011e65         jmp        loc_11988

                     loc_11e6a:
0000000000011e6a         cmp        byte [rdx+r14-1], 0xa                       ; CODE XREF=peek_token+692
0000000000011e70         jne        loc_11a5c

0000000000011e76         test       r15d, 0x800
0000000000011e7d         je         loc_11a5c

0000000000011e83         jmp        loc_11aaa

                     loc_11e88:
0000000000011e88         add        rcx, rsi                                    ; CODE XREF=peek_token+1618
0000000000011e8b         movzx      edi, byte [rcx+rdi]
0000000000011e8f         mov        r12d, edi
0000000000011e92         mov        dword [rsp+0x68+var_60], edi
0000000000011e96         jmp        loc_11988

                     loc_11e9b:
0000000000011e9b         lea        rdi, qword [rsp+0x68+var_58]                ; CODE XREF=peek_token+942
0000000000011ea0         mov        rdx, r15
0000000000011ea3         mov        qword [rbx+0x48], r14
0000000000011ea7         mov        rsi, rbx
0000000000011eaa         call       peek_token                                  ; peek_token
0000000000011eaf         movzx      eax, byte [rsp+0x68+var_50]
0000000000011eb4         sub        qword [rbx+0x48], 0x1
0000000000011eb9         lea        edx, dword [rax-9]
0000000000011ebc         mov        eax, 0x1
0000000000011ec1         cmp        dl, 0x1
0000000000011ec4         ja         loc_118b4

0000000000011eca         jmp        loc_11ba4

                     loc_11ecf:
0000000000011ecf         movzx      eax, byte [rdx+r14+1]                       ; CODE XREF=peek_token+1577, peek_token+1598
0000000000011ed5         mov        byte [rbp+8], 0x1
0000000000011ed9         mov        r12d, eax
0000000000011edc         mov        byte [rbp], al
0000000000011edf         mov        dword [rsp+0x68+var_60], eax
0000000000011ee3         jmp        loc_119a1

                     loc_11ee8:
0000000000011ee8         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=peek_token+210
                        ; endp
0000000000011eed         align      16                                          ; End of unwind block (FDE at 0x197dc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fetch_number:
0000000000011ef0         push       r14                                         ; Begin of unwind block (FDE at 0x19828), CODE XREF=sub_12040+1175, sub_12040+1409
0000000000011ef2         mov        r14, rdi
0000000000011ef5         push       r13
0000000000011ef7         mov        r13, rsi
0000000000011efa         push       r12
0000000000011efc         mov        r12, 0xfffffffffffffffe
0000000000011f03         push       rbp
0000000000011f04         mov        rbp, rdx
0000000000011f07         push       rbx
0000000000011f08         mov        rbx, 0xffffffffffffffff
0000000000011f0f         nop

                     loc_11f10:
0000000000011f10         mov        rdx, rbp                                    ; CODE XREF=fetch_number+82, fetch_number+135, fetch_number+177
0000000000011f13         mov        rsi, r14
0000000000011f16         mov        rdi, r13
0000000000011f19         call       peek_token                                  ; peek_token
0000000000011f1e         cdqe
0000000000011f20         add        qword [r14+0x48], rax
0000000000011f24         movzx      eax, byte [r13+8]
0000000000011f29         movzx      edx, byte [r13]
0000000000011f2e         cmp        al, 0x2
0000000000011f30         je         loc_11f80

0000000000011f32         cmp        al, 0x18
0000000000011f34         je         loc_11f87

0000000000011f36         cmp        dl, 0x2c
0000000000011f39         je         loc_11f87

0000000000011f3b         cmp        al, 0x1
0000000000011f3d         je         loc_11f48

                     loc_11f3f:
0000000000011f3f         mov        rbx, r12                                    ; CODE XREF=fetch_number+93, fetch_number+99
0000000000011f42         jmp        loc_11f10
0000000000011f44         align      8

                     loc_11f48:
0000000000011f48         lea        eax, dword [rdx-0x30]                       ; CODE XREF=fetch_number+77
0000000000011f4b         cmp        al, 0x9
0000000000011f4d         ja         loc_11f3f

0000000000011f4f         cmp        rbx, 0xfffffffffffffffe
0000000000011f53         je         loc_11f3f

0000000000011f55         cmp        rbx, 0xffffffffffffffff
0000000000011f59         je         loc_11f98

0000000000011f5b         lea        rax, qword [rbx+rbx*4]
0000000000011f5f         lea        rbx, qword [rdx+rax*2]
0000000000011f63         mov        eax, 0x8030
0000000000011f68         cmp        rbx, 0x8030
0000000000011f6f         cmovg      rbx, rax
0000000000011f73         sub        rbx, 0x30
0000000000011f77         jmp        loc_11f10
0000000000011f79         align      128

                     loc_11f80:
0000000000011f80         mov        rbx, 0xfffffffffffffffe                     ; CODE XREF=fetch_number+64

                     loc_11f87:
0000000000011f87         mov        rax, rbx                                    ; CODE XREF=fetch_number+68, fetch_number+73
0000000000011f8a         pop        rbx
0000000000011f8b         pop        rbp
0000000000011f8c         pop        r12
0000000000011f8e         pop        r13
0000000000011f90         pop        r14
0000000000011f92         ret
                        ; endp
0000000000011f93         align      8

                     loc_11f98:
0000000000011f98         movzx      ebx, dl                                     ; CODE XREF=fetch_number+105
0000000000011f9b         sub        ebx, 0x30
0000000000011f9e         movsxd     rbx, ebx
0000000000011fa1         jmp        loc_11f10
0000000000011fa6         align      16                                          ; End of unwind block (FDE at 0x19828)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_118: int64_t, -280
        ;    var_130: int64_t, -304
        ;    var_138: int64_t, -312
        ;    var_140: int64_t, -320
        ;    var_148: int64_t, -328


                     parse_expression:
0000000000011fb0         push       r15                                         ; Begin of unwind block (FDE at 0x19868), CODE XREF=sub_127b0+2042, parse_branch+57, parse_branch+146
0000000000011fb2         push       r14
0000000000011fb4         push       r13
0000000000011fb6         push       r12
0000000000011fb8         push       rbp
0000000000011fb9         push       rbx
0000000000011fba         sub        rsp, 0x128
0000000000011fc1         mov        qword [rsp+0x158+var_138], rcx
0000000000011fc6         movzx      ecx, byte [rdx+8]
0000000000011fca         mov        rax, qword [fs:0x28]
0000000000011fd3         mov        qword [rsp+0x158+var_40], rax
0000000000011fdb         xor        eax, eax
0000000000011fdd         mov        rax, qword [rsi]
0000000000011fe0         mov        qword [rsp+0x158+var_140], rdx
0000000000011fe5         mov        qword [rsp+0x158+var_118], r9
0000000000011fea         cmp        cl, 0x24
0000000000011fed         mov        qword [rsp+0x158+var_148], rax
0000000000011ff2         ja         loc_120b0

0000000000011ff8         mov        rbp, rsi
0000000000011ffb         lea        rsi, qword [switch_table_16da4+348]         ; 0x16f00
0000000000012002         movzx      edx, cl
0000000000012005         mov        r14, rdi
0000000000012008         movsxd     rax, dword [rsi+rdx*4]
000000000001200c         add        rax, rsi
000000000001200f         jmp        rax
                        ; endp
0000000000012011         mov        rbx, qword [rbp+0x30]
0000000000012015         mov        r15, qword [rsp+0x20]
000000000001201a         mov        rsi, rdi
000000000001201d         mov        r13, qword [rsp+0x18]
0000000000012022         mov        qword [rsp], r8
0000000000012026         lea        rax, qword [rbx+1]
000000000001202a         mov        rdx, r15
000000000001202d         or         rdx, 0x800000
0000000000012034         mov        rdi, r13
0000000000012037         mov        qword [rbp+0x30], rax
000000000001203b         call       peek_token                                  ; peek_token


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_12040:
0000000000012040         cdqe
0000000000012042         add        qword [r14+0x48], rax
0000000000012046         xor        eax, eax
0000000000012048         cmp        byte [r13+8], 0x9
000000000001204d         mov        rdx, r13
0000000000012050         je         loc_12b50

0000000000012056         mov        r13, qword [rsp+64]
000000000001205b         mov        r8, qword [rsp+0]
000000000001205f         mov        rcx, r15                                    ; argument #4 for method parse_reg_exp
0000000000012062         mov        rsi, rbp                                    ; argument #2 for method parse_reg_exp
0000000000012065         mov        rdi, r14                                    ; argument #1 for method parse_reg_exp
0000000000012068         add        r8, 0x1                                     ; argument #5 for method parse_reg_exp
000000000001206c         mov        r9, r13                                     ; argument #6 for method parse_reg_exp
000000000001206f         call       parse_reg_exp                               ; parse_reg_exp
0000000000012074         mov        r11d, dword [r13]
0000000000012078         test       r11d, r11d
000000000001207b         jne        sub_12040+112

000000000001207d         mov        rdx, qword [rsp+24]
0000000000012082         cmp        byte [rdx+8], 0x9
0000000000012086         je         loc_12b50

000000000001208c         test       rax, rax
000000000001208f         je         loc_120a2

0000000000012091         lea        rsi, qword [free_tree]                      ; argument #2 for method postorder, free_tree
0000000000012098         xor        edx, edx                                    ; argument #3 for method postorder
000000000001209a         mov        rdi, rax                                    ; argument #1 for method postorder
000000000001209d         call       postorder                                   ; postorder

                     loc_120a2:
00000000000120a2         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_12040+79
00000000000120a7         mov        dword [rax], 0x8
00000000000120ad         nop        dword [rax]
                        ; endp

                     loc_120b0:
00000000000120b0         mov        qword [rsp+0x158+var_130], 0x0              ; CODE XREF=parse_expression+66, sub_127b0+431
00000000000120b9         nop        dword [rax]
00000000000120c0         mov        rdi, qword [rsp+0x158+var_40]               ; CODE XREF=sub_127b0+923, sub_127b0+1015, sub_127b0+2052, sub_127b0+2114
00000000000120c8         xor        rdi, qword [fs:0x28]
00000000000120d1         mov        rax, qword [rsp+0x158+var_130]
00000000000120d6         jne        loc_1344e

00000000000120dc         add        rsp, 0x128
00000000000120e3         pop        rbx
00000000000120e4         pop        rbp
00000000000120e5         pop        r12
00000000000120e7         pop        r13
00000000000120e9         pop        r14
00000000000120eb         pop        r15
00000000000120ed         ret
                        ; endp
00000000000120ee         test       qword [rsp+0x20], 0x1000000
00000000000120f7         jne        sub_12040+781
00000000000120fd         mov        rax, qword [rsp+0x20]
0000000000012102         test       al, 0x20
0000000000012104         jne        sub_12040+781
000000000001210a         test       al, 0x10
000000000001210c         jne        sub_127b0+1989
0000000000012112         cmp        cl, 0x9
0000000000012115         je         sub_127b0+888
000000000001211b         mov        rax, qword [rsp+0x10]                       ; CODE XREF=sub_127b0+897
0000000000012120         mov        r8, qword [rsp+0x18]
0000000000012125         xor        ecx, ecx
0000000000012127         xor        edx, edx
0000000000012129         lea        rsi, qword [rax+0x80]
0000000000012130         lea        rdi, qword [rax+0x70]
0000000000012134         mov        byte [r8+8], 0x1
0000000000012139         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000001213e         test       rax, rax
0000000000012141         mov        qword [rsp+0x28], rax
0000000000012146         je         sub_127b0+872

                     loc_1214c:
000000000001214c         mov        rbx, qword [rsp+24]                         ; CODE XREF=sub_127b0+416, sub_127b0+425, sub_127b0+580, sub_127b0+636, sub_127b0+649, sub_127b0+729, sub_127b0+990, sub_127b0+1526
0000000000012151         mov        rdx, qword [rsp+32]                         ; argument #3 for method peek_token
0000000000012156         mov        rsi, r14                                    ; argument #2 for method peek_token
0000000000012159         lea        r15, qword [rsp+192]
0000000000012161         mov        rdi, rbx                                    ; argument #1 for method peek_token
0000000000012164         call       peek_token                                  ; peek_token
0000000000012169         cdqe
000000000001216b         add        qword [r14+0x48], rax
000000000001216f         movzx      eax, byte [rbx+8]
0000000000012173         nop        dword [rax+rax]

                     loc_12178:
0000000000012178         cmp        al, 0x17                                    ; CODE XREF=sub_12040+736, sub_12040+748
000000000001217a         ja         sub_12040+128

0000000000012180         cmp        al, 0x12
0000000000012182         mov        ecx, 0x8c0800
0000000000012187         sete       bl
000000000001218a         bt         rcx, rax
000000000001218e         jae        sub_12040+128

0000000000012194         mov        rcx, qword [rsp+24]
0000000000012199         cmp        al, 0x17
000000000001219b         mov        rbp, qword [r14+0x48]
000000000001219f         movdqa     xmm0, xmmword [rcx]
00000000000121a3         je         loc_124c8

00000000000121a9         cmp        al, 0x13
00000000000121ab         movzx      ebx, bl
00000000000121ae         je         loc_12460

00000000000121b4         mov        rdx, qword [rsp+32]                         ; argument #3 for method peek_token
00000000000121b9         mov        rdi, qword [rsp+24]                         ; argument #1 for method peek_token
00000000000121be         mov        rsi, r14                                    ; argument #2 for method peek_token
00000000000121c1         call       peek_token                                  ; peek_token
00000000000121c6         cdqe
00000000000121c8         add        qword [r14+0x48], rax
00000000000121cc         cmp        qword [rsp+40], 0x0
00000000000121d2         je         loc_12560

00000000000121d8         mov        qword [rsp+0], 0xffffffffffffffff

                     loc_121e0:
00000000000121e0         test       rbx, rbx                                    ; CODE XREF=sub_12040+1107
00000000000121e3         mov        rbp, qword [rsp+40]
00000000000121e8         mov        qword [rsp+48], 0x0
00000000000121f1         jg         loc_12370

                     loc_121f7:
00000000000121f7         cmp        byte [rbp+0x30], 0x11                       ; CODE XREF=sub_12040+993
00000000000121fb         je         loc_12540

                     loc_12201:
0000000000012201         cmp        qword [rsp+0], 0xffffffffffffffff           ; CODE XREF=sub_12040+1299
0000000000012206         mov        rdx, rbp                                    ; argument #3 for method create_token_tree.isra.16
0000000000012209         mov        r8, r15                                     ; argument #5 for method create_token_tree.isra.16
000000000001220c         sete       al
000000000001220f         xor        ecx, ecx                                    ; argument #4 for method create_token_tree.isra.16
0000000000012211         add        eax, 0xa
0000000000012214         mov        byte [rsp+200], al
000000000001221b         mov        rax, qword [rsp+16]
0000000000012220         lea        r12, qword [rax+0x70]
0000000000012224         lea        r13, qword [rax+0x80]
000000000001222b         mov        rdi, r12                                    ; argument #1 for method create_token_tree.isra.16
000000000001222e         mov        rsi, r13                                    ; argument #2 for method create_token_tree.isra.16
0000000000012231         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000012236         test       rax, rax
0000000000012239         mov        rdx, rax
000000000001223c         je         loc_12430

0000000000012242         add        rbx, 0x2
0000000000012246         cmp        rbx, qword [rsp+0]
000000000001224a         jg         loc_122cb

000000000001224c         mov        qword [rsp+72], r14
0000000000012251         mov        r14, rax

                     loc_12254:
0000000000012254         mov        rsi, qword [rsp+16]                         ; argument #2 for method duplicate_tree, CODE XREF=sub_12040+641
0000000000012259         mov        rdi, rbp                                    ; argument #1 for method duplicate_tree
000000000001225c         call       duplicate_tree                              ; duplicate_tree
0000000000012261         mov        r8, r15                                     ; argument #5 for method create_token_tree.isra.16
0000000000012264         mov        rbp, rax
0000000000012267         mov        rcx, rax                                    ; argument #4 for method create_token_tree.isra.16
000000000001226a         mov        rdx, r14                                    ; argument #3 for method create_token_tree.isra.16
000000000001226d         mov        rsi, r13                                    ; argument #2 for method create_token_tree.isra.16
0000000000012270         mov        rdi, r12                                    ; argument #1 for method create_token_tree.isra.16
0000000000012273         mov        byte [rsp+200], 0x10
000000000001227b         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000012280         test       rbp, rbp
0000000000012283         je         loc_12430

0000000000012289         test       rax, rax
000000000001228c         je         loc_12430

0000000000012292         xor        ecx, ecx                                    ; argument #4 for method create_token_tree.isra.16
0000000000012294         mov        r8, r15                                     ; argument #5 for method create_token_tree.isra.16
0000000000012297         mov        rdx, rax                                    ; argument #3 for method create_token_tree.isra.16
000000000001229a         mov        rsi, r13                                    ; argument #2 for method create_token_tree.isra.16
000000000001229d         mov        rdi, r12                                    ; argument #1 for method create_token_tree.isra.16
00000000000122a0         mov        byte [rsp+200], 0xa
00000000000122a8         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
00000000000122ad         test       rax, rax
00000000000122b0         mov        r14, rax
00000000000122b3         je         loc_12430

00000000000122b9         add        rbx, 0x1
00000000000122bd         cmp        rbx, qword [rsp+0]
00000000000122c1         jle        loc_12254

00000000000122c3         mov        r14, qword [rsp+72]
00000000000122c8         mov        rdx, rax

                     loc_122cb:
00000000000122cb         mov        rax, qword [rsp+48]                         ; CODE XREF=sub_12040+522
00000000000122d0         test       rax, rax
00000000000122d3         je         loc_12580

00000000000122d9         mov        rcx, rdx                                    ; argument #4 for method create_token_tree.isra.16
00000000000122dc         mov        r8, r15                                     ; argument #5 for method create_token_tree.isra.16
00000000000122df         mov        rdx, rax                                    ; argument #3 for method create_token_tree.isra.16
00000000000122e2         mov        rsi, r13                                    ; argument #2 for method create_token_tree.isra.16
00000000000122e5         mov        rdi, r12                                    ; argument #1 for method create_token_tree.isra.16
00000000000122e8         mov        byte [rsp+200], 0x10
00000000000122f0         call       create_token_tree.isra.16                   ; create_token_tree.isra.16

                     loc_122f5:
00000000000122f5         mov        rdi, qword [rsp+64]                         ; CODE XREF=sub_12040+1265
00000000000122fa         mov        edx, dword [rdi]
00000000000122fc         test       edx, edx
00000000000122fe         je         loc_12309

0000000000012300         test       rax, rax
0000000000012303         je         loc_1265b

                     loc_12309:
0000000000012309         mov        qword [rsp+40], rax                         ; CODE XREF=sub_12040+702

                     loc_1230e:
000000000001230e         test       qword [rsp+32], 0x1000000                   ; CODE XREF=sub_12040+1152, sub_12040+1349
0000000000012317         mov        rax, qword [rsp+24]
000000000001231c         movzx      eax, byte [rax+8]
0000000000012320         je         loc_12178

0000000000012326         cmp        al, 0xb
0000000000012328         je         loc_12332

000000000001232a         cmp        al, 0x17
000000000001232c         jne        loc_12178

                     loc_12332:
0000000000012332         mov        rax, qword [rsp+40]                         ; CODE XREF=sub_12040+744
0000000000012337         test       rax, rax
000000000001233a         je         loc_1234d

000000000001233c         lea        rsi, qword [free_tree]                      ; argument #2 for method postorder, free_tree
0000000000012343         xor        edx, edx                                    ; argument #3 for method postorder
0000000000012345         mov        rdi, rax                                    ; argument #1 for method postorder
0000000000012348         call       postorder                                   ; postorder

                     loc_1234d:
000000000001234d         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_12040+183, sub_12040+196, sub_12040+762
0000000000012352         mov        qword [rsp+40], 0x0
000000000001235b         mov        dword [rax], 0xd
0000000000012361         jmp        sub_12040+128
                        ; endp
0000000000012366         nop        word [cs:rax+rax]

                     loc_12370:
0000000000012370         cmp        rbx, 0x1                                    ; CODE XREF=sub_12040+433
0000000000012374         je         loc_12bac

000000000001237a         mov        rax, qword [rsp+16]
000000000001237f         mov        r13, rbp
0000000000012382         mov        qword [rsp+72], r14
0000000000012387         lea        r12, qword [rax+0x80]
000000000001238e         lea        rdi, qword [rax+0x70]
0000000000012392         mov        rax, rbp
0000000000012395         mov        r14, rax
0000000000012398         mov        ebp, 0x2
000000000001239d         mov        rsi, r12
00000000000123a0         mov        qword [rsp+48], rdi
00000000000123a5         mov        r12, r13
00000000000123a8         mov        r13, rbx
00000000000123ab         mov        rbx, rsi
00000000000123ae         nop

                     loc_123b0:
00000000000123b0         mov        rsi, qword [rsp+16]                         ; argument #2 for method duplicate_tree, CODE XREF=sub_12040+946
00000000000123b5         mov        rdi, r12                                    ; argument #1 for method duplicate_tree
00000000000123b8         call       duplicate_tree                              ; duplicate_tree
00000000000123bd         mov        rdi, qword [rsp+48]                         ; argument #1 for method create_token_tree.isra.16
00000000000123c2         mov        r12, rax
00000000000123c5         mov        rdx, r14                                    ; argument #3 for method create_token_tree.isra.16
00000000000123c8         mov        r8, r15                                     ; argument #5 for method create_token_tree.isra.16
00000000000123cb         mov        rcx, rax                                    ; argument #4 for method create_token_tree.isra.16
00000000000123ce         mov        rsi, rbx                                    ; argument #2 for method create_token_tree.isra.16
00000000000123d1         mov        byte [rsp+200], 0x10
00000000000123d9         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
00000000000123de         test       r12, r12
00000000000123e1         mov        r14, rax
00000000000123e4         je         loc_12430

00000000000123e6         test       rax, rax
00000000000123e9         je         loc_12430

00000000000123eb         add        rbp, 0x1
00000000000123ef         cmp        rbp, r13
00000000000123f2         jle        loc_123b0

00000000000123f4         mov        r14, qword [rsp+72]
00000000000123f9         mov        rbx, r13
00000000000123fc         mov        qword [rsp+48], rax
0000000000012401         mov        r13, r12

                     loc_12404:
0000000000012404         cmp        qword [rsp+0], rbx                          ; CODE XREF=sub_127b0+1030
0000000000012408         je         loc_12574

000000000001240e         mov        rsi, qword [rsp+16]                         ; argument #2 for method duplicate_tree
0000000000012413         mov        rdi, r13                                    ; argument #1 for method duplicate_tree
0000000000012416         call       duplicate_tree                              ; duplicate_tree
000000000001241b         test       rax, rax
000000000001241e         mov        rbp, rax
0000000000012421         jne        loc_121f7

0000000000012427         nop        word [rax+rax]

                     loc_12430:
0000000000012430         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_12040+508, sub_12040+579, sub_12040+588, sub_12040+627, sub_12040+932, sub_12040+937
0000000000012435         mov        dword [rax], 0xc

                     loc_1243b:
000000000001243b         mov        rdi, qword [rsp+40]                         ; argument #1 for method postorder, CODE XREF=sub_12040+1141, sub_12040+1569
0000000000012440         lea        rsi, qword [free_tree]                      ; argument #2 for method postorder, free_tree
0000000000012447         xor        edx, edx                                    ; argument #3 for method postorder
0000000000012449         call       postorder                                   ; postorder
000000000001244e         mov        qword [rsp+40], 0x0
0000000000012457         jmp        sub_12040+128
                        ; endp
000000000001245c         nop        dword [rax]

                     loc_12460:
0000000000012460         mov        qword [rsp+0], 0x1                          ; CODE XREF=sub_12040+366

                     loc_12468:
0000000000012468         mov        rdx, qword [rsp+32]                         ; argument #3 for method peek_token, CODE XREF=sub_12040+1482
000000000001246d         mov        rdi, qword [rsp+24]                         ; argument #1 for method peek_token
0000000000012472         mov        rsi, r14                                    ; argument #2 for method peek_token
0000000000012475         call       peek_token                                  ; peek_token
000000000001247a         cdqe
000000000001247c         add        qword [r14+0x48], rax
0000000000012480         cmp        qword [rsp+40], 0x0
0000000000012486         je         loc_12560

000000000001248c         mov        rax, qword [rsp+0]
0000000000012490         or         rax, rbx
0000000000012493         jne        loc_121e0

0000000000012499         mov        rdi, qword [rsp+40]                         ; argument #1 for method postorder
000000000001249e         lea        rsi, qword [free_tree]                      ; argument #2 for method postorder, free_tree
00000000000124a5         xor        edx, edx                                    ; argument #3 for method postorder
00000000000124a7         call       postorder                                   ; postorder
00000000000124ac         mov        rax, qword [rsp+64]
00000000000124b1         mov        esi, dword [rax]
00000000000124b3         test       esi, esi
00000000000124b5         jne        loc_1243b

                     loc_124b7:
00000000000124b7         mov        qword [rsp+40], 0x0                         ; CODE XREF=sub_12040+1321
00000000000124c0         jmp        loc_1230e
00000000000124c5         nop        dword [rax]

                     loc_124c8:
00000000000124c8         mov        rdx, qword [rsp+32]                         ; argument #3 for method fetch_number, CODE XREF=sub_12040+355
00000000000124cd         mov        rsi, rcx                                    ; argument #2 for method fetch_number
00000000000124d0         mov        rdi, r14                                    ; argument #1 for method fetch_number
00000000000124d3         movaps     xmmword [rsp+0], xmm0
00000000000124d7         call       fetch_number                                ; fetch_number
00000000000124dc         cmp        rax, 0xffffffffffffffff
00000000000124e0         mov        rbx, rax
00000000000124e3         movdqa     xmm0, xmmword [rsp+0]
00000000000124e8         je         loc_12590

00000000000124ee         cmp        rax, 0xfffffffffffffffe
00000000000124f2         je         loc_1250d

00000000000124f4         mov        rax, qword [rsp+24]
00000000000124f9         movzx      eax, byte [rax+8]
00000000000124fd         cmp        al, 0x18
00000000000124ff         je         loc_12620

0000000000012505         cmp        al, 0x1
0000000000012507         je         loc_12633

                     loc_1250d:
000000000001250d         test       qword [rsp+32], 0x200000                    ; CODE XREF=sub_12040+1202, sub_12040+1428
0000000000012516         je         loc_13453

                     loc_1251c:
000000000001251c         mov        rax, qword [rsp+24]                         ; CODE XREF=sub_12040+1546
0000000000012521         mov        qword [r14+0x48], rbp
0000000000012525         movaps     xmmword [rax], xmm0
0000000000012528         mov        byte [rax+8], 0x1
000000000001252c         mov        rax, qword [rsp+40]
0000000000012531         jmp        loc_122f5
0000000000012536         nop        word [cs:rax+rax]

                     loc_12540:
0000000000012540         mov        rdx, qword [rbp+0x28]                       ; argument #3 for method postorder, CODE XREF=sub_12040+443
0000000000012544         lea        rsi, qword [mark_opt_subexp]                ; argument #2 for method postorder, mark_opt_subexp
000000000001254b         mov        rdi, rbp                                    ; argument #1 for method postorder
000000000001254e         call       postorder                                   ; postorder
0000000000012553         jmp        loc_12201
0000000000012558         nop        dword [rax+rax]

                     loc_12560:
0000000000012560         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_12040+402, sub_12040+1094
0000000000012565         mov        ecx, dword [rax]
0000000000012567         test       ecx, ecx
0000000000012569         je         loc_124b7

000000000001256f         jmp        sub_12040+112
                        ; endp

                     loc_12574:
0000000000012574         mov        rdx, qword [rsp+48]                         ; CODE XREF=sub_12040+968
0000000000012579         nop        dword [rax]

                     loc_12580:
0000000000012580         mov        qword [rsp+40], rdx                         ; CODE XREF=sub_12040+659
0000000000012585         jmp        loc_1230e
000000000001258a         nop        word [rax+rax]

                     loc_12590:
0000000000012590         mov        rax, qword [rsp+24]                         ; CODE XREF=sub_12040+1192
0000000000012595         cmp        byte [rax+8], 0x1
0000000000012599         jne        loc_12650

000000000001259f         mov        rax, qword [rsp+24]
00000000000125a4         cmp        byte [rax], 0x2c
00000000000125a7         jne        loc_12650

00000000000125ad         xor        ebx, ebx

                     loc_125af:
00000000000125af         mov        rdx, qword [rsp+32]                         ; argument #3 for method fetch_number, CODE XREF=sub_12040+1531
00000000000125b4         mov        rsi, qword [rsp+24]                         ; argument #2 for method fetch_number
00000000000125b9         mov        rdi, r14                                    ; argument #1 for method fetch_number
00000000000125bc         movaps     xmmword [rsp+48], xmm0
00000000000125c1         call       fetch_number                                ; fetch_number
00000000000125c6         cmp        rax, 0xfffffffffffffffe
00000000000125ca         mov        qword [rsp+0], rax
00000000000125ce         movdqa     xmm0, xmmword [rsp+48]
00000000000125d4         je         loc_1250d

00000000000125da         mov        rax, qword [rsp+0]
00000000000125de         cmp        rax, 0xffffffffffffffff
00000000000125e2         je         loc_125e9

00000000000125e4         cmp        rax, rbx
00000000000125e7         jl         loc_12650

                     loc_125e9:
00000000000125e9         mov        rax, qword [rsp+24]                         ; CODE XREF=sub_12040+1442
00000000000125ee         cmp        byte [rax+8], 0x18
00000000000125f2         jne        loc_12650

00000000000125f4         cmp        qword [rsp+0], 0xffffffffffffffff
00000000000125f9         jne        loc_12624

00000000000125fb         xor        eax, eax
00000000000125fd         cmp        rbx, 0x7fff
0000000000012604         setg       al

                     loc_12607:
0000000000012607         test       rax, rax                                    ; CODE XREF=sub_12040+1521
000000000001260a         je         loc_12468

0000000000012610         mov        rax, qword [rsp+64]
0000000000012615         mov        dword [rax], 0xf
000000000001261b         jmp        loc_1265b
000000000001261d         nop        dword [rax]

                     loc_12620:
0000000000012620         mov        qword [rsp+0], rbx                          ; CODE XREF=sub_12040+1215

                     loc_12624:
0000000000012624         xor        eax, eax                                    ; CODE XREF=sub_12040+1465
0000000000012626         cmp        qword [rsp+0], 0x7fff
000000000001262e         setg       al
0000000000012631         jmp        loc_12607

                     loc_12633:
0000000000012633         mov        rax, qword [rsp+24]                         ; CODE XREF=sub_12040+1223
0000000000012638         cmp        byte [rax], 0x2c
000000000001263b         je         loc_125af

0000000000012641         test       qword [rsp+32], 0x200000
000000000001264a         jne        loc_1251c

                     loc_12650:
0000000000012650         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_12040+1369, sub_12040+1383, sub_12040+1447, sub_12040+1458, sub_127b0+3244
0000000000012655         mov        dword [rax], 0xa

                     loc_1265b:
000000000001265b         cmp        qword [rsp+40], 0x0                         ; CODE XREF=sub_12040+707, sub_12040+1499, sub_127b0+3261
0000000000012661         jne        loc_1243b

0000000000012667         jmp        sub_12040+112
                        ; endp
000000000001266c         nop        dword [rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_12670:
0000000000012670         mov        rax, qword [rsp+24]
0000000000012675         mov        ebp, dword [rax]
0000000000012677         test       ebp, 0x30f
000000000001267d         je         loc_126e1

000000000001267f         mov        rax, qword [rsp+16]
0000000000012684         movzx      eax, byte [rax+0xb0]
000000000001268b         test       al, 0x10
000000000001268d         jne        loc_126e1

000000000001268f         mov        rdi, qword [rsp+16]
0000000000012694         or         eax, 0x10
0000000000012697         test       al, 0x8
0000000000012699         mov        byte [rdi+0xb0], al
000000000001269f         jne        loc_132a3

00000000000126a5         movabs     rdx, 0x3ff000000000000
00000000000126af         test       al, 0x4
00000000000126b1         mov        qword [rdi+0xb8], rdx
00000000000126b8         movabs     rdx, 0x7fffffe87fffffe
00000000000126c2         mov        qword [rdi+0xc0], rdx
00000000000126c9         je         loc_13228

00000000000126cf         pxor       xmm0, xmm0
00000000000126d3         mov        rax, qword [rsp+24]
00000000000126d8         movups     xmmword [rdi+0xc8], xmm0
00000000000126df         mov        ebp, dword [rax]

                     loc_126e1:
00000000000126e1         mov        rax, qword [rsp+16]                         ; CODE XREF=sub_12670+13, sub_12670+29, sub_127b0+2798
00000000000126e6         lea        rbx, qword [rax+0x70]
00000000000126ea         lea        r12, qword [rax+0x80]
00000000000126f1         lea        eax, dword [rbp-0x100]
00000000000126f7         test       eax, 0xfffffeff
00000000000126fc         jne        loc_12d6a

0000000000012702         cmp        ebp, 0x100
0000000000012708         mov        r15, qword [rsp+24]
000000000001270d         je         loc_12d42

0000000000012713         mov        dword [r15], 0x5
000000000001271a         mov        r8, r15                                     ; argument #5 for method create_token_tree.isra.16
000000000001271d         xor        ecx, ecx                                    ; argument #4 for method create_token_tree.isra.16
000000000001271f         xor        edx, edx                                    ; argument #3 for method create_token_tree.isra.16
0000000000012721         mov        rsi, r12                                    ; argument #2 for method create_token_tree.isra.16
0000000000012724         mov        rdi, rbx                                    ; argument #1 for method create_token_tree.isra.16
0000000000012727         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000001272c         mov        dword [r15], 0xa
0000000000012733         mov        rbp, rax

                     loc_12736:
0000000000012736         mov        r8, qword [rsp+24]                          ; argument #5 for method create_token_tree.isra.16, CODE XREF=sub_127b0+1461
000000000001273b         xor        ecx, ecx                                    ; argument #4 for method create_token_tree.isra.16
000000000001273d         xor        edx, edx                                    ; argument #3 for method create_token_tree.isra.16
000000000001273f         mov        rsi, r12                                    ; argument #2 for method create_token_tree.isra.16
0000000000012742         mov        rdi, rbx                                    ; argument #1 for method create_token_tree.isra.16
0000000000012745         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000001274a         lea        r8, qword [rsp+192]                         ; argument #5 for method create_token_tree.isra.16
0000000000012752         mov        rdx, rbp                                    ; argument #3 for method create_token_tree.isra.16
0000000000012755         mov        rdi, rbx                                    ; argument #1 for method create_token_tree.isra.16
0000000000012758         mov        rcx, rax                                    ; argument #4 for method create_token_tree.isra.16
000000000001275b         mov        rsi, r12                                    ; argument #2 for method create_token_tree.isra.16
000000000001275e         mov        r13, rax
0000000000012761         mov        byte [rsp+200], 0xa
0000000000012769         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000001276e         test       rbp, rbp
0000000000012771         mov        rdi, rax
0000000000012774         mov        qword [rsp+40], rax
0000000000012779         sete       dl
000000000001277c         test       r13, r13
000000000001277f         sete       al
0000000000012782         or         dl, al
0000000000012784         jne        sub_127b0+872

000000000001278a         test       rdi, rdi
000000000001278d         je         sub_127b0+872

                     loc_12793:
0000000000012793         mov        rdx, qword [rsp+32]                         ; argument #3 for method peek_token, CODE XREF=sub_127b0+1494
0000000000012798         mov        rdi, qword [rsp+24]                         ; argument #1 for method peek_token
000000000001279d         mov        rsi, r14                                    ; argument #2 for method peek_token
00000000000127a0         call       peek_token                                  ; peek_token
00000000000127a5         cdqe
00000000000127a7         add        qword [r14+0x48], rax
00000000000127ab         jmp        sub_12040+128
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_127b0:
00000000000127b0         mov        esi, 0x1                                    ; argument "__size" for method j_calloc
00000000000127b5         mov        edi, 0x20                                   ; argument "__nmemb" for method j_calloc
00000000000127ba         mov        qword [rsp+152], 0x0
00000000000127c6         call       j_calloc                                    ; calloc
00000000000127cb         mov        esi, 0x1                                    ; argument "__size" for method j_calloc
00000000000127d0         mov        r12, rax
00000000000127d3         mov        edi, 0x50                                   ; argument "__nmemb" for method j_calloc
00000000000127d8         call       j_calloc                                    ; calloc
00000000000127dd         test       r12, r12
00000000000127e0         mov        r13, rax
00000000000127e3         sete       dl
00000000000127e6         test       rax, rax
00000000000127e9         sete       al
00000000000127ec         or         dl, al
00000000000127ee         jne        loc_12fc9

00000000000127f4         mov        r10, qword [rsp+24]
00000000000127f9         mov        rdx, qword [rsp+32]                         ; argument #3 for method peek_token_bracket
00000000000127fe         mov        rsi, r14                                    ; argument #2 for method peek_token_bracket
0000000000012801         mov        rdi, r10                                    ; argument #1 for method peek_token_bracket
0000000000012804         call       peek_token_bracket                          ; peek_token_bracket
0000000000012809         movsxd     rbx, eax
000000000001280c         movzx      eax, byte [r10+8]
0000000000012811         cmp        al, 0x2
0000000000012813         je         loc_12fb9

0000000000012819         cmp        al, 0x19
000000000001281b         mov        byte [rsp+87], 0x0
0000000000012820         je         loc_12cea

                     loc_12826:
0000000000012826         cmp        al, 0x15                                    ; CODE XREF=sub_127b0+1407
0000000000012828         je         loc_12d34

                     loc_1282e:
000000000001282e         lea        rax, qword [rsp+208]                        ; CODE XREF=sub_127b0+1421
0000000000012836         mov        r15, qword [rsp+24]
000000000001283b         lea        rbp, qword [switch_table_16f94]             ; switch_table_16f94
0000000000012842         mov        qword [rsp+72], 0x0
000000000001284b         mov        r9d, 0x1
0000000000012851         mov        qword [rsp+48], 0x0
000000000001285a         mov        qword [rsp+40], rax
000000000001285f         lea        rax, qword [rsp+160]
0000000000012867         mov        qword [rsp+0], rax
000000000001286b         lea        rax, qword [rsp+152]
0000000000012873         mov        qword [rsp+88], rax
0000000000012878         lea        rax, qword [rsp+192]
0000000000012880         mov        qword [rsp+96], rax
0000000000012885         lea        rax, qword [rsp+240]
000000000001288d         mov        qword [rsp+104], rax

                     loc_12892:
0000000000012892         mov        rax, qword [rsp+40]                         ; CODE XREF=sub_127b0+1112
0000000000012897         mov        r8, qword [rsp+32]                          ; argument #5 for method parse_bracket_element.constprop.37
000000000001289c         and        r9d, 0x1                                    ; argument #6 for method parse_bracket_element.constprop.37
00000000000128a0         mov        rdi, qword [rsp+0]                          ; argument #1 for method parse_bracket_element.constprop.37
00000000000128a4         mov        ecx, ebx                                    ; argument #4 for method parse_bracket_element.constprop.37
00000000000128a6         mov        rdx, r15                                    ; argument #3 for method parse_bracket_element.constprop.37
00000000000128a9         mov        rsi, r14                                    ; argument #2 for method parse_bracket_element.constprop.37
00000000000128ac         mov        dword [rsp+160], 0x3
00000000000128b7         mov        qword [rsp+168], rax
00000000000128bf         call       parse_bracket_element.constprop.37          ; parse_bracket_element.constprop.37
00000000000128c4         test       eax, eax
00000000000128c6         jne        loc_12dab

00000000000128cc         mov        rdx, qword [rsp+32]                         ; argument #3 for method peek_token_bracket
00000000000128d1         mov        rsi, r14                                    ; argument #2 for method peek_token_bracket
00000000000128d4         mov        rdi, r15                                    ; argument #1 for method peek_token_bracket
00000000000128d7         call       peek_token_bracket                          ; peek_token_bracket
00000000000128dc         movsxd     rbx, eax
00000000000128df         mov        eax, dword [rsp+160]
00000000000128e6         lea        edx, dword [rax-2]
00000000000128e9         and        edx, 0xfffffffd
00000000000128ec         je         loc_12905

00000000000128ee         movzx      edx, byte [r15+8]
00000000000128f3         cmp        dl, 0x2
00000000000128f6         je         loc_12d91

00000000000128fc         cmp        dl, 0x16
00000000000128ff         je         loc_12db7

                     loc_12905:
0000000000012905         cmp        eax, 0x4                                    ; CODE XREF=sub_127b0+316, sub_127b0+2141
0000000000012908         ja         loc_132aa

000000000001290e         movsxd     rax, dword [rbp+rax*4]
0000000000012913         add        rax, rbp
0000000000012916         jmp        rax                                         ; switch statement using table at 0x16f94, with 5 cases, 0x12bd5,0x12c0d,0x12c57,0x12c81,0x12ca9
0000000000012918         mov        rbx, qword [rsp+0x40]
000000000001291d         cmp        cl, 0x23
0000000000012920         mov        rsi, qword [rdi+0x78]
0000000000012924         sete       r8b
0000000000012928         lea        rcx, qword [aWrittenBySSAnd+27]             ; 0x16761
000000000001292f         lea        rdx, qword [aSpace]                         ; "space"
0000000000012936         movzx      r8d, r8b
000000000001293a         mov        r9, rbx
000000000001293d         mov        rdi, qword [rsp+0x10]                       ; CODE XREF=sub_127b0+477
0000000000012942         call       build_charclass_op                          ; build_charclass_op
0000000000012947         mov        edi, dword [rbx]
0000000000012949         mov        qword [rsp+0x28], rax
000000000001294e         test       edi, edi
0000000000012950         je         sub_12040+268
0000000000012956         test       rax, rax
0000000000012959         jne        sub_12040+268
000000000001295f         jmp        sub_12040+112
0000000000012964         nop        dword [rax]
0000000000012968         mov        rbx, qword [rsp+0x40]
000000000001296d         cmp        cl, 0x21
0000000000012970         mov        rsi, qword [rdi+0x78]
0000000000012974         sete       r8b
0000000000012978         lea        rcx, qword [aCoreutils+12]                  ; 0x1601a
000000000001297f         lea        rdx, qword [aAlnum]                         ; "alnum"
0000000000012986         movzx      r8d, r8b
000000000001298a         mov        r9, rbx
000000000001298d         jmp        sub_127b0+397
000000000001298f         mov        rax, qword [rsp+0x18]
0000000000012994         mov        rdi, qword [rsp+0x10]
0000000000012999         mov        rcx, qword [rax]
000000000001299c         mov        eax, 0x1
00000000000129a1         shl        eax, cl
00000000000129a3         cdqe
00000000000129a5         test       qword [rdi+0xa8], rax
00000000000129ac         je         sub_127b0+2094
00000000000129b2         mov        rbx, qword [rsp+0x10]
00000000000129b7         mov        r8, qword [rsp+0x18]
00000000000129bc         xor        ecx, ecx
00000000000129be         xor        edx, edx
00000000000129c0         or         qword [rbx+0xa0], rax
00000000000129c7         lea        rsi, qword [rbx+0x80]
00000000000129ce         lea        rdi, qword [rbx+0x70]
00000000000129d2         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
00000000000129d7         test       rax, rax
00000000000129da         mov        qword [rsp+0x28], rax
00000000000129df         je         sub_127b0+872
00000000000129e5         add        qword [rbx+0x98], 0x1
00000000000129ed         or         byte [rbx+0xb0], 0x2
00000000000129f4         jmp        sub_12040+268
00000000000129f9         mov        rbx, qword [rsp+0x10]
00000000000129fe         mov        r8, qword [rsp+0x18]
0000000000012a03         xor        ecx, ecx
0000000000012a05         xor        edx, edx
0000000000012a07         lea        rsi, qword [rbx+0x80]
0000000000012a0e         lea        rdi, qword [rbx+0x70]
0000000000012a12         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000012a17         test       rax, rax
0000000000012a1a         mov        qword [rsp+0x28], rax
0000000000012a1f         je         sub_127b0+872
0000000000012a25         cmp        dword [rbx+0xb4], 0x1
0000000000012a2c         jle        sub_12040+268
0000000000012a32         or         byte [rbx+0xb0], 0x2
0000000000012a39         jmp        sub_12040+268
0000000000012a3e         mov        rax, qword [rsp+0x10]
0000000000012a43         mov        r8, qword [rsp+0x18]
0000000000012a48         xor        ecx, ecx
0000000000012a4a         xor        edx, edx
0000000000012a4c         lea        rbx, qword [rax+0x70]
0000000000012a50         lea        rbp, qword [rax+0x80]
0000000000012a57         mov        rdi, rbx
0000000000012a5a         mov        rsi, rbp
0000000000012a5d         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000012a62         test       rax, rax
0000000000012a65         mov        qword [rsp+0x28], rax
0000000000012a6a         je         sub_127b0+872
0000000000012a70         mov        rax, qword [rsp+0x10]
0000000000012a75         lea        r12, qword [rsp+0xc0]
0000000000012a7d         mov        r15, qword [rsp+0x28]
0000000000012a82         cmp        dword [rax+0xb4], 0x1
0000000000012a89         jle        sub_12040+268
0000000000012a8f         mov        rax, qword [r14+0x48]                       ; CODE XREF=sub_127b0+866
0000000000012a93         cmp        qword [r14+0x68], rax
0000000000012a97         jle        sub_127b0+1521
0000000000012a9d         cmp        rax, qword [r14+0x30]
0000000000012aa1         je         sub_127b0+1521
0000000000012aa7         mov        rdx, qword [r14+0x10]
0000000000012aab         cmp        dword [rdx+rax*4], 0xffffffff
0000000000012aaf         jne        sub_127b0+1521
0000000000012ab5         mov        r13, qword [rsp+0x18]
0000000000012aba         mov        rdx, qword [rsp+0x20]
0000000000012abf         mov        rsi, r14
0000000000012ac2         mov        rdi, r13
0000000000012ac5         call       peek_token                                  ; peek_token
0000000000012aca         cdqe
0000000000012acc         add        qword [r14+0x48], rax
0000000000012ad0         mov        r8, r13
0000000000012ad3         xor        ecx, ecx
0000000000012ad5         xor        edx, edx
0000000000012ad7         mov        rsi, rbp
0000000000012ada         mov        rdi, rbx
0000000000012add         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000012ae2         mov        rdx, r15
0000000000012ae5         mov        r13, rax
0000000000012ae8         mov        r8, r12
0000000000012aeb         mov        rcx, rax
0000000000012aee         mov        rsi, rbp
0000000000012af1         mov        rdi, rbx
0000000000012af4         mov        byte [rsp+0xc8], 0x10
0000000000012afc         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000012b01         test       r13, r13
0000000000012b04         mov        r15, rax
0000000000012b07         sete       dl
0000000000012b0a         test       rax, rax
0000000000012b0d         sete       al
0000000000012b10         or         dl, al
0000000000012b12         je         sub_127b0+735

                     loc_12b18:
0000000000012b18         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_12040+262, sub_127b0+559, sub_127b0+623, sub_127b0+698, sub_127b0+984
0000000000012b1d         mov        dword [rax], 0xc
0000000000012b23         jmp        sub_12040+112
                        ; endp
0000000000012b28         test       qword [rsp+0x20], 0x20000                   ; CODE XREF=sub_12040+213
0000000000012b31         jne        sub_12040+219
0000000000012b37         mov        rax, qword [rsp+0x40]
0000000000012b3c         mov        qword [rsp+0x28], 0x0
0000000000012b45         mov        dword [rax], 0x10
0000000000012b4b         jmp        sub_12040+128

                     loc_12b50:
0000000000012b50         cmp        rbx, 0x8                                    ; CODE XREF=sub_12040+16, sub_12040+70
0000000000012b54         jbe        loc_12bbb

                     loc_12b56:
0000000000012b56         mov        rdi, qword [rsp+16]                         ; CODE XREF=sub_127b0+1059
0000000000012b5b         lea        r8, qword [rsp+192]                         ; argument #5 for method create_token_tree.isra.16
0000000000012b63         xor        ecx, ecx                                    ; argument #4 for method create_token_tree.isra.16
0000000000012b65         mov        rdx, rax                                    ; argument #3 for method create_token_tree.isra.16
0000000000012b68         mov        byte [rsp+200], 0x11
0000000000012b70         lea        rsi, qword [rdi+0x80]                       ; argument #2 for method create_token_tree.isra.16
0000000000012b77         add        rdi, 0x70                                   ; argument #1 for method create_token_tree.isra.16
0000000000012b7b         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000012b80         test       rax, rax
0000000000012b83         mov        qword [rsp+40], rax
0000000000012b88         je         loc_12b18

0000000000012b8a         mov        qword [rax+0x28], rbx
0000000000012b8e         jmp        loc_1214c
0000000000012b93         mov        rax, qword [rsp+0x40]
0000000000012b98         mov        qword [rsp+0x28], 0x0
0000000000012ba1         mov        dword [rax], 0x5
0000000000012ba7         jmp        sub_12040+128

                     loc_12bac:
0000000000012bac         mov        r13, qword [rsp+40]                         ; CODE XREF=sub_12040+820
0000000000012bb1         mov        qword [rsp+48], r13
0000000000012bb6         jmp        loc_12404

                     loc_12bbb:
0000000000012bbb         mov        rsi, qword [rsp+16]                         ; CODE XREF=sub_127b0+932
0000000000012bc0         mov        edx, 0x1
0000000000012bc5         mov        ecx, ebx
0000000000012bc7         shl        edx, cl
0000000000012bc9         movsxd     rdx, edx
0000000000012bcc         or         qword [rsi+0xa8], rdx
0000000000012bd3         jmp        loc_12b56

                     loc_12bd5:
0000000000012bd5         mov        rsi, qword [rsp+168]                        ; case 3, argument #2 for method build_collating_symbol.isra.28, CODE XREF=sub_127b0+358
0000000000012bdd         mov        rdi, r12                                    ; argument #1 for method build_collating_symbol.isra.28
0000000000012be0         call       build_collating_symbol.isra.28              ; build_collating_symbol.isra.28
0000000000012be5         mov        rdx, qword [rsp+64]
0000000000012bea         test       eax, eax
0000000000012bec         mov        dword [rdx], eax
0000000000012bee         jne        loc_12c28

                     loc_12bf0:
0000000000012bf0         movzx      eax, byte [r15+8]                           ; CODE XREF=sub_127b0+1142, sub_127b0+1228, sub_127b0+1268, sub_127b0+1327, sub_127b0+1984
0000000000012bf5         cmp        al, 0x2
0000000000012bf7         je         loc_12d91

0000000000012bfd         cmp        al, 0x15
0000000000012bff         je         loc_13012

0000000000012c05         xor        r9d, r9d
0000000000012c08         jmp        loc_12892

                     loc_12c0d:
0000000000012c0d         mov        rsi, qword [rsp+168]                        ; case 2, argument #2 for method build_collating_symbol.isra.28, CODE XREF=sub_127b0+358
0000000000012c15         mov        rdi, r12                                    ; argument #1 for method build_collating_symbol.isra.28
0000000000012c18         call       build_collating_symbol.isra.28              ; build_collating_symbol.isra.28
0000000000012c1d         mov        rdx, qword [rsp+64]
0000000000012c22         test       eax, eax
0000000000012c24         mov        dword [rdx], eax
0000000000012c26         je         loc_12bf0

                     loc_12c28:
0000000000012c28         mov        rdi, r12                                    ; argument "__ptr" for method j_free, CODE XREF=sub_127b0+1086, sub_127b0+1333, sub_127b0+1516, sub_127b0+1538, sub_127b0+2068, sub_127b0+2350, sub_127b0+2852, sub_127b0+2904, sub_127b0+3128
0000000000012c2b         call       j_free                                      ; free
0000000000012c30         mov        rdi, r13                                    ; argument #1 for method free_charset
0000000000012c33         call       free_charset                                ; free_charset
0000000000012c38         mov        rax, qword [rsp+64]
0000000000012c3d         mov        r8d, dword [rax]
0000000000012c40         test       r8d, r8d
0000000000012c43         jne        sub_12040+112

0000000000012c49         mov        qword [rsp+40], 0x0
0000000000012c52         jmp        sub_12040+268
                        ; endp

                     loc_12c57:
0000000000012c57         mov        rdx, qword [r13+0x28]                       ; case 1, CODE XREF=sub_127b0+358
0000000000012c5b         cmp        rdx, qword [rsp+48]
0000000000012c60         mov        rax, qword [r13]
0000000000012c64         je         loc_1315e

                     loc_12c6a:
0000000000012c6a         lea        rcx, qword [rdx+1]                          ; CODE XREF=sub_127b0+2526
0000000000012c6e         mov        qword [r13+0x28], rcx
0000000000012c72         mov        ecx, dword [rsp+168]
0000000000012c79         mov        dword [rax+rdx*4], ecx
0000000000012c7c         jmp        loc_12bf0

                     loc_12c81:
0000000000012c81         movzx      edx, byte [rsp+168]                         ; case 0, CODE XREF=sub_127b0+358
0000000000012c89         mov        esi, 0x1
0000000000012c8e         mov        rax, rdx
0000000000012c91         and        edx, 0x3f
0000000000012c94         shr        rax, 0x3
0000000000012c98         mov        ecx, edx
0000000000012c9a         and        eax, 0x18
0000000000012c9d         shl        rsi, cl
0000000000012ca0         or         qword [r12+rax], rsi
0000000000012ca4         jmp        loc_12bf0

                     loc_12ca9:
0000000000012ca9         sub        rsp, 0x8                                    ; case 4, CODE XREF=sub_127b0+358
0000000000012cad         mov        rdi, qword [r14+0x78]                       ; argument #1 for method build_charclass.isra.29
0000000000012cb1         lea        rdx, qword [r13+0x18]                       ; argument #3 for method build_charclass.isra.29
0000000000012cb5         push       qword [rsp+40]                              ; argument #7 for method build_charclass.isra.29
0000000000012cb9         mov        r9, qword [rsp+184]                         ; argument #6 for method build_charclass.isra.29
0000000000012cc1         lea        rcx, qword [r13+0x48]                       ; argument #4 for method build_charclass.isra.29
0000000000012cc5         mov        r8, qword [rsp+104]                         ; argument #5 for method build_charclass.isra.29
0000000000012cca         mov        rsi, r12                                    ; argument #2 for method build_charclass.isra.29
0000000000012ccd         call       build_charclass.isra.29                     ; build_charclass.isra.29
0000000000012cd2         mov        rdx, qword [rsp+80]
0000000000012cd7         test       eax, eax
0000000000012cd9         mov        dword [rdx], eax
0000000000012cdb         pop        r9
0000000000012cdd         pop        r10
0000000000012cdf         je         loc_12bf0

0000000000012ce5         jmp        loc_12c28

                     loc_12cea:
0000000000012cea         or         byte [r13+0x20], 0x1                        ; CODE XREF=sub_127b0+112
0000000000012cef         test       qword [rsp+32], 0x100
0000000000012cf8         je         loc_12d02

0000000000012cfa         or         qword [r12], 0x400

                     loc_12d02:
0000000000012d02         add        qword [r14+0x48], rbx                       ; CODE XREF=sub_127b0+1352
0000000000012d06         mov        r11, qword [rsp+24]
0000000000012d0b         mov        rsi, r14                                    ; argument #2 for method peek_token_bracket
0000000000012d0e         mov        rdx, qword [rsp+32]                         ; argument #3 for method peek_token_bracket
0000000000012d13         mov        rdi, r11                                    ; argument #1 for method peek_token_bracket
0000000000012d16         call       peek_token_bracket                          ; peek_token_bracket
0000000000012d1b         mov        ebx, eax
0000000000012d1d         movzx      eax, byte [r11+8]
0000000000012d22         cmp        al, 0x2
0000000000012d24         je         loc_12fb9

0000000000012d2a         mov        byte [rsp+87], 0x1
0000000000012d2f         jmp        loc_12826

                     loc_12d34:
0000000000012d34         mov        rax, qword [rsp+24]                         ; CODE XREF=sub_127b0+120
0000000000012d39         mov        byte [rax+8], 0x1
0000000000012d3d         jmp        loc_1282e

                     loc_12d42:
0000000000012d42         mov        dword [r15], 0x6                            ; CODE XREF=sub_12670+157
0000000000012d49         mov        r8, r15                                     ; argument #5 for method create_token_tree.isra.16
0000000000012d4c         xor        ecx, ecx                                    ; argument #4 for method create_token_tree.isra.16
0000000000012d4e         xor        edx, edx                                    ; argument #3 for method create_token_tree.isra.16
0000000000012d50         mov        rsi, r12                                    ; argument #2 for method create_token_tree.isra.16
0000000000012d53         mov        rdi, rbx                                    ; argument #1 for method create_token_tree.isra.16
0000000000012d56         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000012d5b         mov        dword [r15], 0x9
0000000000012d62         mov        rbp, rax
0000000000012d65         jmp        loc_12736

                     loc_12d6a:
0000000000012d6a         mov        r8, qword [rsp+24]                          ; argument #5 for method create_token_tree.isra.16, CODE XREF=sub_12670+140
0000000000012d6f         xor        ecx, ecx                                    ; argument #4 for method create_token_tree.isra.16
0000000000012d71         xor        edx, edx                                    ; argument #3 for method create_token_tree.isra.16
0000000000012d73         mov        rsi, r12                                    ; argument #2 for method create_token_tree.isra.16
0000000000012d76         mov        rdi, rbx                                    ; argument #1 for method create_token_tree.isra.16
0000000000012d79         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000012d7e         test       rax, rax
0000000000012d81         mov        qword [rsp+40], rax
0000000000012d86         jne        loc_12793

0000000000012d8c         jmp        sub_127b0+872
                        ; endp

                     loc_12d91:
0000000000012d91         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_127b0+326, sub_127b0+1095, sub_127b0+1582
0000000000012d96         mov        dword [rax], 0x7
0000000000012d9c         jmp        loc_12c28
0000000000012da1         mov        qword [rsp+0x28], r15                       ; CODE XREF=sub_127b0+743, sub_127b0+753, sub_127b0+767
0000000000012da6         jmp        sub_12040+268

                     loc_12dab:
0000000000012dab         mov        rdx, qword [rsp+64]                         ; CODE XREF=sub_127b0+278, sub_127b0+1646
0000000000012db0         mov        dword [rdx], eax
0000000000012db2         jmp        loc_12c28

                     loc_12db7:
0000000000012db7         movsxd     rax, ebx                                    ; CODE XREF=sub_127b0+335
0000000000012dba         mov        r11, qword [rsp+32]
0000000000012dbf         add        qword [r14+0x48], rax
0000000000012dc3         mov        r10, qword [rsp+96]
0000000000012dc8         mov        rdx, r11                                    ; argument #3 for method peek_token_bracket
0000000000012dcb         mov        rdi, r10                                    ; argument #1 for method peek_token_bracket
0000000000012dce         call       peek_token_bracket                          ; peek_token_bracket
0000000000012dd3         movzx      edx, byte [rsp+200]
0000000000012ddb         cmp        dl, 0x2
0000000000012dde         je         loc_12d91

0000000000012de0         cmp        dl, 0x15
0000000000012de3         je         loc_12ff7

0000000000012de9         mov        rdx, qword [rsp+104]
0000000000012dee         lea        rdi, qword [rsp+176]                        ; argument #1 for method parse_bracket_element.constprop.37
0000000000012df6         mov        r9d, 0x1                                    ; argument #6 for method parse_bracket_element.constprop.37
0000000000012dfc         mov        r8, r11                                     ; argument #5 for method parse_bracket_element.constprop.37
0000000000012dff         mov        ecx, eax                                    ; argument #4 for method parse_bracket_element.constprop.37
0000000000012e01         mov        dword [rsp+176], 0x3
0000000000012e0c         mov        qword [rsp+184], rdx
0000000000012e14         mov        rdx, r10                                    ; argument #3 for method parse_bracket_element.constprop.37
0000000000012e17         call       parse_bracket_element.constprop.37          ; parse_bracket_element.constprop.37
0000000000012e1c         test       eax, eax
0000000000012e1e         jne        loc_12dab

0000000000012e20         mov        rdx, qword [rsp+32]                         ; argument #3 for method peek_token_bracket
0000000000012e25         mov        rsi, r14                                    ; argument #2 for method peek_token_bracket
0000000000012e28         mov        rdi, r15                                    ; argument #1 for method peek_token_bracket
0000000000012e2b         call       peek_token_bracket                          ; peek_token_bracket
0000000000012e30         movsxd     rbx, eax
0000000000012e33         mov        rax, qword [rsp+16]
0000000000012e38         mov        esi, dword [rsp+160]
0000000000012e3f         mov        r9d, 0x0
0000000000012e45         cmp        dword [rax+0xb4], 0x1
0000000000012e4c         lea        eax, dword [rsi-2]
0000000000012e4f         cmovg      r9, r13
0000000000012e53         and        eax, 0xfffffffd
0000000000012e56         je         loc_132c9

0000000000012e5c         mov        r10d, dword [rsp+176]
0000000000012e64         lea        eax, dword [r10-2]
0000000000012e68         and        eax, 0xfffffffd
0000000000012e6b         je         loc_132c9

0000000000012e71         cmp        esi, 0x3
0000000000012e74         sete       r11b
0000000000012e78         je         loc_1330d

                     loc_12e7e:
0000000000012e7e         cmp        r10d, 0x3                                   ; CODE XREF=sub_127b0+2939
0000000000012e82         je         loc_132d9

                     loc_12e88:
0000000000012e88         test       esi, esi                                    ; CODE XREF=sub_127b0+2887
0000000000012e8a         jne        loc_131f9

0000000000012e90         movzx      edx, byte [rsp+168]

                     loc_12e98:
0000000000012e98         test       r10d, r10d                                  ; CODE XREF=sub_127b0+2638, sub_127b0+2655
0000000000012e9b         jne        loc_131dd

0000000000012ea1         movzx      r8d, byte [rsp+184]

                     loc_12eaa:
0000000000012eaa         test       esi, esi                                    ; CODE XREF=sub_127b0+3278
0000000000012eac         je         loc_13196

0000000000012eb2         test       r11b, r11b
0000000000012eb5         jne        loc_13196

0000000000012ebb         test       r9, r9
0000000000012ebe         mov        edx, dword [rsp+168]
0000000000012ec5         je         loc_12ee4

                     loc_12ec7:
0000000000012ec7         mov        edi, r8d                                    ; argument "__c" for method j_btowc, CODE XREF=sub_127b0+2578, sub_127b0+2586
0000000000012eca         mov        dword [rsp+120], edx
0000000000012ece         mov        qword [rsp+112], r9
0000000000012ed3         call       j_btowc                                     ; btowc
0000000000012ed8         mov        r9, qword [rsp+112]
0000000000012edd         mov        edx, dword [rsp+120]
0000000000012ee1         mov        r8d, eax

                     loc_12ee4:
0000000000012ee4         cmp        edx, 0xffffffff                             ; CODE XREF=sub_127b0+1813, sub_127b0+2600
0000000000012ee7         je         loc_132fd

0000000000012eed         cmp        r8d, 0xffffffff
0000000000012ef1         je         loc_132fd

                     loc_12ef7:
0000000000012ef7         test       qword [rsp+32], 0x10000                     ; CODE XREF=sub_127b0+2663, sub_127b0+2675
0000000000012f00         je         loc_12f0b

0000000000012f02         cmp        r8d, edx
0000000000012f05         jb         loc_132c9

                     loc_12f0b:
0000000000012f0b         test       r9, r9                                      ; CODE XREF=sub_127b0+1872
0000000000012f0e         je         loc_12f36

0000000000012f10         mov        rax, qword [r9+0x40]
0000000000012f14         cmp        rax, qword [rsp+72]
0000000000012f19         mov        rcx, qword [r9+8]
0000000000012f1d         je         loc_13333

                     loc_12f23:
0000000000012f23         mov        dword [rcx+rax*4], edx                      ; CODE XREF=sub_127b0+3088
0000000000012f26         mov        rcx, qword [r9+0x10]
0000000000012f2a         lea        rsi, qword [rax+1]
0000000000012f2e         mov        qword [r9+0x40], rsi
0000000000012f32         mov        dword [rcx+rax*4], r8d

                     loc_12f36:
0000000000012f36         xor        eax, eax                                    ; CODE XREF=sub_127b0+1886
0000000000012f38         mov        edi, 0x1

                     loc_12f3d:
0000000000012f3d         cmp        edx, eax                                    ; CODE XREF=sub_127b0+1971
0000000000012f3f         mov        ecx, eax
0000000000012f41         ja         loc_12f59

0000000000012f43         cmp        r8d, eax
0000000000012f46         jb         loc_12f59

0000000000012f48         mov        rsi, rax
0000000000012f4b         mov        r11, rdi
0000000000012f4e         sar        rsi, 0x6
0000000000012f52         shl        r11, cl
0000000000012f55         or         qword [r12+rsi*8], r11

                     loc_12f59:
0000000000012f59         add        rax, 0x1                                    ; CODE XREF=sub_127b0+1937, sub_127b0+1942
0000000000012f5d         cmp        rax, 0x100
0000000000012f63         jne        loc_12f3d

0000000000012f65         mov        rax, qword [rsp+64]
0000000000012f6a         mov        dword [rax], 0x0
0000000000012f70         jmp        loc_12bf0
0000000000012f75         mov        rbx, qword [rsp+0x18]                       ; CODE XREF=sub_12040+204
0000000000012f7a         mov        rdx, rax
0000000000012f7d         mov        rsi, r14
0000000000012f80         mov        qword [rsp], r8
0000000000012f84         mov        r15, rax
0000000000012f87         mov        rdi, rbx
0000000000012f8a         call       peek_token                                  ; peek_token
0000000000012f8f         cdqe
0000000000012f91         add        qword [r14+0x48], rax
0000000000012f95         mov        r9, qword [rsp+0x40]
0000000000012f9a         mov        r8, qword [rsp]
0000000000012f9e         mov        rcx, r15
0000000000012fa1         mov        rdx, rbx
0000000000012fa4         mov        rsi, rbp
0000000000012fa7         mov        rdi, r14
0000000000012faa         call       parse_expression                            ; parse_expression
0000000000012faf         mov        qword [rsp+0x28], rax
0000000000012fb4         jmp        sub_12040+128

                     loc_12fb9:
0000000000012fb9         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_127b0+99, sub_127b0+1396
0000000000012fbe         mov        dword [rax], 0x2
0000000000012fc4         jmp        loc_12c28

                     loc_12fc9:
0000000000012fc9         mov        rdi, r12                                    ; argument "__ptr" for method j_free, CODE XREF=sub_127b0+62
0000000000012fcc         call       j_free                                      ; free
0000000000012fd1         mov        rdi, r13                                    ; argument "__ptr" for method j_free
0000000000012fd4         call       j_free                                      ; free
0000000000012fd9         jmp        sub_127b0+872
                        ; endp
0000000000012fde         mov        rax, qword [rsp+0x40]                       ; CODE XREF=sub_127b0+508
0000000000012fe3         mov        qword [rsp+0x28], 0x0
0000000000012fec         mov        dword [rax], 0x6
0000000000012ff2         jmp        sub_12040+128

                     loc_12ff7:
0000000000012ff7         mov        eax, ebx                                    ; CODE XREF=sub_127b0+1587
0000000000012ff9         neg        eax
0000000000012ffb         cdqe
0000000000012ffd         add        qword [r14+0x48], rax
0000000000013001         mov        byte [r15+8], 0x1
0000000000013006         mov        eax, dword [rsp+160]
000000000001300d         jmp        loc_12905

                     loc_13012:
0000000000013012         add        qword [r14+0x48], rbx                       ; CODE XREF=sub_127b0+1103
0000000000013016         cmp        byte [rsp+87], 0x0
000000000001301b         je         loc_13031

000000000001301d         lea        rdx, qword [r12+0x20]
0000000000013022         mov        rax, r12

                     loc_13025:
0000000000013025         not        qword [rax]                                 ; CODE XREF=sub_127b0+2175
0000000000013028         add        rax, 0x8
000000000001302c         cmp        rdx, rax
000000000001302f         jne        loc_13025

                     loc_13031:
0000000000013031         mov        rax, qword [rsp+16]                         ; CODE XREF=sub_127b0+2155
0000000000013036         mov        edx, dword [rax+0xb4]
000000000001303c         cmp        edx, 0x1
000000000001303f         jle        loc_13059

0000000000013041         mov        rcx, qword [rax+0x78]
0000000000013045         xor        eax, eax

                     loc_13047:
0000000000013047         mov        rsi, qword [rcx+rax]                        ; CODE XREF=sub_127b0+2215
000000000001304b         and        qword [r12+rax], rsi
000000000001304f         add        rax, 0x8
0000000000013053         cmp        rax, 0x20
0000000000013057         jne        loc_13047

                     loc_13059:
0000000000013059         cmp        qword [r13+0x28], 0x0                       ; CODE XREF=sub_127b0+2191
000000000001305e         jne        loc_130e8

0000000000013064         cmp        qword [r13+0x30], 0x0
0000000000013069         jne        loc_130e8

000000000001306b         cmp        qword [r13+0x38], 0x0
0000000000013070         jne        loc_130e8

0000000000013072         cmp        qword [r13+0x40], 0x0
0000000000013077         jne        loc_130e8

0000000000013079         sub        edx, 0x1
000000000001307c         jle        loc_1308c

000000000001307e         cmp        qword [r13+0x48], 0x0
0000000000013083         jne        loc_130e8

0000000000013085         test       byte [r13+0x20], 0x1
000000000001308a         jne        loc_130e8

                     loc_1308c:
000000000001308c         mov        rdi, r13                                    ; argument #1 for method free_charset, CODE XREF=sub_127b0+2252
000000000001308f         call       free_charset                                ; free_charset
0000000000013094         mov        rax, qword [rsp+16]
0000000000013099         lea        r8, qword [rsp+176]                         ; argument #5 for method create_token_tree.isra.16
00000000000130a1         xor        ecx, ecx                                    ; argument #4 for method create_token_tree.isra.16
00000000000130a3         xor        edx, edx                                    ; argument #3 for method create_token_tree.isra.16
00000000000130a5         mov        byte [rsp+184], 0x3
00000000000130ad         mov        qword [rsp+176], r12
00000000000130b5         lea        rsi, qword [rax+0x80]                       ; argument #2 for method create_token_tree.isra.16
00000000000130bc         lea        rdi, qword [rax+0x70]                       ; argument #1 for method create_token_tree.isra.16
00000000000130c0         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
00000000000130c5         test       rax, rax
00000000000130c8         mov        qword [rsp+40], rax
00000000000130cd         jne        sub_12040+268

                     loc_130d3:
00000000000130d3         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_127b0+2444, sub_127b0+2512, sub_127b0+3170, sub_127b0+3225
00000000000130d8         mov        dword [rax], 0xc
00000000000130de         jmp        loc_12c28
00000000000130e3         nop        dword [rax+rax]

                     loc_130e8:
00000000000130e8         mov        rax, qword [rsp+16]                         ; CODE XREF=sub_127b0+2222, sub_127b0+2233, sub_127b0+2240, sub_127b0+2247, sub_127b0+2259, sub_127b0+2266
00000000000130ed         lea        r15, qword [rsp+176]
00000000000130f5         xor        edx, edx                                    ; argument #3 for method create_token_tree.isra.16
00000000000130f7         xor        ecx, ecx                                    ; argument #4 for method create_token_tree.isra.16
00000000000130f9         mov        r8, r15                                     ; argument #5 for method create_token_tree.isra.16
00000000000130fc         or         byte [rax+0xb0], 0x2
0000000000013103         lea        rbx, qword [rax+0x70]
0000000000013107         lea        rbp, qword [rax+0x80]
000000000001310e         mov        byte [rsp+184], 0x6
0000000000013116         mov        qword [rsp+176], r13
000000000001311e         mov        rdi, rbx                                    ; argument #1 for method create_token_tree.isra.16
0000000000013121         mov        rsi, rbp                                    ; argument #2 for method create_token_tree.isra.16
0000000000013124         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000013129         mov        rdi, rax
000000000001312c         mov        qword [rsp+40], rax
0000000000013131         lea        rdx, qword [r12+0x20]
0000000000013136         test       rdi, rdi
0000000000013139         mov        rax, r12
000000000001313c         je         loc_130d3

                     loc_1313e:
000000000001313e         cmp        qword [rax], 0x0                            ; CODE XREF=sub_127b0+2463
0000000000013142         jne        loc_133ed

0000000000013148         add        rax, 0x8
000000000001314c         cmp        rdx, rax
000000000001314f         jne        loc_1313e

0000000000013151         mov        rdi, r12                                    ; argument "__ptr" for method j_free
0000000000013154         call       j_free                                      ; free
0000000000013159         jmp        sub_12040+268
                        ; endp

                     loc_1315e:
000000000001315e         mov        rdx, qword [rsp+48]                         ; CODE XREF=sub_127b0+1204
0000000000013163         lea        rdi, qword [rdx+rdx+1]
0000000000013168         lea        rsi, qword [rdi*4]                          ; argument "__size" for method j_realloc
0000000000013170         mov        qword [rsp+48], rdi
0000000000013175         mov        rdi, rax                                    ; argument "__ptr" for method j_realloc
0000000000013178         call       j_realloc                                   ; realloc
000000000001317d         test       rax, rax
0000000000013180         je         loc_130d3

0000000000013186         mov        qword [r13], rax
000000000001318a         mov        rdx, qword [r13+0x28]
000000000001318e         jmp        loc_12c6a

                     loc_13193:
0000000000013193         xor        r8d, r8d                                    ; CODE XREF=sub_127b0+2617, sub_127b0+2622

                     loc_13196:
0000000000013196         test       r9, r9                                      ; CODE XREF=sub_127b0+1788, sub_127b0+1797
0000000000013199         je         loc_13214

000000000001319b         mov        edi, edx                                    ; argument "__c" for method j_btowc
000000000001319d         mov        dword [rsp+120], r8d
00000000000131a2         mov        qword [rsp+112], r9
00000000000131a7         call       j_btowc                                     ; btowc
00000000000131ac         mov        edx, eax
00000000000131ae         mov        eax, dword [rsp+176]
00000000000131b5         mov        r9, qword [rsp+112]
00000000000131ba         mov        r8d, dword [rsp+120]
00000000000131bf         cmp        eax, 0x3
00000000000131c2         je         loc_12ec7

00000000000131c8         test       eax, eax
00000000000131ca         je         loc_12ec7

                     loc_131d0:
00000000000131d0         mov        r8d, dword [rsp+184]                        ; CODE XREF=sub_127b0+2631, sub_127b0+2673
00000000000131d8         jmp        loc_12ee4

                     loc_131dd:
00000000000131dd         cmp        r10d, 0x3                                   ; CODE XREF=sub_127b0+1771
00000000000131e1         je         loc_13472

00000000000131e7         test       esi, esi
00000000000131e9         je         loc_13193

00000000000131eb         test       r11b, r11b
00000000000131ee         jne        loc_13193

00000000000131f0         mov        edx, dword [rsp+168]
00000000000131f7         jmp        loc_131d0

                     loc_131f9:
00000000000131f9         xor        edx, edx                                    ; CODE XREF=sub_127b0+1754
00000000000131fb         cmp        esi, 0x3
00000000000131fe         jne        loc_12e98

0000000000013204         mov        rax, qword [rsp+168]
000000000001320c         movzx      edx, byte [rax]
000000000001320f         jmp        loc_12e98

                     loc_13214:
0000000000013214         test       r10d, r10d                                  ; CODE XREF=sub_127b0+2537
0000000000013217         je         loc_12ef7

000000000001321d         cmp        r10d, 0x3
0000000000013221         jne        loc_131d0

0000000000013223         jmp        loc_12ef7

                     loc_13228:
0000000000013228         mov        ebx, 0x80                                   ; CODE XREF=sub_12670+89
000000000001322d         mov        r12d, 0x2

                     loc_13233:
0000000000013233         call       j___ctype_b_loc                             ; __ctype_b_loc, CODE XREF=sub_127b0+2808
0000000000013238         movsxd     rdx, ebx
000000000001323b         movsxd     r9, r12d
000000000001323e         mov        r8d, 0x1
0000000000013244         add        rdx, rdx
0000000000013247         add        rdx, qword [rax]
000000000001324a         mov        rax, qword [rsp+16]
000000000001324f         lea        rdi, qword [rax+r9*8]

                     loc_13253:
0000000000013253         xor        eax, eax                                    ; CODE XREF=sub_127b0+2796
0000000000013255         jmp        loc_13272
0000000000013257         nop        word [rax+rax]

                     loc_13260:
0000000000013260         lea        esi, dword [rbx+rax]                        ; CODE XREF=sub_127b0+2760
0000000000013263         cmp        esi, 0x5f
0000000000013266         je         loc_1327a

                     loc_13268:
0000000000013268         add        rax, 0x1                                    ; CODE XREF=sub_127b0+2775
000000000001326c         cmp        rax, 0x40
0000000000013270         je         loc_13289

                     loc_13272:
0000000000013272         test       byte [rdx+rax*2], 0x8                       ; CODE XREF=sub_127b0+2725
0000000000013276         mov        ecx, eax
0000000000013278         je         loc_13260

                     loc_1327a:
000000000001327a         mov        rsi, r8                                     ; CODE XREF=sub_127b0+2742
000000000001327d         shl        rsi, cl
0000000000013280         or         qword [rdi+0xb8], rsi
0000000000013287         jmp        loc_13268

                     loc_13289:
0000000000013289         add        r9, 0x1                                     ; CODE XREF=sub_127b0+2752
000000000001328d         add        ebx, 0x40
0000000000013290         sub        rdx, 0xffffffffffffff80
0000000000013294         add        rdi, 0x8
0000000000013298         cmp        r9d, 0x3
000000000001329c         jle        loc_13253

000000000001329e         jmp        loc_126e1

                     loc_132a3:
00000000000132a3         xor        ebx, ebx                                    ; CODE XREF=sub_12670+47
00000000000132a5         xor        r12d, r12d
00000000000132a8         jmp        loc_13233

                     loc_132aa:
00000000000132aa         lea        rcx, qword [__PRETTY_FUNCTION__.7327]       ; argument "__function" for method j___assert_fail, "parse_bracket_exp", CODE XREF=sub_127b0+344
00000000000132b1         lea        rsi, qword [aCoreutils831li_16aa0]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/regcomp.c"
00000000000132b8         lea        rdi, qword [aItercurwc0+16]                 ; argument "__assertion" for method j___assert_fail, 0x15f8d
00000000000132bf         mov        edx, 0xced                                  ; argument "__line" for method j___assert_fail
00000000000132c4         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_132c9:
00000000000132c9         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_127b0+1702, sub_127b0+1723, sub_127b0+1877
00000000000132ce         mov        dword [rax], 0xb
00000000000132d4         jmp        loc_12c28

                     loc_132d9:
00000000000132d9         mov        rdi, qword [rsp+184]                        ; CODE XREF=sub_127b0+1746
00000000000132e1         xor        eax, eax
00000000000132e3         or         rcx, 0xffffffffffffffff
00000000000132e7         repne scasb al, byte [rdi]
00000000000132e9         mov        rax, rcx
00000000000132ec         not        rax
00000000000132ef         sub        rax, 0x1
00000000000132f3         cmp        rax, 0x1
00000000000132f7         jbe        loc_12e88

                     loc_132fd:
00000000000132fd         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_127b0+1847, sub_127b0+1857, sub_127b0+2945
0000000000013302         mov        dword [rax], 0x3
0000000000013308         jmp        loc_12c28

                     loc_1330d:
000000000001330d         mov        rdi, qword [rsp+168]                        ; CODE XREF=sub_127b0+1736
0000000000013315         xor        eax, eax
0000000000013317         or         rcx, 0xffffffffffffffff
000000000001331b         repne scasb al, byte [rdi]
000000000001331d         mov        rax, rcx
0000000000013320         not        rax
0000000000013323         sub        rax, 0x1
0000000000013327         cmp        rax, 0x1
000000000001332b         jbe        loc_12e7e

0000000000013331         jmp        loc_132fd

                     loc_13333:
0000000000013333         mov        rax, qword [rsp+72]                         ; CODE XREF=sub_127b0+1901
0000000000013338         mov        rdi, rcx                                    ; argument "__ptr" for method j_realloc
000000000001333b         mov        dword [rsp+140], r8d
0000000000013343         mov        dword [rsp+136], edx
000000000001334a         mov        qword [rsp+112], r9
000000000001334f         add        rax, rax
0000000000013352         add        rax, 0x1
0000000000013356         lea        r10, qword [rax*4]
000000000001335e         mov        qword [rsp+72], rax
0000000000013363         mov        rsi, r10                                    ; argument "__size" for method j_realloc
0000000000013366         mov        qword [rsp+128], r10
000000000001336e         call       j_realloc                                   ; realloc
0000000000013373         mov        r9, qword [rsp+112]
0000000000013378         mov        r10, qword [rsp+128]
0000000000013380         mov        qword [rsp+120], rax
0000000000013385         mov        rdi, qword [r9+0x10]                        ; argument "__ptr" for method j_realloc
0000000000013389         mov        rsi, r10                                    ; argument "__size" for method j_realloc
000000000001338c         call       j_realloc                                   ; realloc
0000000000013391         mov        rcx, qword [rsp+120]
0000000000013396         test       rcx, rcx
0000000000013399         je         loc_133c5

000000000001339b         test       rax, rax
000000000001339e         mov        r9, qword [rsp+112]
00000000000133a3         mov        edx, dword [rsp+136]
00000000000133aa         mov        r8d, dword [rsp+140]
00000000000133b2         je         loc_133c5

00000000000133b4         mov        qword [r9+0x10], rax
00000000000133b8         mov        qword [r9+8], rcx
00000000000133bc         mov        rax, qword [r9+0x40]
00000000000133c0         jmp        loc_12f23

                     loc_133c5:
00000000000133c5         mov        rdi, rcx                                    ; argument "__ptr" for method j_free, CODE XREF=sub_127b0+3049, sub_127b0+3074
00000000000133c8         mov        qword [rsp+0], rax
00000000000133cc         call       j_free                                      ; free
00000000000133d1         mov        rax, qword [rsp+0]
00000000000133d5         mov        rdi, rax                                    ; argument "__ptr" for method j_free
00000000000133d8         call       j_free                                      ; free
00000000000133dd         mov        rax, qword [rsp+64]
00000000000133e2         mov        dword [rax], 0xc
00000000000133e8         jmp        loc_12c28

                     loc_133ed:
00000000000133ed         xor        ecx, ecx                                    ; argument #4 for method create_token_tree.isra.16, CODE XREF=sub_127b0+2450
00000000000133ef         xor        edx, edx                                    ; argument #3 for method create_token_tree.isra.16
00000000000133f1         mov        r8, r15                                     ; argument #5 for method create_token_tree.isra.16
00000000000133f4         mov        rsi, rbp                                    ; argument #2 for method create_token_tree.isra.16
00000000000133f7         mov        rdi, rbx                                    ; argument #1 for method create_token_tree.isra.16
00000000000133fa         mov        byte [rsp+184], 0x3
0000000000013402         mov        qword [rsp+176], r12
000000000001340a         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000001340f         test       rax, rax
0000000000013412         je         loc_130d3

0000000000013418         mov        rcx, qword [rsp+40]                         ; argument #4 for method create_token_tree.isra.16
000000000001341d         lea        r8, qword [rsp+192]                         ; argument #5 for method create_token_tree.isra.16
0000000000013425         mov        rdx, rax                                    ; argument #3 for method create_token_tree.isra.16
0000000000013428         mov        rsi, rbp                                    ; argument #2 for method create_token_tree.isra.16
000000000001342b         mov        rdi, rbx                                    ; argument #1 for method create_token_tree.isra.16
000000000001342e         mov        byte [rsp+200], 0xa
0000000000013436         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000001343b         test       rax, rax
000000000001343e         mov        qword [rsp+40], rax
0000000000013443         jne        sub_12040+268

0000000000013449         jmp        loc_130d3

                     loc_1344e:
000000000001344e         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=sub_12040+150
                        ; endp

                     loc_13453:
0000000000013453         mov        rax, qword [rsp+24]                         ; CODE XREF=sub_12040+1238
0000000000013458         cmp        byte [rax+8], 0x2
000000000001345c         jne        loc_12650

0000000000013462         mov        rax, qword [rsp+64]
0000000000013467         mov        dword [rax], 0x9
000000000001346d         jmp        loc_1265b

                     loc_13472:
0000000000013472         mov        rax, qword [rsp+184]                        ; CODE XREF=sub_127b0+2609
000000000001347a         movzx      r8d, byte [rax]
000000000001347e         jmp        loc_12eaa


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_13483:
0000000000013483         nop        dword [rax]                                 ; End of unwind block (FDE at 0x19868)
0000000000013486         nop        word [cs:rax+rax]
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_50: int8_t, -80
        ;    var_58: int8_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120


                     parse_branch:
0000000000013490         push       r15                                         ; Begin of unwind block (FDE at 0x198c8), CODE XREF=parse_reg_exp+67, parse_reg_exp+174
0000000000013492         push       r14
0000000000013494         mov        r15, rcx
0000000000013497         push       r13
0000000000013499         push       r12
000000000001349b         mov        r13, rsi
000000000001349e         push       rbp
000000000001349f         push       rbx
00000000000134a0         mov        rbx, r9
00000000000134a3         mov        rbp, rdx
00000000000134a6         mov        r12, r8
00000000000134a9         sub        rsp, 0x48
00000000000134ad         mov        rax, qword [fs:0x28]
00000000000134b6         mov        qword [rsp+0x78+var_40], rax
00000000000134bb         xor        eax, eax
00000000000134bd         mov        rax, qword [rsi]
00000000000134c0         mov        qword [rsp+0x78+var_78], rdi
00000000000134c4         mov        qword [rsp+0x78+var_68], rax
00000000000134c9         call       parse_expression                            ; parse_expression
00000000000134ce         mov        edx, dword [rbx]
00000000000134d0         mov        r14, rax
00000000000134d3         test       edx, edx
00000000000134d5         je         loc_134e0

00000000000134d7         test       rax, rax
00000000000134da         je         loc_135da

                     loc_134e0:
00000000000134e0         lea        rax, qword [rsp+0x78+var_58]                ; CODE XREF=parse_branch+69
00000000000134e5         mov        qword [rsp+0x78+var_60], rax
00000000000134ea         nop        word [rax+rax]

                     loc_134f0:
00000000000134f0         movzx      eax, byte [rbp+8]                           ; CODE XREF=parse_branch+303
00000000000134f4         mov        edx, eax
00000000000134f6         and        edx, 0xfffffff7
00000000000134f9         cmp        dl, 0x2
00000000000134fc         je         loc_13590

                     loc_13502:
0000000000013502         cmp        al, 0x9                                     ; CODE XREF=parse_branch+246
0000000000013504         jne        loc_1350f

0000000000013506         test       r12, r12
0000000000013509         jne        loc_13590

                     loc_1350f:
000000000001350f         mov        rdi, qword [rsp+0x78+var_78]                ; CODE XREF=parse_branch+116
0000000000013513         mov        r9, rbx
0000000000013516         mov        r8, r12
0000000000013519         mov        rcx, r15
000000000001351c         mov        rdx, rbp
000000000001351f         mov        rsi, r13
0000000000013522         call       parse_expression                            ; parse_expression
0000000000013527         mov        r9, rax
000000000001352a         mov        eax, dword [rbx]
000000000001352c         test       eax, eax
000000000001352e         je         loc_13539

0000000000013530         test       r9, r9
0000000000013533         je         loc_135c4

                     loc_13539:
0000000000013539         test       r14, r14                                    ; CODE XREF=parse_branch+158
000000000001353c         je         loc_135b8

000000000001353e         test       r9, r9
0000000000013541         je         loc_135b8

0000000000013543         mov        rax, qword [rsp+0x78+var_68]
0000000000013548         mov        r8, qword [rsp+0x78+var_60]
000000000001354d         mov        rcx, r9
0000000000013550         mov        rdx, r14
0000000000013553         mov        qword [rsp+0x78+var_70], r9
0000000000013558         mov        byte [rsp+0x78+var_50], 0x10
000000000001355d         lea        rsi, qword [rax+0x80]
0000000000013564         lea        rdi, qword [rax+0x70]
0000000000013568         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000001356d         test       rax, rax
0000000000013570         mov        r9, qword [rsp+0x78+var_70]
0000000000013575         je         loc_135e0

0000000000013577         mov        r14, rax
000000000001357a         movzx      eax, byte [rbp+8]
000000000001357e         mov        edx, eax
0000000000013580         and        edx, 0xfffffff7
0000000000013583         cmp        dl, 0x2
0000000000013586         jne        loc_13502

000000000001358c         nop        dword [rax]

                     loc_13590:
0000000000013590         mov        rcx, qword [rsp+0x78+var_40]                ; CODE XREF=parse_branch+108, parse_branch+121, parse_branch+333, parse_branch+379
0000000000013595         xor        rcx, qword [fs:0x28]
000000000001359e         mov        rax, r14
00000000000135a1         jne        loc_1360d

00000000000135a3         add        rsp, 0x48
00000000000135a7         pop        rbx
00000000000135a8         pop        rbp
00000000000135a9         pop        r12
00000000000135ab         pop        r13
00000000000135ad         pop        r14
00000000000135af         pop        r15
00000000000135b1         ret
                        ; endp
00000000000135b2         align      8

                     loc_135b8:
00000000000135b8         test       r14, r14                                    ; CODE XREF=parse_branch+172, parse_branch+177
00000000000135bb         cmove      r14, r9
00000000000135bf         jmp        loc_134f0

                     loc_135c4:
00000000000135c4         test       r14, r14                                    ; CODE XREF=parse_branch+163
00000000000135c7         je         loc_135da

00000000000135c9         lea        rsi, qword [free_tree]                      ; free_tree
00000000000135d0         xor        edx, edx
00000000000135d2         mov        rdi, r14
00000000000135d5         call       postorder                                   ; postorder

                     loc_135da:
00000000000135da         xor        r14d, r14d                                  ; CODE XREF=parse_branch+74, parse_branch+311
00000000000135dd         jmp        loc_13590
00000000000135df         align      32

                     loc_135e0:
00000000000135e0         lea        rsi, qword [free_tree]                      ; free_tree, CODE XREF=parse_branch+229
00000000000135e7         mov        rdi, r9
00000000000135ea         xor        edx, edx
00000000000135ec         call       postorder                                   ; postorder
00000000000135f1         lea        rsi, qword [free_tree]                      ; free_tree
00000000000135f8         mov        rdi, r14
00000000000135fb         xor        edx, edx
00000000000135fd         xor        r14d, r14d
0000000000013600         call       postorder                                   ; postorder
0000000000013605         mov        dword [rbx], 0xc
000000000001360b         jmp        loc_13590

                     loc_1360d:
000000000001360d         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=parse_branch+273
                        ; endp
0000000000013612         align      32                                          ; End of unwind block (FDE at 0x198c8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_50: int8_t, -80
        ;    var_58: int8_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128


                     parse_reg_exp:
0000000000013620         push       r15                                         ; Begin of unwind block (FDE at 0x19914), CODE XREF=sub_12040+47, re_compile_internal+1203
0000000000013622         push       r14
0000000000013624         mov        r14, rcx
0000000000013627         push       r13
0000000000013629         push       r12
000000000001362b         mov        r13, r9
000000000001362e         push       rbp
000000000001362f         push       rbx
0000000000013630         mov        rbp, rdx
0000000000013633         mov        r12, rdi
0000000000013636         sub        rsp, 0x58
000000000001363a         mov        rbx, qword [rsi]
000000000001363d         mov        rax, qword [fs:0x28]
0000000000013646         mov        qword [rsp+0x88+var_40], rax
000000000001364b         xor        eax, eax
000000000001364d         mov        qword [rsp+0x88+var_60], rsi
0000000000013652         mov        qword [rsp+0x88+var_78], r8
0000000000013657         mov        rax, qword [rbx+0xa8]
000000000001365e         mov        qword [rsp+0x88+var_68], rax
0000000000013663         call       parse_branch                                ; parse_branch
0000000000013668         mov        edx, dword [r13]
000000000001366c         mov        r15, rax
000000000001366f         test       edx, edx
0000000000013671         je         loc_1367c

0000000000013673         test       rax, rax
0000000000013676         je         loc_13762

                     loc_1367c:
000000000001367c         lea        rax, qword [rsp+0x88+var_58]                ; CODE XREF=parse_reg_exp+81
0000000000013681         mov        qword [rsp+0x88+var_80], rax
0000000000013686         jmp        loc_13714
000000000001368b         align      16

                     loc_13690:
0000000000013690         cmp        al, 0x9                                     ; CODE XREF=parse_reg_exp+290
0000000000013692         jne        loc_136a0

0000000000013694         cmp        qword [rsp+0x88+var_78], 0x0
000000000001369a         jne        loc_13748

                     loc_136a0:
00000000000136a0         mov        rax, qword [rbx+0xa8]                       ; CODE XREF=parse_reg_exp+114
00000000000136a7         mov        r8, qword [rsp+0x88+var_78]
00000000000136ac         mov        rcx, r14
00000000000136af         mov        rsi, qword [rsp+0x88+var_60]
00000000000136b4         mov        r9, r13
00000000000136b7         mov        rdx, rbp
00000000000136ba         mov        rdi, r12
00000000000136bd         mov        qword [rsp+0x88+var_70], rax
00000000000136c2         mov        rax, qword [rsp+0x88+var_68]
00000000000136c7         mov        qword [rbx+0xa8], rax
00000000000136ce         call       parse_branch                                ; parse_branch
00000000000136d3         mov        rcx, rax
00000000000136d6         mov        eax, dword [r13]
00000000000136da         test       eax, eax
00000000000136dc         je         loc_136e3

00000000000136de         test       rcx, rcx
00000000000136e1         je         loc_1374c

                     loc_136e3:
00000000000136e3         mov        rax, qword [rsp+0x88+var_70]                ; CODE XREF=parse_reg_exp+188
00000000000136e8         or         qword [rbx+0xa8], rax

                     loc_136ef:
00000000000136ef         mov        r8, qword [rsp+0x88+var_80]                 ; CODE XREF=parse_reg_exp+298
00000000000136f4         lea        rsi, qword [rbx+0x80]
00000000000136fb         lea        rdi, qword [rbx+0x70]
00000000000136ff         mov        rdx, r15
0000000000013702         mov        byte [rsp+0x88+var_50], 0xa
0000000000013707         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000001370c         test       rax, rax
000000000001370f         mov        r15, rax
0000000000013712         je         loc_13790

                     loc_13714:
0000000000013714         cmp        byte [rbp+8], 0xa                           ; CODE XREF=parse_reg_exp+102
0000000000013718         jne        loc_13768

000000000001371a         mov        rdx, r14
000000000001371d         mov        rsi, r12
0000000000013720         mov        rdi, rbp
0000000000013723         or         rdx, 0x800000
000000000001372a         call       peek_token                                  ; peek_token
000000000001372f         cdqe
0000000000013731         add        qword [r12+0x48], rax
0000000000013736         movzx      eax, byte [rbp+8]
000000000001373a         mov        edx, eax
000000000001373c         and        edx, 0xfffffff7
000000000001373f         cmp        dl, 0x2
0000000000013742         jne        loc_13690

                     loc_13748:
0000000000013748         xor        ecx, ecx                                    ; CODE XREF=parse_reg_exp+122
000000000001374a         jmp        loc_136ef

                     loc_1374c:
000000000001374c         test       r15, r15                                    ; CODE XREF=parse_reg_exp+193
000000000001374f         je         loc_13762

0000000000013751         lea        rsi, qword [free_tree]                      ; free_tree
0000000000013758         xor        edx, edx
000000000001375a         mov        rdi, r15
000000000001375d         call       postorder                                   ; postorder

                     loc_13762:
0000000000013762         xor        r15d, r15d                                  ; CODE XREF=parse_reg_exp+86, parse_reg_exp+303
0000000000013765         nop        dword [rax]

                     loc_13768:
0000000000013768         mov        rcx, qword [rsp+0x88+var_40]                ; CODE XREF=parse_reg_exp+248, parse_reg_exp+376
000000000001376d         xor        rcx, qword [fs:0x28]
0000000000013776         mov        rax, r15
0000000000013779         jne        loc_1379a

000000000001377b         add        rsp, 0x58
000000000001377f         pop        rbx
0000000000013780         pop        rbp
0000000000013781         pop        r12
0000000000013783         pop        r13
0000000000013785         pop        r14
0000000000013787         pop        r15
0000000000013789         ret
                        ; endp
000000000001378a         align      16

                     loc_13790:
0000000000013790         mov        dword [r13], 0xc                            ; CODE XREF=parse_reg_exp+242
0000000000013798         jmp        loc_13768

                     loc_1379a:
000000000001379a         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=parse_reg_exp+345
                        ; endp
000000000001379f         align      32                                          ; End of unwind block (FDE at 0x19914)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int32_t, -72
        ;    var_4D: int8_t, -77
        ;    var_4E: int8_t, -78
        ;    var_4F: int8_t, -79
        ;    var_50: int8_t, -80
        ;    var_60: int64_t, -96
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_D0: int64_t, -208
        ;    var_D8: int64_t, -216
        ;    var_E8: int64_t, -232
        ;    var_F0: int64_t, -240
        ;    var_F8: int8_t, -248
        ;    var_108: int32_t, -264
        ;    var_10C: int32_t, -268
        ;    var_130: int64_t, -304
        ;    var_138: int64_t, -312
        ;    var_140: int64_t, -320
        ;    var_148: int64_t, -328
        ;    var_150: int64_t, -336
        ;    var_158: int64_t, -344


                     re_compile_internal:
00000000000137a0         push       r15                                         ; Begin of unwind block (FDE at 0x19964), CODE XREF=rpl_re_compile_pattern+53, rpl_regcomp+164
00000000000137a2         push       r14
00000000000137a4         push       r13
00000000000137a6         push       r12
00000000000137a8         push       rbp
00000000000137a9         push       rbx
00000000000137aa         sub        rsp, 0x128
00000000000137b1         mov        qword [rdi+0x18], rcx
00000000000137b5         mov        qword [rdi+0x10], 0x0
00000000000137bd         mov        rax, qword [fs:0x28]
00000000000137c6         mov        qword [rsp+0x158+var_40], rax
00000000000137ce         xor        eax, eax
00000000000137d0         movzx      eax, byte [rdi+0x38]
00000000000137d4         mov        qword [rsp+0x158+var_150], rdi
00000000000137d9         mov        qword [rsp+0x158+var_148], rsi
00000000000137de         mov        qword [rsp+0x158+var_158], rdx
00000000000137e2         mov        qword [rsp+0x158+var_140], rcx
00000000000137e7         mov        dword [rsp+0x158+var_10C], 0x0
00000000000137ef         mov        qword [rdi+0x30], 0x0
00000000000137f7         mov        rbx, qword [rdi]
00000000000137fa         mov        byte [rsp+0x158+var_138], al
00000000000137fe         and        eax, 0xffffff90
0000000000013801         cmp        qword [rdi+8], 0xe7
0000000000013809         mov        byte [rdi+0x38], al
000000000001380c         jbe        loc_14606

                     loc_13812:
0000000000013812         lea        rdi, qword [rbx+8]                          ; CODE XREF=sub_14120+1295
0000000000013816         mov        rax, qword [rsp+0x158+var_150]
000000000001381b         mov        rcx, rbx
000000000001381e         and        rdi, 0xfffffffffffffff8
0000000000013822         sub        rcx, rdi
0000000000013825         mov        qword [rax+0x10], 0xe8
000000000001382d         xor        eax, eax
000000000001382f         add        ecx, 0xe8
0000000000013835         mov        qword [rbx], 0x0
000000000001383c         mov        qword [rbx+0xe0], 0x0
0000000000013847         shr        ecx, 0x3
000000000001384a         rep stosq  qword [rdi], rax
000000000001384d         movabs     rax, 0x555555555555554
0000000000013857         mov        dword [rbx+0x80], 0xf
0000000000013861         cmp        qword [rsp+0x158+var_158], rax
0000000000013865         ja         loc_13ea6

000000000001386b         mov        r14, qword [rsp+0x158+var_158]
000000000001386f         lea        rax, qword [r14+1]
0000000000013873         mov        rdi, rax
0000000000013876         mov        qword [rbx+8], rax
000000000001387a         mov        qword [rsp+0x158+var_130], rax
000000000001387f         shl        rdi, 0x4                                    ; argument "__size" for method j_malloc
0000000000013883         call       j_malloc                                    ; malloc
0000000000013888         test       r14, r14
000000000001388b         mov        qword [rbx], rax
000000000001388e         je         loc_14575

0000000000013894         mov        esi, 0x1
0000000000013899         nop        dword [rax]

                     loc_138a0:
00000000000138a0         add        rsi, rsi                                    ; CODE XREF=re_compile_internal+263
00000000000138a3         cmp        qword [rsp+0x158+var_158], rsi
00000000000138a7         jae        loc_138a0

00000000000138a9         lea        rbp, qword [rsi-1]

                     loc_138ad:
00000000000138ad         mov        edi, 0x18                                   ; argument "__nmemb" for method j_calloc, CODE XREF=sub_14120+1116
00000000000138b2         call       j_calloc                                    ; calloc
00000000000138b7         mov        qword [rbx+0x88], rbp
00000000000138be         mov        qword [rbx+0x40], rax
00000000000138c2         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max
00000000000138c7         mov        edi, 0xe                                    ; argument "__item" for method j_nl_langinfo
00000000000138cc         mov        dword [rbx+0xb4], eax
00000000000138d2         call       j_nl_langinfo                               ; nl_langinfo
00000000000138d7         movzx      edx, byte [rax]
00000000000138da         and        edx, 0xffffffdf
00000000000138dd         cmp        dl, 0x55
00000000000138e0         jne        loc_13930

00000000000138e2         movzx      edx, byte [rax+1]
00000000000138e6         and        edx, 0xffffffdf
00000000000138e9         cmp        dl, 0x54
00000000000138ec         jne        loc_13930

00000000000138ee         movzx      edx, byte [rax+2]
00000000000138f2         and        edx, 0xffffffdf
00000000000138f5         cmp        dl, 0x46
00000000000138f8         jne        loc_13930

00000000000138fa         xor        edx, edx
00000000000138fc         cmp        byte [rax+3], 0x2d
0000000000013900         lea        rdi, qword [aErrRegespace+18]               ; 0x16b46
0000000000013907         mov        ecx, 0x2
000000000001390c         sete       dl
000000000001390f         lea        rsi, qword [rax+rdx+3]
0000000000013914         rep  cmpsb byte [rsi], byte [rdi]
0000000000013916         seta       al
0000000000013919         sbb        al, 0x0
000000000001391b         test       al, al
000000000001391d         jne        loc_13930

000000000001391f         or         byte [rbx+0xb0], 0x4
0000000000013926         nop        word [cs:rax+rax]

                     loc_13930:
0000000000013930         movzx      eax, byte [rbx+0xb0]                        ; CODE XREF=re_compile_internal+320, re_compile_internal+332, re_compile_internal+344, re_compile_internal+381
0000000000013937         mov        edx, eax
0000000000013939         and        edx, 0xfffffff7
000000000001393c         cmp        dword [rbx+0xb4], 0x1
0000000000013943         mov        byte [rbx+0xb0], dl
0000000000013949         jle        loc_1395e

000000000001394b         test       al, 0x4
000000000001394d         je         loc_13eb3

0000000000013953         lea        rax, qword [utf8_sb_map]                    ; utf8_sb_map
000000000001395a         mov        qword [rbx+0x78], rax

                     loc_1395e:
000000000001395e         cmp        qword [rbx], 0x0                            ; CODE XREF=re_compile_internal+425, re_compile_internal+1939
0000000000013962         je         loc_13ea6

0000000000013968         cmp        qword [rbx+0x40], 0x0
000000000001396d         je         loc_13ea6

0000000000013973         mov        rax, qword [rsp+0x158+var_140]
0000000000013978         lea        rbp, qword [rsp+0x158+var_D8]
0000000000013980         mov        ecx, 0x12
0000000000013985         mov        dword [rsp+0x158+var_10C], 0x0
000000000001398d         lea        r8, qword [rbp+8]
0000000000013991         and        eax, 0x400000
0000000000013996         mov        qword [rsp+0x158+var_138], rax
000000000001399b         mov        rax, qword [rsp+0x158+var_150]
00000000000139a0         setne      dl
00000000000139a3         mov        rdi, r8
00000000000139a6         mov        rsi, qword [rax+0x28]
00000000000139aa         xor        eax, eax
00000000000139ac         rep stosq  qword [rdi], rax
00000000000139af         mov        rax, qword [rsp+0x158+var_148]
00000000000139b4         mov        rdi, qword [rsp+0x158+var_158]
00000000000139b8         test       rsi, rsi
00000000000139bb         mov        byte [rsp+0x158+var_50], dl
00000000000139c2         mov        ecx, dword [rbx+0xb4]
00000000000139c8         setne      r12b
00000000000139cc         mov        qword [rsp+0x158+var_60], rsi
00000000000139d4         mov        qword [rsp+0x158+var_D8], rax
00000000000139dc         movzx      eax, byte [rbx+0xb0]
00000000000139e3         or         r12d, edx
00000000000139e6         mov        qword [rsp+0x158+var_80], rdi
00000000000139ee         mov        qword [rsp+0x158+var_88], rdi
00000000000139f6         mov        esi, r12d
00000000000139f9         mov        byte [rsp+0x158+var_4D], r12b
0000000000013a01         mov        dword [rsp+0x158+var_48], ecx
0000000000013a08         mov        qword [rsp+0x158+var_70], rdi
0000000000013a10         mov        qword [rsp+0x158+var_78], rdi
0000000000013a18         mov        edx, eax
0000000000013a1a         shr        al, 0x3
0000000000013a1d         shr        dl, 0x2
0000000000013a20         and        eax, 0x1
0000000000013a23         and        edx, 0x1
0000000000013a26         test       rdi, rdi
0000000000013a29         mov        byte [rsp+0x158+var_4E], al
0000000000013a30         mov        byte [rsp+0x158+var_4F], dl
0000000000013a37         jne        loc_13e75

0000000000013a3d         test       sil, sil
0000000000013a40         je         loc_13a4f

                     loc_13a42:
0000000000013a42         mov        rax, qword [rsp+0x158+var_D0]               ; CODE XREF=re_compile_internal+1793
0000000000013a4a         mov        qword [rsp+0x158+var_148], rax

                     loc_13a4f:
0000000000013a4f         cmp        qword [rsp+0x158+var_138], 0x0              ; CODE XREF=re_compile_internal+672, re_compile_internal+1787
0000000000013a55         mov        rax, qword [rsp+0x158+var_148]
0000000000013a5a         mov        qword [rsp+0x158+var_D0], rax
0000000000013a62         je         loc_13b65

0000000000013a68         cmp        ecx, 0x1
0000000000013a6b         jle        loc_1465d

                     loc_13a71:
0000000000013a71         mov        rdi, rbp                                    ; CODE XREF=re_compile_internal+796
0000000000013a74         call       build_wcs_upper_buffer                      ; build_wcs_upper_buffer
0000000000013a79         test       eax, eax
0000000000013a7b         jne        loc_13ac0

0000000000013a7d         mov        rax, qword [rsp+0x158+var_158]
0000000000013a81         cmp        rax, qword [rsp+0x158+var_A0]
0000000000013a89         jle        loc_14640

0000000000013a8f         movsxd     rax, dword [rbx+0xb4]
0000000000013a96         mov        rsi, qword [rsp+0x158+var_98]
0000000000013a9e         add        rax, qword [rsp+0x158+var_A8]
0000000000013aa6         cmp        rsi, rax
0000000000013aa9         jg         loc_14640

0000000000013aaf         add        rsi, rsi
0000000000013ab2         mov        rdi, rbp
0000000000013ab5         call       re_string_realloc_buffers                   ; re_string_realloc_buffers
0000000000013aba         test       eax, eax
0000000000013abc         je         loc_13a71

0000000000013abe         nop

                     loc_13ac0:
0000000000013ac0         mov        dword [rsp+0x158+var_10C], eax              ; CODE XREF=re_compile_internal+731, re_compile_internal+1652, re_compile_internal+1679, re_compile_internal+1764, sub_14120+177, sub_14120+495
0000000000013ac4         mov        rax, qword [rsp+0x158+var_150]
0000000000013ac9         mov        r13, qword [rax]

                     loc_13acc:
0000000000013acc         mov        rdi, qword [r13+0x70]                       ; CODE XREF=sub_14120+1013, sub_14120+1378, sub_14730+124, sub_14730+155
0000000000013ad0         test       rdi, rdi
0000000000013ad3         je         loc_13ae8

0000000000013ad5         nop        dword [rax]

                     loc_13ad8:
0000000000013ad8         mov        r12, qword [rdi]                            ; CODE XREF=re_compile_internal+838
0000000000013adb         call       j_free                                      ; free
0000000000013ae0         test       r12, r12
0000000000013ae3         mov        rdi, r12
0000000000013ae6         jne        loc_13ad8

                     loc_13ae8:
0000000000013ae8         mov        rdi, qword [r13+0x20]                       ; argument "__ptr" for method j_free, CODE XREF=re_compile_internal+819
0000000000013aec         mov        qword [r13+0x70], 0x0
0000000000013af4         mov        dword [r13+0x80], 0xf
0000000000013aff         mov        qword [r13+0x68], 0x0
0000000000013b07         call       j_free                                      ; free
0000000000013b0c         mov        qword [r13+0x20], 0x0
0000000000013b14         mov        rdi, rbp
0000000000013b17         call       re_string_destruct                          ; re_string_destruct

                     loc_13b1c:
0000000000013b1c         mov        rdi, rbx                                    ; CODE XREF=re_compile_internal+1806, sub_14120+1000
0000000000013b1f         call       free_dfa_content                            ; free_dfa_content
0000000000013b24         mov        rax, qword [rsp+0x158+var_150]
0000000000013b29         mov        qword [rax], 0x0
0000000000013b30         mov        qword [rax+8], 0x0
0000000000013b38         mov        eax, dword [rsp+0x158+var_10C]

                     loc_13b3c:
0000000000013b3c         mov        rbx, qword [rsp+0x158+var_40]               ; CODE XREF=sub_14120+994, sub_14730+134
0000000000013b44         xor        rbx, qword [fs:0x28]
0000000000013b4d         jne        loc_14890

0000000000013b53         add        rsp, 0x128
0000000000013b5a         pop        rbx
0000000000013b5b         pop        rbp
0000000000013b5c         pop        r12
0000000000013b5e         pop        r13
0000000000013b60         pop        r14
0000000000013b62         pop        r15
0000000000013b64         ret
                        ; endp

                     loc_13b65:
0000000000013b65         cmp        ecx, 0x1                                    ; CODE XREF=re_compile_internal+706
0000000000013b68         jg         loc_1451a

0000000000013b6e         test       r12b, r12b
0000000000013b71         mov        rsi, qword [rsp+0x158+var_98]
0000000000013b79         je         loc_14194

0000000000013b7f         cmp        qword [rsp+0x158+var_80], rsi
0000000000013b87         mov        rax, qword [rsp+0x158+var_A8]
0000000000013b8f         cmovle     rsi, qword [rsp+0x158+var_80]
0000000000013b98         cmp        rsi, rax
0000000000013b9b         jg         loc_13bad

0000000000013b9d         jmp        loc_13be0
0000000000013b9f         align      32

                     loc_13ba0:
0000000000013ba0         mov        rdx, qword [rsp+0x158+var_D0]               ; CODE XREF=re_compile_internal+1086
0000000000013ba8         mov        qword [rsp+0x158+var_148], rdx

                     loc_13bad:
0000000000013bad         mov        rdx, qword [rsp+0x158+var_D8]               ; CODE XREF=re_compile_internal+1019
0000000000013bb5         mov        rcx, qword [rsp+0x158+var_60]
0000000000013bbd         add        rdx, rax
0000000000013bc0         add        rdx, qword [rsp+0x158+var_B0]
0000000000013bc8         movzx      edx, byte [rdx]
0000000000013bcb         movzx      edx, byte [rcx+rdx]
0000000000013bcf         mov        rcx, qword [rsp+0x158+var_148]
0000000000013bd4         mov        byte [rcx+rax], dl
0000000000013bd7         add        rax, 0x1
0000000000013bdb         cmp        rsi, rax
0000000000013bde         jne        loc_13ba0

                     loc_13be0:
0000000000013be0         mov        qword [rsp+0x158+var_A8], rax               ; CODE XREF=re_compile_internal+1021
0000000000013be8         mov        qword [rsp+0x158+var_A0], rax
0000000000013bf0         mov        dword [rsp+0x158+var_10C], 0x0

                     loc_13bf8:
0000000000013bf8         mov        r12, qword [rsp+0x158+var_150]              ; CODE XREF=sub_14120+140, sub_14120+1034, sub_14120+1320, sub_14120+1357
0000000000013bfd         mov        r14, qword [rsp+0x158+var_140]
0000000000013c02         lea        r13, qword [rsp+0x158+var_108]
0000000000013c07         mov        rsi, rbp
0000000000013c0a         mov        rdi, r13
0000000000013c0d         mov        qword [rsp+0x158+var_130], r13
0000000000013c12         mov        r15, qword [r12]
0000000000013c16         mov        rdx, r14
0000000000013c19         mov        qword [r12+0x30], 0x0
0000000000013c22         or         rdx, 0x800000
0000000000013c29         mov        qword [r15+0xd8], r14
0000000000013c30         call       peek_token                                  ; peek_token
0000000000013c35         lea        r9, qword [rsp+0x158+var_10C]
0000000000013c3a         xor        r8d, r8d
0000000000013c3d         mov        rcx, r14
0000000000013c40         mov        rdx, r13
0000000000013c43         mov        rsi, r12
0000000000013c46         mov        rdi, rbp
0000000000013c49         cdqe
0000000000013c4b         add        qword [rsp+0x158+var_90], rax
0000000000013c53         call       parse_reg_exp                               ; parse_reg_exp
0000000000013c58         mov        ecx, dword [rsp+0x158+var_10C]
0000000000013c5c         test       ecx, ecx
0000000000013c5e         jne        loc_14687

0000000000013c64         lea        r13, qword [r15+0x70]
0000000000013c68         lea        r12, qword [rsp+0x158+var_F8]
0000000000013c6d         sub        r15, 0xffffffffffffff80
0000000000013c71         xor        edx, edx
0000000000013c73         xor        ecx, ecx
0000000000013c75         mov        rsi, r15
0000000000013c78         mov        r8, r12
0000000000013c7b         mov        rdi, r13
0000000000013c7e         mov        qword [rsp+0x158+var_158], rax
0000000000013c82         mov        byte [rsp+0x158+var_F0], 0x2
0000000000013c87         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000013c8c         mov        r9, qword [rsp+0x158+var_158]
0000000000013c90         mov        r11, rax
0000000000013c93         mov        rdx, rax
0000000000013c96         test       r9, r9
0000000000013c99         je         loc_13cc2

                     loc_13c9b:
0000000000013c9b         mov        rcx, r11                                    ; CODE XREF=sub_14120+1439
0000000000013c9e         mov        rdx, r9
0000000000013ca1         mov        r8, r12
0000000000013ca4         mov        rsi, r15
0000000000013ca7         mov        rdi, r13
0000000000013caa         mov        qword [rsp+0x158+var_158], r11
0000000000013cae         mov        byte [rsp+0x158+var_F0], 0x10
0000000000013cb3         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000013cb8         mov        r11, qword [rsp+0x158+var_158]
0000000000013cbc         mov        rdx, r11
0000000000013cbf         mov        r11, rax

                     loc_13cc2:
0000000000013cc2         test       rdx, rdx                                    ; CODE XREF=re_compile_internal+1273
0000000000013cc5         mov        rcx, qword [rsp+0x158+var_150]
0000000000013cca         sete       dl
0000000000013ccd         test       r11, r11
0000000000013cd0         sete       al
0000000000013cd3         or         dl, al
0000000000013cd5         mov        r13, qword [rcx]
0000000000013cd8         jne        loc_14672

0000000000013cde         mov        r15, qword [r13+8]
0000000000013ce2         mov        qword [rbx+0x68], r11
0000000000013ce6         lea        rcx, qword [r15*8]
0000000000013cee         lea        r15, qword [r15+r15*2]
0000000000013cf2         mov        rdi, rcx                                    ; argument "__size" for method j_malloc
0000000000013cf5         mov        qword [rsp+0x158+var_158], rcx
0000000000013cf9         shl        r15, 0x3
0000000000013cfd         call       j_malloc                                    ; malloc
0000000000013d02         mov        rcx, qword [rsp+0x158+var_158]
0000000000013d06         mov        qword [r13+0x18], rax
0000000000013d0a         mov        qword [rsp+0x158+var_140], rax
0000000000013d0f         mov        rdi, rcx                                    ; argument "__size" for method j_malloc
0000000000013d12         call       j_malloc                                    ; malloc
0000000000013d17         mov        rdi, r15                                    ; argument "__size" for method j_malloc
0000000000013d1a         mov        qword [r13+0x20], rax
0000000000013d1e         mov        qword [rsp+0x158+var_148], rax
0000000000013d23         call       j_malloc                                    ; malloc
0000000000013d28         mov        rdi, r15                                    ; argument "__size" for method j_malloc
0000000000013d2b         mov        qword [r13+0x28], rax
0000000000013d2f         mov        qword [rsp+0x158+var_158], rax
0000000000013d33         call       j_malloc                                    ; malloc
0000000000013d38         mov        rdx, qword [rsp+0x158+var_140]
0000000000013d3d         mov        qword [r13+0x30], rax
0000000000013d41         mov        rsi, qword [rsp+0x158+var_158]
0000000000013d45         mov        rcx, qword [rsp+0x158+var_148]
0000000000013d4a         test       rdx, rdx
0000000000013d4d         je         loc_1450d

0000000000013d53         test       rcx, rcx
0000000000013d56         je         loc_1450d

0000000000013d5c         test       rsi, rsi
0000000000013d5f         je         loc_1450d

0000000000013d65         test       rax, rax
0000000000013d68         je         loc_1450d

0000000000013d6e         mov        rax, qword [rsp+0x158+var_150]
0000000000013d73         mov        r15, qword [rax+0x30]
0000000000013d77         lea        rdi, qword [r15*8]                          ; argument "__size" for method j_malloc
0000000000013d7f         call       j_malloc                                    ; malloc
0000000000013d84         test       rax, rax
0000000000013d87         mov        qword [r13+0xe0], rax
0000000000013d8e         je         loc_13dfd

0000000000013d90         test       r15, r15
0000000000013d93         je         loc_13dad

0000000000013d95         xor        edx, edx
0000000000013d97         nop        word [rax+rax]

                     loc_13da0:
0000000000013da0         mov        qword [rax+rdx*8], rdx                      ; CODE XREF=re_compile_internal+1547
0000000000013da4         add        rdx, 0x1
0000000000013da8         cmp        rdx, r15
0000000000013dab         jne        loc_13da0

                     loc_13dad:
0000000000013dad         mov        rdi, qword [r13+0x68]                       ; CODE XREF=re_compile_internal+1523
0000000000013db1         lea        rsi, qword [optimize_subexps]               ; optimize_subexps
0000000000013db8         mov        rdx, r13
0000000000013dbb         call       preorder                                    ; preorder
0000000000013dc0         mov        rax, qword [rsp+0x158+var_150]
0000000000013dc5         mov        rdi, qword [r13+0xe0]
0000000000013dcc         mov        rdx, qword [rax+0x30]
0000000000013dd0         test       rdx, rdx
0000000000013dd3         je         loc_146c4

0000000000013dd9         mov        rax, qword [rdi]
0000000000013ddc         test       rax, rax
0000000000013ddf         je         loc_13dee

0000000000013de1         jmp        loc_13dfd
0000000000013de3         align      8

                     loc_13de8:
0000000000013de8         cmp        qword [rdi+rax*8], rax                      ; CODE XREF=re_compile_internal+1621
0000000000013dec         jne        loc_13dfd

                     loc_13dee:
0000000000013dee         add        rax, 0x1                                    ; CODE XREF=re_compile_internal+1599
0000000000013df2         cmp        rdx, rax
0000000000013df5         ja         loc_13de8

0000000000013df7         je         loc_146c4

                     loc_13dfd:
0000000000013dfd         mov        rdi, qword [r13+0x68]                       ; CODE XREF=re_compile_internal+1518, re_compile_internal+1601, re_compile_internal+1612, sub_14120+1460
0000000000013e01         mov        rdx, qword [rsp+0x158+var_150]
0000000000013e06         lea        rsi, qword [lower_subexps]                  ; lower_subexps
0000000000013e0d         call       postorder                                   ; postorder
0000000000013e12         test       eax, eax
0000000000013e14         jne        loc_13ac0

0000000000013e1a         mov        rdi, qword [r13+0x68]
0000000000013e1e         lea        rsi, qword [calc_first]                     ; calc_first
0000000000013e25         mov        rdx, r13
0000000000013e28         call       postorder                                   ; postorder
0000000000013e2d         test       eax, eax
0000000000013e2f         jne        loc_13ac0

0000000000013e35         mov        rdi, qword [r13+0x68]
0000000000013e39         lea        rsi, qword [calc_next]                      ; calc_next
0000000000013e40         mov        rdx, r13
0000000000013e43         call       preorder                                    ; preorder
0000000000013e48         mov        rdx, qword [r13+0x68]
0000000000013e4c         lea        rsi, qword [switch_table_16f94+20]          ; 0x16fa8
0000000000013e53         nop        dword [rax+rax]

                     loc_13e58:
0000000000013e58         movzx      ecx, byte [rdx+0x30]                        ; CODE XREF=re_compile_internal+1983
0000000000013e5c         mov        rdi, qword [rdx+0x38]
0000000000013e60         cmp        cl, 0x10
0000000000013e63         ja         loc_13f38

0000000000013e69         movzx      eax, cl
0000000000013e6c         movsxd     rax, dword [rsi+rax*4]
0000000000013e70         add        rax, rsi
0000000000013e73         jmp        rax
                        ; endp

                     loc_13e75:
0000000000013e75         mov        rsi, qword [rsp+0x158+var_130]              ; CODE XREF=re_compile_internal+663
0000000000013e7a         mov        rdi, rbp
0000000000013e7d         call       re_string_realloc_buffers                   ; re_string_realloc_buffers
0000000000013e82         test       eax, eax
0000000000013e84         jne        loc_13ac0

0000000000013e8a         movzx      esi, byte [rsp+0x158+var_4D]
0000000000013e92         mov        ecx, dword [rbx+0xb4]
0000000000013e98         test       sil, sil
0000000000013e9b         je         loc_13a4f

0000000000013ea1         jmp        loc_13a42

                     loc_13ea6:
0000000000013ea6         mov        dword [rsp+0x158+var_10C], 0xc              ; CODE XREF=re_compile_internal+197, re_compile_internal+450, re_compile_internal+461, re_compile_internal+1833
0000000000013eae         jmp        loc_13b1c

                     loc_13eb3:
0000000000013eb3         mov        esi, 0x1                                    ; argument "__size" for method j_calloc, CODE XREF=re_compile_internal+429
0000000000013eb8         mov        edi, 0x20                                   ; argument "__nmemb" for method j_calloc
0000000000013ebd         call       j_calloc                                    ; calloc
0000000000013ec2         test       rax, rax
0000000000013ec5         mov        qword [rbx+0x78], rax
0000000000013ec9         je         loc_13ea6

0000000000013ecb         xor        r12d, r12d
0000000000013ece         xor        ebp, ebp
0000000000013ed0         mov        r13d, 0x1

                     loc_13ed6:
0000000000013ed6         xor        r15d, r15d                                  ; CODE XREF=re_compile_internal+1937
0000000000013ed9         nop        dword [rax]

                     loc_13ee0:
0000000000013ee0         lea        r14d, dword [rbp+r15]                       ; CODE XREF=re_compile_internal+1922
0000000000013ee5         mov        edi, r14d                                   ; argument "__c" for method j_btowc
0000000000013ee8         call       j_btowc                                     ; btowc
0000000000013eed         cmp        eax, 0xffffffff
0000000000013ef0         je         loc_13f05

0000000000013ef2         mov        rsi, qword [rbx+0x78]
0000000000013ef6         mov        rdi, r13
0000000000013ef9         mov        ecx, r15d
0000000000013efc         shl        rdi, cl
0000000000013eff         add        rsi, r12
0000000000013f02         or         qword [rsi], rdi

                     loc_13f05:
0000000000013f05         test       r14d, 0xffffff80                            ; CODE XREF=re_compile_internal+1872
0000000000013f0c         jne        loc_13f1a

0000000000013f0e         cmp        eax, r14d
0000000000013f11         je         loc_13f1a

0000000000013f13         or         byte [rbx+0xb0], 0x8

                     loc_13f1a:
0000000000013f1a         add        r15, 0x1                                    ; CODE XREF=re_compile_internal+1900, re_compile_internal+1905
0000000000013f1e         cmp        r15, 0x40
0000000000013f22         jne        loc_13ee0

0000000000013f24         add        ebp, 0x40
0000000000013f27         add        r12, 0x8
0000000000013f2b         cmp        ebp, 0x100
0000000000013f31         jne        loc_13ed6

0000000000013f33         jmp        loc_1395e

                     loc_13f38:
0000000000013f38         and        ecx, 0x8                                    ; CODE XREF=re_compile_internal+1731
0000000000013f3b         jne        loc_14852

0000000000013f41         mov        rax, qword [rdx+0x20]
0000000000013f45         mov        rcx, qword [rax+0x38]
0000000000013f49         mov        rax, qword [r13+0x18]
0000000000013f4d         mov        qword [rax+rdi*8], rcx
0000000000013f51         mov        r15, qword [rdx+8]
0000000000013f55         xor        edi, edi                                    ; CODE XREF=sub_14050+155
0000000000013f57         test       r15, r15
0000000000013f5a         je         loc_13f6b

                     loc_13f5c:
0000000000013f5c         mov        rdx, r15                                    ; CODE XREF=re_compile_internal+2017
0000000000013f5f         jmp        loc_13e58
0000000000013f64         align      8

                     loc_13f68:
0000000000013f68         mov        rdx, rax                                    ; CODE XREF=re_compile_internal+2028

                     loc_13f6b:
0000000000013f6b         mov        r15, qword [rdx+0x10]                       ; CODE XREF=re_compile_internal+1978
0000000000013f6f         test       r15, r15
0000000000013f72         sete       cl
0000000000013f75         cmp        r15, rdi
0000000000013f78         sete       al
0000000000013f7b         or         cl, al
0000000000013f7d         mov        byte [rsp+0x158+var_148], cl
0000000000013f81         je         loc_13f5c

0000000000013f83         mov        rax, qword [rdx]
0000000000013f86         mov        rdi, rdx
0000000000013f89         test       rax, rax
0000000000013f8c         jne        loc_13f68

0000000000013f8e         xor        r14d, r14d
0000000000013f91         xor        r15d, r15d
0000000000013f94         nop        dword [rax]

                     loc_13f98:
0000000000013f98         mov        rdx, qword [r13+0x10]                       ; CODE XREF=sub_14120+201
0000000000013f9c         cmp        rdx, r15
0000000000013f9f         je         loc_13fc6

                     loc_13fa1:
0000000000013fa1         lea        r10, qword [r15+r15*2]                      ; CODE XREF=re_compile_internal+2084, re_compile_internal+2101, sub_14120+233
0000000000013fa5         mov        rax, qword [r13+0x30]
0000000000013fa9         shl        r10, 0x3
0000000000013fad         cmp        qword [rax+r10+8], 0x0
0000000000013fb3         je         loc_141b8

0000000000013fb9         mov        rdx, qword [r13+0x10]
0000000000013fbd         add        r15, 0x1
0000000000013fc1         cmp        rdx, r15
0000000000013fc4         jne        loc_13fa1

                     loc_13fc6:
0000000000013fc6         test       r14b, r14b                                  ; CODE XREF=re_compile_internal+2047
0000000000013fc9         je         loc_1420e

                     loc_13fcf:
0000000000013fcf         xor        r14d, r14d                                  ; CODE XREF=sub_14120+221
0000000000013fd2         xor        r15d, r15d
0000000000013fd5         jmp        loc_13fa1
0000000000013fd7         or         byte [r13+0xb0], 0x1
0000000000013fdf         mov        r15, qword [rdx+8]
0000000000013fe3         test       r15, r15
0000000000013fe6         je         sub_14120+1241
0000000000013fec         mov        rax, qword [r15+0x18]
0000000000013ff0         mov        rcx, qword [rax+0x38]
0000000000013ff4         mov        rax, qword [rdx+0x10]                       ; CODE XREF=sub_14120+1249
0000000000013ff8         test       rax, rax
0000000000013ffb         je         sub_14120+1228
0000000000014001         mov        rax, qword [rax+0x18]
0000000000014005         mov        r9, qword [rax+0x38]
0000000000014009         test       rcx, rcx                                    ; CODE XREF=sub_14120+1236
000000000001400c         js         sub_147d0+161
0000000000014012         test       r9, r9
0000000000014015         js         sub_147d0+99
000000000001401b         mov        rax, qword [r13+0x28]
000000000001401f         lea        rdi, qword [rdi+rdi*2]
0000000000014023         mov        qword [rsp+0x38], rsi
0000000000014028         mov        qword [rsp+0x30], r9
000000000001402d         mov        qword [rsp+0x18], rcx
0000000000014032         mov        qword [rsp+0x10], rdx
0000000000014037         lea        r10, qword [rax+rdi*8]
000000000001403b         mov        edi, 0x10
0000000000014040         mov        qword [r10], 0x2
0000000000014047         mov        qword [rsp], r10
000000000001404b         call       j_malloc                                    ; malloc


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_14050:
0000000000014050         mov        r10, qword [rsp+0]
0000000000014054         test       rax, rax
0000000000014057         mov        rdx, qword [rsp+16]
000000000001405c         mov        rcx, qword [rsp+24]
0000000000014061         mov        r9, qword [rsp+48]
0000000000014066         mov        rsi, qword [rsp+56]
000000000001406b         mov        qword [r10+0x10], rax
000000000001406f         je         sub_14120+490

0000000000014075         cmp        rcx, r9
0000000000014078         je         loc_1464d

000000000001407e         mov        qword [r10+8], 0x2
0000000000014086         jl         loc_14634

000000000001408c         mov        qword [rax], r9
000000000001408f         mov        qword [rax+8], rcx
0000000000014093         jmp        re_compile_internal+1973
                        ; endp
0000000000014098         mov        rax, qword [rdx+0x20]
000000000001409c         lea        rcx, qword [rdi+rdi*2]
00000000000140a0         mov        edi, 0x8
00000000000140a5         mov        qword [rsp+0x10], rsi
00000000000140aa         mov        qword [rsp], rdx
00000000000140ae         mov        r14, qword [rax+0x38]
00000000000140b2         mov        rax, qword [r13+0x28]
00000000000140b6         lea        r15, qword [rax+rcx*8]
00000000000140ba         mov        qword [r15], 0x1
00000000000140c1         mov        qword [r15+8], 0x1
00000000000140c9         call       j_malloc                                    ; malloc
00000000000140ce         test       rax, rax
00000000000140d1         mov        qword [r15+0x10], rax
00000000000140d5         mov        rdx, qword [rsp]
00000000000140d9         mov        rsi, qword [rsp+0x10]
00000000000140de         je         sub_14730+88
00000000000140e4         mov        qword [rax], r14
00000000000140e7         mov        r15, qword [rdx+8]
00000000000140eb         jmp        re_compile_internal+1973


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_140f0:
00000000000140f0         cmp        qword [rdx+0x20], 0x0
00000000000140f5         je         re_compile_internal+1969

00000000000140fb         lea        rcx, qword [__PRETTY_FUNCTION__.6981]       ; argument "__function" for method j___assert_fail, "link_nfa_nodes"
0000000000014102         lea        rsi, qword [aCoreutils831li_16aa0]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/regcomp.c"
0000000000014109         lea        rdi, qword [aNodenextNull]                  ; argument "__assertion" for method j___assert_fail, "node->next == NULL"
0000000000014110         mov        edx, 0x59f                                  ; argument "__line" for method j___assert_fail
0000000000014115         call       j___assert_fail                             ; __assert_fail
                        ; endp
000000000001411a         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_14120:
0000000000014120         mov        rax, qword [rdx+0x20]
0000000000014124         mov        r15, qword [rax+0x38]
0000000000014128         mov        rax, qword [r13+0x18]
000000000001412c         mov        qword [rax+rdi*8], r15
0000000000014130         cmp        byte [rdx+0x30], 0x4
0000000000014134         jne        re_compile_internal+1969

000000000001413a         mov        rax, qword [r13+0x28]
000000000001413e         lea        rcx, qword [rdi+rdi*2]
0000000000014142         mov        edi, 0x8                                    ; argument "__size" for method j_malloc
0000000000014147         mov        qword [rsp+24], rsi
000000000001414c         mov        qword [rsp+16], rdx
0000000000014151         lea        rcx, qword [rax+rcx*8]
0000000000014155         mov        qword [rcx], 0x1
000000000001415c         mov        qword [rcx+8], 0x1
0000000000014164         mov        qword [rsp+0], rcx
0000000000014168         call       j_malloc                                    ; malloc
000000000001416d         mov        rcx, qword [rsp+0]
0000000000014171         test       rax, rax
0000000000014174         mov        rdx, qword [rsp+16]
0000000000014179         mov        rsi, qword [rsp+24]
000000000001417e         mov        qword [rcx+0x10], rax
0000000000014182         je         sub_147d0                                   ; sub_147d0

0000000000014188         mov        qword [rax], r15
000000000001418b         mov        r15, qword [rdx+8]
000000000001418f         jmp        re_compile_internal+1973
                        ; endp

                     loc_14194:
0000000000014194         mov        qword [rsp+0x158+var_A8], rsi               ; CODE XREF=re_compile_internal+985
000000000001419c         mov        qword [rsp+0x158+var_A0], rsi
00000000000141a4         mov        dword [rsp+0x158+var_10C], 0x0
00000000000141ac         jmp        loc_13bf8
00000000000141b1         align      8

                     loc_141b8:
00000000000141b8         mov        ecx, 0x1                                    ; CODE XREF=re_compile_internal+2067
00000000000141bd         mov        rdx, r15
00000000000141c0         mov        rsi, r13
00000000000141c3         mov        rdi, r12
00000000000141c6         mov        qword [rsp+0x158+var_158], r10
00000000000141ca         call       calc_eclosure_iter                          ; calc_eclosure_iter
00000000000141cf         test       eax, eax
00000000000141d1         jne        loc_13ac0

00000000000141d7         mov        rax, qword [r13+0x30]
00000000000141db         mov        r10, qword [rsp+0x158+var_158]
00000000000141df         add        r15, 0x1
00000000000141e3         cmp        qword [rax+r10+8], 0x0
00000000000141e9         jne        loc_13f98

00000000000141ef         mov        rdi, qword [rsp+0x158+var_E8]               ; argument "__ptr" for method j_free
00000000000141f4         call       j_free                                      ; free
00000000000141f9         cmp        qword [r13+0x10], r15
00000000000141fd         je         loc_13fcf

0000000000014203         movzx      r14d, byte [rsp+0x158+var_148]
0000000000014209         jmp        loc_13fa1

                     loc_1420e:
000000000001420e         mov        rax, qword [rsp+0x158+var_150]              ; CODE XREF=re_compile_internal+2089
0000000000014213         test       byte [rax+0x38], 0x10
0000000000014217         jne        loc_1422a

0000000000014219         cmp        qword [rax+0x30], 0x0
000000000001421e         je         loc_1422a

0000000000014220         test       byte [r13+0xb0], 0x1
0000000000014228         jne        loc_14238

                     loc_1422a:
000000000001422a         cmp        qword [r13+0x98], 0x0                       ; CODE XREF=sub_14120+247, sub_14120+254
0000000000014232         je         loc_1432b

                     loc_14238:
0000000000014238         lea        rdi, qword [rdx+rdx*2]                      ; CODE XREF=sub_14120+264
000000000001423c         mov        qword [rsp+0x158+var_158], rdx
0000000000014240         shl        rdi, 0x3                                    ; argument "__size" for method j_malloc
0000000000014244         call       j_malloc                                    ; malloc
0000000000014249         test       rax, rax
000000000001424c         mov        qword [r13+0x38], rax
0000000000014250         je         loc_1479c

0000000000014256         mov        rdx, qword [rsp+0x158+var_158]
000000000001425a         xor        esi, esi
000000000001425c         xor        ecx, ecx
000000000001425e         test       rdx, rdx
0000000000014261         jne        loc_14274

0000000000014263         jmp        loc_1432b
0000000000014268         align      16

                     loc_14270:
0000000000014270         mov        rax, qword [r13+0x38]                       ; CODE XREF=sub_14120+373

                     loc_14274:
0000000000014274         pxor       xmm0, xmm0                                  ; CODE XREF=sub_14120+321
0000000000014278         add        rax, rsi
000000000001427b         add        rcx, 0x1
000000000001427f         mov        qword [rax+0x10], 0x0
0000000000014287         add        rsi, 0x18
000000000001428b         movups     xmmword [rax], xmm0
000000000001428e         mov        rax, qword [r13+0x10]
0000000000014292         cmp        rcx, rax
0000000000014295         jb         loc_14270

0000000000014297         test       rax, rax
000000000001429a         je         loc_1432b

00000000000142a0         mov        rax, qword [r13+0x30]
00000000000142a4         mov        qword [rsp+0x158+var_140], 0x0
00000000000142ad         mov        qword [rsp+0x158+var_148], 0x0

                     loc_142b6:
00000000000142b6         mov        rcx, qword [rsp+0x158+var_140]              ; CODE XREF=sub_14120+521
00000000000142bb         lea        rdx, qword [rax+rcx]
00000000000142bf         cmp        qword [rdx+8], 0x0
00000000000142c4         mov        rcx, qword [rdx+0x10]
00000000000142c8         jle        loc_14314

00000000000142ca         xor        r15d, r15d
00000000000142cd         jmp        loc_142e8
00000000000142cf         align      16

                     loc_142d0:
00000000000142d0         mov        rax, qword [r13+0x30]                       ; CODE XREF=sub_14120+488
00000000000142d4         mov        rdx, qword [rsp+0x158+var_140]
00000000000142d9         add        r15, 0x1
00000000000142dd         mov        rcx, qword [rsp+0x158+var_158]
00000000000142e1         cmp        r15, qword [rax+rdx+8]
00000000000142e6         jge        loc_14314

                     loc_142e8:
00000000000142e8         mov        rax, qword [rcx+r15*8]                      ; CODE XREF=sub_14120+429
00000000000142ec         mov        qword [rsp+0x158+var_158], rcx
00000000000142f0         lea        rsi, qword [rax+rax*2]
00000000000142f4         mov        rax, qword [r13+0x38]
00000000000142f8         lea        rdi, qword [rax+rsi*8]
00000000000142fc         mov        rsi, qword [rsp+0x158+var_148]
0000000000014301         call       re_node_set_insert_last                     ; re_node_set_insert_last
0000000000014306         test       al, al
0000000000014308         jne        loc_142d0

000000000001430a         mov        eax, 0xc                                    ; CODE XREF=sub_14730+103
000000000001430f         jmp        loc_13ac0

                     loc_14314:
0000000000014314         add        qword [rsp+0x158+var_148], 0x1              ; CODE XREF=sub_14120+424, sub_14120+454
000000000001431a         add        qword [rsp+0x158+var_140], 0x18
0000000000014320         mov        rdx, qword [rsp+0x158+var_148]
0000000000014325         cmp        rdx, qword [r13+0x10]
0000000000014329         jb         loc_142b6

                     loc_1432b:
000000000001432b         movzx      eax, byte [rbx+0xb0]                        ; CODE XREF=sub_14120+274, sub_14120+323, sub_14120+378
0000000000014332         mov        dword [rsp+0x158+var_10C], 0x0
000000000001433a         shr        al, 0x2
000000000001433d         cmp        qword [rsp+0x158+var_138], 0x0
0000000000014343         sete       dl
0000000000014346         and        al, dl
0000000000014348         jne        loc_1452f

                     loc_1434e:
000000000001434e         mov        rax, qword [rbx+0x68]                       ; CODE XREF=sub_14120+1049, sub_14730+32, sub_14730+48, sub_14730+65, sub_147d0+34, sub_147d0+89
0000000000014352         mov        rdi, r12
0000000000014355         mov        rax, qword [rax+0x18]
0000000000014359         mov        rax, qword [rax+0x38]
000000000001435d         lea        rdx, qword [rax+rax*2]
0000000000014361         mov        qword [rbx+0x90], rax
0000000000014368         mov        rax, qword [rbx+0x30]
000000000001436c         lea        rsi, qword [rax+rdx*8]
0000000000014370         call       re_node_set_init_copy                       ; re_node_set_init_copy
0000000000014375         test       eax, eax
0000000000014377         mov        r15d, eax
000000000001437a         mov        dword [rsp+0x158+var_108], eax
000000000001437e         jne        loc_1449f

0000000000014384         cmp        qword [rbx+0x98], 0x0
000000000001438c         jle        loc_14460

0000000000014392         mov        r9, qword [rsp+0x158+var_F0]
0000000000014397         test       r9, r9
000000000001439a         jle        loc_14460

00000000000143a0         xor        r10d, r10d
00000000000143a3         lea        r13, qword [r12+0x10]
00000000000143a8         jmp        loc_143bd
00000000000143aa         align      16

                     loc_143b0:
00000000000143b0         add        r10, 0x1                                    ; CODE XREF=sub_14120+695, sub_14120+711, sub_14120+774
00000000000143b4         cmp        r9, r10
00000000000143b7         jle        loc_14460

                     loc_143bd:
00000000000143bd         mov        rcx, qword [rsp+0x158+var_E8]               ; CODE XREF=sub_14120+648, sub_14120+818
00000000000143c2         mov        rsi, qword [rbx]
00000000000143c5         mov        r8, qword [rcx+r10*8]
00000000000143c9         mov        rdi, r8
00000000000143cc         shl        rdi, 0x4
00000000000143d0         add        rdi, rsi
00000000000143d3         cmp        byte [rdi+8], 0x4
00000000000143d7         jne        loc_143b0

00000000000143d9         xor        edx, edx
00000000000143db         jmp        loc_143e9
00000000000143dd         align      32

                     loc_143e0:
00000000000143e0         add        rdx, 0x1                                    ; CODE XREF=sub_14120+728, sub_14120+736
00000000000143e4         cmp        r9, rdx
00000000000143e7         je         loc_143b0

                     loc_143e9:
00000000000143e9         mov        rax, qword [rcx+rdx*8]                      ; CODE XREF=sub_14120+699
00000000000143ed         shl        rax, 0x4
00000000000143f1         add        rax, rsi
00000000000143f4         cmp        byte [rax+8], 0x9
00000000000143f8         jne        loc_143e0

00000000000143fa         mov        r11, qword [rdi]
00000000000143fd         cmp        qword [rax], r11
0000000000014400         jne        loc_143e0

0000000000014402         mov        rdx, qword [rbx+0x28]
0000000000014406         lea        rax, qword [r8+r8*2]
000000000001440a         mov        rsi, r13
000000000001440d         mov        rdi, r9
0000000000014410         lea        rax, qword [rdx+rax*8]
0000000000014414         mov        rax, qword [rax+0x10]
0000000000014418         mov        r11, qword [rax]
000000000001441b         mov        rdx, r11
000000000001441e         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
0000000000014423         test       rax, rax
0000000000014426         jne        loc_143b0

0000000000014428         mov        rax, qword [rbx+0x30]
000000000001442c         lea        rdx, qword [r11+r11*2]
0000000000014430         mov        rdi, r12
0000000000014433         lea        rsi, qword [rax+rdx*8]
0000000000014437         call       re_node_set_merge                           ; re_node_set_merge
000000000001443c         test       eax, eax
000000000001443e         jne        loc_14780

0000000000014444         mov        r9, qword [rsp+0x158+var_F0]
0000000000014449         mov        r10d, 0x1
000000000001444f         cmp        r9, r10
0000000000014452         jg         loc_143bd

0000000000014458         nop        dword [rax+rax]

                     loc_14460:
0000000000014460         mov        rdi, qword [rsp+0x158+var_130]              ; CODE XREF=sub_14120+620, sub_14120+634, sub_14120+663
0000000000014465         xor        ecx, ecx
0000000000014467         mov        rdx, r12
000000000001446a         mov        rsi, rbx
000000000001446d         call       re_acquire_state_context                    ; re_acquire_state_context
0000000000014472         test       rax, rax
0000000000014475         mov        qword [rbx+0x48], rax
0000000000014479         je         loc_145e2

000000000001447f         cmp        byte [rax+0x68], 0x0
0000000000014483         js         loc_14581

0000000000014489         mov        qword [rbx+0x60], rax
000000000001448d         mov        qword [rbx+0x58], rax
0000000000014491         mov        qword [rbx+0x50], rax

                     loc_14495:
0000000000014495         mov        rdi, qword [rsp+0x158+var_E8]               ; argument "__ptr" for method j_free, CODE XREF=sub_14120+1212
000000000001449a         call       j_free                                      ; free

                     loc_1449f:
000000000001449f         mov        rax, qword [rsp+0x158+var_150]              ; CODE XREF=sub_14120+606, sub_14120+1223, sub_14730+83
00000000000144a4         mov        dword [rsp+0x158+var_10C], r15d
00000000000144a9         mov        r13, qword [rax]
00000000000144ac         mov        rdi, qword [r13+0x70]
00000000000144b0         test       rdi, rdi
00000000000144b3         je         loc_144c8

00000000000144b5         nop        dword [rax]

                     loc_144b8:
00000000000144b8         mov        r12, qword [rdi]                            ; CODE XREF=sub_14120+934
00000000000144bb         call       j_free                                      ; free
00000000000144c0         test       r12, r12
00000000000144c3         mov        rdi, r12
00000000000144c6         jne        loc_144b8

                     loc_144c8:
00000000000144c8         mov        rdi, qword [r13+0x20]                       ; argument "__ptr" for method j_free, CODE XREF=sub_14120+915
00000000000144cc         mov        qword [r13+0x70], 0x0
00000000000144d4         mov        dword [r13+0x80], 0xf
00000000000144df         mov        qword [r13+0x68], 0x0
00000000000144e7         call       j_free                                      ; free
00000000000144ec         mov        qword [r13+0x20], 0x0
00000000000144f4         mov        rdi, rbp
00000000000144f7         call       re_string_destruct                          ; re_string_destruct
00000000000144fc         mov        eax, dword [rsp+0x158+var_10C]
0000000000014500         test       eax, eax
0000000000014502         je         loc_13b3c

0000000000014508         jmp        loc_13b1c

                     loc_1450d:
000000000001450d         mov        dword [rsp+0x158+var_10C], 0xc              ; CODE XREF=re_compile_internal+1453, re_compile_internal+1462, re_compile_internal+1471, re_compile_internal+1480
0000000000014515         jmp        loc_13acc

                     loc_1451a:
000000000001451a         mov        rdi, rbp                                    ; CODE XREF=re_compile_internal+968
000000000001451d         call       build_wcs_buffer                            ; build_wcs_buffer
0000000000014522         mov        dword [rsp+0x158+var_10C], 0x0
000000000001452a         jmp        loc_13bf8

                     loc_1452f:
000000000001452f         mov        rcx, qword [rsp+0x158+var_150]              ; CODE XREF=sub_14120+552
0000000000014534         cmp        qword [rcx+0x28], 0x0
0000000000014539         jne        loc_1434e

000000000001453f         mov        r10, qword [rbx+0x10]
0000000000014543         test       r10, r10
0000000000014546         je         loc_147fa

000000000001454c         mov        rsi, qword [rbx]
000000000001454f         lea        r9, qword [switch_table_16f94+88]           ; 0x16fec
0000000000014556         xor        r8d, r8d
0000000000014559         xor        edx, edx
000000000001455b         mov        rcx, rsi
000000000001455e         cmp        byte [rcx+8], 0xc
0000000000014562         ja         loc_1482e

0000000000014568         movzx      edi, byte [rcx+8]
000000000001456c         movsxd     rdi, dword [r9+rdi*4]
0000000000014570         add        rdi, r9
0000000000014573         jmp        rdi
                        ; endp

                     loc_14575:
0000000000014575         xor        ebp, ebp                                    ; CODE XREF=re_compile_internal+238
0000000000014577         mov        esi, 0x1
000000000001457c         jmp        loc_138ad

                     loc_14581:
0000000000014581         mov        r14, qword [rsp+0x158+var_130]              ; CODE XREF=sub_14120+867
0000000000014586         mov        ecx, 0x1
000000000001458b         mov        rdx, r12
000000000001458e         mov        rsi, rbx
0000000000014591         mov        rdi, r14
0000000000014594         call       re_acquire_state_context                    ; re_acquire_state_context
0000000000014599         mov        ecx, 0x2
000000000001459e         mov        rdx, r12
00000000000145a1         mov        rsi, rbx
00000000000145a4         mov        rdi, r14
00000000000145a7         mov        qword [rbx+0x50], rax
00000000000145ab         call       re_acquire_state_context                    ; re_acquire_state_context
00000000000145b0         mov        ecx, 0x6
00000000000145b5         mov        qword [rbx+0x58], rax
00000000000145b9         mov        rdx, r12
00000000000145bc         mov        rsi, rbx
00000000000145bf         mov        rdi, r14
00000000000145c2         call       re_acquire_state_context                    ; re_acquire_state_context
00000000000145c7         cmp        qword [rbx+0x50], 0x0
00000000000145cc         mov        qword [rbx+0x60], rax
00000000000145d0         je         loc_145e2

00000000000145d2         cmp        qword [rbx+0x58], 0x0
00000000000145d7         je         loc_145e2

00000000000145d9         test       rax, rax
00000000000145dc         jne        loc_14495

                     loc_145e2:
00000000000145e2         mov        r15d, dword [rsp+0x158+var_108]             ; CODE XREF=sub_14120+857, sub_14120+1200, sub_14120+1207
00000000000145e7         jmp        loc_1449f
00000000000145ec         mov        rax, qword [rdx+0x20]                       ; CODE XREF=re_compile_internal+2139
00000000000145f0         mov        r9, qword [rax+0x38]
00000000000145f4         jmp        re_compile_internal+2153
00000000000145f9         mov        rax, qword [rdx+0x20]                       ; CODE XREF=re_compile_internal+2118
00000000000145fd         mov        rcx, qword [rax+0x38]
0000000000014601         jmp        re_compile_internal+2132

                     loc_14606:
0000000000014606         mov        rdi, rbx                                    ; argument "__ptr" for method j_realloc, CODE XREF=re_compile_internal+108
0000000000014609         mov        esi, 0xe8                                   ; argument "__size" for method j_realloc
000000000001460e         call       j_realloc                                   ; realloc
0000000000014613         test       rax, rax
0000000000014616         mov        rbx, rax
0000000000014619         je         loc_147b1

000000000001461f         mov        rax, qword [rsp+0x158+var_150]
0000000000014624         mov        qword [rax+8], 0xe8
000000000001462c         mov        qword [rax], rbx
000000000001462f         jmp        loc_13812

                     loc_14634:
0000000000014634         mov        qword [rax], rcx                            ; CODE XREF=sub_14050+54
0000000000014637         mov        qword [rax+8], r9
000000000001463b         jmp        re_compile_internal+1973
                        ; endp

                     loc_14640:
0000000000014640         mov        dword [rsp+0x158+var_10C], 0x0              ; CODE XREF=re_compile_internal+745, re_compile_internal+777
0000000000014648         jmp        loc_13bf8

                     loc_1464d:
000000000001464d         mov        qword [r10+8], 0x1                          ; CODE XREF=sub_14050+40
0000000000014655         mov        qword [rax], rcx
0000000000014658         jmp        re_compile_internal+1973
                        ; endp

                     loc_1465d:
000000000001465d         mov        rdi, rbp                                    ; CODE XREF=re_compile_internal+715
0000000000014660         call       build_upper_buffer                          ; build_upper_buffer
0000000000014665         mov        dword [rsp+0x158+var_10C], 0x0
000000000001466d         jmp        loc_13bf8

                     loc_14672:
0000000000014672         mov        dword [rsp+0x158+var_10C], 0xc              ; CODE XREF=re_compile_internal+1336
000000000001467a         mov        qword [rbx+0x68], 0x0
0000000000014682         jmp        loc_13acc

                     loc_14687:
0000000000014687         test       rax, rax                                    ; CODE XREF=re_compile_internal+1214
000000000001468a         je         loc_147bb

0000000000014690         lea        r13, qword [r15+0x70]
0000000000014694         lea        r12, qword [rsp+0x158+var_F8]
0000000000014699         sub        r15, 0xffffffffffffff80
000000000001469d         xor        ecx, ecx
000000000001469f         xor        edx, edx
00000000000146a1         mov        rsi, r15
00000000000146a4         mov        r8, r12
00000000000146a7         mov        rdi, r13
00000000000146aa         mov        qword [rsp+0x158+var_158], rax
00000000000146ae         mov        byte [rsp+0x158+var_F0], 0x2
00000000000146b3         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
00000000000146b8         mov        r9, qword [rsp+0x158+var_158]
00000000000146bc         mov        r11, rax
00000000000146bf         jmp        loc_13c9b

                     loc_146c4:
00000000000146c4         call       j_free                                      ; free, CODE XREF=re_compile_internal+1587, re_compile_internal+1623
00000000000146c9         mov        qword [r13+0xe0], 0x0
00000000000146d4         jmp        loc_13dfd
00000000000146d9         mov        r8d, eax

                     loc_146dc:
00000000000146dc         add        rdx, 0x1                                    ; CODE XREF=sub_14730+7, sub_14730+14, sub_14730+25, sub_14730+30, sub_14730+59, sub_147d0+28
00000000000146e0         add        rcx, 0x10
00000000000146e4         cmp        rdx, r10
00000000000146e7         jne        sub_14120+1086

00000000000146ed         or         r14b, r8b
00000000000146f0         je         sub_147d0+42

00000000000146f6         mov        rax, rdx
00000000000146f9         shl        rax, 0x4
00000000000146fd         add        rax, rsi
0000000000014700         jmp        loc_14718

                     loc_14702:
0000000000014702         cmp        dl, 0x5                                     ; CODE XREF=sub_14120+1535
0000000000014705         jne        loc_1470b

0000000000014707         mov        byte [rsi+8], 0x7

                     loc_1470b:
000000000001470b         add        rsi, 0x10                                   ; CODE XREF=sub_14120+1509, sub_14120+1540, sub_14120+1546
000000000001470f         cmp        rax, rsi
0000000000014712         je         loc_147f7

                     loc_14718:
0000000000014718         movzx      edx, byte [rsi+8]                           ; CODE XREF=sub_14120+1504
000000000001471c         cmp        dl, 0x1
000000000001471f         jne        loc_14702

0000000000014721         cmp        byte [rsi], 0x0
0000000000014724         jns        loc_1470b

0000000000014726         and        byte [rsi+0xa], 0xdf
000000000001472a         jmp        loc_1470b
000000000001472c         nop        dword [rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_14730:
0000000000014730         cmp        byte [rcx], 0x0
0000000000014733         cmovs      r14d, eax
0000000000014737         jmp        loc_146dc
0000000000014739         mov        edi, dword [rcx]
000000000001473b         cmp        edi, 0x20
000000000001473e         je         sub_14120+1468
0000000000014740         jbe        sub_147d0+25
0000000000014746         cmp        edi, 0x40
0000000000014749         je         sub_14120+1468
000000000001474b         add        edi, 0xffffff80
000000000001474e         je         sub_14120+1468
0000000000014750         jmp        sub_14120+558
0000000000014755         nop        dword [rax]
0000000000014758         mov        rdi, qword [rcx]
000000000001475b         cmp        qword [rdi+0x10], 0x0
0000000000014760         jne        sub_14120+558
0000000000014766         cmp        qword [rdi+0x18], 0x0
000000000001476b         je         sub_14120+1468
0000000000014771         jmp        sub_14120+558
0000000000014776         nop        word [cs:rax+rax]

                     loc_14780:
0000000000014780         mov        r15d, eax                                   ; CODE XREF=sub_14120+798
0000000000014783         jmp        loc_1449f
0000000000014788         mov        qword [r15+8], 0x0                          ; CODE XREF=sub_14050+142
0000000000014790         mov        qword [r15], 0x0
0000000000014797         jmp        sub_14120+490

                     loc_1479c:
000000000001479c         mov        rax, qword [rsp+0x158+var_150]              ; CODE XREF=sub_14120+304
00000000000147a1         mov        dword [rsp+0x158+var_10C], 0xc
00000000000147a9         mov        r13, qword [rax]
00000000000147ac         jmp        loc_13acc

                     loc_147b1:
00000000000147b1         mov        eax, 0xc                                    ; CODE XREF=sub_14120+1273
00000000000147b6         jmp        loc_13b3c

                     loc_147bb:
00000000000147bb         mov        rax, qword [rsp+0x158+var_150]              ; CODE XREF=sub_14120+1386
00000000000147c0         mov        qword [rbx+0x68], 0x0
00000000000147c8         mov        r13, qword [rax]
00000000000147cb         jmp        loc_13acc


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_147d0:
00000000000147d0         mov        qword [rcx+8], 0x0
00000000000147d8         mov        qword [rcx], 0x0
00000000000147df         mov        eax, 0xc
00000000000147e4         jmp        re_compile_internal+800
                        ; endp
00000000000147e9         cmp        edi, 0x10                                   ; CODE XREF=sub_14730+16
00000000000147ec         je         sub_14120+1468
00000000000147f2         jmp        sub_14120+558

                     loc_147f7:
00000000000147f7         mov        r14d, r8d                                   ; CODE XREF=sub_14120+1522
                        ; endp

                     loc_147fa:
00000000000147fa         cmp        qword [rbx+0x98], 0x0                       ; CODE XREF=sub_14120+1062
0000000000014802         movzx      edx, byte [rbx+0xb0]
0000000000014809         mov        dword [rbx+0xb4], 0x1
0000000000014813         setg       al
0000000000014816         and        edx, 0xfffffff9
0000000000014819         or         eax, r14d
000000000001481c         and        eax, 0x1
000000000001481f         add        eax, eax
0000000000014821         or         eax, edx
0000000000014823         mov        byte [rbx+0xb0], al
0000000000014829         jmp        loc_1434e

                     loc_1482e:
000000000001482e         call       j_abort                                     ; abort, CODE XREF=sub_14120+1090
                        ; endp
0000000000014833         lea        rcx, qword [__PRETTY_FUNCTION__.6981]       ; "link_nfa_nodes", CODE XREF=re_compile_internal+2165
000000000001483a         lea        rsi, qword [aCoreutils831li_16aa0]          ; "../coreutils-8.31/lib/regcomp.c"
0000000000014841         lea        rdi, qword [aRight1]                        ; "right > -1"
0000000000014848         mov        edx, 0x5b0
000000000001484d         call       j___assert_fail                             ; __assert_fail

                     loc_14852:
0000000000014852         lea        rcx, qword [__PRETTY_FUNCTION__.6981]       ; argument "__function" for method j___assert_fail, "link_nfa_nodes", CODE XREF=re_compile_internal+1947
0000000000014859         lea        rsi, qword [aCoreutils831li_16aa0]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/regcomp.c"
0000000000014860         lea        rdi, qword [aIsepsilonnodeN]                ; argument "__assertion" for method j___assert_fail, "!IS_EPSILON_NODE (node->token.type)"
0000000000014867         mov        edx, 0x5c2                                  ; argument "__line" for method j___assert_fail
000000000001486c         call       j___assert_fail                             ; __assert_fail
                        ; endp
0000000000014871         lea        rcx, qword [__PRETTY_FUNCTION__.6981]       ; "link_nfa_nodes", CODE XREF=re_compile_internal+2156
0000000000014878         lea        rsi, qword [aCoreutils831li_16aa0]          ; "../coreutils-8.31/lib/regcomp.c"
000000000001487f         lea        rdi, qword [aLeft1]                         ; "left > -1"
0000000000014886         mov        edx, 0x5af
000000000001488b         call       j___assert_fail                             ; __assert_fail

                     loc_14890:
0000000000014890         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=re_compile_internal+941
                        ; endp
0000000000014895         align      32                                          ; End of unwind block (FDE at 0x19964)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_re_compile_pattern:
00000000000148a0         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0x199b4), CODE XREF=docolon+159
00000000000148a4         mov        rcx, qword [rpl_re_syntax_options]          ; rpl_re_syntax_options
00000000000148ab         mov        r8, rdi
00000000000148ae         mov        rdi, rdx
00000000000148b1         mov        rax, rcx
00000000000148b4         shr        rax, 0x19
00000000000148b8         and        eax, 0x1
00000000000148bb         shl        eax, 0x4
00000000000148be         mov        edx, eax
00000000000148c0         movzx      eax, byte [rdi+0x38]
00000000000148c4         and        eax, 0xffffffef
00000000000148c7         or         eax, edx
00000000000148c9         mov        rdx, rsi
00000000000148cc         mov        rsi, r8
00000000000148cf         or         eax, 0xffffff80
00000000000148d2         mov        byte [rdi+0x38], al
00000000000148d5         call       re_compile_internal                         ; re_compile_internal
00000000000148da         test       eax, eax
00000000000148dc         je         loc_14908

00000000000148de         lea        rdx, qword [__re_error_msgid_idx]           ; __re_error_msgid_idx
00000000000148e5         cdqe
00000000000148e7         lea        rsi, qword [__re_error_msgid]               ; "Success"
00000000000148ee         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000148f0         add        rsi, qword [rdx+rax*8]                      ; argument "msgid" for method j_dcgettext
00000000000148f4         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000148f9         add        rsp, 0x8
00000000000148fd         jmp        j_dcgettext                                 ; dcgettext
                        ; endp
0000000000014902         align      8

                     loc_14908:
0000000000014908         xor        eax, eax                                    ; CODE XREF=rpl_re_compile_pattern+60
000000000001490a         add        rsp, 0x8
000000000001490e         ret
                        ; endp
000000000001490f         align      16                                          ; End of unwind block (FDE at 0x199b4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_re_set_syntax:
0000000000014910         mov        rax, qword [rpl_re_syntax_options]          ; Begin of unwind block (FDE at 0x199d4), rpl_re_syntax_options
0000000000014917         mov        qword [rpl_re_syntax_options], rdi          ; rpl_re_syntax_options
000000000001491e         ret
                        ; endp
000000000001491f         align      32                                          ; End of unwind block (FDE at 0x199d4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_re_compile_fastmap:
0000000000014920         push       r12                                         ; Begin of unwind block (FDE at 0x199e8), CODE XREF=re_search_stub+663, rpl_regcomp+183
0000000000014922         push       rbp
0000000000014923         xor        eax, eax
0000000000014925         push       rbx
0000000000014926         mov        rbp, qword [rdi+0x20]
000000000001492a         mov        rbx, rdi
000000000001492d         mov        r12, qword [rdi]
0000000000014930         lea        rdi, qword [rbp+8]
0000000000014934         mov        rcx, rbp
0000000000014937         mov        qword [rbp], 0x0
000000000001493f         mov        qword [rbp+0xf8], 0x0
000000000001494a         and        rdi, 0xfffffffffffffff8
000000000001494e         sub        rcx, rdi
0000000000014951         add        ecx, 0x100
0000000000014957         shr        ecx, 0x3
000000000001495a         rep stosq  qword [rdi], rax
000000000001495d         mov        rcx, rbp
0000000000014960         mov        rdi, rbx
0000000000014963         mov        rsi, qword [r12+0x48]
0000000000014968         lea        rdx, qword [rsi+0x18]
000000000001496c         add        rsi, 0x10
0000000000014970         call       re_compile_fastmap_iter.isra.30             ; re_compile_fastmap_iter.isra.30
0000000000014975         mov        rax, qword [r12+0x50]
000000000001497a         cmp        qword [r12+0x48], rax
000000000001497f         je         loc_14999

0000000000014981         lea        rdx, qword [rax+0x18]
0000000000014985         lea        rsi, qword [rax+0x10]
0000000000014989         mov        rcx, rbp
000000000001498c         mov        rdi, rbx
000000000001498f         call       re_compile_fastmap_iter.isra.30             ; re_compile_fastmap_iter.isra.30
0000000000014994         mov        rax, qword [r12+0x48]

                     loc_14999:
0000000000014999         mov        rsi, qword [r12+0x58]                       ; CODE XREF=rpl_re_compile_fastmap+95
000000000001499e         cmp        rsi, rax
00000000000149a1         je         loc_149bb

00000000000149a3         lea        rdx, qword [rsi+0x18]
00000000000149a7         mov        rcx, rbp
00000000000149aa         add        rsi, 0x10
00000000000149ae         mov        rdi, rbx
00000000000149b1         call       re_compile_fastmap_iter.isra.30             ; re_compile_fastmap_iter.isra.30
00000000000149b6         mov        rax, qword [r12+0x48]

                     loc_149bb:
00000000000149bb         mov        rsi, qword [r12+0x60]                       ; CODE XREF=rpl_re_compile_fastmap+129
00000000000149c0         cmp        rsi, rax
00000000000149c3         je         loc_149d8

00000000000149c5         lea        rdx, qword [rsi+0x18]
00000000000149c9         mov        rcx, rbp
00000000000149cc         add        rsi, 0x10
00000000000149d0         mov        rdi, rbx
00000000000149d3         call       re_compile_fastmap_iter.isra.30             ; re_compile_fastmap_iter.isra.30

                     loc_149d8:
00000000000149d8         or         byte [rbx+0x38], 0x8                        ; CODE XREF=rpl_re_compile_fastmap+163
00000000000149dc         xor        eax, eax
00000000000149de         pop        rbx
00000000000149df         pop        rbp
00000000000149e0         pop        r12
00000000000149e2         ret
                        ; endp
00000000000149e3         align      16                                          ; End of unwind block (FDE at 0x199e8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_8: int, 16
        ;    arg_0: int, 8
        ;    var_3C: int32_t, -60
        ;    var_40: int32_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96


                     re_search_stub:
00000000000149f0         push       r15                                         ; Begin of unwind block (FDE at 0x19a14), CODE XREF=re_search_2_stub+136, rpl_re_match+14, rpl_re_search+11
00000000000149f2         push       r14
00000000000149f4         mov        rax, r8
00000000000149f7         push       r13
00000000000149f9         push       r12
00000000000149fb         add        r8, rcx
00000000000149fe         push       rbp
00000000000149ff         push       rbx
0000000000014a00         sub        rsp, 0x38
0000000000014a04         test       rcx, rcx
0000000000014a07         mov        ebx, dword [rsp+0x68+arg_8]
0000000000014a0b         mov        r12, qword [rsp+0x68+arg_0]
0000000000014a10         mov        dword [rsp+0x68+var_40], ebx
0000000000014a14         js         loc_14d50

0000000000014a1a         cmp        rcx, rdx
0000000000014a1d         jg         loc_14d50

0000000000014a23         cmp        r8, rdx
0000000000014a26         mov        rbx, rcx
0000000000014a29         mov        r15, rdi
0000000000014a2c         jg         loc_14cb0

0000000000014a32         test       rax, rax
0000000000014a35         js         loc_14a40

0000000000014a37         cmp        rcx, r8
0000000000014a3a         jg         loc_14cb0

                     loc_14a40:
0000000000014a40         test       r8, r8                                      ; CODE XREF=re_search_stub+69
0000000000014a43         js         loc_14d28

0000000000014a49         test       rax, rax
0000000000014a4c         jns        loc_14a57

0000000000014a4e         cmp        rbx, r8
0000000000014a51         jle        loc_14d28

                     loc_14a57:
0000000000014a57         movzx      eax, byte [r15+0x38]                        ; CODE XREF=re_search_stub+92, re_search_stub+707
0000000000014a5c         mov        r13d, eax
0000000000014a5f         shr        r13b, 0x5
0000000000014a63         mov        edi, r13d
0000000000014a66         and        edi, 0x3
0000000000014a69         cmp        r8, rbx
0000000000014a6c         mov        dword [rsp+0x68+var_3C], edi
0000000000014a70         jle        loc_14a81

0000000000014a72         cmp        qword [r15+0x20], 0x0
0000000000014a77         je         loc_14a81

0000000000014a79         test       al, 0x8
0000000000014a7b         je         loc_14c70

                     loc_14a81:
0000000000014a81         test       al, 0x10                                    ; CODE XREF=re_search_stub+128, re_search_stub+135, re_search_stub+693, re_search_stub+849
0000000000014a83         jne        loc_14c50

0000000000014a89         test       r12, r12
0000000000014a8c         je         loc_14c50

0000000000014a92         and        eax, 0x6
0000000000014a95         mov        rcx, qword [r15+0x30]
0000000000014a99         cmp        al, 0x4
0000000000014a9b         je         loc_14c30

                     loc_14aa1:
0000000000014aa1         lea        r14, qword [rcx+1]                          ; CODE XREF=re_search_stub+583
0000000000014aa5         mov        r13, r14

                     loc_14aa8:
0000000000014aa8         mov        rdi, r14                                    ; CODE XREF=re_search_stub+595
0000000000014aab         shl        rdi, 0x4

                     loc_14aaf:
0000000000014aaf         mov        qword [rsp+0x68+var_48], r9                 ; CODE XREF=re_search_stub+628
0000000000014ab4         mov        qword [rsp+0x68+var_50], rdx
0000000000014ab9         mov        qword [rsp+0x68+var_58], rsi
0000000000014abe         mov        qword [rsp+0x68+var_60], r8
0000000000014ac3         call       j_malloc                                    ; malloc
0000000000014ac8         test       rax, rax
0000000000014acb         mov        rbp, rax
0000000000014ace         je         loc_14d60

0000000000014ad4         sub        rsp, 0x8
0000000000014ad8         mov        rcx, rbx
0000000000014adb         mov        rdi, r15
0000000000014ade         mov        eax, dword [rsp+0x70+var_3C]
0000000000014ae2         push       rax
0000000000014ae3         push       rbp
0000000000014ae4         push       r14
0000000000014ae6         mov        r9, qword [rsp+0x88+var_48]
0000000000014aeb         mov        r8, qword [rsp+0x88+var_60]
0000000000014af0         mov        rdx, qword [rsp+0x88+var_50]
0000000000014af5         mov        rsi, qword [rsp+0x88+var_58]
0000000000014afa         call       re_search_internal                          ; re_search_internal
0000000000014aff         add        rsp, 0x20
0000000000014b03         test       eax, eax
0000000000014b05         je         loc_14b38

0000000000014b07         cmp        eax, 0x1
0000000000014b0a         mov        r12, 0xffffffffffffffff
0000000000014b11         je         loc_14b1a

                     loc_14b13:
0000000000014b13         mov        r12, 0xfffffffffffffffe                     ; CODE XREF=re_search_stub+530

                     loc_14b1a:
0000000000014b1a         mov        rdi, rbp                                    ; argument "__ptr" for method j_free, CODE XREF=re_search_stub+289, re_search_stub+545, re_search_stub+567
0000000000014b1d         call       j_free                                      ; free

                     loc_14b22:
0000000000014b22         add        rsp, 0x38                                   ; CODE XREF=re_search_stub+871, re_search_stub+887
0000000000014b26         mov        rax, r12
0000000000014b29         pop        rbx
0000000000014b2a         pop        rbp
0000000000014b2b         pop        r12
0000000000014b2d         pop        r13
0000000000014b2f         pop        r14
0000000000014b31         pop        r15
0000000000014b33         ret
                        ; endp
0000000000014b34         align      8

                     loc_14b38:
0000000000014b38         test       r12, r12                                    ; CODE XREF=re_search_stub+277
0000000000014b3b         je         loc_14c08

0000000000014b41         movzx      eax, byte [r15+0x38]
0000000000014b46         lea        rdx, qword [r13+1]
0000000000014b4a         shr        al, 0x1
0000000000014b4c         and        eax, 0x3
0000000000014b4f         je         loc_14cc0

0000000000014b55         cmp        eax, 0x1
0000000000014b58         je         loc_14d70

0000000000014b5e         cmp        eax, 0x2
0000000000014b61         jne        loc_14e50

0000000000014b67         cmp        r14, qword [r12]
0000000000014b6b         ja         loc_14e31

0000000000014b71         mov        r9d, 0x2

                     loc_14b77:
0000000000014b77         test       r13, r13                                    ; CODE XREF=re_search_stub+812, re_search_stub+906, re_search_stub+1004
0000000000014b7a         jle        loc_14de8

0000000000014b80         mov        r8, qword [r12+8]
0000000000014b85         mov        rdi, qword [r12+0x10]
0000000000014b8a         lea        rsi, qword [r13*8]
0000000000014b92         mov        rdx, r13
0000000000014b95         xor        eax, eax
0000000000014b97         nop        word [rax+rax]

                     loc_14ba0:
0000000000014ba0         mov        rcx, qword [rbp+rax*2]                      ; CODE XREF=re_search_stub+457
0000000000014ba5         mov        qword [r8+rax], rcx
0000000000014ba9         mov        rcx, qword [rbp+rax*2+8]
0000000000014bae         mov        qword [rdi+rax], rcx
0000000000014bb2         add        rax, 0x8
0000000000014bb6         cmp        rsi, rax
0000000000014bb9         jne        loc_14ba0

                     loc_14bbb:
0000000000014bbb         cmp        qword [r12], rdx                            ; CODE XREF=re_search_stub+1021
0000000000014bbf         jbe        loc_14bed

0000000000014bc1         mov        rsi, qword [r12+0x10]
0000000000014bc6         mov        rcx, qword [r12+8]
0000000000014bcb         mov        rax, 0xffffffffffffffff
0000000000014bd2         nop        word [rax+rax]

                     loc_14bd8:
0000000000014bd8         mov        qword [rsi+rdx*8], rax                      ; CODE XREF=re_search_stub+507
0000000000014bdc         add        r13, 0x1
0000000000014be0         mov        qword [rcx+rdx*8], rax
0000000000014be4         cmp        r13, qword [r12]
0000000000014be8         mov        rdx, r13
0000000000014beb         jb         loc_14bd8

                     loc_14bed:
0000000000014bed         movzx      eax, byte [r15+0x38]                        ; CODE XREF=re_search_stub+463, re_search_stub+1037, re_search_stub+1053
0000000000014bf2         lea        r13d, dword [r9+r9]
0000000000014bf6         and        eax, 0xfffffff9
0000000000014bf9         or         eax, r13d
0000000000014bfc         test       al, 0x6
0000000000014bfe         mov        byte [r15+0x38], al
0000000000014c02         je         loc_14b13

                     loc_14c08:
0000000000014c08         cmp        byte [rsp+0x68+var_40], 0x0                 ; CODE XREF=re_search_stub+331
0000000000014c0d         mov        r12, qword [rbp]
0000000000014c11         je         loc_14b1a

0000000000014c17         cmp        r12, rbx
0000000000014c1a         jne        loc_14e12

0000000000014c20         mov        r12, qword [rbp+8]
0000000000014c24         sub        r12, rbx
0000000000014c27         jmp        loc_14b1a
0000000000014c2c         align      16

                     loc_14c30:
0000000000014c30         mov        r14, qword [r12]                            ; CODE XREF=re_search_stub+171
0000000000014c34         cmp        r14, rcx
0000000000014c37         ja         loc_14aa1

0000000000014c3d         test       r14, r14
0000000000014c40         mov        r13, r14
0000000000014c43         jg         loc_14aa8

0000000000014c49         nop        dword [rax]

                     loc_14c50:
0000000000014c50         mov        edi, 0x10                                   ; CODE XREF=re_search_stub+147, re_search_stub+156
0000000000014c55         mov        r14d, 0x1
0000000000014c5b         mov        r13d, 0x1
0000000000014c61         xor        r12d, r12d
0000000000014c64         jmp        loc_14aaf
0000000000014c69         align      16

                     loc_14c70:
0000000000014c70         mov        rdi, r15                                    ; CODE XREF=re_search_stub+139
0000000000014c73         mov        qword [rsp+0x68+var_48], r9
0000000000014c78         mov        qword [rsp+0x68+var_50], rdx
0000000000014c7d         mov        qword [rsp+0x68+var_58], rsi
0000000000014c82         mov        qword [rsp+0x68+var_60], r8
0000000000014c87         call       rpl_re_compile_fastmap                      ; rpl_re_compile_fastmap
0000000000014c8c         movzx      eax, byte [r15+0x38]
0000000000014c91         mov        r9, qword [rsp+0x68+var_48]
0000000000014c96         mov        rdx, qword [rsp+0x68+var_50]
0000000000014c9b         mov        rsi, qword [rsp+0x68+var_58]
0000000000014ca0         mov        r8, qword [rsp+0x68+var_60]
0000000000014ca5         jmp        loc_14a81
0000000000014caa         align      16

                     loc_14cb0:
0000000000014cb0         mov        r8, rdx                                     ; CODE XREF=re_search_stub+60, re_search_stub+74
0000000000014cb3         jmp        loc_14a57
0000000000014cb8         align      64

                     loc_14cc0:
0000000000014cc0         lea        r14, qword [rdx*8]                          ; CODE XREF=re_search_stub+351
0000000000014cc8         mov        qword [rsp+0x68+var_60], rdx
0000000000014ccd         mov        rdi, r14                                    ; argument "__size" for method j_malloc
0000000000014cd0         call       j_malloc                                    ; malloc
0000000000014cd5         test       rax, rax
0000000000014cd8         mov        qword [r12+8], rax
0000000000014cdd         mov        rdx, qword [rsp+0x68+var_60]
0000000000014ce2         je         loc_14dfa

0000000000014ce8         mov        rdi, r14                                    ; argument "__size" for method j_malloc
0000000000014ceb         mov        qword [rsp+0x68+var_60], rdx
0000000000014cf0         mov        qword [rsp+0x68+var_58], rax
0000000000014cf5         call       j_malloc                                    ; malloc
0000000000014cfa         test       rax, rax
0000000000014cfd         mov        qword [r12+0x10], rax
0000000000014d02         mov        rdx, qword [rsp+0x68+var_60]
0000000000014d07         mov        rcx, qword [rsp+0x68+var_58]
0000000000014d0c         je         loc_14df2

0000000000014d12         mov        qword [r12], rdx
0000000000014d16         mov        r9d, 0x1
0000000000014d1c         jmp        loc_14b77
0000000000014d21         align      8

                     loc_14d28:
0000000000014d28         movzx      eax, byte [r15+0x38]                        ; CODE XREF=re_search_stub+83, re_search_stub+97
0000000000014d2d         xor        r8d, r8d
0000000000014d30         mov        r13d, eax
0000000000014d33         shr        r13b, 0x5
0000000000014d37         mov        edi, r13d
0000000000014d3a         and        edi, 0x3
0000000000014d3d         mov        dword [rsp+0x68+var_3C], edi
0000000000014d41         jmp        loc_14a81
0000000000014d46         align      16

                     loc_14d50:
0000000000014d50         mov        r12, 0xffffffffffffffff                     ; CODE XREF=re_search_stub+36, re_search_stub+45
0000000000014d57         jmp        loc_14b22
0000000000014d5c         align      32

                     loc_14d60:
0000000000014d60         mov        r12, 0xfffffffffffffffe                     ; CODE XREF=re_search_stub+222
0000000000014d67         jmp        loc_14b22
0000000000014d6c         align      16

                     loc_14d70:
0000000000014d70         cmp        qword [r12], rdx                            ; CODE XREF=re_search_stub+360
0000000000014d74         mov        r9d, 0x1
0000000000014d7a         jae        loc_14b77

0000000000014d80         lea        rcx, qword [rdx*8]
0000000000014d88         mov        rdi, qword [r12+8]                          ; argument "__ptr" for method j_realloc
0000000000014d8d         mov        byte [rsp+0x68+var_50], r9b
0000000000014d92         mov        qword [rsp+0x68+var_58], rdx
0000000000014d97         mov        rsi, rcx                                    ; argument "__size" for method j_realloc
0000000000014d9a         mov        qword [rsp+0x68+var_60], rcx
0000000000014d9f         call       j_realloc                                   ; realloc
0000000000014da4         test       rax, rax
0000000000014da7         mov        r14, rax
0000000000014daa         je         loc_14dfa

0000000000014dac         mov        rcx, qword [rsp+0x68+var_60]
0000000000014db1         mov        rdi, qword [r12+0x10]                       ; argument "__ptr" for method j_realloc
0000000000014db6         mov        rsi, rcx                                    ; argument "__size" for method j_realloc
0000000000014db9         call       j_realloc                                   ; realloc
0000000000014dbe         test       rax, rax
0000000000014dc1         mov        rdx, qword [rsp+0x68+var_58]
0000000000014dc6         movzx      r9d, byte [rsp+0x68+var_50]
0000000000014dcc         je         loc_14e02

0000000000014dce         mov        qword [r12+8], r14
0000000000014dd3         mov        qword [r12+0x10], rax
0000000000014dd8         mov        qword [r12], rdx
0000000000014ddc         jmp        loc_14b77
0000000000014de1         align      8

                     loc_14de8:
0000000000014de8         xor        edx, edx                                    ; CODE XREF=re_search_stub+394
0000000000014dea         xor        r13d, r13d
0000000000014ded         jmp        loc_14bbb

                     loc_14df2:
0000000000014df2         mov        rdi, rcx                                    ; argument "__ptr" for method j_free, CODE XREF=re_search_stub+796
0000000000014df5         call       j_free                                      ; free

                     loc_14dfa:
0000000000014dfa         xor        r9d, r9d                                    ; CODE XREF=re_search_stub+754, re_search_stub+954
0000000000014dfd         jmp        loc_14bed

                     loc_14e02:
0000000000014e02         mov        rdi, r14                                    ; argument "__ptr" for method j_free, CODE XREF=re_search_stub+988
0000000000014e05         call       j_free                                      ; free
0000000000014e0a         xor        r9d, r9d
0000000000014e0d         jmp        loc_14bed

                     loc_14e12:
0000000000014e12         lea        rcx, qword [__PRETTY_FUNCTION__.7847]       ; argument "__function" for method j___assert_fail, "re_search_stub", CODE XREF=re_search_stub+554
0000000000014e19         lea        rsi, qword [aCoreutils831li_16a80]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/regexec.c"
0000000000014e20         lea        rdi, qword [aPmatch0rmsoSta]                ; argument "__assertion" for method j___assert_fail, "pmatch[0].rm_so == start"
0000000000014e27         mov        edx, 0x1be                                  ; argument "__line" for method j___assert_fail
0000000000014e2c         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_14e31:
0000000000014e31         lea        rcx, qword [__PRETTY_FUNCTION__.7859]       ; argument "__function" for method j___assert_fail, "re_copy_regs", CODE XREF=re_search_stub+379
0000000000014e38         lea        rsi, qword [aCoreutils831li_16a80]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/regexec.c"
0000000000014e3f         lea        rdi, qword [aRegsnumregsNre]                ; argument "__assertion" for method j___assert_fail, "regs->num_regs >= nregs"
0000000000014e46         mov        edx, 0x1fb                                  ; argument "__line" for method j___assert_fail
0000000000014e4b         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_14e50:
0000000000014e50         lea        rcx, qword [__PRETTY_FUNCTION__.7859]       ; argument "__function" for method j___assert_fail, "re_copy_regs", CODE XREF=re_search_stub+369
0000000000014e57         lea        rsi, qword [aCoreutils831li_16a80]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/regexec.c"
0000000000014e5e         lea        rdi, qword [aRegsallocatedR]                ; argument "__assertion" for method j___assert_fail, "regs_allocated == REGS_FIXED"
0000000000014e65         mov        edx, 0x1f9                                  ; argument "__line" for method j___assert_fail
0000000000014e6a         call       j___assert_fail                             ; __assert_fail
                        ; endp
0000000000014e6f         align      16                                          ; End of unwind block (FDE at 0x19a14)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_18: int, 32
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_0: int, 8
        ;    var_3C: int32_t, -60
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80


                     re_search_2_stub:
0000000000014e70         push       r15                                         ; Begin of unwind block (FDE at 0x19a74), CODE XREF=rpl_re_match_2+16, rpl_re_search_2+18
0000000000014e72         push       r14
0000000000014e74         push       r13
0000000000014e76         push       r12
0000000000014e78         mov        r12, rdi
0000000000014e7b         push       rbp
0000000000014e7c         push       rbx
0000000000014e7d         mov        rbp, r8
0000000000014e80         mov        rbx, rdx
0000000000014e83         mov        rdx, rbp
0000000000014e86         sub        rsp, 0x28
0000000000014e8a         shr        rdx, 0x3f
0000000000014e8e         mov        rax, qword [rsp+0x58+arg_10]
0000000000014e93         mov        edi, edx
0000000000014e95         mov        r8d, dword [rsp+0x58+arg_18]
0000000000014e9a         shr        rax, 0x3f
0000000000014e9e         or         dil, al
0000000000014ea1         jne        loc_14f70

0000000000014ea7         test       rbx, rbx
0000000000014eaa         js         loc_14f70

0000000000014eb0         mov        r15, rbx
0000000000014eb3         add        r15, rbp
0000000000014eb6         jo         loc_14f70

0000000000014ebc         test       rbp, rbp
0000000000014ebf         mov        r14, rcx
0000000000014ec2         mov        rcx, r9
0000000000014ec5         je         loc_14f80

0000000000014ecb         xor        r13d, r13d
0000000000014ece         test       rbx, rbx
0000000000014ed1         mov        qword [rsp+0x58+var_50], rsi
0000000000014ed6         jne        loc_14f20

                     loc_14ed8:
0000000000014ed8         movzx      r8d, r8b                                    ; CODE XREF=re_search_2_stub+247, re_search_2_stub+278
0000000000014edc         mov        rdx, r15
0000000000014edf         mov        rsi, r14
0000000000014ee2         push       r8
0000000000014ee4         push       qword [rsp+0x60+arg_8]
0000000000014ee8         mov        rdi, r12
0000000000014eeb         mov        r9, qword [rsp+0x68+arg_10]
0000000000014ef3         mov        r8, qword [rsp+0x68+arg_0]
0000000000014ef8         call       re_search_stub                              ; re_search_stub
0000000000014efd         mov        rdi, r13                                    ; argument "__ptr" for method j_free
0000000000014f00         mov        rbx, rax
0000000000014f03         call       j_free                                      ; free
0000000000014f08         pop        rax
0000000000014f09         pop        rdx

                     loc_14f0a:
0000000000014f0a         add        rsp, 0x28                                   ; CODE XREF=re_search_2_stub+263
0000000000014f0e         mov        rax, rbx
0000000000014f11         pop        rbx
0000000000014f12         pop        rbp
0000000000014f13         pop        r12
0000000000014f15         pop        r13
0000000000014f17         pop        r14
0000000000014f19         pop        r15
0000000000014f1b         ret
                        ; endp
0000000000014f1c         align      32

                     loc_14f20:
0000000000014f20         mov        rdi, r15                                    ; argument "__size" for method j_malloc, CODE XREF=re_search_2_stub+102
0000000000014f23         mov        dword [rsp+0x58+var_3C], r8d
0000000000014f28         mov        qword [rsp+0x58+var_48], r9
0000000000014f2d         call       j_malloc                                    ; malloc
0000000000014f32         test       rax, rax
0000000000014f35         mov        r13, rax
0000000000014f38         je         loc_14f70

0000000000014f3a         mov        rsi, qword [rsp+0x58+var_50]                ; argument "__src" for method j_memcpy
0000000000014f3f         mov        rdx, rbx                                    ; argument "__n" for method j_memcpy
0000000000014f42         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
0000000000014f45         call       j_memcpy                                    ; memcpy
0000000000014f4a         lea        rdi, qword [r13+rbx]                        ; argument "__dest" for method j_memcpy
0000000000014f4f         mov        rsi, r14                                    ; argument "__src" for method j_memcpy
0000000000014f52         mov        rdx, rbp                                    ; argument "__n" for method j_memcpy
0000000000014f55         mov        r14, r13
0000000000014f58         call       j_memcpy                                    ; memcpy
0000000000014f5d         mov        rcx, qword [rsp+0x58+var_48]
0000000000014f62         mov        r8d, dword [rsp+0x58+var_3C]
0000000000014f67         jmp        loc_14ed8
0000000000014f6c         align      16

                     loc_14f70:
0000000000014f70         mov        rbx, 0xfffffffffffffffe                     ; CODE XREF=re_search_2_stub+49, re_search_2_stub+58, re_search_2_stub+70, re_search_2_stub+200
0000000000014f77         jmp        loc_14f0a
0000000000014f79         align      128

                     loc_14f80:
0000000000014f80         mov        r14, rsi                                    ; CODE XREF=re_search_2_stub+85
0000000000014f83         xor        r13d, r13d
0000000000014f86         jmp        loc_14ed8
0000000000014f8b         align      16                                          ; End of unwind block (FDE at 0x19a74)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_regcomp:
0000000000014f90         mov        eax, edx                                    ; Begin of unwind block (FDE at 0x19acc)
0000000000014f92         push       r14
0000000000014f94         push       r13
0000000000014f96         and        eax, 0x1
0000000000014f99         push       r12
0000000000014f9b         push       rbp
0000000000014f9c         cmp        eax, 0x1
0000000000014f9f         push       rbx
0000000000014fa0         mov        rbx, rdi
0000000000014fa3         sbb        r14, r14
0000000000014fa6         mov        qword [rdi], 0x0
0000000000014fad         mov        qword [rdi+8], 0x0
0000000000014fb5         and        r14d, 0xfd4fca
0000000000014fbc         mov        qword [rdi+0x10], 0x0
0000000000014fc4         mov        edi, 0x100                                  ; argument "__size" for method j_malloc
0000000000014fc9         mov        r12, rsi
0000000000014fcc         mov        ebp, edx
0000000000014fce         add        r14, 0x3b2fc
0000000000014fd5         call       j_malloc                                    ; malloc
0000000000014fda         test       rax, rax
0000000000014fdd         mov        qword [rbx+0x20], rax
0000000000014fe1         je         loc_15090

0000000000014fe7         mov        r13, rbp
0000000000014fea         shl        r13, 0x15
0000000000014fee         and        r13d, 0x400000
0000000000014ff5         or         r13, r14
0000000000014ff8         test       bpl, 0x4
0000000000014ffc         jne        loc_15060

0000000000014ffe         and        byte [rbx+0x38], 0x7f

                     loc_15002:
0000000000015002         movzx      edx, byte [rbx+0x38]                        ; CODE XREF=rpl_regcomp+223
0000000000015006         shr        ebp, 0x3
0000000000015009         mov        rdi, r12                                    ; argument "__s" for method j_strlen
000000000001500c         and        ebp, 0x1
000000000001500f         mov        qword [rbx+0x28], 0x0
0000000000015017         shl        ebp, 0x4
000000000001501a         and        edx, 0xffffffef
000000000001501d         or         ebp, edx
000000000001501f         mov        byte [rbx+0x38], bpl
0000000000015023         call       j_strlen                                    ; strlen
0000000000015028         mov        rcx, r13
000000000001502b         mov        rdx, rax
000000000001502e         mov        rsi, r12
0000000000015031         mov        rdi, rbx
0000000000015034         call       re_compile_internal                         ; re_compile_internal
0000000000015039         cmp        eax, 0x10
000000000001503c         mov        ebp, eax
000000000001503e         je         loc_15078

0000000000015040         test       eax, eax
0000000000015042         jne        loc_1507d

0000000000015044         mov        rdi, rbx
0000000000015047         call       rpl_re_compile_fastmap                      ; rpl_re_compile_fastmap

                     loc_1504c:
000000000001504c         pop        rbx                                         ; CODE XREF=rpl_regcomp+254
000000000001504d         mov        eax, ebp
000000000001504f         pop        rbp
0000000000015050         pop        r12
0000000000015052         pop        r13
0000000000015054         pop        r14
0000000000015056         ret
                        ; endp
0000000000015057         align      32

                     loc_15060:
0000000000015060         and        r13, 0xffffffffffffffbf                     ; CODE XREF=rpl_regcomp+108
0000000000015064         or         byte [rbx+0x38], 0x80
0000000000015068         or         r13, 0x100
000000000001506f         jmp        loc_15002
0000000000015071         align      8

                     loc_15078:
0000000000015078         mov        ebp, 0x8                                    ; CODE XREF=rpl_regcomp+174

                     loc_1507d:
000000000001507d         mov        rdi, qword [rbx+0x20]                       ; argument "__ptr" for method j_free, CODE XREF=rpl_regcomp+178
0000000000015081         call       j_free                                      ; free
0000000000015086         mov        qword [rbx+0x20], 0x0
000000000001508e         jmp        loc_1504c

                     loc_15090:
0000000000015090         mov        ebp, 0xc                                    ; CODE XREF=rpl_regcomp+81
0000000000015095         pop        rbx
0000000000015096         mov        eax, ebp
0000000000015098         pop        rbp
0000000000015099         pop        r12
000000000001509b         pop        r13
000000000001509d         pop        r14
000000000001509f         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_regerror:
00000000000150a0         push       r13                                         ; End of unwind block (FDE at 0x19acc), Begin of unwind block (FDE at 0x19b18)
00000000000150a2         push       r12
00000000000150a4         push       rbp
00000000000150a5         push       rbx
00000000000150a6         sub        rsp, 0x8
00000000000150aa         cmp        edi, 0x10
00000000000150ad         ja         loc_15110

00000000000150af         lea        rax, qword [__re_error_msgid_idx]           ; __re_error_msgid_idx
00000000000150b6         movsxd     rdi, edi
00000000000150b9         lea        rsi, qword [__re_error_msgid]               ; "Success"
00000000000150c0         mov        rbp, rdx
00000000000150c3         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000150c8         mov        r12, rcx
00000000000150cb         add        rsi, qword [rax+rdi*8]                      ; argument "msgid" for method j_dcgettext
00000000000150cf         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000150d1         call       j_dcgettext                                 ; dcgettext
00000000000150d6         mov        rdi, rax                                    ; argument "__s" for method j_strlen
00000000000150d9         mov        r13, rax
00000000000150dc         call       j_strlen                                    ; strlen
00000000000150e1         test       r12, r12
00000000000150e4         lea        rbx, qword [rax+1]
00000000000150e8         je         loc_150fd

00000000000150ea         cmp        rbx, r12
00000000000150ed         mov        rdx, rbx
00000000000150f0         ja         loc_15118

                     loc_150f2:
00000000000150f2         mov        rsi, r13                                    ; argument "__src" for method j_memcpy, CODE XREF=rpl_regerror+131
00000000000150f5         mov        rdi, rbp                                    ; argument "__dest" for method j_memcpy
00000000000150f8         call       j_memcpy                                    ; memcpy

                     loc_150fd:
00000000000150fd         add        rsp, 0x8                                    ; CODE XREF=rpl_regerror+72
0000000000015101         mov        rax, rbx
0000000000015104         pop        rbx
0000000000015105         pop        rbp
0000000000015106         pop        r12
0000000000015108         pop        r13
000000000001510a         ret
                        ; endp
000000000001510b         align      16

                     loc_15110:
0000000000015110         call       j_abort                                     ; abort, CODE XREF=rpl_regerror+13
                        ; endp
0000000000015115         align      8

                     loc_15118:
0000000000015118         lea        rdx, qword [r12-1]                          ; CODE XREF=rpl_regerror+80
000000000001511d         mov        byte [rbp+r12-1], 0x0
0000000000015123         jmp        loc_150f2
0000000000015125         align      16                                          ; End of unwind block (FDE at 0x19b18)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_regfree:
0000000000015130         push       rbx                                         ; Begin of unwind block (FDE at 0x19b54), CODE XREF=docolon+315
0000000000015131         mov        rbx, rdi
0000000000015134         mov        rdi, qword [rdi]
0000000000015137         test       rdi, rdi
000000000001513a         je         loc_15141

000000000001513c         call       free_dfa_content                            ; free_dfa_content

                     loc_15141:
0000000000015141         mov        rdi, qword [rbx+0x20]                       ; argument "__ptr" for method j_free, CODE XREF=rpl_regfree+10
0000000000015145         mov        qword [rbx], 0x0
000000000001514c         mov        qword [rbx+8], 0x0
0000000000015154         call       j_free                                      ; free
0000000000015159         mov        rdi, qword [rbx+0x28]                       ; argument "__ptr" for method j_free
000000000001515d         mov        qword [rbx+0x20], 0x0
0000000000015165         call       j_free                                      ; free
000000000001516a         mov        qword [rbx+0x28], 0x0
0000000000015172         pop        rbx
0000000000015173         ret
                        ; endp
0000000000015174         align      128                                         ; End of unwind block (FDE at 0x19b54)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48


                     rpl_regexec:
0000000000015180         test       r8d, 0xfffffff8                             ; Begin of unwind block (FDE at 0x19b70)
0000000000015187         jne        loc_15218

000000000001518d         push       r13
000000000001518f         push       r12
0000000000015191         mov        r13, rdx
0000000000015194         push       rbp
0000000000015195         push       rbx
0000000000015196         mov        r12, rcx
0000000000015199         mov        ebx, r8d
000000000001519c         mov        rbp, rdi
000000000001519f         sub        rsp, 0x18
00000000000151a3         test       r8b, 0x4
00000000000151a7         jne        loc_151f8

00000000000151a9         mov        rdi, rsi                                    ; argument "__s" for method j_strlen
00000000000151ac         mov        qword [rsp+0x38+var_30], rsi
00000000000151b1         call       j_strlen                                    ; strlen
00000000000151b6         xor        ecx, ecx
00000000000151b8         test       byte [rbp+0x38], 0x10
00000000000151bc         mov        rdx, rax
00000000000151bf         mov        rsi, qword [rsp+0x38+var_30]
00000000000151c4         je         loc_15206

                     loc_151c6:
00000000000151c6         sub        rsp, 0x8                                    ; CODE XREF=rpl_regexec+132
00000000000151ca         push       rbx
00000000000151cb         push       0x0
00000000000151cd         push       0x0

                     loc_151cf:
00000000000151cf         mov        rdi, rbp                                    ; CODE XREF=rpl_regexec+143
00000000000151d2         mov        r9, rdx
00000000000151d5         mov        r8, rdx
00000000000151d8         call       re_search_internal                          ; re_search_internal
00000000000151dd         add        rsp, 0x20
00000000000151e1         test       eax, eax
00000000000151e3         setne      al
00000000000151e6         add        rsp, 0x18
00000000000151ea         pop        rbx
00000000000151eb         movzx      eax, al
00000000000151ee         pop        rbp
00000000000151ef         pop        r12
00000000000151f1         pop        r13
00000000000151f3         ret
                        ; endp
00000000000151f4         align      8

                     loc_151f8:
00000000000151f8         test       byte [rbp+0x38], 0x10                       ; CODE XREF=rpl_regexec+39
00000000000151fc         mov        rcx, qword [rcx]
00000000000151ff         mov        rdx, qword [r12+8]
0000000000015204         jne        loc_151c6

                     loc_15206:
0000000000015206         sub        rsp, 0x8                                    ; CODE XREF=rpl_regexec+68
000000000001520a         push       rbx
000000000001520b         push       r12
000000000001520d         push       r13
000000000001520f         jmp        loc_151cf
0000000000015211         align      8

                     loc_15218:
0000000000015218         mov        eax, 0x2                                    ; CODE XREF=rpl_regexec+7
000000000001521d         ret
                        ; endp
000000000001521e         align      32                                          ; End of unwind block (FDE at 0x19b70)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_re_match:
0000000000015220         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0x19bcc), CODE XREF=docolon+206
0000000000015224         mov        r9, rdx
0000000000015227         push       0x1
0000000000015229         push       r8
000000000001522b         xor        r8d, r8d
000000000001522e         call       re_search_stub                              ; re_search_stub
0000000000015233         add        rsp, 0x18
0000000000015237         ret
                        ; endp
0000000000015238         align      64                                          ; End of unwind block (FDE at 0x19bcc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_re_search:
0000000000015240         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0x19bec)
0000000000015244         push       0x0
0000000000015246         push       r9
0000000000015248         mov        r9, rdx
000000000001524b         call       re_search_stub                              ; re_search_stub
0000000000015250         add        rsp, 0x18
0000000000015254         ret
                        ; endp
0000000000015255         align      32                                          ; End of unwind block (FDE at 0x19bec)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_8: int, 16
        ;    arg_0: int, 8


                     rpl_re_match_2:
0000000000015260         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0x19c0c)
0000000000015264         push       0x1
0000000000015266         push       qword [rsp+0x10+arg_8]
000000000001526a         push       qword [rsp+0x18+arg_0]
000000000001526e         push       0x0
0000000000015270         call       re_search_2_stub                            ; re_search_2_stub
0000000000015275         add        rsp, 0x28
0000000000015279         ret
                        ; endp
000000000001527a         align      128                                         ; End of unwind block (FDE at 0x19c0c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_0: int, 8


                     rpl_re_search_2:
0000000000015280         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0x19c30)
0000000000015284         push       0x0
0000000000015286         push       qword [rsp+0x10+arg_10]
000000000001528a         push       qword [rsp+0x18+arg_8]
000000000001528e         push       qword [rsp+0x20+arg_0]
0000000000015292         call       re_search_2_stub                            ; re_search_2_stub
0000000000015297         add        rsp, 0x28
000000000001529b         ret
                        ; endp
000000000001529c         align      32                                          ; End of unwind block (FDE at 0x19c30)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_re_set_registers:
00000000000152a0         test       rdx, rdx                                    ; Begin of unwind block (FDE at 0x19c54)
00000000000152a3         jne        loc_152c8

00000000000152a5         and        byte [rdi+0x38], 0xf9
00000000000152a9         mov        qword [rsi], 0x0
00000000000152b0         mov        qword [rsi+0x10], 0x0
00000000000152b8         mov        qword [rsi+8], 0x0
00000000000152c0         ret
                        ; endp
00000000000152c1         align      8

                     loc_152c8:
00000000000152c8         movzx      eax, byte [rdi+0x38]                        ; CODE XREF=rpl_re_set_registers+3
00000000000152cc         and        eax, 0xfffffff9
00000000000152cf         or         eax, 0x2
00000000000152d2         mov        byte [rdi+0x38], al
00000000000152d5         mov        qword [rsi], rdx
00000000000152d8         mov        qword [rsi+8], rcx
00000000000152dc         mov        qword [rsi+0x10], r8
00000000000152e0         ret
                        ; endp
00000000000152e1         align      16                                          ; End of unwind block (FDE at 0x19c54)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stream:
00000000000152f0         push       r12                                         ; Begin of unwind block (FDE at 0x19c6c), CODE XREF=close_stdout+13, close_stdout+51
00000000000152f2         push       rbp
00000000000152f3         mov        rbp, rdi
00000000000152f6         push       rbx
00000000000152f7         call       j___fpending                                ; __fpending
00000000000152fc         mov        ebx, dword [rbp]
00000000000152ff         mov        rdi, rbp
0000000000015302         mov        r12, rax
0000000000015305         call       rpl_fclose                                  ; rpl_fclose
000000000001530a         and        ebx, 0x20
000000000001530d         test       ebx, ebx
000000000001530f         jne        loc_15328

0000000000015311         test       eax, eax
0000000000015313         je         loc_1531f

0000000000015315         test       r12, r12
0000000000015318         mov        eax, 0xffffffff
000000000001531d         je         loc_15358

                     loc_1531f:
000000000001531f         pop        rbx                                         ; CODE XREF=close_stream+35
0000000000015320         pop        rbp
0000000000015321         pop        r12
0000000000015323         ret
                        ; endp
0000000000015324         align      8

                     loc_15328:
0000000000015328         test       eax, eax                                    ; CODE XREF=close_stream+31
000000000001532a         jne        loc_15348

000000000001532c         call       j___errno_location                          ; __errno_location
0000000000015331         mov        dword [rax], 0x0
0000000000015337         mov        eax, 0xffffffff
000000000001533c         pop        rbx
000000000001533d         pop        rbp
000000000001533e         pop        r12
0000000000015340         ret
                        ; endp
0000000000015341         align      8

                     loc_15348:
0000000000015348         pop        rbx                                         ; CODE XREF=close_stream+58
0000000000015349         mov        eax, 0xffffffff
000000000001534e         pop        rbp
000000000001534f         pop        r12
0000000000015351         ret
                        ; endp
0000000000015352         align      8

                     loc_15358:
0000000000015358         call       j___errno_location                          ; __errno_location, CODE XREF=close_stream+45
000000000001535d         cmp        dword [rax], 0x9
0000000000015360         pop        rbx
0000000000015361         pop        rbp
0000000000015362         pop        r12
0000000000015364         setne      al
0000000000015367         movzx      eax, al
000000000001536a         neg        eax
000000000001536c         ret
                        ; endp
000000000001536d         align      16                                          ; End of unwind block (FDE at 0x19c6c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hard_locale:
0000000000015370         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0x19cbc), CODE XREF=rpl_mbrtowc+71
0000000000015374         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
0000000000015376         call       j_setlocale                                 ; setlocale
000000000001537b         mov        rdx, rax
000000000001537e         mov        eax, 0x1
0000000000015383         test       rdx, rdx
0000000000015386         je         loc_153a5

0000000000015388         lea        rdi, qword [__re_error_msgid+400]           ; 0x172f0
000000000001538f         mov        ecx, 0x2
0000000000015394         mov        rsi, rdx
0000000000015397         rep  cmpsb byte [rsi], byte [rdi]
0000000000015399         seta       cl
000000000001539c         sbb        cl, 0x0
000000000001539f         xor        eax, eax
00000000000153a1         test       cl, cl
00000000000153a3         jne        loc_153b0

                     loc_153a5:
00000000000153a5         add        rsp, 0x8                                    ; CODE XREF=hard_locale+22
00000000000153a9         ret
                        ; endp
00000000000153aa         align      16

                     loc_153b0:
00000000000153b0         lea        rdi, qword [aPosix]                         ; "POSIX", CODE XREF=hard_locale+51
00000000000153b7         mov        ecx, 0x6
00000000000153bc         mov        rsi, rdx
00000000000153bf         rep  cmpsb byte [rsi], byte [rdi]
00000000000153c1         seta       al
00000000000153c4         sbb        al, 0x0
00000000000153c6         test       al, al
00000000000153c8         setne      al
00000000000153cb         add        rsp, 0x8
00000000000153cf         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     locale_charset:
00000000000153d0         sub        rsp, 0x8                                    ; End of unwind block (FDE at 0x19cbc), Begin of unwind block (FDE at 0x19cdc), CODE XREF=gettext_quote.part.1+11
00000000000153d4         mov        edi, 0xe                                    ; argument "__item" for method j_nl_langinfo
00000000000153d9         call       j_nl_langinfo                               ; nl_langinfo
00000000000153de         test       rax, rax
00000000000153e1         je         loc_15400

00000000000153e3         cmp        byte [rax], 0x0
00000000000153e6         lea        rdx, qword [aAscii]                         ; "ASCII"
00000000000153ed         cmove      rax, rdx
00000000000153f1         add        rsp, 0x8
00000000000153f5         ret
                        ; endp
00000000000153f6         align      1024

                     loc_15400:
0000000000015400         lea        rax, qword [aAscii]                         ; "ASCII", CODE XREF=locale_charset+17
0000000000015407         add        rsp, 0x8
000000000001540b         ret
                        ; endp
000000000001540c         align      16                                          ; End of unwind block (FDE at 0x19cdc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fclose:
0000000000015410         push       r12                                         ; Begin of unwind block (FDE at 0x19cfc), CODE XREF=close_stream+21
0000000000015412         push       rbp
0000000000015413         push       rbx
0000000000015414         mov        rbx, rdi
0000000000015417         call       j_fileno                                    ; fileno
000000000001541c         test       eax, eax
000000000001541e         mov        rdi, rbx
0000000000015421         js         loc_15477

0000000000015423         call       j___freading                                ; __freading
0000000000015428         test       eax, eax
000000000001542a         jne        loc_15458

                     loc_1542c:
000000000001542c         mov        rdi, rbx                                    ; CODE XREF=rpl_fclose+98
000000000001542f         call       rpl_fflush                                  ; rpl_fflush
0000000000015434         test       eax, eax
0000000000015436         je         loc_15474

0000000000015438         call       j___errno_location                          ; __errno_location
000000000001543d         mov        r12d, dword [rax]
0000000000015440         mov        rdi, rbx                                    ; argument "__stream" for method j_fclose
0000000000015443         mov        rbp, rax
0000000000015446         call       j_fclose                                    ; fclose
000000000001544b         test       r12d, r12d
000000000001544e         jne        loc_15480

                     loc_15450:
0000000000015450         pop        rbx                                         ; CODE XREF=rpl_fclose+121
0000000000015451         pop        rbp
0000000000015452         pop        r12
0000000000015454         ret
                        ; endp
0000000000015455         align      8

                     loc_15458:
0000000000015458         mov        rdi, rbx                                    ; argument "__stream" for method j_fileno, CODE XREF=rpl_fclose+26
000000000001545b         call       j_fileno                                    ; fileno
0000000000015460         xor        esi, esi                                    ; argument "__offset" for method j_lseek
0000000000015462         mov        edx, 0x1                                    ; argument "__whence" for method j_lseek
0000000000015467         mov        edi, eax                                    ; argument "__fd" for method j_lseek
0000000000015469         call       j_lseek                                     ; lseek
000000000001546e         cmp        rax, 0xffffffffffffffff
0000000000015472         jne        loc_1542c

                     loc_15474:
0000000000015474         mov        rdi, rbx                                    ; CODE XREF=rpl_fclose+38

                     loc_15477:
0000000000015477         pop        rbx                                         ; CODE XREF=rpl_fclose+17
0000000000015478         pop        rbp
0000000000015479         pop        r12
000000000001547b         jmp        j_fclose                                    ; fclose
                        ; endp

                     loc_15480:
0000000000015480         mov        dword [rbp], r12d                           ; CODE XREF=rpl_fclose+62
0000000000015484         mov        eax, 0xffffffff
0000000000015489         jmp        loc_15450
000000000001548b         align      16                                          ; End of unwind block (FDE at 0x19cfc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fflush:
0000000000015490         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0x19d34), CODE XREF=rpl_fclose+31
0000000000015493         push       rbx
0000000000015494         mov        rbx, rdi
0000000000015497         je         loc_154aa

0000000000015499         call       j___freading                                ; __freading
000000000001549e         test       eax, eax
00000000000154a0         je         loc_154aa

00000000000154a2         test       dword [rbx], 0x100
00000000000154a8         jne        loc_154b8

                     loc_154aa:
00000000000154aa         mov        rdi, rbx                                    ; argument "__stream" for method j_fflush, CODE XREF=rpl_fflush+7, rpl_fflush+16
00000000000154ad         pop        rbx
00000000000154ae         jmp        j_fflush                                    ; fflush
                        ; endp
00000000000154b3         align      8

                     loc_154b8:
00000000000154b8         mov        rdi, rbx                                    ; CODE XREF=rpl_fflush+24
00000000000154bb         mov        edx, 0x1
00000000000154c0         xor        esi, esi
00000000000154c2         call       rpl_fseeko                                  ; rpl_fseeko
00000000000154c7         mov        rdi, rbx                                    ; argument "__stream" for method j_fflush
00000000000154ca         pop        rbx
00000000000154cb         jmp        j_fflush                                    ; fflush
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fseeko:
00000000000154d0         mov        rax, qword [rdi+8]                          ; End of unwind block (FDE at 0x19d34), Begin of unwind block (FDE at 0x19d54), CODE XREF=rpl_fflush+50
00000000000154d4         cmp        qword [rdi+0x10], rax
00000000000154d8         je         loc_154e0

                     j_j_fseeko:        // fseeko
00000000000154da         jmp        j_fseeko                                    ; fseeko, CODE XREF=j_j_fseeko+14, j_j_fseeko+21
                        ; endp
00000000000154df         align      32

                     loc_154e0:
00000000000154e0         mov        rax, qword [rdi+0x20]                       ; CODE XREF=rpl_fseeko+8
00000000000154e4         cmp        qword [rdi+0x28], rax
00000000000154e8         jne        j_j_fseeko                                  ; fseeko

00000000000154ea         cmp        qword [rdi+0x48], 0x0
00000000000154ef         jne        j_j_fseeko                                  ; fseeko

00000000000154f1         push       r12
00000000000154f3         push       rbp
00000000000154f4         mov        r12d, edx
00000000000154f7         push       rbx
00000000000154f8         mov        rbp, rsi
00000000000154fb         mov        rbx, rdi
00000000000154fe         call       j_fileno                                    ; fileno
0000000000015503         mov        edx, r12d                                   ; argument "__whence" for method j_lseek
0000000000015506         mov        rsi, rbp                                    ; argument "__offset" for method j_lseek
0000000000015509         mov        edi, eax                                    ; argument "__fd" for method j_lseek
000000000001550b         call       j_lseek                                     ; lseek
0000000000015510         cmp        rax, 0xffffffffffffffff
0000000000015514         je         loc_15522

0000000000015516         and        dword [rbx], 0xffffffef
0000000000015519         mov        qword [rbx+0x90], rax
0000000000015520         xor        eax, eax

                     loc_15522:
0000000000015522         pop        rbx                                         ; CODE XREF=j_j_fseeko+58
0000000000015523         pop        rbp
0000000000015524         pop        r12
0000000000015526         ret
                        ; endp
0000000000015527         align      16                                          ; End of unwind block (FDE at 0x19d54)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __libc_csu_init:
0000000000015530         push       r15                                         ; Begin of unwind block (FDE at 0x19d84), DATA XREF=_start+22
0000000000015532         push       r14
0000000000015534         mov        r15, rdx
0000000000015537         push       r13
0000000000015539         push       r12
000000000001553b         lea        r12, qword [__frame_dummy_init_array_entry] ; __frame_dummy_init_array_entry
0000000000015542         push       rbp
0000000000015543         lea        rbp, qword [__do_global_dtors_aux_fini_array_entry] ; __do_global_dtors_aux_fini_array_entry
000000000001554a         push       rbx
000000000001554b         mov        r13d, edi
000000000001554e         mov        r14, rsi
0000000000015551         sub        rbp, r12
0000000000015554         sub        rsp, 0x8
0000000000015558         sar        rbp, 0x3
000000000001555c         call       _init                                       ; _init
0000000000015561         test       rbp, rbp
0000000000015564         je         loc_15586

0000000000015566         xor        ebx, ebx
0000000000015568         nop        dword [rax+rax]

                     loc_15570:
0000000000015570         mov        rdx, r15                                    ; CODE XREF=__libc_csu_init+84
0000000000015573         mov        rsi, r14
0000000000015576         mov        edi, r13d
0000000000015579         call       qword [r12+rbx*8]
000000000001557d         add        rbx, 0x1
0000000000015581         cmp        rbp, rbx
0000000000015584         jne        loc_15570

                     loc_15586:
0000000000015586         add        rsp, 0x8                                    ; CODE XREF=__libc_csu_init+52
000000000001558a         pop        rbx
000000000001558b         pop        rbp
000000000001558c         pop        r12
000000000001558e         pop        r13
0000000000015590         pop        r14
0000000000015592         pop        r15
0000000000015594         ret
                        ; endp
0000000000015595         align      32                                          ; End of unwind block (FDE at 0x19d84)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __libc_csu_fini:
00000000000155a0         ret                                                    ; Begin of unwind block (FDE at 0x19dcc), DATA XREF=_start+15
                        ; endp
00000000000155a2         align      16                                          ; End of unwind block (FDE at 0x19dcc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     atexit:
00000000000155b0         mov        rdx, qword [__dso_handle]                   ; Begin of unwind block (FDE at 0x19de4), __dso_handle, CODE XREF=main+84
00000000000155b7         xor        esi, esi
00000000000155b9         jmp        j___cxa_atexit                              ; __cxa_atexit
                        ; endp
00000000000155be         db  0x00 ; '.'                                         ; End of unwind block (FDE at 0x19de4)
00000000000155bf         db  0x00 ; '.'


        ; Section .fini
        ; Range: [0x155c0; 0x155c9[ (9 bytes)
        ; File offset : [87488; 87497[ (9 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _fini:
00000000000155c0         sub        rsp, 0x8
00000000000155c4         add        rsp, 0x8
00000000000155c8         ret
                        ; endp
00000000000155c9         db  0x00 ; '.'
00000000000155ca         db  0x00 ; '.'
00000000000155cb         db  0x00 ; '.'
00000000000155cc         db  0x00 ; '.'
00000000000155cd         db  0x00 ; '.'
00000000000155ce         db  0x00 ; '.'
00000000000155cf         db  0x00 ; '.'
00000000000155d0         db  0x00 ; '.'
00000000000155d1         db  0x00 ; '.'
00000000000155d2         db  0x00 ; '.'
00000000000155d3         db  0x00 ; '.'
00000000000155d4         db  0x00 ; '.'
00000000000155d5         db  0x00 ; '.'
00000000000155d6         db  0x00 ; '.'
00000000000155d7         db  0x00 ; '.'
00000000000155d8         db  0x00 ; '.'
00000000000155d9         db  0x00 ; '.'
00000000000155da         db  0x00 ; '.'
00000000000155db         db  0x00 ; '.'
00000000000155dc         db  0x00 ; '.'
00000000000155dd         db  0x00 ; '.'
00000000000155de         db  0x00 ; '.'
00000000000155df         db  0x00 ; '.'


        ; Section .rodata
        ; Range: [0x155e0; 0x172fe[ (7454 bytes)
        ; File offset : [87520; 94974[ (7454 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

                     _IO_stdin_used:
00000000000155e0         db  0x01 ; '.'
00000000000155e1         db  0x00 ; '.'
00000000000155e2         db  0x02 ; '.'
00000000000155e3         db  0x00 ; '.'
00000000000155e4         db  0x00 ; '.'
00000000000155e5         db  0x00 ; '.'
00000000000155e6         db  0x00 ; '.'
00000000000155e7         db  0x00 ; '.'
                     aSyntaxErrorMis:
00000000000155e8         db         "syntax error: missing argument after %s", 0 ; DATA XREF=require_more_args+32
                     aCoreutils831li:
0000000000015610         db         "../coreutils-8.31/lib/mbuiter.h", 0        ; DATA XREF=mbuiter_multi_next.part.2+7, docolon+1070, docolon+1154, eval6+2860, eval6+2896, mbschr+591, mbschr+622, mbschr+653, mbslen+465, mbslen+501, mbslen+532
                     aTrySHelpForMor:
0000000000015630         db         "Try '%s --help' for more information.\n", 0 ; DATA XREF=usage+47
0000000000015657         align      8
                     aUsageSExpressi:
0000000000015658         db         "Usage: %s EXPRESSION\n  or:  %s OPTION\n", 0 ; DATA XREF=usage+93
000000000001567f         align      128
                     aHelpDisplayThi:
0000000000015680         db         "      --help     display this help and exit\n", 0 ; DATA XREF=usage+167
00000000000156ad         align      16
                     aVersionOutputV:
00000000000156b0         db         "      --version  output version information and exit\n", 0 ; DATA XREF=usage+204
00000000000156e6         align      8
                     aNprintTheValue:
00000000000156e8         db         "\nPrint the value of EXPRESSION to standard output.  A blank line below\nseparates increasing precedence groups.  EXPRESSION may be:\n\n  ARG1 | ARG2       ARG1 if it is neither null nor 0, otherwise ARG2\n\n  ARG1 & ARG2       ARG1 if neither argument is null o" ; DATA XREF=usage+241
00000000000157e8         db         "r 0, otherwise 0\n", 0
00000000000157fa         align      2048
                     aNArg1Arg2Arg1I:
0000000000015800         db         "\n  ARG1 < ARG2       ARG1 is less than ARG2\n  ARG1 <= ARG2      ARG1 is less than or equal to ARG2\n  ARG1 = ARG2       ARG1 is equal to ARG2\n  ARG1 != ARG2      ARG1 is unequal to ARG2\n  ARG1 >= ARG2      ARG1 is greater than or equal to ARG2\n  ARG1 > ARG2" ; DATA XREF=usage+278
0000000000015900         db         "       ARG1 is greater than ARG2\n", 0
0000000000015922         align      8
                     aNArg1Arg2Arith:
0000000000015928         db         "\n  ARG1 + ARG2       arithmetic sum of ARG1 and ARG2\n  ARG1 - ARG2       arithmetic difference of ARG1 and ARG2\n", 0 ; DATA XREF=usage+315
0000000000015999         align      32
                     aNArg1Arg2Arith_159a0:        // aNArg1Arg2Arith
00000000000159a0         db         "\n  ARG1 * ARG2       arithmetic product of ARG1 and ARG2\n  ARG1 / ARG2       arithmetic quotient of ARG1 divided by ARG2\n  ARG1 % ARG2       arithmetic remainder of ARG1 divided by ARG2\n", 0 ; DATA XREF=usage+352
0000000000015a5b         align      32
                     aNStringRegexpA:
0000000000015a60         db         "\n  STRING : REGEXP   anchored pattern match of REGEXP in STRING\n\n  match STRING REGEXP        same as STRING : REGEXP\n  substr STRING POS LENGTH   substring of STRING, POS counted from 1\n  index STRING CHARS         index in STRING where any CHARS is found" ; DATA XREF=usage+389
0000000000015b60         db         ", or 0\n  length STRING              length of STRING\n", 0
0000000000015b96         align      8
                     aTokenInterpret:
0000000000015b98         db         "  + TOKEN                    interpret TOKEN as a string, even if it is a\n                               keyword like 'match' or an operator like '/'\n\n  ( EXPRESSION )             value of EXPRESSION\n", 0 ; DATA XREF=usage+426
0000000000015c61         align      8
                     aNbewareThatMan:
0000000000015c68         db         "\nBeware that many operators need to be escaped or quoted for shells.\nComparisons are arithmetic if both ARGs are numbers, else lexicographical.\nPattern matches return the string matched between \( and \) or null; if\n\( and \) are not used, they return the " ; DATA XREF=usage+463
0000000000015d68         db         "number of characters matched or 0.\n", 0
0000000000015d8c         align      16
                     aNexitStatusIs0:
0000000000015d90         db         "\nExit status is 0 if EXPRESSION is neither null nor 0, 1 if EXPRESSION is null\nor 0, 2 if EXPRESSION is syntactically invalid, and 3 if an error occurred.\n", 0 ; DATA XREF=usage+500
0000000000015e2c         align      16
                     aHttpswwwgnuorg:
0000000000015e30         db         "https://www.gnu.org/software/coreutils/", 0 ; DATA XREF=usage+751, usage+847, usage+1004, usage+1118, emit_bug_reporting_address+61
                     aReportAnyTrans:
0000000000015e58         db         "Report any translation bugs to <https://translationproject.org/team/>\n", 0 ; DATA XREF=usage+949
0000000000015e9f         align      32
                     aOrAvailableLoc:
0000000000015ea0         db         "or available locally via: info '(coreutils) %s%s'\n", 0 ; DATA XREF=usage+890
0000000000015ed3         align      8
                     aErrorInRegular:
0000000000015ed8         db         "error in regular expression matcher", 0    ; DATA XREF=docolon+1094
0000000000015efc         align      256
                     aSyntaxErrorExp_15f00:        // aSyntaxErrorExp
0000000000015f00         db         "syntax error: expecting ')' after %s", 0   ; DATA XREF=eval6+2936
0000000000015f25         align      8
                     aSyntaxErrorExp:
0000000000015f28         db         "syntax error: expecting ')' instead of %s", 0 ; DATA XREF=eval6+236
0000000000015f52         align      8
                     aSyntaxErrorUne_15f58:        // aSyntaxErrorUne
0000000000015f58         db         "syntax error: unexpected argument %s", 0   ; DATA XREF=main+358
                     aItercurwc0:
0000000000015f7d         db         "iter->cur.wc == 0", 0                      ; DATA XREF=mbuiter_multi_next.part.2+14, mbschr+660, mbslen+539
0000000000015f8f         db  0x65 ; 'e'                                         ; DATA XREF=main+119, usage+525, usage+840, usage+935, usage+1092, usage+1111
0000000000015f90         db  0x78 ; 'x'
0000000000015f91         db  0x70 ; 'p'
0000000000015f92         db  0x72 ; 'r'
0000000000015f93         db  0x00 ; '.'
0000000000015f94         db  0x5b ; '['                                         ; DATA XREF=usage+537
0000000000015f95         db  0x00 ; '.'
                     aTestInvocation:
0000000000015f96         db         "test invocation", 0                        ; DATA XREF=usage+576
                     aMulticallInvoc:
0000000000015fa6         db         "Multi-call invocation", 0                  ; DATA XREF=usage+624
                     aSha224sum:
0000000000015fbc         db         "sha224sum", 0                              ; DATA XREF=usage+641
                     aSha2Utilities:
0000000000015fc6         db         "sha2 utilities", 0                         ; DATA XREF=usage+653
                     aSha256sum:
0000000000015fd5         db         "sha256sum", 0                              ; DATA XREF=usage+544
                     aSha384sum:
0000000000015fdf         db         "sha384sum", 0                              ; DATA XREF=usage+588
                     aSha512sum:
0000000000015fe9         db         "sha512sum", 0                              ; DATA XREF=usage+612
                     aNsOnlineHelpSn:
0000000000015ff3         db         "\n%s online help: <%s>\n", 0               ; DATA XREF=usage+730
000000000001600a         db  0x47 ; 'G'                                         ; DATA XREF=main+112, usage+758, usage+1011, emit_bug_reporting_address+68
000000000001600b         db  0x4e ; 'N'
000000000001600c         db  0x55 ; 'U'
000000000001600d         db  0x20 ; ' '
                     aCoreutils:
000000000001600e         db         "coreutils", 0                              ; DATA XREF=main+43, main+55, usage+600
0000000000016018         db  0x65 ; 'e'                                         ; DATA XREF=usage+797, usage+1050
0000000000016019         db  0x6e ; 'n'
000000000001601a         db  0x5f ; '_'                                         ; DATA XREF=sub_127b0+456
000000000001601b         db  0x00 ; '.'
                     aFullDocumentat:
000000000001601c         db         "Full documentation <%s%s>\n", 0            ; DATA XREF=usage+821, usage+1078
                     aMbsinitItersta:
0000000000016037         db         "mbsinit (&iter->state)", 0                 ; DATA XREF=docolon+1077, eval6+2867, mbschr+598, mbslen+472
                     aItercurptr0:
000000000001604e         db         "*iter->cur.ptr == '\0'", 0                 ; DATA XREF=docolon+1161, eval6+2903, mbschr+629, mbslen+508
0000000000016065         db  0x2b ; '+'                                         ; DATA XREF=eval6+12, eval3+125, parse_long_options+183, parse_gnu_standard_options_only+114
0000000000016066         db  0x00 ; '.'
                     aLength:
0000000000016067         db         "length", 0                                 ; DATA XREF=eval6+58
                     aMatch:
000000000001606e         db         "match", 0                                  ; DATA XREF=eval6+82
                     aIndex:
0000000000016074         db         "index", 0                                  ; DATA XREF=eval6+102
                     aSubstr:
000000000001607a         db         "substr", 0                                 ; DATA XREF=eval6+125
0000000000016081         db  0x28 ; '('                                         ; DATA XREF=eval6+150
0000000000016082         db  0x00 ; '.'
                     aSyntaxErrorUne:
0000000000016083         db         "syntax error: unexpected ')'", 0           ; DATA XREF=eval6+788
00000000000160a0         db  0x3a ; ':'                                         ; DATA XREF=eval5+11
00000000000160a1         db  0x00 ; '.'
00000000000160a2         db  0x2a ; '*'                                         ; DATA XREF=eval4+153
00000000000160a3         db  0x00 ; '.'
00000000000160a4         db  0x25 ; '%'                                         ; DATA XREF=eval4+200
00000000000160a5         db  0x00 ; '.'
                     aNonintegerArgu:
00000000000160a6         db         "non-integer argument", 0                   ; DATA XREF=eval4+253, eval3+180
                     aDivisionByZero:
00000000000160bb         db         "division by zero", 0                       ; DATA XREF=eval4+289
00000000000160cc         db  0x3c ; '<'                                         ; DATA XREF=eval2+132
00000000000160cd         db  0x00 ; '.'
00000000000160ce         db  0x3c ; '<'                                         ; DATA XREF=eval2+40
00000000000160cf         db  0x3d ; '='
00000000000160d0         db  0x00 ; '.'
00000000000160d1         db  0x3d ; '='                                         ; DATA XREF=eval2+480
00000000000160d2         db  0x3d ; '='
00000000000160d3         db  0x00 ; '.'
00000000000160d4         db  0x21 ; '!'                                         ; DATA XREF=eval2+496
00000000000160d5         db  0x3d ; '='                                         ; DATA XREF=eval2+384
00000000000160d6         db  0x00 ; '.'
00000000000160d7         db  0x3e ; '>'                                         ; DATA XREF=eval2+522
00000000000160d8         db  0x3d ; '='
00000000000160d9         db  0x00 ; '.'
00000000000160da         db  0x3e ; '>'                                         ; DATA XREF=eval2+548
00000000000160db         db  0x00 ; '.'
00000000000160dc         db  0x26 ; '&'                                         ; DATA XREF=eval1+19, eval1+134
00000000000160dd         db  0x00 ; '.'
00000000000160de         db  0x7c ; '|'                                         ; DATA XREF=eval+24, eval+139
00000000000160df         db  0x00 ; '.'
                     aUsrlocalsharel:
00000000000160e0         db         "/usr/local/share/locale", 0                ; DATA XREF=main+36
00000000000160f8         db  0x38 ; '8'                                         ; DATA XREF=main+105
00000000000160f9         db  0x2e ; '.'
00000000000160fa         db  0x33 ; '3'
00000000000160fb         db  0x31 ; '1'
00000000000160fc         db  0x00 ; '.'
                     aPaulEggert:
00000000000160fd         db         "Paul Eggert", 0                            ; DATA XREF=main+89
                     aJamesYoungman:
0000000000016109         db         "James Youngman", 0                         ; DATA XREF=main+127
                     aMikeParker:
0000000000016118         db         "Mike Parker", 0                            ; DATA XREF=main+140
0000000000016124         db  0x2d ; '-'                                         ; DATA XREF=main+172
0000000000016125         db  0x2d ; '-'                                         ; DATA XREF=eval3+32
0000000000016126         db  0x00 ; '.'
                     aMissingOperand:
0000000000016127         db         "missing operand", 0                        ; DATA XREF=main+400
0000000000016137         align      64
                     switch_table_16140:        // switch_table
0000000000016140         dd         eval4.loc_3c30-switch_table_16140, eval4.loc_3c20-switch_table_16140, eval4.loc_3c10-switch_table_16140, eval4.loc_3bf8-switch_table_16140 ; switch table used at 0x3bdb containing 6 entries, DATA XREF=eval2+253
0000000000016150         dd         eval4.loc_3be0-switch_table_16140, eval4.loc_3c40-switch_table_16140
0000000000016158         align      32
                     __PRETTY_FUNCTION__.7929:
0000000000016160         db         "mbuiter_multi_next", 0                     ; DATA XREF=mbuiter_multi_next.part.2, docolon+1063, docolon+1147, eval6+2853, eval6+2889
                     aWriteError:
0000000000016173         db         "write error", 0                            ; DATA XREF=close_stdout+67
                     aSS:
000000000001617f         db         "%s: %s", 0                                 ; DATA XREF=close_stdout+108
                     aHelp:
0000000000016186         db         "help", 0
                     aVersion:
000000000001618b         db         "version", 0
0000000000016193         db  0x00 ; '.'
0000000000016194         db  0x00 ; '.'
0000000000016195         db  0x00 ; '.'
0000000000016196         db  0x00 ; '.'
0000000000016197         db  0x00 ; '.'
0000000000016198         db  0x00 ; '.'
0000000000016199         db  0x00 ; '.'
000000000001619a         db  0x00 ; '.'
000000000001619b         db  0x00 ; '.'
000000000001619c         db  0x00 ; '.'
000000000001619d         db  0x00 ; '.'
000000000001619e         db  0x00 ; '.'
000000000001619f         db  0x00 ; '.'
                     is_basic_table:
00000000000161a0         db  0x00 ; '.'                                         ; DATA XREF=docolon+568, eval6+1105, eval6+1464, eval6+2152, is_basic+2, mbschr+122, mbslen+124
00000000000161a1         db  0x1a ; '.'
00000000000161a2         db  0x00 ; '.'
00000000000161a3         db  0x00 ; '.'
00000000000161a4         db  0xef ; '.'
00000000000161a5         db  0xff ; '.'
00000000000161a6         db  0xff ; '.'
00000000000161a7         db  0xff ; '.'
00000000000161a8         db  0xfe ; '.'
00000000000161a9         db  0xff ; '.'
00000000000161aa         db  0xff ; '.'
00000000000161ab         db  0xff ; '.'
00000000000161ac         db  0xfe ; '.'
00000000000161ad         db  0xff ; '.'
00000000000161ae         db  0xff ; '.'
00000000000161af         db  0x7f ; '.'
00000000000161b0         db  0x00 ; '.'
00000000000161b1         db  0x00 ; '.'
00000000000161b2         db  0x00 ; '.'
00000000000161b3         db  0x00 ; '.'
00000000000161b4         db  0x00 ; '.'
00000000000161b5         db  0x00 ; '.'
00000000000161b6         db  0x00 ; '.'
00000000000161b7         db  0x00 ; '.'
00000000000161b8         db  0x00 ; '.'
00000000000161b9         db  0x00 ; '.'
00000000000161ba         db  0x00 ; '.'
00000000000161bb         db  0x00 ; '.'
00000000000161bc         db  0x00 ; '.'
00000000000161bd         db  0x00 ; '.'
00000000000161be         db  0x00 ; '.'
00000000000161bf         db  0x00 ; '.'
                     __PRETTY_FUNCTION__.5021:
00000000000161c0         db         "mbuiter_multi_next", 0                     ; DATA XREF=mbschr+584, mbschr+615, mbschr+646
00000000000161d3         align      32
                     __PRETTY_FUNCTION__.5021_161e0:        // __PRETTY_FUNCTION__.5021
00000000000161e0         db         "mbuiter_multi_next", 0                     ; DATA XREF=mbslen+458, mbslen+494, mbslen+525
00000000000161f3         align      8
                     aANullArgv0WasP:
00000000000161f8         db         "A NULL argv[0] was passed through an exec system call.\n", 0 ; DATA XREF=set_program_name+132
                     aLibs:
0000000000016230         db         "/.libs/", 0                                ; DATA XREF=set_program_name+44
0000000000016238         db  0x6c ; 'l'                                         ; DATA XREF=set_program_name+68
0000000000016239         db  0x74 ; 't'
000000000001623a         db  0x2d ; '-'
000000000001623b         db  0x00 ; '.'
000000000001623c         db  0xe2 ; '.'                                         ; DATA XREF=gettext_quote.part.1+206
000000000001623d         db  0x80 ; '.'
000000000001623e         db  0x98 ; '.'
000000000001623f         db  0x00 ; '.'
0000000000016240         db  0xe2 ; '.'                                         ; DATA XREF=gettext_quote.part.1+213
0000000000016241         db  0x80 ; '.'
0000000000016242         db  0x99 ; '.'
0000000000016243         db  0x00 ; '.'
0000000000016244         db  0xa1 ; '.'                                         ; DATA XREF=gettext_quote.part.1+116
0000000000016245         db  0x07 ; '.'
0000000000016246         db  0x65 ; 'e'
0000000000016247         db  0x00 ; '.'
0000000000016248         db  0xa1 ; '.'                                         ; DATA XREF=gettext_quote.part.1+123
0000000000016249         db  0xaf ; '.'
000000000001624a         db  0x00 ; '.'
000000000001624b         db  0x22 ; '"'                                         ; DATA XREF=gettext_quote.part.1+32, sub_5050+1451, sub_5050+1493, sub_5050+2429
000000000001624c         db  0x00 ; '.'
000000000001624d         db  0x60 ; '`'                                         ; DATA XREF=sub_5050+1627, sub_5050+1654
000000000001624e         db  0x00 ; '.'
                     aLiteral:
000000000001624f         db         "literal", 0
                     aShell:
0000000000016257         db         "shell", 0
                     aShellalways:
000000000001625d         db         "shell-always", 0
000000000001626a         db  0x73 ; 's'
000000000001626b         db  0x68 ; 'h'
000000000001626c         db  0x65 ; 'e'
000000000001626d         db  0x6c ; 'l'
000000000001626e         db  0x6c ; 'l'
000000000001626f         db  0x2d ; '-'
                     aEscape:
0000000000016270         db         "escape", 0
                     aShellescapealw:
0000000000016277         db         "shell-escape-always", 0
000000000001628b         db  0x63 ; 'c'
000000000001628c         db  0x00 ; '.'
                     aCmaybe:
000000000001628d         db         "c-maybe", 0
                     aClocale:
0000000000016295         db         "clocale", 0
000000000001629d         align      32
                     switch_table_162a0:        // switch_table
00000000000162a0         dd         quotearg_buffer_restyled.loc_574a-switch_table_162a0, quotearg_buffer_restyled.loc_49a3-switch_table_162a0, quotearg_buffer_restyled.loc_5978-switch_table_162a0, quotearg_buffer_restyled.loc_5784-switch_table_162a0 ; switch table used at 0x49a1 containing 11 entries, DATA XREF=quotearg_buffer_restyled+128
00000000000162b0         dd         quotearg_buffer_restyled.loc_5574-switch_table_162a0, quotearg_buffer_restyled.loc_55d0-switch_table_162a0, quotearg_buffer_restyled.loc_5625-switch_table_162a0, quotearg_buffer_restyled.loc_566a-switch_table_162a0
00000000000162c0         dd         3 dup (quotearg_buffer_restyled.loc_56a4-switch_table_162a0)
00000000000162cc         db  0x54 ; 'T'                                         ; DATA XREF=quotearg_buffer_restyled+477
00000000000162cd         db  0xea ; '.'
00000000000162ce         db  0xfe ; '.'
00000000000162cf         db  0xff ; '.'
00000000000162d0         db  0x3c ; '<'
00000000000162d1         db  0xeb ; '.'
00000000000162d2         db  0xfe ; '.'
00000000000162d3         db  0xff ; '.'
00000000000162d4         db  0x3c ; '<'
00000000000162d5         db  0xeb ; '.'
00000000000162d6         db  0xfe ; '.'
00000000000162d7         db  0xff ; '.'
00000000000162d8         db  0x3c ; '<'
00000000000162d9         db  0xeb ; '.'
00000000000162da         db  0xfe ; '.'
00000000000162db         db  0xff ; '.'
00000000000162dc         db  0x3c ; '<'
00000000000162dd         db  0xeb ; '.'
00000000000162de         db  0xfe ; '.'
00000000000162df         db  0xff ; '.'
00000000000162e0         db  0x3c ; '<'
00000000000162e1         db  0xeb ; '.'
00000000000162e2         db  0xfe ; '.'
00000000000162e3         db  0xff ; '.'
00000000000162e4         db  0x3c ; '<'
00000000000162e5         db  0xeb ; '.'
00000000000162e6         db  0xfe ; '.'
00000000000162e7         db  0xff ; '.'
00000000000162e8         db  0x94 ; '.'
00000000000162e9         db  0xea ; '.'
00000000000162ea         db  0xfe ; '.'
00000000000162eb         db  0xff ; '.'
00000000000162ec         db  0x9c ; '.'
00000000000162ed         db  0xe9 ; '.'
00000000000162ee         db  0xfe ; '.'
00000000000162ef         db  0xff ; '.'
00000000000162f0         db  0x5c ; '\'
00000000000162f1         db  0xe9 ; '.'
00000000000162f2         db  0xfe ; '.'
00000000000162f3         db  0xff ; '.'
00000000000162f4         db  0x24 ; '$'
00000000000162f5         db  0xeb ; '.'
00000000000162f6         db  0xfe ; '.'
00000000000162f7         db  0xff ; '.'
00000000000162f8         db  0x14 ; '.'
00000000000162f9         db  0xeb ; '.'
00000000000162fa         db  0xfe ; '.'
00000000000162fb         db  0xff ; '.'
00000000000162fc         db  0x04 ; '.'
00000000000162fd         db  0xeb ; '.'
00000000000162fe         db  0xfe ; '.'
00000000000162ff         db  0xff ; '.'
0000000000016300         db  0xf4 ; '.'
0000000000016301         db  0xea ; '.'
0000000000016302         db  0xfe ; '.'
0000000000016303         db  0xff ; '.'
0000000000016304         db  0x3c ; '<'
0000000000016305         db  0xeb ; '.'
0000000000016306         db  0xfe ; '.'
0000000000016307         db  0xff ; '.'
0000000000016308         db  0x3c ; '<'
0000000000016309         db  0xeb ; '.'
000000000001630a         db  0xfe ; '.'
000000000001630b         db  0xff ; '.'
000000000001630c         db  0x3c ; '<'
000000000001630d         db  0xeb ; '.'
000000000001630e         db  0xfe ; '.'
000000000001630f         db  0xff ; '.'
0000000000016310         db  0x3c ; '<'
0000000000016311         db  0xeb ; '.'
0000000000016312         db  0xfe ; '.'
0000000000016313         db  0xff ; '.'
0000000000016314         db  0x3c ; '<'
0000000000016315         db  0xeb ; '.'
0000000000016316         db  0xfe ; '.'
0000000000016317         db  0xff ; '.'
0000000000016318         db  0x3c ; '<'
0000000000016319         db  0xeb ; '.'
000000000001631a         db  0xfe ; '.'
000000000001631b         db  0xff ; '.'
000000000001631c         db  0x3c ; '<'
000000000001631d         db  0xeb ; '.'
000000000001631e         db  0xfe ; '.'
000000000001631f         db  0xff ; '.'
0000000000016320         db  0x3c ; '<'
0000000000016321         db  0xeb ; '.'
0000000000016322         db  0xfe ; '.'
0000000000016323         db  0xff ; '.'
0000000000016324         db  0x3c ; '<'
0000000000016325         db  0xeb ; '.'
0000000000016326         db  0xfe ; '.'
0000000000016327         db  0xff ; '.'
0000000000016328         db  0x3c ; '<'
0000000000016329         db  0xeb ; '.'
000000000001632a         db  0xfe ; '.'
000000000001632b         db  0xff ; '.'
000000000001632c         db  0x3c ; '<'
000000000001632d         db  0xeb ; '.'
000000000001632e         db  0xfe ; '.'
000000000001632f         db  0xff ; '.'
0000000000016330         db  0x3c ; '<'
0000000000016331         db  0xeb ; '.'
0000000000016332         db  0xfe ; '.'
0000000000016333         db  0xff ; '.'
0000000000016334         db  0x3c ; '<'
0000000000016335         db  0xeb ; '.'
0000000000016336         db  0xfe ; '.'
0000000000016337         db  0xff ; '.'
0000000000016338         db  0x3c ; '<'
0000000000016339         db  0xeb ; '.'
000000000001633a         db  0xfe ; '.'
000000000001633b         db  0xff ; '.'
000000000001633c         db  0x3c ; '<'
000000000001633d         db  0xeb ; '.'
000000000001633e         db  0xfe ; '.'
000000000001633f         db  0xff ; '.'
0000000000016340         db  0x3c ; '<'
0000000000016341         db  0xeb ; '.'
0000000000016342         db  0xfe ; '.'
0000000000016343         db  0xff ; '.'
0000000000016344         db  0x3c ; '<'
0000000000016345         db  0xeb ; '.'
0000000000016346         db  0xfe ; '.'
0000000000016347         db  0xff ; '.'
0000000000016348         db  0x3c ; '<'
0000000000016349         db  0xeb ; '.'
000000000001634a         db  0xfe ; '.'
000000000001634b         db  0xff ; '.'
000000000001634c         db  0xe4 ; '.'
000000000001634d         db  0xea ; '.'
000000000001634e         db  0xfe ; '.'
000000000001634f         db  0xff ; '.'
0000000000016350         db  0xd4 ; '.'
0000000000016351         db  0xea ; '.'
0000000000016352         db  0xfe ; '.'
0000000000016353         db  0xff ; '.'
0000000000016354         db  0xd4 ; '.'
0000000000016355         db  0xea ; '.'
0000000000016356         db  0xfe ; '.'
0000000000016357         db  0xff ; '.'
0000000000016358         db  0xa4 ; '.'
0000000000016359         db  0xea ; '.'
000000000001635a         db  0xfe ; '.'
000000000001635b         db  0xff ; '.'
000000000001635c         db  0xd4 ; '.'
000000000001635d         db  0xea ; '.'
000000000001635e         db  0xfe ; '.'
000000000001635f         db  0xff ; '.'
0000000000016360         db  0x7c ; '|'
0000000000016361         db  0xea ; '.'
0000000000016362         db  0xfe ; '.'
0000000000016363         db  0xff ; '.'
0000000000016364         db  0xd4 ; '.'
0000000000016365         db  0xea ; '.'
0000000000016366         db  0xfe ; '.'
0000000000016367         db  0xff ; '.'
0000000000016368         db  0x37 ; '7'
0000000000016369         db  0xe9 ; '.'
000000000001636a         db  0xfe ; '.'
000000000001636b         db  0xff ; '.'
000000000001636c         db  0xd4 ; '.'
000000000001636d         db  0xea ; '.'
000000000001636e         db  0xfe ; '.'
000000000001636f         db  0xff ; '.'
0000000000016370         db  0xd4 ; '.'
0000000000016371         db  0xea ; '.'
0000000000016372         db  0xfe ; '.'
0000000000016373         db  0xff ; '.'
0000000000016374         db  0xd4 ; '.'
0000000000016375         db  0xea ; '.'
0000000000016376         db  0xfe ; '.'
0000000000016377         db  0xff ; '.'
0000000000016378         db  0x7c ; '|'
0000000000016379         db  0xea ; '.'
000000000001637a         db  0xfe ; '.'
000000000001637b         db  0xff ; '.'
000000000001637c         db  0x7c ; '|'
000000000001637d         db  0xea ; '.'
000000000001637e         db  0xfe ; '.'
000000000001637f         db  0xff ; '.'
0000000000016380         db  0x7c ; '|'
0000000000016381         db  0xea ; '.'
0000000000016382         db  0xfe ; '.'
0000000000016383         db  0xff ; '.'
0000000000016384         db  0x7c ; '|'
0000000000016385         db  0xea ; '.'
0000000000016386         db  0xfe ; '.'
0000000000016387         db  0xff ; '.'
0000000000016388         db  0x7c ; '|'
0000000000016389         db  0xea ; '.'
000000000001638a         db  0xfe ; '.'
000000000001638b         db  0xff ; '.'
000000000001638c         db  0x7c ; '|'
000000000001638d         db  0xea ; '.'
000000000001638e         db  0xfe ; '.'
000000000001638f         db  0xff ; '.'
0000000000016390         db  0x7c ; '|'
0000000000016391         db  0xea ; '.'
0000000000016392         db  0xfe ; '.'
0000000000016393         db  0xff ; '.'
0000000000016394         db  0x7c ; '|'
0000000000016395         db  0xea ; '.'
0000000000016396         db  0xfe ; '.'
0000000000016397         db  0xff ; '.'
0000000000016398         db  0x7c ; '|'
0000000000016399         db  0xea ; '.'
000000000001639a         db  0xfe ; '.'
000000000001639b         db  0xff ; '.'
000000000001639c         db  0x7c ; '|'
000000000001639d         db  0xea ; '.'
000000000001639e         db  0xfe ; '.'
000000000001639f         db  0xff ; '.'
00000000000163a0         db  0x7c ; '|'
00000000000163a1         db  0xea ; '.'
00000000000163a2         db  0xfe ; '.'
00000000000163a3         db  0xff ; '.'
00000000000163a4         db  0x7c ; '|'
00000000000163a5         db  0xea ; '.'
00000000000163a6         db  0xfe ; '.'
00000000000163a7         db  0xff ; '.'
00000000000163a8         db  0x7c ; '|'
00000000000163a9         db  0xea ; '.'
00000000000163aa         db  0xfe ; '.'
00000000000163ab         db  0xff ; '.'
00000000000163ac         db  0x7c ; '|'
00000000000163ad         db  0xea ; '.'
00000000000163ae         db  0xfe ; '.'
00000000000163af         db  0xff ; '.'
00000000000163b0         db  0x7c ; '|'
00000000000163b1         db  0xea ; '.'
00000000000163b2         db  0xfe ; '.'
00000000000163b3         db  0xff ; '.'
00000000000163b4         db  0x7c ; '|'
00000000000163b5         db  0xea ; '.'
00000000000163b6         db  0xfe ; '.'
00000000000163b7         db  0xff ; '.'
00000000000163b8         db  0xd4 ; '.'
00000000000163b9         db  0xea ; '.'
00000000000163ba         db  0xfe ; '.'
00000000000163bb         db  0xff ; '.'
00000000000163bc         db  0xd4 ; '.'
00000000000163bd         db  0xea ; '.'
00000000000163be         db  0xfe ; '.'
00000000000163bf         db  0xff ; '.'
00000000000163c0         db  0xd4 ; '.'
00000000000163c1         db  0xea ; '.'
00000000000163c2         db  0xfe ; '.'
00000000000163c3         db  0xff ; '.'
00000000000163c4         db  0xd4 ; '.'
00000000000163c5         db  0xea ; '.'
00000000000163c6         db  0xfe ; '.'
00000000000163c7         db  0xff ; '.'
00000000000163c8         db  0x07 ; '.'
00000000000163c9         db  0xe9 ; '.'
00000000000163ca         db  0xfe ; '.'
00000000000163cb         db  0xff ; '.'
00000000000163cc         db  0x3c ; '<'
00000000000163cd         db  0xeb ; '.'
00000000000163ce         db  0xfe ; '.'
00000000000163cf         db  0xff ; '.'
00000000000163d0         db  0x7c ; '|'
00000000000163d1         db  0xea ; '.'
00000000000163d2         db  0xfe ; '.'
00000000000163d3         db  0xff ; '.'
00000000000163d4         db  0x7c ; '|'
00000000000163d5         db  0xea ; '.'
00000000000163d6         db  0xfe ; '.'
00000000000163d7         db  0xff ; '.'
00000000000163d8         db  0x7c ; '|'
00000000000163d9         db  0xea ; '.'
00000000000163da         db  0xfe ; '.'
00000000000163db         db  0xff ; '.'
00000000000163dc         db  0x7c ; '|'
00000000000163dd         db  0xea ; '.'
00000000000163de         db  0xfe ; '.'
00000000000163df         db  0xff ; '.'
00000000000163e0         db  0x7c ; '|'
00000000000163e1         db  0xea ; '.'
00000000000163e2         db  0xfe ; '.'
00000000000163e3         db  0xff ; '.'
00000000000163e4         db  0x7c ; '|'
00000000000163e5         db  0xea ; '.'
00000000000163e6         db  0xfe ; '.'
00000000000163e7         db  0xff ; '.'
00000000000163e8         db  0x7c ; '|'
00000000000163e9         db  0xea ; '.'
00000000000163ea         db  0xfe ; '.'
00000000000163eb         db  0xff ; '.'
00000000000163ec         db  0x7c ; '|'
00000000000163ed         db  0xea ; '.'
00000000000163ee         db  0xfe ; '.'
00000000000163ef         db  0xff ; '.'
00000000000163f0         db  0x7c ; '|'
00000000000163f1         db  0xea ; '.'
00000000000163f2         db  0xfe ; '.'
00000000000163f3         db  0xff ; '.'
00000000000163f4         db  0x7c ; '|'
00000000000163f5         db  0xea ; '.'
00000000000163f6         db  0xfe ; '.'
00000000000163f7         db  0xff ; '.'
00000000000163f8         db  0x7c ; '|'
00000000000163f9         db  0xea ; '.'
00000000000163fa         db  0xfe ; '.'
00000000000163fb         db  0xff ; '.'
00000000000163fc         db  0x7c ; '|'
00000000000163fd         db  0xea ; '.'
00000000000163fe         db  0xfe ; '.'
00000000000163ff         db  0xff ; '.'
0000000000016400         db  0x7c ; '|'
0000000000016401         db  0xea ; '.'
0000000000016402         db  0xfe ; '.'
0000000000016403         db  0xff ; '.'
0000000000016404         db  0x7c ; '|'
0000000000016405         db  0xea ; '.'
0000000000016406         db  0xfe ; '.'
0000000000016407         db  0xff ; '.'
0000000000016408         db  0x7c ; '|'
0000000000016409         db  0xea ; '.'
000000000001640a         db  0xfe ; '.'
000000000001640b         db  0xff ; '.'
000000000001640c         db  0x7c ; '|'
000000000001640d         db  0xea ; '.'
000000000001640e         db  0xfe ; '.'
000000000001640f         db  0xff ; '.'
0000000000016410         db  0x7c ; '|'
0000000000016411         db  0xea ; '.'
0000000000016412         db  0xfe ; '.'
0000000000016413         db  0xff ; '.'
0000000000016414         db  0x7c ; '|'
0000000000016415         db  0xea ; '.'
0000000000016416         db  0xfe ; '.'
0000000000016417         db  0xff ; '.'
0000000000016418         db  0x7c ; '|'
0000000000016419         db  0xea ; '.'
000000000001641a         db  0xfe ; '.'
000000000001641b         db  0xff ; '.'
000000000001641c         db  0x7c ; '|'
000000000001641d         db  0xea ; '.'
000000000001641e         db  0xfe ; '.'
000000000001641f         db  0xff ; '.'
0000000000016420         db  0x7c ; '|'
0000000000016421         db  0xea ; '.'
0000000000016422         db  0xfe ; '.'
0000000000016423         db  0xff ; '.'
0000000000016424         db  0x7c ; '|'
0000000000016425         db  0xea ; '.'
0000000000016426         db  0xfe ; '.'
0000000000016427         db  0xff ; '.'
0000000000016428         db  0x7c ; '|'
0000000000016429         db  0xea ; '.'
000000000001642a         db  0xfe ; '.'
000000000001642b         db  0xff ; '.'
000000000001642c         db  0x7c ; '|'
000000000001642d         db  0xea ; '.'
000000000001642e         db  0xfe ; '.'
000000000001642f         db  0xff ; '.'
0000000000016430         db  0x7c ; '|'
0000000000016431         db  0xea ; '.'
0000000000016432         db  0xfe ; '.'
0000000000016433         db  0xff ; '.'
0000000000016434         db  0x7c ; '|'
0000000000016435         db  0xea ; '.'
0000000000016436         db  0xfe ; '.'
0000000000016437         db  0xff ; '.'
0000000000016438         db  0xd4 ; '.'
0000000000016439         db  0xea ; '.'
000000000001643a         db  0xfe ; '.'
000000000001643b         db  0xff ; '.'
000000000001643c         db  0xac ; '.'
000000000001643d         db  0xe9 ; '.'
000000000001643e         db  0xfe ; '.'
000000000001643f         db  0xff ; '.'
0000000000016440         db  0x7c ; '|'
0000000000016441         db  0xea ; '.'
0000000000016442         db  0xfe ; '.'
0000000000016443         db  0xff ; '.'
0000000000016444         db  0xd4 ; '.'
0000000000016445         db  0xea ; '.'
0000000000016446         db  0xfe ; '.'
0000000000016447         db  0xff ; '.'
0000000000016448         db  0x7c ; '|'
0000000000016449         db  0xea ; '.'
000000000001644a         db  0xfe ; '.'
000000000001644b         db  0xff ; '.'
000000000001644c         db  0xd4 ; '.'
000000000001644d         db  0xea ; '.'
000000000001644e         db  0xfe ; '.'
000000000001644f         db  0xff ; '.'
0000000000016450         db  0x7c ; '|'
0000000000016451         db  0xea ; '.'
0000000000016452         db  0xfe ; '.'
0000000000016453         db  0xff ; '.'
0000000000016454         db  0x7c ; '|'
0000000000016455         db  0xea ; '.'
0000000000016456         db  0xfe ; '.'
0000000000016457         db  0xff ; '.'
0000000000016458         db  0x7c ; '|'
0000000000016459         db  0xea ; '.'
000000000001645a         db  0xfe ; '.'
000000000001645b         db  0xff ; '.'
000000000001645c         db  0x7c ; '|'
000000000001645d         db  0xea ; '.'
000000000001645e         db  0xfe ; '.'
000000000001645f         db  0xff ; '.'
0000000000016460         db  0x7c ; '|'
0000000000016461         db  0xea ; '.'
0000000000016462         db  0xfe ; '.'
0000000000016463         db  0xff ; '.'
0000000000016464         db  0x7c ; '|'
0000000000016465         db  0xea ; '.'
0000000000016466         db  0xfe ; '.'
0000000000016467         db  0xff ; '.'
0000000000016468         db  0x7c ; '|'
0000000000016469         db  0xea ; '.'
000000000001646a         db  0xfe ; '.'
000000000001646b         db  0xff ; '.'
000000000001646c         db  0x7c ; '|'
000000000001646d         db  0xea ; '.'
000000000001646e         db  0xfe ; '.'
000000000001646f         db  0xff ; '.'
0000000000016470         db  0x7c ; '|'
0000000000016471         db  0xea ; '.'
0000000000016472         db  0xfe ; '.'
0000000000016473         db  0xff ; '.'
0000000000016474         db  0x7c ; '|'
0000000000016475         db  0xea ; '.'
0000000000016476         db  0xfe ; '.'
0000000000016477         db  0xff ; '.'
0000000000016478         db  0x7c ; '|'
0000000000016479         db  0xea ; '.'
000000000001647a         db  0xfe ; '.'
000000000001647b         db  0xff ; '.'
000000000001647c         db  0x7c ; '|'
000000000001647d         db  0xea ; '.'
000000000001647e         db  0xfe ; '.'
000000000001647f         db  0xff ; '.'
0000000000016480         db  0x7c ; '|'
0000000000016481         db  0xea ; '.'
0000000000016482         db  0xfe ; '.'
0000000000016483         db  0xff ; '.'
0000000000016484         db  0x7c ; '|'
0000000000016485         db  0xea ; '.'
0000000000016486         db  0xfe ; '.'
0000000000016487         db  0xff ; '.'
0000000000016488         db  0x7c ; '|'
0000000000016489         db  0xea ; '.'
000000000001648a         db  0xfe ; '.'
000000000001648b         db  0xff ; '.'
000000000001648c         db  0x7c ; '|'
000000000001648d         db  0xea ; '.'
000000000001648e         db  0xfe ; '.'
000000000001648f         db  0xff ; '.'
0000000000016490         db  0x7c ; '|'
0000000000016491         db  0xea ; '.'
0000000000016492         db  0xfe ; '.'
0000000000016493         db  0xff ; '.'
0000000000016494         db  0x7c ; '|'
0000000000016495         db  0xea ; '.'
0000000000016496         db  0xfe ; '.'
0000000000016497         db  0xff ; '.'
0000000000016498         db  0x7c ; '|'
0000000000016499         db  0xea ; '.'
000000000001649a         db  0xfe ; '.'
000000000001649b         db  0xff ; '.'
000000000001649c         db  0x7c ; '|'
000000000001649d         db  0xea ; '.'
000000000001649e         db  0xfe ; '.'
000000000001649f         db  0xff ; '.'
00000000000164a0         db  0x7c ; '|'
00000000000164a1         db  0xea ; '.'
00000000000164a2         db  0xfe ; '.'
00000000000164a3         db  0xff ; '.'
00000000000164a4         db  0x7c ; '|'
00000000000164a5         db  0xea ; '.'
00000000000164a6         db  0xfe ; '.'
00000000000164a7         db  0xff ; '.'
00000000000164a8         db  0x7c ; '|'
00000000000164a9         db  0xea ; '.'
00000000000164aa         db  0xfe ; '.'
00000000000164ab         db  0xff ; '.'
00000000000164ac         db  0x7c ; '|'
00000000000164ad         db  0xea ; '.'
00000000000164ae         db  0xfe ; '.'
00000000000164af         db  0xff ; '.'
00000000000164b0         db  0x7c ; '|'
00000000000164b1         db  0xea ; '.'
00000000000164b2         db  0xfe ; '.'
00000000000164b3         db  0xff ; '.'
00000000000164b4         db  0x7c ; '|'
00000000000164b5         db  0xea ; '.'
00000000000164b6         db  0xfe ; '.'
00000000000164b7         db  0xff ; '.'
00000000000164b8         db  0x37 ; '7'
00000000000164b9         db  0xe8 ; '.'
00000000000164ba         db  0xfe ; '.'
00000000000164bb         db  0xff ; '.'
00000000000164bc         db  0xd4 ; '.'
00000000000164bd         db  0xea ; '.'
00000000000164be         db  0xfe ; '.'
00000000000164bf         db  0xff ; '.'
00000000000164c0         db  0x37 ; '7'
00000000000164c1         db  0xe8 ; '.'
00000000000164c2         db  0xfe ; '.'
00000000000164c3         db  0xff ; '.'
00000000000164c4         db  0xa4 ; '.'
00000000000164c5         db  0xea ; '.'
00000000000164c6         db  0xfe ; '.'
00000000000164c7         db  0xff ; '.'
00000000000164c8         db  0x28 ; '('                                         ; DATA XREF=sub_4df0+137
00000000000164c9         db  0xea ; '.'
00000000000164ca         db  0xfe ; '.'
00000000000164cb         db  0xff ; '.'
00000000000164cc         db  0x38 ; '8'
00000000000164cd         db  0xe9 ; '.'
00000000000164ce         db  0xfe ; '.'
00000000000164cf         db  0xff ; '.'
00000000000164d0         db  0x38 ; '8'
00000000000164d1         db  0xe9 ; '.'
00000000000164d2         db  0xfe ; '.'
00000000000164d3         db  0xff ; '.'
00000000000164d4         db  0x38 ; '8'
00000000000164d5         db  0xe9 ; '.'
00000000000164d6         db  0xfe ; '.'
00000000000164d7         db  0xff ; '.'
00000000000164d8         db  0x38 ; '8'
00000000000164d9         db  0xe9 ; '.'
00000000000164da         db  0xfe ; '.'
00000000000164db         db  0xff ; '.'
00000000000164dc         db  0x38 ; '8'
00000000000164dd         db  0xe9 ; '.'
00000000000164de         db  0xfe ; '.'
00000000000164df         db  0xff ; '.'
00000000000164e0         db  0x38 ; '8'
00000000000164e1         db  0xe9 ; '.'
00000000000164e2         db  0xfe ; '.'
00000000000164e3         db  0xff ; '.'
00000000000164e4         db  0x18 ; '.'
00000000000164e5         db  0xea ; '.'
00000000000164e6         db  0xfe ; '.'
00000000000164e7         db  0xff ; '.'
00000000000164e8         db  0x68 ; 'h'
00000000000164e9         db  0xeb ; '.'
00000000000164ea         db  0xfe ; '.'
00000000000164eb         db  0xff ; '.'
00000000000164ec         db  0x50 ; 'P'
00000000000164ed         db  0xeb ; '.'
00000000000164ee         db  0xfe ; '.'
00000000000164ef         db  0xff ; '.'
00000000000164f0         db  0x00 ; '.'
00000000000164f1         db  0xea ; '.'
00000000000164f2         db  0xfe ; '.'
00000000000164f3         db  0xff ; '.'
00000000000164f4         db  0x40 ; '@'
00000000000164f5         db  0xeb ; '.'
00000000000164f6         db  0xfe ; '.'
00000000000164f7         db  0xff ; '.'
00000000000164f8         db  0xe8 ; '.'
00000000000164f9         db  0xe9 ; '.'
00000000000164fa         db  0xfe ; '.'
00000000000164fb         db  0xff ; '.'
00000000000164fc         db  0x28 ; '('
00000000000164fd         db  0xeb ; '.'
00000000000164fe         db  0xfe ; '.'
00000000000164ff         db  0xff ; '.'
0000000000016500         db  0x38 ; '8'
0000000000016501         db  0xe9 ; '.'
0000000000016502         db  0xfe ; '.'
0000000000016503         db  0xff ; '.'
0000000000016504         db  0x38 ; '8'
0000000000016505         db  0xe9 ; '.'
0000000000016506         db  0xfe ; '.'
0000000000016507         db  0xff ; '.'
0000000000016508         db  0x38 ; '8'
0000000000016509         db  0xe9 ; '.'
000000000001650a         db  0xfe ; '.'
000000000001650b         db  0xff ; '.'
000000000001650c         db  0x38 ; '8'
000000000001650d         db  0xe9 ; '.'
000000000001650e         db  0xfe ; '.'
000000000001650f         db  0xff ; '.'
0000000000016510         db  0x38 ; '8'
0000000000016511         db  0xe9 ; '.'
0000000000016512         db  0xfe ; '.'
0000000000016513         db  0xff ; '.'
0000000000016514         db  0x38 ; '8'
0000000000016515         db  0xe9 ; '.'
0000000000016516         db  0xfe ; '.'
0000000000016517         db  0xff ; '.'
0000000000016518         db  0x38 ; '8'
0000000000016519         db  0xe9 ; '.'
000000000001651a         db  0xfe ; '.'
000000000001651b         db  0xff ; '.'
000000000001651c         db  0x38 ; '8'
000000000001651d         db  0xe9 ; '.'
000000000001651e         db  0xfe ; '.'
000000000001651f         db  0xff ; '.'
0000000000016520         db  0x38 ; '8'
0000000000016521         db  0xe9 ; '.'
0000000000016522         db  0xfe ; '.'
0000000000016523         db  0xff ; '.'
0000000000016524         db  0x38 ; '8'
0000000000016525         db  0xe9 ; '.'
0000000000016526         db  0xfe ; '.'
0000000000016527         db  0xff ; '.'
0000000000016528         db  0x38 ; '8'
0000000000016529         db  0xe9 ; '.'
000000000001652a         db  0xfe ; '.'
000000000001652b         db  0xff ; '.'
000000000001652c         db  0x38 ; '8'
000000000001652d         db  0xe9 ; '.'
000000000001652e         db  0xfe ; '.'
000000000001652f         db  0xff ; '.'
0000000000016530         db  0x38 ; '8'
0000000000016531         db  0xe9 ; '.'
0000000000016532         db  0xfe ; '.'
0000000000016533         db  0xff ; '.'
0000000000016534         db  0x38 ; '8'
0000000000016535         db  0xe9 ; '.'
0000000000016536         db  0xfe ; '.'
0000000000016537         db  0xff ; '.'
0000000000016538         db  0x38 ; '8'
0000000000016539         db  0xe9 ; '.'
000000000001653a         db  0xfe ; '.'
000000000001653b         db  0xff ; '.'
000000000001653c         db  0x38 ; '8'
000000000001653d         db  0xe9 ; '.'
000000000001653e         db  0xfe ; '.'
000000000001653f         db  0xff ; '.'
0000000000016540         db  0x38 ; '8'
0000000000016541         db  0xe9 ; '.'
0000000000016542         db  0xfe ; '.'
0000000000016543         db  0xff ; '.'
0000000000016544         db  0x38 ; '8'
0000000000016545         db  0xe9 ; '.'
0000000000016546         db  0xfe ; '.'
0000000000016547         db  0xff ; '.'
0000000000016548         db  0x10 ; '.'
0000000000016549         db  0xeb ; '.'
000000000001654a         db  0xfe ; '.'
000000000001654b         db  0xff ; '.'
000000000001654c         db  0xf8 ; '.'
000000000001654d         db  0xea ; '.'
000000000001654e         db  0xfe ; '.'
000000000001654f         db  0xff ; '.'
0000000000016550         db  0xf8 ; '.'
0000000000016551         db  0xea ; '.'
0000000000016552         db  0xfe ; '.'
0000000000016553         db  0xff ; '.'
0000000000016554         db  0xe0 ; '.'
0000000000016555         db  0xea ; '.'
0000000000016556         db  0xfe ; '.'
0000000000016557         db  0xff ; '.'
0000000000016558         db  0xf8 ; '.'
0000000000016559         db  0xea ; '.'
000000000001655a         db  0xfe ; '.'
000000000001655b         db  0xff ; '.'
000000000001655c         db  0xc8 ; '.'
000000000001655d         db  0xea ; '.'
000000000001655e         db  0xfe ; '.'
000000000001655f         db  0xff ; '.'
0000000000016560         db  0xf8 ; '.'
0000000000016561         db  0xea ; '.'
0000000000016562         db  0xfe ; '.'
0000000000016563         db  0xff ; '.'
0000000000016564         db  0x38 ; '8'
0000000000016565         db  0xe7 ; '.'
0000000000016566         db  0xfe ; '.'
0000000000016567         db  0xff ; '.'
0000000000016568         db  0xf8 ; '.'
0000000000016569         db  0xea ; '.'
000000000001656a         db  0xfe ; '.'
000000000001656b         db  0xff ; '.'
000000000001656c         db  0xf8 ; '.'
000000000001656d         db  0xea ; '.'
000000000001656e         db  0xfe ; '.'
000000000001656f         db  0xff ; '.'
0000000000016570         db  0xf8 ; '.'
0000000000016571         db  0xea ; '.'
0000000000016572         db  0xfe ; '.'
0000000000016573         db  0xff ; '.'
0000000000016574         db  0xc8 ; '.'
0000000000016575         db  0xea ; '.'
0000000000016576         db  0xfe ; '.'
0000000000016577         db  0xff ; '.'
0000000000016578         db  0xc8 ; '.'
0000000000016579         db  0xea ; '.'
000000000001657a         db  0xfe ; '.'
000000000001657b         db  0xff ; '.'
000000000001657c         db  0xc8 ; '.'
000000000001657d         db  0xea ; '.'
000000000001657e         db  0xfe ; '.'
000000000001657f         db  0xff ; '.'
0000000000016580         db  0xc8 ; '.'
0000000000016581         db  0xea ; '.'
0000000000016582         db  0xfe ; '.'
0000000000016583         db  0xff ; '.'
0000000000016584         db  0xc8 ; '.'
0000000000016585         db  0xea ; '.'
0000000000016586         db  0xfe ; '.'
0000000000016587         db  0xff ; '.'
0000000000016588         db  0xc8 ; '.'
0000000000016589         db  0xea ; '.'
000000000001658a         db  0xfe ; '.'
000000000001658b         db  0xff ; '.'
000000000001658c         db  0xc8 ; '.'
000000000001658d         db  0xea ; '.'
000000000001658e         db  0xfe ; '.'
000000000001658f         db  0xff ; '.'
0000000000016590         db  0xc8 ; '.'
0000000000016591         db  0xea ; '.'
0000000000016592         db  0xfe ; '.'
0000000000016593         db  0xff ; '.'
0000000000016594         db  0xc8 ; '.'
0000000000016595         db  0xea ; '.'
0000000000016596         db  0xfe ; '.'
0000000000016597         db  0xff ; '.'
0000000000016598         db  0xc8 ; '.'
0000000000016599         db  0xea ; '.'
000000000001659a         db  0xfe ; '.'
000000000001659b         db  0xff ; '.'
000000000001659c         db  0xc8 ; '.'
000000000001659d         db  0xea ; '.'
000000000001659e         db  0xfe ; '.'
000000000001659f         db  0xff ; '.'
00000000000165a0         db  0xc8 ; '.'
00000000000165a1         db  0xea ; '.'
00000000000165a2         db  0xfe ; '.'
00000000000165a3         db  0xff ; '.'
00000000000165a4         db  0xc8 ; '.'
00000000000165a5         db  0xea ; '.'
00000000000165a6         db  0xfe ; '.'
00000000000165a7         db  0xff ; '.'
00000000000165a8         db  0xc8 ; '.'
00000000000165a9         db  0xea ; '.'
00000000000165aa         db  0xfe ; '.'
00000000000165ab         db  0xff ; '.'
00000000000165ac         db  0xc8 ; '.'
00000000000165ad         db  0xea ; '.'
00000000000165ae         db  0xfe ; '.'
00000000000165af         db  0xff ; '.'
00000000000165b0         db  0xc8 ; '.'
00000000000165b1         db  0xea ; '.'
00000000000165b2         db  0xfe ; '.'
00000000000165b3         db  0xff ; '.'
00000000000165b4         db  0xf8 ; '.'
00000000000165b5         db  0xea ; '.'
00000000000165b6         db  0xfe ; '.'
00000000000165b7         db  0xff ; '.'
00000000000165b8         db  0xf8 ; '.'
00000000000165b9         db  0xea ; '.'
00000000000165ba         db  0xfe ; '.'
00000000000165bb         db  0xff ; '.'
00000000000165bc         db  0xf8 ; '.'
00000000000165bd         db  0xea ; '.'
00000000000165be         db  0xfe ; '.'
00000000000165bf         db  0xff ; '.'
00000000000165c0         db  0xf8 ; '.'
00000000000165c1         db  0xea ; '.'
00000000000165c2         db  0xfe ; '.'
00000000000165c3         db  0xff ; '.'
00000000000165c4         db  0x08 ; '.'
00000000000165c5         db  0xe7 ; '.'
00000000000165c6         db  0xfe ; '.'
00000000000165c7         db  0xff ; '.'
00000000000165c8         db  0x38 ; '8'
00000000000165c9         db  0xe9 ; '.'
00000000000165ca         db  0xfe ; '.'
00000000000165cb         db  0xff ; '.'
00000000000165cc         db  0xc8 ; '.'
00000000000165cd         db  0xea ; '.'
00000000000165ce         db  0xfe ; '.'
00000000000165cf         db  0xff ; '.'
00000000000165d0         db  0xc8 ; '.'
00000000000165d1         db  0xea ; '.'
00000000000165d2         db  0xfe ; '.'
00000000000165d3         db  0xff ; '.'
00000000000165d4         db  0xc8 ; '.'
00000000000165d5         db  0xea ; '.'
00000000000165d6         db  0xfe ; '.'
00000000000165d7         db  0xff ; '.'
00000000000165d8         db  0xc8 ; '.'
00000000000165d9         db  0xea ; '.'
00000000000165da         db  0xfe ; '.'
00000000000165db         db  0xff ; '.'
00000000000165dc         db  0xc8 ; '.'
00000000000165dd         db  0xea ; '.'
00000000000165de         db  0xfe ; '.'
00000000000165df         db  0xff ; '.'
00000000000165e0         db  0xc8 ; '.'
00000000000165e1         db  0xea ; '.'
00000000000165e2         db  0xfe ; '.'
00000000000165e3         db  0xff ; '.'
00000000000165e4         db  0xc8 ; '.'
00000000000165e5         db  0xea ; '.'
00000000000165e6         db  0xfe ; '.'
00000000000165e7         db  0xff ; '.'
00000000000165e8         db  0xc8 ; '.'
00000000000165e9         db  0xea ; '.'
00000000000165ea         db  0xfe ; '.'
00000000000165eb         db  0xff ; '.'
00000000000165ec         db  0xc8 ; '.'
00000000000165ed         db  0xea ; '.'
00000000000165ee         db  0xfe ; '.'
00000000000165ef         db  0xff ; '.'
00000000000165f0         db  0xc8 ; '.'
00000000000165f1         db  0xea ; '.'
00000000000165f2         db  0xfe ; '.'
00000000000165f3         db  0xff ; '.'
00000000000165f4         db  0xc8 ; '.'
00000000000165f5         db  0xea ; '.'
00000000000165f6         db  0xfe ; '.'
00000000000165f7         db  0xff ; '.'
00000000000165f8         db  0xc8 ; '.'
00000000000165f9         db  0xea ; '.'
00000000000165fa         db  0xfe ; '.'
00000000000165fb         db  0xff ; '.'
00000000000165fc         db  0xc8 ; '.'
00000000000165fd         db  0xea ; '.'
00000000000165fe         db  0xfe ; '.'
00000000000165ff         db  0xff ; '.'
0000000000016600         db  0xc8 ; '.'
0000000000016601         db  0xea ; '.'
0000000000016602         db  0xfe ; '.'
0000000000016603         db  0xff ; '.'
0000000000016604         db  0xc8 ; '.'
0000000000016605         db  0xea ; '.'
0000000000016606         db  0xfe ; '.'
0000000000016607         db  0xff ; '.'
0000000000016608         db  0xc8 ; '.'
0000000000016609         db  0xea ; '.'
000000000001660a         db  0xfe ; '.'
000000000001660b         db  0xff ; '.'
000000000001660c         db  0xc8 ; '.'
000000000001660d         db  0xea ; '.'
000000000001660e         db  0xfe ; '.'
000000000001660f         db  0xff ; '.'
0000000000016610         db  0xc8 ; '.'
0000000000016611         db  0xea ; '.'
0000000000016612         db  0xfe ; '.'
0000000000016613         db  0xff ; '.'
0000000000016614         db  0xc8 ; '.'
0000000000016615         db  0xea ; '.'
0000000000016616         db  0xfe ; '.'
0000000000016617         db  0xff ; '.'
0000000000016618         db  0xc8 ; '.'
0000000000016619         db  0xea ; '.'
000000000001661a         db  0xfe ; '.'
000000000001661b         db  0xff ; '.'
000000000001661c         db  0xc8 ; '.'
000000000001661d         db  0xea ; '.'
000000000001661e         db  0xfe ; '.'
000000000001661f         db  0xff ; '.'
0000000000016620         db  0xc8 ; '.'
0000000000016621         db  0xea ; '.'
0000000000016622         db  0xfe ; '.'
0000000000016623         db  0xff ; '.'
0000000000016624         db  0xc8 ; '.'
0000000000016625         db  0xea ; '.'
0000000000016626         db  0xfe ; '.'
0000000000016627         db  0xff ; '.'
0000000000016628         db  0xc8 ; '.'
0000000000016629         db  0xea ; '.'
000000000001662a         db  0xfe ; '.'
000000000001662b         db  0xff ; '.'
000000000001662c         db  0xc8 ; '.'
000000000001662d         db  0xea ; '.'
000000000001662e         db  0xfe ; '.'
000000000001662f         db  0xff ; '.'
0000000000016630         db  0xc8 ; '.'
0000000000016631         db  0xea ; '.'
0000000000016632         db  0xfe ; '.'
0000000000016633         db  0xff ; '.'
0000000000016634         db  0xf8 ; '.'
0000000000016635         db  0xea ; '.'
0000000000016636         db  0xfe ; '.'
0000000000016637         db  0xff ; '.'
0000000000016638         db  0xc8 ; '.'
0000000000016639         db  0xe9 ; '.'
000000000001663a         db  0xfe ; '.'
000000000001663b         db  0xff ; '.'
000000000001663c         db  0xc8 ; '.'
000000000001663d         db  0xea ; '.'
000000000001663e         db  0xfe ; '.'
000000000001663f         db  0xff ; '.'
0000000000016640         db  0xf8 ; '.'
0000000000016641         db  0xea ; '.'
0000000000016642         db  0xfe ; '.'
0000000000016643         db  0xff ; '.'
0000000000016644         db  0xc8 ; '.'
0000000000016645         db  0xea ; '.'
0000000000016646         db  0xfe ; '.'
0000000000016647         db  0xff ; '.'
0000000000016648         db  0xf8 ; '.'
0000000000016649         db  0xea ; '.'
000000000001664a         db  0xfe ; '.'
000000000001664b         db  0xff ; '.'
000000000001664c         db  0xc8 ; '.'
000000000001664d         db  0xea ; '.'
000000000001664e         db  0xfe ; '.'
000000000001664f         db  0xff ; '.'
0000000000016650         db  0xc8 ; '.'
0000000000016651         db  0xea ; '.'
0000000000016652         db  0xfe ; '.'
0000000000016653         db  0xff ; '.'
0000000000016654         db  0xc8 ; '.'
0000000000016655         db  0xea ; '.'
0000000000016656         db  0xfe ; '.'
0000000000016657         db  0xff ; '.'
0000000000016658         db  0xc8 ; '.'
0000000000016659         db  0xea ; '.'
000000000001665a         db  0xfe ; '.'
000000000001665b         db  0xff ; '.'
000000000001665c         db  0xc8 ; '.'
000000000001665d         db  0xea ; '.'
000000000001665e         db  0xfe ; '.'
000000000001665f         db  0xff ; '.'
0000000000016660         db  0xc8 ; '.'
0000000000016661         db  0xea ; '.'
0000000000016662         db  0xfe ; '.'
0000000000016663         db  0xff ; '.'
0000000000016664         db  0xc8 ; '.'
0000000000016665         db  0xea ; '.'
0000000000016666         db  0xfe ; '.'
0000000000016667         db  0xff ; '.'
0000000000016668         db  0xc8 ; '.'
0000000000016669         db  0xea ; '.'
000000000001666a         db  0xfe ; '.'
000000000001666b         db  0xff ; '.'
000000000001666c         db  0xc8 ; '.'
000000000001666d         db  0xea ; '.'
000000000001666e         db  0xfe ; '.'
000000000001666f         db  0xff ; '.'
0000000000016670         db  0xc8 ; '.'
0000000000016671         db  0xea ; '.'
0000000000016672         db  0xfe ; '.'
0000000000016673         db  0xff ; '.'
0000000000016674         db  0xc8 ; '.'
0000000000016675         db  0xea ; '.'
0000000000016676         db  0xfe ; '.'
0000000000016677         db  0xff ; '.'
0000000000016678         db  0xc8 ; '.'
0000000000016679         db  0xea ; '.'
000000000001667a         db  0xfe ; '.'
000000000001667b         db  0xff ; '.'
000000000001667c         db  0xc8 ; '.'
000000000001667d         db  0xea ; '.'
000000000001667e         db  0xfe ; '.'
000000000001667f         db  0xff ; '.'
0000000000016680         db  0xc8 ; '.'
0000000000016681         db  0xea ; '.'
0000000000016682         db  0xfe ; '.'
0000000000016683         db  0xff ; '.'
0000000000016684         db  0xc8 ; '.'
0000000000016685         db  0xea ; '.'
0000000000016686         db  0xfe ; '.'
0000000000016687         db  0xff ; '.'
0000000000016688         db  0xc8 ; '.'
0000000000016689         db  0xea ; '.'
000000000001668a         db  0xfe ; '.'
000000000001668b         db  0xff ; '.'
000000000001668c         db  0xc8 ; '.'
000000000001668d         db  0xea ; '.'
000000000001668e         db  0xfe ; '.'
000000000001668f         db  0xff ; '.'
0000000000016690         db  0xc8 ; '.'
0000000000016691         db  0xea ; '.'
0000000000016692         db  0xfe ; '.'
0000000000016693         db  0xff ; '.'
0000000000016694         db  0xc8 ; '.'
0000000000016695         db  0xea ; '.'
0000000000016696         db  0xfe ; '.'
0000000000016697         db  0xff ; '.'
0000000000016698         db  0xc8 ; '.'
0000000000016699         db  0xea ; '.'
000000000001669a         db  0xfe ; '.'
000000000001669b         db  0xff ; '.'
000000000001669c         db  0xc8 ; '.'
000000000001669d         db  0xea ; '.'
000000000001669e         db  0xfe ; '.'
000000000001669f         db  0xff ; '.'
00000000000166a0         db  0xc8 ; '.'
00000000000166a1         db  0xea ; '.'
00000000000166a2         db  0xfe ; '.'
00000000000166a3         db  0xff ; '.'
00000000000166a4         db  0xc8 ; '.'
00000000000166a5         db  0xea ; '.'
00000000000166a6         db  0xfe ; '.'
00000000000166a7         db  0xff ; '.'
00000000000166a8         db  0xc8 ; '.'
00000000000166a9         db  0xea ; '.'
00000000000166aa         db  0xfe ; '.'
00000000000166ab         db  0xff ; '.'
00000000000166ac         db  0xc8 ; '.'
00000000000166ad         db  0xea ; '.'
00000000000166ae         db  0xfe ; '.'
00000000000166af         db  0xff ; '.'
00000000000166b0         db  0xc8 ; '.'
00000000000166b1         db  0xea ; '.'
00000000000166b2         db  0xfe ; '.'
00000000000166b3         db  0xff ; '.'
00000000000166b4         db  0x38 ; '8'
00000000000166b5         db  0xe6 ; '.'
00000000000166b6         db  0xfe ; '.'
00000000000166b7         db  0xff ; '.'
00000000000166b8         db  0xf8 ; '.'
00000000000166b9         db  0xea ; '.'
00000000000166ba         db  0xfe ; '.'
00000000000166bb         db  0xff ; '.'
00000000000166bc         db  0x38 ; '8'
00000000000166bd         db  0xe6 ; '.'
00000000000166be         db  0xfe ; '.'
00000000000166bf         db  0xff ; '.'
00000000000166c0         db  0xe0 ; '.'
00000000000166c1         db  0xea ; '.'
00000000000166c2         db  0xfe ; '.'
00000000000166c3         db  0xff ; '.'
00000000000166c4         db  0x00 ; '.'
00000000000166c5         db  0x00 ; '.'
00000000000166c6         db  0x00 ; '.'
00000000000166c7         db  0x00 ; '.'
00000000000166c8         db  0x00 ; '.'
00000000000166c9         db  0x00 ; '.'
00000000000166ca         db  0x00 ; '.'
00000000000166cb         db  0x00 ; '.'
00000000000166cc         db  0x00 ; '.'
00000000000166cd         db  0x00 ; '.'
00000000000166ce         db  0x00 ; '.'
00000000000166cf         db  0x00 ; '.'
00000000000166d0         db  0x00 ; '.'
00000000000166d1         db  0x00 ; '.'
00000000000166d2         db  0x00 ; '.'
00000000000166d3         db  0x00 ; '.'
00000000000166d4         db  0x00 ; '.'
00000000000166d5         db  0x00 ; '.'
00000000000166d6         db  0x00 ; '.'
00000000000166d7         db  0x00 ; '.'
00000000000166d8         db  0x00 ; '.'
00000000000166d9         db  0x00 ; '.'
00000000000166da         db  0x00 ; '.'
00000000000166db         db  0x00 ; '.'
00000000000166dc         db  0x00 ; '.'
00000000000166dd         db  0x00 ; '.'
00000000000166de         db  0x00 ; '.'
00000000000166df         db  0x00 ; '.'
                     quoting_style_vals:
00000000000166e0         db  0x00 ; '.'
00000000000166e1         db  0x00 ; '.'
00000000000166e2         db  0x00 ; '.'
00000000000166e3         db  0x00 ; '.'
00000000000166e4         db  0x01 ; '.'
00000000000166e5         db  0x00 ; '.'
00000000000166e6         db  0x00 ; '.'
00000000000166e7         db  0x00 ; '.'
00000000000166e8         db  0x02 ; '.'
00000000000166e9         db  0x00 ; '.'
00000000000166ea         db  0x00 ; '.'
00000000000166eb         db  0x00 ; '.'
00000000000166ec         db  0x03 ; '.'
00000000000166ed         db  0x00 ; '.'
00000000000166ee         db  0x00 ; '.'
00000000000166ef         db  0x00 ; '.'
00000000000166f0         db  0x04 ; '.'
00000000000166f1         db  0x00 ; '.'
00000000000166f2         db  0x00 ; '.'
00000000000166f3         db  0x00 ; '.'
00000000000166f4         db  0x05 ; '.'
00000000000166f5         db  0x00 ; '.'
00000000000166f6         db  0x00 ; '.'
00000000000166f7         db  0x00 ; '.'
00000000000166f8         db  0x06 ; '.'
00000000000166f9         db  0x00 ; '.'
00000000000166fa         db  0x00 ; '.'
00000000000166fb         db  0x00 ; '.'
00000000000166fc         db  0x07 ; '.'
00000000000166fd         db  0x00 ; '.'
00000000000166fe         db  0x00 ; '.'
00000000000166ff         db  0x00 ; '.'
0000000000016700         db  0x08 ; '.'
0000000000016701         db  0x00 ; '.'
0000000000016702         db  0x00 ; '.'
0000000000016703         db  0x00 ; '.'
0000000000016704         db  0x09 ; '.'
0000000000016705         db  0x00 ; '.'
0000000000016706         db  0x00 ; '.'
0000000000016707         db  0x00 ; '.'
                     aSSSn:
0000000000016708         db         "%s (%s) %s\n", 0                           ; DATA XREF=version_etc_arn+35
                     aSSn:
0000000000016714         db         "%s %s\n", 0                                ; DATA XREF=version_etc_arn+318
000000000001671b         db  0x28 ; '('                                         ; DATA XREF=version_etc_arn+60
000000000001671c         db  0x43 ; 'C'
000000000001671d         db  0x29 ; ')'                                         ; DATA XREF=eval6+198, eval6+768
000000000001671e         db  0x00 ; '.'
                     aWrittenBySn:
000000000001671f         db         "Written by %s.\n", 0                       ; DATA XREF=version_etc_arn+443
                     aWrittenBySAndS:
000000000001672f         db         "Written by %s and %s.\n", 0                ; DATA XREF=version_etc_arn+508
                     aWrittenBySSAnd:
0000000000016746         db         "Written by %s, %s, and %s.\n", 0           ; DATA XREF=version_etc_arn+584
                     aNreportBugsToS:
0000000000016762         db         "\nReport bugs to: %s\n", 0                 ; DATA XREF=emit_bug_reporting_address+1
                     aBugcoreutilsgn:
0000000000016777         db         "bug-coreutils@gnu.org", 0                  ; DATA XREF=emit_bug_reporting_address+20
                     aSHomePageSn:
000000000001678d         db         "%s home page: <%s>\n", 0                   ; DATA XREF=emit_bug_reporting_address+42
00000000000167a1         align      8
                     aNlicenseGplv3G:
00000000000167a8         db         "\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\n", 0 ; DATA XREF=version_etc_arn+110
0000000000016874         align      8
                     aWrittenBySSSna:
0000000000016878         db         "Written by %s, %s, %s,\nand %s.\n", 0      ; DATA XREF=version_etc_arn+656
                     aWrittenBySSSns_16898:        // aWrittenBySSSns
0000000000016898         db         "Written by %s, %s, %s,\n%s, and %s.\n", 0  ; DATA XREF=version_etc_arn+748
00000000000168bc         align      64
                     aWrittenBySSSns_168c0:        // aWrittenBySSSns
00000000000168c0         db         "Written by %s, %s, %s,\n%s, %s, and %s.\n", 0 ; DATA XREF=version_etc_arn+800
                     aWrittenBySSSns_168e8:        // aWrittenBySSSns
00000000000168e8         db         "Written by %s, %s, %s,\n%s, %s, %s, and %s.\n", 0 ; DATA XREF=version_etc_arn+904
0000000000016914         align      8
                     aWrittenBySSSns_16918:        // aWrittenBySSSns
0000000000016918         db         "Written by %s, %s, %s,\n%s, %s, %s, %s,\nand %s.\n", 0 ; DATA XREF=version_etc_arn+184
                     aWrittenBySSSns:
0000000000016948         db         "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, and %s.\n", 0 ; DATA XREF=version_etc_arn+360
000000000001697c         align      128
                     aWrittenBySSSns_16980:        // aWrittenBySSSns
0000000000016980         db         "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n", 0 ; DATA XREF=version_etc_arn+997
00000000000169bc         align      64
                     aGeneralHelpUsi:
00000000000169c0         db         "General help using GNU software: <https://www.gnu.org/gethelp/>\n", 0 ; DATA XREF=emit_bug_reporting_address+97
0000000000016a01         align      4
                     switch_table_16a04:        // switch_table
0000000000016a04         dd         version_etc_arn.loc_68c6-switch_table_16a04, version_etc_arn.loc_6958-switch_table_16a04, version_etc_arn.loc_6998-switch_table_16a04, version_etc_arn.loc_69e0-switch_table_16a04 ; switch table used at 0x6844 containing 10 entries, DATA XREF=version_etc_arn+150
0000000000016a14         dd         version_etc_arn.loc_6a30-switch_table_16a04, version_etc_arn.loc_6a88-switch_table_16a04, version_etc_arn.loc_6ab8-switch_table_16a04, version_etc_arn.loc_6b20-switch_table_16a04
0000000000016a24         dd         version_etc_arn.loc_6850-switch_table_16a04, version_etc_arn.loc_6900-switch_table_16a04
0000000000016a2c         align      64
                     version_etc_copyright:
0000000000016a40         db         "Copyright %s %d Free Software Foundation, Inc.", 0 ; DATA XREF=version_etc_arn+79
                     aMemoryExhauste:
0000000000016a6f         db         "memory exhausted", 0                       ; DATA XREF=xalloc_die
                     aCoreutils831li_16a80:        // aCoreutils831li
0000000000016a80         db         "../coreutils-8.31/lib/regexec.c", 0        ; DATA XREF=pop_fail_stack.isra.25+124, re_search_internal+4148, re_search_internal+5432, re_search_stub+1065, re_search_stub+1096, re_search_stub+1127
                     aCoreutils831li_16aa0:        // aCoreutils831li
0000000000016aa0         db         "../coreutils-8.31/lib/regcomp.c", 0        ; DATA XREF=sub_127b0+2817, sub_140f0+18, sub_147d0+106, sub_147d0+137, sub_147d0+168
                     aIsepsilonnodeN:
0000000000016ac0         db         "!IS_EPSILON_NODE (node->token.type)", 0    ; DATA XREF=sub_147d0+144
0000000000016ae4         align      8
                     aNum0:
0000000000016ae8         db         "num >= 0", 0                               ; DATA XREF=pop_fail_stack.isra.25+131
                     aAlpha:
0000000000016af1         db         "alpha", 0                                  ; DATA XREF=build_charclass.isra.29+65, build_charclass.isra.29+338, build_charclass.isra.29+626
                     aUpper:
0000000000016af7         db         "upper", 0                                  ; DATA XREF=build_charclass.isra.29+35, build_charclass.isra.29+1100
                     aLower:
0000000000016afd         db         "lower", 0                                  ; DATA XREF=build_charclass.isra.29+310, build_charclass.isra.29+424
                     aAlnum:
0000000000016b03         db         "alnum", 0                                  ; DATA XREF=build_charclass.isra.29+108, sub_127b0+463
                     aCntrl:
0000000000016b09         db         "cntrl", 0                                  ; DATA XREF=build_charclass.isra.29+138
                     aSpace:
0000000000016b0f         db         "space", 0                                  ; DATA XREF=build_charclass.isra.29+450, sub_127b0+383
                     aPrint:
0000000000016b15         db         "print", 0                                  ; DATA XREF=build_charclass.isra.29+947
                     aBlank:
0000000000016b1b         db         "blank", 0                                  ; DATA XREF=build_charclass.isra.29+1202
                     aGraph:
0000000000016b21         db         "graph", 0                                  ; DATA XREF=build_charclass.isra.29+1470
                     aPunct:
0000000000016b27         db         "punct", 0                                  ; DATA XREF=build_charclass.isra.29+1610
0000000000016b2d         db  0x78 ; 'x'                                         ; DATA XREF=build_charclass.isra.29+1748
                     aDigit:
0000000000016b2e         db         "digit", 0                                  ; DATA XREF=build_charclass.isra.29+656
                     aErrRegespace:
0000000000016b34         db         "err == REG_ESPACE", 0                      ; DATA XREF=re_search_internal+4155, re_search_internal+5439
0000000000016b46         db  0x38 ; '8'                                         ; DATA XREF=re_compile_internal+352
0000000000016b47         db  0x00 ; '.'
                     aNodenextNull:
0000000000016b48         db         "node->next == NULL", 0                     ; DATA XREF=sub_140f0+25
                     aLeft1:
0000000000016b5b         db         "left > -1", 0                              ; DATA XREF=sub_147d0+175
                     aRight1:
0000000000016b65         db         "right > -1", 0                             ; DATA XREF=sub_147d0+113
                     aRegsallocatedR:
0000000000016b70         db         "regs_allocated == REGS_FIXED", 0           ; DATA XREF=re_search_stub+1134
                     aRegsnumregsNre:
0000000000016b8d         db         "regs->num_regs >= nregs", 0                ; DATA XREF=re_search_stub+1103
                     aPmatch0rmsoSta:
0000000000016ba5         db         "pmatch[0].rm_so == start", 0               ; DATA XREF=re_search_stub+1072
0000000000016bbe         align      64
                     switch_table_16bc0:        // switch_table
0000000000016bc0         dd         2 dup (re_search_internal.loc_100d4-switch_table_16bc0), re_search_internal.loc_fb3e-switch_table_16bc0, re_search_internal.loc_10062-switch_table_16bc0, re_search_internal.loc_fbe8-switch_table_16bc0 ; switch table used at 0xfb06 containing 5 entries, DATA XREF=re_search_internal+1256
                     switch_table_16bd4:        // switch_table
0000000000016bd4         dd         peek_token.loc_11b20-switch_table_16bd4, 25 dup (peek_token.loc_11a5c-switch_table_16bd4), peek_token.loc_11b90-switch_table_16bd4, 3 dup (peek_token.loc_11a5c-switch_table_16bd4) ; switch table used at 0x1193c containing 116 entries, DATA XREF=peek_token+314
0000000000016c4c         dd         peek_token.loc_11b70-switch_table_16bd4, peek_token.loc_11b50-switch_table_16bd4, peek_token.loc_11b40-switch_table_16bd4, peek_token.loc_11b00-switch_table_16bd4
0000000000016c5c         dd         2 dup (peek_token.loc_11a5c-switch_table_16bd4), peek_token.loc_11af0-switch_table_16bd4, 16 dup (peek_token.loc_11a5c-switch_table_16bd4), peek_token.loc_11ad0-switch_table_16bd4
0000000000016cac         dd         27 dup (peek_token.loc_11a5c-switch_table_16bd4), peek_token.loc_11ac0-switch_table_16bd4, 2 dup (peek_token.loc_11a5c-switch_table_16bd4), peek_token.loc_11a98-switch_table_16bd4
0000000000016d28         dd         28 dup (peek_token.loc_11a5c-switch_table_16bd4), peek_token.loc_11a70-switch_table_16bd4, peek_token.loc_11a48-switch_table_16bd4, peek_token.loc_11a20-switch_table_16bd4
                     switch_table_16da4:        // switch_table
0000000000016da4         dd         peek_token.loc_11db3-switch_table_16da4, peek_token.loc_11d9c-switch_table_16da4, peek_token.loc_11d85-switch_table_16da4, peek_token.loc_11dd5-switch_table_16da4 ; switch table used at 0x119e8 containing 87 entries, DATA XREF=peek_token+487
0000000000016db4         dd         peek_token.loc_11d6a-switch_table_16da4, 5 dup (peek_token.loc_11dd5-switch_table_16da4), 9 dup (peek_token.loc_11d41-switch_table_16da4), 2 dup (peek_token.loc_11dd5-switch_table_16da4)
0000000000016df8         dd         peek_token.loc_11d1f-switch_table_16da4, peek_token.loc_11dd5-switch_table_16da4, peek_token.loc_11cfd-switch_table_16da4, peek_token.loc_11ce2-switch_table_16da4
0000000000016e08         dd         2 dup (peek_token.loc_11dd5-switch_table_16da4), peek_token.loc_11cc0-switch_table_16da4, 16 dup (peek_token.loc_11dd5-switch_table_16da4), peek_token.loc_11ca5-switch_table_16da4
0000000000016e58         dd         3 dup (peek_token.loc_11dd5-switch_table_16da4), peek_token.loc_11c8a-switch_table_16da4, 8 dup (peek_token.loc_11dd5-switch_table_16da4), peek_token.loc_11c68-switch_table_16da4
0000000000016e8c         dd         peek_token.loc_11dd5-switch_table_16da4, peek_token.loc_11c46-switch_table_16da4, 16 dup (peek_token.loc_11dd5-switch_table_16da4), peek_token.loc_11c0d-switch_table_16da4
0000000000016ed8         dd         3 dup (peek_token.loc_11dd5-switch_table_16da4), peek_token.loc_11bf2-switch_table_16da4, 3 dup (peek_token.loc_11dd5-switch_table_16da4), peek_token.loc_11bd4-switch_table_16da4
0000000000016ef8         dd         peek_token.loc_11bb9-switch_table_16da4, peek_token.loc_11c28-switch_table_16da4
0000000000016f00         db  0xb0 ; '.'                                         ; DATA XREF=parse_expression+75
0000000000016f01         db  0xb1 ; '.'
0000000000016f02         db  0xff ; '.'
0000000000016f03         db  0xff ; '.'
0000000000016f04         db  0x3e ; '>'
0000000000016f05         db  0xbb ; '.'
0000000000016f06         db  0xff ; '.'
0000000000016f07         db  0xff ; '.'
0000000000016f08         db  0xb0 ; '.'
0000000000016f09         db  0xb1 ; '.'
0000000000016f0a         db  0xff ; '.'
0000000000016f0b         db  0xff ; '.'
0000000000016f0c         db  0xb0 ; '.'
0000000000016f0d         db  0xb1 ; '.'
0000000000016f0e         db  0xff ; '.'
0000000000016f0f         db  0xff ; '.'
0000000000016f10         db  0x8f ; '.'
0000000000016f11         db  0xba ; '.'
0000000000016f12         db  0xff ; '.'
0000000000016f13         db  0xff ; '.'
0000000000016f14         db  0xf9 ; '.'
0000000000016f15         db  0xba ; '.'
0000000000016f16         db  0xff ; '.'
0000000000016f17         db  0xff ; '.'
0000000000016f18         db  0xb0 ; '.'
0000000000016f19         db  0xb1 ; '.'
0000000000016f1a         db  0xff ; '.'
0000000000016f1b         db  0xff ; '.'
0000000000016f1c         db  0xb0 ; '.'
0000000000016f1d         db  0xb1 ; '.'
0000000000016f1e         db  0xff ; '.'
0000000000016f1f         db  0xff ; '.'
0000000000016f20         db  0x11 ; '.'
0000000000016f21         db  0xb1 ; '.'
0000000000016f22         db  0xff ; '.'
0000000000016f23         db  0xff ; '.'
0000000000016f24         db  0x28 ; '('
0000000000016f25         db  0xbc ; '.'
0000000000016f26         db  0xff ; '.'
0000000000016f27         db  0xff ; '.'
0000000000016f28         db  0xb0 ; '.'
0000000000016f29         db  0xb1 ; '.'
0000000000016f2a         db  0xff ; '.'
0000000000016f2b         db  0xff ; '.'
0000000000016f2c         db  0xfd ; '.'
0000000000016f2d         db  0xb1 ; '.'
0000000000016f2e         db  0xff ; '.'
0000000000016f2f         db  0xff ; '.'
0000000000016f30         db  0x70 ; 'p'
0000000000016f31         db  0xb7 ; '.'
0000000000016f32         db  0xff ; '.'
0000000000016f33         db  0xff ; '.'
0000000000016f34         db  0xb0 ; '.'
0000000000016f35         db  0xb1 ; '.'
0000000000016f36         db  0xff ; '.'
0000000000016f37         db  0xff ; '.'
0000000000016f38         db  0xb0 ; '.'
0000000000016f39         db  0xb1 ; '.'
0000000000016f3a         db  0xff ; '.'
0000000000016f3b         db  0xff ; '.'
0000000000016f3c         db  0xb0 ; '.'
0000000000016f3d         db  0xb1 ; '.'
0000000000016f3e         db  0xff ; '.'
0000000000016f3f         db  0xff ; '.'
0000000000016f40         db  0xb0 ; '.'
0000000000016f41         db  0xb1 ; '.'
0000000000016f42         db  0xff ; '.'
0000000000016f43         db  0xff ; '.'
0000000000016f44         db  0xb0 ; '.'
0000000000016f45         db  0xb1 ; '.'
0000000000016f46         db  0xff ; '.'
0000000000016f47         db  0xff ; '.'
0000000000016f48         db  0xfd ; '.'
0000000000016f49         db  0xb1 ; '.'
0000000000016f4a         db  0xff ; '.'
0000000000016f4b         db  0xff ; '.'
0000000000016f4c         db  0xfd ; '.'
0000000000016f4d         db  0xb1 ; '.'
0000000000016f4e         db  0xff ; '.'
0000000000016f4f         db  0xff ; '.'
0000000000016f50         db  0xb0 ; '.'
0000000000016f51         db  0xb8 ; '.'
0000000000016f52         db  0xff ; '.'
0000000000016f53         db  0xff ; '.'
0000000000016f54         db  0xb0 ; '.'
0000000000016f55         db  0xb1 ; '.'
0000000000016f56         db  0xff ; '.'
0000000000016f57         db  0xff ; '.'
0000000000016f58         db  0xb0 ; '.'
0000000000016f59         db  0xb1 ; '.'
0000000000016f5a         db  0xff ; '.'
0000000000016f5b         db  0xff ; '.'
0000000000016f5c         db  0xee ; '.'
0000000000016f5d         db  0xb1 ; '.'
0000000000016f5e         db  0xff ; '.'
0000000000016f5f         db  0xff ; '.'
0000000000016f60         db  0x1b ; '.'
0000000000016f61         db  0xb2 ; '.'
0000000000016f62         db  0xff ; '.'
0000000000016f63         db  0xff ; '.'
0000000000016f64         db  0xb0 ; '.'
0000000000016f65         db  0xb1 ; '.'
0000000000016f66         db  0xff ; '.'
0000000000016f67         db  0xff ; '.'
0000000000016f68         db  0xb0 ; '.'
0000000000016f69         db  0xb1 ; '.'
0000000000016f6a         db  0xff ; '.'
0000000000016f6b         db  0xff ; '.'
0000000000016f6c         db  0xb0 ; '.'
0000000000016f6d         db  0xb1 ; '.'
0000000000016f6e         db  0xff ; '.'
0000000000016f6f         db  0xff ; '.'
0000000000016f70         db  0xb0 ; '.'
0000000000016f71         db  0xb1 ; '.'
0000000000016f72         db  0xff ; '.'
0000000000016f73         db  0xff ; '.'
0000000000016f74         db  0xb0 ; '.'
0000000000016f75         db  0xb1 ; '.'
0000000000016f76         db  0xff ; '.'
0000000000016f77         db  0xff ; '.'
0000000000016f78         db  0xb0 ; '.'
0000000000016f79         db  0xb1 ; '.'
0000000000016f7a         db  0xff ; '.'
0000000000016f7b         db  0xff ; '.'
0000000000016f7c         db  0xb0 ; '.'
0000000000016f7d         db  0xb1 ; '.'
0000000000016f7e         db  0xff ; '.'
0000000000016f7f         db  0xff ; '.'
0000000000016f80         db  0x68 ; 'h'
0000000000016f81         db  0xba ; '.'
0000000000016f82         db  0xff ; '.'
0000000000016f83         db  0xff ; '.'
0000000000016f84         db  0x68 ; 'h'
0000000000016f85         db  0xba ; '.'
0000000000016f86         db  0xff ; '.'
0000000000016f87         db  0xff ; '.'
0000000000016f88         db  0x18 ; '.'
0000000000016f89         db  0xba ; '.'
0000000000016f8a         db  0xff ; '.'
0000000000016f8b         db  0xff ; '.'
0000000000016f8c         db  0x18 ; '.'
0000000000016f8d         db  0xba ; '.'
0000000000016f8e         db  0xff ; '.'
0000000000016f8f         db  0xff ; '.'
0000000000016f90         db  0x93 ; '.'
0000000000016f91         db  0xbc ; '.'
0000000000016f92         db  0xff ; '.'
0000000000016f93         db  0xff ; '.'
                     switch_table_16f94:        // switch_table
0000000000016f94         dd         sub_127b0.loc_12c81-switch_table_16f94, sub_127b0.loc_12c57-switch_table_16f94, sub_127b0.loc_12c0d-switch_table_16f94, sub_127b0.loc_12bd5-switch_table_16f94 ; switch table used at 0x12916 containing 5 entries, DATA XREF=sub_127b0+139
0000000000016fa4         dd         sub_127b0.loc_12ca9-switch_table_16f94
0000000000016fa8         db  0x90 ; '.'                                         ; DATA XREF=re_compile_internal+1708
0000000000016fa9         db  0xcf ; '.'
0000000000016faa         db  0xff ; '.'
0000000000016fab         db  0xff ; '.'
0000000000016fac         db  0x90 ; '.'
0000000000016fad         db  0xcf ; '.'
0000000000016fae         db  0xff ; '.'
0000000000016faf         db  0xff ; '.'
0000000000016fb0         db  0x48 ; 'H'
0000000000016fb1         db  0xd1 ; '.'
0000000000016fb2         db  0xff ; '.'
0000000000016fb3         db  0xff ; '.'
0000000000016fb4         db  0x90 ; '.'
0000000000016fb5         db  0xcf ; '.'
0000000000016fb6         db  0xff ; '.'
0000000000016fb7         db  0xff ; '.'
0000000000016fb8         db  0x78 ; 'x'
0000000000016fb9         db  0xd1 ; '.'
0000000000016fba         db  0xff ; '.'
0000000000016fbb         db  0xff ; '.'
0000000000016fbc         db  0x90 ; '.'
0000000000016fbd         db  0xcf ; '.'
0000000000016fbe         db  0xff ; '.'
0000000000016fbf         db  0xff ; '.'
0000000000016fc0         db  0x90 ; '.'
0000000000016fc1         db  0xcf ; '.'
0000000000016fc2         db  0xff ; '.'
0000000000016fc3         db  0xff ; '.'
0000000000016fc4         db  0x90 ; '.'
0000000000016fc5         db  0xcf ; '.'
0000000000016fc6         db  0xff ; '.'
0000000000016fc7         db  0xff ; '.'
0000000000016fc8         db  0xf0 ; '.'
0000000000016fc9         db  0xd0 ; '.'
0000000000016fca         db  0xff ; '.'
0000000000016fcb         db  0xff ; '.'
0000000000016fcc         db  0xf0 ; '.'
0000000000016fcd         db  0xd0 ; '.'
0000000000016fce         db  0xff ; '.'
0000000000016fcf         db  0xff ; '.'
0000000000016fd0         db  0x2f ; '/'
0000000000016fd1         db  0xd0 ; '.'
0000000000016fd2         db  0xff ; '.'
0000000000016fd3         db  0xff ; '.'
0000000000016fd4         db  0x2f ; '/'
0000000000016fd5         db  0xd0 ; '.'
0000000000016fd6         db  0xff ; '.'
0000000000016fd7         db  0xff ; '.'
0000000000016fd8         db  0xf0 ; '.'
0000000000016fd9         db  0xd0 ; '.'
0000000000016fda         db  0xff ; '.'
0000000000016fdb         db  0xff ; '.'
0000000000016fdc         db  0x90 ; '.'
0000000000016fdd         db  0xcf ; '.'
0000000000016fde         db  0xff ; '.'
0000000000016fdf         db  0xff ; '.'
0000000000016fe0         db  0x90 ; '.'
0000000000016fe1         db  0xcf ; '.'
0000000000016fe2         db  0xff ; '.'
0000000000016fe3         db  0xff ; '.'
0000000000016fe4         db  0x90 ; '.'
0000000000016fe5         db  0xcf ; '.'
0000000000016fe6         db  0xff ; '.'
0000000000016fe7         db  0xff ; '.'
0000000000016fe8         db  0xa9 ; '.'
0000000000016fe9         db  0xcf ; '.'
0000000000016fea         db  0xff ; '.'
0000000000016feb         db  0xff ; '.'
0000000000016fec         db  0x42 ; 'B'                                         ; DATA XREF=sub_14120+1071
0000000000016fed         db  0xd8 ; '.'
0000000000016fee         db  0xff ; '.'
0000000000016fef         db  0xff ; '.'
0000000000016ff0         db  0x44 ; 'D'
0000000000016ff1         db  0xd7 ; '.'
0000000000016ff2         db  0xff ; '.'
0000000000016ff3         db  0xff ; '.'
0000000000016ff4         db  0xf0 ; '.'
0000000000016ff5         db  0xd6 ; '.'
0000000000016ff6         db  0xff ; '.'
0000000000016ff7         db  0xff ; '.'
0000000000016ff8         db  0x6c ; 'l'
0000000000016ff9         db  0xd7 ; '.'
0000000000016ffa         db  0xff ; '.'
0000000000016ffb         db  0xff ; '.'
0000000000016ffc         db  0xf0 ; '.'
0000000000016ffd         db  0xd6 ; '.'
0000000000016ffe         db  0xff ; '.'
0000000000016fff         db  0xff ; '.'
0000000000017000         db  0xed ; '.'
0000000000017001         db  0xd6 ; '.'
0000000000017002         db  0xff ; '.'
0000000000017003         db  0xff ; '.'
0000000000017004         db  0x62 ; 'b'
0000000000017005         db  0xd3 ; '.'
0000000000017006         db  0xff ; '.'
0000000000017007         db  0xff ; '.'
0000000000017008         db  0x42 ; 'B'
0000000000017009         db  0xd8 ; '.'
000000000001700a         db  0xff ; '.'
000000000001700b         db  0xff ; '.'
000000000001700c         db  0xf0 ; '.'
000000000001700d         db  0xd6 ; '.'
000000000001700e         db  0xff ; '.'
000000000001700f         db  0xff ; '.'
0000000000017010         db  0xf0 ; '.'
0000000000017011         db  0xd6 ; '.'
0000000000017012         db  0xff ; '.'
0000000000017013         db  0xff ; '.'
0000000000017014         db  0xf0 ; '.'
0000000000017015         db  0xd6 ; '.'
0000000000017016         db  0xff ; '.'
0000000000017017         db  0xff ; '.'
0000000000017018         db  0xf0 ; '.'
0000000000017019         db  0xd6 ; '.'
000000000001701a         db  0xff ; '.'
000000000001701b         db  0xff ; '.'
000000000001701c         db  0x4d ; 'M'
000000000001701d         db  0xd7 ; '.'
000000000001701e         db  0xff ; '.'
000000000001701f         db  0xff ; '.'
                     __PRETTY_FUNCTION__.7859:
0000000000017020         db         "re_copy_regs", 0                           ; DATA XREF=re_search_stub+1089, re_search_stub+1120
000000000001702d         align      16
                     __PRETTY_FUNCTION__.7847:
0000000000017030         db         "re_search_stub", 0                         ; DATA XREF=re_search_stub+1058
000000000001703f         align      64
                     __PRETTY_FUNCTION__.8040:
0000000000017040         db         "pop_fail_stack", 0                         ; DATA XREF=pop_fail_stack.isra.25+117
000000000001704f         align      16
                     __PRETTY_FUNCTION__.7972:
0000000000017050         db         "check_matching", 0                         ; DATA XREF=re_search_internal+4141, re_search_internal+5425
000000000001705f         align      32
                     __PRETTY_FUNCTION__.6981:
0000000000017060         db         "link_nfa_nodes", 0                         ; DATA XREF=sub_140f0+11, sub_147d0+99, sub_147d0+130, sub_147d0+161
000000000001706f         db  0x00 ; '.'
                     __PRETTY_FUNCTION__.7327:
0000000000017070         db         "parse_bracket_exp", 0                      ; DATA XREF=sub_127b0+2810
0000000000017082         db  0x00 ; '.'
0000000000017083         db  0x00 ; '.'
0000000000017084         db  0x00 ; '.'
0000000000017085         db  0x00 ; '.'
0000000000017086         db  0x00 ; '.'
0000000000017087         db  0x00 ; '.'
0000000000017088         db  0x00 ; '.'
0000000000017089         db  0x00 ; '.'
000000000001708a         db  0x00 ; '.'
000000000001708b         db  0x00 ; '.'
000000000001708c         db  0x00 ; '.'
000000000001708d         db  0x00 ; '.'
000000000001708e         db  0x00 ; '.'
000000000001708f         db  0x00 ; '.'
0000000000017090         db  0x00 ; '.'
0000000000017091         db  0x00 ; '.'
0000000000017092         db  0x00 ; '.'
0000000000017093         db  0x00 ; '.'
0000000000017094         db  0x00 ; '.'
0000000000017095         db  0x00 ; '.'
0000000000017096         db  0x00 ; '.'
0000000000017097         db  0x00 ; '.'
0000000000017098         db  0x00 ; '.'
0000000000017099         db  0x00 ; '.'
000000000001709a         db  0x00 ; '.'
000000000001709b         db  0x00 ; '.'
000000000001709c         db  0x00 ; '.'
000000000001709d         db  0x00 ; '.'
000000000001709e         db  0x00 ; '.'
000000000001709f         db  0x00 ; '.'
                     utf8_sb_map:
00000000000170a0         db  0xff ; '.'                                         ; DATA XREF=free_dfa_content+305, re_compile_internal+435
00000000000170a1         db  0xff ; '.'
00000000000170a2         db  0xff ; '.'
00000000000170a3         db  0xff ; '.'
00000000000170a4         db  0xff ; '.'
00000000000170a5         db  0xff ; '.'
00000000000170a6         db  0xff ; '.'
00000000000170a7         db  0xff ; '.'
00000000000170a8         db  0xff ; '.'
00000000000170a9         db  0xff ; '.'
00000000000170aa         db  0xff ; '.'
00000000000170ab         db  0xff ; '.'
00000000000170ac         db  0xff ; '.'
00000000000170ad         db  0xff ; '.'
00000000000170ae         db  0xff ; '.'
00000000000170af         db  0xff ; '.'
00000000000170b0         db  0x00 ; '.'
00000000000170b1         db  0x00 ; '.'
00000000000170b2         db  0x00 ; '.'
00000000000170b3         db  0x00 ; '.'
00000000000170b4         db  0x00 ; '.'
00000000000170b5         db  0x00 ; '.'
00000000000170b6         db  0x00 ; '.'
00000000000170b7         db  0x00 ; '.'
00000000000170b8         db  0x00 ; '.'
00000000000170b9         db  0x00 ; '.'
00000000000170ba         db  0x00 ; '.'
00000000000170bb         db  0x00 ; '.'
00000000000170bc         db  0x00 ; '.'
00000000000170bd         db  0x00 ; '.'
00000000000170be         db  0x00 ; '.'
00000000000170bf         db  0x00 ; '.'
                     __re_error_msgid_idx:
00000000000170c0         db  0x00 ; '.'                                         ; DATA XREF=rpl_re_compile_pattern+62, rpl_regerror+15
00000000000170c1         db  0x00 ; '.'
00000000000170c2         db  0x00 ; '.'
00000000000170c3         db  0x00 ; '.'
00000000000170c4         db  0x00 ; '.'
00000000000170c5         db  0x00 ; '.'
00000000000170c6         db  0x00 ; '.'
00000000000170c7         db  0x00 ; '.'
00000000000170c8         db  0x08 ; '.'
00000000000170c9         db  0x00 ; '.'
00000000000170ca         db  0x00 ; '.'
00000000000170cb         db  0x00 ; '.'
00000000000170cc         db  0x00 ; '.'
00000000000170cd         db  0x00 ; '.'
00000000000170ce         db  0x00 ; '.'
00000000000170cf         db  0x00 ; '.'
00000000000170d0         db  0x11 ; '.'
00000000000170d1         db  0x00 ; '.'
00000000000170d2         db  0x00 ; '.'
00000000000170d3         db  0x00 ; '.'
00000000000170d4         db  0x00 ; '.'
00000000000170d5         db  0x00 ; '.'
00000000000170d6         db  0x00 ; '.'
00000000000170d7         db  0x00 ; '.'
00000000000170d8         db  0x2c ; ','
00000000000170d9         db  0x00 ; '.'
00000000000170da         db  0x00 ; '.'
00000000000170db         db  0x00 ; '.'
00000000000170dc         db  0x00 ; '.'
00000000000170dd         db  0x00 ; '.'
00000000000170de         db  0x00 ; '.'
00000000000170df         db  0x00 ; '.'
00000000000170e0         db  0x48 ; 'H'
00000000000170e1         db  0x00 ; '.'
00000000000170e2         db  0x00 ; '.'
00000000000170e3         db  0x00 ; '.'
00000000000170e4         db  0x00 ; '.'
00000000000170e5         db  0x00 ; '.'
00000000000170e6         db  0x00 ; '.'
00000000000170e7         db  0x00 ; '.'
00000000000170e8         db  0x65 ; 'e'
00000000000170e9         db  0x00 ; '.'
00000000000170ea         db  0x00 ; '.'
00000000000170eb         db  0x00 ; '.'
00000000000170ec         db  0x00 ; '.'
00000000000170ed         db  0x00 ; '.'
00000000000170ee         db  0x00 ; '.'
00000000000170ef         db  0x00 ; '.'
00000000000170f0         db  0x78 ; 'x'
00000000000170f1         db  0x00 ; '.'
00000000000170f2         db  0x00 ; '.'
00000000000170f3         db  0x00 ; '.'
00000000000170f4         db  0x00 ; '.'
00000000000170f5         db  0x00 ; '.'
00000000000170f6         db  0x00 ; '.'
00000000000170f7         db  0x00 ; '.'
00000000000170f8         db  0x8f ; '.'
00000000000170f9         db  0x00 ; '.'
00000000000170fa         db  0x00 ; '.'
00000000000170fb         db  0x00 ; '.'
00000000000170fc         db  0x00 ; '.'
00000000000170fd         db  0x00 ; '.'
00000000000170fe         db  0x00 ; '.'
00000000000170ff         db  0x00 ; '.'
0000000000017100         db  0xae ; '.'
0000000000017101         db  0x00 ; '.'
0000000000017102         db  0x00 ; '.'
0000000000017103         db  0x00 ; '.'
0000000000017104         db  0x00 ; '.'
0000000000017105         db  0x00 ; '.'
0000000000017106         db  0x00 ; '.'
0000000000017107         db  0x00 ; '.'
0000000000017108         db  0xc0 ; '.'
0000000000017109         db  0x00 ; '.'
000000000001710a         db  0x00 ; '.'
000000000001710b         db  0x00 ; '.'
000000000001710c         db  0x00 ; '.'
000000000001710d         db  0x00 ; '.'
000000000001710e         db  0x00 ; '.'
000000000001710f         db  0x00 ; '.'
0000000000017110         db  0xcd ; '.'
0000000000017111         db  0x00 ; '.'
0000000000017112         db  0x00 ; '.'
0000000000017113         db  0x00 ; '.'
0000000000017114         db  0x00 ; '.'
0000000000017115         db  0x00 ; '.'
0000000000017116         db  0x00 ; '.'
0000000000017117         db  0x00 ; '.'
0000000000017118         db  0xe5 ; '.'
0000000000017119         db  0x00 ; '.'
000000000001711a         db  0x00 ; '.'
000000000001711b         db  0x00 ; '.'
000000000001711c         db  0x00 ; '.'
000000000001711d         db  0x00 ; '.'
000000000001711e         db  0x00 ; '.'
000000000001711f         db  0x00 ; '.'
0000000000017120         db  0xf7 ; '.'
0000000000017121         db  0x00 ; '.'
0000000000017122         db  0x00 ; '.'
0000000000017123         db  0x00 ; '.'
0000000000017124         db  0x00 ; '.'
0000000000017125         db  0x00 ; '.'
0000000000017126         db  0x00 ; '.'
0000000000017127         db  0x00 ; '.'
0000000000017128         db  0x08 ; '.'
0000000000017129         db  0x01 ; '.'
000000000001712a         db  0x00 ; '.'
000000000001712b         db  0x00 ; '.'
000000000001712c         db  0x00 ; '.'
000000000001712d         db  0x00 ; '.'
000000000001712e         db  0x00 ; '.'
000000000001712f         db  0x00 ; '.'
0000000000017130         db  0x2d ; '-'
0000000000017131         db  0x01 ; '.'
0000000000017132         db  0x00 ; '.'
0000000000017133         db  0x00 ; '.'
0000000000017134         db  0x00 ; '.'
0000000000017135         db  0x00 ; '.'
0000000000017136         db  0x00 ; '.'
0000000000017137         db  0x00 ; '.'
0000000000017138         db  0x51 ; 'Q'
0000000000017139         db  0x01 ; '.'
000000000001713a         db  0x00 ; '.'
000000000001713b         db  0x00 ; '.'
000000000001713c         db  0x00 ; '.'
000000000001713d         db  0x00 ; '.'
000000000001713e         db  0x00 ; '.'
000000000001713f         db  0x00 ; '.'
0000000000017140         db  0x6c ; 'l'
0000000000017141         db  0x01 ; '.'
0000000000017142         db  0x00 ; '.'
0000000000017143         db  0x00 ; '.'
0000000000017144         db  0x00 ; '.'
0000000000017145         db  0x00 ; '.'
0000000000017146         db  0x00 ; '.'
0000000000017147         db  0x00 ; '.'
0000000000017148         db  0x00 ; '.'
0000000000017149         db  0x00 ; '.'
000000000001714a         db  0x00 ; '.'
000000000001714b         db  0x00 ; '.'
000000000001714c         db  0x00 ; '.'
000000000001714d         db  0x00 ; '.'
000000000001714e         db  0x00 ; '.'
000000000001714f         db  0x00 ; '.'
0000000000017150         db  0x00 ; '.'
0000000000017151         db  0x00 ; '.'
0000000000017152         db  0x00 ; '.'
0000000000017153         db  0x00 ; '.'
0000000000017154         db  0x00 ; '.'
0000000000017155         db  0x00 ; '.'
0000000000017156         db  0x00 ; '.'
0000000000017157         db  0x00 ; '.'
0000000000017158         db  0x00 ; '.'
0000000000017159         db  0x00 ; '.'
000000000001715a         db  0x00 ; '.'
000000000001715b         db  0x00 ; '.'
000000000001715c         db  0x00 ; '.'
000000000001715d         db  0x00 ; '.'
000000000001715e         db  0x00 ; '.'
000000000001715f         db  0x00 ; '.'
                     __re_error_msgid:
0000000000017160         db         "Success", 0                                ; DATA XREF=rpl_re_compile_pattern+71, rpl_regerror+25
0000000000017168         db  0x4e ; 'N'
0000000000017169         db  0x6f ; 'o'
000000000001716a         db  0x20 ; ' '
000000000001716b         db  0x6d ; 'm'
000000000001716c         db  0x61 ; 'a'
000000000001716d         db  0x74 ; 't'
000000000001716e         db  0x63 ; 'c'
000000000001716f         db  0x68 ; 'h'
0000000000017170         db  0x00 ; '.'
0000000000017171         db  0x49 ; 'I'
0000000000017172         db  0x6e ; 'n'
0000000000017173         db  0x76 ; 'v'
0000000000017174         db  0x61 ; 'a'
0000000000017175         db  0x6c ; 'l'
0000000000017176         db  0x69 ; 'i'
0000000000017177         db  0x64 ; 'd'
0000000000017178         db  0x20 ; ' '
0000000000017179         db  0x72 ; 'r'
000000000001717a         db  0x65 ; 'e'
000000000001717b         db  0x67 ; 'g'
000000000001717c         db  0x75 ; 'u'
000000000001717d         db  0x6c ; 'l'
000000000001717e         db  0x61 ; 'a'
000000000001717f         db  0x72 ; 'r'
0000000000017180         db  0x20 ; ' '
0000000000017181         db  0x65 ; 'e'
0000000000017182         db  0x78 ; 'x'
0000000000017183         db  0x70 ; 'p'
0000000000017184         db  0x72 ; 'r'
0000000000017185         db  0x65 ; 'e'
0000000000017186         db  0x73 ; 's'
0000000000017187         db  0x73 ; 's'
0000000000017188         db  0x69 ; 'i'
0000000000017189         db  0x6f ; 'o'
000000000001718a         db  0x6e ; 'n'
000000000001718b         db  0x00 ; '.'
000000000001718c         db  0x49 ; 'I'
000000000001718d         db  0x6e ; 'n'
000000000001718e         db  0x76 ; 'v'
000000000001718f         db  0x61 ; 'a'
0000000000017190         db  0x6c ; 'l'
0000000000017191         db  0x69 ; 'i'
0000000000017192         db  0x64 ; 'd'
0000000000017193         db  0x20 ; ' '
0000000000017194         db  0x63 ; 'c'
0000000000017195         db  0x6f ; 'o'
0000000000017196         db  0x6c ; 'l'
0000000000017197         db  0x6c ; 'l'
0000000000017198         db  0x61 ; 'a'
0000000000017199         db  0x74 ; 't'
000000000001719a         db  0x69 ; 'i'
000000000001719b         db  0x6f ; 'o'
000000000001719c         db  0x6e ; 'n'
000000000001719d         db  0x20 ; ' '
000000000001719e         db  0x63 ; 'c'
000000000001719f         db  0x68 ; 'h'
00000000000171a0         db  0x61 ; 'a'
00000000000171a1         db  0x72 ; 'r'
00000000000171a2         db  0x61 ; 'a'
00000000000171a3         db  0x63 ; 'c'
00000000000171a4         db  0x74 ; 't'
00000000000171a5         db  0x65 ; 'e'
00000000000171a6         db  0x72 ; 'r'
00000000000171a7         db  0x00 ; '.'
00000000000171a8         db  0x49 ; 'I'
00000000000171a9         db  0x6e ; 'n'
00000000000171aa         db  0x76 ; 'v'
00000000000171ab         db  0x61 ; 'a'
00000000000171ac         db  0x6c ; 'l'
00000000000171ad         db  0x69 ; 'i'
00000000000171ae         db  0x64 ; 'd'
00000000000171af         db  0x20 ; ' '
00000000000171b0         db  0x63 ; 'c'
00000000000171b1         db  0x68 ; 'h'
00000000000171b2         db  0x61 ; 'a'
00000000000171b3         db  0x72 ; 'r'
00000000000171b4         db  0x61 ; 'a'
00000000000171b5         db  0x63 ; 'c'
00000000000171b6         db  0x74 ; 't'
00000000000171b7         db  0x65 ; 'e'
00000000000171b8         db  0x72 ; 'r'
00000000000171b9         db  0x20 ; ' '
00000000000171ba         db  0x63 ; 'c'
00000000000171bb         db  0x6c ; 'l'
00000000000171bc         db  0x61 ; 'a'
00000000000171bd         db  0x73 ; 's'
00000000000171be         db  0x73 ; 's'
00000000000171bf         db  0x20 ; ' '
00000000000171c0         db  0x6e ; 'n'
00000000000171c1         db  0x61 ; 'a'
00000000000171c2         db  0x6d ; 'm'
00000000000171c3         db  0x65 ; 'e'
00000000000171c4         db  0x00 ; '.'
00000000000171c5         db  0x54 ; 'T'
00000000000171c6         db  0x72 ; 'r'
00000000000171c7         db  0x61 ; 'a'
00000000000171c8         db  0x69 ; 'i'
00000000000171c9         db  0x6c ; 'l'
00000000000171ca         db  0x69 ; 'i'
00000000000171cb         db  0x6e ; 'n'
00000000000171cc         db  0x67 ; 'g'
00000000000171cd         db  0x20 ; ' '
00000000000171ce         db  0x62 ; 'b'
00000000000171cf         db  0x61 ; 'a'
00000000000171d0         db  0x63 ; 'c'
00000000000171d1         db  0x6b ; 'k'
00000000000171d2         db  0x73 ; 's'
00000000000171d3         db  0x6c ; 'l'
00000000000171d4         db  0x61 ; 'a'
00000000000171d5         db  0x73 ; 's'
00000000000171d6         db  0x68 ; 'h'
00000000000171d7         db  0x00 ; '.'
00000000000171d8         db  0x49 ; 'I'
00000000000171d9         db  0x6e ; 'n'
00000000000171da         db  0x76 ; 'v'
00000000000171db         db  0x61 ; 'a'
00000000000171dc         db  0x6c ; 'l'
00000000000171dd         db  0x69 ; 'i'
00000000000171de         db  0x64 ; 'd'
00000000000171df         db  0x20 ; ' '
00000000000171e0         db  0x62 ; 'b'
00000000000171e1         db  0x61 ; 'a'
00000000000171e2         db  0x63 ; 'c'
00000000000171e3         db  0x6b ; 'k'
00000000000171e4         db  0x20 ; ' '
00000000000171e5         db  0x72 ; 'r'
00000000000171e6         db  0x65 ; 'e'
00000000000171e7         db  0x66 ; 'f'
00000000000171e8         db  0x65 ; 'e'
00000000000171e9         db  0x72 ; 'r'
00000000000171ea         db  0x65 ; 'e'
00000000000171eb         db  0x6e ; 'n'
00000000000171ec         db  0x63 ; 'c'
00000000000171ed         db  0x65 ; 'e'
00000000000171ee         db  0x00 ; '.'
00000000000171ef         db  0x55 ; 'U'
00000000000171f0         db  0x6e ; 'n'
00000000000171f1         db  0x6d ; 'm'
00000000000171f2         db  0x61 ; 'a'
00000000000171f3         db  0x74 ; 't'
00000000000171f4         db  0x63 ; 'c'
00000000000171f5         db  0x68 ; 'h'
00000000000171f6         db  0x65 ; 'e'
00000000000171f7         db  0x64 ; 'd'
00000000000171f8         db  0x20 ; ' '
00000000000171f9         db  0x5b ; '['
00000000000171fa         db  0x2c ; ','
00000000000171fb         db  0x20 ; ' '
00000000000171fc         db  0x5b ; '['
00000000000171fd         db  0x5e ; '^'
00000000000171fe         db  0x2c ; ','
00000000000171ff         db  0x20 ; ' '
0000000000017200         db  0x5b ; '['
0000000000017201         db  0x3a ; ':'
0000000000017202         db  0x2c ; ','
0000000000017203         db  0x20 ; ' '
0000000000017204         db  0x5b ; '['
0000000000017205         db  0x2e ; '.'
0000000000017206         db  0x2c ; ','
0000000000017207         db  0x20 ; ' '
0000000000017208         db  0x6f ; 'o'
0000000000017209         db  0x72 ; 'r'
000000000001720a         db  0x20 ; ' '
000000000001720b         db  0x5b ; '['
000000000001720c         db  0x3d ; '='
000000000001720d         db  0x00 ; '.'
000000000001720e         db  0x55 ; 'U'
000000000001720f         db  0x6e ; 'n'
0000000000017210         db  0x6d ; 'm'
0000000000017211         db  0x61 ; 'a'
0000000000017212         db  0x74 ; 't'
0000000000017213         db  0x63 ; 'c'
0000000000017214         db  0x68 ; 'h'
0000000000017215         db  0x65 ; 'e'
0000000000017216         db  0x64 ; 'd'
0000000000017217         db  0x20 ; ' '
0000000000017218         db  0x28 ; '('
0000000000017219         db  0x20 ; ' '
000000000001721a         db  0x6f ; 'o'
000000000001721b         db  0x72 ; 'r'
000000000001721c         db  0x20 ; ' '
000000000001721d         db  0x5c ; '\'
000000000001721e         db  0x28 ; '('
000000000001721f         db  0x00 ; '.'
0000000000017220         db  0x55 ; 'U'
0000000000017221         db  0x6e ; 'n'
0000000000017222         db  0x6d ; 'm'
0000000000017223         db  0x61 ; 'a'
0000000000017224         db  0x74 ; 't'
0000000000017225         db  0x63 ; 'c'
0000000000017226         db  0x68 ; 'h'
0000000000017227         db  0x65 ; 'e'
0000000000017228         db  0x64 ; 'd'
0000000000017229         db  0x20 ; ' '
000000000001722a         db  0x5c ; '\'
000000000001722b         db  0x7b ; '{'
000000000001722c         db  0x00 ; '.'
000000000001722d         db  0x49 ; 'I'
000000000001722e         db  0x6e ; 'n'
000000000001722f         db  0x76 ; 'v'
0000000000017230         db  0x61 ; 'a'
0000000000017231         db  0x6c ; 'l'
0000000000017232         db  0x69 ; 'i'
0000000000017233         db  0x64 ; 'd'
0000000000017234         db  0x20 ; ' '
0000000000017235         db  0x63 ; 'c'
0000000000017236         db  0x6f ; 'o'
0000000000017237         db  0x6e ; 'n'
0000000000017238         db  0x74 ; 't'
0000000000017239         db  0x65 ; 'e'
000000000001723a         db  0x6e ; 'n'
000000000001723b         db  0x74 ; 't'
000000000001723c         db  0x20 ; ' '
000000000001723d         db  0x6f ; 'o'
000000000001723e         db  0x66 ; 'f'
000000000001723f         db  0x20 ; ' '
0000000000017240         db  0x5c ; '\'
0000000000017241         db  0x7b ; '{'
0000000000017242         db  0x5c ; '\'
0000000000017243         db  0x7d ; '}'
0000000000017244         db  0x00 ; '.'
0000000000017245         db  0x49 ; 'I'
0000000000017246         db  0x6e ; 'n'
0000000000017247         db  0x76 ; 'v'
0000000000017248         db  0x61 ; 'a'
0000000000017249         db  0x6c ; 'l'
000000000001724a         db  0x69 ; 'i'
000000000001724b         db  0x64 ; 'd'
000000000001724c         db  0x20 ; ' '
000000000001724d         db  0x72 ; 'r'
000000000001724e         db  0x61 ; 'a'
000000000001724f         db  0x6e ; 'n'
0000000000017250         db  0x67 ; 'g'
0000000000017251         db  0x65 ; 'e'
0000000000017252         db  0x20 ; ' '
0000000000017253         db  0x65 ; 'e'
0000000000017254         db  0x6e ; 'n'
0000000000017255         db  0x64 ; 'd'
0000000000017256         db  0x00 ; '.'
0000000000017257         db  0x4d ; 'M'
0000000000017258         db  0x65 ; 'e'
0000000000017259         db  0x6d ; 'm'
000000000001725a         db  0x6f ; 'o'
000000000001725b         db  0x72 ; 'r'
000000000001725c         db  0x79 ; 'y'
000000000001725d         db  0x20 ; ' '
000000000001725e         db  0x65 ; 'e'
000000000001725f         db  0x78 ; 'x'
0000000000017260         db  0x68 ; 'h'
0000000000017261         db  0x61 ; 'a'
0000000000017262         db  0x75 ; 'u'
0000000000017263         db  0x73 ; 's'
0000000000017264         db  0x74 ; 't'
0000000000017265         db  0x65 ; 'e'
0000000000017266         db  0x64 ; 'd'
0000000000017267         db  0x00 ; '.'
0000000000017268         db  0x49 ; 'I'
0000000000017269         db  0x6e ; 'n'
000000000001726a         db  0x76 ; 'v'
000000000001726b         db  0x61 ; 'a'
000000000001726c         db  0x6c ; 'l'
000000000001726d         db  0x69 ; 'i'
000000000001726e         db  0x64 ; 'd'
000000000001726f         db  0x20 ; ' '
0000000000017270         db  0x70 ; 'p'
0000000000017271         db  0x72 ; 'r'
0000000000017272         db  0x65 ; 'e'
0000000000017273         db  0x63 ; 'c'
0000000000017274         db  0x65 ; 'e'
0000000000017275         db  0x64 ; 'd'
0000000000017276         db  0x69 ; 'i'
0000000000017277         db  0x6e ; 'n'
0000000000017278         db  0x67 ; 'g'
0000000000017279         db  0x20 ; ' '
000000000001727a         db  0x72 ; 'r'
000000000001727b         db  0x65 ; 'e'
000000000001727c         db  0x67 ; 'g'
000000000001727d         db  0x75 ; 'u'
000000000001727e         db  0x6c ; 'l'
000000000001727f         db  0x61 ; 'a'
0000000000017280         db  0x72 ; 'r'
0000000000017281         db  0x20 ; ' '
0000000000017282         db  0x65 ; 'e'
0000000000017283         db  0x78 ; 'x'
0000000000017284         db  0x70 ; 'p'
0000000000017285         db  0x72 ; 'r'
0000000000017286         db  0x65 ; 'e'
0000000000017287         db  0x73 ; 's'
0000000000017288         db  0x73 ; 's'
0000000000017289         db  0x69 ; 'i'
000000000001728a         db  0x6f ; 'o'
000000000001728b         db  0x6e ; 'n'
000000000001728c         db  0x00 ; '.'
000000000001728d         db  0x50 ; 'P'
000000000001728e         db  0x72 ; 'r'
000000000001728f         db  0x65 ; 'e'
0000000000017290         db  0x6d ; 'm'
0000000000017291         db  0x61 ; 'a'
0000000000017292         db  0x74 ; 't'
0000000000017293         db  0x75 ; 'u'
0000000000017294         db  0x72 ; 'r'
0000000000017295         db  0x65 ; 'e'
0000000000017296         db  0x20 ; ' '
0000000000017297         db  0x65 ; 'e'
0000000000017298         db  0x6e ; 'n'
0000000000017299         db  0x64 ; 'd'
000000000001729a         db  0x20 ; ' '
000000000001729b         db  0x6f ; 'o'
000000000001729c         db  0x66 ; 'f'
000000000001729d         db  0x20 ; ' '
000000000001729e         db  0x72 ; 'r'
000000000001729f         db  0x65 ; 'e'
00000000000172a0         db  0x67 ; 'g'
00000000000172a1         db  0x75 ; 'u'
00000000000172a2         db  0x6c ; 'l'
00000000000172a3         db  0x61 ; 'a'
00000000000172a4         db  0x72 ; 'r'
00000000000172a5         db  0x20 ; ' '
00000000000172a6         db  0x65 ; 'e'
00000000000172a7         db  0x78 ; 'x'
00000000000172a8         db  0x70 ; 'p'
00000000000172a9         db  0x72 ; 'r'
00000000000172aa         db  0x65 ; 'e'
00000000000172ab         db  0x73 ; 's'
00000000000172ac         db  0x73 ; 's'
00000000000172ad         db  0x69 ; 'i'
00000000000172ae         db  0x6f ; 'o'
00000000000172af         db  0x6e ; 'n'
00000000000172b0         db  0x00 ; '.'
00000000000172b1         db  0x52 ; 'R'
00000000000172b2         db  0x65 ; 'e'
00000000000172b3         db  0x67 ; 'g'
00000000000172b4         db  0x75 ; 'u'
00000000000172b5         db  0x6c ; 'l'
00000000000172b6         db  0x61 ; 'a'
00000000000172b7         db  0x72 ; 'r'
00000000000172b8         db  0x20 ; ' '
00000000000172b9         db  0x65 ; 'e'
00000000000172ba         db  0x78 ; 'x'
00000000000172bb         db  0x70 ; 'p'
00000000000172bc         db  0x72 ; 'r'
00000000000172bd         db  0x65 ; 'e'
00000000000172be         db  0x73 ; 's'
00000000000172bf         db  0x73 ; 's'
00000000000172c0         db  0x69 ; 'i'
00000000000172c1         db  0x6f ; 'o'
00000000000172c2         db  0x6e ; 'n'
00000000000172c3         db  0x20 ; ' '
00000000000172c4         db  0x74 ; 't'
00000000000172c5         db  0x6f ; 'o'
00000000000172c6         db  0x6f ; 'o'
00000000000172c7         db  0x20 ; ' '
00000000000172c8         db  0x62 ; 'b'
00000000000172c9         db  0x69 ; 'i'
00000000000172ca         db  0x67 ; 'g'
00000000000172cb         db  0x00 ; '.'
00000000000172cc         db  0x55 ; 'U'
00000000000172cd         db  0x6e ; 'n'
00000000000172ce         db  0x6d ; 'm'
00000000000172cf         db  0x61 ; 'a'
00000000000172d0         db  0x74 ; 't'
00000000000172d1         db  0x63 ; 'c'
00000000000172d2         db  0x68 ; 'h'
00000000000172d3         db  0x65 ; 'e'
00000000000172d4         db  0x64 ; 'd'
00000000000172d5         db  0x20 ; ' '
00000000000172d6         db  0x29 ; ')'
00000000000172d7         db  0x20 ; ' '
00000000000172d8         db  0x6f ; 'o'
00000000000172d9         db  0x72 ; 'r'
00000000000172da         db  0x20 ; ' '
00000000000172db         db  0x5c ; '\'
00000000000172dc         db  0x29 ; ')'
00000000000172dd         db  0x00 ; '.'
00000000000172de         db  0x00 ; '.'
00000000000172df         db  0x00 ; '.'
00000000000172e0         dq         2 dup (7.7486e-304)                         ; DATA XREF=re_compile_fastmap_iter.isra.30+1044, re_compile_fastmap_iter.isra.30+1204
00000000000172f0         db  0x43 ; 'C'                                         ; DATA XREF=hard_locale+24
00000000000172f1         db  0x00 ; '.'
                     aPosix:
00000000000172f2         db         "POSIX", 0                                  ; DATA XREF=hard_locale+64
                     aAscii:
00000000000172f8         db         "ASCII", 0                                  ; DATA XREF=locale_charset+22, locale_charset+48
00000000000172fe         db  0x00 ; '.'
00000000000172ff         db  0x00 ; '.'


        ; Section .eh_frame_hdr
        ; Range: [0x17300; 0x178dc[ (1500 bytes)
        ; File offset : [94976; 96476[ (1500 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

0000000000017300         db  0x01 ; '.'
0000000000017301         db  0x1b ; '.'
0000000000017302         db  0x03 ; '.'
0000000000017303         db  0x3b ; ';'
0000000000017304         db  0xdc ; '.'
0000000000017305         db  0x05 ; '.'
0000000000017306         db  0x00 ; '.'
0000000000017307         db  0x00 ; '.'
0000000000017308         db  0xba ; '.'
0000000000017309         db  0x00 ; '.'
000000000001730a         db  0x00 ; '.'
000000000001730b         db  0x00 ; '.'
000000000001730c         db  0xb0 ; '.'
000000000001730d         db  0xa6 ; '.'
000000000001730e         db  0xfe ; '.'
000000000001730f         db  0xff ; '.'
0000000000017310         db  0x28 ; '('
0000000000017311         db  0x06 ; '.'
0000000000017312         db  0x00 ; '.'
0000000000017313         db  0x00 ; '.'
0000000000017314         db  0xd0 ; '.'
0000000000017315         db  0xaa ; '.'
0000000000017316         db  0xfe ; '.'
0000000000017317         db  0xff ; '.'
0000000000017318         db  0x50 ; 'P'
0000000000017319         db  0x06 ; '.'
000000000001731a         db  0x00 ; '.'
000000000001731b         db  0x00 ; '.'
000000000001731c         db  0xe0 ; '.'
000000000001731d         db  0xaa ; '.'
000000000001731e         db  0xfe ; '.'
000000000001731f         db  0xff ; '.'
0000000000017320         db  0xfc ; '.'
0000000000017321         db  0x06 ; '.'
0000000000017322         db  0x00 ; '.'
0000000000017323         db  0x00 ; '.'
0000000000017324         db  0x10 ; '.'
0000000000017325         db  0xab ; '.'
0000000000017326         db  0xfe ; '.'
0000000000017327         db  0xff ; '.'
0000000000017328         db  0xc8 ; '.'
0000000000017329         db  0x09 ; '.'
000000000001732a         db  0x00 ; '.'
000000000001732b         db  0x00 ; '.'
000000000001732c         db  0xd0 ; '.'
000000000001732d         db  0xac ; '.'
000000000001732e         db  0xfe ; '.'
000000000001732f         db  0xff ; '.'
0000000000017330         db  0xf8 ; '.'
0000000000017331         db  0x05 ; '.'
0000000000017332         db  0x00 ; '.'
0000000000017333         db  0x00 ; '.'
0000000000017334         db  0xe0 ; '.'
0000000000017335         db  0xad ; '.'
0000000000017336         db  0xfe ; '.'
0000000000017337         db  0xff ; '.'
0000000000017338         db  0x68 ; 'h'
0000000000017339         db  0x06 ; '.'
000000000001733a         db  0x00 ; '.'
000000000001733b         db  0x00 ; '.'
000000000001733c         db  0x10 ; '.'
000000000001733d         db  0xae ; '.'
000000000001733e         db  0xfe ; '.'
000000000001733f         db  0xff ; '.'
0000000000017340         db  0x84 ; '.'
0000000000017341         db  0x06 ; '.'
0000000000017342         db  0x00 ; '.'
0000000000017343         db  0x00 ; '.'
0000000000017344         db  0x60 ; '`'
0000000000017345         db  0xae ; '.'
0000000000017346         db  0xfe ; '.'
0000000000017347         db  0xff ; '.'
0000000000017348         db  0x9c ; '.'
0000000000017349         db  0x06 ; '.'
000000000001734a         db  0x00 ; '.'
000000000001734b         db  0x00 ; '.'
000000000001734c         db  0xa0 ; '.'
000000000001734d         db  0xae ; '.'
000000000001734e         db  0xfe ; '.'
000000000001734f         db  0xff ; '.'
0000000000017350         db  0xc4 ; '.'
0000000000017351         db  0x06 ; '.'
0000000000017352         db  0x00 ; '.'
0000000000017353         db  0x00 ; '.'
0000000000017354         db  0xe0 ; '.'
0000000000017355         db  0xae ; '.'
0000000000017356         db  0xfe ; '.'
0000000000017357         db  0xff ; '.'
0000000000017358         db  0xe4 ; '.'
0000000000017359         db  0x06 ; '.'
000000000001735a         db  0x00 ; '.'
000000000001735b         db  0x00 ; '.'
000000000001735c         db  0x50 ; 'P'
000000000001735d         db  0xaf ; '.'
000000000001735e         db  0xfe ; '.'
000000000001735f         db  0xff ; '.'
0000000000017360         db  0x10 ; '.'
0000000000017361         db  0x07 ; '.'
0000000000017362         db  0x00 ; '.'
0000000000017363         db  0x00 ; '.'
0000000000017364         db  0xe0 ; '.'
0000000000017365         db  0xaf ; '.'
0000000000017366         db  0xfe ; '.'
0000000000017367         db  0xff ; '.'
0000000000017368         db  0x50 ; 'P'
0000000000017369         db  0x07 ; '.'
000000000001736a         db  0x00 ; '.'
000000000001736b         db  0x00 ; '.'
000000000001736c         db  0x30 ; '0'
000000000001736d         db  0xb0 ; '.'
000000000001736e         db  0xfe ; '.'
000000000001736f         db  0xff ; '.'
0000000000017370         db  0x88 ; '.'
0000000000017371         db  0x07 ; '.'
0000000000017372         db  0x00 ; '.'
0000000000017373         db  0x00 ; '.'
0000000000017374         db  0xb0 ; '.'
0000000000017375         db  0xb4 ; '.'
0000000000017376         db  0xfe ; '.'
0000000000017377         db  0xff ; '.'
0000000000017378         db  0xb4 ; '.'
0000000000017379         db  0x07 ; '.'
000000000001737a         db  0x00 ; '.'
000000000001737b         db  0x00 ; '.'
000000000001737c         db  0x60 ; '`'
000000000001737d         db  0xb9 ; '.'
000000000001737e         db  0xfe ; '.'
000000000001737f         db  0xff ; '.'
0000000000017380         db  0x04 ; '.'
0000000000017381         db  0x08 ; '.'
0000000000017382         db  0x00 ; '.'
0000000000017383         db  0x00 ; '.'
0000000000017384         db  0x10 ; '.'
0000000000017385         db  0xc5 ; '.'
0000000000017386         db  0xfe ; '.'
0000000000017387         db  0xff ; '.'
0000000000017388         db  0x54 ; 'T'
0000000000017389         db  0x08 ; '.'
000000000001738a         db  0x00 ; '.'
000000000001738b         db  0x00 ; '.'
000000000001738c         db  0xa0 ; '.'
000000000001738d         db  0xc5 ; '.'
000000000001738e         db  0xfe ; '.'
000000000001738f         db  0xff ; '.'
0000000000017390         db  0x9c ; '.'
0000000000017391         db  0x08 ; '.'
0000000000017392         db  0x00 ; '.'
0000000000017393         db  0x00 ; '.'
0000000000017394         db  0xf0 ; '.'
0000000000017395         db  0xc6 ; '.'
0000000000017396         db  0xfe ; '.'
0000000000017397         db  0xff ; '.'
0000000000017398         db  0xdc ; '.'
0000000000017399         db  0x08 ; '.'
000000000001739a         db  0x00 ; '.'
000000000001739b         db  0x00 ; '.'
000000000001739c         db  0xd0 ; '.'
000000000001739d         db  0xc7 ; '.'
000000000001739e         db  0xfe ; '.'
000000000001739f         db  0xff ; '.'
00000000000173a0         db  0x1c ; '.'
00000000000173a1         db  0x09 ; '.'
00000000000173a2         db  0x00 ; '.'
00000000000173a3         db  0x00 ; '.'
00000000000173a4         db  0x30 ; '0'
00000000000173a5         db  0xca ; '.'
00000000000173a6         db  0xfe ; '.'
00000000000173a7         db  0xff ; '.'
00000000000173a8         db  0x68 ; 'h'
00000000000173a9         db  0x09 ; '.'
00000000000173aa         db  0x00 ; '.'
00000000000173ab         db  0x00 ; '.'
00000000000173ac         db  0xe0 ; '.'
00000000000173ad         db  0xca ; '.'
00000000000173ae         db  0xfe ; '.'
00000000000173af         db  0xff ; '.'
00000000000173b0         db  0x98 ; '.'
00000000000173b1         db  0x09 ; '.'
00000000000173b2         db  0x00 ; '.'
00000000000173b3         db  0x00 ; '.'
00000000000173b4         db  0xa0 ; '.'
00000000000173b5         db  0xcb ; '.'
00000000000173b6         db  0xfe ; '.'
00000000000173b7         db  0xff ; '.'
00000000000173b8         db  0x08 ; '.'
00000000000173b9         db  0x0a ; '.'
00000000000173ba         db  0x00 ; '.'
00000000000173bb         db  0x00 ; '.'
00000000000173bc         db  0xb0 ; '.'
00000000000173bd         db  0xcb ; '.'
00000000000173be         db  0xfe ; '.'
00000000000173bf         db  0xff ; '.'
00000000000173c0         db  0x1c ; '.'
00000000000173c1         db  0x0a ; '.'
00000000000173c2         db  0x00 ; '.'
00000000000173c3         db  0x00 ; '.'
00000000000173c4         db  0xc0 ; '.'
00000000000173c5         db  0xcb ; '.'
00000000000173c6         db  0xfe ; '.'
00000000000173c7         db  0xff ; '.'
00000000000173c8         db  0x30 ; '0'
00000000000173c9         db  0x0a ; '.'
00000000000173ca         db  0x00 ; '.'
00000000000173cb         db  0x00 ; '.'
00000000000173cc         db  0x70 ; 'p'
00000000000173cd         db  0xcc ; '.'
00000000000173ce         db  0xfe ; '.'
00000000000173cf         db  0xff ; '.'
00000000000173d0         db  0x60 ; '`'
00000000000173d1         db  0x0a ; '.'
00000000000173d2         db  0x00 ; '.'
00000000000173d3         db  0x00 ; '.'
00000000000173d4         db  0xb0 ; '.'
00000000000173d5         db  0xcd ; '.'
00000000000173d6         db  0xfe ; '.'
00000000000173d7         db  0xff ; '.'
00000000000173d8         db  0x9c ; '.'
00000000000173d9         db  0x0a ; '.'
00000000000173da         db  0x00 ; '.'
00000000000173db         db  0x00 ; '.'
00000000000173dc         db  0xf0 ; '.'
00000000000173dd         db  0xce ; '.'
00000000000173de         db  0xfe ; '.'
00000000000173df         db  0xff ; '.'
00000000000173e0         db  0xe8 ; '.'
00000000000173e1         db  0x0a ; '.'
00000000000173e2         db  0x00 ; '.'
00000000000173e3         db  0x00 ; '.'
00000000000173e4         db  0x20 ; ' '
00000000000173e5         db  0xcf ; '.'
00000000000173e6         db  0xfe ; '.'
00000000000173e7         db  0xff ; '.'
00000000000173e8         db  0x08 ; '.'
00000000000173e9         db  0x0b ; '.'
00000000000173ea         db  0x00 ; '.'
00000000000173eb         db  0x00 ; '.'
00000000000173ec         db  0x80 ; '.'
00000000000173ed         db  0xcf ; '.'
00000000000173ee         db  0xfe ; '.'
00000000000173ef         db  0xff ; '.'
00000000000173f0         db  0x34 ; '4'
00000000000173f1         db  0x0b ; '.'
00000000000173f2         db  0x00 ; '.'
00000000000173f3         db  0x00 ; '.'
00000000000173f4         db  0xa0 ; '.'
00000000000173f5         db  0xcf ; '.'
00000000000173f6         db  0xfe ; '.'
00000000000173f7         db  0xff ; '.'
00000000000173f8         db  0x48 ; 'H'
00000000000173f9         db  0x0b ; '.'
00000000000173fa         db  0x00 ; '.'
00000000000173fb         db  0x00 ; '.'
00000000000173fc         db  0x50 ; 'P'
00000000000173fd         db  0xd2 ; '.'
00000000000173fe         db  0xfe ; '.'
00000000000173ff         db  0xff ; '.'
0000000000017400         db  0xa8 ; '.'
0000000000017401         db  0x0b ; '.'
0000000000017402         db  0x00 ; '.'
0000000000017403         db  0x00 ; '.'
0000000000017404         db  0x80 ; '.'
0000000000017405         db  0xd4 ; '.'
0000000000017406         db  0xfe ; '.'
0000000000017407         db  0xff ; '.'
0000000000017408         db  0xf0 ; '.'
0000000000017409         db  0x0b ; '.'
000000000001740a         db  0x00 ; '.'
000000000001740b         db  0x00 ; '.'
000000000001740c         db  0x20 ; ' '
000000000001740d         db  0xd5 ; '.'
000000000001740e         db  0xfe ; '.'
000000000001740f         db  0xff ; '.'
0000000000017410         db  0x10 ; '.'
0000000000017411         db  0x0c ; '.'
0000000000017412         db  0x00 ; '.'
0000000000017413         db  0x00 ; '.'
0000000000017414         db  0x10 ; '.'
0000000000017415         db  0xd6 ; '.'
0000000000017416         db  0xfe ; '.'
0000000000017417         db  0xff ; '.'
0000000000017418         db  0x54 ; 'T'
0000000000017419         db  0x0c ; '.'
000000000001741a         db  0x00 ; '.'
000000000001741b         db  0x00 ; '.'
000000000001741c         db  0x50 ; 'P'
000000000001741d         db  0xe8 ; '.'
000000000001741e         db  0xfe ; '.'
000000000001741f         db  0xff ; '.'
0000000000017420         db  0xcc ; '.'
0000000000017421         db  0x0c ; '.'
0000000000017422         db  0x00 ; '.'
0000000000017423         db  0x00 ; '.'
0000000000017424         db  0x00 ; '.'
0000000000017425         db  0xea ; '.'
0000000000017426         db  0xfe ; '.'
0000000000017427         db  0xff ; '.'
0000000000017428         db  0x38 ; '8'
0000000000017429         db  0x0d ; '.'
000000000001742a         db  0x00 ; '.'
000000000001742b         db  0x00 ; '.'
000000000001742c         db  0x40 ; '@'
000000000001742d         db  0xea ; '.'
000000000001742e         db  0xfe ; '.'
000000000001742f         db  0xff ; '.'
0000000000017430         db  0x64 ; 'd'
0000000000017431         db  0x0d ; '.'
0000000000017432         db  0x00 ; '.'
0000000000017433         db  0x00 ; '.'
0000000000017434         db  0x60 ; '`'
0000000000017435         db  0xea ; '.'
0000000000017436         db  0xfe ; '.'
0000000000017437         db  0xff ; '.'
0000000000017438         db  0x78 ; 'x'
0000000000017439         db  0x0d ; '.'
000000000001743a         db  0x00 ; '.'
000000000001743b         db  0x00 ; '.'
000000000001743c         db  0x80 ; '.'
000000000001743d         db  0xea ; '.'
000000000001743e         db  0xfe ; '.'
000000000001743f         db  0xff ; '.'
0000000000017440         db  0x8c ; '.'
0000000000017441         db  0x0d ; '.'
0000000000017442         db  0x00 ; '.'
0000000000017443         db  0x00 ; '.'
0000000000017444         db  0xc0 ; '.'
0000000000017445         db  0xea ; '.'
0000000000017446         db  0xfe ; '.'
0000000000017447         db  0xff ; '.'
0000000000017448         db  0xa0 ; '.'
0000000000017449         db  0x0d ; '.'
000000000001744a         db  0x00 ; '.'
000000000001744b         db  0x00 ; '.'
000000000001744c         db  0xe0 ; '.'
000000000001744d         db  0xea ; '.'
000000000001744e         db  0xfe ; '.'
000000000001744f         db  0xff ; '.'
0000000000017450         db  0xb4 ; '.'
0000000000017451         db  0x0d ; '.'
0000000000017452         db  0x00 ; '.'
0000000000017453         db  0x00 ; '.'
0000000000017454         db  0x10 ; '.'
0000000000017455         db  0xeb ; '.'
0000000000017456         db  0xfe ; '.'
0000000000017457         db  0xff ; '.'
0000000000017458         db  0xc8 ; '.'
0000000000017459         db  0x0d ; '.'
000000000001745a         db  0x00 ; '.'
000000000001745b         db  0x00 ; '.'
000000000001745c         db  0x90 ; '.'
000000000001745d         db  0xeb ; '.'
000000000001745e         db  0xfe ; '.'
000000000001745f         db  0xff ; '.'
0000000000017460         db  0x1c ; '.'
0000000000017461         db  0x0e ; '.'
0000000000017462         db  0x00 ; '.'
0000000000017463         db  0x00 ; '.'
0000000000017464         db  0x80 ; '.'
0000000000017465         db  0xec ; '.'
0000000000017466         db  0xfe ; '.'
0000000000017467         db  0xff ; '.'
0000000000017468         db  0x88 ; '.'
0000000000017469         db  0x0e ; '.'
000000000001746a         db  0x00 ; '.'
000000000001746b         db  0x00 ; '.'
000000000001746c         db  0x90 ; '.'
000000000001746d         db  0xec ; '.'
000000000001746e         db  0xfe ; '.'
000000000001746f         db  0xff ; '.'
0000000000017470         db  0x9c ; '.'
0000000000017471         db  0x0e ; '.'
0000000000017472         db  0x00 ; '.'
0000000000017473         db  0x00 ; '.'
0000000000017474         db  0x30 ; '0'
0000000000017475         db  0xed ; '.'
0000000000017476         db  0xfe ; '.'
0000000000017477         db  0xff ; '.'
0000000000017478         db  0xc8 ; '.'
0000000000017479         db  0x0e ; '.'
000000000001747a         db  0x00 ; '.'
000000000001747b         db  0x00 ; '.'
000000000001747c         db  0x50 ; 'P'
000000000001747d         db  0xed ; '.'
000000000001747e         db  0xfe ; '.'
000000000001747f         db  0xff ; '.'
0000000000017480         db  0xdc ; '.'
0000000000017481         db  0x0e ; '.'
0000000000017482         db  0x00 ; '.'
0000000000017483         db  0x00 ; '.'
0000000000017484         db  0x60 ; '`'
0000000000017485         db  0xed ; '.'
0000000000017486         db  0xfe ; '.'
0000000000017487         db  0xff ; '.'
0000000000017488         db  0xf0 ; '.'
0000000000017489         db  0x0e ; '.'
000000000001748a         db  0x00 ; '.'
000000000001748b         db  0x00 ; '.'
000000000001748c         db  0x80 ; '.'
000000000001748d         db  0xed ; '.'
000000000001748e         db  0xfe ; '.'
000000000001748f         db  0xff ; '.'
0000000000017490         db  0x04 ; '.'
0000000000017491         db  0x0f ; '.'
0000000000017492         db  0x00 ; '.'
0000000000017493         db  0x00 ; '.'
0000000000017494         db  0xa0 ; '.'
0000000000017495         db  0xed ; '.'
0000000000017496         db  0xfe ; '.'
0000000000017497         db  0xff ; '.'
0000000000017498         db  0x18 ; '.'
0000000000017499         db  0x0f ; '.'
000000000001749a         db  0x00 ; '.'
000000000001749b         db  0x00 ; '.'
000000000001749c         db  0x30 ; '0'
000000000001749d         db  0xee ; '.'
000000000001749e         db  0xfe ; '.'
000000000001749f         db  0xff ; '.'
00000000000174a0         db  0x34 ; '4'
00000000000174a1         db  0x0f ; '.'
00000000000174a2         db  0x00 ; '.'
00000000000174a3         db  0x00 ; '.'
00000000000174a4         db  0xc0 ; '.'
00000000000174a5         db  0xee ; '.'
00000000000174a6         db  0xfe ; '.'
00000000000174a7         db  0xff ; '.'
00000000000174a8         db  0x50 ; 'P'
00000000000174a9         db  0x0f ; '.'
00000000000174aa         db  0x00 ; '.'
00000000000174ab         db  0x00 ; '.'
00000000000174ac         db  0xd0 ; '.'
00000000000174ad         db  0xee ; '.'
00000000000174ae         db  0xfe ; '.'
00000000000174af         db  0xff ; '.'
00000000000174b0         db  0x64 ; 'd'
00000000000174b1         db  0x0f ; '.'
00000000000174b2         db  0x00 ; '.'
00000000000174b3         db  0x00 ; '.'
00000000000174b4         db  0xe0 ; '.'
00000000000174b5         db  0xee ; '.'
00000000000174b6         db  0xfe ; '.'
00000000000174b7         db  0xff ; '.'
00000000000174b8         db  0x78 ; 'x'
00000000000174b9         db  0x0f ; '.'
00000000000174ba         db  0x00 ; '.'
00000000000174bb         db  0x00 ; '.'
00000000000174bc         db  0x80 ; '.'
00000000000174bd         db  0xef ; '.'
00000000000174be         db  0xfe ; '.'
00000000000174bf         db  0xff ; '.'
00000000000174c0         db  0x94 ; '.'
00000000000174c1         db  0x0f ; '.'
00000000000174c2         db  0x00 ; '.'
00000000000174c3         db  0x00 ; '.'
00000000000174c4         db  0x90 ; '.'
00000000000174c5         db  0xef ; '.'
00000000000174c6         db  0xfe ; '.'
00000000000174c7         db  0xff ; '.'
00000000000174c8         db  0xa8 ; '.'
00000000000174c9         db  0x0f ; '.'
00000000000174ca         db  0x00 ; '.'
00000000000174cb         db  0x00 ; '.'
00000000000174cc         db  0xb0 ; '.'
00000000000174cd         db  0xef ; '.'
00000000000174ce         db  0xfe ; '.'
00000000000174cf         db  0xff ; '.'
00000000000174d0         db  0xbc ; '.'
00000000000174d1         db  0x0f ; '.'
00000000000174d2         db  0x00 ; '.'
00000000000174d3         db  0x00 ; '.'
00000000000174d4         db  0xc0 ; '.'
00000000000174d5         db  0xef ; '.'
00000000000174d6         db  0xfe ; '.'
00000000000174d7         db  0xff ; '.'
00000000000174d8         db  0xd0 ; '.'
00000000000174d9         db  0x0f ; '.'
00000000000174da         db  0x00 ; '.'
00000000000174db         db  0x00 ; '.'
00000000000174dc         db  0x50 ; 'P'
00000000000174dd         db  0xf0 ; '.'
00000000000174de         db  0xfe ; '.'
00000000000174df         db  0xff ; '.'
00000000000174e0         db  0xec ; '.'
00000000000174e1         db  0x0f ; '.'
00000000000174e2         db  0x00 ; '.'
00000000000174e3         db  0x00 ; '.'
00000000000174e4         db  0xf0 ; '.'
00000000000174e5         db  0xf0 ; '.'
00000000000174e6         db  0xfe ; '.'
00000000000174e7         db  0xff ; '.'
00000000000174e8         db  0x08 ; '.'
00000000000174e9         db  0x10 ; '.'
00000000000174ea         db  0x00 ; '.'
00000000000174eb         db  0x00 ; '.'
00000000000174ec         db  0x00 ; '.'
00000000000174ed         db  0xf1 ; '.'
00000000000174ee         db  0xfe ; '.'
00000000000174ef         db  0xff ; '.'
00000000000174f0         db  0x1c ; '.'
00000000000174f1         db  0x10 ; '.'
00000000000174f2         db  0x00 ; '.'
00000000000174f3         db  0x00 ; '.'
00000000000174f4         db  0x20 ; ' '
00000000000174f5         db  0xf1 ; '.'
00000000000174f6         db  0xfe ; '.'
00000000000174f7         db  0xff ; '.'
00000000000174f8         db  0x30 ; '0'
00000000000174f9         db  0x10 ; '.'
00000000000174fa         db  0x00 ; '.'
00000000000174fb         db  0x00 ; '.'
00000000000174fc         db  0x40 ; '@'
00000000000174fd         db  0xf1 ; '.'
00000000000174fe         db  0xfe ; '.'
00000000000174ff         db  0xff ; '.'
0000000000017500         db  0x44 ; 'D'
0000000000017501         db  0x10 ; '.'
0000000000017502         db  0x00 ; '.'
0000000000017503         db  0x00 ; '.'
0000000000017504         db  0x50 ; 'P'
0000000000017505         db  0xf1 ; '.'
0000000000017506         db  0xfe ; '.'
0000000000017507         db  0xff ; '.'
0000000000017508         db  0x58 ; 'X'
0000000000017509         db  0x10 ; '.'
000000000001750a         db  0x00 ; '.'
000000000001750b         db  0x00 ; '.'
000000000001750c         db  0x70 ; 'p'
000000000001750d         db  0xf1 ; '.'
000000000001750e         db  0xfe ; '.'
000000000001750f         db  0xff ; '.'
0000000000017510         db  0x6c ; 'l'
0000000000017511         db  0x10 ; '.'
0000000000017512         db  0x00 ; '.'
0000000000017513         db  0x00 ; '.'
0000000000017514         db  0x90 ; '.'
0000000000017515         db  0xf1 ; '.'
0000000000017516         db  0xfe ; '.'
0000000000017517         db  0xff ; '.'
0000000000017518         db  0x80 ; '.'
0000000000017519         db  0x10 ; '.'
000000000001751a         db  0x00 ; '.'
000000000001751b         db  0x00 ; '.'
000000000001751c         db  0xb0 ; '.'
000000000001751d         db  0xf1 ; '.'
000000000001751e         db  0xfe ; '.'
000000000001751f         db  0xff ; '.'
0000000000017520         db  0x98 ; '.'
0000000000017521         db  0x10 ; '.'
0000000000017522         db  0x00 ; '.'
0000000000017523         db  0x00 ; '.'
0000000000017524         db  0xf0 ; '.'
0000000000017525         db  0xf1 ; '.'
0000000000017526         db  0xfe ; '.'
0000000000017527         db  0xff ; '.'
0000000000017528         db  0xc0 ; '.'
0000000000017529         db  0x10 ; '.'
000000000001752a         db  0x00 ; '.'
000000000001752b         db  0x00 ; '.'
000000000001752c         db  0xa0 ; '.'
000000000001752d         db  0xf4 ; '.'
000000000001752e         db  0xfe ; '.'
000000000001752f         db  0xff ; '.'
0000000000017530         db  0xd8 ; '.'
0000000000017531         db  0x10 ; '.'
0000000000017532         db  0x00 ; '.'
0000000000017533         db  0x00 ; '.'
0000000000017534         db  0xc0 ; '.'
0000000000017535         db  0xf8 ; '.'
0000000000017536         db  0xfe ; '.'
0000000000017537         db  0xff ; '.'
0000000000017538         db  0xec ; '.'
0000000000017539         db  0x11 ; '.'
000000000001753a         db  0x00 ; '.'
000000000001753b         db  0x00 ; '.'
000000000001753c         db  0xe0 ; '.'
000000000001753d         db  0xf8 ; '.'
000000000001753e         db  0xfe ; '.'
000000000001753f         db  0xff ; '.'
0000000000017540         db  0x00 ; '.'
0000000000017541         db  0x12 ; '.'
0000000000017542         db  0x00 ; '.'
0000000000017543         db  0x00 ; '.'
0000000000017544         db  0x60 ; '`'
0000000000017545         db  0xf9 ; '.'
0000000000017546         db  0xfe ; '.'
0000000000017547         db  0xff ; '.'
0000000000017548         db  0x1c ; '.'
0000000000017549         db  0x12 ; '.'
000000000001754a         db  0x00 ; '.'
000000000001754b         db  0x00 ; '.'
000000000001754c         db  0x40 ; '@'
000000000001754d         db  0xfa ; '.'
000000000001754e         db  0xfe ; '.'
000000000001754f         db  0xff ; '.'
0000000000017550         db  0x48 ; 'H'
0000000000017551         db  0x12 ; '.'
0000000000017552         db  0x00 ; '.'
0000000000017553         db  0x00 ; '.'
0000000000017554         db  0xc0 ; '.'
0000000000017555         db  0xfa ; '.'
0000000000017556         db  0xfe ; '.'
0000000000017557         db  0xff ; '.'
0000000000017558         db  0x68 ; 'h'
0000000000017559         db  0x12 ; '.'
000000000001755a         db  0x00 ; '.'
000000000001755b         db  0x00 ; '.'
000000000001755c         db  0xe0 ; '.'
000000000001755d         db  0xfa ; '.'
000000000001755e         db  0xfe ; '.'
000000000001755f         db  0xff ; '.'
0000000000017560         db  0x84 ; '.'
0000000000017561         db  0x12 ; '.'
0000000000017562         db  0x00 ; '.'
0000000000017563         db  0x00 ; '.'
0000000000017564         db  0x10 ; '.'
0000000000017565         db  0xfb ; '.'
0000000000017566         db  0xfe ; '.'
0000000000017567         db  0xff ; '.'
0000000000017568         db  0x98 ; '.'
0000000000017569         db  0x12 ; '.'
000000000001756a         db  0x00 ; '.'
000000000001756b         db  0x00 ; '.'
000000000001756c         db  0x20 ; ' '
000000000001756d         db  0xfb ; '.'
000000000001756e         db  0xfe ; '.'
000000000001756f         db  0xff ; '.'
0000000000017570         db  0xac ; '.'
0000000000017571         db  0x12 ; '.'
0000000000017572         db  0x00 ; '.'
0000000000017573         db  0x00 ; '.'
0000000000017574         db  0x60 ; '`'
0000000000017575         db  0xfb ; '.'
0000000000017576         db  0xfe ; '.'
0000000000017577         db  0xff ; '.'
0000000000017578         db  0xd0 ; '.'
0000000000017579         db  0x12 ; '.'
000000000001757a         db  0x00 ; '.'
000000000001757b         db  0x00 ; '.'
000000000001757c         db  0x90 ; '.'
000000000001757d         db  0xfb ; '.'
000000000001757e         db  0xfe ; '.'
000000000001757f         db  0xff ; '.'
0000000000017580         db  0xe4 ; '.'
0000000000017581         db  0x12 ; '.'
0000000000017582         db  0x00 ; '.'
0000000000017583         db  0x00 ; '.'
0000000000017584         db  0x20 ; ' '
0000000000017585         db  0xfc ; '.'
0000000000017586         db  0xfe ; '.'
0000000000017587         db  0xff ; '.'
0000000000017588         db  0xfc ; '.'
0000000000017589         db  0x12 ; '.'
000000000001758a         db  0x00 ; '.'
000000000001758b         db  0x00 ; '.'
000000000001758c         db  0x70 ; 'p'
000000000001758d         db  0xfc ; '.'
000000000001758e         db  0xfe ; '.'
000000000001758f         db  0xff ; '.'
0000000000017590         db  0x14 ; '.'
0000000000017591         db  0x13 ; '.'
0000000000017592         db  0x00 ; '.'
0000000000017593         db  0x00 ; '.'
0000000000017594         db  0x90 ; '.'
0000000000017595         db  0xfc ; '.'
0000000000017596         db  0xfe ; '.'
0000000000017597         db  0xff ; '.'
0000000000017598         db  0x30 ; '0'
0000000000017599         db  0x13 ; '.'
000000000001759a         db  0x00 ; '.'
000000000001759b         db  0x00 ; '.'
000000000001759c         db  0xc0 ; '.'
000000000001759d         db  0xfc ; '.'
000000000001759e         db  0xfe ; '.'
000000000001759f         db  0xff ; '.'
00000000000175a0         db  0x4c ; 'L'
00000000000175a1         db  0x13 ; '.'
00000000000175a2         db  0x00 ; '.'
00000000000175a3         db  0x00 ; '.'
00000000000175a4         db  0xf0 ; '.'
00000000000175a5         db  0xfc ; '.'
00000000000175a6         db  0xfe ; '.'
00000000000175a7         db  0xff ; '.'
00000000000175a8         db  0x74 ; 't'
00000000000175a9         db  0x13 ; '.'
00000000000175aa         db  0x00 ; '.'
00000000000175ab         db  0x00 ; '.'
00000000000175ac         db  0x10 ; '.'
00000000000175ad         db  0xfd ; '.'
00000000000175ae         db  0xfe ; '.'
00000000000175af         db  0xff ; '.'
00000000000175b0         db  0x90 ; '.'
00000000000175b1         db  0x13 ; '.'
00000000000175b2         db  0x00 ; '.'
00000000000175b3         db  0x00 ; '.'
00000000000175b4         db  0x50 ; 'P'
00000000000175b5         db  0xfd ; '.'
00000000000175b6         db  0xfe ; '.'
00000000000175b7         db  0xff ; '.'
00000000000175b8         db  0xa8 ; '.'
00000000000175b9         db  0x13 ; '.'
00000000000175ba         db  0x00 ; '.'
00000000000175bb         db  0x00 ; '.'
00000000000175bc         db  0xe0 ; '.'
00000000000175bd         db  0xfd ; '.'
00000000000175be         db  0xfe ; '.'
00000000000175bf         db  0xff ; '.'
00000000000175c0         db  0xe8 ; '.'
00000000000175c1         db  0x13 ; '.'
00000000000175c2         db  0x00 ; '.'
00000000000175c3         db  0x00 ; '.'
00000000000175c4         db  0x10 ; '.'
00000000000175c5         db  0xff ; '.'
00000000000175c6         db  0xfe ; '.'
00000000000175c7         db  0xff ; '.'
00000000000175c8         db  0xfc ; '.'
00000000000175c9         db  0x13 ; '.'
00000000000175ca         db  0x00 ; '.'
00000000000175cb         db  0x00 ; '.'
00000000000175cc         db  0x30 ; '0'
00000000000175cd         db  0xff ; '.'
00000000000175ce         db  0xfe ; '.'
00000000000175cf         db  0xff ; '.'
00000000000175d0         db  0x10 ; '.'
00000000000175d1         db  0x14 ; '.'
00000000000175d2         db  0x00 ; '.'
00000000000175d3         db  0x00 ; '.'
00000000000175d4         db  0x60 ; '`'
00000000000175d5         db  0x01 ; '.'
00000000000175d6         db  0xff ; '.'
00000000000175d7         db  0xff ; '.'
00000000000175d8         db  0xa4 ; '.'
00000000000175d9         db  0x14 ; '.'
00000000000175da         db  0x00 ; '.'
00000000000175db         db  0x00 ; '.'
00000000000175dc         db  0xd0 ; '.'
00000000000175dd         db  0x01 ; '.'
00000000000175de         db  0xff ; '.'
00000000000175df         db  0xff ; '.'
00000000000175e0         db  0xb8 ; '.'
00000000000175e1         db  0x14 ; '.'
00000000000175e2         db  0x00 ; '.'
00000000000175e3         db  0x00 ; '.'
00000000000175e4         db  0x40 ; '@'
00000000000175e5         db  0x02 ; '.'
00000000000175e6         db  0xff ; '.'
00000000000175e7         db  0xff ; '.'
00000000000175e8         db  0xe4 ; '.'
00000000000175e9         db  0x14 ; '.'
00000000000175ea         db  0x00 ; '.'
00000000000175eb         db  0x00 ; '.'
00000000000175ec         db  0xa0 ; '.'
00000000000175ed         db  0x02 ; '.'
00000000000175ee         db  0xff ; '.'
00000000000175ef         db  0xff ; '.'
00000000000175f0         db  0x10 ; '.'
00000000000175f1         db  0x15 ; '.'
00000000000175f2         db  0x00 ; '.'
00000000000175f3         db  0x00 ; '.'
00000000000175f4         db  0x40 ; '@'
00000000000175f5         db  0x03 ; '.'
00000000000175f6         db  0xff ; '.'
00000000000175f7         db  0xff ; '.'
00000000000175f8         db  0x44 ; 'D'
00000000000175f9         db  0x15 ; '.'
00000000000175fa         db  0x00 ; '.'
00000000000175fb         db  0x00 ; '.'
00000000000175fc         db  0xb0 ; '.'
00000000000175fd         db  0x03 ; '.'
00000000000175fe         db  0xff ; '.'
00000000000175ff         db  0xff ; '.'
0000000000017600         db  0x70 ; 'p'
0000000000017601         db  0x15 ; '.'
0000000000017602         db  0x00 ; '.'
0000000000017603         db  0x00 ; '.'
0000000000017604         db  0xe0 ; '.'
0000000000017605         db  0x04 ; '.'
0000000000017606         db  0xff ; '.'
0000000000017607         db  0xff ; '.'
0000000000017608         db  0xa8 ; '.'
0000000000017609         db  0x15 ; '.'
000000000001760a         db  0x00 ; '.'
000000000001760b         db  0x00 ; '.'
000000000001760c         db  0xd0 ; '.'
000000000001760d         db  0x05 ; '.'
000000000001760e         db  0xff ; '.'
000000000001760f         db  0xff ; '.'
0000000000017610         db  0xf8 ; '.'
0000000000017611         db  0x15 ; '.'
0000000000017612         db  0x00 ; '.'
0000000000017613         db  0x00 ; '.'
0000000000017614         db  0x40 ; '@'
0000000000017615         db  0x06 ; '.'
0000000000017616         db  0xff ; '.'
0000000000017617         db  0xff ; '.'
0000000000017618         db  0x28 ; '('
0000000000017619         db  0x16 ; '.'
000000000001761a         db  0x00 ; '.'
000000000001761b         db  0x00 ; '.'
000000000001761c         db  0x10 ; '.'
000000000001761d         db  0x08 ; '.'
000000000001761e         db  0xff ; '.'
000000000001761f         db  0xff ; '.'
0000000000017620         db  0x74 ; 't'
0000000000017621         db  0x16 ; '.'
0000000000017622         db  0x00 ; '.'
0000000000017623         db  0x00 ; '.'
0000000000017624         db  0x30 ; '0'
0000000000017625         db  0x0e ; '.'
0000000000017626         db  0xff ; '.'
0000000000017627         db  0xff ; '.'
0000000000017628         db  0xc0 ; '.'
0000000000017629         db  0x16 ; '.'
000000000001762a         db  0x00 ; '.'
000000000001762b         db  0x00 ; '.'
000000000001762c         db  0x80 ; '.'
000000000001762d         db  0x0f ; '.'
000000000001762e         db  0xff ; '.'
000000000001762f         db  0xff ; '.'
0000000000017630         db  0x1c ; '.'
0000000000017631         db  0x17 ; '.'
0000000000017632         db  0x00 ; '.'
0000000000017633         db  0x00 ; '.'
0000000000017634         db  0x10 ; '.'
0000000000017635         db  0x10 ; '.'
0000000000017636         db  0xff ; '.'
0000000000017637         db  0xff ; '.'
0000000000017638         db  0x48 ; 'H'
0000000000017639         db  0x17 ; '.'
000000000001763a         db  0x00 ; '.'
000000000001763b         db  0x00 ; '.'
000000000001763c         db  0x40 ; '@'
000000000001763d         db  0x10 ; '.'
000000000001763e         db  0xff ; '.'
000000000001763f         db  0xff ; '.'
0000000000017640         db  0x64 ; 'd'
0000000000017641         db  0x17 ; '.'
0000000000017642         db  0x00 ; '.'
0000000000017643         db  0x00 ; '.'
0000000000017644         db  0x70 ; 'p'
0000000000017645         db  0x10 ; '.'
0000000000017646         db  0xff ; '.'
0000000000017647         db  0xff ; '.'
0000000000017648         db  0x78 ; 'x'
0000000000017649         db  0x17 ; '.'
000000000001764a         db  0x00 ; '.'
000000000001764b         db  0x00 ; '.'
000000000001764c         db  0x90 ; '.'
000000000001764d         db  0x10 ; '.'
000000000001764e         db  0xff ; '.'
000000000001764f         db  0xff ; '.'
0000000000017650         db  0x90 ; '.'
0000000000017651         db  0x17 ; '.'
0000000000017652         db  0x00 ; '.'
0000000000017653         db  0x00 ; '.'
0000000000017654         db  0x60 ; '`'
0000000000017655         db  0x12 ; '.'
0000000000017656         db  0xff ; '.'
0000000000017657         db  0xff ; '.'
0000000000017658         db  0xdc ; '.'
0000000000017659         db  0x17 ; '.'
000000000001765a         db  0x00 ; '.'
000000000001765b         db  0x00 ; '.'
000000000001765c         db  0x00 ; '.'
000000000001765d         db  0x13 ; '.'
000000000001765e         db  0xff ; '.'
000000000001765f         db  0xff ; '.'
0000000000017660         db  0x14 ; '.'
0000000000017661         db  0x18 ; '.'
0000000000017662         db  0x00 ; '.'
0000000000017663         db  0x00 ; '.'
0000000000017664         db  0x80 ; '.'
0000000000017665         db  0x15 ; '.'
0000000000017666         db  0xff ; '.'
0000000000017667         db  0xff ; '.'
0000000000017668         db  0x60 ; '`'
0000000000017669         db  0x18 ; '.'
000000000001766a         db  0x00 ; '.'
000000000001766b         db  0x00 ; '.'
000000000001766c         db  0xe0 ; '.'
000000000001766d         db  0x15 ; '.'
000000000001766e         db  0xff ; '.'
000000000001766f         db  0xff ; '.'
0000000000017670         db  0x7c ; '|'
0000000000017671         db  0x18 ; '.'
0000000000017672         db  0x00 ; '.'
0000000000017673         db  0x00 ; '.'
0000000000017674         db  0x20 ; ' '
0000000000017675         db  0x16 ; '.'
0000000000017676         db  0xff ; '.'
0000000000017677         db  0xff ; '.'
0000000000017678         db  0x9c ; '.'
0000000000017679         db  0x18 ; '.'
000000000001767a         db  0x00 ; '.'
000000000001767b         db  0x00 ; '.'
000000000001767c         db  0x80 ; '.'
000000000001767d         db  0x17 ; '.'
000000000001767e         db  0xff ; '.'
000000000001767f         db  0xff ; '.'
0000000000017680         db  0xd8 ; '.'
0000000000017681         db  0x18 ; '.'
0000000000017682         db  0x00 ; '.'
0000000000017683         db  0x00 ; '.'
0000000000017684         db  0x40 ; '@'
0000000000017685         db  0x18 ; '.'
0000000000017686         db  0xff ; '.'
0000000000017687         db  0xff ; '.'
0000000000017688         db  0x14 ; '.'
0000000000017689         db  0x19 ; '.'
000000000001768a         db  0x00 ; '.'
000000000001768b         db  0x00 ; '.'
000000000001768c         db  0x90 ; '.'
000000000001768d         db  0x18 ; '.'
000000000001768e         db  0xff ; '.'
000000000001768f         db  0xff ; '.'
0000000000017690         db  0x28 ; '('
0000000000017691         db  0x19 ; '.'
0000000000017692         db  0x00 ; '.'
0000000000017693         db  0x00 ; '.'
0000000000017694         db  0xf0 ; '.'
0000000000017695         db  0x18 ; '.'
0000000000017696         db  0xff ; '.'
0000000000017697         db  0xff ; '.'
0000000000017698         db  0x3c ; '<'
0000000000017699         db  0x19 ; '.'
000000000001769a         db  0x00 ; '.'
000000000001769b         db  0x00 ; '.'
000000000001769c         db  0x70 ; 'p'
000000000001769d         db  0x19 ; '.'
000000000001769e         db  0xff ; '.'
000000000001769f         db  0xff ; '.'
00000000000176a0         db  0x50 ; 'P'
00000000000176a1         db  0x19 ; '.'
00000000000176a2         db  0x00 ; '.'
00000000000176a3         db  0x00 ; '.'
00000000000176a4         db  0x70 ; 'p'
00000000000176a5         db  0x1a ; '.'
00000000000176a6         db  0xff ; '.'
00000000000176a7         db  0xff ; '.'
00000000000176a8         db  0xb4 ; '.'
00000000000176a9         db  0x19 ; '.'
00000000000176aa         db  0x00 ; '.'
00000000000176ab         db  0x00 ; '.'
00000000000176ac         db  0xb0 ; '.'
00000000000176ad         db  0x1a ; '.'
00000000000176ae         db  0xff ; '.'
00000000000176af         db  0xff ; '.'
00000000000176b0         db  0xc8 ; '.'
00000000000176b1         db  0x19 ; '.'
00000000000176b2         db  0x00 ; '.'
00000000000176b3         db  0x00 ; '.'
00000000000176b4         db  0x40 ; '@'
00000000000176b5         db  0x1b ; '.'
00000000000176b6         db  0xff ; '.'
00000000000176b7         db  0xff ; '.'
00000000000176b8         db  0xdc ; '.'
00000000000176b9         db  0x19 ; '.'
00000000000176ba         db  0x00 ; '.'
00000000000176bb         db  0x00 ; '.'
00000000000176bc         db  0xa0 ; '.'
00000000000176bd         db  0x1b ; '.'
00000000000176be         db  0xff ; '.'
00000000000176bf         db  0xff ; '.'
00000000000176c0         db  0xf0 ; '.'
00000000000176c1         db  0x19 ; '.'
00000000000176c2         db  0x00 ; '.'
00000000000176c3         db  0x00 ; '.'
00000000000176c4         db  0x10 ; '.'
00000000000176c5         db  0x1e ; '.'
00000000000176c6         db  0xff ; '.'
00000000000176c7         db  0xff ; '.'
00000000000176c8         db  0x40 ; '@'
00000000000176c9         db  0x1a ; '.'
00000000000176ca         db  0x00 ; '.'
00000000000176cb         db  0x00 ; '.'
00000000000176cc         db  0xf0 ; '.'
00000000000176cd         db  0x1f ; '.'
00000000000176ce         db  0xff ; '.'
00000000000176cf         db  0xff ; '.'
00000000000176d0         db  0x78 ; 'x'
00000000000176d1         db  0x1a ; '.'
00000000000176d2         db  0x00 ; '.'
00000000000176d3         db  0x00 ; '.'
00000000000176d4         db  0xa0 ; '.'
00000000000176d5         db  0x22 ; '"'
00000000000176d6         db  0xff ; '.'
00000000000176d7         db  0xff ; '.'
00000000000176d8         db  0xc8 ; '.'
00000000000176d9         db  0x1a ; '.'
00000000000176da         db  0x00 ; '.'
00000000000176db         db  0x00 ; '.'
00000000000176dc         db  0x00 ; '.'
00000000000176dd         db  0x24 ; '$'
00000000000176de         db  0xff ; '.'
00000000000176df         db  0xff ; '.'
00000000000176e0         db  0x14 ; '.'
00000000000176e1         db  0x1b ; '.'
00000000000176e2         db  0x00 ; '.'
00000000000176e3         db  0x00 ; '.'
00000000000176e4         db  0xb0 ; '.'
00000000000176e5         db  0x25 ; '%'
00000000000176e6         db  0xff ; '.'
00000000000176e7         db  0xff ; '.'
00000000000176e8         db  0x64 ; 'd'
00000000000176e9         db  0x1b ; '.'
00000000000176ea         db  0x00 ; '.'
00000000000176eb         db  0x00 ; '.'
00000000000176ec         db  0x90 ; '.'
00000000000176ed         db  0x26 ; '&'
00000000000176ee         db  0xff ; '.'
00000000000176ef         db  0xff ; '.'
00000000000176f0         db  0x88 ; '.'
00000000000176f1         db  0x1b ; '.'
00000000000176f2         db  0x00 ; '.'
00000000000176f3         db  0x00 ; '.'
00000000000176f4         db  0x70 ; 'p'
00000000000176f5         db  0x27 ; '''
00000000000176f6         db  0xff ; '.'
00000000000176f7         db  0xff ; '.'
00000000000176f8         db  0xcc ; '.'
00000000000176f9         db  0x1b ; '.'
00000000000176fa         db  0x00 ; '.'
00000000000176fb         db  0x00 ; '.'
00000000000176fc         db  0xb0 ; '.'
00000000000176fd         db  0x29 ; ')'
00000000000176fe         db  0xff ; '.'
00000000000176ff         db  0xff ; '.'
0000000000017700         db  0x1c ; '.'
0000000000017701         db  0x1c ; '.'
0000000000017702         db  0x00 ; '.'
0000000000017703         db  0x00 ; '.'
0000000000017704         db  0x50 ; 'P'
0000000000017705         db  0x2a ; '*'
0000000000017706         db  0xff ; '.'
0000000000017707         db  0xff ; '.'
0000000000017708         db  0x48 ; 'H'
0000000000017709         db  0x1c ; '.'
000000000001770a         db  0x00 ; '.'
000000000001770b         db  0x00 ; '.'
000000000001770c         db  0xe0 ; '.'
000000000001770d         db  0x2a ; '*'
000000000001770e         db  0xff ; '.'
000000000001770f         db  0xff ; '.'
0000000000017710         db  0x84 ; '.'
0000000000017711         db  0x1c ; '.'
0000000000017712         db  0x00 ; '.'
0000000000017713         db  0x00 ; '.'
0000000000017714         db  0x40 ; '@'
0000000000017715         db  0x2c ; ','
0000000000017716         db  0xff ; '.'
0000000000017717         db  0xff ; '.'
0000000000017718         db  0xe8 ; '.'
0000000000017719         db  0x1c ; '.'
000000000001771a         db  0x00 ; '.'
000000000001771b         db  0x00 ; '.'
000000000001771c         db  0x00 ; '.'
000000000001771d         db  0x2f ; '/'
000000000001771e         db  0xff ; '.'
000000000001771f         db  0xff ; '.'
0000000000017720         db  0x34 ; '4'
0000000000017721         db  0x1d ; '.'
0000000000017722         db  0x00 ; '.'
0000000000017723         db  0x00 ; '.'
0000000000017724         db  0x00 ; '.'
0000000000017725         db  0x31 ; '1'
0000000000017726         db  0xff ; '.'
0000000000017727         db  0xff ; '.'
0000000000017728         db  0x80 ; '.'
0000000000017729         db  0x1d ; '.'
000000000001772a         db  0x00 ; '.'
000000000001772b         db  0x00 ; '.'
000000000001772c         db  0xe0 ; '.'
000000000001772d         db  0x31 ; '1'
000000000001772e         db  0xff ; '.'
000000000001772f         db  0xff ; '.'
0000000000017730         db  0xcc ; '.'
0000000000017731         db  0x1d ; '.'
0000000000017732         db  0x00 ; '.'
0000000000017733         db  0x00 ; '.'
0000000000017734         db  0x80 ; '.'
0000000000017735         db  0x35 ; '5'
0000000000017736         db  0xff ; '.'
0000000000017737         db  0xff ; '.'
0000000000017738         db  0x18 ; '.'
0000000000017739         db  0x1e ; '.'
000000000001773a         db  0x00 ; '.'
000000000001773b         db  0x00 ; '.'
000000000001773c         db  0xd0 ; '.'
000000000001773d         db  0x36 ; '6'
000000000001773e         db  0xff ; '.'
000000000001773f         db  0xff ; '.'
0000000000017740         db  0x64 ; 'd'
0000000000017741         db  0x1e ; '.'
0000000000017742         db  0x00 ; '.'
0000000000017743         db  0x00 ; '.'
0000000000017744         db  0xc0 ; '.'
0000000000017745         db  0x37 ; '7'
0000000000017746         db  0xff ; '.'
0000000000017747         db  0xff ; '.'
0000000000017748         db  0xa8 ; '.'
0000000000017749         db  0x1e ; '.'
000000000001774a         db  0x00 ; '.'
000000000001774b         db  0x00 ; '.'
000000000001774c         db  0xd0 ; '.'
000000000001774d         db  0x38 ; '8'
000000000001774e         db  0xff ; '.'
000000000001774f         db  0xff ; '.'
0000000000017750         db  0xd0 ; '.'
0000000000017751         db  0x1e ; '.'
0000000000017752         db  0x00 ; '.'
0000000000017753         db  0x00 ; '.'
0000000000017754         db  0xa0 ; '.'
0000000000017755         db  0x39 ; '9'
0000000000017756         db  0xff ; '.'
0000000000017757         db  0xff ; '.'
0000000000017758         db  0x08 ; '.'
0000000000017759         db  0x1f ; '.'
000000000001775a         db  0x00 ; '.'
000000000001775b         db  0x00 ; '.'
000000000001775c         db  0x40 ; '@'
000000000001775d         db  0x41 ; 'A'
000000000001775e         db  0xff ; '.'
000000000001775f         db  0xff ; '.'
0000000000017760         db  0x58 ; 'X'
0000000000017761         db  0x1f ; '.'
0000000000017762         db  0x00 ; '.'
0000000000017763         db  0x00 ; '.'
0000000000017764         db  0x80 ; '.'
0000000000017765         db  0x43 ; 'C'
0000000000017766         db  0xff ; '.'
0000000000017767         db  0xff ; '.'
0000000000017768         db  0xa8 ; '.'
0000000000017769         db  0x1f ; '.'
000000000001776a         db  0x00 ; '.'
000000000001776b         db  0x00 ; '.'
000000000001776c         db  0x20 ; ' '
000000000001776d         db  0x4f ; 'O'
000000000001776e         db  0xff ; '.'
000000000001776f         db  0xff ; '.'
0000000000017770         db  0xf8 ; '.'
0000000000017771         db  0x1f ; '.'
0000000000017772         db  0x00 ; '.'
0000000000017773         db  0x00 ; '.'
0000000000017774         db  0xb0 ; '.'
0000000000017775         db  0x4f ; 'O'
0000000000017776         db  0xff ; '.'
0000000000017777         db  0xff ; '.'
0000000000017778         db  0x2c ; ','
0000000000017779         db  0x20 ; ' '
000000000001777a         db  0x00 ; '.'
000000000001777b         db  0x00 ; '.'
000000000001777c         db  0x00 ; '.'
000000000001777d         db  0x50 ; 'P'
000000000001777e         db  0xff ; '.'
000000000001777f         db  0xff ; '.'
0000000000017780         db  0x58 ; 'X'
0000000000017781         db  0x20 ; ' '
0000000000017782         db  0x00 ; '.'
0000000000017783         db  0x00 ; '.'
0000000000017784         db  0xa0 ; '.'
0000000000017785         db  0x50 ; 'P'
0000000000017786         db  0xff ; '.'
0000000000017787         db  0xff ; '.'
0000000000017788         db  0x88 ; '.'
0000000000017789         db  0x20 ; ' '
000000000001778a         db  0x00 ; '.'
000000000001778b         db  0x00 ; '.'
000000000001778c         db  0xf0 ; '.'
000000000001778d         db  0x50 ; 'P'
000000000001778e         db  0xff ; '.'
000000000001778f         db  0xff ; '.'
0000000000017790         db  0xbc ; '.'
0000000000017791         db  0x20 ; ' '
0000000000017792         db  0x00 ; '.'
0000000000017793         db  0x00 ; '.'
0000000000017794         db  0x00 ; '.'
0000000000017795         db  0x59 ; 'Y'
0000000000017796         db  0xff ; '.'
0000000000017797         db  0xff ; '.'
0000000000017798         db  0x00 ; '.'
0000000000017799         db  0x21 ; '!'
000000000001779a         db  0x00 ; '.'
000000000001779b         db  0x00 ; '.'
000000000001779c         db  0x70 ; 'p'
000000000001779d         db  0x5b ; '['
000000000001779e         db  0xff ; '.'
000000000001779f         db  0xff ; '.'
00000000000177a0         db  0x60 ; '`'
00000000000177a1         db  0x21 ; '!'
00000000000177a2         db  0x00 ; '.'
00000000000177a3         db  0x00 ; '.'
00000000000177a4         db  0xa0 ; '.'
00000000000177a5         db  0x60 ; '`'
00000000000177a6         db  0xff ; '.'
00000000000177a7         db  0xff ; '.'
00000000000177a8         db  0xb0 ; '.'
00000000000177a9         db  0x21 ; '!'
00000000000177aa         db  0x00 ; '.'
00000000000177ab         db  0x00 ; '.'
00000000000177ac         db  0x00 ; '.'
00000000000177ad         db  0x63 ; 'c'
00000000000177ae         db  0xff ; '.'
00000000000177af         db  0xff ; '.'
00000000000177b0         db  0xec ; '.'
00000000000177b1         db  0x21 ; '!'
00000000000177b2         db  0x00 ; '.'
00000000000177b3         db  0x00 ; '.'
00000000000177b4         db  0x60 ; '`'
00000000000177b5         db  0x6a ; 'j'
00000000000177b6         db  0xff ; '.'
00000000000177b7         db  0xff ; '.'
00000000000177b8         db  0x3c ; '<'
00000000000177b9         db  0x22 ; '"'
00000000000177ba         db  0x00 ; '.'
00000000000177bb         db  0x00 ; '.'
00000000000177bc         db  0x50 ; 'P'
00000000000177bd         db  0x73 ; 's'
00000000000177be         db  0xff ; '.'
00000000000177bf         db  0xff ; '.'
00000000000177c0         db  0x6c ; 'l'
00000000000177c1         db  0x22 ; '"'
00000000000177c2         db  0x00 ; '.'
00000000000177c3         db  0x00 ; '.'
00000000000177c4         db  0xf0 ; '.'
00000000000177c5         db  0x74 ; 't'
00000000000177c6         db  0xff ; '.'
00000000000177c7         db  0xff ; '.'
00000000000177c8         db  0xd8 ; '.'
00000000000177c9         db  0x22 ; '"'
00000000000177ca         db  0x00 ; '.'
00000000000177cb         db  0x00 ; '.'
00000000000177cc         db  0xe0 ; '.'
00000000000177cd         db  0x7d ; '}'
00000000000177ce         db  0xff ; '.'
00000000000177cf         db  0xff ; '.'
00000000000177d0         db  0x38 ; '8'
00000000000177d1         db  0x23 ; '#'
00000000000177d2         db  0x00 ; '.'
00000000000177d3         db  0x00 ; '.'
00000000000177d4         db  0xd0 ; '.'
00000000000177d5         db  0x7f ; '.'
00000000000177d6         db  0xff ; '.'
00000000000177d7         db  0xff ; '.'
00000000000177d8         db  0x84 ; '.'
00000000000177d9         db  0x23 ; '#'
00000000000177da         db  0x00 ; '.'
00000000000177db         db  0x00 ; '.'
00000000000177dc         db  0x10 ; '.'
00000000000177dd         db  0x83 ; '.'
00000000000177de         db  0xff ; '.'
00000000000177df         db  0xff ; '.'
00000000000177e0         db  0xe4 ; '.'
00000000000177e1         db  0x23 ; '#'
00000000000177e2         db  0x00 ; '.'
00000000000177e3         db  0x00 ; '.'
00000000000177e4         db  0x40 ; '@'
00000000000177e5         db  0x9a ; '.'
00000000000177e6         db  0xff ; '.'
00000000000177e7         db  0xff ; '.'
00000000000177e8         db  0x34 ; '4'
00000000000177e9         db  0x24 ; '$'
00000000000177ea         db  0x00 ; '.'
00000000000177eb         db  0x00 ; '.'
00000000000177ec         db  0x90 ; '.'
00000000000177ed         db  0xa2 ; '.'
00000000000177ee         db  0xff ; '.'
00000000000177ef         db  0xff ; '.'
00000000000177f0         db  0x94 ; '.'
00000000000177f1         db  0x24 ; '$'
00000000000177f2         db  0x00 ; '.'
00000000000177f3         db  0x00 ; '.'
00000000000177f4         db  0xf0 ; '.'
00000000000177f5         db  0xa4 ; '.'
00000000000177f6         db  0xff ; '.'
00000000000177f7         db  0xff ; '.'
00000000000177f8         db  0xd8 ; '.'
00000000000177f9         db  0x24 ; '$'
00000000000177fa         db  0x00 ; '.'
00000000000177fb         db  0x00 ; '.'
00000000000177fc         db  0xf0 ; '.'
00000000000177fd         db  0xab ; '.'
00000000000177fe         db  0xff ; '.'
00000000000177ff         db  0xff ; '.'
0000000000017800         db  0x24 ; '$'
0000000000017801         db  0x25 ; '%'
0000000000017802         db  0x00 ; '.'
0000000000017803         db  0x00 ; '.'
0000000000017804         db  0xb0 ; '.'
0000000000017805         db  0xac ; '.'
0000000000017806         db  0xff ; '.'
0000000000017807         db  0xff ; '.'
0000000000017808         db  0x64 ; 'd'
0000000000017809         db  0x25 ; '%'
000000000001780a         db  0x00 ; '.'
000000000001780b         db  0x00 ; '.'
000000000001780c         db  0x90 ; '.'
000000000001780d         db  0xc1 ; '.'
000000000001780e         db  0xff ; '.'
000000000001780f         db  0xff ; '.'
0000000000017810         db  0xc4 ; '.'
0000000000017811         db  0x25 ; '%'
0000000000017812         db  0x00 ; '.'
0000000000017813         db  0x00 ; '.'
0000000000017814         db  0x20 ; ' '
0000000000017815         db  0xc3 ; '.'
0000000000017816         db  0xff ; '.'
0000000000017817         db  0xff ; '.'
0000000000017818         db  0x10 ; '.'
0000000000017819         db  0x26 ; '&'
000000000001781a         db  0x00 ; '.'
000000000001781b         db  0x00 ; '.'
000000000001781c         db  0xa0 ; '.'
000000000001781d         db  0xc4 ; '.'
000000000001781e         db  0xff ; '.'
000000000001781f         db  0xff ; '.'
0000000000017820         db  0x60 ; '`'
0000000000017821         db  0x26 ; '&'
0000000000017822         db  0x00 ; '.'
0000000000017823         db  0x00 ; '.'
0000000000017824         db  0xa0 ; '.'
0000000000017825         db  0xd5 ; '.'
0000000000017826         db  0xff ; '.'
0000000000017827         db  0xff ; '.'
0000000000017828         db  0xb0 ; '.'
0000000000017829         db  0x26 ; '&'
000000000001782a         db  0x00 ; '.'
000000000001782b         db  0x00 ; '.'
000000000001782c         db  0x10 ; '.'
000000000001782d         db  0xd6 ; '.'
000000000001782e         db  0xff ; '.'
000000000001782f         db  0xff ; '.'
0000000000017830         db  0xd0 ; '.'
0000000000017831         db  0x26 ; '&'
0000000000017832         db  0x00 ; '.'
0000000000017833         db  0x00 ; '.'
0000000000017834         db  0x20 ; ' '
0000000000017835         db  0xd6 ; '.'
0000000000017836         db  0xff ; '.'
0000000000017837         db  0xff ; '.'
0000000000017838         db  0xe4 ; '.'
0000000000017839         db  0x26 ; '&'
000000000001783a         db  0x00 ; '.'
000000000001783b         db  0x00 ; '.'
000000000001783c         db  0xf0 ; '.'
000000000001783d         db  0xd6 ; '.'
000000000001783e         db  0xff ; '.'
000000000001783f         db  0xff ; '.'
0000000000017840         db  0x10 ; '.'
0000000000017841         db  0x27 ; '''
0000000000017842         db  0x00 ; '.'
0000000000017843         db  0x00 ; '.'
0000000000017844         db  0x70 ; 'p'
0000000000017845         db  0xdb ; '.'
0000000000017846         db  0xff ; '.'
0000000000017847         db  0xff ; '.'
0000000000017848         db  0x70 ; 'p'
0000000000017849         db  0x27 ; '''
000000000001784a         db  0x00 ; '.'
000000000001784b         db  0x00 ; '.'
000000000001784c         db  0x90 ; '.'
000000000001784d         db  0xdc ; '.'
000000000001784e         db  0xff ; '.'
000000000001784f         db  0xff ; '.'
0000000000017850         db  0xc8 ; '.'
0000000000017851         db  0x27 ; '''
0000000000017852         db  0x00 ; '.'
0000000000017853         db  0x00 ; '.'
0000000000017854         db  0xa0 ; '.'
0000000000017855         db  0xdd ; '.'
0000000000017856         db  0xff ; '.'
0000000000017857         db  0xff ; '.'
0000000000017858         db  0x14 ; '.'
0000000000017859         db  0x28 ; '('
000000000001785a         db  0x00 ; '.'
000000000001785b         db  0x00 ; '.'
000000000001785c         db  0x30 ; '0'
000000000001785d         db  0xde ; '.'
000000000001785e         db  0xff ; '.'
000000000001785f         db  0xff ; '.'
0000000000017860         db  0x50 ; 'P'
0000000000017861         db  0x28 ; '('
0000000000017862         db  0x00 ; '.'
0000000000017863         db  0x00 ; '.'
0000000000017864         db  0x80 ; '.'
0000000000017865         db  0xde ; '.'
0000000000017866         db  0xff ; '.'
0000000000017867         db  0xff ; '.'
0000000000017868         db  0x6c ; 'l'
0000000000017869         db  0x28 ; '('
000000000001786a         db  0x00 ; '.'
000000000001786b         db  0x00 ; '.'
000000000001786c         db  0x20 ; ' '
000000000001786d         db  0xdf ; '.'
000000000001786e         db  0xff ; '.'
000000000001786f         db  0xff ; '.'
0000000000017870         db  0xc8 ; '.'
0000000000017871         db  0x28 ; '('
0000000000017872         db  0x00 ; '.'
0000000000017873         db  0x00 ; '.'
0000000000017874         db  0x40 ; '@'
0000000000017875         db  0xdf ; '.'
0000000000017876         db  0xff ; '.'
0000000000017877         db  0xff ; '.'
0000000000017878         db  0xe8 ; '.'
0000000000017879         db  0x28 ; '('
000000000001787a         db  0x00 ; '.'
000000000001787b         db  0x00 ; '.'
000000000001787c         db  0x60 ; '`'
000000000001787d         db  0xdf ; '.'
000000000001787e         db  0xff ; '.'
000000000001787f         db  0xff ; '.'
0000000000017880         db  0x08 ; '.'
0000000000017881         db  0x29 ; ')'
0000000000017882         db  0x00 ; '.'
0000000000017883         db  0x00 ; '.'
0000000000017884         db  0x80 ; '.'
0000000000017885         db  0xdf ; '.'
0000000000017886         db  0xff ; '.'
0000000000017887         db  0xff ; '.'
0000000000017888         db  0x2c ; ','
0000000000017889         db  0x29 ; ')'
000000000001788a         db  0x00 ; '.'
000000000001788b         db  0x00 ; '.'
000000000001788c         db  0xa0 ; '.'
000000000001788d         db  0xdf ; '.'
000000000001788e         db  0xff ; '.'
000000000001788f         db  0xff ; '.'
0000000000017890         db  0x50 ; 'P'
0000000000017891         db  0x29 ; ')'
0000000000017892         db  0x00 ; '.'
0000000000017893         db  0x00 ; '.'
0000000000017894         db  0xf0 ; '.'
0000000000017895         db  0xdf ; '.'
0000000000017896         db  0xff ; '.'
0000000000017897         db  0xff ; '.'
0000000000017898         db  0x68 ; 'h'
0000000000017899         db  0x29 ; ')'
000000000001789a         db  0x00 ; '.'
000000000001789b         db  0x00 ; '.'
000000000001789c         db  0x70 ; 'p'
000000000001789d         db  0xe0 ; '.'
000000000001789e         db  0xff ; '.'
000000000001789f         db  0xff ; '.'
00000000000178a0         db  0xb8 ; '.'
00000000000178a1         db  0x29 ; ')'
00000000000178a2         db  0x00 ; '.'
00000000000178a3         db  0x00 ; '.'
00000000000178a4         db  0xd0 ; '.'
00000000000178a5         db  0xe0 ; '.'
00000000000178a6         db  0xff ; '.'
00000000000178a7         db  0xff ; '.'
00000000000178a8         db  0xd8 ; '.'
00000000000178a9         db  0x29 ; ')'
00000000000178aa         db  0x00 ; '.'
00000000000178ab         db  0x00 ; '.'
00000000000178ac         db  0x10 ; '.'
00000000000178ad         db  0xe1 ; '.'
00000000000178ae         db  0xff ; '.'
00000000000178af         db  0xff ; '.'
00000000000178b0         db  0xf8 ; '.'
00000000000178b1         db  0x29 ; ')'
00000000000178b2         db  0x00 ; '.'
00000000000178b3         db  0x00 ; '.'
00000000000178b4         db  0x90 ; '.'
00000000000178b5         db  0xe1 ; '.'
00000000000178b6         db  0xff ; '.'
00000000000178b7         db  0xff ; '.'
00000000000178b8         db  0x30 ; '0'
00000000000178b9         db  0x2a ; '*'
00000000000178ba         db  0x00 ; '.'
00000000000178bb         db  0x00 ; '.'
00000000000178bc         db  0xd0 ; '.'
00000000000178bd         db  0xe1 ; '.'
00000000000178be         db  0xff ; '.'
00000000000178bf         db  0xff ; '.'
00000000000178c0         db  0x50 ; 'P'
00000000000178c1         db  0x2a ; '*'
00000000000178c2         db  0x00 ; '.'
00000000000178c3         db  0x00 ; '.'
00000000000178c4         db  0x30 ; '0'
00000000000178c5         db  0xe2 ; '.'
00000000000178c6         db  0xff ; '.'
00000000000178c7         db  0xff ; '.'
00000000000178c8         db  0x80 ; '.'
00000000000178c9         db  0x2a ; '*'
00000000000178ca         db  0x00 ; '.'
00000000000178cb         db  0x00 ; '.'
00000000000178cc         db  0xa0 ; '.'
00000000000178cd         db  0xe2 ; '.'
00000000000178ce         db  0xff ; '.'
00000000000178cf         db  0xff ; '.'
00000000000178d0         db  0xc8 ; '.'
00000000000178d1         db  0x2a ; '*'
00000000000178d2         db  0x00 ; '.'
00000000000178d3         db  0x00 ; '.'
00000000000178d4         db  0xb0 ; '.'
00000000000178d5         db  0xe2 ; '.'
00000000000178d6         db  0xff ; '.'
00000000000178d7         db  0xff ; '.'
00000000000178d8         db  0xe0 ; '.'
00000000000178d9         db  0x2a ; '*'
00000000000178da         db  0x00 ; '.'
00000000000178db         db  0x00 ; '.'
00000000000178dc         db  0x00 ; '.'
00000000000178dd         db  0x00 ; '.'
00000000000178de         db  0x00 ; '.'
00000000000178df         db  0x00 ; '.'


        ; Section .eh_frame
        ; Range: [0x178e0; 0x19df8[ (9496 bytes)
        ; File offset : [96480; 105976[ (9496 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

00000000000178e0         dd         0x00000014                                  ; Length of the record
00000000000178e4         dd         0x00000000                                  ; CIE ID
00000000000178e8         db         0x01                                        ; Version
00000000000178e9         db         "zR", 0                                     ; Augmentation String
00000000000178ec         db         0x01                                        ; Code Alignment Factor (unsigned LEB128=1)
00000000000178ed         db         0x78                                        ; Data Alignment Factor (signed LEB128=-8)
00000000000178ee         db         0x10                                        ; Return address register
00000000000178ef         db         0x01                                        ; Augmentation data length
00000000000178f0         db         0x1b                                        ; FDE encoding
00000000000178f1         db  0x0c ; '.'
00000000000178f2         db  0x07 ; '.'
00000000000178f3         db  0x08 ; '.'
00000000000178f4         db  0x90 ; '.'
00000000000178f5         db  0x01 ; '.'
00000000000178f6         db  0x07 ; '.'
00000000000178f7         db  0x10 ; '.'
00000000000178f8         dd         0x00000014                                  ; Length of the record
00000000000178fc         dd         0x0000001c                                  ; FDE: parent CIE at 0x178e0 (FDE encoding = 0x1B)
0000000000017900         db         0xd0, 0xa6, 0xfe, 0xff                      ; begin 0x1fd0
0000000000017904         db         0x2b, 3 dup (0x00)                          ; length 0x2b (end at 0x1ffb)
0000000000017908         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017909         align      16
0000000000017910         dd         0x00000014                                  ; Length of the record
0000000000017914         dd         0x00000000                                  ; CIE ID
0000000000017918         db         0x01                                        ; Version
0000000000017919         db         "zR", 0                                     ; Augmentation String
000000000001791c         db         0x01                                        ; Code Alignment Factor (unsigned LEB128=1)
000000000001791d         db         0x78                                        ; Data Alignment Factor (signed LEB128=-8)
000000000001791e         db         0x10                                        ; Return address register
000000000001791f         db         0x01                                        ; Augmentation data length
0000000000017920         db         0x1b                                        ; FDE encoding
0000000000017921         db  0x0c ; '.'
0000000000017922         db  0x07 ; '.'
0000000000017923         db  0x08 ; '.'
0000000000017924         db  0x90 ; '.'
0000000000017925         db  0x01 ; '.'
0000000000017926         db  0x00 ; '.'
0000000000017927         db  0x00 ; '.'
0000000000017928         dd         0x00000024                                  ; Length of the record
000000000001792c         dd         0x0000001c                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000017930         db         0x80, 0xa0, 0xfe, 0xff                      ; begin 0x19b0
0000000000017934         db         0x20, 0x04, 2 dup (0x00)                    ; length 0x420 (end at 0x1dd0)
0000000000017938         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017939         db  0x0e ; '.'
000000000001793a         db  0x10 ; '.'
000000000001793b         db  0x46 ; 'F'
000000000001793c         db  0x0e ; '.'
000000000001793d         db  0x18 ; '.'
000000000001793e         db  0x4a ; 'J'
000000000001793f         db  0x0f ; '.'
0000000000017940         db  0x0b ; '.'
0000000000017941         db  0x77 ; 'w'
0000000000017942         db  0x08 ; '.'
0000000000017943         db  0x80 ; '.'
0000000000017944         db  0x00 ; '.'
0000000000017945         db  0x3f ; '?'
0000000000017946         db  0x1a ; '.'
0000000000017947         db  0x3b ; ';'
0000000000017948         db  0x2a ; '*'
0000000000017949         db  0x33 ; '3'
000000000001794a         db  0x24 ; '$'
000000000001794b         db  0x22 ; '"'
000000000001794c         db  0x00 ; '.'
000000000001794d         db  0x00 ; '.'
000000000001794e         db  0x00 ; '.'
000000000001794f         db  0x00 ; '.'
0000000000017950         dd         0x00000014                                  ; Length of the record
0000000000017954         dd         0x00000044                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000017958         db         0x78, 0xa4, 0xfe, 0xff                      ; begin 0x1dd0
000000000001795c         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0x1dd8)
0000000000017960         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017961         align      8
0000000000017968         dd         0x00000018                                  ; Length of the record
000000000001796c         dd         0x0000005c                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000017970         db         0x70, 0xa7, 0xfe, 0xff                      ; begin 0x20e0
0000000000017974         db         0x2f, 3 dup (0x00)                          ; length 0x2f (end at 0x210f)
0000000000017978         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017979         db  0x41 ; 'A'
000000000001797a         db  0x0e ; '.'
000000000001797b         db  0x10 ; '.'
000000000001797c         db  0x83 ; '.'
000000000001797d         db  0x02 ; '.'
000000000001797e         db  0x6d ; 'm'
000000000001797f         db  0x0e ; '.'
0000000000017980         db  0x08 ; '.'
0000000000017981         db  0x00 ; '.'
0000000000017982         db  0x00 ; '.'
0000000000017983         db  0x00 ; '.'
0000000000017984         dd         0x00000014                                  ; Length of the record
0000000000017988         dd         0x00000078                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
000000000001798c         db         0x84, 0xa7, 0xfe, 0xff                      ; begin 0x2110
0000000000017990         db         0x4a, 3 dup (0x00)                          ; length 0x4a (end at 0x215a)
0000000000017994         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017995         db  0x50 ; 'P'
0000000000017996         db  0x0e ; '.'
0000000000017997         db  0x10 ; '.'
0000000000017998         db  0x83 ; '.'
0000000000017999         db  0x02 ; '.'
000000000001799a         db  0x00 ; '.'
000000000001799b         db  0x00 ; '.'
000000000001799c         dd         0x00000024                                  ; Length of the record
00000000000179a0         dd         0x00000090                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
00000000000179a4         db         0xbc, 0xa7, 0xfe, 0xff                      ; begin 0x2160
00000000000179a8         db         0x32, 3 dup (0x00)                          ; length 0x32 (end at 0x2192)
00000000000179ac         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000179ad         db  0x41 ; 'A'
00000000000179ae         db  0x0e ; '.'
00000000000179af         db  0x10 ; '.'
00000000000179b0         db  0x86 ; '.'
00000000000179b1         db  0x02 ; '.'
00000000000179b2         db  0x41 ; 'A'
00000000000179b3         db  0x0e ; '.'
00000000000179b4         db  0x18 ; '.'
00000000000179b5         db  0x83 ; '.'
00000000000179b6         db  0x03 ; '.'
00000000000179b7         db  0x4c ; 'L'
00000000000179b8         db  0x0e ; '.'
00000000000179b9         db  0x20 ; ' '
00000000000179ba         db  0x5e ; '^'
00000000000179bb         db  0x0e ; '.'
00000000000179bc         db  0x18 ; '.'
00000000000179bd         db  0x44 ; 'D'
00000000000179be         db  0x0e ; '.'
00000000000179bf         db  0x10 ; '.'
00000000000179c0         db  0x41 ; 'A'
00000000000179c1         db  0x0e ; '.'
00000000000179c2         db  0x08 ; '.'
00000000000179c3         db  0x00 ; '.'
00000000000179c4         dd         0x0000001c                                  ; Length of the record
00000000000179c8         dd         0x000000b8                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
00000000000179cc         db         0xd4, 0xa7, 0xfe, 0xff                      ; begin 0x21a0
00000000000179d0         db         0x32, 3 dup (0x00)                          ; length 0x32 (end at 0x21d2)
00000000000179d4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000179d5         db  0x41 ; 'A'
00000000000179d6         db  0x0e ; '.'
00000000000179d7         db  0x10 ; '.'
00000000000179d8         db  0x83 ; '.'
00000000000179d9         db  0x02 ; '.'
00000000000179da         db  0x55 ; 'U'
00000000000179db         db  0x0a ; '.'
00000000000179dc         db  0x0e ; '.'
00000000000179dd         db  0x08 ; '.'
00000000000179de         db  0x4a ; 'J'
00000000000179df         db  0x0b ; '.'
00000000000179e0         db  0x4d ; 'M'
00000000000179e1         db  0x0e ; '.'
00000000000179e2         db  0x08 ; '.'
00000000000179e3         db  0x00 ; '.'
00000000000179e4         dd         0x00000014                                  ; Length of the record
00000000000179e8         dd         0x000000d8                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
00000000000179ec         db         0xf4, 0xa7, 0xfe, 0xff                      ; begin 0x21e0
00000000000179f0         db         0x67, 3 dup (0x00)                          ; length 0x67 (end at 0x2247)
00000000000179f4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000179f5         db  0x02 ; '.'
00000000000179f6         db  0x62 ; 'b'
00000000000179f7         db  0x0e ; '.'
00000000000179f8         db  0x10 ; '.'
00000000000179f9         db  0x00 ; '.'
00000000000179fa         db  0x00 ; '.'
00000000000179fb         db  0x00 ; '.'
00000000000179fc         dd         0x00000010                                  ; Length of the record
0000000000017a00         dd         0x000000f0                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000017a04         db         0xdc, 0xa3, 0xfe, 0xff                      ; begin 0x1de0
0000000000017a08         db         0x23, 3 dup (0x00)                          ; length 0x23 (end at 0x1e03)
0000000000017a0c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017a0d         db  0x59 ; 'Y'
0000000000017a0e         db  0x0e ; '.'
0000000000017a0f         db  0x10 ; '.'
0000000000017a10         dd         0x0000003c                                  ; Length of the record
0000000000017a14         dd         0x00000104                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000017a18         db         0x38, 0xa8, 0xfe, 0xff                      ; begin 0x2250
0000000000017a1c         db         0x90, 3 dup (0x00)                          ; length 0x90 (end at 0x22e0)
0000000000017a20         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017a21         db  0x47 ; 'G'
0000000000017a22         db  0x0e ; '.'
0000000000017a23         db  0x10 ; '.'
0000000000017a24         db  0x86 ; '.'
0000000000017a25         db  0x02 ; '.'
0000000000017a26         db  0x41 ; 'A'
0000000000017a27         db  0x0e ; '.'
0000000000017a28         db  0x18 ; '.'
0000000000017a29         db  0x83 ; '.'
0000000000017a2a         db  0x03 ; '.'
0000000000017a2b         db  0x47 ; 'G'
0000000000017a2c         db  0x0e ; '.'
0000000000017a2d         db  0x20 ; ' '
0000000000017a2e         db  0x78 ; 'x'
0000000000017a2f         db  0x0e ; '.'
0000000000017a30         db  0x18 ; '.'
0000000000017a31         db  0x43 ; 'C'
0000000000017a32         db  0x0e ; '.'
0000000000017a33         db  0x10 ; '.'
0000000000017a34         db  0x41 ; 'A'
0000000000017a35         db  0x0e ; '.'
0000000000017a36         db  0x08 ; '.'
0000000000017a37         db  0x45 ; 'E'
0000000000017a38         db  0xc3 ; '.'
0000000000017a39         db  0xc6 ; '.'
0000000000017a3a         db  0x50 ; 'P'
0000000000017a3b         db  0x0e ; '.'
0000000000017a3c         db  0x20 ; ' '
0000000000017a3d         db  0x83 ; '.'
0000000000017a3e         db  0x03 ; '.'
0000000000017a3f         db  0x86 ; '.'
0000000000017a40         db  0x02 ; '.'
0000000000017a41         db  0x63 ; 'c'
0000000000017a42         db  0x0a ; '.'
0000000000017a43         db  0x0e ; '.'
0000000000017a44         db  0x18 ; '.'
0000000000017a45         db  0x46 ; 'F'
0000000000017a46         db  0x0e ; '.'
0000000000017a47         db  0x10 ; '.'
0000000000017a48         db  0x41 ; 'A'
0000000000017a49         db  0x0e ; '.'
0000000000017a4a         db  0x08 ; '.'
0000000000017a4b         db  0x41 ; 'A'
0000000000017a4c         db  0x0b ; '.'
0000000000017a4d         db  0x00 ; '.'
0000000000017a4e         db  0x00 ; '.'
0000000000017a4f         db  0x00 ; '.'
0000000000017a50         dd         0x00000034                                  ; Length of the record
0000000000017a54         dd         0x00000144                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000017a58         db         0x88, 0xa8, 0xfe, 0xff                      ; begin 0x22e0
0000000000017a5c         db         0x4d, 3 dup (0x00)                          ; length 0x4d (end at 0x232d)
0000000000017a60         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017a61         db  0x42 ; 'B'
0000000000017a62         db  0x0e ; '.'
0000000000017a63         db  0x10 ; '.'
0000000000017a64         db  0x8c ; '.'
0000000000017a65         db  0x02 ; '.'
0000000000017a66         db  0x41 ; 'A'
0000000000017a67         db  0x0e ; '.'
0000000000017a68         db  0x18 ; '.'
0000000000017a69         db  0x86 ; '.'
0000000000017a6a         db  0x03 ; '.'
0000000000017a6b         db  0x41 ; 'A'
0000000000017a6c         db  0x0e ; '.'
0000000000017a6d         db  0x20 ; ' '
0000000000017a6e         db  0x83 ; '.'
0000000000017a6f         db  0x04 ; '.'
0000000000017a70         db  0x4c ; 'L'
0000000000017a71         db  0x0a ; '.'
0000000000017a72         db  0x0e ; '.'
0000000000017a73         db  0x18 ; '.'
0000000000017a74         db  0x41 ; 'A'
0000000000017a75         db  0x0e ; '.'
0000000000017a76         db  0x10 ; '.'
0000000000017a77         db  0x42 ; 'B'
0000000000017a78         db  0x0e ; '.'
0000000000017a79         db  0x08 ; '.'
0000000000017a7a         db  0x45 ; 'E'
0000000000017a7b         db  0x0b ; '.'
0000000000017a7c         db  0x6c ; 'l'
0000000000017a7d         db  0x0a ; '.'
0000000000017a7e         db  0x0e ; '.'
0000000000017a7f         db  0x18 ; '.'
0000000000017a80         db  0x41 ; 'A'
0000000000017a81         db  0x0e ; '.'
0000000000017a82         db  0x10 ; '.'
0000000000017a83         db  0x42 ; 'B'
0000000000017a84         db  0x0e ; '.'
0000000000017a85         db  0x08 ; '.'
0000000000017a86         db  0x41 ; 'A'
0000000000017a87         db  0x0b ; '.'
0000000000017a88         dd         0x00000028                                  ; Length of the record
0000000000017a8c         dd         0x0000017c                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000017a90         db         0xa0, 0xa8, 0xfe, 0xff                      ; begin 0x2330
0000000000017a94         db         0x79, 0x04, 2 dup (0x00)                    ; length 0x479 (end at 0x27a9)
0000000000017a98         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017a99         db  0x42 ; 'B'
0000000000017a9a         db  0x0e ; '.'
0000000000017a9b         db  0x10 ; '.'
0000000000017a9c         db  0x8d ; '.'
0000000000017a9d         db  0x02 ; '.'
0000000000017a9e         db  0x42 ; 'B'
0000000000017a9f         db  0x0e ; '.'
0000000000017aa0         db  0x18 ; '.'
0000000000017aa1         db  0x8c ; '.'
0000000000017aa2         db  0x03 ; '.'
0000000000017aa3         db  0x46 ; 'F'
0000000000017aa4         db  0x0e ; '.'
0000000000017aa5         db  0x20 ; ' '
0000000000017aa6         db  0x86 ; '.'
0000000000017aa7         db  0x04 ; '.'
0000000000017aa8         db  0x41 ; 'A'
0000000000017aa9         db  0x0e ; '.'
0000000000017aaa         db  0x28 ; '('
0000000000017aab         db  0x83 ; '.'
0000000000017aac         db  0x05 ; '.'
0000000000017aad         db  0x49 ; 'I'
0000000000017aae         db  0x0e ; '.'
0000000000017aaf         db  0xb0 ; '.'
0000000000017ab0         db  0x01 ; '.'
0000000000017ab1         db  0x00 ; '.'
0000000000017ab2         db  0x00 ; '.'
0000000000017ab3         db  0x00 ; '.'
0000000000017ab4         dd         0x0000004c                                  ; Length of the record
0000000000017ab8         dd         0x000001a8                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000017abc         db         0xf4, 0xac, 0xfe, 0xff                      ; begin 0x27b0
0000000000017ac0         db         0xa3, 0x04, 2 dup (0x00)                    ; length 0x4a3 (end at 0x2c53)
0000000000017ac4         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017ac5         db  0x42 ; 'B'
0000000000017ac6         db  0x0e ; '.'
0000000000017ac7         db  0x10 ; '.'
0000000000017ac8         db  0x8f ; '.'
0000000000017ac9         db  0x02 ; '.'
0000000000017aca         db  0x42 ; 'B'
0000000000017acb         db  0x0e ; '.'
0000000000017acc         db  0x18 ; '.'
0000000000017acd         db  0x8e ; '.'
0000000000017ace         db  0x03 ; '.'
0000000000017acf         db  0x42 ; 'B'
0000000000017ad0         db  0x0e ; '.'
0000000000017ad1         db  0x20 ; ' '
0000000000017ad2         db  0x8d ; '.'
0000000000017ad3         db  0x04 ; '.'
0000000000017ad4         db  0x42 ; 'B'
0000000000017ad5         db  0x0e ; '.'
0000000000017ad6         db  0x28 ; '('
0000000000017ad7         db  0x8c ; '.'
0000000000017ad8         db  0x05 ; '.'
0000000000017ad9         db  0x41 ; 'A'
0000000000017ada         db  0x0e ; '.'
0000000000017adb         db  0x30 ; '0'
0000000000017adc         db  0x86 ; '.'
0000000000017add         db  0x06 ; '.'
0000000000017ade         db  0x41 ; 'A'
0000000000017adf         db  0x0e ; '.'
0000000000017ae0         db  0x38 ; '8'
0000000000017ae1         db  0x83 ; '.'
0000000000017ae2         db  0x07 ; '.'
0000000000017ae3         db  0x4d ; 'M'
0000000000017ae4         db  0x0e ; '.'
0000000000017ae5         db  0x80 ; '.'
0000000000017ae6         db  0x04 ; '.'
0000000000017ae7         db  0x03 ; '.'
0000000000017ae8         db  0x4a ; 'J'
0000000000017ae9         db  0x01 ; '.'
0000000000017aea         db  0x0a ; '.'
0000000000017aeb         db  0x0e ; '.'
0000000000017aec         db  0x38 ; '8'
0000000000017aed         db  0x41 ; 'A'
0000000000017aee         db  0x0e ; '.'
0000000000017aef         db  0x30 ; '0'
0000000000017af0         db  0x41 ; 'A'
0000000000017af1         db  0x0e ; '.'
0000000000017af2         db  0x28 ; '('
0000000000017af3         db  0x42 ; 'B'
0000000000017af4         db  0x0e ; '.'
0000000000017af5         db  0x20 ; ' '
0000000000017af6         db  0x42 ; 'B'
0000000000017af7         db  0x0e ; '.'
0000000000017af8         db  0x18 ; '.'
0000000000017af9         db  0x42 ; 'B'
0000000000017afa         db  0x0e ; '.'
0000000000017afb         db  0x10 ; '.'
0000000000017afc         db  0x42 ; 'B'
0000000000017afd         db  0x0e ; '.'
0000000000017afe         db  0x08 ; '.'
0000000000017aff         db  0x45 ; 'E'
0000000000017b00         db  0x0b ; '.'
0000000000017b01         db  0x00 ; '.'
0000000000017b02         db  0x00 ; '.'
0000000000017b03         db  0x00 ; '.'
0000000000017b04         dd         0x0000004c                                  ; Length of the record
0000000000017b08         dd         0x000001f8                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000017b0c         db         0x54, 0xb1, 0xfe, 0xff                      ; begin 0x2c60
0000000000017b10         db         0xa2, 0x0b, 2 dup (0x00)                    ; length 0xba2 (end at 0x3802)
0000000000017b14         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017b15         db  0x42 ; 'B'
0000000000017b16         db  0x0e ; '.'
0000000000017b17         db  0x10 ; '.'
0000000000017b18         db  0x8f ; '.'
0000000000017b19         db  0x02 ; '.'
0000000000017b1a         db  0x42 ; 'B'
0000000000017b1b         db  0x0e ; '.'
0000000000017b1c         db  0x18 ; '.'
0000000000017b1d         db  0x8e ; '.'
0000000000017b1e         db  0x03 ; '.'
0000000000017b1f         db  0x42 ; 'B'
0000000000017b20         db  0x0e ; '.'
0000000000017b21         db  0x20 ; ' '
0000000000017b22         db  0x8d ; '.'
0000000000017b23         db  0x04 ; '.'
0000000000017b24         db  0x42 ; 'B'
0000000000017b25         db  0x0e ; '.'
0000000000017b26         db  0x28 ; '('
0000000000017b27         db  0x8c ; '.'
0000000000017b28         db  0x05 ; '.'
0000000000017b29         db  0x41 ; 'A'
0000000000017b2a         db  0x0e ; '.'
0000000000017b2b         db  0x30 ; '0'
0000000000017b2c         db  0x86 ; '.'
0000000000017b2d         db  0x06 ; '.'
0000000000017b2e         db  0x41 ; 'A'
0000000000017b2f         db  0x0e ; '.'
0000000000017b30         db  0x38 ; '8'
0000000000017b31         db  0x83 ; '.'
0000000000017b32         db  0x07 ; '.'
0000000000017b33         db  0x50 ; 'P'
0000000000017b34         db  0x0e ; '.'
0000000000017b35         db  0xc0 ; '.'
0000000000017b36         db  0x02 ; '.'
0000000000017b37         db  0x03 ; '.'
0000000000017b38         db  0x49 ; 'I'
0000000000017b39         db  0x01 ; '.'
0000000000017b3a         db  0x0a ; '.'
0000000000017b3b         db  0x0e ; '.'
0000000000017b3c         db  0x38 ; '8'
0000000000017b3d         db  0x41 ; 'A'
0000000000017b3e         db  0x0e ; '.'
0000000000017b3f         db  0x30 ; '0'
0000000000017b40         db  0x41 ; 'A'
0000000000017b41         db  0x0e ; '.'
0000000000017b42         db  0x28 ; '('
0000000000017b43         db  0x42 ; 'B'
0000000000017b44         db  0x0e ; '.'
0000000000017b45         db  0x20 ; ' '
0000000000017b46         db  0x42 ; 'B'
0000000000017b47         db  0x0e ; '.'
0000000000017b48         db  0x18 ; '.'
0000000000017b49         db  0x42 ; 'B'
0000000000017b4a         db  0x0e ; '.'
0000000000017b4b         db  0x10 ; '.'
0000000000017b4c         db  0x42 ; 'B'
0000000000017b4d         db  0x0e ; '.'
0000000000017b4e         db  0x08 ; '.'
0000000000017b4f         db  0x43 ; 'C'
0000000000017b50         db  0x0b ; '.'
0000000000017b51         db  0x00 ; '.'
0000000000017b52         db  0x00 ; '.'
0000000000017b53         db  0x00 ; '.'
0000000000017b54         dd         0x00000044                                  ; Length of the record
0000000000017b58         dd         0x00000248                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000017b5c         db         0xb4, 0xbc, 0xfe, 0xff                      ; begin 0x3810
0000000000017b60         db         0x82, 3 dup (0x00)                          ; length 0x82 (end at 0x3892)
0000000000017b64         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017b65         db  0x42 ; 'B'
0000000000017b66         db  0x0e ; '.'
0000000000017b67         db  0x10 ; '.'
0000000000017b68         db  0x8f ; '.'
0000000000017b69         db  0x02 ; '.'
0000000000017b6a         db  0x42 ; 'B'
0000000000017b6b         db  0x0e ; '.'
0000000000017b6c         db  0x18 ; '.'
0000000000017b6d         db  0x8e ; '.'
0000000000017b6e         db  0x03 ; '.'
0000000000017b6f         db  0x45 ; 'E'
0000000000017b70         db  0x0e ; '.'
0000000000017b71         db  0x20 ; ' '
0000000000017b72         db  0x8d ; '.'
0000000000017b73         db  0x04 ; '.'
0000000000017b74         db  0x42 ; 'B'
0000000000017b75         db  0x0e ; '.'
0000000000017b76         db  0x28 ; '('
0000000000017b77         db  0x8c ; '.'
0000000000017b78         db  0x05 ; '.'
0000000000017b79         db  0x48 ; 'H'
0000000000017b7a         db  0x0e ; '.'
0000000000017b7b         db  0x30 ; '0'
0000000000017b7c         db  0x86 ; '.'
0000000000017b7d         db  0x06 ; '.'
0000000000017b7e         db  0x41 ; 'A'
0000000000017b7f         db  0x0e ; '.'
0000000000017b80         db  0x38 ; '8'
0000000000017b81         db  0x83 ; '.'
0000000000017b82         db  0x07 ; '.'
0000000000017b83         db  0x4a ; 'J'
0000000000017b84         db  0x0e ; '.'
0000000000017b85         db  0x40 ; '@'
0000000000017b86         db  0x02 ; '.'
0000000000017b87         db  0x56 ; 'V'
0000000000017b88         db  0x0e ; '.'
0000000000017b89         db  0x38 ; '8'
0000000000017b8a         db  0x44 ; 'D'
0000000000017b8b         db  0x0e ; '.'
0000000000017b8c         db  0x30 ; '0'
0000000000017b8d         db  0x41 ; 'A'
0000000000017b8e         db  0x0e ; '.'
0000000000017b8f         db  0x28 ; '('
0000000000017b90         db  0x42 ; 'B'
0000000000017b91         db  0x0e ; '.'
0000000000017b92         db  0x20 ; ' '
0000000000017b93         db  0x42 ; 'B'
0000000000017b94         db  0x0e ; '.'
0000000000017b95         db  0x18 ; '.'
0000000000017b96         db  0x42 ; 'B'
0000000000017b97         db  0x0e ; '.'
0000000000017b98         db  0x10 ; '.'
0000000000017b99         db  0x42 ; 'B'
0000000000017b9a         db  0x0e ; '.'
0000000000017b9b         db  0x08 ; '.'
0000000000017b9c         dd         0x0000003c                                  ; Length of the record
0000000000017ba0         dd         0x00000290                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000017ba4         db         0xfc, 0xbc, 0xfe, 0xff                      ; begin 0x38a0
0000000000017ba8         db         0x45, 0x01, 2 dup (0x00)                    ; length 0x145 (end at 0x39e5)
0000000000017bac         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017bad         db  0x42 ; 'B'
0000000000017bae         db  0x0e ; '.'
0000000000017baf         db  0x10 ; '.'
0000000000017bb0         db  0x8e ; '.'
0000000000017bb1         db  0x02 ; '.'
0000000000017bb2         db  0x42 ; 'B'
0000000000017bb3         db  0x0e ; '.'
0000000000017bb4         db  0x18 ; '.'
0000000000017bb5         db  0x8d ; '.'
0000000000017bb6         db  0x03 ; '.'
0000000000017bb7         db  0x45 ; 'E'
0000000000017bb8         db  0x0e ; '.'
0000000000017bb9         db  0x20 ; ' '
0000000000017bba         db  0x8c ; '.'
0000000000017bbb         db  0x04 ; '.'
0000000000017bbc         db  0x45 ; 'E'
0000000000017bbd         db  0x0e ; '.'
0000000000017bbe         db  0x28 ; '('
0000000000017bbf         db  0x86 ; '.'
0000000000017bc0         db  0x05 ; '.'
0000000000017bc1         db  0x41 ; 'A'
0000000000017bc2         db  0x0e ; '.'
0000000000017bc3         db  0x30 ; '0'
0000000000017bc4         db  0x83 ; '.'
0000000000017bc5         db  0x06 ; '.'
0000000000017bc6         db  0x02 ; '.'
0000000000017bc7         db  0xe3 ; '.'
0000000000017bc8         db  0x0a ; '.'
0000000000017bc9         db  0x0e ; '.'
0000000000017bca         db  0x28 ; '('
0000000000017bcb         db  0x44 ; 'D'
0000000000017bcc         db  0x0e ; '.'
0000000000017bcd         db  0x20 ; ' '
0000000000017bce         db  0x42 ; 'B'
0000000000017bcf         db  0x0e ; '.'
0000000000017bd0         db  0x18 ; '.'
0000000000017bd1         db  0x42 ; 'B'
0000000000017bd2         db  0x0e ; '.'
0000000000017bd3         db  0x10 ; '.'
0000000000017bd4         db  0x42 ; 'B'
0000000000017bd5         db  0x0e ; '.'
0000000000017bd6         db  0x08 ; '.'
0000000000017bd7         db  0x41 ; 'A'
0000000000017bd8         db  0x0b ; '.'
0000000000017bd9         db  0x00 ; '.'
0000000000017bda         db  0x00 ; '.'
0000000000017bdb         db  0x00 ; '.'
0000000000017bdc         dd         0x0000003c                                  ; Length of the record
0000000000017be0         dd         0x000002d0                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000017be4         db         0x0c, 0xbe, 0xfe, 0xff                      ; begin 0x39f0
0000000000017be8         db         0xd8, 3 dup (0x00)                          ; length 0xd8 (end at 0x3ac8)
0000000000017bec         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017bed         db  0x42 ; 'B'
0000000000017bee         db  0x0e ; '.'
0000000000017bef         db  0x10 ; '.'
0000000000017bf0         db  0x8e ; '.'
0000000000017bf1         db  0x02 ; '.'
0000000000017bf2         db  0x42 ; 'B'
0000000000017bf3         db  0x0e ; '.'
0000000000017bf4         db  0x18 ; '.'
0000000000017bf5         db  0x8d ; '.'
0000000000017bf6         db  0x03 ; '.'
0000000000017bf7         db  0x45 ; 'E'
0000000000017bf8         db  0x0e ; '.'
0000000000017bf9         db  0x20 ; ' '
0000000000017bfa         db  0x8c ; '.'
0000000000017bfb         db  0x04 ; '.'
0000000000017bfc         db  0x45 ; 'E'
0000000000017bfd         db  0x0e ; '.'
0000000000017bfe         db  0x28 ; '('
0000000000017bff         db  0x86 ; '.'
0000000000017c00         db  0x05 ; '.'
0000000000017c01         db  0x41 ; 'A'
0000000000017c02         db  0x0e ; '.'
0000000000017c03         db  0x30 ; '0'
0000000000017c04         db  0x83 ; '.'
0000000000017c05         db  0x06 ; '.'
0000000000017c06         db  0x02 ; '.'
0000000000017c07         db  0x9a ; '.'
0000000000017c08         db  0x0a ; '.'
0000000000017c09         db  0x0e ; '.'
0000000000017c0a         db  0x28 ; '('
0000000000017c0b         db  0x44 ; 'D'
0000000000017c0c         db  0x0e ; '.'
0000000000017c0d         db  0x20 ; ' '
0000000000017c0e         db  0x42 ; 'B'
0000000000017c0f         db  0x0e ; '.'
0000000000017c10         db  0x18 ; '.'
0000000000017c11         db  0x42 ; 'B'
0000000000017c12         db  0x0e ; '.'
0000000000017c13         db  0x10 ; '.'
0000000000017c14         db  0x42 ; 'B'
0000000000017c15         db  0x0e ; '.'
0000000000017c16         db  0x08 ; '.'
0000000000017c17         db  0x41 ; 'A'
0000000000017c18         db  0x0b ; '.'
0000000000017c19         db  0x00 ; '.'
0000000000017c1a         db  0x00 ; '.'
0000000000017c1b         db  0x00 ; '.'
0000000000017c1c         dd         0x00000048                                  ; Length of the record
0000000000017c20         dd         0x00000310                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000017c24         db         0xac, 0xbe, 0xfe, 0xff                      ; begin 0x3ad0
0000000000017c28         db         0x51, 0x02, 2 dup (0x00)                    ; length 0x251 (end at 0x3d21)
0000000000017c2c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017c2d         db  0x42 ; 'B'
0000000000017c2e         db  0x0e ; '.'
0000000000017c2f         db  0x10 ; '.'
0000000000017c30         db  0x8f ; '.'
0000000000017c31         db  0x02 ; '.'
0000000000017c32         db  0x42 ; 'B'
0000000000017c33         db  0x0e ; '.'
0000000000017c34         db  0x18 ; '.'
0000000000017c35         db  0x8e ; '.'
0000000000017c36         db  0x03 ; '.'
0000000000017c37         db  0x45 ; 'E'
0000000000017c38         db  0x0e ; '.'
0000000000017c39         db  0x20 ; ' '
0000000000017c3a         db  0x8d ; '.'
0000000000017c3b         db  0x04 ; '.'
0000000000017c3c         db  0x42 ; 'B'
0000000000017c3d         db  0x0e ; '.'
0000000000017c3e         db  0x28 ; '('
0000000000017c3f         db  0x8c ; '.'
0000000000017c40         db  0x05 ; '.'
0000000000017c41         db  0x45 ; 'E'
0000000000017c42         db  0x0e ; '.'
0000000000017c43         db  0x30 ; '0'
0000000000017c44         db  0x86 ; '.'
0000000000017c45         db  0x06 ; '.'
0000000000017c46         db  0x41 ; 'A'
0000000000017c47         db  0x0e ; '.'
0000000000017c48         db  0x38 ; '8'
0000000000017c49         db  0x83 ; '.'
0000000000017c4a         db  0x07 ; '.'
0000000000017c4b         db  0x47 ; 'G'
0000000000017c4c         db  0x0e ; '.'
0000000000017c4d         db  0x40 ; '@'
0000000000017c4e         db  0x03 ; '.'
0000000000017c4f         db  0x2b ; '+'
0000000000017c50         db  0x02 ; '.'
0000000000017c51         db  0x0e ; '.'
0000000000017c52         db  0x38 ; '8'
0000000000017c53         db  0x44 ; 'D'
0000000000017c54         db  0x0e ; '.'
0000000000017c55         db  0x30 ; '0'
0000000000017c56         db  0x41 ; 'A'
0000000000017c57         db  0x0e ; '.'
0000000000017c58         db  0x28 ; '('
0000000000017c59         db  0x42 ; 'B'
0000000000017c5a         db  0x0e ; '.'
0000000000017c5b         db  0x20 ; ' '
0000000000017c5c         db  0x42 ; 'B'
0000000000017c5d         db  0x0e ; '.'
0000000000017c5e         db  0x18 ; '.'
0000000000017c5f         db  0x42 ; 'B'
0000000000017c60         db  0x0e ; '.'
0000000000017c61         db  0x10 ; '.'
0000000000017c62         db  0x42 ; 'B'
0000000000017c63         db  0x0e ; '.'
0000000000017c64         db  0x08 ; '.'
0000000000017c65         db  0x00 ; '.'
0000000000017c66         db  0x00 ; '.'
0000000000017c67         db  0x00 ; '.'
0000000000017c68         dd         0x0000002c                                  ; Length of the record
0000000000017c6c         dd         0x0000035c                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000017c70         db         2 dup (0xc0), 0xfe, 0xff                    ; begin 0x3d30
0000000000017c74         db         0xad, 3 dup (0x00)                          ; length 0xad (end at 0x3ddd)
0000000000017c78         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017c79         db  0x42 ; 'B'
0000000000017c7a         db  0x0e ; '.'
0000000000017c7b         db  0x10 ; '.'
0000000000017c7c         db  0x8c ; '.'
0000000000017c7d         db  0x02 ; '.'
0000000000017c7e         db  0x41 ; 'A'
0000000000017c7f         db  0x0e ; '.'
0000000000017c80         db  0x18 ; '.'
0000000000017c81         db  0x86 ; '.'
0000000000017c82         db  0x03 ; '.'
0000000000017c83         db  0x44 ; 'D'
0000000000017c84         db  0x0e ; '.'
0000000000017c85         db  0x20 ; ' '
0000000000017c86         db  0x83 ; '.'
0000000000017c87         db  0x04 ; '.'
0000000000017c88         db  0x02 ; '.'
0000000000017c89         db  0x93 ; '.'
0000000000017c8a         db  0x0a ; '.'
0000000000017c8b         db  0x0e ; '.'
0000000000017c8c         db  0x18 ; '.'
0000000000017c8d         db  0x41 ; 'A'
0000000000017c8e         db  0x0e ; '.'
0000000000017c8f         db  0x10 ; '.'
0000000000017c90         db  0x42 ; 'B'
0000000000017c91         db  0x0e ; '.'
0000000000017c92         db  0x08 ; '.'
0000000000017c93         db  0x43 ; 'C'
0000000000017c94         db  0x0b ; '.'
0000000000017c95         db  0x00 ; '.'
0000000000017c96         db  0x00 ; '.'
0000000000017c97         db  0x00 ; '.'
0000000000017c98         dd         0x0000002c                                  ; Length of the record
0000000000017c9c         dd         0x0000038c                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000017ca0         db         0x40, 0xc1, 0xfe, 0xff                      ; begin 0x3de0
0000000000017ca4         db         0xb5, 3 dup (0x00)                          ; length 0xb5 (end at 0x3e95)
0000000000017ca8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017ca9         db  0x42 ; 'B'
0000000000017caa         db  0x0e ; '.'
0000000000017cab         db  0x10 ; '.'
0000000000017cac         db  0x8c ; '.'
0000000000017cad         db  0x02 ; '.'
0000000000017cae         db  0x41 ; 'A'
0000000000017caf         db  0x0e ; '.'
0000000000017cb0         db  0x18 ; '.'
0000000000017cb1         db  0x86 ; '.'
0000000000017cb2         db  0x03 ; '.'
0000000000017cb3         db  0x44 ; 'D'
0000000000017cb4         db  0x0e ; '.'
0000000000017cb5         db  0x20 ; ' '
0000000000017cb6         db  0x83 ; '.'
0000000000017cb7         db  0x04 ; '.'
0000000000017cb8         db  0x02 ; '.'
0000000000017cb9         db  0x98 ; '.'
0000000000017cba         db  0x0a ; '.'
0000000000017cbb         db  0x0e ; '.'
0000000000017cbc         db  0x18 ; '.'
0000000000017cbd         db  0x41 ; 'A'
0000000000017cbe         db  0x0e ; '.'
0000000000017cbf         db  0x10 ; '.'
0000000000017cc0         db  0x42 ; 'B'
0000000000017cc1         db  0x0e ; '.'
0000000000017cc2         db  0x08 ; '.'
0000000000017cc3         db  0x46 ; 'F'
0000000000017cc4         db  0x0b ; '.'
0000000000017cc5         db  0x00 ; '.'
0000000000017cc6         db  0x00 ; '.'
0000000000017cc7         db  0x00 ; '.'
0000000000017cc8         dd         0x0000003c                                  ; Length of the record
0000000000017ccc         dd         0x000003bc                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000017cd0         db         0x40, 0xa1, 0xfe, 0xff                      ; begin 0x1e10
0000000000017cd4         db         0xbb, 0x01, 2 dup (0x00)                    ; length 0x1bb (end at 0x1fcb)
0000000000017cd8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017cd9         db  0x41 ; 'A'
0000000000017cda         db  0x0e ; '.'
0000000000017cdb         db  0x10 ; '.'
0000000000017cdc         db  0x86 ; '.'
0000000000017cdd         db  0x02 ; '.'
0000000000017cde         db  0x41 ; 'A'
0000000000017cdf         db  0x0e ; '.'
0000000000017ce0         db  0x18 ; '.'
0000000000017ce1         db  0x83 ; '.'
0000000000017ce2         db  0x03 ; '.'
0000000000017ce3         db  0x49 ; 'I'
0000000000017ce4         db  0x0e ; '.'
0000000000017ce5         db  0x20 ; ' '
0000000000017ce6         db  0x02 ; '.'
0000000000017ce7         db  0x57 ; 'W'
0000000000017ce8         db  0x0e ; '.'
0000000000017ce9         db  0x28 ; '('
0000000000017cea         db  0x5d ; ']'
0000000000017ceb         db  0x0e ; '.'
0000000000017cec         db  0x30 ; '0'
0000000000017ced         db  0x4d ; 'M'
0000000000017cee         db  0x0e ; '.'
0000000000017cef         db  0x38 ; '8'
0000000000017cf0         db  0x48 ; 'H'
0000000000017cf1         db  0x0e ; '.'
0000000000017cf2         db  0x40 ; '@'
0000000000017cf3         db  0x4b ; 'K'
0000000000017cf4         db  0x0e ; '.'
0000000000017cf5         db  0x20 ; ' '
0000000000017cf6         db  0x02 ; '.'
0000000000017cf7         db  0x71 ; 'q'
0000000000017cf8         db  0x0a ; '.'
0000000000017cf9         db  0x0e ; '.'
0000000000017cfa         db  0x18 ; '.'
0000000000017cfb         db  0x44 ; 'D'
0000000000017cfc         db  0x0e ; '.'
0000000000017cfd         db  0x10 ; '.'
0000000000017cfe         db  0x41 ; 'A'
0000000000017cff         db  0x0e ; '.'
0000000000017d00         db  0x08 ; '.'
0000000000017d01         db  0x41 ; 'A'
0000000000017d02         db  0x0b ; '.'
0000000000017d03         db  0x00 ; '.'
0000000000017d04         db  0x00 ; '.'
0000000000017d05         db  0x00 ; '.'
0000000000017d06         db  0x00 ; '.'
0000000000017d07         db  0x00 ; '.'
0000000000017d08         dd         0x00000010                                  ; Length of the record
0000000000017d0c         dd         0x000003fc                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000017d10         db         0x90, 0xc1, 0xfe, 0xff                      ; begin 0x3ea0
0000000000017d14         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0x3ea8)
0000000000017d18         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017d19         align      4
0000000000017d1c         dd         0x00000010                                  ; Length of the record
0000000000017d20         dd         0x00000410                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000017d24         db         0x8c, 0xc1, 0xfe, 0xff                      ; begin 0x3eb0
0000000000017d28         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0x3eb8)
0000000000017d2c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017d2d         align      16
0000000000017d30         dd         0x0000002c                                  ; Length of the record
0000000000017d34         dd         0x00000424                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000017d38         db         0x88, 0xc1, 0xfe, 0xff                      ; begin 0x3ec0
0000000000017d3c         db         0xa4, 3 dup (0x00)                          ; length 0xa4 (end at 0x3f64)
0000000000017d40         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017d41         db  0x41 ; 'A'
0000000000017d42         db  0x0e ; '.'
0000000000017d43         db  0x10 ; '.'
0000000000017d44         db  0x86 ; '.'
0000000000017d45         db  0x02 ; '.'
0000000000017d46         db  0x41 ; 'A'
0000000000017d47         db  0x0e ; '.'
0000000000017d48         db  0x18 ; '.'
0000000000017d49         db  0x83 ; '.'
0000000000017d4a         db  0x03 ; '.'
0000000000017d4b         db  0x44 ; 'D'
0000000000017d4c         db  0x0e ; '.'
0000000000017d4d         db  0x20 ; ' '
0000000000017d4e         db  0x7a ; 'z'
0000000000017d4f         db  0x0a ; '.'
0000000000017d50         db  0x0e ; '.'
0000000000017d51         db  0x18 ; '.'
0000000000017d52         db  0x41 ; 'A'
0000000000017d53         db  0x0e ; '.'
0000000000017d54         db  0x10 ; '.'
0000000000017d55         db  0x41 ; 'A'
0000000000017d56         db  0x0e ; '.'
0000000000017d57         db  0x08 ; '.'
0000000000017d58         db  0x41 ; 'A'
0000000000017d59         db  0x0b ; '.'
0000000000017d5a         db  0x00 ; '.'
0000000000017d5b         db  0x00 ; '.'
0000000000017d5c         db  0x00 ; '.'
0000000000017d5d         db  0x00 ; '.'
0000000000017d5e         db  0x00 ; '.'
0000000000017d5f         db  0x00 ; '.'
0000000000017d60         dd         0x00000038                                  ; Length of the record
0000000000017d64         dd         0x00000454                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000017d68         db         0x08, 0xc2, 0xfe, 0xff                      ; begin 0x3f70
0000000000017d6c         db         0x3f, 0x01, 2 dup (0x00)                    ; length 0x13f (end at 0x40af)
0000000000017d70         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017d71         db  0x42 ; 'B'
0000000000017d72         db  0x0e ; '.'
0000000000017d73         db  0x10 ; '.'
0000000000017d74         db  0x8d ; '.'
0000000000017d75         db  0x02 ; '.'
0000000000017d76         db  0x42 ; 'B'
0000000000017d77         db  0x0e ; '.'
0000000000017d78         db  0x18 ; '.'
0000000000017d79         db  0x8c ; '.'
0000000000017d7a         db  0x03 ; '.'
0000000000017d7b         db  0x44 ; 'D'
0000000000017d7c         db  0x0e ; '.'
0000000000017d7d         db  0x20 ; ' '
0000000000017d7e         db  0x86 ; '.'
0000000000017d7f         db  0x04 ; '.'
0000000000017d80         db  0x41 ; 'A'
0000000000017d81         db  0x0e ; '.'
0000000000017d82         db  0x28 ; '('
0000000000017d83         db  0x83 ; '.'
0000000000017d84         db  0x05 ; '.'
0000000000017d85         db  0x4d ; 'M'
0000000000017d86         db  0x0e ; '.'
0000000000017d87         db  0x90 ; '.'
0000000000017d88         db  0x02 ; '.'
0000000000017d89         db  0x02 ; '.'
0000000000017d8a         db  0x8e ; '.'
0000000000017d8b         db  0x0a ; '.'
0000000000017d8c         db  0x0e ; '.'
0000000000017d8d         db  0x28 ; '('
0000000000017d8e         db  0x41 ; 'A'
0000000000017d8f         db  0x0e ; '.'
0000000000017d90         db  0x20 ; ' '
0000000000017d91         db  0x41 ; 'A'
0000000000017d92         db  0x0e ; '.'
0000000000017d93         db  0x18 ; '.'
0000000000017d94         db  0x42 ; 'B'
0000000000017d95         db  0x0e ; '.'
0000000000017d96         db  0x10 ; '.'
0000000000017d97         db  0x42 ; 'B'
0000000000017d98         db  0x0e ; '.'
0000000000017d99         db  0x08 ; '.'
0000000000017d9a         db  0x46 ; 'F'
0000000000017d9b         db  0x0b ; '.'
0000000000017d9c         dd         0x00000048                                  ; Length of the record
0000000000017da0         dd         0x00000490                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000017da4         db         0x0c, 0xc3, 0xfe, 0xff                      ; begin 0x40b0
0000000000017da8         db         0x3b, 0x01, 2 dup (0x00)                    ; length 0x13b (end at 0x41eb)
0000000000017dac         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017dad         db  0x42 ; 'B'
0000000000017dae         db  0x0e ; '.'
0000000000017daf         db  0x10 ; '.'
0000000000017db0         db  0x8e ; '.'
0000000000017db1         db  0x02 ; '.'
0000000000017db2         db  0x42 ; 'B'
0000000000017db3         db  0x0e ; '.'
0000000000017db4         db  0x18 ; '.'
0000000000017db5         db  0x8d ; '.'
0000000000017db6         db  0x03 ; '.'
0000000000017db7         db  0x45 ; 'E'
0000000000017db8         db  0x0e ; '.'
0000000000017db9         db  0x20 ; ' '
0000000000017dba         db  0x8c ; '.'
0000000000017dbb         db  0x04 ; '.'
0000000000017dbc         db  0x41 ; 'A'
0000000000017dbd         db  0x0e ; '.'
0000000000017dbe         db  0x28 ; '('
0000000000017dbf         db  0x86 ; '.'
0000000000017dc0         db  0x05 ; '.'
0000000000017dc1         db  0x44 ; 'D'
0000000000017dc2         db  0x0e ; '.'
0000000000017dc3         db  0x30 ; '0'
0000000000017dc4         db  0x83 ; '.'
0000000000017dc5         db  0x06 ; '.'
0000000000017dc6         db  0x4a ; 'J'
0000000000017dc7         db  0x0e ; '.'
0000000000017dc8         db  0x80 ; '.'
0000000000017dc9         db  0x02 ; '.'
0000000000017dca         db  0x03 ; '.'
0000000000017dcb         db  0x0d ; '.'
0000000000017dcc         db  0x01 ; '.'
0000000000017dcd         db  0x0a ; '.'
0000000000017dce         db  0x0e ; '.'
0000000000017dcf         db  0x30 ; '0'
0000000000017dd0         db  0x41 ; 'A'
0000000000017dd1         db  0x0e ; '.'
0000000000017dd2         db  0x28 ; '('
0000000000017dd3         db  0x41 ; 'A'
0000000000017dd4         db  0x0e ; '.'
0000000000017dd5         db  0x20 ; ' '
0000000000017dd6         db  0x42 ; 'B'
0000000000017dd7         db  0x0e ; '.'
0000000000017dd8         db  0x18 ; '.'
0000000000017dd9         db  0x42 ; 'B'
0000000000017dda         db  0x0e ; '.'
0000000000017ddb         db  0x10 ; '.'
0000000000017ddc         db  0x42 ; 'B'
0000000000017ddd         db  0x0e ; '.'
0000000000017dde         db  0x08 ; '.'
0000000000017ddf         db  0x43 ; 'C'
0000000000017de0         db  0x0b ; '.'
0000000000017de1         db  0x00 ; '.'
0000000000017de2         db  0x00 ; '.'
0000000000017de3         db  0x00 ; '.'
0000000000017de4         db  0x00 ; '.'
0000000000017de5         db  0x00 ; '.'
0000000000017de6         db  0x00 ; '.'
0000000000017de7         db  0x00 ; '.'
0000000000017de8         dd         0x0000001c                                  ; Length of the record
0000000000017dec         dd         0x000004dc                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000017df0         db         0x00, 0xc4, 0xfe, 0xff                      ; begin 0x41f0
0000000000017df4         db         0x21, 3 dup (0x00)                          ; length 0x21 (end at 0x4211)
0000000000017df8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017df9         db  0x41 ; 'A'
0000000000017dfa         db  0x0e ; '.'
0000000000017dfb         db  0x10 ; '.'
0000000000017dfc         db  0x83 ; '.'
0000000000017dfd         db  0x02 ; '.'
0000000000017dfe         db  0x4c ; 'L'
0000000000017dff         db  0x0a ; '.'
0000000000017e00         db  0x0e ; '.'
0000000000017e01         db  0x08 ; '.'
0000000000017e02         db  0x43 ; 'C'
0000000000017e03         db  0x0b ; '.'
0000000000017e04         db  0x50 ; 'P'
0000000000017e05         db  0x0e ; '.'
0000000000017e06         db  0x08 ; '.'
0000000000017e07         db  0x00 ; '.'
0000000000017e08         dd         0x00000028                                  ; Length of the record
0000000000017e0c         dd         0x000004fc                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000017e10         db         0x10, 0xc4, 0xfe, 0xff                      ; begin 0x4220
0000000000017e14         db         0x56, 3 dup (0x00)                          ; length 0x56 (end at 0x4276)
0000000000017e18         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017e19         db  0x41 ; 'A'
0000000000017e1a         db  0x0e ; '.'
0000000000017e1b         db  0x10 ; '.'
0000000000017e1c         db  0x86 ; '.'
0000000000017e1d         db  0x02 ; '.'
0000000000017e1e         db  0x41 ; 'A'
0000000000017e1f         db  0x0e ; '.'
0000000000017e20         db  0x18 ; '.'
0000000000017e21         db  0x83 ; '.'
0000000000017e22         db  0x03 ; '.'
0000000000017e23         db  0x4e ; 'N'
0000000000017e24         db  0x0e ; '.'
0000000000017e25         db  0x20 ; ' '
0000000000017e26         db  0x68 ; 'h'
0000000000017e27         db  0x0a ; '.'
0000000000017e28         db  0x0e ; '.'
0000000000017e29         db  0x18 ; '.'
0000000000017e2a         db  0x41 ; 'A'
0000000000017e2b         db  0x0e ; '.'
0000000000017e2c         db  0x10 ; '.'
0000000000017e2d         db  0x41 ; 'A'
0000000000017e2e         db  0x0e ; '.'
0000000000017e2f         db  0x08 ; '.'
0000000000017e30         db  0x46 ; 'F'
0000000000017e31         db  0x0b ; '.'
0000000000017e32         db  0x00 ; '.'
0000000000017e33         db  0x00 ; '.'
0000000000017e34         dd         0x00000010                                  ; Length of the record
0000000000017e38         dd         0x00000528                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000017e3c         db         0x44, 0xc4, 0xfe, 0xff                      ; begin 0x4280
0000000000017e40         db         0x1d, 3 dup (0x00)                          ; length 0x1d (end at 0x429d)
0000000000017e44         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017e45         align      8
0000000000017e48         dd         0x0000005c                                  ; Length of the record
0000000000017e4c         dd         0x0000053c                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000017e50         db         0x50, 0xc4, 0xfe, 0xff                      ; begin 0x42a0
0000000000017e54         db         0xa5, 0x02, 2 dup (0x00)                    ; length 0x2a5 (end at 0x4545)
0000000000017e58         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017e59         db  0x42 ; 'B'
0000000000017e5a         db  0x0e ; '.'
0000000000017e5b         db  0x10 ; '.'
0000000000017e5c         db  0x8e ; '.'
0000000000017e5d         db  0x02 ; '.'
0000000000017e5e         db  0x42 ; 'B'
0000000000017e5f         db  0x0e ; '.'
0000000000017e60         db  0x18 ; '.'
0000000000017e61         db  0x8d ; '.'
0000000000017e62         db  0x03 ; '.'
0000000000017e63         db  0x42 ; 'B'
0000000000017e64         db  0x0e ; '.'
0000000000017e65         db  0x20 ; ' '
0000000000017e66         db  0x8c ; '.'
0000000000017e67         db  0x04 ; '.'
0000000000017e68         db  0x41 ; 'A'
0000000000017e69         db  0x0e ; '.'
0000000000017e6a         db  0x28 ; '('
0000000000017e6b         db  0x86 ; '.'
0000000000017e6c         db  0x05 ; '.'
0000000000017e6d         db  0x44 ; 'D'
0000000000017e6e         db  0x0e ; '.'
0000000000017e6f         db  0x30 ; '0'
0000000000017e70         db  0x83 ; '.'
0000000000017e71         db  0x06 ; '.'
0000000000017e72         db  0x46 ; 'F'
0000000000017e73         db  0x0e ; '.'
0000000000017e74         db  0x80 ; '.'
0000000000017e75         db  0x01 ; '.'
0000000000017e76         db  0x7a ; 'z'
0000000000017e77         db  0x0a ; '.'
0000000000017e78         db  0x0e ; '.'
0000000000017e79         db  0x30 ; '0'
0000000000017e7a         db  0x46 ; 'F'
0000000000017e7b         db  0x0e ; '.'
0000000000017e7c         db  0x28 ; '('
0000000000017e7d         db  0x41 ; 'A'
0000000000017e7e         db  0x0e ; '.'
0000000000017e7f         db  0x20 ; ' '
0000000000017e80         db  0x42 ; 'B'
0000000000017e81         db  0x0e ; '.'
0000000000017e82         db  0x18 ; '.'
0000000000017e83         db  0x42 ; 'B'
0000000000017e84         db  0x0e ; '.'
0000000000017e85         db  0x10 ; '.'
0000000000017e86         db  0x42 ; 'B'
0000000000017e87         db  0x0e ; '.'
0000000000017e88         db  0x08 ; '.'
0000000000017e89         db  0x48 ; 'H'
0000000000017e8a         db  0x0b ; '.'
0000000000017e8b         db  0x03 ; '.'
0000000000017e8c         db  0xda ; '.'
0000000000017e8d         db  0x01 ; '.'
0000000000017e8e         db  0x0a ; '.'
0000000000017e8f         db  0x0e ; '.'
0000000000017e90         db  0x30 ; '0'
0000000000017e91         db  0x41 ; 'A'
0000000000017e92         db  0x0e ; '.'
0000000000017e93         db  0x28 ; '('
0000000000017e94         db  0x41 ; 'A'
0000000000017e95         db  0x0e ; '.'
0000000000017e96         db  0x20 ; ' '
0000000000017e97         db  0x42 ; 'B'
0000000000017e98         db  0x0e ; '.'
0000000000017e99         db  0x18 ; '.'
0000000000017e9a         db  0x42 ; 'B'
0000000000017e9b         db  0x0e ; '.'
0000000000017e9c         db  0x10 ; '.'
0000000000017e9d         db  0x42 ; 'B'
0000000000017e9e         db  0x0e ; '.'
0000000000017e9f         db  0x08 ; '.'
0000000000017ea0         db  0x41 ; 'A'
0000000000017ea1         db  0x0b ; '.'
0000000000017ea2         db  0x00 ; '.'
0000000000017ea3         db  0x00 ; '.'
0000000000017ea4         db  0x00 ; '.'
0000000000017ea5         db  0x00 ; '.'
0000000000017ea6         db  0x00 ; '.'
0000000000017ea7         db  0x00 ; '.'
0000000000017ea8         dd         0x00000044                                  ; Length of the record
0000000000017eac         dd         0x0000059c                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000017eb0         db         0xa0, 0xc6, 0xfe, 0xff                      ; begin 0x4550
0000000000017eb4         db         0x2c, 0x02, 2 dup (0x00)                    ; length 0x22c (end at 0x477c)
0000000000017eb8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017eb9         db  0x42 ; 'B'
0000000000017eba         db  0x0e ; '.'
0000000000017ebb         db  0x10 ; '.'
0000000000017ebc         db  0x8e ; '.'
0000000000017ebd         db  0x02 ; '.'
0000000000017ebe         db  0x42 ; 'B'
0000000000017ebf         db  0x0e ; '.'
0000000000017ec0         db  0x18 ; '.'
0000000000017ec1         db  0x8d ; '.'
0000000000017ec2         db  0x03 ; '.'
0000000000017ec3         db  0x42 ; 'B'
0000000000017ec4         db  0x0e ; '.'
0000000000017ec5         db  0x20 ; ' '
0000000000017ec6         db  0x8c ; '.'
0000000000017ec7         db  0x04 ; '.'
0000000000017ec8         db  0x41 ; 'A'
0000000000017ec9         db  0x0e ; '.'
0000000000017eca         db  0x28 ; '('
0000000000017ecb         db  0x86 ; '.'
0000000000017ecc         db  0x05 ; '.'
0000000000017ecd         db  0x41 ; 'A'
0000000000017ece         db  0x0e ; '.'
0000000000017ecf         db  0x30 ; '0'
0000000000017ed0         db  0x83 ; '.'
0000000000017ed1         db  0x06 ; '.'
0000000000017ed2         db  0x47 ; 'G'
0000000000017ed3         db  0x0e ; '.'
0000000000017ed4         db  0x80 ; '.'
0000000000017ed5         db  0x01 ; '.'
0000000000017ed6         db  0x02 ; '.'
0000000000017ed7         db  0x41 ; 'A'
0000000000017ed8         db  0x0a ; '.'
0000000000017ed9         db  0x0e ; '.'
0000000000017eda         db  0x30 ; '0'
0000000000017edb         db  0x41 ; 'A'
0000000000017edc         db  0x0e ; '.'
0000000000017edd         db  0x28 ; '('
0000000000017ede         db  0x41 ; 'A'
0000000000017edf         db  0x0e ; '.'
0000000000017ee0         db  0x20 ; ' '
0000000000017ee1         db  0x42 ; 'B'
0000000000017ee2         db  0x0e ; '.'
0000000000017ee3         db  0x18 ; '.'
0000000000017ee4         db  0x42 ; 'B'
0000000000017ee5         db  0x0e ; '.'
0000000000017ee6         db  0x10 ; '.'
0000000000017ee7         db  0x42 ; 'B'
0000000000017ee8         db  0x0e ; '.'
0000000000017ee9         db  0x08 ; '.'
0000000000017eea         db  0x48 ; 'H'
0000000000017eeb         db  0x0b ; '.'
0000000000017eec         db  0x00 ; '.'
0000000000017eed         db  0x00 ; '.'
0000000000017eee         db  0x00 ; '.'
0000000000017eef         db  0x00 ; '.'
0000000000017ef0         dd         0x0000001c                                  ; Length of the record
0000000000017ef4         dd         0x000005e4                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000017ef8         db         0x88, 0xc8, 0xfe, 0xff                      ; begin 0x4780
0000000000017efc         db         0x9f, 3 dup (0x00)                          ; length 0x9f (end at 0x481f)
0000000000017f00         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017f01         db  0x44 ; 'D'
0000000000017f02         db  0x0e ; '.'
0000000000017f03         db  0x10 ; '.'
0000000000017f04         db  0x83 ; '.'
0000000000017f05         db  0x02 ; '.'
0000000000017f06         db  0x02 ; '.'
0000000000017f07         db  0x78 ; 'x'
0000000000017f08         db  0x0a ; '.'
0000000000017f09         db  0x0e ; '.'
0000000000017f0a         db  0x08 ; '.'
0000000000017f0b         db  0x41 ; 'A'
0000000000017f0c         db  0x0b ; '.'
0000000000017f0d         db  0x00 ; '.'
0000000000017f0e         db  0x00 ; '.'
0000000000017f0f         db  0x00 ; '.'
0000000000017f10         dd         0x00000040                                  ; Length of the record
0000000000017f14         dd         0x00000604                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000017f18         db         0x08, 0xc9, 0xfe, 0xff                      ; begin 0x4820
0000000000017f1c         db         0xe7, 3 dup (0x00)                          ; length 0xe7 (end at 0x4907)
0000000000017f20         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017f21         db  0x41 ; 'A'
0000000000017f22         db  0x0e ; '.'
0000000000017f23         db  0x10 ; '.'
0000000000017f24         db  0x86 ; '.'
0000000000017f25         db  0x02 ; '.'
0000000000017f26         db  0x41 ; 'A'
0000000000017f27         db  0x0e ; '.'
0000000000017f28         db  0x18 ; '.'
0000000000017f29         db  0x83 ; '.'
0000000000017f2a         db  0x03 ; '.'
0000000000017f2b         db  0x49 ; 'I'
0000000000017f2c         db  0x0e ; '.'
0000000000017f2d         db  0x20 ; ' '
0000000000017f2e         db  0x6e ; 'n'
0000000000017f2f         db  0x0a ; '.'
0000000000017f30         db  0x0e ; '.'
0000000000017f31         db  0x18 ; '.'
0000000000017f32         db  0x41 ; 'A'
0000000000017f33         db  0x0e ; '.'
0000000000017f34         db  0x10 ; '.'
0000000000017f35         db  0x41 ; 'A'
0000000000017f36         db  0x0e ; '.'
0000000000017f37         db  0x08 ; '.'
0000000000017f38         db  0x45 ; 'E'
0000000000017f39         db  0x0b ; '.'
0000000000017f3a         db  0x02 ; '.'
0000000000017f3b         db  0x4a ; 'J'
0000000000017f3c         db  0x0a ; '.'
0000000000017f3d         db  0x0e ; '.'
0000000000017f3e         db  0x18 ; '.'
0000000000017f3f         db  0x41 ; 'A'
0000000000017f40         db  0x0e ; '.'
0000000000017f41         db  0x10 ; '.'
0000000000017f42         db  0x41 ; 'A'
0000000000017f43         db  0x0e ; '.'
0000000000017f44         db  0x08 ; '.'
0000000000017f45         db  0x44 ; 'D'
0000000000017f46         db  0x0b ; '.'
0000000000017f47         db  0x02 ; '.'
0000000000017f48         db  0x54 ; 'T'
0000000000017f49         db  0x0e ; '.'
0000000000017f4a         db  0x18 ; '.'
0000000000017f4b         db  0x41 ; 'A'
0000000000017f4c         db  0x0e ; '.'
0000000000017f4d         db  0x10 ; '.'
0000000000017f4e         db  0x41 ; 'A'
0000000000017f4f         db  0x0e ; '.'
0000000000017f50         db  0x08 ; '.'
0000000000017f51         db  0x00 ; '.'
0000000000017f52         db  0x00 ; '.'
0000000000017f53         db  0x00 ; '.'
0000000000017f54         dd         0x00000074                                  ; Length of the record
0000000000017f58         dd         0x00000648                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000017f5c         db         0xb4, 0xc9, 0xfe, 0xff                      ; begin 0x4910
0000000000017f60         db         0x34, 0x12, 2 dup (0x00)                    ; length 0x1234 (end at 0x5b44)
0000000000017f64         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017f65         db  0x42 ; 'B'
0000000000017f66         db  0x0e ; '.'
0000000000017f67         db  0x10 ; '.'
0000000000017f68         db  0x8f ; '.'
0000000000017f69         db  0x02 ; '.'
0000000000017f6a         db  0x42 ; 'B'
0000000000017f6b         db  0x0e ; '.'
0000000000017f6c         db  0x18 ; '.'
0000000000017f6d         db  0x8e ; '.'
0000000000017f6e         db  0x03 ; '.'
0000000000017f6f         db  0x45 ; 'E'
0000000000017f70         db  0x0e ; '.'
0000000000017f71         db  0x20 ; ' '
0000000000017f72         db  0x8d ; '.'
0000000000017f73         db  0x04 ; '.'
0000000000017f74         db  0x42 ; 'B'
0000000000017f75         db  0x0e ; '.'
0000000000017f76         db  0x28 ; '('
0000000000017f77         db  0x8c ; '.'
0000000000017f78         db  0x05 ; '.'
0000000000017f79         db  0x44 ; 'D'
0000000000017f7a         db  0x0e ; '.'
0000000000017f7b         db  0x30 ; '0'
0000000000017f7c         db  0x86 ; '.'
0000000000017f7d         db  0x06 ; '.'
0000000000017f7e         db  0x41 ; 'A'
0000000000017f7f         db  0x0e ; '.'
0000000000017f80         db  0x38 ; '8'
0000000000017f81         db  0x83 ; '.'
0000000000017f82         db  0x07 ; '.'
0000000000017f83         db  0x53 ; 'S'
0000000000017f84         db  0x0e ; '.'
0000000000017f85         db  0xf0 ; '.'
0000000000017f86         db  0x01 ; '.'
0000000000017f87         db  0x03 ; '.'
0000000000017f88         db  0x81 ; '.'
0000000000017f89         db  0x0b ; '.'
0000000000017f8a         db  0x0e ; '.'
0000000000017f8b         db  0xf8 ; '.'
0000000000017f8c         db  0x01 ; '.'
0000000000017f8d         db  0x4a ; 'J'
0000000000017f8e         db  0x0e ; '.'
0000000000017f8f         db  0x80 ; '.'
0000000000017f90         db  0x02 ; '.'
0000000000017f91         db  0x44 ; 'D'
0000000000017f92         db  0x0e ; '.'
0000000000017f93         db  0x88 ; '.'
0000000000017f94         db  0x02 ; '.'
0000000000017f95         db  0x45 ; 'E'
0000000000017f96         db  0x0e ; '.'
0000000000017f97         db  0x90 ; '.'
0000000000017f98         db  0x02 ; '.'
0000000000017f99         db  0x5f ; '_'
0000000000017f9a         db  0x0e ; '.'
0000000000017f9b         db  0xf0 ; '.'
0000000000017f9c         db  0x01 ; '.'
0000000000017f9d         db  0x64 ; 'd'
0000000000017f9e         db  0x0a ; '.'
0000000000017f9f         db  0x0e ; '.'
0000000000017fa0         db  0x38 ; '8'
0000000000017fa1         db  0x41 ; 'A'
0000000000017fa2         db  0x0e ; '.'
0000000000017fa3         db  0x30 ; '0'
0000000000017fa4         db  0x41 ; 'A'
0000000000017fa5         db  0x0e ; '.'
0000000000017fa6         db  0x28 ; '('
0000000000017fa7         db  0x42 ; 'B'
0000000000017fa8         db  0x0e ; '.'
0000000000017fa9         db  0x20 ; ' '
0000000000017faa         db  0x42 ; 'B'
0000000000017fab         db  0x0e ; '.'
0000000000017fac         db  0x18 ; '.'
0000000000017fad         db  0x42 ; 'B'
0000000000017fae         db  0x0e ; '.'
0000000000017faf         db  0x10 ; '.'
0000000000017fb0         db  0x42 ; 'B'
0000000000017fb1         db  0x0e ; '.'
0000000000017fb2         db  0x08 ; '.'
0000000000017fb3         db  0x44 ; 'D'
0000000000017fb4         db  0x0b ; '.'
0000000000017fb5         db  0x03 ; '.'
0000000000017fb6         db  0x99 ; '.'
0000000000017fb7         db  0x05 ; '.'
0000000000017fb8         db  0x0e ; '.'
0000000000017fb9         db  0xf8 ; '.'
0000000000017fba         db  0x01 ; '.'
0000000000017fbb         db  0x4d ; 'M'
0000000000017fbc         db  0x0e ; '.'
0000000000017fbd         db  0x80 ; '.'
0000000000017fbe         db  0x02 ; '.'
0000000000017fbf         db  0x44 ; 'D'
0000000000017fc0         db  0x0e ; '.'
0000000000017fc1         db  0x88 ; '.'
0000000000017fc2         db  0x02 ; '.'
0000000000017fc3         db  0x47 ; 'G'
0000000000017fc4         db  0x0e ; '.'
0000000000017fc5         db  0x90 ; '.'
0000000000017fc6         db  0x02 ; '.'
0000000000017fc7         db  0x5b ; '['
0000000000017fc8         db  0x0e ; '.'
0000000000017fc9         db  0xf0 ; '.'
0000000000017fca         db  0x01 ; '.'
0000000000017fcb         db  0x00 ; '.'
0000000000017fcc         dd         0x00000068                                  ; Length of the record
0000000000017fd0         dd         0x000006c0                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000017fd4         db         0x7c, 0xdb, 0xfe, 0xff                      ; begin 0x5b50
0000000000017fd8         db         0xab, 0x01, 2 dup (0x00)                    ; length 0x1ab (end at 0x5cfb)
0000000000017fdc         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000017fdd         db  0x42 ; 'B'
0000000000017fde         db  0x0e ; '.'
0000000000017fdf         db  0x10 ; '.'
0000000000017fe0         db  0x8f ; '.'
0000000000017fe1         db  0x02 ; '.'
0000000000017fe2         db  0x42 ; 'B'
0000000000017fe3         db  0x0e ; '.'
0000000000017fe4         db  0x18 ; '.'
0000000000017fe5         db  0x8e ; '.'
0000000000017fe6         db  0x03 ; '.'
0000000000017fe7         db  0x45 ; 'E'
0000000000017fe8         db  0x0e ; '.'
0000000000017fe9         db  0x20 ; ' '
0000000000017fea         db  0x8d ; '.'
0000000000017feb         db  0x04 ; '.'
0000000000017fec         db  0x42 ; 'B'
0000000000017fed         db  0x0e ; '.'
0000000000017fee         db  0x28 ; '('
0000000000017fef         db  0x8c ; '.'
0000000000017ff0         db  0x05 ; '.'
0000000000017ff1         db  0x44 ; 'D'
0000000000017ff2         db  0x0e ; '.'
0000000000017ff3         db  0x30 ; '0'
0000000000017ff4         db  0x86 ; '.'
0000000000017ff5         db  0x06 ; '.'
0000000000017ff6         db  0x41 ; 'A'
0000000000017ff7         db  0x0e ; '.'
0000000000017ff8         db  0x38 ; '8'
0000000000017ff9         db  0x83 ; '.'
0000000000017ffa         db  0x07 ; '.'
0000000000017ffb         db  0x47 ; 'G'
0000000000017ffc         db  0x0e ; '.'
0000000000017ffd         db  0x60 ; '`'
0000000000017ffe         db  0x02 ; '.'
0000000000017fff         db  0x99 ; '.'
0000000000018000         db  0x0e ; '.'
0000000000018001         db  0x68 ; 'h'
0000000000018002         db  0x5f ; '_'
0000000000018003         db  0x0e ; '.'
0000000000018004         db  0x70 ; 'p'
0000000000018005         db  0x46 ; 'F'
0000000000018006         db  0x0e ; '.'
0000000000018007         db  0x78 ; 'x'
0000000000018008         db  0x42 ; 'B'
0000000000018009         db  0x0e ; '.'
000000000001800a         db  0x80 ; '.'
000000000001800b         db  0x01 ; '.'
000000000001800c         db  0x59 ; 'Y'
000000000001800d         db  0x0e ; '.'
000000000001800e         db  0x60 ; '`'
000000000001800f         db  0x02 ; '.'
0000000000018010         db  0x40 ; '@'
0000000000018011         db  0x0e ; '.'
0000000000018012         db  0x68 ; 'h'
0000000000018013         db  0x4b ; 'K'
0000000000018014         db  0x0e ; '.'
0000000000018015         db  0x70 ; 'p'
0000000000018016         db  0x43 ; 'C'
0000000000018017         db  0x0e ; '.'
0000000000018018         db  0x78 ; 'x'
0000000000018019         db  0x45 ; 'E'
000000000001801a         db  0x0e ; '.'
000000000001801b         db  0x80 ; '.'
000000000001801c         db  0x01 ; '.'
000000000001801d         db  0x5e ; '^'
000000000001801e         db  0x0e ; '.'
000000000001801f         db  0x60 ; '`'
0000000000018020         db  0x4c ; 'L'
0000000000018021         db  0x0a ; '.'
0000000000018022         db  0x0e ; '.'
0000000000018023         db  0x38 ; '8'
0000000000018024         db  0x44 ; 'D'
0000000000018025         db  0x0e ; '.'
0000000000018026         db  0x30 ; '0'
0000000000018027         db  0x41 ; 'A'
0000000000018028         db  0x0e ; '.'
0000000000018029         db  0x28 ; '('
000000000001802a         db  0x42 ; 'B'
000000000001802b         db  0x0e ; '.'
000000000001802c         db  0x20 ; ' '
000000000001802d         db  0x42 ; 'B'
000000000001802e         db  0x0e ; '.'
000000000001802f         db  0x18 ; '.'
0000000000018030         db  0x42 ; 'B'
0000000000018031         db  0x0e ; '.'
0000000000018032         db  0x10 ; '.'
0000000000018033         db  0x42 ; 'B'
0000000000018034         db  0x0e ; '.'
0000000000018035         db  0x08 ; '.'
0000000000018036         db  0x46 ; 'F'
0000000000018037         db  0x0b ; '.'
0000000000018038         dd         0x00000028                                  ; Length of the record
000000000001803c         dd         0x0000072c                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000018040         db         0xc0, 0xdc, 0xfe, 0xff                      ; begin 0x5d00
0000000000018044         db         0x36, 3 dup (0x00)                          ; length 0x36 (end at 0x5d36)
0000000000018048         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018049         db  0x42 ; 'B'
000000000001804a         db  0x0e ; '.'
000000000001804b         db  0x10 ; '.'
000000000001804c         db  0x8c ; '.'
000000000001804d         db  0x02 ; '.'
000000000001804e         db  0x41 ; 'A'
000000000001804f         db  0x0e ; '.'
0000000000018050         db  0x18 ; '.'
0000000000018051         db  0x86 ; '.'
0000000000018052         db  0x03 ; '.'
0000000000018053         db  0x41 ; 'A'
0000000000018054         db  0x0e ; '.'
0000000000018055         db  0x20 ; ' '
0000000000018056         db  0x83 ; '.'
0000000000018057         db  0x04 ; '.'
0000000000018058         db  0x6e ; 'n'
0000000000018059         db  0x0e ; '.'
000000000001805a         db  0x18 ; '.'
000000000001805b         db  0x41 ; 'A'
000000000001805c         db  0x0e ; '.'
000000000001805d         db  0x10 ; '.'
000000000001805e         db  0x42 ; 'B'
000000000001805f         db  0x0e ; '.'
0000000000018060         db  0x08 ; '.'
0000000000018061         db  0x00 ; '.'
0000000000018062         db  0x00 ; '.'
0000000000018063         db  0x00 ; '.'
0000000000018064         dd         0x00000010                                  ; Length of the record
0000000000018068         dd         0x00000758                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
000000000001806c         db         0xd4, 0xdc, 0xfe, 0xff                      ; begin 0x5d40
0000000000018070         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0x5d51)
0000000000018074         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018075         align      8
0000000000018078         dd         0x00000010                                  ; Length of the record
000000000001807c         dd         0x0000076c                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000018080         db         0xe0, 0xdc, 0xfe, 0xff                      ; begin 0x5d60
0000000000018084         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0x5d71)
0000000000018088         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018089         align      4
000000000001808c         dd         0x00000010                                  ; Length of the record
0000000000018090         dd         0x00000780                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000018094         db         0xec, 0xdc, 0xfe, 0xff                      ; begin 0x5d80
0000000000018098         db         0x35, 3 dup (0x00)                          ; length 0x35 (end at 0x5db5)
000000000001809c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001809d         align      32
00000000000180a0         dd         0x00000010                                  ; Length of the record
00000000000180a4         dd         0x00000794                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
00000000000180a8         db         0x18, 0xdd, 0xfe, 0xff                      ; begin 0x5dc0
00000000000180ac         db         0x15, 3 dup (0x00)                          ; length 0x15 (end at 0x5dd5)
00000000000180b0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000180b1         align      4
00000000000180b4         dd         0x00000010                                  ; Length of the record
00000000000180b8         dd         0x000007a8                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
00000000000180bc         db         0x24, 0xdd, 0xfe, 0xff                      ; begin 0x5de0
00000000000180c0         db         0x30, 3 dup (0x00)                          ; length 0x30 (end at 0x5e10)
00000000000180c4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000180c5         db  0x6b ; 'k'
00000000000180c6         db  0x0e ; '.'
00000000000180c7         db  0x10 ; '.'
00000000000180c8         dd         0x00000050                                  ; Length of the record
00000000000180cc         dd         0x000007bc                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
00000000000180d0         db         0x40, 0xdd, 0xfe, 0xff                      ; begin 0x5e10
00000000000180d4         db         0x74, 3 dup (0x00)                          ; length 0x74 (end at 0x5e84)
00000000000180d8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000180d9         db  0x42 ; 'B'
00000000000180da         db  0x0e ; '.'
00000000000180db         db  0x10 ; '.'
00000000000180dc         db  0x8f ; '.'
00000000000180dd         db  0x02 ; '.'
00000000000180de         db  0x42 ; 'B'
00000000000180df         db  0x0e ; '.'
00000000000180e0         db  0x18 ; '.'
00000000000180e1         db  0x8e ; '.'
00000000000180e2         db  0x03 ; '.'
00000000000180e3         db  0x49 ; 'I'
00000000000180e4         db  0x0e ; '.'
00000000000180e5         db  0x20 ; ' '
00000000000180e6         db  0x8d ; '.'
00000000000180e7         db  0x04 ; '.'
00000000000180e8         db  0x42 ; 'B'
00000000000180e9         db  0x0e ; '.'
00000000000180ea         db  0x28 ; '('
00000000000180eb         db  0x8c ; '.'
00000000000180ec         db  0x05 ; '.'
00000000000180ed         db  0x44 ; 'D'
00000000000180ee         db  0x0e ; '.'
00000000000180ef         db  0x30 ; '0'
00000000000180f0         db  0x86 ; '.'
00000000000180f1         db  0x06 ; '.'
00000000000180f2         db  0x41 ; 'A'
00000000000180f3         db  0x0e ; '.'
00000000000180f4         db  0x38 ; '8'
00000000000180f5         db  0x83 ; '.'
00000000000180f6         db  0x07 ; '.'
00000000000180f7         db  0x4d ; 'M'
00000000000180f8         db  0x0e ; '.'
00000000000180f9         db  0x50 ; 'P'
00000000000180fa         db  0x5f ; '_'
00000000000180fb         db  0x0e ; '.'
00000000000180fc         db  0x58 ; 'X'
00000000000180fd         db  0x47 ; 'G'
00000000000180fe         db  0x0e ; '.'
00000000000180ff         db  0x60 ; '`'
0000000000018100         db  0x46 ; 'F'
0000000000018101         db  0x0e ; '.'
0000000000018102         db  0x68 ; 'h'
0000000000018103         db  0x44 ; 'D'
0000000000018104         db  0x0e ; '.'
0000000000018105         db  0x70 ; 'p'
0000000000018106         db  0x58 ; 'X'
0000000000018107         db  0x0e ; '.'
0000000000018108         db  0x38 ; '8'
0000000000018109         db  0x41 ; 'A'
000000000001810a         db  0x0e ; '.'
000000000001810b         db  0x30 ; '0'
000000000001810c         db  0x41 ; 'A'
000000000001810d         db  0x0e ; '.'
000000000001810e         db  0x28 ; '('
000000000001810f         db  0x42 ; 'B'
0000000000018110         db  0x0e ; '.'
0000000000018111         db  0x20 ; ' '
0000000000018112         db  0x42 ; 'B'
0000000000018113         db  0x0e ; '.'
0000000000018114         db  0x18 ; '.'
0000000000018115         db  0x42 ; 'B'
0000000000018116         db  0x0e ; '.'
0000000000018117         db  0x10 ; '.'
0000000000018118         db  0x42 ; 'B'
0000000000018119         db  0x0e ; '.'
000000000001811a         db  0x08 ; '.'
000000000001811b         db  0x00 ; '.'
000000000001811c         dd         0x00000068                                  ; Length of the record
0000000000018120         dd         0x00000810                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000018124         db         0x6c, 0xdd, 0xfe, 0xff                      ; begin 0x5e90
0000000000018128         db         0xe3, 3 dup (0x00)                          ; length 0xe3 (end at 0x5f73)
000000000001812c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001812d         db  0x42 ; 'B'
000000000001812e         db  0x0e ; '.'
000000000001812f         db  0x10 ; '.'
0000000000018130         db  0x8f ; '.'
0000000000018131         db  0x02 ; '.'
0000000000018132         db  0x42 ; 'B'
0000000000018133         db  0x0e ; '.'
0000000000018134         db  0x18 ; '.'
0000000000018135         db  0x8e ; '.'
0000000000018136         db  0x03 ; '.'
0000000000018137         db  0x49 ; 'I'
0000000000018138         db  0x0e ; '.'
0000000000018139         db  0x20 ; ' '
000000000001813a         db  0x8d ; '.'
000000000001813b         db  0x04 ; '.'
000000000001813c         db  0x42 ; 'B'
000000000001813d         db  0x0e ; '.'
000000000001813e         db  0x28 ; '('
000000000001813f         db  0x8c ; '.'
0000000000018140         db  0x05 ; '.'
0000000000018141         db  0x44 ; 'D'
0000000000018142         db  0x0e ; '.'
0000000000018143         db  0x30 ; '0'
0000000000018144         db  0x86 ; '.'
0000000000018145         db  0x06 ; '.'
0000000000018146         db  0x41 ; 'A'
0000000000018147         db  0x0e ; '.'
0000000000018148         db  0x38 ; '8'
0000000000018149         db  0x83 ; '.'
000000000001814a         db  0x07 ; '.'
000000000001814b         db  0x4d ; 'M'
000000000001814c         db  0x0e ; '.'
000000000001814d         db  0x70 ; 'p'
000000000001814e         db  0x65 ; 'e'
000000000001814f         db  0x0e ; '.'
0000000000018150         db  0x78 ; 'x'
0000000000018151         db  0x4d ; 'M'
0000000000018152         db  0x0e ; '.'
0000000000018153         db  0x80 ; '.'
0000000000018154         db  0x01 ; '.'
0000000000018155         db  0x46 ; 'F'
0000000000018156         db  0x0e ; '.'
0000000000018157         db  0x88 ; '.'
0000000000018158         db  0x01 ; '.'
0000000000018159         db  0x42 ; 'B'
000000000001815a         db  0x0e ; '.'
000000000001815b         db  0x90 ; '.'
000000000001815c         db  0x01 ; '.'
000000000001815d         db  0x5e ; '^'
000000000001815e         db  0x0e ; '.'
000000000001815f         db  0x70 ; 'p'
0000000000018160         db  0x56 ; 'V'
0000000000018161         db  0x0e ; '.'
0000000000018162         db  0x78 ; 'x'
0000000000018163         db  0x43 ; 'C'
0000000000018164         db  0x0e ; '.'
0000000000018165         db  0x80 ; '.'
0000000000018166         db  0x01 ; '.'
0000000000018167         db  0x43 ; 'C'
0000000000018168         db  0x0e ; '.'
0000000000018169         db  0x88 ; '.'
000000000001816a         db  0x01 ; '.'
000000000001816b         db  0x56 ; 'V'
000000000001816c         db  0x0e ; '.'
000000000001816d         db  0x90 ; '.'
000000000001816e         db  0x01 ; '.'
000000000001816f         db  0x52 ; 'R'
0000000000018170         db  0x0e ; '.'
0000000000018171         db  0x70 ; 'p'
0000000000018172         db  0x5b ; '['
0000000000018173         db  0x0e ; '.'
0000000000018174         db  0x38 ; '8'
0000000000018175         db  0x41 ; 'A'
0000000000018176         db  0x0e ; '.'
0000000000018177         db  0x30 ; '0'
0000000000018178         db  0x41 ; 'A'
0000000000018179         db  0x0e ; '.'
000000000001817a         db  0x28 ; '('
000000000001817b         db  0x42 ; 'B'
000000000001817c         db  0x0e ; '.'
000000000001817d         db  0x20 ; ' '
000000000001817e         db  0x42 ; 'B'
000000000001817f         db  0x0e ; '.'
0000000000018180         db  0x18 ; '.'
0000000000018181         db  0x42 ; 'B'
0000000000018182         db  0x0e ; '.'
0000000000018183         db  0x10 ; '.'
0000000000018184         db  0x42 ; 'B'
0000000000018185         db  0x0e ; '.'
0000000000018186         db  0x08 ; '.'
0000000000018187         db  0x00 ; '.'
0000000000018188         dd         0x00000010                                  ; Length of the record
000000000001818c         dd         0x0000087c                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000018190         db         0xf0, 0xdd, 0xfe, 0xff                      ; begin 0x5f80
0000000000018194         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0x5f8a)
0000000000018198         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018199         align      4
000000000001819c         dd         0x00000028                                  ; Length of the record
00000000000181a0         dd         0x00000890                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
00000000000181a4         db         0xec, 0xdd, 0xfe, 0xff                      ; begin 0x5f90
00000000000181a8         db         0x93, 3 dup (0x00)                          ; length 0x93 (end at 0x6023)
00000000000181ac         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000181ad         db  0x48 ; 'H'
00000000000181ae         db  0x0e ; '.'
00000000000181af         db  0x10 ; '.'
00000000000181b0         db  0x8c ; '.'
00000000000181b1         db  0x02 ; '.'
00000000000181b2         db  0x48 ; 'H'
00000000000181b3         db  0x0e ; '.'
00000000000181b4         db  0x18 ; '.'
00000000000181b5         db  0x86 ; '.'
00000000000181b6         db  0x03 ; '.'
00000000000181b7         db  0x41 ; 'A'
00000000000181b8         db  0x0e ; '.'
00000000000181b9         db  0x20 ; ' '
00000000000181ba         db  0x83 ; '.'
00000000000181bb         db  0x04 ; '.'
00000000000181bc         db  0x02 ; '.'
00000000000181bd         db  0x74 ; 't'
00000000000181be         db  0x0e ; '.'
00000000000181bf         db  0x18 ; '.'
00000000000181c0         db  0x4b ; 'K'
00000000000181c1         db  0x0e ; '.'
00000000000181c2         db  0x10 ; '.'
00000000000181c3         db  0x42 ; 'B'
00000000000181c4         db  0x0e ; '.'
00000000000181c5         db  0x08 ; '.'
00000000000181c6         db  0x00 ; '.'
00000000000181c7         db  0x00 ; '.'
00000000000181c8         dd         0x00000010                                  ; Length of the record
00000000000181cc         dd         0x000008bc                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
00000000000181d0         db         0x60, 0xde, 0xfe, 0xff                      ; begin 0x6030
00000000000181d4         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x6043)
00000000000181d8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000181d9         align      4
00000000000181dc         dd         0x00000010                                  ; Length of the record
00000000000181e0         dd         0x000008d0                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
00000000000181e4         db         0x6c, 0xde, 0xfe, 0xff                      ; begin 0x6050
00000000000181e8         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x605c)
00000000000181ec         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000181ed         align      16
00000000000181f0         dd         0x00000010                                  ; Length of the record
00000000000181f4         dd         0x000008e4                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
00000000000181f8         db         0x68, 0xde, 0xfe, 0xff                      ; begin 0x6060
00000000000181fc         db         0x18, 3 dup (0x00)                          ; length 0x18 (end at 0x6078)
0000000000018200         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018201         align      4
0000000000018204         dd         0x00000010                                  ; Length of the record
0000000000018208         dd         0x000008f8                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
000000000001820c         db         0x74, 0xde, 0xfe, 0xff                      ; begin 0x6080
0000000000018210         db         0x14, 3 dup (0x00)                          ; length 0x14 (end at 0x6094)
0000000000018214         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018215         align      8
0000000000018218         dd         0x00000018                                  ; Length of the record
000000000001821c         dd         0x0000090c                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000018220         db         0x80, 0xde, 0xfe, 0xff                      ; begin 0x60a0
0000000000018224         db         0x8e, 3 dup (0x00)                          ; length 0x8e (end at 0x612e)
0000000000018228         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018229         db  0x44 ; 'D'
000000000001822a         db  0x0e ; '.'
000000000001822b         db  0x50 ; 'P'
000000000001822c         db  0x02 ; '.'
000000000001822d         db  0x7f ; '.'
000000000001822e         db  0x0a ; '.'
000000000001822f         db  0x0e ; '.'
0000000000018230         db  0x08 ; '.'
0000000000018231         db  0x41 ; 'A'
0000000000018232         db  0x0b ; '.'
0000000000018233         db  0x00 ; '.'
0000000000018234         dd         0x00000018                                  ; Length of the record
0000000000018238         dd         0x00000928                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
000000000001823c         db         0xf4, 0xde, 0xfe, 0xff                      ; begin 0x6130
0000000000018240         db         0x8a, 3 dup (0x00)                          ; length 0x8a (end at 0x61ba)
0000000000018244         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018245         db  0x44 ; 'D'
0000000000018246         db  0x0e ; '.'
0000000000018247         db  0x50 ; 'P'
0000000000018248         db  0x02 ; '.'
0000000000018249         db  0x7b ; '{'
000000000001824a         db  0x0a ; '.'
000000000001824b         db  0x0e ; '.'
000000000001824c         db  0x08 ; '.'
000000000001824d         db  0x41 ; 'A'
000000000001824e         db  0x0b ; '.'
000000000001824f         db  0x00 ; '.'
0000000000018250         dd         0x00000010                                  ; Length of the record
0000000000018254         dd         0x00000944                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000018258         db         0x68, 0xdf, 0xfe, 0xff                      ; begin 0x61c0
000000000001825c         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x61cc)
0000000000018260         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018261         align      4
0000000000018264         dd         0x00000010                                  ; Length of the record
0000000000018268         dd         0x00000958                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
000000000001826c         db         0x64, 0xdf, 0xfe, 0xff                      ; begin 0x61d0
0000000000018270         db         0x0f, 3 dup (0x00)                          ; length 0xf (end at 0x61df)
0000000000018274         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018275         align      8
0000000000018278         dd         0x00000018                                  ; Length of the record
000000000001827c         dd         0x0000096c                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000018280         db         0x60, 0xdf, 0xfe, 0xff                      ; begin 0x61e0
0000000000018284         db         0x98, 3 dup (0x00)                          ; length 0x98 (end at 0x6278)
0000000000018288         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018289         db  0x44 ; 'D'
000000000001828a         db  0x0e ; '.'
000000000001828b         db  0x50 ; 'P'
000000000001828c         db  0x02 ; '.'
000000000001828d         db  0x8e ; '.'
000000000001828e         db  0x0a ; '.'
000000000001828f         db  0x0e ; '.'
0000000000018290         db  0x08 ; '.'
0000000000018291         db  0x41 ; 'A'
0000000000018292         db  0x0b ; '.'
0000000000018293         db  0x00 ; '.'
0000000000018294         dd         0x00000010                                  ; Length of the record
0000000000018298         dd         0x00000988                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
000000000001829c         db         0xe4, 0xdf, 0xfe, 0xff                      ; begin 0x6280
00000000000182a0         db         0x10, 3 dup (0x00)                          ; length 0x10 (end at 0x6290)
00000000000182a4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000182a5         align      8
00000000000182a8         dd         0x00000010                                  ; Length of the record
00000000000182ac         dd         0x0000099c                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
00000000000182b0         db         0xe0, 0xdf, 0xfe, 0xff                      ; begin 0x6290
00000000000182b4         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0x62a1)
00000000000182b8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000182b9         align      4
00000000000182bc         dd         0x00000010                                  ; Length of the record
00000000000182c0         dd         0x000009b0                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
00000000000182c4         db         0xec, 0xdf, 0xfe, 0xff                      ; begin 0x62b0
00000000000182c8         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0x62ba)
00000000000182cc         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000182cd         align      16
00000000000182d0         dd         0x00000018                                  ; Length of the record
00000000000182d4         dd         0x000009c4                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
00000000000182d8         db         0xe8, 0xdf, 0xfe, 0xff                      ; begin 0x62c0
00000000000182dc         db         0x8e, 3 dup (0x00)                          ; length 0x8e (end at 0x634e)
00000000000182e0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000182e1         db  0x44 ; 'D'
00000000000182e2         db  0x0e ; '.'
00000000000182e3         db  0x50 ; 'P'
00000000000182e4         db  0x02 ; '.'
00000000000182e5         db  0x7f ; '.'
00000000000182e6         db  0x0a ; '.'
00000000000182e7         db  0x0e ; '.'
00000000000182e8         db  0x08 ; '.'
00000000000182e9         db  0x41 ; 'A'
00000000000182ea         db  0x0b ; '.'
00000000000182eb         db  0x00 ; '.'
00000000000182ec         dd         0x00000018                                  ; Length of the record
00000000000182f0         dd         0x000009e0                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
00000000000182f4         db         0x5c, 0xe0, 0xfe, 0xff                      ; begin 0x6350
00000000000182f8         db         0x91, 3 dup (0x00)                          ; length 0x91 (end at 0x63e1)
00000000000182fc         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000182fd         db  0x44 ; 'D'
00000000000182fe         db  0x0e ; '.'
00000000000182ff         db  0x50 ; 'P'
0000000000018300         db  0x02 ; '.'
0000000000018301         db  0x82 ; '.'
0000000000018302         db  0x0a ; '.'
0000000000018303         db  0x0e ; '.'
0000000000018304         db  0x08 ; '.'
0000000000018305         db  0x41 ; 'A'
0000000000018306         db  0x0b ; '.'
0000000000018307         db  0x00 ; '.'
0000000000018308         dd         0x00000010                                  ; Length of the record
000000000001830c         dd         0x000009fc                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000018310         db         2 dup (0xe0), 0xfe, 0xff                    ; begin 0x63f0
0000000000018314         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x63fc)
0000000000018318         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018319         align      4
000000000001831c         dd         0x00000010                                  ; Length of the record
0000000000018320         dd         0x00000a10                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000018324         db         0xdc, 0xe0, 0xfe, 0xff                      ; begin 0x6400
0000000000018328         db         0x17, 3 dup (0x00)                          ; length 0x17 (end at 0x6417)
000000000001832c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001832d         align      16
0000000000018330         dd         0x00000010                                  ; Length of the record
0000000000018334         dd         0x00000a24                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000018338         db         0xe8, 0xe0, 0xfe, 0xff                      ; begin 0x6420
000000000001833c         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x6433)
0000000000018340         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018341         align      4
0000000000018344         dd         0x00000010                                  ; Length of the record
0000000000018348         dd         0x00000a38                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
000000000001834c         db         0xf4, 0xe0, 0xfe, 0xff                      ; begin 0x6440
0000000000018350         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x644c)
0000000000018354         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018355         align      8
0000000000018358         dd         0x00000010                                  ; Length of the record
000000000001835c         dd         0x00000a4c                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000018360         db         0xf0, 0xe0, 0xfe, 0xff                      ; begin 0x6450
0000000000018364         db         0x14, 3 dup (0x00)                          ; length 0x14 (end at 0x6464)
0000000000018368         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018369         align      4
000000000001836c         dd         0x00000010                                  ; Length of the record
0000000000018370         dd         0x00000a60                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000018374         db         0xfc, 0xe0, 0xfe, 0xff                      ; begin 0x6470
0000000000018378         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x6483)
000000000001837c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001837d         align      128
0000000000018380         dd         0x00000014                                  ; Length of the record
0000000000018384         dd         0x00000a74                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000018388         db         0x08, 0xe1, 0xfe, 0xff                      ; begin 0x6490
000000000001838c         db         0x18, 3 dup (0x00)                          ; length 0x18 (end at 0x64a8)
0000000000018390         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018391         align      8
0000000000018398         dd         0x00000024                                  ; Length of the record
000000000001839c         dd         0x00000a8c                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
00000000000183a0         db         0x10, 0xe1, 0xfe, 0xff                      ; begin 0x64b0
00000000000183a4         db         0x31, 3 dup (0x00)                          ; length 0x31 (end at 0x64e1)
00000000000183a8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000183a9         db  0x41 ; 'A'
00000000000183aa         db  0x0e ; '.'
00000000000183ab         db  0x10 ; '.'
00000000000183ac         db  0x86 ; '.'
00000000000183ad         db  0x02 ; '.'
00000000000183ae         db  0x41 ; 'A'
00000000000183af         db  0x0e ; '.'
00000000000183b0         db  0x18 ; '.'
00000000000183b1         db  0x83 ; '.'
00000000000183b2         db  0x03 ; '.'
00000000000183b3         db  0x4f ; 'O'
00000000000183b4         db  0x0e ; '.'
00000000000183b5         db  0x20 ; ' '
00000000000183b6         db  0x5d ; ']'
00000000000183b7         db  0x0e ; '.'
00000000000183b8         db  0x18 ; '.'
00000000000183b9         db  0x41 ; 'A'
00000000000183ba         db  0x0e ; '.'
00000000000183bb         db  0x10 ; '.'
00000000000183bc         db  0x41 ; 'A'
00000000000183bd         db  0x0e ; '.'
00000000000183be         db  0x08 ; '.'
00000000000183bf         db  0x00 ; '.'
00000000000183c0         dd         0x00000014                                  ; Length of the record
00000000000183c4         dd         0x00000ab4                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
00000000000183c8         db         0x28, 0xe1, 0xfe, 0xff                      ; begin 0x64f0
00000000000183cc         db         0xa4, 0x02, 2 dup (0x00)                    ; length 0x2a4 (end at 0x6794)
00000000000183d0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000183d1         align      8
00000000000183d8         dd         0x00000110                                  ; Length of the record
00000000000183dc         dd         0x00000acc                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
00000000000183e0         db         0xc0, 0xe3, 0xfe, 0xff                      ; begin 0x67a0
00000000000183e4         db         0x17, 0x04, 2 dup (0x00)                    ; length 0x417 (end at 0x6bb7)
00000000000183e8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000183e9         db  0x42 ; 'B'
00000000000183ea         db  0x0e ; '.'
00000000000183eb         db  0x10 ; '.'
00000000000183ec         db  0x8f ; '.'
00000000000183ed         db  0x02 ; '.'
00000000000183ee         db  0x42 ; 'B'
00000000000183ef         db  0x0e ; '.'
00000000000183f0         db  0x18 ; '.'
00000000000183f1         db  0x8e ; '.'
00000000000183f2         db  0x03 ; '.'
00000000000183f3         db  0x42 ; 'B'
00000000000183f4         db  0x0e ; '.'
00000000000183f5         db  0x20 ; ' '
00000000000183f6         db  0x8d ; '.'
00000000000183f7         db  0x04 ; '.'
00000000000183f8         db  0x42 ; 'B'
00000000000183f9         db  0x0e ; '.'
00000000000183fa         db  0x28 ; '('
00000000000183fb         db  0x8c ; '.'
00000000000183fc         db  0x05 ; '.'
00000000000183fd         db  0x44 ; 'D'
00000000000183fe         db  0x0e ; '.'
00000000000183ff         db  0x30 ; '0'
0000000000018400         db  0x86 ; '.'
0000000000018401         db  0x06 ; '.'
0000000000018402         db  0x41 ; 'A'
0000000000018403         db  0x0e ; '.'
0000000000018404         db  0x38 ; '8'
0000000000018405         db  0x83 ; '.'
0000000000018406         db  0x07 ; '.'
0000000000018407         db  0x4a ; 'J'
0000000000018408         db  0x0e ; '.'
0000000000018409         db  0x60 ; '`'
000000000001840a         db  0x02 ; '.'
000000000001840b         db  0xdd ; '.'
000000000001840c         db  0x0e ; '.'
000000000001840d         db  0x68 ; 'h'
000000000001840e         db  0x57 ; 'W'
000000000001840f         db  0x0e ; '.'
0000000000018410         db  0x70 ; 'p'
0000000000018411         db  0x42 ; 'B'
0000000000018412         db  0x0e ; '.'
0000000000018413         db  0x78 ; 'x'
0000000000018414         db  0x42 ; 'B'
0000000000018415         db  0x0e ; '.'
0000000000018416         db  0x80 ; '.'
0000000000018417         db  0x01 ; '.'
0000000000018418         db  0x42 ; 'B'
0000000000018419         db  0x0e ; '.'
000000000001841a         db  0x88 ; '.'
000000000001841b         db  0x01 ; '.'
000000000001841c         db  0x42 ; 'B'
000000000001841d         db  0x0e ; '.'
000000000001841e         db  0x90 ; '.'
000000000001841f         db  0x01 ; '.'
0000000000018420         db  0x53 ; 'S'
0000000000018421         db  0x0e ; '.'
0000000000018422         db  0x60 ; '`'
0000000000018423         db  0x44 ; 'D'
0000000000018424         db  0x0a ; '.'
0000000000018425         db  0x0e ; '.'
0000000000018426         db  0x38 ; '8'
0000000000018427         db  0x41 ; 'A'
0000000000018428         db  0x0e ; '.'
0000000000018429         db  0x30 ; '0'
000000000001842a         db  0x41 ; 'A'
000000000001842b         db  0x0e ; '.'
000000000001842c         db  0x28 ; '('
000000000001842d         db  0x42 ; 'B'
000000000001842e         db  0x0e ; '.'
000000000001842f         db  0x20 ; ' '
0000000000018430         db  0x42 ; 'B'
0000000000018431         db  0x0e ; '.'
0000000000018432         db  0x18 ; '.'
0000000000018433         db  0x42 ; 'B'
0000000000018434         db  0x0e ; '.'
0000000000018435         db  0x10 ; '.'
0000000000018436         db  0x42 ; 'B'
0000000000018437         db  0x0e ; '.'
0000000000018438         db  0x08 ; '.'
0000000000018439         db  0x44 ; 'D'
000000000001843a         db  0x0b ; '.'
000000000001843b         db  0x02 ; '.'
000000000001843c         db  0x78 ; 'x'
000000000001843d         db  0x0a ; '.'
000000000001843e         db  0x0e ; '.'
000000000001843f         db  0x68 ; 'h'
0000000000018440         db  0x48 ; 'H'
0000000000018441         db  0x0b ; '.'
0000000000018442         db  0x5a ; 'Z'
0000000000018443         db  0x0a ; '.'
0000000000018444         db  0x0e ; '.'
0000000000018445         db  0x38 ; '8'
0000000000018446         db  0x47 ; 'G'
0000000000018447         db  0x0e ; '.'
0000000000018448         db  0x30 ; '0'
0000000000018449         db  0x41 ; 'A'
000000000001844a         db  0x0e ; '.'
000000000001844b         db  0x28 ; '('
000000000001844c         db  0x42 ; 'B'
000000000001844d         db  0x0e ; '.'
000000000001844e         db  0x20 ; ' '
000000000001844f         db  0x42 ; 'B'
0000000000018450         db  0x0e ; '.'
0000000000018451         db  0x18 ; '.'
0000000000018452         db  0x42 ; 'B'
0000000000018453         db  0x0e ; '.'
0000000000018454         db  0x10 ; '.'
0000000000018455         db  0x42 ; 'B'
0000000000018456         db  0x0e ; '.'
0000000000018457         db  0x08 ; '.'
0000000000018458         db  0x56 ; 'V'
0000000000018459         db  0x0b ; '.'
000000000001845a         db  0x5e ; '^'
000000000001845b         db  0x0a ; '.'
000000000001845c         db  0x0e ; '.'
000000000001845d         db  0x38 ; '8'
000000000001845e         db  0x52 ; 'R'
000000000001845f         db  0x0e ; '.'
0000000000018460         db  0x30 ; '0'
0000000000018461         db  0x41 ; 'A'
0000000000018462         db  0x0e ; '.'
0000000000018463         db  0x28 ; '('
0000000000018464         db  0x42 ; 'B'
0000000000018465         db  0x0e ; '.'
0000000000018466         db  0x20 ; ' '
0000000000018467         db  0x42 ; 'B'
0000000000018468         db  0x0e ; '.'
0000000000018469         db  0x18 ; '.'
000000000001846a         db  0x42 ; 'B'
000000000001846b         db  0x0e ; '.'
000000000001846c         db  0x10 ; '.'
000000000001846d         db  0x42 ; 'B'
000000000001846e         db  0x0e ; '.'
000000000001846f         db  0x08 ; '.'
0000000000018470         db  0x4f ; 'O'
0000000000018471         db  0x0b ; '.'
0000000000018472         db  0x62 ; 'b'
0000000000018473         db  0x0a ; '.'
0000000000018474         db  0x0e ; '.'
0000000000018475         db  0x38 ; '8'
0000000000018476         db  0x50 ; 'P'
0000000000018477         db  0x0e ; '.'
0000000000018478         db  0x30 ; '0'
0000000000018479         db  0x41 ; 'A'
000000000001847a         db  0x0e ; '.'
000000000001847b         db  0x28 ; '('
000000000001847c         db  0x42 ; 'B'
000000000001847d         db  0x0e ; '.'
000000000001847e         db  0x20 ; ' '
000000000001847f         db  0x42 ; 'B'
0000000000018480         db  0x0e ; '.'
0000000000018481         db  0x18 ; '.'
0000000000018482         db  0x42 ; 'B'
0000000000018483         db  0x0e ; '.'
0000000000018484         db  0x10 ; '.'
0000000000018485         db  0x42 ; 'B'
0000000000018486         db  0x0e ; '.'
0000000000018487         db  0x08 ; '.'
0000000000018488         db  0x55 ; 'U'
0000000000018489         db  0x0b ; '.'
000000000001848a         db  0x66 ; 'f'
000000000001848b         db  0x0e ; '.'
000000000001848c         db  0x68 ; 'h'
000000000001848d         db  0x42 ; 'B'
000000000001848e         db  0x0e ; '.'
000000000001848f         db  0x70 ; 'p'
0000000000018490         db  0x5c ; '\'
0000000000018491         db  0x0e ; '.'
0000000000018492         db  0x68 ; 'h'
0000000000018493         db  0x41 ; 'A'
0000000000018494         db  0x0e ; '.'
0000000000018495         db  0x60 ; '`'
0000000000018496         db  0x44 ; 'D'
0000000000018497         db  0x0a ; '.'
0000000000018498         db  0x0e ; '.'
0000000000018499         db  0x38 ; '8'
000000000001849a         db  0x41 ; 'A'
000000000001849b         db  0x0e ; '.'
000000000001849c         db  0x30 ; '0'
000000000001849d         db  0x41 ; 'A'
000000000001849e         db  0x0e ; '.'
000000000001849f         db  0x28 ; '('
00000000000184a0         db  0x42 ; 'B'
00000000000184a1         db  0x0e ; '.'
00000000000184a2         db  0x20 ; ' '
00000000000184a3         db  0x42 ; 'B'
00000000000184a4         db  0x0e ; '.'
00000000000184a5         db  0x18 ; '.'
00000000000184a6         db  0x42 ; 'B'
00000000000184a7         db  0x0e ; '.'
00000000000184a8         db  0x10 ; '.'
00000000000184a9         db  0x42 ; 'B'
00000000000184aa         db  0x0e ; '.'
00000000000184ab         db  0x08 ; '.'
00000000000184ac         db  0x45 ; 'E'
00000000000184ad         db  0x0b ; '.'
00000000000184ae         db  0x68 ; 'h'
00000000000184af         db  0x0a ; '.'
00000000000184b0         db  0x0e ; '.'
00000000000184b1         db  0x68 ; 'h'
00000000000184b2         db  0x48 ; 'H'
00000000000184b3         db  0x0b ; '.'
00000000000184b4         db  0x72 ; 'r'
00000000000184b5         db  0x0e ; '.'
00000000000184b6         db  0x68 ; 'h'
00000000000184b7         db  0x45 ; 'E'
00000000000184b8         db  0x0e ; '.'
00000000000184b9         db  0x70 ; 'p'
00000000000184ba         db  0x42 ; 'B'
00000000000184bb         db  0x0e ; '.'
00000000000184bc         db  0x78 ; 'x'
00000000000184bd         db  0x42 ; 'B'
00000000000184be         db  0x0e ; '.'
00000000000184bf         db  0x80 ; '.'
00000000000184c0         db  0x01 ; '.'
00000000000184c1         db  0x5e ; '^'
00000000000184c2         db  0x0e ; '.'
00000000000184c3         db  0x60 ; '`'
00000000000184c4         db  0x44 ; 'D'
00000000000184c5         db  0x0a ; '.'
00000000000184c6         db  0x0e ; '.'
00000000000184c7         db  0x38 ; '8'
00000000000184c8         db  0x41 ; 'A'
00000000000184c9         db  0x0e ; '.'
00000000000184ca         db  0x30 ; '0'
00000000000184cb         db  0x41 ; 'A'
00000000000184cc         db  0x0e ; '.'
00000000000184cd         db  0x28 ; '('
00000000000184ce         db  0x42 ; 'B'
00000000000184cf         db  0x0e ; '.'
00000000000184d0         db  0x20 ; ' '
00000000000184d1         db  0x42 ; 'B'
00000000000184d2         db  0x0e ; '.'
00000000000184d3         db  0x18 ; '.'
00000000000184d4         db  0x42 ; 'B'
00000000000184d5         db  0x0e ; '.'
00000000000184d6         db  0x10 ; '.'
00000000000184d7         db  0x42 ; 'B'
00000000000184d8         db  0x0e ; '.'
00000000000184d9         db  0x08 ; '.'
00000000000184da         db  0x41 ; 'A'
00000000000184db         db  0x0b ; '.'
00000000000184dc         db  0x79 ; 'y'
00000000000184dd         db  0x0a ; '.'
00000000000184de         db  0x0e ; '.'
00000000000184df         db  0x68 ; 'h'
00000000000184e0         db  0x42 ; 'B'
00000000000184e1         db  0x0e ; '.'
00000000000184e2         db  0x70 ; 'p'
00000000000184e3         db  0x42 ; 'B'
00000000000184e4         db  0x0e ; '.'
00000000000184e5         db  0x78 ; 'x'
00000000000184e6         db  0x42 ; 'B'
00000000000184e7         db  0x0e ; '.'
00000000000184e8         db  0x80 ; '.'
00000000000184e9         db  0x01 ; '.'
00000000000184ea         db  0x51 ; 'Q'
00000000000184eb         db  0x0b ; '.'
00000000000184ec         dd         0x00000010                                  ; Length of the record
00000000000184f0         dd         0x00000be0                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
00000000000184f4         db         0xcc, 0xe6, 0xfe, 0xff                      ; begin 0x6bc0
00000000000184f8         db         0x20, 3 dup (0x00)                          ; length 0x20 (end at 0x6be0)
00000000000184fc         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000184fd         align      256
0000000000018500         dd         0x00000018                                  ; Length of the record
0000000000018504         dd         0x00000bf4                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000018508         db         0xd8, 0xe6, 0xfe, 0xff                      ; begin 0x6be0
000000000001850c         db         0x78, 3 dup (0x00)                          ; length 0x78 (end at 0x6c58)
0000000000018510         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018511         db  0x44 ; 'D'
0000000000018512         db  0x0e ; '.'
0000000000018513         db  0x70 ; 'p'
0000000000018514         db  0x02 ; '.'
0000000000018515         db  0x60 ; '`'
0000000000018516         db  0x0a ; '.'
0000000000018517         db  0x0e ; '.'
0000000000018518         db  0x08 ; '.'
0000000000018519         db  0x41 ; 'A'
000000000001851a         db  0x0b ; '.'
000000000001851b         db  0x00 ; '.'
000000000001851c         dd         0x00000028                                  ; Length of the record
0000000000018520         dd         0x00000c10                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000018524         db         0x3c, 0xe7, 0xfe, 0xff                      ; begin 0x6c60
0000000000018528         db         0xd5, 3 dup (0x00)                          ; length 0xd5 (end at 0x6d35)
000000000001852c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001852d         db  0x41 ; 'A'
000000000001852e         db  0x0e ; '.'
000000000001852f         db  0x10 ; '.'
0000000000018530         db  0x86 ; '.'
0000000000018531         db  0x02 ; '.'
0000000000018532         db  0x41 ; 'A'
0000000000018533         db  0x0e ; '.'
0000000000018534         db  0x18 ; '.'
0000000000018535         db  0x83 ; '.'
0000000000018536         db  0x03 ; '.'
0000000000018537         db  0x50 ; 'P'
0000000000018538         db  0x0e ; '.'
0000000000018539         db  0xd0 ; '.'
000000000001853a         db  0x01 ; '.'
000000000001853b         db  0x02 ; '.'
000000000001853c         db  0xab ; '.'
000000000001853d         db  0x0a ; '.'
000000000001853e         db  0x0e ; '.'
000000000001853f         db  0x18 ; '.'
0000000000018540         db  0x41 ; 'A'
0000000000018541         db  0x0e ; '.'
0000000000018542         db  0x10 ; '.'
0000000000018543         db  0x41 ; 'A'
0000000000018544         db  0x0e ; '.'
0000000000018545         db  0x08 ; '.'
0000000000018546         db  0x41 ; 'A'
0000000000018547         db  0x0b ; '.'
0000000000018548         dd         0x0000001c                                  ; Length of the record
000000000001854c         dd         0x00000c3c                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000018550         db         0xf0, 0xe7, 0xfe, 0xff                      ; begin 0x6d40
0000000000018554         db         0x80, 3 dup (0x00)                          ; length 0x80 (end at 0x6dc0)
0000000000018558         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018559         db  0x41 ; 'A'
000000000001855a         db  0x0e ; '.'
000000000001855b         db  0x10 ; '.'
000000000001855c         db  0x83 ; '.'
000000000001855d         db  0x02 ; '.'
000000000001855e         db  0x02 ; '.'
000000000001855f         db  0x7a ; 'z'
0000000000018560         db  0x0e ; '.'
0000000000018561         db  0x08 ; '.'
0000000000018562         db  0x00 ; '.'
0000000000018563         db  0x00 ; '.'
0000000000018564         db  0x00 ; '.'
0000000000018565         db  0x00 ; '.'
0000000000018566         db  0x00 ; '.'
0000000000018567         db  0x00 ; '.'
0000000000018568         dd         0x00000018                                  ; Length of the record
000000000001856c         dd         0x00000c5c                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000018570         db         0x50, 0xe8, 0xfe, 0xff                      ; begin 0x6dc0
0000000000018574         db         0x1a, 3 dup (0x00)                          ; length 0x1a (end at 0x6dda)
0000000000018578         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018579         db  0x41 ; 'A'
000000000001857a         db  0x0e ; '.'
000000000001857b         db  0x10 ; '.'
000000000001857c         db  0x83 ; '.'
000000000001857d         db  0x02 ; '.'
000000000001857e         db  0x53 ; 'S'
000000000001857f         db  0x0a ; '.'
0000000000018580         db  0x0e ; '.'
0000000000018581         db  0x08 ; '.'
0000000000018582         db  0x41 ; 'A'
0000000000018583         db  0x0b ; '.'
0000000000018584         dd         0x00000010                                  ; Length of the record
0000000000018588         dd         0x00000c78                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
000000000001858c         db         0x54, 0xe8, 0xfe, 0xff                      ; begin 0x6de0
0000000000018590         db         0x24, 3 dup (0x00)                          ; length 0x24 (end at 0x6e04)
0000000000018594         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018595         db  0x5f ; '_'
0000000000018596         db  0x0e ; '.'
0000000000018597         db  0x10 ; '.'
0000000000018598         dd         0x00000010                                  ; Length of the record
000000000001859c         dd         0x00000c8c                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
00000000000185a0         db         0x70, 0xe8, 0xfe, 0xff                      ; begin 0x6e10
00000000000185a4         db         0x02, 3 dup (0x00)                          ; length 0x2 (end at 0x6e12)
00000000000185a8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000185a9         align      4
00000000000185ac         dd         0x00000020                                  ; Length of the record
00000000000185b0         dd         0x00000ca0                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
00000000000185b4         db         0x6c, 0xe8, 0xfe, 0xff                      ; begin 0x6e20
00000000000185b8         db         0x36, 3 dup (0x00)                          ; length 0x36 (end at 0x6e56)
00000000000185bc         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000185bd         db  0x44 ; 'D'
00000000000185be         db  0x0e ; '.'
00000000000185bf         db  0x10 ; '.'
00000000000185c0         db  0x83 ; '.'
00000000000185c1         db  0x02 ; '.'
00000000000185c2         db  0x5d ; ']'
00000000000185c3         db  0x0a ; '.'
00000000000185c4         db  0x0e ; '.'
00000000000185c5         db  0x08 ; '.'
00000000000185c6         db  0x47 ; 'G'
00000000000185c7         db  0x0b ; '.'
00000000000185c8         db  0x48 ; 'H'
00000000000185c9         db  0x0a ; '.'
00000000000185ca         db  0x0e ; '.'
00000000000185cb         db  0x08 ; '.'
00000000000185cc         db  0x41 ; 'A'
00000000000185cd         db  0x0b ; '.'
00000000000185ce         db  0x00 ; '.'
00000000000185cf         db  0x00 ; '.'
00000000000185d0         dd         0x00000010                                  ; Length of the record
00000000000185d4         dd         0x00000cc4                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
00000000000185d8         db         0x88, 0xe8, 0xfe, 0xff                      ; begin 0x6e60
00000000000185dc         db         0x24, 3 dup (0x00)                          ; length 0x24 (end at 0x6e84)
00000000000185e0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000185e1         db  0x5f ; '_'
00000000000185e2         db  0x0e ; '.'
00000000000185e3         db  0x10 ; '.'
00000000000185e4         dd         0x00000014                                  ; Length of the record
00000000000185e8         dd         0x00000cd8                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
00000000000185ec         db         0xa4, 0xe8, 0xfe, 0xff                      ; begin 0x6e90
00000000000185f0         db         0x82, 3 dup (0x00)                          ; length 0x82 (end at 0x6f12)
00000000000185f4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000185f5         db  0x02 ; '.'
00000000000185f6         db  0x5f ; '_'
00000000000185f7         db  0x0e ; '.'
00000000000185f8         db  0x10 ; '.'
00000000000185f9         db  0x49 ; 'I'
00000000000185fa         db  0x0e ; '.'
00000000000185fb         db  0x08 ; '.'
00000000000185fc         dd         0x00000014                                  ; Length of the record
0000000000018600         dd         0x00000cf0                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000018604         db         0x1c, 0xe9, 0xfe, 0xff                      ; begin 0x6f20
0000000000018608         db         0x4a, 3 dup (0x00)                          ; length 0x4a (end at 0x6f6a)
000000000001860c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001860d         db  0x02 ; '.'
000000000001860e         db  0x45 ; 'E'
000000000001860f         db  0x0e ; '.'
0000000000018610         db  0x10 ; '.'
0000000000018611         db  0x00 ; '.'
0000000000018612         db  0x00 ; '.'
0000000000018613         db  0x00 ; '.'
0000000000018614         dd         0x00000018                                  ; Length of the record
0000000000018618         dd         0x00000d08                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
000000000001861c         db         0x54, 0xe9, 0xfe, 0xff                      ; begin 0x6f70
0000000000018620         db         0x17, 3 dup (0x00)                          ; length 0x17 (end at 0x6f87)
0000000000018624         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018625         db  0x41 ; 'A'
0000000000018626         db  0x0e ; '.'
0000000000018627         db  0x10 ; '.'
0000000000018628         db  0x83 ; '.'
0000000000018629         db  0x02 ; '.'
000000000001862a         db  0x51 ; 'Q'
000000000001862b         db  0x0e ; '.'
000000000001862c         db  0x08 ; '.'
000000000001862d         db  0x00 ; '.'
000000000001862e         db  0x00 ; '.'
000000000001862f         db  0x00 ; '.'
0000000000018630         dd         0x00000018                                  ; Length of the record
0000000000018634         dd         0x00000d24                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000018638         db         0x58, 0xe9, 0xfe, 0xff                      ; begin 0x6f90
000000000001863c         db         0x2e, 3 dup (0x00)                          ; length 0x2e (end at 0x6fbe)
0000000000018640         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018641         db  0x47 ; 'G'
0000000000018642         db  0x0e ; '.'
0000000000018643         db  0x10 ; '.'
0000000000018644         db  0x61 ; 'a'
0000000000018645         db  0x0a ; '.'
0000000000018646         db  0x0e ; '.'
0000000000018647         db  0x08 ; '.'
0000000000018648         db  0x41 ; 'A'
0000000000018649         db  0x0b ; '.'
000000000001864a         db  0x00 ; '.'
000000000001864b         db  0x00 ; '.'
000000000001864c         dd         0x00000024                                  ; Length of the record
0000000000018650         dd         0x00000d40                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000018654         db         0x6c, 0xe9, 0xfe, 0xff                      ; begin 0x6fc0
0000000000018658         db         0x28, 3 dup (0x00)                          ; length 0x28 (end at 0x6fe8)
000000000001865c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001865d         db  0x41 ; 'A'
000000000001865e         db  0x0e ; '.'
000000000001865f         db  0x10 ; '.'
0000000000018660         db  0x86 ; '.'
0000000000018661         db  0x02 ; '.'
0000000000018662         db  0x41 ; 'A'
0000000000018663         db  0x0e ; '.'
0000000000018664         db  0x18 ; '.'
0000000000018665         db  0x83 ; '.'
0000000000018666         db  0x03 ; '.'
0000000000018667         db  0x4d ; 'M'
0000000000018668         db  0x0e ; '.'
0000000000018669         db  0x20 ; ' '
000000000001866a         db  0x49 ; 'I'
000000000001866b         db  0x0e ; '.'
000000000001866c         db  0x18 ; '.'
000000000001866d         db  0x47 ; 'G'
000000000001866e         db  0x0e ; '.'
000000000001866f         db  0x10 ; '.'
0000000000018670         db  0x41 ; 'A'
0000000000018671         db  0x0e ; '.'
0000000000018672         db  0x08 ; '.'
0000000000018673         db  0x00 ; '.'
0000000000018674         dd         0x00000018                                  ; Length of the record
0000000000018678         dd         0x00000d68                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
000000000001867c         db         0x74, 0xe9, 0xfe, 0xff                      ; begin 0x6ff0
0000000000018680         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x7003)
0000000000018684         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018685         db  0x41 ; 'A'
0000000000018686         db  0x0e ; '.'
0000000000018687         db  0x10 ; '.'
0000000000018688         db  0x83 ; '.'
0000000000018689         db  0x02 ; '.'
000000000001868a         db  0x50 ; 'P'
000000000001868b         db  0x0e ; '.'
000000000001868c         db  0x08 ; '.'
000000000001868d         db  0x00 ; '.'
000000000001868e         db  0x00 ; '.'
000000000001868f         db  0x00 ; '.'
0000000000018690         dd         0x00000014                                  ; Length of the record
0000000000018694         dd         0x00000d84                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000018698         db         0x78, 0xe9, 0xfe, 0xff                      ; begin 0x7010
000000000001869c         db         0x35, 3 dup (0x00)                          ; length 0x35 (end at 0x7045)
00000000000186a0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000186a1         db  0x4b ; 'K'
00000000000186a2         db  0x0e ; '.'
00000000000186a3         db  0x10 ; '.'
00000000000186a4         db  0x00 ; '.'
00000000000186a5         db  0x00 ; '.'
00000000000186a6         db  0x00 ; '.'
00000000000186a7         db  0x00 ; '.'
00000000000186a8         dd         0x0000003c                                  ; Length of the record
00000000000186ac         dd         0x00000d9c                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
00000000000186b0         db         0xa0, 0xe9, 0xfe, 0xff                      ; begin 0x7050
00000000000186b4         db         0x83, 3 dup (0x00)                          ; length 0x83 (end at 0x70d3)
00000000000186b8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000186b9         db  0x42 ; 'B'
00000000000186ba         db  0x0e ; '.'
00000000000186bb         db  0x10 ; '.'
00000000000186bc         db  0x8d ; '.'
00000000000186bd         db  0x02 ; '.'
00000000000186be         db  0x42 ; 'B'
00000000000186bf         db  0x0e ; '.'
00000000000186c0         db  0x18 ; '.'
00000000000186c1         db  0x8c ; '.'
00000000000186c2         db  0x03 ; '.'
00000000000186c3         db  0x44 ; 'D'
00000000000186c4         db  0x0e ; '.'
00000000000186c5         db  0x20 ; ' '
00000000000186c6         db  0x86 ; '.'
00000000000186c7         db  0x04 ; '.'
00000000000186c8         db  0x41 ; 'A'
00000000000186c9         db  0x0e ; '.'
00000000000186ca         db  0x28 ; '('
00000000000186cb         db  0x83 ; '.'
00000000000186cc         db  0x05 ; '.'
00000000000186cd         db  0x4a ; 'J'
00000000000186ce         db  0x0e ; '.'
00000000000186cf         db  0x40 ; '@'
00000000000186d0         db  0x02 ; '.'
00000000000186d1         db  0x64 ; 'd'
00000000000186d2         db  0x0a ; '.'
00000000000186d3         db  0x0e ; '.'
00000000000186d4         db  0x28 ; '('
00000000000186d5         db  0x41 ; 'A'
00000000000186d6         db  0x0e ; '.'
00000000000186d7         db  0x20 ; ' '
00000000000186d8         db  0x41 ; 'A'
00000000000186d9         db  0x0e ; '.'
00000000000186da         db  0x18 ; '.'
00000000000186db         db  0x42 ; 'B'
00000000000186dc         db  0x0e ; '.'
00000000000186dd         db  0x10 ; '.'
00000000000186de         db  0x42 ; 'B'
00000000000186df         db  0x0e ; '.'
00000000000186e0         db  0x08 ; '.'
00000000000186e1         db  0x41 ; 'A'
00000000000186e2         db  0x0b ; '.'
00000000000186e3         db  0x00 ; '.'
00000000000186e4         db  0x00 ; '.'
00000000000186e5         db  0x00 ; '.'
00000000000186e6         db  0x00 ; '.'
00000000000186e7         db  0x00 ; '.'
00000000000186e8         dd         0x00000010                                  ; Length of the record
00000000000186ec         dd         0x00000ddc                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
00000000000186f0         db         0xf0, 0xe9, 0xfe, 0xff                      ; begin 0x70e0
00000000000186f4         db         0x2f, 0x01, 2 dup (0x00)                    ; length 0x12f (end at 0x720f)
00000000000186f8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000186f9         align      4
00000000000186fc         dd         0x00000010                                  ; Length of the record
0000000000018700         dd         0x00000df0                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000018704         db         0x0c, 0xeb, 0xfe, 0xff                      ; begin 0x7210
0000000000018708         db         0x1d, 3 dup (0x00)                          ; length 0x1d (end at 0x722d)
000000000001870c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001870d         align      4
0000000000018714         dd         0x00000e04                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000018718         db         0x18, 0xeb, 0xfe, 0xff                      ; begin 0x7230
000000000001871c         db         0x2c, 0x02, 2 dup (0x00)                    ; length 0x22c (end at 0x745c)
0000000000018720         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018721         db  0x42 ; 'B'
0000000000018722         db  0x0e ; '.'
0000000000018723         db  0x10 ; '.'
0000000000018724         db  0x8f ; '.'
0000000000018725         db  0x02 ; '.'
0000000000018726         db  0x42 ; 'B'
0000000000018727         db  0x0e ; '.'
0000000000018728         db  0x18 ; '.'
0000000000018729         db  0x8e ; '.'
000000000001872a         db  0x03 ; '.'
000000000001872b         db  0x45 ; 'E'
000000000001872c         db  0x0e ; '.'
000000000001872d         db  0x20 ; ' '
000000000001872e         db  0x8d ; '.'
000000000001872f         db  0x04 ; '.'
0000000000018730         db  0x42 ; 'B'
0000000000018731         db  0x0e ; '.'
0000000000018732         db  0x28 ; '('
0000000000018733         db  0x8c ; '.'
0000000000018734         db  0x05 ; '.'
0000000000018735         db  0x45 ; 'E'
0000000000018736         db  0x0e ; '.'
0000000000018737         db  0x30 ; '0'
0000000000018738         db  0x86 ; '.'
0000000000018739         db  0x06 ; '.'
000000000001873a         db  0x41 ; 'A'
000000000001873b         db  0x0e ; '.'
000000000001873c         db  0x38 ; '8'
000000000001873d         db  0x83 ; '.'
000000000001873e         db  0x07 ; '.'
000000000001873f         db  0x47 ; 'G'
0000000000018740         db  0x0e ; '.'
0000000000018741         db  0x80 ; '.'
0000000000018742         db  0x01 ; '.'
0000000000018743         db  0x02 ; '.'
0000000000018744         db  0xba ; '.'
0000000000018745         db  0x0a ; '.'
0000000000018746         db  0x0e ; '.'
0000000000018747         db  0x38 ; '8'
0000000000018748         db  0x46 ; 'F'
0000000000018749         db  0x0e ; '.'
000000000001874a         db  0x30 ; '0'
000000000001874b         db  0x41 ; 'A'
000000000001874c         db  0x0e ; '.'
000000000001874d         db  0x28 ; '('
000000000001874e         db  0x42 ; 'B'
000000000001874f         db  0x0e ; '.'
0000000000018750         db  0x20 ; ' '
0000000000018751         db  0x42 ; 'B'
0000000000018752         db  0x0e ; '.'
0000000000018753         db  0x18 ; '.'
0000000000018754         db  0x42 ; 'B'
0000000000018755         db  0x0e ; '.'
0000000000018756         db  0x10 ; '.'
0000000000018757         db  0x42 ; 'B'
0000000000018758         db  0x0e ; '.'
0000000000018759         db  0x08 ; '.'
000000000001875a         db  0x47 ; 'G'
000000000001875b         db  0x0b ; '.'
000000000001875c         db  0x02 ; '.'
000000000001875d         db  0xe1 ; '.'
000000000001875e         db  0x0a ; '.'
000000000001875f         db  0x0e ; '.'
0000000000018760         db  0x38 ; '8'
0000000000018761         db  0x44 ; 'D'
0000000000018762         db  0x0e ; '.'
0000000000018763         db  0x30 ; '0'
0000000000018764         db  0x43 ; 'C'
0000000000018765         db  0x0e ; '.'
0000000000018766         db  0x28 ; '('
0000000000018767         db  0x42 ; 'B'
0000000000018768         db  0x0e ; '.'
0000000000018769         db  0x20 ; ' '
000000000001876a         db  0x42 ; 'B'
000000000001876b         db  0x0e ; '.'
000000000001876c         db  0x18 ; '.'
000000000001876d         db  0x42 ; 'B'
000000000001876e         db  0x0e ; '.'
000000000001876f         db  0x10 ; '.'
0000000000018770         db  0x42 ; 'B'
0000000000018771         db  0x0e ; '.'
0000000000018772         db  0x08 ; '.'
0000000000018773         db  0x48 ; 'H'
0000000000018774         db  0x0b ; '.'
0000000000018775         db  0x59 ; 'Y'
0000000000018776         db  0x0a ; '.'
0000000000018777         db  0x0e ; '.'
0000000000018778         db  0x38 ; '8'
0000000000018779         db  0x43 ; 'C'
000000000001877a         db  0x0e ; '.'
000000000001877b         db  0x30 ; '0'
000000000001877c         db  0x41 ; 'A'
000000000001877d         db  0x0e ; '.'
000000000001877e         db  0x28 ; '('
000000000001877f         db  0x42 ; 'B'
0000000000018780         db  0x0e ; '.'
0000000000018781         db  0x20 ; ' '
0000000000018782         db  0x42 ; 'B'
0000000000018783         db  0x0e ; '.'
0000000000018784         db  0x18 ; '.'
0000000000018785         db  0x42 ; 'B'
0000000000018786         db  0x0e ; '.'
0000000000018787         db  0x10 ; '.'
0000000000018788         db  0x42 ; 'B'
0000000000018789         db  0x0e ; '.'
000000000001878a         db  0x08 ; '.'
000000000001878b         db  0x4b ; 'K'
000000000001878c         db  0x0b ; '.'
000000000001878d         db  0x49 ; 'I'
000000000001878e         db  0x0e ; '.'
000000000001878f         db  0x38 ; '8'
0000000000018790         db  0x41 ; 'A'
0000000000018791         db  0x0e ; '.'
0000000000018792         db  0x30 ; '0'
0000000000018793         db  0x41 ; 'A'
0000000000018794         db  0x0e ; '.'
0000000000018795         db  0x28 ; '('
0000000000018796         db  0x48 ; 'H'
0000000000018797         db  0x0e ; '.'
0000000000018798         db  0x20 ; ' '
0000000000018799         db  0x44 ; 'D'
000000000001879a         db  0x0e ; '.'
000000000001879b         db  0x18 ; '.'
000000000001879c         db  0x42 ; 'B'
000000000001879d         db  0x0e ; '.'
000000000001879e         db  0x10 ; '.'
000000000001879f         db  0x42 ; 'B'
00000000000187a0         db  0x0e ; '.'
00000000000187a1         db  0x08 ; '.'
00000000000187a2         db  0x00 ; '.'
00000000000187a3         db  0x00 ; '.'
00000000000187a4         dd         0x00000010                                  ; Length of the record
00000000000187a8         dd         0x00000e98                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
00000000000187ac         db         0xb4, 0xec, 0xfe, 0xff                      ; begin 0x7460
00000000000187b0         db         0x66, 3 dup (0x00)                          ; length 0x66 (end at 0x74c6)
00000000000187b4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000187b5         align      8
00000000000187b8         dd         0x00000028                                  ; Length of the record
00000000000187bc         dd         0x00000eac                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
00000000000187c0         db         0x10, 0xed, 0xfe, 0xff                      ; begin 0x74d0
00000000000187c4         db         0x6b, 3 dup (0x00)                          ; length 0x6b (end at 0x753b)
00000000000187c8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000187c9         db  0x42 ; 'B'
00000000000187ca         db  0x0e ; '.'
00000000000187cb         db  0x10 ; '.'
00000000000187cc         db  0x8c ; '.'
00000000000187cd         db  0x02 ; '.'
00000000000187ce         db  0x44 ; 'D'
00000000000187cf         db  0x0e ; '.'
00000000000187d0         db  0x18 ; '.'
00000000000187d1         db  0x86 ; '.'
00000000000187d2         db  0x03 ; '.'
00000000000187d3         db  0x44 ; 'D'
00000000000187d4         db  0x0e ; '.'
00000000000187d5         db  0x20 ; ' '
00000000000187d6         db  0x83 ; '.'
00000000000187d7         db  0x04 ; '.'
00000000000187d8         db  0x02 ; '.'
00000000000187d9         db  0x5d ; ']'
00000000000187da         db  0x0e ; '.'
00000000000187db         db  0x18 ; '.'
00000000000187dc         db  0x41 ; 'A'
00000000000187dd         db  0x0e ; '.'
00000000000187de         db  0x10 ; '.'
00000000000187df         db  0x42 ; 'B'
00000000000187e0         db  0x0e ; '.'
00000000000187e1         db  0x08 ; '.'
00000000000187e2         db  0x00 ; '.'
00000000000187e3         db  0x00 ; '.'
00000000000187e4         dd         0x00000028                                  ; Length of the record
00000000000187e8         dd         0x00000ed8                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
00000000000187ec         db         0x54, 0xed, 0xfe, 0xff                      ; begin 0x7540
00000000000187f0         db         0x51, 3 dup (0x00)                          ; length 0x51 (end at 0x7591)
00000000000187f4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000187f5         db  0x42 ; 'B'
00000000000187f6         db  0x0e ; '.'
00000000000187f7         db  0x10 ; '.'
00000000000187f8         db  0x8c ; '.'
00000000000187f9         db  0x02 ; '.'
00000000000187fa         db  0x44 ; 'D'
00000000000187fb         db  0x0e ; '.'
00000000000187fc         db  0x18 ; '.'
00000000000187fd         db  0x86 ; '.'
00000000000187fe         db  0x03 ; '.'
00000000000187ff         db  0x44 ; 'D'
0000000000018800         db  0x0e ; '.'
0000000000018801         db  0x20 ; ' '
0000000000018802         db  0x83 ; '.'
0000000000018803         db  0x04 ; '.'
0000000000018804         db  0x02 ; '.'
0000000000018805         db  0x43 ; 'C'
0000000000018806         db  0x0e ; '.'
0000000000018807         db  0x18 ; '.'
0000000000018808         db  0x41 ; 'A'
0000000000018809         db  0x0e ; '.'
000000000001880a         db  0x10 ; '.'
000000000001880b         db  0x42 ; 'B'
000000000001880c         db  0x0e ; '.'
000000000001880d         db  0x08 ; '.'
000000000001880e         db  0x00 ; '.'
000000000001880f         db  0x00 ; '.'
0000000000018810         dd         0x00000030                                  ; Length of the record
0000000000018814         dd         0x00000f04                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000018818         db         0x88, 0xed, 0xfe, 0xff                      ; begin 0x75a0
000000000001881c         db         0x9c, 3 dup (0x00)                          ; length 0x9c (end at 0x763c)
0000000000018820         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018821         db  0x41 ; 'A'
0000000000018822         db  0x0e ; '.'
0000000000018823         db  0x10 ; '.'
0000000000018824         db  0x86 ; '.'
0000000000018825         db  0x02 ; '.'
0000000000018826         db  0x41 ; 'A'
0000000000018827         db  0x0e ; '.'
0000000000018828         db  0x18 ; '.'
0000000000018829         db  0x83 ; '.'
000000000001882a         db  0x03 ; '.'
000000000001882b         db  0x4a ; 'J'
000000000001882c         db  0x0e ; '.'
000000000001882d         db  0x20 ; ' '
000000000001882e         db  0x02 ; '.'
000000000001882f         db  0x62 ; 'b'
0000000000018830         db  0x0a ; '.'
0000000000018831         db  0x0e ; '.'
0000000000018832         db  0x18 ; '.'
0000000000018833         db  0x43 ; 'C'
0000000000018834         db  0x0e ; '.'
0000000000018835         db  0x10 ; '.'
0000000000018836         db  0x41 ; 'A'
0000000000018837         db  0x0e ; '.'
0000000000018838         db  0x08 ; '.'
0000000000018839         db  0x46 ; 'F'
000000000001883a         db  0x0b ; '.'
000000000001883b         db  0x5c ; '\'
000000000001883c         db  0x0e ; '.'
000000000001883d         db  0x18 ; '.'
000000000001883e         db  0x46 ; 'F'
000000000001883f         db  0x0e ; '.'
0000000000018840         db  0x10 ; '.'
0000000000018841         db  0x41 ; 'A'
0000000000018842         db  0x0e ; '.'
0000000000018843         db  0x08 ; '.'
0000000000018844         dd         0x00000028                                  ; Length of the record
0000000000018848         dd         0x00000f38                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
000000000001884c         db         0xf4, 0xed, 0xfe, 0xff                      ; begin 0x7640
0000000000018850         db         0x64, 3 dup (0x00)                          ; length 0x64 (end at 0x76a4)
0000000000018854         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018855         db  0x41 ; 'A'
0000000000018856         db  0x0e ; '.'
0000000000018857         db  0x10 ; '.'
0000000000018858         db  0x86 ; '.'
0000000000018859         db  0x02 ; '.'
000000000001885a         db  0x41 ; 'A'
000000000001885b         db  0x0e ; '.'
000000000001885c         db  0x18 ; '.'
000000000001885d         db  0x83 ; '.'
000000000001885e         db  0x03 ; '.'
000000000001885f         db  0x4a ; 'J'
0000000000018860         db  0x0e ; '.'
0000000000018861         db  0x20 ; ' '
0000000000018862         db  0x62 ; 'b'
0000000000018863         db  0x0a ; '.'
0000000000018864         db  0x0e ; '.'
0000000000018865         db  0x18 ; '.'
0000000000018866         db  0x41 ; 'A'
0000000000018867         db  0x0e ; '.'
0000000000018868         db  0x10 ; '.'
0000000000018869         db  0x41 ; 'A'
000000000001886a         db  0x0e ; '.'
000000000001886b         db  0x08 ; '.'
000000000001886c         db  0x48 ; 'H'
000000000001886d         db  0x0b ; '.'
000000000001886e         db  0x00 ; '.'
000000000001886f         db  0x00 ; '.'
0000000000018870         dd         0x00000034                                  ; Length of the record
0000000000018874         dd         0x00000f64                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000018878         db         0x38, 0xee, 0xfe, 0xff                      ; begin 0x76b0
000000000001887c         db         0x2c, 0x01, 2 dup (0x00)                    ; length 0x12c (end at 0x77dc)
0000000000018880         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018881         db  0x41 ; 'A'
0000000000018882         db  0x0e ; '.'
0000000000018883         db  0x10 ; '.'
0000000000018884         db  0x86 ; '.'
0000000000018885         db  0x02 ; '.'
0000000000018886         db  0x41 ; 'A'
0000000000018887         db  0x0e ; '.'
0000000000018888         db  0x18 ; '.'
0000000000018889         db  0x83 ; '.'
000000000001888a         db  0x03 ; '.'
000000000001888b         db  0x4a ; 'J'
000000000001888c         db  0x0e ; '.'
000000000001888d         db  0x20 ; ' '
000000000001888e         db  0x66 ; 'f'
000000000001888f         db  0x0a ; '.'
0000000000018890         db  0x0e ; '.'
0000000000018891         db  0x18 ; '.'
0000000000018892         db  0x41 ; 'A'
0000000000018893         db  0x0e ; '.'
0000000000018894         db  0x10 ; '.'
0000000000018895         db  0x41 ; 'A'
0000000000018896         db  0x0e ; '.'
0000000000018897         db  0x08 ; '.'
0000000000018898         db  0x44 ; 'D'
0000000000018899         db  0x0b ; '.'
000000000001889a         db  0x6d ; 'm'
000000000001889b         db  0x0a ; '.'
000000000001889c         db  0x0e ; '.'
000000000001889d         db  0x18 ; '.'
000000000001889e         db  0x46 ; 'F'
000000000001889f         db  0x0e ; '.'
00000000000188a0         db  0x10 ; '.'
00000000000188a1         db  0x41 ; 'A'
00000000000188a2         db  0x0e ; '.'
00000000000188a3         db  0x08 ; '.'
00000000000188a4         db  0x44 ; 'D'
00000000000188a5         db  0x0b ; '.'
00000000000188a6         db  0x00 ; '.'
00000000000188a7         db  0x00 ; '.'
00000000000188a8         dd         0x0000004c                                  ; Length of the record
00000000000188ac         dd         0x00000f9c                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
00000000000188b0         db         0x30, 0xef, 0xfe, 0xff                      ; begin 0x77e0
00000000000188b4         db         0xec, 3 dup (0x00)                          ; length 0xec (end at 0x78cc)
00000000000188b8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000188b9         db  0x42 ; 'B'
00000000000188ba         db  0x0e ; '.'
00000000000188bb         db  0x10 ; '.'
00000000000188bc         db  0x8e ; '.'
00000000000188bd         db  0x02 ; '.'
00000000000188be         db  0x42 ; 'B'
00000000000188bf         db  0x0e ; '.'
00000000000188c0         db  0x18 ; '.'
00000000000188c1         db  0x8d ; '.'
00000000000188c2         db  0x03 ; '.'
00000000000188c3         db  0x45 ; 'E'
00000000000188c4         db  0x0e ; '.'
00000000000188c5         db  0x20 ; ' '
00000000000188c6         db  0x8c ; '.'
00000000000188c7         db  0x04 ; '.'
00000000000188c8         db  0x41 ; 'A'
00000000000188c9         db  0x0e ; '.'
00000000000188ca         db  0x28 ; '('
00000000000188cb         db  0x86 ; '.'
00000000000188cc         db  0x05 ; '.'
00000000000188cd         db  0x44 ; 'D'
00000000000188ce         db  0x0e ; '.'
00000000000188cf         db  0x30 ; '0'
00000000000188d0         db  0x83 ; '.'
00000000000188d1         db  0x06 ; '.'
00000000000188d2         db  0x02 ; '.'
00000000000188d3         db  0x71 ; 'q'
00000000000188d4         db  0x0a ; '.'
00000000000188d5         db  0x0e ; '.'
00000000000188d6         db  0x28 ; '('
00000000000188d7         db  0x46 ; 'F'
00000000000188d8         db  0x0e ; '.'
00000000000188d9         db  0x20 ; ' '
00000000000188da         db  0x42 ; 'B'
00000000000188db         db  0x0e ; '.'
00000000000188dc         db  0x18 ; '.'
00000000000188dd         db  0x42 ; 'B'
00000000000188de         db  0x0e ; '.'
00000000000188df         db  0x10 ; '.'
00000000000188e0         db  0x42 ; 'B'
00000000000188e1         db  0x0e ; '.'
00000000000188e2         db  0x08 ; '.'
00000000000188e3         db  0x45 ; 'E'
00000000000188e4         db  0x0b ; '.'
00000000000188e5         db  0x6e ; 'n'
00000000000188e6         db  0x0a ; '.'
00000000000188e7         db  0x0e ; '.'
00000000000188e8         db  0x28 ; '('
00000000000188e9         db  0x41 ; 'A'
00000000000188ea         db  0x0e ; '.'
00000000000188eb         db  0x20 ; ' '
00000000000188ec         db  0x42 ; 'B'
00000000000188ed         db  0x0e ; '.'
00000000000188ee         db  0x18 ; '.'
00000000000188ef         db  0x42 ; 'B'
00000000000188f0         db  0x0e ; '.'
00000000000188f1         db  0x10 ; '.'
00000000000188f2         db  0x42 ; 'B'
00000000000188f3         db  0x0e ; '.'
00000000000188f4         db  0x08 ; '.'
00000000000188f5         db  0x41 ; 'A'
00000000000188f6         db  0x0b ; '.'
00000000000188f7         db  0x00 ; '.'
00000000000188f8         dd         0x0000002c                                  ; Length of the record
00000000000188fc         dd         0x00000fec                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000018900         db         0xd0, 0xef, 0xfe, 0xff                      ; begin 0x78d0
0000000000018904         db         0x6e, 3 dup (0x00)                          ; length 0x6e (end at 0x793e)
0000000000018908         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018909         db  0x42 ; 'B'
000000000001890a         db  0x0e ; '.'
000000000001890b         db  0x10 ; '.'
000000000001890c         db  0x8c ; '.'
000000000001890d         db  0x02 ; '.'
000000000001890e         db  0x49 ; 'I'
000000000001890f         db  0x0e ; '.'
0000000000018910         db  0x18 ; '.'
0000000000018911         db  0x86 ; '.'
0000000000018912         db  0x03 ; '.'
0000000000018913         db  0x49 ; 'I'
0000000000018914         db  0x0e ; '.'
0000000000018915         db  0x20 ; ' '
0000000000018916         db  0x83 ; '.'
0000000000018917         db  0x04 ; '.'
0000000000018918         db  0x02 ; '.'
0000000000018919         db  0x4a ; 'J'
000000000001891a         db  0x0a ; '.'
000000000001891b         db  0x0e ; '.'
000000000001891c         db  0x18 ; '.'
000000000001891d         db  0x41 ; 'A'
000000000001891e         db  0x0e ; '.'
000000000001891f         db  0x10 ; '.'
0000000000018920         db  0x42 ; 'B'
0000000000018921         db  0x0e ; '.'
0000000000018922         db  0x08 ; '.'
0000000000018923         db  0x47 ; 'G'
0000000000018924         db  0x0b ; '.'
0000000000018925         db  0x00 ; '.'
0000000000018926         db  0x00 ; '.'
0000000000018927         db  0x00 ; '.'
0000000000018928         dd         0x00000048                                  ; Length of the record
000000000001892c         dd         0x0000101c                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000018930         db         0x10, 0xf0, 0xfe, 0xff                      ; begin 0x7940
0000000000018934         db         0xc3, 0x01, 2 dup (0x00)                    ; length 0x1c3 (end at 0x7b03)
0000000000018938         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018939         db  0x42 ; 'B'
000000000001893a         db  0x0e ; '.'
000000000001893b         db  0x10 ; '.'
000000000001893c         db  0x8f ; '.'
000000000001893d         db  0x02 ; '.'
000000000001893e         db  0x42 ; 'B'
000000000001893f         db  0x0e ; '.'
0000000000018940         db  0x18 ; '.'
0000000000018941         db  0x8e ; '.'
0000000000018942         db  0x03 ; '.'
0000000000018943         db  0x42 ; 'B'
0000000000018944         db  0x0e ; '.'
0000000000018945         db  0x20 ; ' '
0000000000018946         db  0x8d ; '.'
0000000000018947         db  0x04 ; '.'
0000000000018948         db  0x42 ; 'B'
0000000000018949         db  0x0e ; '.'
000000000001894a         db  0x28 ; '('
000000000001894b         db  0x8c ; '.'
000000000001894c         db  0x05 ; '.'
000000000001894d         db  0x41 ; 'A'
000000000001894e         db  0x0e ; '.'
000000000001894f         db  0x30 ; '0'
0000000000018950         db  0x86 ; '.'
0000000000018951         db  0x06 ; '.'
0000000000018952         db  0x41 ; 'A'
0000000000018953         db  0x0e ; '.'
0000000000018954         db  0x38 ; '8'
0000000000018955         db  0x83 ; '.'
0000000000018956         db  0x07 ; '.'
0000000000018957         db  0x47 ; 'G'
0000000000018958         db  0x0e ; '.'
0000000000018959         db  0xa0 ; '.'
000000000001895a         db  0x01 ; '.'
000000000001895b         db  0x02 ; '.'
000000000001895c         db  0xd3 ; '.'
000000000001895d         db  0x0a ; '.'
000000000001895e         db  0x0e ; '.'
000000000001895f         db  0x38 ; '8'
0000000000018960         db  0x41 ; 'A'
0000000000018961         db  0x0e ; '.'
0000000000018962         db  0x30 ; '0'
0000000000018963         db  0x41 ; 'A'
0000000000018964         db  0x0e ; '.'
0000000000018965         db  0x28 ; '('
0000000000018966         db  0x42 ; 'B'
0000000000018967         db  0x0e ; '.'
0000000000018968         db  0x20 ; ' '
0000000000018969         db  0x42 ; 'B'
000000000001896a         db  0x0e ; '.'
000000000001896b         db  0x18 ; '.'
000000000001896c         db  0x42 ; 'B'
000000000001896d         db  0x0e ; '.'
000000000001896e         db  0x10 ; '.'
000000000001896f         db  0x42 ; 'B'
0000000000018970         db  0x0e ; '.'
0000000000018971         db  0x08 ; '.'
0000000000018972         db  0x42 ; 'B'
0000000000018973         db  0x0b ; '.'
0000000000018974         dd         0x00000048                                  ; Length of the record
0000000000018978         dd         0x00001068                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
000000000001897c         db         0x94, 0xf1, 0xfe, 0xff                      ; begin 0x7b10
0000000000018980         db         0x15, 0x06, 2 dup (0x00)                    ; length 0x615 (end at 0x8125)
0000000000018984         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018985         db  0x42 ; 'B'
0000000000018986         db  0x0e ; '.'
0000000000018987         db  0x10 ; '.'
0000000000018988         db  0x8f ; '.'
0000000000018989         db  0x02 ; '.'
000000000001898a         db  0x42 ; 'B'
000000000001898b         db  0x0e ; '.'
000000000001898c         db  0x18 ; '.'
000000000001898d         db  0x8e ; '.'
000000000001898e         db  0x03 ; '.'
000000000001898f         db  0x45 ; 'E'
0000000000018990         db  0x0e ; '.'
0000000000018991         db  0x20 ; ' '
0000000000018992         db  0x8d ; '.'
0000000000018993         db  0x04 ; '.'
0000000000018994         db  0x42 ; 'B'
0000000000018995         db  0x0e ; '.'
0000000000018996         db  0x28 ; '('
0000000000018997         db  0x8c ; '.'
0000000000018998         db  0x05 ; '.'
0000000000018999         db  0x41 ; 'A'
000000000001899a         db  0x0e ; '.'
000000000001899b         db  0x30 ; '0'
000000000001899c         db  0x86 ; '.'
000000000001899d         db  0x06 ; '.'
000000000001899e         db  0x41 ; 'A'
000000000001899f         db  0x0e ; '.'
00000000000189a0         db  0x38 ; '8'
00000000000189a1         db  0x83 ; '.'
00000000000189a2         db  0x07 ; '.'
00000000000189a3         db  0x47 ; 'G'
00000000000189a4         db  0x0e ; '.'
00000000000189a5         db  0xe0 ; '.'
00000000000189a6         db  0x01 ; '.'
00000000000189a7         db  0x02 ; '.'
00000000000189a8         db  0x69 ; 'i'
00000000000189a9         db  0x0a ; '.'
00000000000189aa         db  0x0e ; '.'
00000000000189ab         db  0x38 ; '8'
00000000000189ac         db  0x41 ; 'A'
00000000000189ad         db  0x0e ; '.'
00000000000189ae         db  0x30 ; '0'
00000000000189af         db  0x41 ; 'A'
00000000000189b0         db  0x0e ; '.'
00000000000189b1         db  0x28 ; '('
00000000000189b2         db  0x42 ; 'B'
00000000000189b3         db  0x0e ; '.'
00000000000189b4         db  0x20 ; ' '
00000000000189b5         db  0x42 ; 'B'
00000000000189b6         db  0x0e ; '.'
00000000000189b7         db  0x18 ; '.'
00000000000189b8         db  0x42 ; 'B'
00000000000189b9         db  0x0e ; '.'
00000000000189ba         db  0x10 ; '.'
00000000000189bb         db  0x42 ; 'B'
00000000000189bc         db  0x0e ; '.'
00000000000189bd         db  0x08 ; '.'
00000000000189be         db  0x49 ; 'I'
00000000000189bf         db  0x0b ; '.'
00000000000189c0         dd         0x00000058                                  ; Length of the record
00000000000189c4         dd         0x000010b4                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
00000000000189c8         db         0x68, 0xf7, 0xfe, 0xff                      ; begin 0x8130
00000000000189cc         db         0x4e, 0x01, 2 dup (0x00)                    ; length 0x14e (end at 0x827e)
00000000000189d0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000189d1         db  0x41 ; 'A'
00000000000189d2         db  0x0e ; '.'
00000000000189d3         db  0x10 ; '.'
00000000000189d4         db  0x86 ; '.'
00000000000189d5         db  0x02 ; '.'
00000000000189d6         db  0x41 ; 'A'
00000000000189d7         db  0x0e ; '.'
00000000000189d8         db  0x18 ; '.'
00000000000189d9         db  0x83 ; '.'
00000000000189da         db  0x03 ; '.'
00000000000189db         db  0x4e ; 'N'
00000000000189dc         db  0x0e ; '.'
00000000000189dd         db  0x20 ; ' '
00000000000189de         db  0x02 ; '.'
00000000000189df         db  0x83 ; '.'
00000000000189e0         db  0x0a ; '.'
00000000000189e1         db  0x0e ; '.'
00000000000189e2         db  0x18 ; '.'
00000000000189e3         db  0x41 ; 'A'
00000000000189e4         db  0x0e ; '.'
00000000000189e5         db  0x10 ; '.'
00000000000189e6         db  0x41 ; 'A'
00000000000189e7         db  0x0e ; '.'
00000000000189e8         db  0x08 ; '.'
00000000000189e9         db  0x4b ; 'K'
00000000000189ea         db  0x0b ; '.'
00000000000189eb         db  0x02 ; '.'
00000000000189ec         db  0x61 ; 'a'
00000000000189ed         db  0x0a ; '.'
00000000000189ee         db  0x0e ; '.'
00000000000189ef         db  0x18 ; '.'
00000000000189f0         db  0x43 ; 'C'
00000000000189f1         db  0x0e ; '.'
00000000000189f2         db  0x10 ; '.'
00000000000189f3         db  0x41 ; 'A'
00000000000189f4         db  0x0e ; '.'
00000000000189f5         db  0x08 ; '.'
00000000000189f6         db  0x4b ; 'K'
00000000000189f7         db  0x0b ; '.'
00000000000189f8         db  0x4c ; 'L'
00000000000189f9         db  0x0a ; '.'
00000000000189fa         db  0x0e ; '.'
00000000000189fb         db  0x18 ; '.'
00000000000189fc         db  0x43 ; 'C'
00000000000189fd         db  0x0e ; '.'
00000000000189fe         db  0x10 ; '.'
00000000000189ff         db  0x41 ; 'A'
0000000000018a00         db  0x0e ; '.'
0000000000018a01         db  0x08 ; '.'
0000000000018a02         db  0x48 ; 'H'
0000000000018a03         db  0x0b ; '.'
0000000000018a04         db  0x49 ; 'I'
0000000000018a05         db  0x0a ; '.'
0000000000018a06         db  0x0e ; '.'
0000000000018a07         db  0x18 ; '.'
0000000000018a08         db  0x43 ; 'C'
0000000000018a09         db  0x0e ; '.'
0000000000018a0a         db  0x10 ; '.'
0000000000018a0b         db  0x41 ; 'A'
0000000000018a0c         db  0x0e ; '.'
0000000000018a0d         db  0x08 ; '.'
0000000000018a0e         db  0x4b ; 'K'
0000000000018a0f         db  0x0b ; '.'
0000000000018a10         db  0x49 ; 'I'
0000000000018a11         db  0x0e ; '.'
0000000000018a12         db  0x18 ; '.'
0000000000018a13         db  0x43 ; 'C'
0000000000018a14         db  0x0e ; '.'
0000000000018a15         db  0x10 ; '.'
0000000000018a16         db  0x41 ; 'A'
0000000000018a17         db  0x0e ; '.'
0000000000018a18         db  0x08 ; '.'
0000000000018a19         db  0x00 ; '.'
0000000000018a1a         db  0x00 ; '.'
0000000000018a1b         db  0x00 ; '.'
0000000000018a1c         dd         0x00000028                                  ; Length of the record
0000000000018a20         dd         0x00001110                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000018a24         db         0x5c, 0xf8, 0xfe, 0xff                      ; begin 0x8280
0000000000018a28         db         0x86, 3 dup (0x00)                          ; length 0x86 (end at 0x8306)
0000000000018a2c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018a2d         db  0x42 ; 'B'
0000000000018a2e         db  0x0e ; '.'
0000000000018a2f         db  0x10 ; '.'
0000000000018a30         db  0x8c ; '.'
0000000000018a31         db  0x02 ; '.'
0000000000018a32         db  0x41 ; 'A'
0000000000018a33         db  0x0e ; '.'
0000000000018a34         db  0x18 ; '.'
0000000000018a35         db  0x86 ; '.'
0000000000018a36         db  0x03 ; '.'
0000000000018a37         db  0x44 ; 'D'
0000000000018a38         db  0x0e ; '.'
0000000000018a39         db  0x20 ; ' '
0000000000018a3a         db  0x83 ; '.'
0000000000018a3b         db  0x04 ; '.'
0000000000018a3c         db  0x70 ; 'p'
0000000000018a3d         db  0x0a ; '.'
0000000000018a3e         db  0x0e ; '.'
0000000000018a3f         db  0x18 ; '.'
0000000000018a40         db  0x41 ; 'A'
0000000000018a41         db  0x0e ; '.'
0000000000018a42         db  0x10 ; '.'
0000000000018a43         db  0x42 ; 'B'
0000000000018a44         db  0x0e ; '.'
0000000000018a45         db  0x08 ; '.'
0000000000018a46         db  0x46 ; 'F'
0000000000018a47         db  0x0b ; '.'
0000000000018a48         dd         0x00000018                                  ; Length of the record
0000000000018a4c         dd         0x0000113c                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000018a50         db         0xc0, 0xf8, 0xfe, 0xff                      ; begin 0x8310
0000000000018a54         db         0x30, 3 dup (0x00)                          ; length 0x30 (end at 0x8340)
0000000000018a58         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018a59         db  0x41 ; 'A'
0000000000018a5a         db  0x0e ; '.'
0000000000018a5b         db  0x10 ; '.'
0000000000018a5c         db  0x83 ; '.'
0000000000018a5d         db  0x02 ; '.'
0000000000018a5e         db  0x6a ; 'j'
0000000000018a5f         db  0x0e ; '.'
0000000000018a60         db  0x08 ; '.'
0000000000018a61         db  0x00 ; '.'
0000000000018a62         db  0x00 ; '.'
0000000000018a63         db  0x00 ; '.'
0000000000018a64         dd         0x00000010                                  ; Length of the record
0000000000018a68         dd         0x00001158                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000018a6c         db         0xd4, 0xf8, 0xfe, 0xff                      ; begin 0x8340
0000000000018a70         db         0x25, 3 dup (0x00)                          ; length 0x25 (end at 0x8365)
0000000000018a74         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018a75         align      8
0000000000018a78         dd         0x00000014                                  ; Length of the record
0000000000018a7c         dd         0x0000116c                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000018a80         db         0xf0, 0xf8, 0xfe, 0xff                      ; begin 0x8370
0000000000018a84         db         0x14, 3 dup (0x00)                          ; length 0x14 (end at 0x8384)
0000000000018a88         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018a89         db  0x48 ; 'H'
0000000000018a8a         db  0x0e ; '.'
0000000000018a8b         db  0x10 ; '.'
0000000000018a8c         db  0x4b ; 'K'
0000000000018a8d         db  0x0e ; '.'
0000000000018a8e         db  0x08 ; '.'
0000000000018a8f         db  0x00 ; '.'
0000000000018a90         dd         0x00000048                                  ; Length of the record
0000000000018a94         dd         0x00001184                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000018a98         db         2 dup (0xf8), 0xfe, 0xff                    ; begin 0x8390
0000000000018a9c         db         0xce, 0x01, 2 dup (0x00)                    ; length 0x1ce (end at 0x855e)
0000000000018aa0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018aa1         db  0x42 ; 'B'
0000000000018aa2         db  0x0e ; '.'
0000000000018aa3         db  0x10 ; '.'
0000000000018aa4         db  0x8f ; '.'
0000000000018aa5         db  0x02 ; '.'
0000000000018aa6         db  0x42 ; 'B'
0000000000018aa7         db  0x0e ; '.'
0000000000018aa8         db  0x18 ; '.'
0000000000018aa9         db  0x8e ; '.'
0000000000018aaa         db  0x03 ; '.'
0000000000018aab         db  0x45 ; 'E'
0000000000018aac         db  0x0e ; '.'
0000000000018aad         db  0x20 ; ' '
0000000000018aae         db  0x8d ; '.'
0000000000018aaf         db  0x04 ; '.'
0000000000018ab0         db  0x42 ; 'B'
0000000000018ab1         db  0x0e ; '.'
0000000000018ab2         db  0x28 ; '('
0000000000018ab3         db  0x8c ; '.'
0000000000018ab4         db  0x05 ; '.'
0000000000018ab5         db  0x41 ; 'A'
0000000000018ab6         db  0x0e ; '.'
0000000000018ab7         db  0x30 ; '0'
0000000000018ab8         db  0x86 ; '.'
0000000000018ab9         db  0x06 ; '.'
0000000000018aba         db  0x41 ; 'A'
0000000000018abb         db  0x0e ; '.'
0000000000018abc         db  0x38 ; '8'
0000000000018abd         db  0x83 ; '.'
0000000000018abe         db  0x07 ; '.'
0000000000018abf         db  0x47 ; 'G'
0000000000018ac0         db  0x0e ; '.'
0000000000018ac1         db  0x50 ; 'P'
0000000000018ac2         db  0x02 ; '.'
0000000000018ac3         db  0xac ; '.'
0000000000018ac4         db  0x0a ; '.'
0000000000018ac5         db  0x0e ; '.'
0000000000018ac6         db  0x38 ; '8'
0000000000018ac7         db  0x41 ; 'A'
0000000000018ac8         db  0x0e ; '.'
0000000000018ac9         db  0x30 ; '0'
0000000000018aca         db  0x41 ; 'A'
0000000000018acb         db  0x0e ; '.'
0000000000018acc         db  0x28 ; '('
0000000000018acd         db  0x42 ; 'B'
0000000000018ace         db  0x0e ; '.'
0000000000018acf         db  0x20 ; ' '
0000000000018ad0         db  0x42 ; 'B'
0000000000018ad1         db  0x0e ; '.'
0000000000018ad2         db  0x18 ; '.'
0000000000018ad3         db  0x42 ; 'B'
0000000000018ad4         db  0x0e ; '.'
0000000000018ad5         db  0x10 ; '.'
0000000000018ad6         db  0x42 ; 'B'
0000000000018ad7         db  0x0e ; '.'
0000000000018ad8         db  0x08 ; '.'
0000000000018ad9         db  0x46 ; 'F'
0000000000018ada         db  0x0b ; '.'
0000000000018adb         db  0x00 ; '.'
0000000000018adc         dd         0x00000034                                  ; Length of the record
0000000000018ae0         dd         0x000011d0                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000018ae4         db         0x7c, 0xfa, 0xfe, 0xff                      ; begin 0x8560
0000000000018ae8         db         0x9f, 3 dup (0x00)                          ; length 0x9f (end at 0x85ff)
0000000000018aec         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018aed         db  0x42 ; 'B'
0000000000018aee         db  0x0e ; '.'
0000000000018aef         db  0x10 ; '.'
0000000000018af0         db  0x8d ; '.'
0000000000018af1         db  0x02 ; '.'
0000000000018af2         db  0x42 ; 'B'
0000000000018af3         db  0x0e ; '.'
0000000000018af4         db  0x18 ; '.'
0000000000018af5         db  0x8c ; '.'
0000000000018af6         db  0x03 ; '.'
0000000000018af7         db  0x44 ; 'D'
0000000000018af8         db  0x0e ; '.'
0000000000018af9         db  0x20 ; ' '
0000000000018afa         db  0x86 ; '.'
0000000000018afb         db  0x04 ; '.'
0000000000018afc         db  0x41 ; 'A'
0000000000018afd         db  0x0e ; '.'
0000000000018afe         db  0x28 ; '('
0000000000018aff         db  0x83 ; '.'
0000000000018b00         db  0x05 ; '.'
0000000000018b01         db  0x51 ; 'Q'
0000000000018b02         db  0x0e ; '.'
0000000000018b03         db  0x30 ; '0'
0000000000018b04         db  0x02 ; '.'
0000000000018b05         db  0x7e ; '~'
0000000000018b06         db  0x0e ; '.'
0000000000018b07         db  0x28 ; '('
0000000000018b08         db  0x41 ; 'A'
0000000000018b09         db  0x0e ; '.'
0000000000018b0a         db  0x20 ; ' '
0000000000018b0b         db  0x41 ; 'A'
0000000000018b0c         db  0x0e ; '.'
0000000000018b0d         db  0x18 ; '.'
0000000000018b0e         db  0x42 ; 'B'
0000000000018b0f         db  0x0e ; '.'
0000000000018b10         db  0x10 ; '.'
0000000000018b11         db  0x42 ; 'B'
0000000000018b12         db  0x0e ; '.'
0000000000018b13         db  0x08 ; '.'
0000000000018b14         dd         0x00000048                                  ; Length of the record
0000000000018b18         dd         0x00001208                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000018b1c         db         0xe4, 0xfa, 0xfe, 0xff                      ; begin 0x8600
0000000000018b20         db         0x75, 0x02, 2 dup (0x00)                    ; length 0x275 (end at 0x8875)
0000000000018b24         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018b25         db  0x42 ; 'B'
0000000000018b26         db  0x0e ; '.'
0000000000018b27         db  0x10 ; '.'
0000000000018b28         db  0x8f ; '.'
0000000000018b29         db  0x02 ; '.'
0000000000018b2a         db  0x42 ; 'B'
0000000000018b2b         db  0x0e ; '.'
0000000000018b2c         db  0x18 ; '.'
0000000000018b2d         db  0x8e ; '.'
0000000000018b2e         db  0x03 ; '.'
0000000000018b2f         db  0x45 ; 'E'
0000000000018b30         db  0x0e ; '.'
0000000000018b31         db  0x20 ; ' '
0000000000018b32         db  0x8d ; '.'
0000000000018b33         db  0x04 ; '.'
0000000000018b34         db  0x42 ; 'B'
0000000000018b35         db  0x0e ; '.'
0000000000018b36         db  0x28 ; '('
0000000000018b37         db  0x8c ; '.'
0000000000018b38         db  0x05 ; '.'
0000000000018b39         db  0x44 ; 'D'
0000000000018b3a         db  0x0e ; '.'
0000000000018b3b         db  0x30 ; '0'
0000000000018b3c         db  0x86 ; '.'
0000000000018b3d         db  0x06 ; '.'
0000000000018b3e         db  0x41 ; 'A'
0000000000018b3f         db  0x0e ; '.'
0000000000018b40         db  0x38 ; '8'
0000000000018b41         db  0x83 ; '.'
0000000000018b42         db  0x07 ; '.'
0000000000018b43         db  0x4a ; 'J'
0000000000018b44         db  0x0e ; '.'
0000000000018b45         db  0x50 ; 'P'
0000000000018b46         db  0x03 ; '.'
0000000000018b47         db  0x1a ; '.'
0000000000018b48         db  0x01 ; '.'
0000000000018b49         db  0x0a ; '.'
0000000000018b4a         db  0x0e ; '.'
0000000000018b4b         db  0x38 ; '8'
0000000000018b4c         db  0x41 ; 'A'
0000000000018b4d         db  0x0e ; '.'
0000000000018b4e         db  0x30 ; '0'
0000000000018b4f         db  0x41 ; 'A'
0000000000018b50         db  0x0e ; '.'
0000000000018b51         db  0x28 ; '('
0000000000018b52         db  0x42 ; 'B'
0000000000018b53         db  0x0e ; '.'
0000000000018b54         db  0x20 ; ' '
0000000000018b55         db  0x42 ; 'B'
0000000000018b56         db  0x0e ; '.'
0000000000018b57         db  0x18 ; '.'
0000000000018b58         db  0x42 ; 'B'
0000000000018b59         db  0x0e ; '.'
0000000000018b5a         db  0x10 ; '.'
0000000000018b5b         db  0x42 ; 'B'
0000000000018b5c         db  0x0e ; '.'
0000000000018b5d         db  0x08 ; '.'
0000000000018b5e         db  0x42 ; 'B'
0000000000018b5f         db  0x0b ; '.'
0000000000018b60         dd         0x00000018                                  ; Length of the record
0000000000018b64         dd         0x00001254                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000018b68         db         0x18, 0xfd, 0xfe, 0xff                      ; begin 0x8880
0000000000018b6c         db         0x59, 3 dup (0x00)                          ; length 0x59 (end at 0x88d9)
0000000000018b70         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018b71         db  0x41 ; 'A'
0000000000018b72         db  0x0e ; '.'
0000000000018b73         db  0x10 ; '.'
0000000000018b74         db  0x83 ; '.'
0000000000018b75         db  0x02 ; '.'
0000000000018b76         db  0x02 ; '.'
0000000000018b77         db  0x53 ; 'S'
0000000000018b78         db  0x0e ; '.'
0000000000018b79         db  0x08 ; '.'
0000000000018b7a         db  0x00 ; '.'
0000000000018b7b         db  0x00 ; '.'
0000000000018b7c         dd         0x0000001c                                  ; Length of the record
0000000000018b80         dd         0x00001270                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000018b84         db         0x5c, 0xfd, 0xfe, 0xff                      ; begin 0x88e0
0000000000018b88         db         0x32, 3 dup (0x00)                          ; length 0x32 (end at 0x8912)
0000000000018b8c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018b8d         db  0x41 ; 'A'
0000000000018b8e         db  0x0e ; '.'
0000000000018b8f         db  0x10 ; '.'
0000000000018b90         db  0x83 ; '.'
0000000000018b91         db  0x02 ; '.'
0000000000018b92         db  0x5f ; '_'
0000000000018b93         db  0x0a ; '.'
0000000000018b94         db  0x0e ; '.'
0000000000018b95         db  0x08 ; '.'
0000000000018b96         db  0x48 ; 'H'
0000000000018b97         db  0x0b ; '.'
0000000000018b98         db  0x45 ; 'E'
0000000000018b99         db  0x0e ; '.'
0000000000018b9a         db  0x08 ; '.'
0000000000018b9b         db  0x00 ; '.'
0000000000018b9c         dd         0x00000038                                  ; Length of the record
0000000000018ba0         dd         0x00001290                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000018ba4         db         0x7c, 0xfd, 0xfe, 0xff                      ; begin 0x8920
0000000000018ba8         db         0x5f, 0x01, 2 dup (0x00)                    ; length 0x15f (end at 0x8a7f)
0000000000018bac         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018bad         db  0x42 ; 'B'
0000000000018bae         db  0x0e ; '.'
0000000000018baf         db  0x10 ; '.'
0000000000018bb0         db  0x8e ; '.'
0000000000018bb1         db  0x02 ; '.'
0000000000018bb2         db  0x42 ; 'B'
0000000000018bb3         db  0x0e ; '.'
0000000000018bb4         db  0x18 ; '.'
0000000000018bb5         db  0x8d ; '.'
0000000000018bb6         db  0x03 ; '.'
0000000000018bb7         db  0x42 ; 'B'
0000000000018bb8         db  0x0e ; '.'
0000000000018bb9         db  0x20 ; ' '
0000000000018bba         db  0x8c ; '.'
0000000000018bbb         db  0x04 ; '.'
0000000000018bbc         db  0x44 ; 'D'
0000000000018bbd         db  0x0e ; '.'
0000000000018bbe         db  0x28 ; '('
0000000000018bbf         db  0x86 ; '.'
0000000000018bc0         db  0x05 ; '.'
0000000000018bc1         db  0x41 ; 'A'
0000000000018bc2         db  0x0e ; '.'
0000000000018bc3         db  0x30 ; '0'
0000000000018bc4         db  0x83 ; '.'
0000000000018bc5         db  0x06 ; '.'
0000000000018bc6         db  0x03 ; '.'
0000000000018bc7         db  0x45 ; 'E'
0000000000018bc8         db  0x01 ; '.'
0000000000018bc9         db  0x0e ; '.'
0000000000018bca         db  0x28 ; '('
0000000000018bcb         db  0x44 ; 'D'
0000000000018bcc         db  0x0e ; '.'
0000000000018bcd         db  0x20 ; ' '
0000000000018bce         db  0x42 ; 'B'
0000000000018bcf         db  0x0e ; '.'
0000000000018bd0         db  0x18 ; '.'
0000000000018bd1         db  0x42 ; 'B'
0000000000018bd2         db  0x0e ; '.'
0000000000018bd3         db  0x10 ; '.'
0000000000018bd4         db  0x42 ; 'B'
0000000000018bd5         db  0x0e ; '.'
0000000000018bd6         db  0x08 ; '.'
0000000000018bd7         db  0x00 ; '.'
0000000000018bd8         dd         0x00000038                                  ; Length of the record
0000000000018bdc         dd         0x000012cc                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000018be0         db         0xa0, 2 dup (0xfe), 0xff                    ; begin 0x8a80
0000000000018be4         db         0xb8, 3 dup (0x00)                          ; length 0xb8 (end at 0x8b38)
0000000000018be8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018be9         db  0x42 ; 'B'
0000000000018bea         db  0x0e ; '.'
0000000000018beb         db  0x10 ; '.'
0000000000018bec         db  0x8e ; '.'
0000000000018bed         db  0x02 ; '.'
0000000000018bee         db  0x42 ; 'B'
0000000000018bef         db  0x0e ; '.'
0000000000018bf0         db  0x18 ; '.'
0000000000018bf1         db  0x8d ; '.'
0000000000018bf2         db  0x03 ; '.'
0000000000018bf3         db  0x45 ; 'E'
0000000000018bf4         db  0x0e ; '.'
0000000000018bf5         db  0x20 ; ' '
0000000000018bf6         db  0x8c ; '.'
0000000000018bf7         db  0x04 ; '.'
0000000000018bf8         db  0x41 ; 'A'
0000000000018bf9         db  0x0e ; '.'
0000000000018bfa         db  0x28 ; '('
0000000000018bfb         db  0x86 ; '.'
0000000000018bfc         db  0x05 ; '.'
0000000000018bfd         db  0x41 ; 'A'
0000000000018bfe         db  0x0e ; '.'
0000000000018bff         db  0x30 ; '0'
0000000000018c00         db  0x83 ; '.'
0000000000018c01         db  0x06 ; '.'
0000000000018c02         db  0x02 ; '.'
0000000000018c03         db  0x8f ; '.'
0000000000018c04         db  0x0e ; '.'
0000000000018c05         db  0x28 ; '('
0000000000018c06         db  0x57 ; 'W'
0000000000018c07         db  0x0e ; '.'
0000000000018c08         db  0x20 ; ' '
0000000000018c09         db  0x42 ; 'B'
0000000000018c0a         db  0x0e ; '.'
0000000000018c0b         db  0x18 ; '.'
0000000000018c0c         db  0x42 ; 'B'
0000000000018c0d         db  0x0e ; '.'
0000000000018c0e         db  0x10 ; '.'
0000000000018c0f         db  0x42 ; 'B'
0000000000018c10         db  0x0e ; '.'
0000000000018c11         db  0x08 ; '.'
0000000000018c12         db  0x00 ; '.'
0000000000018c13         db  0x00 ; '.'
0000000000018c14         dd         0x00000010                                  ; Length of the record
0000000000018c18         dd         0x00001308                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000018c1c         db         0x24, 0xff, 0xfe, 0xff                      ; begin 0x8b40
0000000000018c20         db         0x4f, 3 dup (0x00)                          ; length 0x4f (end at 0x8b8f)
0000000000018c24         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018c25         align      8
0000000000018c28         dd         0x00000010                                  ; Length of the record
0000000000018c2c         dd         0x0000131c                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000018c30         db         0x60, 0xff, 0xfe, 0xff                      ; begin 0x8b90
0000000000018c34         db         0x53, 3 dup (0x00)                          ; length 0x53 (end at 0x8be3)
0000000000018c38         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018c39         align      4
0000000000018c3c         dd         0x00000010                                  ; Length of the record
0000000000018c40         dd         0x00001330                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000018c44         db         0xac, 0xff, 0xfe, 0xff                      ; begin 0x8bf0
0000000000018c48         db         0x75, 3 dup (0x00)                          ; length 0x75 (end at 0x8c65)
0000000000018c4c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018c4d         align      16
0000000000018c50         dd         0x00000060                                  ; Length of the record
0000000000018c54         dd         0x00001344                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000018c58         db         0x18, 0x00, 2 dup (0xff)                    ; begin 0x8c70
0000000000018c5c         db         0xf5, 3 dup (0x00)                          ; length 0xf5 (end at 0x8d65)
0000000000018c60         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018c61         db  0x42 ; 'B'
0000000000018c62         db  0x0e ; '.'
0000000000018c63         db  0x10 ; '.'
0000000000018c64         db  0x8f ; '.'
0000000000018c65         db  0x02 ; '.'
0000000000018c66         db  0x42 ; 'B'
0000000000018c67         db  0x0e ; '.'
0000000000018c68         db  0x18 ; '.'
0000000000018c69         db  0x8e ; '.'
0000000000018c6a         db  0x03 ; '.'
0000000000018c6b         db  0x46 ; 'F'
0000000000018c6c         db  0x0e ; '.'
0000000000018c6d         db  0x20 ; ' '
0000000000018c6e         db  0x8d ; '.'
0000000000018c6f         db  0x04 ; '.'
0000000000018c70         db  0x42 ; 'B'
0000000000018c71         db  0x0e ; '.'
0000000000018c72         db  0x28 ; '('
0000000000018c73         db  0x8c ; '.'
0000000000018c74         db  0x05 ; '.'
0000000000018c75         db  0x44 ; 'D'
0000000000018c76         db  0x0e ; '.'
0000000000018c77         db  0x30 ; '0'
0000000000018c78         db  0x86 ; '.'
0000000000018c79         db  0x06 ; '.'
0000000000018c7a         db  0x41 ; 'A'
0000000000018c7b         db  0x0e ; '.'
0000000000018c7c         db  0x38 ; '8'
0000000000018c7d         db  0x83 ; '.'
0000000000018c7e         db  0x07 ; '.'
0000000000018c7f         db  0x50 ; 'P'
0000000000018c80         db  0x0e ; '.'
0000000000018c81         db  0x40 ; '@'
0000000000018c82         db  0x02 ; '.'
0000000000018c83         db  0x85 ; '.'
0000000000018c84         db  0x0a ; '.'
0000000000018c85         db  0x0e ; '.'
0000000000018c86         db  0x38 ; '8'
0000000000018c87         db  0x41 ; 'A'
0000000000018c88         db  0x0e ; '.'
0000000000018c89         db  0x30 ; '0'
0000000000018c8a         db  0x41 ; 'A'
0000000000018c8b         db  0x0e ; '.'
0000000000018c8c         db  0x28 ; '('
0000000000018c8d         db  0x42 ; 'B'
0000000000018c8e         db  0x0e ; '.'
0000000000018c8f         db  0x20 ; ' '
0000000000018c90         db  0x42 ; 'B'
0000000000018c91         db  0x0e ; '.'
0000000000018c92         db  0x18 ; '.'
0000000000018c93         db  0x42 ; 'B'
0000000000018c94         db  0x0e ; '.'
0000000000018c95         db  0x10 ; '.'
0000000000018c96         db  0x42 ; 'B'
0000000000018c97         db  0x0e ; '.'
0000000000018c98         db  0x08 ; '.'
0000000000018c99         db  0x48 ; 'H'
0000000000018c9a         db  0x0b ; '.'
0000000000018c9b         db  0x44 ; 'D'
0000000000018c9c         db  0x0a ; '.'
0000000000018c9d         db  0x0e ; '.'
0000000000018c9e         db  0x38 ; '8'
0000000000018c9f         db  0x46 ; 'F'
0000000000018ca0         db  0x0e ; '.'
0000000000018ca1         db  0x30 ; '0'
0000000000018ca2         db  0x41 ; 'A'
0000000000018ca3         db  0x0e ; '.'
0000000000018ca4         db  0x28 ; '('
0000000000018ca5         db  0x42 ; 'B'
0000000000018ca6         db  0x0e ; '.'
0000000000018ca7         db  0x20 ; ' '
0000000000018ca8         db  0x42 ; 'B'
0000000000018ca9         db  0x0e ; '.'
0000000000018caa         db  0x18 ; '.'
0000000000018cab         db  0x42 ; 'B'
0000000000018cac         db  0x0e ; '.'
0000000000018cad         db  0x10 ; '.'
0000000000018cae         db  0x42 ; 'B'
0000000000018caf         db  0x0e ; '.'
0000000000018cb0         db  0x08 ; '.'
0000000000018cb1         db  0x45 ; 'E'
0000000000018cb2         db  0x0b ; '.'
0000000000018cb3         db  0x00 ; '.'
0000000000018cb4         dd         0x00000010                                  ; Length of the record
0000000000018cb8         dd         0x000013a8                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000018cbc         db         0xb4, 0x00, 2 dup (0xff)                    ; begin 0x8d70
0000000000018cc0         db         0x34, 3 dup (0x00)                          ; length 0x34 (end at 0x8da4)
0000000000018cc4         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018cc5         align      8
0000000000018cc8         dd         0x00000010                                  ; Length of the record
0000000000018ccc         dd         0x000013bc                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000018cd0         db         0xe0, 0x00, 2 dup (0xff)                    ; begin 0x8db0
0000000000018cd4         db         0x8b, 3 dup (0x00)                          ; length 0x8b (end at 0x8e3b)
0000000000018cd8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018cd9         align      4
0000000000018cdc         dd         0x00000010                                  ; Length of the record
0000000000018ce0         dd         0x000013d0                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000018ce4         db         0x5c, 0x01, 2 dup (0xff)                    ; begin 0x8e40
0000000000018ce8         db         0x57, 3 dup (0x00)                          ; length 0x57 (end at 0x8e97)
0000000000018cec         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018ced         align      16
0000000000018cf0         dd         0x0000004c                                  ; Length of the record
0000000000018cf4         dd         0x000013e4                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000018cf8         db         0xa8, 0x01, 2 dup (0xff)                    ; begin 0x8ea0
0000000000018cfc         db         0x69, 0x02, 2 dup (0x00)                    ; length 0x269 (end at 0x9109)
0000000000018d00         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018d01         db  0x42 ; 'B'
0000000000018d02         db  0x0e ; '.'
0000000000018d03         db  0x10 ; '.'
0000000000018d04         db  0x8f ; '.'
0000000000018d05         db  0x02 ; '.'
0000000000018d06         db  0x42 ; 'B'
0000000000018d07         db  0x0e ; '.'
0000000000018d08         db  0x18 ; '.'
0000000000018d09         db  0x8e ; '.'
0000000000018d0a         db  0x03 ; '.'
0000000000018d0b         db  0x42 ; 'B'
0000000000018d0c         db  0x0e ; '.'
0000000000018d0d         db  0x20 ; ' '
0000000000018d0e         db  0x8d ; '.'
0000000000018d0f         db  0x04 ; '.'
0000000000018d10         db  0x42 ; 'B'
0000000000018d11         db  0x0e ; '.'
0000000000018d12         db  0x28 ; '('
0000000000018d13         db  0x8c ; '.'
0000000000018d14         db  0x05 ; '.'
0000000000018d15         db  0x41 ; 'A'
0000000000018d16         db  0x0e ; '.'
0000000000018d17         db  0x30 ; '0'
0000000000018d18         db  0x86 ; '.'
0000000000018d19         db  0x06 ; '.'
0000000000018d1a         db  0x41 ; 'A'
0000000000018d1b         db  0x0e ; '.'
0000000000018d1c         db  0x38 ; '8'
0000000000018d1d         db  0x83 ; '.'
0000000000018d1e         db  0x07 ; '.'
0000000000018d1f         db  0x46 ; 'F'
0000000000018d20         db  0x0e ; '.'
0000000000018d21         db  0x80 ; '.'
0000000000018d22         db  0x01 ; '.'
0000000000018d23         db  0x03 ; '.'
0000000000018d24         db  0xd2 ; '.'
0000000000018d25         db  0x01 ; '.'
0000000000018d26         db  0x0a ; '.'
0000000000018d27         db  0x0e ; '.'
0000000000018d28         db  0x38 ; '8'
0000000000018d29         db  0x41 ; 'A'
0000000000018d2a         db  0x0e ; '.'
0000000000018d2b         db  0x30 ; '0'
0000000000018d2c         db  0x41 ; 'A'
0000000000018d2d         db  0x0e ; '.'
0000000000018d2e         db  0x28 ; '('
0000000000018d2f         db  0x42 ; 'B'
0000000000018d30         db  0x0e ; '.'
0000000000018d31         db  0x20 ; ' '
0000000000018d32         db  0x42 ; 'B'
0000000000018d33         db  0x0e ; '.'
0000000000018d34         db  0x18 ; '.'
0000000000018d35         db  0x42 ; 'B'
0000000000018d36         db  0x0e ; '.'
0000000000018d37         db  0x10 ; '.'
0000000000018d38         db  0x42 ; 'B'
0000000000018d39         db  0x0e ; '.'
0000000000018d3a         db  0x08 ; '.'
0000000000018d3b         db  0x44 ; 'D'
0000000000018d3c         db  0x0b ; '.'
0000000000018d3d         db  0x00 ; '.'
0000000000018d3e         db  0x00 ; '.'
0000000000018d3f         db  0x00 ; '.'
0000000000018d40         dd         0x00000034                                  ; Length of the record
0000000000018d44         dd         0x00001434                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000018d48         db         0xc8, 0x03, 2 dup (0xff)                    ; begin 0x9110
0000000000018d4c         db         0xde, 0x01, 2 dup (0x00)                    ; length 0x1de (end at 0x92ee)
0000000000018d50         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018d51         db  0x58 ; 'X'
0000000000018d52         db  0x0e ; '.'
0000000000018d53         db  0x10 ; '.'
0000000000018d54         db  0x8c ; '.'
0000000000018d55         db  0x02 ; '.'
0000000000018d56         db  0x41 ; 'A'
0000000000018d57         db  0x0e ; '.'
0000000000018d58         db  0x18 ; '.'
0000000000018d59         db  0x86 ; '.'
0000000000018d5a         db  0x03 ; '.'
0000000000018d5b         db  0x44 ; 'D'
0000000000018d5c         db  0x0e ; '.'
0000000000018d5d         db  0x20 ; ' '
0000000000018d5e         db  0x83 ; '.'
0000000000018d5f         db  0x04 ; '.'
0000000000018d60         db  0x02 ; '.'
0000000000018d61         db  0xd0 ; '.'
0000000000018d62         db  0x0e ; '.'
0000000000018d63         db  0x18 ; '.'
0000000000018d64         db  0x41 ; 'A'
0000000000018d65         db  0x0e ; '.'
0000000000018d66         db  0x10 ; '.'
0000000000018d67         db  0x42 ; 'B'
0000000000018d68         db  0x0e ; '.'
0000000000018d69         db  0x08 ; '.'
0000000000018d6a         db  0x48 ; 'H'
0000000000018d6b         db  0xc3 ; '.'
0000000000018d6c         db  0xc6 ; '.'
0000000000018d6d         db  0xcc ; '.'
0000000000018d6e         db  0x48 ; 'H'
0000000000018d6f         db  0x0e ; '.'
0000000000018d70         db  0x20 ; ' '
0000000000018d71         db  0x83 ; '.'
0000000000018d72         db  0x04 ; '.'
0000000000018d73         db  0x86 ; '.'
0000000000018d74         db  0x03 ; '.'
0000000000018d75         db  0x8c ; '.'
0000000000018d76         db  0x02 ; '.'
0000000000018d77         db  0x00 ; '.'
0000000000018d78         dd         0x0000004c                                  ; Length of the record
0000000000018d7c         dd         0x0000146c                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000018d80         db         0x70, 0x05, 2 dup (0xff)                    ; begin 0x92f0
0000000000018d84         db         0xaf, 0x02, 2 dup (0x00)                    ; length 0x2af (end at 0x959f)
0000000000018d88         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018d89         db  0x42 ; 'B'
0000000000018d8a         db  0x0e ; '.'
0000000000018d8b         db  0x10 ; '.'
0000000000018d8c         db  0x8f ; '.'
0000000000018d8d         db  0x02 ; '.'
0000000000018d8e         db  0x42 ; 'B'
0000000000018d8f         db  0x0e ; '.'
0000000000018d90         db  0x18 ; '.'
0000000000018d91         db  0x8e ; '.'
0000000000018d92         db  0x03 ; '.'
0000000000018d93         db  0x45 ; 'E'
0000000000018d94         db  0x0e ; '.'
0000000000018d95         db  0x20 ; ' '
0000000000018d96         db  0x8d ; '.'
0000000000018d97         db  0x04 ; '.'
0000000000018d98         db  0x42 ; 'B'
0000000000018d99         db  0x0e ; '.'
0000000000018d9a         db  0x28 ; '('
0000000000018d9b         db  0x8c ; '.'
0000000000018d9c         db  0x05 ; '.'
0000000000018d9d         db  0x41 ; 'A'
0000000000018d9e         db  0x0e ; '.'
0000000000018d9f         db  0x30 ; '0'
0000000000018da0         db  0x86 ; '.'
0000000000018da1         db  0x06 ; '.'
0000000000018da2         db  0x41 ; 'A'
0000000000018da3         db  0x0e ; '.'
0000000000018da4         db  0x38 ; '8'
0000000000018da5         db  0x83 ; '.'
0000000000018da6         db  0x07 ; '.'
0000000000018da7         db  0x4b ; 'K'
0000000000018da8         db  0x0e ; '.'
0000000000018da9         db  0xa0 ; '.'
0000000000018daa         db  0x01 ; '.'
0000000000018dab         db  0x03 ; '.'
0000000000018dac         db  0xa6 ; '.'
0000000000018dad         db  0x01 ; '.'
0000000000018dae         db  0x0a ; '.'
0000000000018daf         db  0x0e ; '.'
0000000000018db0         db  0x38 ; '8'
0000000000018db1         db  0x41 ; 'A'
0000000000018db2         db  0x0e ; '.'
0000000000018db3         db  0x30 ; '0'
0000000000018db4         db  0x41 ; 'A'
0000000000018db5         db  0x0e ; '.'
0000000000018db6         db  0x28 ; '('
0000000000018db7         db  0x42 ; 'B'
0000000000018db8         db  0x0e ; '.'
0000000000018db9         db  0x20 ; ' '
0000000000018dba         db  0x42 ; 'B'
0000000000018dbb         db  0x0e ; '.'
0000000000018dbc         db  0x18 ; '.'
0000000000018dbd         db  0x42 ; 'B'
0000000000018dbe         db  0x0e ; '.'
0000000000018dbf         db  0x10 ; '.'
0000000000018dc0         db  0x42 ; 'B'
0000000000018dc1         db  0x0e ; '.'
0000000000018dc2         db  0x08 ; '.'
0000000000018dc3         db  0x48 ; 'H'
0000000000018dc4         db  0x0b ; '.'
0000000000018dc5         db  0x00 ; '.'
0000000000018dc6         db  0x00 ; '.'
0000000000018dc7         db  0x00 ; '.'
0000000000018dc8         dd         0x00000048                                  ; Length of the record
0000000000018dcc         dd         0x000014bc                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000018dd0         db         0xd0, 0x07, 2 dup (0xff)                    ; begin 0x95a0
0000000000018dd4         db         0x59, 0x01, 2 dup (0x00)                    ; length 0x159 (end at 0x96f9)
0000000000018dd8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018dd9         db  0x42 ; 'B'
0000000000018dda         db  0x0e ; '.'
0000000000018ddb         db  0x10 ; '.'
0000000000018ddc         db  0x8f ; '.'
0000000000018ddd         db  0x02 ; '.'
0000000000018dde         db  0x42 ; 'B'
0000000000018ddf         db  0x0e ; '.'
0000000000018de0         db  0x18 ; '.'
0000000000018de1         db  0x8e ; '.'
0000000000018de2         db  0x03 ; '.'
0000000000018de3         db  0x45 ; 'E'
0000000000018de4         db  0x0e ; '.'
0000000000018de5         db  0x20 ; ' '
0000000000018de6         db  0x8d ; '.'
0000000000018de7         db  0x04 ; '.'
0000000000018de8         db  0x42 ; 'B'
0000000000018de9         db  0x0e ; '.'
0000000000018dea         db  0x28 ; '('
0000000000018deb         db  0x8c ; '.'
0000000000018dec         db  0x05 ; '.'
0000000000018ded         db  0x44 ; 'D'
0000000000018dee         db  0x0e ; '.'
0000000000018def         db  0x30 ; '0'
0000000000018df0         db  0x86 ; '.'
0000000000018df1         db  0x06 ; '.'
0000000000018df2         db  0x41 ; 'A'
0000000000018df3         db  0x0e ; '.'
0000000000018df4         db  0x38 ; '8'
0000000000018df5         db  0x83 ; '.'
0000000000018df6         db  0x07 ; '.'
0000000000018df7         db  0x49 ; 'I'
0000000000018df8         db  0x0e ; '.'
0000000000018df9         db  0x70 ; 'p'
0000000000018dfa         db  0x03 ; '.'
0000000000018dfb         db  0x29 ; ')'
0000000000018dfc         db  0x01 ; '.'
0000000000018dfd         db  0x0a ; '.'
0000000000018dfe         db  0x0e ; '.'
0000000000018dff         db  0x38 ; '8'
0000000000018e00         db  0x41 ; 'A'
0000000000018e01         db  0x0e ; '.'
0000000000018e02         db  0x30 ; '0'
0000000000018e03         db  0x41 ; 'A'
0000000000018e04         db  0x0e ; '.'
0000000000018e05         db  0x28 ; '('
0000000000018e06         db  0x42 ; 'B'
0000000000018e07         db  0x0e ; '.'
0000000000018e08         db  0x20 ; ' '
0000000000018e09         db  0x42 ; 'B'
0000000000018e0a         db  0x0e ; '.'
0000000000018e0b         db  0x18 ; '.'
0000000000018e0c         db  0x42 ; 'B'
0000000000018e0d         db  0x0e ; '.'
0000000000018e0e         db  0x10 ; '.'
0000000000018e0f         db  0x42 ; 'B'
0000000000018e10         db  0x0e ; '.'
0000000000018e11         db  0x08 ; '.'
0000000000018e12         db  0x41 ; 'A'
0000000000018e13         db  0x0b ; '.'
0000000000018e14         dd         0x0000004c                                  ; Length of the record
0000000000018e18         dd         0x00001508                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000018e1c         db         0xe4, 0x08, 2 dup (0xff)                    ; begin 0x9700
0000000000018e20         db         0xa8, 0x01, 2 dup (0x00)                    ; length 0x1a8 (end at 0x98a8)
0000000000018e24         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018e25         db  0x5e ; '^'
0000000000018e26         db  0x0e ; '.'
0000000000018e27         db  0x10 ; '.'
0000000000018e28         db  0x8d ; '.'
0000000000018e29         db  0x02 ; '.'
0000000000018e2a         db  0x42 ; 'B'
0000000000018e2b         db  0x0e ; '.'
0000000000018e2c         db  0x18 ; '.'
0000000000018e2d         db  0x8c ; '.'
0000000000018e2e         db  0x03 ; '.'
0000000000018e2f         db  0x45 ; 'E'
0000000000018e30         db  0x0e ; '.'
0000000000018e31         db  0x20 ; ' '
0000000000018e32         db  0x86 ; '.'
0000000000018e33         db  0x04 ; '.'
0000000000018e34         db  0x41 ; 'A'
0000000000018e35         db  0x0e ; '.'
0000000000018e36         db  0x28 ; '('
0000000000018e37         db  0x83 ; '.'
0000000000018e38         db  0x05 ; '.'
0000000000018e39         db  0x4d ; 'M'
0000000000018e3a         db  0x0e ; '.'
0000000000018e3b         db  0x30 ; '0'
0000000000018e3c         db  0x02 ; '.'
0000000000018e3d         db  0x95 ; '.'
0000000000018e3e         db  0x0e ; '.'
0000000000018e3f         db  0x08 ; '.'
0000000000018e40         db  0xc3 ; '.'
0000000000018e41         db  0xc6 ; '.'
0000000000018e42         db  0xcc ; '.'
0000000000018e43         db  0xcd ; '.'
0000000000018e44         db  0x48 ; 'H'
0000000000018e45         db  0x0e ; '.'
0000000000018e46         db  0x30 ; '0'
0000000000018e47         db  0x83 ; '.'
0000000000018e48         db  0x05 ; '.'
0000000000018e49         db  0x86 ; '.'
0000000000018e4a         db  0x04 ; '.'
0000000000018e4b         db  0x8c ; '.'
0000000000018e4c         db  0x03 ; '.'
0000000000018e4d         db  0x8d ; '.'
0000000000018e4e         db  0x02 ; '.'
0000000000018e4f         db  0x02 ; '.'
0000000000018e50         db  0x90 ; '.'
0000000000018e51         db  0x0a ; '.'
0000000000018e52         db  0x0e ; '.'
0000000000018e53         db  0x28 ; '('
0000000000018e54         db  0x41 ; 'A'
0000000000018e55         db  0x0e ; '.'
0000000000018e56         db  0x20 ; ' '
0000000000018e57         db  0x41 ; 'A'
0000000000018e58         db  0x0e ; '.'
0000000000018e59         db  0x18 ; '.'
0000000000018e5a         db  0x42 ; 'B'
0000000000018e5b         db  0x0e ; '.'
0000000000018e5c         db  0x10 ; '.'
0000000000018e5d         db  0x42 ; 'B'
0000000000018e5e         db  0x0e ; '.'
0000000000018e5f         db  0x08 ; '.'
0000000000018e60         db  0x4a ; 'J'
0000000000018e61         db  0x0b ; '.'
0000000000018e62         db  0x00 ; '.'
0000000000018e63         db  0x00 ; '.'
0000000000018e64         dd         0x00000020                                  ; Length of the record
0000000000018e68         dd         0x00001558                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000018e6c         db         0x44, 0x0a, 2 dup (0xff)                    ; begin 0x98b0
0000000000018e70         db         0xe0, 3 dup (0x00)                          ; length 0xe0 (end at 0x9990)
0000000000018e74         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018e75         db  0x41 ; 'A'
0000000000018e76         db  0x0e ; '.'
0000000000018e77         db  0x10 ; '.'
0000000000018e78         db  0x83 ; '.'
0000000000018e79         db  0x02 ; '.'
0000000000018e7a         db  0x47 ; 'G'
0000000000018e7b         db  0x0e ; '.'
0000000000018e7c         db  0x30 ; '0'
0000000000018e7d         db  0x02 ; '.'
0000000000018e7e         db  0x77 ; 'w'
0000000000018e7f         db  0x0a ; '.'
0000000000018e80         db  0x0e ; '.'
0000000000018e81         db  0x10 ; '.'
0000000000018e82         db  0x41 ; 'A'
0000000000018e83         db  0x0e ; '.'
0000000000018e84         db  0x08 ; '.'
0000000000018e85         db  0x48 ; 'H'
0000000000018e86         db  0x0b ; '.'
0000000000018e87         db  0x00 ; '.'
0000000000018e88         dd         0x00000040                                  ; Length of the record
0000000000018e8c         dd         0x0000157c                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000018e90         db         0x00, 0x0b, 2 dup (0xff)                    ; begin 0x9990
0000000000018e94         db         0xd1, 3 dup (0x00)                          ; length 0xd1 (end at 0x9a61)
0000000000018e98         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018e99         db  0x42 ; 'B'
0000000000018e9a         db  0x0e ; '.'
0000000000018e9b         db  0x10 ; '.'
0000000000018e9c         db  0x8e ; '.'
0000000000018e9d         db  0x02 ; '.'
0000000000018e9e         db  0x42 ; 'B'
0000000000018e9f         db  0x0e ; '.'
0000000000018ea0         db  0x18 ; '.'
0000000000018ea1         db  0x8d ; '.'
0000000000018ea2         db  0x03 ; '.'
0000000000018ea3         db  0x46 ; 'F'
0000000000018ea4         db  0x0e ; '.'
0000000000018ea5         db  0x20 ; ' '
0000000000018ea6         db  0x8c ; '.'
0000000000018ea7         db  0x04 ; '.'
0000000000018ea8         db  0x41 ; 'A'
0000000000018ea9         db  0x0e ; '.'
0000000000018eaa         db  0x28 ; '('
0000000000018eab         db  0x86 ; '.'
0000000000018eac         db  0x05 ; '.'
0000000000018ead         db  0x48 ; 'H'
0000000000018eae         db  0x0e ; '.'
0000000000018eaf         db  0x30 ; '0'
0000000000018eb0         db  0x83 ; '.'
0000000000018eb1         db  0x06 ; '.'
0000000000018eb2         db  0x47 ; 'G'
0000000000018eb3         db  0x0e ; '.'
0000000000018eb4         db  0x40 ; '@'
0000000000018eb5         db  0x02 ; '.'
0000000000018eb6         db  0x96 ; '.'
0000000000018eb7         db  0x0a ; '.'
0000000000018eb8         db  0x0e ; '.'
0000000000018eb9         db  0x30 ; '0'
0000000000018eba         db  0x41 ; 'A'
0000000000018ebb         db  0x0e ; '.'
0000000000018ebc         db  0x28 ; '('
0000000000018ebd         db  0x41 ; 'A'
0000000000018ebe         db  0x0e ; '.'
0000000000018ebf         db  0x20 ; ' '
0000000000018ec0         db  0x42 ; 'B'
0000000000018ec1         db  0x0e ; '.'
0000000000018ec2         db  0x18 ; '.'
0000000000018ec3         db  0x42 ; 'B'
0000000000018ec4         db  0x0e ; '.'
0000000000018ec5         db  0x10 ; '.'
0000000000018ec6         db  0x42 ; 'B'
0000000000018ec7         db  0x0e ; '.'
0000000000018ec8         db  0x08 ; '.'
0000000000018ec9         db  0x48 ; 'H'
0000000000018eca         db  0x0b ; '.'
0000000000018ecb         db  0x00 ; '.'
0000000000018ecc         dd         0x0000004c                                  ; Length of the record
0000000000018ed0         dd         0x000015c0                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000018ed4         db         0x9c, 0x0b, 2 dup (0xff)                    ; begin 0x9a70
0000000000018ed8         db         0x37, 0x02, 2 dup (0x00)                    ; length 0x237 (end at 0x9ca7)
0000000000018edc         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018edd         db  0x42 ; 'B'
0000000000018ede         db  0x0e ; '.'
0000000000018edf         db  0x10 ; '.'
0000000000018ee0         db  0x8f ; '.'
0000000000018ee1         db  0x02 ; '.'
0000000000018ee2         db  0x42 ; 'B'
0000000000018ee3         db  0x0e ; '.'
0000000000018ee4         db  0x18 ; '.'
0000000000018ee5         db  0x8e ; '.'
0000000000018ee6         db  0x03 ; '.'
0000000000018ee7         db  0x42 ; 'B'
0000000000018ee8         db  0x0e ; '.'
0000000000018ee9         db  0x20 ; ' '
0000000000018eea         db  0x8d ; '.'
0000000000018eeb         db  0x04 ; '.'
0000000000018eec         db  0x42 ; 'B'
0000000000018eed         db  0x0e ; '.'
0000000000018eee         db  0x28 ; '('
0000000000018eef         db  0x8c ; '.'
0000000000018ef0         db  0x05 ; '.'
0000000000018ef1         db  0x44 ; 'D'
0000000000018ef2         db  0x0e ; '.'
0000000000018ef3         db  0x30 ; '0'
0000000000018ef4         db  0x86 ; '.'
0000000000018ef5         db  0x06 ; '.'
0000000000018ef6         db  0x41 ; 'A'
0000000000018ef7         db  0x0e ; '.'
0000000000018ef8         db  0x38 ; '8'
0000000000018ef9         db  0x83 ; '.'
0000000000018efa         db  0x07 ; '.'
0000000000018efb         db  0x44 ; 'D'
0000000000018efc         db  0x0e ; '.'
0000000000018efd         db  0x80 ; '.'
0000000000018efe         db  0x01 ; '.'
0000000000018eff         db  0x03 ; '.'
0000000000018f00         db  0x87 ; '.'
0000000000018f01         db  0x01 ; '.'
0000000000018f02         db  0x0a ; '.'
0000000000018f03         db  0x0e ; '.'
0000000000018f04         db  0x38 ; '8'
0000000000018f05         db  0x41 ; 'A'
0000000000018f06         db  0x0e ; '.'
0000000000018f07         db  0x30 ; '0'
0000000000018f08         db  0x41 ; 'A'
0000000000018f09         db  0x0e ; '.'
0000000000018f0a         db  0x28 ; '('
0000000000018f0b         db  0x42 ; 'B'
0000000000018f0c         db  0x0e ; '.'
0000000000018f0d         db  0x20 ; ' '
0000000000018f0e         db  0x42 ; 'B'
0000000000018f0f         db  0x0e ; '.'
0000000000018f10         db  0x18 ; '.'
0000000000018f11         db  0x42 ; 'B'
0000000000018f12         db  0x0e ; '.'
0000000000018f13         db  0x10 ; '.'
0000000000018f14         db  0x42 ; 'B'
0000000000018f15         db  0x0e ; '.'
0000000000018f16         db  0x08 ; '.'
0000000000018f17         db  0x46 ; 'F'
0000000000018f18         db  0x0b ; '.'
0000000000018f19         db  0x00 ; '.'
0000000000018f1a         db  0x00 ; '.'
0000000000018f1b         db  0x00 ; '.'
0000000000018f1c         dd         0x00000028                                  ; Length of the record
0000000000018f20         dd         0x00001610                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000018f24         db         0x8c, 0x0d, 2 dup (0xff)                    ; begin 0x9cb0
0000000000018f28         db         0xa0, 3 dup (0x00)                          ; length 0xa0 (end at 0x9d50)
0000000000018f2c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018f2d         db  0x41 ; 'A'
0000000000018f2e         db  0x0e ; '.'
0000000000018f2f         db  0x10 ; '.'
0000000000018f30         db  0x86 ; '.'
0000000000018f31         db  0x02 ; '.'
0000000000018f32         db  0x41 ; 'A'
0000000000018f33         db  0x0e ; '.'
0000000000018f34         db  0x18 ; '.'
0000000000018f35         db  0x83 ; '.'
0000000000018f36         db  0x03 ; '.'
0000000000018f37         db  0x4a ; 'J'
0000000000018f38         db  0x0e ; '.'
0000000000018f39         db  0x30 ; '0'
0000000000018f3a         db  0x02 ; '.'
0000000000018f3b         db  0x4e ; 'N'
0000000000018f3c         db  0x0a ; '.'
0000000000018f3d         db  0x0e ; '.'
0000000000018f3e         db  0x18 ; '.'
0000000000018f3f         db  0x41 ; 'A'
0000000000018f40         db  0x0e ; '.'
0000000000018f41         db  0x10 ; '.'
0000000000018f42         db  0x41 ; 'A'
0000000000018f43         db  0x0e ; '.'
0000000000018f44         db  0x08 ; '.'
0000000000018f45         db  0x44 ; 'D'
0000000000018f46         db  0x0b ; '.'
0000000000018f47         db  0x00 ; '.'
0000000000018f48         dd         0x00000038                                  ; Length of the record
0000000000018f4c         dd         0x0000163c                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000018f50         db         0x00, 0x0e, 2 dup (0xff)                    ; begin 0x9d50
0000000000018f54         db         0x86, 3 dup (0x00)                          ; length 0x86 (end at 0x9dd6)
0000000000018f58         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018f59         db  0x42 ; 'B'
0000000000018f5a         db  0x0e ; '.'
0000000000018f5b         db  0x10 ; '.'
0000000000018f5c         db  0x8c ; '.'
0000000000018f5d         db  0x02 ; '.'
0000000000018f5e         db  0x41 ; 'A'
0000000000018f5f         db  0x0e ; '.'
0000000000018f60         db  0x18 ; '.'
0000000000018f61         db  0x86 ; '.'
0000000000018f62         db  0x03 ; '.'
0000000000018f63         db  0x41 ; 'A'
0000000000018f64         db  0x0e ; '.'
0000000000018f65         db  0x20 ; ' '
0000000000018f66         db  0x83 ; '.'
0000000000018f67         db  0x04 ; '.'
0000000000018f68         db  0x02 ; '.'
0000000000018f69         db  0x47 ; 'G'
0000000000018f6a         db  0x0a ; '.'
0000000000018f6b         db  0x0e ; '.'
0000000000018f6c         db  0x18 ; '.'
0000000000018f6d         db  0x41 ; 'A'
0000000000018f6e         db  0x0e ; '.'
0000000000018f6f         db  0x10 ; '.'
0000000000018f70         db  0x42 ; 'B'
0000000000018f71         db  0x0e ; '.'
0000000000018f72         db  0x08 ; '.'
0000000000018f73         db  0x42 ; 'B'
0000000000018f74         db  0x0b ; '.'
0000000000018f75         db  0x52 ; 'R'
0000000000018f76         db  0x0a ; '.'
0000000000018f77         db  0x0e ; '.'
0000000000018f78         db  0x18 ; '.'
0000000000018f79         db  0x41 ; 'A'
0000000000018f7a         db  0x0e ; '.'
0000000000018f7b         db  0x10 ; '.'
0000000000018f7c         db  0x42 ; 'B'
0000000000018f7d         db  0x0e ; '.'
0000000000018f7e         db  0x08 ; '.'
0000000000018f7f         db  0x4b ; 'K'
0000000000018f80         db  0x0b ; '.'
0000000000018f81         db  0x00 ; '.'
0000000000018f82         db  0x00 ; '.'
0000000000018f83         db  0x00 ; '.'
0000000000018f84         dd         0x00000060                                  ; Length of the record
0000000000018f88         dd         0x00001678                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000018f8c         db         0x54, 0x0e, 2 dup (0xff)                    ; begin 0x9de0
0000000000018f90         db         0x52, 0x01, 2 dup (0x00)                    ; length 0x152 (end at 0x9f32)
0000000000018f94         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018f95         db  0x45 ; 'E'
0000000000018f96         db  0x0e ; '.'
0000000000018f97         db  0x10 ; '.'
0000000000018f98         db  0x8e ; '.'
0000000000018f99         db  0x02 ; '.'
0000000000018f9a         db  0x42 ; 'B'
0000000000018f9b         db  0x0e ; '.'
0000000000018f9c         db  0x18 ; '.'
0000000000018f9d         db  0x8d ; '.'
0000000000018f9e         db  0x03 ; '.'
0000000000018f9f         db  0x42 ; 'B'
0000000000018fa0         db  0x0e ; '.'
0000000000018fa1         db  0x20 ; ' '
0000000000018fa2         db  0x8c ; '.'
0000000000018fa3         db  0x04 ; '.'
0000000000018fa4         db  0x41 ; 'A'
0000000000018fa5         db  0x0e ; '.'
0000000000018fa6         db  0x28 ; '('
0000000000018fa7         db  0x86 ; '.'
0000000000018fa8         db  0x05 ; '.'
0000000000018fa9         db  0x41 ; 'A'
0000000000018faa         db  0x0e ; '.'
0000000000018fab         db  0x30 ; '0'
0000000000018fac         db  0x83 ; '.'
0000000000018fad         db  0x06 ; '.'
0000000000018fae         db  0x02 ; '.'
0000000000018faf         db  0xc8 ; '.'
0000000000018fb0         db  0x0a ; '.'
0000000000018fb1         db  0x0e ; '.'
0000000000018fb2         db  0x28 ; '('
0000000000018fb3         db  0x41 ; 'A'
0000000000018fb4         db  0x0e ; '.'
0000000000018fb5         db  0x20 ; ' '
0000000000018fb6         db  0x42 ; 'B'
0000000000018fb7         db  0x0e ; '.'
0000000000018fb8         db  0x18 ; '.'
0000000000018fb9         db  0x42 ; 'B'
0000000000018fba         db  0x0e ; '.'
0000000000018fbb         db  0x10 ; '.'
0000000000018fbc         db  0x42 ; 'B'
0000000000018fbd         db  0x0e ; '.'
0000000000018fbe         db  0x08 ; '.'
0000000000018fbf         db  0x46 ; 'F'
0000000000018fc0         db  0x0b ; '.'
0000000000018fc1         db  0x44 ; 'D'
0000000000018fc2         db  0x0a ; '.'
0000000000018fc3         db  0x0e ; '.'
0000000000018fc4         db  0x28 ; '('
0000000000018fc5         db  0x41 ; 'A'
0000000000018fc6         db  0x0e ; '.'
0000000000018fc7         db  0x20 ; ' '
0000000000018fc8         db  0x42 ; 'B'
0000000000018fc9         db  0x0e ; '.'
0000000000018fca         db  0x18 ; '.'
0000000000018fcb         db  0x42 ; 'B'
0000000000018fcc         db  0x0e ; '.'
0000000000018fcd         db  0x10 ; '.'
0000000000018fce         db  0x42 ; 'B'
0000000000018fcf         db  0x0e ; '.'
0000000000018fd0         db  0x08 ; '.'
0000000000018fd1         db  0x45 ; 'E'
0000000000018fd2         db  0x0b ; '.'
0000000000018fd3         db  0x4d ; 'M'
0000000000018fd4         db  0x0a ; '.'
0000000000018fd5         db  0x0e ; '.'
0000000000018fd6         db  0x28 ; '('
0000000000018fd7         db  0x41 ; 'A'
0000000000018fd8         db  0x0e ; '.'
0000000000018fd9         db  0x20 ; ' '
0000000000018fda         db  0x42 ; 'B'
0000000000018fdb         db  0x0e ; '.'
0000000000018fdc         db  0x18 ; '.'
0000000000018fdd         db  0x42 ; 'B'
0000000000018fde         db  0x0e ; '.'
0000000000018fdf         db  0x10 ; '.'
0000000000018fe0         db  0x42 ; 'B'
0000000000018fe1         db  0x0e ; '.'
0000000000018fe2         db  0x08 ; '.'
0000000000018fe3         db  0x44 ; 'D'
0000000000018fe4         db  0x0b ; '.'
0000000000018fe5         db  0x00 ; '.'
0000000000018fe6         db  0x00 ; '.'
0000000000018fe7         db  0x00 ; '.'
0000000000018fe8         dd         0x00000048                                  ; Length of the record
0000000000018fec         dd         0x000016dc                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000018ff0         db         0x50, 0x0f, 2 dup (0xff)                    ; begin 0x9f40
0000000000018ff4         db         0xba, 0x02, 2 dup (0x00)                    ; length 0x2ba (end at 0xa1fa)
0000000000018ff8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018ff9         db  0x42 ; 'B'
0000000000018ffa         db  0x0e ; '.'
0000000000018ffb         db  0x10 ; '.'
0000000000018ffc         db  0x8f ; '.'
0000000000018ffd         db  0x02 ; '.'
0000000000018ffe         db  0x42 ; 'B'
0000000000018fff         db  0x0e ; '.'
0000000000019000         db  0x18 ; '.'
0000000000019001         db  0x8e ; '.'
0000000000019002         db  0x03 ; '.'
0000000000019003         db  0x42 ; 'B'
0000000000019004         db  0x0e ; '.'
0000000000019005         db  0x20 ; ' '
0000000000019006         db  0x8d ; '.'
0000000000019007         db  0x04 ; '.'
0000000000019008         db  0x42 ; 'B'
0000000000019009         db  0x0e ; '.'
000000000001900a         db  0x28 ; '('
000000000001900b         db  0x8c ; '.'
000000000001900c         db  0x05 ; '.'
000000000001900d         db  0x41 ; 'A'
000000000001900e         db  0x0e ; '.'
000000000001900f         db  0x30 ; '0'
0000000000019010         db  0x86 ; '.'
0000000000019011         db  0x06 ; '.'
0000000000019012         db  0x41 ; 'A'
0000000000019013         db  0x0e ; '.'
0000000000019014         db  0x38 ; '8'
0000000000019015         db  0x83 ; '.'
0000000000019016         db  0x07 ; '.'
0000000000019017         db  0x44 ; 'D'
0000000000019018         db  0x0e ; '.'
0000000000019019         db  0x60 ; '`'
000000000001901a         db  0x02 ; '.'
000000000001901b         db  0xa2 ; '.'
000000000001901c         db  0x0a ; '.'
000000000001901d         db  0x0e ; '.'
000000000001901e         db  0x38 ; '8'
000000000001901f         db  0x44 ; 'D'
0000000000019020         db  0x0e ; '.'
0000000000019021         db  0x30 ; '0'
0000000000019022         db  0x41 ; 'A'
0000000000019023         db  0x0e ; '.'
0000000000019024         db  0x28 ; '('
0000000000019025         db  0x42 ; 'B'
0000000000019026         db  0x0e ; '.'
0000000000019027         db  0x20 ; ' '
0000000000019028         db  0x42 ; 'B'
0000000000019029         db  0x0e ; '.'
000000000001902a         db  0x18 ; '.'
000000000001902b         db  0x42 ; 'B'
000000000001902c         db  0x0e ; '.'
000000000001902d         db  0x10 ; '.'
000000000001902e         db  0x42 ; 'B'
000000000001902f         db  0x0e ; '.'
0000000000019030         db  0x08 ; '.'
0000000000019031         db  0x43 ; 'C'
0000000000019032         db  0x0b ; '.'
0000000000019033         db  0x00 ; '.'
0000000000019034         dd         0x00000048                                  ; Length of the record
0000000000019038         dd         0x00001728                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
000000000001903c         db         0xc4, 0x11, 2 dup (0xff)                    ; begin 0xa200
0000000000019040         db         0xfa, 0x01, 2 dup (0x00)                    ; length 0x1fa (end at 0xa3fa)
0000000000019044         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019045         db  0x42 ; 'B'
0000000000019046         db  0x0e ; '.'
0000000000019047         db  0x10 ; '.'
0000000000019048         db  0x8f ; '.'
0000000000019049         db  0x02 ; '.'
000000000001904a         db  0x42 ; 'B'
000000000001904b         db  0x0e ; '.'
000000000001904c         db  0x18 ; '.'
000000000001904d         db  0x8e ; '.'
000000000001904e         db  0x03 ; '.'
000000000001904f         db  0x42 ; 'B'
0000000000019050         db  0x0e ; '.'
0000000000019051         db  0x20 ; ' '
0000000000019052         db  0x8d ; '.'
0000000000019053         db  0x04 ; '.'
0000000000019054         db  0x42 ; 'B'
0000000000019055         db  0x0e ; '.'
0000000000019056         db  0x28 ; '('
0000000000019057         db  0x8c ; '.'
0000000000019058         db  0x05 ; '.'
0000000000019059         db  0x41 ; 'A'
000000000001905a         db  0x0e ; '.'
000000000001905b         db  0x30 ; '0'
000000000001905c         db  0x86 ; '.'
000000000001905d         db  0x06 ; '.'
000000000001905e         db  0x41 ; 'A'
000000000001905f         db  0x0e ; '.'
0000000000019060         db  0x38 ; '8'
0000000000019061         db  0x83 ; '.'
0000000000019062         db  0x07 ; '.'
0000000000019063         db  0x44 ; 'D'
0000000000019064         db  0x0e ; '.'
0000000000019065         db  0x40 ; '@'
0000000000019066         db  0x03 ; '.'
0000000000019067         db  0x85 ; '.'
0000000000019068         db  0x01 ; '.'
0000000000019069         db  0x0a ; '.'
000000000001906a         db  0x0e ; '.'
000000000001906b         db  0x38 ; '8'
000000000001906c         db  0x44 ; 'D'
000000000001906d         db  0x0e ; '.'
000000000001906e         db  0x30 ; '0'
000000000001906f         db  0x41 ; 'A'
0000000000019070         db  0x0e ; '.'
0000000000019071         db  0x28 ; '('
0000000000019072         db  0x42 ; 'B'
0000000000019073         db  0x0e ; '.'
0000000000019074         db  0x20 ; ' '
0000000000019075         db  0x42 ; 'B'
0000000000019076         db  0x0e ; '.'
0000000000019077         db  0x18 ; '.'
0000000000019078         db  0x42 ; 'B'
0000000000019079         db  0x0e ; '.'
000000000001907a         db  0x10 ; '.'
000000000001907b         db  0x42 ; 'B'
000000000001907c         db  0x0e ; '.'
000000000001907d         db  0x08 ; '.'
000000000001907e         db  0x48 ; 'H'
000000000001907f         db  0x0b ; '.'
0000000000019080         dd         0x00000048                                  ; Length of the record
0000000000019084         dd         0x00001774                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000019088         db         0x78, 0x13, 2 dup (0xff)                    ; begin 0xa400
000000000001908c         db         0xdc, 3 dup (0x00)                          ; length 0xdc (end at 0xa4dc)
0000000000019090         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019091         db  0x42 ; 'B'
0000000000019092         db  0x0e ; '.'
0000000000019093         db  0x10 ; '.'
0000000000019094         db  0x8f ; '.'
0000000000019095         db  0x02 ; '.'
0000000000019096         db  0x42 ; 'B'
0000000000019097         db  0x0e ; '.'
0000000000019098         db  0x18 ; '.'
0000000000019099         db  0x8e ; '.'
000000000001909a         db  0x03 ; '.'
000000000001909b         db  0x42 ; 'B'
000000000001909c         db  0x0e ; '.'
000000000001909d         db  0x20 ; ' '
000000000001909e         db  0x8d ; '.'
000000000001909f         db  0x04 ; '.'
00000000000190a0         db  0x42 ; 'B'
00000000000190a1         db  0x0e ; '.'
00000000000190a2         db  0x28 ; '('
00000000000190a3         db  0x8c ; '.'
00000000000190a4         db  0x05 ; '.'
00000000000190a5         db  0x41 ; 'A'
00000000000190a6         db  0x0e ; '.'
00000000000190a7         db  0x30 ; '0'
00000000000190a8         db  0x86 ; '.'
00000000000190a9         db  0x06 ; '.'
00000000000190aa         db  0x41 ; 'A'
00000000000190ab         db  0x0e ; '.'
00000000000190ac         db  0x38 ; '8'
00000000000190ad         db  0x83 ; '.'
00000000000190ae         db  0x07 ; '.'
00000000000190af         db  0x44 ; 'D'
00000000000190b0         db  0x0e ; '.'
00000000000190b1         db  0x80 ; '.'
00000000000190b2         db  0x01 ; '.'
00000000000190b3         db  0x02 ; '.'
00000000000190b4         db  0xbe ; '.'
00000000000190b5         db  0x0a ; '.'
00000000000190b6         db  0x0e ; '.'
00000000000190b7         db  0x38 ; '8'
00000000000190b8         db  0x41 ; 'A'
00000000000190b9         db  0x0e ; '.'
00000000000190ba         db  0x30 ; '0'
00000000000190bb         db  0x41 ; 'A'
00000000000190bc         db  0x0e ; '.'
00000000000190bd         db  0x28 ; '('
00000000000190be         db  0x42 ; 'B'
00000000000190bf         db  0x0e ; '.'
00000000000190c0         db  0x20 ; ' '
00000000000190c1         db  0x42 ; 'B'
00000000000190c2         db  0x0e ; '.'
00000000000190c3         db  0x18 ; '.'
00000000000190c4         db  0x42 ; 'B'
00000000000190c5         db  0x0e ; '.'
00000000000190c6         db  0x10 ; '.'
00000000000190c7         db  0x42 ; 'B'
00000000000190c8         db  0x0e ; '.'
00000000000190c9         db  0x08 ; '.'
00000000000190ca         db  0x41 ; 'A'
00000000000190cb         db  0x0b ; '.'
00000000000190cc         dd         0x00000048                                  ; Length of the record
00000000000190d0         dd         0x000017c0                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
00000000000190d4         db         0x0c, 0x14, 2 dup (0xff)                    ; begin 0xa4e0
00000000000190d8         db         0x9e, 0x03, 2 dup (0x00)                    ; length 0x39e (end at 0xa87e)
00000000000190dc         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000190dd         db  0x42 ; 'B'
00000000000190de         db  0x0e ; '.'
00000000000190df         db  0x10 ; '.'
00000000000190e0         db  0x8f ; '.'
00000000000190e1         db  0x02 ; '.'
00000000000190e2         db  0x42 ; 'B'
00000000000190e3         db  0x0e ; '.'
00000000000190e4         db  0x18 ; '.'
00000000000190e5         db  0x8e ; '.'
00000000000190e6         db  0x03 ; '.'
00000000000190e7         db  0x42 ; 'B'
00000000000190e8         db  0x0e ; '.'
00000000000190e9         db  0x20 ; ' '
00000000000190ea         db  0x8d ; '.'
00000000000190eb         db  0x04 ; '.'
00000000000190ec         db  0x42 ; 'B'
00000000000190ed         db  0x0e ; '.'
00000000000190ee         db  0x28 ; '('
00000000000190ef         db  0x8c ; '.'
00000000000190f0         db  0x05 ; '.'
00000000000190f1         db  0x44 ; 'D'
00000000000190f2         db  0x0e ; '.'
00000000000190f3         db  0x30 ; '0'
00000000000190f4         db  0x86 ; '.'
00000000000190f5         db  0x06 ; '.'
00000000000190f6         db  0x41 ; 'A'
00000000000190f7         db  0x0e ; '.'
00000000000190f8         db  0x38 ; '8'
00000000000190f9         db  0x83 ; '.'
00000000000190fa         db  0x07 ; '.'
00000000000190fb         db  0x4c ; 'L'
00000000000190fc         db  0x0e ; '.'
00000000000190fd         db  0xb0 ; '.'
00000000000190fe         db  0x01 ; '.'
00000000000190ff         db  0x02 ; '.'
0000000000019100         db  0xbe ; '.'
0000000000019101         db  0x0a ; '.'
0000000000019102         db  0x0e ; '.'
0000000000019103         db  0x38 ; '8'
0000000000019104         db  0x41 ; 'A'
0000000000019105         db  0x0e ; '.'
0000000000019106         db  0x30 ; '0'
0000000000019107         db  0x41 ; 'A'
0000000000019108         db  0x0e ; '.'
0000000000019109         db  0x28 ; '('
000000000001910a         db  0x42 ; 'B'
000000000001910b         db  0x0e ; '.'
000000000001910c         db  0x20 ; ' '
000000000001910d         db  0x42 ; 'B'
000000000001910e         db  0x0e ; '.'
000000000001910f         db  0x18 ; '.'
0000000000019110         db  0x42 ; 'B'
0000000000019111         db  0x0e ; '.'
0000000000019112         db  0x10 ; '.'
0000000000019113         db  0x42 ; 'B'
0000000000019114         db  0x0e ; '.'
0000000000019115         db  0x08 ; '.'
0000000000019116         db  0x47 ; 'G'
0000000000019117         db  0x0b ; '.'
0000000000019118         dd         0x00000048                                  ; Length of the record
000000000001911c         dd         0x0000180c                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000019120         db         0x60, 0x17, 2 dup (0xff)                    ; begin 0xa880
0000000000019124         db         0x41, 0x01, 2 dup (0x00)                    ; length 0x141 (end at 0xa9c1)
0000000000019128         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019129         db  0x42 ; 'B'
000000000001912a         db  0x0e ; '.'
000000000001912b         db  0x10 ; '.'
000000000001912c         db  0x8f ; '.'
000000000001912d         db  0x02 ; '.'
000000000001912e         db  0x42 ; 'B'
000000000001912f         db  0x0e ; '.'
0000000000019130         db  0x18 ; '.'
0000000000019131         db  0x8e ; '.'
0000000000019132         db  0x03 ; '.'
0000000000019133         db  0x42 ; 'B'
0000000000019134         db  0x0e ; '.'
0000000000019135         db  0x20 ; ' '
0000000000019136         db  0x8d ; '.'
0000000000019137         db  0x04 ; '.'
0000000000019138         db  0x42 ; 'B'
0000000000019139         db  0x0e ; '.'
000000000001913a         db  0x28 ; '('
000000000001913b         db  0x8c ; '.'
000000000001913c         db  0x05 ; '.'
000000000001913d         db  0x41 ; 'A'
000000000001913e         db  0x0e ; '.'
000000000001913f         db  0x30 ; '0'
0000000000019140         db  0x86 ; '.'
0000000000019141         db  0x06 ; '.'
0000000000019142         db  0x41 ; 'A'
0000000000019143         db  0x0e ; '.'
0000000000019144         db  0x38 ; '8'
0000000000019145         db  0x83 ; '.'
0000000000019146         db  0x07 ; '.'
0000000000019147         db  0x44 ; 'D'
0000000000019148         db  0x0e ; '.'
0000000000019149         db  0x60 ; '`'
000000000001914a         db  0x02 ; '.'
000000000001914b         db  0xd8 ; '.'
000000000001914c         db  0x0a ; '.'
000000000001914d         db  0x0e ; '.'
000000000001914e         db  0x38 ; '8'
000000000001914f         db  0x41 ; 'A'
0000000000019150         db  0x0e ; '.'
0000000000019151         db  0x30 ; '0'
0000000000019152         db  0x41 ; 'A'
0000000000019153         db  0x0e ; '.'
0000000000019154         db  0x28 ; '('
0000000000019155         db  0x42 ; 'B'
0000000000019156         db  0x0e ; '.'
0000000000019157         db  0x20 ; ' '
0000000000019158         db  0x42 ; 'B'
0000000000019159         db  0x0e ; '.'
000000000001915a         db  0x18 ; '.'
000000000001915b         db  0x42 ; 'B'
000000000001915c         db  0x0e ; '.'
000000000001915d         db  0x10 ; '.'
000000000001915e         db  0x42 ; 'B'
000000000001915f         db  0x0e ; '.'
0000000000019160         db  0x08 ; '.'
0000000000019161         db  0x41 ; 'A'
0000000000019162         db  0x0b ; '.'
0000000000019163         db  0x00 ; '.'
0000000000019164         dd         0x00000040                                  ; Length of the record
0000000000019168         dd         0x00001858                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
000000000001916c         db         0x64, 0x18, 2 dup (0xff)                    ; begin 0xa9d0
0000000000019170         db         0xe6, 3 dup (0x00)                          ; length 0xe6 (end at 0xaab6)
0000000000019174         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019175         db  0x41 ; 'A'
0000000000019176         db  0x0e ; '.'
0000000000019177         db  0x10 ; '.'
0000000000019178         db  0x86 ; '.'
0000000000019179         db  0x02 ; '.'
000000000001917a         db  0x41 ; 'A'
000000000001917b         db  0x0e ; '.'
000000000001917c         db  0x18 ; '.'
000000000001917d         db  0x83 ; '.'
000000000001917e         db  0x03 ; '.'
000000000001917f         db  0x47 ; 'G'
0000000000019180         db  0x0e ; '.'
0000000000019181         db  0x20 ; ' '
0000000000019182         db  0x02 ; '.'
0000000000019183         db  0x4d ; 'M'
0000000000019184         db  0x0a ; '.'
0000000000019185         db  0x0e ; '.'
0000000000019186         db  0x18 ; '.'
0000000000019187         db  0x41 ; 'A'
0000000000019188         db  0x0e ; '.'
0000000000019189         db  0x10 ; '.'
000000000001918a         db  0x41 ; 'A'
000000000001918b         db  0x0e ; '.'
000000000001918c         db  0x08 ; '.'
000000000001918d         db  0x48 ; 'H'
000000000001918e         db  0x0b ; '.'
000000000001918f         db  0x47 ; 'G'
0000000000019190         db  0x0a ; '.'
0000000000019191         db  0x0e ; '.'
0000000000019192         db  0x18 ; '.'
0000000000019193         db  0x41 ; 'A'
0000000000019194         db  0x0e ; '.'
0000000000019195         db  0x10 ; '.'
0000000000019196         db  0x41 ; 'A'
0000000000019197         db  0x0e ; '.'
0000000000019198         db  0x08 ; '.'
0000000000019199         db  0x47 ; 'G'
000000000001919a         db  0x0b ; '.'
000000000001919b         db  0x7c ; '|'
000000000001919c         db  0x0a ; '.'
000000000001919d         db  0x0e ; '.'
000000000001919e         db  0x18 ; '.'
000000000001919f         db  0x43 ; 'C'
00000000000191a0         db  0x0e ; '.'
00000000000191a1         db  0x10 ; '.'
00000000000191a2         db  0x41 ; 'A'
00000000000191a3         db  0x0e ; '.'
00000000000191a4         db  0x08 ; '.'
00000000000191a5         db  0x48 ; 'H'
00000000000191a6         db  0x0b ; '.'
00000000000191a7         db  0x00 ; '.'
00000000000191a8         dd         0x00000024                                  ; Length of the record
00000000000191ac         dd         0x0000189c                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
00000000000191b0         db         0x10, 0x19, 2 dup (0xff)                    ; begin 0xaac0
00000000000191b4         db         0x10, 0x01, 2 dup (0x00)                    ; length 0x110 (end at 0xabd0)
00000000000191b8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000191b9         db  0x02 ; '.'
00000000000191ba         db  0x51 ; 'Q'
00000000000191bb         db  0x0e ; '.'
00000000000191bc         db  0x10 ; '.'
00000000000191bd         db  0x83 ; '.'
00000000000191be         db  0x02 ; '.'
00000000000191bf         db  0x02 ; '.'
00000000000191c0         db  0x5c ; '\'
00000000000191c1         db  0x0e ; '.'
00000000000191c2         db  0x08 ; '.'
00000000000191c3         db  0x43 ; 'C'
00000000000191c4         db  0xc3 ; '.'
00000000000191c5         db  0x78 ; 'x'
00000000000191c6         db  0x0e ; '.'
00000000000191c7         db  0x10 ; '.'
00000000000191c8         db  0x83 ; '.'
00000000000191c9         db  0x02 ; '.'
00000000000191ca         db  0x4c ; 'L'
00000000000191cb         db  0x0e ; '.'
00000000000191cc         db  0x08 ; '.'
00000000000191cd         db  0x44 ; 'D'
00000000000191ce         db  0xc3 ; '.'
00000000000191cf         db  0x00 ; '.'
00000000000191d0         dd         0x00000034                                  ; Length of the record
00000000000191d4         dd         0x000018c4                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
00000000000191d8         db         0xf8, 0x19, 2 dup (0xff)                    ; begin 0xabd0
00000000000191dc         db         0xcf, 3 dup (0x00)                          ; length 0xcf (end at 0xac9f)
00000000000191e0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000191e1         db  0x42 ; 'B'
00000000000191e2         db  0x0e ; '.'
00000000000191e3         db  0x10 ; '.'
00000000000191e4         db  0x8c ; '.'
00000000000191e5         db  0x02 ; '.'
00000000000191e6         db  0x44 ; 'D'
00000000000191e7         db  0x0e ; '.'
00000000000191e8         db  0x18 ; '.'
00000000000191e9         db  0x86 ; '.'
00000000000191ea         db  0x03 ; '.'
00000000000191eb         db  0x41 ; 'A'
00000000000191ec         db  0x0e ; '.'
00000000000191ed         db  0x20 ; ' '
00000000000191ee         db  0x83 ; '.'
00000000000191ef         db  0x04 ; '.'
00000000000191f0         db  0x02 ; '.'
00000000000191f1         db  0x9f ; '.'
00000000000191f2         db  0x0a ; '.'
00000000000191f3         db  0x0e ; '.'
00000000000191f4         db  0x18 ; '.'
00000000000191f5         db  0x41 ; 'A'
00000000000191f6         db  0x0e ; '.'
00000000000191f7         db  0x10 ; '.'
00000000000191f8         db  0x42 ; 'B'
00000000000191f9         db  0x0e ; '.'
00000000000191fa         db  0x08 ; '.'
00000000000191fb         db  0x47 ; 'G'
00000000000191fc         db  0x0b ; '.'
00000000000191fd         db  0x59 ; 'Y'
00000000000191fe         db  0x0e ; '.'
00000000000191ff         db  0x18 ; '.'
0000000000019200         db  0x43 ; 'C'
0000000000019201         db  0x0e ; '.'
0000000000019202         db  0x10 ; '.'
0000000000019203         db  0x42 ; 'B'
0000000000019204         db  0x0e ; '.'
0000000000019205         db  0x08 ; '.'
0000000000019206         db  0x00 ; '.'
0000000000019207         db  0x00 ; '.'
0000000000019208         dd         0x0000004c                                  ; Length of the record
000000000001920c         dd         0x000018fc                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000019210         db         0x90, 0x1a, 2 dup (0xff)                    ; begin 0xaca0
0000000000019214         db         0x9f, 0x07, 2 dup (0x00)                    ; length 0x79f (end at 0xb43f)
0000000000019218         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019219         db  0x42 ; 'B'
000000000001921a         db  0x0e ; '.'
000000000001921b         db  0x10 ; '.'
000000000001921c         db  0x8f ; '.'
000000000001921d         db  0x02 ; '.'
000000000001921e         db  0x42 ; 'B'
000000000001921f         db  0x0e ; '.'
0000000000019220         db  0x18 ; '.'
0000000000019221         db  0x8e ; '.'
0000000000019222         db  0x03 ; '.'
0000000000019223         db  0x45 ; 'E'
0000000000019224         db  0x0e ; '.'
0000000000019225         db  0x20 ; ' '
0000000000019226         db  0x8d ; '.'
0000000000019227         db  0x04 ; '.'
0000000000019228         db  0x42 ; 'B'
0000000000019229         db  0x0e ; '.'
000000000001922a         db  0x28 ; '('
000000000001922b         db  0x8c ; '.'
000000000001922c         db  0x05 ; '.'
000000000001922d         db  0x44 ; 'D'
000000000001922e         db  0x0e ; '.'
000000000001922f         db  0x30 ; '0'
0000000000019230         db  0x86 ; '.'
0000000000019231         db  0x06 ; '.'
0000000000019232         db  0x41 ; 'A'
0000000000019233         db  0x0e ; '.'
0000000000019234         db  0x38 ; '8'
0000000000019235         db  0x83 ; '.'
0000000000019236         db  0x07 ; '.'
0000000000019237         db  0x4a ; 'J'
0000000000019238         db  0x0e ; '.'
0000000000019239         db  0x80 ; '.'
000000000001923a         db  0x01 ; '.'
000000000001923b         db  0x03 ; '.'
000000000001923c         db  0x3b ; ';'
000000000001923d         db  0x01 ; '.'
000000000001923e         db  0x0a ; '.'
000000000001923f         db  0x0e ; '.'
0000000000019240         db  0x38 ; '8'
0000000000019241         db  0x41 ; 'A'
0000000000019242         db  0x0e ; '.'
0000000000019243         db  0x30 ; '0'
0000000000019244         db  0x41 ; 'A'
0000000000019245         db  0x0e ; '.'
0000000000019246         db  0x28 ; '('
0000000000019247         db  0x42 ; 'B'
0000000000019248         db  0x0e ; '.'
0000000000019249         db  0x20 ; ' '
000000000001924a         db  0x42 ; 'B'
000000000001924b         db  0x0e ; '.'
000000000001924c         db  0x18 ; '.'
000000000001924d         db  0x42 ; 'B'
000000000001924e         db  0x0e ; '.'
000000000001924f         db  0x10 ; '.'
0000000000019250         db  0x42 ; 'B'
0000000000019251         db  0x0e ; '.'
0000000000019252         db  0x08 ; '.'
0000000000019253         db  0x41 ; 'A'
0000000000019254         db  0x0b ; '.'
0000000000019255         db  0x00 ; '.'
0000000000019256         db  0x00 ; '.'
0000000000019257         db  0x00 ; '.'
0000000000019258         dd         0x0000004c                                  ; Length of the record
000000000001925c         dd         0x0000194c                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000019260         db         0xe0, 0x21, 2 dup (0xff)                    ; begin 0xb440
0000000000019264         db         0x3b, 0x02, 2 dup (0x00)                    ; length 0x23b (end at 0xb67b)
0000000000019268         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019269         db  0x42 ; 'B'
000000000001926a         db  0x0e ; '.'
000000000001926b         db  0x10 ; '.'
000000000001926c         db  0x8f ; '.'
000000000001926d         db  0x02 ; '.'
000000000001926e         db  0x42 ; 'B'
000000000001926f         db  0x0e ; '.'
0000000000019270         db  0x18 ; '.'
0000000000019271         db  0x8e ; '.'
0000000000019272         db  0x03 ; '.'
0000000000019273         db  0x45 ; 'E'
0000000000019274         db  0x0e ; '.'
0000000000019275         db  0x20 ; ' '
0000000000019276         db  0x8d ; '.'
0000000000019277         db  0x04 ; '.'
0000000000019278         db  0x42 ; 'B'
0000000000019279         db  0x0e ; '.'
000000000001927a         db  0x28 ; '('
000000000001927b         db  0x8c ; '.'
000000000001927c         db  0x05 ; '.'
000000000001927d         db  0x45 ; 'E'
000000000001927e         db  0x0e ; '.'
000000000001927f         db  0x30 ; '0'
0000000000019280         db  0x86 ; '.'
0000000000019281         db  0x06 ; '.'
0000000000019282         db  0x41 ; 'A'
0000000000019283         db  0x0e ; '.'
0000000000019284         db  0x38 ; '8'
0000000000019285         db  0x83 ; '.'
0000000000019286         db  0x07 ; '.'
0000000000019287         db  0x48 ; 'H'
0000000000019288         db  0x0e ; '.'
0000000000019289         db  0x80 ; '.'
000000000001928a         db  0x01 ; '.'
000000000001928b         db  0x03 ; '.'
000000000001928c         db  0xf3 ; '.'
000000000001928d         db  0x01 ; '.'
000000000001928e         db  0x0a ; '.'
000000000001928f         db  0x0e ; '.'
0000000000019290         db  0x38 ; '8'
0000000000019291         db  0x41 ; 'A'
0000000000019292         db  0x0e ; '.'
0000000000019293         db  0x30 ; '0'
0000000000019294         db  0x41 ; 'A'
0000000000019295         db  0x0e ; '.'
0000000000019296         db  0x28 ; '('
0000000000019297         db  0x42 ; 'B'
0000000000019298         db  0x0e ; '.'
0000000000019299         db  0x20 ; ' '
000000000001929a         db  0x42 ; 'B'
000000000001929b         db  0x0e ; '.'
000000000001929c         db  0x18 ; '.'
000000000001929d         db  0x42 ; 'B'
000000000001929e         db  0x0e ; '.'
000000000001929f         db  0x10 ; '.'
00000000000192a0         db  0x42 ; 'B'
00000000000192a1         db  0x0e ; '.'
00000000000192a2         db  0x08 ; '.'
00000000000192a3         db  0x4a ; 'J'
00000000000192a4         db  0x0b ; '.'
00000000000192a5         db  0x00 ; '.'
00000000000192a6         db  0x00 ; '.'
00000000000192a7         db  0x00 ; '.'
00000000000192a8         dd         0x0000004c                                  ; Length of the record
00000000000192ac         dd         0x0000199c                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
00000000000192b0         db         0xd0, 0x23, 2 dup (0xff)                    ; begin 0xb680
00000000000192b4         db         0x91, 0x0b, 2 dup (0x00)                    ; length 0xb91 (end at 0xc211)
00000000000192b8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000192b9         db  0x42 ; 'B'
00000000000192ba         db  0x0e ; '.'
00000000000192bb         db  0x10 ; '.'
00000000000192bc         db  0x8f ; '.'
00000000000192bd         db  0x02 ; '.'
00000000000192be         db  0x42 ; 'B'
00000000000192bf         db  0x0e ; '.'
00000000000192c0         db  0x18 ; '.'
00000000000192c1         db  0x8e ; '.'
00000000000192c2         db  0x03 ; '.'
00000000000192c3         db  0x45 ; 'E'
00000000000192c4         db  0x0e ; '.'
00000000000192c5         db  0x20 ; ' '
00000000000192c6         db  0x8d ; '.'
00000000000192c7         db  0x04 ; '.'
00000000000192c8         db  0x42 ; 'B'
00000000000192c9         db  0x0e ; '.'
00000000000192ca         db  0x28 ; '('
00000000000192cb         db  0x8c ; '.'
00000000000192cc         db  0x05 ; '.'
00000000000192cd         db  0x46 ; 'F'
00000000000192ce         db  0x0e ; '.'
00000000000192cf         db  0x30 ; '0'
00000000000192d0         db  0x86 ; '.'
00000000000192d1         db  0x06 ; '.'
00000000000192d2         db  0x41 ; 'A'
00000000000192d3         db  0x0e ; '.'
00000000000192d4         db  0x38 ; '8'
00000000000192d5         db  0x83 ; '.'
00000000000192d6         db  0x07 ; '.'
00000000000192d7         db  0x47 ; 'G'
00000000000192d8         db  0x0e ; '.'
00000000000192d9         db  0xc0 ; '.'
00000000000192da         db  0x02 ; '.'
00000000000192db         db  0x03 ; '.'
00000000000192dc         db  0x17 ; '.'
00000000000192dd         db  0x04 ; '.'
00000000000192de         db  0x0a ; '.'
00000000000192df         db  0x0e ; '.'
00000000000192e0         db  0x38 ; '8'
00000000000192e1         db  0x41 ; 'A'
00000000000192e2         db  0x0e ; '.'
00000000000192e3         db  0x30 ; '0'
00000000000192e4         db  0x41 ; 'A'
00000000000192e5         db  0x0e ; '.'
00000000000192e6         db  0x28 ; '('
00000000000192e7         db  0x42 ; 'B'
00000000000192e8         db  0x0e ; '.'
00000000000192e9         db  0x20 ; ' '
00000000000192ea         db  0x42 ; 'B'
00000000000192eb         db  0x0e ; '.'
00000000000192ec         db  0x18 ; '.'
00000000000192ed         db  0x42 ; 'B'
00000000000192ee         db  0x0e ; '.'
00000000000192ef         db  0x10 ; '.'
00000000000192f0         db  0x42 ; 'B'
00000000000192f1         db  0x0e ; '.'
00000000000192f2         db  0x08 ; '.'
00000000000192f3         db  0x46 ; 'F'
00000000000192f4         db  0x0b ; '.'
00000000000192f5         db  0x00 ; '.'
00000000000192f6         db  0x00 ; '.'
00000000000192f7         db  0x00 ; '.'
00000000000192f8         dd         0x00000030                                  ; Length of the record
00000000000192fc         dd         0x000019ec                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000019300         db         0x20, 0x2f, 2 dup (0xff)                    ; begin 0xc220
0000000000019304         db         0x87, 3 dup (0x00)                          ; length 0x87 (end at 0xc2a7)
0000000000019308         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019309         db  0x47 ; 'G'
000000000001930a         db  0x0e ; '.'
000000000001930b         db  0x10 ; '.'
000000000001930c         db  0x86 ; '.'
000000000001930d         db  0x02 ; '.'
000000000001930e         db  0x41 ; 'A'
000000000001930f         db  0x0e ; '.'
0000000000019310         db  0x18 ; '.'
0000000000019311         db  0x83 ; '.'
0000000000019312         db  0x03 ; '.'
0000000000019313         db  0x4a ; 'J'
0000000000019314         db  0x0e ; '.'
0000000000019315         db  0x20 ; ' '
0000000000019316         db  0x02 ; '.'
0000000000019317         db  0x4e ; 'N'
0000000000019318         db  0x0e ; '.'
0000000000019319         db  0x18 ; '.'
000000000001931a         db  0x41 ; 'A'
000000000001931b         db  0x0e ; '.'
000000000001931c         db  0x10 ; '.'
000000000001931d         db  0x41 ; 'A'
000000000001931e         db  0x0e ; '.'
000000000001931f         db  0x08 ; '.'
0000000000019320         db  0x46 ; 'F'
0000000000019321         db  0xc3 ; '.'
0000000000019322         db  0xc6 ; '.'
0000000000019323         db  0x58 ; 'X'
0000000000019324         db  0x0e ; '.'
0000000000019325         db  0x20 ; ' '
0000000000019326         db  0x83 ; '.'
0000000000019327         db  0x03 ; '.'
0000000000019328         db  0x86 ; '.'
0000000000019329         db  0x02 ; '.'
000000000001932a         db  0x00 ; '.'
000000000001932b         db  0x00 ; '.'
000000000001932c         dd         0x00000028                                  ; Length of the record
0000000000019330         dd         0x00001a20                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000019334         db         0x7c, 0x2f, 2 dup (0xff)                    ; begin 0xc2b0
0000000000019338         db         0x4f, 3 dup (0x00)                          ; length 0x4f (end at 0xc2ff)
000000000001933c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001933d         db  0x42 ; 'B'
000000000001933e         db  0x0e ; '.'
000000000001933f         db  0x10 ; '.'
0000000000019340         db  0x8c ; '.'
0000000000019341         db  0x02 ; '.'
0000000000019342         db  0x41 ; 'A'
0000000000019343         db  0x0e ; '.'
0000000000019344         db  0x18 ; '.'
0000000000019345         db  0x86 ; '.'
0000000000019346         db  0x03 ; '.'
0000000000019347         db  0x44 ; 'D'
0000000000019348         db  0x0e ; '.'
0000000000019349         db  0x20 ; ' '
000000000001934a         db  0x83 ; '.'
000000000001934b         db  0x04 ; '.'
000000000001934c         db  0x7c ; '|'
000000000001934d         db  0x0e ; '.'
000000000001934e         db  0x18 ; '.'
000000000001934f         db  0x45 ; 'E'
0000000000019350         db  0x0e ; '.'
0000000000019351         db  0x10 ; '.'
0000000000019352         db  0x42 ; 'B'
0000000000019353         db  0x0e ; '.'
0000000000019354         db  0x08 ; '.'
0000000000019355         db  0x00 ; '.'
0000000000019356         db  0x00 ; '.'
0000000000019357         db  0x00 ; '.'
0000000000019358         dd         0x0000002c                                  ; Length of the record
000000000001935c         dd         0x00001a4c                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000019360         db         0xa0, 0x2f, 2 dup (0xff)                    ; begin 0xc300
0000000000019364         db         0x94, 3 dup (0x00)                          ; length 0x94 (end at 0xc394)
0000000000019368         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019369         db  0x42 ; 'B'
000000000001936a         db  0x0e ; '.'
000000000001936b         db  0x10 ; '.'
000000000001936c         db  0x8c ; '.'
000000000001936d         db  0x02 ; '.'
000000000001936e         db  0x41 ; 'A'
000000000001936f         db  0x0e ; '.'
0000000000019370         db  0x18 ; '.'
0000000000019371         db  0x86 ; '.'
0000000000019372         db  0x03 ; '.'
0000000000019373         db  0x41 ; 'A'
0000000000019374         db  0x0e ; '.'
0000000000019375         db  0x20 ; ' '
0000000000019376         db  0x83 ; '.'
0000000000019377         db  0x04 ; '.'
0000000000019378         db  0x02 ; '.'
0000000000019379         db  0x6d ; 'm'
000000000001937a         db  0x0a ; '.'
000000000001937b         db  0x0e ; '.'
000000000001937c         db  0x18 ; '.'
000000000001937d         db  0x41 ; 'A'
000000000001937e         db  0x0e ; '.'
000000000001937f         db  0x10 ; '.'
0000000000019380         db  0x42 ; 'B'
0000000000019381         db  0x0e ; '.'
0000000000019382         db  0x08 ; '.'
0000000000019383         db  0x41 ; 'A'
0000000000019384         db  0x0b ; '.'
0000000000019385         db  0x00 ; '.'
0000000000019386         db  0x00 ; '.'
0000000000019387         db  0x00 ; '.'
0000000000019388         dd         0x00000030                                  ; Length of the record
000000000001938c         dd         0x00001a7c                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000019390         db         0x10, 0x30, 2 dup (0xff)                    ; begin 0xc3a0
0000000000019394         db         0x4c, 3 dup (0x00)                          ; length 0x4c (end at 0xc3ec)
0000000000019398         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019399         db  0x41 ; 'A'
000000000001939a         db  0x0e ; '.'
000000000001939b         db  0x10 ; '.'
000000000001939c         db  0x86 ; '.'
000000000001939d         db  0x02 ; '.'
000000000001939e         db  0x41 ; 'A'
000000000001939f         db  0x0e ; '.'
00000000000193a0         db  0x18 ; '.'
00000000000193a1         db  0x83 ; '.'
00000000000193a2         db  0x03 ; '.'
00000000000193a3         db  0x4d ; 'M'
00000000000193a4         db  0x0e ; '.'
00000000000193a5         db  0x20 ; ' '
00000000000193a6         db  0x67 ; 'g'
00000000000193a7         db  0x0a ; '.'
00000000000193a8         db  0x0e ; '.'
00000000000193a9         db  0x18 ; '.'
00000000000193aa         db  0x43 ; 'C'
00000000000193ab         db  0x0e ; '.'
00000000000193ac         db  0x10 ; '.'
00000000000193ad         db  0x41 ; 'A'
00000000000193ae         db  0x0e ; '.'
00000000000193af         db  0x08 ; '.'
00000000000193b0         db  0x46 ; 'F'
00000000000193b1         db  0x0b ; '.'
00000000000193b2         db  0x44 ; 'D'
00000000000193b3         db  0x0e ; '.'
00000000000193b4         db  0x18 ; '.'
00000000000193b5         db  0x46 ; 'F'
00000000000193b6         db  0x0e ; '.'
00000000000193b7         db  0x10 ; '.'
00000000000193b8         db  0x41 ; 'A'
00000000000193b9         db  0x0e ; '.'
00000000000193ba         db  0x08 ; '.'
00000000000193bb         db  0x00 ; '.'
00000000000193bc         dd         0x00000040                                  ; Length of the record
00000000000193c0         dd         0x00001ab0                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
00000000000193c4         db         0x2c, 0x30, 2 dup (0xff)                    ; begin 0xc3f0
00000000000193c8         db         0x0d, 0x08, 2 dup (0x00)                    ; length 0x80d (end at 0xcbfd)
00000000000193cc         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000193cd         db  0x42 ; 'B'
00000000000193ce         db  0x0e ; '.'
00000000000193cf         db  0x10 ; '.'
00000000000193d0         db  0x8e ; '.'
00000000000193d1         db  0x02 ; '.'
00000000000193d2         db  0x42 ; 'B'
00000000000193d3         db  0x0e ; '.'
00000000000193d4         db  0x18 ; '.'
00000000000193d5         db  0x8d ; '.'
00000000000193d6         db  0x03 ; '.'
00000000000193d7         db  0x45 ; 'E'
00000000000193d8         db  0x0e ; '.'
00000000000193d9         db  0x20 ; ' '
00000000000193da         db  0x8c ; '.'
00000000000193db         db  0x04 ; '.'
00000000000193dc         db  0x41 ; 'A'
00000000000193dd         db  0x0e ; '.'
00000000000193de         db  0x28 ; '('
00000000000193df         db  0x86 ; '.'
00000000000193e0         db  0x05 ; '.'
00000000000193e1         db  0x44 ; 'D'
00000000000193e2         db  0x0e ; '.'
00000000000193e3         db  0x30 ; '0'
00000000000193e4         db  0x83 ; '.'
00000000000193e5         db  0x06 ; '.'
00000000000193e6         db  0x4a ; 'J'
00000000000193e7         db  0x0e ; '.'
00000000000193e8         db  0x40 ; '@'
00000000000193e9         db  0x02 ; '.'
00000000000193ea         db  0xd2 ; '.'
00000000000193eb         db  0x0a ; '.'
00000000000193ec         db  0x0e ; '.'
00000000000193ed         db  0x30 ; '0'
00000000000193ee         db  0x41 ; 'A'
00000000000193ef         db  0x0e ; '.'
00000000000193f0         db  0x28 ; '('
00000000000193f1         db  0x41 ; 'A'
00000000000193f2         db  0x0e ; '.'
00000000000193f3         db  0x20 ; ' '
00000000000193f4         db  0x42 ; 'B'
00000000000193f5         db  0x0e ; '.'
00000000000193f6         db  0x18 ; '.'
00000000000193f7         db  0x42 ; 'B'
00000000000193f8         db  0x0e ; '.'
00000000000193f9         db  0x10 ; '.'
00000000000193fa         db  0x42 ; 'B'
00000000000193fb         db  0x0e ; '.'
00000000000193fc         db  0x08 ; '.'
00000000000193fd         db  0x46 ; 'F'
00000000000193fe         db  0x0b ; '.'
00000000000193ff         db  0x00 ; '.'
0000000000019400         dd         0x0000005c                                  ; Length of the record
0000000000019404         dd         0x00001af4                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000019408         db         0xf8, 0x37, 2 dup (0xff)                    ; begin 0xcc00
000000000001940c         db         0x6a, 0x02, 2 dup (0x00)                    ; length 0x26a (end at 0xce6a)
0000000000019410         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019411         db  0x42 ; 'B'
0000000000019412         db  0x0e ; '.'
0000000000019413         db  0x10 ; '.'
0000000000019414         db  0x8f ; '.'
0000000000019415         db  0x02 ; '.'
0000000000019416         db  0x42 ; 'B'
0000000000019417         db  0x0e ; '.'
0000000000019418         db  0x18 ; '.'
0000000000019419         db  0x8e ; '.'
000000000001941a         db  0x03 ; '.'
000000000001941b         db  0x45 ; 'E'
000000000001941c         db  0x0e ; '.'
000000000001941d         db  0x20 ; ' '
000000000001941e         db  0x8d ; '.'
000000000001941f         db  0x04 ; '.'
0000000000019420         db  0x42 ; 'B'
0000000000019421         db  0x0e ; '.'
0000000000019422         db  0x28 ; '('
0000000000019423         db  0x8c ; '.'
0000000000019424         db  0x05 ; '.'
0000000000019425         db  0x44 ; 'D'
0000000000019426         db  0x0e ; '.'
0000000000019427         db  0x30 ; '0'
0000000000019428         db  0x86 ; '.'
0000000000019429         db  0x06 ; '.'
000000000001942a         db  0x41 ; 'A'
000000000001942b         db  0x0e ; '.'
000000000001942c         db  0x38 ; '8'
000000000001942d         db  0x83 ; '.'
000000000001942e         db  0x07 ; '.'
000000000001942f         db  0x4f ; 'O'
0000000000019430         db  0x0e ; '.'
0000000000019431         db  0x90 ; '.'
0000000000019432         db  0x01 ; '.'
0000000000019433         db  0x02 ; '.'
0000000000019434         db  0x5b ; '['
0000000000019435         db  0x0e ; '.'
0000000000019436         db  0x98 ; '.'
0000000000019437         db  0x01 ; '.'
0000000000019438         db  0x45 ; 'E'
0000000000019439         db  0x0e ; '.'
000000000001943a         db  0xa0 ; '.'
000000000001943b         db  0x01 ; '.'
000000000001943c         db  0x6c ; 'l'
000000000001943d         db  0x0e ; '.'
000000000001943e         db  0x98 ; '.'
000000000001943f         db  0x01 ; '.'
0000000000019440         db  0x41 ; 'A'
0000000000019441         db  0x0e ; '.'
0000000000019442         db  0x90 ; '.'
0000000000019443         db  0x01 ; '.'
0000000000019444         db  0x03 ; '.'
0000000000019445         db  0x31 ; '1'
0000000000019446         db  0x01 ; '.'
0000000000019447         db  0x0a ; '.'
0000000000019448         db  0x0e ; '.'
0000000000019449         db  0x38 ; '8'
000000000001944a         db  0x41 ; 'A'
000000000001944b         db  0x0e ; '.'
000000000001944c         db  0x30 ; '0'
000000000001944d         db  0x41 ; 'A'
000000000001944e         db  0x0e ; '.'
000000000001944f         db  0x28 ; '('
0000000000019450         db  0x42 ; 'B'
0000000000019451         db  0x0e ; '.'
0000000000019452         db  0x20 ; ' '
0000000000019453         db  0x42 ; 'B'
0000000000019454         db  0x0e ; '.'
0000000000019455         db  0x18 ; '.'
0000000000019456         db  0x42 ; 'B'
0000000000019457         db  0x0e ; '.'
0000000000019458         db  0x10 ; '.'
0000000000019459         db  0x42 ; 'B'
000000000001945a         db  0x0e ; '.'
000000000001945b         db  0x08 ; '.'
000000000001945c         db  0x49 ; 'I'
000000000001945d         db  0x0b ; '.'
000000000001945e         db  0x00 ; '.'
000000000001945f         db  0x00 ; '.'
0000000000019460         dd         0x0000004c                                  ; Length of the record
0000000000019464         dd         0x00001b54                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000019468         db         0x08, 0x3a, 2 dup (0xff)                    ; begin 0xce70
000000000001946c         db         0x27, 0x05, 2 dup (0x00)                    ; length 0x527 (end at 0xd397)
0000000000019470         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019471         db  0x42 ; 'B'
0000000000019472         db  0x0e ; '.'
0000000000019473         db  0x10 ; '.'
0000000000019474         db  0x8f ; '.'
0000000000019475         db  0x02 ; '.'
0000000000019476         db  0x42 ; 'B'
0000000000019477         db  0x0e ; '.'
0000000000019478         db  0x18 ; '.'
0000000000019479         db  0x8e ; '.'
000000000001947a         db  0x03 ; '.'
000000000001947b         db  0x45 ; 'E'
000000000001947c         db  0x0e ; '.'
000000000001947d         db  0x20 ; ' '
000000000001947e         db  0x8d ; '.'
000000000001947f         db  0x04 ; '.'
0000000000019480         db  0x42 ; 'B'
0000000000019481         db  0x0e ; '.'
0000000000019482         db  0x28 ; '('
0000000000019483         db  0x8c ; '.'
0000000000019484         db  0x05 ; '.'
0000000000019485         db  0x41 ; 'A'
0000000000019486         db  0x0e ; '.'
0000000000019487         db  0x30 ; '0'
0000000000019488         db  0x86 ; '.'
0000000000019489         db  0x06 ; '.'
000000000001948a         db  0x41 ; 'A'
000000000001948b         db  0x0e ; '.'
000000000001948c         db  0x38 ; '8'
000000000001948d         db  0x83 ; '.'
000000000001948e         db  0x07 ; '.'
000000000001948f         db  0x4c ; 'L'
0000000000019490         db  0x0e ; '.'
0000000000019491         db  0xb0 ; '.'
0000000000019492         db  0x03 ; '.'
0000000000019493         db  0x03 ; '.'
0000000000019494         db  0x82 ; '.'
0000000000019495         db  0x04 ; '.'
0000000000019496         db  0x0a ; '.'
0000000000019497         db  0x0e ; '.'
0000000000019498         db  0x38 ; '8'
0000000000019499         db  0x41 ; 'A'
000000000001949a         db  0x0e ; '.'
000000000001949b         db  0x30 ; '0'
000000000001949c         db  0x41 ; 'A'
000000000001949d         db  0x0e ; '.'
000000000001949e         db  0x28 ; '('
000000000001949f         db  0x42 ; 'B'
00000000000194a0         db  0x0e ; '.'
00000000000194a1         db  0x20 ; ' '
00000000000194a2         db  0x42 ; 'B'
00000000000194a3         db  0x0e ; '.'
00000000000194a4         db  0x18 ; '.'
00000000000194a5         db  0x42 ; 'B'
00000000000194a6         db  0x0e ; '.'
00000000000194a7         db  0x10 ; '.'
00000000000194a8         db  0x42 ; 'B'
00000000000194a9         db  0x0e ; '.'
00000000000194aa         db  0x08 ; '.'
00000000000194ab         db  0x41 ; 'A'
00000000000194ac         db  0x0b ; '.'
00000000000194ad         db  0x00 ; '.'
00000000000194ae         db  0x00 ; '.'
00000000000194af         db  0x00 ; '.'
00000000000194b0         dd         0x00000038                                  ; Length of the record
00000000000194b4         dd         0x00001ba4                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
00000000000194b8         db         0xe8, 0x3e, 2 dup (0xff)                    ; begin 0xd3a0
00000000000194bc         db         0x54, 0x02, 2 dup (0x00)                    ; length 0x254 (end at 0xd5f4)
00000000000194c0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000194c1         db  0x46 ; 'F'
00000000000194c2         db  0x0e ; '.'
00000000000194c3         db  0x10 ; '.'
00000000000194c4         db  0x8d ; '.'
00000000000194c5         db  0x02 ; '.'
00000000000194c6         db  0x42 ; 'B'
00000000000194c7         db  0x0e ; '.'
00000000000194c8         db  0x18 ; '.'
00000000000194c9         db  0x8c ; '.'
00000000000194ca         db  0x03 ; '.'
00000000000194cb         db  0x45 ; 'E'
00000000000194cc         db  0x0e ; '.'
00000000000194cd         db  0x20 ; ' '
00000000000194ce         db  0x86 ; '.'
00000000000194cf         db  0x04 ; '.'
00000000000194d0         db  0x41 ; 'A'
00000000000194d1         db  0x0e ; '.'
00000000000194d2         db  0x28 ; '('
00000000000194d3         db  0x83 ; '.'
00000000000194d4         db  0x05 ; '.'
00000000000194d5         db  0x44 ; 'D'
00000000000194d6         db  0x0e ; '.'
00000000000194d7         db  0x30 ; '0'
00000000000194d8         db  0x02 ; '.'
00000000000194d9         db  0xe4 ; '.'
00000000000194da         db  0x0a ; '.'
00000000000194db         db  0x0e ; '.'
00000000000194dc         db  0x28 ; '('
00000000000194dd         db  0x43 ; 'C'
00000000000194de         db  0x0e ; '.'
00000000000194df         db  0x20 ; ' '
00000000000194e0         db  0x41 ; 'A'
00000000000194e1         db  0x0e ; '.'
00000000000194e2         db  0x18 ; '.'
00000000000194e3         db  0x42 ; 'B'
00000000000194e4         db  0x0e ; '.'
00000000000194e5         db  0x10 ; '.'
00000000000194e6         db  0x42 ; 'B'
00000000000194e7         db  0x0e ; '.'
00000000000194e8         db  0x08 ; '.'
00000000000194e9         db  0x42 ; 'B'
00000000000194ea         db  0x0b ; '.'
00000000000194eb         db  0x00 ; '.'
00000000000194ec         dd         0x0000004c                                  ; Length of the record
00000000000194f0         dd         0x00001be0                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
00000000000194f4         db         0x0c, 0x41, 2 dup (0xff)                    ; begin 0xd600
00000000000194f8         db         0x51, 0x07, 2 dup (0x00)                    ; length 0x751 (end at 0xdd51)
00000000000194fc         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000194fd         db  0x42 ; 'B'
00000000000194fe         db  0x0e ; '.'
00000000000194ff         db  0x10 ; '.'
0000000000019500         db  0x8f ; '.'
0000000000019501         db  0x02 ; '.'
0000000000019502         db  0x42 ; 'B'
0000000000019503         db  0x0e ; '.'
0000000000019504         db  0x18 ; '.'
0000000000019505         db  0x8e ; '.'
0000000000019506         db  0x03 ; '.'
0000000000019507         db  0x45 ; 'E'
0000000000019508         db  0x0e ; '.'
0000000000019509         db  0x20 ; ' '
000000000001950a         db  0x8d ; '.'
000000000001950b         db  0x04 ; '.'
000000000001950c         db  0x42 ; 'B'
000000000001950d         db  0x0e ; '.'
000000000001950e         db  0x28 ; '('
000000000001950f         db  0x8c ; '.'
0000000000019510         db  0x05 ; '.'
0000000000019511         db  0x41 ; 'A'
0000000000019512         db  0x0e ; '.'
0000000000019513         db  0x30 ; '0'
0000000000019514         db  0x86 ; '.'
0000000000019515         db  0x06 ; '.'
0000000000019516         db  0x41 ; 'A'
0000000000019517         db  0x0e ; '.'
0000000000019518         db  0x38 ; '8'
0000000000019519         db  0x83 ; '.'
000000000001951a         db  0x07 ; '.'
000000000001951b         db  0x4d ; 'M'
000000000001951c         db  0x0e ; '.'
000000000001951d         db  0x90 ; '.'
000000000001951e         db  0x02 ; '.'
000000000001951f         db  0x03 ; '.'
0000000000019520         db  0x88 ; '.'
0000000000019521         db  0x05 ; '.'
0000000000019522         db  0x0a ; '.'
0000000000019523         db  0x0e ; '.'
0000000000019524         db  0x38 ; '8'
0000000000019525         db  0x41 ; 'A'
0000000000019526         db  0x0e ; '.'
0000000000019527         db  0x30 ; '0'
0000000000019528         db  0x41 ; 'A'
0000000000019529         db  0x0e ; '.'
000000000001952a         db  0x28 ; '('
000000000001952b         db  0x42 ; 'B'
000000000001952c         db  0x0e ; '.'
000000000001952d         db  0x20 ; ' '
000000000001952e         db  0x42 ; 'B'
000000000001952f         db  0x0e ; '.'
0000000000019530         db  0x18 ; '.'
0000000000019531         db  0x42 ; 'B'
0000000000019532         db  0x0e ; '.'
0000000000019533         db  0x10 ; '.'
0000000000019534         db  0x42 ; 'B'
0000000000019535         db  0x0e ; '.'
0000000000019536         db  0x08 ; '.'
0000000000019537         db  0x44 ; 'D'
0000000000019538         db  0x0b ; '.'
0000000000019539         db  0x00 ; '.'
000000000001953a         db  0x00 ; '.'
000000000001953b         db  0x00 ; '.'
000000000001953c         dd         0x0000002c                                  ; Length of the record
0000000000019540         dd         0x00001c30                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000019544         db         0x1c, 0x48, 2 dup (0xff)                    ; begin 0xdd60
0000000000019548         db         0xea, 0x08, 2 dup (0x00)                    ; length 0x8ea (end at 0xe64a)
000000000001954c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001954d         db  0x41 ; 'A'
000000000001954e         db  0x0e ; '.'
000000000001954f         db  0x10 ; '.'
0000000000019550         db  0x86 ; '.'
0000000000019551         db  0x02 ; '.'
0000000000019552         db  0x43 ; 'C'
0000000000019553         db  0x0d ; '.'
0000000000019554         db  0x06 ; '.'
0000000000019555         db  0x48 ; 'H'
0000000000019556         db  0x8f ; '.'
0000000000019557         db  0x03 ; '.'
0000000000019558         db  0x8e ; '.'
0000000000019559         db  0x04 ; '.'
000000000001955a         db  0x8d ; '.'
000000000001955b         db  0x05 ; '.'
000000000001955c         db  0x8c ; '.'
000000000001955d         db  0x06 ; '.'
000000000001955e         db  0x4e ; 'N'
000000000001955f         db  0x83 ; '.'
0000000000019560         db  0x07 ; '.'
0000000000019561         db  0x03 ; '.'
0000000000019562         db  0x20 ; ' '
0000000000019563         db  0x07 ; '.'
0000000000019564         db  0x0a ; '.'
0000000000019565         db  0x0c ; '.'
0000000000019566         db  0x07 ; '.'
0000000000019567         db  0x08 ; '.'
0000000000019568         db  0x41 ; 'A'
0000000000019569         db  0x0b ; '.'
000000000001956a         db  0x00 ; '.'
000000000001956b         db  0x00 ; '.'
000000000001956c         dd         0x00000068                                  ; Length of the record
0000000000019570         dd         0x00001c60                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000019574         db         0xdc, 0x50, 2 dup (0xff)                    ; begin 0xe650
0000000000019578         db         0x96, 0x01, 2 dup (0x00)                    ; length 0x196 (end at 0xe7e6)
000000000001957c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001957d         db  0x42 ; 'B'
000000000001957e         db  0x0e ; '.'
000000000001957f         db  0x10 ; '.'
0000000000019580         db  0x8f ; '.'
0000000000019581         db  0x02 ; '.'
0000000000019582         db  0x42 ; 'B'
0000000000019583         db  0x0e ; '.'
0000000000019584         db  0x18 ; '.'
0000000000019585         db  0x8e ; '.'
0000000000019586         db  0x03 ; '.'
0000000000019587         db  0x45 ; 'E'
0000000000019588         db  0x0e ; '.'
0000000000019589         db  0x20 ; ' '
000000000001958a         db  0x8d ; '.'
000000000001958b         db  0x04 ; '.'
000000000001958c         db  0x42 ; 'B'
000000000001958d         db  0x0e ; '.'
000000000001958e         db  0x28 ; '('
000000000001958f         db  0x8c ; '.'
0000000000019590         db  0x05 ; '.'
0000000000019591         db  0x44 ; 'D'
0000000000019592         db  0x0e ; '.'
0000000000019593         db  0x30 ; '0'
0000000000019594         db  0x86 ; '.'
0000000000019595         db  0x06 ; '.'
0000000000019596         db  0x41 ; 'A'
0000000000019597         db  0x0e ; '.'
0000000000019598         db  0x38 ; '8'
0000000000019599         db  0x83 ; '.'
000000000001959a         db  0x07 ; '.'
000000000001959b         db  0x51 ; 'Q'
000000000001959c         db  0x0e ; '.'
000000000001959d         db  0x58 ; 'X'
000000000001959e         db  0x49 ; 'I'
000000000001959f         db  0x0e ; '.'
00000000000195a0         db  0x60 ; '`'
00000000000195a1         db  0x4e ; 'N'
00000000000195a2         db  0x0e ; '.'
00000000000195a3         db  0x58 ; 'X'
00000000000195a4         db  0x41 ; 'A'
00000000000195a5         db  0x0e ; '.'
00000000000195a6         db  0x50 ; 'P'
00000000000195a7         db  0x46 ; 'F'
00000000000195a8         db  0x0a ; '.'
00000000000195a9         db  0x0e ; '.'
00000000000195aa         db  0x38 ; '8'
00000000000195ab         db  0x41 ; 'A'
00000000000195ac         db  0x0e ; '.'
00000000000195ad         db  0x30 ; '0'
00000000000195ae         db  0x41 ; 'A'
00000000000195af         db  0x0e ; '.'
00000000000195b0         db  0x28 ; '('
00000000000195b1         db  0x42 ; 'B'
00000000000195b2         db  0x0e ; '.'
00000000000195b3         db  0x20 ; ' '
00000000000195b4         db  0x42 ; 'B'
00000000000195b5         db  0x0e ; '.'
00000000000195b6         db  0x18 ; '.'
00000000000195b7         db  0x42 ; 'B'
00000000000195b8         db  0x0e ; '.'
00000000000195b9         db  0x10 ; '.'
00000000000195ba         db  0x42 ; 'B'
00000000000195bb         db  0x0e ; '.'
00000000000195bc         db  0x08 ; '.'
00000000000195bd         db  0x47 ; 'G'
00000000000195be         db  0x0b ; '.'
00000000000195bf         db  0x02 ; '.'
00000000000195c0         db  0x97 ; '.'
00000000000195c1         db  0x0a ; '.'
00000000000195c2         db  0x0e ; '.'
00000000000195c3         db  0x38 ; '8'
00000000000195c4         db  0x44 ; 'D'
00000000000195c5         db  0x0e ; '.'
00000000000195c6         db  0x30 ; '0'
00000000000195c7         db  0x41 ; 'A'
00000000000195c8         db  0x0e ; '.'
00000000000195c9         db  0x28 ; '('
00000000000195ca         db  0x42 ; 'B'
00000000000195cb         db  0x0e ; '.'
00000000000195cc         db  0x20 ; ' '
00000000000195cd         db  0x42 ; 'B'
00000000000195ce         db  0x0e ; '.'
00000000000195cf         db  0x18 ; '.'
00000000000195d0         db  0x42 ; 'B'
00000000000195d1         db  0x0e ; '.'
00000000000195d2         db  0x10 ; '.'
00000000000195d3         db  0x42 ; 'B'
00000000000195d4         db  0x0e ; '.'
00000000000195d5         db  0x08 ; '.'
00000000000195d6         db  0x4c ; 'L'
00000000000195d7         db  0x0b ; '.'
00000000000195d8         dd         0x0000005c                                  ; Length of the record
00000000000195dc         dd         0x00001ccc                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
00000000000195e0         db         0x10, 0x52, 2 dup (0xff)                    ; begin 0xe7f0
00000000000195e4         db         0xe1, 0x08, 2 dup (0x00)                    ; length 0x8e1 (end at 0xf0d1)
00000000000195e8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000195e9         db  0x42 ; 'B'
00000000000195ea         db  0x0e ; '.'
00000000000195eb         db  0x10 ; '.'
00000000000195ec         db  0x8f ; '.'
00000000000195ed         db  0x02 ; '.'
00000000000195ee         db  0x42 ; 'B'
00000000000195ef         db  0x0e ; '.'
00000000000195f0         db  0x18 ; '.'
00000000000195f1         db  0x8e ; '.'
00000000000195f2         db  0x03 ; '.'
00000000000195f3         db  0x42 ; 'B'
00000000000195f4         db  0x0e ; '.'
00000000000195f5         db  0x20 ; ' '
00000000000195f6         db  0x8d ; '.'
00000000000195f7         db  0x04 ; '.'
00000000000195f8         db  0x42 ; 'B'
00000000000195f9         db  0x0e ; '.'
00000000000195fa         db  0x28 ; '('
00000000000195fb         db  0x8c ; '.'
00000000000195fc         db  0x05 ; '.'
00000000000195fd         db  0x41 ; 'A'
00000000000195fe         db  0x0e ; '.'
00000000000195ff         db  0x30 ; '0'
0000000000019600         db  0x86 ; '.'
0000000000019601         db  0x06 ; '.'
0000000000019602         db  0x41 ; 'A'
0000000000019603         db  0x0e ; '.'
0000000000019604         db  0x38 ; '8'
0000000000019605         db  0x83 ; '.'
0000000000019606         db  0x07 ; '.'
0000000000019607         db  0x47 ; 'G'
0000000000019608         db  0x0e ; '.'
0000000000019609         db  0xf0 ; '.'
000000000001960a         db  0x01 ; '.'
000000000001960b         db  0x03 ; '.'
000000000001960c         db  0x85 ; '.'
000000000001960d         db  0x03 ; '.'
000000000001960e         db  0x0a ; '.'
000000000001960f         db  0x0e ; '.'
0000000000019610         db  0x38 ; '8'
0000000000019611         db  0x41 ; 'A'
0000000000019612         db  0x0e ; '.'
0000000000019613         db  0x30 ; '0'
0000000000019614         db  0x41 ; 'A'
0000000000019615         db  0x0e ; '.'
0000000000019616         db  0x28 ; '('
0000000000019617         db  0x42 ; 'B'
0000000000019618         db  0x0e ; '.'
0000000000019619         db  0x20 ; ' '
000000000001961a         db  0x42 ; 'B'
000000000001961b         db  0x0e ; '.'
000000000001961c         db  0x18 ; '.'
000000000001961d         db  0x42 ; 'B'
000000000001961e         db  0x0e ; '.'
000000000001961f         db  0x10 ; '.'
0000000000019620         db  0x42 ; 'B'
0000000000019621         db  0x0e ; '.'
0000000000019622         db  0x08 ; '.'
0000000000019623         db  0x48 ; 'H'
0000000000019624         db  0x0b ; '.'
0000000000019625         db  0x03 ; '.'
0000000000019626         db  0xd8 ; '.'
0000000000019627         db  0x02 ; '.'
0000000000019628         db  0x0e ; '.'
0000000000019629         db  0xf8 ; '.'
000000000001962a         db  0x01 ; '.'
000000000001962b         db  0x42 ; 'B'
000000000001962c         db  0x0e ; '.'
000000000001962d         db  0x80 ; '.'
000000000001962e         db  0x02 ; '.'
000000000001962f         db  0x4f ; 'O'
0000000000019630         db  0x0e ; '.'
0000000000019631         db  0xf8 ; '.'
0000000000019632         db  0x01 ; '.'
0000000000019633         db  0x44 ; 'D'
0000000000019634         db  0x0e ; '.'
0000000000019635         db  0xf0 ; '.'
0000000000019636         db  0x01 ; '.'
0000000000019637         db  0x00 ; '.'
0000000000019638         dd         0x00000048                                  ; Length of the record
000000000001963c         dd         0x00001d2c                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000019640         db         0xa0, 0x5a, 2 dup (0xff)                    ; begin 0xf0e0
0000000000019644         db         0xec, 0x01, 2 dup (0x00)                    ; length 0x1ec (end at 0xf2cc)
0000000000019648         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019649         db  0x42 ; 'B'
000000000001964a         db  0x0e ; '.'
000000000001964b         db  0x10 ; '.'
000000000001964c         db  0x8f ; '.'
000000000001964d         db  0x02 ; '.'
000000000001964e         db  0x42 ; 'B'
000000000001964f         db  0x0e ; '.'
0000000000019650         db  0x18 ; '.'
0000000000019651         db  0x8e ; '.'
0000000000019652         db  0x03 ; '.'
0000000000019653         db  0x42 ; 'B'
0000000000019654         db  0x0e ; '.'
0000000000019655         db  0x20 ; ' '
0000000000019656         db  0x8d ; '.'
0000000000019657         db  0x04 ; '.'
0000000000019658         db  0x42 ; 'B'
0000000000019659         db  0x0e ; '.'
000000000001965a         db  0x28 ; '('
000000000001965b         db  0x8c ; '.'
000000000001965c         db  0x05 ; '.'
000000000001965d         db  0x44 ; 'D'
000000000001965e         db  0x0e ; '.'
000000000001965f         db  0x30 ; '0'
0000000000019660         db  0x86 ; '.'
0000000000019661         db  0x06 ; '.'
0000000000019662         db  0x41 ; 'A'
0000000000019663         db  0x0e ; '.'
0000000000019664         db  0x38 ; '8'
0000000000019665         db  0x83 ; '.'
0000000000019666         db  0x07 ; '.'
0000000000019667         db  0x47 ; 'G'
0000000000019668         db  0x0e ; '.'
0000000000019669         db  0x70 ; 'p'
000000000001966a         db  0x02 ; '.'
000000000001966b         db  0x6c ; 'l'
000000000001966c         db  0x0a ; '.'
000000000001966d         db  0x0e ; '.'
000000000001966e         db  0x38 ; '8'
000000000001966f         db  0x41 ; 'A'
0000000000019670         db  0x0e ; '.'
0000000000019671         db  0x30 ; '0'
0000000000019672         db  0x41 ; 'A'
0000000000019673         db  0x0e ; '.'
0000000000019674         db  0x28 ; '('
0000000000019675         db  0x42 ; 'B'
0000000000019676         db  0x0e ; '.'
0000000000019677         db  0x20 ; ' '
0000000000019678         db  0x42 ; 'B'
0000000000019679         db  0x0e ; '.'
000000000001967a         db  0x18 ; '.'
000000000001967b         db  0x42 ; 'B'
000000000001967c         db  0x0e ; '.'
000000000001967d         db  0x10 ; '.'
000000000001967e         db  0x42 ; 'B'
000000000001967f         db  0x0e ; '.'
0000000000019680         db  0x08 ; '.'
0000000000019681         db  0x46 ; 'F'
0000000000019682         db  0x0b ; '.'
0000000000019683         db  0x00 ; '.'
0000000000019684         dd         0x0000005c                                  ; Length of the record
0000000000019688         dd         0x00001d78                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
000000000001968c         db         0x44, 0x5c, 2 dup (0xff)                    ; begin 0xf2d0
0000000000019690         db         0x40, 0x03, 2 dup (0x00)                    ; length 0x340 (end at 0xf610)
0000000000019694         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019695         db  0x42 ; 'B'
0000000000019696         db  0x0e ; '.'
0000000000019697         db  0x10 ; '.'
0000000000019698         db  0x8f ; '.'
0000000000019699         db  0x02 ; '.'
000000000001969a         db  0x42 ; 'B'
000000000001969b         db  0x0e ; '.'
000000000001969c         db  0x18 ; '.'
000000000001969d         db  0x8e ; '.'
000000000001969e         db  0x03 ; '.'
000000000001969f         db  0x45 ; 'E'
00000000000196a0         db  0x0e ; '.'
00000000000196a1         db  0x20 ; ' '
00000000000196a2         db  0x8d ; '.'
00000000000196a3         db  0x04 ; '.'
00000000000196a4         db  0x42 ; 'B'
00000000000196a5         db  0x0e ; '.'
00000000000196a6         db  0x28 ; '('
00000000000196a7         db  0x8c ; '.'
00000000000196a8         db  0x05 ; '.'
00000000000196a9         db  0x44 ; 'D'
00000000000196aa         db  0x0e ; '.'
00000000000196ab         db  0x30 ; '0'
00000000000196ac         db  0x86 ; '.'
00000000000196ad         db  0x06 ; '.'
00000000000196ae         db  0x41 ; 'A'
00000000000196af         db  0x0e ; '.'
00000000000196b0         db  0x38 ; '8'
00000000000196b1         db  0x83 ; '.'
00000000000196b2         db  0x07 ; '.'
00000000000196b3         db  0x44 ; 'D'
00000000000196b4         db  0x0e ; '.'
00000000000196b5         db  0xa0 ; '.'
00000000000196b6         db  0x01 ; '.'
00000000000196b7         db  0x03 ; '.'
00000000000196b8         db  0x5d ; ']'
00000000000196b9         db  0x01 ; '.'
00000000000196ba         db  0x0e ; '.'
00000000000196bb         db  0xa8 ; '.'
00000000000196bc         db  0x01 ; '.'
00000000000196bd         db  0x51 ; 'Q'
00000000000196be         db  0x0e ; '.'
00000000000196bf         db  0xb0 ; '.'
00000000000196c0         db  0x01 ; '.'
00000000000196c1         db  0x52 ; 'R'
00000000000196c2         db  0x0e ; '.'
00000000000196c3         db  0xa8 ; '.'
00000000000196c4         db  0x01 ; '.'
00000000000196c5         db  0x41 ; 'A'
00000000000196c6         db  0x0e ; '.'
00000000000196c7         db  0xa0 ; '.'
00000000000196c8         db  0x01 ; '.'
00000000000196c9         db  0x03 ; '.'
00000000000196ca         db  0x94 ; '.'
00000000000196cb         db  0x01 ; '.'
00000000000196cc         db  0x0a ; '.'
00000000000196cd         db  0x0e ; '.'
00000000000196ce         db  0x38 ; '8'
00000000000196cf         db  0x41 ; 'A'
00000000000196d0         db  0x0e ; '.'
00000000000196d1         db  0x30 ; '0'
00000000000196d2         db  0x41 ; 'A'
00000000000196d3         db  0x0e ; '.'
00000000000196d4         db  0x28 ; '('
00000000000196d5         db  0x42 ; 'B'
00000000000196d6         db  0x0e ; '.'
00000000000196d7         db  0x20 ; ' '
00000000000196d8         db  0x42 ; 'B'
00000000000196d9         db  0x0e ; '.'
00000000000196da         db  0x18 ; '.'
00000000000196db         db  0x42 ; 'B'
00000000000196dc         db  0x0e ; '.'
00000000000196dd         db  0x10 ; '.'
00000000000196de         db  0x42 ; 'B'
00000000000196df         db  0x0e ; '.'
00000000000196e0         db  0x08 ; '.'
00000000000196e1         db  0x41 ; 'A'
00000000000196e2         db  0x0b ; '.'
00000000000196e3         db  0x00 ; '.'
00000000000196e4         dd         0x0000004c                                  ; Length of the record
00000000000196e8         dd         0x00001dd8                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
00000000000196ec         db         0x24, 0x5f, 2 dup (0xff)                    ; begin 0xf610
00000000000196f0         db         0x30, 0x17, 2 dup (0x00)                    ; length 0x1730 (end at 0x10d40)
00000000000196f4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000196f5         db  0x42 ; 'B'
00000000000196f6         db  0x0e ; '.'
00000000000196f7         db  0x10 ; '.'
00000000000196f8         db  0x8f ; '.'
00000000000196f9         db  0x02 ; '.'
00000000000196fa         db  0x42 ; 'B'
00000000000196fb         db  0x0e ; '.'
00000000000196fc         db  0x18 ; '.'
00000000000196fd         db  0x8e ; '.'
00000000000196fe         db  0x03 ; '.'
00000000000196ff         db  0x42 ; 'B'
0000000000019700         db  0x0e ; '.'
0000000000019701         db  0x20 ; ' '
0000000000019702         db  0x8d ; '.'
0000000000019703         db  0x04 ; '.'
0000000000019704         db  0x42 ; 'B'
0000000000019705         db  0x0e ; '.'
0000000000019706         db  0x28 ; '('
0000000000019707         db  0x8c ; '.'
0000000000019708         db  0x05 ; '.'
0000000000019709         db  0x44 ; 'D'
000000000001970a         db  0x0e ; '.'
000000000001970b         db  0x30 ; '0'
000000000001970c         db  0x86 ; '.'
000000000001970d         db  0x06 ; '.'
000000000001970e         db  0x41 ; 'A'
000000000001970f         db  0x0e ; '.'
0000000000019710         db  0x38 ; '8'
0000000000019711         db  0x83 ; '.'
0000000000019712         db  0x07 ; '.'
0000000000019713         db  0x52 ; 'R'
0000000000019714         db  0x0e ; '.'
0000000000019715         db  0xf0 ; '.'
0000000000019716         db  0x04 ; '.'
0000000000019717         db  0x03 ; '.'
0000000000019718         db  0x7c ; '|'
0000000000019719         db  0x0b ; '.'
000000000001971a         db  0x0a ; '.'
000000000001971b         db  0x0e ; '.'
000000000001971c         db  0x38 ; '8'
000000000001971d         db  0x41 ; 'A'
000000000001971e         db  0x0e ; '.'
000000000001971f         db  0x30 ; '0'
0000000000019720         db  0x41 ; 'A'
0000000000019721         db  0x0e ; '.'
0000000000019722         db  0x28 ; '('
0000000000019723         db  0x42 ; 'B'
0000000000019724         db  0x0e ; '.'
0000000000019725         db  0x20 ; ' '
0000000000019726         db  0x42 ; 'B'
0000000000019727         db  0x0e ; '.'
0000000000019728         db  0x18 ; '.'
0000000000019729         db  0x42 ; 'B'
000000000001972a         db  0x0e ; '.'
000000000001972b         db  0x10 ; '.'
000000000001972c         db  0x42 ; 'B'
000000000001972d         db  0x0e ; '.'
000000000001972e         db  0x08 ; '.'
000000000001972f         db  0x4b ; 'K'
0000000000019730         db  0x0b ; '.'
0000000000019731         db  0x00 ; '.'
0000000000019732         db  0x00 ; '.'
0000000000019733         db  0x00 ; '.'
0000000000019734         dd         0x0000005c                                  ; Length of the record
0000000000019738         dd         0x00001e28                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
000000000001973c         db         0x04, 0x76, 2 dup (0xff)                    ; begin 0x10d40
0000000000019740         db         0x50, 0x08, 2 dup (0x00)                    ; length 0x850 (end at 0x11590)
0000000000019744         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019745         db  0x42 ; 'B'
0000000000019746         db  0x0e ; '.'
0000000000019747         db  0x10 ; '.'
0000000000019748         db  0x8f ; '.'
0000000000019749         db  0x02 ; '.'
000000000001974a         db  0x42 ; 'B'
000000000001974b         db  0x0e ; '.'
000000000001974c         db  0x18 ; '.'
000000000001974d         db  0x8e ; '.'
000000000001974e         db  0x03 ; '.'
000000000001974f         db  0x45 ; 'E'
0000000000019750         db  0x0e ; '.'
0000000000019751         db  0x20 ; ' '
0000000000019752         db  0x8d ; '.'
0000000000019753         db  0x04 ; '.'
0000000000019754         db  0x42 ; 'B'
0000000000019755         db  0x0e ; '.'
0000000000019756         db  0x28 ; '('
0000000000019757         db  0x8c ; '.'
0000000000019758         db  0x05 ; '.'
0000000000019759         db  0x44 ; 'D'
000000000001975a         db  0x0e ; '.'
000000000001975b         db  0x30 ; '0'
000000000001975c         db  0x86 ; '.'
000000000001975d         db  0x06 ; '.'
000000000001975e         db  0x41 ; 'A'
000000000001975f         db  0x0e ; '.'
0000000000019760         db  0x38 ; '8'
0000000000019761         db  0x83 ; '.'
0000000000019762         db  0x07 ; '.'
0000000000019763         db  0x55 ; 'U'
0000000000019764         db  0x0e ; '.'
0000000000019765         db  0xe0 ; '.'
0000000000019766         db  0x01 ; '.'
0000000000019767         db  0x02 ; '.'
0000000000019768         db  0x91 ; '.'
0000000000019769         db  0x0a ; '.'
000000000001976a         db  0x0e ; '.'
000000000001976b         db  0x38 ; '8'
000000000001976c         db  0x41 ; 'A'
000000000001976d         db  0x0e ; '.'
000000000001976e         db  0x30 ; '0'
000000000001976f         db  0x41 ; 'A'
0000000000019770         db  0x0e ; '.'
0000000000019771         db  0x28 ; '('
0000000000019772         db  0x42 ; 'B'
0000000000019773         db  0x0e ; '.'
0000000000019774         db  0x20 ; ' '
0000000000019775         db  0x42 ; 'B'
0000000000019776         db  0x0e ; '.'
0000000000019777         db  0x18 ; '.'
0000000000019778         db  0x42 ; 'B'
0000000000019779         db  0x0e ; '.'
000000000001977a         db  0x10 ; '.'
000000000001977b         db  0x42 ; 'B'
000000000001977c         db  0x0e ; '.'
000000000001977d         db  0x08 ; '.'
000000000001977e         db  0x48 ; 'H'
000000000001977f         db  0x0b ; '.'
0000000000019780         db  0x03 ; '.'
0000000000019781         db  0xc3 ; '.'
0000000000019782         db  0x05 ; '.'
0000000000019783         db  0x0e ; '.'
0000000000019784         db  0xe8 ; '.'
0000000000019785         db  0x01 ; '.'
0000000000019786         db  0x4a ; 'J'
0000000000019787         db  0x0e ; '.'
0000000000019788         db  0xf0 ; '.'
0000000000019789         db  0x01 ; '.'
000000000001978a         db  0x56 ; 'V'
000000000001978b         db  0x0e ; '.'
000000000001978c         db  0xe8 ; '.'
000000000001978d         db  0x01 ; '.'
000000000001978e         db  0x41 ; 'A'
000000000001978f         db  0x0e ; '.'
0000000000019790         db  0xe0 ; '.'
0000000000019791         db  0x01 ; '.'
0000000000019792         db  0x00 ; '.'
0000000000019793         db  0x00 ; '.'
0000000000019794         dd         0x00000040                                  ; Length of the record
0000000000019798         dd         0x00001e88                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
000000000001979c         db         0xf4, 0x7d, 2 dup (0xff)                    ; begin 0x11590
00000000000197a0         db         0x5d, 0x02, 2 dup (0x00)                    ; length 0x25d (end at 0x117ed)
00000000000197a4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000197a5         db  0x42 ; 'B'
00000000000197a6         db  0x0e ; '.'
00000000000197a7         db  0x10 ; '.'
00000000000197a8         db  0x8e ; '.'
00000000000197a9         db  0x02 ; '.'
00000000000197aa         db  0x42 ; 'B'
00000000000197ab         db  0x0e ; '.'
00000000000197ac         db  0x18 ; '.'
00000000000197ad         db  0x8d ; '.'
00000000000197ae         db  0x03 ; '.'
00000000000197af         db  0x45 ; 'E'
00000000000197b0         db  0x0e ; '.'
00000000000197b1         db  0x20 ; ' '
00000000000197b2         db  0x8c ; '.'
00000000000197b3         db  0x04 ; '.'
00000000000197b4         db  0x41 ; 'A'
00000000000197b5         db  0x0e ; '.'
00000000000197b6         db  0x28 ; '('
00000000000197b7         db  0x86 ; '.'
00000000000197b8         db  0x05 ; '.'
00000000000197b9         db  0x44 ; 'D'
00000000000197ba         db  0x0e ; '.'
00000000000197bb         db  0x30 ; '0'
00000000000197bc         db  0x83 ; '.'
00000000000197bd         db  0x06 ; '.'
00000000000197be         db  0x4a ; 'J'
00000000000197bf         db  0x0e ; '.'
00000000000197c0         db  0x50 ; 'P'
00000000000197c1         db  0x02 ; '.'
00000000000197c2         db  0x61 ; 'a'
00000000000197c3         db  0x0a ; '.'
00000000000197c4         db  0x0e ; '.'
00000000000197c5         db  0x30 ; '0'
00000000000197c6         db  0x41 ; 'A'
00000000000197c7         db  0x0e ; '.'
00000000000197c8         db  0x28 ; '('
00000000000197c9         db  0x41 ; 'A'
00000000000197ca         db  0x0e ; '.'
00000000000197cb         db  0x20 ; ' '
00000000000197cc         db  0x42 ; 'B'
00000000000197cd         db  0x0e ; '.'
00000000000197ce         db  0x18 ; '.'
00000000000197cf         db  0x42 ; 'B'
00000000000197d0         db  0x0e ; '.'
00000000000197d1         db  0x10 ; '.'
00000000000197d2         db  0x42 ; 'B'
00000000000197d3         db  0x0e ; '.'
00000000000197d4         db  0x08 ; '.'
00000000000197d5         db  0x47 ; 'G'
00000000000197d6         db  0x0b ; '.'
00000000000197d7         db  0x00 ; '.'
00000000000197d8         dd         0x00000048                                  ; Length of the record
00000000000197dc         dd         0x00001ecc                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
00000000000197e0         db         0x10, 0x80, 2 dup (0xff)                    ; begin 0x117f0
00000000000197e4         db         0xfd, 0x06, 2 dup (0x00)                    ; length 0x6fd (end at 0x11eed)
00000000000197e8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000197e9         db  0x42 ; 'B'
00000000000197ea         db  0x0e ; '.'
00000000000197eb         db  0x10 ; '.'
00000000000197ec         db  0x8f ; '.'
00000000000197ed         db  0x02 ; '.'
00000000000197ee         db  0x42 ; 'B'
00000000000197ef         db  0x0e ; '.'
00000000000197f0         db  0x18 ; '.'
00000000000197f1         db  0x8e ; '.'
00000000000197f2         db  0x03 ; '.'
00000000000197f3         db  0x42 ; 'B'
00000000000197f4         db  0x0e ; '.'
00000000000197f5         db  0x20 ; ' '
00000000000197f6         db  0x8d ; '.'
00000000000197f7         db  0x04 ; '.'
00000000000197f8         db  0x42 ; 'B'
00000000000197f9         db  0x0e ; '.'
00000000000197fa         db  0x28 ; '('
00000000000197fb         db  0x8c ; '.'
00000000000197fc         db  0x05 ; '.'
00000000000197fd         db  0x41 ; 'A'
00000000000197fe         db  0x0e ; '.'
00000000000197ff         db  0x30 ; '0'
0000000000019800         db  0x86 ; '.'
0000000000019801         db  0x06 ; '.'
0000000000019802         db  0x41 ; 'A'
0000000000019803         db  0x0e ; '.'
0000000000019804         db  0x38 ; '8'
0000000000019805         db  0x83 ; '.'
0000000000019806         db  0x07 ; '.'
0000000000019807         db  0x47 ; 'G'
0000000000019808         db  0x0e ; '.'
0000000000019809         db  0x70 ; 'p'
000000000001980a         db  0x02 ; '.'
000000000001980b         db  0xcb ; '.'
000000000001980c         db  0x0a ; '.'
000000000001980d         db  0x0e ; '.'
000000000001980e         db  0x38 ; '8'
000000000001980f         db  0x41 ; 'A'
0000000000019810         db  0x0e ; '.'
0000000000019811         db  0x30 ; '0'
0000000000019812         db  0x41 ; 'A'
0000000000019813         db  0x0e ; '.'
0000000000019814         db  0x28 ; '('
0000000000019815         db  0x42 ; 'B'
0000000000019816         db  0x0e ; '.'
0000000000019817         db  0x20 ; ' '
0000000000019818         db  0x42 ; 'B'
0000000000019819         db  0x0e ; '.'
000000000001981a         db  0x18 ; '.'
000000000001981b         db  0x42 ; 'B'
000000000001981c         db  0x0e ; '.'
000000000001981d         db  0x10 ; '.'
000000000001981e         db  0x42 ; 'B'
000000000001981f         db  0x0e ; '.'
0000000000019820         db  0x08 ; '.'
0000000000019821         db  0x4a ; 'J'
0000000000019822         db  0x0b ; '.'
0000000000019823         db  0x00 ; '.'
0000000000019824         dd         0x0000003c                                  ; Length of the record
0000000000019828         dd         0x00001f18                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
000000000001982c         db         0xc4, 0x86, 2 dup (0xff)                    ; begin 0x11ef0
0000000000019830         db         0xb6, 3 dup (0x00)                          ; length 0xb6 (end at 0x11fa6)
0000000000019834         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019835         db  0x42 ; 'B'
0000000000019836         db  0x0e ; '.'
0000000000019837         db  0x10 ; '.'
0000000000019838         db  0x8e ; '.'
0000000000019839         db  0x02 ; '.'
000000000001983a         db  0x45 ; 'E'
000000000001983b         db  0x0e ; '.'
000000000001983c         db  0x18 ; '.'
000000000001983d         db  0x8d ; '.'
000000000001983e         db  0x03 ; '.'
000000000001983f         db  0x45 ; 'E'
0000000000019840         db  0x0e ; '.'
0000000000019841         db  0x20 ; ' '
0000000000019842         db  0x8c ; '.'
0000000000019843         db  0x04 ; '.'
0000000000019844         db  0x48 ; 'H'
0000000000019845         db  0x0e ; '.'
0000000000019846         db  0x28 ; '('
0000000000019847         db  0x86 ; '.'
0000000000019848         db  0x05 ; '.'
0000000000019849         db  0x44 ; 'D'
000000000001984a         db  0x0e ; '.'
000000000001984b         db  0x30 ; '0'
000000000001984c         db  0x83 ; '.'
000000000001984d         db  0x06 ; '.'
000000000001984e         db  0x02 ; '.'
000000000001984f         db  0x83 ; '.'
0000000000019850         db  0x0a ; '.'
0000000000019851         db  0x0e ; '.'
0000000000019852         db  0x28 ; '('
0000000000019853         db  0x41 ; 'A'
0000000000019854         db  0x0e ; '.'
0000000000019855         db  0x20 ; ' '
0000000000019856         db  0x42 ; 'B'
0000000000019857         db  0x0e ; '.'
0000000000019858         db  0x18 ; '.'
0000000000019859         db  0x42 ; 'B'
000000000001985a         db  0x0e ; '.'
000000000001985b         db  0x10 ; '.'
000000000001985c         db  0x42 ; 'B'
000000000001985d         db  0x0e ; '.'
000000000001985e         db  0x08 ; '.'
000000000001985f         db  0x46 ; 'F'
0000000000019860         db  0x0b ; '.'
0000000000019861         db  0x00 ; '.'
0000000000019862         db  0x00 ; '.'
0000000000019863         db  0x00 ; '.'
0000000000019864         dd         0x0000005c                                  ; Length of the record
0000000000019868         dd         0x00001f58                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
000000000001986c         db         0x44, 0x87, 2 dup (0xff)                    ; begin 0x11fb0
0000000000019870         db         0xd3, 0x14, 2 dup (0x00)                    ; length 0x14d3 (end at 0x13483)
0000000000019874         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019875         db  0x42 ; 'B'
0000000000019876         db  0x0e ; '.'
0000000000019877         db  0x10 ; '.'
0000000000019878         db  0x8f ; '.'
0000000000019879         db  0x02 ; '.'
000000000001987a         db  0x42 ; 'B'
000000000001987b         db  0x0e ; '.'
000000000001987c         db  0x18 ; '.'
000000000001987d         db  0x8e ; '.'
000000000001987e         db  0x03 ; '.'
000000000001987f         db  0x42 ; 'B'
0000000000019880         db  0x0e ; '.'
0000000000019881         db  0x20 ; ' '
0000000000019882         db  0x8d ; '.'
0000000000019883         db  0x04 ; '.'
0000000000019884         db  0x42 ; 'B'
0000000000019885         db  0x0e ; '.'
0000000000019886         db  0x28 ; '('
0000000000019887         db  0x8c ; '.'
0000000000019888         db  0x05 ; '.'
0000000000019889         db  0x41 ; 'A'
000000000001988a         db  0x0e ; '.'
000000000001988b         db  0x30 ; '0'
000000000001988c         db  0x86 ; '.'
000000000001988d         db  0x06 ; '.'
000000000001988e         db  0x41 ; 'A'
000000000001988f         db  0x0e ; '.'
0000000000019890         db  0x38 ; '8'
0000000000019891         db  0x83 ; '.'
0000000000019892         db  0x07 ; '.'
0000000000019893         db  0x47 ; 'G'
0000000000019894         db  0x0e ; '.'
0000000000019895         db  0xe0 ; '.'
0000000000019896         db  0x02 ; '.'
0000000000019897         db  0x03 ; '.'
0000000000019898         db  0x22 ; '"'
0000000000019899         db  0x01 ; '.'
000000000001989a         db  0x0a ; '.'
000000000001989b         db  0x0e ; '.'
000000000001989c         db  0x38 ; '8'
000000000001989d         db  0x41 ; 'A'
000000000001989e         db  0x0e ; '.'
000000000001989f         db  0x30 ; '0'
00000000000198a0         db  0x41 ; 'A'
00000000000198a1         db  0x0e ; '.'
00000000000198a2         db  0x28 ; '('
00000000000198a3         db  0x42 ; 'B'
00000000000198a4         db  0x0e ; '.'
00000000000198a5         db  0x20 ; ' '
00000000000198a6         db  0x42 ; 'B'
00000000000198a7         db  0x0e ; '.'
00000000000198a8         db  0x18 ; '.'
00000000000198a9         db  0x42 ; 'B'
00000000000198aa         db  0x0e ; '.'
00000000000198ab         db  0x10 ; '.'
00000000000198ac         db  0x42 ; 'B'
00000000000198ad         db  0x0e ; '.'
00000000000198ae         db  0x08 ; '.'
00000000000198af         db  0x41 ; 'A'
00000000000198b0         db  0x0b ; '.'
00000000000198b1         db  0x03 ; '.'
00000000000198b2         db  0xbf ; '.'
00000000000198b3         db  0x0b ; '.'
00000000000198b4         db  0x0e ; '.'
00000000000198b5         db  0xe8 ; '.'
00000000000198b6         db  0x02 ; '.'
00000000000198b7         db  0x4c ; 'L'
00000000000198b8         db  0x0e ; '.'
00000000000198b9         db  0xf0 ; '.'
00000000000198ba         db  0x02 ; '.'
00000000000198bb         db  0x64 ; 'd'
00000000000198bc         db  0x0e ; '.'
00000000000198bd         db  0xe8 ; '.'
00000000000198be         db  0x02 ; '.'
00000000000198bf         db  0x42 ; 'B'
00000000000198c0         db  0x0e ; '.'
00000000000198c1         db  0xe0 ; '.'
00000000000198c2         db  0x02 ; '.'
00000000000198c3         db  0x00 ; '.'
00000000000198c4         dd         0x00000048                                  ; Length of the record
00000000000198c8         dd         0x00001fb8                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
00000000000198cc         db         0xc4, 0x9b, 2 dup (0xff)                    ; begin 0x13490
00000000000198d0         db         0x82, 0x01, 2 dup (0x00)                    ; length 0x182 (end at 0x13612)
00000000000198d4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000198d5         db  0x42 ; 'B'
00000000000198d6         db  0x0e ; '.'
00000000000198d7         db  0x10 ; '.'
00000000000198d8         db  0x8f ; '.'
00000000000198d9         db  0x02 ; '.'
00000000000198da         db  0x42 ; 'B'
00000000000198db         db  0x0e ; '.'
00000000000198dc         db  0x18 ; '.'
00000000000198dd         db  0x8e ; '.'
00000000000198de         db  0x03 ; '.'
00000000000198df         db  0x45 ; 'E'
00000000000198e0         db  0x0e ; '.'
00000000000198e1         db  0x20 ; ' '
00000000000198e2         db  0x8d ; '.'
00000000000198e3         db  0x04 ; '.'
00000000000198e4         db  0x42 ; 'B'
00000000000198e5         db  0x0e ; '.'
00000000000198e6         db  0x28 ; '('
00000000000198e7         db  0x8c ; '.'
00000000000198e8         db  0x05 ; '.'
00000000000198e9         db  0x44 ; 'D'
00000000000198ea         db  0x0e ; '.'
00000000000198eb         db  0x30 ; '0'
00000000000198ec         db  0x86 ; '.'
00000000000198ed         db  0x06 ; '.'
00000000000198ee         db  0x41 ; 'A'
00000000000198ef         db  0x0e ; '.'
00000000000198f0         db  0x38 ; '8'
00000000000198f1         db  0x83 ; '.'
00000000000198f2         db  0x07 ; '.'
00000000000198f3         db  0x4d ; 'M'
00000000000198f4         db  0x0e ; '.'
00000000000198f5         db  0x80 ; '.'
00000000000198f6         db  0x01 ; '.'
00000000000198f7         db  0x02 ; '.'
00000000000198f8         db  0xfa ; '.'
00000000000198f9         db  0x0a ; '.'
00000000000198fa         db  0x0e ; '.'
00000000000198fb         db  0x38 ; '8'
00000000000198fc         db  0x41 ; 'A'
00000000000198fd         db  0x0e ; '.'
00000000000198fe         db  0x30 ; '0'
00000000000198ff         db  0x41 ; 'A'
0000000000019900         db  0x0e ; '.'
0000000000019901         db  0x28 ; '('
0000000000019902         db  0x42 ; 'B'
0000000000019903         db  0x0e ; '.'
0000000000019904         db  0x20 ; ' '
0000000000019905         db  0x42 ; 'B'
0000000000019906         db  0x0e ; '.'
0000000000019907         db  0x18 ; '.'
0000000000019908         db  0x42 ; 'B'
0000000000019909         db  0x0e ; '.'
000000000001990a         db  0x10 ; '.'
000000000001990b         db  0x42 ; 'B'
000000000001990c         db  0x0e ; '.'
000000000001990d         db  0x08 ; '.'
000000000001990e         db  0x47 ; 'G'
000000000001990f         db  0x0b ; '.'
0000000000019910         dd         0x0000004c                                  ; Length of the record
0000000000019914         dd         0x00002004                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000019918         db         0x08, 0x9d, 2 dup (0xff)                    ; begin 0x13620
000000000001991c         db         0x7f, 0x01, 2 dup (0x00)                    ; length 0x17f (end at 0x1379f)
0000000000019920         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019921         db  0x42 ; 'B'
0000000000019922         db  0x0e ; '.'
0000000000019923         db  0x10 ; '.'
0000000000019924         db  0x8f ; '.'
0000000000019925         db  0x02 ; '.'
0000000000019926         db  0x42 ; 'B'
0000000000019927         db  0x0e ; '.'
0000000000019928         db  0x18 ; '.'
0000000000019929         db  0x8e ; '.'
000000000001992a         db  0x03 ; '.'
000000000001992b         db  0x45 ; 'E'
000000000001992c         db  0x0e ; '.'
000000000001992d         db  0x20 ; ' '
000000000001992e         db  0x8d ; '.'
000000000001992f         db  0x04 ; '.'
0000000000019930         db  0x42 ; 'B'
0000000000019931         db  0x0e ; '.'
0000000000019932         db  0x28 ; '('
0000000000019933         db  0x8c ; '.'
0000000000019934         db  0x05 ; '.'
0000000000019935         db  0x44 ; 'D'
0000000000019936         db  0x0e ; '.'
0000000000019937         db  0x30 ; '0'
0000000000019938         db  0x86 ; '.'
0000000000019939         db  0x06 ; '.'
000000000001993a         db  0x41 ; 'A'
000000000001993b         db  0x0e ; '.'
000000000001993c         db  0x38 ; '8'
000000000001993d         db  0x83 ; '.'
000000000001993e         db  0x07 ; '.'
000000000001993f         db  0x4a ; 'J'
0000000000019940         db  0x0e ; '.'
0000000000019941         db  0x90 ; '.'
0000000000019942         db  0x01 ; '.'
0000000000019943         db  0x03 ; '.'
0000000000019944         db  0x45 ; 'E'
0000000000019945         db  0x01 ; '.'
0000000000019946         db  0x0a ; '.'
0000000000019947         db  0x0e ; '.'
0000000000019948         db  0x38 ; '8'
0000000000019949         db  0x41 ; 'A'
000000000001994a         db  0x0e ; '.'
000000000001994b         db  0x30 ; '0'
000000000001994c         db  0x41 ; 'A'
000000000001994d         db  0x0e ; '.'
000000000001994e         db  0x28 ; '('
000000000001994f         db  0x42 ; 'B'
0000000000019950         db  0x0e ; '.'
0000000000019951         db  0x20 ; ' '
0000000000019952         db  0x42 ; 'B'
0000000000019953         db  0x0e ; '.'
0000000000019954         db  0x18 ; '.'
0000000000019955         db  0x42 ; 'B'
0000000000019956         db  0x0e ; '.'
0000000000019957         db  0x10 ; '.'
0000000000019958         db  0x42 ; 'B'
0000000000019959         db  0x0e ; '.'
000000000001995a         db  0x08 ; '.'
000000000001995b         db  0x47 ; 'G'
000000000001995c         db  0x0b ; '.'
000000000001995d         db  0x00 ; '.'
000000000001995e         db  0x00 ; '.'
000000000001995f         db  0x00 ; '.'
0000000000019960         dd         0x0000004c                                  ; Length of the record
0000000000019964         dd         0x00002054                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000019968         db         0x38, 0x9e, 2 dup (0xff)                    ; begin 0x137a0
000000000001996c         db         0xf5, 0x10, 2 dup (0x00)                    ; length 0x10f5 (end at 0x14895)
0000000000019970         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019971         db  0x42 ; 'B'
0000000000019972         db  0x0e ; '.'
0000000000019973         db  0x10 ; '.'
0000000000019974         db  0x8f ; '.'
0000000000019975         db  0x02 ; '.'
0000000000019976         db  0x42 ; 'B'
0000000000019977         db  0x0e ; '.'
0000000000019978         db  0x18 ; '.'
0000000000019979         db  0x8e ; '.'
000000000001997a         db  0x03 ; '.'
000000000001997b         db  0x42 ; 'B'
000000000001997c         db  0x0e ; '.'
000000000001997d         db  0x20 ; ' '
000000000001997e         db  0x8d ; '.'
000000000001997f         db  0x04 ; '.'
0000000000019980         db  0x42 ; 'B'
0000000000019981         db  0x0e ; '.'
0000000000019982         db  0x28 ; '('
0000000000019983         db  0x8c ; '.'
0000000000019984         db  0x05 ; '.'
0000000000019985         db  0x41 ; 'A'
0000000000019986         db  0x0e ; '.'
0000000000019987         db  0x30 ; '0'
0000000000019988         db  0x86 ; '.'
0000000000019989         db  0x06 ; '.'
000000000001998a         db  0x41 ; 'A'
000000000001998b         db  0x0e ; '.'
000000000001998c         db  0x38 ; '8'
000000000001998d         db  0x83 ; '.'
000000000001998e         db  0x07 ; '.'
000000000001998f         db  0x47 ; 'G'
0000000000019990         db  0x0e ; '.'
0000000000019991         db  0xe0 ; '.'
0000000000019992         db  0x02 ; '.'
0000000000019993         db  0x03 ; '.'
0000000000019994         db  0xa9 ; '.'
0000000000019995         db  0x03 ; '.'
0000000000019996         db  0x0a ; '.'
0000000000019997         db  0x0e ; '.'
0000000000019998         db  0x38 ; '8'
0000000000019999         db  0x41 ; 'A'
000000000001999a         db  0x0e ; '.'
000000000001999b         db  0x30 ; '0'
000000000001999c         db  0x41 ; 'A'
000000000001999d         db  0x0e ; '.'
000000000001999e         db  0x28 ; '('
000000000001999f         db  0x42 ; 'B'
00000000000199a0         db  0x0e ; '.'
00000000000199a1         db  0x20 ; ' '
00000000000199a2         db  0x42 ; 'B'
00000000000199a3         db  0x0e ; '.'
00000000000199a4         db  0x18 ; '.'
00000000000199a5         db  0x42 ; 'B'
00000000000199a6         db  0x0e ; '.'
00000000000199a7         db  0x10 ; '.'
00000000000199a8         db  0x42 ; 'B'
00000000000199a9         db  0x0e ; '.'
00000000000199aa         db  0x08 ; '.'
00000000000199ab         db  0x41 ; 'A'
00000000000199ac         db  0x0b ; '.'
00000000000199ad         db  0x00 ; '.'
00000000000199ae         db  0x00 ; '.'
00000000000199af         db  0x00 ; '.'
00000000000199b0         dd         0x0000001c                                  ; Length of the record
00000000000199b4         dd         0x000020a4                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
00000000000199b8         db         0xe8, 0xae, 2 dup (0xff)                    ; begin 0x148a0
00000000000199bc         db         0x6f, 3 dup (0x00)                          ; length 0x6f (end at 0x1490f)
00000000000199c0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000199c1         db  0x44 ; 'D'
00000000000199c2         db  0x0e ; '.'
00000000000199c3         db  0x10 ; '.'
00000000000199c4         db  0x02 ; '.'
00000000000199c5         db  0x59 ; 'Y'
00000000000199c6         db  0x0a ; '.'
00000000000199c7         db  0x0e ; '.'
00000000000199c8         db  0x08 ; '.'
00000000000199c9         db  0x4b ; 'K'
00000000000199ca         db  0x0b ; '.'
00000000000199cb         db  0x46 ; 'F'
00000000000199cc         db  0x0e ; '.'
00000000000199cd         db  0x08 ; '.'
00000000000199ce         db  0x00 ; '.'
00000000000199cf         db  0x00 ; '.'
00000000000199d0         dd         0x00000010                                  ; Length of the record
00000000000199d4         dd         0x000020c4                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
00000000000199d8         db         0x38, 0xaf, 2 dup (0xff)                    ; begin 0x14910
00000000000199dc         db         0x0f, 3 dup (0x00)                          ; length 0xf (end at 0x1491f)
00000000000199e0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000199e1         align      4
00000000000199e4         dd         0x00000028                                  ; Length of the record
00000000000199e8         dd         0x000020d8                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
00000000000199ec         db         0x34, 0xaf, 2 dup (0xff)                    ; begin 0x14920
00000000000199f0         db         0xc3, 3 dup (0x00)                          ; length 0xc3 (end at 0x149e3)
00000000000199f4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000199f5         db  0x42 ; 'B'
00000000000199f6         db  0x0e ; '.'
00000000000199f7         db  0x10 ; '.'
00000000000199f8         db  0x8c ; '.'
00000000000199f9         db  0x02 ; '.'
00000000000199fa         db  0x41 ; 'A'
00000000000199fb         db  0x0e ; '.'
00000000000199fc         db  0x18 ; '.'
00000000000199fd         db  0x86 ; '.'
00000000000199fe         db  0x03 ; '.'
00000000000199ff         db  0x43 ; 'C'
0000000000019a00         db  0x0e ; '.'
0000000000019a01         db  0x20 ; ' '
0000000000019a02         db  0x83 ; '.'
0000000000019a03         db  0x04 ; '.'
0000000000019a04         db  0x02 ; '.'
0000000000019a05         db  0xb9 ; '.'
0000000000019a06         db  0x0e ; '.'
0000000000019a07         db  0x18 ; '.'
0000000000019a08         db  0x41 ; 'A'
0000000000019a09         db  0x0e ; '.'
0000000000019a0a         db  0x10 ; '.'
0000000000019a0b         db  0x42 ; 'B'
0000000000019a0c         db  0x0e ; '.'
0000000000019a0d         db  0x08 ; '.'
0000000000019a0e         db  0x00 ; '.'
0000000000019a0f         db  0x00 ; '.'
0000000000019a10         dd         0x0000005c                                  ; Length of the record
0000000000019a14         dd         0x00002104                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000019a18         db         0xd8, 0xaf, 2 dup (0xff)                    ; begin 0x149f0
0000000000019a1c         db         0x7f, 0x04, 2 dup (0x00)                    ; length 0x47f (end at 0x14e6f)
0000000000019a20         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019a21         db  0x42 ; 'B'
0000000000019a22         db  0x0e ; '.'
0000000000019a23         db  0x10 ; '.'
0000000000019a24         db  0x8f ; '.'
0000000000019a25         db  0x02 ; '.'
0000000000019a26         db  0x42 ; 'B'
0000000000019a27         db  0x0e ; '.'
0000000000019a28         db  0x18 ; '.'
0000000000019a29         db  0x8e ; '.'
0000000000019a2a         db  0x03 ; '.'
0000000000019a2b         db  0x45 ; 'E'
0000000000019a2c         db  0x0e ; '.'
0000000000019a2d         db  0x20 ; ' '
0000000000019a2e         db  0x8d ; '.'
0000000000019a2f         db  0x04 ; '.'
0000000000019a30         db  0x42 ; 'B'
0000000000019a31         db  0x0e ; '.'
0000000000019a32         db  0x28 ; '('
0000000000019a33         db  0x8c ; '.'
0000000000019a34         db  0x05 ; '.'
0000000000019a35         db  0x44 ; 'D'
0000000000019a36         db  0x0e ; '.'
0000000000019a37         db  0x30 ; '0'
0000000000019a38         db  0x86 ; '.'
0000000000019a39         db  0x06 ; '.'
0000000000019a3a         db  0x41 ; 'A'
0000000000019a3b         db  0x0e ; '.'
0000000000019a3c         db  0x38 ; '8'
0000000000019a3d         db  0x83 ; '.'
0000000000019a3e         db  0x07 ; '.'
0000000000019a3f         db  0x44 ; 'D'
0000000000019a40         db  0x0e ; '.'
0000000000019a41         db  0x70 ; 'p'
0000000000019a42         db  0x02 ; '.'
0000000000019a43         db  0xd4 ; '.'
0000000000019a44         db  0x0e ; '.'
0000000000019a45         db  0x78 ; 'x'
0000000000019a46         db  0x4b ; 'K'
0000000000019a47         db  0x0e ; '.'
0000000000019a48         db  0x80 ; '.'
0000000000019a49         db  0x01 ; '.'
0000000000019a4a         db  0x41 ; 'A'
0000000000019a4b         db  0x0e ; '.'
0000000000019a4c         db  0x88 ; '.'
0000000000019a4d         db  0x01 ; '.'
0000000000019a4e         db  0x42 ; 'B'
0000000000019a4f         db  0x0e ; '.'
0000000000019a50         db  0x90 ; '.'
0000000000019a51         db  0x01 ; '.'
0000000000019a52         db  0x5d ; ']'
0000000000019a53         db  0x0e ; '.'
0000000000019a54         db  0x70 ; 'p'
0000000000019a55         db  0x63 ; 'c'
0000000000019a56         db  0x0a ; '.'
0000000000019a57         db  0x0e ; '.'
0000000000019a58         db  0x38 ; '8'
0000000000019a59         db  0x44 ; 'D'
0000000000019a5a         db  0x0e ; '.'
0000000000019a5b         db  0x30 ; '0'
0000000000019a5c         db  0x41 ; 'A'
0000000000019a5d         db  0x0e ; '.'
0000000000019a5e         db  0x28 ; '('
0000000000019a5f         db  0x42 ; 'B'
0000000000019a60         db  0x0e ; '.'
0000000000019a61         db  0x20 ; ' '
0000000000019a62         db  0x42 ; 'B'
0000000000019a63         db  0x0e ; '.'
0000000000019a64         db  0x18 ; '.'
0000000000019a65         db  0x42 ; 'B'
0000000000019a66         db  0x0e ; '.'
0000000000019a67         db  0x10 ; '.'
0000000000019a68         db  0x42 ; 'B'
0000000000019a69         db  0x0e ; '.'
0000000000019a6a         db  0x08 ; '.'
0000000000019a6b         db  0x45 ; 'E'
0000000000019a6c         db  0x0b ; '.'
0000000000019a6d         db  0x00 ; '.'
0000000000019a6e         db  0x00 ; '.'
0000000000019a6f         db  0x00 ; '.'
0000000000019a70         dd         0x00000054                                  ; Length of the record
0000000000019a74         dd         0x00002164                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000019a78         db         0xf8, 0xb3, 2 dup (0xff)                    ; begin 0x14e70
0000000000019a7c         db         0x1b, 0x01, 2 dup (0x00)                    ; length 0x11b (end at 0x14f8b)
0000000000019a80         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019a81         db  0x42 ; 'B'
0000000000019a82         db  0x0e ; '.'
0000000000019a83         db  0x10 ; '.'
0000000000019a84         db  0x8f ; '.'
0000000000019a85         db  0x02 ; '.'
0000000000019a86         db  0x42 ; 'B'
0000000000019a87         db  0x0e ; '.'
0000000000019a88         db  0x18 ; '.'
0000000000019a89         db  0x8e ; '.'
0000000000019a8a         db  0x03 ; '.'
0000000000019a8b         db  0x42 ; 'B'
0000000000019a8c         db  0x0e ; '.'
0000000000019a8d         db  0x20 ; ' '
0000000000019a8e         db  0x8d ; '.'
0000000000019a8f         db  0x04 ; '.'
0000000000019a90         db  0x42 ; 'B'
0000000000019a91         db  0x0e ; '.'
0000000000019a92         db  0x28 ; '('
0000000000019a93         db  0x8c ; '.'
0000000000019a94         db  0x05 ; '.'
0000000000019a95         db  0x44 ; 'D'
0000000000019a96         db  0x0e ; '.'
0000000000019a97         db  0x30 ; '0'
0000000000019a98         db  0x86 ; '.'
0000000000019a99         db  0x06 ; '.'
0000000000019a9a         db  0x41 ; 'A'
0000000000019a9b         db  0x0e ; '.'
0000000000019a9c         db  0x38 ; '8'
0000000000019a9d         db  0x83 ; '.'
0000000000019a9e         db  0x07 ; '.'
0000000000019a9f         db  0x4d ; 'M'
0000000000019aa0         db  0x0e ; '.'
0000000000019aa1         db  0x60 ; '`'
0000000000019aa2         db  0x02 ; '.'
0000000000019aa3         db  0x5a ; 'Z'
0000000000019aa4         db  0x0e ; '.'
0000000000019aa5         db  0x68 ; 'h'
0000000000019aa6         db  0x44 ; 'D'
0000000000019aa7         db  0x0e ; '.'
0000000000019aa8         db  0x70 ; 'p'
0000000000019aa9         db  0x61 ; 'a'
0000000000019aaa         db  0x0e ; '.'
0000000000019aab         db  0x68 ; 'h'
0000000000019aac         db  0x41 ; 'A'
0000000000019aad         db  0x0e ; '.'
0000000000019aae         db  0x60 ; '`'
0000000000019aaf         db  0x44 ; 'D'
0000000000019ab0         db  0x0a ; '.'
0000000000019ab1         db  0x0e ; '.'
0000000000019ab2         db  0x38 ; '8'
0000000000019ab3         db  0x44 ; 'D'
0000000000019ab4         db  0x0e ; '.'
0000000000019ab5         db  0x30 ; '0'
0000000000019ab6         db  0x41 ; 'A'
0000000000019ab7         db  0x0e ; '.'
0000000000019ab8         db  0x28 ; '('
0000000000019ab9         db  0x42 ; 'B'
0000000000019aba         db  0x0e ; '.'
0000000000019abb         db  0x20 ; ' '
0000000000019abc         db  0x42 ; 'B'
0000000000019abd         db  0x0e ; '.'
0000000000019abe         db  0x18 ; '.'
0000000000019abf         db  0x42 ; 'B'
0000000000019ac0         db  0x0e ; '.'
0000000000019ac1         db  0x10 ; '.'
0000000000019ac2         db  0x42 ; 'B'
0000000000019ac3         db  0x0e ; '.'
0000000000019ac4         db  0x08 ; '.'
0000000000019ac5         db  0x45 ; 'E'
0000000000019ac6         db  0x0b ; '.'
0000000000019ac7         db  0x00 ; '.'
0000000000019ac8         dd         0x00000048                                  ; Length of the record
0000000000019acc         dd         0x000021bc                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000019ad0         db         0xc0, 0xb4, 2 dup (0xff)                    ; begin 0x14f90
0000000000019ad4         db         0x10, 0x01, 2 dup (0x00)                    ; length 0x110 (end at 0x150a0)
0000000000019ad8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019ad9         db  0x44 ; 'D'
0000000000019ada         db  0x0e ; '.'
0000000000019adb         db  0x10 ; '.'
0000000000019adc         db  0x8e ; '.'
0000000000019add         db  0x02 ; '.'
0000000000019ade         db  0x42 ; 'B'
0000000000019adf         db  0x0e ; '.'
0000000000019ae0         db  0x18 ; '.'
0000000000019ae1         db  0x8d ; '.'
0000000000019ae2         db  0x03 ; '.'
0000000000019ae3         db  0x45 ; 'E'
0000000000019ae4         db  0x0e ; '.'
0000000000019ae5         db  0x20 ; ' '
0000000000019ae6         db  0x8c ; '.'
0000000000019ae7         db  0x04 ; '.'
0000000000019ae8         db  0x41 ; 'A'
0000000000019ae9         db  0x0e ; '.'
0000000000019aea         db  0x28 ; '('
0000000000019aeb         db  0x86 ; '.'
0000000000019aec         db  0x05 ; '.'
0000000000019aed         db  0x44 ; 'D'
0000000000019aee         db  0x0e ; '.'
0000000000019aef         db  0x30 ; '0'
0000000000019af0         db  0x83 ; '.'
0000000000019af1         db  0x06 ; '.'
0000000000019af2         db  0x02 ; '.'
0000000000019af3         db  0xad ; '.'
0000000000019af4         db  0x0a ; '.'
0000000000019af5         db  0x0e ; '.'
0000000000019af6         db  0x28 ; '('
0000000000019af7         db  0x43 ; 'C'
0000000000019af8         db  0x0e ; '.'
0000000000019af9         db  0x20 ; ' '
0000000000019afa         db  0x42 ; 'B'
0000000000019afb         db  0x0e ; '.'
0000000000019afc         db  0x18 ; '.'
0000000000019afd         db  0x42 ; 'B'
0000000000019afe         db  0x0e ; '.'
0000000000019aff         db  0x10 ; '.'
0000000000019b00         db  0x42 ; 'B'
0000000000019b01         db  0x0e ; '.'
0000000000019b02         db  0x08 ; '.'
0000000000019b03         db  0x4a ; 'J'
0000000000019b04         db  0x0b ; '.'
0000000000019b05         db  0x76 ; 'v'
0000000000019b06         db  0x0e ; '.'
0000000000019b07         db  0x28 ; '('
0000000000019b08         db  0x43 ; 'C'
0000000000019b09         db  0x0e ; '.'
0000000000019b0a         db  0x20 ; ' '
0000000000019b0b         db  0x42 ; 'B'
0000000000019b0c         db  0x0e ; '.'
0000000000019b0d         db  0x18 ; '.'
0000000000019b0e         db  0x42 ; 'B'
0000000000019b0f         db  0x0e ; '.'
0000000000019b10         db  0x10 ; '.'
0000000000019b11         db  0x42 ; 'B'
0000000000019b12         db  0x0e ; '.'
0000000000019b13         db  0x08 ; '.'
0000000000019b14         dd         0x00000038                                  ; Length of the record
0000000000019b18         dd         0x00002208                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000019b1c         db         0x84, 0xb5, 2 dup (0xff)                    ; begin 0x150a0
0000000000019b20         db         0x85, 3 dup (0x00)                          ; length 0x85 (end at 0x15125)
0000000000019b24         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019b25         db  0x42 ; 'B'
0000000000019b26         db  0x0e ; '.'
0000000000019b27         db  0x10 ; '.'
0000000000019b28         db  0x8d ; '.'
0000000000019b29         db  0x02 ; '.'
0000000000019b2a         db  0x42 ; 'B'
0000000000019b2b         db  0x0e ; '.'
0000000000019b2c         db  0x18 ; '.'
0000000000019b2d         db  0x8c ; '.'
0000000000019b2e         db  0x03 ; '.'
0000000000019b2f         db  0x41 ; 'A'
0000000000019b30         db  0x0e ; '.'
0000000000019b31         db  0x20 ; ' '
0000000000019b32         db  0x86 ; '.'
0000000000019b33         db  0x04 ; '.'
0000000000019b34         db  0x41 ; 'A'
0000000000019b35         db  0x0e ; '.'
0000000000019b36         db  0x28 ; '('
0000000000019b37         db  0x83 ; '.'
0000000000019b38         db  0x05 ; '.'
0000000000019b39         db  0x44 ; 'D'
0000000000019b3a         db  0x0e ; '.'
0000000000019b3b         db  0x30 ; '0'
0000000000019b3c         db  0x02 ; '.'
0000000000019b3d         db  0x57 ; 'W'
0000000000019b3e         db  0x0a ; '.'
0000000000019b3f         db  0x0e ; '.'
0000000000019b40         db  0x28 ; '('
0000000000019b41         db  0x44 ; 'D'
0000000000019b42         db  0x0e ; '.'
0000000000019b43         db  0x20 ; ' '
0000000000019b44         db  0x41 ; 'A'
0000000000019b45         db  0x0e ; '.'
0000000000019b46         db  0x18 ; '.'
0000000000019b47         db  0x42 ; 'B'
0000000000019b48         db  0x0e ; '.'
0000000000019b49         db  0x10 ; '.'
0000000000019b4a         db  0x42 ; 'B'
0000000000019b4b         db  0x0e ; '.'
0000000000019b4c         db  0x08 ; '.'
0000000000019b4d         db  0x46 ; 'F'
0000000000019b4e         db  0x0b ; '.'
0000000000019b4f         db  0x00 ; '.'
0000000000019b50         dd         0x00000018                                  ; Length of the record
0000000000019b54         dd         0x00002244                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000019b58         db         0xd8, 0xb5, 2 dup (0xff)                    ; begin 0x15130
0000000000019b5c         db         0x44, 3 dup (0x00)                          ; length 0x44 (end at 0x15174)
0000000000019b60         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019b61         db  0x41 ; 'A'
0000000000019b62         db  0x0e ; '.'
0000000000019b63         db  0x10 ; '.'
0000000000019b64         db  0x83 ; '.'
0000000000019b65         db  0x02 ; '.'
0000000000019b66         db  0x02 ; '.'
0000000000019b67         db  0x42 ; 'B'
0000000000019b68         db  0x0e ; '.'
0000000000019b69         db  0x08 ; '.'
0000000000019b6a         db  0x00 ; '.'
0000000000019b6b         db  0x00 ; '.'
0000000000019b6c         dd         0x00000058                                  ; Length of the record
0000000000019b70         dd         0x00002260                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000019b74         db         0x0c, 0xb6, 2 dup (0xff)                    ; begin 0x15180
0000000000019b78         db         0x9e, 3 dup (0x00)                          ; length 0x9e (end at 0x1521e)
0000000000019b7c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019b7d         db  0x4f ; 'O'
0000000000019b7e         db  0x0e ; '.'
0000000000019b7f         db  0x10 ; '.'
0000000000019b80         db  0x8d ; '.'
0000000000019b81         db  0x02 ; '.'
0000000000019b82         db  0x42 ; 'B'
0000000000019b83         db  0x0e ; '.'
0000000000019b84         db  0x18 ; '.'
0000000000019b85         db  0x8c ; '.'
0000000000019b86         db  0x03 ; '.'
0000000000019b87         db  0x44 ; 'D'
0000000000019b88         db  0x0e ; '.'
0000000000019b89         db  0x20 ; ' '
0000000000019b8a         db  0x86 ; '.'
0000000000019b8b         db  0x04 ; '.'
0000000000019b8c         db  0x41 ; 'A'
0000000000019b8d         db  0x0e ; '.'
0000000000019b8e         db  0x28 ; '('
0000000000019b8f         db  0x83 ; '.'
0000000000019b90         db  0x05 ; '.'
0000000000019b91         db  0x4d ; 'M'
0000000000019b92         db  0x0e ; '.'
0000000000019b93         db  0x40 ; '@'
0000000000019b94         db  0x67 ; 'g'
0000000000019b95         db  0x0e ; '.'
0000000000019b96         db  0x48 ; 'H'
0000000000019b97         db  0x41 ; 'A'
0000000000019b98         db  0x0e ; '.'
0000000000019b99         db  0x50 ; 'P'
0000000000019b9a         db  0x42 ; 'B'
0000000000019b9b         db  0x0e ; '.'
0000000000019b9c         db  0x58 ; 'X'
0000000000019b9d         db  0x42 ; 'B'
0000000000019b9e         db  0x0e ; '.'
0000000000019b9f         db  0x60 ; '`'
0000000000019ba0         db  0x52 ; 'R'
0000000000019ba1         db  0x0e ; '.'
0000000000019ba2         db  0x40 ; '@'
0000000000019ba3         db  0x49 ; 'I'
0000000000019ba4         db  0x0a ; '.'
0000000000019ba5         db  0x0e ; '.'
0000000000019ba6         db  0x28 ; '('
0000000000019ba7         db  0x41 ; 'A'
0000000000019ba8         db  0x0e ; '.'
0000000000019ba9         db  0x20 ; ' '
0000000000019baa         db  0x44 ; 'D'
0000000000019bab         db  0x0e ; '.'
0000000000019bac         db  0x18 ; '.'
0000000000019bad         db  0x42 ; 'B'
0000000000019bae         db  0x0e ; '.'
0000000000019baf         db  0x10 ; '.'
0000000000019bb0         db  0x42 ; 'B'
0000000000019bb1         db  0x0e ; '.'
0000000000019bb2         db  0x08 ; '.'
0000000000019bb3         db  0x45 ; 'E'
0000000000019bb4         db  0x0b ; '.'
0000000000019bb5         db  0x52 ; 'R'
0000000000019bb6         db  0x0e ; '.'
0000000000019bb7         db  0x48 ; 'H'
0000000000019bb8         db  0x41 ; 'A'
0000000000019bb9         db  0x0e ; '.'
0000000000019bba         db  0x50 ; 'P'
0000000000019bbb         db  0x42 ; 'B'
0000000000019bbc         db  0x0e ; '.'
0000000000019bbd         db  0x58 ; 'X'
0000000000019bbe         db  0x42 ; 'B'
0000000000019bbf         db  0x0e ; '.'
0000000000019bc0         db  0x60 ; '`'
0000000000019bc1         db  0x49 ; 'I'
0000000000019bc2         db  0x0e ; '.'
0000000000019bc3         db  0x08 ; '.'
0000000000019bc4         db  0xc3 ; '.'
0000000000019bc5         db  0xc6 ; '.'
0000000000019bc6         db  0xcc ; '.'
0000000000019bc7         db  0xcd ; '.'
0000000000019bc8         dd         0x0000001c                                  ; Length of the record
0000000000019bcc         dd         0x000022bc                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000019bd0         db         0x50, 0xb6, 2 dup (0xff)                    ; begin 0x15220
0000000000019bd4         db         0x18, 3 dup (0x00)                          ; length 0x18 (end at 0x15238)
0000000000019bd8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019bd9         db  0x44 ; 'D'
0000000000019bda         db  0x0e ; '.'
0000000000019bdb         db  0x10 ; '.'
0000000000019bdc         db  0x45 ; 'E'
0000000000019bdd         db  0x0e ; '.'
0000000000019bde         db  0x18 ; '.'
0000000000019bdf         db  0x42 ; 'B'
0000000000019be0         db  0x0e ; '.'
0000000000019be1         db  0x20 ; ' '
0000000000019be2         db  0x4c ; 'L'
0000000000019be3         db  0x0e ; '.'
0000000000019be4         db  0x08 ; '.'
0000000000019be5         db  0x00 ; '.'
0000000000019be6         db  0x00 ; '.'
0000000000019be7         db  0x00 ; '.'
0000000000019be8         dd         0x0000001c                                  ; Length of the record
0000000000019bec         dd         0x000022dc                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000019bf0         db         0x50, 0xb6, 2 dup (0xff)                    ; begin 0x15240
0000000000019bf4         db         0x15, 3 dup (0x00)                          ; length 0x15 (end at 0x15255)
0000000000019bf8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019bf9         db  0x44 ; 'D'
0000000000019bfa         db  0x0e ; '.'
0000000000019bfb         db  0x10 ; '.'
0000000000019bfc         db  0x42 ; 'B'
0000000000019bfd         db  0x0e ; '.'
0000000000019bfe         db  0x18 ; '.'
0000000000019bff         db  0x42 ; 'B'
0000000000019c00         db  0x0e ; '.'
0000000000019c01         db  0x20 ; ' '
0000000000019c02         db  0x4c ; 'L'
0000000000019c03         db  0x0e ; '.'
0000000000019c04         db  0x08 ; '.'
0000000000019c05         db  0x00 ; '.'
0000000000019c06         db  0x00 ; '.'
0000000000019c07         db  0x00 ; '.'
0000000000019c08         dd         0x00000020                                  ; Length of the record
0000000000019c0c         dd         0x000022fc                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000019c10         db         0x50, 0xb6, 2 dup (0xff)                    ; begin 0x15260
0000000000019c14         db         0x1a, 3 dup (0x00)                          ; length 0x1a (end at 0x1527a)
0000000000019c18         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019c19         db  0x44 ; 'D'
0000000000019c1a         db  0x0e ; '.'
0000000000019c1b         db  0x10 ; '.'
0000000000019c1c         db  0x42 ; 'B'
0000000000019c1d         db  0x0e ; '.'
0000000000019c1e         db  0x18 ; '.'
0000000000019c1f         db  0x44 ; 'D'
0000000000019c20         db  0x0e ; '.'
0000000000019c21         db  0x20 ; ' '
0000000000019c22         db  0x44 ; 'D'
0000000000019c23         db  0x0e ; '.'
0000000000019c24         db  0x28 ; '('
0000000000019c25         db  0x42 ; 'B'
0000000000019c26         db  0x0e ; '.'
0000000000019c27         db  0x30 ; '0'
0000000000019c28         db  0x49 ; 'I'
0000000000019c29         db  0x0e ; '.'
0000000000019c2a         db  0x08 ; '.'
0000000000019c2b         db  0x00 ; '.'
0000000000019c2c         dd         0x00000020                                  ; Length of the record
0000000000019c30         dd         0x00002320                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000019c34         db         0x4c, 0xb6, 2 dup (0xff)                    ; begin 0x15280
0000000000019c38         db         0x1c, 3 dup (0x00)                          ; length 0x1c (end at 0x1529c)
0000000000019c3c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019c3d         db  0x44 ; 'D'
0000000000019c3e         db  0x0e ; '.'
0000000000019c3f         db  0x10 ; '.'
0000000000019c40         db  0x42 ; 'B'
0000000000019c41         db  0x0e ; '.'
0000000000019c42         db  0x18 ; '.'
0000000000019c43         db  0x44 ; 'D'
0000000000019c44         db  0x0e ; '.'
0000000000019c45         db  0x20 ; ' '
0000000000019c46         db  0x44 ; 'D'
0000000000019c47         db  0x0e ; '.'
0000000000019c48         db  0x28 ; '('
0000000000019c49         db  0x44 ; 'D'
0000000000019c4a         db  0x0e ; '.'
0000000000019c4b         db  0x30 ; '0'
0000000000019c4c         db  0x49 ; 'I'
0000000000019c4d         db  0x0e ; '.'
0000000000019c4e         db  0x08 ; '.'
0000000000019c4f         db  0x00 ; '.'
0000000000019c50         dd         0x00000014                                  ; Length of the record
0000000000019c54         dd         0x00002344                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000019c58         db         0x48, 0xb6, 2 dup (0xff)                    ; begin 0x152a0
0000000000019c5c         db         0x41, 3 dup (0x00)                          ; length 0x41 (end at 0x152e1)
0000000000019c60         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019c61         align      8
0000000000019c68         dd         0x0000004c                                  ; Length of the record
0000000000019c6c         dd         0x0000235c                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000019c70         db         0x80, 0xb6, 2 dup (0xff)                    ; begin 0x152f0
0000000000019c74         db         0x7d, 3 dup (0x00)                          ; length 0x7d (end at 0x1536d)
0000000000019c78         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019c79         db  0x42 ; 'B'
0000000000019c7a         db  0x0e ; '.'
0000000000019c7b         db  0x10 ; '.'
0000000000019c7c         db  0x8c ; '.'
0000000000019c7d         db  0x02 ; '.'
0000000000019c7e         db  0x41 ; 'A'
0000000000019c7f         db  0x0e ; '.'
0000000000019c80         db  0x18 ; '.'
0000000000019c81         db  0x86 ; '.'
0000000000019c82         db  0x03 ; '.'
0000000000019c83         db  0x44 ; 'D'
0000000000019c84         db  0x0e ; '.'
0000000000019c85         db  0x20 ; ' '
0000000000019c86         db  0x83 ; '.'
0000000000019c87         db  0x04 ; '.'
0000000000019c88         db  0x69 ; 'i'
0000000000019c89         db  0x0a ; '.'
0000000000019c8a         db  0x0e ; '.'
0000000000019c8b         db  0x18 ; '.'
0000000000019c8c         db  0x41 ; 'A'
0000000000019c8d         db  0x0e ; '.'
0000000000019c8e         db  0x10 ; '.'
0000000000019c8f         db  0x42 ; 'B'
0000000000019c90         db  0x0e ; '.'
0000000000019c91         db  0x08 ; '.'
0000000000019c92         db  0x45 ; 'E'
0000000000019c93         db  0x0b ; '.'
0000000000019c94         db  0x55 ; 'U'
0000000000019c95         db  0x0a ; '.'
0000000000019c96         db  0x0e ; '.'
0000000000019c97         db  0x18 ; '.'
0000000000019c98         db  0x41 ; 'A'
0000000000019c99         db  0x0e ; '.'
0000000000019c9a         db  0x10 ; '.'
0000000000019c9b         db  0x42 ; 'B'
0000000000019c9c         db  0x0e ; '.'
0000000000019c9d         db  0x08 ; '.'
0000000000019c9e         db  0x48 ; 'H'
0000000000019c9f         db  0x0b ; '.'
0000000000019ca0         db  0x41 ; 'A'
0000000000019ca1         db  0x0a ; '.'
0000000000019ca2         db  0x0e ; '.'
0000000000019ca3         db  0x18 ; '.'
0000000000019ca4         db  0x46 ; 'F'
0000000000019ca5         db  0x0e ; '.'
0000000000019ca6         db  0x10 ; '.'
0000000000019ca7         db  0x42 ; 'B'
0000000000019ca8         db  0x0e ; '.'
0000000000019ca9         db  0x08 ; '.'
0000000000019caa         db  0x47 ; 'G'
0000000000019cab         db  0x0b ; '.'
0000000000019cac         db  0x49 ; 'I'
0000000000019cad         db  0x0e ; '.'
0000000000019cae         db  0x18 ; '.'
0000000000019caf         db  0x41 ; 'A'
0000000000019cb0         db  0x0e ; '.'
0000000000019cb1         db  0x10 ; '.'
0000000000019cb2         db  0x42 ; 'B'
0000000000019cb3         db  0x0e ; '.'
0000000000019cb4         db  0x08 ; '.'
0000000000019cb5         db  0x00 ; '.'
0000000000019cb6         db  0x00 ; '.'
0000000000019cb7         db  0x00 ; '.'
0000000000019cb8         dd         0x0000001c                                  ; Length of the record
0000000000019cbc         dd         0x000023ac                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000019cc0         db         0xb0, 0xb6, 2 dup (0xff)                    ; begin 0x15370
0000000000019cc4         db         0x60, 3 dup (0x00)                          ; length 0x60 (end at 0x153d0)
0000000000019cc8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019cc9         db  0x44 ; 'D'
0000000000019cca         db  0x0e ; '.'
0000000000019ccb         db  0x10 ; '.'
0000000000019ccc         db  0x75 ; 'u'
0000000000019ccd         db  0x0a ; '.'
0000000000019cce         db  0x0e ; '.'
0000000000019ccf         db  0x08 ; '.'
0000000000019cd0         db  0x47 ; 'G'
0000000000019cd1         db  0x0b ; '.'
0000000000019cd2         db  0x5f ; '_'
0000000000019cd3         db  0x0e ; '.'
0000000000019cd4         db  0x08 ; '.'
0000000000019cd5         db  0x00 ; '.'
0000000000019cd6         db  0x00 ; '.'
0000000000019cd7         db  0x00 ; '.'
0000000000019cd8         dd         0x0000001c                                  ; Length of the record
0000000000019cdc         dd         0x000023cc                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000019ce0         db         0xf0, 0xb6, 2 dup (0xff)                    ; begin 0x153d0
0000000000019ce4         db         0x3c, 3 dup (0x00)                          ; length 0x3c (end at 0x1540c)
0000000000019ce8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019ce9         db  0x44 ; 'D'
0000000000019cea         db  0x0e ; '.'
0000000000019ceb         db  0x10 ; '.'
0000000000019cec         db  0x61 ; 'a'
0000000000019ced         db  0x0a ; '.'
0000000000019cee         db  0x0e ; '.'
0000000000019cef         db  0x08 ; '.'
0000000000019cf0         db  0x4b ; 'K'
0000000000019cf1         db  0x0b ; '.'
0000000000019cf2         db  0x4b ; 'K'
0000000000019cf3         db  0x0e ; '.'
0000000000019cf4         db  0x08 ; '.'
0000000000019cf5         db  0x00 ; '.'
0000000000019cf6         db  0x00 ; '.'
0000000000019cf7         db  0x00 ; '.'
0000000000019cf8         dd         0x00000034                                  ; Length of the record
0000000000019cfc         dd         0x000023ec                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000019d00         db         0x10, 0xb7, 2 dup (0xff)                    ; begin 0x15410
0000000000019d04         db         0x7b, 3 dup (0x00)                          ; length 0x7b (end at 0x1548b)
0000000000019d08         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019d09         db  0x42 ; 'B'
0000000000019d0a         db  0x0e ; '.'
0000000000019d0b         db  0x10 ; '.'
0000000000019d0c         db  0x8c ; '.'
0000000000019d0d         db  0x02 ; '.'
0000000000019d0e         db  0x41 ; 'A'
0000000000019d0f         db  0x0e ; '.'
0000000000019d10         db  0x18 ; '.'
0000000000019d11         db  0x86 ; '.'
0000000000019d12         db  0x03 ; '.'
0000000000019d13         db  0x41 ; 'A'
0000000000019d14         db  0x0e ; '.'
0000000000019d15         db  0x20 ; ' '
0000000000019d16         db  0x83 ; '.'
0000000000019d17         db  0x04 ; '.'
0000000000019d18         db  0x7d ; '}'
0000000000019d19         db  0x0a ; '.'
0000000000019d1a         db  0x0e ; '.'
0000000000019d1b         db  0x18 ; '.'
0000000000019d1c         db  0x41 ; 'A'
0000000000019d1d         db  0x0e ; '.'
0000000000019d1e         db  0x10 ; '.'
0000000000019d1f         db  0x42 ; 'B'
0000000000019d20         db  0x0e ; '.'
0000000000019d21         db  0x08 ; '.'
0000000000019d22         db  0x44 ; 'D'
0000000000019d23         db  0x0b ; '.'
0000000000019d24         db  0x60 ; '`'
0000000000019d25         db  0x0a ; '.'
0000000000019d26         db  0x0e ; '.'
0000000000019d27         db  0x18 ; '.'
0000000000019d28         db  0x41 ; 'A'
0000000000019d29         db  0x0e ; '.'
0000000000019d2a         db  0x10 ; '.'
0000000000019d2b         db  0x42 ; 'B'
0000000000019d2c         db  0x0e ; '.'
0000000000019d2d         db  0x08 ; '.'
0000000000019d2e         db  0x45 ; 'E'
0000000000019d2f         db  0x0b ; '.'
0000000000019d30         dd         0x0000001c                                  ; Length of the record
0000000000019d34         dd         0x00002424                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000019d38         db         0x58, 0xb7, 2 dup (0xff)                    ; begin 0x15490
0000000000019d3c         db         0x40, 3 dup (0x00)                          ; length 0x40 (end at 0x154d0)
0000000000019d40         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019d41         db  0x44 ; 'D'
0000000000019d42         db  0x0e ; '.'
0000000000019d43         db  0x10 ; '.'
0000000000019d44         db  0x83 ; '.'
0000000000019d45         db  0x02 ; '.'
0000000000019d46         db  0x5a ; 'Z'
0000000000019d47         db  0x0a ; '.'
0000000000019d48         db  0x0e ; '.'
0000000000019d49         db  0x08 ; '.'
0000000000019d4a         db  0x4a ; 'J'
0000000000019d4b         db  0x0b ; '.'
0000000000019d4c         db  0x53 ; 'S'
0000000000019d4d         db  0x0e ; '.'
0000000000019d4e         db  0x08 ; '.'
0000000000019d4f         db  0x00 ; '.'
0000000000019d50         dd         0x0000002c                                  ; Length of the record
0000000000019d54         dd         0x00002444                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000019d58         db         0x78, 0xb7, 2 dup (0xff)                    ; begin 0x154d0
0000000000019d5c         db         0x57, 3 dup (0x00)                          ; length 0x57 (end at 0x15527)
0000000000019d60         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019d61         db  0x63 ; 'c'
0000000000019d62         db  0x0e ; '.'
0000000000019d63         db  0x10 ; '.'
0000000000019d64         db  0x8c ; '.'
0000000000019d65         db  0x02 ; '.'
0000000000019d66         db  0x41 ; 'A'
0000000000019d67         db  0x0e ; '.'
0000000000019d68         db  0x18 ; '.'
0000000000019d69         db  0x86 ; '.'
0000000000019d6a         db  0x03 ; '.'
0000000000019d6b         db  0x44 ; 'D'
0000000000019d6c         db  0x0e ; '.'
0000000000019d6d         db  0x20 ; ' '
0000000000019d6e         db  0x83 ; '.'
0000000000019d6f         db  0x04 ; '.'
0000000000019d70         db  0x6b ; 'k'
0000000000019d71         db  0x0e ; '.'
0000000000019d72         db  0x18 ; '.'
0000000000019d73         db  0x41 ; 'A'
0000000000019d74         db  0x0e ; '.'
0000000000019d75         db  0x10 ; '.'
0000000000019d76         db  0x42 ; 'B'
0000000000019d77         db  0x0e ; '.'
0000000000019d78         db  0x08 ; '.'
0000000000019d79         db  0x00 ; '.'
0000000000019d7a         db  0x00 ; '.'
0000000000019d7b         db  0x00 ; '.'
0000000000019d7c         db  0x00 ; '.'
0000000000019d7d         db  0x00 ; '.'
0000000000019d7e         db  0x00 ; '.'
0000000000019d7f         db  0x00 ; '.'
0000000000019d80         dd         0x00000044                                  ; Length of the record
0000000000019d84         dd         0x00002474                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000019d88         db         0xa8, 0xb7, 2 dup (0xff)                    ; begin 0x15530
0000000000019d8c         db         0x65, 3 dup (0x00)                          ; length 0x65 (end at 0x15595)
0000000000019d90         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019d91         db  0x42 ; 'B'
0000000000019d92         db  0x0e ; '.'
0000000000019d93         db  0x10 ; '.'
0000000000019d94         db  0x8f ; '.'
0000000000019d95         db  0x02 ; '.'
0000000000019d96         db  0x42 ; 'B'
0000000000019d97         db  0x0e ; '.'
0000000000019d98         db  0x18 ; '.'
0000000000019d99         db  0x8e ; '.'
0000000000019d9a         db  0x03 ; '.'
0000000000019d9b         db  0x45 ; 'E'
0000000000019d9c         db  0x0e ; '.'
0000000000019d9d         db  0x20 ; ' '
0000000000019d9e         db  0x8d ; '.'
0000000000019d9f         db  0x04 ; '.'
0000000000019da0         db  0x42 ; 'B'
0000000000019da1         db  0x0e ; '.'
0000000000019da2         db  0x28 ; '('
0000000000019da3         db  0x8c ; '.'
0000000000019da4         db  0x05 ; '.'
0000000000019da5         db  0x48 ; 'H'
0000000000019da6         db  0x0e ; '.'
0000000000019da7         db  0x30 ; '0'
0000000000019da8         db  0x86 ; '.'
0000000000019da9         db  0x06 ; '.'
0000000000019daa         db  0x48 ; 'H'
0000000000019dab         db  0x0e ; '.'
0000000000019dac         db  0x38 ; '8'
0000000000019dad         db  0x83 ; '.'
0000000000019dae         db  0x07 ; '.'
0000000000019daf         db  0x4d ; 'M'
0000000000019db0         db  0x0e ; '.'
0000000000019db1         db  0x40 ; '@'
0000000000019db2         db  0x72 ; 'r'
0000000000019db3         db  0x0e ; '.'
0000000000019db4         db  0x38 ; '8'
0000000000019db5         db  0x41 ; 'A'
0000000000019db6         db  0x0e ; '.'
0000000000019db7         db  0x30 ; '0'
0000000000019db8         db  0x41 ; 'A'
0000000000019db9         db  0x0e ; '.'
0000000000019dba         db  0x28 ; '('
0000000000019dbb         db  0x42 ; 'B'
0000000000019dbc         db  0x0e ; '.'
0000000000019dbd         db  0x20 ; ' '
0000000000019dbe         db  0x42 ; 'B'
0000000000019dbf         db  0x0e ; '.'
0000000000019dc0         db  0x18 ; '.'
0000000000019dc1         db  0x42 ; 'B'
0000000000019dc2         db  0x0e ; '.'
0000000000019dc3         db  0x10 ; '.'
0000000000019dc4         db  0x42 ; 'B'
0000000000019dc5         db  0x0e ; '.'
0000000000019dc6         db  0x08 ; '.'
0000000000019dc7         db  0x00 ; '.'
0000000000019dc8         dd         0x00000014                                  ; Length of the record
0000000000019dcc         dd         0x000024bc                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000019dd0         db         0xd0, 0xb7, 2 dup (0xff)                    ; begin 0x155a0
0000000000019dd4         db         0x02, 3 dup (0x00)                          ; length 0x2 (end at 0x155a2)
0000000000019dd8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019dd9         align      32
0000000000019de0         dd         0x00000010                                  ; Length of the record
0000000000019de4         dd         0x000024d4                                  ; FDE: parent CIE at 0x17910 (FDE encoding = 0x1B)
0000000000019de8         db         0xc8, 0xb7, 2 dup (0xff)                    ; begin 0x155b0
0000000000019dec         db         0x0e, 3 dup (0x00)                          ; length 0xe (end at 0x155be)
0000000000019df0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019df1         align      8


        ; Segment Segment 3
        ; Range: [0x21aab0; 0x21b240[ (1936 bytes)
        ; File offset : [109232; 110720[ (1488 bytes)
        ; Permissions: readable / writable
        ; Flags: 0x6



        ; Section .init_array
        ; Range: [0x21aab0; 0x21aab8[ (8 bytes)
        ; File offset : [109232; 109240[ (8 bytes)
        ; Flags: 0x3
        ;   SHT_FINI_ARRAY
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     __frame_dummy_init_array_entry:
000000000021aab0         dq         frame_dummy                                 ; DATA XREF=__libc_csu_init+11


        ; Section .fini_array
        ; Range: [0x21aab8; 0x21aac0[ (8 bytes)
        ; File offset : [109240; 109248[ (8 bytes)
        ; Flags: 0x3
        ;   SHT_PREINIT_ARRAY
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     __do_global_dtors_aux_fini_array_entry:
000000000021aab8         dq         __do_global_dtors_aux                       ; DATA XREF=__libc_csu_init+19


        ; Section .data.rel.ro
        ; Range: [0x21aac0; 0x21ab78[ (184 bytes)
        ; File offset : [109248; 109432[ (184 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     long_options:
000000000021aac0         db  0x86 ; '.'                                         ; DATA XREF=parse_long_options+176, parse_gnu_standard_options_only+124
000000000021aac1         db  0x61 ; 'a'
000000000021aac2         db  0x01 ; '.'
000000000021aac3         db  0x00 ; '.'
000000000021aac4         db  0x00 ; '.'
000000000021aac5         db  0x00 ; '.'
000000000021aac6         db  0x00 ; '.'
000000000021aac7         db  0x00 ; '.'
000000000021aac8         db  0x00 ; '.'
000000000021aac9         db  0x00 ; '.'
000000000021aaca         db  0x00 ; '.'
000000000021aacb         db  0x00 ; '.'
000000000021aacc         db  0x00 ; '.'
000000000021aacd         db  0x00 ; '.'
000000000021aace         db  0x00 ; '.'
000000000021aacf         db  0x00 ; '.'
000000000021aad0         db  0x00 ; '.'
000000000021aad1         db  0x00 ; '.'
000000000021aad2         db  0x00 ; '.'
000000000021aad3         db  0x00 ; '.'
000000000021aad4         db  0x00 ; '.'
000000000021aad5         db  0x00 ; '.'
000000000021aad6         db  0x00 ; '.'
000000000021aad7         db  0x00 ; '.'
000000000021aad8         db  0x68 ; 'h'
000000000021aad9         db  0x00 ; '.'
000000000021aada         db  0x00 ; '.'
000000000021aadb         db  0x00 ; '.'
000000000021aadc         db  0x00 ; '.'
000000000021aadd         db  0x00 ; '.'
000000000021aade         db  0x00 ; '.'
000000000021aadf         db  0x00 ; '.'
000000000021aae0         db  0x8b ; '.'
000000000021aae1         db  0x61 ; 'a'
000000000021aae2         db  0x01 ; '.'
000000000021aae3         db  0x00 ; '.'
000000000021aae4         db  0x00 ; '.'
000000000021aae5         db  0x00 ; '.'
000000000021aae6         db  0x00 ; '.'
000000000021aae7         db  0x00 ; '.'
000000000021aae8         db  0x00 ; '.'
000000000021aae9         db  0x00 ; '.'
000000000021aaea         db  0x00 ; '.'
000000000021aaeb         db  0x00 ; '.'
000000000021aaec         db  0x00 ; '.'
000000000021aaed         db  0x00 ; '.'
000000000021aaee         db  0x00 ; '.'
000000000021aaef         db  0x00 ; '.'
000000000021aaf0         db  0x00 ; '.'
000000000021aaf1         db  0x00 ; '.'
000000000021aaf2         db  0x00 ; '.'
000000000021aaf3         db  0x00 ; '.'
000000000021aaf4         db  0x00 ; '.'
000000000021aaf5         db  0x00 ; '.'
000000000021aaf6         db  0x00 ; '.'
000000000021aaf7         db  0x00 ; '.'
000000000021aaf8         db  0x76 ; 'v'
000000000021aaf9         db  0x00 ; '.'
000000000021aafa         db  0x00 ; '.'
000000000021aafb         db  0x00 ; '.'
000000000021aafc         db  0x00 ; '.'
000000000021aafd         db  0x00 ; '.'
000000000021aafe         db  0x00 ; '.'
000000000021aaff         db  0x00 ; '.'
000000000021ab00         db  0x00 ; '.'
000000000021ab01         db  0x00 ; '.'
000000000021ab02         db  0x00 ; '.'
000000000021ab03         db  0x00 ; '.'
000000000021ab04         db  0x00 ; '.'
000000000021ab05         db  0x00 ; '.'
000000000021ab06         db  0x00 ; '.'
000000000021ab07         db  0x00 ; '.'
000000000021ab08         db  0x00 ; '.'
000000000021ab09         db  0x00 ; '.'
000000000021ab0a         db  0x00 ; '.'
000000000021ab0b         db  0x00 ; '.'
000000000021ab0c         db  0x00 ; '.'
000000000021ab0d         db  0x00 ; '.'
000000000021ab0e         db  0x00 ; '.'
000000000021ab0f         db  0x00 ; '.'
000000000021ab10         db  0x00 ; '.'
000000000021ab11         db  0x00 ; '.'
000000000021ab12         db  0x00 ; '.'
000000000021ab13         db  0x00 ; '.'
000000000021ab14         db  0x00 ; '.'
000000000021ab15         db  0x00 ; '.'
000000000021ab16         db  0x00 ; '.'
000000000021ab17         db  0x00 ; '.'
000000000021ab18         db  0x00 ; '.'
000000000021ab19         db  0x00 ; '.'
000000000021ab1a         db  0x00 ; '.'
000000000021ab1b         db  0x00 ; '.'
000000000021ab1c         db  0x00 ; '.'
000000000021ab1d         db  0x00 ; '.'
000000000021ab1e         db  0x00 ; '.'
000000000021ab1f         db  0x00 ; '.'
                     quoting_style_args:
000000000021ab20         db  0x4f ; 'O'
000000000021ab21         db  0x62 ; 'b'
000000000021ab22         db  0x01 ; '.'
000000000021ab23         db  0x00 ; '.'
000000000021ab24         db  0x00 ; '.'
000000000021ab25         db  0x00 ; '.'
000000000021ab26         db  0x00 ; '.'
000000000021ab27         db  0x00 ; '.'
000000000021ab28         db  0x57 ; 'W'
000000000021ab29         db  0x62 ; 'b'
000000000021ab2a         db  0x01 ; '.'
000000000021ab2b         db  0x00 ; '.'
000000000021ab2c         db  0x00 ; '.'
000000000021ab2d         db  0x00 ; '.'
000000000021ab2e         db  0x00 ; '.'
000000000021ab2f         db  0x00 ; '.'
000000000021ab30         db  0x5d ; ']'
000000000021ab31         db  0x62 ; 'b'
000000000021ab32         db  0x01 ; '.'
000000000021ab33         db  0x00 ; '.'
000000000021ab34         db  0x00 ; '.'
000000000021ab35         db  0x00 ; '.'
000000000021ab36         db  0x00 ; '.'
000000000021ab37         db  0x00 ; '.'
000000000021ab38         db  0x6a ; 'j'
000000000021ab39         db  0x62 ; 'b'
000000000021ab3a         db  0x01 ; '.'
000000000021ab3b         db  0x00 ; '.'
000000000021ab3c         db  0x00 ; '.'
000000000021ab3d         db  0x00 ; '.'
000000000021ab3e         db  0x00 ; '.'
000000000021ab3f         db  0x00 ; '.'
000000000021ab40         db  0x77 ; 'w'
000000000021ab41         db  0x62 ; 'b'
000000000021ab42         db  0x01 ; '.'
000000000021ab43         db  0x00 ; '.'
000000000021ab44         db  0x00 ; '.'
000000000021ab45         db  0x00 ; '.'
000000000021ab46         db  0x00 ; '.'
000000000021ab47         db  0x00 ; '.'
000000000021ab48         db  0x8b ; '.'
000000000021ab49         db  0x62 ; 'b'
000000000021ab4a         db  0x01 ; '.'
000000000021ab4b         db  0x00 ; '.'
000000000021ab4c         db  0x00 ; '.'
000000000021ab4d         db  0x00 ; '.'
000000000021ab4e         db  0x00 ; '.'
000000000021ab4f         db  0x00 ; '.'
000000000021ab50         db  0x8d ; '.'
000000000021ab51         db  0x62 ; 'b'
000000000021ab52         db  0x01 ; '.'
000000000021ab53         db  0x00 ; '.'
000000000021ab54         db  0x00 ; '.'
000000000021ab55         db  0x00 ; '.'
000000000021ab56         db  0x00 ; '.'
000000000021ab57         db  0x00 ; '.'
000000000021ab58         db  0x70 ; 'p'
000000000021ab59         db  0x62 ; 'b'
000000000021ab5a         db  0x01 ; '.'
000000000021ab5b         db  0x00 ; '.'
000000000021ab5c         db  0x00 ; '.'
000000000021ab5d         db  0x00 ; '.'
000000000021ab5e         db  0x00 ; '.'
000000000021ab5f         db  0x00 ; '.'
000000000021ab60         db  0xf1 ; '.'
000000000021ab61         db  0x60 ; '`'
000000000021ab62         db  0x01 ; '.'
000000000021ab63         db  0x00 ; '.'
000000000021ab64         db  0x00 ; '.'
000000000021ab65         db  0x00 ; '.'
000000000021ab66         db  0x00 ; '.'
000000000021ab67         db  0x00 ; '.'
000000000021ab68         db  0x95 ; '.'
000000000021ab69         db  0x62 ; 'b'
000000000021ab6a         db  0x01 ; '.'
000000000021ab6b         db  0x00 ; '.'
000000000021ab6c         db  0x00 ; '.'
000000000021ab6d         db  0x00 ; '.'
000000000021ab6e         db  0x00 ; '.'
000000000021ab6f         db  0x00 ; '.'
000000000021ab70         db  0x00 ; '.'
000000000021ab71         db  0x00 ; '.'
000000000021ab72         db  0x00 ; '.'
000000000021ab73         db  0x00 ; '.'
000000000021ab74         db  0x00 ; '.'
000000000021ab75         db  0x00 ; '.'
000000000021ab76         db  0x00 ; '.'
000000000021ab77         db  0x00 ; '.'


        ; Section .dynamic
        ; Range: [0x21ab78; 0x21ad78[ (512 bytes)
        ; File offset : [109432; 109944[ (512 bytes)
        ; Flags: 0x3
        ;   SHT_DYNAMIC
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     _DYNAMIC:
000000000021ab78         db  0x01 ; '.'
000000000021ab79         db  0x00 ; '.'
000000000021ab7a         db  0x00 ; '.'
000000000021ab7b         db  0x00 ; '.'
000000000021ab7c         db  0x00 ; '.'
000000000021ab7d         db  0x00 ; '.'
000000000021ab7e         db  0x00 ; '.'
000000000021ab7f         db  0x00 ; '.'
000000000021ab80         db  0x01 ; '.'
000000000021ab81         db  0x00 ; '.'
000000000021ab82         db  0x00 ; '.'
000000000021ab83         db  0x00 ; '.'
000000000021ab84         db  0x00 ; '.'
000000000021ab85         db  0x00 ; '.'
000000000021ab86         db  0x00 ; '.'
000000000021ab87         db  0x00 ; '.'
000000000021ab88         db  0x01 ; '.'
000000000021ab89         db  0x00 ; '.'
000000000021ab8a         db  0x00 ; '.'
000000000021ab8b         db  0x00 ; '.'
000000000021ab8c         db  0x00 ; '.'
000000000021ab8d         db  0x00 ; '.'
000000000021ab8e         db  0x00 ; '.'
000000000021ab8f         db  0x00 ; '.'
000000000021ab90         db  0xee ; '.'
000000000021ab91         db  0x00 ; '.'
000000000021ab92         db  0x00 ; '.'
000000000021ab93         db  0x00 ; '.'
000000000021ab94         db  0x00 ; '.'
000000000021ab95         db  0x00 ; '.'
000000000021ab96         db  0x00 ; '.'
000000000021ab97         db  0x00 ; '.'
000000000021ab98         db  0x0c ; '.'
000000000021ab99         db  0x00 ; '.'
000000000021ab9a         db  0x00 ; '.'
000000000021ab9b         db  0x00 ; '.'
000000000021ab9c         db  0x00 ; '.'
000000000021ab9d         db  0x00 ; '.'
000000000021ab9e         db  0x00 ; '.'
000000000021ab9f         db  0x00 ; '.'
000000000021aba0         db  0x90 ; '.'
000000000021aba1         db  0x19 ; '.'
000000000021aba2         db  0x00 ; '.'
000000000021aba3         db  0x00 ; '.'
000000000021aba4         db  0x00 ; '.'
000000000021aba5         db  0x00 ; '.'
000000000021aba6         db  0x00 ; '.'
000000000021aba7         db  0x00 ; '.'
000000000021aba8         db  0x0d ; '.'
000000000021aba9         db  0x00 ; '.'
000000000021abaa         db  0x00 ; '.'
000000000021abab         db  0x00 ; '.'
000000000021abac         db  0x00 ; '.'
000000000021abad         db  0x00 ; '.'
000000000021abae         db  0x00 ; '.'
000000000021abaf         db  0x00 ; '.'
000000000021abb0         db  0xc0 ; '.'
000000000021abb1         db  0x55 ; 'U'
000000000021abb2         db  0x01 ; '.'
000000000021abb3         db  0x00 ; '.'
000000000021abb4         db  0x00 ; '.'
000000000021abb5         db  0x00 ; '.'
000000000021abb6         db  0x00 ; '.'
000000000021abb7         db  0x00 ; '.'
000000000021abb8         db  0x19 ; '.'
000000000021abb9         db  0x00 ; '.'
000000000021abba         db  0x00 ; '.'
000000000021abbb         db  0x00 ; '.'
000000000021abbc         db  0x00 ; '.'
000000000021abbd         db  0x00 ; '.'
000000000021abbe         db  0x00 ; '.'
000000000021abbf         db  0x00 ; '.'
000000000021abc0         db  0xb0 ; '.'
000000000021abc1         db  0xaa ; '.'
000000000021abc2         db  0x21 ; '!'
000000000021abc3         db  0x00 ; '.'
000000000021abc4         db  0x00 ; '.'
000000000021abc5         db  0x00 ; '.'
000000000021abc6         db  0x00 ; '.'
000000000021abc7         db  0x00 ; '.'
000000000021abc8         db  0x1b ; '.'
000000000021abc9         db  0x00 ; '.'
000000000021abca         db  0x00 ; '.'
000000000021abcb         db  0x00 ; '.'
000000000021abcc         db  0x00 ; '.'
000000000021abcd         db  0x00 ; '.'
000000000021abce         db  0x00 ; '.'
000000000021abcf         db  0x00 ; '.'
000000000021abd0         db  0x08 ; '.'
000000000021abd1         db  0x00 ; '.'
000000000021abd2         db  0x00 ; '.'
000000000021abd3         db  0x00 ; '.'
000000000021abd4         db  0x00 ; '.'
000000000021abd5         db  0x00 ; '.'
000000000021abd6         db  0x00 ; '.'
000000000021abd7         db  0x00 ; '.'
000000000021abd8         db  0x1a ; '.'
000000000021abd9         db  0x00 ; '.'
000000000021abda         db  0x00 ; '.'
000000000021abdb         db  0x00 ; '.'
000000000021abdc         db  0x00 ; '.'
000000000021abdd         db  0x00 ; '.'
000000000021abde         db  0x00 ; '.'
000000000021abdf         db  0x00 ; '.'
000000000021abe0         db  0xb8 ; '.'
000000000021abe1         db  0xaa ; '.'
000000000021abe2         db  0x21 ; '!'
000000000021abe3         db  0x00 ; '.'
000000000021abe4         db  0x00 ; '.'
000000000021abe5         db  0x00 ; '.'
000000000021abe6         db  0x00 ; '.'
000000000021abe7         db  0x00 ; '.'
000000000021abe8         db  0x1c ; '.'
000000000021abe9         db  0x00 ; '.'
000000000021abea         db  0x00 ; '.'
000000000021abeb         db  0x00 ; '.'
000000000021abec         db  0x00 ; '.'
000000000021abed         db  0x00 ; '.'
000000000021abee         db  0x00 ; '.'
000000000021abef         db  0x00 ; '.'
000000000021abf0         db  0x08 ; '.'
000000000021abf1         db  0x00 ; '.'
000000000021abf2         db  0x00 ; '.'
000000000021abf3         db  0x00 ; '.'
000000000021abf4         db  0x00 ; '.'
000000000021abf5         db  0x00 ; '.'
000000000021abf6         db  0x00 ; '.'
000000000021abf7         db  0x00 ; '.'
000000000021abf8         db  0xf5 ; '.'
000000000021abf9         db  0xfe ; '.'
000000000021abfa         db  0xff ; '.'
000000000021abfb         db  0x6f ; 'o'
000000000021abfc         db  0x00 ; '.'
000000000021abfd         db  0x00 ; '.'
000000000021abfe         db  0x00 ; '.'
000000000021abff         db  0x00 ; '.'
000000000021ac00         db  0x98 ; '.'
000000000021ac01         db  0x02 ; '.'
000000000021ac02         db  0x00 ; '.'
000000000021ac03         db  0x00 ; '.'
000000000021ac04         db  0x00 ; '.'
000000000021ac05         db  0x00 ; '.'
000000000021ac06         db  0x00 ; '.'
000000000021ac07         db  0x00 ; '.'
000000000021ac08         db  0x05 ; '.'
000000000021ac09         db  0x00 ; '.'
000000000021ac0a         db  0x00 ; '.'
000000000021ac0b         db  0x00 ; '.'
000000000021ac0c         db  0x00 ; '.'
000000000021ac0d         db  0x00 ; '.'
000000000021ac0e         db  0x00 ; '.'
000000000021ac0f         db  0x00 ; '.'
000000000021ac10         db  0x50 ; 'P'
000000000021ac11         db  0x0b ; '.'
000000000021ac12         db  0x00 ; '.'
000000000021ac13         db  0x00 ; '.'
000000000021ac14         db  0x00 ; '.'
000000000021ac15         db  0x00 ; '.'
000000000021ac16         db  0x00 ; '.'
000000000021ac17         db  0x00 ; '.'
000000000021ac18         db  0x06 ; '.'
000000000021ac19         db  0x00 ; '.'
000000000021ac1a         db  0x00 ; '.'
000000000021ac1b         db  0x00 ; '.'
000000000021ac1c         db  0x00 ; '.'
000000000021ac1d         db  0x00 ; '.'
000000000021ac1e         db  0x00 ; '.'
000000000021ac1f         db  0x00 ; '.'
000000000021ac20         db  0xf8 ; '.'
000000000021ac21         db  0x02 ; '.'
000000000021ac22         db  0x00 ; '.'
000000000021ac23         db  0x00 ; '.'
000000000021ac24         db  0x00 ; '.'
000000000021ac25         db  0x00 ; '.'
000000000021ac26         db  0x00 ; '.'
000000000021ac27         db  0x00 ; '.'
000000000021ac28         db  0x0a ; '.'
000000000021ac29         db  0x00 ; '.'
000000000021ac2a         db  0x00 ; '.'
000000000021ac2b         db  0x00 ; '.'
000000000021ac2c         db  0x00 ; '.'
000000000021ac2d         db  0x00 ; '.'
000000000021ac2e         db  0x00 ; '.'
000000000021ac2f         db  0x00 ; '.'
000000000021ac30         db  0xfd ; '.'
000000000021ac31         db  0x03 ; '.'
000000000021ac32         db  0x00 ; '.'
000000000021ac33         db  0x00 ; '.'
000000000021ac34         db  0x00 ; '.'
000000000021ac35         db  0x00 ; '.'
000000000021ac36         db  0x00 ; '.'
000000000021ac37         db  0x00 ; '.'
000000000021ac38         db  0x0b ; '.'
000000000021ac39         db  0x00 ; '.'
000000000021ac3a         db  0x00 ; '.'
000000000021ac3b         db  0x00 ; '.'
000000000021ac3c         db  0x00 ; '.'
000000000021ac3d         db  0x00 ; '.'
000000000021ac3e         db  0x00 ; '.'
000000000021ac3f         db  0x00 ; '.'
000000000021ac40         db  0x18 ; '.'
000000000021ac41         db  0x00 ; '.'
000000000021ac42         db  0x00 ; '.'
000000000021ac43         db  0x00 ; '.'
000000000021ac44         db  0x00 ; '.'
000000000021ac45         db  0x00 ; '.'
000000000021ac46         db  0x00 ; '.'
000000000021ac47         db  0x00 ; '.'
000000000021ac48         db  0x15 ; '.'
000000000021ac49         db  0x00 ; '.'
000000000021ac4a         db  0x00 ; '.'
000000000021ac4b         db  0x00 ; '.'
000000000021ac4c         db  0x00 ; '.'
000000000021ac4d         db  0x00 ; '.'
000000000021ac4e         db  0x00 ; '.'
000000000021ac4f         db  0x00 ; '.'
000000000021ac50         db  0x00 ; '.'
000000000021ac51         db  0x00 ; '.'
000000000021ac52         db  0x00 ; '.'
000000000021ac53         db  0x00 ; '.'
000000000021ac54         db  0x00 ; '.'
000000000021ac55         db  0x00 ; '.'
000000000021ac56         db  0x00 ; '.'
000000000021ac57         db  0x00 ; '.'
000000000021ac58         db  0x03 ; '.'
000000000021ac59         db  0x00 ; '.'
000000000021ac5a         db  0x00 ; '.'
000000000021ac5b         db  0x00 ; '.'
000000000021ac5c         db  0x00 ; '.'
000000000021ac5d         db  0x00 ; '.'
000000000021ac5e         db  0x00 ; '.'
000000000021ac5f         db  0x00 ; '.'
000000000021ac60         db  0x78 ; 'x'
000000000021ac61         db  0xad ; '.'
000000000021ac62         db  0x21 ; '!'
000000000021ac63         db  0x00 ; '.'
000000000021ac64         db  0x00 ; '.'
000000000021ac65         db  0x00 ; '.'
000000000021ac66         db  0x00 ; '.'
000000000021ac67         db  0x00 ; '.'
000000000021ac68         db  0x02 ; '.'
000000000021ac69         db  0x00 ; '.'
000000000021ac6a         db  0x00 ; '.'
000000000021ac6b         db  0x00 ; '.'
000000000021ac6c         db  0x00 ; '.'
000000000021ac6d         db  0x00 ; '.'
000000000021ac6e         db  0x00 ; '.'
000000000021ac6f         db  0x00 ; '.'
000000000021ac70         db  0x18 ; '.'
000000000021ac71         db  0x06 ; '.'
000000000021ac72         db  0x00 ; '.'
000000000021ac73         db  0x00 ; '.'
000000000021ac74         db  0x00 ; '.'
000000000021ac75         db  0x00 ; '.'
000000000021ac76         db  0x00 ; '.'
000000000021ac77         db  0x00 ; '.'
000000000021ac78         db  0x14 ; '.'
000000000021ac79         db  0x00 ; '.'
000000000021ac7a         db  0x00 ; '.'
000000000021ac7b         db  0x00 ; '.'
000000000021ac7c         db  0x00 ; '.'
000000000021ac7d         db  0x00 ; '.'
000000000021ac7e         db  0x00 ; '.'
000000000021ac7f         db  0x00 ; '.'
000000000021ac80         db  0x07 ; '.'
000000000021ac81         db  0x00 ; '.'
000000000021ac82         db  0x00 ; '.'
000000000021ac83         db  0x00 ; '.'
000000000021ac84         db  0x00 ; '.'
000000000021ac85         db  0x00 ; '.'
000000000021ac86         db  0x00 ; '.'
000000000021ac87         db  0x00 ; '.'
000000000021ac88         db  0x17 ; '.'
000000000021ac89         db  0x00 ; '.'
000000000021ac8a         db  0x00 ; '.'
000000000021ac8b         db  0x00 ; '.'
000000000021ac8c         db  0x00 ; '.'
000000000021ac8d         db  0x00 ; '.'
000000000021ac8e         db  0x00 ; '.'
000000000021ac8f         db  0x00 ; '.'
000000000021ac90         db  0x78 ; 'x'
000000000021ac91         db  0x13 ; '.'
000000000021ac92         db  0x00 ; '.'
000000000021ac93         db  0x00 ; '.'
000000000021ac94         db  0x00 ; '.'
000000000021ac95         db  0x00 ; '.'
000000000021ac96         db  0x00 ; '.'
000000000021ac97         db  0x00 ; '.'
000000000021ac98         db  0x07 ; '.'
000000000021ac99         db  0x00 ; '.'
000000000021ac9a         db  0x00 ; '.'
000000000021ac9b         db  0x00 ; '.'
000000000021ac9c         db  0x00 ; '.'
000000000021ac9d         db  0x00 ; '.'
000000000021ac9e         db  0x00 ; '.'
000000000021ac9f         db  0x00 ; '.'
000000000021aca0         db  0x60 ; '`'
000000000021aca1         db  0x10 ; '.'
000000000021aca2         db  0x00 ; '.'
000000000021aca3         db  0x00 ; '.'
000000000021aca4         db  0x00 ; '.'
000000000021aca5         db  0x00 ; '.'
000000000021aca6         db  0x00 ; '.'
000000000021aca7         db  0x00 ; '.'
000000000021aca8         db  0x08 ; '.'
000000000021aca9         db  0x00 ; '.'
000000000021acaa         db  0x00 ; '.'
000000000021acab         db  0x00 ; '.'
000000000021acac         db  0x00 ; '.'
000000000021acad         db  0x00 ; '.'
000000000021acae         db  0x00 ; '.'
000000000021acaf         db  0x00 ; '.'
000000000021acb0         db  0x18 ; '.'
000000000021acb1         db  0x03 ; '.'
000000000021acb2         db  0x00 ; '.'
000000000021acb3         db  0x00 ; '.'
000000000021acb4         db  0x00 ; '.'
000000000021acb5         db  0x00 ; '.'
000000000021acb6         db  0x00 ; '.'
000000000021acb7         db  0x00 ; '.'
000000000021acb8         db  0x09 ; '.'
000000000021acb9         db  0x00 ; '.'
000000000021acba         db  0x00 ; '.'
000000000021acbb         db  0x00 ; '.'
000000000021acbc         db  0x00 ; '.'
000000000021acbd         db  0x00 ; '.'
000000000021acbe         db  0x00 ; '.'
000000000021acbf         db  0x00 ; '.'
000000000021acc0         db  0x18 ; '.'
000000000021acc1         db  0x00 ; '.'
000000000021acc2         db  0x00 ; '.'
000000000021acc3         db  0x00 ; '.'
000000000021acc4         db  0x00 ; '.'
000000000021acc5         db  0x00 ; '.'
000000000021acc6         db  0x00 ; '.'
000000000021acc7         db  0x00 ; '.'
000000000021acc8         db  0x1e ; '.'
000000000021acc9         db  0x00 ; '.'
000000000021acca         db  0x00 ; '.'
000000000021accb         db  0x00 ; '.'
000000000021accc         db  0x00 ; '.'
000000000021accd         db  0x00 ; '.'
000000000021acce         db  0x00 ; '.'
000000000021accf         db  0x00 ; '.'
000000000021acd0         db  0x08 ; '.'
000000000021acd1         db  0x00 ; '.'
000000000021acd2         db  0x00 ; '.'
000000000021acd3         db  0x00 ; '.'
000000000021acd4         db  0x00 ; '.'
000000000021acd5         db  0x00 ; '.'
000000000021acd6         db  0x00 ; '.'
000000000021acd7         db  0x00 ; '.'
000000000021acd8         db  0xfb ; '.'
000000000021acd9         db  0xff ; '.'
000000000021acda         db  0xff ; '.'
000000000021acdb         db  0x6f ; 'o'
000000000021acdc         db  0x00 ; '.'
000000000021acdd         db  0x00 ; '.'
000000000021acde         db  0x00 ; '.'
000000000021acdf         db  0x00 ; '.'
000000000021ace0         db  0x01 ; '.'
000000000021ace1         db  0x00 ; '.'
000000000021ace2         db  0x00 ; '.'
000000000021ace3         db  0x08 ; '.'
000000000021ace4         db  0x00 ; '.'
000000000021ace5         db  0x00 ; '.'
000000000021ace6         db  0x00 ; '.'
000000000021ace7         db  0x00 ; '.'
000000000021ace8         db  0xfe ; '.'
000000000021ace9         db  0xff ; '.'
000000000021acea         db  0xff ; '.'
000000000021aceb         db  0x6f ; 'o'
000000000021acec         db  0x00 ; '.'
000000000021aced         db  0x00 ; '.'
000000000021acee         db  0x00 ; '.'
000000000021acef         db  0x00 ; '.'
000000000021acf0         db  0x00 ; '.'
000000000021acf1         db  0x10 ; '.'
000000000021acf2         db  0x00 ; '.'
000000000021acf3         db  0x00 ; '.'
000000000021acf4         db  0x00 ; '.'
000000000021acf5         db  0x00 ; '.'
000000000021acf6         db  0x00 ; '.'
000000000021acf7         db  0x00 ; '.'
000000000021acf8         db  0xff ; '.'
000000000021acf9         db  0xff ; '.'
000000000021acfa         db  0xff ; '.'
000000000021acfb         db  0x6f ; 'o'
000000000021acfc         db  0x00 ; '.'
000000000021acfd         db  0x00 ; '.'
000000000021acfe         db  0x00 ; '.'
000000000021acff         db  0x00 ; '.'
000000000021ad00         db  0x01 ; '.'
000000000021ad01         db  0x00 ; '.'
000000000021ad02         db  0x00 ; '.'
000000000021ad03         db  0x00 ; '.'
000000000021ad04         db  0x00 ; '.'
000000000021ad05         db  0x00 ; '.'
000000000021ad06         db  0x00 ; '.'
000000000021ad07         db  0x00 ; '.'
000000000021ad08         db  0xf0 ; '.'
000000000021ad09         db  0xff ; '.'
000000000021ad0a         db  0xff ; '.'
000000000021ad0b         db  0x6f ; 'o'
000000000021ad0c         db  0x00 ; '.'
000000000021ad0d         db  0x00 ; '.'
000000000021ad0e         db  0x00 ; '.'
000000000021ad0f         db  0x00 ; '.'
000000000021ad10         db  0x4e ; 'N'
000000000021ad11         db  0x0f ; '.'
000000000021ad12         db  0x00 ; '.'
000000000021ad13         db  0x00 ; '.'
000000000021ad14         db  0x00 ; '.'
000000000021ad15         db  0x00 ; '.'
000000000021ad16         db  0x00 ; '.'
000000000021ad17         db  0x00 ; '.'
000000000021ad18         db  0xf9 ; '.'
000000000021ad19         db  0xff ; '.'
000000000021ad1a         db  0xff ; '.'
000000000021ad1b         db  0x6f ; 'o'
000000000021ad1c         db  0x00 ; '.'
000000000021ad1d         db  0x00 ; '.'
000000000021ad1e         db  0x00 ; '.'
000000000021ad1f         db  0x00 ; '.'
000000000021ad20         db  0x11 ; '.'
000000000021ad21         db  0x00 ; '.'
000000000021ad22         db  0x00 ; '.'
000000000021ad23         db  0x00 ; '.'
000000000021ad24         db  0x00 ; '.'
000000000021ad25         db  0x00 ; '.'
000000000021ad26         db  0x00 ; '.'
000000000021ad27         db  0x00 ; '.'
000000000021ad28         db  0x00 ; '.'
000000000021ad29         db  0x00 ; '.'
000000000021ad2a         db  0x00 ; '.'
000000000021ad2b         db  0x00 ; '.'
000000000021ad2c         db  0x00 ; '.'
000000000021ad2d         db  0x00 ; '.'
000000000021ad2e         db  0x00 ; '.'
000000000021ad2f         db  0x00 ; '.'
000000000021ad30         db  0x00 ; '.'
000000000021ad31         db  0x00 ; '.'
000000000021ad32         db  0x00 ; '.'
000000000021ad33         db  0x00 ; '.'
000000000021ad34         db  0x00 ; '.'
000000000021ad35         db  0x00 ; '.'
000000000021ad36         db  0x00 ; '.'
000000000021ad37         db  0x00 ; '.'
000000000021ad38         db  0x00 ; '.'
000000000021ad39         db  0x00 ; '.'
000000000021ad3a         db  0x00 ; '.'
000000000021ad3b         db  0x00 ; '.'
000000000021ad3c         db  0x00 ; '.'
000000000021ad3d         db  0x00 ; '.'
000000000021ad3e         db  0x00 ; '.'
000000000021ad3f         db  0x00 ; '.'
000000000021ad40         db  0x00 ; '.'
000000000021ad41         db  0x00 ; '.'
000000000021ad42         db  0x00 ; '.'
000000000021ad43         db  0x00 ; '.'
000000000021ad44         db  0x00 ; '.'
000000000021ad45         db  0x00 ; '.'
000000000021ad46         db  0x00 ; '.'
000000000021ad47         db  0x00 ; '.'
000000000021ad48         db  0x00 ; '.'
000000000021ad49         db  0x00 ; '.'
000000000021ad4a         db  0x00 ; '.'
000000000021ad4b         db  0x00 ; '.'
000000000021ad4c         db  0x00 ; '.'
000000000021ad4d         db  0x00 ; '.'
000000000021ad4e         db  0x00 ; '.'
000000000021ad4f         db  0x00 ; '.'
000000000021ad50         db  0x00 ; '.'
000000000021ad51         db  0x00 ; '.'
000000000021ad52         db  0x00 ; '.'
000000000021ad53         db  0x00 ; '.'
000000000021ad54         db  0x00 ; '.'
000000000021ad55         db  0x00 ; '.'
000000000021ad56         db  0x00 ; '.'
000000000021ad57         db  0x00 ; '.'
000000000021ad58         db  0x00 ; '.'
000000000021ad59         db  0x00 ; '.'
000000000021ad5a         db  0x00 ; '.'
000000000021ad5b         db  0x00 ; '.'
000000000021ad5c         db  0x00 ; '.'
000000000021ad5d         db  0x00 ; '.'
000000000021ad5e         db  0x00 ; '.'
000000000021ad5f         db  0x00 ; '.'
000000000021ad60         db  0x00 ; '.'
000000000021ad61         db  0x00 ; '.'
000000000021ad62         db  0x00 ; '.'
000000000021ad63         db  0x00 ; '.'
000000000021ad64         db  0x00 ; '.'
000000000021ad65         db  0x00 ; '.'
000000000021ad66         db  0x00 ; '.'
000000000021ad67         db  0x00 ; '.'
000000000021ad68         db  0x00 ; '.'
000000000021ad69         db  0x00 ; '.'
000000000021ad6a         db  0x00 ; '.'
000000000021ad6b         db  0x00 ; '.'
000000000021ad6c         db  0x00 ; '.'
000000000021ad6d         db  0x00 ; '.'
000000000021ad6e         db  0x00 ; '.'
000000000021ad6f         db  0x00 ; '.'
000000000021ad70         db  0x00 ; '.'
000000000021ad71         db  0x00 ; '.'
000000000021ad72         db  0x00 ; '.'
000000000021ad73         db  0x00 ; '.'
000000000021ad74         db  0x00 ; '.'
000000000021ad75         db  0x00 ; '.'
000000000021ad76         db  0x00 ; '.'
000000000021ad77         db  0x00 ; '.'


        ; Section .got
        ; Range: [0x21ad78; 0x21afe8[ (624 bytes)
        ; File offset : [109944; 110568[ (624 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     _GLOBAL_OFFSET_TABLE_:
000000000021ad78         db  0x78 ; 'x'
000000000021ad79         db  0xab ; '.'
000000000021ad7a         db  0x21 ; '!'
000000000021ad7b         db  0x00 ; '.'
000000000021ad7c         db  0x00 ; '.'
000000000021ad7d         db  0x00 ; '.'
000000000021ad7e         db  0x00 ; '.'
000000000021ad7f         db  0x00 ; '.'
                     qword_21ad80:
000000000021ad80         dq         0x0000000000000000                          ; DATA XREF=0x19b0
000000000021ad88         db  0x00 ; '.'                                         ; DATA XREF=0x19b6
000000000021ad89         db  0x00 ; '.'
000000000021ad8a         db  0x00 ; '.'
000000000021ad8b         db  0x00 ; '.'
000000000021ad8c         db  0x00 ; '.'
000000000021ad8d         db  0x00 ; '.'
000000000021ad8e         db  0x00 ; '.'
000000000021ad8f         db  0x00 ; '.'
                     __ctype_toupper_loc@GOT:        // __ctype_toupper_loc
000000000021ad90         dq         0x000000000021b250                          ; DATA XREF=j___ctype_toupper_loc
                     free@GOT:        // free
000000000021ad98         dq         0x000000000021b258                          ; DATA XREF=j_free
                     abort@GOT:        // abort
000000000021ada0         dq         0x000000000021b260                          ; DATA XREF=j_abort
                     __errno_location@GOT:        // __errno_location
000000000021ada8         dq         0x000000000021b268                          ; DATA XREF=j___errno_location
                     strncmp@GOT:        // strncmp
000000000021adb0         dq         0x000000000021b278                          ; DATA XREF=j_strncmp
                     _exit@GOT:        // _exit
000000000021adb8         dq         0x000000000021b288                          ; DATA XREF=j__exit
                     __fpending@GOT:        // __fpending
000000000021adc0         dq         0x000000000021b290                          ; DATA XREF=j___fpending
                     puts@GOT:        // puts
000000000021adc8         dq         0x000000000021b298                          ; DATA XREF=j_puts
                     iswcntrl@GOT:        // iswcntrl
000000000021add0         dq         0x000000000021b2a0                          ; DATA XREF=j_iswcntrl
                     textdomain@GOT:        // textdomain
000000000021add8         dq         0x000000000021b2b0                          ; DATA XREF=j_textdomain
                     iswctype@GOT:        // iswctype
000000000021ade0         dq         0x000000000021b2b8                          ; DATA XREF=j_iswctype
                     fclose@GOT:        // fclose
000000000021ade8         dq         0x000000000021b2c0                          ; DATA XREF=j_fclose
                     bindtextdomain@GOT:        // bindtextdomain
000000000021adf0         dq         0x000000000021b2c8                          ; DATA XREF=j_bindtextdomain
                     dcgettext@GOT:        // dcgettext
000000000021adf8         dq         0x000000000021b2d0                          ; DATA XREF=j_dcgettext
                     __ctype_get_mb_cur_max@GOT:        // __ctype_get_mb_cur_max
000000000021ae00         dq         0x000000000021b2d8                          ; DATA XREF=j___ctype_get_mb_cur_max
                     strlen@GOT:        // strlen
000000000021ae08         dq         0x000000000021b2e0                          ; DATA XREF=j_strlen
                     __gmpz_get_str@GOT:        // __gmpz_get_str
000000000021ae10         dq         0x000000000021b2e8                          ; DATA XREF=j___gmpz_get_str
                     __stack_chk_fail@GOT:        // __stack_chk_fail
000000000021ae18         dq         0x000000000021b2f0                          ; DATA XREF=j___stack_chk_fail
                     getopt_long@GOT:        // getopt_long
000000000021ae20         dq         0x000000000021b2f8                          ; DATA XREF=j_getopt_long
                     mbrtowc@GOT:        // mbrtowc
000000000021ae28         dq         0x000000000021b300                          ; DATA XREF=j_mbrtowc
                     strchr@GOT:        // strchr
000000000021ae30         dq         0x000000000021b308                          ; DATA XREF=j_strchr
                     __overflow@GOT:        // __overflow
000000000021ae38         dq         0x000000000021b318                          ; DATA XREF=j___overflow
                     strrchr@GOT:        // strrchr
000000000021ae40         dq         0x000000000021b320                          ; DATA XREF=j_strrchr
                     lseek@GOT:        // lseek
000000000021ae48         dq         0x000000000021b328                          ; DATA XREF=j_lseek
                     __gmpz_out_str@GOT:        // __gmpz_out_str
000000000021ae50         dq         0x000000000021b330                          ; DATA XREF=j___gmpz_out_str
                     __assert_fail@GOT:        // __assert_fail
000000000021ae58         dq         0x000000000021b338                          ; DATA XREF=j___assert_fail
                     memset@GOT:        // memset
000000000021ae60         dq         0x000000000021b340                          ; DATA XREF=j_memset
                     strcspn@GOT:        // strcspn
000000000021ae68         dq         0x000000000021b348                          ; DATA XREF=j_strcspn
                     memchr@GOT:        // memchr
000000000021ae70         dq         0x000000000021b350                          ; DATA XREF=j_memchr
                     memcmp@GOT:        // memcmp
000000000021ae78         dq         0x000000000021b360                          ; DATA XREF=j_memcmp
                     wctype@GOT:        // wctype
000000000021ae80         dq         0x000000000021b368                          ; DATA XREF=j_wctype
                     fputs_unlocked@GOT:        // fputs_unlocked
000000000021ae88         dq         0x000000000021b370                          ; DATA XREF=j_fputs_unlocked
                     calloc@GOT:        // calloc
000000000021ae90         dq         0x000000000021b378                          ; DATA XREF=j_calloc
                     strcmp@GOT:        // strcmp
000000000021ae98         dq         0x000000000021b380                          ; DATA XREF=j_strcmp
                     memcpy@GOT:        // memcpy
000000000021aea0         dq         0x000000000021b390                          ; DATA XREF=j_memcpy
                     fileno@GOT:        // fileno
000000000021aea8         dq         0x000000000021b398                          ; DATA XREF=j_fileno
                     wcwidth@GOT:        // wcwidth
000000000021aeb0         dq         0x000000000021b3a8                          ; DATA XREF=j_wcwidth
                     iswalnum@GOT:        // iswalnum
000000000021aeb8         dq         0x000000000021b3b0                          ; DATA XREF=j_iswalnum
                     malloc@GOT:        // malloc
000000000021aec0         dq         0x000000000021b3b8                          ; DATA XREF=j_malloc
                     wcrtomb@GOT:        // wcrtomb
000000000021aec8         dq         0x000000000021b3c0                          ; DATA XREF=j_wcrtomb
                     fflush@GOT:        // fflush
000000000021aed0         dq         0x000000000021b3c8                          ; DATA XREF=j_fflush
                     __gmpz_clear@GOT:        // __gmpz_clear
000000000021aed8         dq         0x000000000021b3d0                          ; DATA XREF=j___gmpz_clear
                     nl_langinfo@GOT:        // nl_langinfo
000000000021aee0         dq         0x000000000021b3d8                          ; DATA XREF=j_nl_langinfo
                     strcoll@GOT:        // strcoll
000000000021aee8         dq         0x000000000021b3e0                          ; DATA XREF=j_strcoll
                     __freading@GOT:        // __freading
000000000021aef0         dq         0x000000000021b3e8                          ; DATA XREF=j___freading
                     realloc@GOT:        // realloc
000000000021aef8         dq         0x000000000021b3f0                          ; DATA XREF=j_realloc
                     setlocale@GOT:        // setlocale
000000000021af00         dq         0x000000000021b3f8                          ; DATA XREF=j_setlocale
                     __printf_chk@GOT:        // __printf_chk
000000000021af08         dq         0x000000000021b400                          ; DATA XREF=j___printf_chk
                     __gmpz_init_set_ui@GOT:        // __gmpz_init_set_ui
000000000021af10         dq         0x000000000021b408                          ; DATA XREF=j___gmpz_init_set_ui
                     btowc@GOT:        // btowc
000000000021af18         dq         0x000000000021b410                          ; DATA XREF=j_btowc
                     mempcpy@GOT:        // mempcpy
000000000021af20         dq         0x000000000021b418                          ; DATA XREF=j_mempcpy
                     memmove@GOT:        // memmove
000000000021af28         dq         0x000000000021b420                          ; DATA XREF=j_memmove
                     error@GOT:        // error
000000000021af30         dq         0x000000000021b428                          ; DATA XREF=j_error
                     fseeko@GOT:        // fseeko
000000000021af38         dq         0x000000000021b430                          ; DATA XREF=j_fseeko
                     towlower@GOT:        // towlower
000000000021af40         dq         0x000000000021b440                          ; DATA XREF=j_towlower
                     towupper@GOT:        // towupper
000000000021af48         dq         0x000000000021b448                          ; DATA XREF=j_towupper
                     __gmpz_init_set_str@GOT:        // __gmpz_init_set_str
000000000021af50         dq         0x000000000021b450                          ; DATA XREF=j___gmpz_init_set_str
                     __cxa_atexit@GOT:        // __cxa_atexit
000000000021af58         dq         0x000000000021b458                          ; DATA XREF=j___cxa_atexit
                     exit@GOT:        // exit
000000000021af60         dq         0x000000000021b460                          ; DATA XREF=j_exit
                     fwrite@GOT:        // fwrite
000000000021af68         dq         0x000000000021b468                          ; DATA XREF=j_fwrite
                     __fprintf_chk@GOT:        // __fprintf_chk
000000000021af70         dq         0x000000000021b470                          ; DATA XREF=j___fprintf_chk
                     mbsinit@GOT:        // mbsinit
000000000021af78         dq         0x000000000021b480                          ; DATA XREF=j_mbsinit
                     iswprint@GOT:        // iswprint
000000000021af80         dq         0x000000000021b488                          ; DATA XREF=j_iswprint
                     __ctype_tolower_loc@GOT:        // __ctype_tolower_loc
000000000021af88         dq         0x000000000021b498                          ; DATA XREF=j___ctype_tolower_loc
                     __ctype_b_loc@GOT:        // __ctype_b_loc
000000000021af90         dq         0x000000000021b4a0                          ; DATA XREF=j___ctype_b_loc
                     qword_21af98:
000000000021af98         dq         0x0000000000000000                          ; DATA XREF=eval4+232
                     qword_21afa0:
000000000021afa0         dq         0x0000000000000000                          ; DATA XREF=deregister_tm_clones+23
                     qword_21afa8:
000000000021afa8         dq         0x0000000000000000                          ; DATA XREF=eval3+97
                     qword_21afb0:
000000000021afb0         dq         0x0000000000000000                          ; DATA XREF=eval4+184
000000000021afb8         db  0x00 ; '.'                                         ; DATA XREF=_start+36
000000000021afb9         db  0x00 ; '.'
000000000021afba         db  0x00 ; '.'
000000000021afbb         db  0x00 ; '.'
000000000021afbc         db  0x00 ; '.'
000000000021afbd         db  0x00 ; '.'
000000000021afbe         db  0x00 ; '.'
000000000021afbf         db  0x00 ; '.'
                     qword_21afc0:
000000000021afc0         dq         0x0000000000000000                          ; DATA XREF=_init+4
                     qword_21afc8:
000000000021afc8         dq         0x0000000000000000                          ; DATA XREF=eval4+125
                     qword_21afd0:
000000000021afd0         dq         0x0000000000000000                          ; DATA XREF=eval3+152
                     qword_21afd8:
000000000021afd8         dq         0x0000000000000000                          ; DATA XREF=register_tm_clones+40
                     qword_21afe0:
000000000021afe0         dq         0x0000000000000000                          ; DATA XREF=j_qword_21afe0, __do_global_dtors_aux+9
000000000021afe8         db  0x00 ; '.'
000000000021afe9         db  0x00 ; '.'
000000000021afea         db  0x00 ; '.'
000000000021afeb         db  0x00 ; '.'
000000000021afec         db  0x00 ; '.'
000000000021afed         db  0x00 ; '.'
000000000021afee         db  0x00 ; '.'
000000000021afef         db  0x00 ; '.'
000000000021aff0         db  0x00 ; '.'
000000000021aff1         db  0x00 ; '.'
000000000021aff2         db  0x00 ; '.'
000000000021aff3         db  0x00 ; '.'
000000000021aff4         db  0x00 ; '.'
000000000021aff5         db  0x00 ; '.'
000000000021aff6         db  0x00 ; '.'
000000000021aff7         db  0x00 ; '.'
000000000021aff8         db  0x00 ; '.'
000000000021aff9         db  0x00 ; '.'
000000000021affa         db  0x00 ; '.'
000000000021affb         db  0x00 ; '.'
000000000021affc         db  0x00 ; '.'
000000000021affd         db  0x00 ; '.'
000000000021affe         db  0x00 ; '.'
000000000021afff         db  0x00 ; '.'


        ; Section .data
        ; Range: [0x21b000; 0x21b080[ (128 bytes)
        ; File offset : [110592; 110720[ (128 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

000000000021b000         db  0x00 ; '.'
000000000021b001         db  0x00 ; '.'
000000000021b002         db  0x00 ; '.'
000000000021b003         db  0x00 ; '.'
000000000021b004         db  0x00 ; '.'
000000000021b005         db  0x00 ; '.'
000000000021b006         db  0x00 ; '.'
000000000021b007         db  0x00 ; '.'
                     __dso_handle:
000000000021b008         dq         0x000000000021b008                          ; DATA XREF=__do_global_dtors_aux+23, atexit, __dso_handle
                     exit_failure:
000000000021b010         dd         0x00000001                                  ; DATA XREF=main+74, close_stdout+130, parse_gnu_standard_options_only+256, xalloc_die+23
000000000021b014         db  0x00 ; '.'
000000000021b015         db  0x00 ; '.'
000000000021b016         db  0x00 ; '.'
000000000021b017         db  0x00 ; '.'
000000000021b018         db  0x00 ; '.'
000000000021b019         db  0x00 ; '.'
000000000021b01a         db  0x00 ; '.'
000000000021b01b         db  0x00 ; '.'
000000000021b01c         db  0x00 ; '.'
000000000021b01d         db  0x00 ; '.'
000000000021b01e         db  0x00 ; '.'
000000000021b01f         db  0x00 ; '.'
                     quote_quoting_options:
000000000021b020         db  0x08 ; '.'                                         ; DATA XREF=quote_n_mem, quote_mem, quote_n, quote
000000000021b021         db  0x00 ; '.'
000000000021b022         db  0x00 ; '.'
000000000021b023         db  0x00 ; '.'
000000000021b024         db  0x00 ; '.'
000000000021b025         db  0x00 ; '.'
000000000021b026         db  0x00 ; '.'
000000000021b027         db  0x00 ; '.'
000000000021b028         db  0x00 ; '.'
000000000021b029         db  0x00 ; '.'
000000000021b02a         db  0x00 ; '.'
000000000021b02b         db  0x00 ; '.'
000000000021b02c         db  0x00 ; '.'
000000000021b02d         db  0x00 ; '.'
000000000021b02e         db  0x00 ; '.'
000000000021b02f         db  0x00 ; '.'
000000000021b030         db  0x00 ; '.'
000000000021b031         db  0x00 ; '.'
000000000021b032         db  0x00 ; '.'
000000000021b033         db  0x00 ; '.'
000000000021b034         db  0x00 ; '.'
000000000021b035         db  0x00 ; '.'
000000000021b036         db  0x00 ; '.'
000000000021b037         db  0x00 ; '.'
000000000021b038         db  0x00 ; '.'
000000000021b039         db  0x00 ; '.'
000000000021b03a         db  0x00 ; '.'
000000000021b03b         db  0x00 ; '.'
000000000021b03c         db  0x00 ; '.'
000000000021b03d         db  0x00 ; '.'
000000000021b03e         db  0x00 ; '.'
000000000021b03f         db  0x00 ; '.'
000000000021b040         db  0x00 ; '.'
000000000021b041         db  0x00 ; '.'
000000000021b042         db  0x00 ; '.'
000000000021b043         db  0x00 ; '.'
000000000021b044         db  0x00 ; '.'
000000000021b045         db  0x00 ; '.'
000000000021b046         db  0x00 ; '.'
000000000021b047         db  0x00 ; '.'
000000000021b048         db  0x00 ; '.'
000000000021b049         db  0x00 ; '.'
000000000021b04a         db  0x00 ; '.'
000000000021b04b         db  0x00 ; '.'
000000000021b04c         db  0x00 ; '.'
000000000021b04d         db  0x00 ; '.'
000000000021b04e         db  0x00 ; '.'
000000000021b04f         db  0x00 ; '.'
000000000021b050         db  0x00 ; '.'
000000000021b051         db  0x00 ; '.'
000000000021b052         db  0x00 ; '.'
000000000021b053         db  0x00 ; '.'
000000000021b054         db  0x00 ; '.'
000000000021b055         db  0x00 ; '.'
000000000021b056         db  0x00 ; '.'
000000000021b057         db  0x00 ; '.'
                     nslots:
000000000021b058         dd         0x00000001                                  ; DATA XREF=quotearg_n_options+58, quotearg_n_options+125, quotearg_n_options+158, quotearg_free, quotearg_free+133
000000000021b05c         align      32
                     slotvec:
000000000021b060         dq         0x000000000021b070                          ; DATA XREF=quotearg_n_options+41, quotearg_n_options+118, quotearg_n_options+402, quotearg_free+8, quotearg_free+125
000000000021b068         db  0x00 ; '.'
000000000021b069         db  0x00 ; '.'
000000000021b06a         db  0x00 ; '.'
000000000021b06b         db  0x00 ; '.'
000000000021b06c         db  0x00 ; '.'
000000000021b06d         db  0x00 ; '.'
000000000021b06e         db  0x00 ; '.'
000000000021b06f         db  0x00 ; '.'
                     slotvec0:
000000000021b070         dq         1.26481e-321, 1.0909e-317                   ; DATA XREF=quotearg_n_options+84, quotearg_n_options+391, quotearg_free+87, quotearg_free+105, slotvec


        ; Section .bss
        ; Range: [0x21b080; 0x21b240[ (448 bytes)
        ; No data on disk
        ; Flags: 0x3
        ;   SHT_NOBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     program_invocation_short_name@@GLIBC_2.2.5:
000000000021b080         db  0x00 ; '.'                                         ; DATA XREF=deregister_tm_clones, deregister_tm_clones+8, register_tm_clones, register_tm_clones+7, set_program_name+102
000000000021b081         db  0x00 ; '.'
000000000021b082         db  0x00 ; '.'
000000000021b083         db  0x00 ; '.'
000000000021b084         db  0x00 ; '.'
000000000021b085         db  0x00 ; '.'
000000000021b086         db  0x00 ; '.'
000000000021b087         db  0x00 ; '.'
                     stdout@@GLIBC_2.2.5:
000000000021b088         db  0x00 ; '.'                                         ; DATA XREF=main+278, main+299, usage+128, usage+160, usage+197, usage+234, usage+271, usage+308, usage+345, usage+382, usage+419
000000000021b089         db  0x00 ; '.'
000000000021b08a         db  0x00 ; '.'
000000000021b08b         db  0x00 ; '.'
000000000021b08c         db  0x00 ; '.'
000000000021b08d         db  0x00 ; '.'
000000000021b08e         db  0x00 ; '.'
000000000021b08f         db  0x00 ; '.'
                     optind@@GLIBC_2.2.5:
000000000021b090         db  0x00 ; '.'                                         ; DATA XREF=parse_long_options+141
000000000021b091         db  0x00 ; '.'
000000000021b092         db  0x00 ; '.'
000000000021b093         db  0x00 ; '.'
000000000021b094         db  0x00 ; '.'
000000000021b095         db  0x00 ; '.'
000000000021b096         db  0x00 ; '.'
000000000021b097         db  0x00 ; '.'
                     __progname_full@@GLIBC_2.2.5:
000000000021b098         db  0x00 ; '.'                                         ; DATA XREF=set_program_name+116
000000000021b099         db  0x00 ; '.'
000000000021b09a         db  0x00 ; '.'
000000000021b09b         db  0x00 ; '.'
000000000021b09c         db  0x00 ; '.'
000000000021b09d         db  0x00 ; '.'
000000000021b09e         db  0x00 ; '.'
000000000021b09f         db  0x00 ; '.'
                     opterr@@GLIBC_2.2.5:
000000000021b0a0         db  0x00 ; '.'                                         ; DATA XREF=parse_long_options+103, parse_long_options+109, parse_long_options+135, parse_gnu_standard_options_only+138, parse_gnu_standard_options_only+144, parse_gnu_standard_options_only+278
000000000021b0a1         db  0x00 ; '.'
000000000021b0a2         db  0x00 ; '.'
000000000021b0a3         db  0x00 ; '.'
000000000021b0a4         db  0x00 ; '.'
000000000021b0a5         db  0x00 ; '.'
000000000021b0a6         db  0x00 ; '.'
000000000021b0a7         db  0x00 ; '.'
000000000021b0a8         db  0x00 ; '.'
000000000021b0a9         db  0x00 ; '.'
000000000021b0aa         db  0x00 ; '.'
000000000021b0ab         db  0x00 ; '.'
000000000021b0ac         db  0x00 ; '.'
000000000021b0ad         db  0x00 ; '.'
000000000021b0ae         db  0x00 ; '.'
000000000021b0af         db  0x00 ; '.'
000000000021b0b0         db  0x00 ; '.'
000000000021b0b1         db  0x00 ; '.'
000000000021b0b2         db  0x00 ; '.'
000000000021b0b3         db  0x00 ; '.'
000000000021b0b4         db  0x00 ; '.'
000000000021b0b5         db  0x00 ; '.'
000000000021b0b6         db  0x00 ; '.'
000000000021b0b7         db  0x00 ; '.'
000000000021b0b8         db  0x00 ; '.'
000000000021b0b9         db  0x00 ; '.'
000000000021b0ba         db  0x00 ; '.'
000000000021b0bb         db  0x00 ; '.'
000000000021b0bc         db  0x00 ; '.'
000000000021b0bd         db  0x00 ; '.'
000000000021b0be         db  0x00 ; '.'
000000000021b0bf         db  0x00 ; '.'
                     stderr@@GLIBC_2.2.5:
000000000021b0c0         db  0x00 ; '.'                                         ; DATA XREF=usage+61, close_stdout+44, set_program_name+125
000000000021b0c1         db  0x00 ; '.'
000000000021b0c2         db  0x00 ; '.'
000000000021b0c3         db  0x00 ; '.'
000000000021b0c4         db  0x00 ; '.'
000000000021b0c5         db  0x00 ; '.'
000000000021b0c6         db  0x00 ; '.'
000000000021b0c7         db  0x00 ; '.'
                     completed.7697:
000000000021b0c8         db  0x00 ; '.'                                         ; DATA XREF=__do_global_dtors_aux, __do_global_dtors_aux+40
000000000021b0c9         db  0x00 ; '.'
000000000021b0ca         db  0x00 ; '.'
000000000021b0cb         db  0x00 ; '.'
000000000021b0cc         db  0x00 ; '.'
000000000021b0cd         db  0x00 ; '.'
000000000021b0ce         db  0x00 ; '.'
000000000021b0cf         db  0x00 ; '.'
                     args:
000000000021b0d0         db  0x00 ; '.'                                         ; DATA XREF=main+210, main+225, nextarg+1, nextarg+38, require_more_args, eval6+181, eval6+214, eval6+293, eval6+307
000000000021b0d1         db  0x00 ; '.'
000000000021b0d2         db  0x00 ; '.'
000000000021b0d3         db  0x00 ; '.'
000000000021b0d4         db  0x00 ; '.'
000000000021b0d5         db  0x00 ; '.'
000000000021b0d6         db  0x00 ; '.'
000000000021b0d7         db  0x00 ; '.'
                     ignore_EPIPE:
000000000021b0d8         db  0x00 ; '.'                                         ; DATA XREF=close_stdout_set_ignore_EPIPE, close_stdout+27
000000000021b0d9         db  0x00 ; '.'
000000000021b0da         db  0x00 ; '.'
000000000021b0db         db  0x00 ; '.'
000000000021b0dc         db  0x00 ; '.'
000000000021b0dd         db  0x00 ; '.'
000000000021b0de         db  0x00 ; '.'
000000000021b0df         db  0x00 ; '.'
                     file_name:
000000000021b0e0         db  0x00 ; '.'                                         ; DATA XREF=close_stdout_set_file_name, close_stdout+86
000000000021b0e1         db  0x00 ; '.'
000000000021b0e2         db  0x00 ; '.'
000000000021b0e3         db  0x00 ; '.'
000000000021b0e4         db  0x00 ; '.'
000000000021b0e5         db  0x00 ; '.'
000000000021b0e6         db  0x00 ; '.'
000000000021b0e7         db  0x00 ; '.'
                     program_name:
000000000021b0e8         db  0x00 ; '.'                                         ; DATA XREF=usage+20, set_program_name+109
000000000021b0e9         db  0x00 ; '.'
000000000021b0ea         db  0x00 ; '.'
000000000021b0eb         db  0x00 ; '.'
000000000021b0ec         db  0x00 ; '.'
000000000021b0ed         db  0x00 ; '.'
000000000021b0ee         db  0x00 ; '.'
000000000021b0ef         db  0x00 ; '.'
000000000021b0f0         db  0x00 ; '.'
000000000021b0f1         db  0x00 ; '.'
000000000021b0f2         db  0x00 ; '.'
000000000021b0f3         db  0x00 ; '.'
000000000021b0f4         db  0x00 ; '.'
000000000021b0f5         db  0x00 ; '.'
000000000021b0f6         db  0x00 ; '.'
000000000021b0f7         db  0x00 ; '.'
000000000021b0f8         db  0x00 ; '.'
000000000021b0f9         db  0x00 ; '.'
000000000021b0fa         db  0x00 ; '.'
000000000021b0fb         db  0x00 ; '.'
000000000021b0fc         db  0x00 ; '.'
000000000021b0fd         db  0x00 ; '.'
000000000021b0fe         db  0x00 ; '.'
000000000021b0ff         db  0x00 ; '.'
                     slot0:
000000000021b100         db  0x00 ; '.'                                         ; DATA XREF=quotearg_n_options+254, quotearg_free+70, slotvec0
000000000021b101         db  0x00 ; '.'
000000000021b102         db  0x00 ; '.'
000000000021b103         db  0x00 ; '.'
000000000021b104         db  0x00 ; '.'
000000000021b105         db  0x00 ; '.'
000000000021b106         db  0x00 ; '.'
000000000021b107         db  0x00 ; '.'
000000000021b108         db  0x00 ; '.'
000000000021b109         db  0x00 ; '.'
000000000021b10a         db  0x00 ; '.'
000000000021b10b         db  0x00 ; '.'
000000000021b10c         db  0x00 ; '.'
000000000021b10d         db  0x00 ; '.'
000000000021b10e         db  0x00 ; '.'
000000000021b10f         db  0x00 ; '.'
000000000021b110         db  0x00 ; '.'
000000000021b111         db  0x00 ; '.'
000000000021b112         db  0x00 ; '.'
000000000021b113         db  0x00 ; '.'
000000000021b114         db  0x00 ; '.'
000000000021b115         db  0x00 ; '.'
000000000021b116         db  0x00 ; '.'
000000000021b117         db  0x00 ; '.'
000000000021b118         db  0x00 ; '.'
000000000021b119         db  0x00 ; '.'
000000000021b11a         db  0x00 ; '.'
000000000021b11b         db  0x00 ; '.'
000000000021b11c         db  0x00 ; '.'
000000000021b11d         db  0x00 ; '.'
000000000021b11e         db  0x00 ; '.'
000000000021b11f         db  0x00 ; '.'
000000000021b120         db  0x00 ; '.'
000000000021b121         db  0x00 ; '.'
000000000021b122         db  0x00 ; '.'
000000000021b123         db  0x00 ; '.'
000000000021b124         db  0x00 ; '.'
000000000021b125         db  0x00 ; '.'
000000000021b126         db  0x00 ; '.'
000000000021b127         db  0x00 ; '.'
000000000021b128         db  0x00 ; '.'
000000000021b129         db  0x00 ; '.'
000000000021b12a         db  0x00 ; '.'
000000000021b12b         db  0x00 ; '.'
000000000021b12c         db  0x00 ; '.'
000000000021b12d         db  0x00 ; '.'
000000000021b12e         db  0x00 ; '.'
000000000021b12f         db  0x00 ; '.'
000000000021b130         db  0x00 ; '.'
000000000021b131         db  0x00 ; '.'
000000000021b132         db  0x00 ; '.'
000000000021b133         db  0x00 ; '.'
000000000021b134         db  0x00 ; '.'
000000000021b135         db  0x00 ; '.'
000000000021b136         db  0x00 ; '.'
000000000021b137         db  0x00 ; '.'
000000000021b138         db  0x00 ; '.'
000000000021b139         db  0x00 ; '.'
000000000021b13a         db  0x00 ; '.'
000000000021b13b         db  0x00 ; '.'
000000000021b13c         db  0x00 ; '.'
000000000021b13d         db  0x00 ; '.'
000000000021b13e         db  0x00 ; '.'
000000000021b13f         db  0x00 ; '.'
000000000021b140         db  0x00 ; '.'
000000000021b141         db  0x00 ; '.'
000000000021b142         db  0x00 ; '.'
000000000021b143         db  0x00 ; '.'
000000000021b144         db  0x00 ; '.'
000000000021b145         db  0x00 ; '.'
000000000021b146         db  0x00 ; '.'
000000000021b147         db  0x00 ; '.'
000000000021b148         db  0x00 ; '.'
000000000021b149         db  0x00 ; '.'
000000000021b14a         db  0x00 ; '.'
000000000021b14b         db  0x00 ; '.'
000000000021b14c         db  0x00 ; '.'
000000000021b14d         db  0x00 ; '.'
000000000021b14e         db  0x00 ; '.'
000000000021b14f         db  0x00 ; '.'
000000000021b150         db  0x00 ; '.'
000000000021b151         db  0x00 ; '.'
000000000021b152         db  0x00 ; '.'
000000000021b153         db  0x00 ; '.'
000000000021b154         db  0x00 ; '.'
000000000021b155         db  0x00 ; '.'
000000000021b156         db  0x00 ; '.'
000000000021b157         db  0x00 ; '.'
000000000021b158         db  0x00 ; '.'
000000000021b159         db  0x00 ; '.'
000000000021b15a         db  0x00 ; '.'
000000000021b15b         db  0x00 ; '.'
000000000021b15c         db  0x00 ; '.'
000000000021b15d         db  0x00 ; '.'
000000000021b15e         db  0x00 ; '.'
000000000021b15f         db  0x00 ; '.'
000000000021b160         db  0x00 ; '.'
000000000021b161         db  0x00 ; '.'
000000000021b162         db  0x00 ; '.'
000000000021b163         db  0x00 ; '.'
000000000021b164         db  0x00 ; '.'
000000000021b165         db  0x00 ; '.'
000000000021b166         db  0x00 ; '.'
000000000021b167         db  0x00 ; '.'
000000000021b168         db  0x00 ; '.'
000000000021b169         db  0x00 ; '.'
000000000021b16a         db  0x00 ; '.'
000000000021b16b         db  0x00 ; '.'
000000000021b16c         db  0x00 ; '.'
000000000021b16d         db  0x00 ; '.'
000000000021b16e         db  0x00 ; '.'
000000000021b16f         db  0x00 ; '.'
000000000021b170         db  0x00 ; '.'
000000000021b171         db  0x00 ; '.'
000000000021b172         db  0x00 ; '.'
000000000021b173         db  0x00 ; '.'
000000000021b174         db  0x00 ; '.'
000000000021b175         db  0x00 ; '.'
000000000021b176         db  0x00 ; '.'
000000000021b177         db  0x00 ; '.'
000000000021b178         db  0x00 ; '.'
000000000021b179         db  0x00 ; '.'
000000000021b17a         db  0x00 ; '.'
000000000021b17b         db  0x00 ; '.'
000000000021b17c         db  0x00 ; '.'
000000000021b17d         db  0x00 ; '.'
000000000021b17e         db  0x00 ; '.'
000000000021b17f         db  0x00 ; '.'
000000000021b180         db  0x00 ; '.'
000000000021b181         db  0x00 ; '.'
000000000021b182         db  0x00 ; '.'
000000000021b183         db  0x00 ; '.'
000000000021b184         db  0x00 ; '.'
000000000021b185         db  0x00 ; '.'
000000000021b186         db  0x00 ; '.'
000000000021b187         db  0x00 ; '.'
000000000021b188         db  0x00 ; '.'
000000000021b189         db  0x00 ; '.'
000000000021b18a         db  0x00 ; '.'
000000000021b18b         db  0x00 ; '.'
000000000021b18c         db  0x00 ; '.'
000000000021b18d         db  0x00 ; '.'
000000000021b18e         db  0x00 ; '.'
000000000021b18f         db  0x00 ; '.'
000000000021b190         db  0x00 ; '.'
000000000021b191         db  0x00 ; '.'
000000000021b192         db  0x00 ; '.'
000000000021b193         db  0x00 ; '.'
000000000021b194         db  0x00 ; '.'
000000000021b195         db  0x00 ; '.'
000000000021b196         db  0x00 ; '.'
000000000021b197         db  0x00 ; '.'
000000000021b198         db  0x00 ; '.'
000000000021b199         db  0x00 ; '.'
000000000021b19a         db  0x00 ; '.'
000000000021b19b         db  0x00 ; '.'
000000000021b19c         db  0x00 ; '.'
000000000021b19d         db  0x00 ; '.'
000000000021b19e         db  0x00 ; '.'
000000000021b19f         db  0x00 ; '.'
000000000021b1a0         db  0x00 ; '.'
000000000021b1a1         db  0x00 ; '.'
000000000021b1a2         db  0x00 ; '.'
000000000021b1a3         db  0x00 ; '.'
000000000021b1a4         db  0x00 ; '.'
000000000021b1a5         db  0x00 ; '.'
000000000021b1a6         db  0x00 ; '.'
000000000021b1a7         db  0x00 ; '.'
000000000021b1a8         db  0x00 ; '.'
000000000021b1a9         db  0x00 ; '.'
000000000021b1aa         db  0x00 ; '.'
000000000021b1ab         db  0x00 ; '.'
000000000021b1ac         db  0x00 ; '.'
000000000021b1ad         db  0x00 ; '.'
000000000021b1ae         db  0x00 ; '.'
000000000021b1af         db  0x00 ; '.'
000000000021b1b0         db  0x00 ; '.'
000000000021b1b1         db  0x00 ; '.'
000000000021b1b2         db  0x00 ; '.'
000000000021b1b3         db  0x00 ; '.'
000000000021b1b4         db  0x00 ; '.'
000000000021b1b5         db  0x00 ; '.'
000000000021b1b6         db  0x00 ; '.'
000000000021b1b7         db  0x00 ; '.'
000000000021b1b8         db  0x00 ; '.'
000000000021b1b9         db  0x00 ; '.'
000000000021b1ba         db  0x00 ; '.'
000000000021b1bb         db  0x00 ; '.'
000000000021b1bc         db  0x00 ; '.'
000000000021b1bd         db  0x00 ; '.'
000000000021b1be         db  0x00 ; '.'
000000000021b1bf         db  0x00 ; '.'
000000000021b1c0         db  0x00 ; '.'
000000000021b1c1         db  0x00 ; '.'
000000000021b1c2         db  0x00 ; '.'
000000000021b1c3         db  0x00 ; '.'
000000000021b1c4         db  0x00 ; '.'
000000000021b1c5         db  0x00 ; '.'
000000000021b1c6         db  0x00 ; '.'
000000000021b1c7         db  0x00 ; '.'
000000000021b1c8         db  0x00 ; '.'
000000000021b1c9         db  0x00 ; '.'
000000000021b1ca         db  0x00 ; '.'
000000000021b1cb         db  0x00 ; '.'
000000000021b1cc         db  0x00 ; '.'
000000000021b1cd         db  0x00 ; '.'
000000000021b1ce         db  0x00 ; '.'
000000000021b1cf         db  0x00 ; '.'
000000000021b1d0         db  0x00 ; '.'
000000000021b1d1         db  0x00 ; '.'
000000000021b1d2         db  0x00 ; '.'
000000000021b1d3         db  0x00 ; '.'
000000000021b1d4         db  0x00 ; '.'
000000000021b1d5         db  0x00 ; '.'
000000000021b1d6         db  0x00 ; '.'
000000000021b1d7         db  0x00 ; '.'
000000000021b1d8         db  0x00 ; '.'
000000000021b1d9         db  0x00 ; '.'
000000000021b1da         db  0x00 ; '.'
000000000021b1db         db  0x00 ; '.'
000000000021b1dc         db  0x00 ; '.'
000000000021b1dd         db  0x00 ; '.'
000000000021b1de         db  0x00 ; '.'
000000000021b1df         db  0x00 ; '.'
000000000021b1e0         db  0x00 ; '.'
000000000021b1e1         db  0x00 ; '.'
000000000021b1e2         db  0x00 ; '.'
000000000021b1e3         db  0x00 ; '.'
000000000021b1e4         db  0x00 ; '.'
000000000021b1e5         db  0x00 ; '.'
000000000021b1e6         db  0x00 ; '.'
000000000021b1e7         db  0x00 ; '.'
000000000021b1e8         db  0x00 ; '.'
000000000021b1e9         db  0x00 ; '.'
000000000021b1ea         db  0x00 ; '.'
000000000021b1eb         db  0x00 ; '.'
000000000021b1ec         db  0x00 ; '.'
000000000021b1ed         db  0x00 ; '.'
000000000021b1ee         db  0x00 ; '.'
000000000021b1ef         db  0x00 ; '.'
000000000021b1f0         db  0x00 ; '.'
000000000021b1f1         db  0x00 ; '.'
000000000021b1f2         db  0x00 ; '.'
000000000021b1f3         db  0x00 ; '.'
000000000021b1f4         db  0x00 ; '.'
000000000021b1f5         db  0x00 ; '.'
000000000021b1f6         db  0x00 ; '.'
000000000021b1f7         db  0x00 ; '.'
000000000021b1f8         db  0x00 ; '.'
000000000021b1f9         db  0x00 ; '.'
000000000021b1fa         db  0x00 ; '.'
000000000021b1fb         db  0x00 ; '.'
000000000021b1fc         db  0x00 ; '.'
000000000021b1fd         db  0x00 ; '.'
000000000021b1fe         db  0x00 ; '.'
000000000021b1ff         db  0x00 ; '.'
                     default_quoting_options:
000000000021b200         db  0x00 ; '.'                                         ; DATA XREF=clone_quoting_options+18, get_quoting_style, set_quoting_style, set_char_quoting, set_quoting_flags, set_custom_quoting, quotearg_buffer+4, quotearg_alloc_mem+4, quotearg_n, quotearg_n_mem, quotearg
000000000021b201         db  0x00 ; '.'
000000000021b202         db  0x00 ; '.'
000000000021b203         db  0x00 ; '.'
000000000021b204         db  0x00 ; '.'
000000000021b205         db  0x00 ; '.'
000000000021b206         db  0x00 ; '.'
000000000021b207         db  0x00 ; '.'
000000000021b208         db  0x00 ; '.'
000000000021b209         db  0x00 ; '.'
000000000021b20a         db  0x00 ; '.'
000000000021b20b         db  0x00 ; '.'
000000000021b20c         db  0x00 ; '.'
000000000021b20d         db  0x00 ; '.'
000000000021b20e         db  0x00 ; '.'
000000000021b20f         db  0x00 ; '.'
000000000021b210         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+65, quotearg_n_custom_mem+57
000000000021b211         db  0x00 ; '.'
000000000021b212         db  0x00 ; '.'
000000000021b213         db  0x00 ; '.'
000000000021b214         db  0x00 ; '.'
000000000021b215         db  0x00 ; '.'
000000000021b216         db  0x00 ; '.'
000000000021b217         db  0x00 ; '.'
000000000021b218         db  0x00 ; '.'
000000000021b219         db  0x00 ; '.'
000000000021b21a         db  0x00 ; '.'
000000000021b21b         db  0x00 ; '.'
000000000021b21c         db  0x00 ; '.'
000000000021b21d         db  0x00 ; '.'
000000000021b21e         db  0x00 ; '.'
000000000021b21f         db  0x00 ; '.'
000000000021b220         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+78, quotearg_n_custom_mem+70
000000000021b221         db  0x00 ; '.'
000000000021b222         db  0x00 ; '.'
000000000021b223         db  0x00 ; '.'
000000000021b224         db  0x00 ; '.'
000000000021b225         db  0x00 ; '.'
000000000021b226         db  0x00 ; '.'
000000000021b227         db  0x00 ; '.'
000000000021b228         db  0x00 ; '.'
000000000021b229         db  0x00 ; '.'
000000000021b22a         db  0x00 ; '.'
000000000021b22b         db  0x00 ; '.'
000000000021b22c         db  0x00 ; '.'
000000000021b22d         db  0x00 ; '.'
000000000021b22e         db  0x00 ; '.'
000000000021b22f         db  0x00 ; '.'
                     qword_21b230:
000000000021b230         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+22, quotearg_n_custom_mem+7
000000000021b231         db  0x00 ; '.'
000000000021b232         db  0x00 ; '.'
000000000021b233         db  0x00 ; '.'
000000000021b234         db  0x00 ; '.'
000000000021b235         db  0x00 ; '.'
000000000021b236         db  0x00 ; '.'
000000000021b237         db  0x00 ; '.'
                     rpl_re_syntax_options:
000000000021b238         db  0x00 ; '.'                                         ; DATA XREF=docolon+134, rpl_re_compile_pattern+4, rpl_re_set_syntax, rpl_re_set_syntax+7
000000000021b239         db  0x00 ; '.'
000000000021b23a         db  0x00 ; '.'
000000000021b23b         db  0x00 ; '.'
000000000021b23c         db  0x00 ; '.'
000000000021b23d         db  0x00 ; '.'
000000000021b23e         db  0x00 ; '.'
000000000021b23f         db  0x00 ; '.'


        ; Segment External Symbols
        ; Range: [0x21b250; 0x21b700[ (1200 bytes)
        ; No data on disk
        ; Permissions:  - 



        ; Section External Symbols Section
        ; Range: [0x21b250; 0x436950[ (2209536 bytes)
        ; No data on disk

                             ; External Symbols Segment
                     __ctype_toupper_loc:
000000000021b250         extern function code                                   ; DATA XREF=__ctype_toupper_loc@GOT
                     free:
000000000021b258         extern function code                                   ; DATA XREF=free@GOT
                     abort:
000000000021b260         extern function code                                   ; DATA XREF=abort@GOT
                     __errno_location:
000000000021b268         extern function code                                   ; DATA XREF=__errno_location@GOT
                     __gmpz_tdiv_q:
000000000021b270         extern function code
                     strncmp:
000000000021b278         extern function code                                   ; DATA XREF=strncmp@GOT
                     _ITM_deregisterTMCloneTable:
000000000021b280         extern function code
                     _exit:
000000000021b288         extern function code                                   ; DATA XREF=_exit@GOT
                     __fpending:
000000000021b290         extern function code                                   ; DATA XREF=__fpending@GOT
                     puts:
000000000021b298         extern function code                                   ; DATA XREF=puts@GOT
                     iswcntrl:
000000000021b2a0         extern function code                                   ; DATA XREF=iswcntrl@GOT
                     __gmpz_sub:
000000000021b2a8         extern function code
                     textdomain:
000000000021b2b0         extern function code                                   ; DATA XREF=textdomain@GOT
                     iswctype:
000000000021b2b8         extern function code                                   ; DATA XREF=iswctype@GOT
                     fclose:
000000000021b2c0         extern function code                                   ; DATA XREF=fclose@GOT
                     bindtextdomain:
000000000021b2c8         extern function code                                   ; DATA XREF=bindtextdomain@GOT
                     dcgettext:
000000000021b2d0         extern function code                                   ; DATA XREF=dcgettext@GOT
                     __ctype_get_mb_cur_max:
000000000021b2d8         extern function code                                   ; DATA XREF=__ctype_get_mb_cur_max@GOT
                     strlen:
000000000021b2e0         extern function code                                   ; DATA XREF=strlen@GOT
                     __gmpz_get_str:
000000000021b2e8         extern function code                                   ; DATA XREF=__gmpz_get_str@GOT
                     __stack_chk_fail:
000000000021b2f0         extern function code                                   ; DATA XREF=__stack_chk_fail@GOT
                     getopt_long:
000000000021b2f8         extern function code                                   ; DATA XREF=getopt_long@GOT
                     mbrtowc:
000000000021b300         extern function code                                   ; DATA XREF=mbrtowc@GOT
                     strchr:
000000000021b308         extern function code                                   ; DATA XREF=strchr@GOT
                     __gmpz_mul:
000000000021b310         extern function code
                     __overflow:
000000000021b318         extern function code                                   ; DATA XREF=__overflow@GOT
                     strrchr:
000000000021b320         extern function code                                   ; DATA XREF=strrchr@GOT
                     lseek:
000000000021b328         extern function code                                   ; DATA XREF=lseek@GOT
                     __gmpz_out_str:
000000000021b330         extern function code                                   ; DATA XREF=__gmpz_out_str@GOT
                     __assert_fail:
000000000021b338         extern function code                                   ; DATA XREF=__assert_fail@GOT
                     memset:
000000000021b340         extern function code                                   ; DATA XREF=memset@GOT
                     strcspn:
000000000021b348         extern function code                                   ; DATA XREF=strcspn@GOT
                     memchr:
000000000021b350         extern function code                                   ; DATA XREF=memchr@GOT
                     __libc_start_main:
000000000021b358         extern function code
                     memcmp:
000000000021b360         extern function code                                   ; DATA XREF=memcmp@GOT
                     wctype:
000000000021b368         extern function code                                   ; DATA XREF=wctype@GOT
                     fputs_unlocked:
000000000021b370         extern function code                                   ; DATA XREF=fputs_unlocked@GOT
                     calloc:
000000000021b378         extern function code                                   ; DATA XREF=calloc@GOT
                     strcmp:
000000000021b380         extern function code                                   ; DATA XREF=strcmp@GOT
                     __gmon_start__:
000000000021b388         extern function code
                     memcpy:
000000000021b390         extern function code                                   ; DATA XREF=memcpy@GOT
                     fileno:
000000000021b398         extern function code                                   ; DATA XREF=fileno@GOT
                     __gmpz_tdiv_r:
000000000021b3a0         extern function code
                     wcwidth:
000000000021b3a8         extern function code                                   ; DATA XREF=wcwidth@GOT
                     iswalnum:
000000000021b3b0         extern function code                                   ; DATA XREF=iswalnum@GOT
                     malloc:
000000000021b3b8         extern function code                                   ; DATA XREF=malloc@GOT
                     wcrtomb:
000000000021b3c0         extern function code                                   ; DATA XREF=wcrtomb@GOT
                     fflush:
000000000021b3c8         extern function code                                   ; DATA XREF=fflush@GOT
                     __gmpz_clear:
000000000021b3d0         extern function code                                   ; DATA XREF=__gmpz_clear@GOT
                     nl_langinfo:
000000000021b3d8         extern function code                                   ; DATA XREF=nl_langinfo@GOT
                     strcoll:
000000000021b3e0         extern function code                                   ; DATA XREF=strcoll@GOT
                     __freading:
000000000021b3e8         extern function code                                   ; DATA XREF=__freading@GOT
                     realloc:
000000000021b3f0         extern function code                                   ; DATA XREF=realloc@GOT
                     setlocale:
000000000021b3f8         extern function code                                   ; DATA XREF=setlocale@GOT
                     __printf_chk:
000000000021b400         extern function code                                   ; DATA XREF=__printf_chk@GOT
                     __gmpz_init_set_ui:
000000000021b408         extern function code                                   ; DATA XREF=__gmpz_init_set_ui@GOT
                     btowc:
000000000021b410         extern function code                                   ; DATA XREF=btowc@GOT
                     mempcpy:
000000000021b418         extern function code                                   ; DATA XREF=mempcpy@GOT
                     memmove:
000000000021b420         extern function code                                   ; DATA XREF=memmove@GOT
                     error:
000000000021b428         extern function code                                   ; DATA XREF=error@GOT
                     fseeko:
000000000021b430         extern function code                                   ; DATA XREF=fseeko@GOT
                     __gmpz_add:
000000000021b438         extern function code
                     towlower:
000000000021b440         extern function code                                   ; DATA XREF=towlower@GOT
                     towupper:
000000000021b448         extern function code                                   ; DATA XREF=towupper@GOT
                     __gmpz_init_set_str:
000000000021b450         extern function code                                   ; DATA XREF=__gmpz_init_set_str@GOT
                     __cxa_atexit:
000000000021b458         extern function code                                   ; DATA XREF=__cxa_atexit@GOT
                     exit:
000000000021b460         extern function code                                   ; DATA XREF=exit@GOT
                     fwrite:
000000000021b468         extern function code                                   ; DATA XREF=fwrite@GOT
                     __fprintf_chk:
000000000021b470         extern function code                                   ; DATA XREF=__fprintf_chk@GOT
                     _ITM_registerTMCloneTable:
000000000021b478         extern function code
                     mbsinit:
000000000021b480         extern function code                                   ; DATA XREF=mbsinit@GOT
                     iswprint:
000000000021b488         extern function code                                   ; DATA XREF=iswprint@GOT
                     __cxa_finalize:
000000000021b490         extern function code
                     __ctype_tolower_loc:
000000000021b498         extern function code                                   ; DATA XREF=__ctype_tolower_loc@GOT
                     __ctype_b_loc:
000000000021b4a0         extern function code                                   ; DATA XREF=__ctype_b_loc@GOT
                     __ctype_toupper_loc@@GLIBC_2.3:
000000000021b4a8         extern function code
                     free@@GLIBC_2.2.5:
000000000021b4b0         extern function code
                     abort@@GLIBC_2.2.5:
000000000021b4b8         extern function code
                     __errno_location@@GLIBC_2.2.5:
000000000021b4c0         extern function code
                     __gmpz_tdiv_q_21b4c8:        // __gmpz_tdiv_q
000000000021b4c8         extern function code
                     strncmp@@GLIBC_2.2.5:
000000000021b4d0         extern function code
                     _ITM_deregisterTMCloneTable_21b4d8:        // _ITM_deregisterTMCloneTable
000000000021b4d8         extern function code
                     _exit@@GLIBC_2.2.5:
000000000021b4e0         extern function code
                     __fpending@@GLIBC_2.2.5:
000000000021b4e8         extern function code
                     puts@@GLIBC_2.2.5:
000000000021b4f0         extern function code
                     iswcntrl@@GLIBC_2.2.5:
000000000021b4f8         extern function code
                     __gmpz_sub_21b500:        // __gmpz_sub
000000000021b500         extern function code
                     textdomain@@GLIBC_2.2.5:
000000000021b508         extern function code
                     iswctype@@GLIBC_2.2.5:
000000000021b510         extern function code
                     fclose@@GLIBC_2.2.5:
000000000021b518         extern function code
                     bindtextdomain@@GLIBC_2.2.5:
000000000021b520         extern function code
                     dcgettext@@GLIBC_2.2.5:
000000000021b528         extern function code
                     __ctype_get_mb_cur_max@@GLIBC_2.2.5:
000000000021b530         extern function code
                     strlen@@GLIBC_2.2.5:
000000000021b538         extern function code
                     __gmpz_get_str_21b540:        // __gmpz_get_str
000000000021b540         extern function code
                     __stack_chk_fail@@GLIBC_2.4:
000000000021b548         extern function code
                     getopt_long@@GLIBC_2.2.5:
000000000021b550         extern function code
                     mbrtowc@@GLIBC_2.2.5:
000000000021b558         extern function code
                     strchr@@GLIBC_2.2.5:
000000000021b560         extern function code
                     __gmpz_mul_21b568:        // __gmpz_mul
000000000021b568         extern function code
                     __overflow@@GLIBC_2.2.5:
000000000021b570         extern function code
                     strrchr@@GLIBC_2.2.5:
000000000021b578         extern function code
                     lseek@@GLIBC_2.2.5:
000000000021b580         extern function code
                     __gmpz_out_str_21b588:        // __gmpz_out_str
000000000021b588         extern function code
                     __assert_fail@@GLIBC_2.2.5:
000000000021b590         extern function code
                     memset@@GLIBC_2.2.5:
000000000021b598         extern function code
                     strcspn@@GLIBC_2.2.5:
000000000021b5a0         extern function code
                     memchr@@GLIBC_2.2.5:
000000000021b5a8         extern function code
                     __libc_start_main@@GLIBC_2.2.5:
000000000021b5b0         extern function code
                     memcmp@@GLIBC_2.2.5:
000000000021b5b8         extern function code
                     wctype@@GLIBC_2.2.5:
000000000021b5c0         extern function code
                     fputs_unlocked@@GLIBC_2.2.5:
000000000021b5c8         extern function code
                     calloc@@GLIBC_2.2.5:
000000000021b5d0         extern function code
                     strcmp@@GLIBC_2.2.5:
000000000021b5d8         extern function code
                     __gmon_start___21b5e0:        // __gmon_start__
000000000021b5e0         extern function code
                     memcpy@@GLIBC_2.14:
000000000021b5e8         extern function code
                     fileno@@GLIBC_2.2.5:
000000000021b5f0         extern function code
                     __gmpz_tdiv_r_21b5f8:        // __gmpz_tdiv_r
000000000021b5f8         extern function code
                     wcwidth@@GLIBC_2.2.5:
000000000021b600         extern function code
                     iswalnum@@GLIBC_2.2.5:
000000000021b608         extern function code
                     malloc@@GLIBC_2.2.5:
000000000021b610         extern function code
                     wcrtomb@@GLIBC_2.2.5:
000000000021b618         extern function code
                     fflush@@GLIBC_2.2.5:
000000000021b620         extern function code
                     __gmpz_clear_21b628:        // __gmpz_clear
000000000021b628         extern function code
                     nl_langinfo@@GLIBC_2.2.5:
000000000021b630         extern function code
                     strcoll@@GLIBC_2.2.5:
000000000021b638         extern function code
                     __freading@@GLIBC_2.2.5:
000000000021b640         extern function code
                     realloc@@GLIBC_2.2.5:
000000000021b648         extern function code
                     setlocale@@GLIBC_2.2.5:
000000000021b650         extern function code
                     __printf_chk@@GLIBC_2.3.4:
000000000021b658         extern function code
                     __gmpz_init_set_ui_21b660:        // __gmpz_init_set_ui
000000000021b660         extern function code
                     btowc@@GLIBC_2.2.5:
000000000021b668         extern function code
                     mempcpy@@GLIBC_2.2.5:
000000000021b670         extern function code
                     memmove@@GLIBC_2.2.5:
000000000021b678         extern function code
                     error@@GLIBC_2.2.5:
000000000021b680         extern function code
                     fseeko@@GLIBC_2.2.5:
000000000021b688         extern function code
                     __gmpz_add_21b690:        // __gmpz_add
000000000021b690         extern function code
                     towlower@@GLIBC_2.2.5:
000000000021b698         extern function code
                     towupper@@GLIBC_2.2.5:
000000000021b6a0         extern function code
                     __gmpz_init_set_str_21b6a8:        // __gmpz_init_set_str
000000000021b6a8         extern function code
                     __cxa_atexit@@GLIBC_2.2.5:
000000000021b6b0         extern function code
                     exit@@GLIBC_2.2.5:
000000000021b6b8         extern function code
                     fwrite@@GLIBC_2.2.5:
000000000021b6c0         extern function code
                     __fprintf_chk@@GLIBC_2.3.4:
000000000021b6c8         extern function code
                     _ITM_registerTMCloneTable_21b6d0:        // _ITM_registerTMCloneTable
000000000021b6d0         extern function code
                     mbsinit@@GLIBC_2.2.5:
000000000021b6d8         extern function code
                     iswprint@@GLIBC_2.2.5:
000000000021b6e0         extern function code
                     __cxa_finalize@@GLIBC_2.2.5:
000000000021b6e8         extern function code
                     __ctype_tolower_loc@@GLIBC_2.3:
000000000021b6f0         extern function code
                     __ctype_b_loc@@GLIBC_2.3:
000000000021b6f8         extern function code
